// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 2217 0 0
// PrepareArabian ;
  23: CALL 1234 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5840 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_OWVAR 67
 672: ARRAY
 673: PPUSH
 674: CALL 504 0 2
// for i := 1 to 2 do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_INT 2
 690: PUSH
 691: FOR_TO
 692: IFFALSE 729
// begin hc_class := 21 ;
 694: LD_ADDR_OWVAR 28
 698: PUSH
 699: LD_INT 21
 701: ST_TO_ADDR
// hc_gallery :=  ;
 702: LD_ADDR_OWVAR 33
 706: PUSH
 707: LD_STRING 
 709: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 691
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 782
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end ;
 780: GO 744
 782: POP
 783: POP
// for i := 1 to 2 do
 784: LD_ADDR_VAR 0 3
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 2
 796: PUSH
 797: FOR_TO
 798: IFFALSE 835
// begin hc_class := 13 ;
 800: LD_ADDR_OWVAR 28
 804: PUSH
 805: LD_INT 13
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 816: CALL_OW 44
 820: PPUSH
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 49
// end ;
 833: GO 797
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 2
 841: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
// if not observer or not unit then
 847: LD_VAR 0 1
 851: NOT
 852: PUSH
 853: LD_VAR 0 2
 857: NOT
 858: OR
 859: IFFALSE 863
// exit ;
 861: GO 911
// if not See ( GetSide ( observer ) , unit ) then
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 292
 882: NOT
 883: IFFALSE 887
// exit ;
 885: GO 911
// result := GetDistUnits ( observer , unit ) < 12 ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 296
 906: PUSH
 907: LD_INT 12
 909: LESS
 910: ST_TO_ADDR
// end ;
 911: LD_VAR 0 3
 915: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 916: LD_INT 0
 918: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: CALL_OW 488
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ;
1003: LD_VAR 0 4
1007: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
1014: PPUSH
// if not unit then
1015: LD_VAR 0 1
1019: NOT
1020: IFFALSE 1024
// exit ;
1022: GO 1229
// side := GetSide ( unit ) ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 255
1038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_VAR 0 4
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_VAR 0 2
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 69
1076: ST_TO_ADDR
// if not tmp then
1077: LD_VAR 0 5
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1229
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 5
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 35817 0 4
1111: ST_TO_ADDR
// places := 1 ;
1112: LD_ADDR_VAR 0 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 7
1148: PUSH
1149: LD_INT 8
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1173
// places := 6 ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// for i in tmp do
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: LD_VAR 0 5
1182: PUSH
1183: FOR_IN
1184: IFFALSE 1227
// begin if UnitsInside ( i ) - places <= 0 then
1186: LD_VAR 0 6
1190: PPUSH
1191: CALL_OW 313
1195: PUSH
1196: LD_VAR 0 7
1200: MINUS
1201: PUSH
1202: LD_INT 0
1204: LESSEQUAL
1205: IFFALSE 1211
// continue else
1207: GO 1183
1209: GO 1225
// begin result := i ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_VAR 0 6
1220: ST_TO_ADDR
// exit ;
1221: POP
1222: POP
1223: GO 1229
// end ; end ;
1225: GO 1183
1227: POP
1228: POP
// end ; end_of_file
1229: LD_VAR 0 3
1233: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1234: LD_INT 0
1236: PPUSH
1237: PPUSH
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// uc_nation := 2 ;
1246: LD_ADDR_OWVAR 21
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1254: LD_ADDR_EXP 18
1258: PUSH
1259: LD_STRING Heike
1261: PPUSH
1262: LD_EXP 1
1266: NOT
1267: PPUSH
1268: LD_EXP 2
1272: PPUSH
1273: CALL 30245 0 3
1277: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1278: LD_ADDR_EXP 21
1282: PUSH
1283: LD_STRING Ibrahim
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL 30245 0 3
1301: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1302: LD_ADDR_EXP 19
1306: PUSH
1307: LD_STRING Givi
1309: PPUSH
1310: LD_EXP 1
1314: NOT
1315: PPUSH
1316: LD_EXP 2
1320: PPUSH
1321: CALL 30245 0 3
1325: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1326: LD_ADDR_EXP 22
1330: PUSH
1331: LD_STRING Kamil
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 2
1344: PPUSH
1345: CALL 30245 0 3
1349: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1350: LD_ADDR_EXP 23
1354: PUSH
1355: LD_STRING Kaia
1357: PPUSH
1358: LD_EXP 1
1362: NOT
1363: PPUSH
1364: LD_EXP 2
1368: PPUSH
1369: CALL 30245 0 3
1373: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1374: LD_ADDR_EXP 24
1378: PUSH
1379: LD_STRING Sophia
1381: PPUSH
1382: LD_EXP 1
1386: NOT
1387: PPUSH
1388: LD_EXP 2
1392: PPUSH
1393: CALL 30245 0 3
1397: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1398: LD_ADDR_EXP 25
1402: PUSH
1403: LD_STRING Markov
1405: PPUSH
1406: LD_EXP 1
1410: NOT
1411: PPUSH
1412: LD_EXP 2
1416: PPUSH
1417: CALL 30245 0 3
1421: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1422: LD_ADDR_EXP 28
1426: PUSH
1427: LD_STRING Aviradze
1429: PPUSH
1430: LD_EXP 1
1434: NOT
1435: PPUSH
1436: LD_EXP 2
1440: PPUSH
1441: CALL 30245 0 3
1445: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1446: LD_ADDR_EXP 27
1450: PUSH
1451: LD_STRING Kurt
1453: PPUSH
1454: LD_EXP 1
1458: NOT
1459: PPUSH
1460: LD_EXP 2
1464: PPUSH
1465: CALL 30245 0 3
1469: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1470: LD_ADDR_EXP 20
1474: PUSH
1475: LD_STRING Mike
1477: PPUSH
1478: LD_EXP 1
1482: NOT
1483: PPUSH
1484: LD_EXP 2
1488: PPUSH
1489: CALL 30245 0 3
1493: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1494: LD_ADDR_EXP 29
1498: PUSH
1499: LD_STRING 04_1_others
1501: PPUSH
1502: CALL_OW 31
1506: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1507: LD_ADDR_EXP 31
1511: PUSH
1512: LD_STRING 04_1_apes
1514: PPUSH
1515: CALL_OW 31
1519: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_STRING 04_1_Vehicles
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// if debug then
1535: LD_EXP 1
1539: IFFALSE 1758
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 40 , 40 ] , 1 ] ] ;
1541: LD_ADDR_EXP 30
1545: PUSH
1546: LD_INT 13
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 27
1557: PUSH
1558: LD_INT 2
1560: PUSH
1561: LD_INT 1000
1563: PUSH
1564: LD_INT 0
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PUSH
1574: LD_INT 3
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 13
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: LD_INT 25
1598: PUSH
1599: LD_INT 2
1601: PUSH
1602: LD_INT 1000
1604: PUSH
1605: LD_INT 0
1607: PUSH
1608: LD_INT 0
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 3
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 13
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: LD_INT 1
1636: PUSH
1637: LD_INT 27
1639: PUSH
1640: LD_INT 2
1642: PUSH
1643: LD_INT 1000
1645: PUSH
1646: LD_INT 0
1648: PUSH
1649: LD_INT 0
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 13
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 27
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 0
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 13
1712: PUSH
1713: LD_INT 1
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 32
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: LD_INT 1000
1727: PUSH
1728: LD_INT 40
1730: PUSH
1731: LD_INT 40
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// uc_side := 5 ;
1758: LD_ADDR_OWVAR 20
1762: PUSH
1763: LD_INT 5
1765: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1766: LD_ADDR_EXP 26
1770: PUSH
1771: LD_STRING Abdul
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: LD_STRING 
1779: PPUSH
1780: CALL 30245 0 3
1784: ST_TO_ADDR
// end ;
1785: LD_VAR 0 1
1789: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1790: LD_STRING 04_1_KaganCaptured
1792: PPUSH
1793: LD_INT 0
1795: PPUSH
1796: CALL_OW 30
1800: PUSH
1801: LD_INT 22
1803: PUSH
1804: LD_INT 5
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PPUSH
1811: CALL_OW 69
1815: NOT
1816: AND
1817: PUSH
1818: LD_INT 124
1820: PPUSH
1821: LD_INT 26
1823: PPUSH
1824: CALL_OW 428
1828: PUSH
1829: LD_INT 0
1831: EQUAL
1832: PUSH
1833: LD_INT 124
1835: PPUSH
1836: LD_INT 26
1838: PPUSH
1839: CALL_OW 428
1843: PPUSH
1844: CALL_OW 255
1848: PUSH
1849: LD_INT 2
1851: EQUAL
1852: XOR
1853: AND
1854: IFFALSE 2214
1856: GO 1858
1858: DISABLE
1859: LD_INT 0
1861: PPUSH
1862: PPUSH
// begin enable ;
1863: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1864: LD_EXP 33
1868: NOT
1869: PUSH
1870: LD_EXP 33
1874: PUSH
1875: LD_INT 4
1877: GREATER
1878: OR
1879: IFFALSE 1889
// cargoCounter := 1 ;
1881: LD_ADDR_EXP 33
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1889: LD_ADDR_VAR 0 2
1893: PUSH
1894: LD_INT 142
1896: PUSH
1897: LD_INT 15
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 129
1906: PUSH
1907: LD_INT 11
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 138
1916: PUSH
1917: LD_INT 9
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 133
1926: PUSH
1927: LD_INT 10
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: ST_TO_ADDR
// uc_side := 5 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 5
1947: ST_TO_ADDR
// uc_nation := 2 ;
1948: LD_ADDR_OWVAR 21
1952: PUSH
1953: LD_INT 2
1955: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1956: LD_INT 5
1958: PPUSH
1959: LD_INT 2
1961: PPUSH
1962: LD_INT 13
1964: PPUSH
1965: LD_INT 2
1967: PPUSH
1968: LD_INT 1
1970: PPUSH
1971: LD_INT 32
1973: PPUSH
1974: LD_INT 70
1976: PPUSH
1977: CALL 336 0 7
// veh := CreateVehicle ;
1981: LD_ADDR_VAR 0 1
1985: PUSH
1986: CALL_OW 45
1990: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1991: LD_VAR 0 1
1995: PPUSH
1996: LD_INT 3
1998: PPUSH
1999: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
2003: LD_VAR 0 1
2007: PPUSH
2008: LD_INT 8
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: CALL_OW 49
// if not cargoDriver then
2018: LD_EXP 32
2022: NOT
2023: IFFALSE 2048
// begin PrepareHuman ( false , 1 , 3 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 3
2033: PPUSH
2034: CALL_OW 380
// cargoDriver := CreateHuman ;
2038: LD_ADDR_EXP 32
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
2048: LD_EXP 32
2052: PPUSH
2053: LD_VAR 0 1
2057: PPUSH
2058: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
2062: LD_VAR 0 1
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 100
2072: PPUSH
2073: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
2077: LD_VAR 0 1
2081: PPUSH
2082: LD_VAR 0 2
2086: PUSH
2087: LD_EXP 33
2091: ARRAY
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: PPUSH
2097: LD_VAR 0 2
2101: PUSH
2102: LD_EXP 33
2106: ARRAY
2107: PUSH
2108: LD_INT 2
2110: ARRAY
2111: PPUSH
2112: CALL_OW 111
// AddComUnload ( veh ) ;
2116: LD_VAR 0 1
2120: PPUSH
2121: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
2125: LD_VAR 0 1
2129: PPUSH
2130: LD_INT 133
2132: PPUSH
2133: LD_INT 2
2135: PPUSH
2136: CALL_OW 171
// wait ( 0 0$5 ) ;
2140: LD_INT 175
2142: PPUSH
2143: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2147: LD_INT 35
2149: PPUSH
2150: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
2154: LD_VAR 0 1
2158: PPUSH
2159: LD_INT 133
2161: PPUSH
2162: LD_INT 2
2164: PPUSH
2165: CALL_OW 307
2169: PUSH
2170: LD_VAR 0 1
2174: PPUSH
2175: LD_INT 8
2177: PPUSH
2178: CALL_OW 308
2182: OR
2183: IFFALSE 2147
// RemoveUnit ( cargoDriver ) ;
2185: LD_EXP 32
2189: PPUSH
2190: CALL_OW 64
// RemoveUnit ( veh ) ;
2194: LD_VAR 0 1
2198: PPUSH
2199: CALL_OW 64
// if tick >= 20 20$00 then
2203: LD_OWVAR 1
2207: PUSH
2208: LD_INT 42000
2210: GREATEREQUAL
2211: IFFALSE 2214
// disable ;
2213: DISABLE
// end ; end_of_file
2214: PPOPN 2
2216: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
2227: PPUSH
// uc_side := 3 ;
2228: LD_ADDR_OWVAR 20
2232: PUSH
2233: LD_INT 3
2235: ST_TO_ADDR
// uc_nation := 3 ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 3
2243: ST_TO_ADDR
// ruForce := [ ] ;
2244: LD_ADDR_EXP 37
2248: PUSH
2249: EMPTY
2250: ST_TO_ADDR
// ruMech := [ ] ;
2251: LD_ADDR_EXP 39
2255: PUSH
2256: EMPTY
2257: ST_TO_ADDR
// ruEng := [ ] ;
2258: LD_ADDR_EXP 38
2262: PUSH
2263: EMPTY
2264: ST_TO_ADDR
// ruSci := [ ] ;
2265: LD_ADDR_EXP 40
2269: PUSH
2270: EMPTY
2271: ST_TO_ADDR
// ruMobile := [ ] ;
2272: LD_ADDR_EXP 41
2276: PUSH
2277: EMPTY
2278: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2279: LD_ADDR_EXP 34
2283: PUSH
2284: LD_STRING Burlak
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: LD_STRING 
2292: PPUSH
2293: CALL 30245 0 3
2297: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2298: LD_ADDR_EXP 35
2302: PUSH
2303: LD_STRING Gaydar
2305: PPUSH
2306: LD_INT 0
2308: PPUSH
2309: LD_STRING 
2311: PPUSH
2312: CALL 30245 0 3
2316: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2317: LD_ADDR_EXP 36
2321: PUSH
2322: LD_STRING Kuzmov
2324: PPUSH
2325: LD_INT 0
2327: PPUSH
2328: LD_STRING 
2330: PPUSH
2331: CALL 30245 0 3
2335: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2336: LD_EXP 36
2340: PPUSH
2341: LD_INT 200
2343: PPUSH
2344: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2348: LD_INT 200
2350: PPUSH
2351: LD_STRING chuikov
2353: PPUSH
2354: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2358: LD_INT 200
2360: PPUSH
2361: CALL_OW 274
2365: PPUSH
2366: LD_INT 1
2368: PPUSH
2369: LD_INT 800
2371: PUSH
2372: LD_INT 1000
2374: PUSH
2375: LD_INT 1250
2377: PUSH
2378: LD_INT 1300
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: PUSH
2387: LD_OWVAR 67
2391: ARRAY
2392: PPUSH
2393: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2397: LD_INT 200
2399: PPUSH
2400: CALL_OW 274
2404: PPUSH
2405: LD_INT 2
2407: PPUSH
2408: LD_INT 160
2410: PPUSH
2411: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2415: LD_INT 225
2417: PPUSH
2418: CALL_OW 274
2422: PPUSH
2423: LD_INT 1
2425: PPUSH
2426: LD_INT 200
2428: PPUSH
2429: CALL_OW 277
// oil := 150 ;
2433: LD_ADDR_VAR 0 9
2437: PUSH
2438: LD_INT 150
2440: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2441: LD_EXP 5
2445: PUSH
2446: LD_INT 94500
2448: PUSH
2449: LD_INT 84000
2451: PUSH
2452: LD_INT 73500
2454: PUSH
2455: LD_INT 67200
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: PUSH
2464: LD_OWVAR 67
2468: ARRAY
2469: GREATEREQUAL
2470: IFFALSE 2625
// begin oil := 450 ;
2472: LD_ADDR_VAR 0 9
2476: PUSH
2477: LD_INT 450
2479: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2480: LD_ADDR_VAR 0 7
2484: PUSH
2485: LD_INT 123
2487: PUSH
2488: LD_INT 17
2490: PUSH
2491: LD_INT 3
2493: PUSH
2494: LD_INT 31
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: PUSH
2503: LD_INT 152
2505: PUSH
2506: LD_INT 38
2508: PUSH
2509: LD_INT 3
2511: PUSH
2512: LD_INT 31
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 81
2523: PUSH
2524: LD_INT 6
2526: PUSH
2527: LD_INT 4
2529: PUSH
2530: LD_INT 31
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 113
2541: PUSH
2542: LD_INT 67
2544: PUSH
2545: LD_INT 4
2547: PUSH
2548: LD_INT 32
2550: PUSH
2551: EMPTY
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: ST_TO_ADDR
// for i in tmp do
2563: LD_ADDR_VAR 0 4
2567: PUSH
2568: LD_VAR 0 7
2572: PUSH
2573: FOR_IN
2574: IFFALSE 2623
// begin bc_type := i [ 4 ] ;
2576: LD_ADDR_OWVAR 42
2580: PUSH
2581: LD_VAR 0 4
2585: PUSH
2586: LD_INT 4
2588: ARRAY
2589: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 1
2597: ARRAY
2598: PPUSH
2599: LD_VAR 0 4
2603: PUSH
2604: LD_INT 2
2606: ARRAY
2607: PPUSH
2608: LD_VAR 0 4
2612: PUSH
2613: LD_INT 3
2615: ARRAY
2616: PPUSH
2617: CALL_OW 47
// end ;
2621: GO 2573
2623: POP
2624: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2625: LD_INT 225
2627: PPUSH
2628: CALL_OW 274
2632: PPUSH
2633: LD_INT 2
2635: PPUSH
2636: LD_VAR 0 9
2640: PPUSH
2641: CALL_OW 277
// if Difficulty > 1 then
2645: LD_OWVAR 67
2649: PUSH
2650: LD_INT 1
2652: GREATER
2653: IFFALSE 2748
// begin bc_type := b_bunker ;
2655: LD_ADDR_OWVAR 42
2659: PUSH
2660: LD_INT 32
2662: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2663: LD_ADDR_VAR 0 7
2667: PUSH
2668: LD_INT 121
2670: PUSH
2671: LD_INT 85
2673: PUSH
2674: LD_INT 5
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: LIST
2681: PUSH
2682: LD_INT 93
2684: PUSH
2685: LD_INT 72
2687: PUSH
2688: LD_INT 1
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: LIST
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: ST_TO_ADDR
// for i in tmp do
2700: LD_ADDR_VAR 0 4
2704: PUSH
2705: LD_VAR 0 7
2709: PUSH
2710: FOR_IN
2711: IFFALSE 2746
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2713: LD_VAR 0 4
2717: PUSH
2718: LD_INT 1
2720: ARRAY
2721: PPUSH
2722: LD_VAR 0 4
2726: PUSH
2727: LD_INT 2
2729: ARRAY
2730: PPUSH
2731: LD_VAR 0 4
2735: PUSH
2736: LD_INT 3
2738: ARRAY
2739: PPUSH
2740: CALL_OW 47
2744: GO 2710
2746: POP
2747: POP
// end ; base := GetBase ( ruMainBase ) ;
2748: LD_ADDR_VAR 0 2
2752: PUSH
2753: LD_INT 200
2755: PPUSH
2756: CALL_OW 274
2760: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2761: LD_ADDR_VAR 0 3
2765: PUSH
2766: LD_VAR 0 2
2770: PPUSH
2771: CALL_OW 417
2775: ST_TO_ADDR
// for b in blist do
2776: LD_ADDR_VAR 0 5
2780: PUSH
2781: LD_VAR 0 3
2785: PUSH
2786: FOR_IN
2787: IFFALSE 3238
// begin if b [ 1 ] = b_factory then
2789: LD_VAR 0 5
2793: PUSH
2794: LD_INT 1
2796: ARRAY
2797: PUSH
2798: LD_INT 3
2800: EQUAL
2801: IFFALSE 2952
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2803: LD_ADDR_VAR 0 8
2807: PUSH
2808: LD_VAR 0 5
2812: PUSH
2813: LD_INT 2
2815: ARRAY
2816: PPUSH
2817: LD_VAR 0 5
2821: PUSH
2822: LD_INT 3
2824: ARRAY
2825: PPUSH
2826: CALL_OW 428
2830: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2831: LD_ADDR_VAR 0 4
2835: PUSH
2836: DOUBLE
2837: LD_INT 1
2839: DEC
2840: ST_TO_ADDR
2841: LD_INT 2
2843: PUSH
2844: LD_INT 2
2846: PUSH
2847: LD_OWVAR 67
2851: PLUS
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_EXP 10
2861: PUSH
2862: LD_INT 3
2864: GREATER
2865: PUSH
2866: LD_INT 1
2868: PLUS
2869: ARRAY
2870: PUSH
2871: FOR_TO
2872: IFFALSE 2948
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2874: LD_INT 0
2876: PPUSH
2877: LD_INT 3
2879: PPUSH
2880: LD_INT 1
2882: PUSH
2883: LD_OWVAR 67
2887: PLUS
2888: PPUSH
2889: CALL_OW 380
// un := CreateHuman ;
2893: LD_ADDR_VAR 0 6
2897: PUSH
2898: CALL_OW 44
2902: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2903: LD_ADDR_EXP 39
2907: PUSH
2908: LD_EXP 39
2912: PPUSH
2913: LD_EXP 39
2917: PUSH
2918: LD_INT 1
2920: PLUS
2921: PPUSH
2922: LD_VAR 0 6
2926: PPUSH
2927: CALL_OW 1
2931: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2932: LD_VAR 0 6
2936: PPUSH
2937: LD_VAR 0 8
2941: PPUSH
2942: CALL_OW 52
// end ;
2946: GO 2871
2948: POP
2949: POP
// end else
2950: GO 3236
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2952: LD_VAR 0 5
2956: PUSH
2957: LD_INT 1
2959: ARRAY
2960: PUSH
2961: LD_INT 6
2963: PUSH
2964: LD_INT 7
2966: PUSH
2967: LD_INT 8
2969: PUSH
2970: LD_INT 10
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: IN
2979: IFFALSE 3089
// begin for i := 1 to 2 do
2981: LD_ADDR_VAR 0 4
2985: PUSH
2986: DOUBLE
2987: LD_INT 1
2989: DEC
2990: ST_TO_ADDR
2991: LD_INT 2
2993: PUSH
2994: FOR_TO
2995: IFFALSE 3085
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2997: LD_INT 0
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: LD_OWVAR 67
3007: PPUSH
3008: CALL_OW 380
// un := CreateHuman ;
3012: LD_ADDR_VAR 0 6
3016: PUSH
3017: CALL_OW 44
3021: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
3022: LD_ADDR_EXP 40
3026: PUSH
3027: LD_EXP 40
3031: PPUSH
3032: LD_EXP 40
3036: PUSH
3037: LD_INT 1
3039: PLUS
3040: PPUSH
3041: LD_VAR 0 6
3045: PPUSH
3046: CALL_OW 1
3050: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3051: LD_VAR 0 6
3055: PPUSH
3056: LD_VAR 0 5
3060: PUSH
3061: LD_INT 2
3063: ARRAY
3064: PPUSH
3065: LD_VAR 0 5
3069: PUSH
3070: LD_INT 3
3072: ARRAY
3073: PPUSH
3074: CALL_OW 428
3078: PPUSH
3079: CALL_OW 52
// end ;
3083: GO 2994
3085: POP
3086: POP
// end else
3087: GO 3236
// if b [ 1 ] = b_warehouse then
3089: LD_VAR 0 5
3093: PUSH
3094: LD_INT 1
3096: ARRAY
3097: PUSH
3098: LD_INT 1
3100: EQUAL
3101: IFFALSE 3236
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3103: LD_ADDR_VAR 0 4
3107: PUSH
3108: DOUBLE
3109: LD_INT 1
3111: DEC
3112: ST_TO_ADDR
3113: LD_INT 1
3115: PUSH
3116: LD_INT 1
3118: PUSH
3119: LD_OWVAR 67
3123: PLUS
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PUSH
3129: LD_EXP 10
3133: PUSH
3134: LD_INT 3
3136: GREATER
3137: PUSH
3138: LD_INT 1
3140: PLUS
3141: ARRAY
3142: PUSH
3143: FOR_TO
3144: IFFALSE 3234
// begin PrepareHuman ( false , 2 , Difficulty ) ;
3146: LD_INT 0
3148: PPUSH
3149: LD_INT 2
3151: PPUSH
3152: LD_OWVAR 67
3156: PPUSH
3157: CALL_OW 380
// un := CreateHuman ;
3161: LD_ADDR_VAR 0 6
3165: PUSH
3166: CALL_OW 44
3170: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
3171: LD_ADDR_EXP 38
3175: PUSH
3176: LD_EXP 38
3180: PPUSH
3181: LD_EXP 38
3185: PUSH
3186: LD_INT 1
3188: PLUS
3189: PPUSH
3190: LD_VAR 0 6
3194: PPUSH
3195: CALL_OW 1
3199: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3200: LD_VAR 0 6
3204: PPUSH
3205: LD_VAR 0 5
3209: PUSH
3210: LD_INT 2
3212: ARRAY
3213: PPUSH
3214: LD_VAR 0 5
3218: PUSH
3219: LD_INT 3
3221: ARRAY
3222: PPUSH
3223: CALL_OW 428
3227: PPUSH
3228: CALL_OW 52
// end ;
3232: GO 3143
3234: POP
3235: POP
// end ; end ;
3236: GO 2786
3238: POP
3239: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3240: LD_ADDR_VAR 0 3
3244: PUSH
3245: LD_INT 22
3247: PUSH
3248: LD_INT 3
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 21
3257: PUSH
3258: LD_INT 3
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 69
3273: ST_TO_ADDR
// for b in blist do
3274: LD_ADDR_VAR 0 5
3278: PUSH
3279: LD_VAR 0 3
3283: PUSH
3284: FOR_IN
3285: IFFALSE 3307
// SetBLevel ( b , 3 + Difficulty ) ;
3287: LD_VAR 0 5
3291: PPUSH
3292: LD_INT 3
3294: PUSH
3295: LD_OWVAR 67
3299: PLUS
3300: PPUSH
3301: CALL_OW 241
3305: GO 3284
3307: POP
3308: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3309: LD_ADDR_VAR 0 3
3313: PUSH
3314: LD_INT 22
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: LD_INT 30
3326: PUSH
3327: LD_INT 32
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: PPUSH
3338: CALL_OW 69
3342: ST_TO_ADDR
// for b in blist do
3343: LD_ADDR_VAR 0 5
3347: PUSH
3348: LD_VAR 0 3
3352: PUSH
3353: FOR_IN
3354: IFFALSE 3463
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3356: LD_INT 0
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: LD_INT 1
3364: PUSH
3365: LD_OWVAR 67
3369: PLUS
3370: PPUSH
3371: CALL_OW 380
// un := CreateHuman ;
3375: LD_ADDR_VAR 0 6
3379: PUSH
3380: CALL_OW 44
3384: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3385: LD_ADDR_EXP 37
3389: PUSH
3390: LD_EXP 37
3394: PPUSH
3395: LD_EXP 37
3399: PUSH
3400: LD_INT 1
3402: PLUS
3403: PPUSH
3404: LD_VAR 0 6
3408: PPUSH
3409: CALL_OW 1
3413: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3414: LD_VAR 0 6
3418: PPUSH
3419: LD_VAR 0 5
3423: PPUSH
3424: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3428: LD_VAR 0 5
3432: PPUSH
3433: LD_INT 44
3435: PUSH
3436: LD_INT 43
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PUSH
3443: LD_VAR 0 5
3447: PUSH
3448: LD_INT 2
3450: MOD
3451: PUSH
3452: LD_INT 1
3454: PLUS
3455: ARRAY
3456: PPUSH
3457: CALL_OW 431
// end ;
3461: GO 3353
3463: POP
3464: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3465: LD_ADDR_VAR 0 3
3469: PUSH
3470: LD_INT 22
3472: PUSH
3473: LD_INT 3
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: LD_INT 30
3482: PUSH
3483: LD_INT 31
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PPUSH
3494: CALL_OW 69
3498: ST_TO_ADDR
// for b in blist do
3499: LD_ADDR_VAR 0 5
3503: PUSH
3504: LD_VAR 0 3
3508: PUSH
3509: FOR_IN
3510: IFFALSE 3609
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3512: LD_INT 0
3514: PPUSH
3515: LD_INT 1
3517: PPUSH
3518: LD_INT 1
3520: PUSH
3521: LD_OWVAR 67
3525: PLUS
3526: PPUSH
3527: CALL_OW 380
// un := CreateHuman ;
3531: LD_ADDR_VAR 0 6
3535: PUSH
3536: CALL_OW 44
3540: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3541: LD_ADDR_EXP 37
3545: PUSH
3546: LD_EXP 37
3550: PPUSH
3551: LD_EXP 37
3555: PUSH
3556: LD_INT 1
3558: PLUS
3559: PPUSH
3560: LD_VAR 0 6
3564: PPUSH
3565: CALL_OW 1
3569: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3570: LD_VAR 0 6
3574: PPUSH
3575: LD_VAR 0 5
3579: PPUSH
3580: CALL_OW 254
3584: PUSH
3585: LD_INT 3
3587: PLUS
3588: PPUSH
3589: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3593: LD_VAR 0 6
3597: PPUSH
3598: LD_VAR 0 5
3602: PPUSH
3603: CALL_OW 52
// end ;
3607: GO 3509
3609: POP
3610: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3611: LD_ADDR_VAR 0 3
3615: PUSH
3616: LD_INT 22
3618: PUSH
3619: LD_INT 3
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: LD_INT 30
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 30
3641: PUSH
3642: LD_INT 5
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: LIST
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PPUSH
3658: CALL_OW 69
3662: ST_TO_ADDR
// for b in blist do
3663: LD_ADDR_VAR 0 5
3667: PUSH
3668: LD_VAR 0 3
3672: PUSH
3673: FOR_IN
3674: IFFALSE 3770
// begin for i := 1 to 2 do
3676: LD_ADDR_VAR 0 4
3680: PUSH
3681: DOUBLE
3682: LD_INT 1
3684: DEC
3685: ST_TO_ADDR
3686: LD_INT 2
3688: PUSH
3689: FOR_TO
3690: IFFALSE 3766
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3692: LD_INT 0
3694: PPUSH
3695: LD_INT 1
3697: PPUSH
3698: LD_INT 1
3700: PUSH
3701: LD_OWVAR 67
3705: PLUS
3706: PPUSH
3707: CALL_OW 380
// un := CreateHuman ;
3711: LD_ADDR_VAR 0 6
3715: PUSH
3716: CALL_OW 44
3720: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3721: LD_ADDR_EXP 37
3725: PUSH
3726: LD_EXP 37
3730: PPUSH
3731: LD_EXP 37
3735: PUSH
3736: LD_INT 1
3738: PLUS
3739: PPUSH
3740: LD_VAR 0 6
3744: PPUSH
3745: CALL_OW 1
3749: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3750: LD_VAR 0 6
3754: PPUSH
3755: LD_VAR 0 5
3759: PPUSH
3760: CALL_OW 52
// end ;
3764: GO 3689
3766: POP
3767: POP
// end ;
3768: GO 3673
3770: POP
3771: POP
// if ibrahimOnRuSide then
3772: LD_EXP 3
3776: IFFALSE 3874
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3778: LD_ADDR_EXP 21
3782: PUSH
3783: LD_STRING IbrahimRu
3785: PPUSH
3786: LD_INT 0
3788: PPUSH
3789: LD_STRING 
3791: PPUSH
3792: CALL 30245 0 3
3796: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3797: LD_EXP 21
3801: PPUSH
3802: LD_INT 121
3804: PPUSH
3805: LD_INT 78
3807: PPUSH
3808: LD_INT 0
3810: PPUSH
3811: CALL_OW 48
// ComHold ( Ibrahim ) ;
3815: LD_EXP 21
3819: PPUSH
3820: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3824: LD_INT 1
3826: PPUSH
3827: LD_INT 1
3829: PPUSH
3830: LD_INT 2
3832: PPUSH
3833: CALL_OW 380
// ruSol := CreateHuman ;
3837: LD_ADDR_EXP 42
3841: PUSH
3842: CALL_OW 44
3846: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3847: LD_EXP 42
3851: PPUSH
3852: LD_INT 121
3854: PPUSH
3855: LD_INT 75
3857: PPUSH
3858: LD_INT 0
3860: PPUSH
3861: CALL_OW 48
// ComHold ( ruSol ) ;
3865: LD_EXP 42
3869: PPUSH
3870: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3874: LD_ADDR_VAR 0 4
3878: PUSH
3879: DOUBLE
3880: LD_INT 1
3882: DEC
3883: ST_TO_ADDR
3884: LD_INT 2
3886: PUSH
3887: LD_INT 2
3889: PUSH
3890: LD_OWVAR 67
3894: PLUS
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: PUSH
3900: LD_EXP 10
3904: PUSH
3905: LD_INT 3
3907: GREATER
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: ARRAY
3913: PUSH
3914: FOR_TO
3915: IFFALSE 3984
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3917: LD_VAR 0 8
3921: PPUSH
3922: LD_INT 21
3924: PUSH
3925: LD_INT 23
3927: PUSH
3928: LD_INT 24
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: LIST
3935: PUSH
3936: LD_VAR 0 4
3940: PUSH
3941: LD_INT 3
3943: MOD
3944: PUSH
3945: LD_INT 1
3947: PLUS
3948: ARRAY
3949: PPUSH
3950: LD_INT 1
3952: PPUSH
3953: LD_INT 1
3955: PPUSH
3956: LD_INT 43
3958: PUSH
3959: LD_INT 44
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: CALL_OW 185
3982: GO 3914
3984: POP
3985: POP
// end ;
3986: LD_VAR 0 1
3990: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3991: LD_EXP 41
3995: PUSH
3996: LD_EXP 4
4000: NOT
4001: AND
4002: IFFALSE 4489
4004: GO 4006
4006: DISABLE
4007: LD_INT 0
4009: PPUSH
4010: PPUSH
4011: PPUSH
4012: PPUSH
4013: PPUSH
// begin enable ;
4014: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
4015: LD_ADDR_VAR 0 2
4019: PUSH
4020: LD_EXP 41
4024: PPUSH
4025: LD_INT 21
4027: PUSH
4028: LD_INT 2
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: PPUSH
4035: CALL_OW 72
4039: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
4040: LD_ADDR_VAR 0 4
4044: PUSH
4045: LD_INT 81
4047: PUSH
4048: LD_INT 3
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 2
4057: PUSH
4058: LD_INT 95
4060: PUSH
4061: LD_INT 4
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 95
4070: PUSH
4071: LD_INT 5
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: LD_INT 95
4080: PUSH
4081: LD_INT 6
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 95
4090: PUSH
4091: LD_INT 7
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PPUSH
4109: CALL_OW 69
4113: ST_TO_ADDR
// for i in filter do
4114: LD_ADDR_VAR 0 1
4118: PUSH
4119: LD_VAR 0 2
4123: PUSH
4124: FOR_IN
4125: IFFALSE 4487
// begin tmp := IsDrivenBy ( i ) ;
4127: LD_ADDR_VAR 0 3
4131: PUSH
4132: LD_VAR 0 1
4136: PPUSH
4137: CALL_OW 311
4141: ST_TO_ADDR
// if not tmp then
4142: LD_VAR 0 3
4146: NOT
4147: IFFALSE 4151
// continue ;
4149: GO 4124
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4151: LD_VAR 0 1
4155: PPUSH
4156: CALL_OW 261
4160: PUSH
4161: LD_INT 90
4163: GREATER
4164: PUSH
4165: LD_VAR 0 1
4169: PPUSH
4170: CALL_OW 110
4174: PUSH
4175: LD_INT 2
4177: EQUAL
4178: AND
4179: IFFALSE 4195
// SetTag ( i , 0 ) else
4181: LD_VAR 0 1
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 109
4193: GO 4238
// if GetTag ( i ) = 2 then
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL_OW 110
4204: PUSH
4205: LD_INT 2
4207: EQUAL
4208: IFFALSE 4238
// begin x := rand ( 1 , 2 ) ;
4210: LD_ADDR_VAR 0 5
4214: PUSH
4215: LD_INT 1
4217: PPUSH
4218: LD_INT 2
4220: PPUSH
4221: CALL_OW 12
4225: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 200
4233: PPUSH
4234: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4238: LD_VAR 0 1
4242: PPUSH
4243: CALL_OW 256
4247: PUSH
4248: LD_INT 600
4250: GREATEREQUAL
4251: PUSH
4252: LD_VAR 0 1
4256: PPUSH
4257: CALL_OW 110
4261: NOT
4262: AND
4263: IFFALSE 4289
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4265: LD_VAR 0 1
4269: PPUSH
4270: LD_VAR 0 4
4274: PPUSH
4275: LD_VAR 0 1
4279: PPUSH
4280: CALL_OW 74
4284: PPUSH
4285: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4289: LD_VAR 0 1
4293: PPUSH
4294: CALL_OW 256
4298: PUSH
4299: LD_INT 600
4301: LESS
4302: PUSH
4303: LD_VAR 0 1
4307: PPUSH
4308: CALL_OW 110
4312: NOT
4313: AND
4314: IFFALSE 4343
// begin SetTag ( i , 1 ) ;
4316: LD_VAR 0 1
4320: PPUSH
4321: LD_INT 1
4323: PPUSH
4324: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4328: LD_VAR 0 1
4332: PPUSH
4333: LD_INT 112
4335: PPUSH
4336: LD_INT 119
4338: PPUSH
4339: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 110
4352: PUSH
4353: LD_INT 1
4355: EQUAL
4356: PUSH
4357: LD_VAR 0 1
4361: PPUSH
4362: LD_INT 112
4364: PPUSH
4365: LD_INT 119
4367: PPUSH
4368: CALL_OW 297
4372: PUSH
4373: LD_INT 9
4375: LESS
4376: AND
4377: PUSH
4378: LD_VAR 0 3
4382: AND
4383: IFFALSE 4485
// begin ComExitVehicle ( tmp ) ;
4385: LD_VAR 0 3
4389: PPUSH
4390: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_VAR 0 1
4403: PPUSH
4404: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4408: LD_INT 35
4410: PPUSH
4411: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4415: LD_VAR 0 1
4419: PPUSH
4420: CALL_OW 256
4424: PUSH
4425: LD_INT 1000
4427: EQUAL
4428: IFFALSE 4408
// ComEnterUnit ( tmp , i ) ;
4430: LD_VAR 0 3
4434: PPUSH
4435: LD_VAR 0 1
4439: PPUSH
4440: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4444: LD_VAR 0 1
4448: PPUSH
4449: CALL_OW 261
4453: PUSH
4454: LD_INT 50
4456: LESSEQUAL
4457: IFFALSE 4473
// SetTag ( i , 2 ) else
4459: LD_VAR 0 1
4463: PPUSH
4464: LD_INT 2
4466: PPUSH
4467: CALL_OW 109
4471: GO 4485
// SetTag ( i , 0 ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 0
4480: PPUSH
4481: CALL_OW 109
// end ; end ;
4485: GO 4124
4487: POP
4488: POP
// end ;
4489: PPOPN 5
4491: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4492: LD_EXP 4
4496: NOT
4497: PUSH
4498: LD_EXP 38
4502: AND
4503: IFFALSE 4764
4505: GO 4507
4507: DISABLE
4508: LD_INT 0
4510: PPUSH
4511: PPUSH
4512: PPUSH
4513: PPUSH
// begin enable ;
4514: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: LD_INT 3
4522: PPUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 3
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PUSH
4533: LD_INT 21
4535: PUSH
4536: LD_INT 3
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 3
4545: PUSH
4546: LD_INT 24
4548: PUSH
4549: LD_INT 1000
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: PPUSH
4565: CALL_OW 70
4569: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: LD_EXP 38
4579: PPUSH
4580: LD_INT 50
4582: PUSH
4583: EMPTY
4584: LIST
4585: PPUSH
4586: CALL_OW 72
4590: ST_TO_ADDR
// if filter and tmp then
4591: LD_VAR 0 2
4595: PUSH
4596: LD_VAR 0 3
4600: AND
4601: IFFALSE 4693
// begin for i in tmp do
4603: LD_ADDR_VAR 0 1
4607: PUSH
4608: LD_VAR 0 3
4612: PUSH
4613: FOR_IN
4614: IFFALSE 4689
// begin if GetTag ( i ) = tEscape then
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 110
4625: PUSH
4626: LD_EXP 17
4630: EQUAL
4631: IFFALSE 4635
// continue ;
4633: GO 4613
// if IsInUnit ( i ) then
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 310
4644: IFFALSE 4657
// ComExitBuilding ( i ) else
4646: LD_VAR 0 1
4650: PPUSH
4651: CALL_OW 122
4655: GO 4687
// if not HasTask ( i ) then
4657: LD_VAR 0 1
4661: PPUSH
4662: CALL_OW 314
4666: NOT
4667: IFFALSE 4687
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4669: LD_VAR 0 1
4673: PPUSH
4674: LD_VAR 0 2
4678: PUSH
4679: LD_INT 1
4681: ARRAY
4682: PPUSH
4683: CALL_OW 130
// end ;
4687: GO 4613
4689: POP
4690: POP
// end else
4691: GO 4764
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4693: LD_VAR 0 3
4697: PPUSH
4698: LD_INT 3
4700: PUSH
4701: LD_INT 54
4703: PUSH
4704: EMPTY
4705: LIST
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: PPUSH
4711: CALL_OW 72
4715: IFFALSE 4764
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4717: LD_ADDR_VAR 0 1
4721: PUSH
4722: LD_VAR 0 3
4726: PPUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 54
4732: PUSH
4733: EMPTY
4734: LIST
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PPUSH
4740: CALL_OW 72
4744: PUSH
4745: FOR_IN
4746: IFFALSE 4762
// ComEnterUnit ( i , ruMainBase ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 200
4755: PPUSH
4756: CALL_OW 120
4760: GO 4745
4762: POP
4763: POP
// end ; end ;
4764: PPOPN 4
4766: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4767: LD_EXP 4
4771: NOT
4772: PUSH
4773: LD_EXP 40
4777: AND
4778: IFFALSE 5057
4780: GO 4782
4782: DISABLE
4783: LD_INT 0
4785: PPUSH
4786: PPUSH
4787: PPUSH
4788: PPUSH
// begin enable ;
4789: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4790: LD_ADDR_VAR 0 2
4794: PUSH
4795: LD_INT 3
4797: PPUSH
4798: LD_INT 22
4800: PUSH
4801: LD_INT 3
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PUSH
4808: LD_INT 21
4810: PUSH
4811: LD_INT 1
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 3
4820: PUSH
4821: LD_INT 24
4823: PUSH
4824: LD_INT 1000
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: PPUSH
4840: CALL_OW 70
4844: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4845: LD_ADDR_VAR 0 3
4849: PUSH
4850: LD_EXP 40
4854: PPUSH
4855: LD_INT 50
4857: PUSH
4858: EMPTY
4859: LIST
4860: PPUSH
4861: CALL_OW 72
4865: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4866: LD_ADDR_VAR 0 4
4870: PUSH
4871: LD_INT 118
4873: PPUSH
4874: LD_INT 121
4876: PPUSH
4877: CALL_OW 428
4881: ST_TO_ADDR
// if filter and tmp then
4882: LD_VAR 0 2
4886: PUSH
4887: LD_VAR 0 3
4891: AND
4892: IFFALSE 4984
// begin for i in tmp do
4894: LD_ADDR_VAR 0 1
4898: PUSH
4899: LD_VAR 0 3
4903: PUSH
4904: FOR_IN
4905: IFFALSE 4980
// begin if GetTag ( i ) = tEscape then
4907: LD_VAR 0 1
4911: PPUSH
4912: CALL_OW 110
4916: PUSH
4917: LD_EXP 17
4921: EQUAL
4922: IFFALSE 4926
// continue ;
4924: GO 4904
// if IsInUnit ( i ) then
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 310
4935: IFFALSE 4948
// ComExitBuilding ( i ) else
4937: LD_VAR 0 1
4941: PPUSH
4942: CALL_OW 122
4946: GO 4978
// if not HasTask ( i ) then
4948: LD_VAR 0 1
4952: PPUSH
4953: CALL_OW 314
4957: NOT
4958: IFFALSE 4978
// ComHeal ( i , filter [ 1 ] ) ;
4960: LD_VAR 0 1
4964: PPUSH
4965: LD_VAR 0 2
4969: PUSH
4970: LD_INT 1
4972: ARRAY
4973: PPUSH
4974: CALL_OW 128
// end ;
4978: GO 4904
4980: POP
4981: POP
// end else
4982: GO 5057
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4984: LD_VAR 0 3
4988: PPUSH
4989: LD_INT 3
4991: PUSH
4992: LD_INT 54
4994: PUSH
4995: EMPTY
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 72
5006: IFFALSE 5057
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
5008: LD_ADDR_VAR 0 1
5012: PUSH
5013: LD_VAR 0 3
5017: PPUSH
5018: LD_INT 3
5020: PUSH
5021: LD_INT 54
5023: PUSH
5024: EMPTY
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PPUSH
5031: CALL_OW 72
5035: PUSH
5036: FOR_IN
5037: IFFALSE 5055
// ComEnterUnit ( i , lab ) ;
5039: LD_VAR 0 1
5043: PPUSH
5044: LD_VAR 0 4
5048: PPUSH
5049: CALL_OW 120
5053: GO 5036
5055: POP
5056: POP
// end ; end ; end_of_file
5057: PPOPN 4
5059: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5060: LD_VAR 0 1
5064: PPUSH
5065: CALL 25956 0 1
// if un = Heike then
5069: LD_VAR 0 1
5073: PUSH
5074: LD_EXP 18
5078: EQUAL
5079: IFFALSE 5088
// YouLost ( Heike ) ;
5081: LD_STRING Heike
5083: PPUSH
5084: CALL_OW 104
// if un in ruEng then
5088: LD_VAR 0 1
5092: PUSH
5093: LD_EXP 38
5097: IN
5098: IFFALSE 5116
// ruEng := ruEng diff un ;
5100: LD_ADDR_EXP 38
5104: PUSH
5105: LD_EXP 38
5109: PUSH
5110: LD_VAR 0 1
5114: DIFF
5115: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
5116: LD_VAR 0 1
5120: PUSH
5121: LD_INT 22
5123: PUSH
5124: LD_INT 2
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: LD_INT 21
5133: PUSH
5134: LD_INT 1
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PUSH
5141: LD_INT 23
5143: PUSH
5144: LD_INT 2
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: LIST
5155: PPUSH
5156: CALL_OW 69
5160: IN
5161: IFFALSE 5177
// loseCounter := loseCounter + 1 ;
5163: LD_ADDR_EXP 6
5167: PUSH
5168: LD_EXP 6
5172: PUSH
5173: LD_INT 1
5175: PLUS
5176: ST_TO_ADDR
// end ;
5177: PPOPN 1
5179: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
5180: LD_INT 0
5182: PPUSH
5183: PPUSH
// begin if un in ruMobile then
5184: LD_VAR 0 2
5188: PUSH
5189: LD_EXP 41
5193: IN
5194: IFFALSE 5353
// begin ruMobile := ruMobile diff un ;
5196: LD_ADDR_EXP 41
5200: PUSH
5201: LD_EXP 41
5205: PUSH
5206: LD_VAR 0 2
5210: DIFF
5211: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
5212: LD_ADDR_VAR 0 5
5216: PUSH
5217: LD_VAR 0 2
5221: PPUSH
5222: CALL_OW 264
5226: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5227: LD_ADDR_VAR 0 6
5231: PUSH
5232: LD_INT 110
5234: PPUSH
5235: LD_INT 126
5237: PPUSH
5238: CALL_OW 428
5242: ST_TO_ADDR
// if not driver or not fac then
5243: LD_VAR 0 1
5247: NOT
5248: PUSH
5249: LD_VAR 0 6
5253: NOT
5254: OR
5255: IFFALSE 5259
// exit ;
5257: GO 5353
// AddComMoveXY ( driver , 111 , 121 ) ;
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_INT 111
5266: PPUSH
5267: LD_INT 121
5269: PPUSH
5270: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5274: LD_VAR 0 1
5278: PPUSH
5279: LD_VAR 0 6
5283: PPUSH
5284: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5288: LD_INT 35
5290: PPUSH
5291: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5295: LD_VAR 0 1
5299: PPUSH
5300: CALL_OW 301
5304: PUSH
5305: LD_VAR 0 1
5309: PPUSH
5310: CALL_OW 310
5314: OR
5315: IFFALSE 5288
// if IsDead ( driver ) then
5317: LD_VAR 0 1
5321: PPUSH
5322: CALL_OW 301
5326: IFFALSE 5330
// exit ;
5328: GO 5353
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5330: LD_VAR 0 6
5334: PPUSH
5335: LD_INT 21
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_INT 1
5343: PPUSH
5344: LD_VAR 0 5
5348: PPUSH
5349: CALL_OW 185
// end ; end ;
5353: PPOPN 6
5355: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5356: LD_VAR 0 1
5360: PPUSH
5361: LD_VAR 0 2
5365: PPUSH
5366: CALL 26076 0 2
// if GetSide ( fac ) = 3 then
5370: LD_VAR 0 2
5374: PPUSH
5375: CALL_OW 255
5379: PUSH
5380: LD_INT 3
5382: EQUAL
5383: IFFALSE 5429
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5385: LD_ADDR_EXP 41
5389: PUSH
5390: LD_EXP 41
5394: PPUSH
5395: LD_EXP 41
5399: PUSH
5400: LD_INT 1
5402: PLUS
5403: PPUSH
5404: LD_VAR 0 1
5408: PPUSH
5409: CALL_OW 1
5413: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5414: LD_VAR 0 1
5418: PPUSH
5419: LD_INT 110
5421: PPUSH
5422: LD_INT 117
5424: PPUSH
5425: CALL_OW 171
// end ; end ;
5429: PPOPN 2
5431: END
// on LeaveBuilding ( b , un ) do var barracks ;
5432: LD_INT 0
5434: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5435: LD_VAR 0 1
5439: PUSH
5440: LD_INT 130
5442: PPUSH
5443: LD_INT 17
5445: PPUSH
5446: CALL_OW 428
5450: PUSH
5451: LD_INT 138
5453: PPUSH
5454: LD_INT 22
5456: PPUSH
5457: CALL_OW 428
5461: PUSH
5462: LD_INT 123
5464: PPUSH
5465: LD_INT 17
5467: PPUSH
5468: CALL_OW 428
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: LIST
5477: IN
5478: IFFALSE 5502
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5480: LD_VAR 0 2
5484: PPUSH
5485: LD_INT 135
5487: PPUSH
5488: LD_INT 31
5490: PPUSH
5491: CALL_OW 428
5495: PPUSH
5496: CALL_OW 180
// exit ;
5500: GO 5776
// end ; if b = HexInfo ( 135 , 31 ) then
5502: LD_VAR 0 1
5506: PUSH
5507: LD_INT 135
5509: PPUSH
5510: LD_INT 31
5512: PPUSH
5513: CALL_OW 428
5517: EQUAL
5518: IFFALSE 5590
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_INT 106
5527: PPUSH
5528: LD_INT 51
5530: PPUSH
5531: CALL_OW 428
5535: PPUSH
5536: CALL_OW 180
// if not explodeFirstDepot then
5540: LD_EXP 12
5544: NOT
5545: IFFALSE 5588
// begin explodeFirstDepot := true ;
5547: LD_ADDR_EXP 12
5551: PUSH
5552: LD_INT 1
5554: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5555: LD_INT 525
5557: PPUSH
5558: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5562: LD_INT 127
5564: PPUSH
5565: LD_INT 27
5567: PPUSH
5568: LD_INT 1
5570: PPUSH
5571: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5575: LD_INT 125
5577: PPUSH
5578: LD_INT 29
5580: PPUSH
5581: LD_INT 1
5583: PPUSH
5584: CALL_OW 453
// end ; exit ;
5588: GO 5776
// end ; if b = HexInfo ( 106 , 51 ) then
5590: LD_VAR 0 1
5594: PUSH
5595: LD_INT 106
5597: PPUSH
5598: LD_INT 51
5600: PPUSH
5601: CALL_OW 428
5605: EQUAL
5606: IFFALSE 5706
// begin AddComMoveXY ( un , 106 , 93 ) ;
5608: LD_VAR 0 2
5612: PPUSH
5613: LD_INT 106
5615: PPUSH
5616: LD_INT 93
5618: PPUSH
5619: CALL_OW 171
// if not explodeSecondDepot then
5623: LD_EXP 13
5627: NOT
5628: IFFALSE 5704
// begin explodeSecondDepot := true ;
5630: LD_ADDR_EXP 13
5634: PUSH
5635: LD_INT 1
5637: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5638: LD_INT 420
5640: PPUSH
5641: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5645: LD_INT 111
5647: PPUSH
5648: LD_INT 75
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5658: LD_INT 111
5660: PPUSH
5661: LD_INT 75
5663: PPUSH
5664: LD_INT 1
5666: PPUSH
5667: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5671: LD_INT 108
5673: PPUSH
5674: LD_INT 69
5676: PPUSH
5677: LD_INT 1
5679: PPUSH
5680: CALL_OW 453
// wait ( 0 0$2 ) ;
5684: LD_INT 70
5686: PPUSH
5687: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5691: LD_INT 94
5693: PPUSH
5694: LD_INT 65
5696: PPUSH
5697: LD_INT 1
5699: PPUSH
5700: CALL_OW 453
// end ; exit ;
5704: GO 5776
// end ; if GetBType ( b ) = b_bunker then
5706: LD_VAR 0 1
5710: PPUSH
5711: CALL_OW 266
5715: PUSH
5716: LD_INT 32
5718: EQUAL
5719: IFFALSE 5776
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5721: LD_ADDR_VAR 0 3
5725: PUSH
5726: LD_VAR 0 2
5730: PPUSH
5731: LD_INT 5
5733: PPUSH
5734: CALL 1008 0 2
5738: ST_TO_ADDR
// if barracks then
5739: LD_VAR 0 3
5743: IFFALSE 5761
// AddComEnterUnit ( un , barracks ) else
5745: LD_VAR 0 2
5749: PPUSH
5750: LD_VAR 0 3
5754: PPUSH
5755: CALL_OW 180
5759: GO 5776
// AddComMoveXY ( un , 116 , 110 ) ;
5761: LD_VAR 0 2
5765: PPUSH
5766: LD_INT 116
5768: PPUSH
5769: LD_INT 110
5771: PPUSH
5772: CALL_OW 171
// end ; end ;
5776: PPOPN 3
5778: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5779: LD_VAR 0 1
5783: PUSH
5784: LD_EXP 23
5788: EQUAL
5789: PUSH
5790: LD_VAR 0 2
5794: PUSH
5795: LD_INT 3
5797: PUSH
5798: LD_INT 6
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: IN
5805: AND
5806: IFFALSE 5837
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5808: LD_ADDR_EXP 8
5812: PUSH
5813: LD_VAR 0 1
5817: PPUSH
5818: CALL_OW 250
5822: PUSH
5823: LD_VAR 0 1
5827: PPUSH
5828: CALL_OW 251
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: ST_TO_ADDR
// end ; end_of_file
5837: PPOPN 3
5839: END
// export function Action ; var i , j , un , veh , tmp , rutmp ; begin
5840: LD_INT 0
5842: PPUSH
5843: PPUSH
5844: PPUSH
5845: PPUSH
5846: PPUSH
5847: PPUSH
5848: PPUSH
// InGameOn ;
5849: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5853: LD_INT 5
5855: PPUSH
5856: LD_INT 2
5858: PPUSH
5859: CALL_OW 343
// music_nat := 4 ;
5863: LD_ADDR_OWVAR 71
5867: PUSH
5868: LD_INT 4
5870: ST_TO_ADDR
// music_class := music_combat ;
5871: LD_ADDR_OWVAR 72
5875: PUSH
5876: LD_INT 1
5878: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5879: LD_INT 133
5881: PPUSH
5882: LD_INT 2
5884: PPUSH
5885: LD_INT 2
5887: PPUSH
5888: LD_INT 10
5890: PPUSH
5891: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5895: LD_INT 133
5897: PPUSH
5898: LD_INT 2
5900: PPUSH
5901: CALL_OW 86
// wait ( 0 0$1 ) ;
5905: LD_INT 35
5907: PPUSH
5908: CALL_OW 67
// uc_side := 6 ;
5912: LD_ADDR_OWVAR 20
5916: PUSH
5917: LD_INT 6
5919: ST_TO_ADDR
// uc_nation := 3 ;
5920: LD_ADDR_OWVAR 21
5924: PUSH
5925: LD_INT 3
5927: ST_TO_ADDR
// rutmp := [ ] ;
5928: LD_ADDR_VAR 0 7
5932: PUSH
5933: EMPTY
5934: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5935: LD_INT 6
5937: PPUSH
5938: LD_INT 3
5940: PPUSH
5941: LD_INT 21
5943: PPUSH
5944: LD_INT 1
5946: PPUSH
5947: LD_INT 1
5949: PPUSH
5950: LD_INT 44
5952: PPUSH
5953: LD_INT 66
5955: PPUSH
5956: CALL 336 0 7
// veh := CreateVehicle ;
5960: LD_ADDR_VAR 0 5
5964: PUSH
5965: CALL_OW 45
5969: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5970: LD_VAR 0 5
5974: PPUSH
5975: LD_INT 3
5977: PPUSH
5978: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5982: LD_VAR 0 5
5986: PPUSH
5987: LD_INT 8
5989: PPUSH
5990: LD_INT 0
5992: PPUSH
5993: CALL_OW 49
// SetLives ( veh , 500 ) ;
5997: LD_VAR 0 5
6001: PPUSH
6002: LD_INT 500
6004: PPUSH
6005: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
6009: LD_INT 0
6011: PPUSH
6012: LD_INT 3
6014: PPUSH
6015: LD_INT 3
6017: PPUSH
6018: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6022: CALL_OW 44
6026: PPUSH
6027: LD_VAR 0 5
6031: PPUSH
6032: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
6036: LD_VAR 0 5
6040: PPUSH
6041: LD_INT 133
6043: PPUSH
6044: LD_INT 11
6046: PPUSH
6047: CALL_OW 111
// rutmp := [ veh ] ;
6051: LD_ADDR_VAR 0 7
6055: PUSH
6056: LD_VAR 0 5
6060: PUSH
6061: EMPTY
6062: LIST
6063: ST_TO_ADDR
// for i := 1 to 4 do
6064: LD_ADDR_VAR 0 2
6068: PUSH
6069: DOUBLE
6070: LD_INT 1
6072: DEC
6073: ST_TO_ADDR
6074: LD_INT 4
6076: PUSH
6077: FOR_TO
6078: IFFALSE 6185
// begin PrepareHuman ( false , i , 2 ) ;
6080: LD_INT 0
6082: PPUSH
6083: LD_VAR 0 2
6087: PPUSH
6088: LD_INT 2
6090: PPUSH
6091: CALL_OW 380
// un := CreateHuman ;
6095: LD_ADDR_VAR 0 4
6099: PUSH
6100: CALL_OW 44
6104: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6105: LD_VAR 0 4
6109: PPUSH
6110: LD_INT 3
6112: PPUSH
6113: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6117: LD_VAR 0 4
6121: PPUSH
6122: LD_INT 8
6124: PPUSH
6125: LD_INT 0
6127: PPUSH
6128: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
6132: LD_ADDR_VAR 0 7
6136: PUSH
6137: LD_VAR 0 7
6141: PPUSH
6142: LD_VAR 0 7
6146: PUSH
6147: LD_INT 1
6149: PLUS
6150: PPUSH
6151: LD_VAR 0 4
6155: PPUSH
6156: CALL_OW 1
6160: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
6161: LD_VAR 0 4
6165: PPUSH
6166: LD_INT 133
6168: PPUSH
6169: LD_INT 11
6171: PPUSH
6172: CALL_OW 111
// wait ( 0 0$0.5 ) ;
6176: LD_INT 18
6178: PPUSH
6179: CALL_OW 67
// end ;
6183: GO 6077
6185: POP
6186: POP
// for i in rutmp do
6187: LD_ADDR_VAR 0 2
6191: PUSH
6192: LD_VAR 0 7
6196: PUSH
6197: FOR_IN
6198: IFFALSE 6247
// begin AddComMoveXY ( i , 99 , 65 ) ;
6200: LD_VAR 0 2
6204: PPUSH
6205: LD_INT 99
6207: PPUSH
6208: LD_INT 65
6210: PPUSH
6211: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
6215: LD_VAR 0 2
6219: PPUSH
6220: LD_INT 76
6222: PPUSH
6223: LD_INT 108
6225: PPUSH
6226: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6230: LD_VAR 0 2
6234: PPUSH
6235: LD_INT 92
6237: PPUSH
6238: LD_INT 176
6240: PPUSH
6241: CALL_OW 171
// end ;
6245: GO 6197
6247: POP
6248: POP
// wait ( 0 0$10 ) ;
6249: LD_INT 350
6251: PPUSH
6252: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6256: LD_ADDR_VAR 0 6
6260: PUSH
6261: LD_EXP 18
6265: PUSH
6266: LD_EXP 19
6270: PUSH
6271: LD_EXP 20
6275: PUSH
6276: LD_EXP 21
6280: PUSH
6281: LD_EXP 22
6285: PUSH
6286: LD_EXP 23
6290: PUSH
6291: LD_EXP 24
6295: PUSH
6296: LD_EXP 25
6300: PUSH
6301: LD_EXP 27
6305: PUSH
6306: LD_EXP 28
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: PUSH
6323: LD_EXP 29
6327: UNION
6328: ST_TO_ADDR
// tmp := tmp diff 0 ;
6329: LD_ADDR_VAR 0 6
6333: PUSH
6334: LD_VAR 0 6
6338: PUSH
6339: LD_INT 0
6341: DIFF
6342: ST_TO_ADDR
// for i in heikeVehicles do
6343: LD_ADDR_VAR 0 2
6347: PUSH
6348: LD_EXP 30
6352: PUSH
6353: FOR_IN
6354: IFFALSE 6722
// begin if not tmp then
6356: LD_VAR 0 6
6360: NOT
6361: IFFALSE 6365
// continue ;
6363: GO 6353
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6365: LD_INT 2
6367: PPUSH
6368: LD_VAR 0 2
6372: PUSH
6373: LD_INT 5
6375: ARRAY
6376: PPUSH
6377: LD_VAR 0 2
6381: PUSH
6382: LD_INT 1
6384: ARRAY
6385: PPUSH
6386: LD_VAR 0 2
6390: PUSH
6391: LD_INT 2
6393: ARRAY
6394: PPUSH
6395: LD_VAR 0 2
6399: PUSH
6400: LD_INT 3
6402: ARRAY
6403: PPUSH
6404: LD_VAR 0 2
6408: PUSH
6409: LD_INT 4
6411: ARRAY
6412: PPUSH
6413: LD_INT 34
6415: PPUSH
6416: CALL 336 0 7
// veh := CreateVehicle ;
6420: LD_ADDR_VAR 0 5
6424: PUSH
6425: CALL_OW 45
6429: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6430: LD_VAR 0 2
6434: PUSH
6435: LD_INT 4
6437: ARRAY
6438: PUSH
6439: LD_INT 51
6441: PUSH
6442: LD_INT 32
6444: PUSH
6445: LD_INT 12
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: IN
6453: IFFALSE 6533
// begin if i [ 7 ] [ 1 ] then
6455: LD_VAR 0 2
6459: PUSH
6460: LD_INT 7
6462: ARRAY
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: IFFALSE 6494
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6469: LD_VAR 0 5
6473: PPUSH
6474: LD_INT 1
6476: PPUSH
6477: LD_VAR 0 2
6481: PUSH
6482: LD_INT 7
6484: ARRAY
6485: PUSH
6486: LD_INT 1
6488: ARRAY
6489: PPUSH
6490: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6494: LD_VAR 0 2
6498: PUSH
6499: LD_INT 7
6501: ARRAY
6502: PUSH
6503: LD_INT 2
6505: ARRAY
6506: IFFALSE 6533
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6508: LD_VAR 0 5
6512: PPUSH
6513: LD_INT 2
6515: PPUSH
6516: LD_VAR 0 2
6520: PUSH
6521: LD_INT 7
6523: ARRAY
6524: PUSH
6525: LD_INT 2
6527: ARRAY
6528: PPUSH
6529: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6533: LD_VAR 0 5
6537: PPUSH
6538: LD_INT 3
6540: PPUSH
6541: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6545: LD_VAR 0 5
6549: PPUSH
6550: LD_INT 8
6552: PPUSH
6553: LD_INT 0
6555: PPUSH
6556: CALL_OW 49
// for j := 1 to tmp do
6560: LD_ADDR_VAR 0 3
6564: PUSH
6565: DOUBLE
6566: LD_INT 1
6568: DEC
6569: ST_TO_ADDR
6570: LD_VAR 0 6
6574: PUSH
6575: FOR_TO
6576: IFFALSE 6649
// begin if i [ 8 ] = GetClass ( tmp [ j ] ) then
6578: LD_VAR 0 2
6582: PUSH
6583: LD_INT 8
6585: ARRAY
6586: PUSH
6587: LD_VAR 0 6
6591: PUSH
6592: LD_VAR 0 3
6596: ARRAY
6597: PPUSH
6598: CALL_OW 257
6602: EQUAL
6603: IFFALSE 6647
// begin PlaceHumanInUnit ( tmp [ j ] , veh ) ;
6605: LD_VAR 0 6
6609: PUSH
6610: LD_VAR 0 3
6614: ARRAY
6615: PPUSH
6616: LD_VAR 0 5
6620: PPUSH
6621: CALL_OW 52
// tmp := Delete ( tmp , j ) ;
6625: LD_ADDR_VAR 0 6
6629: PUSH
6630: LD_VAR 0 6
6634: PPUSH
6635: LD_VAR 0 3
6639: PPUSH
6640: CALL_OW 3
6644: ST_TO_ADDR
// break ;
6645: GO 6649
// end ; end ;
6647: GO 6575
6649: POP
6650: POP
// if IsEmpty ( veh ) then
6651: LD_VAR 0 5
6655: PPUSH
6656: CALL 32401 0 1
6660: IFFALSE 6698
// begin PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6662: LD_VAR 0 6
6666: PUSH
6667: LD_INT 1
6669: ARRAY
6670: PPUSH
6671: LD_VAR 0 5
6675: PPUSH
6676: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6680: LD_ADDR_VAR 0 6
6684: PUSH
6685: LD_VAR 0 6
6689: PPUSH
6690: LD_INT 1
6692: PPUSH
6693: CALL_OW 3
6697: ST_TO_ADDR
// end ; ComAgressiveMove ( veh , 133 , 7 ) ;
6698: LD_VAR 0 5
6702: PPUSH
6703: LD_INT 133
6705: PPUSH
6706: LD_INT 7
6708: PPUSH
6709: CALL_OW 114
// wait ( 0 0$1 ) ;
6713: LD_INT 35
6715: PPUSH
6716: CALL_OW 67
// end ;
6720: GO 6353
6722: POP
6723: POP
// if tmp then
6724: LD_VAR 0 6
6728: IFFALSE 6784
// for i in tmp do
6730: LD_ADDR_VAR 0 2
6734: PUSH
6735: LD_VAR 0 6
6739: PUSH
6740: FOR_IN
6741: IFFALSE 6782
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6743: LD_VAR 0 2
6747: PPUSH
6748: LD_INT 10
6750: PPUSH
6751: LD_INT 0
6753: PPUSH
6754: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6758: LD_VAR 0 2
6762: PPUSH
6763: LD_INT 146
6765: PPUSH
6766: LD_INT 7
6768: PPUSH
6769: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6773: LD_INT 18
6775: PPUSH
6776: CALL_OW 67
// end ;
6780: GO 6740
6782: POP
6783: POP
// if heikeApes then
6784: LD_EXP 31
6788: IFFALSE 6844
// for i in heikeApes do
6790: LD_ADDR_VAR 0 2
6794: PUSH
6795: LD_EXP 31
6799: PUSH
6800: FOR_IN
6801: IFFALSE 6842
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6803: LD_VAR 0 2
6807: PPUSH
6808: LD_INT 10
6810: PPUSH
6811: LD_INT 0
6813: PPUSH
6814: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6818: LD_VAR 0 2
6822: PPUSH
6823: LD_INT 146
6825: PPUSH
6826: LD_INT 7
6828: PPUSH
6829: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6833: LD_INT 18
6835: PPUSH
6836: CALL_OW 67
// end ;
6840: GO 6800
6842: POP
6843: POP
// DialogueOn ;
6844: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6848: LD_EXP 18
6852: PPUSH
6853: LD_STRING DH-outpost-a-1
6855: PPUSH
6856: CALL_OW 88
// DialogueOff ;
6860: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6864: LD_INT 133
6866: PPUSH
6867: LD_INT 2
6869: PPUSH
6870: LD_INT 2
6872: PPUSH
6873: CALL_OW 331
// InGameOff ;
6877: CALL_OW 9
// music_nat := 0 ;
6881: LD_ADDR_OWVAR 71
6885: PUSH
6886: LD_INT 0
6888: ST_TO_ADDR
// music_class := 0 ;
6889: LD_ADDR_OWVAR 72
6893: PUSH
6894: LD_INT 0
6896: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6897: LD_STRING Outposts
6899: PPUSH
6900: CALL_OW 337
// SaveForQuickRestart ;
6904: CALL_OW 22
// end ;
6908: LD_VAR 0 1
6912: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6913: LD_INT 22
6915: PUSH
6916: LD_INT 2
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: LD_INT 91
6925: PUSH
6926: LD_EXP 21
6930: PUSH
6931: LD_INT 20
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 69
6947: PUSH
6948: LD_EXP 3
6952: AND
6953: PUSH
6954: LD_EXP 21
6958: PPUSH
6959: CALL_OW 302
6963: AND
6964: IFFALSE 7211
6966: GO 6968
6968: DISABLE
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
6973: PPUSH
6974: PPUSH
// begin IbrahimBetrayal ;
6975: CALL 7214 0 0
// repeat wait ( 0 0$1 ) ;
6979: LD_INT 35
6981: PPUSH
6982: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6986: LD_EXP 21
6990: PPUSH
6991: CALL_OW 301
6995: PUSH
6996: LD_INT 22
6998: PUSH
6999: LD_INT 2
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 91
7008: PUSH
7009: LD_EXP 21
7013: PUSH
7014: LD_INT 6
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PPUSH
7026: CALL_OW 69
7030: PUSH
7031: LD_EXP 21
7035: PPUSH
7036: CALL_OW 302
7040: AND
7041: OR
7042: IFFALSE 6979
// if IsDead ( Ibrahim ) then
7044: LD_EXP 21
7048: PPUSH
7049: CALL_OW 301
7053: IFFALSE 7057
// exit ;
7055: GO 7211
// x := GetX ( Ibrahim ) ;
7057: LD_ADDR_VAR 0 1
7061: PUSH
7062: LD_EXP 21
7066: PPUSH
7067: CALL_OW 250
7071: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
7072: LD_ADDR_VAR 0 2
7076: PUSH
7077: LD_EXP 21
7081: PPUSH
7082: CALL_OW 251
7086: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
7087: LD_ADDR_VAR 0 3
7091: PUSH
7092: LD_EXP 21
7096: PPUSH
7097: CALL_OW 254
7101: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
7102: LD_ADDR_VAR 0 4
7106: PUSH
7107: LD_EXP 21
7111: PPUSH
7112: CALL_OW 256
7116: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
7117: LD_EXP 21
7121: PPUSH
7122: CALL_OW 64
// uc_side := 2 ;
7126: LD_ADDR_OWVAR 20
7130: PUSH
7131: LD_INT 2
7133: ST_TO_ADDR
// uc_nation := 2 ;
7134: LD_ADDR_OWVAR 21
7138: PUSH
7139: LD_INT 2
7141: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
7142: LD_ADDR_EXP 21
7146: PUSH
7147: LD_STRING Ibrahim
7149: PPUSH
7150: LD_INT 0
7152: PPUSH
7153: LD_STRING 
7155: PPUSH
7156: CALL 30245 0 3
7160: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
7161: LD_EXP 21
7165: PPUSH
7166: LD_VAR 0 3
7170: PPUSH
7171: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
7175: LD_EXP 21
7179: PPUSH
7180: LD_VAR 0 1
7184: PPUSH
7185: LD_VAR 0 2
7189: PPUSH
7190: LD_INT 0
7192: PPUSH
7193: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
7197: LD_EXP 21
7201: PPUSH
7202: LD_VAR 0 4
7206: PPUSH
7207: CALL_OW 234
// end ;
7211: PPOPN 4
7213: END
// export function IbrahimBetrayal ; var i , tmp ; begin
7214: LD_INT 0
7216: PPUSH
7217: PPUSH
7218: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
7219: LD_INT 122
7221: PPUSH
7222: LD_INT 77
7224: PPUSH
7225: LD_INT 2
7227: PPUSH
7228: LD_INT 6
7230: NEG
7231: PPUSH
7232: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
7236: LD_EXP 21
7240: PPUSH
7241: LD_INT 123
7243: PPUSH
7244: LD_INT 79
7246: PPUSH
7247: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
7251: LD_EXP 21
7255: PPUSH
7256: LD_INT 125
7258: PPUSH
7259: LD_INT 82
7261: PPUSH
7262: CALL_OW 178
// wait ( 0 0$2 ) ;
7266: LD_INT 70
7268: PPUSH
7269: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
7273: LD_EXP 42
7277: PPUSH
7278: LD_EXP 21
7282: PPUSH
7283: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
7287: LD_EXP 42
7291: PPUSH
7292: LD_STRING DRum-outpost-b-3
7294: PPUSH
7295: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
7299: LD_ADDR_VAR 0 3
7303: PUSH
7304: LD_INT 125
7306: PPUSH
7307: LD_INT 76
7309: PPUSH
7310: CALL_OW 428
7314: PUSH
7315: LD_INT 125
7317: PPUSH
7318: LD_INT 79
7320: PPUSH
7321: CALL_OW 428
7325: PUSH
7326: LD_INT 125
7328: PPUSH
7329: LD_INT 82
7331: PPUSH
7332: CALL_OW 428
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: ST_TO_ADDR
// for i in tmp do
7342: LD_ADDR_VAR 0 2
7346: PUSH
7347: LD_VAR 0 3
7351: PUSH
7352: FOR_IN
7353: IFFALSE 7369
// SetLives ( i , 200 ) ;
7355: LD_VAR 0 2
7359: PPUSH
7360: LD_INT 200
7362: PPUSH
7363: CALL_OW 234
7367: GO 7352
7369: POP
7370: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7371: LD_EXP 21
7375: PPUSH
7376: LD_STRING DI-outpost-b-4
7378: PPUSH
7379: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7383: LD_EXP 21
7387: PPUSH
7388: LD_INT 5
7390: PPUSH
7391: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7395: LD_EXP 21
7399: PUSH
7400: LD_EXP 42
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PPUSH
7409: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7413: LD_INT 122
7415: PPUSH
7416: LD_INT 77
7418: PPUSH
7419: LD_INT 2
7421: PPUSH
7422: CALL_OW 331
// if Givi then
7426: LD_EXP 19
7430: IFFALSE 7446
// Say ( Givi , DG-1-outpost-b-5 ) else
7432: LD_EXP 19
7436: PPUSH
7437: LD_STRING DG-1-outpost-b-5
7439: PPUSH
7440: CALL_OW 88
7444: GO 7511
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7446: LD_EXP 29
7450: PPUSH
7451: LD_INT 26
7453: PUSH
7454: LD_INT 2
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PPUSH
7461: CALL_OW 72
7465: PUSH
7466: LD_INT 1
7468: ARRAY
7469: PPUSH
7470: LD_STRING DArf-outpost-b-a-5
7472: PPUSH
7473: CALL_OW 88
7477: NOT
7478: IFFALSE 7511
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7480: LD_EXP 29
7484: PPUSH
7485: LD_INT 26
7487: PUSH
7488: LD_INT 1
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PPUSH
7495: CALL_OW 72
7499: PUSH
7500: LD_INT 1
7502: ARRAY
7503: PPUSH
7504: LD_STRING DArm-outpost-b-a-5
7506: PPUSH
7507: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7511: LD_INT 35
7513: PPUSH
7514: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7518: LD_EXP 21
7522: PPUSH
7523: CALL_OW 301
7527: PUSH
7528: LD_EXP 18
7532: PPUSH
7533: LD_EXP 21
7537: PPUSH
7538: CALL_OW 296
7542: PUSH
7543: LD_INT 6
7545: LESS
7546: PUSH
7547: LD_EXP 21
7551: PPUSH
7552: CALL_OW 302
7556: AND
7557: OR
7558: IFFALSE 7511
// if IsDead ( Ibrahim ) then
7560: LD_EXP 21
7564: PPUSH
7565: CALL_OW 301
7569: IFFALSE 7585
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7571: LD_EXP 18
7575: PPUSH
7576: LD_STRING DH-ibrahimdead-1
7578: PPUSH
7579: CALL_OW 88
// exit ;
7583: GO 7626
// end ; CenterNowOnUnits ( Ibrahim ) ;
7585: LD_EXP 21
7589: PPUSH
7590: CALL_OW 87
// DialogueOn ;
7594: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7598: LD_EXP 21
7602: PPUSH
7603: LD_STRING DI-ibrahimlives-1
7605: PPUSH
7606: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7610: LD_EXP 18
7614: PPUSH
7615: LD_STRING DH-Ibrahimlives-2
7617: PPUSH
7618: CALL_OW 88
// DialogueOff ;
7622: CALL_OW 7
// end ;
7626: LD_VAR 0 1
7630: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7631: LD_INT 11
7633: PPUSH
7634: LD_INT 22
7636: PUSH
7637: LD_INT 2
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PPUSH
7644: CALL_OW 70
7648: PUSH
7649: LD_OWVAR 1
7653: PUSH
7654: LD_INT 18900
7656: PUSH
7657: LD_INT 16800
7659: PUSH
7660: LD_INT 16800
7662: PUSH
7663: LD_INT 15750
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: PUSH
7672: LD_OWVAR 67
7676: ARRAY
7677: GREATEREQUAL
7678: OR
7679: IFFALSE 8187
7681: GO 7683
7683: DISABLE
// begin outerAreaAchived := true ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 1
7691: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7692: LD_INT 700
7694: PPUSH
7695: CALL_OW 67
// DialogueOn ;
7699: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7703: LD_EXP 26
7707: PPUSH
7708: LD_STRING DShar-radio-1
7710: PPUSH
7711: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7715: LD_EXP 26
7719: PPUSH
7720: LD_STRING DShar-radio-2
7722: PPUSH
7723: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7727: LD_EXP 18
7731: PPUSH
7732: LD_STRING DH-radio-2
7734: PPUSH
7735: CALL_OW 88
// DialogueOff ;
7739: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7743: LD_STRING Gaidar
7745: PPUSH
7746: CALL_OW 337
// if Difficulty < 3 then
7750: LD_OWVAR 67
7754: PUSH
7755: LD_INT 3
7757: LESS
7758: IFFALSE 7824
// begin DialogueOn ;
7760: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7764: LD_INT 11
7766: PPUSH
7767: LD_INT 14
7769: PPUSH
7770: LD_INT 2
7772: PPUSH
7773: LD_INT 6
7775: NEG
7776: PPUSH
7777: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7781: LD_INT 11
7783: PPUSH
7784: LD_INT 14
7786: PPUSH
7787: LD_INT 2
7789: PPUSH
7790: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7794: LD_INT 11
7796: PPUSH
7797: LD_INT 14
7799: PPUSH
7800: CALL_OW 84
// dwait ( 0 0$1 ) ;
7804: LD_INT 35
7806: PPUSH
7807: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7811: LD_EXP 18
7815: PPUSH
7816: CALL_OW 87
// DialogueOff ;
7820: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7824: LD_INT 1050
7826: PUSH
7827: LD_INT 350
7829: PPUSH
7830: LD_INT 525
7832: PPUSH
7833: CALL_OW 12
7837: PUSH
7838: LD_OWVAR 67
7842: MUL
7843: PLUS
7844: PPUSH
7845: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7849: LD_INT 35
7851: PPUSH
7852: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7856: LD_INT 2
7858: PPUSH
7859: LD_INT 1
7861: PPUSH
7862: CALL_OW 428
7866: PUSH
7867: LD_INT 0
7869: EQUAL
7870: IFFALSE 7849
// SetDir ( Gaidar , 2 ) ;
7872: LD_EXP 35
7876: PPUSH
7877: LD_INT 2
7879: PPUSH
7880: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7884: LD_EXP 35
7888: PPUSH
7889: LD_INT 2
7891: PPUSH
7892: LD_INT 1
7894: PPUSH
7895: LD_INT 0
7897: PPUSH
7898: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7902: LD_EXP 35
7906: PPUSH
7907: LD_INT 19
7909: PPUSH
7910: LD_INT 24
7912: PPUSH
7913: CALL_OW 111
// if Difficulty < 3 then
7917: LD_OWVAR 67
7921: PUSH
7922: LD_INT 3
7924: LESS
7925: IFFALSE 7964
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7927: LD_INT 11
7929: PPUSH
7930: LD_INT 14
7932: PPUSH
7933: LD_INT 2
7935: PPUSH
7936: LD_INT 6
7938: NEG
7939: PPUSH
7940: CALL_OW 330
// wait ( 0 0$2 ) ;
7944: LD_INT 70
7946: PPUSH
7947: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
7951: LD_INT 11
7953: PPUSH
7954: LD_INT 14
7956: PPUSH
7957: LD_INT 2
7959: PPUSH
7960: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
7964: LD_EXP 35
7968: PPUSH
7969: LD_INT 210
7971: PPUSH
7972: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7976: LD_EXP 35
7980: PPUSH
7981: LD_INT 38
7983: PPUSH
7984: LD_INT 47
7986: PPUSH
7987: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7991: LD_EXP 35
7995: PPUSH
7996: LD_INT 32
7998: PPUSH
7999: LD_INT 59
8001: PPUSH
8002: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
8006: LD_EXP 35
8010: PPUSH
8011: LD_INT 350
8013: PPUSH
8014: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
8018: LD_EXP 35
8022: PPUSH
8023: LD_INT 62
8025: PPUSH
8026: LD_INT 116
8028: PPUSH
8029: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
8033: LD_EXP 35
8037: PPUSH
8038: LD_INT 92
8040: PPUSH
8041: LD_INT 177
8043: PPUSH
8044: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8048: LD_INT 35
8050: PPUSH
8051: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
8055: LD_EXP 35
8059: PPUSH
8060: CALL_OW 301
8064: PUSH
8065: LD_EXP 35
8069: PPUSH
8070: LD_INT 92
8072: PPUSH
8073: LD_INT 177
8075: PPUSH
8076: CALL_OW 307
8080: OR
8081: IFFALSE 8048
// if IsAt ( Gaidar , 92 , 177 ) then
8083: LD_EXP 35
8087: PPUSH
8088: LD_INT 92
8090: PPUSH
8091: LD_INT 177
8093: PPUSH
8094: CALL_OW 307
8098: IFFALSE 8165
// begin DialogueOn ;
8100: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
8104: LD_INT 92
8106: PPUSH
8107: LD_INT 177
8109: PPUSH
8110: LD_INT 2
8112: PPUSH
8113: LD_INT 3
8115: NEG
8116: PPUSH
8117: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
8121: LD_EXP 35
8125: PPUSH
8126: CALL_OW 87
// dwait ( 0 0$2 ) ;
8130: LD_INT 70
8132: PPUSH
8133: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
8137: LD_INT 92
8139: PPUSH
8140: LD_INT 177
8142: PPUSH
8143: LD_INT 2
8145: PPUSH
8146: CALL_OW 331
// DialogueOff ;
8150: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
8154: LD_EXP 35
8158: PPUSH
8159: CALL_OW 64
// exit ;
8163: GO 8187
// end ; gaidarKilled := true ;
8165: LD_ADDR_EXP 14
8169: PUSH
8170: LD_INT 1
8172: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
8173: LD_STRING GaidarKilled
8175: PPUSH
8176: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
8180: LD_STRING ACH_COMMISAR
8182: PPUSH
8183: CALL_OW 543
// end ;
8187: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
8188: LD_INT 2
8190: PPUSH
8191: LD_EXP 35
8195: PPUSH
8196: CALL_OW 292
8200: IFFALSE 8217
8202: GO 8204
8204: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
8205: LD_EXP 35
8209: PPUSH
8210: LD_STRING DT-objective-1
8212: PPUSH
8213: CALL_OW 88
8217: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
8218: LD_INT 22
8220: PUSH
8221: LD_INT 2
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PUSH
8228: LD_INT 2
8230: PUSH
8231: LD_INT 95
8233: PUSH
8234: LD_INT 5
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: LD_INT 95
8243: PUSH
8244: LD_INT 6
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: PUSH
8251: LD_INT 95
8253: PUSH
8254: LD_INT 7
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PPUSH
8271: CALL_OW 69
8275: IFFALSE 8312
8277: GO 8279
8279: DISABLE
// begin DialogueOn ;
8280: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
8284: LD_EXP 18
8288: PPUSH
8289: LD_STRING DH-outpost-last-1
8291: PPUSH
8292: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
8296: LD_EXP 34
8300: PPUSH
8301: LD_STRING DB-outpost-last-2
8303: PPUSH
8304: CALL_OW 94
// DialogueOff ;
8308: CALL_OW 7
// end ;
8312: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
8313: LD_INT 200
8315: PPUSH
8316: CALL_OW 256
8320: PUSH
8321: LD_INT 999
8323: LESS
8324: PUSH
8325: LD_INT 200
8327: PPUSH
8328: CALL_OW 255
8332: PUSH
8333: LD_INT 2
8335: EQUAL
8336: OR
8337: IFFALSE 8510
8339: GO 8341
8341: DISABLE
8342: LD_INT 0
8344: PPUSH
8345: PPUSH
// begin if not earlyEscape then
8346: LD_EXP 16
8350: NOT
8351: IFFALSE 8377
// begin SayRadio ( Burlak , DB-end-1 ) ;
8353: LD_EXP 34
8357: PPUSH
8358: LD_STRING DB-end-1
8360: PPUSH
8361: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8365: LD_EXP 18
8369: PPUSH
8370: LD_STRING DH-end-2
8372: PPUSH
8373: CALL_OW 88
// end ; if tick <= 15 15$00 then
8377: LD_OWVAR 1
8381: PUSH
8382: LD_INT 31500
8384: LESSEQUAL
8385: IFFALSE 8394
// SetAchievement ( ACH_FIST ) ;
8387: LD_STRING ACH_FIST
8389: PPUSH
8390: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8394: LD_ADDR_VAR 0 2
8398: PUSH
8399: LD_INT 22
8401: PUSH
8402: LD_INT 3
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 3
8411: PUSH
8412: LD_INT 21
8414: PUSH
8415: LD_INT 3
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PPUSH
8430: CALL_OW 69
8434: ST_TO_ADDR
// if not tmp then
8435: LD_VAR 0 2
8439: NOT
8440: IFFALSE 8444
// exit ;
8442: GO 8510
// for i in tmp do
8444: LD_ADDR_VAR 0 1
8448: PUSH
8449: LD_VAR 0 2
8453: PUSH
8454: FOR_IN
8455: IFFALSE 8508
// begin SetTag ( i , tEscape ) ;
8457: LD_VAR 0 1
8461: PPUSH
8462: LD_EXP 17
8466: PPUSH
8467: CALL_OW 109
// if IsInUnit ( i ) then
8471: LD_VAR 0 1
8475: PPUSH
8476: CALL_OW 310
8480: IFFALSE 8491
// ComExitBuilding ( i ) ;
8482: LD_VAR 0 1
8486: PPUSH
8487: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8491: LD_VAR 0 1
8495: PPUSH
8496: LD_INT 92
8498: PPUSH
8499: LD_INT 177
8501: PPUSH
8502: CALL_OW 171
// end ;
8506: GO 8454
8508: POP
8509: POP
// end ;
8510: PPOPN 2
8512: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8513: LD_INT 4
8515: PPUSH
8516: LD_INT 22
8518: PUSH
8519: LD_INT 2
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PPUSH
8526: CALL_OW 70
8530: PUSH
8531: LD_EXP 15
8535: NOT
8536: AND
8537: PUSH
8538: LD_EXP 27
8542: PPUSH
8543: CALL_OW 302
8547: AND
8548: IFFALSE 8788
8550: GO 8552
8552: DISABLE
// begin DialogueOn ;
8553: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8557: LD_INT 111
8559: PPUSH
8560: LD_INT 54
8562: PPUSH
8563: LD_INT 2
8565: PPUSH
8566: LD_INT 16
8568: NEG
8569: PPUSH
8570: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8574: LD_INT 111
8576: PPUSH
8577: LD_INT 53
8579: PPUSH
8580: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8584: LD_INT 10
8586: PPUSH
8587: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8591: LD_EXP 27
8595: PPUSH
8596: LD_STRING DKs-Hannibal-1
8598: PPUSH
8599: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8603: LD_EXP 27
8607: PPUSH
8608: LD_STRING DKs-Hannibal-2
8610: PPUSH
8611: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8615: LD_EXP 27
8619: PPUSH
8620: LD_STRING DKs-Hannibal-3
8622: PPUSH
8623: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8627: LD_EXP 27
8631: PPUSH
8632: LD_STRING DKs-Hannibal-4
8634: PPUSH
8635: CALL_OW 88
// dwait ( 0 0$1 ) ;
8639: LD_INT 35
8641: PPUSH
8642: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8646: LD_INT 111
8648: PPUSH
8649: LD_INT 54
8651: PPUSH
8652: LD_INT 2
8654: PPUSH
8655: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8659: LD_INT 173
8661: PPUSH
8662: LD_INT 76
8664: PPUSH
8665: LD_INT 2
8667: PPUSH
8668: LD_INT 12
8670: NEG
8671: PPUSH
8672: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8676: LD_INT 173
8678: PPUSH
8679: LD_INT 76
8681: PPUSH
8682: LD_INT 2
8684: PPUSH
8685: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8689: LD_INT 173
8691: PPUSH
8692: LD_INT 76
8694: PPUSH
8695: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8699: LD_EXP 27
8703: PPUSH
8704: LD_STRING DKs-Hannibal-5
8706: PPUSH
8707: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8711: LD_EXP 22
8715: PUSH
8716: LD_INT 22
8718: PUSH
8719: LD_INT 2
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 34
8728: PUSH
8729: LD_INT 26
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PPUSH
8740: CALL_OW 69
8744: NOT
8745: AND
8746: IFFALSE 8784
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8748: LD_EXP 22
8752: PPUSH
8753: LD_STRING DKam-Hannibal-a-6
8755: PPUSH
8756: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8760: LD_EXP 22
8764: PPUSH
8765: LD_STRING DKam-Hannibal-a-7
8767: PPUSH
8768: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8772: LD_EXP 19
8776: PPUSH
8777: LD_STRING DG-Hannibal-a-8
8779: PPUSH
8780: CALL_OW 88
// end ; DialogueOff ;
8784: CALL_OW 7
// end ;
8788: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8789: LD_INT 225
8791: PPUSH
8792: CALL_OW 302
8796: PUSH
8797: LD_INT 200
8799: PPUSH
8800: CALL_OW 302
8804: AND
8805: PUSH
8806: LD_INT 12
8808: PPUSH
8809: LD_INT 21
8811: PUSH
8812: LD_INT 3
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PPUSH
8819: CALL_OW 70
8823: PUSH
8824: LD_INT 2
8826: GREATER
8827: AND
8828: PUSH
8829: LD_INT 13
8831: PPUSH
8832: LD_INT 22
8834: PUSH
8835: LD_INT 2
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PPUSH
8842: CALL_OW 70
8846: PUSH
8847: LD_INT 3
8849: GREATER
8850: AND
8851: IFFALSE 8864
8853: GO 8855
8855: DISABLE
// hannibalPath := true ;
8856: LD_ADDR_EXP 9
8860: PUSH
8861: LD_INT 1
8863: ST_TO_ADDR
8864: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8865: LD_EXP 9
8869: PUSH
8870: LD_INT 6
8872: PPUSH
8873: LD_INT 22
8875: PUSH
8876: LD_INT 2
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PPUSH
8883: CALL_OW 70
8887: AND
8888: IFFALSE 9233
8890: GO 8892
8892: DISABLE
8893: LD_INT 0
8895: PPUSH
8896: PPUSH
8897: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8898: LD_ADDR_VAR 0 2
8902: PUSH
8903: LD_INT 6
8905: PPUSH
8906: LD_INT 22
8908: PUSH
8909: LD_INT 2
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PPUSH
8916: CALL_OW 70
8920: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8921: LD_ADDR_VAR 0 3
8925: PUSH
8926: LD_VAR 0 2
8930: PPUSH
8931: LD_INT 34
8933: PUSH
8934: LD_INT 26
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 72
8945: PUSH
8946: LD_INT 0
8948: GREATER
8949: ST_TO_ADDR
// DialogueOn ;
8950: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8954: LD_EXP 18
8958: PPUSH
8959: LD_STRING DH-Cleverattack-1
8961: PPUSH
8962: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8966: LD_EXP 18
8970: PPUSH
8971: LD_STRING DH-Cleverattack-2
8973: PPUSH
8974: CALL_OW 88
// if hasFlameThrower then
8978: LD_VAR 0 3
8982: IFFALSE 9010
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8984: LD_EXP 34
8988: PPUSH
8989: LD_STRING DB-Cleverattack-3
8991: PPUSH
8992: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8996: LD_EXP 18
9000: PPUSH
9001: LD_STRING DH-Cleverattack-4
9003: PPUSH
9004: CALL_OW 88
// end else
9008: GO 9034
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
9010: LD_EXP 34
9014: PPUSH
9015: LD_STRING DB-Cleverattack-a-3
9017: PPUSH
9018: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
9022: LD_EXP 18
9026: PPUSH
9027: LD_STRING DH-Cleverattack-a-4
9029: PPUSH
9030: CALL_OW 88
// end ; DialogueOff ;
9034: CALL_OW 7
// if not hasFlameThrower then
9038: LD_VAR 0 3
9042: NOT
9043: IFFALSE 9047
// exit ;
9045: GO 9233
// earlyEscape := true ;
9047: LD_ADDR_EXP 16
9051: PUSH
9052: LD_INT 1
9054: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9055: LD_INT 140
9057: PPUSH
9058: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
9062: LD_ADDR_VAR 0 2
9066: PUSH
9067: LD_INT 22
9069: PUSH
9070: LD_INT 3
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PUSH
9077: LD_INT 2
9079: PUSH
9080: LD_INT 25
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 25
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 25
9102: PUSH
9103: LD_INT 4
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 69
9124: PUSH
9125: LD_EXP 21
9129: PUSH
9130: LD_EXP 36
9134: PUSH
9135: LD_EXP 35
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: LIST
9144: DIFF
9145: ST_TO_ADDR
// for i in tmp do
9146: LD_ADDR_VAR 0 1
9150: PUSH
9151: LD_VAR 0 2
9155: PUSH
9156: FOR_IN
9157: IFFALSE 9231
// begin if Prob ( 40 + 10 * Difficulty ) then
9159: LD_INT 40
9161: PUSH
9162: LD_INT 10
9164: PUSH
9165: LD_OWVAR 67
9169: MUL
9170: PLUS
9171: PPUSH
9172: CALL_OW 13
9176: IFFALSE 9180
// continue ;
9178: GO 9156
// SetTag ( i , tEscape ) ;
9180: LD_VAR 0 1
9184: PPUSH
9185: LD_EXP 17
9189: PPUSH
9190: CALL_OW 109
// if IsInUnit ( i ) then
9194: LD_VAR 0 1
9198: PPUSH
9199: CALL_OW 310
9203: IFFALSE 9214
// ComExitBuilding ( i ) ;
9205: LD_VAR 0 1
9209: PPUSH
9210: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
9214: LD_VAR 0 1
9218: PPUSH
9219: LD_INT 92
9221: PPUSH
9222: LD_INT 177
9224: PPUSH
9225: CALL_OW 171
// end ;
9229: GO 9156
9231: POP
9232: POP
// end ;
9233: PPOPN 3
9235: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
9236: LD_INT 9
9238: PPUSH
9239: LD_INT 2
9241: PUSH
9242: LD_INT 22
9244: PUSH
9245: LD_INT 3
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 22
9254: PUSH
9255: LD_INT 6
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: LIST
9266: PPUSH
9267: CALL_OW 70
9271: IFFALSE 9369
9273: GO 9275
9275: DISABLE
9276: LD_INT 0
9278: PPUSH
// begin enable ;
9279: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
9280: LD_ADDR_VAR 0 1
9284: PUSH
9285: LD_INT 9
9287: PPUSH
9288: LD_INT 2
9290: PUSH
9291: LD_INT 22
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: PUSH
9301: LD_INT 22
9303: PUSH
9304: LD_INT 6
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PPUSH
9316: CALL_OW 70
9320: PUSH
9321: FOR_IN
9322: IFFALSE 9367
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
9324: LD_VAR 0 1
9328: PPUSH
9329: CALL_OW 110
9333: PUSH
9334: LD_EXP 17
9338: EQUAL
9339: PUSH
9340: LD_VAR 0 1
9344: PPUSH
9345: CALL_OW 255
9349: PUSH
9350: LD_INT 6
9352: EQUAL
9353: OR
9354: IFFALSE 9365
// RemoveUnit ( i ) ;
9356: LD_VAR 0 1
9360: PPUSH
9361: CALL_OW 64
9365: GO 9321
9367: POP
9368: POP
// end ;
9369: PPOPN 1
9371: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9372: LD_EXP 23
9376: PUSH
9377: LD_EXP 23
9381: PPUSH
9382: CALL_OW 256
9386: PUSH
9387: LD_INT 3
9389: LESS
9390: AND
9391: IFFALSE 9437
9393: GO 9395
9395: DISABLE
// begin DialogueOn ;
9396: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9400: LD_EXP 23
9404: PPUSH
9405: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9409: LD_EXP 23
9413: PPUSH
9414: LD_STRING DK-Kkilled-1
9416: PPUSH
9417: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9421: LD_EXP 18
9425: PPUSH
9426: LD_STRING DH-Kkilled-2
9428: PPUSH
9429: CALL_OW 88
// DialogueOff ;
9433: CALL_OW 7
// end ;
9437: END
// every 0 0$1 trigger kaiaKilledByRussian do
9438: LD_EXP 8
9442: IFFALSE 9459
9444: GO 9446
9446: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9447: LD_EXP 18
9451: PPUSH
9452: LD_STRING DH-Kkilled-3
9454: PPUSH
9455: CALL_OW 88
9459: END
// every 0 0$1 trigger tick >= 24 24$00 do
9460: LD_OWVAR 1
9464: PUSH
9465: LD_INT 50400
9467: GREATEREQUAL
9468: IFFALSE 9505
9470: GO 9472
9472: DISABLE
// begin DialogueOn ;
9473: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9477: LD_EXP 26
9481: PPUSH
9482: LD_STRING DShar-slow-1
9484: PPUSH
9485: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9489: LD_EXP 26
9493: PPUSH
9494: LD_STRING DShar-slow-2
9496: PPUSH
9497: CALL_OW 94
// DialogueOff ;
9501: CALL_OW 7
// end ;
9505: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9506: LD_OWVAR 1
9510: PUSH
9511: LD_INT 84000
9513: PUSH
9514: LD_INT 75600
9516: PUSH
9517: LD_INT 67200
9519: PUSH
9520: LD_INT 63000
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: PUSH
9529: LD_OWVAR 67
9533: ARRAY
9534: GREATEREQUAL
9535: IFFALSE 9579
9537: GO 9539
9539: DISABLE
// begin DialogueOn ;
9540: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9544: LD_EXP 26
9548: PPUSH
9549: LD_STRING DShar-fail-1
9551: PPUSH
9552: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9556: LD_EXP 26
9560: PPUSH
9561: LD_STRING DShar-fail-2
9563: PPUSH
9564: CALL_OW 94
// DialogueOff ;
9568: CALL_OW 7
// YouLost ( Time ) ;
9572: LD_STRING Time
9574: PPUSH
9575: CALL_OW 104
// end ;
9579: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9580: LD_INT 22
9582: PUSH
9583: LD_INT 3
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PUSH
9590: LD_INT 2
9592: PUSH
9593: LD_INT 30
9595: PUSH
9596: LD_INT 1
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: LD_INT 30
9605: PUSH
9606: LD_INT 0
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: LIST
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PPUSH
9622: CALL_OW 69
9626: PUSH
9627: LD_INT 0
9629: EQUAL
9630: IFFALSE 10141
9632: GO 9634
9634: DISABLE
9635: LD_INT 0
9637: PPUSH
// begin if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9638: LD_OWVAR 1
9642: PUSH
9643: LD_EXP 5
9647: PLUS
9648: PUSH
9649: LD_INT 178500
9651: PUSH
9652: LD_INT 157500
9654: PUSH
9655: LD_INT 136500
9657: PUSH
9658: LD_INT 126000
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: PUSH
9667: LD_OWVAR 67
9671: ARRAY
9672: LESSEQUAL
9673: IFFALSE 9687
// AddMedal ( med1 , 1 ) else
9675: LD_STRING med1
9677: PPUSH
9678: LD_INT 1
9680: PPUSH
9681: CALL_OW 101
9685: GO 9698
// AddMedal ( med1 , - 1 ) ;
9687: LD_STRING med1
9689: PPUSH
9690: LD_INT 1
9692: NEG
9693: PPUSH
9694: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9698: LD_EXP 7
9702: PUSH
9703: LD_INT 3
9705: GREATEREQUAL
9706: PUSH
9707: LD_EXP 11
9711: MUL
9712: PUSH
9713: LD_EXP 9
9717: MUL
9718: PUSH
9719: LD_EXP 6
9723: PUSH
9724: LD_INT 6
9726: PUSH
9727: LD_INT 5
9729: PUSH
9730: LD_INT 4
9732: PUSH
9733: LD_INT 3
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: PUSH
9742: LD_OWVAR 67
9746: ARRAY
9747: LESS
9748: MUL
9749: IFFALSE 9763
// AddMedal ( med2 , 1 ) else
9751: LD_STRING med2
9753: PPUSH
9754: LD_INT 1
9756: PPUSH
9757: CALL_OW 101
9761: GO 9774
// AddMedal ( med2 , - 1 ) ;
9763: LD_STRING med2
9765: PPUSH
9766: LD_INT 1
9768: NEG
9769: PPUSH
9770: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9774: LD_EXP 14
9778: PPUSH
9779: LD_STRING 04_2_GaidarKilled
9781: PPUSH
9782: CALL_OW 39
// if gaidarKilled then
9786: LD_EXP 14
9790: IFFALSE 9804
// AddMedal ( med3 , 1 ) else
9792: LD_STRING med3
9794: PPUSH
9795: LD_INT 1
9797: PPUSH
9798: CALL_OW 101
9802: GO 9815
// AddMedal ( med3 , - 1 ) ;
9804: LD_STRING med3
9806: PPUSH
9807: LD_INT 1
9809: NEG
9810: PPUSH
9811: CALL_OW 101
// GiveMedals ( MAIN ) ;
9815: LD_STRING MAIN
9817: PPUSH
9818: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9822: LD_INT 22
9824: PUSH
9825: LD_INT 2
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: LD_INT 3
9834: PUSH
9835: LD_INT 23
9837: PUSH
9838: LD_INT 0
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: PPUSH
9853: CALL_OW 69
9857: PPUSH
9858: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9862: LD_EXP 18
9866: PPUSH
9867: LD_STRING 04_2_Heike
9869: PPUSH
9870: CALL_OW 38
// if Aviradze then
9874: LD_EXP 28
9878: IFFALSE 9892
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9880: LD_EXP 28
9884: PPUSH
9885: LD_STRING 04_2_Aviradze
9887: PPUSH
9888: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9892: LD_EXP 21
9896: PUSH
9897: LD_EXP 21
9901: PPUSH
9902: CALL_OW 255
9906: PUSH
9907: LD_INT 2
9909: EQUAL
9910: AND
9911: IFFALSE 9941
// begin if ibrahimOnRuSide then
9913: LD_EXP 3
9917: IFFALSE 9929
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9919: LD_INT 1
9921: PPUSH
9922: LD_STRING 04_2_IbrahimJoined
9924: PPUSH
9925: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9929: LD_EXP 21
9933: PPUSH
9934: LD_STRING 04_2_Ibrahim
9936: PPUSH
9937: CALL_OW 38
// end ; if Kamil then
9941: LD_EXP 22
9945: IFFALSE 9959
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
9947: LD_EXP 22
9951: PPUSH
9952: LD_STRING 04_2_Kamil
9954: PPUSH
9955: CALL_OW 38
// if Sophia then
9959: LD_EXP 24
9963: IFFALSE 9977
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
9965: LD_EXP 24
9969: PPUSH
9970: LD_STRING 04_2_Sophia
9972: PPUSH
9973: CALL_OW 38
// if Kaia then
9977: LD_EXP 23
9981: IFFALSE 9995
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
9983: LD_EXP 23
9987: PPUSH
9988: LD_STRING 04_2_Kaia
9990: PPUSH
9991: CALL_OW 38
// if Givi then
9995: LD_EXP 19
9999: IFFALSE 10013
// SaveCharacters ( Givi , 04_2_Givi ) ;
10001: LD_EXP 19
10005: PPUSH
10006: LD_STRING 04_2_Givi
10008: PPUSH
10009: CALL_OW 38
// if Mike then
10013: LD_EXP 20
10017: IFFALSE 10031
// SaveCharacters ( Mike , 04_2_Mike ) ;
10019: LD_EXP 20
10023: PPUSH
10024: LD_STRING 04_2_Mike
10026: PPUSH
10027: CALL_OW 38
// if Markov then
10031: LD_EXP 25
10035: IFFALSE 10049
// SaveCharacters ( Markov , 04_2_Markov ) ;
10037: LD_EXP 25
10041: PPUSH
10042: LD_STRING 04_2_Markov
10044: PPUSH
10045: CALL_OW 38
// if Kurt then
10049: LD_EXP 27
10053: IFFALSE 10067
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
10055: LD_EXP 27
10059: PPUSH
10060: LD_STRING 04_2_Kurt
10062: PPUSH
10063: CALL_OW 38
// if heikeSecondSquad then
10067: LD_EXP 29
10071: IFFALSE 10085
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
10073: LD_EXP 29
10077: PPUSH
10078: LD_STRING 04_2_others
10080: PPUSH
10081: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10085: LD_ADDR_VAR 0 1
10089: PUSH
10090: LD_INT 22
10092: PUSH
10093: LD_INT 2
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 23
10102: PUSH
10103: LD_INT 0
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PPUSH
10114: CALL_OW 69
10118: ST_TO_ADDR
// if tmp then
10119: LD_VAR 0 1
10123: IFFALSE 10137
// SaveCharacters ( tmp , 04_2_apes ) ;
10125: LD_VAR 0 1
10129: PPUSH
10130: LD_STRING 04_2_apes
10132: PPUSH
10133: CALL_OW 38
// YouWin ;
10137: CALL_OW 103
// end ; end_of_file
10141: PPOPN 1
10143: END
// every 0 0$1 do
10144: GO 10146
10146: DISABLE
// begin enable ;
10147: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10148: LD_STRING updateTimer(
10150: PUSH
10151: LD_OWVAR 1
10155: STR
10156: PUSH
10157: LD_STRING );
10159: STR
10160: PPUSH
10161: CALL_OW 559
// end ;
10165: END
// export function SOS_MapStart ( ) ; begin
10166: LD_INT 0
10168: PPUSH
// if streamModeActive then
10169: LD_EXP 43
10173: IFFALSE 10182
// DefineStreamItems ( true ) ;
10175: LD_INT 1
10177: PPUSH
10178: CALL 11836 0 1
// UpdateFactoryWaypoints ( ) ;
10182: CALL 24697 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10186: CALL 24954 0 0
// end ;
10190: LD_VAR 0 1
10194: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10195: LD_INT 0
10197: PPUSH
// if p2 = hack_mode then
10198: LD_VAR 0 2
10202: PUSH
10203: LD_INT 100
10205: EQUAL
10206: IFFALSE 11209
// begin if not StreamModeActive then
10208: LD_EXP 43
10212: NOT
10213: IFFALSE 10223
// StreamModeActive := true ;
10215: LD_ADDR_EXP 43
10219: PUSH
10220: LD_INT 1
10222: ST_TO_ADDR
// if p3 = 0 then
10223: LD_VAR 0 3
10227: PUSH
10228: LD_INT 0
10230: EQUAL
10231: IFFALSE 10237
// InitStreamMode ;
10233: CALL 11372 0 0
// if p3 = 1 then
10237: LD_VAR 0 3
10241: PUSH
10242: LD_INT 1
10244: EQUAL
10245: IFFALSE 10255
// sRocket := true ;
10247: LD_ADDR_EXP 48
10251: PUSH
10252: LD_INT 1
10254: ST_TO_ADDR
// if p3 = 2 then
10255: LD_VAR 0 3
10259: PUSH
10260: LD_INT 2
10262: EQUAL
10263: IFFALSE 10273
// sSpeed := true ;
10265: LD_ADDR_EXP 47
10269: PUSH
10270: LD_INT 1
10272: ST_TO_ADDR
// if p3 = 3 then
10273: LD_VAR 0 3
10277: PUSH
10278: LD_INT 3
10280: EQUAL
10281: IFFALSE 10291
// sEngine := true ;
10283: LD_ADDR_EXP 49
10287: PUSH
10288: LD_INT 1
10290: ST_TO_ADDR
// if p3 = 4 then
10291: LD_VAR 0 3
10295: PUSH
10296: LD_INT 4
10298: EQUAL
10299: IFFALSE 10309
// sSpec := true ;
10301: LD_ADDR_EXP 46
10305: PUSH
10306: LD_INT 1
10308: ST_TO_ADDR
// if p3 = 5 then
10309: LD_VAR 0 3
10313: PUSH
10314: LD_INT 5
10316: EQUAL
10317: IFFALSE 10327
// sLevel := true ;
10319: LD_ADDR_EXP 50
10323: PUSH
10324: LD_INT 1
10326: ST_TO_ADDR
// if p3 = 6 then
10327: LD_VAR 0 3
10331: PUSH
10332: LD_INT 6
10334: EQUAL
10335: IFFALSE 10345
// sArmoury := true ;
10337: LD_ADDR_EXP 51
10341: PUSH
10342: LD_INT 1
10344: ST_TO_ADDR
// if p3 = 7 then
10345: LD_VAR 0 3
10349: PUSH
10350: LD_INT 7
10352: EQUAL
10353: IFFALSE 10363
// sRadar := true ;
10355: LD_ADDR_EXP 52
10359: PUSH
10360: LD_INT 1
10362: ST_TO_ADDR
// if p3 = 8 then
10363: LD_VAR 0 3
10367: PUSH
10368: LD_INT 8
10370: EQUAL
10371: IFFALSE 10381
// sBunker := true ;
10373: LD_ADDR_EXP 53
10377: PUSH
10378: LD_INT 1
10380: ST_TO_ADDR
// if p3 = 9 then
10381: LD_VAR 0 3
10385: PUSH
10386: LD_INT 9
10388: EQUAL
10389: IFFALSE 10399
// sHack := true ;
10391: LD_ADDR_EXP 54
10395: PUSH
10396: LD_INT 1
10398: ST_TO_ADDR
// if p3 = 10 then
10399: LD_VAR 0 3
10403: PUSH
10404: LD_INT 10
10406: EQUAL
10407: IFFALSE 10417
// sFire := true ;
10409: LD_ADDR_EXP 55
10413: PUSH
10414: LD_INT 1
10416: ST_TO_ADDR
// if p3 = 11 then
10417: LD_VAR 0 3
10421: PUSH
10422: LD_INT 11
10424: EQUAL
10425: IFFALSE 10435
// sRefresh := true ;
10427: LD_ADDR_EXP 56
10431: PUSH
10432: LD_INT 1
10434: ST_TO_ADDR
// if p3 = 12 then
10435: LD_VAR 0 3
10439: PUSH
10440: LD_INT 12
10442: EQUAL
10443: IFFALSE 10453
// sExp := true ;
10445: LD_ADDR_EXP 57
10449: PUSH
10450: LD_INT 1
10452: ST_TO_ADDR
// if p3 = 13 then
10453: LD_VAR 0 3
10457: PUSH
10458: LD_INT 13
10460: EQUAL
10461: IFFALSE 10471
// sDepot := true ;
10463: LD_ADDR_EXP 58
10467: PUSH
10468: LD_INT 1
10470: ST_TO_ADDR
// if p3 = 14 then
10471: LD_VAR 0 3
10475: PUSH
10476: LD_INT 14
10478: EQUAL
10479: IFFALSE 10489
// sFlag := true ;
10481: LD_ADDR_EXP 59
10485: PUSH
10486: LD_INT 1
10488: ST_TO_ADDR
// if p3 = 15 then
10489: LD_VAR 0 3
10493: PUSH
10494: LD_INT 15
10496: EQUAL
10497: IFFALSE 10507
// sKamikadze := true ;
10499: LD_ADDR_EXP 67
10503: PUSH
10504: LD_INT 1
10506: ST_TO_ADDR
// if p3 = 16 then
10507: LD_VAR 0 3
10511: PUSH
10512: LD_INT 16
10514: EQUAL
10515: IFFALSE 10525
// sTroll := true ;
10517: LD_ADDR_EXP 68
10521: PUSH
10522: LD_INT 1
10524: ST_TO_ADDR
// if p3 = 17 then
10525: LD_VAR 0 3
10529: PUSH
10530: LD_INT 17
10532: EQUAL
10533: IFFALSE 10543
// sSlow := true ;
10535: LD_ADDR_EXP 69
10539: PUSH
10540: LD_INT 1
10542: ST_TO_ADDR
// if p3 = 18 then
10543: LD_VAR 0 3
10547: PUSH
10548: LD_INT 18
10550: EQUAL
10551: IFFALSE 10561
// sLack := true ;
10553: LD_ADDR_EXP 70
10557: PUSH
10558: LD_INT 1
10560: ST_TO_ADDR
// if p3 = 19 then
10561: LD_VAR 0 3
10565: PUSH
10566: LD_INT 19
10568: EQUAL
10569: IFFALSE 10579
// sTank := true ;
10571: LD_ADDR_EXP 72
10575: PUSH
10576: LD_INT 1
10578: ST_TO_ADDR
// if p3 = 20 then
10579: LD_VAR 0 3
10583: PUSH
10584: LD_INT 20
10586: EQUAL
10587: IFFALSE 10597
// sRemote := true ;
10589: LD_ADDR_EXP 73
10593: PUSH
10594: LD_INT 1
10596: ST_TO_ADDR
// if p3 = 21 then
10597: LD_VAR 0 3
10601: PUSH
10602: LD_INT 21
10604: EQUAL
10605: IFFALSE 10615
// sPowell := true ;
10607: LD_ADDR_EXP 74
10611: PUSH
10612: LD_INT 1
10614: ST_TO_ADDR
// if p3 = 22 then
10615: LD_VAR 0 3
10619: PUSH
10620: LD_INT 22
10622: EQUAL
10623: IFFALSE 10633
// sTeleport := true ;
10625: LD_ADDR_EXP 77
10629: PUSH
10630: LD_INT 1
10632: ST_TO_ADDR
// if p3 = 23 then
10633: LD_VAR 0 3
10637: PUSH
10638: LD_INT 23
10640: EQUAL
10641: IFFALSE 10651
// sOilTower := true ;
10643: LD_ADDR_EXP 79
10647: PUSH
10648: LD_INT 1
10650: ST_TO_ADDR
// if p3 = 24 then
10651: LD_VAR 0 3
10655: PUSH
10656: LD_INT 24
10658: EQUAL
10659: IFFALSE 10669
// sShovel := true ;
10661: LD_ADDR_EXP 80
10665: PUSH
10666: LD_INT 1
10668: ST_TO_ADDR
// if p3 = 25 then
10669: LD_VAR 0 3
10673: PUSH
10674: LD_INT 25
10676: EQUAL
10677: IFFALSE 10687
// sSheik := true ;
10679: LD_ADDR_EXP 81
10683: PUSH
10684: LD_INT 1
10686: ST_TO_ADDR
// if p3 = 26 then
10687: LD_VAR 0 3
10691: PUSH
10692: LD_INT 26
10694: EQUAL
10695: IFFALSE 10705
// sEarthquake := true ;
10697: LD_ADDR_EXP 83
10701: PUSH
10702: LD_INT 1
10704: ST_TO_ADDR
// if p3 = 27 then
10705: LD_VAR 0 3
10709: PUSH
10710: LD_INT 27
10712: EQUAL
10713: IFFALSE 10723
// sAI := true ;
10715: LD_ADDR_EXP 84
10719: PUSH
10720: LD_INT 1
10722: ST_TO_ADDR
// if p3 = 28 then
10723: LD_VAR 0 3
10727: PUSH
10728: LD_INT 28
10730: EQUAL
10731: IFFALSE 10741
// sCargo := true ;
10733: LD_ADDR_EXP 87
10737: PUSH
10738: LD_INT 1
10740: ST_TO_ADDR
// if p3 = 29 then
10741: LD_VAR 0 3
10745: PUSH
10746: LD_INT 29
10748: EQUAL
10749: IFFALSE 10759
// sDLaser := true ;
10751: LD_ADDR_EXP 88
10755: PUSH
10756: LD_INT 1
10758: ST_TO_ADDR
// if p3 = 30 then
10759: LD_VAR 0 3
10763: PUSH
10764: LD_INT 30
10766: EQUAL
10767: IFFALSE 10777
// sExchange := true ;
10769: LD_ADDR_EXP 89
10773: PUSH
10774: LD_INT 1
10776: ST_TO_ADDR
// if p3 = 31 then
10777: LD_VAR 0 3
10781: PUSH
10782: LD_INT 31
10784: EQUAL
10785: IFFALSE 10795
// sFac := true ;
10787: LD_ADDR_EXP 90
10791: PUSH
10792: LD_INT 1
10794: ST_TO_ADDR
// if p3 = 32 then
10795: LD_VAR 0 3
10799: PUSH
10800: LD_INT 32
10802: EQUAL
10803: IFFALSE 10813
// sPower := true ;
10805: LD_ADDR_EXP 91
10809: PUSH
10810: LD_INT 1
10812: ST_TO_ADDR
// if p3 = 33 then
10813: LD_VAR 0 3
10817: PUSH
10818: LD_INT 33
10820: EQUAL
10821: IFFALSE 10831
// sRandom := true ;
10823: LD_ADDR_EXP 92
10827: PUSH
10828: LD_INT 1
10830: ST_TO_ADDR
// if p3 = 34 then
10831: LD_VAR 0 3
10835: PUSH
10836: LD_INT 34
10838: EQUAL
10839: IFFALSE 10849
// sShield := true ;
10841: LD_ADDR_EXP 93
10845: PUSH
10846: LD_INT 1
10848: ST_TO_ADDR
// if p3 = 35 then
10849: LD_VAR 0 3
10853: PUSH
10854: LD_INT 35
10856: EQUAL
10857: IFFALSE 10867
// sTime := true ;
10859: LD_ADDR_EXP 94
10863: PUSH
10864: LD_INT 1
10866: ST_TO_ADDR
// if p3 = 36 then
10867: LD_VAR 0 3
10871: PUSH
10872: LD_INT 36
10874: EQUAL
10875: IFFALSE 10885
// sTools := true ;
10877: LD_ADDR_EXP 95
10881: PUSH
10882: LD_INT 1
10884: ST_TO_ADDR
// if p3 = 101 then
10885: LD_VAR 0 3
10889: PUSH
10890: LD_INT 101
10892: EQUAL
10893: IFFALSE 10903
// sSold := true ;
10895: LD_ADDR_EXP 60
10899: PUSH
10900: LD_INT 1
10902: ST_TO_ADDR
// if p3 = 102 then
10903: LD_VAR 0 3
10907: PUSH
10908: LD_INT 102
10910: EQUAL
10911: IFFALSE 10921
// sDiff := true ;
10913: LD_ADDR_EXP 61
10917: PUSH
10918: LD_INT 1
10920: ST_TO_ADDR
// if p3 = 103 then
10921: LD_VAR 0 3
10925: PUSH
10926: LD_INT 103
10928: EQUAL
10929: IFFALSE 10939
// sFog := true ;
10931: LD_ADDR_EXP 64
10935: PUSH
10936: LD_INT 1
10938: ST_TO_ADDR
// if p3 = 104 then
10939: LD_VAR 0 3
10943: PUSH
10944: LD_INT 104
10946: EQUAL
10947: IFFALSE 10957
// sReset := true ;
10949: LD_ADDR_EXP 65
10953: PUSH
10954: LD_INT 1
10956: ST_TO_ADDR
// if p3 = 105 then
10957: LD_VAR 0 3
10961: PUSH
10962: LD_INT 105
10964: EQUAL
10965: IFFALSE 10975
// sSun := true ;
10967: LD_ADDR_EXP 66
10971: PUSH
10972: LD_INT 1
10974: ST_TO_ADDR
// if p3 = 106 then
10975: LD_VAR 0 3
10979: PUSH
10980: LD_INT 106
10982: EQUAL
10983: IFFALSE 10993
// sTiger := true ;
10985: LD_ADDR_EXP 62
10989: PUSH
10990: LD_INT 1
10992: ST_TO_ADDR
// if p3 = 107 then
10993: LD_VAR 0 3
10997: PUSH
10998: LD_INT 107
11000: EQUAL
11001: IFFALSE 11011
// sBomb := true ;
11003: LD_ADDR_EXP 63
11007: PUSH
11008: LD_INT 1
11010: ST_TO_ADDR
// if p3 = 108 then
11011: LD_VAR 0 3
11015: PUSH
11016: LD_INT 108
11018: EQUAL
11019: IFFALSE 11029
// sWound := true ;
11021: LD_ADDR_EXP 71
11025: PUSH
11026: LD_INT 1
11028: ST_TO_ADDR
// if p3 = 109 then
11029: LD_VAR 0 3
11033: PUSH
11034: LD_INT 109
11036: EQUAL
11037: IFFALSE 11047
// sBetray := true ;
11039: LD_ADDR_EXP 75
11043: PUSH
11044: LD_INT 1
11046: ST_TO_ADDR
// if p3 = 110 then
11047: LD_VAR 0 3
11051: PUSH
11052: LD_INT 110
11054: EQUAL
11055: IFFALSE 11065
// sContamin := true ;
11057: LD_ADDR_EXP 76
11061: PUSH
11062: LD_INT 1
11064: ST_TO_ADDR
// if p3 = 111 then
11065: LD_VAR 0 3
11069: PUSH
11070: LD_INT 111
11072: EQUAL
11073: IFFALSE 11083
// sOil := true ;
11075: LD_ADDR_EXP 78
11079: PUSH
11080: LD_INT 1
11082: ST_TO_ADDR
// if p3 = 112 then
11083: LD_VAR 0 3
11087: PUSH
11088: LD_INT 112
11090: EQUAL
11091: IFFALSE 11101
// sStu := true ;
11093: LD_ADDR_EXP 82
11097: PUSH
11098: LD_INT 1
11100: ST_TO_ADDR
// if p3 = 113 then
11101: LD_VAR 0 3
11105: PUSH
11106: LD_INT 113
11108: EQUAL
11109: IFFALSE 11119
// sBazooka := true ;
11111: LD_ADDR_EXP 85
11115: PUSH
11116: LD_INT 1
11118: ST_TO_ADDR
// if p3 = 114 then
11119: LD_VAR 0 3
11123: PUSH
11124: LD_INT 114
11126: EQUAL
11127: IFFALSE 11137
// sMortar := true ;
11129: LD_ADDR_EXP 86
11133: PUSH
11134: LD_INT 1
11136: ST_TO_ADDR
// if p3 = 115 then
11137: LD_VAR 0 3
11141: PUSH
11142: LD_INT 115
11144: EQUAL
11145: IFFALSE 11155
// sRanger := true ;
11147: LD_ADDR_EXP 96
11151: PUSH
11152: LD_INT 1
11154: ST_TO_ADDR
// if p3 = 116 then
11155: LD_VAR 0 3
11159: PUSH
11160: LD_INT 116
11162: EQUAL
11163: IFFALSE 11173
// sComputer := true ;
11165: LD_ADDR_EXP 97
11169: PUSH
11170: LD_INT 1
11172: ST_TO_ADDR
// if p3 = 117 then
11173: LD_VAR 0 3
11177: PUSH
11178: LD_INT 117
11180: EQUAL
11181: IFFALSE 11191
// s30 := true ;
11183: LD_ADDR_EXP 98
11187: PUSH
11188: LD_INT 1
11190: ST_TO_ADDR
// if p3 = 118 then
11191: LD_VAR 0 3
11195: PUSH
11196: LD_INT 118
11198: EQUAL
11199: IFFALSE 11209
// s60 := true ;
11201: LD_ADDR_EXP 99
11205: PUSH
11206: LD_INT 1
11208: ST_TO_ADDR
// end ; if p2 = stream_mode then
11209: LD_VAR 0 2
11213: PUSH
11214: LD_INT 101
11216: EQUAL
11217: IFFALSE 11345
// begin case p3 of 1 :
11219: LD_VAR 0 3
11223: PUSH
11224: LD_INT 1
11226: DOUBLE
11227: EQUAL
11228: IFTRUE 11232
11230: GO 11239
11232: POP
// hHackUnlimitedResources ; 2 :
11233: CALL 23443 0 0
11237: GO 11345
11239: LD_INT 2
11241: DOUBLE
11242: EQUAL
11243: IFTRUE 11247
11245: GO 11254
11247: POP
// hHackSetLevel10 ; 3 :
11248: CALL 23576 0 0
11252: GO 11345
11254: LD_INT 3
11256: DOUBLE
11257: EQUAL
11258: IFTRUE 11262
11260: GO 11269
11262: POP
// hHackSetLevel10YourUnits ; 4 :
11263: CALL 23661 0 0
11267: GO 11345
11269: LD_INT 4
11271: DOUBLE
11272: EQUAL
11273: IFTRUE 11277
11275: GO 11284
11277: POP
// hHackInvincible ; 5 :
11278: CALL 24109 0 0
11282: GO 11345
11284: LD_INT 5
11286: DOUBLE
11287: EQUAL
11288: IFTRUE 11292
11290: GO 11299
11292: POP
// hHackInvisible ; 6 :
11293: CALL 24220 0 0
11297: GO 11345
11299: LD_INT 6
11301: DOUBLE
11302: EQUAL
11303: IFTRUE 11307
11305: GO 11314
11307: POP
// hHackChangeYourSide ; 7 :
11308: CALL 24277 0 0
11312: GO 11345
11314: LD_INT 7
11316: DOUBLE
11317: EQUAL
11318: IFTRUE 11322
11320: GO 11329
11322: POP
// hHackChangeUnitSide ; 8 :
11323: CALL 24319 0 0
11327: GO 11345
11329: LD_INT 8
11331: DOUBLE
11332: EQUAL
11333: IFTRUE 11337
11335: GO 11344
11337: POP
// hHackFog ; end ;
11338: CALL 24420 0 0
11342: GO 11345
11344: POP
// end ; end ;
11345: LD_VAR 0 7
11349: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
11350: GO 11352
11352: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11353: LD_STRING initStreamRollete();
11355: PPUSH
11356: CALL_OW 559
// InitStreamMode ;
11360: CALL 11372 0 0
// DefineStreamItems ( false ) ;
11364: LD_INT 0
11366: PPUSH
11367: CALL 11836 0 1
// end ;
11371: END
// function InitStreamMode ; begin
11372: LD_INT 0
11374: PPUSH
// streamModeActive := false ;
11375: LD_ADDR_EXP 43
11379: PUSH
11380: LD_INT 0
11382: ST_TO_ADDR
// normalCounter := 36 ;
11383: LD_ADDR_EXP 44
11387: PUSH
11388: LD_INT 36
11390: ST_TO_ADDR
// hardcoreCounter := 18 ;
11391: LD_ADDR_EXP 45
11395: PUSH
11396: LD_INT 18
11398: ST_TO_ADDR
// sRocket := false ;
11399: LD_ADDR_EXP 48
11403: PUSH
11404: LD_INT 0
11406: ST_TO_ADDR
// sSpeed := false ;
11407: LD_ADDR_EXP 47
11411: PUSH
11412: LD_INT 0
11414: ST_TO_ADDR
// sEngine := false ;
11415: LD_ADDR_EXP 49
11419: PUSH
11420: LD_INT 0
11422: ST_TO_ADDR
// sSpec := false ;
11423: LD_ADDR_EXP 46
11427: PUSH
11428: LD_INT 0
11430: ST_TO_ADDR
// sLevel := false ;
11431: LD_ADDR_EXP 50
11435: PUSH
11436: LD_INT 0
11438: ST_TO_ADDR
// sArmoury := false ;
11439: LD_ADDR_EXP 51
11443: PUSH
11444: LD_INT 0
11446: ST_TO_ADDR
// sRadar := false ;
11447: LD_ADDR_EXP 52
11451: PUSH
11452: LD_INT 0
11454: ST_TO_ADDR
// sBunker := false ;
11455: LD_ADDR_EXP 53
11459: PUSH
11460: LD_INT 0
11462: ST_TO_ADDR
// sHack := false ;
11463: LD_ADDR_EXP 54
11467: PUSH
11468: LD_INT 0
11470: ST_TO_ADDR
// sFire := false ;
11471: LD_ADDR_EXP 55
11475: PUSH
11476: LD_INT 0
11478: ST_TO_ADDR
// sRefresh := false ;
11479: LD_ADDR_EXP 56
11483: PUSH
11484: LD_INT 0
11486: ST_TO_ADDR
// sExp := false ;
11487: LD_ADDR_EXP 57
11491: PUSH
11492: LD_INT 0
11494: ST_TO_ADDR
// sDepot := false ;
11495: LD_ADDR_EXP 58
11499: PUSH
11500: LD_INT 0
11502: ST_TO_ADDR
// sFlag := false ;
11503: LD_ADDR_EXP 59
11507: PUSH
11508: LD_INT 0
11510: ST_TO_ADDR
// sKamikadze := false ;
11511: LD_ADDR_EXP 67
11515: PUSH
11516: LD_INT 0
11518: ST_TO_ADDR
// sTroll := false ;
11519: LD_ADDR_EXP 68
11523: PUSH
11524: LD_INT 0
11526: ST_TO_ADDR
// sSlow := false ;
11527: LD_ADDR_EXP 69
11531: PUSH
11532: LD_INT 0
11534: ST_TO_ADDR
// sLack := false ;
11535: LD_ADDR_EXP 70
11539: PUSH
11540: LD_INT 0
11542: ST_TO_ADDR
// sTank := false ;
11543: LD_ADDR_EXP 72
11547: PUSH
11548: LD_INT 0
11550: ST_TO_ADDR
// sRemote := false ;
11551: LD_ADDR_EXP 73
11555: PUSH
11556: LD_INT 0
11558: ST_TO_ADDR
// sPowell := false ;
11559: LD_ADDR_EXP 74
11563: PUSH
11564: LD_INT 0
11566: ST_TO_ADDR
// sTeleport := false ;
11567: LD_ADDR_EXP 77
11571: PUSH
11572: LD_INT 0
11574: ST_TO_ADDR
// sOilTower := false ;
11575: LD_ADDR_EXP 79
11579: PUSH
11580: LD_INT 0
11582: ST_TO_ADDR
// sShovel := false ;
11583: LD_ADDR_EXP 80
11587: PUSH
11588: LD_INT 0
11590: ST_TO_ADDR
// sSheik := false ;
11591: LD_ADDR_EXP 81
11595: PUSH
11596: LD_INT 0
11598: ST_TO_ADDR
// sEarthquake := false ;
11599: LD_ADDR_EXP 83
11603: PUSH
11604: LD_INT 0
11606: ST_TO_ADDR
// sAI := false ;
11607: LD_ADDR_EXP 84
11611: PUSH
11612: LD_INT 0
11614: ST_TO_ADDR
// sCargo := false ;
11615: LD_ADDR_EXP 87
11619: PUSH
11620: LD_INT 0
11622: ST_TO_ADDR
// sDLaser := false ;
11623: LD_ADDR_EXP 88
11627: PUSH
11628: LD_INT 0
11630: ST_TO_ADDR
// sExchange := false ;
11631: LD_ADDR_EXP 89
11635: PUSH
11636: LD_INT 0
11638: ST_TO_ADDR
// sFac := false ;
11639: LD_ADDR_EXP 90
11643: PUSH
11644: LD_INT 0
11646: ST_TO_ADDR
// sPower := false ;
11647: LD_ADDR_EXP 91
11651: PUSH
11652: LD_INT 0
11654: ST_TO_ADDR
// sRandom := false ;
11655: LD_ADDR_EXP 92
11659: PUSH
11660: LD_INT 0
11662: ST_TO_ADDR
// sShield := false ;
11663: LD_ADDR_EXP 93
11667: PUSH
11668: LD_INT 0
11670: ST_TO_ADDR
// sTime := false ;
11671: LD_ADDR_EXP 94
11675: PUSH
11676: LD_INT 0
11678: ST_TO_ADDR
// sTools := false ;
11679: LD_ADDR_EXP 95
11683: PUSH
11684: LD_INT 0
11686: ST_TO_ADDR
// sSold := false ;
11687: LD_ADDR_EXP 60
11691: PUSH
11692: LD_INT 0
11694: ST_TO_ADDR
// sDiff := false ;
11695: LD_ADDR_EXP 61
11699: PUSH
11700: LD_INT 0
11702: ST_TO_ADDR
// sFog := false ;
11703: LD_ADDR_EXP 64
11707: PUSH
11708: LD_INT 0
11710: ST_TO_ADDR
// sReset := false ;
11711: LD_ADDR_EXP 65
11715: PUSH
11716: LD_INT 0
11718: ST_TO_ADDR
// sSun := false ;
11719: LD_ADDR_EXP 66
11723: PUSH
11724: LD_INT 0
11726: ST_TO_ADDR
// sTiger := false ;
11727: LD_ADDR_EXP 62
11731: PUSH
11732: LD_INT 0
11734: ST_TO_ADDR
// sBomb := false ;
11735: LD_ADDR_EXP 63
11739: PUSH
11740: LD_INT 0
11742: ST_TO_ADDR
// sWound := false ;
11743: LD_ADDR_EXP 71
11747: PUSH
11748: LD_INT 0
11750: ST_TO_ADDR
// sBetray := false ;
11751: LD_ADDR_EXP 75
11755: PUSH
11756: LD_INT 0
11758: ST_TO_ADDR
// sContamin := false ;
11759: LD_ADDR_EXP 76
11763: PUSH
11764: LD_INT 0
11766: ST_TO_ADDR
// sOil := false ;
11767: LD_ADDR_EXP 78
11771: PUSH
11772: LD_INT 0
11774: ST_TO_ADDR
// sStu := false ;
11775: LD_ADDR_EXP 82
11779: PUSH
11780: LD_INT 0
11782: ST_TO_ADDR
// sBazooka := false ;
11783: LD_ADDR_EXP 85
11787: PUSH
11788: LD_INT 0
11790: ST_TO_ADDR
// sMortar := false ;
11791: LD_ADDR_EXP 86
11795: PUSH
11796: LD_INT 0
11798: ST_TO_ADDR
// sRanger := false ;
11799: LD_ADDR_EXP 96
11803: PUSH
11804: LD_INT 0
11806: ST_TO_ADDR
// sComputer := false ;
11807: LD_ADDR_EXP 97
11811: PUSH
11812: LD_INT 0
11814: ST_TO_ADDR
// s30 := false ;
11815: LD_ADDR_EXP 98
11819: PUSH
11820: LD_INT 0
11822: ST_TO_ADDR
// s60 := false ;
11823: LD_ADDR_EXP 99
11827: PUSH
11828: LD_INT 0
11830: ST_TO_ADDR
// end ;
11831: LD_VAR 0 1
11835: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11836: LD_INT 0
11838: PPUSH
11839: PPUSH
11840: PPUSH
11841: PPUSH
11842: PPUSH
11843: PPUSH
11844: PPUSH
// result := [ ] ;
11845: LD_ADDR_VAR 0 2
11849: PUSH
11850: EMPTY
11851: ST_TO_ADDR
// if campaign_id = 1 then
11852: LD_OWVAR 69
11856: PUSH
11857: LD_INT 1
11859: EQUAL
11860: IFFALSE 15026
// begin case mission_number of 1 :
11862: LD_OWVAR 70
11866: PUSH
11867: LD_INT 1
11869: DOUBLE
11870: EQUAL
11871: IFTRUE 11875
11873: GO 11951
11875: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11876: LD_ADDR_VAR 0 2
11880: PUSH
11881: LD_INT 2
11883: PUSH
11884: LD_INT 4
11886: PUSH
11887: LD_INT 11
11889: PUSH
11890: LD_INT 12
11892: PUSH
11893: LD_INT 15
11895: PUSH
11896: LD_INT 16
11898: PUSH
11899: LD_INT 22
11901: PUSH
11902: LD_INT 23
11904: PUSH
11905: LD_INT 26
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 101
11921: PUSH
11922: LD_INT 102
11924: PUSH
11925: LD_INT 106
11927: PUSH
11928: LD_INT 116
11930: PUSH
11931: LD_INT 117
11933: PUSH
11934: LD_INT 118
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: ST_TO_ADDR
11949: GO 15024
11951: LD_INT 2
11953: DOUBLE
11954: EQUAL
11955: IFTRUE 11959
11957: GO 12043
11959: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11960: LD_ADDR_VAR 0 2
11964: PUSH
11965: LD_INT 2
11967: PUSH
11968: LD_INT 4
11970: PUSH
11971: LD_INT 11
11973: PUSH
11974: LD_INT 12
11976: PUSH
11977: LD_INT 15
11979: PUSH
11980: LD_INT 16
11982: PUSH
11983: LD_INT 22
11985: PUSH
11986: LD_INT 23
11988: PUSH
11989: LD_INT 26
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 101
12005: PUSH
12006: LD_INT 102
12008: PUSH
12009: LD_INT 105
12011: PUSH
12012: LD_INT 106
12014: PUSH
12015: LD_INT 108
12017: PUSH
12018: LD_INT 116
12020: PUSH
12021: LD_INT 117
12023: PUSH
12024: LD_INT 118
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: ST_TO_ADDR
12041: GO 15024
12043: LD_INT 3
12045: DOUBLE
12046: EQUAL
12047: IFTRUE 12051
12049: GO 12139
12051: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12052: LD_ADDR_VAR 0 2
12056: PUSH
12057: LD_INT 2
12059: PUSH
12060: LD_INT 4
12062: PUSH
12063: LD_INT 5
12065: PUSH
12066: LD_INT 11
12068: PUSH
12069: LD_INT 12
12071: PUSH
12072: LD_INT 15
12074: PUSH
12075: LD_INT 16
12077: PUSH
12078: LD_INT 22
12080: PUSH
12081: LD_INT 26
12083: PUSH
12084: LD_INT 36
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 101
12101: PUSH
12102: LD_INT 102
12104: PUSH
12105: LD_INT 105
12107: PUSH
12108: LD_INT 106
12110: PUSH
12111: LD_INT 108
12113: PUSH
12114: LD_INT 116
12116: PUSH
12117: LD_INT 117
12119: PUSH
12120: LD_INT 118
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: ST_TO_ADDR
12137: GO 15024
12139: LD_INT 4
12141: DOUBLE
12142: EQUAL
12143: IFTRUE 12147
12145: GO 12243
12147: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12148: LD_ADDR_VAR 0 2
12152: PUSH
12153: LD_INT 2
12155: PUSH
12156: LD_INT 4
12158: PUSH
12159: LD_INT 5
12161: PUSH
12162: LD_INT 8
12164: PUSH
12165: LD_INT 11
12167: PUSH
12168: LD_INT 12
12170: PUSH
12171: LD_INT 15
12173: PUSH
12174: LD_INT 16
12176: PUSH
12177: LD_INT 22
12179: PUSH
12180: LD_INT 23
12182: PUSH
12183: LD_INT 26
12185: PUSH
12186: LD_INT 36
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: PUSH
12203: LD_INT 101
12205: PUSH
12206: LD_INT 102
12208: PUSH
12209: LD_INT 105
12211: PUSH
12212: LD_INT 106
12214: PUSH
12215: LD_INT 108
12217: PUSH
12218: LD_INT 116
12220: PUSH
12221: LD_INT 117
12223: PUSH
12224: LD_INT 118
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: ST_TO_ADDR
12241: GO 15024
12243: LD_INT 5
12245: DOUBLE
12246: EQUAL
12247: IFTRUE 12251
12249: GO 12363
12251: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12252: LD_ADDR_VAR 0 2
12256: PUSH
12257: LD_INT 2
12259: PUSH
12260: LD_INT 4
12262: PUSH
12263: LD_INT 5
12265: PUSH
12266: LD_INT 6
12268: PUSH
12269: LD_INT 8
12271: PUSH
12272: LD_INT 11
12274: PUSH
12275: LD_INT 12
12277: PUSH
12278: LD_INT 15
12280: PUSH
12281: LD_INT 16
12283: PUSH
12284: LD_INT 22
12286: PUSH
12287: LD_INT 23
12289: PUSH
12290: LD_INT 25
12292: PUSH
12293: LD_INT 26
12295: PUSH
12296: LD_INT 36
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: PUSH
12315: LD_INT 101
12317: PUSH
12318: LD_INT 102
12320: PUSH
12321: LD_INT 105
12323: PUSH
12324: LD_INT 106
12326: PUSH
12327: LD_INT 108
12329: PUSH
12330: LD_INT 109
12332: PUSH
12333: LD_INT 112
12335: PUSH
12336: LD_INT 116
12338: PUSH
12339: LD_INT 117
12341: PUSH
12342: LD_INT 118
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: ST_TO_ADDR
12361: GO 15024
12363: LD_INT 6
12365: DOUBLE
12366: EQUAL
12367: IFTRUE 12371
12369: GO 12503
12371: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12372: LD_ADDR_VAR 0 2
12376: PUSH
12377: LD_INT 2
12379: PUSH
12380: LD_INT 4
12382: PUSH
12383: LD_INT 5
12385: PUSH
12386: LD_INT 6
12388: PUSH
12389: LD_INT 8
12391: PUSH
12392: LD_INT 11
12394: PUSH
12395: LD_INT 12
12397: PUSH
12398: LD_INT 15
12400: PUSH
12401: LD_INT 16
12403: PUSH
12404: LD_INT 20
12406: PUSH
12407: LD_INT 21
12409: PUSH
12410: LD_INT 22
12412: PUSH
12413: LD_INT 23
12415: PUSH
12416: LD_INT 25
12418: PUSH
12419: LD_INT 26
12421: PUSH
12422: LD_INT 30
12424: PUSH
12425: LD_INT 31
12427: PUSH
12428: LD_INT 32
12430: PUSH
12431: LD_INT 36
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: PUSH
12455: LD_INT 101
12457: PUSH
12458: LD_INT 102
12460: PUSH
12461: LD_INT 105
12463: PUSH
12464: LD_INT 106
12466: PUSH
12467: LD_INT 108
12469: PUSH
12470: LD_INT 109
12472: PUSH
12473: LD_INT 112
12475: PUSH
12476: LD_INT 116
12478: PUSH
12479: LD_INT 117
12481: PUSH
12482: LD_INT 118
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: ST_TO_ADDR
12501: GO 15024
12503: LD_INT 7
12505: DOUBLE
12506: EQUAL
12507: IFTRUE 12511
12509: GO 12623
12511: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12512: LD_ADDR_VAR 0 2
12516: PUSH
12517: LD_INT 2
12519: PUSH
12520: LD_INT 4
12522: PUSH
12523: LD_INT 5
12525: PUSH
12526: LD_INT 7
12528: PUSH
12529: LD_INT 11
12531: PUSH
12532: LD_INT 12
12534: PUSH
12535: LD_INT 15
12537: PUSH
12538: LD_INT 16
12540: PUSH
12541: LD_INT 20
12543: PUSH
12544: LD_INT 21
12546: PUSH
12547: LD_INT 22
12549: PUSH
12550: LD_INT 23
12552: PUSH
12553: LD_INT 25
12555: PUSH
12556: LD_INT 26
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 101
12577: PUSH
12578: LD_INT 102
12580: PUSH
12581: LD_INT 103
12583: PUSH
12584: LD_INT 105
12586: PUSH
12587: LD_INT 106
12589: PUSH
12590: LD_INT 108
12592: PUSH
12593: LD_INT 112
12595: PUSH
12596: LD_INT 116
12598: PUSH
12599: LD_INT 117
12601: PUSH
12602: LD_INT 118
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: ST_TO_ADDR
12621: GO 15024
12623: LD_INT 8
12625: DOUBLE
12626: EQUAL
12627: IFTRUE 12631
12629: GO 12771
12631: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12632: LD_ADDR_VAR 0 2
12636: PUSH
12637: LD_INT 2
12639: PUSH
12640: LD_INT 4
12642: PUSH
12643: LD_INT 5
12645: PUSH
12646: LD_INT 6
12648: PUSH
12649: LD_INT 7
12651: PUSH
12652: LD_INT 8
12654: PUSH
12655: LD_INT 11
12657: PUSH
12658: LD_INT 12
12660: PUSH
12661: LD_INT 15
12663: PUSH
12664: LD_INT 16
12666: PUSH
12667: LD_INT 20
12669: PUSH
12670: LD_INT 21
12672: PUSH
12673: LD_INT 22
12675: PUSH
12676: LD_INT 23
12678: PUSH
12679: LD_INT 25
12681: PUSH
12682: LD_INT 26
12684: PUSH
12685: LD_INT 30
12687: PUSH
12688: LD_INT 31
12690: PUSH
12691: LD_INT 32
12693: PUSH
12694: LD_INT 36
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 101
12721: PUSH
12722: LD_INT 102
12724: PUSH
12725: LD_INT 103
12727: PUSH
12728: LD_INT 105
12730: PUSH
12731: LD_INT 106
12733: PUSH
12734: LD_INT 108
12736: PUSH
12737: LD_INT 109
12739: PUSH
12740: LD_INT 112
12742: PUSH
12743: LD_INT 116
12745: PUSH
12746: LD_INT 117
12748: PUSH
12749: LD_INT 118
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: ST_TO_ADDR
12769: GO 15024
12771: LD_INT 9
12773: DOUBLE
12774: EQUAL
12775: IFTRUE 12779
12777: GO 12927
12779: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12780: LD_ADDR_VAR 0 2
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: LD_INT 4
12790: PUSH
12791: LD_INT 5
12793: PUSH
12794: LD_INT 6
12796: PUSH
12797: LD_INT 7
12799: PUSH
12800: LD_INT 8
12802: PUSH
12803: LD_INT 11
12805: PUSH
12806: LD_INT 12
12808: PUSH
12809: LD_INT 15
12811: PUSH
12812: LD_INT 16
12814: PUSH
12815: LD_INT 20
12817: PUSH
12818: LD_INT 21
12820: PUSH
12821: LD_INT 22
12823: PUSH
12824: LD_INT 23
12826: PUSH
12827: LD_INT 25
12829: PUSH
12830: LD_INT 26
12832: PUSH
12833: LD_INT 28
12835: PUSH
12836: LD_INT 30
12838: PUSH
12839: LD_INT 31
12841: PUSH
12842: LD_INT 32
12844: PUSH
12845: LD_INT 36
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: PUSH
12871: LD_INT 101
12873: PUSH
12874: LD_INT 102
12876: PUSH
12877: LD_INT 103
12879: PUSH
12880: LD_INT 105
12882: PUSH
12883: LD_INT 106
12885: PUSH
12886: LD_INT 108
12888: PUSH
12889: LD_INT 109
12891: PUSH
12892: LD_INT 112
12894: PUSH
12895: LD_INT 114
12897: PUSH
12898: LD_INT 116
12900: PUSH
12901: LD_INT 117
12903: PUSH
12904: LD_INT 118
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: ST_TO_ADDR
12925: GO 15024
12927: LD_INT 10
12929: DOUBLE
12930: EQUAL
12931: IFTRUE 12935
12933: GO 13131
12935: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12936: LD_ADDR_VAR 0 2
12940: PUSH
12941: LD_INT 2
12943: PUSH
12944: LD_INT 4
12946: PUSH
12947: LD_INT 5
12949: PUSH
12950: LD_INT 6
12952: PUSH
12953: LD_INT 7
12955: PUSH
12956: LD_INT 8
12958: PUSH
12959: LD_INT 9
12961: PUSH
12962: LD_INT 10
12964: PUSH
12965: LD_INT 11
12967: PUSH
12968: LD_INT 12
12970: PUSH
12971: LD_INT 13
12973: PUSH
12974: LD_INT 14
12976: PUSH
12977: LD_INT 15
12979: PUSH
12980: LD_INT 16
12982: PUSH
12983: LD_INT 17
12985: PUSH
12986: LD_INT 18
12988: PUSH
12989: LD_INT 19
12991: PUSH
12992: LD_INT 20
12994: PUSH
12995: LD_INT 21
12997: PUSH
12998: LD_INT 22
13000: PUSH
13001: LD_INT 23
13003: PUSH
13004: LD_INT 24
13006: PUSH
13007: LD_INT 25
13009: PUSH
13010: LD_INT 26
13012: PUSH
13013: LD_INT 28
13015: PUSH
13016: LD_INT 30
13018: PUSH
13019: LD_INT 31
13021: PUSH
13022: LD_INT 32
13024: PUSH
13025: LD_INT 36
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: PUSH
13059: LD_INT 101
13061: PUSH
13062: LD_INT 102
13064: PUSH
13065: LD_INT 103
13067: PUSH
13068: LD_INT 104
13070: PUSH
13071: LD_INT 105
13073: PUSH
13074: LD_INT 106
13076: PUSH
13077: LD_INT 107
13079: PUSH
13080: LD_INT 108
13082: PUSH
13083: LD_INT 109
13085: PUSH
13086: LD_INT 110
13088: PUSH
13089: LD_INT 111
13091: PUSH
13092: LD_INT 112
13094: PUSH
13095: LD_INT 114
13097: PUSH
13098: LD_INT 116
13100: PUSH
13101: LD_INT 117
13103: PUSH
13104: LD_INT 118
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: ST_TO_ADDR
13129: GO 15024
13131: LD_INT 11
13133: DOUBLE
13134: EQUAL
13135: IFTRUE 13139
13137: GO 13343
13139: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13140: LD_ADDR_VAR 0 2
13144: PUSH
13145: LD_INT 2
13147: PUSH
13148: LD_INT 3
13150: PUSH
13151: LD_INT 4
13153: PUSH
13154: LD_INT 5
13156: PUSH
13157: LD_INT 6
13159: PUSH
13160: LD_INT 7
13162: PUSH
13163: LD_INT 8
13165: PUSH
13166: LD_INT 9
13168: PUSH
13169: LD_INT 10
13171: PUSH
13172: LD_INT 11
13174: PUSH
13175: LD_INT 12
13177: PUSH
13178: LD_INT 13
13180: PUSH
13181: LD_INT 14
13183: PUSH
13184: LD_INT 15
13186: PUSH
13187: LD_INT 16
13189: PUSH
13190: LD_INT 17
13192: PUSH
13193: LD_INT 18
13195: PUSH
13196: LD_INT 19
13198: PUSH
13199: LD_INT 20
13201: PUSH
13202: LD_INT 21
13204: PUSH
13205: LD_INT 22
13207: PUSH
13208: LD_INT 23
13210: PUSH
13211: LD_INT 24
13213: PUSH
13214: LD_INT 25
13216: PUSH
13217: LD_INT 26
13219: PUSH
13220: LD_INT 28
13222: PUSH
13223: LD_INT 30
13225: PUSH
13226: LD_INT 31
13228: PUSH
13229: LD_INT 32
13231: PUSH
13232: LD_INT 34
13234: PUSH
13235: LD_INT 36
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: PUSH
13271: LD_INT 101
13273: PUSH
13274: LD_INT 102
13276: PUSH
13277: LD_INT 103
13279: PUSH
13280: LD_INT 104
13282: PUSH
13283: LD_INT 105
13285: PUSH
13286: LD_INT 106
13288: PUSH
13289: LD_INT 107
13291: PUSH
13292: LD_INT 108
13294: PUSH
13295: LD_INT 109
13297: PUSH
13298: LD_INT 110
13300: PUSH
13301: LD_INT 111
13303: PUSH
13304: LD_INT 112
13306: PUSH
13307: LD_INT 114
13309: PUSH
13310: LD_INT 116
13312: PUSH
13313: LD_INT 117
13315: PUSH
13316: LD_INT 118
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: ST_TO_ADDR
13341: GO 15024
13343: LD_INT 12
13345: DOUBLE
13346: EQUAL
13347: IFTRUE 13351
13349: GO 13571
13351: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13352: LD_ADDR_VAR 0 2
13356: PUSH
13357: LD_INT 1
13359: PUSH
13360: LD_INT 2
13362: PUSH
13363: LD_INT 3
13365: PUSH
13366: LD_INT 4
13368: PUSH
13369: LD_INT 5
13371: PUSH
13372: LD_INT 6
13374: PUSH
13375: LD_INT 7
13377: PUSH
13378: LD_INT 8
13380: PUSH
13381: LD_INT 9
13383: PUSH
13384: LD_INT 10
13386: PUSH
13387: LD_INT 11
13389: PUSH
13390: LD_INT 12
13392: PUSH
13393: LD_INT 13
13395: PUSH
13396: LD_INT 14
13398: PUSH
13399: LD_INT 15
13401: PUSH
13402: LD_INT 16
13404: PUSH
13405: LD_INT 17
13407: PUSH
13408: LD_INT 18
13410: PUSH
13411: LD_INT 19
13413: PUSH
13414: LD_INT 20
13416: PUSH
13417: LD_INT 21
13419: PUSH
13420: LD_INT 22
13422: PUSH
13423: LD_INT 23
13425: PUSH
13426: LD_INT 24
13428: PUSH
13429: LD_INT 25
13431: PUSH
13432: LD_INT 26
13434: PUSH
13435: LD_INT 27
13437: PUSH
13438: LD_INT 28
13440: PUSH
13441: LD_INT 30
13443: PUSH
13444: LD_INT 31
13446: PUSH
13447: LD_INT 32
13449: PUSH
13450: LD_INT 33
13452: PUSH
13453: LD_INT 34
13455: PUSH
13456: LD_INT 36
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 101
13497: PUSH
13498: LD_INT 102
13500: PUSH
13501: LD_INT 103
13503: PUSH
13504: LD_INT 104
13506: PUSH
13507: LD_INT 105
13509: PUSH
13510: LD_INT 106
13512: PUSH
13513: LD_INT 107
13515: PUSH
13516: LD_INT 108
13518: PUSH
13519: LD_INT 109
13521: PUSH
13522: LD_INT 110
13524: PUSH
13525: LD_INT 111
13527: PUSH
13528: LD_INT 112
13530: PUSH
13531: LD_INT 113
13533: PUSH
13534: LD_INT 114
13536: PUSH
13537: LD_INT 116
13539: PUSH
13540: LD_INT 117
13542: PUSH
13543: LD_INT 118
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: ST_TO_ADDR
13569: GO 15024
13571: LD_INT 13
13573: DOUBLE
13574: EQUAL
13575: IFTRUE 13579
13577: GO 13787
13579: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13580: LD_ADDR_VAR 0 2
13584: PUSH
13585: LD_INT 1
13587: PUSH
13588: LD_INT 2
13590: PUSH
13591: LD_INT 3
13593: PUSH
13594: LD_INT 4
13596: PUSH
13597: LD_INT 5
13599: PUSH
13600: LD_INT 8
13602: PUSH
13603: LD_INT 9
13605: PUSH
13606: LD_INT 10
13608: PUSH
13609: LD_INT 11
13611: PUSH
13612: LD_INT 12
13614: PUSH
13615: LD_INT 14
13617: PUSH
13618: LD_INT 15
13620: PUSH
13621: LD_INT 16
13623: PUSH
13624: LD_INT 17
13626: PUSH
13627: LD_INT 18
13629: PUSH
13630: LD_INT 19
13632: PUSH
13633: LD_INT 20
13635: PUSH
13636: LD_INT 21
13638: PUSH
13639: LD_INT 22
13641: PUSH
13642: LD_INT 23
13644: PUSH
13645: LD_INT 24
13647: PUSH
13648: LD_INT 25
13650: PUSH
13651: LD_INT 26
13653: PUSH
13654: LD_INT 27
13656: PUSH
13657: LD_INT 28
13659: PUSH
13660: LD_INT 30
13662: PUSH
13663: LD_INT 31
13665: PUSH
13666: LD_INT 32
13668: PUSH
13669: LD_INT 33
13671: PUSH
13672: LD_INT 34
13674: PUSH
13675: LD_INT 36
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 101
13713: PUSH
13714: LD_INT 102
13716: PUSH
13717: LD_INT 103
13719: PUSH
13720: LD_INT 104
13722: PUSH
13723: LD_INT 105
13725: PUSH
13726: LD_INT 106
13728: PUSH
13729: LD_INT 107
13731: PUSH
13732: LD_INT 108
13734: PUSH
13735: LD_INT 109
13737: PUSH
13738: LD_INT 110
13740: PUSH
13741: LD_INT 111
13743: PUSH
13744: LD_INT 112
13746: PUSH
13747: LD_INT 113
13749: PUSH
13750: LD_INT 114
13752: PUSH
13753: LD_INT 116
13755: PUSH
13756: LD_INT 117
13758: PUSH
13759: LD_INT 118
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: ST_TO_ADDR
13785: GO 15024
13787: LD_INT 14
13789: DOUBLE
13790: EQUAL
13791: IFTRUE 13795
13793: GO 14019
13795: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13796: LD_ADDR_VAR 0 2
13800: PUSH
13801: LD_INT 1
13803: PUSH
13804: LD_INT 2
13806: PUSH
13807: LD_INT 3
13809: PUSH
13810: LD_INT 4
13812: PUSH
13813: LD_INT 5
13815: PUSH
13816: LD_INT 6
13818: PUSH
13819: LD_INT 7
13821: PUSH
13822: LD_INT 8
13824: PUSH
13825: LD_INT 9
13827: PUSH
13828: LD_INT 10
13830: PUSH
13831: LD_INT 11
13833: PUSH
13834: LD_INT 12
13836: PUSH
13837: LD_INT 13
13839: PUSH
13840: LD_INT 14
13842: PUSH
13843: LD_INT 15
13845: PUSH
13846: LD_INT 16
13848: PUSH
13849: LD_INT 17
13851: PUSH
13852: LD_INT 18
13854: PUSH
13855: LD_INT 19
13857: PUSH
13858: LD_INT 20
13860: PUSH
13861: LD_INT 21
13863: PUSH
13864: LD_INT 22
13866: PUSH
13867: LD_INT 23
13869: PUSH
13870: LD_INT 24
13872: PUSH
13873: LD_INT 25
13875: PUSH
13876: LD_INT 26
13878: PUSH
13879: LD_INT 27
13881: PUSH
13882: LD_INT 28
13884: PUSH
13885: LD_INT 29
13887: PUSH
13888: LD_INT 30
13890: PUSH
13891: LD_INT 31
13893: PUSH
13894: LD_INT 32
13896: PUSH
13897: LD_INT 33
13899: PUSH
13900: LD_INT 34
13902: PUSH
13903: LD_INT 36
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: PUSH
13943: LD_INT 101
13945: PUSH
13946: LD_INT 102
13948: PUSH
13949: LD_INT 103
13951: PUSH
13952: LD_INT 104
13954: PUSH
13955: LD_INT 105
13957: PUSH
13958: LD_INT 106
13960: PUSH
13961: LD_INT 107
13963: PUSH
13964: LD_INT 108
13966: PUSH
13967: LD_INT 109
13969: PUSH
13970: LD_INT 110
13972: PUSH
13973: LD_INT 111
13975: PUSH
13976: LD_INT 112
13978: PUSH
13979: LD_INT 113
13981: PUSH
13982: LD_INT 114
13984: PUSH
13985: LD_INT 116
13987: PUSH
13988: LD_INT 117
13990: PUSH
13991: LD_INT 118
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: ST_TO_ADDR
14017: GO 15024
14019: LD_INT 15
14021: DOUBLE
14022: EQUAL
14023: IFTRUE 14027
14025: GO 14251
14027: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14028: LD_ADDR_VAR 0 2
14032: PUSH
14033: LD_INT 1
14035: PUSH
14036: LD_INT 2
14038: PUSH
14039: LD_INT 3
14041: PUSH
14042: LD_INT 4
14044: PUSH
14045: LD_INT 5
14047: PUSH
14048: LD_INT 6
14050: PUSH
14051: LD_INT 7
14053: PUSH
14054: LD_INT 8
14056: PUSH
14057: LD_INT 9
14059: PUSH
14060: LD_INT 10
14062: PUSH
14063: LD_INT 11
14065: PUSH
14066: LD_INT 12
14068: PUSH
14069: LD_INT 13
14071: PUSH
14072: LD_INT 14
14074: PUSH
14075: LD_INT 15
14077: PUSH
14078: LD_INT 16
14080: PUSH
14081: LD_INT 17
14083: PUSH
14084: LD_INT 18
14086: PUSH
14087: LD_INT 19
14089: PUSH
14090: LD_INT 20
14092: PUSH
14093: LD_INT 21
14095: PUSH
14096: LD_INT 22
14098: PUSH
14099: LD_INT 23
14101: PUSH
14102: LD_INT 24
14104: PUSH
14105: LD_INT 25
14107: PUSH
14108: LD_INT 26
14110: PUSH
14111: LD_INT 27
14113: PUSH
14114: LD_INT 28
14116: PUSH
14117: LD_INT 29
14119: PUSH
14120: LD_INT 30
14122: PUSH
14123: LD_INT 31
14125: PUSH
14126: LD_INT 32
14128: PUSH
14129: LD_INT 33
14131: PUSH
14132: LD_INT 34
14134: PUSH
14135: LD_INT 36
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 101
14177: PUSH
14178: LD_INT 102
14180: PUSH
14181: LD_INT 103
14183: PUSH
14184: LD_INT 104
14186: PUSH
14187: LD_INT 105
14189: PUSH
14190: LD_INT 106
14192: PUSH
14193: LD_INT 107
14195: PUSH
14196: LD_INT 108
14198: PUSH
14199: LD_INT 109
14201: PUSH
14202: LD_INT 110
14204: PUSH
14205: LD_INT 111
14207: PUSH
14208: LD_INT 112
14210: PUSH
14211: LD_INT 113
14213: PUSH
14214: LD_INT 114
14216: PUSH
14217: LD_INT 116
14219: PUSH
14220: LD_INT 117
14222: PUSH
14223: LD_INT 118
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: ST_TO_ADDR
14249: GO 15024
14251: LD_INT 16
14253: DOUBLE
14254: EQUAL
14255: IFTRUE 14259
14257: GO 14395
14259: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14260: LD_ADDR_VAR 0 2
14264: PUSH
14265: LD_INT 2
14267: PUSH
14268: LD_INT 4
14270: PUSH
14271: LD_INT 5
14273: PUSH
14274: LD_INT 7
14276: PUSH
14277: LD_INT 11
14279: PUSH
14280: LD_INT 12
14282: PUSH
14283: LD_INT 15
14285: PUSH
14286: LD_INT 16
14288: PUSH
14289: LD_INT 20
14291: PUSH
14292: LD_INT 21
14294: PUSH
14295: LD_INT 22
14297: PUSH
14298: LD_INT 23
14300: PUSH
14301: LD_INT 25
14303: PUSH
14304: LD_INT 26
14306: PUSH
14307: LD_INT 30
14309: PUSH
14310: LD_INT 31
14312: PUSH
14313: LD_INT 32
14315: PUSH
14316: LD_INT 33
14318: PUSH
14319: LD_INT 34
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 101
14345: PUSH
14346: LD_INT 102
14348: PUSH
14349: LD_INT 103
14351: PUSH
14352: LD_INT 106
14354: PUSH
14355: LD_INT 108
14357: PUSH
14358: LD_INT 112
14360: PUSH
14361: LD_INT 113
14363: PUSH
14364: LD_INT 114
14366: PUSH
14367: LD_INT 116
14369: PUSH
14370: LD_INT 117
14372: PUSH
14373: LD_INT 118
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: ST_TO_ADDR
14393: GO 15024
14395: LD_INT 17
14397: DOUBLE
14398: EQUAL
14399: IFTRUE 14403
14401: GO 14627
14403: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14404: LD_ADDR_VAR 0 2
14408: PUSH
14409: LD_INT 1
14411: PUSH
14412: LD_INT 2
14414: PUSH
14415: LD_INT 3
14417: PUSH
14418: LD_INT 4
14420: PUSH
14421: LD_INT 5
14423: PUSH
14424: LD_INT 6
14426: PUSH
14427: LD_INT 7
14429: PUSH
14430: LD_INT 8
14432: PUSH
14433: LD_INT 9
14435: PUSH
14436: LD_INT 10
14438: PUSH
14439: LD_INT 11
14441: PUSH
14442: LD_INT 12
14444: PUSH
14445: LD_INT 13
14447: PUSH
14448: LD_INT 14
14450: PUSH
14451: LD_INT 15
14453: PUSH
14454: LD_INT 16
14456: PUSH
14457: LD_INT 17
14459: PUSH
14460: LD_INT 18
14462: PUSH
14463: LD_INT 19
14465: PUSH
14466: LD_INT 20
14468: PUSH
14469: LD_INT 21
14471: PUSH
14472: LD_INT 22
14474: PUSH
14475: LD_INT 23
14477: PUSH
14478: LD_INT 24
14480: PUSH
14481: LD_INT 25
14483: PUSH
14484: LD_INT 26
14486: PUSH
14487: LD_INT 27
14489: PUSH
14490: LD_INT 28
14492: PUSH
14493: LD_INT 29
14495: PUSH
14496: LD_INT 30
14498: PUSH
14499: LD_INT 31
14501: PUSH
14502: LD_INT 32
14504: PUSH
14505: LD_INT 33
14507: PUSH
14508: LD_INT 34
14510: PUSH
14511: LD_INT 36
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 101
14553: PUSH
14554: LD_INT 102
14556: PUSH
14557: LD_INT 103
14559: PUSH
14560: LD_INT 104
14562: PUSH
14563: LD_INT 105
14565: PUSH
14566: LD_INT 106
14568: PUSH
14569: LD_INT 107
14571: PUSH
14572: LD_INT 108
14574: PUSH
14575: LD_INT 109
14577: PUSH
14578: LD_INT 110
14580: PUSH
14581: LD_INT 111
14583: PUSH
14584: LD_INT 112
14586: PUSH
14587: LD_INT 113
14589: PUSH
14590: LD_INT 114
14592: PUSH
14593: LD_INT 116
14595: PUSH
14596: LD_INT 117
14598: PUSH
14599: LD_INT 118
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: ST_TO_ADDR
14625: GO 15024
14627: LD_INT 18
14629: DOUBLE
14630: EQUAL
14631: IFTRUE 14635
14633: GO 14783
14635: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14636: LD_ADDR_VAR 0 2
14640: PUSH
14641: LD_INT 2
14643: PUSH
14644: LD_INT 4
14646: PUSH
14647: LD_INT 5
14649: PUSH
14650: LD_INT 7
14652: PUSH
14653: LD_INT 11
14655: PUSH
14656: LD_INT 12
14658: PUSH
14659: LD_INT 15
14661: PUSH
14662: LD_INT 16
14664: PUSH
14665: LD_INT 20
14667: PUSH
14668: LD_INT 21
14670: PUSH
14671: LD_INT 22
14673: PUSH
14674: LD_INT 23
14676: PUSH
14677: LD_INT 25
14679: PUSH
14680: LD_INT 26
14682: PUSH
14683: LD_INT 30
14685: PUSH
14686: LD_INT 31
14688: PUSH
14689: LD_INT 32
14691: PUSH
14692: LD_INT 33
14694: PUSH
14695: LD_INT 34
14697: PUSH
14698: LD_INT 35
14700: PUSH
14701: LD_INT 36
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: PUSH
14727: LD_INT 101
14729: PUSH
14730: LD_INT 102
14732: PUSH
14733: LD_INT 103
14735: PUSH
14736: LD_INT 106
14738: PUSH
14739: LD_INT 108
14741: PUSH
14742: LD_INT 112
14744: PUSH
14745: LD_INT 113
14747: PUSH
14748: LD_INT 114
14750: PUSH
14751: LD_INT 115
14753: PUSH
14754: LD_INT 116
14756: PUSH
14757: LD_INT 117
14759: PUSH
14760: LD_INT 118
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: ST_TO_ADDR
14781: GO 15024
14783: LD_INT 19
14785: DOUBLE
14786: EQUAL
14787: IFTRUE 14791
14789: GO 15023
14791: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14792: LD_ADDR_VAR 0 2
14796: PUSH
14797: LD_INT 1
14799: PUSH
14800: LD_INT 2
14802: PUSH
14803: LD_INT 3
14805: PUSH
14806: LD_INT 4
14808: PUSH
14809: LD_INT 5
14811: PUSH
14812: LD_INT 6
14814: PUSH
14815: LD_INT 7
14817: PUSH
14818: LD_INT 8
14820: PUSH
14821: LD_INT 9
14823: PUSH
14824: LD_INT 10
14826: PUSH
14827: LD_INT 11
14829: PUSH
14830: LD_INT 12
14832: PUSH
14833: LD_INT 13
14835: PUSH
14836: LD_INT 14
14838: PUSH
14839: LD_INT 15
14841: PUSH
14842: LD_INT 16
14844: PUSH
14845: LD_INT 17
14847: PUSH
14848: LD_INT 18
14850: PUSH
14851: LD_INT 19
14853: PUSH
14854: LD_INT 20
14856: PUSH
14857: LD_INT 21
14859: PUSH
14860: LD_INT 22
14862: PUSH
14863: LD_INT 23
14865: PUSH
14866: LD_INT 24
14868: PUSH
14869: LD_INT 25
14871: PUSH
14872: LD_INT 26
14874: PUSH
14875: LD_INT 27
14877: PUSH
14878: LD_INT 28
14880: PUSH
14881: LD_INT 29
14883: PUSH
14884: LD_INT 30
14886: PUSH
14887: LD_INT 31
14889: PUSH
14890: LD_INT 32
14892: PUSH
14893: LD_INT 33
14895: PUSH
14896: LD_INT 34
14898: PUSH
14899: LD_INT 35
14901: PUSH
14902: LD_INT 36
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: PUSH
14943: LD_INT 101
14945: PUSH
14946: LD_INT 102
14948: PUSH
14949: LD_INT 103
14951: PUSH
14952: LD_INT 104
14954: PUSH
14955: LD_INT 105
14957: PUSH
14958: LD_INT 106
14960: PUSH
14961: LD_INT 107
14963: PUSH
14964: LD_INT 108
14966: PUSH
14967: LD_INT 109
14969: PUSH
14970: LD_INT 110
14972: PUSH
14973: LD_INT 111
14975: PUSH
14976: LD_INT 112
14978: PUSH
14979: LD_INT 113
14981: PUSH
14982: LD_INT 114
14984: PUSH
14985: LD_INT 115
14987: PUSH
14988: LD_INT 116
14990: PUSH
14991: LD_INT 117
14993: PUSH
14994: LD_INT 118
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: ST_TO_ADDR
15021: GO 15024
15023: POP
// end else
15024: GO 15255
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15026: LD_ADDR_VAR 0 2
15030: PUSH
15031: LD_INT 1
15033: PUSH
15034: LD_INT 2
15036: PUSH
15037: LD_INT 3
15039: PUSH
15040: LD_INT 4
15042: PUSH
15043: LD_INT 5
15045: PUSH
15046: LD_INT 6
15048: PUSH
15049: LD_INT 7
15051: PUSH
15052: LD_INT 8
15054: PUSH
15055: LD_INT 9
15057: PUSH
15058: LD_INT 10
15060: PUSH
15061: LD_INT 11
15063: PUSH
15064: LD_INT 12
15066: PUSH
15067: LD_INT 13
15069: PUSH
15070: LD_INT 14
15072: PUSH
15073: LD_INT 15
15075: PUSH
15076: LD_INT 16
15078: PUSH
15079: LD_INT 17
15081: PUSH
15082: LD_INT 18
15084: PUSH
15085: LD_INT 19
15087: PUSH
15088: LD_INT 20
15090: PUSH
15091: LD_INT 21
15093: PUSH
15094: LD_INT 22
15096: PUSH
15097: LD_INT 23
15099: PUSH
15100: LD_INT 24
15102: PUSH
15103: LD_INT 25
15105: PUSH
15106: LD_INT 26
15108: PUSH
15109: LD_INT 27
15111: PUSH
15112: LD_INT 28
15114: PUSH
15115: LD_INT 29
15117: PUSH
15118: LD_INT 30
15120: PUSH
15121: LD_INT 31
15123: PUSH
15124: LD_INT 32
15126: PUSH
15127: LD_INT 33
15129: PUSH
15130: LD_INT 34
15132: PUSH
15133: LD_INT 35
15135: PUSH
15136: LD_INT 36
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 101
15179: PUSH
15180: LD_INT 102
15182: PUSH
15183: LD_INT 103
15185: PUSH
15186: LD_INT 104
15188: PUSH
15189: LD_INT 105
15191: PUSH
15192: LD_INT 106
15194: PUSH
15195: LD_INT 107
15197: PUSH
15198: LD_INT 108
15200: PUSH
15201: LD_INT 109
15203: PUSH
15204: LD_INT 110
15206: PUSH
15207: LD_INT 111
15209: PUSH
15210: LD_INT 112
15212: PUSH
15213: LD_INT 113
15215: PUSH
15216: LD_INT 114
15218: PUSH
15219: LD_INT 115
15221: PUSH
15222: LD_INT 116
15224: PUSH
15225: LD_INT 117
15227: PUSH
15228: LD_INT 118
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: ST_TO_ADDR
// if result then
15255: LD_VAR 0 2
15259: IFFALSE 16045
// begin normal :=  ;
15261: LD_ADDR_VAR 0 5
15265: PUSH
15266: LD_STRING 
15268: ST_TO_ADDR
// hardcore :=  ;
15269: LD_ADDR_VAR 0 6
15273: PUSH
15274: LD_STRING 
15276: ST_TO_ADDR
// active :=  ;
15277: LD_ADDR_VAR 0 7
15281: PUSH
15282: LD_STRING 
15284: ST_TO_ADDR
// for i = 1 to normalCounter do
15285: LD_ADDR_VAR 0 8
15289: PUSH
15290: DOUBLE
15291: LD_INT 1
15293: DEC
15294: ST_TO_ADDR
15295: LD_EXP 44
15299: PUSH
15300: FOR_TO
15301: IFFALSE 15402
// begin tmp := 0 ;
15303: LD_ADDR_VAR 0 3
15307: PUSH
15308: LD_STRING 0
15310: ST_TO_ADDR
// if result [ 1 ] then
15311: LD_VAR 0 2
15315: PUSH
15316: LD_INT 1
15318: ARRAY
15319: IFFALSE 15384
// if result [ 1 ] [ 1 ] = i then
15321: LD_VAR 0 2
15325: PUSH
15326: LD_INT 1
15328: ARRAY
15329: PUSH
15330: LD_INT 1
15332: ARRAY
15333: PUSH
15334: LD_VAR 0 8
15338: EQUAL
15339: IFFALSE 15384
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15341: LD_ADDR_VAR 0 2
15345: PUSH
15346: LD_VAR 0 2
15350: PPUSH
15351: LD_INT 1
15353: PPUSH
15354: LD_VAR 0 2
15358: PUSH
15359: LD_INT 1
15361: ARRAY
15362: PPUSH
15363: LD_INT 1
15365: PPUSH
15366: CALL_OW 3
15370: PPUSH
15371: CALL_OW 1
15375: ST_TO_ADDR
// tmp := 1 ;
15376: LD_ADDR_VAR 0 3
15380: PUSH
15381: LD_STRING 1
15383: ST_TO_ADDR
// end ; normal := normal & tmp ;
15384: LD_ADDR_VAR 0 5
15388: PUSH
15389: LD_VAR 0 5
15393: PUSH
15394: LD_VAR 0 3
15398: STR
15399: ST_TO_ADDR
// end ;
15400: GO 15300
15402: POP
15403: POP
// for i = 1 to hardcoreCounter do
15404: LD_ADDR_VAR 0 8
15408: PUSH
15409: DOUBLE
15410: LD_INT 1
15412: DEC
15413: ST_TO_ADDR
15414: LD_EXP 45
15418: PUSH
15419: FOR_TO
15420: IFFALSE 15525
// begin tmp := 0 ;
15422: LD_ADDR_VAR 0 3
15426: PUSH
15427: LD_STRING 0
15429: ST_TO_ADDR
// if result [ 2 ] then
15430: LD_VAR 0 2
15434: PUSH
15435: LD_INT 2
15437: ARRAY
15438: IFFALSE 15507
// if result [ 2 ] [ 1 ] = 100 + i then
15440: LD_VAR 0 2
15444: PUSH
15445: LD_INT 2
15447: ARRAY
15448: PUSH
15449: LD_INT 1
15451: ARRAY
15452: PUSH
15453: LD_INT 100
15455: PUSH
15456: LD_VAR 0 8
15460: PLUS
15461: EQUAL
15462: IFFALSE 15507
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15464: LD_ADDR_VAR 0 2
15468: PUSH
15469: LD_VAR 0 2
15473: PPUSH
15474: LD_INT 2
15476: PPUSH
15477: LD_VAR 0 2
15481: PUSH
15482: LD_INT 2
15484: ARRAY
15485: PPUSH
15486: LD_INT 1
15488: PPUSH
15489: CALL_OW 3
15493: PPUSH
15494: CALL_OW 1
15498: ST_TO_ADDR
// tmp := 1 ;
15499: LD_ADDR_VAR 0 3
15503: PUSH
15504: LD_STRING 1
15506: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15507: LD_ADDR_VAR 0 6
15511: PUSH
15512: LD_VAR 0 6
15516: PUSH
15517: LD_VAR 0 3
15521: STR
15522: ST_TO_ADDR
// end ;
15523: GO 15419
15525: POP
15526: POP
// if isGameLoad then
15527: LD_VAR 0 1
15531: IFFALSE 16006
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15533: LD_ADDR_VAR 0 4
15537: PUSH
15538: LD_EXP 48
15542: PUSH
15543: LD_EXP 47
15547: PUSH
15548: LD_EXP 49
15552: PUSH
15553: LD_EXP 46
15557: PUSH
15558: LD_EXP 50
15562: PUSH
15563: LD_EXP 51
15567: PUSH
15568: LD_EXP 52
15572: PUSH
15573: LD_EXP 53
15577: PUSH
15578: LD_EXP 54
15582: PUSH
15583: LD_EXP 55
15587: PUSH
15588: LD_EXP 56
15592: PUSH
15593: LD_EXP 57
15597: PUSH
15598: LD_EXP 58
15602: PUSH
15603: LD_EXP 59
15607: PUSH
15608: LD_EXP 67
15612: PUSH
15613: LD_EXP 68
15617: PUSH
15618: LD_EXP 69
15622: PUSH
15623: LD_EXP 70
15627: PUSH
15628: LD_EXP 72
15632: PUSH
15633: LD_EXP 73
15637: PUSH
15638: LD_EXP 74
15642: PUSH
15643: LD_EXP 77
15647: PUSH
15648: LD_EXP 79
15652: PUSH
15653: LD_EXP 80
15657: PUSH
15658: LD_EXP 81
15662: PUSH
15663: LD_EXP 83
15667: PUSH
15668: LD_EXP 84
15672: PUSH
15673: LD_EXP 87
15677: PUSH
15678: LD_EXP 88
15682: PUSH
15683: LD_EXP 89
15687: PUSH
15688: LD_EXP 90
15692: PUSH
15693: LD_EXP 91
15697: PUSH
15698: LD_EXP 92
15702: PUSH
15703: LD_EXP 93
15707: PUSH
15708: LD_EXP 94
15712: PUSH
15713: LD_EXP 95
15717: PUSH
15718: LD_EXP 60
15722: PUSH
15723: LD_EXP 61
15727: PUSH
15728: LD_EXP 64
15732: PUSH
15733: LD_EXP 65
15737: PUSH
15738: LD_EXP 66
15742: PUSH
15743: LD_EXP 62
15747: PUSH
15748: LD_EXP 63
15752: PUSH
15753: LD_EXP 71
15757: PUSH
15758: LD_EXP 75
15762: PUSH
15763: LD_EXP 76
15767: PUSH
15768: LD_EXP 78
15772: PUSH
15773: LD_EXP 82
15777: PUSH
15778: LD_EXP 85
15782: PUSH
15783: LD_EXP 86
15787: PUSH
15788: LD_EXP 96
15792: PUSH
15793: LD_EXP 97
15797: PUSH
15798: LD_EXP 98
15802: PUSH
15803: LD_EXP 99
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: ST_TO_ADDR
// tmp :=  ;
15864: LD_ADDR_VAR 0 3
15868: PUSH
15869: LD_STRING 
15871: ST_TO_ADDR
// for i = 1 to normalCounter do
15872: LD_ADDR_VAR 0 8
15876: PUSH
15877: DOUBLE
15878: LD_INT 1
15880: DEC
15881: ST_TO_ADDR
15882: LD_EXP 44
15886: PUSH
15887: FOR_TO
15888: IFFALSE 15924
// begin if flags [ i ] then
15890: LD_VAR 0 4
15894: PUSH
15895: LD_VAR 0 8
15899: ARRAY
15900: IFFALSE 15922
// tmp := tmp & i & ; ;
15902: LD_ADDR_VAR 0 3
15906: PUSH
15907: LD_VAR 0 3
15911: PUSH
15912: LD_VAR 0 8
15916: STR
15917: PUSH
15918: LD_STRING ;
15920: STR
15921: ST_TO_ADDR
// end ;
15922: GO 15887
15924: POP
15925: POP
// for i = 1 to hardcoreCounter do
15926: LD_ADDR_VAR 0 8
15930: PUSH
15931: DOUBLE
15932: LD_INT 1
15934: DEC
15935: ST_TO_ADDR
15936: LD_EXP 45
15940: PUSH
15941: FOR_TO
15942: IFFALSE 15988
// begin if flags [ normalCounter + i ] then
15944: LD_VAR 0 4
15948: PUSH
15949: LD_EXP 44
15953: PUSH
15954: LD_VAR 0 8
15958: PLUS
15959: ARRAY
15960: IFFALSE 15986
// tmp := tmp & ( 100 + i ) & ; ;
15962: LD_ADDR_VAR 0 3
15966: PUSH
15967: LD_VAR 0 3
15971: PUSH
15972: LD_INT 100
15974: PUSH
15975: LD_VAR 0 8
15979: PLUS
15980: STR
15981: PUSH
15982: LD_STRING ;
15984: STR
15985: ST_TO_ADDR
// end ;
15986: GO 15941
15988: POP
15989: POP
// if tmp then
15990: LD_VAR 0 3
15994: IFFALSE 16006
// active := tmp ;
15996: LD_ADDR_VAR 0 7
16000: PUSH
16001: LD_VAR 0 3
16005: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16006: LD_STRING getStreamItemsFromMission("
16008: PUSH
16009: LD_VAR 0 5
16013: STR
16014: PUSH
16015: LD_STRING ","
16017: STR
16018: PUSH
16019: LD_VAR 0 6
16023: STR
16024: PUSH
16025: LD_STRING ","
16027: STR
16028: PUSH
16029: LD_VAR 0 7
16033: STR
16034: PUSH
16035: LD_STRING ")
16037: STR
16038: PPUSH
16039: CALL_OW 559
// end else
16043: GO 16052
// ToLua ( getStreamItemsFromMission("","","") ) ;
16045: LD_STRING getStreamItemsFromMission("","","")
16047: PPUSH
16048: CALL_OW 559
// end ;
16052: LD_VAR 0 2
16056: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16057: LD_EXP 43
16061: PUSH
16062: LD_EXP 48
16066: AND
16067: IFFALSE 16191
16069: GO 16071
16071: DISABLE
16072: LD_INT 0
16074: PPUSH
16075: PPUSH
// begin enable ;
16076: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16077: LD_ADDR_VAR 0 2
16081: PUSH
16082: LD_INT 22
16084: PUSH
16085: LD_OWVAR 2
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: LD_INT 2
16096: PUSH
16097: LD_INT 34
16099: PUSH
16100: LD_INT 7
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: LD_INT 34
16109: PUSH
16110: LD_INT 45
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 34
16119: PUSH
16120: LD_INT 28
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PUSH
16127: LD_INT 34
16129: PUSH
16130: LD_INT 47
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PPUSH
16148: CALL_OW 69
16152: ST_TO_ADDR
// if not tmp then
16153: LD_VAR 0 2
16157: NOT
16158: IFFALSE 16162
// exit ;
16160: GO 16191
// for i in tmp do
16162: LD_ADDR_VAR 0 1
16166: PUSH
16167: LD_VAR 0 2
16171: PUSH
16172: FOR_IN
16173: IFFALSE 16189
// begin SetLives ( i , 0 ) ;
16175: LD_VAR 0 1
16179: PPUSH
16180: LD_INT 0
16182: PPUSH
16183: CALL_OW 234
// end ;
16187: GO 16172
16189: POP
16190: POP
// end ;
16191: PPOPN 2
16193: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16194: LD_EXP 43
16198: PUSH
16199: LD_EXP 49
16203: AND
16204: IFFALSE 16288
16206: GO 16208
16208: DISABLE
16209: LD_INT 0
16211: PPUSH
16212: PPUSH
// begin enable ;
16213: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16214: LD_ADDR_VAR 0 2
16218: PUSH
16219: LD_INT 22
16221: PUSH
16222: LD_OWVAR 2
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 32
16233: PUSH
16234: LD_INT 3
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PPUSH
16245: CALL_OW 69
16249: ST_TO_ADDR
// if not tmp then
16250: LD_VAR 0 2
16254: NOT
16255: IFFALSE 16259
// exit ;
16257: GO 16288
// for i in tmp do
16259: LD_ADDR_VAR 0 1
16263: PUSH
16264: LD_VAR 0 2
16268: PUSH
16269: FOR_IN
16270: IFFALSE 16286
// begin SetLives ( i , 0 ) ;
16272: LD_VAR 0 1
16276: PPUSH
16277: LD_INT 0
16279: PPUSH
16280: CALL_OW 234
// end ;
16284: GO 16269
16286: POP
16287: POP
// end ;
16288: PPOPN 2
16290: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16291: LD_EXP 43
16295: PUSH
16296: LD_EXP 46
16300: AND
16301: IFFALSE 16394
16303: GO 16305
16305: DISABLE
16306: LD_INT 0
16308: PPUSH
// begin enable ;
16309: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16310: LD_ADDR_VAR 0 1
16314: PUSH
16315: LD_INT 22
16317: PUSH
16318: LD_OWVAR 2
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 2
16329: PUSH
16330: LD_INT 25
16332: PUSH
16333: LD_INT 5
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: LD_INT 25
16342: PUSH
16343: LD_INT 9
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: PUSH
16350: LD_INT 25
16352: PUSH
16353: LD_INT 8
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PPUSH
16370: CALL_OW 69
16374: PUSH
16375: FOR_IN
16376: IFFALSE 16392
// begin SetClass ( i , 1 ) ;
16378: LD_VAR 0 1
16382: PPUSH
16383: LD_INT 1
16385: PPUSH
16386: CALL_OW 336
// end ;
16390: GO 16375
16392: POP
16393: POP
// end ;
16394: PPOPN 1
16396: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16397: LD_EXP 43
16401: PUSH
16402: LD_EXP 47
16406: AND
16407: PUSH
16408: LD_OWVAR 65
16412: PUSH
16413: LD_INT 7
16415: LESS
16416: AND
16417: IFFALSE 16431
16419: GO 16421
16421: DISABLE
// begin enable ;
16422: ENABLE
// game_speed := 7 ;
16423: LD_ADDR_OWVAR 65
16427: PUSH
16428: LD_INT 7
16430: ST_TO_ADDR
// end ;
16431: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16432: LD_EXP 43
16436: PUSH
16437: LD_EXP 50
16441: AND
16442: IFFALSE 16644
16444: GO 16446
16446: DISABLE
16447: LD_INT 0
16449: PPUSH
16450: PPUSH
16451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16452: LD_ADDR_VAR 0 3
16456: PUSH
16457: LD_INT 81
16459: PUSH
16460: LD_OWVAR 2
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 21
16471: PUSH
16472: LD_INT 1
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PPUSH
16483: CALL_OW 69
16487: ST_TO_ADDR
// if not tmp then
16488: LD_VAR 0 3
16492: NOT
16493: IFFALSE 16497
// exit ;
16495: GO 16644
// if tmp > 5 then
16497: LD_VAR 0 3
16501: PUSH
16502: LD_INT 5
16504: GREATER
16505: IFFALSE 16517
// k := 5 else
16507: LD_ADDR_VAR 0 2
16511: PUSH
16512: LD_INT 5
16514: ST_TO_ADDR
16515: GO 16527
// k := tmp ;
16517: LD_ADDR_VAR 0 2
16521: PUSH
16522: LD_VAR 0 3
16526: ST_TO_ADDR
// for i := 1 to k do
16527: LD_ADDR_VAR 0 1
16531: PUSH
16532: DOUBLE
16533: LD_INT 1
16535: DEC
16536: ST_TO_ADDR
16537: LD_VAR 0 2
16541: PUSH
16542: FOR_TO
16543: IFFALSE 16642
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16545: LD_VAR 0 3
16549: PUSH
16550: LD_VAR 0 1
16554: ARRAY
16555: PPUSH
16556: LD_VAR 0 1
16560: PUSH
16561: LD_INT 4
16563: MOD
16564: PUSH
16565: LD_INT 1
16567: PLUS
16568: PPUSH
16569: CALL_OW 259
16573: PUSH
16574: LD_INT 10
16576: LESS
16577: IFFALSE 16640
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16579: LD_VAR 0 3
16583: PUSH
16584: LD_VAR 0 1
16588: ARRAY
16589: PPUSH
16590: LD_VAR 0 1
16594: PUSH
16595: LD_INT 4
16597: MOD
16598: PUSH
16599: LD_INT 1
16601: PLUS
16602: PPUSH
16603: LD_VAR 0 3
16607: PUSH
16608: LD_VAR 0 1
16612: ARRAY
16613: PPUSH
16614: LD_VAR 0 1
16618: PUSH
16619: LD_INT 4
16621: MOD
16622: PUSH
16623: LD_INT 1
16625: PLUS
16626: PPUSH
16627: CALL_OW 259
16631: PUSH
16632: LD_INT 1
16634: PLUS
16635: PPUSH
16636: CALL_OW 237
16640: GO 16542
16642: POP
16643: POP
// end ;
16644: PPOPN 3
16646: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16647: LD_EXP 43
16651: PUSH
16652: LD_EXP 51
16656: AND
16657: IFFALSE 16677
16659: GO 16661
16661: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16662: LD_INT 4
16664: PPUSH
16665: LD_OWVAR 2
16669: PPUSH
16670: LD_INT 0
16672: PPUSH
16673: CALL_OW 324
16677: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16678: LD_EXP 43
16682: PUSH
16683: LD_EXP 80
16687: AND
16688: IFFALSE 16708
16690: GO 16692
16692: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16693: LD_INT 19
16695: PPUSH
16696: LD_OWVAR 2
16700: PPUSH
16701: LD_INT 0
16703: PPUSH
16704: CALL_OW 324
16708: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16709: LD_EXP 43
16713: PUSH
16714: LD_EXP 52
16718: AND
16719: IFFALSE 16821
16721: GO 16723
16723: DISABLE
16724: LD_INT 0
16726: PPUSH
16727: PPUSH
// begin enable ;
16728: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16729: LD_ADDR_VAR 0 2
16733: PUSH
16734: LD_INT 22
16736: PUSH
16737: LD_OWVAR 2
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 2
16748: PUSH
16749: LD_INT 34
16751: PUSH
16752: LD_INT 11
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 34
16761: PUSH
16762: LD_INT 30
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: LIST
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PPUSH
16778: CALL_OW 69
16782: ST_TO_ADDR
// if not tmp then
16783: LD_VAR 0 2
16787: NOT
16788: IFFALSE 16792
// exit ;
16790: GO 16821
// for i in tmp do
16792: LD_ADDR_VAR 0 1
16796: PUSH
16797: LD_VAR 0 2
16801: PUSH
16802: FOR_IN
16803: IFFALSE 16819
// begin SetLives ( i , 0 ) ;
16805: LD_VAR 0 1
16809: PPUSH
16810: LD_INT 0
16812: PPUSH
16813: CALL_OW 234
// end ;
16817: GO 16802
16819: POP
16820: POP
// end ;
16821: PPOPN 2
16823: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16824: LD_EXP 43
16828: PUSH
16829: LD_EXP 53
16833: AND
16834: IFFALSE 16854
16836: GO 16838
16838: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16839: LD_INT 32
16841: PPUSH
16842: LD_OWVAR 2
16846: PPUSH
16847: LD_INT 0
16849: PPUSH
16850: CALL_OW 324
16854: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16855: LD_EXP 43
16859: PUSH
16860: LD_EXP 54
16864: AND
16865: IFFALSE 17046
16867: GO 16869
16869: DISABLE
16870: LD_INT 0
16872: PPUSH
16873: PPUSH
16874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16875: LD_ADDR_VAR 0 2
16879: PUSH
16880: LD_INT 22
16882: PUSH
16883: LD_OWVAR 2
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 33
16894: PUSH
16895: LD_INT 3
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: PPUSH
16906: CALL_OW 69
16910: ST_TO_ADDR
// if not tmp then
16911: LD_VAR 0 2
16915: NOT
16916: IFFALSE 16920
// exit ;
16918: GO 17046
// side := 0 ;
16920: LD_ADDR_VAR 0 3
16924: PUSH
16925: LD_INT 0
16927: ST_TO_ADDR
// for i := 1 to 8 do
16928: LD_ADDR_VAR 0 1
16932: PUSH
16933: DOUBLE
16934: LD_INT 1
16936: DEC
16937: ST_TO_ADDR
16938: LD_INT 8
16940: PUSH
16941: FOR_TO
16942: IFFALSE 16990
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16944: LD_OWVAR 2
16948: PUSH
16949: LD_VAR 0 1
16953: NONEQUAL
16954: PUSH
16955: LD_OWVAR 2
16959: PPUSH
16960: LD_VAR 0 1
16964: PPUSH
16965: CALL_OW 81
16969: PUSH
16970: LD_INT 2
16972: EQUAL
16973: AND
16974: IFFALSE 16988
// begin side := i ;
16976: LD_ADDR_VAR 0 3
16980: PUSH
16981: LD_VAR 0 1
16985: ST_TO_ADDR
// break ;
16986: GO 16990
// end ;
16988: GO 16941
16990: POP
16991: POP
// if not side then
16992: LD_VAR 0 3
16996: NOT
16997: IFFALSE 17001
// exit ;
16999: GO 17046
// for i := 1 to tmp do
17001: LD_ADDR_VAR 0 1
17005: PUSH
17006: DOUBLE
17007: LD_INT 1
17009: DEC
17010: ST_TO_ADDR
17011: LD_VAR 0 2
17015: PUSH
17016: FOR_TO
17017: IFFALSE 17044
// if Prob ( 60 ) then
17019: LD_INT 60
17021: PPUSH
17022: CALL_OW 13
17026: IFFALSE 17042
// SetSide ( i , side ) ;
17028: LD_VAR 0 1
17032: PPUSH
17033: LD_VAR 0 3
17037: PPUSH
17038: CALL_OW 235
17042: GO 17016
17044: POP
17045: POP
// end ;
17046: PPOPN 3
17048: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17049: LD_EXP 43
17053: PUSH
17054: LD_EXP 56
17058: AND
17059: IFFALSE 17178
17061: GO 17063
17063: DISABLE
17064: LD_INT 0
17066: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17067: LD_ADDR_VAR 0 1
17071: PUSH
17072: LD_INT 22
17074: PUSH
17075: LD_OWVAR 2
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 21
17086: PUSH
17087: LD_INT 1
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 3
17096: PUSH
17097: LD_INT 23
17099: PUSH
17100: LD_INT 0
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: LIST
17115: PPUSH
17116: CALL_OW 69
17120: PUSH
17121: FOR_IN
17122: IFFALSE 17176
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17124: LD_VAR 0 1
17128: PPUSH
17129: CALL_OW 257
17133: PUSH
17134: LD_INT 1
17136: PUSH
17137: LD_INT 2
17139: PUSH
17140: LD_INT 3
17142: PUSH
17143: LD_INT 4
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: IN
17152: IFFALSE 17174
// SetClass ( un , rand ( 1 , 4 ) ) ;
17154: LD_VAR 0 1
17158: PPUSH
17159: LD_INT 1
17161: PPUSH
17162: LD_INT 4
17164: PPUSH
17165: CALL_OW 12
17169: PPUSH
17170: CALL_OW 336
17174: GO 17121
17176: POP
17177: POP
// end ;
17178: PPOPN 1
17180: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17181: LD_EXP 43
17185: PUSH
17186: LD_EXP 55
17190: AND
17191: IFFALSE 17270
17193: GO 17195
17195: DISABLE
17196: LD_INT 0
17198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17199: LD_ADDR_VAR 0 1
17203: PUSH
17204: LD_INT 22
17206: PUSH
17207: LD_OWVAR 2
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 21
17218: PUSH
17219: LD_INT 3
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PPUSH
17230: CALL_OW 69
17234: ST_TO_ADDR
// if not tmp then
17235: LD_VAR 0 1
17239: NOT
17240: IFFALSE 17244
// exit ;
17242: GO 17270
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17244: LD_VAR 0 1
17248: PUSH
17249: LD_INT 1
17251: PPUSH
17252: LD_VAR 0 1
17256: PPUSH
17257: CALL_OW 12
17261: ARRAY
17262: PPUSH
17263: LD_INT 100
17265: PPUSH
17266: CALL_OW 234
// end ;
17270: PPOPN 1
17272: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17273: LD_EXP 43
17277: PUSH
17278: LD_EXP 57
17282: AND
17283: IFFALSE 17381
17285: GO 17287
17287: DISABLE
17288: LD_INT 0
17290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17291: LD_ADDR_VAR 0 1
17295: PUSH
17296: LD_INT 22
17298: PUSH
17299: LD_OWVAR 2
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 21
17310: PUSH
17311: LD_INT 1
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PPUSH
17322: CALL_OW 69
17326: ST_TO_ADDR
// if not tmp then
17327: LD_VAR 0 1
17331: NOT
17332: IFFALSE 17336
// exit ;
17334: GO 17381
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17336: LD_VAR 0 1
17340: PUSH
17341: LD_INT 1
17343: PPUSH
17344: LD_VAR 0 1
17348: PPUSH
17349: CALL_OW 12
17353: ARRAY
17354: PPUSH
17355: LD_INT 1
17357: PPUSH
17358: LD_INT 4
17360: PPUSH
17361: CALL_OW 12
17365: PPUSH
17366: LD_INT 3000
17368: PPUSH
17369: LD_INT 9000
17371: PPUSH
17372: CALL_OW 12
17376: PPUSH
17377: CALL_OW 492
// end ;
17381: PPOPN 1
17383: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17384: LD_EXP 43
17388: PUSH
17389: LD_EXP 58
17393: AND
17394: IFFALSE 17414
17396: GO 17398
17398: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17399: LD_INT 1
17401: PPUSH
17402: LD_OWVAR 2
17406: PPUSH
17407: LD_INT 0
17409: PPUSH
17410: CALL_OW 324
17414: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17415: LD_EXP 43
17419: PUSH
17420: LD_EXP 59
17424: AND
17425: IFFALSE 17508
17427: GO 17429
17429: DISABLE
17430: LD_INT 0
17432: PPUSH
17433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17434: LD_ADDR_VAR 0 2
17438: PUSH
17439: LD_INT 22
17441: PUSH
17442: LD_OWVAR 2
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 21
17453: PUSH
17454: LD_INT 3
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PPUSH
17465: CALL_OW 69
17469: ST_TO_ADDR
// if not tmp then
17470: LD_VAR 0 2
17474: NOT
17475: IFFALSE 17479
// exit ;
17477: GO 17508
// for i in tmp do
17479: LD_ADDR_VAR 0 1
17483: PUSH
17484: LD_VAR 0 2
17488: PUSH
17489: FOR_IN
17490: IFFALSE 17506
// SetBLevel ( i , 10 ) ;
17492: LD_VAR 0 1
17496: PPUSH
17497: LD_INT 10
17499: PPUSH
17500: CALL_OW 241
17504: GO 17489
17506: POP
17507: POP
// end ;
17508: PPOPN 2
17510: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17511: LD_EXP 43
17515: PUSH
17516: LD_EXP 60
17520: AND
17521: IFFALSE 17632
17523: GO 17525
17525: DISABLE
17526: LD_INT 0
17528: PPUSH
17529: PPUSH
17530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17531: LD_ADDR_VAR 0 3
17535: PUSH
17536: LD_INT 22
17538: PUSH
17539: LD_OWVAR 2
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 25
17550: PUSH
17551: LD_INT 1
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PPUSH
17562: CALL_OW 69
17566: ST_TO_ADDR
// if not tmp then
17567: LD_VAR 0 3
17571: NOT
17572: IFFALSE 17576
// exit ;
17574: GO 17632
// un := tmp [ rand ( 1 , tmp ) ] ;
17576: LD_ADDR_VAR 0 2
17580: PUSH
17581: LD_VAR 0 3
17585: PUSH
17586: LD_INT 1
17588: PPUSH
17589: LD_VAR 0 3
17593: PPUSH
17594: CALL_OW 12
17598: ARRAY
17599: ST_TO_ADDR
// if Crawls ( un ) then
17600: LD_VAR 0 2
17604: PPUSH
17605: CALL_OW 318
17609: IFFALSE 17620
// ComWalk ( un ) ;
17611: LD_VAR 0 2
17615: PPUSH
17616: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17620: LD_VAR 0 2
17624: PPUSH
17625: LD_INT 5
17627: PPUSH
17628: CALL_OW 336
// end ;
17632: PPOPN 3
17634: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17635: LD_EXP 43
17639: PUSH
17640: LD_EXP 61
17644: AND
17645: PUSH
17646: LD_OWVAR 67
17650: PUSH
17651: LD_INT 4
17653: LESS
17654: AND
17655: IFFALSE 17674
17657: GO 17659
17659: DISABLE
// begin Difficulty := Difficulty + 1 ;
17660: LD_ADDR_OWVAR 67
17664: PUSH
17665: LD_OWVAR 67
17669: PUSH
17670: LD_INT 1
17672: PLUS
17673: ST_TO_ADDR
// end ;
17674: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17675: LD_EXP 43
17679: PUSH
17680: LD_EXP 62
17684: AND
17685: IFFALSE 17788
17687: GO 17689
17689: DISABLE
17690: LD_INT 0
17692: PPUSH
// begin for i := 1 to 5 do
17693: LD_ADDR_VAR 0 1
17697: PUSH
17698: DOUBLE
17699: LD_INT 1
17701: DEC
17702: ST_TO_ADDR
17703: LD_INT 5
17705: PUSH
17706: FOR_TO
17707: IFFALSE 17786
// begin uc_nation := nation_nature ;
17709: LD_ADDR_OWVAR 21
17713: PUSH
17714: LD_INT 0
17716: ST_TO_ADDR
// uc_side := 0 ;
17717: LD_ADDR_OWVAR 20
17721: PUSH
17722: LD_INT 0
17724: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17725: LD_ADDR_OWVAR 29
17729: PUSH
17730: LD_INT 12
17732: PUSH
17733: LD_INT 12
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: ST_TO_ADDR
// hc_agressivity := 20 ;
17740: LD_ADDR_OWVAR 35
17744: PUSH
17745: LD_INT 20
17747: ST_TO_ADDR
// hc_class := class_tiger ;
17748: LD_ADDR_OWVAR 28
17752: PUSH
17753: LD_INT 14
17755: ST_TO_ADDR
// hc_gallery :=  ;
17756: LD_ADDR_OWVAR 33
17760: PUSH
17761: LD_STRING 
17763: ST_TO_ADDR
// hc_name :=  ;
17764: LD_ADDR_OWVAR 26
17768: PUSH
17769: LD_STRING 
17771: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17772: CALL_OW 44
17776: PPUSH
17777: LD_INT 0
17779: PPUSH
17780: CALL_OW 51
// end ;
17784: GO 17706
17786: POP
17787: POP
// end ;
17788: PPOPN 1
17790: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17791: LD_EXP 43
17795: PUSH
17796: LD_EXP 63
17800: AND
17801: IFFALSE 17810
17803: GO 17805
17805: DISABLE
// StreamSibBomb ;
17806: CALL 17811 0 0
17810: END
// export function StreamSibBomb ; var i , x , y ; begin
17811: LD_INT 0
17813: PPUSH
17814: PPUSH
17815: PPUSH
17816: PPUSH
// result := false ;
17817: LD_ADDR_VAR 0 1
17821: PUSH
17822: LD_INT 0
17824: ST_TO_ADDR
// for i := 1 to 16 do
17825: LD_ADDR_VAR 0 2
17829: PUSH
17830: DOUBLE
17831: LD_INT 1
17833: DEC
17834: ST_TO_ADDR
17835: LD_INT 16
17837: PUSH
17838: FOR_TO
17839: IFFALSE 18038
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17841: LD_ADDR_VAR 0 3
17845: PUSH
17846: LD_INT 10
17848: PUSH
17849: LD_INT 20
17851: PUSH
17852: LD_INT 30
17854: PUSH
17855: LD_INT 40
17857: PUSH
17858: LD_INT 50
17860: PUSH
17861: LD_INT 60
17863: PUSH
17864: LD_INT 70
17866: PUSH
17867: LD_INT 80
17869: PUSH
17870: LD_INT 90
17872: PUSH
17873: LD_INT 100
17875: PUSH
17876: LD_INT 110
17878: PUSH
17879: LD_INT 120
17881: PUSH
17882: LD_INT 130
17884: PUSH
17885: LD_INT 140
17887: PUSH
17888: LD_INT 150
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 1
17910: PPUSH
17911: LD_INT 15
17913: PPUSH
17914: CALL_OW 12
17918: ARRAY
17919: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17920: LD_ADDR_VAR 0 4
17924: PUSH
17925: LD_INT 10
17927: PUSH
17928: LD_INT 20
17930: PUSH
17931: LD_INT 30
17933: PUSH
17934: LD_INT 40
17936: PUSH
17937: LD_INT 50
17939: PUSH
17940: LD_INT 60
17942: PUSH
17943: LD_INT 70
17945: PUSH
17946: LD_INT 80
17948: PUSH
17949: LD_INT 90
17951: PUSH
17952: LD_INT 100
17954: PUSH
17955: LD_INT 110
17957: PUSH
17958: LD_INT 120
17960: PUSH
17961: LD_INT 130
17963: PUSH
17964: LD_INT 140
17966: PUSH
17967: LD_INT 150
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 1
17989: PPUSH
17990: LD_INT 15
17992: PPUSH
17993: CALL_OW 12
17997: ARRAY
17998: ST_TO_ADDR
// if ValidHex ( x , y ) then
17999: LD_VAR 0 3
18003: PPUSH
18004: LD_VAR 0 4
18008: PPUSH
18009: CALL_OW 488
18013: IFFALSE 18036
// begin result := [ x , y ] ;
18015: LD_ADDR_VAR 0 1
18019: PUSH
18020: LD_VAR 0 3
18024: PUSH
18025: LD_VAR 0 4
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: ST_TO_ADDR
// break ;
18034: GO 18038
// end ; end ;
18036: GO 17838
18038: POP
18039: POP
// if result then
18040: LD_VAR 0 1
18044: IFFALSE 18104
// begin ToLua ( playSibBomb() ) ;
18046: LD_STRING playSibBomb()
18048: PPUSH
18049: CALL_OW 559
// wait ( 0 0$14 ) ;
18053: LD_INT 490
18055: PPUSH
18056: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18060: LD_VAR 0 1
18064: PUSH
18065: LD_INT 1
18067: ARRAY
18068: PPUSH
18069: LD_VAR 0 1
18073: PUSH
18074: LD_INT 2
18076: ARRAY
18077: PPUSH
18078: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18082: LD_VAR 0 1
18086: PUSH
18087: LD_INT 1
18089: ARRAY
18090: PPUSH
18091: LD_VAR 0 1
18095: PUSH
18096: LD_INT 2
18098: ARRAY
18099: PPUSH
18100: CALL_OW 429
// end ; end ;
18104: LD_VAR 0 1
18108: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18109: LD_EXP 43
18113: PUSH
18114: LD_EXP 65
18118: AND
18119: IFFALSE 18131
18121: GO 18123
18123: DISABLE
// YouLost (  ) ;
18124: LD_STRING 
18126: PPUSH
18127: CALL_OW 104
18131: END
// every 0 0$1 trigger StreamModeActive and sFog do
18132: LD_EXP 43
18136: PUSH
18137: LD_EXP 64
18141: AND
18142: IFFALSE 18156
18144: GO 18146
18146: DISABLE
// FogOff ( your_side ) ;
18147: LD_OWVAR 2
18151: PPUSH
18152: CALL_OW 344
18156: END
// every 0 0$1 trigger StreamModeActive and sSun do
18157: LD_EXP 43
18161: PUSH
18162: LD_EXP 66
18166: AND
18167: IFFALSE 18195
18169: GO 18171
18171: DISABLE
// begin solar_recharge_percent := 0 ;
18172: LD_ADDR_OWVAR 79
18176: PUSH
18177: LD_INT 0
18179: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18180: LD_INT 10500
18182: PPUSH
18183: CALL_OW 67
// solar_recharge_percent := 100 ;
18187: LD_ADDR_OWVAR 79
18191: PUSH
18192: LD_INT 100
18194: ST_TO_ADDR
// end ;
18195: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18196: LD_EXP 43
18200: PUSH
18201: LD_EXP 67
18205: AND
18206: IFFALSE 18445
18208: GO 18210
18210: DISABLE
18211: LD_INT 0
18213: PPUSH
18214: PPUSH
18215: PPUSH
// begin tmp := [ ] ;
18216: LD_ADDR_VAR 0 3
18220: PUSH
18221: EMPTY
18222: ST_TO_ADDR
// for i := 1 to 6 do
18223: LD_ADDR_VAR 0 1
18227: PUSH
18228: DOUBLE
18229: LD_INT 1
18231: DEC
18232: ST_TO_ADDR
18233: LD_INT 6
18235: PUSH
18236: FOR_TO
18237: IFFALSE 18342
// begin uc_nation := nation_nature ;
18239: LD_ADDR_OWVAR 21
18243: PUSH
18244: LD_INT 0
18246: ST_TO_ADDR
// uc_side := 0 ;
18247: LD_ADDR_OWVAR 20
18251: PUSH
18252: LD_INT 0
18254: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18255: LD_ADDR_OWVAR 29
18259: PUSH
18260: LD_INT 12
18262: PUSH
18263: LD_INT 12
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: ST_TO_ADDR
// hc_agressivity := 20 ;
18270: LD_ADDR_OWVAR 35
18274: PUSH
18275: LD_INT 20
18277: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18278: LD_ADDR_OWVAR 28
18282: PUSH
18283: LD_INT 17
18285: ST_TO_ADDR
// hc_gallery :=  ;
18286: LD_ADDR_OWVAR 33
18290: PUSH
18291: LD_STRING 
18293: ST_TO_ADDR
// hc_name :=  ;
18294: LD_ADDR_OWVAR 26
18298: PUSH
18299: LD_STRING 
18301: ST_TO_ADDR
// un := CreateHuman ;
18302: LD_ADDR_VAR 0 2
18306: PUSH
18307: CALL_OW 44
18311: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18312: LD_VAR 0 2
18316: PPUSH
18317: LD_INT 1
18319: PPUSH
18320: CALL_OW 51
// tmp := tmp ^ un ;
18324: LD_ADDR_VAR 0 3
18328: PUSH
18329: LD_VAR 0 3
18333: PUSH
18334: LD_VAR 0 2
18338: ADD
18339: ST_TO_ADDR
// end ;
18340: GO 18236
18342: POP
18343: POP
// repeat wait ( 0 0$1 ) ;
18344: LD_INT 35
18346: PPUSH
18347: CALL_OW 67
// for un in tmp do
18351: LD_ADDR_VAR 0 2
18355: PUSH
18356: LD_VAR 0 3
18360: PUSH
18361: FOR_IN
18362: IFFALSE 18436
// begin if IsDead ( un ) then
18364: LD_VAR 0 2
18368: PPUSH
18369: CALL_OW 301
18373: IFFALSE 18393
// begin tmp := tmp diff un ;
18375: LD_ADDR_VAR 0 3
18379: PUSH
18380: LD_VAR 0 3
18384: PUSH
18385: LD_VAR 0 2
18389: DIFF
18390: ST_TO_ADDR
// continue ;
18391: GO 18361
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18393: LD_VAR 0 2
18397: PPUSH
18398: LD_INT 3
18400: PUSH
18401: LD_INT 22
18403: PUSH
18404: LD_INT 0
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PPUSH
18415: CALL_OW 69
18419: PPUSH
18420: LD_VAR 0 2
18424: PPUSH
18425: CALL_OW 74
18429: PPUSH
18430: CALL_OW 115
// end ;
18434: GO 18361
18436: POP
18437: POP
// until not tmp ;
18438: LD_VAR 0 3
18442: NOT
18443: IFFALSE 18344
// end ;
18445: PPOPN 3
18447: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18448: LD_EXP 43
18452: PUSH
18453: LD_EXP 68
18457: AND
18458: IFFALSE 18512
18460: GO 18462
18462: DISABLE
// begin ToLua ( displayTroll(); ) ;
18463: LD_STRING displayTroll();
18465: PPUSH
18466: CALL_OW 559
// wait ( 3 3$00 ) ;
18470: LD_INT 6300
18472: PPUSH
18473: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18477: LD_STRING hideTroll();
18479: PPUSH
18480: CALL_OW 559
// wait ( 1 1$00 ) ;
18484: LD_INT 2100
18486: PPUSH
18487: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18491: LD_STRING displayTroll();
18493: PPUSH
18494: CALL_OW 559
// wait ( 1 1$00 ) ;
18498: LD_INT 2100
18500: PPUSH
18501: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18505: LD_STRING hideTroll();
18507: PPUSH
18508: CALL_OW 559
// end ;
18512: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18513: LD_EXP 43
18517: PUSH
18518: LD_EXP 69
18522: AND
18523: IFFALSE 18586
18525: GO 18527
18527: DISABLE
18528: LD_INT 0
18530: PPUSH
// begin p := 0 ;
18531: LD_ADDR_VAR 0 1
18535: PUSH
18536: LD_INT 0
18538: ST_TO_ADDR
// repeat game_speed := 1 ;
18539: LD_ADDR_OWVAR 65
18543: PUSH
18544: LD_INT 1
18546: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18547: LD_INT 35
18549: PPUSH
18550: CALL_OW 67
// p := p + 1 ;
18554: LD_ADDR_VAR 0 1
18558: PUSH
18559: LD_VAR 0 1
18563: PUSH
18564: LD_INT 1
18566: PLUS
18567: ST_TO_ADDR
// until p >= 60 ;
18568: LD_VAR 0 1
18572: PUSH
18573: LD_INT 60
18575: GREATEREQUAL
18576: IFFALSE 18539
// game_speed := 4 ;
18578: LD_ADDR_OWVAR 65
18582: PUSH
18583: LD_INT 4
18585: ST_TO_ADDR
// end ;
18586: PPOPN 1
18588: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18589: LD_EXP 43
18593: PUSH
18594: LD_EXP 70
18598: AND
18599: IFFALSE 18745
18601: GO 18603
18603: DISABLE
18604: LD_INT 0
18606: PPUSH
18607: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18608: LD_ADDR_VAR 0 1
18612: PUSH
18613: LD_INT 22
18615: PUSH
18616: LD_OWVAR 2
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 2
18627: PUSH
18628: LD_INT 30
18630: PUSH
18631: LD_INT 0
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 30
18640: PUSH
18641: LD_INT 1
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: LIST
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PPUSH
18657: CALL_OW 69
18661: ST_TO_ADDR
// if not depot then
18662: LD_VAR 0 1
18666: NOT
18667: IFFALSE 18671
// exit ;
18669: GO 18745
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18671: LD_ADDR_VAR 0 2
18675: PUSH
18676: LD_VAR 0 1
18680: PUSH
18681: LD_INT 1
18683: PPUSH
18684: LD_VAR 0 1
18688: PPUSH
18689: CALL_OW 12
18693: ARRAY
18694: PPUSH
18695: CALL_OW 274
18699: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18700: LD_VAR 0 2
18704: PPUSH
18705: LD_INT 1
18707: PPUSH
18708: LD_INT 0
18710: PPUSH
18711: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18715: LD_VAR 0 2
18719: PPUSH
18720: LD_INT 2
18722: PPUSH
18723: LD_INT 0
18725: PPUSH
18726: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18730: LD_VAR 0 2
18734: PPUSH
18735: LD_INT 3
18737: PPUSH
18738: LD_INT 0
18740: PPUSH
18741: CALL_OW 277
// end ;
18745: PPOPN 2
18747: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18748: LD_EXP 43
18752: PUSH
18753: LD_EXP 71
18757: AND
18758: IFFALSE 18855
18760: GO 18762
18762: DISABLE
18763: LD_INT 0
18765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18766: LD_ADDR_VAR 0 1
18770: PUSH
18771: LD_INT 22
18773: PUSH
18774: LD_OWVAR 2
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 21
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 3
18795: PUSH
18796: LD_INT 23
18798: PUSH
18799: LD_INT 0
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: LIST
18814: PPUSH
18815: CALL_OW 69
18819: ST_TO_ADDR
// if not tmp then
18820: LD_VAR 0 1
18824: NOT
18825: IFFALSE 18829
// exit ;
18827: GO 18855
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18829: LD_VAR 0 1
18833: PUSH
18834: LD_INT 1
18836: PPUSH
18837: LD_VAR 0 1
18841: PPUSH
18842: CALL_OW 12
18846: ARRAY
18847: PPUSH
18848: LD_INT 200
18850: PPUSH
18851: CALL_OW 234
// end ;
18855: PPOPN 1
18857: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18858: LD_EXP 43
18862: PUSH
18863: LD_EXP 72
18867: AND
18868: IFFALSE 18947
18870: GO 18872
18872: DISABLE
18873: LD_INT 0
18875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18876: LD_ADDR_VAR 0 1
18880: PUSH
18881: LD_INT 22
18883: PUSH
18884: LD_OWVAR 2
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 21
18895: PUSH
18896: LD_INT 2
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PPUSH
18907: CALL_OW 69
18911: ST_TO_ADDR
// if not tmp then
18912: LD_VAR 0 1
18916: NOT
18917: IFFALSE 18921
// exit ;
18919: GO 18947
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18921: LD_VAR 0 1
18925: PUSH
18926: LD_INT 1
18928: PPUSH
18929: LD_VAR 0 1
18933: PPUSH
18934: CALL_OW 12
18938: ARRAY
18939: PPUSH
18940: LD_INT 60
18942: PPUSH
18943: CALL_OW 234
// end ;
18947: PPOPN 1
18949: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18950: LD_EXP 43
18954: PUSH
18955: LD_EXP 73
18959: AND
18960: IFFALSE 19059
18962: GO 18964
18964: DISABLE
18965: LD_INT 0
18967: PPUSH
18968: PPUSH
// begin enable ;
18969: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18970: LD_ADDR_VAR 0 1
18974: PUSH
18975: LD_INT 22
18977: PUSH
18978: LD_OWVAR 2
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 61
18989: PUSH
18990: EMPTY
18991: LIST
18992: PUSH
18993: LD_INT 33
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: LIST
19007: PPUSH
19008: CALL_OW 69
19012: ST_TO_ADDR
// if not tmp then
19013: LD_VAR 0 1
19017: NOT
19018: IFFALSE 19022
// exit ;
19020: GO 19059
// for i in tmp do
19022: LD_ADDR_VAR 0 2
19026: PUSH
19027: LD_VAR 0 1
19031: PUSH
19032: FOR_IN
19033: IFFALSE 19057
// if IsControledBy ( i ) then
19035: LD_VAR 0 2
19039: PPUSH
19040: CALL_OW 312
19044: IFFALSE 19055
// ComUnlink ( i ) ;
19046: LD_VAR 0 2
19050: PPUSH
19051: CALL_OW 136
19055: GO 19032
19057: POP
19058: POP
// end ;
19059: PPOPN 2
19061: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19062: LD_EXP 43
19066: PUSH
19067: LD_EXP 74
19071: AND
19072: IFFALSE 19212
19074: GO 19076
19076: DISABLE
19077: LD_INT 0
19079: PPUSH
19080: PPUSH
// begin ToLua ( displayPowell(); ) ;
19081: LD_STRING displayPowell();
19083: PPUSH
19084: CALL_OW 559
// uc_side := 0 ;
19088: LD_ADDR_OWVAR 20
19092: PUSH
19093: LD_INT 0
19095: ST_TO_ADDR
// uc_nation := 2 ;
19096: LD_ADDR_OWVAR 21
19100: PUSH
19101: LD_INT 2
19103: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19104: LD_ADDR_OWVAR 37
19108: PUSH
19109: LD_INT 14
19111: ST_TO_ADDR
// vc_engine := engine_siberite ;
19112: LD_ADDR_OWVAR 39
19116: PUSH
19117: LD_INT 3
19119: ST_TO_ADDR
// vc_control := control_apeman ;
19120: LD_ADDR_OWVAR 38
19124: PUSH
19125: LD_INT 5
19127: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19128: LD_ADDR_OWVAR 40
19132: PUSH
19133: LD_INT 29
19135: ST_TO_ADDR
// un := CreateVehicle ;
19136: LD_ADDR_VAR 0 2
19140: PUSH
19141: CALL_OW 45
19145: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19146: LD_VAR 0 2
19150: PPUSH
19151: LD_INT 1
19153: PPUSH
19154: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19158: LD_INT 35
19160: PPUSH
19161: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19165: LD_VAR 0 2
19169: PPUSH
19170: LD_INT 22
19172: PUSH
19173: LD_OWVAR 2
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PPUSH
19182: CALL_OW 69
19186: PPUSH
19187: LD_VAR 0 2
19191: PPUSH
19192: CALL_OW 74
19196: PPUSH
19197: CALL_OW 115
// until IsDead ( un ) ;
19201: LD_VAR 0 2
19205: PPUSH
19206: CALL_OW 301
19210: IFFALSE 19158
// end ;
19212: PPOPN 2
19214: END
// every 0 0$1 trigger StreamModeActive and sStu do
19215: LD_EXP 43
19219: PUSH
19220: LD_EXP 82
19224: AND
19225: IFFALSE 19241
19227: GO 19229
19229: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19230: LD_STRING displayStucuk();
19232: PPUSH
19233: CALL_OW 559
// ResetFog ;
19237: CALL_OW 335
// end ;
19241: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19242: LD_EXP 43
19246: PUSH
19247: LD_EXP 75
19251: AND
19252: IFFALSE 19393
19254: GO 19256
19256: DISABLE
19257: LD_INT 0
19259: PPUSH
19260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19261: LD_ADDR_VAR 0 2
19265: PUSH
19266: LD_INT 22
19268: PUSH
19269: LD_OWVAR 2
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 21
19280: PUSH
19281: LD_INT 1
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PPUSH
19292: CALL_OW 69
19296: ST_TO_ADDR
// if not tmp then
19297: LD_VAR 0 2
19301: NOT
19302: IFFALSE 19306
// exit ;
19304: GO 19393
// un := tmp [ rand ( 1 , tmp ) ] ;
19306: LD_ADDR_VAR 0 1
19310: PUSH
19311: LD_VAR 0 2
19315: PUSH
19316: LD_INT 1
19318: PPUSH
19319: LD_VAR 0 2
19323: PPUSH
19324: CALL_OW 12
19328: ARRAY
19329: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19330: LD_VAR 0 1
19334: PPUSH
19335: LD_INT 0
19337: PPUSH
19338: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19342: LD_VAR 0 1
19346: PPUSH
19347: LD_OWVAR 3
19351: PUSH
19352: LD_VAR 0 1
19356: DIFF
19357: PPUSH
19358: LD_VAR 0 1
19362: PPUSH
19363: CALL_OW 74
19367: PPUSH
19368: CALL_OW 115
// wait ( 0 0$20 ) ;
19372: LD_INT 700
19374: PPUSH
19375: CALL_OW 67
// SetSide ( un , your_side ) ;
19379: LD_VAR 0 1
19383: PPUSH
19384: LD_OWVAR 2
19388: PPUSH
19389: CALL_OW 235
// end ;
19393: PPOPN 2
19395: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19396: LD_EXP 43
19400: PUSH
19401: LD_EXP 76
19405: AND
19406: IFFALSE 19512
19408: GO 19410
19410: DISABLE
19411: LD_INT 0
19413: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19414: LD_ADDR_VAR 0 1
19418: PUSH
19419: LD_INT 22
19421: PUSH
19422: LD_OWVAR 2
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 2
19433: PUSH
19434: LD_INT 30
19436: PUSH
19437: LD_INT 0
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 30
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: LIST
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PPUSH
19463: CALL_OW 69
19467: ST_TO_ADDR
// if not depot then
19468: LD_VAR 0 1
19472: NOT
19473: IFFALSE 19477
// exit ;
19475: GO 19512
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19477: LD_VAR 0 1
19481: PUSH
19482: LD_INT 1
19484: ARRAY
19485: PPUSH
19486: CALL_OW 250
19490: PPUSH
19491: LD_VAR 0 1
19495: PUSH
19496: LD_INT 1
19498: ARRAY
19499: PPUSH
19500: CALL_OW 251
19504: PPUSH
19505: LD_INT 70
19507: PPUSH
19508: CALL_OW 495
// end ;
19512: PPOPN 1
19514: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19515: LD_EXP 43
19519: PUSH
19520: LD_EXP 77
19524: AND
19525: IFFALSE 19736
19527: GO 19529
19529: DISABLE
19530: LD_INT 0
19532: PPUSH
19533: PPUSH
19534: PPUSH
19535: PPUSH
19536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19537: LD_ADDR_VAR 0 5
19541: PUSH
19542: LD_INT 22
19544: PUSH
19545: LD_OWVAR 2
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 21
19556: PUSH
19557: LD_INT 1
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PPUSH
19568: CALL_OW 69
19572: ST_TO_ADDR
// if not tmp then
19573: LD_VAR 0 5
19577: NOT
19578: IFFALSE 19582
// exit ;
19580: GO 19736
// for i in tmp do
19582: LD_ADDR_VAR 0 1
19586: PUSH
19587: LD_VAR 0 5
19591: PUSH
19592: FOR_IN
19593: IFFALSE 19734
// begin d := rand ( 0 , 5 ) ;
19595: LD_ADDR_VAR 0 4
19599: PUSH
19600: LD_INT 0
19602: PPUSH
19603: LD_INT 5
19605: PPUSH
19606: CALL_OW 12
19610: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19611: LD_ADDR_VAR 0 2
19615: PUSH
19616: LD_VAR 0 1
19620: PPUSH
19621: CALL_OW 250
19625: PPUSH
19626: LD_VAR 0 4
19630: PPUSH
19631: LD_INT 3
19633: PPUSH
19634: LD_INT 12
19636: PPUSH
19637: CALL_OW 12
19641: PPUSH
19642: CALL_OW 272
19646: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19647: LD_ADDR_VAR 0 3
19651: PUSH
19652: LD_VAR 0 1
19656: PPUSH
19657: CALL_OW 251
19661: PPUSH
19662: LD_VAR 0 4
19666: PPUSH
19667: LD_INT 3
19669: PPUSH
19670: LD_INT 12
19672: PPUSH
19673: CALL_OW 12
19677: PPUSH
19678: CALL_OW 273
19682: ST_TO_ADDR
// if ValidHex ( x , y ) then
19683: LD_VAR 0 2
19687: PPUSH
19688: LD_VAR 0 3
19692: PPUSH
19693: CALL_OW 488
19697: IFFALSE 19732
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19699: LD_VAR 0 1
19703: PPUSH
19704: LD_VAR 0 2
19708: PPUSH
19709: LD_VAR 0 3
19713: PPUSH
19714: LD_INT 3
19716: PPUSH
19717: LD_INT 6
19719: PPUSH
19720: CALL_OW 12
19724: PPUSH
19725: LD_INT 1
19727: PPUSH
19728: CALL_OW 483
// end ;
19732: GO 19592
19734: POP
19735: POP
// end ;
19736: PPOPN 5
19738: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19739: LD_EXP 43
19743: PUSH
19744: LD_EXP 78
19748: AND
19749: IFFALSE 19843
19751: GO 19753
19753: DISABLE
19754: LD_INT 0
19756: PPUSH
19757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19758: LD_ADDR_VAR 0 2
19762: PUSH
19763: LD_INT 22
19765: PUSH
19766: LD_OWVAR 2
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 32
19777: PUSH
19778: LD_INT 1
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 21
19787: PUSH
19788: LD_INT 2
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: LIST
19799: PPUSH
19800: CALL_OW 69
19804: ST_TO_ADDR
// if not tmp then
19805: LD_VAR 0 2
19809: NOT
19810: IFFALSE 19814
// exit ;
19812: GO 19843
// for i in tmp do
19814: LD_ADDR_VAR 0 1
19818: PUSH
19819: LD_VAR 0 2
19823: PUSH
19824: FOR_IN
19825: IFFALSE 19841
// SetFuel ( i , 0 ) ;
19827: LD_VAR 0 1
19831: PPUSH
19832: LD_INT 0
19834: PPUSH
19835: CALL_OW 240
19839: GO 19824
19841: POP
19842: POP
// end ;
19843: PPOPN 2
19845: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19846: LD_EXP 43
19850: PUSH
19851: LD_EXP 79
19855: AND
19856: IFFALSE 19922
19858: GO 19860
19860: DISABLE
19861: LD_INT 0
19863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19864: LD_ADDR_VAR 0 1
19868: PUSH
19869: LD_INT 22
19871: PUSH
19872: LD_OWVAR 2
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 30
19883: PUSH
19884: LD_INT 29
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PPUSH
19895: CALL_OW 69
19899: ST_TO_ADDR
// if not tmp then
19900: LD_VAR 0 1
19904: NOT
19905: IFFALSE 19909
// exit ;
19907: GO 19922
// DestroyUnit ( tmp [ 1 ] ) ;
19909: LD_VAR 0 1
19913: PUSH
19914: LD_INT 1
19916: ARRAY
19917: PPUSH
19918: CALL_OW 65
// end ;
19922: PPOPN 1
19924: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19925: LD_EXP 43
19929: PUSH
19930: LD_EXP 81
19934: AND
19935: IFFALSE 20064
19937: GO 19939
19939: DISABLE
19940: LD_INT 0
19942: PPUSH
// begin uc_side := 0 ;
19943: LD_ADDR_OWVAR 20
19947: PUSH
19948: LD_INT 0
19950: ST_TO_ADDR
// uc_nation := nation_arabian ;
19951: LD_ADDR_OWVAR 21
19955: PUSH
19956: LD_INT 2
19958: ST_TO_ADDR
// hc_gallery :=  ;
19959: LD_ADDR_OWVAR 33
19963: PUSH
19964: LD_STRING 
19966: ST_TO_ADDR
// hc_name :=  ;
19967: LD_ADDR_OWVAR 26
19971: PUSH
19972: LD_STRING 
19974: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19975: LD_INT 1
19977: PPUSH
19978: LD_INT 11
19980: PPUSH
19981: LD_INT 10
19983: PPUSH
19984: CALL_OW 380
// un := CreateHuman ;
19988: LD_ADDR_VAR 0 1
19992: PUSH
19993: CALL_OW 44
19997: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19998: LD_VAR 0 1
20002: PPUSH
20003: LD_INT 1
20005: PPUSH
20006: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20010: LD_INT 35
20012: PPUSH
20013: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20017: LD_VAR 0 1
20021: PPUSH
20022: LD_INT 22
20024: PUSH
20025: LD_OWVAR 2
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PPUSH
20034: CALL_OW 69
20038: PPUSH
20039: LD_VAR 0 1
20043: PPUSH
20044: CALL_OW 74
20048: PPUSH
20049: CALL_OW 115
// until IsDead ( un ) ;
20053: LD_VAR 0 1
20057: PPUSH
20058: CALL_OW 301
20062: IFFALSE 20010
// end ;
20064: PPOPN 1
20066: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20067: LD_EXP 43
20071: PUSH
20072: LD_EXP 83
20076: AND
20077: IFFALSE 20089
20079: GO 20081
20081: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20082: LD_STRING earthquake(getX(game), 0, 32)
20084: PPUSH
20085: CALL_OW 559
20089: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20090: LD_EXP 43
20094: PUSH
20095: LD_EXP 84
20099: AND
20100: IFFALSE 20191
20102: GO 20104
20104: DISABLE
20105: LD_INT 0
20107: PPUSH
// begin enable ;
20108: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20109: LD_ADDR_VAR 0 1
20113: PUSH
20114: LD_INT 22
20116: PUSH
20117: LD_OWVAR 2
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 21
20128: PUSH
20129: LD_INT 2
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 33
20138: PUSH
20139: LD_INT 3
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: PPUSH
20151: CALL_OW 69
20155: ST_TO_ADDR
// if not tmp then
20156: LD_VAR 0 1
20160: NOT
20161: IFFALSE 20165
// exit ;
20163: GO 20191
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20165: LD_VAR 0 1
20169: PUSH
20170: LD_INT 1
20172: PPUSH
20173: LD_VAR 0 1
20177: PPUSH
20178: CALL_OW 12
20182: ARRAY
20183: PPUSH
20184: LD_INT 1
20186: PPUSH
20187: CALL_OW 234
// end ;
20191: PPOPN 1
20193: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20194: LD_EXP 43
20198: PUSH
20199: LD_EXP 85
20203: AND
20204: IFFALSE 20345
20206: GO 20208
20208: DISABLE
20209: LD_INT 0
20211: PPUSH
20212: PPUSH
20213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20214: LD_ADDR_VAR 0 3
20218: PUSH
20219: LD_INT 22
20221: PUSH
20222: LD_OWVAR 2
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 25
20233: PUSH
20234: LD_INT 1
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PPUSH
20245: CALL_OW 69
20249: ST_TO_ADDR
// if not tmp then
20250: LD_VAR 0 3
20254: NOT
20255: IFFALSE 20259
// exit ;
20257: GO 20345
// un := tmp [ rand ( 1 , tmp ) ] ;
20259: LD_ADDR_VAR 0 2
20263: PUSH
20264: LD_VAR 0 3
20268: PUSH
20269: LD_INT 1
20271: PPUSH
20272: LD_VAR 0 3
20276: PPUSH
20277: CALL_OW 12
20281: ARRAY
20282: ST_TO_ADDR
// if Crawls ( un ) then
20283: LD_VAR 0 2
20287: PPUSH
20288: CALL_OW 318
20292: IFFALSE 20303
// ComWalk ( un ) ;
20294: LD_VAR 0 2
20298: PPUSH
20299: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20303: LD_VAR 0 2
20307: PPUSH
20308: LD_INT 9
20310: PPUSH
20311: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20315: LD_INT 28
20317: PPUSH
20318: LD_OWVAR 2
20322: PPUSH
20323: LD_INT 2
20325: PPUSH
20326: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20330: LD_INT 29
20332: PPUSH
20333: LD_OWVAR 2
20337: PPUSH
20338: LD_INT 2
20340: PPUSH
20341: CALL_OW 322
// end ;
20345: PPOPN 3
20347: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20348: LD_EXP 43
20352: PUSH
20353: LD_EXP 86
20357: AND
20358: IFFALSE 20469
20360: GO 20362
20362: DISABLE
20363: LD_INT 0
20365: PPUSH
20366: PPUSH
20367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20368: LD_ADDR_VAR 0 3
20372: PUSH
20373: LD_INT 22
20375: PUSH
20376: LD_OWVAR 2
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 25
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PPUSH
20399: CALL_OW 69
20403: ST_TO_ADDR
// if not tmp then
20404: LD_VAR 0 3
20408: NOT
20409: IFFALSE 20413
// exit ;
20411: GO 20469
// un := tmp [ rand ( 1 , tmp ) ] ;
20413: LD_ADDR_VAR 0 2
20417: PUSH
20418: LD_VAR 0 3
20422: PUSH
20423: LD_INT 1
20425: PPUSH
20426: LD_VAR 0 3
20430: PPUSH
20431: CALL_OW 12
20435: ARRAY
20436: ST_TO_ADDR
// if Crawls ( un ) then
20437: LD_VAR 0 2
20441: PPUSH
20442: CALL_OW 318
20446: IFFALSE 20457
// ComWalk ( un ) ;
20448: LD_VAR 0 2
20452: PPUSH
20453: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20457: LD_VAR 0 2
20461: PPUSH
20462: LD_INT 8
20464: PPUSH
20465: CALL_OW 336
// end ;
20469: PPOPN 3
20471: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20472: LD_EXP 43
20476: PUSH
20477: LD_EXP 87
20481: AND
20482: IFFALSE 20626
20484: GO 20486
20486: DISABLE
20487: LD_INT 0
20489: PPUSH
20490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20491: LD_ADDR_VAR 0 2
20495: PUSH
20496: LD_INT 22
20498: PUSH
20499: LD_OWVAR 2
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 21
20510: PUSH
20511: LD_INT 2
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 2
20520: PUSH
20521: LD_INT 34
20523: PUSH
20524: LD_INT 12
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 34
20533: PUSH
20534: LD_INT 51
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 34
20543: PUSH
20544: LD_INT 32
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: LIST
20561: PPUSH
20562: CALL_OW 69
20566: ST_TO_ADDR
// if not tmp then
20567: LD_VAR 0 2
20571: NOT
20572: IFFALSE 20576
// exit ;
20574: GO 20626
// for i in tmp do
20576: LD_ADDR_VAR 0 1
20580: PUSH
20581: LD_VAR 0 2
20585: PUSH
20586: FOR_IN
20587: IFFALSE 20624
// if GetCargo ( i , mat_artifact ) = 0 then
20589: LD_VAR 0 1
20593: PPUSH
20594: LD_INT 4
20596: PPUSH
20597: CALL_OW 289
20601: PUSH
20602: LD_INT 0
20604: EQUAL
20605: IFFALSE 20622
// SetCargo ( i , mat_siberit , 100 ) ;
20607: LD_VAR 0 1
20611: PPUSH
20612: LD_INT 3
20614: PPUSH
20615: LD_INT 100
20617: PPUSH
20618: CALL_OW 290
20622: GO 20586
20624: POP
20625: POP
// end ;
20626: PPOPN 2
20628: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20629: LD_EXP 43
20633: PUSH
20634: LD_EXP 88
20638: AND
20639: IFFALSE 20822
20641: GO 20643
20643: DISABLE
20644: LD_INT 0
20646: PPUSH
20647: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20648: LD_ADDR_VAR 0 2
20652: PUSH
20653: LD_INT 22
20655: PUSH
20656: LD_OWVAR 2
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PPUSH
20665: CALL_OW 69
20669: ST_TO_ADDR
// if not tmp then
20670: LD_VAR 0 2
20674: NOT
20675: IFFALSE 20679
// exit ;
20677: GO 20822
// for i := 1 to 2 do
20679: LD_ADDR_VAR 0 1
20683: PUSH
20684: DOUBLE
20685: LD_INT 1
20687: DEC
20688: ST_TO_ADDR
20689: LD_INT 2
20691: PUSH
20692: FOR_TO
20693: IFFALSE 20820
// begin uc_side := your_side ;
20695: LD_ADDR_OWVAR 20
20699: PUSH
20700: LD_OWVAR 2
20704: ST_TO_ADDR
// uc_nation := nation_american ;
20705: LD_ADDR_OWVAR 21
20709: PUSH
20710: LD_INT 1
20712: ST_TO_ADDR
// vc_chassis := us_morphling ;
20713: LD_ADDR_OWVAR 37
20717: PUSH
20718: LD_INT 5
20720: ST_TO_ADDR
// vc_engine := engine_siberite ;
20721: LD_ADDR_OWVAR 39
20725: PUSH
20726: LD_INT 3
20728: ST_TO_ADDR
// vc_control := control_computer ;
20729: LD_ADDR_OWVAR 38
20733: PUSH
20734: LD_INT 3
20736: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20737: LD_ADDR_OWVAR 40
20741: PUSH
20742: LD_INT 10
20744: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20745: LD_VAR 0 2
20749: PUSH
20750: LD_INT 1
20752: ARRAY
20753: PPUSH
20754: CALL_OW 310
20758: NOT
20759: IFFALSE 20806
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20761: CALL_OW 45
20765: PPUSH
20766: LD_VAR 0 2
20770: PUSH
20771: LD_INT 1
20773: ARRAY
20774: PPUSH
20775: CALL_OW 250
20779: PPUSH
20780: LD_VAR 0 2
20784: PUSH
20785: LD_INT 1
20787: ARRAY
20788: PPUSH
20789: CALL_OW 251
20793: PPUSH
20794: LD_INT 12
20796: PPUSH
20797: LD_INT 1
20799: PPUSH
20800: CALL_OW 50
20804: GO 20818
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20806: CALL_OW 45
20810: PPUSH
20811: LD_INT 1
20813: PPUSH
20814: CALL_OW 51
// end ;
20818: GO 20692
20820: POP
20821: POP
// end ;
20822: PPOPN 2
20824: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20825: LD_EXP 43
20829: PUSH
20830: LD_EXP 89
20834: AND
20835: IFFALSE 21057
20837: GO 20839
20839: DISABLE
20840: LD_INT 0
20842: PPUSH
20843: PPUSH
20844: PPUSH
20845: PPUSH
20846: PPUSH
20847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20848: LD_ADDR_VAR 0 6
20852: PUSH
20853: LD_INT 22
20855: PUSH
20856: LD_OWVAR 2
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 21
20867: PUSH
20868: LD_INT 1
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 3
20877: PUSH
20878: LD_INT 23
20880: PUSH
20881: LD_INT 0
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: LIST
20896: PPUSH
20897: CALL_OW 69
20901: ST_TO_ADDR
// if not tmp then
20902: LD_VAR 0 6
20906: NOT
20907: IFFALSE 20911
// exit ;
20909: GO 21057
// s1 := rand ( 1 , 4 ) ;
20911: LD_ADDR_VAR 0 2
20915: PUSH
20916: LD_INT 1
20918: PPUSH
20919: LD_INT 4
20921: PPUSH
20922: CALL_OW 12
20926: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20927: LD_ADDR_VAR 0 4
20931: PUSH
20932: LD_VAR 0 6
20936: PUSH
20937: LD_INT 1
20939: ARRAY
20940: PPUSH
20941: LD_VAR 0 2
20945: PPUSH
20946: CALL_OW 259
20950: ST_TO_ADDR
// if s1 = 1 then
20951: LD_VAR 0 2
20955: PUSH
20956: LD_INT 1
20958: EQUAL
20959: IFFALSE 20979
// s2 := rand ( 2 , 4 ) else
20961: LD_ADDR_VAR 0 3
20965: PUSH
20966: LD_INT 2
20968: PPUSH
20969: LD_INT 4
20971: PPUSH
20972: CALL_OW 12
20976: ST_TO_ADDR
20977: GO 20987
// s2 := 1 ;
20979: LD_ADDR_VAR 0 3
20983: PUSH
20984: LD_INT 1
20986: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20987: LD_ADDR_VAR 0 5
20991: PUSH
20992: LD_VAR 0 6
20996: PUSH
20997: LD_INT 1
20999: ARRAY
21000: PPUSH
21001: LD_VAR 0 3
21005: PPUSH
21006: CALL_OW 259
21010: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21011: LD_VAR 0 6
21015: PUSH
21016: LD_INT 1
21018: ARRAY
21019: PPUSH
21020: LD_VAR 0 2
21024: PPUSH
21025: LD_VAR 0 5
21029: PPUSH
21030: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21034: LD_VAR 0 6
21038: PUSH
21039: LD_INT 1
21041: ARRAY
21042: PPUSH
21043: LD_VAR 0 3
21047: PPUSH
21048: LD_VAR 0 4
21052: PPUSH
21053: CALL_OW 237
// end ;
21057: PPOPN 6
21059: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21060: LD_EXP 43
21064: PUSH
21065: LD_EXP 90
21069: AND
21070: IFFALSE 21149
21072: GO 21074
21074: DISABLE
21075: LD_INT 0
21077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21078: LD_ADDR_VAR 0 1
21082: PUSH
21083: LD_INT 22
21085: PUSH
21086: LD_OWVAR 2
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 30
21097: PUSH
21098: LD_INT 3
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PPUSH
21109: CALL_OW 69
21113: ST_TO_ADDR
// if not tmp then
21114: LD_VAR 0 1
21118: NOT
21119: IFFALSE 21123
// exit ;
21121: GO 21149
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21123: LD_VAR 0 1
21127: PUSH
21128: LD_INT 1
21130: PPUSH
21131: LD_VAR 0 1
21135: PPUSH
21136: CALL_OW 12
21140: ARRAY
21141: PPUSH
21142: LD_INT 1
21144: PPUSH
21145: CALL_OW 234
// end ;
21149: PPOPN 1
21151: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21152: LD_EXP 43
21156: PUSH
21157: LD_EXP 91
21161: AND
21162: IFFALSE 21274
21164: GO 21166
21166: DISABLE
21167: LD_INT 0
21169: PPUSH
21170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21171: LD_ADDR_VAR 0 2
21175: PUSH
21176: LD_INT 22
21178: PUSH
21179: LD_OWVAR 2
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 2
21190: PUSH
21191: LD_INT 30
21193: PUSH
21194: LD_INT 27
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 30
21203: PUSH
21204: LD_INT 26
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 30
21213: PUSH
21214: LD_INT 28
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PPUSH
21231: CALL_OW 69
21235: ST_TO_ADDR
// if not tmp then
21236: LD_VAR 0 2
21240: NOT
21241: IFFALSE 21245
// exit ;
21243: GO 21274
// for i in tmp do
21245: LD_ADDR_VAR 0 1
21249: PUSH
21250: LD_VAR 0 2
21254: PUSH
21255: FOR_IN
21256: IFFALSE 21272
// SetLives ( i , 1 ) ;
21258: LD_VAR 0 1
21262: PPUSH
21263: LD_INT 1
21265: PPUSH
21266: CALL_OW 234
21270: GO 21255
21272: POP
21273: POP
// end ;
21274: PPOPN 2
21276: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21277: LD_EXP 43
21281: PUSH
21282: LD_EXP 92
21286: AND
21287: IFFALSE 21574
21289: GO 21291
21291: DISABLE
21292: LD_INT 0
21294: PPUSH
21295: PPUSH
21296: PPUSH
// begin i := rand ( 1 , 7 ) ;
21297: LD_ADDR_VAR 0 1
21301: PUSH
21302: LD_INT 1
21304: PPUSH
21305: LD_INT 7
21307: PPUSH
21308: CALL_OW 12
21312: ST_TO_ADDR
// case i of 1 :
21313: LD_VAR 0 1
21317: PUSH
21318: LD_INT 1
21320: DOUBLE
21321: EQUAL
21322: IFTRUE 21326
21324: GO 21336
21326: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21327: LD_STRING earthquake(getX(game), 0, 32)
21329: PPUSH
21330: CALL_OW 559
21334: GO 21574
21336: LD_INT 2
21338: DOUBLE
21339: EQUAL
21340: IFTRUE 21344
21342: GO 21358
21344: POP
// begin ToLua ( displayStucuk(); ) ;
21345: LD_STRING displayStucuk();
21347: PPUSH
21348: CALL_OW 559
// ResetFog ;
21352: CALL_OW 335
// end ; 3 :
21356: GO 21574
21358: LD_INT 3
21360: DOUBLE
21361: EQUAL
21362: IFTRUE 21366
21364: GO 21470
21366: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21367: LD_ADDR_VAR 0 2
21371: PUSH
21372: LD_INT 22
21374: PUSH
21375: LD_OWVAR 2
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 25
21386: PUSH
21387: LD_INT 1
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PPUSH
21398: CALL_OW 69
21402: ST_TO_ADDR
// if not tmp then
21403: LD_VAR 0 2
21407: NOT
21408: IFFALSE 21412
// exit ;
21410: GO 21574
// un := tmp [ rand ( 1 , tmp ) ] ;
21412: LD_ADDR_VAR 0 3
21416: PUSH
21417: LD_VAR 0 2
21421: PUSH
21422: LD_INT 1
21424: PPUSH
21425: LD_VAR 0 2
21429: PPUSH
21430: CALL_OW 12
21434: ARRAY
21435: ST_TO_ADDR
// if Crawls ( un ) then
21436: LD_VAR 0 3
21440: PPUSH
21441: CALL_OW 318
21445: IFFALSE 21456
// ComWalk ( un ) ;
21447: LD_VAR 0 3
21451: PPUSH
21452: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21456: LD_VAR 0 3
21460: PPUSH
21461: LD_INT 8
21463: PPUSH
21464: CALL_OW 336
// end ; 4 :
21468: GO 21574
21470: LD_INT 4
21472: DOUBLE
21473: EQUAL
21474: IFTRUE 21478
21476: GO 21552
21478: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21479: LD_ADDR_VAR 0 2
21483: PUSH
21484: LD_INT 22
21486: PUSH
21487: LD_OWVAR 2
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 30
21498: PUSH
21499: LD_INT 29
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PPUSH
21510: CALL_OW 69
21514: ST_TO_ADDR
// if not tmp then
21515: LD_VAR 0 2
21519: NOT
21520: IFFALSE 21524
// exit ;
21522: GO 21574
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21524: LD_VAR 0 2
21528: PUSH
21529: LD_INT 1
21531: ARRAY
21532: PPUSH
21533: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21537: LD_VAR 0 2
21541: PUSH
21542: LD_INT 1
21544: ARRAY
21545: PPUSH
21546: CALL_OW 65
// end ; 5 .. 7 :
21550: GO 21574
21552: LD_INT 5
21554: DOUBLE
21555: GREATEREQUAL
21556: IFFALSE 21564
21558: LD_INT 7
21560: DOUBLE
21561: LESSEQUAL
21562: IFTRUE 21566
21564: GO 21573
21566: POP
// StreamSibBomb ; end ;
21567: CALL 17811 0 0
21571: GO 21574
21573: POP
// end ;
21574: PPOPN 3
21576: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21577: LD_EXP 43
21581: PUSH
21582: LD_EXP 93
21586: AND
21587: IFFALSE 21743
21589: GO 21591
21591: DISABLE
21592: LD_INT 0
21594: PPUSH
21595: PPUSH
21596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21597: LD_ADDR_VAR 0 2
21601: PUSH
21602: LD_INT 81
21604: PUSH
21605: LD_OWVAR 2
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 2
21616: PUSH
21617: LD_INT 21
21619: PUSH
21620: LD_INT 1
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 21
21629: PUSH
21630: LD_INT 2
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PPUSH
21646: CALL_OW 69
21650: ST_TO_ADDR
// if not tmp then
21651: LD_VAR 0 2
21655: NOT
21656: IFFALSE 21660
// exit ;
21658: GO 21743
// p := 0 ;
21660: LD_ADDR_VAR 0 3
21664: PUSH
21665: LD_INT 0
21667: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21668: LD_INT 35
21670: PPUSH
21671: CALL_OW 67
// p := p + 1 ;
21675: LD_ADDR_VAR 0 3
21679: PUSH
21680: LD_VAR 0 3
21684: PUSH
21685: LD_INT 1
21687: PLUS
21688: ST_TO_ADDR
// for i in tmp do
21689: LD_ADDR_VAR 0 1
21693: PUSH
21694: LD_VAR 0 2
21698: PUSH
21699: FOR_IN
21700: IFFALSE 21731
// if GetLives ( i ) < 1000 then
21702: LD_VAR 0 1
21706: PPUSH
21707: CALL_OW 256
21711: PUSH
21712: LD_INT 1000
21714: LESS
21715: IFFALSE 21729
// SetLives ( i , 1000 ) ;
21717: LD_VAR 0 1
21721: PPUSH
21722: LD_INT 1000
21724: PPUSH
21725: CALL_OW 234
21729: GO 21699
21731: POP
21732: POP
// until p > 20 ;
21733: LD_VAR 0 3
21737: PUSH
21738: LD_INT 20
21740: GREATER
21741: IFFALSE 21668
// end ;
21743: PPOPN 3
21745: END
// every 0 0$1 trigger StreamModeActive and sTime do
21746: LD_EXP 43
21750: PUSH
21751: LD_EXP 94
21755: AND
21756: IFFALSE 21791
21758: GO 21760
21760: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21761: LD_INT 28
21763: PPUSH
21764: LD_OWVAR 2
21768: PPUSH
21769: LD_INT 2
21771: PPUSH
21772: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21776: LD_INT 30
21778: PPUSH
21779: LD_OWVAR 2
21783: PPUSH
21784: LD_INT 2
21786: PPUSH
21787: CALL_OW 322
// end ;
21791: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21792: LD_EXP 43
21796: PUSH
21797: LD_EXP 95
21801: AND
21802: IFFALSE 21923
21804: GO 21806
21806: DISABLE
21807: LD_INT 0
21809: PPUSH
21810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21811: LD_ADDR_VAR 0 2
21815: PUSH
21816: LD_INT 22
21818: PUSH
21819: LD_OWVAR 2
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 21
21830: PUSH
21831: LD_INT 1
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 3
21840: PUSH
21841: LD_INT 23
21843: PUSH
21844: LD_INT 0
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: LIST
21859: PPUSH
21860: CALL_OW 69
21864: ST_TO_ADDR
// if not tmp then
21865: LD_VAR 0 2
21869: NOT
21870: IFFALSE 21874
// exit ;
21872: GO 21923
// for i in tmp do
21874: LD_ADDR_VAR 0 1
21878: PUSH
21879: LD_VAR 0 2
21883: PUSH
21884: FOR_IN
21885: IFFALSE 21921
// begin if Crawls ( i ) then
21887: LD_VAR 0 1
21891: PPUSH
21892: CALL_OW 318
21896: IFFALSE 21907
// ComWalk ( i ) ;
21898: LD_VAR 0 1
21902: PPUSH
21903: CALL_OW 138
// SetClass ( i , 2 ) ;
21907: LD_VAR 0 1
21911: PPUSH
21912: LD_INT 2
21914: PPUSH
21915: CALL_OW 336
// end ;
21919: GO 21884
21921: POP
21922: POP
// end ;
21923: PPOPN 2
21925: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21926: LD_EXP 43
21930: PUSH
21931: LD_EXP 96
21935: AND
21936: IFFALSE 22224
21938: GO 21940
21940: DISABLE
21941: LD_INT 0
21943: PPUSH
21944: PPUSH
21945: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21946: LD_OWVAR 2
21950: PPUSH
21951: LD_INT 9
21953: PPUSH
21954: LD_INT 1
21956: PPUSH
21957: LD_INT 1
21959: PPUSH
21960: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21964: LD_INT 9
21966: PPUSH
21967: LD_OWVAR 2
21971: PPUSH
21972: CALL_OW 343
// uc_side := 9 ;
21976: LD_ADDR_OWVAR 20
21980: PUSH
21981: LD_INT 9
21983: ST_TO_ADDR
// uc_nation := 2 ;
21984: LD_ADDR_OWVAR 21
21988: PUSH
21989: LD_INT 2
21991: ST_TO_ADDR
// hc_name := Dark Warrior ;
21992: LD_ADDR_OWVAR 26
21996: PUSH
21997: LD_STRING Dark Warrior
21999: ST_TO_ADDR
// hc_gallery :=  ;
22000: LD_ADDR_OWVAR 33
22004: PUSH
22005: LD_STRING 
22007: ST_TO_ADDR
// hc_noskilllimit := true ;
22008: LD_ADDR_OWVAR 76
22012: PUSH
22013: LD_INT 1
22015: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22016: LD_ADDR_OWVAR 31
22020: PUSH
22021: LD_INT 30
22023: PUSH
22024: LD_INT 30
22026: PUSH
22027: LD_INT 30
22029: PUSH
22030: LD_INT 30
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: ST_TO_ADDR
// un := CreateHuman ;
22039: LD_ADDR_VAR 0 3
22043: PUSH
22044: CALL_OW 44
22048: ST_TO_ADDR
// hc_noskilllimit := false ;
22049: LD_ADDR_OWVAR 76
22053: PUSH
22054: LD_INT 0
22056: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22057: LD_VAR 0 3
22061: PPUSH
22062: LD_INT 1
22064: PPUSH
22065: CALL_OW 51
// ToLua ( playRanger() ) ;
22069: LD_STRING playRanger()
22071: PPUSH
22072: CALL_OW 559
// p := 0 ;
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: LD_INT 0
22083: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22084: LD_INT 35
22086: PPUSH
22087: CALL_OW 67
// p := p + 1 ;
22091: LD_ADDR_VAR 0 2
22095: PUSH
22096: LD_VAR 0 2
22100: PUSH
22101: LD_INT 1
22103: PLUS
22104: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22105: LD_VAR 0 3
22109: PPUSH
22110: CALL_OW 256
22114: PUSH
22115: LD_INT 1000
22117: LESS
22118: IFFALSE 22132
// SetLives ( un , 1000 ) ;
22120: LD_VAR 0 3
22124: PPUSH
22125: LD_INT 1000
22127: PPUSH
22128: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22132: LD_VAR 0 3
22136: PPUSH
22137: LD_INT 81
22139: PUSH
22140: LD_OWVAR 2
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 91
22151: PUSH
22152: LD_VAR 0 3
22156: PUSH
22157: LD_INT 30
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: LIST
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PPUSH
22169: CALL_OW 69
22173: PPUSH
22174: LD_VAR 0 3
22178: PPUSH
22179: CALL_OW 74
22183: PPUSH
22184: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22188: LD_VAR 0 2
22192: PUSH
22193: LD_INT 80
22195: GREATER
22196: PUSH
22197: LD_VAR 0 3
22201: PPUSH
22202: CALL_OW 301
22206: OR
22207: IFFALSE 22084
// if un then
22209: LD_VAR 0 3
22213: IFFALSE 22224
// RemoveUnit ( un ) ;
22215: LD_VAR 0 3
22219: PPUSH
22220: CALL_OW 64
// end ;
22224: PPOPN 3
22226: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22227: LD_EXP 97
22231: IFFALSE 22347
22233: GO 22235
22235: DISABLE
22236: LD_INT 0
22238: PPUSH
22239: PPUSH
22240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22241: LD_ADDR_VAR 0 2
22245: PUSH
22246: LD_INT 81
22248: PUSH
22249: LD_OWVAR 2
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 21
22260: PUSH
22261: LD_INT 1
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PPUSH
22272: CALL_OW 69
22276: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22277: LD_STRING playComputer()
22279: PPUSH
22280: CALL_OW 559
// if not tmp then
22284: LD_VAR 0 2
22288: NOT
22289: IFFALSE 22293
// exit ;
22291: GO 22347
// for i in tmp do
22293: LD_ADDR_VAR 0 1
22297: PUSH
22298: LD_VAR 0 2
22302: PUSH
22303: FOR_IN
22304: IFFALSE 22345
// for j := 1 to 4 do
22306: LD_ADDR_VAR 0 3
22310: PUSH
22311: DOUBLE
22312: LD_INT 1
22314: DEC
22315: ST_TO_ADDR
22316: LD_INT 4
22318: PUSH
22319: FOR_TO
22320: IFFALSE 22341
// SetSkill ( i , j , 10 ) ;
22322: LD_VAR 0 1
22326: PPUSH
22327: LD_VAR 0 3
22331: PPUSH
22332: LD_INT 10
22334: PPUSH
22335: CALL_OW 237
22339: GO 22319
22341: POP
22342: POP
22343: GO 22303
22345: POP
22346: POP
// end ;
22347: PPOPN 3
22349: END
// every 0 0$1 trigger s30 do var i , tmp ;
22350: LD_EXP 98
22354: IFFALSE 22423
22356: GO 22358
22358: DISABLE
22359: LD_INT 0
22361: PPUSH
22362: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22363: LD_ADDR_VAR 0 2
22367: PUSH
22368: LD_INT 22
22370: PUSH
22371: LD_OWVAR 2
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PPUSH
22380: CALL_OW 69
22384: ST_TO_ADDR
// if not tmp then
22385: LD_VAR 0 2
22389: NOT
22390: IFFALSE 22394
// exit ;
22392: GO 22423
// for i in tmp do
22394: LD_ADDR_VAR 0 1
22398: PUSH
22399: LD_VAR 0 2
22403: PUSH
22404: FOR_IN
22405: IFFALSE 22421
// SetLives ( i , 300 ) ;
22407: LD_VAR 0 1
22411: PPUSH
22412: LD_INT 300
22414: PPUSH
22415: CALL_OW 234
22419: GO 22404
22421: POP
22422: POP
// end ;
22423: PPOPN 2
22425: END
// every 0 0$1 trigger s60 do var i , tmp ;
22426: LD_EXP 99
22430: IFFALSE 22499
22432: GO 22434
22434: DISABLE
22435: LD_INT 0
22437: PPUSH
22438: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22439: LD_ADDR_VAR 0 2
22443: PUSH
22444: LD_INT 22
22446: PUSH
22447: LD_OWVAR 2
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PPUSH
22456: CALL_OW 69
22460: ST_TO_ADDR
// if not tmp then
22461: LD_VAR 0 2
22465: NOT
22466: IFFALSE 22470
// exit ;
22468: GO 22499
// for i in tmp do
22470: LD_ADDR_VAR 0 1
22474: PUSH
22475: LD_VAR 0 2
22479: PUSH
22480: FOR_IN
22481: IFFALSE 22497
// SetLives ( i , 600 ) ;
22483: LD_VAR 0 1
22487: PPUSH
22488: LD_INT 600
22490: PPUSH
22491: CALL_OW 234
22495: GO 22480
22497: POP
22498: POP
// end ;
22499: PPOPN 2
22501: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22502: LD_INT 0
22504: PPUSH
// case cmd of 301 :
22505: LD_VAR 0 1
22509: PUSH
22510: LD_INT 301
22512: DOUBLE
22513: EQUAL
22514: IFTRUE 22518
22516: GO 22550
22518: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22519: LD_VAR 0 6
22523: PPUSH
22524: LD_VAR 0 7
22528: PPUSH
22529: LD_VAR 0 8
22533: PPUSH
22534: LD_VAR 0 4
22538: PPUSH
22539: LD_VAR 0 5
22543: PPUSH
22544: CALL 23751 0 5
22548: GO 22671
22550: LD_INT 302
22552: DOUBLE
22553: EQUAL
22554: IFTRUE 22558
22556: GO 22595
22558: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22559: LD_VAR 0 6
22563: PPUSH
22564: LD_VAR 0 7
22568: PPUSH
22569: LD_VAR 0 8
22573: PPUSH
22574: LD_VAR 0 9
22578: PPUSH
22579: LD_VAR 0 4
22583: PPUSH
22584: LD_VAR 0 5
22588: PPUSH
22589: CALL 23842 0 6
22593: GO 22671
22595: LD_INT 303
22597: DOUBLE
22598: EQUAL
22599: IFTRUE 22603
22601: GO 22640
22603: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22604: LD_VAR 0 6
22608: PPUSH
22609: LD_VAR 0 7
22613: PPUSH
22614: LD_VAR 0 8
22618: PPUSH
22619: LD_VAR 0 9
22623: PPUSH
22624: LD_VAR 0 4
22628: PPUSH
22629: LD_VAR 0 5
22633: PPUSH
22634: CALL 22676 0 6
22638: GO 22671
22640: LD_INT 304
22642: DOUBLE
22643: EQUAL
22644: IFTRUE 22648
22646: GO 22670
22648: POP
// hHackTeleport ( unit , x , y ) ; end ;
22649: LD_VAR 0 2
22653: PPUSH
22654: LD_VAR 0 4
22658: PPUSH
22659: LD_VAR 0 5
22663: PPUSH
22664: CALL 24435 0 3
22668: GO 22671
22670: POP
// end ;
22671: LD_VAR 0 12
22675: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22676: LD_INT 0
22678: PPUSH
22679: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22680: LD_VAR 0 1
22684: PUSH
22685: LD_INT 1
22687: LESS
22688: PUSH
22689: LD_VAR 0 1
22693: PUSH
22694: LD_INT 3
22696: GREATER
22697: OR
22698: PUSH
22699: LD_VAR 0 5
22703: PPUSH
22704: LD_VAR 0 6
22708: PPUSH
22709: CALL_OW 428
22713: OR
22714: IFFALSE 22718
// exit ;
22716: GO 23438
// uc_side := your_side ;
22718: LD_ADDR_OWVAR 20
22722: PUSH
22723: LD_OWVAR 2
22727: ST_TO_ADDR
// uc_nation := nation ;
22728: LD_ADDR_OWVAR 21
22732: PUSH
22733: LD_VAR 0 1
22737: ST_TO_ADDR
// bc_level = 1 ;
22738: LD_ADDR_OWVAR 43
22742: PUSH
22743: LD_INT 1
22745: ST_TO_ADDR
// case btype of 1 :
22746: LD_VAR 0 2
22750: PUSH
22751: LD_INT 1
22753: DOUBLE
22754: EQUAL
22755: IFTRUE 22759
22757: GO 22770
22759: POP
// bc_type := b_depot ; 2 :
22760: LD_ADDR_OWVAR 42
22764: PUSH
22765: LD_INT 0
22767: ST_TO_ADDR
22768: GO 23382
22770: LD_INT 2
22772: DOUBLE
22773: EQUAL
22774: IFTRUE 22778
22776: GO 22789
22778: POP
// bc_type := b_warehouse ; 3 :
22779: LD_ADDR_OWVAR 42
22783: PUSH
22784: LD_INT 1
22786: ST_TO_ADDR
22787: GO 23382
22789: LD_INT 3
22791: DOUBLE
22792: EQUAL
22793: IFTRUE 22797
22795: GO 22808
22797: POP
// bc_type := b_lab ; 4 .. 9 :
22798: LD_ADDR_OWVAR 42
22802: PUSH
22803: LD_INT 6
22805: ST_TO_ADDR
22806: GO 23382
22808: LD_INT 4
22810: DOUBLE
22811: GREATEREQUAL
22812: IFFALSE 22820
22814: LD_INT 9
22816: DOUBLE
22817: LESSEQUAL
22818: IFTRUE 22822
22820: GO 22874
22822: POP
// begin bc_type := b_lab_half ;
22823: LD_ADDR_OWVAR 42
22827: PUSH
22828: LD_INT 7
22830: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22831: LD_ADDR_OWVAR 44
22835: PUSH
22836: LD_INT 10
22838: PUSH
22839: LD_INT 11
22841: PUSH
22842: LD_INT 12
22844: PUSH
22845: LD_INT 15
22847: PUSH
22848: LD_INT 14
22850: PUSH
22851: LD_INT 13
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: PUSH
22862: LD_VAR 0 2
22866: PUSH
22867: LD_INT 3
22869: MINUS
22870: ARRAY
22871: ST_TO_ADDR
// end ; 10 .. 13 :
22872: GO 23382
22874: LD_INT 10
22876: DOUBLE
22877: GREATEREQUAL
22878: IFFALSE 22886
22880: LD_INT 13
22882: DOUBLE
22883: LESSEQUAL
22884: IFTRUE 22888
22886: GO 22965
22888: POP
// begin bc_type := b_lab_full ;
22889: LD_ADDR_OWVAR 42
22893: PUSH
22894: LD_INT 8
22896: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22897: LD_ADDR_OWVAR 44
22901: PUSH
22902: LD_INT 10
22904: PUSH
22905: LD_INT 12
22907: PUSH
22908: LD_INT 14
22910: PUSH
22911: LD_INT 13
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: PUSH
22920: LD_VAR 0 2
22924: PUSH
22925: LD_INT 9
22927: MINUS
22928: ARRAY
22929: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22930: LD_ADDR_OWVAR 45
22934: PUSH
22935: LD_INT 11
22937: PUSH
22938: LD_INT 15
22940: PUSH
22941: LD_INT 12
22943: PUSH
22944: LD_INT 15
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: PUSH
22953: LD_VAR 0 2
22957: PUSH
22958: LD_INT 9
22960: MINUS
22961: ARRAY
22962: ST_TO_ADDR
// end ; 14 :
22963: GO 23382
22965: LD_INT 14
22967: DOUBLE
22968: EQUAL
22969: IFTRUE 22973
22971: GO 22984
22973: POP
// bc_type := b_workshop ; 15 :
22974: LD_ADDR_OWVAR 42
22978: PUSH
22979: LD_INT 2
22981: ST_TO_ADDR
22982: GO 23382
22984: LD_INT 15
22986: DOUBLE
22987: EQUAL
22988: IFTRUE 22992
22990: GO 23003
22992: POP
// bc_type := b_factory ; 16 :
22993: LD_ADDR_OWVAR 42
22997: PUSH
22998: LD_INT 3
23000: ST_TO_ADDR
23001: GO 23382
23003: LD_INT 16
23005: DOUBLE
23006: EQUAL
23007: IFTRUE 23011
23009: GO 23022
23011: POP
// bc_type := b_ext_gun ; 17 :
23012: LD_ADDR_OWVAR 42
23016: PUSH
23017: LD_INT 17
23019: ST_TO_ADDR
23020: GO 23382
23022: LD_INT 17
23024: DOUBLE
23025: EQUAL
23026: IFTRUE 23030
23028: GO 23058
23030: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23031: LD_ADDR_OWVAR 42
23035: PUSH
23036: LD_INT 19
23038: PUSH
23039: LD_INT 23
23041: PUSH
23042: LD_INT 19
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: LIST
23049: PUSH
23050: LD_VAR 0 1
23054: ARRAY
23055: ST_TO_ADDR
23056: GO 23382
23058: LD_INT 18
23060: DOUBLE
23061: EQUAL
23062: IFTRUE 23066
23064: GO 23077
23066: POP
// bc_type := b_ext_radar ; 19 :
23067: LD_ADDR_OWVAR 42
23071: PUSH
23072: LD_INT 20
23074: ST_TO_ADDR
23075: GO 23382
23077: LD_INT 19
23079: DOUBLE
23080: EQUAL
23081: IFTRUE 23085
23083: GO 23096
23085: POP
// bc_type := b_ext_radio ; 20 :
23086: LD_ADDR_OWVAR 42
23090: PUSH
23091: LD_INT 22
23093: ST_TO_ADDR
23094: GO 23382
23096: LD_INT 20
23098: DOUBLE
23099: EQUAL
23100: IFTRUE 23104
23102: GO 23115
23104: POP
// bc_type := b_ext_siberium ; 21 :
23105: LD_ADDR_OWVAR 42
23109: PUSH
23110: LD_INT 21
23112: ST_TO_ADDR
23113: GO 23382
23115: LD_INT 21
23117: DOUBLE
23118: EQUAL
23119: IFTRUE 23123
23121: GO 23134
23123: POP
// bc_type := b_ext_computer ; 22 :
23124: LD_ADDR_OWVAR 42
23128: PUSH
23129: LD_INT 24
23131: ST_TO_ADDR
23132: GO 23382
23134: LD_INT 22
23136: DOUBLE
23137: EQUAL
23138: IFTRUE 23142
23140: GO 23153
23142: POP
// bc_type := b_ext_track ; 23 :
23143: LD_ADDR_OWVAR 42
23147: PUSH
23148: LD_INT 16
23150: ST_TO_ADDR
23151: GO 23382
23153: LD_INT 23
23155: DOUBLE
23156: EQUAL
23157: IFTRUE 23161
23159: GO 23172
23161: POP
// bc_type := b_ext_laser ; 24 :
23162: LD_ADDR_OWVAR 42
23166: PUSH
23167: LD_INT 25
23169: ST_TO_ADDR
23170: GO 23382
23172: LD_INT 24
23174: DOUBLE
23175: EQUAL
23176: IFTRUE 23180
23178: GO 23191
23180: POP
// bc_type := b_control_tower ; 25 :
23181: LD_ADDR_OWVAR 42
23185: PUSH
23186: LD_INT 36
23188: ST_TO_ADDR
23189: GO 23382
23191: LD_INT 25
23193: DOUBLE
23194: EQUAL
23195: IFTRUE 23199
23197: GO 23210
23199: POP
// bc_type := b_breastwork ; 26 :
23200: LD_ADDR_OWVAR 42
23204: PUSH
23205: LD_INT 31
23207: ST_TO_ADDR
23208: GO 23382
23210: LD_INT 26
23212: DOUBLE
23213: EQUAL
23214: IFTRUE 23218
23216: GO 23229
23218: POP
// bc_type := b_bunker ; 27 :
23219: LD_ADDR_OWVAR 42
23223: PUSH
23224: LD_INT 32
23226: ST_TO_ADDR
23227: GO 23382
23229: LD_INT 27
23231: DOUBLE
23232: EQUAL
23233: IFTRUE 23237
23235: GO 23248
23237: POP
// bc_type := b_turret ; 28 :
23238: LD_ADDR_OWVAR 42
23242: PUSH
23243: LD_INT 33
23245: ST_TO_ADDR
23246: GO 23382
23248: LD_INT 28
23250: DOUBLE
23251: EQUAL
23252: IFTRUE 23256
23254: GO 23267
23256: POP
// bc_type := b_armoury ; 29 :
23257: LD_ADDR_OWVAR 42
23261: PUSH
23262: LD_INT 4
23264: ST_TO_ADDR
23265: GO 23382
23267: LD_INT 29
23269: DOUBLE
23270: EQUAL
23271: IFTRUE 23275
23273: GO 23286
23275: POP
// bc_type := b_barracks ; 30 :
23276: LD_ADDR_OWVAR 42
23280: PUSH
23281: LD_INT 5
23283: ST_TO_ADDR
23284: GO 23382
23286: LD_INT 30
23288: DOUBLE
23289: EQUAL
23290: IFTRUE 23294
23292: GO 23305
23294: POP
// bc_type := b_solar_power ; 31 :
23295: LD_ADDR_OWVAR 42
23299: PUSH
23300: LD_INT 27
23302: ST_TO_ADDR
23303: GO 23382
23305: LD_INT 31
23307: DOUBLE
23308: EQUAL
23309: IFTRUE 23313
23311: GO 23324
23313: POP
// bc_type := b_oil_power ; 32 :
23314: LD_ADDR_OWVAR 42
23318: PUSH
23319: LD_INT 26
23321: ST_TO_ADDR
23322: GO 23382
23324: LD_INT 32
23326: DOUBLE
23327: EQUAL
23328: IFTRUE 23332
23330: GO 23343
23332: POP
// bc_type := b_siberite_power ; 33 :
23333: LD_ADDR_OWVAR 42
23337: PUSH
23338: LD_INT 28
23340: ST_TO_ADDR
23341: GO 23382
23343: LD_INT 33
23345: DOUBLE
23346: EQUAL
23347: IFTRUE 23351
23349: GO 23362
23351: POP
// bc_type := b_oil_mine ; 34 :
23352: LD_ADDR_OWVAR 42
23356: PUSH
23357: LD_INT 29
23359: ST_TO_ADDR
23360: GO 23382
23362: LD_INT 34
23364: DOUBLE
23365: EQUAL
23366: IFTRUE 23370
23368: GO 23381
23370: POP
// bc_type := b_siberite_mine ; end ;
23371: LD_ADDR_OWVAR 42
23375: PUSH
23376: LD_INT 30
23378: ST_TO_ADDR
23379: GO 23382
23381: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23382: LD_ADDR_VAR 0 8
23386: PUSH
23387: LD_VAR 0 5
23391: PPUSH
23392: LD_VAR 0 6
23396: PPUSH
23397: LD_VAR 0 3
23401: PPUSH
23402: CALL_OW 47
23406: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23407: LD_OWVAR 42
23411: PUSH
23412: LD_INT 32
23414: PUSH
23415: LD_INT 33
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: IN
23422: IFFALSE 23438
// PlaceWeaponTurret ( b , weapon ) ;
23424: LD_VAR 0 8
23428: PPUSH
23429: LD_VAR 0 4
23433: PPUSH
23434: CALL_OW 431
// end ;
23438: LD_VAR 0 7
23442: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23443: LD_INT 0
23445: PPUSH
23446: PPUSH
23447: PPUSH
23448: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23449: LD_ADDR_VAR 0 4
23453: PUSH
23454: LD_INT 22
23456: PUSH
23457: LD_OWVAR 2
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 2
23468: PUSH
23469: LD_INT 30
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 30
23481: PUSH
23482: LD_INT 1
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: LIST
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PPUSH
23498: CALL_OW 69
23502: ST_TO_ADDR
// if not tmp then
23503: LD_VAR 0 4
23507: NOT
23508: IFFALSE 23512
// exit ;
23510: GO 23571
// for i in tmp do
23512: LD_ADDR_VAR 0 2
23516: PUSH
23517: LD_VAR 0 4
23521: PUSH
23522: FOR_IN
23523: IFFALSE 23569
// for j = 1 to 3 do
23525: LD_ADDR_VAR 0 3
23529: PUSH
23530: DOUBLE
23531: LD_INT 1
23533: DEC
23534: ST_TO_ADDR
23535: LD_INT 3
23537: PUSH
23538: FOR_TO
23539: IFFALSE 23565
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23541: LD_VAR 0 2
23545: PPUSH
23546: CALL_OW 274
23550: PPUSH
23551: LD_VAR 0 3
23555: PPUSH
23556: LD_INT 99999
23558: PPUSH
23559: CALL_OW 277
23563: GO 23538
23565: POP
23566: POP
23567: GO 23522
23569: POP
23570: POP
// end ;
23571: LD_VAR 0 1
23575: RET
// export function hHackSetLevel10 ; var i , j ; begin
23576: LD_INT 0
23578: PPUSH
23579: PPUSH
23580: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23581: LD_ADDR_VAR 0 2
23585: PUSH
23586: LD_INT 21
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PPUSH
23596: CALL_OW 69
23600: PUSH
23601: FOR_IN
23602: IFFALSE 23654
// if IsSelected ( i ) then
23604: LD_VAR 0 2
23608: PPUSH
23609: CALL_OW 306
23613: IFFALSE 23652
// begin for j := 1 to 4 do
23615: LD_ADDR_VAR 0 3
23619: PUSH
23620: DOUBLE
23621: LD_INT 1
23623: DEC
23624: ST_TO_ADDR
23625: LD_INT 4
23627: PUSH
23628: FOR_TO
23629: IFFALSE 23650
// SetSkill ( i , j , 10 ) ;
23631: LD_VAR 0 2
23635: PPUSH
23636: LD_VAR 0 3
23640: PPUSH
23641: LD_INT 10
23643: PPUSH
23644: CALL_OW 237
23648: GO 23628
23650: POP
23651: POP
// end ;
23652: GO 23601
23654: POP
23655: POP
// end ;
23656: LD_VAR 0 1
23660: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23661: LD_INT 0
23663: PPUSH
23664: PPUSH
23665: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23666: LD_ADDR_VAR 0 2
23670: PUSH
23671: LD_INT 22
23673: PUSH
23674: LD_OWVAR 2
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 21
23685: PUSH
23686: LD_INT 1
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PPUSH
23697: CALL_OW 69
23701: PUSH
23702: FOR_IN
23703: IFFALSE 23744
// begin for j := 1 to 4 do
23705: LD_ADDR_VAR 0 3
23709: PUSH
23710: DOUBLE
23711: LD_INT 1
23713: DEC
23714: ST_TO_ADDR
23715: LD_INT 4
23717: PUSH
23718: FOR_TO
23719: IFFALSE 23740
// SetSkill ( i , j , 10 ) ;
23721: LD_VAR 0 2
23725: PPUSH
23726: LD_VAR 0 3
23730: PPUSH
23731: LD_INT 10
23733: PPUSH
23734: CALL_OW 237
23738: GO 23718
23740: POP
23741: POP
// end ;
23742: GO 23702
23744: POP
23745: POP
// end ;
23746: LD_VAR 0 1
23750: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23751: LD_INT 0
23753: PPUSH
// uc_side := your_side ;
23754: LD_ADDR_OWVAR 20
23758: PUSH
23759: LD_OWVAR 2
23763: ST_TO_ADDR
// uc_nation := nation ;
23764: LD_ADDR_OWVAR 21
23768: PUSH
23769: LD_VAR 0 1
23773: ST_TO_ADDR
// InitHc ;
23774: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23778: LD_INT 0
23780: PPUSH
23781: LD_VAR 0 2
23785: PPUSH
23786: LD_VAR 0 3
23790: PPUSH
23791: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23795: LD_VAR 0 4
23799: PPUSH
23800: LD_VAR 0 5
23804: PPUSH
23805: CALL_OW 428
23809: PUSH
23810: LD_INT 0
23812: EQUAL
23813: IFFALSE 23837
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23815: CALL_OW 44
23819: PPUSH
23820: LD_VAR 0 4
23824: PPUSH
23825: LD_VAR 0 5
23829: PPUSH
23830: LD_INT 1
23832: PPUSH
23833: CALL_OW 48
// end ;
23837: LD_VAR 0 6
23841: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23842: LD_INT 0
23844: PPUSH
23845: PPUSH
// uc_side := your_side ;
23846: LD_ADDR_OWVAR 20
23850: PUSH
23851: LD_OWVAR 2
23855: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23856: LD_VAR 0 1
23860: PUSH
23861: LD_INT 1
23863: PUSH
23864: LD_INT 2
23866: PUSH
23867: LD_INT 3
23869: PUSH
23870: LD_INT 4
23872: PUSH
23873: LD_INT 5
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: IN
23883: IFFALSE 23895
// uc_nation := nation_american else
23885: LD_ADDR_OWVAR 21
23889: PUSH
23890: LD_INT 1
23892: ST_TO_ADDR
23893: GO 23938
// if chassis in [ 11 , 12 , 13 , 14 ] then
23895: LD_VAR 0 1
23899: PUSH
23900: LD_INT 11
23902: PUSH
23903: LD_INT 12
23905: PUSH
23906: LD_INT 13
23908: PUSH
23909: LD_INT 14
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: IN
23918: IFFALSE 23930
// uc_nation := nation_arabian else
23920: LD_ADDR_OWVAR 21
23924: PUSH
23925: LD_INT 2
23927: ST_TO_ADDR
23928: GO 23938
// uc_nation := nation_russian ;
23930: LD_ADDR_OWVAR 21
23934: PUSH
23935: LD_INT 3
23937: ST_TO_ADDR
// vc_chassis := chassis ;
23938: LD_ADDR_OWVAR 37
23942: PUSH
23943: LD_VAR 0 1
23947: ST_TO_ADDR
// vc_engine := engine ;
23948: LD_ADDR_OWVAR 39
23952: PUSH
23953: LD_VAR 0 2
23957: ST_TO_ADDR
// vc_control := control ;
23958: LD_ADDR_OWVAR 38
23962: PUSH
23963: LD_VAR 0 3
23967: ST_TO_ADDR
// vc_weapon := weapon ;
23968: LD_ADDR_OWVAR 40
23972: PUSH
23973: LD_VAR 0 4
23977: ST_TO_ADDR
// un := CreateVehicle ;
23978: LD_ADDR_VAR 0 8
23982: PUSH
23983: CALL_OW 45
23987: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23988: LD_VAR 0 8
23992: PPUSH
23993: LD_INT 0
23995: PPUSH
23996: LD_INT 5
23998: PPUSH
23999: CALL_OW 12
24003: PPUSH
24004: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24008: LD_VAR 0 8
24012: PPUSH
24013: LD_VAR 0 5
24017: PPUSH
24018: LD_VAR 0 6
24022: PPUSH
24023: LD_INT 1
24025: PPUSH
24026: CALL_OW 48
// end ;
24030: LD_VAR 0 7
24034: RET
// export hInvincible ; every 1 do
24035: GO 24037
24037: DISABLE
// hInvincible := [ ] ;
24038: LD_ADDR_EXP 100
24042: PUSH
24043: EMPTY
24044: ST_TO_ADDR
24045: END
// every 10 do var i ;
24046: GO 24048
24048: DISABLE
24049: LD_INT 0
24051: PPUSH
// begin enable ;
24052: ENABLE
// if not hInvincible then
24053: LD_EXP 100
24057: NOT
24058: IFFALSE 24062
// exit ;
24060: GO 24106
// for i in hInvincible do
24062: LD_ADDR_VAR 0 1
24066: PUSH
24067: LD_EXP 100
24071: PUSH
24072: FOR_IN
24073: IFFALSE 24104
// if GetLives ( i ) < 1000 then
24075: LD_VAR 0 1
24079: PPUSH
24080: CALL_OW 256
24084: PUSH
24085: LD_INT 1000
24087: LESS
24088: IFFALSE 24102
// SetLives ( i , 1000 ) ;
24090: LD_VAR 0 1
24094: PPUSH
24095: LD_INT 1000
24097: PPUSH
24098: CALL_OW 234
24102: GO 24072
24104: POP
24105: POP
// end ;
24106: PPOPN 1
24108: END
// export function hHackInvincible ; var i ; begin
24109: LD_INT 0
24111: PPUSH
24112: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24113: LD_ADDR_VAR 0 2
24117: PUSH
24118: LD_INT 2
24120: PUSH
24121: LD_INT 21
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 21
24133: PUSH
24134: LD_INT 2
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: LIST
24145: PPUSH
24146: CALL_OW 69
24150: PUSH
24151: FOR_IN
24152: IFFALSE 24213
// if IsSelected ( i ) then
24154: LD_VAR 0 2
24158: PPUSH
24159: CALL_OW 306
24163: IFFALSE 24211
// begin if i in hInvincible then
24165: LD_VAR 0 2
24169: PUSH
24170: LD_EXP 100
24174: IN
24175: IFFALSE 24195
// hInvincible := hInvincible diff i else
24177: LD_ADDR_EXP 100
24181: PUSH
24182: LD_EXP 100
24186: PUSH
24187: LD_VAR 0 2
24191: DIFF
24192: ST_TO_ADDR
24193: GO 24211
// hInvincible := hInvincible union i ;
24195: LD_ADDR_EXP 100
24199: PUSH
24200: LD_EXP 100
24204: PUSH
24205: LD_VAR 0 2
24209: UNION
24210: ST_TO_ADDR
// end ;
24211: GO 24151
24213: POP
24214: POP
// end ;
24215: LD_VAR 0 1
24219: RET
// export function hHackInvisible ; var i , j ; begin
24220: LD_INT 0
24222: PPUSH
24223: PPUSH
24224: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24225: LD_ADDR_VAR 0 2
24229: PUSH
24230: LD_INT 21
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PPUSH
24240: CALL_OW 69
24244: PUSH
24245: FOR_IN
24246: IFFALSE 24270
// if IsSelected ( i ) then
24248: LD_VAR 0 2
24252: PPUSH
24253: CALL_OW 306
24257: IFFALSE 24268
// ComForceInvisible ( i ) ;
24259: LD_VAR 0 2
24263: PPUSH
24264: CALL_OW 496
24268: GO 24245
24270: POP
24271: POP
// end ;
24272: LD_VAR 0 1
24276: RET
// export function hHackChangeYourSide ; begin
24277: LD_INT 0
24279: PPUSH
// if your_side = 8 then
24280: LD_OWVAR 2
24284: PUSH
24285: LD_INT 8
24287: EQUAL
24288: IFFALSE 24300
// your_side := 0 else
24290: LD_ADDR_OWVAR 2
24294: PUSH
24295: LD_INT 0
24297: ST_TO_ADDR
24298: GO 24314
// your_side := your_side + 1 ;
24300: LD_ADDR_OWVAR 2
24304: PUSH
24305: LD_OWVAR 2
24309: PUSH
24310: LD_INT 1
24312: PLUS
24313: ST_TO_ADDR
// end ;
24314: LD_VAR 0 1
24318: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24319: LD_INT 0
24321: PPUSH
24322: PPUSH
24323: PPUSH
// for i in all_units do
24324: LD_ADDR_VAR 0 2
24328: PUSH
24329: LD_OWVAR 3
24333: PUSH
24334: FOR_IN
24335: IFFALSE 24413
// if IsSelected ( i ) then
24337: LD_VAR 0 2
24341: PPUSH
24342: CALL_OW 306
24346: IFFALSE 24411
// begin j := GetSide ( i ) ;
24348: LD_ADDR_VAR 0 3
24352: PUSH
24353: LD_VAR 0 2
24357: PPUSH
24358: CALL_OW 255
24362: ST_TO_ADDR
// if j = 8 then
24363: LD_VAR 0 3
24367: PUSH
24368: LD_INT 8
24370: EQUAL
24371: IFFALSE 24383
// j := 0 else
24373: LD_ADDR_VAR 0 3
24377: PUSH
24378: LD_INT 0
24380: ST_TO_ADDR
24381: GO 24397
// j := j + 1 ;
24383: LD_ADDR_VAR 0 3
24387: PUSH
24388: LD_VAR 0 3
24392: PUSH
24393: LD_INT 1
24395: PLUS
24396: ST_TO_ADDR
// SetSide ( i , j ) ;
24397: LD_VAR 0 2
24401: PPUSH
24402: LD_VAR 0 3
24406: PPUSH
24407: CALL_OW 235
// end ;
24411: GO 24334
24413: POP
24414: POP
// end ;
24415: LD_VAR 0 1
24419: RET
// export function hHackFog ; begin
24420: LD_INT 0
24422: PPUSH
// FogOff ( true ) ;
24423: LD_INT 1
24425: PPUSH
24426: CALL_OW 344
// end ;
24430: LD_VAR 0 1
24434: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24435: LD_INT 0
24437: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24438: LD_VAR 0 1
24442: PPUSH
24443: LD_VAR 0 2
24447: PPUSH
24448: LD_VAR 0 3
24452: PPUSH
24453: LD_INT 1
24455: PPUSH
24456: LD_INT 1
24458: PPUSH
24459: CALL_OW 483
// CenterOnXY ( x , y ) ;
24463: LD_VAR 0 2
24467: PPUSH
24468: LD_VAR 0 3
24472: PPUSH
24473: CALL_OW 84
// end ;
24477: LD_VAR 0 4
24481: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24482: LD_INT 0
24484: PPUSH
24485: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24486: LD_VAR 0 1
24490: NOT
24491: PUSH
24492: LD_VAR 0 2
24496: PPUSH
24497: LD_VAR 0 3
24501: PPUSH
24502: CALL_OW 488
24506: NOT
24507: OR
24508: PUSH
24509: LD_VAR 0 1
24513: PPUSH
24514: CALL_OW 266
24518: PUSH
24519: LD_INT 3
24521: NONEQUAL
24522: PUSH
24523: LD_VAR 0 1
24527: PPUSH
24528: CALL_OW 247
24532: PUSH
24533: LD_INT 1
24535: EQUAL
24536: NOT
24537: AND
24538: OR
24539: IFFALSE 24543
// exit ;
24541: GO 24692
// if GetType ( factory ) = unit_human then
24543: LD_VAR 0 1
24547: PPUSH
24548: CALL_OW 247
24552: PUSH
24553: LD_INT 1
24555: EQUAL
24556: IFFALSE 24573
// factory := IsInUnit ( factory ) ;
24558: LD_ADDR_VAR 0 1
24562: PUSH
24563: LD_VAR 0 1
24567: PPUSH
24568: CALL_OW 310
24572: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24573: LD_VAR 0 1
24577: PPUSH
24578: CALL_OW 266
24582: PUSH
24583: LD_INT 3
24585: NONEQUAL
24586: IFFALSE 24590
// exit ;
24588: GO 24692
// if HexInfo ( x , y ) = factory then
24590: LD_VAR 0 2
24594: PPUSH
24595: LD_VAR 0 3
24599: PPUSH
24600: CALL_OW 428
24604: PUSH
24605: LD_VAR 0 1
24609: EQUAL
24610: IFFALSE 24637
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24612: LD_ADDR_EXP 101
24616: PUSH
24617: LD_EXP 101
24621: PPUSH
24622: LD_VAR 0 1
24626: PPUSH
24627: LD_INT 0
24629: PPUSH
24630: CALL_OW 1
24634: ST_TO_ADDR
24635: GO 24688
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24637: LD_ADDR_EXP 101
24641: PUSH
24642: LD_EXP 101
24646: PPUSH
24647: LD_VAR 0 1
24651: PPUSH
24652: LD_VAR 0 1
24656: PPUSH
24657: CALL_OW 255
24661: PUSH
24662: LD_VAR 0 1
24666: PUSH
24667: LD_VAR 0 2
24671: PUSH
24672: LD_VAR 0 3
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: PPUSH
24683: CALL_OW 1
24687: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24688: CALL 24697 0 0
// end ;
24692: LD_VAR 0 4
24696: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24697: LD_INT 0
24699: PPUSH
24700: PPUSH
24701: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24702: LD_STRING resetFactoryWaypoint();
24704: PPUSH
24705: CALL_OW 559
// if factoryWaypoints then
24709: LD_EXP 101
24713: IFFALSE 24839
// begin list := PrepareArray ( factoryWaypoints ) ;
24715: LD_ADDR_VAR 0 3
24719: PUSH
24720: LD_EXP 101
24724: PPUSH
24725: CALL 71452 0 1
24729: ST_TO_ADDR
// for i := 1 to list do
24730: LD_ADDR_VAR 0 2
24734: PUSH
24735: DOUBLE
24736: LD_INT 1
24738: DEC
24739: ST_TO_ADDR
24740: LD_VAR 0 3
24744: PUSH
24745: FOR_TO
24746: IFFALSE 24837
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24748: LD_STRING setFactoryWaypointXY(
24750: PUSH
24751: LD_VAR 0 3
24755: PUSH
24756: LD_VAR 0 2
24760: ARRAY
24761: PUSH
24762: LD_INT 1
24764: ARRAY
24765: STR
24766: PUSH
24767: LD_STRING ,
24769: STR
24770: PUSH
24771: LD_VAR 0 3
24775: PUSH
24776: LD_VAR 0 2
24780: ARRAY
24781: PUSH
24782: LD_INT 2
24784: ARRAY
24785: STR
24786: PUSH
24787: LD_STRING ,
24789: STR
24790: PUSH
24791: LD_VAR 0 3
24795: PUSH
24796: LD_VAR 0 2
24800: ARRAY
24801: PUSH
24802: LD_INT 3
24804: ARRAY
24805: STR
24806: PUSH
24807: LD_STRING ,
24809: STR
24810: PUSH
24811: LD_VAR 0 3
24815: PUSH
24816: LD_VAR 0 2
24820: ARRAY
24821: PUSH
24822: LD_INT 4
24824: ARRAY
24825: STR
24826: PUSH
24827: LD_STRING )
24829: STR
24830: PPUSH
24831: CALL_OW 559
24835: GO 24745
24837: POP
24838: POP
// end ; end ;
24839: LD_VAR 0 1
24843: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24844: LD_INT 0
24846: PPUSH
// if HexInfo ( x , y ) = warehouse then
24847: LD_VAR 0 2
24851: PPUSH
24852: LD_VAR 0 3
24856: PPUSH
24857: CALL_OW 428
24861: PUSH
24862: LD_VAR 0 1
24866: EQUAL
24867: IFFALSE 24894
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24869: LD_ADDR_EXP 102
24873: PUSH
24874: LD_EXP 102
24878: PPUSH
24879: LD_VAR 0 1
24883: PPUSH
24884: LD_INT 0
24886: PPUSH
24887: CALL_OW 1
24891: ST_TO_ADDR
24892: GO 24945
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24894: LD_ADDR_EXP 102
24898: PUSH
24899: LD_EXP 102
24903: PPUSH
24904: LD_VAR 0 1
24908: PPUSH
24909: LD_VAR 0 1
24913: PPUSH
24914: CALL_OW 255
24918: PUSH
24919: LD_VAR 0 1
24923: PUSH
24924: LD_VAR 0 2
24928: PUSH
24929: LD_VAR 0 3
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: PPUSH
24940: CALL_OW 1
24944: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24945: CALL 24954 0 0
// end ;
24949: LD_VAR 0 4
24953: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24954: LD_INT 0
24956: PPUSH
24957: PPUSH
24958: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24959: LD_STRING resetWarehouseGatheringPoints();
24961: PPUSH
24962: CALL_OW 559
// if warehouseGatheringPoints then
24966: LD_EXP 102
24970: IFFALSE 25096
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24972: LD_ADDR_VAR 0 3
24976: PUSH
24977: LD_EXP 102
24981: PPUSH
24982: CALL 71452 0 1
24986: ST_TO_ADDR
// for i := 1 to list do
24987: LD_ADDR_VAR 0 2
24991: PUSH
24992: DOUBLE
24993: LD_INT 1
24995: DEC
24996: ST_TO_ADDR
24997: LD_VAR 0 3
25001: PUSH
25002: FOR_TO
25003: IFFALSE 25094
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25005: LD_STRING setWarehouseGatheringPointXY(
25007: PUSH
25008: LD_VAR 0 3
25012: PUSH
25013: LD_VAR 0 2
25017: ARRAY
25018: PUSH
25019: LD_INT 1
25021: ARRAY
25022: STR
25023: PUSH
25024: LD_STRING ,
25026: STR
25027: PUSH
25028: LD_VAR 0 3
25032: PUSH
25033: LD_VAR 0 2
25037: ARRAY
25038: PUSH
25039: LD_INT 2
25041: ARRAY
25042: STR
25043: PUSH
25044: LD_STRING ,
25046: STR
25047: PUSH
25048: LD_VAR 0 3
25052: PUSH
25053: LD_VAR 0 2
25057: ARRAY
25058: PUSH
25059: LD_INT 3
25061: ARRAY
25062: STR
25063: PUSH
25064: LD_STRING ,
25066: STR
25067: PUSH
25068: LD_VAR 0 3
25072: PUSH
25073: LD_VAR 0 2
25077: ARRAY
25078: PUSH
25079: LD_INT 4
25081: ARRAY
25082: STR
25083: PUSH
25084: LD_STRING )
25086: STR
25087: PPUSH
25088: CALL_OW 559
25092: GO 25002
25094: POP
25095: POP
// end ; end ;
25096: LD_VAR 0 1
25100: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25101: LD_EXP 102
25105: IFFALSE 25790
25107: GO 25109
25109: DISABLE
25110: LD_INT 0
25112: PPUSH
25113: PPUSH
25114: PPUSH
25115: PPUSH
25116: PPUSH
25117: PPUSH
25118: PPUSH
25119: PPUSH
25120: PPUSH
// begin enable ;
25121: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25122: LD_ADDR_VAR 0 3
25126: PUSH
25127: LD_EXP 102
25131: PPUSH
25132: CALL 71452 0 1
25136: ST_TO_ADDR
// if not list then
25137: LD_VAR 0 3
25141: NOT
25142: IFFALSE 25146
// exit ;
25144: GO 25790
// for i := 1 to list do
25146: LD_ADDR_VAR 0 1
25150: PUSH
25151: DOUBLE
25152: LD_INT 1
25154: DEC
25155: ST_TO_ADDR
25156: LD_VAR 0 3
25160: PUSH
25161: FOR_TO
25162: IFFALSE 25788
// begin depot := list [ i ] [ 2 ] ;
25164: LD_ADDR_VAR 0 8
25168: PUSH
25169: LD_VAR 0 3
25173: PUSH
25174: LD_VAR 0 1
25178: ARRAY
25179: PUSH
25180: LD_INT 2
25182: ARRAY
25183: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25184: LD_ADDR_VAR 0 5
25188: PUSH
25189: LD_VAR 0 3
25193: PUSH
25194: LD_VAR 0 1
25198: ARRAY
25199: PUSH
25200: LD_INT 1
25202: ARRAY
25203: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25204: LD_VAR 0 8
25208: PPUSH
25209: CALL_OW 301
25213: PUSH
25214: LD_VAR 0 5
25218: PUSH
25219: LD_VAR 0 8
25223: PPUSH
25224: CALL_OW 255
25228: NONEQUAL
25229: OR
25230: IFFALSE 25259
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25232: LD_ADDR_EXP 102
25236: PUSH
25237: LD_EXP 102
25241: PPUSH
25242: LD_VAR 0 8
25246: PPUSH
25247: LD_INT 0
25249: PPUSH
25250: CALL_OW 1
25254: ST_TO_ADDR
// exit ;
25255: POP
25256: POP
25257: GO 25790
// end ; x := list [ i ] [ 3 ] ;
25259: LD_ADDR_VAR 0 6
25263: PUSH
25264: LD_VAR 0 3
25268: PUSH
25269: LD_VAR 0 1
25273: ARRAY
25274: PUSH
25275: LD_INT 3
25277: ARRAY
25278: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25279: LD_ADDR_VAR 0 7
25283: PUSH
25284: LD_VAR 0 3
25288: PUSH
25289: LD_VAR 0 1
25293: ARRAY
25294: PUSH
25295: LD_INT 4
25297: ARRAY
25298: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25299: LD_ADDR_VAR 0 9
25303: PUSH
25304: LD_VAR 0 6
25308: PPUSH
25309: LD_VAR 0 7
25313: PPUSH
25314: LD_INT 16
25316: PPUSH
25317: CALL 70040 0 3
25321: ST_TO_ADDR
// if not cratesNearbyPoint then
25322: LD_VAR 0 9
25326: NOT
25327: IFFALSE 25333
// exit ;
25329: POP
25330: POP
25331: GO 25790
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25333: LD_ADDR_VAR 0 4
25337: PUSH
25338: LD_INT 22
25340: PUSH
25341: LD_VAR 0 5
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 3
25352: PUSH
25353: LD_INT 60
25355: PUSH
25356: EMPTY
25357: LIST
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 91
25365: PUSH
25366: LD_VAR 0 8
25370: PUSH
25371: LD_INT 6
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: LD_INT 25
25384: PUSH
25385: LD_INT 2
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 25
25394: PUSH
25395: LD_INT 16
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: LIST
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: PPUSH
25413: CALL_OW 69
25417: PUSH
25418: LD_VAR 0 8
25422: PPUSH
25423: CALL_OW 313
25427: PPUSH
25428: LD_INT 3
25430: PUSH
25431: LD_INT 60
25433: PUSH
25434: EMPTY
25435: LIST
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 2
25443: PUSH
25444: LD_INT 25
25446: PUSH
25447: LD_INT 2
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 25
25456: PUSH
25457: LD_INT 16
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: LIST
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PPUSH
25473: CALL_OW 72
25477: UNION
25478: ST_TO_ADDR
// if tmp then
25479: LD_VAR 0 4
25483: IFFALSE 25563
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25485: LD_ADDR_VAR 0 4
25489: PUSH
25490: LD_VAR 0 4
25494: PPUSH
25495: LD_INT 3
25497: PPUSH
25498: CALL 68009 0 2
25502: ST_TO_ADDR
// for j in tmp do
25503: LD_ADDR_VAR 0 2
25507: PUSH
25508: LD_VAR 0 4
25512: PUSH
25513: FOR_IN
25514: IFFALSE 25557
// begin if IsInUnit ( j ) then
25516: LD_VAR 0 2
25520: PPUSH
25521: CALL_OW 310
25525: IFFALSE 25536
// ComExit ( j ) ;
25527: LD_VAR 0 2
25531: PPUSH
25532: CALL 68092 0 1
// AddComCollect ( j , x , y ) ;
25536: LD_VAR 0 2
25540: PPUSH
25541: LD_VAR 0 6
25545: PPUSH
25546: LD_VAR 0 7
25550: PPUSH
25551: CALL_OW 177
// end ;
25555: GO 25513
25557: POP
25558: POP
// exit ;
25559: POP
25560: POP
25561: GO 25790
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25563: LD_ADDR_VAR 0 4
25567: PUSH
25568: LD_INT 22
25570: PUSH
25571: LD_VAR 0 5
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: LD_INT 91
25582: PUSH
25583: LD_VAR 0 8
25587: PUSH
25588: LD_INT 8
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 2
25598: PUSH
25599: LD_INT 34
25601: PUSH
25602: LD_INT 12
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 34
25611: PUSH
25612: LD_INT 51
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 34
25621: PUSH
25622: LD_INT 32
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 34
25631: PUSH
25632: LD_INT 89
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: LIST
25650: PPUSH
25651: CALL_OW 69
25655: ST_TO_ADDR
// if tmp then
25656: LD_VAR 0 4
25660: IFFALSE 25786
// begin for j in tmp do
25662: LD_ADDR_VAR 0 2
25666: PUSH
25667: LD_VAR 0 4
25671: PUSH
25672: FOR_IN
25673: IFFALSE 25784
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25675: LD_VAR 0 2
25679: PPUSH
25680: CALL_OW 262
25684: PUSH
25685: LD_INT 3
25687: EQUAL
25688: PUSH
25689: LD_VAR 0 2
25693: PPUSH
25694: CALL_OW 261
25698: PUSH
25699: LD_INT 20
25701: GREATER
25702: OR
25703: PUSH
25704: LD_VAR 0 2
25708: PPUSH
25709: CALL_OW 314
25713: NOT
25714: AND
25715: PUSH
25716: LD_VAR 0 2
25720: PPUSH
25721: CALL_OW 263
25725: PUSH
25726: LD_INT 1
25728: NONEQUAL
25729: PUSH
25730: LD_VAR 0 2
25734: PPUSH
25735: CALL_OW 311
25739: OR
25740: AND
25741: IFFALSE 25782
// begin ComCollect ( j , x , y ) ;
25743: LD_VAR 0 2
25747: PPUSH
25748: LD_VAR 0 6
25752: PPUSH
25753: LD_VAR 0 7
25757: PPUSH
25758: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25762: LD_VAR 0 2
25766: PPUSH
25767: LD_VAR 0 8
25771: PPUSH
25772: CALL_OW 172
// exit ;
25776: POP
25777: POP
25778: POP
25779: POP
25780: GO 25790
// end ;
25782: GO 25672
25784: POP
25785: POP
// end ; end ;
25786: GO 25161
25788: POP
25789: POP
// end ; end_of_file
25790: PPOPN 9
25792: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25793: LD_VAR 0 1
25797: PUSH
25798: LD_INT 200
25800: DOUBLE
25801: GREATEREQUAL
25802: IFFALSE 25810
25804: LD_INT 299
25806: DOUBLE
25807: LESSEQUAL
25808: IFTRUE 25812
25810: GO 25844
25812: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25813: LD_VAR 0 1
25817: PPUSH
25818: LD_VAR 0 2
25822: PPUSH
25823: LD_VAR 0 3
25827: PPUSH
25828: LD_VAR 0 4
25832: PPUSH
25833: LD_VAR 0 5
25837: PPUSH
25838: CALL 26332 0 5
25842: GO 25921
25844: LD_INT 300
25846: DOUBLE
25847: GREATEREQUAL
25848: IFFALSE 25856
25850: LD_INT 399
25852: DOUBLE
25853: LESSEQUAL
25854: IFTRUE 25858
25856: GO 25920
25858: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25859: LD_VAR 0 1
25863: PPUSH
25864: LD_VAR 0 2
25868: PPUSH
25869: LD_VAR 0 3
25873: PPUSH
25874: LD_VAR 0 4
25878: PPUSH
25879: LD_VAR 0 5
25883: PPUSH
25884: LD_VAR 0 6
25888: PPUSH
25889: LD_VAR 0 7
25893: PPUSH
25894: LD_VAR 0 8
25898: PPUSH
25899: LD_VAR 0 9
25903: PPUSH
25904: LD_VAR 0 10
25908: PPUSH
25909: LD_VAR 0 11
25913: PPUSH
25914: CALL 22502 0 11
25918: GO 25921
25920: POP
// end ;
25921: PPOPN 11
25923: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25924: LD_VAR 0 1
25928: PPUSH
25929: LD_VAR 0 2
25933: PPUSH
25934: LD_VAR 0 3
25938: PPUSH
25939: LD_VAR 0 4
25943: PPUSH
25944: LD_VAR 0 5
25948: PPUSH
25949: CALL 26068 0 5
// end ; end_of_file
25953: PPOPN 5
25955: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25956: LD_INT 0
25958: PPUSH
25959: PPUSH
25960: PPUSH
25961: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25962: LD_VAR 0 1
25966: PPUSH
25967: CALL_OW 264
25971: PUSH
25972: LD_INT 91
25974: EQUAL
25975: IFFALSE 26047
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25977: LD_INT 68
25979: PPUSH
25980: LD_VAR 0 1
25984: PPUSH
25985: CALL_OW 255
25989: PPUSH
25990: CALL_OW 321
25994: PUSH
25995: LD_INT 2
25997: EQUAL
25998: IFFALSE 26010
// eff := 70 else
26000: LD_ADDR_VAR 0 4
26004: PUSH
26005: LD_INT 70
26007: ST_TO_ADDR
26008: GO 26018
// eff := 30 ;
26010: LD_ADDR_VAR 0 4
26014: PUSH
26015: LD_INT 30
26017: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26018: LD_VAR 0 1
26022: PPUSH
26023: CALL_OW 250
26027: PPUSH
26028: LD_VAR 0 1
26032: PPUSH
26033: CALL_OW 251
26037: PPUSH
26038: LD_VAR 0 4
26042: PPUSH
26043: CALL_OW 495
// end ; end ;
26047: LD_VAR 0 2
26051: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26052: LD_INT 0
26054: PPUSH
// end ;
26055: LD_VAR 0 4
26059: RET
// export function SOS_Command ( cmd ) ; begin
26060: LD_INT 0
26062: PPUSH
// end ;
26063: LD_VAR 0 2
26067: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26068: LD_INT 0
26070: PPUSH
// end ;
26071: LD_VAR 0 6
26075: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26076: LD_INT 0
26078: PPUSH
26079: PPUSH
// if not vehicle or not factory then
26080: LD_VAR 0 1
26084: NOT
26085: PUSH
26086: LD_VAR 0 2
26090: NOT
26091: OR
26092: IFFALSE 26096
// exit ;
26094: GO 26327
// if factoryWaypoints >= factory then
26096: LD_EXP 101
26100: PUSH
26101: LD_VAR 0 2
26105: GREATEREQUAL
26106: IFFALSE 26327
// if factoryWaypoints [ factory ] then
26108: LD_EXP 101
26112: PUSH
26113: LD_VAR 0 2
26117: ARRAY
26118: IFFALSE 26327
// begin if GetControl ( vehicle ) = control_manual then
26120: LD_VAR 0 1
26124: PPUSH
26125: CALL_OW 263
26129: PUSH
26130: LD_INT 1
26132: EQUAL
26133: IFFALSE 26214
// begin driver := IsDrivenBy ( vehicle ) ;
26135: LD_ADDR_VAR 0 4
26139: PUSH
26140: LD_VAR 0 1
26144: PPUSH
26145: CALL_OW 311
26149: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26150: LD_VAR 0 4
26154: PPUSH
26155: LD_EXP 101
26159: PUSH
26160: LD_VAR 0 2
26164: ARRAY
26165: PUSH
26166: LD_INT 3
26168: ARRAY
26169: PPUSH
26170: LD_EXP 101
26174: PUSH
26175: LD_VAR 0 2
26179: ARRAY
26180: PUSH
26181: LD_INT 4
26183: ARRAY
26184: PPUSH
26185: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26189: LD_VAR 0 4
26193: PPUSH
26194: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26198: LD_VAR 0 4
26202: PPUSH
26203: LD_VAR 0 2
26207: PPUSH
26208: CALL_OW 180
// end else
26212: GO 26327
// if GetControl ( vehicle ) = control_remote then
26214: LD_VAR 0 1
26218: PPUSH
26219: CALL_OW 263
26223: PUSH
26224: LD_INT 2
26226: EQUAL
26227: IFFALSE 26288
// begin wait ( 0 0$2 ) ;
26229: LD_INT 70
26231: PPUSH
26232: CALL_OW 67
// if Connect ( vehicle ) then
26236: LD_VAR 0 1
26240: PPUSH
26241: CALL 38351 0 1
26245: IFFALSE 26286
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26247: LD_VAR 0 1
26251: PPUSH
26252: LD_EXP 101
26256: PUSH
26257: LD_VAR 0 2
26261: ARRAY
26262: PUSH
26263: LD_INT 3
26265: ARRAY
26266: PPUSH
26267: LD_EXP 101
26271: PUSH
26272: LD_VAR 0 2
26276: ARRAY
26277: PUSH
26278: LD_INT 4
26280: ARRAY
26281: PPUSH
26282: CALL_OW 171
// end else
26286: GO 26327
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26288: LD_VAR 0 1
26292: PPUSH
26293: LD_EXP 101
26297: PUSH
26298: LD_VAR 0 2
26302: ARRAY
26303: PUSH
26304: LD_INT 3
26306: ARRAY
26307: PPUSH
26308: LD_EXP 101
26312: PUSH
26313: LD_VAR 0 2
26317: ARRAY
26318: PUSH
26319: LD_INT 4
26321: ARRAY
26322: PPUSH
26323: CALL_OW 171
// end ; end ;
26327: LD_VAR 0 3
26331: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26332: LD_INT 0
26334: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26335: LD_VAR 0 1
26339: PUSH
26340: LD_INT 250
26342: EQUAL
26343: PUSH
26344: LD_VAR 0 2
26348: PPUSH
26349: CALL_OW 264
26353: PUSH
26354: LD_INT 81
26356: EQUAL
26357: AND
26358: IFFALSE 26379
// MinerPlaceMine ( unit , x , y ) ;
26360: LD_VAR 0 2
26364: PPUSH
26365: LD_VAR 0 4
26369: PPUSH
26370: LD_VAR 0 5
26374: PPUSH
26375: CALL 28764 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26379: LD_VAR 0 1
26383: PUSH
26384: LD_INT 251
26386: EQUAL
26387: PUSH
26388: LD_VAR 0 2
26392: PPUSH
26393: CALL_OW 264
26397: PUSH
26398: LD_INT 81
26400: EQUAL
26401: AND
26402: IFFALSE 26423
// MinerDetonateMine ( unit , x , y ) ;
26404: LD_VAR 0 2
26408: PPUSH
26409: LD_VAR 0 4
26413: PPUSH
26414: LD_VAR 0 5
26418: PPUSH
26419: CALL 29039 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26423: LD_VAR 0 1
26427: PUSH
26428: LD_INT 252
26430: EQUAL
26431: PUSH
26432: LD_VAR 0 2
26436: PPUSH
26437: CALL_OW 264
26441: PUSH
26442: LD_INT 81
26444: EQUAL
26445: AND
26446: IFFALSE 26467
// MinerCreateMinefield ( unit , x , y ) ;
26448: LD_VAR 0 2
26452: PPUSH
26453: LD_VAR 0 4
26457: PPUSH
26458: LD_VAR 0 5
26462: PPUSH
26463: CALL 29456 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26467: LD_VAR 0 1
26471: PUSH
26472: LD_INT 253
26474: EQUAL
26475: PUSH
26476: LD_VAR 0 2
26480: PPUSH
26481: CALL_OW 257
26485: PUSH
26486: LD_INT 5
26488: EQUAL
26489: AND
26490: IFFALSE 26511
// ComBinocular ( unit , x , y ) ;
26492: LD_VAR 0 2
26496: PPUSH
26497: LD_VAR 0 4
26501: PPUSH
26502: LD_VAR 0 5
26506: PPUSH
26507: CALL 29825 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26511: LD_VAR 0 1
26515: PUSH
26516: LD_INT 254
26518: EQUAL
26519: PUSH
26520: LD_VAR 0 2
26524: PPUSH
26525: CALL_OW 264
26529: PUSH
26530: LD_INT 99
26532: EQUAL
26533: AND
26534: PUSH
26535: LD_VAR 0 3
26539: PPUSH
26540: CALL_OW 263
26544: PUSH
26545: LD_INT 3
26547: EQUAL
26548: AND
26549: IFFALSE 26565
// HackDestroyVehicle ( unit , selectedUnit ) ;
26551: LD_VAR 0 2
26555: PPUSH
26556: LD_VAR 0 3
26560: PPUSH
26561: CALL 28128 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26565: LD_VAR 0 1
26569: PUSH
26570: LD_INT 255
26572: EQUAL
26573: PUSH
26574: LD_VAR 0 2
26578: PPUSH
26579: CALL_OW 264
26583: PUSH
26584: LD_INT 14
26586: PUSH
26587: LD_INT 53
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: IN
26594: AND
26595: PUSH
26596: LD_VAR 0 4
26600: PPUSH
26601: LD_VAR 0 5
26605: PPUSH
26606: CALL_OW 488
26610: AND
26611: IFFALSE 26635
// CutTreeXYR ( unit , x , y , 12 ) ;
26613: LD_VAR 0 2
26617: PPUSH
26618: LD_VAR 0 4
26622: PPUSH
26623: LD_VAR 0 5
26627: PPUSH
26628: LD_INT 12
26630: PPUSH
26631: CALL 26698 0 4
// if cmd = 256 then
26635: LD_VAR 0 1
26639: PUSH
26640: LD_INT 256
26642: EQUAL
26643: IFFALSE 26664
// SetFactoryWaypoint ( unit , x , y ) ;
26645: LD_VAR 0 2
26649: PPUSH
26650: LD_VAR 0 4
26654: PPUSH
26655: LD_VAR 0 5
26659: PPUSH
26660: CALL 24482 0 3
// if cmd = 257 then
26664: LD_VAR 0 1
26668: PUSH
26669: LD_INT 257
26671: EQUAL
26672: IFFALSE 26693
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26674: LD_VAR 0 2
26678: PPUSH
26679: LD_VAR 0 4
26683: PPUSH
26684: LD_VAR 0 5
26688: PPUSH
26689: CALL 24844 0 3
// end ;
26693: LD_VAR 0 6
26697: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26698: LD_INT 0
26700: PPUSH
26701: PPUSH
26702: PPUSH
26703: PPUSH
26704: PPUSH
26705: PPUSH
26706: PPUSH
26707: PPUSH
26708: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26709: LD_VAR 0 1
26713: NOT
26714: PUSH
26715: LD_VAR 0 2
26719: PPUSH
26720: LD_VAR 0 3
26724: PPUSH
26725: CALL_OW 488
26729: NOT
26730: OR
26731: PUSH
26732: LD_VAR 0 4
26736: NOT
26737: OR
26738: IFFALSE 26742
// exit ;
26740: GO 27082
// list := [ ] ;
26742: LD_ADDR_VAR 0 13
26746: PUSH
26747: EMPTY
26748: ST_TO_ADDR
// if x - r < 0 then
26749: LD_VAR 0 2
26753: PUSH
26754: LD_VAR 0 4
26758: MINUS
26759: PUSH
26760: LD_INT 0
26762: LESS
26763: IFFALSE 26775
// min_x := 0 else
26765: LD_ADDR_VAR 0 7
26769: PUSH
26770: LD_INT 0
26772: ST_TO_ADDR
26773: GO 26791
// min_x := x - r ;
26775: LD_ADDR_VAR 0 7
26779: PUSH
26780: LD_VAR 0 2
26784: PUSH
26785: LD_VAR 0 4
26789: MINUS
26790: ST_TO_ADDR
// if y - r < 0 then
26791: LD_VAR 0 3
26795: PUSH
26796: LD_VAR 0 4
26800: MINUS
26801: PUSH
26802: LD_INT 0
26804: LESS
26805: IFFALSE 26817
// min_y := 0 else
26807: LD_ADDR_VAR 0 8
26811: PUSH
26812: LD_INT 0
26814: ST_TO_ADDR
26815: GO 26833
// min_y := y - r ;
26817: LD_ADDR_VAR 0 8
26821: PUSH
26822: LD_VAR 0 3
26826: PUSH
26827: LD_VAR 0 4
26831: MINUS
26832: ST_TO_ADDR
// max_x := x + r ;
26833: LD_ADDR_VAR 0 9
26837: PUSH
26838: LD_VAR 0 2
26842: PUSH
26843: LD_VAR 0 4
26847: PLUS
26848: ST_TO_ADDR
// max_y := y + r ;
26849: LD_ADDR_VAR 0 10
26853: PUSH
26854: LD_VAR 0 3
26858: PUSH
26859: LD_VAR 0 4
26863: PLUS
26864: ST_TO_ADDR
// for _x = min_x to max_x do
26865: LD_ADDR_VAR 0 11
26869: PUSH
26870: DOUBLE
26871: LD_VAR 0 7
26875: DEC
26876: ST_TO_ADDR
26877: LD_VAR 0 9
26881: PUSH
26882: FOR_TO
26883: IFFALSE 27000
// for _y = min_y to max_y do
26885: LD_ADDR_VAR 0 12
26889: PUSH
26890: DOUBLE
26891: LD_VAR 0 8
26895: DEC
26896: ST_TO_ADDR
26897: LD_VAR 0 10
26901: PUSH
26902: FOR_TO
26903: IFFALSE 26996
// begin if not ValidHex ( _x , _y ) then
26905: LD_VAR 0 11
26909: PPUSH
26910: LD_VAR 0 12
26914: PPUSH
26915: CALL_OW 488
26919: NOT
26920: IFFALSE 26924
// continue ;
26922: GO 26902
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26924: LD_VAR 0 11
26928: PPUSH
26929: LD_VAR 0 12
26933: PPUSH
26934: CALL_OW 351
26938: PUSH
26939: LD_VAR 0 11
26943: PPUSH
26944: LD_VAR 0 12
26948: PPUSH
26949: CALL_OW 554
26953: AND
26954: IFFALSE 26994
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26956: LD_ADDR_VAR 0 13
26960: PUSH
26961: LD_VAR 0 13
26965: PPUSH
26966: LD_VAR 0 13
26970: PUSH
26971: LD_INT 1
26973: PLUS
26974: PPUSH
26975: LD_VAR 0 11
26979: PUSH
26980: LD_VAR 0 12
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PPUSH
26989: CALL_OW 2
26993: ST_TO_ADDR
// end ;
26994: GO 26902
26996: POP
26997: POP
26998: GO 26882
27000: POP
27001: POP
// if not list then
27002: LD_VAR 0 13
27006: NOT
27007: IFFALSE 27011
// exit ;
27009: GO 27082
// for i in list do
27011: LD_ADDR_VAR 0 6
27015: PUSH
27016: LD_VAR 0 13
27020: PUSH
27021: FOR_IN
27022: IFFALSE 27080
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27024: LD_VAR 0 1
27028: PPUSH
27029: LD_STRING M
27031: PUSH
27032: LD_VAR 0 6
27036: PUSH
27037: LD_INT 1
27039: ARRAY
27040: PUSH
27041: LD_VAR 0 6
27045: PUSH
27046: LD_INT 2
27048: ARRAY
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: LD_INT 0
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: PUSH
27071: EMPTY
27072: LIST
27073: PPUSH
27074: CALL_OW 447
27078: GO 27021
27080: POP
27081: POP
// end ;
27082: LD_VAR 0 5
27086: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27087: LD_EXP 104
27091: NOT
27092: IFFALSE 27142
27094: GO 27096
27096: DISABLE
// begin initHack := true ;
27097: LD_ADDR_EXP 104
27101: PUSH
27102: LD_INT 1
27104: ST_TO_ADDR
// hackTanks := [ ] ;
27105: LD_ADDR_EXP 105
27109: PUSH
27110: EMPTY
27111: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27112: LD_ADDR_EXP 106
27116: PUSH
27117: EMPTY
27118: ST_TO_ADDR
// hackLimit := 3 ;
27119: LD_ADDR_EXP 107
27123: PUSH
27124: LD_INT 3
27126: ST_TO_ADDR
// hackDist := 12 ;
27127: LD_ADDR_EXP 108
27131: PUSH
27132: LD_INT 12
27134: ST_TO_ADDR
// hackCounter := [ ] ;
27135: LD_ADDR_EXP 109
27139: PUSH
27140: EMPTY
27141: ST_TO_ADDR
// end ;
27142: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27143: LD_EXP 104
27147: PUSH
27148: LD_INT 34
27150: PUSH
27151: LD_INT 99
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PPUSH
27158: CALL_OW 69
27162: AND
27163: IFFALSE 27416
27165: GO 27167
27167: DISABLE
27168: LD_INT 0
27170: PPUSH
27171: PPUSH
// begin enable ;
27172: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27173: LD_ADDR_VAR 0 1
27177: PUSH
27178: LD_INT 34
27180: PUSH
27181: LD_INT 99
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PPUSH
27188: CALL_OW 69
27192: PUSH
27193: FOR_IN
27194: IFFALSE 27414
// begin if not i in hackTanks then
27196: LD_VAR 0 1
27200: PUSH
27201: LD_EXP 105
27205: IN
27206: NOT
27207: IFFALSE 27290
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27209: LD_ADDR_EXP 105
27213: PUSH
27214: LD_EXP 105
27218: PPUSH
27219: LD_EXP 105
27223: PUSH
27224: LD_INT 1
27226: PLUS
27227: PPUSH
27228: LD_VAR 0 1
27232: PPUSH
27233: CALL_OW 1
27237: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27238: LD_ADDR_EXP 106
27242: PUSH
27243: LD_EXP 106
27247: PPUSH
27248: LD_EXP 106
27252: PUSH
27253: LD_INT 1
27255: PLUS
27256: PPUSH
27257: EMPTY
27258: PPUSH
27259: CALL_OW 1
27263: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27264: LD_ADDR_EXP 109
27268: PUSH
27269: LD_EXP 109
27273: PPUSH
27274: LD_EXP 109
27278: PUSH
27279: LD_INT 1
27281: PLUS
27282: PPUSH
27283: EMPTY
27284: PPUSH
27285: CALL_OW 1
27289: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27290: LD_VAR 0 1
27294: PPUSH
27295: CALL_OW 302
27299: NOT
27300: IFFALSE 27313
// begin HackUnlinkAll ( i ) ;
27302: LD_VAR 0 1
27306: PPUSH
27307: CALL 27419 0 1
// continue ;
27311: GO 27193
// end ; HackCheckCapturedStatus ( i ) ;
27313: LD_VAR 0 1
27317: PPUSH
27318: CALL 27862 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27322: LD_ADDR_VAR 0 2
27326: PUSH
27327: LD_INT 81
27329: PUSH
27330: LD_VAR 0 1
27334: PPUSH
27335: CALL_OW 255
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 33
27346: PUSH
27347: LD_INT 3
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 91
27356: PUSH
27357: LD_VAR 0 1
27361: PUSH
27362: LD_EXP 108
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 50
27374: PUSH
27375: EMPTY
27376: LIST
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: PPUSH
27384: CALL_OW 69
27388: ST_TO_ADDR
// if not tmp then
27389: LD_VAR 0 2
27393: NOT
27394: IFFALSE 27398
// continue ;
27396: GO 27193
// HackLink ( i , tmp ) ;
27398: LD_VAR 0 1
27402: PPUSH
27403: LD_VAR 0 2
27407: PPUSH
27408: CALL 27555 0 2
// end ;
27412: GO 27193
27414: POP
27415: POP
// end ;
27416: PPOPN 2
27418: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27419: LD_INT 0
27421: PPUSH
27422: PPUSH
27423: PPUSH
// if not hack in hackTanks then
27424: LD_VAR 0 1
27428: PUSH
27429: LD_EXP 105
27433: IN
27434: NOT
27435: IFFALSE 27439
// exit ;
27437: GO 27550
// index := GetElementIndex ( hackTanks , hack ) ;
27439: LD_ADDR_VAR 0 4
27443: PUSH
27444: LD_EXP 105
27448: PPUSH
27449: LD_VAR 0 1
27453: PPUSH
27454: CALL 35167 0 2
27458: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27459: LD_EXP 106
27463: PUSH
27464: LD_VAR 0 4
27468: ARRAY
27469: IFFALSE 27550
// begin for i in hackTanksCaptured [ index ] do
27471: LD_ADDR_VAR 0 3
27475: PUSH
27476: LD_EXP 106
27480: PUSH
27481: LD_VAR 0 4
27485: ARRAY
27486: PUSH
27487: FOR_IN
27488: IFFALSE 27514
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27490: LD_VAR 0 3
27494: PUSH
27495: LD_INT 1
27497: ARRAY
27498: PPUSH
27499: LD_VAR 0 3
27503: PUSH
27504: LD_INT 2
27506: ARRAY
27507: PPUSH
27508: CALL_OW 235
27512: GO 27487
27514: POP
27515: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27516: LD_ADDR_EXP 106
27520: PUSH
27521: LD_EXP 106
27525: PPUSH
27526: LD_VAR 0 4
27530: PPUSH
27531: EMPTY
27532: PPUSH
27533: CALL_OW 1
27537: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27538: LD_VAR 0 1
27542: PPUSH
27543: LD_INT 0
27545: PPUSH
27546: CALL_OW 505
// end ; end ;
27550: LD_VAR 0 2
27554: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27555: LD_INT 0
27557: PPUSH
27558: PPUSH
27559: PPUSH
// if not hack in hackTanks or not vehicles then
27560: LD_VAR 0 1
27564: PUSH
27565: LD_EXP 105
27569: IN
27570: NOT
27571: PUSH
27572: LD_VAR 0 2
27576: NOT
27577: OR
27578: IFFALSE 27582
// exit ;
27580: GO 27857
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27582: LD_ADDR_VAR 0 2
27586: PUSH
27587: LD_VAR 0 1
27591: PPUSH
27592: LD_VAR 0 2
27596: PPUSH
27597: LD_INT 1
27599: PPUSH
27600: LD_INT 1
27602: PPUSH
27603: CALL 35817 0 4
27607: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27608: LD_ADDR_VAR 0 5
27612: PUSH
27613: LD_EXP 105
27617: PPUSH
27618: LD_VAR 0 1
27622: PPUSH
27623: CALL 35167 0 2
27627: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27628: LD_EXP 106
27632: PUSH
27633: LD_VAR 0 5
27637: ARRAY
27638: PUSH
27639: LD_EXP 107
27643: LESS
27644: IFFALSE 27833
// begin for i := 1 to vehicles do
27646: LD_ADDR_VAR 0 4
27650: PUSH
27651: DOUBLE
27652: LD_INT 1
27654: DEC
27655: ST_TO_ADDR
27656: LD_VAR 0 2
27660: PUSH
27661: FOR_TO
27662: IFFALSE 27831
// begin if hackTanksCaptured [ index ] = hackLimit then
27664: LD_EXP 106
27668: PUSH
27669: LD_VAR 0 5
27673: ARRAY
27674: PUSH
27675: LD_EXP 107
27679: EQUAL
27680: IFFALSE 27684
// break ;
27682: GO 27831
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27684: LD_ADDR_EXP 109
27688: PUSH
27689: LD_EXP 109
27693: PPUSH
27694: LD_VAR 0 5
27698: PPUSH
27699: LD_EXP 109
27703: PUSH
27704: LD_VAR 0 5
27708: ARRAY
27709: PUSH
27710: LD_INT 1
27712: PLUS
27713: PPUSH
27714: CALL_OW 1
27718: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27719: LD_ADDR_EXP 106
27723: PUSH
27724: LD_EXP 106
27728: PPUSH
27729: LD_VAR 0 5
27733: PUSH
27734: LD_EXP 106
27738: PUSH
27739: LD_VAR 0 5
27743: ARRAY
27744: PUSH
27745: LD_INT 1
27747: PLUS
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PPUSH
27753: LD_VAR 0 2
27757: PUSH
27758: LD_VAR 0 4
27762: ARRAY
27763: PUSH
27764: LD_VAR 0 2
27768: PUSH
27769: LD_VAR 0 4
27773: ARRAY
27774: PPUSH
27775: CALL_OW 255
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PPUSH
27784: CALL 35382 0 3
27788: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27789: LD_VAR 0 2
27793: PUSH
27794: LD_VAR 0 4
27798: ARRAY
27799: PPUSH
27800: LD_VAR 0 1
27804: PPUSH
27805: CALL_OW 255
27809: PPUSH
27810: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27814: LD_VAR 0 2
27818: PUSH
27819: LD_VAR 0 4
27823: ARRAY
27824: PPUSH
27825: CALL_OW 141
// end ;
27829: GO 27661
27831: POP
27832: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27833: LD_VAR 0 1
27837: PPUSH
27838: LD_EXP 106
27842: PUSH
27843: LD_VAR 0 5
27847: ARRAY
27848: PUSH
27849: LD_INT 0
27851: PLUS
27852: PPUSH
27853: CALL_OW 505
// end ;
27857: LD_VAR 0 3
27861: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27862: LD_INT 0
27864: PPUSH
27865: PPUSH
27866: PPUSH
27867: PPUSH
// if not hack in hackTanks then
27868: LD_VAR 0 1
27872: PUSH
27873: LD_EXP 105
27877: IN
27878: NOT
27879: IFFALSE 27883
// exit ;
27881: GO 28123
// index := GetElementIndex ( hackTanks , hack ) ;
27883: LD_ADDR_VAR 0 4
27887: PUSH
27888: LD_EXP 105
27892: PPUSH
27893: LD_VAR 0 1
27897: PPUSH
27898: CALL 35167 0 2
27902: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27903: LD_ADDR_VAR 0 3
27907: PUSH
27908: DOUBLE
27909: LD_EXP 106
27913: PUSH
27914: LD_VAR 0 4
27918: ARRAY
27919: INC
27920: ST_TO_ADDR
27921: LD_INT 1
27923: PUSH
27924: FOR_DOWNTO
27925: IFFALSE 28097
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27927: LD_ADDR_VAR 0 5
27931: PUSH
27932: LD_EXP 106
27936: PUSH
27937: LD_VAR 0 4
27941: ARRAY
27942: PUSH
27943: LD_VAR 0 3
27947: ARRAY
27948: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27949: LD_VAR 0 5
27953: PUSH
27954: LD_INT 1
27956: ARRAY
27957: PPUSH
27958: CALL_OW 302
27962: NOT
27963: PUSH
27964: LD_VAR 0 5
27968: PUSH
27969: LD_INT 1
27971: ARRAY
27972: PPUSH
27973: CALL_OW 255
27977: PUSH
27978: LD_VAR 0 1
27982: PPUSH
27983: CALL_OW 255
27987: NONEQUAL
27988: OR
27989: IFFALSE 28095
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27991: LD_VAR 0 5
27995: PUSH
27996: LD_INT 1
27998: ARRAY
27999: PPUSH
28000: CALL_OW 305
28004: PUSH
28005: LD_VAR 0 5
28009: PUSH
28010: LD_INT 1
28012: ARRAY
28013: PPUSH
28014: CALL_OW 255
28018: PUSH
28019: LD_VAR 0 1
28023: PPUSH
28024: CALL_OW 255
28028: EQUAL
28029: AND
28030: IFFALSE 28054
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28032: LD_VAR 0 5
28036: PUSH
28037: LD_INT 1
28039: ARRAY
28040: PPUSH
28041: LD_VAR 0 5
28045: PUSH
28046: LD_INT 2
28048: ARRAY
28049: PPUSH
28050: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28054: LD_ADDR_EXP 106
28058: PUSH
28059: LD_EXP 106
28063: PPUSH
28064: LD_VAR 0 4
28068: PPUSH
28069: LD_EXP 106
28073: PUSH
28074: LD_VAR 0 4
28078: ARRAY
28079: PPUSH
28080: LD_VAR 0 3
28084: PPUSH
28085: CALL_OW 3
28089: PPUSH
28090: CALL_OW 1
28094: ST_TO_ADDR
// end ; end ;
28095: GO 27924
28097: POP
28098: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28099: LD_VAR 0 1
28103: PPUSH
28104: LD_EXP 106
28108: PUSH
28109: LD_VAR 0 4
28113: ARRAY
28114: PUSH
28115: LD_INT 0
28117: PLUS
28118: PPUSH
28119: CALL_OW 505
// end ;
28123: LD_VAR 0 2
28127: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28128: LD_INT 0
28130: PPUSH
28131: PPUSH
28132: PPUSH
28133: PPUSH
// if not hack in hackTanks then
28134: LD_VAR 0 1
28138: PUSH
28139: LD_EXP 105
28143: IN
28144: NOT
28145: IFFALSE 28149
// exit ;
28147: GO 28234
// index := GetElementIndex ( hackTanks , hack ) ;
28149: LD_ADDR_VAR 0 5
28153: PUSH
28154: LD_EXP 105
28158: PPUSH
28159: LD_VAR 0 1
28163: PPUSH
28164: CALL 35167 0 2
28168: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28169: LD_ADDR_VAR 0 4
28173: PUSH
28174: DOUBLE
28175: LD_INT 1
28177: DEC
28178: ST_TO_ADDR
28179: LD_EXP 106
28183: PUSH
28184: LD_VAR 0 5
28188: ARRAY
28189: PUSH
28190: FOR_TO
28191: IFFALSE 28232
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28193: LD_EXP 106
28197: PUSH
28198: LD_VAR 0 5
28202: ARRAY
28203: PUSH
28204: LD_VAR 0 4
28208: ARRAY
28209: PUSH
28210: LD_INT 1
28212: ARRAY
28213: PUSH
28214: LD_VAR 0 2
28218: EQUAL
28219: IFFALSE 28230
// KillUnit ( vehicle ) ;
28221: LD_VAR 0 2
28225: PPUSH
28226: CALL_OW 66
28230: GO 28190
28232: POP
28233: POP
// end ;
28234: LD_VAR 0 3
28238: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28239: LD_EXP 110
28243: NOT
28244: IFFALSE 28279
28246: GO 28248
28248: DISABLE
// begin initMiner := true ;
28249: LD_ADDR_EXP 110
28253: PUSH
28254: LD_INT 1
28256: ST_TO_ADDR
// minersList := [ ] ;
28257: LD_ADDR_EXP 111
28261: PUSH
28262: EMPTY
28263: ST_TO_ADDR
// minerMinesList := [ ] ;
28264: LD_ADDR_EXP 112
28268: PUSH
28269: EMPTY
28270: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28271: LD_ADDR_EXP 113
28275: PUSH
28276: LD_INT 5
28278: ST_TO_ADDR
// end ;
28279: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28280: LD_EXP 110
28284: PUSH
28285: LD_INT 34
28287: PUSH
28288: LD_INT 81
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PPUSH
28295: CALL_OW 69
28299: AND
28300: IFFALSE 28761
28302: GO 28304
28304: DISABLE
28305: LD_INT 0
28307: PPUSH
28308: PPUSH
28309: PPUSH
28310: PPUSH
// begin enable ;
28311: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28312: LD_ADDR_VAR 0 1
28316: PUSH
28317: LD_INT 34
28319: PUSH
28320: LD_INT 81
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PPUSH
28327: CALL_OW 69
28331: PUSH
28332: FOR_IN
28333: IFFALSE 28405
// begin if not i in minersList then
28335: LD_VAR 0 1
28339: PUSH
28340: LD_EXP 111
28344: IN
28345: NOT
28346: IFFALSE 28403
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28348: LD_ADDR_EXP 111
28352: PUSH
28353: LD_EXP 111
28357: PPUSH
28358: LD_EXP 111
28362: PUSH
28363: LD_INT 1
28365: PLUS
28366: PPUSH
28367: LD_VAR 0 1
28371: PPUSH
28372: CALL_OW 1
28376: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28377: LD_ADDR_EXP 112
28381: PUSH
28382: LD_EXP 112
28386: PPUSH
28387: LD_EXP 112
28391: PUSH
28392: LD_INT 1
28394: PLUS
28395: PPUSH
28396: EMPTY
28397: PPUSH
28398: CALL_OW 1
28402: ST_TO_ADDR
// end end ;
28403: GO 28332
28405: POP
28406: POP
// for i := minerMinesList downto 1 do
28407: LD_ADDR_VAR 0 1
28411: PUSH
28412: DOUBLE
28413: LD_EXP 112
28417: INC
28418: ST_TO_ADDR
28419: LD_INT 1
28421: PUSH
28422: FOR_DOWNTO
28423: IFFALSE 28759
// begin if IsLive ( minersList [ i ] ) then
28425: LD_EXP 111
28429: PUSH
28430: LD_VAR 0 1
28434: ARRAY
28435: PPUSH
28436: CALL_OW 300
28440: IFFALSE 28468
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28442: LD_EXP 111
28446: PUSH
28447: LD_VAR 0 1
28451: ARRAY
28452: PPUSH
28453: LD_EXP 112
28457: PUSH
28458: LD_VAR 0 1
28462: ARRAY
28463: PPUSH
28464: CALL_OW 505
// if not minerMinesList [ i ] then
28468: LD_EXP 112
28472: PUSH
28473: LD_VAR 0 1
28477: ARRAY
28478: NOT
28479: IFFALSE 28483
// continue ;
28481: GO 28422
// for j := minerMinesList [ i ] downto 1 do
28483: LD_ADDR_VAR 0 2
28487: PUSH
28488: DOUBLE
28489: LD_EXP 112
28493: PUSH
28494: LD_VAR 0 1
28498: ARRAY
28499: INC
28500: ST_TO_ADDR
28501: LD_INT 1
28503: PUSH
28504: FOR_DOWNTO
28505: IFFALSE 28755
// begin side := GetSide ( minersList [ i ] ) ;
28507: LD_ADDR_VAR 0 3
28511: PUSH
28512: LD_EXP 111
28516: PUSH
28517: LD_VAR 0 1
28521: ARRAY
28522: PPUSH
28523: CALL_OW 255
28527: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28528: LD_ADDR_VAR 0 4
28532: PUSH
28533: LD_EXP 112
28537: PUSH
28538: LD_VAR 0 1
28542: ARRAY
28543: PUSH
28544: LD_VAR 0 2
28548: ARRAY
28549: PUSH
28550: LD_INT 1
28552: ARRAY
28553: PPUSH
28554: LD_EXP 112
28558: PUSH
28559: LD_VAR 0 1
28563: ARRAY
28564: PUSH
28565: LD_VAR 0 2
28569: ARRAY
28570: PUSH
28571: LD_INT 2
28573: ARRAY
28574: PPUSH
28575: CALL_OW 428
28579: ST_TO_ADDR
// if not tmp then
28580: LD_VAR 0 4
28584: NOT
28585: IFFALSE 28589
// continue ;
28587: GO 28504
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28589: LD_VAR 0 4
28593: PUSH
28594: LD_INT 81
28596: PUSH
28597: LD_VAR 0 3
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PPUSH
28606: CALL_OW 69
28610: IN
28611: PUSH
28612: LD_EXP 112
28616: PUSH
28617: LD_VAR 0 1
28621: ARRAY
28622: PUSH
28623: LD_VAR 0 2
28627: ARRAY
28628: PUSH
28629: LD_INT 1
28631: ARRAY
28632: PPUSH
28633: LD_EXP 112
28637: PUSH
28638: LD_VAR 0 1
28642: ARRAY
28643: PUSH
28644: LD_VAR 0 2
28648: ARRAY
28649: PUSH
28650: LD_INT 2
28652: ARRAY
28653: PPUSH
28654: CALL_OW 458
28658: AND
28659: IFFALSE 28753
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28661: LD_EXP 112
28665: PUSH
28666: LD_VAR 0 1
28670: ARRAY
28671: PUSH
28672: LD_VAR 0 2
28676: ARRAY
28677: PUSH
28678: LD_INT 1
28680: ARRAY
28681: PPUSH
28682: LD_EXP 112
28686: PUSH
28687: LD_VAR 0 1
28691: ARRAY
28692: PUSH
28693: LD_VAR 0 2
28697: ARRAY
28698: PUSH
28699: LD_INT 2
28701: ARRAY
28702: PPUSH
28703: LD_VAR 0 3
28707: PPUSH
28708: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28712: LD_ADDR_EXP 112
28716: PUSH
28717: LD_EXP 112
28721: PPUSH
28722: LD_VAR 0 1
28726: PPUSH
28727: LD_EXP 112
28731: PUSH
28732: LD_VAR 0 1
28736: ARRAY
28737: PPUSH
28738: LD_VAR 0 2
28742: PPUSH
28743: CALL_OW 3
28747: PPUSH
28748: CALL_OW 1
28752: ST_TO_ADDR
// end ; end ;
28753: GO 28504
28755: POP
28756: POP
// end ;
28757: GO 28422
28759: POP
28760: POP
// end ;
28761: PPOPN 4
28763: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28764: LD_INT 0
28766: PPUSH
28767: PPUSH
// result := false ;
28768: LD_ADDR_VAR 0 4
28772: PUSH
28773: LD_INT 0
28775: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28776: LD_VAR 0 1
28780: PPUSH
28781: CALL_OW 264
28785: PUSH
28786: LD_INT 81
28788: EQUAL
28789: NOT
28790: IFFALSE 28794
// exit ;
28792: GO 29034
// index := GetElementIndex ( minersList , unit ) ;
28794: LD_ADDR_VAR 0 5
28798: PUSH
28799: LD_EXP 111
28803: PPUSH
28804: LD_VAR 0 1
28808: PPUSH
28809: CALL 35167 0 2
28813: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28814: LD_EXP 112
28818: PUSH
28819: LD_VAR 0 5
28823: ARRAY
28824: PUSH
28825: LD_EXP 113
28829: GREATEREQUAL
28830: IFFALSE 28834
// exit ;
28832: GO 29034
// ComMoveXY ( unit , x , y ) ;
28834: LD_VAR 0 1
28838: PPUSH
28839: LD_VAR 0 2
28843: PPUSH
28844: LD_VAR 0 3
28848: PPUSH
28849: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28853: LD_INT 35
28855: PPUSH
28856: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28860: LD_VAR 0 1
28864: PPUSH
28865: LD_VAR 0 2
28869: PPUSH
28870: LD_VAR 0 3
28874: PPUSH
28875: CALL 66503 0 3
28879: NOT
28880: PUSH
28881: LD_VAR 0 1
28885: PPUSH
28886: CALL_OW 314
28890: AND
28891: IFFALSE 28895
// exit ;
28893: GO 29034
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28895: LD_VAR 0 2
28899: PPUSH
28900: LD_VAR 0 3
28904: PPUSH
28905: CALL_OW 428
28909: PUSH
28910: LD_VAR 0 1
28914: EQUAL
28915: PUSH
28916: LD_VAR 0 1
28920: PPUSH
28921: CALL_OW 314
28925: NOT
28926: AND
28927: IFFALSE 28853
// PlaySoundXY ( x , y , PlantMine ) ;
28929: LD_VAR 0 2
28933: PPUSH
28934: LD_VAR 0 3
28938: PPUSH
28939: LD_STRING PlantMine
28941: PPUSH
28942: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28946: LD_VAR 0 2
28950: PPUSH
28951: LD_VAR 0 3
28955: PPUSH
28956: LD_VAR 0 1
28960: PPUSH
28961: CALL_OW 255
28965: PPUSH
28966: LD_INT 0
28968: PPUSH
28969: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28973: LD_ADDR_EXP 112
28977: PUSH
28978: LD_EXP 112
28982: PPUSH
28983: LD_VAR 0 5
28987: PUSH
28988: LD_EXP 112
28992: PUSH
28993: LD_VAR 0 5
28997: ARRAY
28998: PUSH
28999: LD_INT 1
29001: PLUS
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PPUSH
29007: LD_VAR 0 2
29011: PUSH
29012: LD_VAR 0 3
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PPUSH
29021: CALL 35382 0 3
29025: ST_TO_ADDR
// result := true ;
29026: LD_ADDR_VAR 0 4
29030: PUSH
29031: LD_INT 1
29033: ST_TO_ADDR
// end ;
29034: LD_VAR 0 4
29038: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29039: LD_INT 0
29041: PPUSH
29042: PPUSH
29043: PPUSH
// if not unit in minersList then
29044: LD_VAR 0 1
29048: PUSH
29049: LD_EXP 111
29053: IN
29054: NOT
29055: IFFALSE 29059
// exit ;
29057: GO 29451
// index := GetElementIndex ( minersList , unit ) ;
29059: LD_ADDR_VAR 0 6
29063: PUSH
29064: LD_EXP 111
29068: PPUSH
29069: LD_VAR 0 1
29073: PPUSH
29074: CALL 35167 0 2
29078: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29079: LD_ADDR_VAR 0 5
29083: PUSH
29084: DOUBLE
29085: LD_EXP 112
29089: PUSH
29090: LD_VAR 0 6
29094: ARRAY
29095: INC
29096: ST_TO_ADDR
29097: LD_INT 1
29099: PUSH
29100: FOR_DOWNTO
29101: IFFALSE 29262
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29103: LD_EXP 112
29107: PUSH
29108: LD_VAR 0 6
29112: ARRAY
29113: PUSH
29114: LD_VAR 0 5
29118: ARRAY
29119: PUSH
29120: LD_INT 1
29122: ARRAY
29123: PUSH
29124: LD_VAR 0 2
29128: EQUAL
29129: PUSH
29130: LD_EXP 112
29134: PUSH
29135: LD_VAR 0 6
29139: ARRAY
29140: PUSH
29141: LD_VAR 0 5
29145: ARRAY
29146: PUSH
29147: LD_INT 2
29149: ARRAY
29150: PUSH
29151: LD_VAR 0 3
29155: EQUAL
29156: AND
29157: IFFALSE 29260
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29159: LD_EXP 112
29163: PUSH
29164: LD_VAR 0 6
29168: ARRAY
29169: PUSH
29170: LD_VAR 0 5
29174: ARRAY
29175: PUSH
29176: LD_INT 1
29178: ARRAY
29179: PPUSH
29180: LD_EXP 112
29184: PUSH
29185: LD_VAR 0 6
29189: ARRAY
29190: PUSH
29191: LD_VAR 0 5
29195: ARRAY
29196: PUSH
29197: LD_INT 2
29199: ARRAY
29200: PPUSH
29201: LD_VAR 0 1
29205: PPUSH
29206: CALL_OW 255
29210: PPUSH
29211: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29215: LD_ADDR_EXP 112
29219: PUSH
29220: LD_EXP 112
29224: PPUSH
29225: LD_VAR 0 6
29229: PPUSH
29230: LD_EXP 112
29234: PUSH
29235: LD_VAR 0 6
29239: ARRAY
29240: PPUSH
29241: LD_VAR 0 5
29245: PPUSH
29246: CALL_OW 3
29250: PPUSH
29251: CALL_OW 1
29255: ST_TO_ADDR
// exit ;
29256: POP
29257: POP
29258: GO 29451
// end ; end ;
29260: GO 29100
29262: POP
29263: POP
// for i := minerMinesList [ index ] downto 1 do
29264: LD_ADDR_VAR 0 5
29268: PUSH
29269: DOUBLE
29270: LD_EXP 112
29274: PUSH
29275: LD_VAR 0 6
29279: ARRAY
29280: INC
29281: ST_TO_ADDR
29282: LD_INT 1
29284: PUSH
29285: FOR_DOWNTO
29286: IFFALSE 29449
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29288: LD_EXP 112
29292: PUSH
29293: LD_VAR 0 6
29297: ARRAY
29298: PUSH
29299: LD_VAR 0 5
29303: ARRAY
29304: PUSH
29305: LD_INT 1
29307: ARRAY
29308: PPUSH
29309: LD_EXP 112
29313: PUSH
29314: LD_VAR 0 6
29318: ARRAY
29319: PUSH
29320: LD_VAR 0 5
29324: ARRAY
29325: PUSH
29326: LD_INT 2
29328: ARRAY
29329: PPUSH
29330: LD_VAR 0 2
29334: PPUSH
29335: LD_VAR 0 3
29339: PPUSH
29340: CALL_OW 298
29344: PUSH
29345: LD_INT 6
29347: LESS
29348: IFFALSE 29447
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29350: LD_EXP 112
29354: PUSH
29355: LD_VAR 0 6
29359: ARRAY
29360: PUSH
29361: LD_VAR 0 5
29365: ARRAY
29366: PUSH
29367: LD_INT 1
29369: ARRAY
29370: PPUSH
29371: LD_EXP 112
29375: PUSH
29376: LD_VAR 0 6
29380: ARRAY
29381: PUSH
29382: LD_VAR 0 5
29386: ARRAY
29387: PUSH
29388: LD_INT 2
29390: ARRAY
29391: PPUSH
29392: LD_VAR 0 1
29396: PPUSH
29397: CALL_OW 255
29401: PPUSH
29402: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29406: LD_ADDR_EXP 112
29410: PUSH
29411: LD_EXP 112
29415: PPUSH
29416: LD_VAR 0 6
29420: PPUSH
29421: LD_EXP 112
29425: PUSH
29426: LD_VAR 0 6
29430: ARRAY
29431: PPUSH
29432: LD_VAR 0 5
29436: PPUSH
29437: CALL_OW 3
29441: PPUSH
29442: CALL_OW 1
29446: ST_TO_ADDR
// end ; end ;
29447: GO 29285
29449: POP
29450: POP
// end ;
29451: LD_VAR 0 4
29455: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29456: LD_INT 0
29458: PPUSH
29459: PPUSH
29460: PPUSH
29461: PPUSH
29462: PPUSH
29463: PPUSH
29464: PPUSH
29465: PPUSH
29466: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29467: LD_VAR 0 1
29471: PPUSH
29472: CALL_OW 264
29476: PUSH
29477: LD_INT 81
29479: EQUAL
29480: NOT
29481: PUSH
29482: LD_VAR 0 1
29486: PUSH
29487: LD_EXP 111
29491: IN
29492: NOT
29493: OR
29494: IFFALSE 29498
// exit ;
29496: GO 29820
// index := GetElementIndex ( minersList , unit ) ;
29498: LD_ADDR_VAR 0 6
29502: PUSH
29503: LD_EXP 111
29507: PPUSH
29508: LD_VAR 0 1
29512: PPUSH
29513: CALL 35167 0 2
29517: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29518: LD_ADDR_VAR 0 8
29522: PUSH
29523: LD_EXP 113
29527: PUSH
29528: LD_EXP 112
29532: PUSH
29533: LD_VAR 0 6
29537: ARRAY
29538: MINUS
29539: ST_TO_ADDR
// if not minesFreeAmount then
29540: LD_VAR 0 8
29544: NOT
29545: IFFALSE 29549
// exit ;
29547: GO 29820
// tmp := [ ] ;
29549: LD_ADDR_VAR 0 7
29553: PUSH
29554: EMPTY
29555: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29556: LD_ADDR_VAR 0 5
29560: PUSH
29561: DOUBLE
29562: LD_INT 1
29564: DEC
29565: ST_TO_ADDR
29566: LD_VAR 0 8
29570: PUSH
29571: FOR_TO
29572: IFFALSE 29767
// begin _d := rand ( 0 , 5 ) ;
29574: LD_ADDR_VAR 0 11
29578: PUSH
29579: LD_INT 0
29581: PPUSH
29582: LD_INT 5
29584: PPUSH
29585: CALL_OW 12
29589: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29590: LD_ADDR_VAR 0 12
29594: PUSH
29595: LD_INT 2
29597: PPUSH
29598: LD_INT 6
29600: PPUSH
29601: CALL_OW 12
29605: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29606: LD_ADDR_VAR 0 9
29610: PUSH
29611: LD_VAR 0 2
29615: PPUSH
29616: LD_VAR 0 11
29620: PPUSH
29621: LD_VAR 0 12
29625: PPUSH
29626: CALL_OW 272
29630: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29631: LD_ADDR_VAR 0 10
29635: PUSH
29636: LD_VAR 0 3
29640: PPUSH
29641: LD_VAR 0 11
29645: PPUSH
29646: LD_VAR 0 12
29650: PPUSH
29651: CALL_OW 273
29655: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29656: LD_VAR 0 9
29660: PPUSH
29661: LD_VAR 0 10
29665: PPUSH
29666: CALL_OW 488
29670: PUSH
29671: LD_VAR 0 9
29675: PUSH
29676: LD_VAR 0 10
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_VAR 0 7
29689: IN
29690: NOT
29691: AND
29692: PUSH
29693: LD_VAR 0 9
29697: PPUSH
29698: LD_VAR 0 10
29702: PPUSH
29703: CALL_OW 458
29707: NOT
29708: AND
29709: IFFALSE 29751
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29711: LD_ADDR_VAR 0 7
29715: PUSH
29716: LD_VAR 0 7
29720: PPUSH
29721: LD_VAR 0 7
29725: PUSH
29726: LD_INT 1
29728: PLUS
29729: PPUSH
29730: LD_VAR 0 9
29734: PUSH
29735: LD_VAR 0 10
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PPUSH
29744: CALL_OW 1
29748: ST_TO_ADDR
29749: GO 29765
// i := i - 1 ;
29751: LD_ADDR_VAR 0 5
29755: PUSH
29756: LD_VAR 0 5
29760: PUSH
29761: LD_INT 1
29763: MINUS
29764: ST_TO_ADDR
// end ;
29765: GO 29571
29767: POP
29768: POP
// for i in tmp do
29769: LD_ADDR_VAR 0 5
29773: PUSH
29774: LD_VAR 0 7
29778: PUSH
29779: FOR_IN
29780: IFFALSE 29818
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29782: LD_VAR 0 1
29786: PPUSH
29787: LD_VAR 0 5
29791: PUSH
29792: LD_INT 1
29794: ARRAY
29795: PPUSH
29796: LD_VAR 0 5
29800: PUSH
29801: LD_INT 2
29803: ARRAY
29804: PPUSH
29805: CALL 28764 0 3
29809: NOT
29810: IFFALSE 29816
// exit ;
29812: POP
29813: POP
29814: GO 29820
29816: GO 29779
29818: POP
29819: POP
// end ;
29820: LD_VAR 0 4
29824: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29825: LD_INT 0
29827: PPUSH
29828: PPUSH
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
29833: PPUSH
// if not GetClass ( unit ) = class_sniper then
29834: LD_VAR 0 1
29838: PPUSH
29839: CALL_OW 257
29843: PUSH
29844: LD_INT 5
29846: EQUAL
29847: NOT
29848: IFFALSE 29852
// exit ;
29850: GO 30240
// dist := 8 ;
29852: LD_ADDR_VAR 0 5
29856: PUSH
29857: LD_INT 8
29859: ST_TO_ADDR
// viewRange := 12 ;
29860: LD_ADDR_VAR 0 7
29864: PUSH
29865: LD_INT 12
29867: ST_TO_ADDR
// side := GetSide ( unit ) ;
29868: LD_ADDR_VAR 0 6
29872: PUSH
29873: LD_VAR 0 1
29877: PPUSH
29878: CALL_OW 255
29882: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29883: LD_INT 61
29885: PPUSH
29886: LD_VAR 0 6
29890: PPUSH
29891: CALL_OW 321
29895: PUSH
29896: LD_INT 2
29898: EQUAL
29899: IFFALSE 29909
// viewRange := 16 ;
29901: LD_ADDR_VAR 0 7
29905: PUSH
29906: LD_INT 16
29908: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29909: LD_VAR 0 1
29913: PPUSH
29914: LD_VAR 0 2
29918: PPUSH
29919: LD_VAR 0 3
29923: PPUSH
29924: CALL_OW 297
29928: PUSH
29929: LD_VAR 0 5
29933: GREATER
29934: IFFALSE 30013
// begin ComMoveXY ( unit , x , y ) ;
29936: LD_VAR 0 1
29940: PPUSH
29941: LD_VAR 0 2
29945: PPUSH
29946: LD_VAR 0 3
29950: PPUSH
29951: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29955: LD_INT 35
29957: PPUSH
29958: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29962: LD_VAR 0 1
29966: PPUSH
29967: LD_VAR 0 2
29971: PPUSH
29972: LD_VAR 0 3
29976: PPUSH
29977: CALL 66503 0 3
29981: NOT
29982: IFFALSE 29986
// exit ;
29984: GO 30240
// until GetDistUnitXY ( unit , x , y ) < dist ;
29986: LD_VAR 0 1
29990: PPUSH
29991: LD_VAR 0 2
29995: PPUSH
29996: LD_VAR 0 3
30000: PPUSH
30001: CALL_OW 297
30005: PUSH
30006: LD_VAR 0 5
30010: LESS
30011: IFFALSE 29955
// end ; ComTurnXY ( unit , x , y ) ;
30013: LD_VAR 0 1
30017: PPUSH
30018: LD_VAR 0 2
30022: PPUSH
30023: LD_VAR 0 3
30027: PPUSH
30028: CALL_OW 118
// wait ( 5 ) ;
30032: LD_INT 5
30034: PPUSH
30035: CALL_OW 67
// _d := GetDir ( unit ) ;
30039: LD_ADDR_VAR 0 10
30043: PUSH
30044: LD_VAR 0 1
30048: PPUSH
30049: CALL_OW 254
30053: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30054: LD_ADDR_VAR 0 8
30058: PUSH
30059: LD_VAR 0 1
30063: PPUSH
30064: CALL_OW 250
30068: PPUSH
30069: LD_VAR 0 10
30073: PPUSH
30074: LD_VAR 0 5
30078: PPUSH
30079: CALL_OW 272
30083: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30084: LD_ADDR_VAR 0 9
30088: PUSH
30089: LD_VAR 0 1
30093: PPUSH
30094: CALL_OW 251
30098: PPUSH
30099: LD_VAR 0 10
30103: PPUSH
30104: LD_VAR 0 5
30108: PPUSH
30109: CALL_OW 273
30113: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30114: LD_VAR 0 8
30118: PPUSH
30119: LD_VAR 0 9
30123: PPUSH
30124: CALL_OW 488
30128: NOT
30129: IFFALSE 30133
// exit ;
30131: GO 30240
// ComAnimCustom ( unit , 1 ) ;
30133: LD_VAR 0 1
30137: PPUSH
30138: LD_INT 1
30140: PPUSH
30141: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30145: LD_VAR 0 8
30149: PPUSH
30150: LD_VAR 0 9
30154: PPUSH
30155: LD_VAR 0 6
30159: PPUSH
30160: LD_VAR 0 7
30164: PPUSH
30165: CALL_OW 330
// repeat wait ( 1 ) ;
30169: LD_INT 1
30171: PPUSH
30172: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30176: LD_VAR 0 1
30180: PPUSH
30181: CALL_OW 316
30185: PUSH
30186: LD_VAR 0 1
30190: PPUSH
30191: CALL_OW 314
30195: OR
30196: PUSH
30197: LD_VAR 0 1
30201: PPUSH
30202: CALL_OW 302
30206: NOT
30207: OR
30208: PUSH
30209: LD_VAR 0 1
30213: PPUSH
30214: CALL_OW 301
30218: OR
30219: IFFALSE 30169
// RemoveSeeing ( _x , _y , side ) ;
30221: LD_VAR 0 8
30225: PPUSH
30226: LD_VAR 0 9
30230: PPUSH
30231: LD_VAR 0 6
30235: PPUSH
30236: CALL_OW 331
// end ; end_of_file
30240: LD_VAR 0 4
30244: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30245: LD_INT 0
30247: PPUSH
30248: PPUSH
// if exist_mode then
30249: LD_VAR 0 2
30253: IFFALSE 30278
// unit := CreateCharacter ( prefix & ident ) else
30255: LD_ADDR_VAR 0 5
30259: PUSH
30260: LD_VAR 0 3
30264: PUSH
30265: LD_VAR 0 1
30269: STR
30270: PPUSH
30271: CALL_OW 34
30275: ST_TO_ADDR
30276: GO 30293
// unit := NewCharacter ( ident ) ;
30278: LD_ADDR_VAR 0 5
30282: PUSH
30283: LD_VAR 0 1
30287: PPUSH
30288: CALL_OW 25
30292: ST_TO_ADDR
// result := unit ;
30293: LD_ADDR_VAR 0 4
30297: PUSH
30298: LD_VAR 0 5
30302: ST_TO_ADDR
// end ;
30303: LD_VAR 0 4
30307: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30308: LD_INT 0
30310: PPUSH
30311: PPUSH
// if not side or not nation then
30312: LD_VAR 0 1
30316: NOT
30317: PUSH
30318: LD_VAR 0 2
30322: NOT
30323: OR
30324: IFFALSE 30328
// exit ;
30326: GO 31096
// case nation of nation_american :
30328: LD_VAR 0 2
30332: PUSH
30333: LD_INT 1
30335: DOUBLE
30336: EQUAL
30337: IFTRUE 30341
30339: GO 30555
30341: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30342: LD_ADDR_VAR 0 4
30346: PUSH
30347: LD_INT 35
30349: PUSH
30350: LD_INT 45
30352: PUSH
30353: LD_INT 46
30355: PUSH
30356: LD_INT 47
30358: PUSH
30359: LD_INT 82
30361: PUSH
30362: LD_INT 83
30364: PUSH
30365: LD_INT 84
30367: PUSH
30368: LD_INT 85
30370: PUSH
30371: LD_INT 86
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: LD_INT 2
30379: PUSH
30380: LD_INT 6
30382: PUSH
30383: LD_INT 15
30385: PUSH
30386: LD_INT 16
30388: PUSH
30389: LD_INT 7
30391: PUSH
30392: LD_INT 12
30394: PUSH
30395: LD_INT 13
30397: PUSH
30398: LD_INT 10
30400: PUSH
30401: LD_INT 14
30403: PUSH
30404: LD_INT 20
30406: PUSH
30407: LD_INT 21
30409: PUSH
30410: LD_INT 22
30412: PUSH
30413: LD_INT 25
30415: PUSH
30416: LD_INT 32
30418: PUSH
30419: LD_INT 27
30421: PUSH
30422: LD_INT 36
30424: PUSH
30425: LD_INT 69
30427: PUSH
30428: LD_INT 39
30430: PUSH
30431: LD_INT 34
30433: PUSH
30434: LD_INT 40
30436: PUSH
30437: LD_INT 48
30439: PUSH
30440: LD_INT 49
30442: PUSH
30443: LD_INT 50
30445: PUSH
30446: LD_INT 51
30448: PUSH
30449: LD_INT 52
30451: PUSH
30452: LD_INT 53
30454: PUSH
30455: LD_INT 54
30457: PUSH
30458: LD_INT 55
30460: PUSH
30461: LD_INT 56
30463: PUSH
30464: LD_INT 57
30466: PUSH
30467: LD_INT 58
30469: PUSH
30470: LD_INT 59
30472: PUSH
30473: LD_INT 60
30475: PUSH
30476: LD_INT 61
30478: PUSH
30479: LD_INT 62
30481: PUSH
30482: LD_INT 80
30484: PUSH
30485: LD_INT 82
30487: PUSH
30488: LD_INT 83
30490: PUSH
30491: LD_INT 84
30493: PUSH
30494: LD_INT 85
30496: PUSH
30497: LD_INT 86
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: ST_TO_ADDR
30553: GO 31020
30555: LD_INT 2
30557: DOUBLE
30558: EQUAL
30559: IFTRUE 30563
30561: GO 30789
30563: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30564: LD_ADDR_VAR 0 4
30568: PUSH
30569: LD_INT 35
30571: PUSH
30572: LD_INT 45
30574: PUSH
30575: LD_INT 46
30577: PUSH
30578: LD_INT 47
30580: PUSH
30581: LD_INT 82
30583: PUSH
30584: LD_INT 83
30586: PUSH
30587: LD_INT 84
30589: PUSH
30590: LD_INT 85
30592: PUSH
30593: LD_INT 87
30595: PUSH
30596: LD_INT 70
30598: PUSH
30599: LD_INT 1
30601: PUSH
30602: LD_INT 11
30604: PUSH
30605: LD_INT 3
30607: PUSH
30608: LD_INT 4
30610: PUSH
30611: LD_INT 5
30613: PUSH
30614: LD_INT 6
30616: PUSH
30617: LD_INT 15
30619: PUSH
30620: LD_INT 18
30622: PUSH
30623: LD_INT 7
30625: PUSH
30626: LD_INT 17
30628: PUSH
30629: LD_INT 8
30631: PUSH
30632: LD_INT 20
30634: PUSH
30635: LD_INT 21
30637: PUSH
30638: LD_INT 22
30640: PUSH
30641: LD_INT 72
30643: PUSH
30644: LD_INT 26
30646: PUSH
30647: LD_INT 69
30649: PUSH
30650: LD_INT 39
30652: PUSH
30653: LD_INT 40
30655: PUSH
30656: LD_INT 41
30658: PUSH
30659: LD_INT 42
30661: PUSH
30662: LD_INT 43
30664: PUSH
30665: LD_INT 48
30667: PUSH
30668: LD_INT 49
30670: PUSH
30671: LD_INT 50
30673: PUSH
30674: LD_INT 51
30676: PUSH
30677: LD_INT 52
30679: PUSH
30680: LD_INT 53
30682: PUSH
30683: LD_INT 54
30685: PUSH
30686: LD_INT 55
30688: PUSH
30689: LD_INT 56
30691: PUSH
30692: LD_INT 60
30694: PUSH
30695: LD_INT 61
30697: PUSH
30698: LD_INT 62
30700: PUSH
30701: LD_INT 66
30703: PUSH
30704: LD_INT 67
30706: PUSH
30707: LD_INT 68
30709: PUSH
30710: LD_INT 81
30712: PUSH
30713: LD_INT 82
30715: PUSH
30716: LD_INT 83
30718: PUSH
30719: LD_INT 84
30721: PUSH
30722: LD_INT 85
30724: PUSH
30725: LD_INT 87
30727: PUSH
30728: LD_INT 88
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: ST_TO_ADDR
30787: GO 31020
30789: LD_INT 3
30791: DOUBLE
30792: EQUAL
30793: IFTRUE 30797
30795: GO 31019
30797: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30798: LD_ADDR_VAR 0 4
30802: PUSH
30803: LD_INT 46
30805: PUSH
30806: LD_INT 47
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: LD_INT 2
30814: PUSH
30815: LD_INT 82
30817: PUSH
30818: LD_INT 83
30820: PUSH
30821: LD_INT 84
30823: PUSH
30824: LD_INT 85
30826: PUSH
30827: LD_INT 86
30829: PUSH
30830: LD_INT 11
30832: PUSH
30833: LD_INT 9
30835: PUSH
30836: LD_INT 20
30838: PUSH
30839: LD_INT 19
30841: PUSH
30842: LD_INT 21
30844: PUSH
30845: LD_INT 24
30847: PUSH
30848: LD_INT 22
30850: PUSH
30851: LD_INT 25
30853: PUSH
30854: LD_INT 28
30856: PUSH
30857: LD_INT 29
30859: PUSH
30860: LD_INT 30
30862: PUSH
30863: LD_INT 31
30865: PUSH
30866: LD_INT 37
30868: PUSH
30869: LD_INT 38
30871: PUSH
30872: LD_INT 32
30874: PUSH
30875: LD_INT 27
30877: PUSH
30878: LD_INT 33
30880: PUSH
30881: LD_INT 69
30883: PUSH
30884: LD_INT 39
30886: PUSH
30887: LD_INT 34
30889: PUSH
30890: LD_INT 40
30892: PUSH
30893: LD_INT 71
30895: PUSH
30896: LD_INT 23
30898: PUSH
30899: LD_INT 44
30901: PUSH
30902: LD_INT 48
30904: PUSH
30905: LD_INT 49
30907: PUSH
30908: LD_INT 50
30910: PUSH
30911: LD_INT 51
30913: PUSH
30914: LD_INT 52
30916: PUSH
30917: LD_INT 53
30919: PUSH
30920: LD_INT 54
30922: PUSH
30923: LD_INT 55
30925: PUSH
30926: LD_INT 56
30928: PUSH
30929: LD_INT 57
30931: PUSH
30932: LD_INT 58
30934: PUSH
30935: LD_INT 59
30937: PUSH
30938: LD_INT 63
30940: PUSH
30941: LD_INT 64
30943: PUSH
30944: LD_INT 65
30946: PUSH
30947: LD_INT 82
30949: PUSH
30950: LD_INT 83
30952: PUSH
30953: LD_INT 84
30955: PUSH
30956: LD_INT 85
30958: PUSH
30959: LD_INT 86
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: ST_TO_ADDR
31017: GO 31020
31019: POP
// if state > - 1 and state < 3 then
31020: LD_VAR 0 3
31024: PUSH
31025: LD_INT 1
31027: NEG
31028: GREATER
31029: PUSH
31030: LD_VAR 0 3
31034: PUSH
31035: LD_INT 3
31037: LESS
31038: AND
31039: IFFALSE 31096
// for i in result do
31041: LD_ADDR_VAR 0 5
31045: PUSH
31046: LD_VAR 0 4
31050: PUSH
31051: FOR_IN
31052: IFFALSE 31094
// if GetTech ( i , side ) <> state then
31054: LD_VAR 0 5
31058: PPUSH
31059: LD_VAR 0 1
31063: PPUSH
31064: CALL_OW 321
31068: PUSH
31069: LD_VAR 0 3
31073: NONEQUAL
31074: IFFALSE 31092
// result := result diff i ;
31076: LD_ADDR_VAR 0 4
31080: PUSH
31081: LD_VAR 0 4
31085: PUSH
31086: LD_VAR 0 5
31090: DIFF
31091: ST_TO_ADDR
31092: GO 31051
31094: POP
31095: POP
// end ;
31096: LD_VAR 0 4
31100: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31101: LD_INT 0
31103: PPUSH
31104: PPUSH
31105: PPUSH
// result := true ;
31106: LD_ADDR_VAR 0 3
31110: PUSH
31111: LD_INT 1
31113: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31114: LD_ADDR_VAR 0 5
31118: PUSH
31119: LD_VAR 0 2
31123: PPUSH
31124: CALL_OW 480
31128: ST_TO_ADDR
// if not tmp then
31129: LD_VAR 0 5
31133: NOT
31134: IFFALSE 31138
// exit ;
31136: GO 31187
// for i in tmp do
31138: LD_ADDR_VAR 0 4
31142: PUSH
31143: LD_VAR 0 5
31147: PUSH
31148: FOR_IN
31149: IFFALSE 31185
// if GetTech ( i , side ) <> state_researched then
31151: LD_VAR 0 4
31155: PPUSH
31156: LD_VAR 0 1
31160: PPUSH
31161: CALL_OW 321
31165: PUSH
31166: LD_INT 2
31168: NONEQUAL
31169: IFFALSE 31183
// begin result := false ;
31171: LD_ADDR_VAR 0 3
31175: PUSH
31176: LD_INT 0
31178: ST_TO_ADDR
// exit ;
31179: POP
31180: POP
31181: GO 31187
// end ;
31183: GO 31148
31185: POP
31186: POP
// end ;
31187: LD_VAR 0 3
31191: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31192: LD_INT 0
31194: PPUSH
31195: PPUSH
31196: PPUSH
31197: PPUSH
31198: PPUSH
31199: PPUSH
31200: PPUSH
31201: PPUSH
31202: PPUSH
31203: PPUSH
31204: PPUSH
31205: PPUSH
31206: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31207: LD_VAR 0 1
31211: NOT
31212: PUSH
31213: LD_VAR 0 1
31217: PPUSH
31218: CALL_OW 257
31222: PUSH
31223: LD_INT 9
31225: NONEQUAL
31226: OR
31227: IFFALSE 31231
// exit ;
31229: GO 31804
// side := GetSide ( unit ) ;
31231: LD_ADDR_VAR 0 9
31235: PUSH
31236: LD_VAR 0 1
31240: PPUSH
31241: CALL_OW 255
31245: ST_TO_ADDR
// tech_space := tech_spacanom ;
31246: LD_ADDR_VAR 0 12
31250: PUSH
31251: LD_INT 29
31253: ST_TO_ADDR
// tech_time := tech_taurad ;
31254: LD_ADDR_VAR 0 13
31258: PUSH
31259: LD_INT 28
31261: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31262: LD_ADDR_VAR 0 11
31266: PUSH
31267: LD_VAR 0 1
31271: PPUSH
31272: CALL_OW 310
31276: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31277: LD_VAR 0 11
31281: PPUSH
31282: CALL_OW 247
31286: PUSH
31287: LD_INT 2
31289: EQUAL
31290: IFFALSE 31294
// exit ;
31292: GO 31804
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31294: LD_ADDR_VAR 0 8
31298: PUSH
31299: LD_INT 81
31301: PUSH
31302: LD_VAR 0 9
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 3
31313: PUSH
31314: LD_INT 21
31316: PUSH
31317: LD_INT 3
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PPUSH
31332: CALL_OW 69
31336: ST_TO_ADDR
// if not tmp then
31337: LD_VAR 0 8
31341: NOT
31342: IFFALSE 31346
// exit ;
31344: GO 31804
// if in_unit then
31346: LD_VAR 0 11
31350: IFFALSE 31374
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31352: LD_ADDR_VAR 0 10
31356: PUSH
31357: LD_VAR 0 8
31361: PPUSH
31362: LD_VAR 0 11
31366: PPUSH
31367: CALL_OW 74
31371: ST_TO_ADDR
31372: GO 31394
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31374: LD_ADDR_VAR 0 10
31378: PUSH
31379: LD_VAR 0 8
31383: PPUSH
31384: LD_VAR 0 1
31388: PPUSH
31389: CALL_OW 74
31393: ST_TO_ADDR
// if not enemy then
31394: LD_VAR 0 10
31398: NOT
31399: IFFALSE 31403
// exit ;
31401: GO 31804
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31403: LD_VAR 0 11
31407: PUSH
31408: LD_VAR 0 11
31412: PPUSH
31413: LD_VAR 0 10
31417: PPUSH
31418: CALL_OW 296
31422: PUSH
31423: LD_INT 13
31425: GREATER
31426: AND
31427: PUSH
31428: LD_VAR 0 1
31432: PPUSH
31433: LD_VAR 0 10
31437: PPUSH
31438: CALL_OW 296
31442: PUSH
31443: LD_INT 12
31445: GREATER
31446: OR
31447: IFFALSE 31451
// exit ;
31449: GO 31804
// missile := [ 1 ] ;
31451: LD_ADDR_VAR 0 14
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: EMPTY
31460: LIST
31461: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31462: LD_VAR 0 9
31466: PPUSH
31467: LD_VAR 0 12
31471: PPUSH
31472: CALL_OW 325
31476: IFFALSE 31505
// missile := Replace ( missile , missile + 1 , 2 ) ;
31478: LD_ADDR_VAR 0 14
31482: PUSH
31483: LD_VAR 0 14
31487: PPUSH
31488: LD_VAR 0 14
31492: PUSH
31493: LD_INT 1
31495: PLUS
31496: PPUSH
31497: LD_INT 2
31499: PPUSH
31500: CALL_OW 1
31504: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31505: LD_VAR 0 9
31509: PPUSH
31510: LD_VAR 0 13
31514: PPUSH
31515: CALL_OW 325
31519: PUSH
31520: LD_VAR 0 10
31524: PPUSH
31525: CALL_OW 255
31529: PPUSH
31530: LD_VAR 0 13
31534: PPUSH
31535: CALL_OW 325
31539: NOT
31540: AND
31541: IFFALSE 31570
// missile := Replace ( missile , missile + 1 , 3 ) ;
31543: LD_ADDR_VAR 0 14
31547: PUSH
31548: LD_VAR 0 14
31552: PPUSH
31553: LD_VAR 0 14
31557: PUSH
31558: LD_INT 1
31560: PLUS
31561: PPUSH
31562: LD_INT 3
31564: PPUSH
31565: CALL_OW 1
31569: ST_TO_ADDR
// if missile < 2 then
31570: LD_VAR 0 14
31574: PUSH
31575: LD_INT 2
31577: LESS
31578: IFFALSE 31582
// exit ;
31580: GO 31804
// x := GetX ( enemy ) ;
31582: LD_ADDR_VAR 0 4
31586: PUSH
31587: LD_VAR 0 10
31591: PPUSH
31592: CALL_OW 250
31596: ST_TO_ADDR
// y := GetY ( enemy ) ;
31597: LD_ADDR_VAR 0 5
31601: PUSH
31602: LD_VAR 0 10
31606: PPUSH
31607: CALL_OW 251
31611: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31612: LD_ADDR_VAR 0 6
31616: PUSH
31617: LD_VAR 0 4
31621: PUSH
31622: LD_INT 1
31624: NEG
31625: PPUSH
31626: LD_INT 1
31628: PPUSH
31629: CALL_OW 12
31633: PLUS
31634: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31635: LD_ADDR_VAR 0 7
31639: PUSH
31640: LD_VAR 0 5
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PPUSH
31649: LD_INT 1
31651: PPUSH
31652: CALL_OW 12
31656: PLUS
31657: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31658: LD_VAR 0 6
31662: PPUSH
31663: LD_VAR 0 7
31667: PPUSH
31668: CALL_OW 488
31672: NOT
31673: IFFALSE 31695
// begin _x := x ;
31675: LD_ADDR_VAR 0 6
31679: PUSH
31680: LD_VAR 0 4
31684: ST_TO_ADDR
// _y := y ;
31685: LD_ADDR_VAR 0 7
31689: PUSH
31690: LD_VAR 0 5
31694: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31695: LD_ADDR_VAR 0 3
31699: PUSH
31700: LD_INT 1
31702: PPUSH
31703: LD_VAR 0 14
31707: PPUSH
31708: CALL_OW 12
31712: ST_TO_ADDR
// case i of 1 :
31713: LD_VAR 0 3
31717: PUSH
31718: LD_INT 1
31720: DOUBLE
31721: EQUAL
31722: IFTRUE 31726
31724: GO 31743
31726: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31727: LD_VAR 0 1
31731: PPUSH
31732: LD_VAR 0 10
31736: PPUSH
31737: CALL_OW 115
31741: GO 31804
31743: LD_INT 2
31745: DOUBLE
31746: EQUAL
31747: IFTRUE 31751
31749: GO 31773
31751: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31752: LD_VAR 0 1
31756: PPUSH
31757: LD_VAR 0 6
31761: PPUSH
31762: LD_VAR 0 7
31766: PPUSH
31767: CALL_OW 153
31771: GO 31804
31773: LD_INT 3
31775: DOUBLE
31776: EQUAL
31777: IFTRUE 31781
31779: GO 31803
31781: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31782: LD_VAR 0 1
31786: PPUSH
31787: LD_VAR 0 6
31791: PPUSH
31792: LD_VAR 0 7
31796: PPUSH
31797: CALL_OW 154
31801: GO 31804
31803: POP
// end ;
31804: LD_VAR 0 2
31808: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31809: LD_INT 0
31811: PPUSH
31812: PPUSH
31813: PPUSH
31814: PPUSH
31815: PPUSH
31816: PPUSH
// if not unit or not building then
31817: LD_VAR 0 1
31821: NOT
31822: PUSH
31823: LD_VAR 0 2
31827: NOT
31828: OR
31829: IFFALSE 31833
// exit ;
31831: GO 31991
// x := GetX ( building ) ;
31833: LD_ADDR_VAR 0 5
31837: PUSH
31838: LD_VAR 0 2
31842: PPUSH
31843: CALL_OW 250
31847: ST_TO_ADDR
// y := GetY ( building ) ;
31848: LD_ADDR_VAR 0 6
31852: PUSH
31853: LD_VAR 0 2
31857: PPUSH
31858: CALL_OW 251
31862: ST_TO_ADDR
// for i = 0 to 5 do
31863: LD_ADDR_VAR 0 4
31867: PUSH
31868: DOUBLE
31869: LD_INT 0
31871: DEC
31872: ST_TO_ADDR
31873: LD_INT 5
31875: PUSH
31876: FOR_TO
31877: IFFALSE 31989
// begin _x := ShiftX ( x , i , 3 ) ;
31879: LD_ADDR_VAR 0 7
31883: PUSH
31884: LD_VAR 0 5
31888: PPUSH
31889: LD_VAR 0 4
31893: PPUSH
31894: LD_INT 3
31896: PPUSH
31897: CALL_OW 272
31901: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31902: LD_ADDR_VAR 0 8
31906: PUSH
31907: LD_VAR 0 6
31911: PPUSH
31912: LD_VAR 0 4
31916: PPUSH
31917: LD_INT 3
31919: PPUSH
31920: CALL_OW 273
31924: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31925: LD_VAR 0 7
31929: PPUSH
31930: LD_VAR 0 8
31934: PPUSH
31935: CALL_OW 488
31939: NOT
31940: IFFALSE 31944
// continue ;
31942: GO 31876
// if HexInfo ( _x , _y ) = 0 then
31944: LD_VAR 0 7
31948: PPUSH
31949: LD_VAR 0 8
31953: PPUSH
31954: CALL_OW 428
31958: PUSH
31959: LD_INT 0
31961: EQUAL
31962: IFFALSE 31987
// begin ComMoveXY ( unit , _x , _y ) ;
31964: LD_VAR 0 1
31968: PPUSH
31969: LD_VAR 0 7
31973: PPUSH
31974: LD_VAR 0 8
31978: PPUSH
31979: CALL_OW 111
// exit ;
31983: POP
31984: POP
31985: GO 31991
// end ; end ;
31987: GO 31876
31989: POP
31990: POP
// end ;
31991: LD_VAR 0 3
31995: RET
// export function ScanBase ( side , base_area ) ; begin
31996: LD_INT 0
31998: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31999: LD_ADDR_VAR 0 3
32003: PUSH
32004: LD_VAR 0 2
32008: PPUSH
32009: LD_INT 81
32011: PUSH
32012: LD_VAR 0 1
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PPUSH
32021: CALL_OW 70
32025: ST_TO_ADDR
// end ;
32026: LD_VAR 0 3
32030: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32031: LD_INT 0
32033: PPUSH
32034: PPUSH
32035: PPUSH
32036: PPUSH
// result := false ;
32037: LD_ADDR_VAR 0 2
32041: PUSH
32042: LD_INT 0
32044: ST_TO_ADDR
// side := GetSide ( unit ) ;
32045: LD_ADDR_VAR 0 3
32049: PUSH
32050: LD_VAR 0 1
32054: PPUSH
32055: CALL_OW 255
32059: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32060: LD_ADDR_VAR 0 4
32064: PUSH
32065: LD_VAR 0 1
32069: PPUSH
32070: CALL_OW 248
32074: ST_TO_ADDR
// case nat of 1 :
32075: LD_VAR 0 4
32079: PUSH
32080: LD_INT 1
32082: DOUBLE
32083: EQUAL
32084: IFTRUE 32088
32086: GO 32099
32088: POP
// tech := tech_lassight ; 2 :
32089: LD_ADDR_VAR 0 5
32093: PUSH
32094: LD_INT 12
32096: ST_TO_ADDR
32097: GO 32138
32099: LD_INT 2
32101: DOUBLE
32102: EQUAL
32103: IFTRUE 32107
32105: GO 32118
32107: POP
// tech := tech_mortar ; 3 :
32108: LD_ADDR_VAR 0 5
32112: PUSH
32113: LD_INT 41
32115: ST_TO_ADDR
32116: GO 32138
32118: LD_INT 3
32120: DOUBLE
32121: EQUAL
32122: IFTRUE 32126
32124: GO 32137
32126: POP
// tech := tech_bazooka ; end ;
32127: LD_ADDR_VAR 0 5
32131: PUSH
32132: LD_INT 44
32134: ST_TO_ADDR
32135: GO 32138
32137: POP
// if Researched ( side , tech ) then
32138: LD_VAR 0 3
32142: PPUSH
32143: LD_VAR 0 5
32147: PPUSH
32148: CALL_OW 325
32152: IFFALSE 32179
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32154: LD_ADDR_VAR 0 2
32158: PUSH
32159: LD_INT 5
32161: PUSH
32162: LD_INT 8
32164: PUSH
32165: LD_INT 9
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: LIST
32172: PUSH
32173: LD_VAR 0 4
32177: ARRAY
32178: ST_TO_ADDR
// end ;
32179: LD_VAR 0 2
32183: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32184: LD_INT 0
32186: PPUSH
32187: PPUSH
32188: PPUSH
// if not mines then
32189: LD_VAR 0 2
32193: NOT
32194: IFFALSE 32198
// exit ;
32196: GO 32342
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32198: LD_ADDR_VAR 0 5
32202: PUSH
32203: LD_INT 81
32205: PUSH
32206: LD_VAR 0 1
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 3
32217: PUSH
32218: LD_INT 21
32220: PUSH
32221: LD_INT 3
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PPUSH
32236: CALL_OW 69
32240: ST_TO_ADDR
// for i in mines do
32241: LD_ADDR_VAR 0 4
32245: PUSH
32246: LD_VAR 0 2
32250: PUSH
32251: FOR_IN
32252: IFFALSE 32340
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32254: LD_VAR 0 4
32258: PUSH
32259: LD_INT 1
32261: ARRAY
32262: PPUSH
32263: LD_VAR 0 4
32267: PUSH
32268: LD_INT 2
32270: ARRAY
32271: PPUSH
32272: CALL_OW 458
32276: NOT
32277: IFFALSE 32281
// continue ;
32279: GO 32251
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32281: LD_VAR 0 4
32285: PUSH
32286: LD_INT 1
32288: ARRAY
32289: PPUSH
32290: LD_VAR 0 4
32294: PUSH
32295: LD_INT 2
32297: ARRAY
32298: PPUSH
32299: CALL_OW 428
32303: PUSH
32304: LD_VAR 0 5
32308: IN
32309: IFFALSE 32338
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32311: LD_VAR 0 4
32315: PUSH
32316: LD_INT 1
32318: ARRAY
32319: PPUSH
32320: LD_VAR 0 4
32324: PUSH
32325: LD_INT 2
32327: ARRAY
32328: PPUSH
32329: LD_VAR 0 1
32333: PPUSH
32334: CALL_OW 456
// end ;
32338: GO 32251
32340: POP
32341: POP
// end ;
32342: LD_VAR 0 3
32346: RET
// export function Count ( array ) ; var i ; begin
32347: LD_INT 0
32349: PPUSH
32350: PPUSH
// result := 0 ;
32351: LD_ADDR_VAR 0 2
32355: PUSH
32356: LD_INT 0
32358: ST_TO_ADDR
// for i in array do
32359: LD_ADDR_VAR 0 3
32363: PUSH
32364: LD_VAR 0 1
32368: PUSH
32369: FOR_IN
32370: IFFALSE 32394
// if i then
32372: LD_VAR 0 3
32376: IFFALSE 32392
// result := result + 1 ;
32378: LD_ADDR_VAR 0 2
32382: PUSH
32383: LD_VAR 0 2
32387: PUSH
32388: LD_INT 1
32390: PLUS
32391: ST_TO_ADDR
32392: GO 32369
32394: POP
32395: POP
// end ;
32396: LD_VAR 0 2
32400: RET
// export function IsEmpty ( building ) ; begin
32401: LD_INT 0
32403: PPUSH
// if not building then
32404: LD_VAR 0 1
32408: NOT
32409: IFFALSE 32413
// exit ;
32411: GO 32456
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32413: LD_ADDR_VAR 0 2
32417: PUSH
32418: LD_VAR 0 1
32422: PUSH
32423: LD_INT 22
32425: PUSH
32426: LD_VAR 0 1
32430: PPUSH
32431: CALL_OW 255
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 58
32442: PUSH
32443: EMPTY
32444: LIST
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PPUSH
32450: CALL_OW 69
32454: IN
32455: ST_TO_ADDR
// end ;
32456: LD_VAR 0 2
32460: RET
// export function IsNotFull ( building ) ; var places ; begin
32461: LD_INT 0
32463: PPUSH
32464: PPUSH
// if not building then
32465: LD_VAR 0 1
32469: NOT
32470: IFFALSE 32474
// exit ;
32472: GO 32645
// result := false ;
32474: LD_ADDR_VAR 0 2
32478: PUSH
32479: LD_INT 0
32481: ST_TO_ADDR
// places := 0 ;
32482: LD_ADDR_VAR 0 3
32486: PUSH
32487: LD_INT 0
32489: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32490: LD_VAR 0 1
32494: PPUSH
32495: CALL_OW 266
32499: PUSH
32500: LD_INT 0
32502: DOUBLE
32503: EQUAL
32504: IFTRUE 32562
32506: LD_INT 1
32508: DOUBLE
32509: EQUAL
32510: IFTRUE 32562
32512: LD_INT 6
32514: DOUBLE
32515: EQUAL
32516: IFTRUE 32562
32518: LD_INT 7
32520: DOUBLE
32521: EQUAL
32522: IFTRUE 32562
32524: LD_INT 8
32526: DOUBLE
32527: EQUAL
32528: IFTRUE 32562
32530: LD_INT 4
32532: DOUBLE
32533: EQUAL
32534: IFTRUE 32562
32536: LD_INT 5
32538: DOUBLE
32539: EQUAL
32540: IFTRUE 32562
32542: LD_INT 2
32544: DOUBLE
32545: EQUAL
32546: IFTRUE 32562
32548: LD_INT 3
32550: DOUBLE
32551: EQUAL
32552: IFTRUE 32562
32554: LD_INT 35
32556: DOUBLE
32557: EQUAL
32558: IFTRUE 32562
32560: GO 32573
32562: POP
// places := 6 ; b_bunker , b_breastwork :
32563: LD_ADDR_VAR 0 3
32567: PUSH
32568: LD_INT 6
32570: ST_TO_ADDR
32571: GO 32618
32573: LD_INT 32
32575: DOUBLE
32576: EQUAL
32577: IFTRUE 32587
32579: LD_INT 31
32581: DOUBLE
32582: EQUAL
32583: IFTRUE 32587
32585: GO 32598
32587: POP
// places := 1 ; b_control_tower :
32588: LD_ADDR_VAR 0 3
32592: PUSH
32593: LD_INT 1
32595: ST_TO_ADDR
32596: GO 32618
32598: LD_INT 36
32600: DOUBLE
32601: EQUAL
32602: IFTRUE 32606
32604: GO 32617
32606: POP
// places := 3 ; end ;
32607: LD_ADDR_VAR 0 3
32611: PUSH
32612: LD_INT 3
32614: ST_TO_ADDR
32615: GO 32618
32617: POP
// if places then
32618: LD_VAR 0 3
32622: IFFALSE 32645
// result := UnitsInside ( building ) < places ;
32624: LD_ADDR_VAR 0 2
32628: PUSH
32629: LD_VAR 0 1
32633: PPUSH
32634: CALL_OW 313
32638: PUSH
32639: LD_VAR 0 3
32643: LESS
32644: ST_TO_ADDR
// end ;
32645: LD_VAR 0 2
32649: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32650: LD_INT 0
32652: PPUSH
32653: PPUSH
32654: PPUSH
32655: PPUSH
// tmp := [ ] ;
32656: LD_ADDR_VAR 0 3
32660: PUSH
32661: EMPTY
32662: ST_TO_ADDR
// list := [ ] ;
32663: LD_ADDR_VAR 0 5
32667: PUSH
32668: EMPTY
32669: ST_TO_ADDR
// for i = 16 to 25 do
32670: LD_ADDR_VAR 0 4
32674: PUSH
32675: DOUBLE
32676: LD_INT 16
32678: DEC
32679: ST_TO_ADDR
32680: LD_INT 25
32682: PUSH
32683: FOR_TO
32684: IFFALSE 32757
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32686: LD_ADDR_VAR 0 3
32690: PUSH
32691: LD_VAR 0 3
32695: PUSH
32696: LD_INT 22
32698: PUSH
32699: LD_VAR 0 1
32703: PPUSH
32704: CALL_OW 255
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 91
32715: PUSH
32716: LD_VAR 0 1
32720: PUSH
32721: LD_INT 6
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 30
32731: PUSH
32732: LD_VAR 0 4
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: LIST
32745: PUSH
32746: EMPTY
32747: LIST
32748: PPUSH
32749: CALL_OW 69
32753: ADD
32754: ST_TO_ADDR
32755: GO 32683
32757: POP
32758: POP
// for i = 1 to tmp do
32759: LD_ADDR_VAR 0 4
32763: PUSH
32764: DOUBLE
32765: LD_INT 1
32767: DEC
32768: ST_TO_ADDR
32769: LD_VAR 0 3
32773: PUSH
32774: FOR_TO
32775: IFFALSE 32863
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32777: LD_ADDR_VAR 0 5
32781: PUSH
32782: LD_VAR 0 5
32786: PUSH
32787: LD_VAR 0 3
32791: PUSH
32792: LD_VAR 0 4
32796: ARRAY
32797: PPUSH
32798: CALL_OW 266
32802: PUSH
32803: LD_VAR 0 3
32807: PUSH
32808: LD_VAR 0 4
32812: ARRAY
32813: PPUSH
32814: CALL_OW 250
32818: PUSH
32819: LD_VAR 0 3
32823: PUSH
32824: LD_VAR 0 4
32828: ARRAY
32829: PPUSH
32830: CALL_OW 251
32834: PUSH
32835: LD_VAR 0 3
32839: PUSH
32840: LD_VAR 0 4
32844: ARRAY
32845: PPUSH
32846: CALL_OW 254
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: PUSH
32857: EMPTY
32858: LIST
32859: ADD
32860: ST_TO_ADDR
32861: GO 32774
32863: POP
32864: POP
// result := list ;
32865: LD_ADDR_VAR 0 2
32869: PUSH
32870: LD_VAR 0 5
32874: ST_TO_ADDR
// end ;
32875: LD_VAR 0 2
32879: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32880: LD_INT 0
32882: PPUSH
32883: PPUSH
32884: PPUSH
32885: PPUSH
32886: PPUSH
32887: PPUSH
32888: PPUSH
// if not factory then
32889: LD_VAR 0 1
32893: NOT
32894: IFFALSE 32898
// exit ;
32896: GO 33491
// if control = control_apeman then
32898: LD_VAR 0 4
32902: PUSH
32903: LD_INT 5
32905: EQUAL
32906: IFFALSE 33015
// begin tmp := UnitsInside ( factory ) ;
32908: LD_ADDR_VAR 0 8
32912: PUSH
32913: LD_VAR 0 1
32917: PPUSH
32918: CALL_OW 313
32922: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32923: LD_VAR 0 8
32927: PPUSH
32928: LD_INT 25
32930: PUSH
32931: LD_INT 12
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PPUSH
32938: CALL_OW 72
32942: NOT
32943: IFFALSE 32953
// control := control_manual ;
32945: LD_ADDR_VAR 0 4
32949: PUSH
32950: LD_INT 1
32952: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32953: LD_ADDR_VAR 0 8
32957: PUSH
32958: LD_VAR 0 1
32962: PPUSH
32963: CALL 32650 0 1
32967: ST_TO_ADDR
// if tmp then
32968: LD_VAR 0 8
32972: IFFALSE 33015
// begin for i in tmp do
32974: LD_ADDR_VAR 0 7
32978: PUSH
32979: LD_VAR 0 8
32983: PUSH
32984: FOR_IN
32985: IFFALSE 33013
// if i [ 1 ] = b_ext_radio then
32987: LD_VAR 0 7
32991: PUSH
32992: LD_INT 1
32994: ARRAY
32995: PUSH
32996: LD_INT 22
32998: EQUAL
32999: IFFALSE 33011
// begin control := control_remote ;
33001: LD_ADDR_VAR 0 4
33005: PUSH
33006: LD_INT 2
33008: ST_TO_ADDR
// break ;
33009: GO 33013
// end ;
33011: GO 32984
33013: POP
33014: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33015: LD_VAR 0 1
33019: PPUSH
33020: LD_VAR 0 2
33024: PPUSH
33025: LD_VAR 0 3
33029: PPUSH
33030: LD_VAR 0 4
33034: PPUSH
33035: LD_VAR 0 5
33039: PPUSH
33040: CALL_OW 448
33044: IFFALSE 33079
// begin result := [ chassis , engine , control , weapon ] ;
33046: LD_ADDR_VAR 0 6
33050: PUSH
33051: LD_VAR 0 2
33055: PUSH
33056: LD_VAR 0 3
33060: PUSH
33061: LD_VAR 0 4
33065: PUSH
33066: LD_VAR 0 5
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: ST_TO_ADDR
// exit ;
33077: GO 33491
// end ; _chassis := AvailableChassisList ( factory ) ;
33079: LD_ADDR_VAR 0 9
33083: PUSH
33084: LD_VAR 0 1
33088: PPUSH
33089: CALL_OW 475
33093: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33094: LD_ADDR_VAR 0 11
33098: PUSH
33099: LD_VAR 0 1
33103: PPUSH
33104: CALL_OW 476
33108: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33109: LD_ADDR_VAR 0 12
33113: PUSH
33114: LD_VAR 0 1
33118: PPUSH
33119: CALL_OW 477
33123: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33124: LD_ADDR_VAR 0 10
33128: PUSH
33129: LD_VAR 0 1
33133: PPUSH
33134: CALL_OW 478
33138: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33139: LD_VAR 0 9
33143: NOT
33144: PUSH
33145: LD_VAR 0 11
33149: NOT
33150: OR
33151: PUSH
33152: LD_VAR 0 12
33156: NOT
33157: OR
33158: PUSH
33159: LD_VAR 0 10
33163: NOT
33164: OR
33165: IFFALSE 33200
// begin result := [ chassis , engine , control , weapon ] ;
33167: LD_ADDR_VAR 0 6
33171: PUSH
33172: LD_VAR 0 2
33176: PUSH
33177: LD_VAR 0 3
33181: PUSH
33182: LD_VAR 0 4
33186: PUSH
33187: LD_VAR 0 5
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: ST_TO_ADDR
// exit ;
33198: GO 33491
// end ; if not chassis in _chassis then
33200: LD_VAR 0 2
33204: PUSH
33205: LD_VAR 0 9
33209: IN
33210: NOT
33211: IFFALSE 33237
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33213: LD_ADDR_VAR 0 2
33217: PUSH
33218: LD_VAR 0 9
33222: PUSH
33223: LD_INT 1
33225: PPUSH
33226: LD_VAR 0 9
33230: PPUSH
33231: CALL_OW 12
33235: ARRAY
33236: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33237: LD_VAR 0 2
33241: PPUSH
33242: LD_VAR 0 3
33246: PPUSH
33247: CALL 33496 0 2
33251: NOT
33252: IFFALSE 33311
// repeat engine := _engine [ 1 ] ;
33254: LD_ADDR_VAR 0 3
33258: PUSH
33259: LD_VAR 0 11
33263: PUSH
33264: LD_INT 1
33266: ARRAY
33267: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33268: LD_ADDR_VAR 0 11
33272: PUSH
33273: LD_VAR 0 11
33277: PPUSH
33278: LD_INT 1
33280: PPUSH
33281: CALL_OW 3
33285: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33286: LD_VAR 0 2
33290: PPUSH
33291: LD_VAR 0 3
33295: PPUSH
33296: CALL 33496 0 2
33300: PUSH
33301: LD_VAR 0 11
33305: PUSH
33306: EMPTY
33307: EQUAL
33308: OR
33309: IFFALSE 33254
// if not control in _control then
33311: LD_VAR 0 4
33315: PUSH
33316: LD_VAR 0 12
33320: IN
33321: NOT
33322: IFFALSE 33348
// control := _control [ rand ( 1 , _control ) ] ;
33324: LD_ADDR_VAR 0 4
33328: PUSH
33329: LD_VAR 0 12
33333: PUSH
33334: LD_INT 1
33336: PPUSH
33337: LD_VAR 0 12
33341: PPUSH
33342: CALL_OW 12
33346: ARRAY
33347: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33348: LD_VAR 0 2
33352: PPUSH
33353: LD_VAR 0 5
33357: PPUSH
33358: CALL 33716 0 2
33362: NOT
33363: IFFALSE 33422
// repeat weapon := _weapon [ 1 ] ;
33365: LD_ADDR_VAR 0 5
33369: PUSH
33370: LD_VAR 0 10
33374: PUSH
33375: LD_INT 1
33377: ARRAY
33378: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33379: LD_ADDR_VAR 0 10
33383: PUSH
33384: LD_VAR 0 10
33388: PPUSH
33389: LD_INT 1
33391: PPUSH
33392: CALL_OW 3
33396: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33397: LD_VAR 0 2
33401: PPUSH
33402: LD_VAR 0 5
33406: PPUSH
33407: CALL 33716 0 2
33411: PUSH
33412: LD_VAR 0 10
33416: PUSH
33417: EMPTY
33418: EQUAL
33419: OR
33420: IFFALSE 33365
// result := [ ] ;
33422: LD_ADDR_VAR 0 6
33426: PUSH
33427: EMPTY
33428: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33429: LD_VAR 0 1
33433: PPUSH
33434: LD_VAR 0 2
33438: PPUSH
33439: LD_VAR 0 3
33443: PPUSH
33444: LD_VAR 0 4
33448: PPUSH
33449: LD_VAR 0 5
33453: PPUSH
33454: CALL_OW 448
33458: IFFALSE 33491
// result := [ chassis , engine , control , weapon ] ;
33460: LD_ADDR_VAR 0 6
33464: PUSH
33465: LD_VAR 0 2
33469: PUSH
33470: LD_VAR 0 3
33474: PUSH
33475: LD_VAR 0 4
33479: PUSH
33480: LD_VAR 0 5
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: ST_TO_ADDR
// end ;
33491: LD_VAR 0 6
33495: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33496: LD_INT 0
33498: PPUSH
// if not chassis or not engine then
33499: LD_VAR 0 1
33503: NOT
33504: PUSH
33505: LD_VAR 0 2
33509: NOT
33510: OR
33511: IFFALSE 33515
// exit ;
33513: GO 33711
// case engine of engine_solar :
33515: LD_VAR 0 2
33519: PUSH
33520: LD_INT 2
33522: DOUBLE
33523: EQUAL
33524: IFTRUE 33528
33526: GO 33566
33528: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33529: LD_ADDR_VAR 0 3
33533: PUSH
33534: LD_INT 11
33536: PUSH
33537: LD_INT 12
33539: PUSH
33540: LD_INT 13
33542: PUSH
33543: LD_INT 14
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 3
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: ST_TO_ADDR
33564: GO 33695
33566: LD_INT 1
33568: DOUBLE
33569: EQUAL
33570: IFTRUE 33574
33572: GO 33636
33574: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33575: LD_ADDR_VAR 0 3
33579: PUSH
33580: LD_INT 11
33582: PUSH
33583: LD_INT 12
33585: PUSH
33586: LD_INT 13
33588: PUSH
33589: LD_INT 14
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: LD_INT 2
33597: PUSH
33598: LD_INT 3
33600: PUSH
33601: LD_INT 4
33603: PUSH
33604: LD_INT 5
33606: PUSH
33607: LD_INT 21
33609: PUSH
33610: LD_INT 23
33612: PUSH
33613: LD_INT 22
33615: PUSH
33616: LD_INT 24
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: ST_TO_ADDR
33634: GO 33695
33636: LD_INT 3
33638: DOUBLE
33639: EQUAL
33640: IFTRUE 33644
33642: GO 33694
33644: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33645: LD_ADDR_VAR 0 3
33649: PUSH
33650: LD_INT 13
33652: PUSH
33653: LD_INT 14
33655: PUSH
33656: LD_INT 2
33658: PUSH
33659: LD_INT 3
33661: PUSH
33662: LD_INT 4
33664: PUSH
33665: LD_INT 5
33667: PUSH
33668: LD_INT 21
33670: PUSH
33671: LD_INT 22
33673: PUSH
33674: LD_INT 23
33676: PUSH
33677: LD_INT 24
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: ST_TO_ADDR
33692: GO 33695
33694: POP
// result := ( chassis in result ) ;
33695: LD_ADDR_VAR 0 3
33699: PUSH
33700: LD_VAR 0 1
33704: PUSH
33705: LD_VAR 0 3
33709: IN
33710: ST_TO_ADDR
// end ;
33711: LD_VAR 0 3
33715: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33716: LD_INT 0
33718: PPUSH
// if not chassis or not weapon then
33719: LD_VAR 0 1
33723: NOT
33724: PUSH
33725: LD_VAR 0 2
33729: NOT
33730: OR
33731: IFFALSE 33735
// exit ;
33733: GO 34795
// case weapon of us_machine_gun :
33735: LD_VAR 0 2
33739: PUSH
33740: LD_INT 2
33742: DOUBLE
33743: EQUAL
33744: IFTRUE 33748
33746: GO 33778
33748: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33749: LD_ADDR_VAR 0 3
33753: PUSH
33754: LD_INT 1
33756: PUSH
33757: LD_INT 2
33759: PUSH
33760: LD_INT 3
33762: PUSH
33763: LD_INT 4
33765: PUSH
33766: LD_INT 5
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: ST_TO_ADDR
33776: GO 34779
33778: LD_INT 3
33780: DOUBLE
33781: EQUAL
33782: IFTRUE 33786
33784: GO 33816
33786: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33787: LD_ADDR_VAR 0 3
33791: PUSH
33792: LD_INT 1
33794: PUSH
33795: LD_INT 2
33797: PUSH
33798: LD_INT 3
33800: PUSH
33801: LD_INT 4
33803: PUSH
33804: LD_INT 5
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: ST_TO_ADDR
33814: GO 34779
33816: LD_INT 11
33818: DOUBLE
33819: EQUAL
33820: IFTRUE 33824
33822: GO 33854
33824: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33825: LD_ADDR_VAR 0 3
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: LD_INT 2
33835: PUSH
33836: LD_INT 3
33838: PUSH
33839: LD_INT 4
33841: PUSH
33842: LD_INT 5
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: ST_TO_ADDR
33852: GO 34779
33854: LD_INT 4
33856: DOUBLE
33857: EQUAL
33858: IFTRUE 33862
33860: GO 33888
33862: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33863: LD_ADDR_VAR 0 3
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: LD_INT 3
33873: PUSH
33874: LD_INT 4
33876: PUSH
33877: LD_INT 5
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: ST_TO_ADDR
33886: GO 34779
33888: LD_INT 5
33890: DOUBLE
33891: EQUAL
33892: IFTRUE 33896
33894: GO 33922
33896: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33897: LD_ADDR_VAR 0 3
33901: PUSH
33902: LD_INT 2
33904: PUSH
33905: LD_INT 3
33907: PUSH
33908: LD_INT 4
33910: PUSH
33911: LD_INT 5
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: ST_TO_ADDR
33920: GO 34779
33922: LD_INT 9
33924: DOUBLE
33925: EQUAL
33926: IFTRUE 33930
33928: GO 33956
33930: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33931: LD_ADDR_VAR 0 3
33935: PUSH
33936: LD_INT 2
33938: PUSH
33939: LD_INT 3
33941: PUSH
33942: LD_INT 4
33944: PUSH
33945: LD_INT 5
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: ST_TO_ADDR
33954: GO 34779
33956: LD_INT 7
33958: DOUBLE
33959: EQUAL
33960: IFTRUE 33964
33962: GO 33990
33964: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33965: LD_ADDR_VAR 0 3
33969: PUSH
33970: LD_INT 2
33972: PUSH
33973: LD_INT 3
33975: PUSH
33976: LD_INT 4
33978: PUSH
33979: LD_INT 5
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: ST_TO_ADDR
33988: GO 34779
33990: LD_INT 12
33992: DOUBLE
33993: EQUAL
33994: IFTRUE 33998
33996: GO 34024
33998: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33999: LD_ADDR_VAR 0 3
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: LD_INT 3
34009: PUSH
34010: LD_INT 4
34012: PUSH
34013: LD_INT 5
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: ST_TO_ADDR
34022: GO 34779
34024: LD_INT 13
34026: DOUBLE
34027: EQUAL
34028: IFTRUE 34032
34030: GO 34058
34032: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34033: LD_ADDR_VAR 0 3
34037: PUSH
34038: LD_INT 2
34040: PUSH
34041: LD_INT 3
34043: PUSH
34044: LD_INT 4
34046: PUSH
34047: LD_INT 5
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: ST_TO_ADDR
34056: GO 34779
34058: LD_INT 14
34060: DOUBLE
34061: EQUAL
34062: IFTRUE 34066
34064: GO 34084
34066: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34067: LD_ADDR_VAR 0 3
34071: PUSH
34072: LD_INT 4
34074: PUSH
34075: LD_INT 5
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: ST_TO_ADDR
34082: GO 34779
34084: LD_INT 6
34086: DOUBLE
34087: EQUAL
34088: IFTRUE 34092
34090: GO 34110
34092: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34093: LD_ADDR_VAR 0 3
34097: PUSH
34098: LD_INT 4
34100: PUSH
34101: LD_INT 5
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: ST_TO_ADDR
34108: GO 34779
34110: LD_INT 10
34112: DOUBLE
34113: EQUAL
34114: IFTRUE 34118
34116: GO 34136
34118: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34119: LD_ADDR_VAR 0 3
34123: PUSH
34124: LD_INT 4
34126: PUSH
34127: LD_INT 5
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: ST_TO_ADDR
34134: GO 34779
34136: LD_INT 22
34138: DOUBLE
34139: EQUAL
34140: IFTRUE 34144
34142: GO 34170
34144: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34145: LD_ADDR_VAR 0 3
34149: PUSH
34150: LD_INT 11
34152: PUSH
34153: LD_INT 12
34155: PUSH
34156: LD_INT 13
34158: PUSH
34159: LD_INT 14
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: ST_TO_ADDR
34168: GO 34779
34170: LD_INT 23
34172: DOUBLE
34173: EQUAL
34174: IFTRUE 34178
34176: GO 34204
34178: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34179: LD_ADDR_VAR 0 3
34183: PUSH
34184: LD_INT 11
34186: PUSH
34187: LD_INT 12
34189: PUSH
34190: LD_INT 13
34192: PUSH
34193: LD_INT 14
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: ST_TO_ADDR
34202: GO 34779
34204: LD_INT 24
34206: DOUBLE
34207: EQUAL
34208: IFTRUE 34212
34210: GO 34238
34212: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34213: LD_ADDR_VAR 0 3
34217: PUSH
34218: LD_INT 11
34220: PUSH
34221: LD_INT 12
34223: PUSH
34224: LD_INT 13
34226: PUSH
34227: LD_INT 14
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: ST_TO_ADDR
34236: GO 34779
34238: LD_INT 30
34240: DOUBLE
34241: EQUAL
34242: IFTRUE 34246
34244: GO 34272
34246: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34247: LD_ADDR_VAR 0 3
34251: PUSH
34252: LD_INT 11
34254: PUSH
34255: LD_INT 12
34257: PUSH
34258: LD_INT 13
34260: PUSH
34261: LD_INT 14
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: ST_TO_ADDR
34270: GO 34779
34272: LD_INT 25
34274: DOUBLE
34275: EQUAL
34276: IFTRUE 34280
34278: GO 34298
34280: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34281: LD_ADDR_VAR 0 3
34285: PUSH
34286: LD_INT 13
34288: PUSH
34289: LD_INT 14
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: ST_TO_ADDR
34296: GO 34779
34298: LD_INT 27
34300: DOUBLE
34301: EQUAL
34302: IFTRUE 34306
34304: GO 34324
34306: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34307: LD_ADDR_VAR 0 3
34311: PUSH
34312: LD_INT 13
34314: PUSH
34315: LD_INT 14
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: ST_TO_ADDR
34322: GO 34779
34324: LD_INT 92
34326: DOUBLE
34327: EQUAL
34328: IFTRUE 34332
34330: GO 34358
34332: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34333: LD_ADDR_VAR 0 3
34337: PUSH
34338: LD_INT 11
34340: PUSH
34341: LD_INT 12
34343: PUSH
34344: LD_INT 13
34346: PUSH
34347: LD_INT 14
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: ST_TO_ADDR
34356: GO 34779
34358: LD_INT 28
34360: DOUBLE
34361: EQUAL
34362: IFTRUE 34366
34364: GO 34384
34366: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34367: LD_ADDR_VAR 0 3
34371: PUSH
34372: LD_INT 13
34374: PUSH
34375: LD_INT 14
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: ST_TO_ADDR
34382: GO 34779
34384: LD_INT 29
34386: DOUBLE
34387: EQUAL
34388: IFTRUE 34392
34390: GO 34410
34392: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34393: LD_ADDR_VAR 0 3
34397: PUSH
34398: LD_INT 13
34400: PUSH
34401: LD_INT 14
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: ST_TO_ADDR
34408: GO 34779
34410: LD_INT 31
34412: DOUBLE
34413: EQUAL
34414: IFTRUE 34418
34416: GO 34436
34418: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34419: LD_ADDR_VAR 0 3
34423: PUSH
34424: LD_INT 13
34426: PUSH
34427: LD_INT 14
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: ST_TO_ADDR
34434: GO 34779
34436: LD_INT 26
34438: DOUBLE
34439: EQUAL
34440: IFTRUE 34444
34442: GO 34462
34444: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34445: LD_ADDR_VAR 0 3
34449: PUSH
34450: LD_INT 13
34452: PUSH
34453: LD_INT 14
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: ST_TO_ADDR
34460: GO 34779
34462: LD_INT 42
34464: DOUBLE
34465: EQUAL
34466: IFTRUE 34470
34468: GO 34496
34470: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34471: LD_ADDR_VAR 0 3
34475: PUSH
34476: LD_INT 21
34478: PUSH
34479: LD_INT 22
34481: PUSH
34482: LD_INT 23
34484: PUSH
34485: LD_INT 24
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: ST_TO_ADDR
34494: GO 34779
34496: LD_INT 43
34498: DOUBLE
34499: EQUAL
34500: IFTRUE 34504
34502: GO 34530
34504: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34505: LD_ADDR_VAR 0 3
34509: PUSH
34510: LD_INT 21
34512: PUSH
34513: LD_INT 22
34515: PUSH
34516: LD_INT 23
34518: PUSH
34519: LD_INT 24
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: ST_TO_ADDR
34528: GO 34779
34530: LD_INT 44
34532: DOUBLE
34533: EQUAL
34534: IFTRUE 34538
34536: GO 34564
34538: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34539: LD_ADDR_VAR 0 3
34543: PUSH
34544: LD_INT 21
34546: PUSH
34547: LD_INT 22
34549: PUSH
34550: LD_INT 23
34552: PUSH
34553: LD_INT 24
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: ST_TO_ADDR
34562: GO 34779
34564: LD_INT 45
34566: DOUBLE
34567: EQUAL
34568: IFTRUE 34572
34570: GO 34598
34572: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34573: LD_ADDR_VAR 0 3
34577: PUSH
34578: LD_INT 21
34580: PUSH
34581: LD_INT 22
34583: PUSH
34584: LD_INT 23
34586: PUSH
34587: LD_INT 24
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: ST_TO_ADDR
34596: GO 34779
34598: LD_INT 49
34600: DOUBLE
34601: EQUAL
34602: IFTRUE 34606
34604: GO 34632
34606: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34607: LD_ADDR_VAR 0 3
34611: PUSH
34612: LD_INT 21
34614: PUSH
34615: LD_INT 22
34617: PUSH
34618: LD_INT 23
34620: PUSH
34621: LD_INT 24
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: ST_TO_ADDR
34630: GO 34779
34632: LD_INT 51
34634: DOUBLE
34635: EQUAL
34636: IFTRUE 34640
34638: GO 34666
34640: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34641: LD_ADDR_VAR 0 3
34645: PUSH
34646: LD_INT 21
34648: PUSH
34649: LD_INT 22
34651: PUSH
34652: LD_INT 23
34654: PUSH
34655: LD_INT 24
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: ST_TO_ADDR
34664: GO 34779
34666: LD_INT 52
34668: DOUBLE
34669: EQUAL
34670: IFTRUE 34674
34672: GO 34700
34674: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34675: LD_ADDR_VAR 0 3
34679: PUSH
34680: LD_INT 21
34682: PUSH
34683: LD_INT 22
34685: PUSH
34686: LD_INT 23
34688: PUSH
34689: LD_INT 24
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: ST_TO_ADDR
34698: GO 34779
34700: LD_INT 53
34702: DOUBLE
34703: EQUAL
34704: IFTRUE 34708
34706: GO 34726
34708: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34709: LD_ADDR_VAR 0 3
34713: PUSH
34714: LD_INT 23
34716: PUSH
34717: LD_INT 24
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: ST_TO_ADDR
34724: GO 34779
34726: LD_INT 46
34728: DOUBLE
34729: EQUAL
34730: IFTRUE 34734
34732: GO 34752
34734: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34735: LD_ADDR_VAR 0 3
34739: PUSH
34740: LD_INT 23
34742: PUSH
34743: LD_INT 24
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: ST_TO_ADDR
34750: GO 34779
34752: LD_INT 47
34754: DOUBLE
34755: EQUAL
34756: IFTRUE 34760
34758: GO 34778
34760: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34761: LD_ADDR_VAR 0 3
34765: PUSH
34766: LD_INT 23
34768: PUSH
34769: LD_INT 24
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: ST_TO_ADDR
34776: GO 34779
34778: POP
// result := ( chassis in result ) ;
34779: LD_ADDR_VAR 0 3
34783: PUSH
34784: LD_VAR 0 1
34788: PUSH
34789: LD_VAR 0 3
34793: IN
34794: ST_TO_ADDR
// end ;
34795: LD_VAR 0 3
34799: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34800: LD_INT 0
34802: PPUSH
34803: PPUSH
34804: PPUSH
34805: PPUSH
34806: PPUSH
34807: PPUSH
34808: PPUSH
// result := array ;
34809: LD_ADDR_VAR 0 5
34813: PUSH
34814: LD_VAR 0 1
34818: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34819: LD_VAR 0 1
34823: NOT
34824: PUSH
34825: LD_VAR 0 2
34829: NOT
34830: OR
34831: PUSH
34832: LD_VAR 0 3
34836: NOT
34837: OR
34838: PUSH
34839: LD_VAR 0 2
34843: PUSH
34844: LD_VAR 0 1
34848: GREATER
34849: OR
34850: PUSH
34851: LD_VAR 0 3
34855: PUSH
34856: LD_VAR 0 1
34860: GREATER
34861: OR
34862: IFFALSE 34866
// exit ;
34864: GO 35162
// if direction then
34866: LD_VAR 0 4
34870: IFFALSE 34934
// begin d := 1 ;
34872: LD_ADDR_VAR 0 9
34876: PUSH
34877: LD_INT 1
34879: ST_TO_ADDR
// if i_from > i_to then
34880: LD_VAR 0 2
34884: PUSH
34885: LD_VAR 0 3
34889: GREATER
34890: IFFALSE 34916
// length := ( array - i_from ) + i_to else
34892: LD_ADDR_VAR 0 11
34896: PUSH
34897: LD_VAR 0 1
34901: PUSH
34902: LD_VAR 0 2
34906: MINUS
34907: PUSH
34908: LD_VAR 0 3
34912: PLUS
34913: ST_TO_ADDR
34914: GO 34932
// length := i_to - i_from ;
34916: LD_ADDR_VAR 0 11
34920: PUSH
34921: LD_VAR 0 3
34925: PUSH
34926: LD_VAR 0 2
34930: MINUS
34931: ST_TO_ADDR
// end else
34932: GO 34995
// begin d := - 1 ;
34934: LD_ADDR_VAR 0 9
34938: PUSH
34939: LD_INT 1
34941: NEG
34942: ST_TO_ADDR
// if i_from > i_to then
34943: LD_VAR 0 2
34947: PUSH
34948: LD_VAR 0 3
34952: GREATER
34953: IFFALSE 34973
// length := i_from - i_to else
34955: LD_ADDR_VAR 0 11
34959: PUSH
34960: LD_VAR 0 2
34964: PUSH
34965: LD_VAR 0 3
34969: MINUS
34970: ST_TO_ADDR
34971: GO 34995
// length := ( array - i_to ) + i_from ;
34973: LD_ADDR_VAR 0 11
34977: PUSH
34978: LD_VAR 0 1
34982: PUSH
34983: LD_VAR 0 3
34987: MINUS
34988: PUSH
34989: LD_VAR 0 2
34993: PLUS
34994: ST_TO_ADDR
// end ; if not length then
34995: LD_VAR 0 11
34999: NOT
35000: IFFALSE 35004
// exit ;
35002: GO 35162
// tmp := array ;
35004: LD_ADDR_VAR 0 10
35008: PUSH
35009: LD_VAR 0 1
35013: ST_TO_ADDR
// for i = 1 to length do
35014: LD_ADDR_VAR 0 6
35018: PUSH
35019: DOUBLE
35020: LD_INT 1
35022: DEC
35023: ST_TO_ADDR
35024: LD_VAR 0 11
35028: PUSH
35029: FOR_TO
35030: IFFALSE 35150
// begin for j = 1 to array do
35032: LD_ADDR_VAR 0 7
35036: PUSH
35037: DOUBLE
35038: LD_INT 1
35040: DEC
35041: ST_TO_ADDR
35042: LD_VAR 0 1
35046: PUSH
35047: FOR_TO
35048: IFFALSE 35136
// begin k := j + d ;
35050: LD_ADDR_VAR 0 8
35054: PUSH
35055: LD_VAR 0 7
35059: PUSH
35060: LD_VAR 0 9
35064: PLUS
35065: ST_TO_ADDR
// if k > array then
35066: LD_VAR 0 8
35070: PUSH
35071: LD_VAR 0 1
35075: GREATER
35076: IFFALSE 35086
// k := 1 ;
35078: LD_ADDR_VAR 0 8
35082: PUSH
35083: LD_INT 1
35085: ST_TO_ADDR
// if not k then
35086: LD_VAR 0 8
35090: NOT
35091: IFFALSE 35103
// k := array ;
35093: LD_ADDR_VAR 0 8
35097: PUSH
35098: LD_VAR 0 1
35102: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35103: LD_ADDR_VAR 0 10
35107: PUSH
35108: LD_VAR 0 10
35112: PPUSH
35113: LD_VAR 0 8
35117: PPUSH
35118: LD_VAR 0 1
35122: PUSH
35123: LD_VAR 0 7
35127: ARRAY
35128: PPUSH
35129: CALL_OW 1
35133: ST_TO_ADDR
// end ;
35134: GO 35047
35136: POP
35137: POP
// array := tmp ;
35138: LD_ADDR_VAR 0 1
35142: PUSH
35143: LD_VAR 0 10
35147: ST_TO_ADDR
// end ;
35148: GO 35029
35150: POP
35151: POP
// result := array ;
35152: LD_ADDR_VAR 0 5
35156: PUSH
35157: LD_VAR 0 1
35161: ST_TO_ADDR
// end ;
35162: LD_VAR 0 5
35166: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35167: LD_INT 0
35169: PPUSH
35170: PPUSH
// result := 0 ;
35171: LD_ADDR_VAR 0 3
35175: PUSH
35176: LD_INT 0
35178: ST_TO_ADDR
// if not array or not value in array then
35179: LD_VAR 0 1
35183: NOT
35184: PUSH
35185: LD_VAR 0 2
35189: PUSH
35190: LD_VAR 0 1
35194: IN
35195: NOT
35196: OR
35197: IFFALSE 35201
// exit ;
35199: GO 35255
// for i = 1 to array do
35201: LD_ADDR_VAR 0 4
35205: PUSH
35206: DOUBLE
35207: LD_INT 1
35209: DEC
35210: ST_TO_ADDR
35211: LD_VAR 0 1
35215: PUSH
35216: FOR_TO
35217: IFFALSE 35253
// if value = array [ i ] then
35219: LD_VAR 0 2
35223: PUSH
35224: LD_VAR 0 1
35228: PUSH
35229: LD_VAR 0 4
35233: ARRAY
35234: EQUAL
35235: IFFALSE 35251
// begin result := i ;
35237: LD_ADDR_VAR 0 3
35241: PUSH
35242: LD_VAR 0 4
35246: ST_TO_ADDR
// exit ;
35247: POP
35248: POP
35249: GO 35255
// end ;
35251: GO 35216
35253: POP
35254: POP
// end ;
35255: LD_VAR 0 3
35259: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35260: LD_INT 0
35262: PPUSH
// vc_chassis := chassis ;
35263: LD_ADDR_OWVAR 37
35267: PUSH
35268: LD_VAR 0 1
35272: ST_TO_ADDR
// vc_engine := engine ;
35273: LD_ADDR_OWVAR 39
35277: PUSH
35278: LD_VAR 0 2
35282: ST_TO_ADDR
// vc_control := control ;
35283: LD_ADDR_OWVAR 38
35287: PUSH
35288: LD_VAR 0 3
35292: ST_TO_ADDR
// vc_weapon := weapon ;
35293: LD_ADDR_OWVAR 40
35297: PUSH
35298: LD_VAR 0 4
35302: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35303: LD_ADDR_OWVAR 41
35307: PUSH
35308: LD_VAR 0 5
35312: ST_TO_ADDR
// end ;
35313: LD_VAR 0 6
35317: RET
// export function WantPlant ( unit ) ; var task ; begin
35318: LD_INT 0
35320: PPUSH
35321: PPUSH
// result := false ;
35322: LD_ADDR_VAR 0 2
35326: PUSH
35327: LD_INT 0
35329: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35330: LD_ADDR_VAR 0 3
35334: PUSH
35335: LD_VAR 0 1
35339: PPUSH
35340: CALL_OW 437
35344: ST_TO_ADDR
// if task then
35345: LD_VAR 0 3
35349: IFFALSE 35377
// if task [ 1 ] [ 1 ] = p then
35351: LD_VAR 0 3
35355: PUSH
35356: LD_INT 1
35358: ARRAY
35359: PUSH
35360: LD_INT 1
35362: ARRAY
35363: PUSH
35364: LD_STRING p
35366: EQUAL
35367: IFFALSE 35377
// result := true ;
35369: LD_ADDR_VAR 0 2
35373: PUSH
35374: LD_INT 1
35376: ST_TO_ADDR
// end ;
35377: LD_VAR 0 2
35381: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35382: LD_INT 0
35384: PPUSH
35385: PPUSH
35386: PPUSH
35387: PPUSH
// if pos < 1 then
35388: LD_VAR 0 2
35392: PUSH
35393: LD_INT 1
35395: LESS
35396: IFFALSE 35400
// exit ;
35398: GO 35703
// if pos = 1 then
35400: LD_VAR 0 2
35404: PUSH
35405: LD_INT 1
35407: EQUAL
35408: IFFALSE 35441
// result := Replace ( arr , pos [ 1 ] , value ) else
35410: LD_ADDR_VAR 0 4
35414: PUSH
35415: LD_VAR 0 1
35419: PPUSH
35420: LD_VAR 0 2
35424: PUSH
35425: LD_INT 1
35427: ARRAY
35428: PPUSH
35429: LD_VAR 0 3
35433: PPUSH
35434: CALL_OW 1
35438: ST_TO_ADDR
35439: GO 35703
// begin tmp := arr ;
35441: LD_ADDR_VAR 0 6
35445: PUSH
35446: LD_VAR 0 1
35450: ST_TO_ADDR
// s_arr := [ tmp ] ;
35451: LD_ADDR_VAR 0 7
35455: PUSH
35456: LD_VAR 0 6
35460: PUSH
35461: EMPTY
35462: LIST
35463: ST_TO_ADDR
// for i = 1 to pos - 1 do
35464: LD_ADDR_VAR 0 5
35468: PUSH
35469: DOUBLE
35470: LD_INT 1
35472: DEC
35473: ST_TO_ADDR
35474: LD_VAR 0 2
35478: PUSH
35479: LD_INT 1
35481: MINUS
35482: PUSH
35483: FOR_TO
35484: IFFALSE 35529
// begin tmp := tmp [ pos [ i ] ] ;
35486: LD_ADDR_VAR 0 6
35490: PUSH
35491: LD_VAR 0 6
35495: PUSH
35496: LD_VAR 0 2
35500: PUSH
35501: LD_VAR 0 5
35505: ARRAY
35506: ARRAY
35507: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35508: LD_ADDR_VAR 0 7
35512: PUSH
35513: LD_VAR 0 7
35517: PUSH
35518: LD_VAR 0 6
35522: PUSH
35523: EMPTY
35524: LIST
35525: ADD
35526: ST_TO_ADDR
// end ;
35527: GO 35483
35529: POP
35530: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35531: LD_ADDR_VAR 0 6
35535: PUSH
35536: LD_VAR 0 6
35540: PPUSH
35541: LD_VAR 0 2
35545: PUSH
35546: LD_VAR 0 2
35550: ARRAY
35551: PPUSH
35552: LD_VAR 0 3
35556: PPUSH
35557: CALL_OW 1
35561: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35562: LD_ADDR_VAR 0 7
35566: PUSH
35567: LD_VAR 0 7
35571: PPUSH
35572: LD_VAR 0 7
35576: PPUSH
35577: LD_VAR 0 6
35581: PPUSH
35582: CALL_OW 1
35586: ST_TO_ADDR
// for i = s_arr downto 2 do
35587: LD_ADDR_VAR 0 5
35591: PUSH
35592: DOUBLE
35593: LD_VAR 0 7
35597: INC
35598: ST_TO_ADDR
35599: LD_INT 2
35601: PUSH
35602: FOR_DOWNTO
35603: IFFALSE 35687
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35605: LD_ADDR_VAR 0 6
35609: PUSH
35610: LD_VAR 0 7
35614: PUSH
35615: LD_VAR 0 5
35619: PUSH
35620: LD_INT 1
35622: MINUS
35623: ARRAY
35624: PPUSH
35625: LD_VAR 0 2
35629: PUSH
35630: LD_VAR 0 5
35634: PUSH
35635: LD_INT 1
35637: MINUS
35638: ARRAY
35639: PPUSH
35640: LD_VAR 0 7
35644: PUSH
35645: LD_VAR 0 5
35649: ARRAY
35650: PPUSH
35651: CALL_OW 1
35655: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35656: LD_ADDR_VAR 0 7
35660: PUSH
35661: LD_VAR 0 7
35665: PPUSH
35666: LD_VAR 0 5
35670: PUSH
35671: LD_INT 1
35673: MINUS
35674: PPUSH
35675: LD_VAR 0 6
35679: PPUSH
35680: CALL_OW 1
35684: ST_TO_ADDR
// end ;
35685: GO 35602
35687: POP
35688: POP
// result := s_arr [ 1 ] ;
35689: LD_ADDR_VAR 0 4
35693: PUSH
35694: LD_VAR 0 7
35698: PUSH
35699: LD_INT 1
35701: ARRAY
35702: ST_TO_ADDR
// end ; end ;
35703: LD_VAR 0 4
35707: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35708: LD_INT 0
35710: PPUSH
35711: PPUSH
// if not list then
35712: LD_VAR 0 1
35716: NOT
35717: IFFALSE 35721
// exit ;
35719: GO 35812
// i := list [ pos1 ] ;
35721: LD_ADDR_VAR 0 5
35725: PUSH
35726: LD_VAR 0 1
35730: PUSH
35731: LD_VAR 0 2
35735: ARRAY
35736: ST_TO_ADDR
// if not i then
35737: LD_VAR 0 5
35741: NOT
35742: IFFALSE 35746
// exit ;
35744: GO 35812
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35746: LD_ADDR_VAR 0 1
35750: PUSH
35751: LD_VAR 0 1
35755: PPUSH
35756: LD_VAR 0 2
35760: PPUSH
35761: LD_VAR 0 1
35765: PUSH
35766: LD_VAR 0 3
35770: ARRAY
35771: PPUSH
35772: CALL_OW 1
35776: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35777: LD_ADDR_VAR 0 1
35781: PUSH
35782: LD_VAR 0 1
35786: PPUSH
35787: LD_VAR 0 3
35791: PPUSH
35792: LD_VAR 0 5
35796: PPUSH
35797: CALL_OW 1
35801: ST_TO_ADDR
// result := list ;
35802: LD_ADDR_VAR 0 4
35806: PUSH
35807: LD_VAR 0 1
35811: ST_TO_ADDR
// end ;
35812: LD_VAR 0 4
35816: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35817: LD_INT 0
35819: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35820: LD_ADDR_VAR 0 5
35824: PUSH
35825: LD_VAR 0 1
35829: PPUSH
35830: CALL_OW 250
35834: PPUSH
35835: LD_VAR 0 1
35839: PPUSH
35840: CALL_OW 251
35844: PPUSH
35845: LD_VAR 0 2
35849: PPUSH
35850: LD_VAR 0 3
35854: PPUSH
35855: LD_VAR 0 4
35859: PPUSH
35860: CALL 35870 0 5
35864: ST_TO_ADDR
// end ;
35865: LD_VAR 0 5
35869: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35870: LD_INT 0
35872: PPUSH
35873: PPUSH
35874: PPUSH
35875: PPUSH
// if not list then
35876: LD_VAR 0 3
35880: NOT
35881: IFFALSE 35885
// exit ;
35883: GO 36273
// result := [ ] ;
35885: LD_ADDR_VAR 0 6
35889: PUSH
35890: EMPTY
35891: ST_TO_ADDR
// for i in list do
35892: LD_ADDR_VAR 0 7
35896: PUSH
35897: LD_VAR 0 3
35901: PUSH
35902: FOR_IN
35903: IFFALSE 36105
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35905: LD_ADDR_VAR 0 9
35909: PUSH
35910: LD_VAR 0 7
35914: PPUSH
35915: LD_VAR 0 1
35919: PPUSH
35920: LD_VAR 0 2
35924: PPUSH
35925: CALL_OW 297
35929: ST_TO_ADDR
// if not result then
35930: LD_VAR 0 6
35934: NOT
35935: IFFALSE 35961
// result := [ [ i , tmp ] ] else
35937: LD_ADDR_VAR 0 6
35941: PUSH
35942: LD_VAR 0 7
35946: PUSH
35947: LD_VAR 0 9
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: EMPTY
35957: LIST
35958: ST_TO_ADDR
35959: GO 36103
// begin if result [ result ] [ 2 ] < tmp then
35961: LD_VAR 0 6
35965: PUSH
35966: LD_VAR 0 6
35970: ARRAY
35971: PUSH
35972: LD_INT 2
35974: ARRAY
35975: PUSH
35976: LD_VAR 0 9
35980: LESS
35981: IFFALSE 36023
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35983: LD_ADDR_VAR 0 6
35987: PUSH
35988: LD_VAR 0 6
35992: PPUSH
35993: LD_VAR 0 6
35997: PUSH
35998: LD_INT 1
36000: PLUS
36001: PPUSH
36002: LD_VAR 0 7
36006: PUSH
36007: LD_VAR 0 9
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PPUSH
36016: CALL_OW 2
36020: ST_TO_ADDR
36021: GO 36103
// for j = 1 to result do
36023: LD_ADDR_VAR 0 8
36027: PUSH
36028: DOUBLE
36029: LD_INT 1
36031: DEC
36032: ST_TO_ADDR
36033: LD_VAR 0 6
36037: PUSH
36038: FOR_TO
36039: IFFALSE 36101
// begin if tmp < result [ j ] [ 2 ] then
36041: LD_VAR 0 9
36045: PUSH
36046: LD_VAR 0 6
36050: PUSH
36051: LD_VAR 0 8
36055: ARRAY
36056: PUSH
36057: LD_INT 2
36059: ARRAY
36060: LESS
36061: IFFALSE 36099
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36063: LD_ADDR_VAR 0 6
36067: PUSH
36068: LD_VAR 0 6
36072: PPUSH
36073: LD_VAR 0 8
36077: PPUSH
36078: LD_VAR 0 7
36082: PUSH
36083: LD_VAR 0 9
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PPUSH
36092: CALL_OW 2
36096: ST_TO_ADDR
// break ;
36097: GO 36101
// end ; end ;
36099: GO 36038
36101: POP
36102: POP
// end ; end ;
36103: GO 35902
36105: POP
36106: POP
// if result and not asc then
36107: LD_VAR 0 6
36111: PUSH
36112: LD_VAR 0 4
36116: NOT
36117: AND
36118: IFFALSE 36193
// begin tmp := result ;
36120: LD_ADDR_VAR 0 9
36124: PUSH
36125: LD_VAR 0 6
36129: ST_TO_ADDR
// for i = tmp downto 1 do
36130: LD_ADDR_VAR 0 7
36134: PUSH
36135: DOUBLE
36136: LD_VAR 0 9
36140: INC
36141: ST_TO_ADDR
36142: LD_INT 1
36144: PUSH
36145: FOR_DOWNTO
36146: IFFALSE 36191
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36148: LD_ADDR_VAR 0 6
36152: PUSH
36153: LD_VAR 0 6
36157: PPUSH
36158: LD_VAR 0 9
36162: PUSH
36163: LD_VAR 0 7
36167: MINUS
36168: PUSH
36169: LD_INT 1
36171: PLUS
36172: PPUSH
36173: LD_VAR 0 9
36177: PUSH
36178: LD_VAR 0 7
36182: ARRAY
36183: PPUSH
36184: CALL_OW 1
36188: ST_TO_ADDR
36189: GO 36145
36191: POP
36192: POP
// end ; tmp := [ ] ;
36193: LD_ADDR_VAR 0 9
36197: PUSH
36198: EMPTY
36199: ST_TO_ADDR
// if mode then
36200: LD_VAR 0 5
36204: IFFALSE 36273
// begin for i = 1 to result do
36206: LD_ADDR_VAR 0 7
36210: PUSH
36211: DOUBLE
36212: LD_INT 1
36214: DEC
36215: ST_TO_ADDR
36216: LD_VAR 0 6
36220: PUSH
36221: FOR_TO
36222: IFFALSE 36261
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36224: LD_ADDR_VAR 0 9
36228: PUSH
36229: LD_VAR 0 9
36233: PPUSH
36234: LD_VAR 0 7
36238: PPUSH
36239: LD_VAR 0 6
36243: PUSH
36244: LD_VAR 0 7
36248: ARRAY
36249: PUSH
36250: LD_INT 1
36252: ARRAY
36253: PPUSH
36254: CALL_OW 1
36258: ST_TO_ADDR
36259: GO 36221
36261: POP
36262: POP
// result := tmp ;
36263: LD_ADDR_VAR 0 6
36267: PUSH
36268: LD_VAR 0 9
36272: ST_TO_ADDR
// end ; end ;
36273: LD_VAR 0 6
36277: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36278: LD_INT 0
36280: PPUSH
36281: PPUSH
36282: PPUSH
36283: PPUSH
36284: PPUSH
36285: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36286: LD_ADDR_VAR 0 5
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: LD_INT 0
36299: PUSH
36300: EMPTY
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: ST_TO_ADDR
// if not x or not y then
36308: LD_VAR 0 2
36312: NOT
36313: PUSH
36314: LD_VAR 0 3
36318: NOT
36319: OR
36320: IFFALSE 36324
// exit ;
36322: GO 37974
// if not range then
36324: LD_VAR 0 4
36328: NOT
36329: IFFALSE 36339
// range := 10 ;
36331: LD_ADDR_VAR 0 4
36335: PUSH
36336: LD_INT 10
36338: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36339: LD_ADDR_VAR 0 8
36343: PUSH
36344: LD_INT 81
36346: PUSH
36347: LD_VAR 0 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 92
36358: PUSH
36359: LD_VAR 0 2
36363: PUSH
36364: LD_VAR 0 3
36368: PUSH
36369: LD_VAR 0 4
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 3
36382: PUSH
36383: LD_INT 21
36385: PUSH
36386: LD_INT 3
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: LIST
36401: PPUSH
36402: CALL_OW 69
36406: ST_TO_ADDR
// if not tmp then
36407: LD_VAR 0 8
36411: NOT
36412: IFFALSE 36416
// exit ;
36414: GO 37974
// for i in tmp do
36416: LD_ADDR_VAR 0 6
36420: PUSH
36421: LD_VAR 0 8
36425: PUSH
36426: FOR_IN
36427: IFFALSE 37949
// begin points := [ 0 , 0 , 0 ] ;
36429: LD_ADDR_VAR 0 9
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: LD_INT 0
36439: PUSH
36440: LD_INT 0
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: LIST
36447: ST_TO_ADDR
// bpoints := 1 ;
36448: LD_ADDR_VAR 0 10
36452: PUSH
36453: LD_INT 1
36455: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36456: LD_VAR 0 6
36460: PPUSH
36461: CALL_OW 247
36465: PUSH
36466: LD_INT 1
36468: DOUBLE
36469: EQUAL
36470: IFTRUE 36474
36472: GO 37052
36474: POP
// begin if GetClass ( i ) = 1 then
36475: LD_VAR 0 6
36479: PPUSH
36480: CALL_OW 257
36484: PUSH
36485: LD_INT 1
36487: EQUAL
36488: IFFALSE 36509
// points := [ 10 , 5 , 3 ] ;
36490: LD_ADDR_VAR 0 9
36494: PUSH
36495: LD_INT 10
36497: PUSH
36498: LD_INT 5
36500: PUSH
36501: LD_INT 3
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: LIST
36508: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36509: LD_VAR 0 6
36513: PPUSH
36514: CALL_OW 257
36518: PUSH
36519: LD_INT 2
36521: PUSH
36522: LD_INT 3
36524: PUSH
36525: LD_INT 4
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: LIST
36532: IN
36533: IFFALSE 36554
// points := [ 3 , 2 , 1 ] ;
36535: LD_ADDR_VAR 0 9
36539: PUSH
36540: LD_INT 3
36542: PUSH
36543: LD_INT 2
36545: PUSH
36546: LD_INT 1
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36554: LD_VAR 0 6
36558: PPUSH
36559: CALL_OW 257
36563: PUSH
36564: LD_INT 5
36566: EQUAL
36567: IFFALSE 36588
// points := [ 130 , 5 , 2 ] ;
36569: LD_ADDR_VAR 0 9
36573: PUSH
36574: LD_INT 130
36576: PUSH
36577: LD_INT 5
36579: PUSH
36580: LD_INT 2
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36588: LD_VAR 0 6
36592: PPUSH
36593: CALL_OW 257
36597: PUSH
36598: LD_INT 8
36600: EQUAL
36601: IFFALSE 36622
// points := [ 35 , 35 , 30 ] ;
36603: LD_ADDR_VAR 0 9
36607: PUSH
36608: LD_INT 35
36610: PUSH
36611: LD_INT 35
36613: PUSH
36614: LD_INT 30
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36622: LD_VAR 0 6
36626: PPUSH
36627: CALL_OW 257
36631: PUSH
36632: LD_INT 9
36634: EQUAL
36635: IFFALSE 36656
// points := [ 20 , 55 , 40 ] ;
36637: LD_ADDR_VAR 0 9
36641: PUSH
36642: LD_INT 20
36644: PUSH
36645: LD_INT 55
36647: PUSH
36648: LD_INT 40
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36656: LD_VAR 0 6
36660: PPUSH
36661: CALL_OW 257
36665: PUSH
36666: LD_INT 12
36668: PUSH
36669: LD_INT 16
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: IN
36676: IFFALSE 36697
// points := [ 5 , 3 , 2 ] ;
36678: LD_ADDR_VAR 0 9
36682: PUSH
36683: LD_INT 5
36685: PUSH
36686: LD_INT 3
36688: PUSH
36689: LD_INT 2
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: LIST
36696: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36697: LD_VAR 0 6
36701: PPUSH
36702: CALL_OW 257
36706: PUSH
36707: LD_INT 17
36709: EQUAL
36710: IFFALSE 36731
// points := [ 100 , 50 , 75 ] ;
36712: LD_ADDR_VAR 0 9
36716: PUSH
36717: LD_INT 100
36719: PUSH
36720: LD_INT 50
36722: PUSH
36723: LD_INT 75
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: LIST
36730: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36731: LD_VAR 0 6
36735: PPUSH
36736: CALL_OW 257
36740: PUSH
36741: LD_INT 15
36743: EQUAL
36744: IFFALSE 36765
// points := [ 10 , 5 , 3 ] ;
36746: LD_ADDR_VAR 0 9
36750: PUSH
36751: LD_INT 10
36753: PUSH
36754: LD_INT 5
36756: PUSH
36757: LD_INT 3
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: LIST
36764: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36765: LD_VAR 0 6
36769: PPUSH
36770: CALL_OW 257
36774: PUSH
36775: LD_INT 14
36777: EQUAL
36778: IFFALSE 36799
// points := [ 10 , 0 , 0 ] ;
36780: LD_ADDR_VAR 0 9
36784: PUSH
36785: LD_INT 10
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: LIST
36798: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36799: LD_VAR 0 6
36803: PPUSH
36804: CALL_OW 257
36808: PUSH
36809: LD_INT 11
36811: EQUAL
36812: IFFALSE 36833
// points := [ 30 , 10 , 5 ] ;
36814: LD_ADDR_VAR 0 9
36818: PUSH
36819: LD_INT 30
36821: PUSH
36822: LD_INT 10
36824: PUSH
36825: LD_INT 5
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: LIST
36832: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36833: LD_VAR 0 1
36837: PPUSH
36838: LD_INT 5
36840: PPUSH
36841: CALL_OW 321
36845: PUSH
36846: LD_INT 2
36848: EQUAL
36849: IFFALSE 36866
// bpoints := bpoints * 1.8 ;
36851: LD_ADDR_VAR 0 10
36855: PUSH
36856: LD_VAR 0 10
36860: PUSH
36861: LD_REAL  1.80000000000000E+0000
36864: MUL
36865: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36866: LD_VAR 0 6
36870: PPUSH
36871: CALL_OW 257
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: LD_INT 3
36884: PUSH
36885: LD_INT 4
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: IN
36894: PUSH
36895: LD_VAR 0 1
36899: PPUSH
36900: LD_INT 51
36902: PPUSH
36903: CALL_OW 321
36907: PUSH
36908: LD_INT 2
36910: EQUAL
36911: AND
36912: IFFALSE 36929
// bpoints := bpoints * 1.2 ;
36914: LD_ADDR_VAR 0 10
36918: PUSH
36919: LD_VAR 0 10
36923: PUSH
36924: LD_REAL  1.20000000000000E+0000
36927: MUL
36928: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36929: LD_VAR 0 6
36933: PPUSH
36934: CALL_OW 257
36938: PUSH
36939: LD_INT 5
36941: PUSH
36942: LD_INT 7
36944: PUSH
36945: LD_INT 9
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: LIST
36952: IN
36953: PUSH
36954: LD_VAR 0 1
36958: PPUSH
36959: LD_INT 52
36961: PPUSH
36962: CALL_OW 321
36966: PUSH
36967: LD_INT 2
36969: EQUAL
36970: AND
36971: IFFALSE 36988
// bpoints := bpoints * 1.5 ;
36973: LD_ADDR_VAR 0 10
36977: PUSH
36978: LD_VAR 0 10
36982: PUSH
36983: LD_REAL  1.50000000000000E+0000
36986: MUL
36987: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36988: LD_VAR 0 1
36992: PPUSH
36993: LD_INT 66
36995: PPUSH
36996: CALL_OW 321
37000: PUSH
37001: LD_INT 2
37003: EQUAL
37004: IFFALSE 37021
// bpoints := bpoints * 1.1 ;
37006: LD_ADDR_VAR 0 10
37010: PUSH
37011: LD_VAR 0 10
37015: PUSH
37016: LD_REAL  1.10000000000000E+0000
37019: MUL
37020: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37021: LD_ADDR_VAR 0 10
37025: PUSH
37026: LD_VAR 0 10
37030: PUSH
37031: LD_VAR 0 6
37035: PPUSH
37036: LD_INT 1
37038: PPUSH
37039: CALL_OW 259
37043: PUSH
37044: LD_REAL  1.15000000000000E+0000
37047: MUL
37048: MUL
37049: ST_TO_ADDR
// end ; unit_vehicle :
37050: GO 37878
37052: LD_INT 2
37054: DOUBLE
37055: EQUAL
37056: IFTRUE 37060
37058: GO 37866
37060: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37061: LD_VAR 0 6
37065: PPUSH
37066: CALL_OW 264
37070: PUSH
37071: LD_INT 2
37073: PUSH
37074: LD_INT 42
37076: PUSH
37077: LD_INT 24
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: LIST
37084: IN
37085: IFFALSE 37106
// points := [ 25 , 5 , 3 ] ;
37087: LD_ADDR_VAR 0 9
37091: PUSH
37092: LD_INT 25
37094: PUSH
37095: LD_INT 5
37097: PUSH
37098: LD_INT 3
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: LIST
37105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37106: LD_VAR 0 6
37110: PPUSH
37111: CALL_OW 264
37115: PUSH
37116: LD_INT 4
37118: PUSH
37119: LD_INT 43
37121: PUSH
37122: LD_INT 25
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: LIST
37129: IN
37130: IFFALSE 37151
// points := [ 40 , 15 , 5 ] ;
37132: LD_ADDR_VAR 0 9
37136: PUSH
37137: LD_INT 40
37139: PUSH
37140: LD_INT 15
37142: PUSH
37143: LD_INT 5
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: LIST
37150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37151: LD_VAR 0 6
37155: PPUSH
37156: CALL_OW 264
37160: PUSH
37161: LD_INT 3
37163: PUSH
37164: LD_INT 23
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: IN
37171: IFFALSE 37192
// points := [ 7 , 25 , 8 ] ;
37173: LD_ADDR_VAR 0 9
37177: PUSH
37178: LD_INT 7
37180: PUSH
37181: LD_INT 25
37183: PUSH
37184: LD_INT 8
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: LIST
37191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37192: LD_VAR 0 6
37196: PPUSH
37197: CALL_OW 264
37201: PUSH
37202: LD_INT 5
37204: PUSH
37205: LD_INT 27
37207: PUSH
37208: LD_INT 44
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: LIST
37215: IN
37216: IFFALSE 37237
// points := [ 14 , 50 , 16 ] ;
37218: LD_ADDR_VAR 0 9
37222: PUSH
37223: LD_INT 14
37225: PUSH
37226: LD_INT 50
37228: PUSH
37229: LD_INT 16
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: LIST
37236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37237: LD_VAR 0 6
37241: PPUSH
37242: CALL_OW 264
37246: PUSH
37247: LD_INT 6
37249: PUSH
37250: LD_INT 46
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: IN
37257: IFFALSE 37278
// points := [ 32 , 120 , 70 ] ;
37259: LD_ADDR_VAR 0 9
37263: PUSH
37264: LD_INT 32
37266: PUSH
37267: LD_INT 120
37269: PUSH
37270: LD_INT 70
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: LIST
37277: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37278: LD_VAR 0 6
37282: PPUSH
37283: CALL_OW 264
37287: PUSH
37288: LD_INT 7
37290: PUSH
37291: LD_INT 28
37293: PUSH
37294: LD_INT 45
37296: PUSH
37297: LD_INT 92
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: IN
37306: IFFALSE 37327
// points := [ 35 , 20 , 45 ] ;
37308: LD_ADDR_VAR 0 9
37312: PUSH
37313: LD_INT 35
37315: PUSH
37316: LD_INT 20
37318: PUSH
37319: LD_INT 45
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: LIST
37326: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37327: LD_VAR 0 6
37331: PPUSH
37332: CALL_OW 264
37336: PUSH
37337: LD_INT 47
37339: PUSH
37340: EMPTY
37341: LIST
37342: IN
37343: IFFALSE 37364
// points := [ 67 , 45 , 75 ] ;
37345: LD_ADDR_VAR 0 9
37349: PUSH
37350: LD_INT 67
37352: PUSH
37353: LD_INT 45
37355: PUSH
37356: LD_INT 75
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: LIST
37363: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37364: LD_VAR 0 6
37368: PPUSH
37369: CALL_OW 264
37373: PUSH
37374: LD_INT 26
37376: PUSH
37377: EMPTY
37378: LIST
37379: IN
37380: IFFALSE 37401
// points := [ 120 , 30 , 80 ] ;
37382: LD_ADDR_VAR 0 9
37386: PUSH
37387: LD_INT 120
37389: PUSH
37390: LD_INT 30
37392: PUSH
37393: LD_INT 80
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37401: LD_VAR 0 6
37405: PPUSH
37406: CALL_OW 264
37410: PUSH
37411: LD_INT 22
37413: PUSH
37414: EMPTY
37415: LIST
37416: IN
37417: IFFALSE 37438
// points := [ 40 , 1 , 1 ] ;
37419: LD_ADDR_VAR 0 9
37423: PUSH
37424: LD_INT 40
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: LIST
37437: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37438: LD_VAR 0 6
37442: PPUSH
37443: CALL_OW 264
37447: PUSH
37448: LD_INT 29
37450: PUSH
37451: EMPTY
37452: LIST
37453: IN
37454: IFFALSE 37475
// points := [ 70 , 200 , 400 ] ;
37456: LD_ADDR_VAR 0 9
37460: PUSH
37461: LD_INT 70
37463: PUSH
37464: LD_INT 200
37466: PUSH
37467: LD_INT 400
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: LIST
37474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37475: LD_VAR 0 6
37479: PPUSH
37480: CALL_OW 264
37484: PUSH
37485: LD_INT 14
37487: PUSH
37488: LD_INT 53
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: IN
37495: IFFALSE 37516
// points := [ 40 , 10 , 20 ] ;
37497: LD_ADDR_VAR 0 9
37501: PUSH
37502: LD_INT 40
37504: PUSH
37505: LD_INT 10
37507: PUSH
37508: LD_INT 20
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37516: LD_VAR 0 6
37520: PPUSH
37521: CALL_OW 264
37525: PUSH
37526: LD_INT 9
37528: PUSH
37529: EMPTY
37530: LIST
37531: IN
37532: IFFALSE 37553
// points := [ 5 , 70 , 20 ] ;
37534: LD_ADDR_VAR 0 9
37538: PUSH
37539: LD_INT 5
37541: PUSH
37542: LD_INT 70
37544: PUSH
37545: LD_INT 20
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37553: LD_VAR 0 6
37557: PPUSH
37558: CALL_OW 264
37562: PUSH
37563: LD_INT 10
37565: PUSH
37566: EMPTY
37567: LIST
37568: IN
37569: IFFALSE 37590
// points := [ 35 , 110 , 70 ] ;
37571: LD_ADDR_VAR 0 9
37575: PUSH
37576: LD_INT 35
37578: PUSH
37579: LD_INT 110
37581: PUSH
37582: LD_INT 70
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: LIST
37589: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37590: LD_VAR 0 6
37594: PPUSH
37595: CALL_OW 265
37599: PUSH
37600: LD_INT 25
37602: EQUAL
37603: IFFALSE 37624
// points := [ 80 , 65 , 100 ] ;
37605: LD_ADDR_VAR 0 9
37609: PUSH
37610: LD_INT 80
37612: PUSH
37613: LD_INT 65
37615: PUSH
37616: LD_INT 100
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: LIST
37623: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37624: LD_VAR 0 6
37628: PPUSH
37629: CALL_OW 263
37633: PUSH
37634: LD_INT 1
37636: EQUAL
37637: IFFALSE 37672
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37639: LD_ADDR_VAR 0 10
37643: PUSH
37644: LD_VAR 0 10
37648: PUSH
37649: LD_VAR 0 6
37653: PPUSH
37654: CALL_OW 311
37658: PPUSH
37659: LD_INT 3
37661: PPUSH
37662: CALL_OW 259
37666: PUSH
37667: LD_INT 4
37669: MUL
37670: MUL
37671: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37672: LD_VAR 0 6
37676: PPUSH
37677: CALL_OW 263
37681: PUSH
37682: LD_INT 2
37684: EQUAL
37685: IFFALSE 37736
// begin j := IsControledBy ( i ) ;
37687: LD_ADDR_VAR 0 7
37691: PUSH
37692: LD_VAR 0 6
37696: PPUSH
37697: CALL_OW 312
37701: ST_TO_ADDR
// if j then
37702: LD_VAR 0 7
37706: IFFALSE 37736
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37708: LD_ADDR_VAR 0 10
37712: PUSH
37713: LD_VAR 0 10
37717: PUSH
37718: LD_VAR 0 7
37722: PPUSH
37723: LD_INT 3
37725: PPUSH
37726: CALL_OW 259
37730: PUSH
37731: LD_INT 3
37733: MUL
37734: MUL
37735: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37736: LD_VAR 0 6
37740: PPUSH
37741: CALL_OW 264
37745: PUSH
37746: LD_INT 5
37748: PUSH
37749: LD_INT 6
37751: PUSH
37752: LD_INT 46
37754: PUSH
37755: LD_INT 44
37757: PUSH
37758: LD_INT 47
37760: PUSH
37761: LD_INT 45
37763: PUSH
37764: LD_INT 28
37766: PUSH
37767: LD_INT 7
37769: PUSH
37770: LD_INT 27
37772: PUSH
37773: LD_INT 29
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: IN
37788: PUSH
37789: LD_VAR 0 1
37793: PPUSH
37794: LD_INT 52
37796: PPUSH
37797: CALL_OW 321
37801: PUSH
37802: LD_INT 2
37804: EQUAL
37805: AND
37806: IFFALSE 37823
// bpoints := bpoints * 1.2 ;
37808: LD_ADDR_VAR 0 10
37812: PUSH
37813: LD_VAR 0 10
37817: PUSH
37818: LD_REAL  1.20000000000000E+0000
37821: MUL
37822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37823: LD_VAR 0 6
37827: PPUSH
37828: CALL_OW 264
37832: PUSH
37833: LD_INT 6
37835: PUSH
37836: LD_INT 46
37838: PUSH
37839: LD_INT 47
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: LIST
37846: IN
37847: IFFALSE 37864
// bpoints := bpoints * 1.2 ;
37849: LD_ADDR_VAR 0 10
37853: PUSH
37854: LD_VAR 0 10
37858: PUSH
37859: LD_REAL  1.20000000000000E+0000
37862: MUL
37863: ST_TO_ADDR
// end ; unit_building :
37864: GO 37878
37866: LD_INT 3
37868: DOUBLE
37869: EQUAL
37870: IFTRUE 37874
37872: GO 37877
37874: POP
// ; end ;
37875: GO 37878
37877: POP
// for j = 1 to 3 do
37878: LD_ADDR_VAR 0 7
37882: PUSH
37883: DOUBLE
37884: LD_INT 1
37886: DEC
37887: ST_TO_ADDR
37888: LD_INT 3
37890: PUSH
37891: FOR_TO
37892: IFFALSE 37945
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37894: LD_ADDR_VAR 0 5
37898: PUSH
37899: LD_VAR 0 5
37903: PPUSH
37904: LD_VAR 0 7
37908: PPUSH
37909: LD_VAR 0 5
37913: PUSH
37914: LD_VAR 0 7
37918: ARRAY
37919: PUSH
37920: LD_VAR 0 9
37924: PUSH
37925: LD_VAR 0 7
37929: ARRAY
37930: PUSH
37931: LD_VAR 0 10
37935: MUL
37936: PLUS
37937: PPUSH
37938: CALL_OW 1
37942: ST_TO_ADDR
37943: GO 37891
37945: POP
37946: POP
// end ;
37947: GO 36426
37949: POP
37950: POP
// result := Replace ( result , 4 , tmp ) ;
37951: LD_ADDR_VAR 0 5
37955: PUSH
37956: LD_VAR 0 5
37960: PPUSH
37961: LD_INT 4
37963: PPUSH
37964: LD_VAR 0 8
37968: PPUSH
37969: CALL_OW 1
37973: ST_TO_ADDR
// end ;
37974: LD_VAR 0 5
37978: RET
// export function DangerAtRange ( unit , range ) ; begin
37979: LD_INT 0
37981: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37982: LD_ADDR_VAR 0 3
37986: PUSH
37987: LD_VAR 0 1
37991: PPUSH
37992: CALL_OW 255
37996: PPUSH
37997: LD_VAR 0 1
38001: PPUSH
38002: CALL_OW 250
38006: PPUSH
38007: LD_VAR 0 1
38011: PPUSH
38012: CALL_OW 251
38016: PPUSH
38017: LD_VAR 0 2
38021: PPUSH
38022: CALL 36278 0 4
38026: ST_TO_ADDR
// end ;
38027: LD_VAR 0 3
38031: RET
// export function DangerInArea ( side , area ) ; begin
38032: LD_INT 0
38034: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38035: LD_ADDR_VAR 0 3
38039: PUSH
38040: LD_VAR 0 2
38044: PPUSH
38045: LD_INT 81
38047: PUSH
38048: LD_VAR 0 1
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PPUSH
38057: CALL_OW 70
38061: ST_TO_ADDR
// end ;
38062: LD_VAR 0 3
38066: RET
// export function IsExtension ( b ) ; begin
38067: LD_INT 0
38069: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38070: LD_ADDR_VAR 0 2
38074: PUSH
38075: LD_VAR 0 1
38079: PUSH
38080: LD_INT 23
38082: PUSH
38083: LD_INT 20
38085: PUSH
38086: LD_INT 22
38088: PUSH
38089: LD_INT 17
38091: PUSH
38092: LD_INT 24
38094: PUSH
38095: LD_INT 21
38097: PUSH
38098: LD_INT 19
38100: PUSH
38101: LD_INT 16
38103: PUSH
38104: LD_INT 25
38106: PUSH
38107: LD_INT 18
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: IN
38122: ST_TO_ADDR
// end ;
38123: LD_VAR 0 2
38127: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38128: LD_INT 0
38130: PPUSH
38131: PPUSH
38132: PPUSH
// result := [ ] ;
38133: LD_ADDR_VAR 0 4
38137: PUSH
38138: EMPTY
38139: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38140: LD_ADDR_VAR 0 5
38144: PUSH
38145: LD_VAR 0 2
38149: PPUSH
38150: LD_INT 21
38152: PUSH
38153: LD_INT 3
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PPUSH
38160: CALL_OW 70
38164: ST_TO_ADDR
// if not tmp then
38165: LD_VAR 0 5
38169: NOT
38170: IFFALSE 38174
// exit ;
38172: GO 38238
// if checkLink then
38174: LD_VAR 0 3
38178: IFFALSE 38228
// begin for i in tmp do
38180: LD_ADDR_VAR 0 6
38184: PUSH
38185: LD_VAR 0 5
38189: PUSH
38190: FOR_IN
38191: IFFALSE 38226
// if GetBase ( i ) <> base then
38193: LD_VAR 0 6
38197: PPUSH
38198: CALL_OW 274
38202: PUSH
38203: LD_VAR 0 1
38207: NONEQUAL
38208: IFFALSE 38224
// ComLinkToBase ( base , i ) ;
38210: LD_VAR 0 1
38214: PPUSH
38215: LD_VAR 0 6
38219: PPUSH
38220: CALL_OW 169
38224: GO 38190
38226: POP
38227: POP
// end ; result := tmp ;
38228: LD_ADDR_VAR 0 4
38232: PUSH
38233: LD_VAR 0 5
38237: ST_TO_ADDR
// end ;
38238: LD_VAR 0 4
38242: RET
// export function ComComplete ( units , b ) ; var i ; begin
38243: LD_INT 0
38245: PPUSH
38246: PPUSH
// if not units then
38247: LD_VAR 0 1
38251: NOT
38252: IFFALSE 38256
// exit ;
38254: GO 38346
// for i in units do
38256: LD_ADDR_VAR 0 4
38260: PUSH
38261: LD_VAR 0 1
38265: PUSH
38266: FOR_IN
38267: IFFALSE 38344
// if BuildingStatus ( b ) = bs_build then
38269: LD_VAR 0 2
38273: PPUSH
38274: CALL_OW 461
38278: PUSH
38279: LD_INT 1
38281: EQUAL
38282: IFFALSE 38342
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38284: LD_VAR 0 4
38288: PPUSH
38289: LD_STRING h
38291: PUSH
38292: LD_VAR 0 2
38296: PPUSH
38297: CALL_OW 250
38301: PUSH
38302: LD_VAR 0 2
38306: PPUSH
38307: CALL_OW 251
38311: PUSH
38312: LD_VAR 0 2
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: LD_INT 0
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: PUSH
38335: EMPTY
38336: LIST
38337: PPUSH
38338: CALL_OW 446
38342: GO 38266
38344: POP
38345: POP
// end ;
38346: LD_VAR 0 3
38350: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38351: LD_INT 0
38353: PPUSH
38354: PPUSH
38355: PPUSH
38356: PPUSH
38357: PPUSH
38358: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38359: LD_VAR 0 1
38363: NOT
38364: PUSH
38365: LD_VAR 0 1
38369: PPUSH
38370: CALL_OW 263
38374: PUSH
38375: LD_INT 2
38377: NONEQUAL
38378: OR
38379: IFFALSE 38383
// exit ;
38381: GO 38699
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38383: LD_ADDR_VAR 0 6
38387: PUSH
38388: LD_INT 22
38390: PUSH
38391: LD_VAR 0 1
38395: PPUSH
38396: CALL_OW 255
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: PUSH
38408: LD_INT 30
38410: PUSH
38411: LD_INT 36
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 34
38420: PUSH
38421: LD_INT 31
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: LIST
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PPUSH
38437: CALL_OW 69
38441: ST_TO_ADDR
// if not tmp then
38442: LD_VAR 0 6
38446: NOT
38447: IFFALSE 38451
// exit ;
38449: GO 38699
// result := [ ] ;
38451: LD_ADDR_VAR 0 2
38455: PUSH
38456: EMPTY
38457: ST_TO_ADDR
// for i in tmp do
38458: LD_ADDR_VAR 0 3
38462: PUSH
38463: LD_VAR 0 6
38467: PUSH
38468: FOR_IN
38469: IFFALSE 38540
// begin t := UnitsInside ( i ) ;
38471: LD_ADDR_VAR 0 4
38475: PUSH
38476: LD_VAR 0 3
38480: PPUSH
38481: CALL_OW 313
38485: ST_TO_ADDR
// if t then
38486: LD_VAR 0 4
38490: IFFALSE 38538
// for j in t do
38492: LD_ADDR_VAR 0 7
38496: PUSH
38497: LD_VAR 0 4
38501: PUSH
38502: FOR_IN
38503: IFFALSE 38536
// result := Replace ( result , result + 1 , j ) ;
38505: LD_ADDR_VAR 0 2
38509: PUSH
38510: LD_VAR 0 2
38514: PPUSH
38515: LD_VAR 0 2
38519: PUSH
38520: LD_INT 1
38522: PLUS
38523: PPUSH
38524: LD_VAR 0 7
38528: PPUSH
38529: CALL_OW 1
38533: ST_TO_ADDR
38534: GO 38502
38536: POP
38537: POP
// end ;
38538: GO 38468
38540: POP
38541: POP
// if not result then
38542: LD_VAR 0 2
38546: NOT
38547: IFFALSE 38551
// exit ;
38549: GO 38699
// mech := result [ 1 ] ;
38551: LD_ADDR_VAR 0 5
38555: PUSH
38556: LD_VAR 0 2
38560: PUSH
38561: LD_INT 1
38563: ARRAY
38564: ST_TO_ADDR
// if result > 1 then
38565: LD_VAR 0 2
38569: PUSH
38570: LD_INT 1
38572: GREATER
38573: IFFALSE 38685
// begin for i = 2 to result do
38575: LD_ADDR_VAR 0 3
38579: PUSH
38580: DOUBLE
38581: LD_INT 2
38583: DEC
38584: ST_TO_ADDR
38585: LD_VAR 0 2
38589: PUSH
38590: FOR_TO
38591: IFFALSE 38683
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38593: LD_ADDR_VAR 0 4
38597: PUSH
38598: LD_VAR 0 2
38602: PUSH
38603: LD_VAR 0 3
38607: ARRAY
38608: PPUSH
38609: LD_INT 3
38611: PPUSH
38612: CALL_OW 259
38616: PUSH
38617: LD_VAR 0 2
38621: PUSH
38622: LD_VAR 0 3
38626: ARRAY
38627: PPUSH
38628: CALL_OW 432
38632: MINUS
38633: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38634: LD_VAR 0 4
38638: PUSH
38639: LD_VAR 0 5
38643: PPUSH
38644: LD_INT 3
38646: PPUSH
38647: CALL_OW 259
38651: PUSH
38652: LD_VAR 0 5
38656: PPUSH
38657: CALL_OW 432
38661: MINUS
38662: GREATEREQUAL
38663: IFFALSE 38681
// mech := result [ i ] ;
38665: LD_ADDR_VAR 0 5
38669: PUSH
38670: LD_VAR 0 2
38674: PUSH
38675: LD_VAR 0 3
38679: ARRAY
38680: ST_TO_ADDR
// end ;
38681: GO 38590
38683: POP
38684: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38685: LD_VAR 0 1
38689: PPUSH
38690: LD_VAR 0 5
38694: PPUSH
38695: CALL_OW 135
// end ;
38699: LD_VAR 0 2
38703: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38704: LD_INT 0
38706: PPUSH
38707: PPUSH
38708: PPUSH
38709: PPUSH
38710: PPUSH
38711: PPUSH
38712: PPUSH
38713: PPUSH
38714: PPUSH
38715: PPUSH
38716: PPUSH
38717: PPUSH
38718: PPUSH
// result := [ ] ;
38719: LD_ADDR_VAR 0 7
38723: PUSH
38724: EMPTY
38725: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38726: LD_VAR 0 1
38730: PPUSH
38731: CALL_OW 266
38735: PUSH
38736: LD_INT 0
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: IN
38746: NOT
38747: IFFALSE 38751
// exit ;
38749: GO 40385
// if name then
38751: LD_VAR 0 3
38755: IFFALSE 38771
// SetBName ( base_dep , name ) ;
38757: LD_VAR 0 1
38761: PPUSH
38762: LD_VAR 0 3
38766: PPUSH
38767: CALL_OW 500
// base := GetBase ( base_dep ) ;
38771: LD_ADDR_VAR 0 15
38775: PUSH
38776: LD_VAR 0 1
38780: PPUSH
38781: CALL_OW 274
38785: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38786: LD_ADDR_VAR 0 16
38790: PUSH
38791: LD_VAR 0 1
38795: PPUSH
38796: CALL_OW 255
38800: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38801: LD_ADDR_VAR 0 17
38805: PUSH
38806: LD_VAR 0 1
38810: PPUSH
38811: CALL_OW 248
38815: ST_TO_ADDR
// if sources then
38816: LD_VAR 0 5
38820: IFFALSE 38867
// for i = 1 to 3 do
38822: LD_ADDR_VAR 0 8
38826: PUSH
38827: DOUBLE
38828: LD_INT 1
38830: DEC
38831: ST_TO_ADDR
38832: LD_INT 3
38834: PUSH
38835: FOR_TO
38836: IFFALSE 38865
// AddResourceType ( base , i , sources [ i ] ) ;
38838: LD_VAR 0 15
38842: PPUSH
38843: LD_VAR 0 8
38847: PPUSH
38848: LD_VAR 0 5
38852: PUSH
38853: LD_VAR 0 8
38857: ARRAY
38858: PPUSH
38859: CALL_OW 276
38863: GO 38835
38865: POP
38866: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38867: LD_ADDR_VAR 0 18
38871: PUSH
38872: LD_VAR 0 15
38876: PPUSH
38877: LD_VAR 0 2
38881: PPUSH
38882: LD_INT 1
38884: PPUSH
38885: CALL 38128 0 3
38889: ST_TO_ADDR
// InitHc ;
38890: CALL_OW 19
// InitUc ;
38894: CALL_OW 18
// uc_side := side ;
38898: LD_ADDR_OWVAR 20
38902: PUSH
38903: LD_VAR 0 16
38907: ST_TO_ADDR
// uc_nation := nation ;
38908: LD_ADDR_OWVAR 21
38912: PUSH
38913: LD_VAR 0 17
38917: ST_TO_ADDR
// if buildings then
38918: LD_VAR 0 18
38922: IFFALSE 40244
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38924: LD_ADDR_VAR 0 19
38928: PUSH
38929: LD_VAR 0 18
38933: PPUSH
38934: LD_INT 2
38936: PUSH
38937: LD_INT 30
38939: PUSH
38940: LD_INT 29
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 30
38949: PUSH
38950: LD_INT 30
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: LIST
38961: PPUSH
38962: CALL_OW 72
38966: ST_TO_ADDR
// if tmp then
38967: LD_VAR 0 19
38971: IFFALSE 39019
// for i in tmp do
38973: LD_ADDR_VAR 0 8
38977: PUSH
38978: LD_VAR 0 19
38982: PUSH
38983: FOR_IN
38984: IFFALSE 39017
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38986: LD_VAR 0 8
38990: PPUSH
38991: CALL_OW 250
38995: PPUSH
38996: LD_VAR 0 8
39000: PPUSH
39001: CALL_OW 251
39005: PPUSH
39006: LD_VAR 0 16
39010: PPUSH
39011: CALL_OW 441
39015: GO 38983
39017: POP
39018: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39019: LD_VAR 0 18
39023: PPUSH
39024: LD_INT 2
39026: PUSH
39027: LD_INT 30
39029: PUSH
39030: LD_INT 32
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 30
39039: PUSH
39040: LD_INT 33
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: PPUSH
39052: CALL_OW 72
39056: IFFALSE 39144
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39058: LD_ADDR_VAR 0 8
39062: PUSH
39063: LD_VAR 0 18
39067: PPUSH
39068: LD_INT 2
39070: PUSH
39071: LD_INT 30
39073: PUSH
39074: LD_INT 32
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 30
39083: PUSH
39084: LD_INT 33
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: LIST
39095: PPUSH
39096: CALL_OW 72
39100: PUSH
39101: FOR_IN
39102: IFFALSE 39142
// begin if not GetBWeapon ( i ) then
39104: LD_VAR 0 8
39108: PPUSH
39109: CALL_OW 269
39113: NOT
39114: IFFALSE 39140
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39116: LD_VAR 0 8
39120: PPUSH
39121: LD_VAR 0 8
39125: PPUSH
39126: LD_VAR 0 2
39130: PPUSH
39131: CALL 40390 0 2
39135: PPUSH
39136: CALL_OW 431
// end ;
39140: GO 39101
39142: POP
39143: POP
// end ; for i = 1 to personel do
39144: LD_ADDR_VAR 0 8
39148: PUSH
39149: DOUBLE
39150: LD_INT 1
39152: DEC
39153: ST_TO_ADDR
39154: LD_VAR 0 6
39158: PUSH
39159: FOR_TO
39160: IFFALSE 40224
// begin if i > 4 then
39162: LD_VAR 0 8
39166: PUSH
39167: LD_INT 4
39169: GREATER
39170: IFFALSE 39174
// break ;
39172: GO 40224
// case i of 1 :
39174: LD_VAR 0 8
39178: PUSH
39179: LD_INT 1
39181: DOUBLE
39182: EQUAL
39183: IFTRUE 39187
39185: GO 39267
39187: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39188: LD_ADDR_VAR 0 12
39192: PUSH
39193: LD_VAR 0 18
39197: PPUSH
39198: LD_INT 22
39200: PUSH
39201: LD_VAR 0 16
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 58
39212: PUSH
39213: EMPTY
39214: LIST
39215: PUSH
39216: LD_INT 2
39218: PUSH
39219: LD_INT 30
39221: PUSH
39222: LD_INT 32
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 30
39231: PUSH
39232: LD_INT 4
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 30
39241: PUSH
39242: LD_INT 5
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: PPUSH
39260: CALL_OW 72
39264: ST_TO_ADDR
39265: GO 39489
39267: LD_INT 2
39269: DOUBLE
39270: EQUAL
39271: IFTRUE 39275
39273: GO 39337
39275: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39276: LD_ADDR_VAR 0 12
39280: PUSH
39281: LD_VAR 0 18
39285: PPUSH
39286: LD_INT 22
39288: PUSH
39289: LD_VAR 0 16
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: LD_INT 30
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 30
39313: PUSH
39314: LD_INT 1
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: LIST
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PPUSH
39330: CALL_OW 72
39334: ST_TO_ADDR
39335: GO 39489
39337: LD_INT 3
39339: DOUBLE
39340: EQUAL
39341: IFTRUE 39345
39343: GO 39407
39345: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39346: LD_ADDR_VAR 0 12
39350: PUSH
39351: LD_VAR 0 18
39355: PPUSH
39356: LD_INT 22
39358: PUSH
39359: LD_VAR 0 16
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: PUSH
39371: LD_INT 30
39373: PUSH
39374: LD_INT 2
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 30
39383: PUSH
39384: LD_INT 3
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: LIST
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PPUSH
39400: CALL_OW 72
39404: ST_TO_ADDR
39405: GO 39489
39407: LD_INT 4
39409: DOUBLE
39410: EQUAL
39411: IFTRUE 39415
39413: GO 39488
39415: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39416: LD_ADDR_VAR 0 12
39420: PUSH
39421: LD_VAR 0 18
39425: PPUSH
39426: LD_INT 22
39428: PUSH
39429: LD_VAR 0 16
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: LD_INT 30
39443: PUSH
39444: LD_INT 6
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 30
39453: PUSH
39454: LD_INT 7
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 30
39463: PUSH
39464: LD_INT 8
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PPUSH
39481: CALL_OW 72
39485: ST_TO_ADDR
39486: GO 39489
39488: POP
// if i = 1 then
39489: LD_VAR 0 8
39493: PUSH
39494: LD_INT 1
39496: EQUAL
39497: IFFALSE 39608
// begin tmp := [ ] ;
39499: LD_ADDR_VAR 0 19
39503: PUSH
39504: EMPTY
39505: ST_TO_ADDR
// for j in f do
39506: LD_ADDR_VAR 0 9
39510: PUSH
39511: LD_VAR 0 12
39515: PUSH
39516: FOR_IN
39517: IFFALSE 39590
// if GetBType ( j ) = b_bunker then
39519: LD_VAR 0 9
39523: PPUSH
39524: CALL_OW 266
39528: PUSH
39529: LD_INT 32
39531: EQUAL
39532: IFFALSE 39559
// tmp := Insert ( tmp , 1 , j ) else
39534: LD_ADDR_VAR 0 19
39538: PUSH
39539: LD_VAR 0 19
39543: PPUSH
39544: LD_INT 1
39546: PPUSH
39547: LD_VAR 0 9
39551: PPUSH
39552: CALL_OW 2
39556: ST_TO_ADDR
39557: GO 39588
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39559: LD_ADDR_VAR 0 19
39563: PUSH
39564: LD_VAR 0 19
39568: PPUSH
39569: LD_VAR 0 19
39573: PUSH
39574: LD_INT 1
39576: PLUS
39577: PPUSH
39578: LD_VAR 0 9
39582: PPUSH
39583: CALL_OW 2
39587: ST_TO_ADDR
39588: GO 39516
39590: POP
39591: POP
// if tmp then
39592: LD_VAR 0 19
39596: IFFALSE 39608
// f := tmp ;
39598: LD_ADDR_VAR 0 12
39602: PUSH
39603: LD_VAR 0 19
39607: ST_TO_ADDR
// end ; x := personel [ i ] ;
39608: LD_ADDR_VAR 0 13
39612: PUSH
39613: LD_VAR 0 6
39617: PUSH
39618: LD_VAR 0 8
39622: ARRAY
39623: ST_TO_ADDR
// if x = - 1 then
39624: LD_VAR 0 13
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: EQUAL
39633: IFFALSE 39842
// begin for j in f do
39635: LD_ADDR_VAR 0 9
39639: PUSH
39640: LD_VAR 0 12
39644: PUSH
39645: FOR_IN
39646: IFFALSE 39838
// repeat InitHc ;
39648: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39652: LD_VAR 0 9
39656: PPUSH
39657: CALL_OW 266
39661: PUSH
39662: LD_INT 5
39664: EQUAL
39665: IFFALSE 39735
// begin if UnitsInside ( j ) < 3 then
39667: LD_VAR 0 9
39671: PPUSH
39672: CALL_OW 313
39676: PUSH
39677: LD_INT 3
39679: LESS
39680: IFFALSE 39716
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39682: LD_INT 0
39684: PPUSH
39685: LD_INT 5
39687: PUSH
39688: LD_INT 8
39690: PUSH
39691: LD_INT 9
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: LIST
39698: PUSH
39699: LD_VAR 0 17
39703: ARRAY
39704: PPUSH
39705: LD_VAR 0 4
39709: PPUSH
39710: CALL_OW 380
39714: GO 39733
// PrepareHuman ( false , i , skill ) ;
39716: LD_INT 0
39718: PPUSH
39719: LD_VAR 0 8
39723: PPUSH
39724: LD_VAR 0 4
39728: PPUSH
39729: CALL_OW 380
// end else
39733: GO 39752
// PrepareHuman ( false , i , skill ) ;
39735: LD_INT 0
39737: PPUSH
39738: LD_VAR 0 8
39742: PPUSH
39743: LD_VAR 0 4
39747: PPUSH
39748: CALL_OW 380
// un := CreateHuman ;
39752: LD_ADDR_VAR 0 14
39756: PUSH
39757: CALL_OW 44
39761: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39762: LD_ADDR_VAR 0 7
39766: PUSH
39767: LD_VAR 0 7
39771: PPUSH
39772: LD_INT 1
39774: PPUSH
39775: LD_VAR 0 14
39779: PPUSH
39780: CALL_OW 2
39784: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39785: LD_VAR 0 14
39789: PPUSH
39790: LD_VAR 0 9
39794: PPUSH
39795: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39799: LD_VAR 0 9
39803: PPUSH
39804: CALL_OW 313
39808: PUSH
39809: LD_INT 6
39811: EQUAL
39812: PUSH
39813: LD_VAR 0 9
39817: PPUSH
39818: CALL_OW 266
39822: PUSH
39823: LD_INT 32
39825: PUSH
39826: LD_INT 31
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: IN
39833: OR
39834: IFFALSE 39648
39836: GO 39645
39838: POP
39839: POP
// end else
39840: GO 40222
// for j = 1 to x do
39842: LD_ADDR_VAR 0 9
39846: PUSH
39847: DOUBLE
39848: LD_INT 1
39850: DEC
39851: ST_TO_ADDR
39852: LD_VAR 0 13
39856: PUSH
39857: FOR_TO
39858: IFFALSE 40220
// begin InitHc ;
39860: CALL_OW 19
// if not f then
39864: LD_VAR 0 12
39868: NOT
39869: IFFALSE 39958
// begin PrepareHuman ( false , i , skill ) ;
39871: LD_INT 0
39873: PPUSH
39874: LD_VAR 0 8
39878: PPUSH
39879: LD_VAR 0 4
39883: PPUSH
39884: CALL_OW 380
// un := CreateHuman ;
39888: LD_ADDR_VAR 0 14
39892: PUSH
39893: CALL_OW 44
39897: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39898: LD_ADDR_VAR 0 7
39902: PUSH
39903: LD_VAR 0 7
39907: PPUSH
39908: LD_INT 1
39910: PPUSH
39911: LD_VAR 0 14
39915: PPUSH
39916: CALL_OW 2
39920: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39921: LD_VAR 0 14
39925: PPUSH
39926: LD_VAR 0 1
39930: PPUSH
39931: CALL_OW 250
39935: PPUSH
39936: LD_VAR 0 1
39940: PPUSH
39941: CALL_OW 251
39945: PPUSH
39946: LD_INT 10
39948: PPUSH
39949: LD_INT 0
39951: PPUSH
39952: CALL_OW 50
// continue ;
39956: GO 39857
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39958: LD_VAR 0 12
39962: PUSH
39963: LD_INT 1
39965: ARRAY
39966: PPUSH
39967: CALL_OW 313
39971: PUSH
39972: LD_VAR 0 12
39976: PUSH
39977: LD_INT 1
39979: ARRAY
39980: PPUSH
39981: CALL_OW 266
39985: PUSH
39986: LD_INT 32
39988: PUSH
39989: LD_INT 31
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: IN
39996: AND
39997: PUSH
39998: LD_VAR 0 12
40002: PUSH
40003: LD_INT 1
40005: ARRAY
40006: PPUSH
40007: CALL_OW 313
40011: PUSH
40012: LD_INT 6
40014: EQUAL
40015: OR
40016: IFFALSE 40036
// f := Delete ( f , 1 ) ;
40018: LD_ADDR_VAR 0 12
40022: PUSH
40023: LD_VAR 0 12
40027: PPUSH
40028: LD_INT 1
40030: PPUSH
40031: CALL_OW 3
40035: ST_TO_ADDR
// if not f then
40036: LD_VAR 0 12
40040: NOT
40041: IFFALSE 40059
// begin x := x + 2 ;
40043: LD_ADDR_VAR 0 13
40047: PUSH
40048: LD_VAR 0 13
40052: PUSH
40053: LD_INT 2
40055: PLUS
40056: ST_TO_ADDR
// continue ;
40057: GO 39857
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40059: LD_VAR 0 12
40063: PUSH
40064: LD_INT 1
40066: ARRAY
40067: PPUSH
40068: CALL_OW 266
40072: PUSH
40073: LD_INT 5
40075: EQUAL
40076: IFFALSE 40150
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40078: LD_VAR 0 12
40082: PUSH
40083: LD_INT 1
40085: ARRAY
40086: PPUSH
40087: CALL_OW 313
40091: PUSH
40092: LD_INT 3
40094: LESS
40095: IFFALSE 40131
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40097: LD_INT 0
40099: PPUSH
40100: LD_INT 5
40102: PUSH
40103: LD_INT 8
40105: PUSH
40106: LD_INT 9
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: LIST
40113: PUSH
40114: LD_VAR 0 17
40118: ARRAY
40119: PPUSH
40120: LD_VAR 0 4
40124: PPUSH
40125: CALL_OW 380
40129: GO 40148
// PrepareHuman ( false , i , skill ) ;
40131: LD_INT 0
40133: PPUSH
40134: LD_VAR 0 8
40138: PPUSH
40139: LD_VAR 0 4
40143: PPUSH
40144: CALL_OW 380
// end else
40148: GO 40167
// PrepareHuman ( false , i , skill ) ;
40150: LD_INT 0
40152: PPUSH
40153: LD_VAR 0 8
40157: PPUSH
40158: LD_VAR 0 4
40162: PPUSH
40163: CALL_OW 380
// un := CreateHuman ;
40167: LD_ADDR_VAR 0 14
40171: PUSH
40172: CALL_OW 44
40176: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40177: LD_ADDR_VAR 0 7
40181: PUSH
40182: LD_VAR 0 7
40186: PPUSH
40187: LD_INT 1
40189: PPUSH
40190: LD_VAR 0 14
40194: PPUSH
40195: CALL_OW 2
40199: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40200: LD_VAR 0 14
40204: PPUSH
40205: LD_VAR 0 12
40209: PUSH
40210: LD_INT 1
40212: ARRAY
40213: PPUSH
40214: CALL_OW 52
// end ;
40218: GO 39857
40220: POP
40221: POP
// end ;
40222: GO 39159
40224: POP
40225: POP
// result := result ^ buildings ;
40226: LD_ADDR_VAR 0 7
40230: PUSH
40231: LD_VAR 0 7
40235: PUSH
40236: LD_VAR 0 18
40240: ADD
40241: ST_TO_ADDR
// end else
40242: GO 40385
// begin for i = 1 to personel do
40244: LD_ADDR_VAR 0 8
40248: PUSH
40249: DOUBLE
40250: LD_INT 1
40252: DEC
40253: ST_TO_ADDR
40254: LD_VAR 0 6
40258: PUSH
40259: FOR_TO
40260: IFFALSE 40383
// begin if i > 4 then
40262: LD_VAR 0 8
40266: PUSH
40267: LD_INT 4
40269: GREATER
40270: IFFALSE 40274
// break ;
40272: GO 40383
// x := personel [ i ] ;
40274: LD_ADDR_VAR 0 13
40278: PUSH
40279: LD_VAR 0 6
40283: PUSH
40284: LD_VAR 0 8
40288: ARRAY
40289: ST_TO_ADDR
// if x = - 1 then
40290: LD_VAR 0 13
40294: PUSH
40295: LD_INT 1
40297: NEG
40298: EQUAL
40299: IFFALSE 40303
// continue ;
40301: GO 40259
// PrepareHuman ( false , i , skill ) ;
40303: LD_INT 0
40305: PPUSH
40306: LD_VAR 0 8
40310: PPUSH
40311: LD_VAR 0 4
40315: PPUSH
40316: CALL_OW 380
// un := CreateHuman ;
40320: LD_ADDR_VAR 0 14
40324: PUSH
40325: CALL_OW 44
40329: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40330: LD_VAR 0 14
40334: PPUSH
40335: LD_VAR 0 1
40339: PPUSH
40340: CALL_OW 250
40344: PPUSH
40345: LD_VAR 0 1
40349: PPUSH
40350: CALL_OW 251
40354: PPUSH
40355: LD_INT 10
40357: PPUSH
40358: LD_INT 0
40360: PPUSH
40361: CALL_OW 50
// result := result ^ un ;
40365: LD_ADDR_VAR 0 7
40369: PUSH
40370: LD_VAR 0 7
40374: PUSH
40375: LD_VAR 0 14
40379: ADD
40380: ST_TO_ADDR
// end ;
40381: GO 40259
40383: POP
40384: POP
// end ; end ;
40385: LD_VAR 0 7
40389: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40390: LD_INT 0
40392: PPUSH
40393: PPUSH
40394: PPUSH
40395: PPUSH
40396: PPUSH
40397: PPUSH
40398: PPUSH
40399: PPUSH
40400: PPUSH
40401: PPUSH
40402: PPUSH
40403: PPUSH
40404: PPUSH
40405: PPUSH
40406: PPUSH
40407: PPUSH
// result := false ;
40408: LD_ADDR_VAR 0 3
40412: PUSH
40413: LD_INT 0
40415: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40416: LD_VAR 0 1
40420: NOT
40421: PUSH
40422: LD_VAR 0 1
40426: PPUSH
40427: CALL_OW 266
40431: PUSH
40432: LD_INT 32
40434: PUSH
40435: LD_INT 33
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: IN
40442: NOT
40443: OR
40444: IFFALSE 40448
// exit ;
40446: GO 41557
// nat := GetNation ( tower ) ;
40448: LD_ADDR_VAR 0 12
40452: PUSH
40453: LD_VAR 0 1
40457: PPUSH
40458: CALL_OW 248
40462: ST_TO_ADDR
// side := GetSide ( tower ) ;
40463: LD_ADDR_VAR 0 16
40467: PUSH
40468: LD_VAR 0 1
40472: PPUSH
40473: CALL_OW 255
40477: ST_TO_ADDR
// x := GetX ( tower ) ;
40478: LD_ADDR_VAR 0 10
40482: PUSH
40483: LD_VAR 0 1
40487: PPUSH
40488: CALL_OW 250
40492: ST_TO_ADDR
// y := GetY ( tower ) ;
40493: LD_ADDR_VAR 0 11
40497: PUSH
40498: LD_VAR 0 1
40502: PPUSH
40503: CALL_OW 251
40507: ST_TO_ADDR
// if not x or not y then
40508: LD_VAR 0 10
40512: NOT
40513: PUSH
40514: LD_VAR 0 11
40518: NOT
40519: OR
40520: IFFALSE 40524
// exit ;
40522: GO 41557
// weapon := 0 ;
40524: LD_ADDR_VAR 0 18
40528: PUSH
40529: LD_INT 0
40531: ST_TO_ADDR
// fac_list := [ ] ;
40532: LD_ADDR_VAR 0 17
40536: PUSH
40537: EMPTY
40538: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40539: LD_ADDR_VAR 0 6
40543: PUSH
40544: LD_VAR 0 1
40548: PPUSH
40549: CALL_OW 274
40553: PPUSH
40554: LD_VAR 0 2
40558: PPUSH
40559: LD_INT 0
40561: PPUSH
40562: CALL 38128 0 3
40566: PPUSH
40567: LD_INT 30
40569: PUSH
40570: LD_INT 3
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PPUSH
40577: CALL_OW 72
40581: ST_TO_ADDR
// if not factories then
40582: LD_VAR 0 6
40586: NOT
40587: IFFALSE 40591
// exit ;
40589: GO 41557
// for i in factories do
40591: LD_ADDR_VAR 0 8
40595: PUSH
40596: LD_VAR 0 6
40600: PUSH
40601: FOR_IN
40602: IFFALSE 40627
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40604: LD_ADDR_VAR 0 17
40608: PUSH
40609: LD_VAR 0 17
40613: PUSH
40614: LD_VAR 0 8
40618: PPUSH
40619: CALL_OW 478
40623: UNION
40624: ST_TO_ADDR
40625: GO 40601
40627: POP
40628: POP
// if not fac_list then
40629: LD_VAR 0 17
40633: NOT
40634: IFFALSE 40638
// exit ;
40636: GO 41557
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40638: LD_ADDR_VAR 0 5
40642: PUSH
40643: LD_INT 4
40645: PUSH
40646: LD_INT 5
40648: PUSH
40649: LD_INT 9
40651: PUSH
40652: LD_INT 10
40654: PUSH
40655: LD_INT 6
40657: PUSH
40658: LD_INT 7
40660: PUSH
40661: LD_INT 11
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 27
40675: PUSH
40676: LD_INT 28
40678: PUSH
40679: LD_INT 26
40681: PUSH
40682: LD_INT 30
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 43
40693: PUSH
40694: LD_INT 44
40696: PUSH
40697: LD_INT 46
40699: PUSH
40700: LD_INT 45
40702: PUSH
40703: LD_INT 47
40705: PUSH
40706: LD_INT 49
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: LIST
40721: PUSH
40722: LD_VAR 0 12
40726: ARRAY
40727: ST_TO_ADDR
// list := list isect fac_list ;
40728: LD_ADDR_VAR 0 5
40732: PUSH
40733: LD_VAR 0 5
40737: PUSH
40738: LD_VAR 0 17
40742: ISECT
40743: ST_TO_ADDR
// if not list then
40744: LD_VAR 0 5
40748: NOT
40749: IFFALSE 40753
// exit ;
40751: GO 41557
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40753: LD_VAR 0 12
40757: PUSH
40758: LD_INT 3
40760: EQUAL
40761: PUSH
40762: LD_INT 49
40764: PUSH
40765: LD_VAR 0 5
40769: IN
40770: AND
40771: PUSH
40772: LD_INT 31
40774: PPUSH
40775: LD_VAR 0 16
40779: PPUSH
40780: CALL_OW 321
40784: PUSH
40785: LD_INT 2
40787: EQUAL
40788: AND
40789: IFFALSE 40849
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40791: LD_INT 22
40793: PUSH
40794: LD_VAR 0 16
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 35
40805: PUSH
40806: LD_INT 49
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 91
40815: PUSH
40816: LD_VAR 0 1
40820: PUSH
40821: LD_INT 10
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: LIST
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: LIST
40833: PPUSH
40834: CALL_OW 69
40838: NOT
40839: IFFALSE 40849
// weapon := ru_time_lapser ;
40841: LD_ADDR_VAR 0 18
40845: PUSH
40846: LD_INT 49
40848: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40849: LD_VAR 0 12
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: LD_INT 2
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: IN
40864: PUSH
40865: LD_INT 11
40867: PUSH
40868: LD_VAR 0 5
40872: IN
40873: PUSH
40874: LD_INT 30
40876: PUSH
40877: LD_VAR 0 5
40881: IN
40882: OR
40883: AND
40884: PUSH
40885: LD_INT 6
40887: PPUSH
40888: LD_VAR 0 16
40892: PPUSH
40893: CALL_OW 321
40897: PUSH
40898: LD_INT 2
40900: EQUAL
40901: AND
40902: IFFALSE 41067
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40904: LD_INT 22
40906: PUSH
40907: LD_VAR 0 16
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 2
40918: PUSH
40919: LD_INT 35
40921: PUSH
40922: LD_INT 11
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 35
40931: PUSH
40932: LD_INT 30
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 91
40946: PUSH
40947: LD_VAR 0 1
40951: PUSH
40952: LD_INT 18
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: LIST
40964: PPUSH
40965: CALL_OW 69
40969: NOT
40970: PUSH
40971: LD_INT 22
40973: PUSH
40974: LD_VAR 0 16
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: LD_INT 30
40988: PUSH
40989: LD_INT 32
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 30
40998: PUSH
40999: LD_INT 33
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 91
41013: PUSH
41014: LD_VAR 0 1
41018: PUSH
41019: LD_INT 12
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: LIST
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: LIST
41031: PUSH
41032: EMPTY
41033: LIST
41034: PPUSH
41035: CALL_OW 69
41039: PUSH
41040: LD_INT 2
41042: GREATER
41043: AND
41044: IFFALSE 41067
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41046: LD_ADDR_VAR 0 18
41050: PUSH
41051: LD_INT 11
41053: PUSH
41054: LD_INT 30
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_VAR 0 12
41065: ARRAY
41066: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41067: LD_VAR 0 18
41071: NOT
41072: PUSH
41073: LD_INT 40
41075: PPUSH
41076: LD_VAR 0 16
41080: PPUSH
41081: CALL_OW 321
41085: PUSH
41086: LD_INT 2
41088: EQUAL
41089: AND
41090: PUSH
41091: LD_INT 7
41093: PUSH
41094: LD_VAR 0 5
41098: IN
41099: PUSH
41100: LD_INT 28
41102: PUSH
41103: LD_VAR 0 5
41107: IN
41108: OR
41109: PUSH
41110: LD_INT 45
41112: PUSH
41113: LD_VAR 0 5
41117: IN
41118: OR
41119: AND
41120: IFFALSE 41374
// begin hex := GetHexInfo ( x , y ) ;
41122: LD_ADDR_VAR 0 4
41126: PUSH
41127: LD_VAR 0 10
41131: PPUSH
41132: LD_VAR 0 11
41136: PPUSH
41137: CALL_OW 546
41141: ST_TO_ADDR
// if hex [ 1 ] then
41142: LD_VAR 0 4
41146: PUSH
41147: LD_INT 1
41149: ARRAY
41150: IFFALSE 41154
// exit ;
41152: GO 41557
// height := hex [ 2 ] ;
41154: LD_ADDR_VAR 0 15
41158: PUSH
41159: LD_VAR 0 4
41163: PUSH
41164: LD_INT 2
41166: ARRAY
41167: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41168: LD_ADDR_VAR 0 14
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: LD_INT 3
41181: PUSH
41182: LD_INT 5
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: ST_TO_ADDR
// for i in tmp do
41191: LD_ADDR_VAR 0 8
41195: PUSH
41196: LD_VAR 0 14
41200: PUSH
41201: FOR_IN
41202: IFFALSE 41372
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41204: LD_ADDR_VAR 0 9
41208: PUSH
41209: LD_VAR 0 10
41213: PPUSH
41214: LD_VAR 0 8
41218: PPUSH
41219: LD_INT 5
41221: PPUSH
41222: CALL_OW 272
41226: PUSH
41227: LD_VAR 0 11
41231: PPUSH
41232: LD_VAR 0 8
41236: PPUSH
41237: LD_INT 5
41239: PPUSH
41240: CALL_OW 273
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41249: LD_VAR 0 9
41253: PUSH
41254: LD_INT 1
41256: ARRAY
41257: PPUSH
41258: LD_VAR 0 9
41262: PUSH
41263: LD_INT 2
41265: ARRAY
41266: PPUSH
41267: CALL_OW 488
41271: IFFALSE 41370
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41273: LD_ADDR_VAR 0 4
41277: PUSH
41278: LD_VAR 0 9
41282: PUSH
41283: LD_INT 1
41285: ARRAY
41286: PPUSH
41287: LD_VAR 0 9
41291: PUSH
41292: LD_INT 2
41294: ARRAY
41295: PPUSH
41296: CALL_OW 546
41300: ST_TO_ADDR
// if hex [ 1 ] then
41301: LD_VAR 0 4
41305: PUSH
41306: LD_INT 1
41308: ARRAY
41309: IFFALSE 41313
// continue ;
41311: GO 41201
// h := hex [ 2 ] ;
41313: LD_ADDR_VAR 0 13
41317: PUSH
41318: LD_VAR 0 4
41322: PUSH
41323: LD_INT 2
41325: ARRAY
41326: ST_TO_ADDR
// if h + 7 < height then
41327: LD_VAR 0 13
41331: PUSH
41332: LD_INT 7
41334: PLUS
41335: PUSH
41336: LD_VAR 0 15
41340: LESS
41341: IFFALSE 41370
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41343: LD_ADDR_VAR 0 18
41347: PUSH
41348: LD_INT 7
41350: PUSH
41351: LD_INT 28
41353: PUSH
41354: LD_INT 45
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: LIST
41361: PUSH
41362: LD_VAR 0 12
41366: ARRAY
41367: ST_TO_ADDR
// break ;
41368: GO 41372
// end ; end ; end ;
41370: GO 41201
41372: POP
41373: POP
// end ; if not weapon then
41374: LD_VAR 0 18
41378: NOT
41379: IFFALSE 41439
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41381: LD_ADDR_VAR 0 5
41385: PUSH
41386: LD_VAR 0 5
41390: PUSH
41391: LD_INT 11
41393: PUSH
41394: LD_INT 30
41396: PUSH
41397: LD_INT 49
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: LIST
41404: DIFF
41405: ST_TO_ADDR
// if not list then
41406: LD_VAR 0 5
41410: NOT
41411: IFFALSE 41415
// exit ;
41413: GO 41557
// weapon := list [ rand ( 1 , list ) ] ;
41415: LD_ADDR_VAR 0 18
41419: PUSH
41420: LD_VAR 0 5
41424: PUSH
41425: LD_INT 1
41427: PPUSH
41428: LD_VAR 0 5
41432: PPUSH
41433: CALL_OW 12
41437: ARRAY
41438: ST_TO_ADDR
// end ; if weapon then
41439: LD_VAR 0 18
41443: IFFALSE 41557
// begin tmp := CostOfWeapon ( weapon ) ;
41445: LD_ADDR_VAR 0 14
41449: PUSH
41450: LD_VAR 0 18
41454: PPUSH
41455: CALL_OW 451
41459: ST_TO_ADDR
// j := GetBase ( tower ) ;
41460: LD_ADDR_VAR 0 9
41464: PUSH
41465: LD_VAR 0 1
41469: PPUSH
41470: CALL_OW 274
41474: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41475: LD_VAR 0 9
41479: PPUSH
41480: LD_INT 1
41482: PPUSH
41483: CALL_OW 275
41487: PUSH
41488: LD_VAR 0 14
41492: PUSH
41493: LD_INT 1
41495: ARRAY
41496: GREATEREQUAL
41497: PUSH
41498: LD_VAR 0 9
41502: PPUSH
41503: LD_INT 2
41505: PPUSH
41506: CALL_OW 275
41510: PUSH
41511: LD_VAR 0 14
41515: PUSH
41516: LD_INT 2
41518: ARRAY
41519: GREATEREQUAL
41520: AND
41521: PUSH
41522: LD_VAR 0 9
41526: PPUSH
41527: LD_INT 3
41529: PPUSH
41530: CALL_OW 275
41534: PUSH
41535: LD_VAR 0 14
41539: PUSH
41540: LD_INT 3
41542: ARRAY
41543: GREATEREQUAL
41544: AND
41545: IFFALSE 41557
// result := weapon ;
41547: LD_ADDR_VAR 0 3
41551: PUSH
41552: LD_VAR 0 18
41556: ST_TO_ADDR
// end ; end ;
41557: LD_VAR 0 3
41561: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41562: LD_INT 0
41564: PPUSH
41565: PPUSH
// result := true ;
41566: LD_ADDR_VAR 0 3
41570: PUSH
41571: LD_INT 1
41573: ST_TO_ADDR
// if array1 = array2 then
41574: LD_VAR 0 1
41578: PUSH
41579: LD_VAR 0 2
41583: EQUAL
41584: IFFALSE 41644
// begin for i = 1 to array1 do
41586: LD_ADDR_VAR 0 4
41590: PUSH
41591: DOUBLE
41592: LD_INT 1
41594: DEC
41595: ST_TO_ADDR
41596: LD_VAR 0 1
41600: PUSH
41601: FOR_TO
41602: IFFALSE 41640
// if array1 [ i ] <> array2 [ i ] then
41604: LD_VAR 0 1
41608: PUSH
41609: LD_VAR 0 4
41613: ARRAY
41614: PUSH
41615: LD_VAR 0 2
41619: PUSH
41620: LD_VAR 0 4
41624: ARRAY
41625: NONEQUAL
41626: IFFALSE 41638
// begin result := false ;
41628: LD_ADDR_VAR 0 3
41632: PUSH
41633: LD_INT 0
41635: ST_TO_ADDR
// break ;
41636: GO 41640
// end ;
41638: GO 41601
41640: POP
41641: POP
// end else
41642: GO 41652
// result := false ;
41644: LD_ADDR_VAR 0 3
41648: PUSH
41649: LD_INT 0
41651: ST_TO_ADDR
// end ;
41652: LD_VAR 0 3
41656: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41657: LD_INT 0
41659: PPUSH
41660: PPUSH
// if not array1 or not array2 then
41661: LD_VAR 0 1
41665: NOT
41666: PUSH
41667: LD_VAR 0 2
41671: NOT
41672: OR
41673: IFFALSE 41677
// exit ;
41675: GO 41741
// result := true ;
41677: LD_ADDR_VAR 0 3
41681: PUSH
41682: LD_INT 1
41684: ST_TO_ADDR
// for i = 1 to array1 do
41685: LD_ADDR_VAR 0 4
41689: PUSH
41690: DOUBLE
41691: LD_INT 1
41693: DEC
41694: ST_TO_ADDR
41695: LD_VAR 0 1
41699: PUSH
41700: FOR_TO
41701: IFFALSE 41739
// if array1 [ i ] <> array2 [ i ] then
41703: LD_VAR 0 1
41707: PUSH
41708: LD_VAR 0 4
41712: ARRAY
41713: PUSH
41714: LD_VAR 0 2
41718: PUSH
41719: LD_VAR 0 4
41723: ARRAY
41724: NONEQUAL
41725: IFFALSE 41737
// begin result := false ;
41727: LD_ADDR_VAR 0 3
41731: PUSH
41732: LD_INT 0
41734: ST_TO_ADDR
// break ;
41735: GO 41739
// end ;
41737: GO 41700
41739: POP
41740: POP
// end ;
41741: LD_VAR 0 3
41745: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41746: LD_INT 0
41748: PPUSH
41749: PPUSH
41750: PPUSH
// pom := GetBase ( fac ) ;
41751: LD_ADDR_VAR 0 5
41755: PUSH
41756: LD_VAR 0 1
41760: PPUSH
41761: CALL_OW 274
41765: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41766: LD_ADDR_VAR 0 4
41770: PUSH
41771: LD_VAR 0 2
41775: PUSH
41776: LD_INT 1
41778: ARRAY
41779: PPUSH
41780: LD_VAR 0 2
41784: PUSH
41785: LD_INT 2
41787: ARRAY
41788: PPUSH
41789: LD_VAR 0 2
41793: PUSH
41794: LD_INT 3
41796: ARRAY
41797: PPUSH
41798: LD_VAR 0 2
41802: PUSH
41803: LD_INT 4
41805: ARRAY
41806: PPUSH
41807: CALL_OW 449
41811: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41812: LD_ADDR_VAR 0 3
41816: PUSH
41817: LD_VAR 0 5
41821: PPUSH
41822: LD_INT 1
41824: PPUSH
41825: CALL_OW 275
41829: PUSH
41830: LD_VAR 0 4
41834: PUSH
41835: LD_INT 1
41837: ARRAY
41838: GREATEREQUAL
41839: PUSH
41840: LD_VAR 0 5
41844: PPUSH
41845: LD_INT 2
41847: PPUSH
41848: CALL_OW 275
41852: PUSH
41853: LD_VAR 0 4
41857: PUSH
41858: LD_INT 2
41860: ARRAY
41861: GREATEREQUAL
41862: AND
41863: PUSH
41864: LD_VAR 0 5
41868: PPUSH
41869: LD_INT 3
41871: PPUSH
41872: CALL_OW 275
41876: PUSH
41877: LD_VAR 0 4
41881: PUSH
41882: LD_INT 3
41884: ARRAY
41885: GREATEREQUAL
41886: AND
41887: ST_TO_ADDR
// end ;
41888: LD_VAR 0 3
41892: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41893: LD_INT 0
41895: PPUSH
41896: PPUSH
41897: PPUSH
41898: PPUSH
// pom := GetBase ( building ) ;
41899: LD_ADDR_VAR 0 3
41903: PUSH
41904: LD_VAR 0 1
41908: PPUSH
41909: CALL_OW 274
41913: ST_TO_ADDR
// if not pom then
41914: LD_VAR 0 3
41918: NOT
41919: IFFALSE 41923
// exit ;
41921: GO 42093
// btype := GetBType ( building ) ;
41923: LD_ADDR_VAR 0 5
41927: PUSH
41928: LD_VAR 0 1
41932: PPUSH
41933: CALL_OW 266
41937: ST_TO_ADDR
// if btype = b_armoury then
41938: LD_VAR 0 5
41942: PUSH
41943: LD_INT 4
41945: EQUAL
41946: IFFALSE 41956
// btype := b_barracks ;
41948: LD_ADDR_VAR 0 5
41952: PUSH
41953: LD_INT 5
41955: ST_TO_ADDR
// if btype = b_depot then
41956: LD_VAR 0 5
41960: PUSH
41961: LD_INT 0
41963: EQUAL
41964: IFFALSE 41974
// btype := b_warehouse ;
41966: LD_ADDR_VAR 0 5
41970: PUSH
41971: LD_INT 1
41973: ST_TO_ADDR
// if btype = b_workshop then
41974: LD_VAR 0 5
41978: PUSH
41979: LD_INT 2
41981: EQUAL
41982: IFFALSE 41992
// btype := b_factory ;
41984: LD_ADDR_VAR 0 5
41988: PUSH
41989: LD_INT 3
41991: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41992: LD_ADDR_VAR 0 4
41996: PUSH
41997: LD_VAR 0 5
42001: PPUSH
42002: LD_VAR 0 1
42006: PPUSH
42007: CALL_OW 248
42011: PPUSH
42012: CALL_OW 450
42016: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42017: LD_ADDR_VAR 0 2
42021: PUSH
42022: LD_VAR 0 3
42026: PPUSH
42027: LD_INT 1
42029: PPUSH
42030: CALL_OW 275
42034: PUSH
42035: LD_VAR 0 4
42039: PUSH
42040: LD_INT 1
42042: ARRAY
42043: GREATEREQUAL
42044: PUSH
42045: LD_VAR 0 3
42049: PPUSH
42050: LD_INT 2
42052: PPUSH
42053: CALL_OW 275
42057: PUSH
42058: LD_VAR 0 4
42062: PUSH
42063: LD_INT 2
42065: ARRAY
42066: GREATEREQUAL
42067: AND
42068: PUSH
42069: LD_VAR 0 3
42073: PPUSH
42074: LD_INT 3
42076: PPUSH
42077: CALL_OW 275
42081: PUSH
42082: LD_VAR 0 4
42086: PUSH
42087: LD_INT 3
42089: ARRAY
42090: GREATEREQUAL
42091: AND
42092: ST_TO_ADDR
// end ;
42093: LD_VAR 0 2
42097: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42098: LD_INT 0
42100: PPUSH
42101: PPUSH
42102: PPUSH
// pom := GetBase ( building ) ;
42103: LD_ADDR_VAR 0 4
42107: PUSH
42108: LD_VAR 0 1
42112: PPUSH
42113: CALL_OW 274
42117: ST_TO_ADDR
// if not pom then
42118: LD_VAR 0 4
42122: NOT
42123: IFFALSE 42127
// exit ;
42125: GO 42228
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42127: LD_ADDR_VAR 0 5
42131: PUSH
42132: LD_VAR 0 2
42136: PPUSH
42137: LD_VAR 0 1
42141: PPUSH
42142: CALL_OW 248
42146: PPUSH
42147: CALL_OW 450
42151: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42152: LD_ADDR_VAR 0 3
42156: PUSH
42157: LD_VAR 0 4
42161: PPUSH
42162: LD_INT 1
42164: PPUSH
42165: CALL_OW 275
42169: PUSH
42170: LD_VAR 0 5
42174: PUSH
42175: LD_INT 1
42177: ARRAY
42178: GREATEREQUAL
42179: PUSH
42180: LD_VAR 0 4
42184: PPUSH
42185: LD_INT 2
42187: PPUSH
42188: CALL_OW 275
42192: PUSH
42193: LD_VAR 0 5
42197: PUSH
42198: LD_INT 2
42200: ARRAY
42201: GREATEREQUAL
42202: AND
42203: PUSH
42204: LD_VAR 0 4
42208: PPUSH
42209: LD_INT 3
42211: PPUSH
42212: CALL_OW 275
42216: PUSH
42217: LD_VAR 0 5
42221: PUSH
42222: LD_INT 3
42224: ARRAY
42225: GREATEREQUAL
42226: AND
42227: ST_TO_ADDR
// end ;
42228: LD_VAR 0 3
42232: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42233: LD_INT 0
42235: PPUSH
42236: PPUSH
42237: PPUSH
42238: PPUSH
42239: PPUSH
42240: PPUSH
42241: PPUSH
42242: PPUSH
42243: PPUSH
42244: PPUSH
42245: PPUSH
// result := false ;
42246: LD_ADDR_VAR 0 8
42250: PUSH
42251: LD_INT 0
42253: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42254: LD_VAR 0 5
42258: NOT
42259: PUSH
42260: LD_VAR 0 1
42264: NOT
42265: OR
42266: PUSH
42267: LD_VAR 0 2
42271: NOT
42272: OR
42273: PUSH
42274: LD_VAR 0 3
42278: NOT
42279: OR
42280: IFFALSE 42284
// exit ;
42282: GO 43098
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42284: LD_ADDR_VAR 0 14
42288: PUSH
42289: LD_VAR 0 1
42293: PPUSH
42294: LD_VAR 0 2
42298: PPUSH
42299: LD_VAR 0 3
42303: PPUSH
42304: LD_VAR 0 4
42308: PPUSH
42309: LD_VAR 0 5
42313: PUSH
42314: LD_INT 1
42316: ARRAY
42317: PPUSH
42318: CALL_OW 248
42322: PPUSH
42323: LD_INT 0
42325: PPUSH
42326: CALL 44331 0 6
42330: ST_TO_ADDR
// if not hexes then
42331: LD_VAR 0 14
42335: NOT
42336: IFFALSE 42340
// exit ;
42338: GO 43098
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42340: LD_ADDR_VAR 0 17
42344: PUSH
42345: LD_VAR 0 5
42349: PPUSH
42350: LD_INT 22
42352: PUSH
42353: LD_VAR 0 13
42357: PPUSH
42358: CALL_OW 255
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: LD_INT 30
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 30
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: LIST
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PPUSH
42399: CALL_OW 72
42403: ST_TO_ADDR
// for i = 1 to hexes do
42404: LD_ADDR_VAR 0 9
42408: PUSH
42409: DOUBLE
42410: LD_INT 1
42412: DEC
42413: ST_TO_ADDR
42414: LD_VAR 0 14
42418: PUSH
42419: FOR_TO
42420: IFFALSE 43096
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42422: LD_ADDR_VAR 0 13
42426: PUSH
42427: LD_VAR 0 14
42431: PUSH
42432: LD_VAR 0 9
42436: ARRAY
42437: PUSH
42438: LD_INT 1
42440: ARRAY
42441: PPUSH
42442: LD_VAR 0 14
42446: PUSH
42447: LD_VAR 0 9
42451: ARRAY
42452: PUSH
42453: LD_INT 2
42455: ARRAY
42456: PPUSH
42457: CALL_OW 428
42461: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42462: LD_VAR 0 14
42466: PUSH
42467: LD_VAR 0 9
42471: ARRAY
42472: PUSH
42473: LD_INT 1
42475: ARRAY
42476: PPUSH
42477: LD_VAR 0 14
42481: PUSH
42482: LD_VAR 0 9
42486: ARRAY
42487: PUSH
42488: LD_INT 2
42490: ARRAY
42491: PPUSH
42492: CALL_OW 351
42496: PUSH
42497: LD_VAR 0 14
42501: PUSH
42502: LD_VAR 0 9
42506: ARRAY
42507: PUSH
42508: LD_INT 1
42510: ARRAY
42511: PPUSH
42512: LD_VAR 0 14
42516: PUSH
42517: LD_VAR 0 9
42521: ARRAY
42522: PUSH
42523: LD_INT 2
42525: ARRAY
42526: PPUSH
42527: CALL_OW 488
42531: NOT
42532: OR
42533: PUSH
42534: LD_VAR 0 13
42538: PPUSH
42539: CALL_OW 247
42543: PUSH
42544: LD_INT 3
42546: EQUAL
42547: OR
42548: IFFALSE 42554
// exit ;
42550: POP
42551: POP
42552: GO 43098
// if not tmp then
42554: LD_VAR 0 13
42558: NOT
42559: IFFALSE 42563
// continue ;
42561: GO 42419
// result := true ;
42563: LD_ADDR_VAR 0 8
42567: PUSH
42568: LD_INT 1
42570: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42571: LD_VAR 0 6
42575: PUSH
42576: LD_VAR 0 13
42580: PPUSH
42581: CALL_OW 247
42585: PUSH
42586: LD_INT 2
42588: EQUAL
42589: AND
42590: PUSH
42591: LD_VAR 0 13
42595: PPUSH
42596: CALL_OW 263
42600: PUSH
42601: LD_INT 1
42603: EQUAL
42604: AND
42605: IFFALSE 42769
// begin if IsDrivenBy ( tmp ) then
42607: LD_VAR 0 13
42611: PPUSH
42612: CALL_OW 311
42616: IFFALSE 42620
// continue ;
42618: GO 42419
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42620: LD_VAR 0 6
42624: PPUSH
42625: LD_INT 3
42627: PUSH
42628: LD_INT 60
42630: PUSH
42631: EMPTY
42632: LIST
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 3
42640: PUSH
42641: LD_INT 55
42643: PUSH
42644: EMPTY
42645: LIST
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PPUSH
42655: CALL_OW 72
42659: IFFALSE 42767
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42661: LD_ADDR_VAR 0 18
42665: PUSH
42666: LD_VAR 0 6
42670: PPUSH
42671: LD_INT 3
42673: PUSH
42674: LD_INT 60
42676: PUSH
42677: EMPTY
42678: LIST
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 3
42686: PUSH
42687: LD_INT 55
42689: PUSH
42690: EMPTY
42691: LIST
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PPUSH
42701: CALL_OW 72
42705: PUSH
42706: LD_INT 1
42708: ARRAY
42709: ST_TO_ADDR
// if IsInUnit ( driver ) then
42710: LD_VAR 0 18
42714: PPUSH
42715: CALL_OW 310
42719: IFFALSE 42730
// ComExit ( driver ) ;
42721: LD_VAR 0 18
42725: PPUSH
42726: CALL 68092 0 1
// AddComEnterUnit ( driver , tmp ) ;
42730: LD_VAR 0 18
42734: PPUSH
42735: LD_VAR 0 13
42739: PPUSH
42740: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42744: LD_VAR 0 18
42748: PPUSH
42749: LD_VAR 0 7
42753: PPUSH
42754: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42758: LD_VAR 0 18
42762: PPUSH
42763: CALL_OW 181
// end ; continue ;
42767: GO 42419
// end ; if not cleaners or not tmp in cleaners then
42769: LD_VAR 0 6
42773: NOT
42774: PUSH
42775: LD_VAR 0 13
42779: PUSH
42780: LD_VAR 0 6
42784: IN
42785: NOT
42786: OR
42787: IFFALSE 43094
// begin if dep then
42789: LD_VAR 0 17
42793: IFFALSE 42929
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42795: LD_ADDR_VAR 0 16
42799: PUSH
42800: LD_VAR 0 17
42804: PUSH
42805: LD_INT 1
42807: ARRAY
42808: PPUSH
42809: CALL_OW 250
42813: PPUSH
42814: LD_VAR 0 17
42818: PUSH
42819: LD_INT 1
42821: ARRAY
42822: PPUSH
42823: CALL_OW 254
42827: PPUSH
42828: LD_INT 5
42830: PPUSH
42831: CALL_OW 272
42835: PUSH
42836: LD_VAR 0 17
42840: PUSH
42841: LD_INT 1
42843: ARRAY
42844: PPUSH
42845: CALL_OW 251
42849: PPUSH
42850: LD_VAR 0 17
42854: PUSH
42855: LD_INT 1
42857: ARRAY
42858: PPUSH
42859: CALL_OW 254
42863: PPUSH
42864: LD_INT 5
42866: PPUSH
42867: CALL_OW 273
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42876: LD_VAR 0 16
42880: PUSH
42881: LD_INT 1
42883: ARRAY
42884: PPUSH
42885: LD_VAR 0 16
42889: PUSH
42890: LD_INT 2
42892: ARRAY
42893: PPUSH
42894: CALL_OW 488
42898: IFFALSE 42929
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42900: LD_VAR 0 13
42904: PPUSH
42905: LD_VAR 0 16
42909: PUSH
42910: LD_INT 1
42912: ARRAY
42913: PPUSH
42914: LD_VAR 0 16
42918: PUSH
42919: LD_INT 2
42921: ARRAY
42922: PPUSH
42923: CALL_OW 111
// continue ;
42927: GO 42419
// end ; end ; r := GetDir ( tmp ) ;
42929: LD_ADDR_VAR 0 15
42933: PUSH
42934: LD_VAR 0 13
42938: PPUSH
42939: CALL_OW 254
42943: ST_TO_ADDR
// if r = 5 then
42944: LD_VAR 0 15
42948: PUSH
42949: LD_INT 5
42951: EQUAL
42952: IFFALSE 42962
// r := 0 ;
42954: LD_ADDR_VAR 0 15
42958: PUSH
42959: LD_INT 0
42961: ST_TO_ADDR
// for j = r to 5 do
42962: LD_ADDR_VAR 0 10
42966: PUSH
42967: DOUBLE
42968: LD_VAR 0 15
42972: DEC
42973: ST_TO_ADDR
42974: LD_INT 5
42976: PUSH
42977: FOR_TO
42978: IFFALSE 43092
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42980: LD_ADDR_VAR 0 11
42984: PUSH
42985: LD_VAR 0 13
42989: PPUSH
42990: CALL_OW 250
42994: PPUSH
42995: LD_VAR 0 10
42999: PPUSH
43000: LD_INT 2
43002: PPUSH
43003: CALL_OW 272
43007: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43008: LD_ADDR_VAR 0 12
43012: PUSH
43013: LD_VAR 0 13
43017: PPUSH
43018: CALL_OW 251
43022: PPUSH
43023: LD_VAR 0 10
43027: PPUSH
43028: LD_INT 2
43030: PPUSH
43031: CALL_OW 273
43035: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43036: LD_VAR 0 11
43040: PPUSH
43041: LD_VAR 0 12
43045: PPUSH
43046: CALL_OW 488
43050: PUSH
43051: LD_VAR 0 11
43055: PPUSH
43056: LD_VAR 0 12
43060: PPUSH
43061: CALL_OW 428
43065: NOT
43066: AND
43067: IFFALSE 43090
// begin ComMoveXY ( tmp , _x , _y ) ;
43069: LD_VAR 0 13
43073: PPUSH
43074: LD_VAR 0 11
43078: PPUSH
43079: LD_VAR 0 12
43083: PPUSH
43084: CALL_OW 111
// break ;
43088: GO 43092
// end ; end ;
43090: GO 42977
43092: POP
43093: POP
// end ; end ;
43094: GO 42419
43096: POP
43097: POP
// end ;
43098: LD_VAR 0 8
43102: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43103: LD_INT 0
43105: PPUSH
// result := true ;
43106: LD_ADDR_VAR 0 3
43110: PUSH
43111: LD_INT 1
43113: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43114: LD_VAR 0 2
43118: PUSH
43119: LD_INT 24
43121: DOUBLE
43122: EQUAL
43123: IFTRUE 43133
43125: LD_INT 33
43127: DOUBLE
43128: EQUAL
43129: IFTRUE 43133
43131: GO 43158
43133: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43134: LD_ADDR_VAR 0 3
43138: PUSH
43139: LD_INT 32
43141: PPUSH
43142: LD_VAR 0 1
43146: PPUSH
43147: CALL_OW 321
43151: PUSH
43152: LD_INT 2
43154: EQUAL
43155: ST_TO_ADDR
43156: GO 43474
43158: LD_INT 20
43160: DOUBLE
43161: EQUAL
43162: IFTRUE 43166
43164: GO 43191
43166: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43167: LD_ADDR_VAR 0 3
43171: PUSH
43172: LD_INT 6
43174: PPUSH
43175: LD_VAR 0 1
43179: PPUSH
43180: CALL_OW 321
43184: PUSH
43185: LD_INT 2
43187: EQUAL
43188: ST_TO_ADDR
43189: GO 43474
43191: LD_INT 22
43193: DOUBLE
43194: EQUAL
43195: IFTRUE 43205
43197: LD_INT 36
43199: DOUBLE
43200: EQUAL
43201: IFTRUE 43205
43203: GO 43230
43205: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43206: LD_ADDR_VAR 0 3
43210: PUSH
43211: LD_INT 15
43213: PPUSH
43214: LD_VAR 0 1
43218: PPUSH
43219: CALL_OW 321
43223: PUSH
43224: LD_INT 2
43226: EQUAL
43227: ST_TO_ADDR
43228: GO 43474
43230: LD_INT 30
43232: DOUBLE
43233: EQUAL
43234: IFTRUE 43238
43236: GO 43263
43238: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43239: LD_ADDR_VAR 0 3
43243: PUSH
43244: LD_INT 20
43246: PPUSH
43247: LD_VAR 0 1
43251: PPUSH
43252: CALL_OW 321
43256: PUSH
43257: LD_INT 2
43259: EQUAL
43260: ST_TO_ADDR
43261: GO 43474
43263: LD_INT 28
43265: DOUBLE
43266: EQUAL
43267: IFTRUE 43277
43269: LD_INT 21
43271: DOUBLE
43272: EQUAL
43273: IFTRUE 43277
43275: GO 43302
43277: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43278: LD_ADDR_VAR 0 3
43282: PUSH
43283: LD_INT 21
43285: PPUSH
43286: LD_VAR 0 1
43290: PPUSH
43291: CALL_OW 321
43295: PUSH
43296: LD_INT 2
43298: EQUAL
43299: ST_TO_ADDR
43300: GO 43474
43302: LD_INT 16
43304: DOUBLE
43305: EQUAL
43306: IFTRUE 43310
43308: GO 43335
43310: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43311: LD_ADDR_VAR 0 3
43315: PUSH
43316: LD_INT 84
43318: PPUSH
43319: LD_VAR 0 1
43323: PPUSH
43324: CALL_OW 321
43328: PUSH
43329: LD_INT 2
43331: EQUAL
43332: ST_TO_ADDR
43333: GO 43474
43335: LD_INT 19
43337: DOUBLE
43338: EQUAL
43339: IFTRUE 43349
43341: LD_INT 23
43343: DOUBLE
43344: EQUAL
43345: IFTRUE 43349
43347: GO 43374
43349: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43350: LD_ADDR_VAR 0 3
43354: PUSH
43355: LD_INT 83
43357: PPUSH
43358: LD_VAR 0 1
43362: PPUSH
43363: CALL_OW 321
43367: PUSH
43368: LD_INT 2
43370: EQUAL
43371: ST_TO_ADDR
43372: GO 43474
43374: LD_INT 17
43376: DOUBLE
43377: EQUAL
43378: IFTRUE 43382
43380: GO 43407
43382: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43383: LD_ADDR_VAR 0 3
43387: PUSH
43388: LD_INT 39
43390: PPUSH
43391: LD_VAR 0 1
43395: PPUSH
43396: CALL_OW 321
43400: PUSH
43401: LD_INT 2
43403: EQUAL
43404: ST_TO_ADDR
43405: GO 43474
43407: LD_INT 18
43409: DOUBLE
43410: EQUAL
43411: IFTRUE 43415
43413: GO 43440
43415: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43416: LD_ADDR_VAR 0 3
43420: PUSH
43421: LD_INT 40
43423: PPUSH
43424: LD_VAR 0 1
43428: PPUSH
43429: CALL_OW 321
43433: PUSH
43434: LD_INT 2
43436: EQUAL
43437: ST_TO_ADDR
43438: GO 43474
43440: LD_INT 27
43442: DOUBLE
43443: EQUAL
43444: IFTRUE 43448
43446: GO 43473
43448: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43449: LD_ADDR_VAR 0 3
43453: PUSH
43454: LD_INT 35
43456: PPUSH
43457: LD_VAR 0 1
43461: PPUSH
43462: CALL_OW 321
43466: PUSH
43467: LD_INT 2
43469: EQUAL
43470: ST_TO_ADDR
43471: GO 43474
43473: POP
// end ;
43474: LD_VAR 0 3
43478: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43479: LD_INT 0
43481: PPUSH
43482: PPUSH
43483: PPUSH
43484: PPUSH
43485: PPUSH
43486: PPUSH
43487: PPUSH
43488: PPUSH
43489: PPUSH
43490: PPUSH
43491: PPUSH
// result := false ;
43492: LD_ADDR_VAR 0 6
43496: PUSH
43497: LD_INT 0
43499: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43500: LD_VAR 0 1
43504: NOT
43505: PUSH
43506: LD_VAR 0 1
43510: PPUSH
43511: CALL_OW 266
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: IN
43526: NOT
43527: OR
43528: PUSH
43529: LD_VAR 0 2
43533: NOT
43534: OR
43535: PUSH
43536: LD_VAR 0 5
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: LD_INT 3
43552: PUSH
43553: LD_INT 4
43555: PUSH
43556: LD_INT 5
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: IN
43567: NOT
43568: OR
43569: PUSH
43570: LD_VAR 0 3
43574: PPUSH
43575: LD_VAR 0 4
43579: PPUSH
43580: CALL_OW 488
43584: NOT
43585: OR
43586: IFFALSE 43590
// exit ;
43588: GO 44326
// side := GetSide ( depot ) ;
43590: LD_ADDR_VAR 0 9
43594: PUSH
43595: LD_VAR 0 1
43599: PPUSH
43600: CALL_OW 255
43604: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43605: LD_VAR 0 9
43609: PPUSH
43610: LD_VAR 0 2
43614: PPUSH
43615: CALL 43103 0 2
43619: NOT
43620: IFFALSE 43624
// exit ;
43622: GO 44326
// pom := GetBase ( depot ) ;
43624: LD_ADDR_VAR 0 10
43628: PUSH
43629: LD_VAR 0 1
43633: PPUSH
43634: CALL_OW 274
43638: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43639: LD_ADDR_VAR 0 11
43643: PUSH
43644: LD_VAR 0 2
43648: PPUSH
43649: LD_VAR 0 1
43653: PPUSH
43654: CALL_OW 248
43658: PPUSH
43659: CALL_OW 450
43663: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43664: LD_VAR 0 10
43668: PPUSH
43669: LD_INT 1
43671: PPUSH
43672: CALL_OW 275
43676: PUSH
43677: LD_VAR 0 11
43681: PUSH
43682: LD_INT 1
43684: ARRAY
43685: GREATEREQUAL
43686: PUSH
43687: LD_VAR 0 10
43691: PPUSH
43692: LD_INT 2
43694: PPUSH
43695: CALL_OW 275
43699: PUSH
43700: LD_VAR 0 11
43704: PUSH
43705: LD_INT 2
43707: ARRAY
43708: GREATEREQUAL
43709: AND
43710: PUSH
43711: LD_VAR 0 10
43715: PPUSH
43716: LD_INT 3
43718: PPUSH
43719: CALL_OW 275
43723: PUSH
43724: LD_VAR 0 11
43728: PUSH
43729: LD_INT 3
43731: ARRAY
43732: GREATEREQUAL
43733: AND
43734: NOT
43735: IFFALSE 43739
// exit ;
43737: GO 44326
// if GetBType ( depot ) = b_depot then
43739: LD_VAR 0 1
43743: PPUSH
43744: CALL_OW 266
43748: PUSH
43749: LD_INT 0
43751: EQUAL
43752: IFFALSE 43764
// dist := 28 else
43754: LD_ADDR_VAR 0 14
43758: PUSH
43759: LD_INT 28
43761: ST_TO_ADDR
43762: GO 43772
// dist := 36 ;
43764: LD_ADDR_VAR 0 14
43768: PUSH
43769: LD_INT 36
43771: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43772: LD_VAR 0 1
43776: PPUSH
43777: LD_VAR 0 3
43781: PPUSH
43782: LD_VAR 0 4
43786: PPUSH
43787: CALL_OW 297
43791: PUSH
43792: LD_VAR 0 14
43796: GREATER
43797: IFFALSE 43801
// exit ;
43799: GO 44326
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43801: LD_ADDR_VAR 0 12
43805: PUSH
43806: LD_VAR 0 2
43810: PPUSH
43811: LD_VAR 0 3
43815: PPUSH
43816: LD_VAR 0 4
43820: PPUSH
43821: LD_VAR 0 5
43825: PPUSH
43826: LD_VAR 0 1
43830: PPUSH
43831: CALL_OW 248
43835: PPUSH
43836: LD_INT 0
43838: PPUSH
43839: CALL 44331 0 6
43843: ST_TO_ADDR
// if not hexes then
43844: LD_VAR 0 12
43848: NOT
43849: IFFALSE 43853
// exit ;
43851: GO 44326
// hex := GetHexInfo ( x , y ) ;
43853: LD_ADDR_VAR 0 15
43857: PUSH
43858: LD_VAR 0 3
43862: PPUSH
43863: LD_VAR 0 4
43867: PPUSH
43868: CALL_OW 546
43872: ST_TO_ADDR
// if hex [ 1 ] then
43873: LD_VAR 0 15
43877: PUSH
43878: LD_INT 1
43880: ARRAY
43881: IFFALSE 43885
// exit ;
43883: GO 44326
// height := hex [ 2 ] ;
43885: LD_ADDR_VAR 0 13
43889: PUSH
43890: LD_VAR 0 15
43894: PUSH
43895: LD_INT 2
43897: ARRAY
43898: ST_TO_ADDR
// for i = 1 to hexes do
43899: LD_ADDR_VAR 0 7
43903: PUSH
43904: DOUBLE
43905: LD_INT 1
43907: DEC
43908: ST_TO_ADDR
43909: LD_VAR 0 12
43913: PUSH
43914: FOR_TO
43915: IFFALSE 44245
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43917: LD_VAR 0 12
43921: PUSH
43922: LD_VAR 0 7
43926: ARRAY
43927: PUSH
43928: LD_INT 1
43930: ARRAY
43931: PPUSH
43932: LD_VAR 0 12
43936: PUSH
43937: LD_VAR 0 7
43941: ARRAY
43942: PUSH
43943: LD_INT 2
43945: ARRAY
43946: PPUSH
43947: CALL_OW 488
43951: NOT
43952: PUSH
43953: LD_VAR 0 12
43957: PUSH
43958: LD_VAR 0 7
43962: ARRAY
43963: PUSH
43964: LD_INT 1
43966: ARRAY
43967: PPUSH
43968: LD_VAR 0 12
43972: PUSH
43973: LD_VAR 0 7
43977: ARRAY
43978: PUSH
43979: LD_INT 2
43981: ARRAY
43982: PPUSH
43983: CALL_OW 428
43987: PUSH
43988: LD_INT 0
43990: GREATER
43991: OR
43992: PUSH
43993: LD_VAR 0 12
43997: PUSH
43998: LD_VAR 0 7
44002: ARRAY
44003: PUSH
44004: LD_INT 1
44006: ARRAY
44007: PPUSH
44008: LD_VAR 0 12
44012: PUSH
44013: LD_VAR 0 7
44017: ARRAY
44018: PUSH
44019: LD_INT 2
44021: ARRAY
44022: PPUSH
44023: CALL_OW 351
44027: OR
44028: IFFALSE 44034
// exit ;
44030: POP
44031: POP
44032: GO 44326
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44034: LD_ADDR_VAR 0 8
44038: PUSH
44039: LD_VAR 0 12
44043: PUSH
44044: LD_VAR 0 7
44048: ARRAY
44049: PUSH
44050: LD_INT 1
44052: ARRAY
44053: PPUSH
44054: LD_VAR 0 12
44058: PUSH
44059: LD_VAR 0 7
44063: ARRAY
44064: PUSH
44065: LD_INT 2
44067: ARRAY
44068: PPUSH
44069: CALL_OW 546
44073: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44074: LD_VAR 0 8
44078: PUSH
44079: LD_INT 1
44081: ARRAY
44082: PUSH
44083: LD_VAR 0 8
44087: PUSH
44088: LD_INT 2
44090: ARRAY
44091: PUSH
44092: LD_VAR 0 13
44096: PUSH
44097: LD_INT 2
44099: PLUS
44100: GREATER
44101: OR
44102: PUSH
44103: LD_VAR 0 8
44107: PUSH
44108: LD_INT 2
44110: ARRAY
44111: PUSH
44112: LD_VAR 0 13
44116: PUSH
44117: LD_INT 2
44119: MINUS
44120: LESS
44121: OR
44122: PUSH
44123: LD_VAR 0 8
44127: PUSH
44128: LD_INT 3
44130: ARRAY
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 8
44137: PUSH
44138: LD_INT 9
44140: PUSH
44141: LD_INT 10
44143: PUSH
44144: LD_INT 11
44146: PUSH
44147: LD_INT 12
44149: PUSH
44150: LD_INT 13
44152: PUSH
44153: LD_INT 16
44155: PUSH
44156: LD_INT 17
44158: PUSH
44159: LD_INT 18
44161: PUSH
44162: LD_INT 19
44164: PUSH
44165: LD_INT 20
44167: PUSH
44168: LD_INT 21
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: IN
44186: NOT
44187: OR
44188: PUSH
44189: LD_VAR 0 8
44193: PUSH
44194: LD_INT 5
44196: ARRAY
44197: NOT
44198: OR
44199: PUSH
44200: LD_VAR 0 8
44204: PUSH
44205: LD_INT 6
44207: ARRAY
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: LD_INT 7
44217: PUSH
44218: LD_INT 9
44220: PUSH
44221: LD_INT 10
44223: PUSH
44224: LD_INT 11
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: IN
44235: NOT
44236: OR
44237: IFFALSE 44243
// exit ;
44239: POP
44240: POP
44241: GO 44326
// end ;
44243: GO 43914
44245: POP
44246: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44247: LD_VAR 0 9
44251: PPUSH
44252: LD_VAR 0 3
44256: PPUSH
44257: LD_VAR 0 4
44261: PPUSH
44262: LD_INT 20
44264: PPUSH
44265: CALL 36278 0 4
44269: PUSH
44270: LD_INT 4
44272: ARRAY
44273: IFFALSE 44277
// exit ;
44275: GO 44326
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44277: LD_VAR 0 2
44281: PUSH
44282: LD_INT 29
44284: PUSH
44285: LD_INT 30
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: IN
44292: PUSH
44293: LD_VAR 0 3
44297: PPUSH
44298: LD_VAR 0 4
44302: PPUSH
44303: LD_VAR 0 9
44307: PPUSH
44308: CALL_OW 440
44312: NOT
44313: AND
44314: IFFALSE 44318
// exit ;
44316: GO 44326
// result := true ;
44318: LD_ADDR_VAR 0 6
44322: PUSH
44323: LD_INT 1
44325: ST_TO_ADDR
// end ;
44326: LD_VAR 0 6
44330: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44331: LD_INT 0
44333: PPUSH
44334: PPUSH
44335: PPUSH
44336: PPUSH
44337: PPUSH
44338: PPUSH
44339: PPUSH
44340: PPUSH
44341: PPUSH
44342: PPUSH
44343: PPUSH
44344: PPUSH
44345: PPUSH
44346: PPUSH
44347: PPUSH
44348: PPUSH
44349: PPUSH
44350: PPUSH
44351: PPUSH
44352: PPUSH
44353: PPUSH
44354: PPUSH
44355: PPUSH
44356: PPUSH
44357: PPUSH
44358: PPUSH
44359: PPUSH
44360: PPUSH
44361: PPUSH
44362: PPUSH
44363: PPUSH
44364: PPUSH
44365: PPUSH
44366: PPUSH
44367: PPUSH
44368: PPUSH
44369: PPUSH
44370: PPUSH
44371: PPUSH
44372: PPUSH
44373: PPUSH
44374: PPUSH
44375: PPUSH
44376: PPUSH
44377: PPUSH
44378: PPUSH
44379: PPUSH
44380: PPUSH
44381: PPUSH
44382: PPUSH
44383: PPUSH
44384: PPUSH
44385: PPUSH
44386: PPUSH
44387: PPUSH
44388: PPUSH
44389: PPUSH
44390: PPUSH
// result = [ ] ;
44391: LD_ADDR_VAR 0 7
44395: PUSH
44396: EMPTY
44397: ST_TO_ADDR
// temp_list = [ ] ;
44398: LD_ADDR_VAR 0 9
44402: PUSH
44403: EMPTY
44404: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44405: LD_VAR 0 4
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: LD_INT 3
44421: PUSH
44422: LD_INT 4
44424: PUSH
44425: LD_INT 5
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: IN
44436: NOT
44437: PUSH
44438: LD_VAR 0 1
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: IN
44453: PUSH
44454: LD_VAR 0 5
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: LD_INT 3
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: LIST
44472: IN
44473: NOT
44474: AND
44475: OR
44476: IFFALSE 44480
// exit ;
44478: GO 62871
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44480: LD_VAR 0 1
44484: PUSH
44485: LD_INT 6
44487: PUSH
44488: LD_INT 7
44490: PUSH
44491: LD_INT 8
44493: PUSH
44494: LD_INT 13
44496: PUSH
44497: LD_INT 12
44499: PUSH
44500: LD_INT 15
44502: PUSH
44503: LD_INT 11
44505: PUSH
44506: LD_INT 14
44508: PUSH
44509: LD_INT 10
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: IN
44523: IFFALSE 44533
// btype = b_lab ;
44525: LD_ADDR_VAR 0 1
44529: PUSH
44530: LD_INT 6
44532: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44533: LD_VAR 0 6
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: LIST
44551: IN
44552: NOT
44553: PUSH
44554: LD_VAR 0 1
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: LD_INT 3
44570: PUSH
44571: LD_INT 6
44573: PUSH
44574: LD_INT 36
44576: PUSH
44577: LD_INT 4
44579: PUSH
44580: LD_INT 5
44582: PUSH
44583: LD_INT 31
44585: PUSH
44586: LD_INT 32
44588: PUSH
44589: LD_INT 33
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: IN
44605: NOT
44606: PUSH
44607: LD_VAR 0 6
44611: PUSH
44612: LD_INT 1
44614: EQUAL
44615: AND
44616: OR
44617: PUSH
44618: LD_VAR 0 1
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: LD_INT 3
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: IN
44633: NOT
44634: PUSH
44635: LD_VAR 0 6
44639: PUSH
44640: LD_INT 2
44642: EQUAL
44643: AND
44644: OR
44645: IFFALSE 44655
// mode = 0 ;
44647: LD_ADDR_VAR 0 6
44651: PUSH
44652: LD_INT 0
44654: ST_TO_ADDR
// case mode of 0 :
44655: LD_VAR 0 6
44659: PUSH
44660: LD_INT 0
44662: DOUBLE
44663: EQUAL
44664: IFTRUE 44668
44666: GO 56121
44668: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44669: LD_ADDR_VAR 0 11
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: LD_INT 2
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: LD_INT 2
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: LD_INT 3
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: LD_INT 3
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: NEG
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44862: LD_ADDR_VAR 0 12
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 2
44985: NEG
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 2
45008: NEG
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 3
45019: NEG
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 3
45030: NEG
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45058: LD_ADDR_VAR 0 13
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: LD_INT 2
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 2
45181: NEG
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: LD_INT 2
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: LD_INT 3
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 3
45217: NEG
45218: PUSH
45219: LD_INT 2
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 3
45229: NEG
45230: PUSH
45231: LD_INT 3
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45257: LD_ADDR_VAR 0 14
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: LD_INT 2
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: LD_INT 2
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 2
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: LD_INT 3
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: LD_INT 3
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45453: LD_ADDR_VAR 0 15
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 2
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 2
45576: NEG
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 3
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 3
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45646: LD_ADDR_VAR 0 16
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: LD_INT 2
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 2
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 2
45769: NEG
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: LD_INT 2
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 3
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 3
45803: PUSH
45804: LD_INT 3
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: LD_INT 3
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45839: LD_ADDR_VAR 0 17
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: LD_INT 2
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: LD_INT 2
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: LD_INT 2
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 2
46026: NEG
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46069: LD_ADDR_VAR 0 18
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 2
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 2
46245: NEG
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 2
46256: NEG
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46299: LD_ADDR_VAR 0 19
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: LD_INT 2
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 2
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 2
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: NEG
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 2
46498: NEG
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46529: LD_ADDR_VAR 0 20
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 2
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 2
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: LD_INT 2
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 2
46716: NEG
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46759: LD_ADDR_VAR 0 21
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: LD_INT 2
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: LD_INT 2
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: LD_INT 2
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46989: LD_ADDR_VAR 0 22
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 2
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: NEG
47189: PUSH
47190: LD_INT 2
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47219: LD_ADDR_VAR 0 23
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: LD_INT 2
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 2
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: LD_INT 2
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: LD_INT 2
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: LD_INT 2
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: LD_INT 3
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 3
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 2
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47499: LD_ADDR_VAR 0 24
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 2
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: LD_INT 2
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 3
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 3
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47775: LD_ADDR_VAR 0 25
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: LD_INT 2
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: LD_INT 2
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 2
47951: NEG
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 2
47962: NEG
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: LD_INT 2
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 3
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 3
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: LD_INT 3
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: LD_INT 3
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48049: LD_ADDR_VAR 0 26
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: NEG
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: LD_INT 3
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: LD_INT 3
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48325: LD_ADDR_VAR 0 27
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: LD_INT 2
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: LD_INT 2
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: LD_INT 2
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 2
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 3
48558: NEG
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 3
48570: NEG
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48605: LD_ADDR_VAR 0 28
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: NEG
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: NEG
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: LD_INT 3
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: LD_INT 3
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 3
48840: NEG
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 3
48852: NEG
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48887: LD_ADDR_VAR 0 29
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: LD_INT 2
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 2
49053: NEG
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: LD_INT 2
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: LD_INT 3
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 3
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 3
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 3
49131: NEG
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49166: LD_ADDR_VAR 0 30
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 2
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: LD_INT 3
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 3
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: LD_INT 3
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 3
49409: NEG
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49444: LD_ADDR_VAR 0 31
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 2
49609: NEG
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 2
49621: NEG
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: LD_INT 3
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 3
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: LD_INT 3
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 3
49687: NEG
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49722: LD_ADDR_VAR 0 32
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 2
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 2
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: LD_INT 2
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: LD_INT 2
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: LD_INT 3
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: LD_INT 2
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 3
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: LD_INT 3
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 3
49965: NEG
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50000: LD_ADDR_VAR 0 33
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: LD_INT 2
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: LD_INT 3
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 3
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: LD_INT 3
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 3
50244: NEG
50245: PUSH
50246: LD_INT 2
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50279: LD_ADDR_VAR 0 34
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 2
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 2
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: NEG
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: LD_INT 2
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: LD_INT 3
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: LD_INT 2
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 3
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: LD_INT 3
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 3
50524: NEG
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50559: LD_ADDR_VAR 0 35
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: NEG
50651: PUSH
50652: LD_INT 1
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50671: LD_ADDR_VAR 0 36
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 2
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50783: LD_ADDR_VAR 0 37
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50895: LD_ADDR_VAR 0 38
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51007: LD_ADDR_VAR 0 39
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51119: LD_ADDR_VAR 0 40
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51231: LD_ADDR_VAR 0 41
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 2
51386: NEG
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 2
51409: NEG
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: LD_INT 3
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 3
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 3
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 3
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 3
51474: PUSH
51475: LD_INT 3
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: LD_INT 3
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 2
51494: NEG
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 3
51505: NEG
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 3
51516: NEG
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 3
51528: NEG
51529: PUSH
51530: LD_INT 2
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 3
51540: NEG
51541: PUSH
51542: LD_INT 3
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51581: LD_ADDR_VAR 0 42
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 1
51662: NEG
51663: PUSH
51664: LD_INT 2
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: LD_INT 2
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: LD_INT 2
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: NEG
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: NEG
51760: PUSH
51761: LD_INT 2
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: NEG
51772: PUSH
51773: LD_INT 3
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 3
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 3
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: LD_INT 2
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 3
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 3
51827: PUSH
51828: LD_INT 3
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: PUSH
51838: LD_INT 3
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: LD_INT 3
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 3
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 2
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 3
51878: NEG
51879: PUSH
51880: LD_INT 2
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 3
51890: NEG
51891: PUSH
51892: LD_INT 3
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51931: LD_ADDR_VAR 0 43
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: LD_INT 2
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 2
52097: NEG
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: LD_INT 3
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: LD_INT 3
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 3
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 3
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 3
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 3
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 3
52227: NEG
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 3
52238: NEG
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52279: LD_ADDR_VAR 0 44
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: NEG
52349: PUSH
52350: LD_INT 1
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: LD_INT 2
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 2
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: LD_INT 2
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: NEG
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 2
52469: NEG
52470: PUSH
52471: LD_INT 3
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 3
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 3
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 3
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 3
52522: PUSH
52523: LD_INT 3
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 2
52532: PUSH
52533: LD_INT 3
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 3
52553: NEG
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 3
52564: NEG
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 3
52576: NEG
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 3
52588: NEG
52589: PUSH
52590: LD_INT 3
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52629: LD_ADDR_VAR 0 45
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: LD_INT 2
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 3
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: LD_INT 3
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 3
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 3
52865: PUSH
52866: LD_INT 2
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: LD_INT 3
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: LD_INT 3
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: LD_INT 3
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 0
52905: PUSH
52906: LD_INT 3
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 3
52926: NEG
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 3
52938: NEG
52939: PUSH
52940: LD_INT 3
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52979: LD_ADDR_VAR 0 46
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: NEG
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: LD_INT 2
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: NEG
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 2
53156: NEG
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: LD_INT 3
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 3
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 2
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 3
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: LD_INT 3
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: LD_INT 3
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: NEG
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 3
53275: NEG
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 3
53286: NEG
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53327: LD_ADDR_VAR 0 47
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: LD_INT 2
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53478: LD_ADDR_VAR 0 48
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: LD_INT 2
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 2
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53625: LD_ADDR_VAR 0 49
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53769: LD_ADDR_VAR 0 50
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 2
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 2
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: LD_INT 2
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53913: LD_ADDR_VAR 0 51
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54060: LD_ADDR_VAR 0 52
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: NEG
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: LD_INT 2
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54211: LD_ADDR_VAR 0 53
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 2
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 2
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: LD_INT 2
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: LD_INT 2
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54441: LD_ADDR_VAR 0 54
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 2
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: LD_INT 2
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: LD_INT 2
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: LD_INT 2
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 2
54617: NEG
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 2
54628: NEG
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 2
54640: NEG
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54671: LD_ADDR_VAR 0 55
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 2
54847: NEG
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: NEG
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: LD_INT 2
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54901: LD_ADDR_VAR 0 56
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 2
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 2
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55131: LD_ADDR_VAR 0 57
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: LD_INT 2
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 2
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 2
55330: NEG
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55361: LD_ADDR_VAR 0 58
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 2
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 2
55537: NEG
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: NEG
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 2
55560: NEG
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55591: LD_ADDR_VAR 0 59
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55679: LD_ADDR_VAR 0 60
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55767: LD_ADDR_VAR 0 61
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55855: LD_ADDR_VAR 0 62
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55943: LD_ADDR_VAR 0 63
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56031: LD_ADDR_VAR 0 64
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: ST_TO_ADDR
// end ; 1 :
56119: GO 62016
56121: LD_INT 1
56123: DOUBLE
56124: EQUAL
56125: IFTRUE 56129
56127: GO 58752
56129: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56130: LD_ADDR_VAR 0 11
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 3
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: LIST
56173: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56174: LD_ADDR_VAR 0 12
56178: PUSH
56179: LD_INT 2
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 3
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 3
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: LIST
56214: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56215: LD_ADDR_VAR 0 13
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 3
56232: PUSH
56233: LD_INT 3
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 2
56242: PUSH
56243: LD_INT 3
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: LIST
56254: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56255: LD_ADDR_VAR 0 14
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: LD_INT 3
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 3
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: LD_INT 2
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: LIST
56295: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56296: LD_ADDR_VAR 0 15
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 3
56314: NEG
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 3
56325: NEG
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: LIST
56339: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56340: LD_ADDR_VAR 0 16
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: LD_INT 3
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 3
56359: NEG
56360: PUSH
56361: LD_INT 2
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 3
56371: NEG
56372: PUSH
56373: LD_INT 3
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: LIST
56385: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56386: LD_ADDR_VAR 0 17
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: LD_INT 3
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 3
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: LD_INT 2
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: LIST
56429: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56430: LD_ADDR_VAR 0 18
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 3
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 3
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: LIST
56470: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56471: LD_ADDR_VAR 0 19
56475: PUSH
56476: LD_INT 3
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 3
56488: PUSH
56489: LD_INT 3
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: LIST
56510: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56511: LD_ADDR_VAR 0 20
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: LD_INT 3
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: LD_INT 3
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: LIST
56551: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56552: LD_ADDR_VAR 0 21
56556: PUSH
56557: LD_INT 2
56559: NEG
56560: PUSH
56561: LD_INT 1
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 3
56570: NEG
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 3
56581: NEG
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: LIST
56595: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56596: LD_ADDR_VAR 0 22
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: LD_INT 3
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 3
56615: NEG
56616: PUSH
56617: LD_INT 2
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 3
56627: NEG
56628: PUSH
56629: LD_INT 3
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: LIST
56641: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56642: LD_ADDR_VAR 0 23
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 3
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: LD_INT 4
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: LD_INT 3
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: LIST
56685: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56686: LD_ADDR_VAR 0 24
56690: PUSH
56691: LD_INT 3
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 3
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 4
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: LIST
56726: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56727: LD_ADDR_VAR 0 25
56731: PUSH
56732: LD_INT 3
56734: PUSH
56735: LD_INT 3
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 4
56744: PUSH
56745: LD_INT 3
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: LD_INT 4
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: LIST
56766: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56767: LD_ADDR_VAR 0 26
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 3
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: LD_INT 4
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 3
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: LIST
56807: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56808: LD_ADDR_VAR 0 27
56812: PUSH
56813: LD_INT 3
56815: NEG
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 3
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 4
56837: NEG
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: LIST
56851: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56852: LD_ADDR_VAR 0 28
56856: PUSH
56857: LD_INT 3
56859: NEG
56860: PUSH
56861: LD_INT 3
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 3
56871: NEG
56872: PUSH
56873: LD_INT 4
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 4
56883: NEG
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56898: LD_ADDR_VAR 0 29
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: LD_INT 3
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: LD_INT 3
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: LD_INT 2
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: LD_INT 4
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: LD_INT 4
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: LD_INT 5
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: LD_INT 5
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: LD_INT 4
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: LD_INT 6
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 6
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: LD_INT 5
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57053: LD_ADDR_VAR 0 30
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: LD_INT 1
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 3
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 3
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 4
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 4
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 4
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 5
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 5
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 5
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 6
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 6
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57196: LD_ADDR_VAR 0 31
57200: PUSH
57201: LD_INT 3
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 3
57213: PUSH
57214: LD_INT 3
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: LD_INT 3
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: LD_INT 3
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 4
57243: PUSH
57244: LD_INT 4
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 3
57253: PUSH
57254: LD_INT 4
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 5
57263: PUSH
57264: LD_INT 4
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 5
57273: PUSH
57274: LD_INT 5
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 4
57283: PUSH
57284: LD_INT 5
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 6
57293: PUSH
57294: LD_INT 5
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 6
57303: PUSH
57304: LD_INT 6
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 5
57313: PUSH
57314: LD_INT 6
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57335: LD_ADDR_VAR 0 32
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: LD_INT 3
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 3
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: LD_INT 2
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 4
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 4
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: LD_INT 3
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: LD_INT 5
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: LD_INT 5
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: LD_INT 4
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: LD_INT 6
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: LD_INT 6
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: LD_INT 5
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57478: LD_ADDR_VAR 0 33
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 3
57496: NEG
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 4
57530: NEG
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 4
57541: NEG
57542: PUSH
57543: LD_INT 1
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 4
57553: NEG
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 5
57564: NEG
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 5
57575: NEG
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 5
57587: NEG
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 6
57598: NEG
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 6
57609: NEG
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57633: LD_ADDR_VAR 0 34
57637: PUSH
57638: LD_INT 2
57640: NEG
57641: PUSH
57642: LD_INT 3
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 3
57652: NEG
57653: PUSH
57654: LD_INT 2
57656: NEG
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 3
57664: NEG
57665: PUSH
57666: LD_INT 3
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 3
57676: NEG
57677: PUSH
57678: LD_INT 4
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 4
57688: NEG
57689: PUSH
57690: LD_INT 3
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 4
57700: NEG
57701: PUSH
57702: LD_INT 4
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 4
57712: NEG
57713: PUSH
57714: LD_INT 5
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 5
57724: NEG
57725: PUSH
57726: LD_INT 4
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 5
57736: NEG
57737: PUSH
57738: LD_INT 5
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 5
57748: NEG
57749: PUSH
57750: LD_INT 6
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 6
57760: NEG
57761: PUSH
57762: LD_INT 5
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 6
57772: NEG
57773: PUSH
57774: LD_INT 6
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57796: LD_ADDR_VAR 0 41
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: LD_INT 3
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: LD_INT 2
57829: NEG
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: LIST
57839: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57840: LD_ADDR_VAR 0 42
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 3
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: LIST
57880: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57881: LD_ADDR_VAR 0 43
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 3
57898: PUSH
57899: LD_INT 2
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: LD_INT 3
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: LIST
57920: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57921: LD_ADDR_VAR 0 44
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: LD_INT 3
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: LIST
57961: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57962: LD_ADDR_VAR 0 45
57966: PUSH
57967: LD_INT 2
57969: NEG
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 3
57991: NEG
57992: PUSH
57993: LD_INT 1
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: LIST
58005: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58006: LD_ADDR_VAR 0 46
58010: PUSH
58011: LD_INT 2
58013: NEG
58014: PUSH
58015: LD_INT 2
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: LD_INT 3
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 3
58037: NEG
58038: PUSH
58039: LD_INT 2
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: LIST
58051: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58052: LD_ADDR_VAR 0 47
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: LD_INT 3
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58085: LD_ADDR_VAR 0 48
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58116: LD_ADDR_VAR 0 49
58120: PUSH
58121: LD_INT 3
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 3
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58145: LD_ADDR_VAR 0 50
58149: PUSH
58150: LD_INT 2
58152: PUSH
58153: LD_INT 3
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: LD_INT 3
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58174: LD_ADDR_VAR 0 51
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 2
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: NEG
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58205: LD_ADDR_VAR 0 52
58209: PUSH
58210: LD_INT 3
58212: NEG
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 3
58224: NEG
58225: PUSH
58226: LD_INT 2
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58238: LD_ADDR_VAR 0 53
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 3
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: LD_INT 3
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: LD_INT 2
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: LIST
58281: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58282: LD_ADDR_VAR 0 54
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 3
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 3
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: LIST
58322: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58323: LD_ADDR_VAR 0 55
58327: PUSH
58328: LD_INT 3
58330: PUSH
58331: LD_INT 2
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 3
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 2
58350: PUSH
58351: LD_INT 3
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: LIST
58362: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58363: LD_ADDR_VAR 0 56
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: LIST
58403: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58404: LD_ADDR_VAR 0 57
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 3
58422: NEG
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 3
58433: NEG
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: LIST
58447: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58448: LD_ADDR_VAR 0 58
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: LD_INT 3
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 3
58467: NEG
58468: PUSH
58469: LD_INT 2
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 3
58479: NEG
58480: PUSH
58481: LD_INT 3
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: LIST
58493: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58494: LD_ADDR_VAR 0 59
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: LD_INT 2
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: LIST
58537: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58538: LD_ADDR_VAR 0 60
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 2
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: LIST
58578: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58579: LD_ADDR_VAR 0 61
58583: PUSH
58584: LD_INT 2
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 2
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: LD_INT 2
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: LIST
58618: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58619: LD_ADDR_VAR 0 62
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 2
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 2
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: LIST
58659: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58660: LD_ADDR_VAR 0 63
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: LIST
58703: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58704: LD_ADDR_VAR 0 64
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: LD_INT 2
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: NEG
58736: PUSH
58737: LD_INT 2
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: LIST
58749: ST_TO_ADDR
// end ; 2 :
58750: GO 62016
58752: LD_INT 2
58754: DOUBLE
58755: EQUAL
58756: IFTRUE 58760
58758: GO 62015
58760: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58761: LD_ADDR_VAR 0 29
58765: PUSH
58766: LD_INT 4
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 4
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 5
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 5
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 4
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 3
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 3
58840: PUSH
58841: LD_INT 2
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 5
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 3
58861: PUSH
58862: LD_INT 3
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 3
58871: PUSH
58872: LD_INT 2
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 4
58881: PUSH
58882: LD_INT 3
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 4
58891: PUSH
58892: LD_INT 4
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 3
58901: PUSH
58902: LD_INT 4
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: LD_INT 3
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: PUSH
58922: LD_INT 2
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 4
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 2
58941: PUSH
58942: LD_INT 4
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: LD_INT 4
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 3
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: LD_INT 4
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: LD_INT 5
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: LD_INT 5
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 1
59001: NEG
59002: PUSH
59003: LD_INT 4
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 3
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: LD_INT 5
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: NEG
59034: PUSH
59035: LD_INT 3
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 3
59044: NEG
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 3
59055: NEG
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 2
59078: NEG
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 3
59089: NEG
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 4
59100: NEG
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 4
59111: NEG
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 4
59123: NEG
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 2
59135: NEG
59136: PUSH
59137: LD_INT 2
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 4
59146: NEG
59147: PUSH
59148: LD_INT 4
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 4
59158: NEG
59159: PUSH
59160: LD_INT 5
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 3
59170: NEG
59171: PUSH
59172: LD_INT 4
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 3
59182: NEG
59183: PUSH
59184: LD_INT 3
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 4
59194: NEG
59195: PUSH
59196: LD_INT 3
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 5
59206: NEG
59207: PUSH
59208: LD_INT 4
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 5
59218: NEG
59219: PUSH
59220: LD_INT 5
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 3
59230: NEG
59231: PUSH
59232: LD_INT 5
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 5
59242: NEG
59243: PUSH
59244: LD_INT 3
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59299: LD_ADDR_VAR 0 30
59303: PUSH
59304: LD_INT 4
59306: PUSH
59307: LD_INT 4
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 4
59316: PUSH
59317: LD_INT 3
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 5
59326: PUSH
59327: LD_INT 4
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 5
59336: PUSH
59337: LD_INT 5
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 4
59346: PUSH
59347: LD_INT 5
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 3
59356: PUSH
59357: LD_INT 4
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: LD_INT 3
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 5
59376: PUSH
59377: LD_INT 3
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 3
59386: PUSH
59387: LD_INT 5
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: LD_INT 3
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: LD_INT 3
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: LD_INT 4
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: LD_INT 4
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: LD_INT 3
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: LD_INT 2
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 2
59468: PUSH
59469: LD_INT 4
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: LD_INT 2
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 4
59489: NEG
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 4
59500: NEG
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 3
59512: NEG
59513: PUSH
59514: LD_INT 0
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 3
59523: NEG
59524: PUSH
59525: LD_INT 1
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 4
59534: NEG
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 5
59545: NEG
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 5
59556: NEG
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 5
59568: NEG
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 3
59580: NEG
59581: PUSH
59582: LD_INT 2
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 3
59591: NEG
59592: PUSH
59593: LD_INT 3
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 3
59603: NEG
59604: PUSH
59605: LD_INT 4
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 2
59615: NEG
59616: PUSH
59617: LD_INT 3
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 2
59627: NEG
59628: PUSH
59629: LD_INT 2
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 3
59639: NEG
59640: PUSH
59641: LD_INT 2
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 4
59651: NEG
59652: PUSH
59653: LD_INT 3
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 4
59663: NEG
59664: PUSH
59665: LD_INT 4
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 2
59675: NEG
59676: PUSH
59677: LD_INT 4
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 4
59687: NEG
59688: PUSH
59689: LD_INT 2
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 4
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: LD_INT 5
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: PUSH
59722: LD_INT 4
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: LD_INT 3
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 0
59743: PUSH
59744: LD_INT 3
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: LD_INT 4
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: LD_INT 5
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: LD_INT 3
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 2
59789: NEG
59790: PUSH
59791: LD_INT 5
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59846: LD_ADDR_VAR 0 31
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: LD_INT 4
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 3
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: LD_INT 4
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: LD_INT 5
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: LD_INT 5
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: LD_INT 4
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 3
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 2
59925: PUSH
59926: LD_INT 5
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: LD_INT 3
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 3
59946: NEG
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 3
59957: NEG
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 2
59980: NEG
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 3
59991: NEG
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 4
60002: NEG
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 4
60013: NEG
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 4
60025: NEG
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 2
60037: NEG
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 4
60048: NEG
60049: PUSH
60050: LD_INT 4
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 4
60060: NEG
60061: PUSH
60062: LD_INT 5
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 3
60072: NEG
60073: PUSH
60074: LD_INT 4
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 3
60084: NEG
60085: PUSH
60086: LD_INT 3
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 4
60096: NEG
60097: PUSH
60098: LD_INT 3
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 5
60108: NEG
60109: PUSH
60110: LD_INT 4
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 5
60120: NEG
60121: PUSH
60122: LD_INT 5
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 3
60132: NEG
60133: PUSH
60134: LD_INT 5
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 5
60144: NEG
60145: PUSH
60146: LD_INT 3
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: LD_INT 3
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: LD_INT 4
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: LD_INT 3
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: LD_INT 2
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: LD_INT 3
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 1
60223: NEG
60224: PUSH
60225: LD_INT 4
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: LD_INT 2
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 2
60246: NEG
60247: PUSH
60248: LD_INT 4
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 4
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 4
60268: PUSH
60269: LD_INT 1
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 5
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 5
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 4
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 3
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 3
60319: PUSH
60320: LD_INT 1
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 3
60330: PUSH
60331: LD_INT 2
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 5
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60396: LD_ADDR_VAR 0 32
60400: PUSH
60401: LD_INT 4
60403: NEG
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 4
60414: NEG
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 3
60426: NEG
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 3
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 4
60448: NEG
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 5
60459: NEG
60460: PUSH
60461: LD_INT 0
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 5
60470: NEG
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 5
60482: NEG
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 3
60494: NEG
60495: PUSH
60496: LD_INT 2
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 3
60505: NEG
60506: PUSH
60507: LD_INT 3
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 3
60517: NEG
60518: PUSH
60519: LD_INT 4
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 2
60529: NEG
60530: PUSH
60531: LD_INT 3
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 2
60541: NEG
60542: PUSH
60543: LD_INT 2
60545: NEG
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 3
60553: NEG
60554: PUSH
60555: LD_INT 2
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 4
60565: NEG
60566: PUSH
60567: LD_INT 3
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 4
60577: NEG
60578: PUSH
60579: LD_INT 4
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 2
60589: NEG
60590: PUSH
60591: LD_INT 4
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 4
60601: NEG
60602: PUSH
60603: LD_INT 2
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: LD_INT 4
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: LD_INT 5
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: LD_INT 4
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: LD_INT 3
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: LD_INT 3
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 1
60668: NEG
60669: PUSH
60670: LD_INT 4
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: LD_INT 5
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: LD_INT 3
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 2
60703: NEG
60704: PUSH
60705: LD_INT 5
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 3
60715: PUSH
60716: LD_INT 0
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 3
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 4
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 4
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 3
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 2
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 2
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: PUSH
60788: LD_INT 2
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 4
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 4
60808: PUSH
60809: LD_INT 4
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 4
60818: PUSH
60819: LD_INT 3
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 5
60828: PUSH
60829: LD_INT 4
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 5
60838: PUSH
60839: LD_INT 5
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 4
60848: PUSH
60849: LD_INT 5
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 3
60858: PUSH
60859: LD_INT 4
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 3
60868: PUSH
60869: LD_INT 3
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 5
60878: PUSH
60879: LD_INT 3
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 3
60888: PUSH
60889: LD_INT 5
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60943: LD_ADDR_VAR 0 33
60947: PUSH
60948: LD_INT 4
60950: NEG
60951: PUSH
60952: LD_INT 4
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 4
60962: NEG
60963: PUSH
60964: LD_INT 5
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 3
60974: NEG
60975: PUSH
60976: LD_INT 4
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 3
60986: NEG
60987: PUSH
60988: LD_INT 3
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 4
60998: NEG
60999: PUSH
61000: LD_INT 3
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 5
61010: NEG
61011: PUSH
61012: LD_INT 4
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 5
61022: NEG
61023: PUSH
61024: LD_INT 5
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 3
61034: NEG
61035: PUSH
61036: LD_INT 5
61038: NEG
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 5
61046: NEG
61047: PUSH
61048: LD_INT 3
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: LD_INT 3
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: LD_INT 4
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: LD_INT 3
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: LD_INT 2
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: LD_INT 3
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: LD_INT 4
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 2
61137: PUSH
61138: LD_INT 2
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: LD_INT 4
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 4
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 4
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 5
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 5
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 4
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 3
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 3
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 3
61232: PUSH
61233: LD_INT 2
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 5
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 3
61253: PUSH
61254: LD_INT 3
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 3
61263: PUSH
61264: LD_INT 2
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 4
61273: PUSH
61274: LD_INT 3
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 4
61283: PUSH
61284: LD_INT 4
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 3
61293: PUSH
61294: LD_INT 4
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 2
61303: PUSH
61304: LD_INT 3
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 2
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 4
61323: PUSH
61324: LD_INT 2
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 2
61333: PUSH
61334: LD_INT 4
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: LD_INT 4
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: LD_INT 3
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: LD_INT 4
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 1
61373: PUSH
61374: LD_INT 5
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 5
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 1
61393: NEG
61394: PUSH
61395: LD_INT 4
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 1
61404: NEG
61405: PUSH
61406: LD_INT 3
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 2
61415: PUSH
61416: LD_INT 5
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: LD_INT 3
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61481: LD_ADDR_VAR 0 34
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 4
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: LD_INT 5
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: LD_INT 4
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: LD_INT 3
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: LD_INT 3
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: LD_INT 4
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: LD_INT 5
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 2
61567: PUSH
61568: LD_INT 3
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 2
61578: NEG
61579: PUSH
61580: LD_INT 5
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 3
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 3
61600: PUSH
61601: LD_INT 1
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 4
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 4
61621: PUSH
61622: LD_INT 1
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 3
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 2
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 2
61662: PUSH
61663: LD_INT 2
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 4
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 4
61683: PUSH
61684: LD_INT 4
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 4
61693: PUSH
61694: LD_INT 3
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 5
61703: PUSH
61704: LD_INT 4
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 5
61713: PUSH
61714: LD_INT 5
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 4
61723: PUSH
61724: LD_INT 5
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 3
61733: PUSH
61734: LD_INT 4
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 3
61743: PUSH
61744: LD_INT 3
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 5
61753: PUSH
61754: LD_INT 3
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 3
61763: PUSH
61764: LD_INT 5
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: LD_INT 3
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: LD_INT 2
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: LD_INT 3
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 4
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 4
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: LD_INT 3
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: LD_INT 2
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 2
61845: PUSH
61846: LD_INT 4
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 2
61855: NEG
61856: PUSH
61857: LD_INT 2
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 4
61866: NEG
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 4
61877: NEG
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 3
61889: NEG
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 3
61900: NEG
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 4
61911: NEG
61912: PUSH
61913: LD_INT 1
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 5
61922: NEG
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 5
61933: NEG
61934: PUSH
61935: LD_INT 1
61937: NEG
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 5
61945: NEG
61946: PUSH
61947: LD_INT 2
61949: NEG
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 3
61957: NEG
61958: PUSH
61959: LD_INT 2
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: ST_TO_ADDR
// end ; end ;
62013: GO 62016
62015: POP
// case btype of b_depot , b_warehouse :
62016: LD_VAR 0 1
62020: PUSH
62021: LD_INT 0
62023: DOUBLE
62024: EQUAL
62025: IFTRUE 62035
62027: LD_INT 1
62029: DOUBLE
62030: EQUAL
62031: IFTRUE 62035
62033: GO 62236
62035: POP
// case nation of nation_american :
62036: LD_VAR 0 5
62040: PUSH
62041: LD_INT 1
62043: DOUBLE
62044: EQUAL
62045: IFTRUE 62049
62047: GO 62105
62049: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62050: LD_ADDR_VAR 0 9
62054: PUSH
62055: LD_VAR 0 11
62059: PUSH
62060: LD_VAR 0 12
62064: PUSH
62065: LD_VAR 0 13
62069: PUSH
62070: LD_VAR 0 14
62074: PUSH
62075: LD_VAR 0 15
62079: PUSH
62080: LD_VAR 0 16
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: PUSH
62093: LD_VAR 0 4
62097: PUSH
62098: LD_INT 1
62100: PLUS
62101: ARRAY
62102: ST_TO_ADDR
62103: GO 62234
62105: LD_INT 2
62107: DOUBLE
62108: EQUAL
62109: IFTRUE 62113
62111: GO 62169
62113: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62114: LD_ADDR_VAR 0 9
62118: PUSH
62119: LD_VAR 0 17
62123: PUSH
62124: LD_VAR 0 18
62128: PUSH
62129: LD_VAR 0 19
62133: PUSH
62134: LD_VAR 0 20
62138: PUSH
62139: LD_VAR 0 21
62143: PUSH
62144: LD_VAR 0 22
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: PUSH
62157: LD_VAR 0 4
62161: PUSH
62162: LD_INT 1
62164: PLUS
62165: ARRAY
62166: ST_TO_ADDR
62167: GO 62234
62169: LD_INT 3
62171: DOUBLE
62172: EQUAL
62173: IFTRUE 62177
62175: GO 62233
62177: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62178: LD_ADDR_VAR 0 9
62182: PUSH
62183: LD_VAR 0 23
62187: PUSH
62188: LD_VAR 0 24
62192: PUSH
62193: LD_VAR 0 25
62197: PUSH
62198: LD_VAR 0 26
62202: PUSH
62203: LD_VAR 0 27
62207: PUSH
62208: LD_VAR 0 28
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: PUSH
62221: LD_VAR 0 4
62225: PUSH
62226: LD_INT 1
62228: PLUS
62229: ARRAY
62230: ST_TO_ADDR
62231: GO 62234
62233: POP
62234: GO 62789
62236: LD_INT 2
62238: DOUBLE
62239: EQUAL
62240: IFTRUE 62250
62242: LD_INT 3
62244: DOUBLE
62245: EQUAL
62246: IFTRUE 62250
62248: GO 62306
62250: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62251: LD_ADDR_VAR 0 9
62255: PUSH
62256: LD_VAR 0 29
62260: PUSH
62261: LD_VAR 0 30
62265: PUSH
62266: LD_VAR 0 31
62270: PUSH
62271: LD_VAR 0 32
62275: PUSH
62276: LD_VAR 0 33
62280: PUSH
62281: LD_VAR 0 34
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: PUSH
62294: LD_VAR 0 4
62298: PUSH
62299: LD_INT 1
62301: PLUS
62302: ARRAY
62303: ST_TO_ADDR
62304: GO 62789
62306: LD_INT 16
62308: DOUBLE
62309: EQUAL
62310: IFTRUE 62368
62312: LD_INT 17
62314: DOUBLE
62315: EQUAL
62316: IFTRUE 62368
62318: LD_INT 18
62320: DOUBLE
62321: EQUAL
62322: IFTRUE 62368
62324: LD_INT 19
62326: DOUBLE
62327: EQUAL
62328: IFTRUE 62368
62330: LD_INT 22
62332: DOUBLE
62333: EQUAL
62334: IFTRUE 62368
62336: LD_INT 20
62338: DOUBLE
62339: EQUAL
62340: IFTRUE 62368
62342: LD_INT 21
62344: DOUBLE
62345: EQUAL
62346: IFTRUE 62368
62348: LD_INT 23
62350: DOUBLE
62351: EQUAL
62352: IFTRUE 62368
62354: LD_INT 24
62356: DOUBLE
62357: EQUAL
62358: IFTRUE 62368
62360: LD_INT 25
62362: DOUBLE
62363: EQUAL
62364: IFTRUE 62368
62366: GO 62424
62368: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62369: LD_ADDR_VAR 0 9
62373: PUSH
62374: LD_VAR 0 35
62378: PUSH
62379: LD_VAR 0 36
62383: PUSH
62384: LD_VAR 0 37
62388: PUSH
62389: LD_VAR 0 38
62393: PUSH
62394: LD_VAR 0 39
62398: PUSH
62399: LD_VAR 0 40
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: PUSH
62412: LD_VAR 0 4
62416: PUSH
62417: LD_INT 1
62419: PLUS
62420: ARRAY
62421: ST_TO_ADDR
62422: GO 62789
62424: LD_INT 6
62426: DOUBLE
62427: EQUAL
62428: IFTRUE 62480
62430: LD_INT 7
62432: DOUBLE
62433: EQUAL
62434: IFTRUE 62480
62436: LD_INT 8
62438: DOUBLE
62439: EQUAL
62440: IFTRUE 62480
62442: LD_INT 13
62444: DOUBLE
62445: EQUAL
62446: IFTRUE 62480
62448: LD_INT 12
62450: DOUBLE
62451: EQUAL
62452: IFTRUE 62480
62454: LD_INT 15
62456: DOUBLE
62457: EQUAL
62458: IFTRUE 62480
62460: LD_INT 11
62462: DOUBLE
62463: EQUAL
62464: IFTRUE 62480
62466: LD_INT 14
62468: DOUBLE
62469: EQUAL
62470: IFTRUE 62480
62472: LD_INT 10
62474: DOUBLE
62475: EQUAL
62476: IFTRUE 62480
62478: GO 62536
62480: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62481: LD_ADDR_VAR 0 9
62485: PUSH
62486: LD_VAR 0 41
62490: PUSH
62491: LD_VAR 0 42
62495: PUSH
62496: LD_VAR 0 43
62500: PUSH
62501: LD_VAR 0 44
62505: PUSH
62506: LD_VAR 0 45
62510: PUSH
62511: LD_VAR 0 46
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: PUSH
62524: LD_VAR 0 4
62528: PUSH
62529: LD_INT 1
62531: PLUS
62532: ARRAY
62533: ST_TO_ADDR
62534: GO 62789
62536: LD_INT 36
62538: DOUBLE
62539: EQUAL
62540: IFTRUE 62544
62542: GO 62600
62544: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62545: LD_ADDR_VAR 0 9
62549: PUSH
62550: LD_VAR 0 47
62554: PUSH
62555: LD_VAR 0 48
62559: PUSH
62560: LD_VAR 0 49
62564: PUSH
62565: LD_VAR 0 50
62569: PUSH
62570: LD_VAR 0 51
62574: PUSH
62575: LD_VAR 0 52
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: PUSH
62588: LD_VAR 0 4
62592: PUSH
62593: LD_INT 1
62595: PLUS
62596: ARRAY
62597: ST_TO_ADDR
62598: GO 62789
62600: LD_INT 4
62602: DOUBLE
62603: EQUAL
62604: IFTRUE 62626
62606: LD_INT 5
62608: DOUBLE
62609: EQUAL
62610: IFTRUE 62626
62612: LD_INT 34
62614: DOUBLE
62615: EQUAL
62616: IFTRUE 62626
62618: LD_INT 37
62620: DOUBLE
62621: EQUAL
62622: IFTRUE 62626
62624: GO 62682
62626: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62627: LD_ADDR_VAR 0 9
62631: PUSH
62632: LD_VAR 0 53
62636: PUSH
62637: LD_VAR 0 54
62641: PUSH
62642: LD_VAR 0 55
62646: PUSH
62647: LD_VAR 0 56
62651: PUSH
62652: LD_VAR 0 57
62656: PUSH
62657: LD_VAR 0 58
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: PUSH
62670: LD_VAR 0 4
62674: PUSH
62675: LD_INT 1
62677: PLUS
62678: ARRAY
62679: ST_TO_ADDR
62680: GO 62789
62682: LD_INT 31
62684: DOUBLE
62685: EQUAL
62686: IFTRUE 62732
62688: LD_INT 32
62690: DOUBLE
62691: EQUAL
62692: IFTRUE 62732
62694: LD_INT 33
62696: DOUBLE
62697: EQUAL
62698: IFTRUE 62732
62700: LD_INT 27
62702: DOUBLE
62703: EQUAL
62704: IFTRUE 62732
62706: LD_INT 26
62708: DOUBLE
62709: EQUAL
62710: IFTRUE 62732
62712: LD_INT 28
62714: DOUBLE
62715: EQUAL
62716: IFTRUE 62732
62718: LD_INT 29
62720: DOUBLE
62721: EQUAL
62722: IFTRUE 62732
62724: LD_INT 30
62726: DOUBLE
62727: EQUAL
62728: IFTRUE 62732
62730: GO 62788
62732: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62733: LD_ADDR_VAR 0 9
62737: PUSH
62738: LD_VAR 0 59
62742: PUSH
62743: LD_VAR 0 60
62747: PUSH
62748: LD_VAR 0 61
62752: PUSH
62753: LD_VAR 0 62
62757: PUSH
62758: LD_VAR 0 63
62762: PUSH
62763: LD_VAR 0 64
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: PUSH
62776: LD_VAR 0 4
62780: PUSH
62781: LD_INT 1
62783: PLUS
62784: ARRAY
62785: ST_TO_ADDR
62786: GO 62789
62788: POP
// temp_list2 = [ ] ;
62789: LD_ADDR_VAR 0 10
62793: PUSH
62794: EMPTY
62795: ST_TO_ADDR
// for i in temp_list do
62796: LD_ADDR_VAR 0 8
62800: PUSH
62801: LD_VAR 0 9
62805: PUSH
62806: FOR_IN
62807: IFFALSE 62859
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62809: LD_ADDR_VAR 0 10
62813: PUSH
62814: LD_VAR 0 10
62818: PUSH
62819: LD_VAR 0 8
62823: PUSH
62824: LD_INT 1
62826: ARRAY
62827: PUSH
62828: LD_VAR 0 2
62832: PLUS
62833: PUSH
62834: LD_VAR 0 8
62838: PUSH
62839: LD_INT 2
62841: ARRAY
62842: PUSH
62843: LD_VAR 0 3
62847: PLUS
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: EMPTY
62854: LIST
62855: ADD
62856: ST_TO_ADDR
62857: GO 62806
62859: POP
62860: POP
// result = temp_list2 ;
62861: LD_ADDR_VAR 0 7
62865: PUSH
62866: LD_VAR 0 10
62870: ST_TO_ADDR
// end ;
62871: LD_VAR 0 7
62875: RET
// export function EnemyInRange ( unit , dist ) ; begin
62876: LD_INT 0
62878: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62879: LD_ADDR_VAR 0 3
62883: PUSH
62884: LD_VAR 0 1
62888: PPUSH
62889: CALL_OW 255
62893: PPUSH
62894: LD_VAR 0 1
62898: PPUSH
62899: CALL_OW 250
62903: PPUSH
62904: LD_VAR 0 1
62908: PPUSH
62909: CALL_OW 251
62913: PPUSH
62914: LD_VAR 0 2
62918: PPUSH
62919: CALL 36278 0 4
62923: PUSH
62924: LD_INT 4
62926: ARRAY
62927: ST_TO_ADDR
// end ;
62928: LD_VAR 0 3
62932: RET
// export function PlayerSeeMe ( unit ) ; begin
62933: LD_INT 0
62935: PPUSH
// result := See ( your_side , unit ) ;
62936: LD_ADDR_VAR 0 2
62940: PUSH
62941: LD_OWVAR 2
62945: PPUSH
62946: LD_VAR 0 1
62950: PPUSH
62951: CALL_OW 292
62955: ST_TO_ADDR
// end ;
62956: LD_VAR 0 2
62960: RET
// export function ReverseDir ( unit ) ; begin
62961: LD_INT 0
62963: PPUSH
// if not unit then
62964: LD_VAR 0 1
62968: NOT
62969: IFFALSE 62973
// exit ;
62971: GO 62996
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62973: LD_ADDR_VAR 0 2
62977: PUSH
62978: LD_VAR 0 1
62982: PPUSH
62983: CALL_OW 254
62987: PUSH
62988: LD_INT 3
62990: PLUS
62991: PUSH
62992: LD_INT 6
62994: MOD
62995: ST_TO_ADDR
// end ;
62996: LD_VAR 0 2
63000: RET
// export function ReverseArray ( array ) ; var i ; begin
63001: LD_INT 0
63003: PPUSH
63004: PPUSH
// if not array then
63005: LD_VAR 0 1
63009: NOT
63010: IFFALSE 63014
// exit ;
63012: GO 63069
// result := [ ] ;
63014: LD_ADDR_VAR 0 2
63018: PUSH
63019: EMPTY
63020: ST_TO_ADDR
// for i := array downto 1 do
63021: LD_ADDR_VAR 0 3
63025: PUSH
63026: DOUBLE
63027: LD_VAR 0 1
63031: INC
63032: ST_TO_ADDR
63033: LD_INT 1
63035: PUSH
63036: FOR_DOWNTO
63037: IFFALSE 63067
// result := Join ( result , array [ i ] ) ;
63039: LD_ADDR_VAR 0 2
63043: PUSH
63044: LD_VAR 0 2
63048: PPUSH
63049: LD_VAR 0 1
63053: PUSH
63054: LD_VAR 0 3
63058: ARRAY
63059: PPUSH
63060: CALL 67694 0 2
63064: ST_TO_ADDR
63065: GO 63036
63067: POP
63068: POP
// end ;
63069: LD_VAR 0 2
63073: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63074: LD_INT 0
63076: PPUSH
63077: PPUSH
63078: PPUSH
63079: PPUSH
63080: PPUSH
63081: PPUSH
// if not unit or not hexes then
63082: LD_VAR 0 1
63086: NOT
63087: PUSH
63088: LD_VAR 0 2
63092: NOT
63093: OR
63094: IFFALSE 63098
// exit ;
63096: GO 63221
// dist := 9999 ;
63098: LD_ADDR_VAR 0 5
63102: PUSH
63103: LD_INT 9999
63105: ST_TO_ADDR
// for i = 1 to hexes do
63106: LD_ADDR_VAR 0 4
63110: PUSH
63111: DOUBLE
63112: LD_INT 1
63114: DEC
63115: ST_TO_ADDR
63116: LD_VAR 0 2
63120: PUSH
63121: FOR_TO
63122: IFFALSE 63209
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63124: LD_ADDR_VAR 0 6
63128: PUSH
63129: LD_VAR 0 1
63133: PPUSH
63134: LD_VAR 0 2
63138: PUSH
63139: LD_VAR 0 4
63143: ARRAY
63144: PUSH
63145: LD_INT 1
63147: ARRAY
63148: PPUSH
63149: LD_VAR 0 2
63153: PUSH
63154: LD_VAR 0 4
63158: ARRAY
63159: PUSH
63160: LD_INT 2
63162: ARRAY
63163: PPUSH
63164: CALL_OW 297
63168: ST_TO_ADDR
// if tdist < dist then
63169: LD_VAR 0 6
63173: PUSH
63174: LD_VAR 0 5
63178: LESS
63179: IFFALSE 63207
// begin hex := hexes [ i ] ;
63181: LD_ADDR_VAR 0 8
63185: PUSH
63186: LD_VAR 0 2
63190: PUSH
63191: LD_VAR 0 4
63195: ARRAY
63196: ST_TO_ADDR
// dist := tdist ;
63197: LD_ADDR_VAR 0 5
63201: PUSH
63202: LD_VAR 0 6
63206: ST_TO_ADDR
// end ; end ;
63207: GO 63121
63209: POP
63210: POP
// result := hex ;
63211: LD_ADDR_VAR 0 3
63215: PUSH
63216: LD_VAR 0 8
63220: ST_TO_ADDR
// end ;
63221: LD_VAR 0 3
63225: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63226: LD_INT 0
63228: PPUSH
63229: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63230: LD_VAR 0 1
63234: NOT
63235: PUSH
63236: LD_VAR 0 1
63240: PUSH
63241: LD_INT 21
63243: PUSH
63244: LD_INT 2
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 23
63253: PUSH
63254: LD_INT 2
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PPUSH
63265: CALL_OW 69
63269: IN
63270: NOT
63271: OR
63272: IFFALSE 63276
// exit ;
63274: GO 63323
// for i = 1 to 3 do
63276: LD_ADDR_VAR 0 3
63280: PUSH
63281: DOUBLE
63282: LD_INT 1
63284: DEC
63285: ST_TO_ADDR
63286: LD_INT 3
63288: PUSH
63289: FOR_TO
63290: IFFALSE 63321
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63292: LD_VAR 0 1
63296: PPUSH
63297: CALL_OW 250
63301: PPUSH
63302: LD_VAR 0 1
63306: PPUSH
63307: CALL_OW 251
63311: PPUSH
63312: LD_INT 1
63314: PPUSH
63315: CALL_OW 453
63319: GO 63289
63321: POP
63322: POP
// end ;
63323: LD_VAR 0 2
63327: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63328: LD_INT 0
63330: PPUSH
63331: PPUSH
63332: PPUSH
63333: PPUSH
63334: PPUSH
63335: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63336: LD_VAR 0 1
63340: NOT
63341: PUSH
63342: LD_VAR 0 2
63346: NOT
63347: OR
63348: PUSH
63349: LD_VAR 0 1
63353: PPUSH
63354: CALL_OW 314
63358: OR
63359: IFFALSE 63363
// exit ;
63361: GO 63804
// x := GetX ( enemy_unit ) ;
63363: LD_ADDR_VAR 0 7
63367: PUSH
63368: LD_VAR 0 2
63372: PPUSH
63373: CALL_OW 250
63377: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63378: LD_ADDR_VAR 0 8
63382: PUSH
63383: LD_VAR 0 2
63387: PPUSH
63388: CALL_OW 251
63392: ST_TO_ADDR
// if not x or not y then
63393: LD_VAR 0 7
63397: NOT
63398: PUSH
63399: LD_VAR 0 8
63403: NOT
63404: OR
63405: IFFALSE 63409
// exit ;
63407: GO 63804
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63409: LD_ADDR_VAR 0 6
63413: PUSH
63414: LD_VAR 0 7
63418: PPUSH
63419: LD_INT 0
63421: PPUSH
63422: LD_INT 4
63424: PPUSH
63425: CALL_OW 272
63429: PUSH
63430: LD_VAR 0 8
63434: PPUSH
63435: LD_INT 0
63437: PPUSH
63438: LD_INT 4
63440: PPUSH
63441: CALL_OW 273
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_VAR 0 7
63454: PPUSH
63455: LD_INT 1
63457: PPUSH
63458: LD_INT 4
63460: PPUSH
63461: CALL_OW 272
63465: PUSH
63466: LD_VAR 0 8
63470: PPUSH
63471: LD_INT 1
63473: PPUSH
63474: LD_INT 4
63476: PPUSH
63477: CALL_OW 273
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_VAR 0 7
63490: PPUSH
63491: LD_INT 2
63493: PPUSH
63494: LD_INT 4
63496: PPUSH
63497: CALL_OW 272
63501: PUSH
63502: LD_VAR 0 8
63506: PPUSH
63507: LD_INT 2
63509: PPUSH
63510: LD_INT 4
63512: PPUSH
63513: CALL_OW 273
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_VAR 0 7
63526: PPUSH
63527: LD_INT 3
63529: PPUSH
63530: LD_INT 4
63532: PPUSH
63533: CALL_OW 272
63537: PUSH
63538: LD_VAR 0 8
63542: PPUSH
63543: LD_INT 3
63545: PPUSH
63546: LD_INT 4
63548: PPUSH
63549: CALL_OW 273
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_VAR 0 7
63562: PPUSH
63563: LD_INT 4
63565: PPUSH
63566: LD_INT 4
63568: PPUSH
63569: CALL_OW 272
63573: PUSH
63574: LD_VAR 0 8
63578: PPUSH
63579: LD_INT 4
63581: PPUSH
63582: LD_INT 4
63584: PPUSH
63585: CALL_OW 273
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_VAR 0 7
63598: PPUSH
63599: LD_INT 5
63601: PPUSH
63602: LD_INT 4
63604: PPUSH
63605: CALL_OW 272
63609: PUSH
63610: LD_VAR 0 8
63614: PPUSH
63615: LD_INT 5
63617: PPUSH
63618: LD_INT 4
63620: PPUSH
63621: CALL_OW 273
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: ST_TO_ADDR
// for i = tmp downto 1 do
63638: LD_ADDR_VAR 0 4
63642: PUSH
63643: DOUBLE
63644: LD_VAR 0 6
63648: INC
63649: ST_TO_ADDR
63650: LD_INT 1
63652: PUSH
63653: FOR_DOWNTO
63654: IFFALSE 63755
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63656: LD_VAR 0 6
63660: PUSH
63661: LD_VAR 0 4
63665: ARRAY
63666: PUSH
63667: LD_INT 1
63669: ARRAY
63670: PPUSH
63671: LD_VAR 0 6
63675: PUSH
63676: LD_VAR 0 4
63680: ARRAY
63681: PUSH
63682: LD_INT 2
63684: ARRAY
63685: PPUSH
63686: CALL_OW 488
63690: NOT
63691: PUSH
63692: LD_VAR 0 6
63696: PUSH
63697: LD_VAR 0 4
63701: ARRAY
63702: PUSH
63703: LD_INT 1
63705: ARRAY
63706: PPUSH
63707: LD_VAR 0 6
63711: PUSH
63712: LD_VAR 0 4
63716: ARRAY
63717: PUSH
63718: LD_INT 2
63720: ARRAY
63721: PPUSH
63722: CALL_OW 428
63726: PUSH
63727: LD_INT 0
63729: NONEQUAL
63730: OR
63731: IFFALSE 63753
// tmp := Delete ( tmp , i ) ;
63733: LD_ADDR_VAR 0 6
63737: PUSH
63738: LD_VAR 0 6
63742: PPUSH
63743: LD_VAR 0 4
63747: PPUSH
63748: CALL_OW 3
63752: ST_TO_ADDR
63753: GO 63653
63755: POP
63756: POP
// j := GetClosestHex ( unit , tmp ) ;
63757: LD_ADDR_VAR 0 5
63761: PUSH
63762: LD_VAR 0 1
63766: PPUSH
63767: LD_VAR 0 6
63771: PPUSH
63772: CALL 63074 0 2
63776: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63777: LD_VAR 0 1
63781: PPUSH
63782: LD_VAR 0 5
63786: PUSH
63787: LD_INT 1
63789: ARRAY
63790: PPUSH
63791: LD_VAR 0 5
63795: PUSH
63796: LD_INT 2
63798: ARRAY
63799: PPUSH
63800: CALL_OW 111
// end ;
63804: LD_VAR 0 3
63808: RET
// export function PrepareApemanSoldier ( ) ; begin
63809: LD_INT 0
63811: PPUSH
// uc_nation := 0 ;
63812: LD_ADDR_OWVAR 21
63816: PUSH
63817: LD_INT 0
63819: ST_TO_ADDR
// hc_sex := sex_male ;
63820: LD_ADDR_OWVAR 27
63824: PUSH
63825: LD_INT 1
63827: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63828: LD_ADDR_OWVAR 28
63832: PUSH
63833: LD_INT 15
63835: ST_TO_ADDR
// hc_gallery :=  ;
63836: LD_ADDR_OWVAR 33
63840: PUSH
63841: LD_STRING 
63843: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63844: LD_ADDR_OWVAR 31
63848: PUSH
63849: LD_INT 0
63851: PPUSH
63852: LD_INT 3
63854: PPUSH
63855: CALL_OW 12
63859: PUSH
63860: LD_INT 0
63862: PPUSH
63863: LD_INT 3
63865: PPUSH
63866: CALL_OW 12
63870: PUSH
63871: LD_INT 0
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: ST_TO_ADDR
// end ;
63883: LD_VAR 0 1
63887: RET
// export function PrepareApemanEngineer ( ) ; begin
63888: LD_INT 0
63890: PPUSH
// uc_nation := 0 ;
63891: LD_ADDR_OWVAR 21
63895: PUSH
63896: LD_INT 0
63898: ST_TO_ADDR
// hc_sex := sex_male ;
63899: LD_ADDR_OWVAR 27
63903: PUSH
63904: LD_INT 1
63906: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63907: LD_ADDR_OWVAR 28
63911: PUSH
63912: LD_INT 16
63914: ST_TO_ADDR
// hc_gallery :=  ;
63915: LD_ADDR_OWVAR 33
63919: PUSH
63920: LD_STRING 
63922: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63923: LD_ADDR_OWVAR 31
63927: PUSH
63928: LD_INT 0
63930: PPUSH
63931: LD_INT 3
63933: PPUSH
63934: CALL_OW 12
63938: PUSH
63939: LD_INT 0
63941: PPUSH
63942: LD_INT 3
63944: PPUSH
63945: CALL_OW 12
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: LD_INT 0
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: ST_TO_ADDR
// end ;
63962: LD_VAR 0 1
63966: RET
// export function PrepareApeman ( agressivity ) ; begin
63967: LD_INT 0
63969: PPUSH
// uc_side := 0 ;
63970: LD_ADDR_OWVAR 20
63974: PUSH
63975: LD_INT 0
63977: ST_TO_ADDR
// uc_nation := 0 ;
63978: LD_ADDR_OWVAR 21
63982: PUSH
63983: LD_INT 0
63985: ST_TO_ADDR
// hc_sex := sex_male ;
63986: LD_ADDR_OWVAR 27
63990: PUSH
63991: LD_INT 1
63993: ST_TO_ADDR
// hc_class := class_apeman ;
63994: LD_ADDR_OWVAR 28
63998: PUSH
63999: LD_INT 12
64001: ST_TO_ADDR
// hc_gallery :=  ;
64002: LD_ADDR_OWVAR 33
64006: PUSH
64007: LD_STRING 
64009: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64010: LD_ADDR_OWVAR 35
64014: PUSH
64015: LD_VAR 0 1
64019: NEG
64020: PPUSH
64021: LD_VAR 0 1
64025: PPUSH
64026: CALL_OW 12
64030: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64031: LD_ADDR_OWVAR 31
64035: PUSH
64036: LD_INT 0
64038: PPUSH
64039: LD_INT 3
64041: PPUSH
64042: CALL_OW 12
64046: PUSH
64047: LD_INT 0
64049: PPUSH
64050: LD_INT 3
64052: PPUSH
64053: CALL_OW 12
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: LD_INT 0
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: ST_TO_ADDR
// end ;
64070: LD_VAR 0 2
64074: RET
// export function PrepareTiger ( agressivity ) ; begin
64075: LD_INT 0
64077: PPUSH
// uc_side := 0 ;
64078: LD_ADDR_OWVAR 20
64082: PUSH
64083: LD_INT 0
64085: ST_TO_ADDR
// uc_nation := 0 ;
64086: LD_ADDR_OWVAR 21
64090: PUSH
64091: LD_INT 0
64093: ST_TO_ADDR
// hc_class := class_tiger ;
64094: LD_ADDR_OWVAR 28
64098: PUSH
64099: LD_INT 14
64101: ST_TO_ADDR
// hc_gallery :=  ;
64102: LD_ADDR_OWVAR 33
64106: PUSH
64107: LD_STRING 
64109: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64110: LD_ADDR_OWVAR 35
64114: PUSH
64115: LD_VAR 0 1
64119: NEG
64120: PPUSH
64121: LD_VAR 0 1
64125: PPUSH
64126: CALL_OW 12
64130: ST_TO_ADDR
// end ;
64131: LD_VAR 0 2
64135: RET
// export function PrepareEnchidna ( ) ; begin
64136: LD_INT 0
64138: PPUSH
// uc_side := 0 ;
64139: LD_ADDR_OWVAR 20
64143: PUSH
64144: LD_INT 0
64146: ST_TO_ADDR
// uc_nation := 0 ;
64147: LD_ADDR_OWVAR 21
64151: PUSH
64152: LD_INT 0
64154: ST_TO_ADDR
// hc_class := class_baggie ;
64155: LD_ADDR_OWVAR 28
64159: PUSH
64160: LD_INT 13
64162: ST_TO_ADDR
// hc_gallery :=  ;
64163: LD_ADDR_OWVAR 33
64167: PUSH
64168: LD_STRING 
64170: ST_TO_ADDR
// end ;
64171: LD_VAR 0 1
64175: RET
// export function PrepareFrog ( ) ; begin
64176: LD_INT 0
64178: PPUSH
// uc_side := 0 ;
64179: LD_ADDR_OWVAR 20
64183: PUSH
64184: LD_INT 0
64186: ST_TO_ADDR
// uc_nation := 0 ;
64187: LD_ADDR_OWVAR 21
64191: PUSH
64192: LD_INT 0
64194: ST_TO_ADDR
// hc_class := class_frog ;
64195: LD_ADDR_OWVAR 28
64199: PUSH
64200: LD_INT 19
64202: ST_TO_ADDR
// hc_gallery :=  ;
64203: LD_ADDR_OWVAR 33
64207: PUSH
64208: LD_STRING 
64210: ST_TO_ADDR
// end ;
64211: LD_VAR 0 1
64215: RET
// export function PrepareFish ( ) ; begin
64216: LD_INT 0
64218: PPUSH
// uc_side := 0 ;
64219: LD_ADDR_OWVAR 20
64223: PUSH
64224: LD_INT 0
64226: ST_TO_ADDR
// uc_nation := 0 ;
64227: LD_ADDR_OWVAR 21
64231: PUSH
64232: LD_INT 0
64234: ST_TO_ADDR
// hc_class := class_fish ;
64235: LD_ADDR_OWVAR 28
64239: PUSH
64240: LD_INT 20
64242: ST_TO_ADDR
// hc_gallery :=  ;
64243: LD_ADDR_OWVAR 33
64247: PUSH
64248: LD_STRING 
64250: ST_TO_ADDR
// end ;
64251: LD_VAR 0 1
64255: RET
// export function PrepareBird ( ) ; begin
64256: LD_INT 0
64258: PPUSH
// uc_side := 0 ;
64259: LD_ADDR_OWVAR 20
64263: PUSH
64264: LD_INT 0
64266: ST_TO_ADDR
// uc_nation := 0 ;
64267: LD_ADDR_OWVAR 21
64271: PUSH
64272: LD_INT 0
64274: ST_TO_ADDR
// hc_class := class_phororhacos ;
64275: LD_ADDR_OWVAR 28
64279: PUSH
64280: LD_INT 18
64282: ST_TO_ADDR
// hc_gallery :=  ;
64283: LD_ADDR_OWVAR 33
64287: PUSH
64288: LD_STRING 
64290: ST_TO_ADDR
// end ;
64291: LD_VAR 0 1
64295: RET
// export function PrepareHorse ( ) ; begin
64296: LD_INT 0
64298: PPUSH
// uc_side := 0 ;
64299: LD_ADDR_OWVAR 20
64303: PUSH
64304: LD_INT 0
64306: ST_TO_ADDR
// uc_nation := 0 ;
64307: LD_ADDR_OWVAR 21
64311: PUSH
64312: LD_INT 0
64314: ST_TO_ADDR
// hc_class := class_horse ;
64315: LD_ADDR_OWVAR 28
64319: PUSH
64320: LD_INT 21
64322: ST_TO_ADDR
// hc_gallery :=  ;
64323: LD_ADDR_OWVAR 33
64327: PUSH
64328: LD_STRING 
64330: ST_TO_ADDR
// end ;
64331: LD_VAR 0 1
64335: RET
// export function PrepareMastodont ( ) ; begin
64336: LD_INT 0
64338: PPUSH
// uc_side := 0 ;
64339: LD_ADDR_OWVAR 20
64343: PUSH
64344: LD_INT 0
64346: ST_TO_ADDR
// uc_nation := 0 ;
64347: LD_ADDR_OWVAR 21
64351: PUSH
64352: LD_INT 0
64354: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64355: LD_ADDR_OWVAR 37
64359: PUSH
64360: LD_INT 31
64362: ST_TO_ADDR
// vc_control := control_rider ;
64363: LD_ADDR_OWVAR 38
64367: PUSH
64368: LD_INT 4
64370: ST_TO_ADDR
// end ;
64371: LD_VAR 0 1
64375: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64376: LD_INT 0
64378: PPUSH
64379: PPUSH
64380: PPUSH
// uc_side = 0 ;
64381: LD_ADDR_OWVAR 20
64385: PUSH
64386: LD_INT 0
64388: ST_TO_ADDR
// uc_nation = 0 ;
64389: LD_ADDR_OWVAR 21
64393: PUSH
64394: LD_INT 0
64396: ST_TO_ADDR
// InitHc_All ( ) ;
64397: CALL_OW 584
// InitVc ;
64401: CALL_OW 20
// if mastodonts then
64405: LD_VAR 0 6
64409: IFFALSE 64476
// for i = 1 to mastodonts do
64411: LD_ADDR_VAR 0 11
64415: PUSH
64416: DOUBLE
64417: LD_INT 1
64419: DEC
64420: ST_TO_ADDR
64421: LD_VAR 0 6
64425: PUSH
64426: FOR_TO
64427: IFFALSE 64474
// begin vc_chassis := 31 ;
64429: LD_ADDR_OWVAR 37
64433: PUSH
64434: LD_INT 31
64436: ST_TO_ADDR
// vc_control := control_rider ;
64437: LD_ADDR_OWVAR 38
64441: PUSH
64442: LD_INT 4
64444: ST_TO_ADDR
// animal := CreateVehicle ;
64445: LD_ADDR_VAR 0 12
64449: PUSH
64450: CALL_OW 45
64454: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64455: LD_VAR 0 12
64459: PPUSH
64460: LD_VAR 0 8
64464: PPUSH
64465: LD_INT 0
64467: PPUSH
64468: CALL 66611 0 3
// end ;
64472: GO 64426
64474: POP
64475: POP
// if horses then
64476: LD_VAR 0 5
64480: IFFALSE 64547
// for i = 1 to horses do
64482: LD_ADDR_VAR 0 11
64486: PUSH
64487: DOUBLE
64488: LD_INT 1
64490: DEC
64491: ST_TO_ADDR
64492: LD_VAR 0 5
64496: PUSH
64497: FOR_TO
64498: IFFALSE 64545
// begin hc_class := 21 ;
64500: LD_ADDR_OWVAR 28
64504: PUSH
64505: LD_INT 21
64507: ST_TO_ADDR
// hc_gallery :=  ;
64508: LD_ADDR_OWVAR 33
64512: PUSH
64513: LD_STRING 
64515: ST_TO_ADDR
// animal := CreateHuman ;
64516: LD_ADDR_VAR 0 12
64520: PUSH
64521: CALL_OW 44
64525: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64526: LD_VAR 0 12
64530: PPUSH
64531: LD_VAR 0 8
64535: PPUSH
64536: LD_INT 0
64538: PPUSH
64539: CALL 66611 0 3
// end ;
64543: GO 64497
64545: POP
64546: POP
// if birds then
64547: LD_VAR 0 1
64551: IFFALSE 64618
// for i = 1 to birds do
64553: LD_ADDR_VAR 0 11
64557: PUSH
64558: DOUBLE
64559: LD_INT 1
64561: DEC
64562: ST_TO_ADDR
64563: LD_VAR 0 1
64567: PUSH
64568: FOR_TO
64569: IFFALSE 64616
// begin hc_class = 18 ;
64571: LD_ADDR_OWVAR 28
64575: PUSH
64576: LD_INT 18
64578: ST_TO_ADDR
// hc_gallery =  ;
64579: LD_ADDR_OWVAR 33
64583: PUSH
64584: LD_STRING 
64586: ST_TO_ADDR
// animal := CreateHuman ;
64587: LD_ADDR_VAR 0 12
64591: PUSH
64592: CALL_OW 44
64596: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64597: LD_VAR 0 12
64601: PPUSH
64602: LD_VAR 0 8
64606: PPUSH
64607: LD_INT 0
64609: PPUSH
64610: CALL 66611 0 3
// end ;
64614: GO 64568
64616: POP
64617: POP
// if tigers then
64618: LD_VAR 0 2
64622: IFFALSE 64706
// for i = 1 to tigers do
64624: LD_ADDR_VAR 0 11
64628: PUSH
64629: DOUBLE
64630: LD_INT 1
64632: DEC
64633: ST_TO_ADDR
64634: LD_VAR 0 2
64638: PUSH
64639: FOR_TO
64640: IFFALSE 64704
// begin hc_class = class_tiger ;
64642: LD_ADDR_OWVAR 28
64646: PUSH
64647: LD_INT 14
64649: ST_TO_ADDR
// hc_gallery =  ;
64650: LD_ADDR_OWVAR 33
64654: PUSH
64655: LD_STRING 
64657: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64658: LD_ADDR_OWVAR 35
64662: PUSH
64663: LD_INT 7
64665: NEG
64666: PPUSH
64667: LD_INT 7
64669: PPUSH
64670: CALL_OW 12
64674: ST_TO_ADDR
// animal := CreateHuman ;
64675: LD_ADDR_VAR 0 12
64679: PUSH
64680: CALL_OW 44
64684: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64685: LD_VAR 0 12
64689: PPUSH
64690: LD_VAR 0 8
64694: PPUSH
64695: LD_INT 0
64697: PPUSH
64698: CALL 66611 0 3
// end ;
64702: GO 64639
64704: POP
64705: POP
// if apemans then
64706: LD_VAR 0 3
64710: IFFALSE 64833
// for i = 1 to apemans do
64712: LD_ADDR_VAR 0 11
64716: PUSH
64717: DOUBLE
64718: LD_INT 1
64720: DEC
64721: ST_TO_ADDR
64722: LD_VAR 0 3
64726: PUSH
64727: FOR_TO
64728: IFFALSE 64831
// begin hc_class = class_apeman ;
64730: LD_ADDR_OWVAR 28
64734: PUSH
64735: LD_INT 12
64737: ST_TO_ADDR
// hc_gallery =  ;
64738: LD_ADDR_OWVAR 33
64742: PUSH
64743: LD_STRING 
64745: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64746: LD_ADDR_OWVAR 35
64750: PUSH
64751: LD_INT 2
64753: NEG
64754: PPUSH
64755: LD_INT 2
64757: PPUSH
64758: CALL_OW 12
64762: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64763: LD_ADDR_OWVAR 31
64767: PUSH
64768: LD_INT 1
64770: PPUSH
64771: LD_INT 3
64773: PPUSH
64774: CALL_OW 12
64778: PUSH
64779: LD_INT 1
64781: PPUSH
64782: LD_INT 3
64784: PPUSH
64785: CALL_OW 12
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: LD_INT 0
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: ST_TO_ADDR
// animal := CreateHuman ;
64802: LD_ADDR_VAR 0 12
64806: PUSH
64807: CALL_OW 44
64811: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64812: LD_VAR 0 12
64816: PPUSH
64817: LD_VAR 0 8
64821: PPUSH
64822: LD_INT 0
64824: PPUSH
64825: CALL 66611 0 3
// end ;
64829: GO 64727
64831: POP
64832: POP
// if enchidnas then
64833: LD_VAR 0 4
64837: IFFALSE 64904
// for i = 1 to enchidnas do
64839: LD_ADDR_VAR 0 11
64843: PUSH
64844: DOUBLE
64845: LD_INT 1
64847: DEC
64848: ST_TO_ADDR
64849: LD_VAR 0 4
64853: PUSH
64854: FOR_TO
64855: IFFALSE 64902
// begin hc_class = 13 ;
64857: LD_ADDR_OWVAR 28
64861: PUSH
64862: LD_INT 13
64864: ST_TO_ADDR
// hc_gallery =  ;
64865: LD_ADDR_OWVAR 33
64869: PUSH
64870: LD_STRING 
64872: ST_TO_ADDR
// animal := CreateHuman ;
64873: LD_ADDR_VAR 0 12
64877: PUSH
64878: CALL_OW 44
64882: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64883: LD_VAR 0 12
64887: PPUSH
64888: LD_VAR 0 8
64892: PPUSH
64893: LD_INT 0
64895: PPUSH
64896: CALL 66611 0 3
// end ;
64900: GO 64854
64902: POP
64903: POP
// if fishes then
64904: LD_VAR 0 7
64908: IFFALSE 64975
// for i = 1 to fishes do
64910: LD_ADDR_VAR 0 11
64914: PUSH
64915: DOUBLE
64916: LD_INT 1
64918: DEC
64919: ST_TO_ADDR
64920: LD_VAR 0 7
64924: PUSH
64925: FOR_TO
64926: IFFALSE 64973
// begin hc_class = 20 ;
64928: LD_ADDR_OWVAR 28
64932: PUSH
64933: LD_INT 20
64935: ST_TO_ADDR
// hc_gallery =  ;
64936: LD_ADDR_OWVAR 33
64940: PUSH
64941: LD_STRING 
64943: ST_TO_ADDR
// animal := CreateHuman ;
64944: LD_ADDR_VAR 0 12
64948: PUSH
64949: CALL_OW 44
64953: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64954: LD_VAR 0 12
64958: PPUSH
64959: LD_VAR 0 9
64963: PPUSH
64964: LD_INT 0
64966: PPUSH
64967: CALL 66611 0 3
// end ;
64971: GO 64925
64973: POP
64974: POP
// end ;
64975: LD_VAR 0 10
64979: RET
// export function WantHeal ( sci , unit ) ; begin
64980: LD_INT 0
64982: PPUSH
// if GetTaskList ( sci ) > 0 then
64983: LD_VAR 0 1
64987: PPUSH
64988: CALL_OW 437
64992: PUSH
64993: LD_INT 0
64995: GREATER
64996: IFFALSE 65066
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64998: LD_VAR 0 1
65002: PPUSH
65003: CALL_OW 437
65007: PUSH
65008: LD_INT 1
65010: ARRAY
65011: PUSH
65012: LD_INT 1
65014: ARRAY
65015: PUSH
65016: LD_STRING l
65018: EQUAL
65019: PUSH
65020: LD_VAR 0 1
65024: PPUSH
65025: CALL_OW 437
65029: PUSH
65030: LD_INT 1
65032: ARRAY
65033: PUSH
65034: LD_INT 4
65036: ARRAY
65037: PUSH
65038: LD_VAR 0 2
65042: EQUAL
65043: AND
65044: IFFALSE 65056
// result := true else
65046: LD_ADDR_VAR 0 3
65050: PUSH
65051: LD_INT 1
65053: ST_TO_ADDR
65054: GO 65064
// result := false ;
65056: LD_ADDR_VAR 0 3
65060: PUSH
65061: LD_INT 0
65063: ST_TO_ADDR
// end else
65064: GO 65074
// result := false ;
65066: LD_ADDR_VAR 0 3
65070: PUSH
65071: LD_INT 0
65073: ST_TO_ADDR
// end ;
65074: LD_VAR 0 3
65078: RET
// export function HealTarget ( sci ) ; begin
65079: LD_INT 0
65081: PPUSH
// if not sci then
65082: LD_VAR 0 1
65086: NOT
65087: IFFALSE 65091
// exit ;
65089: GO 65156
// result := 0 ;
65091: LD_ADDR_VAR 0 2
65095: PUSH
65096: LD_INT 0
65098: ST_TO_ADDR
// if GetTaskList ( sci ) then
65099: LD_VAR 0 1
65103: PPUSH
65104: CALL_OW 437
65108: IFFALSE 65156
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65110: LD_VAR 0 1
65114: PPUSH
65115: CALL_OW 437
65119: PUSH
65120: LD_INT 1
65122: ARRAY
65123: PUSH
65124: LD_INT 1
65126: ARRAY
65127: PUSH
65128: LD_STRING l
65130: EQUAL
65131: IFFALSE 65156
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65133: LD_ADDR_VAR 0 2
65137: PUSH
65138: LD_VAR 0 1
65142: PPUSH
65143: CALL_OW 437
65147: PUSH
65148: LD_INT 1
65150: ARRAY
65151: PUSH
65152: LD_INT 4
65154: ARRAY
65155: ST_TO_ADDR
// end ;
65156: LD_VAR 0 2
65160: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65161: LD_INT 0
65163: PPUSH
65164: PPUSH
65165: PPUSH
65166: PPUSH
// if not base_units then
65167: LD_VAR 0 1
65171: NOT
65172: IFFALSE 65176
// exit ;
65174: GO 65263
// result := false ;
65176: LD_ADDR_VAR 0 2
65180: PUSH
65181: LD_INT 0
65183: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65184: LD_ADDR_VAR 0 5
65188: PUSH
65189: LD_VAR 0 1
65193: PPUSH
65194: LD_INT 21
65196: PUSH
65197: LD_INT 3
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PPUSH
65204: CALL_OW 72
65208: ST_TO_ADDR
// if not tmp then
65209: LD_VAR 0 5
65213: NOT
65214: IFFALSE 65218
// exit ;
65216: GO 65263
// for i in tmp do
65218: LD_ADDR_VAR 0 3
65222: PUSH
65223: LD_VAR 0 5
65227: PUSH
65228: FOR_IN
65229: IFFALSE 65261
// begin result := EnemyInRange ( i , 22 ) ;
65231: LD_ADDR_VAR 0 2
65235: PUSH
65236: LD_VAR 0 3
65240: PPUSH
65241: LD_INT 22
65243: PPUSH
65244: CALL 62876 0 2
65248: ST_TO_ADDR
// if result then
65249: LD_VAR 0 2
65253: IFFALSE 65259
// exit ;
65255: POP
65256: POP
65257: GO 65263
// end ;
65259: GO 65228
65261: POP
65262: POP
// end ;
65263: LD_VAR 0 2
65267: RET
// export function FilterByTag ( units , tag ) ; begin
65268: LD_INT 0
65270: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65271: LD_ADDR_VAR 0 3
65275: PUSH
65276: LD_VAR 0 1
65280: PPUSH
65281: LD_INT 120
65283: PUSH
65284: LD_VAR 0 2
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PPUSH
65293: CALL_OW 72
65297: ST_TO_ADDR
// end ;
65298: LD_VAR 0 3
65302: RET
// export function IsDriver ( un ) ; begin
65303: LD_INT 0
65305: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65306: LD_ADDR_VAR 0 2
65310: PUSH
65311: LD_VAR 0 1
65315: PUSH
65316: LD_INT 55
65318: PUSH
65319: EMPTY
65320: LIST
65321: PPUSH
65322: CALL_OW 69
65326: IN
65327: ST_TO_ADDR
// end ;
65328: LD_VAR 0 2
65332: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65333: LD_INT 0
65335: PPUSH
65336: PPUSH
// list := [ ] ;
65337: LD_ADDR_VAR 0 5
65341: PUSH
65342: EMPTY
65343: ST_TO_ADDR
// case d of 0 :
65344: LD_VAR 0 3
65348: PUSH
65349: LD_INT 0
65351: DOUBLE
65352: EQUAL
65353: IFTRUE 65357
65355: GO 65490
65357: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65358: LD_ADDR_VAR 0 5
65362: PUSH
65363: LD_VAR 0 1
65367: PUSH
65368: LD_INT 4
65370: MINUS
65371: PUSH
65372: LD_VAR 0 2
65376: PUSH
65377: LD_INT 4
65379: MINUS
65380: PUSH
65381: LD_INT 2
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: LIST
65388: PUSH
65389: LD_VAR 0 1
65393: PUSH
65394: LD_INT 3
65396: MINUS
65397: PUSH
65398: LD_VAR 0 2
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: LIST
65410: PUSH
65411: LD_VAR 0 1
65415: PUSH
65416: LD_INT 4
65418: PLUS
65419: PUSH
65420: LD_VAR 0 2
65424: PUSH
65425: LD_INT 4
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: LIST
65432: PUSH
65433: LD_VAR 0 1
65437: PUSH
65438: LD_INT 3
65440: PLUS
65441: PUSH
65442: LD_VAR 0 2
65446: PUSH
65447: LD_INT 3
65449: PLUS
65450: PUSH
65451: LD_INT 5
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: LIST
65458: PUSH
65459: LD_VAR 0 1
65463: PUSH
65464: LD_VAR 0 2
65468: PUSH
65469: LD_INT 4
65471: PLUS
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: LIST
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: ST_TO_ADDR
// end ; 1 :
65488: GO 66188
65490: LD_INT 1
65492: DOUBLE
65493: EQUAL
65494: IFTRUE 65498
65496: GO 65631
65498: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65499: LD_ADDR_VAR 0 5
65503: PUSH
65504: LD_VAR 0 1
65508: PUSH
65509: LD_VAR 0 2
65513: PUSH
65514: LD_INT 4
65516: MINUS
65517: PUSH
65518: LD_INT 3
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: LIST
65525: PUSH
65526: LD_VAR 0 1
65530: PUSH
65531: LD_INT 3
65533: MINUS
65534: PUSH
65535: LD_VAR 0 2
65539: PUSH
65540: LD_INT 3
65542: MINUS
65543: PUSH
65544: LD_INT 2
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: LIST
65551: PUSH
65552: LD_VAR 0 1
65556: PUSH
65557: LD_INT 4
65559: MINUS
65560: PUSH
65561: LD_VAR 0 2
65565: PUSH
65566: LD_INT 1
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: LIST
65573: PUSH
65574: LD_VAR 0 1
65578: PUSH
65579: LD_VAR 0 2
65583: PUSH
65584: LD_INT 3
65586: PLUS
65587: PUSH
65588: LD_INT 0
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: LIST
65595: PUSH
65596: LD_VAR 0 1
65600: PUSH
65601: LD_INT 4
65603: PLUS
65604: PUSH
65605: LD_VAR 0 2
65609: PUSH
65610: LD_INT 4
65612: PLUS
65613: PUSH
65614: LD_INT 5
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: LIST
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: ST_TO_ADDR
// end ; 2 :
65629: GO 66188
65631: LD_INT 2
65633: DOUBLE
65634: EQUAL
65635: IFTRUE 65639
65637: GO 65768
65639: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65640: LD_ADDR_VAR 0 5
65644: PUSH
65645: LD_VAR 0 1
65649: PUSH
65650: LD_VAR 0 2
65654: PUSH
65655: LD_INT 3
65657: MINUS
65658: PUSH
65659: LD_INT 3
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: LIST
65666: PUSH
65667: LD_VAR 0 1
65671: PUSH
65672: LD_INT 4
65674: PLUS
65675: PUSH
65676: LD_VAR 0 2
65680: PUSH
65681: LD_INT 4
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: LIST
65688: PUSH
65689: LD_VAR 0 1
65693: PUSH
65694: LD_VAR 0 2
65698: PUSH
65699: LD_INT 4
65701: PLUS
65702: PUSH
65703: LD_INT 0
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: LIST
65710: PUSH
65711: LD_VAR 0 1
65715: PUSH
65716: LD_INT 3
65718: MINUS
65719: PUSH
65720: LD_VAR 0 2
65724: PUSH
65725: LD_INT 1
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: LIST
65732: PUSH
65733: LD_VAR 0 1
65737: PUSH
65738: LD_INT 4
65740: MINUS
65741: PUSH
65742: LD_VAR 0 2
65746: PUSH
65747: LD_INT 4
65749: MINUS
65750: PUSH
65751: LD_INT 2
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: LIST
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: ST_TO_ADDR
// end ; 3 :
65766: GO 66188
65768: LD_INT 3
65770: DOUBLE
65771: EQUAL
65772: IFTRUE 65776
65774: GO 65909
65776: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65777: LD_ADDR_VAR 0 5
65781: PUSH
65782: LD_VAR 0 1
65786: PUSH
65787: LD_INT 3
65789: PLUS
65790: PUSH
65791: LD_VAR 0 2
65795: PUSH
65796: LD_INT 4
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: LIST
65803: PUSH
65804: LD_VAR 0 1
65808: PUSH
65809: LD_INT 4
65811: PLUS
65812: PUSH
65813: LD_VAR 0 2
65817: PUSH
65818: LD_INT 4
65820: PLUS
65821: PUSH
65822: LD_INT 5
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: LIST
65829: PUSH
65830: LD_VAR 0 1
65834: PUSH
65835: LD_INT 4
65837: MINUS
65838: PUSH
65839: LD_VAR 0 2
65843: PUSH
65844: LD_INT 1
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: LIST
65851: PUSH
65852: LD_VAR 0 1
65856: PUSH
65857: LD_VAR 0 2
65861: PUSH
65862: LD_INT 4
65864: MINUS
65865: PUSH
65866: LD_INT 3
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: LIST
65873: PUSH
65874: LD_VAR 0 1
65878: PUSH
65879: LD_INT 3
65881: MINUS
65882: PUSH
65883: LD_VAR 0 2
65887: PUSH
65888: LD_INT 3
65890: MINUS
65891: PUSH
65892: LD_INT 2
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: LIST
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: ST_TO_ADDR
// end ; 4 :
65907: GO 66188
65909: LD_INT 4
65911: DOUBLE
65912: EQUAL
65913: IFTRUE 65917
65915: GO 66050
65917: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65918: LD_ADDR_VAR 0 5
65922: PUSH
65923: LD_VAR 0 1
65927: PUSH
65928: LD_VAR 0 2
65932: PUSH
65933: LD_INT 4
65935: PLUS
65936: PUSH
65937: LD_INT 0
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: LIST
65944: PUSH
65945: LD_VAR 0 1
65949: PUSH
65950: LD_INT 3
65952: PLUS
65953: PUSH
65954: LD_VAR 0 2
65958: PUSH
65959: LD_INT 3
65961: PLUS
65962: PUSH
65963: LD_INT 5
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: LIST
65970: PUSH
65971: LD_VAR 0 1
65975: PUSH
65976: LD_INT 4
65978: PLUS
65979: PUSH
65980: LD_VAR 0 2
65984: PUSH
65985: LD_INT 4
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: LIST
65992: PUSH
65993: LD_VAR 0 1
65997: PUSH
65998: LD_VAR 0 2
66002: PUSH
66003: LD_INT 3
66005: MINUS
66006: PUSH
66007: LD_INT 3
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: LIST
66014: PUSH
66015: LD_VAR 0 1
66019: PUSH
66020: LD_INT 4
66022: MINUS
66023: PUSH
66024: LD_VAR 0 2
66028: PUSH
66029: LD_INT 4
66031: MINUS
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: LIST
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: ST_TO_ADDR
// end ; 5 :
66048: GO 66188
66050: LD_INT 5
66052: DOUBLE
66053: EQUAL
66054: IFTRUE 66058
66056: GO 66187
66058: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66059: LD_ADDR_VAR 0 5
66063: PUSH
66064: LD_VAR 0 1
66068: PUSH
66069: LD_INT 4
66071: MINUS
66072: PUSH
66073: LD_VAR 0 2
66077: PUSH
66078: LD_INT 1
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: LIST
66085: PUSH
66086: LD_VAR 0 1
66090: PUSH
66091: LD_VAR 0 2
66095: PUSH
66096: LD_INT 4
66098: MINUS
66099: PUSH
66100: LD_INT 3
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: LIST
66107: PUSH
66108: LD_VAR 0 1
66112: PUSH
66113: LD_INT 4
66115: PLUS
66116: PUSH
66117: LD_VAR 0 2
66121: PUSH
66122: LD_INT 4
66124: PLUS
66125: PUSH
66126: LD_INT 5
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: LIST
66133: PUSH
66134: LD_VAR 0 1
66138: PUSH
66139: LD_INT 3
66141: PLUS
66142: PUSH
66143: LD_VAR 0 2
66147: PUSH
66148: LD_INT 4
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: LIST
66155: PUSH
66156: LD_VAR 0 1
66160: PUSH
66161: LD_VAR 0 2
66165: PUSH
66166: LD_INT 3
66168: PLUS
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: LIST
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: ST_TO_ADDR
// end ; end ;
66185: GO 66188
66187: POP
// result := list ;
66188: LD_ADDR_VAR 0 4
66192: PUSH
66193: LD_VAR 0 5
66197: ST_TO_ADDR
// end ;
66198: LD_VAR 0 4
66202: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66203: LD_INT 0
66205: PPUSH
66206: PPUSH
66207: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66208: LD_VAR 0 1
66212: NOT
66213: PUSH
66214: LD_VAR 0 2
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: LD_INT 2
66224: PUSH
66225: LD_INT 3
66227: PUSH
66228: LD_INT 4
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: IN
66237: NOT
66238: OR
66239: IFFALSE 66243
// exit ;
66241: GO 66335
// tmp := [ ] ;
66243: LD_ADDR_VAR 0 5
66247: PUSH
66248: EMPTY
66249: ST_TO_ADDR
// for i in units do
66250: LD_ADDR_VAR 0 4
66254: PUSH
66255: LD_VAR 0 1
66259: PUSH
66260: FOR_IN
66261: IFFALSE 66304
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66263: LD_ADDR_VAR 0 5
66267: PUSH
66268: LD_VAR 0 5
66272: PPUSH
66273: LD_VAR 0 5
66277: PUSH
66278: LD_INT 1
66280: PLUS
66281: PPUSH
66282: LD_VAR 0 4
66286: PPUSH
66287: LD_VAR 0 2
66291: PPUSH
66292: CALL_OW 259
66296: PPUSH
66297: CALL_OW 2
66301: ST_TO_ADDR
66302: GO 66260
66304: POP
66305: POP
// if not tmp then
66306: LD_VAR 0 5
66310: NOT
66311: IFFALSE 66315
// exit ;
66313: GO 66335
// result := SortListByListDesc ( units , tmp ) ;
66315: LD_ADDR_VAR 0 3
66319: PUSH
66320: LD_VAR 0 1
66324: PPUSH
66325: LD_VAR 0 5
66329: PPUSH
66330: CALL_OW 77
66334: ST_TO_ADDR
// end ;
66335: LD_VAR 0 3
66339: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66340: LD_INT 0
66342: PPUSH
66343: PPUSH
66344: PPUSH
// result := false ;
66345: LD_ADDR_VAR 0 3
66349: PUSH
66350: LD_INT 0
66352: ST_TO_ADDR
// x := GetX ( building ) ;
66353: LD_ADDR_VAR 0 4
66357: PUSH
66358: LD_VAR 0 2
66362: PPUSH
66363: CALL_OW 250
66367: ST_TO_ADDR
// y := GetY ( building ) ;
66368: LD_ADDR_VAR 0 5
66372: PUSH
66373: LD_VAR 0 2
66377: PPUSH
66378: CALL_OW 251
66382: ST_TO_ADDR
// if not building or not x or not y then
66383: LD_VAR 0 2
66387: NOT
66388: PUSH
66389: LD_VAR 0 4
66393: NOT
66394: OR
66395: PUSH
66396: LD_VAR 0 5
66400: NOT
66401: OR
66402: IFFALSE 66406
// exit ;
66404: GO 66498
// if GetTaskList ( unit ) then
66406: LD_VAR 0 1
66410: PPUSH
66411: CALL_OW 437
66415: IFFALSE 66498
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66417: LD_STRING e
66419: PUSH
66420: LD_VAR 0 1
66424: PPUSH
66425: CALL_OW 437
66429: PUSH
66430: LD_INT 1
66432: ARRAY
66433: PUSH
66434: LD_INT 1
66436: ARRAY
66437: EQUAL
66438: PUSH
66439: LD_VAR 0 4
66443: PUSH
66444: LD_VAR 0 1
66448: PPUSH
66449: CALL_OW 437
66453: PUSH
66454: LD_INT 1
66456: ARRAY
66457: PUSH
66458: LD_INT 2
66460: ARRAY
66461: EQUAL
66462: AND
66463: PUSH
66464: LD_VAR 0 5
66468: PUSH
66469: LD_VAR 0 1
66473: PPUSH
66474: CALL_OW 437
66478: PUSH
66479: LD_INT 1
66481: ARRAY
66482: PUSH
66483: LD_INT 3
66485: ARRAY
66486: EQUAL
66487: AND
66488: IFFALSE 66498
// result := true end ;
66490: LD_ADDR_VAR 0 3
66494: PUSH
66495: LD_INT 1
66497: ST_TO_ADDR
// end ;
66498: LD_VAR 0 3
66502: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66503: LD_INT 0
66505: PPUSH
// result := false ;
66506: LD_ADDR_VAR 0 4
66510: PUSH
66511: LD_INT 0
66513: ST_TO_ADDR
// if GetTaskList ( unit ) then
66514: LD_VAR 0 1
66518: PPUSH
66519: CALL_OW 437
66523: IFFALSE 66606
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66525: LD_STRING M
66527: PUSH
66528: LD_VAR 0 1
66532: PPUSH
66533: CALL_OW 437
66537: PUSH
66538: LD_INT 1
66540: ARRAY
66541: PUSH
66542: LD_INT 1
66544: ARRAY
66545: EQUAL
66546: PUSH
66547: LD_VAR 0 2
66551: PUSH
66552: LD_VAR 0 1
66556: PPUSH
66557: CALL_OW 437
66561: PUSH
66562: LD_INT 1
66564: ARRAY
66565: PUSH
66566: LD_INT 2
66568: ARRAY
66569: EQUAL
66570: AND
66571: PUSH
66572: LD_VAR 0 3
66576: PUSH
66577: LD_VAR 0 1
66581: PPUSH
66582: CALL_OW 437
66586: PUSH
66587: LD_INT 1
66589: ARRAY
66590: PUSH
66591: LD_INT 3
66593: ARRAY
66594: EQUAL
66595: AND
66596: IFFALSE 66606
// result := true ;
66598: LD_ADDR_VAR 0 4
66602: PUSH
66603: LD_INT 1
66605: ST_TO_ADDR
// end ; end ;
66606: LD_VAR 0 4
66610: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66611: LD_INT 0
66613: PPUSH
66614: PPUSH
66615: PPUSH
66616: PPUSH
// if not unit or not area then
66617: LD_VAR 0 1
66621: NOT
66622: PUSH
66623: LD_VAR 0 2
66627: NOT
66628: OR
66629: IFFALSE 66633
// exit ;
66631: GO 66797
// tmp := AreaToList ( area , i ) ;
66633: LD_ADDR_VAR 0 6
66637: PUSH
66638: LD_VAR 0 2
66642: PPUSH
66643: LD_VAR 0 5
66647: PPUSH
66648: CALL_OW 517
66652: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66653: LD_ADDR_VAR 0 5
66657: PUSH
66658: DOUBLE
66659: LD_INT 1
66661: DEC
66662: ST_TO_ADDR
66663: LD_VAR 0 6
66667: PUSH
66668: LD_INT 1
66670: ARRAY
66671: PUSH
66672: FOR_TO
66673: IFFALSE 66795
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66675: LD_ADDR_VAR 0 7
66679: PUSH
66680: LD_VAR 0 6
66684: PUSH
66685: LD_INT 1
66687: ARRAY
66688: PUSH
66689: LD_VAR 0 5
66693: ARRAY
66694: PUSH
66695: LD_VAR 0 6
66699: PUSH
66700: LD_INT 2
66702: ARRAY
66703: PUSH
66704: LD_VAR 0 5
66708: ARRAY
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66714: LD_VAR 0 7
66718: PUSH
66719: LD_INT 1
66721: ARRAY
66722: PPUSH
66723: LD_VAR 0 7
66727: PUSH
66728: LD_INT 2
66730: ARRAY
66731: PPUSH
66732: CALL_OW 428
66736: PUSH
66737: LD_INT 0
66739: EQUAL
66740: IFFALSE 66793
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66742: LD_VAR 0 1
66746: PPUSH
66747: LD_VAR 0 7
66751: PUSH
66752: LD_INT 1
66754: ARRAY
66755: PPUSH
66756: LD_VAR 0 7
66760: PUSH
66761: LD_INT 2
66763: ARRAY
66764: PPUSH
66765: LD_VAR 0 3
66769: PPUSH
66770: CALL_OW 48
// result := IsPlaced ( unit ) ;
66774: LD_ADDR_VAR 0 4
66778: PUSH
66779: LD_VAR 0 1
66783: PPUSH
66784: CALL_OW 305
66788: ST_TO_ADDR
// exit ;
66789: POP
66790: POP
66791: GO 66797
// end ; end ;
66793: GO 66672
66795: POP
66796: POP
// end ;
66797: LD_VAR 0 4
66801: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66802: LD_INT 0
66804: PPUSH
66805: PPUSH
66806: PPUSH
// if not side or side > 8 then
66807: LD_VAR 0 1
66811: NOT
66812: PUSH
66813: LD_VAR 0 1
66817: PUSH
66818: LD_INT 8
66820: GREATER
66821: OR
66822: IFFALSE 66826
// exit ;
66824: GO 67013
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66826: LD_ADDR_VAR 0 4
66830: PUSH
66831: LD_INT 22
66833: PUSH
66834: LD_VAR 0 1
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 21
66845: PUSH
66846: LD_INT 3
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PPUSH
66857: CALL_OW 69
66861: ST_TO_ADDR
// if not tmp then
66862: LD_VAR 0 4
66866: NOT
66867: IFFALSE 66871
// exit ;
66869: GO 67013
// enable_addtolog := true ;
66871: LD_ADDR_OWVAR 81
66875: PUSH
66876: LD_INT 1
66878: ST_TO_ADDR
// AddToLog ( [ ) ;
66879: LD_STRING [
66881: PPUSH
66882: CALL_OW 561
// for i in tmp do
66886: LD_ADDR_VAR 0 3
66890: PUSH
66891: LD_VAR 0 4
66895: PUSH
66896: FOR_IN
66897: IFFALSE 67004
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66899: LD_STRING [
66901: PUSH
66902: LD_VAR 0 3
66906: PPUSH
66907: CALL_OW 266
66911: STR
66912: PUSH
66913: LD_STRING , 
66915: STR
66916: PUSH
66917: LD_VAR 0 3
66921: PPUSH
66922: CALL_OW 250
66926: STR
66927: PUSH
66928: LD_STRING , 
66930: STR
66931: PUSH
66932: LD_VAR 0 3
66936: PPUSH
66937: CALL_OW 251
66941: STR
66942: PUSH
66943: LD_STRING , 
66945: STR
66946: PUSH
66947: LD_VAR 0 3
66951: PPUSH
66952: CALL_OW 254
66956: STR
66957: PUSH
66958: LD_STRING , 
66960: STR
66961: PUSH
66962: LD_VAR 0 3
66966: PPUSH
66967: LD_INT 1
66969: PPUSH
66970: CALL_OW 268
66974: STR
66975: PUSH
66976: LD_STRING , 
66978: STR
66979: PUSH
66980: LD_VAR 0 3
66984: PPUSH
66985: LD_INT 2
66987: PPUSH
66988: CALL_OW 268
66992: STR
66993: PUSH
66994: LD_STRING ],
66996: STR
66997: PPUSH
66998: CALL_OW 561
// end ;
67002: GO 66896
67004: POP
67005: POP
// AddToLog ( ]; ) ;
67006: LD_STRING ];
67008: PPUSH
67009: CALL_OW 561
// end ;
67013: LD_VAR 0 2
67017: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67018: LD_INT 0
67020: PPUSH
67021: PPUSH
67022: PPUSH
67023: PPUSH
67024: PPUSH
// if not area or not rate or not max then
67025: LD_VAR 0 1
67029: NOT
67030: PUSH
67031: LD_VAR 0 2
67035: NOT
67036: OR
67037: PUSH
67038: LD_VAR 0 4
67042: NOT
67043: OR
67044: IFFALSE 67048
// exit ;
67046: GO 67237
// while 1 do
67048: LD_INT 1
67050: IFFALSE 67237
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67052: LD_ADDR_VAR 0 9
67056: PUSH
67057: LD_VAR 0 1
67061: PPUSH
67062: LD_INT 1
67064: PPUSH
67065: CALL_OW 287
67069: PUSH
67070: LD_INT 10
67072: MUL
67073: ST_TO_ADDR
// r := rate / 10 ;
67074: LD_ADDR_VAR 0 7
67078: PUSH
67079: LD_VAR 0 2
67083: PUSH
67084: LD_INT 10
67086: DIVREAL
67087: ST_TO_ADDR
// time := 1 1$00 ;
67088: LD_ADDR_VAR 0 8
67092: PUSH
67093: LD_INT 2100
67095: ST_TO_ADDR
// if amount < min then
67096: LD_VAR 0 9
67100: PUSH
67101: LD_VAR 0 3
67105: LESS
67106: IFFALSE 67124
// r := r * 2 else
67108: LD_ADDR_VAR 0 7
67112: PUSH
67113: LD_VAR 0 7
67117: PUSH
67118: LD_INT 2
67120: MUL
67121: ST_TO_ADDR
67122: GO 67150
// if amount > max then
67124: LD_VAR 0 9
67128: PUSH
67129: LD_VAR 0 4
67133: GREATER
67134: IFFALSE 67150
// r := r / 2 ;
67136: LD_ADDR_VAR 0 7
67140: PUSH
67141: LD_VAR 0 7
67145: PUSH
67146: LD_INT 2
67148: DIVREAL
67149: ST_TO_ADDR
// time := time / r ;
67150: LD_ADDR_VAR 0 8
67154: PUSH
67155: LD_VAR 0 8
67159: PUSH
67160: LD_VAR 0 7
67164: DIVREAL
67165: ST_TO_ADDR
// if time < 0 then
67166: LD_VAR 0 8
67170: PUSH
67171: LD_INT 0
67173: LESS
67174: IFFALSE 67191
// time := time * - 1 ;
67176: LD_ADDR_VAR 0 8
67180: PUSH
67181: LD_VAR 0 8
67185: PUSH
67186: LD_INT 1
67188: NEG
67189: MUL
67190: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67191: LD_VAR 0 8
67195: PUSH
67196: LD_INT 35
67198: PPUSH
67199: LD_INT 875
67201: PPUSH
67202: CALL_OW 12
67206: PLUS
67207: PPUSH
67208: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67212: LD_INT 1
67214: PPUSH
67215: LD_INT 5
67217: PPUSH
67218: CALL_OW 12
67222: PPUSH
67223: LD_VAR 0 1
67227: PPUSH
67228: LD_INT 1
67230: PPUSH
67231: CALL_OW 55
// end ;
67235: GO 67048
// end ;
67237: LD_VAR 0 5
67241: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67242: LD_INT 0
67244: PPUSH
67245: PPUSH
67246: PPUSH
67247: PPUSH
67248: PPUSH
67249: PPUSH
67250: PPUSH
67251: PPUSH
// if not turrets or not factories then
67252: LD_VAR 0 1
67256: NOT
67257: PUSH
67258: LD_VAR 0 2
67262: NOT
67263: OR
67264: IFFALSE 67268
// exit ;
67266: GO 67575
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67268: LD_ADDR_VAR 0 10
67272: PUSH
67273: LD_INT 5
67275: PUSH
67276: LD_INT 6
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 2
67285: PUSH
67286: LD_INT 4
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 3
67295: PUSH
67296: LD_INT 5
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 24
67310: PUSH
67311: LD_INT 25
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 23
67320: PUSH
67321: LD_INT 27
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 42
67334: PUSH
67335: LD_INT 43
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 44
67344: PUSH
67345: LD_INT 46
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 45
67354: PUSH
67355: LD_INT 47
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: LIST
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: LIST
67371: ST_TO_ADDR
// result := [ ] ;
67372: LD_ADDR_VAR 0 3
67376: PUSH
67377: EMPTY
67378: ST_TO_ADDR
// for i in turrets do
67379: LD_ADDR_VAR 0 4
67383: PUSH
67384: LD_VAR 0 1
67388: PUSH
67389: FOR_IN
67390: IFFALSE 67573
// begin nat := GetNation ( i ) ;
67392: LD_ADDR_VAR 0 7
67396: PUSH
67397: LD_VAR 0 4
67401: PPUSH
67402: CALL_OW 248
67406: ST_TO_ADDR
// weapon := 0 ;
67407: LD_ADDR_VAR 0 8
67411: PUSH
67412: LD_INT 0
67414: ST_TO_ADDR
// if not nat then
67415: LD_VAR 0 7
67419: NOT
67420: IFFALSE 67424
// continue ;
67422: GO 67389
// for j in list [ nat ] do
67424: LD_ADDR_VAR 0 5
67428: PUSH
67429: LD_VAR 0 10
67433: PUSH
67434: LD_VAR 0 7
67438: ARRAY
67439: PUSH
67440: FOR_IN
67441: IFFALSE 67482
// if GetBWeapon ( i ) = j [ 1 ] then
67443: LD_VAR 0 4
67447: PPUSH
67448: CALL_OW 269
67452: PUSH
67453: LD_VAR 0 5
67457: PUSH
67458: LD_INT 1
67460: ARRAY
67461: EQUAL
67462: IFFALSE 67480
// begin weapon := j [ 2 ] ;
67464: LD_ADDR_VAR 0 8
67468: PUSH
67469: LD_VAR 0 5
67473: PUSH
67474: LD_INT 2
67476: ARRAY
67477: ST_TO_ADDR
// break ;
67478: GO 67482
// end ;
67480: GO 67440
67482: POP
67483: POP
// if not weapon then
67484: LD_VAR 0 8
67488: NOT
67489: IFFALSE 67493
// continue ;
67491: GO 67389
// for k in factories do
67493: LD_ADDR_VAR 0 6
67497: PUSH
67498: LD_VAR 0 2
67502: PUSH
67503: FOR_IN
67504: IFFALSE 67569
// begin weapons := AvailableWeaponList ( k ) ;
67506: LD_ADDR_VAR 0 9
67510: PUSH
67511: LD_VAR 0 6
67515: PPUSH
67516: CALL_OW 478
67520: ST_TO_ADDR
// if not weapons then
67521: LD_VAR 0 9
67525: NOT
67526: IFFALSE 67530
// continue ;
67528: GO 67503
// if weapon in weapons then
67530: LD_VAR 0 8
67534: PUSH
67535: LD_VAR 0 9
67539: IN
67540: IFFALSE 67567
// begin result := [ i , weapon ] ;
67542: LD_ADDR_VAR 0 3
67546: PUSH
67547: LD_VAR 0 4
67551: PUSH
67552: LD_VAR 0 8
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: ST_TO_ADDR
// exit ;
67561: POP
67562: POP
67563: POP
67564: POP
67565: GO 67575
// end ; end ;
67567: GO 67503
67569: POP
67570: POP
// end ;
67571: GO 67389
67573: POP
67574: POP
// end ;
67575: LD_VAR 0 3
67579: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67580: LD_INT 0
67582: PPUSH
// if not side or side > 8 then
67583: LD_VAR 0 3
67587: NOT
67588: PUSH
67589: LD_VAR 0 3
67593: PUSH
67594: LD_INT 8
67596: GREATER
67597: OR
67598: IFFALSE 67602
// exit ;
67600: GO 67661
// if not range then
67602: LD_VAR 0 4
67606: NOT
67607: IFFALSE 67618
// range := - 12 ;
67609: LD_ADDR_VAR 0 4
67613: PUSH
67614: LD_INT 12
67616: NEG
67617: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67618: LD_VAR 0 1
67622: PPUSH
67623: LD_VAR 0 2
67627: PPUSH
67628: LD_VAR 0 3
67632: PPUSH
67633: LD_VAR 0 4
67637: PPUSH
67638: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67642: LD_VAR 0 1
67646: PPUSH
67647: LD_VAR 0 2
67651: PPUSH
67652: LD_VAR 0 3
67656: PPUSH
67657: CALL_OW 331
// end ;
67661: LD_VAR 0 5
67665: RET
// export function Video ( mode ) ; begin
67666: LD_INT 0
67668: PPUSH
// ingame_video = mode ;
67669: LD_ADDR_OWVAR 52
67673: PUSH
67674: LD_VAR 0 1
67678: ST_TO_ADDR
// interface_hidden = mode ;
67679: LD_ADDR_OWVAR 54
67683: PUSH
67684: LD_VAR 0 1
67688: ST_TO_ADDR
// end ;
67689: LD_VAR 0 2
67693: RET
// export function Join ( array , element ) ; begin
67694: LD_INT 0
67696: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67697: LD_ADDR_VAR 0 3
67701: PUSH
67702: LD_VAR 0 1
67706: PPUSH
67707: LD_VAR 0 1
67711: PUSH
67712: LD_INT 1
67714: PLUS
67715: PPUSH
67716: LD_VAR 0 2
67720: PPUSH
67721: CALL_OW 1
67725: ST_TO_ADDR
// end ;
67726: LD_VAR 0 3
67730: RET
// export function JoinUnion ( array , element ) ; begin
67731: LD_INT 0
67733: PPUSH
// result := array union element ;
67734: LD_ADDR_VAR 0 3
67738: PUSH
67739: LD_VAR 0 1
67743: PUSH
67744: LD_VAR 0 2
67748: UNION
67749: ST_TO_ADDR
// end ;
67750: LD_VAR 0 3
67754: RET
// export function GetBehemoths ( side ) ; begin
67755: LD_INT 0
67757: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67758: LD_ADDR_VAR 0 2
67762: PUSH
67763: LD_INT 22
67765: PUSH
67766: LD_VAR 0 1
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 31
67777: PUSH
67778: LD_INT 25
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PPUSH
67789: CALL_OW 69
67793: ST_TO_ADDR
// end ;
67794: LD_VAR 0 2
67798: RET
// export function Shuffle ( array ) ; var i , index ; begin
67799: LD_INT 0
67801: PPUSH
67802: PPUSH
67803: PPUSH
// result := [ ] ;
67804: LD_ADDR_VAR 0 2
67808: PUSH
67809: EMPTY
67810: ST_TO_ADDR
// if not array then
67811: LD_VAR 0 1
67815: NOT
67816: IFFALSE 67820
// exit ;
67818: GO 67919
// Randomize ;
67820: CALL_OW 10
// for i = array downto 1 do
67824: LD_ADDR_VAR 0 3
67828: PUSH
67829: DOUBLE
67830: LD_VAR 0 1
67834: INC
67835: ST_TO_ADDR
67836: LD_INT 1
67838: PUSH
67839: FOR_DOWNTO
67840: IFFALSE 67917
// begin index := rand ( 1 , array ) ;
67842: LD_ADDR_VAR 0 4
67846: PUSH
67847: LD_INT 1
67849: PPUSH
67850: LD_VAR 0 1
67854: PPUSH
67855: CALL_OW 12
67859: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67860: LD_ADDR_VAR 0 2
67864: PUSH
67865: LD_VAR 0 2
67869: PPUSH
67870: LD_VAR 0 2
67874: PUSH
67875: LD_INT 1
67877: PLUS
67878: PPUSH
67879: LD_VAR 0 1
67883: PUSH
67884: LD_VAR 0 4
67888: ARRAY
67889: PPUSH
67890: CALL_OW 2
67894: ST_TO_ADDR
// array := Delete ( array , index ) ;
67895: LD_ADDR_VAR 0 1
67899: PUSH
67900: LD_VAR 0 1
67904: PPUSH
67905: LD_VAR 0 4
67909: PPUSH
67910: CALL_OW 3
67914: ST_TO_ADDR
// end ;
67915: GO 67839
67917: POP
67918: POP
// end ;
67919: LD_VAR 0 2
67923: RET
// export function GetBaseMaterials ( base ) ; begin
67924: LD_INT 0
67926: PPUSH
// result := [ 0 , 0 , 0 ] ;
67927: LD_ADDR_VAR 0 2
67931: PUSH
67932: LD_INT 0
67934: PUSH
67935: LD_INT 0
67937: PUSH
67938: LD_INT 0
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: LIST
67945: ST_TO_ADDR
// if not base then
67946: LD_VAR 0 1
67950: NOT
67951: IFFALSE 67955
// exit ;
67953: GO 68004
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67955: LD_ADDR_VAR 0 2
67959: PUSH
67960: LD_VAR 0 1
67964: PPUSH
67965: LD_INT 1
67967: PPUSH
67968: CALL_OW 275
67972: PUSH
67973: LD_VAR 0 1
67977: PPUSH
67978: LD_INT 2
67980: PPUSH
67981: CALL_OW 275
67985: PUSH
67986: LD_VAR 0 1
67990: PPUSH
67991: LD_INT 3
67993: PPUSH
67994: CALL_OW 275
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: LIST
68003: ST_TO_ADDR
// end ;
68004: LD_VAR 0 2
68008: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68009: LD_INT 0
68011: PPUSH
68012: PPUSH
// result := array ;
68013: LD_ADDR_VAR 0 3
68017: PUSH
68018: LD_VAR 0 1
68022: ST_TO_ADDR
// if size >= result then
68023: LD_VAR 0 2
68027: PUSH
68028: LD_VAR 0 3
68032: GREATEREQUAL
68033: IFFALSE 68037
// exit ;
68035: GO 68087
// if size then
68037: LD_VAR 0 2
68041: IFFALSE 68087
// for i := array downto size do
68043: LD_ADDR_VAR 0 4
68047: PUSH
68048: DOUBLE
68049: LD_VAR 0 1
68053: INC
68054: ST_TO_ADDR
68055: LD_VAR 0 2
68059: PUSH
68060: FOR_DOWNTO
68061: IFFALSE 68085
// result := Delete ( result , result ) ;
68063: LD_ADDR_VAR 0 3
68067: PUSH
68068: LD_VAR 0 3
68072: PPUSH
68073: LD_VAR 0 3
68077: PPUSH
68078: CALL_OW 3
68082: ST_TO_ADDR
68083: GO 68060
68085: POP
68086: POP
// end ;
68087: LD_VAR 0 3
68091: RET
// export function ComExit ( unit ) ; var tmp ; begin
68092: LD_INT 0
68094: PPUSH
68095: PPUSH
// if not IsInUnit ( unit ) then
68096: LD_VAR 0 1
68100: PPUSH
68101: CALL_OW 310
68105: NOT
68106: IFFALSE 68110
// exit ;
68108: GO 68170
// tmp := IsInUnit ( unit ) ;
68110: LD_ADDR_VAR 0 3
68114: PUSH
68115: LD_VAR 0 1
68119: PPUSH
68120: CALL_OW 310
68124: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68125: LD_VAR 0 3
68129: PPUSH
68130: CALL_OW 247
68134: PUSH
68135: LD_INT 2
68137: EQUAL
68138: IFFALSE 68151
// ComExitVehicle ( unit ) else
68140: LD_VAR 0 1
68144: PPUSH
68145: CALL_OW 121
68149: GO 68160
// ComExitBuilding ( unit ) ;
68151: LD_VAR 0 1
68155: PPUSH
68156: CALL_OW 122
// result := tmp ;
68160: LD_ADDR_VAR 0 2
68164: PUSH
68165: LD_VAR 0 3
68169: ST_TO_ADDR
// end ;
68170: LD_VAR 0 2
68174: RET
// export function ComExitAll ( units ) ; var i ; begin
68175: LD_INT 0
68177: PPUSH
68178: PPUSH
// if not units then
68179: LD_VAR 0 1
68183: NOT
68184: IFFALSE 68188
// exit ;
68186: GO 68214
// for i in units do
68188: LD_ADDR_VAR 0 3
68192: PUSH
68193: LD_VAR 0 1
68197: PUSH
68198: FOR_IN
68199: IFFALSE 68212
// ComExit ( i ) ;
68201: LD_VAR 0 3
68205: PPUSH
68206: CALL 68092 0 1
68210: GO 68198
68212: POP
68213: POP
// end ;
68214: LD_VAR 0 2
68218: RET
// export function ResetHc ; begin
68219: LD_INT 0
68221: PPUSH
// InitHc ;
68222: CALL_OW 19
// hc_importance := 0 ;
68226: LD_ADDR_OWVAR 32
68230: PUSH
68231: LD_INT 0
68233: ST_TO_ADDR
// end ;
68234: LD_VAR 0 1
68238: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68239: LD_INT 0
68241: PPUSH
68242: PPUSH
68243: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68244: LD_ADDR_VAR 0 6
68248: PUSH
68249: LD_VAR 0 1
68253: PUSH
68254: LD_VAR 0 3
68258: PLUS
68259: PUSH
68260: LD_INT 2
68262: DIV
68263: ST_TO_ADDR
// if _x < 0 then
68264: LD_VAR 0 6
68268: PUSH
68269: LD_INT 0
68271: LESS
68272: IFFALSE 68289
// _x := _x * - 1 ;
68274: LD_ADDR_VAR 0 6
68278: PUSH
68279: LD_VAR 0 6
68283: PUSH
68284: LD_INT 1
68286: NEG
68287: MUL
68288: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68289: LD_ADDR_VAR 0 7
68293: PUSH
68294: LD_VAR 0 2
68298: PUSH
68299: LD_VAR 0 4
68303: PLUS
68304: PUSH
68305: LD_INT 2
68307: DIV
68308: ST_TO_ADDR
// if _y < 0 then
68309: LD_VAR 0 7
68313: PUSH
68314: LD_INT 0
68316: LESS
68317: IFFALSE 68334
// _y := _y * - 1 ;
68319: LD_ADDR_VAR 0 7
68323: PUSH
68324: LD_VAR 0 7
68328: PUSH
68329: LD_INT 1
68331: NEG
68332: MUL
68333: ST_TO_ADDR
// result := [ _x , _y ] ;
68334: LD_ADDR_VAR 0 5
68338: PUSH
68339: LD_VAR 0 6
68343: PUSH
68344: LD_VAR 0 7
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: ST_TO_ADDR
// end ;
68353: LD_VAR 0 5
68357: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68358: LD_INT 0
68360: PPUSH
68361: PPUSH
68362: PPUSH
68363: PPUSH
// task := GetTaskList ( unit ) ;
68364: LD_ADDR_VAR 0 7
68368: PUSH
68369: LD_VAR 0 1
68373: PPUSH
68374: CALL_OW 437
68378: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68379: LD_VAR 0 7
68383: NOT
68384: PUSH
68385: LD_VAR 0 1
68389: PPUSH
68390: LD_VAR 0 2
68394: PPUSH
68395: CALL_OW 308
68399: NOT
68400: AND
68401: IFFALSE 68405
// exit ;
68403: GO 68523
// if IsInArea ( unit , area ) then
68405: LD_VAR 0 1
68409: PPUSH
68410: LD_VAR 0 2
68414: PPUSH
68415: CALL_OW 308
68419: IFFALSE 68437
// begin ComMoveToArea ( unit , goAway ) ;
68421: LD_VAR 0 1
68425: PPUSH
68426: LD_VAR 0 3
68430: PPUSH
68431: CALL_OW 113
// exit ;
68435: GO 68523
// end ; if task [ 1 ] [ 1 ] <> M then
68437: LD_VAR 0 7
68441: PUSH
68442: LD_INT 1
68444: ARRAY
68445: PUSH
68446: LD_INT 1
68448: ARRAY
68449: PUSH
68450: LD_STRING M
68452: NONEQUAL
68453: IFFALSE 68457
// exit ;
68455: GO 68523
// x := task [ 1 ] [ 2 ] ;
68457: LD_ADDR_VAR 0 5
68461: PUSH
68462: LD_VAR 0 7
68466: PUSH
68467: LD_INT 1
68469: ARRAY
68470: PUSH
68471: LD_INT 2
68473: ARRAY
68474: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68475: LD_ADDR_VAR 0 6
68479: PUSH
68480: LD_VAR 0 7
68484: PUSH
68485: LD_INT 1
68487: ARRAY
68488: PUSH
68489: LD_INT 3
68491: ARRAY
68492: ST_TO_ADDR
// if InArea ( x , y , area ) then
68493: LD_VAR 0 5
68497: PPUSH
68498: LD_VAR 0 6
68502: PPUSH
68503: LD_VAR 0 2
68507: PPUSH
68508: CALL_OW 309
68512: IFFALSE 68523
// ComStop ( unit ) ;
68514: LD_VAR 0 1
68518: PPUSH
68519: CALL_OW 141
// end ;
68523: LD_VAR 0 4
68527: RET
// export function Abs ( value ) ; begin
68528: LD_INT 0
68530: PPUSH
// result := value ;
68531: LD_ADDR_VAR 0 2
68535: PUSH
68536: LD_VAR 0 1
68540: ST_TO_ADDR
// if value < 0 then
68541: LD_VAR 0 1
68545: PUSH
68546: LD_INT 0
68548: LESS
68549: IFFALSE 68566
// result := value * - 1 ;
68551: LD_ADDR_VAR 0 2
68555: PUSH
68556: LD_VAR 0 1
68560: PUSH
68561: LD_INT 1
68563: NEG
68564: MUL
68565: ST_TO_ADDR
// end ;
68566: LD_VAR 0 2
68570: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68571: LD_INT 0
68573: PPUSH
68574: PPUSH
68575: PPUSH
68576: PPUSH
68577: PPUSH
68578: PPUSH
68579: PPUSH
68580: PPUSH
// if not unit or not building then
68581: LD_VAR 0 1
68585: NOT
68586: PUSH
68587: LD_VAR 0 2
68591: NOT
68592: OR
68593: IFFALSE 68597
// exit ;
68595: GO 68823
// x := GetX ( building ) ;
68597: LD_ADDR_VAR 0 4
68601: PUSH
68602: LD_VAR 0 2
68606: PPUSH
68607: CALL_OW 250
68611: ST_TO_ADDR
// y := GetY ( building ) ;
68612: LD_ADDR_VAR 0 6
68616: PUSH
68617: LD_VAR 0 2
68621: PPUSH
68622: CALL_OW 251
68626: ST_TO_ADDR
// d := GetDir ( building ) ;
68627: LD_ADDR_VAR 0 8
68631: PUSH
68632: LD_VAR 0 2
68636: PPUSH
68637: CALL_OW 254
68641: ST_TO_ADDR
// r := 4 ;
68642: LD_ADDR_VAR 0 9
68646: PUSH
68647: LD_INT 4
68649: ST_TO_ADDR
// for i := 1 to 5 do
68650: LD_ADDR_VAR 0 10
68654: PUSH
68655: DOUBLE
68656: LD_INT 1
68658: DEC
68659: ST_TO_ADDR
68660: LD_INT 5
68662: PUSH
68663: FOR_TO
68664: IFFALSE 68821
// begin _x := ShiftX ( x , d , r + i ) ;
68666: LD_ADDR_VAR 0 5
68670: PUSH
68671: LD_VAR 0 4
68675: PPUSH
68676: LD_VAR 0 8
68680: PPUSH
68681: LD_VAR 0 9
68685: PUSH
68686: LD_VAR 0 10
68690: PLUS
68691: PPUSH
68692: CALL_OW 272
68696: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68697: LD_ADDR_VAR 0 7
68701: PUSH
68702: LD_VAR 0 6
68706: PPUSH
68707: LD_VAR 0 8
68711: PPUSH
68712: LD_VAR 0 9
68716: PUSH
68717: LD_VAR 0 10
68721: PLUS
68722: PPUSH
68723: CALL_OW 273
68727: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68728: LD_VAR 0 5
68732: PPUSH
68733: LD_VAR 0 7
68737: PPUSH
68738: CALL_OW 488
68742: PUSH
68743: LD_VAR 0 5
68747: PPUSH
68748: LD_VAR 0 7
68752: PPUSH
68753: CALL_OW 428
68757: PPUSH
68758: CALL_OW 247
68762: PUSH
68763: LD_INT 3
68765: PUSH
68766: LD_INT 2
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: IN
68773: NOT
68774: AND
68775: IFFALSE 68819
// begin ComMoveXY ( unit , _x , _y ) ;
68777: LD_VAR 0 1
68781: PPUSH
68782: LD_VAR 0 5
68786: PPUSH
68787: LD_VAR 0 7
68791: PPUSH
68792: CALL_OW 111
// result := [ _x , _y ] ;
68796: LD_ADDR_VAR 0 3
68800: PUSH
68801: LD_VAR 0 5
68805: PUSH
68806: LD_VAR 0 7
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: ST_TO_ADDR
// exit ;
68815: POP
68816: POP
68817: GO 68823
// end ; end ;
68819: GO 68663
68821: POP
68822: POP
// end ;
68823: LD_VAR 0 3
68827: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68828: LD_INT 0
68830: PPUSH
68831: PPUSH
68832: PPUSH
// result := 0 ;
68833: LD_ADDR_VAR 0 3
68837: PUSH
68838: LD_INT 0
68840: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68841: LD_VAR 0 1
68845: PUSH
68846: LD_INT 0
68848: LESS
68849: PUSH
68850: LD_VAR 0 1
68854: PUSH
68855: LD_INT 8
68857: GREATER
68858: OR
68859: PUSH
68860: LD_VAR 0 2
68864: PUSH
68865: LD_INT 0
68867: LESS
68868: OR
68869: PUSH
68870: LD_VAR 0 2
68874: PUSH
68875: LD_INT 8
68877: GREATER
68878: OR
68879: IFFALSE 68883
// exit ;
68881: GO 68958
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68883: LD_ADDR_VAR 0 4
68887: PUSH
68888: LD_INT 22
68890: PUSH
68891: LD_VAR 0 2
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PPUSH
68900: CALL_OW 69
68904: PUSH
68905: FOR_IN
68906: IFFALSE 68956
// begin un := UnitShoot ( i ) ;
68908: LD_ADDR_VAR 0 5
68912: PUSH
68913: LD_VAR 0 4
68917: PPUSH
68918: CALL_OW 504
68922: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68923: LD_VAR 0 5
68927: PPUSH
68928: CALL_OW 255
68932: PUSH
68933: LD_VAR 0 1
68937: EQUAL
68938: IFFALSE 68954
// begin result := un ;
68940: LD_ADDR_VAR 0 3
68944: PUSH
68945: LD_VAR 0 5
68949: ST_TO_ADDR
// exit ;
68950: POP
68951: POP
68952: GO 68958
// end ; end ;
68954: GO 68905
68956: POP
68957: POP
// end ;
68958: LD_VAR 0 3
68962: RET
// export function GetCargoBay ( units ) ; begin
68963: LD_INT 0
68965: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68966: LD_ADDR_VAR 0 2
68970: PUSH
68971: LD_VAR 0 1
68975: PPUSH
68976: LD_INT 2
68978: PUSH
68979: LD_INT 34
68981: PUSH
68982: LD_INT 12
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 34
68991: PUSH
68992: LD_INT 51
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 34
69001: PUSH
69002: LD_INT 32
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 34
69011: PUSH
69012: LD_INT 89
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: PPUSH
69026: CALL_OW 72
69030: ST_TO_ADDR
// end ;
69031: LD_VAR 0 2
69035: RET
// export function Negate ( value ) ; begin
69036: LD_INT 0
69038: PPUSH
// result := not value ;
69039: LD_ADDR_VAR 0 2
69043: PUSH
69044: LD_VAR 0 1
69048: NOT
69049: ST_TO_ADDR
// end ;
69050: LD_VAR 0 2
69054: RET
// export function Inc ( value ) ; begin
69055: LD_INT 0
69057: PPUSH
// result := value + 1 ;
69058: LD_ADDR_VAR 0 2
69062: PUSH
69063: LD_VAR 0 1
69067: PUSH
69068: LD_INT 1
69070: PLUS
69071: ST_TO_ADDR
// end ;
69072: LD_VAR 0 2
69076: RET
// export function Dec ( value ) ; begin
69077: LD_INT 0
69079: PPUSH
// result := value - 1 ;
69080: LD_ADDR_VAR 0 2
69084: PUSH
69085: LD_VAR 0 1
69089: PUSH
69090: LD_INT 1
69092: MINUS
69093: ST_TO_ADDR
// end ;
69094: LD_VAR 0 2
69098: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69099: LD_INT 0
69101: PPUSH
69102: PPUSH
69103: PPUSH
69104: PPUSH
69105: PPUSH
69106: PPUSH
69107: PPUSH
69108: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69109: LD_VAR 0 1
69113: PPUSH
69114: LD_VAR 0 2
69118: PPUSH
69119: CALL_OW 488
69123: NOT
69124: PUSH
69125: LD_VAR 0 3
69129: PPUSH
69130: LD_VAR 0 4
69134: PPUSH
69135: CALL_OW 488
69139: NOT
69140: OR
69141: IFFALSE 69154
// begin result := - 1 ;
69143: LD_ADDR_VAR 0 5
69147: PUSH
69148: LD_INT 1
69150: NEG
69151: ST_TO_ADDR
// exit ;
69152: GO 69389
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69154: LD_ADDR_VAR 0 12
69158: PUSH
69159: LD_VAR 0 1
69163: PPUSH
69164: LD_VAR 0 2
69168: PPUSH
69169: LD_VAR 0 3
69173: PPUSH
69174: LD_VAR 0 4
69178: PPUSH
69179: CALL 68239 0 4
69183: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69184: LD_ADDR_VAR 0 11
69188: PUSH
69189: LD_VAR 0 1
69193: PPUSH
69194: LD_VAR 0 2
69198: PPUSH
69199: LD_VAR 0 12
69203: PUSH
69204: LD_INT 1
69206: ARRAY
69207: PPUSH
69208: LD_VAR 0 12
69212: PUSH
69213: LD_INT 2
69215: ARRAY
69216: PPUSH
69217: CALL_OW 298
69221: ST_TO_ADDR
// distance := 9999 ;
69222: LD_ADDR_VAR 0 10
69226: PUSH
69227: LD_INT 9999
69229: ST_TO_ADDR
// for i := 0 to 5 do
69230: LD_ADDR_VAR 0 6
69234: PUSH
69235: DOUBLE
69236: LD_INT 0
69238: DEC
69239: ST_TO_ADDR
69240: LD_INT 5
69242: PUSH
69243: FOR_TO
69244: IFFALSE 69387
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69246: LD_ADDR_VAR 0 7
69250: PUSH
69251: LD_VAR 0 1
69255: PPUSH
69256: LD_VAR 0 6
69260: PPUSH
69261: LD_VAR 0 11
69265: PPUSH
69266: CALL_OW 272
69270: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69271: LD_ADDR_VAR 0 8
69275: PUSH
69276: LD_VAR 0 2
69280: PPUSH
69281: LD_VAR 0 6
69285: PPUSH
69286: LD_VAR 0 11
69290: PPUSH
69291: CALL_OW 273
69295: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69296: LD_VAR 0 7
69300: PPUSH
69301: LD_VAR 0 8
69305: PPUSH
69306: CALL_OW 488
69310: NOT
69311: IFFALSE 69315
// continue ;
69313: GO 69243
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69315: LD_ADDR_VAR 0 9
69319: PUSH
69320: LD_VAR 0 12
69324: PUSH
69325: LD_INT 1
69327: ARRAY
69328: PPUSH
69329: LD_VAR 0 12
69333: PUSH
69334: LD_INT 2
69336: ARRAY
69337: PPUSH
69338: LD_VAR 0 7
69342: PPUSH
69343: LD_VAR 0 8
69347: PPUSH
69348: CALL_OW 298
69352: ST_TO_ADDR
// if tmp < distance then
69353: LD_VAR 0 9
69357: PUSH
69358: LD_VAR 0 10
69362: LESS
69363: IFFALSE 69385
// begin result := i ;
69365: LD_ADDR_VAR 0 5
69369: PUSH
69370: LD_VAR 0 6
69374: ST_TO_ADDR
// distance := tmp ;
69375: LD_ADDR_VAR 0 10
69379: PUSH
69380: LD_VAR 0 9
69384: ST_TO_ADDR
// end ; end ;
69385: GO 69243
69387: POP
69388: POP
// end ;
69389: LD_VAR 0 5
69393: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69394: LD_INT 0
69396: PPUSH
69397: PPUSH
// if not driver or not IsInUnit ( driver ) then
69398: LD_VAR 0 1
69402: NOT
69403: PUSH
69404: LD_VAR 0 1
69408: PPUSH
69409: CALL_OW 310
69413: NOT
69414: OR
69415: IFFALSE 69419
// exit ;
69417: GO 69509
// vehicle := IsInUnit ( driver ) ;
69419: LD_ADDR_VAR 0 3
69423: PUSH
69424: LD_VAR 0 1
69428: PPUSH
69429: CALL_OW 310
69433: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69434: LD_VAR 0 1
69438: PPUSH
69439: LD_STRING \
69441: PUSH
69442: LD_INT 0
69444: PUSH
69445: LD_INT 0
69447: PUSH
69448: LD_INT 0
69450: PUSH
69451: LD_INT 0
69453: PUSH
69454: LD_INT 0
69456: PUSH
69457: LD_INT 0
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: PUSH
69469: LD_STRING E
69471: PUSH
69472: LD_INT 0
69474: PUSH
69475: LD_INT 0
69477: PUSH
69478: LD_VAR 0 3
69482: PUSH
69483: LD_INT 0
69485: PUSH
69486: LD_INT 0
69488: PUSH
69489: LD_INT 0
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PPUSH
69505: CALL_OW 446
// end ;
69509: LD_VAR 0 2
69513: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69514: LD_INT 0
69516: PPUSH
69517: PPUSH
// if not driver or not IsInUnit ( driver ) then
69518: LD_VAR 0 1
69522: NOT
69523: PUSH
69524: LD_VAR 0 1
69528: PPUSH
69529: CALL_OW 310
69533: NOT
69534: OR
69535: IFFALSE 69539
// exit ;
69537: GO 69629
// vehicle := IsInUnit ( driver ) ;
69539: LD_ADDR_VAR 0 3
69543: PUSH
69544: LD_VAR 0 1
69548: PPUSH
69549: CALL_OW 310
69553: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69554: LD_VAR 0 1
69558: PPUSH
69559: LD_STRING \
69561: PUSH
69562: LD_INT 0
69564: PUSH
69565: LD_INT 0
69567: PUSH
69568: LD_INT 0
69570: PUSH
69571: LD_INT 0
69573: PUSH
69574: LD_INT 0
69576: PUSH
69577: LD_INT 0
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: PUSH
69589: LD_STRING E
69591: PUSH
69592: LD_INT 0
69594: PUSH
69595: LD_INT 0
69597: PUSH
69598: LD_VAR 0 3
69602: PUSH
69603: LD_INT 0
69605: PUSH
69606: LD_INT 0
69608: PUSH
69609: LD_INT 0
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PPUSH
69625: CALL_OW 447
// end ;
69629: LD_VAR 0 2
69633: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69634: LD_INT 0
69636: PPUSH
69637: PPUSH
69638: PPUSH
// tmp := [ ] ;
69639: LD_ADDR_VAR 0 5
69643: PUSH
69644: EMPTY
69645: ST_TO_ADDR
// for i in units do
69646: LD_ADDR_VAR 0 4
69650: PUSH
69651: LD_VAR 0 1
69655: PUSH
69656: FOR_IN
69657: IFFALSE 69695
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69659: LD_ADDR_VAR 0 5
69663: PUSH
69664: LD_VAR 0 5
69668: PPUSH
69669: LD_VAR 0 5
69673: PUSH
69674: LD_INT 1
69676: PLUS
69677: PPUSH
69678: LD_VAR 0 4
69682: PPUSH
69683: CALL_OW 256
69687: PPUSH
69688: CALL_OW 2
69692: ST_TO_ADDR
69693: GO 69656
69695: POP
69696: POP
// if not tmp then
69697: LD_VAR 0 5
69701: NOT
69702: IFFALSE 69706
// exit ;
69704: GO 69754
// if asc then
69706: LD_VAR 0 2
69710: IFFALSE 69734
// result := SortListByListAsc ( units , tmp ) else
69712: LD_ADDR_VAR 0 3
69716: PUSH
69717: LD_VAR 0 1
69721: PPUSH
69722: LD_VAR 0 5
69726: PPUSH
69727: CALL_OW 76
69731: ST_TO_ADDR
69732: GO 69754
// result := SortListByListDesc ( units , tmp ) ;
69734: LD_ADDR_VAR 0 3
69738: PUSH
69739: LD_VAR 0 1
69743: PPUSH
69744: LD_VAR 0 5
69748: PPUSH
69749: CALL_OW 77
69753: ST_TO_ADDR
// end ;
69754: LD_VAR 0 3
69758: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69759: LD_INT 0
69761: PPUSH
69762: PPUSH
// task := GetTaskList ( mech ) ;
69763: LD_ADDR_VAR 0 4
69767: PUSH
69768: LD_VAR 0 1
69772: PPUSH
69773: CALL_OW 437
69777: ST_TO_ADDR
// if not task then
69778: LD_VAR 0 4
69782: NOT
69783: IFFALSE 69787
// exit ;
69785: GO 69829
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69787: LD_ADDR_VAR 0 3
69791: PUSH
69792: LD_VAR 0 4
69796: PUSH
69797: LD_INT 1
69799: ARRAY
69800: PUSH
69801: LD_INT 1
69803: ARRAY
69804: PUSH
69805: LD_STRING r
69807: EQUAL
69808: PUSH
69809: LD_VAR 0 4
69813: PUSH
69814: LD_INT 1
69816: ARRAY
69817: PUSH
69818: LD_INT 4
69820: ARRAY
69821: PUSH
69822: LD_VAR 0 2
69826: EQUAL
69827: AND
69828: ST_TO_ADDR
// end ;
69829: LD_VAR 0 3
69833: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69834: LD_INT 0
69836: PPUSH
// SetDir ( unit , d ) ;
69837: LD_VAR 0 1
69841: PPUSH
69842: LD_VAR 0 4
69846: PPUSH
69847: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69851: LD_VAR 0 1
69855: PPUSH
69856: LD_VAR 0 2
69860: PPUSH
69861: LD_VAR 0 3
69865: PPUSH
69866: LD_VAR 0 5
69870: PPUSH
69871: CALL_OW 48
// end ;
69875: LD_VAR 0 6
69879: RET
// export function ToNaturalNumber ( number ) ; begin
69880: LD_INT 0
69882: PPUSH
// result := number div 1 ;
69883: LD_ADDR_VAR 0 2
69887: PUSH
69888: LD_VAR 0 1
69892: PUSH
69893: LD_INT 1
69895: DIV
69896: ST_TO_ADDR
// if number < 0 then
69897: LD_VAR 0 1
69901: PUSH
69902: LD_INT 0
69904: LESS
69905: IFFALSE 69915
// result := 0 ;
69907: LD_ADDR_VAR 0 2
69911: PUSH
69912: LD_INT 0
69914: ST_TO_ADDR
// end ;
69915: LD_VAR 0 2
69919: RET
// export function SortByClass ( units , class ) ; var un ; begin
69920: LD_INT 0
69922: PPUSH
69923: PPUSH
// if not units or not class then
69924: LD_VAR 0 1
69928: NOT
69929: PUSH
69930: LD_VAR 0 2
69934: NOT
69935: OR
69936: IFFALSE 69940
// exit ;
69938: GO 70035
// result := [ ] ;
69940: LD_ADDR_VAR 0 3
69944: PUSH
69945: EMPTY
69946: ST_TO_ADDR
// for un in units do
69947: LD_ADDR_VAR 0 4
69951: PUSH
69952: LD_VAR 0 1
69956: PUSH
69957: FOR_IN
69958: IFFALSE 70033
// if GetClass ( un ) = class then
69960: LD_VAR 0 4
69964: PPUSH
69965: CALL_OW 257
69969: PUSH
69970: LD_VAR 0 2
69974: EQUAL
69975: IFFALSE 70002
// result := Insert ( result , 1 , un ) else
69977: LD_ADDR_VAR 0 3
69981: PUSH
69982: LD_VAR 0 3
69986: PPUSH
69987: LD_INT 1
69989: PPUSH
69990: LD_VAR 0 4
69994: PPUSH
69995: CALL_OW 2
69999: ST_TO_ADDR
70000: GO 70031
// result := Replace ( result , result + 1 , un ) ;
70002: LD_ADDR_VAR 0 3
70006: PUSH
70007: LD_VAR 0 3
70011: PPUSH
70012: LD_VAR 0 3
70016: PUSH
70017: LD_INT 1
70019: PLUS
70020: PPUSH
70021: LD_VAR 0 4
70025: PPUSH
70026: CALL_OW 1
70030: ST_TO_ADDR
70031: GO 69957
70033: POP
70034: POP
// end ;
70035: LD_VAR 0 3
70039: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70040: LD_INT 0
70042: PPUSH
70043: PPUSH
70044: PPUSH
70045: PPUSH
70046: PPUSH
70047: PPUSH
70048: PPUSH
// result := [ ] ;
70049: LD_ADDR_VAR 0 4
70053: PUSH
70054: EMPTY
70055: ST_TO_ADDR
// if x - r < 0 then
70056: LD_VAR 0 1
70060: PUSH
70061: LD_VAR 0 3
70065: MINUS
70066: PUSH
70067: LD_INT 0
70069: LESS
70070: IFFALSE 70082
// min_x := 0 else
70072: LD_ADDR_VAR 0 8
70076: PUSH
70077: LD_INT 0
70079: ST_TO_ADDR
70080: GO 70098
// min_x := x - r ;
70082: LD_ADDR_VAR 0 8
70086: PUSH
70087: LD_VAR 0 1
70091: PUSH
70092: LD_VAR 0 3
70096: MINUS
70097: ST_TO_ADDR
// if y - r < 0 then
70098: LD_VAR 0 2
70102: PUSH
70103: LD_VAR 0 3
70107: MINUS
70108: PUSH
70109: LD_INT 0
70111: LESS
70112: IFFALSE 70124
// min_y := 0 else
70114: LD_ADDR_VAR 0 7
70118: PUSH
70119: LD_INT 0
70121: ST_TO_ADDR
70122: GO 70140
// min_y := y - r ;
70124: LD_ADDR_VAR 0 7
70128: PUSH
70129: LD_VAR 0 2
70133: PUSH
70134: LD_VAR 0 3
70138: MINUS
70139: ST_TO_ADDR
// max_x := x + r ;
70140: LD_ADDR_VAR 0 9
70144: PUSH
70145: LD_VAR 0 1
70149: PUSH
70150: LD_VAR 0 3
70154: PLUS
70155: ST_TO_ADDR
// max_y := y + r ;
70156: LD_ADDR_VAR 0 10
70160: PUSH
70161: LD_VAR 0 2
70165: PUSH
70166: LD_VAR 0 3
70170: PLUS
70171: ST_TO_ADDR
// for _x = min_x to max_x do
70172: LD_ADDR_VAR 0 5
70176: PUSH
70177: DOUBLE
70178: LD_VAR 0 8
70182: DEC
70183: ST_TO_ADDR
70184: LD_VAR 0 9
70188: PUSH
70189: FOR_TO
70190: IFFALSE 70291
// for _y = min_y to max_y do
70192: LD_ADDR_VAR 0 6
70196: PUSH
70197: DOUBLE
70198: LD_VAR 0 7
70202: DEC
70203: ST_TO_ADDR
70204: LD_VAR 0 10
70208: PUSH
70209: FOR_TO
70210: IFFALSE 70287
// begin if not ValidHex ( _x , _y ) then
70212: LD_VAR 0 5
70216: PPUSH
70217: LD_VAR 0 6
70221: PPUSH
70222: CALL_OW 488
70226: NOT
70227: IFFALSE 70231
// continue ;
70229: GO 70209
// if GetResourceTypeXY ( _x , _y ) then
70231: LD_VAR 0 5
70235: PPUSH
70236: LD_VAR 0 6
70240: PPUSH
70241: CALL_OW 283
70245: IFFALSE 70285
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70247: LD_ADDR_VAR 0 4
70251: PUSH
70252: LD_VAR 0 4
70256: PPUSH
70257: LD_VAR 0 4
70261: PUSH
70262: LD_INT 1
70264: PLUS
70265: PPUSH
70266: LD_VAR 0 5
70270: PUSH
70271: LD_VAR 0 6
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PPUSH
70280: CALL_OW 1
70284: ST_TO_ADDR
// end ;
70285: GO 70209
70287: POP
70288: POP
70289: GO 70189
70291: POP
70292: POP
// end ;
70293: LD_VAR 0 4
70297: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70298: LD_INT 0
70300: PPUSH
70301: PPUSH
70302: PPUSH
70303: PPUSH
70304: PPUSH
70305: PPUSH
70306: PPUSH
70307: PPUSH
// if not units then
70308: LD_VAR 0 1
70312: NOT
70313: IFFALSE 70317
// exit ;
70315: GO 70841
// result := UnitFilter ( units , [ f_ok ] ) ;
70317: LD_ADDR_VAR 0 3
70321: PUSH
70322: LD_VAR 0 1
70326: PPUSH
70327: LD_INT 50
70329: PUSH
70330: EMPTY
70331: LIST
70332: PPUSH
70333: CALL_OW 72
70337: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70338: LD_ADDR_VAR 0 8
70342: PUSH
70343: LD_VAR 0 1
70347: PUSH
70348: LD_INT 1
70350: ARRAY
70351: PPUSH
70352: CALL_OW 255
70356: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70357: LD_ADDR_VAR 0 10
70361: PUSH
70362: LD_INT 29
70364: PUSH
70365: LD_INT 91
70367: PUSH
70368: LD_INT 49
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: LIST
70375: ST_TO_ADDR
// if not result then
70376: LD_VAR 0 3
70380: NOT
70381: IFFALSE 70385
// exit ;
70383: GO 70841
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70385: LD_ADDR_VAR 0 5
70389: PUSH
70390: LD_INT 81
70392: PUSH
70393: LD_VAR 0 8
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PPUSH
70402: CALL_OW 69
70406: ST_TO_ADDR
// for i in result do
70407: LD_ADDR_VAR 0 4
70411: PUSH
70412: LD_VAR 0 3
70416: PUSH
70417: FOR_IN
70418: IFFALSE 70839
// begin tag := GetTag ( i ) + 1 ;
70420: LD_ADDR_VAR 0 9
70424: PUSH
70425: LD_VAR 0 4
70429: PPUSH
70430: CALL_OW 110
70434: PUSH
70435: LD_INT 1
70437: PLUS
70438: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70439: LD_ADDR_VAR 0 7
70443: PUSH
70444: LD_VAR 0 4
70448: PPUSH
70449: CALL_OW 250
70453: PPUSH
70454: LD_VAR 0 4
70458: PPUSH
70459: CALL_OW 251
70463: PPUSH
70464: LD_INT 6
70466: PPUSH
70467: CALL 70040 0 3
70471: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70472: LD_VAR 0 4
70476: PPUSH
70477: CALL_OW 247
70481: PUSH
70482: LD_INT 2
70484: EQUAL
70485: PUSH
70486: LD_VAR 0 7
70490: AND
70491: PUSH
70492: LD_VAR 0 4
70496: PPUSH
70497: CALL_OW 264
70501: PUSH
70502: LD_VAR 0 10
70506: IN
70507: NOT
70508: AND
70509: IFFALSE 70548
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70511: LD_VAR 0 4
70515: PPUSH
70516: LD_VAR 0 7
70520: PUSH
70521: LD_INT 1
70523: ARRAY
70524: PUSH
70525: LD_INT 1
70527: ARRAY
70528: PPUSH
70529: LD_VAR 0 7
70533: PUSH
70534: LD_INT 1
70536: ARRAY
70537: PUSH
70538: LD_INT 2
70540: ARRAY
70541: PPUSH
70542: CALL_OW 116
70546: GO 70837
// if path > tag then
70548: LD_VAR 0 2
70552: PUSH
70553: LD_VAR 0 9
70557: GREATER
70558: IFFALSE 70766
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70560: LD_ADDR_VAR 0 6
70564: PUSH
70565: LD_VAR 0 5
70569: PPUSH
70570: LD_INT 91
70572: PUSH
70573: LD_VAR 0 4
70577: PUSH
70578: LD_INT 8
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: LIST
70585: PPUSH
70586: CALL_OW 72
70590: ST_TO_ADDR
// if nearEnemy then
70591: LD_VAR 0 6
70595: IFFALSE 70664
// begin if GetWeapon ( i ) = ru_time_lapser then
70597: LD_VAR 0 4
70601: PPUSH
70602: CALL_OW 264
70606: PUSH
70607: LD_INT 49
70609: EQUAL
70610: IFFALSE 70638
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70612: LD_VAR 0 4
70616: PPUSH
70617: LD_VAR 0 6
70621: PPUSH
70622: LD_VAR 0 4
70626: PPUSH
70627: CALL_OW 74
70631: PPUSH
70632: CALL_OW 112
70636: GO 70662
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70638: LD_VAR 0 4
70642: PPUSH
70643: LD_VAR 0 6
70647: PPUSH
70648: LD_VAR 0 4
70652: PPUSH
70653: CALL_OW 74
70657: PPUSH
70658: CALL_OW 115
// end else
70662: GO 70764
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70664: LD_VAR 0 4
70668: PPUSH
70669: LD_VAR 0 2
70673: PUSH
70674: LD_VAR 0 9
70678: ARRAY
70679: PUSH
70680: LD_INT 1
70682: ARRAY
70683: PPUSH
70684: LD_VAR 0 2
70688: PUSH
70689: LD_VAR 0 9
70693: ARRAY
70694: PUSH
70695: LD_INT 2
70697: ARRAY
70698: PPUSH
70699: CALL_OW 297
70703: PUSH
70704: LD_INT 6
70706: GREATER
70707: IFFALSE 70750
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70709: LD_VAR 0 4
70713: PPUSH
70714: LD_VAR 0 2
70718: PUSH
70719: LD_VAR 0 9
70723: ARRAY
70724: PUSH
70725: LD_INT 1
70727: ARRAY
70728: PPUSH
70729: LD_VAR 0 2
70733: PUSH
70734: LD_VAR 0 9
70738: ARRAY
70739: PUSH
70740: LD_INT 2
70742: ARRAY
70743: PPUSH
70744: CALL_OW 114
70748: GO 70764
// SetTag ( i , tag ) ;
70750: LD_VAR 0 4
70754: PPUSH
70755: LD_VAR 0 9
70759: PPUSH
70760: CALL_OW 109
// end else
70764: GO 70837
// if enemy then
70766: LD_VAR 0 5
70770: IFFALSE 70837
// begin if GetWeapon ( i ) = ru_time_lapser then
70772: LD_VAR 0 4
70776: PPUSH
70777: CALL_OW 264
70781: PUSH
70782: LD_INT 49
70784: EQUAL
70785: IFFALSE 70813
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70787: LD_VAR 0 4
70791: PPUSH
70792: LD_VAR 0 5
70796: PPUSH
70797: LD_VAR 0 4
70801: PPUSH
70802: CALL_OW 74
70806: PPUSH
70807: CALL_OW 112
70811: GO 70837
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70813: LD_VAR 0 4
70817: PPUSH
70818: LD_VAR 0 5
70822: PPUSH
70823: LD_VAR 0 4
70827: PPUSH
70828: CALL_OW 74
70832: PPUSH
70833: CALL_OW 115
// end ; end ;
70837: GO 70417
70839: POP
70840: POP
// end ;
70841: LD_VAR 0 3
70845: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70846: LD_INT 0
70848: PPUSH
70849: PPUSH
70850: PPUSH
// if not unit or IsInUnit ( unit ) then
70851: LD_VAR 0 1
70855: NOT
70856: PUSH
70857: LD_VAR 0 1
70861: PPUSH
70862: CALL_OW 310
70866: OR
70867: IFFALSE 70871
// exit ;
70869: GO 70962
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70871: LD_ADDR_VAR 0 4
70875: PUSH
70876: LD_VAR 0 1
70880: PPUSH
70881: CALL_OW 250
70885: PPUSH
70886: LD_VAR 0 2
70890: PPUSH
70891: LD_INT 1
70893: PPUSH
70894: CALL_OW 272
70898: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70899: LD_ADDR_VAR 0 5
70903: PUSH
70904: LD_VAR 0 1
70908: PPUSH
70909: CALL_OW 251
70913: PPUSH
70914: LD_VAR 0 2
70918: PPUSH
70919: LD_INT 1
70921: PPUSH
70922: CALL_OW 273
70926: ST_TO_ADDR
// if ValidHex ( x , y ) then
70927: LD_VAR 0 4
70931: PPUSH
70932: LD_VAR 0 5
70936: PPUSH
70937: CALL_OW 488
70941: IFFALSE 70962
// ComTurnXY ( unit , x , y ) ;
70943: LD_VAR 0 1
70947: PPUSH
70948: LD_VAR 0 4
70952: PPUSH
70953: LD_VAR 0 5
70957: PPUSH
70958: CALL_OW 118
// end ;
70962: LD_VAR 0 3
70966: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70967: LD_INT 0
70969: PPUSH
70970: PPUSH
// result := false ;
70971: LD_ADDR_VAR 0 3
70975: PUSH
70976: LD_INT 0
70978: ST_TO_ADDR
// if not units then
70979: LD_VAR 0 2
70983: NOT
70984: IFFALSE 70988
// exit ;
70986: GO 71033
// for i in units do
70988: LD_ADDR_VAR 0 4
70992: PUSH
70993: LD_VAR 0 2
70997: PUSH
70998: FOR_IN
70999: IFFALSE 71031
// if See ( side , i ) then
71001: LD_VAR 0 1
71005: PPUSH
71006: LD_VAR 0 4
71010: PPUSH
71011: CALL_OW 292
71015: IFFALSE 71029
// begin result := true ;
71017: LD_ADDR_VAR 0 3
71021: PUSH
71022: LD_INT 1
71024: ST_TO_ADDR
// exit ;
71025: POP
71026: POP
71027: GO 71033
// end ;
71029: GO 70998
71031: POP
71032: POP
// end ;
71033: LD_VAR 0 3
71037: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71038: LD_INT 0
71040: PPUSH
71041: PPUSH
71042: PPUSH
71043: PPUSH
// if not unit or not points then
71044: LD_VAR 0 1
71048: NOT
71049: PUSH
71050: LD_VAR 0 2
71054: NOT
71055: OR
71056: IFFALSE 71060
// exit ;
71058: GO 71150
// dist := 99999 ;
71060: LD_ADDR_VAR 0 5
71064: PUSH
71065: LD_INT 99999
71067: ST_TO_ADDR
// for i in points do
71068: LD_ADDR_VAR 0 4
71072: PUSH
71073: LD_VAR 0 2
71077: PUSH
71078: FOR_IN
71079: IFFALSE 71148
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71081: LD_ADDR_VAR 0 6
71085: PUSH
71086: LD_VAR 0 1
71090: PPUSH
71091: LD_VAR 0 4
71095: PUSH
71096: LD_INT 1
71098: ARRAY
71099: PPUSH
71100: LD_VAR 0 4
71104: PUSH
71105: LD_INT 2
71107: ARRAY
71108: PPUSH
71109: CALL_OW 297
71113: ST_TO_ADDR
// if tmpDist < dist then
71114: LD_VAR 0 6
71118: PUSH
71119: LD_VAR 0 5
71123: LESS
71124: IFFALSE 71146
// begin result := i ;
71126: LD_ADDR_VAR 0 3
71130: PUSH
71131: LD_VAR 0 4
71135: ST_TO_ADDR
// dist := tmpDist ;
71136: LD_ADDR_VAR 0 5
71140: PUSH
71141: LD_VAR 0 6
71145: ST_TO_ADDR
// end ; end ;
71146: GO 71078
71148: POP
71149: POP
// end ;
71150: LD_VAR 0 3
71154: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71155: LD_INT 0
71157: PPUSH
// uc_side := side ;
71158: LD_ADDR_OWVAR 20
71162: PUSH
71163: LD_VAR 0 1
71167: ST_TO_ADDR
// uc_nation := 3 ;
71168: LD_ADDR_OWVAR 21
71172: PUSH
71173: LD_INT 3
71175: ST_TO_ADDR
// vc_chassis := 25 ;
71176: LD_ADDR_OWVAR 37
71180: PUSH
71181: LD_INT 25
71183: ST_TO_ADDR
// vc_engine := engine_siberite ;
71184: LD_ADDR_OWVAR 39
71188: PUSH
71189: LD_INT 3
71191: ST_TO_ADDR
// vc_control := control_computer ;
71192: LD_ADDR_OWVAR 38
71196: PUSH
71197: LD_INT 3
71199: ST_TO_ADDR
// vc_weapon := 59 ;
71200: LD_ADDR_OWVAR 40
71204: PUSH
71205: LD_INT 59
71207: ST_TO_ADDR
// result := CreateVehicle ;
71208: LD_ADDR_VAR 0 5
71212: PUSH
71213: CALL_OW 45
71217: ST_TO_ADDR
// SetDir ( result , d ) ;
71218: LD_VAR 0 5
71222: PPUSH
71223: LD_VAR 0 4
71227: PPUSH
71228: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71232: LD_VAR 0 5
71236: PPUSH
71237: LD_VAR 0 2
71241: PPUSH
71242: LD_VAR 0 3
71246: PPUSH
71247: LD_INT 0
71249: PPUSH
71250: CALL_OW 48
// end ;
71254: LD_VAR 0 5
71258: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71259: LD_INT 0
71261: PPUSH
71262: PPUSH
71263: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71264: LD_ADDR_VAR 0 2
71268: PUSH
71269: LD_INT 0
71271: PUSH
71272: LD_INT 0
71274: PUSH
71275: LD_INT 0
71277: PUSH
71278: LD_INT 0
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71287: LD_VAR 0 1
71291: NOT
71292: PUSH
71293: LD_VAR 0 1
71297: PPUSH
71298: CALL_OW 264
71302: PUSH
71303: LD_INT 12
71305: PUSH
71306: LD_INT 51
71308: PUSH
71309: LD_INT 32
71311: PUSH
71312: LD_INT 89
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: IN
71321: NOT
71322: OR
71323: IFFALSE 71327
// exit ;
71325: GO 71425
// for i := 1 to 3 do
71327: LD_ADDR_VAR 0 3
71331: PUSH
71332: DOUBLE
71333: LD_INT 1
71335: DEC
71336: ST_TO_ADDR
71337: LD_INT 3
71339: PUSH
71340: FOR_TO
71341: IFFALSE 71423
// begin tmp := GetCargo ( cargo , i ) ;
71343: LD_ADDR_VAR 0 4
71347: PUSH
71348: LD_VAR 0 1
71352: PPUSH
71353: LD_VAR 0 3
71357: PPUSH
71358: CALL_OW 289
71362: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71363: LD_ADDR_VAR 0 2
71367: PUSH
71368: LD_VAR 0 2
71372: PPUSH
71373: LD_VAR 0 3
71377: PPUSH
71378: LD_VAR 0 4
71382: PPUSH
71383: CALL_OW 1
71387: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71388: LD_ADDR_VAR 0 2
71392: PUSH
71393: LD_VAR 0 2
71397: PPUSH
71398: LD_INT 4
71400: PPUSH
71401: LD_VAR 0 2
71405: PUSH
71406: LD_INT 4
71408: ARRAY
71409: PUSH
71410: LD_VAR 0 4
71414: PLUS
71415: PPUSH
71416: CALL_OW 1
71420: ST_TO_ADDR
// end ;
71421: GO 71340
71423: POP
71424: POP
// end ;
71425: LD_VAR 0 2
71429: RET
// export function Length ( array ) ; begin
71430: LD_INT 0
71432: PPUSH
// result := array + 0 ;
71433: LD_ADDR_VAR 0 2
71437: PUSH
71438: LD_VAR 0 1
71442: PUSH
71443: LD_INT 0
71445: PLUS
71446: ST_TO_ADDR
// end ;
71447: LD_VAR 0 2
71451: RET
// export function PrepareArray ( array ) ; begin
71452: LD_INT 0
71454: PPUSH
// result := array diff 0 ;
71455: LD_ADDR_VAR 0 2
71459: PUSH
71460: LD_VAR 0 1
71464: PUSH
71465: LD_INT 0
71467: DIFF
71468: ST_TO_ADDR
// if not result [ 1 ] then
71469: LD_VAR 0 2
71473: PUSH
71474: LD_INT 1
71476: ARRAY
71477: NOT
71478: IFFALSE 71498
// result := Delete ( result , 1 ) ;
71480: LD_ADDR_VAR 0 2
71484: PUSH
71485: LD_VAR 0 2
71489: PPUSH
71490: LD_INT 1
71492: PPUSH
71493: CALL_OW 3
71497: ST_TO_ADDR
// end ;
71498: LD_VAR 0 2
71502: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71503: LD_INT 0
71505: PPUSH
71506: PPUSH
71507: PPUSH
71508: PPUSH
// sibRocketRange := 25 ;
71509: LD_ADDR_VAR 0 6
71513: PUSH
71514: LD_INT 25
71516: ST_TO_ADDR
// result := false ;
71517: LD_ADDR_VAR 0 4
71521: PUSH
71522: LD_INT 0
71524: ST_TO_ADDR
// for i := 0 to 5 do
71525: LD_ADDR_VAR 0 5
71529: PUSH
71530: DOUBLE
71531: LD_INT 0
71533: DEC
71534: ST_TO_ADDR
71535: LD_INT 5
71537: PUSH
71538: FOR_TO
71539: IFFALSE 71606
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71541: LD_VAR 0 1
71545: PPUSH
71546: LD_VAR 0 5
71550: PPUSH
71551: LD_VAR 0 6
71555: PPUSH
71556: CALL_OW 272
71560: PPUSH
71561: LD_VAR 0 2
71565: PPUSH
71566: LD_VAR 0 5
71570: PPUSH
71571: LD_VAR 0 6
71575: PPUSH
71576: CALL_OW 273
71580: PPUSH
71581: LD_VAR 0 3
71585: PPUSH
71586: CALL_OW 309
71590: IFFALSE 71604
// begin result := true ;
71592: LD_ADDR_VAR 0 4
71596: PUSH
71597: LD_INT 1
71599: ST_TO_ADDR
// exit ;
71600: POP
71601: POP
71602: GO 71608
// end ;
71604: GO 71538
71606: POP
71607: POP
// end ;
71608: LD_VAR 0 4
71612: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71613: LD_INT 0
71615: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71616: LD_VAR 0 1
71620: PPUSH
71621: LD_VAR 0 2
71625: PPUSH
71626: LD_INT 0
71628: PPUSH
71629: LD_INT 0
71631: PPUSH
71632: LD_INT 1
71634: PPUSH
71635: LD_INT 0
71637: PPUSH
71638: CALL_OW 587
// end ; end_of_file
71642: LD_VAR 0 3
71646: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71647: LD_VAR 0 1
71651: PPUSH
71652: LD_VAR 0 2
71656: PPUSH
71657: LD_VAR 0 3
71661: PPUSH
71662: LD_VAR 0 4
71666: PPUSH
71667: LD_VAR 0 5
71671: PPUSH
71672: LD_VAR 0 6
71676: PPUSH
71677: CALL 10195 0 6
// end ;
71681: PPOPN 6
71683: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71684: LD_INT 0
71686: PPUSH
// begin if not units then
71687: LD_VAR 0 1
71691: NOT
71692: IFFALSE 71696
// exit ;
71694: GO 71696
// end ;
71696: PPOPN 7
71698: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71699: CALL 10166 0 0
// end ;
71703: PPOPN 1
71705: END
