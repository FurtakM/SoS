// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 1994 0 0
// PrepareArabian ;
  23: CALL 1234 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5617 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_OWVAR 67
 672: ARRAY
 673: PPUSH
 674: CALL 504 0 2
// for i := 1 to 2 do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_INT 2
 690: PUSH
 691: FOR_TO
 692: IFFALSE 729
// begin hc_class := 21 ;
 694: LD_ADDR_OWVAR 28
 698: PUSH
 699: LD_INT 21
 701: ST_TO_ADDR
// hc_gallery :=  ;
 702: LD_ADDR_OWVAR 33
 706: PUSH
 707: LD_STRING 
 709: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 691
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 782
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end ;
 780: GO 744
 782: POP
 783: POP
// for i := 1 to 2 do
 784: LD_ADDR_VAR 0 3
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 2
 796: PUSH
 797: FOR_TO
 798: IFFALSE 835
// begin hc_class := 13 ;
 800: LD_ADDR_OWVAR 28
 804: PUSH
 805: LD_INT 13
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 816: CALL_OW 44
 820: PPUSH
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 49
// end ;
 833: GO 797
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 2
 841: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
// if not observer or not unit then
 847: LD_VAR 0 1
 851: NOT
 852: PUSH
 853: LD_VAR 0 2
 857: NOT
 858: OR
 859: IFFALSE 863
// exit ;
 861: GO 911
// if not See ( GetSide ( observer ) , unit ) then
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 292
 882: NOT
 883: IFFALSE 887
// exit ;
 885: GO 911
// result := GetDistUnits ( observer , unit ) < 12 ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 296
 906: PUSH
 907: LD_INT 12
 909: LESS
 910: ST_TO_ADDR
// end ;
 911: LD_VAR 0 3
 915: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 916: LD_INT 0
 918: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: CALL_OW 488
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ;
1003: LD_VAR 0 4
1007: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
1014: PPUSH
// if not unit then
1015: LD_VAR 0 1
1019: NOT
1020: IFFALSE 1024
// exit ;
1022: GO 1229
// side := GetSide ( unit ) ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 255
1038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_VAR 0 4
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_VAR 0 2
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 69
1076: ST_TO_ADDR
// if not tmp then
1077: LD_VAR 0 5
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1229
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 5
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 35517 0 4
1111: ST_TO_ADDR
// places := 1 ;
1112: LD_ADDR_VAR 0 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 7
1148: PUSH
1149: LD_INT 8
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1173
// places := 6 ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// for i in tmp do
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: LD_VAR 0 5
1182: PUSH
1183: FOR_IN
1184: IFFALSE 1227
// begin if UnitsInside ( i ) - places <= 0 then
1186: LD_VAR 0 6
1190: PPUSH
1191: CALL_OW 313
1195: PUSH
1196: LD_VAR 0 7
1200: MINUS
1201: PUSH
1202: LD_INT 0
1204: LESSEQUAL
1205: IFFALSE 1211
// continue else
1207: GO 1183
1209: GO 1225
// begin result := i ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_VAR 0 6
1220: ST_TO_ADDR
// exit ;
1221: POP
1222: POP
1223: GO 1229
// end ; end ;
1225: GO 1183
1227: POP
1228: POP
// end ; end_of_file
1229: LD_VAR 0 3
1233: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1234: LD_INT 0
1236: PPUSH
1237: PPUSH
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// uc_nation := 2 ;
1246: LD_ADDR_OWVAR 21
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1254: LD_ADDR_EXP 18
1258: PUSH
1259: LD_STRING Heike
1261: PPUSH
1262: LD_EXP 1
1266: NOT
1267: PPUSH
1268: LD_EXP 2
1272: PPUSH
1273: CALL 29943 0 3
1277: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1278: LD_ADDR_EXP 21
1282: PUSH
1283: LD_STRING Ibrahim
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL 29943 0 3
1301: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1302: LD_ADDR_EXP 19
1306: PUSH
1307: LD_STRING Givi
1309: PPUSH
1310: LD_EXP 1
1314: NOT
1315: PPUSH
1316: LD_EXP 2
1320: PPUSH
1321: CALL 29943 0 3
1325: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1326: LD_ADDR_EXP 22
1330: PUSH
1331: LD_STRING Kamil
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 2
1344: PPUSH
1345: CALL 29943 0 3
1349: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1350: LD_ADDR_EXP 23
1354: PUSH
1355: LD_STRING Kaia
1357: PPUSH
1358: LD_EXP 1
1362: NOT
1363: PPUSH
1364: LD_EXP 2
1368: PPUSH
1369: CALL 29943 0 3
1373: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1374: LD_ADDR_EXP 24
1378: PUSH
1379: LD_STRING Sophia
1381: PPUSH
1382: LD_EXP 1
1386: NOT
1387: PPUSH
1388: LD_EXP 2
1392: PPUSH
1393: CALL 29943 0 3
1397: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1398: LD_ADDR_EXP 25
1402: PUSH
1403: LD_STRING Markov
1405: PPUSH
1406: LD_EXP 1
1410: NOT
1411: PPUSH
1412: LD_EXP 2
1416: PPUSH
1417: CALL 29943 0 3
1421: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1422: LD_ADDR_EXP 28
1426: PUSH
1427: LD_STRING Aviradze
1429: PPUSH
1430: LD_EXP 1
1434: NOT
1435: PPUSH
1436: LD_EXP 2
1440: PPUSH
1441: CALL 29943 0 3
1445: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1446: LD_ADDR_EXP 27
1450: PUSH
1451: LD_STRING Kurt
1453: PPUSH
1454: LD_EXP 1
1458: NOT
1459: PPUSH
1460: LD_EXP 2
1464: PPUSH
1465: CALL 29943 0 3
1469: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1470: LD_ADDR_EXP 20
1474: PUSH
1475: LD_STRING Mike
1477: PPUSH
1478: LD_EXP 1
1482: NOT
1483: PPUSH
1484: LD_EXP 2
1488: PPUSH
1489: CALL 29943 0 3
1493: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1494: LD_ADDR_EXP 29
1498: PUSH
1499: LD_STRING 04_1_others
1501: PPUSH
1502: CALL_OW 31
1506: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1507: LD_ADDR_EXP 31
1511: PUSH
1512: LD_STRING 04_1_apes
1514: PPUSH
1515: CALL_OW 31
1519: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_STRING 04_1_Vehicles
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// uc_side := 5 ;
1535: LD_ADDR_OWVAR 20
1539: PUSH
1540: LD_INT 5
1542: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1543: LD_ADDR_EXP 26
1547: PUSH
1548: LD_STRING Abdul
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: LD_STRING 
1556: PPUSH
1557: CALL 29943 0 3
1561: ST_TO_ADDR
// end ;
1562: LD_VAR 0 1
1566: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1567: LD_STRING 04_1_KaganCaptured
1569: PPUSH
1570: LD_INT 0
1572: PPUSH
1573: CALL_OW 30
1577: PUSH
1578: LD_INT 22
1580: PUSH
1581: LD_INT 5
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PPUSH
1588: CALL_OW 69
1592: NOT
1593: AND
1594: PUSH
1595: LD_INT 124
1597: PPUSH
1598: LD_INT 26
1600: PPUSH
1601: CALL_OW 428
1605: PUSH
1606: LD_INT 0
1608: EQUAL
1609: PUSH
1610: LD_INT 124
1612: PPUSH
1613: LD_INT 26
1615: PPUSH
1616: CALL_OW 428
1620: PPUSH
1621: CALL_OW 255
1625: PUSH
1626: LD_INT 2
1628: EQUAL
1629: XOR
1630: AND
1631: IFFALSE 1991
1633: GO 1635
1635: DISABLE
1636: LD_INT 0
1638: PPUSH
1639: PPUSH
// begin enable ;
1640: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1641: LD_EXP 33
1645: NOT
1646: PUSH
1647: LD_EXP 33
1651: PUSH
1652: LD_INT 4
1654: GREATER
1655: OR
1656: IFFALSE 1666
// cargoCounter := 1 ;
1658: LD_ADDR_EXP 33
1662: PUSH
1663: LD_INT 1
1665: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1666: LD_ADDR_VAR 0 2
1670: PUSH
1671: LD_INT 142
1673: PUSH
1674: LD_INT 15
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 129
1683: PUSH
1684: LD_INT 11
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 138
1693: PUSH
1694: LD_INT 9
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 133
1703: PUSH
1704: LD_INT 10
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: ST_TO_ADDR
// uc_side := 5 ;
1717: LD_ADDR_OWVAR 20
1721: PUSH
1722: LD_INT 5
1724: ST_TO_ADDR
// uc_nation := 2 ;
1725: LD_ADDR_OWVAR 21
1729: PUSH
1730: LD_INT 2
1732: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1733: LD_INT 5
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: LD_INT 13
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 32
1750: PPUSH
1751: LD_INT 70
1753: PPUSH
1754: CALL 336 0 7
// veh := CreateVehicle ;
1758: LD_ADDR_VAR 0 1
1762: PUSH
1763: CALL_OW 45
1767: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1768: LD_VAR 0 1
1772: PPUSH
1773: LD_INT 3
1775: PPUSH
1776: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
1780: LD_VAR 0 1
1784: PPUSH
1785: LD_INT 8
1787: PPUSH
1788: LD_INT 0
1790: PPUSH
1791: CALL_OW 49
// if not cargoDriver then
1795: LD_EXP 32
1799: NOT
1800: IFFALSE 1825
// begin PrepareHuman ( false , 1 , 3 ) ;
1802: LD_INT 0
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_INT 3
1810: PPUSH
1811: CALL_OW 380
// cargoDriver := CreateHuman ;
1815: LD_ADDR_EXP 32
1819: PUSH
1820: CALL_OW 44
1824: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
1825: LD_EXP 32
1829: PPUSH
1830: LD_VAR 0 1
1834: PPUSH
1835: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
1839: LD_VAR 0 1
1843: PPUSH
1844: LD_INT 2
1846: PPUSH
1847: LD_INT 100
1849: PPUSH
1850: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
1854: LD_VAR 0 1
1858: PPUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 33
1868: ARRAY
1869: PUSH
1870: LD_INT 1
1872: ARRAY
1873: PPUSH
1874: LD_VAR 0 2
1878: PUSH
1879: LD_EXP 33
1883: ARRAY
1884: PUSH
1885: LD_INT 2
1887: ARRAY
1888: PPUSH
1889: CALL_OW 111
// AddComUnload ( veh ) ;
1893: LD_VAR 0 1
1897: PPUSH
1898: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
1902: LD_VAR 0 1
1906: PPUSH
1907: LD_INT 133
1909: PPUSH
1910: LD_INT 2
1912: PPUSH
1913: CALL_OW 171
// wait ( 0 0$5 ) ;
1917: LD_INT 175
1919: PPUSH
1920: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1924: LD_INT 35
1926: PPUSH
1927: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
1931: LD_VAR 0 1
1935: PPUSH
1936: LD_INT 133
1938: PPUSH
1939: LD_INT 2
1941: PPUSH
1942: CALL_OW 307
1946: PUSH
1947: LD_VAR 0 1
1951: PPUSH
1952: LD_INT 8
1954: PPUSH
1955: CALL_OW 308
1959: OR
1960: IFFALSE 1924
// RemoveUnit ( cargoDriver ) ;
1962: LD_EXP 32
1966: PPUSH
1967: CALL_OW 64
// RemoveUnit ( veh ) ;
1971: LD_VAR 0 1
1975: PPUSH
1976: CALL_OW 64
// if tick >= 20 20$00 then
1980: LD_OWVAR 1
1984: PUSH
1985: LD_INT 42000
1987: GREATEREQUAL
1988: IFFALSE 1991
// disable ;
1990: DISABLE
// end ; end_of_file
1991: PPOPN 2
1993: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
1994: LD_INT 0
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
2001: PPUSH
2002: PPUSH
2003: PPUSH
2004: PPUSH
// uc_side := 3 ;
2005: LD_ADDR_OWVAR 20
2009: PUSH
2010: LD_INT 3
2012: ST_TO_ADDR
// uc_nation := 3 ;
2013: LD_ADDR_OWVAR 21
2017: PUSH
2018: LD_INT 3
2020: ST_TO_ADDR
// ruForce := [ ] ;
2021: LD_ADDR_EXP 37
2025: PUSH
2026: EMPTY
2027: ST_TO_ADDR
// ruMech := [ ] ;
2028: LD_ADDR_EXP 39
2032: PUSH
2033: EMPTY
2034: ST_TO_ADDR
// ruEng := [ ] ;
2035: LD_ADDR_EXP 38
2039: PUSH
2040: EMPTY
2041: ST_TO_ADDR
// ruSci := [ ] ;
2042: LD_ADDR_EXP 40
2046: PUSH
2047: EMPTY
2048: ST_TO_ADDR
// ruMobile := [ ] ;
2049: LD_ADDR_EXP 41
2053: PUSH
2054: EMPTY
2055: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2056: LD_ADDR_EXP 34
2060: PUSH
2061: LD_STRING Burlak
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: LD_STRING 
2069: PPUSH
2070: CALL 29943 0 3
2074: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2075: LD_ADDR_EXP 35
2079: PUSH
2080: LD_STRING Gaydar
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: LD_STRING 
2088: PPUSH
2089: CALL 29943 0 3
2093: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2094: LD_ADDR_EXP 36
2098: PUSH
2099: LD_STRING Kuzmov
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: LD_STRING 
2107: PPUSH
2108: CALL 29943 0 3
2112: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2113: LD_EXP 36
2117: PPUSH
2118: LD_INT 200
2120: PPUSH
2121: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2125: LD_INT 200
2127: PPUSH
2128: LD_STRING chuikov
2130: PPUSH
2131: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2135: LD_INT 200
2137: PPUSH
2138: CALL_OW 274
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 800
2148: PUSH
2149: LD_INT 1000
2151: PUSH
2152: LD_INT 1250
2154: PUSH
2155: LD_INT 1300
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: PUSH
2164: LD_OWVAR 67
2168: ARRAY
2169: PPUSH
2170: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2174: LD_INT 200
2176: PPUSH
2177: CALL_OW 274
2181: PPUSH
2182: LD_INT 2
2184: PPUSH
2185: LD_INT 160
2187: PPUSH
2188: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2192: LD_INT 225
2194: PPUSH
2195: CALL_OW 274
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 200
2205: PPUSH
2206: CALL_OW 277
// oil := 150 ;
2210: LD_ADDR_VAR 0 9
2214: PUSH
2215: LD_INT 150
2217: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2218: LD_EXP 5
2222: PUSH
2223: LD_INT 94500
2225: PUSH
2226: LD_INT 84000
2228: PUSH
2229: LD_INT 73500
2231: PUSH
2232: LD_INT 67200
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: PUSH
2241: LD_OWVAR 67
2245: ARRAY
2246: GREATEREQUAL
2247: IFFALSE 2402
// begin oil := 450 ;
2249: LD_ADDR_VAR 0 9
2253: PUSH
2254: LD_INT 450
2256: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2257: LD_ADDR_VAR 0 7
2261: PUSH
2262: LD_INT 123
2264: PUSH
2265: LD_INT 17
2267: PUSH
2268: LD_INT 3
2270: PUSH
2271: LD_INT 31
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 152
2282: PUSH
2283: LD_INT 38
2285: PUSH
2286: LD_INT 3
2288: PUSH
2289: LD_INT 31
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 81
2300: PUSH
2301: LD_INT 6
2303: PUSH
2304: LD_INT 4
2306: PUSH
2307: LD_INT 31
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 113
2318: PUSH
2319: LD_INT 67
2321: PUSH
2322: LD_INT 4
2324: PUSH
2325: LD_INT 32
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: ST_TO_ADDR
// for i in tmp do
2340: LD_ADDR_VAR 0 4
2344: PUSH
2345: LD_VAR 0 7
2349: PUSH
2350: FOR_IN
2351: IFFALSE 2400
// begin bc_type := i [ 4 ] ;
2353: LD_ADDR_OWVAR 42
2357: PUSH
2358: LD_VAR 0 4
2362: PUSH
2363: LD_INT 4
2365: ARRAY
2366: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: LD_VAR 0 4
2380: PUSH
2381: LD_INT 2
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 4
2389: PUSH
2390: LD_INT 3
2392: ARRAY
2393: PPUSH
2394: CALL_OW 47
// end ;
2398: GO 2350
2400: POP
2401: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2402: LD_INT 225
2404: PPUSH
2405: CALL_OW 274
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: LD_VAR 0 9
2417: PPUSH
2418: CALL_OW 277
// if Difficulty > 1 then
2422: LD_OWVAR 67
2426: PUSH
2427: LD_INT 1
2429: GREATER
2430: IFFALSE 2525
// begin bc_type := b_bunker ;
2432: LD_ADDR_OWVAR 42
2436: PUSH
2437: LD_INT 32
2439: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2440: LD_ADDR_VAR 0 7
2444: PUSH
2445: LD_INT 121
2447: PUSH
2448: LD_INT 85
2450: PUSH
2451: LD_INT 5
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 93
2461: PUSH
2462: LD_INT 72
2464: PUSH
2465: LD_INT 1
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: LIST
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: ST_TO_ADDR
// for i in tmp do
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: LD_VAR 0 7
2486: PUSH
2487: FOR_IN
2488: IFFALSE 2523
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2490: LD_VAR 0 4
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: PPUSH
2499: LD_VAR 0 4
2503: PUSH
2504: LD_INT 2
2506: ARRAY
2507: PPUSH
2508: LD_VAR 0 4
2512: PUSH
2513: LD_INT 3
2515: ARRAY
2516: PPUSH
2517: CALL_OW 47
2521: GO 2487
2523: POP
2524: POP
// end ; base := GetBase ( ruMainBase ) ;
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: LD_INT 200
2532: PPUSH
2533: CALL_OW 274
2537: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2538: LD_ADDR_VAR 0 3
2542: PUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: CALL_OW 417
2552: ST_TO_ADDR
// for b in blist do
2553: LD_ADDR_VAR 0 5
2557: PUSH
2558: LD_VAR 0 3
2562: PUSH
2563: FOR_IN
2564: IFFALSE 3015
// begin if b [ 1 ] = b_factory then
2566: LD_VAR 0 5
2570: PUSH
2571: LD_INT 1
2573: ARRAY
2574: PUSH
2575: LD_INT 3
2577: EQUAL
2578: IFFALSE 2729
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2580: LD_ADDR_VAR 0 8
2584: PUSH
2585: LD_VAR 0 5
2589: PUSH
2590: LD_INT 2
2592: ARRAY
2593: PPUSH
2594: LD_VAR 0 5
2598: PUSH
2599: LD_INT 3
2601: ARRAY
2602: PPUSH
2603: CALL_OW 428
2607: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2608: LD_ADDR_VAR 0 4
2612: PUSH
2613: DOUBLE
2614: LD_INT 1
2616: DEC
2617: ST_TO_ADDR
2618: LD_INT 2
2620: PUSH
2621: LD_INT 2
2623: PUSH
2624: LD_OWVAR 67
2628: PLUS
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: LD_EXP 10
2638: PUSH
2639: LD_INT 3
2641: GREATER
2642: PUSH
2643: LD_INT 1
2645: PLUS
2646: ARRAY
2647: PUSH
2648: FOR_TO
2649: IFFALSE 2725
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2651: LD_INT 0
2653: PPUSH
2654: LD_INT 3
2656: PPUSH
2657: LD_INT 1
2659: PUSH
2660: LD_OWVAR 67
2664: PLUS
2665: PPUSH
2666: CALL_OW 380
// un := CreateHuman ;
2670: LD_ADDR_VAR 0 6
2674: PUSH
2675: CALL_OW 44
2679: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2680: LD_ADDR_EXP 39
2684: PUSH
2685: LD_EXP 39
2689: PPUSH
2690: LD_EXP 39
2694: PUSH
2695: LD_INT 1
2697: PLUS
2698: PPUSH
2699: LD_VAR 0 6
2703: PPUSH
2704: CALL_OW 1
2708: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2709: LD_VAR 0 6
2713: PPUSH
2714: LD_VAR 0 8
2718: PPUSH
2719: CALL_OW 52
// end ;
2723: GO 2648
2725: POP
2726: POP
// end else
2727: GO 3013
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2729: LD_VAR 0 5
2733: PUSH
2734: LD_INT 1
2736: ARRAY
2737: PUSH
2738: LD_INT 6
2740: PUSH
2741: LD_INT 7
2743: PUSH
2744: LD_INT 8
2746: PUSH
2747: LD_INT 10
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: IN
2756: IFFALSE 2866
// begin for i := 1 to 2 do
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: DOUBLE
2764: LD_INT 1
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 2
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2862
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2774: LD_INT 0
2776: PPUSH
2777: LD_INT 4
2779: PPUSH
2780: LD_OWVAR 67
2784: PPUSH
2785: CALL_OW 380
// un := CreateHuman ;
2789: LD_ADDR_VAR 0 6
2793: PUSH
2794: CALL_OW 44
2798: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
2799: LD_ADDR_EXP 40
2803: PUSH
2804: LD_EXP 40
2808: PPUSH
2809: LD_EXP 40
2813: PUSH
2814: LD_INT 1
2816: PLUS
2817: PPUSH
2818: LD_VAR 0 6
2822: PPUSH
2823: CALL_OW 1
2827: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2828: LD_VAR 0 6
2832: PPUSH
2833: LD_VAR 0 5
2837: PUSH
2838: LD_INT 2
2840: ARRAY
2841: PPUSH
2842: LD_VAR 0 5
2846: PUSH
2847: LD_INT 3
2849: ARRAY
2850: PPUSH
2851: CALL_OW 428
2855: PPUSH
2856: CALL_OW 52
// end ;
2860: GO 2771
2862: POP
2863: POP
// end else
2864: GO 3013
// if b [ 1 ] = b_warehouse then
2866: LD_VAR 0 5
2870: PUSH
2871: LD_INT 1
2873: ARRAY
2874: PUSH
2875: LD_INT 1
2877: EQUAL
2878: IFFALSE 3013
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 1
2892: PUSH
2893: LD_INT 1
2895: PUSH
2896: LD_OWVAR 67
2900: PLUS
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_EXP 10
2910: PUSH
2911: LD_INT 3
2913: GREATER
2914: PUSH
2915: LD_INT 1
2917: PLUS
2918: ARRAY
2919: PUSH
2920: FOR_TO
2921: IFFALSE 3011
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2923: LD_INT 0
2925: PPUSH
2926: LD_INT 2
2928: PPUSH
2929: LD_OWVAR 67
2933: PPUSH
2934: CALL_OW 380
// un := CreateHuman ;
2938: LD_ADDR_VAR 0 6
2942: PUSH
2943: CALL_OW 44
2947: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
2948: LD_ADDR_EXP 38
2952: PUSH
2953: LD_EXP 38
2957: PPUSH
2958: LD_EXP 38
2962: PUSH
2963: LD_INT 1
2965: PLUS
2966: PPUSH
2967: LD_VAR 0 6
2971: PPUSH
2972: CALL_OW 1
2976: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2977: LD_VAR 0 6
2981: PPUSH
2982: LD_VAR 0 5
2986: PUSH
2987: LD_INT 2
2989: ARRAY
2990: PPUSH
2991: LD_VAR 0 5
2995: PUSH
2996: LD_INT 3
2998: ARRAY
2999: PPUSH
3000: CALL_OW 428
3004: PPUSH
3005: CALL_OW 52
// end ;
3009: GO 2920
3011: POP
3012: POP
// end ; end ;
3013: GO 2563
3015: POP
3016: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: LD_INT 22
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 21
3034: PUSH
3035: LD_INT 3
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// for b in blist do
3051: LD_ADDR_VAR 0 5
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3084
// SetBLevel ( b , 3 + Difficulty ) ;
3064: LD_VAR 0 5
3068: PPUSH
3069: LD_INT 3
3071: PUSH
3072: LD_OWVAR 67
3076: PLUS
3077: PPUSH
3078: CALL_OW 241
3082: GO 3061
3084: POP
3085: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3086: LD_ADDR_VAR 0 3
3090: PUSH
3091: LD_INT 22
3093: PUSH
3094: LD_INT 3
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 30
3103: PUSH
3104: LD_INT 32
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PPUSH
3115: CALL_OW 69
3119: ST_TO_ADDR
// for b in blist do
3120: LD_ADDR_VAR 0 5
3124: PUSH
3125: LD_VAR 0 3
3129: PUSH
3130: FOR_IN
3131: IFFALSE 3240
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3133: LD_INT 0
3135: PPUSH
3136: LD_INT 1
3138: PPUSH
3139: LD_INT 1
3141: PUSH
3142: LD_OWVAR 67
3146: PLUS
3147: PPUSH
3148: CALL_OW 380
// un := CreateHuman ;
3152: LD_ADDR_VAR 0 6
3156: PUSH
3157: CALL_OW 44
3161: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3162: LD_ADDR_EXP 37
3166: PUSH
3167: LD_EXP 37
3171: PPUSH
3172: LD_EXP 37
3176: PUSH
3177: LD_INT 1
3179: PLUS
3180: PPUSH
3181: LD_VAR 0 6
3185: PPUSH
3186: CALL_OW 1
3190: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3191: LD_VAR 0 6
3195: PPUSH
3196: LD_VAR 0 5
3200: PPUSH
3201: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3205: LD_VAR 0 5
3209: PPUSH
3210: LD_INT 44
3212: PUSH
3213: LD_INT 43
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: LD_VAR 0 5
3224: PUSH
3225: LD_INT 2
3227: MOD
3228: PUSH
3229: LD_INT 1
3231: PLUS
3232: ARRAY
3233: PPUSH
3234: CALL_OW 431
// end ;
3238: GO 3130
3240: POP
3241: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3242: LD_ADDR_VAR 0 3
3246: PUSH
3247: LD_INT 22
3249: PUSH
3250: LD_INT 3
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 30
3259: PUSH
3260: LD_INT 31
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PPUSH
3271: CALL_OW 69
3275: ST_TO_ADDR
// for b in blist do
3276: LD_ADDR_VAR 0 5
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: FOR_IN
3287: IFFALSE 3386
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3289: LD_INT 0
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 1
3297: PUSH
3298: LD_OWVAR 67
3302: PLUS
3303: PPUSH
3304: CALL_OW 380
// un := CreateHuman ;
3308: LD_ADDR_VAR 0 6
3312: PUSH
3313: CALL_OW 44
3317: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3318: LD_ADDR_EXP 37
3322: PUSH
3323: LD_EXP 37
3327: PPUSH
3328: LD_EXP 37
3332: PUSH
3333: LD_INT 1
3335: PLUS
3336: PPUSH
3337: LD_VAR 0 6
3341: PPUSH
3342: CALL_OW 1
3346: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3347: LD_VAR 0 6
3351: PPUSH
3352: LD_VAR 0 5
3356: PPUSH
3357: CALL_OW 254
3361: PUSH
3362: LD_INT 3
3364: PLUS
3365: PPUSH
3366: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3370: LD_VAR 0 6
3374: PPUSH
3375: LD_VAR 0 5
3379: PPUSH
3380: CALL_OW 52
// end ;
3384: GO 3286
3386: POP
3387: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 2
3405: PUSH
3406: LD_INT 30
3408: PUSH
3409: LD_INT 4
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: LD_INT 30
3418: PUSH
3419: LD_INT 5
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PPUSH
3435: CALL_OW 69
3439: ST_TO_ADDR
// for b in blist do
3440: LD_ADDR_VAR 0 5
3444: PUSH
3445: LD_VAR 0 3
3449: PUSH
3450: FOR_IN
3451: IFFALSE 3547
// begin for i := 1 to 2 do
3453: LD_ADDR_VAR 0 4
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 2
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3543
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_OWVAR 67
3482: PLUS
3483: PPUSH
3484: CALL_OW 380
// un := CreateHuman ;
3488: LD_ADDR_VAR 0 6
3492: PUSH
3493: CALL_OW 44
3497: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3498: LD_ADDR_EXP 37
3502: PUSH
3503: LD_EXP 37
3507: PPUSH
3508: LD_EXP 37
3512: PUSH
3513: LD_INT 1
3515: PLUS
3516: PPUSH
3517: LD_VAR 0 6
3521: PPUSH
3522: CALL_OW 1
3526: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3527: LD_VAR 0 6
3531: PPUSH
3532: LD_VAR 0 5
3536: PPUSH
3537: CALL_OW 52
// end ;
3541: GO 3466
3543: POP
3544: POP
// end ;
3545: GO 3450
3547: POP
3548: POP
// if ibrahimOnRuSide then
3549: LD_EXP 3
3553: IFFALSE 3651
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3555: LD_ADDR_EXP 21
3559: PUSH
3560: LD_STRING IbrahimRu
3562: PPUSH
3563: LD_INT 0
3565: PPUSH
3566: LD_STRING 
3568: PPUSH
3569: CALL 29943 0 3
3573: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3574: LD_EXP 21
3578: PPUSH
3579: LD_INT 121
3581: PPUSH
3582: LD_INT 78
3584: PPUSH
3585: LD_INT 0
3587: PPUSH
3588: CALL_OW 48
// ComHold ( Ibrahim ) ;
3592: LD_EXP 21
3596: PPUSH
3597: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_INT 2
3609: PPUSH
3610: CALL_OW 380
// ruSol := CreateHuman ;
3614: LD_ADDR_EXP 42
3618: PUSH
3619: CALL_OW 44
3623: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3624: LD_EXP 42
3628: PPUSH
3629: LD_INT 121
3631: PPUSH
3632: LD_INT 75
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: CALL_OW 48
// ComHold ( ruSol ) ;
3642: LD_EXP 42
3646: PPUSH
3647: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3651: LD_ADDR_VAR 0 4
3655: PUSH
3656: DOUBLE
3657: LD_INT 1
3659: DEC
3660: ST_TO_ADDR
3661: LD_INT 2
3663: PUSH
3664: LD_INT 2
3666: PUSH
3667: LD_OWVAR 67
3671: PLUS
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_EXP 10
3681: PUSH
3682: LD_INT 3
3684: GREATER
3685: PUSH
3686: LD_INT 1
3688: PLUS
3689: ARRAY
3690: PUSH
3691: FOR_TO
3692: IFFALSE 3761
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3694: LD_VAR 0 8
3698: PPUSH
3699: LD_INT 21
3701: PUSH
3702: LD_INT 23
3704: PUSH
3705: LD_INT 24
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PUSH
3713: LD_VAR 0 4
3717: PUSH
3718: LD_INT 3
3720: MOD
3721: PUSH
3722: LD_INT 1
3724: PLUS
3725: ARRAY
3726: PPUSH
3727: LD_INT 1
3729: PPUSH
3730: LD_INT 1
3732: PPUSH
3733: LD_INT 43
3735: PUSH
3736: LD_INT 44
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 1
3745: PPUSH
3746: LD_INT 2
3748: PPUSH
3749: CALL_OW 12
3753: ARRAY
3754: PPUSH
3755: CALL_OW 185
3759: GO 3691
3761: POP
3762: POP
// end ;
3763: LD_VAR 0 1
3767: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3768: LD_EXP 41
3772: PUSH
3773: LD_EXP 4
3777: NOT
3778: AND
3779: IFFALSE 4266
3781: GO 3783
3783: DISABLE
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
// begin enable ;
3791: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
3792: LD_ADDR_VAR 0 2
3796: PUSH
3797: LD_EXP 41
3801: PPUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PPUSH
3812: CALL_OW 72
3816: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
3817: LD_ADDR_VAR 0 4
3821: PUSH
3822: LD_INT 81
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: LD_INT 2
3834: PUSH
3835: LD_INT 95
3837: PUSH
3838: LD_INT 4
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 95
3847: PUSH
3848: LD_INT 5
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 95
3857: PUSH
3858: LD_INT 6
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: PUSH
3865: LD_INT 95
3867: PUSH
3868: LD_INT 7
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PPUSH
3886: CALL_OW 69
3890: ST_TO_ADDR
// for i in filter do
3891: LD_ADDR_VAR 0 1
3895: PUSH
3896: LD_VAR 0 2
3900: PUSH
3901: FOR_IN
3902: IFFALSE 4264
// begin tmp := IsDrivenBy ( i ) ;
3904: LD_ADDR_VAR 0 3
3908: PUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 311
3918: ST_TO_ADDR
// if not tmp then
3919: LD_VAR 0 3
3923: NOT
3924: IFFALSE 3928
// continue ;
3926: GO 3901
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
3928: LD_VAR 0 1
3932: PPUSH
3933: CALL_OW 261
3937: PUSH
3938: LD_INT 90
3940: GREATER
3941: PUSH
3942: LD_VAR 0 1
3946: PPUSH
3947: CALL_OW 110
3951: PUSH
3952: LD_INT 2
3954: EQUAL
3955: AND
3956: IFFALSE 3972
// SetTag ( i , 0 ) else
3958: LD_VAR 0 1
3962: PPUSH
3963: LD_INT 0
3965: PPUSH
3966: CALL_OW 109
3970: GO 4015
// if GetTag ( i ) = 2 then
3972: LD_VAR 0 1
3976: PPUSH
3977: CALL_OW 110
3981: PUSH
3982: LD_INT 2
3984: EQUAL
3985: IFFALSE 4015
// begin x := rand ( 1 , 2 ) ;
3987: LD_ADDR_VAR 0 5
3991: PUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 2
3997: PPUSH
3998: CALL_OW 12
4002: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4003: LD_VAR 0 1
4007: PPUSH
4008: LD_INT 200
4010: PPUSH
4011: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4015: LD_VAR 0 1
4019: PPUSH
4020: CALL_OW 256
4024: PUSH
4025: LD_INT 600
4027: GREATEREQUAL
4028: PUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: CALL_OW 110
4038: NOT
4039: AND
4040: IFFALSE 4066
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4042: LD_VAR 0 1
4046: PPUSH
4047: LD_VAR 0 4
4051: PPUSH
4052: LD_VAR 0 1
4056: PPUSH
4057: CALL_OW 74
4061: PPUSH
4062: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4066: LD_VAR 0 1
4070: PPUSH
4071: CALL_OW 256
4075: PUSH
4076: LD_INT 600
4078: LESS
4079: PUSH
4080: LD_VAR 0 1
4084: PPUSH
4085: CALL_OW 110
4089: NOT
4090: AND
4091: IFFALSE 4120
// begin SetTag ( i , 1 ) ;
4093: LD_VAR 0 1
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4105: LD_VAR 0 1
4109: PPUSH
4110: LD_INT 112
4112: PPUSH
4113: LD_INT 119
4115: PPUSH
4116: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4120: LD_VAR 0 1
4124: PPUSH
4125: CALL_OW 110
4129: PUSH
4130: LD_INT 1
4132: EQUAL
4133: PUSH
4134: LD_VAR 0 1
4138: PPUSH
4139: LD_INT 112
4141: PPUSH
4142: LD_INT 119
4144: PPUSH
4145: CALL_OW 297
4149: PUSH
4150: LD_INT 9
4152: LESS
4153: AND
4154: PUSH
4155: LD_VAR 0 3
4159: AND
4160: IFFALSE 4262
// begin ComExitVehicle ( tmp ) ;
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4171: LD_VAR 0 3
4175: PPUSH
4176: LD_VAR 0 1
4180: PPUSH
4181: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4185: LD_INT 35
4187: PPUSH
4188: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4192: LD_VAR 0 1
4196: PPUSH
4197: CALL_OW 256
4201: PUSH
4202: LD_INT 1000
4204: EQUAL
4205: IFFALSE 4185
// ComEnterUnit ( tmp , i ) ;
4207: LD_VAR 0 3
4211: PPUSH
4212: LD_VAR 0 1
4216: PPUSH
4217: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4221: LD_VAR 0 1
4225: PPUSH
4226: CALL_OW 261
4230: PUSH
4231: LD_INT 50
4233: LESSEQUAL
4234: IFFALSE 4250
// SetTag ( i , 2 ) else
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 2
4243: PPUSH
4244: CALL_OW 109
4248: GO 4262
// SetTag ( i , 0 ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_INT 0
4257: PPUSH
4258: CALL_OW 109
// end ; end ;
4262: GO 3901
4264: POP
4265: POP
// end ;
4266: PPOPN 5
4268: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4269: LD_EXP 4
4273: NOT
4274: PUSH
4275: LD_EXP 38
4279: AND
4280: IFFALSE 4541
4282: GO 4284
4284: DISABLE
4285: LD_INT 0
4287: PPUSH
4288: PPUSH
4289: PPUSH
4290: PPUSH
// begin enable ;
4291: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4292: LD_ADDR_VAR 0 2
4296: PUSH
4297: LD_INT 3
4299: PPUSH
4300: LD_INT 22
4302: PUSH
4303: LD_INT 3
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: LD_INT 21
4312: PUSH
4313: LD_INT 3
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: PUSH
4320: LD_INT 3
4322: PUSH
4323: LD_INT 24
4325: PUSH
4326: LD_INT 1000
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: PPUSH
4342: CALL_OW 70
4346: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4347: LD_ADDR_VAR 0 3
4351: PUSH
4352: LD_EXP 38
4356: PPUSH
4357: LD_INT 50
4359: PUSH
4360: EMPTY
4361: LIST
4362: PPUSH
4363: CALL_OW 72
4367: ST_TO_ADDR
// if filter and tmp then
4368: LD_VAR 0 2
4372: PUSH
4373: LD_VAR 0 3
4377: AND
4378: IFFALSE 4470
// begin for i in tmp do
4380: LD_ADDR_VAR 0 1
4384: PUSH
4385: LD_VAR 0 3
4389: PUSH
4390: FOR_IN
4391: IFFALSE 4466
// begin if GetTag ( i ) = tEscape then
4393: LD_VAR 0 1
4397: PPUSH
4398: CALL_OW 110
4402: PUSH
4403: LD_EXP 17
4407: EQUAL
4408: IFFALSE 4412
// continue ;
4410: GO 4390
// if IsInUnit ( i ) then
4412: LD_VAR 0 1
4416: PPUSH
4417: CALL_OW 310
4421: IFFALSE 4434
// ComExitBuilding ( i ) else
4423: LD_VAR 0 1
4427: PPUSH
4428: CALL_OW 122
4432: GO 4464
// if not HasTask ( i ) then
4434: LD_VAR 0 1
4438: PPUSH
4439: CALL_OW 314
4443: NOT
4444: IFFALSE 4464
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 2
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: CALL_OW 130
// end ;
4464: GO 4390
4466: POP
4467: POP
// end else
4468: GO 4541
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4470: LD_VAR 0 3
4474: PPUSH
4475: LD_INT 3
4477: PUSH
4478: LD_INT 54
4480: PUSH
4481: EMPTY
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 72
4492: IFFALSE 4541
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4494: LD_ADDR_VAR 0 1
4498: PUSH
4499: LD_VAR 0 3
4503: PPUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 54
4509: PUSH
4510: EMPTY
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 72
4521: PUSH
4522: FOR_IN
4523: IFFALSE 4539
// ComEnterUnit ( i , ruMainBase ) ;
4525: LD_VAR 0 1
4529: PPUSH
4530: LD_INT 200
4532: PPUSH
4533: CALL_OW 120
4537: GO 4522
4539: POP
4540: POP
// end ; end ;
4541: PPOPN 4
4543: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4544: LD_EXP 4
4548: NOT
4549: PUSH
4550: LD_EXP 40
4554: AND
4555: IFFALSE 4834
4557: GO 4559
4559: DISABLE
4560: LD_INT 0
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
// begin enable ;
4566: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4567: LD_ADDR_VAR 0 2
4571: PUSH
4572: LD_INT 3
4574: PPUSH
4575: LD_INT 22
4577: PUSH
4578: LD_INT 3
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 21
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 3
4597: PUSH
4598: LD_INT 24
4600: PUSH
4601: LD_INT 1000
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL_OW 70
4621: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4622: LD_ADDR_VAR 0 3
4626: PUSH
4627: LD_EXP 40
4631: PPUSH
4632: LD_INT 50
4634: PUSH
4635: EMPTY
4636: LIST
4637: PPUSH
4638: CALL_OW 72
4642: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4643: LD_ADDR_VAR 0 4
4647: PUSH
4648: LD_INT 118
4650: PPUSH
4651: LD_INT 121
4653: PPUSH
4654: CALL_OW 428
4658: ST_TO_ADDR
// if filter and tmp then
4659: LD_VAR 0 2
4663: PUSH
4664: LD_VAR 0 3
4668: AND
4669: IFFALSE 4761
// begin for i in tmp do
4671: LD_ADDR_VAR 0 1
4675: PUSH
4676: LD_VAR 0 3
4680: PUSH
4681: FOR_IN
4682: IFFALSE 4757
// begin if GetTag ( i ) = tEscape then
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 110
4693: PUSH
4694: LD_EXP 17
4698: EQUAL
4699: IFFALSE 4703
// continue ;
4701: GO 4681
// if IsInUnit ( i ) then
4703: LD_VAR 0 1
4707: PPUSH
4708: CALL_OW 310
4712: IFFALSE 4725
// ComExitBuilding ( i ) else
4714: LD_VAR 0 1
4718: PPUSH
4719: CALL_OW 122
4723: GO 4755
// if not HasTask ( i ) then
4725: LD_VAR 0 1
4729: PPUSH
4730: CALL_OW 314
4734: NOT
4735: IFFALSE 4755
// ComHeal ( i , filter [ 1 ] ) ;
4737: LD_VAR 0 1
4741: PPUSH
4742: LD_VAR 0 2
4746: PUSH
4747: LD_INT 1
4749: ARRAY
4750: PPUSH
4751: CALL_OW 128
// end ;
4755: GO 4681
4757: POP
4758: POP
// end else
4759: GO 4834
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4761: LD_VAR 0 3
4765: PPUSH
4766: LD_INT 3
4768: PUSH
4769: LD_INT 54
4771: PUSH
4772: EMPTY
4773: LIST
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 72
4783: IFFALSE 4834
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4785: LD_ADDR_VAR 0 1
4789: PUSH
4790: LD_VAR 0 3
4794: PPUSH
4795: LD_INT 3
4797: PUSH
4798: LD_INT 54
4800: PUSH
4801: EMPTY
4802: LIST
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PPUSH
4808: CALL_OW 72
4812: PUSH
4813: FOR_IN
4814: IFFALSE 4832
// ComEnterUnit ( i , lab ) ;
4816: LD_VAR 0 1
4820: PPUSH
4821: LD_VAR 0 4
4825: PPUSH
4826: CALL_OW 120
4830: GO 4813
4832: POP
4833: POP
// end ; end ; end_of_file
4834: PPOPN 4
4836: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4837: LD_VAR 0 1
4841: PPUSH
4842: CALL 25632 0 1
// if un = Heike then
4846: LD_VAR 0 1
4850: PUSH
4851: LD_EXP 18
4855: EQUAL
4856: IFFALSE 4865
// YouLost ( Heike ) ;
4858: LD_STRING Heike
4860: PPUSH
4861: CALL_OW 104
// if un in ruEng then
4865: LD_VAR 0 1
4869: PUSH
4870: LD_EXP 38
4874: IN
4875: IFFALSE 4893
// ruEng := ruEng diff un ;
4877: LD_ADDR_EXP 38
4881: PUSH
4882: LD_EXP 38
4886: PUSH
4887: LD_VAR 0 1
4891: DIFF
4892: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
4893: LD_VAR 0 1
4897: PUSH
4898: LD_INT 22
4900: PUSH
4901: LD_INT 2
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 21
4910: PUSH
4911: LD_INT 1
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 23
4920: PUSH
4921: LD_INT 2
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: PPUSH
4933: CALL_OW 69
4937: IN
4938: IFFALSE 4954
// loseCounter := loseCounter + 1 ;
4940: LD_ADDR_EXP 6
4944: PUSH
4945: LD_EXP 6
4949: PUSH
4950: LD_INT 1
4952: PLUS
4953: ST_TO_ADDR
// end ;
4954: PPOPN 1
4956: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
4957: LD_INT 0
4959: PPUSH
4960: PPUSH
// begin if un in ruMobile then
4961: LD_VAR 0 2
4965: PUSH
4966: LD_EXP 41
4970: IN
4971: IFFALSE 5130
// begin ruMobile := ruMobile diff un ;
4973: LD_ADDR_EXP 41
4977: PUSH
4978: LD_EXP 41
4982: PUSH
4983: LD_VAR 0 2
4987: DIFF
4988: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
4989: LD_ADDR_VAR 0 5
4993: PUSH
4994: LD_VAR 0 2
4998: PPUSH
4999: CALL_OW 264
5003: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5004: LD_ADDR_VAR 0 6
5008: PUSH
5009: LD_INT 110
5011: PPUSH
5012: LD_INT 126
5014: PPUSH
5015: CALL_OW 428
5019: ST_TO_ADDR
// if not driver or not fac then
5020: LD_VAR 0 1
5024: NOT
5025: PUSH
5026: LD_VAR 0 6
5030: NOT
5031: OR
5032: IFFALSE 5036
// exit ;
5034: GO 5130
// AddComMoveXY ( driver , 111 , 121 ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: LD_INT 111
5043: PPUSH
5044: LD_INT 121
5046: PPUSH
5047: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5051: LD_VAR 0 1
5055: PPUSH
5056: LD_VAR 0 6
5060: PPUSH
5061: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5065: LD_INT 35
5067: PPUSH
5068: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5072: LD_VAR 0 1
5076: PPUSH
5077: CALL_OW 301
5081: PUSH
5082: LD_VAR 0 1
5086: PPUSH
5087: CALL_OW 310
5091: OR
5092: IFFALSE 5065
// if IsDead ( driver ) then
5094: LD_VAR 0 1
5098: PPUSH
5099: CALL_OW 301
5103: IFFALSE 5107
// exit ;
5105: GO 5130
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5107: LD_VAR 0 6
5111: PPUSH
5112: LD_INT 21
5114: PPUSH
5115: LD_INT 1
5117: PPUSH
5118: LD_INT 1
5120: PPUSH
5121: LD_VAR 0 5
5125: PPUSH
5126: CALL_OW 185
// end ; end ;
5130: PPOPN 6
5132: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5133: LD_VAR 0 1
5137: PPUSH
5138: LD_VAR 0 2
5142: PPUSH
5143: CALL 25754 0 2
// if GetSide ( fac ) = 3 then
5147: LD_VAR 0 2
5151: PPUSH
5152: CALL_OW 255
5156: PUSH
5157: LD_INT 3
5159: EQUAL
5160: IFFALSE 5206
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5162: LD_ADDR_EXP 41
5166: PUSH
5167: LD_EXP 41
5171: PPUSH
5172: LD_EXP 41
5176: PUSH
5177: LD_INT 1
5179: PLUS
5180: PPUSH
5181: LD_VAR 0 1
5185: PPUSH
5186: CALL_OW 1
5190: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5191: LD_VAR 0 1
5195: PPUSH
5196: LD_INT 110
5198: PPUSH
5199: LD_INT 117
5201: PPUSH
5202: CALL_OW 171
// end ; end ;
5206: PPOPN 2
5208: END
// on LeaveBuilding ( b , un ) do var barracks ;
5209: LD_INT 0
5211: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5212: LD_VAR 0 1
5216: PUSH
5217: LD_INT 130
5219: PPUSH
5220: LD_INT 17
5222: PPUSH
5223: CALL_OW 428
5227: PUSH
5228: LD_INT 138
5230: PPUSH
5231: LD_INT 22
5233: PPUSH
5234: CALL_OW 428
5238: PUSH
5239: LD_INT 123
5241: PPUSH
5242: LD_INT 17
5244: PPUSH
5245: CALL_OW 428
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: LIST
5254: IN
5255: IFFALSE 5279
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5257: LD_VAR 0 2
5261: PPUSH
5262: LD_INT 135
5264: PPUSH
5265: LD_INT 31
5267: PPUSH
5268: CALL_OW 428
5272: PPUSH
5273: CALL_OW 180
// exit ;
5277: GO 5553
// end ; if b = HexInfo ( 135 , 31 ) then
5279: LD_VAR 0 1
5283: PUSH
5284: LD_INT 135
5286: PPUSH
5287: LD_INT 31
5289: PPUSH
5290: CALL_OW 428
5294: EQUAL
5295: IFFALSE 5367
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5297: LD_VAR 0 2
5301: PPUSH
5302: LD_INT 106
5304: PPUSH
5305: LD_INT 51
5307: PPUSH
5308: CALL_OW 428
5312: PPUSH
5313: CALL_OW 180
// if not explodeFirstDepot then
5317: LD_EXP 12
5321: NOT
5322: IFFALSE 5365
// begin explodeFirstDepot := true ;
5324: LD_ADDR_EXP 12
5328: PUSH
5329: LD_INT 1
5331: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5332: LD_INT 525
5334: PPUSH
5335: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5339: LD_INT 127
5341: PPUSH
5342: LD_INT 27
5344: PPUSH
5345: LD_INT 1
5347: PPUSH
5348: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5352: LD_INT 125
5354: PPUSH
5355: LD_INT 29
5357: PPUSH
5358: LD_INT 1
5360: PPUSH
5361: CALL_OW 453
// end ; exit ;
5365: GO 5553
// end ; if b = HexInfo ( 106 , 51 ) then
5367: LD_VAR 0 1
5371: PUSH
5372: LD_INT 106
5374: PPUSH
5375: LD_INT 51
5377: PPUSH
5378: CALL_OW 428
5382: EQUAL
5383: IFFALSE 5483
// begin AddComMoveXY ( un , 106 , 93 ) ;
5385: LD_VAR 0 2
5389: PPUSH
5390: LD_INT 106
5392: PPUSH
5393: LD_INT 93
5395: PPUSH
5396: CALL_OW 171
// if not explodeSecondDepot then
5400: LD_EXP 13
5404: NOT
5405: IFFALSE 5481
// begin explodeSecondDepot := true ;
5407: LD_ADDR_EXP 13
5411: PUSH
5412: LD_INT 1
5414: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5415: LD_INT 420
5417: PPUSH
5418: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5422: LD_INT 111
5424: PPUSH
5425: LD_INT 75
5427: PPUSH
5428: LD_INT 1
5430: PPUSH
5431: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5435: LD_INT 111
5437: PPUSH
5438: LD_INT 75
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5448: LD_INT 108
5450: PPUSH
5451: LD_INT 69
5453: PPUSH
5454: LD_INT 1
5456: PPUSH
5457: CALL_OW 453
// wait ( 0 0$2 ) ;
5461: LD_INT 70
5463: PPUSH
5464: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5468: LD_INT 94
5470: PPUSH
5471: LD_INT 65
5473: PPUSH
5474: LD_INT 1
5476: PPUSH
5477: CALL_OW 453
// end ; exit ;
5481: GO 5553
// end ; if GetBType ( b ) = b_bunker then
5483: LD_VAR 0 1
5487: PPUSH
5488: CALL_OW 266
5492: PUSH
5493: LD_INT 32
5495: EQUAL
5496: IFFALSE 5553
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5498: LD_ADDR_VAR 0 3
5502: PUSH
5503: LD_VAR 0 2
5507: PPUSH
5508: LD_INT 5
5510: PPUSH
5511: CALL 1008 0 2
5515: ST_TO_ADDR
// if barracks then
5516: LD_VAR 0 3
5520: IFFALSE 5538
// AddComEnterUnit ( un , barracks ) else
5522: LD_VAR 0 2
5526: PPUSH
5527: LD_VAR 0 3
5531: PPUSH
5532: CALL_OW 180
5536: GO 5553
// AddComMoveXY ( un , 116 , 110 ) ;
5538: LD_VAR 0 2
5542: PPUSH
5543: LD_INT 116
5545: PPUSH
5546: LD_INT 110
5548: PPUSH
5549: CALL_OW 171
// end ; end ;
5553: PPOPN 3
5555: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5556: LD_VAR 0 1
5560: PUSH
5561: LD_EXP 23
5565: EQUAL
5566: PUSH
5567: LD_VAR 0 2
5571: PUSH
5572: LD_INT 3
5574: PUSH
5575: LD_INT 6
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: IN
5582: AND
5583: IFFALSE 5614
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5585: LD_ADDR_EXP 8
5589: PUSH
5590: LD_VAR 0 1
5594: PPUSH
5595: CALL_OW 250
5599: PUSH
5600: LD_VAR 0 1
5604: PPUSH
5605: CALL_OW 251
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: ST_TO_ADDR
// end ; end_of_file
5614: PPOPN 3
5616: END
// export function Action ; var i , un , veh , tmp , rutmp ; begin
5617: LD_INT 0
5619: PPUSH
5620: PPUSH
5621: PPUSH
5622: PPUSH
5623: PPUSH
5624: PPUSH
// InGameOn ;
5625: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5629: LD_INT 5
5631: PPUSH
5632: LD_INT 2
5634: PPUSH
5635: CALL_OW 343
// music_nat := 4 ;
5639: LD_ADDR_OWVAR 71
5643: PUSH
5644: LD_INT 4
5646: ST_TO_ADDR
// music_class := music_combat ;
5647: LD_ADDR_OWVAR 72
5651: PUSH
5652: LD_INT 1
5654: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5655: LD_INT 133
5657: PPUSH
5658: LD_INT 2
5660: PPUSH
5661: LD_INT 2
5663: PPUSH
5664: LD_INT 10
5666: PPUSH
5667: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5671: LD_INT 133
5673: PPUSH
5674: LD_INT 2
5676: PPUSH
5677: CALL_OW 86
// wait ( 0 0$1 ) ;
5681: LD_INT 35
5683: PPUSH
5684: CALL_OW 67
// uc_side := 6 ;
5688: LD_ADDR_OWVAR 20
5692: PUSH
5693: LD_INT 6
5695: ST_TO_ADDR
// uc_nation := 3 ;
5696: LD_ADDR_OWVAR 21
5700: PUSH
5701: LD_INT 3
5703: ST_TO_ADDR
// rutmp := [ ] ;
5704: LD_ADDR_VAR 0 6
5708: PUSH
5709: EMPTY
5710: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5711: LD_INT 6
5713: PPUSH
5714: LD_INT 3
5716: PPUSH
5717: LD_INT 21
5719: PPUSH
5720: LD_INT 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: LD_INT 44
5728: PPUSH
5729: LD_INT 66
5731: PPUSH
5732: CALL 336 0 7
// veh := CreateVehicle ;
5736: LD_ADDR_VAR 0 4
5740: PUSH
5741: CALL_OW 45
5745: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5746: LD_VAR 0 4
5750: PPUSH
5751: LD_INT 3
5753: PPUSH
5754: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5758: LD_VAR 0 4
5762: PPUSH
5763: LD_INT 8
5765: PPUSH
5766: LD_INT 0
5768: PPUSH
5769: CALL_OW 49
// SetLives ( veh , 500 ) ;
5773: LD_VAR 0 4
5777: PPUSH
5778: LD_INT 500
5780: PPUSH
5781: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
5785: LD_INT 0
5787: PPUSH
5788: LD_INT 3
5790: PPUSH
5791: LD_INT 3
5793: PPUSH
5794: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5798: CALL_OW 44
5802: PPUSH
5803: LD_VAR 0 4
5807: PPUSH
5808: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
5812: LD_VAR 0 4
5816: PPUSH
5817: LD_INT 133
5819: PPUSH
5820: LD_INT 11
5822: PPUSH
5823: CALL_OW 111
// rutmp := [ veh ] ;
5827: LD_ADDR_VAR 0 6
5831: PUSH
5832: LD_VAR 0 4
5836: PUSH
5837: EMPTY
5838: LIST
5839: ST_TO_ADDR
// for i := 1 to 4 do
5840: LD_ADDR_VAR 0 2
5844: PUSH
5845: DOUBLE
5846: LD_INT 1
5848: DEC
5849: ST_TO_ADDR
5850: LD_INT 4
5852: PUSH
5853: FOR_TO
5854: IFFALSE 5961
// begin PrepareHuman ( false , i , 2 ) ;
5856: LD_INT 0
5858: PPUSH
5859: LD_VAR 0 2
5863: PPUSH
5864: LD_INT 2
5866: PPUSH
5867: CALL_OW 380
// un := CreateHuman ;
5871: LD_ADDR_VAR 0 3
5875: PUSH
5876: CALL_OW 44
5880: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5881: LD_VAR 0 3
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
5893: LD_VAR 0 3
5897: PPUSH
5898: LD_INT 8
5900: PPUSH
5901: LD_INT 0
5903: PPUSH
5904: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
5908: LD_ADDR_VAR 0 6
5912: PUSH
5913: LD_VAR 0 6
5917: PPUSH
5918: LD_VAR 0 6
5922: PUSH
5923: LD_INT 1
5925: PLUS
5926: PPUSH
5927: LD_VAR 0 3
5931: PPUSH
5932: CALL_OW 1
5936: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
5937: LD_VAR 0 3
5941: PPUSH
5942: LD_INT 133
5944: PPUSH
5945: LD_INT 11
5947: PPUSH
5948: CALL_OW 111
// wait ( 0 0$0.5 ) ;
5952: LD_INT 18
5954: PPUSH
5955: CALL_OW 67
// end ;
5959: GO 5853
5961: POP
5962: POP
// for i in rutmp do
5963: LD_ADDR_VAR 0 2
5967: PUSH
5968: LD_VAR 0 6
5972: PUSH
5973: FOR_IN
5974: IFFALSE 6023
// begin AddComMoveXY ( i , 99 , 65 ) ;
5976: LD_VAR 0 2
5980: PPUSH
5981: LD_INT 99
5983: PPUSH
5984: LD_INT 65
5986: PPUSH
5987: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
5991: LD_VAR 0 2
5995: PPUSH
5996: LD_INT 76
5998: PPUSH
5999: LD_INT 108
6001: PPUSH
6002: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_INT 92
6013: PPUSH
6014: LD_INT 176
6016: PPUSH
6017: CALL_OW 171
// end ;
6021: GO 5973
6023: POP
6024: POP
// wait ( 0 0$10 ) ;
6025: LD_INT 350
6027: PPUSH
6028: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6032: LD_ADDR_VAR 0 5
6036: PUSH
6037: LD_EXP 18
6041: PUSH
6042: LD_EXP 19
6046: PUSH
6047: LD_EXP 20
6051: PUSH
6052: LD_EXP 21
6056: PUSH
6057: LD_EXP 22
6061: PUSH
6062: LD_EXP 23
6066: PUSH
6067: LD_EXP 24
6071: PUSH
6072: LD_EXP 25
6076: PUSH
6077: LD_EXP 27
6081: PUSH
6082: LD_EXP 28
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: LD_EXP 29
6103: UNION
6104: ST_TO_ADDR
// tmp := tmp diff 0 ;
6105: LD_ADDR_VAR 0 5
6109: PUSH
6110: LD_VAR 0 5
6114: PUSH
6115: LD_INT 0
6117: DIFF
6118: ST_TO_ADDR
// for i in heikeVehicles do
6119: LD_ADDR_VAR 0 2
6123: PUSH
6124: LD_EXP 30
6128: PUSH
6129: FOR_IN
6130: IFFALSE 6396
// begin if not tmp then
6132: LD_VAR 0 5
6136: NOT
6137: IFFALSE 6141
// continue ;
6139: GO 6129
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6141: LD_INT 2
6143: PPUSH
6144: LD_VAR 0 2
6148: PUSH
6149: LD_INT 5
6151: ARRAY
6152: PPUSH
6153: LD_VAR 0 2
6157: PUSH
6158: LD_INT 1
6160: ARRAY
6161: PPUSH
6162: LD_VAR 0 2
6166: PUSH
6167: LD_INT 2
6169: ARRAY
6170: PPUSH
6171: LD_VAR 0 2
6175: PUSH
6176: LD_INT 3
6178: ARRAY
6179: PPUSH
6180: LD_VAR 0 2
6184: PUSH
6185: LD_INT 4
6187: ARRAY
6188: PPUSH
6189: LD_INT 34
6191: PPUSH
6192: CALL 336 0 7
// veh := CreateVehicle ;
6196: LD_ADDR_VAR 0 4
6200: PUSH
6201: CALL_OW 45
6205: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6206: LD_VAR 0 2
6210: PUSH
6211: LD_INT 4
6213: ARRAY
6214: PUSH
6215: LD_INT 51
6217: PUSH
6218: LD_INT 32
6220: PUSH
6221: LD_INT 12
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: LIST
6228: IN
6229: IFFALSE 6309
// begin if i [ 7 ] [ 1 ] then
6231: LD_VAR 0 2
6235: PUSH
6236: LD_INT 7
6238: ARRAY
6239: PUSH
6240: LD_INT 1
6242: ARRAY
6243: IFFALSE 6270
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6245: LD_VAR 0 4
6249: PPUSH
6250: LD_INT 1
6252: PPUSH
6253: LD_VAR 0 2
6257: PUSH
6258: LD_INT 7
6260: ARRAY
6261: PUSH
6262: LD_INT 1
6264: ARRAY
6265: PPUSH
6266: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6270: LD_VAR 0 2
6274: PUSH
6275: LD_INT 7
6277: ARRAY
6278: PUSH
6279: LD_INT 2
6281: ARRAY
6282: IFFALSE 6309
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6284: LD_VAR 0 4
6288: PPUSH
6289: LD_INT 2
6291: PPUSH
6292: LD_VAR 0 2
6296: PUSH
6297: LD_INT 7
6299: ARRAY
6300: PUSH
6301: LD_INT 2
6303: ARRAY
6304: PPUSH
6305: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6309: LD_VAR 0 4
6313: PPUSH
6314: LD_INT 3
6316: PPUSH
6317: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6321: LD_VAR 0 4
6325: PPUSH
6326: LD_INT 8
6328: PPUSH
6329: LD_INT 0
6331: PPUSH
6332: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6336: LD_VAR 0 5
6340: PUSH
6341: LD_INT 1
6343: ARRAY
6344: PPUSH
6345: LD_VAR 0 4
6349: PPUSH
6350: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6354: LD_ADDR_VAR 0 5
6358: PUSH
6359: LD_VAR 0 5
6363: PPUSH
6364: LD_INT 1
6366: PPUSH
6367: CALL_OW 3
6371: ST_TO_ADDR
// ComAgressiveMove ( veh , 133 , 7 ) ;
6372: LD_VAR 0 4
6376: PPUSH
6377: LD_INT 133
6379: PPUSH
6380: LD_INT 7
6382: PPUSH
6383: CALL_OW 114
// wait ( 0 0$1 ) ;
6387: LD_INT 35
6389: PPUSH
6390: CALL_OW 67
// end ;
6394: GO 6129
6396: POP
6397: POP
// if tmp then
6398: LD_VAR 0 5
6402: IFFALSE 6458
// for i in tmp do
6404: LD_ADDR_VAR 0 2
6408: PUSH
6409: LD_VAR 0 5
6413: PUSH
6414: FOR_IN
6415: IFFALSE 6456
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6417: LD_VAR 0 2
6421: PPUSH
6422: LD_INT 10
6424: PPUSH
6425: LD_INT 0
6427: PPUSH
6428: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6432: LD_VAR 0 2
6436: PPUSH
6437: LD_INT 146
6439: PPUSH
6440: LD_INT 7
6442: PPUSH
6443: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6447: LD_INT 18
6449: PPUSH
6450: CALL_OW 67
// end ;
6454: GO 6414
6456: POP
6457: POP
// if heikeApes then
6458: LD_EXP 31
6462: IFFALSE 6518
// for i in heikeApes do
6464: LD_ADDR_VAR 0 2
6468: PUSH
6469: LD_EXP 31
6473: PUSH
6474: FOR_IN
6475: IFFALSE 6516
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6477: LD_VAR 0 2
6481: PPUSH
6482: LD_INT 10
6484: PPUSH
6485: LD_INT 0
6487: PPUSH
6488: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6492: LD_VAR 0 2
6496: PPUSH
6497: LD_INT 146
6499: PPUSH
6500: LD_INT 7
6502: PPUSH
6503: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6507: LD_INT 18
6509: PPUSH
6510: CALL_OW 67
// end ;
6514: GO 6474
6516: POP
6517: POP
// DialogueOn ;
6518: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6522: LD_EXP 18
6526: PPUSH
6527: LD_STRING DH-outpost-a-1
6529: PPUSH
6530: CALL_OW 88
// DialogueOff ;
6534: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6538: LD_INT 133
6540: PPUSH
6541: LD_INT 2
6543: PPUSH
6544: LD_INT 2
6546: PPUSH
6547: CALL_OW 331
// InGameOff ;
6551: CALL_OW 9
// music_nat := 0 ;
6555: LD_ADDR_OWVAR 71
6559: PUSH
6560: LD_INT 0
6562: ST_TO_ADDR
// music_class := 0 ;
6563: LD_ADDR_OWVAR 72
6567: PUSH
6568: LD_INT 0
6570: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6571: LD_STRING Outposts
6573: PPUSH
6574: CALL_OW 337
// SaveForQuickRestart ;
6578: CALL_OW 22
// end ;
6582: LD_VAR 0 1
6586: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6587: LD_INT 22
6589: PUSH
6590: LD_INT 2
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: LD_INT 91
6599: PUSH
6600: LD_EXP 21
6604: PUSH
6605: LD_INT 20
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PPUSH
6617: CALL_OW 69
6621: PUSH
6622: LD_EXP 3
6626: AND
6627: PUSH
6628: LD_EXP 21
6632: PPUSH
6633: CALL_OW 302
6637: AND
6638: IFFALSE 6885
6640: GO 6642
6642: DISABLE
6643: LD_INT 0
6645: PPUSH
6646: PPUSH
6647: PPUSH
6648: PPUSH
// begin IbrahimBetrayal ;
6649: CALL 6888 0 0
// repeat wait ( 0 0$1 ) ;
6653: LD_INT 35
6655: PPUSH
6656: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6660: LD_EXP 21
6664: PPUSH
6665: CALL_OW 301
6669: PUSH
6670: LD_INT 22
6672: PUSH
6673: LD_INT 2
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: LD_INT 91
6682: PUSH
6683: LD_EXP 21
6687: PUSH
6688: LD_INT 6
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PPUSH
6700: CALL_OW 69
6704: PUSH
6705: LD_EXP 21
6709: PPUSH
6710: CALL_OW 302
6714: AND
6715: OR
6716: IFFALSE 6653
// if IsDead ( Ibrahim ) then
6718: LD_EXP 21
6722: PPUSH
6723: CALL_OW 301
6727: IFFALSE 6731
// exit ;
6729: GO 6885
// x := GetX ( Ibrahim ) ;
6731: LD_ADDR_VAR 0 1
6735: PUSH
6736: LD_EXP 21
6740: PPUSH
6741: CALL_OW 250
6745: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
6746: LD_ADDR_VAR 0 2
6750: PUSH
6751: LD_EXP 21
6755: PPUSH
6756: CALL_OW 251
6760: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
6761: LD_ADDR_VAR 0 3
6765: PUSH
6766: LD_EXP 21
6770: PPUSH
6771: CALL_OW 254
6775: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
6776: LD_ADDR_VAR 0 4
6780: PUSH
6781: LD_EXP 21
6785: PPUSH
6786: CALL_OW 256
6790: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
6791: LD_EXP 21
6795: PPUSH
6796: CALL_OW 64
// uc_side := 2 ;
6800: LD_ADDR_OWVAR 20
6804: PUSH
6805: LD_INT 2
6807: ST_TO_ADDR
// uc_nation := 2 ;
6808: LD_ADDR_OWVAR 21
6812: PUSH
6813: LD_INT 2
6815: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
6816: LD_ADDR_EXP 21
6820: PUSH
6821: LD_STRING Ibrahim
6823: PPUSH
6824: LD_INT 0
6826: PPUSH
6827: LD_STRING 
6829: PPUSH
6830: CALL 29943 0 3
6834: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
6835: LD_EXP 21
6839: PPUSH
6840: LD_VAR 0 3
6844: PPUSH
6845: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
6849: LD_EXP 21
6853: PPUSH
6854: LD_VAR 0 1
6858: PPUSH
6859: LD_VAR 0 2
6863: PPUSH
6864: LD_INT 0
6866: PPUSH
6867: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
6871: LD_EXP 21
6875: PPUSH
6876: LD_VAR 0 4
6880: PPUSH
6881: CALL_OW 234
// end ;
6885: PPOPN 4
6887: END
// export function IbrahimBetrayal ; var i , tmp ; begin
6888: LD_INT 0
6890: PPUSH
6891: PPUSH
6892: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
6893: LD_INT 122
6895: PPUSH
6896: LD_INT 77
6898: PPUSH
6899: LD_INT 2
6901: PPUSH
6902: LD_INT 6
6904: NEG
6905: PPUSH
6906: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
6910: LD_EXP 21
6914: PPUSH
6915: LD_INT 123
6917: PPUSH
6918: LD_INT 79
6920: PPUSH
6921: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
6925: LD_EXP 21
6929: PPUSH
6930: LD_INT 125
6932: PPUSH
6933: LD_INT 82
6935: PPUSH
6936: CALL_OW 178
// wait ( 0 0$2 ) ;
6940: LD_INT 70
6942: PPUSH
6943: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
6947: LD_EXP 42
6951: PPUSH
6952: LD_EXP 21
6956: PPUSH
6957: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
6961: LD_EXP 42
6965: PPUSH
6966: LD_STRING DRum-outpost-b-3
6968: PPUSH
6969: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
6973: LD_ADDR_VAR 0 3
6977: PUSH
6978: LD_INT 125
6980: PPUSH
6981: LD_INT 76
6983: PPUSH
6984: CALL_OW 428
6988: PUSH
6989: LD_INT 125
6991: PPUSH
6992: LD_INT 79
6994: PPUSH
6995: CALL_OW 428
6999: PUSH
7000: LD_INT 125
7002: PPUSH
7003: LD_INT 82
7005: PPUSH
7006: CALL_OW 428
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: LIST
7015: ST_TO_ADDR
// for i in tmp do
7016: LD_ADDR_VAR 0 2
7020: PUSH
7021: LD_VAR 0 3
7025: PUSH
7026: FOR_IN
7027: IFFALSE 7043
// SetLives ( i , 200 ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_INT 200
7036: PPUSH
7037: CALL_OW 234
7041: GO 7026
7043: POP
7044: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7045: LD_EXP 21
7049: PPUSH
7050: LD_STRING DI-outpost-b-4
7052: PPUSH
7053: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7057: LD_EXP 21
7061: PPUSH
7062: LD_INT 5
7064: PPUSH
7065: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7069: LD_EXP 21
7073: PUSH
7074: LD_EXP 42
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PPUSH
7083: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7087: LD_INT 122
7089: PPUSH
7090: LD_INT 77
7092: PPUSH
7093: LD_INT 2
7095: PPUSH
7096: CALL_OW 331
// if Givi then
7100: LD_EXP 19
7104: IFFALSE 7120
// Say ( Givi , DG-1-outpost-b-5 ) else
7106: LD_EXP 19
7110: PPUSH
7111: LD_STRING DG-1-outpost-b-5
7113: PPUSH
7114: CALL_OW 88
7118: GO 7185
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7120: LD_EXP 29
7124: PPUSH
7125: LD_INT 26
7127: PUSH
7128: LD_INT 2
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PPUSH
7135: CALL_OW 72
7139: PUSH
7140: LD_INT 1
7142: ARRAY
7143: PPUSH
7144: LD_STRING DArf-outpost-b-a-5
7146: PPUSH
7147: CALL_OW 88
7151: NOT
7152: IFFALSE 7185
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7154: LD_EXP 29
7158: PPUSH
7159: LD_INT 26
7161: PUSH
7162: LD_INT 1
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PPUSH
7169: CALL_OW 72
7173: PUSH
7174: LD_INT 1
7176: ARRAY
7177: PPUSH
7178: LD_STRING DArm-outpost-b-a-5
7180: PPUSH
7181: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7185: LD_INT 35
7187: PPUSH
7188: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7192: LD_EXP 21
7196: PPUSH
7197: CALL_OW 301
7201: PUSH
7202: LD_EXP 18
7206: PPUSH
7207: LD_EXP 21
7211: PPUSH
7212: CALL_OW 296
7216: PUSH
7217: LD_INT 6
7219: LESS
7220: PUSH
7221: LD_EXP 21
7225: PPUSH
7226: CALL_OW 302
7230: AND
7231: OR
7232: IFFALSE 7185
// if IsDead ( Ibrahim ) then
7234: LD_EXP 21
7238: PPUSH
7239: CALL_OW 301
7243: IFFALSE 7259
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7245: LD_EXP 18
7249: PPUSH
7250: LD_STRING DH-ibrahimdead-1
7252: PPUSH
7253: CALL_OW 88
// exit ;
7257: GO 7300
// end ; CenterNowOnUnits ( Ibrahim ) ;
7259: LD_EXP 21
7263: PPUSH
7264: CALL_OW 87
// DialogueOn ;
7268: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7272: LD_EXP 21
7276: PPUSH
7277: LD_STRING DI-ibrahimlives-1
7279: PPUSH
7280: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7284: LD_EXP 18
7288: PPUSH
7289: LD_STRING DH-Ibrahimlives-2
7291: PPUSH
7292: CALL_OW 88
// DialogueOff ;
7296: CALL_OW 7
// end ;
7300: LD_VAR 0 1
7304: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7305: LD_INT 11
7307: PPUSH
7308: LD_INT 22
7310: PUSH
7311: LD_INT 2
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PPUSH
7318: CALL_OW 70
7322: PUSH
7323: LD_OWVAR 1
7327: PUSH
7328: LD_INT 18900
7330: PUSH
7331: LD_INT 16800
7333: PUSH
7334: LD_INT 16800
7336: PUSH
7337: LD_INT 15750
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: PUSH
7346: LD_OWVAR 67
7350: ARRAY
7351: GREATEREQUAL
7352: OR
7353: IFFALSE 7861
7355: GO 7357
7357: DISABLE
// begin outerAreaAchived := true ;
7358: LD_ADDR_EXP 15
7362: PUSH
7363: LD_INT 1
7365: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7366: LD_INT 700
7368: PPUSH
7369: CALL_OW 67
// DialogueOn ;
7373: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7377: LD_EXP 26
7381: PPUSH
7382: LD_STRING DShar-radio-1
7384: PPUSH
7385: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7389: LD_EXP 26
7393: PPUSH
7394: LD_STRING DShar-radio-2
7396: PPUSH
7397: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7401: LD_EXP 18
7405: PPUSH
7406: LD_STRING DH-radio-2
7408: PPUSH
7409: CALL_OW 88
// DialogueOff ;
7413: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7417: LD_STRING Gaidar
7419: PPUSH
7420: CALL_OW 337
// if Difficulty < 3 then
7424: LD_OWVAR 67
7428: PUSH
7429: LD_INT 3
7431: LESS
7432: IFFALSE 7498
// begin DialogueOn ;
7434: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7438: LD_INT 11
7440: PPUSH
7441: LD_INT 14
7443: PPUSH
7444: LD_INT 2
7446: PPUSH
7447: LD_INT 6
7449: NEG
7450: PPUSH
7451: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7455: LD_INT 11
7457: PPUSH
7458: LD_INT 14
7460: PPUSH
7461: LD_INT 2
7463: PPUSH
7464: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7468: LD_INT 11
7470: PPUSH
7471: LD_INT 14
7473: PPUSH
7474: CALL_OW 84
// dwait ( 0 0$1 ) ;
7478: LD_INT 35
7480: PPUSH
7481: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7485: LD_EXP 18
7489: PPUSH
7490: CALL_OW 87
// DialogueOff ;
7494: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7498: LD_INT 1050
7500: PUSH
7501: LD_INT 350
7503: PPUSH
7504: LD_INT 525
7506: PPUSH
7507: CALL_OW 12
7511: PUSH
7512: LD_OWVAR 67
7516: MUL
7517: PLUS
7518: PPUSH
7519: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7523: LD_INT 35
7525: PPUSH
7526: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7530: LD_INT 2
7532: PPUSH
7533: LD_INT 1
7535: PPUSH
7536: CALL_OW 428
7540: PUSH
7541: LD_INT 0
7543: EQUAL
7544: IFFALSE 7523
// SetDir ( Gaidar , 2 ) ;
7546: LD_EXP 35
7550: PPUSH
7551: LD_INT 2
7553: PPUSH
7554: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7558: LD_EXP 35
7562: PPUSH
7563: LD_INT 2
7565: PPUSH
7566: LD_INT 1
7568: PPUSH
7569: LD_INT 0
7571: PPUSH
7572: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7576: LD_EXP 35
7580: PPUSH
7581: LD_INT 19
7583: PPUSH
7584: LD_INT 24
7586: PPUSH
7587: CALL_OW 111
// if Difficulty < 3 then
7591: LD_OWVAR 67
7595: PUSH
7596: LD_INT 3
7598: LESS
7599: IFFALSE 7638
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7601: LD_INT 11
7603: PPUSH
7604: LD_INT 14
7606: PPUSH
7607: LD_INT 2
7609: PPUSH
7610: LD_INT 6
7612: NEG
7613: PPUSH
7614: CALL_OW 330
// wait ( 0 0$2 ) ;
7618: LD_INT 70
7620: PPUSH
7621: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
7625: LD_INT 11
7627: PPUSH
7628: LD_INT 14
7630: PPUSH
7631: LD_INT 2
7633: PPUSH
7634: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
7638: LD_EXP 35
7642: PPUSH
7643: LD_INT 210
7645: PPUSH
7646: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7650: LD_EXP 35
7654: PPUSH
7655: LD_INT 38
7657: PPUSH
7658: LD_INT 47
7660: PPUSH
7661: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7665: LD_EXP 35
7669: PPUSH
7670: LD_INT 32
7672: PPUSH
7673: LD_INT 59
7675: PPUSH
7676: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
7680: LD_EXP 35
7684: PPUSH
7685: LD_INT 350
7687: PPUSH
7688: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
7692: LD_EXP 35
7696: PPUSH
7697: LD_INT 62
7699: PPUSH
7700: LD_INT 116
7702: PPUSH
7703: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
7707: LD_EXP 35
7711: PPUSH
7712: LD_INT 92
7714: PPUSH
7715: LD_INT 177
7717: PPUSH
7718: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7722: LD_INT 35
7724: PPUSH
7725: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
7729: LD_EXP 35
7733: PPUSH
7734: CALL_OW 301
7738: PUSH
7739: LD_EXP 35
7743: PPUSH
7744: LD_INT 92
7746: PPUSH
7747: LD_INT 177
7749: PPUSH
7750: CALL_OW 307
7754: OR
7755: IFFALSE 7722
// if IsAt ( Gaidar , 92 , 177 ) then
7757: LD_EXP 35
7761: PPUSH
7762: LD_INT 92
7764: PPUSH
7765: LD_INT 177
7767: PPUSH
7768: CALL_OW 307
7772: IFFALSE 7839
// begin DialogueOn ;
7774: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
7778: LD_INT 92
7780: PPUSH
7781: LD_INT 177
7783: PPUSH
7784: LD_INT 2
7786: PPUSH
7787: LD_INT 3
7789: NEG
7790: PPUSH
7791: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
7795: LD_EXP 35
7799: PPUSH
7800: CALL_OW 87
// dwait ( 0 0$2 ) ;
7804: LD_INT 70
7806: PPUSH
7807: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
7811: LD_INT 92
7813: PPUSH
7814: LD_INT 177
7816: PPUSH
7817: LD_INT 2
7819: PPUSH
7820: CALL_OW 331
// DialogueOff ;
7824: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
7828: LD_EXP 35
7832: PPUSH
7833: CALL_OW 64
// exit ;
7837: GO 7861
// end ; gaidarKilled := true ;
7839: LD_ADDR_EXP 14
7843: PUSH
7844: LD_INT 1
7846: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
7847: LD_STRING GaidarKilled
7849: PPUSH
7850: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
7854: LD_STRING ACH_COMMISAR
7856: PPUSH
7857: CALL_OW 543
// end ;
7861: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
7862: LD_INT 2
7864: PPUSH
7865: LD_EXP 35
7869: PPUSH
7870: CALL_OW 292
7874: IFFALSE 7891
7876: GO 7878
7878: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
7879: LD_EXP 35
7883: PPUSH
7884: LD_STRING DT-objective-1
7886: PPUSH
7887: CALL_OW 88
7891: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
7892: LD_INT 22
7894: PUSH
7895: LD_INT 2
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PUSH
7902: LD_INT 2
7904: PUSH
7905: LD_INT 95
7907: PUSH
7908: LD_INT 5
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 95
7917: PUSH
7918: LD_INT 6
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 95
7927: PUSH
7928: LD_INT 7
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PPUSH
7945: CALL_OW 69
7949: IFFALSE 7986
7951: GO 7953
7953: DISABLE
// begin DialogueOn ;
7954: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
7958: LD_EXP 18
7962: PPUSH
7963: LD_STRING DH-outpost-last-1
7965: PPUSH
7966: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
7970: LD_EXP 34
7974: PPUSH
7975: LD_STRING DB-outpost-last-2
7977: PPUSH
7978: CALL_OW 94
// DialogueOff ;
7982: CALL_OW 7
// end ;
7986: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
7987: LD_INT 200
7989: PPUSH
7990: CALL_OW 256
7994: PUSH
7995: LD_INT 999
7997: LESS
7998: PUSH
7999: LD_INT 200
8001: PPUSH
8002: CALL_OW 255
8006: PUSH
8007: LD_INT 2
8009: EQUAL
8010: OR
8011: IFFALSE 8184
8013: GO 8015
8015: DISABLE
8016: LD_INT 0
8018: PPUSH
8019: PPUSH
// begin if not earlyEscape then
8020: LD_EXP 16
8024: NOT
8025: IFFALSE 8051
// begin SayRadio ( Burlak , DB-end-1 ) ;
8027: LD_EXP 34
8031: PPUSH
8032: LD_STRING DB-end-1
8034: PPUSH
8035: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8039: LD_EXP 18
8043: PPUSH
8044: LD_STRING DH-end-2
8046: PPUSH
8047: CALL_OW 88
// end ; if tick <= 15 15$00 then
8051: LD_OWVAR 1
8055: PUSH
8056: LD_INT 31500
8058: LESSEQUAL
8059: IFFALSE 8068
// SetAchievement ( ACH_FIST ) ;
8061: LD_STRING ACH_FIST
8063: PPUSH
8064: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8068: LD_ADDR_VAR 0 2
8072: PUSH
8073: LD_INT 22
8075: PUSH
8076: LD_INT 3
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 3
8085: PUSH
8086: LD_INT 21
8088: PUSH
8089: LD_INT 3
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PPUSH
8104: CALL_OW 69
8108: ST_TO_ADDR
// if not tmp then
8109: LD_VAR 0 2
8113: NOT
8114: IFFALSE 8118
// exit ;
8116: GO 8184
// for i in tmp do
8118: LD_ADDR_VAR 0 1
8122: PUSH
8123: LD_VAR 0 2
8127: PUSH
8128: FOR_IN
8129: IFFALSE 8182
// begin SetTag ( i , tEscape ) ;
8131: LD_VAR 0 1
8135: PPUSH
8136: LD_EXP 17
8140: PPUSH
8141: CALL_OW 109
// if IsInUnit ( i ) then
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 310
8154: IFFALSE 8165
// ComExitBuilding ( i ) ;
8156: LD_VAR 0 1
8160: PPUSH
8161: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8165: LD_VAR 0 1
8169: PPUSH
8170: LD_INT 92
8172: PPUSH
8173: LD_INT 177
8175: PPUSH
8176: CALL_OW 171
// end ;
8180: GO 8128
8182: POP
8183: POP
// end ;
8184: PPOPN 2
8186: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8187: LD_INT 4
8189: PPUSH
8190: LD_INT 22
8192: PUSH
8193: LD_INT 2
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PPUSH
8200: CALL_OW 70
8204: PUSH
8205: LD_EXP 15
8209: NOT
8210: AND
8211: PUSH
8212: LD_EXP 27
8216: PPUSH
8217: CALL_OW 302
8221: AND
8222: IFFALSE 8462
8224: GO 8226
8226: DISABLE
// begin DialogueOn ;
8227: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8231: LD_INT 111
8233: PPUSH
8234: LD_INT 54
8236: PPUSH
8237: LD_INT 2
8239: PPUSH
8240: LD_INT 16
8242: NEG
8243: PPUSH
8244: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8248: LD_INT 111
8250: PPUSH
8251: LD_INT 53
8253: PPUSH
8254: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8258: LD_INT 10
8260: PPUSH
8261: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8265: LD_EXP 27
8269: PPUSH
8270: LD_STRING DKs-Hannibal-1
8272: PPUSH
8273: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8277: LD_EXP 27
8281: PPUSH
8282: LD_STRING DKs-Hannibal-2
8284: PPUSH
8285: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8289: LD_EXP 27
8293: PPUSH
8294: LD_STRING DKs-Hannibal-3
8296: PPUSH
8297: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8301: LD_EXP 27
8305: PPUSH
8306: LD_STRING DKs-Hannibal-4
8308: PPUSH
8309: CALL_OW 88
// dwait ( 0 0$1 ) ;
8313: LD_INT 35
8315: PPUSH
8316: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8320: LD_INT 111
8322: PPUSH
8323: LD_INT 54
8325: PPUSH
8326: LD_INT 2
8328: PPUSH
8329: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8333: LD_INT 173
8335: PPUSH
8336: LD_INT 76
8338: PPUSH
8339: LD_INT 2
8341: PPUSH
8342: LD_INT 12
8344: NEG
8345: PPUSH
8346: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8350: LD_INT 173
8352: PPUSH
8353: LD_INT 76
8355: PPUSH
8356: LD_INT 2
8358: PPUSH
8359: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8363: LD_INT 173
8365: PPUSH
8366: LD_INT 76
8368: PPUSH
8369: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8373: LD_EXP 27
8377: PPUSH
8378: LD_STRING DKs-Hannibal-5
8380: PPUSH
8381: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8385: LD_EXP 22
8389: PUSH
8390: LD_INT 22
8392: PUSH
8393: LD_INT 2
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: LD_INT 34
8402: PUSH
8403: LD_INT 26
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PPUSH
8414: CALL_OW 69
8418: NOT
8419: AND
8420: IFFALSE 8458
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8422: LD_EXP 22
8426: PPUSH
8427: LD_STRING DKam-Hannibal-a-6
8429: PPUSH
8430: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8434: LD_EXP 22
8438: PPUSH
8439: LD_STRING DKam-Hannibal-a-7
8441: PPUSH
8442: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8446: LD_EXP 19
8450: PPUSH
8451: LD_STRING DG-Hannibal-a-8
8453: PPUSH
8454: CALL_OW 88
// end ; DialogueOff ;
8458: CALL_OW 7
// end ;
8462: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8463: LD_INT 225
8465: PPUSH
8466: CALL_OW 302
8470: PUSH
8471: LD_INT 200
8473: PPUSH
8474: CALL_OW 302
8478: AND
8479: PUSH
8480: LD_INT 12
8482: PPUSH
8483: LD_INT 21
8485: PUSH
8486: LD_INT 3
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PPUSH
8493: CALL_OW 70
8497: PUSH
8498: LD_INT 2
8500: GREATER
8501: AND
8502: PUSH
8503: LD_INT 13
8505: PPUSH
8506: LD_INT 22
8508: PUSH
8509: LD_INT 2
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PPUSH
8516: CALL_OW 70
8520: PUSH
8521: LD_INT 3
8523: GREATER
8524: AND
8525: IFFALSE 8538
8527: GO 8529
8529: DISABLE
// hannibalPath := true ;
8530: LD_ADDR_EXP 9
8534: PUSH
8535: LD_INT 1
8537: ST_TO_ADDR
8538: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8539: LD_EXP 9
8543: PUSH
8544: LD_INT 6
8546: PPUSH
8547: LD_INT 22
8549: PUSH
8550: LD_INT 2
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 70
8561: AND
8562: IFFALSE 8907
8564: GO 8566
8566: DISABLE
8567: LD_INT 0
8569: PPUSH
8570: PPUSH
8571: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: LD_INT 6
8579: PPUSH
8580: LD_INT 22
8582: PUSH
8583: LD_INT 2
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PPUSH
8590: CALL_OW 70
8594: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8595: LD_ADDR_VAR 0 3
8599: PUSH
8600: LD_VAR 0 2
8604: PPUSH
8605: LD_INT 34
8607: PUSH
8608: LD_INT 26
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PPUSH
8615: CALL_OW 72
8619: PUSH
8620: LD_INT 0
8622: GREATER
8623: ST_TO_ADDR
// DialogueOn ;
8624: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8628: LD_EXP 18
8632: PPUSH
8633: LD_STRING DH-Cleverattack-1
8635: PPUSH
8636: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8640: LD_EXP 18
8644: PPUSH
8645: LD_STRING DH-Cleverattack-2
8647: PPUSH
8648: CALL_OW 88
// if hasFlameThrower then
8652: LD_VAR 0 3
8656: IFFALSE 8684
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8658: LD_EXP 34
8662: PPUSH
8663: LD_STRING DB-Cleverattack-3
8665: PPUSH
8666: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8670: LD_EXP 18
8674: PPUSH
8675: LD_STRING DH-Cleverattack-4
8677: PPUSH
8678: CALL_OW 88
// end else
8682: GO 8708
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
8684: LD_EXP 34
8688: PPUSH
8689: LD_STRING DB-Cleverattack-a-3
8691: PPUSH
8692: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
8696: LD_EXP 18
8700: PPUSH
8701: LD_STRING DH-Cleverattack-a-4
8703: PPUSH
8704: CALL_OW 88
// end ; DialogueOff ;
8708: CALL_OW 7
// if not hasFlameThrower then
8712: LD_VAR 0 3
8716: NOT
8717: IFFALSE 8721
// exit ;
8719: GO 8907
// earlyEscape := true ;
8721: LD_ADDR_EXP 16
8725: PUSH
8726: LD_INT 1
8728: ST_TO_ADDR
// wait ( 0 0$4 ) ;
8729: LD_INT 140
8731: PPUSH
8732: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
8736: LD_ADDR_VAR 0 2
8740: PUSH
8741: LD_INT 22
8743: PUSH
8744: LD_INT 3
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PUSH
8751: LD_INT 2
8753: PUSH
8754: LD_INT 25
8756: PUSH
8757: LD_INT 1
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: LD_INT 25
8766: PUSH
8767: LD_INT 2
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: PUSH
8774: LD_INT 25
8776: PUSH
8777: LD_INT 4
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PPUSH
8794: CALL_OW 69
8798: PUSH
8799: LD_EXP 21
8803: PUSH
8804: LD_EXP 36
8808: PUSH
8809: LD_EXP 35
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: LIST
8818: DIFF
8819: ST_TO_ADDR
// for i in tmp do
8820: LD_ADDR_VAR 0 1
8824: PUSH
8825: LD_VAR 0 2
8829: PUSH
8830: FOR_IN
8831: IFFALSE 8905
// begin if Prob ( 40 + 10 * Difficulty ) then
8833: LD_INT 40
8835: PUSH
8836: LD_INT 10
8838: PUSH
8839: LD_OWVAR 67
8843: MUL
8844: PLUS
8845: PPUSH
8846: CALL_OW 13
8850: IFFALSE 8854
// continue ;
8852: GO 8830
// SetTag ( i , tEscape ) ;
8854: LD_VAR 0 1
8858: PPUSH
8859: LD_EXP 17
8863: PPUSH
8864: CALL_OW 109
// if IsInUnit ( i ) then
8868: LD_VAR 0 1
8872: PPUSH
8873: CALL_OW 310
8877: IFFALSE 8888
// ComExitBuilding ( i ) ;
8879: LD_VAR 0 1
8883: PPUSH
8884: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8888: LD_VAR 0 1
8892: PPUSH
8893: LD_INT 92
8895: PPUSH
8896: LD_INT 177
8898: PPUSH
8899: CALL_OW 171
// end ;
8903: GO 8830
8905: POP
8906: POP
// end ;
8907: PPOPN 3
8909: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
8910: LD_INT 9
8912: PPUSH
8913: LD_INT 2
8915: PUSH
8916: LD_INT 22
8918: PUSH
8919: LD_INT 3
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: LD_INT 22
8928: PUSH
8929: LD_INT 6
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 70
8945: IFFALSE 9043
8947: GO 8949
8949: DISABLE
8950: LD_INT 0
8952: PPUSH
// begin enable ;
8953: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
8954: LD_ADDR_VAR 0 1
8958: PUSH
8959: LD_INT 9
8961: PPUSH
8962: LD_INT 2
8964: PUSH
8965: LD_INT 22
8967: PUSH
8968: LD_INT 3
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: LD_INT 22
8977: PUSH
8978: LD_INT 6
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: LIST
8989: PPUSH
8990: CALL_OW 70
8994: PUSH
8995: FOR_IN
8996: IFFALSE 9041
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
8998: LD_VAR 0 1
9002: PPUSH
9003: CALL_OW 110
9007: PUSH
9008: LD_EXP 17
9012: EQUAL
9013: PUSH
9014: LD_VAR 0 1
9018: PPUSH
9019: CALL_OW 255
9023: PUSH
9024: LD_INT 6
9026: EQUAL
9027: OR
9028: IFFALSE 9039
// RemoveUnit ( i ) ;
9030: LD_VAR 0 1
9034: PPUSH
9035: CALL_OW 64
9039: GO 8995
9041: POP
9042: POP
// end ;
9043: PPOPN 1
9045: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9046: LD_EXP 23
9050: PUSH
9051: LD_EXP 23
9055: PPUSH
9056: CALL_OW 256
9060: PUSH
9061: LD_INT 3
9063: LESS
9064: AND
9065: IFFALSE 9111
9067: GO 9069
9069: DISABLE
// begin DialogueOn ;
9070: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9074: LD_EXP 23
9078: PPUSH
9079: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9083: LD_EXP 23
9087: PPUSH
9088: LD_STRING DK-Kkilled-1
9090: PPUSH
9091: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9095: LD_EXP 18
9099: PPUSH
9100: LD_STRING DH-Kkilled-2
9102: PPUSH
9103: CALL_OW 88
// DialogueOff ;
9107: CALL_OW 7
// end ;
9111: END
// every 0 0$1 trigger kaiaKilledByRussian do
9112: LD_EXP 8
9116: IFFALSE 9133
9118: GO 9120
9120: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9121: LD_EXP 18
9125: PPUSH
9126: LD_STRING DH-Kkilled-3
9128: PPUSH
9129: CALL_OW 88
9133: END
// every 0 0$1 trigger tick >= 24 24$00 do
9134: LD_OWVAR 1
9138: PUSH
9139: LD_INT 50400
9141: GREATEREQUAL
9142: IFFALSE 9179
9144: GO 9146
9146: DISABLE
// begin DialogueOn ;
9147: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9151: LD_EXP 26
9155: PPUSH
9156: LD_STRING DShar-slow-1
9158: PPUSH
9159: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9163: LD_EXP 26
9167: PPUSH
9168: LD_STRING DShar-slow-2
9170: PPUSH
9171: CALL_OW 94
// DialogueOff ;
9175: CALL_OW 7
// end ;
9179: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9180: LD_OWVAR 1
9184: PUSH
9185: LD_INT 84000
9187: PUSH
9188: LD_INT 75600
9190: PUSH
9191: LD_INT 67200
9193: PUSH
9194: LD_INT 63000
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: PUSH
9203: LD_OWVAR 67
9207: ARRAY
9208: GREATEREQUAL
9209: IFFALSE 9253
9211: GO 9213
9213: DISABLE
// begin DialogueOn ;
9214: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9218: LD_EXP 26
9222: PPUSH
9223: LD_STRING DShar-fail-1
9225: PPUSH
9226: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9230: LD_EXP 26
9234: PPUSH
9235: LD_STRING DShar-fail-2
9237: PPUSH
9238: CALL_OW 94
// DialogueOff ;
9242: CALL_OW 7
// YouLost ( Time ) ;
9246: LD_STRING Time
9248: PPUSH
9249: CALL_OW 104
// end ;
9253: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9254: LD_INT 22
9256: PUSH
9257: LD_INT 3
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 2
9266: PUSH
9267: LD_INT 30
9269: PUSH
9270: LD_INT 1
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: LD_INT 30
9279: PUSH
9280: LD_INT 0
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PPUSH
9296: CALL_OW 69
9300: PUSH
9301: LD_INT 0
9303: EQUAL
9304: IFFALSE 9815
9306: GO 9308
9308: DISABLE
9309: LD_INT 0
9311: PPUSH
// begin if ( tick + gameTime ) <= [ 75 75$00 , 70 70$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9312: LD_OWVAR 1
9316: PUSH
9317: LD_EXP 5
9321: PLUS
9322: PUSH
9323: LD_INT 157500
9325: PUSH
9326: LD_INT 147000
9328: PUSH
9329: LD_INT 136500
9331: PUSH
9332: LD_INT 126000
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: PUSH
9341: LD_OWVAR 67
9345: ARRAY
9346: LESSEQUAL
9347: IFFALSE 9361
// AddMedal ( med1 , 1 ) else
9349: LD_STRING med1
9351: PPUSH
9352: LD_INT 1
9354: PPUSH
9355: CALL_OW 101
9359: GO 9372
// AddMedal ( med1 , - 1 ) ;
9361: LD_STRING med1
9363: PPUSH
9364: LD_INT 1
9366: NEG
9367: PPUSH
9368: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9372: LD_EXP 7
9376: PUSH
9377: LD_INT 3
9379: GREATEREQUAL
9380: PUSH
9381: LD_EXP 11
9385: MUL
9386: PUSH
9387: LD_EXP 9
9391: MUL
9392: PUSH
9393: LD_EXP 6
9397: PUSH
9398: LD_INT 6
9400: PUSH
9401: LD_INT 5
9403: PUSH
9404: LD_INT 4
9406: PUSH
9407: LD_INT 3
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: PUSH
9416: LD_OWVAR 67
9420: ARRAY
9421: LESS
9422: MUL
9423: IFFALSE 9437
// AddMedal ( med2 , 1 ) else
9425: LD_STRING med2
9427: PPUSH
9428: LD_INT 1
9430: PPUSH
9431: CALL_OW 101
9435: GO 9448
// AddMedal ( med2 , - 1 ) ;
9437: LD_STRING med2
9439: PPUSH
9440: LD_INT 1
9442: NEG
9443: PPUSH
9444: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9448: LD_EXP 14
9452: PPUSH
9453: LD_STRING 04_2_GaidarKilled
9455: PPUSH
9456: CALL_OW 39
// if gaidarKilled then
9460: LD_EXP 14
9464: IFFALSE 9478
// AddMedal ( med3 , 1 ) else
9466: LD_STRING med3
9468: PPUSH
9469: LD_INT 1
9471: PPUSH
9472: CALL_OW 101
9476: GO 9489
// AddMedal ( med3 , - 1 ) ;
9478: LD_STRING med3
9480: PPUSH
9481: LD_INT 1
9483: NEG
9484: PPUSH
9485: CALL_OW 101
// GiveMedals ( MAIN ) ;
9489: LD_STRING MAIN
9491: PPUSH
9492: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9496: LD_INT 22
9498: PUSH
9499: LD_INT 2
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PUSH
9506: LD_INT 3
9508: PUSH
9509: LD_INT 23
9511: PUSH
9512: LD_INT 0
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PPUSH
9527: CALL_OW 69
9531: PPUSH
9532: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9536: LD_EXP 18
9540: PPUSH
9541: LD_STRING 04_2_Heike
9543: PPUSH
9544: CALL_OW 38
// if Aviradze then
9548: LD_EXP 28
9552: IFFALSE 9566
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9554: LD_EXP 28
9558: PPUSH
9559: LD_STRING 04_2_Aviradze
9561: PPUSH
9562: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9566: LD_EXP 21
9570: PUSH
9571: LD_EXP 21
9575: PPUSH
9576: CALL_OW 255
9580: PUSH
9581: LD_INT 2
9583: EQUAL
9584: AND
9585: IFFALSE 9615
// begin if ibrahimOnRuSide then
9587: LD_EXP 3
9591: IFFALSE 9603
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9593: LD_INT 1
9595: PPUSH
9596: LD_STRING 04_2_IbrahimJoined
9598: PPUSH
9599: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9603: LD_EXP 21
9607: PPUSH
9608: LD_STRING 04_2_Ibrahim
9610: PPUSH
9611: CALL_OW 38
// end ; if Kamil then
9615: LD_EXP 22
9619: IFFALSE 9633
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
9621: LD_EXP 22
9625: PPUSH
9626: LD_STRING 04_2_Kamil
9628: PPUSH
9629: CALL_OW 38
// if Sophia then
9633: LD_EXP 24
9637: IFFALSE 9651
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
9639: LD_EXP 24
9643: PPUSH
9644: LD_STRING 04_2_Sophia
9646: PPUSH
9647: CALL_OW 38
// if Kaia then
9651: LD_EXP 23
9655: IFFALSE 9669
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
9657: LD_EXP 23
9661: PPUSH
9662: LD_STRING 04_2_Kaia
9664: PPUSH
9665: CALL_OW 38
// if Givi then
9669: LD_EXP 19
9673: IFFALSE 9687
// SaveCharacters ( Givi , 04_2_Givi ) ;
9675: LD_EXP 19
9679: PPUSH
9680: LD_STRING 04_2_Givi
9682: PPUSH
9683: CALL_OW 38
// if Mike then
9687: LD_EXP 20
9691: IFFALSE 9705
// SaveCharacters ( Mike , 04_2_Mike ) ;
9693: LD_EXP 20
9697: PPUSH
9698: LD_STRING 04_2_Mike
9700: PPUSH
9701: CALL_OW 38
// if Markov then
9705: LD_EXP 25
9709: IFFALSE 9723
// SaveCharacters ( Markov , 04_2_Markov ) ;
9711: LD_EXP 25
9715: PPUSH
9716: LD_STRING 04_2_Markov
9718: PPUSH
9719: CALL_OW 38
// if Kurt then
9723: LD_EXP 27
9727: IFFALSE 9741
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
9729: LD_EXP 27
9733: PPUSH
9734: LD_STRING 04_2_Kurt
9736: PPUSH
9737: CALL_OW 38
// if heikeSecondSquad then
9741: LD_EXP 29
9745: IFFALSE 9759
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
9747: LD_EXP 29
9751: PPUSH
9752: LD_STRING 04_2_others
9754: PPUSH
9755: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
9759: LD_ADDR_VAR 0 1
9763: PUSH
9764: LD_INT 22
9766: PUSH
9767: LD_INT 2
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: LD_INT 23
9776: PUSH
9777: LD_INT 0
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PPUSH
9788: CALL_OW 69
9792: ST_TO_ADDR
// if tmp then
9793: LD_VAR 0 1
9797: IFFALSE 9811
// SaveCharacters ( tmp , 04_2_apes ) ;
9799: LD_VAR 0 1
9803: PPUSH
9804: LD_STRING 04_2_apes
9806: PPUSH
9807: CALL_OW 38
// YouWin ;
9811: CALL_OW 103
// end ; end_of_file
9815: PPOPN 1
9817: END
// every 0 0$1 do
9818: GO 9820
9820: DISABLE
// begin enable ;
9821: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9822: LD_STRING updateTimer(
9824: PUSH
9825: LD_OWVAR 1
9829: STR
9830: PUSH
9831: LD_STRING );
9833: STR
9834: PPUSH
9835: CALL_OW 559
// end ;
9839: END
// export function SOS_MapStart ( ) ; begin
9840: LD_INT 0
9842: PPUSH
// if streamModeActive then
9843: LD_EXP 43
9847: IFFALSE 9856
// DefineStreamItems ( true ) ;
9849: LD_INT 1
9851: PPUSH
9852: CALL 11510 0 1
// UpdateFactoryWaypoints ( ) ;
9856: CALL 24371 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9860: CALL 24628 0 0
// end ;
9864: LD_VAR 0 1
9868: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9869: LD_INT 0
9871: PPUSH
// if p2 = 100 then
9872: LD_VAR 0 2
9876: PUSH
9877: LD_INT 100
9879: EQUAL
9880: IFFALSE 10883
// begin if not StreamModeActive then
9882: LD_EXP 43
9886: NOT
9887: IFFALSE 9897
// StreamModeActive := true ;
9889: LD_ADDR_EXP 43
9893: PUSH
9894: LD_INT 1
9896: ST_TO_ADDR
// if p3 = 0 then
9897: LD_VAR 0 3
9901: PUSH
9902: LD_INT 0
9904: EQUAL
9905: IFFALSE 9911
// InitStreamMode ;
9907: CALL 11046 0 0
// if p3 = 1 then
9911: LD_VAR 0 3
9915: PUSH
9916: LD_INT 1
9918: EQUAL
9919: IFFALSE 9929
// sRocket := true ;
9921: LD_ADDR_EXP 48
9925: PUSH
9926: LD_INT 1
9928: ST_TO_ADDR
// if p3 = 2 then
9929: LD_VAR 0 3
9933: PUSH
9934: LD_INT 2
9936: EQUAL
9937: IFFALSE 9947
// sSpeed := true ;
9939: LD_ADDR_EXP 47
9943: PUSH
9944: LD_INT 1
9946: ST_TO_ADDR
// if p3 = 3 then
9947: LD_VAR 0 3
9951: PUSH
9952: LD_INT 3
9954: EQUAL
9955: IFFALSE 9965
// sEngine := true ;
9957: LD_ADDR_EXP 49
9961: PUSH
9962: LD_INT 1
9964: ST_TO_ADDR
// if p3 = 4 then
9965: LD_VAR 0 3
9969: PUSH
9970: LD_INT 4
9972: EQUAL
9973: IFFALSE 9983
// sSpec := true ;
9975: LD_ADDR_EXP 46
9979: PUSH
9980: LD_INT 1
9982: ST_TO_ADDR
// if p3 = 5 then
9983: LD_VAR 0 3
9987: PUSH
9988: LD_INT 5
9990: EQUAL
9991: IFFALSE 10001
// sLevel := true ;
9993: LD_ADDR_EXP 50
9997: PUSH
9998: LD_INT 1
10000: ST_TO_ADDR
// if p3 = 6 then
10001: LD_VAR 0 3
10005: PUSH
10006: LD_INT 6
10008: EQUAL
10009: IFFALSE 10019
// sArmoury := true ;
10011: LD_ADDR_EXP 51
10015: PUSH
10016: LD_INT 1
10018: ST_TO_ADDR
// if p3 = 7 then
10019: LD_VAR 0 3
10023: PUSH
10024: LD_INT 7
10026: EQUAL
10027: IFFALSE 10037
// sRadar := true ;
10029: LD_ADDR_EXP 52
10033: PUSH
10034: LD_INT 1
10036: ST_TO_ADDR
// if p3 = 8 then
10037: LD_VAR 0 3
10041: PUSH
10042: LD_INT 8
10044: EQUAL
10045: IFFALSE 10055
// sBunker := true ;
10047: LD_ADDR_EXP 53
10051: PUSH
10052: LD_INT 1
10054: ST_TO_ADDR
// if p3 = 9 then
10055: LD_VAR 0 3
10059: PUSH
10060: LD_INT 9
10062: EQUAL
10063: IFFALSE 10073
// sHack := true ;
10065: LD_ADDR_EXP 54
10069: PUSH
10070: LD_INT 1
10072: ST_TO_ADDR
// if p3 = 10 then
10073: LD_VAR 0 3
10077: PUSH
10078: LD_INT 10
10080: EQUAL
10081: IFFALSE 10091
// sFire := true ;
10083: LD_ADDR_EXP 55
10087: PUSH
10088: LD_INT 1
10090: ST_TO_ADDR
// if p3 = 11 then
10091: LD_VAR 0 3
10095: PUSH
10096: LD_INT 11
10098: EQUAL
10099: IFFALSE 10109
// sRefresh := true ;
10101: LD_ADDR_EXP 56
10105: PUSH
10106: LD_INT 1
10108: ST_TO_ADDR
// if p3 = 12 then
10109: LD_VAR 0 3
10113: PUSH
10114: LD_INT 12
10116: EQUAL
10117: IFFALSE 10127
// sExp := true ;
10119: LD_ADDR_EXP 57
10123: PUSH
10124: LD_INT 1
10126: ST_TO_ADDR
// if p3 = 13 then
10127: LD_VAR 0 3
10131: PUSH
10132: LD_INT 13
10134: EQUAL
10135: IFFALSE 10145
// sDepot := true ;
10137: LD_ADDR_EXP 58
10141: PUSH
10142: LD_INT 1
10144: ST_TO_ADDR
// if p3 = 14 then
10145: LD_VAR 0 3
10149: PUSH
10150: LD_INT 14
10152: EQUAL
10153: IFFALSE 10163
// sFlag := true ;
10155: LD_ADDR_EXP 59
10159: PUSH
10160: LD_INT 1
10162: ST_TO_ADDR
// if p3 = 15 then
10163: LD_VAR 0 3
10167: PUSH
10168: LD_INT 15
10170: EQUAL
10171: IFFALSE 10181
// sKamikadze := true ;
10173: LD_ADDR_EXP 67
10177: PUSH
10178: LD_INT 1
10180: ST_TO_ADDR
// if p3 = 16 then
10181: LD_VAR 0 3
10185: PUSH
10186: LD_INT 16
10188: EQUAL
10189: IFFALSE 10199
// sTroll := true ;
10191: LD_ADDR_EXP 68
10195: PUSH
10196: LD_INT 1
10198: ST_TO_ADDR
// if p3 = 17 then
10199: LD_VAR 0 3
10203: PUSH
10204: LD_INT 17
10206: EQUAL
10207: IFFALSE 10217
// sSlow := true ;
10209: LD_ADDR_EXP 69
10213: PUSH
10214: LD_INT 1
10216: ST_TO_ADDR
// if p3 = 18 then
10217: LD_VAR 0 3
10221: PUSH
10222: LD_INT 18
10224: EQUAL
10225: IFFALSE 10235
// sLack := true ;
10227: LD_ADDR_EXP 70
10231: PUSH
10232: LD_INT 1
10234: ST_TO_ADDR
// if p3 = 19 then
10235: LD_VAR 0 3
10239: PUSH
10240: LD_INT 19
10242: EQUAL
10243: IFFALSE 10253
// sTank := true ;
10245: LD_ADDR_EXP 72
10249: PUSH
10250: LD_INT 1
10252: ST_TO_ADDR
// if p3 = 20 then
10253: LD_VAR 0 3
10257: PUSH
10258: LD_INT 20
10260: EQUAL
10261: IFFALSE 10271
// sRemote := true ;
10263: LD_ADDR_EXP 73
10267: PUSH
10268: LD_INT 1
10270: ST_TO_ADDR
// if p3 = 21 then
10271: LD_VAR 0 3
10275: PUSH
10276: LD_INT 21
10278: EQUAL
10279: IFFALSE 10289
// sPowell := true ;
10281: LD_ADDR_EXP 74
10285: PUSH
10286: LD_INT 1
10288: ST_TO_ADDR
// if p3 = 22 then
10289: LD_VAR 0 3
10293: PUSH
10294: LD_INT 22
10296: EQUAL
10297: IFFALSE 10307
// sTeleport := true ;
10299: LD_ADDR_EXP 77
10303: PUSH
10304: LD_INT 1
10306: ST_TO_ADDR
// if p3 = 23 then
10307: LD_VAR 0 3
10311: PUSH
10312: LD_INT 23
10314: EQUAL
10315: IFFALSE 10325
// sOilTower := true ;
10317: LD_ADDR_EXP 79
10321: PUSH
10322: LD_INT 1
10324: ST_TO_ADDR
// if p3 = 24 then
10325: LD_VAR 0 3
10329: PUSH
10330: LD_INT 24
10332: EQUAL
10333: IFFALSE 10343
// sShovel := true ;
10335: LD_ADDR_EXP 80
10339: PUSH
10340: LD_INT 1
10342: ST_TO_ADDR
// if p3 = 25 then
10343: LD_VAR 0 3
10347: PUSH
10348: LD_INT 25
10350: EQUAL
10351: IFFALSE 10361
// sSheik := true ;
10353: LD_ADDR_EXP 81
10357: PUSH
10358: LD_INT 1
10360: ST_TO_ADDR
// if p3 = 26 then
10361: LD_VAR 0 3
10365: PUSH
10366: LD_INT 26
10368: EQUAL
10369: IFFALSE 10379
// sEarthquake := true ;
10371: LD_ADDR_EXP 83
10375: PUSH
10376: LD_INT 1
10378: ST_TO_ADDR
// if p3 = 27 then
10379: LD_VAR 0 3
10383: PUSH
10384: LD_INT 27
10386: EQUAL
10387: IFFALSE 10397
// sAI := true ;
10389: LD_ADDR_EXP 84
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// if p3 = 28 then
10397: LD_VAR 0 3
10401: PUSH
10402: LD_INT 28
10404: EQUAL
10405: IFFALSE 10415
// sCargo := true ;
10407: LD_ADDR_EXP 87
10411: PUSH
10412: LD_INT 1
10414: ST_TO_ADDR
// if p3 = 29 then
10415: LD_VAR 0 3
10419: PUSH
10420: LD_INT 29
10422: EQUAL
10423: IFFALSE 10433
// sDLaser := true ;
10425: LD_ADDR_EXP 88
10429: PUSH
10430: LD_INT 1
10432: ST_TO_ADDR
// if p3 = 30 then
10433: LD_VAR 0 3
10437: PUSH
10438: LD_INT 30
10440: EQUAL
10441: IFFALSE 10451
// sExchange := true ;
10443: LD_ADDR_EXP 89
10447: PUSH
10448: LD_INT 1
10450: ST_TO_ADDR
// if p3 = 31 then
10451: LD_VAR 0 3
10455: PUSH
10456: LD_INT 31
10458: EQUAL
10459: IFFALSE 10469
// sFac := true ;
10461: LD_ADDR_EXP 90
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// if p3 = 32 then
10469: LD_VAR 0 3
10473: PUSH
10474: LD_INT 32
10476: EQUAL
10477: IFFALSE 10487
// sPower := true ;
10479: LD_ADDR_EXP 91
10483: PUSH
10484: LD_INT 1
10486: ST_TO_ADDR
// if p3 = 33 then
10487: LD_VAR 0 3
10491: PUSH
10492: LD_INT 33
10494: EQUAL
10495: IFFALSE 10505
// sRandom := true ;
10497: LD_ADDR_EXP 92
10501: PUSH
10502: LD_INT 1
10504: ST_TO_ADDR
// if p3 = 34 then
10505: LD_VAR 0 3
10509: PUSH
10510: LD_INT 34
10512: EQUAL
10513: IFFALSE 10523
// sShield := true ;
10515: LD_ADDR_EXP 93
10519: PUSH
10520: LD_INT 1
10522: ST_TO_ADDR
// if p3 = 35 then
10523: LD_VAR 0 3
10527: PUSH
10528: LD_INT 35
10530: EQUAL
10531: IFFALSE 10541
// sTime := true ;
10533: LD_ADDR_EXP 94
10537: PUSH
10538: LD_INT 1
10540: ST_TO_ADDR
// if p3 = 36 then
10541: LD_VAR 0 3
10545: PUSH
10546: LD_INT 36
10548: EQUAL
10549: IFFALSE 10559
// sTools := true ;
10551: LD_ADDR_EXP 95
10555: PUSH
10556: LD_INT 1
10558: ST_TO_ADDR
// if p3 = 101 then
10559: LD_VAR 0 3
10563: PUSH
10564: LD_INT 101
10566: EQUAL
10567: IFFALSE 10577
// sSold := true ;
10569: LD_ADDR_EXP 60
10573: PUSH
10574: LD_INT 1
10576: ST_TO_ADDR
// if p3 = 102 then
10577: LD_VAR 0 3
10581: PUSH
10582: LD_INT 102
10584: EQUAL
10585: IFFALSE 10595
// sDiff := true ;
10587: LD_ADDR_EXP 61
10591: PUSH
10592: LD_INT 1
10594: ST_TO_ADDR
// if p3 = 103 then
10595: LD_VAR 0 3
10599: PUSH
10600: LD_INT 103
10602: EQUAL
10603: IFFALSE 10613
// sFog := true ;
10605: LD_ADDR_EXP 64
10609: PUSH
10610: LD_INT 1
10612: ST_TO_ADDR
// if p3 = 104 then
10613: LD_VAR 0 3
10617: PUSH
10618: LD_INT 104
10620: EQUAL
10621: IFFALSE 10631
// sReset := true ;
10623: LD_ADDR_EXP 65
10627: PUSH
10628: LD_INT 1
10630: ST_TO_ADDR
// if p3 = 105 then
10631: LD_VAR 0 3
10635: PUSH
10636: LD_INT 105
10638: EQUAL
10639: IFFALSE 10649
// sSun := true ;
10641: LD_ADDR_EXP 66
10645: PUSH
10646: LD_INT 1
10648: ST_TO_ADDR
// if p3 = 106 then
10649: LD_VAR 0 3
10653: PUSH
10654: LD_INT 106
10656: EQUAL
10657: IFFALSE 10667
// sTiger := true ;
10659: LD_ADDR_EXP 62
10663: PUSH
10664: LD_INT 1
10666: ST_TO_ADDR
// if p3 = 107 then
10667: LD_VAR 0 3
10671: PUSH
10672: LD_INT 107
10674: EQUAL
10675: IFFALSE 10685
// sBomb := true ;
10677: LD_ADDR_EXP 63
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// if p3 = 108 then
10685: LD_VAR 0 3
10689: PUSH
10690: LD_INT 108
10692: EQUAL
10693: IFFALSE 10703
// sWound := true ;
10695: LD_ADDR_EXP 71
10699: PUSH
10700: LD_INT 1
10702: ST_TO_ADDR
// if p3 = 109 then
10703: LD_VAR 0 3
10707: PUSH
10708: LD_INT 109
10710: EQUAL
10711: IFFALSE 10721
// sBetray := true ;
10713: LD_ADDR_EXP 75
10717: PUSH
10718: LD_INT 1
10720: ST_TO_ADDR
// if p3 = 110 then
10721: LD_VAR 0 3
10725: PUSH
10726: LD_INT 110
10728: EQUAL
10729: IFFALSE 10739
// sContamin := true ;
10731: LD_ADDR_EXP 76
10735: PUSH
10736: LD_INT 1
10738: ST_TO_ADDR
// if p3 = 111 then
10739: LD_VAR 0 3
10743: PUSH
10744: LD_INT 111
10746: EQUAL
10747: IFFALSE 10757
// sOil := true ;
10749: LD_ADDR_EXP 78
10753: PUSH
10754: LD_INT 1
10756: ST_TO_ADDR
// if p3 = 112 then
10757: LD_VAR 0 3
10761: PUSH
10762: LD_INT 112
10764: EQUAL
10765: IFFALSE 10775
// sStu := true ;
10767: LD_ADDR_EXP 82
10771: PUSH
10772: LD_INT 1
10774: ST_TO_ADDR
// if p3 = 113 then
10775: LD_VAR 0 3
10779: PUSH
10780: LD_INT 113
10782: EQUAL
10783: IFFALSE 10793
// sBazooka := true ;
10785: LD_ADDR_EXP 85
10789: PUSH
10790: LD_INT 1
10792: ST_TO_ADDR
// if p3 = 114 then
10793: LD_VAR 0 3
10797: PUSH
10798: LD_INT 114
10800: EQUAL
10801: IFFALSE 10811
// sMortar := true ;
10803: LD_ADDR_EXP 86
10807: PUSH
10808: LD_INT 1
10810: ST_TO_ADDR
// if p3 = 115 then
10811: LD_VAR 0 3
10815: PUSH
10816: LD_INT 115
10818: EQUAL
10819: IFFALSE 10829
// sRanger := true ;
10821: LD_ADDR_EXP 96
10825: PUSH
10826: LD_INT 1
10828: ST_TO_ADDR
// if p3 = 116 then
10829: LD_VAR 0 3
10833: PUSH
10834: LD_INT 116
10836: EQUAL
10837: IFFALSE 10847
// sComputer := true ;
10839: LD_ADDR_EXP 97
10843: PUSH
10844: LD_INT 1
10846: ST_TO_ADDR
// if p3 = 117 then
10847: LD_VAR 0 3
10851: PUSH
10852: LD_INT 117
10854: EQUAL
10855: IFFALSE 10865
// s30 := true ;
10857: LD_ADDR_EXP 98
10861: PUSH
10862: LD_INT 1
10864: ST_TO_ADDR
// if p3 = 118 then
10865: LD_VAR 0 3
10869: PUSH
10870: LD_INT 118
10872: EQUAL
10873: IFFALSE 10883
// s60 := true ;
10875: LD_ADDR_EXP 99
10879: PUSH
10880: LD_INT 1
10882: ST_TO_ADDR
// end ; if p2 = 101 then
10883: LD_VAR 0 2
10887: PUSH
10888: LD_INT 101
10890: EQUAL
10891: IFFALSE 11019
// begin case p3 of 1 :
10893: LD_VAR 0 3
10897: PUSH
10898: LD_INT 1
10900: DOUBLE
10901: EQUAL
10902: IFTRUE 10906
10904: GO 10913
10906: POP
// hHackUnlimitedResources ; 2 :
10907: CALL 23117 0 0
10911: GO 11019
10913: LD_INT 2
10915: DOUBLE
10916: EQUAL
10917: IFTRUE 10921
10919: GO 10928
10921: POP
// hHackSetLevel10 ; 3 :
10922: CALL 23250 0 0
10926: GO 11019
10928: LD_INT 3
10930: DOUBLE
10931: EQUAL
10932: IFTRUE 10936
10934: GO 10943
10936: POP
// hHackSetLevel10YourUnits ; 4 :
10937: CALL 23335 0 0
10941: GO 11019
10943: LD_INT 4
10945: DOUBLE
10946: EQUAL
10947: IFTRUE 10951
10949: GO 10958
10951: POP
// hHackInvincible ; 5 :
10952: CALL 23783 0 0
10956: GO 11019
10958: LD_INT 5
10960: DOUBLE
10961: EQUAL
10962: IFTRUE 10966
10964: GO 10973
10966: POP
// hHackInvisible ; 6 :
10967: CALL 23894 0 0
10971: GO 11019
10973: LD_INT 6
10975: DOUBLE
10976: EQUAL
10977: IFTRUE 10981
10979: GO 10988
10981: POP
// hHackChangeYourSide ; 7 :
10982: CALL 23951 0 0
10986: GO 11019
10988: LD_INT 7
10990: DOUBLE
10991: EQUAL
10992: IFTRUE 10996
10994: GO 11003
10996: POP
// hHackChangeUnitSide ; 8 :
10997: CALL 23993 0 0
11001: GO 11019
11003: LD_INT 8
11005: DOUBLE
11006: EQUAL
11007: IFTRUE 11011
11009: GO 11018
11011: POP
// hHackFog ; end ;
11012: CALL 24094 0 0
11016: GO 11019
11018: POP
// end ; end ;
11019: LD_VAR 0 7
11023: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
11024: GO 11026
11026: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11027: LD_STRING initStreamRollete();
11029: PPUSH
11030: CALL_OW 559
// InitStreamMode ;
11034: CALL 11046 0 0
// DefineStreamItems ( false ) ;
11038: LD_INT 0
11040: PPUSH
11041: CALL 11510 0 1
// end ;
11045: END
// function InitStreamMode ; begin
11046: LD_INT 0
11048: PPUSH
// streamModeActive := false ;
11049: LD_ADDR_EXP 43
11053: PUSH
11054: LD_INT 0
11056: ST_TO_ADDR
// normalCounter := 36 ;
11057: LD_ADDR_EXP 44
11061: PUSH
11062: LD_INT 36
11064: ST_TO_ADDR
// hardcoreCounter := 18 ;
11065: LD_ADDR_EXP 45
11069: PUSH
11070: LD_INT 18
11072: ST_TO_ADDR
// sRocket := false ;
11073: LD_ADDR_EXP 48
11077: PUSH
11078: LD_INT 0
11080: ST_TO_ADDR
// sSpeed := false ;
11081: LD_ADDR_EXP 47
11085: PUSH
11086: LD_INT 0
11088: ST_TO_ADDR
// sEngine := false ;
11089: LD_ADDR_EXP 49
11093: PUSH
11094: LD_INT 0
11096: ST_TO_ADDR
// sSpec := false ;
11097: LD_ADDR_EXP 46
11101: PUSH
11102: LD_INT 0
11104: ST_TO_ADDR
// sLevel := false ;
11105: LD_ADDR_EXP 50
11109: PUSH
11110: LD_INT 0
11112: ST_TO_ADDR
// sArmoury := false ;
11113: LD_ADDR_EXP 51
11117: PUSH
11118: LD_INT 0
11120: ST_TO_ADDR
// sRadar := false ;
11121: LD_ADDR_EXP 52
11125: PUSH
11126: LD_INT 0
11128: ST_TO_ADDR
// sBunker := false ;
11129: LD_ADDR_EXP 53
11133: PUSH
11134: LD_INT 0
11136: ST_TO_ADDR
// sHack := false ;
11137: LD_ADDR_EXP 54
11141: PUSH
11142: LD_INT 0
11144: ST_TO_ADDR
// sFire := false ;
11145: LD_ADDR_EXP 55
11149: PUSH
11150: LD_INT 0
11152: ST_TO_ADDR
// sRefresh := false ;
11153: LD_ADDR_EXP 56
11157: PUSH
11158: LD_INT 0
11160: ST_TO_ADDR
// sExp := false ;
11161: LD_ADDR_EXP 57
11165: PUSH
11166: LD_INT 0
11168: ST_TO_ADDR
// sDepot := false ;
11169: LD_ADDR_EXP 58
11173: PUSH
11174: LD_INT 0
11176: ST_TO_ADDR
// sFlag := false ;
11177: LD_ADDR_EXP 59
11181: PUSH
11182: LD_INT 0
11184: ST_TO_ADDR
// sKamikadze := false ;
11185: LD_ADDR_EXP 67
11189: PUSH
11190: LD_INT 0
11192: ST_TO_ADDR
// sTroll := false ;
11193: LD_ADDR_EXP 68
11197: PUSH
11198: LD_INT 0
11200: ST_TO_ADDR
// sSlow := false ;
11201: LD_ADDR_EXP 69
11205: PUSH
11206: LD_INT 0
11208: ST_TO_ADDR
// sLack := false ;
11209: LD_ADDR_EXP 70
11213: PUSH
11214: LD_INT 0
11216: ST_TO_ADDR
// sTank := false ;
11217: LD_ADDR_EXP 72
11221: PUSH
11222: LD_INT 0
11224: ST_TO_ADDR
// sRemote := false ;
11225: LD_ADDR_EXP 73
11229: PUSH
11230: LD_INT 0
11232: ST_TO_ADDR
// sPowell := false ;
11233: LD_ADDR_EXP 74
11237: PUSH
11238: LD_INT 0
11240: ST_TO_ADDR
// sTeleport := false ;
11241: LD_ADDR_EXP 77
11245: PUSH
11246: LD_INT 0
11248: ST_TO_ADDR
// sOilTower := false ;
11249: LD_ADDR_EXP 79
11253: PUSH
11254: LD_INT 0
11256: ST_TO_ADDR
// sShovel := false ;
11257: LD_ADDR_EXP 80
11261: PUSH
11262: LD_INT 0
11264: ST_TO_ADDR
// sSheik := false ;
11265: LD_ADDR_EXP 81
11269: PUSH
11270: LD_INT 0
11272: ST_TO_ADDR
// sEarthquake := false ;
11273: LD_ADDR_EXP 83
11277: PUSH
11278: LD_INT 0
11280: ST_TO_ADDR
// sAI := false ;
11281: LD_ADDR_EXP 84
11285: PUSH
11286: LD_INT 0
11288: ST_TO_ADDR
// sCargo := false ;
11289: LD_ADDR_EXP 87
11293: PUSH
11294: LD_INT 0
11296: ST_TO_ADDR
// sDLaser := false ;
11297: LD_ADDR_EXP 88
11301: PUSH
11302: LD_INT 0
11304: ST_TO_ADDR
// sExchange := false ;
11305: LD_ADDR_EXP 89
11309: PUSH
11310: LD_INT 0
11312: ST_TO_ADDR
// sFac := false ;
11313: LD_ADDR_EXP 90
11317: PUSH
11318: LD_INT 0
11320: ST_TO_ADDR
// sPower := false ;
11321: LD_ADDR_EXP 91
11325: PUSH
11326: LD_INT 0
11328: ST_TO_ADDR
// sRandom := false ;
11329: LD_ADDR_EXP 92
11333: PUSH
11334: LD_INT 0
11336: ST_TO_ADDR
// sShield := false ;
11337: LD_ADDR_EXP 93
11341: PUSH
11342: LD_INT 0
11344: ST_TO_ADDR
// sTime := false ;
11345: LD_ADDR_EXP 94
11349: PUSH
11350: LD_INT 0
11352: ST_TO_ADDR
// sTools := false ;
11353: LD_ADDR_EXP 95
11357: PUSH
11358: LD_INT 0
11360: ST_TO_ADDR
// sSold := false ;
11361: LD_ADDR_EXP 60
11365: PUSH
11366: LD_INT 0
11368: ST_TO_ADDR
// sDiff := false ;
11369: LD_ADDR_EXP 61
11373: PUSH
11374: LD_INT 0
11376: ST_TO_ADDR
// sFog := false ;
11377: LD_ADDR_EXP 64
11381: PUSH
11382: LD_INT 0
11384: ST_TO_ADDR
// sReset := false ;
11385: LD_ADDR_EXP 65
11389: PUSH
11390: LD_INT 0
11392: ST_TO_ADDR
// sSun := false ;
11393: LD_ADDR_EXP 66
11397: PUSH
11398: LD_INT 0
11400: ST_TO_ADDR
// sTiger := false ;
11401: LD_ADDR_EXP 62
11405: PUSH
11406: LD_INT 0
11408: ST_TO_ADDR
// sBomb := false ;
11409: LD_ADDR_EXP 63
11413: PUSH
11414: LD_INT 0
11416: ST_TO_ADDR
// sWound := false ;
11417: LD_ADDR_EXP 71
11421: PUSH
11422: LD_INT 0
11424: ST_TO_ADDR
// sBetray := false ;
11425: LD_ADDR_EXP 75
11429: PUSH
11430: LD_INT 0
11432: ST_TO_ADDR
// sContamin := false ;
11433: LD_ADDR_EXP 76
11437: PUSH
11438: LD_INT 0
11440: ST_TO_ADDR
// sOil := false ;
11441: LD_ADDR_EXP 78
11445: PUSH
11446: LD_INT 0
11448: ST_TO_ADDR
// sStu := false ;
11449: LD_ADDR_EXP 82
11453: PUSH
11454: LD_INT 0
11456: ST_TO_ADDR
// sBazooka := false ;
11457: LD_ADDR_EXP 85
11461: PUSH
11462: LD_INT 0
11464: ST_TO_ADDR
// sMortar := false ;
11465: LD_ADDR_EXP 86
11469: PUSH
11470: LD_INT 0
11472: ST_TO_ADDR
// sRanger := false ;
11473: LD_ADDR_EXP 96
11477: PUSH
11478: LD_INT 0
11480: ST_TO_ADDR
// sComputer := false ;
11481: LD_ADDR_EXP 97
11485: PUSH
11486: LD_INT 0
11488: ST_TO_ADDR
// s30 := false ;
11489: LD_ADDR_EXP 98
11493: PUSH
11494: LD_INT 0
11496: ST_TO_ADDR
// s60 := false ;
11497: LD_ADDR_EXP 99
11501: PUSH
11502: LD_INT 0
11504: ST_TO_ADDR
// end ;
11505: LD_VAR 0 1
11509: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11510: LD_INT 0
11512: PPUSH
11513: PPUSH
11514: PPUSH
11515: PPUSH
11516: PPUSH
11517: PPUSH
11518: PPUSH
// result := [ ] ;
11519: LD_ADDR_VAR 0 2
11523: PUSH
11524: EMPTY
11525: ST_TO_ADDR
// if campaign_id = 1 then
11526: LD_OWVAR 69
11530: PUSH
11531: LD_INT 1
11533: EQUAL
11534: IFFALSE 14700
// begin case mission_number of 1 :
11536: LD_OWVAR 70
11540: PUSH
11541: LD_INT 1
11543: DOUBLE
11544: EQUAL
11545: IFTRUE 11549
11547: GO 11625
11549: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11550: LD_ADDR_VAR 0 2
11554: PUSH
11555: LD_INT 2
11557: PUSH
11558: LD_INT 4
11560: PUSH
11561: LD_INT 11
11563: PUSH
11564: LD_INT 12
11566: PUSH
11567: LD_INT 15
11569: PUSH
11570: LD_INT 16
11572: PUSH
11573: LD_INT 22
11575: PUSH
11576: LD_INT 23
11578: PUSH
11579: LD_INT 26
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: PUSH
11593: LD_INT 101
11595: PUSH
11596: LD_INT 102
11598: PUSH
11599: LD_INT 106
11601: PUSH
11602: LD_INT 116
11604: PUSH
11605: LD_INT 117
11607: PUSH
11608: LD_INT 118
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: ST_TO_ADDR
11623: GO 14698
11625: LD_INT 2
11627: DOUBLE
11628: EQUAL
11629: IFTRUE 11633
11631: GO 11717
11633: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11634: LD_ADDR_VAR 0 2
11638: PUSH
11639: LD_INT 2
11641: PUSH
11642: LD_INT 4
11644: PUSH
11645: LD_INT 11
11647: PUSH
11648: LD_INT 12
11650: PUSH
11651: LD_INT 15
11653: PUSH
11654: LD_INT 16
11656: PUSH
11657: LD_INT 22
11659: PUSH
11660: LD_INT 23
11662: PUSH
11663: LD_INT 26
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 101
11679: PUSH
11680: LD_INT 102
11682: PUSH
11683: LD_INT 105
11685: PUSH
11686: LD_INT 106
11688: PUSH
11689: LD_INT 108
11691: PUSH
11692: LD_INT 116
11694: PUSH
11695: LD_INT 117
11697: PUSH
11698: LD_INT 118
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: ST_TO_ADDR
11715: GO 14698
11717: LD_INT 3
11719: DOUBLE
11720: EQUAL
11721: IFTRUE 11725
11723: GO 11813
11725: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11726: LD_ADDR_VAR 0 2
11730: PUSH
11731: LD_INT 2
11733: PUSH
11734: LD_INT 4
11736: PUSH
11737: LD_INT 5
11739: PUSH
11740: LD_INT 11
11742: PUSH
11743: LD_INT 12
11745: PUSH
11746: LD_INT 15
11748: PUSH
11749: LD_INT 16
11751: PUSH
11752: LD_INT 22
11754: PUSH
11755: LD_INT 26
11757: PUSH
11758: LD_INT 36
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 101
11775: PUSH
11776: LD_INT 102
11778: PUSH
11779: LD_INT 105
11781: PUSH
11782: LD_INT 106
11784: PUSH
11785: LD_INT 108
11787: PUSH
11788: LD_INT 116
11790: PUSH
11791: LD_INT 117
11793: PUSH
11794: LD_INT 118
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: ST_TO_ADDR
11811: GO 14698
11813: LD_INT 4
11815: DOUBLE
11816: EQUAL
11817: IFTRUE 11821
11819: GO 11917
11821: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11822: LD_ADDR_VAR 0 2
11826: PUSH
11827: LD_INT 2
11829: PUSH
11830: LD_INT 4
11832: PUSH
11833: LD_INT 5
11835: PUSH
11836: LD_INT 8
11838: PUSH
11839: LD_INT 11
11841: PUSH
11842: LD_INT 12
11844: PUSH
11845: LD_INT 15
11847: PUSH
11848: LD_INT 16
11850: PUSH
11851: LD_INT 22
11853: PUSH
11854: LD_INT 23
11856: PUSH
11857: LD_INT 26
11859: PUSH
11860: LD_INT 36
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 101
11879: PUSH
11880: LD_INT 102
11882: PUSH
11883: LD_INT 105
11885: PUSH
11886: LD_INT 106
11888: PUSH
11889: LD_INT 108
11891: PUSH
11892: LD_INT 116
11894: PUSH
11895: LD_INT 117
11897: PUSH
11898: LD_INT 118
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: ST_TO_ADDR
11915: GO 14698
11917: LD_INT 5
11919: DOUBLE
11920: EQUAL
11921: IFTRUE 11925
11923: GO 12037
11925: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11926: LD_ADDR_VAR 0 2
11930: PUSH
11931: LD_INT 2
11933: PUSH
11934: LD_INT 4
11936: PUSH
11937: LD_INT 5
11939: PUSH
11940: LD_INT 6
11942: PUSH
11943: LD_INT 8
11945: PUSH
11946: LD_INT 11
11948: PUSH
11949: LD_INT 12
11951: PUSH
11952: LD_INT 15
11954: PUSH
11955: LD_INT 16
11957: PUSH
11958: LD_INT 22
11960: PUSH
11961: LD_INT 23
11963: PUSH
11964: LD_INT 25
11966: PUSH
11967: LD_INT 26
11969: PUSH
11970: LD_INT 36
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 101
11991: PUSH
11992: LD_INT 102
11994: PUSH
11995: LD_INT 105
11997: PUSH
11998: LD_INT 106
12000: PUSH
12001: LD_INT 108
12003: PUSH
12004: LD_INT 109
12006: PUSH
12007: LD_INT 112
12009: PUSH
12010: LD_INT 116
12012: PUSH
12013: LD_INT 117
12015: PUSH
12016: LD_INT 118
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: ST_TO_ADDR
12035: GO 14698
12037: LD_INT 6
12039: DOUBLE
12040: EQUAL
12041: IFTRUE 12045
12043: GO 12177
12045: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12046: LD_ADDR_VAR 0 2
12050: PUSH
12051: LD_INT 2
12053: PUSH
12054: LD_INT 4
12056: PUSH
12057: LD_INT 5
12059: PUSH
12060: LD_INT 6
12062: PUSH
12063: LD_INT 8
12065: PUSH
12066: LD_INT 11
12068: PUSH
12069: LD_INT 12
12071: PUSH
12072: LD_INT 15
12074: PUSH
12075: LD_INT 16
12077: PUSH
12078: LD_INT 20
12080: PUSH
12081: LD_INT 21
12083: PUSH
12084: LD_INT 22
12086: PUSH
12087: LD_INT 23
12089: PUSH
12090: LD_INT 25
12092: PUSH
12093: LD_INT 26
12095: PUSH
12096: LD_INT 30
12098: PUSH
12099: LD_INT 31
12101: PUSH
12102: LD_INT 32
12104: PUSH
12105: LD_INT 36
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 101
12131: PUSH
12132: LD_INT 102
12134: PUSH
12135: LD_INT 105
12137: PUSH
12138: LD_INT 106
12140: PUSH
12141: LD_INT 108
12143: PUSH
12144: LD_INT 109
12146: PUSH
12147: LD_INT 112
12149: PUSH
12150: LD_INT 116
12152: PUSH
12153: LD_INT 117
12155: PUSH
12156: LD_INT 118
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: ST_TO_ADDR
12175: GO 14698
12177: LD_INT 7
12179: DOUBLE
12180: EQUAL
12181: IFTRUE 12185
12183: GO 12297
12185: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12186: LD_ADDR_VAR 0 2
12190: PUSH
12191: LD_INT 2
12193: PUSH
12194: LD_INT 4
12196: PUSH
12197: LD_INT 5
12199: PUSH
12200: LD_INT 7
12202: PUSH
12203: LD_INT 11
12205: PUSH
12206: LD_INT 12
12208: PUSH
12209: LD_INT 15
12211: PUSH
12212: LD_INT 16
12214: PUSH
12215: LD_INT 20
12217: PUSH
12218: LD_INT 21
12220: PUSH
12221: LD_INT 22
12223: PUSH
12224: LD_INT 23
12226: PUSH
12227: LD_INT 25
12229: PUSH
12230: LD_INT 26
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 101
12251: PUSH
12252: LD_INT 102
12254: PUSH
12255: LD_INT 103
12257: PUSH
12258: LD_INT 105
12260: PUSH
12261: LD_INT 106
12263: PUSH
12264: LD_INT 108
12266: PUSH
12267: LD_INT 112
12269: PUSH
12270: LD_INT 116
12272: PUSH
12273: LD_INT 117
12275: PUSH
12276: LD_INT 118
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: ST_TO_ADDR
12295: GO 14698
12297: LD_INT 8
12299: DOUBLE
12300: EQUAL
12301: IFTRUE 12305
12303: GO 12445
12305: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12306: LD_ADDR_VAR 0 2
12310: PUSH
12311: LD_INT 2
12313: PUSH
12314: LD_INT 4
12316: PUSH
12317: LD_INT 5
12319: PUSH
12320: LD_INT 6
12322: PUSH
12323: LD_INT 7
12325: PUSH
12326: LD_INT 8
12328: PUSH
12329: LD_INT 11
12331: PUSH
12332: LD_INT 12
12334: PUSH
12335: LD_INT 15
12337: PUSH
12338: LD_INT 16
12340: PUSH
12341: LD_INT 20
12343: PUSH
12344: LD_INT 21
12346: PUSH
12347: LD_INT 22
12349: PUSH
12350: LD_INT 23
12352: PUSH
12353: LD_INT 25
12355: PUSH
12356: LD_INT 26
12358: PUSH
12359: LD_INT 30
12361: PUSH
12362: LD_INT 31
12364: PUSH
12365: LD_INT 32
12367: PUSH
12368: LD_INT 36
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 101
12395: PUSH
12396: LD_INT 102
12398: PUSH
12399: LD_INT 103
12401: PUSH
12402: LD_INT 105
12404: PUSH
12405: LD_INT 106
12407: PUSH
12408: LD_INT 108
12410: PUSH
12411: LD_INT 109
12413: PUSH
12414: LD_INT 112
12416: PUSH
12417: LD_INT 116
12419: PUSH
12420: LD_INT 117
12422: PUSH
12423: LD_INT 118
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: ST_TO_ADDR
12443: GO 14698
12445: LD_INT 9
12447: DOUBLE
12448: EQUAL
12449: IFTRUE 12453
12451: GO 12601
12453: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12454: LD_ADDR_VAR 0 2
12458: PUSH
12459: LD_INT 2
12461: PUSH
12462: LD_INT 4
12464: PUSH
12465: LD_INT 5
12467: PUSH
12468: LD_INT 6
12470: PUSH
12471: LD_INT 7
12473: PUSH
12474: LD_INT 8
12476: PUSH
12477: LD_INT 11
12479: PUSH
12480: LD_INT 12
12482: PUSH
12483: LD_INT 15
12485: PUSH
12486: LD_INT 16
12488: PUSH
12489: LD_INT 20
12491: PUSH
12492: LD_INT 21
12494: PUSH
12495: LD_INT 22
12497: PUSH
12498: LD_INT 23
12500: PUSH
12501: LD_INT 25
12503: PUSH
12504: LD_INT 26
12506: PUSH
12507: LD_INT 28
12509: PUSH
12510: LD_INT 30
12512: PUSH
12513: LD_INT 31
12515: PUSH
12516: LD_INT 32
12518: PUSH
12519: LD_INT 36
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: PUSH
12545: LD_INT 101
12547: PUSH
12548: LD_INT 102
12550: PUSH
12551: LD_INT 103
12553: PUSH
12554: LD_INT 105
12556: PUSH
12557: LD_INT 106
12559: PUSH
12560: LD_INT 108
12562: PUSH
12563: LD_INT 109
12565: PUSH
12566: LD_INT 112
12568: PUSH
12569: LD_INT 114
12571: PUSH
12572: LD_INT 116
12574: PUSH
12575: LD_INT 117
12577: PUSH
12578: LD_INT 118
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: ST_TO_ADDR
12599: GO 14698
12601: LD_INT 10
12603: DOUBLE
12604: EQUAL
12605: IFTRUE 12609
12607: GO 12805
12609: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12610: LD_ADDR_VAR 0 2
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: LD_INT 4
12620: PUSH
12621: LD_INT 5
12623: PUSH
12624: LD_INT 6
12626: PUSH
12627: LD_INT 7
12629: PUSH
12630: LD_INT 8
12632: PUSH
12633: LD_INT 9
12635: PUSH
12636: LD_INT 10
12638: PUSH
12639: LD_INT 11
12641: PUSH
12642: LD_INT 12
12644: PUSH
12645: LD_INT 13
12647: PUSH
12648: LD_INT 14
12650: PUSH
12651: LD_INT 15
12653: PUSH
12654: LD_INT 16
12656: PUSH
12657: LD_INT 17
12659: PUSH
12660: LD_INT 18
12662: PUSH
12663: LD_INT 19
12665: PUSH
12666: LD_INT 20
12668: PUSH
12669: LD_INT 21
12671: PUSH
12672: LD_INT 22
12674: PUSH
12675: LD_INT 23
12677: PUSH
12678: LD_INT 24
12680: PUSH
12681: LD_INT 25
12683: PUSH
12684: LD_INT 26
12686: PUSH
12687: LD_INT 28
12689: PUSH
12690: LD_INT 30
12692: PUSH
12693: LD_INT 31
12695: PUSH
12696: LD_INT 32
12698: PUSH
12699: LD_INT 36
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: PUSH
12733: LD_INT 101
12735: PUSH
12736: LD_INT 102
12738: PUSH
12739: LD_INT 103
12741: PUSH
12742: LD_INT 104
12744: PUSH
12745: LD_INT 105
12747: PUSH
12748: LD_INT 106
12750: PUSH
12751: LD_INT 107
12753: PUSH
12754: LD_INT 108
12756: PUSH
12757: LD_INT 109
12759: PUSH
12760: LD_INT 110
12762: PUSH
12763: LD_INT 111
12765: PUSH
12766: LD_INT 112
12768: PUSH
12769: LD_INT 114
12771: PUSH
12772: LD_INT 116
12774: PUSH
12775: LD_INT 117
12777: PUSH
12778: LD_INT 118
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: ST_TO_ADDR
12803: GO 14698
12805: LD_INT 11
12807: DOUBLE
12808: EQUAL
12809: IFTRUE 12813
12811: GO 13017
12813: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12814: LD_ADDR_VAR 0 2
12818: PUSH
12819: LD_INT 2
12821: PUSH
12822: LD_INT 3
12824: PUSH
12825: LD_INT 4
12827: PUSH
12828: LD_INT 5
12830: PUSH
12831: LD_INT 6
12833: PUSH
12834: LD_INT 7
12836: PUSH
12837: LD_INT 8
12839: PUSH
12840: LD_INT 9
12842: PUSH
12843: LD_INT 10
12845: PUSH
12846: LD_INT 11
12848: PUSH
12849: LD_INT 12
12851: PUSH
12852: LD_INT 13
12854: PUSH
12855: LD_INT 14
12857: PUSH
12858: LD_INT 15
12860: PUSH
12861: LD_INT 16
12863: PUSH
12864: LD_INT 17
12866: PUSH
12867: LD_INT 18
12869: PUSH
12870: LD_INT 19
12872: PUSH
12873: LD_INT 20
12875: PUSH
12876: LD_INT 21
12878: PUSH
12879: LD_INT 22
12881: PUSH
12882: LD_INT 23
12884: PUSH
12885: LD_INT 24
12887: PUSH
12888: LD_INT 25
12890: PUSH
12891: LD_INT 26
12893: PUSH
12894: LD_INT 28
12896: PUSH
12897: LD_INT 30
12899: PUSH
12900: LD_INT 31
12902: PUSH
12903: LD_INT 32
12905: PUSH
12906: LD_INT 34
12908: PUSH
12909: LD_INT 36
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 101
12947: PUSH
12948: LD_INT 102
12950: PUSH
12951: LD_INT 103
12953: PUSH
12954: LD_INT 104
12956: PUSH
12957: LD_INT 105
12959: PUSH
12960: LD_INT 106
12962: PUSH
12963: LD_INT 107
12965: PUSH
12966: LD_INT 108
12968: PUSH
12969: LD_INT 109
12971: PUSH
12972: LD_INT 110
12974: PUSH
12975: LD_INT 111
12977: PUSH
12978: LD_INT 112
12980: PUSH
12981: LD_INT 114
12983: PUSH
12984: LD_INT 116
12986: PUSH
12987: LD_INT 117
12989: PUSH
12990: LD_INT 118
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: ST_TO_ADDR
13015: GO 14698
13017: LD_INT 12
13019: DOUBLE
13020: EQUAL
13021: IFTRUE 13025
13023: GO 13245
13025: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13026: LD_ADDR_VAR 0 2
13030: PUSH
13031: LD_INT 1
13033: PUSH
13034: LD_INT 2
13036: PUSH
13037: LD_INT 3
13039: PUSH
13040: LD_INT 4
13042: PUSH
13043: LD_INT 5
13045: PUSH
13046: LD_INT 6
13048: PUSH
13049: LD_INT 7
13051: PUSH
13052: LD_INT 8
13054: PUSH
13055: LD_INT 9
13057: PUSH
13058: LD_INT 10
13060: PUSH
13061: LD_INT 11
13063: PUSH
13064: LD_INT 12
13066: PUSH
13067: LD_INT 13
13069: PUSH
13070: LD_INT 14
13072: PUSH
13073: LD_INT 15
13075: PUSH
13076: LD_INT 16
13078: PUSH
13079: LD_INT 17
13081: PUSH
13082: LD_INT 18
13084: PUSH
13085: LD_INT 19
13087: PUSH
13088: LD_INT 20
13090: PUSH
13091: LD_INT 21
13093: PUSH
13094: LD_INT 22
13096: PUSH
13097: LD_INT 23
13099: PUSH
13100: LD_INT 24
13102: PUSH
13103: LD_INT 25
13105: PUSH
13106: LD_INT 26
13108: PUSH
13109: LD_INT 27
13111: PUSH
13112: LD_INT 28
13114: PUSH
13115: LD_INT 30
13117: PUSH
13118: LD_INT 31
13120: PUSH
13121: LD_INT 32
13123: PUSH
13124: LD_INT 33
13126: PUSH
13127: LD_INT 34
13129: PUSH
13130: LD_INT 36
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 101
13171: PUSH
13172: LD_INT 102
13174: PUSH
13175: LD_INT 103
13177: PUSH
13178: LD_INT 104
13180: PUSH
13181: LD_INT 105
13183: PUSH
13184: LD_INT 106
13186: PUSH
13187: LD_INT 107
13189: PUSH
13190: LD_INT 108
13192: PUSH
13193: LD_INT 109
13195: PUSH
13196: LD_INT 110
13198: PUSH
13199: LD_INT 111
13201: PUSH
13202: LD_INT 112
13204: PUSH
13205: LD_INT 113
13207: PUSH
13208: LD_INT 114
13210: PUSH
13211: LD_INT 116
13213: PUSH
13214: LD_INT 117
13216: PUSH
13217: LD_INT 118
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: ST_TO_ADDR
13243: GO 14698
13245: LD_INT 13
13247: DOUBLE
13248: EQUAL
13249: IFTRUE 13253
13251: GO 13461
13253: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13254: LD_ADDR_VAR 0 2
13258: PUSH
13259: LD_INT 1
13261: PUSH
13262: LD_INT 2
13264: PUSH
13265: LD_INT 3
13267: PUSH
13268: LD_INT 4
13270: PUSH
13271: LD_INT 5
13273: PUSH
13274: LD_INT 8
13276: PUSH
13277: LD_INT 9
13279: PUSH
13280: LD_INT 10
13282: PUSH
13283: LD_INT 11
13285: PUSH
13286: LD_INT 12
13288: PUSH
13289: LD_INT 14
13291: PUSH
13292: LD_INT 15
13294: PUSH
13295: LD_INT 16
13297: PUSH
13298: LD_INT 17
13300: PUSH
13301: LD_INT 18
13303: PUSH
13304: LD_INT 19
13306: PUSH
13307: LD_INT 20
13309: PUSH
13310: LD_INT 21
13312: PUSH
13313: LD_INT 22
13315: PUSH
13316: LD_INT 23
13318: PUSH
13319: LD_INT 24
13321: PUSH
13322: LD_INT 25
13324: PUSH
13325: LD_INT 26
13327: PUSH
13328: LD_INT 27
13330: PUSH
13331: LD_INT 28
13333: PUSH
13334: LD_INT 30
13336: PUSH
13337: LD_INT 31
13339: PUSH
13340: LD_INT 32
13342: PUSH
13343: LD_INT 33
13345: PUSH
13346: LD_INT 34
13348: PUSH
13349: LD_INT 36
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 101
13387: PUSH
13388: LD_INT 102
13390: PUSH
13391: LD_INT 103
13393: PUSH
13394: LD_INT 104
13396: PUSH
13397: LD_INT 105
13399: PUSH
13400: LD_INT 106
13402: PUSH
13403: LD_INT 107
13405: PUSH
13406: LD_INT 108
13408: PUSH
13409: LD_INT 109
13411: PUSH
13412: LD_INT 110
13414: PUSH
13415: LD_INT 111
13417: PUSH
13418: LD_INT 112
13420: PUSH
13421: LD_INT 113
13423: PUSH
13424: LD_INT 114
13426: PUSH
13427: LD_INT 116
13429: PUSH
13430: LD_INT 117
13432: PUSH
13433: LD_INT 118
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: ST_TO_ADDR
13459: GO 14698
13461: LD_INT 14
13463: DOUBLE
13464: EQUAL
13465: IFTRUE 13469
13467: GO 13693
13469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13470: LD_ADDR_VAR 0 2
13474: PUSH
13475: LD_INT 1
13477: PUSH
13478: LD_INT 2
13480: PUSH
13481: LD_INT 3
13483: PUSH
13484: LD_INT 4
13486: PUSH
13487: LD_INT 5
13489: PUSH
13490: LD_INT 6
13492: PUSH
13493: LD_INT 7
13495: PUSH
13496: LD_INT 8
13498: PUSH
13499: LD_INT 9
13501: PUSH
13502: LD_INT 10
13504: PUSH
13505: LD_INT 11
13507: PUSH
13508: LD_INT 12
13510: PUSH
13511: LD_INT 13
13513: PUSH
13514: LD_INT 14
13516: PUSH
13517: LD_INT 15
13519: PUSH
13520: LD_INT 16
13522: PUSH
13523: LD_INT 17
13525: PUSH
13526: LD_INT 18
13528: PUSH
13529: LD_INT 19
13531: PUSH
13532: LD_INT 20
13534: PUSH
13535: LD_INT 21
13537: PUSH
13538: LD_INT 22
13540: PUSH
13541: LD_INT 23
13543: PUSH
13544: LD_INT 24
13546: PUSH
13547: LD_INT 25
13549: PUSH
13550: LD_INT 26
13552: PUSH
13553: LD_INT 27
13555: PUSH
13556: LD_INT 28
13558: PUSH
13559: LD_INT 29
13561: PUSH
13562: LD_INT 30
13564: PUSH
13565: LD_INT 31
13567: PUSH
13568: LD_INT 32
13570: PUSH
13571: LD_INT 33
13573: PUSH
13574: LD_INT 34
13576: PUSH
13577: LD_INT 36
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 101
13619: PUSH
13620: LD_INT 102
13622: PUSH
13623: LD_INT 103
13625: PUSH
13626: LD_INT 104
13628: PUSH
13629: LD_INT 105
13631: PUSH
13632: LD_INT 106
13634: PUSH
13635: LD_INT 107
13637: PUSH
13638: LD_INT 108
13640: PUSH
13641: LD_INT 109
13643: PUSH
13644: LD_INT 110
13646: PUSH
13647: LD_INT 111
13649: PUSH
13650: LD_INT 112
13652: PUSH
13653: LD_INT 113
13655: PUSH
13656: LD_INT 114
13658: PUSH
13659: LD_INT 116
13661: PUSH
13662: LD_INT 117
13664: PUSH
13665: LD_INT 118
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: ST_TO_ADDR
13691: GO 14698
13693: LD_INT 15
13695: DOUBLE
13696: EQUAL
13697: IFTRUE 13701
13699: GO 13925
13701: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13702: LD_ADDR_VAR 0 2
13706: PUSH
13707: LD_INT 1
13709: PUSH
13710: LD_INT 2
13712: PUSH
13713: LD_INT 3
13715: PUSH
13716: LD_INT 4
13718: PUSH
13719: LD_INT 5
13721: PUSH
13722: LD_INT 6
13724: PUSH
13725: LD_INT 7
13727: PUSH
13728: LD_INT 8
13730: PUSH
13731: LD_INT 9
13733: PUSH
13734: LD_INT 10
13736: PUSH
13737: LD_INT 11
13739: PUSH
13740: LD_INT 12
13742: PUSH
13743: LD_INT 13
13745: PUSH
13746: LD_INT 14
13748: PUSH
13749: LD_INT 15
13751: PUSH
13752: LD_INT 16
13754: PUSH
13755: LD_INT 17
13757: PUSH
13758: LD_INT 18
13760: PUSH
13761: LD_INT 19
13763: PUSH
13764: LD_INT 20
13766: PUSH
13767: LD_INT 21
13769: PUSH
13770: LD_INT 22
13772: PUSH
13773: LD_INT 23
13775: PUSH
13776: LD_INT 24
13778: PUSH
13779: LD_INT 25
13781: PUSH
13782: LD_INT 26
13784: PUSH
13785: LD_INT 27
13787: PUSH
13788: LD_INT 28
13790: PUSH
13791: LD_INT 29
13793: PUSH
13794: LD_INT 30
13796: PUSH
13797: LD_INT 31
13799: PUSH
13800: LD_INT 32
13802: PUSH
13803: LD_INT 33
13805: PUSH
13806: LD_INT 34
13808: PUSH
13809: LD_INT 36
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 101
13851: PUSH
13852: LD_INT 102
13854: PUSH
13855: LD_INT 103
13857: PUSH
13858: LD_INT 104
13860: PUSH
13861: LD_INT 105
13863: PUSH
13864: LD_INT 106
13866: PUSH
13867: LD_INT 107
13869: PUSH
13870: LD_INT 108
13872: PUSH
13873: LD_INT 109
13875: PUSH
13876: LD_INT 110
13878: PUSH
13879: LD_INT 111
13881: PUSH
13882: LD_INT 112
13884: PUSH
13885: LD_INT 113
13887: PUSH
13888: LD_INT 114
13890: PUSH
13891: LD_INT 116
13893: PUSH
13894: LD_INT 117
13896: PUSH
13897: LD_INT 118
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: ST_TO_ADDR
13923: GO 14698
13925: LD_INT 16
13927: DOUBLE
13928: EQUAL
13929: IFTRUE 13933
13931: GO 14069
13933: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13934: LD_ADDR_VAR 0 2
13938: PUSH
13939: LD_INT 2
13941: PUSH
13942: LD_INT 4
13944: PUSH
13945: LD_INT 5
13947: PUSH
13948: LD_INT 7
13950: PUSH
13951: LD_INT 11
13953: PUSH
13954: LD_INT 12
13956: PUSH
13957: LD_INT 15
13959: PUSH
13960: LD_INT 16
13962: PUSH
13963: LD_INT 20
13965: PUSH
13966: LD_INT 21
13968: PUSH
13969: LD_INT 22
13971: PUSH
13972: LD_INT 23
13974: PUSH
13975: LD_INT 25
13977: PUSH
13978: LD_INT 26
13980: PUSH
13981: LD_INT 30
13983: PUSH
13984: LD_INT 31
13986: PUSH
13987: LD_INT 32
13989: PUSH
13990: LD_INT 33
13992: PUSH
13993: LD_INT 34
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 101
14019: PUSH
14020: LD_INT 102
14022: PUSH
14023: LD_INT 103
14025: PUSH
14026: LD_INT 106
14028: PUSH
14029: LD_INT 108
14031: PUSH
14032: LD_INT 112
14034: PUSH
14035: LD_INT 113
14037: PUSH
14038: LD_INT 114
14040: PUSH
14041: LD_INT 116
14043: PUSH
14044: LD_INT 117
14046: PUSH
14047: LD_INT 118
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: ST_TO_ADDR
14067: GO 14698
14069: LD_INT 17
14071: DOUBLE
14072: EQUAL
14073: IFTRUE 14077
14075: GO 14301
14077: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14078: LD_ADDR_VAR 0 2
14082: PUSH
14083: LD_INT 1
14085: PUSH
14086: LD_INT 2
14088: PUSH
14089: LD_INT 3
14091: PUSH
14092: LD_INT 4
14094: PUSH
14095: LD_INT 5
14097: PUSH
14098: LD_INT 6
14100: PUSH
14101: LD_INT 7
14103: PUSH
14104: LD_INT 8
14106: PUSH
14107: LD_INT 9
14109: PUSH
14110: LD_INT 10
14112: PUSH
14113: LD_INT 11
14115: PUSH
14116: LD_INT 12
14118: PUSH
14119: LD_INT 13
14121: PUSH
14122: LD_INT 14
14124: PUSH
14125: LD_INT 15
14127: PUSH
14128: LD_INT 16
14130: PUSH
14131: LD_INT 17
14133: PUSH
14134: LD_INT 18
14136: PUSH
14137: LD_INT 19
14139: PUSH
14140: LD_INT 20
14142: PUSH
14143: LD_INT 21
14145: PUSH
14146: LD_INT 22
14148: PUSH
14149: LD_INT 23
14151: PUSH
14152: LD_INT 24
14154: PUSH
14155: LD_INT 25
14157: PUSH
14158: LD_INT 26
14160: PUSH
14161: LD_INT 27
14163: PUSH
14164: LD_INT 28
14166: PUSH
14167: LD_INT 29
14169: PUSH
14170: LD_INT 30
14172: PUSH
14173: LD_INT 31
14175: PUSH
14176: LD_INT 32
14178: PUSH
14179: LD_INT 33
14181: PUSH
14182: LD_INT 34
14184: PUSH
14185: LD_INT 36
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 101
14227: PUSH
14228: LD_INT 102
14230: PUSH
14231: LD_INT 103
14233: PUSH
14234: LD_INT 104
14236: PUSH
14237: LD_INT 105
14239: PUSH
14240: LD_INT 106
14242: PUSH
14243: LD_INT 107
14245: PUSH
14246: LD_INT 108
14248: PUSH
14249: LD_INT 109
14251: PUSH
14252: LD_INT 110
14254: PUSH
14255: LD_INT 111
14257: PUSH
14258: LD_INT 112
14260: PUSH
14261: LD_INT 113
14263: PUSH
14264: LD_INT 114
14266: PUSH
14267: LD_INT 116
14269: PUSH
14270: LD_INT 117
14272: PUSH
14273: LD_INT 118
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: ST_TO_ADDR
14299: GO 14698
14301: LD_INT 18
14303: DOUBLE
14304: EQUAL
14305: IFTRUE 14309
14307: GO 14457
14309: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14310: LD_ADDR_VAR 0 2
14314: PUSH
14315: LD_INT 2
14317: PUSH
14318: LD_INT 4
14320: PUSH
14321: LD_INT 5
14323: PUSH
14324: LD_INT 7
14326: PUSH
14327: LD_INT 11
14329: PUSH
14330: LD_INT 12
14332: PUSH
14333: LD_INT 15
14335: PUSH
14336: LD_INT 16
14338: PUSH
14339: LD_INT 20
14341: PUSH
14342: LD_INT 21
14344: PUSH
14345: LD_INT 22
14347: PUSH
14348: LD_INT 23
14350: PUSH
14351: LD_INT 25
14353: PUSH
14354: LD_INT 26
14356: PUSH
14357: LD_INT 30
14359: PUSH
14360: LD_INT 31
14362: PUSH
14363: LD_INT 32
14365: PUSH
14366: LD_INT 33
14368: PUSH
14369: LD_INT 34
14371: PUSH
14372: LD_INT 35
14374: PUSH
14375: LD_INT 36
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: PUSH
14401: LD_INT 101
14403: PUSH
14404: LD_INT 102
14406: PUSH
14407: LD_INT 103
14409: PUSH
14410: LD_INT 106
14412: PUSH
14413: LD_INT 108
14415: PUSH
14416: LD_INT 112
14418: PUSH
14419: LD_INT 113
14421: PUSH
14422: LD_INT 114
14424: PUSH
14425: LD_INT 115
14427: PUSH
14428: LD_INT 116
14430: PUSH
14431: LD_INT 117
14433: PUSH
14434: LD_INT 118
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: ST_TO_ADDR
14455: GO 14698
14457: LD_INT 19
14459: DOUBLE
14460: EQUAL
14461: IFTRUE 14465
14463: GO 14697
14465: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14466: LD_ADDR_VAR 0 2
14470: PUSH
14471: LD_INT 1
14473: PUSH
14474: LD_INT 2
14476: PUSH
14477: LD_INT 3
14479: PUSH
14480: LD_INT 4
14482: PUSH
14483: LD_INT 5
14485: PUSH
14486: LD_INT 6
14488: PUSH
14489: LD_INT 7
14491: PUSH
14492: LD_INT 8
14494: PUSH
14495: LD_INT 9
14497: PUSH
14498: LD_INT 10
14500: PUSH
14501: LD_INT 11
14503: PUSH
14504: LD_INT 12
14506: PUSH
14507: LD_INT 13
14509: PUSH
14510: LD_INT 14
14512: PUSH
14513: LD_INT 15
14515: PUSH
14516: LD_INT 16
14518: PUSH
14519: LD_INT 17
14521: PUSH
14522: LD_INT 18
14524: PUSH
14525: LD_INT 19
14527: PUSH
14528: LD_INT 20
14530: PUSH
14531: LD_INT 21
14533: PUSH
14534: LD_INT 22
14536: PUSH
14537: LD_INT 23
14539: PUSH
14540: LD_INT 24
14542: PUSH
14543: LD_INT 25
14545: PUSH
14546: LD_INT 26
14548: PUSH
14549: LD_INT 27
14551: PUSH
14552: LD_INT 28
14554: PUSH
14555: LD_INT 29
14557: PUSH
14558: LD_INT 30
14560: PUSH
14561: LD_INT 31
14563: PUSH
14564: LD_INT 32
14566: PUSH
14567: LD_INT 33
14569: PUSH
14570: LD_INT 34
14572: PUSH
14573: LD_INT 35
14575: PUSH
14576: LD_INT 36
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: PUSH
14617: LD_INT 101
14619: PUSH
14620: LD_INT 102
14622: PUSH
14623: LD_INT 103
14625: PUSH
14626: LD_INT 104
14628: PUSH
14629: LD_INT 105
14631: PUSH
14632: LD_INT 106
14634: PUSH
14635: LD_INT 107
14637: PUSH
14638: LD_INT 108
14640: PUSH
14641: LD_INT 109
14643: PUSH
14644: LD_INT 110
14646: PUSH
14647: LD_INT 111
14649: PUSH
14650: LD_INT 112
14652: PUSH
14653: LD_INT 113
14655: PUSH
14656: LD_INT 114
14658: PUSH
14659: LD_INT 115
14661: PUSH
14662: LD_INT 116
14664: PUSH
14665: LD_INT 117
14667: PUSH
14668: LD_INT 118
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: ST_TO_ADDR
14695: GO 14698
14697: POP
// end else
14698: GO 14929
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14700: LD_ADDR_VAR 0 2
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: LD_INT 2
14710: PUSH
14711: LD_INT 3
14713: PUSH
14714: LD_INT 4
14716: PUSH
14717: LD_INT 5
14719: PUSH
14720: LD_INT 6
14722: PUSH
14723: LD_INT 7
14725: PUSH
14726: LD_INT 8
14728: PUSH
14729: LD_INT 9
14731: PUSH
14732: LD_INT 10
14734: PUSH
14735: LD_INT 11
14737: PUSH
14738: LD_INT 12
14740: PUSH
14741: LD_INT 13
14743: PUSH
14744: LD_INT 14
14746: PUSH
14747: LD_INT 15
14749: PUSH
14750: LD_INT 16
14752: PUSH
14753: LD_INT 17
14755: PUSH
14756: LD_INT 18
14758: PUSH
14759: LD_INT 19
14761: PUSH
14762: LD_INT 20
14764: PUSH
14765: LD_INT 21
14767: PUSH
14768: LD_INT 22
14770: PUSH
14771: LD_INT 23
14773: PUSH
14774: LD_INT 24
14776: PUSH
14777: LD_INT 25
14779: PUSH
14780: LD_INT 26
14782: PUSH
14783: LD_INT 27
14785: PUSH
14786: LD_INT 28
14788: PUSH
14789: LD_INT 29
14791: PUSH
14792: LD_INT 30
14794: PUSH
14795: LD_INT 31
14797: PUSH
14798: LD_INT 32
14800: PUSH
14801: LD_INT 33
14803: PUSH
14804: LD_INT 34
14806: PUSH
14807: LD_INT 35
14809: PUSH
14810: LD_INT 36
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: PUSH
14851: LD_INT 101
14853: PUSH
14854: LD_INT 102
14856: PUSH
14857: LD_INT 103
14859: PUSH
14860: LD_INT 104
14862: PUSH
14863: LD_INT 105
14865: PUSH
14866: LD_INT 106
14868: PUSH
14869: LD_INT 107
14871: PUSH
14872: LD_INT 108
14874: PUSH
14875: LD_INT 109
14877: PUSH
14878: LD_INT 110
14880: PUSH
14881: LD_INT 111
14883: PUSH
14884: LD_INT 112
14886: PUSH
14887: LD_INT 113
14889: PUSH
14890: LD_INT 114
14892: PUSH
14893: LD_INT 115
14895: PUSH
14896: LD_INT 116
14898: PUSH
14899: LD_INT 117
14901: PUSH
14902: LD_INT 118
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: ST_TO_ADDR
// if result then
14929: LD_VAR 0 2
14933: IFFALSE 15719
// begin normal :=  ;
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: LD_STRING 
14942: ST_TO_ADDR
// hardcore :=  ;
14943: LD_ADDR_VAR 0 6
14947: PUSH
14948: LD_STRING 
14950: ST_TO_ADDR
// active :=  ;
14951: LD_ADDR_VAR 0 7
14955: PUSH
14956: LD_STRING 
14958: ST_TO_ADDR
// for i = 1 to normalCounter do
14959: LD_ADDR_VAR 0 8
14963: PUSH
14964: DOUBLE
14965: LD_INT 1
14967: DEC
14968: ST_TO_ADDR
14969: LD_EXP 44
14973: PUSH
14974: FOR_TO
14975: IFFALSE 15076
// begin tmp := 0 ;
14977: LD_ADDR_VAR 0 3
14981: PUSH
14982: LD_STRING 0
14984: ST_TO_ADDR
// if result [ 1 ] then
14985: LD_VAR 0 2
14989: PUSH
14990: LD_INT 1
14992: ARRAY
14993: IFFALSE 15058
// if result [ 1 ] [ 1 ] = i then
14995: LD_VAR 0 2
14999: PUSH
15000: LD_INT 1
15002: ARRAY
15003: PUSH
15004: LD_INT 1
15006: ARRAY
15007: PUSH
15008: LD_VAR 0 8
15012: EQUAL
15013: IFFALSE 15058
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15015: LD_ADDR_VAR 0 2
15019: PUSH
15020: LD_VAR 0 2
15024: PPUSH
15025: LD_INT 1
15027: PPUSH
15028: LD_VAR 0 2
15032: PUSH
15033: LD_INT 1
15035: ARRAY
15036: PPUSH
15037: LD_INT 1
15039: PPUSH
15040: CALL_OW 3
15044: PPUSH
15045: CALL_OW 1
15049: ST_TO_ADDR
// tmp := 1 ;
15050: LD_ADDR_VAR 0 3
15054: PUSH
15055: LD_STRING 1
15057: ST_TO_ADDR
// end ; normal := normal & tmp ;
15058: LD_ADDR_VAR 0 5
15062: PUSH
15063: LD_VAR 0 5
15067: PUSH
15068: LD_VAR 0 3
15072: STR
15073: ST_TO_ADDR
// end ;
15074: GO 14974
15076: POP
15077: POP
// for i = 1 to hardcoreCounter do
15078: LD_ADDR_VAR 0 8
15082: PUSH
15083: DOUBLE
15084: LD_INT 1
15086: DEC
15087: ST_TO_ADDR
15088: LD_EXP 45
15092: PUSH
15093: FOR_TO
15094: IFFALSE 15199
// begin tmp := 0 ;
15096: LD_ADDR_VAR 0 3
15100: PUSH
15101: LD_STRING 0
15103: ST_TO_ADDR
// if result [ 2 ] then
15104: LD_VAR 0 2
15108: PUSH
15109: LD_INT 2
15111: ARRAY
15112: IFFALSE 15181
// if result [ 2 ] [ 1 ] = 100 + i then
15114: LD_VAR 0 2
15118: PUSH
15119: LD_INT 2
15121: ARRAY
15122: PUSH
15123: LD_INT 1
15125: ARRAY
15126: PUSH
15127: LD_INT 100
15129: PUSH
15130: LD_VAR 0 8
15134: PLUS
15135: EQUAL
15136: IFFALSE 15181
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15138: LD_ADDR_VAR 0 2
15142: PUSH
15143: LD_VAR 0 2
15147: PPUSH
15148: LD_INT 2
15150: PPUSH
15151: LD_VAR 0 2
15155: PUSH
15156: LD_INT 2
15158: ARRAY
15159: PPUSH
15160: LD_INT 1
15162: PPUSH
15163: CALL_OW 3
15167: PPUSH
15168: CALL_OW 1
15172: ST_TO_ADDR
// tmp := 1 ;
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_STRING 1
15180: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15181: LD_ADDR_VAR 0 6
15185: PUSH
15186: LD_VAR 0 6
15190: PUSH
15191: LD_VAR 0 3
15195: STR
15196: ST_TO_ADDR
// end ;
15197: GO 15093
15199: POP
15200: POP
// if isGameLoad then
15201: LD_VAR 0 1
15205: IFFALSE 15680
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15207: LD_ADDR_VAR 0 4
15211: PUSH
15212: LD_EXP 48
15216: PUSH
15217: LD_EXP 47
15221: PUSH
15222: LD_EXP 49
15226: PUSH
15227: LD_EXP 46
15231: PUSH
15232: LD_EXP 50
15236: PUSH
15237: LD_EXP 51
15241: PUSH
15242: LD_EXP 52
15246: PUSH
15247: LD_EXP 53
15251: PUSH
15252: LD_EXP 54
15256: PUSH
15257: LD_EXP 55
15261: PUSH
15262: LD_EXP 56
15266: PUSH
15267: LD_EXP 57
15271: PUSH
15272: LD_EXP 58
15276: PUSH
15277: LD_EXP 59
15281: PUSH
15282: LD_EXP 67
15286: PUSH
15287: LD_EXP 68
15291: PUSH
15292: LD_EXP 69
15296: PUSH
15297: LD_EXP 70
15301: PUSH
15302: LD_EXP 72
15306: PUSH
15307: LD_EXP 73
15311: PUSH
15312: LD_EXP 74
15316: PUSH
15317: LD_EXP 77
15321: PUSH
15322: LD_EXP 79
15326: PUSH
15327: LD_EXP 80
15331: PUSH
15332: LD_EXP 81
15336: PUSH
15337: LD_EXP 83
15341: PUSH
15342: LD_EXP 84
15346: PUSH
15347: LD_EXP 87
15351: PUSH
15352: LD_EXP 88
15356: PUSH
15357: LD_EXP 89
15361: PUSH
15362: LD_EXP 90
15366: PUSH
15367: LD_EXP 91
15371: PUSH
15372: LD_EXP 92
15376: PUSH
15377: LD_EXP 93
15381: PUSH
15382: LD_EXP 94
15386: PUSH
15387: LD_EXP 95
15391: PUSH
15392: LD_EXP 60
15396: PUSH
15397: LD_EXP 61
15401: PUSH
15402: LD_EXP 64
15406: PUSH
15407: LD_EXP 65
15411: PUSH
15412: LD_EXP 66
15416: PUSH
15417: LD_EXP 62
15421: PUSH
15422: LD_EXP 63
15426: PUSH
15427: LD_EXP 71
15431: PUSH
15432: LD_EXP 75
15436: PUSH
15437: LD_EXP 76
15441: PUSH
15442: LD_EXP 78
15446: PUSH
15447: LD_EXP 82
15451: PUSH
15452: LD_EXP 85
15456: PUSH
15457: LD_EXP 86
15461: PUSH
15462: LD_EXP 96
15466: PUSH
15467: LD_EXP 97
15471: PUSH
15472: LD_EXP 98
15476: PUSH
15477: LD_EXP 99
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: ST_TO_ADDR
// tmp :=  ;
15538: LD_ADDR_VAR 0 3
15542: PUSH
15543: LD_STRING 
15545: ST_TO_ADDR
// for i = 1 to normalCounter do
15546: LD_ADDR_VAR 0 8
15550: PUSH
15551: DOUBLE
15552: LD_INT 1
15554: DEC
15555: ST_TO_ADDR
15556: LD_EXP 44
15560: PUSH
15561: FOR_TO
15562: IFFALSE 15598
// begin if flags [ i ] then
15564: LD_VAR 0 4
15568: PUSH
15569: LD_VAR 0 8
15573: ARRAY
15574: IFFALSE 15596
// tmp := tmp & i & ; ;
15576: LD_ADDR_VAR 0 3
15580: PUSH
15581: LD_VAR 0 3
15585: PUSH
15586: LD_VAR 0 8
15590: STR
15591: PUSH
15592: LD_STRING ;
15594: STR
15595: ST_TO_ADDR
// end ;
15596: GO 15561
15598: POP
15599: POP
// for i = 1 to hardcoreCounter do
15600: LD_ADDR_VAR 0 8
15604: PUSH
15605: DOUBLE
15606: LD_INT 1
15608: DEC
15609: ST_TO_ADDR
15610: LD_EXP 45
15614: PUSH
15615: FOR_TO
15616: IFFALSE 15662
// begin if flags [ normalCounter + i ] then
15618: LD_VAR 0 4
15622: PUSH
15623: LD_EXP 44
15627: PUSH
15628: LD_VAR 0 8
15632: PLUS
15633: ARRAY
15634: IFFALSE 15660
// tmp := tmp & ( 100 + i ) & ; ;
15636: LD_ADDR_VAR 0 3
15640: PUSH
15641: LD_VAR 0 3
15645: PUSH
15646: LD_INT 100
15648: PUSH
15649: LD_VAR 0 8
15653: PLUS
15654: STR
15655: PUSH
15656: LD_STRING ;
15658: STR
15659: ST_TO_ADDR
// end ;
15660: GO 15615
15662: POP
15663: POP
// if tmp then
15664: LD_VAR 0 3
15668: IFFALSE 15680
// active := tmp ;
15670: LD_ADDR_VAR 0 7
15674: PUSH
15675: LD_VAR 0 3
15679: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15680: LD_STRING getStreamItemsFromMission("
15682: PUSH
15683: LD_VAR 0 5
15687: STR
15688: PUSH
15689: LD_STRING ","
15691: STR
15692: PUSH
15693: LD_VAR 0 6
15697: STR
15698: PUSH
15699: LD_STRING ","
15701: STR
15702: PUSH
15703: LD_VAR 0 7
15707: STR
15708: PUSH
15709: LD_STRING ")
15711: STR
15712: PPUSH
15713: CALL_OW 559
// end else
15717: GO 15726
// ToLua ( getStreamItemsFromMission("","","") ) ;
15719: LD_STRING getStreamItemsFromMission("","","")
15721: PPUSH
15722: CALL_OW 559
// end ;
15726: LD_VAR 0 2
15730: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15731: LD_EXP 43
15735: PUSH
15736: LD_EXP 48
15740: AND
15741: IFFALSE 15865
15743: GO 15745
15745: DISABLE
15746: LD_INT 0
15748: PPUSH
15749: PPUSH
// begin enable ;
15750: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15751: LD_ADDR_VAR 0 2
15755: PUSH
15756: LD_INT 22
15758: PUSH
15759: LD_OWVAR 2
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 2
15770: PUSH
15771: LD_INT 34
15773: PUSH
15774: LD_INT 7
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 34
15783: PUSH
15784: LD_INT 45
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 34
15793: PUSH
15794: LD_INT 28
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 34
15803: PUSH
15804: LD_INT 47
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PPUSH
15822: CALL_OW 69
15826: ST_TO_ADDR
// if not tmp then
15827: LD_VAR 0 2
15831: NOT
15832: IFFALSE 15836
// exit ;
15834: GO 15865
// for i in tmp do
15836: LD_ADDR_VAR 0 1
15840: PUSH
15841: LD_VAR 0 2
15845: PUSH
15846: FOR_IN
15847: IFFALSE 15863
// begin SetLives ( i , 0 ) ;
15849: LD_VAR 0 1
15853: PPUSH
15854: LD_INT 0
15856: PPUSH
15857: CALL_OW 234
// end ;
15861: GO 15846
15863: POP
15864: POP
// end ;
15865: PPOPN 2
15867: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15868: LD_EXP 43
15872: PUSH
15873: LD_EXP 49
15877: AND
15878: IFFALSE 15962
15880: GO 15882
15882: DISABLE
15883: LD_INT 0
15885: PPUSH
15886: PPUSH
// begin enable ;
15887: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15888: LD_ADDR_VAR 0 2
15892: PUSH
15893: LD_INT 22
15895: PUSH
15896: LD_OWVAR 2
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: LD_INT 32
15907: PUSH
15908: LD_INT 3
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PPUSH
15919: CALL_OW 69
15923: ST_TO_ADDR
// if not tmp then
15924: LD_VAR 0 2
15928: NOT
15929: IFFALSE 15933
// exit ;
15931: GO 15962
// for i in tmp do
15933: LD_ADDR_VAR 0 1
15937: PUSH
15938: LD_VAR 0 2
15942: PUSH
15943: FOR_IN
15944: IFFALSE 15960
// begin SetLives ( i , 0 ) ;
15946: LD_VAR 0 1
15950: PPUSH
15951: LD_INT 0
15953: PPUSH
15954: CALL_OW 234
// end ;
15958: GO 15943
15960: POP
15961: POP
// end ;
15962: PPOPN 2
15964: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15965: LD_EXP 43
15969: PUSH
15970: LD_EXP 46
15974: AND
15975: IFFALSE 16068
15977: GO 15979
15979: DISABLE
15980: LD_INT 0
15982: PPUSH
// begin enable ;
15983: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15984: LD_ADDR_VAR 0 1
15988: PUSH
15989: LD_INT 22
15991: PUSH
15992: LD_OWVAR 2
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: LD_INT 2
16003: PUSH
16004: LD_INT 25
16006: PUSH
16007: LD_INT 5
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 25
16016: PUSH
16017: LD_INT 9
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 25
16026: PUSH
16027: LD_INT 8
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PPUSH
16044: CALL_OW 69
16048: PUSH
16049: FOR_IN
16050: IFFALSE 16066
// begin SetClass ( i , 1 ) ;
16052: LD_VAR 0 1
16056: PPUSH
16057: LD_INT 1
16059: PPUSH
16060: CALL_OW 336
// end ;
16064: GO 16049
16066: POP
16067: POP
// end ;
16068: PPOPN 1
16070: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16071: LD_EXP 43
16075: PUSH
16076: LD_EXP 47
16080: AND
16081: PUSH
16082: LD_OWVAR 65
16086: PUSH
16087: LD_INT 7
16089: LESS
16090: AND
16091: IFFALSE 16105
16093: GO 16095
16095: DISABLE
// begin enable ;
16096: ENABLE
// game_speed := 7 ;
16097: LD_ADDR_OWVAR 65
16101: PUSH
16102: LD_INT 7
16104: ST_TO_ADDR
// end ;
16105: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16106: LD_EXP 43
16110: PUSH
16111: LD_EXP 50
16115: AND
16116: IFFALSE 16318
16118: GO 16120
16120: DISABLE
16121: LD_INT 0
16123: PPUSH
16124: PPUSH
16125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16126: LD_ADDR_VAR 0 3
16130: PUSH
16131: LD_INT 81
16133: PUSH
16134: LD_OWVAR 2
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 21
16145: PUSH
16146: LD_INT 1
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PPUSH
16157: CALL_OW 69
16161: ST_TO_ADDR
// if not tmp then
16162: LD_VAR 0 3
16166: NOT
16167: IFFALSE 16171
// exit ;
16169: GO 16318
// if tmp > 5 then
16171: LD_VAR 0 3
16175: PUSH
16176: LD_INT 5
16178: GREATER
16179: IFFALSE 16191
// k := 5 else
16181: LD_ADDR_VAR 0 2
16185: PUSH
16186: LD_INT 5
16188: ST_TO_ADDR
16189: GO 16201
// k := tmp ;
16191: LD_ADDR_VAR 0 2
16195: PUSH
16196: LD_VAR 0 3
16200: ST_TO_ADDR
// for i := 1 to k do
16201: LD_ADDR_VAR 0 1
16205: PUSH
16206: DOUBLE
16207: LD_INT 1
16209: DEC
16210: ST_TO_ADDR
16211: LD_VAR 0 2
16215: PUSH
16216: FOR_TO
16217: IFFALSE 16316
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16219: LD_VAR 0 3
16223: PUSH
16224: LD_VAR 0 1
16228: ARRAY
16229: PPUSH
16230: LD_VAR 0 1
16234: PUSH
16235: LD_INT 4
16237: MOD
16238: PUSH
16239: LD_INT 1
16241: PLUS
16242: PPUSH
16243: CALL_OW 259
16247: PUSH
16248: LD_INT 10
16250: LESS
16251: IFFALSE 16314
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16253: LD_VAR 0 3
16257: PUSH
16258: LD_VAR 0 1
16262: ARRAY
16263: PPUSH
16264: LD_VAR 0 1
16268: PUSH
16269: LD_INT 4
16271: MOD
16272: PUSH
16273: LD_INT 1
16275: PLUS
16276: PPUSH
16277: LD_VAR 0 3
16281: PUSH
16282: LD_VAR 0 1
16286: ARRAY
16287: PPUSH
16288: LD_VAR 0 1
16292: PUSH
16293: LD_INT 4
16295: MOD
16296: PUSH
16297: LD_INT 1
16299: PLUS
16300: PPUSH
16301: CALL_OW 259
16305: PUSH
16306: LD_INT 1
16308: PLUS
16309: PPUSH
16310: CALL_OW 237
16314: GO 16216
16316: POP
16317: POP
// end ;
16318: PPOPN 3
16320: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16321: LD_EXP 43
16325: PUSH
16326: LD_EXP 51
16330: AND
16331: IFFALSE 16351
16333: GO 16335
16335: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16336: LD_INT 4
16338: PPUSH
16339: LD_OWVAR 2
16343: PPUSH
16344: LD_INT 0
16346: PPUSH
16347: CALL_OW 324
16351: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16352: LD_EXP 43
16356: PUSH
16357: LD_EXP 80
16361: AND
16362: IFFALSE 16382
16364: GO 16366
16366: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16367: LD_INT 19
16369: PPUSH
16370: LD_OWVAR 2
16374: PPUSH
16375: LD_INT 0
16377: PPUSH
16378: CALL_OW 324
16382: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16383: LD_EXP 43
16387: PUSH
16388: LD_EXP 52
16392: AND
16393: IFFALSE 16495
16395: GO 16397
16397: DISABLE
16398: LD_INT 0
16400: PPUSH
16401: PPUSH
// begin enable ;
16402: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16403: LD_ADDR_VAR 0 2
16407: PUSH
16408: LD_INT 22
16410: PUSH
16411: LD_OWVAR 2
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 2
16422: PUSH
16423: LD_INT 34
16425: PUSH
16426: LD_INT 11
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 34
16435: PUSH
16436: LD_INT 30
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: LIST
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PPUSH
16452: CALL_OW 69
16456: ST_TO_ADDR
// if not tmp then
16457: LD_VAR 0 2
16461: NOT
16462: IFFALSE 16466
// exit ;
16464: GO 16495
// for i in tmp do
16466: LD_ADDR_VAR 0 1
16470: PUSH
16471: LD_VAR 0 2
16475: PUSH
16476: FOR_IN
16477: IFFALSE 16493
// begin SetLives ( i , 0 ) ;
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_INT 0
16486: PPUSH
16487: CALL_OW 234
// end ;
16491: GO 16476
16493: POP
16494: POP
// end ;
16495: PPOPN 2
16497: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16498: LD_EXP 43
16502: PUSH
16503: LD_EXP 53
16507: AND
16508: IFFALSE 16528
16510: GO 16512
16512: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16513: LD_INT 32
16515: PPUSH
16516: LD_OWVAR 2
16520: PPUSH
16521: LD_INT 0
16523: PPUSH
16524: CALL_OW 324
16528: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16529: LD_EXP 43
16533: PUSH
16534: LD_EXP 54
16538: AND
16539: IFFALSE 16720
16541: GO 16543
16543: DISABLE
16544: LD_INT 0
16546: PPUSH
16547: PPUSH
16548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16549: LD_ADDR_VAR 0 2
16553: PUSH
16554: LD_INT 22
16556: PUSH
16557: LD_OWVAR 2
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 33
16568: PUSH
16569: LD_INT 3
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PPUSH
16580: CALL_OW 69
16584: ST_TO_ADDR
// if not tmp then
16585: LD_VAR 0 2
16589: NOT
16590: IFFALSE 16594
// exit ;
16592: GO 16720
// side := 0 ;
16594: LD_ADDR_VAR 0 3
16598: PUSH
16599: LD_INT 0
16601: ST_TO_ADDR
// for i := 1 to 8 do
16602: LD_ADDR_VAR 0 1
16606: PUSH
16607: DOUBLE
16608: LD_INT 1
16610: DEC
16611: ST_TO_ADDR
16612: LD_INT 8
16614: PUSH
16615: FOR_TO
16616: IFFALSE 16664
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16618: LD_OWVAR 2
16622: PUSH
16623: LD_VAR 0 1
16627: NONEQUAL
16628: PUSH
16629: LD_OWVAR 2
16633: PPUSH
16634: LD_VAR 0 1
16638: PPUSH
16639: CALL_OW 81
16643: PUSH
16644: LD_INT 2
16646: EQUAL
16647: AND
16648: IFFALSE 16662
// begin side := i ;
16650: LD_ADDR_VAR 0 3
16654: PUSH
16655: LD_VAR 0 1
16659: ST_TO_ADDR
// break ;
16660: GO 16664
// end ;
16662: GO 16615
16664: POP
16665: POP
// if not side then
16666: LD_VAR 0 3
16670: NOT
16671: IFFALSE 16675
// exit ;
16673: GO 16720
// for i := 1 to tmp do
16675: LD_ADDR_VAR 0 1
16679: PUSH
16680: DOUBLE
16681: LD_INT 1
16683: DEC
16684: ST_TO_ADDR
16685: LD_VAR 0 2
16689: PUSH
16690: FOR_TO
16691: IFFALSE 16718
// if Prob ( 60 ) then
16693: LD_INT 60
16695: PPUSH
16696: CALL_OW 13
16700: IFFALSE 16716
// SetSide ( i , side ) ;
16702: LD_VAR 0 1
16706: PPUSH
16707: LD_VAR 0 3
16711: PPUSH
16712: CALL_OW 235
16716: GO 16690
16718: POP
16719: POP
// end ;
16720: PPOPN 3
16722: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16723: LD_EXP 43
16727: PUSH
16728: LD_EXP 56
16732: AND
16733: IFFALSE 16852
16735: GO 16737
16737: DISABLE
16738: LD_INT 0
16740: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16741: LD_ADDR_VAR 0 1
16745: PUSH
16746: LD_INT 22
16748: PUSH
16749: LD_OWVAR 2
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 21
16760: PUSH
16761: LD_INT 1
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 3
16770: PUSH
16771: LD_INT 23
16773: PUSH
16774: LD_INT 0
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: LIST
16789: PPUSH
16790: CALL_OW 69
16794: PUSH
16795: FOR_IN
16796: IFFALSE 16850
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16798: LD_VAR 0 1
16802: PPUSH
16803: CALL_OW 257
16807: PUSH
16808: LD_INT 1
16810: PUSH
16811: LD_INT 2
16813: PUSH
16814: LD_INT 3
16816: PUSH
16817: LD_INT 4
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: IN
16826: IFFALSE 16848
// SetClass ( un , rand ( 1 , 4 ) ) ;
16828: LD_VAR 0 1
16832: PPUSH
16833: LD_INT 1
16835: PPUSH
16836: LD_INT 4
16838: PPUSH
16839: CALL_OW 12
16843: PPUSH
16844: CALL_OW 336
16848: GO 16795
16850: POP
16851: POP
// end ;
16852: PPOPN 1
16854: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16855: LD_EXP 43
16859: PUSH
16860: LD_EXP 55
16864: AND
16865: IFFALSE 16944
16867: GO 16869
16869: DISABLE
16870: LD_INT 0
16872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16873: LD_ADDR_VAR 0 1
16877: PUSH
16878: LD_INT 22
16880: PUSH
16881: LD_OWVAR 2
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: LD_INT 21
16892: PUSH
16893: LD_INT 3
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PPUSH
16904: CALL_OW 69
16908: ST_TO_ADDR
// if not tmp then
16909: LD_VAR 0 1
16913: NOT
16914: IFFALSE 16918
// exit ;
16916: GO 16944
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16918: LD_VAR 0 1
16922: PUSH
16923: LD_INT 1
16925: PPUSH
16926: LD_VAR 0 1
16930: PPUSH
16931: CALL_OW 12
16935: ARRAY
16936: PPUSH
16937: LD_INT 100
16939: PPUSH
16940: CALL_OW 234
// end ;
16944: PPOPN 1
16946: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16947: LD_EXP 43
16951: PUSH
16952: LD_EXP 57
16956: AND
16957: IFFALSE 17055
16959: GO 16961
16961: DISABLE
16962: LD_INT 0
16964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16965: LD_ADDR_VAR 0 1
16969: PUSH
16970: LD_INT 22
16972: PUSH
16973: LD_OWVAR 2
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 21
16984: PUSH
16985: LD_INT 1
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PPUSH
16996: CALL_OW 69
17000: ST_TO_ADDR
// if not tmp then
17001: LD_VAR 0 1
17005: NOT
17006: IFFALSE 17010
// exit ;
17008: GO 17055
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17010: LD_VAR 0 1
17014: PUSH
17015: LD_INT 1
17017: PPUSH
17018: LD_VAR 0 1
17022: PPUSH
17023: CALL_OW 12
17027: ARRAY
17028: PPUSH
17029: LD_INT 1
17031: PPUSH
17032: LD_INT 4
17034: PPUSH
17035: CALL_OW 12
17039: PPUSH
17040: LD_INT 3000
17042: PPUSH
17043: LD_INT 9000
17045: PPUSH
17046: CALL_OW 12
17050: PPUSH
17051: CALL_OW 492
// end ;
17055: PPOPN 1
17057: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17058: LD_EXP 43
17062: PUSH
17063: LD_EXP 58
17067: AND
17068: IFFALSE 17088
17070: GO 17072
17072: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17073: LD_INT 1
17075: PPUSH
17076: LD_OWVAR 2
17080: PPUSH
17081: LD_INT 0
17083: PPUSH
17084: CALL_OW 324
17088: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17089: LD_EXP 43
17093: PUSH
17094: LD_EXP 59
17098: AND
17099: IFFALSE 17182
17101: GO 17103
17103: DISABLE
17104: LD_INT 0
17106: PPUSH
17107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17108: LD_ADDR_VAR 0 2
17112: PUSH
17113: LD_INT 22
17115: PUSH
17116: LD_OWVAR 2
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 21
17127: PUSH
17128: LD_INT 3
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PPUSH
17139: CALL_OW 69
17143: ST_TO_ADDR
// if not tmp then
17144: LD_VAR 0 2
17148: NOT
17149: IFFALSE 17153
// exit ;
17151: GO 17182
// for i in tmp do
17153: LD_ADDR_VAR 0 1
17157: PUSH
17158: LD_VAR 0 2
17162: PUSH
17163: FOR_IN
17164: IFFALSE 17180
// SetBLevel ( i , 10 ) ;
17166: LD_VAR 0 1
17170: PPUSH
17171: LD_INT 10
17173: PPUSH
17174: CALL_OW 241
17178: GO 17163
17180: POP
17181: POP
// end ;
17182: PPOPN 2
17184: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17185: LD_EXP 43
17189: PUSH
17190: LD_EXP 60
17194: AND
17195: IFFALSE 17306
17197: GO 17199
17199: DISABLE
17200: LD_INT 0
17202: PPUSH
17203: PPUSH
17204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17205: LD_ADDR_VAR 0 3
17209: PUSH
17210: LD_INT 22
17212: PUSH
17213: LD_OWVAR 2
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 25
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PPUSH
17236: CALL_OW 69
17240: ST_TO_ADDR
// if not tmp then
17241: LD_VAR 0 3
17245: NOT
17246: IFFALSE 17250
// exit ;
17248: GO 17306
// un := tmp [ rand ( 1 , tmp ) ] ;
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_VAR 0 3
17259: PUSH
17260: LD_INT 1
17262: PPUSH
17263: LD_VAR 0 3
17267: PPUSH
17268: CALL_OW 12
17272: ARRAY
17273: ST_TO_ADDR
// if Crawls ( un ) then
17274: LD_VAR 0 2
17278: PPUSH
17279: CALL_OW 318
17283: IFFALSE 17294
// ComWalk ( un ) ;
17285: LD_VAR 0 2
17289: PPUSH
17290: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17294: LD_VAR 0 2
17298: PPUSH
17299: LD_INT 5
17301: PPUSH
17302: CALL_OW 336
// end ;
17306: PPOPN 3
17308: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17309: LD_EXP 43
17313: PUSH
17314: LD_EXP 61
17318: AND
17319: PUSH
17320: LD_OWVAR 67
17324: PUSH
17325: LD_INT 4
17327: LESS
17328: AND
17329: IFFALSE 17348
17331: GO 17333
17333: DISABLE
// begin Difficulty := Difficulty + 1 ;
17334: LD_ADDR_OWVAR 67
17338: PUSH
17339: LD_OWVAR 67
17343: PUSH
17344: LD_INT 1
17346: PLUS
17347: ST_TO_ADDR
// end ;
17348: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17349: LD_EXP 43
17353: PUSH
17354: LD_EXP 62
17358: AND
17359: IFFALSE 17462
17361: GO 17363
17363: DISABLE
17364: LD_INT 0
17366: PPUSH
// begin for i := 1 to 5 do
17367: LD_ADDR_VAR 0 1
17371: PUSH
17372: DOUBLE
17373: LD_INT 1
17375: DEC
17376: ST_TO_ADDR
17377: LD_INT 5
17379: PUSH
17380: FOR_TO
17381: IFFALSE 17460
// begin uc_nation := nation_nature ;
17383: LD_ADDR_OWVAR 21
17387: PUSH
17388: LD_INT 0
17390: ST_TO_ADDR
// uc_side := 0 ;
17391: LD_ADDR_OWVAR 20
17395: PUSH
17396: LD_INT 0
17398: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17399: LD_ADDR_OWVAR 29
17403: PUSH
17404: LD_INT 12
17406: PUSH
17407: LD_INT 12
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: ST_TO_ADDR
// hc_agressivity := 20 ;
17414: LD_ADDR_OWVAR 35
17418: PUSH
17419: LD_INT 20
17421: ST_TO_ADDR
// hc_class := class_tiger ;
17422: LD_ADDR_OWVAR 28
17426: PUSH
17427: LD_INT 14
17429: ST_TO_ADDR
// hc_gallery :=  ;
17430: LD_ADDR_OWVAR 33
17434: PUSH
17435: LD_STRING 
17437: ST_TO_ADDR
// hc_name :=  ;
17438: LD_ADDR_OWVAR 26
17442: PUSH
17443: LD_STRING 
17445: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17446: CALL_OW 44
17450: PPUSH
17451: LD_INT 0
17453: PPUSH
17454: CALL_OW 51
// end ;
17458: GO 17380
17460: POP
17461: POP
// end ;
17462: PPOPN 1
17464: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17465: LD_EXP 43
17469: PUSH
17470: LD_EXP 63
17474: AND
17475: IFFALSE 17484
17477: GO 17479
17479: DISABLE
// StreamSibBomb ;
17480: CALL 17485 0 0
17484: END
// export function StreamSibBomb ; var i , x , y ; begin
17485: LD_INT 0
17487: PPUSH
17488: PPUSH
17489: PPUSH
17490: PPUSH
// result := false ;
17491: LD_ADDR_VAR 0 1
17495: PUSH
17496: LD_INT 0
17498: ST_TO_ADDR
// for i := 1 to 16 do
17499: LD_ADDR_VAR 0 2
17503: PUSH
17504: DOUBLE
17505: LD_INT 1
17507: DEC
17508: ST_TO_ADDR
17509: LD_INT 16
17511: PUSH
17512: FOR_TO
17513: IFFALSE 17712
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17515: LD_ADDR_VAR 0 3
17519: PUSH
17520: LD_INT 10
17522: PUSH
17523: LD_INT 20
17525: PUSH
17526: LD_INT 30
17528: PUSH
17529: LD_INT 40
17531: PUSH
17532: LD_INT 50
17534: PUSH
17535: LD_INT 60
17537: PUSH
17538: LD_INT 70
17540: PUSH
17541: LD_INT 80
17543: PUSH
17544: LD_INT 90
17546: PUSH
17547: LD_INT 100
17549: PUSH
17550: LD_INT 110
17552: PUSH
17553: LD_INT 120
17555: PUSH
17556: LD_INT 130
17558: PUSH
17559: LD_INT 140
17561: PUSH
17562: LD_INT 150
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 1
17584: PPUSH
17585: LD_INT 15
17587: PPUSH
17588: CALL_OW 12
17592: ARRAY
17593: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17594: LD_ADDR_VAR 0 4
17598: PUSH
17599: LD_INT 10
17601: PUSH
17602: LD_INT 20
17604: PUSH
17605: LD_INT 30
17607: PUSH
17608: LD_INT 40
17610: PUSH
17611: LD_INT 50
17613: PUSH
17614: LD_INT 60
17616: PUSH
17617: LD_INT 70
17619: PUSH
17620: LD_INT 80
17622: PUSH
17623: LD_INT 90
17625: PUSH
17626: LD_INT 100
17628: PUSH
17629: LD_INT 110
17631: PUSH
17632: LD_INT 120
17634: PUSH
17635: LD_INT 130
17637: PUSH
17638: LD_INT 140
17640: PUSH
17641: LD_INT 150
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 1
17663: PPUSH
17664: LD_INT 15
17666: PPUSH
17667: CALL_OW 12
17671: ARRAY
17672: ST_TO_ADDR
// if ValidHex ( x , y ) then
17673: LD_VAR 0 3
17677: PPUSH
17678: LD_VAR 0 4
17682: PPUSH
17683: CALL_OW 488
17687: IFFALSE 17710
// begin result := [ x , y ] ;
17689: LD_ADDR_VAR 0 1
17693: PUSH
17694: LD_VAR 0 3
17698: PUSH
17699: LD_VAR 0 4
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: ST_TO_ADDR
// break ;
17708: GO 17712
// end ; end ;
17710: GO 17512
17712: POP
17713: POP
// if result then
17714: LD_VAR 0 1
17718: IFFALSE 17778
// begin ToLua ( playSibBomb() ) ;
17720: LD_STRING playSibBomb()
17722: PPUSH
17723: CALL_OW 559
// wait ( 0 0$14 ) ;
17727: LD_INT 490
17729: PPUSH
17730: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17734: LD_VAR 0 1
17738: PUSH
17739: LD_INT 1
17741: ARRAY
17742: PPUSH
17743: LD_VAR 0 1
17747: PUSH
17748: LD_INT 2
17750: ARRAY
17751: PPUSH
17752: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17756: LD_VAR 0 1
17760: PUSH
17761: LD_INT 1
17763: ARRAY
17764: PPUSH
17765: LD_VAR 0 1
17769: PUSH
17770: LD_INT 2
17772: ARRAY
17773: PPUSH
17774: CALL_OW 429
// end ; end ;
17778: LD_VAR 0 1
17782: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17783: LD_EXP 43
17787: PUSH
17788: LD_EXP 65
17792: AND
17793: IFFALSE 17805
17795: GO 17797
17797: DISABLE
// YouLost (  ) ;
17798: LD_STRING 
17800: PPUSH
17801: CALL_OW 104
17805: END
// every 0 0$1 trigger StreamModeActive and sFog do
17806: LD_EXP 43
17810: PUSH
17811: LD_EXP 64
17815: AND
17816: IFFALSE 17830
17818: GO 17820
17820: DISABLE
// FogOff ( your_side ) ;
17821: LD_OWVAR 2
17825: PPUSH
17826: CALL_OW 344
17830: END
// every 0 0$1 trigger StreamModeActive and sSun do
17831: LD_EXP 43
17835: PUSH
17836: LD_EXP 66
17840: AND
17841: IFFALSE 17869
17843: GO 17845
17845: DISABLE
// begin solar_recharge_percent := 0 ;
17846: LD_ADDR_OWVAR 79
17850: PUSH
17851: LD_INT 0
17853: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17854: LD_INT 10500
17856: PPUSH
17857: CALL_OW 67
// solar_recharge_percent := 100 ;
17861: LD_ADDR_OWVAR 79
17865: PUSH
17866: LD_INT 100
17868: ST_TO_ADDR
// end ;
17869: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17870: LD_EXP 43
17874: PUSH
17875: LD_EXP 67
17879: AND
17880: IFFALSE 18119
17882: GO 17884
17884: DISABLE
17885: LD_INT 0
17887: PPUSH
17888: PPUSH
17889: PPUSH
// begin tmp := [ ] ;
17890: LD_ADDR_VAR 0 3
17894: PUSH
17895: EMPTY
17896: ST_TO_ADDR
// for i := 1 to 6 do
17897: LD_ADDR_VAR 0 1
17901: PUSH
17902: DOUBLE
17903: LD_INT 1
17905: DEC
17906: ST_TO_ADDR
17907: LD_INT 6
17909: PUSH
17910: FOR_TO
17911: IFFALSE 18016
// begin uc_nation := nation_nature ;
17913: LD_ADDR_OWVAR 21
17917: PUSH
17918: LD_INT 0
17920: ST_TO_ADDR
// uc_side := 0 ;
17921: LD_ADDR_OWVAR 20
17925: PUSH
17926: LD_INT 0
17928: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17929: LD_ADDR_OWVAR 29
17933: PUSH
17934: LD_INT 12
17936: PUSH
17937: LD_INT 12
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: ST_TO_ADDR
// hc_agressivity := 20 ;
17944: LD_ADDR_OWVAR 35
17948: PUSH
17949: LD_INT 20
17951: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17952: LD_ADDR_OWVAR 28
17956: PUSH
17957: LD_INT 17
17959: ST_TO_ADDR
// hc_gallery :=  ;
17960: LD_ADDR_OWVAR 33
17964: PUSH
17965: LD_STRING 
17967: ST_TO_ADDR
// hc_name :=  ;
17968: LD_ADDR_OWVAR 26
17972: PUSH
17973: LD_STRING 
17975: ST_TO_ADDR
// un := CreateHuman ;
17976: LD_ADDR_VAR 0 2
17980: PUSH
17981: CALL_OW 44
17985: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17986: LD_VAR 0 2
17990: PPUSH
17991: LD_INT 1
17993: PPUSH
17994: CALL_OW 51
// tmp := tmp ^ un ;
17998: LD_ADDR_VAR 0 3
18002: PUSH
18003: LD_VAR 0 3
18007: PUSH
18008: LD_VAR 0 2
18012: ADD
18013: ST_TO_ADDR
// end ;
18014: GO 17910
18016: POP
18017: POP
// repeat wait ( 0 0$1 ) ;
18018: LD_INT 35
18020: PPUSH
18021: CALL_OW 67
// for un in tmp do
18025: LD_ADDR_VAR 0 2
18029: PUSH
18030: LD_VAR 0 3
18034: PUSH
18035: FOR_IN
18036: IFFALSE 18110
// begin if IsDead ( un ) then
18038: LD_VAR 0 2
18042: PPUSH
18043: CALL_OW 301
18047: IFFALSE 18067
// begin tmp := tmp diff un ;
18049: LD_ADDR_VAR 0 3
18053: PUSH
18054: LD_VAR 0 3
18058: PUSH
18059: LD_VAR 0 2
18063: DIFF
18064: ST_TO_ADDR
// continue ;
18065: GO 18035
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18067: LD_VAR 0 2
18071: PPUSH
18072: LD_INT 3
18074: PUSH
18075: LD_INT 22
18077: PUSH
18078: LD_INT 0
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PPUSH
18089: CALL_OW 69
18093: PPUSH
18094: LD_VAR 0 2
18098: PPUSH
18099: CALL_OW 74
18103: PPUSH
18104: CALL_OW 115
// end ;
18108: GO 18035
18110: POP
18111: POP
// until not tmp ;
18112: LD_VAR 0 3
18116: NOT
18117: IFFALSE 18018
// end ;
18119: PPOPN 3
18121: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18122: LD_EXP 43
18126: PUSH
18127: LD_EXP 68
18131: AND
18132: IFFALSE 18186
18134: GO 18136
18136: DISABLE
// begin ToLua ( displayTroll(); ) ;
18137: LD_STRING displayTroll();
18139: PPUSH
18140: CALL_OW 559
// wait ( 3 3$00 ) ;
18144: LD_INT 6300
18146: PPUSH
18147: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18151: LD_STRING hideTroll();
18153: PPUSH
18154: CALL_OW 559
// wait ( 1 1$00 ) ;
18158: LD_INT 2100
18160: PPUSH
18161: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18165: LD_STRING displayTroll();
18167: PPUSH
18168: CALL_OW 559
// wait ( 1 1$00 ) ;
18172: LD_INT 2100
18174: PPUSH
18175: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18179: LD_STRING hideTroll();
18181: PPUSH
18182: CALL_OW 559
// end ;
18186: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18187: LD_EXP 43
18191: PUSH
18192: LD_EXP 69
18196: AND
18197: IFFALSE 18260
18199: GO 18201
18201: DISABLE
18202: LD_INT 0
18204: PPUSH
// begin p := 0 ;
18205: LD_ADDR_VAR 0 1
18209: PUSH
18210: LD_INT 0
18212: ST_TO_ADDR
// repeat game_speed := 1 ;
18213: LD_ADDR_OWVAR 65
18217: PUSH
18218: LD_INT 1
18220: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18221: LD_INT 35
18223: PPUSH
18224: CALL_OW 67
// p := p + 1 ;
18228: LD_ADDR_VAR 0 1
18232: PUSH
18233: LD_VAR 0 1
18237: PUSH
18238: LD_INT 1
18240: PLUS
18241: ST_TO_ADDR
// until p >= 60 ;
18242: LD_VAR 0 1
18246: PUSH
18247: LD_INT 60
18249: GREATEREQUAL
18250: IFFALSE 18213
// game_speed := 4 ;
18252: LD_ADDR_OWVAR 65
18256: PUSH
18257: LD_INT 4
18259: ST_TO_ADDR
// end ;
18260: PPOPN 1
18262: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18263: LD_EXP 43
18267: PUSH
18268: LD_EXP 70
18272: AND
18273: IFFALSE 18419
18275: GO 18277
18277: DISABLE
18278: LD_INT 0
18280: PPUSH
18281: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18282: LD_ADDR_VAR 0 1
18286: PUSH
18287: LD_INT 22
18289: PUSH
18290: LD_OWVAR 2
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 2
18301: PUSH
18302: LD_INT 30
18304: PUSH
18305: LD_INT 0
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 30
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: LIST
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PPUSH
18331: CALL_OW 69
18335: ST_TO_ADDR
// if not depot then
18336: LD_VAR 0 1
18340: NOT
18341: IFFALSE 18345
// exit ;
18343: GO 18419
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18345: LD_ADDR_VAR 0 2
18349: PUSH
18350: LD_VAR 0 1
18354: PUSH
18355: LD_INT 1
18357: PPUSH
18358: LD_VAR 0 1
18362: PPUSH
18363: CALL_OW 12
18367: ARRAY
18368: PPUSH
18369: CALL_OW 274
18373: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18374: LD_VAR 0 2
18378: PPUSH
18379: LD_INT 1
18381: PPUSH
18382: LD_INT 0
18384: PPUSH
18385: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18389: LD_VAR 0 2
18393: PPUSH
18394: LD_INT 2
18396: PPUSH
18397: LD_INT 0
18399: PPUSH
18400: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18404: LD_VAR 0 2
18408: PPUSH
18409: LD_INT 3
18411: PPUSH
18412: LD_INT 0
18414: PPUSH
18415: CALL_OW 277
// end ;
18419: PPOPN 2
18421: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18422: LD_EXP 43
18426: PUSH
18427: LD_EXP 71
18431: AND
18432: IFFALSE 18529
18434: GO 18436
18436: DISABLE
18437: LD_INT 0
18439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18440: LD_ADDR_VAR 0 1
18444: PUSH
18445: LD_INT 22
18447: PUSH
18448: LD_OWVAR 2
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 21
18459: PUSH
18460: LD_INT 1
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 3
18469: PUSH
18470: LD_INT 23
18472: PUSH
18473: LD_INT 0
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: LIST
18488: PPUSH
18489: CALL_OW 69
18493: ST_TO_ADDR
// if not tmp then
18494: LD_VAR 0 1
18498: NOT
18499: IFFALSE 18503
// exit ;
18501: GO 18529
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18503: LD_VAR 0 1
18507: PUSH
18508: LD_INT 1
18510: PPUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: CALL_OW 12
18520: ARRAY
18521: PPUSH
18522: LD_INT 200
18524: PPUSH
18525: CALL_OW 234
// end ;
18529: PPOPN 1
18531: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18532: LD_EXP 43
18536: PUSH
18537: LD_EXP 72
18541: AND
18542: IFFALSE 18621
18544: GO 18546
18546: DISABLE
18547: LD_INT 0
18549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18550: LD_ADDR_VAR 0 1
18554: PUSH
18555: LD_INT 22
18557: PUSH
18558: LD_OWVAR 2
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 21
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PPUSH
18581: CALL_OW 69
18585: ST_TO_ADDR
// if not tmp then
18586: LD_VAR 0 1
18590: NOT
18591: IFFALSE 18595
// exit ;
18593: GO 18621
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18595: LD_VAR 0 1
18599: PUSH
18600: LD_INT 1
18602: PPUSH
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 12
18612: ARRAY
18613: PPUSH
18614: LD_INT 60
18616: PPUSH
18617: CALL_OW 234
// end ;
18621: PPOPN 1
18623: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18624: LD_EXP 43
18628: PUSH
18629: LD_EXP 73
18633: AND
18634: IFFALSE 18733
18636: GO 18638
18638: DISABLE
18639: LD_INT 0
18641: PPUSH
18642: PPUSH
// begin enable ;
18643: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18644: LD_ADDR_VAR 0 1
18648: PUSH
18649: LD_INT 22
18651: PUSH
18652: LD_OWVAR 2
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 61
18663: PUSH
18664: EMPTY
18665: LIST
18666: PUSH
18667: LD_INT 33
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: PPUSH
18682: CALL_OW 69
18686: ST_TO_ADDR
// if not tmp then
18687: LD_VAR 0 1
18691: NOT
18692: IFFALSE 18696
// exit ;
18694: GO 18733
// for i in tmp do
18696: LD_ADDR_VAR 0 2
18700: PUSH
18701: LD_VAR 0 1
18705: PUSH
18706: FOR_IN
18707: IFFALSE 18731
// if IsControledBy ( i ) then
18709: LD_VAR 0 2
18713: PPUSH
18714: CALL_OW 312
18718: IFFALSE 18729
// ComUnlink ( i ) ;
18720: LD_VAR 0 2
18724: PPUSH
18725: CALL_OW 136
18729: GO 18706
18731: POP
18732: POP
// end ;
18733: PPOPN 2
18735: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18736: LD_EXP 43
18740: PUSH
18741: LD_EXP 74
18745: AND
18746: IFFALSE 18886
18748: GO 18750
18750: DISABLE
18751: LD_INT 0
18753: PPUSH
18754: PPUSH
// begin ToLua ( displayPowell(); ) ;
18755: LD_STRING displayPowell();
18757: PPUSH
18758: CALL_OW 559
// uc_side := 0 ;
18762: LD_ADDR_OWVAR 20
18766: PUSH
18767: LD_INT 0
18769: ST_TO_ADDR
// uc_nation := 2 ;
18770: LD_ADDR_OWVAR 21
18774: PUSH
18775: LD_INT 2
18777: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18778: LD_ADDR_OWVAR 37
18782: PUSH
18783: LD_INT 14
18785: ST_TO_ADDR
// vc_engine := engine_siberite ;
18786: LD_ADDR_OWVAR 39
18790: PUSH
18791: LD_INT 3
18793: ST_TO_ADDR
// vc_control := control_apeman ;
18794: LD_ADDR_OWVAR 38
18798: PUSH
18799: LD_INT 5
18801: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18802: LD_ADDR_OWVAR 40
18806: PUSH
18807: LD_INT 29
18809: ST_TO_ADDR
// un := CreateVehicle ;
18810: LD_ADDR_VAR 0 2
18814: PUSH
18815: CALL_OW 45
18819: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18820: LD_VAR 0 2
18824: PPUSH
18825: LD_INT 1
18827: PPUSH
18828: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18832: LD_INT 35
18834: PPUSH
18835: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18839: LD_VAR 0 2
18843: PPUSH
18844: LD_INT 22
18846: PUSH
18847: LD_OWVAR 2
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PPUSH
18856: CALL_OW 69
18860: PPUSH
18861: LD_VAR 0 2
18865: PPUSH
18866: CALL_OW 74
18870: PPUSH
18871: CALL_OW 115
// until IsDead ( un ) ;
18875: LD_VAR 0 2
18879: PPUSH
18880: CALL_OW 301
18884: IFFALSE 18832
// end ;
18886: PPOPN 2
18888: END
// every 0 0$1 trigger StreamModeActive and sStu do
18889: LD_EXP 43
18893: PUSH
18894: LD_EXP 82
18898: AND
18899: IFFALSE 18915
18901: GO 18903
18903: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18904: LD_STRING displayStucuk();
18906: PPUSH
18907: CALL_OW 559
// ResetFog ;
18911: CALL_OW 335
// end ;
18915: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18916: LD_EXP 43
18920: PUSH
18921: LD_EXP 75
18925: AND
18926: IFFALSE 19067
18928: GO 18930
18930: DISABLE
18931: LD_INT 0
18933: PPUSH
18934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18935: LD_ADDR_VAR 0 2
18939: PUSH
18940: LD_INT 22
18942: PUSH
18943: LD_OWVAR 2
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 21
18954: PUSH
18955: LD_INT 1
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PPUSH
18966: CALL_OW 69
18970: ST_TO_ADDR
// if not tmp then
18971: LD_VAR 0 2
18975: NOT
18976: IFFALSE 18980
// exit ;
18978: GO 19067
// un := tmp [ rand ( 1 , tmp ) ] ;
18980: LD_ADDR_VAR 0 1
18984: PUSH
18985: LD_VAR 0 2
18989: PUSH
18990: LD_INT 1
18992: PPUSH
18993: LD_VAR 0 2
18997: PPUSH
18998: CALL_OW 12
19002: ARRAY
19003: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19004: LD_VAR 0 1
19008: PPUSH
19009: LD_INT 0
19011: PPUSH
19012: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19016: LD_VAR 0 1
19020: PPUSH
19021: LD_OWVAR 3
19025: PUSH
19026: LD_VAR 0 1
19030: DIFF
19031: PPUSH
19032: LD_VAR 0 1
19036: PPUSH
19037: CALL_OW 74
19041: PPUSH
19042: CALL_OW 115
// wait ( 0 0$20 ) ;
19046: LD_INT 700
19048: PPUSH
19049: CALL_OW 67
// SetSide ( un , your_side ) ;
19053: LD_VAR 0 1
19057: PPUSH
19058: LD_OWVAR 2
19062: PPUSH
19063: CALL_OW 235
// end ;
19067: PPOPN 2
19069: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19070: LD_EXP 43
19074: PUSH
19075: LD_EXP 76
19079: AND
19080: IFFALSE 19186
19082: GO 19084
19084: DISABLE
19085: LD_INT 0
19087: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19088: LD_ADDR_VAR 0 1
19092: PUSH
19093: LD_INT 22
19095: PUSH
19096: LD_OWVAR 2
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 2
19107: PUSH
19108: LD_INT 30
19110: PUSH
19111: LD_INT 0
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 30
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: LIST
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PPUSH
19137: CALL_OW 69
19141: ST_TO_ADDR
// if not depot then
19142: LD_VAR 0 1
19146: NOT
19147: IFFALSE 19151
// exit ;
19149: GO 19186
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19151: LD_VAR 0 1
19155: PUSH
19156: LD_INT 1
19158: ARRAY
19159: PPUSH
19160: CALL_OW 250
19164: PPUSH
19165: LD_VAR 0 1
19169: PUSH
19170: LD_INT 1
19172: ARRAY
19173: PPUSH
19174: CALL_OW 251
19178: PPUSH
19179: LD_INT 70
19181: PPUSH
19182: CALL_OW 495
// end ;
19186: PPOPN 1
19188: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19189: LD_EXP 43
19193: PUSH
19194: LD_EXP 77
19198: AND
19199: IFFALSE 19410
19201: GO 19203
19203: DISABLE
19204: LD_INT 0
19206: PPUSH
19207: PPUSH
19208: PPUSH
19209: PPUSH
19210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19211: LD_ADDR_VAR 0 5
19215: PUSH
19216: LD_INT 22
19218: PUSH
19219: LD_OWVAR 2
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 21
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PPUSH
19242: CALL_OW 69
19246: ST_TO_ADDR
// if not tmp then
19247: LD_VAR 0 5
19251: NOT
19252: IFFALSE 19256
// exit ;
19254: GO 19410
// for i in tmp do
19256: LD_ADDR_VAR 0 1
19260: PUSH
19261: LD_VAR 0 5
19265: PUSH
19266: FOR_IN
19267: IFFALSE 19408
// begin d := rand ( 0 , 5 ) ;
19269: LD_ADDR_VAR 0 4
19273: PUSH
19274: LD_INT 0
19276: PPUSH
19277: LD_INT 5
19279: PPUSH
19280: CALL_OW 12
19284: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19285: LD_ADDR_VAR 0 2
19289: PUSH
19290: LD_VAR 0 1
19294: PPUSH
19295: CALL_OW 250
19299: PPUSH
19300: LD_VAR 0 4
19304: PPUSH
19305: LD_INT 3
19307: PPUSH
19308: LD_INT 12
19310: PPUSH
19311: CALL_OW 12
19315: PPUSH
19316: CALL_OW 272
19320: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19321: LD_ADDR_VAR 0 3
19325: PUSH
19326: LD_VAR 0 1
19330: PPUSH
19331: CALL_OW 251
19335: PPUSH
19336: LD_VAR 0 4
19340: PPUSH
19341: LD_INT 3
19343: PPUSH
19344: LD_INT 12
19346: PPUSH
19347: CALL_OW 12
19351: PPUSH
19352: CALL_OW 273
19356: ST_TO_ADDR
// if ValidHex ( x , y ) then
19357: LD_VAR 0 2
19361: PPUSH
19362: LD_VAR 0 3
19366: PPUSH
19367: CALL_OW 488
19371: IFFALSE 19406
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19373: LD_VAR 0 1
19377: PPUSH
19378: LD_VAR 0 2
19382: PPUSH
19383: LD_VAR 0 3
19387: PPUSH
19388: LD_INT 3
19390: PPUSH
19391: LD_INT 6
19393: PPUSH
19394: CALL_OW 12
19398: PPUSH
19399: LD_INT 1
19401: PPUSH
19402: CALL_OW 483
// end ;
19406: GO 19266
19408: POP
19409: POP
// end ;
19410: PPOPN 5
19412: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19413: LD_EXP 43
19417: PUSH
19418: LD_EXP 78
19422: AND
19423: IFFALSE 19517
19425: GO 19427
19427: DISABLE
19428: LD_INT 0
19430: PPUSH
19431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19432: LD_ADDR_VAR 0 2
19436: PUSH
19437: LD_INT 22
19439: PUSH
19440: LD_OWVAR 2
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 32
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 21
19461: PUSH
19462: LD_INT 2
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: LIST
19473: PPUSH
19474: CALL_OW 69
19478: ST_TO_ADDR
// if not tmp then
19479: LD_VAR 0 2
19483: NOT
19484: IFFALSE 19488
// exit ;
19486: GO 19517
// for i in tmp do
19488: LD_ADDR_VAR 0 1
19492: PUSH
19493: LD_VAR 0 2
19497: PUSH
19498: FOR_IN
19499: IFFALSE 19515
// SetFuel ( i , 0 ) ;
19501: LD_VAR 0 1
19505: PPUSH
19506: LD_INT 0
19508: PPUSH
19509: CALL_OW 240
19513: GO 19498
19515: POP
19516: POP
// end ;
19517: PPOPN 2
19519: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19520: LD_EXP 43
19524: PUSH
19525: LD_EXP 79
19529: AND
19530: IFFALSE 19596
19532: GO 19534
19534: DISABLE
19535: LD_INT 0
19537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19538: LD_ADDR_VAR 0 1
19542: PUSH
19543: LD_INT 22
19545: PUSH
19546: LD_OWVAR 2
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 30
19557: PUSH
19558: LD_INT 29
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PPUSH
19569: CALL_OW 69
19573: ST_TO_ADDR
// if not tmp then
19574: LD_VAR 0 1
19578: NOT
19579: IFFALSE 19583
// exit ;
19581: GO 19596
// DestroyUnit ( tmp [ 1 ] ) ;
19583: LD_VAR 0 1
19587: PUSH
19588: LD_INT 1
19590: ARRAY
19591: PPUSH
19592: CALL_OW 65
// end ;
19596: PPOPN 1
19598: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19599: LD_EXP 43
19603: PUSH
19604: LD_EXP 81
19608: AND
19609: IFFALSE 19738
19611: GO 19613
19613: DISABLE
19614: LD_INT 0
19616: PPUSH
// begin uc_side := 0 ;
19617: LD_ADDR_OWVAR 20
19621: PUSH
19622: LD_INT 0
19624: ST_TO_ADDR
// uc_nation := nation_arabian ;
19625: LD_ADDR_OWVAR 21
19629: PUSH
19630: LD_INT 2
19632: ST_TO_ADDR
// hc_gallery :=  ;
19633: LD_ADDR_OWVAR 33
19637: PUSH
19638: LD_STRING 
19640: ST_TO_ADDR
// hc_name :=  ;
19641: LD_ADDR_OWVAR 26
19645: PUSH
19646: LD_STRING 
19648: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19649: LD_INT 1
19651: PPUSH
19652: LD_INT 11
19654: PPUSH
19655: LD_INT 10
19657: PPUSH
19658: CALL_OW 380
// un := CreateHuman ;
19662: LD_ADDR_VAR 0 1
19666: PUSH
19667: CALL_OW 44
19671: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19672: LD_VAR 0 1
19676: PPUSH
19677: LD_INT 1
19679: PPUSH
19680: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19684: LD_INT 35
19686: PPUSH
19687: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19691: LD_VAR 0 1
19695: PPUSH
19696: LD_INT 22
19698: PUSH
19699: LD_OWVAR 2
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PPUSH
19708: CALL_OW 69
19712: PPUSH
19713: LD_VAR 0 1
19717: PPUSH
19718: CALL_OW 74
19722: PPUSH
19723: CALL_OW 115
// until IsDead ( un ) ;
19727: LD_VAR 0 1
19731: PPUSH
19732: CALL_OW 301
19736: IFFALSE 19684
// end ;
19738: PPOPN 1
19740: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19741: LD_EXP 43
19745: PUSH
19746: LD_EXP 83
19750: AND
19751: IFFALSE 19763
19753: GO 19755
19755: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19756: LD_STRING earthquake(getX(game), 0, 32)
19758: PPUSH
19759: CALL_OW 559
19763: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19764: LD_EXP 43
19768: PUSH
19769: LD_EXP 84
19773: AND
19774: IFFALSE 19865
19776: GO 19778
19778: DISABLE
19779: LD_INT 0
19781: PPUSH
// begin enable ;
19782: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19783: LD_ADDR_VAR 0 1
19787: PUSH
19788: LD_INT 22
19790: PUSH
19791: LD_OWVAR 2
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 21
19802: PUSH
19803: LD_INT 2
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 33
19812: PUSH
19813: LD_INT 3
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: PPUSH
19825: CALL_OW 69
19829: ST_TO_ADDR
// if not tmp then
19830: LD_VAR 0 1
19834: NOT
19835: IFFALSE 19839
// exit ;
19837: GO 19865
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19839: LD_VAR 0 1
19843: PUSH
19844: LD_INT 1
19846: PPUSH
19847: LD_VAR 0 1
19851: PPUSH
19852: CALL_OW 12
19856: ARRAY
19857: PPUSH
19858: LD_INT 1
19860: PPUSH
19861: CALL_OW 234
// end ;
19865: PPOPN 1
19867: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19868: LD_EXP 43
19872: PUSH
19873: LD_EXP 85
19877: AND
19878: IFFALSE 20019
19880: GO 19882
19882: DISABLE
19883: LD_INT 0
19885: PPUSH
19886: PPUSH
19887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19888: LD_ADDR_VAR 0 3
19892: PUSH
19893: LD_INT 22
19895: PUSH
19896: LD_OWVAR 2
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 25
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PPUSH
19919: CALL_OW 69
19923: ST_TO_ADDR
// if not tmp then
19924: LD_VAR 0 3
19928: NOT
19929: IFFALSE 19933
// exit ;
19931: GO 20019
// un := tmp [ rand ( 1 , tmp ) ] ;
19933: LD_ADDR_VAR 0 2
19937: PUSH
19938: LD_VAR 0 3
19942: PUSH
19943: LD_INT 1
19945: PPUSH
19946: LD_VAR 0 3
19950: PPUSH
19951: CALL_OW 12
19955: ARRAY
19956: ST_TO_ADDR
// if Crawls ( un ) then
19957: LD_VAR 0 2
19961: PPUSH
19962: CALL_OW 318
19966: IFFALSE 19977
// ComWalk ( un ) ;
19968: LD_VAR 0 2
19972: PPUSH
19973: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19977: LD_VAR 0 2
19981: PPUSH
19982: LD_INT 9
19984: PPUSH
19985: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19989: LD_INT 28
19991: PPUSH
19992: LD_OWVAR 2
19996: PPUSH
19997: LD_INT 2
19999: PPUSH
20000: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20004: LD_INT 29
20006: PPUSH
20007: LD_OWVAR 2
20011: PPUSH
20012: LD_INT 2
20014: PPUSH
20015: CALL_OW 322
// end ;
20019: PPOPN 3
20021: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20022: LD_EXP 43
20026: PUSH
20027: LD_EXP 86
20031: AND
20032: IFFALSE 20143
20034: GO 20036
20036: DISABLE
20037: LD_INT 0
20039: PPUSH
20040: PPUSH
20041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20042: LD_ADDR_VAR 0 3
20046: PUSH
20047: LD_INT 22
20049: PUSH
20050: LD_OWVAR 2
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 25
20061: PUSH
20062: LD_INT 1
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PPUSH
20073: CALL_OW 69
20077: ST_TO_ADDR
// if not tmp then
20078: LD_VAR 0 3
20082: NOT
20083: IFFALSE 20087
// exit ;
20085: GO 20143
// un := tmp [ rand ( 1 , tmp ) ] ;
20087: LD_ADDR_VAR 0 2
20091: PUSH
20092: LD_VAR 0 3
20096: PUSH
20097: LD_INT 1
20099: PPUSH
20100: LD_VAR 0 3
20104: PPUSH
20105: CALL_OW 12
20109: ARRAY
20110: ST_TO_ADDR
// if Crawls ( un ) then
20111: LD_VAR 0 2
20115: PPUSH
20116: CALL_OW 318
20120: IFFALSE 20131
// ComWalk ( un ) ;
20122: LD_VAR 0 2
20126: PPUSH
20127: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20131: LD_VAR 0 2
20135: PPUSH
20136: LD_INT 8
20138: PPUSH
20139: CALL_OW 336
// end ;
20143: PPOPN 3
20145: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20146: LD_EXP 43
20150: PUSH
20151: LD_EXP 87
20155: AND
20156: IFFALSE 20300
20158: GO 20160
20160: DISABLE
20161: LD_INT 0
20163: PPUSH
20164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20165: LD_ADDR_VAR 0 2
20169: PUSH
20170: LD_INT 22
20172: PUSH
20173: LD_OWVAR 2
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 21
20184: PUSH
20185: LD_INT 2
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 2
20194: PUSH
20195: LD_INT 34
20197: PUSH
20198: LD_INT 12
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 34
20207: PUSH
20208: LD_INT 51
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 34
20217: PUSH
20218: LD_INT 32
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: LIST
20235: PPUSH
20236: CALL_OW 69
20240: ST_TO_ADDR
// if not tmp then
20241: LD_VAR 0 2
20245: NOT
20246: IFFALSE 20250
// exit ;
20248: GO 20300
// for i in tmp do
20250: LD_ADDR_VAR 0 1
20254: PUSH
20255: LD_VAR 0 2
20259: PUSH
20260: FOR_IN
20261: IFFALSE 20298
// if GetCargo ( i , mat_artifact ) = 0 then
20263: LD_VAR 0 1
20267: PPUSH
20268: LD_INT 4
20270: PPUSH
20271: CALL_OW 289
20275: PUSH
20276: LD_INT 0
20278: EQUAL
20279: IFFALSE 20296
// SetCargo ( i , mat_siberit , 100 ) ;
20281: LD_VAR 0 1
20285: PPUSH
20286: LD_INT 3
20288: PPUSH
20289: LD_INT 100
20291: PPUSH
20292: CALL_OW 290
20296: GO 20260
20298: POP
20299: POP
// end ;
20300: PPOPN 2
20302: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20303: LD_EXP 43
20307: PUSH
20308: LD_EXP 88
20312: AND
20313: IFFALSE 20496
20315: GO 20317
20317: DISABLE
20318: LD_INT 0
20320: PPUSH
20321: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20322: LD_ADDR_VAR 0 2
20326: PUSH
20327: LD_INT 22
20329: PUSH
20330: LD_OWVAR 2
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PPUSH
20339: CALL_OW 69
20343: ST_TO_ADDR
// if not tmp then
20344: LD_VAR 0 2
20348: NOT
20349: IFFALSE 20353
// exit ;
20351: GO 20496
// for i := 1 to 2 do
20353: LD_ADDR_VAR 0 1
20357: PUSH
20358: DOUBLE
20359: LD_INT 1
20361: DEC
20362: ST_TO_ADDR
20363: LD_INT 2
20365: PUSH
20366: FOR_TO
20367: IFFALSE 20494
// begin uc_side := your_side ;
20369: LD_ADDR_OWVAR 20
20373: PUSH
20374: LD_OWVAR 2
20378: ST_TO_ADDR
// uc_nation := nation_american ;
20379: LD_ADDR_OWVAR 21
20383: PUSH
20384: LD_INT 1
20386: ST_TO_ADDR
// vc_chassis := us_morphling ;
20387: LD_ADDR_OWVAR 37
20391: PUSH
20392: LD_INT 5
20394: ST_TO_ADDR
// vc_engine := engine_siberite ;
20395: LD_ADDR_OWVAR 39
20399: PUSH
20400: LD_INT 3
20402: ST_TO_ADDR
// vc_control := control_computer ;
20403: LD_ADDR_OWVAR 38
20407: PUSH
20408: LD_INT 3
20410: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20411: LD_ADDR_OWVAR 40
20415: PUSH
20416: LD_INT 10
20418: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20419: LD_VAR 0 2
20423: PUSH
20424: LD_INT 1
20426: ARRAY
20427: PPUSH
20428: CALL_OW 310
20432: NOT
20433: IFFALSE 20480
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20435: CALL_OW 45
20439: PPUSH
20440: LD_VAR 0 2
20444: PUSH
20445: LD_INT 1
20447: ARRAY
20448: PPUSH
20449: CALL_OW 250
20453: PPUSH
20454: LD_VAR 0 2
20458: PUSH
20459: LD_INT 1
20461: ARRAY
20462: PPUSH
20463: CALL_OW 251
20467: PPUSH
20468: LD_INT 12
20470: PPUSH
20471: LD_INT 1
20473: PPUSH
20474: CALL_OW 50
20478: GO 20492
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20480: CALL_OW 45
20484: PPUSH
20485: LD_INT 1
20487: PPUSH
20488: CALL_OW 51
// end ;
20492: GO 20366
20494: POP
20495: POP
// end ;
20496: PPOPN 2
20498: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20499: LD_EXP 43
20503: PUSH
20504: LD_EXP 89
20508: AND
20509: IFFALSE 20731
20511: GO 20513
20513: DISABLE
20514: LD_INT 0
20516: PPUSH
20517: PPUSH
20518: PPUSH
20519: PPUSH
20520: PPUSH
20521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20522: LD_ADDR_VAR 0 6
20526: PUSH
20527: LD_INT 22
20529: PUSH
20530: LD_OWVAR 2
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 21
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 3
20551: PUSH
20552: LD_INT 23
20554: PUSH
20555: LD_INT 0
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: LIST
20570: PPUSH
20571: CALL_OW 69
20575: ST_TO_ADDR
// if not tmp then
20576: LD_VAR 0 6
20580: NOT
20581: IFFALSE 20585
// exit ;
20583: GO 20731
// s1 := rand ( 1 , 4 ) ;
20585: LD_ADDR_VAR 0 2
20589: PUSH
20590: LD_INT 1
20592: PPUSH
20593: LD_INT 4
20595: PPUSH
20596: CALL_OW 12
20600: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20601: LD_ADDR_VAR 0 4
20605: PUSH
20606: LD_VAR 0 6
20610: PUSH
20611: LD_INT 1
20613: ARRAY
20614: PPUSH
20615: LD_VAR 0 2
20619: PPUSH
20620: CALL_OW 259
20624: ST_TO_ADDR
// if s1 = 1 then
20625: LD_VAR 0 2
20629: PUSH
20630: LD_INT 1
20632: EQUAL
20633: IFFALSE 20653
// s2 := rand ( 2 , 4 ) else
20635: LD_ADDR_VAR 0 3
20639: PUSH
20640: LD_INT 2
20642: PPUSH
20643: LD_INT 4
20645: PPUSH
20646: CALL_OW 12
20650: ST_TO_ADDR
20651: GO 20661
// s2 := 1 ;
20653: LD_ADDR_VAR 0 3
20657: PUSH
20658: LD_INT 1
20660: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20661: LD_ADDR_VAR 0 5
20665: PUSH
20666: LD_VAR 0 6
20670: PUSH
20671: LD_INT 1
20673: ARRAY
20674: PPUSH
20675: LD_VAR 0 3
20679: PPUSH
20680: CALL_OW 259
20684: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20685: LD_VAR 0 6
20689: PUSH
20690: LD_INT 1
20692: ARRAY
20693: PPUSH
20694: LD_VAR 0 2
20698: PPUSH
20699: LD_VAR 0 5
20703: PPUSH
20704: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20708: LD_VAR 0 6
20712: PUSH
20713: LD_INT 1
20715: ARRAY
20716: PPUSH
20717: LD_VAR 0 3
20721: PPUSH
20722: LD_VAR 0 4
20726: PPUSH
20727: CALL_OW 237
// end ;
20731: PPOPN 6
20733: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20734: LD_EXP 43
20738: PUSH
20739: LD_EXP 90
20743: AND
20744: IFFALSE 20823
20746: GO 20748
20748: DISABLE
20749: LD_INT 0
20751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20752: LD_ADDR_VAR 0 1
20756: PUSH
20757: LD_INT 22
20759: PUSH
20760: LD_OWVAR 2
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 30
20771: PUSH
20772: LD_INT 3
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PPUSH
20783: CALL_OW 69
20787: ST_TO_ADDR
// if not tmp then
20788: LD_VAR 0 1
20792: NOT
20793: IFFALSE 20797
// exit ;
20795: GO 20823
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20797: LD_VAR 0 1
20801: PUSH
20802: LD_INT 1
20804: PPUSH
20805: LD_VAR 0 1
20809: PPUSH
20810: CALL_OW 12
20814: ARRAY
20815: PPUSH
20816: LD_INT 1
20818: PPUSH
20819: CALL_OW 234
// end ;
20823: PPOPN 1
20825: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20826: LD_EXP 43
20830: PUSH
20831: LD_EXP 91
20835: AND
20836: IFFALSE 20948
20838: GO 20840
20840: DISABLE
20841: LD_INT 0
20843: PPUSH
20844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20845: LD_ADDR_VAR 0 2
20849: PUSH
20850: LD_INT 22
20852: PUSH
20853: LD_OWVAR 2
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 2
20864: PUSH
20865: LD_INT 30
20867: PUSH
20868: LD_INT 27
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 30
20877: PUSH
20878: LD_INT 26
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 30
20887: PUSH
20888: LD_INT 28
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PPUSH
20905: CALL_OW 69
20909: ST_TO_ADDR
// if not tmp then
20910: LD_VAR 0 2
20914: NOT
20915: IFFALSE 20919
// exit ;
20917: GO 20948
// for i in tmp do
20919: LD_ADDR_VAR 0 1
20923: PUSH
20924: LD_VAR 0 2
20928: PUSH
20929: FOR_IN
20930: IFFALSE 20946
// SetLives ( i , 1 ) ;
20932: LD_VAR 0 1
20936: PPUSH
20937: LD_INT 1
20939: PPUSH
20940: CALL_OW 234
20944: GO 20929
20946: POP
20947: POP
// end ;
20948: PPOPN 2
20950: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20951: LD_EXP 43
20955: PUSH
20956: LD_EXP 92
20960: AND
20961: IFFALSE 21248
20963: GO 20965
20965: DISABLE
20966: LD_INT 0
20968: PPUSH
20969: PPUSH
20970: PPUSH
// begin i := rand ( 1 , 7 ) ;
20971: LD_ADDR_VAR 0 1
20975: PUSH
20976: LD_INT 1
20978: PPUSH
20979: LD_INT 7
20981: PPUSH
20982: CALL_OW 12
20986: ST_TO_ADDR
// case i of 1 :
20987: LD_VAR 0 1
20991: PUSH
20992: LD_INT 1
20994: DOUBLE
20995: EQUAL
20996: IFTRUE 21000
20998: GO 21010
21000: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21001: LD_STRING earthquake(getX(game), 0, 32)
21003: PPUSH
21004: CALL_OW 559
21008: GO 21248
21010: LD_INT 2
21012: DOUBLE
21013: EQUAL
21014: IFTRUE 21018
21016: GO 21032
21018: POP
// begin ToLua ( displayStucuk(); ) ;
21019: LD_STRING displayStucuk();
21021: PPUSH
21022: CALL_OW 559
// ResetFog ;
21026: CALL_OW 335
// end ; 3 :
21030: GO 21248
21032: LD_INT 3
21034: DOUBLE
21035: EQUAL
21036: IFTRUE 21040
21038: GO 21144
21040: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21041: LD_ADDR_VAR 0 2
21045: PUSH
21046: LD_INT 22
21048: PUSH
21049: LD_OWVAR 2
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 25
21060: PUSH
21061: LD_INT 1
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PPUSH
21072: CALL_OW 69
21076: ST_TO_ADDR
// if not tmp then
21077: LD_VAR 0 2
21081: NOT
21082: IFFALSE 21086
// exit ;
21084: GO 21248
// un := tmp [ rand ( 1 , tmp ) ] ;
21086: LD_ADDR_VAR 0 3
21090: PUSH
21091: LD_VAR 0 2
21095: PUSH
21096: LD_INT 1
21098: PPUSH
21099: LD_VAR 0 2
21103: PPUSH
21104: CALL_OW 12
21108: ARRAY
21109: ST_TO_ADDR
// if Crawls ( un ) then
21110: LD_VAR 0 3
21114: PPUSH
21115: CALL_OW 318
21119: IFFALSE 21130
// ComWalk ( un ) ;
21121: LD_VAR 0 3
21125: PPUSH
21126: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21130: LD_VAR 0 3
21134: PPUSH
21135: LD_INT 8
21137: PPUSH
21138: CALL_OW 336
// end ; 4 :
21142: GO 21248
21144: LD_INT 4
21146: DOUBLE
21147: EQUAL
21148: IFTRUE 21152
21150: GO 21226
21152: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21153: LD_ADDR_VAR 0 2
21157: PUSH
21158: LD_INT 22
21160: PUSH
21161: LD_OWVAR 2
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 30
21172: PUSH
21173: LD_INT 29
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PPUSH
21184: CALL_OW 69
21188: ST_TO_ADDR
// if not tmp then
21189: LD_VAR 0 2
21193: NOT
21194: IFFALSE 21198
// exit ;
21196: GO 21248
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21198: LD_VAR 0 2
21202: PUSH
21203: LD_INT 1
21205: ARRAY
21206: PPUSH
21207: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21211: LD_VAR 0 2
21215: PUSH
21216: LD_INT 1
21218: ARRAY
21219: PPUSH
21220: CALL_OW 65
// end ; 5 .. 7 :
21224: GO 21248
21226: LD_INT 5
21228: DOUBLE
21229: GREATEREQUAL
21230: IFFALSE 21238
21232: LD_INT 7
21234: DOUBLE
21235: LESSEQUAL
21236: IFTRUE 21240
21238: GO 21247
21240: POP
// StreamSibBomb ; end ;
21241: CALL 17485 0 0
21245: GO 21248
21247: POP
// end ;
21248: PPOPN 3
21250: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21251: LD_EXP 43
21255: PUSH
21256: LD_EXP 93
21260: AND
21261: IFFALSE 21417
21263: GO 21265
21265: DISABLE
21266: LD_INT 0
21268: PPUSH
21269: PPUSH
21270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21271: LD_ADDR_VAR 0 2
21275: PUSH
21276: LD_INT 81
21278: PUSH
21279: LD_OWVAR 2
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 2
21290: PUSH
21291: LD_INT 21
21293: PUSH
21294: LD_INT 1
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 21
21303: PUSH
21304: LD_INT 2
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: LIST
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PPUSH
21320: CALL_OW 69
21324: ST_TO_ADDR
// if not tmp then
21325: LD_VAR 0 2
21329: NOT
21330: IFFALSE 21334
// exit ;
21332: GO 21417
// p := 0 ;
21334: LD_ADDR_VAR 0 3
21338: PUSH
21339: LD_INT 0
21341: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21342: LD_INT 35
21344: PPUSH
21345: CALL_OW 67
// p := p + 1 ;
21349: LD_ADDR_VAR 0 3
21353: PUSH
21354: LD_VAR 0 3
21358: PUSH
21359: LD_INT 1
21361: PLUS
21362: ST_TO_ADDR
// for i in tmp do
21363: LD_ADDR_VAR 0 1
21367: PUSH
21368: LD_VAR 0 2
21372: PUSH
21373: FOR_IN
21374: IFFALSE 21405
// if GetLives ( i ) < 1000 then
21376: LD_VAR 0 1
21380: PPUSH
21381: CALL_OW 256
21385: PUSH
21386: LD_INT 1000
21388: LESS
21389: IFFALSE 21403
// SetLives ( i , 1000 ) ;
21391: LD_VAR 0 1
21395: PPUSH
21396: LD_INT 1000
21398: PPUSH
21399: CALL_OW 234
21403: GO 21373
21405: POP
21406: POP
// until p > 20 ;
21407: LD_VAR 0 3
21411: PUSH
21412: LD_INT 20
21414: GREATER
21415: IFFALSE 21342
// end ;
21417: PPOPN 3
21419: END
// every 0 0$1 trigger StreamModeActive and sTime do
21420: LD_EXP 43
21424: PUSH
21425: LD_EXP 94
21429: AND
21430: IFFALSE 21465
21432: GO 21434
21434: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21435: LD_INT 28
21437: PPUSH
21438: LD_OWVAR 2
21442: PPUSH
21443: LD_INT 2
21445: PPUSH
21446: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21450: LD_INT 30
21452: PPUSH
21453: LD_OWVAR 2
21457: PPUSH
21458: LD_INT 2
21460: PPUSH
21461: CALL_OW 322
// end ;
21465: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21466: LD_EXP 43
21470: PUSH
21471: LD_EXP 95
21475: AND
21476: IFFALSE 21597
21478: GO 21480
21480: DISABLE
21481: LD_INT 0
21483: PPUSH
21484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21485: LD_ADDR_VAR 0 2
21489: PUSH
21490: LD_INT 22
21492: PUSH
21493: LD_OWVAR 2
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 21
21504: PUSH
21505: LD_INT 1
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 3
21514: PUSH
21515: LD_INT 23
21517: PUSH
21518: LD_INT 0
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: LIST
21533: PPUSH
21534: CALL_OW 69
21538: ST_TO_ADDR
// if not tmp then
21539: LD_VAR 0 2
21543: NOT
21544: IFFALSE 21548
// exit ;
21546: GO 21597
// for i in tmp do
21548: LD_ADDR_VAR 0 1
21552: PUSH
21553: LD_VAR 0 2
21557: PUSH
21558: FOR_IN
21559: IFFALSE 21595
// begin if Crawls ( i ) then
21561: LD_VAR 0 1
21565: PPUSH
21566: CALL_OW 318
21570: IFFALSE 21581
// ComWalk ( i ) ;
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL_OW 138
// SetClass ( i , 2 ) ;
21581: LD_VAR 0 1
21585: PPUSH
21586: LD_INT 2
21588: PPUSH
21589: CALL_OW 336
// end ;
21593: GO 21558
21595: POP
21596: POP
// end ;
21597: PPOPN 2
21599: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21600: LD_EXP 43
21604: PUSH
21605: LD_EXP 96
21609: AND
21610: IFFALSE 21898
21612: GO 21614
21614: DISABLE
21615: LD_INT 0
21617: PPUSH
21618: PPUSH
21619: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21620: LD_OWVAR 2
21624: PPUSH
21625: LD_INT 9
21627: PPUSH
21628: LD_INT 1
21630: PPUSH
21631: LD_INT 1
21633: PPUSH
21634: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21638: LD_INT 9
21640: PPUSH
21641: LD_OWVAR 2
21645: PPUSH
21646: CALL_OW 343
// uc_side := 9 ;
21650: LD_ADDR_OWVAR 20
21654: PUSH
21655: LD_INT 9
21657: ST_TO_ADDR
// uc_nation := 2 ;
21658: LD_ADDR_OWVAR 21
21662: PUSH
21663: LD_INT 2
21665: ST_TO_ADDR
// hc_name := Dark Warrior ;
21666: LD_ADDR_OWVAR 26
21670: PUSH
21671: LD_STRING Dark Warrior
21673: ST_TO_ADDR
// hc_gallery :=  ;
21674: LD_ADDR_OWVAR 33
21678: PUSH
21679: LD_STRING 
21681: ST_TO_ADDR
// hc_noskilllimit := true ;
21682: LD_ADDR_OWVAR 76
21686: PUSH
21687: LD_INT 1
21689: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21690: LD_ADDR_OWVAR 31
21694: PUSH
21695: LD_INT 30
21697: PUSH
21698: LD_INT 30
21700: PUSH
21701: LD_INT 30
21703: PUSH
21704: LD_INT 30
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: ST_TO_ADDR
// un := CreateHuman ;
21713: LD_ADDR_VAR 0 3
21717: PUSH
21718: CALL_OW 44
21722: ST_TO_ADDR
// hc_noskilllimit := false ;
21723: LD_ADDR_OWVAR 76
21727: PUSH
21728: LD_INT 0
21730: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21731: LD_VAR 0 3
21735: PPUSH
21736: LD_INT 1
21738: PPUSH
21739: CALL_OW 51
// ToLua ( playRanger() ) ;
21743: LD_STRING playRanger()
21745: PPUSH
21746: CALL_OW 559
// p := 0 ;
21750: LD_ADDR_VAR 0 2
21754: PUSH
21755: LD_INT 0
21757: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21758: LD_INT 35
21760: PPUSH
21761: CALL_OW 67
// p := p + 1 ;
21765: LD_ADDR_VAR 0 2
21769: PUSH
21770: LD_VAR 0 2
21774: PUSH
21775: LD_INT 1
21777: PLUS
21778: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21779: LD_VAR 0 3
21783: PPUSH
21784: CALL_OW 256
21788: PUSH
21789: LD_INT 1000
21791: LESS
21792: IFFALSE 21806
// SetLives ( un , 1000 ) ;
21794: LD_VAR 0 3
21798: PPUSH
21799: LD_INT 1000
21801: PPUSH
21802: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21806: LD_VAR 0 3
21810: PPUSH
21811: LD_INT 81
21813: PUSH
21814: LD_OWVAR 2
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 91
21825: PUSH
21826: LD_VAR 0 3
21830: PUSH
21831: LD_INT 30
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: LIST
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PPUSH
21843: CALL_OW 69
21847: PPUSH
21848: LD_VAR 0 3
21852: PPUSH
21853: CALL_OW 74
21857: PPUSH
21858: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21862: LD_VAR 0 2
21866: PUSH
21867: LD_INT 80
21869: GREATER
21870: PUSH
21871: LD_VAR 0 3
21875: PPUSH
21876: CALL_OW 301
21880: OR
21881: IFFALSE 21758
// if un then
21883: LD_VAR 0 3
21887: IFFALSE 21898
// RemoveUnit ( un ) ;
21889: LD_VAR 0 3
21893: PPUSH
21894: CALL_OW 64
// end ;
21898: PPOPN 3
21900: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21901: LD_EXP 97
21905: IFFALSE 22021
21907: GO 21909
21909: DISABLE
21910: LD_INT 0
21912: PPUSH
21913: PPUSH
21914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21915: LD_ADDR_VAR 0 2
21919: PUSH
21920: LD_INT 81
21922: PUSH
21923: LD_OWVAR 2
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 21
21934: PUSH
21935: LD_INT 1
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PPUSH
21946: CALL_OW 69
21950: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21951: LD_STRING playComputer()
21953: PPUSH
21954: CALL_OW 559
// if not tmp then
21958: LD_VAR 0 2
21962: NOT
21963: IFFALSE 21967
// exit ;
21965: GO 22021
// for i in tmp do
21967: LD_ADDR_VAR 0 1
21971: PUSH
21972: LD_VAR 0 2
21976: PUSH
21977: FOR_IN
21978: IFFALSE 22019
// for j := 1 to 4 do
21980: LD_ADDR_VAR 0 3
21984: PUSH
21985: DOUBLE
21986: LD_INT 1
21988: DEC
21989: ST_TO_ADDR
21990: LD_INT 4
21992: PUSH
21993: FOR_TO
21994: IFFALSE 22015
// SetSkill ( i , j , 10 ) ;
21996: LD_VAR 0 1
22000: PPUSH
22001: LD_VAR 0 3
22005: PPUSH
22006: LD_INT 10
22008: PPUSH
22009: CALL_OW 237
22013: GO 21993
22015: POP
22016: POP
22017: GO 21977
22019: POP
22020: POP
// end ;
22021: PPOPN 3
22023: END
// every 0 0$1 trigger s30 do var i , tmp ;
22024: LD_EXP 98
22028: IFFALSE 22097
22030: GO 22032
22032: DISABLE
22033: LD_INT 0
22035: PPUSH
22036: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22037: LD_ADDR_VAR 0 2
22041: PUSH
22042: LD_INT 22
22044: PUSH
22045: LD_OWVAR 2
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PPUSH
22054: CALL_OW 69
22058: ST_TO_ADDR
// if not tmp then
22059: LD_VAR 0 2
22063: NOT
22064: IFFALSE 22068
// exit ;
22066: GO 22097
// for i in tmp do
22068: LD_ADDR_VAR 0 1
22072: PUSH
22073: LD_VAR 0 2
22077: PUSH
22078: FOR_IN
22079: IFFALSE 22095
// SetLives ( i , 300 ) ;
22081: LD_VAR 0 1
22085: PPUSH
22086: LD_INT 300
22088: PPUSH
22089: CALL_OW 234
22093: GO 22078
22095: POP
22096: POP
// end ;
22097: PPOPN 2
22099: END
// every 0 0$1 trigger s60 do var i , tmp ;
22100: LD_EXP 99
22104: IFFALSE 22173
22106: GO 22108
22108: DISABLE
22109: LD_INT 0
22111: PPUSH
22112: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22113: LD_ADDR_VAR 0 2
22117: PUSH
22118: LD_INT 22
22120: PUSH
22121: LD_OWVAR 2
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PPUSH
22130: CALL_OW 69
22134: ST_TO_ADDR
// if not tmp then
22135: LD_VAR 0 2
22139: NOT
22140: IFFALSE 22144
// exit ;
22142: GO 22173
// for i in tmp do
22144: LD_ADDR_VAR 0 1
22148: PUSH
22149: LD_VAR 0 2
22153: PUSH
22154: FOR_IN
22155: IFFALSE 22171
// SetLives ( i , 600 ) ;
22157: LD_VAR 0 1
22161: PPUSH
22162: LD_INT 600
22164: PPUSH
22165: CALL_OW 234
22169: GO 22154
22171: POP
22172: POP
// end ;
22173: PPOPN 2
22175: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22176: LD_INT 0
22178: PPUSH
// case cmd of 301 :
22179: LD_VAR 0 1
22183: PUSH
22184: LD_INT 301
22186: DOUBLE
22187: EQUAL
22188: IFTRUE 22192
22190: GO 22224
22192: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22193: LD_VAR 0 6
22197: PPUSH
22198: LD_VAR 0 7
22202: PPUSH
22203: LD_VAR 0 8
22207: PPUSH
22208: LD_VAR 0 4
22212: PPUSH
22213: LD_VAR 0 5
22217: PPUSH
22218: CALL 23425 0 5
22222: GO 22345
22224: LD_INT 302
22226: DOUBLE
22227: EQUAL
22228: IFTRUE 22232
22230: GO 22269
22232: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22233: LD_VAR 0 6
22237: PPUSH
22238: LD_VAR 0 7
22242: PPUSH
22243: LD_VAR 0 8
22247: PPUSH
22248: LD_VAR 0 9
22252: PPUSH
22253: LD_VAR 0 4
22257: PPUSH
22258: LD_VAR 0 5
22262: PPUSH
22263: CALL 23516 0 6
22267: GO 22345
22269: LD_INT 303
22271: DOUBLE
22272: EQUAL
22273: IFTRUE 22277
22275: GO 22314
22277: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22278: LD_VAR 0 6
22282: PPUSH
22283: LD_VAR 0 7
22287: PPUSH
22288: LD_VAR 0 8
22292: PPUSH
22293: LD_VAR 0 9
22297: PPUSH
22298: LD_VAR 0 4
22302: PPUSH
22303: LD_VAR 0 5
22307: PPUSH
22308: CALL 22350 0 6
22312: GO 22345
22314: LD_INT 304
22316: DOUBLE
22317: EQUAL
22318: IFTRUE 22322
22320: GO 22344
22322: POP
// hHackTeleport ( unit , x , y ) ; end ;
22323: LD_VAR 0 2
22327: PPUSH
22328: LD_VAR 0 4
22332: PPUSH
22333: LD_VAR 0 5
22337: PPUSH
22338: CALL 24109 0 3
22342: GO 22345
22344: POP
// end ;
22345: LD_VAR 0 12
22349: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22350: LD_INT 0
22352: PPUSH
22353: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22354: LD_VAR 0 1
22358: PUSH
22359: LD_INT 1
22361: LESS
22362: PUSH
22363: LD_VAR 0 1
22367: PUSH
22368: LD_INT 3
22370: GREATER
22371: OR
22372: PUSH
22373: LD_VAR 0 5
22377: PPUSH
22378: LD_VAR 0 6
22382: PPUSH
22383: CALL_OW 428
22387: OR
22388: IFFALSE 22392
// exit ;
22390: GO 23112
// uc_side := your_side ;
22392: LD_ADDR_OWVAR 20
22396: PUSH
22397: LD_OWVAR 2
22401: ST_TO_ADDR
// uc_nation := nation ;
22402: LD_ADDR_OWVAR 21
22406: PUSH
22407: LD_VAR 0 1
22411: ST_TO_ADDR
// bc_level = 1 ;
22412: LD_ADDR_OWVAR 43
22416: PUSH
22417: LD_INT 1
22419: ST_TO_ADDR
// case btype of 1 :
22420: LD_VAR 0 2
22424: PUSH
22425: LD_INT 1
22427: DOUBLE
22428: EQUAL
22429: IFTRUE 22433
22431: GO 22444
22433: POP
// bc_type := b_depot ; 2 :
22434: LD_ADDR_OWVAR 42
22438: PUSH
22439: LD_INT 0
22441: ST_TO_ADDR
22442: GO 23056
22444: LD_INT 2
22446: DOUBLE
22447: EQUAL
22448: IFTRUE 22452
22450: GO 22463
22452: POP
// bc_type := b_warehouse ; 3 :
22453: LD_ADDR_OWVAR 42
22457: PUSH
22458: LD_INT 1
22460: ST_TO_ADDR
22461: GO 23056
22463: LD_INT 3
22465: DOUBLE
22466: EQUAL
22467: IFTRUE 22471
22469: GO 22482
22471: POP
// bc_type := b_lab ; 4 .. 9 :
22472: LD_ADDR_OWVAR 42
22476: PUSH
22477: LD_INT 6
22479: ST_TO_ADDR
22480: GO 23056
22482: LD_INT 4
22484: DOUBLE
22485: GREATEREQUAL
22486: IFFALSE 22494
22488: LD_INT 9
22490: DOUBLE
22491: LESSEQUAL
22492: IFTRUE 22496
22494: GO 22548
22496: POP
// begin bc_type := b_lab_half ;
22497: LD_ADDR_OWVAR 42
22501: PUSH
22502: LD_INT 7
22504: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22505: LD_ADDR_OWVAR 44
22509: PUSH
22510: LD_INT 10
22512: PUSH
22513: LD_INT 11
22515: PUSH
22516: LD_INT 12
22518: PUSH
22519: LD_INT 15
22521: PUSH
22522: LD_INT 14
22524: PUSH
22525: LD_INT 13
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: PUSH
22536: LD_VAR 0 2
22540: PUSH
22541: LD_INT 3
22543: MINUS
22544: ARRAY
22545: ST_TO_ADDR
// end ; 10 .. 13 :
22546: GO 23056
22548: LD_INT 10
22550: DOUBLE
22551: GREATEREQUAL
22552: IFFALSE 22560
22554: LD_INT 13
22556: DOUBLE
22557: LESSEQUAL
22558: IFTRUE 22562
22560: GO 22639
22562: POP
// begin bc_type := b_lab_full ;
22563: LD_ADDR_OWVAR 42
22567: PUSH
22568: LD_INT 8
22570: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22571: LD_ADDR_OWVAR 44
22575: PUSH
22576: LD_INT 10
22578: PUSH
22579: LD_INT 12
22581: PUSH
22582: LD_INT 14
22584: PUSH
22585: LD_INT 13
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: PUSH
22594: LD_VAR 0 2
22598: PUSH
22599: LD_INT 9
22601: MINUS
22602: ARRAY
22603: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22604: LD_ADDR_OWVAR 45
22608: PUSH
22609: LD_INT 11
22611: PUSH
22612: LD_INT 15
22614: PUSH
22615: LD_INT 12
22617: PUSH
22618: LD_INT 15
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: PUSH
22627: LD_VAR 0 2
22631: PUSH
22632: LD_INT 9
22634: MINUS
22635: ARRAY
22636: ST_TO_ADDR
// end ; 14 :
22637: GO 23056
22639: LD_INT 14
22641: DOUBLE
22642: EQUAL
22643: IFTRUE 22647
22645: GO 22658
22647: POP
// bc_type := b_workshop ; 15 :
22648: LD_ADDR_OWVAR 42
22652: PUSH
22653: LD_INT 2
22655: ST_TO_ADDR
22656: GO 23056
22658: LD_INT 15
22660: DOUBLE
22661: EQUAL
22662: IFTRUE 22666
22664: GO 22677
22666: POP
// bc_type := b_factory ; 16 :
22667: LD_ADDR_OWVAR 42
22671: PUSH
22672: LD_INT 3
22674: ST_TO_ADDR
22675: GO 23056
22677: LD_INT 16
22679: DOUBLE
22680: EQUAL
22681: IFTRUE 22685
22683: GO 22696
22685: POP
// bc_type := b_ext_gun ; 17 :
22686: LD_ADDR_OWVAR 42
22690: PUSH
22691: LD_INT 17
22693: ST_TO_ADDR
22694: GO 23056
22696: LD_INT 17
22698: DOUBLE
22699: EQUAL
22700: IFTRUE 22704
22702: GO 22732
22704: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22705: LD_ADDR_OWVAR 42
22709: PUSH
22710: LD_INT 19
22712: PUSH
22713: LD_INT 23
22715: PUSH
22716: LD_INT 19
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: LIST
22723: PUSH
22724: LD_VAR 0 1
22728: ARRAY
22729: ST_TO_ADDR
22730: GO 23056
22732: LD_INT 18
22734: DOUBLE
22735: EQUAL
22736: IFTRUE 22740
22738: GO 22751
22740: POP
// bc_type := b_ext_radar ; 19 :
22741: LD_ADDR_OWVAR 42
22745: PUSH
22746: LD_INT 20
22748: ST_TO_ADDR
22749: GO 23056
22751: LD_INT 19
22753: DOUBLE
22754: EQUAL
22755: IFTRUE 22759
22757: GO 22770
22759: POP
// bc_type := b_ext_radio ; 20 :
22760: LD_ADDR_OWVAR 42
22764: PUSH
22765: LD_INT 22
22767: ST_TO_ADDR
22768: GO 23056
22770: LD_INT 20
22772: DOUBLE
22773: EQUAL
22774: IFTRUE 22778
22776: GO 22789
22778: POP
// bc_type := b_ext_siberium ; 21 :
22779: LD_ADDR_OWVAR 42
22783: PUSH
22784: LD_INT 21
22786: ST_TO_ADDR
22787: GO 23056
22789: LD_INT 21
22791: DOUBLE
22792: EQUAL
22793: IFTRUE 22797
22795: GO 22808
22797: POP
// bc_type := b_ext_computer ; 22 :
22798: LD_ADDR_OWVAR 42
22802: PUSH
22803: LD_INT 24
22805: ST_TO_ADDR
22806: GO 23056
22808: LD_INT 22
22810: DOUBLE
22811: EQUAL
22812: IFTRUE 22816
22814: GO 22827
22816: POP
// bc_type := b_ext_track ; 23 :
22817: LD_ADDR_OWVAR 42
22821: PUSH
22822: LD_INT 16
22824: ST_TO_ADDR
22825: GO 23056
22827: LD_INT 23
22829: DOUBLE
22830: EQUAL
22831: IFTRUE 22835
22833: GO 22846
22835: POP
// bc_type := b_ext_laser ; 24 :
22836: LD_ADDR_OWVAR 42
22840: PUSH
22841: LD_INT 25
22843: ST_TO_ADDR
22844: GO 23056
22846: LD_INT 24
22848: DOUBLE
22849: EQUAL
22850: IFTRUE 22854
22852: GO 22865
22854: POP
// bc_type := b_control_tower ; 25 :
22855: LD_ADDR_OWVAR 42
22859: PUSH
22860: LD_INT 36
22862: ST_TO_ADDR
22863: GO 23056
22865: LD_INT 25
22867: DOUBLE
22868: EQUAL
22869: IFTRUE 22873
22871: GO 22884
22873: POP
// bc_type := b_breastwork ; 26 :
22874: LD_ADDR_OWVAR 42
22878: PUSH
22879: LD_INT 31
22881: ST_TO_ADDR
22882: GO 23056
22884: LD_INT 26
22886: DOUBLE
22887: EQUAL
22888: IFTRUE 22892
22890: GO 22903
22892: POP
// bc_type := b_bunker ; 27 :
22893: LD_ADDR_OWVAR 42
22897: PUSH
22898: LD_INT 32
22900: ST_TO_ADDR
22901: GO 23056
22903: LD_INT 27
22905: DOUBLE
22906: EQUAL
22907: IFTRUE 22911
22909: GO 22922
22911: POP
// bc_type := b_turret ; 28 :
22912: LD_ADDR_OWVAR 42
22916: PUSH
22917: LD_INT 33
22919: ST_TO_ADDR
22920: GO 23056
22922: LD_INT 28
22924: DOUBLE
22925: EQUAL
22926: IFTRUE 22930
22928: GO 22941
22930: POP
// bc_type := b_armoury ; 29 :
22931: LD_ADDR_OWVAR 42
22935: PUSH
22936: LD_INT 4
22938: ST_TO_ADDR
22939: GO 23056
22941: LD_INT 29
22943: DOUBLE
22944: EQUAL
22945: IFTRUE 22949
22947: GO 22960
22949: POP
// bc_type := b_barracks ; 30 :
22950: LD_ADDR_OWVAR 42
22954: PUSH
22955: LD_INT 5
22957: ST_TO_ADDR
22958: GO 23056
22960: LD_INT 30
22962: DOUBLE
22963: EQUAL
22964: IFTRUE 22968
22966: GO 22979
22968: POP
// bc_type := b_solar_power ; 31 :
22969: LD_ADDR_OWVAR 42
22973: PUSH
22974: LD_INT 27
22976: ST_TO_ADDR
22977: GO 23056
22979: LD_INT 31
22981: DOUBLE
22982: EQUAL
22983: IFTRUE 22987
22985: GO 22998
22987: POP
// bc_type := b_oil_power ; 32 :
22988: LD_ADDR_OWVAR 42
22992: PUSH
22993: LD_INT 26
22995: ST_TO_ADDR
22996: GO 23056
22998: LD_INT 32
23000: DOUBLE
23001: EQUAL
23002: IFTRUE 23006
23004: GO 23017
23006: POP
// bc_type := b_siberite_power ; 33 :
23007: LD_ADDR_OWVAR 42
23011: PUSH
23012: LD_INT 28
23014: ST_TO_ADDR
23015: GO 23056
23017: LD_INT 33
23019: DOUBLE
23020: EQUAL
23021: IFTRUE 23025
23023: GO 23036
23025: POP
// bc_type := b_oil_mine ; 34 :
23026: LD_ADDR_OWVAR 42
23030: PUSH
23031: LD_INT 29
23033: ST_TO_ADDR
23034: GO 23056
23036: LD_INT 34
23038: DOUBLE
23039: EQUAL
23040: IFTRUE 23044
23042: GO 23055
23044: POP
// bc_type := b_siberite_mine ; end ;
23045: LD_ADDR_OWVAR 42
23049: PUSH
23050: LD_INT 30
23052: ST_TO_ADDR
23053: GO 23056
23055: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23056: LD_ADDR_VAR 0 8
23060: PUSH
23061: LD_VAR 0 5
23065: PPUSH
23066: LD_VAR 0 6
23070: PPUSH
23071: LD_VAR 0 3
23075: PPUSH
23076: CALL_OW 47
23080: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23081: LD_OWVAR 42
23085: PUSH
23086: LD_INT 32
23088: PUSH
23089: LD_INT 33
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: IN
23096: IFFALSE 23112
// PlaceWeaponTurret ( b , weapon ) ;
23098: LD_VAR 0 8
23102: PPUSH
23103: LD_VAR 0 4
23107: PPUSH
23108: CALL_OW 431
// end ;
23112: LD_VAR 0 7
23116: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23117: LD_INT 0
23119: PPUSH
23120: PPUSH
23121: PPUSH
23122: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23123: LD_ADDR_VAR 0 4
23127: PUSH
23128: LD_INT 22
23130: PUSH
23131: LD_OWVAR 2
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 2
23142: PUSH
23143: LD_INT 30
23145: PUSH
23146: LD_INT 0
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 30
23155: PUSH
23156: LD_INT 1
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PPUSH
23172: CALL_OW 69
23176: ST_TO_ADDR
// if not tmp then
23177: LD_VAR 0 4
23181: NOT
23182: IFFALSE 23186
// exit ;
23184: GO 23245
// for i in tmp do
23186: LD_ADDR_VAR 0 2
23190: PUSH
23191: LD_VAR 0 4
23195: PUSH
23196: FOR_IN
23197: IFFALSE 23243
// for j = 1 to 3 do
23199: LD_ADDR_VAR 0 3
23203: PUSH
23204: DOUBLE
23205: LD_INT 1
23207: DEC
23208: ST_TO_ADDR
23209: LD_INT 3
23211: PUSH
23212: FOR_TO
23213: IFFALSE 23239
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23215: LD_VAR 0 2
23219: PPUSH
23220: CALL_OW 274
23224: PPUSH
23225: LD_VAR 0 3
23229: PPUSH
23230: LD_INT 99999
23232: PPUSH
23233: CALL_OW 277
23237: GO 23212
23239: POP
23240: POP
23241: GO 23196
23243: POP
23244: POP
// end ;
23245: LD_VAR 0 1
23249: RET
// export function hHackSetLevel10 ; var i , j ; begin
23250: LD_INT 0
23252: PPUSH
23253: PPUSH
23254: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23255: LD_ADDR_VAR 0 2
23259: PUSH
23260: LD_INT 21
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PPUSH
23270: CALL_OW 69
23274: PUSH
23275: FOR_IN
23276: IFFALSE 23328
// if IsSelected ( i ) then
23278: LD_VAR 0 2
23282: PPUSH
23283: CALL_OW 306
23287: IFFALSE 23326
// begin for j := 1 to 4 do
23289: LD_ADDR_VAR 0 3
23293: PUSH
23294: DOUBLE
23295: LD_INT 1
23297: DEC
23298: ST_TO_ADDR
23299: LD_INT 4
23301: PUSH
23302: FOR_TO
23303: IFFALSE 23324
// SetSkill ( i , j , 10 ) ;
23305: LD_VAR 0 2
23309: PPUSH
23310: LD_VAR 0 3
23314: PPUSH
23315: LD_INT 10
23317: PPUSH
23318: CALL_OW 237
23322: GO 23302
23324: POP
23325: POP
// end ;
23326: GO 23275
23328: POP
23329: POP
// end ;
23330: LD_VAR 0 1
23334: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23335: LD_INT 0
23337: PPUSH
23338: PPUSH
23339: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23340: LD_ADDR_VAR 0 2
23344: PUSH
23345: LD_INT 22
23347: PUSH
23348: LD_OWVAR 2
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 21
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PPUSH
23371: CALL_OW 69
23375: PUSH
23376: FOR_IN
23377: IFFALSE 23418
// begin for j := 1 to 4 do
23379: LD_ADDR_VAR 0 3
23383: PUSH
23384: DOUBLE
23385: LD_INT 1
23387: DEC
23388: ST_TO_ADDR
23389: LD_INT 4
23391: PUSH
23392: FOR_TO
23393: IFFALSE 23414
// SetSkill ( i , j , 10 ) ;
23395: LD_VAR 0 2
23399: PPUSH
23400: LD_VAR 0 3
23404: PPUSH
23405: LD_INT 10
23407: PPUSH
23408: CALL_OW 237
23412: GO 23392
23414: POP
23415: POP
// end ;
23416: GO 23376
23418: POP
23419: POP
// end ;
23420: LD_VAR 0 1
23424: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23425: LD_INT 0
23427: PPUSH
// uc_side := your_side ;
23428: LD_ADDR_OWVAR 20
23432: PUSH
23433: LD_OWVAR 2
23437: ST_TO_ADDR
// uc_nation := nation ;
23438: LD_ADDR_OWVAR 21
23442: PUSH
23443: LD_VAR 0 1
23447: ST_TO_ADDR
// InitHc ;
23448: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23452: LD_INT 0
23454: PPUSH
23455: LD_VAR 0 2
23459: PPUSH
23460: LD_VAR 0 3
23464: PPUSH
23465: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23469: LD_VAR 0 4
23473: PPUSH
23474: LD_VAR 0 5
23478: PPUSH
23479: CALL_OW 428
23483: PUSH
23484: LD_INT 0
23486: EQUAL
23487: IFFALSE 23511
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23489: CALL_OW 44
23493: PPUSH
23494: LD_VAR 0 4
23498: PPUSH
23499: LD_VAR 0 5
23503: PPUSH
23504: LD_INT 1
23506: PPUSH
23507: CALL_OW 48
// end ;
23511: LD_VAR 0 6
23515: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23516: LD_INT 0
23518: PPUSH
23519: PPUSH
// uc_side := your_side ;
23520: LD_ADDR_OWVAR 20
23524: PUSH
23525: LD_OWVAR 2
23529: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23530: LD_VAR 0 1
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: LD_INT 3
23543: PUSH
23544: LD_INT 4
23546: PUSH
23547: LD_INT 5
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: IN
23557: IFFALSE 23569
// uc_nation := nation_american else
23559: LD_ADDR_OWVAR 21
23563: PUSH
23564: LD_INT 1
23566: ST_TO_ADDR
23567: GO 23612
// if chassis in [ 11 , 12 , 13 , 14 ] then
23569: LD_VAR 0 1
23573: PUSH
23574: LD_INT 11
23576: PUSH
23577: LD_INT 12
23579: PUSH
23580: LD_INT 13
23582: PUSH
23583: LD_INT 14
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: IN
23592: IFFALSE 23604
// uc_nation := nation_arabian else
23594: LD_ADDR_OWVAR 21
23598: PUSH
23599: LD_INT 2
23601: ST_TO_ADDR
23602: GO 23612
// uc_nation := nation_russian ;
23604: LD_ADDR_OWVAR 21
23608: PUSH
23609: LD_INT 3
23611: ST_TO_ADDR
// vc_chassis := chassis ;
23612: LD_ADDR_OWVAR 37
23616: PUSH
23617: LD_VAR 0 1
23621: ST_TO_ADDR
// vc_engine := engine ;
23622: LD_ADDR_OWVAR 39
23626: PUSH
23627: LD_VAR 0 2
23631: ST_TO_ADDR
// vc_control := control ;
23632: LD_ADDR_OWVAR 38
23636: PUSH
23637: LD_VAR 0 3
23641: ST_TO_ADDR
// vc_weapon := weapon ;
23642: LD_ADDR_OWVAR 40
23646: PUSH
23647: LD_VAR 0 4
23651: ST_TO_ADDR
// un := CreateVehicle ;
23652: LD_ADDR_VAR 0 8
23656: PUSH
23657: CALL_OW 45
23661: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23662: LD_VAR 0 8
23666: PPUSH
23667: LD_INT 0
23669: PPUSH
23670: LD_INT 5
23672: PPUSH
23673: CALL_OW 12
23677: PPUSH
23678: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23682: LD_VAR 0 8
23686: PPUSH
23687: LD_VAR 0 5
23691: PPUSH
23692: LD_VAR 0 6
23696: PPUSH
23697: LD_INT 1
23699: PPUSH
23700: CALL_OW 48
// end ;
23704: LD_VAR 0 7
23708: RET
// export hInvincible ; every 1 do
23709: GO 23711
23711: DISABLE
// hInvincible := [ ] ;
23712: LD_ADDR_EXP 100
23716: PUSH
23717: EMPTY
23718: ST_TO_ADDR
23719: END
// every 10 do var i ;
23720: GO 23722
23722: DISABLE
23723: LD_INT 0
23725: PPUSH
// begin enable ;
23726: ENABLE
// if not hInvincible then
23727: LD_EXP 100
23731: NOT
23732: IFFALSE 23736
// exit ;
23734: GO 23780
// for i in hInvincible do
23736: LD_ADDR_VAR 0 1
23740: PUSH
23741: LD_EXP 100
23745: PUSH
23746: FOR_IN
23747: IFFALSE 23778
// if GetLives ( i ) < 1000 then
23749: LD_VAR 0 1
23753: PPUSH
23754: CALL_OW 256
23758: PUSH
23759: LD_INT 1000
23761: LESS
23762: IFFALSE 23776
// SetLives ( i , 1000 ) ;
23764: LD_VAR 0 1
23768: PPUSH
23769: LD_INT 1000
23771: PPUSH
23772: CALL_OW 234
23776: GO 23746
23778: POP
23779: POP
// end ;
23780: PPOPN 1
23782: END
// export function hHackInvincible ; var i ; begin
23783: LD_INT 0
23785: PPUSH
23786: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23787: LD_ADDR_VAR 0 2
23791: PUSH
23792: LD_INT 2
23794: PUSH
23795: LD_INT 21
23797: PUSH
23798: LD_INT 1
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 21
23807: PUSH
23808: LD_INT 2
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: LIST
23819: PPUSH
23820: CALL_OW 69
23824: PUSH
23825: FOR_IN
23826: IFFALSE 23887
// if IsSelected ( i ) then
23828: LD_VAR 0 2
23832: PPUSH
23833: CALL_OW 306
23837: IFFALSE 23885
// begin if i in hInvincible then
23839: LD_VAR 0 2
23843: PUSH
23844: LD_EXP 100
23848: IN
23849: IFFALSE 23869
// hInvincible := hInvincible diff i else
23851: LD_ADDR_EXP 100
23855: PUSH
23856: LD_EXP 100
23860: PUSH
23861: LD_VAR 0 2
23865: DIFF
23866: ST_TO_ADDR
23867: GO 23885
// hInvincible := hInvincible union i ;
23869: LD_ADDR_EXP 100
23873: PUSH
23874: LD_EXP 100
23878: PUSH
23879: LD_VAR 0 2
23883: UNION
23884: ST_TO_ADDR
// end ;
23885: GO 23825
23887: POP
23888: POP
// end ;
23889: LD_VAR 0 1
23893: RET
// export function hHackInvisible ; var i , j ; begin
23894: LD_INT 0
23896: PPUSH
23897: PPUSH
23898: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23899: LD_ADDR_VAR 0 2
23903: PUSH
23904: LD_INT 21
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PPUSH
23914: CALL_OW 69
23918: PUSH
23919: FOR_IN
23920: IFFALSE 23944
// if IsSelected ( i ) then
23922: LD_VAR 0 2
23926: PPUSH
23927: CALL_OW 306
23931: IFFALSE 23942
// ComForceInvisible ( i ) ;
23933: LD_VAR 0 2
23937: PPUSH
23938: CALL_OW 496
23942: GO 23919
23944: POP
23945: POP
// end ;
23946: LD_VAR 0 1
23950: RET
// export function hHackChangeYourSide ; begin
23951: LD_INT 0
23953: PPUSH
// if your_side = 8 then
23954: LD_OWVAR 2
23958: PUSH
23959: LD_INT 8
23961: EQUAL
23962: IFFALSE 23974
// your_side := 0 else
23964: LD_ADDR_OWVAR 2
23968: PUSH
23969: LD_INT 0
23971: ST_TO_ADDR
23972: GO 23988
// your_side := your_side + 1 ;
23974: LD_ADDR_OWVAR 2
23978: PUSH
23979: LD_OWVAR 2
23983: PUSH
23984: LD_INT 1
23986: PLUS
23987: ST_TO_ADDR
// end ;
23988: LD_VAR 0 1
23992: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23993: LD_INT 0
23995: PPUSH
23996: PPUSH
23997: PPUSH
// for i in all_units do
23998: LD_ADDR_VAR 0 2
24002: PUSH
24003: LD_OWVAR 3
24007: PUSH
24008: FOR_IN
24009: IFFALSE 24087
// if IsSelected ( i ) then
24011: LD_VAR 0 2
24015: PPUSH
24016: CALL_OW 306
24020: IFFALSE 24085
// begin j := GetSide ( i ) ;
24022: LD_ADDR_VAR 0 3
24026: PUSH
24027: LD_VAR 0 2
24031: PPUSH
24032: CALL_OW 255
24036: ST_TO_ADDR
// if j = 8 then
24037: LD_VAR 0 3
24041: PUSH
24042: LD_INT 8
24044: EQUAL
24045: IFFALSE 24057
// j := 0 else
24047: LD_ADDR_VAR 0 3
24051: PUSH
24052: LD_INT 0
24054: ST_TO_ADDR
24055: GO 24071
// j := j + 1 ;
24057: LD_ADDR_VAR 0 3
24061: PUSH
24062: LD_VAR 0 3
24066: PUSH
24067: LD_INT 1
24069: PLUS
24070: ST_TO_ADDR
// SetSide ( i , j ) ;
24071: LD_VAR 0 2
24075: PPUSH
24076: LD_VAR 0 3
24080: PPUSH
24081: CALL_OW 235
// end ;
24085: GO 24008
24087: POP
24088: POP
// end ;
24089: LD_VAR 0 1
24093: RET
// export function hHackFog ; begin
24094: LD_INT 0
24096: PPUSH
// FogOff ( true ) ;
24097: LD_INT 1
24099: PPUSH
24100: CALL_OW 344
// end ;
24104: LD_VAR 0 1
24108: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24109: LD_INT 0
24111: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24112: LD_VAR 0 1
24116: PPUSH
24117: LD_VAR 0 2
24121: PPUSH
24122: LD_VAR 0 3
24126: PPUSH
24127: LD_INT 1
24129: PPUSH
24130: LD_INT 1
24132: PPUSH
24133: CALL_OW 483
// CenterOnXY ( x , y ) ;
24137: LD_VAR 0 2
24141: PPUSH
24142: LD_VAR 0 3
24146: PPUSH
24147: CALL_OW 84
// end ;
24151: LD_VAR 0 4
24155: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24156: LD_INT 0
24158: PPUSH
24159: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24160: LD_VAR 0 1
24164: NOT
24165: PUSH
24166: LD_VAR 0 2
24170: PPUSH
24171: LD_VAR 0 3
24175: PPUSH
24176: CALL_OW 488
24180: NOT
24181: OR
24182: PUSH
24183: LD_VAR 0 1
24187: PPUSH
24188: CALL_OW 266
24192: PUSH
24193: LD_INT 3
24195: NONEQUAL
24196: PUSH
24197: LD_VAR 0 1
24201: PPUSH
24202: CALL_OW 247
24206: PUSH
24207: LD_INT 1
24209: EQUAL
24210: NOT
24211: AND
24212: OR
24213: IFFALSE 24217
// exit ;
24215: GO 24366
// if GetType ( factory ) = unit_human then
24217: LD_VAR 0 1
24221: PPUSH
24222: CALL_OW 247
24226: PUSH
24227: LD_INT 1
24229: EQUAL
24230: IFFALSE 24247
// factory := IsInUnit ( factory ) ;
24232: LD_ADDR_VAR 0 1
24236: PUSH
24237: LD_VAR 0 1
24241: PPUSH
24242: CALL_OW 310
24246: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24247: LD_VAR 0 1
24251: PPUSH
24252: CALL_OW 266
24256: PUSH
24257: LD_INT 3
24259: NONEQUAL
24260: IFFALSE 24264
// exit ;
24262: GO 24366
// if HexInfo ( x , y ) = factory then
24264: LD_VAR 0 2
24268: PPUSH
24269: LD_VAR 0 3
24273: PPUSH
24274: CALL_OW 428
24278: PUSH
24279: LD_VAR 0 1
24283: EQUAL
24284: IFFALSE 24311
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24286: LD_ADDR_EXP 101
24290: PUSH
24291: LD_EXP 101
24295: PPUSH
24296: LD_VAR 0 1
24300: PPUSH
24301: LD_INT 0
24303: PPUSH
24304: CALL_OW 1
24308: ST_TO_ADDR
24309: GO 24362
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24311: LD_ADDR_EXP 101
24315: PUSH
24316: LD_EXP 101
24320: PPUSH
24321: LD_VAR 0 1
24325: PPUSH
24326: LD_VAR 0 1
24330: PPUSH
24331: CALL_OW 255
24335: PUSH
24336: LD_VAR 0 1
24340: PUSH
24341: LD_VAR 0 2
24345: PUSH
24346: LD_VAR 0 3
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: PPUSH
24357: CALL_OW 1
24361: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24362: CALL 24371 0 0
// end ;
24366: LD_VAR 0 4
24370: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24371: LD_INT 0
24373: PPUSH
24374: PPUSH
24375: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24376: LD_STRING resetFactoryWaypoint();
24378: PPUSH
24379: CALL_OW 559
// if factoryWaypoints then
24383: LD_EXP 101
24387: IFFALSE 24513
// begin list := PrepareArray ( factoryWaypoints ) ;
24389: LD_ADDR_VAR 0 3
24393: PUSH
24394: LD_EXP 101
24398: PPUSH
24399: CALL 71108 0 1
24403: ST_TO_ADDR
// for i := 1 to list do
24404: LD_ADDR_VAR 0 2
24408: PUSH
24409: DOUBLE
24410: LD_INT 1
24412: DEC
24413: ST_TO_ADDR
24414: LD_VAR 0 3
24418: PUSH
24419: FOR_TO
24420: IFFALSE 24511
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24422: LD_STRING setFactoryWaypointXY(
24424: PUSH
24425: LD_VAR 0 3
24429: PUSH
24430: LD_VAR 0 2
24434: ARRAY
24435: PUSH
24436: LD_INT 1
24438: ARRAY
24439: STR
24440: PUSH
24441: LD_STRING ,
24443: STR
24444: PUSH
24445: LD_VAR 0 3
24449: PUSH
24450: LD_VAR 0 2
24454: ARRAY
24455: PUSH
24456: LD_INT 2
24458: ARRAY
24459: STR
24460: PUSH
24461: LD_STRING ,
24463: STR
24464: PUSH
24465: LD_VAR 0 3
24469: PUSH
24470: LD_VAR 0 2
24474: ARRAY
24475: PUSH
24476: LD_INT 3
24478: ARRAY
24479: STR
24480: PUSH
24481: LD_STRING ,
24483: STR
24484: PUSH
24485: LD_VAR 0 3
24489: PUSH
24490: LD_VAR 0 2
24494: ARRAY
24495: PUSH
24496: LD_INT 4
24498: ARRAY
24499: STR
24500: PUSH
24501: LD_STRING )
24503: STR
24504: PPUSH
24505: CALL_OW 559
24509: GO 24419
24511: POP
24512: POP
// end ; end ;
24513: LD_VAR 0 1
24517: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24518: LD_INT 0
24520: PPUSH
// if HexInfo ( x , y ) = warehouse then
24521: LD_VAR 0 2
24525: PPUSH
24526: LD_VAR 0 3
24530: PPUSH
24531: CALL_OW 428
24535: PUSH
24536: LD_VAR 0 1
24540: EQUAL
24541: IFFALSE 24568
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24543: LD_ADDR_EXP 102
24547: PUSH
24548: LD_EXP 102
24552: PPUSH
24553: LD_VAR 0 1
24557: PPUSH
24558: LD_INT 0
24560: PPUSH
24561: CALL_OW 1
24565: ST_TO_ADDR
24566: GO 24619
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24568: LD_ADDR_EXP 102
24572: PUSH
24573: LD_EXP 102
24577: PPUSH
24578: LD_VAR 0 1
24582: PPUSH
24583: LD_VAR 0 1
24587: PPUSH
24588: CALL_OW 255
24592: PUSH
24593: LD_VAR 0 1
24597: PUSH
24598: LD_VAR 0 2
24602: PUSH
24603: LD_VAR 0 3
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: PPUSH
24614: CALL_OW 1
24618: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24619: CALL 24628 0 0
// end ;
24623: LD_VAR 0 4
24627: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24628: LD_INT 0
24630: PPUSH
24631: PPUSH
24632: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24633: LD_STRING resetWarehouseGatheringPoints();
24635: PPUSH
24636: CALL_OW 559
// if warehouseGatheringPoints then
24640: LD_EXP 102
24644: IFFALSE 24770
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24646: LD_ADDR_VAR 0 3
24650: PUSH
24651: LD_EXP 102
24655: PPUSH
24656: CALL 71108 0 1
24660: ST_TO_ADDR
// for i := 1 to list do
24661: LD_ADDR_VAR 0 2
24665: PUSH
24666: DOUBLE
24667: LD_INT 1
24669: DEC
24670: ST_TO_ADDR
24671: LD_VAR 0 3
24675: PUSH
24676: FOR_TO
24677: IFFALSE 24768
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24679: LD_STRING setWarehouseGatheringPointXY(
24681: PUSH
24682: LD_VAR 0 3
24686: PUSH
24687: LD_VAR 0 2
24691: ARRAY
24692: PUSH
24693: LD_INT 1
24695: ARRAY
24696: STR
24697: PUSH
24698: LD_STRING ,
24700: STR
24701: PUSH
24702: LD_VAR 0 3
24706: PUSH
24707: LD_VAR 0 2
24711: ARRAY
24712: PUSH
24713: LD_INT 2
24715: ARRAY
24716: STR
24717: PUSH
24718: LD_STRING ,
24720: STR
24721: PUSH
24722: LD_VAR 0 3
24726: PUSH
24727: LD_VAR 0 2
24731: ARRAY
24732: PUSH
24733: LD_INT 3
24735: ARRAY
24736: STR
24737: PUSH
24738: LD_STRING ,
24740: STR
24741: PUSH
24742: LD_VAR 0 3
24746: PUSH
24747: LD_VAR 0 2
24751: ARRAY
24752: PUSH
24753: LD_INT 4
24755: ARRAY
24756: STR
24757: PUSH
24758: LD_STRING )
24760: STR
24761: PPUSH
24762: CALL_OW 559
24766: GO 24676
24768: POP
24769: POP
// end ; end ;
24770: LD_VAR 0 1
24774: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24775: LD_EXP 102
24779: IFFALSE 25466
24781: GO 24783
24783: DISABLE
24784: LD_INT 0
24786: PPUSH
24787: PPUSH
24788: PPUSH
24789: PPUSH
24790: PPUSH
24791: PPUSH
24792: PPUSH
24793: PPUSH
24794: PPUSH
// begin enable ;
24795: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24796: LD_ADDR_VAR 0 3
24800: PUSH
24801: LD_EXP 102
24805: PPUSH
24806: CALL 71108 0 1
24810: ST_TO_ADDR
// if not list then
24811: LD_VAR 0 3
24815: NOT
24816: IFFALSE 24820
// exit ;
24818: GO 25466
// for i := 1 to list do
24820: LD_ADDR_VAR 0 1
24824: PUSH
24825: DOUBLE
24826: LD_INT 1
24828: DEC
24829: ST_TO_ADDR
24830: LD_VAR 0 3
24834: PUSH
24835: FOR_TO
24836: IFFALSE 25464
// begin depot := list [ i ] [ 2 ] ;
24838: LD_ADDR_VAR 0 8
24842: PUSH
24843: LD_VAR 0 3
24847: PUSH
24848: LD_VAR 0 1
24852: ARRAY
24853: PUSH
24854: LD_INT 2
24856: ARRAY
24857: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24858: LD_ADDR_VAR 0 5
24862: PUSH
24863: LD_VAR 0 3
24867: PUSH
24868: LD_VAR 0 1
24872: ARRAY
24873: PUSH
24874: LD_INT 1
24876: ARRAY
24877: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24878: LD_VAR 0 8
24882: PPUSH
24883: CALL_OW 301
24887: PUSH
24888: LD_VAR 0 5
24892: PUSH
24893: LD_VAR 0 8
24897: PPUSH
24898: CALL_OW 255
24902: NONEQUAL
24903: OR
24904: IFFALSE 24933
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24906: LD_ADDR_EXP 102
24910: PUSH
24911: LD_EXP 102
24915: PPUSH
24916: LD_VAR 0 8
24920: PPUSH
24921: LD_INT 0
24923: PPUSH
24924: CALL_OW 1
24928: ST_TO_ADDR
// exit ;
24929: POP
24930: POP
24931: GO 25466
// end ; x := list [ i ] [ 3 ] ;
24933: LD_ADDR_VAR 0 6
24937: PUSH
24938: LD_VAR 0 3
24942: PUSH
24943: LD_VAR 0 1
24947: ARRAY
24948: PUSH
24949: LD_INT 3
24951: ARRAY
24952: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24953: LD_ADDR_VAR 0 7
24957: PUSH
24958: LD_VAR 0 3
24962: PUSH
24963: LD_VAR 0 1
24967: ARRAY
24968: PUSH
24969: LD_INT 4
24971: ARRAY
24972: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24973: LD_ADDR_VAR 0 9
24977: PUSH
24978: LD_VAR 0 6
24982: PPUSH
24983: LD_VAR 0 7
24987: PPUSH
24988: LD_INT 16
24990: PPUSH
24991: CALL 69692 0 3
24995: ST_TO_ADDR
// if not cratesNearbyPoint then
24996: LD_VAR 0 9
25000: NOT
25001: IFFALSE 25007
// exit ;
25003: POP
25004: POP
25005: GO 25466
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25007: LD_ADDR_VAR 0 4
25011: PUSH
25012: LD_INT 22
25014: PUSH
25015: LD_VAR 0 5
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 3
25026: PUSH
25027: LD_INT 60
25029: PUSH
25030: EMPTY
25031: LIST
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 91
25039: PUSH
25040: LD_VAR 0 8
25044: PUSH
25045: LD_INT 6
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 2
25055: PUSH
25056: LD_INT 25
25058: PUSH
25059: LD_INT 2
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 25
25068: PUSH
25069: LD_INT 16
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: LIST
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: PPUSH
25087: CALL_OW 69
25091: PUSH
25092: LD_VAR 0 8
25096: PPUSH
25097: CALL_OW 313
25101: PPUSH
25102: LD_INT 3
25104: PUSH
25105: LD_INT 60
25107: PUSH
25108: EMPTY
25109: LIST
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 2
25117: PUSH
25118: LD_INT 25
25120: PUSH
25121: LD_INT 2
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 25
25130: PUSH
25131: LD_INT 16
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: LIST
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PPUSH
25147: CALL_OW 72
25151: UNION
25152: ST_TO_ADDR
// if tmp then
25153: LD_VAR 0 4
25157: IFFALSE 25237
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25159: LD_ADDR_VAR 0 4
25163: PUSH
25164: LD_VAR 0 4
25168: PPUSH
25169: LD_INT 3
25171: PPUSH
25172: CALL 67659 0 2
25176: ST_TO_ADDR
// for j in tmp do
25177: LD_ADDR_VAR 0 2
25181: PUSH
25182: LD_VAR 0 4
25186: PUSH
25187: FOR_IN
25188: IFFALSE 25231
// begin if IsInUnit ( j ) then
25190: LD_VAR 0 2
25194: PPUSH
25195: CALL_OW 310
25199: IFFALSE 25210
// ComExit ( j ) ;
25201: LD_VAR 0 2
25205: PPUSH
25206: CALL 67742 0 1
// AddComCollect ( j , x , y ) ;
25210: LD_VAR 0 2
25214: PPUSH
25215: LD_VAR 0 6
25219: PPUSH
25220: LD_VAR 0 7
25224: PPUSH
25225: CALL_OW 177
// end ;
25229: GO 25187
25231: POP
25232: POP
// exit ;
25233: POP
25234: POP
25235: GO 25466
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25237: LD_ADDR_VAR 0 4
25241: PUSH
25242: LD_INT 22
25244: PUSH
25245: LD_VAR 0 5
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 91
25256: PUSH
25257: LD_VAR 0 8
25261: PUSH
25262: LD_INT 8
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 2
25272: PUSH
25273: LD_INT 34
25275: PUSH
25276: LD_INT 12
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 34
25285: PUSH
25286: LD_INT 51
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 34
25295: PUSH
25296: LD_INT 32
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 34
25305: PUSH
25306: LD_EXP 115
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: LIST
25326: PPUSH
25327: CALL_OW 69
25331: ST_TO_ADDR
// if tmp then
25332: LD_VAR 0 4
25336: IFFALSE 25462
// begin for j in tmp do
25338: LD_ADDR_VAR 0 2
25342: PUSH
25343: LD_VAR 0 4
25347: PUSH
25348: FOR_IN
25349: IFFALSE 25460
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25351: LD_VAR 0 2
25355: PPUSH
25356: CALL_OW 262
25360: PUSH
25361: LD_INT 3
25363: EQUAL
25364: PUSH
25365: LD_VAR 0 2
25369: PPUSH
25370: CALL_OW 261
25374: PUSH
25375: LD_INT 20
25377: GREATER
25378: OR
25379: PUSH
25380: LD_VAR 0 2
25384: PPUSH
25385: CALL_OW 314
25389: NOT
25390: AND
25391: PUSH
25392: LD_VAR 0 2
25396: PPUSH
25397: CALL_OW 263
25401: PUSH
25402: LD_INT 1
25404: NONEQUAL
25405: PUSH
25406: LD_VAR 0 2
25410: PPUSH
25411: CALL_OW 311
25415: OR
25416: AND
25417: IFFALSE 25458
// begin ComCollect ( j , x , y ) ;
25419: LD_VAR 0 2
25423: PPUSH
25424: LD_VAR 0 6
25428: PPUSH
25429: LD_VAR 0 7
25433: PPUSH
25434: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25438: LD_VAR 0 2
25442: PPUSH
25443: LD_VAR 0 8
25447: PPUSH
25448: CALL_OW 172
// exit ;
25452: POP
25453: POP
25454: POP
25455: POP
25456: GO 25466
// end ;
25458: GO 25348
25460: POP
25461: POP
// end ; end ;
25462: GO 24835
25464: POP
25465: POP
// end ; end_of_file
25466: PPOPN 9
25468: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25469: LD_VAR 0 1
25473: PUSH
25474: LD_INT 200
25476: DOUBLE
25477: GREATEREQUAL
25478: IFFALSE 25486
25480: LD_INT 299
25482: DOUBLE
25483: LESSEQUAL
25484: IFTRUE 25488
25486: GO 25520
25488: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25489: LD_VAR 0 1
25493: PPUSH
25494: LD_VAR 0 2
25498: PPUSH
25499: LD_VAR 0 3
25503: PPUSH
25504: LD_VAR 0 4
25508: PPUSH
25509: LD_VAR 0 5
25513: PPUSH
25514: CALL 26010 0 5
25518: GO 25597
25520: LD_INT 300
25522: DOUBLE
25523: GREATEREQUAL
25524: IFFALSE 25532
25526: LD_INT 399
25528: DOUBLE
25529: LESSEQUAL
25530: IFTRUE 25534
25532: GO 25596
25534: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
25535: LD_VAR 0 1
25539: PPUSH
25540: LD_VAR 0 2
25544: PPUSH
25545: LD_VAR 0 3
25549: PPUSH
25550: LD_VAR 0 4
25554: PPUSH
25555: LD_VAR 0 5
25559: PPUSH
25560: LD_VAR 0 6
25564: PPUSH
25565: LD_VAR 0 7
25569: PPUSH
25570: LD_VAR 0 8
25574: PPUSH
25575: LD_VAR 0 9
25579: PPUSH
25580: LD_VAR 0 10
25584: PPUSH
25585: LD_VAR 0 11
25589: PPUSH
25590: CALL 22176 0 11
25594: GO 25597
25596: POP
// end ;
25597: PPOPN 11
25599: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
25600: LD_VAR 0 1
25604: PPUSH
25605: LD_VAR 0 2
25609: PPUSH
25610: LD_VAR 0 3
25614: PPUSH
25615: LD_VAR 0 4
25619: PPUSH
25620: LD_VAR 0 5
25624: PPUSH
25625: CALL 25746 0 5
// end ; end_of_file
25629: PPOPN 5
25631: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25632: LD_INT 0
25634: PPUSH
25635: PPUSH
25636: PPUSH
25637: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25638: LD_VAR 0 1
25642: PPUSH
25643: CALL_OW 264
25647: PUSH
25648: LD_EXP 118
25652: EQUAL
25653: IFFALSE 25725
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25655: LD_INT 68
25657: PPUSH
25658: LD_VAR 0 1
25662: PPUSH
25663: CALL_OW 255
25667: PPUSH
25668: CALL_OW 321
25672: PUSH
25673: LD_INT 2
25675: EQUAL
25676: IFFALSE 25688
// eff := 70 else
25678: LD_ADDR_VAR 0 4
25682: PUSH
25683: LD_INT 70
25685: ST_TO_ADDR
25686: GO 25696
// eff := 30 ;
25688: LD_ADDR_VAR 0 4
25692: PUSH
25693: LD_INT 30
25695: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25696: LD_VAR 0 1
25700: PPUSH
25701: CALL_OW 250
25705: PPUSH
25706: LD_VAR 0 1
25710: PPUSH
25711: CALL_OW 251
25715: PPUSH
25716: LD_VAR 0 4
25720: PPUSH
25721: CALL_OW 495
// end ; end ;
25725: LD_VAR 0 2
25729: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25730: LD_INT 0
25732: PPUSH
// end ;
25733: LD_VAR 0 4
25737: RET
// export function SOS_Command ( cmd ) ; begin
25738: LD_INT 0
25740: PPUSH
// end ;
25741: LD_VAR 0 2
25745: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25746: LD_INT 0
25748: PPUSH
// end ;
25749: LD_VAR 0 6
25753: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25754: LD_INT 0
25756: PPUSH
25757: PPUSH
// if not vehicle or not factory then
25758: LD_VAR 0 1
25762: NOT
25763: PUSH
25764: LD_VAR 0 2
25768: NOT
25769: OR
25770: IFFALSE 25774
// exit ;
25772: GO 26005
// if factoryWaypoints >= factory then
25774: LD_EXP 101
25778: PUSH
25779: LD_VAR 0 2
25783: GREATEREQUAL
25784: IFFALSE 26005
// if factoryWaypoints [ factory ] then
25786: LD_EXP 101
25790: PUSH
25791: LD_VAR 0 2
25795: ARRAY
25796: IFFALSE 26005
// begin if GetControl ( vehicle ) = control_manual then
25798: LD_VAR 0 1
25802: PPUSH
25803: CALL_OW 263
25807: PUSH
25808: LD_INT 1
25810: EQUAL
25811: IFFALSE 25892
// begin driver := IsDrivenBy ( vehicle ) ;
25813: LD_ADDR_VAR 0 4
25817: PUSH
25818: LD_VAR 0 1
25822: PPUSH
25823: CALL_OW 311
25827: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25828: LD_VAR 0 4
25832: PPUSH
25833: LD_EXP 101
25837: PUSH
25838: LD_VAR 0 2
25842: ARRAY
25843: PUSH
25844: LD_INT 3
25846: ARRAY
25847: PPUSH
25848: LD_EXP 101
25852: PUSH
25853: LD_VAR 0 2
25857: ARRAY
25858: PUSH
25859: LD_INT 4
25861: ARRAY
25862: PPUSH
25863: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25867: LD_VAR 0 4
25871: PPUSH
25872: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25876: LD_VAR 0 4
25880: PPUSH
25881: LD_VAR 0 2
25885: PPUSH
25886: CALL_OW 180
// end else
25890: GO 26005
// if GetControl ( vehicle ) = control_remote then
25892: LD_VAR 0 1
25896: PPUSH
25897: CALL_OW 263
25901: PUSH
25902: LD_INT 2
25904: EQUAL
25905: IFFALSE 25966
// begin wait ( 0 0$2 ) ;
25907: LD_INT 70
25909: PPUSH
25910: CALL_OW 67
// if Connect ( vehicle ) then
25914: LD_VAR 0 1
25918: PPUSH
25919: CALL 38053 0 1
25923: IFFALSE 25964
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25925: LD_VAR 0 1
25929: PPUSH
25930: LD_EXP 101
25934: PUSH
25935: LD_VAR 0 2
25939: ARRAY
25940: PUSH
25941: LD_INT 3
25943: ARRAY
25944: PPUSH
25945: LD_EXP 101
25949: PUSH
25950: LD_VAR 0 2
25954: ARRAY
25955: PUSH
25956: LD_INT 4
25958: ARRAY
25959: PPUSH
25960: CALL_OW 171
// end else
25964: GO 26005
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25966: LD_VAR 0 1
25970: PPUSH
25971: LD_EXP 101
25975: PUSH
25976: LD_VAR 0 2
25980: ARRAY
25981: PUSH
25982: LD_INT 3
25984: ARRAY
25985: PPUSH
25986: LD_EXP 101
25990: PUSH
25991: LD_VAR 0 2
25995: ARRAY
25996: PUSH
25997: LD_INT 4
25999: ARRAY
26000: PPUSH
26001: CALL_OW 171
// end ; end ;
26005: LD_VAR 0 3
26009: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26010: LD_INT 0
26012: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26013: LD_VAR 0 1
26017: PUSH
26018: LD_INT 250
26020: EQUAL
26021: PUSH
26022: LD_VAR 0 2
26026: PPUSH
26027: CALL_OW 264
26031: PUSH
26032: LD_EXP 121
26036: EQUAL
26037: AND
26038: IFFALSE 26059
// MinerPlaceMine ( unit , x , y ) ;
26040: LD_VAR 0 2
26044: PPUSH
26045: LD_VAR 0 4
26049: PPUSH
26050: LD_VAR 0 5
26054: PPUSH
26055: CALL 28458 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26059: LD_VAR 0 1
26063: PUSH
26064: LD_INT 251
26066: EQUAL
26067: PUSH
26068: LD_VAR 0 2
26072: PPUSH
26073: CALL_OW 264
26077: PUSH
26078: LD_EXP 121
26082: EQUAL
26083: AND
26084: IFFALSE 26105
// MinerDetonateMine ( unit , x , y ) ;
26086: LD_VAR 0 2
26090: PPUSH
26091: LD_VAR 0 4
26095: PPUSH
26096: LD_VAR 0 5
26100: PPUSH
26101: CALL 28735 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26105: LD_VAR 0 1
26109: PUSH
26110: LD_INT 252
26112: EQUAL
26113: PUSH
26114: LD_VAR 0 2
26118: PPUSH
26119: CALL_OW 264
26123: PUSH
26124: LD_EXP 121
26128: EQUAL
26129: AND
26130: IFFALSE 26151
// MinerCreateMinefield ( unit , x , y ) ;
26132: LD_VAR 0 2
26136: PPUSH
26137: LD_VAR 0 4
26141: PPUSH
26142: LD_VAR 0 5
26146: PPUSH
26147: CALL 29152 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26151: LD_VAR 0 1
26155: PUSH
26156: LD_INT 253
26158: EQUAL
26159: PUSH
26160: LD_VAR 0 2
26164: PPUSH
26165: CALL_OW 257
26169: PUSH
26170: LD_INT 5
26172: EQUAL
26173: AND
26174: IFFALSE 26195
// ComBinocular ( unit , x , y ) ;
26176: LD_VAR 0 2
26180: PPUSH
26181: LD_VAR 0 4
26185: PPUSH
26186: LD_VAR 0 5
26190: PPUSH
26191: CALL 29523 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26195: LD_VAR 0 1
26199: PUSH
26200: LD_INT 254
26202: EQUAL
26203: PUSH
26204: LD_VAR 0 2
26208: PPUSH
26209: CALL_OW 264
26213: PUSH
26214: LD_EXP 116
26218: EQUAL
26219: AND
26220: PUSH
26221: LD_VAR 0 3
26225: PPUSH
26226: CALL_OW 263
26230: PUSH
26231: LD_INT 3
26233: EQUAL
26234: AND
26235: IFFALSE 26251
// HackDestroyVehicle ( unit , selectedUnit ) ;
26237: LD_VAR 0 2
26241: PPUSH
26242: LD_VAR 0 3
26246: PPUSH
26247: CALL 27818 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26251: LD_VAR 0 1
26255: PUSH
26256: LD_INT 255
26258: EQUAL
26259: PUSH
26260: LD_VAR 0 2
26264: PPUSH
26265: CALL_OW 264
26269: PUSH
26270: LD_INT 14
26272: PUSH
26273: LD_INT 53
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: IN
26280: AND
26281: PUSH
26282: LD_VAR 0 4
26286: PPUSH
26287: LD_VAR 0 5
26291: PPUSH
26292: CALL_OW 488
26296: AND
26297: IFFALSE 26321
// CutTreeXYR ( unit , x , y , 12 ) ;
26299: LD_VAR 0 2
26303: PPUSH
26304: LD_VAR 0 4
26308: PPUSH
26309: LD_VAR 0 5
26313: PPUSH
26314: LD_INT 12
26316: PPUSH
26317: CALL 26384 0 4
// if cmd = 256 then
26321: LD_VAR 0 1
26325: PUSH
26326: LD_INT 256
26328: EQUAL
26329: IFFALSE 26350
// SetFactoryWaypoint ( unit , x , y ) ;
26331: LD_VAR 0 2
26335: PPUSH
26336: LD_VAR 0 4
26340: PPUSH
26341: LD_VAR 0 5
26345: PPUSH
26346: CALL 24156 0 3
// if cmd = 257 then
26350: LD_VAR 0 1
26354: PUSH
26355: LD_INT 257
26357: EQUAL
26358: IFFALSE 26379
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26360: LD_VAR 0 2
26364: PPUSH
26365: LD_VAR 0 4
26369: PPUSH
26370: LD_VAR 0 5
26374: PPUSH
26375: CALL 24518 0 3
// end ;
26379: LD_VAR 0 6
26383: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26384: LD_INT 0
26386: PPUSH
26387: PPUSH
26388: PPUSH
26389: PPUSH
26390: PPUSH
26391: PPUSH
26392: PPUSH
26393: PPUSH
26394: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26395: LD_VAR 0 1
26399: NOT
26400: PUSH
26401: LD_VAR 0 2
26405: PPUSH
26406: LD_VAR 0 3
26410: PPUSH
26411: CALL_OW 488
26415: NOT
26416: OR
26417: PUSH
26418: LD_VAR 0 4
26422: NOT
26423: OR
26424: IFFALSE 26428
// exit ;
26426: GO 26768
// list := [ ] ;
26428: LD_ADDR_VAR 0 13
26432: PUSH
26433: EMPTY
26434: ST_TO_ADDR
// if x - r < 0 then
26435: LD_VAR 0 2
26439: PUSH
26440: LD_VAR 0 4
26444: MINUS
26445: PUSH
26446: LD_INT 0
26448: LESS
26449: IFFALSE 26461
// min_x := 0 else
26451: LD_ADDR_VAR 0 7
26455: PUSH
26456: LD_INT 0
26458: ST_TO_ADDR
26459: GO 26477
// min_x := x - r ;
26461: LD_ADDR_VAR 0 7
26465: PUSH
26466: LD_VAR 0 2
26470: PUSH
26471: LD_VAR 0 4
26475: MINUS
26476: ST_TO_ADDR
// if y - r < 0 then
26477: LD_VAR 0 3
26481: PUSH
26482: LD_VAR 0 4
26486: MINUS
26487: PUSH
26488: LD_INT 0
26490: LESS
26491: IFFALSE 26503
// min_y := 0 else
26493: LD_ADDR_VAR 0 8
26497: PUSH
26498: LD_INT 0
26500: ST_TO_ADDR
26501: GO 26519
// min_y := y - r ;
26503: LD_ADDR_VAR 0 8
26507: PUSH
26508: LD_VAR 0 3
26512: PUSH
26513: LD_VAR 0 4
26517: MINUS
26518: ST_TO_ADDR
// max_x := x + r ;
26519: LD_ADDR_VAR 0 9
26523: PUSH
26524: LD_VAR 0 2
26528: PUSH
26529: LD_VAR 0 4
26533: PLUS
26534: ST_TO_ADDR
// max_y := y + r ;
26535: LD_ADDR_VAR 0 10
26539: PUSH
26540: LD_VAR 0 3
26544: PUSH
26545: LD_VAR 0 4
26549: PLUS
26550: ST_TO_ADDR
// for _x = min_x to max_x do
26551: LD_ADDR_VAR 0 11
26555: PUSH
26556: DOUBLE
26557: LD_VAR 0 7
26561: DEC
26562: ST_TO_ADDR
26563: LD_VAR 0 9
26567: PUSH
26568: FOR_TO
26569: IFFALSE 26686
// for _y = min_y to max_y do
26571: LD_ADDR_VAR 0 12
26575: PUSH
26576: DOUBLE
26577: LD_VAR 0 8
26581: DEC
26582: ST_TO_ADDR
26583: LD_VAR 0 10
26587: PUSH
26588: FOR_TO
26589: IFFALSE 26682
// begin if not ValidHex ( _x , _y ) then
26591: LD_VAR 0 11
26595: PPUSH
26596: LD_VAR 0 12
26600: PPUSH
26601: CALL_OW 488
26605: NOT
26606: IFFALSE 26610
// continue ;
26608: GO 26588
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26610: LD_VAR 0 11
26614: PPUSH
26615: LD_VAR 0 12
26619: PPUSH
26620: CALL_OW 351
26624: PUSH
26625: LD_VAR 0 11
26629: PPUSH
26630: LD_VAR 0 12
26634: PPUSH
26635: CALL_OW 554
26639: AND
26640: IFFALSE 26680
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26642: LD_ADDR_VAR 0 13
26646: PUSH
26647: LD_VAR 0 13
26651: PPUSH
26652: LD_VAR 0 13
26656: PUSH
26657: LD_INT 1
26659: PLUS
26660: PPUSH
26661: LD_VAR 0 11
26665: PUSH
26666: LD_VAR 0 12
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PPUSH
26675: CALL_OW 2
26679: ST_TO_ADDR
// end ;
26680: GO 26588
26682: POP
26683: POP
26684: GO 26568
26686: POP
26687: POP
// if not list then
26688: LD_VAR 0 13
26692: NOT
26693: IFFALSE 26697
// exit ;
26695: GO 26768
// for i in list do
26697: LD_ADDR_VAR 0 6
26701: PUSH
26702: LD_VAR 0 13
26706: PUSH
26707: FOR_IN
26708: IFFALSE 26766
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26710: LD_VAR 0 1
26714: PPUSH
26715: LD_STRING M
26717: PUSH
26718: LD_VAR 0 6
26722: PUSH
26723: LD_INT 1
26725: ARRAY
26726: PUSH
26727: LD_VAR 0 6
26731: PUSH
26732: LD_INT 2
26734: ARRAY
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: LD_INT 0
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: PUSH
26757: EMPTY
26758: LIST
26759: PPUSH
26760: CALL_OW 447
26764: GO 26707
26766: POP
26767: POP
// end ;
26768: LD_VAR 0 5
26772: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26773: LD_EXP 104
26777: NOT
26778: IFFALSE 26828
26780: GO 26782
26782: DISABLE
// begin initHack := true ;
26783: LD_ADDR_EXP 104
26787: PUSH
26788: LD_INT 1
26790: ST_TO_ADDR
// hackTanks := [ ] ;
26791: LD_ADDR_EXP 105
26795: PUSH
26796: EMPTY
26797: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26798: LD_ADDR_EXP 106
26802: PUSH
26803: EMPTY
26804: ST_TO_ADDR
// hackLimit := 3 ;
26805: LD_ADDR_EXP 107
26809: PUSH
26810: LD_INT 3
26812: ST_TO_ADDR
// hackDist := 12 ;
26813: LD_ADDR_EXP 108
26817: PUSH
26818: LD_INT 12
26820: ST_TO_ADDR
// hackCounter := [ ] ;
26821: LD_ADDR_EXP 109
26825: PUSH
26826: EMPTY
26827: ST_TO_ADDR
// end ;
26828: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26829: LD_EXP 104
26833: PUSH
26834: LD_INT 34
26836: PUSH
26837: LD_EXP 116
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PPUSH
26846: CALL_OW 69
26850: AND
26851: IFFALSE 27106
26853: GO 26855
26855: DISABLE
26856: LD_INT 0
26858: PPUSH
26859: PPUSH
// begin enable ;
26860: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26861: LD_ADDR_VAR 0 1
26865: PUSH
26866: LD_INT 34
26868: PUSH
26869: LD_EXP 116
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PPUSH
26878: CALL_OW 69
26882: PUSH
26883: FOR_IN
26884: IFFALSE 27104
// begin if not i in hackTanks then
26886: LD_VAR 0 1
26890: PUSH
26891: LD_EXP 105
26895: IN
26896: NOT
26897: IFFALSE 26980
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26899: LD_ADDR_EXP 105
26903: PUSH
26904: LD_EXP 105
26908: PPUSH
26909: LD_EXP 105
26913: PUSH
26914: LD_INT 1
26916: PLUS
26917: PPUSH
26918: LD_VAR 0 1
26922: PPUSH
26923: CALL_OW 1
26927: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26928: LD_ADDR_EXP 106
26932: PUSH
26933: LD_EXP 106
26937: PPUSH
26938: LD_EXP 106
26942: PUSH
26943: LD_INT 1
26945: PLUS
26946: PPUSH
26947: EMPTY
26948: PPUSH
26949: CALL_OW 1
26953: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26954: LD_ADDR_EXP 109
26958: PUSH
26959: LD_EXP 109
26963: PPUSH
26964: LD_EXP 109
26968: PUSH
26969: LD_INT 1
26971: PLUS
26972: PPUSH
26973: EMPTY
26974: PPUSH
26975: CALL_OW 1
26979: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26980: LD_VAR 0 1
26984: PPUSH
26985: CALL_OW 302
26989: NOT
26990: IFFALSE 27003
// begin HackUnlinkAll ( i ) ;
26992: LD_VAR 0 1
26996: PPUSH
26997: CALL 27109 0 1
// continue ;
27001: GO 26883
// end ; HackCheckCapturedStatus ( i ) ;
27003: LD_VAR 0 1
27007: PPUSH
27008: CALL 27552 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27012: LD_ADDR_VAR 0 2
27016: PUSH
27017: LD_INT 81
27019: PUSH
27020: LD_VAR 0 1
27024: PPUSH
27025: CALL_OW 255
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 33
27036: PUSH
27037: LD_INT 3
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 91
27046: PUSH
27047: LD_VAR 0 1
27051: PUSH
27052: LD_EXP 108
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 50
27064: PUSH
27065: EMPTY
27066: LIST
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: PPUSH
27074: CALL_OW 69
27078: ST_TO_ADDR
// if not tmp then
27079: LD_VAR 0 2
27083: NOT
27084: IFFALSE 27088
// continue ;
27086: GO 26883
// HackLink ( i , tmp ) ;
27088: LD_VAR 0 1
27092: PPUSH
27093: LD_VAR 0 2
27097: PPUSH
27098: CALL 27245 0 2
// end ;
27102: GO 26883
27104: POP
27105: POP
// end ;
27106: PPOPN 2
27108: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27109: LD_INT 0
27111: PPUSH
27112: PPUSH
27113: PPUSH
// if not hack in hackTanks then
27114: LD_VAR 0 1
27118: PUSH
27119: LD_EXP 105
27123: IN
27124: NOT
27125: IFFALSE 27129
// exit ;
27127: GO 27240
// index := GetElementIndex ( hackTanks , hack ) ;
27129: LD_ADDR_VAR 0 4
27133: PUSH
27134: LD_EXP 105
27138: PPUSH
27139: LD_VAR 0 1
27143: PPUSH
27144: CALL 34867 0 2
27148: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27149: LD_EXP 106
27153: PUSH
27154: LD_VAR 0 4
27158: ARRAY
27159: IFFALSE 27240
// begin for i in hackTanksCaptured [ index ] do
27161: LD_ADDR_VAR 0 3
27165: PUSH
27166: LD_EXP 106
27170: PUSH
27171: LD_VAR 0 4
27175: ARRAY
27176: PUSH
27177: FOR_IN
27178: IFFALSE 27204
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27180: LD_VAR 0 3
27184: PUSH
27185: LD_INT 1
27187: ARRAY
27188: PPUSH
27189: LD_VAR 0 3
27193: PUSH
27194: LD_INT 2
27196: ARRAY
27197: PPUSH
27198: CALL_OW 235
27202: GO 27177
27204: POP
27205: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27206: LD_ADDR_EXP 106
27210: PUSH
27211: LD_EXP 106
27215: PPUSH
27216: LD_VAR 0 4
27220: PPUSH
27221: EMPTY
27222: PPUSH
27223: CALL_OW 1
27227: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27228: LD_VAR 0 1
27232: PPUSH
27233: LD_INT 0
27235: PPUSH
27236: CALL_OW 505
// end ; end ;
27240: LD_VAR 0 2
27244: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27245: LD_INT 0
27247: PPUSH
27248: PPUSH
27249: PPUSH
// if not hack in hackTanks or not vehicles then
27250: LD_VAR 0 1
27254: PUSH
27255: LD_EXP 105
27259: IN
27260: NOT
27261: PUSH
27262: LD_VAR 0 2
27266: NOT
27267: OR
27268: IFFALSE 27272
// exit ;
27270: GO 27547
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27272: LD_ADDR_VAR 0 2
27276: PUSH
27277: LD_VAR 0 1
27281: PPUSH
27282: LD_VAR 0 2
27286: PPUSH
27287: LD_INT 1
27289: PPUSH
27290: LD_INT 1
27292: PPUSH
27293: CALL 35517 0 4
27297: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27298: LD_ADDR_VAR 0 5
27302: PUSH
27303: LD_EXP 105
27307: PPUSH
27308: LD_VAR 0 1
27312: PPUSH
27313: CALL 34867 0 2
27317: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27318: LD_EXP 106
27322: PUSH
27323: LD_VAR 0 5
27327: ARRAY
27328: PUSH
27329: LD_EXP 107
27333: LESS
27334: IFFALSE 27523
// begin for i := 1 to vehicles do
27336: LD_ADDR_VAR 0 4
27340: PUSH
27341: DOUBLE
27342: LD_INT 1
27344: DEC
27345: ST_TO_ADDR
27346: LD_VAR 0 2
27350: PUSH
27351: FOR_TO
27352: IFFALSE 27521
// begin if hackTanksCaptured [ index ] = hackLimit then
27354: LD_EXP 106
27358: PUSH
27359: LD_VAR 0 5
27363: ARRAY
27364: PUSH
27365: LD_EXP 107
27369: EQUAL
27370: IFFALSE 27374
// break ;
27372: GO 27521
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27374: LD_ADDR_EXP 109
27378: PUSH
27379: LD_EXP 109
27383: PPUSH
27384: LD_VAR 0 5
27388: PPUSH
27389: LD_EXP 109
27393: PUSH
27394: LD_VAR 0 5
27398: ARRAY
27399: PUSH
27400: LD_INT 1
27402: PLUS
27403: PPUSH
27404: CALL_OW 1
27408: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27409: LD_ADDR_EXP 106
27413: PUSH
27414: LD_EXP 106
27418: PPUSH
27419: LD_VAR 0 5
27423: PUSH
27424: LD_EXP 106
27428: PUSH
27429: LD_VAR 0 5
27433: ARRAY
27434: PUSH
27435: LD_INT 1
27437: PLUS
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PPUSH
27443: LD_VAR 0 2
27447: PUSH
27448: LD_VAR 0 4
27452: ARRAY
27453: PUSH
27454: LD_VAR 0 2
27458: PUSH
27459: LD_VAR 0 4
27463: ARRAY
27464: PPUSH
27465: CALL_OW 255
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PPUSH
27474: CALL 35082 0 3
27478: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27479: LD_VAR 0 2
27483: PUSH
27484: LD_VAR 0 4
27488: ARRAY
27489: PPUSH
27490: LD_VAR 0 1
27494: PPUSH
27495: CALL_OW 255
27499: PPUSH
27500: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27504: LD_VAR 0 2
27508: PUSH
27509: LD_VAR 0 4
27513: ARRAY
27514: PPUSH
27515: CALL_OW 141
// end ;
27519: GO 27351
27521: POP
27522: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27523: LD_VAR 0 1
27527: PPUSH
27528: LD_EXP 106
27532: PUSH
27533: LD_VAR 0 5
27537: ARRAY
27538: PUSH
27539: LD_INT 0
27541: PLUS
27542: PPUSH
27543: CALL_OW 505
// end ;
27547: LD_VAR 0 3
27551: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27552: LD_INT 0
27554: PPUSH
27555: PPUSH
27556: PPUSH
27557: PPUSH
// if not hack in hackTanks then
27558: LD_VAR 0 1
27562: PUSH
27563: LD_EXP 105
27567: IN
27568: NOT
27569: IFFALSE 27573
// exit ;
27571: GO 27813
// index := GetElementIndex ( hackTanks , hack ) ;
27573: LD_ADDR_VAR 0 4
27577: PUSH
27578: LD_EXP 105
27582: PPUSH
27583: LD_VAR 0 1
27587: PPUSH
27588: CALL 34867 0 2
27592: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27593: LD_ADDR_VAR 0 3
27597: PUSH
27598: DOUBLE
27599: LD_EXP 106
27603: PUSH
27604: LD_VAR 0 4
27608: ARRAY
27609: INC
27610: ST_TO_ADDR
27611: LD_INT 1
27613: PUSH
27614: FOR_DOWNTO
27615: IFFALSE 27787
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27617: LD_ADDR_VAR 0 5
27621: PUSH
27622: LD_EXP 106
27626: PUSH
27627: LD_VAR 0 4
27631: ARRAY
27632: PUSH
27633: LD_VAR 0 3
27637: ARRAY
27638: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27639: LD_VAR 0 5
27643: PUSH
27644: LD_INT 1
27646: ARRAY
27647: PPUSH
27648: CALL_OW 302
27652: NOT
27653: PUSH
27654: LD_VAR 0 5
27658: PUSH
27659: LD_INT 1
27661: ARRAY
27662: PPUSH
27663: CALL_OW 255
27667: PUSH
27668: LD_VAR 0 1
27672: PPUSH
27673: CALL_OW 255
27677: NONEQUAL
27678: OR
27679: IFFALSE 27785
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27681: LD_VAR 0 5
27685: PUSH
27686: LD_INT 1
27688: ARRAY
27689: PPUSH
27690: CALL_OW 305
27694: PUSH
27695: LD_VAR 0 5
27699: PUSH
27700: LD_INT 1
27702: ARRAY
27703: PPUSH
27704: CALL_OW 255
27708: PUSH
27709: LD_VAR 0 1
27713: PPUSH
27714: CALL_OW 255
27718: EQUAL
27719: AND
27720: IFFALSE 27744
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27722: LD_VAR 0 5
27726: PUSH
27727: LD_INT 1
27729: ARRAY
27730: PPUSH
27731: LD_VAR 0 5
27735: PUSH
27736: LD_INT 2
27738: ARRAY
27739: PPUSH
27740: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27744: LD_ADDR_EXP 106
27748: PUSH
27749: LD_EXP 106
27753: PPUSH
27754: LD_VAR 0 4
27758: PPUSH
27759: LD_EXP 106
27763: PUSH
27764: LD_VAR 0 4
27768: ARRAY
27769: PPUSH
27770: LD_VAR 0 3
27774: PPUSH
27775: CALL_OW 3
27779: PPUSH
27780: CALL_OW 1
27784: ST_TO_ADDR
// end ; end ;
27785: GO 27614
27787: POP
27788: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27789: LD_VAR 0 1
27793: PPUSH
27794: LD_EXP 106
27798: PUSH
27799: LD_VAR 0 4
27803: ARRAY
27804: PUSH
27805: LD_INT 0
27807: PLUS
27808: PPUSH
27809: CALL_OW 505
// end ;
27813: LD_VAR 0 2
27817: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27818: LD_INT 0
27820: PPUSH
27821: PPUSH
27822: PPUSH
27823: PPUSH
// if not hack in hackTanks then
27824: LD_VAR 0 1
27828: PUSH
27829: LD_EXP 105
27833: IN
27834: NOT
27835: IFFALSE 27839
// exit ;
27837: GO 27924
// index := GetElementIndex ( hackTanks , hack ) ;
27839: LD_ADDR_VAR 0 5
27843: PUSH
27844: LD_EXP 105
27848: PPUSH
27849: LD_VAR 0 1
27853: PPUSH
27854: CALL 34867 0 2
27858: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27859: LD_ADDR_VAR 0 4
27863: PUSH
27864: DOUBLE
27865: LD_INT 1
27867: DEC
27868: ST_TO_ADDR
27869: LD_EXP 106
27873: PUSH
27874: LD_VAR 0 5
27878: ARRAY
27879: PUSH
27880: FOR_TO
27881: IFFALSE 27922
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27883: LD_EXP 106
27887: PUSH
27888: LD_VAR 0 5
27892: ARRAY
27893: PUSH
27894: LD_VAR 0 4
27898: ARRAY
27899: PUSH
27900: LD_INT 1
27902: ARRAY
27903: PUSH
27904: LD_VAR 0 2
27908: EQUAL
27909: IFFALSE 27920
// KillUnit ( vehicle ) ;
27911: LD_VAR 0 2
27915: PPUSH
27916: CALL_OW 66
27920: GO 27880
27922: POP
27923: POP
// end ;
27924: LD_VAR 0 3
27928: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27929: LD_EXP 110
27933: NOT
27934: IFFALSE 27969
27936: GO 27938
27938: DISABLE
// begin initMiner := true ;
27939: LD_ADDR_EXP 110
27943: PUSH
27944: LD_INT 1
27946: ST_TO_ADDR
// minersList := [ ] ;
27947: LD_ADDR_EXP 111
27951: PUSH
27952: EMPTY
27953: ST_TO_ADDR
// minerMinesList := [ ] ;
27954: LD_ADDR_EXP 112
27958: PUSH
27959: EMPTY
27960: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27961: LD_ADDR_EXP 113
27965: PUSH
27966: LD_INT 5
27968: ST_TO_ADDR
// end ;
27969: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27970: LD_EXP 110
27974: PUSH
27975: LD_INT 34
27977: PUSH
27978: LD_EXP 121
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PPUSH
27987: CALL_OW 69
27991: AND
27992: IFFALSE 28455
27994: GO 27996
27996: DISABLE
27997: LD_INT 0
27999: PPUSH
28000: PPUSH
28001: PPUSH
28002: PPUSH
// begin enable ;
28003: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28004: LD_ADDR_VAR 0 1
28008: PUSH
28009: LD_INT 34
28011: PUSH
28012: LD_EXP 121
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PPUSH
28021: CALL_OW 69
28025: PUSH
28026: FOR_IN
28027: IFFALSE 28099
// begin if not i in minersList then
28029: LD_VAR 0 1
28033: PUSH
28034: LD_EXP 111
28038: IN
28039: NOT
28040: IFFALSE 28097
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28042: LD_ADDR_EXP 111
28046: PUSH
28047: LD_EXP 111
28051: PPUSH
28052: LD_EXP 111
28056: PUSH
28057: LD_INT 1
28059: PLUS
28060: PPUSH
28061: LD_VAR 0 1
28065: PPUSH
28066: CALL_OW 1
28070: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28071: LD_ADDR_EXP 112
28075: PUSH
28076: LD_EXP 112
28080: PPUSH
28081: LD_EXP 112
28085: PUSH
28086: LD_INT 1
28088: PLUS
28089: PPUSH
28090: EMPTY
28091: PPUSH
28092: CALL_OW 1
28096: ST_TO_ADDR
// end end ;
28097: GO 28026
28099: POP
28100: POP
// for i := minerMinesList downto 1 do
28101: LD_ADDR_VAR 0 1
28105: PUSH
28106: DOUBLE
28107: LD_EXP 112
28111: INC
28112: ST_TO_ADDR
28113: LD_INT 1
28115: PUSH
28116: FOR_DOWNTO
28117: IFFALSE 28453
// begin if IsLive ( minersList [ i ] ) then
28119: LD_EXP 111
28123: PUSH
28124: LD_VAR 0 1
28128: ARRAY
28129: PPUSH
28130: CALL_OW 300
28134: IFFALSE 28162
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28136: LD_EXP 111
28140: PUSH
28141: LD_VAR 0 1
28145: ARRAY
28146: PPUSH
28147: LD_EXP 112
28151: PUSH
28152: LD_VAR 0 1
28156: ARRAY
28157: PPUSH
28158: CALL_OW 505
// if not minerMinesList [ i ] then
28162: LD_EXP 112
28166: PUSH
28167: LD_VAR 0 1
28171: ARRAY
28172: NOT
28173: IFFALSE 28177
// continue ;
28175: GO 28116
// for j := minerMinesList [ i ] downto 1 do
28177: LD_ADDR_VAR 0 2
28181: PUSH
28182: DOUBLE
28183: LD_EXP 112
28187: PUSH
28188: LD_VAR 0 1
28192: ARRAY
28193: INC
28194: ST_TO_ADDR
28195: LD_INT 1
28197: PUSH
28198: FOR_DOWNTO
28199: IFFALSE 28449
// begin side := GetSide ( minersList [ i ] ) ;
28201: LD_ADDR_VAR 0 3
28205: PUSH
28206: LD_EXP 111
28210: PUSH
28211: LD_VAR 0 1
28215: ARRAY
28216: PPUSH
28217: CALL_OW 255
28221: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28222: LD_ADDR_VAR 0 4
28226: PUSH
28227: LD_EXP 112
28231: PUSH
28232: LD_VAR 0 1
28236: ARRAY
28237: PUSH
28238: LD_VAR 0 2
28242: ARRAY
28243: PUSH
28244: LD_INT 1
28246: ARRAY
28247: PPUSH
28248: LD_EXP 112
28252: PUSH
28253: LD_VAR 0 1
28257: ARRAY
28258: PUSH
28259: LD_VAR 0 2
28263: ARRAY
28264: PUSH
28265: LD_INT 2
28267: ARRAY
28268: PPUSH
28269: CALL_OW 428
28273: ST_TO_ADDR
// if not tmp then
28274: LD_VAR 0 4
28278: NOT
28279: IFFALSE 28283
// continue ;
28281: GO 28198
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28283: LD_VAR 0 4
28287: PUSH
28288: LD_INT 81
28290: PUSH
28291: LD_VAR 0 3
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PPUSH
28300: CALL_OW 69
28304: IN
28305: PUSH
28306: LD_EXP 112
28310: PUSH
28311: LD_VAR 0 1
28315: ARRAY
28316: PUSH
28317: LD_VAR 0 2
28321: ARRAY
28322: PUSH
28323: LD_INT 1
28325: ARRAY
28326: PPUSH
28327: LD_EXP 112
28331: PUSH
28332: LD_VAR 0 1
28336: ARRAY
28337: PUSH
28338: LD_VAR 0 2
28342: ARRAY
28343: PUSH
28344: LD_INT 2
28346: ARRAY
28347: PPUSH
28348: CALL_OW 458
28352: AND
28353: IFFALSE 28447
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28355: LD_EXP 112
28359: PUSH
28360: LD_VAR 0 1
28364: ARRAY
28365: PUSH
28366: LD_VAR 0 2
28370: ARRAY
28371: PUSH
28372: LD_INT 1
28374: ARRAY
28375: PPUSH
28376: LD_EXP 112
28380: PUSH
28381: LD_VAR 0 1
28385: ARRAY
28386: PUSH
28387: LD_VAR 0 2
28391: ARRAY
28392: PUSH
28393: LD_INT 2
28395: ARRAY
28396: PPUSH
28397: LD_VAR 0 3
28401: PPUSH
28402: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28406: LD_ADDR_EXP 112
28410: PUSH
28411: LD_EXP 112
28415: PPUSH
28416: LD_VAR 0 1
28420: PPUSH
28421: LD_EXP 112
28425: PUSH
28426: LD_VAR 0 1
28430: ARRAY
28431: PPUSH
28432: LD_VAR 0 2
28436: PPUSH
28437: CALL_OW 3
28441: PPUSH
28442: CALL_OW 1
28446: ST_TO_ADDR
// end ; end ;
28447: GO 28198
28449: POP
28450: POP
// end ;
28451: GO 28116
28453: POP
28454: POP
// end ;
28455: PPOPN 4
28457: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28458: LD_INT 0
28460: PPUSH
28461: PPUSH
// result := false ;
28462: LD_ADDR_VAR 0 4
28466: PUSH
28467: LD_INT 0
28469: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28470: LD_VAR 0 1
28474: PPUSH
28475: CALL_OW 264
28479: PUSH
28480: LD_EXP 121
28484: EQUAL
28485: NOT
28486: IFFALSE 28490
// exit ;
28488: GO 28730
// index := GetElementIndex ( minersList , unit ) ;
28490: LD_ADDR_VAR 0 5
28494: PUSH
28495: LD_EXP 111
28499: PPUSH
28500: LD_VAR 0 1
28504: PPUSH
28505: CALL 34867 0 2
28509: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28510: LD_EXP 112
28514: PUSH
28515: LD_VAR 0 5
28519: ARRAY
28520: PUSH
28521: LD_EXP 113
28525: GREATEREQUAL
28526: IFFALSE 28530
// exit ;
28528: GO 28730
// ComMoveXY ( unit , x , y ) ;
28530: LD_VAR 0 1
28534: PPUSH
28535: LD_VAR 0 2
28539: PPUSH
28540: LD_VAR 0 3
28544: PPUSH
28545: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28549: LD_INT 35
28551: PPUSH
28552: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28556: LD_VAR 0 1
28560: PPUSH
28561: LD_VAR 0 2
28565: PPUSH
28566: LD_VAR 0 3
28570: PPUSH
28571: CALL 66153 0 3
28575: NOT
28576: PUSH
28577: LD_VAR 0 1
28581: PPUSH
28582: CALL_OW 314
28586: AND
28587: IFFALSE 28591
// exit ;
28589: GO 28730
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28591: LD_VAR 0 2
28595: PPUSH
28596: LD_VAR 0 3
28600: PPUSH
28601: CALL_OW 428
28605: PUSH
28606: LD_VAR 0 1
28610: EQUAL
28611: PUSH
28612: LD_VAR 0 1
28616: PPUSH
28617: CALL_OW 314
28621: NOT
28622: AND
28623: IFFALSE 28549
// PlaySoundXY ( x , y , PlantMine ) ;
28625: LD_VAR 0 2
28629: PPUSH
28630: LD_VAR 0 3
28634: PPUSH
28635: LD_STRING PlantMine
28637: PPUSH
28638: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28642: LD_VAR 0 2
28646: PPUSH
28647: LD_VAR 0 3
28651: PPUSH
28652: LD_VAR 0 1
28656: PPUSH
28657: CALL_OW 255
28661: PPUSH
28662: LD_INT 0
28664: PPUSH
28665: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28669: LD_ADDR_EXP 112
28673: PUSH
28674: LD_EXP 112
28678: PPUSH
28679: LD_VAR 0 5
28683: PUSH
28684: LD_EXP 112
28688: PUSH
28689: LD_VAR 0 5
28693: ARRAY
28694: PUSH
28695: LD_INT 1
28697: PLUS
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PPUSH
28703: LD_VAR 0 2
28707: PUSH
28708: LD_VAR 0 3
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PPUSH
28717: CALL 35082 0 3
28721: ST_TO_ADDR
// result := true ;
28722: LD_ADDR_VAR 0 4
28726: PUSH
28727: LD_INT 1
28729: ST_TO_ADDR
// end ;
28730: LD_VAR 0 4
28734: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28735: LD_INT 0
28737: PPUSH
28738: PPUSH
28739: PPUSH
// if not unit in minersList then
28740: LD_VAR 0 1
28744: PUSH
28745: LD_EXP 111
28749: IN
28750: NOT
28751: IFFALSE 28755
// exit ;
28753: GO 29147
// index := GetElementIndex ( minersList , unit ) ;
28755: LD_ADDR_VAR 0 6
28759: PUSH
28760: LD_EXP 111
28764: PPUSH
28765: LD_VAR 0 1
28769: PPUSH
28770: CALL 34867 0 2
28774: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28775: LD_ADDR_VAR 0 5
28779: PUSH
28780: DOUBLE
28781: LD_EXP 112
28785: PUSH
28786: LD_VAR 0 6
28790: ARRAY
28791: INC
28792: ST_TO_ADDR
28793: LD_INT 1
28795: PUSH
28796: FOR_DOWNTO
28797: IFFALSE 28958
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28799: LD_EXP 112
28803: PUSH
28804: LD_VAR 0 6
28808: ARRAY
28809: PUSH
28810: LD_VAR 0 5
28814: ARRAY
28815: PUSH
28816: LD_INT 1
28818: ARRAY
28819: PUSH
28820: LD_VAR 0 2
28824: EQUAL
28825: PUSH
28826: LD_EXP 112
28830: PUSH
28831: LD_VAR 0 6
28835: ARRAY
28836: PUSH
28837: LD_VAR 0 5
28841: ARRAY
28842: PUSH
28843: LD_INT 2
28845: ARRAY
28846: PUSH
28847: LD_VAR 0 3
28851: EQUAL
28852: AND
28853: IFFALSE 28956
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28855: LD_EXP 112
28859: PUSH
28860: LD_VAR 0 6
28864: ARRAY
28865: PUSH
28866: LD_VAR 0 5
28870: ARRAY
28871: PUSH
28872: LD_INT 1
28874: ARRAY
28875: PPUSH
28876: LD_EXP 112
28880: PUSH
28881: LD_VAR 0 6
28885: ARRAY
28886: PUSH
28887: LD_VAR 0 5
28891: ARRAY
28892: PUSH
28893: LD_INT 2
28895: ARRAY
28896: PPUSH
28897: LD_VAR 0 1
28901: PPUSH
28902: CALL_OW 255
28906: PPUSH
28907: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28911: LD_ADDR_EXP 112
28915: PUSH
28916: LD_EXP 112
28920: PPUSH
28921: LD_VAR 0 6
28925: PPUSH
28926: LD_EXP 112
28930: PUSH
28931: LD_VAR 0 6
28935: ARRAY
28936: PPUSH
28937: LD_VAR 0 5
28941: PPUSH
28942: CALL_OW 3
28946: PPUSH
28947: CALL_OW 1
28951: ST_TO_ADDR
// exit ;
28952: POP
28953: POP
28954: GO 29147
// end ; end ;
28956: GO 28796
28958: POP
28959: POP
// for i := minerMinesList [ index ] downto 1 do
28960: LD_ADDR_VAR 0 5
28964: PUSH
28965: DOUBLE
28966: LD_EXP 112
28970: PUSH
28971: LD_VAR 0 6
28975: ARRAY
28976: INC
28977: ST_TO_ADDR
28978: LD_INT 1
28980: PUSH
28981: FOR_DOWNTO
28982: IFFALSE 29145
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28984: LD_EXP 112
28988: PUSH
28989: LD_VAR 0 6
28993: ARRAY
28994: PUSH
28995: LD_VAR 0 5
28999: ARRAY
29000: PUSH
29001: LD_INT 1
29003: ARRAY
29004: PPUSH
29005: LD_EXP 112
29009: PUSH
29010: LD_VAR 0 6
29014: ARRAY
29015: PUSH
29016: LD_VAR 0 5
29020: ARRAY
29021: PUSH
29022: LD_INT 2
29024: ARRAY
29025: PPUSH
29026: LD_VAR 0 2
29030: PPUSH
29031: LD_VAR 0 3
29035: PPUSH
29036: CALL_OW 298
29040: PUSH
29041: LD_INT 6
29043: LESS
29044: IFFALSE 29143
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29046: LD_EXP 112
29050: PUSH
29051: LD_VAR 0 6
29055: ARRAY
29056: PUSH
29057: LD_VAR 0 5
29061: ARRAY
29062: PUSH
29063: LD_INT 1
29065: ARRAY
29066: PPUSH
29067: LD_EXP 112
29071: PUSH
29072: LD_VAR 0 6
29076: ARRAY
29077: PUSH
29078: LD_VAR 0 5
29082: ARRAY
29083: PUSH
29084: LD_INT 2
29086: ARRAY
29087: PPUSH
29088: LD_VAR 0 1
29092: PPUSH
29093: CALL_OW 255
29097: PPUSH
29098: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29102: LD_ADDR_EXP 112
29106: PUSH
29107: LD_EXP 112
29111: PPUSH
29112: LD_VAR 0 6
29116: PPUSH
29117: LD_EXP 112
29121: PUSH
29122: LD_VAR 0 6
29126: ARRAY
29127: PPUSH
29128: LD_VAR 0 5
29132: PPUSH
29133: CALL_OW 3
29137: PPUSH
29138: CALL_OW 1
29142: ST_TO_ADDR
// end ; end ;
29143: GO 28981
29145: POP
29146: POP
// end ;
29147: LD_VAR 0 4
29151: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29152: LD_INT 0
29154: PPUSH
29155: PPUSH
29156: PPUSH
29157: PPUSH
29158: PPUSH
29159: PPUSH
29160: PPUSH
29161: PPUSH
29162: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29163: LD_VAR 0 1
29167: PPUSH
29168: CALL_OW 264
29172: PUSH
29173: LD_EXP 121
29177: EQUAL
29178: NOT
29179: PUSH
29180: LD_VAR 0 1
29184: PUSH
29185: LD_EXP 111
29189: IN
29190: NOT
29191: OR
29192: IFFALSE 29196
// exit ;
29194: GO 29518
// index := GetElementIndex ( minersList , unit ) ;
29196: LD_ADDR_VAR 0 6
29200: PUSH
29201: LD_EXP 111
29205: PPUSH
29206: LD_VAR 0 1
29210: PPUSH
29211: CALL 34867 0 2
29215: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29216: LD_ADDR_VAR 0 8
29220: PUSH
29221: LD_EXP 113
29225: PUSH
29226: LD_EXP 112
29230: PUSH
29231: LD_VAR 0 6
29235: ARRAY
29236: MINUS
29237: ST_TO_ADDR
// if not minesFreeAmount then
29238: LD_VAR 0 8
29242: NOT
29243: IFFALSE 29247
// exit ;
29245: GO 29518
// tmp := [ ] ;
29247: LD_ADDR_VAR 0 7
29251: PUSH
29252: EMPTY
29253: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29254: LD_ADDR_VAR 0 5
29258: PUSH
29259: DOUBLE
29260: LD_INT 1
29262: DEC
29263: ST_TO_ADDR
29264: LD_VAR 0 8
29268: PUSH
29269: FOR_TO
29270: IFFALSE 29465
// begin _d := rand ( 0 , 5 ) ;
29272: LD_ADDR_VAR 0 11
29276: PUSH
29277: LD_INT 0
29279: PPUSH
29280: LD_INT 5
29282: PPUSH
29283: CALL_OW 12
29287: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29288: LD_ADDR_VAR 0 12
29292: PUSH
29293: LD_INT 2
29295: PPUSH
29296: LD_INT 6
29298: PPUSH
29299: CALL_OW 12
29303: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29304: LD_ADDR_VAR 0 9
29308: PUSH
29309: LD_VAR 0 2
29313: PPUSH
29314: LD_VAR 0 11
29318: PPUSH
29319: LD_VAR 0 12
29323: PPUSH
29324: CALL_OW 272
29328: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29329: LD_ADDR_VAR 0 10
29333: PUSH
29334: LD_VAR 0 3
29338: PPUSH
29339: LD_VAR 0 11
29343: PPUSH
29344: LD_VAR 0 12
29348: PPUSH
29349: CALL_OW 273
29353: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29354: LD_VAR 0 9
29358: PPUSH
29359: LD_VAR 0 10
29363: PPUSH
29364: CALL_OW 488
29368: PUSH
29369: LD_VAR 0 9
29373: PUSH
29374: LD_VAR 0 10
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_VAR 0 7
29387: IN
29388: NOT
29389: AND
29390: PUSH
29391: LD_VAR 0 9
29395: PPUSH
29396: LD_VAR 0 10
29400: PPUSH
29401: CALL_OW 458
29405: NOT
29406: AND
29407: IFFALSE 29449
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29409: LD_ADDR_VAR 0 7
29413: PUSH
29414: LD_VAR 0 7
29418: PPUSH
29419: LD_VAR 0 7
29423: PUSH
29424: LD_INT 1
29426: PLUS
29427: PPUSH
29428: LD_VAR 0 9
29432: PUSH
29433: LD_VAR 0 10
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PPUSH
29442: CALL_OW 1
29446: ST_TO_ADDR
29447: GO 29463
// i := i - 1 ;
29449: LD_ADDR_VAR 0 5
29453: PUSH
29454: LD_VAR 0 5
29458: PUSH
29459: LD_INT 1
29461: MINUS
29462: ST_TO_ADDR
// end ;
29463: GO 29269
29465: POP
29466: POP
// for i in tmp do
29467: LD_ADDR_VAR 0 5
29471: PUSH
29472: LD_VAR 0 7
29476: PUSH
29477: FOR_IN
29478: IFFALSE 29516
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29480: LD_VAR 0 1
29484: PPUSH
29485: LD_VAR 0 5
29489: PUSH
29490: LD_INT 1
29492: ARRAY
29493: PPUSH
29494: LD_VAR 0 5
29498: PUSH
29499: LD_INT 2
29501: ARRAY
29502: PPUSH
29503: CALL 28458 0 3
29507: NOT
29508: IFFALSE 29514
// exit ;
29510: POP
29511: POP
29512: GO 29518
29514: GO 29477
29516: POP
29517: POP
// end ;
29518: LD_VAR 0 4
29522: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29523: LD_INT 0
29525: PPUSH
29526: PPUSH
29527: PPUSH
29528: PPUSH
29529: PPUSH
29530: PPUSH
29531: PPUSH
// if not GetClass ( unit ) = class_sniper then
29532: LD_VAR 0 1
29536: PPUSH
29537: CALL_OW 257
29541: PUSH
29542: LD_INT 5
29544: EQUAL
29545: NOT
29546: IFFALSE 29550
// exit ;
29548: GO 29938
// dist := 8 ;
29550: LD_ADDR_VAR 0 5
29554: PUSH
29555: LD_INT 8
29557: ST_TO_ADDR
// viewRange := 12 ;
29558: LD_ADDR_VAR 0 7
29562: PUSH
29563: LD_INT 12
29565: ST_TO_ADDR
// side := GetSide ( unit ) ;
29566: LD_ADDR_VAR 0 6
29570: PUSH
29571: LD_VAR 0 1
29575: PPUSH
29576: CALL_OW 255
29580: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29581: LD_INT 61
29583: PPUSH
29584: LD_VAR 0 6
29588: PPUSH
29589: CALL_OW 321
29593: PUSH
29594: LD_INT 2
29596: EQUAL
29597: IFFALSE 29607
// viewRange := 16 ;
29599: LD_ADDR_VAR 0 7
29603: PUSH
29604: LD_INT 16
29606: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29607: LD_VAR 0 1
29611: PPUSH
29612: LD_VAR 0 2
29616: PPUSH
29617: LD_VAR 0 3
29621: PPUSH
29622: CALL_OW 297
29626: PUSH
29627: LD_VAR 0 5
29631: GREATER
29632: IFFALSE 29711
// begin ComMoveXY ( unit , x , y ) ;
29634: LD_VAR 0 1
29638: PPUSH
29639: LD_VAR 0 2
29643: PPUSH
29644: LD_VAR 0 3
29648: PPUSH
29649: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29653: LD_INT 35
29655: PPUSH
29656: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29660: LD_VAR 0 1
29664: PPUSH
29665: LD_VAR 0 2
29669: PPUSH
29670: LD_VAR 0 3
29674: PPUSH
29675: CALL 66153 0 3
29679: NOT
29680: IFFALSE 29684
// exit ;
29682: GO 29938
// until GetDistUnitXY ( unit , x , y ) < dist ;
29684: LD_VAR 0 1
29688: PPUSH
29689: LD_VAR 0 2
29693: PPUSH
29694: LD_VAR 0 3
29698: PPUSH
29699: CALL_OW 297
29703: PUSH
29704: LD_VAR 0 5
29708: LESS
29709: IFFALSE 29653
// end ; ComTurnXY ( unit , x , y ) ;
29711: LD_VAR 0 1
29715: PPUSH
29716: LD_VAR 0 2
29720: PPUSH
29721: LD_VAR 0 3
29725: PPUSH
29726: CALL_OW 118
// wait ( 5 ) ;
29730: LD_INT 5
29732: PPUSH
29733: CALL_OW 67
// _d := GetDir ( unit ) ;
29737: LD_ADDR_VAR 0 10
29741: PUSH
29742: LD_VAR 0 1
29746: PPUSH
29747: CALL_OW 254
29751: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29752: LD_ADDR_VAR 0 8
29756: PUSH
29757: LD_VAR 0 1
29761: PPUSH
29762: CALL_OW 250
29766: PPUSH
29767: LD_VAR 0 10
29771: PPUSH
29772: LD_VAR 0 5
29776: PPUSH
29777: CALL_OW 272
29781: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29782: LD_ADDR_VAR 0 9
29786: PUSH
29787: LD_VAR 0 1
29791: PPUSH
29792: CALL_OW 251
29796: PPUSH
29797: LD_VAR 0 10
29801: PPUSH
29802: LD_VAR 0 5
29806: PPUSH
29807: CALL_OW 273
29811: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29812: LD_VAR 0 8
29816: PPUSH
29817: LD_VAR 0 9
29821: PPUSH
29822: CALL_OW 488
29826: NOT
29827: IFFALSE 29831
// exit ;
29829: GO 29938
// ComAnimCustom ( unit , 1 ) ;
29831: LD_VAR 0 1
29835: PPUSH
29836: LD_INT 1
29838: PPUSH
29839: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29843: LD_VAR 0 8
29847: PPUSH
29848: LD_VAR 0 9
29852: PPUSH
29853: LD_VAR 0 6
29857: PPUSH
29858: LD_VAR 0 7
29862: PPUSH
29863: CALL_OW 330
// repeat wait ( 1 ) ;
29867: LD_INT 1
29869: PPUSH
29870: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29874: LD_VAR 0 1
29878: PPUSH
29879: CALL_OW 316
29883: PUSH
29884: LD_VAR 0 1
29888: PPUSH
29889: CALL_OW 314
29893: OR
29894: PUSH
29895: LD_VAR 0 1
29899: PPUSH
29900: CALL_OW 302
29904: NOT
29905: OR
29906: PUSH
29907: LD_VAR 0 1
29911: PPUSH
29912: CALL_OW 301
29916: OR
29917: IFFALSE 29867
// RemoveSeeing ( _x , _y , side ) ;
29919: LD_VAR 0 8
29923: PPUSH
29924: LD_VAR 0 9
29928: PPUSH
29929: LD_VAR 0 6
29933: PPUSH
29934: CALL_OW 331
// end ; end_of_file
29938: LD_VAR 0 4
29942: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29943: LD_INT 0
29945: PPUSH
29946: PPUSH
// if exist_mode then
29947: LD_VAR 0 2
29951: IFFALSE 29976
// unit := CreateCharacter ( prefix & ident ) else
29953: LD_ADDR_VAR 0 5
29957: PUSH
29958: LD_VAR 0 3
29962: PUSH
29963: LD_VAR 0 1
29967: STR
29968: PPUSH
29969: CALL_OW 34
29973: ST_TO_ADDR
29974: GO 29991
// unit := NewCharacter ( ident ) ;
29976: LD_ADDR_VAR 0 5
29980: PUSH
29981: LD_VAR 0 1
29985: PPUSH
29986: CALL_OW 25
29990: ST_TO_ADDR
// result := unit ;
29991: LD_ADDR_VAR 0 4
29995: PUSH
29996: LD_VAR 0 5
30000: ST_TO_ADDR
// end ;
30001: LD_VAR 0 4
30005: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30006: LD_INT 0
30008: PPUSH
30009: PPUSH
// if not side or not nation then
30010: LD_VAR 0 1
30014: NOT
30015: PUSH
30016: LD_VAR 0 2
30020: NOT
30021: OR
30022: IFFALSE 30026
// exit ;
30024: GO 30794
// case nation of nation_american :
30026: LD_VAR 0 2
30030: PUSH
30031: LD_INT 1
30033: DOUBLE
30034: EQUAL
30035: IFTRUE 30039
30037: GO 30253
30039: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30040: LD_ADDR_VAR 0 4
30044: PUSH
30045: LD_INT 35
30047: PUSH
30048: LD_INT 45
30050: PUSH
30051: LD_INT 46
30053: PUSH
30054: LD_INT 47
30056: PUSH
30057: LD_INT 82
30059: PUSH
30060: LD_INT 83
30062: PUSH
30063: LD_INT 84
30065: PUSH
30066: LD_INT 85
30068: PUSH
30069: LD_INT 86
30071: PUSH
30072: LD_INT 1
30074: PUSH
30075: LD_INT 2
30077: PUSH
30078: LD_INT 6
30080: PUSH
30081: LD_INT 15
30083: PUSH
30084: LD_INT 16
30086: PUSH
30087: LD_INT 7
30089: PUSH
30090: LD_INT 12
30092: PUSH
30093: LD_INT 13
30095: PUSH
30096: LD_INT 10
30098: PUSH
30099: LD_INT 14
30101: PUSH
30102: LD_INT 20
30104: PUSH
30105: LD_INT 21
30107: PUSH
30108: LD_INT 22
30110: PUSH
30111: LD_INT 25
30113: PUSH
30114: LD_INT 32
30116: PUSH
30117: LD_INT 27
30119: PUSH
30120: LD_INT 36
30122: PUSH
30123: LD_INT 69
30125: PUSH
30126: LD_INT 39
30128: PUSH
30129: LD_INT 34
30131: PUSH
30132: LD_INT 40
30134: PUSH
30135: LD_INT 48
30137: PUSH
30138: LD_INT 49
30140: PUSH
30141: LD_INT 50
30143: PUSH
30144: LD_INT 51
30146: PUSH
30147: LD_INT 52
30149: PUSH
30150: LD_INT 53
30152: PUSH
30153: LD_INT 54
30155: PUSH
30156: LD_INT 55
30158: PUSH
30159: LD_INT 56
30161: PUSH
30162: LD_INT 57
30164: PUSH
30165: LD_INT 58
30167: PUSH
30168: LD_INT 59
30170: PUSH
30171: LD_INT 60
30173: PUSH
30174: LD_INT 61
30176: PUSH
30177: LD_INT 62
30179: PUSH
30180: LD_INT 80
30182: PUSH
30183: LD_INT 82
30185: PUSH
30186: LD_INT 83
30188: PUSH
30189: LD_INT 84
30191: PUSH
30192: LD_INT 85
30194: PUSH
30195: LD_INT 86
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: ST_TO_ADDR
30251: GO 30718
30253: LD_INT 2
30255: DOUBLE
30256: EQUAL
30257: IFTRUE 30261
30259: GO 30487
30261: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30262: LD_ADDR_VAR 0 4
30266: PUSH
30267: LD_INT 35
30269: PUSH
30270: LD_INT 45
30272: PUSH
30273: LD_INT 46
30275: PUSH
30276: LD_INT 47
30278: PUSH
30279: LD_INT 82
30281: PUSH
30282: LD_INT 83
30284: PUSH
30285: LD_INT 84
30287: PUSH
30288: LD_INT 85
30290: PUSH
30291: LD_INT 87
30293: PUSH
30294: LD_INT 70
30296: PUSH
30297: LD_INT 1
30299: PUSH
30300: LD_INT 11
30302: PUSH
30303: LD_INT 3
30305: PUSH
30306: LD_INT 4
30308: PUSH
30309: LD_INT 5
30311: PUSH
30312: LD_INT 6
30314: PUSH
30315: LD_INT 15
30317: PUSH
30318: LD_INT 18
30320: PUSH
30321: LD_INT 7
30323: PUSH
30324: LD_INT 17
30326: PUSH
30327: LD_INT 8
30329: PUSH
30330: LD_INT 20
30332: PUSH
30333: LD_INT 21
30335: PUSH
30336: LD_INT 22
30338: PUSH
30339: LD_INT 72
30341: PUSH
30342: LD_INT 26
30344: PUSH
30345: LD_INT 69
30347: PUSH
30348: LD_INT 39
30350: PUSH
30351: LD_INT 40
30353: PUSH
30354: LD_INT 41
30356: PUSH
30357: LD_INT 42
30359: PUSH
30360: LD_INT 43
30362: PUSH
30363: LD_INT 48
30365: PUSH
30366: LD_INT 49
30368: PUSH
30369: LD_INT 50
30371: PUSH
30372: LD_INT 51
30374: PUSH
30375: LD_INT 52
30377: PUSH
30378: LD_INT 53
30380: PUSH
30381: LD_INT 54
30383: PUSH
30384: LD_INT 55
30386: PUSH
30387: LD_INT 56
30389: PUSH
30390: LD_INT 60
30392: PUSH
30393: LD_INT 61
30395: PUSH
30396: LD_INT 62
30398: PUSH
30399: LD_INT 66
30401: PUSH
30402: LD_INT 67
30404: PUSH
30405: LD_INT 68
30407: PUSH
30408: LD_INT 81
30410: PUSH
30411: LD_INT 82
30413: PUSH
30414: LD_INT 83
30416: PUSH
30417: LD_INT 84
30419: PUSH
30420: LD_INT 85
30422: PUSH
30423: LD_INT 87
30425: PUSH
30426: LD_INT 88
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: ST_TO_ADDR
30485: GO 30718
30487: LD_INT 3
30489: DOUBLE
30490: EQUAL
30491: IFTRUE 30495
30493: GO 30717
30495: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30496: LD_ADDR_VAR 0 4
30500: PUSH
30501: LD_INT 46
30503: PUSH
30504: LD_INT 47
30506: PUSH
30507: LD_INT 1
30509: PUSH
30510: LD_INT 2
30512: PUSH
30513: LD_INT 82
30515: PUSH
30516: LD_INT 83
30518: PUSH
30519: LD_INT 84
30521: PUSH
30522: LD_INT 85
30524: PUSH
30525: LD_INT 86
30527: PUSH
30528: LD_INT 11
30530: PUSH
30531: LD_INT 9
30533: PUSH
30534: LD_INT 20
30536: PUSH
30537: LD_INT 19
30539: PUSH
30540: LD_INT 21
30542: PUSH
30543: LD_INT 24
30545: PUSH
30546: LD_INT 22
30548: PUSH
30549: LD_INT 25
30551: PUSH
30552: LD_INT 28
30554: PUSH
30555: LD_INT 29
30557: PUSH
30558: LD_INT 30
30560: PUSH
30561: LD_INT 31
30563: PUSH
30564: LD_INT 37
30566: PUSH
30567: LD_INT 38
30569: PUSH
30570: LD_INT 32
30572: PUSH
30573: LD_INT 27
30575: PUSH
30576: LD_INT 33
30578: PUSH
30579: LD_INT 69
30581: PUSH
30582: LD_INT 39
30584: PUSH
30585: LD_INT 34
30587: PUSH
30588: LD_INT 40
30590: PUSH
30591: LD_INT 71
30593: PUSH
30594: LD_INT 23
30596: PUSH
30597: LD_INT 44
30599: PUSH
30600: LD_INT 48
30602: PUSH
30603: LD_INT 49
30605: PUSH
30606: LD_INT 50
30608: PUSH
30609: LD_INT 51
30611: PUSH
30612: LD_INT 52
30614: PUSH
30615: LD_INT 53
30617: PUSH
30618: LD_INT 54
30620: PUSH
30621: LD_INT 55
30623: PUSH
30624: LD_INT 56
30626: PUSH
30627: LD_INT 57
30629: PUSH
30630: LD_INT 58
30632: PUSH
30633: LD_INT 59
30635: PUSH
30636: LD_INT 63
30638: PUSH
30639: LD_INT 64
30641: PUSH
30642: LD_INT 65
30644: PUSH
30645: LD_INT 82
30647: PUSH
30648: LD_INT 83
30650: PUSH
30651: LD_INT 84
30653: PUSH
30654: LD_INT 85
30656: PUSH
30657: LD_INT 86
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: ST_TO_ADDR
30715: GO 30718
30717: POP
// if state > - 1 and state < 3 then
30718: LD_VAR 0 3
30722: PUSH
30723: LD_INT 1
30725: NEG
30726: GREATER
30727: PUSH
30728: LD_VAR 0 3
30732: PUSH
30733: LD_INT 3
30735: LESS
30736: AND
30737: IFFALSE 30794
// for i in result do
30739: LD_ADDR_VAR 0 5
30743: PUSH
30744: LD_VAR 0 4
30748: PUSH
30749: FOR_IN
30750: IFFALSE 30792
// if GetTech ( i , side ) <> state then
30752: LD_VAR 0 5
30756: PPUSH
30757: LD_VAR 0 1
30761: PPUSH
30762: CALL_OW 321
30766: PUSH
30767: LD_VAR 0 3
30771: NONEQUAL
30772: IFFALSE 30790
// result := result diff i ;
30774: LD_ADDR_VAR 0 4
30778: PUSH
30779: LD_VAR 0 4
30783: PUSH
30784: LD_VAR 0 5
30788: DIFF
30789: ST_TO_ADDR
30790: GO 30749
30792: POP
30793: POP
// end ;
30794: LD_VAR 0 4
30798: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30799: LD_INT 0
30801: PPUSH
30802: PPUSH
30803: PPUSH
// result := true ;
30804: LD_ADDR_VAR 0 3
30808: PUSH
30809: LD_INT 1
30811: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30812: LD_ADDR_VAR 0 5
30816: PUSH
30817: LD_VAR 0 2
30821: PPUSH
30822: CALL_OW 480
30826: ST_TO_ADDR
// if not tmp then
30827: LD_VAR 0 5
30831: NOT
30832: IFFALSE 30836
// exit ;
30834: GO 30885
// for i in tmp do
30836: LD_ADDR_VAR 0 4
30840: PUSH
30841: LD_VAR 0 5
30845: PUSH
30846: FOR_IN
30847: IFFALSE 30883
// if GetTech ( i , side ) <> state_researched then
30849: LD_VAR 0 4
30853: PPUSH
30854: LD_VAR 0 1
30858: PPUSH
30859: CALL_OW 321
30863: PUSH
30864: LD_INT 2
30866: NONEQUAL
30867: IFFALSE 30881
// begin result := false ;
30869: LD_ADDR_VAR 0 3
30873: PUSH
30874: LD_INT 0
30876: ST_TO_ADDR
// exit ;
30877: POP
30878: POP
30879: GO 30885
// end ;
30881: GO 30846
30883: POP
30884: POP
// end ;
30885: LD_VAR 0 3
30889: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30890: LD_INT 0
30892: PPUSH
30893: PPUSH
30894: PPUSH
30895: PPUSH
30896: PPUSH
30897: PPUSH
30898: PPUSH
30899: PPUSH
30900: PPUSH
30901: PPUSH
30902: PPUSH
30903: PPUSH
30904: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30905: LD_VAR 0 1
30909: NOT
30910: PUSH
30911: LD_VAR 0 1
30915: PPUSH
30916: CALL_OW 257
30920: PUSH
30921: LD_INT 9
30923: NONEQUAL
30924: OR
30925: IFFALSE 30929
// exit ;
30927: GO 31502
// side := GetSide ( unit ) ;
30929: LD_ADDR_VAR 0 9
30933: PUSH
30934: LD_VAR 0 1
30938: PPUSH
30939: CALL_OW 255
30943: ST_TO_ADDR
// tech_space := tech_spacanom ;
30944: LD_ADDR_VAR 0 12
30948: PUSH
30949: LD_INT 29
30951: ST_TO_ADDR
// tech_time := tech_taurad ;
30952: LD_ADDR_VAR 0 13
30956: PUSH
30957: LD_INT 28
30959: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30960: LD_ADDR_VAR 0 11
30964: PUSH
30965: LD_VAR 0 1
30969: PPUSH
30970: CALL_OW 310
30974: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30975: LD_VAR 0 11
30979: PPUSH
30980: CALL_OW 247
30984: PUSH
30985: LD_INT 2
30987: EQUAL
30988: IFFALSE 30992
// exit ;
30990: GO 31502
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30992: LD_ADDR_VAR 0 8
30996: PUSH
30997: LD_INT 81
30999: PUSH
31000: LD_VAR 0 9
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 3
31011: PUSH
31012: LD_INT 21
31014: PUSH
31015: LD_INT 3
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PPUSH
31030: CALL_OW 69
31034: ST_TO_ADDR
// if not tmp then
31035: LD_VAR 0 8
31039: NOT
31040: IFFALSE 31044
// exit ;
31042: GO 31502
// if in_unit then
31044: LD_VAR 0 11
31048: IFFALSE 31072
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31050: LD_ADDR_VAR 0 10
31054: PUSH
31055: LD_VAR 0 8
31059: PPUSH
31060: LD_VAR 0 11
31064: PPUSH
31065: CALL_OW 74
31069: ST_TO_ADDR
31070: GO 31092
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31072: LD_ADDR_VAR 0 10
31076: PUSH
31077: LD_VAR 0 8
31081: PPUSH
31082: LD_VAR 0 1
31086: PPUSH
31087: CALL_OW 74
31091: ST_TO_ADDR
// if not enemy then
31092: LD_VAR 0 10
31096: NOT
31097: IFFALSE 31101
// exit ;
31099: GO 31502
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31101: LD_VAR 0 11
31105: PUSH
31106: LD_VAR 0 11
31110: PPUSH
31111: LD_VAR 0 10
31115: PPUSH
31116: CALL_OW 296
31120: PUSH
31121: LD_INT 13
31123: GREATER
31124: AND
31125: PUSH
31126: LD_VAR 0 1
31130: PPUSH
31131: LD_VAR 0 10
31135: PPUSH
31136: CALL_OW 296
31140: PUSH
31141: LD_INT 12
31143: GREATER
31144: OR
31145: IFFALSE 31149
// exit ;
31147: GO 31502
// missile := [ 1 ] ;
31149: LD_ADDR_VAR 0 14
31153: PUSH
31154: LD_INT 1
31156: PUSH
31157: EMPTY
31158: LIST
31159: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31160: LD_VAR 0 9
31164: PPUSH
31165: LD_VAR 0 12
31169: PPUSH
31170: CALL_OW 325
31174: IFFALSE 31203
// missile := Replace ( missile , missile + 1 , 2 ) ;
31176: LD_ADDR_VAR 0 14
31180: PUSH
31181: LD_VAR 0 14
31185: PPUSH
31186: LD_VAR 0 14
31190: PUSH
31191: LD_INT 1
31193: PLUS
31194: PPUSH
31195: LD_INT 2
31197: PPUSH
31198: CALL_OW 1
31202: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31203: LD_VAR 0 9
31207: PPUSH
31208: LD_VAR 0 13
31212: PPUSH
31213: CALL_OW 325
31217: PUSH
31218: LD_VAR 0 10
31222: PPUSH
31223: CALL_OW 255
31227: PPUSH
31228: LD_VAR 0 13
31232: PPUSH
31233: CALL_OW 325
31237: NOT
31238: AND
31239: IFFALSE 31268
// missile := Replace ( missile , missile + 1 , 3 ) ;
31241: LD_ADDR_VAR 0 14
31245: PUSH
31246: LD_VAR 0 14
31250: PPUSH
31251: LD_VAR 0 14
31255: PUSH
31256: LD_INT 1
31258: PLUS
31259: PPUSH
31260: LD_INT 3
31262: PPUSH
31263: CALL_OW 1
31267: ST_TO_ADDR
// if missile < 2 then
31268: LD_VAR 0 14
31272: PUSH
31273: LD_INT 2
31275: LESS
31276: IFFALSE 31280
// exit ;
31278: GO 31502
// x := GetX ( enemy ) ;
31280: LD_ADDR_VAR 0 4
31284: PUSH
31285: LD_VAR 0 10
31289: PPUSH
31290: CALL_OW 250
31294: ST_TO_ADDR
// y := GetY ( enemy ) ;
31295: LD_ADDR_VAR 0 5
31299: PUSH
31300: LD_VAR 0 10
31304: PPUSH
31305: CALL_OW 251
31309: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31310: LD_ADDR_VAR 0 6
31314: PUSH
31315: LD_VAR 0 4
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PPUSH
31324: LD_INT 1
31326: PPUSH
31327: CALL_OW 12
31331: PLUS
31332: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31333: LD_ADDR_VAR 0 7
31337: PUSH
31338: LD_VAR 0 5
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PPUSH
31347: LD_INT 1
31349: PPUSH
31350: CALL_OW 12
31354: PLUS
31355: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31356: LD_VAR 0 6
31360: PPUSH
31361: LD_VAR 0 7
31365: PPUSH
31366: CALL_OW 488
31370: NOT
31371: IFFALSE 31393
// begin _x := x ;
31373: LD_ADDR_VAR 0 6
31377: PUSH
31378: LD_VAR 0 4
31382: ST_TO_ADDR
// _y := y ;
31383: LD_ADDR_VAR 0 7
31387: PUSH
31388: LD_VAR 0 5
31392: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31393: LD_ADDR_VAR 0 3
31397: PUSH
31398: LD_INT 1
31400: PPUSH
31401: LD_VAR 0 14
31405: PPUSH
31406: CALL_OW 12
31410: ST_TO_ADDR
// case i of 1 :
31411: LD_VAR 0 3
31415: PUSH
31416: LD_INT 1
31418: DOUBLE
31419: EQUAL
31420: IFTRUE 31424
31422: GO 31441
31424: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31425: LD_VAR 0 1
31429: PPUSH
31430: LD_VAR 0 10
31434: PPUSH
31435: CALL_OW 115
31439: GO 31502
31441: LD_INT 2
31443: DOUBLE
31444: EQUAL
31445: IFTRUE 31449
31447: GO 31471
31449: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31450: LD_VAR 0 1
31454: PPUSH
31455: LD_VAR 0 6
31459: PPUSH
31460: LD_VAR 0 7
31464: PPUSH
31465: CALL_OW 153
31469: GO 31502
31471: LD_INT 3
31473: DOUBLE
31474: EQUAL
31475: IFTRUE 31479
31477: GO 31501
31479: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31480: LD_VAR 0 1
31484: PPUSH
31485: LD_VAR 0 6
31489: PPUSH
31490: LD_VAR 0 7
31494: PPUSH
31495: CALL_OW 154
31499: GO 31502
31501: POP
// end ;
31502: LD_VAR 0 2
31506: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31507: LD_INT 0
31509: PPUSH
31510: PPUSH
31511: PPUSH
31512: PPUSH
31513: PPUSH
31514: PPUSH
// if not unit or not building then
31515: LD_VAR 0 1
31519: NOT
31520: PUSH
31521: LD_VAR 0 2
31525: NOT
31526: OR
31527: IFFALSE 31531
// exit ;
31529: GO 31689
// x := GetX ( building ) ;
31531: LD_ADDR_VAR 0 5
31535: PUSH
31536: LD_VAR 0 2
31540: PPUSH
31541: CALL_OW 250
31545: ST_TO_ADDR
// y := GetY ( building ) ;
31546: LD_ADDR_VAR 0 6
31550: PUSH
31551: LD_VAR 0 2
31555: PPUSH
31556: CALL_OW 251
31560: ST_TO_ADDR
// for i = 0 to 5 do
31561: LD_ADDR_VAR 0 4
31565: PUSH
31566: DOUBLE
31567: LD_INT 0
31569: DEC
31570: ST_TO_ADDR
31571: LD_INT 5
31573: PUSH
31574: FOR_TO
31575: IFFALSE 31687
// begin _x := ShiftX ( x , i , 3 ) ;
31577: LD_ADDR_VAR 0 7
31581: PUSH
31582: LD_VAR 0 5
31586: PPUSH
31587: LD_VAR 0 4
31591: PPUSH
31592: LD_INT 3
31594: PPUSH
31595: CALL_OW 272
31599: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31600: LD_ADDR_VAR 0 8
31604: PUSH
31605: LD_VAR 0 6
31609: PPUSH
31610: LD_VAR 0 4
31614: PPUSH
31615: LD_INT 3
31617: PPUSH
31618: CALL_OW 273
31622: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31623: LD_VAR 0 7
31627: PPUSH
31628: LD_VAR 0 8
31632: PPUSH
31633: CALL_OW 488
31637: NOT
31638: IFFALSE 31642
// continue ;
31640: GO 31574
// if HexInfo ( _x , _y ) = 0 then
31642: LD_VAR 0 7
31646: PPUSH
31647: LD_VAR 0 8
31651: PPUSH
31652: CALL_OW 428
31656: PUSH
31657: LD_INT 0
31659: EQUAL
31660: IFFALSE 31685
// begin ComMoveXY ( unit , _x , _y ) ;
31662: LD_VAR 0 1
31666: PPUSH
31667: LD_VAR 0 7
31671: PPUSH
31672: LD_VAR 0 8
31676: PPUSH
31677: CALL_OW 111
// exit ;
31681: POP
31682: POP
31683: GO 31689
// end ; end ;
31685: GO 31574
31687: POP
31688: POP
// end ;
31689: LD_VAR 0 3
31693: RET
// export function ScanBase ( side , base_area ) ; begin
31694: LD_INT 0
31696: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31697: LD_ADDR_VAR 0 3
31701: PUSH
31702: LD_VAR 0 2
31706: PPUSH
31707: LD_INT 81
31709: PUSH
31710: LD_VAR 0 1
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PPUSH
31719: CALL_OW 70
31723: ST_TO_ADDR
// end ;
31724: LD_VAR 0 3
31728: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31729: LD_INT 0
31731: PPUSH
31732: PPUSH
31733: PPUSH
31734: PPUSH
// result := false ;
31735: LD_ADDR_VAR 0 2
31739: PUSH
31740: LD_INT 0
31742: ST_TO_ADDR
// side := GetSide ( unit ) ;
31743: LD_ADDR_VAR 0 3
31747: PUSH
31748: LD_VAR 0 1
31752: PPUSH
31753: CALL_OW 255
31757: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31758: LD_ADDR_VAR 0 4
31762: PUSH
31763: LD_VAR 0 1
31767: PPUSH
31768: CALL_OW 248
31772: ST_TO_ADDR
// case nat of 1 :
31773: LD_VAR 0 4
31777: PUSH
31778: LD_INT 1
31780: DOUBLE
31781: EQUAL
31782: IFTRUE 31786
31784: GO 31797
31786: POP
// tech := tech_lassight ; 2 :
31787: LD_ADDR_VAR 0 5
31791: PUSH
31792: LD_INT 12
31794: ST_TO_ADDR
31795: GO 31836
31797: LD_INT 2
31799: DOUBLE
31800: EQUAL
31801: IFTRUE 31805
31803: GO 31816
31805: POP
// tech := tech_mortar ; 3 :
31806: LD_ADDR_VAR 0 5
31810: PUSH
31811: LD_INT 41
31813: ST_TO_ADDR
31814: GO 31836
31816: LD_INT 3
31818: DOUBLE
31819: EQUAL
31820: IFTRUE 31824
31822: GO 31835
31824: POP
// tech := tech_bazooka ; end ;
31825: LD_ADDR_VAR 0 5
31829: PUSH
31830: LD_INT 44
31832: ST_TO_ADDR
31833: GO 31836
31835: POP
// if Researched ( side , tech ) then
31836: LD_VAR 0 3
31840: PPUSH
31841: LD_VAR 0 5
31845: PPUSH
31846: CALL_OW 325
31850: IFFALSE 31877
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31852: LD_ADDR_VAR 0 2
31856: PUSH
31857: LD_INT 5
31859: PUSH
31860: LD_INT 8
31862: PUSH
31863: LD_INT 9
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: LIST
31870: PUSH
31871: LD_VAR 0 4
31875: ARRAY
31876: ST_TO_ADDR
// end ;
31877: LD_VAR 0 2
31881: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31882: LD_INT 0
31884: PPUSH
31885: PPUSH
31886: PPUSH
// if not mines then
31887: LD_VAR 0 2
31891: NOT
31892: IFFALSE 31896
// exit ;
31894: GO 32040
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31896: LD_ADDR_VAR 0 5
31900: PUSH
31901: LD_INT 81
31903: PUSH
31904: LD_VAR 0 1
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 3
31915: PUSH
31916: LD_INT 21
31918: PUSH
31919: LD_INT 3
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PPUSH
31934: CALL_OW 69
31938: ST_TO_ADDR
// for i in mines do
31939: LD_ADDR_VAR 0 4
31943: PUSH
31944: LD_VAR 0 2
31948: PUSH
31949: FOR_IN
31950: IFFALSE 32038
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31952: LD_VAR 0 4
31956: PUSH
31957: LD_INT 1
31959: ARRAY
31960: PPUSH
31961: LD_VAR 0 4
31965: PUSH
31966: LD_INT 2
31968: ARRAY
31969: PPUSH
31970: CALL_OW 458
31974: NOT
31975: IFFALSE 31979
// continue ;
31977: GO 31949
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31979: LD_VAR 0 4
31983: PUSH
31984: LD_INT 1
31986: ARRAY
31987: PPUSH
31988: LD_VAR 0 4
31992: PUSH
31993: LD_INT 2
31995: ARRAY
31996: PPUSH
31997: CALL_OW 428
32001: PUSH
32002: LD_VAR 0 5
32006: IN
32007: IFFALSE 32036
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32009: LD_VAR 0 4
32013: PUSH
32014: LD_INT 1
32016: ARRAY
32017: PPUSH
32018: LD_VAR 0 4
32022: PUSH
32023: LD_INT 2
32025: ARRAY
32026: PPUSH
32027: LD_VAR 0 1
32031: PPUSH
32032: CALL_OW 456
// end ;
32036: GO 31949
32038: POP
32039: POP
// end ;
32040: LD_VAR 0 3
32044: RET
// export function Count ( array ) ; var i ; begin
32045: LD_INT 0
32047: PPUSH
32048: PPUSH
// result := 0 ;
32049: LD_ADDR_VAR 0 2
32053: PUSH
32054: LD_INT 0
32056: ST_TO_ADDR
// for i in array do
32057: LD_ADDR_VAR 0 3
32061: PUSH
32062: LD_VAR 0 1
32066: PUSH
32067: FOR_IN
32068: IFFALSE 32092
// if i then
32070: LD_VAR 0 3
32074: IFFALSE 32090
// result := result + 1 ;
32076: LD_ADDR_VAR 0 2
32080: PUSH
32081: LD_VAR 0 2
32085: PUSH
32086: LD_INT 1
32088: PLUS
32089: ST_TO_ADDR
32090: GO 32067
32092: POP
32093: POP
// end ;
32094: LD_VAR 0 2
32098: RET
// export function IsEmpty ( building ) ; begin
32099: LD_INT 0
32101: PPUSH
// if not building then
32102: LD_VAR 0 1
32106: NOT
32107: IFFALSE 32111
// exit ;
32109: GO 32154
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32111: LD_ADDR_VAR 0 2
32115: PUSH
32116: LD_VAR 0 1
32120: PUSH
32121: LD_INT 22
32123: PUSH
32124: LD_VAR 0 1
32128: PPUSH
32129: CALL_OW 255
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 58
32140: PUSH
32141: EMPTY
32142: LIST
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PPUSH
32148: CALL_OW 69
32152: IN
32153: ST_TO_ADDR
// end ;
32154: LD_VAR 0 2
32158: RET
// export function IsNotFull ( building ) ; var places ; begin
32159: LD_INT 0
32161: PPUSH
32162: PPUSH
// if not building then
32163: LD_VAR 0 1
32167: NOT
32168: IFFALSE 32172
// exit ;
32170: GO 32343
// result := false ;
32172: LD_ADDR_VAR 0 2
32176: PUSH
32177: LD_INT 0
32179: ST_TO_ADDR
// places := 0 ;
32180: LD_ADDR_VAR 0 3
32184: PUSH
32185: LD_INT 0
32187: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32188: LD_VAR 0 1
32192: PPUSH
32193: CALL_OW 266
32197: PUSH
32198: LD_INT 0
32200: DOUBLE
32201: EQUAL
32202: IFTRUE 32260
32204: LD_INT 1
32206: DOUBLE
32207: EQUAL
32208: IFTRUE 32260
32210: LD_INT 6
32212: DOUBLE
32213: EQUAL
32214: IFTRUE 32260
32216: LD_INT 7
32218: DOUBLE
32219: EQUAL
32220: IFTRUE 32260
32222: LD_INT 8
32224: DOUBLE
32225: EQUAL
32226: IFTRUE 32260
32228: LD_INT 4
32230: DOUBLE
32231: EQUAL
32232: IFTRUE 32260
32234: LD_INT 5
32236: DOUBLE
32237: EQUAL
32238: IFTRUE 32260
32240: LD_INT 2
32242: DOUBLE
32243: EQUAL
32244: IFTRUE 32260
32246: LD_INT 3
32248: DOUBLE
32249: EQUAL
32250: IFTRUE 32260
32252: LD_INT 35
32254: DOUBLE
32255: EQUAL
32256: IFTRUE 32260
32258: GO 32271
32260: POP
// places := 6 ; b_bunker , b_breastwork :
32261: LD_ADDR_VAR 0 3
32265: PUSH
32266: LD_INT 6
32268: ST_TO_ADDR
32269: GO 32316
32271: LD_INT 32
32273: DOUBLE
32274: EQUAL
32275: IFTRUE 32285
32277: LD_INT 31
32279: DOUBLE
32280: EQUAL
32281: IFTRUE 32285
32283: GO 32296
32285: POP
// places := 1 ; b_control_tower :
32286: LD_ADDR_VAR 0 3
32290: PUSH
32291: LD_INT 1
32293: ST_TO_ADDR
32294: GO 32316
32296: LD_INT 36
32298: DOUBLE
32299: EQUAL
32300: IFTRUE 32304
32302: GO 32315
32304: POP
// places := 3 ; end ;
32305: LD_ADDR_VAR 0 3
32309: PUSH
32310: LD_INT 3
32312: ST_TO_ADDR
32313: GO 32316
32315: POP
// if places then
32316: LD_VAR 0 3
32320: IFFALSE 32343
// result := UnitsInside ( building ) < places ;
32322: LD_ADDR_VAR 0 2
32326: PUSH
32327: LD_VAR 0 1
32331: PPUSH
32332: CALL_OW 313
32336: PUSH
32337: LD_VAR 0 3
32341: LESS
32342: ST_TO_ADDR
// end ;
32343: LD_VAR 0 2
32347: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32348: LD_INT 0
32350: PPUSH
32351: PPUSH
32352: PPUSH
32353: PPUSH
// tmp := [ ] ;
32354: LD_ADDR_VAR 0 3
32358: PUSH
32359: EMPTY
32360: ST_TO_ADDR
// list := [ ] ;
32361: LD_ADDR_VAR 0 5
32365: PUSH
32366: EMPTY
32367: ST_TO_ADDR
// for i = 16 to 25 do
32368: LD_ADDR_VAR 0 4
32372: PUSH
32373: DOUBLE
32374: LD_INT 16
32376: DEC
32377: ST_TO_ADDR
32378: LD_INT 25
32380: PUSH
32381: FOR_TO
32382: IFFALSE 32455
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32384: LD_ADDR_VAR 0 3
32388: PUSH
32389: LD_VAR 0 3
32393: PUSH
32394: LD_INT 22
32396: PUSH
32397: LD_VAR 0 1
32401: PPUSH
32402: CALL_OW 255
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 91
32413: PUSH
32414: LD_VAR 0 1
32418: PUSH
32419: LD_INT 6
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 30
32429: PUSH
32430: LD_VAR 0 4
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: LIST
32443: PUSH
32444: EMPTY
32445: LIST
32446: PPUSH
32447: CALL_OW 69
32451: ADD
32452: ST_TO_ADDR
32453: GO 32381
32455: POP
32456: POP
// for i = 1 to tmp do
32457: LD_ADDR_VAR 0 4
32461: PUSH
32462: DOUBLE
32463: LD_INT 1
32465: DEC
32466: ST_TO_ADDR
32467: LD_VAR 0 3
32471: PUSH
32472: FOR_TO
32473: IFFALSE 32561
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32475: LD_ADDR_VAR 0 5
32479: PUSH
32480: LD_VAR 0 5
32484: PUSH
32485: LD_VAR 0 3
32489: PUSH
32490: LD_VAR 0 4
32494: ARRAY
32495: PPUSH
32496: CALL_OW 266
32500: PUSH
32501: LD_VAR 0 3
32505: PUSH
32506: LD_VAR 0 4
32510: ARRAY
32511: PPUSH
32512: CALL_OW 250
32516: PUSH
32517: LD_VAR 0 3
32521: PUSH
32522: LD_VAR 0 4
32526: ARRAY
32527: PPUSH
32528: CALL_OW 251
32532: PUSH
32533: LD_VAR 0 3
32537: PUSH
32538: LD_VAR 0 4
32542: ARRAY
32543: PPUSH
32544: CALL_OW 254
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: PUSH
32555: EMPTY
32556: LIST
32557: ADD
32558: ST_TO_ADDR
32559: GO 32472
32561: POP
32562: POP
// result := list ;
32563: LD_ADDR_VAR 0 2
32567: PUSH
32568: LD_VAR 0 5
32572: ST_TO_ADDR
// end ;
32573: LD_VAR 0 2
32577: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32578: LD_INT 0
32580: PPUSH
32581: PPUSH
32582: PPUSH
32583: PPUSH
32584: PPUSH
32585: PPUSH
32586: PPUSH
// if not factory then
32587: LD_VAR 0 1
32591: NOT
32592: IFFALSE 32596
// exit ;
32594: GO 33189
// if control = control_apeman then
32596: LD_VAR 0 4
32600: PUSH
32601: LD_INT 5
32603: EQUAL
32604: IFFALSE 32713
// begin tmp := UnitsInside ( factory ) ;
32606: LD_ADDR_VAR 0 8
32610: PUSH
32611: LD_VAR 0 1
32615: PPUSH
32616: CALL_OW 313
32620: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32621: LD_VAR 0 8
32625: PPUSH
32626: LD_INT 25
32628: PUSH
32629: LD_INT 12
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PPUSH
32636: CALL_OW 72
32640: NOT
32641: IFFALSE 32651
// control := control_manual ;
32643: LD_ADDR_VAR 0 4
32647: PUSH
32648: LD_INT 1
32650: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32651: LD_ADDR_VAR 0 8
32655: PUSH
32656: LD_VAR 0 1
32660: PPUSH
32661: CALL 32348 0 1
32665: ST_TO_ADDR
// if tmp then
32666: LD_VAR 0 8
32670: IFFALSE 32713
// begin for i in tmp do
32672: LD_ADDR_VAR 0 7
32676: PUSH
32677: LD_VAR 0 8
32681: PUSH
32682: FOR_IN
32683: IFFALSE 32711
// if i [ 1 ] = b_ext_radio then
32685: LD_VAR 0 7
32689: PUSH
32690: LD_INT 1
32692: ARRAY
32693: PUSH
32694: LD_INT 22
32696: EQUAL
32697: IFFALSE 32709
// begin control := control_remote ;
32699: LD_ADDR_VAR 0 4
32703: PUSH
32704: LD_INT 2
32706: ST_TO_ADDR
// break ;
32707: GO 32711
// end ;
32709: GO 32682
32711: POP
32712: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32713: LD_VAR 0 1
32717: PPUSH
32718: LD_VAR 0 2
32722: PPUSH
32723: LD_VAR 0 3
32727: PPUSH
32728: LD_VAR 0 4
32732: PPUSH
32733: LD_VAR 0 5
32737: PPUSH
32738: CALL_OW 448
32742: IFFALSE 32777
// begin result := [ chassis , engine , control , weapon ] ;
32744: LD_ADDR_VAR 0 6
32748: PUSH
32749: LD_VAR 0 2
32753: PUSH
32754: LD_VAR 0 3
32758: PUSH
32759: LD_VAR 0 4
32763: PUSH
32764: LD_VAR 0 5
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: ST_TO_ADDR
// exit ;
32775: GO 33189
// end ; _chassis := AvailableChassisList ( factory ) ;
32777: LD_ADDR_VAR 0 9
32781: PUSH
32782: LD_VAR 0 1
32786: PPUSH
32787: CALL_OW 475
32791: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32792: LD_ADDR_VAR 0 11
32796: PUSH
32797: LD_VAR 0 1
32801: PPUSH
32802: CALL_OW 476
32806: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32807: LD_ADDR_VAR 0 12
32811: PUSH
32812: LD_VAR 0 1
32816: PPUSH
32817: CALL_OW 477
32821: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32822: LD_ADDR_VAR 0 10
32826: PUSH
32827: LD_VAR 0 1
32831: PPUSH
32832: CALL_OW 478
32836: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32837: LD_VAR 0 9
32841: NOT
32842: PUSH
32843: LD_VAR 0 11
32847: NOT
32848: OR
32849: PUSH
32850: LD_VAR 0 12
32854: NOT
32855: OR
32856: PUSH
32857: LD_VAR 0 10
32861: NOT
32862: OR
32863: IFFALSE 32898
// begin result := [ chassis , engine , control , weapon ] ;
32865: LD_ADDR_VAR 0 6
32869: PUSH
32870: LD_VAR 0 2
32874: PUSH
32875: LD_VAR 0 3
32879: PUSH
32880: LD_VAR 0 4
32884: PUSH
32885: LD_VAR 0 5
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: ST_TO_ADDR
// exit ;
32896: GO 33189
// end ; if not chassis in _chassis then
32898: LD_VAR 0 2
32902: PUSH
32903: LD_VAR 0 9
32907: IN
32908: NOT
32909: IFFALSE 32935
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32911: LD_ADDR_VAR 0 2
32915: PUSH
32916: LD_VAR 0 9
32920: PUSH
32921: LD_INT 1
32923: PPUSH
32924: LD_VAR 0 9
32928: PPUSH
32929: CALL_OW 12
32933: ARRAY
32934: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32935: LD_VAR 0 2
32939: PPUSH
32940: LD_VAR 0 3
32944: PPUSH
32945: CALL 33194 0 2
32949: NOT
32950: IFFALSE 33009
// repeat engine := _engine [ 1 ] ;
32952: LD_ADDR_VAR 0 3
32956: PUSH
32957: LD_VAR 0 11
32961: PUSH
32962: LD_INT 1
32964: ARRAY
32965: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32966: LD_ADDR_VAR 0 11
32970: PUSH
32971: LD_VAR 0 11
32975: PPUSH
32976: LD_INT 1
32978: PPUSH
32979: CALL_OW 3
32983: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32984: LD_VAR 0 2
32988: PPUSH
32989: LD_VAR 0 3
32993: PPUSH
32994: CALL 33194 0 2
32998: PUSH
32999: LD_VAR 0 11
33003: PUSH
33004: EMPTY
33005: EQUAL
33006: OR
33007: IFFALSE 32952
// if not control in _control then
33009: LD_VAR 0 4
33013: PUSH
33014: LD_VAR 0 12
33018: IN
33019: NOT
33020: IFFALSE 33046
// control := _control [ rand ( 1 , _control ) ] ;
33022: LD_ADDR_VAR 0 4
33026: PUSH
33027: LD_VAR 0 12
33031: PUSH
33032: LD_INT 1
33034: PPUSH
33035: LD_VAR 0 12
33039: PPUSH
33040: CALL_OW 12
33044: ARRAY
33045: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33046: LD_VAR 0 2
33050: PPUSH
33051: LD_VAR 0 5
33055: PPUSH
33056: CALL 33414 0 2
33060: NOT
33061: IFFALSE 33120
// repeat weapon := _weapon [ 1 ] ;
33063: LD_ADDR_VAR 0 5
33067: PUSH
33068: LD_VAR 0 10
33072: PUSH
33073: LD_INT 1
33075: ARRAY
33076: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33077: LD_ADDR_VAR 0 10
33081: PUSH
33082: LD_VAR 0 10
33086: PPUSH
33087: LD_INT 1
33089: PPUSH
33090: CALL_OW 3
33094: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33095: LD_VAR 0 2
33099: PPUSH
33100: LD_VAR 0 5
33104: PPUSH
33105: CALL 33414 0 2
33109: PUSH
33110: LD_VAR 0 10
33114: PUSH
33115: EMPTY
33116: EQUAL
33117: OR
33118: IFFALSE 33063
// result := [ ] ;
33120: LD_ADDR_VAR 0 6
33124: PUSH
33125: EMPTY
33126: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33127: LD_VAR 0 1
33131: PPUSH
33132: LD_VAR 0 2
33136: PPUSH
33137: LD_VAR 0 3
33141: PPUSH
33142: LD_VAR 0 4
33146: PPUSH
33147: LD_VAR 0 5
33151: PPUSH
33152: CALL_OW 448
33156: IFFALSE 33189
// result := [ chassis , engine , control , weapon ] ;
33158: LD_ADDR_VAR 0 6
33162: PUSH
33163: LD_VAR 0 2
33167: PUSH
33168: LD_VAR 0 3
33172: PUSH
33173: LD_VAR 0 4
33177: PUSH
33178: LD_VAR 0 5
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: ST_TO_ADDR
// end ;
33189: LD_VAR 0 6
33193: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33194: LD_INT 0
33196: PPUSH
// if not chassis or not engine then
33197: LD_VAR 0 1
33201: NOT
33202: PUSH
33203: LD_VAR 0 2
33207: NOT
33208: OR
33209: IFFALSE 33213
// exit ;
33211: GO 33409
// case engine of engine_solar :
33213: LD_VAR 0 2
33217: PUSH
33218: LD_INT 2
33220: DOUBLE
33221: EQUAL
33222: IFTRUE 33226
33224: GO 33264
33226: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33227: LD_ADDR_VAR 0 3
33231: PUSH
33232: LD_INT 11
33234: PUSH
33235: LD_INT 12
33237: PUSH
33238: LD_INT 13
33240: PUSH
33241: LD_INT 14
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: LD_INT 2
33249: PUSH
33250: LD_INT 3
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: ST_TO_ADDR
33262: GO 33393
33264: LD_INT 1
33266: DOUBLE
33267: EQUAL
33268: IFTRUE 33272
33270: GO 33334
33272: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33273: LD_ADDR_VAR 0 3
33277: PUSH
33278: LD_INT 11
33280: PUSH
33281: LD_INT 12
33283: PUSH
33284: LD_INT 13
33286: PUSH
33287: LD_INT 14
33289: PUSH
33290: LD_INT 1
33292: PUSH
33293: LD_INT 2
33295: PUSH
33296: LD_INT 3
33298: PUSH
33299: LD_INT 4
33301: PUSH
33302: LD_INT 5
33304: PUSH
33305: LD_INT 21
33307: PUSH
33308: LD_INT 23
33310: PUSH
33311: LD_INT 22
33313: PUSH
33314: LD_INT 24
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: ST_TO_ADDR
33332: GO 33393
33334: LD_INT 3
33336: DOUBLE
33337: EQUAL
33338: IFTRUE 33342
33340: GO 33392
33342: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33343: LD_ADDR_VAR 0 3
33347: PUSH
33348: LD_INT 13
33350: PUSH
33351: LD_INT 14
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: LD_INT 3
33359: PUSH
33360: LD_INT 4
33362: PUSH
33363: LD_INT 5
33365: PUSH
33366: LD_INT 21
33368: PUSH
33369: LD_INT 22
33371: PUSH
33372: LD_INT 23
33374: PUSH
33375: LD_INT 24
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: ST_TO_ADDR
33390: GO 33393
33392: POP
// result := ( chassis in result ) ;
33393: LD_ADDR_VAR 0 3
33397: PUSH
33398: LD_VAR 0 1
33402: PUSH
33403: LD_VAR 0 3
33407: IN
33408: ST_TO_ADDR
// end ;
33409: LD_VAR 0 3
33413: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33414: LD_INT 0
33416: PPUSH
// if not chassis or not weapon then
33417: LD_VAR 0 1
33421: NOT
33422: PUSH
33423: LD_VAR 0 2
33427: NOT
33428: OR
33429: IFFALSE 33433
// exit ;
33431: GO 34495
// case weapon of us_machine_gun :
33433: LD_VAR 0 2
33437: PUSH
33438: LD_INT 2
33440: DOUBLE
33441: EQUAL
33442: IFTRUE 33446
33444: GO 33476
33446: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33447: LD_ADDR_VAR 0 3
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: LD_INT 2
33457: PUSH
33458: LD_INT 3
33460: PUSH
33461: LD_INT 4
33463: PUSH
33464: LD_INT 5
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: ST_TO_ADDR
33474: GO 34479
33476: LD_INT 3
33478: DOUBLE
33479: EQUAL
33480: IFTRUE 33484
33482: GO 33514
33484: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33485: LD_ADDR_VAR 0 3
33489: PUSH
33490: LD_INT 1
33492: PUSH
33493: LD_INT 2
33495: PUSH
33496: LD_INT 3
33498: PUSH
33499: LD_INT 4
33501: PUSH
33502: LD_INT 5
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: ST_TO_ADDR
33512: GO 34479
33514: LD_INT 11
33516: DOUBLE
33517: EQUAL
33518: IFTRUE 33522
33520: GO 33552
33522: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33523: LD_ADDR_VAR 0 3
33527: PUSH
33528: LD_INT 1
33530: PUSH
33531: LD_INT 2
33533: PUSH
33534: LD_INT 3
33536: PUSH
33537: LD_INT 4
33539: PUSH
33540: LD_INT 5
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: ST_TO_ADDR
33550: GO 34479
33552: LD_INT 4
33554: DOUBLE
33555: EQUAL
33556: IFTRUE 33560
33558: GO 33586
33560: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33561: LD_ADDR_VAR 0 3
33565: PUSH
33566: LD_INT 2
33568: PUSH
33569: LD_INT 3
33571: PUSH
33572: LD_INT 4
33574: PUSH
33575: LD_INT 5
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: ST_TO_ADDR
33584: GO 34479
33586: LD_INT 5
33588: DOUBLE
33589: EQUAL
33590: IFTRUE 33594
33592: GO 33620
33594: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33595: LD_ADDR_VAR 0 3
33599: PUSH
33600: LD_INT 2
33602: PUSH
33603: LD_INT 3
33605: PUSH
33606: LD_INT 4
33608: PUSH
33609: LD_INT 5
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: ST_TO_ADDR
33618: GO 34479
33620: LD_INT 9
33622: DOUBLE
33623: EQUAL
33624: IFTRUE 33628
33626: GO 33654
33628: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33629: LD_ADDR_VAR 0 3
33633: PUSH
33634: LD_INT 2
33636: PUSH
33637: LD_INT 3
33639: PUSH
33640: LD_INT 4
33642: PUSH
33643: LD_INT 5
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: ST_TO_ADDR
33652: GO 34479
33654: LD_INT 7
33656: DOUBLE
33657: EQUAL
33658: IFTRUE 33662
33660: GO 33688
33662: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33663: LD_ADDR_VAR 0 3
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: LD_INT 3
33673: PUSH
33674: LD_INT 4
33676: PUSH
33677: LD_INT 5
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: ST_TO_ADDR
33686: GO 34479
33688: LD_INT 12
33690: DOUBLE
33691: EQUAL
33692: IFTRUE 33696
33694: GO 33722
33696: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33697: LD_ADDR_VAR 0 3
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: LD_INT 3
33707: PUSH
33708: LD_INT 4
33710: PUSH
33711: LD_INT 5
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: ST_TO_ADDR
33720: GO 34479
33722: LD_INT 13
33724: DOUBLE
33725: EQUAL
33726: IFTRUE 33730
33728: GO 33756
33730: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33731: LD_ADDR_VAR 0 3
33735: PUSH
33736: LD_INT 2
33738: PUSH
33739: LD_INT 3
33741: PUSH
33742: LD_INT 4
33744: PUSH
33745: LD_INT 5
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: ST_TO_ADDR
33754: GO 34479
33756: LD_INT 14
33758: DOUBLE
33759: EQUAL
33760: IFTRUE 33764
33762: GO 33782
33764: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33765: LD_ADDR_VAR 0 3
33769: PUSH
33770: LD_INT 4
33772: PUSH
33773: LD_INT 5
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: ST_TO_ADDR
33780: GO 34479
33782: LD_INT 6
33784: DOUBLE
33785: EQUAL
33786: IFTRUE 33790
33788: GO 33808
33790: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33791: LD_ADDR_VAR 0 3
33795: PUSH
33796: LD_INT 4
33798: PUSH
33799: LD_INT 5
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: ST_TO_ADDR
33806: GO 34479
33808: LD_INT 10
33810: DOUBLE
33811: EQUAL
33812: IFTRUE 33816
33814: GO 33834
33816: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33817: LD_ADDR_VAR 0 3
33821: PUSH
33822: LD_INT 4
33824: PUSH
33825: LD_INT 5
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: ST_TO_ADDR
33832: GO 34479
33834: LD_INT 22
33836: DOUBLE
33837: EQUAL
33838: IFTRUE 33842
33840: GO 33868
33842: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33843: LD_ADDR_VAR 0 3
33847: PUSH
33848: LD_INT 11
33850: PUSH
33851: LD_INT 12
33853: PUSH
33854: LD_INT 13
33856: PUSH
33857: LD_INT 14
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: ST_TO_ADDR
33866: GO 34479
33868: LD_INT 23
33870: DOUBLE
33871: EQUAL
33872: IFTRUE 33876
33874: GO 33902
33876: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33877: LD_ADDR_VAR 0 3
33881: PUSH
33882: LD_INT 11
33884: PUSH
33885: LD_INT 12
33887: PUSH
33888: LD_INT 13
33890: PUSH
33891: LD_INT 14
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: ST_TO_ADDR
33900: GO 34479
33902: LD_INT 24
33904: DOUBLE
33905: EQUAL
33906: IFTRUE 33910
33908: GO 33936
33910: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33911: LD_ADDR_VAR 0 3
33915: PUSH
33916: LD_INT 11
33918: PUSH
33919: LD_INT 12
33921: PUSH
33922: LD_INT 13
33924: PUSH
33925: LD_INT 14
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: ST_TO_ADDR
33934: GO 34479
33936: LD_INT 30
33938: DOUBLE
33939: EQUAL
33940: IFTRUE 33944
33942: GO 33970
33944: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33945: LD_ADDR_VAR 0 3
33949: PUSH
33950: LD_INT 11
33952: PUSH
33953: LD_INT 12
33955: PUSH
33956: LD_INT 13
33958: PUSH
33959: LD_INT 14
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: ST_TO_ADDR
33968: GO 34479
33970: LD_INT 25
33972: DOUBLE
33973: EQUAL
33974: IFTRUE 33978
33976: GO 33996
33978: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33979: LD_ADDR_VAR 0 3
33983: PUSH
33984: LD_INT 13
33986: PUSH
33987: LD_INT 14
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: ST_TO_ADDR
33994: GO 34479
33996: LD_INT 27
33998: DOUBLE
33999: EQUAL
34000: IFTRUE 34004
34002: GO 34022
34004: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34005: LD_ADDR_VAR 0 3
34009: PUSH
34010: LD_INT 13
34012: PUSH
34013: LD_INT 14
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: ST_TO_ADDR
34020: GO 34479
34022: LD_EXP 119
34026: DOUBLE
34027: EQUAL
34028: IFTRUE 34032
34030: GO 34058
34032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34033: LD_ADDR_VAR 0 3
34037: PUSH
34038: LD_INT 11
34040: PUSH
34041: LD_INT 12
34043: PUSH
34044: LD_INT 13
34046: PUSH
34047: LD_INT 14
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: ST_TO_ADDR
34056: GO 34479
34058: LD_INT 28
34060: DOUBLE
34061: EQUAL
34062: IFTRUE 34066
34064: GO 34084
34066: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34067: LD_ADDR_VAR 0 3
34071: PUSH
34072: LD_INT 13
34074: PUSH
34075: LD_INT 14
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: ST_TO_ADDR
34082: GO 34479
34084: LD_INT 29
34086: DOUBLE
34087: EQUAL
34088: IFTRUE 34092
34090: GO 34110
34092: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34093: LD_ADDR_VAR 0 3
34097: PUSH
34098: LD_INT 13
34100: PUSH
34101: LD_INT 14
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: ST_TO_ADDR
34108: GO 34479
34110: LD_INT 31
34112: DOUBLE
34113: EQUAL
34114: IFTRUE 34118
34116: GO 34136
34118: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34119: LD_ADDR_VAR 0 3
34123: PUSH
34124: LD_INT 13
34126: PUSH
34127: LD_INT 14
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: ST_TO_ADDR
34134: GO 34479
34136: LD_INT 26
34138: DOUBLE
34139: EQUAL
34140: IFTRUE 34144
34142: GO 34162
34144: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34145: LD_ADDR_VAR 0 3
34149: PUSH
34150: LD_INT 13
34152: PUSH
34153: LD_INT 14
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: ST_TO_ADDR
34160: GO 34479
34162: LD_INT 42
34164: DOUBLE
34165: EQUAL
34166: IFTRUE 34170
34168: GO 34196
34170: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34171: LD_ADDR_VAR 0 3
34175: PUSH
34176: LD_INT 21
34178: PUSH
34179: LD_INT 22
34181: PUSH
34182: LD_INT 23
34184: PUSH
34185: LD_INT 24
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: ST_TO_ADDR
34194: GO 34479
34196: LD_INT 43
34198: DOUBLE
34199: EQUAL
34200: IFTRUE 34204
34202: GO 34230
34204: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34205: LD_ADDR_VAR 0 3
34209: PUSH
34210: LD_INT 21
34212: PUSH
34213: LD_INT 22
34215: PUSH
34216: LD_INT 23
34218: PUSH
34219: LD_INT 24
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: ST_TO_ADDR
34228: GO 34479
34230: LD_INT 44
34232: DOUBLE
34233: EQUAL
34234: IFTRUE 34238
34236: GO 34264
34238: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34239: LD_ADDR_VAR 0 3
34243: PUSH
34244: LD_INT 21
34246: PUSH
34247: LD_INT 22
34249: PUSH
34250: LD_INT 23
34252: PUSH
34253: LD_INT 24
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: ST_TO_ADDR
34262: GO 34479
34264: LD_INT 45
34266: DOUBLE
34267: EQUAL
34268: IFTRUE 34272
34270: GO 34298
34272: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34273: LD_ADDR_VAR 0 3
34277: PUSH
34278: LD_INT 21
34280: PUSH
34281: LD_INT 22
34283: PUSH
34284: LD_INT 23
34286: PUSH
34287: LD_INT 24
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: ST_TO_ADDR
34296: GO 34479
34298: LD_INT 49
34300: DOUBLE
34301: EQUAL
34302: IFTRUE 34306
34304: GO 34332
34306: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34307: LD_ADDR_VAR 0 3
34311: PUSH
34312: LD_INT 21
34314: PUSH
34315: LD_INT 22
34317: PUSH
34318: LD_INT 23
34320: PUSH
34321: LD_INT 24
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: ST_TO_ADDR
34330: GO 34479
34332: LD_INT 51
34334: DOUBLE
34335: EQUAL
34336: IFTRUE 34340
34338: GO 34366
34340: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34341: LD_ADDR_VAR 0 3
34345: PUSH
34346: LD_INT 21
34348: PUSH
34349: LD_INT 22
34351: PUSH
34352: LD_INT 23
34354: PUSH
34355: LD_INT 24
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: ST_TO_ADDR
34364: GO 34479
34366: LD_INT 52
34368: DOUBLE
34369: EQUAL
34370: IFTRUE 34374
34372: GO 34400
34374: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34375: LD_ADDR_VAR 0 3
34379: PUSH
34380: LD_INT 21
34382: PUSH
34383: LD_INT 22
34385: PUSH
34386: LD_INT 23
34388: PUSH
34389: LD_INT 24
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: ST_TO_ADDR
34398: GO 34479
34400: LD_INT 53
34402: DOUBLE
34403: EQUAL
34404: IFTRUE 34408
34406: GO 34426
34408: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34409: LD_ADDR_VAR 0 3
34413: PUSH
34414: LD_INT 23
34416: PUSH
34417: LD_INT 24
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: ST_TO_ADDR
34424: GO 34479
34426: LD_INT 46
34428: DOUBLE
34429: EQUAL
34430: IFTRUE 34434
34432: GO 34452
34434: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34435: LD_ADDR_VAR 0 3
34439: PUSH
34440: LD_INT 23
34442: PUSH
34443: LD_INT 24
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: ST_TO_ADDR
34450: GO 34479
34452: LD_INT 47
34454: DOUBLE
34455: EQUAL
34456: IFTRUE 34460
34458: GO 34478
34460: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34461: LD_ADDR_VAR 0 3
34465: PUSH
34466: LD_INT 23
34468: PUSH
34469: LD_INT 24
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: ST_TO_ADDR
34476: GO 34479
34478: POP
// result := ( chassis in result ) ;
34479: LD_ADDR_VAR 0 3
34483: PUSH
34484: LD_VAR 0 1
34488: PUSH
34489: LD_VAR 0 3
34493: IN
34494: ST_TO_ADDR
// end ;
34495: LD_VAR 0 3
34499: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34500: LD_INT 0
34502: PPUSH
34503: PPUSH
34504: PPUSH
34505: PPUSH
34506: PPUSH
34507: PPUSH
34508: PPUSH
// result := array ;
34509: LD_ADDR_VAR 0 5
34513: PUSH
34514: LD_VAR 0 1
34518: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34519: LD_VAR 0 1
34523: NOT
34524: PUSH
34525: LD_VAR 0 2
34529: NOT
34530: OR
34531: PUSH
34532: LD_VAR 0 3
34536: NOT
34537: OR
34538: PUSH
34539: LD_VAR 0 2
34543: PUSH
34544: LD_VAR 0 1
34548: GREATER
34549: OR
34550: PUSH
34551: LD_VAR 0 3
34555: PUSH
34556: LD_VAR 0 1
34560: GREATER
34561: OR
34562: IFFALSE 34566
// exit ;
34564: GO 34862
// if direction then
34566: LD_VAR 0 4
34570: IFFALSE 34634
// begin d := 1 ;
34572: LD_ADDR_VAR 0 9
34576: PUSH
34577: LD_INT 1
34579: ST_TO_ADDR
// if i_from > i_to then
34580: LD_VAR 0 2
34584: PUSH
34585: LD_VAR 0 3
34589: GREATER
34590: IFFALSE 34616
// length := ( array - i_from ) + i_to else
34592: LD_ADDR_VAR 0 11
34596: PUSH
34597: LD_VAR 0 1
34601: PUSH
34602: LD_VAR 0 2
34606: MINUS
34607: PUSH
34608: LD_VAR 0 3
34612: PLUS
34613: ST_TO_ADDR
34614: GO 34632
// length := i_to - i_from ;
34616: LD_ADDR_VAR 0 11
34620: PUSH
34621: LD_VAR 0 3
34625: PUSH
34626: LD_VAR 0 2
34630: MINUS
34631: ST_TO_ADDR
// end else
34632: GO 34695
// begin d := - 1 ;
34634: LD_ADDR_VAR 0 9
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: ST_TO_ADDR
// if i_from > i_to then
34643: LD_VAR 0 2
34647: PUSH
34648: LD_VAR 0 3
34652: GREATER
34653: IFFALSE 34673
// length := i_from - i_to else
34655: LD_ADDR_VAR 0 11
34659: PUSH
34660: LD_VAR 0 2
34664: PUSH
34665: LD_VAR 0 3
34669: MINUS
34670: ST_TO_ADDR
34671: GO 34695
// length := ( array - i_to ) + i_from ;
34673: LD_ADDR_VAR 0 11
34677: PUSH
34678: LD_VAR 0 1
34682: PUSH
34683: LD_VAR 0 3
34687: MINUS
34688: PUSH
34689: LD_VAR 0 2
34693: PLUS
34694: ST_TO_ADDR
// end ; if not length then
34695: LD_VAR 0 11
34699: NOT
34700: IFFALSE 34704
// exit ;
34702: GO 34862
// tmp := array ;
34704: LD_ADDR_VAR 0 10
34708: PUSH
34709: LD_VAR 0 1
34713: ST_TO_ADDR
// for i = 1 to length do
34714: LD_ADDR_VAR 0 6
34718: PUSH
34719: DOUBLE
34720: LD_INT 1
34722: DEC
34723: ST_TO_ADDR
34724: LD_VAR 0 11
34728: PUSH
34729: FOR_TO
34730: IFFALSE 34850
// begin for j = 1 to array do
34732: LD_ADDR_VAR 0 7
34736: PUSH
34737: DOUBLE
34738: LD_INT 1
34740: DEC
34741: ST_TO_ADDR
34742: LD_VAR 0 1
34746: PUSH
34747: FOR_TO
34748: IFFALSE 34836
// begin k := j + d ;
34750: LD_ADDR_VAR 0 8
34754: PUSH
34755: LD_VAR 0 7
34759: PUSH
34760: LD_VAR 0 9
34764: PLUS
34765: ST_TO_ADDR
// if k > array then
34766: LD_VAR 0 8
34770: PUSH
34771: LD_VAR 0 1
34775: GREATER
34776: IFFALSE 34786
// k := 1 ;
34778: LD_ADDR_VAR 0 8
34782: PUSH
34783: LD_INT 1
34785: ST_TO_ADDR
// if not k then
34786: LD_VAR 0 8
34790: NOT
34791: IFFALSE 34803
// k := array ;
34793: LD_ADDR_VAR 0 8
34797: PUSH
34798: LD_VAR 0 1
34802: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34803: LD_ADDR_VAR 0 10
34807: PUSH
34808: LD_VAR 0 10
34812: PPUSH
34813: LD_VAR 0 8
34817: PPUSH
34818: LD_VAR 0 1
34822: PUSH
34823: LD_VAR 0 7
34827: ARRAY
34828: PPUSH
34829: CALL_OW 1
34833: ST_TO_ADDR
// end ;
34834: GO 34747
34836: POP
34837: POP
// array := tmp ;
34838: LD_ADDR_VAR 0 1
34842: PUSH
34843: LD_VAR 0 10
34847: ST_TO_ADDR
// end ;
34848: GO 34729
34850: POP
34851: POP
// result := array ;
34852: LD_ADDR_VAR 0 5
34856: PUSH
34857: LD_VAR 0 1
34861: ST_TO_ADDR
// end ;
34862: LD_VAR 0 5
34866: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34867: LD_INT 0
34869: PPUSH
34870: PPUSH
// result := 0 ;
34871: LD_ADDR_VAR 0 3
34875: PUSH
34876: LD_INT 0
34878: ST_TO_ADDR
// if not array or not value in array then
34879: LD_VAR 0 1
34883: NOT
34884: PUSH
34885: LD_VAR 0 2
34889: PUSH
34890: LD_VAR 0 1
34894: IN
34895: NOT
34896: OR
34897: IFFALSE 34901
// exit ;
34899: GO 34955
// for i = 1 to array do
34901: LD_ADDR_VAR 0 4
34905: PUSH
34906: DOUBLE
34907: LD_INT 1
34909: DEC
34910: ST_TO_ADDR
34911: LD_VAR 0 1
34915: PUSH
34916: FOR_TO
34917: IFFALSE 34953
// if value = array [ i ] then
34919: LD_VAR 0 2
34923: PUSH
34924: LD_VAR 0 1
34928: PUSH
34929: LD_VAR 0 4
34933: ARRAY
34934: EQUAL
34935: IFFALSE 34951
// begin result := i ;
34937: LD_ADDR_VAR 0 3
34941: PUSH
34942: LD_VAR 0 4
34946: ST_TO_ADDR
// exit ;
34947: POP
34948: POP
34949: GO 34955
// end ;
34951: GO 34916
34953: POP
34954: POP
// end ;
34955: LD_VAR 0 3
34959: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34960: LD_INT 0
34962: PPUSH
// vc_chassis := chassis ;
34963: LD_ADDR_OWVAR 37
34967: PUSH
34968: LD_VAR 0 1
34972: ST_TO_ADDR
// vc_engine := engine ;
34973: LD_ADDR_OWVAR 39
34977: PUSH
34978: LD_VAR 0 2
34982: ST_TO_ADDR
// vc_control := control ;
34983: LD_ADDR_OWVAR 38
34987: PUSH
34988: LD_VAR 0 3
34992: ST_TO_ADDR
// vc_weapon := weapon ;
34993: LD_ADDR_OWVAR 40
34997: PUSH
34998: LD_VAR 0 4
35002: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35003: LD_ADDR_OWVAR 41
35007: PUSH
35008: LD_VAR 0 5
35012: ST_TO_ADDR
// end ;
35013: LD_VAR 0 6
35017: RET
// export function WantPlant ( unit ) ; var task ; begin
35018: LD_INT 0
35020: PPUSH
35021: PPUSH
// result := false ;
35022: LD_ADDR_VAR 0 2
35026: PUSH
35027: LD_INT 0
35029: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35030: LD_ADDR_VAR 0 3
35034: PUSH
35035: LD_VAR 0 1
35039: PPUSH
35040: CALL_OW 437
35044: ST_TO_ADDR
// if task then
35045: LD_VAR 0 3
35049: IFFALSE 35077
// if task [ 1 ] [ 1 ] = p then
35051: LD_VAR 0 3
35055: PUSH
35056: LD_INT 1
35058: ARRAY
35059: PUSH
35060: LD_INT 1
35062: ARRAY
35063: PUSH
35064: LD_STRING p
35066: EQUAL
35067: IFFALSE 35077
// result := true ;
35069: LD_ADDR_VAR 0 2
35073: PUSH
35074: LD_INT 1
35076: ST_TO_ADDR
// end ;
35077: LD_VAR 0 2
35081: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35082: LD_INT 0
35084: PPUSH
35085: PPUSH
35086: PPUSH
35087: PPUSH
// if pos < 1 then
35088: LD_VAR 0 2
35092: PUSH
35093: LD_INT 1
35095: LESS
35096: IFFALSE 35100
// exit ;
35098: GO 35403
// if pos = 1 then
35100: LD_VAR 0 2
35104: PUSH
35105: LD_INT 1
35107: EQUAL
35108: IFFALSE 35141
// result := Replace ( arr , pos [ 1 ] , value ) else
35110: LD_ADDR_VAR 0 4
35114: PUSH
35115: LD_VAR 0 1
35119: PPUSH
35120: LD_VAR 0 2
35124: PUSH
35125: LD_INT 1
35127: ARRAY
35128: PPUSH
35129: LD_VAR 0 3
35133: PPUSH
35134: CALL_OW 1
35138: ST_TO_ADDR
35139: GO 35403
// begin tmp := arr ;
35141: LD_ADDR_VAR 0 6
35145: PUSH
35146: LD_VAR 0 1
35150: ST_TO_ADDR
// s_arr := [ tmp ] ;
35151: LD_ADDR_VAR 0 7
35155: PUSH
35156: LD_VAR 0 6
35160: PUSH
35161: EMPTY
35162: LIST
35163: ST_TO_ADDR
// for i = 1 to pos - 1 do
35164: LD_ADDR_VAR 0 5
35168: PUSH
35169: DOUBLE
35170: LD_INT 1
35172: DEC
35173: ST_TO_ADDR
35174: LD_VAR 0 2
35178: PUSH
35179: LD_INT 1
35181: MINUS
35182: PUSH
35183: FOR_TO
35184: IFFALSE 35229
// begin tmp := tmp [ pos [ i ] ] ;
35186: LD_ADDR_VAR 0 6
35190: PUSH
35191: LD_VAR 0 6
35195: PUSH
35196: LD_VAR 0 2
35200: PUSH
35201: LD_VAR 0 5
35205: ARRAY
35206: ARRAY
35207: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35208: LD_ADDR_VAR 0 7
35212: PUSH
35213: LD_VAR 0 7
35217: PUSH
35218: LD_VAR 0 6
35222: PUSH
35223: EMPTY
35224: LIST
35225: ADD
35226: ST_TO_ADDR
// end ;
35227: GO 35183
35229: POP
35230: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35231: LD_ADDR_VAR 0 6
35235: PUSH
35236: LD_VAR 0 6
35240: PPUSH
35241: LD_VAR 0 2
35245: PUSH
35246: LD_VAR 0 2
35250: ARRAY
35251: PPUSH
35252: LD_VAR 0 3
35256: PPUSH
35257: CALL_OW 1
35261: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35262: LD_ADDR_VAR 0 7
35266: PUSH
35267: LD_VAR 0 7
35271: PPUSH
35272: LD_VAR 0 7
35276: PPUSH
35277: LD_VAR 0 6
35281: PPUSH
35282: CALL_OW 1
35286: ST_TO_ADDR
// for i = s_arr downto 2 do
35287: LD_ADDR_VAR 0 5
35291: PUSH
35292: DOUBLE
35293: LD_VAR 0 7
35297: INC
35298: ST_TO_ADDR
35299: LD_INT 2
35301: PUSH
35302: FOR_DOWNTO
35303: IFFALSE 35387
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35305: LD_ADDR_VAR 0 6
35309: PUSH
35310: LD_VAR 0 7
35314: PUSH
35315: LD_VAR 0 5
35319: PUSH
35320: LD_INT 1
35322: MINUS
35323: ARRAY
35324: PPUSH
35325: LD_VAR 0 2
35329: PUSH
35330: LD_VAR 0 5
35334: PUSH
35335: LD_INT 1
35337: MINUS
35338: ARRAY
35339: PPUSH
35340: LD_VAR 0 7
35344: PUSH
35345: LD_VAR 0 5
35349: ARRAY
35350: PPUSH
35351: CALL_OW 1
35355: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35356: LD_ADDR_VAR 0 7
35360: PUSH
35361: LD_VAR 0 7
35365: PPUSH
35366: LD_VAR 0 5
35370: PUSH
35371: LD_INT 1
35373: MINUS
35374: PPUSH
35375: LD_VAR 0 6
35379: PPUSH
35380: CALL_OW 1
35384: ST_TO_ADDR
// end ;
35385: GO 35302
35387: POP
35388: POP
// result := s_arr [ 1 ] ;
35389: LD_ADDR_VAR 0 4
35393: PUSH
35394: LD_VAR 0 7
35398: PUSH
35399: LD_INT 1
35401: ARRAY
35402: ST_TO_ADDR
// end ; end ;
35403: LD_VAR 0 4
35407: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35408: LD_INT 0
35410: PPUSH
35411: PPUSH
// if not list then
35412: LD_VAR 0 1
35416: NOT
35417: IFFALSE 35421
// exit ;
35419: GO 35512
// i := list [ pos1 ] ;
35421: LD_ADDR_VAR 0 5
35425: PUSH
35426: LD_VAR 0 1
35430: PUSH
35431: LD_VAR 0 2
35435: ARRAY
35436: ST_TO_ADDR
// if not i then
35437: LD_VAR 0 5
35441: NOT
35442: IFFALSE 35446
// exit ;
35444: GO 35512
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35446: LD_ADDR_VAR 0 1
35450: PUSH
35451: LD_VAR 0 1
35455: PPUSH
35456: LD_VAR 0 2
35460: PPUSH
35461: LD_VAR 0 1
35465: PUSH
35466: LD_VAR 0 3
35470: ARRAY
35471: PPUSH
35472: CALL_OW 1
35476: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35477: LD_ADDR_VAR 0 1
35481: PUSH
35482: LD_VAR 0 1
35486: PPUSH
35487: LD_VAR 0 3
35491: PPUSH
35492: LD_VAR 0 5
35496: PPUSH
35497: CALL_OW 1
35501: ST_TO_ADDR
// result := list ;
35502: LD_ADDR_VAR 0 4
35506: PUSH
35507: LD_VAR 0 1
35511: ST_TO_ADDR
// end ;
35512: LD_VAR 0 4
35516: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35517: LD_INT 0
35519: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35520: LD_ADDR_VAR 0 5
35524: PUSH
35525: LD_VAR 0 1
35529: PPUSH
35530: CALL_OW 250
35534: PPUSH
35535: LD_VAR 0 1
35539: PPUSH
35540: CALL_OW 251
35544: PPUSH
35545: LD_VAR 0 2
35549: PPUSH
35550: LD_VAR 0 3
35554: PPUSH
35555: LD_VAR 0 4
35559: PPUSH
35560: CALL 35570 0 5
35564: ST_TO_ADDR
// end ;
35565: LD_VAR 0 5
35569: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35570: LD_INT 0
35572: PPUSH
35573: PPUSH
35574: PPUSH
35575: PPUSH
// if not list then
35576: LD_VAR 0 3
35580: NOT
35581: IFFALSE 35585
// exit ;
35583: GO 35973
// result := [ ] ;
35585: LD_ADDR_VAR 0 6
35589: PUSH
35590: EMPTY
35591: ST_TO_ADDR
// for i in list do
35592: LD_ADDR_VAR 0 7
35596: PUSH
35597: LD_VAR 0 3
35601: PUSH
35602: FOR_IN
35603: IFFALSE 35805
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35605: LD_ADDR_VAR 0 9
35609: PUSH
35610: LD_VAR 0 7
35614: PPUSH
35615: LD_VAR 0 1
35619: PPUSH
35620: LD_VAR 0 2
35624: PPUSH
35625: CALL_OW 297
35629: ST_TO_ADDR
// if not result then
35630: LD_VAR 0 6
35634: NOT
35635: IFFALSE 35661
// result := [ [ i , tmp ] ] else
35637: LD_ADDR_VAR 0 6
35641: PUSH
35642: LD_VAR 0 7
35646: PUSH
35647: LD_VAR 0 9
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: EMPTY
35657: LIST
35658: ST_TO_ADDR
35659: GO 35803
// begin if result [ result ] [ 2 ] < tmp then
35661: LD_VAR 0 6
35665: PUSH
35666: LD_VAR 0 6
35670: ARRAY
35671: PUSH
35672: LD_INT 2
35674: ARRAY
35675: PUSH
35676: LD_VAR 0 9
35680: LESS
35681: IFFALSE 35723
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35683: LD_ADDR_VAR 0 6
35687: PUSH
35688: LD_VAR 0 6
35692: PPUSH
35693: LD_VAR 0 6
35697: PUSH
35698: LD_INT 1
35700: PLUS
35701: PPUSH
35702: LD_VAR 0 7
35706: PUSH
35707: LD_VAR 0 9
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PPUSH
35716: CALL_OW 2
35720: ST_TO_ADDR
35721: GO 35803
// for j = 1 to result do
35723: LD_ADDR_VAR 0 8
35727: PUSH
35728: DOUBLE
35729: LD_INT 1
35731: DEC
35732: ST_TO_ADDR
35733: LD_VAR 0 6
35737: PUSH
35738: FOR_TO
35739: IFFALSE 35801
// begin if tmp < result [ j ] [ 2 ] then
35741: LD_VAR 0 9
35745: PUSH
35746: LD_VAR 0 6
35750: PUSH
35751: LD_VAR 0 8
35755: ARRAY
35756: PUSH
35757: LD_INT 2
35759: ARRAY
35760: LESS
35761: IFFALSE 35799
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35763: LD_ADDR_VAR 0 6
35767: PUSH
35768: LD_VAR 0 6
35772: PPUSH
35773: LD_VAR 0 8
35777: PPUSH
35778: LD_VAR 0 7
35782: PUSH
35783: LD_VAR 0 9
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PPUSH
35792: CALL_OW 2
35796: ST_TO_ADDR
// break ;
35797: GO 35801
// end ; end ;
35799: GO 35738
35801: POP
35802: POP
// end ; end ;
35803: GO 35602
35805: POP
35806: POP
// if result and not asc then
35807: LD_VAR 0 6
35811: PUSH
35812: LD_VAR 0 4
35816: NOT
35817: AND
35818: IFFALSE 35893
// begin tmp := result ;
35820: LD_ADDR_VAR 0 9
35824: PUSH
35825: LD_VAR 0 6
35829: ST_TO_ADDR
// for i = tmp downto 1 do
35830: LD_ADDR_VAR 0 7
35834: PUSH
35835: DOUBLE
35836: LD_VAR 0 9
35840: INC
35841: ST_TO_ADDR
35842: LD_INT 1
35844: PUSH
35845: FOR_DOWNTO
35846: IFFALSE 35891
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35848: LD_ADDR_VAR 0 6
35852: PUSH
35853: LD_VAR 0 6
35857: PPUSH
35858: LD_VAR 0 9
35862: PUSH
35863: LD_VAR 0 7
35867: MINUS
35868: PUSH
35869: LD_INT 1
35871: PLUS
35872: PPUSH
35873: LD_VAR 0 9
35877: PUSH
35878: LD_VAR 0 7
35882: ARRAY
35883: PPUSH
35884: CALL_OW 1
35888: ST_TO_ADDR
35889: GO 35845
35891: POP
35892: POP
// end ; tmp := [ ] ;
35893: LD_ADDR_VAR 0 9
35897: PUSH
35898: EMPTY
35899: ST_TO_ADDR
// if mode then
35900: LD_VAR 0 5
35904: IFFALSE 35973
// begin for i = 1 to result do
35906: LD_ADDR_VAR 0 7
35910: PUSH
35911: DOUBLE
35912: LD_INT 1
35914: DEC
35915: ST_TO_ADDR
35916: LD_VAR 0 6
35920: PUSH
35921: FOR_TO
35922: IFFALSE 35961
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35924: LD_ADDR_VAR 0 9
35928: PUSH
35929: LD_VAR 0 9
35933: PPUSH
35934: LD_VAR 0 7
35938: PPUSH
35939: LD_VAR 0 6
35943: PUSH
35944: LD_VAR 0 7
35948: ARRAY
35949: PUSH
35950: LD_INT 1
35952: ARRAY
35953: PPUSH
35954: CALL_OW 1
35958: ST_TO_ADDR
35959: GO 35921
35961: POP
35962: POP
// result := tmp ;
35963: LD_ADDR_VAR 0 6
35967: PUSH
35968: LD_VAR 0 9
35972: ST_TO_ADDR
// end ; end ;
35973: LD_VAR 0 6
35977: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35978: LD_INT 0
35980: PPUSH
35981: PPUSH
35982: PPUSH
35983: PPUSH
35984: PPUSH
35985: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35986: LD_ADDR_VAR 0 5
35990: PUSH
35991: LD_INT 0
35993: PUSH
35994: LD_INT 0
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: EMPTY
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: ST_TO_ADDR
// if not x or not y then
36008: LD_VAR 0 2
36012: NOT
36013: PUSH
36014: LD_VAR 0 3
36018: NOT
36019: OR
36020: IFFALSE 36024
// exit ;
36022: GO 37676
// if not range then
36024: LD_VAR 0 4
36028: NOT
36029: IFFALSE 36039
// range := 10 ;
36031: LD_ADDR_VAR 0 4
36035: PUSH
36036: LD_INT 10
36038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36039: LD_ADDR_VAR 0 8
36043: PUSH
36044: LD_INT 81
36046: PUSH
36047: LD_VAR 0 1
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 92
36058: PUSH
36059: LD_VAR 0 2
36063: PUSH
36064: LD_VAR 0 3
36068: PUSH
36069: LD_VAR 0 4
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 3
36082: PUSH
36083: LD_INT 21
36085: PUSH
36086: LD_INT 3
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: PPUSH
36102: CALL_OW 69
36106: ST_TO_ADDR
// if not tmp then
36107: LD_VAR 0 8
36111: NOT
36112: IFFALSE 36116
// exit ;
36114: GO 37676
// for i in tmp do
36116: LD_ADDR_VAR 0 6
36120: PUSH
36121: LD_VAR 0 8
36125: PUSH
36126: FOR_IN
36127: IFFALSE 37651
// begin points := [ 0 , 0 , 0 ] ;
36129: LD_ADDR_VAR 0 9
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: LD_INT 0
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: LIST
36147: ST_TO_ADDR
// bpoints := 1 ;
36148: LD_ADDR_VAR 0 10
36152: PUSH
36153: LD_INT 1
36155: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36156: LD_VAR 0 6
36160: PPUSH
36161: CALL_OW 247
36165: PUSH
36166: LD_INT 1
36168: DOUBLE
36169: EQUAL
36170: IFTRUE 36174
36172: GO 36752
36174: POP
// begin if GetClass ( i ) = 1 then
36175: LD_VAR 0 6
36179: PPUSH
36180: CALL_OW 257
36184: PUSH
36185: LD_INT 1
36187: EQUAL
36188: IFFALSE 36209
// points := [ 10 , 5 , 3 ] ;
36190: LD_ADDR_VAR 0 9
36194: PUSH
36195: LD_INT 10
36197: PUSH
36198: LD_INT 5
36200: PUSH
36201: LD_INT 3
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: LIST
36208: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36209: LD_VAR 0 6
36213: PPUSH
36214: CALL_OW 257
36218: PUSH
36219: LD_INT 2
36221: PUSH
36222: LD_INT 3
36224: PUSH
36225: LD_INT 4
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: LIST
36232: IN
36233: IFFALSE 36254
// points := [ 3 , 2 , 1 ] ;
36235: LD_ADDR_VAR 0 9
36239: PUSH
36240: LD_INT 3
36242: PUSH
36243: LD_INT 2
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: LIST
36253: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36254: LD_VAR 0 6
36258: PPUSH
36259: CALL_OW 257
36263: PUSH
36264: LD_INT 5
36266: EQUAL
36267: IFFALSE 36288
// points := [ 130 , 5 , 2 ] ;
36269: LD_ADDR_VAR 0 9
36273: PUSH
36274: LD_INT 130
36276: PUSH
36277: LD_INT 5
36279: PUSH
36280: LD_INT 2
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: LIST
36287: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36288: LD_VAR 0 6
36292: PPUSH
36293: CALL_OW 257
36297: PUSH
36298: LD_INT 8
36300: EQUAL
36301: IFFALSE 36322
// points := [ 35 , 35 , 30 ] ;
36303: LD_ADDR_VAR 0 9
36307: PUSH
36308: LD_INT 35
36310: PUSH
36311: LD_INT 35
36313: PUSH
36314: LD_INT 30
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: LIST
36321: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36322: LD_VAR 0 6
36326: PPUSH
36327: CALL_OW 257
36331: PUSH
36332: LD_INT 9
36334: EQUAL
36335: IFFALSE 36356
// points := [ 20 , 55 , 40 ] ;
36337: LD_ADDR_VAR 0 9
36341: PUSH
36342: LD_INT 20
36344: PUSH
36345: LD_INT 55
36347: PUSH
36348: LD_INT 40
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36356: LD_VAR 0 6
36360: PPUSH
36361: CALL_OW 257
36365: PUSH
36366: LD_INT 12
36368: PUSH
36369: LD_INT 16
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: IN
36376: IFFALSE 36397
// points := [ 5 , 3 , 2 ] ;
36378: LD_ADDR_VAR 0 9
36382: PUSH
36383: LD_INT 5
36385: PUSH
36386: LD_INT 3
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: LIST
36396: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36397: LD_VAR 0 6
36401: PPUSH
36402: CALL_OW 257
36406: PUSH
36407: LD_INT 17
36409: EQUAL
36410: IFFALSE 36431
// points := [ 100 , 50 , 75 ] ;
36412: LD_ADDR_VAR 0 9
36416: PUSH
36417: LD_INT 100
36419: PUSH
36420: LD_INT 50
36422: PUSH
36423: LD_INT 75
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: LIST
36430: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36431: LD_VAR 0 6
36435: PPUSH
36436: CALL_OW 257
36440: PUSH
36441: LD_INT 15
36443: EQUAL
36444: IFFALSE 36465
// points := [ 10 , 5 , 3 ] ;
36446: LD_ADDR_VAR 0 9
36450: PUSH
36451: LD_INT 10
36453: PUSH
36454: LD_INT 5
36456: PUSH
36457: LD_INT 3
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: LIST
36464: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36465: LD_VAR 0 6
36469: PPUSH
36470: CALL_OW 257
36474: PUSH
36475: LD_INT 14
36477: EQUAL
36478: IFFALSE 36499
// points := [ 10 , 0 , 0 ] ;
36480: LD_ADDR_VAR 0 9
36484: PUSH
36485: LD_INT 10
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: LIST
36498: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36499: LD_VAR 0 6
36503: PPUSH
36504: CALL_OW 257
36508: PUSH
36509: LD_INT 11
36511: EQUAL
36512: IFFALSE 36533
// points := [ 30 , 10 , 5 ] ;
36514: LD_ADDR_VAR 0 9
36518: PUSH
36519: LD_INT 30
36521: PUSH
36522: LD_INT 10
36524: PUSH
36525: LD_INT 5
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: LIST
36532: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36533: LD_VAR 0 1
36537: PPUSH
36538: LD_INT 5
36540: PPUSH
36541: CALL_OW 321
36545: PUSH
36546: LD_INT 2
36548: EQUAL
36549: IFFALSE 36566
// bpoints := bpoints * 1.8 ;
36551: LD_ADDR_VAR 0 10
36555: PUSH
36556: LD_VAR 0 10
36560: PUSH
36561: LD_REAL  1.80000000000000E+0000
36564: MUL
36565: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36566: LD_VAR 0 6
36570: PPUSH
36571: CALL_OW 257
36575: PUSH
36576: LD_INT 1
36578: PUSH
36579: LD_INT 2
36581: PUSH
36582: LD_INT 3
36584: PUSH
36585: LD_INT 4
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: IN
36594: PUSH
36595: LD_VAR 0 1
36599: PPUSH
36600: LD_INT 51
36602: PPUSH
36603: CALL_OW 321
36607: PUSH
36608: LD_INT 2
36610: EQUAL
36611: AND
36612: IFFALSE 36629
// bpoints := bpoints * 1.2 ;
36614: LD_ADDR_VAR 0 10
36618: PUSH
36619: LD_VAR 0 10
36623: PUSH
36624: LD_REAL  1.20000000000000E+0000
36627: MUL
36628: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36629: LD_VAR 0 6
36633: PPUSH
36634: CALL_OW 257
36638: PUSH
36639: LD_INT 5
36641: PUSH
36642: LD_INT 7
36644: PUSH
36645: LD_INT 9
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: LIST
36652: IN
36653: PUSH
36654: LD_VAR 0 1
36658: PPUSH
36659: LD_INT 52
36661: PPUSH
36662: CALL_OW 321
36666: PUSH
36667: LD_INT 2
36669: EQUAL
36670: AND
36671: IFFALSE 36688
// bpoints := bpoints * 1.5 ;
36673: LD_ADDR_VAR 0 10
36677: PUSH
36678: LD_VAR 0 10
36682: PUSH
36683: LD_REAL  1.50000000000000E+0000
36686: MUL
36687: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36688: LD_VAR 0 1
36692: PPUSH
36693: LD_INT 66
36695: PPUSH
36696: CALL_OW 321
36700: PUSH
36701: LD_INT 2
36703: EQUAL
36704: IFFALSE 36721
// bpoints := bpoints * 1.1 ;
36706: LD_ADDR_VAR 0 10
36710: PUSH
36711: LD_VAR 0 10
36715: PUSH
36716: LD_REAL  1.10000000000000E+0000
36719: MUL
36720: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36721: LD_ADDR_VAR 0 10
36725: PUSH
36726: LD_VAR 0 10
36730: PUSH
36731: LD_VAR 0 6
36735: PPUSH
36736: LD_INT 1
36738: PPUSH
36739: CALL_OW 259
36743: PUSH
36744: LD_REAL  1.15000000000000E+0000
36747: MUL
36748: MUL
36749: ST_TO_ADDR
// end ; unit_vehicle :
36750: GO 37580
36752: LD_INT 2
36754: DOUBLE
36755: EQUAL
36756: IFTRUE 36760
36758: GO 37568
36760: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36761: LD_VAR 0 6
36765: PPUSH
36766: CALL_OW 264
36770: PUSH
36771: LD_INT 2
36773: PUSH
36774: LD_INT 42
36776: PUSH
36777: LD_INT 24
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: IN
36785: IFFALSE 36806
// points := [ 25 , 5 , 3 ] ;
36787: LD_ADDR_VAR 0 9
36791: PUSH
36792: LD_INT 25
36794: PUSH
36795: LD_INT 5
36797: PUSH
36798: LD_INT 3
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36806: LD_VAR 0 6
36810: PPUSH
36811: CALL_OW 264
36815: PUSH
36816: LD_INT 4
36818: PUSH
36819: LD_INT 43
36821: PUSH
36822: LD_INT 25
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: LIST
36829: IN
36830: IFFALSE 36851
// points := [ 40 , 15 , 5 ] ;
36832: LD_ADDR_VAR 0 9
36836: PUSH
36837: LD_INT 40
36839: PUSH
36840: LD_INT 15
36842: PUSH
36843: LD_INT 5
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: LIST
36850: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36851: LD_VAR 0 6
36855: PPUSH
36856: CALL_OW 264
36860: PUSH
36861: LD_INT 3
36863: PUSH
36864: LD_INT 23
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: IN
36871: IFFALSE 36892
// points := [ 7 , 25 , 8 ] ;
36873: LD_ADDR_VAR 0 9
36877: PUSH
36878: LD_INT 7
36880: PUSH
36881: LD_INT 25
36883: PUSH
36884: LD_INT 8
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: LIST
36891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36892: LD_VAR 0 6
36896: PPUSH
36897: CALL_OW 264
36901: PUSH
36902: LD_INT 5
36904: PUSH
36905: LD_INT 27
36907: PUSH
36908: LD_INT 44
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: LIST
36915: IN
36916: IFFALSE 36937
// points := [ 14 , 50 , 16 ] ;
36918: LD_ADDR_VAR 0 9
36922: PUSH
36923: LD_INT 14
36925: PUSH
36926: LD_INT 50
36928: PUSH
36929: LD_INT 16
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: LIST
36936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36937: LD_VAR 0 6
36941: PPUSH
36942: CALL_OW 264
36946: PUSH
36947: LD_INT 6
36949: PUSH
36950: LD_INT 46
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: IN
36957: IFFALSE 36978
// points := [ 32 , 120 , 70 ] ;
36959: LD_ADDR_VAR 0 9
36963: PUSH
36964: LD_INT 32
36966: PUSH
36967: LD_INT 120
36969: PUSH
36970: LD_INT 70
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: LIST
36977: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36978: LD_VAR 0 6
36982: PPUSH
36983: CALL_OW 264
36987: PUSH
36988: LD_INT 7
36990: PUSH
36991: LD_INT 28
36993: PUSH
36994: LD_INT 45
36996: PUSH
36997: LD_EXP 119
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: IN
37008: IFFALSE 37029
// points := [ 35 , 20 , 45 ] ;
37010: LD_ADDR_VAR 0 9
37014: PUSH
37015: LD_INT 35
37017: PUSH
37018: LD_INT 20
37020: PUSH
37021: LD_INT 45
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: LIST
37028: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37029: LD_VAR 0 6
37033: PPUSH
37034: CALL_OW 264
37038: PUSH
37039: LD_INT 47
37041: PUSH
37042: EMPTY
37043: LIST
37044: IN
37045: IFFALSE 37066
// points := [ 67 , 45 , 75 ] ;
37047: LD_ADDR_VAR 0 9
37051: PUSH
37052: LD_INT 67
37054: PUSH
37055: LD_INT 45
37057: PUSH
37058: LD_INT 75
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: LIST
37065: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37066: LD_VAR 0 6
37070: PPUSH
37071: CALL_OW 264
37075: PUSH
37076: LD_INT 26
37078: PUSH
37079: EMPTY
37080: LIST
37081: IN
37082: IFFALSE 37103
// points := [ 120 , 30 , 80 ] ;
37084: LD_ADDR_VAR 0 9
37088: PUSH
37089: LD_INT 120
37091: PUSH
37092: LD_INT 30
37094: PUSH
37095: LD_INT 80
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: LIST
37102: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37103: LD_VAR 0 6
37107: PPUSH
37108: CALL_OW 264
37112: PUSH
37113: LD_INT 22
37115: PUSH
37116: EMPTY
37117: LIST
37118: IN
37119: IFFALSE 37140
// points := [ 40 , 1 , 1 ] ;
37121: LD_ADDR_VAR 0 9
37125: PUSH
37126: LD_INT 40
37128: PUSH
37129: LD_INT 1
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: LIST
37139: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37140: LD_VAR 0 6
37144: PPUSH
37145: CALL_OW 264
37149: PUSH
37150: LD_INT 29
37152: PUSH
37153: EMPTY
37154: LIST
37155: IN
37156: IFFALSE 37177
// points := [ 70 , 200 , 400 ] ;
37158: LD_ADDR_VAR 0 9
37162: PUSH
37163: LD_INT 70
37165: PUSH
37166: LD_INT 200
37168: PUSH
37169: LD_INT 400
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37177: LD_VAR 0 6
37181: PPUSH
37182: CALL_OW 264
37186: PUSH
37187: LD_INT 14
37189: PUSH
37190: LD_INT 53
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: IN
37197: IFFALSE 37218
// points := [ 40 , 10 , 20 ] ;
37199: LD_ADDR_VAR 0 9
37203: PUSH
37204: LD_INT 40
37206: PUSH
37207: LD_INT 10
37209: PUSH
37210: LD_INT 20
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37218: LD_VAR 0 6
37222: PPUSH
37223: CALL_OW 264
37227: PUSH
37228: LD_INT 9
37230: PUSH
37231: EMPTY
37232: LIST
37233: IN
37234: IFFALSE 37255
// points := [ 5 , 70 , 20 ] ;
37236: LD_ADDR_VAR 0 9
37240: PUSH
37241: LD_INT 5
37243: PUSH
37244: LD_INT 70
37246: PUSH
37247: LD_INT 20
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: LIST
37254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37255: LD_VAR 0 6
37259: PPUSH
37260: CALL_OW 264
37264: PUSH
37265: LD_INT 10
37267: PUSH
37268: EMPTY
37269: LIST
37270: IN
37271: IFFALSE 37292
// points := [ 35 , 110 , 70 ] ;
37273: LD_ADDR_VAR 0 9
37277: PUSH
37278: LD_INT 35
37280: PUSH
37281: LD_INT 110
37283: PUSH
37284: LD_INT 70
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37292: LD_VAR 0 6
37296: PPUSH
37297: CALL_OW 265
37301: PUSH
37302: LD_INT 25
37304: EQUAL
37305: IFFALSE 37326
// points := [ 80 , 65 , 100 ] ;
37307: LD_ADDR_VAR 0 9
37311: PUSH
37312: LD_INT 80
37314: PUSH
37315: LD_INT 65
37317: PUSH
37318: LD_INT 100
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: LIST
37325: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37326: LD_VAR 0 6
37330: PPUSH
37331: CALL_OW 263
37335: PUSH
37336: LD_INT 1
37338: EQUAL
37339: IFFALSE 37374
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37341: LD_ADDR_VAR 0 10
37345: PUSH
37346: LD_VAR 0 10
37350: PUSH
37351: LD_VAR 0 6
37355: PPUSH
37356: CALL_OW 311
37360: PPUSH
37361: LD_INT 3
37363: PPUSH
37364: CALL_OW 259
37368: PUSH
37369: LD_INT 4
37371: MUL
37372: MUL
37373: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37374: LD_VAR 0 6
37378: PPUSH
37379: CALL_OW 263
37383: PUSH
37384: LD_INT 2
37386: EQUAL
37387: IFFALSE 37438
// begin j := IsControledBy ( i ) ;
37389: LD_ADDR_VAR 0 7
37393: PUSH
37394: LD_VAR 0 6
37398: PPUSH
37399: CALL_OW 312
37403: ST_TO_ADDR
// if j then
37404: LD_VAR 0 7
37408: IFFALSE 37438
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37410: LD_ADDR_VAR 0 10
37414: PUSH
37415: LD_VAR 0 10
37419: PUSH
37420: LD_VAR 0 7
37424: PPUSH
37425: LD_INT 3
37427: PPUSH
37428: CALL_OW 259
37432: PUSH
37433: LD_INT 3
37435: MUL
37436: MUL
37437: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37438: LD_VAR 0 6
37442: PPUSH
37443: CALL_OW 264
37447: PUSH
37448: LD_INT 5
37450: PUSH
37451: LD_INT 6
37453: PUSH
37454: LD_INT 46
37456: PUSH
37457: LD_INT 44
37459: PUSH
37460: LD_INT 47
37462: PUSH
37463: LD_INT 45
37465: PUSH
37466: LD_INT 28
37468: PUSH
37469: LD_INT 7
37471: PUSH
37472: LD_INT 27
37474: PUSH
37475: LD_INT 29
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: IN
37490: PUSH
37491: LD_VAR 0 1
37495: PPUSH
37496: LD_INT 52
37498: PPUSH
37499: CALL_OW 321
37503: PUSH
37504: LD_INT 2
37506: EQUAL
37507: AND
37508: IFFALSE 37525
// bpoints := bpoints * 1.2 ;
37510: LD_ADDR_VAR 0 10
37514: PUSH
37515: LD_VAR 0 10
37519: PUSH
37520: LD_REAL  1.20000000000000E+0000
37523: MUL
37524: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37525: LD_VAR 0 6
37529: PPUSH
37530: CALL_OW 264
37534: PUSH
37535: LD_INT 6
37537: PUSH
37538: LD_INT 46
37540: PUSH
37541: LD_INT 47
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: LIST
37548: IN
37549: IFFALSE 37566
// bpoints := bpoints * 1.2 ;
37551: LD_ADDR_VAR 0 10
37555: PUSH
37556: LD_VAR 0 10
37560: PUSH
37561: LD_REAL  1.20000000000000E+0000
37564: MUL
37565: ST_TO_ADDR
// end ; unit_building :
37566: GO 37580
37568: LD_INT 3
37570: DOUBLE
37571: EQUAL
37572: IFTRUE 37576
37574: GO 37579
37576: POP
// ; end ;
37577: GO 37580
37579: POP
// for j = 1 to 3 do
37580: LD_ADDR_VAR 0 7
37584: PUSH
37585: DOUBLE
37586: LD_INT 1
37588: DEC
37589: ST_TO_ADDR
37590: LD_INT 3
37592: PUSH
37593: FOR_TO
37594: IFFALSE 37647
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37596: LD_ADDR_VAR 0 5
37600: PUSH
37601: LD_VAR 0 5
37605: PPUSH
37606: LD_VAR 0 7
37610: PPUSH
37611: LD_VAR 0 5
37615: PUSH
37616: LD_VAR 0 7
37620: ARRAY
37621: PUSH
37622: LD_VAR 0 9
37626: PUSH
37627: LD_VAR 0 7
37631: ARRAY
37632: PUSH
37633: LD_VAR 0 10
37637: MUL
37638: PLUS
37639: PPUSH
37640: CALL_OW 1
37644: ST_TO_ADDR
37645: GO 37593
37647: POP
37648: POP
// end ;
37649: GO 36126
37651: POP
37652: POP
// result := Replace ( result , 4 , tmp ) ;
37653: LD_ADDR_VAR 0 5
37657: PUSH
37658: LD_VAR 0 5
37662: PPUSH
37663: LD_INT 4
37665: PPUSH
37666: LD_VAR 0 8
37670: PPUSH
37671: CALL_OW 1
37675: ST_TO_ADDR
// end ;
37676: LD_VAR 0 5
37680: RET
// export function DangerAtRange ( unit , range ) ; begin
37681: LD_INT 0
37683: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37684: LD_ADDR_VAR 0 3
37688: PUSH
37689: LD_VAR 0 1
37693: PPUSH
37694: CALL_OW 255
37698: PPUSH
37699: LD_VAR 0 1
37703: PPUSH
37704: CALL_OW 250
37708: PPUSH
37709: LD_VAR 0 1
37713: PPUSH
37714: CALL_OW 251
37718: PPUSH
37719: LD_VAR 0 2
37723: PPUSH
37724: CALL 35978 0 4
37728: ST_TO_ADDR
// end ;
37729: LD_VAR 0 3
37733: RET
// export function DangerInArea ( side , area ) ; begin
37734: LD_INT 0
37736: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37737: LD_ADDR_VAR 0 3
37741: PUSH
37742: LD_VAR 0 2
37746: PPUSH
37747: LD_INT 81
37749: PUSH
37750: LD_VAR 0 1
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PPUSH
37759: CALL_OW 70
37763: ST_TO_ADDR
// end ;
37764: LD_VAR 0 3
37768: RET
// export function IsExtension ( b ) ; begin
37769: LD_INT 0
37771: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37772: LD_ADDR_VAR 0 2
37776: PUSH
37777: LD_VAR 0 1
37781: PUSH
37782: LD_INT 23
37784: PUSH
37785: LD_INT 20
37787: PUSH
37788: LD_INT 22
37790: PUSH
37791: LD_INT 17
37793: PUSH
37794: LD_INT 24
37796: PUSH
37797: LD_INT 21
37799: PUSH
37800: LD_INT 19
37802: PUSH
37803: LD_INT 16
37805: PUSH
37806: LD_INT 25
37808: PUSH
37809: LD_INT 18
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: IN
37824: ST_TO_ADDR
// end ;
37825: LD_VAR 0 2
37829: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37830: LD_INT 0
37832: PPUSH
37833: PPUSH
37834: PPUSH
// result := [ ] ;
37835: LD_ADDR_VAR 0 4
37839: PUSH
37840: EMPTY
37841: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37842: LD_ADDR_VAR 0 5
37846: PUSH
37847: LD_VAR 0 2
37851: PPUSH
37852: LD_INT 21
37854: PUSH
37855: LD_INT 3
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PPUSH
37862: CALL_OW 70
37866: ST_TO_ADDR
// if not tmp then
37867: LD_VAR 0 5
37871: NOT
37872: IFFALSE 37876
// exit ;
37874: GO 37940
// if checkLink then
37876: LD_VAR 0 3
37880: IFFALSE 37930
// begin for i in tmp do
37882: LD_ADDR_VAR 0 6
37886: PUSH
37887: LD_VAR 0 5
37891: PUSH
37892: FOR_IN
37893: IFFALSE 37928
// if GetBase ( i ) <> base then
37895: LD_VAR 0 6
37899: PPUSH
37900: CALL_OW 274
37904: PUSH
37905: LD_VAR 0 1
37909: NONEQUAL
37910: IFFALSE 37926
// ComLinkToBase ( base , i ) ;
37912: LD_VAR 0 1
37916: PPUSH
37917: LD_VAR 0 6
37921: PPUSH
37922: CALL_OW 169
37926: GO 37892
37928: POP
37929: POP
// end ; result := tmp ;
37930: LD_ADDR_VAR 0 4
37934: PUSH
37935: LD_VAR 0 5
37939: ST_TO_ADDR
// end ;
37940: LD_VAR 0 4
37944: RET
// export function ComComplete ( units , b ) ; var i ; begin
37945: LD_INT 0
37947: PPUSH
37948: PPUSH
// if not units then
37949: LD_VAR 0 1
37953: NOT
37954: IFFALSE 37958
// exit ;
37956: GO 38048
// for i in units do
37958: LD_ADDR_VAR 0 4
37962: PUSH
37963: LD_VAR 0 1
37967: PUSH
37968: FOR_IN
37969: IFFALSE 38046
// if BuildingStatus ( b ) = bs_build then
37971: LD_VAR 0 2
37975: PPUSH
37976: CALL_OW 461
37980: PUSH
37981: LD_INT 1
37983: EQUAL
37984: IFFALSE 38044
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37986: LD_VAR 0 4
37990: PPUSH
37991: LD_STRING h
37993: PUSH
37994: LD_VAR 0 2
37998: PPUSH
37999: CALL_OW 250
38003: PUSH
38004: LD_VAR 0 2
38008: PPUSH
38009: CALL_OW 251
38013: PUSH
38014: LD_VAR 0 2
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: PUSH
38037: EMPTY
38038: LIST
38039: PPUSH
38040: CALL_OW 446
38044: GO 37968
38046: POP
38047: POP
// end ;
38048: LD_VAR 0 3
38052: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38053: LD_INT 0
38055: PPUSH
38056: PPUSH
38057: PPUSH
38058: PPUSH
38059: PPUSH
38060: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38061: LD_VAR 0 1
38065: NOT
38066: PUSH
38067: LD_VAR 0 1
38071: PPUSH
38072: CALL_OW 263
38076: PUSH
38077: LD_INT 2
38079: NONEQUAL
38080: OR
38081: IFFALSE 38085
// exit ;
38083: GO 38401
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38085: LD_ADDR_VAR 0 6
38089: PUSH
38090: LD_INT 22
38092: PUSH
38093: LD_VAR 0 1
38097: PPUSH
38098: CALL_OW 255
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 2
38109: PUSH
38110: LD_INT 30
38112: PUSH
38113: LD_INT 36
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 34
38122: PUSH
38123: LD_INT 31
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: LIST
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PPUSH
38139: CALL_OW 69
38143: ST_TO_ADDR
// if not tmp then
38144: LD_VAR 0 6
38148: NOT
38149: IFFALSE 38153
// exit ;
38151: GO 38401
// result := [ ] ;
38153: LD_ADDR_VAR 0 2
38157: PUSH
38158: EMPTY
38159: ST_TO_ADDR
// for i in tmp do
38160: LD_ADDR_VAR 0 3
38164: PUSH
38165: LD_VAR 0 6
38169: PUSH
38170: FOR_IN
38171: IFFALSE 38242
// begin t := UnitsInside ( i ) ;
38173: LD_ADDR_VAR 0 4
38177: PUSH
38178: LD_VAR 0 3
38182: PPUSH
38183: CALL_OW 313
38187: ST_TO_ADDR
// if t then
38188: LD_VAR 0 4
38192: IFFALSE 38240
// for j in t do
38194: LD_ADDR_VAR 0 7
38198: PUSH
38199: LD_VAR 0 4
38203: PUSH
38204: FOR_IN
38205: IFFALSE 38238
// result := Replace ( result , result + 1 , j ) ;
38207: LD_ADDR_VAR 0 2
38211: PUSH
38212: LD_VAR 0 2
38216: PPUSH
38217: LD_VAR 0 2
38221: PUSH
38222: LD_INT 1
38224: PLUS
38225: PPUSH
38226: LD_VAR 0 7
38230: PPUSH
38231: CALL_OW 1
38235: ST_TO_ADDR
38236: GO 38204
38238: POP
38239: POP
// end ;
38240: GO 38170
38242: POP
38243: POP
// if not result then
38244: LD_VAR 0 2
38248: NOT
38249: IFFALSE 38253
// exit ;
38251: GO 38401
// mech := result [ 1 ] ;
38253: LD_ADDR_VAR 0 5
38257: PUSH
38258: LD_VAR 0 2
38262: PUSH
38263: LD_INT 1
38265: ARRAY
38266: ST_TO_ADDR
// if result > 1 then
38267: LD_VAR 0 2
38271: PUSH
38272: LD_INT 1
38274: GREATER
38275: IFFALSE 38387
// begin for i = 2 to result do
38277: LD_ADDR_VAR 0 3
38281: PUSH
38282: DOUBLE
38283: LD_INT 2
38285: DEC
38286: ST_TO_ADDR
38287: LD_VAR 0 2
38291: PUSH
38292: FOR_TO
38293: IFFALSE 38385
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38295: LD_ADDR_VAR 0 4
38299: PUSH
38300: LD_VAR 0 2
38304: PUSH
38305: LD_VAR 0 3
38309: ARRAY
38310: PPUSH
38311: LD_INT 3
38313: PPUSH
38314: CALL_OW 259
38318: PUSH
38319: LD_VAR 0 2
38323: PUSH
38324: LD_VAR 0 3
38328: ARRAY
38329: PPUSH
38330: CALL_OW 432
38334: MINUS
38335: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38336: LD_VAR 0 4
38340: PUSH
38341: LD_VAR 0 5
38345: PPUSH
38346: LD_INT 3
38348: PPUSH
38349: CALL_OW 259
38353: PUSH
38354: LD_VAR 0 5
38358: PPUSH
38359: CALL_OW 432
38363: MINUS
38364: GREATEREQUAL
38365: IFFALSE 38383
// mech := result [ i ] ;
38367: LD_ADDR_VAR 0 5
38371: PUSH
38372: LD_VAR 0 2
38376: PUSH
38377: LD_VAR 0 3
38381: ARRAY
38382: ST_TO_ADDR
// end ;
38383: GO 38292
38385: POP
38386: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38387: LD_VAR 0 1
38391: PPUSH
38392: LD_VAR 0 5
38396: PPUSH
38397: CALL_OW 135
// end ;
38401: LD_VAR 0 2
38405: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38406: LD_INT 0
38408: PPUSH
38409: PPUSH
38410: PPUSH
38411: PPUSH
38412: PPUSH
38413: PPUSH
38414: PPUSH
38415: PPUSH
38416: PPUSH
38417: PPUSH
38418: PPUSH
38419: PPUSH
38420: PPUSH
// result := [ ] ;
38421: LD_ADDR_VAR 0 7
38425: PUSH
38426: EMPTY
38427: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38428: LD_VAR 0 1
38432: PPUSH
38433: CALL_OW 266
38437: PUSH
38438: LD_INT 0
38440: PUSH
38441: LD_INT 1
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: IN
38448: NOT
38449: IFFALSE 38453
// exit ;
38451: GO 40087
// if name then
38453: LD_VAR 0 3
38457: IFFALSE 38473
// SetBName ( base_dep , name ) ;
38459: LD_VAR 0 1
38463: PPUSH
38464: LD_VAR 0 3
38468: PPUSH
38469: CALL_OW 500
// base := GetBase ( base_dep ) ;
38473: LD_ADDR_VAR 0 15
38477: PUSH
38478: LD_VAR 0 1
38482: PPUSH
38483: CALL_OW 274
38487: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38488: LD_ADDR_VAR 0 16
38492: PUSH
38493: LD_VAR 0 1
38497: PPUSH
38498: CALL_OW 255
38502: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38503: LD_ADDR_VAR 0 17
38507: PUSH
38508: LD_VAR 0 1
38512: PPUSH
38513: CALL_OW 248
38517: ST_TO_ADDR
// if sources then
38518: LD_VAR 0 5
38522: IFFALSE 38569
// for i = 1 to 3 do
38524: LD_ADDR_VAR 0 8
38528: PUSH
38529: DOUBLE
38530: LD_INT 1
38532: DEC
38533: ST_TO_ADDR
38534: LD_INT 3
38536: PUSH
38537: FOR_TO
38538: IFFALSE 38567
// AddResourceType ( base , i , sources [ i ] ) ;
38540: LD_VAR 0 15
38544: PPUSH
38545: LD_VAR 0 8
38549: PPUSH
38550: LD_VAR 0 5
38554: PUSH
38555: LD_VAR 0 8
38559: ARRAY
38560: PPUSH
38561: CALL_OW 276
38565: GO 38537
38567: POP
38568: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38569: LD_ADDR_VAR 0 18
38573: PUSH
38574: LD_VAR 0 15
38578: PPUSH
38579: LD_VAR 0 2
38583: PPUSH
38584: LD_INT 1
38586: PPUSH
38587: CALL 37830 0 3
38591: ST_TO_ADDR
// InitHc ;
38592: CALL_OW 19
// InitUc ;
38596: CALL_OW 18
// uc_side := side ;
38600: LD_ADDR_OWVAR 20
38604: PUSH
38605: LD_VAR 0 16
38609: ST_TO_ADDR
// uc_nation := nation ;
38610: LD_ADDR_OWVAR 21
38614: PUSH
38615: LD_VAR 0 17
38619: ST_TO_ADDR
// if buildings then
38620: LD_VAR 0 18
38624: IFFALSE 39946
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38626: LD_ADDR_VAR 0 19
38630: PUSH
38631: LD_VAR 0 18
38635: PPUSH
38636: LD_INT 2
38638: PUSH
38639: LD_INT 30
38641: PUSH
38642: LD_INT 29
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 30
38651: PUSH
38652: LD_INT 30
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: LIST
38663: PPUSH
38664: CALL_OW 72
38668: ST_TO_ADDR
// if tmp then
38669: LD_VAR 0 19
38673: IFFALSE 38721
// for i in tmp do
38675: LD_ADDR_VAR 0 8
38679: PUSH
38680: LD_VAR 0 19
38684: PUSH
38685: FOR_IN
38686: IFFALSE 38719
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38688: LD_VAR 0 8
38692: PPUSH
38693: CALL_OW 250
38697: PPUSH
38698: LD_VAR 0 8
38702: PPUSH
38703: CALL_OW 251
38707: PPUSH
38708: LD_VAR 0 16
38712: PPUSH
38713: CALL_OW 441
38717: GO 38685
38719: POP
38720: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38721: LD_VAR 0 18
38725: PPUSH
38726: LD_INT 2
38728: PUSH
38729: LD_INT 30
38731: PUSH
38732: LD_INT 32
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 30
38741: PUSH
38742: LD_INT 33
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: LIST
38753: PPUSH
38754: CALL_OW 72
38758: IFFALSE 38846
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38760: LD_ADDR_VAR 0 8
38764: PUSH
38765: LD_VAR 0 18
38769: PPUSH
38770: LD_INT 2
38772: PUSH
38773: LD_INT 30
38775: PUSH
38776: LD_INT 32
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 30
38785: PUSH
38786: LD_INT 33
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: LIST
38797: PPUSH
38798: CALL_OW 72
38802: PUSH
38803: FOR_IN
38804: IFFALSE 38844
// begin if not GetBWeapon ( i ) then
38806: LD_VAR 0 8
38810: PPUSH
38811: CALL_OW 269
38815: NOT
38816: IFFALSE 38842
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38818: LD_VAR 0 8
38822: PPUSH
38823: LD_VAR 0 8
38827: PPUSH
38828: LD_VAR 0 2
38832: PPUSH
38833: CALL 40092 0 2
38837: PPUSH
38838: CALL_OW 431
// end ;
38842: GO 38803
38844: POP
38845: POP
// end ; for i = 1 to personel do
38846: LD_ADDR_VAR 0 8
38850: PUSH
38851: DOUBLE
38852: LD_INT 1
38854: DEC
38855: ST_TO_ADDR
38856: LD_VAR 0 6
38860: PUSH
38861: FOR_TO
38862: IFFALSE 39926
// begin if i > 4 then
38864: LD_VAR 0 8
38868: PUSH
38869: LD_INT 4
38871: GREATER
38872: IFFALSE 38876
// break ;
38874: GO 39926
// case i of 1 :
38876: LD_VAR 0 8
38880: PUSH
38881: LD_INT 1
38883: DOUBLE
38884: EQUAL
38885: IFTRUE 38889
38887: GO 38969
38889: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38890: LD_ADDR_VAR 0 12
38894: PUSH
38895: LD_VAR 0 18
38899: PPUSH
38900: LD_INT 22
38902: PUSH
38903: LD_VAR 0 16
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 58
38914: PUSH
38915: EMPTY
38916: LIST
38917: PUSH
38918: LD_INT 2
38920: PUSH
38921: LD_INT 30
38923: PUSH
38924: LD_INT 32
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 30
38933: PUSH
38934: LD_INT 4
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 30
38943: PUSH
38944: LD_INT 5
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: LIST
38961: PPUSH
38962: CALL_OW 72
38966: ST_TO_ADDR
38967: GO 39191
38969: LD_INT 2
38971: DOUBLE
38972: EQUAL
38973: IFTRUE 38977
38975: GO 39039
38977: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38978: LD_ADDR_VAR 0 12
38982: PUSH
38983: LD_VAR 0 18
38987: PPUSH
38988: LD_INT 22
38990: PUSH
38991: LD_VAR 0 16
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: PUSH
39003: LD_INT 30
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 30
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: LIST
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PPUSH
39032: CALL_OW 72
39036: ST_TO_ADDR
39037: GO 39191
39039: LD_INT 3
39041: DOUBLE
39042: EQUAL
39043: IFTRUE 39047
39045: GO 39109
39047: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39048: LD_ADDR_VAR 0 12
39052: PUSH
39053: LD_VAR 0 18
39057: PPUSH
39058: LD_INT 22
39060: PUSH
39061: LD_VAR 0 16
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 2
39072: PUSH
39073: LD_INT 30
39075: PUSH
39076: LD_INT 2
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 30
39085: PUSH
39086: LD_INT 3
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PPUSH
39102: CALL_OW 72
39106: ST_TO_ADDR
39107: GO 39191
39109: LD_INT 4
39111: DOUBLE
39112: EQUAL
39113: IFTRUE 39117
39115: GO 39190
39117: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39118: LD_ADDR_VAR 0 12
39122: PUSH
39123: LD_VAR 0 18
39127: PPUSH
39128: LD_INT 22
39130: PUSH
39131: LD_VAR 0 16
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: LD_INT 30
39145: PUSH
39146: LD_INT 6
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 30
39155: PUSH
39156: LD_INT 7
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 30
39165: PUSH
39166: LD_INT 8
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PPUSH
39183: CALL_OW 72
39187: ST_TO_ADDR
39188: GO 39191
39190: POP
// if i = 1 then
39191: LD_VAR 0 8
39195: PUSH
39196: LD_INT 1
39198: EQUAL
39199: IFFALSE 39310
// begin tmp := [ ] ;
39201: LD_ADDR_VAR 0 19
39205: PUSH
39206: EMPTY
39207: ST_TO_ADDR
// for j in f do
39208: LD_ADDR_VAR 0 9
39212: PUSH
39213: LD_VAR 0 12
39217: PUSH
39218: FOR_IN
39219: IFFALSE 39292
// if GetBType ( j ) = b_bunker then
39221: LD_VAR 0 9
39225: PPUSH
39226: CALL_OW 266
39230: PUSH
39231: LD_INT 32
39233: EQUAL
39234: IFFALSE 39261
// tmp := Insert ( tmp , 1 , j ) else
39236: LD_ADDR_VAR 0 19
39240: PUSH
39241: LD_VAR 0 19
39245: PPUSH
39246: LD_INT 1
39248: PPUSH
39249: LD_VAR 0 9
39253: PPUSH
39254: CALL_OW 2
39258: ST_TO_ADDR
39259: GO 39290
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39261: LD_ADDR_VAR 0 19
39265: PUSH
39266: LD_VAR 0 19
39270: PPUSH
39271: LD_VAR 0 19
39275: PUSH
39276: LD_INT 1
39278: PLUS
39279: PPUSH
39280: LD_VAR 0 9
39284: PPUSH
39285: CALL_OW 2
39289: ST_TO_ADDR
39290: GO 39218
39292: POP
39293: POP
// if tmp then
39294: LD_VAR 0 19
39298: IFFALSE 39310
// f := tmp ;
39300: LD_ADDR_VAR 0 12
39304: PUSH
39305: LD_VAR 0 19
39309: ST_TO_ADDR
// end ; x := personel [ i ] ;
39310: LD_ADDR_VAR 0 13
39314: PUSH
39315: LD_VAR 0 6
39319: PUSH
39320: LD_VAR 0 8
39324: ARRAY
39325: ST_TO_ADDR
// if x = - 1 then
39326: LD_VAR 0 13
39330: PUSH
39331: LD_INT 1
39333: NEG
39334: EQUAL
39335: IFFALSE 39544
// begin for j in f do
39337: LD_ADDR_VAR 0 9
39341: PUSH
39342: LD_VAR 0 12
39346: PUSH
39347: FOR_IN
39348: IFFALSE 39540
// repeat InitHc ;
39350: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39354: LD_VAR 0 9
39358: PPUSH
39359: CALL_OW 266
39363: PUSH
39364: LD_INT 5
39366: EQUAL
39367: IFFALSE 39437
// begin if UnitsInside ( j ) < 3 then
39369: LD_VAR 0 9
39373: PPUSH
39374: CALL_OW 313
39378: PUSH
39379: LD_INT 3
39381: LESS
39382: IFFALSE 39418
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39384: LD_INT 0
39386: PPUSH
39387: LD_INT 5
39389: PUSH
39390: LD_INT 8
39392: PUSH
39393: LD_INT 9
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: LIST
39400: PUSH
39401: LD_VAR 0 17
39405: ARRAY
39406: PPUSH
39407: LD_VAR 0 4
39411: PPUSH
39412: CALL_OW 380
39416: GO 39435
// PrepareHuman ( false , i , skill ) ;
39418: LD_INT 0
39420: PPUSH
39421: LD_VAR 0 8
39425: PPUSH
39426: LD_VAR 0 4
39430: PPUSH
39431: CALL_OW 380
// end else
39435: GO 39454
// PrepareHuman ( false , i , skill ) ;
39437: LD_INT 0
39439: PPUSH
39440: LD_VAR 0 8
39444: PPUSH
39445: LD_VAR 0 4
39449: PPUSH
39450: CALL_OW 380
// un := CreateHuman ;
39454: LD_ADDR_VAR 0 14
39458: PUSH
39459: CALL_OW 44
39463: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39464: LD_ADDR_VAR 0 7
39468: PUSH
39469: LD_VAR 0 7
39473: PPUSH
39474: LD_INT 1
39476: PPUSH
39477: LD_VAR 0 14
39481: PPUSH
39482: CALL_OW 2
39486: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39487: LD_VAR 0 14
39491: PPUSH
39492: LD_VAR 0 9
39496: PPUSH
39497: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39501: LD_VAR 0 9
39505: PPUSH
39506: CALL_OW 313
39510: PUSH
39511: LD_INT 6
39513: EQUAL
39514: PUSH
39515: LD_VAR 0 9
39519: PPUSH
39520: CALL_OW 266
39524: PUSH
39525: LD_INT 32
39527: PUSH
39528: LD_INT 31
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: IN
39535: OR
39536: IFFALSE 39350
39538: GO 39347
39540: POP
39541: POP
// end else
39542: GO 39924
// for j = 1 to x do
39544: LD_ADDR_VAR 0 9
39548: PUSH
39549: DOUBLE
39550: LD_INT 1
39552: DEC
39553: ST_TO_ADDR
39554: LD_VAR 0 13
39558: PUSH
39559: FOR_TO
39560: IFFALSE 39922
// begin InitHc ;
39562: CALL_OW 19
// if not f then
39566: LD_VAR 0 12
39570: NOT
39571: IFFALSE 39660
// begin PrepareHuman ( false , i , skill ) ;
39573: LD_INT 0
39575: PPUSH
39576: LD_VAR 0 8
39580: PPUSH
39581: LD_VAR 0 4
39585: PPUSH
39586: CALL_OW 380
// un := CreateHuman ;
39590: LD_ADDR_VAR 0 14
39594: PUSH
39595: CALL_OW 44
39599: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39600: LD_ADDR_VAR 0 7
39604: PUSH
39605: LD_VAR 0 7
39609: PPUSH
39610: LD_INT 1
39612: PPUSH
39613: LD_VAR 0 14
39617: PPUSH
39618: CALL_OW 2
39622: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39623: LD_VAR 0 14
39627: PPUSH
39628: LD_VAR 0 1
39632: PPUSH
39633: CALL_OW 250
39637: PPUSH
39638: LD_VAR 0 1
39642: PPUSH
39643: CALL_OW 251
39647: PPUSH
39648: LD_INT 10
39650: PPUSH
39651: LD_INT 0
39653: PPUSH
39654: CALL_OW 50
// continue ;
39658: GO 39559
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39660: LD_VAR 0 12
39664: PUSH
39665: LD_INT 1
39667: ARRAY
39668: PPUSH
39669: CALL_OW 313
39673: PUSH
39674: LD_VAR 0 12
39678: PUSH
39679: LD_INT 1
39681: ARRAY
39682: PPUSH
39683: CALL_OW 266
39687: PUSH
39688: LD_INT 32
39690: PUSH
39691: LD_INT 31
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: IN
39698: AND
39699: PUSH
39700: LD_VAR 0 12
39704: PUSH
39705: LD_INT 1
39707: ARRAY
39708: PPUSH
39709: CALL_OW 313
39713: PUSH
39714: LD_INT 6
39716: EQUAL
39717: OR
39718: IFFALSE 39738
// f := Delete ( f , 1 ) ;
39720: LD_ADDR_VAR 0 12
39724: PUSH
39725: LD_VAR 0 12
39729: PPUSH
39730: LD_INT 1
39732: PPUSH
39733: CALL_OW 3
39737: ST_TO_ADDR
// if not f then
39738: LD_VAR 0 12
39742: NOT
39743: IFFALSE 39761
// begin x := x + 2 ;
39745: LD_ADDR_VAR 0 13
39749: PUSH
39750: LD_VAR 0 13
39754: PUSH
39755: LD_INT 2
39757: PLUS
39758: ST_TO_ADDR
// continue ;
39759: GO 39559
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39761: LD_VAR 0 12
39765: PUSH
39766: LD_INT 1
39768: ARRAY
39769: PPUSH
39770: CALL_OW 266
39774: PUSH
39775: LD_INT 5
39777: EQUAL
39778: IFFALSE 39852
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39780: LD_VAR 0 12
39784: PUSH
39785: LD_INT 1
39787: ARRAY
39788: PPUSH
39789: CALL_OW 313
39793: PUSH
39794: LD_INT 3
39796: LESS
39797: IFFALSE 39833
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39799: LD_INT 0
39801: PPUSH
39802: LD_INT 5
39804: PUSH
39805: LD_INT 8
39807: PUSH
39808: LD_INT 9
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: LIST
39815: PUSH
39816: LD_VAR 0 17
39820: ARRAY
39821: PPUSH
39822: LD_VAR 0 4
39826: PPUSH
39827: CALL_OW 380
39831: GO 39850
// PrepareHuman ( false , i , skill ) ;
39833: LD_INT 0
39835: PPUSH
39836: LD_VAR 0 8
39840: PPUSH
39841: LD_VAR 0 4
39845: PPUSH
39846: CALL_OW 380
// end else
39850: GO 39869
// PrepareHuman ( false , i , skill ) ;
39852: LD_INT 0
39854: PPUSH
39855: LD_VAR 0 8
39859: PPUSH
39860: LD_VAR 0 4
39864: PPUSH
39865: CALL_OW 380
// un := CreateHuman ;
39869: LD_ADDR_VAR 0 14
39873: PUSH
39874: CALL_OW 44
39878: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39879: LD_ADDR_VAR 0 7
39883: PUSH
39884: LD_VAR 0 7
39888: PPUSH
39889: LD_INT 1
39891: PPUSH
39892: LD_VAR 0 14
39896: PPUSH
39897: CALL_OW 2
39901: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39902: LD_VAR 0 14
39906: PPUSH
39907: LD_VAR 0 12
39911: PUSH
39912: LD_INT 1
39914: ARRAY
39915: PPUSH
39916: CALL_OW 52
// end ;
39920: GO 39559
39922: POP
39923: POP
// end ;
39924: GO 38861
39926: POP
39927: POP
// result := result ^ buildings ;
39928: LD_ADDR_VAR 0 7
39932: PUSH
39933: LD_VAR 0 7
39937: PUSH
39938: LD_VAR 0 18
39942: ADD
39943: ST_TO_ADDR
// end else
39944: GO 40087
// begin for i = 1 to personel do
39946: LD_ADDR_VAR 0 8
39950: PUSH
39951: DOUBLE
39952: LD_INT 1
39954: DEC
39955: ST_TO_ADDR
39956: LD_VAR 0 6
39960: PUSH
39961: FOR_TO
39962: IFFALSE 40085
// begin if i > 4 then
39964: LD_VAR 0 8
39968: PUSH
39969: LD_INT 4
39971: GREATER
39972: IFFALSE 39976
// break ;
39974: GO 40085
// x := personel [ i ] ;
39976: LD_ADDR_VAR 0 13
39980: PUSH
39981: LD_VAR 0 6
39985: PUSH
39986: LD_VAR 0 8
39990: ARRAY
39991: ST_TO_ADDR
// if x = - 1 then
39992: LD_VAR 0 13
39996: PUSH
39997: LD_INT 1
39999: NEG
40000: EQUAL
40001: IFFALSE 40005
// continue ;
40003: GO 39961
// PrepareHuman ( false , i , skill ) ;
40005: LD_INT 0
40007: PPUSH
40008: LD_VAR 0 8
40012: PPUSH
40013: LD_VAR 0 4
40017: PPUSH
40018: CALL_OW 380
// un := CreateHuman ;
40022: LD_ADDR_VAR 0 14
40026: PUSH
40027: CALL_OW 44
40031: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40032: LD_VAR 0 14
40036: PPUSH
40037: LD_VAR 0 1
40041: PPUSH
40042: CALL_OW 250
40046: PPUSH
40047: LD_VAR 0 1
40051: PPUSH
40052: CALL_OW 251
40056: PPUSH
40057: LD_INT 10
40059: PPUSH
40060: LD_INT 0
40062: PPUSH
40063: CALL_OW 50
// result := result ^ un ;
40067: LD_ADDR_VAR 0 7
40071: PUSH
40072: LD_VAR 0 7
40076: PUSH
40077: LD_VAR 0 14
40081: ADD
40082: ST_TO_ADDR
// end ;
40083: GO 39961
40085: POP
40086: POP
// end ; end ;
40087: LD_VAR 0 7
40091: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40092: LD_INT 0
40094: PPUSH
40095: PPUSH
40096: PPUSH
40097: PPUSH
40098: PPUSH
40099: PPUSH
40100: PPUSH
40101: PPUSH
40102: PPUSH
40103: PPUSH
40104: PPUSH
40105: PPUSH
40106: PPUSH
40107: PPUSH
40108: PPUSH
40109: PPUSH
// result := false ;
40110: LD_ADDR_VAR 0 3
40114: PUSH
40115: LD_INT 0
40117: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40118: LD_VAR 0 1
40122: NOT
40123: PUSH
40124: LD_VAR 0 1
40128: PPUSH
40129: CALL_OW 266
40133: PUSH
40134: LD_INT 32
40136: PUSH
40137: LD_INT 33
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: IN
40144: NOT
40145: OR
40146: IFFALSE 40150
// exit ;
40148: GO 41259
// nat := GetNation ( tower ) ;
40150: LD_ADDR_VAR 0 12
40154: PUSH
40155: LD_VAR 0 1
40159: PPUSH
40160: CALL_OW 248
40164: ST_TO_ADDR
// side := GetSide ( tower ) ;
40165: LD_ADDR_VAR 0 16
40169: PUSH
40170: LD_VAR 0 1
40174: PPUSH
40175: CALL_OW 255
40179: ST_TO_ADDR
// x := GetX ( tower ) ;
40180: LD_ADDR_VAR 0 10
40184: PUSH
40185: LD_VAR 0 1
40189: PPUSH
40190: CALL_OW 250
40194: ST_TO_ADDR
// y := GetY ( tower ) ;
40195: LD_ADDR_VAR 0 11
40199: PUSH
40200: LD_VAR 0 1
40204: PPUSH
40205: CALL_OW 251
40209: ST_TO_ADDR
// if not x or not y then
40210: LD_VAR 0 10
40214: NOT
40215: PUSH
40216: LD_VAR 0 11
40220: NOT
40221: OR
40222: IFFALSE 40226
// exit ;
40224: GO 41259
// weapon := 0 ;
40226: LD_ADDR_VAR 0 18
40230: PUSH
40231: LD_INT 0
40233: ST_TO_ADDR
// fac_list := [ ] ;
40234: LD_ADDR_VAR 0 17
40238: PUSH
40239: EMPTY
40240: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40241: LD_ADDR_VAR 0 6
40245: PUSH
40246: LD_VAR 0 1
40250: PPUSH
40251: CALL_OW 274
40255: PPUSH
40256: LD_VAR 0 2
40260: PPUSH
40261: LD_INT 0
40263: PPUSH
40264: CALL 37830 0 3
40268: PPUSH
40269: LD_INT 30
40271: PUSH
40272: LD_INT 3
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PPUSH
40279: CALL_OW 72
40283: ST_TO_ADDR
// if not factories then
40284: LD_VAR 0 6
40288: NOT
40289: IFFALSE 40293
// exit ;
40291: GO 41259
// for i in factories do
40293: LD_ADDR_VAR 0 8
40297: PUSH
40298: LD_VAR 0 6
40302: PUSH
40303: FOR_IN
40304: IFFALSE 40329
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40306: LD_ADDR_VAR 0 17
40310: PUSH
40311: LD_VAR 0 17
40315: PUSH
40316: LD_VAR 0 8
40320: PPUSH
40321: CALL_OW 478
40325: UNION
40326: ST_TO_ADDR
40327: GO 40303
40329: POP
40330: POP
// if not fac_list then
40331: LD_VAR 0 17
40335: NOT
40336: IFFALSE 40340
// exit ;
40338: GO 41259
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40340: LD_ADDR_VAR 0 5
40344: PUSH
40345: LD_INT 4
40347: PUSH
40348: LD_INT 5
40350: PUSH
40351: LD_INT 9
40353: PUSH
40354: LD_INT 10
40356: PUSH
40357: LD_INT 6
40359: PUSH
40360: LD_INT 7
40362: PUSH
40363: LD_INT 11
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 27
40377: PUSH
40378: LD_INT 28
40380: PUSH
40381: LD_INT 26
40383: PUSH
40384: LD_INT 30
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 43
40395: PUSH
40396: LD_INT 44
40398: PUSH
40399: LD_INT 46
40401: PUSH
40402: LD_INT 45
40404: PUSH
40405: LD_INT 47
40407: PUSH
40408: LD_INT 49
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: LIST
40423: PUSH
40424: LD_VAR 0 12
40428: ARRAY
40429: ST_TO_ADDR
// list := list isect fac_list ;
40430: LD_ADDR_VAR 0 5
40434: PUSH
40435: LD_VAR 0 5
40439: PUSH
40440: LD_VAR 0 17
40444: ISECT
40445: ST_TO_ADDR
// if not list then
40446: LD_VAR 0 5
40450: NOT
40451: IFFALSE 40455
// exit ;
40453: GO 41259
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40455: LD_VAR 0 12
40459: PUSH
40460: LD_INT 3
40462: EQUAL
40463: PUSH
40464: LD_INT 49
40466: PUSH
40467: LD_VAR 0 5
40471: IN
40472: AND
40473: PUSH
40474: LD_INT 31
40476: PPUSH
40477: LD_VAR 0 16
40481: PPUSH
40482: CALL_OW 321
40486: PUSH
40487: LD_INT 2
40489: EQUAL
40490: AND
40491: IFFALSE 40551
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40493: LD_INT 22
40495: PUSH
40496: LD_VAR 0 16
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 35
40507: PUSH
40508: LD_INT 49
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 91
40517: PUSH
40518: LD_VAR 0 1
40522: PUSH
40523: LD_INT 10
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: LIST
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: PPUSH
40536: CALL_OW 69
40540: NOT
40541: IFFALSE 40551
// weapon := ru_time_lapser ;
40543: LD_ADDR_VAR 0 18
40547: PUSH
40548: LD_INT 49
40550: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40551: LD_VAR 0 12
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: LD_INT 2
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: IN
40566: PUSH
40567: LD_INT 11
40569: PUSH
40570: LD_VAR 0 5
40574: IN
40575: PUSH
40576: LD_INT 30
40578: PUSH
40579: LD_VAR 0 5
40583: IN
40584: OR
40585: AND
40586: PUSH
40587: LD_INT 6
40589: PPUSH
40590: LD_VAR 0 16
40594: PPUSH
40595: CALL_OW 321
40599: PUSH
40600: LD_INT 2
40602: EQUAL
40603: AND
40604: IFFALSE 40769
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40606: LD_INT 22
40608: PUSH
40609: LD_VAR 0 16
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: PUSH
40621: LD_INT 35
40623: PUSH
40624: LD_INT 11
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 35
40633: PUSH
40634: LD_INT 30
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 91
40648: PUSH
40649: LD_VAR 0 1
40653: PUSH
40654: LD_INT 18
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: LIST
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: LIST
40666: PPUSH
40667: CALL_OW 69
40671: NOT
40672: PUSH
40673: LD_INT 22
40675: PUSH
40676: LD_VAR 0 16
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 2
40687: PUSH
40688: LD_INT 30
40690: PUSH
40691: LD_INT 32
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 30
40700: PUSH
40701: LD_INT 33
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 91
40715: PUSH
40716: LD_VAR 0 1
40720: PUSH
40721: LD_INT 12
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: LIST
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: LIST
40733: PUSH
40734: EMPTY
40735: LIST
40736: PPUSH
40737: CALL_OW 69
40741: PUSH
40742: LD_INT 2
40744: GREATER
40745: AND
40746: IFFALSE 40769
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40748: LD_ADDR_VAR 0 18
40752: PUSH
40753: LD_INT 11
40755: PUSH
40756: LD_INT 30
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_VAR 0 12
40767: ARRAY
40768: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40769: LD_VAR 0 18
40773: NOT
40774: PUSH
40775: LD_INT 40
40777: PPUSH
40778: LD_VAR 0 16
40782: PPUSH
40783: CALL_OW 321
40787: PUSH
40788: LD_INT 2
40790: EQUAL
40791: AND
40792: PUSH
40793: LD_INT 7
40795: PUSH
40796: LD_VAR 0 5
40800: IN
40801: PUSH
40802: LD_INT 28
40804: PUSH
40805: LD_VAR 0 5
40809: IN
40810: OR
40811: PUSH
40812: LD_INT 45
40814: PUSH
40815: LD_VAR 0 5
40819: IN
40820: OR
40821: AND
40822: IFFALSE 41076
// begin hex := GetHexInfo ( x , y ) ;
40824: LD_ADDR_VAR 0 4
40828: PUSH
40829: LD_VAR 0 10
40833: PPUSH
40834: LD_VAR 0 11
40838: PPUSH
40839: CALL_OW 546
40843: ST_TO_ADDR
// if hex [ 1 ] then
40844: LD_VAR 0 4
40848: PUSH
40849: LD_INT 1
40851: ARRAY
40852: IFFALSE 40856
// exit ;
40854: GO 41259
// height := hex [ 2 ] ;
40856: LD_ADDR_VAR 0 15
40860: PUSH
40861: LD_VAR 0 4
40865: PUSH
40866: LD_INT 2
40868: ARRAY
40869: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40870: LD_ADDR_VAR 0 14
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 2
40880: PUSH
40881: LD_INT 3
40883: PUSH
40884: LD_INT 5
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: ST_TO_ADDR
// for i in tmp do
40893: LD_ADDR_VAR 0 8
40897: PUSH
40898: LD_VAR 0 14
40902: PUSH
40903: FOR_IN
40904: IFFALSE 41074
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40906: LD_ADDR_VAR 0 9
40910: PUSH
40911: LD_VAR 0 10
40915: PPUSH
40916: LD_VAR 0 8
40920: PPUSH
40921: LD_INT 5
40923: PPUSH
40924: CALL_OW 272
40928: PUSH
40929: LD_VAR 0 11
40933: PPUSH
40934: LD_VAR 0 8
40938: PPUSH
40939: LD_INT 5
40941: PPUSH
40942: CALL_OW 273
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40951: LD_VAR 0 9
40955: PUSH
40956: LD_INT 1
40958: ARRAY
40959: PPUSH
40960: LD_VAR 0 9
40964: PUSH
40965: LD_INT 2
40967: ARRAY
40968: PPUSH
40969: CALL_OW 488
40973: IFFALSE 41072
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40975: LD_ADDR_VAR 0 4
40979: PUSH
40980: LD_VAR 0 9
40984: PUSH
40985: LD_INT 1
40987: ARRAY
40988: PPUSH
40989: LD_VAR 0 9
40993: PUSH
40994: LD_INT 2
40996: ARRAY
40997: PPUSH
40998: CALL_OW 546
41002: ST_TO_ADDR
// if hex [ 1 ] then
41003: LD_VAR 0 4
41007: PUSH
41008: LD_INT 1
41010: ARRAY
41011: IFFALSE 41015
// continue ;
41013: GO 40903
// h := hex [ 2 ] ;
41015: LD_ADDR_VAR 0 13
41019: PUSH
41020: LD_VAR 0 4
41024: PUSH
41025: LD_INT 2
41027: ARRAY
41028: ST_TO_ADDR
// if h + 7 < height then
41029: LD_VAR 0 13
41033: PUSH
41034: LD_INT 7
41036: PLUS
41037: PUSH
41038: LD_VAR 0 15
41042: LESS
41043: IFFALSE 41072
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41045: LD_ADDR_VAR 0 18
41049: PUSH
41050: LD_INT 7
41052: PUSH
41053: LD_INT 28
41055: PUSH
41056: LD_INT 45
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: LIST
41063: PUSH
41064: LD_VAR 0 12
41068: ARRAY
41069: ST_TO_ADDR
// break ;
41070: GO 41074
// end ; end ; end ;
41072: GO 40903
41074: POP
41075: POP
// end ; if not weapon then
41076: LD_VAR 0 18
41080: NOT
41081: IFFALSE 41141
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41083: LD_ADDR_VAR 0 5
41087: PUSH
41088: LD_VAR 0 5
41092: PUSH
41093: LD_INT 11
41095: PUSH
41096: LD_INT 30
41098: PUSH
41099: LD_INT 49
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: DIFF
41107: ST_TO_ADDR
// if not list then
41108: LD_VAR 0 5
41112: NOT
41113: IFFALSE 41117
// exit ;
41115: GO 41259
// weapon := list [ rand ( 1 , list ) ] ;
41117: LD_ADDR_VAR 0 18
41121: PUSH
41122: LD_VAR 0 5
41126: PUSH
41127: LD_INT 1
41129: PPUSH
41130: LD_VAR 0 5
41134: PPUSH
41135: CALL_OW 12
41139: ARRAY
41140: ST_TO_ADDR
// end ; if weapon then
41141: LD_VAR 0 18
41145: IFFALSE 41259
// begin tmp := CostOfWeapon ( weapon ) ;
41147: LD_ADDR_VAR 0 14
41151: PUSH
41152: LD_VAR 0 18
41156: PPUSH
41157: CALL_OW 451
41161: ST_TO_ADDR
// j := GetBase ( tower ) ;
41162: LD_ADDR_VAR 0 9
41166: PUSH
41167: LD_VAR 0 1
41171: PPUSH
41172: CALL_OW 274
41176: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41177: LD_VAR 0 9
41181: PPUSH
41182: LD_INT 1
41184: PPUSH
41185: CALL_OW 275
41189: PUSH
41190: LD_VAR 0 14
41194: PUSH
41195: LD_INT 1
41197: ARRAY
41198: GREATEREQUAL
41199: PUSH
41200: LD_VAR 0 9
41204: PPUSH
41205: LD_INT 2
41207: PPUSH
41208: CALL_OW 275
41212: PUSH
41213: LD_VAR 0 14
41217: PUSH
41218: LD_INT 2
41220: ARRAY
41221: GREATEREQUAL
41222: AND
41223: PUSH
41224: LD_VAR 0 9
41228: PPUSH
41229: LD_INT 3
41231: PPUSH
41232: CALL_OW 275
41236: PUSH
41237: LD_VAR 0 14
41241: PUSH
41242: LD_INT 3
41244: ARRAY
41245: GREATEREQUAL
41246: AND
41247: IFFALSE 41259
// result := weapon ;
41249: LD_ADDR_VAR 0 3
41253: PUSH
41254: LD_VAR 0 18
41258: ST_TO_ADDR
// end ; end ;
41259: LD_VAR 0 3
41263: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41264: LD_INT 0
41266: PPUSH
41267: PPUSH
// result := true ;
41268: LD_ADDR_VAR 0 3
41272: PUSH
41273: LD_INT 1
41275: ST_TO_ADDR
// if array1 = array2 then
41276: LD_VAR 0 1
41280: PUSH
41281: LD_VAR 0 2
41285: EQUAL
41286: IFFALSE 41346
// begin for i = 1 to array1 do
41288: LD_ADDR_VAR 0 4
41292: PUSH
41293: DOUBLE
41294: LD_INT 1
41296: DEC
41297: ST_TO_ADDR
41298: LD_VAR 0 1
41302: PUSH
41303: FOR_TO
41304: IFFALSE 41342
// if array1 [ i ] <> array2 [ i ] then
41306: LD_VAR 0 1
41310: PUSH
41311: LD_VAR 0 4
41315: ARRAY
41316: PUSH
41317: LD_VAR 0 2
41321: PUSH
41322: LD_VAR 0 4
41326: ARRAY
41327: NONEQUAL
41328: IFFALSE 41340
// begin result := false ;
41330: LD_ADDR_VAR 0 3
41334: PUSH
41335: LD_INT 0
41337: ST_TO_ADDR
// break ;
41338: GO 41342
// end ;
41340: GO 41303
41342: POP
41343: POP
// end else
41344: GO 41354
// result := false ;
41346: LD_ADDR_VAR 0 3
41350: PUSH
41351: LD_INT 0
41353: ST_TO_ADDR
// end ;
41354: LD_VAR 0 3
41358: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41359: LD_INT 0
41361: PPUSH
41362: PPUSH
// if not array1 or not array2 then
41363: LD_VAR 0 1
41367: NOT
41368: PUSH
41369: LD_VAR 0 2
41373: NOT
41374: OR
41375: IFFALSE 41379
// exit ;
41377: GO 41443
// result := true ;
41379: LD_ADDR_VAR 0 3
41383: PUSH
41384: LD_INT 1
41386: ST_TO_ADDR
// for i = 1 to array1 do
41387: LD_ADDR_VAR 0 4
41391: PUSH
41392: DOUBLE
41393: LD_INT 1
41395: DEC
41396: ST_TO_ADDR
41397: LD_VAR 0 1
41401: PUSH
41402: FOR_TO
41403: IFFALSE 41441
// if array1 [ i ] <> array2 [ i ] then
41405: LD_VAR 0 1
41409: PUSH
41410: LD_VAR 0 4
41414: ARRAY
41415: PUSH
41416: LD_VAR 0 2
41420: PUSH
41421: LD_VAR 0 4
41425: ARRAY
41426: NONEQUAL
41427: IFFALSE 41439
// begin result := false ;
41429: LD_ADDR_VAR 0 3
41433: PUSH
41434: LD_INT 0
41436: ST_TO_ADDR
// break ;
41437: GO 41441
// end ;
41439: GO 41402
41441: POP
41442: POP
// end ;
41443: LD_VAR 0 3
41447: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41448: LD_INT 0
41450: PPUSH
41451: PPUSH
41452: PPUSH
// pom := GetBase ( fac ) ;
41453: LD_ADDR_VAR 0 5
41457: PUSH
41458: LD_VAR 0 1
41462: PPUSH
41463: CALL_OW 274
41467: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41468: LD_ADDR_VAR 0 4
41472: PUSH
41473: LD_VAR 0 2
41477: PUSH
41478: LD_INT 1
41480: ARRAY
41481: PPUSH
41482: LD_VAR 0 2
41486: PUSH
41487: LD_INT 2
41489: ARRAY
41490: PPUSH
41491: LD_VAR 0 2
41495: PUSH
41496: LD_INT 3
41498: ARRAY
41499: PPUSH
41500: LD_VAR 0 2
41504: PUSH
41505: LD_INT 4
41507: ARRAY
41508: PPUSH
41509: CALL_OW 449
41513: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41514: LD_ADDR_VAR 0 3
41518: PUSH
41519: LD_VAR 0 5
41523: PPUSH
41524: LD_INT 1
41526: PPUSH
41527: CALL_OW 275
41531: PUSH
41532: LD_VAR 0 4
41536: PUSH
41537: LD_INT 1
41539: ARRAY
41540: GREATEREQUAL
41541: PUSH
41542: LD_VAR 0 5
41546: PPUSH
41547: LD_INT 2
41549: PPUSH
41550: CALL_OW 275
41554: PUSH
41555: LD_VAR 0 4
41559: PUSH
41560: LD_INT 2
41562: ARRAY
41563: GREATEREQUAL
41564: AND
41565: PUSH
41566: LD_VAR 0 5
41570: PPUSH
41571: LD_INT 3
41573: PPUSH
41574: CALL_OW 275
41578: PUSH
41579: LD_VAR 0 4
41583: PUSH
41584: LD_INT 3
41586: ARRAY
41587: GREATEREQUAL
41588: AND
41589: ST_TO_ADDR
// end ;
41590: LD_VAR 0 3
41594: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41595: LD_INT 0
41597: PPUSH
41598: PPUSH
41599: PPUSH
41600: PPUSH
// pom := GetBase ( building ) ;
41601: LD_ADDR_VAR 0 3
41605: PUSH
41606: LD_VAR 0 1
41610: PPUSH
41611: CALL_OW 274
41615: ST_TO_ADDR
// if not pom then
41616: LD_VAR 0 3
41620: NOT
41621: IFFALSE 41625
// exit ;
41623: GO 41795
// btype := GetBType ( building ) ;
41625: LD_ADDR_VAR 0 5
41629: PUSH
41630: LD_VAR 0 1
41634: PPUSH
41635: CALL_OW 266
41639: ST_TO_ADDR
// if btype = b_armoury then
41640: LD_VAR 0 5
41644: PUSH
41645: LD_INT 4
41647: EQUAL
41648: IFFALSE 41658
// btype := b_barracks ;
41650: LD_ADDR_VAR 0 5
41654: PUSH
41655: LD_INT 5
41657: ST_TO_ADDR
// if btype = b_depot then
41658: LD_VAR 0 5
41662: PUSH
41663: LD_INT 0
41665: EQUAL
41666: IFFALSE 41676
// btype := b_warehouse ;
41668: LD_ADDR_VAR 0 5
41672: PUSH
41673: LD_INT 1
41675: ST_TO_ADDR
// if btype = b_workshop then
41676: LD_VAR 0 5
41680: PUSH
41681: LD_INT 2
41683: EQUAL
41684: IFFALSE 41694
// btype := b_factory ;
41686: LD_ADDR_VAR 0 5
41690: PUSH
41691: LD_INT 3
41693: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41694: LD_ADDR_VAR 0 4
41698: PUSH
41699: LD_VAR 0 5
41703: PPUSH
41704: LD_VAR 0 1
41708: PPUSH
41709: CALL_OW 248
41713: PPUSH
41714: CALL_OW 450
41718: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41719: LD_ADDR_VAR 0 2
41723: PUSH
41724: LD_VAR 0 3
41728: PPUSH
41729: LD_INT 1
41731: PPUSH
41732: CALL_OW 275
41736: PUSH
41737: LD_VAR 0 4
41741: PUSH
41742: LD_INT 1
41744: ARRAY
41745: GREATEREQUAL
41746: PUSH
41747: LD_VAR 0 3
41751: PPUSH
41752: LD_INT 2
41754: PPUSH
41755: CALL_OW 275
41759: PUSH
41760: LD_VAR 0 4
41764: PUSH
41765: LD_INT 2
41767: ARRAY
41768: GREATEREQUAL
41769: AND
41770: PUSH
41771: LD_VAR 0 3
41775: PPUSH
41776: LD_INT 3
41778: PPUSH
41779: CALL_OW 275
41783: PUSH
41784: LD_VAR 0 4
41788: PUSH
41789: LD_INT 3
41791: ARRAY
41792: GREATEREQUAL
41793: AND
41794: ST_TO_ADDR
// end ;
41795: LD_VAR 0 2
41799: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41800: LD_INT 0
41802: PPUSH
41803: PPUSH
41804: PPUSH
// pom := GetBase ( building ) ;
41805: LD_ADDR_VAR 0 4
41809: PUSH
41810: LD_VAR 0 1
41814: PPUSH
41815: CALL_OW 274
41819: ST_TO_ADDR
// if not pom then
41820: LD_VAR 0 4
41824: NOT
41825: IFFALSE 41829
// exit ;
41827: GO 41930
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41829: LD_ADDR_VAR 0 5
41833: PUSH
41834: LD_VAR 0 2
41838: PPUSH
41839: LD_VAR 0 1
41843: PPUSH
41844: CALL_OW 248
41848: PPUSH
41849: CALL_OW 450
41853: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41854: LD_ADDR_VAR 0 3
41858: PUSH
41859: LD_VAR 0 4
41863: PPUSH
41864: LD_INT 1
41866: PPUSH
41867: CALL_OW 275
41871: PUSH
41872: LD_VAR 0 5
41876: PUSH
41877: LD_INT 1
41879: ARRAY
41880: GREATEREQUAL
41881: PUSH
41882: LD_VAR 0 4
41886: PPUSH
41887: LD_INT 2
41889: PPUSH
41890: CALL_OW 275
41894: PUSH
41895: LD_VAR 0 5
41899: PUSH
41900: LD_INT 2
41902: ARRAY
41903: GREATEREQUAL
41904: AND
41905: PUSH
41906: LD_VAR 0 4
41910: PPUSH
41911: LD_INT 3
41913: PPUSH
41914: CALL_OW 275
41918: PUSH
41919: LD_VAR 0 5
41923: PUSH
41924: LD_INT 3
41926: ARRAY
41927: GREATEREQUAL
41928: AND
41929: ST_TO_ADDR
// end ;
41930: LD_VAR 0 3
41934: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41935: LD_INT 0
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
41941: PPUSH
41942: PPUSH
41943: PPUSH
41944: PPUSH
41945: PPUSH
41946: PPUSH
41947: PPUSH
// result := false ;
41948: LD_ADDR_VAR 0 8
41952: PUSH
41953: LD_INT 0
41955: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41956: LD_VAR 0 5
41960: NOT
41961: PUSH
41962: LD_VAR 0 1
41966: NOT
41967: OR
41968: PUSH
41969: LD_VAR 0 2
41973: NOT
41974: OR
41975: PUSH
41976: LD_VAR 0 3
41980: NOT
41981: OR
41982: IFFALSE 41986
// exit ;
41984: GO 42800
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41986: LD_ADDR_VAR 0 14
41990: PUSH
41991: LD_VAR 0 1
41995: PPUSH
41996: LD_VAR 0 2
42000: PPUSH
42001: LD_VAR 0 3
42005: PPUSH
42006: LD_VAR 0 4
42010: PPUSH
42011: LD_VAR 0 5
42015: PUSH
42016: LD_INT 1
42018: ARRAY
42019: PPUSH
42020: CALL_OW 248
42024: PPUSH
42025: LD_INT 0
42027: PPUSH
42028: CALL 44037 0 6
42032: ST_TO_ADDR
// if not hexes then
42033: LD_VAR 0 14
42037: NOT
42038: IFFALSE 42042
// exit ;
42040: GO 42800
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42042: LD_ADDR_VAR 0 17
42046: PUSH
42047: LD_VAR 0 5
42051: PPUSH
42052: LD_INT 22
42054: PUSH
42055: LD_VAR 0 13
42059: PPUSH
42060: CALL_OW 255
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 2
42071: PUSH
42072: LD_INT 30
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 30
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: LIST
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PPUSH
42101: CALL_OW 72
42105: ST_TO_ADDR
// for i = 1 to hexes do
42106: LD_ADDR_VAR 0 9
42110: PUSH
42111: DOUBLE
42112: LD_INT 1
42114: DEC
42115: ST_TO_ADDR
42116: LD_VAR 0 14
42120: PUSH
42121: FOR_TO
42122: IFFALSE 42798
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42124: LD_ADDR_VAR 0 13
42128: PUSH
42129: LD_VAR 0 14
42133: PUSH
42134: LD_VAR 0 9
42138: ARRAY
42139: PUSH
42140: LD_INT 1
42142: ARRAY
42143: PPUSH
42144: LD_VAR 0 14
42148: PUSH
42149: LD_VAR 0 9
42153: ARRAY
42154: PUSH
42155: LD_INT 2
42157: ARRAY
42158: PPUSH
42159: CALL_OW 428
42163: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42164: LD_VAR 0 14
42168: PUSH
42169: LD_VAR 0 9
42173: ARRAY
42174: PUSH
42175: LD_INT 1
42177: ARRAY
42178: PPUSH
42179: LD_VAR 0 14
42183: PUSH
42184: LD_VAR 0 9
42188: ARRAY
42189: PUSH
42190: LD_INT 2
42192: ARRAY
42193: PPUSH
42194: CALL_OW 351
42198: PUSH
42199: LD_VAR 0 14
42203: PUSH
42204: LD_VAR 0 9
42208: ARRAY
42209: PUSH
42210: LD_INT 1
42212: ARRAY
42213: PPUSH
42214: LD_VAR 0 14
42218: PUSH
42219: LD_VAR 0 9
42223: ARRAY
42224: PUSH
42225: LD_INT 2
42227: ARRAY
42228: PPUSH
42229: CALL_OW 488
42233: NOT
42234: OR
42235: PUSH
42236: LD_VAR 0 13
42240: PPUSH
42241: CALL_OW 247
42245: PUSH
42246: LD_INT 3
42248: EQUAL
42249: OR
42250: IFFALSE 42256
// exit ;
42252: POP
42253: POP
42254: GO 42800
// if not tmp then
42256: LD_VAR 0 13
42260: NOT
42261: IFFALSE 42265
// continue ;
42263: GO 42121
// result := true ;
42265: LD_ADDR_VAR 0 8
42269: PUSH
42270: LD_INT 1
42272: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42273: LD_VAR 0 6
42277: PUSH
42278: LD_VAR 0 13
42282: PPUSH
42283: CALL_OW 247
42287: PUSH
42288: LD_INT 2
42290: EQUAL
42291: AND
42292: PUSH
42293: LD_VAR 0 13
42297: PPUSH
42298: CALL_OW 263
42302: PUSH
42303: LD_INT 1
42305: EQUAL
42306: AND
42307: IFFALSE 42471
// begin if IsDrivenBy ( tmp ) then
42309: LD_VAR 0 13
42313: PPUSH
42314: CALL_OW 311
42318: IFFALSE 42322
// continue ;
42320: GO 42121
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42322: LD_VAR 0 6
42326: PPUSH
42327: LD_INT 3
42329: PUSH
42330: LD_INT 60
42332: PUSH
42333: EMPTY
42334: LIST
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 3
42342: PUSH
42343: LD_INT 55
42345: PUSH
42346: EMPTY
42347: LIST
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PPUSH
42357: CALL_OW 72
42361: IFFALSE 42469
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42363: LD_ADDR_VAR 0 18
42367: PUSH
42368: LD_VAR 0 6
42372: PPUSH
42373: LD_INT 3
42375: PUSH
42376: LD_INT 60
42378: PUSH
42379: EMPTY
42380: LIST
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 3
42388: PUSH
42389: LD_INT 55
42391: PUSH
42392: EMPTY
42393: LIST
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PPUSH
42403: CALL_OW 72
42407: PUSH
42408: LD_INT 1
42410: ARRAY
42411: ST_TO_ADDR
// if IsInUnit ( driver ) then
42412: LD_VAR 0 18
42416: PPUSH
42417: CALL_OW 310
42421: IFFALSE 42432
// ComExit ( driver ) ;
42423: LD_VAR 0 18
42427: PPUSH
42428: CALL 67742 0 1
// AddComEnterUnit ( driver , tmp ) ;
42432: LD_VAR 0 18
42436: PPUSH
42437: LD_VAR 0 13
42441: PPUSH
42442: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42446: LD_VAR 0 18
42450: PPUSH
42451: LD_VAR 0 7
42455: PPUSH
42456: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42460: LD_VAR 0 18
42464: PPUSH
42465: CALL_OW 181
// end ; continue ;
42469: GO 42121
// end ; if not cleaners or not tmp in cleaners then
42471: LD_VAR 0 6
42475: NOT
42476: PUSH
42477: LD_VAR 0 13
42481: PUSH
42482: LD_VAR 0 6
42486: IN
42487: NOT
42488: OR
42489: IFFALSE 42796
// begin if dep then
42491: LD_VAR 0 17
42495: IFFALSE 42631
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42497: LD_ADDR_VAR 0 16
42501: PUSH
42502: LD_VAR 0 17
42506: PUSH
42507: LD_INT 1
42509: ARRAY
42510: PPUSH
42511: CALL_OW 250
42515: PPUSH
42516: LD_VAR 0 17
42520: PUSH
42521: LD_INT 1
42523: ARRAY
42524: PPUSH
42525: CALL_OW 254
42529: PPUSH
42530: LD_INT 5
42532: PPUSH
42533: CALL_OW 272
42537: PUSH
42538: LD_VAR 0 17
42542: PUSH
42543: LD_INT 1
42545: ARRAY
42546: PPUSH
42547: CALL_OW 251
42551: PPUSH
42552: LD_VAR 0 17
42556: PUSH
42557: LD_INT 1
42559: ARRAY
42560: PPUSH
42561: CALL_OW 254
42565: PPUSH
42566: LD_INT 5
42568: PPUSH
42569: CALL_OW 273
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42578: LD_VAR 0 16
42582: PUSH
42583: LD_INT 1
42585: ARRAY
42586: PPUSH
42587: LD_VAR 0 16
42591: PUSH
42592: LD_INT 2
42594: ARRAY
42595: PPUSH
42596: CALL_OW 488
42600: IFFALSE 42631
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42602: LD_VAR 0 13
42606: PPUSH
42607: LD_VAR 0 16
42611: PUSH
42612: LD_INT 1
42614: ARRAY
42615: PPUSH
42616: LD_VAR 0 16
42620: PUSH
42621: LD_INT 2
42623: ARRAY
42624: PPUSH
42625: CALL_OW 111
// continue ;
42629: GO 42121
// end ; end ; r := GetDir ( tmp ) ;
42631: LD_ADDR_VAR 0 15
42635: PUSH
42636: LD_VAR 0 13
42640: PPUSH
42641: CALL_OW 254
42645: ST_TO_ADDR
// if r = 5 then
42646: LD_VAR 0 15
42650: PUSH
42651: LD_INT 5
42653: EQUAL
42654: IFFALSE 42664
// r := 0 ;
42656: LD_ADDR_VAR 0 15
42660: PUSH
42661: LD_INT 0
42663: ST_TO_ADDR
// for j = r to 5 do
42664: LD_ADDR_VAR 0 10
42668: PUSH
42669: DOUBLE
42670: LD_VAR 0 15
42674: DEC
42675: ST_TO_ADDR
42676: LD_INT 5
42678: PUSH
42679: FOR_TO
42680: IFFALSE 42794
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42682: LD_ADDR_VAR 0 11
42686: PUSH
42687: LD_VAR 0 13
42691: PPUSH
42692: CALL_OW 250
42696: PPUSH
42697: LD_VAR 0 10
42701: PPUSH
42702: LD_INT 2
42704: PPUSH
42705: CALL_OW 272
42709: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42710: LD_ADDR_VAR 0 12
42714: PUSH
42715: LD_VAR 0 13
42719: PPUSH
42720: CALL_OW 251
42724: PPUSH
42725: LD_VAR 0 10
42729: PPUSH
42730: LD_INT 2
42732: PPUSH
42733: CALL_OW 273
42737: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42738: LD_VAR 0 11
42742: PPUSH
42743: LD_VAR 0 12
42747: PPUSH
42748: CALL_OW 488
42752: PUSH
42753: LD_VAR 0 11
42757: PPUSH
42758: LD_VAR 0 12
42762: PPUSH
42763: CALL_OW 428
42767: NOT
42768: AND
42769: IFFALSE 42792
// begin ComMoveXY ( tmp , _x , _y ) ;
42771: LD_VAR 0 13
42775: PPUSH
42776: LD_VAR 0 11
42780: PPUSH
42781: LD_VAR 0 12
42785: PPUSH
42786: CALL_OW 111
// break ;
42790: GO 42794
// end ; end ;
42792: GO 42679
42794: POP
42795: POP
// end ; end ;
42796: GO 42121
42798: POP
42799: POP
// end ;
42800: LD_VAR 0 8
42804: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42805: LD_INT 0
42807: PPUSH
// result := true ;
42808: LD_ADDR_VAR 0 3
42812: PUSH
42813: LD_INT 1
42815: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42816: LD_VAR 0 2
42820: PUSH
42821: LD_INT 24
42823: DOUBLE
42824: EQUAL
42825: IFTRUE 42835
42827: LD_INT 33
42829: DOUBLE
42830: EQUAL
42831: IFTRUE 42835
42833: GO 42860
42835: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42836: LD_ADDR_VAR 0 3
42840: PUSH
42841: LD_INT 32
42843: PPUSH
42844: LD_VAR 0 1
42848: PPUSH
42849: CALL_OW 321
42853: PUSH
42854: LD_INT 2
42856: EQUAL
42857: ST_TO_ADDR
42858: GO 43180
42860: LD_INT 20
42862: DOUBLE
42863: EQUAL
42864: IFTRUE 42868
42866: GO 42893
42868: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42869: LD_ADDR_VAR 0 3
42873: PUSH
42874: LD_INT 6
42876: PPUSH
42877: LD_VAR 0 1
42881: PPUSH
42882: CALL_OW 321
42886: PUSH
42887: LD_INT 2
42889: EQUAL
42890: ST_TO_ADDR
42891: GO 43180
42893: LD_INT 22
42895: DOUBLE
42896: EQUAL
42897: IFTRUE 42907
42899: LD_INT 36
42901: DOUBLE
42902: EQUAL
42903: IFTRUE 42907
42905: GO 42932
42907: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42908: LD_ADDR_VAR 0 3
42912: PUSH
42913: LD_INT 15
42915: PPUSH
42916: LD_VAR 0 1
42920: PPUSH
42921: CALL_OW 321
42925: PUSH
42926: LD_INT 2
42928: EQUAL
42929: ST_TO_ADDR
42930: GO 43180
42932: LD_INT 30
42934: DOUBLE
42935: EQUAL
42936: IFTRUE 42940
42938: GO 42965
42940: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42941: LD_ADDR_VAR 0 3
42945: PUSH
42946: LD_INT 20
42948: PPUSH
42949: LD_VAR 0 1
42953: PPUSH
42954: CALL_OW 321
42958: PUSH
42959: LD_INT 2
42961: EQUAL
42962: ST_TO_ADDR
42963: GO 43180
42965: LD_INT 28
42967: DOUBLE
42968: EQUAL
42969: IFTRUE 42979
42971: LD_INT 21
42973: DOUBLE
42974: EQUAL
42975: IFTRUE 42979
42977: GO 43004
42979: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42980: LD_ADDR_VAR 0 3
42984: PUSH
42985: LD_INT 21
42987: PPUSH
42988: LD_VAR 0 1
42992: PPUSH
42993: CALL_OW 321
42997: PUSH
42998: LD_INT 2
43000: EQUAL
43001: ST_TO_ADDR
43002: GO 43180
43004: LD_INT 16
43006: DOUBLE
43007: EQUAL
43008: IFTRUE 43012
43010: GO 43039
43012: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43013: LD_ADDR_VAR 0 3
43017: PUSH
43018: LD_EXP 127
43022: PPUSH
43023: LD_VAR 0 1
43027: PPUSH
43028: CALL_OW 321
43032: PUSH
43033: LD_INT 2
43035: EQUAL
43036: ST_TO_ADDR
43037: GO 43180
43039: LD_INT 19
43041: DOUBLE
43042: EQUAL
43043: IFTRUE 43053
43045: LD_INT 23
43047: DOUBLE
43048: EQUAL
43049: IFTRUE 43053
43051: GO 43080
43053: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43054: LD_ADDR_VAR 0 3
43058: PUSH
43059: LD_EXP 126
43063: PPUSH
43064: LD_VAR 0 1
43068: PPUSH
43069: CALL_OW 321
43073: PUSH
43074: LD_INT 2
43076: EQUAL
43077: ST_TO_ADDR
43078: GO 43180
43080: LD_INT 17
43082: DOUBLE
43083: EQUAL
43084: IFTRUE 43088
43086: GO 43113
43088: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43089: LD_ADDR_VAR 0 3
43093: PUSH
43094: LD_INT 39
43096: PPUSH
43097: LD_VAR 0 1
43101: PPUSH
43102: CALL_OW 321
43106: PUSH
43107: LD_INT 2
43109: EQUAL
43110: ST_TO_ADDR
43111: GO 43180
43113: LD_INT 18
43115: DOUBLE
43116: EQUAL
43117: IFTRUE 43121
43119: GO 43146
43121: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43122: LD_ADDR_VAR 0 3
43126: PUSH
43127: LD_INT 40
43129: PPUSH
43130: LD_VAR 0 1
43134: PPUSH
43135: CALL_OW 321
43139: PUSH
43140: LD_INT 2
43142: EQUAL
43143: ST_TO_ADDR
43144: GO 43180
43146: LD_INT 27
43148: DOUBLE
43149: EQUAL
43150: IFTRUE 43154
43152: GO 43179
43154: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43155: LD_ADDR_VAR 0 3
43159: PUSH
43160: LD_INT 35
43162: PPUSH
43163: LD_VAR 0 1
43167: PPUSH
43168: CALL_OW 321
43172: PUSH
43173: LD_INT 2
43175: EQUAL
43176: ST_TO_ADDR
43177: GO 43180
43179: POP
// end ;
43180: LD_VAR 0 3
43184: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43185: LD_INT 0
43187: PPUSH
43188: PPUSH
43189: PPUSH
43190: PPUSH
43191: PPUSH
43192: PPUSH
43193: PPUSH
43194: PPUSH
43195: PPUSH
43196: PPUSH
43197: PPUSH
// result := false ;
43198: LD_ADDR_VAR 0 6
43202: PUSH
43203: LD_INT 0
43205: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43206: LD_VAR 0 1
43210: NOT
43211: PUSH
43212: LD_VAR 0 1
43216: PPUSH
43217: CALL_OW 266
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: IN
43232: NOT
43233: OR
43234: PUSH
43235: LD_VAR 0 2
43239: NOT
43240: OR
43241: PUSH
43242: LD_VAR 0 5
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: LD_INT 3
43258: PUSH
43259: LD_INT 4
43261: PUSH
43262: LD_INT 5
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: IN
43273: NOT
43274: OR
43275: PUSH
43276: LD_VAR 0 3
43280: PPUSH
43281: LD_VAR 0 4
43285: PPUSH
43286: CALL_OW 488
43290: NOT
43291: OR
43292: IFFALSE 43296
// exit ;
43294: GO 44032
// side := GetSide ( depot ) ;
43296: LD_ADDR_VAR 0 9
43300: PUSH
43301: LD_VAR 0 1
43305: PPUSH
43306: CALL_OW 255
43310: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43311: LD_VAR 0 9
43315: PPUSH
43316: LD_VAR 0 2
43320: PPUSH
43321: CALL 42805 0 2
43325: NOT
43326: IFFALSE 43330
// exit ;
43328: GO 44032
// pom := GetBase ( depot ) ;
43330: LD_ADDR_VAR 0 10
43334: PUSH
43335: LD_VAR 0 1
43339: PPUSH
43340: CALL_OW 274
43344: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43345: LD_ADDR_VAR 0 11
43349: PUSH
43350: LD_VAR 0 2
43354: PPUSH
43355: LD_VAR 0 1
43359: PPUSH
43360: CALL_OW 248
43364: PPUSH
43365: CALL_OW 450
43369: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43370: LD_VAR 0 10
43374: PPUSH
43375: LD_INT 1
43377: PPUSH
43378: CALL_OW 275
43382: PUSH
43383: LD_VAR 0 11
43387: PUSH
43388: LD_INT 1
43390: ARRAY
43391: GREATEREQUAL
43392: PUSH
43393: LD_VAR 0 10
43397: PPUSH
43398: LD_INT 2
43400: PPUSH
43401: CALL_OW 275
43405: PUSH
43406: LD_VAR 0 11
43410: PUSH
43411: LD_INT 2
43413: ARRAY
43414: GREATEREQUAL
43415: AND
43416: PUSH
43417: LD_VAR 0 10
43421: PPUSH
43422: LD_INT 3
43424: PPUSH
43425: CALL_OW 275
43429: PUSH
43430: LD_VAR 0 11
43434: PUSH
43435: LD_INT 3
43437: ARRAY
43438: GREATEREQUAL
43439: AND
43440: NOT
43441: IFFALSE 43445
// exit ;
43443: GO 44032
// if GetBType ( depot ) = b_depot then
43445: LD_VAR 0 1
43449: PPUSH
43450: CALL_OW 266
43454: PUSH
43455: LD_INT 0
43457: EQUAL
43458: IFFALSE 43470
// dist := 28 else
43460: LD_ADDR_VAR 0 14
43464: PUSH
43465: LD_INT 28
43467: ST_TO_ADDR
43468: GO 43478
// dist := 36 ;
43470: LD_ADDR_VAR 0 14
43474: PUSH
43475: LD_INT 36
43477: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43478: LD_VAR 0 1
43482: PPUSH
43483: LD_VAR 0 3
43487: PPUSH
43488: LD_VAR 0 4
43492: PPUSH
43493: CALL_OW 297
43497: PUSH
43498: LD_VAR 0 14
43502: GREATER
43503: IFFALSE 43507
// exit ;
43505: GO 44032
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43507: LD_ADDR_VAR 0 12
43511: PUSH
43512: LD_VAR 0 2
43516: PPUSH
43517: LD_VAR 0 3
43521: PPUSH
43522: LD_VAR 0 4
43526: PPUSH
43527: LD_VAR 0 5
43531: PPUSH
43532: LD_VAR 0 1
43536: PPUSH
43537: CALL_OW 248
43541: PPUSH
43542: LD_INT 0
43544: PPUSH
43545: CALL 44037 0 6
43549: ST_TO_ADDR
// if not hexes then
43550: LD_VAR 0 12
43554: NOT
43555: IFFALSE 43559
// exit ;
43557: GO 44032
// hex := GetHexInfo ( x , y ) ;
43559: LD_ADDR_VAR 0 15
43563: PUSH
43564: LD_VAR 0 3
43568: PPUSH
43569: LD_VAR 0 4
43573: PPUSH
43574: CALL_OW 546
43578: ST_TO_ADDR
// if hex [ 1 ] then
43579: LD_VAR 0 15
43583: PUSH
43584: LD_INT 1
43586: ARRAY
43587: IFFALSE 43591
// exit ;
43589: GO 44032
// height := hex [ 2 ] ;
43591: LD_ADDR_VAR 0 13
43595: PUSH
43596: LD_VAR 0 15
43600: PUSH
43601: LD_INT 2
43603: ARRAY
43604: ST_TO_ADDR
// for i = 1 to hexes do
43605: LD_ADDR_VAR 0 7
43609: PUSH
43610: DOUBLE
43611: LD_INT 1
43613: DEC
43614: ST_TO_ADDR
43615: LD_VAR 0 12
43619: PUSH
43620: FOR_TO
43621: IFFALSE 43951
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43623: LD_VAR 0 12
43627: PUSH
43628: LD_VAR 0 7
43632: ARRAY
43633: PUSH
43634: LD_INT 1
43636: ARRAY
43637: PPUSH
43638: LD_VAR 0 12
43642: PUSH
43643: LD_VAR 0 7
43647: ARRAY
43648: PUSH
43649: LD_INT 2
43651: ARRAY
43652: PPUSH
43653: CALL_OW 488
43657: NOT
43658: PUSH
43659: LD_VAR 0 12
43663: PUSH
43664: LD_VAR 0 7
43668: ARRAY
43669: PUSH
43670: LD_INT 1
43672: ARRAY
43673: PPUSH
43674: LD_VAR 0 12
43678: PUSH
43679: LD_VAR 0 7
43683: ARRAY
43684: PUSH
43685: LD_INT 2
43687: ARRAY
43688: PPUSH
43689: CALL_OW 428
43693: PUSH
43694: LD_INT 0
43696: GREATER
43697: OR
43698: PUSH
43699: LD_VAR 0 12
43703: PUSH
43704: LD_VAR 0 7
43708: ARRAY
43709: PUSH
43710: LD_INT 1
43712: ARRAY
43713: PPUSH
43714: LD_VAR 0 12
43718: PUSH
43719: LD_VAR 0 7
43723: ARRAY
43724: PUSH
43725: LD_INT 2
43727: ARRAY
43728: PPUSH
43729: CALL_OW 351
43733: OR
43734: IFFALSE 43740
// exit ;
43736: POP
43737: POP
43738: GO 44032
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43740: LD_ADDR_VAR 0 8
43744: PUSH
43745: LD_VAR 0 12
43749: PUSH
43750: LD_VAR 0 7
43754: ARRAY
43755: PUSH
43756: LD_INT 1
43758: ARRAY
43759: PPUSH
43760: LD_VAR 0 12
43764: PUSH
43765: LD_VAR 0 7
43769: ARRAY
43770: PUSH
43771: LD_INT 2
43773: ARRAY
43774: PPUSH
43775: CALL_OW 546
43779: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43780: LD_VAR 0 8
43784: PUSH
43785: LD_INT 1
43787: ARRAY
43788: PUSH
43789: LD_VAR 0 8
43793: PUSH
43794: LD_INT 2
43796: ARRAY
43797: PUSH
43798: LD_VAR 0 13
43802: PUSH
43803: LD_INT 2
43805: PLUS
43806: GREATER
43807: OR
43808: PUSH
43809: LD_VAR 0 8
43813: PUSH
43814: LD_INT 2
43816: ARRAY
43817: PUSH
43818: LD_VAR 0 13
43822: PUSH
43823: LD_INT 2
43825: MINUS
43826: LESS
43827: OR
43828: PUSH
43829: LD_VAR 0 8
43833: PUSH
43834: LD_INT 3
43836: ARRAY
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: LD_INT 8
43843: PUSH
43844: LD_INT 9
43846: PUSH
43847: LD_INT 10
43849: PUSH
43850: LD_INT 11
43852: PUSH
43853: LD_INT 12
43855: PUSH
43856: LD_INT 13
43858: PUSH
43859: LD_INT 16
43861: PUSH
43862: LD_INT 17
43864: PUSH
43865: LD_INT 18
43867: PUSH
43868: LD_INT 19
43870: PUSH
43871: LD_INT 20
43873: PUSH
43874: LD_INT 21
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: IN
43892: NOT
43893: OR
43894: PUSH
43895: LD_VAR 0 8
43899: PUSH
43900: LD_INT 5
43902: ARRAY
43903: NOT
43904: OR
43905: PUSH
43906: LD_VAR 0 8
43910: PUSH
43911: LD_INT 6
43913: ARRAY
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: LD_INT 7
43923: PUSH
43924: LD_INT 9
43926: PUSH
43927: LD_INT 10
43929: PUSH
43930: LD_INT 11
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: IN
43941: NOT
43942: OR
43943: IFFALSE 43949
// exit ;
43945: POP
43946: POP
43947: GO 44032
// end ;
43949: GO 43620
43951: POP
43952: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43953: LD_VAR 0 9
43957: PPUSH
43958: LD_VAR 0 3
43962: PPUSH
43963: LD_VAR 0 4
43967: PPUSH
43968: LD_INT 20
43970: PPUSH
43971: CALL 35978 0 4
43975: PUSH
43976: LD_INT 4
43978: ARRAY
43979: IFFALSE 43983
// exit ;
43981: GO 44032
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43983: LD_VAR 0 2
43987: PUSH
43988: LD_INT 29
43990: PUSH
43991: LD_INT 30
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: IN
43998: PUSH
43999: LD_VAR 0 3
44003: PPUSH
44004: LD_VAR 0 4
44008: PPUSH
44009: LD_VAR 0 9
44013: PPUSH
44014: CALL_OW 440
44018: NOT
44019: AND
44020: IFFALSE 44024
// exit ;
44022: GO 44032
// result := true ;
44024: LD_ADDR_VAR 0 6
44028: PUSH
44029: LD_INT 1
44031: ST_TO_ADDR
// end ;
44032: LD_VAR 0 6
44036: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44037: LD_INT 0
44039: PPUSH
44040: PPUSH
44041: PPUSH
44042: PPUSH
44043: PPUSH
44044: PPUSH
44045: PPUSH
44046: PPUSH
44047: PPUSH
44048: PPUSH
44049: PPUSH
44050: PPUSH
44051: PPUSH
44052: PPUSH
44053: PPUSH
44054: PPUSH
44055: PPUSH
44056: PPUSH
44057: PPUSH
44058: PPUSH
44059: PPUSH
44060: PPUSH
44061: PPUSH
44062: PPUSH
44063: PPUSH
44064: PPUSH
44065: PPUSH
44066: PPUSH
44067: PPUSH
44068: PPUSH
44069: PPUSH
44070: PPUSH
44071: PPUSH
44072: PPUSH
44073: PPUSH
44074: PPUSH
44075: PPUSH
44076: PPUSH
44077: PPUSH
44078: PPUSH
44079: PPUSH
44080: PPUSH
44081: PPUSH
44082: PPUSH
44083: PPUSH
44084: PPUSH
44085: PPUSH
44086: PPUSH
44087: PPUSH
44088: PPUSH
44089: PPUSH
44090: PPUSH
44091: PPUSH
44092: PPUSH
44093: PPUSH
44094: PPUSH
44095: PPUSH
44096: PPUSH
// result = [ ] ;
44097: LD_ADDR_VAR 0 7
44101: PUSH
44102: EMPTY
44103: ST_TO_ADDR
// temp_list = [ ] ;
44104: LD_ADDR_VAR 0 9
44108: PUSH
44109: EMPTY
44110: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44111: LD_VAR 0 4
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: LD_INT 3
44127: PUSH
44128: LD_INT 4
44130: PUSH
44131: LD_INT 5
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: IN
44142: NOT
44143: PUSH
44144: LD_VAR 0 1
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: IN
44159: PUSH
44160: LD_VAR 0 5
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: LD_INT 3
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: LIST
44178: IN
44179: NOT
44180: AND
44181: OR
44182: IFFALSE 44186
// exit ;
44184: GO 62577
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44186: LD_VAR 0 1
44190: PUSH
44191: LD_INT 6
44193: PUSH
44194: LD_INT 7
44196: PUSH
44197: LD_INT 8
44199: PUSH
44200: LD_INT 13
44202: PUSH
44203: LD_INT 12
44205: PUSH
44206: LD_INT 15
44208: PUSH
44209: LD_INT 11
44211: PUSH
44212: LD_INT 14
44214: PUSH
44215: LD_INT 10
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: IN
44229: IFFALSE 44239
// btype = b_lab ;
44231: LD_ADDR_VAR 0 1
44235: PUSH
44236: LD_INT 6
44238: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44239: LD_VAR 0 6
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: LIST
44257: IN
44258: NOT
44259: PUSH
44260: LD_VAR 0 1
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: LD_INT 3
44276: PUSH
44277: LD_INT 6
44279: PUSH
44280: LD_INT 36
44282: PUSH
44283: LD_INT 4
44285: PUSH
44286: LD_INT 5
44288: PUSH
44289: LD_INT 31
44291: PUSH
44292: LD_INT 32
44294: PUSH
44295: LD_INT 33
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: IN
44311: NOT
44312: PUSH
44313: LD_VAR 0 6
44317: PUSH
44318: LD_INT 1
44320: EQUAL
44321: AND
44322: OR
44323: PUSH
44324: LD_VAR 0 1
44328: PUSH
44329: LD_INT 2
44331: PUSH
44332: LD_INT 3
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: IN
44339: NOT
44340: PUSH
44341: LD_VAR 0 6
44345: PUSH
44346: LD_INT 2
44348: EQUAL
44349: AND
44350: OR
44351: IFFALSE 44361
// mode = 0 ;
44353: LD_ADDR_VAR 0 6
44357: PUSH
44358: LD_INT 0
44360: ST_TO_ADDR
// case mode of 0 :
44361: LD_VAR 0 6
44365: PUSH
44366: LD_INT 0
44368: DOUBLE
44369: EQUAL
44370: IFTRUE 44374
44372: GO 55827
44374: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44375: LD_ADDR_VAR 0 11
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: LD_INT 2
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: LD_INT 3
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 3
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44568: LD_ADDR_VAR 0 12
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: NEG
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 3
44725: NEG
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 3
44736: NEG
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44764: LD_ADDR_VAR 0 13
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: LD_INT 2
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: LD_INT 2
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: NEG
44900: PUSH
44901: LD_INT 2
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: NEG
44912: PUSH
44913: LD_INT 3
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 3
44923: NEG
44924: PUSH
44925: LD_INT 2
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 3
44935: NEG
44936: PUSH
44937: LD_INT 3
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44963: LD_ADDR_VAR 0 14
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: LD_INT 2
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: LD_INT 3
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 3
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 2
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45159: LD_ADDR_VAR 0 15
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 2
45282: NEG
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 2
45293: NEG
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 3
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 3
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45352: LD_ADDR_VAR 0 16
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: LD_INT 2
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: NEG
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 2
45487: NEG
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 3
45499: PUSH
45500: LD_INT 2
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 3
45509: PUSH
45510: LD_INT 3
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: LD_INT 3
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45545: LD_ADDR_VAR 0 17
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 2
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: LD_INT 2
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 2
45744: NEG
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45775: LD_ADDR_VAR 0 18
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: LD_INT 2
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 2
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: LD_INT 2
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 2
45974: NEG
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46005: LD_ADDR_VAR 0 19
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 2
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 1
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 2
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: LD_INT 2
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: LD_INT 2
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46235: LD_ADDR_VAR 0 20
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 2
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 2
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: LD_INT 2
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 2
46434: NEG
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46465: LD_ADDR_VAR 0 21
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 2
46652: NEG
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: NEG
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46695: LD_ADDR_VAR 0 22
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: LD_INT 2
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 2
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46925: LD_ADDR_VAR 0 23
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 0
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: LD_INT 2
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: LD_INT 2
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 2
47101: NEG
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: NEG
47125: PUSH
47126: LD_INT 2
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: LD_INT 3
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: LD_INT 3
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: LD_INT 2
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47205: LD_ADDR_VAR 0 24
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: LD_INT 2
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: LD_INT 2
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 2
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: NEG
47405: PUSH
47406: LD_INT 2
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: LD_INT 2
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 3
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 3
47448: PUSH
47449: LD_INT 2
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47481: LD_ADDR_VAR 0 25
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 2
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: LD_INT 2
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 3
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 3
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: LD_INT 3
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47755: LD_ADDR_VAR 0 26
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: LD_INT 2
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: LD_INT 3
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 3
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48031: LD_ADDR_VAR 0 27
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 2
48207: NEG
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: LD_INT 2
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: NEG
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 3
48264: NEG
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 3
48276: NEG
48277: PUSH
48278: LD_INT 2
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48311: LD_ADDR_VAR 0 28
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: NEG
48523: PUSH
48524: LD_INT 3
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: LD_INT 3
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 3
48546: NEG
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 3
48558: NEG
48559: PUSH
48560: LD_INT 2
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48593: LD_ADDR_VAR 0 29
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: LD_INT 3
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 3
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: LD_INT 3
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 3
48837: NEG
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48872: LD_ADDR_VAR 0 30
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 2
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: NEG
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 2
49049: NEG
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: LD_INT 3
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: LD_INT 2
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 3
49084: PUSH
49085: LD_INT 2
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: LD_INT 3
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 2
49104: NEG
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 3
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49150: LD_ADDR_VAR 0 31
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 2
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: LD_INT 3
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 3
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 3
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: LD_INT 2
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 3
49393: NEG
49394: PUSH
49395: LD_INT 2
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49428: LD_ADDR_VAR 0 32
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: LD_INT 3
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 3
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: LD_INT 3
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 3
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49706: LD_ADDR_VAR 0 33
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 2
49861: NEG
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: NEG
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 3
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 3
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 3
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 3
49950: NEG
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49985: LD_ADDR_VAR 0 34
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 2
50141: NEG
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 2
50164: NEG
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: LD_INT 3
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 3
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: PUSH
50210: LD_INT 3
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: NEG
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 3
50230: NEG
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50265: LD_ADDR_VAR 0 35
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50377: LD_ADDR_VAR 0 36
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: LD_INT 2
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50489: LD_ADDR_VAR 0 37
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50601: LD_ADDR_VAR 0 38
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: NEG
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50713: LD_ADDR_VAR 0 39
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: LD_INT 2
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50825: LD_ADDR_VAR 0 40
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50937: LD_ADDR_VAR 0 41
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: LD_INT 2
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: LD_INT 2
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 2
51103: NEG
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: LD_INT 2
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: LD_INT 3
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 3
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 3
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: LD_INT 2
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 3
51180: PUSH
51181: LD_INT 3
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 2
51190: PUSH
51191: LD_INT 3
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: NEG
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 3
51211: NEG
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 3
51222: NEG
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 3
51234: NEG
51235: PUSH
51236: LD_INT 2
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 3
51246: NEG
51247: PUSH
51248: LD_INT 3
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51287: LD_ADDR_VAR 0 42
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: LD_INT 2
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 2
51453: NEG
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: NEG
51466: PUSH
51467: LD_INT 2
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: LD_INT 3
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: LD_INT 3
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 3
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 3
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 3
51533: PUSH
51534: LD_INT 3
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: LD_INT 3
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: LD_INT 3
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 3
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 3
51584: NEG
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 3
51596: NEG
51597: PUSH
51598: LD_INT 3
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51637: LD_ADDR_VAR 0 43
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: LD_INT 2
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: LD_INT 2
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 2
51803: NEG
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: LD_INT 3
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: LD_INT 3
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 2
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 3
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 3
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 3
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 3
51933: NEG
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51985: LD_ADDR_VAR 0 44
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 2
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 2
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 2
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: NEG
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: NEG
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: LD_INT 2
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 2
52175: NEG
52176: PUSH
52177: LD_INT 3
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 3
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 3
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: LD_INT 2
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: LD_INT 3
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: LD_INT 3
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 3
52259: NEG
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 3
52270: NEG
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 3
52282: NEG
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 3
52294: NEG
52295: PUSH
52296: LD_INT 3
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52335: LD_ADDR_VAR 0 45
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 2
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 2
52501: NEG
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 2
52525: NEG
52526: PUSH
52527: LD_INT 3
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: LD_INT 3
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 3
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 2
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 3
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: LD_INT 3
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 3
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 3
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 3
52632: NEG
52633: PUSH
52634: LD_INT 2
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 3
52644: NEG
52645: PUSH
52646: LD_INT 3
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52685: LD_ADDR_VAR 0 46
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: LD_INT 2
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: LD_INT 2
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: LD_INT 3
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: LD_INT 3
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 2
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 3
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 3
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: LD_INT 3
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: LD_INT 2
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 2
52970: NEG
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 3
52981: NEG
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 3
52992: NEG
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53033: LD_ADDR_VAR 0 47
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 2
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 2
53160: NEG
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53184: LD_ADDR_VAR 0 48
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: LD_INT 2
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 2
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53331: LD_ADDR_VAR 0 49
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 2
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 2
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: LD_INT 2
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53475: LD_ADDR_VAR 0 50
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: LD_INT 2
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53619: LD_ADDR_VAR 0 51
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 2
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: NEG
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53766: LD_ADDR_VAR 0 52
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: LD_INT 2
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53917: LD_ADDR_VAR 0 53
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 1
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 2
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: LD_INT 2
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 2
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 2
54104: NEG
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 2
54116: NEG
54117: PUSH
54118: LD_INT 2
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54147: LD_ADDR_VAR 0 54
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 2
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: NEG
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54377: LD_ADDR_VAR 0 55
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: LD_INT 2
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: NEG
54577: PUSH
54578: LD_INT 2
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54607: LD_ADDR_VAR 0 56
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: LD_INT 2
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: NEG
54807: PUSH
54808: LD_INT 2
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54837: LD_ADDR_VAR 0 57
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 2
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: LD_INT 2
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55067: LD_ADDR_VAR 0 58
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: LD_INT 2
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: NEG
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: NEG
55267: PUSH
55268: LD_INT 2
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55297: LD_ADDR_VAR 0 59
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55385: LD_ADDR_VAR 0 60
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55473: LD_ADDR_VAR 0 61
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55561: LD_ADDR_VAR 0 62
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55649: LD_ADDR_VAR 0 63
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55737: LD_ADDR_VAR 0 64
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: ST_TO_ADDR
// end ; 1 :
55825: GO 61722
55827: LD_INT 1
55829: DOUBLE
55830: EQUAL
55831: IFTRUE 55835
55833: GO 58458
55835: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55836: LD_ADDR_VAR 0 11
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: LD_INT 3
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_INT 3
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: LD_INT 2
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: LIST
55879: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55880: LD_ADDR_VAR 0 12
55884: PUSH
55885: LD_INT 2
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 3
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 3
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: LIST
55920: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55921: LD_ADDR_VAR 0 13
55925: PUSH
55926: LD_INT 3
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 3
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: LD_INT 3
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: LIST
55960: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55961: LD_ADDR_VAR 0 14
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: LD_INT 3
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 3
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: LIST
56001: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56002: LD_ADDR_VAR 0 15
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 3
56020: NEG
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 3
56031: NEG
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: LIST
56045: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56046: LD_ADDR_VAR 0 16
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: LD_INT 3
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 3
56065: NEG
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 3
56077: NEG
56078: PUSH
56079: LD_INT 3
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: LIST
56091: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56092: LD_ADDR_VAR 0 17
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: LD_INT 3
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 3
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56136: LD_ADDR_VAR 0 18
56140: PUSH
56141: LD_INT 2
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 3
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 3
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: LIST
56176: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56177: LD_ADDR_VAR 0 19
56181: PUSH
56182: LD_INT 3
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: LD_INT 3
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: LD_INT 3
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: LIST
56216: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56217: LD_ADDR_VAR 0 20
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 3
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 3
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: LIST
56257: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56258: LD_ADDR_VAR 0 21
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 3
56276: NEG
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 3
56287: NEG
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: LIST
56301: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56302: LD_ADDR_VAR 0 22
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: LD_INT 3
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 3
56321: NEG
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 3
56333: NEG
56334: PUSH
56335: LD_INT 3
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: LIST
56347: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56348: LD_ADDR_VAR 0 23
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: LD_INT 3
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: LD_INT 4
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: LD_INT 3
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: LIST
56391: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56392: LD_ADDR_VAR 0 24
56396: PUSH
56397: LD_INT 3
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 3
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 4
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: LIST
56432: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56433: LD_ADDR_VAR 0 25
56437: PUSH
56438: LD_INT 3
56440: PUSH
56441: LD_INT 3
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 4
56450: PUSH
56451: LD_INT 3
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 3
56460: PUSH
56461: LD_INT 4
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: LIST
56472: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56473: LD_ADDR_VAR 0 26
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: LD_INT 3
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: LD_INT 4
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: LD_INT 3
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: LIST
56513: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56514: LD_ADDR_VAR 0 27
56518: PUSH
56519: LD_INT 3
56521: NEG
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 3
56532: NEG
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 4
56543: NEG
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: LIST
56557: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56558: LD_ADDR_VAR 0 28
56562: PUSH
56563: LD_INT 3
56565: NEG
56566: PUSH
56567: LD_INT 3
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 3
56577: NEG
56578: PUSH
56579: LD_INT 4
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 4
56589: NEG
56590: PUSH
56591: LD_INT 3
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: LIST
56603: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56604: LD_ADDR_VAR 0 29
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: LD_INT 3
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 3
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: LD_INT 4
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 4
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: LD_INT 3
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: LD_INT 5
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: LD_INT 5
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 4
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: LD_INT 6
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: LD_INT 6
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 5
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56759: LD_ADDR_VAR 0 30
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 3
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 3
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 3
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 4
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 4
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 4
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 5
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 5
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 5
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 6
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 6
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56902: LD_ADDR_VAR 0 31
56906: PUSH
56907: LD_INT 3
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 3
56919: PUSH
56920: LD_INT 3
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 4
56939: PUSH
56940: LD_INT 3
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 4
56949: PUSH
56950: LD_INT 4
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 3
56959: PUSH
56960: LD_INT 4
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 5
56969: PUSH
56970: LD_INT 4
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 5
56979: PUSH
56980: LD_INT 5
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 4
56989: PUSH
56990: LD_INT 5
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 6
56999: PUSH
57000: LD_INT 5
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 6
57009: PUSH
57010: LD_INT 6
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 5
57019: PUSH
57020: LD_INT 6
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57041: LD_ADDR_VAR 0 32
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: LD_INT 3
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: LD_INT 2
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: LD_INT 4
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: LD_INT 4
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: LD_INT 3
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: LD_INT 5
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: LD_INT 5
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: NEG
57131: PUSH
57132: LD_INT 4
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: LD_INT 6
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: LD_INT 6
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: NEG
57162: PUSH
57163: LD_INT 5
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57184: LD_ADDR_VAR 0 33
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 3
57202: NEG
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 3
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 3
57225: NEG
57226: PUSH
57227: LD_INT 1
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 4
57236: NEG
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 4
57247: NEG
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 4
57259: NEG
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 5
57270: NEG
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 5
57281: NEG
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 5
57293: NEG
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 6
57304: NEG
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 6
57315: NEG
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57339: LD_ADDR_VAR 0 34
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: LD_INT 3
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 3
57358: NEG
57359: PUSH
57360: LD_INT 2
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 3
57370: NEG
57371: PUSH
57372: LD_INT 3
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 3
57382: NEG
57383: PUSH
57384: LD_INT 4
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 4
57394: NEG
57395: PUSH
57396: LD_INT 3
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 4
57406: NEG
57407: PUSH
57408: LD_INT 4
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 4
57418: NEG
57419: PUSH
57420: LD_INT 5
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 5
57430: NEG
57431: PUSH
57432: LD_INT 4
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 5
57442: NEG
57443: PUSH
57444: LD_INT 5
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 5
57454: NEG
57455: PUSH
57456: LD_INT 6
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 6
57466: NEG
57467: PUSH
57468: LD_INT 5
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 6
57478: NEG
57479: PUSH
57480: LD_INT 6
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57502: LD_ADDR_VAR 0 41
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: LD_INT 3
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: LIST
57545: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57546: LD_ADDR_VAR 0 42
57550: PUSH
57551: LD_INT 2
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 3
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: LIST
57586: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57587: LD_ADDR_VAR 0 43
57591: PUSH
57592: LD_INT 2
57594: PUSH
57595: LD_INT 2
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 3
57604: PUSH
57605: LD_INT 2
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: LD_INT 3
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: LIST
57626: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57627: LD_ADDR_VAR 0 44
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: LD_INT 3
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: LD_INT 2
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: LIST
57667: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57668: LD_ADDR_VAR 0 45
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 3
57697: NEG
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: LIST
57711: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57712: LD_ADDR_VAR 0 46
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 2
57731: NEG
57732: PUSH
57733: LD_INT 3
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 3
57743: NEG
57744: PUSH
57745: LD_INT 2
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: LIST
57757: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57758: LD_ADDR_VAR 0 47
57762: PUSH
57763: LD_INT 2
57765: NEG
57766: PUSH
57767: LD_INT 3
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: LD_INT 3
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57791: LD_ADDR_VAR 0 48
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 2
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57822: LD_ADDR_VAR 0 49
57826: PUSH
57827: LD_INT 3
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 3
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57851: LD_ADDR_VAR 0 50
57855: PUSH
57856: LD_INT 2
57858: PUSH
57859: LD_INT 3
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: LD_INT 3
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57880: LD_ADDR_VAR 0 51
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: NEG
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57911: LD_ADDR_VAR 0 52
57915: PUSH
57916: LD_INT 3
57918: NEG
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 3
57930: NEG
57931: PUSH
57932: LD_INT 2
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57944: LD_ADDR_VAR 0 53
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: LD_INT 3
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: LIST
57987: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57988: LD_ADDR_VAR 0 54
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 3
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 3
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: LIST
58028: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58029: LD_ADDR_VAR 0 55
58033: PUSH
58034: LD_INT 3
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 3
58046: PUSH
58047: LD_INT 3
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: LD_INT 3
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: LIST
58068: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58069: LD_ADDR_VAR 0 56
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: LD_INT 3
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: LD_INT 2
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: LIST
58109: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58110: LD_ADDR_VAR 0 57
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 3
58128: NEG
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 3
58139: NEG
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: LIST
58153: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58154: LD_ADDR_VAR 0 58
58158: PUSH
58159: LD_INT 2
58161: NEG
58162: PUSH
58163: LD_INT 3
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 3
58173: NEG
58174: PUSH
58175: LD_INT 2
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 3
58185: NEG
58186: PUSH
58187: LD_INT 3
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: LIST
58199: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58200: LD_ADDR_VAR 0 59
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: LD_INT 2
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: LD_INT 2
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: LIST
58243: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58244: LD_ADDR_VAR 0 60
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: LIST
58284: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58285: LD_ADDR_VAR 0 61
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: LIST
58324: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58325: LD_ADDR_VAR 0 62
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: LIST
58365: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58366: LD_ADDR_VAR 0 63
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 2
58395: NEG
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: LIST
58409: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58410: LD_ADDR_VAR 0 64
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: NEG
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: LIST
58455: ST_TO_ADDR
// end ; 2 :
58456: GO 61722
58458: LD_INT 2
58460: DOUBLE
58461: EQUAL
58462: IFTRUE 58466
58464: GO 61721
58466: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58467: LD_ADDR_VAR 0 29
58471: PUSH
58472: LD_INT 4
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 4
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 5
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 5
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 4
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 3
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 3
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 3
58546: PUSH
58547: LD_INT 2
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 5
58557: PUSH
58558: LD_INT 2
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 3
58567: PUSH
58568: LD_INT 3
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 3
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 4
58587: PUSH
58588: LD_INT 3
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 4
58597: PUSH
58598: LD_INT 4
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 3
58607: PUSH
58608: LD_INT 4
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: PUSH
58618: LD_INT 3
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 4
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: LD_INT 4
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 4
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: LD_INT 3
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: LD_INT 4
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: LD_INT 5
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: LD_INT 5
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: LD_INT 4
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: LD_INT 3
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 2
58729: PUSH
58730: LD_INT 5
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 2
58739: NEG
58740: PUSH
58741: LD_INT 3
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 3
58750: NEG
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 3
58761: NEG
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: NEG
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 3
58795: NEG
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 4
58806: NEG
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 4
58817: NEG
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 4
58829: NEG
58830: PUSH
58831: LD_INT 2
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: NEG
58842: PUSH
58843: LD_INT 2
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 4
58852: NEG
58853: PUSH
58854: LD_INT 4
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 4
58864: NEG
58865: PUSH
58866: LD_INT 5
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 3
58876: NEG
58877: PUSH
58878: LD_INT 4
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 3
58888: NEG
58889: PUSH
58890: LD_INT 3
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 4
58900: NEG
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 5
58912: NEG
58913: PUSH
58914: LD_INT 4
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 5
58924: NEG
58925: PUSH
58926: LD_INT 5
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 3
58936: NEG
58937: PUSH
58938: LD_INT 5
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 5
58948: NEG
58949: PUSH
58950: LD_INT 3
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59005: LD_ADDR_VAR 0 30
59009: PUSH
59010: LD_INT 4
59012: PUSH
59013: LD_INT 4
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 4
59022: PUSH
59023: LD_INT 3
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 5
59032: PUSH
59033: LD_INT 4
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 5
59042: PUSH
59043: LD_INT 5
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 4
59052: PUSH
59053: LD_INT 5
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 3
59062: PUSH
59063: LD_INT 4
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 3
59072: PUSH
59073: LD_INT 3
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 5
59082: PUSH
59083: LD_INT 3
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 3
59092: PUSH
59093: LD_INT 5
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: LD_INT 3
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: LD_INT 3
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: LD_INT 4
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: LD_INT 4
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 1
59152: NEG
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: LD_INT 2
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 2
59174: PUSH
59175: LD_INT 4
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 2
59184: NEG
59185: PUSH
59186: LD_INT 2
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 4
59195: NEG
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 4
59206: NEG
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 3
59218: NEG
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 3
59229: NEG
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 4
59240: NEG
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 5
59251: NEG
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 5
59262: NEG
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 5
59274: NEG
59275: PUSH
59276: LD_INT 2
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 3
59286: NEG
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 3
59297: NEG
59298: PUSH
59299: LD_INT 3
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 3
59309: NEG
59310: PUSH
59311: LD_INT 4
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 2
59321: NEG
59322: PUSH
59323: LD_INT 3
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 2
59333: NEG
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 3
59345: NEG
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 4
59357: NEG
59358: PUSH
59359: LD_INT 3
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 4
59369: NEG
59370: PUSH
59371: LD_INT 4
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 2
59381: NEG
59382: PUSH
59383: LD_INT 4
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 4
59393: NEG
59394: PUSH
59395: LD_INT 2
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: LD_INT 4
59408: NEG
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: LD_INT 5
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: LD_INT 4
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: LD_INT 3
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 3
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: LD_INT 4
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: LD_INT 5
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: LD_INT 3
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 2
59495: NEG
59496: PUSH
59497: LD_INT 5
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59552: LD_ADDR_VAR 0 31
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: LD_INT 4
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: LD_INT 3
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: LD_INT 4
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: LD_INT 5
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: LD_INT 5
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: LD_INT 4
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: LD_INT 3
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 2
59631: PUSH
59632: LD_INT 5
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 2
59641: NEG
59642: PUSH
59643: LD_INT 3
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 3
59652: NEG
59653: PUSH
59654: LD_INT 0
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 3
59663: NEG
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 2
59675: NEG
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 3
59697: NEG
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 4
59708: NEG
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 4
59719: NEG
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 4
59731: NEG
59732: PUSH
59733: LD_INT 2
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 2
59743: NEG
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 4
59754: NEG
59755: PUSH
59756: LD_INT 4
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 4
59766: NEG
59767: PUSH
59768: LD_INT 5
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 3
59778: NEG
59779: PUSH
59780: LD_INT 4
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 3
59790: NEG
59791: PUSH
59792: LD_INT 3
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 4
59802: NEG
59803: PUSH
59804: LD_INT 3
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 5
59814: NEG
59815: PUSH
59816: LD_INT 4
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 5
59826: NEG
59827: PUSH
59828: LD_INT 5
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 3
59838: NEG
59839: PUSH
59840: LD_INT 5
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 5
59850: NEG
59851: PUSH
59852: LD_INT 3
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 3
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: LD_INT 4
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: LD_INT 3
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: LD_INT 2
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: LD_INT 3
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: PUSH
59931: LD_INT 4
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 2
59941: PUSH
59942: LD_INT 2
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: LD_INT 4
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 4
59964: PUSH
59965: LD_INT 0
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 4
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 5
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 5
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 4
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 3
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 3
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 3
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 5
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60102: LD_ADDR_VAR 0 32
60106: PUSH
60107: LD_INT 4
60109: NEG
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 4
60120: NEG
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 3
60132: NEG
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 3
60143: NEG
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 4
60154: NEG
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 5
60165: NEG
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 5
60176: NEG
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 5
60188: NEG
60189: PUSH
60190: LD_INT 2
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 3
60200: NEG
60201: PUSH
60202: LD_INT 2
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 3
60211: NEG
60212: PUSH
60213: LD_INT 3
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 3
60223: NEG
60224: PUSH
60225: LD_INT 4
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: NEG
60236: PUSH
60237: LD_INT 3
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 2
60247: NEG
60248: PUSH
60249: LD_INT 2
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 3
60259: NEG
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 4
60271: NEG
60272: PUSH
60273: LD_INT 3
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 4
60283: NEG
60284: PUSH
60285: LD_INT 4
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 2
60295: NEG
60296: PUSH
60297: LD_INT 4
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 4
60307: NEG
60308: PUSH
60309: LD_INT 2
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: LD_INT 4
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: LD_INT 5
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: LD_INT 4
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: LD_INT 3
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: LD_INT 3
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: LD_INT 4
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: LD_INT 5
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 2
60398: PUSH
60399: LD_INT 3
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 2
60409: NEG
60410: PUSH
60411: LD_INT 5
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 3
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 3
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 4
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 4
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 2
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 2
60482: PUSH
60483: LD_INT 1
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 4
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 4
60514: PUSH
60515: LD_INT 4
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 4
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 5
60534: PUSH
60535: LD_INT 4
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 5
60544: PUSH
60545: LD_INT 5
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 4
60554: PUSH
60555: LD_INT 5
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 3
60564: PUSH
60565: LD_INT 4
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 3
60574: PUSH
60575: LD_INT 3
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 5
60584: PUSH
60585: LD_INT 3
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 3
60594: PUSH
60595: LD_INT 5
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60649: LD_ADDR_VAR 0 33
60653: PUSH
60654: LD_INT 4
60656: NEG
60657: PUSH
60658: LD_INT 4
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 4
60668: NEG
60669: PUSH
60670: LD_INT 5
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 3
60680: NEG
60681: PUSH
60682: LD_INT 4
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 3
60692: NEG
60693: PUSH
60694: LD_INT 3
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 4
60704: NEG
60705: PUSH
60706: LD_INT 3
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 5
60716: NEG
60717: PUSH
60718: LD_INT 4
60720: NEG
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 5
60728: NEG
60729: PUSH
60730: LD_INT 5
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 3
60740: NEG
60741: PUSH
60742: LD_INT 5
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 5
60752: NEG
60753: PUSH
60754: LD_INT 3
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: LD_INT 3
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: LD_INT 4
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: LD_INT 3
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: LD_INT 2
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: LD_INT 3
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: LD_INT 4
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 2
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 2
60854: NEG
60855: PUSH
60856: LD_INT 4
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 4
60866: PUSH
60867: LD_INT 0
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 4
60876: PUSH
60877: LD_INT 1
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 5
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 5
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 4
60907: PUSH
60908: LD_INT 1
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 3
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 3
60927: PUSH
60928: LD_INT 1
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 3
60938: PUSH
60939: LD_INT 2
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 5
60949: PUSH
60950: LD_INT 2
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 3
60959: PUSH
60960: LD_INT 3
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 3
60969: PUSH
60970: LD_INT 2
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 4
60979: PUSH
60980: LD_INT 3
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 4
60989: PUSH
60990: LD_INT 4
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 3
60999: PUSH
61000: LD_INT 4
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: LD_INT 3
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: LD_INT 2
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 4
61029: PUSH
61030: LD_INT 2
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 2
61039: PUSH
61040: LD_INT 4
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: LD_INT 4
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: LD_INT 3
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: PUSH
61070: LD_INT 4
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: LD_INT 5
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: LD_INT 5
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 4
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: LD_INT 3
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: PUSH
61122: LD_INT 5
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 2
61131: NEG
61132: PUSH
61133: LD_INT 3
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61187: LD_ADDR_VAR 0 34
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: LD_INT 4
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 5
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: LD_INT 4
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: LD_INT 3
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: LD_INT 3
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: LD_INT 4
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: LD_INT 5
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 2
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 2
61284: NEG
61285: PUSH
61286: LD_INT 5
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 3
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 3
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 4
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 4
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 3
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 2
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 2
61357: PUSH
61358: LD_INT 1
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 2
61368: PUSH
61369: LD_INT 2
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 4
61379: PUSH
61380: LD_INT 2
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 4
61389: PUSH
61390: LD_INT 4
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 4
61399: PUSH
61400: LD_INT 3
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 5
61409: PUSH
61410: LD_INT 4
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 5
61419: PUSH
61420: LD_INT 5
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 4
61429: PUSH
61430: LD_INT 5
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 3
61439: PUSH
61440: LD_INT 4
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 3
61449: PUSH
61450: LD_INT 3
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 5
61459: PUSH
61460: LD_INT 3
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 3
61469: PUSH
61470: LD_INT 5
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: LD_INT 3
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: LD_INT 2
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: LD_INT 3
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: PUSH
61510: LD_INT 4
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: LD_INT 4
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: LD_INT 3
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 2
61551: PUSH
61552: LD_INT 4
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 2
61561: NEG
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 4
61572: NEG
61573: PUSH
61574: LD_INT 0
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 4
61583: NEG
61584: PUSH
61585: LD_INT 1
61587: NEG
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 3
61595: NEG
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 3
61606: NEG
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 4
61617: NEG
61618: PUSH
61619: LD_INT 1
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 5
61628: NEG
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 5
61639: NEG
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 5
61651: NEG
61652: PUSH
61653: LD_INT 2
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 3
61663: NEG
61664: PUSH
61665: LD_INT 2
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: ST_TO_ADDR
// end ; end ;
61719: GO 61722
61721: POP
// case btype of b_depot , b_warehouse :
61722: LD_VAR 0 1
61726: PUSH
61727: LD_INT 0
61729: DOUBLE
61730: EQUAL
61731: IFTRUE 61741
61733: LD_INT 1
61735: DOUBLE
61736: EQUAL
61737: IFTRUE 61741
61739: GO 61942
61741: POP
// case nation of nation_american :
61742: LD_VAR 0 5
61746: PUSH
61747: LD_INT 1
61749: DOUBLE
61750: EQUAL
61751: IFTRUE 61755
61753: GO 61811
61755: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61756: LD_ADDR_VAR 0 9
61760: PUSH
61761: LD_VAR 0 11
61765: PUSH
61766: LD_VAR 0 12
61770: PUSH
61771: LD_VAR 0 13
61775: PUSH
61776: LD_VAR 0 14
61780: PUSH
61781: LD_VAR 0 15
61785: PUSH
61786: LD_VAR 0 16
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: PUSH
61799: LD_VAR 0 4
61803: PUSH
61804: LD_INT 1
61806: PLUS
61807: ARRAY
61808: ST_TO_ADDR
61809: GO 61940
61811: LD_INT 2
61813: DOUBLE
61814: EQUAL
61815: IFTRUE 61819
61817: GO 61875
61819: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61820: LD_ADDR_VAR 0 9
61824: PUSH
61825: LD_VAR 0 17
61829: PUSH
61830: LD_VAR 0 18
61834: PUSH
61835: LD_VAR 0 19
61839: PUSH
61840: LD_VAR 0 20
61844: PUSH
61845: LD_VAR 0 21
61849: PUSH
61850: LD_VAR 0 22
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: PUSH
61863: LD_VAR 0 4
61867: PUSH
61868: LD_INT 1
61870: PLUS
61871: ARRAY
61872: ST_TO_ADDR
61873: GO 61940
61875: LD_INT 3
61877: DOUBLE
61878: EQUAL
61879: IFTRUE 61883
61881: GO 61939
61883: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61884: LD_ADDR_VAR 0 9
61888: PUSH
61889: LD_VAR 0 23
61893: PUSH
61894: LD_VAR 0 24
61898: PUSH
61899: LD_VAR 0 25
61903: PUSH
61904: LD_VAR 0 26
61908: PUSH
61909: LD_VAR 0 27
61913: PUSH
61914: LD_VAR 0 28
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: PUSH
61927: LD_VAR 0 4
61931: PUSH
61932: LD_INT 1
61934: PLUS
61935: ARRAY
61936: ST_TO_ADDR
61937: GO 61940
61939: POP
61940: GO 62495
61942: LD_INT 2
61944: DOUBLE
61945: EQUAL
61946: IFTRUE 61956
61948: LD_INT 3
61950: DOUBLE
61951: EQUAL
61952: IFTRUE 61956
61954: GO 62012
61956: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61957: LD_ADDR_VAR 0 9
61961: PUSH
61962: LD_VAR 0 29
61966: PUSH
61967: LD_VAR 0 30
61971: PUSH
61972: LD_VAR 0 31
61976: PUSH
61977: LD_VAR 0 32
61981: PUSH
61982: LD_VAR 0 33
61986: PUSH
61987: LD_VAR 0 34
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: PUSH
62000: LD_VAR 0 4
62004: PUSH
62005: LD_INT 1
62007: PLUS
62008: ARRAY
62009: ST_TO_ADDR
62010: GO 62495
62012: LD_INT 16
62014: DOUBLE
62015: EQUAL
62016: IFTRUE 62074
62018: LD_INT 17
62020: DOUBLE
62021: EQUAL
62022: IFTRUE 62074
62024: LD_INT 18
62026: DOUBLE
62027: EQUAL
62028: IFTRUE 62074
62030: LD_INT 19
62032: DOUBLE
62033: EQUAL
62034: IFTRUE 62074
62036: LD_INT 22
62038: DOUBLE
62039: EQUAL
62040: IFTRUE 62074
62042: LD_INT 20
62044: DOUBLE
62045: EQUAL
62046: IFTRUE 62074
62048: LD_INT 21
62050: DOUBLE
62051: EQUAL
62052: IFTRUE 62074
62054: LD_INT 23
62056: DOUBLE
62057: EQUAL
62058: IFTRUE 62074
62060: LD_INT 24
62062: DOUBLE
62063: EQUAL
62064: IFTRUE 62074
62066: LD_INT 25
62068: DOUBLE
62069: EQUAL
62070: IFTRUE 62074
62072: GO 62130
62074: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62075: LD_ADDR_VAR 0 9
62079: PUSH
62080: LD_VAR 0 35
62084: PUSH
62085: LD_VAR 0 36
62089: PUSH
62090: LD_VAR 0 37
62094: PUSH
62095: LD_VAR 0 38
62099: PUSH
62100: LD_VAR 0 39
62104: PUSH
62105: LD_VAR 0 40
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: PUSH
62118: LD_VAR 0 4
62122: PUSH
62123: LD_INT 1
62125: PLUS
62126: ARRAY
62127: ST_TO_ADDR
62128: GO 62495
62130: LD_INT 6
62132: DOUBLE
62133: EQUAL
62134: IFTRUE 62186
62136: LD_INT 7
62138: DOUBLE
62139: EQUAL
62140: IFTRUE 62186
62142: LD_INT 8
62144: DOUBLE
62145: EQUAL
62146: IFTRUE 62186
62148: LD_INT 13
62150: DOUBLE
62151: EQUAL
62152: IFTRUE 62186
62154: LD_INT 12
62156: DOUBLE
62157: EQUAL
62158: IFTRUE 62186
62160: LD_INT 15
62162: DOUBLE
62163: EQUAL
62164: IFTRUE 62186
62166: LD_INT 11
62168: DOUBLE
62169: EQUAL
62170: IFTRUE 62186
62172: LD_INT 14
62174: DOUBLE
62175: EQUAL
62176: IFTRUE 62186
62178: LD_INT 10
62180: DOUBLE
62181: EQUAL
62182: IFTRUE 62186
62184: GO 62242
62186: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62187: LD_ADDR_VAR 0 9
62191: PUSH
62192: LD_VAR 0 41
62196: PUSH
62197: LD_VAR 0 42
62201: PUSH
62202: LD_VAR 0 43
62206: PUSH
62207: LD_VAR 0 44
62211: PUSH
62212: LD_VAR 0 45
62216: PUSH
62217: LD_VAR 0 46
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: PUSH
62230: LD_VAR 0 4
62234: PUSH
62235: LD_INT 1
62237: PLUS
62238: ARRAY
62239: ST_TO_ADDR
62240: GO 62495
62242: LD_INT 36
62244: DOUBLE
62245: EQUAL
62246: IFTRUE 62250
62248: GO 62306
62250: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62251: LD_ADDR_VAR 0 9
62255: PUSH
62256: LD_VAR 0 47
62260: PUSH
62261: LD_VAR 0 48
62265: PUSH
62266: LD_VAR 0 49
62270: PUSH
62271: LD_VAR 0 50
62275: PUSH
62276: LD_VAR 0 51
62280: PUSH
62281: LD_VAR 0 52
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: PUSH
62294: LD_VAR 0 4
62298: PUSH
62299: LD_INT 1
62301: PLUS
62302: ARRAY
62303: ST_TO_ADDR
62304: GO 62495
62306: LD_INT 4
62308: DOUBLE
62309: EQUAL
62310: IFTRUE 62332
62312: LD_INT 5
62314: DOUBLE
62315: EQUAL
62316: IFTRUE 62332
62318: LD_INT 34
62320: DOUBLE
62321: EQUAL
62322: IFTRUE 62332
62324: LD_INT 37
62326: DOUBLE
62327: EQUAL
62328: IFTRUE 62332
62330: GO 62388
62332: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62333: LD_ADDR_VAR 0 9
62337: PUSH
62338: LD_VAR 0 53
62342: PUSH
62343: LD_VAR 0 54
62347: PUSH
62348: LD_VAR 0 55
62352: PUSH
62353: LD_VAR 0 56
62357: PUSH
62358: LD_VAR 0 57
62362: PUSH
62363: LD_VAR 0 58
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: PUSH
62376: LD_VAR 0 4
62380: PUSH
62381: LD_INT 1
62383: PLUS
62384: ARRAY
62385: ST_TO_ADDR
62386: GO 62495
62388: LD_INT 31
62390: DOUBLE
62391: EQUAL
62392: IFTRUE 62438
62394: LD_INT 32
62396: DOUBLE
62397: EQUAL
62398: IFTRUE 62438
62400: LD_INT 33
62402: DOUBLE
62403: EQUAL
62404: IFTRUE 62438
62406: LD_INT 27
62408: DOUBLE
62409: EQUAL
62410: IFTRUE 62438
62412: LD_INT 26
62414: DOUBLE
62415: EQUAL
62416: IFTRUE 62438
62418: LD_INT 28
62420: DOUBLE
62421: EQUAL
62422: IFTRUE 62438
62424: LD_INT 29
62426: DOUBLE
62427: EQUAL
62428: IFTRUE 62438
62430: LD_INT 30
62432: DOUBLE
62433: EQUAL
62434: IFTRUE 62438
62436: GO 62494
62438: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62439: LD_ADDR_VAR 0 9
62443: PUSH
62444: LD_VAR 0 59
62448: PUSH
62449: LD_VAR 0 60
62453: PUSH
62454: LD_VAR 0 61
62458: PUSH
62459: LD_VAR 0 62
62463: PUSH
62464: LD_VAR 0 63
62468: PUSH
62469: LD_VAR 0 64
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: PUSH
62482: LD_VAR 0 4
62486: PUSH
62487: LD_INT 1
62489: PLUS
62490: ARRAY
62491: ST_TO_ADDR
62492: GO 62495
62494: POP
// temp_list2 = [ ] ;
62495: LD_ADDR_VAR 0 10
62499: PUSH
62500: EMPTY
62501: ST_TO_ADDR
// for i in temp_list do
62502: LD_ADDR_VAR 0 8
62506: PUSH
62507: LD_VAR 0 9
62511: PUSH
62512: FOR_IN
62513: IFFALSE 62565
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62515: LD_ADDR_VAR 0 10
62519: PUSH
62520: LD_VAR 0 10
62524: PUSH
62525: LD_VAR 0 8
62529: PUSH
62530: LD_INT 1
62532: ARRAY
62533: PUSH
62534: LD_VAR 0 2
62538: PLUS
62539: PUSH
62540: LD_VAR 0 8
62544: PUSH
62545: LD_INT 2
62547: ARRAY
62548: PUSH
62549: LD_VAR 0 3
62553: PLUS
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: EMPTY
62560: LIST
62561: ADD
62562: ST_TO_ADDR
62563: GO 62512
62565: POP
62566: POP
// result = temp_list2 ;
62567: LD_ADDR_VAR 0 7
62571: PUSH
62572: LD_VAR 0 10
62576: ST_TO_ADDR
// end ;
62577: LD_VAR 0 7
62581: RET
// export function EnemyInRange ( unit , dist ) ; begin
62582: LD_INT 0
62584: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62585: LD_ADDR_VAR 0 3
62589: PUSH
62590: LD_VAR 0 1
62594: PPUSH
62595: CALL_OW 255
62599: PPUSH
62600: LD_VAR 0 1
62604: PPUSH
62605: CALL_OW 250
62609: PPUSH
62610: LD_VAR 0 1
62614: PPUSH
62615: CALL_OW 251
62619: PPUSH
62620: LD_VAR 0 2
62624: PPUSH
62625: CALL 35978 0 4
62629: PUSH
62630: LD_INT 4
62632: ARRAY
62633: ST_TO_ADDR
// end ;
62634: LD_VAR 0 3
62638: RET
// export function PlayerSeeMe ( unit ) ; begin
62639: LD_INT 0
62641: PPUSH
// result := See ( your_side , unit ) ;
62642: LD_ADDR_VAR 0 2
62646: PUSH
62647: LD_OWVAR 2
62651: PPUSH
62652: LD_VAR 0 1
62656: PPUSH
62657: CALL_OW 292
62661: ST_TO_ADDR
// end ;
62662: LD_VAR 0 2
62666: RET
// export function ReverseDir ( unit ) ; begin
62667: LD_INT 0
62669: PPUSH
// if not unit then
62670: LD_VAR 0 1
62674: NOT
62675: IFFALSE 62679
// exit ;
62677: GO 62702
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62679: LD_ADDR_VAR 0 2
62683: PUSH
62684: LD_VAR 0 1
62688: PPUSH
62689: CALL_OW 254
62693: PUSH
62694: LD_INT 3
62696: PLUS
62697: PUSH
62698: LD_INT 6
62700: MOD
62701: ST_TO_ADDR
// end ;
62702: LD_VAR 0 2
62706: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62707: LD_INT 0
62709: PPUSH
62710: PPUSH
62711: PPUSH
62712: PPUSH
62713: PPUSH
// if not hexes then
62714: LD_VAR 0 2
62718: NOT
62719: IFFALSE 62723
// exit ;
62721: GO 62871
// dist := 9999 ;
62723: LD_ADDR_VAR 0 5
62727: PUSH
62728: LD_INT 9999
62730: ST_TO_ADDR
// for i = 1 to hexes do
62731: LD_ADDR_VAR 0 4
62735: PUSH
62736: DOUBLE
62737: LD_INT 1
62739: DEC
62740: ST_TO_ADDR
62741: LD_VAR 0 2
62745: PUSH
62746: FOR_TO
62747: IFFALSE 62859
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62749: LD_VAR 0 1
62753: PPUSH
62754: LD_VAR 0 2
62758: PUSH
62759: LD_VAR 0 4
62763: ARRAY
62764: PUSH
62765: LD_INT 1
62767: ARRAY
62768: PPUSH
62769: LD_VAR 0 2
62773: PUSH
62774: LD_VAR 0 4
62778: ARRAY
62779: PUSH
62780: LD_INT 2
62782: ARRAY
62783: PPUSH
62784: CALL_OW 297
62788: PUSH
62789: LD_VAR 0 5
62793: LESS
62794: IFFALSE 62857
// begin hex := hexes [ i ] ;
62796: LD_ADDR_VAR 0 7
62800: PUSH
62801: LD_VAR 0 2
62805: PUSH
62806: LD_VAR 0 4
62810: ARRAY
62811: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62812: LD_ADDR_VAR 0 5
62816: PUSH
62817: LD_VAR 0 1
62821: PPUSH
62822: LD_VAR 0 2
62826: PUSH
62827: LD_VAR 0 4
62831: ARRAY
62832: PUSH
62833: LD_INT 1
62835: ARRAY
62836: PPUSH
62837: LD_VAR 0 2
62841: PUSH
62842: LD_VAR 0 4
62846: ARRAY
62847: PUSH
62848: LD_INT 2
62850: ARRAY
62851: PPUSH
62852: CALL_OW 297
62856: ST_TO_ADDR
// end ; end ;
62857: GO 62746
62859: POP
62860: POP
// result := hex ;
62861: LD_ADDR_VAR 0 3
62865: PUSH
62866: LD_VAR 0 7
62870: ST_TO_ADDR
// end ;
62871: LD_VAR 0 3
62875: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62876: LD_INT 0
62878: PPUSH
62879: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62880: LD_VAR 0 1
62884: NOT
62885: PUSH
62886: LD_VAR 0 1
62890: PUSH
62891: LD_INT 21
62893: PUSH
62894: LD_INT 2
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 23
62903: PUSH
62904: LD_INT 2
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PPUSH
62915: CALL_OW 69
62919: IN
62920: NOT
62921: OR
62922: IFFALSE 62926
// exit ;
62924: GO 62973
// for i = 1 to 3 do
62926: LD_ADDR_VAR 0 3
62930: PUSH
62931: DOUBLE
62932: LD_INT 1
62934: DEC
62935: ST_TO_ADDR
62936: LD_INT 3
62938: PUSH
62939: FOR_TO
62940: IFFALSE 62971
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62942: LD_VAR 0 1
62946: PPUSH
62947: CALL_OW 250
62951: PPUSH
62952: LD_VAR 0 1
62956: PPUSH
62957: CALL_OW 251
62961: PPUSH
62962: LD_INT 1
62964: PPUSH
62965: CALL_OW 453
62969: GO 62939
62971: POP
62972: POP
// end ;
62973: LD_VAR 0 2
62977: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62978: LD_INT 0
62980: PPUSH
62981: PPUSH
62982: PPUSH
62983: PPUSH
62984: PPUSH
62985: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62986: LD_VAR 0 1
62990: NOT
62991: PUSH
62992: LD_VAR 0 2
62996: NOT
62997: OR
62998: PUSH
62999: LD_VAR 0 1
63003: PPUSH
63004: CALL_OW 314
63008: OR
63009: IFFALSE 63013
// exit ;
63011: GO 63454
// x := GetX ( enemy_unit ) ;
63013: LD_ADDR_VAR 0 7
63017: PUSH
63018: LD_VAR 0 2
63022: PPUSH
63023: CALL_OW 250
63027: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63028: LD_ADDR_VAR 0 8
63032: PUSH
63033: LD_VAR 0 2
63037: PPUSH
63038: CALL_OW 251
63042: ST_TO_ADDR
// if not x or not y then
63043: LD_VAR 0 7
63047: NOT
63048: PUSH
63049: LD_VAR 0 8
63053: NOT
63054: OR
63055: IFFALSE 63059
// exit ;
63057: GO 63454
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63059: LD_ADDR_VAR 0 6
63063: PUSH
63064: LD_VAR 0 7
63068: PPUSH
63069: LD_INT 0
63071: PPUSH
63072: LD_INT 4
63074: PPUSH
63075: CALL_OW 272
63079: PUSH
63080: LD_VAR 0 8
63084: PPUSH
63085: LD_INT 0
63087: PPUSH
63088: LD_INT 4
63090: PPUSH
63091: CALL_OW 273
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_VAR 0 7
63104: PPUSH
63105: LD_INT 1
63107: PPUSH
63108: LD_INT 4
63110: PPUSH
63111: CALL_OW 272
63115: PUSH
63116: LD_VAR 0 8
63120: PPUSH
63121: LD_INT 1
63123: PPUSH
63124: LD_INT 4
63126: PPUSH
63127: CALL_OW 273
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_VAR 0 7
63140: PPUSH
63141: LD_INT 2
63143: PPUSH
63144: LD_INT 4
63146: PPUSH
63147: CALL_OW 272
63151: PUSH
63152: LD_VAR 0 8
63156: PPUSH
63157: LD_INT 2
63159: PPUSH
63160: LD_INT 4
63162: PPUSH
63163: CALL_OW 273
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_VAR 0 7
63176: PPUSH
63177: LD_INT 3
63179: PPUSH
63180: LD_INT 4
63182: PPUSH
63183: CALL_OW 272
63187: PUSH
63188: LD_VAR 0 8
63192: PPUSH
63193: LD_INT 3
63195: PPUSH
63196: LD_INT 4
63198: PPUSH
63199: CALL_OW 273
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_VAR 0 7
63212: PPUSH
63213: LD_INT 4
63215: PPUSH
63216: LD_INT 4
63218: PPUSH
63219: CALL_OW 272
63223: PUSH
63224: LD_VAR 0 8
63228: PPUSH
63229: LD_INT 4
63231: PPUSH
63232: LD_INT 4
63234: PPUSH
63235: CALL_OW 273
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_VAR 0 7
63248: PPUSH
63249: LD_INT 5
63251: PPUSH
63252: LD_INT 4
63254: PPUSH
63255: CALL_OW 272
63259: PUSH
63260: LD_VAR 0 8
63264: PPUSH
63265: LD_INT 5
63267: PPUSH
63268: LD_INT 4
63270: PPUSH
63271: CALL_OW 273
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: ST_TO_ADDR
// for i = tmp downto 1 do
63288: LD_ADDR_VAR 0 4
63292: PUSH
63293: DOUBLE
63294: LD_VAR 0 6
63298: INC
63299: ST_TO_ADDR
63300: LD_INT 1
63302: PUSH
63303: FOR_DOWNTO
63304: IFFALSE 63405
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63306: LD_VAR 0 6
63310: PUSH
63311: LD_VAR 0 4
63315: ARRAY
63316: PUSH
63317: LD_INT 1
63319: ARRAY
63320: PPUSH
63321: LD_VAR 0 6
63325: PUSH
63326: LD_VAR 0 4
63330: ARRAY
63331: PUSH
63332: LD_INT 2
63334: ARRAY
63335: PPUSH
63336: CALL_OW 488
63340: NOT
63341: PUSH
63342: LD_VAR 0 6
63346: PUSH
63347: LD_VAR 0 4
63351: ARRAY
63352: PUSH
63353: LD_INT 1
63355: ARRAY
63356: PPUSH
63357: LD_VAR 0 6
63361: PUSH
63362: LD_VAR 0 4
63366: ARRAY
63367: PUSH
63368: LD_INT 2
63370: ARRAY
63371: PPUSH
63372: CALL_OW 428
63376: PUSH
63377: LD_INT 0
63379: NONEQUAL
63380: OR
63381: IFFALSE 63403
// tmp := Delete ( tmp , i ) ;
63383: LD_ADDR_VAR 0 6
63387: PUSH
63388: LD_VAR 0 6
63392: PPUSH
63393: LD_VAR 0 4
63397: PPUSH
63398: CALL_OW 3
63402: ST_TO_ADDR
63403: GO 63303
63405: POP
63406: POP
// j := GetClosestHex ( unit , tmp ) ;
63407: LD_ADDR_VAR 0 5
63411: PUSH
63412: LD_VAR 0 1
63416: PPUSH
63417: LD_VAR 0 6
63421: PPUSH
63422: CALL 62707 0 2
63426: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63427: LD_VAR 0 1
63431: PPUSH
63432: LD_VAR 0 5
63436: PUSH
63437: LD_INT 1
63439: ARRAY
63440: PPUSH
63441: LD_VAR 0 5
63445: PUSH
63446: LD_INT 2
63448: ARRAY
63449: PPUSH
63450: CALL_OW 111
// end ;
63454: LD_VAR 0 3
63458: RET
// export function PrepareApemanSoldier ( ) ; begin
63459: LD_INT 0
63461: PPUSH
// uc_nation := 0 ;
63462: LD_ADDR_OWVAR 21
63466: PUSH
63467: LD_INT 0
63469: ST_TO_ADDR
// hc_sex := sex_male ;
63470: LD_ADDR_OWVAR 27
63474: PUSH
63475: LD_INT 1
63477: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63478: LD_ADDR_OWVAR 28
63482: PUSH
63483: LD_INT 15
63485: ST_TO_ADDR
// hc_gallery :=  ;
63486: LD_ADDR_OWVAR 33
63490: PUSH
63491: LD_STRING 
63493: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63494: LD_ADDR_OWVAR 31
63498: PUSH
63499: LD_INT 0
63501: PPUSH
63502: LD_INT 3
63504: PPUSH
63505: CALL_OW 12
63509: PUSH
63510: LD_INT 0
63512: PPUSH
63513: LD_INT 3
63515: PPUSH
63516: CALL_OW 12
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: ST_TO_ADDR
// end ;
63533: LD_VAR 0 1
63537: RET
// export function PrepareApemanEngineer ( ) ; begin
63538: LD_INT 0
63540: PPUSH
// uc_nation := 0 ;
63541: LD_ADDR_OWVAR 21
63545: PUSH
63546: LD_INT 0
63548: ST_TO_ADDR
// hc_sex := sex_male ;
63549: LD_ADDR_OWVAR 27
63553: PUSH
63554: LD_INT 1
63556: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63557: LD_ADDR_OWVAR 28
63561: PUSH
63562: LD_INT 16
63564: ST_TO_ADDR
// hc_gallery :=  ;
63565: LD_ADDR_OWVAR 33
63569: PUSH
63570: LD_STRING 
63572: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63573: LD_ADDR_OWVAR 31
63577: PUSH
63578: LD_INT 0
63580: PPUSH
63581: LD_INT 3
63583: PPUSH
63584: CALL_OW 12
63588: PUSH
63589: LD_INT 0
63591: PPUSH
63592: LD_INT 3
63594: PPUSH
63595: CALL_OW 12
63599: PUSH
63600: LD_INT 0
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: ST_TO_ADDR
// end ;
63612: LD_VAR 0 1
63616: RET
// export function PrepareApeman ( agressivity ) ; begin
63617: LD_INT 0
63619: PPUSH
// uc_side := 0 ;
63620: LD_ADDR_OWVAR 20
63624: PUSH
63625: LD_INT 0
63627: ST_TO_ADDR
// uc_nation := 0 ;
63628: LD_ADDR_OWVAR 21
63632: PUSH
63633: LD_INT 0
63635: ST_TO_ADDR
// hc_sex := sex_male ;
63636: LD_ADDR_OWVAR 27
63640: PUSH
63641: LD_INT 1
63643: ST_TO_ADDR
// hc_class := class_apeman ;
63644: LD_ADDR_OWVAR 28
63648: PUSH
63649: LD_INT 12
63651: ST_TO_ADDR
// hc_gallery :=  ;
63652: LD_ADDR_OWVAR 33
63656: PUSH
63657: LD_STRING 
63659: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63660: LD_ADDR_OWVAR 35
63664: PUSH
63665: LD_VAR 0 1
63669: NEG
63670: PPUSH
63671: LD_VAR 0 1
63675: PPUSH
63676: CALL_OW 12
63680: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63681: LD_ADDR_OWVAR 31
63685: PUSH
63686: LD_INT 0
63688: PPUSH
63689: LD_INT 3
63691: PPUSH
63692: CALL_OW 12
63696: PUSH
63697: LD_INT 0
63699: PPUSH
63700: LD_INT 3
63702: PPUSH
63703: CALL_OW 12
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: LD_INT 0
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: ST_TO_ADDR
// end ;
63720: LD_VAR 0 2
63724: RET
// export function PrepareTiger ( agressivity ) ; begin
63725: LD_INT 0
63727: PPUSH
// uc_side := 0 ;
63728: LD_ADDR_OWVAR 20
63732: PUSH
63733: LD_INT 0
63735: ST_TO_ADDR
// uc_nation := 0 ;
63736: LD_ADDR_OWVAR 21
63740: PUSH
63741: LD_INT 0
63743: ST_TO_ADDR
// hc_class := class_tiger ;
63744: LD_ADDR_OWVAR 28
63748: PUSH
63749: LD_INT 14
63751: ST_TO_ADDR
// hc_gallery :=  ;
63752: LD_ADDR_OWVAR 33
63756: PUSH
63757: LD_STRING 
63759: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63760: LD_ADDR_OWVAR 35
63764: PUSH
63765: LD_VAR 0 1
63769: NEG
63770: PPUSH
63771: LD_VAR 0 1
63775: PPUSH
63776: CALL_OW 12
63780: ST_TO_ADDR
// end ;
63781: LD_VAR 0 2
63785: RET
// export function PrepareEnchidna ( ) ; begin
63786: LD_INT 0
63788: PPUSH
// uc_side := 0 ;
63789: LD_ADDR_OWVAR 20
63793: PUSH
63794: LD_INT 0
63796: ST_TO_ADDR
// uc_nation := 0 ;
63797: LD_ADDR_OWVAR 21
63801: PUSH
63802: LD_INT 0
63804: ST_TO_ADDR
// hc_class := class_baggie ;
63805: LD_ADDR_OWVAR 28
63809: PUSH
63810: LD_INT 13
63812: ST_TO_ADDR
// hc_gallery :=  ;
63813: LD_ADDR_OWVAR 33
63817: PUSH
63818: LD_STRING 
63820: ST_TO_ADDR
// end ;
63821: LD_VAR 0 1
63825: RET
// export function PrepareFrog ( ) ; begin
63826: LD_INT 0
63828: PPUSH
// uc_side := 0 ;
63829: LD_ADDR_OWVAR 20
63833: PUSH
63834: LD_INT 0
63836: ST_TO_ADDR
// uc_nation := 0 ;
63837: LD_ADDR_OWVAR 21
63841: PUSH
63842: LD_INT 0
63844: ST_TO_ADDR
// hc_class := class_frog ;
63845: LD_ADDR_OWVAR 28
63849: PUSH
63850: LD_INT 19
63852: ST_TO_ADDR
// hc_gallery :=  ;
63853: LD_ADDR_OWVAR 33
63857: PUSH
63858: LD_STRING 
63860: ST_TO_ADDR
// end ;
63861: LD_VAR 0 1
63865: RET
// export function PrepareFish ( ) ; begin
63866: LD_INT 0
63868: PPUSH
// uc_side := 0 ;
63869: LD_ADDR_OWVAR 20
63873: PUSH
63874: LD_INT 0
63876: ST_TO_ADDR
// uc_nation := 0 ;
63877: LD_ADDR_OWVAR 21
63881: PUSH
63882: LD_INT 0
63884: ST_TO_ADDR
// hc_class := class_fish ;
63885: LD_ADDR_OWVAR 28
63889: PUSH
63890: LD_INT 20
63892: ST_TO_ADDR
// hc_gallery :=  ;
63893: LD_ADDR_OWVAR 33
63897: PUSH
63898: LD_STRING 
63900: ST_TO_ADDR
// end ;
63901: LD_VAR 0 1
63905: RET
// export function PrepareBird ( ) ; begin
63906: LD_INT 0
63908: PPUSH
// uc_side := 0 ;
63909: LD_ADDR_OWVAR 20
63913: PUSH
63914: LD_INT 0
63916: ST_TO_ADDR
// uc_nation := 0 ;
63917: LD_ADDR_OWVAR 21
63921: PUSH
63922: LD_INT 0
63924: ST_TO_ADDR
// hc_class := class_phororhacos ;
63925: LD_ADDR_OWVAR 28
63929: PUSH
63930: LD_INT 18
63932: ST_TO_ADDR
// hc_gallery :=  ;
63933: LD_ADDR_OWVAR 33
63937: PUSH
63938: LD_STRING 
63940: ST_TO_ADDR
// end ;
63941: LD_VAR 0 1
63945: RET
// export function PrepareHorse ( ) ; begin
63946: LD_INT 0
63948: PPUSH
// uc_side := 0 ;
63949: LD_ADDR_OWVAR 20
63953: PUSH
63954: LD_INT 0
63956: ST_TO_ADDR
// uc_nation := 0 ;
63957: LD_ADDR_OWVAR 21
63961: PUSH
63962: LD_INT 0
63964: ST_TO_ADDR
// hc_class := class_horse ;
63965: LD_ADDR_OWVAR 28
63969: PUSH
63970: LD_INT 21
63972: ST_TO_ADDR
// hc_gallery :=  ;
63973: LD_ADDR_OWVAR 33
63977: PUSH
63978: LD_STRING 
63980: ST_TO_ADDR
// end ;
63981: LD_VAR 0 1
63985: RET
// export function PrepareMastodont ( ) ; begin
63986: LD_INT 0
63988: PPUSH
// uc_side := 0 ;
63989: LD_ADDR_OWVAR 20
63993: PUSH
63994: LD_INT 0
63996: ST_TO_ADDR
// uc_nation := 0 ;
63997: LD_ADDR_OWVAR 21
64001: PUSH
64002: LD_INT 0
64004: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64005: LD_ADDR_OWVAR 37
64009: PUSH
64010: LD_INT 31
64012: ST_TO_ADDR
// vc_control := control_rider ;
64013: LD_ADDR_OWVAR 38
64017: PUSH
64018: LD_INT 4
64020: ST_TO_ADDR
// end ;
64021: LD_VAR 0 1
64025: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64026: LD_INT 0
64028: PPUSH
64029: PPUSH
64030: PPUSH
// uc_side = 0 ;
64031: LD_ADDR_OWVAR 20
64035: PUSH
64036: LD_INT 0
64038: ST_TO_ADDR
// uc_nation = 0 ;
64039: LD_ADDR_OWVAR 21
64043: PUSH
64044: LD_INT 0
64046: ST_TO_ADDR
// InitHc_All ( ) ;
64047: CALL_OW 584
// InitVc ;
64051: CALL_OW 20
// if mastodonts then
64055: LD_VAR 0 6
64059: IFFALSE 64126
// for i = 1 to mastodonts do
64061: LD_ADDR_VAR 0 11
64065: PUSH
64066: DOUBLE
64067: LD_INT 1
64069: DEC
64070: ST_TO_ADDR
64071: LD_VAR 0 6
64075: PUSH
64076: FOR_TO
64077: IFFALSE 64124
// begin vc_chassis := 31 ;
64079: LD_ADDR_OWVAR 37
64083: PUSH
64084: LD_INT 31
64086: ST_TO_ADDR
// vc_control := control_rider ;
64087: LD_ADDR_OWVAR 38
64091: PUSH
64092: LD_INT 4
64094: ST_TO_ADDR
// animal := CreateVehicle ;
64095: LD_ADDR_VAR 0 12
64099: PUSH
64100: CALL_OW 45
64104: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64105: LD_VAR 0 12
64109: PPUSH
64110: LD_VAR 0 8
64114: PPUSH
64115: LD_INT 0
64117: PPUSH
64118: CALL 66261 0 3
// end ;
64122: GO 64076
64124: POP
64125: POP
// if horses then
64126: LD_VAR 0 5
64130: IFFALSE 64197
// for i = 1 to horses do
64132: LD_ADDR_VAR 0 11
64136: PUSH
64137: DOUBLE
64138: LD_INT 1
64140: DEC
64141: ST_TO_ADDR
64142: LD_VAR 0 5
64146: PUSH
64147: FOR_TO
64148: IFFALSE 64195
// begin hc_class := 21 ;
64150: LD_ADDR_OWVAR 28
64154: PUSH
64155: LD_INT 21
64157: ST_TO_ADDR
// hc_gallery :=  ;
64158: LD_ADDR_OWVAR 33
64162: PUSH
64163: LD_STRING 
64165: ST_TO_ADDR
// animal := CreateHuman ;
64166: LD_ADDR_VAR 0 12
64170: PUSH
64171: CALL_OW 44
64175: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64176: LD_VAR 0 12
64180: PPUSH
64181: LD_VAR 0 8
64185: PPUSH
64186: LD_INT 0
64188: PPUSH
64189: CALL 66261 0 3
// end ;
64193: GO 64147
64195: POP
64196: POP
// if birds then
64197: LD_VAR 0 1
64201: IFFALSE 64268
// for i = 1 to birds do
64203: LD_ADDR_VAR 0 11
64207: PUSH
64208: DOUBLE
64209: LD_INT 1
64211: DEC
64212: ST_TO_ADDR
64213: LD_VAR 0 1
64217: PUSH
64218: FOR_TO
64219: IFFALSE 64266
// begin hc_class = 18 ;
64221: LD_ADDR_OWVAR 28
64225: PUSH
64226: LD_INT 18
64228: ST_TO_ADDR
// hc_gallery =  ;
64229: LD_ADDR_OWVAR 33
64233: PUSH
64234: LD_STRING 
64236: ST_TO_ADDR
// animal := CreateHuman ;
64237: LD_ADDR_VAR 0 12
64241: PUSH
64242: CALL_OW 44
64246: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64247: LD_VAR 0 12
64251: PPUSH
64252: LD_VAR 0 8
64256: PPUSH
64257: LD_INT 0
64259: PPUSH
64260: CALL 66261 0 3
// end ;
64264: GO 64218
64266: POP
64267: POP
// if tigers then
64268: LD_VAR 0 2
64272: IFFALSE 64356
// for i = 1 to tigers do
64274: LD_ADDR_VAR 0 11
64278: PUSH
64279: DOUBLE
64280: LD_INT 1
64282: DEC
64283: ST_TO_ADDR
64284: LD_VAR 0 2
64288: PUSH
64289: FOR_TO
64290: IFFALSE 64354
// begin hc_class = class_tiger ;
64292: LD_ADDR_OWVAR 28
64296: PUSH
64297: LD_INT 14
64299: ST_TO_ADDR
// hc_gallery =  ;
64300: LD_ADDR_OWVAR 33
64304: PUSH
64305: LD_STRING 
64307: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64308: LD_ADDR_OWVAR 35
64312: PUSH
64313: LD_INT 7
64315: NEG
64316: PPUSH
64317: LD_INT 7
64319: PPUSH
64320: CALL_OW 12
64324: ST_TO_ADDR
// animal := CreateHuman ;
64325: LD_ADDR_VAR 0 12
64329: PUSH
64330: CALL_OW 44
64334: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64335: LD_VAR 0 12
64339: PPUSH
64340: LD_VAR 0 8
64344: PPUSH
64345: LD_INT 0
64347: PPUSH
64348: CALL 66261 0 3
// end ;
64352: GO 64289
64354: POP
64355: POP
// if apemans then
64356: LD_VAR 0 3
64360: IFFALSE 64483
// for i = 1 to apemans do
64362: LD_ADDR_VAR 0 11
64366: PUSH
64367: DOUBLE
64368: LD_INT 1
64370: DEC
64371: ST_TO_ADDR
64372: LD_VAR 0 3
64376: PUSH
64377: FOR_TO
64378: IFFALSE 64481
// begin hc_class = class_apeman ;
64380: LD_ADDR_OWVAR 28
64384: PUSH
64385: LD_INT 12
64387: ST_TO_ADDR
// hc_gallery =  ;
64388: LD_ADDR_OWVAR 33
64392: PUSH
64393: LD_STRING 
64395: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64396: LD_ADDR_OWVAR 35
64400: PUSH
64401: LD_INT 2
64403: NEG
64404: PPUSH
64405: LD_INT 2
64407: PPUSH
64408: CALL_OW 12
64412: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64413: LD_ADDR_OWVAR 31
64417: PUSH
64418: LD_INT 1
64420: PPUSH
64421: LD_INT 3
64423: PPUSH
64424: CALL_OW 12
64428: PUSH
64429: LD_INT 1
64431: PPUSH
64432: LD_INT 3
64434: PPUSH
64435: CALL_OW 12
64439: PUSH
64440: LD_INT 0
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: ST_TO_ADDR
// animal := CreateHuman ;
64452: LD_ADDR_VAR 0 12
64456: PUSH
64457: CALL_OW 44
64461: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64462: LD_VAR 0 12
64466: PPUSH
64467: LD_VAR 0 8
64471: PPUSH
64472: LD_INT 0
64474: PPUSH
64475: CALL 66261 0 3
// end ;
64479: GO 64377
64481: POP
64482: POP
// if enchidnas then
64483: LD_VAR 0 4
64487: IFFALSE 64554
// for i = 1 to enchidnas do
64489: LD_ADDR_VAR 0 11
64493: PUSH
64494: DOUBLE
64495: LD_INT 1
64497: DEC
64498: ST_TO_ADDR
64499: LD_VAR 0 4
64503: PUSH
64504: FOR_TO
64505: IFFALSE 64552
// begin hc_class = 13 ;
64507: LD_ADDR_OWVAR 28
64511: PUSH
64512: LD_INT 13
64514: ST_TO_ADDR
// hc_gallery =  ;
64515: LD_ADDR_OWVAR 33
64519: PUSH
64520: LD_STRING 
64522: ST_TO_ADDR
// animal := CreateHuman ;
64523: LD_ADDR_VAR 0 12
64527: PUSH
64528: CALL_OW 44
64532: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64533: LD_VAR 0 12
64537: PPUSH
64538: LD_VAR 0 8
64542: PPUSH
64543: LD_INT 0
64545: PPUSH
64546: CALL 66261 0 3
// end ;
64550: GO 64504
64552: POP
64553: POP
// if fishes then
64554: LD_VAR 0 7
64558: IFFALSE 64625
// for i = 1 to fishes do
64560: LD_ADDR_VAR 0 11
64564: PUSH
64565: DOUBLE
64566: LD_INT 1
64568: DEC
64569: ST_TO_ADDR
64570: LD_VAR 0 7
64574: PUSH
64575: FOR_TO
64576: IFFALSE 64623
// begin hc_class = 20 ;
64578: LD_ADDR_OWVAR 28
64582: PUSH
64583: LD_INT 20
64585: ST_TO_ADDR
// hc_gallery =  ;
64586: LD_ADDR_OWVAR 33
64590: PUSH
64591: LD_STRING 
64593: ST_TO_ADDR
// animal := CreateHuman ;
64594: LD_ADDR_VAR 0 12
64598: PUSH
64599: CALL_OW 44
64603: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64604: LD_VAR 0 12
64608: PPUSH
64609: LD_VAR 0 9
64613: PPUSH
64614: LD_INT 0
64616: PPUSH
64617: CALL 66261 0 3
// end ;
64621: GO 64575
64623: POP
64624: POP
// end ;
64625: LD_VAR 0 10
64629: RET
// export function WantHeal ( sci , unit ) ; begin
64630: LD_INT 0
64632: PPUSH
// if GetTaskList ( sci ) > 0 then
64633: LD_VAR 0 1
64637: PPUSH
64638: CALL_OW 437
64642: PUSH
64643: LD_INT 0
64645: GREATER
64646: IFFALSE 64716
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64648: LD_VAR 0 1
64652: PPUSH
64653: CALL_OW 437
64657: PUSH
64658: LD_INT 1
64660: ARRAY
64661: PUSH
64662: LD_INT 1
64664: ARRAY
64665: PUSH
64666: LD_STRING l
64668: EQUAL
64669: PUSH
64670: LD_VAR 0 1
64674: PPUSH
64675: CALL_OW 437
64679: PUSH
64680: LD_INT 1
64682: ARRAY
64683: PUSH
64684: LD_INT 4
64686: ARRAY
64687: PUSH
64688: LD_VAR 0 2
64692: EQUAL
64693: AND
64694: IFFALSE 64706
// result := true else
64696: LD_ADDR_VAR 0 3
64700: PUSH
64701: LD_INT 1
64703: ST_TO_ADDR
64704: GO 64714
// result := false ;
64706: LD_ADDR_VAR 0 3
64710: PUSH
64711: LD_INT 0
64713: ST_TO_ADDR
// end else
64714: GO 64724
// result := false ;
64716: LD_ADDR_VAR 0 3
64720: PUSH
64721: LD_INT 0
64723: ST_TO_ADDR
// end ;
64724: LD_VAR 0 3
64728: RET
// export function HealTarget ( sci ) ; begin
64729: LD_INT 0
64731: PPUSH
// if not sci then
64732: LD_VAR 0 1
64736: NOT
64737: IFFALSE 64741
// exit ;
64739: GO 64806
// result := 0 ;
64741: LD_ADDR_VAR 0 2
64745: PUSH
64746: LD_INT 0
64748: ST_TO_ADDR
// if GetTaskList ( sci ) then
64749: LD_VAR 0 1
64753: PPUSH
64754: CALL_OW 437
64758: IFFALSE 64806
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64760: LD_VAR 0 1
64764: PPUSH
64765: CALL_OW 437
64769: PUSH
64770: LD_INT 1
64772: ARRAY
64773: PUSH
64774: LD_INT 1
64776: ARRAY
64777: PUSH
64778: LD_STRING l
64780: EQUAL
64781: IFFALSE 64806
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64783: LD_ADDR_VAR 0 2
64787: PUSH
64788: LD_VAR 0 1
64792: PPUSH
64793: CALL_OW 437
64797: PUSH
64798: LD_INT 1
64800: ARRAY
64801: PUSH
64802: LD_INT 4
64804: ARRAY
64805: ST_TO_ADDR
// end ;
64806: LD_VAR 0 2
64810: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64811: LD_INT 0
64813: PPUSH
64814: PPUSH
64815: PPUSH
64816: PPUSH
// if not base_units then
64817: LD_VAR 0 1
64821: NOT
64822: IFFALSE 64826
// exit ;
64824: GO 64913
// result := false ;
64826: LD_ADDR_VAR 0 2
64830: PUSH
64831: LD_INT 0
64833: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64834: LD_ADDR_VAR 0 5
64838: PUSH
64839: LD_VAR 0 1
64843: PPUSH
64844: LD_INT 21
64846: PUSH
64847: LD_INT 3
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PPUSH
64854: CALL_OW 72
64858: ST_TO_ADDR
// if not tmp then
64859: LD_VAR 0 5
64863: NOT
64864: IFFALSE 64868
// exit ;
64866: GO 64913
// for i in tmp do
64868: LD_ADDR_VAR 0 3
64872: PUSH
64873: LD_VAR 0 5
64877: PUSH
64878: FOR_IN
64879: IFFALSE 64911
// begin result := EnemyInRange ( i , 22 ) ;
64881: LD_ADDR_VAR 0 2
64885: PUSH
64886: LD_VAR 0 3
64890: PPUSH
64891: LD_INT 22
64893: PPUSH
64894: CALL 62582 0 2
64898: ST_TO_ADDR
// if result then
64899: LD_VAR 0 2
64903: IFFALSE 64909
// exit ;
64905: POP
64906: POP
64907: GO 64913
// end ;
64909: GO 64878
64911: POP
64912: POP
// end ;
64913: LD_VAR 0 2
64917: RET
// export function FilterByTag ( units , tag ) ; begin
64918: LD_INT 0
64920: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64921: LD_ADDR_VAR 0 3
64925: PUSH
64926: LD_VAR 0 1
64930: PPUSH
64931: LD_INT 120
64933: PUSH
64934: LD_VAR 0 2
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PPUSH
64943: CALL_OW 72
64947: ST_TO_ADDR
// end ;
64948: LD_VAR 0 3
64952: RET
// export function IsDriver ( un ) ; begin
64953: LD_INT 0
64955: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64956: LD_ADDR_VAR 0 2
64960: PUSH
64961: LD_VAR 0 1
64965: PUSH
64966: LD_INT 55
64968: PUSH
64969: EMPTY
64970: LIST
64971: PPUSH
64972: CALL_OW 69
64976: IN
64977: ST_TO_ADDR
// end ;
64978: LD_VAR 0 2
64982: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64983: LD_INT 0
64985: PPUSH
64986: PPUSH
// list := [ ] ;
64987: LD_ADDR_VAR 0 5
64991: PUSH
64992: EMPTY
64993: ST_TO_ADDR
// case d of 0 :
64994: LD_VAR 0 3
64998: PUSH
64999: LD_INT 0
65001: DOUBLE
65002: EQUAL
65003: IFTRUE 65007
65005: GO 65140
65007: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65008: LD_ADDR_VAR 0 5
65012: PUSH
65013: LD_VAR 0 1
65017: PUSH
65018: LD_INT 4
65020: MINUS
65021: PUSH
65022: LD_VAR 0 2
65026: PUSH
65027: LD_INT 4
65029: MINUS
65030: PUSH
65031: LD_INT 2
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: LIST
65038: PUSH
65039: LD_VAR 0 1
65043: PUSH
65044: LD_INT 3
65046: MINUS
65047: PUSH
65048: LD_VAR 0 2
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: LIST
65060: PUSH
65061: LD_VAR 0 1
65065: PUSH
65066: LD_INT 4
65068: PLUS
65069: PUSH
65070: LD_VAR 0 2
65074: PUSH
65075: LD_INT 4
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: LIST
65082: PUSH
65083: LD_VAR 0 1
65087: PUSH
65088: LD_INT 3
65090: PLUS
65091: PUSH
65092: LD_VAR 0 2
65096: PUSH
65097: LD_INT 3
65099: PLUS
65100: PUSH
65101: LD_INT 5
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: LIST
65108: PUSH
65109: LD_VAR 0 1
65113: PUSH
65114: LD_VAR 0 2
65118: PUSH
65119: LD_INT 4
65121: PLUS
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: LIST
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: ST_TO_ADDR
// end ; 1 :
65138: GO 65838
65140: LD_INT 1
65142: DOUBLE
65143: EQUAL
65144: IFTRUE 65148
65146: GO 65281
65148: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65149: LD_ADDR_VAR 0 5
65153: PUSH
65154: LD_VAR 0 1
65158: PUSH
65159: LD_VAR 0 2
65163: PUSH
65164: LD_INT 4
65166: MINUS
65167: PUSH
65168: LD_INT 3
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: LIST
65175: PUSH
65176: LD_VAR 0 1
65180: PUSH
65181: LD_INT 3
65183: MINUS
65184: PUSH
65185: LD_VAR 0 2
65189: PUSH
65190: LD_INT 3
65192: MINUS
65193: PUSH
65194: LD_INT 2
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: LIST
65201: PUSH
65202: LD_VAR 0 1
65206: PUSH
65207: LD_INT 4
65209: MINUS
65210: PUSH
65211: LD_VAR 0 2
65215: PUSH
65216: LD_INT 1
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: LIST
65223: PUSH
65224: LD_VAR 0 1
65228: PUSH
65229: LD_VAR 0 2
65233: PUSH
65234: LD_INT 3
65236: PLUS
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: LIST
65245: PUSH
65246: LD_VAR 0 1
65250: PUSH
65251: LD_INT 4
65253: PLUS
65254: PUSH
65255: LD_VAR 0 2
65259: PUSH
65260: LD_INT 4
65262: PLUS
65263: PUSH
65264: LD_INT 5
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: LIST
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: ST_TO_ADDR
// end ; 2 :
65279: GO 65838
65281: LD_INT 2
65283: DOUBLE
65284: EQUAL
65285: IFTRUE 65289
65287: GO 65418
65289: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65290: LD_ADDR_VAR 0 5
65294: PUSH
65295: LD_VAR 0 1
65299: PUSH
65300: LD_VAR 0 2
65304: PUSH
65305: LD_INT 3
65307: MINUS
65308: PUSH
65309: LD_INT 3
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: LIST
65316: PUSH
65317: LD_VAR 0 1
65321: PUSH
65322: LD_INT 4
65324: PLUS
65325: PUSH
65326: LD_VAR 0 2
65330: PUSH
65331: LD_INT 4
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: LIST
65338: PUSH
65339: LD_VAR 0 1
65343: PUSH
65344: LD_VAR 0 2
65348: PUSH
65349: LD_INT 4
65351: PLUS
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: LIST
65360: PUSH
65361: LD_VAR 0 1
65365: PUSH
65366: LD_INT 3
65368: MINUS
65369: PUSH
65370: LD_VAR 0 2
65374: PUSH
65375: LD_INT 1
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: LIST
65382: PUSH
65383: LD_VAR 0 1
65387: PUSH
65388: LD_INT 4
65390: MINUS
65391: PUSH
65392: LD_VAR 0 2
65396: PUSH
65397: LD_INT 4
65399: MINUS
65400: PUSH
65401: LD_INT 2
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: LIST
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: ST_TO_ADDR
// end ; 3 :
65416: GO 65838
65418: LD_INT 3
65420: DOUBLE
65421: EQUAL
65422: IFTRUE 65426
65424: GO 65559
65426: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65427: LD_ADDR_VAR 0 5
65431: PUSH
65432: LD_VAR 0 1
65436: PUSH
65437: LD_INT 3
65439: PLUS
65440: PUSH
65441: LD_VAR 0 2
65445: PUSH
65446: LD_INT 4
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: LIST
65453: PUSH
65454: LD_VAR 0 1
65458: PUSH
65459: LD_INT 4
65461: PLUS
65462: PUSH
65463: LD_VAR 0 2
65467: PUSH
65468: LD_INT 4
65470: PLUS
65471: PUSH
65472: LD_INT 5
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: LIST
65479: PUSH
65480: LD_VAR 0 1
65484: PUSH
65485: LD_INT 4
65487: MINUS
65488: PUSH
65489: LD_VAR 0 2
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: LIST
65501: PUSH
65502: LD_VAR 0 1
65506: PUSH
65507: LD_VAR 0 2
65511: PUSH
65512: LD_INT 4
65514: MINUS
65515: PUSH
65516: LD_INT 3
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: LIST
65523: PUSH
65524: LD_VAR 0 1
65528: PUSH
65529: LD_INT 3
65531: MINUS
65532: PUSH
65533: LD_VAR 0 2
65537: PUSH
65538: LD_INT 3
65540: MINUS
65541: PUSH
65542: LD_INT 2
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: LIST
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: ST_TO_ADDR
// end ; 4 :
65557: GO 65838
65559: LD_INT 4
65561: DOUBLE
65562: EQUAL
65563: IFTRUE 65567
65565: GO 65700
65567: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65568: LD_ADDR_VAR 0 5
65572: PUSH
65573: LD_VAR 0 1
65577: PUSH
65578: LD_VAR 0 2
65582: PUSH
65583: LD_INT 4
65585: PLUS
65586: PUSH
65587: LD_INT 0
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: LIST
65594: PUSH
65595: LD_VAR 0 1
65599: PUSH
65600: LD_INT 3
65602: PLUS
65603: PUSH
65604: LD_VAR 0 2
65608: PUSH
65609: LD_INT 3
65611: PLUS
65612: PUSH
65613: LD_INT 5
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: LIST
65620: PUSH
65621: LD_VAR 0 1
65625: PUSH
65626: LD_INT 4
65628: PLUS
65629: PUSH
65630: LD_VAR 0 2
65634: PUSH
65635: LD_INT 4
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: LIST
65642: PUSH
65643: LD_VAR 0 1
65647: PUSH
65648: LD_VAR 0 2
65652: PUSH
65653: LD_INT 3
65655: MINUS
65656: PUSH
65657: LD_INT 3
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: LIST
65664: PUSH
65665: LD_VAR 0 1
65669: PUSH
65670: LD_INT 4
65672: MINUS
65673: PUSH
65674: LD_VAR 0 2
65678: PUSH
65679: LD_INT 4
65681: MINUS
65682: PUSH
65683: LD_INT 2
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: LIST
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: ST_TO_ADDR
// end ; 5 :
65698: GO 65838
65700: LD_INT 5
65702: DOUBLE
65703: EQUAL
65704: IFTRUE 65708
65706: GO 65837
65708: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65709: LD_ADDR_VAR 0 5
65713: PUSH
65714: LD_VAR 0 1
65718: PUSH
65719: LD_INT 4
65721: MINUS
65722: PUSH
65723: LD_VAR 0 2
65727: PUSH
65728: LD_INT 1
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: LIST
65735: PUSH
65736: LD_VAR 0 1
65740: PUSH
65741: LD_VAR 0 2
65745: PUSH
65746: LD_INT 4
65748: MINUS
65749: PUSH
65750: LD_INT 3
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: LIST
65757: PUSH
65758: LD_VAR 0 1
65762: PUSH
65763: LD_INT 4
65765: PLUS
65766: PUSH
65767: LD_VAR 0 2
65771: PUSH
65772: LD_INT 4
65774: PLUS
65775: PUSH
65776: LD_INT 5
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: LIST
65783: PUSH
65784: LD_VAR 0 1
65788: PUSH
65789: LD_INT 3
65791: PLUS
65792: PUSH
65793: LD_VAR 0 2
65797: PUSH
65798: LD_INT 4
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: LIST
65805: PUSH
65806: LD_VAR 0 1
65810: PUSH
65811: LD_VAR 0 2
65815: PUSH
65816: LD_INT 3
65818: PLUS
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: LIST
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: ST_TO_ADDR
// end ; end ;
65835: GO 65838
65837: POP
// result := list ;
65838: LD_ADDR_VAR 0 4
65842: PUSH
65843: LD_VAR 0 5
65847: ST_TO_ADDR
// end ;
65848: LD_VAR 0 4
65852: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65853: LD_INT 0
65855: PPUSH
65856: PPUSH
65857: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65858: LD_VAR 0 1
65862: NOT
65863: PUSH
65864: LD_VAR 0 2
65868: PUSH
65869: LD_INT 1
65871: PUSH
65872: LD_INT 2
65874: PUSH
65875: LD_INT 3
65877: PUSH
65878: LD_INT 4
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: IN
65887: NOT
65888: OR
65889: IFFALSE 65893
// exit ;
65891: GO 65985
// tmp := [ ] ;
65893: LD_ADDR_VAR 0 5
65897: PUSH
65898: EMPTY
65899: ST_TO_ADDR
// for i in units do
65900: LD_ADDR_VAR 0 4
65904: PUSH
65905: LD_VAR 0 1
65909: PUSH
65910: FOR_IN
65911: IFFALSE 65954
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65913: LD_ADDR_VAR 0 5
65917: PUSH
65918: LD_VAR 0 5
65922: PPUSH
65923: LD_VAR 0 5
65927: PUSH
65928: LD_INT 1
65930: PLUS
65931: PPUSH
65932: LD_VAR 0 4
65936: PPUSH
65937: LD_VAR 0 2
65941: PPUSH
65942: CALL_OW 259
65946: PPUSH
65947: CALL_OW 2
65951: ST_TO_ADDR
65952: GO 65910
65954: POP
65955: POP
// if not tmp then
65956: LD_VAR 0 5
65960: NOT
65961: IFFALSE 65965
// exit ;
65963: GO 65985
// result := SortListByListDesc ( units , tmp ) ;
65965: LD_ADDR_VAR 0 3
65969: PUSH
65970: LD_VAR 0 1
65974: PPUSH
65975: LD_VAR 0 5
65979: PPUSH
65980: CALL_OW 77
65984: ST_TO_ADDR
// end ;
65985: LD_VAR 0 3
65989: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65990: LD_INT 0
65992: PPUSH
65993: PPUSH
65994: PPUSH
// result := false ;
65995: LD_ADDR_VAR 0 3
65999: PUSH
66000: LD_INT 0
66002: ST_TO_ADDR
// x := GetX ( building ) ;
66003: LD_ADDR_VAR 0 4
66007: PUSH
66008: LD_VAR 0 2
66012: PPUSH
66013: CALL_OW 250
66017: ST_TO_ADDR
// y := GetY ( building ) ;
66018: LD_ADDR_VAR 0 5
66022: PUSH
66023: LD_VAR 0 2
66027: PPUSH
66028: CALL_OW 251
66032: ST_TO_ADDR
// if not building or not x or not y then
66033: LD_VAR 0 2
66037: NOT
66038: PUSH
66039: LD_VAR 0 4
66043: NOT
66044: OR
66045: PUSH
66046: LD_VAR 0 5
66050: NOT
66051: OR
66052: IFFALSE 66056
// exit ;
66054: GO 66148
// if GetTaskList ( unit ) then
66056: LD_VAR 0 1
66060: PPUSH
66061: CALL_OW 437
66065: IFFALSE 66148
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66067: LD_STRING e
66069: PUSH
66070: LD_VAR 0 1
66074: PPUSH
66075: CALL_OW 437
66079: PUSH
66080: LD_INT 1
66082: ARRAY
66083: PUSH
66084: LD_INT 1
66086: ARRAY
66087: EQUAL
66088: PUSH
66089: LD_VAR 0 4
66093: PUSH
66094: LD_VAR 0 1
66098: PPUSH
66099: CALL_OW 437
66103: PUSH
66104: LD_INT 1
66106: ARRAY
66107: PUSH
66108: LD_INT 2
66110: ARRAY
66111: EQUAL
66112: AND
66113: PUSH
66114: LD_VAR 0 5
66118: PUSH
66119: LD_VAR 0 1
66123: PPUSH
66124: CALL_OW 437
66128: PUSH
66129: LD_INT 1
66131: ARRAY
66132: PUSH
66133: LD_INT 3
66135: ARRAY
66136: EQUAL
66137: AND
66138: IFFALSE 66148
// result := true end ;
66140: LD_ADDR_VAR 0 3
66144: PUSH
66145: LD_INT 1
66147: ST_TO_ADDR
// end ;
66148: LD_VAR 0 3
66152: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66153: LD_INT 0
66155: PPUSH
// result := false ;
66156: LD_ADDR_VAR 0 4
66160: PUSH
66161: LD_INT 0
66163: ST_TO_ADDR
// if GetTaskList ( unit ) then
66164: LD_VAR 0 1
66168: PPUSH
66169: CALL_OW 437
66173: IFFALSE 66256
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66175: LD_STRING M
66177: PUSH
66178: LD_VAR 0 1
66182: PPUSH
66183: CALL_OW 437
66187: PUSH
66188: LD_INT 1
66190: ARRAY
66191: PUSH
66192: LD_INT 1
66194: ARRAY
66195: EQUAL
66196: PUSH
66197: LD_VAR 0 2
66201: PUSH
66202: LD_VAR 0 1
66206: PPUSH
66207: CALL_OW 437
66211: PUSH
66212: LD_INT 1
66214: ARRAY
66215: PUSH
66216: LD_INT 2
66218: ARRAY
66219: EQUAL
66220: AND
66221: PUSH
66222: LD_VAR 0 3
66226: PUSH
66227: LD_VAR 0 1
66231: PPUSH
66232: CALL_OW 437
66236: PUSH
66237: LD_INT 1
66239: ARRAY
66240: PUSH
66241: LD_INT 3
66243: ARRAY
66244: EQUAL
66245: AND
66246: IFFALSE 66256
// result := true ;
66248: LD_ADDR_VAR 0 4
66252: PUSH
66253: LD_INT 1
66255: ST_TO_ADDR
// end ; end ;
66256: LD_VAR 0 4
66260: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66261: LD_INT 0
66263: PPUSH
66264: PPUSH
66265: PPUSH
66266: PPUSH
// if not unit or not area then
66267: LD_VAR 0 1
66271: NOT
66272: PUSH
66273: LD_VAR 0 2
66277: NOT
66278: OR
66279: IFFALSE 66283
// exit ;
66281: GO 66447
// tmp := AreaToList ( area , i ) ;
66283: LD_ADDR_VAR 0 6
66287: PUSH
66288: LD_VAR 0 2
66292: PPUSH
66293: LD_VAR 0 5
66297: PPUSH
66298: CALL_OW 517
66302: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66303: LD_ADDR_VAR 0 5
66307: PUSH
66308: DOUBLE
66309: LD_INT 1
66311: DEC
66312: ST_TO_ADDR
66313: LD_VAR 0 6
66317: PUSH
66318: LD_INT 1
66320: ARRAY
66321: PUSH
66322: FOR_TO
66323: IFFALSE 66445
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66325: LD_ADDR_VAR 0 7
66329: PUSH
66330: LD_VAR 0 6
66334: PUSH
66335: LD_INT 1
66337: ARRAY
66338: PUSH
66339: LD_VAR 0 5
66343: ARRAY
66344: PUSH
66345: LD_VAR 0 6
66349: PUSH
66350: LD_INT 2
66352: ARRAY
66353: PUSH
66354: LD_VAR 0 5
66358: ARRAY
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66364: LD_VAR 0 7
66368: PUSH
66369: LD_INT 1
66371: ARRAY
66372: PPUSH
66373: LD_VAR 0 7
66377: PUSH
66378: LD_INT 2
66380: ARRAY
66381: PPUSH
66382: CALL_OW 428
66386: PUSH
66387: LD_INT 0
66389: EQUAL
66390: IFFALSE 66443
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66392: LD_VAR 0 1
66396: PPUSH
66397: LD_VAR 0 7
66401: PUSH
66402: LD_INT 1
66404: ARRAY
66405: PPUSH
66406: LD_VAR 0 7
66410: PUSH
66411: LD_INT 2
66413: ARRAY
66414: PPUSH
66415: LD_VAR 0 3
66419: PPUSH
66420: CALL_OW 48
// result := IsPlaced ( unit ) ;
66424: LD_ADDR_VAR 0 4
66428: PUSH
66429: LD_VAR 0 1
66433: PPUSH
66434: CALL_OW 305
66438: ST_TO_ADDR
// exit ;
66439: POP
66440: POP
66441: GO 66447
// end ; end ;
66443: GO 66322
66445: POP
66446: POP
// end ;
66447: LD_VAR 0 4
66451: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66452: LD_INT 0
66454: PPUSH
66455: PPUSH
66456: PPUSH
// if not side or side > 8 then
66457: LD_VAR 0 1
66461: NOT
66462: PUSH
66463: LD_VAR 0 1
66467: PUSH
66468: LD_INT 8
66470: GREATER
66471: OR
66472: IFFALSE 66476
// exit ;
66474: GO 66663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66476: LD_ADDR_VAR 0 4
66480: PUSH
66481: LD_INT 22
66483: PUSH
66484: LD_VAR 0 1
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 21
66495: PUSH
66496: LD_INT 3
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PPUSH
66507: CALL_OW 69
66511: ST_TO_ADDR
// if not tmp then
66512: LD_VAR 0 4
66516: NOT
66517: IFFALSE 66521
// exit ;
66519: GO 66663
// enable_addtolog := true ;
66521: LD_ADDR_OWVAR 81
66525: PUSH
66526: LD_INT 1
66528: ST_TO_ADDR
// AddToLog ( [ ) ;
66529: LD_STRING [
66531: PPUSH
66532: CALL_OW 561
// for i in tmp do
66536: LD_ADDR_VAR 0 3
66540: PUSH
66541: LD_VAR 0 4
66545: PUSH
66546: FOR_IN
66547: IFFALSE 66654
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66549: LD_STRING [
66551: PUSH
66552: LD_VAR 0 3
66556: PPUSH
66557: CALL_OW 266
66561: STR
66562: PUSH
66563: LD_STRING , 
66565: STR
66566: PUSH
66567: LD_VAR 0 3
66571: PPUSH
66572: CALL_OW 250
66576: STR
66577: PUSH
66578: LD_STRING , 
66580: STR
66581: PUSH
66582: LD_VAR 0 3
66586: PPUSH
66587: CALL_OW 251
66591: STR
66592: PUSH
66593: LD_STRING , 
66595: STR
66596: PUSH
66597: LD_VAR 0 3
66601: PPUSH
66602: CALL_OW 254
66606: STR
66607: PUSH
66608: LD_STRING , 
66610: STR
66611: PUSH
66612: LD_VAR 0 3
66616: PPUSH
66617: LD_INT 1
66619: PPUSH
66620: CALL_OW 268
66624: STR
66625: PUSH
66626: LD_STRING , 
66628: STR
66629: PUSH
66630: LD_VAR 0 3
66634: PPUSH
66635: LD_INT 2
66637: PPUSH
66638: CALL_OW 268
66642: STR
66643: PUSH
66644: LD_STRING ],
66646: STR
66647: PPUSH
66648: CALL_OW 561
// end ;
66652: GO 66546
66654: POP
66655: POP
// AddToLog ( ]; ) ;
66656: LD_STRING ];
66658: PPUSH
66659: CALL_OW 561
// end ;
66663: LD_VAR 0 2
66667: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66668: LD_INT 0
66670: PPUSH
66671: PPUSH
66672: PPUSH
66673: PPUSH
66674: PPUSH
// if not area or not rate or not max then
66675: LD_VAR 0 1
66679: NOT
66680: PUSH
66681: LD_VAR 0 2
66685: NOT
66686: OR
66687: PUSH
66688: LD_VAR 0 4
66692: NOT
66693: OR
66694: IFFALSE 66698
// exit ;
66696: GO 66887
// while 1 do
66698: LD_INT 1
66700: IFFALSE 66887
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66702: LD_ADDR_VAR 0 9
66706: PUSH
66707: LD_VAR 0 1
66711: PPUSH
66712: LD_INT 1
66714: PPUSH
66715: CALL_OW 287
66719: PUSH
66720: LD_INT 10
66722: MUL
66723: ST_TO_ADDR
// r := rate / 10 ;
66724: LD_ADDR_VAR 0 7
66728: PUSH
66729: LD_VAR 0 2
66733: PUSH
66734: LD_INT 10
66736: DIVREAL
66737: ST_TO_ADDR
// time := 1 1$00 ;
66738: LD_ADDR_VAR 0 8
66742: PUSH
66743: LD_INT 2100
66745: ST_TO_ADDR
// if amount < min then
66746: LD_VAR 0 9
66750: PUSH
66751: LD_VAR 0 3
66755: LESS
66756: IFFALSE 66774
// r := r * 2 else
66758: LD_ADDR_VAR 0 7
66762: PUSH
66763: LD_VAR 0 7
66767: PUSH
66768: LD_INT 2
66770: MUL
66771: ST_TO_ADDR
66772: GO 66800
// if amount > max then
66774: LD_VAR 0 9
66778: PUSH
66779: LD_VAR 0 4
66783: GREATER
66784: IFFALSE 66800
// r := r / 2 ;
66786: LD_ADDR_VAR 0 7
66790: PUSH
66791: LD_VAR 0 7
66795: PUSH
66796: LD_INT 2
66798: DIVREAL
66799: ST_TO_ADDR
// time := time / r ;
66800: LD_ADDR_VAR 0 8
66804: PUSH
66805: LD_VAR 0 8
66809: PUSH
66810: LD_VAR 0 7
66814: DIVREAL
66815: ST_TO_ADDR
// if time < 0 then
66816: LD_VAR 0 8
66820: PUSH
66821: LD_INT 0
66823: LESS
66824: IFFALSE 66841
// time := time * - 1 ;
66826: LD_ADDR_VAR 0 8
66830: PUSH
66831: LD_VAR 0 8
66835: PUSH
66836: LD_INT 1
66838: NEG
66839: MUL
66840: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66841: LD_VAR 0 8
66845: PUSH
66846: LD_INT 35
66848: PPUSH
66849: LD_INT 875
66851: PPUSH
66852: CALL_OW 12
66856: PLUS
66857: PPUSH
66858: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66862: LD_INT 1
66864: PPUSH
66865: LD_INT 5
66867: PPUSH
66868: CALL_OW 12
66872: PPUSH
66873: LD_VAR 0 1
66877: PPUSH
66878: LD_INT 1
66880: PPUSH
66881: CALL_OW 55
// end ;
66885: GO 66698
// end ;
66887: LD_VAR 0 5
66891: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66892: LD_INT 0
66894: PPUSH
66895: PPUSH
66896: PPUSH
66897: PPUSH
66898: PPUSH
66899: PPUSH
66900: PPUSH
66901: PPUSH
// if not turrets or not factories then
66902: LD_VAR 0 1
66906: NOT
66907: PUSH
66908: LD_VAR 0 2
66912: NOT
66913: OR
66914: IFFALSE 66918
// exit ;
66916: GO 67225
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66918: LD_ADDR_VAR 0 10
66922: PUSH
66923: LD_INT 5
66925: PUSH
66926: LD_INT 6
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 2
66935: PUSH
66936: LD_INT 4
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 3
66945: PUSH
66946: LD_INT 5
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 24
66960: PUSH
66961: LD_INT 25
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 23
66970: PUSH
66971: LD_INT 27
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 42
66984: PUSH
66985: LD_INT 43
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 44
66994: PUSH
66995: LD_INT 46
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 45
67004: PUSH
67005: LD_INT 47
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: LIST
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: LIST
67021: ST_TO_ADDR
// result := [ ] ;
67022: LD_ADDR_VAR 0 3
67026: PUSH
67027: EMPTY
67028: ST_TO_ADDR
// for i in turrets do
67029: LD_ADDR_VAR 0 4
67033: PUSH
67034: LD_VAR 0 1
67038: PUSH
67039: FOR_IN
67040: IFFALSE 67223
// begin nat := GetNation ( i ) ;
67042: LD_ADDR_VAR 0 7
67046: PUSH
67047: LD_VAR 0 4
67051: PPUSH
67052: CALL_OW 248
67056: ST_TO_ADDR
// weapon := 0 ;
67057: LD_ADDR_VAR 0 8
67061: PUSH
67062: LD_INT 0
67064: ST_TO_ADDR
// if not nat then
67065: LD_VAR 0 7
67069: NOT
67070: IFFALSE 67074
// continue ;
67072: GO 67039
// for j in list [ nat ] do
67074: LD_ADDR_VAR 0 5
67078: PUSH
67079: LD_VAR 0 10
67083: PUSH
67084: LD_VAR 0 7
67088: ARRAY
67089: PUSH
67090: FOR_IN
67091: IFFALSE 67132
// if GetBWeapon ( i ) = j [ 1 ] then
67093: LD_VAR 0 4
67097: PPUSH
67098: CALL_OW 269
67102: PUSH
67103: LD_VAR 0 5
67107: PUSH
67108: LD_INT 1
67110: ARRAY
67111: EQUAL
67112: IFFALSE 67130
// begin weapon := j [ 2 ] ;
67114: LD_ADDR_VAR 0 8
67118: PUSH
67119: LD_VAR 0 5
67123: PUSH
67124: LD_INT 2
67126: ARRAY
67127: ST_TO_ADDR
// break ;
67128: GO 67132
// end ;
67130: GO 67090
67132: POP
67133: POP
// if not weapon then
67134: LD_VAR 0 8
67138: NOT
67139: IFFALSE 67143
// continue ;
67141: GO 67039
// for k in factories do
67143: LD_ADDR_VAR 0 6
67147: PUSH
67148: LD_VAR 0 2
67152: PUSH
67153: FOR_IN
67154: IFFALSE 67219
// begin weapons := AvailableWeaponList ( k ) ;
67156: LD_ADDR_VAR 0 9
67160: PUSH
67161: LD_VAR 0 6
67165: PPUSH
67166: CALL_OW 478
67170: ST_TO_ADDR
// if not weapons then
67171: LD_VAR 0 9
67175: NOT
67176: IFFALSE 67180
// continue ;
67178: GO 67153
// if weapon in weapons then
67180: LD_VAR 0 8
67184: PUSH
67185: LD_VAR 0 9
67189: IN
67190: IFFALSE 67217
// begin result := [ i , weapon ] ;
67192: LD_ADDR_VAR 0 3
67196: PUSH
67197: LD_VAR 0 4
67201: PUSH
67202: LD_VAR 0 8
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: ST_TO_ADDR
// exit ;
67211: POP
67212: POP
67213: POP
67214: POP
67215: GO 67225
// end ; end ;
67217: GO 67153
67219: POP
67220: POP
// end ;
67221: GO 67039
67223: POP
67224: POP
// end ;
67225: LD_VAR 0 3
67229: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67230: LD_INT 0
67232: PPUSH
// if not side or side > 8 then
67233: LD_VAR 0 3
67237: NOT
67238: PUSH
67239: LD_VAR 0 3
67243: PUSH
67244: LD_INT 8
67246: GREATER
67247: OR
67248: IFFALSE 67252
// exit ;
67250: GO 67311
// if not range then
67252: LD_VAR 0 4
67256: NOT
67257: IFFALSE 67268
// range := - 12 ;
67259: LD_ADDR_VAR 0 4
67263: PUSH
67264: LD_INT 12
67266: NEG
67267: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67268: LD_VAR 0 1
67272: PPUSH
67273: LD_VAR 0 2
67277: PPUSH
67278: LD_VAR 0 3
67282: PPUSH
67283: LD_VAR 0 4
67287: PPUSH
67288: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67292: LD_VAR 0 1
67296: PPUSH
67297: LD_VAR 0 2
67301: PPUSH
67302: LD_VAR 0 3
67306: PPUSH
67307: CALL_OW 331
// end ;
67311: LD_VAR 0 5
67315: RET
// export function Video ( mode ) ; begin
67316: LD_INT 0
67318: PPUSH
// ingame_video = mode ;
67319: LD_ADDR_OWVAR 52
67323: PUSH
67324: LD_VAR 0 1
67328: ST_TO_ADDR
// interface_hidden = mode ;
67329: LD_ADDR_OWVAR 54
67333: PUSH
67334: LD_VAR 0 1
67338: ST_TO_ADDR
// end ;
67339: LD_VAR 0 2
67343: RET
// export function Join ( array , element ) ; begin
67344: LD_INT 0
67346: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67347: LD_ADDR_VAR 0 3
67351: PUSH
67352: LD_VAR 0 1
67356: PPUSH
67357: LD_VAR 0 1
67361: PUSH
67362: LD_INT 1
67364: PLUS
67365: PPUSH
67366: LD_VAR 0 2
67370: PPUSH
67371: CALL_OW 1
67375: ST_TO_ADDR
// end ;
67376: LD_VAR 0 3
67380: RET
// export function JoinUnion ( array , element ) ; begin
67381: LD_INT 0
67383: PPUSH
// result := array union element ;
67384: LD_ADDR_VAR 0 3
67388: PUSH
67389: LD_VAR 0 1
67393: PUSH
67394: LD_VAR 0 2
67398: UNION
67399: ST_TO_ADDR
// end ;
67400: LD_VAR 0 3
67404: RET
// export function GetBehemoths ( side ) ; begin
67405: LD_INT 0
67407: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67408: LD_ADDR_VAR 0 2
67412: PUSH
67413: LD_INT 22
67415: PUSH
67416: LD_VAR 0 1
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 31
67427: PUSH
67428: LD_INT 25
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PPUSH
67439: CALL_OW 69
67443: ST_TO_ADDR
// end ;
67444: LD_VAR 0 2
67448: RET
// export function Shuffle ( array ) ; var i , index ; begin
67449: LD_INT 0
67451: PPUSH
67452: PPUSH
67453: PPUSH
// result := [ ] ;
67454: LD_ADDR_VAR 0 2
67458: PUSH
67459: EMPTY
67460: ST_TO_ADDR
// if not array then
67461: LD_VAR 0 1
67465: NOT
67466: IFFALSE 67470
// exit ;
67468: GO 67569
// Randomize ;
67470: CALL_OW 10
// for i = array downto 1 do
67474: LD_ADDR_VAR 0 3
67478: PUSH
67479: DOUBLE
67480: LD_VAR 0 1
67484: INC
67485: ST_TO_ADDR
67486: LD_INT 1
67488: PUSH
67489: FOR_DOWNTO
67490: IFFALSE 67567
// begin index := rand ( 1 , array ) ;
67492: LD_ADDR_VAR 0 4
67496: PUSH
67497: LD_INT 1
67499: PPUSH
67500: LD_VAR 0 1
67504: PPUSH
67505: CALL_OW 12
67509: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67510: LD_ADDR_VAR 0 2
67514: PUSH
67515: LD_VAR 0 2
67519: PPUSH
67520: LD_VAR 0 2
67524: PUSH
67525: LD_INT 1
67527: PLUS
67528: PPUSH
67529: LD_VAR 0 1
67533: PUSH
67534: LD_VAR 0 4
67538: ARRAY
67539: PPUSH
67540: CALL_OW 2
67544: ST_TO_ADDR
// array := Delete ( array , index ) ;
67545: LD_ADDR_VAR 0 1
67549: PUSH
67550: LD_VAR 0 1
67554: PPUSH
67555: LD_VAR 0 4
67559: PPUSH
67560: CALL_OW 3
67564: ST_TO_ADDR
// end ;
67565: GO 67489
67567: POP
67568: POP
// end ;
67569: LD_VAR 0 2
67573: RET
// export function GetBaseMaterials ( base ) ; begin
67574: LD_INT 0
67576: PPUSH
// result := [ 0 , 0 , 0 ] ;
67577: LD_ADDR_VAR 0 2
67581: PUSH
67582: LD_INT 0
67584: PUSH
67585: LD_INT 0
67587: PUSH
67588: LD_INT 0
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: LIST
67595: ST_TO_ADDR
// if not base then
67596: LD_VAR 0 1
67600: NOT
67601: IFFALSE 67605
// exit ;
67603: GO 67654
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67605: LD_ADDR_VAR 0 2
67609: PUSH
67610: LD_VAR 0 1
67614: PPUSH
67615: LD_INT 1
67617: PPUSH
67618: CALL_OW 275
67622: PUSH
67623: LD_VAR 0 1
67627: PPUSH
67628: LD_INT 2
67630: PPUSH
67631: CALL_OW 275
67635: PUSH
67636: LD_VAR 0 1
67640: PPUSH
67641: LD_INT 3
67643: PPUSH
67644: CALL_OW 275
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: LIST
67653: ST_TO_ADDR
// end ;
67654: LD_VAR 0 2
67658: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67659: LD_INT 0
67661: PPUSH
67662: PPUSH
// result := array ;
67663: LD_ADDR_VAR 0 3
67667: PUSH
67668: LD_VAR 0 1
67672: ST_TO_ADDR
// if size >= result then
67673: LD_VAR 0 2
67677: PUSH
67678: LD_VAR 0 3
67682: GREATEREQUAL
67683: IFFALSE 67687
// exit ;
67685: GO 67737
// if size then
67687: LD_VAR 0 2
67691: IFFALSE 67737
// for i := array downto size do
67693: LD_ADDR_VAR 0 4
67697: PUSH
67698: DOUBLE
67699: LD_VAR 0 1
67703: INC
67704: ST_TO_ADDR
67705: LD_VAR 0 2
67709: PUSH
67710: FOR_DOWNTO
67711: IFFALSE 67735
// result := Delete ( result , result ) ;
67713: LD_ADDR_VAR 0 3
67717: PUSH
67718: LD_VAR 0 3
67722: PPUSH
67723: LD_VAR 0 3
67727: PPUSH
67728: CALL_OW 3
67732: ST_TO_ADDR
67733: GO 67710
67735: POP
67736: POP
// end ;
67737: LD_VAR 0 3
67741: RET
// export function ComExit ( unit ) ; var tmp ; begin
67742: LD_INT 0
67744: PPUSH
67745: PPUSH
// if not IsInUnit ( unit ) then
67746: LD_VAR 0 1
67750: PPUSH
67751: CALL_OW 310
67755: NOT
67756: IFFALSE 67760
// exit ;
67758: GO 67820
// tmp := IsInUnit ( unit ) ;
67760: LD_ADDR_VAR 0 3
67764: PUSH
67765: LD_VAR 0 1
67769: PPUSH
67770: CALL_OW 310
67774: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67775: LD_VAR 0 3
67779: PPUSH
67780: CALL_OW 247
67784: PUSH
67785: LD_INT 2
67787: EQUAL
67788: IFFALSE 67801
// ComExitVehicle ( unit ) else
67790: LD_VAR 0 1
67794: PPUSH
67795: CALL_OW 121
67799: GO 67810
// ComExitBuilding ( unit ) ;
67801: LD_VAR 0 1
67805: PPUSH
67806: CALL_OW 122
// result := tmp ;
67810: LD_ADDR_VAR 0 2
67814: PUSH
67815: LD_VAR 0 3
67819: ST_TO_ADDR
// end ;
67820: LD_VAR 0 2
67824: RET
// export function ComExitAll ( units ) ; var i ; begin
67825: LD_INT 0
67827: PPUSH
67828: PPUSH
// if not units then
67829: LD_VAR 0 1
67833: NOT
67834: IFFALSE 67838
// exit ;
67836: GO 67864
// for i in units do
67838: LD_ADDR_VAR 0 3
67842: PUSH
67843: LD_VAR 0 1
67847: PUSH
67848: FOR_IN
67849: IFFALSE 67862
// ComExit ( i ) ;
67851: LD_VAR 0 3
67855: PPUSH
67856: CALL 67742 0 1
67860: GO 67848
67862: POP
67863: POP
// end ;
67864: LD_VAR 0 2
67868: RET
// export function ResetHc ; begin
67869: LD_INT 0
67871: PPUSH
// InitHc ;
67872: CALL_OW 19
// hc_importance := 0 ;
67876: LD_ADDR_OWVAR 32
67880: PUSH
67881: LD_INT 0
67883: ST_TO_ADDR
// end ;
67884: LD_VAR 0 1
67888: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67889: LD_INT 0
67891: PPUSH
67892: PPUSH
67893: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67894: LD_ADDR_VAR 0 6
67898: PUSH
67899: LD_VAR 0 1
67903: PUSH
67904: LD_VAR 0 3
67908: PLUS
67909: PUSH
67910: LD_INT 2
67912: DIV
67913: ST_TO_ADDR
// if _x < 0 then
67914: LD_VAR 0 6
67918: PUSH
67919: LD_INT 0
67921: LESS
67922: IFFALSE 67939
// _x := _x * - 1 ;
67924: LD_ADDR_VAR 0 6
67928: PUSH
67929: LD_VAR 0 6
67933: PUSH
67934: LD_INT 1
67936: NEG
67937: MUL
67938: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67939: LD_ADDR_VAR 0 7
67943: PUSH
67944: LD_VAR 0 2
67948: PUSH
67949: LD_VAR 0 4
67953: PLUS
67954: PUSH
67955: LD_INT 2
67957: DIV
67958: ST_TO_ADDR
// if _y < 0 then
67959: LD_VAR 0 7
67963: PUSH
67964: LD_INT 0
67966: LESS
67967: IFFALSE 67984
// _y := _y * - 1 ;
67969: LD_ADDR_VAR 0 7
67973: PUSH
67974: LD_VAR 0 7
67978: PUSH
67979: LD_INT 1
67981: NEG
67982: MUL
67983: ST_TO_ADDR
// result := [ _x , _y ] ;
67984: LD_ADDR_VAR 0 5
67988: PUSH
67989: LD_VAR 0 6
67993: PUSH
67994: LD_VAR 0 7
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: ST_TO_ADDR
// end ;
68003: LD_VAR 0 5
68007: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68008: LD_INT 0
68010: PPUSH
68011: PPUSH
68012: PPUSH
68013: PPUSH
// task := GetTaskList ( unit ) ;
68014: LD_ADDR_VAR 0 7
68018: PUSH
68019: LD_VAR 0 1
68023: PPUSH
68024: CALL_OW 437
68028: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68029: LD_VAR 0 7
68033: NOT
68034: PUSH
68035: LD_VAR 0 1
68039: PPUSH
68040: LD_VAR 0 2
68044: PPUSH
68045: CALL_OW 308
68049: NOT
68050: AND
68051: IFFALSE 68055
// exit ;
68053: GO 68173
// if IsInArea ( unit , area ) then
68055: LD_VAR 0 1
68059: PPUSH
68060: LD_VAR 0 2
68064: PPUSH
68065: CALL_OW 308
68069: IFFALSE 68087
// begin ComMoveToArea ( unit , goAway ) ;
68071: LD_VAR 0 1
68075: PPUSH
68076: LD_VAR 0 3
68080: PPUSH
68081: CALL_OW 113
// exit ;
68085: GO 68173
// end ; if task [ 1 ] [ 1 ] <> M then
68087: LD_VAR 0 7
68091: PUSH
68092: LD_INT 1
68094: ARRAY
68095: PUSH
68096: LD_INT 1
68098: ARRAY
68099: PUSH
68100: LD_STRING M
68102: NONEQUAL
68103: IFFALSE 68107
// exit ;
68105: GO 68173
// x := task [ 1 ] [ 2 ] ;
68107: LD_ADDR_VAR 0 5
68111: PUSH
68112: LD_VAR 0 7
68116: PUSH
68117: LD_INT 1
68119: ARRAY
68120: PUSH
68121: LD_INT 2
68123: ARRAY
68124: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68125: LD_ADDR_VAR 0 6
68129: PUSH
68130: LD_VAR 0 7
68134: PUSH
68135: LD_INT 1
68137: ARRAY
68138: PUSH
68139: LD_INT 3
68141: ARRAY
68142: ST_TO_ADDR
// if InArea ( x , y , area ) then
68143: LD_VAR 0 5
68147: PPUSH
68148: LD_VAR 0 6
68152: PPUSH
68153: LD_VAR 0 2
68157: PPUSH
68158: CALL_OW 309
68162: IFFALSE 68173
// ComStop ( unit ) ;
68164: LD_VAR 0 1
68168: PPUSH
68169: CALL_OW 141
// end ;
68173: LD_VAR 0 4
68177: RET
// export function Abs ( value ) ; begin
68178: LD_INT 0
68180: PPUSH
// result := value ;
68181: LD_ADDR_VAR 0 2
68185: PUSH
68186: LD_VAR 0 1
68190: ST_TO_ADDR
// if value < 0 then
68191: LD_VAR 0 1
68195: PUSH
68196: LD_INT 0
68198: LESS
68199: IFFALSE 68216
// result := value * - 1 ;
68201: LD_ADDR_VAR 0 2
68205: PUSH
68206: LD_VAR 0 1
68210: PUSH
68211: LD_INT 1
68213: NEG
68214: MUL
68215: ST_TO_ADDR
// end ;
68216: LD_VAR 0 2
68220: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68221: LD_INT 0
68223: PPUSH
68224: PPUSH
68225: PPUSH
68226: PPUSH
68227: PPUSH
68228: PPUSH
68229: PPUSH
68230: PPUSH
// if not unit or not building then
68231: LD_VAR 0 1
68235: NOT
68236: PUSH
68237: LD_VAR 0 2
68241: NOT
68242: OR
68243: IFFALSE 68247
// exit ;
68245: GO 68473
// x := GetX ( building ) ;
68247: LD_ADDR_VAR 0 4
68251: PUSH
68252: LD_VAR 0 2
68256: PPUSH
68257: CALL_OW 250
68261: ST_TO_ADDR
// y := GetY ( building ) ;
68262: LD_ADDR_VAR 0 6
68266: PUSH
68267: LD_VAR 0 2
68271: PPUSH
68272: CALL_OW 251
68276: ST_TO_ADDR
// d := GetDir ( building ) ;
68277: LD_ADDR_VAR 0 8
68281: PUSH
68282: LD_VAR 0 2
68286: PPUSH
68287: CALL_OW 254
68291: ST_TO_ADDR
// r := 4 ;
68292: LD_ADDR_VAR 0 9
68296: PUSH
68297: LD_INT 4
68299: ST_TO_ADDR
// for i := 1 to 5 do
68300: LD_ADDR_VAR 0 10
68304: PUSH
68305: DOUBLE
68306: LD_INT 1
68308: DEC
68309: ST_TO_ADDR
68310: LD_INT 5
68312: PUSH
68313: FOR_TO
68314: IFFALSE 68471
// begin _x := ShiftX ( x , d , r + i ) ;
68316: LD_ADDR_VAR 0 5
68320: PUSH
68321: LD_VAR 0 4
68325: PPUSH
68326: LD_VAR 0 8
68330: PPUSH
68331: LD_VAR 0 9
68335: PUSH
68336: LD_VAR 0 10
68340: PLUS
68341: PPUSH
68342: CALL_OW 272
68346: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68347: LD_ADDR_VAR 0 7
68351: PUSH
68352: LD_VAR 0 6
68356: PPUSH
68357: LD_VAR 0 8
68361: PPUSH
68362: LD_VAR 0 9
68366: PUSH
68367: LD_VAR 0 10
68371: PLUS
68372: PPUSH
68373: CALL_OW 273
68377: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68378: LD_VAR 0 5
68382: PPUSH
68383: LD_VAR 0 7
68387: PPUSH
68388: CALL_OW 488
68392: PUSH
68393: LD_VAR 0 5
68397: PPUSH
68398: LD_VAR 0 7
68402: PPUSH
68403: CALL_OW 428
68407: PPUSH
68408: CALL_OW 247
68412: PUSH
68413: LD_INT 3
68415: PUSH
68416: LD_INT 2
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: IN
68423: NOT
68424: AND
68425: IFFALSE 68469
// begin ComMoveXY ( unit , _x , _y ) ;
68427: LD_VAR 0 1
68431: PPUSH
68432: LD_VAR 0 5
68436: PPUSH
68437: LD_VAR 0 7
68441: PPUSH
68442: CALL_OW 111
// result := [ _x , _y ] ;
68446: LD_ADDR_VAR 0 3
68450: PUSH
68451: LD_VAR 0 5
68455: PUSH
68456: LD_VAR 0 7
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: ST_TO_ADDR
// exit ;
68465: POP
68466: POP
68467: GO 68473
// end ; end ;
68469: GO 68313
68471: POP
68472: POP
// end ;
68473: LD_VAR 0 3
68477: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68478: LD_INT 0
68480: PPUSH
68481: PPUSH
68482: PPUSH
// result := 0 ;
68483: LD_ADDR_VAR 0 3
68487: PUSH
68488: LD_INT 0
68490: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68491: LD_VAR 0 1
68495: PUSH
68496: LD_INT 0
68498: LESS
68499: PUSH
68500: LD_VAR 0 1
68504: PUSH
68505: LD_INT 8
68507: GREATER
68508: OR
68509: PUSH
68510: LD_VAR 0 2
68514: PUSH
68515: LD_INT 0
68517: LESS
68518: OR
68519: PUSH
68520: LD_VAR 0 2
68524: PUSH
68525: LD_INT 8
68527: GREATER
68528: OR
68529: IFFALSE 68533
// exit ;
68531: GO 68608
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68533: LD_ADDR_VAR 0 4
68537: PUSH
68538: LD_INT 22
68540: PUSH
68541: LD_VAR 0 2
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PPUSH
68550: CALL_OW 69
68554: PUSH
68555: FOR_IN
68556: IFFALSE 68606
// begin un := UnitShoot ( i ) ;
68558: LD_ADDR_VAR 0 5
68562: PUSH
68563: LD_VAR 0 4
68567: PPUSH
68568: CALL_OW 504
68572: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68573: LD_VAR 0 5
68577: PPUSH
68578: CALL_OW 255
68582: PUSH
68583: LD_VAR 0 1
68587: EQUAL
68588: IFFALSE 68604
// begin result := un ;
68590: LD_ADDR_VAR 0 3
68594: PUSH
68595: LD_VAR 0 5
68599: ST_TO_ADDR
// exit ;
68600: POP
68601: POP
68602: GO 68608
// end ; end ;
68604: GO 68555
68606: POP
68607: POP
// end ;
68608: LD_VAR 0 3
68612: RET
// export function GetCargoBay ( units ) ; begin
68613: LD_INT 0
68615: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68616: LD_ADDR_VAR 0 2
68620: PUSH
68621: LD_VAR 0 1
68625: PPUSH
68626: LD_INT 2
68628: PUSH
68629: LD_INT 34
68631: PUSH
68632: LD_INT 12
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 34
68641: PUSH
68642: LD_INT 51
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 34
68651: PUSH
68652: LD_INT 32
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 34
68661: PUSH
68662: LD_EXP 115
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: PPUSH
68678: CALL_OW 72
68682: ST_TO_ADDR
// end ;
68683: LD_VAR 0 2
68687: RET
// export function Negate ( value ) ; begin
68688: LD_INT 0
68690: PPUSH
// result := not value ;
68691: LD_ADDR_VAR 0 2
68695: PUSH
68696: LD_VAR 0 1
68700: NOT
68701: ST_TO_ADDR
// end ;
68702: LD_VAR 0 2
68706: RET
// export function Inc ( value ) ; begin
68707: LD_INT 0
68709: PPUSH
// result := value + 1 ;
68710: LD_ADDR_VAR 0 2
68714: PUSH
68715: LD_VAR 0 1
68719: PUSH
68720: LD_INT 1
68722: PLUS
68723: ST_TO_ADDR
// end ;
68724: LD_VAR 0 2
68728: RET
// export function Dec ( value ) ; begin
68729: LD_INT 0
68731: PPUSH
// result := value - 1 ;
68732: LD_ADDR_VAR 0 2
68736: PUSH
68737: LD_VAR 0 1
68741: PUSH
68742: LD_INT 1
68744: MINUS
68745: ST_TO_ADDR
// end ;
68746: LD_VAR 0 2
68750: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68751: LD_INT 0
68753: PPUSH
68754: PPUSH
68755: PPUSH
68756: PPUSH
68757: PPUSH
68758: PPUSH
68759: PPUSH
68760: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68761: LD_VAR 0 1
68765: PPUSH
68766: LD_VAR 0 2
68770: PPUSH
68771: CALL_OW 488
68775: NOT
68776: PUSH
68777: LD_VAR 0 3
68781: PPUSH
68782: LD_VAR 0 4
68786: PPUSH
68787: CALL_OW 488
68791: NOT
68792: OR
68793: IFFALSE 68806
// begin result := - 1 ;
68795: LD_ADDR_VAR 0 5
68799: PUSH
68800: LD_INT 1
68802: NEG
68803: ST_TO_ADDR
// exit ;
68804: GO 69041
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68806: LD_ADDR_VAR 0 12
68810: PUSH
68811: LD_VAR 0 1
68815: PPUSH
68816: LD_VAR 0 2
68820: PPUSH
68821: LD_VAR 0 3
68825: PPUSH
68826: LD_VAR 0 4
68830: PPUSH
68831: CALL 67889 0 4
68835: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68836: LD_ADDR_VAR 0 11
68840: PUSH
68841: LD_VAR 0 1
68845: PPUSH
68846: LD_VAR 0 2
68850: PPUSH
68851: LD_VAR 0 12
68855: PUSH
68856: LD_INT 1
68858: ARRAY
68859: PPUSH
68860: LD_VAR 0 12
68864: PUSH
68865: LD_INT 2
68867: ARRAY
68868: PPUSH
68869: CALL_OW 298
68873: ST_TO_ADDR
// distance := 9999 ;
68874: LD_ADDR_VAR 0 10
68878: PUSH
68879: LD_INT 9999
68881: ST_TO_ADDR
// for i := 0 to 5 do
68882: LD_ADDR_VAR 0 6
68886: PUSH
68887: DOUBLE
68888: LD_INT 0
68890: DEC
68891: ST_TO_ADDR
68892: LD_INT 5
68894: PUSH
68895: FOR_TO
68896: IFFALSE 69039
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68898: LD_ADDR_VAR 0 7
68902: PUSH
68903: LD_VAR 0 1
68907: PPUSH
68908: LD_VAR 0 6
68912: PPUSH
68913: LD_VAR 0 11
68917: PPUSH
68918: CALL_OW 272
68922: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68923: LD_ADDR_VAR 0 8
68927: PUSH
68928: LD_VAR 0 2
68932: PPUSH
68933: LD_VAR 0 6
68937: PPUSH
68938: LD_VAR 0 11
68942: PPUSH
68943: CALL_OW 273
68947: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68948: LD_VAR 0 7
68952: PPUSH
68953: LD_VAR 0 8
68957: PPUSH
68958: CALL_OW 488
68962: NOT
68963: IFFALSE 68967
// continue ;
68965: GO 68895
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68967: LD_ADDR_VAR 0 9
68971: PUSH
68972: LD_VAR 0 12
68976: PUSH
68977: LD_INT 1
68979: ARRAY
68980: PPUSH
68981: LD_VAR 0 12
68985: PUSH
68986: LD_INT 2
68988: ARRAY
68989: PPUSH
68990: LD_VAR 0 7
68994: PPUSH
68995: LD_VAR 0 8
68999: PPUSH
69000: CALL_OW 298
69004: ST_TO_ADDR
// if tmp < distance then
69005: LD_VAR 0 9
69009: PUSH
69010: LD_VAR 0 10
69014: LESS
69015: IFFALSE 69037
// begin result := i ;
69017: LD_ADDR_VAR 0 5
69021: PUSH
69022: LD_VAR 0 6
69026: ST_TO_ADDR
// distance := tmp ;
69027: LD_ADDR_VAR 0 10
69031: PUSH
69032: LD_VAR 0 9
69036: ST_TO_ADDR
// end ; end ;
69037: GO 68895
69039: POP
69040: POP
// end ;
69041: LD_VAR 0 5
69045: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69046: LD_INT 0
69048: PPUSH
69049: PPUSH
// if not driver or not IsInUnit ( driver ) then
69050: LD_VAR 0 1
69054: NOT
69055: PUSH
69056: LD_VAR 0 1
69060: PPUSH
69061: CALL_OW 310
69065: NOT
69066: OR
69067: IFFALSE 69071
// exit ;
69069: GO 69161
// vehicle := IsInUnit ( driver ) ;
69071: LD_ADDR_VAR 0 3
69075: PUSH
69076: LD_VAR 0 1
69080: PPUSH
69081: CALL_OW 310
69085: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69086: LD_VAR 0 1
69090: PPUSH
69091: LD_STRING \
69093: PUSH
69094: LD_INT 0
69096: PUSH
69097: LD_INT 0
69099: PUSH
69100: LD_INT 0
69102: PUSH
69103: LD_INT 0
69105: PUSH
69106: LD_INT 0
69108: PUSH
69109: LD_INT 0
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: PUSH
69121: LD_STRING E
69123: PUSH
69124: LD_INT 0
69126: PUSH
69127: LD_INT 0
69129: PUSH
69130: LD_VAR 0 3
69134: PUSH
69135: LD_INT 0
69137: PUSH
69138: LD_INT 0
69140: PUSH
69141: LD_INT 0
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PPUSH
69157: CALL_OW 446
// end ;
69161: LD_VAR 0 2
69165: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69166: LD_INT 0
69168: PPUSH
69169: PPUSH
// if not driver or not IsInUnit ( driver ) then
69170: LD_VAR 0 1
69174: NOT
69175: PUSH
69176: LD_VAR 0 1
69180: PPUSH
69181: CALL_OW 310
69185: NOT
69186: OR
69187: IFFALSE 69191
// exit ;
69189: GO 69281
// vehicle := IsInUnit ( driver ) ;
69191: LD_ADDR_VAR 0 3
69195: PUSH
69196: LD_VAR 0 1
69200: PPUSH
69201: CALL_OW 310
69205: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69206: LD_VAR 0 1
69210: PPUSH
69211: LD_STRING \
69213: PUSH
69214: LD_INT 0
69216: PUSH
69217: LD_INT 0
69219: PUSH
69220: LD_INT 0
69222: PUSH
69223: LD_INT 0
69225: PUSH
69226: LD_INT 0
69228: PUSH
69229: LD_INT 0
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: PUSH
69241: LD_STRING E
69243: PUSH
69244: LD_INT 0
69246: PUSH
69247: LD_INT 0
69249: PUSH
69250: LD_VAR 0 3
69254: PUSH
69255: LD_INT 0
69257: PUSH
69258: LD_INT 0
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PPUSH
69277: CALL_OW 447
// end ;
69281: LD_VAR 0 2
69285: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69286: LD_INT 0
69288: PPUSH
69289: PPUSH
69290: PPUSH
// tmp := [ ] ;
69291: LD_ADDR_VAR 0 5
69295: PUSH
69296: EMPTY
69297: ST_TO_ADDR
// for i in units do
69298: LD_ADDR_VAR 0 4
69302: PUSH
69303: LD_VAR 0 1
69307: PUSH
69308: FOR_IN
69309: IFFALSE 69347
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69311: LD_ADDR_VAR 0 5
69315: PUSH
69316: LD_VAR 0 5
69320: PPUSH
69321: LD_VAR 0 5
69325: PUSH
69326: LD_INT 1
69328: PLUS
69329: PPUSH
69330: LD_VAR 0 4
69334: PPUSH
69335: CALL_OW 256
69339: PPUSH
69340: CALL_OW 2
69344: ST_TO_ADDR
69345: GO 69308
69347: POP
69348: POP
// if not tmp then
69349: LD_VAR 0 5
69353: NOT
69354: IFFALSE 69358
// exit ;
69356: GO 69406
// if asc then
69358: LD_VAR 0 2
69362: IFFALSE 69386
// result := SortListByListAsc ( units , tmp ) else
69364: LD_ADDR_VAR 0 3
69368: PUSH
69369: LD_VAR 0 1
69373: PPUSH
69374: LD_VAR 0 5
69378: PPUSH
69379: CALL_OW 76
69383: ST_TO_ADDR
69384: GO 69406
// result := SortListByListDesc ( units , tmp ) ;
69386: LD_ADDR_VAR 0 3
69390: PUSH
69391: LD_VAR 0 1
69395: PPUSH
69396: LD_VAR 0 5
69400: PPUSH
69401: CALL_OW 77
69405: ST_TO_ADDR
// end ;
69406: LD_VAR 0 3
69410: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69411: LD_INT 0
69413: PPUSH
69414: PPUSH
// task := GetTaskList ( mech ) ;
69415: LD_ADDR_VAR 0 4
69419: PUSH
69420: LD_VAR 0 1
69424: PPUSH
69425: CALL_OW 437
69429: ST_TO_ADDR
// if not task then
69430: LD_VAR 0 4
69434: NOT
69435: IFFALSE 69439
// exit ;
69437: GO 69481
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69439: LD_ADDR_VAR 0 3
69443: PUSH
69444: LD_VAR 0 4
69448: PUSH
69449: LD_INT 1
69451: ARRAY
69452: PUSH
69453: LD_INT 1
69455: ARRAY
69456: PUSH
69457: LD_STRING r
69459: EQUAL
69460: PUSH
69461: LD_VAR 0 4
69465: PUSH
69466: LD_INT 1
69468: ARRAY
69469: PUSH
69470: LD_INT 4
69472: ARRAY
69473: PUSH
69474: LD_VAR 0 2
69478: EQUAL
69479: AND
69480: ST_TO_ADDR
// end ;
69481: LD_VAR 0 3
69485: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69486: LD_INT 0
69488: PPUSH
// SetDir ( unit , d ) ;
69489: LD_VAR 0 1
69493: PPUSH
69494: LD_VAR 0 4
69498: PPUSH
69499: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69503: LD_VAR 0 1
69507: PPUSH
69508: LD_VAR 0 2
69512: PPUSH
69513: LD_VAR 0 3
69517: PPUSH
69518: LD_VAR 0 5
69522: PPUSH
69523: CALL_OW 48
// end ;
69527: LD_VAR 0 6
69531: RET
// export function ToNaturalNumber ( number ) ; begin
69532: LD_INT 0
69534: PPUSH
// result := number div 1 ;
69535: LD_ADDR_VAR 0 2
69539: PUSH
69540: LD_VAR 0 1
69544: PUSH
69545: LD_INT 1
69547: DIV
69548: ST_TO_ADDR
// if number < 0 then
69549: LD_VAR 0 1
69553: PUSH
69554: LD_INT 0
69556: LESS
69557: IFFALSE 69567
// result := 0 ;
69559: LD_ADDR_VAR 0 2
69563: PUSH
69564: LD_INT 0
69566: ST_TO_ADDR
// end ;
69567: LD_VAR 0 2
69571: RET
// export function SortByClass ( units , class ) ; var un ; begin
69572: LD_INT 0
69574: PPUSH
69575: PPUSH
// if not units or not class then
69576: LD_VAR 0 1
69580: NOT
69581: PUSH
69582: LD_VAR 0 2
69586: NOT
69587: OR
69588: IFFALSE 69592
// exit ;
69590: GO 69687
// result := [ ] ;
69592: LD_ADDR_VAR 0 3
69596: PUSH
69597: EMPTY
69598: ST_TO_ADDR
// for un in units do
69599: LD_ADDR_VAR 0 4
69603: PUSH
69604: LD_VAR 0 1
69608: PUSH
69609: FOR_IN
69610: IFFALSE 69685
// if GetClass ( un ) = class then
69612: LD_VAR 0 4
69616: PPUSH
69617: CALL_OW 257
69621: PUSH
69622: LD_VAR 0 2
69626: EQUAL
69627: IFFALSE 69654
// result := Insert ( result , 1 , un ) else
69629: LD_ADDR_VAR 0 3
69633: PUSH
69634: LD_VAR 0 3
69638: PPUSH
69639: LD_INT 1
69641: PPUSH
69642: LD_VAR 0 4
69646: PPUSH
69647: CALL_OW 2
69651: ST_TO_ADDR
69652: GO 69683
// result := Replace ( result , result + 1 , un ) ;
69654: LD_ADDR_VAR 0 3
69658: PUSH
69659: LD_VAR 0 3
69663: PPUSH
69664: LD_VAR 0 3
69668: PUSH
69669: LD_INT 1
69671: PLUS
69672: PPUSH
69673: LD_VAR 0 4
69677: PPUSH
69678: CALL_OW 1
69682: ST_TO_ADDR
69683: GO 69609
69685: POP
69686: POP
// end ;
69687: LD_VAR 0 3
69691: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69692: LD_INT 0
69694: PPUSH
69695: PPUSH
69696: PPUSH
69697: PPUSH
69698: PPUSH
69699: PPUSH
69700: PPUSH
// result := [ ] ;
69701: LD_ADDR_VAR 0 4
69705: PUSH
69706: EMPTY
69707: ST_TO_ADDR
// if x - r < 0 then
69708: LD_VAR 0 1
69712: PUSH
69713: LD_VAR 0 3
69717: MINUS
69718: PUSH
69719: LD_INT 0
69721: LESS
69722: IFFALSE 69734
// min_x := 0 else
69724: LD_ADDR_VAR 0 8
69728: PUSH
69729: LD_INT 0
69731: ST_TO_ADDR
69732: GO 69750
// min_x := x - r ;
69734: LD_ADDR_VAR 0 8
69738: PUSH
69739: LD_VAR 0 1
69743: PUSH
69744: LD_VAR 0 3
69748: MINUS
69749: ST_TO_ADDR
// if y - r < 0 then
69750: LD_VAR 0 2
69754: PUSH
69755: LD_VAR 0 3
69759: MINUS
69760: PUSH
69761: LD_INT 0
69763: LESS
69764: IFFALSE 69776
// min_y := 0 else
69766: LD_ADDR_VAR 0 7
69770: PUSH
69771: LD_INT 0
69773: ST_TO_ADDR
69774: GO 69792
// min_y := y - r ;
69776: LD_ADDR_VAR 0 7
69780: PUSH
69781: LD_VAR 0 2
69785: PUSH
69786: LD_VAR 0 3
69790: MINUS
69791: ST_TO_ADDR
// max_x := x + r ;
69792: LD_ADDR_VAR 0 9
69796: PUSH
69797: LD_VAR 0 1
69801: PUSH
69802: LD_VAR 0 3
69806: PLUS
69807: ST_TO_ADDR
// max_y := y + r ;
69808: LD_ADDR_VAR 0 10
69812: PUSH
69813: LD_VAR 0 2
69817: PUSH
69818: LD_VAR 0 3
69822: PLUS
69823: ST_TO_ADDR
// for _x = min_x to max_x do
69824: LD_ADDR_VAR 0 5
69828: PUSH
69829: DOUBLE
69830: LD_VAR 0 8
69834: DEC
69835: ST_TO_ADDR
69836: LD_VAR 0 9
69840: PUSH
69841: FOR_TO
69842: IFFALSE 69943
// for _y = min_y to max_y do
69844: LD_ADDR_VAR 0 6
69848: PUSH
69849: DOUBLE
69850: LD_VAR 0 7
69854: DEC
69855: ST_TO_ADDR
69856: LD_VAR 0 10
69860: PUSH
69861: FOR_TO
69862: IFFALSE 69939
// begin if not ValidHex ( _x , _y ) then
69864: LD_VAR 0 5
69868: PPUSH
69869: LD_VAR 0 6
69873: PPUSH
69874: CALL_OW 488
69878: NOT
69879: IFFALSE 69883
// continue ;
69881: GO 69861
// if GetResourceTypeXY ( _x , _y ) then
69883: LD_VAR 0 5
69887: PPUSH
69888: LD_VAR 0 6
69892: PPUSH
69893: CALL_OW 283
69897: IFFALSE 69937
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69899: LD_ADDR_VAR 0 4
69903: PUSH
69904: LD_VAR 0 4
69908: PPUSH
69909: LD_VAR 0 4
69913: PUSH
69914: LD_INT 1
69916: PLUS
69917: PPUSH
69918: LD_VAR 0 5
69922: PUSH
69923: LD_VAR 0 6
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PPUSH
69932: CALL_OW 1
69936: ST_TO_ADDR
// end ;
69937: GO 69861
69939: POP
69940: POP
69941: GO 69841
69943: POP
69944: POP
// end ;
69945: LD_VAR 0 4
69949: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69950: LD_INT 0
69952: PPUSH
69953: PPUSH
69954: PPUSH
69955: PPUSH
69956: PPUSH
69957: PPUSH
69958: PPUSH
69959: PPUSH
// if not units then
69960: LD_VAR 0 1
69964: NOT
69965: IFFALSE 69969
// exit ;
69967: GO 70495
// result := UnitFilter ( units , [ f_ok ] ) ;
69969: LD_ADDR_VAR 0 3
69973: PUSH
69974: LD_VAR 0 1
69978: PPUSH
69979: LD_INT 50
69981: PUSH
69982: EMPTY
69983: LIST
69984: PPUSH
69985: CALL_OW 72
69989: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69990: LD_ADDR_VAR 0 8
69994: PUSH
69995: LD_VAR 0 1
69999: PUSH
70000: LD_INT 1
70002: ARRAY
70003: PPUSH
70004: CALL_OW 255
70008: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70009: LD_ADDR_VAR 0 10
70013: PUSH
70014: LD_INT 29
70016: PUSH
70017: LD_EXP 118
70021: PUSH
70022: LD_INT 49
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: LIST
70029: ST_TO_ADDR
// if not result then
70030: LD_VAR 0 3
70034: NOT
70035: IFFALSE 70039
// exit ;
70037: GO 70495
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70039: LD_ADDR_VAR 0 5
70043: PUSH
70044: LD_INT 81
70046: PUSH
70047: LD_VAR 0 8
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PPUSH
70056: CALL_OW 69
70060: ST_TO_ADDR
// for i in result do
70061: LD_ADDR_VAR 0 4
70065: PUSH
70066: LD_VAR 0 3
70070: PUSH
70071: FOR_IN
70072: IFFALSE 70493
// begin tag := GetTag ( i ) + 1 ;
70074: LD_ADDR_VAR 0 9
70078: PUSH
70079: LD_VAR 0 4
70083: PPUSH
70084: CALL_OW 110
70088: PUSH
70089: LD_INT 1
70091: PLUS
70092: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70093: LD_ADDR_VAR 0 7
70097: PUSH
70098: LD_VAR 0 4
70102: PPUSH
70103: CALL_OW 250
70107: PPUSH
70108: LD_VAR 0 4
70112: PPUSH
70113: CALL_OW 251
70117: PPUSH
70118: LD_INT 6
70120: PPUSH
70121: CALL 69692 0 3
70125: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70126: LD_VAR 0 4
70130: PPUSH
70131: CALL_OW 247
70135: PUSH
70136: LD_INT 2
70138: EQUAL
70139: PUSH
70140: LD_VAR 0 7
70144: AND
70145: PUSH
70146: LD_VAR 0 4
70150: PPUSH
70151: CALL_OW 264
70155: PUSH
70156: LD_VAR 0 10
70160: IN
70161: NOT
70162: AND
70163: IFFALSE 70202
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70165: LD_VAR 0 4
70169: PPUSH
70170: LD_VAR 0 7
70174: PUSH
70175: LD_INT 1
70177: ARRAY
70178: PUSH
70179: LD_INT 1
70181: ARRAY
70182: PPUSH
70183: LD_VAR 0 7
70187: PUSH
70188: LD_INT 1
70190: ARRAY
70191: PUSH
70192: LD_INT 2
70194: ARRAY
70195: PPUSH
70196: CALL_OW 116
70200: GO 70491
// if path > tag then
70202: LD_VAR 0 2
70206: PUSH
70207: LD_VAR 0 9
70211: GREATER
70212: IFFALSE 70420
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70214: LD_ADDR_VAR 0 6
70218: PUSH
70219: LD_VAR 0 5
70223: PPUSH
70224: LD_INT 91
70226: PUSH
70227: LD_VAR 0 4
70231: PUSH
70232: LD_INT 8
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: LIST
70239: PPUSH
70240: CALL_OW 72
70244: ST_TO_ADDR
// if nearEnemy then
70245: LD_VAR 0 6
70249: IFFALSE 70318
// begin if GetWeapon ( i ) = ru_time_lapser then
70251: LD_VAR 0 4
70255: PPUSH
70256: CALL_OW 264
70260: PUSH
70261: LD_INT 49
70263: EQUAL
70264: IFFALSE 70292
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70266: LD_VAR 0 4
70270: PPUSH
70271: LD_VAR 0 6
70275: PPUSH
70276: LD_VAR 0 4
70280: PPUSH
70281: CALL_OW 74
70285: PPUSH
70286: CALL_OW 112
70290: GO 70316
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70292: LD_VAR 0 4
70296: PPUSH
70297: LD_VAR 0 6
70301: PPUSH
70302: LD_VAR 0 4
70306: PPUSH
70307: CALL_OW 74
70311: PPUSH
70312: CALL_OW 115
// end else
70316: GO 70418
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70318: LD_VAR 0 4
70322: PPUSH
70323: LD_VAR 0 2
70327: PUSH
70328: LD_VAR 0 9
70332: ARRAY
70333: PUSH
70334: LD_INT 1
70336: ARRAY
70337: PPUSH
70338: LD_VAR 0 2
70342: PUSH
70343: LD_VAR 0 9
70347: ARRAY
70348: PUSH
70349: LD_INT 2
70351: ARRAY
70352: PPUSH
70353: CALL_OW 297
70357: PUSH
70358: LD_INT 6
70360: GREATER
70361: IFFALSE 70404
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70363: LD_VAR 0 4
70367: PPUSH
70368: LD_VAR 0 2
70372: PUSH
70373: LD_VAR 0 9
70377: ARRAY
70378: PUSH
70379: LD_INT 1
70381: ARRAY
70382: PPUSH
70383: LD_VAR 0 2
70387: PUSH
70388: LD_VAR 0 9
70392: ARRAY
70393: PUSH
70394: LD_INT 2
70396: ARRAY
70397: PPUSH
70398: CALL_OW 114
70402: GO 70418
// SetTag ( i , tag ) ;
70404: LD_VAR 0 4
70408: PPUSH
70409: LD_VAR 0 9
70413: PPUSH
70414: CALL_OW 109
// end else
70418: GO 70491
// if enemy then
70420: LD_VAR 0 5
70424: IFFALSE 70491
// begin if GetWeapon ( i ) = ru_time_lapser then
70426: LD_VAR 0 4
70430: PPUSH
70431: CALL_OW 264
70435: PUSH
70436: LD_INT 49
70438: EQUAL
70439: IFFALSE 70467
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70441: LD_VAR 0 4
70445: PPUSH
70446: LD_VAR 0 5
70450: PPUSH
70451: LD_VAR 0 4
70455: PPUSH
70456: CALL_OW 74
70460: PPUSH
70461: CALL_OW 112
70465: GO 70491
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70467: LD_VAR 0 4
70471: PPUSH
70472: LD_VAR 0 5
70476: PPUSH
70477: LD_VAR 0 4
70481: PPUSH
70482: CALL_OW 74
70486: PPUSH
70487: CALL_OW 115
// end ; end ;
70491: GO 70071
70493: POP
70494: POP
// end ;
70495: LD_VAR 0 3
70499: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70500: LD_INT 0
70502: PPUSH
70503: PPUSH
70504: PPUSH
// if not unit or IsInUnit ( unit ) then
70505: LD_VAR 0 1
70509: NOT
70510: PUSH
70511: LD_VAR 0 1
70515: PPUSH
70516: CALL_OW 310
70520: OR
70521: IFFALSE 70525
// exit ;
70523: GO 70616
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70525: LD_ADDR_VAR 0 4
70529: PUSH
70530: LD_VAR 0 1
70534: PPUSH
70535: CALL_OW 250
70539: PPUSH
70540: LD_VAR 0 2
70544: PPUSH
70545: LD_INT 1
70547: PPUSH
70548: CALL_OW 272
70552: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70553: LD_ADDR_VAR 0 5
70557: PUSH
70558: LD_VAR 0 1
70562: PPUSH
70563: CALL_OW 251
70567: PPUSH
70568: LD_VAR 0 2
70572: PPUSH
70573: LD_INT 1
70575: PPUSH
70576: CALL_OW 273
70580: ST_TO_ADDR
// if ValidHex ( x , y ) then
70581: LD_VAR 0 4
70585: PPUSH
70586: LD_VAR 0 5
70590: PPUSH
70591: CALL_OW 488
70595: IFFALSE 70616
// ComTurnXY ( unit , x , y ) ;
70597: LD_VAR 0 1
70601: PPUSH
70602: LD_VAR 0 4
70606: PPUSH
70607: LD_VAR 0 5
70611: PPUSH
70612: CALL_OW 118
// end ;
70616: LD_VAR 0 3
70620: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70621: LD_INT 0
70623: PPUSH
70624: PPUSH
// result := false ;
70625: LD_ADDR_VAR 0 3
70629: PUSH
70630: LD_INT 0
70632: ST_TO_ADDR
// if not units then
70633: LD_VAR 0 2
70637: NOT
70638: IFFALSE 70642
// exit ;
70640: GO 70687
// for i in units do
70642: LD_ADDR_VAR 0 4
70646: PUSH
70647: LD_VAR 0 2
70651: PUSH
70652: FOR_IN
70653: IFFALSE 70685
// if See ( side , i ) then
70655: LD_VAR 0 1
70659: PPUSH
70660: LD_VAR 0 4
70664: PPUSH
70665: CALL_OW 292
70669: IFFALSE 70683
// begin result := true ;
70671: LD_ADDR_VAR 0 3
70675: PUSH
70676: LD_INT 1
70678: ST_TO_ADDR
// exit ;
70679: POP
70680: POP
70681: GO 70687
// end ;
70683: GO 70652
70685: POP
70686: POP
// end ;
70687: LD_VAR 0 3
70691: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70692: LD_INT 0
70694: PPUSH
70695: PPUSH
70696: PPUSH
70697: PPUSH
// if not unit or not points then
70698: LD_VAR 0 1
70702: NOT
70703: PUSH
70704: LD_VAR 0 2
70708: NOT
70709: OR
70710: IFFALSE 70714
// exit ;
70712: GO 70804
// dist := 99999 ;
70714: LD_ADDR_VAR 0 5
70718: PUSH
70719: LD_INT 99999
70721: ST_TO_ADDR
// for i in points do
70722: LD_ADDR_VAR 0 4
70726: PUSH
70727: LD_VAR 0 2
70731: PUSH
70732: FOR_IN
70733: IFFALSE 70802
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70735: LD_ADDR_VAR 0 6
70739: PUSH
70740: LD_VAR 0 1
70744: PPUSH
70745: LD_VAR 0 4
70749: PUSH
70750: LD_INT 1
70752: ARRAY
70753: PPUSH
70754: LD_VAR 0 4
70758: PUSH
70759: LD_INT 2
70761: ARRAY
70762: PPUSH
70763: CALL_OW 297
70767: ST_TO_ADDR
// if tmpDist < dist then
70768: LD_VAR 0 6
70772: PUSH
70773: LD_VAR 0 5
70777: LESS
70778: IFFALSE 70800
// begin result := i ;
70780: LD_ADDR_VAR 0 3
70784: PUSH
70785: LD_VAR 0 4
70789: ST_TO_ADDR
// dist := tmpDist ;
70790: LD_ADDR_VAR 0 5
70794: PUSH
70795: LD_VAR 0 6
70799: ST_TO_ADDR
// end ; end ;
70800: GO 70732
70802: POP
70803: POP
// end ;
70804: LD_VAR 0 3
70808: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70809: LD_INT 0
70811: PPUSH
// uc_side := side ;
70812: LD_ADDR_OWVAR 20
70816: PUSH
70817: LD_VAR 0 1
70821: ST_TO_ADDR
// uc_nation := 3 ;
70822: LD_ADDR_OWVAR 21
70826: PUSH
70827: LD_INT 3
70829: ST_TO_ADDR
// vc_chassis := 25 ;
70830: LD_ADDR_OWVAR 37
70834: PUSH
70835: LD_INT 25
70837: ST_TO_ADDR
// vc_engine := engine_siberite ;
70838: LD_ADDR_OWVAR 39
70842: PUSH
70843: LD_INT 3
70845: ST_TO_ADDR
// vc_control := control_computer ;
70846: LD_ADDR_OWVAR 38
70850: PUSH
70851: LD_INT 3
70853: ST_TO_ADDR
// vc_weapon := 59 ;
70854: LD_ADDR_OWVAR 40
70858: PUSH
70859: LD_INT 59
70861: ST_TO_ADDR
// result := CreateVehicle ;
70862: LD_ADDR_VAR 0 5
70866: PUSH
70867: CALL_OW 45
70871: ST_TO_ADDR
// SetDir ( result , d ) ;
70872: LD_VAR 0 5
70876: PPUSH
70877: LD_VAR 0 4
70881: PPUSH
70882: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70886: LD_VAR 0 5
70890: PPUSH
70891: LD_VAR 0 2
70895: PPUSH
70896: LD_VAR 0 3
70900: PPUSH
70901: LD_INT 0
70903: PPUSH
70904: CALL_OW 48
// end ;
70908: LD_VAR 0 5
70912: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70913: LD_INT 0
70915: PPUSH
70916: PPUSH
70917: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70918: LD_ADDR_VAR 0 2
70922: PUSH
70923: LD_INT 0
70925: PUSH
70926: LD_INT 0
70928: PUSH
70929: LD_INT 0
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70941: LD_VAR 0 1
70945: NOT
70946: PUSH
70947: LD_VAR 0 1
70951: PPUSH
70952: CALL_OW 264
70956: PUSH
70957: LD_INT 12
70959: PUSH
70960: LD_INT 51
70962: PUSH
70963: LD_INT 32
70965: PUSH
70966: LD_EXP 115
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: IN
70977: NOT
70978: OR
70979: IFFALSE 70983
// exit ;
70981: GO 71081
// for i := 1 to 3 do
70983: LD_ADDR_VAR 0 3
70987: PUSH
70988: DOUBLE
70989: LD_INT 1
70991: DEC
70992: ST_TO_ADDR
70993: LD_INT 3
70995: PUSH
70996: FOR_TO
70997: IFFALSE 71079
// begin tmp := GetCargo ( cargo , i ) ;
70999: LD_ADDR_VAR 0 4
71003: PUSH
71004: LD_VAR 0 1
71008: PPUSH
71009: LD_VAR 0 3
71013: PPUSH
71014: CALL_OW 289
71018: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71019: LD_ADDR_VAR 0 2
71023: PUSH
71024: LD_VAR 0 2
71028: PPUSH
71029: LD_VAR 0 3
71033: PPUSH
71034: LD_VAR 0 4
71038: PPUSH
71039: CALL_OW 1
71043: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71044: LD_ADDR_VAR 0 2
71048: PUSH
71049: LD_VAR 0 2
71053: PPUSH
71054: LD_INT 4
71056: PPUSH
71057: LD_VAR 0 2
71061: PUSH
71062: LD_INT 4
71064: ARRAY
71065: PUSH
71066: LD_VAR 0 4
71070: PLUS
71071: PPUSH
71072: CALL_OW 1
71076: ST_TO_ADDR
// end ;
71077: GO 70996
71079: POP
71080: POP
// end ;
71081: LD_VAR 0 2
71085: RET
// export function Length ( array ) ; begin
71086: LD_INT 0
71088: PPUSH
// result := array + 0 ;
71089: LD_ADDR_VAR 0 2
71093: PUSH
71094: LD_VAR 0 1
71098: PUSH
71099: LD_INT 0
71101: PLUS
71102: ST_TO_ADDR
// end ;
71103: LD_VAR 0 2
71107: RET
// export function PrepareArray ( array ) ; begin
71108: LD_INT 0
71110: PPUSH
// result := array diff 0 ;
71111: LD_ADDR_VAR 0 2
71115: PUSH
71116: LD_VAR 0 1
71120: PUSH
71121: LD_INT 0
71123: DIFF
71124: ST_TO_ADDR
// if not result [ 1 ] then
71125: LD_VAR 0 2
71129: PUSH
71130: LD_INT 1
71132: ARRAY
71133: NOT
71134: IFFALSE 71154
// result := Delete ( result , 1 ) ;
71136: LD_ADDR_VAR 0 2
71140: PUSH
71141: LD_VAR 0 2
71145: PPUSH
71146: LD_INT 1
71148: PPUSH
71149: CALL_OW 3
71153: ST_TO_ADDR
// end ; end_of_file
71154: LD_VAR 0 2
71158: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
71159: LD_INT 0
71161: PPUSH
// ar_miner := 81 ;
71162: LD_ADDR_EXP 121
71166: PUSH
71167: LD_INT 81
71169: ST_TO_ADDR
// ar_crane := 88 ;
71170: LD_ADDR_EXP 120
71174: PUSH
71175: LD_INT 88
71177: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
71178: LD_ADDR_EXP 115
71182: PUSH
71183: LD_INT 89
71185: ST_TO_ADDR
// us_hack := 99 ;
71186: LD_ADDR_EXP 116
71190: PUSH
71191: LD_INT 99
71193: ST_TO_ADDR
// us_artillery := 97 ;
71194: LD_ADDR_EXP 117
71198: PUSH
71199: LD_INT 97
71201: ST_TO_ADDR
// ar_bio_bomb := 91 ;
71202: LD_ADDR_EXP 118
71206: PUSH
71207: LD_INT 91
71209: ST_TO_ADDR
// ar_mortar := 92 ;
71210: LD_ADDR_EXP 119
71214: PUSH
71215: LD_INT 92
71217: ST_TO_ADDR
// ru_flamethrower := 93 ;
71218: LD_ADDR_EXP 122
71222: PUSH
71223: LD_INT 93
71225: ST_TO_ADDR
// ru_radar := 98 ;
71226: LD_ADDR_EXP 114
71230: PUSH
71231: LD_INT 98
71233: ST_TO_ADDR
// tech_Artillery := 80 ;
71234: LD_ADDR_EXP 123
71238: PUSH
71239: LD_INT 80
71241: ST_TO_ADDR
// tech_RadMat := 81 ;
71242: LD_ADDR_EXP 124
71246: PUSH
71247: LD_INT 81
71249: ST_TO_ADDR
// tech_BasicTools := 82 ;
71250: LD_ADDR_EXP 125
71254: PUSH
71255: LD_INT 82
71257: ST_TO_ADDR
// tech_Cargo := 83 ;
71258: LD_ADDR_EXP 126
71262: PUSH
71263: LD_INT 83
71265: ST_TO_ADDR
// tech_Track := 84 ;
71266: LD_ADDR_EXP 127
71270: PUSH
71271: LD_INT 84
71273: ST_TO_ADDR
// tech_Crane := 85 ;
71274: LD_ADDR_EXP 128
71278: PUSH
71279: LD_INT 85
71281: ST_TO_ADDR
// tech_Bulldozer := 86 ;
71282: LD_ADDR_EXP 129
71286: PUSH
71287: LD_INT 86
71289: ST_TO_ADDR
// tech_Hovercraft := 87 ;
71290: LD_ADDR_EXP 130
71294: PUSH
71295: LD_INT 87
71297: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
71298: LD_ADDR_EXP 131
71302: PUSH
71303: LD_INT 88
71305: ST_TO_ADDR
// end ;
71306: LD_VAR 0 1
71310: RET
// every 1 do
71311: GO 71313
71313: DISABLE
// InitGlobalVariables ; end_of_file
71314: CALL 71159 0 0
71318: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71319: LD_VAR 0 1
71323: PPUSH
71324: LD_VAR 0 2
71328: PPUSH
71329: LD_VAR 0 3
71333: PPUSH
71334: LD_VAR 0 4
71338: PPUSH
71339: LD_VAR 0 5
71343: PPUSH
71344: LD_VAR 0 6
71348: PPUSH
71349: CALL 9869 0 6
// end ;
71353: PPOPN 6
71355: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71356: LD_INT 0
71358: PPUSH
// begin if not units then
71359: LD_VAR 0 1
71363: NOT
71364: IFFALSE 71368
// exit ;
71366: GO 71368
// end ;
71368: PPOPN 7
71370: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71371: CALL 9840 0 0
// end ;
71375: PPOPN 1
71377: END
