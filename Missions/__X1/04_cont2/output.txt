// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 1990 0 0
// PrepareArabian ;
  23: CALL 1230 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5582 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: PUSH
 664: LD_OWVAR 67
 668: ARRAY
 669: PPUSH
 670: CALL 504 0 2
// for i := 1 to 2 do
 674: LD_ADDR_VAR 0 3
 678: PUSH
 679: DOUBLE
 680: LD_INT 1
 682: DEC
 683: ST_TO_ADDR
 684: LD_INT 2
 686: PUSH
 687: FOR_TO
 688: IFFALSE 725
// begin hc_class := 21 ;
 690: LD_ADDR_OWVAR 28
 694: PUSH
 695: LD_INT 21
 697: ST_TO_ADDR
// hc_gallery :=  ;
 698: LD_ADDR_OWVAR 33
 702: PUSH
 703: LD_STRING 
 705: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 706: CALL_OW 44
 710: PPUSH
 711: LD_VAR 0 1
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end ;
 723: GO 687
 725: POP
 726: POP
// for i := 1 to 2 do
 727: LD_ADDR_VAR 0 3
 731: PUSH
 732: DOUBLE
 733: LD_INT 1
 735: DEC
 736: ST_TO_ADDR
 737: LD_INT 2
 739: PUSH
 740: FOR_TO
 741: IFFALSE 778
// begin hc_class := 18 ;
 743: LD_ADDR_OWVAR 28
 747: PUSH
 748: LD_INT 18
 750: ST_TO_ADDR
// hc_gallery :=  ;
 751: LD_ADDR_OWVAR 33
 755: PUSH
 756: LD_STRING 
 758: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 759: CALL_OW 44
 763: PPUSH
 764: LD_VAR 0 1
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 49
// end ;
 776: GO 740
 778: POP
 779: POP
// for i := 1 to 2 do
 780: LD_ADDR_VAR 0 3
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 2
 792: PUSH
 793: FOR_TO
 794: IFFALSE 831
// begin hc_class := 13 ;
 796: LD_ADDR_OWVAR 28
 800: PUSH
 801: LD_INT 13
 803: ST_TO_ADDR
// hc_gallery :=  ;
 804: LD_ADDR_OWVAR 33
 808: PUSH
 809: LD_STRING 
 811: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 812: CALL_OW 44
 816: PPUSH
 817: LD_VAR 0 1
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 793
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 2
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: PUSH
 849: LD_VAR 0 2
 853: NOT
 854: OR
 855: IFFALSE 859
// exit ;
 857: GO 907
// if not See ( GetSide ( observer ) , unit ) then
 859: LD_VAR 0 1
 863: PPUSH
 864: CALL_OW 255
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 292
 878: NOT
 879: IFFALSE 883
// exit ;
 881: GO 907
// result := GetDistUnits ( observer , unit ) < 12 ;
 883: LD_ADDR_VAR 0 3
 887: PUSH
 888: LD_VAR 0 1
 892: PPUSH
 893: LD_VAR 0 2
 897: PPUSH
 898: CALL_OW 296
 902: PUSH
 903: LD_INT 12
 905: LESS
 906: ST_TO_ADDR
// end ;
 907: LD_VAR 0 3
 911: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 912: LD_INT 0
 914: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: CALL_OW 488
 937: PUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: LD_VAR 0 2
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: PPUSH
 956: CALL_OW 428
 960: PUSH
 961: LD_INT 0
 963: EQUAL
 964: AND
 965: IFFALSE 999
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 967: LD_VAR 0 1
 971: PPUSH
 972: LD_VAR 0 2
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: ARRAY
 989: PPUSH
 990: LD_VAR 0 3
 994: PPUSH
 995: CALL_OW 48
// end ;
 999: LD_VAR 0 4
1003: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1004: LD_INT 0
1006: PPUSH
1007: PPUSH
1008: PPUSH
1009: PPUSH
1010: PPUSH
// if not unit then
1011: LD_VAR 0 1
1015: NOT
1016: IFFALSE 1020
// exit ;
1018: GO 1225
// side := GetSide ( unit ) ;
1020: LD_ADDR_VAR 0 4
1024: PUSH
1025: LD_VAR 0 1
1029: PPUSH
1030: CALL_OW 255
1034: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1035: LD_ADDR_VAR 0 5
1039: PUSH
1040: LD_INT 22
1042: PUSH
1043: LD_VAR 0 4
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PUSH
1052: LD_INT 30
1054: PUSH
1055: LD_VAR 0 2
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PPUSH
1068: CALL_OW 69
1072: ST_TO_ADDR
// if not tmp then
1073: LD_VAR 0 5
1077: NOT
1078: IFFALSE 1082
// exit ;
1080: GO 1225
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1082: LD_ADDR_VAR 0 5
1086: PUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: LD_VAR 0 5
1096: PPUSH
1097: LD_INT 1
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 32322 0 4
1107: ST_TO_ADDR
// places := 1 ;
1108: LD_ADDR_VAR 0 7
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1116: LD_VAR 0 2
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 4
1129: PUSH
1130: LD_INT 5
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: LD_INT 3
1138: PUSH
1139: LD_INT 6
1141: PUSH
1142: LD_INT 7
1144: PUSH
1145: LD_INT 8
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: IN
1159: IFFALSE 1169
// places := 6 ;
1161: LD_ADDR_VAR 0 7
1165: PUSH
1166: LD_INT 6
1168: ST_TO_ADDR
// for i in tmp do
1169: LD_ADDR_VAR 0 6
1173: PUSH
1174: LD_VAR 0 5
1178: PUSH
1179: FOR_IN
1180: IFFALSE 1223
// begin if UnitsInside ( i ) - places <= 0 then
1182: LD_VAR 0 6
1186: PPUSH
1187: CALL_OW 313
1191: PUSH
1192: LD_VAR 0 7
1196: MINUS
1197: PUSH
1198: LD_INT 0
1200: LESSEQUAL
1201: IFFALSE 1207
// continue else
1203: GO 1179
1205: GO 1221
// begin result := i ;
1207: LD_ADDR_VAR 0 3
1211: PUSH
1212: LD_VAR 0 6
1216: ST_TO_ADDR
// exit ;
1217: POP
1218: POP
1219: GO 1225
// end ; end ;
1221: GO 1179
1223: POP
1224: POP
// end ; end_of_file
1225: LD_VAR 0 3
1229: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1230: LD_INT 0
1232: PPUSH
1233: PPUSH
// uc_side := 2 ;
1234: LD_ADDR_OWVAR 20
1238: PUSH
1239: LD_INT 2
1241: ST_TO_ADDR
// uc_nation := 2 ;
1242: LD_ADDR_OWVAR 21
1246: PUSH
1247: LD_INT 2
1249: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1250: LD_ADDR_EXP 18
1254: PUSH
1255: LD_STRING Heike
1257: PPUSH
1258: LD_EXP 1
1262: NOT
1263: PPUSH
1264: LD_EXP 2
1268: PPUSH
1269: CALL 26941 0 3
1273: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1274: LD_ADDR_EXP 21
1278: PUSH
1279: LD_STRING Ibrahim
1281: PPUSH
1282: LD_EXP 1
1286: NOT
1287: PPUSH
1288: LD_EXP 2
1292: PPUSH
1293: CALL 26941 0 3
1297: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1298: LD_ADDR_EXP 19
1302: PUSH
1303: LD_STRING Givi
1305: PPUSH
1306: LD_EXP 1
1310: NOT
1311: PPUSH
1312: LD_EXP 2
1316: PPUSH
1317: CALL 26941 0 3
1321: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1322: LD_ADDR_EXP 22
1326: PUSH
1327: LD_STRING Kamil
1329: PPUSH
1330: LD_EXP 1
1334: NOT
1335: PPUSH
1336: LD_EXP 2
1340: PPUSH
1341: CALL 26941 0 3
1345: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1346: LD_ADDR_EXP 23
1350: PUSH
1351: LD_STRING Kaia
1353: PPUSH
1354: LD_EXP 1
1358: NOT
1359: PPUSH
1360: LD_EXP 2
1364: PPUSH
1365: CALL 26941 0 3
1369: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1370: LD_ADDR_EXP 24
1374: PUSH
1375: LD_STRING Sophia
1377: PPUSH
1378: LD_EXP 1
1382: NOT
1383: PPUSH
1384: LD_EXP 2
1388: PPUSH
1389: CALL 26941 0 3
1393: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1394: LD_ADDR_EXP 25
1398: PUSH
1399: LD_STRING Markov
1401: PPUSH
1402: LD_EXP 1
1406: NOT
1407: PPUSH
1408: LD_EXP 2
1412: PPUSH
1413: CALL 26941 0 3
1417: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1418: LD_ADDR_EXP 28
1422: PUSH
1423: LD_STRING Aviradze
1425: PPUSH
1426: LD_EXP 1
1430: NOT
1431: PPUSH
1432: LD_EXP 2
1436: PPUSH
1437: CALL 26941 0 3
1441: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1442: LD_ADDR_EXP 27
1446: PUSH
1447: LD_STRING Kurt
1449: PPUSH
1450: LD_EXP 1
1454: NOT
1455: PPUSH
1456: LD_EXP 2
1460: PPUSH
1461: CALL 26941 0 3
1465: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1466: LD_ADDR_EXP 20
1470: PUSH
1471: LD_STRING Mike
1473: PPUSH
1474: LD_EXP 1
1478: NOT
1479: PPUSH
1480: LD_EXP 2
1484: PPUSH
1485: CALL 26941 0 3
1489: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1490: LD_ADDR_EXP 29
1494: PUSH
1495: LD_STRING 04_1_others
1497: PPUSH
1498: CALL_OW 31
1502: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1503: LD_ADDR_EXP 31
1507: PUSH
1508: LD_STRING 04_1_apes
1510: PPUSH
1511: CALL_OW 31
1515: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1516: LD_ADDR_EXP 30
1520: PUSH
1521: LD_STRING 04_1_Vehicles
1523: PPUSH
1524: EMPTY
1525: PPUSH
1526: CALL_OW 30
1530: ST_TO_ADDR
// uc_side := 5 ;
1531: LD_ADDR_OWVAR 20
1535: PUSH
1536: LD_INT 5
1538: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1539: LD_ADDR_EXP 26
1543: PUSH
1544: LD_STRING Abdul
1546: PPUSH
1547: LD_INT 0
1549: PPUSH
1550: LD_STRING 
1552: PPUSH
1553: CALL 26941 0 3
1557: ST_TO_ADDR
// end ;
1558: LD_VAR 0 1
1562: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1563: LD_STRING 04_1_KaganCaptured
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 30
1573: PUSH
1574: LD_INT 22
1576: PUSH
1577: LD_INT 5
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PPUSH
1584: CALL_OW 69
1588: NOT
1589: AND
1590: PUSH
1591: LD_INT 124
1593: PPUSH
1594: LD_INT 26
1596: PPUSH
1597: CALL_OW 428
1601: PUSH
1602: LD_INT 0
1604: EQUAL
1605: PUSH
1606: LD_INT 124
1608: PPUSH
1609: LD_INT 26
1611: PPUSH
1612: CALL_OW 428
1616: PPUSH
1617: CALL_OW 255
1621: PUSH
1622: LD_INT 2
1624: EQUAL
1625: XOR
1626: AND
1627: IFFALSE 1987
1629: GO 1631
1631: DISABLE
1632: LD_INT 0
1634: PPUSH
1635: PPUSH
// begin enable ;
1636: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1637: LD_EXP 33
1641: NOT
1642: PUSH
1643: LD_EXP 33
1647: PUSH
1648: LD_INT 4
1650: GREATER
1651: OR
1652: IFFALSE 1662
// cargoCounter := 1 ;
1654: LD_ADDR_EXP 33
1658: PUSH
1659: LD_INT 1
1661: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1662: LD_ADDR_VAR 0 2
1666: PUSH
1667: LD_INT 142
1669: PUSH
1670: LD_INT 15
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 129
1679: PUSH
1680: LD_INT 11
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 138
1689: PUSH
1690: LD_INT 9
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 133
1699: PUSH
1700: LD_INT 10
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: ST_TO_ADDR
// uc_side := 5 ;
1713: LD_ADDR_OWVAR 20
1717: PUSH
1718: LD_INT 5
1720: ST_TO_ADDR
// uc_nation := 2 ;
1721: LD_ADDR_OWVAR 21
1725: PUSH
1726: LD_INT 2
1728: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1729: LD_INT 5
1731: PPUSH
1732: LD_INT 2
1734: PPUSH
1735: LD_INT 13
1737: PPUSH
1738: LD_INT 2
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 32
1746: PPUSH
1747: LD_INT 70
1749: PPUSH
1750: CALL 336 0 7
// veh := CreateVehicle ;
1754: LD_ADDR_VAR 0 1
1758: PUSH
1759: CALL_OW 45
1763: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1764: LD_VAR 0 1
1768: PPUSH
1769: LD_INT 3
1771: PPUSH
1772: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
1776: LD_VAR 0 1
1780: PPUSH
1781: LD_INT 8
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL_OW 49
// if not cargoDriver then
1791: LD_EXP 32
1795: NOT
1796: IFFALSE 1821
// begin PrepareHuman ( false , 1 , 3 ) ;
1798: LD_INT 0
1800: PPUSH
1801: LD_INT 1
1803: PPUSH
1804: LD_INT 3
1806: PPUSH
1807: CALL_OW 380
// cargoDriver := CreateHuman ;
1811: LD_ADDR_EXP 32
1815: PUSH
1816: CALL_OW 44
1820: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
1821: LD_EXP 32
1825: PPUSH
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
1835: LD_VAR 0 1
1839: PPUSH
1840: LD_INT 2
1842: PPUSH
1843: LD_INT 100
1845: PPUSH
1846: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
1850: LD_VAR 0 1
1854: PPUSH
1855: LD_VAR 0 2
1859: PUSH
1860: LD_EXP 33
1864: ARRAY
1865: PUSH
1866: LD_INT 1
1868: ARRAY
1869: PPUSH
1870: LD_VAR 0 2
1874: PUSH
1875: LD_EXP 33
1879: ARRAY
1880: PUSH
1881: LD_INT 2
1883: ARRAY
1884: PPUSH
1885: CALL_OW 111
// AddComUnload ( veh ) ;
1889: LD_VAR 0 1
1893: PPUSH
1894: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
1898: LD_VAR 0 1
1902: PPUSH
1903: LD_INT 133
1905: PPUSH
1906: LD_INT 2
1908: PPUSH
1909: CALL_OW 171
// wait ( 0 0$5 ) ;
1913: LD_INT 175
1915: PPUSH
1916: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1920: LD_INT 35
1922: PPUSH
1923: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
1927: LD_VAR 0 1
1931: PPUSH
1932: LD_INT 133
1934: PPUSH
1935: LD_INT 2
1937: PPUSH
1938: CALL_OW 307
1942: PUSH
1943: LD_VAR 0 1
1947: PPUSH
1948: LD_INT 8
1950: PPUSH
1951: CALL_OW 308
1955: OR
1956: IFFALSE 1920
// RemoveUnit ( cargoDriver ) ;
1958: LD_EXP 32
1962: PPUSH
1963: CALL_OW 64
// RemoveUnit ( veh ) ;
1967: LD_VAR 0 1
1971: PPUSH
1972: CALL_OW 64
// if tick >= 20 20$00 then
1976: LD_OWVAR 1
1980: PUSH
1981: LD_INT 42000
1983: GREATEREQUAL
1984: IFFALSE 1987
// disable ;
1986: DISABLE
// end ; end_of_file
1987: PPOPN 2
1989: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
1990: LD_INT 0
1992: PPUSH
1993: PPUSH
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
// uc_side := 3 ;
2001: LD_ADDR_OWVAR 20
2005: PUSH
2006: LD_INT 3
2008: ST_TO_ADDR
// uc_nation := 3 ;
2009: LD_ADDR_OWVAR 21
2013: PUSH
2014: LD_INT 3
2016: ST_TO_ADDR
// ruForce := [ ] ;
2017: LD_ADDR_EXP 37
2021: PUSH
2022: EMPTY
2023: ST_TO_ADDR
// ruMech := [ ] ;
2024: LD_ADDR_EXP 39
2028: PUSH
2029: EMPTY
2030: ST_TO_ADDR
// ruEng := [ ] ;
2031: LD_ADDR_EXP 38
2035: PUSH
2036: EMPTY
2037: ST_TO_ADDR
// ruSci := [ ] ;
2038: LD_ADDR_EXP 40
2042: PUSH
2043: EMPTY
2044: ST_TO_ADDR
// ruMobile := [ ] ;
2045: LD_ADDR_EXP 41
2049: PUSH
2050: EMPTY
2051: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2052: LD_ADDR_EXP 34
2056: PUSH
2057: LD_STRING Burlak
2059: PPUSH
2060: LD_INT 0
2062: PPUSH
2063: LD_STRING 
2065: PPUSH
2066: CALL 26941 0 3
2070: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2071: LD_ADDR_EXP 35
2075: PUSH
2076: LD_STRING Gaydar
2078: PPUSH
2079: LD_INT 0
2081: PPUSH
2082: LD_STRING 
2084: PPUSH
2085: CALL 26941 0 3
2089: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2090: LD_ADDR_EXP 36
2094: PUSH
2095: LD_STRING Kuzmov
2097: PPUSH
2098: LD_INT 0
2100: PPUSH
2101: LD_STRING 
2103: PPUSH
2104: CALL 26941 0 3
2108: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2109: LD_EXP 36
2113: PPUSH
2114: LD_INT 200
2116: PPUSH
2117: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2121: LD_INT 200
2123: PPUSH
2124: LD_STRING chuikov
2126: PPUSH
2127: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 ] [ Difficulty ] ) ;
2131: LD_INT 200
2133: PPUSH
2134: CALL_OW 274
2138: PPUSH
2139: LD_INT 1
2141: PPUSH
2142: LD_INT 800
2144: PUSH
2145: LD_INT 1000
2147: PUSH
2148: LD_INT 1250
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: PUSH
2156: LD_OWVAR 67
2160: ARRAY
2161: PPUSH
2162: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2166: LD_INT 200
2168: PPUSH
2169: CALL_OW 274
2173: PPUSH
2174: LD_INT 2
2176: PPUSH
2177: LD_INT 160
2179: PPUSH
2180: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2184: LD_INT 225
2186: PPUSH
2187: CALL_OW 274
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_INT 200
2197: PPUSH
2198: CALL_OW 277
// oil := 150 ;
2202: LD_ADDR_VAR 0 9
2206: PUSH
2207: LD_INT 150
2209: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
2210: LD_EXP 5
2214: PUSH
2215: LD_INT 94500
2217: PUSH
2218: LD_INT 84000
2220: PUSH
2221: LD_INT 73500
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: LIST
2228: PUSH
2229: LD_OWVAR 67
2233: ARRAY
2234: GREATEREQUAL
2235: IFFALSE 2390
// begin oil := 450 ;
2237: LD_ADDR_VAR 0 9
2241: PUSH
2242: LD_INT 450
2244: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2245: LD_ADDR_VAR 0 7
2249: PUSH
2250: LD_INT 123
2252: PUSH
2253: LD_INT 17
2255: PUSH
2256: LD_INT 3
2258: PUSH
2259: LD_INT 31
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PUSH
2268: LD_INT 152
2270: PUSH
2271: LD_INT 38
2273: PUSH
2274: LD_INT 3
2276: PUSH
2277: LD_INT 31
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 81
2288: PUSH
2289: LD_INT 6
2291: PUSH
2292: LD_INT 4
2294: PUSH
2295: LD_INT 31
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 113
2306: PUSH
2307: LD_INT 67
2309: PUSH
2310: LD_INT 4
2312: PUSH
2313: LD_INT 32
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: ST_TO_ADDR
// for i in tmp do
2328: LD_ADDR_VAR 0 4
2332: PUSH
2333: LD_VAR 0 7
2337: PUSH
2338: FOR_IN
2339: IFFALSE 2388
// begin bc_type := i [ 4 ] ;
2341: LD_ADDR_OWVAR 42
2345: PUSH
2346: LD_VAR 0 4
2350: PUSH
2351: LD_INT 4
2353: ARRAY
2354: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2355: LD_VAR 0 4
2359: PUSH
2360: LD_INT 1
2362: ARRAY
2363: PPUSH
2364: LD_VAR 0 4
2368: PUSH
2369: LD_INT 2
2371: ARRAY
2372: PPUSH
2373: LD_VAR 0 4
2377: PUSH
2378: LD_INT 3
2380: ARRAY
2381: PPUSH
2382: CALL_OW 47
// end ;
2386: GO 2338
2388: POP
2389: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2390: LD_INT 225
2392: PPUSH
2393: CALL_OW 274
2397: PPUSH
2398: LD_INT 2
2400: PPUSH
2401: LD_VAR 0 9
2405: PPUSH
2406: CALL_OW 277
// if Difficulty > 1 then
2410: LD_OWVAR 67
2414: PUSH
2415: LD_INT 1
2417: GREATER
2418: IFFALSE 2513
// begin bc_type := b_bunker ;
2420: LD_ADDR_OWVAR 42
2424: PUSH
2425: LD_INT 32
2427: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2428: LD_ADDR_VAR 0 7
2432: PUSH
2433: LD_INT 121
2435: PUSH
2436: LD_INT 85
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: PUSH
2447: LD_INT 93
2449: PUSH
2450: LD_INT 72
2452: PUSH
2453: LD_INT 1
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: ST_TO_ADDR
// for i in tmp do
2465: LD_ADDR_VAR 0 4
2469: PUSH
2470: LD_VAR 0 7
2474: PUSH
2475: FOR_IN
2476: IFFALSE 2511
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2478: LD_VAR 0 4
2482: PUSH
2483: LD_INT 1
2485: ARRAY
2486: PPUSH
2487: LD_VAR 0 4
2491: PUSH
2492: LD_INT 2
2494: ARRAY
2495: PPUSH
2496: LD_VAR 0 4
2500: PUSH
2501: LD_INT 3
2503: ARRAY
2504: PPUSH
2505: CALL_OW 47
2509: GO 2475
2511: POP
2512: POP
// end ; base := GetBase ( ruMainBase ) ;
2513: LD_ADDR_VAR 0 2
2517: PUSH
2518: LD_INT 200
2520: PPUSH
2521: CALL_OW 274
2525: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2526: LD_ADDR_VAR 0 3
2530: PUSH
2531: LD_VAR 0 2
2535: PPUSH
2536: CALL_OW 417
2540: ST_TO_ADDR
// for b in blist do
2541: LD_ADDR_VAR 0 5
2545: PUSH
2546: LD_VAR 0 3
2550: PUSH
2551: FOR_IN
2552: IFFALSE 3003
// begin if b [ 1 ] = b_factory then
2554: LD_VAR 0 5
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PUSH
2563: LD_INT 3
2565: EQUAL
2566: IFFALSE 2717
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2568: LD_ADDR_VAR 0 8
2572: PUSH
2573: LD_VAR 0 5
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: LD_VAR 0 5
2586: PUSH
2587: LD_INT 3
2589: ARRAY
2590: PPUSH
2591: CALL_OW 428
2595: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2596: LD_ADDR_VAR 0 4
2600: PUSH
2601: DOUBLE
2602: LD_INT 1
2604: DEC
2605: ST_TO_ADDR
2606: LD_INT 2
2608: PUSH
2609: LD_INT 2
2611: PUSH
2612: LD_OWVAR 67
2616: PLUS
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: PUSH
2622: LD_EXP 10
2626: PUSH
2627: LD_INT 3
2629: GREATER
2630: PUSH
2631: LD_INT 1
2633: PLUS
2634: ARRAY
2635: PUSH
2636: FOR_TO
2637: IFFALSE 2713
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2639: LD_INT 0
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 1
2647: PUSH
2648: LD_OWVAR 67
2652: PLUS
2653: PPUSH
2654: CALL_OW 380
// un := CreateHuman ;
2658: LD_ADDR_VAR 0 6
2662: PUSH
2663: CALL_OW 44
2667: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2668: LD_ADDR_EXP 39
2672: PUSH
2673: LD_EXP 39
2677: PPUSH
2678: LD_EXP 39
2682: PUSH
2683: LD_INT 1
2685: PLUS
2686: PPUSH
2687: LD_VAR 0 6
2691: PPUSH
2692: CALL_OW 1
2696: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2697: LD_VAR 0 6
2701: PPUSH
2702: LD_VAR 0 8
2706: PPUSH
2707: CALL_OW 52
// end ;
2711: GO 2636
2713: POP
2714: POP
// end else
2715: GO 3001
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2717: LD_VAR 0 5
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: PUSH
2726: LD_INT 6
2728: PUSH
2729: LD_INT 7
2731: PUSH
2732: LD_INT 8
2734: PUSH
2735: LD_INT 10
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: IN
2744: IFFALSE 2854
// begin for i := 1 to 2 do
2746: LD_ADDR_VAR 0 4
2750: PUSH
2751: DOUBLE
2752: LD_INT 1
2754: DEC
2755: ST_TO_ADDR
2756: LD_INT 2
2758: PUSH
2759: FOR_TO
2760: IFFALSE 2850
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2762: LD_INT 0
2764: PPUSH
2765: LD_INT 4
2767: PPUSH
2768: LD_OWVAR 67
2772: PPUSH
2773: CALL_OW 380
// un := CreateHuman ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: CALL_OW 44
2786: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
2787: LD_ADDR_EXP 40
2791: PUSH
2792: LD_EXP 40
2796: PPUSH
2797: LD_EXP 40
2801: PUSH
2802: LD_INT 1
2804: PLUS
2805: PPUSH
2806: LD_VAR 0 6
2810: PPUSH
2811: CALL_OW 1
2815: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2816: LD_VAR 0 6
2820: PPUSH
2821: LD_VAR 0 5
2825: PUSH
2826: LD_INT 2
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 5
2834: PUSH
2835: LD_INT 3
2837: ARRAY
2838: PPUSH
2839: CALL_OW 428
2843: PPUSH
2844: CALL_OW 52
// end ;
2848: GO 2759
2850: POP
2851: POP
// end else
2852: GO 3001
// if b [ 1 ] = b_warehouse then
2854: LD_VAR 0 5
2858: PUSH
2859: LD_INT 1
2861: ARRAY
2862: PUSH
2863: LD_INT 1
2865: EQUAL
2866: IFFALSE 3001
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2868: LD_ADDR_VAR 0 4
2872: PUSH
2873: DOUBLE
2874: LD_INT 1
2876: DEC
2877: ST_TO_ADDR
2878: LD_INT 1
2880: PUSH
2881: LD_INT 1
2883: PUSH
2884: LD_OWVAR 67
2888: PLUS
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PUSH
2894: LD_EXP 10
2898: PUSH
2899: LD_INT 3
2901: GREATER
2902: PUSH
2903: LD_INT 1
2905: PLUS
2906: ARRAY
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2999
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 2
2916: PPUSH
2917: LD_OWVAR 67
2921: PPUSH
2922: CALL_OW 380
// un := CreateHuman ;
2926: LD_ADDR_VAR 0 6
2930: PUSH
2931: CALL_OW 44
2935: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
2936: LD_ADDR_EXP 38
2940: PUSH
2941: LD_EXP 38
2945: PPUSH
2946: LD_EXP 38
2950: PUSH
2951: LD_INT 1
2953: PLUS
2954: PPUSH
2955: LD_VAR 0 6
2959: PPUSH
2960: CALL_OW 1
2964: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2965: LD_VAR 0 6
2969: PPUSH
2970: LD_VAR 0 5
2974: PUSH
2975: LD_INT 2
2977: ARRAY
2978: PPUSH
2979: LD_VAR 0 5
2983: PUSH
2984: LD_INT 3
2986: ARRAY
2987: PPUSH
2988: CALL_OW 428
2992: PPUSH
2993: CALL_OW 52
// end ;
2997: GO 2908
2999: POP
3000: POP
// end ; end ;
3001: GO 2551
3003: POP
3004: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3005: LD_ADDR_VAR 0 3
3009: PUSH
3010: LD_INT 22
3012: PUSH
3013: LD_INT 3
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: LD_INT 21
3022: PUSH
3023: LD_INT 3
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PPUSH
3034: CALL_OW 69
3038: ST_TO_ADDR
// for b in blist do
3039: LD_ADDR_VAR 0 5
3043: PUSH
3044: LD_VAR 0 3
3048: PUSH
3049: FOR_IN
3050: IFFALSE 3072
// SetBLevel ( b , 3 + Difficulty ) ;
3052: LD_VAR 0 5
3056: PPUSH
3057: LD_INT 3
3059: PUSH
3060: LD_OWVAR 67
3064: PLUS
3065: PPUSH
3066: CALL_OW 241
3070: GO 3049
3072: POP
3073: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3074: LD_ADDR_VAR 0 3
3078: PUSH
3079: LD_INT 22
3081: PUSH
3082: LD_INT 3
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 30
3091: PUSH
3092: LD_INT 32
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PPUSH
3103: CALL_OW 69
3107: ST_TO_ADDR
// for b in blist do
3108: LD_ADDR_VAR 0 5
3112: PUSH
3113: LD_VAR 0 3
3117: PUSH
3118: FOR_IN
3119: IFFALSE 3228
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3121: LD_INT 0
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 1
3129: PUSH
3130: LD_OWVAR 67
3134: PLUS
3135: PPUSH
3136: CALL_OW 380
// un := CreateHuman ;
3140: LD_ADDR_VAR 0 6
3144: PUSH
3145: CALL_OW 44
3149: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3150: LD_ADDR_EXP 37
3154: PUSH
3155: LD_EXP 37
3159: PPUSH
3160: LD_EXP 37
3164: PUSH
3165: LD_INT 1
3167: PLUS
3168: PPUSH
3169: LD_VAR 0 6
3173: PPUSH
3174: CALL_OW 1
3178: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3179: LD_VAR 0 6
3183: PPUSH
3184: LD_VAR 0 5
3188: PPUSH
3189: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3193: LD_VAR 0 5
3197: PPUSH
3198: LD_INT 44
3200: PUSH
3201: LD_INT 43
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: PUSH
3208: LD_VAR 0 5
3212: PUSH
3213: LD_INT 2
3215: MOD
3216: PUSH
3217: LD_INT 1
3219: PLUS
3220: ARRAY
3221: PPUSH
3222: CALL_OW 431
// end ;
3226: GO 3118
3228: POP
3229: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_INT 22
3237: PUSH
3238: LD_INT 3
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: PUSH
3245: LD_INT 30
3247: PUSH
3248: LD_INT 31
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: ST_TO_ADDR
// for b in blist do
3264: LD_ADDR_VAR 0 5
3268: PUSH
3269: LD_VAR 0 3
3273: PUSH
3274: FOR_IN
3275: IFFALSE 3374
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3277: LD_INT 0
3279: PPUSH
3280: LD_INT 1
3282: PPUSH
3283: LD_INT 1
3285: PUSH
3286: LD_OWVAR 67
3290: PLUS
3291: PPUSH
3292: CALL_OW 380
// un := CreateHuman ;
3296: LD_ADDR_VAR 0 6
3300: PUSH
3301: CALL_OW 44
3305: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3306: LD_ADDR_EXP 37
3310: PUSH
3311: LD_EXP 37
3315: PPUSH
3316: LD_EXP 37
3320: PUSH
3321: LD_INT 1
3323: PLUS
3324: PPUSH
3325: LD_VAR 0 6
3329: PPUSH
3330: CALL_OW 1
3334: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3335: LD_VAR 0 6
3339: PPUSH
3340: LD_VAR 0 5
3344: PPUSH
3345: CALL_OW 254
3349: PUSH
3350: LD_INT 3
3352: PLUS
3353: PPUSH
3354: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3358: LD_VAR 0 6
3362: PPUSH
3363: LD_VAR 0 5
3367: PPUSH
3368: CALL_OW 52
// end ;
3372: GO 3274
3374: POP
3375: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3376: LD_ADDR_VAR 0 3
3380: PUSH
3381: LD_INT 22
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: LD_INT 2
3393: PUSH
3394: LD_INT 30
3396: PUSH
3397: LD_INT 4
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_INT 30
3406: PUSH
3407: LD_INT 5
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PPUSH
3423: CALL_OW 69
3427: ST_TO_ADDR
// for b in blist do
3428: LD_ADDR_VAR 0 5
3432: PUSH
3433: LD_VAR 0 3
3437: PUSH
3438: FOR_IN
3439: IFFALSE 3535
// begin for i := 1 to 2 do
3441: LD_ADDR_VAR 0 4
3445: PUSH
3446: DOUBLE
3447: LD_INT 1
3449: DEC
3450: ST_TO_ADDR
3451: LD_INT 2
3453: PUSH
3454: FOR_TO
3455: IFFALSE 3531
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3457: LD_INT 0
3459: PPUSH
3460: LD_INT 1
3462: PPUSH
3463: LD_INT 1
3465: PUSH
3466: LD_OWVAR 67
3470: PLUS
3471: PPUSH
3472: CALL_OW 380
// un := CreateHuman ;
3476: LD_ADDR_VAR 0 6
3480: PUSH
3481: CALL_OW 44
3485: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3486: LD_ADDR_EXP 37
3490: PUSH
3491: LD_EXP 37
3495: PPUSH
3496: LD_EXP 37
3500: PUSH
3501: LD_INT 1
3503: PLUS
3504: PPUSH
3505: LD_VAR 0 6
3509: PPUSH
3510: CALL_OW 1
3514: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3515: LD_VAR 0 6
3519: PPUSH
3520: LD_VAR 0 5
3524: PPUSH
3525: CALL_OW 52
// end ;
3529: GO 3454
3531: POP
3532: POP
// end ;
3533: GO 3438
3535: POP
3536: POP
// if ibrahimOnRuSide then
3537: LD_EXP 3
3541: IFFALSE 3639
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3543: LD_ADDR_EXP 21
3547: PUSH
3548: LD_STRING IbrahimRu
3550: PPUSH
3551: LD_INT 0
3553: PPUSH
3554: LD_STRING 
3556: PPUSH
3557: CALL 26941 0 3
3561: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3562: LD_EXP 21
3566: PPUSH
3567: LD_INT 121
3569: PPUSH
3570: LD_INT 78
3572: PPUSH
3573: LD_INT 0
3575: PPUSH
3576: CALL_OW 48
// ComHold ( Ibrahim ) ;
3580: LD_EXP 21
3584: PPUSH
3585: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3589: LD_INT 1
3591: PPUSH
3592: LD_INT 1
3594: PPUSH
3595: LD_INT 2
3597: PPUSH
3598: CALL_OW 380
// ruSol := CreateHuman ;
3602: LD_ADDR_EXP 42
3606: PUSH
3607: CALL_OW 44
3611: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3612: LD_EXP 42
3616: PPUSH
3617: LD_INT 121
3619: PPUSH
3620: LD_INT 75
3622: PPUSH
3623: LD_INT 0
3625: PPUSH
3626: CALL_OW 48
// ComHold ( ruSol ) ;
3630: LD_EXP 42
3634: PPUSH
3635: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3639: LD_ADDR_VAR 0 4
3643: PUSH
3644: DOUBLE
3645: LD_INT 1
3647: DEC
3648: ST_TO_ADDR
3649: LD_INT 2
3651: PUSH
3652: LD_INT 2
3654: PUSH
3655: LD_OWVAR 67
3659: PLUS
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: PUSH
3665: LD_EXP 10
3669: PUSH
3670: LD_INT 3
3672: GREATER
3673: PUSH
3674: LD_INT 1
3676: PLUS
3677: ARRAY
3678: PUSH
3679: FOR_TO
3680: IFFALSE 3749
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3682: LD_VAR 0 8
3686: PPUSH
3687: LD_INT 21
3689: PUSH
3690: LD_INT 23
3692: PUSH
3693: LD_INT 24
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: LIST
3700: PUSH
3701: LD_VAR 0 4
3705: PUSH
3706: LD_INT 3
3708: MOD
3709: PUSH
3710: LD_INT 1
3712: PLUS
3713: ARRAY
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 1
3720: PPUSH
3721: LD_INT 43
3723: PUSH
3724: LD_INT 44
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 2
3736: PPUSH
3737: CALL_OW 12
3741: ARRAY
3742: PPUSH
3743: CALL_OW 185
3747: GO 3679
3749: POP
3750: POP
// end ;
3751: LD_VAR 0 1
3755: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3756: LD_EXP 41
3760: PUSH
3761: LD_EXP 4
3765: NOT
3766: AND
3767: IFFALSE 4254
3769: GO 3771
3771: DISABLE
3772: LD_INT 0
3774: PPUSH
3775: PPUSH
3776: PPUSH
3777: PPUSH
3778: PPUSH
// begin enable ;
3779: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: LD_EXP 41
3789: PPUSH
3790: LD_INT 21
3792: PUSH
3793: LD_INT 2
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PPUSH
3800: CALL_OW 72
3804: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
3805: LD_ADDR_VAR 0 4
3809: PUSH
3810: LD_INT 81
3812: PUSH
3813: LD_INT 3
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 2
3822: PUSH
3823: LD_INT 95
3825: PUSH
3826: LD_INT 4
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 95
3835: PUSH
3836: LD_INT 5
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 95
3845: PUSH
3846: LD_INT 6
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: LD_INT 95
3855: PUSH
3856: LD_INT 7
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PPUSH
3874: CALL_OW 69
3878: ST_TO_ADDR
// for i in filter do
3879: LD_ADDR_VAR 0 1
3883: PUSH
3884: LD_VAR 0 2
3888: PUSH
3889: FOR_IN
3890: IFFALSE 4252
// begin tmp := IsDrivenBy ( i ) ;
3892: LD_ADDR_VAR 0 3
3896: PUSH
3897: LD_VAR 0 1
3901: PPUSH
3902: CALL_OW 311
3906: ST_TO_ADDR
// if not tmp then
3907: LD_VAR 0 3
3911: NOT
3912: IFFALSE 3916
// continue ;
3914: GO 3889
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
3916: LD_VAR 0 1
3920: PPUSH
3921: CALL_OW 261
3925: PUSH
3926: LD_INT 90
3928: GREATER
3929: PUSH
3930: LD_VAR 0 1
3934: PPUSH
3935: CALL_OW 110
3939: PUSH
3940: LD_INT 2
3942: EQUAL
3943: AND
3944: IFFALSE 3960
// SetTag ( i , 0 ) else
3946: LD_VAR 0 1
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 109
3958: GO 4003
// if GetTag ( i ) = 2 then
3960: LD_VAR 0 1
3964: PPUSH
3965: CALL_OW 110
3969: PUSH
3970: LD_INT 2
3972: EQUAL
3973: IFFALSE 4003
// begin x := rand ( 1 , 2 ) ;
3975: LD_ADDR_VAR 0 5
3979: PUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_INT 2
3985: PPUSH
3986: CALL_OW 12
3990: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
3991: LD_VAR 0 1
3995: PPUSH
3996: LD_INT 200
3998: PPUSH
3999: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4003: LD_VAR 0 1
4007: PPUSH
4008: CALL_OW 256
4012: PUSH
4013: LD_INT 600
4015: GREATEREQUAL
4016: PUSH
4017: LD_VAR 0 1
4021: PPUSH
4022: CALL_OW 110
4026: NOT
4027: AND
4028: IFFALSE 4054
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4030: LD_VAR 0 1
4034: PPUSH
4035: LD_VAR 0 4
4039: PPUSH
4040: LD_VAR 0 1
4044: PPUSH
4045: CALL_OW 74
4049: PPUSH
4050: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4054: LD_VAR 0 1
4058: PPUSH
4059: CALL_OW 256
4063: PUSH
4064: LD_INT 600
4066: LESS
4067: PUSH
4068: LD_VAR 0 1
4072: PPUSH
4073: CALL_OW 110
4077: NOT
4078: AND
4079: IFFALSE 4108
// begin SetTag ( i , 1 ) ;
4081: LD_VAR 0 1
4085: PPUSH
4086: LD_INT 1
4088: PPUSH
4089: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4093: LD_VAR 0 1
4097: PPUSH
4098: LD_INT 112
4100: PPUSH
4101: LD_INT 119
4103: PPUSH
4104: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4108: LD_VAR 0 1
4112: PPUSH
4113: CALL_OW 110
4117: PUSH
4118: LD_INT 1
4120: EQUAL
4121: PUSH
4122: LD_VAR 0 1
4126: PPUSH
4127: LD_INT 112
4129: PPUSH
4130: LD_INT 119
4132: PPUSH
4133: CALL_OW 297
4137: PUSH
4138: LD_INT 9
4140: LESS
4141: AND
4142: PUSH
4143: LD_VAR 0 3
4147: AND
4148: IFFALSE 4250
// begin ComExitVehicle ( tmp ) ;
4150: LD_VAR 0 3
4154: PPUSH
4155: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4159: LD_VAR 0 3
4163: PPUSH
4164: LD_VAR 0 1
4168: PPUSH
4169: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4173: LD_INT 35
4175: PPUSH
4176: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4180: LD_VAR 0 1
4184: PPUSH
4185: CALL_OW 256
4189: PUSH
4190: LD_INT 1000
4192: EQUAL
4193: IFFALSE 4173
// ComEnterUnit ( tmp , i ) ;
4195: LD_VAR 0 3
4199: PPUSH
4200: LD_VAR 0 1
4204: PPUSH
4205: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 261
4218: PUSH
4219: LD_INT 50
4221: LESSEQUAL
4222: IFFALSE 4238
// SetTag ( i , 2 ) else
4224: LD_VAR 0 1
4228: PPUSH
4229: LD_INT 2
4231: PPUSH
4232: CALL_OW 109
4236: GO 4250
// SetTag ( i , 0 ) ;
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_INT 0
4245: PPUSH
4246: CALL_OW 109
// end ; end ;
4250: GO 3889
4252: POP
4253: POP
// end ;
4254: PPOPN 5
4256: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4257: LD_EXP 4
4261: NOT
4262: PUSH
4263: LD_EXP 38
4267: AND
4268: IFFALSE 4529
4270: GO 4272
4272: DISABLE
4273: LD_INT 0
4275: PPUSH
4276: PPUSH
4277: PPUSH
4278: PPUSH
// begin enable ;
4279: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: LD_INT 3
4287: PPUSH
4288: LD_INT 22
4290: PUSH
4291: LD_INT 3
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 21
4300: PUSH
4301: LD_INT 3
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 3
4310: PUSH
4311: LD_INT 24
4313: PUSH
4314: LD_INT 1000
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 70
4334: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4335: LD_ADDR_VAR 0 3
4339: PUSH
4340: LD_EXP 38
4344: PPUSH
4345: LD_INT 50
4347: PUSH
4348: EMPTY
4349: LIST
4350: PPUSH
4351: CALL_OW 72
4355: ST_TO_ADDR
// if filter and tmp then
4356: LD_VAR 0 2
4360: PUSH
4361: LD_VAR 0 3
4365: AND
4366: IFFALSE 4458
// begin for i in tmp do
4368: LD_ADDR_VAR 0 1
4372: PUSH
4373: LD_VAR 0 3
4377: PUSH
4378: FOR_IN
4379: IFFALSE 4454
// begin if GetTag ( i ) = tEscape then
4381: LD_VAR 0 1
4385: PPUSH
4386: CALL_OW 110
4390: PUSH
4391: LD_EXP 17
4395: EQUAL
4396: IFFALSE 4400
// continue ;
4398: GO 4378
// if IsInUnit ( i ) then
4400: LD_VAR 0 1
4404: PPUSH
4405: CALL_OW 310
4409: IFFALSE 4422
// ComExitBuilding ( i ) else
4411: LD_VAR 0 1
4415: PPUSH
4416: CALL_OW 122
4420: GO 4452
// if not HasTask ( i ) then
4422: LD_VAR 0 1
4426: PPUSH
4427: CALL_OW 314
4431: NOT
4432: IFFALSE 4452
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4434: LD_VAR 0 1
4438: PPUSH
4439: LD_VAR 0 2
4443: PUSH
4444: LD_INT 1
4446: ARRAY
4447: PPUSH
4448: CALL_OW 130
// end ;
4452: GO 4378
4454: POP
4455: POP
// end else
4456: GO 4529
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4458: LD_VAR 0 3
4462: PPUSH
4463: LD_INT 3
4465: PUSH
4466: LD_INT 54
4468: PUSH
4469: EMPTY
4470: LIST
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PPUSH
4476: CALL_OW 72
4480: IFFALSE 4529
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4482: LD_ADDR_VAR 0 1
4486: PUSH
4487: LD_VAR 0 3
4491: PPUSH
4492: LD_INT 3
4494: PUSH
4495: LD_INT 54
4497: PUSH
4498: EMPTY
4499: LIST
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PPUSH
4505: CALL_OW 72
4509: PUSH
4510: FOR_IN
4511: IFFALSE 4527
// ComEnterUnit ( i , ruMainBase ) ;
4513: LD_VAR 0 1
4517: PPUSH
4518: LD_INT 200
4520: PPUSH
4521: CALL_OW 120
4525: GO 4510
4527: POP
4528: POP
// end ; end ;
4529: PPOPN 4
4531: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4532: LD_EXP 4
4536: NOT
4537: PUSH
4538: LD_EXP 40
4542: AND
4543: IFFALSE 4822
4545: GO 4547
4547: DISABLE
4548: LD_INT 0
4550: PPUSH
4551: PPUSH
4552: PPUSH
4553: PPUSH
// begin enable ;
4554: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4555: LD_ADDR_VAR 0 2
4559: PUSH
4560: LD_INT 3
4562: PPUSH
4563: LD_INT 22
4565: PUSH
4566: LD_INT 3
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 21
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_INT 3
4585: PUSH
4586: LD_INT 24
4588: PUSH
4589: LD_INT 1000
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: PPUSH
4605: CALL_OW 70
4609: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4610: LD_ADDR_VAR 0 3
4614: PUSH
4615: LD_EXP 40
4619: PPUSH
4620: LD_INT 50
4622: PUSH
4623: EMPTY
4624: LIST
4625: PPUSH
4626: CALL_OW 72
4630: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4631: LD_ADDR_VAR 0 4
4635: PUSH
4636: LD_INT 118
4638: PPUSH
4639: LD_INT 121
4641: PPUSH
4642: CALL_OW 428
4646: ST_TO_ADDR
// if filter and tmp then
4647: LD_VAR 0 2
4651: PUSH
4652: LD_VAR 0 3
4656: AND
4657: IFFALSE 4749
// begin for i in tmp do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: LD_VAR 0 3
4668: PUSH
4669: FOR_IN
4670: IFFALSE 4745
// begin if GetTag ( i ) = tEscape then
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 110
4681: PUSH
4682: LD_EXP 17
4686: EQUAL
4687: IFFALSE 4691
// continue ;
4689: GO 4669
// if IsInUnit ( i ) then
4691: LD_VAR 0 1
4695: PPUSH
4696: CALL_OW 310
4700: IFFALSE 4713
// ComExitBuilding ( i ) else
4702: LD_VAR 0 1
4706: PPUSH
4707: CALL_OW 122
4711: GO 4743
// if not HasTask ( i ) then
4713: LD_VAR 0 1
4717: PPUSH
4718: CALL_OW 314
4722: NOT
4723: IFFALSE 4743
// ComHeal ( i , filter [ 1 ] ) ;
4725: LD_VAR 0 1
4729: PPUSH
4730: LD_VAR 0 2
4734: PUSH
4735: LD_INT 1
4737: ARRAY
4738: PPUSH
4739: CALL_OW 128
// end ;
4743: GO 4669
4745: POP
4746: POP
// end else
4747: GO 4822
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4749: LD_VAR 0 3
4753: PPUSH
4754: LD_INT 3
4756: PUSH
4757: LD_INT 54
4759: PUSH
4760: EMPTY
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PPUSH
4767: CALL_OW 72
4771: IFFALSE 4822
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4773: LD_ADDR_VAR 0 1
4777: PUSH
4778: LD_VAR 0 3
4782: PPUSH
4783: LD_INT 3
4785: PUSH
4786: LD_INT 54
4788: PUSH
4789: EMPTY
4790: LIST
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PPUSH
4796: CALL_OW 72
4800: PUSH
4801: FOR_IN
4802: IFFALSE 4820
// ComEnterUnit ( i , lab ) ;
4804: LD_VAR 0 1
4808: PPUSH
4809: LD_VAR 0 4
4813: PPUSH
4814: CALL_OW 120
4818: GO 4801
4820: POP
4821: POP
// end ; end ; end_of_file
4822: PPOPN 4
4824: END
// on UnitDestroyed ( un ) do begin if un = Heike then
4825: LD_VAR 0 1
4829: PUSH
4830: LD_EXP 18
4834: EQUAL
4835: IFFALSE 4844
// YouLost ( Heike ) ;
4837: LD_STRING Heike
4839: PPUSH
4840: CALL_OW 104
// if un in ruEng then
4844: LD_VAR 0 1
4848: PUSH
4849: LD_EXP 38
4853: IN
4854: IFFALSE 4872
// ruEng := ruEng diff un ;
4856: LD_ADDR_EXP 38
4860: PUSH
4861: LD_EXP 38
4865: PUSH
4866: LD_VAR 0 1
4870: DIFF
4871: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
4872: LD_VAR 0 1
4876: PUSH
4877: LD_INT 22
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: LD_INT 21
4889: PUSH
4890: LD_INT 1
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: PUSH
4897: LD_INT 23
4899: PUSH
4900: LD_INT 2
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: LIST
4911: PPUSH
4912: CALL_OW 69
4916: IN
4917: IFFALSE 4933
// loseCounter := loseCounter + 1 ;
4919: LD_ADDR_EXP 6
4923: PUSH
4924: LD_EXP 6
4928: PUSH
4929: LD_INT 1
4931: PLUS
4932: ST_TO_ADDR
// end ;
4933: PPOPN 1
4935: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
4936: LD_INT 0
4938: PPUSH
4939: PPUSH
// begin if un in ruMobile then
4940: LD_VAR 0 2
4944: PUSH
4945: LD_EXP 41
4949: IN
4950: IFFALSE 5109
// begin ruMobile := ruMobile diff un ;
4952: LD_ADDR_EXP 41
4956: PUSH
4957: LD_EXP 41
4961: PUSH
4962: LD_VAR 0 2
4966: DIFF
4967: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
4968: LD_ADDR_VAR 0 5
4972: PUSH
4973: LD_VAR 0 2
4977: PPUSH
4978: CALL_OW 264
4982: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
4983: LD_ADDR_VAR 0 6
4987: PUSH
4988: LD_INT 110
4990: PPUSH
4991: LD_INT 126
4993: PPUSH
4994: CALL_OW 428
4998: ST_TO_ADDR
// if not driver or not fac then
4999: LD_VAR 0 1
5003: NOT
5004: PUSH
5005: LD_VAR 0 6
5009: NOT
5010: OR
5011: IFFALSE 5015
// exit ;
5013: GO 5109
// AddComMoveXY ( driver , 111 , 121 ) ;
5015: LD_VAR 0 1
5019: PPUSH
5020: LD_INT 111
5022: PPUSH
5023: LD_INT 121
5025: PPUSH
5026: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5030: LD_VAR 0 1
5034: PPUSH
5035: LD_VAR 0 6
5039: PPUSH
5040: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5044: LD_INT 35
5046: PPUSH
5047: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5051: LD_VAR 0 1
5055: PPUSH
5056: CALL_OW 301
5060: PUSH
5061: LD_VAR 0 1
5065: PPUSH
5066: CALL_OW 310
5070: OR
5071: IFFALSE 5044
// if IsDead ( driver ) then
5073: LD_VAR 0 1
5077: PPUSH
5078: CALL_OW 301
5082: IFFALSE 5086
// exit ;
5084: GO 5109
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5086: LD_VAR 0 6
5090: PPUSH
5091: LD_INT 21
5093: PPUSH
5094: LD_INT 1
5096: PPUSH
5097: LD_INT 1
5099: PPUSH
5100: LD_VAR 0 5
5104: PPUSH
5105: CALL_OW 185
// end ; end ;
5109: PPOPN 6
5111: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( fac ) = 3 then
5112: LD_VAR 0 2
5116: PPUSH
5117: CALL_OW 255
5121: PUSH
5122: LD_INT 3
5124: EQUAL
5125: IFFALSE 5171
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5127: LD_ADDR_EXP 41
5131: PUSH
5132: LD_EXP 41
5136: PPUSH
5137: LD_EXP 41
5141: PUSH
5142: LD_INT 1
5144: PLUS
5145: PPUSH
5146: LD_VAR 0 1
5150: PPUSH
5151: CALL_OW 1
5155: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5156: LD_VAR 0 1
5160: PPUSH
5161: LD_INT 110
5163: PPUSH
5164: LD_INT 117
5166: PPUSH
5167: CALL_OW 171
// end ; end ;
5171: PPOPN 2
5173: END
// on LeaveBuilding ( b , un ) do var barracks ;
5174: LD_INT 0
5176: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5177: LD_VAR 0 1
5181: PUSH
5182: LD_INT 130
5184: PPUSH
5185: LD_INT 17
5187: PPUSH
5188: CALL_OW 428
5192: PUSH
5193: LD_INT 138
5195: PPUSH
5196: LD_INT 22
5198: PPUSH
5199: CALL_OW 428
5203: PUSH
5204: LD_INT 123
5206: PPUSH
5207: LD_INT 17
5209: PPUSH
5210: CALL_OW 428
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: IN
5220: IFFALSE 5244
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_INT 135
5229: PPUSH
5230: LD_INT 31
5232: PPUSH
5233: CALL_OW 428
5237: PPUSH
5238: CALL_OW 180
// exit ;
5242: GO 5518
// end ; if b = HexInfo ( 135 , 31 ) then
5244: LD_VAR 0 1
5248: PUSH
5249: LD_INT 135
5251: PPUSH
5252: LD_INT 31
5254: PPUSH
5255: CALL_OW 428
5259: EQUAL
5260: IFFALSE 5332
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5262: LD_VAR 0 2
5266: PPUSH
5267: LD_INT 106
5269: PPUSH
5270: LD_INT 51
5272: PPUSH
5273: CALL_OW 428
5277: PPUSH
5278: CALL_OW 180
// if not explodeFirstDepot then
5282: LD_EXP 12
5286: NOT
5287: IFFALSE 5330
// begin explodeFirstDepot := true ;
5289: LD_ADDR_EXP 12
5293: PUSH
5294: LD_INT 1
5296: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5297: LD_INT 525
5299: PPUSH
5300: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5304: LD_INT 127
5306: PPUSH
5307: LD_INT 27
5309: PPUSH
5310: LD_INT 1
5312: PPUSH
5313: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5317: LD_INT 125
5319: PPUSH
5320: LD_INT 29
5322: PPUSH
5323: LD_INT 1
5325: PPUSH
5326: CALL_OW 453
// end ; exit ;
5330: GO 5518
// end ; if b = HexInfo ( 106 , 51 ) then
5332: LD_VAR 0 1
5336: PUSH
5337: LD_INT 106
5339: PPUSH
5340: LD_INT 51
5342: PPUSH
5343: CALL_OW 428
5347: EQUAL
5348: IFFALSE 5448
// begin AddComMoveXY ( un , 106 , 93 ) ;
5350: LD_VAR 0 2
5354: PPUSH
5355: LD_INT 106
5357: PPUSH
5358: LD_INT 93
5360: PPUSH
5361: CALL_OW 171
// if not explodeSecondDepot then
5365: LD_EXP 13
5369: NOT
5370: IFFALSE 5446
// begin explodeSecondDepot := true ;
5372: LD_ADDR_EXP 13
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5380: LD_INT 420
5382: PPUSH
5383: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5387: LD_INT 111
5389: PPUSH
5390: LD_INT 75
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5400: LD_INT 111
5402: PPUSH
5403: LD_INT 75
5405: PPUSH
5406: LD_INT 1
5408: PPUSH
5409: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5413: LD_INT 108
5415: PPUSH
5416: LD_INT 69
5418: PPUSH
5419: LD_INT 1
5421: PPUSH
5422: CALL_OW 453
// wait ( 0 0$2 ) ;
5426: LD_INT 70
5428: PPUSH
5429: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5433: LD_INT 94
5435: PPUSH
5436: LD_INT 65
5438: PPUSH
5439: LD_INT 1
5441: PPUSH
5442: CALL_OW 453
// end ; exit ;
5446: GO 5518
// end ; if GetBType ( b ) = b_bunker then
5448: LD_VAR 0 1
5452: PPUSH
5453: CALL_OW 266
5457: PUSH
5458: LD_INT 32
5460: EQUAL
5461: IFFALSE 5518
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5463: LD_ADDR_VAR 0 3
5467: PUSH
5468: LD_VAR 0 2
5472: PPUSH
5473: LD_INT 5
5475: PPUSH
5476: CALL 1004 0 2
5480: ST_TO_ADDR
// if barracks then
5481: LD_VAR 0 3
5485: IFFALSE 5503
// AddComEnterUnit ( un , barracks ) else
5487: LD_VAR 0 2
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 180
5501: GO 5518
// AddComMoveXY ( un , 116 , 110 ) ;
5503: LD_VAR 0 2
5507: PPUSH
5508: LD_INT 116
5510: PPUSH
5511: LD_INT 110
5513: PPUSH
5514: CALL_OW 171
// end ; end ;
5518: PPOPN 3
5520: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5521: LD_VAR 0 1
5525: PUSH
5526: LD_EXP 23
5530: EQUAL
5531: PUSH
5532: LD_VAR 0 2
5536: PUSH
5537: LD_INT 3
5539: PUSH
5540: LD_INT 6
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: IN
5547: AND
5548: IFFALSE 5579
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5550: LD_ADDR_EXP 8
5554: PUSH
5555: LD_VAR 0 1
5559: PPUSH
5560: CALL_OW 250
5564: PUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL_OW 251
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: ST_TO_ADDR
// end ; end_of_file
5579: PPOPN 3
5581: END
// export function Action ; var i , un , veh , tmp , rutmp ; begin
5582: LD_INT 0
5584: PPUSH
5585: PPUSH
5586: PPUSH
5587: PPUSH
5588: PPUSH
5589: PPUSH
// InGameOn ;
5590: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5594: LD_INT 5
5596: PPUSH
5597: LD_INT 2
5599: PPUSH
5600: CALL_OW 343
// music_nat := 4 ;
5604: LD_ADDR_OWVAR 71
5608: PUSH
5609: LD_INT 4
5611: ST_TO_ADDR
// music_class := music_combat ;
5612: LD_ADDR_OWVAR 72
5616: PUSH
5617: LD_INT 1
5619: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5620: LD_INT 133
5622: PPUSH
5623: LD_INT 2
5625: PPUSH
5626: LD_INT 2
5628: PPUSH
5629: LD_INT 10
5631: PPUSH
5632: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5636: LD_INT 133
5638: PPUSH
5639: LD_INT 2
5641: PPUSH
5642: CALL_OW 86
// wait ( 0 0$1 ) ;
5646: LD_INT 35
5648: PPUSH
5649: CALL_OW 67
// uc_side := 6 ;
5653: LD_ADDR_OWVAR 20
5657: PUSH
5658: LD_INT 6
5660: ST_TO_ADDR
// uc_nation := 3 ;
5661: LD_ADDR_OWVAR 21
5665: PUSH
5666: LD_INT 3
5668: ST_TO_ADDR
// rutmp := [ ] ;
5669: LD_ADDR_VAR 0 6
5673: PUSH
5674: EMPTY
5675: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5676: LD_INT 6
5678: PPUSH
5679: LD_INT 3
5681: PPUSH
5682: LD_INT 21
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: LD_INT 1
5690: PPUSH
5691: LD_INT 44
5693: PPUSH
5694: LD_INT 66
5696: PPUSH
5697: CALL 336 0 7
// veh := CreateVehicle ;
5701: LD_ADDR_VAR 0 4
5705: PUSH
5706: CALL_OW 45
5710: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5711: LD_VAR 0 4
5715: PPUSH
5716: LD_INT 3
5718: PPUSH
5719: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5723: LD_VAR 0 4
5727: PPUSH
5728: LD_INT 8
5730: PPUSH
5731: LD_INT 0
5733: PPUSH
5734: CALL_OW 49
// SetLives ( veh , 500 ) ;
5738: LD_VAR 0 4
5742: PPUSH
5743: LD_INT 500
5745: PPUSH
5746: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
5750: LD_INT 0
5752: PPUSH
5753: LD_INT 3
5755: PPUSH
5756: LD_INT 3
5758: PPUSH
5759: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5763: CALL_OW 44
5767: PPUSH
5768: LD_VAR 0 4
5772: PPUSH
5773: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
5777: LD_VAR 0 4
5781: PPUSH
5782: LD_INT 133
5784: PPUSH
5785: LD_INT 11
5787: PPUSH
5788: CALL_OW 111
// rutmp := [ veh ] ;
5792: LD_ADDR_VAR 0 6
5796: PUSH
5797: LD_VAR 0 4
5801: PUSH
5802: EMPTY
5803: LIST
5804: ST_TO_ADDR
// for i := 1 to 4 do
5805: LD_ADDR_VAR 0 2
5809: PUSH
5810: DOUBLE
5811: LD_INT 1
5813: DEC
5814: ST_TO_ADDR
5815: LD_INT 4
5817: PUSH
5818: FOR_TO
5819: IFFALSE 5926
// begin PrepareHuman ( false , i , 2 ) ;
5821: LD_INT 0
5823: PPUSH
5824: LD_VAR 0 2
5828: PPUSH
5829: LD_INT 2
5831: PPUSH
5832: CALL_OW 380
// un := CreateHuman ;
5836: LD_ADDR_VAR 0 3
5840: PUSH
5841: CALL_OW 44
5845: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5846: LD_VAR 0 3
5850: PPUSH
5851: LD_INT 3
5853: PPUSH
5854: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
5858: LD_VAR 0 3
5862: PPUSH
5863: LD_INT 8
5865: PPUSH
5866: LD_INT 0
5868: PPUSH
5869: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
5873: LD_ADDR_VAR 0 6
5877: PUSH
5878: LD_VAR 0 6
5882: PPUSH
5883: LD_VAR 0 6
5887: PUSH
5888: LD_INT 1
5890: PLUS
5891: PPUSH
5892: LD_VAR 0 3
5896: PPUSH
5897: CALL_OW 1
5901: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
5902: LD_VAR 0 3
5906: PPUSH
5907: LD_INT 133
5909: PPUSH
5910: LD_INT 11
5912: PPUSH
5913: CALL_OW 111
// wait ( 0 0$0.5 ) ;
5917: LD_INT 18
5919: PPUSH
5920: CALL_OW 67
// end ;
5924: GO 5818
5926: POP
5927: POP
// for i in rutmp do
5928: LD_ADDR_VAR 0 2
5932: PUSH
5933: LD_VAR 0 6
5937: PUSH
5938: FOR_IN
5939: IFFALSE 5988
// begin AddComMoveXY ( i , 99 , 65 ) ;
5941: LD_VAR 0 2
5945: PPUSH
5946: LD_INT 99
5948: PPUSH
5949: LD_INT 65
5951: PPUSH
5952: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
5956: LD_VAR 0 2
5960: PPUSH
5961: LD_INT 76
5963: PPUSH
5964: LD_INT 108
5966: PPUSH
5967: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
5971: LD_VAR 0 2
5975: PPUSH
5976: LD_INT 92
5978: PPUSH
5979: LD_INT 176
5981: PPUSH
5982: CALL_OW 171
// end ;
5986: GO 5938
5988: POP
5989: POP
// wait ( 0 0$10 ) ;
5990: LD_INT 350
5992: PPUSH
5993: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
5997: LD_ADDR_VAR 0 5
6001: PUSH
6002: LD_EXP 18
6006: PUSH
6007: LD_EXP 19
6011: PUSH
6012: LD_EXP 20
6016: PUSH
6017: LD_EXP 21
6021: PUSH
6022: LD_EXP 22
6026: PUSH
6027: LD_EXP 23
6031: PUSH
6032: LD_EXP 24
6036: PUSH
6037: LD_EXP 25
6041: PUSH
6042: LD_EXP 27
6046: PUSH
6047: LD_EXP 28
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: PUSH
6064: LD_EXP 29
6068: UNION
6069: ST_TO_ADDR
// tmp := tmp diff 0 ;
6070: LD_ADDR_VAR 0 5
6074: PUSH
6075: LD_VAR 0 5
6079: PUSH
6080: LD_INT 0
6082: DIFF
6083: ST_TO_ADDR
// for i in heikeVehicles do
6084: LD_ADDR_VAR 0 2
6088: PUSH
6089: LD_EXP 30
6093: PUSH
6094: FOR_IN
6095: IFFALSE 6361
// begin if not tmp then
6097: LD_VAR 0 5
6101: NOT
6102: IFFALSE 6106
// continue ;
6104: GO 6094
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6106: LD_INT 2
6108: PPUSH
6109: LD_VAR 0 2
6113: PUSH
6114: LD_INT 5
6116: ARRAY
6117: PPUSH
6118: LD_VAR 0 2
6122: PUSH
6123: LD_INT 1
6125: ARRAY
6126: PPUSH
6127: LD_VAR 0 2
6131: PUSH
6132: LD_INT 2
6134: ARRAY
6135: PPUSH
6136: LD_VAR 0 2
6140: PUSH
6141: LD_INT 3
6143: ARRAY
6144: PPUSH
6145: LD_VAR 0 2
6149: PUSH
6150: LD_INT 4
6152: ARRAY
6153: PPUSH
6154: LD_INT 34
6156: PPUSH
6157: CALL 336 0 7
// veh := CreateVehicle ;
6161: LD_ADDR_VAR 0 4
6165: PUSH
6166: CALL_OW 45
6170: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6171: LD_VAR 0 2
6175: PUSH
6176: LD_INT 4
6178: ARRAY
6179: PUSH
6180: LD_INT 51
6182: PUSH
6183: LD_INT 32
6185: PUSH
6186: LD_INT 12
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: IN
6194: IFFALSE 6274
// begin if i [ 7 ] [ 1 ] then
6196: LD_VAR 0 2
6200: PUSH
6201: LD_INT 7
6203: ARRAY
6204: PUSH
6205: LD_INT 1
6207: ARRAY
6208: IFFALSE 6235
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6210: LD_VAR 0 4
6214: PPUSH
6215: LD_INT 1
6217: PPUSH
6218: LD_VAR 0 2
6222: PUSH
6223: LD_INT 7
6225: ARRAY
6226: PUSH
6227: LD_INT 1
6229: ARRAY
6230: PPUSH
6231: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6235: LD_VAR 0 2
6239: PUSH
6240: LD_INT 7
6242: ARRAY
6243: PUSH
6244: LD_INT 2
6246: ARRAY
6247: IFFALSE 6274
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6249: LD_VAR 0 4
6253: PPUSH
6254: LD_INT 2
6256: PPUSH
6257: LD_VAR 0 2
6261: PUSH
6262: LD_INT 7
6264: ARRAY
6265: PUSH
6266: LD_INT 2
6268: ARRAY
6269: PPUSH
6270: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6274: LD_VAR 0 4
6278: PPUSH
6279: LD_INT 3
6281: PPUSH
6282: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6286: LD_VAR 0 4
6290: PPUSH
6291: LD_INT 8
6293: PPUSH
6294: LD_INT 0
6296: PPUSH
6297: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6301: LD_VAR 0 5
6305: PUSH
6306: LD_INT 1
6308: ARRAY
6309: PPUSH
6310: LD_VAR 0 4
6314: PPUSH
6315: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6319: LD_ADDR_VAR 0 5
6323: PUSH
6324: LD_VAR 0 5
6328: PPUSH
6329: LD_INT 1
6331: PPUSH
6332: CALL_OW 3
6336: ST_TO_ADDR
// ComAgressiveMove ( veh , 133 , 7 ) ;
6337: LD_VAR 0 4
6341: PPUSH
6342: LD_INT 133
6344: PPUSH
6345: LD_INT 7
6347: PPUSH
6348: CALL_OW 114
// wait ( 0 0$1 ) ;
6352: LD_INT 35
6354: PPUSH
6355: CALL_OW 67
// end ;
6359: GO 6094
6361: POP
6362: POP
// if tmp then
6363: LD_VAR 0 5
6367: IFFALSE 6423
// for i in tmp do
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: LD_VAR 0 5
6378: PUSH
6379: FOR_IN
6380: IFFALSE 6421
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6382: LD_VAR 0 2
6386: PPUSH
6387: LD_INT 10
6389: PPUSH
6390: LD_INT 0
6392: PPUSH
6393: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6397: LD_VAR 0 2
6401: PPUSH
6402: LD_INT 146
6404: PPUSH
6405: LD_INT 7
6407: PPUSH
6408: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6412: LD_INT 18
6414: PPUSH
6415: CALL_OW 67
// end ;
6419: GO 6379
6421: POP
6422: POP
// if heikeApes then
6423: LD_EXP 31
6427: IFFALSE 6483
// for i in heikeApes do
6429: LD_ADDR_VAR 0 2
6433: PUSH
6434: LD_EXP 31
6438: PUSH
6439: FOR_IN
6440: IFFALSE 6481
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6442: LD_VAR 0 2
6446: PPUSH
6447: LD_INT 10
6449: PPUSH
6450: LD_INT 0
6452: PPUSH
6453: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6457: LD_VAR 0 2
6461: PPUSH
6462: LD_INT 146
6464: PPUSH
6465: LD_INT 7
6467: PPUSH
6468: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6472: LD_INT 18
6474: PPUSH
6475: CALL_OW 67
// end ;
6479: GO 6439
6481: POP
6482: POP
// DialogueOn ;
6483: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6487: LD_EXP 18
6491: PPUSH
6492: LD_STRING DH-outpost-a-1
6494: PPUSH
6495: CALL_OW 88
// DialogueOff ;
6499: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6503: LD_INT 133
6505: PPUSH
6506: LD_INT 2
6508: PPUSH
6509: LD_INT 2
6511: PPUSH
6512: CALL_OW 331
// InGameOff ;
6516: CALL_OW 9
// music_nat := 0 ;
6520: LD_ADDR_OWVAR 71
6524: PUSH
6525: LD_INT 0
6527: ST_TO_ADDR
// music_class := 0 ;
6528: LD_ADDR_OWVAR 72
6532: PUSH
6533: LD_INT 0
6535: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6536: LD_STRING Outposts
6538: PPUSH
6539: CALL_OW 337
// SaveForQuickRestart ;
6543: CALL_OW 22
// end ;
6547: LD_VAR 0 1
6551: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6552: LD_INT 22
6554: PUSH
6555: LD_INT 2
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 91
6564: PUSH
6565: LD_EXP 21
6569: PUSH
6570: LD_INT 20
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 69
6586: PUSH
6587: LD_EXP 3
6591: AND
6592: PUSH
6593: LD_EXP 21
6597: PPUSH
6598: CALL_OW 302
6602: AND
6603: IFFALSE 6850
6605: GO 6607
6607: DISABLE
6608: LD_INT 0
6610: PPUSH
6611: PPUSH
6612: PPUSH
6613: PPUSH
// begin IbrahimBetrayal ;
6614: CALL 6853 0 0
// repeat wait ( 0 0$1 ) ;
6618: LD_INT 35
6620: PPUSH
6621: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6625: LD_EXP 21
6629: PPUSH
6630: CALL_OW 301
6634: PUSH
6635: LD_INT 22
6637: PUSH
6638: LD_INT 2
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 91
6647: PUSH
6648: LD_EXP 21
6652: PUSH
6653: LD_INT 6
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: PPUSH
6665: CALL_OW 69
6669: PUSH
6670: LD_EXP 21
6674: PPUSH
6675: CALL_OW 302
6679: AND
6680: OR
6681: IFFALSE 6618
// if IsDead ( Ibrahim ) then
6683: LD_EXP 21
6687: PPUSH
6688: CALL_OW 301
6692: IFFALSE 6696
// exit ;
6694: GO 6850
// x := GetX ( Ibrahim ) ;
6696: LD_ADDR_VAR 0 1
6700: PUSH
6701: LD_EXP 21
6705: PPUSH
6706: CALL_OW 250
6710: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
6711: LD_ADDR_VAR 0 2
6715: PUSH
6716: LD_EXP 21
6720: PPUSH
6721: CALL_OW 251
6725: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
6726: LD_ADDR_VAR 0 3
6730: PUSH
6731: LD_EXP 21
6735: PPUSH
6736: CALL_OW 254
6740: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
6741: LD_ADDR_VAR 0 4
6745: PUSH
6746: LD_EXP 21
6750: PPUSH
6751: CALL_OW 256
6755: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
6756: LD_EXP 21
6760: PPUSH
6761: CALL_OW 64
// uc_side := 2 ;
6765: LD_ADDR_OWVAR 20
6769: PUSH
6770: LD_INT 2
6772: ST_TO_ADDR
// uc_nation := 2 ;
6773: LD_ADDR_OWVAR 21
6777: PUSH
6778: LD_INT 2
6780: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
6781: LD_ADDR_EXP 21
6785: PUSH
6786: LD_STRING Ibrahim
6788: PPUSH
6789: LD_INT 0
6791: PPUSH
6792: LD_STRING 
6794: PPUSH
6795: CALL 26941 0 3
6799: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
6800: LD_EXP 21
6804: PPUSH
6805: LD_VAR 0 3
6809: PPUSH
6810: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
6814: LD_EXP 21
6818: PPUSH
6819: LD_VAR 0 1
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: LD_INT 0
6831: PPUSH
6832: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
6836: LD_EXP 21
6840: PPUSH
6841: LD_VAR 0 4
6845: PPUSH
6846: CALL_OW 234
// end ;
6850: PPOPN 4
6852: END
// export function IbrahimBetrayal ; var i , tmp ; begin
6853: LD_INT 0
6855: PPUSH
6856: PPUSH
6857: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
6858: LD_INT 122
6860: PPUSH
6861: LD_INT 77
6863: PPUSH
6864: LD_INT 2
6866: PPUSH
6867: LD_INT 6
6869: NEG
6870: PPUSH
6871: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
6875: LD_EXP 21
6879: PPUSH
6880: LD_INT 123
6882: PPUSH
6883: LD_INT 79
6885: PPUSH
6886: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
6890: LD_EXP 21
6894: PPUSH
6895: LD_INT 125
6897: PPUSH
6898: LD_INT 82
6900: PPUSH
6901: CALL_OW 178
// wait ( 0 0$2 ) ;
6905: LD_INT 70
6907: PPUSH
6908: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
6912: LD_EXP 42
6916: PPUSH
6917: LD_EXP 21
6921: PPUSH
6922: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
6926: LD_EXP 42
6930: PPUSH
6931: LD_STRING DRum-outpost-b-3
6933: PPUSH
6934: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: LD_INT 125
6945: PPUSH
6946: LD_INT 76
6948: PPUSH
6949: CALL_OW 428
6953: PUSH
6954: LD_INT 125
6956: PPUSH
6957: LD_INT 79
6959: PPUSH
6960: CALL_OW 428
6964: PUSH
6965: LD_INT 125
6967: PPUSH
6968: LD_INT 82
6970: PPUSH
6971: CALL_OW 428
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// for i in tmp do
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: LD_VAR 0 3
6990: PUSH
6991: FOR_IN
6992: IFFALSE 7008
// SetLives ( i , 200 ) ;
6994: LD_VAR 0 2
6998: PPUSH
6999: LD_INT 200
7001: PPUSH
7002: CALL_OW 234
7006: GO 6991
7008: POP
7009: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7010: LD_EXP 21
7014: PPUSH
7015: LD_STRING DI-outpost-b-4
7017: PPUSH
7018: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7022: LD_EXP 21
7026: PPUSH
7027: LD_INT 5
7029: PPUSH
7030: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7034: LD_EXP 21
7038: PUSH
7039: LD_EXP 42
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PPUSH
7048: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7052: LD_INT 122
7054: PPUSH
7055: LD_INT 77
7057: PPUSH
7058: LD_INT 2
7060: PPUSH
7061: CALL_OW 331
// if Givi then
7065: LD_EXP 19
7069: IFFALSE 7085
// Say ( Givi , DG-1-outpost-b-5 ) else
7071: LD_EXP 19
7075: PPUSH
7076: LD_STRING DG-1-outpost-b-5
7078: PPUSH
7079: CALL_OW 88
7083: GO 7150
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7085: LD_EXP 29
7089: PPUSH
7090: LD_INT 26
7092: PUSH
7093: LD_INT 2
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 72
7104: PUSH
7105: LD_INT 1
7107: ARRAY
7108: PPUSH
7109: LD_STRING DArf-outpost-b-a-5
7111: PPUSH
7112: CALL_OW 88
7116: NOT
7117: IFFALSE 7150
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7119: LD_EXP 29
7123: PPUSH
7124: LD_INT 26
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PPUSH
7134: CALL_OW 72
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: PPUSH
7143: LD_STRING DArm-outpost-b-a-5
7145: PPUSH
7146: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7150: LD_INT 35
7152: PPUSH
7153: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7157: LD_EXP 21
7161: PPUSH
7162: CALL_OW 301
7166: PUSH
7167: LD_EXP 18
7171: PPUSH
7172: LD_EXP 21
7176: PPUSH
7177: CALL_OW 296
7181: PUSH
7182: LD_INT 6
7184: LESS
7185: PUSH
7186: LD_EXP 21
7190: PPUSH
7191: CALL_OW 302
7195: AND
7196: OR
7197: IFFALSE 7150
// if IsDead ( Ibrahim ) then
7199: LD_EXP 21
7203: PPUSH
7204: CALL_OW 301
7208: IFFALSE 7224
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7210: LD_EXP 18
7214: PPUSH
7215: LD_STRING DH-ibrahimdead-1
7217: PPUSH
7218: CALL_OW 88
// exit ;
7222: GO 7265
// end ; CenterNowOnUnits ( Ibrahim ) ;
7224: LD_EXP 21
7228: PPUSH
7229: CALL_OW 87
// DialogueOn ;
7233: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7237: LD_EXP 21
7241: PPUSH
7242: LD_STRING DI-ibrahimlives-1
7244: PPUSH
7245: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7249: LD_EXP 18
7253: PPUSH
7254: LD_STRING DH-Ibrahimlives-2
7256: PPUSH
7257: CALL_OW 88
// DialogueOff ;
7261: CALL_OW 7
// end ;
7265: LD_VAR 0 1
7269: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 ] [ Difficulty ] do
7270: LD_INT 11
7272: PPUSH
7273: LD_INT 22
7275: PUSH
7276: LD_INT 2
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PPUSH
7283: CALL_OW 70
7287: PUSH
7288: LD_OWVAR 1
7292: PUSH
7293: LD_INT 18900
7295: PUSH
7296: LD_INT 16800
7298: PUSH
7299: LD_INT 16800
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: PUSH
7307: LD_OWVAR 67
7311: ARRAY
7312: GREATEREQUAL
7313: OR
7314: IFFALSE 7721
7316: GO 7318
7318: DISABLE
// begin outerAreaAchived := true ;
7319: LD_ADDR_EXP 15
7323: PUSH
7324: LD_INT 1
7326: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7327: LD_INT 700
7329: PPUSH
7330: CALL_OW 67
// DialogueOn ;
7334: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7338: LD_EXP 26
7342: PPUSH
7343: LD_STRING DShar-radio-1
7345: PPUSH
7346: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7350: LD_EXP 26
7354: PPUSH
7355: LD_STRING DShar-radio-2
7357: PPUSH
7358: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7362: LD_EXP 18
7366: PPUSH
7367: LD_STRING DH-radio-2
7369: PPUSH
7370: CALL_OW 88
// DialogueOff ;
7374: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7378: LD_STRING Gaidar
7380: PPUSH
7381: CALL_OW 337
// if Difficulty < 3 then
7385: LD_OWVAR 67
7389: PUSH
7390: LD_INT 3
7392: LESS
7393: IFFALSE 7459
// begin DialogueOn ;
7395: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7399: LD_INT 11
7401: PPUSH
7402: LD_INT 14
7404: PPUSH
7405: LD_INT 2
7407: PPUSH
7408: LD_INT 6
7410: NEG
7411: PPUSH
7412: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7416: LD_INT 11
7418: PPUSH
7419: LD_INT 14
7421: PPUSH
7422: LD_INT 2
7424: PPUSH
7425: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7429: LD_INT 11
7431: PPUSH
7432: LD_INT 14
7434: PPUSH
7435: CALL_OW 84
// dwait ( 0 0$1 ) ;
7439: LD_INT 35
7441: PPUSH
7442: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7446: LD_EXP 18
7450: PPUSH
7451: CALL_OW 87
// DialogueOff ;
7455: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7459: LD_INT 1050
7461: PUSH
7462: LD_INT 350
7464: PPUSH
7465: LD_INT 525
7467: PPUSH
7468: CALL_OW 12
7472: PUSH
7473: LD_OWVAR 67
7477: MUL
7478: PLUS
7479: PPUSH
7480: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7484: LD_INT 35
7486: PPUSH
7487: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7491: LD_INT 2
7493: PPUSH
7494: LD_INT 1
7496: PPUSH
7497: CALL_OW 428
7501: PUSH
7502: LD_INT 0
7504: EQUAL
7505: IFFALSE 7484
// SetDir ( Gaidar , 2 ) ;
7507: LD_EXP 35
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7519: LD_EXP 35
7523: PPUSH
7524: LD_INT 2
7526: PPUSH
7527: LD_INT 1
7529: PPUSH
7530: LD_INT 0
7532: PPUSH
7533: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7537: LD_EXP 35
7541: PPUSH
7542: LD_INT 19
7544: PPUSH
7545: LD_INT 24
7547: PPUSH
7548: CALL_OW 111
// AddComWait ( Gaidar , 0 0$6 ) ;
7552: LD_EXP 35
7556: PPUSH
7557: LD_INT 210
7559: PPUSH
7560: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7564: LD_EXP 35
7568: PPUSH
7569: LD_INT 38
7571: PPUSH
7572: LD_INT 47
7574: PPUSH
7575: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7579: LD_EXP 35
7583: PPUSH
7584: LD_INT 32
7586: PPUSH
7587: LD_INT 59
7589: PPUSH
7590: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
7594: LD_EXP 35
7598: PPUSH
7599: LD_INT 350
7601: PPUSH
7602: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
7606: LD_EXP 35
7610: PPUSH
7611: LD_INT 62
7613: PPUSH
7614: LD_INT 116
7616: PPUSH
7617: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
7621: LD_EXP 35
7625: PPUSH
7626: LD_INT 92
7628: PPUSH
7629: LD_INT 177
7631: PPUSH
7632: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7636: LD_INT 35
7638: PPUSH
7639: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
7643: LD_EXP 35
7647: PPUSH
7648: CALL_OW 301
7652: PUSH
7653: LD_EXP 35
7657: PPUSH
7658: LD_INT 92
7660: PPUSH
7661: LD_INT 177
7663: PPUSH
7664: CALL_OW 307
7668: OR
7669: IFFALSE 7636
// if IsAt ( Gaidar , 92 , 177 ) then
7671: LD_EXP 35
7675: PPUSH
7676: LD_INT 92
7678: PPUSH
7679: LD_INT 177
7681: PPUSH
7682: CALL_OW 307
7686: IFFALSE 7699
// begin RemoveUnit ( Gaidar ) ;
7688: LD_EXP 35
7692: PPUSH
7693: CALL_OW 64
// exit ;
7697: GO 7721
// end ; gaidarKilled := true ;
7699: LD_ADDR_EXP 14
7703: PUSH
7704: LD_INT 1
7706: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
7707: LD_STRING GaidarKilled
7709: PPUSH
7710: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
7714: LD_STRING ACH_COMMISAR
7716: PPUSH
7717: CALL_OW 543
// end ;
7721: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
7722: LD_INT 2
7724: PPUSH
7725: LD_EXP 35
7729: PPUSH
7730: CALL_OW 292
7734: IFFALSE 7751
7736: GO 7738
7738: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
7739: LD_EXP 35
7743: PPUSH
7744: LD_STRING DT-objective-1
7746: PPUSH
7747: CALL_OW 88
7751: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
7752: LD_INT 22
7754: PUSH
7755: LD_INT 2
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: LD_INT 95
7767: PUSH
7768: LD_INT 5
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 95
7777: PUSH
7778: LD_INT 6
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 95
7787: PUSH
7788: LD_INT 7
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PPUSH
7805: CALL_OW 69
7809: IFFALSE 7846
7811: GO 7813
7813: DISABLE
// begin DialogueOn ;
7814: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
7818: LD_EXP 18
7822: PPUSH
7823: LD_STRING DH-outpost-last-1
7825: PPUSH
7826: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
7830: LD_EXP 34
7834: PPUSH
7835: LD_STRING DB-outpost-last-2
7837: PPUSH
7838: CALL_OW 94
// DialogueOff ;
7842: CALL_OW 7
// end ;
7846: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
7847: LD_INT 200
7849: PPUSH
7850: CALL_OW 256
7854: PUSH
7855: LD_INT 999
7857: LESS
7858: PUSH
7859: LD_INT 200
7861: PPUSH
7862: CALL_OW 255
7866: PUSH
7867: LD_INT 2
7869: EQUAL
7870: OR
7871: IFFALSE 8044
7873: GO 7875
7875: DISABLE
7876: LD_INT 0
7878: PPUSH
7879: PPUSH
// begin if not earlyEscape then
7880: LD_EXP 16
7884: NOT
7885: IFFALSE 7911
// begin SayRadio ( Burlak , DB-end-1 ) ;
7887: LD_EXP 34
7891: PPUSH
7892: LD_STRING DB-end-1
7894: PPUSH
7895: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
7899: LD_EXP 18
7903: PPUSH
7904: LD_STRING DH-end-2
7906: PPUSH
7907: CALL_OW 88
// end ; if tick <= 15 15$00 then
7911: LD_OWVAR 1
7915: PUSH
7916: LD_INT 31500
7918: LESSEQUAL
7919: IFFALSE 7928
// SetAchievement ( ACH_FIST ) ;
7921: LD_STRING ACH_FIST
7923: PPUSH
7924: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7928: LD_ADDR_VAR 0 2
7932: PUSH
7933: LD_INT 22
7935: PUSH
7936: LD_INT 3
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 3
7945: PUSH
7946: LD_INT 21
7948: PUSH
7949: LD_INT 3
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PPUSH
7964: CALL_OW 69
7968: ST_TO_ADDR
// if not tmp then
7969: LD_VAR 0 2
7973: NOT
7974: IFFALSE 7978
// exit ;
7976: GO 8044
// for i in tmp do
7978: LD_ADDR_VAR 0 1
7982: PUSH
7983: LD_VAR 0 2
7987: PUSH
7988: FOR_IN
7989: IFFALSE 8042
// begin SetTag ( i , tEscape ) ;
7991: LD_VAR 0 1
7995: PPUSH
7996: LD_EXP 17
8000: PPUSH
8001: CALL_OW 109
// if IsInUnit ( i ) then
8005: LD_VAR 0 1
8009: PPUSH
8010: CALL_OW 310
8014: IFFALSE 8025
// ComExitBuilding ( i ) ;
8016: LD_VAR 0 1
8020: PPUSH
8021: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8025: LD_VAR 0 1
8029: PPUSH
8030: LD_INT 92
8032: PPUSH
8033: LD_INT 177
8035: PPUSH
8036: CALL_OW 171
// end ;
8040: GO 7988
8042: POP
8043: POP
// end ;
8044: PPOPN 2
8046: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8047: LD_INT 4
8049: PPUSH
8050: LD_INT 22
8052: PUSH
8053: LD_INT 2
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PPUSH
8060: CALL_OW 70
8064: PUSH
8065: LD_EXP 15
8069: NOT
8070: AND
8071: PUSH
8072: LD_EXP 27
8076: PPUSH
8077: CALL_OW 302
8081: AND
8082: IFFALSE 8322
8084: GO 8086
8086: DISABLE
// begin DialogueOn ;
8087: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8091: LD_INT 111
8093: PPUSH
8094: LD_INT 54
8096: PPUSH
8097: LD_INT 2
8099: PPUSH
8100: LD_INT 16
8102: NEG
8103: PPUSH
8104: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8108: LD_INT 111
8110: PPUSH
8111: LD_INT 53
8113: PPUSH
8114: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8118: LD_INT 10
8120: PPUSH
8121: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8125: LD_EXP 27
8129: PPUSH
8130: LD_STRING DKs-Hannibal-1
8132: PPUSH
8133: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8137: LD_EXP 27
8141: PPUSH
8142: LD_STRING DKs-Hannibal-2
8144: PPUSH
8145: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8149: LD_EXP 27
8153: PPUSH
8154: LD_STRING DKs-Hannibal-3
8156: PPUSH
8157: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8161: LD_EXP 27
8165: PPUSH
8166: LD_STRING DKs-Hannibal-4
8168: PPUSH
8169: CALL_OW 88
// dwait ( 0 0$1 ) ;
8173: LD_INT 35
8175: PPUSH
8176: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8180: LD_INT 111
8182: PPUSH
8183: LD_INT 54
8185: PPUSH
8186: LD_INT 2
8188: PPUSH
8189: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8193: LD_INT 173
8195: PPUSH
8196: LD_INT 76
8198: PPUSH
8199: LD_INT 2
8201: PPUSH
8202: LD_INT 12
8204: NEG
8205: PPUSH
8206: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8210: LD_INT 173
8212: PPUSH
8213: LD_INT 76
8215: PPUSH
8216: LD_INT 2
8218: PPUSH
8219: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8223: LD_INT 173
8225: PPUSH
8226: LD_INT 76
8228: PPUSH
8229: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8233: LD_EXP 27
8237: PPUSH
8238: LD_STRING DKs-Hannibal-5
8240: PPUSH
8241: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8245: LD_EXP 22
8249: PUSH
8250: LD_INT 22
8252: PUSH
8253: LD_INT 2
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 34
8262: PUSH
8263: LD_INT 26
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 69
8278: NOT
8279: AND
8280: IFFALSE 8318
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8282: LD_EXP 22
8286: PPUSH
8287: LD_STRING DKam-Hannibal-a-6
8289: PPUSH
8290: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8294: LD_EXP 22
8298: PPUSH
8299: LD_STRING DKam-Hannibal-a-7
8301: PPUSH
8302: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8306: LD_EXP 19
8310: PPUSH
8311: LD_STRING DG-Hannibal-a-8
8313: PPUSH
8314: CALL_OW 88
// end ; DialogueOff ;
8318: CALL_OW 7
// end ;
8322: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8323: LD_INT 225
8325: PPUSH
8326: CALL_OW 302
8330: PUSH
8331: LD_INT 200
8333: PPUSH
8334: CALL_OW 302
8338: AND
8339: PUSH
8340: LD_INT 12
8342: PPUSH
8343: LD_INT 21
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PPUSH
8353: CALL_OW 70
8357: PUSH
8358: LD_INT 2
8360: GREATER
8361: AND
8362: PUSH
8363: LD_INT 13
8365: PPUSH
8366: LD_INT 22
8368: PUSH
8369: LD_INT 2
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PPUSH
8376: CALL_OW 70
8380: PUSH
8381: LD_INT 3
8383: GREATER
8384: AND
8385: IFFALSE 8398
8387: GO 8389
8389: DISABLE
// hannibalPath := true ;
8390: LD_ADDR_EXP 9
8394: PUSH
8395: LD_INT 1
8397: ST_TO_ADDR
8398: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8399: LD_EXP 9
8403: PUSH
8404: LD_INT 6
8406: PPUSH
8407: LD_INT 22
8409: PUSH
8410: LD_INT 2
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PPUSH
8417: CALL_OW 70
8421: AND
8422: IFFALSE 8767
8424: GO 8426
8426: DISABLE
8427: LD_INT 0
8429: PPUSH
8430: PPUSH
8431: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8432: LD_ADDR_VAR 0 2
8436: PUSH
8437: LD_INT 6
8439: PPUSH
8440: LD_INT 22
8442: PUSH
8443: LD_INT 2
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 70
8454: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8455: LD_ADDR_VAR 0 3
8459: PUSH
8460: LD_VAR 0 2
8464: PPUSH
8465: LD_INT 34
8467: PUSH
8468: LD_INT 26
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PPUSH
8475: CALL_OW 72
8479: PUSH
8480: LD_INT 0
8482: GREATER
8483: ST_TO_ADDR
// DialogueOn ;
8484: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8488: LD_EXP 18
8492: PPUSH
8493: LD_STRING DH-Cleverattack-1
8495: PPUSH
8496: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8500: LD_EXP 18
8504: PPUSH
8505: LD_STRING DH-Cleverattack-2
8507: PPUSH
8508: CALL_OW 88
// if hasFlameThrower then
8512: LD_VAR 0 3
8516: IFFALSE 8544
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8518: LD_EXP 34
8522: PPUSH
8523: LD_STRING DB-Cleverattack-3
8525: PPUSH
8526: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8530: LD_EXP 18
8534: PPUSH
8535: LD_STRING DH-Cleverattack-4
8537: PPUSH
8538: CALL_OW 88
// end else
8542: GO 8568
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
8544: LD_EXP 34
8548: PPUSH
8549: LD_STRING DB-Cleverattack-a-3
8551: PPUSH
8552: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
8556: LD_EXP 18
8560: PPUSH
8561: LD_STRING DH-Cleverattack-a-4
8563: PPUSH
8564: CALL_OW 88
// end ; DialogueOff ;
8568: CALL_OW 7
// if not hasFlameThrower then
8572: LD_VAR 0 3
8576: NOT
8577: IFFALSE 8581
// exit ;
8579: GO 8767
// earlyEscape := true ;
8581: LD_ADDR_EXP 16
8585: PUSH
8586: LD_INT 1
8588: ST_TO_ADDR
// wait ( 0 0$4 ) ;
8589: LD_INT 140
8591: PPUSH
8592: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
8596: LD_ADDR_VAR 0 2
8600: PUSH
8601: LD_INT 22
8603: PUSH
8604: LD_INT 3
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PUSH
8611: LD_INT 2
8613: PUSH
8614: LD_INT 25
8616: PUSH
8617: LD_INT 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 25
8626: PUSH
8627: LD_INT 2
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 25
8636: PUSH
8637: LD_INT 4
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PPUSH
8654: CALL_OW 69
8658: PUSH
8659: LD_EXP 21
8663: PUSH
8664: LD_EXP 36
8668: PUSH
8669: LD_EXP 35
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: LIST
8678: DIFF
8679: ST_TO_ADDR
// for i in tmp do
8680: LD_ADDR_VAR 0 1
8684: PUSH
8685: LD_VAR 0 2
8689: PUSH
8690: FOR_IN
8691: IFFALSE 8765
// begin if Prob ( 40 + 10 * Difficulty ) then
8693: LD_INT 40
8695: PUSH
8696: LD_INT 10
8698: PUSH
8699: LD_OWVAR 67
8703: MUL
8704: PLUS
8705: PPUSH
8706: CALL_OW 13
8710: IFFALSE 8714
// continue ;
8712: GO 8690
// SetTag ( i , tEscape ) ;
8714: LD_VAR 0 1
8718: PPUSH
8719: LD_EXP 17
8723: PPUSH
8724: CALL_OW 109
// if IsInUnit ( i ) then
8728: LD_VAR 0 1
8732: PPUSH
8733: CALL_OW 310
8737: IFFALSE 8748
// ComExitBuilding ( i ) ;
8739: LD_VAR 0 1
8743: PPUSH
8744: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8748: LD_VAR 0 1
8752: PPUSH
8753: LD_INT 92
8755: PPUSH
8756: LD_INT 177
8758: PPUSH
8759: CALL_OW 171
// end ;
8763: GO 8690
8765: POP
8766: POP
// end ;
8767: PPOPN 3
8769: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
8770: LD_INT 9
8772: PPUSH
8773: LD_INT 2
8775: PUSH
8776: LD_INT 22
8778: PUSH
8779: LD_INT 3
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 22
8788: PUSH
8789: LD_INT 6
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: PPUSH
8801: CALL_OW 70
8805: IFFALSE 8903
8807: GO 8809
8809: DISABLE
8810: LD_INT 0
8812: PPUSH
// begin enable ;
8813: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
8814: LD_ADDR_VAR 0 1
8818: PUSH
8819: LD_INT 9
8821: PPUSH
8822: LD_INT 2
8824: PUSH
8825: LD_INT 22
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 22
8837: PUSH
8838: LD_INT 6
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 70
8854: PUSH
8855: FOR_IN
8856: IFFALSE 8901
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
8858: LD_VAR 0 1
8862: PPUSH
8863: CALL_OW 110
8867: PUSH
8868: LD_EXP 17
8872: EQUAL
8873: PUSH
8874: LD_VAR 0 1
8878: PPUSH
8879: CALL_OW 255
8883: PUSH
8884: LD_INT 6
8886: EQUAL
8887: OR
8888: IFFALSE 8899
// RemoveUnit ( i ) ;
8890: LD_VAR 0 1
8894: PPUSH
8895: CALL_OW 64
8899: GO 8855
8901: POP
8902: POP
// end ;
8903: PPOPN 1
8905: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
8906: LD_EXP 23
8910: PUSH
8911: LD_EXP 23
8915: PPUSH
8916: CALL_OW 256
8920: PUSH
8921: LD_INT 3
8923: LESS
8924: AND
8925: IFFALSE 8971
8927: GO 8929
8929: DISABLE
// begin DialogueOn ;
8930: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
8934: LD_EXP 23
8938: PPUSH
8939: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
8943: LD_EXP 23
8947: PPUSH
8948: LD_STRING DK-Kkilled-1
8950: PPUSH
8951: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
8955: LD_EXP 18
8959: PPUSH
8960: LD_STRING DH-Kkilled-2
8962: PPUSH
8963: CALL_OW 88
// DialogueOff ;
8967: CALL_OW 7
// end ;
8971: END
// every 0 0$1 trigger kaiaKilledByRussian do
8972: LD_EXP 8
8976: IFFALSE 8993
8978: GO 8980
8980: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
8981: LD_EXP 18
8985: PPUSH
8986: LD_STRING DH-Kkilled-3
8988: PPUSH
8989: CALL_OW 88
8993: END
// every 0 0$1 trigger tick >= 22 22$00 do
8994: LD_OWVAR 1
8998: PUSH
8999: LD_INT 46200
9001: GREATEREQUAL
9002: IFFALSE 9039
9004: GO 9006
9006: DISABLE
// begin DialogueOn ;
9007: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9011: LD_EXP 26
9015: PPUSH
9016: LD_STRING DShar-slow-1
9018: PPUSH
9019: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9023: LD_EXP 26
9027: PPUSH
9028: LD_STRING DShar-slow-2
9030: PPUSH
9031: CALL_OW 94
// DialogueOff ;
9035: CALL_OW 7
// end ;
9039: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 ] [ Difficulty ] do
9040: LD_OWVAR 1
9044: PUSH
9045: LD_INT 84000
9047: PUSH
9048: LD_INT 75600
9050: PUSH
9051: LD_INT 67200
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: LD_OWVAR 67
9063: ARRAY
9064: GREATEREQUAL
9065: IFFALSE 9109
9067: GO 9069
9069: DISABLE
// begin DialogueOn ;
9070: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9074: LD_EXP 26
9078: PPUSH
9079: LD_STRING DShar-fail-1
9081: PPUSH
9082: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9086: LD_EXP 26
9090: PPUSH
9091: LD_STRING DShar-fail-2
9093: PPUSH
9094: CALL_OW 94
// DialogueOff ;
9098: CALL_OW 7
// YouLost ( Time ) ;
9102: LD_STRING Time
9104: PPUSH
9105: CALL_OW 104
// end ;
9109: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9110: LD_INT 22
9112: PUSH
9113: LD_INT 3
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 2
9122: PUSH
9123: LD_INT 30
9125: PUSH
9126: LD_INT 1
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 30
9135: PUSH
9136: LD_INT 0
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PPUSH
9152: CALL_OW 69
9156: PUSH
9157: LD_INT 0
9159: EQUAL
9160: IFFALSE 9651
9162: GO 9164
9164: DISABLE
9165: LD_INT 0
9167: PPUSH
// begin if ( tick + gameTime ) <= [ 75 75$00 , 70 70$00 , 65 65$00 ] [ Difficulty ] then
9168: LD_OWVAR 1
9172: PUSH
9173: LD_EXP 5
9177: PLUS
9178: PUSH
9179: LD_INT 157500
9181: PUSH
9182: LD_INT 147000
9184: PUSH
9185: LD_INT 136500
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: LIST
9192: PUSH
9193: LD_OWVAR 67
9197: ARRAY
9198: LESSEQUAL
9199: IFFALSE 9213
// AddMedal ( med1 , 1 ) else
9201: LD_STRING med1
9203: PPUSH
9204: LD_INT 1
9206: PPUSH
9207: CALL_OW 101
9211: GO 9224
// AddMedal ( med1 , - 1 ) ;
9213: LD_STRING med1
9215: PPUSH
9216: LD_INT 1
9218: NEG
9219: PPUSH
9220: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 ] [ Difficulty ] ) then
9224: LD_EXP 7
9228: PUSH
9229: LD_INT 3
9231: GREATEREQUAL
9232: PUSH
9233: LD_EXP 11
9237: MUL
9238: PUSH
9239: LD_EXP 9
9243: MUL
9244: PUSH
9245: LD_EXP 6
9249: PUSH
9250: LD_INT 6
9252: PUSH
9253: LD_INT 5
9255: PUSH
9256: LD_INT 4
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: PUSH
9264: LD_OWVAR 67
9268: ARRAY
9269: LESS
9270: MUL
9271: IFFALSE 9285
// AddMedal ( med2 , 1 ) else
9273: LD_STRING med2
9275: PPUSH
9276: LD_INT 1
9278: PPUSH
9279: CALL_OW 101
9283: GO 9296
// AddMedal ( med2 , - 1 ) ;
9285: LD_STRING med2
9287: PPUSH
9288: LD_INT 1
9290: NEG
9291: PPUSH
9292: CALL_OW 101
// if gaidarKilled then
9296: LD_EXP 14
9300: IFFALSE 9314
// AddMedal ( med3 , 1 ) else
9302: LD_STRING med3
9304: PPUSH
9305: LD_INT 1
9307: PPUSH
9308: CALL_OW 101
9312: GO 9325
// AddMedal ( med3 , - 1 ) ;
9314: LD_STRING med3
9316: PPUSH
9317: LD_INT 1
9319: NEG
9320: PPUSH
9321: CALL_OW 101
// GiveMedals ( MAIN ) ;
9325: LD_STRING MAIN
9327: PPUSH
9328: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9332: LD_INT 22
9334: PUSH
9335: LD_INT 2
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: LD_INT 3
9344: PUSH
9345: LD_INT 23
9347: PUSH
9348: LD_INT 0
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 69
9367: PPUSH
9368: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9372: LD_EXP 18
9376: PPUSH
9377: LD_STRING 04_2_Heike
9379: PPUSH
9380: CALL_OW 38
// if Aviradze then
9384: LD_EXP 28
9388: IFFALSE 9402
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9390: LD_EXP 28
9394: PPUSH
9395: LD_STRING 04_2_Aviradze
9397: PPUSH
9398: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9402: LD_EXP 21
9406: PUSH
9407: LD_EXP 21
9411: PPUSH
9412: CALL_OW 255
9416: PUSH
9417: LD_INT 2
9419: EQUAL
9420: AND
9421: IFFALSE 9451
// begin if ibrahimOnRuSide then
9423: LD_EXP 3
9427: IFFALSE 9439
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9429: LD_INT 1
9431: PPUSH
9432: LD_STRING 04_2_IbrahimJoined
9434: PPUSH
9435: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9439: LD_EXP 21
9443: PPUSH
9444: LD_STRING 04_2_Ibrahim
9446: PPUSH
9447: CALL_OW 38
// end ; if Kamil then
9451: LD_EXP 22
9455: IFFALSE 9469
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
9457: LD_EXP 22
9461: PPUSH
9462: LD_STRING 04_2_Kamil
9464: PPUSH
9465: CALL_OW 38
// if Sophia then
9469: LD_EXP 24
9473: IFFALSE 9487
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
9475: LD_EXP 24
9479: PPUSH
9480: LD_STRING 04_2_Sophia
9482: PPUSH
9483: CALL_OW 38
// if Kaia then
9487: LD_EXP 23
9491: IFFALSE 9505
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
9493: LD_EXP 23
9497: PPUSH
9498: LD_STRING 04_2_Kaia
9500: PPUSH
9501: CALL_OW 38
// if Givi then
9505: LD_EXP 19
9509: IFFALSE 9523
// SaveCharacters ( Givi , 04_2_Givi ) ;
9511: LD_EXP 19
9515: PPUSH
9516: LD_STRING 04_2_Givi
9518: PPUSH
9519: CALL_OW 38
// if Mike then
9523: LD_EXP 20
9527: IFFALSE 9541
// SaveCharacters ( Mike , 04_2_Mike ) ;
9529: LD_EXP 20
9533: PPUSH
9534: LD_STRING 04_2_Mike
9536: PPUSH
9537: CALL_OW 38
// if Markov then
9541: LD_EXP 25
9545: IFFALSE 9559
// SaveCharacters ( Markov , 04_2_Markov ) ;
9547: LD_EXP 25
9551: PPUSH
9552: LD_STRING 04_2_Markov
9554: PPUSH
9555: CALL_OW 38
// if Kurt then
9559: LD_EXP 27
9563: IFFALSE 9577
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
9565: LD_EXP 27
9569: PPUSH
9570: LD_STRING 04_2_Kurt
9572: PPUSH
9573: CALL_OW 38
// if heikeSecondSquad then
9577: LD_EXP 29
9581: IFFALSE 9595
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
9583: LD_EXP 29
9587: PPUSH
9588: LD_STRING 04_2_others
9590: PPUSH
9591: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
9595: LD_ADDR_VAR 0 1
9599: PUSH
9600: LD_INT 22
9602: PUSH
9603: LD_INT 2
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 23
9612: PUSH
9613: LD_INT 0
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PPUSH
9624: CALL_OW 69
9628: ST_TO_ADDR
// if tmp then
9629: LD_VAR 0 1
9633: IFFALSE 9647
// SaveCharacters ( tmp , 04_2_apes ) ;
9635: LD_VAR 0 1
9639: PPUSH
9640: LD_STRING 04_2_apes
9642: PPUSH
9643: CALL_OW 38
// YouWin ;
9647: CALL_OW 103
// end ; end_of_file
9651: PPOPN 1
9653: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
9654: LD_VAR 0 2
9658: PUSH
9659: LD_INT 100
9661: EQUAL
9662: IFFALSE 10611
// begin if not StreamModeActive then
9664: LD_EXP 43
9668: NOT
9669: IFFALSE 9679
// StreamModeActive := true ;
9671: LD_ADDR_EXP 43
9675: PUSH
9676: LD_INT 1
9678: ST_TO_ADDR
// if p3 = 0 then
9679: LD_VAR 0 3
9683: PUSH
9684: LD_INT 0
9686: EQUAL
9687: IFFALSE 9693
// InitStreamMode ;
9689: CALL 10769 0 0
// if p3 = 1 then
9693: LD_VAR 0 3
9697: PUSH
9698: LD_INT 1
9700: EQUAL
9701: IFFALSE 9711
// sRocket := true ;
9703: LD_ADDR_EXP 48
9707: PUSH
9708: LD_INT 1
9710: ST_TO_ADDR
// if p3 = 2 then
9711: LD_VAR 0 3
9715: PUSH
9716: LD_INT 2
9718: EQUAL
9719: IFFALSE 9729
// sSpeed := true ;
9721: LD_ADDR_EXP 47
9725: PUSH
9726: LD_INT 1
9728: ST_TO_ADDR
// if p3 = 3 then
9729: LD_VAR 0 3
9733: PUSH
9734: LD_INT 3
9736: EQUAL
9737: IFFALSE 9747
// sEngine := true ;
9739: LD_ADDR_EXP 49
9743: PUSH
9744: LD_INT 1
9746: ST_TO_ADDR
// if p3 = 4 then
9747: LD_VAR 0 3
9751: PUSH
9752: LD_INT 4
9754: EQUAL
9755: IFFALSE 9765
// sSpec := true ;
9757: LD_ADDR_EXP 46
9761: PUSH
9762: LD_INT 1
9764: ST_TO_ADDR
// if p3 = 5 then
9765: LD_VAR 0 3
9769: PUSH
9770: LD_INT 5
9772: EQUAL
9773: IFFALSE 9783
// sLevel := true ;
9775: LD_ADDR_EXP 50
9779: PUSH
9780: LD_INT 1
9782: ST_TO_ADDR
// if p3 = 6 then
9783: LD_VAR 0 3
9787: PUSH
9788: LD_INT 6
9790: EQUAL
9791: IFFALSE 9801
// sArmoury := true ;
9793: LD_ADDR_EXP 51
9797: PUSH
9798: LD_INT 1
9800: ST_TO_ADDR
// if p3 = 7 then
9801: LD_VAR 0 3
9805: PUSH
9806: LD_INT 7
9808: EQUAL
9809: IFFALSE 9819
// sRadar := true ;
9811: LD_ADDR_EXP 52
9815: PUSH
9816: LD_INT 1
9818: ST_TO_ADDR
// if p3 = 8 then
9819: LD_VAR 0 3
9823: PUSH
9824: LD_INT 8
9826: EQUAL
9827: IFFALSE 9837
// sBunker := true ;
9829: LD_ADDR_EXP 53
9833: PUSH
9834: LD_INT 1
9836: ST_TO_ADDR
// if p3 = 9 then
9837: LD_VAR 0 3
9841: PUSH
9842: LD_INT 9
9844: EQUAL
9845: IFFALSE 9855
// sHack := true ;
9847: LD_ADDR_EXP 54
9851: PUSH
9852: LD_INT 1
9854: ST_TO_ADDR
// if p3 = 10 then
9855: LD_VAR 0 3
9859: PUSH
9860: LD_INT 10
9862: EQUAL
9863: IFFALSE 9873
// sFire := true ;
9865: LD_ADDR_EXP 55
9869: PUSH
9870: LD_INT 1
9872: ST_TO_ADDR
// if p3 = 11 then
9873: LD_VAR 0 3
9877: PUSH
9878: LD_INT 11
9880: EQUAL
9881: IFFALSE 9891
// sRefresh := true ;
9883: LD_ADDR_EXP 56
9887: PUSH
9888: LD_INT 1
9890: ST_TO_ADDR
// if p3 = 12 then
9891: LD_VAR 0 3
9895: PUSH
9896: LD_INT 12
9898: EQUAL
9899: IFFALSE 9909
// sExp := true ;
9901: LD_ADDR_EXP 57
9905: PUSH
9906: LD_INT 1
9908: ST_TO_ADDR
// if p3 = 13 then
9909: LD_VAR 0 3
9913: PUSH
9914: LD_INT 13
9916: EQUAL
9917: IFFALSE 9927
// sDepot := true ;
9919: LD_ADDR_EXP 58
9923: PUSH
9924: LD_INT 1
9926: ST_TO_ADDR
// if p3 = 14 then
9927: LD_VAR 0 3
9931: PUSH
9932: LD_INT 14
9934: EQUAL
9935: IFFALSE 9945
// sFlag := true ;
9937: LD_ADDR_EXP 59
9941: PUSH
9942: LD_INT 1
9944: ST_TO_ADDR
// if p3 = 15 then
9945: LD_VAR 0 3
9949: PUSH
9950: LD_INT 15
9952: EQUAL
9953: IFFALSE 9963
// sKamikadze := true ;
9955: LD_ADDR_EXP 67
9959: PUSH
9960: LD_INT 1
9962: ST_TO_ADDR
// if p3 = 16 then
9963: LD_VAR 0 3
9967: PUSH
9968: LD_INT 16
9970: EQUAL
9971: IFFALSE 9981
// sTroll := true ;
9973: LD_ADDR_EXP 68
9977: PUSH
9978: LD_INT 1
9980: ST_TO_ADDR
// if p3 = 17 then
9981: LD_VAR 0 3
9985: PUSH
9986: LD_INT 17
9988: EQUAL
9989: IFFALSE 9999
// sSlow := true ;
9991: LD_ADDR_EXP 69
9995: PUSH
9996: LD_INT 1
9998: ST_TO_ADDR
// if p3 = 18 then
9999: LD_VAR 0 3
10003: PUSH
10004: LD_INT 18
10006: EQUAL
10007: IFFALSE 10017
// sLack := true ;
10009: LD_ADDR_EXP 70
10013: PUSH
10014: LD_INT 1
10016: ST_TO_ADDR
// if p3 = 19 then
10017: LD_VAR 0 3
10021: PUSH
10022: LD_INT 19
10024: EQUAL
10025: IFFALSE 10035
// sTank := true ;
10027: LD_ADDR_EXP 72
10031: PUSH
10032: LD_INT 1
10034: ST_TO_ADDR
// if p3 = 20 then
10035: LD_VAR 0 3
10039: PUSH
10040: LD_INT 20
10042: EQUAL
10043: IFFALSE 10053
// sRemote := true ;
10045: LD_ADDR_EXP 73
10049: PUSH
10050: LD_INT 1
10052: ST_TO_ADDR
// if p3 = 21 then
10053: LD_VAR 0 3
10057: PUSH
10058: LD_INT 21
10060: EQUAL
10061: IFFALSE 10071
// sPowell := true ;
10063: LD_ADDR_EXP 74
10067: PUSH
10068: LD_INT 1
10070: ST_TO_ADDR
// if p3 = 22 then
10071: LD_VAR 0 3
10075: PUSH
10076: LD_INT 22
10078: EQUAL
10079: IFFALSE 10089
// sTeleport := true ;
10081: LD_ADDR_EXP 77
10085: PUSH
10086: LD_INT 1
10088: ST_TO_ADDR
// if p3 = 23 then
10089: LD_VAR 0 3
10093: PUSH
10094: LD_INT 23
10096: EQUAL
10097: IFFALSE 10107
// sOilTower := true ;
10099: LD_ADDR_EXP 79
10103: PUSH
10104: LD_INT 1
10106: ST_TO_ADDR
// if p3 = 24 then
10107: LD_VAR 0 3
10111: PUSH
10112: LD_INT 24
10114: EQUAL
10115: IFFALSE 10125
// sShovel := true ;
10117: LD_ADDR_EXP 80
10121: PUSH
10122: LD_INT 1
10124: ST_TO_ADDR
// if p3 = 25 then
10125: LD_VAR 0 3
10129: PUSH
10130: LD_INT 25
10132: EQUAL
10133: IFFALSE 10143
// sSheik := true ;
10135: LD_ADDR_EXP 81
10139: PUSH
10140: LD_INT 1
10142: ST_TO_ADDR
// if p3 = 26 then
10143: LD_VAR 0 3
10147: PUSH
10148: LD_INT 26
10150: EQUAL
10151: IFFALSE 10161
// sEarthquake := true ;
10153: LD_ADDR_EXP 83
10157: PUSH
10158: LD_INT 1
10160: ST_TO_ADDR
// if p3 = 27 then
10161: LD_VAR 0 3
10165: PUSH
10166: LD_INT 27
10168: EQUAL
10169: IFFALSE 10179
// sAI := true ;
10171: LD_ADDR_EXP 84
10175: PUSH
10176: LD_INT 1
10178: ST_TO_ADDR
// if p3 = 28 then
10179: LD_VAR 0 3
10183: PUSH
10184: LD_INT 28
10186: EQUAL
10187: IFFALSE 10197
// sCargo := true ;
10189: LD_ADDR_EXP 87
10193: PUSH
10194: LD_INT 1
10196: ST_TO_ADDR
// if p3 = 29 then
10197: LD_VAR 0 3
10201: PUSH
10202: LD_INT 29
10204: EQUAL
10205: IFFALSE 10215
// sDLaser := true ;
10207: LD_ADDR_EXP 88
10211: PUSH
10212: LD_INT 1
10214: ST_TO_ADDR
// if p3 = 30 then
10215: LD_VAR 0 3
10219: PUSH
10220: LD_INT 30
10222: EQUAL
10223: IFFALSE 10233
// sExchange := true ;
10225: LD_ADDR_EXP 89
10229: PUSH
10230: LD_INT 1
10232: ST_TO_ADDR
// if p3 = 31 then
10233: LD_VAR 0 3
10237: PUSH
10238: LD_INT 31
10240: EQUAL
10241: IFFALSE 10251
// sFac := true ;
10243: LD_ADDR_EXP 90
10247: PUSH
10248: LD_INT 1
10250: ST_TO_ADDR
// if p3 = 32 then
10251: LD_VAR 0 3
10255: PUSH
10256: LD_INT 32
10258: EQUAL
10259: IFFALSE 10269
// sPower := true ;
10261: LD_ADDR_EXP 91
10265: PUSH
10266: LD_INT 1
10268: ST_TO_ADDR
// if p3 = 33 then
10269: LD_VAR 0 3
10273: PUSH
10274: LD_INT 33
10276: EQUAL
10277: IFFALSE 10287
// sRandom := true ;
10279: LD_ADDR_EXP 92
10283: PUSH
10284: LD_INT 1
10286: ST_TO_ADDR
// if p3 = 34 then
10287: LD_VAR 0 3
10291: PUSH
10292: LD_INT 34
10294: EQUAL
10295: IFFALSE 10305
// sShield := true ;
10297: LD_ADDR_EXP 93
10301: PUSH
10302: LD_INT 1
10304: ST_TO_ADDR
// if p3 = 35 then
10305: LD_VAR 0 3
10309: PUSH
10310: LD_INT 35
10312: EQUAL
10313: IFFALSE 10323
// sTime := true ;
10315: LD_ADDR_EXP 94
10319: PUSH
10320: LD_INT 1
10322: ST_TO_ADDR
// if p3 = 36 then
10323: LD_VAR 0 3
10327: PUSH
10328: LD_INT 36
10330: EQUAL
10331: IFFALSE 10341
// sTools := true ;
10333: LD_ADDR_EXP 95
10337: PUSH
10338: LD_INT 1
10340: ST_TO_ADDR
// if p3 = 101 then
10341: LD_VAR 0 3
10345: PUSH
10346: LD_INT 101
10348: EQUAL
10349: IFFALSE 10359
// sSold := true ;
10351: LD_ADDR_EXP 60
10355: PUSH
10356: LD_INT 1
10358: ST_TO_ADDR
// if p3 = 102 then
10359: LD_VAR 0 3
10363: PUSH
10364: LD_INT 102
10366: EQUAL
10367: IFFALSE 10377
// sDiff := true ;
10369: LD_ADDR_EXP 61
10373: PUSH
10374: LD_INT 1
10376: ST_TO_ADDR
// if p3 = 103 then
10377: LD_VAR 0 3
10381: PUSH
10382: LD_INT 103
10384: EQUAL
10385: IFFALSE 10395
// sFog := true ;
10387: LD_ADDR_EXP 64
10391: PUSH
10392: LD_INT 1
10394: ST_TO_ADDR
// if p3 = 104 then
10395: LD_VAR 0 3
10399: PUSH
10400: LD_INT 104
10402: EQUAL
10403: IFFALSE 10413
// sReset := true ;
10405: LD_ADDR_EXP 65
10409: PUSH
10410: LD_INT 1
10412: ST_TO_ADDR
// if p3 = 105 then
10413: LD_VAR 0 3
10417: PUSH
10418: LD_INT 105
10420: EQUAL
10421: IFFALSE 10431
// sSun := true ;
10423: LD_ADDR_EXP 66
10427: PUSH
10428: LD_INT 1
10430: ST_TO_ADDR
// if p3 = 106 then
10431: LD_VAR 0 3
10435: PUSH
10436: LD_INT 106
10438: EQUAL
10439: IFFALSE 10449
// sTiger := true ;
10441: LD_ADDR_EXP 62
10445: PUSH
10446: LD_INT 1
10448: ST_TO_ADDR
// if p3 = 107 then
10449: LD_VAR 0 3
10453: PUSH
10454: LD_INT 107
10456: EQUAL
10457: IFFALSE 10467
// sBomb := true ;
10459: LD_ADDR_EXP 63
10463: PUSH
10464: LD_INT 1
10466: ST_TO_ADDR
// if p3 = 108 then
10467: LD_VAR 0 3
10471: PUSH
10472: LD_INT 108
10474: EQUAL
10475: IFFALSE 10485
// sWound := true ;
10477: LD_ADDR_EXP 71
10481: PUSH
10482: LD_INT 1
10484: ST_TO_ADDR
// if p3 = 109 then
10485: LD_VAR 0 3
10489: PUSH
10490: LD_INT 109
10492: EQUAL
10493: IFFALSE 10503
// sBetray := true ;
10495: LD_ADDR_EXP 75
10499: PUSH
10500: LD_INT 1
10502: ST_TO_ADDR
// if p3 = 110 then
10503: LD_VAR 0 3
10507: PUSH
10508: LD_INT 110
10510: EQUAL
10511: IFFALSE 10521
// sContamin := true ;
10513: LD_ADDR_EXP 76
10517: PUSH
10518: LD_INT 1
10520: ST_TO_ADDR
// if p3 = 111 then
10521: LD_VAR 0 3
10525: PUSH
10526: LD_INT 111
10528: EQUAL
10529: IFFALSE 10539
// sOil := true ;
10531: LD_ADDR_EXP 78
10535: PUSH
10536: LD_INT 1
10538: ST_TO_ADDR
// if p3 = 112 then
10539: LD_VAR 0 3
10543: PUSH
10544: LD_INT 112
10546: EQUAL
10547: IFFALSE 10557
// sStu := true ;
10549: LD_ADDR_EXP 82
10553: PUSH
10554: LD_INT 1
10556: ST_TO_ADDR
// if p3 = 113 then
10557: LD_VAR 0 3
10561: PUSH
10562: LD_INT 113
10564: EQUAL
10565: IFFALSE 10575
// sBazooka := true ;
10567: LD_ADDR_EXP 85
10571: PUSH
10572: LD_INT 1
10574: ST_TO_ADDR
// if p3 = 114 then
10575: LD_VAR 0 3
10579: PUSH
10580: LD_INT 114
10582: EQUAL
10583: IFFALSE 10593
// sMortar := true ;
10585: LD_ADDR_EXP 86
10589: PUSH
10590: LD_INT 1
10592: ST_TO_ADDR
// if p3 = 115 then
10593: LD_VAR 0 3
10597: PUSH
10598: LD_INT 115
10600: EQUAL
10601: IFFALSE 10611
// sRanger := true ;
10603: LD_ADDR_EXP 96
10607: PUSH
10608: LD_INT 1
10610: ST_TO_ADDR
// end ; if p2 = 101 then
10611: LD_VAR 0 2
10615: PUSH
10616: LD_INT 101
10618: EQUAL
10619: IFFALSE 10747
// begin case p3 of 1 :
10621: LD_VAR 0 3
10625: PUSH
10626: LD_INT 1
10628: DOUBLE
10629: EQUAL
10630: IFTRUE 10634
10632: GO 10641
10634: POP
// hHackUnlimitedResources ; 2 :
10635: CALL 21782 0 0
10639: GO 10747
10641: LD_INT 2
10643: DOUBLE
10644: EQUAL
10645: IFTRUE 10649
10647: GO 10656
10649: POP
// hHackSetLevel10 ; 3 :
10650: CALL 21915 0 0
10654: GO 10747
10656: LD_INT 3
10658: DOUBLE
10659: EQUAL
10660: IFTRUE 10664
10662: GO 10671
10664: POP
// hHackSetLevel10YourUnits ; 4 :
10665: CALL 22000 0 0
10669: GO 10747
10671: LD_INT 4
10673: DOUBLE
10674: EQUAL
10675: IFTRUE 10679
10677: GO 10686
10679: POP
// hHackInvincible ; 5 :
10680: CALL 22448 0 0
10684: GO 10747
10686: LD_INT 5
10688: DOUBLE
10689: EQUAL
10690: IFTRUE 10694
10692: GO 10701
10694: POP
// hHackInvisible ; 6 :
10695: CALL 22559 0 0
10699: GO 10747
10701: LD_INT 6
10703: DOUBLE
10704: EQUAL
10705: IFTRUE 10709
10707: GO 10716
10709: POP
// hHackChangeYourSide ; 7 :
10710: CALL 22616 0 0
10714: GO 10747
10716: LD_INT 7
10718: DOUBLE
10719: EQUAL
10720: IFTRUE 10724
10722: GO 10731
10724: POP
// hHackChangeUnitSide ; 8 :
10725: CALL 22658 0 0
10729: GO 10747
10731: LD_INT 8
10733: DOUBLE
10734: EQUAL
10735: IFTRUE 10739
10737: GO 10746
10739: POP
// hHackFog ; end ;
10740: CALL 22759 0 0
10744: GO 10747
10746: POP
// end ; end ;
10747: PPOPN 6
10749: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
10750: GO 10752
10752: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10753: LD_STRING initStreamRollete();
10755: PPUSH
10756: CALL_OW 559
// InitStreamMode ;
10760: CALL 10769 0 0
// DefineStreamItems ( ) ;
10764: CALL 11209 0 0
// end ;
10768: END
// function InitStreamMode ; begin
10769: LD_INT 0
10771: PPUSH
// streamModeActive := false ;
10772: LD_ADDR_EXP 43
10776: PUSH
10777: LD_INT 0
10779: ST_TO_ADDR
// normalCounter := 36 ;
10780: LD_ADDR_EXP 44
10784: PUSH
10785: LD_INT 36
10787: ST_TO_ADDR
// hardcoreCounter := 16 ;
10788: LD_ADDR_EXP 45
10792: PUSH
10793: LD_INT 16
10795: ST_TO_ADDR
// sRocket := false ;
10796: LD_ADDR_EXP 48
10800: PUSH
10801: LD_INT 0
10803: ST_TO_ADDR
// sSpeed := false ;
10804: LD_ADDR_EXP 47
10808: PUSH
10809: LD_INT 0
10811: ST_TO_ADDR
// sEngine := false ;
10812: LD_ADDR_EXP 49
10816: PUSH
10817: LD_INT 0
10819: ST_TO_ADDR
// sSpec := false ;
10820: LD_ADDR_EXP 46
10824: PUSH
10825: LD_INT 0
10827: ST_TO_ADDR
// sLevel := false ;
10828: LD_ADDR_EXP 50
10832: PUSH
10833: LD_INT 0
10835: ST_TO_ADDR
// sArmoury := false ;
10836: LD_ADDR_EXP 51
10840: PUSH
10841: LD_INT 0
10843: ST_TO_ADDR
// sRadar := false ;
10844: LD_ADDR_EXP 52
10848: PUSH
10849: LD_INT 0
10851: ST_TO_ADDR
// sBunker := false ;
10852: LD_ADDR_EXP 53
10856: PUSH
10857: LD_INT 0
10859: ST_TO_ADDR
// sHack := false ;
10860: LD_ADDR_EXP 54
10864: PUSH
10865: LD_INT 0
10867: ST_TO_ADDR
// sFire := false ;
10868: LD_ADDR_EXP 55
10872: PUSH
10873: LD_INT 0
10875: ST_TO_ADDR
// sRefresh := false ;
10876: LD_ADDR_EXP 56
10880: PUSH
10881: LD_INT 0
10883: ST_TO_ADDR
// sExp := false ;
10884: LD_ADDR_EXP 57
10888: PUSH
10889: LD_INT 0
10891: ST_TO_ADDR
// sDepot := false ;
10892: LD_ADDR_EXP 58
10896: PUSH
10897: LD_INT 0
10899: ST_TO_ADDR
// sFlag := false ;
10900: LD_ADDR_EXP 59
10904: PUSH
10905: LD_INT 0
10907: ST_TO_ADDR
// sKamikadze := false ;
10908: LD_ADDR_EXP 67
10912: PUSH
10913: LD_INT 0
10915: ST_TO_ADDR
// sTroll := false ;
10916: LD_ADDR_EXP 68
10920: PUSH
10921: LD_INT 0
10923: ST_TO_ADDR
// sSlow := false ;
10924: LD_ADDR_EXP 69
10928: PUSH
10929: LD_INT 0
10931: ST_TO_ADDR
// sLack := false ;
10932: LD_ADDR_EXP 70
10936: PUSH
10937: LD_INT 0
10939: ST_TO_ADDR
// sTank := false ;
10940: LD_ADDR_EXP 72
10944: PUSH
10945: LD_INT 0
10947: ST_TO_ADDR
// sRemote := false ;
10948: LD_ADDR_EXP 73
10952: PUSH
10953: LD_INT 0
10955: ST_TO_ADDR
// sPowell := false ;
10956: LD_ADDR_EXP 74
10960: PUSH
10961: LD_INT 0
10963: ST_TO_ADDR
// sTeleport := false ;
10964: LD_ADDR_EXP 77
10968: PUSH
10969: LD_INT 0
10971: ST_TO_ADDR
// sOilTower := false ;
10972: LD_ADDR_EXP 79
10976: PUSH
10977: LD_INT 0
10979: ST_TO_ADDR
// sShovel := false ;
10980: LD_ADDR_EXP 80
10984: PUSH
10985: LD_INT 0
10987: ST_TO_ADDR
// sSheik := false ;
10988: LD_ADDR_EXP 81
10992: PUSH
10993: LD_INT 0
10995: ST_TO_ADDR
// sEarthquake := false ;
10996: LD_ADDR_EXP 83
11000: PUSH
11001: LD_INT 0
11003: ST_TO_ADDR
// sAI := false ;
11004: LD_ADDR_EXP 84
11008: PUSH
11009: LD_INT 0
11011: ST_TO_ADDR
// sCargo := false ;
11012: LD_ADDR_EXP 87
11016: PUSH
11017: LD_INT 0
11019: ST_TO_ADDR
// sDLaser := false ;
11020: LD_ADDR_EXP 88
11024: PUSH
11025: LD_INT 0
11027: ST_TO_ADDR
// sExchange := false ;
11028: LD_ADDR_EXP 89
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// sFac := false ;
11036: LD_ADDR_EXP 90
11040: PUSH
11041: LD_INT 0
11043: ST_TO_ADDR
// sPower := false ;
11044: LD_ADDR_EXP 91
11048: PUSH
11049: LD_INT 0
11051: ST_TO_ADDR
// sRandom := false ;
11052: LD_ADDR_EXP 92
11056: PUSH
11057: LD_INT 0
11059: ST_TO_ADDR
// sShield := false ;
11060: LD_ADDR_EXP 93
11064: PUSH
11065: LD_INT 0
11067: ST_TO_ADDR
// sTime := false ;
11068: LD_ADDR_EXP 94
11072: PUSH
11073: LD_INT 0
11075: ST_TO_ADDR
// sTools := false ;
11076: LD_ADDR_EXP 95
11080: PUSH
11081: LD_INT 0
11083: ST_TO_ADDR
// sSold := false ;
11084: LD_ADDR_EXP 60
11088: PUSH
11089: LD_INT 0
11091: ST_TO_ADDR
// sDiff := false ;
11092: LD_ADDR_EXP 61
11096: PUSH
11097: LD_INT 0
11099: ST_TO_ADDR
// sFog := false ;
11100: LD_ADDR_EXP 64
11104: PUSH
11105: LD_INT 0
11107: ST_TO_ADDR
// sReset := false ;
11108: LD_ADDR_EXP 65
11112: PUSH
11113: LD_INT 0
11115: ST_TO_ADDR
// sSun := false ;
11116: LD_ADDR_EXP 66
11120: PUSH
11121: LD_INT 0
11123: ST_TO_ADDR
// sTiger := false ;
11124: LD_ADDR_EXP 62
11128: PUSH
11129: LD_INT 0
11131: ST_TO_ADDR
// sBomb := false ;
11132: LD_ADDR_EXP 63
11136: PUSH
11137: LD_INT 0
11139: ST_TO_ADDR
// sWound := false ;
11140: LD_ADDR_EXP 71
11144: PUSH
11145: LD_INT 0
11147: ST_TO_ADDR
// sBetray := false ;
11148: LD_ADDR_EXP 75
11152: PUSH
11153: LD_INT 0
11155: ST_TO_ADDR
// sContamin := false ;
11156: LD_ADDR_EXP 76
11160: PUSH
11161: LD_INT 0
11163: ST_TO_ADDR
// sOil := false ;
11164: LD_ADDR_EXP 78
11168: PUSH
11169: LD_INT 0
11171: ST_TO_ADDR
// sStu := false ;
11172: LD_ADDR_EXP 82
11176: PUSH
11177: LD_INT 0
11179: ST_TO_ADDR
// sBazooka := false ;
11180: LD_ADDR_EXP 85
11184: PUSH
11185: LD_INT 0
11187: ST_TO_ADDR
// sMortar := false ;
11188: LD_ADDR_EXP 86
11192: PUSH
11193: LD_INT 0
11195: ST_TO_ADDR
// sRanger := false ;
11196: LD_ADDR_EXP 96
11200: PUSH
11201: LD_INT 0
11203: ST_TO_ADDR
// end ;
11204: LD_VAR 0 1
11208: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11209: LD_INT 0
11211: PPUSH
11212: PPUSH
11213: PPUSH
11214: PPUSH
11215: PPUSH
// result := [ ] ;
11216: LD_ADDR_VAR 0 1
11220: PUSH
11221: EMPTY
11222: ST_TO_ADDR
// if campaign_id = 1 then
11223: LD_OWVAR 69
11227: PUSH
11228: LD_INT 1
11230: EQUAL
11231: IFFALSE 14169
// begin case mission_number of 1 :
11233: LD_OWVAR 70
11237: PUSH
11238: LD_INT 1
11240: DOUBLE
11241: EQUAL
11242: IFTRUE 11246
11244: GO 11310
11246: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11247: LD_ADDR_VAR 0 1
11251: PUSH
11252: LD_INT 2
11254: PUSH
11255: LD_INT 4
11257: PUSH
11258: LD_INT 11
11260: PUSH
11261: LD_INT 12
11263: PUSH
11264: LD_INT 15
11266: PUSH
11267: LD_INT 16
11269: PUSH
11270: LD_INT 22
11272: PUSH
11273: LD_INT 23
11275: PUSH
11276: LD_INT 26
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: PUSH
11290: LD_INT 101
11292: PUSH
11293: LD_INT 102
11295: PUSH
11296: LD_INT 106
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: ST_TO_ADDR
11308: GO 14167
11310: LD_INT 2
11312: DOUBLE
11313: EQUAL
11314: IFTRUE 11318
11316: GO 11390
11318: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11319: LD_ADDR_VAR 0 1
11323: PUSH
11324: LD_INT 2
11326: PUSH
11327: LD_INT 4
11329: PUSH
11330: LD_INT 11
11332: PUSH
11333: LD_INT 12
11335: PUSH
11336: LD_INT 15
11338: PUSH
11339: LD_INT 16
11341: PUSH
11342: LD_INT 22
11344: PUSH
11345: LD_INT 23
11347: PUSH
11348: LD_INT 26
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 101
11364: PUSH
11365: LD_INT 102
11367: PUSH
11368: LD_INT 105
11370: PUSH
11371: LD_INT 106
11373: PUSH
11374: LD_INT 108
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: ST_TO_ADDR
11388: GO 14167
11390: LD_INT 3
11392: DOUBLE
11393: EQUAL
11394: IFTRUE 11398
11396: GO 11474
11398: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11399: LD_ADDR_VAR 0 1
11403: PUSH
11404: LD_INT 2
11406: PUSH
11407: LD_INT 4
11409: PUSH
11410: LD_INT 5
11412: PUSH
11413: LD_INT 11
11415: PUSH
11416: LD_INT 12
11418: PUSH
11419: LD_INT 15
11421: PUSH
11422: LD_INT 16
11424: PUSH
11425: LD_INT 22
11427: PUSH
11428: LD_INT 26
11430: PUSH
11431: LD_INT 36
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 101
11448: PUSH
11449: LD_INT 102
11451: PUSH
11452: LD_INT 105
11454: PUSH
11455: LD_INT 106
11457: PUSH
11458: LD_INT 108
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: ST_TO_ADDR
11472: GO 14167
11474: LD_INT 4
11476: DOUBLE
11477: EQUAL
11478: IFTRUE 11482
11480: GO 11566
11482: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11483: LD_ADDR_VAR 0 1
11487: PUSH
11488: LD_INT 2
11490: PUSH
11491: LD_INT 4
11493: PUSH
11494: LD_INT 5
11496: PUSH
11497: LD_INT 8
11499: PUSH
11500: LD_INT 11
11502: PUSH
11503: LD_INT 12
11505: PUSH
11506: LD_INT 15
11508: PUSH
11509: LD_INT 16
11511: PUSH
11512: LD_INT 22
11514: PUSH
11515: LD_INT 23
11517: PUSH
11518: LD_INT 26
11520: PUSH
11521: LD_INT 36
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: PUSH
11538: LD_INT 101
11540: PUSH
11541: LD_INT 102
11543: PUSH
11544: LD_INT 105
11546: PUSH
11547: LD_INT 106
11549: PUSH
11550: LD_INT 108
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: ST_TO_ADDR
11564: GO 14167
11566: LD_INT 5
11568: DOUBLE
11569: EQUAL
11570: IFTRUE 11574
11572: GO 11674
11574: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11575: LD_ADDR_VAR 0 1
11579: PUSH
11580: LD_INT 2
11582: PUSH
11583: LD_INT 4
11585: PUSH
11586: LD_INT 5
11588: PUSH
11589: LD_INT 6
11591: PUSH
11592: LD_INT 8
11594: PUSH
11595: LD_INT 11
11597: PUSH
11598: LD_INT 12
11600: PUSH
11601: LD_INT 15
11603: PUSH
11604: LD_INT 16
11606: PUSH
11607: LD_INT 22
11609: PUSH
11610: LD_INT 23
11612: PUSH
11613: LD_INT 25
11615: PUSH
11616: LD_INT 26
11618: PUSH
11619: LD_INT 36
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: PUSH
11638: LD_INT 101
11640: PUSH
11641: LD_INT 102
11643: PUSH
11644: LD_INT 105
11646: PUSH
11647: LD_INT 106
11649: PUSH
11650: LD_INT 108
11652: PUSH
11653: LD_INT 109
11655: PUSH
11656: LD_INT 112
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: ST_TO_ADDR
11672: GO 14167
11674: LD_INT 6
11676: DOUBLE
11677: EQUAL
11678: IFTRUE 11682
11680: GO 11802
11682: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11683: LD_ADDR_VAR 0 1
11687: PUSH
11688: LD_INT 2
11690: PUSH
11691: LD_INT 4
11693: PUSH
11694: LD_INT 5
11696: PUSH
11697: LD_INT 6
11699: PUSH
11700: LD_INT 8
11702: PUSH
11703: LD_INT 11
11705: PUSH
11706: LD_INT 12
11708: PUSH
11709: LD_INT 15
11711: PUSH
11712: LD_INT 16
11714: PUSH
11715: LD_INT 20
11717: PUSH
11718: LD_INT 21
11720: PUSH
11721: LD_INT 22
11723: PUSH
11724: LD_INT 23
11726: PUSH
11727: LD_INT 25
11729: PUSH
11730: LD_INT 26
11732: PUSH
11733: LD_INT 30
11735: PUSH
11736: LD_INT 31
11738: PUSH
11739: LD_INT 32
11741: PUSH
11742: LD_INT 36
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 101
11768: PUSH
11769: LD_INT 102
11771: PUSH
11772: LD_INT 105
11774: PUSH
11775: LD_INT 106
11777: PUSH
11778: LD_INT 108
11780: PUSH
11781: LD_INT 109
11783: PUSH
11784: LD_INT 112
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: ST_TO_ADDR
11800: GO 14167
11802: LD_INT 7
11804: DOUBLE
11805: EQUAL
11806: IFTRUE 11810
11808: GO 11910
11810: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
11811: LD_ADDR_VAR 0 1
11815: PUSH
11816: LD_INT 2
11818: PUSH
11819: LD_INT 4
11821: PUSH
11822: LD_INT 5
11824: PUSH
11825: LD_INT 7
11827: PUSH
11828: LD_INT 11
11830: PUSH
11831: LD_INT 12
11833: PUSH
11834: LD_INT 15
11836: PUSH
11837: LD_INT 16
11839: PUSH
11840: LD_INT 20
11842: PUSH
11843: LD_INT 21
11845: PUSH
11846: LD_INT 22
11848: PUSH
11849: LD_INT 23
11851: PUSH
11852: LD_INT 25
11854: PUSH
11855: LD_INT 26
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: PUSH
11874: LD_INT 101
11876: PUSH
11877: LD_INT 102
11879: PUSH
11880: LD_INT 103
11882: PUSH
11883: LD_INT 105
11885: PUSH
11886: LD_INT 106
11888: PUSH
11889: LD_INT 108
11891: PUSH
11892: LD_INT 112
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: ST_TO_ADDR
11908: GO 14167
11910: LD_INT 8
11912: DOUBLE
11913: EQUAL
11914: IFTRUE 11918
11916: GO 12046
11918: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11919: LD_ADDR_VAR 0 1
11923: PUSH
11924: LD_INT 2
11926: PUSH
11927: LD_INT 4
11929: PUSH
11930: LD_INT 5
11932: PUSH
11933: LD_INT 6
11935: PUSH
11936: LD_INT 7
11938: PUSH
11939: LD_INT 8
11941: PUSH
11942: LD_INT 11
11944: PUSH
11945: LD_INT 12
11947: PUSH
11948: LD_INT 15
11950: PUSH
11951: LD_INT 16
11953: PUSH
11954: LD_INT 20
11956: PUSH
11957: LD_INT 21
11959: PUSH
11960: LD_INT 22
11962: PUSH
11963: LD_INT 23
11965: PUSH
11966: LD_INT 25
11968: PUSH
11969: LD_INT 26
11971: PUSH
11972: LD_INT 30
11974: PUSH
11975: LD_INT 31
11977: PUSH
11978: LD_INT 32
11980: PUSH
11981: LD_INT 36
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 101
12008: PUSH
12009: LD_INT 102
12011: PUSH
12012: LD_INT 103
12014: PUSH
12015: LD_INT 105
12017: PUSH
12018: LD_INT 106
12020: PUSH
12021: LD_INT 108
12023: PUSH
12024: LD_INT 109
12026: PUSH
12027: LD_INT 112
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: ST_TO_ADDR
12044: GO 14167
12046: LD_INT 9
12048: DOUBLE
12049: EQUAL
12050: IFTRUE 12054
12052: GO 12190
12054: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12055: LD_ADDR_VAR 0 1
12059: PUSH
12060: LD_INT 2
12062: PUSH
12063: LD_INT 4
12065: PUSH
12066: LD_INT 5
12068: PUSH
12069: LD_INT 6
12071: PUSH
12072: LD_INT 7
12074: PUSH
12075: LD_INT 8
12077: PUSH
12078: LD_INT 11
12080: PUSH
12081: LD_INT 12
12083: PUSH
12084: LD_INT 15
12086: PUSH
12087: LD_INT 16
12089: PUSH
12090: LD_INT 20
12092: PUSH
12093: LD_INT 21
12095: PUSH
12096: LD_INT 22
12098: PUSH
12099: LD_INT 23
12101: PUSH
12102: LD_INT 25
12104: PUSH
12105: LD_INT 26
12107: PUSH
12108: LD_INT 28
12110: PUSH
12111: LD_INT 30
12113: PUSH
12114: LD_INT 31
12116: PUSH
12117: LD_INT 32
12119: PUSH
12120: LD_INT 36
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 101
12148: PUSH
12149: LD_INT 102
12151: PUSH
12152: LD_INT 103
12154: PUSH
12155: LD_INT 105
12157: PUSH
12158: LD_INT 106
12160: PUSH
12161: LD_INT 108
12163: PUSH
12164: LD_INT 109
12166: PUSH
12167: LD_INT 112
12169: PUSH
12170: LD_INT 114
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: ST_TO_ADDR
12188: GO 14167
12190: LD_INT 10
12192: DOUBLE
12193: EQUAL
12194: IFTRUE 12198
12196: GO 12382
12198: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12199: LD_ADDR_VAR 0 1
12203: PUSH
12204: LD_INT 2
12206: PUSH
12207: LD_INT 4
12209: PUSH
12210: LD_INT 5
12212: PUSH
12213: LD_INT 6
12215: PUSH
12216: LD_INT 7
12218: PUSH
12219: LD_INT 8
12221: PUSH
12222: LD_INT 9
12224: PUSH
12225: LD_INT 10
12227: PUSH
12228: LD_INT 11
12230: PUSH
12231: LD_INT 12
12233: PUSH
12234: LD_INT 13
12236: PUSH
12237: LD_INT 14
12239: PUSH
12240: LD_INT 15
12242: PUSH
12243: LD_INT 16
12245: PUSH
12246: LD_INT 17
12248: PUSH
12249: LD_INT 18
12251: PUSH
12252: LD_INT 19
12254: PUSH
12255: LD_INT 20
12257: PUSH
12258: LD_INT 21
12260: PUSH
12261: LD_INT 22
12263: PUSH
12264: LD_INT 23
12266: PUSH
12267: LD_INT 24
12269: PUSH
12270: LD_INT 25
12272: PUSH
12273: LD_INT 26
12275: PUSH
12276: LD_INT 28
12278: PUSH
12279: LD_INT 30
12281: PUSH
12282: LD_INT 31
12284: PUSH
12285: LD_INT 32
12287: PUSH
12288: LD_INT 36
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 101
12324: PUSH
12325: LD_INT 102
12327: PUSH
12328: LD_INT 103
12330: PUSH
12331: LD_INT 104
12333: PUSH
12334: LD_INT 105
12336: PUSH
12337: LD_INT 106
12339: PUSH
12340: LD_INT 107
12342: PUSH
12343: LD_INT 108
12345: PUSH
12346: LD_INT 109
12348: PUSH
12349: LD_INT 110
12351: PUSH
12352: LD_INT 111
12354: PUSH
12355: LD_INT 112
12357: PUSH
12358: LD_INT 114
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: ST_TO_ADDR
12380: GO 14167
12382: LD_INT 11
12384: DOUBLE
12385: EQUAL
12386: IFTRUE 12390
12388: GO 12582
12390: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12391: LD_ADDR_VAR 0 1
12395: PUSH
12396: LD_INT 2
12398: PUSH
12399: LD_INT 3
12401: PUSH
12402: LD_INT 4
12404: PUSH
12405: LD_INT 5
12407: PUSH
12408: LD_INT 6
12410: PUSH
12411: LD_INT 7
12413: PUSH
12414: LD_INT 8
12416: PUSH
12417: LD_INT 9
12419: PUSH
12420: LD_INT 10
12422: PUSH
12423: LD_INT 11
12425: PUSH
12426: LD_INT 12
12428: PUSH
12429: LD_INT 13
12431: PUSH
12432: LD_INT 14
12434: PUSH
12435: LD_INT 15
12437: PUSH
12438: LD_INT 16
12440: PUSH
12441: LD_INT 17
12443: PUSH
12444: LD_INT 18
12446: PUSH
12447: LD_INT 19
12449: PUSH
12450: LD_INT 20
12452: PUSH
12453: LD_INT 21
12455: PUSH
12456: LD_INT 22
12458: PUSH
12459: LD_INT 23
12461: PUSH
12462: LD_INT 24
12464: PUSH
12465: LD_INT 25
12467: PUSH
12468: LD_INT 26
12470: PUSH
12471: LD_INT 28
12473: PUSH
12474: LD_INT 30
12476: PUSH
12477: LD_INT 31
12479: PUSH
12480: LD_INT 32
12482: PUSH
12483: LD_INT 34
12485: PUSH
12486: LD_INT 36
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 101
12524: PUSH
12525: LD_INT 102
12527: PUSH
12528: LD_INT 103
12530: PUSH
12531: LD_INT 104
12533: PUSH
12534: LD_INT 105
12536: PUSH
12537: LD_INT 106
12539: PUSH
12540: LD_INT 107
12542: PUSH
12543: LD_INT 108
12545: PUSH
12546: LD_INT 109
12548: PUSH
12549: LD_INT 110
12551: PUSH
12552: LD_INT 111
12554: PUSH
12555: LD_INT 112
12557: PUSH
12558: LD_INT 114
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: ST_TO_ADDR
12580: GO 14167
12582: LD_INT 12
12584: DOUBLE
12585: EQUAL
12586: IFTRUE 12590
12588: GO 12798
12590: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12591: LD_ADDR_VAR 0 1
12595: PUSH
12596: LD_INT 1
12598: PUSH
12599: LD_INT 2
12601: PUSH
12602: LD_INT 3
12604: PUSH
12605: LD_INT 4
12607: PUSH
12608: LD_INT 5
12610: PUSH
12611: LD_INT 6
12613: PUSH
12614: LD_INT 7
12616: PUSH
12617: LD_INT 8
12619: PUSH
12620: LD_INT 9
12622: PUSH
12623: LD_INT 10
12625: PUSH
12626: LD_INT 11
12628: PUSH
12629: LD_INT 12
12631: PUSH
12632: LD_INT 13
12634: PUSH
12635: LD_INT 14
12637: PUSH
12638: LD_INT 15
12640: PUSH
12641: LD_INT 16
12643: PUSH
12644: LD_INT 17
12646: PUSH
12647: LD_INT 18
12649: PUSH
12650: LD_INT 19
12652: PUSH
12653: LD_INT 20
12655: PUSH
12656: LD_INT 21
12658: PUSH
12659: LD_INT 22
12661: PUSH
12662: LD_INT 23
12664: PUSH
12665: LD_INT 24
12667: PUSH
12668: LD_INT 25
12670: PUSH
12671: LD_INT 26
12673: PUSH
12674: LD_INT 27
12676: PUSH
12677: LD_INT 28
12679: PUSH
12680: LD_INT 30
12682: PUSH
12683: LD_INT 31
12685: PUSH
12686: LD_INT 32
12688: PUSH
12689: LD_INT 33
12691: PUSH
12692: LD_INT 34
12694: PUSH
12695: LD_INT 36
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: PUSH
12734: LD_INT 101
12736: PUSH
12737: LD_INT 102
12739: PUSH
12740: LD_INT 103
12742: PUSH
12743: LD_INT 104
12745: PUSH
12746: LD_INT 105
12748: PUSH
12749: LD_INT 106
12751: PUSH
12752: LD_INT 107
12754: PUSH
12755: LD_INT 108
12757: PUSH
12758: LD_INT 109
12760: PUSH
12761: LD_INT 110
12763: PUSH
12764: LD_INT 111
12766: PUSH
12767: LD_INT 112
12769: PUSH
12770: LD_INT 113
12772: PUSH
12773: LD_INT 114
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: ST_TO_ADDR
12796: GO 14167
12798: LD_INT 13
12800: DOUBLE
12801: EQUAL
12802: IFTRUE 12806
12804: GO 13002
12806: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
12807: LD_ADDR_VAR 0 1
12811: PUSH
12812: LD_INT 1
12814: PUSH
12815: LD_INT 2
12817: PUSH
12818: LD_INT 3
12820: PUSH
12821: LD_INT 4
12823: PUSH
12824: LD_INT 5
12826: PUSH
12827: LD_INT 8
12829: PUSH
12830: LD_INT 9
12832: PUSH
12833: LD_INT 10
12835: PUSH
12836: LD_INT 11
12838: PUSH
12839: LD_INT 12
12841: PUSH
12842: LD_INT 14
12844: PUSH
12845: LD_INT 15
12847: PUSH
12848: LD_INT 16
12850: PUSH
12851: LD_INT 17
12853: PUSH
12854: LD_INT 18
12856: PUSH
12857: LD_INT 19
12859: PUSH
12860: LD_INT 20
12862: PUSH
12863: LD_INT 21
12865: PUSH
12866: LD_INT 22
12868: PUSH
12869: LD_INT 23
12871: PUSH
12872: LD_INT 24
12874: PUSH
12875: LD_INT 25
12877: PUSH
12878: LD_INT 26
12880: PUSH
12881: LD_INT 27
12883: PUSH
12884: LD_INT 28
12886: PUSH
12887: LD_INT 30
12889: PUSH
12890: LD_INT 31
12892: PUSH
12893: LD_INT 32
12895: PUSH
12896: LD_INT 33
12898: PUSH
12899: LD_INT 34
12901: PUSH
12902: LD_INT 36
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: PUSH
12938: LD_INT 101
12940: PUSH
12941: LD_INT 102
12943: PUSH
12944: LD_INT 103
12946: PUSH
12947: LD_INT 104
12949: PUSH
12950: LD_INT 105
12952: PUSH
12953: LD_INT 106
12955: PUSH
12956: LD_INT 107
12958: PUSH
12959: LD_INT 108
12961: PUSH
12962: LD_INT 109
12964: PUSH
12965: LD_INT 110
12967: PUSH
12968: LD_INT 111
12970: PUSH
12971: LD_INT 112
12973: PUSH
12974: LD_INT 113
12976: PUSH
12977: LD_INT 114
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: ST_TO_ADDR
13000: GO 14167
13002: LD_INT 14
13004: DOUBLE
13005: EQUAL
13006: IFTRUE 13010
13008: GO 13222
13010: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13011: LD_ADDR_VAR 0 1
13015: PUSH
13016: LD_INT 1
13018: PUSH
13019: LD_INT 2
13021: PUSH
13022: LD_INT 3
13024: PUSH
13025: LD_INT 4
13027: PUSH
13028: LD_INT 5
13030: PUSH
13031: LD_INT 6
13033: PUSH
13034: LD_INT 7
13036: PUSH
13037: LD_INT 8
13039: PUSH
13040: LD_INT 9
13042: PUSH
13043: LD_INT 10
13045: PUSH
13046: LD_INT 11
13048: PUSH
13049: LD_INT 12
13051: PUSH
13052: LD_INT 13
13054: PUSH
13055: LD_INT 14
13057: PUSH
13058: LD_INT 15
13060: PUSH
13061: LD_INT 16
13063: PUSH
13064: LD_INT 17
13066: PUSH
13067: LD_INT 18
13069: PUSH
13070: LD_INT 19
13072: PUSH
13073: LD_INT 20
13075: PUSH
13076: LD_INT 21
13078: PUSH
13079: LD_INT 22
13081: PUSH
13082: LD_INT 23
13084: PUSH
13085: LD_INT 24
13087: PUSH
13088: LD_INT 25
13090: PUSH
13091: LD_INT 26
13093: PUSH
13094: LD_INT 27
13096: PUSH
13097: LD_INT 28
13099: PUSH
13100: LD_INT 29
13102: PUSH
13103: LD_INT 30
13105: PUSH
13106: LD_INT 31
13108: PUSH
13109: LD_INT 32
13111: PUSH
13112: LD_INT 33
13114: PUSH
13115: LD_INT 34
13117: PUSH
13118: LD_INT 36
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 101
13160: PUSH
13161: LD_INT 102
13163: PUSH
13164: LD_INT 103
13166: PUSH
13167: LD_INT 104
13169: PUSH
13170: LD_INT 105
13172: PUSH
13173: LD_INT 106
13175: PUSH
13176: LD_INT 107
13178: PUSH
13179: LD_INT 108
13181: PUSH
13182: LD_INT 109
13184: PUSH
13185: LD_INT 110
13187: PUSH
13188: LD_INT 111
13190: PUSH
13191: LD_INT 112
13193: PUSH
13194: LD_INT 113
13196: PUSH
13197: LD_INT 114
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: ST_TO_ADDR
13220: GO 14167
13222: LD_INT 15
13224: DOUBLE
13225: EQUAL
13226: IFTRUE 13230
13228: GO 13442
13230: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13231: LD_ADDR_VAR 0 1
13235: PUSH
13236: LD_INT 1
13238: PUSH
13239: LD_INT 2
13241: PUSH
13242: LD_INT 3
13244: PUSH
13245: LD_INT 4
13247: PUSH
13248: LD_INT 5
13250: PUSH
13251: LD_INT 6
13253: PUSH
13254: LD_INT 7
13256: PUSH
13257: LD_INT 8
13259: PUSH
13260: LD_INT 9
13262: PUSH
13263: LD_INT 10
13265: PUSH
13266: LD_INT 11
13268: PUSH
13269: LD_INT 12
13271: PUSH
13272: LD_INT 13
13274: PUSH
13275: LD_INT 14
13277: PUSH
13278: LD_INT 15
13280: PUSH
13281: LD_INT 16
13283: PUSH
13284: LD_INT 17
13286: PUSH
13287: LD_INT 18
13289: PUSH
13290: LD_INT 19
13292: PUSH
13293: LD_INT 20
13295: PUSH
13296: LD_INT 21
13298: PUSH
13299: LD_INT 22
13301: PUSH
13302: LD_INT 23
13304: PUSH
13305: LD_INT 24
13307: PUSH
13308: LD_INT 25
13310: PUSH
13311: LD_INT 26
13313: PUSH
13314: LD_INT 27
13316: PUSH
13317: LD_INT 28
13319: PUSH
13320: LD_INT 29
13322: PUSH
13323: LD_INT 30
13325: PUSH
13326: LD_INT 31
13328: PUSH
13329: LD_INT 32
13331: PUSH
13332: LD_INT 33
13334: PUSH
13335: LD_INT 34
13337: PUSH
13338: LD_INT 36
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 101
13380: PUSH
13381: LD_INT 102
13383: PUSH
13384: LD_INT 103
13386: PUSH
13387: LD_INT 104
13389: PUSH
13390: LD_INT 105
13392: PUSH
13393: LD_INT 106
13395: PUSH
13396: LD_INT 107
13398: PUSH
13399: LD_INT 108
13401: PUSH
13402: LD_INT 109
13404: PUSH
13405: LD_INT 110
13407: PUSH
13408: LD_INT 111
13410: PUSH
13411: LD_INT 112
13413: PUSH
13414: LD_INT 113
13416: PUSH
13417: LD_INT 114
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: ST_TO_ADDR
13440: GO 14167
13442: LD_INT 16
13444: DOUBLE
13445: EQUAL
13446: IFTRUE 13450
13448: GO 13574
13450: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13451: LD_ADDR_VAR 0 1
13455: PUSH
13456: LD_INT 2
13458: PUSH
13459: LD_INT 4
13461: PUSH
13462: LD_INT 5
13464: PUSH
13465: LD_INT 7
13467: PUSH
13468: LD_INT 11
13470: PUSH
13471: LD_INT 12
13473: PUSH
13474: LD_INT 15
13476: PUSH
13477: LD_INT 16
13479: PUSH
13480: LD_INT 20
13482: PUSH
13483: LD_INT 21
13485: PUSH
13486: LD_INT 22
13488: PUSH
13489: LD_INT 23
13491: PUSH
13492: LD_INT 25
13494: PUSH
13495: LD_INT 26
13497: PUSH
13498: LD_INT 30
13500: PUSH
13501: LD_INT 31
13503: PUSH
13504: LD_INT 32
13506: PUSH
13507: LD_INT 33
13509: PUSH
13510: LD_INT 34
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 101
13536: PUSH
13537: LD_INT 102
13539: PUSH
13540: LD_INT 103
13542: PUSH
13543: LD_INT 106
13545: PUSH
13546: LD_INT 108
13548: PUSH
13549: LD_INT 112
13551: PUSH
13552: LD_INT 113
13554: PUSH
13555: LD_INT 114
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: ST_TO_ADDR
13572: GO 14167
13574: LD_INT 17
13576: DOUBLE
13577: EQUAL
13578: IFTRUE 13582
13580: GO 13794
13582: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13583: LD_ADDR_VAR 0 1
13587: PUSH
13588: LD_INT 1
13590: PUSH
13591: LD_INT 2
13593: PUSH
13594: LD_INT 3
13596: PUSH
13597: LD_INT 4
13599: PUSH
13600: LD_INT 5
13602: PUSH
13603: LD_INT 6
13605: PUSH
13606: LD_INT 7
13608: PUSH
13609: LD_INT 8
13611: PUSH
13612: LD_INT 9
13614: PUSH
13615: LD_INT 10
13617: PUSH
13618: LD_INT 11
13620: PUSH
13621: LD_INT 12
13623: PUSH
13624: LD_INT 13
13626: PUSH
13627: LD_INT 14
13629: PUSH
13630: LD_INT 15
13632: PUSH
13633: LD_INT 16
13635: PUSH
13636: LD_INT 17
13638: PUSH
13639: LD_INT 18
13641: PUSH
13642: LD_INT 19
13644: PUSH
13645: LD_INT 20
13647: PUSH
13648: LD_INT 21
13650: PUSH
13651: LD_INT 22
13653: PUSH
13654: LD_INT 23
13656: PUSH
13657: LD_INT 24
13659: PUSH
13660: LD_INT 25
13662: PUSH
13663: LD_INT 26
13665: PUSH
13666: LD_INT 27
13668: PUSH
13669: LD_INT 28
13671: PUSH
13672: LD_INT 29
13674: PUSH
13675: LD_INT 30
13677: PUSH
13678: LD_INT 31
13680: PUSH
13681: LD_INT 32
13683: PUSH
13684: LD_INT 33
13686: PUSH
13687: LD_INT 34
13689: PUSH
13690: LD_INT 36
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 101
13732: PUSH
13733: LD_INT 102
13735: PUSH
13736: LD_INT 103
13738: PUSH
13739: LD_INT 104
13741: PUSH
13742: LD_INT 105
13744: PUSH
13745: LD_INT 106
13747: PUSH
13748: LD_INT 107
13750: PUSH
13751: LD_INT 108
13753: PUSH
13754: LD_INT 109
13756: PUSH
13757: LD_INT 110
13759: PUSH
13760: LD_INT 111
13762: PUSH
13763: LD_INT 112
13765: PUSH
13766: LD_INT 113
13768: PUSH
13769: LD_INT 114
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: ST_TO_ADDR
13792: GO 14167
13794: LD_INT 18
13796: DOUBLE
13797: EQUAL
13798: IFTRUE 13802
13800: GO 13938
13802: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
13803: LD_ADDR_VAR 0 1
13807: PUSH
13808: LD_INT 2
13810: PUSH
13811: LD_INT 4
13813: PUSH
13814: LD_INT 5
13816: PUSH
13817: LD_INT 7
13819: PUSH
13820: LD_INT 11
13822: PUSH
13823: LD_INT 12
13825: PUSH
13826: LD_INT 15
13828: PUSH
13829: LD_INT 16
13831: PUSH
13832: LD_INT 20
13834: PUSH
13835: LD_INT 21
13837: PUSH
13838: LD_INT 22
13840: PUSH
13841: LD_INT 23
13843: PUSH
13844: LD_INT 25
13846: PUSH
13847: LD_INT 26
13849: PUSH
13850: LD_INT 30
13852: PUSH
13853: LD_INT 31
13855: PUSH
13856: LD_INT 32
13858: PUSH
13859: LD_INT 33
13861: PUSH
13862: LD_INT 34
13864: PUSH
13865: LD_INT 35
13867: PUSH
13868: LD_INT 36
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 101
13896: PUSH
13897: LD_INT 102
13899: PUSH
13900: LD_INT 103
13902: PUSH
13903: LD_INT 106
13905: PUSH
13906: LD_INT 108
13908: PUSH
13909: LD_INT 112
13911: PUSH
13912: LD_INT 113
13914: PUSH
13915: LD_INT 114
13917: PUSH
13918: LD_INT 115
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: ST_TO_ADDR
13936: GO 14167
13938: LD_INT 19
13940: DOUBLE
13941: EQUAL
13942: IFTRUE 13946
13944: GO 14166
13946: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13947: LD_ADDR_VAR 0 1
13951: PUSH
13952: LD_INT 1
13954: PUSH
13955: LD_INT 2
13957: PUSH
13958: LD_INT 3
13960: PUSH
13961: LD_INT 4
13963: PUSH
13964: LD_INT 5
13966: PUSH
13967: LD_INT 6
13969: PUSH
13970: LD_INT 7
13972: PUSH
13973: LD_INT 8
13975: PUSH
13976: LD_INT 9
13978: PUSH
13979: LD_INT 10
13981: PUSH
13982: LD_INT 11
13984: PUSH
13985: LD_INT 12
13987: PUSH
13988: LD_INT 13
13990: PUSH
13991: LD_INT 14
13993: PUSH
13994: LD_INT 15
13996: PUSH
13997: LD_INT 16
13999: PUSH
14000: LD_INT 17
14002: PUSH
14003: LD_INT 18
14005: PUSH
14006: LD_INT 19
14008: PUSH
14009: LD_INT 20
14011: PUSH
14012: LD_INT 21
14014: PUSH
14015: LD_INT 22
14017: PUSH
14018: LD_INT 23
14020: PUSH
14021: LD_INT 24
14023: PUSH
14024: LD_INT 25
14026: PUSH
14027: LD_INT 26
14029: PUSH
14030: LD_INT 27
14032: PUSH
14033: LD_INT 28
14035: PUSH
14036: LD_INT 29
14038: PUSH
14039: LD_INT 30
14041: PUSH
14042: LD_INT 31
14044: PUSH
14045: LD_INT 32
14047: PUSH
14048: LD_INT 33
14050: PUSH
14051: LD_INT 34
14053: PUSH
14054: LD_INT 35
14056: PUSH
14057: LD_INT 36
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 101
14100: PUSH
14101: LD_INT 102
14103: PUSH
14104: LD_INT 103
14106: PUSH
14107: LD_INT 104
14109: PUSH
14110: LD_INT 105
14112: PUSH
14113: LD_INT 106
14115: PUSH
14116: LD_INT 107
14118: PUSH
14119: LD_INT 108
14121: PUSH
14122: LD_INT 109
14124: PUSH
14125: LD_INT 110
14127: PUSH
14128: LD_INT 111
14130: PUSH
14131: LD_INT 112
14133: PUSH
14134: LD_INT 113
14136: PUSH
14137: LD_INT 114
14139: PUSH
14140: LD_INT 115
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: ST_TO_ADDR
14164: GO 14167
14166: POP
// end else
14167: GO 14386
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14169: LD_ADDR_VAR 0 1
14173: PUSH
14174: LD_INT 1
14176: PUSH
14177: LD_INT 2
14179: PUSH
14180: LD_INT 3
14182: PUSH
14183: LD_INT 4
14185: PUSH
14186: LD_INT 5
14188: PUSH
14189: LD_INT 6
14191: PUSH
14192: LD_INT 7
14194: PUSH
14195: LD_INT 8
14197: PUSH
14198: LD_INT 9
14200: PUSH
14201: LD_INT 10
14203: PUSH
14204: LD_INT 11
14206: PUSH
14207: LD_INT 12
14209: PUSH
14210: LD_INT 13
14212: PUSH
14213: LD_INT 14
14215: PUSH
14216: LD_INT 15
14218: PUSH
14219: LD_INT 16
14221: PUSH
14222: LD_INT 17
14224: PUSH
14225: LD_INT 18
14227: PUSH
14228: LD_INT 19
14230: PUSH
14231: LD_INT 20
14233: PUSH
14234: LD_INT 21
14236: PUSH
14237: LD_INT 22
14239: PUSH
14240: LD_INT 23
14242: PUSH
14243: LD_INT 24
14245: PUSH
14246: LD_INT 25
14248: PUSH
14249: LD_INT 26
14251: PUSH
14252: LD_INT 27
14254: PUSH
14255: LD_INT 28
14257: PUSH
14258: LD_INT 29
14260: PUSH
14261: LD_INT 30
14263: PUSH
14264: LD_INT 31
14266: PUSH
14267: LD_INT 32
14269: PUSH
14270: LD_INT 33
14272: PUSH
14273: LD_INT 34
14275: PUSH
14276: LD_INT 35
14278: PUSH
14279: LD_INT 36
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 101
14322: PUSH
14323: LD_INT 102
14325: PUSH
14326: LD_INT 103
14328: PUSH
14329: LD_INT 104
14331: PUSH
14332: LD_INT 105
14334: PUSH
14335: LD_INT 106
14337: PUSH
14338: LD_INT 107
14340: PUSH
14341: LD_INT 108
14343: PUSH
14344: LD_INT 109
14346: PUSH
14347: LD_INT 110
14349: PUSH
14350: LD_INT 111
14352: PUSH
14353: LD_INT 112
14355: PUSH
14356: LD_INT 113
14358: PUSH
14359: LD_INT 114
14361: PUSH
14362: LD_INT 115
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: ST_TO_ADDR
// if result then
14386: LD_VAR 0 1
14390: IFFALSE 14679
// begin normal :=  ;
14392: LD_ADDR_VAR 0 3
14396: PUSH
14397: LD_STRING 
14399: ST_TO_ADDR
// hardcore :=  ;
14400: LD_ADDR_VAR 0 4
14404: PUSH
14405: LD_STRING 
14407: ST_TO_ADDR
// for i = 1 to normalCounter do
14408: LD_ADDR_VAR 0 5
14412: PUSH
14413: DOUBLE
14414: LD_INT 1
14416: DEC
14417: ST_TO_ADDR
14418: LD_EXP 44
14422: PUSH
14423: FOR_TO
14424: IFFALSE 14525
// begin tmp := 0 ;
14426: LD_ADDR_VAR 0 2
14430: PUSH
14431: LD_STRING 0
14433: ST_TO_ADDR
// if result [ 1 ] then
14434: LD_VAR 0 1
14438: PUSH
14439: LD_INT 1
14441: ARRAY
14442: IFFALSE 14507
// if result [ 1 ] [ 1 ] = i then
14444: LD_VAR 0 1
14448: PUSH
14449: LD_INT 1
14451: ARRAY
14452: PUSH
14453: LD_INT 1
14455: ARRAY
14456: PUSH
14457: LD_VAR 0 5
14461: EQUAL
14462: IFFALSE 14507
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14464: LD_ADDR_VAR 0 1
14468: PUSH
14469: LD_VAR 0 1
14473: PPUSH
14474: LD_INT 1
14476: PPUSH
14477: LD_VAR 0 1
14481: PUSH
14482: LD_INT 1
14484: ARRAY
14485: PPUSH
14486: LD_INT 1
14488: PPUSH
14489: CALL_OW 3
14493: PPUSH
14494: CALL_OW 1
14498: ST_TO_ADDR
// tmp := 1 ;
14499: LD_ADDR_VAR 0 2
14503: PUSH
14504: LD_STRING 1
14506: ST_TO_ADDR
// end ; normal := normal & tmp ;
14507: LD_ADDR_VAR 0 3
14511: PUSH
14512: LD_VAR 0 3
14516: PUSH
14517: LD_VAR 0 2
14521: STR
14522: ST_TO_ADDR
// end ;
14523: GO 14423
14525: POP
14526: POP
// for i = 1 to hardcoreCounter do
14527: LD_ADDR_VAR 0 5
14531: PUSH
14532: DOUBLE
14533: LD_INT 1
14535: DEC
14536: ST_TO_ADDR
14537: LD_EXP 45
14541: PUSH
14542: FOR_TO
14543: IFFALSE 14648
// begin tmp := 0 ;
14545: LD_ADDR_VAR 0 2
14549: PUSH
14550: LD_STRING 0
14552: ST_TO_ADDR
// if result [ 2 ] then
14553: LD_VAR 0 1
14557: PUSH
14558: LD_INT 2
14560: ARRAY
14561: IFFALSE 14630
// if result [ 2 ] [ 1 ] = 100 + i then
14563: LD_VAR 0 1
14567: PUSH
14568: LD_INT 2
14570: ARRAY
14571: PUSH
14572: LD_INT 1
14574: ARRAY
14575: PUSH
14576: LD_INT 100
14578: PUSH
14579: LD_VAR 0 5
14583: PLUS
14584: EQUAL
14585: IFFALSE 14630
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14587: LD_ADDR_VAR 0 1
14591: PUSH
14592: LD_VAR 0 1
14596: PPUSH
14597: LD_INT 2
14599: PPUSH
14600: LD_VAR 0 1
14604: PUSH
14605: LD_INT 2
14607: ARRAY
14608: PPUSH
14609: LD_INT 1
14611: PPUSH
14612: CALL_OW 3
14616: PPUSH
14617: CALL_OW 1
14621: ST_TO_ADDR
// tmp := 1 ;
14622: LD_ADDR_VAR 0 2
14626: PUSH
14627: LD_STRING 1
14629: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14630: LD_ADDR_VAR 0 4
14634: PUSH
14635: LD_VAR 0 4
14639: PUSH
14640: LD_VAR 0 2
14644: STR
14645: ST_TO_ADDR
// end ;
14646: GO 14542
14648: POP
14649: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14650: LD_STRING getStreamItemsFromMission("
14652: PUSH
14653: LD_VAR 0 3
14657: STR
14658: PUSH
14659: LD_STRING ","
14661: STR
14662: PUSH
14663: LD_VAR 0 4
14667: STR
14668: PUSH
14669: LD_STRING ")
14671: STR
14672: PPUSH
14673: CALL_OW 559
// end else
14677: GO 14686
// ToLua ( getStreamItemsFromMission("","") ) ;
14679: LD_STRING getStreamItemsFromMission("","")
14681: PPUSH
14682: CALL_OW 559
// end ;
14686: LD_VAR 0 1
14690: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14691: LD_EXP 43
14695: PUSH
14696: LD_EXP 48
14700: AND
14701: IFFALSE 14825
14703: GO 14705
14705: DISABLE
14706: LD_INT 0
14708: PPUSH
14709: PPUSH
// begin enable ;
14710: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14711: LD_ADDR_VAR 0 2
14715: PUSH
14716: LD_INT 22
14718: PUSH
14719: LD_OWVAR 2
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 2
14730: PUSH
14731: LD_INT 34
14733: PUSH
14734: LD_INT 7
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 34
14743: PUSH
14744: LD_INT 45
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 34
14753: PUSH
14754: LD_INT 28
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 34
14763: PUSH
14764: LD_INT 47
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PPUSH
14782: CALL_OW 69
14786: ST_TO_ADDR
// if not tmp then
14787: LD_VAR 0 2
14791: NOT
14792: IFFALSE 14796
// exit ;
14794: GO 14825
// for i in tmp do
14796: LD_ADDR_VAR 0 1
14800: PUSH
14801: LD_VAR 0 2
14805: PUSH
14806: FOR_IN
14807: IFFALSE 14823
// begin SetLives ( i , 0 ) ;
14809: LD_VAR 0 1
14813: PPUSH
14814: LD_INT 0
14816: PPUSH
14817: CALL_OW 234
// end ;
14821: GO 14806
14823: POP
14824: POP
// end ;
14825: PPOPN 2
14827: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14828: LD_EXP 43
14832: PUSH
14833: LD_EXP 49
14837: AND
14838: IFFALSE 14922
14840: GO 14842
14842: DISABLE
14843: LD_INT 0
14845: PPUSH
14846: PPUSH
// begin enable ;
14847: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14848: LD_ADDR_VAR 0 2
14852: PUSH
14853: LD_INT 22
14855: PUSH
14856: LD_OWVAR 2
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 32
14867: PUSH
14868: LD_INT 3
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PPUSH
14879: CALL_OW 69
14883: ST_TO_ADDR
// if not tmp then
14884: LD_VAR 0 2
14888: NOT
14889: IFFALSE 14893
// exit ;
14891: GO 14922
// for i in tmp do
14893: LD_ADDR_VAR 0 1
14897: PUSH
14898: LD_VAR 0 2
14902: PUSH
14903: FOR_IN
14904: IFFALSE 14920
// begin SetLives ( i , 0 ) ;
14906: LD_VAR 0 1
14910: PPUSH
14911: LD_INT 0
14913: PPUSH
14914: CALL_OW 234
// end ;
14918: GO 14903
14920: POP
14921: POP
// end ;
14922: PPOPN 2
14924: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14925: LD_EXP 43
14929: PUSH
14930: LD_EXP 46
14934: AND
14935: IFFALSE 15028
14937: GO 14939
14939: DISABLE
14940: LD_INT 0
14942: PPUSH
// begin enable ;
14943: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14944: LD_ADDR_VAR 0 1
14948: PUSH
14949: LD_INT 22
14951: PUSH
14952: LD_OWVAR 2
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: LD_INT 25
14966: PUSH
14967: LD_INT 5
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 25
14976: PUSH
14977: LD_INT 9
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 25
14986: PUSH
14987: LD_INT 8
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PPUSH
15004: CALL_OW 69
15008: PUSH
15009: FOR_IN
15010: IFFALSE 15026
// begin SetClass ( i , 1 ) ;
15012: LD_VAR 0 1
15016: PPUSH
15017: LD_INT 1
15019: PPUSH
15020: CALL_OW 336
// end ;
15024: GO 15009
15026: POP
15027: POP
// end ;
15028: PPOPN 1
15030: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15031: LD_EXP 43
15035: PUSH
15036: LD_EXP 47
15040: AND
15041: PUSH
15042: LD_OWVAR 65
15046: PUSH
15047: LD_INT 7
15049: LESS
15050: AND
15051: IFFALSE 15065
15053: GO 15055
15055: DISABLE
// begin enable ;
15056: ENABLE
// game_speed := 7 ;
15057: LD_ADDR_OWVAR 65
15061: PUSH
15062: LD_INT 7
15064: ST_TO_ADDR
// end ;
15065: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15066: LD_EXP 43
15070: PUSH
15071: LD_EXP 50
15075: AND
15076: IFFALSE 15278
15078: GO 15080
15080: DISABLE
15081: LD_INT 0
15083: PPUSH
15084: PPUSH
15085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15086: LD_ADDR_VAR 0 3
15090: PUSH
15091: LD_INT 81
15093: PUSH
15094: LD_OWVAR 2
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: LD_INT 21
15105: PUSH
15106: LD_INT 1
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PPUSH
15117: CALL_OW 69
15121: ST_TO_ADDR
// if not tmp then
15122: LD_VAR 0 3
15126: NOT
15127: IFFALSE 15131
// exit ;
15129: GO 15278
// if tmp > 5 then
15131: LD_VAR 0 3
15135: PUSH
15136: LD_INT 5
15138: GREATER
15139: IFFALSE 15151
// k := 5 else
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: LD_INT 5
15148: ST_TO_ADDR
15149: GO 15161
// k := tmp ;
15151: LD_ADDR_VAR 0 2
15155: PUSH
15156: LD_VAR 0 3
15160: ST_TO_ADDR
// for i := 1 to k do
15161: LD_ADDR_VAR 0 1
15165: PUSH
15166: DOUBLE
15167: LD_INT 1
15169: DEC
15170: ST_TO_ADDR
15171: LD_VAR 0 2
15175: PUSH
15176: FOR_TO
15177: IFFALSE 15276
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15179: LD_VAR 0 3
15183: PUSH
15184: LD_VAR 0 1
15188: ARRAY
15189: PPUSH
15190: LD_VAR 0 1
15194: PUSH
15195: LD_INT 4
15197: MOD
15198: PUSH
15199: LD_INT 1
15201: PLUS
15202: PPUSH
15203: CALL_OW 259
15207: PUSH
15208: LD_INT 10
15210: LESS
15211: IFFALSE 15274
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15213: LD_VAR 0 3
15217: PUSH
15218: LD_VAR 0 1
15222: ARRAY
15223: PPUSH
15224: LD_VAR 0 1
15228: PUSH
15229: LD_INT 4
15231: MOD
15232: PUSH
15233: LD_INT 1
15235: PLUS
15236: PPUSH
15237: LD_VAR 0 3
15241: PUSH
15242: LD_VAR 0 1
15246: ARRAY
15247: PPUSH
15248: LD_VAR 0 1
15252: PUSH
15253: LD_INT 4
15255: MOD
15256: PUSH
15257: LD_INT 1
15259: PLUS
15260: PPUSH
15261: CALL_OW 259
15265: PUSH
15266: LD_INT 1
15268: PLUS
15269: PPUSH
15270: CALL_OW 237
15274: GO 15176
15276: POP
15277: POP
// end ;
15278: PPOPN 3
15280: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15281: LD_EXP 43
15285: PUSH
15286: LD_EXP 51
15290: AND
15291: IFFALSE 15311
15293: GO 15295
15295: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15296: LD_INT 4
15298: PPUSH
15299: LD_OWVAR 2
15303: PPUSH
15304: LD_INT 0
15306: PPUSH
15307: CALL_OW 324
15311: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15312: LD_EXP 43
15316: PUSH
15317: LD_EXP 80
15321: AND
15322: IFFALSE 15342
15324: GO 15326
15326: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15327: LD_INT 19
15329: PPUSH
15330: LD_OWVAR 2
15334: PPUSH
15335: LD_INT 0
15337: PPUSH
15338: CALL_OW 324
15342: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15343: LD_EXP 43
15347: PUSH
15348: LD_EXP 52
15352: AND
15353: IFFALSE 15455
15355: GO 15357
15357: DISABLE
15358: LD_INT 0
15360: PPUSH
15361: PPUSH
// begin enable ;
15362: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15363: LD_ADDR_VAR 0 2
15367: PUSH
15368: LD_INT 22
15370: PUSH
15371: LD_OWVAR 2
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 2
15382: PUSH
15383: LD_INT 34
15385: PUSH
15386: LD_INT 11
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 34
15395: PUSH
15396: LD_INT 30
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PPUSH
15412: CALL_OW 69
15416: ST_TO_ADDR
// if not tmp then
15417: LD_VAR 0 2
15421: NOT
15422: IFFALSE 15426
// exit ;
15424: GO 15455
// for i in tmp do
15426: LD_ADDR_VAR 0 1
15430: PUSH
15431: LD_VAR 0 2
15435: PUSH
15436: FOR_IN
15437: IFFALSE 15453
// begin SetLives ( i , 0 ) ;
15439: LD_VAR 0 1
15443: PPUSH
15444: LD_INT 0
15446: PPUSH
15447: CALL_OW 234
// end ;
15451: GO 15436
15453: POP
15454: POP
// end ;
15455: PPOPN 2
15457: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15458: LD_EXP 43
15462: PUSH
15463: LD_EXP 53
15467: AND
15468: IFFALSE 15488
15470: GO 15472
15472: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15473: LD_INT 32
15475: PPUSH
15476: LD_OWVAR 2
15480: PPUSH
15481: LD_INT 0
15483: PPUSH
15484: CALL_OW 324
15488: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15489: LD_EXP 43
15493: PUSH
15494: LD_EXP 54
15498: AND
15499: IFFALSE 15680
15501: GO 15503
15503: DISABLE
15504: LD_INT 0
15506: PPUSH
15507: PPUSH
15508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15509: LD_ADDR_VAR 0 2
15513: PUSH
15514: LD_INT 22
15516: PUSH
15517: LD_OWVAR 2
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 33
15528: PUSH
15529: LD_INT 3
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PPUSH
15540: CALL_OW 69
15544: ST_TO_ADDR
// if not tmp then
15545: LD_VAR 0 2
15549: NOT
15550: IFFALSE 15554
// exit ;
15552: GO 15680
// side := 0 ;
15554: LD_ADDR_VAR 0 3
15558: PUSH
15559: LD_INT 0
15561: ST_TO_ADDR
// for i := 1 to 8 do
15562: LD_ADDR_VAR 0 1
15566: PUSH
15567: DOUBLE
15568: LD_INT 1
15570: DEC
15571: ST_TO_ADDR
15572: LD_INT 8
15574: PUSH
15575: FOR_TO
15576: IFFALSE 15624
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15578: LD_OWVAR 2
15582: PUSH
15583: LD_VAR 0 1
15587: NONEQUAL
15588: PUSH
15589: LD_OWVAR 2
15593: PPUSH
15594: LD_VAR 0 1
15598: PPUSH
15599: CALL_OW 81
15603: PUSH
15604: LD_INT 2
15606: EQUAL
15607: AND
15608: IFFALSE 15622
// begin side := i ;
15610: LD_ADDR_VAR 0 3
15614: PUSH
15615: LD_VAR 0 1
15619: ST_TO_ADDR
// break ;
15620: GO 15624
// end ;
15622: GO 15575
15624: POP
15625: POP
// if not side then
15626: LD_VAR 0 3
15630: NOT
15631: IFFALSE 15635
// exit ;
15633: GO 15680
// for i := 1 to tmp do
15635: LD_ADDR_VAR 0 1
15639: PUSH
15640: DOUBLE
15641: LD_INT 1
15643: DEC
15644: ST_TO_ADDR
15645: LD_VAR 0 2
15649: PUSH
15650: FOR_TO
15651: IFFALSE 15678
// if Prob ( 60 ) then
15653: LD_INT 60
15655: PPUSH
15656: CALL_OW 13
15660: IFFALSE 15676
// SetSide ( i , side ) ;
15662: LD_VAR 0 1
15666: PPUSH
15667: LD_VAR 0 3
15671: PPUSH
15672: CALL_OW 235
15676: GO 15650
15678: POP
15679: POP
// end ;
15680: PPOPN 3
15682: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15683: LD_EXP 43
15687: PUSH
15688: LD_EXP 56
15692: AND
15693: IFFALSE 15812
15695: GO 15697
15697: DISABLE
15698: LD_INT 0
15700: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15701: LD_ADDR_VAR 0 1
15705: PUSH
15706: LD_INT 22
15708: PUSH
15709: LD_OWVAR 2
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 21
15720: PUSH
15721: LD_INT 1
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 3
15730: PUSH
15731: LD_INT 23
15733: PUSH
15734: LD_INT 0
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: LIST
15749: PPUSH
15750: CALL_OW 69
15754: PUSH
15755: FOR_IN
15756: IFFALSE 15810
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15758: LD_VAR 0 1
15762: PPUSH
15763: CALL_OW 257
15767: PUSH
15768: LD_INT 1
15770: PUSH
15771: LD_INT 2
15773: PUSH
15774: LD_INT 3
15776: PUSH
15777: LD_INT 4
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: IN
15786: IFFALSE 15808
// SetClass ( un , rand ( 1 , 4 ) ) ;
15788: LD_VAR 0 1
15792: PPUSH
15793: LD_INT 1
15795: PPUSH
15796: LD_INT 4
15798: PPUSH
15799: CALL_OW 12
15803: PPUSH
15804: CALL_OW 336
15808: GO 15755
15810: POP
15811: POP
// end ;
15812: PPOPN 1
15814: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15815: LD_EXP 43
15819: PUSH
15820: LD_EXP 55
15824: AND
15825: IFFALSE 15904
15827: GO 15829
15829: DISABLE
15830: LD_INT 0
15832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15833: LD_ADDR_VAR 0 1
15837: PUSH
15838: LD_INT 22
15840: PUSH
15841: LD_OWVAR 2
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 21
15852: PUSH
15853: LD_INT 3
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PPUSH
15864: CALL_OW 69
15868: ST_TO_ADDR
// if not tmp then
15869: LD_VAR 0 1
15873: NOT
15874: IFFALSE 15878
// exit ;
15876: GO 15904
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15878: LD_VAR 0 1
15882: PUSH
15883: LD_INT 1
15885: PPUSH
15886: LD_VAR 0 1
15890: PPUSH
15891: CALL_OW 12
15895: ARRAY
15896: PPUSH
15897: LD_INT 100
15899: PPUSH
15900: CALL_OW 234
// end ;
15904: PPOPN 1
15906: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15907: LD_EXP 43
15911: PUSH
15912: LD_EXP 57
15916: AND
15917: IFFALSE 16015
15919: GO 15921
15921: DISABLE
15922: LD_INT 0
15924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15925: LD_ADDR_VAR 0 1
15929: PUSH
15930: LD_INT 22
15932: PUSH
15933: LD_OWVAR 2
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 21
15944: PUSH
15945: LD_INT 1
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PPUSH
15956: CALL_OW 69
15960: ST_TO_ADDR
// if not tmp then
15961: LD_VAR 0 1
15965: NOT
15966: IFFALSE 15970
// exit ;
15968: GO 16015
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15970: LD_VAR 0 1
15974: PUSH
15975: LD_INT 1
15977: PPUSH
15978: LD_VAR 0 1
15982: PPUSH
15983: CALL_OW 12
15987: ARRAY
15988: PPUSH
15989: LD_INT 1
15991: PPUSH
15992: LD_INT 4
15994: PPUSH
15995: CALL_OW 12
15999: PPUSH
16000: LD_INT 3000
16002: PPUSH
16003: LD_INT 9000
16005: PPUSH
16006: CALL_OW 12
16010: PPUSH
16011: CALL_OW 492
// end ;
16015: PPOPN 1
16017: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16018: LD_EXP 43
16022: PUSH
16023: LD_EXP 58
16027: AND
16028: IFFALSE 16048
16030: GO 16032
16032: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16033: LD_INT 1
16035: PPUSH
16036: LD_OWVAR 2
16040: PPUSH
16041: LD_INT 0
16043: PPUSH
16044: CALL_OW 324
16048: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16049: LD_EXP 43
16053: PUSH
16054: LD_EXP 59
16058: AND
16059: IFFALSE 16142
16061: GO 16063
16063: DISABLE
16064: LD_INT 0
16066: PPUSH
16067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16068: LD_ADDR_VAR 0 2
16072: PUSH
16073: LD_INT 22
16075: PUSH
16076: LD_OWVAR 2
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PUSH
16085: LD_INT 21
16087: PUSH
16088: LD_INT 3
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PPUSH
16099: CALL_OW 69
16103: ST_TO_ADDR
// if not tmp then
16104: LD_VAR 0 2
16108: NOT
16109: IFFALSE 16113
// exit ;
16111: GO 16142
// for i in tmp do
16113: LD_ADDR_VAR 0 1
16117: PUSH
16118: LD_VAR 0 2
16122: PUSH
16123: FOR_IN
16124: IFFALSE 16140
// SetBLevel ( i , 10 ) ;
16126: LD_VAR 0 1
16130: PPUSH
16131: LD_INT 10
16133: PPUSH
16134: CALL_OW 241
16138: GO 16123
16140: POP
16141: POP
// end ;
16142: PPOPN 2
16144: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16145: LD_EXP 43
16149: PUSH
16150: LD_EXP 60
16154: AND
16155: IFFALSE 16266
16157: GO 16159
16159: DISABLE
16160: LD_INT 0
16162: PPUSH
16163: PPUSH
16164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16165: LD_ADDR_VAR 0 3
16169: PUSH
16170: LD_INT 22
16172: PUSH
16173: LD_OWVAR 2
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 25
16184: PUSH
16185: LD_INT 1
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PPUSH
16196: CALL_OW 69
16200: ST_TO_ADDR
// if not tmp then
16201: LD_VAR 0 3
16205: NOT
16206: IFFALSE 16210
// exit ;
16208: GO 16266
// un := tmp [ rand ( 1 , tmp ) ] ;
16210: LD_ADDR_VAR 0 2
16214: PUSH
16215: LD_VAR 0 3
16219: PUSH
16220: LD_INT 1
16222: PPUSH
16223: LD_VAR 0 3
16227: PPUSH
16228: CALL_OW 12
16232: ARRAY
16233: ST_TO_ADDR
// if Crawls ( un ) then
16234: LD_VAR 0 2
16238: PPUSH
16239: CALL_OW 318
16243: IFFALSE 16254
// ComWalk ( un ) ;
16245: LD_VAR 0 2
16249: PPUSH
16250: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16254: LD_VAR 0 2
16258: PPUSH
16259: LD_INT 5
16261: PPUSH
16262: CALL_OW 336
// end ;
16266: PPOPN 3
16268: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16269: LD_EXP 43
16273: PUSH
16274: LD_EXP 61
16278: AND
16279: PUSH
16280: LD_OWVAR 67
16284: PUSH
16285: LD_INT 3
16287: LESS
16288: AND
16289: IFFALSE 16308
16291: GO 16293
16293: DISABLE
// Difficulty := Difficulty + 1 ;
16294: LD_ADDR_OWVAR 67
16298: PUSH
16299: LD_OWVAR 67
16303: PUSH
16304: LD_INT 1
16306: PLUS
16307: ST_TO_ADDR
16308: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16309: LD_EXP 43
16313: PUSH
16314: LD_EXP 62
16318: AND
16319: IFFALSE 16422
16321: GO 16323
16323: DISABLE
16324: LD_INT 0
16326: PPUSH
// begin for i := 1 to 5 do
16327: LD_ADDR_VAR 0 1
16331: PUSH
16332: DOUBLE
16333: LD_INT 1
16335: DEC
16336: ST_TO_ADDR
16337: LD_INT 5
16339: PUSH
16340: FOR_TO
16341: IFFALSE 16420
// begin uc_nation := nation_nature ;
16343: LD_ADDR_OWVAR 21
16347: PUSH
16348: LD_INT 0
16350: ST_TO_ADDR
// uc_side := 0 ;
16351: LD_ADDR_OWVAR 20
16355: PUSH
16356: LD_INT 0
16358: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16359: LD_ADDR_OWVAR 29
16363: PUSH
16364: LD_INT 12
16366: PUSH
16367: LD_INT 12
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: ST_TO_ADDR
// hc_agressivity := 20 ;
16374: LD_ADDR_OWVAR 35
16378: PUSH
16379: LD_INT 20
16381: ST_TO_ADDR
// hc_class := class_tiger ;
16382: LD_ADDR_OWVAR 28
16386: PUSH
16387: LD_INT 14
16389: ST_TO_ADDR
// hc_gallery :=  ;
16390: LD_ADDR_OWVAR 33
16394: PUSH
16395: LD_STRING 
16397: ST_TO_ADDR
// hc_name :=  ;
16398: LD_ADDR_OWVAR 26
16402: PUSH
16403: LD_STRING 
16405: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16406: CALL_OW 44
16410: PPUSH
16411: LD_INT 0
16413: PPUSH
16414: CALL_OW 51
// end ;
16418: GO 16340
16420: POP
16421: POP
// end ;
16422: PPOPN 1
16424: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16425: LD_EXP 43
16429: PUSH
16430: LD_EXP 63
16434: AND
16435: IFFALSE 16444
16437: GO 16439
16439: DISABLE
// StreamSibBomb ;
16440: CALL 16445 0 0
16444: END
// export function StreamSibBomb ; var i , x , y ; begin
16445: LD_INT 0
16447: PPUSH
16448: PPUSH
16449: PPUSH
16450: PPUSH
// result := false ;
16451: LD_ADDR_VAR 0 1
16455: PUSH
16456: LD_INT 0
16458: ST_TO_ADDR
// for i := 1 to 16 do
16459: LD_ADDR_VAR 0 2
16463: PUSH
16464: DOUBLE
16465: LD_INT 1
16467: DEC
16468: ST_TO_ADDR
16469: LD_INT 16
16471: PUSH
16472: FOR_TO
16473: IFFALSE 16672
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16475: LD_ADDR_VAR 0 3
16479: PUSH
16480: LD_INT 10
16482: PUSH
16483: LD_INT 20
16485: PUSH
16486: LD_INT 30
16488: PUSH
16489: LD_INT 40
16491: PUSH
16492: LD_INT 50
16494: PUSH
16495: LD_INT 60
16497: PUSH
16498: LD_INT 70
16500: PUSH
16501: LD_INT 80
16503: PUSH
16504: LD_INT 90
16506: PUSH
16507: LD_INT 100
16509: PUSH
16510: LD_INT 110
16512: PUSH
16513: LD_INT 120
16515: PUSH
16516: LD_INT 130
16518: PUSH
16519: LD_INT 140
16521: PUSH
16522: LD_INT 150
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 1
16544: PPUSH
16545: LD_INT 15
16547: PPUSH
16548: CALL_OW 12
16552: ARRAY
16553: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16554: LD_ADDR_VAR 0 4
16558: PUSH
16559: LD_INT 10
16561: PUSH
16562: LD_INT 20
16564: PUSH
16565: LD_INT 30
16567: PUSH
16568: LD_INT 40
16570: PUSH
16571: LD_INT 50
16573: PUSH
16574: LD_INT 60
16576: PUSH
16577: LD_INT 70
16579: PUSH
16580: LD_INT 80
16582: PUSH
16583: LD_INT 90
16585: PUSH
16586: LD_INT 100
16588: PUSH
16589: LD_INT 110
16591: PUSH
16592: LD_INT 120
16594: PUSH
16595: LD_INT 130
16597: PUSH
16598: LD_INT 140
16600: PUSH
16601: LD_INT 150
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 1
16623: PPUSH
16624: LD_INT 15
16626: PPUSH
16627: CALL_OW 12
16631: ARRAY
16632: ST_TO_ADDR
// if ValidHex ( x , y ) then
16633: LD_VAR 0 3
16637: PPUSH
16638: LD_VAR 0 4
16642: PPUSH
16643: CALL_OW 488
16647: IFFALSE 16670
// begin result := [ x , y ] ;
16649: LD_ADDR_VAR 0 1
16653: PUSH
16654: LD_VAR 0 3
16658: PUSH
16659: LD_VAR 0 4
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: ST_TO_ADDR
// break ;
16668: GO 16672
// end ; end ;
16670: GO 16472
16672: POP
16673: POP
// if result then
16674: LD_VAR 0 1
16678: IFFALSE 16738
// begin ToLua ( playSibBomb() ) ;
16680: LD_STRING playSibBomb()
16682: PPUSH
16683: CALL_OW 559
// wait ( 0 0$14 ) ;
16687: LD_INT 490
16689: PPUSH
16690: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16694: LD_VAR 0 1
16698: PUSH
16699: LD_INT 1
16701: ARRAY
16702: PPUSH
16703: LD_VAR 0 1
16707: PUSH
16708: LD_INT 2
16710: ARRAY
16711: PPUSH
16712: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16716: LD_VAR 0 1
16720: PUSH
16721: LD_INT 1
16723: ARRAY
16724: PPUSH
16725: LD_VAR 0 1
16729: PUSH
16730: LD_INT 2
16732: ARRAY
16733: PPUSH
16734: CALL_OW 429
// end ; end ;
16738: LD_VAR 0 1
16742: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16743: LD_EXP 43
16747: PUSH
16748: LD_EXP 65
16752: AND
16753: IFFALSE 16765
16755: GO 16757
16757: DISABLE
// YouLost (  ) ;
16758: LD_STRING 
16760: PPUSH
16761: CALL_OW 104
16765: END
// every 0 0$1 trigger StreamModeActive and sFog do
16766: LD_EXP 43
16770: PUSH
16771: LD_EXP 64
16775: AND
16776: IFFALSE 16790
16778: GO 16780
16780: DISABLE
// FogOff ( your_side ) ;
16781: LD_OWVAR 2
16785: PPUSH
16786: CALL_OW 344
16790: END
// every 0 0$1 trigger StreamModeActive and sSun do
16791: LD_EXP 43
16795: PUSH
16796: LD_EXP 66
16800: AND
16801: IFFALSE 16829
16803: GO 16805
16805: DISABLE
// begin solar_recharge_percent := 0 ;
16806: LD_ADDR_OWVAR 79
16810: PUSH
16811: LD_INT 0
16813: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16814: LD_INT 10500
16816: PPUSH
16817: CALL_OW 67
// solar_recharge_percent := 100 ;
16821: LD_ADDR_OWVAR 79
16825: PUSH
16826: LD_INT 100
16828: ST_TO_ADDR
// end ;
16829: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16830: LD_EXP 43
16834: PUSH
16835: LD_EXP 67
16839: AND
16840: IFFALSE 17079
16842: GO 16844
16844: DISABLE
16845: LD_INT 0
16847: PPUSH
16848: PPUSH
16849: PPUSH
// begin tmp := [ ] ;
16850: LD_ADDR_VAR 0 3
16854: PUSH
16855: EMPTY
16856: ST_TO_ADDR
// for i := 1 to 6 do
16857: LD_ADDR_VAR 0 1
16861: PUSH
16862: DOUBLE
16863: LD_INT 1
16865: DEC
16866: ST_TO_ADDR
16867: LD_INT 6
16869: PUSH
16870: FOR_TO
16871: IFFALSE 16976
// begin uc_nation := nation_nature ;
16873: LD_ADDR_OWVAR 21
16877: PUSH
16878: LD_INT 0
16880: ST_TO_ADDR
// uc_side := 0 ;
16881: LD_ADDR_OWVAR 20
16885: PUSH
16886: LD_INT 0
16888: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16889: LD_ADDR_OWVAR 29
16893: PUSH
16894: LD_INT 12
16896: PUSH
16897: LD_INT 12
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: ST_TO_ADDR
// hc_agressivity := 20 ;
16904: LD_ADDR_OWVAR 35
16908: PUSH
16909: LD_INT 20
16911: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16912: LD_ADDR_OWVAR 28
16916: PUSH
16917: LD_INT 17
16919: ST_TO_ADDR
// hc_gallery :=  ;
16920: LD_ADDR_OWVAR 33
16924: PUSH
16925: LD_STRING 
16927: ST_TO_ADDR
// hc_name :=  ;
16928: LD_ADDR_OWVAR 26
16932: PUSH
16933: LD_STRING 
16935: ST_TO_ADDR
// un := CreateHuman ;
16936: LD_ADDR_VAR 0 2
16940: PUSH
16941: CALL_OW 44
16945: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16946: LD_VAR 0 2
16950: PPUSH
16951: LD_INT 1
16953: PPUSH
16954: CALL_OW 51
// tmp := tmp ^ un ;
16958: LD_ADDR_VAR 0 3
16962: PUSH
16963: LD_VAR 0 3
16967: PUSH
16968: LD_VAR 0 2
16972: ADD
16973: ST_TO_ADDR
// end ;
16974: GO 16870
16976: POP
16977: POP
// repeat wait ( 0 0$1 ) ;
16978: LD_INT 35
16980: PPUSH
16981: CALL_OW 67
// for un in tmp do
16985: LD_ADDR_VAR 0 2
16989: PUSH
16990: LD_VAR 0 3
16994: PUSH
16995: FOR_IN
16996: IFFALSE 17070
// begin if IsDead ( un ) then
16998: LD_VAR 0 2
17002: PPUSH
17003: CALL_OW 301
17007: IFFALSE 17027
// begin tmp := tmp diff un ;
17009: LD_ADDR_VAR 0 3
17013: PUSH
17014: LD_VAR 0 3
17018: PUSH
17019: LD_VAR 0 2
17023: DIFF
17024: ST_TO_ADDR
// continue ;
17025: GO 16995
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17027: LD_VAR 0 2
17031: PPUSH
17032: LD_INT 3
17034: PUSH
17035: LD_INT 22
17037: PUSH
17038: LD_INT 0
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PPUSH
17049: CALL_OW 69
17053: PPUSH
17054: LD_VAR 0 2
17058: PPUSH
17059: CALL_OW 74
17063: PPUSH
17064: CALL_OW 115
// end ;
17068: GO 16995
17070: POP
17071: POP
// until not tmp ;
17072: LD_VAR 0 3
17076: NOT
17077: IFFALSE 16978
// end ;
17079: PPOPN 3
17081: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17082: LD_EXP 43
17086: PUSH
17087: LD_EXP 68
17091: AND
17092: IFFALSE 17146
17094: GO 17096
17096: DISABLE
// begin ToLua ( displayTroll(); ) ;
17097: LD_STRING displayTroll();
17099: PPUSH
17100: CALL_OW 559
// wait ( 3 3$00 ) ;
17104: LD_INT 6300
17106: PPUSH
17107: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17111: LD_STRING hideTroll();
17113: PPUSH
17114: CALL_OW 559
// wait ( 1 1$00 ) ;
17118: LD_INT 2100
17120: PPUSH
17121: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17125: LD_STRING displayTroll();
17127: PPUSH
17128: CALL_OW 559
// wait ( 1 1$00 ) ;
17132: LD_INT 2100
17134: PPUSH
17135: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17139: LD_STRING hideTroll();
17141: PPUSH
17142: CALL_OW 559
// end ;
17146: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17147: LD_EXP 43
17151: PUSH
17152: LD_EXP 69
17156: AND
17157: IFFALSE 17220
17159: GO 17161
17161: DISABLE
17162: LD_INT 0
17164: PPUSH
// begin p := 0 ;
17165: LD_ADDR_VAR 0 1
17169: PUSH
17170: LD_INT 0
17172: ST_TO_ADDR
// repeat game_speed := 1 ;
17173: LD_ADDR_OWVAR 65
17177: PUSH
17178: LD_INT 1
17180: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17181: LD_INT 35
17183: PPUSH
17184: CALL_OW 67
// p := p + 1 ;
17188: LD_ADDR_VAR 0 1
17192: PUSH
17193: LD_VAR 0 1
17197: PUSH
17198: LD_INT 1
17200: PLUS
17201: ST_TO_ADDR
// until p >= 60 ;
17202: LD_VAR 0 1
17206: PUSH
17207: LD_INT 60
17209: GREATEREQUAL
17210: IFFALSE 17173
// game_speed := 4 ;
17212: LD_ADDR_OWVAR 65
17216: PUSH
17217: LD_INT 4
17219: ST_TO_ADDR
// end ;
17220: PPOPN 1
17222: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17223: LD_EXP 43
17227: PUSH
17228: LD_EXP 70
17232: AND
17233: IFFALSE 17379
17235: GO 17237
17237: DISABLE
17238: LD_INT 0
17240: PPUSH
17241: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17242: LD_ADDR_VAR 0 1
17246: PUSH
17247: LD_INT 22
17249: PUSH
17250: LD_OWVAR 2
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 2
17261: PUSH
17262: LD_INT 30
17264: PUSH
17265: LD_INT 0
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 30
17274: PUSH
17275: LD_INT 1
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: LIST
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PPUSH
17291: CALL_OW 69
17295: ST_TO_ADDR
// if not depot then
17296: LD_VAR 0 1
17300: NOT
17301: IFFALSE 17305
// exit ;
17303: GO 17379
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17305: LD_ADDR_VAR 0 2
17309: PUSH
17310: LD_VAR 0 1
17314: PUSH
17315: LD_INT 1
17317: PPUSH
17318: LD_VAR 0 1
17322: PPUSH
17323: CALL_OW 12
17327: ARRAY
17328: PPUSH
17329: CALL_OW 274
17333: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17334: LD_VAR 0 2
17338: PPUSH
17339: LD_INT 1
17341: PPUSH
17342: LD_INT 0
17344: PPUSH
17345: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17349: LD_VAR 0 2
17353: PPUSH
17354: LD_INT 2
17356: PPUSH
17357: LD_INT 0
17359: PPUSH
17360: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17364: LD_VAR 0 2
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: LD_INT 0
17374: PPUSH
17375: CALL_OW 277
// end ;
17379: PPOPN 2
17381: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17382: LD_EXP 43
17386: PUSH
17387: LD_EXP 71
17391: AND
17392: IFFALSE 17489
17394: GO 17396
17396: DISABLE
17397: LD_INT 0
17399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17400: LD_ADDR_VAR 0 1
17404: PUSH
17405: LD_INT 22
17407: PUSH
17408: LD_OWVAR 2
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 21
17419: PUSH
17420: LD_INT 1
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: LD_INT 23
17432: PUSH
17433: LD_INT 0
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: LIST
17448: PPUSH
17449: CALL_OW 69
17453: ST_TO_ADDR
// if not tmp then
17454: LD_VAR 0 1
17458: NOT
17459: IFFALSE 17463
// exit ;
17461: GO 17489
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17463: LD_VAR 0 1
17467: PUSH
17468: LD_INT 1
17470: PPUSH
17471: LD_VAR 0 1
17475: PPUSH
17476: CALL_OW 12
17480: ARRAY
17481: PPUSH
17482: LD_INT 200
17484: PPUSH
17485: CALL_OW 234
// end ;
17489: PPOPN 1
17491: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17492: LD_EXP 43
17496: PUSH
17497: LD_EXP 72
17501: AND
17502: IFFALSE 17581
17504: GO 17506
17506: DISABLE
17507: LD_INT 0
17509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17510: LD_ADDR_VAR 0 1
17514: PUSH
17515: LD_INT 22
17517: PUSH
17518: LD_OWVAR 2
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 21
17529: PUSH
17530: LD_INT 2
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PPUSH
17541: CALL_OW 69
17545: ST_TO_ADDR
// if not tmp then
17546: LD_VAR 0 1
17550: NOT
17551: IFFALSE 17555
// exit ;
17553: GO 17581
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17555: LD_VAR 0 1
17559: PUSH
17560: LD_INT 1
17562: PPUSH
17563: LD_VAR 0 1
17567: PPUSH
17568: CALL_OW 12
17572: ARRAY
17573: PPUSH
17574: LD_INT 60
17576: PPUSH
17577: CALL_OW 234
// end ;
17581: PPOPN 1
17583: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17584: LD_EXP 43
17588: PUSH
17589: LD_EXP 73
17593: AND
17594: IFFALSE 17693
17596: GO 17598
17598: DISABLE
17599: LD_INT 0
17601: PPUSH
17602: PPUSH
// begin enable ;
17603: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17604: LD_ADDR_VAR 0 1
17608: PUSH
17609: LD_INT 22
17611: PUSH
17612: LD_OWVAR 2
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 61
17623: PUSH
17624: EMPTY
17625: LIST
17626: PUSH
17627: LD_INT 33
17629: PUSH
17630: LD_INT 2
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: LIST
17641: PPUSH
17642: CALL_OW 69
17646: ST_TO_ADDR
// if not tmp then
17647: LD_VAR 0 1
17651: NOT
17652: IFFALSE 17656
// exit ;
17654: GO 17693
// for i in tmp do
17656: LD_ADDR_VAR 0 2
17660: PUSH
17661: LD_VAR 0 1
17665: PUSH
17666: FOR_IN
17667: IFFALSE 17691
// if IsControledBy ( i ) then
17669: LD_VAR 0 2
17673: PPUSH
17674: CALL_OW 312
17678: IFFALSE 17689
// ComUnlink ( i ) ;
17680: LD_VAR 0 2
17684: PPUSH
17685: CALL_OW 136
17689: GO 17666
17691: POP
17692: POP
// end ;
17693: PPOPN 2
17695: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17696: LD_EXP 43
17700: PUSH
17701: LD_EXP 74
17705: AND
17706: IFFALSE 17846
17708: GO 17710
17710: DISABLE
17711: LD_INT 0
17713: PPUSH
17714: PPUSH
// begin ToLua ( displayPowell(); ) ;
17715: LD_STRING displayPowell();
17717: PPUSH
17718: CALL_OW 559
// uc_side := 0 ;
17722: LD_ADDR_OWVAR 20
17726: PUSH
17727: LD_INT 0
17729: ST_TO_ADDR
// uc_nation := 2 ;
17730: LD_ADDR_OWVAR 21
17734: PUSH
17735: LD_INT 2
17737: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17738: LD_ADDR_OWVAR 37
17742: PUSH
17743: LD_INT 14
17745: ST_TO_ADDR
// vc_engine := engine_siberite ;
17746: LD_ADDR_OWVAR 39
17750: PUSH
17751: LD_INT 3
17753: ST_TO_ADDR
// vc_control := control_apeman ;
17754: LD_ADDR_OWVAR 38
17758: PUSH
17759: LD_INT 5
17761: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17762: LD_ADDR_OWVAR 40
17766: PUSH
17767: LD_INT 29
17769: ST_TO_ADDR
// un := CreateVehicle ;
17770: LD_ADDR_VAR 0 2
17774: PUSH
17775: CALL_OW 45
17779: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17780: LD_VAR 0 2
17784: PPUSH
17785: LD_INT 1
17787: PPUSH
17788: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17792: LD_INT 35
17794: PPUSH
17795: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17799: LD_VAR 0 2
17803: PPUSH
17804: LD_INT 22
17806: PUSH
17807: LD_OWVAR 2
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PPUSH
17816: CALL_OW 69
17820: PPUSH
17821: LD_VAR 0 2
17825: PPUSH
17826: CALL_OW 74
17830: PPUSH
17831: CALL_OW 115
// until IsDead ( un ) ;
17835: LD_VAR 0 2
17839: PPUSH
17840: CALL_OW 301
17844: IFFALSE 17792
// end ;
17846: PPOPN 2
17848: END
// every 0 0$1 trigger StreamModeActive and sStu do
17849: LD_EXP 43
17853: PUSH
17854: LD_EXP 82
17858: AND
17859: IFFALSE 17875
17861: GO 17863
17863: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17864: LD_STRING displayStucuk();
17866: PPUSH
17867: CALL_OW 559
// ResetFog ;
17871: CALL_OW 335
// end ;
17875: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17876: LD_EXP 43
17880: PUSH
17881: LD_EXP 75
17885: AND
17886: IFFALSE 18027
17888: GO 17890
17890: DISABLE
17891: LD_INT 0
17893: PPUSH
17894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17895: LD_ADDR_VAR 0 2
17899: PUSH
17900: LD_INT 22
17902: PUSH
17903: LD_OWVAR 2
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 21
17914: PUSH
17915: LD_INT 1
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PPUSH
17926: CALL_OW 69
17930: ST_TO_ADDR
// if not tmp then
17931: LD_VAR 0 2
17935: NOT
17936: IFFALSE 17940
// exit ;
17938: GO 18027
// un := tmp [ rand ( 1 , tmp ) ] ;
17940: LD_ADDR_VAR 0 1
17944: PUSH
17945: LD_VAR 0 2
17949: PUSH
17950: LD_INT 1
17952: PPUSH
17953: LD_VAR 0 2
17957: PPUSH
17958: CALL_OW 12
17962: ARRAY
17963: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17964: LD_VAR 0 1
17968: PPUSH
17969: LD_INT 0
17971: PPUSH
17972: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17976: LD_VAR 0 1
17980: PPUSH
17981: LD_OWVAR 3
17985: PUSH
17986: LD_VAR 0 1
17990: DIFF
17991: PPUSH
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL_OW 74
18001: PPUSH
18002: CALL_OW 115
// wait ( 0 0$20 ) ;
18006: LD_INT 700
18008: PPUSH
18009: CALL_OW 67
// SetSide ( un , your_side ) ;
18013: LD_VAR 0 1
18017: PPUSH
18018: LD_OWVAR 2
18022: PPUSH
18023: CALL_OW 235
// end ;
18027: PPOPN 2
18029: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18030: LD_EXP 43
18034: PUSH
18035: LD_EXP 76
18039: AND
18040: IFFALSE 18146
18042: GO 18044
18044: DISABLE
18045: LD_INT 0
18047: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18048: LD_ADDR_VAR 0 1
18052: PUSH
18053: LD_INT 22
18055: PUSH
18056: LD_OWVAR 2
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 2
18067: PUSH
18068: LD_INT 30
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 30
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PPUSH
18097: CALL_OW 69
18101: ST_TO_ADDR
// if not depot then
18102: LD_VAR 0 1
18106: NOT
18107: IFFALSE 18111
// exit ;
18109: GO 18146
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18111: LD_VAR 0 1
18115: PUSH
18116: LD_INT 1
18118: ARRAY
18119: PPUSH
18120: CALL_OW 250
18124: PPUSH
18125: LD_VAR 0 1
18129: PUSH
18130: LD_INT 1
18132: ARRAY
18133: PPUSH
18134: CALL_OW 251
18138: PPUSH
18139: LD_INT 70
18141: PPUSH
18142: CALL_OW 495
// end ;
18146: PPOPN 1
18148: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18149: LD_EXP 43
18153: PUSH
18154: LD_EXP 77
18158: AND
18159: IFFALSE 18370
18161: GO 18163
18163: DISABLE
18164: LD_INT 0
18166: PPUSH
18167: PPUSH
18168: PPUSH
18169: PPUSH
18170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18171: LD_ADDR_VAR 0 5
18175: PUSH
18176: LD_INT 22
18178: PUSH
18179: LD_OWVAR 2
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 21
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PPUSH
18202: CALL_OW 69
18206: ST_TO_ADDR
// if not tmp then
18207: LD_VAR 0 5
18211: NOT
18212: IFFALSE 18216
// exit ;
18214: GO 18370
// for i in tmp do
18216: LD_ADDR_VAR 0 1
18220: PUSH
18221: LD_VAR 0 5
18225: PUSH
18226: FOR_IN
18227: IFFALSE 18368
// begin d := rand ( 0 , 5 ) ;
18229: LD_ADDR_VAR 0 4
18233: PUSH
18234: LD_INT 0
18236: PPUSH
18237: LD_INT 5
18239: PPUSH
18240: CALL_OW 12
18244: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18245: LD_ADDR_VAR 0 2
18249: PUSH
18250: LD_VAR 0 1
18254: PPUSH
18255: CALL_OW 250
18259: PPUSH
18260: LD_VAR 0 4
18264: PPUSH
18265: LD_INT 3
18267: PPUSH
18268: LD_INT 12
18270: PPUSH
18271: CALL_OW 12
18275: PPUSH
18276: CALL_OW 272
18280: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18281: LD_ADDR_VAR 0 3
18285: PUSH
18286: LD_VAR 0 1
18290: PPUSH
18291: CALL_OW 251
18295: PPUSH
18296: LD_VAR 0 4
18300: PPUSH
18301: LD_INT 3
18303: PPUSH
18304: LD_INT 12
18306: PPUSH
18307: CALL_OW 12
18311: PPUSH
18312: CALL_OW 273
18316: ST_TO_ADDR
// if ValidHex ( x , y ) then
18317: LD_VAR 0 2
18321: PPUSH
18322: LD_VAR 0 3
18326: PPUSH
18327: CALL_OW 488
18331: IFFALSE 18366
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18333: LD_VAR 0 1
18337: PPUSH
18338: LD_VAR 0 2
18342: PPUSH
18343: LD_VAR 0 3
18347: PPUSH
18348: LD_INT 3
18350: PPUSH
18351: LD_INT 6
18353: PPUSH
18354: CALL_OW 12
18358: PPUSH
18359: LD_INT 1
18361: PPUSH
18362: CALL_OW 483
// end ;
18366: GO 18226
18368: POP
18369: POP
// end ;
18370: PPOPN 5
18372: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18373: LD_EXP 43
18377: PUSH
18378: LD_EXP 78
18382: AND
18383: IFFALSE 18477
18385: GO 18387
18387: DISABLE
18388: LD_INT 0
18390: PPUSH
18391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18392: LD_ADDR_VAR 0 2
18396: PUSH
18397: LD_INT 22
18399: PUSH
18400: LD_OWVAR 2
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 32
18411: PUSH
18412: LD_INT 1
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 21
18421: PUSH
18422: LD_INT 2
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: LIST
18433: PPUSH
18434: CALL_OW 69
18438: ST_TO_ADDR
// if not tmp then
18439: LD_VAR 0 2
18443: NOT
18444: IFFALSE 18448
// exit ;
18446: GO 18477
// for i in tmp do
18448: LD_ADDR_VAR 0 1
18452: PUSH
18453: LD_VAR 0 2
18457: PUSH
18458: FOR_IN
18459: IFFALSE 18475
// SetFuel ( i , 0 ) ;
18461: LD_VAR 0 1
18465: PPUSH
18466: LD_INT 0
18468: PPUSH
18469: CALL_OW 240
18473: GO 18458
18475: POP
18476: POP
// end ;
18477: PPOPN 2
18479: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18480: LD_EXP 43
18484: PUSH
18485: LD_EXP 79
18489: AND
18490: IFFALSE 18556
18492: GO 18494
18494: DISABLE
18495: LD_INT 0
18497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18498: LD_ADDR_VAR 0 1
18502: PUSH
18503: LD_INT 22
18505: PUSH
18506: LD_OWVAR 2
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 30
18517: PUSH
18518: LD_INT 29
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PPUSH
18529: CALL_OW 69
18533: ST_TO_ADDR
// if not tmp then
18534: LD_VAR 0 1
18538: NOT
18539: IFFALSE 18543
// exit ;
18541: GO 18556
// DestroyUnit ( tmp [ 1 ] ) ;
18543: LD_VAR 0 1
18547: PUSH
18548: LD_INT 1
18550: ARRAY
18551: PPUSH
18552: CALL_OW 65
// end ;
18556: PPOPN 1
18558: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18559: LD_EXP 43
18563: PUSH
18564: LD_EXP 81
18568: AND
18569: IFFALSE 18698
18571: GO 18573
18573: DISABLE
18574: LD_INT 0
18576: PPUSH
// begin uc_side := 0 ;
18577: LD_ADDR_OWVAR 20
18581: PUSH
18582: LD_INT 0
18584: ST_TO_ADDR
// uc_nation := nation_arabian ;
18585: LD_ADDR_OWVAR 21
18589: PUSH
18590: LD_INT 2
18592: ST_TO_ADDR
// hc_gallery :=  ;
18593: LD_ADDR_OWVAR 33
18597: PUSH
18598: LD_STRING 
18600: ST_TO_ADDR
// hc_name :=  ;
18601: LD_ADDR_OWVAR 26
18605: PUSH
18606: LD_STRING 
18608: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18609: LD_INT 1
18611: PPUSH
18612: LD_INT 11
18614: PPUSH
18615: LD_INT 10
18617: PPUSH
18618: CALL_OW 380
// un := CreateHuman ;
18622: LD_ADDR_VAR 0 1
18626: PUSH
18627: CALL_OW 44
18631: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18632: LD_VAR 0 1
18636: PPUSH
18637: LD_INT 1
18639: PPUSH
18640: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18644: LD_INT 35
18646: PPUSH
18647: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18651: LD_VAR 0 1
18655: PPUSH
18656: LD_INT 22
18658: PUSH
18659: LD_OWVAR 2
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PPUSH
18668: CALL_OW 69
18672: PPUSH
18673: LD_VAR 0 1
18677: PPUSH
18678: CALL_OW 74
18682: PPUSH
18683: CALL_OW 115
// until IsDead ( un ) ;
18687: LD_VAR 0 1
18691: PPUSH
18692: CALL_OW 301
18696: IFFALSE 18644
// end ;
18698: PPOPN 1
18700: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18701: LD_EXP 43
18705: PUSH
18706: LD_EXP 83
18710: AND
18711: IFFALSE 18723
18713: GO 18715
18715: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18716: LD_STRING earthquake(getX(game), 0, 32)
18718: PPUSH
18719: CALL_OW 559
18723: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18724: LD_EXP 43
18728: PUSH
18729: LD_EXP 84
18733: AND
18734: IFFALSE 18825
18736: GO 18738
18738: DISABLE
18739: LD_INT 0
18741: PPUSH
// begin enable ;
18742: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18743: LD_ADDR_VAR 0 1
18747: PUSH
18748: LD_INT 22
18750: PUSH
18751: LD_OWVAR 2
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 21
18762: PUSH
18763: LD_INT 2
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 33
18772: PUSH
18773: LD_INT 3
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: LIST
18784: PPUSH
18785: CALL_OW 69
18789: ST_TO_ADDR
// if not tmp then
18790: LD_VAR 0 1
18794: NOT
18795: IFFALSE 18799
// exit ;
18797: GO 18825
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18799: LD_VAR 0 1
18803: PUSH
18804: LD_INT 1
18806: PPUSH
18807: LD_VAR 0 1
18811: PPUSH
18812: CALL_OW 12
18816: ARRAY
18817: PPUSH
18818: LD_INT 1
18820: PPUSH
18821: CALL_OW 234
// end ;
18825: PPOPN 1
18827: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18828: LD_EXP 43
18832: PUSH
18833: LD_EXP 85
18837: AND
18838: IFFALSE 18979
18840: GO 18842
18842: DISABLE
18843: LD_INT 0
18845: PPUSH
18846: PPUSH
18847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18848: LD_ADDR_VAR 0 3
18852: PUSH
18853: LD_INT 22
18855: PUSH
18856: LD_OWVAR 2
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 25
18867: PUSH
18868: LD_INT 1
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PPUSH
18879: CALL_OW 69
18883: ST_TO_ADDR
// if not tmp then
18884: LD_VAR 0 3
18888: NOT
18889: IFFALSE 18893
// exit ;
18891: GO 18979
// un := tmp [ rand ( 1 , tmp ) ] ;
18893: LD_ADDR_VAR 0 2
18897: PUSH
18898: LD_VAR 0 3
18902: PUSH
18903: LD_INT 1
18905: PPUSH
18906: LD_VAR 0 3
18910: PPUSH
18911: CALL_OW 12
18915: ARRAY
18916: ST_TO_ADDR
// if Crawls ( un ) then
18917: LD_VAR 0 2
18921: PPUSH
18922: CALL_OW 318
18926: IFFALSE 18937
// ComWalk ( un ) ;
18928: LD_VAR 0 2
18932: PPUSH
18933: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18937: LD_VAR 0 2
18941: PPUSH
18942: LD_INT 9
18944: PPUSH
18945: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18949: LD_INT 28
18951: PPUSH
18952: LD_OWVAR 2
18956: PPUSH
18957: LD_INT 2
18959: PPUSH
18960: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18964: LD_INT 29
18966: PPUSH
18967: LD_OWVAR 2
18971: PPUSH
18972: LD_INT 2
18974: PPUSH
18975: CALL_OW 322
// end ;
18979: PPOPN 3
18981: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18982: LD_EXP 43
18986: PUSH
18987: LD_EXP 86
18991: AND
18992: IFFALSE 19103
18994: GO 18996
18996: DISABLE
18997: LD_INT 0
18999: PPUSH
19000: PPUSH
19001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19002: LD_ADDR_VAR 0 3
19006: PUSH
19007: LD_INT 22
19009: PUSH
19010: LD_OWVAR 2
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 25
19021: PUSH
19022: LD_INT 1
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PPUSH
19033: CALL_OW 69
19037: ST_TO_ADDR
// if not tmp then
19038: LD_VAR 0 3
19042: NOT
19043: IFFALSE 19047
// exit ;
19045: GO 19103
// un := tmp [ rand ( 1 , tmp ) ] ;
19047: LD_ADDR_VAR 0 2
19051: PUSH
19052: LD_VAR 0 3
19056: PUSH
19057: LD_INT 1
19059: PPUSH
19060: LD_VAR 0 3
19064: PPUSH
19065: CALL_OW 12
19069: ARRAY
19070: ST_TO_ADDR
// if Crawls ( un ) then
19071: LD_VAR 0 2
19075: PPUSH
19076: CALL_OW 318
19080: IFFALSE 19091
// ComWalk ( un ) ;
19082: LD_VAR 0 2
19086: PPUSH
19087: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19091: LD_VAR 0 2
19095: PPUSH
19096: LD_INT 8
19098: PPUSH
19099: CALL_OW 336
// end ;
19103: PPOPN 3
19105: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19106: LD_EXP 43
19110: PUSH
19111: LD_EXP 87
19115: AND
19116: IFFALSE 19260
19118: GO 19120
19120: DISABLE
19121: LD_INT 0
19123: PPUSH
19124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19125: LD_ADDR_VAR 0 2
19129: PUSH
19130: LD_INT 22
19132: PUSH
19133: LD_OWVAR 2
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 21
19144: PUSH
19145: LD_INT 2
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 2
19154: PUSH
19155: LD_INT 34
19157: PUSH
19158: LD_INT 12
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 34
19167: PUSH
19168: LD_INT 51
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 34
19177: PUSH
19178: LD_INT 32
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: LIST
19195: PPUSH
19196: CALL_OW 69
19200: ST_TO_ADDR
// if not tmp then
19201: LD_VAR 0 2
19205: NOT
19206: IFFALSE 19210
// exit ;
19208: GO 19260
// for i in tmp do
19210: LD_ADDR_VAR 0 1
19214: PUSH
19215: LD_VAR 0 2
19219: PUSH
19220: FOR_IN
19221: IFFALSE 19258
// if GetCargo ( i , mat_artifact ) = 0 then
19223: LD_VAR 0 1
19227: PPUSH
19228: LD_INT 4
19230: PPUSH
19231: CALL_OW 289
19235: PUSH
19236: LD_INT 0
19238: EQUAL
19239: IFFALSE 19256
// SetCargo ( i , mat_siberit , 100 ) ;
19241: LD_VAR 0 1
19245: PPUSH
19246: LD_INT 3
19248: PPUSH
19249: LD_INT 100
19251: PPUSH
19252: CALL_OW 290
19256: GO 19220
19258: POP
19259: POP
// end ;
19260: PPOPN 2
19262: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19263: LD_EXP 43
19267: PUSH
19268: LD_EXP 88
19272: AND
19273: IFFALSE 19456
19275: GO 19277
19277: DISABLE
19278: LD_INT 0
19280: PPUSH
19281: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19282: LD_ADDR_VAR 0 2
19286: PUSH
19287: LD_INT 22
19289: PUSH
19290: LD_OWVAR 2
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PPUSH
19299: CALL_OW 69
19303: ST_TO_ADDR
// if not tmp then
19304: LD_VAR 0 2
19308: NOT
19309: IFFALSE 19313
// exit ;
19311: GO 19456
// for i := 1 to 2 do
19313: LD_ADDR_VAR 0 1
19317: PUSH
19318: DOUBLE
19319: LD_INT 1
19321: DEC
19322: ST_TO_ADDR
19323: LD_INT 2
19325: PUSH
19326: FOR_TO
19327: IFFALSE 19454
// begin uc_side := your_side ;
19329: LD_ADDR_OWVAR 20
19333: PUSH
19334: LD_OWVAR 2
19338: ST_TO_ADDR
// uc_nation := nation_american ;
19339: LD_ADDR_OWVAR 21
19343: PUSH
19344: LD_INT 1
19346: ST_TO_ADDR
// vc_chassis := us_morphling ;
19347: LD_ADDR_OWVAR 37
19351: PUSH
19352: LD_INT 5
19354: ST_TO_ADDR
// vc_engine := engine_siberite ;
19355: LD_ADDR_OWVAR 39
19359: PUSH
19360: LD_INT 3
19362: ST_TO_ADDR
// vc_control := control_computer ;
19363: LD_ADDR_OWVAR 38
19367: PUSH
19368: LD_INT 3
19370: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19371: LD_ADDR_OWVAR 40
19375: PUSH
19376: LD_INT 10
19378: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19379: LD_VAR 0 2
19383: PUSH
19384: LD_INT 1
19386: ARRAY
19387: PPUSH
19388: CALL_OW 310
19392: NOT
19393: IFFALSE 19440
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19395: CALL_OW 45
19399: PPUSH
19400: LD_VAR 0 2
19404: PUSH
19405: LD_INT 1
19407: ARRAY
19408: PPUSH
19409: CALL_OW 250
19413: PPUSH
19414: LD_VAR 0 2
19418: PUSH
19419: LD_INT 1
19421: ARRAY
19422: PPUSH
19423: CALL_OW 251
19427: PPUSH
19428: LD_INT 12
19430: PPUSH
19431: LD_INT 1
19433: PPUSH
19434: CALL_OW 50
19438: GO 19452
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19440: CALL_OW 45
19444: PPUSH
19445: LD_INT 1
19447: PPUSH
19448: CALL_OW 51
// end ;
19452: GO 19326
19454: POP
19455: POP
// end ;
19456: PPOPN 2
19458: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19459: LD_EXP 43
19463: PUSH
19464: LD_EXP 89
19468: AND
19469: IFFALSE 19691
19471: GO 19473
19473: DISABLE
19474: LD_INT 0
19476: PPUSH
19477: PPUSH
19478: PPUSH
19479: PPUSH
19480: PPUSH
19481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19482: LD_ADDR_VAR 0 6
19486: PUSH
19487: LD_INT 22
19489: PUSH
19490: LD_OWVAR 2
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 21
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 3
19511: PUSH
19512: LD_INT 23
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: LIST
19530: PPUSH
19531: CALL_OW 69
19535: ST_TO_ADDR
// if not tmp then
19536: LD_VAR 0 6
19540: NOT
19541: IFFALSE 19545
// exit ;
19543: GO 19691
// s1 := rand ( 1 , 4 ) ;
19545: LD_ADDR_VAR 0 2
19549: PUSH
19550: LD_INT 1
19552: PPUSH
19553: LD_INT 4
19555: PPUSH
19556: CALL_OW 12
19560: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19561: LD_ADDR_VAR 0 4
19565: PUSH
19566: LD_VAR 0 6
19570: PUSH
19571: LD_INT 1
19573: ARRAY
19574: PPUSH
19575: LD_VAR 0 2
19579: PPUSH
19580: CALL_OW 259
19584: ST_TO_ADDR
// if s1 = 1 then
19585: LD_VAR 0 2
19589: PUSH
19590: LD_INT 1
19592: EQUAL
19593: IFFALSE 19613
// s2 := rand ( 2 , 4 ) else
19595: LD_ADDR_VAR 0 3
19599: PUSH
19600: LD_INT 2
19602: PPUSH
19603: LD_INT 4
19605: PPUSH
19606: CALL_OW 12
19610: ST_TO_ADDR
19611: GO 19621
// s2 := 1 ;
19613: LD_ADDR_VAR 0 3
19617: PUSH
19618: LD_INT 1
19620: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19621: LD_ADDR_VAR 0 5
19625: PUSH
19626: LD_VAR 0 6
19630: PUSH
19631: LD_INT 1
19633: ARRAY
19634: PPUSH
19635: LD_VAR 0 3
19639: PPUSH
19640: CALL_OW 259
19644: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19645: LD_VAR 0 6
19649: PUSH
19650: LD_INT 1
19652: ARRAY
19653: PPUSH
19654: LD_VAR 0 2
19658: PPUSH
19659: LD_VAR 0 5
19663: PPUSH
19664: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19668: LD_VAR 0 6
19672: PUSH
19673: LD_INT 1
19675: ARRAY
19676: PPUSH
19677: LD_VAR 0 3
19681: PPUSH
19682: LD_VAR 0 4
19686: PPUSH
19687: CALL_OW 237
// end ;
19691: PPOPN 6
19693: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19694: LD_EXP 43
19698: PUSH
19699: LD_EXP 90
19703: AND
19704: IFFALSE 19783
19706: GO 19708
19708: DISABLE
19709: LD_INT 0
19711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19712: LD_ADDR_VAR 0 1
19716: PUSH
19717: LD_INT 22
19719: PUSH
19720: LD_OWVAR 2
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 30
19731: PUSH
19732: LD_INT 3
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PPUSH
19743: CALL_OW 69
19747: ST_TO_ADDR
// if not tmp then
19748: LD_VAR 0 1
19752: NOT
19753: IFFALSE 19757
// exit ;
19755: GO 19783
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19757: LD_VAR 0 1
19761: PUSH
19762: LD_INT 1
19764: PPUSH
19765: LD_VAR 0 1
19769: PPUSH
19770: CALL_OW 12
19774: ARRAY
19775: PPUSH
19776: LD_INT 1
19778: PPUSH
19779: CALL_OW 234
// end ;
19783: PPOPN 1
19785: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19786: LD_EXP 43
19790: PUSH
19791: LD_EXP 91
19795: AND
19796: IFFALSE 19908
19798: GO 19800
19800: DISABLE
19801: LD_INT 0
19803: PPUSH
19804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19805: LD_ADDR_VAR 0 2
19809: PUSH
19810: LD_INT 22
19812: PUSH
19813: LD_OWVAR 2
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: LD_INT 30
19827: PUSH
19828: LD_INT 27
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 30
19837: PUSH
19838: LD_INT 26
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 30
19847: PUSH
19848: LD_INT 28
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PPUSH
19865: CALL_OW 69
19869: ST_TO_ADDR
// if not tmp then
19870: LD_VAR 0 2
19874: NOT
19875: IFFALSE 19879
// exit ;
19877: GO 19908
// for i in tmp do
19879: LD_ADDR_VAR 0 1
19883: PUSH
19884: LD_VAR 0 2
19888: PUSH
19889: FOR_IN
19890: IFFALSE 19906
// SetLives ( i , 1 ) ;
19892: LD_VAR 0 1
19896: PPUSH
19897: LD_INT 1
19899: PPUSH
19900: CALL_OW 234
19904: GO 19889
19906: POP
19907: POP
// end ;
19908: PPOPN 2
19910: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19911: LD_EXP 43
19915: PUSH
19916: LD_EXP 92
19920: AND
19921: IFFALSE 20195
19923: GO 19925
19925: DISABLE
19926: LD_INT 0
19928: PPUSH
19929: PPUSH
19930: PPUSH
// begin i := rand ( 1 , 7 ) ;
19931: LD_ADDR_VAR 0 1
19935: PUSH
19936: LD_INT 1
19938: PPUSH
19939: LD_INT 7
19941: PPUSH
19942: CALL_OW 12
19946: ST_TO_ADDR
// case i of 1 :
19947: LD_VAR 0 1
19951: PUSH
19952: LD_INT 1
19954: DOUBLE
19955: EQUAL
19956: IFTRUE 19960
19958: GO 19970
19960: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19961: LD_STRING earthquake(getX(game), 0, 32)
19963: PPUSH
19964: CALL_OW 559
19968: GO 20195
19970: LD_INT 2
19972: DOUBLE
19973: EQUAL
19974: IFTRUE 19978
19976: GO 19992
19978: POP
// begin ToLua ( displayStucuk(); ) ;
19979: LD_STRING displayStucuk();
19981: PPUSH
19982: CALL_OW 559
// ResetFog ;
19986: CALL_OW 335
// end ; 3 :
19990: GO 20195
19992: LD_INT 3
19994: DOUBLE
19995: EQUAL
19996: IFTRUE 20000
19998: GO 20104
20000: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20001: LD_ADDR_VAR 0 2
20005: PUSH
20006: LD_INT 22
20008: PUSH
20009: LD_OWVAR 2
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 25
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PPUSH
20032: CALL_OW 69
20036: ST_TO_ADDR
// if not tmp then
20037: LD_VAR 0 2
20041: NOT
20042: IFFALSE 20046
// exit ;
20044: GO 20195
// un := tmp [ rand ( 1 , tmp ) ] ;
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_VAR 0 2
20055: PUSH
20056: LD_INT 1
20058: PPUSH
20059: LD_VAR 0 2
20063: PPUSH
20064: CALL_OW 12
20068: ARRAY
20069: ST_TO_ADDR
// if Crawls ( un ) then
20070: LD_VAR 0 3
20074: PPUSH
20075: CALL_OW 318
20079: IFFALSE 20090
// ComWalk ( un ) ;
20081: LD_VAR 0 3
20085: PPUSH
20086: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20090: LD_VAR 0 3
20094: PPUSH
20095: LD_INT 8
20097: PPUSH
20098: CALL_OW 336
// end ; 4 :
20102: GO 20195
20104: LD_INT 4
20106: DOUBLE
20107: EQUAL
20108: IFTRUE 20112
20110: GO 20173
20112: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20113: LD_ADDR_VAR 0 2
20117: PUSH
20118: LD_INT 22
20120: PUSH
20121: LD_OWVAR 2
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 30
20132: PUSH
20133: LD_INT 29
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PPUSH
20144: CALL_OW 69
20148: ST_TO_ADDR
// if not tmp then
20149: LD_VAR 0 2
20153: NOT
20154: IFFALSE 20158
// exit ;
20156: GO 20195
// DestroyUnit ( tmp [ 1 ] ) ;
20158: LD_VAR 0 2
20162: PUSH
20163: LD_INT 1
20165: ARRAY
20166: PPUSH
20167: CALL_OW 65
// end ; 5 .. 7 :
20171: GO 20195
20173: LD_INT 5
20175: DOUBLE
20176: GREATEREQUAL
20177: IFFALSE 20185
20179: LD_INT 7
20181: DOUBLE
20182: LESSEQUAL
20183: IFTRUE 20187
20185: GO 20194
20187: POP
// StreamSibBomb ; end ;
20188: CALL 16445 0 0
20192: GO 20195
20194: POP
// end ;
20195: PPOPN 3
20197: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20198: LD_EXP 43
20202: PUSH
20203: LD_EXP 93
20207: AND
20208: IFFALSE 20364
20210: GO 20212
20212: DISABLE
20213: LD_INT 0
20215: PPUSH
20216: PPUSH
20217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20218: LD_ADDR_VAR 0 2
20222: PUSH
20223: LD_INT 81
20225: PUSH
20226: LD_OWVAR 2
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: LD_INT 21
20240: PUSH
20241: LD_INT 1
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 21
20250: PUSH
20251: LD_INT 2
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: LIST
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PPUSH
20267: CALL_OW 69
20271: ST_TO_ADDR
// if not tmp then
20272: LD_VAR 0 2
20276: NOT
20277: IFFALSE 20281
// exit ;
20279: GO 20364
// p := 0 ;
20281: LD_ADDR_VAR 0 3
20285: PUSH
20286: LD_INT 0
20288: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20289: LD_INT 35
20291: PPUSH
20292: CALL_OW 67
// p := p + 1 ;
20296: LD_ADDR_VAR 0 3
20300: PUSH
20301: LD_VAR 0 3
20305: PUSH
20306: LD_INT 1
20308: PLUS
20309: ST_TO_ADDR
// for i in tmp do
20310: LD_ADDR_VAR 0 1
20314: PUSH
20315: LD_VAR 0 2
20319: PUSH
20320: FOR_IN
20321: IFFALSE 20352
// if GetLives ( i ) < 1000 then
20323: LD_VAR 0 1
20327: PPUSH
20328: CALL_OW 256
20332: PUSH
20333: LD_INT 1000
20335: LESS
20336: IFFALSE 20350
// SetLives ( i , 1000 ) ;
20338: LD_VAR 0 1
20342: PPUSH
20343: LD_INT 1000
20345: PPUSH
20346: CALL_OW 234
20350: GO 20320
20352: POP
20353: POP
// until p > 20 ;
20354: LD_VAR 0 3
20358: PUSH
20359: LD_INT 20
20361: GREATER
20362: IFFALSE 20289
// end ;
20364: PPOPN 3
20366: END
// every 0 0$1 trigger StreamModeActive and sTime do
20367: LD_EXP 43
20371: PUSH
20372: LD_EXP 94
20376: AND
20377: IFFALSE 20412
20379: GO 20381
20381: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20382: LD_INT 28
20384: PPUSH
20385: LD_OWVAR 2
20389: PPUSH
20390: LD_INT 2
20392: PPUSH
20393: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20397: LD_INT 30
20399: PPUSH
20400: LD_OWVAR 2
20404: PPUSH
20405: LD_INT 2
20407: PPUSH
20408: CALL_OW 322
// end ;
20412: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20413: LD_EXP 43
20417: PUSH
20418: LD_EXP 95
20422: AND
20423: IFFALSE 20544
20425: GO 20427
20427: DISABLE
20428: LD_INT 0
20430: PPUSH
20431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20432: LD_ADDR_VAR 0 2
20436: PUSH
20437: LD_INT 22
20439: PUSH
20440: LD_OWVAR 2
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 21
20451: PUSH
20452: LD_INT 1
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 3
20461: PUSH
20462: LD_INT 23
20464: PUSH
20465: LD_INT 0
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: LIST
20480: PPUSH
20481: CALL_OW 69
20485: ST_TO_ADDR
// if not tmp then
20486: LD_VAR 0 2
20490: NOT
20491: IFFALSE 20495
// exit ;
20493: GO 20544
// for i in tmp do
20495: LD_ADDR_VAR 0 1
20499: PUSH
20500: LD_VAR 0 2
20504: PUSH
20505: FOR_IN
20506: IFFALSE 20542
// begin if Crawls ( i ) then
20508: LD_VAR 0 1
20512: PPUSH
20513: CALL_OW 318
20517: IFFALSE 20528
// ComWalk ( i ) ;
20519: LD_VAR 0 1
20523: PPUSH
20524: CALL_OW 138
// SetClass ( i , 2 ) ;
20528: LD_VAR 0 1
20532: PPUSH
20533: LD_INT 2
20535: PPUSH
20536: CALL_OW 336
// end ;
20540: GO 20505
20542: POP
20543: POP
// end ;
20544: PPOPN 2
20546: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20547: LD_EXP 43
20551: PUSH
20552: LD_EXP 96
20556: AND
20557: IFFALSE 20838
20559: GO 20561
20561: DISABLE
20562: LD_INT 0
20564: PPUSH
20565: PPUSH
20566: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20567: LD_OWVAR 2
20571: PPUSH
20572: LD_INT 9
20574: PPUSH
20575: LD_INT 1
20577: PPUSH
20578: LD_INT 1
20580: PPUSH
20581: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20585: LD_INT 9
20587: PPUSH
20588: LD_OWVAR 2
20592: PPUSH
20593: CALL_OW 343
// uc_side := 9 ;
20597: LD_ADDR_OWVAR 20
20601: PUSH
20602: LD_INT 9
20604: ST_TO_ADDR
// uc_nation := 2 ;
20605: LD_ADDR_OWVAR 21
20609: PUSH
20610: LD_INT 2
20612: ST_TO_ADDR
// hc_name := Dark Warrior ;
20613: LD_ADDR_OWVAR 26
20617: PUSH
20618: LD_STRING Dark Warrior
20620: ST_TO_ADDR
// hc_gallery :=  ;
20621: LD_ADDR_OWVAR 33
20625: PUSH
20626: LD_STRING 
20628: ST_TO_ADDR
// hc_noskilllimit := true ;
20629: LD_ADDR_OWVAR 76
20633: PUSH
20634: LD_INT 1
20636: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20637: LD_ADDR_OWVAR 31
20641: PUSH
20642: LD_INT 30
20644: PUSH
20645: LD_INT 30
20647: PUSH
20648: LD_INT 30
20650: PUSH
20651: LD_INT 30
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: ST_TO_ADDR
// un := CreateHuman ;
20660: LD_ADDR_VAR 0 3
20664: PUSH
20665: CALL_OW 44
20669: ST_TO_ADDR
// hc_noskilllimit := false ;
20670: LD_ADDR_OWVAR 76
20674: PUSH
20675: LD_INT 0
20677: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20678: LD_VAR 0 3
20682: PPUSH
20683: LD_INT 1
20685: PPUSH
20686: CALL_OW 51
// p := 0 ;
20690: LD_ADDR_VAR 0 2
20694: PUSH
20695: LD_INT 0
20697: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20698: LD_INT 35
20700: PPUSH
20701: CALL_OW 67
// p := p + 1 ;
20705: LD_ADDR_VAR 0 2
20709: PUSH
20710: LD_VAR 0 2
20714: PUSH
20715: LD_INT 1
20717: PLUS
20718: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20719: LD_VAR 0 3
20723: PPUSH
20724: CALL_OW 256
20728: PUSH
20729: LD_INT 1000
20731: LESS
20732: IFFALSE 20746
// SetLives ( un , 1000 ) ;
20734: LD_VAR 0 3
20738: PPUSH
20739: LD_INT 1000
20741: PPUSH
20742: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20746: LD_VAR 0 3
20750: PPUSH
20751: LD_INT 81
20753: PUSH
20754: LD_OWVAR 2
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 91
20765: PUSH
20766: LD_VAR 0 3
20770: PUSH
20771: LD_INT 30
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: LIST
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PPUSH
20783: CALL_OW 69
20787: PPUSH
20788: LD_VAR 0 3
20792: PPUSH
20793: CALL_OW 74
20797: PPUSH
20798: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20802: LD_VAR 0 2
20806: PUSH
20807: LD_INT 60
20809: GREATER
20810: PUSH
20811: LD_VAR 0 3
20815: PPUSH
20816: CALL_OW 301
20820: OR
20821: IFFALSE 20698
// if un then
20823: LD_VAR 0 3
20827: IFFALSE 20838
// RemoveUnit ( un ) ;
20829: LD_VAR 0 3
20833: PPUSH
20834: CALL_OW 64
// end ;
20838: PPOPN 3
20840: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20841: LD_INT 0
20843: PPUSH
// case cmd of 301 :
20844: LD_VAR 0 1
20848: PUSH
20849: LD_INT 301
20851: DOUBLE
20852: EQUAL
20853: IFTRUE 20857
20855: GO 20889
20857: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20858: LD_VAR 0 6
20862: PPUSH
20863: LD_VAR 0 7
20867: PPUSH
20868: LD_VAR 0 8
20872: PPUSH
20873: LD_VAR 0 4
20877: PPUSH
20878: LD_VAR 0 5
20882: PPUSH
20883: CALL 22090 0 5
20887: GO 21010
20889: LD_INT 302
20891: DOUBLE
20892: EQUAL
20893: IFTRUE 20897
20895: GO 20934
20897: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20898: LD_VAR 0 6
20902: PPUSH
20903: LD_VAR 0 7
20907: PPUSH
20908: LD_VAR 0 8
20912: PPUSH
20913: LD_VAR 0 9
20917: PPUSH
20918: LD_VAR 0 4
20922: PPUSH
20923: LD_VAR 0 5
20927: PPUSH
20928: CALL 22181 0 6
20932: GO 21010
20934: LD_INT 303
20936: DOUBLE
20937: EQUAL
20938: IFTRUE 20942
20940: GO 20979
20942: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20943: LD_VAR 0 6
20947: PPUSH
20948: LD_VAR 0 7
20952: PPUSH
20953: LD_VAR 0 8
20957: PPUSH
20958: LD_VAR 0 9
20962: PPUSH
20963: LD_VAR 0 4
20967: PPUSH
20968: LD_VAR 0 5
20972: PPUSH
20973: CALL 21015 0 6
20977: GO 21010
20979: LD_INT 304
20981: DOUBLE
20982: EQUAL
20983: IFTRUE 20987
20985: GO 21009
20987: POP
// hHackTeleport ( unit , x , y ) ; end ;
20988: LD_VAR 0 2
20992: PPUSH
20993: LD_VAR 0 4
20997: PPUSH
20998: LD_VAR 0 5
21002: PPUSH
21003: CALL 22774 0 3
21007: GO 21010
21009: POP
// end ;
21010: LD_VAR 0 12
21014: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21015: LD_INT 0
21017: PPUSH
21018: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21019: LD_VAR 0 1
21023: PUSH
21024: LD_INT 1
21026: LESS
21027: PUSH
21028: LD_VAR 0 1
21032: PUSH
21033: LD_INT 3
21035: GREATER
21036: OR
21037: PUSH
21038: LD_VAR 0 5
21042: PPUSH
21043: LD_VAR 0 6
21047: PPUSH
21048: CALL_OW 428
21052: OR
21053: IFFALSE 21057
// exit ;
21055: GO 21777
// uc_side := your_side ;
21057: LD_ADDR_OWVAR 20
21061: PUSH
21062: LD_OWVAR 2
21066: ST_TO_ADDR
// uc_nation := nation ;
21067: LD_ADDR_OWVAR 21
21071: PUSH
21072: LD_VAR 0 1
21076: ST_TO_ADDR
// bc_level = 1 ;
21077: LD_ADDR_OWVAR 43
21081: PUSH
21082: LD_INT 1
21084: ST_TO_ADDR
// case btype of 1 :
21085: LD_VAR 0 2
21089: PUSH
21090: LD_INT 1
21092: DOUBLE
21093: EQUAL
21094: IFTRUE 21098
21096: GO 21109
21098: POP
// bc_type := b_depot ; 2 :
21099: LD_ADDR_OWVAR 42
21103: PUSH
21104: LD_INT 0
21106: ST_TO_ADDR
21107: GO 21721
21109: LD_INT 2
21111: DOUBLE
21112: EQUAL
21113: IFTRUE 21117
21115: GO 21128
21117: POP
// bc_type := b_warehouse ; 3 :
21118: LD_ADDR_OWVAR 42
21122: PUSH
21123: LD_INT 1
21125: ST_TO_ADDR
21126: GO 21721
21128: LD_INT 3
21130: DOUBLE
21131: EQUAL
21132: IFTRUE 21136
21134: GO 21147
21136: POP
// bc_type := b_lab ; 4 .. 9 :
21137: LD_ADDR_OWVAR 42
21141: PUSH
21142: LD_INT 6
21144: ST_TO_ADDR
21145: GO 21721
21147: LD_INT 4
21149: DOUBLE
21150: GREATEREQUAL
21151: IFFALSE 21159
21153: LD_INT 9
21155: DOUBLE
21156: LESSEQUAL
21157: IFTRUE 21161
21159: GO 21213
21161: POP
// begin bc_type := b_lab_half ;
21162: LD_ADDR_OWVAR 42
21166: PUSH
21167: LD_INT 7
21169: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21170: LD_ADDR_OWVAR 44
21174: PUSH
21175: LD_INT 10
21177: PUSH
21178: LD_INT 11
21180: PUSH
21181: LD_INT 12
21183: PUSH
21184: LD_INT 15
21186: PUSH
21187: LD_INT 14
21189: PUSH
21190: LD_INT 13
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: PUSH
21201: LD_VAR 0 2
21205: PUSH
21206: LD_INT 3
21208: MINUS
21209: ARRAY
21210: ST_TO_ADDR
// end ; 10 .. 13 :
21211: GO 21721
21213: LD_INT 10
21215: DOUBLE
21216: GREATEREQUAL
21217: IFFALSE 21225
21219: LD_INT 13
21221: DOUBLE
21222: LESSEQUAL
21223: IFTRUE 21227
21225: GO 21304
21227: POP
// begin bc_type := b_lab_full ;
21228: LD_ADDR_OWVAR 42
21232: PUSH
21233: LD_INT 8
21235: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21236: LD_ADDR_OWVAR 44
21240: PUSH
21241: LD_INT 10
21243: PUSH
21244: LD_INT 12
21246: PUSH
21247: LD_INT 14
21249: PUSH
21250: LD_INT 13
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: PUSH
21259: LD_VAR 0 2
21263: PUSH
21264: LD_INT 9
21266: MINUS
21267: ARRAY
21268: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21269: LD_ADDR_OWVAR 45
21273: PUSH
21274: LD_INT 11
21276: PUSH
21277: LD_INT 15
21279: PUSH
21280: LD_INT 12
21282: PUSH
21283: LD_INT 15
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: PUSH
21292: LD_VAR 0 2
21296: PUSH
21297: LD_INT 9
21299: MINUS
21300: ARRAY
21301: ST_TO_ADDR
// end ; 14 :
21302: GO 21721
21304: LD_INT 14
21306: DOUBLE
21307: EQUAL
21308: IFTRUE 21312
21310: GO 21323
21312: POP
// bc_type := b_workshop ; 15 :
21313: LD_ADDR_OWVAR 42
21317: PUSH
21318: LD_INT 2
21320: ST_TO_ADDR
21321: GO 21721
21323: LD_INT 15
21325: DOUBLE
21326: EQUAL
21327: IFTRUE 21331
21329: GO 21342
21331: POP
// bc_type := b_factory ; 16 :
21332: LD_ADDR_OWVAR 42
21336: PUSH
21337: LD_INT 3
21339: ST_TO_ADDR
21340: GO 21721
21342: LD_INT 16
21344: DOUBLE
21345: EQUAL
21346: IFTRUE 21350
21348: GO 21361
21350: POP
// bc_type := b_ext_gun ; 17 :
21351: LD_ADDR_OWVAR 42
21355: PUSH
21356: LD_INT 17
21358: ST_TO_ADDR
21359: GO 21721
21361: LD_INT 17
21363: DOUBLE
21364: EQUAL
21365: IFTRUE 21369
21367: GO 21397
21369: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21370: LD_ADDR_OWVAR 42
21374: PUSH
21375: LD_INT 19
21377: PUSH
21378: LD_INT 23
21380: PUSH
21381: LD_INT 19
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: LIST
21388: PUSH
21389: LD_VAR 0 1
21393: ARRAY
21394: ST_TO_ADDR
21395: GO 21721
21397: LD_INT 18
21399: DOUBLE
21400: EQUAL
21401: IFTRUE 21405
21403: GO 21416
21405: POP
// bc_type := b_ext_radar ; 19 :
21406: LD_ADDR_OWVAR 42
21410: PUSH
21411: LD_INT 20
21413: ST_TO_ADDR
21414: GO 21721
21416: LD_INT 19
21418: DOUBLE
21419: EQUAL
21420: IFTRUE 21424
21422: GO 21435
21424: POP
// bc_type := b_ext_radio ; 20 :
21425: LD_ADDR_OWVAR 42
21429: PUSH
21430: LD_INT 22
21432: ST_TO_ADDR
21433: GO 21721
21435: LD_INT 20
21437: DOUBLE
21438: EQUAL
21439: IFTRUE 21443
21441: GO 21454
21443: POP
// bc_type := b_ext_siberium ; 21 :
21444: LD_ADDR_OWVAR 42
21448: PUSH
21449: LD_INT 21
21451: ST_TO_ADDR
21452: GO 21721
21454: LD_INT 21
21456: DOUBLE
21457: EQUAL
21458: IFTRUE 21462
21460: GO 21473
21462: POP
// bc_type := b_ext_computer ; 22 :
21463: LD_ADDR_OWVAR 42
21467: PUSH
21468: LD_INT 24
21470: ST_TO_ADDR
21471: GO 21721
21473: LD_INT 22
21475: DOUBLE
21476: EQUAL
21477: IFTRUE 21481
21479: GO 21492
21481: POP
// bc_type := b_ext_track ; 23 :
21482: LD_ADDR_OWVAR 42
21486: PUSH
21487: LD_INT 16
21489: ST_TO_ADDR
21490: GO 21721
21492: LD_INT 23
21494: DOUBLE
21495: EQUAL
21496: IFTRUE 21500
21498: GO 21511
21500: POP
// bc_type := b_ext_laser ; 24 :
21501: LD_ADDR_OWVAR 42
21505: PUSH
21506: LD_INT 25
21508: ST_TO_ADDR
21509: GO 21721
21511: LD_INT 24
21513: DOUBLE
21514: EQUAL
21515: IFTRUE 21519
21517: GO 21530
21519: POP
// bc_type := b_control_tower ; 25 :
21520: LD_ADDR_OWVAR 42
21524: PUSH
21525: LD_INT 36
21527: ST_TO_ADDR
21528: GO 21721
21530: LD_INT 25
21532: DOUBLE
21533: EQUAL
21534: IFTRUE 21538
21536: GO 21549
21538: POP
// bc_type := b_breastwork ; 26 :
21539: LD_ADDR_OWVAR 42
21543: PUSH
21544: LD_INT 31
21546: ST_TO_ADDR
21547: GO 21721
21549: LD_INT 26
21551: DOUBLE
21552: EQUAL
21553: IFTRUE 21557
21555: GO 21568
21557: POP
// bc_type := b_bunker ; 27 :
21558: LD_ADDR_OWVAR 42
21562: PUSH
21563: LD_INT 32
21565: ST_TO_ADDR
21566: GO 21721
21568: LD_INT 27
21570: DOUBLE
21571: EQUAL
21572: IFTRUE 21576
21574: GO 21587
21576: POP
// bc_type := b_turret ; 28 :
21577: LD_ADDR_OWVAR 42
21581: PUSH
21582: LD_INT 33
21584: ST_TO_ADDR
21585: GO 21721
21587: LD_INT 28
21589: DOUBLE
21590: EQUAL
21591: IFTRUE 21595
21593: GO 21606
21595: POP
// bc_type := b_armoury ; 29 :
21596: LD_ADDR_OWVAR 42
21600: PUSH
21601: LD_INT 4
21603: ST_TO_ADDR
21604: GO 21721
21606: LD_INT 29
21608: DOUBLE
21609: EQUAL
21610: IFTRUE 21614
21612: GO 21625
21614: POP
// bc_type := b_barracks ; 30 :
21615: LD_ADDR_OWVAR 42
21619: PUSH
21620: LD_INT 5
21622: ST_TO_ADDR
21623: GO 21721
21625: LD_INT 30
21627: DOUBLE
21628: EQUAL
21629: IFTRUE 21633
21631: GO 21644
21633: POP
// bc_type := b_solar_power ; 31 :
21634: LD_ADDR_OWVAR 42
21638: PUSH
21639: LD_INT 27
21641: ST_TO_ADDR
21642: GO 21721
21644: LD_INT 31
21646: DOUBLE
21647: EQUAL
21648: IFTRUE 21652
21650: GO 21663
21652: POP
// bc_type := b_oil_power ; 32 :
21653: LD_ADDR_OWVAR 42
21657: PUSH
21658: LD_INT 26
21660: ST_TO_ADDR
21661: GO 21721
21663: LD_INT 32
21665: DOUBLE
21666: EQUAL
21667: IFTRUE 21671
21669: GO 21682
21671: POP
// bc_type := b_siberite_power ; 33 :
21672: LD_ADDR_OWVAR 42
21676: PUSH
21677: LD_INT 28
21679: ST_TO_ADDR
21680: GO 21721
21682: LD_INT 33
21684: DOUBLE
21685: EQUAL
21686: IFTRUE 21690
21688: GO 21701
21690: POP
// bc_type := b_oil_mine ; 34 :
21691: LD_ADDR_OWVAR 42
21695: PUSH
21696: LD_INT 29
21698: ST_TO_ADDR
21699: GO 21721
21701: LD_INT 34
21703: DOUBLE
21704: EQUAL
21705: IFTRUE 21709
21707: GO 21720
21709: POP
// bc_type := b_siberite_mine ; end ;
21710: LD_ADDR_OWVAR 42
21714: PUSH
21715: LD_INT 30
21717: ST_TO_ADDR
21718: GO 21721
21720: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21721: LD_ADDR_VAR 0 8
21725: PUSH
21726: LD_VAR 0 5
21730: PPUSH
21731: LD_VAR 0 6
21735: PPUSH
21736: LD_VAR 0 3
21740: PPUSH
21741: CALL_OW 47
21745: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21746: LD_OWVAR 42
21750: PUSH
21751: LD_INT 32
21753: PUSH
21754: LD_INT 33
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: IN
21761: IFFALSE 21777
// PlaceWeaponTurret ( b , weapon ) ;
21763: LD_VAR 0 8
21767: PPUSH
21768: LD_VAR 0 4
21772: PPUSH
21773: CALL_OW 431
// end ;
21777: LD_VAR 0 7
21781: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21782: LD_INT 0
21784: PPUSH
21785: PPUSH
21786: PPUSH
21787: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21788: LD_ADDR_VAR 0 4
21792: PUSH
21793: LD_INT 22
21795: PUSH
21796: LD_OWVAR 2
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 2
21807: PUSH
21808: LD_INT 30
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 30
21820: PUSH
21821: LD_INT 1
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: LIST
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PPUSH
21837: CALL_OW 69
21841: ST_TO_ADDR
// if not tmp then
21842: LD_VAR 0 4
21846: NOT
21847: IFFALSE 21851
// exit ;
21849: GO 21910
// for i in tmp do
21851: LD_ADDR_VAR 0 2
21855: PUSH
21856: LD_VAR 0 4
21860: PUSH
21861: FOR_IN
21862: IFFALSE 21908
// for j = 1 to 3 do
21864: LD_ADDR_VAR 0 3
21868: PUSH
21869: DOUBLE
21870: LD_INT 1
21872: DEC
21873: ST_TO_ADDR
21874: LD_INT 3
21876: PUSH
21877: FOR_TO
21878: IFFALSE 21904
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21880: LD_VAR 0 2
21884: PPUSH
21885: CALL_OW 274
21889: PPUSH
21890: LD_VAR 0 3
21894: PPUSH
21895: LD_INT 99999
21897: PPUSH
21898: CALL_OW 277
21902: GO 21877
21904: POP
21905: POP
21906: GO 21861
21908: POP
21909: POP
// end ;
21910: LD_VAR 0 1
21914: RET
// export function hHackSetLevel10 ; var i , j ; begin
21915: LD_INT 0
21917: PPUSH
21918: PPUSH
21919: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21920: LD_ADDR_VAR 0 2
21924: PUSH
21925: LD_INT 21
21927: PUSH
21928: LD_INT 1
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PPUSH
21935: CALL_OW 69
21939: PUSH
21940: FOR_IN
21941: IFFALSE 21993
// if IsSelected ( i ) then
21943: LD_VAR 0 2
21947: PPUSH
21948: CALL_OW 306
21952: IFFALSE 21991
// begin for j := 1 to 4 do
21954: LD_ADDR_VAR 0 3
21958: PUSH
21959: DOUBLE
21960: LD_INT 1
21962: DEC
21963: ST_TO_ADDR
21964: LD_INT 4
21966: PUSH
21967: FOR_TO
21968: IFFALSE 21989
// SetSkill ( i , j , 10 ) ;
21970: LD_VAR 0 2
21974: PPUSH
21975: LD_VAR 0 3
21979: PPUSH
21980: LD_INT 10
21982: PPUSH
21983: CALL_OW 237
21987: GO 21967
21989: POP
21990: POP
// end ;
21991: GO 21940
21993: POP
21994: POP
// end ;
21995: LD_VAR 0 1
21999: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22000: LD_INT 0
22002: PPUSH
22003: PPUSH
22004: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22005: LD_ADDR_VAR 0 2
22009: PUSH
22010: LD_INT 22
22012: PUSH
22013: LD_OWVAR 2
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 21
22024: PUSH
22025: LD_INT 1
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PPUSH
22036: CALL_OW 69
22040: PUSH
22041: FOR_IN
22042: IFFALSE 22083
// begin for j := 1 to 4 do
22044: LD_ADDR_VAR 0 3
22048: PUSH
22049: DOUBLE
22050: LD_INT 1
22052: DEC
22053: ST_TO_ADDR
22054: LD_INT 4
22056: PUSH
22057: FOR_TO
22058: IFFALSE 22079
// SetSkill ( i , j , 10 ) ;
22060: LD_VAR 0 2
22064: PPUSH
22065: LD_VAR 0 3
22069: PPUSH
22070: LD_INT 10
22072: PPUSH
22073: CALL_OW 237
22077: GO 22057
22079: POP
22080: POP
// end ;
22081: GO 22041
22083: POP
22084: POP
// end ;
22085: LD_VAR 0 1
22089: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22090: LD_INT 0
22092: PPUSH
// uc_side := your_side ;
22093: LD_ADDR_OWVAR 20
22097: PUSH
22098: LD_OWVAR 2
22102: ST_TO_ADDR
// uc_nation := nation ;
22103: LD_ADDR_OWVAR 21
22107: PUSH
22108: LD_VAR 0 1
22112: ST_TO_ADDR
// InitHc ;
22113: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22117: LD_INT 0
22119: PPUSH
22120: LD_VAR 0 2
22124: PPUSH
22125: LD_VAR 0 3
22129: PPUSH
22130: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22134: LD_VAR 0 4
22138: PPUSH
22139: LD_VAR 0 5
22143: PPUSH
22144: CALL_OW 428
22148: PUSH
22149: LD_INT 0
22151: EQUAL
22152: IFFALSE 22176
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22154: CALL_OW 44
22158: PPUSH
22159: LD_VAR 0 4
22163: PPUSH
22164: LD_VAR 0 5
22168: PPUSH
22169: LD_INT 1
22171: PPUSH
22172: CALL_OW 48
// end ;
22176: LD_VAR 0 6
22180: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22181: LD_INT 0
22183: PPUSH
22184: PPUSH
// uc_side := your_side ;
22185: LD_ADDR_OWVAR 20
22189: PUSH
22190: LD_OWVAR 2
22194: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22195: LD_VAR 0 1
22199: PUSH
22200: LD_INT 1
22202: PUSH
22203: LD_INT 2
22205: PUSH
22206: LD_INT 3
22208: PUSH
22209: LD_INT 4
22211: PUSH
22212: LD_INT 5
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: IN
22222: IFFALSE 22234
// uc_nation := nation_american else
22224: LD_ADDR_OWVAR 21
22228: PUSH
22229: LD_INT 1
22231: ST_TO_ADDR
22232: GO 22277
// if chassis in [ 11 , 12 , 13 , 14 ] then
22234: LD_VAR 0 1
22238: PUSH
22239: LD_INT 11
22241: PUSH
22242: LD_INT 12
22244: PUSH
22245: LD_INT 13
22247: PUSH
22248: LD_INT 14
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: IN
22257: IFFALSE 22269
// uc_nation := nation_arabian else
22259: LD_ADDR_OWVAR 21
22263: PUSH
22264: LD_INT 2
22266: ST_TO_ADDR
22267: GO 22277
// uc_nation := nation_russian ;
22269: LD_ADDR_OWVAR 21
22273: PUSH
22274: LD_INT 3
22276: ST_TO_ADDR
// vc_chassis := chassis ;
22277: LD_ADDR_OWVAR 37
22281: PUSH
22282: LD_VAR 0 1
22286: ST_TO_ADDR
// vc_engine := engine ;
22287: LD_ADDR_OWVAR 39
22291: PUSH
22292: LD_VAR 0 2
22296: ST_TO_ADDR
// vc_control := control ;
22297: LD_ADDR_OWVAR 38
22301: PUSH
22302: LD_VAR 0 3
22306: ST_TO_ADDR
// vc_weapon := weapon ;
22307: LD_ADDR_OWVAR 40
22311: PUSH
22312: LD_VAR 0 4
22316: ST_TO_ADDR
// un := CreateVehicle ;
22317: LD_ADDR_VAR 0 8
22321: PUSH
22322: CALL_OW 45
22326: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22327: LD_VAR 0 8
22331: PPUSH
22332: LD_INT 0
22334: PPUSH
22335: LD_INT 5
22337: PPUSH
22338: CALL_OW 12
22342: PPUSH
22343: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22347: LD_VAR 0 8
22351: PPUSH
22352: LD_VAR 0 5
22356: PPUSH
22357: LD_VAR 0 6
22361: PPUSH
22362: LD_INT 1
22364: PPUSH
22365: CALL_OW 48
// end ;
22369: LD_VAR 0 7
22373: RET
// export hInvincible ; every 1 do
22374: GO 22376
22376: DISABLE
// hInvincible := [ ] ;
22377: LD_ADDR_EXP 97
22381: PUSH
22382: EMPTY
22383: ST_TO_ADDR
22384: END
// every 10 do var i ;
22385: GO 22387
22387: DISABLE
22388: LD_INT 0
22390: PPUSH
// begin enable ;
22391: ENABLE
// if not hInvincible then
22392: LD_EXP 97
22396: NOT
22397: IFFALSE 22401
// exit ;
22399: GO 22445
// for i in hInvincible do
22401: LD_ADDR_VAR 0 1
22405: PUSH
22406: LD_EXP 97
22410: PUSH
22411: FOR_IN
22412: IFFALSE 22443
// if GetLives ( i ) < 1000 then
22414: LD_VAR 0 1
22418: PPUSH
22419: CALL_OW 256
22423: PUSH
22424: LD_INT 1000
22426: LESS
22427: IFFALSE 22441
// SetLives ( i , 1000 ) ;
22429: LD_VAR 0 1
22433: PPUSH
22434: LD_INT 1000
22436: PPUSH
22437: CALL_OW 234
22441: GO 22411
22443: POP
22444: POP
// end ;
22445: PPOPN 1
22447: END
// export function hHackInvincible ; var i ; begin
22448: LD_INT 0
22450: PPUSH
22451: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22452: LD_ADDR_VAR 0 2
22456: PUSH
22457: LD_INT 2
22459: PUSH
22460: LD_INT 21
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 21
22472: PUSH
22473: LD_INT 2
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: PPUSH
22485: CALL_OW 69
22489: PUSH
22490: FOR_IN
22491: IFFALSE 22552
// if IsSelected ( i ) then
22493: LD_VAR 0 2
22497: PPUSH
22498: CALL_OW 306
22502: IFFALSE 22550
// begin if i in hInvincible then
22504: LD_VAR 0 2
22508: PUSH
22509: LD_EXP 97
22513: IN
22514: IFFALSE 22534
// hInvincible := hInvincible diff i else
22516: LD_ADDR_EXP 97
22520: PUSH
22521: LD_EXP 97
22525: PUSH
22526: LD_VAR 0 2
22530: DIFF
22531: ST_TO_ADDR
22532: GO 22550
// hInvincible := hInvincible union i ;
22534: LD_ADDR_EXP 97
22538: PUSH
22539: LD_EXP 97
22543: PUSH
22544: LD_VAR 0 2
22548: UNION
22549: ST_TO_ADDR
// end ;
22550: GO 22490
22552: POP
22553: POP
// end ;
22554: LD_VAR 0 1
22558: RET
// export function hHackInvisible ; var i , j ; begin
22559: LD_INT 0
22561: PPUSH
22562: PPUSH
22563: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22564: LD_ADDR_VAR 0 2
22568: PUSH
22569: LD_INT 21
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PPUSH
22579: CALL_OW 69
22583: PUSH
22584: FOR_IN
22585: IFFALSE 22609
// if IsSelected ( i ) then
22587: LD_VAR 0 2
22591: PPUSH
22592: CALL_OW 306
22596: IFFALSE 22607
// ComForceInvisible ( i ) ;
22598: LD_VAR 0 2
22602: PPUSH
22603: CALL_OW 496
22607: GO 22584
22609: POP
22610: POP
// end ;
22611: LD_VAR 0 1
22615: RET
// export function hHackChangeYourSide ; begin
22616: LD_INT 0
22618: PPUSH
// if your_side = 8 then
22619: LD_OWVAR 2
22623: PUSH
22624: LD_INT 8
22626: EQUAL
22627: IFFALSE 22639
// your_side := 0 else
22629: LD_ADDR_OWVAR 2
22633: PUSH
22634: LD_INT 0
22636: ST_TO_ADDR
22637: GO 22653
// your_side := your_side + 1 ;
22639: LD_ADDR_OWVAR 2
22643: PUSH
22644: LD_OWVAR 2
22648: PUSH
22649: LD_INT 1
22651: PLUS
22652: ST_TO_ADDR
// end ;
22653: LD_VAR 0 1
22657: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22658: LD_INT 0
22660: PPUSH
22661: PPUSH
22662: PPUSH
// for i in all_units do
22663: LD_ADDR_VAR 0 2
22667: PUSH
22668: LD_OWVAR 3
22672: PUSH
22673: FOR_IN
22674: IFFALSE 22752
// if IsSelected ( i ) then
22676: LD_VAR 0 2
22680: PPUSH
22681: CALL_OW 306
22685: IFFALSE 22750
// begin j := GetSide ( i ) ;
22687: LD_ADDR_VAR 0 3
22691: PUSH
22692: LD_VAR 0 2
22696: PPUSH
22697: CALL_OW 255
22701: ST_TO_ADDR
// if j = 8 then
22702: LD_VAR 0 3
22706: PUSH
22707: LD_INT 8
22709: EQUAL
22710: IFFALSE 22722
// j := 0 else
22712: LD_ADDR_VAR 0 3
22716: PUSH
22717: LD_INT 0
22719: ST_TO_ADDR
22720: GO 22736
// j := j + 1 ;
22722: LD_ADDR_VAR 0 3
22726: PUSH
22727: LD_VAR 0 3
22731: PUSH
22732: LD_INT 1
22734: PLUS
22735: ST_TO_ADDR
// SetSide ( i , j ) ;
22736: LD_VAR 0 2
22740: PPUSH
22741: LD_VAR 0 3
22745: PPUSH
22746: CALL_OW 235
// end ;
22750: GO 22673
22752: POP
22753: POP
// end ;
22754: LD_VAR 0 1
22758: RET
// export function hHackFog ; begin
22759: LD_INT 0
22761: PPUSH
// FogOff ( true ) ;
22762: LD_INT 1
22764: PPUSH
22765: CALL_OW 344
// end ;
22769: LD_VAR 0 1
22773: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22774: LD_INT 0
22776: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22777: LD_VAR 0 1
22781: PPUSH
22782: LD_VAR 0 2
22786: PPUSH
22787: LD_VAR 0 3
22791: PPUSH
22792: LD_INT 1
22794: PPUSH
22795: LD_INT 1
22797: PPUSH
22798: CALL_OW 483
// CenterOnXY ( x , y ) ;
22802: LD_VAR 0 2
22806: PPUSH
22807: LD_VAR 0 3
22811: PPUSH
22812: CALL_OW 84
// end ; end_of_file
22816: LD_VAR 0 4
22820: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22821: LD_VAR 0 1
22825: PUSH
22826: LD_INT 200
22828: DOUBLE
22829: GREATEREQUAL
22830: IFFALSE 22838
22832: LD_INT 299
22834: DOUBLE
22835: LESSEQUAL
22836: IFTRUE 22840
22838: GO 22872
22840: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22841: LD_VAR 0 1
22845: PPUSH
22846: LD_VAR 0 2
22850: PPUSH
22851: LD_VAR 0 3
22855: PPUSH
22856: LD_VAR 0 4
22860: PPUSH
22861: LD_VAR 0 5
22865: PPUSH
22866: CALL 23066 0 5
22870: GO 22949
22872: LD_INT 300
22874: DOUBLE
22875: GREATEREQUAL
22876: IFFALSE 22884
22878: LD_INT 399
22880: DOUBLE
22881: LESSEQUAL
22882: IFTRUE 22886
22884: GO 22948
22886: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22887: LD_VAR 0 1
22891: PPUSH
22892: LD_VAR 0 2
22896: PPUSH
22897: LD_VAR 0 3
22901: PPUSH
22902: LD_VAR 0 4
22906: PPUSH
22907: LD_VAR 0 5
22911: PPUSH
22912: LD_VAR 0 6
22916: PPUSH
22917: LD_VAR 0 7
22921: PPUSH
22922: LD_VAR 0 8
22926: PPUSH
22927: LD_VAR 0 9
22931: PPUSH
22932: LD_VAR 0 10
22936: PPUSH
22937: LD_VAR 0 11
22941: PPUSH
22942: CALL 20841 0 11
22946: GO 22949
22948: POP
// end ; end_of_file
22949: PPOPN 11
22951: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22952: LD_INT 0
22954: PPUSH
22955: PPUSH
22956: PPUSH
22957: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22958: LD_VAR 0 1
22962: PPUSH
22963: CALL_OW 264
22967: PUSH
22968: LD_EXP 112
22972: EQUAL
22973: IFFALSE 23045
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22975: LD_INT 68
22977: PPUSH
22978: LD_VAR 0 1
22982: PPUSH
22983: CALL_OW 255
22987: PPUSH
22988: CALL_OW 321
22992: PUSH
22993: LD_INT 2
22995: EQUAL
22996: IFFALSE 23008
// eff := 70 else
22998: LD_ADDR_VAR 0 4
23002: PUSH
23003: LD_INT 70
23005: ST_TO_ADDR
23006: GO 23016
// eff := 30 ;
23008: LD_ADDR_VAR 0 4
23012: PUSH
23013: LD_INT 30
23015: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23016: LD_VAR 0 1
23020: PPUSH
23021: CALL_OW 250
23025: PPUSH
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 251
23035: PPUSH
23036: LD_VAR 0 4
23040: PPUSH
23041: CALL_OW 495
// end ; end ;
23045: LD_VAR 0 2
23049: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23050: LD_INT 0
23052: PPUSH
// end ;
23053: LD_VAR 0 4
23057: RET
// export function SOS_Command ( cmd ) ; begin
23058: LD_INT 0
23060: PPUSH
// end ;
23061: LD_VAR 0 2
23065: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23066: LD_INT 0
23068: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23069: LD_VAR 0 1
23073: PUSH
23074: LD_INT 250
23076: EQUAL
23077: PUSH
23078: LD_VAR 0 2
23082: PPUSH
23083: CALL_OW 264
23087: PUSH
23088: LD_EXP 115
23092: EQUAL
23093: AND
23094: IFFALSE 23115
// MinerPlaceMine ( unit , x , y ) ;
23096: LD_VAR 0 2
23100: PPUSH
23101: LD_VAR 0 4
23105: PPUSH
23106: LD_VAR 0 5
23110: PPUSH
23111: CALL 25456 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23115: LD_VAR 0 1
23119: PUSH
23120: LD_INT 251
23122: EQUAL
23123: PUSH
23124: LD_VAR 0 2
23128: PPUSH
23129: CALL_OW 264
23133: PUSH
23134: LD_EXP 115
23138: EQUAL
23139: AND
23140: IFFALSE 23161
// MinerDetonateMine ( unit , x , y ) ;
23142: LD_VAR 0 2
23146: PPUSH
23147: LD_VAR 0 4
23151: PPUSH
23152: LD_VAR 0 5
23156: PPUSH
23157: CALL 25733 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23161: LD_VAR 0 1
23165: PUSH
23166: LD_INT 252
23168: EQUAL
23169: PUSH
23170: LD_VAR 0 2
23174: PPUSH
23175: CALL_OW 264
23179: PUSH
23180: LD_EXP 115
23184: EQUAL
23185: AND
23186: IFFALSE 23207
// MinerCreateMinefield ( unit , x , y ) ;
23188: LD_VAR 0 2
23192: PPUSH
23193: LD_VAR 0 4
23197: PPUSH
23198: LD_VAR 0 5
23202: PPUSH
23203: CALL 26150 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23207: LD_VAR 0 1
23211: PUSH
23212: LD_INT 253
23214: EQUAL
23215: PUSH
23216: LD_VAR 0 2
23220: PPUSH
23221: CALL_OW 257
23225: PUSH
23226: LD_INT 5
23228: EQUAL
23229: AND
23230: IFFALSE 23251
// ComBinocular ( unit , x , y ) ;
23232: LD_VAR 0 2
23236: PPUSH
23237: LD_VAR 0 4
23241: PPUSH
23242: LD_VAR 0 5
23246: PPUSH
23247: CALL 26521 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23251: LD_VAR 0 1
23255: PUSH
23256: LD_INT 254
23258: EQUAL
23259: PUSH
23260: LD_VAR 0 2
23264: PPUSH
23265: CALL_OW 264
23269: PUSH
23270: LD_EXP 110
23274: EQUAL
23275: AND
23276: PUSH
23277: LD_VAR 0 3
23281: PPUSH
23282: CALL_OW 263
23286: PUSH
23287: LD_INT 3
23289: EQUAL
23290: AND
23291: IFFALSE 23307
// HackDestroyVehicle ( unit , selectedUnit ) ;
23293: LD_VAR 0 2
23297: PPUSH
23298: LD_VAR 0 3
23302: PPUSH
23303: CALL 24816 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23307: LD_VAR 0 1
23311: PUSH
23312: LD_INT 255
23314: EQUAL
23315: PUSH
23316: LD_VAR 0 2
23320: PPUSH
23321: CALL_OW 264
23325: PUSH
23326: LD_INT 14
23328: PUSH
23329: LD_INT 53
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: IN
23336: AND
23337: PUSH
23338: LD_VAR 0 4
23342: PPUSH
23343: LD_VAR 0 5
23347: PPUSH
23348: CALL_OW 488
23352: AND
23353: IFFALSE 23377
// CutTreeXYR ( unit , x , y , 12 ) ;
23355: LD_VAR 0 2
23359: PPUSH
23360: LD_VAR 0 4
23364: PPUSH
23365: LD_VAR 0 5
23369: PPUSH
23370: LD_INT 12
23372: PPUSH
23373: CALL 23382 0 4
// end ;
23377: LD_VAR 0 6
23381: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23382: LD_INT 0
23384: PPUSH
23385: PPUSH
23386: PPUSH
23387: PPUSH
23388: PPUSH
23389: PPUSH
23390: PPUSH
23391: PPUSH
23392: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23393: LD_VAR 0 1
23397: NOT
23398: PUSH
23399: LD_VAR 0 2
23403: PPUSH
23404: LD_VAR 0 3
23408: PPUSH
23409: CALL_OW 488
23413: NOT
23414: OR
23415: PUSH
23416: LD_VAR 0 4
23420: NOT
23421: OR
23422: IFFALSE 23426
// exit ;
23424: GO 23766
// list := [ ] ;
23426: LD_ADDR_VAR 0 13
23430: PUSH
23431: EMPTY
23432: ST_TO_ADDR
// if x - r < 0 then
23433: LD_VAR 0 2
23437: PUSH
23438: LD_VAR 0 4
23442: MINUS
23443: PUSH
23444: LD_INT 0
23446: LESS
23447: IFFALSE 23459
// min_x := 0 else
23449: LD_ADDR_VAR 0 7
23453: PUSH
23454: LD_INT 0
23456: ST_TO_ADDR
23457: GO 23475
// min_x := x - r ;
23459: LD_ADDR_VAR 0 7
23463: PUSH
23464: LD_VAR 0 2
23468: PUSH
23469: LD_VAR 0 4
23473: MINUS
23474: ST_TO_ADDR
// if y - r < 0 then
23475: LD_VAR 0 3
23479: PUSH
23480: LD_VAR 0 4
23484: MINUS
23485: PUSH
23486: LD_INT 0
23488: LESS
23489: IFFALSE 23501
// min_y := 0 else
23491: LD_ADDR_VAR 0 8
23495: PUSH
23496: LD_INT 0
23498: ST_TO_ADDR
23499: GO 23517
// min_y := y - r ;
23501: LD_ADDR_VAR 0 8
23505: PUSH
23506: LD_VAR 0 3
23510: PUSH
23511: LD_VAR 0 4
23515: MINUS
23516: ST_TO_ADDR
// max_x := x + r ;
23517: LD_ADDR_VAR 0 9
23521: PUSH
23522: LD_VAR 0 2
23526: PUSH
23527: LD_VAR 0 4
23531: PLUS
23532: ST_TO_ADDR
// max_y := y + r ;
23533: LD_ADDR_VAR 0 10
23537: PUSH
23538: LD_VAR 0 3
23542: PUSH
23543: LD_VAR 0 4
23547: PLUS
23548: ST_TO_ADDR
// for _x = min_x to max_x do
23549: LD_ADDR_VAR 0 11
23553: PUSH
23554: DOUBLE
23555: LD_VAR 0 7
23559: DEC
23560: ST_TO_ADDR
23561: LD_VAR 0 9
23565: PUSH
23566: FOR_TO
23567: IFFALSE 23684
// for _y = min_y to max_y do
23569: LD_ADDR_VAR 0 12
23573: PUSH
23574: DOUBLE
23575: LD_VAR 0 8
23579: DEC
23580: ST_TO_ADDR
23581: LD_VAR 0 10
23585: PUSH
23586: FOR_TO
23587: IFFALSE 23680
// begin if not ValidHex ( _x , _y ) then
23589: LD_VAR 0 11
23593: PPUSH
23594: LD_VAR 0 12
23598: PPUSH
23599: CALL_OW 488
23603: NOT
23604: IFFALSE 23608
// continue ;
23606: GO 23586
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23608: LD_VAR 0 11
23612: PPUSH
23613: LD_VAR 0 12
23617: PPUSH
23618: CALL_OW 351
23622: PUSH
23623: LD_VAR 0 11
23627: PPUSH
23628: LD_VAR 0 12
23632: PPUSH
23633: CALL_OW 554
23637: AND
23638: IFFALSE 23678
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23640: LD_ADDR_VAR 0 13
23644: PUSH
23645: LD_VAR 0 13
23649: PPUSH
23650: LD_VAR 0 13
23654: PUSH
23655: LD_INT 1
23657: PLUS
23658: PPUSH
23659: LD_VAR 0 11
23663: PUSH
23664: LD_VAR 0 12
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PPUSH
23673: CALL_OW 2
23677: ST_TO_ADDR
// end ;
23678: GO 23586
23680: POP
23681: POP
23682: GO 23566
23684: POP
23685: POP
// if not list then
23686: LD_VAR 0 13
23690: NOT
23691: IFFALSE 23695
// exit ;
23693: GO 23766
// for i in list do
23695: LD_ADDR_VAR 0 6
23699: PUSH
23700: LD_VAR 0 13
23704: PUSH
23705: FOR_IN
23706: IFFALSE 23764
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23708: LD_VAR 0 1
23712: PPUSH
23713: LD_STRING M
23715: PUSH
23716: LD_VAR 0 6
23720: PUSH
23721: LD_INT 1
23723: ARRAY
23724: PUSH
23725: LD_VAR 0 6
23729: PUSH
23730: LD_INT 2
23732: ARRAY
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: LD_INT 0
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: PUSH
23755: EMPTY
23756: LIST
23757: PPUSH
23758: CALL_OW 447
23762: GO 23705
23764: POP
23765: POP
// end ;
23766: LD_VAR 0 5
23770: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23771: LD_EXP 98
23775: NOT
23776: IFFALSE 23826
23778: GO 23780
23780: DISABLE
// begin initHack := true ;
23781: LD_ADDR_EXP 98
23785: PUSH
23786: LD_INT 1
23788: ST_TO_ADDR
// hackTanks := [ ] ;
23789: LD_ADDR_EXP 99
23793: PUSH
23794: EMPTY
23795: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23796: LD_ADDR_EXP 100
23800: PUSH
23801: EMPTY
23802: ST_TO_ADDR
// hackLimit := 3 ;
23803: LD_ADDR_EXP 101
23807: PUSH
23808: LD_INT 3
23810: ST_TO_ADDR
// hackDist := 12 ;
23811: LD_ADDR_EXP 102
23815: PUSH
23816: LD_INT 12
23818: ST_TO_ADDR
// hackCounter := [ ] ;
23819: LD_ADDR_EXP 103
23823: PUSH
23824: EMPTY
23825: ST_TO_ADDR
// end ;
23826: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23827: LD_EXP 98
23831: PUSH
23832: LD_INT 34
23834: PUSH
23835: LD_EXP 110
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PPUSH
23844: CALL_OW 69
23848: AND
23849: IFFALSE 24104
23851: GO 23853
23853: DISABLE
23854: LD_INT 0
23856: PPUSH
23857: PPUSH
// begin enable ;
23858: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23859: LD_ADDR_VAR 0 1
23863: PUSH
23864: LD_INT 34
23866: PUSH
23867: LD_EXP 110
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PPUSH
23876: CALL_OW 69
23880: PUSH
23881: FOR_IN
23882: IFFALSE 24102
// begin if not i in hackTanks then
23884: LD_VAR 0 1
23888: PUSH
23889: LD_EXP 99
23893: IN
23894: NOT
23895: IFFALSE 23978
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23897: LD_ADDR_EXP 99
23901: PUSH
23902: LD_EXP 99
23906: PPUSH
23907: LD_EXP 99
23911: PUSH
23912: LD_INT 1
23914: PLUS
23915: PPUSH
23916: LD_VAR 0 1
23920: PPUSH
23921: CALL_OW 1
23925: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23926: LD_ADDR_EXP 100
23930: PUSH
23931: LD_EXP 100
23935: PPUSH
23936: LD_EXP 100
23940: PUSH
23941: LD_INT 1
23943: PLUS
23944: PPUSH
23945: EMPTY
23946: PPUSH
23947: CALL_OW 1
23951: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23952: LD_ADDR_EXP 103
23956: PUSH
23957: LD_EXP 103
23961: PPUSH
23962: LD_EXP 103
23966: PUSH
23967: LD_INT 1
23969: PLUS
23970: PPUSH
23971: EMPTY
23972: PPUSH
23973: CALL_OW 1
23977: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23978: LD_VAR 0 1
23982: PPUSH
23983: CALL_OW 302
23987: NOT
23988: IFFALSE 24001
// begin HackUnlinkAll ( i ) ;
23990: LD_VAR 0 1
23994: PPUSH
23995: CALL 24107 0 1
// continue ;
23999: GO 23881
// end ; HackCheckCapturedStatus ( i ) ;
24001: LD_VAR 0 1
24005: PPUSH
24006: CALL 24550 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24010: LD_ADDR_VAR 0 2
24014: PUSH
24015: LD_INT 81
24017: PUSH
24018: LD_VAR 0 1
24022: PPUSH
24023: CALL_OW 255
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 33
24034: PUSH
24035: LD_INT 3
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 91
24044: PUSH
24045: LD_VAR 0 1
24049: PUSH
24050: LD_EXP 102
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 50
24062: PUSH
24063: EMPTY
24064: LIST
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: PPUSH
24072: CALL_OW 69
24076: ST_TO_ADDR
// if not tmp then
24077: LD_VAR 0 2
24081: NOT
24082: IFFALSE 24086
// continue ;
24084: GO 23881
// HackLink ( i , tmp ) ;
24086: LD_VAR 0 1
24090: PPUSH
24091: LD_VAR 0 2
24095: PPUSH
24096: CALL 24243 0 2
// end ;
24100: GO 23881
24102: POP
24103: POP
// end ;
24104: PPOPN 2
24106: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24107: LD_INT 0
24109: PPUSH
24110: PPUSH
24111: PPUSH
// if not hack in hackTanks then
24112: LD_VAR 0 1
24116: PUSH
24117: LD_EXP 99
24121: IN
24122: NOT
24123: IFFALSE 24127
// exit ;
24125: GO 24238
// index := GetElementIndex ( hackTanks , hack ) ;
24127: LD_ADDR_VAR 0 4
24131: PUSH
24132: LD_EXP 99
24136: PPUSH
24137: LD_VAR 0 1
24141: PPUSH
24142: CALL 31672 0 2
24146: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24147: LD_EXP 100
24151: PUSH
24152: LD_VAR 0 4
24156: ARRAY
24157: IFFALSE 24238
// begin for i in hackTanksCaptured [ index ] do
24159: LD_ADDR_VAR 0 3
24163: PUSH
24164: LD_EXP 100
24168: PUSH
24169: LD_VAR 0 4
24173: ARRAY
24174: PUSH
24175: FOR_IN
24176: IFFALSE 24202
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24178: LD_VAR 0 3
24182: PUSH
24183: LD_INT 1
24185: ARRAY
24186: PPUSH
24187: LD_VAR 0 3
24191: PUSH
24192: LD_INT 2
24194: ARRAY
24195: PPUSH
24196: CALL_OW 235
24200: GO 24175
24202: POP
24203: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24204: LD_ADDR_EXP 100
24208: PUSH
24209: LD_EXP 100
24213: PPUSH
24214: LD_VAR 0 4
24218: PPUSH
24219: EMPTY
24220: PPUSH
24221: CALL_OW 1
24225: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24226: LD_VAR 0 1
24230: PPUSH
24231: LD_INT 0
24233: PPUSH
24234: CALL_OW 505
// end ; end ;
24238: LD_VAR 0 2
24242: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24243: LD_INT 0
24245: PPUSH
24246: PPUSH
24247: PPUSH
// if not hack in hackTanks or not vehicles then
24248: LD_VAR 0 1
24252: PUSH
24253: LD_EXP 99
24257: IN
24258: NOT
24259: PUSH
24260: LD_VAR 0 2
24264: NOT
24265: OR
24266: IFFALSE 24270
// exit ;
24268: GO 24545
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24270: LD_ADDR_VAR 0 2
24274: PUSH
24275: LD_VAR 0 1
24279: PPUSH
24280: LD_VAR 0 2
24284: PPUSH
24285: LD_INT 1
24287: PPUSH
24288: LD_INT 1
24290: PPUSH
24291: CALL 32322 0 4
24295: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24296: LD_ADDR_VAR 0 5
24300: PUSH
24301: LD_EXP 99
24305: PPUSH
24306: LD_VAR 0 1
24310: PPUSH
24311: CALL 31672 0 2
24315: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24316: LD_EXP 100
24320: PUSH
24321: LD_VAR 0 5
24325: ARRAY
24326: PUSH
24327: LD_EXP 101
24331: LESS
24332: IFFALSE 24521
// begin for i := 1 to vehicles do
24334: LD_ADDR_VAR 0 4
24338: PUSH
24339: DOUBLE
24340: LD_INT 1
24342: DEC
24343: ST_TO_ADDR
24344: LD_VAR 0 2
24348: PUSH
24349: FOR_TO
24350: IFFALSE 24519
// begin if hackTanksCaptured [ index ] = hackLimit then
24352: LD_EXP 100
24356: PUSH
24357: LD_VAR 0 5
24361: ARRAY
24362: PUSH
24363: LD_EXP 101
24367: EQUAL
24368: IFFALSE 24372
// break ;
24370: GO 24519
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24372: LD_ADDR_EXP 103
24376: PUSH
24377: LD_EXP 103
24381: PPUSH
24382: LD_VAR 0 5
24386: PPUSH
24387: LD_EXP 103
24391: PUSH
24392: LD_VAR 0 5
24396: ARRAY
24397: PUSH
24398: LD_INT 1
24400: PLUS
24401: PPUSH
24402: CALL_OW 1
24406: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24407: LD_ADDR_EXP 100
24411: PUSH
24412: LD_EXP 100
24416: PPUSH
24417: LD_VAR 0 5
24421: PUSH
24422: LD_EXP 100
24426: PUSH
24427: LD_VAR 0 5
24431: ARRAY
24432: PUSH
24433: LD_INT 1
24435: PLUS
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PPUSH
24441: LD_VAR 0 2
24445: PUSH
24446: LD_VAR 0 4
24450: ARRAY
24451: PUSH
24452: LD_VAR 0 2
24456: PUSH
24457: LD_VAR 0 4
24461: ARRAY
24462: PPUSH
24463: CALL_OW 255
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PPUSH
24472: CALL 31887 0 3
24476: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24477: LD_VAR 0 2
24481: PUSH
24482: LD_VAR 0 4
24486: ARRAY
24487: PPUSH
24488: LD_VAR 0 1
24492: PPUSH
24493: CALL_OW 255
24497: PPUSH
24498: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24502: LD_VAR 0 2
24506: PUSH
24507: LD_VAR 0 4
24511: ARRAY
24512: PPUSH
24513: CALL_OW 141
// end ;
24517: GO 24349
24519: POP
24520: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24521: LD_VAR 0 1
24525: PPUSH
24526: LD_EXP 100
24530: PUSH
24531: LD_VAR 0 5
24535: ARRAY
24536: PUSH
24537: LD_INT 0
24539: PLUS
24540: PPUSH
24541: CALL_OW 505
// end ;
24545: LD_VAR 0 3
24549: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24550: LD_INT 0
24552: PPUSH
24553: PPUSH
24554: PPUSH
24555: PPUSH
// if not hack in hackTanks then
24556: LD_VAR 0 1
24560: PUSH
24561: LD_EXP 99
24565: IN
24566: NOT
24567: IFFALSE 24571
// exit ;
24569: GO 24811
// index := GetElementIndex ( hackTanks , hack ) ;
24571: LD_ADDR_VAR 0 4
24575: PUSH
24576: LD_EXP 99
24580: PPUSH
24581: LD_VAR 0 1
24585: PPUSH
24586: CALL 31672 0 2
24590: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24591: LD_ADDR_VAR 0 3
24595: PUSH
24596: DOUBLE
24597: LD_EXP 100
24601: PUSH
24602: LD_VAR 0 4
24606: ARRAY
24607: INC
24608: ST_TO_ADDR
24609: LD_INT 1
24611: PUSH
24612: FOR_DOWNTO
24613: IFFALSE 24785
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24615: LD_ADDR_VAR 0 5
24619: PUSH
24620: LD_EXP 100
24624: PUSH
24625: LD_VAR 0 4
24629: ARRAY
24630: PUSH
24631: LD_VAR 0 3
24635: ARRAY
24636: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24637: LD_VAR 0 5
24641: PUSH
24642: LD_INT 1
24644: ARRAY
24645: PPUSH
24646: CALL_OW 302
24650: NOT
24651: PUSH
24652: LD_VAR 0 5
24656: PUSH
24657: LD_INT 1
24659: ARRAY
24660: PPUSH
24661: CALL_OW 255
24665: PUSH
24666: LD_VAR 0 1
24670: PPUSH
24671: CALL_OW 255
24675: NONEQUAL
24676: OR
24677: IFFALSE 24783
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24679: LD_VAR 0 5
24683: PUSH
24684: LD_INT 1
24686: ARRAY
24687: PPUSH
24688: CALL_OW 305
24692: PUSH
24693: LD_VAR 0 5
24697: PUSH
24698: LD_INT 1
24700: ARRAY
24701: PPUSH
24702: CALL_OW 255
24706: PUSH
24707: LD_VAR 0 1
24711: PPUSH
24712: CALL_OW 255
24716: EQUAL
24717: AND
24718: IFFALSE 24742
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24720: LD_VAR 0 5
24724: PUSH
24725: LD_INT 1
24727: ARRAY
24728: PPUSH
24729: LD_VAR 0 5
24733: PUSH
24734: LD_INT 2
24736: ARRAY
24737: PPUSH
24738: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24742: LD_ADDR_EXP 100
24746: PUSH
24747: LD_EXP 100
24751: PPUSH
24752: LD_VAR 0 4
24756: PPUSH
24757: LD_EXP 100
24761: PUSH
24762: LD_VAR 0 4
24766: ARRAY
24767: PPUSH
24768: LD_VAR 0 3
24772: PPUSH
24773: CALL_OW 3
24777: PPUSH
24778: CALL_OW 1
24782: ST_TO_ADDR
// end ; end ;
24783: GO 24612
24785: POP
24786: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24787: LD_VAR 0 1
24791: PPUSH
24792: LD_EXP 100
24796: PUSH
24797: LD_VAR 0 4
24801: ARRAY
24802: PUSH
24803: LD_INT 0
24805: PLUS
24806: PPUSH
24807: CALL_OW 505
// end ;
24811: LD_VAR 0 2
24815: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24816: LD_INT 0
24818: PPUSH
24819: PPUSH
24820: PPUSH
24821: PPUSH
// if not hack in hackTanks then
24822: LD_VAR 0 1
24826: PUSH
24827: LD_EXP 99
24831: IN
24832: NOT
24833: IFFALSE 24837
// exit ;
24835: GO 24922
// index := GetElementIndex ( hackTanks , hack ) ;
24837: LD_ADDR_VAR 0 5
24841: PUSH
24842: LD_EXP 99
24846: PPUSH
24847: LD_VAR 0 1
24851: PPUSH
24852: CALL 31672 0 2
24856: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24857: LD_ADDR_VAR 0 4
24861: PUSH
24862: DOUBLE
24863: LD_INT 1
24865: DEC
24866: ST_TO_ADDR
24867: LD_EXP 100
24871: PUSH
24872: LD_VAR 0 5
24876: ARRAY
24877: PUSH
24878: FOR_TO
24879: IFFALSE 24920
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24881: LD_EXP 100
24885: PUSH
24886: LD_VAR 0 5
24890: ARRAY
24891: PUSH
24892: LD_VAR 0 4
24896: ARRAY
24897: PUSH
24898: LD_INT 1
24900: ARRAY
24901: PUSH
24902: LD_VAR 0 2
24906: EQUAL
24907: IFFALSE 24918
// KillUnit ( vehicle ) ;
24909: LD_VAR 0 2
24913: PPUSH
24914: CALL_OW 66
24918: GO 24878
24920: POP
24921: POP
// end ;
24922: LD_VAR 0 3
24926: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24927: LD_EXP 104
24931: NOT
24932: IFFALSE 24967
24934: GO 24936
24936: DISABLE
// begin initMiner := true ;
24937: LD_ADDR_EXP 104
24941: PUSH
24942: LD_INT 1
24944: ST_TO_ADDR
// minersList := [ ] ;
24945: LD_ADDR_EXP 105
24949: PUSH
24950: EMPTY
24951: ST_TO_ADDR
// minerMinesList := [ ] ;
24952: LD_ADDR_EXP 106
24956: PUSH
24957: EMPTY
24958: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24959: LD_ADDR_EXP 107
24963: PUSH
24964: LD_INT 5
24966: ST_TO_ADDR
// end ;
24967: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24968: LD_EXP 104
24972: PUSH
24973: LD_INT 34
24975: PUSH
24976: LD_EXP 115
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PPUSH
24985: CALL_OW 69
24989: AND
24990: IFFALSE 25453
24992: GO 24994
24994: DISABLE
24995: LD_INT 0
24997: PPUSH
24998: PPUSH
24999: PPUSH
25000: PPUSH
// begin enable ;
25001: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25002: LD_ADDR_VAR 0 1
25006: PUSH
25007: LD_INT 34
25009: PUSH
25010: LD_EXP 115
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PPUSH
25019: CALL_OW 69
25023: PUSH
25024: FOR_IN
25025: IFFALSE 25097
// begin if not i in minersList then
25027: LD_VAR 0 1
25031: PUSH
25032: LD_EXP 105
25036: IN
25037: NOT
25038: IFFALSE 25095
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25040: LD_ADDR_EXP 105
25044: PUSH
25045: LD_EXP 105
25049: PPUSH
25050: LD_EXP 105
25054: PUSH
25055: LD_INT 1
25057: PLUS
25058: PPUSH
25059: LD_VAR 0 1
25063: PPUSH
25064: CALL_OW 1
25068: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25069: LD_ADDR_EXP 106
25073: PUSH
25074: LD_EXP 106
25078: PPUSH
25079: LD_EXP 106
25083: PUSH
25084: LD_INT 1
25086: PLUS
25087: PPUSH
25088: EMPTY
25089: PPUSH
25090: CALL_OW 1
25094: ST_TO_ADDR
// end end ;
25095: GO 25024
25097: POP
25098: POP
// for i := minerMinesList downto 1 do
25099: LD_ADDR_VAR 0 1
25103: PUSH
25104: DOUBLE
25105: LD_EXP 106
25109: INC
25110: ST_TO_ADDR
25111: LD_INT 1
25113: PUSH
25114: FOR_DOWNTO
25115: IFFALSE 25451
// begin if IsLive ( minersList [ i ] ) then
25117: LD_EXP 105
25121: PUSH
25122: LD_VAR 0 1
25126: ARRAY
25127: PPUSH
25128: CALL_OW 300
25132: IFFALSE 25160
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25134: LD_EXP 105
25138: PUSH
25139: LD_VAR 0 1
25143: ARRAY
25144: PPUSH
25145: LD_EXP 106
25149: PUSH
25150: LD_VAR 0 1
25154: ARRAY
25155: PPUSH
25156: CALL_OW 505
// if not minerMinesList [ i ] then
25160: LD_EXP 106
25164: PUSH
25165: LD_VAR 0 1
25169: ARRAY
25170: NOT
25171: IFFALSE 25175
// continue ;
25173: GO 25114
// for j := minerMinesList [ i ] downto 1 do
25175: LD_ADDR_VAR 0 2
25179: PUSH
25180: DOUBLE
25181: LD_EXP 106
25185: PUSH
25186: LD_VAR 0 1
25190: ARRAY
25191: INC
25192: ST_TO_ADDR
25193: LD_INT 1
25195: PUSH
25196: FOR_DOWNTO
25197: IFFALSE 25447
// begin side := GetSide ( minersList [ i ] ) ;
25199: LD_ADDR_VAR 0 3
25203: PUSH
25204: LD_EXP 105
25208: PUSH
25209: LD_VAR 0 1
25213: ARRAY
25214: PPUSH
25215: CALL_OW 255
25219: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25220: LD_ADDR_VAR 0 4
25224: PUSH
25225: LD_EXP 106
25229: PUSH
25230: LD_VAR 0 1
25234: ARRAY
25235: PUSH
25236: LD_VAR 0 2
25240: ARRAY
25241: PUSH
25242: LD_INT 1
25244: ARRAY
25245: PPUSH
25246: LD_EXP 106
25250: PUSH
25251: LD_VAR 0 1
25255: ARRAY
25256: PUSH
25257: LD_VAR 0 2
25261: ARRAY
25262: PUSH
25263: LD_INT 2
25265: ARRAY
25266: PPUSH
25267: CALL_OW 428
25271: ST_TO_ADDR
// if not tmp then
25272: LD_VAR 0 4
25276: NOT
25277: IFFALSE 25281
// continue ;
25279: GO 25196
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25281: LD_VAR 0 4
25285: PUSH
25286: LD_INT 81
25288: PUSH
25289: LD_VAR 0 3
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PPUSH
25298: CALL_OW 69
25302: IN
25303: PUSH
25304: LD_EXP 106
25308: PUSH
25309: LD_VAR 0 1
25313: ARRAY
25314: PUSH
25315: LD_VAR 0 2
25319: ARRAY
25320: PUSH
25321: LD_INT 1
25323: ARRAY
25324: PPUSH
25325: LD_EXP 106
25329: PUSH
25330: LD_VAR 0 1
25334: ARRAY
25335: PUSH
25336: LD_VAR 0 2
25340: ARRAY
25341: PUSH
25342: LD_INT 2
25344: ARRAY
25345: PPUSH
25346: CALL_OW 458
25350: AND
25351: IFFALSE 25445
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25353: LD_EXP 106
25357: PUSH
25358: LD_VAR 0 1
25362: ARRAY
25363: PUSH
25364: LD_VAR 0 2
25368: ARRAY
25369: PUSH
25370: LD_INT 1
25372: ARRAY
25373: PPUSH
25374: LD_EXP 106
25378: PUSH
25379: LD_VAR 0 1
25383: ARRAY
25384: PUSH
25385: LD_VAR 0 2
25389: ARRAY
25390: PUSH
25391: LD_INT 2
25393: ARRAY
25394: PPUSH
25395: LD_VAR 0 3
25399: PPUSH
25400: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25404: LD_ADDR_EXP 106
25408: PUSH
25409: LD_EXP 106
25413: PPUSH
25414: LD_VAR 0 1
25418: PPUSH
25419: LD_EXP 106
25423: PUSH
25424: LD_VAR 0 1
25428: ARRAY
25429: PPUSH
25430: LD_VAR 0 2
25434: PPUSH
25435: CALL_OW 3
25439: PPUSH
25440: CALL_OW 1
25444: ST_TO_ADDR
// end ; end ;
25445: GO 25196
25447: POP
25448: POP
// end ;
25449: GO 25114
25451: POP
25452: POP
// end ;
25453: PPOPN 4
25455: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25456: LD_INT 0
25458: PPUSH
25459: PPUSH
// result := false ;
25460: LD_ADDR_VAR 0 4
25464: PUSH
25465: LD_INT 0
25467: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25468: LD_VAR 0 1
25472: PPUSH
25473: CALL_OW 264
25477: PUSH
25478: LD_EXP 115
25482: EQUAL
25483: NOT
25484: IFFALSE 25488
// exit ;
25486: GO 25728
// index := GetElementIndex ( minersList , unit ) ;
25488: LD_ADDR_VAR 0 5
25492: PUSH
25493: LD_EXP 105
25497: PPUSH
25498: LD_VAR 0 1
25502: PPUSH
25503: CALL 31672 0 2
25507: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25508: LD_EXP 106
25512: PUSH
25513: LD_VAR 0 5
25517: ARRAY
25518: PUSH
25519: LD_EXP 107
25523: GREATEREQUAL
25524: IFFALSE 25528
// exit ;
25526: GO 25728
// ComMoveXY ( unit , x , y ) ;
25528: LD_VAR 0 1
25532: PPUSH
25533: LD_VAR 0 2
25537: PPUSH
25538: LD_VAR 0 3
25542: PPUSH
25543: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25547: LD_INT 35
25549: PPUSH
25550: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25554: LD_VAR 0 1
25558: PPUSH
25559: LD_VAR 0 2
25563: PPUSH
25564: LD_VAR 0 3
25568: PPUSH
25569: CALL 61736 0 3
25573: NOT
25574: PUSH
25575: LD_VAR 0 1
25579: PPUSH
25580: CALL_OW 314
25584: AND
25585: IFFALSE 25589
// exit ;
25587: GO 25728
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25589: LD_VAR 0 2
25593: PPUSH
25594: LD_VAR 0 3
25598: PPUSH
25599: CALL_OW 428
25603: PUSH
25604: LD_VAR 0 1
25608: EQUAL
25609: PUSH
25610: LD_VAR 0 1
25614: PPUSH
25615: CALL_OW 314
25619: NOT
25620: AND
25621: IFFALSE 25547
// PlaySoundXY ( x , y , PlantMine ) ;
25623: LD_VAR 0 2
25627: PPUSH
25628: LD_VAR 0 3
25632: PPUSH
25633: LD_STRING PlantMine
25635: PPUSH
25636: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25640: LD_VAR 0 2
25644: PPUSH
25645: LD_VAR 0 3
25649: PPUSH
25650: LD_VAR 0 1
25654: PPUSH
25655: CALL_OW 255
25659: PPUSH
25660: LD_INT 0
25662: PPUSH
25663: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25667: LD_ADDR_EXP 106
25671: PUSH
25672: LD_EXP 106
25676: PPUSH
25677: LD_VAR 0 5
25681: PUSH
25682: LD_EXP 106
25686: PUSH
25687: LD_VAR 0 5
25691: ARRAY
25692: PUSH
25693: LD_INT 1
25695: PLUS
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PPUSH
25701: LD_VAR 0 2
25705: PUSH
25706: LD_VAR 0 3
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PPUSH
25715: CALL 31887 0 3
25719: ST_TO_ADDR
// result := true ;
25720: LD_ADDR_VAR 0 4
25724: PUSH
25725: LD_INT 1
25727: ST_TO_ADDR
// end ;
25728: LD_VAR 0 4
25732: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25733: LD_INT 0
25735: PPUSH
25736: PPUSH
25737: PPUSH
// if not unit in minersList then
25738: LD_VAR 0 1
25742: PUSH
25743: LD_EXP 105
25747: IN
25748: NOT
25749: IFFALSE 25753
// exit ;
25751: GO 26145
// index := GetElementIndex ( minersList , unit ) ;
25753: LD_ADDR_VAR 0 6
25757: PUSH
25758: LD_EXP 105
25762: PPUSH
25763: LD_VAR 0 1
25767: PPUSH
25768: CALL 31672 0 2
25772: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25773: LD_ADDR_VAR 0 5
25777: PUSH
25778: DOUBLE
25779: LD_EXP 106
25783: PUSH
25784: LD_VAR 0 6
25788: ARRAY
25789: INC
25790: ST_TO_ADDR
25791: LD_INT 1
25793: PUSH
25794: FOR_DOWNTO
25795: IFFALSE 25956
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25797: LD_EXP 106
25801: PUSH
25802: LD_VAR 0 6
25806: ARRAY
25807: PUSH
25808: LD_VAR 0 5
25812: ARRAY
25813: PUSH
25814: LD_INT 1
25816: ARRAY
25817: PUSH
25818: LD_VAR 0 2
25822: EQUAL
25823: PUSH
25824: LD_EXP 106
25828: PUSH
25829: LD_VAR 0 6
25833: ARRAY
25834: PUSH
25835: LD_VAR 0 5
25839: ARRAY
25840: PUSH
25841: LD_INT 2
25843: ARRAY
25844: PUSH
25845: LD_VAR 0 3
25849: EQUAL
25850: AND
25851: IFFALSE 25954
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25853: LD_EXP 106
25857: PUSH
25858: LD_VAR 0 6
25862: ARRAY
25863: PUSH
25864: LD_VAR 0 5
25868: ARRAY
25869: PUSH
25870: LD_INT 1
25872: ARRAY
25873: PPUSH
25874: LD_EXP 106
25878: PUSH
25879: LD_VAR 0 6
25883: ARRAY
25884: PUSH
25885: LD_VAR 0 5
25889: ARRAY
25890: PUSH
25891: LD_INT 2
25893: ARRAY
25894: PPUSH
25895: LD_VAR 0 1
25899: PPUSH
25900: CALL_OW 255
25904: PPUSH
25905: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25909: LD_ADDR_EXP 106
25913: PUSH
25914: LD_EXP 106
25918: PPUSH
25919: LD_VAR 0 6
25923: PPUSH
25924: LD_EXP 106
25928: PUSH
25929: LD_VAR 0 6
25933: ARRAY
25934: PPUSH
25935: LD_VAR 0 5
25939: PPUSH
25940: CALL_OW 3
25944: PPUSH
25945: CALL_OW 1
25949: ST_TO_ADDR
// exit ;
25950: POP
25951: POP
25952: GO 26145
// end ; end ;
25954: GO 25794
25956: POP
25957: POP
// for i := minerMinesList [ index ] downto 1 do
25958: LD_ADDR_VAR 0 5
25962: PUSH
25963: DOUBLE
25964: LD_EXP 106
25968: PUSH
25969: LD_VAR 0 6
25973: ARRAY
25974: INC
25975: ST_TO_ADDR
25976: LD_INT 1
25978: PUSH
25979: FOR_DOWNTO
25980: IFFALSE 26143
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25982: LD_EXP 106
25986: PUSH
25987: LD_VAR 0 6
25991: ARRAY
25992: PUSH
25993: LD_VAR 0 5
25997: ARRAY
25998: PUSH
25999: LD_INT 1
26001: ARRAY
26002: PPUSH
26003: LD_EXP 106
26007: PUSH
26008: LD_VAR 0 6
26012: ARRAY
26013: PUSH
26014: LD_VAR 0 5
26018: ARRAY
26019: PUSH
26020: LD_INT 2
26022: ARRAY
26023: PPUSH
26024: LD_VAR 0 2
26028: PPUSH
26029: LD_VAR 0 3
26033: PPUSH
26034: CALL_OW 298
26038: PUSH
26039: LD_INT 6
26041: LESS
26042: IFFALSE 26141
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26044: LD_EXP 106
26048: PUSH
26049: LD_VAR 0 6
26053: ARRAY
26054: PUSH
26055: LD_VAR 0 5
26059: ARRAY
26060: PUSH
26061: LD_INT 1
26063: ARRAY
26064: PPUSH
26065: LD_EXP 106
26069: PUSH
26070: LD_VAR 0 6
26074: ARRAY
26075: PUSH
26076: LD_VAR 0 5
26080: ARRAY
26081: PUSH
26082: LD_INT 2
26084: ARRAY
26085: PPUSH
26086: LD_VAR 0 1
26090: PPUSH
26091: CALL_OW 255
26095: PPUSH
26096: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26100: LD_ADDR_EXP 106
26104: PUSH
26105: LD_EXP 106
26109: PPUSH
26110: LD_VAR 0 6
26114: PPUSH
26115: LD_EXP 106
26119: PUSH
26120: LD_VAR 0 6
26124: ARRAY
26125: PPUSH
26126: LD_VAR 0 5
26130: PPUSH
26131: CALL_OW 3
26135: PPUSH
26136: CALL_OW 1
26140: ST_TO_ADDR
// end ; end ;
26141: GO 25979
26143: POP
26144: POP
// end ;
26145: LD_VAR 0 4
26149: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26150: LD_INT 0
26152: PPUSH
26153: PPUSH
26154: PPUSH
26155: PPUSH
26156: PPUSH
26157: PPUSH
26158: PPUSH
26159: PPUSH
26160: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26161: LD_VAR 0 1
26165: PPUSH
26166: CALL_OW 264
26170: PUSH
26171: LD_EXP 115
26175: EQUAL
26176: NOT
26177: PUSH
26178: LD_VAR 0 1
26182: PUSH
26183: LD_EXP 105
26187: IN
26188: NOT
26189: OR
26190: IFFALSE 26194
// exit ;
26192: GO 26516
// index := GetElementIndex ( minersList , unit ) ;
26194: LD_ADDR_VAR 0 6
26198: PUSH
26199: LD_EXP 105
26203: PPUSH
26204: LD_VAR 0 1
26208: PPUSH
26209: CALL 31672 0 2
26213: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26214: LD_ADDR_VAR 0 8
26218: PUSH
26219: LD_EXP 107
26223: PUSH
26224: LD_EXP 106
26228: PUSH
26229: LD_VAR 0 6
26233: ARRAY
26234: MINUS
26235: ST_TO_ADDR
// if not minesFreeAmount then
26236: LD_VAR 0 8
26240: NOT
26241: IFFALSE 26245
// exit ;
26243: GO 26516
// tmp := [ ] ;
26245: LD_ADDR_VAR 0 7
26249: PUSH
26250: EMPTY
26251: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26252: LD_ADDR_VAR 0 5
26256: PUSH
26257: DOUBLE
26258: LD_INT 1
26260: DEC
26261: ST_TO_ADDR
26262: LD_VAR 0 8
26266: PUSH
26267: FOR_TO
26268: IFFALSE 26463
// begin _d := rand ( 0 , 5 ) ;
26270: LD_ADDR_VAR 0 11
26274: PUSH
26275: LD_INT 0
26277: PPUSH
26278: LD_INT 5
26280: PPUSH
26281: CALL_OW 12
26285: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26286: LD_ADDR_VAR 0 12
26290: PUSH
26291: LD_INT 2
26293: PPUSH
26294: LD_INT 6
26296: PPUSH
26297: CALL_OW 12
26301: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26302: LD_ADDR_VAR 0 9
26306: PUSH
26307: LD_VAR 0 2
26311: PPUSH
26312: LD_VAR 0 11
26316: PPUSH
26317: LD_VAR 0 12
26321: PPUSH
26322: CALL_OW 272
26326: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26327: LD_ADDR_VAR 0 10
26331: PUSH
26332: LD_VAR 0 3
26336: PPUSH
26337: LD_VAR 0 11
26341: PPUSH
26342: LD_VAR 0 12
26346: PPUSH
26347: CALL_OW 273
26351: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26352: LD_VAR 0 9
26356: PPUSH
26357: LD_VAR 0 10
26361: PPUSH
26362: CALL_OW 488
26366: PUSH
26367: LD_VAR 0 9
26371: PUSH
26372: LD_VAR 0 10
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_VAR 0 7
26385: IN
26386: NOT
26387: AND
26388: PUSH
26389: LD_VAR 0 9
26393: PPUSH
26394: LD_VAR 0 10
26398: PPUSH
26399: CALL_OW 458
26403: NOT
26404: AND
26405: IFFALSE 26447
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26407: LD_ADDR_VAR 0 7
26411: PUSH
26412: LD_VAR 0 7
26416: PPUSH
26417: LD_VAR 0 7
26421: PUSH
26422: LD_INT 1
26424: PLUS
26425: PPUSH
26426: LD_VAR 0 9
26430: PUSH
26431: LD_VAR 0 10
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PPUSH
26440: CALL_OW 1
26444: ST_TO_ADDR
26445: GO 26461
// i := i - 1 ;
26447: LD_ADDR_VAR 0 5
26451: PUSH
26452: LD_VAR 0 5
26456: PUSH
26457: LD_INT 1
26459: MINUS
26460: ST_TO_ADDR
// end ;
26461: GO 26267
26463: POP
26464: POP
// for i in tmp do
26465: LD_ADDR_VAR 0 5
26469: PUSH
26470: LD_VAR 0 7
26474: PUSH
26475: FOR_IN
26476: IFFALSE 26514
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26478: LD_VAR 0 1
26482: PPUSH
26483: LD_VAR 0 5
26487: PUSH
26488: LD_INT 1
26490: ARRAY
26491: PPUSH
26492: LD_VAR 0 5
26496: PUSH
26497: LD_INT 2
26499: ARRAY
26500: PPUSH
26501: CALL 25456 0 3
26505: NOT
26506: IFFALSE 26512
// exit ;
26508: POP
26509: POP
26510: GO 26516
26512: GO 26475
26514: POP
26515: POP
// end ;
26516: LD_VAR 0 4
26520: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26521: LD_INT 0
26523: PPUSH
26524: PPUSH
26525: PPUSH
26526: PPUSH
26527: PPUSH
26528: PPUSH
26529: PPUSH
// if not GetClass ( unit ) = class_sniper then
26530: LD_VAR 0 1
26534: PPUSH
26535: CALL_OW 257
26539: PUSH
26540: LD_INT 5
26542: EQUAL
26543: NOT
26544: IFFALSE 26548
// exit ;
26546: GO 26936
// dist := 8 ;
26548: LD_ADDR_VAR 0 5
26552: PUSH
26553: LD_INT 8
26555: ST_TO_ADDR
// viewRange := 12 ;
26556: LD_ADDR_VAR 0 7
26560: PUSH
26561: LD_INT 12
26563: ST_TO_ADDR
// side := GetSide ( unit ) ;
26564: LD_ADDR_VAR 0 6
26568: PUSH
26569: LD_VAR 0 1
26573: PPUSH
26574: CALL_OW 255
26578: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26579: LD_INT 61
26581: PPUSH
26582: LD_VAR 0 6
26586: PPUSH
26587: CALL_OW 321
26591: PUSH
26592: LD_INT 2
26594: EQUAL
26595: IFFALSE 26605
// viewRange := 16 ;
26597: LD_ADDR_VAR 0 7
26601: PUSH
26602: LD_INT 16
26604: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26605: LD_VAR 0 1
26609: PPUSH
26610: LD_VAR 0 2
26614: PPUSH
26615: LD_VAR 0 3
26619: PPUSH
26620: CALL_OW 297
26624: PUSH
26625: LD_VAR 0 5
26629: GREATER
26630: IFFALSE 26709
// begin ComMoveXY ( unit , x , y ) ;
26632: LD_VAR 0 1
26636: PPUSH
26637: LD_VAR 0 2
26641: PPUSH
26642: LD_VAR 0 3
26646: PPUSH
26647: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26651: LD_INT 35
26653: PPUSH
26654: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26658: LD_VAR 0 1
26662: PPUSH
26663: LD_VAR 0 2
26667: PPUSH
26668: LD_VAR 0 3
26672: PPUSH
26673: CALL 61736 0 3
26677: NOT
26678: IFFALSE 26682
// exit ;
26680: GO 26936
// until GetDistUnitXY ( unit , x , y ) < dist ;
26682: LD_VAR 0 1
26686: PPUSH
26687: LD_VAR 0 2
26691: PPUSH
26692: LD_VAR 0 3
26696: PPUSH
26697: CALL_OW 297
26701: PUSH
26702: LD_VAR 0 5
26706: LESS
26707: IFFALSE 26651
// end ; ComTurnXY ( unit , x , y ) ;
26709: LD_VAR 0 1
26713: PPUSH
26714: LD_VAR 0 2
26718: PPUSH
26719: LD_VAR 0 3
26723: PPUSH
26724: CALL_OW 118
// wait ( 5 ) ;
26728: LD_INT 5
26730: PPUSH
26731: CALL_OW 67
// _d := GetDir ( unit ) ;
26735: LD_ADDR_VAR 0 10
26739: PUSH
26740: LD_VAR 0 1
26744: PPUSH
26745: CALL_OW 254
26749: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26750: LD_ADDR_VAR 0 8
26754: PUSH
26755: LD_VAR 0 1
26759: PPUSH
26760: CALL_OW 250
26764: PPUSH
26765: LD_VAR 0 10
26769: PPUSH
26770: LD_VAR 0 5
26774: PPUSH
26775: CALL_OW 272
26779: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26780: LD_ADDR_VAR 0 9
26784: PUSH
26785: LD_VAR 0 1
26789: PPUSH
26790: CALL_OW 251
26794: PPUSH
26795: LD_VAR 0 10
26799: PPUSH
26800: LD_VAR 0 5
26804: PPUSH
26805: CALL_OW 273
26809: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26810: LD_VAR 0 8
26814: PPUSH
26815: LD_VAR 0 9
26819: PPUSH
26820: CALL_OW 488
26824: NOT
26825: IFFALSE 26829
// exit ;
26827: GO 26936
// ComAnimCustom ( unit , 1 ) ;
26829: LD_VAR 0 1
26833: PPUSH
26834: LD_INT 1
26836: PPUSH
26837: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26841: LD_VAR 0 8
26845: PPUSH
26846: LD_VAR 0 9
26850: PPUSH
26851: LD_VAR 0 6
26855: PPUSH
26856: LD_VAR 0 7
26860: PPUSH
26861: CALL_OW 330
// repeat wait ( 1 ) ;
26865: LD_INT 1
26867: PPUSH
26868: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26872: LD_VAR 0 1
26876: PPUSH
26877: CALL_OW 316
26881: PUSH
26882: LD_VAR 0 1
26886: PPUSH
26887: CALL_OW 314
26891: OR
26892: PUSH
26893: LD_VAR 0 1
26897: PPUSH
26898: CALL_OW 302
26902: NOT
26903: OR
26904: PUSH
26905: LD_VAR 0 1
26909: PPUSH
26910: CALL_OW 301
26914: OR
26915: IFFALSE 26865
// RemoveSeeing ( _x , _y , side ) ;
26917: LD_VAR 0 8
26921: PPUSH
26922: LD_VAR 0 9
26926: PPUSH
26927: LD_VAR 0 6
26931: PPUSH
26932: CALL_OW 331
// end ; end_of_file
26936: LD_VAR 0 4
26940: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26941: LD_INT 0
26943: PPUSH
26944: PPUSH
// if exist_mode then
26945: LD_VAR 0 2
26949: IFFALSE 26974
// unit := CreateCharacter ( prefix & ident ) else
26951: LD_ADDR_VAR 0 5
26955: PUSH
26956: LD_VAR 0 3
26960: PUSH
26961: LD_VAR 0 1
26965: STR
26966: PPUSH
26967: CALL_OW 34
26971: ST_TO_ADDR
26972: GO 26989
// unit := NewCharacter ( ident ) ;
26974: LD_ADDR_VAR 0 5
26978: PUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 25
26988: ST_TO_ADDR
// result := unit ;
26989: LD_ADDR_VAR 0 4
26993: PUSH
26994: LD_VAR 0 5
26998: ST_TO_ADDR
// end ;
26999: LD_VAR 0 4
27003: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27004: LD_INT 0
27006: PPUSH
27007: PPUSH
// if not side or not nation then
27008: LD_VAR 0 1
27012: NOT
27013: PUSH
27014: LD_VAR 0 2
27018: NOT
27019: OR
27020: IFFALSE 27024
// exit ;
27022: GO 27788
// case nation of nation_american :
27024: LD_VAR 0 2
27028: PUSH
27029: LD_INT 1
27031: DOUBLE
27032: EQUAL
27033: IFTRUE 27037
27035: GO 27251
27037: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27038: LD_ADDR_VAR 0 4
27042: PUSH
27043: LD_INT 35
27045: PUSH
27046: LD_INT 45
27048: PUSH
27049: LD_INT 46
27051: PUSH
27052: LD_INT 47
27054: PUSH
27055: LD_INT 82
27057: PUSH
27058: LD_INT 83
27060: PUSH
27061: LD_INT 84
27063: PUSH
27064: LD_INT 85
27066: PUSH
27067: LD_INT 86
27069: PUSH
27070: LD_INT 1
27072: PUSH
27073: LD_INT 2
27075: PUSH
27076: LD_INT 6
27078: PUSH
27079: LD_INT 15
27081: PUSH
27082: LD_INT 16
27084: PUSH
27085: LD_INT 7
27087: PUSH
27088: LD_INT 12
27090: PUSH
27091: LD_INT 13
27093: PUSH
27094: LD_INT 10
27096: PUSH
27097: LD_INT 14
27099: PUSH
27100: LD_INT 20
27102: PUSH
27103: LD_INT 21
27105: PUSH
27106: LD_INT 22
27108: PUSH
27109: LD_INT 25
27111: PUSH
27112: LD_INT 32
27114: PUSH
27115: LD_INT 27
27117: PUSH
27118: LD_INT 36
27120: PUSH
27121: LD_INT 69
27123: PUSH
27124: LD_INT 39
27126: PUSH
27127: LD_INT 34
27129: PUSH
27130: LD_INT 40
27132: PUSH
27133: LD_INT 48
27135: PUSH
27136: LD_INT 49
27138: PUSH
27139: LD_INT 50
27141: PUSH
27142: LD_INT 51
27144: PUSH
27145: LD_INT 52
27147: PUSH
27148: LD_INT 53
27150: PUSH
27151: LD_INT 54
27153: PUSH
27154: LD_INT 55
27156: PUSH
27157: LD_INT 56
27159: PUSH
27160: LD_INT 57
27162: PUSH
27163: LD_INT 58
27165: PUSH
27166: LD_INT 59
27168: PUSH
27169: LD_INT 60
27171: PUSH
27172: LD_INT 61
27174: PUSH
27175: LD_INT 62
27177: PUSH
27178: LD_INT 80
27180: PUSH
27181: LD_INT 82
27183: PUSH
27184: LD_INT 83
27186: PUSH
27187: LD_INT 84
27189: PUSH
27190: LD_INT 85
27192: PUSH
27193: LD_INT 86
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: ST_TO_ADDR
27249: GO 27712
27251: LD_INT 2
27253: DOUBLE
27254: EQUAL
27255: IFTRUE 27259
27257: GO 27481
27259: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
27260: LD_ADDR_VAR 0 4
27264: PUSH
27265: LD_INT 35
27267: PUSH
27268: LD_INT 45
27270: PUSH
27271: LD_INT 46
27273: PUSH
27274: LD_INT 47
27276: PUSH
27277: LD_INT 82
27279: PUSH
27280: LD_INT 83
27282: PUSH
27283: LD_INT 84
27285: PUSH
27286: LD_INT 85
27288: PUSH
27289: LD_INT 87
27291: PUSH
27292: LD_INT 70
27294: PUSH
27295: LD_INT 1
27297: PUSH
27298: LD_INT 11
27300: PUSH
27301: LD_INT 3
27303: PUSH
27304: LD_INT 4
27306: PUSH
27307: LD_INT 5
27309: PUSH
27310: LD_INT 6
27312: PUSH
27313: LD_INT 15
27315: PUSH
27316: LD_INT 18
27318: PUSH
27319: LD_INT 7
27321: PUSH
27322: LD_INT 17
27324: PUSH
27325: LD_INT 8
27327: PUSH
27328: LD_INT 20
27330: PUSH
27331: LD_INT 21
27333: PUSH
27334: LD_INT 22
27336: PUSH
27337: LD_INT 72
27339: PUSH
27340: LD_INT 26
27342: PUSH
27343: LD_INT 69
27345: PUSH
27346: LD_INT 39
27348: PUSH
27349: LD_INT 40
27351: PUSH
27352: LD_INT 41
27354: PUSH
27355: LD_INT 42
27357: PUSH
27358: LD_INT 43
27360: PUSH
27361: LD_INT 48
27363: PUSH
27364: LD_INT 49
27366: PUSH
27367: LD_INT 50
27369: PUSH
27370: LD_INT 51
27372: PUSH
27373: LD_INT 52
27375: PUSH
27376: LD_INT 53
27378: PUSH
27379: LD_INT 54
27381: PUSH
27382: LD_INT 55
27384: PUSH
27385: LD_INT 56
27387: PUSH
27388: LD_INT 60
27390: PUSH
27391: LD_INT 61
27393: PUSH
27394: LD_INT 62
27396: PUSH
27397: LD_INT 66
27399: PUSH
27400: LD_INT 67
27402: PUSH
27403: LD_INT 68
27405: PUSH
27406: LD_INT 81
27408: PUSH
27409: LD_INT 82
27411: PUSH
27412: LD_INT 83
27414: PUSH
27415: LD_INT 84
27417: PUSH
27418: LD_INT 85
27420: PUSH
27421: LD_INT 87
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: ST_TO_ADDR
27479: GO 27712
27481: LD_INT 3
27483: DOUBLE
27484: EQUAL
27485: IFTRUE 27489
27487: GO 27711
27489: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27490: LD_ADDR_VAR 0 4
27494: PUSH
27495: LD_INT 46
27497: PUSH
27498: LD_INT 47
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: LD_INT 2
27506: PUSH
27507: LD_INT 82
27509: PUSH
27510: LD_INT 83
27512: PUSH
27513: LD_INT 84
27515: PUSH
27516: LD_INT 85
27518: PUSH
27519: LD_INT 86
27521: PUSH
27522: LD_INT 11
27524: PUSH
27525: LD_INT 9
27527: PUSH
27528: LD_INT 20
27530: PUSH
27531: LD_INT 19
27533: PUSH
27534: LD_INT 21
27536: PUSH
27537: LD_INT 24
27539: PUSH
27540: LD_INT 22
27542: PUSH
27543: LD_INT 25
27545: PUSH
27546: LD_INT 28
27548: PUSH
27549: LD_INT 29
27551: PUSH
27552: LD_INT 30
27554: PUSH
27555: LD_INT 31
27557: PUSH
27558: LD_INT 37
27560: PUSH
27561: LD_INT 38
27563: PUSH
27564: LD_INT 32
27566: PUSH
27567: LD_INT 27
27569: PUSH
27570: LD_INT 33
27572: PUSH
27573: LD_INT 69
27575: PUSH
27576: LD_INT 39
27578: PUSH
27579: LD_INT 34
27581: PUSH
27582: LD_INT 40
27584: PUSH
27585: LD_INT 71
27587: PUSH
27588: LD_INT 23
27590: PUSH
27591: LD_INT 44
27593: PUSH
27594: LD_INT 48
27596: PUSH
27597: LD_INT 49
27599: PUSH
27600: LD_INT 50
27602: PUSH
27603: LD_INT 51
27605: PUSH
27606: LD_INT 52
27608: PUSH
27609: LD_INT 53
27611: PUSH
27612: LD_INT 54
27614: PUSH
27615: LD_INT 55
27617: PUSH
27618: LD_INT 56
27620: PUSH
27621: LD_INT 57
27623: PUSH
27624: LD_INT 58
27626: PUSH
27627: LD_INT 59
27629: PUSH
27630: LD_INT 63
27632: PUSH
27633: LD_INT 64
27635: PUSH
27636: LD_INT 65
27638: PUSH
27639: LD_INT 82
27641: PUSH
27642: LD_INT 83
27644: PUSH
27645: LD_INT 84
27647: PUSH
27648: LD_INT 85
27650: PUSH
27651: LD_INT 86
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: ST_TO_ADDR
27709: GO 27712
27711: POP
// if state > - 1 and state < 3 then
27712: LD_VAR 0 3
27716: PUSH
27717: LD_INT 1
27719: NEG
27720: GREATER
27721: PUSH
27722: LD_VAR 0 3
27726: PUSH
27727: LD_INT 3
27729: LESS
27730: AND
27731: IFFALSE 27788
// for i in result do
27733: LD_ADDR_VAR 0 5
27737: PUSH
27738: LD_VAR 0 4
27742: PUSH
27743: FOR_IN
27744: IFFALSE 27786
// if GetTech ( i , side ) <> state then
27746: LD_VAR 0 5
27750: PPUSH
27751: LD_VAR 0 1
27755: PPUSH
27756: CALL_OW 321
27760: PUSH
27761: LD_VAR 0 3
27765: NONEQUAL
27766: IFFALSE 27784
// result := result diff i ;
27768: LD_ADDR_VAR 0 4
27772: PUSH
27773: LD_VAR 0 4
27777: PUSH
27778: LD_VAR 0 5
27782: DIFF
27783: ST_TO_ADDR
27784: GO 27743
27786: POP
27787: POP
// end ;
27788: LD_VAR 0 4
27792: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27793: LD_INT 0
27795: PPUSH
27796: PPUSH
27797: PPUSH
// result := true ;
27798: LD_ADDR_VAR 0 3
27802: PUSH
27803: LD_INT 1
27805: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27806: LD_ADDR_VAR 0 5
27810: PUSH
27811: LD_VAR 0 2
27815: PPUSH
27816: CALL_OW 480
27820: ST_TO_ADDR
// if not tmp then
27821: LD_VAR 0 5
27825: NOT
27826: IFFALSE 27830
// exit ;
27828: GO 27879
// for i in tmp do
27830: LD_ADDR_VAR 0 4
27834: PUSH
27835: LD_VAR 0 5
27839: PUSH
27840: FOR_IN
27841: IFFALSE 27877
// if GetTech ( i , side ) <> state_researched then
27843: LD_VAR 0 4
27847: PPUSH
27848: LD_VAR 0 1
27852: PPUSH
27853: CALL_OW 321
27857: PUSH
27858: LD_INT 2
27860: NONEQUAL
27861: IFFALSE 27875
// begin result := false ;
27863: LD_ADDR_VAR 0 3
27867: PUSH
27868: LD_INT 0
27870: ST_TO_ADDR
// exit ;
27871: POP
27872: POP
27873: GO 27879
// end ;
27875: GO 27840
27877: POP
27878: POP
// end ;
27879: LD_VAR 0 3
27883: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27884: LD_INT 0
27886: PPUSH
27887: PPUSH
27888: PPUSH
27889: PPUSH
27890: PPUSH
27891: PPUSH
27892: PPUSH
27893: PPUSH
27894: PPUSH
27895: PPUSH
27896: PPUSH
27897: PPUSH
27898: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27899: LD_VAR 0 1
27903: NOT
27904: PUSH
27905: LD_VAR 0 1
27909: PPUSH
27910: CALL_OW 257
27914: PUSH
27915: LD_INT 9
27917: NONEQUAL
27918: OR
27919: IFFALSE 27923
// exit ;
27921: GO 28496
// side := GetSide ( unit ) ;
27923: LD_ADDR_VAR 0 9
27927: PUSH
27928: LD_VAR 0 1
27932: PPUSH
27933: CALL_OW 255
27937: ST_TO_ADDR
// tech_space := tech_spacanom ;
27938: LD_ADDR_VAR 0 12
27942: PUSH
27943: LD_INT 29
27945: ST_TO_ADDR
// tech_time := tech_taurad ;
27946: LD_ADDR_VAR 0 13
27950: PUSH
27951: LD_INT 28
27953: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27954: LD_ADDR_VAR 0 11
27958: PUSH
27959: LD_VAR 0 1
27963: PPUSH
27964: CALL_OW 310
27968: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27969: LD_VAR 0 11
27973: PPUSH
27974: CALL_OW 247
27978: PUSH
27979: LD_INT 2
27981: EQUAL
27982: IFFALSE 27986
// exit ;
27984: GO 28496
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27986: LD_ADDR_VAR 0 8
27990: PUSH
27991: LD_INT 81
27993: PUSH
27994: LD_VAR 0 9
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 3
28005: PUSH
28006: LD_INT 21
28008: PUSH
28009: LD_INT 3
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PPUSH
28024: CALL_OW 69
28028: ST_TO_ADDR
// if not tmp then
28029: LD_VAR 0 8
28033: NOT
28034: IFFALSE 28038
// exit ;
28036: GO 28496
// if in_unit then
28038: LD_VAR 0 11
28042: IFFALSE 28066
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28044: LD_ADDR_VAR 0 10
28048: PUSH
28049: LD_VAR 0 8
28053: PPUSH
28054: LD_VAR 0 11
28058: PPUSH
28059: CALL_OW 74
28063: ST_TO_ADDR
28064: GO 28086
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28066: LD_ADDR_VAR 0 10
28070: PUSH
28071: LD_VAR 0 8
28075: PPUSH
28076: LD_VAR 0 1
28080: PPUSH
28081: CALL_OW 74
28085: ST_TO_ADDR
// if not enemy then
28086: LD_VAR 0 10
28090: NOT
28091: IFFALSE 28095
// exit ;
28093: GO 28496
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28095: LD_VAR 0 11
28099: PUSH
28100: LD_VAR 0 11
28104: PPUSH
28105: LD_VAR 0 10
28109: PPUSH
28110: CALL_OW 296
28114: PUSH
28115: LD_INT 13
28117: GREATER
28118: AND
28119: PUSH
28120: LD_VAR 0 1
28124: PPUSH
28125: LD_VAR 0 10
28129: PPUSH
28130: CALL_OW 296
28134: PUSH
28135: LD_INT 12
28137: GREATER
28138: OR
28139: IFFALSE 28143
// exit ;
28141: GO 28496
// missile := [ 1 ] ;
28143: LD_ADDR_VAR 0 14
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: EMPTY
28152: LIST
28153: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28154: LD_VAR 0 9
28158: PPUSH
28159: LD_VAR 0 12
28163: PPUSH
28164: CALL_OW 325
28168: IFFALSE 28197
// missile := Insert ( missile , missile + 1 , 2 ) ;
28170: LD_ADDR_VAR 0 14
28174: PUSH
28175: LD_VAR 0 14
28179: PPUSH
28180: LD_VAR 0 14
28184: PUSH
28185: LD_INT 1
28187: PLUS
28188: PPUSH
28189: LD_INT 2
28191: PPUSH
28192: CALL_OW 2
28196: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28197: LD_VAR 0 9
28201: PPUSH
28202: LD_VAR 0 13
28206: PPUSH
28207: CALL_OW 325
28211: PUSH
28212: LD_VAR 0 10
28216: PPUSH
28217: CALL_OW 255
28221: PPUSH
28222: LD_VAR 0 13
28226: PPUSH
28227: CALL_OW 325
28231: NOT
28232: AND
28233: IFFALSE 28262
// missile := Insert ( missile , missile + 1 , 3 ) ;
28235: LD_ADDR_VAR 0 14
28239: PUSH
28240: LD_VAR 0 14
28244: PPUSH
28245: LD_VAR 0 14
28249: PUSH
28250: LD_INT 1
28252: PLUS
28253: PPUSH
28254: LD_INT 3
28256: PPUSH
28257: CALL_OW 2
28261: ST_TO_ADDR
// if missile < 2 then
28262: LD_VAR 0 14
28266: PUSH
28267: LD_INT 2
28269: LESS
28270: IFFALSE 28274
// exit ;
28272: GO 28496
// x := GetX ( enemy ) ;
28274: LD_ADDR_VAR 0 4
28278: PUSH
28279: LD_VAR 0 10
28283: PPUSH
28284: CALL_OW 250
28288: ST_TO_ADDR
// y := GetY ( enemy ) ;
28289: LD_ADDR_VAR 0 5
28293: PUSH
28294: LD_VAR 0 10
28298: PPUSH
28299: CALL_OW 251
28303: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28304: LD_ADDR_VAR 0 6
28308: PUSH
28309: LD_VAR 0 4
28313: PUSH
28314: LD_INT 1
28316: NEG
28317: PPUSH
28318: LD_INT 1
28320: PPUSH
28321: CALL_OW 12
28325: PLUS
28326: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28327: LD_ADDR_VAR 0 7
28331: PUSH
28332: LD_VAR 0 5
28336: PUSH
28337: LD_INT 1
28339: NEG
28340: PPUSH
28341: LD_INT 1
28343: PPUSH
28344: CALL_OW 12
28348: PLUS
28349: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28350: LD_VAR 0 6
28354: PPUSH
28355: LD_VAR 0 7
28359: PPUSH
28360: CALL_OW 488
28364: NOT
28365: IFFALSE 28387
// begin _x := x ;
28367: LD_ADDR_VAR 0 6
28371: PUSH
28372: LD_VAR 0 4
28376: ST_TO_ADDR
// _y := y ;
28377: LD_ADDR_VAR 0 7
28381: PUSH
28382: LD_VAR 0 5
28386: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28387: LD_ADDR_VAR 0 3
28391: PUSH
28392: LD_INT 1
28394: PPUSH
28395: LD_VAR 0 14
28399: PPUSH
28400: CALL_OW 12
28404: ST_TO_ADDR
// case i of 1 :
28405: LD_VAR 0 3
28409: PUSH
28410: LD_INT 1
28412: DOUBLE
28413: EQUAL
28414: IFTRUE 28418
28416: GO 28435
28418: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28419: LD_VAR 0 1
28423: PPUSH
28424: LD_VAR 0 10
28428: PPUSH
28429: CALL_OW 115
28433: GO 28496
28435: LD_INT 2
28437: DOUBLE
28438: EQUAL
28439: IFTRUE 28443
28441: GO 28465
28443: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28444: LD_VAR 0 1
28448: PPUSH
28449: LD_VAR 0 6
28453: PPUSH
28454: LD_VAR 0 7
28458: PPUSH
28459: CALL_OW 153
28463: GO 28496
28465: LD_INT 3
28467: DOUBLE
28468: EQUAL
28469: IFTRUE 28473
28471: GO 28495
28473: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28474: LD_VAR 0 1
28478: PPUSH
28479: LD_VAR 0 6
28483: PPUSH
28484: LD_VAR 0 7
28488: PPUSH
28489: CALL_OW 154
28493: GO 28496
28495: POP
// end ;
28496: LD_VAR 0 2
28500: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28501: LD_INT 0
28503: PPUSH
28504: PPUSH
28505: PPUSH
28506: PPUSH
28507: PPUSH
28508: PPUSH
// if not unit or not building then
28509: LD_VAR 0 1
28513: NOT
28514: PUSH
28515: LD_VAR 0 2
28519: NOT
28520: OR
28521: IFFALSE 28525
// exit ;
28523: GO 28683
// x := GetX ( building ) ;
28525: LD_ADDR_VAR 0 5
28529: PUSH
28530: LD_VAR 0 2
28534: PPUSH
28535: CALL_OW 250
28539: ST_TO_ADDR
// y := GetY ( building ) ;
28540: LD_ADDR_VAR 0 6
28544: PUSH
28545: LD_VAR 0 2
28549: PPUSH
28550: CALL_OW 251
28554: ST_TO_ADDR
// for i = 0 to 5 do
28555: LD_ADDR_VAR 0 4
28559: PUSH
28560: DOUBLE
28561: LD_INT 0
28563: DEC
28564: ST_TO_ADDR
28565: LD_INT 5
28567: PUSH
28568: FOR_TO
28569: IFFALSE 28681
// begin _x := ShiftX ( x , i , 3 ) ;
28571: LD_ADDR_VAR 0 7
28575: PUSH
28576: LD_VAR 0 5
28580: PPUSH
28581: LD_VAR 0 4
28585: PPUSH
28586: LD_INT 3
28588: PPUSH
28589: CALL_OW 272
28593: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28594: LD_ADDR_VAR 0 8
28598: PUSH
28599: LD_VAR 0 6
28603: PPUSH
28604: LD_VAR 0 4
28608: PPUSH
28609: LD_INT 3
28611: PPUSH
28612: CALL_OW 273
28616: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28617: LD_VAR 0 7
28621: PPUSH
28622: LD_VAR 0 8
28626: PPUSH
28627: CALL_OW 488
28631: NOT
28632: IFFALSE 28636
// continue ;
28634: GO 28568
// if HexInfo ( _x , _y ) = 0 then
28636: LD_VAR 0 7
28640: PPUSH
28641: LD_VAR 0 8
28645: PPUSH
28646: CALL_OW 428
28650: PUSH
28651: LD_INT 0
28653: EQUAL
28654: IFFALSE 28679
// begin ComMoveXY ( unit , _x , _y ) ;
28656: LD_VAR 0 1
28660: PPUSH
28661: LD_VAR 0 7
28665: PPUSH
28666: LD_VAR 0 8
28670: PPUSH
28671: CALL_OW 111
// exit ;
28675: POP
28676: POP
28677: GO 28683
// end ; end ;
28679: GO 28568
28681: POP
28682: POP
// end ;
28683: LD_VAR 0 3
28687: RET
// export function ScanBase ( side , base_area ) ; begin
28688: LD_INT 0
28690: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28691: LD_ADDR_VAR 0 3
28695: PUSH
28696: LD_VAR 0 2
28700: PPUSH
28701: LD_INT 81
28703: PUSH
28704: LD_VAR 0 1
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PPUSH
28713: CALL_OW 70
28717: ST_TO_ADDR
// end ;
28718: LD_VAR 0 3
28722: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28723: LD_INT 0
28725: PPUSH
28726: PPUSH
28727: PPUSH
28728: PPUSH
// result := false ;
28729: LD_ADDR_VAR 0 2
28733: PUSH
28734: LD_INT 0
28736: ST_TO_ADDR
// side := GetSide ( unit ) ;
28737: LD_ADDR_VAR 0 3
28741: PUSH
28742: LD_VAR 0 1
28746: PPUSH
28747: CALL_OW 255
28751: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28752: LD_ADDR_VAR 0 4
28756: PUSH
28757: LD_VAR 0 1
28761: PPUSH
28762: CALL_OW 248
28766: ST_TO_ADDR
// case nat of 1 :
28767: LD_VAR 0 4
28771: PUSH
28772: LD_INT 1
28774: DOUBLE
28775: EQUAL
28776: IFTRUE 28780
28778: GO 28791
28780: POP
// tech := tech_lassight ; 2 :
28781: LD_ADDR_VAR 0 5
28785: PUSH
28786: LD_INT 12
28788: ST_TO_ADDR
28789: GO 28830
28791: LD_INT 2
28793: DOUBLE
28794: EQUAL
28795: IFTRUE 28799
28797: GO 28810
28799: POP
// tech := tech_mortar ; 3 :
28800: LD_ADDR_VAR 0 5
28804: PUSH
28805: LD_INT 41
28807: ST_TO_ADDR
28808: GO 28830
28810: LD_INT 3
28812: DOUBLE
28813: EQUAL
28814: IFTRUE 28818
28816: GO 28829
28818: POP
// tech := tech_bazooka ; end ;
28819: LD_ADDR_VAR 0 5
28823: PUSH
28824: LD_INT 44
28826: ST_TO_ADDR
28827: GO 28830
28829: POP
// if Researched ( side , tech ) then
28830: LD_VAR 0 3
28834: PPUSH
28835: LD_VAR 0 5
28839: PPUSH
28840: CALL_OW 325
28844: IFFALSE 28871
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28846: LD_ADDR_VAR 0 2
28850: PUSH
28851: LD_INT 5
28853: PUSH
28854: LD_INT 8
28856: PUSH
28857: LD_INT 9
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: LIST
28864: PUSH
28865: LD_VAR 0 4
28869: ARRAY
28870: ST_TO_ADDR
// end ;
28871: LD_VAR 0 2
28875: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28876: LD_INT 0
28878: PPUSH
28879: PPUSH
28880: PPUSH
// if not mines then
28881: LD_VAR 0 2
28885: NOT
28886: IFFALSE 28890
// exit ;
28888: GO 29034
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28890: LD_ADDR_VAR 0 5
28894: PUSH
28895: LD_INT 81
28897: PUSH
28898: LD_VAR 0 1
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 3
28909: PUSH
28910: LD_INT 21
28912: PUSH
28913: LD_INT 3
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PPUSH
28928: CALL_OW 69
28932: ST_TO_ADDR
// for i in mines do
28933: LD_ADDR_VAR 0 4
28937: PUSH
28938: LD_VAR 0 2
28942: PUSH
28943: FOR_IN
28944: IFFALSE 29032
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28946: LD_VAR 0 4
28950: PUSH
28951: LD_INT 1
28953: ARRAY
28954: PPUSH
28955: LD_VAR 0 4
28959: PUSH
28960: LD_INT 2
28962: ARRAY
28963: PPUSH
28964: CALL_OW 458
28968: NOT
28969: IFFALSE 28973
// continue ;
28971: GO 28943
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28973: LD_VAR 0 4
28977: PUSH
28978: LD_INT 1
28980: ARRAY
28981: PPUSH
28982: LD_VAR 0 4
28986: PUSH
28987: LD_INT 2
28989: ARRAY
28990: PPUSH
28991: CALL_OW 428
28995: PUSH
28996: LD_VAR 0 5
29000: IN
29001: IFFALSE 29030
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29003: LD_VAR 0 4
29007: PUSH
29008: LD_INT 1
29010: ARRAY
29011: PPUSH
29012: LD_VAR 0 4
29016: PUSH
29017: LD_INT 2
29019: ARRAY
29020: PPUSH
29021: LD_VAR 0 1
29025: PPUSH
29026: CALL_OW 456
// end ;
29030: GO 28943
29032: POP
29033: POP
// end ;
29034: LD_VAR 0 3
29038: RET
// export function Count ( array ) ; var i ; begin
29039: LD_INT 0
29041: PPUSH
29042: PPUSH
// result := 0 ;
29043: LD_ADDR_VAR 0 2
29047: PUSH
29048: LD_INT 0
29050: ST_TO_ADDR
// for i in array do
29051: LD_ADDR_VAR 0 3
29055: PUSH
29056: LD_VAR 0 1
29060: PUSH
29061: FOR_IN
29062: IFFALSE 29086
// if i then
29064: LD_VAR 0 3
29068: IFFALSE 29084
// result := result + 1 ;
29070: LD_ADDR_VAR 0 2
29074: PUSH
29075: LD_VAR 0 2
29079: PUSH
29080: LD_INT 1
29082: PLUS
29083: ST_TO_ADDR
29084: GO 29061
29086: POP
29087: POP
// end ;
29088: LD_VAR 0 2
29092: RET
// export function IsEmpty ( building ) ; begin
29093: LD_INT 0
29095: PPUSH
// if not building then
29096: LD_VAR 0 1
29100: NOT
29101: IFFALSE 29105
// exit ;
29103: GO 29148
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29105: LD_ADDR_VAR 0 2
29109: PUSH
29110: LD_VAR 0 1
29114: PUSH
29115: LD_INT 22
29117: PUSH
29118: LD_VAR 0 1
29122: PPUSH
29123: CALL_OW 255
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 58
29134: PUSH
29135: EMPTY
29136: LIST
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PPUSH
29142: CALL_OW 69
29146: IN
29147: ST_TO_ADDR
// end ;
29148: LD_VAR 0 2
29152: RET
// export function IsNotFull ( building ) ; begin
29153: LD_INT 0
29155: PPUSH
// if not building then
29156: LD_VAR 0 1
29160: NOT
29161: IFFALSE 29165
// exit ;
29163: GO 29184
// result := UnitsInside ( building ) < 6 ;
29165: LD_ADDR_VAR 0 2
29169: PUSH
29170: LD_VAR 0 1
29174: PPUSH
29175: CALL_OW 313
29179: PUSH
29180: LD_INT 6
29182: LESS
29183: ST_TO_ADDR
// end ;
29184: LD_VAR 0 2
29188: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29189: LD_INT 0
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
// tmp := [ ] ;
29195: LD_ADDR_VAR 0 3
29199: PUSH
29200: EMPTY
29201: ST_TO_ADDR
// list := [ ] ;
29202: LD_ADDR_VAR 0 5
29206: PUSH
29207: EMPTY
29208: ST_TO_ADDR
// for i = 16 to 25 do
29209: LD_ADDR_VAR 0 4
29213: PUSH
29214: DOUBLE
29215: LD_INT 16
29217: DEC
29218: ST_TO_ADDR
29219: LD_INT 25
29221: PUSH
29222: FOR_TO
29223: IFFALSE 29296
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29225: LD_ADDR_VAR 0 3
29229: PUSH
29230: LD_VAR 0 3
29234: PUSH
29235: LD_INT 22
29237: PUSH
29238: LD_VAR 0 1
29242: PPUSH
29243: CALL_OW 255
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 91
29254: PUSH
29255: LD_VAR 0 1
29259: PUSH
29260: LD_INT 6
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 30
29270: PUSH
29271: LD_VAR 0 4
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: LIST
29284: PUSH
29285: EMPTY
29286: LIST
29287: PPUSH
29288: CALL_OW 69
29292: ADD
29293: ST_TO_ADDR
29294: GO 29222
29296: POP
29297: POP
// for i = 1 to tmp do
29298: LD_ADDR_VAR 0 4
29302: PUSH
29303: DOUBLE
29304: LD_INT 1
29306: DEC
29307: ST_TO_ADDR
29308: LD_VAR 0 3
29312: PUSH
29313: FOR_TO
29314: IFFALSE 29402
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29316: LD_ADDR_VAR 0 5
29320: PUSH
29321: LD_VAR 0 5
29325: PUSH
29326: LD_VAR 0 3
29330: PUSH
29331: LD_VAR 0 4
29335: ARRAY
29336: PPUSH
29337: CALL_OW 266
29341: PUSH
29342: LD_VAR 0 3
29346: PUSH
29347: LD_VAR 0 4
29351: ARRAY
29352: PPUSH
29353: CALL_OW 250
29357: PUSH
29358: LD_VAR 0 3
29362: PUSH
29363: LD_VAR 0 4
29367: ARRAY
29368: PPUSH
29369: CALL_OW 251
29373: PUSH
29374: LD_VAR 0 3
29378: PUSH
29379: LD_VAR 0 4
29383: ARRAY
29384: PPUSH
29385: CALL_OW 254
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: PUSH
29396: EMPTY
29397: LIST
29398: ADD
29399: ST_TO_ADDR
29400: GO 29313
29402: POP
29403: POP
// result := list ;
29404: LD_ADDR_VAR 0 2
29408: PUSH
29409: LD_VAR 0 5
29413: ST_TO_ADDR
// end ;
29414: LD_VAR 0 2
29418: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29419: LD_INT 0
29421: PPUSH
29422: PPUSH
29423: PPUSH
29424: PPUSH
29425: PPUSH
29426: PPUSH
29427: PPUSH
// if not factory then
29428: LD_VAR 0 1
29432: NOT
29433: IFFALSE 29437
// exit ;
29435: GO 30030
// if control = control_apeman then
29437: LD_VAR 0 4
29441: PUSH
29442: LD_INT 5
29444: EQUAL
29445: IFFALSE 29554
// begin tmp := UnitsInside ( factory ) ;
29447: LD_ADDR_VAR 0 8
29451: PUSH
29452: LD_VAR 0 1
29456: PPUSH
29457: CALL_OW 313
29461: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29462: LD_VAR 0 8
29466: PPUSH
29467: LD_INT 25
29469: PUSH
29470: LD_INT 12
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PPUSH
29477: CALL_OW 72
29481: NOT
29482: IFFALSE 29492
// control := control_manual ;
29484: LD_ADDR_VAR 0 4
29488: PUSH
29489: LD_INT 1
29491: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29492: LD_ADDR_VAR 0 8
29496: PUSH
29497: LD_VAR 0 1
29501: PPUSH
29502: CALL 29189 0 1
29506: ST_TO_ADDR
// if tmp then
29507: LD_VAR 0 8
29511: IFFALSE 29554
// begin for i in tmp do
29513: LD_ADDR_VAR 0 7
29517: PUSH
29518: LD_VAR 0 8
29522: PUSH
29523: FOR_IN
29524: IFFALSE 29552
// if i [ 1 ] = b_ext_radio then
29526: LD_VAR 0 7
29530: PUSH
29531: LD_INT 1
29533: ARRAY
29534: PUSH
29535: LD_INT 22
29537: EQUAL
29538: IFFALSE 29550
// begin control := control_remote ;
29540: LD_ADDR_VAR 0 4
29544: PUSH
29545: LD_INT 2
29547: ST_TO_ADDR
// break ;
29548: GO 29552
// end ;
29550: GO 29523
29552: POP
29553: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29554: LD_VAR 0 1
29558: PPUSH
29559: LD_VAR 0 2
29563: PPUSH
29564: LD_VAR 0 3
29568: PPUSH
29569: LD_VAR 0 4
29573: PPUSH
29574: LD_VAR 0 5
29578: PPUSH
29579: CALL_OW 448
29583: IFFALSE 29618
// begin result := [ chassis , engine , control , weapon ] ;
29585: LD_ADDR_VAR 0 6
29589: PUSH
29590: LD_VAR 0 2
29594: PUSH
29595: LD_VAR 0 3
29599: PUSH
29600: LD_VAR 0 4
29604: PUSH
29605: LD_VAR 0 5
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: ST_TO_ADDR
// exit ;
29616: GO 30030
// end ; _chassis := AvailableChassisList ( factory ) ;
29618: LD_ADDR_VAR 0 9
29622: PUSH
29623: LD_VAR 0 1
29627: PPUSH
29628: CALL_OW 475
29632: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29633: LD_ADDR_VAR 0 11
29637: PUSH
29638: LD_VAR 0 1
29642: PPUSH
29643: CALL_OW 476
29647: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29648: LD_ADDR_VAR 0 12
29652: PUSH
29653: LD_VAR 0 1
29657: PPUSH
29658: CALL_OW 477
29662: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29663: LD_ADDR_VAR 0 10
29667: PUSH
29668: LD_VAR 0 1
29672: PPUSH
29673: CALL_OW 478
29677: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29678: LD_VAR 0 9
29682: NOT
29683: PUSH
29684: LD_VAR 0 11
29688: NOT
29689: OR
29690: PUSH
29691: LD_VAR 0 12
29695: NOT
29696: OR
29697: PUSH
29698: LD_VAR 0 10
29702: NOT
29703: OR
29704: IFFALSE 29739
// begin result := [ chassis , engine , control , weapon ] ;
29706: LD_ADDR_VAR 0 6
29710: PUSH
29711: LD_VAR 0 2
29715: PUSH
29716: LD_VAR 0 3
29720: PUSH
29721: LD_VAR 0 4
29725: PUSH
29726: LD_VAR 0 5
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: ST_TO_ADDR
// exit ;
29737: GO 30030
// end ; if not chassis in _chassis then
29739: LD_VAR 0 2
29743: PUSH
29744: LD_VAR 0 9
29748: IN
29749: NOT
29750: IFFALSE 29776
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29752: LD_ADDR_VAR 0 2
29756: PUSH
29757: LD_VAR 0 9
29761: PUSH
29762: LD_INT 1
29764: PPUSH
29765: LD_VAR 0 9
29769: PPUSH
29770: CALL_OW 12
29774: ARRAY
29775: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29776: LD_VAR 0 2
29780: PPUSH
29781: LD_VAR 0 3
29785: PPUSH
29786: CALL 30035 0 2
29790: NOT
29791: IFFALSE 29850
// repeat engine := _engine [ 1 ] ;
29793: LD_ADDR_VAR 0 3
29797: PUSH
29798: LD_VAR 0 11
29802: PUSH
29803: LD_INT 1
29805: ARRAY
29806: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29807: LD_ADDR_VAR 0 11
29811: PUSH
29812: LD_VAR 0 11
29816: PPUSH
29817: LD_INT 1
29819: PPUSH
29820: CALL_OW 3
29824: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29825: LD_VAR 0 2
29829: PPUSH
29830: LD_VAR 0 3
29834: PPUSH
29835: CALL 30035 0 2
29839: PUSH
29840: LD_VAR 0 11
29844: PUSH
29845: EMPTY
29846: EQUAL
29847: OR
29848: IFFALSE 29793
// if not control in _control then
29850: LD_VAR 0 4
29854: PUSH
29855: LD_VAR 0 12
29859: IN
29860: NOT
29861: IFFALSE 29887
// control := _control [ rand ( 1 , _control ) ] ;
29863: LD_ADDR_VAR 0 4
29867: PUSH
29868: LD_VAR 0 12
29872: PUSH
29873: LD_INT 1
29875: PPUSH
29876: LD_VAR 0 12
29880: PPUSH
29881: CALL_OW 12
29885: ARRAY
29886: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29887: LD_VAR 0 2
29891: PPUSH
29892: LD_VAR 0 5
29896: PPUSH
29897: CALL 30255 0 2
29901: NOT
29902: IFFALSE 29961
// repeat weapon := _weapon [ 1 ] ;
29904: LD_ADDR_VAR 0 5
29908: PUSH
29909: LD_VAR 0 10
29913: PUSH
29914: LD_INT 1
29916: ARRAY
29917: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29918: LD_ADDR_VAR 0 10
29922: PUSH
29923: LD_VAR 0 10
29927: PPUSH
29928: LD_INT 1
29930: PPUSH
29931: CALL_OW 3
29935: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29936: LD_VAR 0 2
29940: PPUSH
29941: LD_VAR 0 5
29945: PPUSH
29946: CALL 30255 0 2
29950: PUSH
29951: LD_VAR 0 10
29955: PUSH
29956: EMPTY
29957: EQUAL
29958: OR
29959: IFFALSE 29904
// result := [ ] ;
29961: LD_ADDR_VAR 0 6
29965: PUSH
29966: EMPTY
29967: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29968: LD_VAR 0 1
29972: PPUSH
29973: LD_VAR 0 2
29977: PPUSH
29978: LD_VAR 0 3
29982: PPUSH
29983: LD_VAR 0 4
29987: PPUSH
29988: LD_VAR 0 5
29992: PPUSH
29993: CALL_OW 448
29997: IFFALSE 30030
// result := [ chassis , engine , control , weapon ] ;
29999: LD_ADDR_VAR 0 6
30003: PUSH
30004: LD_VAR 0 2
30008: PUSH
30009: LD_VAR 0 3
30013: PUSH
30014: LD_VAR 0 4
30018: PUSH
30019: LD_VAR 0 5
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: ST_TO_ADDR
// end ;
30030: LD_VAR 0 6
30034: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30035: LD_INT 0
30037: PPUSH
// if not chassis or not engine then
30038: LD_VAR 0 1
30042: NOT
30043: PUSH
30044: LD_VAR 0 2
30048: NOT
30049: OR
30050: IFFALSE 30054
// exit ;
30052: GO 30250
// case engine of engine_solar :
30054: LD_VAR 0 2
30058: PUSH
30059: LD_INT 2
30061: DOUBLE
30062: EQUAL
30063: IFTRUE 30067
30065: GO 30105
30067: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30068: LD_ADDR_VAR 0 3
30072: PUSH
30073: LD_INT 11
30075: PUSH
30076: LD_INT 12
30078: PUSH
30079: LD_INT 13
30081: PUSH
30082: LD_INT 14
30084: PUSH
30085: LD_INT 1
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: LD_INT 3
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: ST_TO_ADDR
30103: GO 30234
30105: LD_INT 1
30107: DOUBLE
30108: EQUAL
30109: IFTRUE 30113
30111: GO 30175
30113: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30114: LD_ADDR_VAR 0 3
30118: PUSH
30119: LD_INT 11
30121: PUSH
30122: LD_INT 12
30124: PUSH
30125: LD_INT 13
30127: PUSH
30128: LD_INT 14
30130: PUSH
30131: LD_INT 1
30133: PUSH
30134: LD_INT 2
30136: PUSH
30137: LD_INT 3
30139: PUSH
30140: LD_INT 4
30142: PUSH
30143: LD_INT 5
30145: PUSH
30146: LD_INT 21
30148: PUSH
30149: LD_INT 23
30151: PUSH
30152: LD_INT 22
30154: PUSH
30155: LD_INT 24
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: ST_TO_ADDR
30173: GO 30234
30175: LD_INT 3
30177: DOUBLE
30178: EQUAL
30179: IFTRUE 30183
30181: GO 30233
30183: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30184: LD_ADDR_VAR 0 3
30188: PUSH
30189: LD_INT 13
30191: PUSH
30192: LD_INT 14
30194: PUSH
30195: LD_INT 2
30197: PUSH
30198: LD_INT 3
30200: PUSH
30201: LD_INT 4
30203: PUSH
30204: LD_INT 5
30206: PUSH
30207: LD_INT 21
30209: PUSH
30210: LD_INT 22
30212: PUSH
30213: LD_INT 23
30215: PUSH
30216: LD_INT 24
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: ST_TO_ADDR
30231: GO 30234
30233: POP
// result := ( chassis in result ) ;
30234: LD_ADDR_VAR 0 3
30238: PUSH
30239: LD_VAR 0 1
30243: PUSH
30244: LD_VAR 0 3
30248: IN
30249: ST_TO_ADDR
// end ;
30250: LD_VAR 0 3
30254: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30255: LD_INT 0
30257: PPUSH
// if not chassis or not weapon then
30258: LD_VAR 0 1
30262: NOT
30263: PUSH
30264: LD_VAR 0 2
30268: NOT
30269: OR
30270: IFFALSE 30274
// exit ;
30272: GO 31300
// case weapon of us_machine_gun :
30274: LD_VAR 0 2
30278: PUSH
30279: LD_INT 2
30281: DOUBLE
30282: EQUAL
30283: IFTRUE 30287
30285: GO 30317
30287: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30288: LD_ADDR_VAR 0 3
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: LD_INT 3
30301: PUSH
30302: LD_INT 4
30304: PUSH
30305: LD_INT 5
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: ST_TO_ADDR
30315: GO 31284
30317: LD_INT 3
30319: DOUBLE
30320: EQUAL
30321: IFTRUE 30325
30323: GO 30355
30325: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30326: LD_ADDR_VAR 0 3
30330: PUSH
30331: LD_INT 1
30333: PUSH
30334: LD_INT 2
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: LD_INT 4
30342: PUSH
30343: LD_INT 5
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: ST_TO_ADDR
30353: GO 31284
30355: LD_INT 11
30357: DOUBLE
30358: EQUAL
30359: IFTRUE 30363
30361: GO 30393
30363: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30364: LD_ADDR_VAR 0 3
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: LD_INT 2
30374: PUSH
30375: LD_INT 3
30377: PUSH
30378: LD_INT 4
30380: PUSH
30381: LD_INT 5
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: ST_TO_ADDR
30391: GO 31284
30393: LD_INT 4
30395: DOUBLE
30396: EQUAL
30397: IFTRUE 30401
30399: GO 30427
30401: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30402: LD_ADDR_VAR 0 3
30406: PUSH
30407: LD_INT 2
30409: PUSH
30410: LD_INT 3
30412: PUSH
30413: LD_INT 4
30415: PUSH
30416: LD_INT 5
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: ST_TO_ADDR
30425: GO 31284
30427: LD_INT 5
30429: DOUBLE
30430: EQUAL
30431: IFTRUE 30435
30433: GO 30461
30435: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30436: LD_ADDR_VAR 0 3
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: LD_INT 3
30446: PUSH
30447: LD_INT 4
30449: PUSH
30450: LD_INT 5
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: ST_TO_ADDR
30459: GO 31284
30461: LD_INT 9
30463: DOUBLE
30464: EQUAL
30465: IFTRUE 30469
30467: GO 30495
30469: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30470: LD_ADDR_VAR 0 3
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: LD_INT 3
30480: PUSH
30481: LD_INT 4
30483: PUSH
30484: LD_INT 5
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: ST_TO_ADDR
30493: GO 31284
30495: LD_INT 7
30497: DOUBLE
30498: EQUAL
30499: IFTRUE 30503
30501: GO 30529
30503: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30504: LD_ADDR_VAR 0 3
30508: PUSH
30509: LD_INT 2
30511: PUSH
30512: LD_INT 3
30514: PUSH
30515: LD_INT 4
30517: PUSH
30518: LD_INT 5
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: ST_TO_ADDR
30527: GO 31284
30529: LD_INT 12
30531: DOUBLE
30532: EQUAL
30533: IFTRUE 30537
30535: GO 30563
30537: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30538: LD_ADDR_VAR 0 3
30542: PUSH
30543: LD_INT 2
30545: PUSH
30546: LD_INT 3
30548: PUSH
30549: LD_INT 4
30551: PUSH
30552: LD_INT 5
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: ST_TO_ADDR
30561: GO 31284
30563: LD_INT 13
30565: DOUBLE
30566: EQUAL
30567: IFTRUE 30571
30569: GO 30597
30571: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30572: LD_ADDR_VAR 0 3
30576: PUSH
30577: LD_INT 2
30579: PUSH
30580: LD_INT 3
30582: PUSH
30583: LD_INT 4
30585: PUSH
30586: LD_INT 5
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: ST_TO_ADDR
30595: GO 31284
30597: LD_INT 14
30599: DOUBLE
30600: EQUAL
30601: IFTRUE 30605
30603: GO 30623
30605: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30606: LD_ADDR_VAR 0 3
30610: PUSH
30611: LD_INT 4
30613: PUSH
30614: LD_INT 5
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: ST_TO_ADDR
30621: GO 31284
30623: LD_INT 6
30625: DOUBLE
30626: EQUAL
30627: IFTRUE 30631
30629: GO 30649
30631: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30632: LD_ADDR_VAR 0 3
30636: PUSH
30637: LD_INT 4
30639: PUSH
30640: LD_INT 5
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: ST_TO_ADDR
30647: GO 31284
30649: LD_INT 10
30651: DOUBLE
30652: EQUAL
30653: IFTRUE 30657
30655: GO 30675
30657: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30658: LD_ADDR_VAR 0 3
30662: PUSH
30663: LD_INT 4
30665: PUSH
30666: LD_INT 5
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: ST_TO_ADDR
30673: GO 31284
30675: LD_INT 22
30677: DOUBLE
30678: EQUAL
30679: IFTRUE 30683
30681: GO 30709
30683: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30684: LD_ADDR_VAR 0 3
30688: PUSH
30689: LD_INT 11
30691: PUSH
30692: LD_INT 12
30694: PUSH
30695: LD_INT 13
30697: PUSH
30698: LD_INT 14
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: ST_TO_ADDR
30707: GO 31284
30709: LD_INT 23
30711: DOUBLE
30712: EQUAL
30713: IFTRUE 30717
30715: GO 30743
30717: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30718: LD_ADDR_VAR 0 3
30722: PUSH
30723: LD_INT 11
30725: PUSH
30726: LD_INT 12
30728: PUSH
30729: LD_INT 13
30731: PUSH
30732: LD_INT 14
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: ST_TO_ADDR
30741: GO 31284
30743: LD_INT 24
30745: DOUBLE
30746: EQUAL
30747: IFTRUE 30751
30749: GO 30777
30751: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30752: LD_ADDR_VAR 0 3
30756: PUSH
30757: LD_INT 11
30759: PUSH
30760: LD_INT 12
30762: PUSH
30763: LD_INT 13
30765: PUSH
30766: LD_INT 14
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: ST_TO_ADDR
30775: GO 31284
30777: LD_INT 30
30779: DOUBLE
30780: EQUAL
30781: IFTRUE 30785
30783: GO 30811
30785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30786: LD_ADDR_VAR 0 3
30790: PUSH
30791: LD_INT 11
30793: PUSH
30794: LD_INT 12
30796: PUSH
30797: LD_INT 13
30799: PUSH
30800: LD_INT 14
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: ST_TO_ADDR
30809: GO 31284
30811: LD_INT 25
30813: DOUBLE
30814: EQUAL
30815: IFTRUE 30819
30817: GO 30837
30819: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30820: LD_ADDR_VAR 0 3
30824: PUSH
30825: LD_INT 13
30827: PUSH
30828: LD_INT 14
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: ST_TO_ADDR
30835: GO 31284
30837: LD_INT 27
30839: DOUBLE
30840: EQUAL
30841: IFTRUE 30845
30843: GO 30863
30845: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30846: LD_ADDR_VAR 0 3
30850: PUSH
30851: LD_INT 13
30853: PUSH
30854: LD_INT 14
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: ST_TO_ADDR
30861: GO 31284
30863: LD_INT 28
30865: DOUBLE
30866: EQUAL
30867: IFTRUE 30871
30869: GO 30889
30871: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30872: LD_ADDR_VAR 0 3
30876: PUSH
30877: LD_INT 13
30879: PUSH
30880: LD_INT 14
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: ST_TO_ADDR
30887: GO 31284
30889: LD_INT 29
30891: DOUBLE
30892: EQUAL
30893: IFTRUE 30897
30895: GO 30915
30897: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30898: LD_ADDR_VAR 0 3
30902: PUSH
30903: LD_INT 13
30905: PUSH
30906: LD_INT 14
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: ST_TO_ADDR
30913: GO 31284
30915: LD_INT 31
30917: DOUBLE
30918: EQUAL
30919: IFTRUE 30923
30921: GO 30941
30923: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30924: LD_ADDR_VAR 0 3
30928: PUSH
30929: LD_INT 13
30931: PUSH
30932: LD_INT 14
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: ST_TO_ADDR
30939: GO 31284
30941: LD_INT 26
30943: DOUBLE
30944: EQUAL
30945: IFTRUE 30949
30947: GO 30967
30949: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30950: LD_ADDR_VAR 0 3
30954: PUSH
30955: LD_INT 13
30957: PUSH
30958: LD_INT 14
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: ST_TO_ADDR
30965: GO 31284
30967: LD_INT 42
30969: DOUBLE
30970: EQUAL
30971: IFTRUE 30975
30973: GO 31001
30975: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30976: LD_ADDR_VAR 0 3
30980: PUSH
30981: LD_INT 21
30983: PUSH
30984: LD_INT 22
30986: PUSH
30987: LD_INT 23
30989: PUSH
30990: LD_INT 24
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: ST_TO_ADDR
30999: GO 31284
31001: LD_INT 43
31003: DOUBLE
31004: EQUAL
31005: IFTRUE 31009
31007: GO 31035
31009: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31010: LD_ADDR_VAR 0 3
31014: PUSH
31015: LD_INT 21
31017: PUSH
31018: LD_INT 22
31020: PUSH
31021: LD_INT 23
31023: PUSH
31024: LD_INT 24
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: ST_TO_ADDR
31033: GO 31284
31035: LD_INT 44
31037: DOUBLE
31038: EQUAL
31039: IFTRUE 31043
31041: GO 31069
31043: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31044: LD_ADDR_VAR 0 3
31048: PUSH
31049: LD_INT 21
31051: PUSH
31052: LD_INT 22
31054: PUSH
31055: LD_INT 23
31057: PUSH
31058: LD_INT 24
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: ST_TO_ADDR
31067: GO 31284
31069: LD_INT 45
31071: DOUBLE
31072: EQUAL
31073: IFTRUE 31077
31075: GO 31103
31077: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31078: LD_ADDR_VAR 0 3
31082: PUSH
31083: LD_INT 21
31085: PUSH
31086: LD_INT 22
31088: PUSH
31089: LD_INT 23
31091: PUSH
31092: LD_INT 24
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: ST_TO_ADDR
31101: GO 31284
31103: LD_INT 49
31105: DOUBLE
31106: EQUAL
31107: IFTRUE 31111
31109: GO 31137
31111: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31112: LD_ADDR_VAR 0 3
31116: PUSH
31117: LD_INT 21
31119: PUSH
31120: LD_INT 22
31122: PUSH
31123: LD_INT 23
31125: PUSH
31126: LD_INT 24
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: ST_TO_ADDR
31135: GO 31284
31137: LD_INT 51
31139: DOUBLE
31140: EQUAL
31141: IFTRUE 31145
31143: GO 31171
31145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31146: LD_ADDR_VAR 0 3
31150: PUSH
31151: LD_INT 21
31153: PUSH
31154: LD_INT 22
31156: PUSH
31157: LD_INT 23
31159: PUSH
31160: LD_INT 24
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: ST_TO_ADDR
31169: GO 31284
31171: LD_INT 52
31173: DOUBLE
31174: EQUAL
31175: IFTRUE 31179
31177: GO 31205
31179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31180: LD_ADDR_VAR 0 3
31184: PUSH
31185: LD_INT 21
31187: PUSH
31188: LD_INT 22
31190: PUSH
31191: LD_INT 23
31193: PUSH
31194: LD_INT 24
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: ST_TO_ADDR
31203: GO 31284
31205: LD_INT 53
31207: DOUBLE
31208: EQUAL
31209: IFTRUE 31213
31211: GO 31231
31213: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31214: LD_ADDR_VAR 0 3
31218: PUSH
31219: LD_INT 23
31221: PUSH
31222: LD_INT 24
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: ST_TO_ADDR
31229: GO 31284
31231: LD_INT 46
31233: DOUBLE
31234: EQUAL
31235: IFTRUE 31239
31237: GO 31257
31239: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31240: LD_ADDR_VAR 0 3
31244: PUSH
31245: LD_INT 23
31247: PUSH
31248: LD_INT 24
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: ST_TO_ADDR
31255: GO 31284
31257: LD_INT 47
31259: DOUBLE
31260: EQUAL
31261: IFTRUE 31265
31263: GO 31283
31265: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31266: LD_ADDR_VAR 0 3
31270: PUSH
31271: LD_INT 23
31273: PUSH
31274: LD_INT 24
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: ST_TO_ADDR
31281: GO 31284
31283: POP
// result := ( chassis in result ) ;
31284: LD_ADDR_VAR 0 3
31288: PUSH
31289: LD_VAR 0 1
31293: PUSH
31294: LD_VAR 0 3
31298: IN
31299: ST_TO_ADDR
// end ;
31300: LD_VAR 0 3
31304: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31305: LD_INT 0
31307: PPUSH
31308: PPUSH
31309: PPUSH
31310: PPUSH
31311: PPUSH
31312: PPUSH
31313: PPUSH
// result := array ;
31314: LD_ADDR_VAR 0 5
31318: PUSH
31319: LD_VAR 0 1
31323: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31324: LD_VAR 0 1
31328: NOT
31329: PUSH
31330: LD_VAR 0 2
31334: NOT
31335: OR
31336: PUSH
31337: LD_VAR 0 3
31341: NOT
31342: OR
31343: PUSH
31344: LD_VAR 0 2
31348: PUSH
31349: LD_VAR 0 1
31353: GREATER
31354: OR
31355: PUSH
31356: LD_VAR 0 3
31360: PUSH
31361: LD_VAR 0 1
31365: GREATER
31366: OR
31367: IFFALSE 31371
// exit ;
31369: GO 31667
// if direction then
31371: LD_VAR 0 4
31375: IFFALSE 31439
// begin d := 1 ;
31377: LD_ADDR_VAR 0 9
31381: PUSH
31382: LD_INT 1
31384: ST_TO_ADDR
// if i_from > i_to then
31385: LD_VAR 0 2
31389: PUSH
31390: LD_VAR 0 3
31394: GREATER
31395: IFFALSE 31421
// length := ( array - i_from ) + i_to else
31397: LD_ADDR_VAR 0 11
31401: PUSH
31402: LD_VAR 0 1
31406: PUSH
31407: LD_VAR 0 2
31411: MINUS
31412: PUSH
31413: LD_VAR 0 3
31417: PLUS
31418: ST_TO_ADDR
31419: GO 31437
// length := i_to - i_from ;
31421: LD_ADDR_VAR 0 11
31425: PUSH
31426: LD_VAR 0 3
31430: PUSH
31431: LD_VAR 0 2
31435: MINUS
31436: ST_TO_ADDR
// end else
31437: GO 31500
// begin d := - 1 ;
31439: LD_ADDR_VAR 0 9
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: ST_TO_ADDR
// if i_from > i_to then
31448: LD_VAR 0 2
31452: PUSH
31453: LD_VAR 0 3
31457: GREATER
31458: IFFALSE 31478
// length := i_from - i_to else
31460: LD_ADDR_VAR 0 11
31464: PUSH
31465: LD_VAR 0 2
31469: PUSH
31470: LD_VAR 0 3
31474: MINUS
31475: ST_TO_ADDR
31476: GO 31500
// length := ( array - i_to ) + i_from ;
31478: LD_ADDR_VAR 0 11
31482: PUSH
31483: LD_VAR 0 1
31487: PUSH
31488: LD_VAR 0 3
31492: MINUS
31493: PUSH
31494: LD_VAR 0 2
31498: PLUS
31499: ST_TO_ADDR
// end ; if not length then
31500: LD_VAR 0 11
31504: NOT
31505: IFFALSE 31509
// exit ;
31507: GO 31667
// tmp := array ;
31509: LD_ADDR_VAR 0 10
31513: PUSH
31514: LD_VAR 0 1
31518: ST_TO_ADDR
// for i = 1 to length do
31519: LD_ADDR_VAR 0 6
31523: PUSH
31524: DOUBLE
31525: LD_INT 1
31527: DEC
31528: ST_TO_ADDR
31529: LD_VAR 0 11
31533: PUSH
31534: FOR_TO
31535: IFFALSE 31655
// begin for j = 1 to array do
31537: LD_ADDR_VAR 0 7
31541: PUSH
31542: DOUBLE
31543: LD_INT 1
31545: DEC
31546: ST_TO_ADDR
31547: LD_VAR 0 1
31551: PUSH
31552: FOR_TO
31553: IFFALSE 31641
// begin k := j + d ;
31555: LD_ADDR_VAR 0 8
31559: PUSH
31560: LD_VAR 0 7
31564: PUSH
31565: LD_VAR 0 9
31569: PLUS
31570: ST_TO_ADDR
// if k > array then
31571: LD_VAR 0 8
31575: PUSH
31576: LD_VAR 0 1
31580: GREATER
31581: IFFALSE 31591
// k := 1 ;
31583: LD_ADDR_VAR 0 8
31587: PUSH
31588: LD_INT 1
31590: ST_TO_ADDR
// if not k then
31591: LD_VAR 0 8
31595: NOT
31596: IFFALSE 31608
// k := array ;
31598: LD_ADDR_VAR 0 8
31602: PUSH
31603: LD_VAR 0 1
31607: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31608: LD_ADDR_VAR 0 10
31612: PUSH
31613: LD_VAR 0 10
31617: PPUSH
31618: LD_VAR 0 8
31622: PPUSH
31623: LD_VAR 0 1
31627: PUSH
31628: LD_VAR 0 7
31632: ARRAY
31633: PPUSH
31634: CALL_OW 1
31638: ST_TO_ADDR
// end ;
31639: GO 31552
31641: POP
31642: POP
// array := tmp ;
31643: LD_ADDR_VAR 0 1
31647: PUSH
31648: LD_VAR 0 10
31652: ST_TO_ADDR
// end ;
31653: GO 31534
31655: POP
31656: POP
// result := array ;
31657: LD_ADDR_VAR 0 5
31661: PUSH
31662: LD_VAR 0 1
31666: ST_TO_ADDR
// end ;
31667: LD_VAR 0 5
31671: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31672: LD_INT 0
31674: PPUSH
31675: PPUSH
// result := 0 ;
31676: LD_ADDR_VAR 0 3
31680: PUSH
31681: LD_INT 0
31683: ST_TO_ADDR
// if not array or not value in array then
31684: LD_VAR 0 1
31688: NOT
31689: PUSH
31690: LD_VAR 0 2
31694: PUSH
31695: LD_VAR 0 1
31699: IN
31700: NOT
31701: OR
31702: IFFALSE 31706
// exit ;
31704: GO 31760
// for i = 1 to array do
31706: LD_ADDR_VAR 0 4
31710: PUSH
31711: DOUBLE
31712: LD_INT 1
31714: DEC
31715: ST_TO_ADDR
31716: LD_VAR 0 1
31720: PUSH
31721: FOR_TO
31722: IFFALSE 31758
// if value = array [ i ] then
31724: LD_VAR 0 2
31728: PUSH
31729: LD_VAR 0 1
31733: PUSH
31734: LD_VAR 0 4
31738: ARRAY
31739: EQUAL
31740: IFFALSE 31756
// begin result := i ;
31742: LD_ADDR_VAR 0 3
31746: PUSH
31747: LD_VAR 0 4
31751: ST_TO_ADDR
// exit ;
31752: POP
31753: POP
31754: GO 31760
// end ;
31756: GO 31721
31758: POP
31759: POP
// end ;
31760: LD_VAR 0 3
31764: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31765: LD_INT 0
31767: PPUSH
// vc_chassis := chassis ;
31768: LD_ADDR_OWVAR 37
31772: PUSH
31773: LD_VAR 0 1
31777: ST_TO_ADDR
// vc_engine := engine ;
31778: LD_ADDR_OWVAR 39
31782: PUSH
31783: LD_VAR 0 2
31787: ST_TO_ADDR
// vc_control := control ;
31788: LD_ADDR_OWVAR 38
31792: PUSH
31793: LD_VAR 0 3
31797: ST_TO_ADDR
// vc_weapon := weapon ;
31798: LD_ADDR_OWVAR 40
31802: PUSH
31803: LD_VAR 0 4
31807: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31808: LD_ADDR_OWVAR 41
31812: PUSH
31813: LD_VAR 0 5
31817: ST_TO_ADDR
// end ;
31818: LD_VAR 0 6
31822: RET
// export function WantPlant ( unit ) ; var task ; begin
31823: LD_INT 0
31825: PPUSH
31826: PPUSH
// result := false ;
31827: LD_ADDR_VAR 0 2
31831: PUSH
31832: LD_INT 0
31834: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31835: LD_ADDR_VAR 0 3
31839: PUSH
31840: LD_VAR 0 1
31844: PPUSH
31845: CALL_OW 437
31849: ST_TO_ADDR
// if task then
31850: LD_VAR 0 3
31854: IFFALSE 31882
// if task [ 1 ] [ 1 ] = p then
31856: LD_VAR 0 3
31860: PUSH
31861: LD_INT 1
31863: ARRAY
31864: PUSH
31865: LD_INT 1
31867: ARRAY
31868: PUSH
31869: LD_STRING p
31871: EQUAL
31872: IFFALSE 31882
// result := true ;
31874: LD_ADDR_VAR 0 2
31878: PUSH
31879: LD_INT 1
31881: ST_TO_ADDR
// end ;
31882: LD_VAR 0 2
31886: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31887: LD_INT 0
31889: PPUSH
31890: PPUSH
31891: PPUSH
31892: PPUSH
// if pos < 1 then
31893: LD_VAR 0 2
31897: PUSH
31898: LD_INT 1
31900: LESS
31901: IFFALSE 31905
// exit ;
31903: GO 32208
// if pos = 1 then
31905: LD_VAR 0 2
31909: PUSH
31910: LD_INT 1
31912: EQUAL
31913: IFFALSE 31946
// result := Replace ( arr , pos [ 1 ] , value ) else
31915: LD_ADDR_VAR 0 4
31919: PUSH
31920: LD_VAR 0 1
31924: PPUSH
31925: LD_VAR 0 2
31929: PUSH
31930: LD_INT 1
31932: ARRAY
31933: PPUSH
31934: LD_VAR 0 3
31938: PPUSH
31939: CALL_OW 1
31943: ST_TO_ADDR
31944: GO 32208
// begin tmp := arr ;
31946: LD_ADDR_VAR 0 6
31950: PUSH
31951: LD_VAR 0 1
31955: ST_TO_ADDR
// s_arr := [ tmp ] ;
31956: LD_ADDR_VAR 0 7
31960: PUSH
31961: LD_VAR 0 6
31965: PUSH
31966: EMPTY
31967: LIST
31968: ST_TO_ADDR
// for i = 1 to pos - 1 do
31969: LD_ADDR_VAR 0 5
31973: PUSH
31974: DOUBLE
31975: LD_INT 1
31977: DEC
31978: ST_TO_ADDR
31979: LD_VAR 0 2
31983: PUSH
31984: LD_INT 1
31986: MINUS
31987: PUSH
31988: FOR_TO
31989: IFFALSE 32034
// begin tmp := tmp [ pos [ i ] ] ;
31991: LD_ADDR_VAR 0 6
31995: PUSH
31996: LD_VAR 0 6
32000: PUSH
32001: LD_VAR 0 2
32005: PUSH
32006: LD_VAR 0 5
32010: ARRAY
32011: ARRAY
32012: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32013: LD_ADDR_VAR 0 7
32017: PUSH
32018: LD_VAR 0 7
32022: PUSH
32023: LD_VAR 0 6
32027: PUSH
32028: EMPTY
32029: LIST
32030: ADD
32031: ST_TO_ADDR
// end ;
32032: GO 31988
32034: POP
32035: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32036: LD_ADDR_VAR 0 6
32040: PUSH
32041: LD_VAR 0 6
32045: PPUSH
32046: LD_VAR 0 2
32050: PUSH
32051: LD_VAR 0 2
32055: ARRAY
32056: PPUSH
32057: LD_VAR 0 3
32061: PPUSH
32062: CALL_OW 1
32066: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32067: LD_ADDR_VAR 0 7
32071: PUSH
32072: LD_VAR 0 7
32076: PPUSH
32077: LD_VAR 0 7
32081: PPUSH
32082: LD_VAR 0 6
32086: PPUSH
32087: CALL_OW 1
32091: ST_TO_ADDR
// for i = s_arr downto 2 do
32092: LD_ADDR_VAR 0 5
32096: PUSH
32097: DOUBLE
32098: LD_VAR 0 7
32102: INC
32103: ST_TO_ADDR
32104: LD_INT 2
32106: PUSH
32107: FOR_DOWNTO
32108: IFFALSE 32192
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32110: LD_ADDR_VAR 0 6
32114: PUSH
32115: LD_VAR 0 7
32119: PUSH
32120: LD_VAR 0 5
32124: PUSH
32125: LD_INT 1
32127: MINUS
32128: ARRAY
32129: PPUSH
32130: LD_VAR 0 2
32134: PUSH
32135: LD_VAR 0 5
32139: PUSH
32140: LD_INT 1
32142: MINUS
32143: ARRAY
32144: PPUSH
32145: LD_VAR 0 7
32149: PUSH
32150: LD_VAR 0 5
32154: ARRAY
32155: PPUSH
32156: CALL_OW 1
32160: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32161: LD_ADDR_VAR 0 7
32165: PUSH
32166: LD_VAR 0 7
32170: PPUSH
32171: LD_VAR 0 5
32175: PUSH
32176: LD_INT 1
32178: MINUS
32179: PPUSH
32180: LD_VAR 0 6
32184: PPUSH
32185: CALL_OW 1
32189: ST_TO_ADDR
// end ;
32190: GO 32107
32192: POP
32193: POP
// result := s_arr [ 1 ] ;
32194: LD_ADDR_VAR 0 4
32198: PUSH
32199: LD_VAR 0 7
32203: PUSH
32204: LD_INT 1
32206: ARRAY
32207: ST_TO_ADDR
// end ; end ;
32208: LD_VAR 0 4
32212: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32213: LD_INT 0
32215: PPUSH
32216: PPUSH
// if not list then
32217: LD_VAR 0 1
32221: NOT
32222: IFFALSE 32226
// exit ;
32224: GO 32317
// i := list [ pos1 ] ;
32226: LD_ADDR_VAR 0 5
32230: PUSH
32231: LD_VAR 0 1
32235: PUSH
32236: LD_VAR 0 2
32240: ARRAY
32241: ST_TO_ADDR
// if not i then
32242: LD_VAR 0 5
32246: NOT
32247: IFFALSE 32251
// exit ;
32249: GO 32317
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32251: LD_ADDR_VAR 0 1
32255: PUSH
32256: LD_VAR 0 1
32260: PPUSH
32261: LD_VAR 0 2
32265: PPUSH
32266: LD_VAR 0 1
32270: PUSH
32271: LD_VAR 0 3
32275: ARRAY
32276: PPUSH
32277: CALL_OW 1
32281: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32282: LD_ADDR_VAR 0 1
32286: PUSH
32287: LD_VAR 0 1
32291: PPUSH
32292: LD_VAR 0 3
32296: PPUSH
32297: LD_VAR 0 5
32301: PPUSH
32302: CALL_OW 1
32306: ST_TO_ADDR
// result := list ;
32307: LD_ADDR_VAR 0 4
32311: PUSH
32312: LD_VAR 0 1
32316: ST_TO_ADDR
// end ;
32317: LD_VAR 0 4
32321: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32322: LD_INT 0
32324: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32325: LD_ADDR_VAR 0 5
32329: PUSH
32330: LD_VAR 0 1
32334: PPUSH
32335: CALL_OW 250
32339: PPUSH
32340: LD_VAR 0 1
32344: PPUSH
32345: CALL_OW 251
32349: PPUSH
32350: LD_VAR 0 2
32354: PPUSH
32355: LD_VAR 0 3
32359: PPUSH
32360: LD_VAR 0 4
32364: PPUSH
32365: CALL 32375 0 5
32369: ST_TO_ADDR
// end ;
32370: LD_VAR 0 5
32374: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32375: LD_INT 0
32377: PPUSH
32378: PPUSH
32379: PPUSH
32380: PPUSH
// if not list then
32381: LD_VAR 0 3
32385: NOT
32386: IFFALSE 32390
// exit ;
32388: GO 32778
// result := [ ] ;
32390: LD_ADDR_VAR 0 6
32394: PUSH
32395: EMPTY
32396: ST_TO_ADDR
// for i in list do
32397: LD_ADDR_VAR 0 7
32401: PUSH
32402: LD_VAR 0 3
32406: PUSH
32407: FOR_IN
32408: IFFALSE 32610
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32410: LD_ADDR_VAR 0 9
32414: PUSH
32415: LD_VAR 0 7
32419: PPUSH
32420: LD_VAR 0 1
32424: PPUSH
32425: LD_VAR 0 2
32429: PPUSH
32430: CALL_OW 297
32434: ST_TO_ADDR
// if not result then
32435: LD_VAR 0 6
32439: NOT
32440: IFFALSE 32466
// result := [ [ i , tmp ] ] else
32442: LD_ADDR_VAR 0 6
32446: PUSH
32447: LD_VAR 0 7
32451: PUSH
32452: LD_VAR 0 9
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: EMPTY
32462: LIST
32463: ST_TO_ADDR
32464: GO 32608
// begin if result [ result ] [ 2 ] < tmp then
32466: LD_VAR 0 6
32470: PUSH
32471: LD_VAR 0 6
32475: ARRAY
32476: PUSH
32477: LD_INT 2
32479: ARRAY
32480: PUSH
32481: LD_VAR 0 9
32485: LESS
32486: IFFALSE 32528
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32488: LD_ADDR_VAR 0 6
32492: PUSH
32493: LD_VAR 0 6
32497: PPUSH
32498: LD_VAR 0 6
32502: PUSH
32503: LD_INT 1
32505: PLUS
32506: PPUSH
32507: LD_VAR 0 7
32511: PUSH
32512: LD_VAR 0 9
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PPUSH
32521: CALL_OW 2
32525: ST_TO_ADDR
32526: GO 32608
// for j = 1 to result do
32528: LD_ADDR_VAR 0 8
32532: PUSH
32533: DOUBLE
32534: LD_INT 1
32536: DEC
32537: ST_TO_ADDR
32538: LD_VAR 0 6
32542: PUSH
32543: FOR_TO
32544: IFFALSE 32606
// begin if tmp < result [ j ] [ 2 ] then
32546: LD_VAR 0 9
32550: PUSH
32551: LD_VAR 0 6
32555: PUSH
32556: LD_VAR 0 8
32560: ARRAY
32561: PUSH
32562: LD_INT 2
32564: ARRAY
32565: LESS
32566: IFFALSE 32604
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32568: LD_ADDR_VAR 0 6
32572: PUSH
32573: LD_VAR 0 6
32577: PPUSH
32578: LD_VAR 0 8
32582: PPUSH
32583: LD_VAR 0 7
32587: PUSH
32588: LD_VAR 0 9
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PPUSH
32597: CALL_OW 2
32601: ST_TO_ADDR
// break ;
32602: GO 32606
// end ; end ;
32604: GO 32543
32606: POP
32607: POP
// end ; end ;
32608: GO 32407
32610: POP
32611: POP
// if result and not asc then
32612: LD_VAR 0 6
32616: PUSH
32617: LD_VAR 0 4
32621: NOT
32622: AND
32623: IFFALSE 32698
// begin tmp := result ;
32625: LD_ADDR_VAR 0 9
32629: PUSH
32630: LD_VAR 0 6
32634: ST_TO_ADDR
// for i = tmp downto 1 do
32635: LD_ADDR_VAR 0 7
32639: PUSH
32640: DOUBLE
32641: LD_VAR 0 9
32645: INC
32646: ST_TO_ADDR
32647: LD_INT 1
32649: PUSH
32650: FOR_DOWNTO
32651: IFFALSE 32696
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32653: LD_ADDR_VAR 0 6
32657: PUSH
32658: LD_VAR 0 6
32662: PPUSH
32663: LD_VAR 0 9
32667: PUSH
32668: LD_VAR 0 7
32672: MINUS
32673: PUSH
32674: LD_INT 1
32676: PLUS
32677: PPUSH
32678: LD_VAR 0 9
32682: PUSH
32683: LD_VAR 0 7
32687: ARRAY
32688: PPUSH
32689: CALL_OW 1
32693: ST_TO_ADDR
32694: GO 32650
32696: POP
32697: POP
// end ; tmp := [ ] ;
32698: LD_ADDR_VAR 0 9
32702: PUSH
32703: EMPTY
32704: ST_TO_ADDR
// if mode then
32705: LD_VAR 0 5
32709: IFFALSE 32778
// begin for i = 1 to result do
32711: LD_ADDR_VAR 0 7
32715: PUSH
32716: DOUBLE
32717: LD_INT 1
32719: DEC
32720: ST_TO_ADDR
32721: LD_VAR 0 6
32725: PUSH
32726: FOR_TO
32727: IFFALSE 32766
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32729: LD_ADDR_VAR 0 9
32733: PUSH
32734: LD_VAR 0 9
32738: PPUSH
32739: LD_VAR 0 7
32743: PPUSH
32744: LD_VAR 0 6
32748: PUSH
32749: LD_VAR 0 7
32753: ARRAY
32754: PUSH
32755: LD_INT 1
32757: ARRAY
32758: PPUSH
32759: CALL_OW 1
32763: ST_TO_ADDR
32764: GO 32726
32766: POP
32767: POP
// result := tmp ;
32768: LD_ADDR_VAR 0 6
32772: PUSH
32773: LD_VAR 0 9
32777: ST_TO_ADDR
// end ; end ;
32778: LD_VAR 0 6
32782: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32783: LD_INT 0
32785: PPUSH
32786: PPUSH
32787: PPUSH
32788: PPUSH
32789: PPUSH
32790: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32791: LD_ADDR_VAR 0 5
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: LD_INT 0
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: EMPTY
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: ST_TO_ADDR
// if not x or not y then
32813: LD_VAR 0 2
32817: NOT
32818: PUSH
32819: LD_VAR 0 3
32823: NOT
32824: OR
32825: IFFALSE 32829
// exit ;
32827: GO 34475
// if not range then
32829: LD_VAR 0 4
32833: NOT
32834: IFFALSE 32844
// range := 10 ;
32836: LD_ADDR_VAR 0 4
32840: PUSH
32841: LD_INT 10
32843: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32844: LD_ADDR_VAR 0 8
32848: PUSH
32849: LD_INT 81
32851: PUSH
32852: LD_VAR 0 1
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 92
32863: PUSH
32864: LD_VAR 0 2
32868: PUSH
32869: LD_VAR 0 3
32873: PUSH
32874: LD_VAR 0 4
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 3
32887: PUSH
32888: LD_INT 21
32890: PUSH
32891: LD_INT 3
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: LIST
32906: PPUSH
32907: CALL_OW 69
32911: ST_TO_ADDR
// if not tmp then
32912: LD_VAR 0 8
32916: NOT
32917: IFFALSE 32921
// exit ;
32919: GO 34475
// for i in tmp do
32921: LD_ADDR_VAR 0 6
32925: PUSH
32926: LD_VAR 0 8
32930: PUSH
32931: FOR_IN
32932: IFFALSE 34450
// begin points := [ 0 , 0 , 0 ] ;
32934: LD_ADDR_VAR 0 9
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: LD_INT 0
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: LIST
32952: ST_TO_ADDR
// bpoints := 1 ;
32953: LD_ADDR_VAR 0 10
32957: PUSH
32958: LD_INT 1
32960: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32961: LD_VAR 0 6
32965: PPUSH
32966: CALL_OW 247
32970: PUSH
32971: LD_INT 1
32973: DOUBLE
32974: EQUAL
32975: IFTRUE 32979
32977: GO 33557
32979: POP
// begin if GetClass ( i ) = 1 then
32980: LD_VAR 0 6
32984: PPUSH
32985: CALL_OW 257
32989: PUSH
32990: LD_INT 1
32992: EQUAL
32993: IFFALSE 33014
// points := [ 10 , 5 , 3 ] ;
32995: LD_ADDR_VAR 0 9
32999: PUSH
33000: LD_INT 10
33002: PUSH
33003: LD_INT 5
33005: PUSH
33006: LD_INT 3
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: LIST
33013: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33014: LD_VAR 0 6
33018: PPUSH
33019: CALL_OW 257
33023: PUSH
33024: LD_INT 2
33026: PUSH
33027: LD_INT 3
33029: PUSH
33030: LD_INT 4
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: LIST
33037: IN
33038: IFFALSE 33059
// points := [ 3 , 2 , 1 ] ;
33040: LD_ADDR_VAR 0 9
33044: PUSH
33045: LD_INT 3
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: LIST
33058: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33059: LD_VAR 0 6
33063: PPUSH
33064: CALL_OW 257
33068: PUSH
33069: LD_INT 5
33071: EQUAL
33072: IFFALSE 33093
// points := [ 130 , 5 , 2 ] ;
33074: LD_ADDR_VAR 0 9
33078: PUSH
33079: LD_INT 130
33081: PUSH
33082: LD_INT 5
33084: PUSH
33085: LD_INT 2
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: LIST
33092: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33093: LD_VAR 0 6
33097: PPUSH
33098: CALL_OW 257
33102: PUSH
33103: LD_INT 8
33105: EQUAL
33106: IFFALSE 33127
// points := [ 35 , 35 , 30 ] ;
33108: LD_ADDR_VAR 0 9
33112: PUSH
33113: LD_INT 35
33115: PUSH
33116: LD_INT 35
33118: PUSH
33119: LD_INT 30
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: LIST
33126: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33127: LD_VAR 0 6
33131: PPUSH
33132: CALL_OW 257
33136: PUSH
33137: LD_INT 9
33139: EQUAL
33140: IFFALSE 33161
// points := [ 20 , 55 , 40 ] ;
33142: LD_ADDR_VAR 0 9
33146: PUSH
33147: LD_INT 20
33149: PUSH
33150: LD_INT 55
33152: PUSH
33153: LD_INT 40
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: LIST
33160: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33161: LD_VAR 0 6
33165: PPUSH
33166: CALL_OW 257
33170: PUSH
33171: LD_INT 12
33173: PUSH
33174: LD_INT 16
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: IN
33181: IFFALSE 33202
// points := [ 5 , 3 , 2 ] ;
33183: LD_ADDR_VAR 0 9
33187: PUSH
33188: LD_INT 5
33190: PUSH
33191: LD_INT 3
33193: PUSH
33194: LD_INT 2
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: LIST
33201: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33202: LD_VAR 0 6
33206: PPUSH
33207: CALL_OW 257
33211: PUSH
33212: LD_INT 17
33214: EQUAL
33215: IFFALSE 33236
// points := [ 100 , 50 , 75 ] ;
33217: LD_ADDR_VAR 0 9
33221: PUSH
33222: LD_INT 100
33224: PUSH
33225: LD_INT 50
33227: PUSH
33228: LD_INT 75
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: LIST
33235: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33236: LD_VAR 0 6
33240: PPUSH
33241: CALL_OW 257
33245: PUSH
33246: LD_INT 15
33248: EQUAL
33249: IFFALSE 33270
// points := [ 10 , 5 , 3 ] ;
33251: LD_ADDR_VAR 0 9
33255: PUSH
33256: LD_INT 10
33258: PUSH
33259: LD_INT 5
33261: PUSH
33262: LD_INT 3
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: LIST
33269: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33270: LD_VAR 0 6
33274: PPUSH
33275: CALL_OW 257
33279: PUSH
33280: LD_INT 14
33282: EQUAL
33283: IFFALSE 33304
// points := [ 10 , 0 , 0 ] ;
33285: LD_ADDR_VAR 0 9
33289: PUSH
33290: LD_INT 10
33292: PUSH
33293: LD_INT 0
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: LIST
33303: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33304: LD_VAR 0 6
33308: PPUSH
33309: CALL_OW 257
33313: PUSH
33314: LD_INT 11
33316: EQUAL
33317: IFFALSE 33338
// points := [ 30 , 10 , 5 ] ;
33319: LD_ADDR_VAR 0 9
33323: PUSH
33324: LD_INT 30
33326: PUSH
33327: LD_INT 10
33329: PUSH
33330: LD_INT 5
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: LIST
33337: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33338: LD_VAR 0 1
33342: PPUSH
33343: LD_INT 5
33345: PPUSH
33346: CALL_OW 321
33350: PUSH
33351: LD_INT 2
33353: EQUAL
33354: IFFALSE 33371
// bpoints := bpoints * 1.8 ;
33356: LD_ADDR_VAR 0 10
33360: PUSH
33361: LD_VAR 0 10
33365: PUSH
33366: LD_REAL  1.80000000000000E+0000
33369: MUL
33370: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33371: LD_VAR 0 6
33375: PPUSH
33376: CALL_OW 257
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: LD_INT 2
33386: PUSH
33387: LD_INT 3
33389: PUSH
33390: LD_INT 4
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: IN
33399: PUSH
33400: LD_VAR 0 1
33404: PPUSH
33405: LD_INT 51
33407: PPUSH
33408: CALL_OW 321
33412: PUSH
33413: LD_INT 2
33415: EQUAL
33416: AND
33417: IFFALSE 33434
// bpoints := bpoints * 1.2 ;
33419: LD_ADDR_VAR 0 10
33423: PUSH
33424: LD_VAR 0 10
33428: PUSH
33429: LD_REAL  1.20000000000000E+0000
33432: MUL
33433: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33434: LD_VAR 0 6
33438: PPUSH
33439: CALL_OW 257
33443: PUSH
33444: LD_INT 5
33446: PUSH
33447: LD_INT 7
33449: PUSH
33450: LD_INT 9
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: LIST
33457: IN
33458: PUSH
33459: LD_VAR 0 1
33463: PPUSH
33464: LD_INT 52
33466: PPUSH
33467: CALL_OW 321
33471: PUSH
33472: LD_INT 2
33474: EQUAL
33475: AND
33476: IFFALSE 33493
// bpoints := bpoints * 1.5 ;
33478: LD_ADDR_VAR 0 10
33482: PUSH
33483: LD_VAR 0 10
33487: PUSH
33488: LD_REAL  1.50000000000000E+0000
33491: MUL
33492: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33493: LD_VAR 0 1
33497: PPUSH
33498: LD_INT 66
33500: PPUSH
33501: CALL_OW 321
33505: PUSH
33506: LD_INT 2
33508: EQUAL
33509: IFFALSE 33526
// bpoints := bpoints * 1.1 ;
33511: LD_ADDR_VAR 0 10
33515: PUSH
33516: LD_VAR 0 10
33520: PUSH
33521: LD_REAL  1.10000000000000E+0000
33524: MUL
33525: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33526: LD_ADDR_VAR 0 10
33530: PUSH
33531: LD_VAR 0 10
33535: PUSH
33536: LD_VAR 0 6
33540: PPUSH
33541: LD_INT 1
33543: PPUSH
33544: CALL_OW 259
33548: PUSH
33549: LD_REAL  1.15000000000000E+0000
33552: MUL
33553: MUL
33554: ST_TO_ADDR
// end ; unit_vehicle :
33555: GO 34379
33557: LD_INT 2
33559: DOUBLE
33560: EQUAL
33561: IFTRUE 33565
33563: GO 34367
33565: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33566: LD_VAR 0 6
33570: PPUSH
33571: CALL_OW 264
33575: PUSH
33576: LD_INT 2
33578: PUSH
33579: LD_INT 42
33581: PUSH
33582: LD_INT 24
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: LIST
33589: IN
33590: IFFALSE 33611
// points := [ 25 , 5 , 3 ] ;
33592: LD_ADDR_VAR 0 9
33596: PUSH
33597: LD_INT 25
33599: PUSH
33600: LD_INT 5
33602: PUSH
33603: LD_INT 3
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: LIST
33610: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33611: LD_VAR 0 6
33615: PPUSH
33616: CALL_OW 264
33620: PUSH
33621: LD_INT 4
33623: PUSH
33624: LD_INT 43
33626: PUSH
33627: LD_INT 25
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: LIST
33634: IN
33635: IFFALSE 33656
// points := [ 40 , 15 , 5 ] ;
33637: LD_ADDR_VAR 0 9
33641: PUSH
33642: LD_INT 40
33644: PUSH
33645: LD_INT 15
33647: PUSH
33648: LD_INT 5
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: LIST
33655: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33656: LD_VAR 0 6
33660: PPUSH
33661: CALL_OW 264
33665: PUSH
33666: LD_INT 3
33668: PUSH
33669: LD_INT 23
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: IN
33676: IFFALSE 33697
// points := [ 7 , 25 , 8 ] ;
33678: LD_ADDR_VAR 0 9
33682: PUSH
33683: LD_INT 7
33685: PUSH
33686: LD_INT 25
33688: PUSH
33689: LD_INT 8
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: LIST
33696: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33697: LD_VAR 0 6
33701: PPUSH
33702: CALL_OW 264
33706: PUSH
33707: LD_INT 5
33709: PUSH
33710: LD_INT 27
33712: PUSH
33713: LD_INT 44
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: LIST
33720: IN
33721: IFFALSE 33742
// points := [ 14 , 50 , 16 ] ;
33723: LD_ADDR_VAR 0 9
33727: PUSH
33728: LD_INT 14
33730: PUSH
33731: LD_INT 50
33733: PUSH
33734: LD_INT 16
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: LIST
33741: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33742: LD_VAR 0 6
33746: PPUSH
33747: CALL_OW 264
33751: PUSH
33752: LD_INT 6
33754: PUSH
33755: LD_INT 46
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: IN
33762: IFFALSE 33783
// points := [ 32 , 120 , 70 ] ;
33764: LD_ADDR_VAR 0 9
33768: PUSH
33769: LD_INT 32
33771: PUSH
33772: LD_INT 120
33774: PUSH
33775: LD_INT 70
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: LIST
33782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
33783: LD_VAR 0 6
33787: PPUSH
33788: CALL_OW 264
33792: PUSH
33793: LD_INT 7
33795: PUSH
33796: LD_INT 28
33798: PUSH
33799: LD_INT 45
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: LIST
33806: IN
33807: IFFALSE 33828
// points := [ 35 , 20 , 45 ] ;
33809: LD_ADDR_VAR 0 9
33813: PUSH
33814: LD_INT 35
33816: PUSH
33817: LD_INT 20
33819: PUSH
33820: LD_INT 45
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: LIST
33827: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33828: LD_VAR 0 6
33832: PPUSH
33833: CALL_OW 264
33837: PUSH
33838: LD_INT 47
33840: PUSH
33841: EMPTY
33842: LIST
33843: IN
33844: IFFALSE 33865
// points := [ 67 , 45 , 75 ] ;
33846: LD_ADDR_VAR 0 9
33850: PUSH
33851: LD_INT 67
33853: PUSH
33854: LD_INT 45
33856: PUSH
33857: LD_INT 75
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: LIST
33864: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33865: LD_VAR 0 6
33869: PPUSH
33870: CALL_OW 264
33874: PUSH
33875: LD_INT 26
33877: PUSH
33878: EMPTY
33879: LIST
33880: IN
33881: IFFALSE 33902
// points := [ 120 , 30 , 80 ] ;
33883: LD_ADDR_VAR 0 9
33887: PUSH
33888: LD_INT 120
33890: PUSH
33891: LD_INT 30
33893: PUSH
33894: LD_INT 80
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33902: LD_VAR 0 6
33906: PPUSH
33907: CALL_OW 264
33911: PUSH
33912: LD_INT 22
33914: PUSH
33915: EMPTY
33916: LIST
33917: IN
33918: IFFALSE 33939
// points := [ 40 , 1 , 1 ] ;
33920: LD_ADDR_VAR 0 9
33924: PUSH
33925: LD_INT 40
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: LD_INT 1
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: LIST
33938: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33939: LD_VAR 0 6
33943: PPUSH
33944: CALL_OW 264
33948: PUSH
33949: LD_INT 29
33951: PUSH
33952: EMPTY
33953: LIST
33954: IN
33955: IFFALSE 33976
// points := [ 70 , 200 , 400 ] ;
33957: LD_ADDR_VAR 0 9
33961: PUSH
33962: LD_INT 70
33964: PUSH
33965: LD_INT 200
33967: PUSH
33968: LD_INT 400
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: LIST
33975: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33976: LD_VAR 0 6
33980: PPUSH
33981: CALL_OW 264
33985: PUSH
33986: LD_INT 14
33988: PUSH
33989: LD_INT 53
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: IN
33996: IFFALSE 34017
// points := [ 40 , 10 , 20 ] ;
33998: LD_ADDR_VAR 0 9
34002: PUSH
34003: LD_INT 40
34005: PUSH
34006: LD_INT 10
34008: PUSH
34009: LD_INT 20
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: LIST
34016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34017: LD_VAR 0 6
34021: PPUSH
34022: CALL_OW 264
34026: PUSH
34027: LD_INT 9
34029: PUSH
34030: EMPTY
34031: LIST
34032: IN
34033: IFFALSE 34054
// points := [ 5 , 70 , 20 ] ;
34035: LD_ADDR_VAR 0 9
34039: PUSH
34040: LD_INT 5
34042: PUSH
34043: LD_INT 70
34045: PUSH
34046: LD_INT 20
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: LIST
34053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34054: LD_VAR 0 6
34058: PPUSH
34059: CALL_OW 264
34063: PUSH
34064: LD_INT 10
34066: PUSH
34067: EMPTY
34068: LIST
34069: IN
34070: IFFALSE 34091
// points := [ 35 , 110 , 70 ] ;
34072: LD_ADDR_VAR 0 9
34076: PUSH
34077: LD_INT 35
34079: PUSH
34080: LD_INT 110
34082: PUSH
34083: LD_INT 70
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: LIST
34090: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34091: LD_VAR 0 6
34095: PPUSH
34096: CALL_OW 265
34100: PUSH
34101: LD_INT 25
34103: EQUAL
34104: IFFALSE 34125
// points := [ 80 , 65 , 100 ] ;
34106: LD_ADDR_VAR 0 9
34110: PUSH
34111: LD_INT 80
34113: PUSH
34114: LD_INT 65
34116: PUSH
34117: LD_INT 100
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: LIST
34124: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34125: LD_VAR 0 6
34129: PPUSH
34130: CALL_OW 263
34134: PUSH
34135: LD_INT 1
34137: EQUAL
34138: IFFALSE 34173
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34140: LD_ADDR_VAR 0 10
34144: PUSH
34145: LD_VAR 0 10
34149: PUSH
34150: LD_VAR 0 6
34154: PPUSH
34155: CALL_OW 311
34159: PPUSH
34160: LD_INT 3
34162: PPUSH
34163: CALL_OW 259
34167: PUSH
34168: LD_INT 4
34170: MUL
34171: MUL
34172: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34173: LD_VAR 0 6
34177: PPUSH
34178: CALL_OW 263
34182: PUSH
34183: LD_INT 2
34185: EQUAL
34186: IFFALSE 34237
// begin j := IsControledBy ( i ) ;
34188: LD_ADDR_VAR 0 7
34192: PUSH
34193: LD_VAR 0 6
34197: PPUSH
34198: CALL_OW 312
34202: ST_TO_ADDR
// if j then
34203: LD_VAR 0 7
34207: IFFALSE 34237
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34209: LD_ADDR_VAR 0 10
34213: PUSH
34214: LD_VAR 0 10
34218: PUSH
34219: LD_VAR 0 7
34223: PPUSH
34224: LD_INT 3
34226: PPUSH
34227: CALL_OW 259
34231: PUSH
34232: LD_INT 3
34234: MUL
34235: MUL
34236: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34237: LD_VAR 0 6
34241: PPUSH
34242: CALL_OW 264
34246: PUSH
34247: LD_INT 5
34249: PUSH
34250: LD_INT 6
34252: PUSH
34253: LD_INT 46
34255: PUSH
34256: LD_INT 44
34258: PUSH
34259: LD_INT 47
34261: PUSH
34262: LD_INT 45
34264: PUSH
34265: LD_INT 28
34267: PUSH
34268: LD_INT 7
34270: PUSH
34271: LD_INT 27
34273: PUSH
34274: LD_INT 29
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: IN
34289: PUSH
34290: LD_VAR 0 1
34294: PPUSH
34295: LD_INT 52
34297: PPUSH
34298: CALL_OW 321
34302: PUSH
34303: LD_INT 2
34305: EQUAL
34306: AND
34307: IFFALSE 34324
// bpoints := bpoints * 1.2 ;
34309: LD_ADDR_VAR 0 10
34313: PUSH
34314: LD_VAR 0 10
34318: PUSH
34319: LD_REAL  1.20000000000000E+0000
34322: MUL
34323: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34324: LD_VAR 0 6
34328: PPUSH
34329: CALL_OW 264
34333: PUSH
34334: LD_INT 6
34336: PUSH
34337: LD_INT 46
34339: PUSH
34340: LD_INT 47
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: LIST
34347: IN
34348: IFFALSE 34365
// bpoints := bpoints * 1.2 ;
34350: LD_ADDR_VAR 0 10
34354: PUSH
34355: LD_VAR 0 10
34359: PUSH
34360: LD_REAL  1.20000000000000E+0000
34363: MUL
34364: ST_TO_ADDR
// end ; unit_building :
34365: GO 34379
34367: LD_INT 3
34369: DOUBLE
34370: EQUAL
34371: IFTRUE 34375
34373: GO 34378
34375: POP
// ; end ;
34376: GO 34379
34378: POP
// for j = 1 to 3 do
34379: LD_ADDR_VAR 0 7
34383: PUSH
34384: DOUBLE
34385: LD_INT 1
34387: DEC
34388: ST_TO_ADDR
34389: LD_INT 3
34391: PUSH
34392: FOR_TO
34393: IFFALSE 34446
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34395: LD_ADDR_VAR 0 5
34399: PUSH
34400: LD_VAR 0 5
34404: PPUSH
34405: LD_VAR 0 7
34409: PPUSH
34410: LD_VAR 0 5
34414: PUSH
34415: LD_VAR 0 7
34419: ARRAY
34420: PUSH
34421: LD_VAR 0 9
34425: PUSH
34426: LD_VAR 0 7
34430: ARRAY
34431: PUSH
34432: LD_VAR 0 10
34436: MUL
34437: PLUS
34438: PPUSH
34439: CALL_OW 1
34443: ST_TO_ADDR
34444: GO 34392
34446: POP
34447: POP
// end ;
34448: GO 32931
34450: POP
34451: POP
// result := Replace ( result , 4 , tmp ) ;
34452: LD_ADDR_VAR 0 5
34456: PUSH
34457: LD_VAR 0 5
34461: PPUSH
34462: LD_INT 4
34464: PPUSH
34465: LD_VAR 0 8
34469: PPUSH
34470: CALL_OW 1
34474: ST_TO_ADDR
// end ;
34475: LD_VAR 0 5
34479: RET
// export function DangerAtRange ( unit , range ) ; begin
34480: LD_INT 0
34482: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34483: LD_ADDR_VAR 0 3
34487: PUSH
34488: LD_VAR 0 1
34492: PPUSH
34493: CALL_OW 255
34497: PPUSH
34498: LD_VAR 0 1
34502: PPUSH
34503: CALL_OW 250
34507: PPUSH
34508: LD_VAR 0 1
34512: PPUSH
34513: CALL_OW 251
34517: PPUSH
34518: LD_VAR 0 2
34522: PPUSH
34523: CALL 32783 0 4
34527: ST_TO_ADDR
// end ;
34528: LD_VAR 0 3
34532: RET
// export function DangerInArea ( side , area ) ; begin
34533: LD_INT 0
34535: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34536: LD_ADDR_VAR 0 3
34540: PUSH
34541: LD_VAR 0 2
34545: PPUSH
34546: LD_INT 81
34548: PUSH
34549: LD_VAR 0 1
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PPUSH
34558: CALL_OW 70
34562: ST_TO_ADDR
// end ;
34563: LD_VAR 0 3
34567: RET
// export function IsExtension ( b ) ; begin
34568: LD_INT 0
34570: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34571: LD_ADDR_VAR 0 2
34575: PUSH
34576: LD_VAR 0 1
34580: PUSH
34581: LD_INT 23
34583: PUSH
34584: LD_INT 20
34586: PUSH
34587: LD_INT 22
34589: PUSH
34590: LD_INT 17
34592: PUSH
34593: LD_INT 24
34595: PUSH
34596: LD_INT 21
34598: PUSH
34599: LD_INT 19
34601: PUSH
34602: LD_INT 16
34604: PUSH
34605: LD_INT 25
34607: PUSH
34608: LD_INT 18
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: IN
34623: ST_TO_ADDR
// end ;
34624: LD_VAR 0 2
34628: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
34629: LD_INT 0
34631: PPUSH
34632: PPUSH
34633: PPUSH
// result := [ ] ;
34634: LD_ADDR_VAR 0 3
34638: PUSH
34639: EMPTY
34640: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34641: LD_ADDR_VAR 0 4
34645: PUSH
34646: LD_VAR 0 2
34650: PPUSH
34651: LD_INT 21
34653: PUSH
34654: LD_INT 3
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PPUSH
34661: CALL_OW 70
34665: ST_TO_ADDR
// if not tmp then
34666: LD_VAR 0 4
34670: NOT
34671: IFFALSE 34675
// exit ;
34673: GO 34733
// for i in tmp do
34675: LD_ADDR_VAR 0 5
34679: PUSH
34680: LD_VAR 0 4
34684: PUSH
34685: FOR_IN
34686: IFFALSE 34721
// if GetBase ( i ) <> base then
34688: LD_VAR 0 5
34692: PPUSH
34693: CALL_OW 274
34697: PUSH
34698: LD_VAR 0 1
34702: NONEQUAL
34703: IFFALSE 34719
// ComLinkToBase ( base , i ) ;
34705: LD_VAR 0 1
34709: PPUSH
34710: LD_VAR 0 5
34714: PPUSH
34715: CALL_OW 169
34719: GO 34685
34721: POP
34722: POP
// result := tmp ;
34723: LD_ADDR_VAR 0 3
34727: PUSH
34728: LD_VAR 0 4
34732: ST_TO_ADDR
// end ;
34733: LD_VAR 0 3
34737: RET
// export function ComComplete ( unit , b ) ; var i ; begin
34738: LD_INT 0
34740: PPUSH
34741: PPUSH
// if BuildingStatus ( b ) = bs_build then
34742: LD_VAR 0 2
34746: PPUSH
34747: CALL_OW 461
34751: PUSH
34752: LD_INT 1
34754: EQUAL
34755: IFFALSE 34815
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34757: LD_VAR 0 1
34761: PPUSH
34762: LD_STRING h
34764: PUSH
34765: LD_VAR 0 2
34769: PPUSH
34770: CALL_OW 250
34774: PUSH
34775: LD_VAR 0 2
34779: PPUSH
34780: CALL_OW 251
34784: PUSH
34785: LD_VAR 0 2
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: PUSH
34808: EMPTY
34809: LIST
34810: PPUSH
34811: CALL_OW 446
// end ;
34815: LD_VAR 0 3
34819: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34820: LD_INT 0
34822: PPUSH
34823: PPUSH
34824: PPUSH
34825: PPUSH
34826: PPUSH
34827: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
34828: LD_VAR 0 1
34832: NOT
34833: PUSH
34834: LD_VAR 0 1
34838: PPUSH
34839: CALL_OW 263
34843: PUSH
34844: LD_INT 2
34846: EQUAL
34847: NOT
34848: OR
34849: IFFALSE 34853
// exit ;
34851: GO 35169
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34853: LD_ADDR_VAR 0 6
34857: PUSH
34858: LD_INT 22
34860: PUSH
34861: LD_VAR 0 1
34865: PPUSH
34866: CALL_OW 255
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 2
34877: PUSH
34878: LD_INT 30
34880: PUSH
34881: LD_INT 36
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 34
34890: PUSH
34891: LD_INT 31
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: LIST
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PPUSH
34907: CALL_OW 69
34911: ST_TO_ADDR
// if not tmp then
34912: LD_VAR 0 6
34916: NOT
34917: IFFALSE 34921
// exit ;
34919: GO 35169
// result := [ ] ;
34921: LD_ADDR_VAR 0 2
34925: PUSH
34926: EMPTY
34927: ST_TO_ADDR
// for i in tmp do
34928: LD_ADDR_VAR 0 3
34932: PUSH
34933: LD_VAR 0 6
34937: PUSH
34938: FOR_IN
34939: IFFALSE 35010
// begin t := UnitsInside ( i ) ;
34941: LD_ADDR_VAR 0 4
34945: PUSH
34946: LD_VAR 0 3
34950: PPUSH
34951: CALL_OW 313
34955: ST_TO_ADDR
// if t then
34956: LD_VAR 0 4
34960: IFFALSE 35008
// for j in t do
34962: LD_ADDR_VAR 0 7
34966: PUSH
34967: LD_VAR 0 4
34971: PUSH
34972: FOR_IN
34973: IFFALSE 35006
// result := Insert ( result , result + 1 , j ) ;
34975: LD_ADDR_VAR 0 2
34979: PUSH
34980: LD_VAR 0 2
34984: PPUSH
34985: LD_VAR 0 2
34989: PUSH
34990: LD_INT 1
34992: PLUS
34993: PPUSH
34994: LD_VAR 0 7
34998: PPUSH
34999: CALL_OW 2
35003: ST_TO_ADDR
35004: GO 34972
35006: POP
35007: POP
// end ;
35008: GO 34938
35010: POP
35011: POP
// if not result then
35012: LD_VAR 0 2
35016: NOT
35017: IFFALSE 35021
// exit ;
35019: GO 35169
// mech := result [ 1 ] ;
35021: LD_ADDR_VAR 0 5
35025: PUSH
35026: LD_VAR 0 2
35030: PUSH
35031: LD_INT 1
35033: ARRAY
35034: ST_TO_ADDR
// if result > 1 then
35035: LD_VAR 0 2
35039: PUSH
35040: LD_INT 1
35042: GREATER
35043: IFFALSE 35155
// for i = 2 to result do
35045: LD_ADDR_VAR 0 3
35049: PUSH
35050: DOUBLE
35051: LD_INT 2
35053: DEC
35054: ST_TO_ADDR
35055: LD_VAR 0 2
35059: PUSH
35060: FOR_TO
35061: IFFALSE 35153
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35063: LD_ADDR_VAR 0 4
35067: PUSH
35068: LD_VAR 0 2
35072: PUSH
35073: LD_VAR 0 3
35077: ARRAY
35078: PPUSH
35079: LD_INT 3
35081: PPUSH
35082: CALL_OW 259
35086: PUSH
35087: LD_VAR 0 2
35091: PUSH
35092: LD_VAR 0 3
35096: ARRAY
35097: PPUSH
35098: CALL_OW 432
35102: MINUS
35103: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35104: LD_VAR 0 4
35108: PUSH
35109: LD_VAR 0 5
35113: PPUSH
35114: LD_INT 3
35116: PPUSH
35117: CALL_OW 259
35121: PUSH
35122: LD_VAR 0 5
35126: PPUSH
35127: CALL_OW 432
35131: MINUS
35132: GREATEREQUAL
35133: IFFALSE 35151
// mech := result [ i ] ;
35135: LD_ADDR_VAR 0 5
35139: PUSH
35140: LD_VAR 0 2
35144: PUSH
35145: LD_VAR 0 3
35149: ARRAY
35150: ST_TO_ADDR
// end ;
35151: GO 35060
35153: POP
35154: POP
// ComLinkTo ( vehicle , mech ) ;
35155: LD_VAR 0 1
35159: PPUSH
35160: LD_VAR 0 5
35164: PPUSH
35165: CALL_OW 135
// end ;
35169: LD_VAR 0 2
35173: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35174: LD_INT 0
35176: PPUSH
35177: PPUSH
35178: PPUSH
35179: PPUSH
35180: PPUSH
35181: PPUSH
35182: PPUSH
35183: PPUSH
35184: PPUSH
35185: PPUSH
35186: PPUSH
35187: PPUSH
35188: PPUSH
// result := [ ] ;
35189: LD_ADDR_VAR 0 7
35193: PUSH
35194: EMPTY
35195: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35196: LD_VAR 0 1
35200: PPUSH
35201: CALL_OW 266
35205: PUSH
35206: LD_INT 0
35208: PUSH
35209: LD_INT 1
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: IN
35216: NOT
35217: IFFALSE 35221
// exit ;
35219: GO 36852
// if name then
35221: LD_VAR 0 3
35225: IFFALSE 35241
// SetBName ( base_dep , name ) ;
35227: LD_VAR 0 1
35231: PPUSH
35232: LD_VAR 0 3
35236: PPUSH
35237: CALL_OW 500
// base := GetBase ( base_dep ) ;
35241: LD_ADDR_VAR 0 15
35245: PUSH
35246: LD_VAR 0 1
35250: PPUSH
35251: CALL_OW 274
35255: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35256: LD_ADDR_VAR 0 16
35260: PUSH
35261: LD_VAR 0 1
35265: PPUSH
35266: CALL_OW 255
35270: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35271: LD_ADDR_VAR 0 17
35275: PUSH
35276: LD_VAR 0 1
35280: PPUSH
35281: CALL_OW 248
35285: ST_TO_ADDR
// if sources then
35286: LD_VAR 0 5
35290: IFFALSE 35337
// for i = 1 to 3 do
35292: LD_ADDR_VAR 0 8
35296: PUSH
35297: DOUBLE
35298: LD_INT 1
35300: DEC
35301: ST_TO_ADDR
35302: LD_INT 3
35304: PUSH
35305: FOR_TO
35306: IFFALSE 35335
// AddResourceType ( base , i , sources [ i ] ) ;
35308: LD_VAR 0 15
35312: PPUSH
35313: LD_VAR 0 8
35317: PPUSH
35318: LD_VAR 0 5
35322: PUSH
35323: LD_VAR 0 8
35327: ARRAY
35328: PPUSH
35329: CALL_OW 276
35333: GO 35305
35335: POP
35336: POP
// buildings := GetBaseBuildings ( base , area ) ;
35337: LD_ADDR_VAR 0 18
35341: PUSH
35342: LD_VAR 0 15
35346: PPUSH
35347: LD_VAR 0 2
35351: PPUSH
35352: CALL 34629 0 2
35356: ST_TO_ADDR
// InitHc ;
35357: CALL_OW 19
// InitUc ;
35361: CALL_OW 18
// uc_side := side ;
35365: LD_ADDR_OWVAR 20
35369: PUSH
35370: LD_VAR 0 16
35374: ST_TO_ADDR
// uc_nation := nation ;
35375: LD_ADDR_OWVAR 21
35379: PUSH
35380: LD_VAR 0 17
35384: ST_TO_ADDR
// if buildings then
35385: LD_VAR 0 18
35389: IFFALSE 36711
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35391: LD_ADDR_VAR 0 19
35395: PUSH
35396: LD_VAR 0 18
35400: PPUSH
35401: LD_INT 2
35403: PUSH
35404: LD_INT 30
35406: PUSH
35407: LD_INT 29
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 30
35416: PUSH
35417: LD_INT 30
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: LIST
35428: PPUSH
35429: CALL_OW 72
35433: ST_TO_ADDR
// if tmp then
35434: LD_VAR 0 19
35438: IFFALSE 35486
// for i in tmp do
35440: LD_ADDR_VAR 0 8
35444: PUSH
35445: LD_VAR 0 19
35449: PUSH
35450: FOR_IN
35451: IFFALSE 35484
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35453: LD_VAR 0 8
35457: PPUSH
35458: CALL_OW 250
35462: PPUSH
35463: LD_VAR 0 8
35467: PPUSH
35468: CALL_OW 251
35472: PPUSH
35473: LD_VAR 0 16
35477: PPUSH
35478: CALL_OW 441
35482: GO 35450
35484: POP
35485: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35486: LD_VAR 0 18
35490: PPUSH
35491: LD_INT 2
35493: PUSH
35494: LD_INT 30
35496: PUSH
35497: LD_INT 32
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 30
35506: PUSH
35507: LD_INT 33
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: LIST
35518: PPUSH
35519: CALL_OW 72
35523: IFFALSE 35611
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35525: LD_ADDR_VAR 0 8
35529: PUSH
35530: LD_VAR 0 18
35534: PPUSH
35535: LD_INT 2
35537: PUSH
35538: LD_INT 30
35540: PUSH
35541: LD_INT 32
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 30
35550: PUSH
35551: LD_INT 33
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: PPUSH
35563: CALL_OW 72
35567: PUSH
35568: FOR_IN
35569: IFFALSE 35609
// begin if not GetBWeapon ( i ) then
35571: LD_VAR 0 8
35575: PPUSH
35576: CALL_OW 269
35580: NOT
35581: IFFALSE 35607
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35583: LD_VAR 0 8
35587: PPUSH
35588: LD_VAR 0 8
35592: PPUSH
35593: LD_VAR 0 2
35597: PPUSH
35598: CALL 36857 0 2
35602: PPUSH
35603: CALL_OW 431
// end ;
35607: GO 35568
35609: POP
35610: POP
// end ; for i = 1 to personel do
35611: LD_ADDR_VAR 0 8
35615: PUSH
35616: DOUBLE
35617: LD_INT 1
35619: DEC
35620: ST_TO_ADDR
35621: LD_VAR 0 6
35625: PUSH
35626: FOR_TO
35627: IFFALSE 36691
// begin if i > 4 then
35629: LD_VAR 0 8
35633: PUSH
35634: LD_INT 4
35636: GREATER
35637: IFFALSE 35641
// break ;
35639: GO 36691
// case i of 1 :
35641: LD_VAR 0 8
35645: PUSH
35646: LD_INT 1
35648: DOUBLE
35649: EQUAL
35650: IFTRUE 35654
35652: GO 35734
35654: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35655: LD_ADDR_VAR 0 12
35659: PUSH
35660: LD_VAR 0 18
35664: PPUSH
35665: LD_INT 22
35667: PUSH
35668: LD_VAR 0 16
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 58
35679: PUSH
35680: EMPTY
35681: LIST
35682: PUSH
35683: LD_INT 2
35685: PUSH
35686: LD_INT 30
35688: PUSH
35689: LD_INT 32
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 30
35698: PUSH
35699: LD_INT 4
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 30
35708: PUSH
35709: LD_INT 5
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: LIST
35726: PPUSH
35727: CALL_OW 72
35731: ST_TO_ADDR
35732: GO 35956
35734: LD_INT 2
35736: DOUBLE
35737: EQUAL
35738: IFTRUE 35742
35740: GO 35804
35742: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35743: LD_ADDR_VAR 0 12
35747: PUSH
35748: LD_VAR 0 18
35752: PPUSH
35753: LD_INT 22
35755: PUSH
35756: LD_VAR 0 16
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: LD_INT 30
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 30
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: LIST
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PPUSH
35797: CALL_OW 72
35801: ST_TO_ADDR
35802: GO 35956
35804: LD_INT 3
35806: DOUBLE
35807: EQUAL
35808: IFTRUE 35812
35810: GO 35874
35812: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35813: LD_ADDR_VAR 0 12
35817: PUSH
35818: LD_VAR 0 18
35822: PPUSH
35823: LD_INT 22
35825: PUSH
35826: LD_VAR 0 16
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 2
35837: PUSH
35838: LD_INT 30
35840: PUSH
35841: LD_INT 2
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 30
35850: PUSH
35851: LD_INT 3
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: LIST
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PPUSH
35867: CALL_OW 72
35871: ST_TO_ADDR
35872: GO 35956
35874: LD_INT 4
35876: DOUBLE
35877: EQUAL
35878: IFTRUE 35882
35880: GO 35955
35882: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35883: LD_ADDR_VAR 0 12
35887: PUSH
35888: LD_VAR 0 18
35892: PPUSH
35893: LD_INT 22
35895: PUSH
35896: LD_VAR 0 16
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 2
35907: PUSH
35908: LD_INT 30
35910: PUSH
35911: LD_INT 6
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 30
35920: PUSH
35921: LD_INT 7
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 30
35930: PUSH
35931: LD_INT 8
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PPUSH
35948: CALL_OW 72
35952: ST_TO_ADDR
35953: GO 35956
35955: POP
// if i = 1 then
35956: LD_VAR 0 8
35960: PUSH
35961: LD_INT 1
35963: EQUAL
35964: IFFALSE 36075
// begin tmp := [ ] ;
35966: LD_ADDR_VAR 0 19
35970: PUSH
35971: EMPTY
35972: ST_TO_ADDR
// for j in f do
35973: LD_ADDR_VAR 0 9
35977: PUSH
35978: LD_VAR 0 12
35982: PUSH
35983: FOR_IN
35984: IFFALSE 36057
// if GetBType ( j ) = b_bunker then
35986: LD_VAR 0 9
35990: PPUSH
35991: CALL_OW 266
35995: PUSH
35996: LD_INT 32
35998: EQUAL
35999: IFFALSE 36026
// tmp := Insert ( tmp , 1 , j ) else
36001: LD_ADDR_VAR 0 19
36005: PUSH
36006: LD_VAR 0 19
36010: PPUSH
36011: LD_INT 1
36013: PPUSH
36014: LD_VAR 0 9
36018: PPUSH
36019: CALL_OW 2
36023: ST_TO_ADDR
36024: GO 36055
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36026: LD_ADDR_VAR 0 19
36030: PUSH
36031: LD_VAR 0 19
36035: PPUSH
36036: LD_VAR 0 19
36040: PUSH
36041: LD_INT 1
36043: PLUS
36044: PPUSH
36045: LD_VAR 0 9
36049: PPUSH
36050: CALL_OW 2
36054: ST_TO_ADDR
36055: GO 35983
36057: POP
36058: POP
// if tmp then
36059: LD_VAR 0 19
36063: IFFALSE 36075
// f := tmp ;
36065: LD_ADDR_VAR 0 12
36069: PUSH
36070: LD_VAR 0 19
36074: ST_TO_ADDR
// end ; x := personel [ i ] ;
36075: LD_ADDR_VAR 0 13
36079: PUSH
36080: LD_VAR 0 6
36084: PUSH
36085: LD_VAR 0 8
36089: ARRAY
36090: ST_TO_ADDR
// if x = - 1 then
36091: LD_VAR 0 13
36095: PUSH
36096: LD_INT 1
36098: NEG
36099: EQUAL
36100: IFFALSE 36309
// begin for j in f do
36102: LD_ADDR_VAR 0 9
36106: PUSH
36107: LD_VAR 0 12
36111: PUSH
36112: FOR_IN
36113: IFFALSE 36305
// repeat InitHc ;
36115: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36119: LD_VAR 0 9
36123: PPUSH
36124: CALL_OW 266
36128: PUSH
36129: LD_INT 5
36131: EQUAL
36132: IFFALSE 36202
// begin if UnitsInside ( j ) < 3 then
36134: LD_VAR 0 9
36138: PPUSH
36139: CALL_OW 313
36143: PUSH
36144: LD_INT 3
36146: LESS
36147: IFFALSE 36183
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36149: LD_INT 0
36151: PPUSH
36152: LD_INT 5
36154: PUSH
36155: LD_INT 8
36157: PUSH
36158: LD_INT 9
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: LIST
36165: PUSH
36166: LD_VAR 0 17
36170: ARRAY
36171: PPUSH
36172: LD_VAR 0 4
36176: PPUSH
36177: CALL_OW 380
36181: GO 36200
// PrepareHuman ( false , i , skill ) ;
36183: LD_INT 0
36185: PPUSH
36186: LD_VAR 0 8
36190: PPUSH
36191: LD_VAR 0 4
36195: PPUSH
36196: CALL_OW 380
// end else
36200: GO 36219
// PrepareHuman ( false , i , skill ) ;
36202: LD_INT 0
36204: PPUSH
36205: LD_VAR 0 8
36209: PPUSH
36210: LD_VAR 0 4
36214: PPUSH
36215: CALL_OW 380
// un := CreateHuman ;
36219: LD_ADDR_VAR 0 14
36223: PUSH
36224: CALL_OW 44
36228: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36229: LD_ADDR_VAR 0 7
36233: PUSH
36234: LD_VAR 0 7
36238: PPUSH
36239: LD_INT 1
36241: PPUSH
36242: LD_VAR 0 14
36246: PPUSH
36247: CALL_OW 2
36251: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36252: LD_VAR 0 14
36256: PPUSH
36257: LD_VAR 0 9
36261: PPUSH
36262: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36266: LD_VAR 0 9
36270: PPUSH
36271: CALL_OW 313
36275: PUSH
36276: LD_INT 6
36278: EQUAL
36279: PUSH
36280: LD_VAR 0 9
36284: PPUSH
36285: CALL_OW 266
36289: PUSH
36290: LD_INT 32
36292: PUSH
36293: LD_INT 31
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: IN
36300: OR
36301: IFFALSE 36115
36303: GO 36112
36305: POP
36306: POP
// end else
36307: GO 36689
// for j = 1 to x do
36309: LD_ADDR_VAR 0 9
36313: PUSH
36314: DOUBLE
36315: LD_INT 1
36317: DEC
36318: ST_TO_ADDR
36319: LD_VAR 0 13
36323: PUSH
36324: FOR_TO
36325: IFFALSE 36687
// begin InitHc ;
36327: CALL_OW 19
// if not f then
36331: LD_VAR 0 12
36335: NOT
36336: IFFALSE 36425
// begin PrepareHuman ( false , i , skill ) ;
36338: LD_INT 0
36340: PPUSH
36341: LD_VAR 0 8
36345: PPUSH
36346: LD_VAR 0 4
36350: PPUSH
36351: CALL_OW 380
// un := CreateHuman ;
36355: LD_ADDR_VAR 0 14
36359: PUSH
36360: CALL_OW 44
36364: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36365: LD_ADDR_VAR 0 7
36369: PUSH
36370: LD_VAR 0 7
36374: PPUSH
36375: LD_INT 1
36377: PPUSH
36378: LD_VAR 0 14
36382: PPUSH
36383: CALL_OW 2
36387: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36388: LD_VAR 0 14
36392: PPUSH
36393: LD_VAR 0 1
36397: PPUSH
36398: CALL_OW 250
36402: PPUSH
36403: LD_VAR 0 1
36407: PPUSH
36408: CALL_OW 251
36412: PPUSH
36413: LD_INT 10
36415: PPUSH
36416: LD_INT 0
36418: PPUSH
36419: CALL_OW 50
// continue ;
36423: GO 36324
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36425: LD_VAR 0 12
36429: PUSH
36430: LD_INT 1
36432: ARRAY
36433: PPUSH
36434: CALL_OW 313
36438: PUSH
36439: LD_VAR 0 12
36443: PUSH
36444: LD_INT 1
36446: ARRAY
36447: PPUSH
36448: CALL_OW 266
36452: PUSH
36453: LD_INT 32
36455: PUSH
36456: LD_INT 31
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: IN
36463: AND
36464: PUSH
36465: LD_VAR 0 12
36469: PUSH
36470: LD_INT 1
36472: ARRAY
36473: PPUSH
36474: CALL_OW 313
36478: PUSH
36479: LD_INT 6
36481: EQUAL
36482: OR
36483: IFFALSE 36503
// f := Delete ( f , 1 ) ;
36485: LD_ADDR_VAR 0 12
36489: PUSH
36490: LD_VAR 0 12
36494: PPUSH
36495: LD_INT 1
36497: PPUSH
36498: CALL_OW 3
36502: ST_TO_ADDR
// if not f then
36503: LD_VAR 0 12
36507: NOT
36508: IFFALSE 36526
// begin x := x + 2 ;
36510: LD_ADDR_VAR 0 13
36514: PUSH
36515: LD_VAR 0 13
36519: PUSH
36520: LD_INT 2
36522: PLUS
36523: ST_TO_ADDR
// continue ;
36524: GO 36324
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36526: LD_VAR 0 12
36530: PUSH
36531: LD_INT 1
36533: ARRAY
36534: PPUSH
36535: CALL_OW 266
36539: PUSH
36540: LD_INT 5
36542: EQUAL
36543: IFFALSE 36617
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36545: LD_VAR 0 12
36549: PUSH
36550: LD_INT 1
36552: ARRAY
36553: PPUSH
36554: CALL_OW 313
36558: PUSH
36559: LD_INT 3
36561: LESS
36562: IFFALSE 36598
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36564: LD_INT 0
36566: PPUSH
36567: LD_INT 5
36569: PUSH
36570: LD_INT 8
36572: PUSH
36573: LD_INT 9
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: LIST
36580: PUSH
36581: LD_VAR 0 17
36585: ARRAY
36586: PPUSH
36587: LD_VAR 0 4
36591: PPUSH
36592: CALL_OW 380
36596: GO 36615
// PrepareHuman ( false , i , skill ) ;
36598: LD_INT 0
36600: PPUSH
36601: LD_VAR 0 8
36605: PPUSH
36606: LD_VAR 0 4
36610: PPUSH
36611: CALL_OW 380
// end else
36615: GO 36634
// PrepareHuman ( false , i , skill ) ;
36617: LD_INT 0
36619: PPUSH
36620: LD_VAR 0 8
36624: PPUSH
36625: LD_VAR 0 4
36629: PPUSH
36630: CALL_OW 380
// un := CreateHuman ;
36634: LD_ADDR_VAR 0 14
36638: PUSH
36639: CALL_OW 44
36643: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36644: LD_ADDR_VAR 0 7
36648: PUSH
36649: LD_VAR 0 7
36653: PPUSH
36654: LD_INT 1
36656: PPUSH
36657: LD_VAR 0 14
36661: PPUSH
36662: CALL_OW 2
36666: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36667: LD_VAR 0 14
36671: PPUSH
36672: LD_VAR 0 12
36676: PUSH
36677: LD_INT 1
36679: ARRAY
36680: PPUSH
36681: CALL_OW 52
// end ;
36685: GO 36324
36687: POP
36688: POP
// end ;
36689: GO 35626
36691: POP
36692: POP
// result := result ^ buildings ;
36693: LD_ADDR_VAR 0 7
36697: PUSH
36698: LD_VAR 0 7
36702: PUSH
36703: LD_VAR 0 18
36707: ADD
36708: ST_TO_ADDR
// end else
36709: GO 36852
// begin for i = 1 to personel do
36711: LD_ADDR_VAR 0 8
36715: PUSH
36716: DOUBLE
36717: LD_INT 1
36719: DEC
36720: ST_TO_ADDR
36721: LD_VAR 0 6
36725: PUSH
36726: FOR_TO
36727: IFFALSE 36850
// begin if i > 4 then
36729: LD_VAR 0 8
36733: PUSH
36734: LD_INT 4
36736: GREATER
36737: IFFALSE 36741
// break ;
36739: GO 36850
// x := personel [ i ] ;
36741: LD_ADDR_VAR 0 13
36745: PUSH
36746: LD_VAR 0 6
36750: PUSH
36751: LD_VAR 0 8
36755: ARRAY
36756: ST_TO_ADDR
// if x = - 1 then
36757: LD_VAR 0 13
36761: PUSH
36762: LD_INT 1
36764: NEG
36765: EQUAL
36766: IFFALSE 36770
// continue ;
36768: GO 36726
// PrepareHuman ( false , i , skill ) ;
36770: LD_INT 0
36772: PPUSH
36773: LD_VAR 0 8
36777: PPUSH
36778: LD_VAR 0 4
36782: PPUSH
36783: CALL_OW 380
// un := CreateHuman ;
36787: LD_ADDR_VAR 0 14
36791: PUSH
36792: CALL_OW 44
36796: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36797: LD_VAR 0 14
36801: PPUSH
36802: LD_VAR 0 1
36806: PPUSH
36807: CALL_OW 250
36811: PPUSH
36812: LD_VAR 0 1
36816: PPUSH
36817: CALL_OW 251
36821: PPUSH
36822: LD_INT 10
36824: PPUSH
36825: LD_INT 0
36827: PPUSH
36828: CALL_OW 50
// result := result ^ un ;
36832: LD_ADDR_VAR 0 7
36836: PUSH
36837: LD_VAR 0 7
36841: PUSH
36842: LD_VAR 0 14
36846: ADD
36847: ST_TO_ADDR
// end ;
36848: GO 36726
36850: POP
36851: POP
// end ; end ;
36852: LD_VAR 0 7
36856: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36857: LD_INT 0
36859: PPUSH
36860: PPUSH
36861: PPUSH
36862: PPUSH
36863: PPUSH
36864: PPUSH
36865: PPUSH
36866: PPUSH
36867: PPUSH
36868: PPUSH
36869: PPUSH
36870: PPUSH
36871: PPUSH
36872: PPUSH
36873: PPUSH
36874: PPUSH
// result := false ;
36875: LD_ADDR_VAR 0 3
36879: PUSH
36880: LD_INT 0
36882: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36883: LD_VAR 0 1
36887: NOT
36888: PUSH
36889: LD_VAR 0 1
36893: PPUSH
36894: CALL_OW 266
36898: PUSH
36899: LD_INT 32
36901: PUSH
36902: LD_INT 33
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: IN
36909: NOT
36910: OR
36911: IFFALSE 36915
// exit ;
36913: GO 38051
// nat := GetNation ( tower ) ;
36915: LD_ADDR_VAR 0 12
36919: PUSH
36920: LD_VAR 0 1
36924: PPUSH
36925: CALL_OW 248
36929: ST_TO_ADDR
// side := GetSide ( tower ) ;
36930: LD_ADDR_VAR 0 16
36934: PUSH
36935: LD_VAR 0 1
36939: PPUSH
36940: CALL_OW 255
36944: ST_TO_ADDR
// x := GetX ( tower ) ;
36945: LD_ADDR_VAR 0 10
36949: PUSH
36950: LD_VAR 0 1
36954: PPUSH
36955: CALL_OW 250
36959: ST_TO_ADDR
// y := GetY ( tower ) ;
36960: LD_ADDR_VAR 0 11
36964: PUSH
36965: LD_VAR 0 1
36969: PPUSH
36970: CALL_OW 251
36974: ST_TO_ADDR
// if not x or not y then
36975: LD_VAR 0 10
36979: NOT
36980: PUSH
36981: LD_VAR 0 11
36985: NOT
36986: OR
36987: IFFALSE 36991
// exit ;
36989: GO 38051
// weapon := 0 ;
36991: LD_ADDR_VAR 0 18
36995: PUSH
36996: LD_INT 0
36998: ST_TO_ADDR
// fac_list := [ ] ;
36999: LD_ADDR_VAR 0 17
37003: PUSH
37004: EMPTY
37005: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
37006: LD_ADDR_VAR 0 6
37010: PUSH
37011: LD_VAR 0 1
37015: PPUSH
37016: CALL_OW 274
37020: PPUSH
37021: LD_VAR 0 2
37025: PPUSH
37026: CALL 34629 0 2
37030: PPUSH
37031: LD_INT 30
37033: PUSH
37034: LD_INT 3
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PPUSH
37041: CALL_OW 72
37045: ST_TO_ADDR
// if not factories then
37046: LD_VAR 0 6
37050: NOT
37051: IFFALSE 37055
// exit ;
37053: GO 38051
// for i in factories do
37055: LD_ADDR_VAR 0 8
37059: PUSH
37060: LD_VAR 0 6
37064: PUSH
37065: FOR_IN
37066: IFFALSE 37091
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37068: LD_ADDR_VAR 0 17
37072: PUSH
37073: LD_VAR 0 17
37077: PUSH
37078: LD_VAR 0 8
37082: PPUSH
37083: CALL_OW 478
37087: UNION
37088: ST_TO_ADDR
37089: GO 37065
37091: POP
37092: POP
// if not fac_list then
37093: LD_VAR 0 17
37097: NOT
37098: IFFALSE 37102
// exit ;
37100: GO 38051
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37102: LD_ADDR_VAR 0 5
37106: PUSH
37107: LD_INT 4
37109: PUSH
37110: LD_INT 5
37112: PUSH
37113: LD_INT 9
37115: PUSH
37116: LD_INT 10
37118: PUSH
37119: LD_INT 6
37121: PUSH
37122: LD_INT 7
37124: PUSH
37125: LD_INT 11
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 27
37139: PUSH
37140: LD_INT 28
37142: PUSH
37143: LD_INT 26
37145: PUSH
37146: LD_INT 30
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 43
37157: PUSH
37158: LD_INT 44
37160: PUSH
37161: LD_INT 46
37163: PUSH
37164: LD_INT 45
37166: PUSH
37167: LD_INT 47
37169: PUSH
37170: LD_INT 49
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: PUSH
37186: LD_VAR 0 12
37190: ARRAY
37191: ST_TO_ADDR
// for i in list do
37192: LD_ADDR_VAR 0 8
37196: PUSH
37197: LD_VAR 0 5
37201: PUSH
37202: FOR_IN
37203: IFFALSE 37236
// if not i in fac_list then
37205: LD_VAR 0 8
37209: PUSH
37210: LD_VAR 0 17
37214: IN
37215: NOT
37216: IFFALSE 37234
// list := list diff i ;
37218: LD_ADDR_VAR 0 5
37222: PUSH
37223: LD_VAR 0 5
37227: PUSH
37228: LD_VAR 0 8
37232: DIFF
37233: ST_TO_ADDR
37234: GO 37202
37236: POP
37237: POP
// if not list then
37238: LD_VAR 0 5
37242: NOT
37243: IFFALSE 37247
// exit ;
37245: GO 38051
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37247: LD_VAR 0 12
37251: PUSH
37252: LD_INT 3
37254: EQUAL
37255: PUSH
37256: LD_INT 49
37258: PUSH
37259: LD_VAR 0 5
37263: IN
37264: AND
37265: PUSH
37266: LD_INT 31
37268: PPUSH
37269: LD_VAR 0 16
37273: PPUSH
37274: CALL_OW 321
37278: PUSH
37279: LD_INT 2
37281: EQUAL
37282: AND
37283: IFFALSE 37343
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37285: LD_INT 22
37287: PUSH
37288: LD_VAR 0 16
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 35
37299: PUSH
37300: LD_INT 49
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 91
37309: PUSH
37310: LD_VAR 0 1
37314: PUSH
37315: LD_INT 10
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: LIST
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: LIST
37327: PPUSH
37328: CALL_OW 69
37332: NOT
37333: IFFALSE 37343
// weapon := ru_time_lapser ;
37335: LD_ADDR_VAR 0 18
37339: PUSH
37340: LD_INT 49
37342: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37343: LD_VAR 0 12
37347: PUSH
37348: LD_INT 1
37350: PUSH
37351: LD_INT 2
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: IN
37358: PUSH
37359: LD_INT 11
37361: PUSH
37362: LD_VAR 0 5
37366: IN
37367: PUSH
37368: LD_INT 30
37370: PUSH
37371: LD_VAR 0 5
37375: IN
37376: OR
37377: AND
37378: PUSH
37379: LD_INT 6
37381: PPUSH
37382: LD_VAR 0 16
37386: PPUSH
37387: CALL_OW 321
37391: PUSH
37392: LD_INT 2
37394: EQUAL
37395: AND
37396: IFFALSE 37561
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37398: LD_INT 22
37400: PUSH
37401: LD_VAR 0 16
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 2
37412: PUSH
37413: LD_INT 35
37415: PUSH
37416: LD_INT 11
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 35
37425: PUSH
37426: LD_INT 30
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 91
37440: PUSH
37441: LD_VAR 0 1
37445: PUSH
37446: LD_INT 18
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: LIST
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: LIST
37458: PPUSH
37459: CALL_OW 69
37463: NOT
37464: PUSH
37465: LD_INT 22
37467: PUSH
37468: LD_VAR 0 16
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 2
37479: PUSH
37480: LD_INT 30
37482: PUSH
37483: LD_INT 32
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 30
37492: PUSH
37493: LD_INT 33
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 91
37507: PUSH
37508: LD_VAR 0 1
37512: PUSH
37513: LD_INT 12
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: LIST
37525: PUSH
37526: EMPTY
37527: LIST
37528: PPUSH
37529: CALL_OW 69
37533: PUSH
37534: LD_INT 2
37536: GREATER
37537: AND
37538: IFFALSE 37561
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37540: LD_ADDR_VAR 0 18
37544: PUSH
37545: LD_INT 11
37547: PUSH
37548: LD_INT 30
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_VAR 0 12
37559: ARRAY
37560: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37561: LD_VAR 0 18
37565: NOT
37566: PUSH
37567: LD_INT 40
37569: PPUSH
37570: LD_VAR 0 16
37574: PPUSH
37575: CALL_OW 321
37579: PUSH
37580: LD_INT 2
37582: EQUAL
37583: AND
37584: PUSH
37585: LD_INT 7
37587: PUSH
37588: LD_VAR 0 5
37592: IN
37593: PUSH
37594: LD_INT 28
37596: PUSH
37597: LD_VAR 0 5
37601: IN
37602: OR
37603: PUSH
37604: LD_INT 45
37606: PUSH
37607: LD_VAR 0 5
37611: IN
37612: OR
37613: AND
37614: IFFALSE 37868
// begin hex := GetHexInfo ( x , y ) ;
37616: LD_ADDR_VAR 0 4
37620: PUSH
37621: LD_VAR 0 10
37625: PPUSH
37626: LD_VAR 0 11
37630: PPUSH
37631: CALL_OW 546
37635: ST_TO_ADDR
// if hex [ 1 ] then
37636: LD_VAR 0 4
37640: PUSH
37641: LD_INT 1
37643: ARRAY
37644: IFFALSE 37648
// exit ;
37646: GO 38051
// height := hex [ 2 ] ;
37648: LD_ADDR_VAR 0 15
37652: PUSH
37653: LD_VAR 0 4
37657: PUSH
37658: LD_INT 2
37660: ARRAY
37661: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37662: LD_ADDR_VAR 0 14
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 3
37675: PUSH
37676: LD_INT 5
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: ST_TO_ADDR
// for i in tmp do
37685: LD_ADDR_VAR 0 8
37689: PUSH
37690: LD_VAR 0 14
37694: PUSH
37695: FOR_IN
37696: IFFALSE 37866
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37698: LD_ADDR_VAR 0 9
37702: PUSH
37703: LD_VAR 0 10
37707: PPUSH
37708: LD_VAR 0 8
37712: PPUSH
37713: LD_INT 5
37715: PPUSH
37716: CALL_OW 272
37720: PUSH
37721: LD_VAR 0 11
37725: PPUSH
37726: LD_VAR 0 8
37730: PPUSH
37731: LD_INT 5
37733: PPUSH
37734: CALL_OW 273
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37743: LD_VAR 0 9
37747: PUSH
37748: LD_INT 1
37750: ARRAY
37751: PPUSH
37752: LD_VAR 0 9
37756: PUSH
37757: LD_INT 2
37759: ARRAY
37760: PPUSH
37761: CALL_OW 488
37765: IFFALSE 37864
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37767: LD_ADDR_VAR 0 4
37771: PUSH
37772: LD_VAR 0 9
37776: PUSH
37777: LD_INT 1
37779: ARRAY
37780: PPUSH
37781: LD_VAR 0 9
37785: PUSH
37786: LD_INT 2
37788: ARRAY
37789: PPUSH
37790: CALL_OW 546
37794: ST_TO_ADDR
// if hex [ 1 ] then
37795: LD_VAR 0 4
37799: PUSH
37800: LD_INT 1
37802: ARRAY
37803: IFFALSE 37807
// continue ;
37805: GO 37695
// h := hex [ 2 ] ;
37807: LD_ADDR_VAR 0 13
37811: PUSH
37812: LD_VAR 0 4
37816: PUSH
37817: LD_INT 2
37819: ARRAY
37820: ST_TO_ADDR
// if h + 7 < height then
37821: LD_VAR 0 13
37825: PUSH
37826: LD_INT 7
37828: PLUS
37829: PUSH
37830: LD_VAR 0 15
37834: LESS
37835: IFFALSE 37864
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37837: LD_ADDR_VAR 0 18
37841: PUSH
37842: LD_INT 7
37844: PUSH
37845: LD_INT 28
37847: PUSH
37848: LD_INT 45
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: LIST
37855: PUSH
37856: LD_VAR 0 12
37860: ARRAY
37861: ST_TO_ADDR
// break ;
37862: GO 37866
// end ; end ; end ;
37864: GO 37695
37866: POP
37867: POP
// end ; if not weapon then
37868: LD_VAR 0 18
37872: NOT
37873: IFFALSE 37933
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37875: LD_ADDR_VAR 0 5
37879: PUSH
37880: LD_VAR 0 5
37884: PUSH
37885: LD_INT 11
37887: PUSH
37888: LD_INT 30
37890: PUSH
37891: LD_INT 49
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: LIST
37898: DIFF
37899: ST_TO_ADDR
// if not list then
37900: LD_VAR 0 5
37904: NOT
37905: IFFALSE 37909
// exit ;
37907: GO 38051
// weapon := list [ rand ( 1 , list ) ] ;
37909: LD_ADDR_VAR 0 18
37913: PUSH
37914: LD_VAR 0 5
37918: PUSH
37919: LD_INT 1
37921: PPUSH
37922: LD_VAR 0 5
37926: PPUSH
37927: CALL_OW 12
37931: ARRAY
37932: ST_TO_ADDR
// end ; if weapon then
37933: LD_VAR 0 18
37937: IFFALSE 38051
// begin tmp := CostOfWeapon ( weapon ) ;
37939: LD_ADDR_VAR 0 14
37943: PUSH
37944: LD_VAR 0 18
37948: PPUSH
37949: CALL_OW 451
37953: ST_TO_ADDR
// j := GetBase ( tower ) ;
37954: LD_ADDR_VAR 0 9
37958: PUSH
37959: LD_VAR 0 1
37963: PPUSH
37964: CALL_OW 274
37968: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37969: LD_VAR 0 9
37973: PPUSH
37974: LD_INT 1
37976: PPUSH
37977: CALL_OW 275
37981: PUSH
37982: LD_VAR 0 14
37986: PUSH
37987: LD_INT 1
37989: ARRAY
37990: GREATEREQUAL
37991: PUSH
37992: LD_VAR 0 9
37996: PPUSH
37997: LD_INT 2
37999: PPUSH
38000: CALL_OW 275
38004: PUSH
38005: LD_VAR 0 14
38009: PUSH
38010: LD_INT 2
38012: ARRAY
38013: GREATEREQUAL
38014: AND
38015: PUSH
38016: LD_VAR 0 9
38020: PPUSH
38021: LD_INT 3
38023: PPUSH
38024: CALL_OW 275
38028: PUSH
38029: LD_VAR 0 14
38033: PUSH
38034: LD_INT 3
38036: ARRAY
38037: GREATEREQUAL
38038: AND
38039: IFFALSE 38051
// result := weapon ;
38041: LD_ADDR_VAR 0 3
38045: PUSH
38046: LD_VAR 0 18
38050: ST_TO_ADDR
// end ; end ;
38051: LD_VAR 0 3
38055: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38056: LD_INT 0
38058: PPUSH
38059: PPUSH
// result := true ;
38060: LD_ADDR_VAR 0 3
38064: PUSH
38065: LD_INT 1
38067: ST_TO_ADDR
// if array1 = array2 then
38068: LD_VAR 0 1
38072: PUSH
38073: LD_VAR 0 2
38077: EQUAL
38078: IFFALSE 38138
// begin for i = 1 to array1 do
38080: LD_ADDR_VAR 0 4
38084: PUSH
38085: DOUBLE
38086: LD_INT 1
38088: DEC
38089: ST_TO_ADDR
38090: LD_VAR 0 1
38094: PUSH
38095: FOR_TO
38096: IFFALSE 38134
// if array1 [ i ] <> array2 [ i ] then
38098: LD_VAR 0 1
38102: PUSH
38103: LD_VAR 0 4
38107: ARRAY
38108: PUSH
38109: LD_VAR 0 2
38113: PUSH
38114: LD_VAR 0 4
38118: ARRAY
38119: NONEQUAL
38120: IFFALSE 38132
// begin result := false ;
38122: LD_ADDR_VAR 0 3
38126: PUSH
38127: LD_INT 0
38129: ST_TO_ADDR
// break ;
38130: GO 38134
// end ;
38132: GO 38095
38134: POP
38135: POP
// end else
38136: GO 38146
// result := false ;
38138: LD_ADDR_VAR 0 3
38142: PUSH
38143: LD_INT 0
38145: ST_TO_ADDR
// end ;
38146: LD_VAR 0 3
38150: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38151: LD_INT 0
38153: PPUSH
38154: PPUSH
38155: PPUSH
// pom := GetBase ( fac ) ;
38156: LD_ADDR_VAR 0 5
38160: PUSH
38161: LD_VAR 0 1
38165: PPUSH
38166: CALL_OW 274
38170: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38171: LD_ADDR_VAR 0 4
38175: PUSH
38176: LD_VAR 0 2
38180: PUSH
38181: LD_INT 1
38183: ARRAY
38184: PPUSH
38185: LD_VAR 0 2
38189: PUSH
38190: LD_INT 2
38192: ARRAY
38193: PPUSH
38194: LD_VAR 0 2
38198: PUSH
38199: LD_INT 3
38201: ARRAY
38202: PPUSH
38203: LD_VAR 0 2
38207: PUSH
38208: LD_INT 4
38210: ARRAY
38211: PPUSH
38212: CALL_OW 449
38216: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38217: LD_ADDR_VAR 0 3
38221: PUSH
38222: LD_VAR 0 5
38226: PPUSH
38227: LD_INT 1
38229: PPUSH
38230: CALL_OW 275
38234: PUSH
38235: LD_VAR 0 4
38239: PUSH
38240: LD_INT 1
38242: ARRAY
38243: GREATEREQUAL
38244: PUSH
38245: LD_VAR 0 5
38249: PPUSH
38250: LD_INT 2
38252: PPUSH
38253: CALL_OW 275
38257: PUSH
38258: LD_VAR 0 4
38262: PUSH
38263: LD_INT 2
38265: ARRAY
38266: GREATEREQUAL
38267: AND
38268: PUSH
38269: LD_VAR 0 5
38273: PPUSH
38274: LD_INT 3
38276: PPUSH
38277: CALL_OW 275
38281: PUSH
38282: LD_VAR 0 4
38286: PUSH
38287: LD_INT 3
38289: ARRAY
38290: GREATEREQUAL
38291: AND
38292: ST_TO_ADDR
// end ;
38293: LD_VAR 0 3
38297: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38298: LD_INT 0
38300: PPUSH
38301: PPUSH
38302: PPUSH
38303: PPUSH
// pom := GetBase ( building ) ;
38304: LD_ADDR_VAR 0 3
38308: PUSH
38309: LD_VAR 0 1
38313: PPUSH
38314: CALL_OW 274
38318: ST_TO_ADDR
// if not pom then
38319: LD_VAR 0 3
38323: NOT
38324: IFFALSE 38328
// exit ;
38326: GO 38498
// btype := GetBType ( building ) ;
38328: LD_ADDR_VAR 0 5
38332: PUSH
38333: LD_VAR 0 1
38337: PPUSH
38338: CALL_OW 266
38342: ST_TO_ADDR
// if btype = b_armoury then
38343: LD_VAR 0 5
38347: PUSH
38348: LD_INT 4
38350: EQUAL
38351: IFFALSE 38361
// btype := b_barracks ;
38353: LD_ADDR_VAR 0 5
38357: PUSH
38358: LD_INT 5
38360: ST_TO_ADDR
// if btype = b_depot then
38361: LD_VAR 0 5
38365: PUSH
38366: LD_INT 0
38368: EQUAL
38369: IFFALSE 38379
// btype := b_warehouse ;
38371: LD_ADDR_VAR 0 5
38375: PUSH
38376: LD_INT 1
38378: ST_TO_ADDR
// if btype = b_workshop then
38379: LD_VAR 0 5
38383: PUSH
38384: LD_INT 2
38386: EQUAL
38387: IFFALSE 38397
// btype := b_factory ;
38389: LD_ADDR_VAR 0 5
38393: PUSH
38394: LD_INT 3
38396: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38397: LD_ADDR_VAR 0 4
38401: PUSH
38402: LD_VAR 0 5
38406: PPUSH
38407: LD_VAR 0 1
38411: PPUSH
38412: CALL_OW 248
38416: PPUSH
38417: CALL_OW 450
38421: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38422: LD_ADDR_VAR 0 2
38426: PUSH
38427: LD_VAR 0 3
38431: PPUSH
38432: LD_INT 1
38434: PPUSH
38435: CALL_OW 275
38439: PUSH
38440: LD_VAR 0 4
38444: PUSH
38445: LD_INT 1
38447: ARRAY
38448: GREATEREQUAL
38449: PUSH
38450: LD_VAR 0 3
38454: PPUSH
38455: LD_INT 2
38457: PPUSH
38458: CALL_OW 275
38462: PUSH
38463: LD_VAR 0 4
38467: PUSH
38468: LD_INT 2
38470: ARRAY
38471: GREATEREQUAL
38472: AND
38473: PUSH
38474: LD_VAR 0 3
38478: PPUSH
38479: LD_INT 3
38481: PPUSH
38482: CALL_OW 275
38486: PUSH
38487: LD_VAR 0 4
38491: PUSH
38492: LD_INT 3
38494: ARRAY
38495: GREATEREQUAL
38496: AND
38497: ST_TO_ADDR
// end ;
38498: LD_VAR 0 2
38502: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38503: LD_INT 0
38505: PPUSH
38506: PPUSH
38507: PPUSH
// pom := GetBase ( building ) ;
38508: LD_ADDR_VAR 0 4
38512: PUSH
38513: LD_VAR 0 1
38517: PPUSH
38518: CALL_OW 274
38522: ST_TO_ADDR
// if not pom then
38523: LD_VAR 0 4
38527: NOT
38528: IFFALSE 38532
// exit ;
38530: GO 38633
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38532: LD_ADDR_VAR 0 5
38536: PUSH
38537: LD_VAR 0 2
38541: PPUSH
38542: LD_VAR 0 1
38546: PPUSH
38547: CALL_OW 248
38551: PPUSH
38552: CALL_OW 450
38556: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38557: LD_ADDR_VAR 0 3
38561: PUSH
38562: LD_VAR 0 4
38566: PPUSH
38567: LD_INT 1
38569: PPUSH
38570: CALL_OW 275
38574: PUSH
38575: LD_VAR 0 5
38579: PUSH
38580: LD_INT 1
38582: ARRAY
38583: GREATEREQUAL
38584: PUSH
38585: LD_VAR 0 4
38589: PPUSH
38590: LD_INT 2
38592: PPUSH
38593: CALL_OW 275
38597: PUSH
38598: LD_VAR 0 5
38602: PUSH
38603: LD_INT 2
38605: ARRAY
38606: GREATEREQUAL
38607: AND
38608: PUSH
38609: LD_VAR 0 4
38613: PPUSH
38614: LD_INT 3
38616: PPUSH
38617: CALL_OW 275
38621: PUSH
38622: LD_VAR 0 5
38626: PUSH
38627: LD_INT 3
38629: ARRAY
38630: GREATEREQUAL
38631: AND
38632: ST_TO_ADDR
// end ;
38633: LD_VAR 0 3
38637: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
38638: LD_INT 0
38640: PPUSH
38641: PPUSH
38642: PPUSH
38643: PPUSH
38644: PPUSH
38645: PPUSH
38646: PPUSH
38647: PPUSH
38648: PPUSH
38649: PPUSH
// result := false ;
38650: LD_ADDR_VAR 0 6
38654: PUSH
38655: LD_INT 0
38657: ST_TO_ADDR
// if not base or not btype or not x or not y then
38658: LD_VAR 0 1
38662: NOT
38663: PUSH
38664: LD_VAR 0 2
38668: NOT
38669: OR
38670: PUSH
38671: LD_VAR 0 3
38675: NOT
38676: OR
38677: PUSH
38678: LD_VAR 0 4
38682: NOT
38683: OR
38684: IFFALSE 38688
// exit ;
38686: GO 39297
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
38688: LD_ADDR_VAR 0 12
38692: PUSH
38693: LD_VAR 0 2
38697: PPUSH
38698: LD_VAR 0 3
38702: PPUSH
38703: LD_VAR 0 4
38707: PPUSH
38708: LD_VAR 0 5
38712: PPUSH
38713: LD_VAR 0 1
38717: PUSH
38718: LD_INT 1
38720: ARRAY
38721: PPUSH
38722: CALL_OW 248
38726: PPUSH
38727: LD_INT 0
38729: PPUSH
38730: CALL 40134 0 6
38734: ST_TO_ADDR
// if not hexes then
38735: LD_VAR 0 12
38739: NOT
38740: IFFALSE 38744
// exit ;
38742: GO 39297
// for i = 1 to hexes do
38744: LD_ADDR_VAR 0 7
38748: PUSH
38749: DOUBLE
38750: LD_INT 1
38752: DEC
38753: ST_TO_ADDR
38754: LD_VAR 0 12
38758: PUSH
38759: FOR_TO
38760: IFFALSE 39295
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38762: LD_ADDR_VAR 0 11
38766: PUSH
38767: LD_VAR 0 12
38771: PUSH
38772: LD_VAR 0 7
38776: ARRAY
38777: PUSH
38778: LD_INT 1
38780: ARRAY
38781: PPUSH
38782: LD_VAR 0 12
38786: PUSH
38787: LD_VAR 0 7
38791: ARRAY
38792: PUSH
38793: LD_INT 2
38795: ARRAY
38796: PPUSH
38797: CALL_OW 428
38801: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38802: LD_VAR 0 12
38806: PUSH
38807: LD_VAR 0 7
38811: ARRAY
38812: PUSH
38813: LD_INT 1
38815: ARRAY
38816: PPUSH
38817: LD_VAR 0 12
38821: PUSH
38822: LD_VAR 0 7
38826: ARRAY
38827: PUSH
38828: LD_INT 2
38830: ARRAY
38831: PPUSH
38832: CALL_OW 351
38836: PUSH
38837: LD_VAR 0 12
38841: PUSH
38842: LD_VAR 0 7
38846: ARRAY
38847: PUSH
38848: LD_INT 1
38850: ARRAY
38851: PPUSH
38852: LD_VAR 0 12
38856: PUSH
38857: LD_VAR 0 7
38861: ARRAY
38862: PUSH
38863: LD_INT 2
38865: ARRAY
38866: PPUSH
38867: CALL_OW 488
38871: NOT
38872: OR
38873: PUSH
38874: LD_VAR 0 11
38878: PPUSH
38879: CALL_OW 247
38883: PUSH
38884: LD_INT 3
38886: EQUAL
38887: OR
38888: IFFALSE 38894
// exit ;
38890: POP
38891: POP
38892: GO 39297
// if not tmp or not tmp in base then
38894: LD_VAR 0 11
38898: NOT
38899: PUSH
38900: LD_VAR 0 11
38904: PUSH
38905: LD_VAR 0 1
38909: IN
38910: NOT
38911: OR
38912: IFFALSE 38916
// continue ;
38914: GO 38759
// result := true ;
38916: LD_ADDR_VAR 0 6
38920: PUSH
38921: LD_INT 1
38923: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38924: LD_ADDR_VAR 0 15
38928: PUSH
38929: LD_VAR 0 1
38933: PPUSH
38934: LD_INT 22
38936: PUSH
38937: LD_VAR 0 11
38941: PPUSH
38942: CALL_OW 255
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 2
38953: PUSH
38954: LD_INT 30
38956: PUSH
38957: LD_INT 0
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 30
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: LIST
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PPUSH
38983: CALL_OW 72
38987: ST_TO_ADDR
// if dep then
38988: LD_VAR 0 15
38992: IFFALSE 39128
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38994: LD_ADDR_VAR 0 14
38998: PUSH
38999: LD_VAR 0 15
39003: PUSH
39004: LD_INT 1
39006: ARRAY
39007: PPUSH
39008: CALL_OW 250
39012: PPUSH
39013: LD_VAR 0 15
39017: PUSH
39018: LD_INT 1
39020: ARRAY
39021: PPUSH
39022: CALL_OW 254
39026: PPUSH
39027: LD_INT 5
39029: PPUSH
39030: CALL_OW 272
39034: PUSH
39035: LD_VAR 0 15
39039: PUSH
39040: LD_INT 1
39042: ARRAY
39043: PPUSH
39044: CALL_OW 251
39048: PPUSH
39049: LD_VAR 0 15
39053: PUSH
39054: LD_INT 1
39056: ARRAY
39057: PPUSH
39058: CALL_OW 254
39062: PPUSH
39063: LD_INT 5
39065: PPUSH
39066: CALL_OW 273
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39075: LD_VAR 0 14
39079: PUSH
39080: LD_INT 1
39082: ARRAY
39083: PPUSH
39084: LD_VAR 0 14
39088: PUSH
39089: LD_INT 2
39091: ARRAY
39092: PPUSH
39093: CALL_OW 488
39097: IFFALSE 39128
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39099: LD_VAR 0 11
39103: PPUSH
39104: LD_VAR 0 14
39108: PUSH
39109: LD_INT 1
39111: ARRAY
39112: PPUSH
39113: LD_VAR 0 14
39117: PUSH
39118: LD_INT 2
39120: ARRAY
39121: PPUSH
39122: CALL_OW 111
// continue ;
39126: GO 38759
// end ; end ; r := GetDir ( tmp ) ;
39128: LD_ADDR_VAR 0 13
39132: PUSH
39133: LD_VAR 0 11
39137: PPUSH
39138: CALL_OW 254
39142: ST_TO_ADDR
// if r = 5 then
39143: LD_VAR 0 13
39147: PUSH
39148: LD_INT 5
39150: EQUAL
39151: IFFALSE 39161
// r := 0 ;
39153: LD_ADDR_VAR 0 13
39157: PUSH
39158: LD_INT 0
39160: ST_TO_ADDR
// for j = r to 5 do
39161: LD_ADDR_VAR 0 8
39165: PUSH
39166: DOUBLE
39167: LD_VAR 0 13
39171: DEC
39172: ST_TO_ADDR
39173: LD_INT 5
39175: PUSH
39176: FOR_TO
39177: IFFALSE 39291
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39179: LD_ADDR_VAR 0 9
39183: PUSH
39184: LD_VAR 0 11
39188: PPUSH
39189: CALL_OW 250
39193: PPUSH
39194: LD_VAR 0 8
39198: PPUSH
39199: LD_INT 2
39201: PPUSH
39202: CALL_OW 272
39206: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39207: LD_ADDR_VAR 0 10
39211: PUSH
39212: LD_VAR 0 11
39216: PPUSH
39217: CALL_OW 251
39221: PPUSH
39222: LD_VAR 0 8
39226: PPUSH
39227: LD_INT 2
39229: PPUSH
39230: CALL_OW 273
39234: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39235: LD_VAR 0 9
39239: PPUSH
39240: LD_VAR 0 10
39244: PPUSH
39245: CALL_OW 488
39249: PUSH
39250: LD_VAR 0 9
39254: PPUSH
39255: LD_VAR 0 10
39259: PPUSH
39260: CALL_OW 428
39264: NOT
39265: AND
39266: IFFALSE 39289
// begin ComMoveXY ( tmp , _x , _y ) ;
39268: LD_VAR 0 11
39272: PPUSH
39273: LD_VAR 0 9
39277: PPUSH
39278: LD_VAR 0 10
39282: PPUSH
39283: CALL_OW 111
// break ;
39287: GO 39291
// end ; end ;
39289: GO 39176
39291: POP
39292: POP
// end ;
39293: GO 38759
39295: POP
39296: POP
// end ;
39297: LD_VAR 0 6
39301: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
39302: LD_INT 0
39304: PPUSH
39305: PPUSH
39306: PPUSH
39307: PPUSH
39308: PPUSH
39309: PPUSH
39310: PPUSH
39311: PPUSH
39312: PPUSH
39313: PPUSH
// result := false ;
39314: LD_ADDR_VAR 0 6
39318: PUSH
39319: LD_INT 0
39321: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39322: LD_VAR 0 1
39326: NOT
39327: PUSH
39328: LD_VAR 0 1
39332: PPUSH
39333: CALL_OW 266
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: LD_INT 1
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: IN
39348: NOT
39349: OR
39350: PUSH
39351: LD_VAR 0 2
39355: NOT
39356: OR
39357: PUSH
39358: LD_VAR 0 5
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: LD_INT 3
39374: PUSH
39375: LD_INT 4
39377: PUSH
39378: LD_INT 5
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: IN
39389: NOT
39390: OR
39391: PUSH
39392: LD_VAR 0 3
39396: PPUSH
39397: LD_VAR 0 4
39401: PPUSH
39402: CALL_OW 488
39406: NOT
39407: OR
39408: IFFALSE 39412
// exit ;
39410: GO 40129
// pom := GetBase ( depot ) ;
39412: LD_ADDR_VAR 0 10
39416: PUSH
39417: LD_VAR 0 1
39421: PPUSH
39422: CALL_OW 274
39426: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39427: LD_ADDR_VAR 0 11
39431: PUSH
39432: LD_VAR 0 2
39436: PPUSH
39437: LD_VAR 0 1
39441: PPUSH
39442: CALL_OW 248
39446: PPUSH
39447: CALL_OW 450
39451: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39452: LD_VAR 0 10
39456: PPUSH
39457: LD_INT 1
39459: PPUSH
39460: CALL_OW 275
39464: PUSH
39465: LD_VAR 0 11
39469: PUSH
39470: LD_INT 1
39472: ARRAY
39473: GREATEREQUAL
39474: PUSH
39475: LD_VAR 0 10
39479: PPUSH
39480: LD_INT 2
39482: PPUSH
39483: CALL_OW 275
39487: PUSH
39488: LD_VAR 0 11
39492: PUSH
39493: LD_INT 2
39495: ARRAY
39496: GREATEREQUAL
39497: AND
39498: PUSH
39499: LD_VAR 0 10
39503: PPUSH
39504: LD_INT 3
39506: PPUSH
39507: CALL_OW 275
39511: PUSH
39512: LD_VAR 0 11
39516: PUSH
39517: LD_INT 3
39519: ARRAY
39520: GREATEREQUAL
39521: AND
39522: NOT
39523: IFFALSE 39527
// exit ;
39525: GO 40129
// if GetBType ( depot ) = b_depot then
39527: LD_VAR 0 1
39531: PPUSH
39532: CALL_OW 266
39536: PUSH
39537: LD_INT 0
39539: EQUAL
39540: IFFALSE 39552
// dist := 28 else
39542: LD_ADDR_VAR 0 14
39546: PUSH
39547: LD_INT 28
39549: ST_TO_ADDR
39550: GO 39560
// dist := 36 ;
39552: LD_ADDR_VAR 0 14
39556: PUSH
39557: LD_INT 36
39559: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39560: LD_VAR 0 1
39564: PPUSH
39565: LD_VAR 0 3
39569: PPUSH
39570: LD_VAR 0 4
39574: PPUSH
39575: CALL_OW 297
39579: PUSH
39580: LD_VAR 0 14
39584: GREATER
39585: IFFALSE 39589
// exit ;
39587: GO 40129
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39589: LD_ADDR_VAR 0 12
39593: PUSH
39594: LD_VAR 0 2
39598: PPUSH
39599: LD_VAR 0 3
39603: PPUSH
39604: LD_VAR 0 4
39608: PPUSH
39609: LD_VAR 0 5
39613: PPUSH
39614: LD_VAR 0 1
39618: PPUSH
39619: CALL_OW 248
39623: PPUSH
39624: LD_INT 0
39626: PPUSH
39627: CALL 40134 0 6
39631: ST_TO_ADDR
// if not hexes then
39632: LD_VAR 0 12
39636: NOT
39637: IFFALSE 39641
// exit ;
39639: GO 40129
// hex := GetHexInfo ( x , y ) ;
39641: LD_ADDR_VAR 0 15
39645: PUSH
39646: LD_VAR 0 3
39650: PPUSH
39651: LD_VAR 0 4
39655: PPUSH
39656: CALL_OW 546
39660: ST_TO_ADDR
// if hex [ 1 ] then
39661: LD_VAR 0 15
39665: PUSH
39666: LD_INT 1
39668: ARRAY
39669: IFFALSE 39673
// exit ;
39671: GO 40129
// height := hex [ 2 ] ;
39673: LD_ADDR_VAR 0 13
39677: PUSH
39678: LD_VAR 0 15
39682: PUSH
39683: LD_INT 2
39685: ARRAY
39686: ST_TO_ADDR
// for i = 1 to hexes do
39687: LD_ADDR_VAR 0 7
39691: PUSH
39692: DOUBLE
39693: LD_INT 1
39695: DEC
39696: ST_TO_ADDR
39697: LD_VAR 0 12
39701: PUSH
39702: FOR_TO
39703: IFFALSE 40033
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39705: LD_VAR 0 12
39709: PUSH
39710: LD_VAR 0 7
39714: ARRAY
39715: PUSH
39716: LD_INT 1
39718: ARRAY
39719: PPUSH
39720: LD_VAR 0 12
39724: PUSH
39725: LD_VAR 0 7
39729: ARRAY
39730: PUSH
39731: LD_INT 2
39733: ARRAY
39734: PPUSH
39735: CALL_OW 488
39739: NOT
39740: PUSH
39741: LD_VAR 0 12
39745: PUSH
39746: LD_VAR 0 7
39750: ARRAY
39751: PUSH
39752: LD_INT 1
39754: ARRAY
39755: PPUSH
39756: LD_VAR 0 12
39760: PUSH
39761: LD_VAR 0 7
39765: ARRAY
39766: PUSH
39767: LD_INT 2
39769: ARRAY
39770: PPUSH
39771: CALL_OW 428
39775: PUSH
39776: LD_INT 0
39778: GREATER
39779: OR
39780: PUSH
39781: LD_VAR 0 12
39785: PUSH
39786: LD_VAR 0 7
39790: ARRAY
39791: PUSH
39792: LD_INT 1
39794: ARRAY
39795: PPUSH
39796: LD_VAR 0 12
39800: PUSH
39801: LD_VAR 0 7
39805: ARRAY
39806: PUSH
39807: LD_INT 2
39809: ARRAY
39810: PPUSH
39811: CALL_OW 351
39815: OR
39816: IFFALSE 39822
// exit ;
39818: POP
39819: POP
39820: GO 40129
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39822: LD_ADDR_VAR 0 8
39826: PUSH
39827: LD_VAR 0 12
39831: PUSH
39832: LD_VAR 0 7
39836: ARRAY
39837: PUSH
39838: LD_INT 1
39840: ARRAY
39841: PPUSH
39842: LD_VAR 0 12
39846: PUSH
39847: LD_VAR 0 7
39851: ARRAY
39852: PUSH
39853: LD_INT 2
39855: ARRAY
39856: PPUSH
39857: CALL_OW 546
39861: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39862: LD_VAR 0 8
39866: PUSH
39867: LD_INT 1
39869: ARRAY
39870: PUSH
39871: LD_VAR 0 8
39875: PUSH
39876: LD_INT 2
39878: ARRAY
39879: PUSH
39880: LD_VAR 0 13
39884: PUSH
39885: LD_INT 2
39887: PLUS
39888: GREATER
39889: OR
39890: PUSH
39891: LD_VAR 0 8
39895: PUSH
39896: LD_INT 2
39898: ARRAY
39899: PUSH
39900: LD_VAR 0 13
39904: PUSH
39905: LD_INT 2
39907: MINUS
39908: LESS
39909: OR
39910: PUSH
39911: LD_VAR 0 8
39915: PUSH
39916: LD_INT 3
39918: ARRAY
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: LD_INT 8
39925: PUSH
39926: LD_INT 9
39928: PUSH
39929: LD_INT 10
39931: PUSH
39932: LD_INT 11
39934: PUSH
39935: LD_INT 12
39937: PUSH
39938: LD_INT 13
39940: PUSH
39941: LD_INT 16
39943: PUSH
39944: LD_INT 17
39946: PUSH
39947: LD_INT 18
39949: PUSH
39950: LD_INT 19
39952: PUSH
39953: LD_INT 20
39955: PUSH
39956: LD_INT 21
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: IN
39974: NOT
39975: OR
39976: PUSH
39977: LD_VAR 0 8
39981: PUSH
39982: LD_INT 5
39984: ARRAY
39985: NOT
39986: OR
39987: PUSH
39988: LD_VAR 0 8
39992: PUSH
39993: LD_INT 6
39995: ARRAY
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: LD_INT 2
40002: PUSH
40003: LD_INT 7
40005: PUSH
40006: LD_INT 9
40008: PUSH
40009: LD_INT 10
40011: PUSH
40012: LD_INT 11
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: IN
40023: NOT
40024: OR
40025: IFFALSE 40031
// exit ;
40027: POP
40028: POP
40029: GO 40129
// end ;
40031: GO 39702
40033: POP
40034: POP
// side := GetSide ( depot ) ;
40035: LD_ADDR_VAR 0 9
40039: PUSH
40040: LD_VAR 0 1
40044: PPUSH
40045: CALL_OW 255
40049: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40050: LD_VAR 0 9
40054: PPUSH
40055: LD_VAR 0 3
40059: PPUSH
40060: LD_VAR 0 4
40064: PPUSH
40065: LD_INT 20
40067: PPUSH
40068: CALL 32783 0 4
40072: PUSH
40073: LD_INT 4
40075: ARRAY
40076: IFFALSE 40080
// exit ;
40078: GO 40129
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40080: LD_VAR 0 2
40084: PUSH
40085: LD_INT 29
40087: PUSH
40088: LD_INT 30
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: IN
40095: PUSH
40096: LD_VAR 0 3
40100: PPUSH
40101: LD_VAR 0 4
40105: PPUSH
40106: LD_VAR 0 9
40110: PPUSH
40111: CALL_OW 440
40115: NOT
40116: AND
40117: IFFALSE 40121
// exit ;
40119: GO 40129
// result := true ;
40121: LD_ADDR_VAR 0 6
40125: PUSH
40126: LD_INT 1
40128: ST_TO_ADDR
// end ;
40129: LD_VAR 0 6
40133: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40134: LD_INT 0
40136: PPUSH
40137: PPUSH
40138: PPUSH
40139: PPUSH
40140: PPUSH
40141: PPUSH
40142: PPUSH
40143: PPUSH
40144: PPUSH
40145: PPUSH
40146: PPUSH
40147: PPUSH
40148: PPUSH
40149: PPUSH
40150: PPUSH
40151: PPUSH
40152: PPUSH
40153: PPUSH
40154: PPUSH
40155: PPUSH
40156: PPUSH
40157: PPUSH
40158: PPUSH
40159: PPUSH
40160: PPUSH
40161: PPUSH
40162: PPUSH
40163: PPUSH
40164: PPUSH
40165: PPUSH
40166: PPUSH
40167: PPUSH
40168: PPUSH
40169: PPUSH
40170: PPUSH
40171: PPUSH
40172: PPUSH
40173: PPUSH
40174: PPUSH
40175: PPUSH
40176: PPUSH
40177: PPUSH
40178: PPUSH
40179: PPUSH
40180: PPUSH
40181: PPUSH
40182: PPUSH
40183: PPUSH
40184: PPUSH
40185: PPUSH
40186: PPUSH
40187: PPUSH
40188: PPUSH
40189: PPUSH
40190: PPUSH
40191: PPUSH
40192: PPUSH
40193: PPUSH
// result = [ ] ;
40194: LD_ADDR_VAR 0 7
40198: PUSH
40199: EMPTY
40200: ST_TO_ADDR
// temp_list = [ ] ;
40201: LD_ADDR_VAR 0 9
40205: PUSH
40206: EMPTY
40207: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40208: LD_VAR 0 4
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: LD_INT 2
40221: PUSH
40222: LD_INT 3
40224: PUSH
40225: LD_INT 4
40227: PUSH
40228: LD_INT 5
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: IN
40239: NOT
40240: PUSH
40241: LD_VAR 0 1
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: LD_INT 1
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: IN
40256: PUSH
40257: LD_VAR 0 5
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: LD_INT 3
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: LIST
40275: IN
40276: NOT
40277: AND
40278: OR
40279: IFFALSE 40283
// exit ;
40281: GO 58674
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40283: LD_VAR 0 1
40287: PUSH
40288: LD_INT 6
40290: PUSH
40291: LD_INT 7
40293: PUSH
40294: LD_INT 8
40296: PUSH
40297: LD_INT 13
40299: PUSH
40300: LD_INT 12
40302: PUSH
40303: LD_INT 15
40305: PUSH
40306: LD_INT 11
40308: PUSH
40309: LD_INT 14
40311: PUSH
40312: LD_INT 10
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: IN
40326: IFFALSE 40336
// btype = b_lab ;
40328: LD_ADDR_VAR 0 1
40332: PUSH
40333: LD_INT 6
40335: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40336: LD_VAR 0 6
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: LD_INT 2
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: LIST
40354: IN
40355: NOT
40356: PUSH
40357: LD_VAR 0 1
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: LD_INT 1
40367: PUSH
40368: LD_INT 2
40370: PUSH
40371: LD_INT 3
40373: PUSH
40374: LD_INT 6
40376: PUSH
40377: LD_INT 36
40379: PUSH
40380: LD_INT 4
40382: PUSH
40383: LD_INT 5
40385: PUSH
40386: LD_INT 31
40388: PUSH
40389: LD_INT 32
40391: PUSH
40392: LD_INT 33
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: IN
40408: NOT
40409: PUSH
40410: LD_VAR 0 6
40414: PUSH
40415: LD_INT 1
40417: EQUAL
40418: AND
40419: OR
40420: PUSH
40421: LD_VAR 0 1
40425: PUSH
40426: LD_INT 2
40428: PUSH
40429: LD_INT 3
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: IN
40436: NOT
40437: PUSH
40438: LD_VAR 0 6
40442: PUSH
40443: LD_INT 2
40445: EQUAL
40446: AND
40447: OR
40448: IFFALSE 40458
// mode = 0 ;
40450: LD_ADDR_VAR 0 6
40454: PUSH
40455: LD_INT 0
40457: ST_TO_ADDR
// case mode of 0 :
40458: LD_VAR 0 6
40462: PUSH
40463: LD_INT 0
40465: DOUBLE
40466: EQUAL
40467: IFTRUE 40471
40469: GO 51924
40471: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40472: LD_ADDR_VAR 0 11
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: LD_INT 1
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 1
40541: NEG
40542: PUSH
40543: LD_INT 1
40545: NEG
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: LD_INT 2
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: LD_INT 2
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: LD_INT 2
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: LD_INT 3
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: LD_INT 3
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: LD_INT 2
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40665: LD_ADDR_VAR 0 12
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: LD_INT 1
40749: NEG
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 2
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 2
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: NEG
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 2
40799: NEG
40800: PUSH
40801: LD_INT 1
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: NEG
40812: PUSH
40813: LD_INT 1
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 3
40822: NEG
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 3
40833: NEG
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40861: LD_ADDR_VAR 0 13
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: LD_INT 2
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: NEG
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 2
40996: NEG
40997: PUSH
40998: LD_INT 2
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 2
41008: NEG
41009: PUSH
41010: LD_INT 3
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 3
41020: NEG
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 3
41032: NEG
41033: PUSH
41034: LD_INT 3
41036: NEG
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41060: LD_ADDR_VAR 0 14
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: LD_INT 2
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: LD_INT 2
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: LD_INT 3
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: LD_INT 3
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41256: LD_ADDR_VAR 0 15
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 2
41379: NEG
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 2
41390: NEG
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 2
41402: PUSH
41403: LD_INT 1
41405: NEG
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 3
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 3
41423: PUSH
41424: LD_INT 1
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41449: LD_ADDR_VAR 0 16
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 1
41530: NEG
41531: PUSH
41532: LD_INT 2
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 2
41572: NEG
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 2
41584: NEG
41585: PUSH
41586: LD_INT 2
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 3
41596: PUSH
41597: LD_INT 2
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 3
41606: PUSH
41607: LD_INT 3
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 2
41616: PUSH
41617: LD_INT 3
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41642: LD_ADDR_VAR 0 17
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 0
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: NEG
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: PUSH
41725: LD_INT 2
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 2
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 2
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 2
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 2
41818: NEG
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 2
41829: NEG
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 2
41841: NEG
41842: PUSH
41843: LD_INT 2
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41872: LD_ADDR_VAR 0 18
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 1
41953: NEG
41954: PUSH
41955: LD_INT 2
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: LD_INT 2
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: LD_INT 1
41979: NEG
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 2
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: LD_INT 2
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 2
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 2
42048: NEG
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 2
42059: NEG
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 2
42071: NEG
42072: PUSH
42073: LD_INT 2
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42102: LD_ADDR_VAR 0 19
42106: PUSH
42107: LD_INT 0
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: NEG
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: LD_INT 2
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: LD_INT 2
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 2
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 2
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: LD_INT 2
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 2
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: NEG
42302: PUSH
42303: LD_INT 2
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42332: LD_ADDR_VAR 0 20
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 0
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 1
42401: NEG
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: LD_INT 2
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 2
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 2
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 2
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: LD_INT 2
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 2
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 2
42508: NEG
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 2
42519: NEG
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 2
42531: NEG
42532: PUSH
42533: LD_INT 2
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42562: LD_ADDR_VAR 0 21
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: NEG
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: LD_INT 2
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 0
42655: PUSH
42656: LD_INT 2
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 2
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: LD_INT 2
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 2
42738: NEG
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 2
42749: NEG
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 2
42761: NEG
42762: PUSH
42763: LD_INT 2
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42792: LD_ADDR_VAR 0 22
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 1
42861: NEG
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: LD_INT 2
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: LD_INT 2
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: LD_INT 2
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: LD_INT 2
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 2
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 2
42968: NEG
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 2
42979: NEG
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 2
42991: NEG
42992: PUSH
42993: LD_INT 2
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43022: LD_ADDR_VAR 0 23
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: LD_INT 1
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: LD_INT 2
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: LD_INT 2
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 2
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 2
43157: PUSH
43158: LD_INT 2
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: LD_INT 2
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: LD_INT 2
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 2
43198: NEG
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 2
43209: NEG
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 2
43221: NEG
43222: PUSH
43223: LD_INT 2
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: NEG
43234: PUSH
43235: LD_INT 3
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 3
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 2
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43302: LD_ADDR_VAR 0 24
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 1
43371: NEG
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 1
43383: NEG
43384: PUSH
43385: LD_INT 2
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: LD_INT 2
43398: NEG
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 2
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 2
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: PUSH
43438: LD_INT 2
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: LD_INT 2
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: LD_INT 2
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 2
43478: NEG
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 2
43489: NEG
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 2
43501: NEG
43502: PUSH
43503: LD_INT 2
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: LD_INT 2
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 3
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 3
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43578: LD_ADDR_VAR 0 25
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 2
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: NEG
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: LD_INT 2
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 3
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 3
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: LD_INT 3
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: LD_INT 3
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43852: LD_ADDR_VAR 0 26
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: LD_INT 2
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 2
43948: NEG
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 2
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 2
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: LD_INT 2
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: LD_INT 2
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 2
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 2
44028: NEG
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: LD_INT 2
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: LD_INT 3
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: LD_INT 3
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 2
44094: NEG
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44128: LD_ADDR_VAR 0 27
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: LD_INT 2
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: LD_INT 2
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 2
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: NEG
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 2
44327: NEG
44328: PUSH
44329: LD_INT 2
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: PUSH
44341: LD_INT 2
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 3
44361: NEG
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 3
44373: NEG
44374: PUSH
44375: LD_INT 2
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44408: LD_ADDR_VAR 0 28
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 2
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: LD_INT 2
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 2
44607: NEG
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 2
44619: NEG
44620: PUSH
44621: LD_INT 3
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: LD_INT 3
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 3
44643: NEG
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 3
44655: NEG
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44690: LD_ADDR_VAR 0 29
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 2
44880: NEG
44881: PUSH
44882: LD_INT 3
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 3
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: LD_INT 3
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 3
44934: NEG
44935: PUSH
44936: LD_INT 2
44938: NEG
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44969: LD_ADDR_VAR 0 30
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: LD_INT 2
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 2
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 2
45135: NEG
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: LD_INT 3
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: LD_INT 2
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 3
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: LD_INT 3
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 2
45201: NEG
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 3
45212: NEG
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45247: LD_ADDR_VAR 0 31
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: LD_INT 1
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: LD_INT 2
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: NEG
45437: PUSH
45438: LD_INT 3
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 2
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 3
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: LD_INT 3
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 3
45490: NEG
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45525: LD_ADDR_VAR 0 32
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: LD_INT 2
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: LD_INT 2
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 2
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 3
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 3
45737: PUSH
45738: LD_INT 2
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: LD_INT 3
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: NEG
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 3
45768: NEG
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45803: LD_ADDR_VAR 0 33
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 2
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: LD_INT 2
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: LD_INT 3
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 3
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 3
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 3
46047: NEG
46048: PUSH
46049: LD_INT 2
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46082: LD_ADDR_VAR 0 34
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: LD_INT 2
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 2
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: NEG
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 2
46249: NEG
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: LD_INT 3
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 3
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: LD_INT 3
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 3
46327: NEG
46328: PUSH
46329: LD_INT 1
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46362: LD_ADDR_VAR 0 35
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 2
46453: NEG
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46474: LD_ADDR_VAR 0 36
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 2
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46586: LD_ADDR_VAR 0 37
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46698: LD_ADDR_VAR 0 38
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 2
46789: NEG
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46810: LD_ADDR_VAR 0 39
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46922: LD_ADDR_VAR 0 40
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: NEG
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47034: LD_ADDR_VAR 0 41
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: NEG
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 2
47200: NEG
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: NEG
47225: PUSH
47226: LD_INT 3
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 3
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 3
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 3
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 3
47277: PUSH
47278: LD_INT 3
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: LD_INT 3
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: NEG
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 3
47308: NEG
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 3
47319: NEG
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 3
47331: NEG
47332: PUSH
47333: LD_INT 2
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 3
47343: NEG
47344: PUSH
47345: LD_INT 3
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47384: LD_ADDR_VAR 0 42
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: NEG
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: NEG
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 2
47574: NEG
47575: PUSH
47576: LD_INT 3
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: LD_INT 3
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 3
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 3
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 3
47630: PUSH
47631: LD_INT 3
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: LD_INT 3
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: LD_INT 3
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 3
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 3
47681: NEG
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 3
47693: NEG
47694: PUSH
47695: LD_INT 3
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47734: LD_ADDR_VAR 0 43
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 2
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 2
47911: NEG
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 3
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 3
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 3
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 3
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: LD_INT 3
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: LD_INT 3
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 3
48030: NEG
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 3
48041: NEG
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48082: LD_ADDR_VAR 0 44
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: LD_INT 2
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 2
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 2
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 2
48237: NEG
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: NEG
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: LD_INT 3
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 3
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 3
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 3
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: LD_INT 3
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 3
48356: NEG
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 3
48367: NEG
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 3
48379: NEG
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 3
48391: NEG
48392: PUSH
48393: LD_INT 3
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48432: LD_ADDR_VAR 0 45
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 2
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: LD_INT 2
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: LD_INT 2
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: LD_INT 2
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: NEG
48623: PUSH
48624: LD_INT 3
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: LD_INT 3
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: LD_INT 3
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: LD_INT 2
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 3
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 3
48678: PUSH
48679: LD_INT 3
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: LD_INT 3
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: LD_INT 3
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: LD_INT 3
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: LD_INT 2
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 3
48729: NEG
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 3
48741: NEG
48742: PUSH
48743: LD_INT 3
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48782: LD_ADDR_VAR 0 46
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: LD_INT 3
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: LD_INT 3
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: LD_INT 1
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 3
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 3
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: LD_INT 3
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: LD_INT 3
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: NEG
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 3
49089: NEG
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49130: LD_ADDR_VAR 0 47
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: NEG
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49281: LD_ADDR_VAR 0 48
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 2
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49428: LD_ADDR_VAR 0 49
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: LD_INT 2
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49572: LD_ADDR_VAR 0 50
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: LD_INT 2
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 2
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49716: LD_ADDR_VAR 0 51
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 2
49828: NEG
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 2
49839: NEG
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49863: LD_ADDR_VAR 0 52
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 2
49990: NEG
49991: PUSH
49992: LD_INT 2
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50014: LD_ADDR_VAR 0 53
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50244: LD_ADDR_VAR 0 54
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 2
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: NEG
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 2
50443: NEG
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50474: LD_ADDR_VAR 0 55
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 2
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 2
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 2
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: NEG
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 2
50661: NEG
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: NEG
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50704: LD_ADDR_VAR 0 56
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 2
50891: NEG
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50934: LD_ADDR_VAR 0 57
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: NEG
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: NEG
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: LD_INT 2
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51164: LD_ADDR_VAR 0 58
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: LD_INT 2
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 2
51299: PUSH
51300: LD_INT 2
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: LD_INT 2
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 2
51340: NEG
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 2
51363: NEG
51364: PUSH
51365: LD_INT 2
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51394: LD_ADDR_VAR 0 59
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51482: LD_ADDR_VAR 0 60
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 0
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: NEG
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51570: LD_ADDR_VAR 0 61
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: LD_INT 1
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51658: LD_ADDR_VAR 0 62
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51746: LD_ADDR_VAR 0 63
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51834: LD_ADDR_VAR 0 64
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: ST_TO_ADDR
// end ; 1 :
51922: GO 57819
51924: LD_INT 1
51926: DOUBLE
51927: EQUAL
51928: IFTRUE 51932
51930: GO 54555
51932: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51933: LD_ADDR_VAR 0 11
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: LD_INT 3
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: LIST
51976: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51977: LD_ADDR_VAR 0 12
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 3
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 3
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: LIST
52017: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52018: LD_ADDR_VAR 0 13
52022: PUSH
52023: LD_INT 3
52025: PUSH
52026: LD_INT 2
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: PUSH
52036: LD_INT 3
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: LD_INT 3
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: LIST
52057: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52058: LD_ADDR_VAR 0 14
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: LD_INT 3
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 3
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: LIST
52098: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52099: LD_ADDR_VAR 0 15
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 3
52117: NEG
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 3
52128: NEG
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: LIST
52142: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52143: LD_ADDR_VAR 0 16
52147: PUSH
52148: LD_INT 2
52150: NEG
52151: PUSH
52152: LD_INT 3
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 3
52162: NEG
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: NEG
52175: PUSH
52176: LD_INT 3
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: LIST
52188: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52189: LD_ADDR_VAR 0 17
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: LD_INT 3
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: LD_INT 3
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: LIST
52232: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52233: LD_ADDR_VAR 0 18
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 3
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 3
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: LIST
52273: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52274: LD_ADDR_VAR 0 19
52278: PUSH
52279: LD_INT 3
52281: PUSH
52282: LD_INT 2
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: LD_INT 3
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: PUSH
52302: LD_INT 3
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: LIST
52313: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52314: LD_ADDR_VAR 0 20
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: LD_INT 3
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: LD_INT 3
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: LD_INT 2
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: LIST
52354: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52355: LD_ADDR_VAR 0 21
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 3
52373: NEG
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 3
52384: NEG
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: LIST
52398: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52399: LD_ADDR_VAR 0 22
52403: PUSH
52404: LD_INT 2
52406: NEG
52407: PUSH
52408: LD_INT 3
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 3
52418: NEG
52419: PUSH
52420: LD_INT 2
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 3
52430: NEG
52431: PUSH
52432: LD_INT 3
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: LIST
52444: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52445: LD_ADDR_VAR 0 23
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 3
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: LD_INT 4
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: LD_INT 3
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: LIST
52488: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52489: LD_ADDR_VAR 0 24
52493: PUSH
52494: LD_INT 3
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 3
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 4
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: LIST
52529: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52530: LD_ADDR_VAR 0 25
52534: PUSH
52535: LD_INT 3
52537: PUSH
52538: LD_INT 3
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 4
52547: PUSH
52548: LD_INT 3
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 3
52557: PUSH
52558: LD_INT 4
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: LIST
52569: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52570: LD_ADDR_VAR 0 26
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 3
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 4
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: LIST
52610: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52611: LD_ADDR_VAR 0 27
52615: PUSH
52616: LD_INT 3
52618: NEG
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 3
52629: NEG
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 4
52640: NEG
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: LIST
52654: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52655: LD_ADDR_VAR 0 28
52659: PUSH
52660: LD_INT 3
52662: NEG
52663: PUSH
52664: LD_INT 3
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 3
52674: NEG
52675: PUSH
52676: LD_INT 4
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 4
52686: NEG
52687: PUSH
52688: LD_INT 3
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: LIST
52700: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52701: LD_ADDR_VAR 0 29
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 3
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 3
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: LD_INT 2
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 4
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 4
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 3
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: LD_INT 5
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 5
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: LD_INT 4
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 6
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: LD_INT 6
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: LD_INT 5
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52856: LD_ADDR_VAR 0 30
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 3
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 3
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 3
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 4
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 4
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 4
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 5
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 5
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 5
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 6
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 6
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52999: LD_ADDR_VAR 0 31
53003: PUSH
53004: LD_INT 3
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 3
53016: PUSH
53017: LD_INT 3
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: PUSH
53027: LD_INT 3
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 4
53036: PUSH
53037: LD_INT 3
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 4
53046: PUSH
53047: LD_INT 4
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 3
53056: PUSH
53057: LD_INT 4
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 5
53066: PUSH
53067: LD_INT 4
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 5
53076: PUSH
53077: LD_INT 5
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 4
53086: PUSH
53087: LD_INT 5
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 6
53096: PUSH
53097: LD_INT 5
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 6
53106: PUSH
53107: LD_INT 6
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 5
53116: PUSH
53117: LD_INT 6
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53138: LD_ADDR_VAR 0 32
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: LD_INT 3
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 3
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 4
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 4
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 3
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: LD_INT 5
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 5
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: LD_INT 4
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: LD_INT 6
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 6
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: LD_INT 5
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53281: LD_ADDR_VAR 0 33
53285: PUSH
53286: LD_INT 2
53288: NEG
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 3
53299: NEG
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 3
53310: NEG
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 3
53322: NEG
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 4
53333: NEG
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 4
53344: NEG
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 4
53356: NEG
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 5
53367: NEG
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 5
53378: NEG
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 5
53390: NEG
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 6
53401: NEG
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 6
53412: NEG
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53436: LD_ADDR_VAR 0 34
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: LD_INT 3
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 3
53455: NEG
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 3
53467: NEG
53468: PUSH
53469: LD_INT 3
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 3
53479: NEG
53480: PUSH
53481: LD_INT 4
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 4
53491: NEG
53492: PUSH
53493: LD_INT 3
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 4
53503: NEG
53504: PUSH
53505: LD_INT 4
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 4
53515: NEG
53516: PUSH
53517: LD_INT 5
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 5
53527: NEG
53528: PUSH
53529: LD_INT 4
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 5
53539: NEG
53540: PUSH
53541: LD_INT 5
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 5
53551: NEG
53552: PUSH
53553: LD_INT 6
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 6
53563: NEG
53564: PUSH
53565: LD_INT 5
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 6
53575: NEG
53576: PUSH
53577: LD_INT 6
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53599: LD_ADDR_VAR 0 41
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: LD_INT 2
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: LD_INT 3
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: LD_INT 2
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: LIST
53642: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53643: LD_ADDR_VAR 0 42
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 3
53671: PUSH
53672: LD_INT 1
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: LIST
53683: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53684: LD_ADDR_VAR 0 43
53688: PUSH
53689: LD_INT 2
53691: PUSH
53692: LD_INT 2
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 3
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: LD_INT 3
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: LIST
53723: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53724: LD_ADDR_VAR 0 44
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 2
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: LD_INT 3
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: LIST
53764: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53765: LD_ADDR_VAR 0 45
53769: PUSH
53770: LD_INT 2
53772: NEG
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: NEG
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 3
53794: NEG
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: LIST
53808: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53809: LD_ADDR_VAR 0 46
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: LD_INT 2
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 2
53828: NEG
53829: PUSH
53830: LD_INT 3
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 3
53840: NEG
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: LIST
53854: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53855: LD_ADDR_VAR 0 47
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: LD_INT 3
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: LD_INT 3
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53888: LD_ADDR_VAR 0 48
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 2
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53919: LD_ADDR_VAR 0 49
53923: PUSH
53924: LD_INT 3
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 3
53936: PUSH
53937: LD_INT 2
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53948: LD_ADDR_VAR 0 50
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: LD_INT 3
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 3
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53977: LD_ADDR_VAR 0 51
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: LD_INT 2
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54008: LD_ADDR_VAR 0 52
54012: PUSH
54013: LD_INT 3
54015: NEG
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 3
54027: NEG
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54041: LD_ADDR_VAR 0 53
54045: PUSH
54046: LD_INT 1
54048: NEG
54049: PUSH
54050: LD_INT 3
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: LD_INT 3
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: LIST
54084: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54085: LD_ADDR_VAR 0 54
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 3
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 3
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: LIST
54125: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54126: LD_ADDR_VAR 0 55
54130: PUSH
54131: LD_INT 3
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 3
54143: PUSH
54144: LD_INT 3
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 2
54153: PUSH
54154: LD_INT 3
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: LIST
54165: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54166: LD_ADDR_VAR 0 56
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: LD_INT 3
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: LD_INT 3
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: LIST
54206: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54207: LD_ADDR_VAR 0 57
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 3
54225: NEG
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 3
54236: NEG
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: LIST
54250: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54251: LD_ADDR_VAR 0 58
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: LD_INT 3
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 3
54270: NEG
54271: PUSH
54272: LD_INT 2
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 3
54282: NEG
54283: PUSH
54284: LD_INT 3
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: LIST
54296: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54297: LD_ADDR_VAR 0 59
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: LD_INT 2
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: LIST
54340: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54341: LD_ADDR_VAR 0 60
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 2
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: LIST
54381: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54382: LD_ADDR_VAR 0 61
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: LD_INT 2
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: LIST
54421: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54422: LD_ADDR_VAR 0 62
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: LD_INT 2
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 2
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: LIST
54462: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54463: LD_ADDR_VAR 0 63
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: LIST
54506: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54507: LD_ADDR_VAR 0 64
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: LD_INT 2
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: LIST
54552: ST_TO_ADDR
// end ; 2 :
54553: GO 57819
54555: LD_INT 2
54557: DOUBLE
54558: EQUAL
54559: IFTRUE 54563
54561: GO 57818
54563: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54564: LD_ADDR_VAR 0 29
54568: PUSH
54569: LD_INT 4
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 4
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 5
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 5
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 4
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 3
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 3
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 3
54643: PUSH
54644: LD_INT 2
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 5
54654: PUSH
54655: LD_INT 2
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 3
54664: PUSH
54665: LD_INT 3
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 3
54674: PUSH
54675: LD_INT 2
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 4
54684: PUSH
54685: LD_INT 3
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 4
54694: PUSH
54695: LD_INT 4
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 3
54704: PUSH
54705: LD_INT 4
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: LD_INT 3
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 4
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: LD_INT 4
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 4
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: LD_INT 3
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: LD_INT 4
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 5
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: LD_INT 5
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: LD_INT 4
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: LD_INT 3
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: LD_INT 5
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 2
54836: NEG
54837: PUSH
54838: LD_INT 3
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 3
54847: NEG
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 3
54858: NEG
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 3
54892: NEG
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 4
54903: NEG
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 4
54914: NEG
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 4
54926: NEG
54927: PUSH
54928: LD_INT 2
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: LD_INT 2
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 4
54949: NEG
54950: PUSH
54951: LD_INT 4
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 4
54961: NEG
54962: PUSH
54963: LD_INT 5
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 3
54973: NEG
54974: PUSH
54975: LD_INT 4
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 3
54985: NEG
54986: PUSH
54987: LD_INT 3
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 4
54997: NEG
54998: PUSH
54999: LD_INT 3
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 5
55009: NEG
55010: PUSH
55011: LD_INT 4
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 5
55021: NEG
55022: PUSH
55023: LD_INT 5
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 3
55033: NEG
55034: PUSH
55035: LD_INT 5
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 5
55045: NEG
55046: PUSH
55047: LD_INT 3
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55102: LD_ADDR_VAR 0 30
55106: PUSH
55107: LD_INT 4
55109: PUSH
55110: LD_INT 4
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 4
55119: PUSH
55120: LD_INT 3
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 5
55129: PUSH
55130: LD_INT 4
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 5
55139: PUSH
55140: LD_INT 5
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 4
55149: PUSH
55150: LD_INT 5
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 3
55159: PUSH
55160: LD_INT 4
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 3
55169: PUSH
55170: LD_INT 3
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 5
55179: PUSH
55180: LD_INT 3
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 3
55189: PUSH
55190: LD_INT 5
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 3
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 3
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 4
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 4
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 3
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: LD_INT 4
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: LD_INT 2
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 4
55292: NEG
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 4
55303: NEG
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 3
55315: NEG
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 3
55326: NEG
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 4
55337: NEG
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 5
55348: NEG
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 5
55359: NEG
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 5
55371: NEG
55372: PUSH
55373: LD_INT 2
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 3
55383: NEG
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 3
55394: NEG
55395: PUSH
55396: LD_INT 3
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 3
55406: NEG
55407: PUSH
55408: LD_INT 4
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 2
55418: NEG
55419: PUSH
55420: LD_INT 3
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: LD_INT 2
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 3
55442: NEG
55443: PUSH
55444: LD_INT 2
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 4
55454: NEG
55455: PUSH
55456: LD_INT 3
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 4
55466: NEG
55467: PUSH
55468: LD_INT 4
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: LD_INT 4
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 4
55490: NEG
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: LD_INT 4
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 5
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 4
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: LD_INT 3
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 3
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: LD_INT 4
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: LD_INT 5
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: LD_INT 3
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: LD_INT 5
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55649: LD_ADDR_VAR 0 31
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 4
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 3
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: LD_INT 4
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: LD_INT 5
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 5
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: LD_INT 4
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: LD_INT 3
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: LD_INT 5
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: LD_INT 3
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 3
55749: NEG
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 3
55760: NEG
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 3
55794: NEG
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 4
55805: NEG
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 4
55816: NEG
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 4
55828: NEG
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: LD_INT 2
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 4
55851: NEG
55852: PUSH
55853: LD_INT 4
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 4
55863: NEG
55864: PUSH
55865: LD_INT 5
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 3
55875: NEG
55876: PUSH
55877: LD_INT 4
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 3
55887: NEG
55888: PUSH
55889: LD_INT 3
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 4
55899: NEG
55900: PUSH
55901: LD_INT 3
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 5
55911: NEG
55912: PUSH
55913: LD_INT 4
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 5
55923: NEG
55924: PUSH
55925: LD_INT 5
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 3
55935: NEG
55936: PUSH
55937: LD_INT 5
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 5
55947: NEG
55948: PUSH
55949: LD_INT 3
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 3
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: LD_INT 4
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: LD_INT 3
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 3
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 4
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: LD_INT 4
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 4
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 4
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 5
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 5
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 4
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 3
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 3
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 3
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 5
56144: PUSH
56145: LD_INT 2
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56199: LD_ADDR_VAR 0 32
56203: PUSH
56204: LD_INT 4
56206: NEG
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 4
56217: NEG
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 3
56229: NEG
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 3
56240: NEG
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 4
56251: NEG
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 5
56262: NEG
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 5
56273: NEG
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 5
56285: NEG
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 3
56297: NEG
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 3
56308: NEG
56309: PUSH
56310: LD_INT 3
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 3
56320: NEG
56321: PUSH
56322: LD_INT 4
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: LD_INT 3
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 3
56356: NEG
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 4
56368: NEG
56369: PUSH
56370: LD_INT 3
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 4
56380: NEG
56381: PUSH
56382: LD_INT 4
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 2
56392: NEG
56393: PUSH
56394: LD_INT 4
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 4
56404: NEG
56405: PUSH
56406: LD_INT 2
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 4
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: LD_INT 5
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: LD_INT 4
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: LD_INT 3
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 3
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: LD_INT 4
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: LD_INT 5
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 2
56495: PUSH
56496: LD_INT 3
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 2
56506: NEG
56507: PUSH
56508: LD_INT 5
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 3
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 3
56528: PUSH
56529: LD_INT 1
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 4
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 4
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 3
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: LD_INT 2
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 4
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 4
56611: PUSH
56612: LD_INT 4
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 4
56621: PUSH
56622: LD_INT 3
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 5
56631: PUSH
56632: LD_INT 4
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 5
56641: PUSH
56642: LD_INT 5
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 4
56651: PUSH
56652: LD_INT 5
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 3
56661: PUSH
56662: LD_INT 4
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 3
56671: PUSH
56672: LD_INT 3
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 5
56681: PUSH
56682: LD_INT 3
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 3
56691: PUSH
56692: LD_INT 5
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56746: LD_ADDR_VAR 0 33
56750: PUSH
56751: LD_INT 4
56753: NEG
56754: PUSH
56755: LD_INT 4
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 4
56765: NEG
56766: PUSH
56767: LD_INT 5
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 3
56777: NEG
56778: PUSH
56779: LD_INT 4
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 3
56789: NEG
56790: PUSH
56791: LD_INT 3
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 4
56801: NEG
56802: PUSH
56803: LD_INT 3
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 5
56813: NEG
56814: PUSH
56815: LD_INT 4
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 5
56825: NEG
56826: PUSH
56827: LD_INT 5
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 3
56837: NEG
56838: PUSH
56839: LD_INT 5
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 5
56849: NEG
56850: PUSH
56851: LD_INT 3
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: LD_INT 3
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: LD_INT 4
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 3
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: LD_INT 3
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: LD_INT 4
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 2
56940: PUSH
56941: LD_INT 2
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: LD_INT 4
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 4
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 4
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 5
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 5
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 4
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 3
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 3
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 3
57035: PUSH
57036: LD_INT 2
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 5
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 3
57056: PUSH
57057: LD_INT 3
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 3
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 4
57076: PUSH
57077: LD_INT 3
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 4
57086: PUSH
57087: LD_INT 4
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 3
57096: PUSH
57097: LD_INT 4
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 2
57106: PUSH
57107: LD_INT 3
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 4
57126: PUSH
57127: LD_INT 2
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: LD_INT 4
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: LD_INT 4
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 3
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 4
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: LD_INT 5
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 5
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 4
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 3
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: LD_INT 5
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: LD_INT 3
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57284: LD_ADDR_VAR 0 34
57288: PUSH
57289: LD_INT 0
57291: PUSH
57292: LD_INT 4
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 5
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: LD_INT 4
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: LD_INT 3
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: LD_INT 3
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: LD_INT 4
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: LD_INT 5
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: LD_INT 3
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: LD_INT 5
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 3
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 3
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 4
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 4
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 3
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: LD_INT 2
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 4
57476: PUSH
57477: LD_INT 2
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 4
57486: PUSH
57487: LD_INT 4
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 4
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 5
57506: PUSH
57507: LD_INT 4
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 5
57516: PUSH
57517: LD_INT 5
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 4
57526: PUSH
57527: LD_INT 5
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 3
57536: PUSH
57537: LD_INT 4
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 3
57546: PUSH
57547: LD_INT 3
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 5
57556: PUSH
57557: LD_INT 3
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 3
57566: PUSH
57567: LD_INT 5
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: LD_INT 3
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: LD_INT 2
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: LD_INT 3
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: LD_INT 4
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: LD_INT 4
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: LD_INT 2
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: LD_INT 4
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 4
57669: NEG
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 4
57680: NEG
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 3
57692: NEG
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 3
57703: NEG
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 4
57714: NEG
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 5
57725: NEG
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 5
57736: NEG
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 5
57748: NEG
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 3
57760: NEG
57761: PUSH
57762: LD_INT 2
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: ST_TO_ADDR
// end ; end ;
57816: GO 57819
57818: POP
// case btype of b_depot , b_warehouse :
57819: LD_VAR 0 1
57823: PUSH
57824: LD_INT 0
57826: DOUBLE
57827: EQUAL
57828: IFTRUE 57838
57830: LD_INT 1
57832: DOUBLE
57833: EQUAL
57834: IFTRUE 57838
57836: GO 58039
57838: POP
// case nation of nation_american :
57839: LD_VAR 0 5
57843: PUSH
57844: LD_INT 1
57846: DOUBLE
57847: EQUAL
57848: IFTRUE 57852
57850: GO 57908
57852: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57853: LD_ADDR_VAR 0 9
57857: PUSH
57858: LD_VAR 0 11
57862: PUSH
57863: LD_VAR 0 12
57867: PUSH
57868: LD_VAR 0 13
57872: PUSH
57873: LD_VAR 0 14
57877: PUSH
57878: LD_VAR 0 15
57882: PUSH
57883: LD_VAR 0 16
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: PUSH
57896: LD_VAR 0 4
57900: PUSH
57901: LD_INT 1
57903: PLUS
57904: ARRAY
57905: ST_TO_ADDR
57906: GO 58037
57908: LD_INT 2
57910: DOUBLE
57911: EQUAL
57912: IFTRUE 57916
57914: GO 57972
57916: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57917: LD_ADDR_VAR 0 9
57921: PUSH
57922: LD_VAR 0 17
57926: PUSH
57927: LD_VAR 0 18
57931: PUSH
57932: LD_VAR 0 19
57936: PUSH
57937: LD_VAR 0 20
57941: PUSH
57942: LD_VAR 0 21
57946: PUSH
57947: LD_VAR 0 22
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: PUSH
57960: LD_VAR 0 4
57964: PUSH
57965: LD_INT 1
57967: PLUS
57968: ARRAY
57969: ST_TO_ADDR
57970: GO 58037
57972: LD_INT 3
57974: DOUBLE
57975: EQUAL
57976: IFTRUE 57980
57978: GO 58036
57980: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57981: LD_ADDR_VAR 0 9
57985: PUSH
57986: LD_VAR 0 23
57990: PUSH
57991: LD_VAR 0 24
57995: PUSH
57996: LD_VAR 0 25
58000: PUSH
58001: LD_VAR 0 26
58005: PUSH
58006: LD_VAR 0 27
58010: PUSH
58011: LD_VAR 0 28
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: PUSH
58024: LD_VAR 0 4
58028: PUSH
58029: LD_INT 1
58031: PLUS
58032: ARRAY
58033: ST_TO_ADDR
58034: GO 58037
58036: POP
58037: GO 58592
58039: LD_INT 2
58041: DOUBLE
58042: EQUAL
58043: IFTRUE 58053
58045: LD_INT 3
58047: DOUBLE
58048: EQUAL
58049: IFTRUE 58053
58051: GO 58109
58053: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58054: LD_ADDR_VAR 0 9
58058: PUSH
58059: LD_VAR 0 29
58063: PUSH
58064: LD_VAR 0 30
58068: PUSH
58069: LD_VAR 0 31
58073: PUSH
58074: LD_VAR 0 32
58078: PUSH
58079: LD_VAR 0 33
58083: PUSH
58084: LD_VAR 0 34
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: PUSH
58097: LD_VAR 0 4
58101: PUSH
58102: LD_INT 1
58104: PLUS
58105: ARRAY
58106: ST_TO_ADDR
58107: GO 58592
58109: LD_INT 16
58111: DOUBLE
58112: EQUAL
58113: IFTRUE 58171
58115: LD_INT 17
58117: DOUBLE
58118: EQUAL
58119: IFTRUE 58171
58121: LD_INT 18
58123: DOUBLE
58124: EQUAL
58125: IFTRUE 58171
58127: LD_INT 19
58129: DOUBLE
58130: EQUAL
58131: IFTRUE 58171
58133: LD_INT 22
58135: DOUBLE
58136: EQUAL
58137: IFTRUE 58171
58139: LD_INT 20
58141: DOUBLE
58142: EQUAL
58143: IFTRUE 58171
58145: LD_INT 21
58147: DOUBLE
58148: EQUAL
58149: IFTRUE 58171
58151: LD_INT 23
58153: DOUBLE
58154: EQUAL
58155: IFTRUE 58171
58157: LD_INT 24
58159: DOUBLE
58160: EQUAL
58161: IFTRUE 58171
58163: LD_INT 25
58165: DOUBLE
58166: EQUAL
58167: IFTRUE 58171
58169: GO 58227
58171: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58172: LD_ADDR_VAR 0 9
58176: PUSH
58177: LD_VAR 0 35
58181: PUSH
58182: LD_VAR 0 36
58186: PUSH
58187: LD_VAR 0 37
58191: PUSH
58192: LD_VAR 0 38
58196: PUSH
58197: LD_VAR 0 39
58201: PUSH
58202: LD_VAR 0 40
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: PUSH
58215: LD_VAR 0 4
58219: PUSH
58220: LD_INT 1
58222: PLUS
58223: ARRAY
58224: ST_TO_ADDR
58225: GO 58592
58227: LD_INT 6
58229: DOUBLE
58230: EQUAL
58231: IFTRUE 58283
58233: LD_INT 7
58235: DOUBLE
58236: EQUAL
58237: IFTRUE 58283
58239: LD_INT 8
58241: DOUBLE
58242: EQUAL
58243: IFTRUE 58283
58245: LD_INT 13
58247: DOUBLE
58248: EQUAL
58249: IFTRUE 58283
58251: LD_INT 12
58253: DOUBLE
58254: EQUAL
58255: IFTRUE 58283
58257: LD_INT 15
58259: DOUBLE
58260: EQUAL
58261: IFTRUE 58283
58263: LD_INT 11
58265: DOUBLE
58266: EQUAL
58267: IFTRUE 58283
58269: LD_INT 14
58271: DOUBLE
58272: EQUAL
58273: IFTRUE 58283
58275: LD_INT 10
58277: DOUBLE
58278: EQUAL
58279: IFTRUE 58283
58281: GO 58339
58283: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58284: LD_ADDR_VAR 0 9
58288: PUSH
58289: LD_VAR 0 41
58293: PUSH
58294: LD_VAR 0 42
58298: PUSH
58299: LD_VAR 0 43
58303: PUSH
58304: LD_VAR 0 44
58308: PUSH
58309: LD_VAR 0 45
58313: PUSH
58314: LD_VAR 0 46
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: PUSH
58327: LD_VAR 0 4
58331: PUSH
58332: LD_INT 1
58334: PLUS
58335: ARRAY
58336: ST_TO_ADDR
58337: GO 58592
58339: LD_INT 36
58341: DOUBLE
58342: EQUAL
58343: IFTRUE 58347
58345: GO 58403
58347: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58348: LD_ADDR_VAR 0 9
58352: PUSH
58353: LD_VAR 0 47
58357: PUSH
58358: LD_VAR 0 48
58362: PUSH
58363: LD_VAR 0 49
58367: PUSH
58368: LD_VAR 0 50
58372: PUSH
58373: LD_VAR 0 51
58377: PUSH
58378: LD_VAR 0 52
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: PUSH
58391: LD_VAR 0 4
58395: PUSH
58396: LD_INT 1
58398: PLUS
58399: ARRAY
58400: ST_TO_ADDR
58401: GO 58592
58403: LD_INT 4
58405: DOUBLE
58406: EQUAL
58407: IFTRUE 58429
58409: LD_INT 5
58411: DOUBLE
58412: EQUAL
58413: IFTRUE 58429
58415: LD_INT 34
58417: DOUBLE
58418: EQUAL
58419: IFTRUE 58429
58421: LD_INT 37
58423: DOUBLE
58424: EQUAL
58425: IFTRUE 58429
58427: GO 58485
58429: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58430: LD_ADDR_VAR 0 9
58434: PUSH
58435: LD_VAR 0 53
58439: PUSH
58440: LD_VAR 0 54
58444: PUSH
58445: LD_VAR 0 55
58449: PUSH
58450: LD_VAR 0 56
58454: PUSH
58455: LD_VAR 0 57
58459: PUSH
58460: LD_VAR 0 58
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: PUSH
58473: LD_VAR 0 4
58477: PUSH
58478: LD_INT 1
58480: PLUS
58481: ARRAY
58482: ST_TO_ADDR
58483: GO 58592
58485: LD_INT 31
58487: DOUBLE
58488: EQUAL
58489: IFTRUE 58535
58491: LD_INT 32
58493: DOUBLE
58494: EQUAL
58495: IFTRUE 58535
58497: LD_INT 33
58499: DOUBLE
58500: EQUAL
58501: IFTRUE 58535
58503: LD_INT 27
58505: DOUBLE
58506: EQUAL
58507: IFTRUE 58535
58509: LD_INT 26
58511: DOUBLE
58512: EQUAL
58513: IFTRUE 58535
58515: LD_INT 28
58517: DOUBLE
58518: EQUAL
58519: IFTRUE 58535
58521: LD_INT 29
58523: DOUBLE
58524: EQUAL
58525: IFTRUE 58535
58527: LD_INT 30
58529: DOUBLE
58530: EQUAL
58531: IFTRUE 58535
58533: GO 58591
58535: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58536: LD_ADDR_VAR 0 9
58540: PUSH
58541: LD_VAR 0 59
58545: PUSH
58546: LD_VAR 0 60
58550: PUSH
58551: LD_VAR 0 61
58555: PUSH
58556: LD_VAR 0 62
58560: PUSH
58561: LD_VAR 0 63
58565: PUSH
58566: LD_VAR 0 64
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: PUSH
58579: LD_VAR 0 4
58583: PUSH
58584: LD_INT 1
58586: PLUS
58587: ARRAY
58588: ST_TO_ADDR
58589: GO 58592
58591: POP
// temp_list2 = [ ] ;
58592: LD_ADDR_VAR 0 10
58596: PUSH
58597: EMPTY
58598: ST_TO_ADDR
// for i in temp_list do
58599: LD_ADDR_VAR 0 8
58603: PUSH
58604: LD_VAR 0 9
58608: PUSH
58609: FOR_IN
58610: IFFALSE 58662
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58612: LD_ADDR_VAR 0 10
58616: PUSH
58617: LD_VAR 0 10
58621: PUSH
58622: LD_VAR 0 8
58626: PUSH
58627: LD_INT 1
58629: ARRAY
58630: PUSH
58631: LD_VAR 0 2
58635: PLUS
58636: PUSH
58637: LD_VAR 0 8
58641: PUSH
58642: LD_INT 2
58644: ARRAY
58645: PUSH
58646: LD_VAR 0 3
58650: PLUS
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: EMPTY
58657: LIST
58658: ADD
58659: ST_TO_ADDR
58660: GO 58609
58662: POP
58663: POP
// result = temp_list2 ;
58664: LD_ADDR_VAR 0 7
58668: PUSH
58669: LD_VAR 0 10
58673: ST_TO_ADDR
// end ;
58674: LD_VAR 0 7
58678: RET
// export function EnemyInRange ( unit , dist ) ; begin
58679: LD_INT 0
58681: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58682: LD_ADDR_VAR 0 3
58686: PUSH
58687: LD_VAR 0 1
58691: PPUSH
58692: CALL_OW 255
58696: PPUSH
58697: LD_VAR 0 1
58701: PPUSH
58702: CALL_OW 250
58706: PPUSH
58707: LD_VAR 0 1
58711: PPUSH
58712: CALL_OW 251
58716: PPUSH
58717: LD_VAR 0 2
58721: PPUSH
58722: CALL 32783 0 4
58726: PUSH
58727: LD_INT 4
58729: ARRAY
58730: ST_TO_ADDR
// end ;
58731: LD_VAR 0 3
58735: RET
// export function PlayerSeeMe ( unit ) ; begin
58736: LD_INT 0
58738: PPUSH
// result := See ( your_side , unit ) ;
58739: LD_ADDR_VAR 0 2
58743: PUSH
58744: LD_OWVAR 2
58748: PPUSH
58749: LD_VAR 0 1
58753: PPUSH
58754: CALL_OW 292
58758: ST_TO_ADDR
// end ;
58759: LD_VAR 0 2
58763: RET
// export function ReverseDir ( unit ) ; begin
58764: LD_INT 0
58766: PPUSH
// if not unit then
58767: LD_VAR 0 1
58771: NOT
58772: IFFALSE 58776
// exit ;
58774: GO 58799
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58776: LD_ADDR_VAR 0 2
58780: PUSH
58781: LD_VAR 0 1
58785: PPUSH
58786: CALL_OW 254
58790: PUSH
58791: LD_INT 3
58793: PLUS
58794: PUSH
58795: LD_INT 6
58797: MOD
58798: ST_TO_ADDR
// end ;
58799: LD_VAR 0 2
58803: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58804: LD_INT 0
58806: PPUSH
58807: PPUSH
58808: PPUSH
58809: PPUSH
58810: PPUSH
// if not hexes then
58811: LD_VAR 0 2
58815: NOT
58816: IFFALSE 58820
// exit ;
58818: GO 58968
// dist := 9999 ;
58820: LD_ADDR_VAR 0 5
58824: PUSH
58825: LD_INT 9999
58827: ST_TO_ADDR
// for i = 1 to hexes do
58828: LD_ADDR_VAR 0 4
58832: PUSH
58833: DOUBLE
58834: LD_INT 1
58836: DEC
58837: ST_TO_ADDR
58838: LD_VAR 0 2
58842: PUSH
58843: FOR_TO
58844: IFFALSE 58956
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58846: LD_VAR 0 1
58850: PPUSH
58851: LD_VAR 0 2
58855: PUSH
58856: LD_VAR 0 4
58860: ARRAY
58861: PUSH
58862: LD_INT 1
58864: ARRAY
58865: PPUSH
58866: LD_VAR 0 2
58870: PUSH
58871: LD_VAR 0 4
58875: ARRAY
58876: PUSH
58877: LD_INT 2
58879: ARRAY
58880: PPUSH
58881: CALL_OW 297
58885: PUSH
58886: LD_VAR 0 5
58890: LESS
58891: IFFALSE 58954
// begin hex := hexes [ i ] ;
58893: LD_ADDR_VAR 0 7
58897: PUSH
58898: LD_VAR 0 2
58902: PUSH
58903: LD_VAR 0 4
58907: ARRAY
58908: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58909: LD_ADDR_VAR 0 5
58913: PUSH
58914: LD_VAR 0 1
58918: PPUSH
58919: LD_VAR 0 2
58923: PUSH
58924: LD_VAR 0 4
58928: ARRAY
58929: PUSH
58930: LD_INT 1
58932: ARRAY
58933: PPUSH
58934: LD_VAR 0 2
58938: PUSH
58939: LD_VAR 0 4
58943: ARRAY
58944: PUSH
58945: LD_INT 2
58947: ARRAY
58948: PPUSH
58949: CALL_OW 297
58953: ST_TO_ADDR
// end ; end ;
58954: GO 58843
58956: POP
58957: POP
// result := hex ;
58958: LD_ADDR_VAR 0 3
58962: PUSH
58963: LD_VAR 0 7
58967: ST_TO_ADDR
// end ;
58968: LD_VAR 0 3
58972: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58973: LD_INT 0
58975: PPUSH
58976: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58977: LD_VAR 0 1
58981: NOT
58982: PUSH
58983: LD_VAR 0 1
58987: PUSH
58988: LD_INT 21
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 23
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PPUSH
59012: CALL_OW 69
59016: IN
59017: NOT
59018: OR
59019: IFFALSE 59023
// exit ;
59021: GO 59070
// for i = 1 to 3 do
59023: LD_ADDR_VAR 0 3
59027: PUSH
59028: DOUBLE
59029: LD_INT 1
59031: DEC
59032: ST_TO_ADDR
59033: LD_INT 3
59035: PUSH
59036: FOR_TO
59037: IFFALSE 59068
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59039: LD_VAR 0 1
59043: PPUSH
59044: CALL_OW 250
59048: PPUSH
59049: LD_VAR 0 1
59053: PPUSH
59054: CALL_OW 251
59058: PPUSH
59059: LD_INT 1
59061: PPUSH
59062: CALL_OW 453
59066: GO 59036
59068: POP
59069: POP
// end ;
59070: LD_VAR 0 2
59074: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59075: LD_INT 0
59077: PPUSH
59078: PPUSH
59079: PPUSH
59080: PPUSH
59081: PPUSH
59082: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59083: LD_VAR 0 1
59087: NOT
59088: PUSH
59089: LD_VAR 0 2
59093: NOT
59094: OR
59095: PUSH
59096: LD_VAR 0 1
59100: PPUSH
59101: CALL_OW 314
59105: OR
59106: IFFALSE 59110
// exit ;
59108: GO 59551
// x := GetX ( enemy_unit ) ;
59110: LD_ADDR_VAR 0 7
59114: PUSH
59115: LD_VAR 0 2
59119: PPUSH
59120: CALL_OW 250
59124: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59125: LD_ADDR_VAR 0 8
59129: PUSH
59130: LD_VAR 0 2
59134: PPUSH
59135: CALL_OW 251
59139: ST_TO_ADDR
// if not x or not y then
59140: LD_VAR 0 7
59144: NOT
59145: PUSH
59146: LD_VAR 0 8
59150: NOT
59151: OR
59152: IFFALSE 59156
// exit ;
59154: GO 59551
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59156: LD_ADDR_VAR 0 6
59160: PUSH
59161: LD_VAR 0 7
59165: PPUSH
59166: LD_INT 0
59168: PPUSH
59169: LD_INT 4
59171: PPUSH
59172: CALL_OW 272
59176: PUSH
59177: LD_VAR 0 8
59181: PPUSH
59182: LD_INT 0
59184: PPUSH
59185: LD_INT 4
59187: PPUSH
59188: CALL_OW 273
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_VAR 0 7
59201: PPUSH
59202: LD_INT 1
59204: PPUSH
59205: LD_INT 4
59207: PPUSH
59208: CALL_OW 272
59212: PUSH
59213: LD_VAR 0 8
59217: PPUSH
59218: LD_INT 1
59220: PPUSH
59221: LD_INT 4
59223: PPUSH
59224: CALL_OW 273
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_VAR 0 7
59237: PPUSH
59238: LD_INT 2
59240: PPUSH
59241: LD_INT 4
59243: PPUSH
59244: CALL_OW 272
59248: PUSH
59249: LD_VAR 0 8
59253: PPUSH
59254: LD_INT 2
59256: PPUSH
59257: LD_INT 4
59259: PPUSH
59260: CALL_OW 273
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_VAR 0 7
59273: PPUSH
59274: LD_INT 3
59276: PPUSH
59277: LD_INT 4
59279: PPUSH
59280: CALL_OW 272
59284: PUSH
59285: LD_VAR 0 8
59289: PPUSH
59290: LD_INT 3
59292: PPUSH
59293: LD_INT 4
59295: PPUSH
59296: CALL_OW 273
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_VAR 0 7
59309: PPUSH
59310: LD_INT 4
59312: PPUSH
59313: LD_INT 4
59315: PPUSH
59316: CALL_OW 272
59320: PUSH
59321: LD_VAR 0 8
59325: PPUSH
59326: LD_INT 4
59328: PPUSH
59329: LD_INT 4
59331: PPUSH
59332: CALL_OW 273
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_VAR 0 7
59345: PPUSH
59346: LD_INT 5
59348: PPUSH
59349: LD_INT 4
59351: PPUSH
59352: CALL_OW 272
59356: PUSH
59357: LD_VAR 0 8
59361: PPUSH
59362: LD_INT 5
59364: PPUSH
59365: LD_INT 4
59367: PPUSH
59368: CALL_OW 273
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: ST_TO_ADDR
// for i = tmp downto 1 do
59385: LD_ADDR_VAR 0 4
59389: PUSH
59390: DOUBLE
59391: LD_VAR 0 6
59395: INC
59396: ST_TO_ADDR
59397: LD_INT 1
59399: PUSH
59400: FOR_DOWNTO
59401: IFFALSE 59502
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59403: LD_VAR 0 6
59407: PUSH
59408: LD_VAR 0 4
59412: ARRAY
59413: PUSH
59414: LD_INT 1
59416: ARRAY
59417: PPUSH
59418: LD_VAR 0 6
59422: PUSH
59423: LD_VAR 0 4
59427: ARRAY
59428: PUSH
59429: LD_INT 2
59431: ARRAY
59432: PPUSH
59433: CALL_OW 488
59437: NOT
59438: PUSH
59439: LD_VAR 0 6
59443: PUSH
59444: LD_VAR 0 4
59448: ARRAY
59449: PUSH
59450: LD_INT 1
59452: ARRAY
59453: PPUSH
59454: LD_VAR 0 6
59458: PUSH
59459: LD_VAR 0 4
59463: ARRAY
59464: PUSH
59465: LD_INT 2
59467: ARRAY
59468: PPUSH
59469: CALL_OW 428
59473: PUSH
59474: LD_INT 0
59476: NONEQUAL
59477: OR
59478: IFFALSE 59500
// tmp := Delete ( tmp , i ) ;
59480: LD_ADDR_VAR 0 6
59484: PUSH
59485: LD_VAR 0 6
59489: PPUSH
59490: LD_VAR 0 4
59494: PPUSH
59495: CALL_OW 3
59499: ST_TO_ADDR
59500: GO 59400
59502: POP
59503: POP
// j := GetClosestHex ( unit , tmp ) ;
59504: LD_ADDR_VAR 0 5
59508: PUSH
59509: LD_VAR 0 1
59513: PPUSH
59514: LD_VAR 0 6
59518: PPUSH
59519: CALL 58804 0 2
59523: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59524: LD_VAR 0 1
59528: PPUSH
59529: LD_VAR 0 5
59533: PUSH
59534: LD_INT 1
59536: ARRAY
59537: PPUSH
59538: LD_VAR 0 5
59542: PUSH
59543: LD_INT 2
59545: ARRAY
59546: PPUSH
59547: CALL_OW 111
// end ;
59551: LD_VAR 0 3
59555: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59556: LD_INT 0
59558: PPUSH
59559: PPUSH
59560: PPUSH
// uc_side = 0 ;
59561: LD_ADDR_OWVAR 20
59565: PUSH
59566: LD_INT 0
59568: ST_TO_ADDR
// uc_nation = 0 ;
59569: LD_ADDR_OWVAR 21
59573: PUSH
59574: LD_INT 0
59576: ST_TO_ADDR
// InitHc_All ( ) ;
59577: CALL_OW 584
// InitVc ;
59581: CALL_OW 20
// if mastodonts then
59585: LD_VAR 0 6
59589: IFFALSE 59656
// for i = 1 to mastodonts do
59591: LD_ADDR_VAR 0 11
59595: PUSH
59596: DOUBLE
59597: LD_INT 1
59599: DEC
59600: ST_TO_ADDR
59601: LD_VAR 0 6
59605: PUSH
59606: FOR_TO
59607: IFFALSE 59654
// begin vc_chassis := 31 ;
59609: LD_ADDR_OWVAR 37
59613: PUSH
59614: LD_INT 31
59616: ST_TO_ADDR
// vc_control := control_rider ;
59617: LD_ADDR_OWVAR 38
59621: PUSH
59622: LD_INT 4
59624: ST_TO_ADDR
// animal := CreateVehicle ;
59625: LD_ADDR_VAR 0 12
59629: PUSH
59630: CALL_OW 45
59634: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59635: LD_VAR 0 12
59639: PPUSH
59640: LD_VAR 0 8
59644: PPUSH
59645: LD_INT 0
59647: PPUSH
59648: CALL 61844 0 3
// end ;
59652: GO 59606
59654: POP
59655: POP
// if horses then
59656: LD_VAR 0 5
59660: IFFALSE 59727
// for i = 1 to horses do
59662: LD_ADDR_VAR 0 11
59666: PUSH
59667: DOUBLE
59668: LD_INT 1
59670: DEC
59671: ST_TO_ADDR
59672: LD_VAR 0 5
59676: PUSH
59677: FOR_TO
59678: IFFALSE 59725
// begin hc_class := 21 ;
59680: LD_ADDR_OWVAR 28
59684: PUSH
59685: LD_INT 21
59687: ST_TO_ADDR
// hc_gallery :=  ;
59688: LD_ADDR_OWVAR 33
59692: PUSH
59693: LD_STRING 
59695: ST_TO_ADDR
// animal := CreateHuman ;
59696: LD_ADDR_VAR 0 12
59700: PUSH
59701: CALL_OW 44
59705: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59706: LD_VAR 0 12
59710: PPUSH
59711: LD_VAR 0 8
59715: PPUSH
59716: LD_INT 0
59718: PPUSH
59719: CALL 61844 0 3
// end ;
59723: GO 59677
59725: POP
59726: POP
// if birds then
59727: LD_VAR 0 1
59731: IFFALSE 59798
// for i = 1 to birds do
59733: LD_ADDR_VAR 0 11
59737: PUSH
59738: DOUBLE
59739: LD_INT 1
59741: DEC
59742: ST_TO_ADDR
59743: LD_VAR 0 1
59747: PUSH
59748: FOR_TO
59749: IFFALSE 59796
// begin hc_class = 18 ;
59751: LD_ADDR_OWVAR 28
59755: PUSH
59756: LD_INT 18
59758: ST_TO_ADDR
// hc_gallery =  ;
59759: LD_ADDR_OWVAR 33
59763: PUSH
59764: LD_STRING 
59766: ST_TO_ADDR
// animal := CreateHuman ;
59767: LD_ADDR_VAR 0 12
59771: PUSH
59772: CALL_OW 44
59776: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59777: LD_VAR 0 12
59781: PPUSH
59782: LD_VAR 0 8
59786: PPUSH
59787: LD_INT 0
59789: PPUSH
59790: CALL 61844 0 3
// end ;
59794: GO 59748
59796: POP
59797: POP
// if tigers then
59798: LD_VAR 0 2
59802: IFFALSE 59886
// for i = 1 to tigers do
59804: LD_ADDR_VAR 0 11
59808: PUSH
59809: DOUBLE
59810: LD_INT 1
59812: DEC
59813: ST_TO_ADDR
59814: LD_VAR 0 2
59818: PUSH
59819: FOR_TO
59820: IFFALSE 59884
// begin hc_class = class_tiger ;
59822: LD_ADDR_OWVAR 28
59826: PUSH
59827: LD_INT 14
59829: ST_TO_ADDR
// hc_gallery =  ;
59830: LD_ADDR_OWVAR 33
59834: PUSH
59835: LD_STRING 
59837: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59838: LD_ADDR_OWVAR 35
59842: PUSH
59843: LD_INT 7
59845: NEG
59846: PPUSH
59847: LD_INT 7
59849: PPUSH
59850: CALL_OW 12
59854: ST_TO_ADDR
// animal := CreateHuman ;
59855: LD_ADDR_VAR 0 12
59859: PUSH
59860: CALL_OW 44
59864: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59865: LD_VAR 0 12
59869: PPUSH
59870: LD_VAR 0 8
59874: PPUSH
59875: LD_INT 0
59877: PPUSH
59878: CALL 61844 0 3
// end ;
59882: GO 59819
59884: POP
59885: POP
// if apemans then
59886: LD_VAR 0 3
59890: IFFALSE 60013
// for i = 1 to apemans do
59892: LD_ADDR_VAR 0 11
59896: PUSH
59897: DOUBLE
59898: LD_INT 1
59900: DEC
59901: ST_TO_ADDR
59902: LD_VAR 0 3
59906: PUSH
59907: FOR_TO
59908: IFFALSE 60011
// begin hc_class = class_apeman ;
59910: LD_ADDR_OWVAR 28
59914: PUSH
59915: LD_INT 12
59917: ST_TO_ADDR
// hc_gallery =  ;
59918: LD_ADDR_OWVAR 33
59922: PUSH
59923: LD_STRING 
59925: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
59926: LD_ADDR_OWVAR 35
59930: PUSH
59931: LD_INT 5
59933: NEG
59934: PPUSH
59935: LD_INT 5
59937: PPUSH
59938: CALL_OW 12
59942: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59943: LD_ADDR_OWVAR 31
59947: PUSH
59948: LD_INT 1
59950: PPUSH
59951: LD_INT 3
59953: PPUSH
59954: CALL_OW 12
59958: PUSH
59959: LD_INT 1
59961: PPUSH
59962: LD_INT 3
59964: PPUSH
59965: CALL_OW 12
59969: PUSH
59970: LD_INT 0
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: ST_TO_ADDR
// animal := CreateHuman ;
59982: LD_ADDR_VAR 0 12
59986: PUSH
59987: CALL_OW 44
59991: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59992: LD_VAR 0 12
59996: PPUSH
59997: LD_VAR 0 8
60001: PPUSH
60002: LD_INT 0
60004: PPUSH
60005: CALL 61844 0 3
// end ;
60009: GO 59907
60011: POP
60012: POP
// if enchidnas then
60013: LD_VAR 0 4
60017: IFFALSE 60084
// for i = 1 to enchidnas do
60019: LD_ADDR_VAR 0 11
60023: PUSH
60024: DOUBLE
60025: LD_INT 1
60027: DEC
60028: ST_TO_ADDR
60029: LD_VAR 0 4
60033: PUSH
60034: FOR_TO
60035: IFFALSE 60082
// begin hc_class = 13 ;
60037: LD_ADDR_OWVAR 28
60041: PUSH
60042: LD_INT 13
60044: ST_TO_ADDR
// hc_gallery =  ;
60045: LD_ADDR_OWVAR 33
60049: PUSH
60050: LD_STRING 
60052: ST_TO_ADDR
// animal := CreateHuman ;
60053: LD_ADDR_VAR 0 12
60057: PUSH
60058: CALL_OW 44
60062: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60063: LD_VAR 0 12
60067: PPUSH
60068: LD_VAR 0 8
60072: PPUSH
60073: LD_INT 0
60075: PPUSH
60076: CALL 61844 0 3
// end ;
60080: GO 60034
60082: POP
60083: POP
// if fishes then
60084: LD_VAR 0 7
60088: IFFALSE 60155
// for i = 1 to fishes do
60090: LD_ADDR_VAR 0 11
60094: PUSH
60095: DOUBLE
60096: LD_INT 1
60098: DEC
60099: ST_TO_ADDR
60100: LD_VAR 0 7
60104: PUSH
60105: FOR_TO
60106: IFFALSE 60153
// begin hc_class = 20 ;
60108: LD_ADDR_OWVAR 28
60112: PUSH
60113: LD_INT 20
60115: ST_TO_ADDR
// hc_gallery =  ;
60116: LD_ADDR_OWVAR 33
60120: PUSH
60121: LD_STRING 
60123: ST_TO_ADDR
// animal := CreateHuman ;
60124: LD_ADDR_VAR 0 12
60128: PUSH
60129: CALL_OW 44
60133: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60134: LD_VAR 0 12
60138: PPUSH
60139: LD_VAR 0 9
60143: PPUSH
60144: LD_INT 0
60146: PPUSH
60147: CALL 61844 0 3
// end ;
60151: GO 60105
60153: POP
60154: POP
// end ;
60155: LD_VAR 0 10
60159: RET
// export function WantHeal ( sci , unit ) ; begin
60160: LD_INT 0
60162: PPUSH
// if GetTaskList ( sci ) > 0 then
60163: LD_VAR 0 1
60167: PPUSH
60168: CALL_OW 437
60172: PUSH
60173: LD_INT 0
60175: GREATER
60176: IFFALSE 60246
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60178: LD_VAR 0 1
60182: PPUSH
60183: CALL_OW 437
60187: PUSH
60188: LD_INT 1
60190: ARRAY
60191: PUSH
60192: LD_INT 1
60194: ARRAY
60195: PUSH
60196: LD_STRING l
60198: EQUAL
60199: PUSH
60200: LD_VAR 0 1
60204: PPUSH
60205: CALL_OW 437
60209: PUSH
60210: LD_INT 1
60212: ARRAY
60213: PUSH
60214: LD_INT 4
60216: ARRAY
60217: PUSH
60218: LD_VAR 0 2
60222: EQUAL
60223: AND
60224: IFFALSE 60236
// result := true else
60226: LD_ADDR_VAR 0 3
60230: PUSH
60231: LD_INT 1
60233: ST_TO_ADDR
60234: GO 60244
// result := false ;
60236: LD_ADDR_VAR 0 3
60240: PUSH
60241: LD_INT 0
60243: ST_TO_ADDR
// end else
60244: GO 60254
// result := false ;
60246: LD_ADDR_VAR 0 3
60250: PUSH
60251: LD_INT 0
60253: ST_TO_ADDR
// end ;
60254: LD_VAR 0 3
60258: RET
// export function HealTarget ( sci ) ; begin
60259: LD_INT 0
60261: PPUSH
// if not sci then
60262: LD_VAR 0 1
60266: NOT
60267: IFFALSE 60271
// exit ;
60269: GO 60336
// result := 0 ;
60271: LD_ADDR_VAR 0 2
60275: PUSH
60276: LD_INT 0
60278: ST_TO_ADDR
// if GetTaskList ( sci ) then
60279: LD_VAR 0 1
60283: PPUSH
60284: CALL_OW 437
60288: IFFALSE 60336
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60290: LD_VAR 0 1
60294: PPUSH
60295: CALL_OW 437
60299: PUSH
60300: LD_INT 1
60302: ARRAY
60303: PUSH
60304: LD_INT 1
60306: ARRAY
60307: PUSH
60308: LD_STRING l
60310: EQUAL
60311: IFFALSE 60336
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60313: LD_ADDR_VAR 0 2
60317: PUSH
60318: LD_VAR 0 1
60322: PPUSH
60323: CALL_OW 437
60327: PUSH
60328: LD_INT 1
60330: ARRAY
60331: PUSH
60332: LD_INT 4
60334: ARRAY
60335: ST_TO_ADDR
// end ;
60336: LD_VAR 0 2
60340: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60341: LD_INT 0
60343: PPUSH
60344: PPUSH
60345: PPUSH
60346: PPUSH
// if not base_units then
60347: LD_VAR 0 1
60351: NOT
60352: IFFALSE 60356
// exit ;
60354: GO 60443
// result := false ;
60356: LD_ADDR_VAR 0 2
60360: PUSH
60361: LD_INT 0
60363: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60364: LD_ADDR_VAR 0 5
60368: PUSH
60369: LD_VAR 0 1
60373: PPUSH
60374: LD_INT 21
60376: PUSH
60377: LD_INT 3
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PPUSH
60384: CALL_OW 72
60388: ST_TO_ADDR
// if not tmp then
60389: LD_VAR 0 5
60393: NOT
60394: IFFALSE 60398
// exit ;
60396: GO 60443
// for i in tmp do
60398: LD_ADDR_VAR 0 3
60402: PUSH
60403: LD_VAR 0 5
60407: PUSH
60408: FOR_IN
60409: IFFALSE 60441
// begin result := EnemyInRange ( i , 22 ) ;
60411: LD_ADDR_VAR 0 2
60415: PUSH
60416: LD_VAR 0 3
60420: PPUSH
60421: LD_INT 22
60423: PPUSH
60424: CALL 58679 0 2
60428: ST_TO_ADDR
// if result then
60429: LD_VAR 0 2
60433: IFFALSE 60439
// exit ;
60435: POP
60436: POP
60437: GO 60443
// end ;
60439: GO 60408
60441: POP
60442: POP
// end ;
60443: LD_VAR 0 2
60447: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60448: LD_INT 0
60450: PPUSH
60451: PPUSH
// if not units then
60452: LD_VAR 0 1
60456: NOT
60457: IFFALSE 60461
// exit ;
60459: GO 60531
// result := [ ] ;
60461: LD_ADDR_VAR 0 3
60465: PUSH
60466: EMPTY
60467: ST_TO_ADDR
// for i in units do
60468: LD_ADDR_VAR 0 4
60472: PUSH
60473: LD_VAR 0 1
60477: PUSH
60478: FOR_IN
60479: IFFALSE 60529
// if GetTag ( i ) = tag then
60481: LD_VAR 0 4
60485: PPUSH
60486: CALL_OW 110
60490: PUSH
60491: LD_VAR 0 2
60495: EQUAL
60496: IFFALSE 60527
// result := Insert ( result , result + 1 , i ) ;
60498: LD_ADDR_VAR 0 3
60502: PUSH
60503: LD_VAR 0 3
60507: PPUSH
60508: LD_VAR 0 3
60512: PUSH
60513: LD_INT 1
60515: PLUS
60516: PPUSH
60517: LD_VAR 0 4
60521: PPUSH
60522: CALL_OW 2
60526: ST_TO_ADDR
60527: GO 60478
60529: POP
60530: POP
// end ;
60531: LD_VAR 0 3
60535: RET
// export function IsDriver ( un ) ; begin
60536: LD_INT 0
60538: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60539: LD_ADDR_VAR 0 2
60543: PUSH
60544: LD_VAR 0 1
60548: PUSH
60549: LD_INT 55
60551: PUSH
60552: EMPTY
60553: LIST
60554: PPUSH
60555: CALL_OW 69
60559: IN
60560: ST_TO_ADDR
// end ;
60561: LD_VAR 0 2
60565: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60566: LD_INT 0
60568: PPUSH
60569: PPUSH
// list := [ ] ;
60570: LD_ADDR_VAR 0 5
60574: PUSH
60575: EMPTY
60576: ST_TO_ADDR
// case d of 0 :
60577: LD_VAR 0 3
60581: PUSH
60582: LD_INT 0
60584: DOUBLE
60585: EQUAL
60586: IFTRUE 60590
60588: GO 60723
60590: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60591: LD_ADDR_VAR 0 5
60595: PUSH
60596: LD_VAR 0 1
60600: PUSH
60601: LD_INT 4
60603: MINUS
60604: PUSH
60605: LD_VAR 0 2
60609: PUSH
60610: LD_INT 4
60612: MINUS
60613: PUSH
60614: LD_INT 2
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: LIST
60621: PUSH
60622: LD_VAR 0 1
60626: PUSH
60627: LD_INT 3
60629: MINUS
60630: PUSH
60631: LD_VAR 0 2
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: LIST
60643: PUSH
60644: LD_VAR 0 1
60648: PUSH
60649: LD_INT 4
60651: PLUS
60652: PUSH
60653: LD_VAR 0 2
60657: PUSH
60658: LD_INT 4
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: LIST
60665: PUSH
60666: LD_VAR 0 1
60670: PUSH
60671: LD_INT 3
60673: PLUS
60674: PUSH
60675: LD_VAR 0 2
60679: PUSH
60680: LD_INT 3
60682: PLUS
60683: PUSH
60684: LD_INT 5
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: LIST
60691: PUSH
60692: LD_VAR 0 1
60696: PUSH
60697: LD_VAR 0 2
60701: PUSH
60702: LD_INT 4
60704: PLUS
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: LIST
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: ST_TO_ADDR
// end ; 1 :
60721: GO 61421
60723: LD_INT 1
60725: DOUBLE
60726: EQUAL
60727: IFTRUE 60731
60729: GO 60864
60731: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60732: LD_ADDR_VAR 0 5
60736: PUSH
60737: LD_VAR 0 1
60741: PUSH
60742: LD_VAR 0 2
60746: PUSH
60747: LD_INT 4
60749: MINUS
60750: PUSH
60751: LD_INT 3
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: LIST
60758: PUSH
60759: LD_VAR 0 1
60763: PUSH
60764: LD_INT 3
60766: MINUS
60767: PUSH
60768: LD_VAR 0 2
60772: PUSH
60773: LD_INT 3
60775: MINUS
60776: PUSH
60777: LD_INT 2
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: LIST
60784: PUSH
60785: LD_VAR 0 1
60789: PUSH
60790: LD_INT 4
60792: MINUS
60793: PUSH
60794: LD_VAR 0 2
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: LIST
60806: PUSH
60807: LD_VAR 0 1
60811: PUSH
60812: LD_VAR 0 2
60816: PUSH
60817: LD_INT 3
60819: PLUS
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: LIST
60828: PUSH
60829: LD_VAR 0 1
60833: PUSH
60834: LD_INT 4
60836: PLUS
60837: PUSH
60838: LD_VAR 0 2
60842: PUSH
60843: LD_INT 4
60845: PLUS
60846: PUSH
60847: LD_INT 5
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: LIST
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: ST_TO_ADDR
// end ; 2 :
60862: GO 61421
60864: LD_INT 2
60866: DOUBLE
60867: EQUAL
60868: IFTRUE 60872
60870: GO 61001
60872: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60873: LD_ADDR_VAR 0 5
60877: PUSH
60878: LD_VAR 0 1
60882: PUSH
60883: LD_VAR 0 2
60887: PUSH
60888: LD_INT 3
60890: MINUS
60891: PUSH
60892: LD_INT 3
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: LIST
60899: PUSH
60900: LD_VAR 0 1
60904: PUSH
60905: LD_INT 4
60907: PLUS
60908: PUSH
60909: LD_VAR 0 2
60913: PUSH
60914: LD_INT 4
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: LIST
60921: PUSH
60922: LD_VAR 0 1
60926: PUSH
60927: LD_VAR 0 2
60931: PUSH
60932: LD_INT 4
60934: PLUS
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: LIST
60943: PUSH
60944: LD_VAR 0 1
60948: PUSH
60949: LD_INT 3
60951: MINUS
60952: PUSH
60953: LD_VAR 0 2
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: LIST
60965: PUSH
60966: LD_VAR 0 1
60970: PUSH
60971: LD_INT 4
60973: MINUS
60974: PUSH
60975: LD_VAR 0 2
60979: PUSH
60980: LD_INT 4
60982: MINUS
60983: PUSH
60984: LD_INT 2
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: LIST
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: ST_TO_ADDR
// end ; 3 :
60999: GO 61421
61001: LD_INT 3
61003: DOUBLE
61004: EQUAL
61005: IFTRUE 61009
61007: GO 61142
61009: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61010: LD_ADDR_VAR 0 5
61014: PUSH
61015: LD_VAR 0 1
61019: PUSH
61020: LD_INT 3
61022: PLUS
61023: PUSH
61024: LD_VAR 0 2
61028: PUSH
61029: LD_INT 4
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: LIST
61036: PUSH
61037: LD_VAR 0 1
61041: PUSH
61042: LD_INT 4
61044: PLUS
61045: PUSH
61046: LD_VAR 0 2
61050: PUSH
61051: LD_INT 4
61053: PLUS
61054: PUSH
61055: LD_INT 5
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: LIST
61062: PUSH
61063: LD_VAR 0 1
61067: PUSH
61068: LD_INT 4
61070: MINUS
61071: PUSH
61072: LD_VAR 0 2
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: LIST
61084: PUSH
61085: LD_VAR 0 1
61089: PUSH
61090: LD_VAR 0 2
61094: PUSH
61095: LD_INT 4
61097: MINUS
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: LIST
61106: PUSH
61107: LD_VAR 0 1
61111: PUSH
61112: LD_INT 3
61114: MINUS
61115: PUSH
61116: LD_VAR 0 2
61120: PUSH
61121: LD_INT 3
61123: MINUS
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: LIST
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: ST_TO_ADDR
// end ; 4 :
61140: GO 61421
61142: LD_INT 4
61144: DOUBLE
61145: EQUAL
61146: IFTRUE 61150
61148: GO 61283
61150: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61151: LD_ADDR_VAR 0 5
61155: PUSH
61156: LD_VAR 0 1
61160: PUSH
61161: LD_VAR 0 2
61165: PUSH
61166: LD_INT 4
61168: PLUS
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: LIST
61177: PUSH
61178: LD_VAR 0 1
61182: PUSH
61183: LD_INT 3
61185: PLUS
61186: PUSH
61187: LD_VAR 0 2
61191: PUSH
61192: LD_INT 3
61194: PLUS
61195: PUSH
61196: LD_INT 5
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: LIST
61203: PUSH
61204: LD_VAR 0 1
61208: PUSH
61209: LD_INT 4
61211: PLUS
61212: PUSH
61213: LD_VAR 0 2
61217: PUSH
61218: LD_INT 4
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: LIST
61225: PUSH
61226: LD_VAR 0 1
61230: PUSH
61231: LD_VAR 0 2
61235: PUSH
61236: LD_INT 3
61238: MINUS
61239: PUSH
61240: LD_INT 3
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: LIST
61247: PUSH
61248: LD_VAR 0 1
61252: PUSH
61253: LD_INT 4
61255: MINUS
61256: PUSH
61257: LD_VAR 0 2
61261: PUSH
61262: LD_INT 4
61264: MINUS
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: LIST
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: ST_TO_ADDR
// end ; 5 :
61281: GO 61421
61283: LD_INT 5
61285: DOUBLE
61286: EQUAL
61287: IFTRUE 61291
61289: GO 61420
61291: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61292: LD_ADDR_VAR 0 5
61296: PUSH
61297: LD_VAR 0 1
61301: PUSH
61302: LD_INT 4
61304: MINUS
61305: PUSH
61306: LD_VAR 0 2
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: LIST
61318: PUSH
61319: LD_VAR 0 1
61323: PUSH
61324: LD_VAR 0 2
61328: PUSH
61329: LD_INT 4
61331: MINUS
61332: PUSH
61333: LD_INT 3
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: LIST
61340: PUSH
61341: LD_VAR 0 1
61345: PUSH
61346: LD_INT 4
61348: PLUS
61349: PUSH
61350: LD_VAR 0 2
61354: PUSH
61355: LD_INT 4
61357: PLUS
61358: PUSH
61359: LD_INT 5
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: LIST
61366: PUSH
61367: LD_VAR 0 1
61371: PUSH
61372: LD_INT 3
61374: PLUS
61375: PUSH
61376: LD_VAR 0 2
61380: PUSH
61381: LD_INT 4
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: LIST
61388: PUSH
61389: LD_VAR 0 1
61393: PUSH
61394: LD_VAR 0 2
61398: PUSH
61399: LD_INT 3
61401: PLUS
61402: PUSH
61403: LD_INT 0
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: LIST
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: ST_TO_ADDR
// end ; end ;
61418: GO 61421
61420: POP
// result := list ;
61421: LD_ADDR_VAR 0 4
61425: PUSH
61426: LD_VAR 0 5
61430: ST_TO_ADDR
// end ;
61431: LD_VAR 0 4
61435: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61436: LD_INT 0
61438: PPUSH
61439: PPUSH
61440: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61441: LD_VAR 0 1
61445: NOT
61446: PUSH
61447: LD_VAR 0 2
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: LD_INT 2
61457: PUSH
61458: LD_INT 3
61460: PUSH
61461: LD_INT 4
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: IN
61470: NOT
61471: OR
61472: IFFALSE 61476
// exit ;
61474: GO 61568
// tmp := [ ] ;
61476: LD_ADDR_VAR 0 5
61480: PUSH
61481: EMPTY
61482: ST_TO_ADDR
// for i in units do
61483: LD_ADDR_VAR 0 4
61487: PUSH
61488: LD_VAR 0 1
61492: PUSH
61493: FOR_IN
61494: IFFALSE 61537
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61496: LD_ADDR_VAR 0 5
61500: PUSH
61501: LD_VAR 0 5
61505: PPUSH
61506: LD_VAR 0 5
61510: PUSH
61511: LD_INT 1
61513: PLUS
61514: PPUSH
61515: LD_VAR 0 4
61519: PPUSH
61520: LD_VAR 0 2
61524: PPUSH
61525: CALL_OW 259
61529: PPUSH
61530: CALL_OW 2
61534: ST_TO_ADDR
61535: GO 61493
61537: POP
61538: POP
// if not tmp then
61539: LD_VAR 0 5
61543: NOT
61544: IFFALSE 61548
// exit ;
61546: GO 61568
// result := SortListByListDesc ( units , tmp ) ;
61548: LD_ADDR_VAR 0 3
61552: PUSH
61553: LD_VAR 0 1
61557: PPUSH
61558: LD_VAR 0 5
61562: PPUSH
61563: CALL_OW 77
61567: ST_TO_ADDR
// end ;
61568: LD_VAR 0 3
61572: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61573: LD_INT 0
61575: PPUSH
61576: PPUSH
61577: PPUSH
// result := false ;
61578: LD_ADDR_VAR 0 3
61582: PUSH
61583: LD_INT 0
61585: ST_TO_ADDR
// x := GetX ( building ) ;
61586: LD_ADDR_VAR 0 4
61590: PUSH
61591: LD_VAR 0 2
61595: PPUSH
61596: CALL_OW 250
61600: ST_TO_ADDR
// y := GetY ( building ) ;
61601: LD_ADDR_VAR 0 5
61605: PUSH
61606: LD_VAR 0 2
61610: PPUSH
61611: CALL_OW 251
61615: ST_TO_ADDR
// if not building or not x or not y then
61616: LD_VAR 0 2
61620: NOT
61621: PUSH
61622: LD_VAR 0 4
61626: NOT
61627: OR
61628: PUSH
61629: LD_VAR 0 5
61633: NOT
61634: OR
61635: IFFALSE 61639
// exit ;
61637: GO 61731
// if GetTaskList ( unit ) then
61639: LD_VAR 0 1
61643: PPUSH
61644: CALL_OW 437
61648: IFFALSE 61731
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61650: LD_STRING e
61652: PUSH
61653: LD_VAR 0 1
61657: PPUSH
61658: CALL_OW 437
61662: PUSH
61663: LD_INT 1
61665: ARRAY
61666: PUSH
61667: LD_INT 1
61669: ARRAY
61670: EQUAL
61671: PUSH
61672: LD_VAR 0 4
61676: PUSH
61677: LD_VAR 0 1
61681: PPUSH
61682: CALL_OW 437
61686: PUSH
61687: LD_INT 1
61689: ARRAY
61690: PUSH
61691: LD_INT 2
61693: ARRAY
61694: EQUAL
61695: AND
61696: PUSH
61697: LD_VAR 0 5
61701: PUSH
61702: LD_VAR 0 1
61706: PPUSH
61707: CALL_OW 437
61711: PUSH
61712: LD_INT 1
61714: ARRAY
61715: PUSH
61716: LD_INT 3
61718: ARRAY
61719: EQUAL
61720: AND
61721: IFFALSE 61731
// result := true end ;
61723: LD_ADDR_VAR 0 3
61727: PUSH
61728: LD_INT 1
61730: ST_TO_ADDR
// end ;
61731: LD_VAR 0 3
61735: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61736: LD_INT 0
61738: PPUSH
// result := false ;
61739: LD_ADDR_VAR 0 4
61743: PUSH
61744: LD_INT 0
61746: ST_TO_ADDR
// if GetTaskList ( unit ) then
61747: LD_VAR 0 1
61751: PPUSH
61752: CALL_OW 437
61756: IFFALSE 61839
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61758: LD_STRING M
61760: PUSH
61761: LD_VAR 0 1
61765: PPUSH
61766: CALL_OW 437
61770: PUSH
61771: LD_INT 1
61773: ARRAY
61774: PUSH
61775: LD_INT 1
61777: ARRAY
61778: EQUAL
61779: PUSH
61780: LD_VAR 0 2
61784: PUSH
61785: LD_VAR 0 1
61789: PPUSH
61790: CALL_OW 437
61794: PUSH
61795: LD_INT 1
61797: ARRAY
61798: PUSH
61799: LD_INT 2
61801: ARRAY
61802: EQUAL
61803: AND
61804: PUSH
61805: LD_VAR 0 3
61809: PUSH
61810: LD_VAR 0 1
61814: PPUSH
61815: CALL_OW 437
61819: PUSH
61820: LD_INT 1
61822: ARRAY
61823: PUSH
61824: LD_INT 3
61826: ARRAY
61827: EQUAL
61828: AND
61829: IFFALSE 61839
// result := true ;
61831: LD_ADDR_VAR 0 4
61835: PUSH
61836: LD_INT 1
61838: ST_TO_ADDR
// end ; end ;
61839: LD_VAR 0 4
61843: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61844: LD_INT 0
61846: PPUSH
61847: PPUSH
61848: PPUSH
61849: PPUSH
// if not unit or not area then
61850: LD_VAR 0 1
61854: NOT
61855: PUSH
61856: LD_VAR 0 2
61860: NOT
61861: OR
61862: IFFALSE 61866
// exit ;
61864: GO 62030
// tmp := AreaToList ( area , i ) ;
61866: LD_ADDR_VAR 0 6
61870: PUSH
61871: LD_VAR 0 2
61875: PPUSH
61876: LD_VAR 0 5
61880: PPUSH
61881: CALL_OW 517
61885: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61886: LD_ADDR_VAR 0 5
61890: PUSH
61891: DOUBLE
61892: LD_INT 1
61894: DEC
61895: ST_TO_ADDR
61896: LD_VAR 0 6
61900: PUSH
61901: LD_INT 1
61903: ARRAY
61904: PUSH
61905: FOR_TO
61906: IFFALSE 62028
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61908: LD_ADDR_VAR 0 7
61912: PUSH
61913: LD_VAR 0 6
61917: PUSH
61918: LD_INT 1
61920: ARRAY
61921: PUSH
61922: LD_VAR 0 5
61926: ARRAY
61927: PUSH
61928: LD_VAR 0 6
61932: PUSH
61933: LD_INT 2
61935: ARRAY
61936: PUSH
61937: LD_VAR 0 5
61941: ARRAY
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61947: LD_VAR 0 7
61951: PUSH
61952: LD_INT 1
61954: ARRAY
61955: PPUSH
61956: LD_VAR 0 7
61960: PUSH
61961: LD_INT 2
61963: ARRAY
61964: PPUSH
61965: CALL_OW 428
61969: PUSH
61970: LD_INT 0
61972: EQUAL
61973: IFFALSE 62026
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61975: LD_VAR 0 1
61979: PPUSH
61980: LD_VAR 0 7
61984: PUSH
61985: LD_INT 1
61987: ARRAY
61988: PPUSH
61989: LD_VAR 0 7
61993: PUSH
61994: LD_INT 2
61996: ARRAY
61997: PPUSH
61998: LD_VAR 0 3
62002: PPUSH
62003: CALL_OW 48
// result := IsPlaced ( unit ) ;
62007: LD_ADDR_VAR 0 4
62011: PUSH
62012: LD_VAR 0 1
62016: PPUSH
62017: CALL_OW 305
62021: ST_TO_ADDR
// exit ;
62022: POP
62023: POP
62024: GO 62030
// end ; end ;
62026: GO 61905
62028: POP
62029: POP
// end ;
62030: LD_VAR 0 4
62034: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62035: LD_INT 0
62037: PPUSH
62038: PPUSH
62039: PPUSH
// if not side or side > 8 then
62040: LD_VAR 0 1
62044: NOT
62045: PUSH
62046: LD_VAR 0 1
62050: PUSH
62051: LD_INT 8
62053: GREATER
62054: OR
62055: IFFALSE 62059
// exit ;
62057: GO 62246
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62059: LD_ADDR_VAR 0 4
62063: PUSH
62064: LD_INT 22
62066: PUSH
62067: LD_VAR 0 1
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 21
62078: PUSH
62079: LD_INT 3
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PPUSH
62090: CALL_OW 69
62094: ST_TO_ADDR
// if not tmp then
62095: LD_VAR 0 4
62099: NOT
62100: IFFALSE 62104
// exit ;
62102: GO 62246
// enable_addtolog := true ;
62104: LD_ADDR_OWVAR 81
62108: PUSH
62109: LD_INT 1
62111: ST_TO_ADDR
// AddToLog ( [ ) ;
62112: LD_STRING [
62114: PPUSH
62115: CALL_OW 561
// for i in tmp do
62119: LD_ADDR_VAR 0 3
62123: PUSH
62124: LD_VAR 0 4
62128: PUSH
62129: FOR_IN
62130: IFFALSE 62237
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62132: LD_STRING [
62134: PUSH
62135: LD_VAR 0 3
62139: PPUSH
62140: CALL_OW 266
62144: STR
62145: PUSH
62146: LD_STRING , 
62148: STR
62149: PUSH
62150: LD_VAR 0 3
62154: PPUSH
62155: CALL_OW 250
62159: STR
62160: PUSH
62161: LD_STRING , 
62163: STR
62164: PUSH
62165: LD_VAR 0 3
62169: PPUSH
62170: CALL_OW 251
62174: STR
62175: PUSH
62176: LD_STRING , 
62178: STR
62179: PUSH
62180: LD_VAR 0 3
62184: PPUSH
62185: CALL_OW 254
62189: STR
62190: PUSH
62191: LD_STRING , 
62193: STR
62194: PUSH
62195: LD_VAR 0 3
62199: PPUSH
62200: LD_INT 1
62202: PPUSH
62203: CALL_OW 268
62207: STR
62208: PUSH
62209: LD_STRING , 
62211: STR
62212: PUSH
62213: LD_VAR 0 3
62217: PPUSH
62218: LD_INT 2
62220: PPUSH
62221: CALL_OW 268
62225: STR
62226: PUSH
62227: LD_STRING ],
62229: STR
62230: PPUSH
62231: CALL_OW 561
// end ;
62235: GO 62129
62237: POP
62238: POP
// AddToLog ( ]; ) ;
62239: LD_STRING ];
62241: PPUSH
62242: CALL_OW 561
// end ;
62246: LD_VAR 0 2
62250: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62251: LD_INT 0
62253: PPUSH
62254: PPUSH
62255: PPUSH
62256: PPUSH
62257: PPUSH
// if not area or not rate or not max then
62258: LD_VAR 0 1
62262: NOT
62263: PUSH
62264: LD_VAR 0 2
62268: NOT
62269: OR
62270: PUSH
62271: LD_VAR 0 4
62275: NOT
62276: OR
62277: IFFALSE 62281
// exit ;
62279: GO 62473
// while 1 do
62281: LD_INT 1
62283: IFFALSE 62473
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62285: LD_ADDR_VAR 0 9
62289: PUSH
62290: LD_VAR 0 1
62294: PPUSH
62295: LD_INT 1
62297: PPUSH
62298: CALL_OW 287
62302: PUSH
62303: LD_INT 10
62305: MUL
62306: ST_TO_ADDR
// r := rate / 10 ;
62307: LD_ADDR_VAR 0 7
62311: PUSH
62312: LD_VAR 0 2
62316: PUSH
62317: LD_INT 10
62319: DIVREAL
62320: ST_TO_ADDR
// time := 1 1$00 ;
62321: LD_ADDR_VAR 0 8
62325: PUSH
62326: LD_INT 2100
62328: ST_TO_ADDR
// if amount < min then
62329: LD_VAR 0 9
62333: PUSH
62334: LD_VAR 0 3
62338: LESS
62339: IFFALSE 62357
// r := r * 2 else
62341: LD_ADDR_VAR 0 7
62345: PUSH
62346: LD_VAR 0 7
62350: PUSH
62351: LD_INT 2
62353: MUL
62354: ST_TO_ADDR
62355: GO 62383
// if amount > max then
62357: LD_VAR 0 9
62361: PUSH
62362: LD_VAR 0 4
62366: GREATER
62367: IFFALSE 62383
// r := r / 2 ;
62369: LD_ADDR_VAR 0 7
62373: PUSH
62374: LD_VAR 0 7
62378: PUSH
62379: LD_INT 2
62381: DIVREAL
62382: ST_TO_ADDR
// time := time / r ;
62383: LD_ADDR_VAR 0 8
62387: PUSH
62388: LD_VAR 0 8
62392: PUSH
62393: LD_VAR 0 7
62397: DIVREAL
62398: ST_TO_ADDR
// if time < 0 then
62399: LD_VAR 0 8
62403: PUSH
62404: LD_INT 0
62406: LESS
62407: IFFALSE 62424
// time := time * - 1 ;
62409: LD_ADDR_VAR 0 8
62413: PUSH
62414: LD_VAR 0 8
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: MUL
62423: ST_TO_ADDR
// wait ( time ) ;
62424: LD_VAR 0 8
62428: PPUSH
62429: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62433: LD_INT 35
62435: PPUSH
62436: LD_INT 875
62438: PPUSH
62439: CALL_OW 12
62443: PPUSH
62444: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62448: LD_INT 1
62450: PPUSH
62451: LD_INT 5
62453: PPUSH
62454: CALL_OW 12
62458: PPUSH
62459: LD_VAR 0 1
62463: PPUSH
62464: LD_INT 1
62466: PPUSH
62467: CALL_OW 55
// end ;
62471: GO 62281
// end ;
62473: LD_VAR 0 5
62477: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62478: LD_INT 0
62480: PPUSH
62481: PPUSH
62482: PPUSH
62483: PPUSH
62484: PPUSH
62485: PPUSH
62486: PPUSH
62487: PPUSH
// if not turrets or not factories then
62488: LD_VAR 0 1
62492: NOT
62493: PUSH
62494: LD_VAR 0 2
62498: NOT
62499: OR
62500: IFFALSE 62504
// exit ;
62502: GO 62811
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62504: LD_ADDR_VAR 0 10
62508: PUSH
62509: LD_INT 5
62511: PUSH
62512: LD_INT 6
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 2
62521: PUSH
62522: LD_INT 4
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 3
62531: PUSH
62532: LD_INT 5
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 24
62546: PUSH
62547: LD_INT 25
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 23
62556: PUSH
62557: LD_INT 27
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 42
62570: PUSH
62571: LD_INT 43
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 44
62580: PUSH
62581: LD_INT 46
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 45
62590: PUSH
62591: LD_INT 47
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: LIST
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: LIST
62607: ST_TO_ADDR
// result := [ ] ;
62608: LD_ADDR_VAR 0 3
62612: PUSH
62613: EMPTY
62614: ST_TO_ADDR
// for i in turrets do
62615: LD_ADDR_VAR 0 4
62619: PUSH
62620: LD_VAR 0 1
62624: PUSH
62625: FOR_IN
62626: IFFALSE 62809
// begin nat := GetNation ( i ) ;
62628: LD_ADDR_VAR 0 7
62632: PUSH
62633: LD_VAR 0 4
62637: PPUSH
62638: CALL_OW 248
62642: ST_TO_ADDR
// weapon := 0 ;
62643: LD_ADDR_VAR 0 8
62647: PUSH
62648: LD_INT 0
62650: ST_TO_ADDR
// if not nat then
62651: LD_VAR 0 7
62655: NOT
62656: IFFALSE 62660
// continue ;
62658: GO 62625
// for j in list [ nat ] do
62660: LD_ADDR_VAR 0 5
62664: PUSH
62665: LD_VAR 0 10
62669: PUSH
62670: LD_VAR 0 7
62674: ARRAY
62675: PUSH
62676: FOR_IN
62677: IFFALSE 62718
// if GetBWeapon ( i ) = j [ 1 ] then
62679: LD_VAR 0 4
62683: PPUSH
62684: CALL_OW 269
62688: PUSH
62689: LD_VAR 0 5
62693: PUSH
62694: LD_INT 1
62696: ARRAY
62697: EQUAL
62698: IFFALSE 62716
// begin weapon := j [ 2 ] ;
62700: LD_ADDR_VAR 0 8
62704: PUSH
62705: LD_VAR 0 5
62709: PUSH
62710: LD_INT 2
62712: ARRAY
62713: ST_TO_ADDR
// break ;
62714: GO 62718
// end ;
62716: GO 62676
62718: POP
62719: POP
// if not weapon then
62720: LD_VAR 0 8
62724: NOT
62725: IFFALSE 62729
// continue ;
62727: GO 62625
// for k in factories do
62729: LD_ADDR_VAR 0 6
62733: PUSH
62734: LD_VAR 0 2
62738: PUSH
62739: FOR_IN
62740: IFFALSE 62805
// begin weapons := AvailableWeaponList ( k ) ;
62742: LD_ADDR_VAR 0 9
62746: PUSH
62747: LD_VAR 0 6
62751: PPUSH
62752: CALL_OW 478
62756: ST_TO_ADDR
// if not weapons then
62757: LD_VAR 0 9
62761: NOT
62762: IFFALSE 62766
// continue ;
62764: GO 62739
// if weapon in weapons then
62766: LD_VAR 0 8
62770: PUSH
62771: LD_VAR 0 9
62775: IN
62776: IFFALSE 62803
// begin result := [ i , weapon ] ;
62778: LD_ADDR_VAR 0 3
62782: PUSH
62783: LD_VAR 0 4
62787: PUSH
62788: LD_VAR 0 8
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: ST_TO_ADDR
// exit ;
62797: POP
62798: POP
62799: POP
62800: POP
62801: GO 62811
// end ; end ;
62803: GO 62739
62805: POP
62806: POP
// end ;
62807: GO 62625
62809: POP
62810: POP
// end ;
62811: LD_VAR 0 3
62815: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62816: LD_INT 0
62818: PPUSH
// if not side or side > 8 then
62819: LD_VAR 0 3
62823: NOT
62824: PUSH
62825: LD_VAR 0 3
62829: PUSH
62830: LD_INT 8
62832: GREATER
62833: OR
62834: IFFALSE 62838
// exit ;
62836: GO 62897
// if not range then
62838: LD_VAR 0 4
62842: NOT
62843: IFFALSE 62854
// range := - 12 ;
62845: LD_ADDR_VAR 0 4
62849: PUSH
62850: LD_INT 12
62852: NEG
62853: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62854: LD_VAR 0 1
62858: PPUSH
62859: LD_VAR 0 2
62863: PPUSH
62864: LD_VAR 0 3
62868: PPUSH
62869: LD_VAR 0 4
62873: PPUSH
62874: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62878: LD_VAR 0 1
62882: PPUSH
62883: LD_VAR 0 2
62887: PPUSH
62888: LD_VAR 0 3
62892: PPUSH
62893: CALL_OW 331
// end ;
62897: LD_VAR 0 5
62901: RET
// export function Video ( mode ) ; begin
62902: LD_INT 0
62904: PPUSH
// ingame_video = mode ;
62905: LD_ADDR_OWVAR 52
62909: PUSH
62910: LD_VAR 0 1
62914: ST_TO_ADDR
// interface_hidden = mode ;
62915: LD_ADDR_OWVAR 54
62919: PUSH
62920: LD_VAR 0 1
62924: ST_TO_ADDR
// end ;
62925: LD_VAR 0 2
62929: RET
// export function Join ( array , element ) ; begin
62930: LD_INT 0
62932: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62933: LD_ADDR_VAR 0 3
62937: PUSH
62938: LD_VAR 0 1
62942: PPUSH
62943: LD_VAR 0 1
62947: PUSH
62948: LD_INT 1
62950: PLUS
62951: PPUSH
62952: LD_VAR 0 2
62956: PPUSH
62957: CALL_OW 1
62961: ST_TO_ADDR
// end ;
62962: LD_VAR 0 3
62966: RET
// export function JoinUnion ( array , element ) ; begin
62967: LD_INT 0
62969: PPUSH
// result := array union element ;
62970: LD_ADDR_VAR 0 3
62974: PUSH
62975: LD_VAR 0 1
62979: PUSH
62980: LD_VAR 0 2
62984: UNION
62985: ST_TO_ADDR
// end ;
62986: LD_VAR 0 3
62990: RET
// export function GetBehemoths ( side ) ; begin
62991: LD_INT 0
62993: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62994: LD_ADDR_VAR 0 2
62998: PUSH
62999: LD_INT 22
63001: PUSH
63002: LD_VAR 0 1
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 31
63013: PUSH
63014: LD_INT 25
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PPUSH
63025: CALL_OW 69
63029: ST_TO_ADDR
// end ;
63030: LD_VAR 0 2
63034: RET
// export function Shuffle ( array ) ; var i , index ; begin
63035: LD_INT 0
63037: PPUSH
63038: PPUSH
63039: PPUSH
// result := [ ] ;
63040: LD_ADDR_VAR 0 2
63044: PUSH
63045: EMPTY
63046: ST_TO_ADDR
// if not array then
63047: LD_VAR 0 1
63051: NOT
63052: IFFALSE 63056
// exit ;
63054: GO 63155
// Randomize ;
63056: CALL_OW 10
// for i = array downto 1 do
63060: LD_ADDR_VAR 0 3
63064: PUSH
63065: DOUBLE
63066: LD_VAR 0 1
63070: INC
63071: ST_TO_ADDR
63072: LD_INT 1
63074: PUSH
63075: FOR_DOWNTO
63076: IFFALSE 63153
// begin index := rand ( 1 , array ) ;
63078: LD_ADDR_VAR 0 4
63082: PUSH
63083: LD_INT 1
63085: PPUSH
63086: LD_VAR 0 1
63090: PPUSH
63091: CALL_OW 12
63095: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63096: LD_ADDR_VAR 0 2
63100: PUSH
63101: LD_VAR 0 2
63105: PPUSH
63106: LD_VAR 0 2
63110: PUSH
63111: LD_INT 1
63113: PLUS
63114: PPUSH
63115: LD_VAR 0 1
63119: PUSH
63120: LD_VAR 0 4
63124: ARRAY
63125: PPUSH
63126: CALL_OW 2
63130: ST_TO_ADDR
// array := Delete ( array , index ) ;
63131: LD_ADDR_VAR 0 1
63135: PUSH
63136: LD_VAR 0 1
63140: PPUSH
63141: LD_VAR 0 4
63145: PPUSH
63146: CALL_OW 3
63150: ST_TO_ADDR
// end ;
63151: GO 63075
63153: POP
63154: POP
// end ;
63155: LD_VAR 0 2
63159: RET
// export function GetBaseMaterials ( base ) ; begin
63160: LD_INT 0
63162: PPUSH
// result := [ 0 , 0 , 0 ] ;
63163: LD_ADDR_VAR 0 2
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: LIST
63181: ST_TO_ADDR
// if not base then
63182: LD_VAR 0 1
63186: NOT
63187: IFFALSE 63191
// exit ;
63189: GO 63240
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63191: LD_ADDR_VAR 0 2
63195: PUSH
63196: LD_VAR 0 1
63200: PPUSH
63201: LD_INT 1
63203: PPUSH
63204: CALL_OW 275
63208: PUSH
63209: LD_VAR 0 1
63213: PPUSH
63214: LD_INT 2
63216: PPUSH
63217: CALL_OW 275
63221: PUSH
63222: LD_VAR 0 1
63226: PPUSH
63227: LD_INT 3
63229: PPUSH
63230: CALL_OW 275
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: LIST
63239: ST_TO_ADDR
// end ;
63240: LD_VAR 0 2
63244: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63245: LD_INT 0
63247: PPUSH
63248: PPUSH
// result := array ;
63249: LD_ADDR_VAR 0 3
63253: PUSH
63254: LD_VAR 0 1
63258: ST_TO_ADDR
// if size > 0 then
63259: LD_VAR 0 2
63263: PUSH
63264: LD_INT 0
63266: GREATER
63267: IFFALSE 63313
// for i := array downto size do
63269: LD_ADDR_VAR 0 4
63273: PUSH
63274: DOUBLE
63275: LD_VAR 0 1
63279: INC
63280: ST_TO_ADDR
63281: LD_VAR 0 2
63285: PUSH
63286: FOR_DOWNTO
63287: IFFALSE 63311
// result := Delete ( result , result ) ;
63289: LD_ADDR_VAR 0 3
63293: PUSH
63294: LD_VAR 0 3
63298: PPUSH
63299: LD_VAR 0 3
63303: PPUSH
63304: CALL_OW 3
63308: ST_TO_ADDR
63309: GO 63286
63311: POP
63312: POP
// end ;
63313: LD_VAR 0 3
63317: RET
// export function ComExit ( unit ) ; var tmp ; begin
63318: LD_INT 0
63320: PPUSH
63321: PPUSH
// if not IsInUnit ( unit ) then
63322: LD_VAR 0 1
63326: PPUSH
63327: CALL_OW 310
63331: NOT
63332: IFFALSE 63336
// exit ;
63334: GO 63396
// tmp := IsInUnit ( unit ) ;
63336: LD_ADDR_VAR 0 3
63340: PUSH
63341: LD_VAR 0 1
63345: PPUSH
63346: CALL_OW 310
63350: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63351: LD_VAR 0 3
63355: PPUSH
63356: CALL_OW 247
63360: PUSH
63361: LD_INT 2
63363: EQUAL
63364: IFFALSE 63377
// ComExitVehicle ( unit ) else
63366: LD_VAR 0 1
63370: PPUSH
63371: CALL_OW 121
63375: GO 63386
// ComExitBuilding ( unit ) ;
63377: LD_VAR 0 1
63381: PPUSH
63382: CALL_OW 122
// result := tmp ;
63386: LD_ADDR_VAR 0 2
63390: PUSH
63391: LD_VAR 0 3
63395: ST_TO_ADDR
// end ;
63396: LD_VAR 0 2
63400: RET
// export function ResetHc ; begin
63401: LD_INT 0
63403: PPUSH
// InitHc ;
63404: CALL_OW 19
// hc_importance := 0 ;
63408: LD_ADDR_OWVAR 32
63412: PUSH
63413: LD_INT 0
63415: ST_TO_ADDR
// end ;
63416: LD_VAR 0 1
63420: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63421: LD_INT 0
63423: PPUSH
63424: PPUSH
63425: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63426: LD_ADDR_VAR 0 6
63430: PUSH
63431: LD_VAR 0 1
63435: PUSH
63436: LD_VAR 0 3
63440: PLUS
63441: PUSH
63442: LD_INT 2
63444: DIV
63445: ST_TO_ADDR
// if _x < 0 then
63446: LD_VAR 0 6
63450: PUSH
63451: LD_INT 0
63453: LESS
63454: IFFALSE 63471
// _x := _x * - 1 ;
63456: LD_ADDR_VAR 0 6
63460: PUSH
63461: LD_VAR 0 6
63465: PUSH
63466: LD_INT 1
63468: NEG
63469: MUL
63470: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63471: LD_ADDR_VAR 0 7
63475: PUSH
63476: LD_VAR 0 2
63480: PUSH
63481: LD_VAR 0 4
63485: PLUS
63486: PUSH
63487: LD_INT 2
63489: DIV
63490: ST_TO_ADDR
// if _y < 0 then
63491: LD_VAR 0 7
63495: PUSH
63496: LD_INT 0
63498: LESS
63499: IFFALSE 63516
// _y := _y * - 1 ;
63501: LD_ADDR_VAR 0 7
63505: PUSH
63506: LD_VAR 0 7
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: MUL
63515: ST_TO_ADDR
// result := [ _x , _y ] ;
63516: LD_ADDR_VAR 0 5
63520: PUSH
63521: LD_VAR 0 6
63525: PUSH
63526: LD_VAR 0 7
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: ST_TO_ADDR
// end ;
63535: LD_VAR 0 5
63539: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63540: LD_INT 0
63542: PPUSH
63543: PPUSH
63544: PPUSH
63545: PPUSH
// task := GetTaskList ( unit ) ;
63546: LD_ADDR_VAR 0 7
63550: PUSH
63551: LD_VAR 0 1
63555: PPUSH
63556: CALL_OW 437
63560: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63561: LD_VAR 0 7
63565: NOT
63566: PUSH
63567: LD_VAR 0 1
63571: PPUSH
63572: LD_VAR 0 2
63576: PPUSH
63577: CALL_OW 308
63581: NOT
63582: AND
63583: IFFALSE 63587
// exit ;
63585: GO 63705
// if IsInArea ( unit , area ) then
63587: LD_VAR 0 1
63591: PPUSH
63592: LD_VAR 0 2
63596: PPUSH
63597: CALL_OW 308
63601: IFFALSE 63619
// begin ComMoveToArea ( unit , goAway ) ;
63603: LD_VAR 0 1
63607: PPUSH
63608: LD_VAR 0 3
63612: PPUSH
63613: CALL_OW 113
// exit ;
63617: GO 63705
// end ; if task [ 1 ] [ 1 ] <> M then
63619: LD_VAR 0 7
63623: PUSH
63624: LD_INT 1
63626: ARRAY
63627: PUSH
63628: LD_INT 1
63630: ARRAY
63631: PUSH
63632: LD_STRING M
63634: NONEQUAL
63635: IFFALSE 63639
// exit ;
63637: GO 63705
// x := task [ 1 ] [ 2 ] ;
63639: LD_ADDR_VAR 0 5
63643: PUSH
63644: LD_VAR 0 7
63648: PUSH
63649: LD_INT 1
63651: ARRAY
63652: PUSH
63653: LD_INT 2
63655: ARRAY
63656: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63657: LD_ADDR_VAR 0 6
63661: PUSH
63662: LD_VAR 0 7
63666: PUSH
63667: LD_INT 1
63669: ARRAY
63670: PUSH
63671: LD_INT 3
63673: ARRAY
63674: ST_TO_ADDR
// if InArea ( x , y , area ) then
63675: LD_VAR 0 5
63679: PPUSH
63680: LD_VAR 0 6
63684: PPUSH
63685: LD_VAR 0 2
63689: PPUSH
63690: CALL_OW 309
63694: IFFALSE 63705
// ComStop ( unit ) ;
63696: LD_VAR 0 1
63700: PPUSH
63701: CALL_OW 141
// end ;
63705: LD_VAR 0 4
63709: RET
// export function Abs ( value ) ; begin
63710: LD_INT 0
63712: PPUSH
// result := value ;
63713: LD_ADDR_VAR 0 2
63717: PUSH
63718: LD_VAR 0 1
63722: ST_TO_ADDR
// if value < 0 then
63723: LD_VAR 0 1
63727: PUSH
63728: LD_INT 0
63730: LESS
63731: IFFALSE 63748
// result := value * - 1 ;
63733: LD_ADDR_VAR 0 2
63737: PUSH
63738: LD_VAR 0 1
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: MUL
63747: ST_TO_ADDR
// end ;
63748: LD_VAR 0 2
63752: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63753: LD_INT 0
63755: PPUSH
63756: PPUSH
63757: PPUSH
63758: PPUSH
63759: PPUSH
63760: PPUSH
63761: PPUSH
63762: PPUSH
// if not unit or not building then
63763: LD_VAR 0 1
63767: NOT
63768: PUSH
63769: LD_VAR 0 2
63773: NOT
63774: OR
63775: IFFALSE 63779
// exit ;
63777: GO 64005
// x := GetX ( building ) ;
63779: LD_ADDR_VAR 0 4
63783: PUSH
63784: LD_VAR 0 2
63788: PPUSH
63789: CALL_OW 250
63793: ST_TO_ADDR
// y := GetY ( building ) ;
63794: LD_ADDR_VAR 0 6
63798: PUSH
63799: LD_VAR 0 2
63803: PPUSH
63804: CALL_OW 251
63808: ST_TO_ADDR
// d := GetDir ( building ) ;
63809: LD_ADDR_VAR 0 8
63813: PUSH
63814: LD_VAR 0 2
63818: PPUSH
63819: CALL_OW 254
63823: ST_TO_ADDR
// r := 4 ;
63824: LD_ADDR_VAR 0 9
63828: PUSH
63829: LD_INT 4
63831: ST_TO_ADDR
// for i := 1 to 5 do
63832: LD_ADDR_VAR 0 10
63836: PUSH
63837: DOUBLE
63838: LD_INT 1
63840: DEC
63841: ST_TO_ADDR
63842: LD_INT 5
63844: PUSH
63845: FOR_TO
63846: IFFALSE 64003
// begin _x := ShiftX ( x , d , r + i ) ;
63848: LD_ADDR_VAR 0 5
63852: PUSH
63853: LD_VAR 0 4
63857: PPUSH
63858: LD_VAR 0 8
63862: PPUSH
63863: LD_VAR 0 9
63867: PUSH
63868: LD_VAR 0 10
63872: PLUS
63873: PPUSH
63874: CALL_OW 272
63878: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63879: LD_ADDR_VAR 0 7
63883: PUSH
63884: LD_VAR 0 6
63888: PPUSH
63889: LD_VAR 0 8
63893: PPUSH
63894: LD_VAR 0 9
63898: PUSH
63899: LD_VAR 0 10
63903: PLUS
63904: PPUSH
63905: CALL_OW 273
63909: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63910: LD_VAR 0 5
63914: PPUSH
63915: LD_VAR 0 7
63919: PPUSH
63920: CALL_OW 488
63924: PUSH
63925: LD_VAR 0 5
63929: PPUSH
63930: LD_VAR 0 7
63934: PPUSH
63935: CALL_OW 428
63939: PPUSH
63940: CALL_OW 247
63944: PUSH
63945: LD_INT 3
63947: PUSH
63948: LD_INT 2
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: IN
63955: NOT
63956: AND
63957: IFFALSE 64001
// begin ComMoveXY ( unit , _x , _y ) ;
63959: LD_VAR 0 1
63963: PPUSH
63964: LD_VAR 0 5
63968: PPUSH
63969: LD_VAR 0 7
63973: PPUSH
63974: CALL_OW 111
// result := [ _x , _y ] ;
63978: LD_ADDR_VAR 0 3
63982: PUSH
63983: LD_VAR 0 5
63987: PUSH
63988: LD_VAR 0 7
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: ST_TO_ADDR
// exit ;
63997: POP
63998: POP
63999: GO 64005
// end ; end ;
64001: GO 63845
64003: POP
64004: POP
// end ; end_of_file
64005: LD_VAR 0 3
64009: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
64010: LD_INT 0
64012: PPUSH
// ar_miner := 81 ;
64013: LD_ADDR_EXP 115
64017: PUSH
64018: LD_INT 81
64020: ST_TO_ADDR
// ar_crane := 88 ;
64021: LD_ADDR_EXP 114
64025: PUSH
64026: LD_INT 88
64028: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
64029: LD_ADDR_EXP 109
64033: PUSH
64034: LD_INT 89
64036: ST_TO_ADDR
// us_hack := 99 ;
64037: LD_ADDR_EXP 110
64041: PUSH
64042: LD_INT 99
64044: ST_TO_ADDR
// us_artillery := 97 ;
64045: LD_ADDR_EXP 111
64049: PUSH
64050: LD_INT 97
64052: ST_TO_ADDR
// ar_bio_bomb := 91 ;
64053: LD_ADDR_EXP 112
64057: PUSH
64058: LD_INT 91
64060: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
64061: LD_ADDR_EXP 113
64065: PUSH
64066: LD_INT 92
64068: ST_TO_ADDR
// ru_radar := 98 ;
64069: LD_ADDR_EXP 108
64073: PUSH
64074: LD_INT 98
64076: ST_TO_ADDR
// tech_Artillery := 80 ;
64077: LD_ADDR_EXP 116
64081: PUSH
64082: LD_INT 80
64084: ST_TO_ADDR
// tech_RadMat := 81 ;
64085: LD_ADDR_EXP 117
64089: PUSH
64090: LD_INT 81
64092: ST_TO_ADDR
// tech_BasicTools := 82 ;
64093: LD_ADDR_EXP 118
64097: PUSH
64098: LD_INT 82
64100: ST_TO_ADDR
// tech_Cargo := 83 ;
64101: LD_ADDR_EXP 119
64105: PUSH
64106: LD_INT 83
64108: ST_TO_ADDR
// tech_Track := 84 ;
64109: LD_ADDR_EXP 120
64113: PUSH
64114: LD_INT 84
64116: ST_TO_ADDR
// tech_Crane := 85 ;
64117: LD_ADDR_EXP 121
64121: PUSH
64122: LD_INT 85
64124: ST_TO_ADDR
// tech_Bulldozer := 86 ;
64125: LD_ADDR_EXP 122
64129: PUSH
64130: LD_INT 86
64132: ST_TO_ADDR
// tech_Hovercraft := 87 ;
64133: LD_ADDR_EXP 123
64137: PUSH
64138: LD_INT 87
64140: ST_TO_ADDR
// end ;
64141: LD_VAR 0 1
64145: RET
// every 1 do
64146: GO 64148
64148: DISABLE
// InitGlobalVariables ;
64149: CALL 64010 0 0
64153: END
