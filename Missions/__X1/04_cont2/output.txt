// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 2244 0 0
// PrepareArabian ;
  23: CALL 1234 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5868 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_OWVAR 67
 672: ARRAY
 673: PPUSH
 674: CALL 504 0 2
// for i := 1 to 2 do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_INT 2
 690: PUSH
 691: FOR_TO
 692: IFFALSE 729
// begin hc_class := 21 ;
 694: LD_ADDR_OWVAR 28
 698: PUSH
 699: LD_INT 21
 701: ST_TO_ADDR
// hc_gallery :=  ;
 702: LD_ADDR_OWVAR 33
 706: PUSH
 707: LD_STRING 
 709: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 691
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 782
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end ;
 780: GO 744
 782: POP
 783: POP
// for i := 1 to 2 do
 784: LD_ADDR_VAR 0 3
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 2
 796: PUSH
 797: FOR_TO
 798: IFFALSE 835
// begin hc_class := 13 ;
 800: LD_ADDR_OWVAR 28
 804: PUSH
 805: LD_INT 13
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 816: CALL_OW 44
 820: PPUSH
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 49
// end ;
 833: GO 797
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 2
 841: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
// if not observer or not unit then
 847: LD_VAR 0 1
 851: NOT
 852: PUSH
 853: LD_VAR 0 2
 857: NOT
 858: OR
 859: IFFALSE 863
// exit ;
 861: GO 911
// if not See ( GetSide ( observer ) , unit ) then
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 292
 882: NOT
 883: IFFALSE 887
// exit ;
 885: GO 911
// result := GetDistUnits ( observer , unit ) < 12 ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 296
 906: PUSH
 907: LD_INT 12
 909: LESS
 910: ST_TO_ADDR
// end ;
 911: LD_VAR 0 3
 915: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 916: LD_INT 0
 918: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: CALL_OW 488
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ;
1003: LD_VAR 0 4
1007: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
1014: PPUSH
// if not unit then
1015: LD_VAR 0 1
1019: NOT
1020: IFFALSE 1024
// exit ;
1022: GO 1229
// side := GetSide ( unit ) ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 255
1038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_VAR 0 4
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_VAR 0 2
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 69
1076: ST_TO_ADDR
// if not tmp then
1077: LD_VAR 0 5
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1229
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 5
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 35913 0 4
1111: ST_TO_ADDR
// places := 1 ;
1112: LD_ADDR_VAR 0 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 7
1148: PUSH
1149: LD_INT 8
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1173
// places := 6 ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// for i in tmp do
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: LD_VAR 0 5
1182: PUSH
1183: FOR_IN
1184: IFFALSE 1227
// begin if UnitsInside ( i ) - places <= 0 then
1186: LD_VAR 0 6
1190: PPUSH
1191: CALL_OW 313
1195: PUSH
1196: LD_VAR 0 7
1200: MINUS
1201: PUSH
1202: LD_INT 0
1204: LESSEQUAL
1205: IFFALSE 1211
// continue else
1207: GO 1183
1209: GO 1225
// begin result := i ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_VAR 0 6
1220: ST_TO_ADDR
// exit ;
1221: POP
1222: POP
1223: GO 1229
// end ; end ;
1225: GO 1183
1227: POP
1228: POP
// end ; end_of_file
1229: LD_VAR 0 3
1233: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1234: LD_INT 0
1236: PPUSH
1237: PPUSH
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// uc_nation := 2 ;
1246: LD_ADDR_OWVAR 21
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1254: LD_ADDR_EXP 18
1258: PUSH
1259: LD_STRING Heike
1261: PPUSH
1262: LD_EXP 1
1266: NOT
1267: PPUSH
1268: LD_EXP 2
1272: PPUSH
1273: CALL 30516 0 3
1277: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1278: LD_ADDR_EXP 21
1282: PUSH
1283: LD_STRING Ibrahim
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL 30516 0 3
1301: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1302: LD_ADDR_EXP 19
1306: PUSH
1307: LD_STRING Givi
1309: PPUSH
1310: LD_EXP 1
1314: NOT
1315: PPUSH
1316: LD_EXP 2
1320: PPUSH
1321: CALL 30516 0 3
1325: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1326: LD_ADDR_EXP 22
1330: PUSH
1331: LD_STRING Kamil
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 2
1344: PPUSH
1345: CALL 30516 0 3
1349: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1350: LD_ADDR_EXP 23
1354: PUSH
1355: LD_STRING Kaia
1357: PPUSH
1358: LD_EXP 1
1362: NOT
1363: PPUSH
1364: LD_EXP 2
1368: PPUSH
1369: CALL 30516 0 3
1373: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1374: LD_ADDR_EXP 24
1378: PUSH
1379: LD_STRING Sophia
1381: PPUSH
1382: LD_EXP 1
1386: NOT
1387: PPUSH
1388: LD_EXP 2
1392: PPUSH
1393: CALL 30516 0 3
1397: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1398: LD_ADDR_EXP 25
1402: PUSH
1403: LD_STRING Markov
1405: PPUSH
1406: LD_EXP 1
1410: NOT
1411: PPUSH
1412: LD_EXP 2
1416: PPUSH
1417: CALL 30516 0 3
1421: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1422: LD_ADDR_EXP 28
1426: PUSH
1427: LD_STRING Aviradze
1429: PPUSH
1430: LD_EXP 1
1434: NOT
1435: PPUSH
1436: LD_EXP 2
1440: PPUSH
1441: CALL 30516 0 3
1445: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1446: LD_ADDR_EXP 27
1450: PUSH
1451: LD_STRING Kurt
1453: PPUSH
1454: LD_EXP 1
1458: NOT
1459: PPUSH
1460: LD_EXP 2
1464: PPUSH
1465: CALL 30516 0 3
1469: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1470: LD_ADDR_EXP 20
1474: PUSH
1475: LD_STRING Mike
1477: PPUSH
1478: LD_EXP 1
1482: NOT
1483: PPUSH
1484: LD_EXP 2
1488: PPUSH
1489: CALL 30516 0 3
1493: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1494: LD_ADDR_EXP 29
1498: PUSH
1499: LD_STRING 04_1_others
1501: PPUSH
1502: CALL_OW 31
1506: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1507: LD_ADDR_EXP 31
1511: PUSH
1512: LD_STRING 04_1_apes
1514: PPUSH
1515: CALL_OW 31
1519: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_STRING 04_1_Vehicles
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// if debug then
1535: LD_EXP 1
1539: IFFALSE 1758
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 40 , 40 ] , 1 ] ] ;
1541: LD_ADDR_EXP 30
1545: PUSH
1546: LD_INT 13
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 27
1557: PUSH
1558: LD_INT 2
1560: PUSH
1561: LD_INT 1000
1563: PUSH
1564: LD_INT 0
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PUSH
1574: LD_INT 3
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 13
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: LD_INT 25
1598: PUSH
1599: LD_INT 2
1601: PUSH
1602: LD_INT 1000
1604: PUSH
1605: LD_INT 0
1607: PUSH
1608: LD_INT 0
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 3
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 13
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: LD_INT 1
1636: PUSH
1637: LD_INT 27
1639: PUSH
1640: LD_INT 2
1642: PUSH
1643: LD_INT 1000
1645: PUSH
1646: LD_INT 0
1648: PUSH
1649: LD_INT 0
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 13
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 27
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 0
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 13
1712: PUSH
1713: LD_INT 1
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 32
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: LD_INT 1000
1727: PUSH
1728: LD_INT 40
1730: PUSH
1731: LD_INT 40
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// uc_side := 5 ;
1758: LD_ADDR_OWVAR 20
1762: PUSH
1763: LD_INT 5
1765: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1766: LD_ADDR_EXP 26
1770: PUSH
1771: LD_STRING Abdul
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: LD_STRING 
1779: PPUSH
1780: CALL 30516 0 3
1784: ST_TO_ADDR
// end ;
1785: LD_VAR 0 1
1789: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1790: LD_STRING 04_1_KaganCaptured
1792: PPUSH
1793: LD_INT 0
1795: PPUSH
1796: CALL_OW 30
1800: PUSH
1801: LD_INT 22
1803: PUSH
1804: LD_INT 5
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PPUSH
1811: CALL_OW 69
1815: NOT
1816: AND
1817: PUSH
1818: LD_INT 124
1820: PPUSH
1821: LD_INT 26
1823: PPUSH
1824: CALL_OW 428
1828: PUSH
1829: LD_INT 0
1831: EQUAL
1832: PUSH
1833: LD_INT 124
1835: PPUSH
1836: LD_INT 26
1838: PPUSH
1839: CALL_OW 428
1843: PPUSH
1844: CALL_OW 255
1848: PUSH
1849: LD_INT 2
1851: EQUAL
1852: XOR
1853: AND
1854: IFFALSE 2241
1856: GO 1858
1858: DISABLE
1859: LD_INT 0
1861: PPUSH
1862: PPUSH
// begin enable ;
1863: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1864: LD_EXP 33
1868: NOT
1869: PUSH
1870: LD_EXP 33
1874: PUSH
1875: LD_INT 4
1877: GREATER
1878: OR
1879: IFFALSE 1889
// cargoCounter := 1 ;
1881: LD_ADDR_EXP 33
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1889: LD_ADDR_VAR 0 2
1893: PUSH
1894: LD_INT 142
1896: PUSH
1897: LD_INT 15
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 129
1906: PUSH
1907: LD_INT 11
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 138
1916: PUSH
1917: LD_INT 9
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 133
1926: PUSH
1927: LD_INT 10
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: ST_TO_ADDR
// uc_side := 5 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 5
1947: ST_TO_ADDR
// uc_nation := 2 ;
1948: LD_ADDR_OWVAR 21
1952: PUSH
1953: LD_INT 2
1955: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1956: LD_INT 5
1958: PPUSH
1959: LD_INT 2
1961: PPUSH
1962: LD_INT 13
1964: PPUSH
1965: LD_INT 2
1967: PPUSH
1968: LD_INT 1
1970: PPUSH
1971: LD_INT 32
1973: PPUSH
1974: LD_INT 70
1976: PPUSH
1977: CALL 336 0 7
// veh := CreateVehicle ;
1981: LD_ADDR_VAR 0 1
1985: PUSH
1986: CALL_OW 45
1990: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1991: LD_VAR 0 1
1995: PPUSH
1996: LD_INT 3
1998: PPUSH
1999: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
2003: LD_VAR 0 1
2007: PPUSH
2008: LD_INT 8
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: CALL_OW 49
// if not cargoDriver then
2018: LD_EXP 32
2022: NOT
2023: IFFALSE 2048
// begin PrepareHuman ( false , 1 , 3 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 3
2033: PPUSH
2034: CALL_OW 380
// cargoDriver := CreateHuman ;
2038: LD_ADDR_EXP 32
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
2048: LD_EXP 32
2052: PPUSH
2053: LD_VAR 0 1
2057: PPUSH
2058: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
2062: LD_VAR 0 1
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 100
2072: PPUSH
2073: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
2077: LD_VAR 0 1
2081: PPUSH
2082: LD_VAR 0 2
2086: PUSH
2087: LD_EXP 33
2091: ARRAY
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: PPUSH
2097: LD_VAR 0 2
2101: PUSH
2102: LD_EXP 33
2106: ARRAY
2107: PUSH
2108: LD_INT 2
2110: ARRAY
2111: PPUSH
2112: CALL_OW 111
// AddComUnload ( veh ) ;
2116: LD_VAR 0 1
2120: PPUSH
2121: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
2125: LD_VAR 0 1
2129: PPUSH
2130: LD_INT 133
2132: PPUSH
2133: LD_INT 2
2135: PPUSH
2136: CALL_OW 171
// wait ( 0 0$5 ) ;
2140: LD_INT 175
2142: PPUSH
2143: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2147: LD_INT 35
2149: PPUSH
2150: CALL_OW 67
// if not HasTask ( veh ) then
2154: LD_VAR 0 1
2158: PPUSH
2159: CALL_OW 314
2163: NOT
2164: IFFALSE 2181
// ComMoveXY ( veh , 133 , 2 ) ;
2166: LD_VAR 0 1
2170: PPUSH
2171: LD_INT 133
2173: PPUSH
2174: LD_INT 2
2176: PPUSH
2177: CALL_OW 111
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
2181: LD_VAR 0 1
2185: PPUSH
2186: LD_INT 133
2188: PPUSH
2189: LD_INT 2
2191: PPUSH
2192: CALL_OW 307
2196: PUSH
2197: LD_VAR 0 1
2201: PPUSH
2202: LD_INT 8
2204: PPUSH
2205: CALL_OW 308
2209: OR
2210: IFFALSE 2147
// RemoveUnit ( cargoDriver ) ;
2212: LD_EXP 32
2216: PPUSH
2217: CALL_OW 64
// RemoveUnit ( veh ) ;
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 64
// if tick >= 20 20$00 then
2230: LD_OWVAR 1
2234: PUSH
2235: LD_INT 42000
2237: GREATEREQUAL
2238: IFFALSE 2241
// disable ;
2240: DISABLE
// end ; end_of_file
2241: PPOPN 2
2243: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
2244: LD_INT 0
2246: PPUSH
2247: PPUSH
2248: PPUSH
2249: PPUSH
2250: PPUSH
2251: PPUSH
2252: PPUSH
2253: PPUSH
2254: PPUSH
// uc_side := 3 ;
2255: LD_ADDR_OWVAR 20
2259: PUSH
2260: LD_INT 3
2262: ST_TO_ADDR
// uc_nation := 3 ;
2263: LD_ADDR_OWVAR 21
2267: PUSH
2268: LD_INT 3
2270: ST_TO_ADDR
// ruForce := [ ] ;
2271: LD_ADDR_EXP 37
2275: PUSH
2276: EMPTY
2277: ST_TO_ADDR
// ruMech := [ ] ;
2278: LD_ADDR_EXP 39
2282: PUSH
2283: EMPTY
2284: ST_TO_ADDR
// ruEng := [ ] ;
2285: LD_ADDR_EXP 38
2289: PUSH
2290: EMPTY
2291: ST_TO_ADDR
// ruSci := [ ] ;
2292: LD_ADDR_EXP 40
2296: PUSH
2297: EMPTY
2298: ST_TO_ADDR
// ruMobile := [ ] ;
2299: LD_ADDR_EXP 41
2303: PUSH
2304: EMPTY
2305: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2306: LD_ADDR_EXP 34
2310: PUSH
2311: LD_STRING Burlak
2313: PPUSH
2314: LD_INT 0
2316: PPUSH
2317: LD_STRING 
2319: PPUSH
2320: CALL 30516 0 3
2324: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2325: LD_ADDR_EXP 35
2329: PUSH
2330: LD_STRING Gaydar
2332: PPUSH
2333: LD_INT 0
2335: PPUSH
2336: LD_STRING 
2338: PPUSH
2339: CALL 30516 0 3
2343: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2344: LD_ADDR_EXP 36
2348: PUSH
2349: LD_STRING Kuzmov
2351: PPUSH
2352: LD_INT 0
2354: PPUSH
2355: LD_STRING 
2357: PPUSH
2358: CALL 30516 0 3
2362: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2363: LD_EXP 36
2367: PPUSH
2368: LD_INT 200
2370: PPUSH
2371: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2375: LD_INT 200
2377: PPUSH
2378: LD_STRING chuikov
2380: PPUSH
2381: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2385: LD_INT 200
2387: PPUSH
2388: CALL_OW 274
2392: PPUSH
2393: LD_INT 1
2395: PPUSH
2396: LD_INT 800
2398: PUSH
2399: LD_INT 1000
2401: PUSH
2402: LD_INT 1250
2404: PUSH
2405: LD_INT 1300
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: PUSH
2414: LD_OWVAR 67
2418: ARRAY
2419: PPUSH
2420: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2424: LD_INT 200
2426: PPUSH
2427: CALL_OW 274
2431: PPUSH
2432: LD_INT 2
2434: PPUSH
2435: LD_INT 160
2437: PPUSH
2438: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2442: LD_INT 225
2444: PPUSH
2445: CALL_OW 274
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: LD_INT 200
2455: PPUSH
2456: CALL_OW 277
// oil := 150 ;
2460: LD_ADDR_VAR 0 9
2464: PUSH
2465: LD_INT 150
2467: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2468: LD_EXP 5
2472: PUSH
2473: LD_INT 94500
2475: PUSH
2476: LD_INT 84000
2478: PUSH
2479: LD_INT 73500
2481: PUSH
2482: LD_INT 67200
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: PUSH
2491: LD_OWVAR 67
2495: ARRAY
2496: GREATEREQUAL
2497: IFFALSE 2652
// begin oil := 450 ;
2499: LD_ADDR_VAR 0 9
2503: PUSH
2504: LD_INT 450
2506: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2507: LD_ADDR_VAR 0 7
2511: PUSH
2512: LD_INT 123
2514: PUSH
2515: LD_INT 17
2517: PUSH
2518: LD_INT 3
2520: PUSH
2521: LD_INT 31
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 152
2532: PUSH
2533: LD_INT 38
2535: PUSH
2536: LD_INT 3
2538: PUSH
2539: LD_INT 31
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: PUSH
2548: LD_INT 81
2550: PUSH
2551: LD_INT 6
2553: PUSH
2554: LD_INT 4
2556: PUSH
2557: LD_INT 31
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: PUSH
2566: LD_INT 113
2568: PUSH
2569: LD_INT 67
2571: PUSH
2572: LD_INT 4
2574: PUSH
2575: LD_INT 32
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: ST_TO_ADDR
// for i in tmp do
2590: LD_ADDR_VAR 0 4
2594: PUSH
2595: LD_VAR 0 7
2599: PUSH
2600: FOR_IN
2601: IFFALSE 2650
// begin bc_type := i [ 4 ] ;
2603: LD_ADDR_OWVAR 42
2607: PUSH
2608: LD_VAR 0 4
2612: PUSH
2613: LD_INT 4
2615: ARRAY
2616: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2617: LD_VAR 0 4
2621: PUSH
2622: LD_INT 1
2624: ARRAY
2625: PPUSH
2626: LD_VAR 0 4
2630: PUSH
2631: LD_INT 2
2633: ARRAY
2634: PPUSH
2635: LD_VAR 0 4
2639: PUSH
2640: LD_INT 3
2642: ARRAY
2643: PPUSH
2644: CALL_OW 47
// end ;
2648: GO 2600
2650: POP
2651: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2652: LD_INT 225
2654: PPUSH
2655: CALL_OW 274
2659: PPUSH
2660: LD_INT 2
2662: PPUSH
2663: LD_VAR 0 9
2667: PPUSH
2668: CALL_OW 277
// if Difficulty > 1 then
2672: LD_OWVAR 67
2676: PUSH
2677: LD_INT 1
2679: GREATER
2680: IFFALSE 2775
// begin bc_type := b_bunker ;
2682: LD_ADDR_OWVAR 42
2686: PUSH
2687: LD_INT 32
2689: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2690: LD_ADDR_VAR 0 7
2694: PUSH
2695: LD_INT 121
2697: PUSH
2698: LD_INT 85
2700: PUSH
2701: LD_INT 5
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 93
2711: PUSH
2712: LD_INT 72
2714: PUSH
2715: LD_INT 1
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: ST_TO_ADDR
// for i in tmp do
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: LD_VAR 0 7
2736: PUSH
2737: FOR_IN
2738: IFFALSE 2773
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2740: LD_VAR 0 4
2744: PUSH
2745: LD_INT 1
2747: ARRAY
2748: PPUSH
2749: LD_VAR 0 4
2753: PUSH
2754: LD_INT 2
2756: ARRAY
2757: PPUSH
2758: LD_VAR 0 4
2762: PUSH
2763: LD_INT 3
2765: ARRAY
2766: PPUSH
2767: CALL_OW 47
2771: GO 2737
2773: POP
2774: POP
// end ; base := GetBase ( ruMainBase ) ;
2775: LD_ADDR_VAR 0 2
2779: PUSH
2780: LD_INT 200
2782: PPUSH
2783: CALL_OW 274
2787: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2788: LD_ADDR_VAR 0 3
2792: PUSH
2793: LD_VAR 0 2
2797: PPUSH
2798: CALL_OW 417
2802: ST_TO_ADDR
// for b in blist do
2803: LD_ADDR_VAR 0 5
2807: PUSH
2808: LD_VAR 0 3
2812: PUSH
2813: FOR_IN
2814: IFFALSE 3265
// begin if b [ 1 ] = b_factory then
2816: LD_VAR 0 5
2820: PUSH
2821: LD_INT 1
2823: ARRAY
2824: PUSH
2825: LD_INT 3
2827: EQUAL
2828: IFFALSE 2979
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2830: LD_ADDR_VAR 0 8
2834: PUSH
2835: LD_VAR 0 5
2839: PUSH
2840: LD_INT 2
2842: ARRAY
2843: PPUSH
2844: LD_VAR 0 5
2848: PUSH
2849: LD_INT 3
2851: ARRAY
2852: PPUSH
2853: CALL_OW 428
2857: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2858: LD_ADDR_VAR 0 4
2862: PUSH
2863: DOUBLE
2864: LD_INT 1
2866: DEC
2867: ST_TO_ADDR
2868: LD_INT 2
2870: PUSH
2871: LD_INT 2
2873: PUSH
2874: LD_OWVAR 67
2878: PLUS
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: LD_EXP 10
2888: PUSH
2889: LD_INT 3
2891: GREATER
2892: PUSH
2893: LD_INT 1
2895: PLUS
2896: ARRAY
2897: PUSH
2898: FOR_TO
2899: IFFALSE 2975
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2901: LD_INT 0
2903: PPUSH
2904: LD_INT 3
2906: PPUSH
2907: LD_INT 1
2909: PUSH
2910: LD_OWVAR 67
2914: PLUS
2915: PPUSH
2916: CALL_OW 380
// un := CreateHuman ;
2920: LD_ADDR_VAR 0 6
2924: PUSH
2925: CALL_OW 44
2929: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2930: LD_ADDR_EXP 39
2934: PUSH
2935: LD_EXP 39
2939: PPUSH
2940: LD_EXP 39
2944: PUSH
2945: LD_INT 1
2947: PLUS
2948: PPUSH
2949: LD_VAR 0 6
2953: PPUSH
2954: CALL_OW 1
2958: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2959: LD_VAR 0 6
2963: PPUSH
2964: LD_VAR 0 8
2968: PPUSH
2969: CALL_OW 52
// end ;
2973: GO 2898
2975: POP
2976: POP
// end else
2977: GO 3263
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2979: LD_VAR 0 5
2983: PUSH
2984: LD_INT 1
2986: ARRAY
2987: PUSH
2988: LD_INT 6
2990: PUSH
2991: LD_INT 7
2993: PUSH
2994: LD_INT 8
2996: PUSH
2997: LD_INT 10
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: IN
3006: IFFALSE 3116
// begin for i := 1 to 2 do
3008: LD_ADDR_VAR 0 4
3012: PUSH
3013: DOUBLE
3014: LD_INT 1
3016: DEC
3017: ST_TO_ADDR
3018: LD_INT 2
3020: PUSH
3021: FOR_TO
3022: IFFALSE 3112
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3024: LD_INT 0
3026: PPUSH
3027: LD_INT 4
3029: PPUSH
3030: LD_OWVAR 67
3034: PPUSH
3035: CALL_OW 380
// un := CreateHuman ;
3039: LD_ADDR_VAR 0 6
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
3049: LD_ADDR_EXP 40
3053: PUSH
3054: LD_EXP 40
3058: PPUSH
3059: LD_EXP 40
3063: PUSH
3064: LD_INT 1
3066: PLUS
3067: PPUSH
3068: LD_VAR 0 6
3072: PPUSH
3073: CALL_OW 1
3077: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3078: LD_VAR 0 6
3082: PPUSH
3083: LD_VAR 0 5
3087: PUSH
3088: LD_INT 2
3090: ARRAY
3091: PPUSH
3092: LD_VAR 0 5
3096: PUSH
3097: LD_INT 3
3099: ARRAY
3100: PPUSH
3101: CALL_OW 428
3105: PPUSH
3106: CALL_OW 52
// end ;
3110: GO 3021
3112: POP
3113: POP
// end else
3114: GO 3263
// if b [ 1 ] = b_warehouse then
3116: LD_VAR 0 5
3120: PUSH
3121: LD_INT 1
3123: ARRAY
3124: PUSH
3125: LD_INT 1
3127: EQUAL
3128: IFFALSE 3263
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3130: LD_ADDR_VAR 0 4
3134: PUSH
3135: DOUBLE
3136: LD_INT 1
3138: DEC
3139: ST_TO_ADDR
3140: LD_INT 1
3142: PUSH
3143: LD_INT 1
3145: PUSH
3146: LD_OWVAR 67
3150: PLUS
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: LD_EXP 10
3160: PUSH
3161: LD_INT 3
3163: GREATER
3164: PUSH
3165: LD_INT 1
3167: PLUS
3168: ARRAY
3169: PUSH
3170: FOR_TO
3171: IFFALSE 3261
// begin PrepareHuman ( false , 2 , Difficulty ) ;
3173: LD_INT 0
3175: PPUSH
3176: LD_INT 2
3178: PPUSH
3179: LD_OWVAR 67
3183: PPUSH
3184: CALL_OW 380
// un := CreateHuman ;
3188: LD_ADDR_VAR 0 6
3192: PUSH
3193: CALL_OW 44
3197: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
3198: LD_ADDR_EXP 38
3202: PUSH
3203: LD_EXP 38
3207: PPUSH
3208: LD_EXP 38
3212: PUSH
3213: LD_INT 1
3215: PLUS
3216: PPUSH
3217: LD_VAR 0 6
3221: PPUSH
3222: CALL_OW 1
3226: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3227: LD_VAR 0 6
3231: PPUSH
3232: LD_VAR 0 5
3236: PUSH
3237: LD_INT 2
3239: ARRAY
3240: PPUSH
3241: LD_VAR 0 5
3245: PUSH
3246: LD_INT 3
3248: ARRAY
3249: PPUSH
3250: CALL_OW 428
3254: PPUSH
3255: CALL_OW 52
// end ;
3259: GO 3170
3261: POP
3262: POP
// end ; end ;
3263: GO 2813
3265: POP
3266: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3267: LD_ADDR_VAR 0 3
3271: PUSH
3272: LD_INT 22
3274: PUSH
3275: LD_INT 3
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: LD_INT 21
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: PPUSH
3296: CALL_OW 69
3300: ST_TO_ADDR
// for b in blist do
3301: LD_ADDR_VAR 0 5
3305: PUSH
3306: LD_VAR 0 3
3310: PUSH
3311: FOR_IN
3312: IFFALSE 3334
// SetBLevel ( b , 3 + Difficulty ) ;
3314: LD_VAR 0 5
3318: PPUSH
3319: LD_INT 3
3321: PUSH
3322: LD_OWVAR 67
3326: PLUS
3327: PPUSH
3328: CALL_OW 241
3332: GO 3311
3334: POP
3335: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3336: LD_ADDR_VAR 0 3
3340: PUSH
3341: LD_INT 22
3343: PUSH
3344: LD_INT 3
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: PUSH
3351: LD_INT 30
3353: PUSH
3354: LD_INT 32
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PPUSH
3365: CALL_OW 69
3369: ST_TO_ADDR
// for b in blist do
3370: LD_ADDR_VAR 0 5
3374: PUSH
3375: LD_VAR 0 3
3379: PUSH
3380: FOR_IN
3381: IFFALSE 3490
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3383: LD_INT 0
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: LD_INT 1
3391: PUSH
3392: LD_OWVAR 67
3396: PLUS
3397: PPUSH
3398: CALL_OW 380
// un := CreateHuman ;
3402: LD_ADDR_VAR 0 6
3406: PUSH
3407: CALL_OW 44
3411: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3412: LD_ADDR_EXP 37
3416: PUSH
3417: LD_EXP 37
3421: PPUSH
3422: LD_EXP 37
3426: PUSH
3427: LD_INT 1
3429: PLUS
3430: PPUSH
3431: LD_VAR 0 6
3435: PPUSH
3436: CALL_OW 1
3440: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3441: LD_VAR 0 6
3445: PPUSH
3446: LD_VAR 0 5
3450: PPUSH
3451: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3455: LD_VAR 0 5
3459: PPUSH
3460: LD_INT 44
3462: PUSH
3463: LD_INT 43
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PUSH
3470: LD_VAR 0 5
3474: PUSH
3475: LD_INT 2
3477: MOD
3478: PUSH
3479: LD_INT 1
3481: PLUS
3482: ARRAY
3483: PPUSH
3484: CALL_OW 431
// end ;
3488: GO 3380
3490: POP
3491: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3492: LD_ADDR_VAR 0 3
3496: PUSH
3497: LD_INT 22
3499: PUSH
3500: LD_INT 3
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: LD_INT 30
3509: PUSH
3510: LD_INT 31
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PPUSH
3521: CALL_OW 69
3525: ST_TO_ADDR
// for b in blist do
3526: LD_ADDR_VAR 0 5
3530: PUSH
3531: LD_VAR 0 3
3535: PUSH
3536: FOR_IN
3537: IFFALSE 3636
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3539: LD_INT 0
3541: PPUSH
3542: LD_INT 1
3544: PPUSH
3545: LD_INT 1
3547: PUSH
3548: LD_OWVAR 67
3552: PLUS
3553: PPUSH
3554: CALL_OW 380
// un := CreateHuman ;
3558: LD_ADDR_VAR 0 6
3562: PUSH
3563: CALL_OW 44
3567: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3568: LD_ADDR_EXP 37
3572: PUSH
3573: LD_EXP 37
3577: PPUSH
3578: LD_EXP 37
3582: PUSH
3583: LD_INT 1
3585: PLUS
3586: PPUSH
3587: LD_VAR 0 6
3591: PPUSH
3592: CALL_OW 1
3596: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3597: LD_VAR 0 6
3601: PPUSH
3602: LD_VAR 0 5
3606: PPUSH
3607: CALL_OW 254
3611: PUSH
3612: LD_INT 3
3614: PLUS
3615: PPUSH
3616: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3620: LD_VAR 0 6
3624: PPUSH
3625: LD_VAR 0 5
3629: PPUSH
3630: CALL_OW 52
// end ;
3634: GO 3536
3636: POP
3637: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3638: LD_ADDR_VAR 0 3
3642: PUSH
3643: LD_INT 22
3645: PUSH
3646: LD_INT 3
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: PUSH
3653: LD_INT 2
3655: PUSH
3656: LD_INT 30
3658: PUSH
3659: LD_INT 4
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PUSH
3666: LD_INT 30
3668: PUSH
3669: LD_INT 5
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PPUSH
3685: CALL_OW 69
3689: ST_TO_ADDR
// for b in blist do
3690: LD_ADDR_VAR 0 5
3694: PUSH
3695: LD_VAR 0 3
3699: PUSH
3700: FOR_IN
3701: IFFALSE 3797
// begin for i := 1 to 2 do
3703: LD_ADDR_VAR 0 4
3707: PUSH
3708: DOUBLE
3709: LD_INT 1
3711: DEC
3712: ST_TO_ADDR
3713: LD_INT 2
3715: PUSH
3716: FOR_TO
3717: IFFALSE 3793
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3719: LD_INT 0
3721: PPUSH
3722: LD_INT 1
3724: PPUSH
3725: LD_INT 1
3727: PUSH
3728: LD_OWVAR 67
3732: PLUS
3733: PPUSH
3734: CALL_OW 380
// un := CreateHuman ;
3738: LD_ADDR_VAR 0 6
3742: PUSH
3743: CALL_OW 44
3747: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3748: LD_ADDR_EXP 37
3752: PUSH
3753: LD_EXP 37
3757: PPUSH
3758: LD_EXP 37
3762: PUSH
3763: LD_INT 1
3765: PLUS
3766: PPUSH
3767: LD_VAR 0 6
3771: PPUSH
3772: CALL_OW 1
3776: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3777: LD_VAR 0 6
3781: PPUSH
3782: LD_VAR 0 5
3786: PPUSH
3787: CALL_OW 52
// end ;
3791: GO 3716
3793: POP
3794: POP
// end ;
3795: GO 3700
3797: POP
3798: POP
// if ibrahimOnRuSide then
3799: LD_EXP 3
3803: IFFALSE 3901
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3805: LD_ADDR_EXP 21
3809: PUSH
3810: LD_STRING IbrahimRu
3812: PPUSH
3813: LD_INT 0
3815: PPUSH
3816: LD_STRING 
3818: PPUSH
3819: CALL 30516 0 3
3823: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3824: LD_EXP 21
3828: PPUSH
3829: LD_INT 121
3831: PPUSH
3832: LD_INT 78
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: CALL_OW 48
// ComHold ( Ibrahim ) ;
3842: LD_EXP 21
3846: PPUSH
3847: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3851: LD_INT 1
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_INT 2
3859: PPUSH
3860: CALL_OW 380
// ruSol := CreateHuman ;
3864: LD_ADDR_EXP 42
3868: PUSH
3869: CALL_OW 44
3873: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3874: LD_EXP 42
3878: PPUSH
3879: LD_INT 121
3881: PPUSH
3882: LD_INT 75
3884: PPUSH
3885: LD_INT 0
3887: PPUSH
3888: CALL_OW 48
// ComHold ( ruSol ) ;
3892: LD_EXP 42
3896: PPUSH
3897: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3901: LD_ADDR_VAR 0 4
3905: PUSH
3906: DOUBLE
3907: LD_INT 1
3909: DEC
3910: ST_TO_ADDR
3911: LD_INT 2
3913: PUSH
3914: LD_INT 2
3916: PUSH
3917: LD_OWVAR 67
3921: PLUS
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PUSH
3927: LD_EXP 10
3931: PUSH
3932: LD_INT 3
3934: GREATER
3935: PUSH
3936: LD_INT 1
3938: PLUS
3939: ARRAY
3940: PUSH
3941: FOR_TO
3942: IFFALSE 4011
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3944: LD_VAR 0 8
3948: PPUSH
3949: LD_INT 21
3951: PUSH
3952: LD_INT 23
3954: PUSH
3955: LD_INT 24
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: LIST
3962: PUSH
3963: LD_VAR 0 4
3967: PUSH
3968: LD_INT 3
3970: MOD
3971: PUSH
3972: LD_INT 1
3974: PLUS
3975: ARRAY
3976: PPUSH
3977: LD_INT 1
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_INT 43
3985: PUSH
3986: LD_INT 44
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: LD_INT 1
3995: PPUSH
3996: LD_INT 2
3998: PPUSH
3999: CALL_OW 12
4003: ARRAY
4004: PPUSH
4005: CALL_OW 185
4009: GO 3941
4011: POP
4012: POP
// end ;
4013: LD_VAR 0 1
4017: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x , tag ;
4018: LD_EXP 41
4022: PUSH
4023: LD_EXP 4
4027: NOT
4028: AND
4029: IFFALSE 4517
4031: GO 4033
4033: DISABLE
4034: LD_INT 0
4036: PPUSH
4037: PPUSH
4038: PPUSH
4039: PPUSH
4040: PPUSH
4041: PPUSH
// begin enable ;
4042: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
4043: LD_ADDR_VAR 0 2
4047: PUSH
4048: LD_EXP 41
4052: PPUSH
4053: LD_INT 21
4055: PUSH
4056: LD_INT 2
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: PPUSH
4063: CALL_OW 72
4067: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
4068: LD_ADDR_VAR 0 4
4072: PUSH
4073: LD_INT 81
4075: PUSH
4076: LD_INT 3
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: PUSH
4083: LD_INT 2
4085: PUSH
4086: LD_INT 95
4088: PUSH
4089: LD_INT 4
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: LD_INT 95
4098: PUSH
4099: LD_INT 5
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 95
4108: PUSH
4109: LD_INT 6
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 95
4118: PUSH
4119: LD_INT 7
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: PPUSH
4137: CALL_OW 69
4141: ST_TO_ADDR
// for i in filter do
4142: LD_ADDR_VAR 0 1
4146: PUSH
4147: LD_VAR 0 2
4151: PUSH
4152: FOR_IN
4153: IFFALSE 4515
// begin tmp := IsDrivenBy ( i ) ;
4155: LD_ADDR_VAR 0 3
4159: PUSH
4160: LD_VAR 0 1
4164: PPUSH
4165: CALL_OW 311
4169: ST_TO_ADDR
// tag := GetTag ( i ) ;
4170: LD_ADDR_VAR 0 6
4174: PUSH
4175: LD_VAR 0 1
4179: PPUSH
4180: CALL_OW 110
4184: ST_TO_ADDR
// if not tmp then
4185: LD_VAR 0 3
4189: NOT
4190: IFFALSE 4194
// continue ;
4192: GO 4152
// if GetFuel ( i ) > 90 and tag = 2 then
4194: LD_VAR 0 1
4198: PPUSH
4199: CALL_OW 261
4203: PUSH
4204: LD_INT 90
4206: GREATER
4207: PUSH
4208: LD_VAR 0 6
4212: PUSH
4213: LD_INT 2
4215: EQUAL
4216: AND
4217: IFFALSE 4233
// SetTag ( i , 0 ) else
4219: LD_VAR 0 1
4223: PPUSH
4224: LD_INT 0
4226: PPUSH
4227: CALL_OW 109
4231: GO 4276
// if GetTag ( i ) = 2 then
4233: LD_VAR 0 1
4237: PPUSH
4238: CALL_OW 110
4242: PUSH
4243: LD_INT 2
4245: EQUAL
4246: IFFALSE 4276
// begin x := rand ( 1 , 2 ) ;
4248: LD_ADDR_VAR 0 5
4252: PUSH
4253: LD_INT 1
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: CALL_OW 12
4263: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4264: LD_VAR 0 1
4268: PPUSH
4269: LD_INT 200
4271: PPUSH
4272: CALL_OW 172
// end ; if GetLives ( i ) >= 650 and not tag then
4276: LD_VAR 0 1
4280: PPUSH
4281: CALL_OW 256
4285: PUSH
4286: LD_INT 650
4288: GREATEREQUAL
4289: PUSH
4290: LD_VAR 0 6
4294: NOT
4295: AND
4296: IFFALSE 4322
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4298: LD_VAR 0 1
4302: PPUSH
4303: LD_VAR 0 4
4307: PPUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: CALL_OW 74
4317: PPUSH
4318: CALL_OW 115
// if GetLives ( i ) < 650 and not tag then
4322: LD_VAR 0 1
4326: PPUSH
4327: CALL_OW 256
4331: PUSH
4332: LD_INT 650
4334: LESS
4335: PUSH
4336: LD_VAR 0 6
4340: NOT
4341: AND
4342: IFFALSE 4371
// begin SetTag ( i , 1 ) ;
4344: LD_VAR 0 1
4348: PPUSH
4349: LD_INT 1
4351: PPUSH
4352: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4356: LD_VAR 0 1
4360: PPUSH
4361: LD_INT 112
4363: PPUSH
4364: LD_INT 119
4366: PPUSH
4367: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4371: LD_VAR 0 1
4375: PPUSH
4376: CALL_OW 110
4380: PUSH
4381: LD_INT 1
4383: EQUAL
4384: PUSH
4385: LD_VAR 0 1
4389: PPUSH
4390: LD_INT 112
4392: PPUSH
4393: LD_INT 119
4395: PPUSH
4396: CALL_OW 297
4400: PUSH
4401: LD_INT 9
4403: LESS
4404: AND
4405: PUSH
4406: LD_VAR 0 3
4410: AND
4411: IFFALSE 4513
// begin ComExitVehicle ( tmp ) ;
4413: LD_VAR 0 3
4417: PPUSH
4418: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4422: LD_VAR 0 3
4426: PPUSH
4427: LD_VAR 0 1
4431: PPUSH
4432: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4436: LD_INT 35
4438: PPUSH
4439: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4443: LD_VAR 0 1
4447: PPUSH
4448: CALL_OW 256
4452: PUSH
4453: LD_INT 1000
4455: EQUAL
4456: IFFALSE 4436
// ComEnterUnit ( tmp , i ) ;
4458: LD_VAR 0 3
4462: PPUSH
4463: LD_VAR 0 1
4467: PPUSH
4468: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4472: LD_VAR 0 1
4476: PPUSH
4477: CALL_OW 261
4481: PUSH
4482: LD_INT 50
4484: LESSEQUAL
4485: IFFALSE 4501
// SetTag ( i , 2 ) else
4487: LD_VAR 0 1
4491: PPUSH
4492: LD_INT 2
4494: PPUSH
4495: CALL_OW 109
4499: GO 4513
// SetTag ( i , 0 ) ;
4501: LD_VAR 0 1
4505: PPUSH
4506: LD_INT 0
4508: PPUSH
4509: CALL_OW 109
// end ; end ;
4513: GO 4152
4515: POP
4516: POP
// end ;
4517: PPOPN 6
4519: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4520: LD_EXP 4
4524: NOT
4525: PUSH
4526: LD_EXP 38
4530: AND
4531: IFFALSE 4792
4533: GO 4535
4535: DISABLE
4536: LD_INT 0
4538: PPUSH
4539: PPUSH
4540: PPUSH
4541: PPUSH
// begin enable ;
4542: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4543: LD_ADDR_VAR 0 2
4547: PUSH
4548: LD_INT 3
4550: PPUSH
4551: LD_INT 22
4553: PUSH
4554: LD_INT 3
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 21
4563: PUSH
4564: LD_INT 3
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 3
4573: PUSH
4574: LD_INT 24
4576: PUSH
4577: LD_INT 1000
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: PPUSH
4593: CALL_OW 70
4597: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4598: LD_ADDR_VAR 0 3
4602: PUSH
4603: LD_EXP 38
4607: PPUSH
4608: LD_INT 50
4610: PUSH
4611: EMPTY
4612: LIST
4613: PPUSH
4614: CALL_OW 72
4618: ST_TO_ADDR
// if filter and tmp then
4619: LD_VAR 0 2
4623: PUSH
4624: LD_VAR 0 3
4628: AND
4629: IFFALSE 4721
// begin for i in tmp do
4631: LD_ADDR_VAR 0 1
4635: PUSH
4636: LD_VAR 0 3
4640: PUSH
4641: FOR_IN
4642: IFFALSE 4717
// begin if GetTag ( i ) = tEscape then
4644: LD_VAR 0 1
4648: PPUSH
4649: CALL_OW 110
4653: PUSH
4654: LD_EXP 17
4658: EQUAL
4659: IFFALSE 4663
// continue ;
4661: GO 4641
// if IsInUnit ( i ) then
4663: LD_VAR 0 1
4667: PPUSH
4668: CALL_OW 310
4672: IFFALSE 4685
// ComExitBuilding ( i ) else
4674: LD_VAR 0 1
4678: PPUSH
4679: CALL_OW 122
4683: GO 4715
// if not HasTask ( i ) then
4685: LD_VAR 0 1
4689: PPUSH
4690: CALL_OW 314
4694: NOT
4695: IFFALSE 4715
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4697: LD_VAR 0 1
4701: PPUSH
4702: LD_VAR 0 2
4706: PUSH
4707: LD_INT 1
4709: ARRAY
4710: PPUSH
4711: CALL_OW 130
// end ;
4715: GO 4641
4717: POP
4718: POP
// end else
4719: GO 4792
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4721: LD_VAR 0 3
4725: PPUSH
4726: LD_INT 3
4728: PUSH
4729: LD_INT 54
4731: PUSH
4732: EMPTY
4733: LIST
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: PPUSH
4739: CALL_OW 72
4743: IFFALSE 4792
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4745: LD_ADDR_VAR 0 1
4749: PUSH
4750: LD_VAR 0 3
4754: PPUSH
4755: LD_INT 3
4757: PUSH
4758: LD_INT 54
4760: PUSH
4761: EMPTY
4762: LIST
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 72
4772: PUSH
4773: FOR_IN
4774: IFFALSE 4790
// ComEnterUnit ( i , ruMainBase ) ;
4776: LD_VAR 0 1
4780: PPUSH
4781: LD_INT 200
4783: PPUSH
4784: CALL_OW 120
4788: GO 4773
4790: POP
4791: POP
// end ; end ;
4792: PPOPN 4
4794: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4795: LD_EXP 4
4799: NOT
4800: PUSH
4801: LD_EXP 40
4805: AND
4806: IFFALSE 5085
4808: GO 4810
4810: DISABLE
4811: LD_INT 0
4813: PPUSH
4814: PPUSH
4815: PPUSH
4816: PPUSH
// begin enable ;
4817: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4818: LD_ADDR_VAR 0 2
4822: PUSH
4823: LD_INT 3
4825: PPUSH
4826: LD_INT 22
4828: PUSH
4829: LD_INT 3
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 21
4838: PUSH
4839: LD_INT 1
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 3
4848: PUSH
4849: LD_INT 24
4851: PUSH
4852: LD_INT 1000
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PPUSH
4868: CALL_OW 70
4872: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4873: LD_ADDR_VAR 0 3
4877: PUSH
4878: LD_EXP 40
4882: PPUSH
4883: LD_INT 50
4885: PUSH
4886: EMPTY
4887: LIST
4888: PPUSH
4889: CALL_OW 72
4893: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4894: LD_ADDR_VAR 0 4
4898: PUSH
4899: LD_INT 118
4901: PPUSH
4902: LD_INT 121
4904: PPUSH
4905: CALL_OW 428
4909: ST_TO_ADDR
// if filter and tmp then
4910: LD_VAR 0 2
4914: PUSH
4915: LD_VAR 0 3
4919: AND
4920: IFFALSE 5012
// begin for i in tmp do
4922: LD_ADDR_VAR 0 1
4926: PUSH
4927: LD_VAR 0 3
4931: PUSH
4932: FOR_IN
4933: IFFALSE 5008
// begin if GetTag ( i ) = tEscape then
4935: LD_VAR 0 1
4939: PPUSH
4940: CALL_OW 110
4944: PUSH
4945: LD_EXP 17
4949: EQUAL
4950: IFFALSE 4954
// continue ;
4952: GO 4932
// if IsInUnit ( i ) then
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 310
4963: IFFALSE 4976
// ComExitBuilding ( i ) else
4965: LD_VAR 0 1
4969: PPUSH
4970: CALL_OW 122
4974: GO 5006
// if not HasTask ( i ) then
4976: LD_VAR 0 1
4980: PPUSH
4981: CALL_OW 314
4985: NOT
4986: IFFALSE 5006
// ComHeal ( i , filter [ 1 ] ) ;
4988: LD_VAR 0 1
4992: PPUSH
4993: LD_VAR 0 2
4997: PUSH
4998: LD_INT 1
5000: ARRAY
5001: PPUSH
5002: CALL_OW 128
// end ;
5006: GO 4932
5008: POP
5009: POP
// end else
5010: GO 5085
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
5012: LD_VAR 0 3
5016: PPUSH
5017: LD_INT 3
5019: PUSH
5020: LD_INT 54
5022: PUSH
5023: EMPTY
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PPUSH
5030: CALL_OW 72
5034: IFFALSE 5085
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
5036: LD_ADDR_VAR 0 1
5040: PUSH
5041: LD_VAR 0 3
5045: PPUSH
5046: LD_INT 3
5048: PUSH
5049: LD_INT 54
5051: PUSH
5052: EMPTY
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PPUSH
5059: CALL_OW 72
5063: PUSH
5064: FOR_IN
5065: IFFALSE 5083
// ComEnterUnit ( i , lab ) ;
5067: LD_VAR 0 1
5071: PPUSH
5072: LD_VAR 0 4
5076: PPUSH
5077: CALL_OW 120
5081: GO 5064
5083: POP
5084: POP
// end ; end ; end_of_file
5085: PPOPN 4
5087: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5088: LD_VAR 0 1
5092: PPUSH
5093: CALL 26227 0 1
// if un = Heike then
5097: LD_VAR 0 1
5101: PUSH
5102: LD_EXP 18
5106: EQUAL
5107: IFFALSE 5116
// YouLost ( Heike ) ;
5109: LD_STRING Heike
5111: PPUSH
5112: CALL_OW 104
// if un in ruEng then
5116: LD_VAR 0 1
5120: PUSH
5121: LD_EXP 38
5125: IN
5126: IFFALSE 5144
// ruEng := ruEng diff un ;
5128: LD_ADDR_EXP 38
5132: PUSH
5133: LD_EXP 38
5137: PUSH
5138: LD_VAR 0 1
5142: DIFF
5143: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
5144: LD_VAR 0 1
5148: PUSH
5149: LD_INT 22
5151: PUSH
5152: LD_INT 2
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 21
5161: PUSH
5162: LD_INT 1
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 23
5171: PUSH
5172: LD_INT 2
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: PPUSH
5184: CALL_OW 69
5188: IN
5189: IFFALSE 5205
// loseCounter := loseCounter + 1 ;
5191: LD_ADDR_EXP 6
5195: PUSH
5196: LD_EXP 6
5200: PUSH
5201: LD_INT 1
5203: PLUS
5204: ST_TO_ADDR
// end ;
5205: PPOPN 1
5207: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
5208: LD_INT 0
5210: PPUSH
5211: PPUSH
// begin if un in ruMobile then
5212: LD_VAR 0 2
5216: PUSH
5217: LD_EXP 41
5221: IN
5222: IFFALSE 5381
// begin ruMobile := ruMobile diff un ;
5224: LD_ADDR_EXP 41
5228: PUSH
5229: LD_EXP 41
5233: PUSH
5234: LD_VAR 0 2
5238: DIFF
5239: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
5240: LD_ADDR_VAR 0 5
5244: PUSH
5245: LD_VAR 0 2
5249: PPUSH
5250: CALL_OW 264
5254: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5255: LD_ADDR_VAR 0 6
5259: PUSH
5260: LD_INT 110
5262: PPUSH
5263: LD_INT 126
5265: PPUSH
5266: CALL_OW 428
5270: ST_TO_ADDR
// if not driver or not fac then
5271: LD_VAR 0 1
5275: NOT
5276: PUSH
5277: LD_VAR 0 6
5281: NOT
5282: OR
5283: IFFALSE 5287
// exit ;
5285: GO 5381
// AddComMoveXY ( driver , 111 , 121 ) ;
5287: LD_VAR 0 1
5291: PPUSH
5292: LD_INT 111
5294: PPUSH
5295: LD_INT 121
5297: PPUSH
5298: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5302: LD_VAR 0 1
5306: PPUSH
5307: LD_VAR 0 6
5311: PPUSH
5312: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5316: LD_INT 35
5318: PPUSH
5319: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5323: LD_VAR 0 1
5327: PPUSH
5328: CALL_OW 301
5332: PUSH
5333: LD_VAR 0 1
5337: PPUSH
5338: CALL_OW 310
5342: OR
5343: IFFALSE 5316
// if IsDead ( driver ) then
5345: LD_VAR 0 1
5349: PPUSH
5350: CALL_OW 301
5354: IFFALSE 5358
// exit ;
5356: GO 5381
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5358: LD_VAR 0 6
5362: PPUSH
5363: LD_INT 21
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: LD_VAR 0 5
5376: PPUSH
5377: CALL_OW 185
// end ; end ;
5381: PPOPN 6
5383: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5384: LD_VAR 0 1
5388: PPUSH
5389: LD_VAR 0 2
5393: PPUSH
5394: CALL 26347 0 2
// if GetSide ( fac ) = 3 then
5398: LD_VAR 0 2
5402: PPUSH
5403: CALL_OW 255
5407: PUSH
5408: LD_INT 3
5410: EQUAL
5411: IFFALSE 5457
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5413: LD_ADDR_EXP 41
5417: PUSH
5418: LD_EXP 41
5422: PPUSH
5423: LD_EXP 41
5427: PUSH
5428: LD_INT 1
5430: PLUS
5431: PPUSH
5432: LD_VAR 0 1
5436: PPUSH
5437: CALL_OW 1
5441: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5442: LD_VAR 0 1
5446: PPUSH
5447: LD_INT 110
5449: PPUSH
5450: LD_INT 117
5452: PPUSH
5453: CALL_OW 171
// end ; end ;
5457: PPOPN 2
5459: END
// on LeaveBuilding ( b , un ) do var barracks ;
5460: LD_INT 0
5462: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5463: LD_VAR 0 1
5467: PUSH
5468: LD_INT 130
5470: PPUSH
5471: LD_INT 17
5473: PPUSH
5474: CALL_OW 428
5478: PUSH
5479: LD_INT 138
5481: PPUSH
5482: LD_INT 22
5484: PPUSH
5485: CALL_OW 428
5489: PUSH
5490: LD_INT 123
5492: PPUSH
5493: LD_INT 17
5495: PPUSH
5496: CALL_OW 428
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: LIST
5505: IN
5506: IFFALSE 5530
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5508: LD_VAR 0 2
5512: PPUSH
5513: LD_INT 135
5515: PPUSH
5516: LD_INT 31
5518: PPUSH
5519: CALL_OW 428
5523: PPUSH
5524: CALL_OW 180
// exit ;
5528: GO 5804
// end ; if b = HexInfo ( 135 , 31 ) then
5530: LD_VAR 0 1
5534: PUSH
5535: LD_INT 135
5537: PPUSH
5538: LD_INT 31
5540: PPUSH
5541: CALL_OW 428
5545: EQUAL
5546: IFFALSE 5618
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5548: LD_VAR 0 2
5552: PPUSH
5553: LD_INT 106
5555: PPUSH
5556: LD_INT 51
5558: PPUSH
5559: CALL_OW 428
5563: PPUSH
5564: CALL_OW 180
// if not explodeFirstDepot then
5568: LD_EXP 12
5572: NOT
5573: IFFALSE 5616
// begin explodeFirstDepot := true ;
5575: LD_ADDR_EXP 12
5579: PUSH
5580: LD_INT 1
5582: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5583: LD_INT 525
5585: PPUSH
5586: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5590: LD_INT 127
5592: PPUSH
5593: LD_INT 27
5595: PPUSH
5596: LD_INT 1
5598: PPUSH
5599: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5603: LD_INT 125
5605: PPUSH
5606: LD_INT 29
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: CALL_OW 453
// end ; exit ;
5616: GO 5804
// end ; if b = HexInfo ( 106 , 51 ) then
5618: LD_VAR 0 1
5622: PUSH
5623: LD_INT 106
5625: PPUSH
5626: LD_INT 51
5628: PPUSH
5629: CALL_OW 428
5633: EQUAL
5634: IFFALSE 5734
// begin AddComMoveXY ( un , 106 , 93 ) ;
5636: LD_VAR 0 2
5640: PPUSH
5641: LD_INT 106
5643: PPUSH
5644: LD_INT 93
5646: PPUSH
5647: CALL_OW 171
// if not explodeSecondDepot then
5651: LD_EXP 13
5655: NOT
5656: IFFALSE 5732
// begin explodeSecondDepot := true ;
5658: LD_ADDR_EXP 13
5662: PUSH
5663: LD_INT 1
5665: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5666: LD_INT 420
5668: PPUSH
5669: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5673: LD_INT 111
5675: PPUSH
5676: LD_INT 75
5678: PPUSH
5679: LD_INT 1
5681: PPUSH
5682: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5686: LD_INT 111
5688: PPUSH
5689: LD_INT 75
5691: PPUSH
5692: LD_INT 1
5694: PPUSH
5695: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5699: LD_INT 108
5701: PPUSH
5702: LD_INT 69
5704: PPUSH
5705: LD_INT 1
5707: PPUSH
5708: CALL_OW 453
// wait ( 0 0$2 ) ;
5712: LD_INT 70
5714: PPUSH
5715: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5719: LD_INT 94
5721: PPUSH
5722: LD_INT 65
5724: PPUSH
5725: LD_INT 1
5727: PPUSH
5728: CALL_OW 453
// end ; exit ;
5732: GO 5804
// end ; if GetBType ( b ) = b_bunker then
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 266
5743: PUSH
5744: LD_INT 32
5746: EQUAL
5747: IFFALSE 5804
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5749: LD_ADDR_VAR 0 3
5753: PUSH
5754: LD_VAR 0 2
5758: PPUSH
5759: LD_INT 5
5761: PPUSH
5762: CALL 1008 0 2
5766: ST_TO_ADDR
// if barracks then
5767: LD_VAR 0 3
5771: IFFALSE 5789
// AddComEnterUnit ( un , barracks ) else
5773: LD_VAR 0 2
5777: PPUSH
5778: LD_VAR 0 3
5782: PPUSH
5783: CALL_OW 180
5787: GO 5804
// AddComMoveXY ( un , 116 , 110 ) ;
5789: LD_VAR 0 2
5793: PPUSH
5794: LD_INT 116
5796: PPUSH
5797: LD_INT 110
5799: PPUSH
5800: CALL_OW 171
// end ; end ;
5804: PPOPN 3
5806: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5807: LD_VAR 0 1
5811: PUSH
5812: LD_EXP 23
5816: EQUAL
5817: PUSH
5818: LD_VAR 0 2
5822: PUSH
5823: LD_INT 3
5825: PUSH
5826: LD_INT 6
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: IN
5833: AND
5834: IFFALSE 5865
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5836: LD_ADDR_EXP 8
5840: PUSH
5841: LD_VAR 0 1
5845: PPUSH
5846: CALL_OW 250
5850: PUSH
5851: LD_VAR 0 1
5855: PPUSH
5856: CALL_OW 251
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: ST_TO_ADDR
// end ; end_of_file
5865: PPOPN 3
5867: END
// export function Action ; var i , j , un , veh , tmp , rutmp ; begin
5868: LD_INT 0
5870: PPUSH
5871: PPUSH
5872: PPUSH
5873: PPUSH
5874: PPUSH
5875: PPUSH
5876: PPUSH
// InGameOn ;
5877: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5881: LD_INT 5
5883: PPUSH
5884: LD_INT 2
5886: PPUSH
5887: CALL_OW 343
// music_nat := 4 ;
5891: LD_ADDR_OWVAR 71
5895: PUSH
5896: LD_INT 4
5898: ST_TO_ADDR
// music_class := music_combat ;
5899: LD_ADDR_OWVAR 72
5903: PUSH
5904: LD_INT 1
5906: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5907: LD_INT 133
5909: PPUSH
5910: LD_INT 2
5912: PPUSH
5913: LD_INT 2
5915: PPUSH
5916: LD_INT 10
5918: PPUSH
5919: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5923: LD_INT 133
5925: PPUSH
5926: LD_INT 2
5928: PPUSH
5929: CALL_OW 86
// wait ( 0 0$1 ) ;
5933: LD_INT 35
5935: PPUSH
5936: CALL_OW 67
// uc_side := 6 ;
5940: LD_ADDR_OWVAR 20
5944: PUSH
5945: LD_INT 6
5947: ST_TO_ADDR
// uc_nation := 3 ;
5948: LD_ADDR_OWVAR 21
5952: PUSH
5953: LD_INT 3
5955: ST_TO_ADDR
// rutmp := [ ] ;
5956: LD_ADDR_VAR 0 7
5960: PUSH
5961: EMPTY
5962: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5963: LD_INT 6
5965: PPUSH
5966: LD_INT 3
5968: PPUSH
5969: LD_INT 21
5971: PPUSH
5972: LD_INT 1
5974: PPUSH
5975: LD_INT 1
5977: PPUSH
5978: LD_INT 44
5980: PPUSH
5981: LD_INT 66
5983: PPUSH
5984: CALL 336 0 7
// veh := CreateVehicle ;
5988: LD_ADDR_VAR 0 5
5992: PUSH
5993: CALL_OW 45
5997: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_INT 3
6005: PPUSH
6006: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6010: LD_VAR 0 5
6014: PPUSH
6015: LD_INT 8
6017: PPUSH
6018: LD_INT 0
6020: PPUSH
6021: CALL_OW 49
// SetLives ( veh , 500 ) ;
6025: LD_VAR 0 5
6029: PPUSH
6030: LD_INT 500
6032: PPUSH
6033: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
6037: LD_INT 0
6039: PPUSH
6040: LD_INT 3
6042: PPUSH
6043: LD_INT 3
6045: PPUSH
6046: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6050: CALL_OW 44
6054: PPUSH
6055: LD_VAR 0 5
6059: PPUSH
6060: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
6064: LD_VAR 0 5
6068: PPUSH
6069: LD_INT 133
6071: PPUSH
6072: LD_INT 11
6074: PPUSH
6075: CALL_OW 111
// rutmp := [ veh ] ;
6079: LD_ADDR_VAR 0 7
6083: PUSH
6084: LD_VAR 0 5
6088: PUSH
6089: EMPTY
6090: LIST
6091: ST_TO_ADDR
// for i := 1 to 4 do
6092: LD_ADDR_VAR 0 2
6096: PUSH
6097: DOUBLE
6098: LD_INT 1
6100: DEC
6101: ST_TO_ADDR
6102: LD_INT 4
6104: PUSH
6105: FOR_TO
6106: IFFALSE 6213
// begin PrepareHuman ( false , i , 2 ) ;
6108: LD_INT 0
6110: PPUSH
6111: LD_VAR 0 2
6115: PPUSH
6116: LD_INT 2
6118: PPUSH
6119: CALL_OW 380
// un := CreateHuman ;
6123: LD_ADDR_VAR 0 4
6127: PUSH
6128: CALL_OW 44
6132: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6133: LD_VAR 0 4
6137: PPUSH
6138: LD_INT 3
6140: PPUSH
6141: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6145: LD_VAR 0 4
6149: PPUSH
6150: LD_INT 8
6152: PPUSH
6153: LD_INT 0
6155: PPUSH
6156: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
6160: LD_ADDR_VAR 0 7
6164: PUSH
6165: LD_VAR 0 7
6169: PPUSH
6170: LD_VAR 0 7
6174: PUSH
6175: LD_INT 1
6177: PLUS
6178: PPUSH
6179: LD_VAR 0 4
6183: PPUSH
6184: CALL_OW 1
6188: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
6189: LD_VAR 0 4
6193: PPUSH
6194: LD_INT 133
6196: PPUSH
6197: LD_INT 11
6199: PPUSH
6200: CALL_OW 111
// wait ( 0 0$0.5 ) ;
6204: LD_INT 18
6206: PPUSH
6207: CALL_OW 67
// end ;
6211: GO 6105
6213: POP
6214: POP
// for i in rutmp do
6215: LD_ADDR_VAR 0 2
6219: PUSH
6220: LD_VAR 0 7
6224: PUSH
6225: FOR_IN
6226: IFFALSE 6275
// begin AddComMoveXY ( i , 99 , 65 ) ;
6228: LD_VAR 0 2
6232: PPUSH
6233: LD_INT 99
6235: PPUSH
6236: LD_INT 65
6238: PPUSH
6239: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
6243: LD_VAR 0 2
6247: PPUSH
6248: LD_INT 76
6250: PPUSH
6251: LD_INT 108
6253: PPUSH
6254: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6258: LD_VAR 0 2
6262: PPUSH
6263: LD_INT 92
6265: PPUSH
6266: LD_INT 176
6268: PPUSH
6269: CALL_OW 171
// end ;
6273: GO 6225
6275: POP
6276: POP
// wait ( 0 0$10 ) ;
6277: LD_INT 350
6279: PPUSH
6280: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6284: LD_ADDR_VAR 0 6
6288: PUSH
6289: LD_EXP 18
6293: PUSH
6294: LD_EXP 19
6298: PUSH
6299: LD_EXP 20
6303: PUSH
6304: LD_EXP 21
6308: PUSH
6309: LD_EXP 22
6313: PUSH
6314: LD_EXP 23
6318: PUSH
6319: LD_EXP 24
6323: PUSH
6324: LD_EXP 25
6328: PUSH
6329: LD_EXP 27
6333: PUSH
6334: LD_EXP 28
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: PUSH
6351: LD_EXP 29
6355: UNION
6356: ST_TO_ADDR
// tmp := tmp diff 0 ;
6357: LD_ADDR_VAR 0 6
6361: PUSH
6362: LD_VAR 0 6
6366: PUSH
6367: LD_INT 0
6369: DIFF
6370: ST_TO_ADDR
// for i in heikeVehicles do
6371: LD_ADDR_VAR 0 2
6375: PUSH
6376: LD_EXP 30
6380: PUSH
6381: FOR_IN
6382: IFFALSE 6754
// begin if not tmp then
6384: LD_VAR 0 6
6388: NOT
6389: IFFALSE 6393
// continue ;
6391: GO 6381
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6393: LD_INT 2
6395: PPUSH
6396: LD_VAR 0 2
6400: PUSH
6401: LD_INT 5
6403: ARRAY
6404: PPUSH
6405: LD_VAR 0 2
6409: PUSH
6410: LD_INT 1
6412: ARRAY
6413: PPUSH
6414: LD_VAR 0 2
6418: PUSH
6419: LD_INT 2
6421: ARRAY
6422: PPUSH
6423: LD_VAR 0 2
6427: PUSH
6428: LD_INT 3
6430: ARRAY
6431: PPUSH
6432: LD_VAR 0 2
6436: PUSH
6437: LD_INT 4
6439: ARRAY
6440: PPUSH
6441: LD_INT 34
6443: PPUSH
6444: CALL 336 0 7
// veh := CreateVehicle ;
6448: LD_ADDR_VAR 0 5
6452: PUSH
6453: CALL_OW 45
6457: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6458: LD_VAR 0 2
6462: PUSH
6463: LD_INT 4
6465: ARRAY
6466: PUSH
6467: LD_INT 51
6469: PUSH
6470: LD_INT 32
6472: PUSH
6473: LD_INT 12
6475: PUSH
6476: LD_INT 89
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: IN
6485: IFFALSE 6565
// begin if i [ 7 ] [ 1 ] then
6487: LD_VAR 0 2
6491: PUSH
6492: LD_INT 7
6494: ARRAY
6495: PUSH
6496: LD_INT 1
6498: ARRAY
6499: IFFALSE 6526
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6501: LD_VAR 0 5
6505: PPUSH
6506: LD_INT 1
6508: PPUSH
6509: LD_VAR 0 2
6513: PUSH
6514: LD_INT 7
6516: ARRAY
6517: PUSH
6518: LD_INT 1
6520: ARRAY
6521: PPUSH
6522: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6526: LD_VAR 0 2
6530: PUSH
6531: LD_INT 7
6533: ARRAY
6534: PUSH
6535: LD_INT 2
6537: ARRAY
6538: IFFALSE 6565
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6540: LD_VAR 0 5
6544: PPUSH
6545: LD_INT 2
6547: PPUSH
6548: LD_VAR 0 2
6552: PUSH
6553: LD_INT 7
6555: ARRAY
6556: PUSH
6557: LD_INT 2
6559: ARRAY
6560: PPUSH
6561: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6565: LD_VAR 0 5
6569: PPUSH
6570: LD_INT 3
6572: PPUSH
6573: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6577: LD_VAR 0 5
6581: PPUSH
6582: LD_INT 8
6584: PPUSH
6585: LD_INT 0
6587: PPUSH
6588: CALL_OW 49
// for j := 1 to tmp do
6592: LD_ADDR_VAR 0 3
6596: PUSH
6597: DOUBLE
6598: LD_INT 1
6600: DEC
6601: ST_TO_ADDR
6602: LD_VAR 0 6
6606: PUSH
6607: FOR_TO
6608: IFFALSE 6681
// begin if i [ 8 ] = GetClass ( tmp [ j ] ) then
6610: LD_VAR 0 2
6614: PUSH
6615: LD_INT 8
6617: ARRAY
6618: PUSH
6619: LD_VAR 0 6
6623: PUSH
6624: LD_VAR 0 3
6628: ARRAY
6629: PPUSH
6630: CALL_OW 257
6634: EQUAL
6635: IFFALSE 6679
// begin PlaceHumanInUnit ( tmp [ j ] , veh ) ;
6637: LD_VAR 0 6
6641: PUSH
6642: LD_VAR 0 3
6646: ARRAY
6647: PPUSH
6648: LD_VAR 0 5
6652: PPUSH
6653: CALL_OW 52
// tmp := Delete ( tmp , j ) ;
6657: LD_ADDR_VAR 0 6
6661: PUSH
6662: LD_VAR 0 6
6666: PPUSH
6667: LD_VAR 0 3
6671: PPUSH
6672: CALL_OW 3
6676: ST_TO_ADDR
// break ;
6677: GO 6681
// end ; end ;
6679: GO 6607
6681: POP
6682: POP
// if IsEmpty ( veh ) then
6683: LD_VAR 0 5
6687: PPUSH
6688: CALL 32640 0 1
6692: IFFALSE 6730
// begin PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6694: LD_VAR 0 6
6698: PUSH
6699: LD_INT 1
6701: ARRAY
6702: PPUSH
6703: LD_VAR 0 5
6707: PPUSH
6708: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6712: LD_ADDR_VAR 0 6
6716: PUSH
6717: LD_VAR 0 6
6721: PPUSH
6722: LD_INT 1
6724: PPUSH
6725: CALL_OW 3
6729: ST_TO_ADDR
// end ; ComAgressiveMove ( veh , 133 , 7 ) ;
6730: LD_VAR 0 5
6734: PPUSH
6735: LD_INT 133
6737: PPUSH
6738: LD_INT 7
6740: PPUSH
6741: CALL_OW 114
// wait ( 0 0$3 ) ;
6745: LD_INT 105
6747: PPUSH
6748: CALL_OW 67
// end ;
6752: GO 6381
6754: POP
6755: POP
// if tmp then
6756: LD_VAR 0 6
6760: IFFALSE 6816
// for i in tmp do
6762: LD_ADDR_VAR 0 2
6766: PUSH
6767: LD_VAR 0 6
6771: PUSH
6772: FOR_IN
6773: IFFALSE 6814
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6775: LD_VAR 0 2
6779: PPUSH
6780: LD_INT 10
6782: PPUSH
6783: LD_INT 0
6785: PPUSH
6786: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6790: LD_VAR 0 2
6794: PPUSH
6795: LD_INT 146
6797: PPUSH
6798: LD_INT 7
6800: PPUSH
6801: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6805: LD_INT 18
6807: PPUSH
6808: CALL_OW 67
// end ;
6812: GO 6772
6814: POP
6815: POP
// if heikeApes then
6816: LD_EXP 31
6820: IFFALSE 6876
// for i in heikeApes do
6822: LD_ADDR_VAR 0 2
6826: PUSH
6827: LD_EXP 31
6831: PUSH
6832: FOR_IN
6833: IFFALSE 6874
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6835: LD_VAR 0 2
6839: PPUSH
6840: LD_INT 10
6842: PPUSH
6843: LD_INT 0
6845: PPUSH
6846: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6850: LD_VAR 0 2
6854: PPUSH
6855: LD_INT 146
6857: PPUSH
6858: LD_INT 7
6860: PPUSH
6861: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6865: LD_INT 18
6867: PPUSH
6868: CALL_OW 67
// end ;
6872: GO 6832
6874: POP
6875: POP
// DialogueOn ;
6876: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6880: LD_EXP 18
6884: PPUSH
6885: LD_STRING DH-outpost-a-1
6887: PPUSH
6888: CALL_OW 88
// DialogueOff ;
6892: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6896: LD_INT 133
6898: PPUSH
6899: LD_INT 2
6901: PPUSH
6902: LD_INT 2
6904: PPUSH
6905: CALL_OW 331
// InGameOff ;
6909: CALL_OW 9
// music_nat := 0 ;
6913: LD_ADDR_OWVAR 71
6917: PUSH
6918: LD_INT 0
6920: ST_TO_ADDR
// music_class := 0 ;
6921: LD_ADDR_OWVAR 72
6925: PUSH
6926: LD_INT 0
6928: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6929: LD_STRING Outposts
6931: PPUSH
6932: CALL_OW 337
// SaveForQuickRestart ;
6936: CALL_OW 22
// end ;
6940: LD_VAR 0 1
6944: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6945: LD_INT 22
6947: PUSH
6948: LD_INT 2
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 91
6957: PUSH
6958: LD_EXP 21
6962: PUSH
6963: LD_INT 20
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PPUSH
6975: CALL_OW 69
6979: PUSH
6980: LD_EXP 3
6984: AND
6985: PUSH
6986: LD_EXP 21
6990: PPUSH
6991: CALL_OW 302
6995: AND
6996: IFFALSE 7243
6998: GO 7000
7000: DISABLE
7001: LD_INT 0
7003: PPUSH
7004: PPUSH
7005: PPUSH
7006: PPUSH
// begin IbrahimBetrayal ;
7007: CALL 7246 0 0
// repeat wait ( 0 0$1 ) ;
7011: LD_INT 35
7013: PPUSH
7014: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
7018: LD_EXP 21
7022: PPUSH
7023: CALL_OW 301
7027: PUSH
7028: LD_INT 22
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 91
7040: PUSH
7041: LD_EXP 21
7045: PUSH
7046: LD_INT 6
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: PUSH
7063: LD_EXP 21
7067: PPUSH
7068: CALL_OW 302
7072: AND
7073: OR
7074: IFFALSE 7011
// if IsDead ( Ibrahim ) then
7076: LD_EXP 21
7080: PPUSH
7081: CALL_OW 301
7085: IFFALSE 7089
// exit ;
7087: GO 7243
// x := GetX ( Ibrahim ) ;
7089: LD_ADDR_VAR 0 1
7093: PUSH
7094: LD_EXP 21
7098: PPUSH
7099: CALL_OW 250
7103: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
7104: LD_ADDR_VAR 0 2
7108: PUSH
7109: LD_EXP 21
7113: PPUSH
7114: CALL_OW 251
7118: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
7119: LD_ADDR_VAR 0 3
7123: PUSH
7124: LD_EXP 21
7128: PPUSH
7129: CALL_OW 254
7133: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
7134: LD_ADDR_VAR 0 4
7138: PUSH
7139: LD_EXP 21
7143: PPUSH
7144: CALL_OW 256
7148: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
7149: LD_EXP 21
7153: PPUSH
7154: CALL_OW 64
// uc_side := 2 ;
7158: LD_ADDR_OWVAR 20
7162: PUSH
7163: LD_INT 2
7165: ST_TO_ADDR
// uc_nation := 2 ;
7166: LD_ADDR_OWVAR 21
7170: PUSH
7171: LD_INT 2
7173: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
7174: LD_ADDR_EXP 21
7178: PUSH
7179: LD_STRING Ibrahim
7181: PPUSH
7182: LD_INT 0
7184: PPUSH
7185: LD_STRING 
7187: PPUSH
7188: CALL 30516 0 3
7192: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
7193: LD_EXP 21
7197: PPUSH
7198: LD_VAR 0 3
7202: PPUSH
7203: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
7207: LD_EXP 21
7211: PPUSH
7212: LD_VAR 0 1
7216: PPUSH
7217: LD_VAR 0 2
7221: PPUSH
7222: LD_INT 0
7224: PPUSH
7225: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
7229: LD_EXP 21
7233: PPUSH
7234: LD_VAR 0 4
7238: PPUSH
7239: CALL_OW 234
// end ;
7243: PPOPN 4
7245: END
// export function IbrahimBetrayal ; var i , tmp ; begin
7246: LD_INT 0
7248: PPUSH
7249: PPUSH
7250: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
7251: LD_INT 122
7253: PPUSH
7254: LD_INT 77
7256: PPUSH
7257: LD_INT 2
7259: PPUSH
7260: LD_INT 6
7262: NEG
7263: PPUSH
7264: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
7268: LD_EXP 21
7272: PPUSH
7273: LD_INT 123
7275: PPUSH
7276: LD_INT 79
7278: PPUSH
7279: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
7283: LD_EXP 21
7287: PPUSH
7288: LD_INT 125
7290: PPUSH
7291: LD_INT 82
7293: PPUSH
7294: CALL_OW 178
// wait ( 0 0$2 ) ;
7298: LD_INT 70
7300: PPUSH
7301: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
7305: LD_EXP 42
7309: PPUSH
7310: LD_EXP 21
7314: PPUSH
7315: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
7319: LD_EXP 42
7323: PPUSH
7324: LD_STRING DRum-outpost-b-3
7326: PPUSH
7327: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: LD_INT 125
7338: PPUSH
7339: LD_INT 76
7341: PPUSH
7342: CALL_OW 428
7346: PUSH
7347: LD_INT 125
7349: PPUSH
7350: LD_INT 79
7352: PPUSH
7353: CALL_OW 428
7357: PUSH
7358: LD_INT 125
7360: PPUSH
7361: LD_INT 82
7363: PPUSH
7364: CALL_OW 428
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: LIST
7373: ST_TO_ADDR
// for i in tmp do
7374: LD_ADDR_VAR 0 2
7378: PUSH
7379: LD_VAR 0 3
7383: PUSH
7384: FOR_IN
7385: IFFALSE 7401
// SetLives ( i , 200 ) ;
7387: LD_VAR 0 2
7391: PPUSH
7392: LD_INT 200
7394: PPUSH
7395: CALL_OW 234
7399: GO 7384
7401: POP
7402: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7403: LD_EXP 21
7407: PPUSH
7408: LD_STRING DI-outpost-b-4
7410: PPUSH
7411: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7415: LD_EXP 21
7419: PPUSH
7420: LD_INT 5
7422: PPUSH
7423: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7427: LD_EXP 21
7431: PUSH
7432: LD_EXP 42
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PPUSH
7441: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7445: LD_INT 122
7447: PPUSH
7448: LD_INT 77
7450: PPUSH
7451: LD_INT 2
7453: PPUSH
7454: CALL_OW 331
// if Givi then
7458: LD_EXP 19
7462: IFFALSE 7478
// Say ( Givi , DG-1-outpost-b-5 ) else
7464: LD_EXP 19
7468: PPUSH
7469: LD_STRING DG-1-outpost-b-5
7471: PPUSH
7472: CALL_OW 88
7476: GO 7543
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7478: LD_EXP 29
7482: PPUSH
7483: LD_INT 26
7485: PUSH
7486: LD_INT 2
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PPUSH
7493: CALL_OW 72
7497: PUSH
7498: LD_INT 1
7500: ARRAY
7501: PPUSH
7502: LD_STRING DArf-outpost-b-a-5
7504: PPUSH
7505: CALL_OW 88
7509: NOT
7510: IFFALSE 7543
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7512: LD_EXP 29
7516: PPUSH
7517: LD_INT 26
7519: PUSH
7520: LD_INT 1
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: PPUSH
7527: CALL_OW 72
7531: PUSH
7532: LD_INT 1
7534: ARRAY
7535: PPUSH
7536: LD_STRING DArm-outpost-b-a-5
7538: PPUSH
7539: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7543: LD_INT 35
7545: PPUSH
7546: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7550: LD_EXP 21
7554: PPUSH
7555: CALL_OW 301
7559: PUSH
7560: LD_EXP 18
7564: PPUSH
7565: LD_EXP 21
7569: PPUSH
7570: CALL_OW 296
7574: PUSH
7575: LD_INT 6
7577: LESS
7578: PUSH
7579: LD_EXP 21
7583: PPUSH
7584: CALL_OW 302
7588: AND
7589: OR
7590: IFFALSE 7543
// if IsDead ( Ibrahim ) then
7592: LD_EXP 21
7596: PPUSH
7597: CALL_OW 301
7601: IFFALSE 7617
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7603: LD_EXP 18
7607: PPUSH
7608: LD_STRING DH-ibrahimdead-1
7610: PPUSH
7611: CALL_OW 88
// exit ;
7615: GO 7658
// end ; CenterNowOnUnits ( Ibrahim ) ;
7617: LD_EXP 21
7621: PPUSH
7622: CALL_OW 87
// DialogueOn ;
7626: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7630: LD_EXP 21
7634: PPUSH
7635: LD_STRING DI-ibrahimlives-1
7637: PPUSH
7638: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7642: LD_EXP 18
7646: PPUSH
7647: LD_STRING DH-Ibrahimlives-2
7649: PPUSH
7650: CALL_OW 88
// DialogueOff ;
7654: CALL_OW 7
// end ;
7658: LD_VAR 0 1
7662: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7663: LD_INT 11
7665: PPUSH
7666: LD_INT 22
7668: PUSH
7669: LD_INT 2
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 70
7680: PUSH
7681: LD_OWVAR 1
7685: PUSH
7686: LD_INT 18900
7688: PUSH
7689: LD_INT 16800
7691: PUSH
7692: LD_INT 16800
7694: PUSH
7695: LD_INT 15750
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: PUSH
7704: LD_OWVAR 67
7708: ARRAY
7709: GREATEREQUAL
7710: OR
7711: IFFALSE 8219
7713: GO 7715
7715: DISABLE
// begin outerAreaAchived := true ;
7716: LD_ADDR_EXP 15
7720: PUSH
7721: LD_INT 1
7723: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7724: LD_INT 700
7726: PPUSH
7727: CALL_OW 67
// DialogueOn ;
7731: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7735: LD_EXP 26
7739: PPUSH
7740: LD_STRING DShar-radio-1
7742: PPUSH
7743: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7747: LD_EXP 26
7751: PPUSH
7752: LD_STRING DShar-radio-2
7754: PPUSH
7755: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7759: LD_EXP 18
7763: PPUSH
7764: LD_STRING DH-radio-2
7766: PPUSH
7767: CALL_OW 88
// DialogueOff ;
7771: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7775: LD_STRING Gaidar
7777: PPUSH
7778: CALL_OW 337
// if Difficulty < 3 then
7782: LD_OWVAR 67
7786: PUSH
7787: LD_INT 3
7789: LESS
7790: IFFALSE 7856
// begin DialogueOn ;
7792: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7796: LD_INT 11
7798: PPUSH
7799: LD_INT 14
7801: PPUSH
7802: LD_INT 2
7804: PPUSH
7805: LD_INT 6
7807: NEG
7808: PPUSH
7809: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7813: LD_INT 11
7815: PPUSH
7816: LD_INT 14
7818: PPUSH
7819: LD_INT 2
7821: PPUSH
7822: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7826: LD_INT 11
7828: PPUSH
7829: LD_INT 14
7831: PPUSH
7832: CALL_OW 84
// dwait ( 0 0$1 ) ;
7836: LD_INT 35
7838: PPUSH
7839: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7843: LD_EXP 18
7847: PPUSH
7848: CALL_OW 87
// DialogueOff ;
7852: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7856: LD_INT 1050
7858: PUSH
7859: LD_INT 350
7861: PPUSH
7862: LD_INT 525
7864: PPUSH
7865: CALL_OW 12
7869: PUSH
7870: LD_OWVAR 67
7874: MUL
7875: PLUS
7876: PPUSH
7877: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7881: LD_INT 35
7883: PPUSH
7884: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7888: LD_INT 2
7890: PPUSH
7891: LD_INT 1
7893: PPUSH
7894: CALL_OW 428
7898: PUSH
7899: LD_INT 0
7901: EQUAL
7902: IFFALSE 7881
// SetDir ( Gaidar , 2 ) ;
7904: LD_EXP 35
7908: PPUSH
7909: LD_INT 2
7911: PPUSH
7912: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7916: LD_EXP 35
7920: PPUSH
7921: LD_INT 2
7923: PPUSH
7924: LD_INT 1
7926: PPUSH
7927: LD_INT 0
7929: PPUSH
7930: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7934: LD_EXP 35
7938: PPUSH
7939: LD_INT 19
7941: PPUSH
7942: LD_INT 24
7944: PPUSH
7945: CALL_OW 111
// if Difficulty < 3 then
7949: LD_OWVAR 67
7953: PUSH
7954: LD_INT 3
7956: LESS
7957: IFFALSE 7996
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7959: LD_INT 11
7961: PPUSH
7962: LD_INT 14
7964: PPUSH
7965: LD_INT 2
7967: PPUSH
7968: LD_INT 6
7970: NEG
7971: PPUSH
7972: CALL_OW 330
// wait ( 0 0$2 ) ;
7976: LD_INT 70
7978: PPUSH
7979: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
7983: LD_INT 11
7985: PPUSH
7986: LD_INT 14
7988: PPUSH
7989: LD_INT 2
7991: PPUSH
7992: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
7996: LD_EXP 35
8000: PPUSH
8001: LD_INT 210
8003: PPUSH
8004: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
8008: LD_EXP 35
8012: PPUSH
8013: LD_INT 38
8015: PPUSH
8016: LD_INT 47
8018: PPUSH
8019: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
8023: LD_EXP 35
8027: PPUSH
8028: LD_INT 32
8030: PPUSH
8031: LD_INT 59
8033: PPUSH
8034: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
8038: LD_EXP 35
8042: PPUSH
8043: LD_INT 350
8045: PPUSH
8046: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
8050: LD_EXP 35
8054: PPUSH
8055: LD_INT 62
8057: PPUSH
8058: LD_INT 116
8060: PPUSH
8061: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
8065: LD_EXP 35
8069: PPUSH
8070: LD_INT 92
8072: PPUSH
8073: LD_INT 177
8075: PPUSH
8076: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8080: LD_INT 35
8082: PPUSH
8083: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
8087: LD_EXP 35
8091: PPUSH
8092: CALL_OW 301
8096: PUSH
8097: LD_EXP 35
8101: PPUSH
8102: LD_INT 92
8104: PPUSH
8105: LD_INT 177
8107: PPUSH
8108: CALL_OW 307
8112: OR
8113: IFFALSE 8080
// if IsAt ( Gaidar , 92 , 177 ) then
8115: LD_EXP 35
8119: PPUSH
8120: LD_INT 92
8122: PPUSH
8123: LD_INT 177
8125: PPUSH
8126: CALL_OW 307
8130: IFFALSE 8197
// begin DialogueOn ;
8132: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
8136: LD_INT 92
8138: PPUSH
8139: LD_INT 177
8141: PPUSH
8142: LD_INT 2
8144: PPUSH
8145: LD_INT 3
8147: NEG
8148: PPUSH
8149: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
8153: LD_EXP 35
8157: PPUSH
8158: CALL_OW 87
// dwait ( 0 0$2 ) ;
8162: LD_INT 70
8164: PPUSH
8165: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
8169: LD_INT 92
8171: PPUSH
8172: LD_INT 177
8174: PPUSH
8175: LD_INT 2
8177: PPUSH
8178: CALL_OW 331
// DialogueOff ;
8182: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
8186: LD_EXP 35
8190: PPUSH
8191: CALL_OW 64
// exit ;
8195: GO 8219
// end ; gaidarKilled := true ;
8197: LD_ADDR_EXP 14
8201: PUSH
8202: LD_INT 1
8204: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
8205: LD_STRING GaidarKilled
8207: PPUSH
8208: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
8212: LD_STRING ACH_COMMISAR
8214: PPUSH
8215: CALL_OW 543
// end ;
8219: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
8220: LD_INT 2
8222: PPUSH
8223: LD_EXP 35
8227: PPUSH
8228: CALL_OW 292
8232: IFFALSE 8249
8234: GO 8236
8236: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
8237: LD_EXP 35
8241: PPUSH
8242: LD_STRING DT-objective-1
8244: PPUSH
8245: CALL_OW 88
8249: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
8250: LD_INT 22
8252: PUSH
8253: LD_INT 2
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 2
8262: PUSH
8263: LD_INT 95
8265: PUSH
8266: LD_INT 5
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: PUSH
8273: LD_INT 95
8275: PUSH
8276: LD_INT 6
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: LD_INT 95
8285: PUSH
8286: LD_INT 7
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PPUSH
8303: CALL_OW 69
8307: IFFALSE 8344
8309: GO 8311
8311: DISABLE
// begin DialogueOn ;
8312: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
8316: LD_EXP 18
8320: PPUSH
8321: LD_STRING DH-outpost-last-1
8323: PPUSH
8324: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
8328: LD_EXP 34
8332: PPUSH
8333: LD_STRING DB-outpost-last-2
8335: PPUSH
8336: CALL_OW 94
// DialogueOff ;
8340: CALL_OW 7
// end ;
8344: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
8345: LD_INT 200
8347: PPUSH
8348: CALL_OW 256
8352: PUSH
8353: LD_INT 999
8355: LESS
8356: PUSH
8357: LD_INT 200
8359: PPUSH
8360: CALL_OW 255
8364: PUSH
8365: LD_INT 2
8367: EQUAL
8368: OR
8369: IFFALSE 8542
8371: GO 8373
8373: DISABLE
8374: LD_INT 0
8376: PPUSH
8377: PPUSH
// begin if not earlyEscape then
8378: LD_EXP 16
8382: NOT
8383: IFFALSE 8409
// begin SayRadio ( Burlak , DB-end-1 ) ;
8385: LD_EXP 34
8389: PPUSH
8390: LD_STRING DB-end-1
8392: PPUSH
8393: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8397: LD_EXP 18
8401: PPUSH
8402: LD_STRING DH-end-2
8404: PPUSH
8405: CALL_OW 88
// end ; if tick <= 15 15$00 then
8409: LD_OWVAR 1
8413: PUSH
8414: LD_INT 31500
8416: LESSEQUAL
8417: IFFALSE 8426
// SetAchievement ( ACH_FIST ) ;
8419: LD_STRING ACH_FIST
8421: PPUSH
8422: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8426: LD_ADDR_VAR 0 2
8430: PUSH
8431: LD_INT 22
8433: PUSH
8434: LD_INT 3
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: LD_INT 21
8446: PUSH
8447: LD_INT 3
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PPUSH
8462: CALL_OW 69
8466: ST_TO_ADDR
// if not tmp then
8467: LD_VAR 0 2
8471: NOT
8472: IFFALSE 8476
// exit ;
8474: GO 8542
// for i in tmp do
8476: LD_ADDR_VAR 0 1
8480: PUSH
8481: LD_VAR 0 2
8485: PUSH
8486: FOR_IN
8487: IFFALSE 8540
// begin SetTag ( i , tEscape ) ;
8489: LD_VAR 0 1
8493: PPUSH
8494: LD_EXP 17
8498: PPUSH
8499: CALL_OW 109
// if IsInUnit ( i ) then
8503: LD_VAR 0 1
8507: PPUSH
8508: CALL_OW 310
8512: IFFALSE 8523
// ComExitBuilding ( i ) ;
8514: LD_VAR 0 1
8518: PPUSH
8519: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8523: LD_VAR 0 1
8527: PPUSH
8528: LD_INT 92
8530: PPUSH
8531: LD_INT 177
8533: PPUSH
8534: CALL_OW 171
// end ;
8538: GO 8486
8540: POP
8541: POP
// end ;
8542: PPOPN 2
8544: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8545: LD_INT 4
8547: PPUSH
8548: LD_INT 22
8550: PUSH
8551: LD_INT 2
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PPUSH
8558: CALL_OW 70
8562: PUSH
8563: LD_EXP 15
8567: NOT
8568: AND
8569: PUSH
8570: LD_EXP 27
8574: PPUSH
8575: CALL_OW 302
8579: AND
8580: IFFALSE 8820
8582: GO 8584
8584: DISABLE
// begin DialogueOn ;
8585: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8589: LD_INT 111
8591: PPUSH
8592: LD_INT 54
8594: PPUSH
8595: LD_INT 2
8597: PPUSH
8598: LD_INT 16
8600: NEG
8601: PPUSH
8602: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8606: LD_INT 111
8608: PPUSH
8609: LD_INT 53
8611: PPUSH
8612: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8616: LD_INT 10
8618: PPUSH
8619: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8623: LD_EXP 27
8627: PPUSH
8628: LD_STRING DKs-Hannibal-1
8630: PPUSH
8631: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8635: LD_EXP 27
8639: PPUSH
8640: LD_STRING DKs-Hannibal-2
8642: PPUSH
8643: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8647: LD_EXP 27
8651: PPUSH
8652: LD_STRING DKs-Hannibal-3
8654: PPUSH
8655: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8659: LD_EXP 27
8663: PPUSH
8664: LD_STRING DKs-Hannibal-4
8666: PPUSH
8667: CALL_OW 88
// dwait ( 0 0$1 ) ;
8671: LD_INT 35
8673: PPUSH
8674: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8678: LD_INT 111
8680: PPUSH
8681: LD_INT 54
8683: PPUSH
8684: LD_INT 2
8686: PPUSH
8687: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8691: LD_INT 173
8693: PPUSH
8694: LD_INT 76
8696: PPUSH
8697: LD_INT 2
8699: PPUSH
8700: LD_INT 12
8702: NEG
8703: PPUSH
8704: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8708: LD_INT 173
8710: PPUSH
8711: LD_INT 76
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8721: LD_INT 173
8723: PPUSH
8724: LD_INT 76
8726: PPUSH
8727: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8731: LD_EXP 27
8735: PPUSH
8736: LD_STRING DKs-Hannibal-5
8738: PPUSH
8739: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8743: LD_EXP 22
8747: PUSH
8748: LD_INT 22
8750: PUSH
8751: LD_INT 2
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PUSH
8758: LD_INT 34
8760: PUSH
8761: LD_INT 26
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PPUSH
8772: CALL_OW 69
8776: NOT
8777: AND
8778: IFFALSE 8816
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8780: LD_EXP 22
8784: PPUSH
8785: LD_STRING DKam-Hannibal-a-6
8787: PPUSH
8788: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8792: LD_EXP 22
8796: PPUSH
8797: LD_STRING DKam-Hannibal-a-7
8799: PPUSH
8800: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8804: LD_EXP 19
8808: PPUSH
8809: LD_STRING DG-Hannibal-a-8
8811: PPUSH
8812: CALL_OW 88
// end ; DialogueOff ;
8816: CALL_OW 7
// end ;
8820: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8821: LD_INT 225
8823: PPUSH
8824: CALL_OW 302
8828: PUSH
8829: LD_INT 200
8831: PPUSH
8832: CALL_OW 302
8836: AND
8837: PUSH
8838: LD_INT 12
8840: PPUSH
8841: LD_INT 21
8843: PUSH
8844: LD_INT 3
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PPUSH
8851: CALL_OW 70
8855: PUSH
8856: LD_INT 2
8858: GREATER
8859: AND
8860: PUSH
8861: LD_INT 13
8863: PPUSH
8864: LD_INT 22
8866: PUSH
8867: LD_INT 2
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PPUSH
8874: CALL_OW 70
8878: PUSH
8879: LD_INT 3
8881: GREATER
8882: AND
8883: IFFALSE 8896
8885: GO 8887
8887: DISABLE
// hannibalPath := true ;
8888: LD_ADDR_EXP 9
8892: PUSH
8893: LD_INT 1
8895: ST_TO_ADDR
8896: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8897: LD_EXP 9
8901: PUSH
8902: LD_INT 6
8904: PPUSH
8905: LD_INT 22
8907: PUSH
8908: LD_INT 2
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PPUSH
8915: CALL_OW 70
8919: AND
8920: IFFALSE 9265
8922: GO 8924
8924: DISABLE
8925: LD_INT 0
8927: PPUSH
8928: PPUSH
8929: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8930: LD_ADDR_VAR 0 2
8934: PUSH
8935: LD_INT 6
8937: PPUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PPUSH
8948: CALL_OW 70
8952: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8953: LD_ADDR_VAR 0 3
8957: PUSH
8958: LD_VAR 0 2
8962: PPUSH
8963: LD_INT 34
8965: PUSH
8966: LD_INT 26
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PPUSH
8973: CALL_OW 72
8977: PUSH
8978: LD_INT 0
8980: GREATER
8981: ST_TO_ADDR
// DialogueOn ;
8982: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8986: LD_EXP 18
8990: PPUSH
8991: LD_STRING DH-Cleverattack-1
8993: PPUSH
8994: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8998: LD_EXP 18
9002: PPUSH
9003: LD_STRING DH-Cleverattack-2
9005: PPUSH
9006: CALL_OW 88
// if hasFlameThrower then
9010: LD_VAR 0 3
9014: IFFALSE 9042
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
9016: LD_EXP 34
9020: PPUSH
9021: LD_STRING DB-Cleverattack-3
9023: PPUSH
9024: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
9028: LD_EXP 18
9032: PPUSH
9033: LD_STRING DH-Cleverattack-4
9035: PPUSH
9036: CALL_OW 88
// end else
9040: GO 9066
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
9042: LD_EXP 34
9046: PPUSH
9047: LD_STRING DB-Cleverattack-a-3
9049: PPUSH
9050: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
9054: LD_EXP 18
9058: PPUSH
9059: LD_STRING DH-Cleverattack-a-4
9061: PPUSH
9062: CALL_OW 88
// end ; DialogueOff ;
9066: CALL_OW 7
// if not hasFlameThrower then
9070: LD_VAR 0 3
9074: NOT
9075: IFFALSE 9079
// exit ;
9077: GO 9265
// earlyEscape := true ;
9079: LD_ADDR_EXP 16
9083: PUSH
9084: LD_INT 1
9086: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9087: LD_INT 140
9089: PPUSH
9090: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
9094: LD_ADDR_VAR 0 2
9098: PUSH
9099: LD_INT 22
9101: PUSH
9102: LD_INT 3
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: LD_INT 2
9111: PUSH
9112: LD_INT 25
9114: PUSH
9115: LD_INT 1
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: LD_INT 25
9124: PUSH
9125: LD_INT 2
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 25
9134: PUSH
9135: LD_INT 4
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PPUSH
9152: CALL_OW 69
9156: PUSH
9157: LD_EXP 21
9161: PUSH
9162: LD_EXP 36
9166: PUSH
9167: LD_EXP 35
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: LIST
9176: DIFF
9177: ST_TO_ADDR
// for i in tmp do
9178: LD_ADDR_VAR 0 1
9182: PUSH
9183: LD_VAR 0 2
9187: PUSH
9188: FOR_IN
9189: IFFALSE 9263
// begin if Prob ( 40 + 10 * Difficulty ) then
9191: LD_INT 40
9193: PUSH
9194: LD_INT 10
9196: PUSH
9197: LD_OWVAR 67
9201: MUL
9202: PLUS
9203: PPUSH
9204: CALL_OW 13
9208: IFFALSE 9212
// continue ;
9210: GO 9188
// SetTag ( i , tEscape ) ;
9212: LD_VAR 0 1
9216: PPUSH
9217: LD_EXP 17
9221: PPUSH
9222: CALL_OW 109
// if IsInUnit ( i ) then
9226: LD_VAR 0 1
9230: PPUSH
9231: CALL_OW 310
9235: IFFALSE 9246
// ComExitBuilding ( i ) ;
9237: LD_VAR 0 1
9241: PPUSH
9242: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
9246: LD_VAR 0 1
9250: PPUSH
9251: LD_INT 92
9253: PPUSH
9254: LD_INT 177
9256: PPUSH
9257: CALL_OW 171
// end ;
9261: GO 9188
9263: POP
9264: POP
// end ;
9265: PPOPN 3
9267: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
9268: LD_INT 9
9270: PPUSH
9271: LD_INT 2
9273: PUSH
9274: LD_INT 22
9276: PUSH
9277: LD_INT 3
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 22
9286: PUSH
9287: LD_INT 6
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 70
9303: IFFALSE 9401
9305: GO 9307
9307: DISABLE
9308: LD_INT 0
9310: PPUSH
// begin enable ;
9311: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
9312: LD_ADDR_VAR 0 1
9316: PUSH
9317: LD_INT 9
9319: PPUSH
9320: LD_INT 2
9322: PUSH
9323: LD_INT 22
9325: PUSH
9326: LD_INT 3
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: LD_INT 22
9335: PUSH
9336: LD_INT 6
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: LIST
9347: PPUSH
9348: CALL_OW 70
9352: PUSH
9353: FOR_IN
9354: IFFALSE 9399
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
9356: LD_VAR 0 1
9360: PPUSH
9361: CALL_OW 110
9365: PUSH
9366: LD_EXP 17
9370: EQUAL
9371: PUSH
9372: LD_VAR 0 1
9376: PPUSH
9377: CALL_OW 255
9381: PUSH
9382: LD_INT 6
9384: EQUAL
9385: OR
9386: IFFALSE 9397
// RemoveUnit ( i ) ;
9388: LD_VAR 0 1
9392: PPUSH
9393: CALL_OW 64
9397: GO 9353
9399: POP
9400: POP
// end ;
9401: PPOPN 1
9403: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9404: LD_EXP 23
9408: PUSH
9409: LD_EXP 23
9413: PPUSH
9414: CALL_OW 256
9418: PUSH
9419: LD_INT 3
9421: LESS
9422: AND
9423: IFFALSE 9469
9425: GO 9427
9427: DISABLE
// begin DialogueOn ;
9428: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9432: LD_EXP 23
9436: PPUSH
9437: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9441: LD_EXP 23
9445: PPUSH
9446: LD_STRING DK-Kkilled-1
9448: PPUSH
9449: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9453: LD_EXP 18
9457: PPUSH
9458: LD_STRING DH-Kkilled-2
9460: PPUSH
9461: CALL_OW 88
// DialogueOff ;
9465: CALL_OW 7
// end ;
9469: END
// every 0 0$1 trigger kaiaKilledByRussian do
9470: LD_EXP 8
9474: IFFALSE 9491
9476: GO 9478
9478: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9479: LD_EXP 18
9483: PPUSH
9484: LD_STRING DH-Kkilled-3
9486: PPUSH
9487: CALL_OW 88
9491: END
// every 0 0$1 trigger tick >= 24 24$00 do
9492: LD_OWVAR 1
9496: PUSH
9497: LD_INT 50400
9499: GREATEREQUAL
9500: IFFALSE 9537
9502: GO 9504
9504: DISABLE
// begin DialogueOn ;
9505: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9509: LD_EXP 26
9513: PPUSH
9514: LD_STRING DShar-slow-1
9516: PPUSH
9517: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9521: LD_EXP 26
9525: PPUSH
9526: LD_STRING DShar-slow-2
9528: PPUSH
9529: CALL_OW 94
// DialogueOff ;
9533: CALL_OW 7
// end ;
9537: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9538: LD_OWVAR 1
9542: PUSH
9543: LD_INT 84000
9545: PUSH
9546: LD_INT 75600
9548: PUSH
9549: LD_INT 67200
9551: PUSH
9552: LD_INT 63000
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: PUSH
9561: LD_OWVAR 67
9565: ARRAY
9566: GREATEREQUAL
9567: IFFALSE 9611
9569: GO 9571
9571: DISABLE
// begin DialogueOn ;
9572: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9576: LD_EXP 26
9580: PPUSH
9581: LD_STRING DShar-fail-1
9583: PPUSH
9584: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9588: LD_EXP 26
9592: PPUSH
9593: LD_STRING DShar-fail-2
9595: PPUSH
9596: CALL_OW 94
// DialogueOff ;
9600: CALL_OW 7
// YouLost ( Time ) ;
9604: LD_STRING Time
9606: PPUSH
9607: CALL_OW 104
// end ;
9611: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9612: LD_INT 22
9614: PUSH
9615: LD_INT 3
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 2
9624: PUSH
9625: LD_INT 30
9627: PUSH
9628: LD_INT 1
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: LD_INT 30
9637: PUSH
9638: LD_INT 0
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: LIST
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PPUSH
9654: CALL_OW 69
9658: PUSH
9659: LD_INT 0
9661: EQUAL
9662: IFFALSE 10259
9664: GO 9666
9666: DISABLE
9667: LD_INT 0
9669: PPUSH
// begin if ( tick + gameTime ) <= 55 55$00 then
9670: LD_OWVAR 1
9674: PUSH
9675: LD_EXP 5
9679: PLUS
9680: PUSH
9681: LD_INT 115500
9683: LESSEQUAL
9684: IFFALSE 9693
// SetAchievement ( ACH_HSPEED_4 ) ;
9686: LD_STRING ACH_HSPEED_4
9688: PPUSH
9689: CALL_OW 543
// if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9693: LD_OWVAR 1
9697: PUSH
9698: LD_EXP 5
9702: PLUS
9703: PUSH
9704: LD_INT 178500
9706: PUSH
9707: LD_INT 157500
9709: PUSH
9710: LD_INT 136500
9712: PUSH
9713: LD_INT 126000
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: PUSH
9722: LD_OWVAR 67
9726: ARRAY
9727: LESSEQUAL
9728: IFFALSE 9742
// AddMedal ( med1 , 1 ) else
9730: LD_STRING med1
9732: PPUSH
9733: LD_INT 1
9735: PPUSH
9736: CALL_OW 101
9740: GO 9753
// AddMedal ( med1 , - 1 ) ;
9742: LD_STRING med1
9744: PPUSH
9745: LD_INT 1
9747: NEG
9748: PPUSH
9749: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9753: LD_EXP 7
9757: PUSH
9758: LD_INT 3
9760: GREATEREQUAL
9761: PUSH
9762: LD_EXP 11
9766: MUL
9767: PUSH
9768: LD_EXP 9
9772: MUL
9773: PUSH
9774: LD_EXP 6
9778: PUSH
9779: LD_INT 6
9781: PUSH
9782: LD_INT 5
9784: PUSH
9785: LD_INT 4
9787: PUSH
9788: LD_INT 3
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: LD_OWVAR 67
9801: ARRAY
9802: LESS
9803: MUL
9804: IFFALSE 9818
// AddMedal ( med2 , 1 ) else
9806: LD_STRING med2
9808: PPUSH
9809: LD_INT 1
9811: PPUSH
9812: CALL_OW 101
9816: GO 9892
// if flamethrowers < 3 then
9818: LD_EXP 7
9822: PUSH
9823: LD_INT 3
9825: LESS
9826: IFFALSE 9841
// AddMedal ( med2 , - 1 ) else
9828: LD_STRING med2
9830: PPUSH
9831: LD_INT 1
9833: NEG
9834: PPUSH
9835: CALL_OW 101
9839: GO 9892
// if not baseHill then
9841: LD_EXP 11
9845: NOT
9846: IFFALSE 9861
// AddMedal ( med2 , - 2 ) else
9848: LD_STRING med2
9850: PPUSH
9851: LD_INT 2
9853: NEG
9854: PPUSH
9855: CALL_OW 101
9859: GO 9892
// if not hannibalPath then
9861: LD_EXP 9
9865: NOT
9866: IFFALSE 9881
// AddMedal ( med2 , - 3 ) else
9868: LD_STRING med2
9870: PPUSH
9871: LD_INT 3
9873: NEG
9874: PPUSH
9875: CALL_OW 101
9879: GO 9892
// AddMedal ( med3 , - 2 ) ;
9881: LD_STRING med3
9883: PPUSH
9884: LD_INT 2
9886: NEG
9887: PPUSH
9888: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9892: LD_EXP 14
9896: PPUSH
9897: LD_STRING 04_2_GaidarKilled
9899: PPUSH
9900: CALL_OW 39
// if gaidarKilled then
9904: LD_EXP 14
9908: IFFALSE 9922
// AddMedal ( med3 , 1 ) else
9910: LD_STRING med3
9912: PPUSH
9913: LD_INT 1
9915: PPUSH
9916: CALL_OW 101
9920: GO 9933
// AddMedal ( med3 , - 1 ) ;
9922: LD_STRING med3
9924: PPUSH
9925: LD_INT 1
9927: NEG
9928: PPUSH
9929: CALL_OW 101
// GiveMedals ( MAIN ) ;
9933: LD_STRING MAIN
9935: PPUSH
9936: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9940: LD_INT 22
9942: PUSH
9943: LD_INT 2
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 3
9952: PUSH
9953: LD_INT 23
9955: PUSH
9956: LD_INT 0
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 69
9975: PPUSH
9976: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9980: LD_EXP 18
9984: PPUSH
9985: LD_STRING 04_2_Heike
9987: PPUSH
9988: CALL_OW 38
// if Aviradze then
9992: LD_EXP 28
9996: IFFALSE 10010
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9998: LD_EXP 28
10002: PPUSH
10003: LD_STRING 04_2_Aviradze
10005: PPUSH
10006: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
10010: LD_EXP 21
10014: PUSH
10015: LD_EXP 21
10019: PPUSH
10020: CALL_OW 255
10024: PUSH
10025: LD_INT 2
10027: EQUAL
10028: AND
10029: IFFALSE 10059
// begin if ibrahimOnRuSide then
10031: LD_EXP 3
10035: IFFALSE 10047
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
10037: LD_INT 1
10039: PPUSH
10040: LD_STRING 04_2_IbrahimJoined
10042: PPUSH
10043: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
10047: LD_EXP 21
10051: PPUSH
10052: LD_STRING 04_2_Ibrahim
10054: PPUSH
10055: CALL_OW 38
// end ; if Kamil then
10059: LD_EXP 22
10063: IFFALSE 10077
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
10065: LD_EXP 22
10069: PPUSH
10070: LD_STRING 04_2_Kamil
10072: PPUSH
10073: CALL_OW 38
// if Sophia then
10077: LD_EXP 24
10081: IFFALSE 10095
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
10083: LD_EXP 24
10087: PPUSH
10088: LD_STRING 04_2_Sophia
10090: PPUSH
10091: CALL_OW 38
// if Kaia then
10095: LD_EXP 23
10099: IFFALSE 10113
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
10101: LD_EXP 23
10105: PPUSH
10106: LD_STRING 04_2_Kaia
10108: PPUSH
10109: CALL_OW 38
// if Givi then
10113: LD_EXP 19
10117: IFFALSE 10131
// SaveCharacters ( Givi , 04_2_Givi ) ;
10119: LD_EXP 19
10123: PPUSH
10124: LD_STRING 04_2_Givi
10126: PPUSH
10127: CALL_OW 38
// if Mike then
10131: LD_EXP 20
10135: IFFALSE 10149
// SaveCharacters ( Mike , 04_2_Mike ) ;
10137: LD_EXP 20
10141: PPUSH
10142: LD_STRING 04_2_Mike
10144: PPUSH
10145: CALL_OW 38
// if Markov then
10149: LD_EXP 25
10153: IFFALSE 10167
// SaveCharacters ( Markov , 04_2_Markov ) ;
10155: LD_EXP 25
10159: PPUSH
10160: LD_STRING 04_2_Markov
10162: PPUSH
10163: CALL_OW 38
// if Kurt then
10167: LD_EXP 27
10171: IFFALSE 10185
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
10173: LD_EXP 27
10177: PPUSH
10178: LD_STRING 04_2_Kurt
10180: PPUSH
10181: CALL_OW 38
// if heikeSecondSquad then
10185: LD_EXP 29
10189: IFFALSE 10203
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
10191: LD_EXP 29
10195: PPUSH
10196: LD_STRING 04_2_others
10198: PPUSH
10199: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10203: LD_ADDR_VAR 0 1
10207: PUSH
10208: LD_INT 22
10210: PUSH
10211: LD_INT 2
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: PUSH
10218: LD_INT 23
10220: PUSH
10221: LD_INT 0
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PPUSH
10232: CALL_OW 69
10236: ST_TO_ADDR
// if tmp then
10237: LD_VAR 0 1
10241: IFFALSE 10255
// SaveCharacters ( tmp , 04_2_apes ) ;
10243: LD_VAR 0 1
10247: PPUSH
10248: LD_STRING 04_2_apes
10250: PPUSH
10251: CALL_OW 38
// YouWin ;
10255: CALL_OW 103
// end ; end_of_file
10259: PPOPN 1
10261: END
// export globalGameSaveCounter ; every 0 0$1 do
10262: GO 10264
10264: DISABLE
// begin enable ;
10265: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10266: LD_STRING updateTimer(
10268: PUSH
10269: LD_OWVAR 1
10273: STR
10274: PUSH
10275: LD_STRING );
10277: STR
10278: PPUSH
10279: CALL_OW 559
// end ;
10283: END
// every 0 0$1 do
10284: GO 10286
10286: DISABLE
// begin globalGameSaveCounter := 0 ;
10287: LD_ADDR_EXP 43
10291: PUSH
10292: LD_INT 0
10294: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10295: LD_STRING setGameSaveCounter(0)
10297: PPUSH
10298: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10302: LD_STRING initStreamRollete();
10304: PPUSH
10305: CALL_OW 559
// InitStreamMode ;
10309: CALL 11635 0 0
// DefineStreamItems ( false ) ;
10313: LD_INT 0
10315: PPUSH
10316: CALL 12099 0 1
// end ;
10320: END
// export function SOS_MapStart ( ) ; begin
10321: LD_INT 0
10323: PPUSH
// if streamModeActive then
10324: LD_EXP 44
10328: IFFALSE 10337
// DefineStreamItems ( true ) ;
10330: LD_INT 1
10332: PPUSH
10333: CALL 12099 0 1
// UpdateLuaVariables ( ) ;
10337: CALL 10354 0 0
// UpdateFactoryWaypoints ( ) ;
10341: CALL 24968 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10345: CALL 25225 0 0
// end ;
10349: LD_VAR 0 1
10353: RET
// function UpdateLuaVariables ( ) ; begin
10354: LD_INT 0
10356: PPUSH
// if globalGameSaveCounter then
10357: LD_EXP 43
10361: IFFALSE 10395
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10363: LD_ADDR_EXP 43
10367: PUSH
10368: LD_EXP 43
10372: PPUSH
10373: CALL 69198 0 1
10377: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10378: LD_STRING setGameSaveCounter(
10380: PUSH
10381: LD_EXP 43
10385: STR
10386: PUSH
10387: LD_STRING )
10389: STR
10390: PPUSH
10391: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10395: LD_STRING setGameDifficulty(
10397: PUSH
10398: LD_OWVAR 67
10402: STR
10403: PUSH
10404: LD_STRING )
10406: STR
10407: PPUSH
10408: CALL_OW 559
// end ;
10412: LD_VAR 0 1
10416: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10417: LD_INT 0
10419: PPUSH
// if p2 = stream_mode then
10420: LD_VAR 0 2
10424: PUSH
10425: LD_INT 100
10427: EQUAL
10428: IFFALSE 11431
// begin if not StreamModeActive then
10430: LD_EXP 44
10434: NOT
10435: IFFALSE 10445
// StreamModeActive := true ;
10437: LD_ADDR_EXP 44
10441: PUSH
10442: LD_INT 1
10444: ST_TO_ADDR
// if p3 = 0 then
10445: LD_VAR 0 3
10449: PUSH
10450: LD_INT 0
10452: EQUAL
10453: IFFALSE 10459
// InitStreamMode ;
10455: CALL 11635 0 0
// if p3 = 1 then
10459: LD_VAR 0 3
10463: PUSH
10464: LD_INT 1
10466: EQUAL
10467: IFFALSE 10477
// sRocket := true ;
10469: LD_ADDR_EXP 49
10473: PUSH
10474: LD_INT 1
10476: ST_TO_ADDR
// if p3 = 2 then
10477: LD_VAR 0 3
10481: PUSH
10482: LD_INT 2
10484: EQUAL
10485: IFFALSE 10495
// sSpeed := true ;
10487: LD_ADDR_EXP 48
10491: PUSH
10492: LD_INT 1
10494: ST_TO_ADDR
// if p3 = 3 then
10495: LD_VAR 0 3
10499: PUSH
10500: LD_INT 3
10502: EQUAL
10503: IFFALSE 10513
// sEngine := true ;
10505: LD_ADDR_EXP 50
10509: PUSH
10510: LD_INT 1
10512: ST_TO_ADDR
// if p3 = 4 then
10513: LD_VAR 0 3
10517: PUSH
10518: LD_INT 4
10520: EQUAL
10521: IFFALSE 10531
// sSpec := true ;
10523: LD_ADDR_EXP 47
10527: PUSH
10528: LD_INT 1
10530: ST_TO_ADDR
// if p3 = 5 then
10531: LD_VAR 0 3
10535: PUSH
10536: LD_INT 5
10538: EQUAL
10539: IFFALSE 10549
// sLevel := true ;
10541: LD_ADDR_EXP 51
10545: PUSH
10546: LD_INT 1
10548: ST_TO_ADDR
// if p3 = 6 then
10549: LD_VAR 0 3
10553: PUSH
10554: LD_INT 6
10556: EQUAL
10557: IFFALSE 10567
// sArmoury := true ;
10559: LD_ADDR_EXP 52
10563: PUSH
10564: LD_INT 1
10566: ST_TO_ADDR
// if p3 = 7 then
10567: LD_VAR 0 3
10571: PUSH
10572: LD_INT 7
10574: EQUAL
10575: IFFALSE 10585
// sRadar := true ;
10577: LD_ADDR_EXP 53
10581: PUSH
10582: LD_INT 1
10584: ST_TO_ADDR
// if p3 = 8 then
10585: LD_VAR 0 3
10589: PUSH
10590: LD_INT 8
10592: EQUAL
10593: IFFALSE 10603
// sBunker := true ;
10595: LD_ADDR_EXP 54
10599: PUSH
10600: LD_INT 1
10602: ST_TO_ADDR
// if p3 = 9 then
10603: LD_VAR 0 3
10607: PUSH
10608: LD_INT 9
10610: EQUAL
10611: IFFALSE 10621
// sHack := true ;
10613: LD_ADDR_EXP 55
10617: PUSH
10618: LD_INT 1
10620: ST_TO_ADDR
// if p3 = 10 then
10621: LD_VAR 0 3
10625: PUSH
10626: LD_INT 10
10628: EQUAL
10629: IFFALSE 10639
// sFire := true ;
10631: LD_ADDR_EXP 56
10635: PUSH
10636: LD_INT 1
10638: ST_TO_ADDR
// if p3 = 11 then
10639: LD_VAR 0 3
10643: PUSH
10644: LD_INT 11
10646: EQUAL
10647: IFFALSE 10657
// sRefresh := true ;
10649: LD_ADDR_EXP 57
10653: PUSH
10654: LD_INT 1
10656: ST_TO_ADDR
// if p3 = 12 then
10657: LD_VAR 0 3
10661: PUSH
10662: LD_INT 12
10664: EQUAL
10665: IFFALSE 10675
// sExp := true ;
10667: LD_ADDR_EXP 58
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// if p3 = 13 then
10675: LD_VAR 0 3
10679: PUSH
10680: LD_INT 13
10682: EQUAL
10683: IFFALSE 10693
// sDepot := true ;
10685: LD_ADDR_EXP 59
10689: PUSH
10690: LD_INT 1
10692: ST_TO_ADDR
// if p3 = 14 then
10693: LD_VAR 0 3
10697: PUSH
10698: LD_INT 14
10700: EQUAL
10701: IFFALSE 10711
// sFlag := true ;
10703: LD_ADDR_EXP 60
10707: PUSH
10708: LD_INT 1
10710: ST_TO_ADDR
// if p3 = 15 then
10711: LD_VAR 0 3
10715: PUSH
10716: LD_INT 15
10718: EQUAL
10719: IFFALSE 10729
// sKamikadze := true ;
10721: LD_ADDR_EXP 68
10725: PUSH
10726: LD_INT 1
10728: ST_TO_ADDR
// if p3 = 16 then
10729: LD_VAR 0 3
10733: PUSH
10734: LD_INT 16
10736: EQUAL
10737: IFFALSE 10747
// sTroll := true ;
10739: LD_ADDR_EXP 69
10743: PUSH
10744: LD_INT 1
10746: ST_TO_ADDR
// if p3 = 17 then
10747: LD_VAR 0 3
10751: PUSH
10752: LD_INT 17
10754: EQUAL
10755: IFFALSE 10765
// sSlow := true ;
10757: LD_ADDR_EXP 70
10761: PUSH
10762: LD_INT 1
10764: ST_TO_ADDR
// if p3 = 18 then
10765: LD_VAR 0 3
10769: PUSH
10770: LD_INT 18
10772: EQUAL
10773: IFFALSE 10783
// sLack := true ;
10775: LD_ADDR_EXP 71
10779: PUSH
10780: LD_INT 1
10782: ST_TO_ADDR
// if p3 = 19 then
10783: LD_VAR 0 3
10787: PUSH
10788: LD_INT 19
10790: EQUAL
10791: IFFALSE 10801
// sTank := true ;
10793: LD_ADDR_EXP 73
10797: PUSH
10798: LD_INT 1
10800: ST_TO_ADDR
// if p3 = 20 then
10801: LD_VAR 0 3
10805: PUSH
10806: LD_INT 20
10808: EQUAL
10809: IFFALSE 10819
// sRemote := true ;
10811: LD_ADDR_EXP 74
10815: PUSH
10816: LD_INT 1
10818: ST_TO_ADDR
// if p3 = 21 then
10819: LD_VAR 0 3
10823: PUSH
10824: LD_INT 21
10826: EQUAL
10827: IFFALSE 10837
// sPowell := true ;
10829: LD_ADDR_EXP 75
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// if p3 = 22 then
10837: LD_VAR 0 3
10841: PUSH
10842: LD_INT 22
10844: EQUAL
10845: IFFALSE 10855
// sTeleport := true ;
10847: LD_ADDR_EXP 78
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// if p3 = 23 then
10855: LD_VAR 0 3
10859: PUSH
10860: LD_INT 23
10862: EQUAL
10863: IFFALSE 10873
// sOilTower := true ;
10865: LD_ADDR_EXP 80
10869: PUSH
10870: LD_INT 1
10872: ST_TO_ADDR
// if p3 = 24 then
10873: LD_VAR 0 3
10877: PUSH
10878: LD_INT 24
10880: EQUAL
10881: IFFALSE 10891
// sShovel := true ;
10883: LD_ADDR_EXP 81
10887: PUSH
10888: LD_INT 1
10890: ST_TO_ADDR
// if p3 = 25 then
10891: LD_VAR 0 3
10895: PUSH
10896: LD_INT 25
10898: EQUAL
10899: IFFALSE 10909
// sSheik := true ;
10901: LD_ADDR_EXP 82
10905: PUSH
10906: LD_INT 1
10908: ST_TO_ADDR
// if p3 = 26 then
10909: LD_VAR 0 3
10913: PUSH
10914: LD_INT 26
10916: EQUAL
10917: IFFALSE 10927
// sEarthquake := true ;
10919: LD_ADDR_EXP 84
10923: PUSH
10924: LD_INT 1
10926: ST_TO_ADDR
// if p3 = 27 then
10927: LD_VAR 0 3
10931: PUSH
10932: LD_INT 27
10934: EQUAL
10935: IFFALSE 10945
// sAI := true ;
10937: LD_ADDR_EXP 85
10941: PUSH
10942: LD_INT 1
10944: ST_TO_ADDR
// if p3 = 28 then
10945: LD_VAR 0 3
10949: PUSH
10950: LD_INT 28
10952: EQUAL
10953: IFFALSE 10963
// sCargo := true ;
10955: LD_ADDR_EXP 88
10959: PUSH
10960: LD_INT 1
10962: ST_TO_ADDR
// if p3 = 29 then
10963: LD_VAR 0 3
10967: PUSH
10968: LD_INT 29
10970: EQUAL
10971: IFFALSE 10981
// sDLaser := true ;
10973: LD_ADDR_EXP 89
10977: PUSH
10978: LD_INT 1
10980: ST_TO_ADDR
// if p3 = 30 then
10981: LD_VAR 0 3
10985: PUSH
10986: LD_INT 30
10988: EQUAL
10989: IFFALSE 10999
// sExchange := true ;
10991: LD_ADDR_EXP 90
10995: PUSH
10996: LD_INT 1
10998: ST_TO_ADDR
// if p3 = 31 then
10999: LD_VAR 0 3
11003: PUSH
11004: LD_INT 31
11006: EQUAL
11007: IFFALSE 11017
// sFac := true ;
11009: LD_ADDR_EXP 91
11013: PUSH
11014: LD_INT 1
11016: ST_TO_ADDR
// if p3 = 32 then
11017: LD_VAR 0 3
11021: PUSH
11022: LD_INT 32
11024: EQUAL
11025: IFFALSE 11035
// sPower := true ;
11027: LD_ADDR_EXP 92
11031: PUSH
11032: LD_INT 1
11034: ST_TO_ADDR
// if p3 = 33 then
11035: LD_VAR 0 3
11039: PUSH
11040: LD_INT 33
11042: EQUAL
11043: IFFALSE 11053
// sRandom := true ;
11045: LD_ADDR_EXP 93
11049: PUSH
11050: LD_INT 1
11052: ST_TO_ADDR
// if p3 = 34 then
11053: LD_VAR 0 3
11057: PUSH
11058: LD_INT 34
11060: EQUAL
11061: IFFALSE 11071
// sShield := true ;
11063: LD_ADDR_EXP 94
11067: PUSH
11068: LD_INT 1
11070: ST_TO_ADDR
// if p3 = 35 then
11071: LD_VAR 0 3
11075: PUSH
11076: LD_INT 35
11078: EQUAL
11079: IFFALSE 11089
// sTime := true ;
11081: LD_ADDR_EXP 95
11085: PUSH
11086: LD_INT 1
11088: ST_TO_ADDR
// if p3 = 36 then
11089: LD_VAR 0 3
11093: PUSH
11094: LD_INT 36
11096: EQUAL
11097: IFFALSE 11107
// sTools := true ;
11099: LD_ADDR_EXP 96
11103: PUSH
11104: LD_INT 1
11106: ST_TO_ADDR
// if p3 = 101 then
11107: LD_VAR 0 3
11111: PUSH
11112: LD_INT 101
11114: EQUAL
11115: IFFALSE 11125
// sSold := true ;
11117: LD_ADDR_EXP 61
11121: PUSH
11122: LD_INT 1
11124: ST_TO_ADDR
// if p3 = 102 then
11125: LD_VAR 0 3
11129: PUSH
11130: LD_INT 102
11132: EQUAL
11133: IFFALSE 11143
// sDiff := true ;
11135: LD_ADDR_EXP 62
11139: PUSH
11140: LD_INT 1
11142: ST_TO_ADDR
// if p3 = 103 then
11143: LD_VAR 0 3
11147: PUSH
11148: LD_INT 103
11150: EQUAL
11151: IFFALSE 11161
// sFog := true ;
11153: LD_ADDR_EXP 65
11157: PUSH
11158: LD_INT 1
11160: ST_TO_ADDR
// if p3 = 104 then
11161: LD_VAR 0 3
11165: PUSH
11166: LD_INT 104
11168: EQUAL
11169: IFFALSE 11179
// sReset := true ;
11171: LD_ADDR_EXP 66
11175: PUSH
11176: LD_INT 1
11178: ST_TO_ADDR
// if p3 = 105 then
11179: LD_VAR 0 3
11183: PUSH
11184: LD_INT 105
11186: EQUAL
11187: IFFALSE 11197
// sSun := true ;
11189: LD_ADDR_EXP 67
11193: PUSH
11194: LD_INT 1
11196: ST_TO_ADDR
// if p3 = 106 then
11197: LD_VAR 0 3
11201: PUSH
11202: LD_INT 106
11204: EQUAL
11205: IFFALSE 11215
// sTiger := true ;
11207: LD_ADDR_EXP 63
11211: PUSH
11212: LD_INT 1
11214: ST_TO_ADDR
// if p3 = 107 then
11215: LD_VAR 0 3
11219: PUSH
11220: LD_INT 107
11222: EQUAL
11223: IFFALSE 11233
// sBomb := true ;
11225: LD_ADDR_EXP 64
11229: PUSH
11230: LD_INT 1
11232: ST_TO_ADDR
// if p3 = 108 then
11233: LD_VAR 0 3
11237: PUSH
11238: LD_INT 108
11240: EQUAL
11241: IFFALSE 11251
// sWound := true ;
11243: LD_ADDR_EXP 72
11247: PUSH
11248: LD_INT 1
11250: ST_TO_ADDR
// if p3 = 109 then
11251: LD_VAR 0 3
11255: PUSH
11256: LD_INT 109
11258: EQUAL
11259: IFFALSE 11269
// sBetray := true ;
11261: LD_ADDR_EXP 76
11265: PUSH
11266: LD_INT 1
11268: ST_TO_ADDR
// if p3 = 110 then
11269: LD_VAR 0 3
11273: PUSH
11274: LD_INT 110
11276: EQUAL
11277: IFFALSE 11287
// sContamin := true ;
11279: LD_ADDR_EXP 77
11283: PUSH
11284: LD_INT 1
11286: ST_TO_ADDR
// if p3 = 111 then
11287: LD_VAR 0 3
11291: PUSH
11292: LD_INT 111
11294: EQUAL
11295: IFFALSE 11305
// sOil := true ;
11297: LD_ADDR_EXP 79
11301: PUSH
11302: LD_INT 1
11304: ST_TO_ADDR
// if p3 = 112 then
11305: LD_VAR 0 3
11309: PUSH
11310: LD_INT 112
11312: EQUAL
11313: IFFALSE 11323
// sStu := true ;
11315: LD_ADDR_EXP 83
11319: PUSH
11320: LD_INT 1
11322: ST_TO_ADDR
// if p3 = 113 then
11323: LD_VAR 0 3
11327: PUSH
11328: LD_INT 113
11330: EQUAL
11331: IFFALSE 11341
// sBazooka := true ;
11333: LD_ADDR_EXP 86
11337: PUSH
11338: LD_INT 1
11340: ST_TO_ADDR
// if p3 = 114 then
11341: LD_VAR 0 3
11345: PUSH
11346: LD_INT 114
11348: EQUAL
11349: IFFALSE 11359
// sMortar := true ;
11351: LD_ADDR_EXP 87
11355: PUSH
11356: LD_INT 1
11358: ST_TO_ADDR
// if p3 = 115 then
11359: LD_VAR 0 3
11363: PUSH
11364: LD_INT 115
11366: EQUAL
11367: IFFALSE 11377
// sRanger := true ;
11369: LD_ADDR_EXP 97
11373: PUSH
11374: LD_INT 1
11376: ST_TO_ADDR
// if p3 = 116 then
11377: LD_VAR 0 3
11381: PUSH
11382: LD_INT 116
11384: EQUAL
11385: IFFALSE 11395
// sComputer := true ;
11387: LD_ADDR_EXP 98
11391: PUSH
11392: LD_INT 1
11394: ST_TO_ADDR
// if p3 = 117 then
11395: LD_VAR 0 3
11399: PUSH
11400: LD_INT 117
11402: EQUAL
11403: IFFALSE 11413
// s30 := true ;
11405: LD_ADDR_EXP 99
11409: PUSH
11410: LD_INT 1
11412: ST_TO_ADDR
// if p3 = 118 then
11413: LD_VAR 0 3
11417: PUSH
11418: LD_INT 118
11420: EQUAL
11421: IFFALSE 11431
// s60 := true ;
11423: LD_ADDR_EXP 100
11427: PUSH
11428: LD_INT 1
11430: ST_TO_ADDR
// end ; if p2 = hack_mode then
11431: LD_VAR 0 2
11435: PUSH
11436: LD_INT 101
11438: EQUAL
11439: IFFALSE 11567
// begin case p3 of 1 :
11441: LD_VAR 0 3
11445: PUSH
11446: LD_INT 1
11448: DOUBLE
11449: EQUAL
11450: IFTRUE 11454
11452: GO 11461
11454: POP
// hHackUnlimitedResources ; 2 :
11455: CALL 23714 0 0
11459: GO 11567
11461: LD_INT 2
11463: DOUBLE
11464: EQUAL
11465: IFTRUE 11469
11467: GO 11476
11469: POP
// hHackSetLevel10 ; 3 :
11470: CALL 23847 0 0
11474: GO 11567
11476: LD_INT 3
11478: DOUBLE
11479: EQUAL
11480: IFTRUE 11484
11482: GO 11491
11484: POP
// hHackSetLevel10YourUnits ; 4 :
11485: CALL 23932 0 0
11489: GO 11567
11491: LD_INT 4
11493: DOUBLE
11494: EQUAL
11495: IFTRUE 11499
11497: GO 11506
11499: POP
// hHackInvincible ; 5 :
11500: CALL 24380 0 0
11504: GO 11567
11506: LD_INT 5
11508: DOUBLE
11509: EQUAL
11510: IFTRUE 11514
11512: GO 11521
11514: POP
// hHackInvisible ; 6 :
11515: CALL 24491 0 0
11519: GO 11567
11521: LD_INT 6
11523: DOUBLE
11524: EQUAL
11525: IFTRUE 11529
11527: GO 11536
11529: POP
// hHackChangeYourSide ; 7 :
11530: CALL 24548 0 0
11534: GO 11567
11536: LD_INT 7
11538: DOUBLE
11539: EQUAL
11540: IFTRUE 11544
11542: GO 11551
11544: POP
// hHackChangeUnitSide ; 8 :
11545: CALL 24590 0 0
11549: GO 11567
11551: LD_INT 8
11553: DOUBLE
11554: EQUAL
11555: IFTRUE 11559
11557: GO 11566
11559: POP
// hHackFog ; end ;
11560: CALL 24691 0 0
11564: GO 11567
11566: POP
// end ; if p2 = game_save_mode then
11567: LD_VAR 0 2
11571: PUSH
11572: LD_INT 102
11574: EQUAL
11575: IFFALSE 11630
// begin if p3 = 1 then
11577: LD_VAR 0 3
11581: PUSH
11582: LD_INT 1
11584: EQUAL
11585: IFFALSE 11597
// globalGameSaveCounter := p4 ;
11587: LD_ADDR_EXP 43
11591: PUSH
11592: LD_VAR 0 4
11596: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11597: LD_VAR 0 3
11601: PUSH
11602: LD_INT 2
11604: EQUAL
11605: PUSH
11606: LD_EXP 43
11610: AND
11611: IFFALSE 11630
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11613: LD_STRING setGameSaveCounter(
11615: PUSH
11616: LD_EXP 43
11620: STR
11621: PUSH
11622: LD_STRING )
11624: STR
11625: PPUSH
11626: CALL_OW 559
// end ; end ;
11630: LD_VAR 0 7
11634: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11635: LD_INT 0
11637: PPUSH
// streamModeActive := false ;
11638: LD_ADDR_EXP 44
11642: PUSH
11643: LD_INT 0
11645: ST_TO_ADDR
// normalCounter := 36 ;
11646: LD_ADDR_EXP 45
11650: PUSH
11651: LD_INT 36
11653: ST_TO_ADDR
// hardcoreCounter := 18 ;
11654: LD_ADDR_EXP 46
11658: PUSH
11659: LD_INT 18
11661: ST_TO_ADDR
// sRocket := false ;
11662: LD_ADDR_EXP 49
11666: PUSH
11667: LD_INT 0
11669: ST_TO_ADDR
// sSpeed := false ;
11670: LD_ADDR_EXP 48
11674: PUSH
11675: LD_INT 0
11677: ST_TO_ADDR
// sEngine := false ;
11678: LD_ADDR_EXP 50
11682: PUSH
11683: LD_INT 0
11685: ST_TO_ADDR
// sSpec := false ;
11686: LD_ADDR_EXP 47
11690: PUSH
11691: LD_INT 0
11693: ST_TO_ADDR
// sLevel := false ;
11694: LD_ADDR_EXP 51
11698: PUSH
11699: LD_INT 0
11701: ST_TO_ADDR
// sArmoury := false ;
11702: LD_ADDR_EXP 52
11706: PUSH
11707: LD_INT 0
11709: ST_TO_ADDR
// sRadar := false ;
11710: LD_ADDR_EXP 53
11714: PUSH
11715: LD_INT 0
11717: ST_TO_ADDR
// sBunker := false ;
11718: LD_ADDR_EXP 54
11722: PUSH
11723: LD_INT 0
11725: ST_TO_ADDR
// sHack := false ;
11726: LD_ADDR_EXP 55
11730: PUSH
11731: LD_INT 0
11733: ST_TO_ADDR
// sFire := false ;
11734: LD_ADDR_EXP 56
11738: PUSH
11739: LD_INT 0
11741: ST_TO_ADDR
// sRefresh := false ;
11742: LD_ADDR_EXP 57
11746: PUSH
11747: LD_INT 0
11749: ST_TO_ADDR
// sExp := false ;
11750: LD_ADDR_EXP 58
11754: PUSH
11755: LD_INT 0
11757: ST_TO_ADDR
// sDepot := false ;
11758: LD_ADDR_EXP 59
11762: PUSH
11763: LD_INT 0
11765: ST_TO_ADDR
// sFlag := false ;
11766: LD_ADDR_EXP 60
11770: PUSH
11771: LD_INT 0
11773: ST_TO_ADDR
// sKamikadze := false ;
11774: LD_ADDR_EXP 68
11778: PUSH
11779: LD_INT 0
11781: ST_TO_ADDR
// sTroll := false ;
11782: LD_ADDR_EXP 69
11786: PUSH
11787: LD_INT 0
11789: ST_TO_ADDR
// sSlow := false ;
11790: LD_ADDR_EXP 70
11794: PUSH
11795: LD_INT 0
11797: ST_TO_ADDR
// sLack := false ;
11798: LD_ADDR_EXP 71
11802: PUSH
11803: LD_INT 0
11805: ST_TO_ADDR
// sTank := false ;
11806: LD_ADDR_EXP 73
11810: PUSH
11811: LD_INT 0
11813: ST_TO_ADDR
// sRemote := false ;
11814: LD_ADDR_EXP 74
11818: PUSH
11819: LD_INT 0
11821: ST_TO_ADDR
// sPowell := false ;
11822: LD_ADDR_EXP 75
11826: PUSH
11827: LD_INT 0
11829: ST_TO_ADDR
// sTeleport := false ;
11830: LD_ADDR_EXP 78
11834: PUSH
11835: LD_INT 0
11837: ST_TO_ADDR
// sOilTower := false ;
11838: LD_ADDR_EXP 80
11842: PUSH
11843: LD_INT 0
11845: ST_TO_ADDR
// sShovel := false ;
11846: LD_ADDR_EXP 81
11850: PUSH
11851: LD_INT 0
11853: ST_TO_ADDR
// sSheik := false ;
11854: LD_ADDR_EXP 82
11858: PUSH
11859: LD_INT 0
11861: ST_TO_ADDR
// sEarthquake := false ;
11862: LD_ADDR_EXP 84
11866: PUSH
11867: LD_INT 0
11869: ST_TO_ADDR
// sAI := false ;
11870: LD_ADDR_EXP 85
11874: PUSH
11875: LD_INT 0
11877: ST_TO_ADDR
// sCargo := false ;
11878: LD_ADDR_EXP 88
11882: PUSH
11883: LD_INT 0
11885: ST_TO_ADDR
// sDLaser := false ;
11886: LD_ADDR_EXP 89
11890: PUSH
11891: LD_INT 0
11893: ST_TO_ADDR
// sExchange := false ;
11894: LD_ADDR_EXP 90
11898: PUSH
11899: LD_INT 0
11901: ST_TO_ADDR
// sFac := false ;
11902: LD_ADDR_EXP 91
11906: PUSH
11907: LD_INT 0
11909: ST_TO_ADDR
// sPower := false ;
11910: LD_ADDR_EXP 92
11914: PUSH
11915: LD_INT 0
11917: ST_TO_ADDR
// sRandom := false ;
11918: LD_ADDR_EXP 93
11922: PUSH
11923: LD_INT 0
11925: ST_TO_ADDR
// sShield := false ;
11926: LD_ADDR_EXP 94
11930: PUSH
11931: LD_INT 0
11933: ST_TO_ADDR
// sTime := false ;
11934: LD_ADDR_EXP 95
11938: PUSH
11939: LD_INT 0
11941: ST_TO_ADDR
// sTools := false ;
11942: LD_ADDR_EXP 96
11946: PUSH
11947: LD_INT 0
11949: ST_TO_ADDR
// sSold := false ;
11950: LD_ADDR_EXP 61
11954: PUSH
11955: LD_INT 0
11957: ST_TO_ADDR
// sDiff := false ;
11958: LD_ADDR_EXP 62
11962: PUSH
11963: LD_INT 0
11965: ST_TO_ADDR
// sFog := false ;
11966: LD_ADDR_EXP 65
11970: PUSH
11971: LD_INT 0
11973: ST_TO_ADDR
// sReset := false ;
11974: LD_ADDR_EXP 66
11978: PUSH
11979: LD_INT 0
11981: ST_TO_ADDR
// sSun := false ;
11982: LD_ADDR_EXP 67
11986: PUSH
11987: LD_INT 0
11989: ST_TO_ADDR
// sTiger := false ;
11990: LD_ADDR_EXP 63
11994: PUSH
11995: LD_INT 0
11997: ST_TO_ADDR
// sBomb := false ;
11998: LD_ADDR_EXP 64
12002: PUSH
12003: LD_INT 0
12005: ST_TO_ADDR
// sWound := false ;
12006: LD_ADDR_EXP 72
12010: PUSH
12011: LD_INT 0
12013: ST_TO_ADDR
// sBetray := false ;
12014: LD_ADDR_EXP 76
12018: PUSH
12019: LD_INT 0
12021: ST_TO_ADDR
// sContamin := false ;
12022: LD_ADDR_EXP 77
12026: PUSH
12027: LD_INT 0
12029: ST_TO_ADDR
// sOil := false ;
12030: LD_ADDR_EXP 79
12034: PUSH
12035: LD_INT 0
12037: ST_TO_ADDR
// sStu := false ;
12038: LD_ADDR_EXP 83
12042: PUSH
12043: LD_INT 0
12045: ST_TO_ADDR
// sBazooka := false ;
12046: LD_ADDR_EXP 86
12050: PUSH
12051: LD_INT 0
12053: ST_TO_ADDR
// sMortar := false ;
12054: LD_ADDR_EXP 87
12058: PUSH
12059: LD_INT 0
12061: ST_TO_ADDR
// sRanger := false ;
12062: LD_ADDR_EXP 97
12066: PUSH
12067: LD_INT 0
12069: ST_TO_ADDR
// sComputer := false ;
12070: LD_ADDR_EXP 98
12074: PUSH
12075: LD_INT 0
12077: ST_TO_ADDR
// s30 := false ;
12078: LD_ADDR_EXP 99
12082: PUSH
12083: LD_INT 0
12085: ST_TO_ADDR
// s60 := false ;
12086: LD_ADDR_EXP 100
12090: PUSH
12091: LD_INT 0
12093: ST_TO_ADDR
// end ;
12094: LD_VAR 0 1
12098: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12099: LD_INT 0
12101: PPUSH
12102: PPUSH
12103: PPUSH
12104: PPUSH
12105: PPUSH
12106: PPUSH
12107: PPUSH
// result := [ ] ;
12108: LD_ADDR_VAR 0 2
12112: PUSH
12113: EMPTY
12114: ST_TO_ADDR
// if campaign_id = 1 then
12115: LD_OWVAR 69
12119: PUSH
12120: LD_INT 1
12122: EQUAL
12123: IFFALSE 15289
// begin case mission_number of 1 :
12125: LD_OWVAR 70
12129: PUSH
12130: LD_INT 1
12132: DOUBLE
12133: EQUAL
12134: IFTRUE 12138
12136: GO 12214
12138: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12139: LD_ADDR_VAR 0 2
12143: PUSH
12144: LD_INT 2
12146: PUSH
12147: LD_INT 4
12149: PUSH
12150: LD_INT 11
12152: PUSH
12153: LD_INT 12
12155: PUSH
12156: LD_INT 15
12158: PUSH
12159: LD_INT 16
12161: PUSH
12162: LD_INT 22
12164: PUSH
12165: LD_INT 23
12167: PUSH
12168: LD_INT 26
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 101
12184: PUSH
12185: LD_INT 102
12187: PUSH
12188: LD_INT 106
12190: PUSH
12191: LD_INT 116
12193: PUSH
12194: LD_INT 117
12196: PUSH
12197: LD_INT 118
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: ST_TO_ADDR
12212: GO 15287
12214: LD_INT 2
12216: DOUBLE
12217: EQUAL
12218: IFTRUE 12222
12220: GO 12306
12222: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12223: LD_ADDR_VAR 0 2
12227: PUSH
12228: LD_INT 2
12230: PUSH
12231: LD_INT 4
12233: PUSH
12234: LD_INT 11
12236: PUSH
12237: LD_INT 12
12239: PUSH
12240: LD_INT 15
12242: PUSH
12243: LD_INT 16
12245: PUSH
12246: LD_INT 22
12248: PUSH
12249: LD_INT 23
12251: PUSH
12252: LD_INT 26
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: PUSH
12266: LD_INT 101
12268: PUSH
12269: LD_INT 102
12271: PUSH
12272: LD_INT 105
12274: PUSH
12275: LD_INT 106
12277: PUSH
12278: LD_INT 108
12280: PUSH
12281: LD_INT 116
12283: PUSH
12284: LD_INT 117
12286: PUSH
12287: LD_INT 118
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: ST_TO_ADDR
12304: GO 15287
12306: LD_INT 3
12308: DOUBLE
12309: EQUAL
12310: IFTRUE 12314
12312: GO 12402
12314: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12315: LD_ADDR_VAR 0 2
12319: PUSH
12320: LD_INT 2
12322: PUSH
12323: LD_INT 4
12325: PUSH
12326: LD_INT 5
12328: PUSH
12329: LD_INT 11
12331: PUSH
12332: LD_INT 12
12334: PUSH
12335: LD_INT 15
12337: PUSH
12338: LD_INT 16
12340: PUSH
12341: LD_INT 22
12343: PUSH
12344: LD_INT 26
12346: PUSH
12347: LD_INT 36
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: PUSH
12362: LD_INT 101
12364: PUSH
12365: LD_INT 102
12367: PUSH
12368: LD_INT 105
12370: PUSH
12371: LD_INT 106
12373: PUSH
12374: LD_INT 108
12376: PUSH
12377: LD_INT 116
12379: PUSH
12380: LD_INT 117
12382: PUSH
12383: LD_INT 118
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: ST_TO_ADDR
12400: GO 15287
12402: LD_INT 4
12404: DOUBLE
12405: EQUAL
12406: IFTRUE 12410
12408: GO 12506
12410: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12411: LD_ADDR_VAR 0 2
12415: PUSH
12416: LD_INT 2
12418: PUSH
12419: LD_INT 4
12421: PUSH
12422: LD_INT 5
12424: PUSH
12425: LD_INT 8
12427: PUSH
12428: LD_INT 11
12430: PUSH
12431: LD_INT 12
12433: PUSH
12434: LD_INT 15
12436: PUSH
12437: LD_INT 16
12439: PUSH
12440: LD_INT 22
12442: PUSH
12443: LD_INT 23
12445: PUSH
12446: LD_INT 26
12448: PUSH
12449: LD_INT 36
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 101
12468: PUSH
12469: LD_INT 102
12471: PUSH
12472: LD_INT 105
12474: PUSH
12475: LD_INT 106
12477: PUSH
12478: LD_INT 108
12480: PUSH
12481: LD_INT 116
12483: PUSH
12484: LD_INT 117
12486: PUSH
12487: LD_INT 118
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: ST_TO_ADDR
12504: GO 15287
12506: LD_INT 5
12508: DOUBLE
12509: EQUAL
12510: IFTRUE 12514
12512: GO 12626
12514: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12515: LD_ADDR_VAR 0 2
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: LD_INT 4
12525: PUSH
12526: LD_INT 5
12528: PUSH
12529: LD_INT 6
12531: PUSH
12532: LD_INT 8
12534: PUSH
12535: LD_INT 11
12537: PUSH
12538: LD_INT 12
12540: PUSH
12541: LD_INT 15
12543: PUSH
12544: LD_INT 16
12546: PUSH
12547: LD_INT 22
12549: PUSH
12550: LD_INT 23
12552: PUSH
12553: LD_INT 25
12555: PUSH
12556: LD_INT 26
12558: PUSH
12559: LD_INT 36
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 101
12580: PUSH
12581: LD_INT 102
12583: PUSH
12584: LD_INT 105
12586: PUSH
12587: LD_INT 106
12589: PUSH
12590: LD_INT 108
12592: PUSH
12593: LD_INT 109
12595: PUSH
12596: LD_INT 112
12598: PUSH
12599: LD_INT 116
12601: PUSH
12602: LD_INT 117
12604: PUSH
12605: LD_INT 118
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: ST_TO_ADDR
12624: GO 15287
12626: LD_INT 6
12628: DOUBLE
12629: EQUAL
12630: IFTRUE 12634
12632: GO 12766
12634: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12635: LD_ADDR_VAR 0 2
12639: PUSH
12640: LD_INT 2
12642: PUSH
12643: LD_INT 4
12645: PUSH
12646: LD_INT 5
12648: PUSH
12649: LD_INT 6
12651: PUSH
12652: LD_INT 8
12654: PUSH
12655: LD_INT 11
12657: PUSH
12658: LD_INT 12
12660: PUSH
12661: LD_INT 15
12663: PUSH
12664: LD_INT 16
12666: PUSH
12667: LD_INT 20
12669: PUSH
12670: LD_INT 21
12672: PUSH
12673: LD_INT 22
12675: PUSH
12676: LD_INT 23
12678: PUSH
12679: LD_INT 25
12681: PUSH
12682: LD_INT 26
12684: PUSH
12685: LD_INT 30
12687: PUSH
12688: LD_INT 31
12690: PUSH
12691: LD_INT 32
12693: PUSH
12694: LD_INT 36
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 101
12720: PUSH
12721: LD_INT 102
12723: PUSH
12724: LD_INT 105
12726: PUSH
12727: LD_INT 106
12729: PUSH
12730: LD_INT 108
12732: PUSH
12733: LD_INT 109
12735: PUSH
12736: LD_INT 112
12738: PUSH
12739: LD_INT 116
12741: PUSH
12742: LD_INT 117
12744: PUSH
12745: LD_INT 118
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: ST_TO_ADDR
12764: GO 15287
12766: LD_INT 7
12768: DOUBLE
12769: EQUAL
12770: IFTRUE 12774
12772: GO 12886
12774: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12775: LD_ADDR_VAR 0 2
12779: PUSH
12780: LD_INT 2
12782: PUSH
12783: LD_INT 4
12785: PUSH
12786: LD_INT 5
12788: PUSH
12789: LD_INT 7
12791: PUSH
12792: LD_INT 11
12794: PUSH
12795: LD_INT 12
12797: PUSH
12798: LD_INT 15
12800: PUSH
12801: LD_INT 16
12803: PUSH
12804: LD_INT 20
12806: PUSH
12807: LD_INT 21
12809: PUSH
12810: LD_INT 22
12812: PUSH
12813: LD_INT 23
12815: PUSH
12816: LD_INT 25
12818: PUSH
12819: LD_INT 26
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 101
12840: PUSH
12841: LD_INT 102
12843: PUSH
12844: LD_INT 103
12846: PUSH
12847: LD_INT 105
12849: PUSH
12850: LD_INT 106
12852: PUSH
12853: LD_INT 108
12855: PUSH
12856: LD_INT 112
12858: PUSH
12859: LD_INT 116
12861: PUSH
12862: LD_INT 117
12864: PUSH
12865: LD_INT 118
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: ST_TO_ADDR
12884: GO 15287
12886: LD_INT 8
12888: DOUBLE
12889: EQUAL
12890: IFTRUE 12894
12892: GO 13034
12894: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12895: LD_ADDR_VAR 0 2
12899: PUSH
12900: LD_INT 2
12902: PUSH
12903: LD_INT 4
12905: PUSH
12906: LD_INT 5
12908: PUSH
12909: LD_INT 6
12911: PUSH
12912: LD_INT 7
12914: PUSH
12915: LD_INT 8
12917: PUSH
12918: LD_INT 11
12920: PUSH
12921: LD_INT 12
12923: PUSH
12924: LD_INT 15
12926: PUSH
12927: LD_INT 16
12929: PUSH
12930: LD_INT 20
12932: PUSH
12933: LD_INT 21
12935: PUSH
12936: LD_INT 22
12938: PUSH
12939: LD_INT 23
12941: PUSH
12942: LD_INT 25
12944: PUSH
12945: LD_INT 26
12947: PUSH
12948: LD_INT 30
12950: PUSH
12951: LD_INT 31
12953: PUSH
12954: LD_INT 32
12956: PUSH
12957: LD_INT 36
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 101
12984: PUSH
12985: LD_INT 102
12987: PUSH
12988: LD_INT 103
12990: PUSH
12991: LD_INT 105
12993: PUSH
12994: LD_INT 106
12996: PUSH
12997: LD_INT 108
12999: PUSH
13000: LD_INT 109
13002: PUSH
13003: LD_INT 112
13005: PUSH
13006: LD_INT 116
13008: PUSH
13009: LD_INT 117
13011: PUSH
13012: LD_INT 118
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: ST_TO_ADDR
13032: GO 15287
13034: LD_INT 9
13036: DOUBLE
13037: EQUAL
13038: IFTRUE 13042
13040: GO 13190
13042: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13043: LD_ADDR_VAR 0 2
13047: PUSH
13048: LD_INT 2
13050: PUSH
13051: LD_INT 4
13053: PUSH
13054: LD_INT 5
13056: PUSH
13057: LD_INT 6
13059: PUSH
13060: LD_INT 7
13062: PUSH
13063: LD_INT 8
13065: PUSH
13066: LD_INT 11
13068: PUSH
13069: LD_INT 12
13071: PUSH
13072: LD_INT 15
13074: PUSH
13075: LD_INT 16
13077: PUSH
13078: LD_INT 20
13080: PUSH
13081: LD_INT 21
13083: PUSH
13084: LD_INT 22
13086: PUSH
13087: LD_INT 23
13089: PUSH
13090: LD_INT 25
13092: PUSH
13093: LD_INT 26
13095: PUSH
13096: LD_INT 28
13098: PUSH
13099: LD_INT 30
13101: PUSH
13102: LD_INT 31
13104: PUSH
13105: LD_INT 32
13107: PUSH
13108: LD_INT 36
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: PUSH
13134: LD_INT 101
13136: PUSH
13137: LD_INT 102
13139: PUSH
13140: LD_INT 103
13142: PUSH
13143: LD_INT 105
13145: PUSH
13146: LD_INT 106
13148: PUSH
13149: LD_INT 108
13151: PUSH
13152: LD_INT 109
13154: PUSH
13155: LD_INT 112
13157: PUSH
13158: LD_INT 114
13160: PUSH
13161: LD_INT 116
13163: PUSH
13164: LD_INT 117
13166: PUSH
13167: LD_INT 118
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: ST_TO_ADDR
13188: GO 15287
13190: LD_INT 10
13192: DOUBLE
13193: EQUAL
13194: IFTRUE 13198
13196: GO 13394
13198: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13199: LD_ADDR_VAR 0 2
13203: PUSH
13204: LD_INT 2
13206: PUSH
13207: LD_INT 4
13209: PUSH
13210: LD_INT 5
13212: PUSH
13213: LD_INT 6
13215: PUSH
13216: LD_INT 7
13218: PUSH
13219: LD_INT 8
13221: PUSH
13222: LD_INT 9
13224: PUSH
13225: LD_INT 10
13227: PUSH
13228: LD_INT 11
13230: PUSH
13231: LD_INT 12
13233: PUSH
13234: LD_INT 13
13236: PUSH
13237: LD_INT 14
13239: PUSH
13240: LD_INT 15
13242: PUSH
13243: LD_INT 16
13245: PUSH
13246: LD_INT 17
13248: PUSH
13249: LD_INT 18
13251: PUSH
13252: LD_INT 19
13254: PUSH
13255: LD_INT 20
13257: PUSH
13258: LD_INT 21
13260: PUSH
13261: LD_INT 22
13263: PUSH
13264: LD_INT 23
13266: PUSH
13267: LD_INT 24
13269: PUSH
13270: LD_INT 25
13272: PUSH
13273: LD_INT 26
13275: PUSH
13276: LD_INT 28
13278: PUSH
13279: LD_INT 30
13281: PUSH
13282: LD_INT 31
13284: PUSH
13285: LD_INT 32
13287: PUSH
13288: LD_INT 36
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 101
13324: PUSH
13325: LD_INT 102
13327: PUSH
13328: LD_INT 103
13330: PUSH
13331: LD_INT 104
13333: PUSH
13334: LD_INT 105
13336: PUSH
13337: LD_INT 106
13339: PUSH
13340: LD_INT 107
13342: PUSH
13343: LD_INT 108
13345: PUSH
13346: LD_INT 109
13348: PUSH
13349: LD_INT 110
13351: PUSH
13352: LD_INT 111
13354: PUSH
13355: LD_INT 112
13357: PUSH
13358: LD_INT 114
13360: PUSH
13361: LD_INT 116
13363: PUSH
13364: LD_INT 117
13366: PUSH
13367: LD_INT 118
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: ST_TO_ADDR
13392: GO 15287
13394: LD_INT 11
13396: DOUBLE
13397: EQUAL
13398: IFTRUE 13402
13400: GO 13606
13402: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13403: LD_ADDR_VAR 0 2
13407: PUSH
13408: LD_INT 2
13410: PUSH
13411: LD_INT 3
13413: PUSH
13414: LD_INT 4
13416: PUSH
13417: LD_INT 5
13419: PUSH
13420: LD_INT 6
13422: PUSH
13423: LD_INT 7
13425: PUSH
13426: LD_INT 8
13428: PUSH
13429: LD_INT 9
13431: PUSH
13432: LD_INT 10
13434: PUSH
13435: LD_INT 11
13437: PUSH
13438: LD_INT 12
13440: PUSH
13441: LD_INT 13
13443: PUSH
13444: LD_INT 14
13446: PUSH
13447: LD_INT 15
13449: PUSH
13450: LD_INT 16
13452: PUSH
13453: LD_INT 17
13455: PUSH
13456: LD_INT 18
13458: PUSH
13459: LD_INT 19
13461: PUSH
13462: LD_INT 20
13464: PUSH
13465: LD_INT 21
13467: PUSH
13468: LD_INT 22
13470: PUSH
13471: LD_INT 23
13473: PUSH
13474: LD_INT 24
13476: PUSH
13477: LD_INT 25
13479: PUSH
13480: LD_INT 26
13482: PUSH
13483: LD_INT 28
13485: PUSH
13486: LD_INT 30
13488: PUSH
13489: LD_INT 31
13491: PUSH
13492: LD_INT 32
13494: PUSH
13495: LD_INT 34
13497: PUSH
13498: LD_INT 36
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 101
13536: PUSH
13537: LD_INT 102
13539: PUSH
13540: LD_INT 103
13542: PUSH
13543: LD_INT 104
13545: PUSH
13546: LD_INT 105
13548: PUSH
13549: LD_INT 106
13551: PUSH
13552: LD_INT 107
13554: PUSH
13555: LD_INT 108
13557: PUSH
13558: LD_INT 109
13560: PUSH
13561: LD_INT 110
13563: PUSH
13564: LD_INT 111
13566: PUSH
13567: LD_INT 112
13569: PUSH
13570: LD_INT 114
13572: PUSH
13573: LD_INT 116
13575: PUSH
13576: LD_INT 117
13578: PUSH
13579: LD_INT 118
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: ST_TO_ADDR
13604: GO 15287
13606: LD_INT 12
13608: DOUBLE
13609: EQUAL
13610: IFTRUE 13614
13612: GO 13834
13614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13615: LD_ADDR_VAR 0 2
13619: PUSH
13620: LD_INT 1
13622: PUSH
13623: LD_INT 2
13625: PUSH
13626: LD_INT 3
13628: PUSH
13629: LD_INT 4
13631: PUSH
13632: LD_INT 5
13634: PUSH
13635: LD_INT 6
13637: PUSH
13638: LD_INT 7
13640: PUSH
13641: LD_INT 8
13643: PUSH
13644: LD_INT 9
13646: PUSH
13647: LD_INT 10
13649: PUSH
13650: LD_INT 11
13652: PUSH
13653: LD_INT 12
13655: PUSH
13656: LD_INT 13
13658: PUSH
13659: LD_INT 14
13661: PUSH
13662: LD_INT 15
13664: PUSH
13665: LD_INT 16
13667: PUSH
13668: LD_INT 17
13670: PUSH
13671: LD_INT 18
13673: PUSH
13674: LD_INT 19
13676: PUSH
13677: LD_INT 20
13679: PUSH
13680: LD_INT 21
13682: PUSH
13683: LD_INT 22
13685: PUSH
13686: LD_INT 23
13688: PUSH
13689: LD_INT 24
13691: PUSH
13692: LD_INT 25
13694: PUSH
13695: LD_INT 26
13697: PUSH
13698: LD_INT 27
13700: PUSH
13701: LD_INT 28
13703: PUSH
13704: LD_INT 30
13706: PUSH
13707: LD_INT 31
13709: PUSH
13710: LD_INT 32
13712: PUSH
13713: LD_INT 33
13715: PUSH
13716: LD_INT 34
13718: PUSH
13719: LD_INT 36
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: PUSH
13758: LD_INT 101
13760: PUSH
13761: LD_INT 102
13763: PUSH
13764: LD_INT 103
13766: PUSH
13767: LD_INT 104
13769: PUSH
13770: LD_INT 105
13772: PUSH
13773: LD_INT 106
13775: PUSH
13776: LD_INT 107
13778: PUSH
13779: LD_INT 108
13781: PUSH
13782: LD_INT 109
13784: PUSH
13785: LD_INT 110
13787: PUSH
13788: LD_INT 111
13790: PUSH
13791: LD_INT 112
13793: PUSH
13794: LD_INT 113
13796: PUSH
13797: LD_INT 114
13799: PUSH
13800: LD_INT 116
13802: PUSH
13803: LD_INT 117
13805: PUSH
13806: LD_INT 118
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: ST_TO_ADDR
13832: GO 15287
13834: LD_INT 13
13836: DOUBLE
13837: EQUAL
13838: IFTRUE 13842
13840: GO 14050
13842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13843: LD_ADDR_VAR 0 2
13847: PUSH
13848: LD_INT 1
13850: PUSH
13851: LD_INT 2
13853: PUSH
13854: LD_INT 3
13856: PUSH
13857: LD_INT 4
13859: PUSH
13860: LD_INT 5
13862: PUSH
13863: LD_INT 8
13865: PUSH
13866: LD_INT 9
13868: PUSH
13869: LD_INT 10
13871: PUSH
13872: LD_INT 11
13874: PUSH
13875: LD_INT 12
13877: PUSH
13878: LD_INT 14
13880: PUSH
13881: LD_INT 15
13883: PUSH
13884: LD_INT 16
13886: PUSH
13887: LD_INT 17
13889: PUSH
13890: LD_INT 18
13892: PUSH
13893: LD_INT 19
13895: PUSH
13896: LD_INT 20
13898: PUSH
13899: LD_INT 21
13901: PUSH
13902: LD_INT 22
13904: PUSH
13905: LD_INT 23
13907: PUSH
13908: LD_INT 24
13910: PUSH
13911: LD_INT 25
13913: PUSH
13914: LD_INT 26
13916: PUSH
13917: LD_INT 27
13919: PUSH
13920: LD_INT 28
13922: PUSH
13923: LD_INT 30
13925: PUSH
13926: LD_INT 31
13928: PUSH
13929: LD_INT 32
13931: PUSH
13932: LD_INT 33
13934: PUSH
13935: LD_INT 34
13937: PUSH
13938: LD_INT 36
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 101
13976: PUSH
13977: LD_INT 102
13979: PUSH
13980: LD_INT 103
13982: PUSH
13983: LD_INT 104
13985: PUSH
13986: LD_INT 105
13988: PUSH
13989: LD_INT 106
13991: PUSH
13992: LD_INT 107
13994: PUSH
13995: LD_INT 108
13997: PUSH
13998: LD_INT 109
14000: PUSH
14001: LD_INT 110
14003: PUSH
14004: LD_INT 111
14006: PUSH
14007: LD_INT 112
14009: PUSH
14010: LD_INT 113
14012: PUSH
14013: LD_INT 114
14015: PUSH
14016: LD_INT 116
14018: PUSH
14019: LD_INT 117
14021: PUSH
14022: LD_INT 118
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: ST_TO_ADDR
14048: GO 15287
14050: LD_INT 14
14052: DOUBLE
14053: EQUAL
14054: IFTRUE 14058
14056: GO 14282
14058: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14059: LD_ADDR_VAR 0 2
14063: PUSH
14064: LD_INT 1
14066: PUSH
14067: LD_INT 2
14069: PUSH
14070: LD_INT 3
14072: PUSH
14073: LD_INT 4
14075: PUSH
14076: LD_INT 5
14078: PUSH
14079: LD_INT 6
14081: PUSH
14082: LD_INT 7
14084: PUSH
14085: LD_INT 8
14087: PUSH
14088: LD_INT 9
14090: PUSH
14091: LD_INT 10
14093: PUSH
14094: LD_INT 11
14096: PUSH
14097: LD_INT 12
14099: PUSH
14100: LD_INT 13
14102: PUSH
14103: LD_INT 14
14105: PUSH
14106: LD_INT 15
14108: PUSH
14109: LD_INT 16
14111: PUSH
14112: LD_INT 17
14114: PUSH
14115: LD_INT 18
14117: PUSH
14118: LD_INT 19
14120: PUSH
14121: LD_INT 20
14123: PUSH
14124: LD_INT 21
14126: PUSH
14127: LD_INT 22
14129: PUSH
14130: LD_INT 23
14132: PUSH
14133: LD_INT 24
14135: PUSH
14136: LD_INT 25
14138: PUSH
14139: LD_INT 26
14141: PUSH
14142: LD_INT 27
14144: PUSH
14145: LD_INT 28
14147: PUSH
14148: LD_INT 29
14150: PUSH
14151: LD_INT 30
14153: PUSH
14154: LD_INT 31
14156: PUSH
14157: LD_INT 32
14159: PUSH
14160: LD_INT 33
14162: PUSH
14163: LD_INT 34
14165: PUSH
14166: LD_INT 36
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: PUSH
14206: LD_INT 101
14208: PUSH
14209: LD_INT 102
14211: PUSH
14212: LD_INT 103
14214: PUSH
14215: LD_INT 104
14217: PUSH
14218: LD_INT 105
14220: PUSH
14221: LD_INT 106
14223: PUSH
14224: LD_INT 107
14226: PUSH
14227: LD_INT 108
14229: PUSH
14230: LD_INT 109
14232: PUSH
14233: LD_INT 110
14235: PUSH
14236: LD_INT 111
14238: PUSH
14239: LD_INT 112
14241: PUSH
14242: LD_INT 113
14244: PUSH
14245: LD_INT 114
14247: PUSH
14248: LD_INT 116
14250: PUSH
14251: LD_INT 117
14253: PUSH
14254: LD_INT 118
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: ST_TO_ADDR
14280: GO 15287
14282: LD_INT 15
14284: DOUBLE
14285: EQUAL
14286: IFTRUE 14290
14288: GO 14514
14290: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14291: LD_ADDR_VAR 0 2
14295: PUSH
14296: LD_INT 1
14298: PUSH
14299: LD_INT 2
14301: PUSH
14302: LD_INT 3
14304: PUSH
14305: LD_INT 4
14307: PUSH
14308: LD_INT 5
14310: PUSH
14311: LD_INT 6
14313: PUSH
14314: LD_INT 7
14316: PUSH
14317: LD_INT 8
14319: PUSH
14320: LD_INT 9
14322: PUSH
14323: LD_INT 10
14325: PUSH
14326: LD_INT 11
14328: PUSH
14329: LD_INT 12
14331: PUSH
14332: LD_INT 13
14334: PUSH
14335: LD_INT 14
14337: PUSH
14338: LD_INT 15
14340: PUSH
14341: LD_INT 16
14343: PUSH
14344: LD_INT 17
14346: PUSH
14347: LD_INT 18
14349: PUSH
14350: LD_INT 19
14352: PUSH
14353: LD_INT 20
14355: PUSH
14356: LD_INT 21
14358: PUSH
14359: LD_INT 22
14361: PUSH
14362: LD_INT 23
14364: PUSH
14365: LD_INT 24
14367: PUSH
14368: LD_INT 25
14370: PUSH
14371: LD_INT 26
14373: PUSH
14374: LD_INT 27
14376: PUSH
14377: LD_INT 28
14379: PUSH
14380: LD_INT 29
14382: PUSH
14383: LD_INT 30
14385: PUSH
14386: LD_INT 31
14388: PUSH
14389: LD_INT 32
14391: PUSH
14392: LD_INT 33
14394: PUSH
14395: LD_INT 34
14397: PUSH
14398: LD_INT 36
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 101
14440: PUSH
14441: LD_INT 102
14443: PUSH
14444: LD_INT 103
14446: PUSH
14447: LD_INT 104
14449: PUSH
14450: LD_INT 105
14452: PUSH
14453: LD_INT 106
14455: PUSH
14456: LD_INT 107
14458: PUSH
14459: LD_INT 108
14461: PUSH
14462: LD_INT 109
14464: PUSH
14465: LD_INT 110
14467: PUSH
14468: LD_INT 111
14470: PUSH
14471: LD_INT 112
14473: PUSH
14474: LD_INT 113
14476: PUSH
14477: LD_INT 114
14479: PUSH
14480: LD_INT 116
14482: PUSH
14483: LD_INT 117
14485: PUSH
14486: LD_INT 118
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: ST_TO_ADDR
14512: GO 15287
14514: LD_INT 16
14516: DOUBLE
14517: EQUAL
14518: IFTRUE 14522
14520: GO 14658
14522: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14523: LD_ADDR_VAR 0 2
14527: PUSH
14528: LD_INT 2
14530: PUSH
14531: LD_INT 4
14533: PUSH
14534: LD_INT 5
14536: PUSH
14537: LD_INT 7
14539: PUSH
14540: LD_INT 11
14542: PUSH
14543: LD_INT 12
14545: PUSH
14546: LD_INT 15
14548: PUSH
14549: LD_INT 16
14551: PUSH
14552: LD_INT 20
14554: PUSH
14555: LD_INT 21
14557: PUSH
14558: LD_INT 22
14560: PUSH
14561: LD_INT 23
14563: PUSH
14564: LD_INT 25
14566: PUSH
14567: LD_INT 26
14569: PUSH
14570: LD_INT 30
14572: PUSH
14573: LD_INT 31
14575: PUSH
14576: LD_INT 32
14578: PUSH
14579: LD_INT 33
14581: PUSH
14582: LD_INT 34
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 101
14608: PUSH
14609: LD_INT 102
14611: PUSH
14612: LD_INT 103
14614: PUSH
14615: LD_INT 106
14617: PUSH
14618: LD_INT 108
14620: PUSH
14621: LD_INT 112
14623: PUSH
14624: LD_INT 113
14626: PUSH
14627: LD_INT 114
14629: PUSH
14630: LD_INT 116
14632: PUSH
14633: LD_INT 117
14635: PUSH
14636: LD_INT 118
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: ST_TO_ADDR
14656: GO 15287
14658: LD_INT 17
14660: DOUBLE
14661: EQUAL
14662: IFTRUE 14666
14664: GO 14890
14666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14667: LD_ADDR_VAR 0 2
14671: PUSH
14672: LD_INT 1
14674: PUSH
14675: LD_INT 2
14677: PUSH
14678: LD_INT 3
14680: PUSH
14681: LD_INT 4
14683: PUSH
14684: LD_INT 5
14686: PUSH
14687: LD_INT 6
14689: PUSH
14690: LD_INT 7
14692: PUSH
14693: LD_INT 8
14695: PUSH
14696: LD_INT 9
14698: PUSH
14699: LD_INT 10
14701: PUSH
14702: LD_INT 11
14704: PUSH
14705: LD_INT 12
14707: PUSH
14708: LD_INT 13
14710: PUSH
14711: LD_INT 14
14713: PUSH
14714: LD_INT 15
14716: PUSH
14717: LD_INT 16
14719: PUSH
14720: LD_INT 17
14722: PUSH
14723: LD_INT 18
14725: PUSH
14726: LD_INT 19
14728: PUSH
14729: LD_INT 20
14731: PUSH
14732: LD_INT 21
14734: PUSH
14735: LD_INT 22
14737: PUSH
14738: LD_INT 23
14740: PUSH
14741: LD_INT 24
14743: PUSH
14744: LD_INT 25
14746: PUSH
14747: LD_INT 26
14749: PUSH
14750: LD_INT 27
14752: PUSH
14753: LD_INT 28
14755: PUSH
14756: LD_INT 29
14758: PUSH
14759: LD_INT 30
14761: PUSH
14762: LD_INT 31
14764: PUSH
14765: LD_INT 32
14767: PUSH
14768: LD_INT 33
14770: PUSH
14771: LD_INT 34
14773: PUSH
14774: LD_INT 36
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 101
14816: PUSH
14817: LD_INT 102
14819: PUSH
14820: LD_INT 103
14822: PUSH
14823: LD_INT 104
14825: PUSH
14826: LD_INT 105
14828: PUSH
14829: LD_INT 106
14831: PUSH
14832: LD_INT 107
14834: PUSH
14835: LD_INT 108
14837: PUSH
14838: LD_INT 109
14840: PUSH
14841: LD_INT 110
14843: PUSH
14844: LD_INT 111
14846: PUSH
14847: LD_INT 112
14849: PUSH
14850: LD_INT 113
14852: PUSH
14853: LD_INT 114
14855: PUSH
14856: LD_INT 116
14858: PUSH
14859: LD_INT 117
14861: PUSH
14862: LD_INT 118
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: ST_TO_ADDR
14888: GO 15287
14890: LD_INT 18
14892: DOUBLE
14893: EQUAL
14894: IFTRUE 14898
14896: GO 15046
14898: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14899: LD_ADDR_VAR 0 2
14903: PUSH
14904: LD_INT 2
14906: PUSH
14907: LD_INT 4
14909: PUSH
14910: LD_INT 5
14912: PUSH
14913: LD_INT 7
14915: PUSH
14916: LD_INT 11
14918: PUSH
14919: LD_INT 12
14921: PUSH
14922: LD_INT 15
14924: PUSH
14925: LD_INT 16
14927: PUSH
14928: LD_INT 20
14930: PUSH
14931: LD_INT 21
14933: PUSH
14934: LD_INT 22
14936: PUSH
14937: LD_INT 23
14939: PUSH
14940: LD_INT 25
14942: PUSH
14943: LD_INT 26
14945: PUSH
14946: LD_INT 30
14948: PUSH
14949: LD_INT 31
14951: PUSH
14952: LD_INT 32
14954: PUSH
14955: LD_INT 33
14957: PUSH
14958: LD_INT 34
14960: PUSH
14961: LD_INT 35
14963: PUSH
14964: LD_INT 36
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 101
14992: PUSH
14993: LD_INT 102
14995: PUSH
14996: LD_INT 103
14998: PUSH
14999: LD_INT 106
15001: PUSH
15002: LD_INT 108
15004: PUSH
15005: LD_INT 112
15007: PUSH
15008: LD_INT 113
15010: PUSH
15011: LD_INT 114
15013: PUSH
15014: LD_INT 115
15016: PUSH
15017: LD_INT 116
15019: PUSH
15020: LD_INT 117
15022: PUSH
15023: LD_INT 118
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: ST_TO_ADDR
15044: GO 15287
15046: LD_INT 19
15048: DOUBLE
15049: EQUAL
15050: IFTRUE 15054
15052: GO 15286
15054: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15055: LD_ADDR_VAR 0 2
15059: PUSH
15060: LD_INT 1
15062: PUSH
15063: LD_INT 2
15065: PUSH
15066: LD_INT 3
15068: PUSH
15069: LD_INT 4
15071: PUSH
15072: LD_INT 5
15074: PUSH
15075: LD_INT 6
15077: PUSH
15078: LD_INT 7
15080: PUSH
15081: LD_INT 8
15083: PUSH
15084: LD_INT 9
15086: PUSH
15087: LD_INT 10
15089: PUSH
15090: LD_INT 11
15092: PUSH
15093: LD_INT 12
15095: PUSH
15096: LD_INT 13
15098: PUSH
15099: LD_INT 14
15101: PUSH
15102: LD_INT 15
15104: PUSH
15105: LD_INT 16
15107: PUSH
15108: LD_INT 17
15110: PUSH
15111: LD_INT 18
15113: PUSH
15114: LD_INT 19
15116: PUSH
15117: LD_INT 20
15119: PUSH
15120: LD_INT 21
15122: PUSH
15123: LD_INT 22
15125: PUSH
15126: LD_INT 23
15128: PUSH
15129: LD_INT 24
15131: PUSH
15132: LD_INT 25
15134: PUSH
15135: LD_INT 26
15137: PUSH
15138: LD_INT 27
15140: PUSH
15141: LD_INT 28
15143: PUSH
15144: LD_INT 29
15146: PUSH
15147: LD_INT 30
15149: PUSH
15150: LD_INT 31
15152: PUSH
15153: LD_INT 32
15155: PUSH
15156: LD_INT 33
15158: PUSH
15159: LD_INT 34
15161: PUSH
15162: LD_INT 35
15164: PUSH
15165: LD_INT 36
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: PUSH
15206: LD_INT 101
15208: PUSH
15209: LD_INT 102
15211: PUSH
15212: LD_INT 103
15214: PUSH
15215: LD_INT 104
15217: PUSH
15218: LD_INT 105
15220: PUSH
15221: LD_INT 106
15223: PUSH
15224: LD_INT 107
15226: PUSH
15227: LD_INT 108
15229: PUSH
15230: LD_INT 109
15232: PUSH
15233: LD_INT 110
15235: PUSH
15236: LD_INT 111
15238: PUSH
15239: LD_INT 112
15241: PUSH
15242: LD_INT 113
15244: PUSH
15245: LD_INT 114
15247: PUSH
15248: LD_INT 115
15250: PUSH
15251: LD_INT 116
15253: PUSH
15254: LD_INT 117
15256: PUSH
15257: LD_INT 118
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: ST_TO_ADDR
15284: GO 15287
15286: POP
// end else
15287: GO 15518
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15289: LD_ADDR_VAR 0 2
15293: PUSH
15294: LD_INT 1
15296: PUSH
15297: LD_INT 2
15299: PUSH
15300: LD_INT 3
15302: PUSH
15303: LD_INT 4
15305: PUSH
15306: LD_INT 5
15308: PUSH
15309: LD_INT 6
15311: PUSH
15312: LD_INT 7
15314: PUSH
15315: LD_INT 8
15317: PUSH
15318: LD_INT 9
15320: PUSH
15321: LD_INT 10
15323: PUSH
15324: LD_INT 11
15326: PUSH
15327: LD_INT 12
15329: PUSH
15330: LD_INT 13
15332: PUSH
15333: LD_INT 14
15335: PUSH
15336: LD_INT 15
15338: PUSH
15339: LD_INT 16
15341: PUSH
15342: LD_INT 17
15344: PUSH
15345: LD_INT 18
15347: PUSH
15348: LD_INT 19
15350: PUSH
15351: LD_INT 20
15353: PUSH
15354: LD_INT 21
15356: PUSH
15357: LD_INT 22
15359: PUSH
15360: LD_INT 23
15362: PUSH
15363: LD_INT 24
15365: PUSH
15366: LD_INT 25
15368: PUSH
15369: LD_INT 26
15371: PUSH
15372: LD_INT 27
15374: PUSH
15375: LD_INT 28
15377: PUSH
15378: LD_INT 29
15380: PUSH
15381: LD_INT 30
15383: PUSH
15384: LD_INT 31
15386: PUSH
15387: LD_INT 32
15389: PUSH
15390: LD_INT 33
15392: PUSH
15393: LD_INT 34
15395: PUSH
15396: LD_INT 35
15398: PUSH
15399: LD_INT 36
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: PUSH
15440: LD_INT 101
15442: PUSH
15443: LD_INT 102
15445: PUSH
15446: LD_INT 103
15448: PUSH
15449: LD_INT 104
15451: PUSH
15452: LD_INT 105
15454: PUSH
15455: LD_INT 106
15457: PUSH
15458: LD_INT 107
15460: PUSH
15461: LD_INT 108
15463: PUSH
15464: LD_INT 109
15466: PUSH
15467: LD_INT 110
15469: PUSH
15470: LD_INT 111
15472: PUSH
15473: LD_INT 112
15475: PUSH
15476: LD_INT 113
15478: PUSH
15479: LD_INT 114
15481: PUSH
15482: LD_INT 115
15484: PUSH
15485: LD_INT 116
15487: PUSH
15488: LD_INT 117
15490: PUSH
15491: LD_INT 118
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: ST_TO_ADDR
// if result then
15518: LD_VAR 0 2
15522: IFFALSE 16308
// begin normal :=  ;
15524: LD_ADDR_VAR 0 5
15528: PUSH
15529: LD_STRING 
15531: ST_TO_ADDR
// hardcore :=  ;
15532: LD_ADDR_VAR 0 6
15536: PUSH
15537: LD_STRING 
15539: ST_TO_ADDR
// active :=  ;
15540: LD_ADDR_VAR 0 7
15544: PUSH
15545: LD_STRING 
15547: ST_TO_ADDR
// for i = 1 to normalCounter do
15548: LD_ADDR_VAR 0 8
15552: PUSH
15553: DOUBLE
15554: LD_INT 1
15556: DEC
15557: ST_TO_ADDR
15558: LD_EXP 45
15562: PUSH
15563: FOR_TO
15564: IFFALSE 15665
// begin tmp := 0 ;
15566: LD_ADDR_VAR 0 3
15570: PUSH
15571: LD_STRING 0
15573: ST_TO_ADDR
// if result [ 1 ] then
15574: LD_VAR 0 2
15578: PUSH
15579: LD_INT 1
15581: ARRAY
15582: IFFALSE 15647
// if result [ 1 ] [ 1 ] = i then
15584: LD_VAR 0 2
15588: PUSH
15589: LD_INT 1
15591: ARRAY
15592: PUSH
15593: LD_INT 1
15595: ARRAY
15596: PUSH
15597: LD_VAR 0 8
15601: EQUAL
15602: IFFALSE 15647
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15604: LD_ADDR_VAR 0 2
15608: PUSH
15609: LD_VAR 0 2
15613: PPUSH
15614: LD_INT 1
15616: PPUSH
15617: LD_VAR 0 2
15621: PUSH
15622: LD_INT 1
15624: ARRAY
15625: PPUSH
15626: LD_INT 1
15628: PPUSH
15629: CALL_OW 3
15633: PPUSH
15634: CALL_OW 1
15638: ST_TO_ADDR
// tmp := 1 ;
15639: LD_ADDR_VAR 0 3
15643: PUSH
15644: LD_STRING 1
15646: ST_TO_ADDR
// end ; normal := normal & tmp ;
15647: LD_ADDR_VAR 0 5
15651: PUSH
15652: LD_VAR 0 5
15656: PUSH
15657: LD_VAR 0 3
15661: STR
15662: ST_TO_ADDR
// end ;
15663: GO 15563
15665: POP
15666: POP
// for i = 1 to hardcoreCounter do
15667: LD_ADDR_VAR 0 8
15671: PUSH
15672: DOUBLE
15673: LD_INT 1
15675: DEC
15676: ST_TO_ADDR
15677: LD_EXP 46
15681: PUSH
15682: FOR_TO
15683: IFFALSE 15788
// begin tmp := 0 ;
15685: LD_ADDR_VAR 0 3
15689: PUSH
15690: LD_STRING 0
15692: ST_TO_ADDR
// if result [ 2 ] then
15693: LD_VAR 0 2
15697: PUSH
15698: LD_INT 2
15700: ARRAY
15701: IFFALSE 15770
// if result [ 2 ] [ 1 ] = 100 + i then
15703: LD_VAR 0 2
15707: PUSH
15708: LD_INT 2
15710: ARRAY
15711: PUSH
15712: LD_INT 1
15714: ARRAY
15715: PUSH
15716: LD_INT 100
15718: PUSH
15719: LD_VAR 0 8
15723: PLUS
15724: EQUAL
15725: IFFALSE 15770
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15727: LD_ADDR_VAR 0 2
15731: PUSH
15732: LD_VAR 0 2
15736: PPUSH
15737: LD_INT 2
15739: PPUSH
15740: LD_VAR 0 2
15744: PUSH
15745: LD_INT 2
15747: ARRAY
15748: PPUSH
15749: LD_INT 1
15751: PPUSH
15752: CALL_OW 3
15756: PPUSH
15757: CALL_OW 1
15761: ST_TO_ADDR
// tmp := 1 ;
15762: LD_ADDR_VAR 0 3
15766: PUSH
15767: LD_STRING 1
15769: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15770: LD_ADDR_VAR 0 6
15774: PUSH
15775: LD_VAR 0 6
15779: PUSH
15780: LD_VAR 0 3
15784: STR
15785: ST_TO_ADDR
// end ;
15786: GO 15682
15788: POP
15789: POP
// if isGameLoad then
15790: LD_VAR 0 1
15794: IFFALSE 16269
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15796: LD_ADDR_VAR 0 4
15800: PUSH
15801: LD_EXP 49
15805: PUSH
15806: LD_EXP 48
15810: PUSH
15811: LD_EXP 50
15815: PUSH
15816: LD_EXP 47
15820: PUSH
15821: LD_EXP 51
15825: PUSH
15826: LD_EXP 52
15830: PUSH
15831: LD_EXP 53
15835: PUSH
15836: LD_EXP 54
15840: PUSH
15841: LD_EXP 55
15845: PUSH
15846: LD_EXP 56
15850: PUSH
15851: LD_EXP 57
15855: PUSH
15856: LD_EXP 58
15860: PUSH
15861: LD_EXP 59
15865: PUSH
15866: LD_EXP 60
15870: PUSH
15871: LD_EXP 68
15875: PUSH
15876: LD_EXP 69
15880: PUSH
15881: LD_EXP 70
15885: PUSH
15886: LD_EXP 71
15890: PUSH
15891: LD_EXP 73
15895: PUSH
15896: LD_EXP 74
15900: PUSH
15901: LD_EXP 75
15905: PUSH
15906: LD_EXP 78
15910: PUSH
15911: LD_EXP 80
15915: PUSH
15916: LD_EXP 81
15920: PUSH
15921: LD_EXP 82
15925: PUSH
15926: LD_EXP 84
15930: PUSH
15931: LD_EXP 85
15935: PUSH
15936: LD_EXP 88
15940: PUSH
15941: LD_EXP 89
15945: PUSH
15946: LD_EXP 90
15950: PUSH
15951: LD_EXP 91
15955: PUSH
15956: LD_EXP 92
15960: PUSH
15961: LD_EXP 93
15965: PUSH
15966: LD_EXP 94
15970: PUSH
15971: LD_EXP 95
15975: PUSH
15976: LD_EXP 96
15980: PUSH
15981: LD_EXP 61
15985: PUSH
15986: LD_EXP 62
15990: PUSH
15991: LD_EXP 65
15995: PUSH
15996: LD_EXP 66
16000: PUSH
16001: LD_EXP 67
16005: PUSH
16006: LD_EXP 63
16010: PUSH
16011: LD_EXP 64
16015: PUSH
16016: LD_EXP 72
16020: PUSH
16021: LD_EXP 76
16025: PUSH
16026: LD_EXP 77
16030: PUSH
16031: LD_EXP 79
16035: PUSH
16036: LD_EXP 83
16040: PUSH
16041: LD_EXP 86
16045: PUSH
16046: LD_EXP 87
16050: PUSH
16051: LD_EXP 97
16055: PUSH
16056: LD_EXP 98
16060: PUSH
16061: LD_EXP 99
16065: PUSH
16066: LD_EXP 100
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: ST_TO_ADDR
// tmp :=  ;
16127: LD_ADDR_VAR 0 3
16131: PUSH
16132: LD_STRING 
16134: ST_TO_ADDR
// for i = 1 to normalCounter do
16135: LD_ADDR_VAR 0 8
16139: PUSH
16140: DOUBLE
16141: LD_INT 1
16143: DEC
16144: ST_TO_ADDR
16145: LD_EXP 45
16149: PUSH
16150: FOR_TO
16151: IFFALSE 16187
// begin if flags [ i ] then
16153: LD_VAR 0 4
16157: PUSH
16158: LD_VAR 0 8
16162: ARRAY
16163: IFFALSE 16185
// tmp := tmp & i & ; ;
16165: LD_ADDR_VAR 0 3
16169: PUSH
16170: LD_VAR 0 3
16174: PUSH
16175: LD_VAR 0 8
16179: STR
16180: PUSH
16181: LD_STRING ;
16183: STR
16184: ST_TO_ADDR
// end ;
16185: GO 16150
16187: POP
16188: POP
// for i = 1 to hardcoreCounter do
16189: LD_ADDR_VAR 0 8
16193: PUSH
16194: DOUBLE
16195: LD_INT 1
16197: DEC
16198: ST_TO_ADDR
16199: LD_EXP 46
16203: PUSH
16204: FOR_TO
16205: IFFALSE 16251
// begin if flags [ normalCounter + i ] then
16207: LD_VAR 0 4
16211: PUSH
16212: LD_EXP 45
16216: PUSH
16217: LD_VAR 0 8
16221: PLUS
16222: ARRAY
16223: IFFALSE 16249
// tmp := tmp & ( 100 + i ) & ; ;
16225: LD_ADDR_VAR 0 3
16229: PUSH
16230: LD_VAR 0 3
16234: PUSH
16235: LD_INT 100
16237: PUSH
16238: LD_VAR 0 8
16242: PLUS
16243: STR
16244: PUSH
16245: LD_STRING ;
16247: STR
16248: ST_TO_ADDR
// end ;
16249: GO 16204
16251: POP
16252: POP
// if tmp then
16253: LD_VAR 0 3
16257: IFFALSE 16269
// active := tmp ;
16259: LD_ADDR_VAR 0 7
16263: PUSH
16264: LD_VAR 0 3
16268: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16269: LD_STRING getStreamItemsFromMission("
16271: PUSH
16272: LD_VAR 0 5
16276: STR
16277: PUSH
16278: LD_STRING ","
16280: STR
16281: PUSH
16282: LD_VAR 0 6
16286: STR
16287: PUSH
16288: LD_STRING ","
16290: STR
16291: PUSH
16292: LD_VAR 0 7
16296: STR
16297: PUSH
16298: LD_STRING ")
16300: STR
16301: PPUSH
16302: CALL_OW 559
// end else
16306: GO 16315
// ToLua ( getStreamItemsFromMission("","","") ) ;
16308: LD_STRING getStreamItemsFromMission("","","")
16310: PPUSH
16311: CALL_OW 559
// end ;
16315: LD_VAR 0 2
16319: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16320: LD_EXP 44
16324: PUSH
16325: LD_EXP 49
16329: AND
16330: IFFALSE 16454
16332: GO 16334
16334: DISABLE
16335: LD_INT 0
16337: PPUSH
16338: PPUSH
// begin enable ;
16339: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16340: LD_ADDR_VAR 0 2
16344: PUSH
16345: LD_INT 22
16347: PUSH
16348: LD_OWVAR 2
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 2
16359: PUSH
16360: LD_INT 34
16362: PUSH
16363: LD_INT 7
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 34
16372: PUSH
16373: LD_INT 45
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 34
16382: PUSH
16383: LD_INT 28
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 34
16392: PUSH
16393: LD_INT 47
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PPUSH
16411: CALL_OW 69
16415: ST_TO_ADDR
// if not tmp then
16416: LD_VAR 0 2
16420: NOT
16421: IFFALSE 16425
// exit ;
16423: GO 16454
// for i in tmp do
16425: LD_ADDR_VAR 0 1
16429: PUSH
16430: LD_VAR 0 2
16434: PUSH
16435: FOR_IN
16436: IFFALSE 16452
// begin SetLives ( i , 0 ) ;
16438: LD_VAR 0 1
16442: PPUSH
16443: LD_INT 0
16445: PPUSH
16446: CALL_OW 234
// end ;
16450: GO 16435
16452: POP
16453: POP
// end ;
16454: PPOPN 2
16456: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16457: LD_EXP 44
16461: PUSH
16462: LD_EXP 50
16466: AND
16467: IFFALSE 16551
16469: GO 16471
16471: DISABLE
16472: LD_INT 0
16474: PPUSH
16475: PPUSH
// begin enable ;
16476: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16477: LD_ADDR_VAR 0 2
16481: PUSH
16482: LD_INT 22
16484: PUSH
16485: LD_OWVAR 2
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 32
16496: PUSH
16497: LD_INT 3
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PPUSH
16508: CALL_OW 69
16512: ST_TO_ADDR
// if not tmp then
16513: LD_VAR 0 2
16517: NOT
16518: IFFALSE 16522
// exit ;
16520: GO 16551
// for i in tmp do
16522: LD_ADDR_VAR 0 1
16526: PUSH
16527: LD_VAR 0 2
16531: PUSH
16532: FOR_IN
16533: IFFALSE 16549
// begin SetLives ( i , 0 ) ;
16535: LD_VAR 0 1
16539: PPUSH
16540: LD_INT 0
16542: PPUSH
16543: CALL_OW 234
// end ;
16547: GO 16532
16549: POP
16550: POP
// end ;
16551: PPOPN 2
16553: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16554: LD_EXP 44
16558: PUSH
16559: LD_EXP 47
16563: AND
16564: IFFALSE 16657
16566: GO 16568
16568: DISABLE
16569: LD_INT 0
16571: PPUSH
// begin enable ;
16572: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16573: LD_ADDR_VAR 0 1
16577: PUSH
16578: LD_INT 22
16580: PUSH
16581: LD_OWVAR 2
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 2
16592: PUSH
16593: LD_INT 25
16595: PUSH
16596: LD_INT 5
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 25
16605: PUSH
16606: LD_INT 9
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 25
16615: PUSH
16616: LD_INT 8
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PPUSH
16633: CALL_OW 69
16637: PUSH
16638: FOR_IN
16639: IFFALSE 16655
// begin SetClass ( i , 1 ) ;
16641: LD_VAR 0 1
16645: PPUSH
16646: LD_INT 1
16648: PPUSH
16649: CALL_OW 336
// end ;
16653: GO 16638
16655: POP
16656: POP
// end ;
16657: PPOPN 1
16659: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16660: LD_EXP 44
16664: PUSH
16665: LD_EXP 48
16669: AND
16670: PUSH
16671: LD_OWVAR 65
16675: PUSH
16676: LD_INT 7
16678: LESS
16679: AND
16680: IFFALSE 16694
16682: GO 16684
16684: DISABLE
// begin enable ;
16685: ENABLE
// game_speed := 7 ;
16686: LD_ADDR_OWVAR 65
16690: PUSH
16691: LD_INT 7
16693: ST_TO_ADDR
// end ;
16694: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16695: LD_EXP 44
16699: PUSH
16700: LD_EXP 51
16704: AND
16705: IFFALSE 16907
16707: GO 16709
16709: DISABLE
16710: LD_INT 0
16712: PPUSH
16713: PPUSH
16714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16715: LD_ADDR_VAR 0 3
16719: PUSH
16720: LD_INT 81
16722: PUSH
16723: LD_OWVAR 2
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 21
16734: PUSH
16735: LD_INT 1
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PPUSH
16746: CALL_OW 69
16750: ST_TO_ADDR
// if not tmp then
16751: LD_VAR 0 3
16755: NOT
16756: IFFALSE 16760
// exit ;
16758: GO 16907
// if tmp > 5 then
16760: LD_VAR 0 3
16764: PUSH
16765: LD_INT 5
16767: GREATER
16768: IFFALSE 16780
// k := 5 else
16770: LD_ADDR_VAR 0 2
16774: PUSH
16775: LD_INT 5
16777: ST_TO_ADDR
16778: GO 16790
// k := tmp ;
16780: LD_ADDR_VAR 0 2
16784: PUSH
16785: LD_VAR 0 3
16789: ST_TO_ADDR
// for i := 1 to k do
16790: LD_ADDR_VAR 0 1
16794: PUSH
16795: DOUBLE
16796: LD_INT 1
16798: DEC
16799: ST_TO_ADDR
16800: LD_VAR 0 2
16804: PUSH
16805: FOR_TO
16806: IFFALSE 16905
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16808: LD_VAR 0 3
16812: PUSH
16813: LD_VAR 0 1
16817: ARRAY
16818: PPUSH
16819: LD_VAR 0 1
16823: PUSH
16824: LD_INT 4
16826: MOD
16827: PUSH
16828: LD_INT 1
16830: PLUS
16831: PPUSH
16832: CALL_OW 259
16836: PUSH
16837: LD_INT 10
16839: LESS
16840: IFFALSE 16903
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16842: LD_VAR 0 3
16846: PUSH
16847: LD_VAR 0 1
16851: ARRAY
16852: PPUSH
16853: LD_VAR 0 1
16857: PUSH
16858: LD_INT 4
16860: MOD
16861: PUSH
16862: LD_INT 1
16864: PLUS
16865: PPUSH
16866: LD_VAR 0 3
16870: PUSH
16871: LD_VAR 0 1
16875: ARRAY
16876: PPUSH
16877: LD_VAR 0 1
16881: PUSH
16882: LD_INT 4
16884: MOD
16885: PUSH
16886: LD_INT 1
16888: PLUS
16889: PPUSH
16890: CALL_OW 259
16894: PUSH
16895: LD_INT 1
16897: PLUS
16898: PPUSH
16899: CALL_OW 237
16903: GO 16805
16905: POP
16906: POP
// end ;
16907: PPOPN 3
16909: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16910: LD_EXP 44
16914: PUSH
16915: LD_EXP 52
16919: AND
16920: IFFALSE 16940
16922: GO 16924
16924: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16925: LD_INT 4
16927: PPUSH
16928: LD_OWVAR 2
16932: PPUSH
16933: LD_INT 0
16935: PPUSH
16936: CALL_OW 324
16940: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16941: LD_EXP 44
16945: PUSH
16946: LD_EXP 81
16950: AND
16951: IFFALSE 16971
16953: GO 16955
16955: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16956: LD_INT 19
16958: PPUSH
16959: LD_OWVAR 2
16963: PPUSH
16964: LD_INT 0
16966: PPUSH
16967: CALL_OW 324
16971: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16972: LD_EXP 44
16976: PUSH
16977: LD_EXP 53
16981: AND
16982: IFFALSE 17084
16984: GO 16986
16986: DISABLE
16987: LD_INT 0
16989: PPUSH
16990: PPUSH
// begin enable ;
16991: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16992: LD_ADDR_VAR 0 2
16996: PUSH
16997: LD_INT 22
16999: PUSH
17000: LD_OWVAR 2
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 2
17011: PUSH
17012: LD_INT 34
17014: PUSH
17015: LD_INT 11
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 34
17024: PUSH
17025: LD_INT 30
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PPUSH
17041: CALL_OW 69
17045: ST_TO_ADDR
// if not tmp then
17046: LD_VAR 0 2
17050: NOT
17051: IFFALSE 17055
// exit ;
17053: GO 17084
// for i in tmp do
17055: LD_ADDR_VAR 0 1
17059: PUSH
17060: LD_VAR 0 2
17064: PUSH
17065: FOR_IN
17066: IFFALSE 17082
// begin SetLives ( i , 0 ) ;
17068: LD_VAR 0 1
17072: PPUSH
17073: LD_INT 0
17075: PPUSH
17076: CALL_OW 234
// end ;
17080: GO 17065
17082: POP
17083: POP
// end ;
17084: PPOPN 2
17086: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17087: LD_EXP 44
17091: PUSH
17092: LD_EXP 54
17096: AND
17097: IFFALSE 17117
17099: GO 17101
17101: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17102: LD_INT 32
17104: PPUSH
17105: LD_OWVAR 2
17109: PPUSH
17110: LD_INT 0
17112: PPUSH
17113: CALL_OW 324
17117: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17118: LD_EXP 44
17122: PUSH
17123: LD_EXP 55
17127: AND
17128: IFFALSE 17309
17130: GO 17132
17132: DISABLE
17133: LD_INT 0
17135: PPUSH
17136: PPUSH
17137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17138: LD_ADDR_VAR 0 2
17142: PUSH
17143: LD_INT 22
17145: PUSH
17146: LD_OWVAR 2
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 33
17157: PUSH
17158: LD_INT 3
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PPUSH
17169: CALL_OW 69
17173: ST_TO_ADDR
// if not tmp then
17174: LD_VAR 0 2
17178: NOT
17179: IFFALSE 17183
// exit ;
17181: GO 17309
// side := 0 ;
17183: LD_ADDR_VAR 0 3
17187: PUSH
17188: LD_INT 0
17190: ST_TO_ADDR
// for i := 1 to 8 do
17191: LD_ADDR_VAR 0 1
17195: PUSH
17196: DOUBLE
17197: LD_INT 1
17199: DEC
17200: ST_TO_ADDR
17201: LD_INT 8
17203: PUSH
17204: FOR_TO
17205: IFFALSE 17253
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17207: LD_OWVAR 2
17211: PUSH
17212: LD_VAR 0 1
17216: NONEQUAL
17217: PUSH
17218: LD_OWVAR 2
17222: PPUSH
17223: LD_VAR 0 1
17227: PPUSH
17228: CALL_OW 81
17232: PUSH
17233: LD_INT 2
17235: EQUAL
17236: AND
17237: IFFALSE 17251
// begin side := i ;
17239: LD_ADDR_VAR 0 3
17243: PUSH
17244: LD_VAR 0 1
17248: ST_TO_ADDR
// break ;
17249: GO 17253
// end ;
17251: GO 17204
17253: POP
17254: POP
// if not side then
17255: LD_VAR 0 3
17259: NOT
17260: IFFALSE 17264
// exit ;
17262: GO 17309
// for i := 1 to tmp do
17264: LD_ADDR_VAR 0 1
17268: PUSH
17269: DOUBLE
17270: LD_INT 1
17272: DEC
17273: ST_TO_ADDR
17274: LD_VAR 0 2
17278: PUSH
17279: FOR_TO
17280: IFFALSE 17307
// if Prob ( 60 ) then
17282: LD_INT 60
17284: PPUSH
17285: CALL_OW 13
17289: IFFALSE 17305
// SetSide ( i , side ) ;
17291: LD_VAR 0 1
17295: PPUSH
17296: LD_VAR 0 3
17300: PPUSH
17301: CALL_OW 235
17305: GO 17279
17307: POP
17308: POP
// end ;
17309: PPOPN 3
17311: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17312: LD_EXP 44
17316: PUSH
17317: LD_EXP 57
17321: AND
17322: IFFALSE 17441
17324: GO 17326
17326: DISABLE
17327: LD_INT 0
17329: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17330: LD_ADDR_VAR 0 1
17334: PUSH
17335: LD_INT 22
17337: PUSH
17338: LD_OWVAR 2
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 21
17349: PUSH
17350: LD_INT 1
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 3
17359: PUSH
17360: LD_INT 23
17362: PUSH
17363: LD_INT 0
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: PPUSH
17379: CALL_OW 69
17383: PUSH
17384: FOR_IN
17385: IFFALSE 17439
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17387: LD_VAR 0 1
17391: PPUSH
17392: CALL_OW 257
17396: PUSH
17397: LD_INT 1
17399: PUSH
17400: LD_INT 2
17402: PUSH
17403: LD_INT 3
17405: PUSH
17406: LD_INT 4
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: IN
17415: IFFALSE 17437
// SetClass ( un , rand ( 1 , 4 ) ) ;
17417: LD_VAR 0 1
17421: PPUSH
17422: LD_INT 1
17424: PPUSH
17425: LD_INT 4
17427: PPUSH
17428: CALL_OW 12
17432: PPUSH
17433: CALL_OW 336
17437: GO 17384
17439: POP
17440: POP
// end ;
17441: PPOPN 1
17443: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17444: LD_EXP 44
17448: PUSH
17449: LD_EXP 56
17453: AND
17454: IFFALSE 17533
17456: GO 17458
17458: DISABLE
17459: LD_INT 0
17461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17462: LD_ADDR_VAR 0 1
17466: PUSH
17467: LD_INT 22
17469: PUSH
17470: LD_OWVAR 2
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 21
17481: PUSH
17482: LD_INT 3
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PPUSH
17493: CALL_OW 69
17497: ST_TO_ADDR
// if not tmp then
17498: LD_VAR 0 1
17502: NOT
17503: IFFALSE 17507
// exit ;
17505: GO 17533
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17507: LD_VAR 0 1
17511: PUSH
17512: LD_INT 1
17514: PPUSH
17515: LD_VAR 0 1
17519: PPUSH
17520: CALL_OW 12
17524: ARRAY
17525: PPUSH
17526: LD_INT 100
17528: PPUSH
17529: CALL_OW 234
// end ;
17533: PPOPN 1
17535: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17536: LD_EXP 44
17540: PUSH
17541: LD_EXP 58
17545: AND
17546: IFFALSE 17644
17548: GO 17550
17550: DISABLE
17551: LD_INT 0
17553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17554: LD_ADDR_VAR 0 1
17558: PUSH
17559: LD_INT 22
17561: PUSH
17562: LD_OWVAR 2
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 21
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PPUSH
17585: CALL_OW 69
17589: ST_TO_ADDR
// if not tmp then
17590: LD_VAR 0 1
17594: NOT
17595: IFFALSE 17599
// exit ;
17597: GO 17644
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17599: LD_VAR 0 1
17603: PUSH
17604: LD_INT 1
17606: PPUSH
17607: LD_VAR 0 1
17611: PPUSH
17612: CALL_OW 12
17616: ARRAY
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: LD_INT 4
17623: PPUSH
17624: CALL_OW 12
17628: PPUSH
17629: LD_INT 3000
17631: PPUSH
17632: LD_INT 9000
17634: PPUSH
17635: CALL_OW 12
17639: PPUSH
17640: CALL_OW 492
// end ;
17644: PPOPN 1
17646: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17647: LD_EXP 44
17651: PUSH
17652: LD_EXP 59
17656: AND
17657: IFFALSE 17677
17659: GO 17661
17661: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17662: LD_INT 1
17664: PPUSH
17665: LD_OWVAR 2
17669: PPUSH
17670: LD_INT 0
17672: PPUSH
17673: CALL_OW 324
17677: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17678: LD_EXP 44
17682: PUSH
17683: LD_EXP 60
17687: AND
17688: IFFALSE 17771
17690: GO 17692
17692: DISABLE
17693: LD_INT 0
17695: PPUSH
17696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17697: LD_ADDR_VAR 0 2
17701: PUSH
17702: LD_INT 22
17704: PUSH
17705: LD_OWVAR 2
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: LD_INT 21
17716: PUSH
17717: LD_INT 3
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PPUSH
17728: CALL_OW 69
17732: ST_TO_ADDR
// if not tmp then
17733: LD_VAR 0 2
17737: NOT
17738: IFFALSE 17742
// exit ;
17740: GO 17771
// for i in tmp do
17742: LD_ADDR_VAR 0 1
17746: PUSH
17747: LD_VAR 0 2
17751: PUSH
17752: FOR_IN
17753: IFFALSE 17769
// SetBLevel ( i , 10 ) ;
17755: LD_VAR 0 1
17759: PPUSH
17760: LD_INT 10
17762: PPUSH
17763: CALL_OW 241
17767: GO 17752
17769: POP
17770: POP
// end ;
17771: PPOPN 2
17773: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17774: LD_EXP 44
17778: PUSH
17779: LD_EXP 61
17783: AND
17784: IFFALSE 17895
17786: GO 17788
17788: DISABLE
17789: LD_INT 0
17791: PPUSH
17792: PPUSH
17793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17794: LD_ADDR_VAR 0 3
17798: PUSH
17799: LD_INT 22
17801: PUSH
17802: LD_OWVAR 2
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 25
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PPUSH
17825: CALL_OW 69
17829: ST_TO_ADDR
// if not tmp then
17830: LD_VAR 0 3
17834: NOT
17835: IFFALSE 17839
// exit ;
17837: GO 17895
// un := tmp [ rand ( 1 , tmp ) ] ;
17839: LD_ADDR_VAR 0 2
17843: PUSH
17844: LD_VAR 0 3
17848: PUSH
17849: LD_INT 1
17851: PPUSH
17852: LD_VAR 0 3
17856: PPUSH
17857: CALL_OW 12
17861: ARRAY
17862: ST_TO_ADDR
// if Crawls ( un ) then
17863: LD_VAR 0 2
17867: PPUSH
17868: CALL_OW 318
17872: IFFALSE 17883
// ComWalk ( un ) ;
17874: LD_VAR 0 2
17878: PPUSH
17879: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17883: LD_VAR 0 2
17887: PPUSH
17888: LD_INT 5
17890: PPUSH
17891: CALL_OW 336
// end ;
17895: PPOPN 3
17897: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17898: LD_EXP 44
17902: PUSH
17903: LD_EXP 62
17907: AND
17908: PUSH
17909: LD_OWVAR 67
17913: PUSH
17914: LD_INT 4
17916: LESS
17917: AND
17918: IFFALSE 17937
17920: GO 17922
17922: DISABLE
// begin Difficulty := Difficulty + 1 ;
17923: LD_ADDR_OWVAR 67
17927: PUSH
17928: LD_OWVAR 67
17932: PUSH
17933: LD_INT 1
17935: PLUS
17936: ST_TO_ADDR
// end ;
17937: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17938: LD_EXP 44
17942: PUSH
17943: LD_EXP 63
17947: AND
17948: IFFALSE 18051
17950: GO 17952
17952: DISABLE
17953: LD_INT 0
17955: PPUSH
// begin for i := 1 to 5 do
17956: LD_ADDR_VAR 0 1
17960: PUSH
17961: DOUBLE
17962: LD_INT 1
17964: DEC
17965: ST_TO_ADDR
17966: LD_INT 5
17968: PUSH
17969: FOR_TO
17970: IFFALSE 18049
// begin uc_nation := nation_nature ;
17972: LD_ADDR_OWVAR 21
17976: PUSH
17977: LD_INT 0
17979: ST_TO_ADDR
// uc_side := 0 ;
17980: LD_ADDR_OWVAR 20
17984: PUSH
17985: LD_INT 0
17987: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17988: LD_ADDR_OWVAR 29
17992: PUSH
17993: LD_INT 12
17995: PUSH
17996: LD_INT 12
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: ST_TO_ADDR
// hc_agressivity := 20 ;
18003: LD_ADDR_OWVAR 35
18007: PUSH
18008: LD_INT 20
18010: ST_TO_ADDR
// hc_class := class_tiger ;
18011: LD_ADDR_OWVAR 28
18015: PUSH
18016: LD_INT 14
18018: ST_TO_ADDR
// hc_gallery :=  ;
18019: LD_ADDR_OWVAR 33
18023: PUSH
18024: LD_STRING 
18026: ST_TO_ADDR
// hc_name :=  ;
18027: LD_ADDR_OWVAR 26
18031: PUSH
18032: LD_STRING 
18034: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18035: CALL_OW 44
18039: PPUSH
18040: LD_INT 0
18042: PPUSH
18043: CALL_OW 51
// end ;
18047: GO 17969
18049: POP
18050: POP
// end ;
18051: PPOPN 1
18053: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18054: LD_EXP 44
18058: PUSH
18059: LD_EXP 64
18063: AND
18064: IFFALSE 18073
18066: GO 18068
18068: DISABLE
// StreamSibBomb ;
18069: CALL 18074 0 0
18073: END
// export function StreamSibBomb ; var i , x , y ; begin
18074: LD_INT 0
18076: PPUSH
18077: PPUSH
18078: PPUSH
18079: PPUSH
// result := false ;
18080: LD_ADDR_VAR 0 1
18084: PUSH
18085: LD_INT 0
18087: ST_TO_ADDR
// for i := 1 to 16 do
18088: LD_ADDR_VAR 0 2
18092: PUSH
18093: DOUBLE
18094: LD_INT 1
18096: DEC
18097: ST_TO_ADDR
18098: LD_INT 16
18100: PUSH
18101: FOR_TO
18102: IFFALSE 18301
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18104: LD_ADDR_VAR 0 3
18108: PUSH
18109: LD_INT 10
18111: PUSH
18112: LD_INT 20
18114: PUSH
18115: LD_INT 30
18117: PUSH
18118: LD_INT 40
18120: PUSH
18121: LD_INT 50
18123: PUSH
18124: LD_INT 60
18126: PUSH
18127: LD_INT 70
18129: PUSH
18130: LD_INT 80
18132: PUSH
18133: LD_INT 90
18135: PUSH
18136: LD_INT 100
18138: PUSH
18139: LD_INT 110
18141: PUSH
18142: LD_INT 120
18144: PUSH
18145: LD_INT 130
18147: PUSH
18148: LD_INT 140
18150: PUSH
18151: LD_INT 150
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 1
18173: PPUSH
18174: LD_INT 15
18176: PPUSH
18177: CALL_OW 12
18181: ARRAY
18182: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18183: LD_ADDR_VAR 0 4
18187: PUSH
18188: LD_INT 10
18190: PUSH
18191: LD_INT 20
18193: PUSH
18194: LD_INT 30
18196: PUSH
18197: LD_INT 40
18199: PUSH
18200: LD_INT 50
18202: PUSH
18203: LD_INT 60
18205: PUSH
18206: LD_INT 70
18208: PUSH
18209: LD_INT 80
18211: PUSH
18212: LD_INT 90
18214: PUSH
18215: LD_INT 100
18217: PUSH
18218: LD_INT 110
18220: PUSH
18221: LD_INT 120
18223: PUSH
18224: LD_INT 130
18226: PUSH
18227: LD_INT 140
18229: PUSH
18230: LD_INT 150
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 1
18252: PPUSH
18253: LD_INT 15
18255: PPUSH
18256: CALL_OW 12
18260: ARRAY
18261: ST_TO_ADDR
// if ValidHex ( x , y ) then
18262: LD_VAR 0 3
18266: PPUSH
18267: LD_VAR 0 4
18271: PPUSH
18272: CALL_OW 488
18276: IFFALSE 18299
// begin result := [ x , y ] ;
18278: LD_ADDR_VAR 0 1
18282: PUSH
18283: LD_VAR 0 3
18287: PUSH
18288: LD_VAR 0 4
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: ST_TO_ADDR
// break ;
18297: GO 18301
// end ; end ;
18299: GO 18101
18301: POP
18302: POP
// if result then
18303: LD_VAR 0 1
18307: IFFALSE 18367
// begin ToLua ( playSibBomb() ) ;
18309: LD_STRING playSibBomb()
18311: PPUSH
18312: CALL_OW 559
// wait ( 0 0$14 ) ;
18316: LD_INT 490
18318: PPUSH
18319: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18323: LD_VAR 0 1
18327: PUSH
18328: LD_INT 1
18330: ARRAY
18331: PPUSH
18332: LD_VAR 0 1
18336: PUSH
18337: LD_INT 2
18339: ARRAY
18340: PPUSH
18341: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18345: LD_VAR 0 1
18349: PUSH
18350: LD_INT 1
18352: ARRAY
18353: PPUSH
18354: LD_VAR 0 1
18358: PUSH
18359: LD_INT 2
18361: ARRAY
18362: PPUSH
18363: CALL_OW 429
// end ; end ;
18367: LD_VAR 0 1
18371: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18372: LD_EXP 44
18376: PUSH
18377: LD_EXP 66
18381: AND
18382: IFFALSE 18394
18384: GO 18386
18386: DISABLE
// YouLost (  ) ;
18387: LD_STRING 
18389: PPUSH
18390: CALL_OW 104
18394: END
// every 0 0$1 trigger StreamModeActive and sFog do
18395: LD_EXP 44
18399: PUSH
18400: LD_EXP 65
18404: AND
18405: IFFALSE 18419
18407: GO 18409
18409: DISABLE
// FogOff ( your_side ) ;
18410: LD_OWVAR 2
18414: PPUSH
18415: CALL_OW 344
18419: END
// every 0 0$1 trigger StreamModeActive and sSun do
18420: LD_EXP 44
18424: PUSH
18425: LD_EXP 67
18429: AND
18430: IFFALSE 18458
18432: GO 18434
18434: DISABLE
// begin solar_recharge_percent := 0 ;
18435: LD_ADDR_OWVAR 79
18439: PUSH
18440: LD_INT 0
18442: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18443: LD_INT 10500
18445: PPUSH
18446: CALL_OW 67
// solar_recharge_percent := 100 ;
18450: LD_ADDR_OWVAR 79
18454: PUSH
18455: LD_INT 100
18457: ST_TO_ADDR
// end ;
18458: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18459: LD_EXP 44
18463: PUSH
18464: LD_EXP 68
18468: AND
18469: IFFALSE 18708
18471: GO 18473
18473: DISABLE
18474: LD_INT 0
18476: PPUSH
18477: PPUSH
18478: PPUSH
// begin tmp := [ ] ;
18479: LD_ADDR_VAR 0 3
18483: PUSH
18484: EMPTY
18485: ST_TO_ADDR
// for i := 1 to 6 do
18486: LD_ADDR_VAR 0 1
18490: PUSH
18491: DOUBLE
18492: LD_INT 1
18494: DEC
18495: ST_TO_ADDR
18496: LD_INT 6
18498: PUSH
18499: FOR_TO
18500: IFFALSE 18605
// begin uc_nation := nation_nature ;
18502: LD_ADDR_OWVAR 21
18506: PUSH
18507: LD_INT 0
18509: ST_TO_ADDR
// uc_side := 0 ;
18510: LD_ADDR_OWVAR 20
18514: PUSH
18515: LD_INT 0
18517: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18518: LD_ADDR_OWVAR 29
18522: PUSH
18523: LD_INT 12
18525: PUSH
18526: LD_INT 12
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: ST_TO_ADDR
// hc_agressivity := 20 ;
18533: LD_ADDR_OWVAR 35
18537: PUSH
18538: LD_INT 20
18540: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18541: LD_ADDR_OWVAR 28
18545: PUSH
18546: LD_INT 17
18548: ST_TO_ADDR
// hc_gallery :=  ;
18549: LD_ADDR_OWVAR 33
18553: PUSH
18554: LD_STRING 
18556: ST_TO_ADDR
// hc_name :=  ;
18557: LD_ADDR_OWVAR 26
18561: PUSH
18562: LD_STRING 
18564: ST_TO_ADDR
// un := CreateHuman ;
18565: LD_ADDR_VAR 0 2
18569: PUSH
18570: CALL_OW 44
18574: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18575: LD_VAR 0 2
18579: PPUSH
18580: LD_INT 1
18582: PPUSH
18583: CALL_OW 51
// tmp := tmp ^ un ;
18587: LD_ADDR_VAR 0 3
18591: PUSH
18592: LD_VAR 0 3
18596: PUSH
18597: LD_VAR 0 2
18601: ADD
18602: ST_TO_ADDR
// end ;
18603: GO 18499
18605: POP
18606: POP
// repeat wait ( 0 0$1 ) ;
18607: LD_INT 35
18609: PPUSH
18610: CALL_OW 67
// for un in tmp do
18614: LD_ADDR_VAR 0 2
18618: PUSH
18619: LD_VAR 0 3
18623: PUSH
18624: FOR_IN
18625: IFFALSE 18699
// begin if IsDead ( un ) then
18627: LD_VAR 0 2
18631: PPUSH
18632: CALL_OW 301
18636: IFFALSE 18656
// begin tmp := tmp diff un ;
18638: LD_ADDR_VAR 0 3
18642: PUSH
18643: LD_VAR 0 3
18647: PUSH
18648: LD_VAR 0 2
18652: DIFF
18653: ST_TO_ADDR
// continue ;
18654: GO 18624
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18656: LD_VAR 0 2
18660: PPUSH
18661: LD_INT 3
18663: PUSH
18664: LD_INT 22
18666: PUSH
18667: LD_INT 0
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PPUSH
18678: CALL_OW 69
18682: PPUSH
18683: LD_VAR 0 2
18687: PPUSH
18688: CALL_OW 74
18692: PPUSH
18693: CALL_OW 115
// end ;
18697: GO 18624
18699: POP
18700: POP
// until not tmp ;
18701: LD_VAR 0 3
18705: NOT
18706: IFFALSE 18607
// end ;
18708: PPOPN 3
18710: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18711: LD_EXP 44
18715: PUSH
18716: LD_EXP 69
18720: AND
18721: IFFALSE 18775
18723: GO 18725
18725: DISABLE
// begin ToLua ( displayTroll(); ) ;
18726: LD_STRING displayTroll();
18728: PPUSH
18729: CALL_OW 559
// wait ( 3 3$00 ) ;
18733: LD_INT 6300
18735: PPUSH
18736: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18740: LD_STRING hideTroll();
18742: PPUSH
18743: CALL_OW 559
// wait ( 1 1$00 ) ;
18747: LD_INT 2100
18749: PPUSH
18750: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18754: LD_STRING displayTroll();
18756: PPUSH
18757: CALL_OW 559
// wait ( 1 1$00 ) ;
18761: LD_INT 2100
18763: PPUSH
18764: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18768: LD_STRING hideTroll();
18770: PPUSH
18771: CALL_OW 559
// end ;
18775: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18776: LD_EXP 44
18780: PUSH
18781: LD_EXP 70
18785: AND
18786: IFFALSE 18849
18788: GO 18790
18790: DISABLE
18791: LD_INT 0
18793: PPUSH
// begin p := 0 ;
18794: LD_ADDR_VAR 0 1
18798: PUSH
18799: LD_INT 0
18801: ST_TO_ADDR
// repeat game_speed := 1 ;
18802: LD_ADDR_OWVAR 65
18806: PUSH
18807: LD_INT 1
18809: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18810: LD_INT 35
18812: PPUSH
18813: CALL_OW 67
// p := p + 1 ;
18817: LD_ADDR_VAR 0 1
18821: PUSH
18822: LD_VAR 0 1
18826: PUSH
18827: LD_INT 1
18829: PLUS
18830: ST_TO_ADDR
// until p >= 60 ;
18831: LD_VAR 0 1
18835: PUSH
18836: LD_INT 60
18838: GREATEREQUAL
18839: IFFALSE 18802
// game_speed := 4 ;
18841: LD_ADDR_OWVAR 65
18845: PUSH
18846: LD_INT 4
18848: ST_TO_ADDR
// end ;
18849: PPOPN 1
18851: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18852: LD_EXP 44
18856: PUSH
18857: LD_EXP 71
18861: AND
18862: IFFALSE 19008
18864: GO 18866
18866: DISABLE
18867: LD_INT 0
18869: PPUSH
18870: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18871: LD_ADDR_VAR 0 1
18875: PUSH
18876: LD_INT 22
18878: PUSH
18879: LD_OWVAR 2
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 2
18890: PUSH
18891: LD_INT 30
18893: PUSH
18894: LD_INT 0
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 30
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PPUSH
18920: CALL_OW 69
18924: ST_TO_ADDR
// if not depot then
18925: LD_VAR 0 1
18929: NOT
18930: IFFALSE 18934
// exit ;
18932: GO 19008
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18934: LD_ADDR_VAR 0 2
18938: PUSH
18939: LD_VAR 0 1
18943: PUSH
18944: LD_INT 1
18946: PPUSH
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL_OW 12
18956: ARRAY
18957: PPUSH
18958: CALL_OW 274
18962: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18963: LD_VAR 0 2
18967: PPUSH
18968: LD_INT 1
18970: PPUSH
18971: LD_INT 0
18973: PPUSH
18974: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18978: LD_VAR 0 2
18982: PPUSH
18983: LD_INT 2
18985: PPUSH
18986: LD_INT 0
18988: PPUSH
18989: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18993: LD_VAR 0 2
18997: PPUSH
18998: LD_INT 3
19000: PPUSH
19001: LD_INT 0
19003: PPUSH
19004: CALL_OW 277
// end ;
19008: PPOPN 2
19010: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19011: LD_EXP 44
19015: PUSH
19016: LD_EXP 72
19020: AND
19021: IFFALSE 19118
19023: GO 19025
19025: DISABLE
19026: LD_INT 0
19028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19029: LD_ADDR_VAR 0 1
19033: PUSH
19034: LD_INT 22
19036: PUSH
19037: LD_OWVAR 2
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 21
19048: PUSH
19049: LD_INT 1
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 3
19058: PUSH
19059: LD_INT 23
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: LIST
19077: PPUSH
19078: CALL_OW 69
19082: ST_TO_ADDR
// if not tmp then
19083: LD_VAR 0 1
19087: NOT
19088: IFFALSE 19092
// exit ;
19090: GO 19118
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19092: LD_VAR 0 1
19096: PUSH
19097: LD_INT 1
19099: PPUSH
19100: LD_VAR 0 1
19104: PPUSH
19105: CALL_OW 12
19109: ARRAY
19110: PPUSH
19111: LD_INT 200
19113: PPUSH
19114: CALL_OW 234
// end ;
19118: PPOPN 1
19120: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19121: LD_EXP 44
19125: PUSH
19126: LD_EXP 73
19130: AND
19131: IFFALSE 19210
19133: GO 19135
19135: DISABLE
19136: LD_INT 0
19138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19139: LD_ADDR_VAR 0 1
19143: PUSH
19144: LD_INT 22
19146: PUSH
19147: LD_OWVAR 2
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 21
19158: PUSH
19159: LD_INT 2
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PPUSH
19170: CALL_OW 69
19174: ST_TO_ADDR
// if not tmp then
19175: LD_VAR 0 1
19179: NOT
19180: IFFALSE 19184
// exit ;
19182: GO 19210
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19184: LD_VAR 0 1
19188: PUSH
19189: LD_INT 1
19191: PPUSH
19192: LD_VAR 0 1
19196: PPUSH
19197: CALL_OW 12
19201: ARRAY
19202: PPUSH
19203: LD_INT 60
19205: PPUSH
19206: CALL_OW 234
// end ;
19210: PPOPN 1
19212: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19213: LD_EXP 44
19217: PUSH
19218: LD_EXP 74
19222: AND
19223: IFFALSE 19322
19225: GO 19227
19227: DISABLE
19228: LD_INT 0
19230: PPUSH
19231: PPUSH
// begin enable ;
19232: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19233: LD_ADDR_VAR 0 1
19237: PUSH
19238: LD_INT 22
19240: PUSH
19241: LD_OWVAR 2
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 61
19252: PUSH
19253: EMPTY
19254: LIST
19255: PUSH
19256: LD_INT 33
19258: PUSH
19259: LD_INT 2
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: PPUSH
19271: CALL_OW 69
19275: ST_TO_ADDR
// if not tmp then
19276: LD_VAR 0 1
19280: NOT
19281: IFFALSE 19285
// exit ;
19283: GO 19322
// for i in tmp do
19285: LD_ADDR_VAR 0 2
19289: PUSH
19290: LD_VAR 0 1
19294: PUSH
19295: FOR_IN
19296: IFFALSE 19320
// if IsControledBy ( i ) then
19298: LD_VAR 0 2
19302: PPUSH
19303: CALL_OW 312
19307: IFFALSE 19318
// ComUnlink ( i ) ;
19309: LD_VAR 0 2
19313: PPUSH
19314: CALL_OW 136
19318: GO 19295
19320: POP
19321: POP
// end ;
19322: PPOPN 2
19324: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19325: LD_EXP 44
19329: PUSH
19330: LD_EXP 75
19334: AND
19335: IFFALSE 19475
19337: GO 19339
19339: DISABLE
19340: LD_INT 0
19342: PPUSH
19343: PPUSH
// begin ToLua ( displayPowell(); ) ;
19344: LD_STRING displayPowell();
19346: PPUSH
19347: CALL_OW 559
// uc_side := 0 ;
19351: LD_ADDR_OWVAR 20
19355: PUSH
19356: LD_INT 0
19358: ST_TO_ADDR
// uc_nation := 2 ;
19359: LD_ADDR_OWVAR 21
19363: PUSH
19364: LD_INT 2
19366: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19367: LD_ADDR_OWVAR 37
19371: PUSH
19372: LD_INT 14
19374: ST_TO_ADDR
// vc_engine := engine_siberite ;
19375: LD_ADDR_OWVAR 39
19379: PUSH
19380: LD_INT 3
19382: ST_TO_ADDR
// vc_control := control_apeman ;
19383: LD_ADDR_OWVAR 38
19387: PUSH
19388: LD_INT 5
19390: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19391: LD_ADDR_OWVAR 40
19395: PUSH
19396: LD_INT 29
19398: ST_TO_ADDR
// un := CreateVehicle ;
19399: LD_ADDR_VAR 0 2
19403: PUSH
19404: CALL_OW 45
19408: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19409: LD_VAR 0 2
19413: PPUSH
19414: LD_INT 1
19416: PPUSH
19417: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19421: LD_INT 35
19423: PPUSH
19424: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19428: LD_VAR 0 2
19432: PPUSH
19433: LD_INT 22
19435: PUSH
19436: LD_OWVAR 2
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PPUSH
19445: CALL_OW 69
19449: PPUSH
19450: LD_VAR 0 2
19454: PPUSH
19455: CALL_OW 74
19459: PPUSH
19460: CALL_OW 115
// until IsDead ( un ) ;
19464: LD_VAR 0 2
19468: PPUSH
19469: CALL_OW 301
19473: IFFALSE 19421
// end ;
19475: PPOPN 2
19477: END
// every 0 0$1 trigger StreamModeActive and sStu do
19478: LD_EXP 44
19482: PUSH
19483: LD_EXP 83
19487: AND
19488: IFFALSE 19504
19490: GO 19492
19492: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19493: LD_STRING displayStucuk();
19495: PPUSH
19496: CALL_OW 559
// ResetFog ;
19500: CALL_OW 335
// end ;
19504: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19505: LD_EXP 44
19509: PUSH
19510: LD_EXP 76
19514: AND
19515: IFFALSE 19656
19517: GO 19519
19519: DISABLE
19520: LD_INT 0
19522: PPUSH
19523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19524: LD_ADDR_VAR 0 2
19528: PUSH
19529: LD_INT 22
19531: PUSH
19532: LD_OWVAR 2
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 21
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PPUSH
19555: CALL_OW 69
19559: ST_TO_ADDR
// if not tmp then
19560: LD_VAR 0 2
19564: NOT
19565: IFFALSE 19569
// exit ;
19567: GO 19656
// un := tmp [ rand ( 1 , tmp ) ] ;
19569: LD_ADDR_VAR 0 1
19573: PUSH
19574: LD_VAR 0 2
19578: PUSH
19579: LD_INT 1
19581: PPUSH
19582: LD_VAR 0 2
19586: PPUSH
19587: CALL_OW 12
19591: ARRAY
19592: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19593: LD_VAR 0 1
19597: PPUSH
19598: LD_INT 0
19600: PPUSH
19601: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19605: LD_VAR 0 1
19609: PPUSH
19610: LD_OWVAR 3
19614: PUSH
19615: LD_VAR 0 1
19619: DIFF
19620: PPUSH
19621: LD_VAR 0 1
19625: PPUSH
19626: CALL_OW 74
19630: PPUSH
19631: CALL_OW 115
// wait ( 0 0$20 ) ;
19635: LD_INT 700
19637: PPUSH
19638: CALL_OW 67
// SetSide ( un , your_side ) ;
19642: LD_VAR 0 1
19646: PPUSH
19647: LD_OWVAR 2
19651: PPUSH
19652: CALL_OW 235
// end ;
19656: PPOPN 2
19658: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19659: LD_EXP 44
19663: PUSH
19664: LD_EXP 77
19668: AND
19669: IFFALSE 19775
19671: GO 19673
19673: DISABLE
19674: LD_INT 0
19676: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19677: LD_ADDR_VAR 0 1
19681: PUSH
19682: LD_INT 22
19684: PUSH
19685: LD_OWVAR 2
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 2
19696: PUSH
19697: LD_INT 30
19699: PUSH
19700: LD_INT 0
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 30
19709: PUSH
19710: LD_INT 1
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: LIST
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PPUSH
19726: CALL_OW 69
19730: ST_TO_ADDR
// if not depot then
19731: LD_VAR 0 1
19735: NOT
19736: IFFALSE 19740
// exit ;
19738: GO 19775
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19740: LD_VAR 0 1
19744: PUSH
19745: LD_INT 1
19747: ARRAY
19748: PPUSH
19749: CALL_OW 250
19753: PPUSH
19754: LD_VAR 0 1
19758: PUSH
19759: LD_INT 1
19761: ARRAY
19762: PPUSH
19763: CALL_OW 251
19767: PPUSH
19768: LD_INT 70
19770: PPUSH
19771: CALL_OW 495
// end ;
19775: PPOPN 1
19777: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19778: LD_EXP 44
19782: PUSH
19783: LD_EXP 78
19787: AND
19788: IFFALSE 19999
19790: GO 19792
19792: DISABLE
19793: LD_INT 0
19795: PPUSH
19796: PPUSH
19797: PPUSH
19798: PPUSH
19799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19800: LD_ADDR_VAR 0 5
19804: PUSH
19805: LD_INT 22
19807: PUSH
19808: LD_OWVAR 2
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 21
19819: PUSH
19820: LD_INT 1
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PPUSH
19831: CALL_OW 69
19835: ST_TO_ADDR
// if not tmp then
19836: LD_VAR 0 5
19840: NOT
19841: IFFALSE 19845
// exit ;
19843: GO 19999
// for i in tmp do
19845: LD_ADDR_VAR 0 1
19849: PUSH
19850: LD_VAR 0 5
19854: PUSH
19855: FOR_IN
19856: IFFALSE 19997
// begin d := rand ( 0 , 5 ) ;
19858: LD_ADDR_VAR 0 4
19862: PUSH
19863: LD_INT 0
19865: PPUSH
19866: LD_INT 5
19868: PPUSH
19869: CALL_OW 12
19873: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19874: LD_ADDR_VAR 0 2
19878: PUSH
19879: LD_VAR 0 1
19883: PPUSH
19884: CALL_OW 250
19888: PPUSH
19889: LD_VAR 0 4
19893: PPUSH
19894: LD_INT 3
19896: PPUSH
19897: LD_INT 12
19899: PPUSH
19900: CALL_OW 12
19904: PPUSH
19905: CALL_OW 272
19909: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19910: LD_ADDR_VAR 0 3
19914: PUSH
19915: LD_VAR 0 1
19919: PPUSH
19920: CALL_OW 251
19924: PPUSH
19925: LD_VAR 0 4
19929: PPUSH
19930: LD_INT 3
19932: PPUSH
19933: LD_INT 12
19935: PPUSH
19936: CALL_OW 12
19940: PPUSH
19941: CALL_OW 273
19945: ST_TO_ADDR
// if ValidHex ( x , y ) then
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_VAR 0 3
19955: PPUSH
19956: CALL_OW 488
19960: IFFALSE 19995
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19962: LD_VAR 0 1
19966: PPUSH
19967: LD_VAR 0 2
19971: PPUSH
19972: LD_VAR 0 3
19976: PPUSH
19977: LD_INT 3
19979: PPUSH
19980: LD_INT 6
19982: PPUSH
19983: CALL_OW 12
19987: PPUSH
19988: LD_INT 1
19990: PPUSH
19991: CALL_OW 483
// end ;
19995: GO 19855
19997: POP
19998: POP
// end ;
19999: PPOPN 5
20001: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20002: LD_EXP 44
20006: PUSH
20007: LD_EXP 79
20011: AND
20012: IFFALSE 20106
20014: GO 20016
20016: DISABLE
20017: LD_INT 0
20019: PPUSH
20020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20021: LD_ADDR_VAR 0 2
20025: PUSH
20026: LD_INT 22
20028: PUSH
20029: LD_OWVAR 2
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 32
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 21
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: LIST
20062: PPUSH
20063: CALL_OW 69
20067: ST_TO_ADDR
// if not tmp then
20068: LD_VAR 0 2
20072: NOT
20073: IFFALSE 20077
// exit ;
20075: GO 20106
// for i in tmp do
20077: LD_ADDR_VAR 0 1
20081: PUSH
20082: LD_VAR 0 2
20086: PUSH
20087: FOR_IN
20088: IFFALSE 20104
// SetFuel ( i , 0 ) ;
20090: LD_VAR 0 1
20094: PPUSH
20095: LD_INT 0
20097: PPUSH
20098: CALL_OW 240
20102: GO 20087
20104: POP
20105: POP
// end ;
20106: PPOPN 2
20108: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20109: LD_EXP 44
20113: PUSH
20114: LD_EXP 80
20118: AND
20119: IFFALSE 20185
20121: GO 20123
20123: DISABLE
20124: LD_INT 0
20126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20127: LD_ADDR_VAR 0 1
20131: PUSH
20132: LD_INT 22
20134: PUSH
20135: LD_OWVAR 2
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 30
20146: PUSH
20147: LD_INT 29
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PPUSH
20158: CALL_OW 69
20162: ST_TO_ADDR
// if not tmp then
20163: LD_VAR 0 1
20167: NOT
20168: IFFALSE 20172
// exit ;
20170: GO 20185
// DestroyUnit ( tmp [ 1 ] ) ;
20172: LD_VAR 0 1
20176: PUSH
20177: LD_INT 1
20179: ARRAY
20180: PPUSH
20181: CALL_OW 65
// end ;
20185: PPOPN 1
20187: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20188: LD_EXP 44
20192: PUSH
20193: LD_EXP 82
20197: AND
20198: IFFALSE 20327
20200: GO 20202
20202: DISABLE
20203: LD_INT 0
20205: PPUSH
// begin uc_side := 0 ;
20206: LD_ADDR_OWVAR 20
20210: PUSH
20211: LD_INT 0
20213: ST_TO_ADDR
// uc_nation := nation_arabian ;
20214: LD_ADDR_OWVAR 21
20218: PUSH
20219: LD_INT 2
20221: ST_TO_ADDR
// hc_gallery :=  ;
20222: LD_ADDR_OWVAR 33
20226: PUSH
20227: LD_STRING 
20229: ST_TO_ADDR
// hc_name :=  ;
20230: LD_ADDR_OWVAR 26
20234: PUSH
20235: LD_STRING 
20237: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20238: LD_INT 1
20240: PPUSH
20241: LD_INT 11
20243: PPUSH
20244: LD_INT 10
20246: PPUSH
20247: CALL_OW 380
// un := CreateHuman ;
20251: LD_ADDR_VAR 0 1
20255: PUSH
20256: CALL_OW 44
20260: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20261: LD_VAR 0 1
20265: PPUSH
20266: LD_INT 1
20268: PPUSH
20269: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20273: LD_INT 35
20275: PPUSH
20276: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20280: LD_VAR 0 1
20284: PPUSH
20285: LD_INT 22
20287: PUSH
20288: LD_OWVAR 2
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PPUSH
20297: CALL_OW 69
20301: PPUSH
20302: LD_VAR 0 1
20306: PPUSH
20307: CALL_OW 74
20311: PPUSH
20312: CALL_OW 115
// until IsDead ( un ) ;
20316: LD_VAR 0 1
20320: PPUSH
20321: CALL_OW 301
20325: IFFALSE 20273
// end ;
20327: PPOPN 1
20329: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20330: LD_EXP 44
20334: PUSH
20335: LD_EXP 84
20339: AND
20340: IFFALSE 20352
20342: GO 20344
20344: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20345: LD_STRING earthquake(getX(game), 0, 32)
20347: PPUSH
20348: CALL_OW 559
20352: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20353: LD_EXP 44
20357: PUSH
20358: LD_EXP 85
20362: AND
20363: IFFALSE 20454
20365: GO 20367
20367: DISABLE
20368: LD_INT 0
20370: PPUSH
// begin enable ;
20371: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20372: LD_ADDR_VAR 0 1
20376: PUSH
20377: LD_INT 22
20379: PUSH
20380: LD_OWVAR 2
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 21
20391: PUSH
20392: LD_INT 2
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 33
20401: PUSH
20402: LD_INT 3
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: LIST
20413: PPUSH
20414: CALL_OW 69
20418: ST_TO_ADDR
// if not tmp then
20419: LD_VAR 0 1
20423: NOT
20424: IFFALSE 20428
// exit ;
20426: GO 20454
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20428: LD_VAR 0 1
20432: PUSH
20433: LD_INT 1
20435: PPUSH
20436: LD_VAR 0 1
20440: PPUSH
20441: CALL_OW 12
20445: ARRAY
20446: PPUSH
20447: LD_INT 1
20449: PPUSH
20450: CALL_OW 234
// end ;
20454: PPOPN 1
20456: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20457: LD_EXP 44
20461: PUSH
20462: LD_EXP 86
20466: AND
20467: IFFALSE 20608
20469: GO 20471
20471: DISABLE
20472: LD_INT 0
20474: PPUSH
20475: PPUSH
20476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20477: LD_ADDR_VAR 0 3
20481: PUSH
20482: LD_INT 22
20484: PUSH
20485: LD_OWVAR 2
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 25
20496: PUSH
20497: LD_INT 1
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PPUSH
20508: CALL_OW 69
20512: ST_TO_ADDR
// if not tmp then
20513: LD_VAR 0 3
20517: NOT
20518: IFFALSE 20522
// exit ;
20520: GO 20608
// un := tmp [ rand ( 1 , tmp ) ] ;
20522: LD_ADDR_VAR 0 2
20526: PUSH
20527: LD_VAR 0 3
20531: PUSH
20532: LD_INT 1
20534: PPUSH
20535: LD_VAR 0 3
20539: PPUSH
20540: CALL_OW 12
20544: ARRAY
20545: ST_TO_ADDR
// if Crawls ( un ) then
20546: LD_VAR 0 2
20550: PPUSH
20551: CALL_OW 318
20555: IFFALSE 20566
// ComWalk ( un ) ;
20557: LD_VAR 0 2
20561: PPUSH
20562: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20566: LD_VAR 0 2
20570: PPUSH
20571: LD_INT 9
20573: PPUSH
20574: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20578: LD_INT 28
20580: PPUSH
20581: LD_OWVAR 2
20585: PPUSH
20586: LD_INT 2
20588: PPUSH
20589: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20593: LD_INT 29
20595: PPUSH
20596: LD_OWVAR 2
20600: PPUSH
20601: LD_INT 2
20603: PPUSH
20604: CALL_OW 322
// end ;
20608: PPOPN 3
20610: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20611: LD_EXP 44
20615: PUSH
20616: LD_EXP 87
20620: AND
20621: IFFALSE 20732
20623: GO 20625
20625: DISABLE
20626: LD_INT 0
20628: PPUSH
20629: PPUSH
20630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20631: LD_ADDR_VAR 0 3
20635: PUSH
20636: LD_INT 22
20638: PUSH
20639: LD_OWVAR 2
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 25
20650: PUSH
20651: LD_INT 1
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PPUSH
20662: CALL_OW 69
20666: ST_TO_ADDR
// if not tmp then
20667: LD_VAR 0 3
20671: NOT
20672: IFFALSE 20676
// exit ;
20674: GO 20732
// un := tmp [ rand ( 1 , tmp ) ] ;
20676: LD_ADDR_VAR 0 2
20680: PUSH
20681: LD_VAR 0 3
20685: PUSH
20686: LD_INT 1
20688: PPUSH
20689: LD_VAR 0 3
20693: PPUSH
20694: CALL_OW 12
20698: ARRAY
20699: ST_TO_ADDR
// if Crawls ( un ) then
20700: LD_VAR 0 2
20704: PPUSH
20705: CALL_OW 318
20709: IFFALSE 20720
// ComWalk ( un ) ;
20711: LD_VAR 0 2
20715: PPUSH
20716: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20720: LD_VAR 0 2
20724: PPUSH
20725: LD_INT 8
20727: PPUSH
20728: CALL_OW 336
// end ;
20732: PPOPN 3
20734: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20735: LD_EXP 44
20739: PUSH
20740: LD_EXP 88
20744: AND
20745: IFFALSE 20889
20747: GO 20749
20749: DISABLE
20750: LD_INT 0
20752: PPUSH
20753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20754: LD_ADDR_VAR 0 2
20758: PUSH
20759: LD_INT 22
20761: PUSH
20762: LD_OWVAR 2
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 21
20773: PUSH
20774: LD_INT 2
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 2
20783: PUSH
20784: LD_INT 34
20786: PUSH
20787: LD_INT 12
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 34
20796: PUSH
20797: LD_INT 51
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 34
20806: PUSH
20807: LD_INT 32
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: LIST
20824: PPUSH
20825: CALL_OW 69
20829: ST_TO_ADDR
// if not tmp then
20830: LD_VAR 0 2
20834: NOT
20835: IFFALSE 20839
// exit ;
20837: GO 20889
// for i in tmp do
20839: LD_ADDR_VAR 0 1
20843: PUSH
20844: LD_VAR 0 2
20848: PUSH
20849: FOR_IN
20850: IFFALSE 20887
// if GetCargo ( i , mat_artifact ) = 0 then
20852: LD_VAR 0 1
20856: PPUSH
20857: LD_INT 4
20859: PPUSH
20860: CALL_OW 289
20864: PUSH
20865: LD_INT 0
20867: EQUAL
20868: IFFALSE 20885
// SetCargo ( i , mat_siberit , 100 ) ;
20870: LD_VAR 0 1
20874: PPUSH
20875: LD_INT 3
20877: PPUSH
20878: LD_INT 100
20880: PPUSH
20881: CALL_OW 290
20885: GO 20849
20887: POP
20888: POP
// end ;
20889: PPOPN 2
20891: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20892: LD_EXP 44
20896: PUSH
20897: LD_EXP 89
20901: AND
20902: IFFALSE 21085
20904: GO 20906
20906: DISABLE
20907: LD_INT 0
20909: PPUSH
20910: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20911: LD_ADDR_VAR 0 2
20915: PUSH
20916: LD_INT 22
20918: PUSH
20919: LD_OWVAR 2
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PPUSH
20928: CALL_OW 69
20932: ST_TO_ADDR
// if not tmp then
20933: LD_VAR 0 2
20937: NOT
20938: IFFALSE 20942
// exit ;
20940: GO 21085
// for i := 1 to 2 do
20942: LD_ADDR_VAR 0 1
20946: PUSH
20947: DOUBLE
20948: LD_INT 1
20950: DEC
20951: ST_TO_ADDR
20952: LD_INT 2
20954: PUSH
20955: FOR_TO
20956: IFFALSE 21083
// begin uc_side := your_side ;
20958: LD_ADDR_OWVAR 20
20962: PUSH
20963: LD_OWVAR 2
20967: ST_TO_ADDR
// uc_nation := nation_american ;
20968: LD_ADDR_OWVAR 21
20972: PUSH
20973: LD_INT 1
20975: ST_TO_ADDR
// vc_chassis := us_morphling ;
20976: LD_ADDR_OWVAR 37
20980: PUSH
20981: LD_INT 5
20983: ST_TO_ADDR
// vc_engine := engine_siberite ;
20984: LD_ADDR_OWVAR 39
20988: PUSH
20989: LD_INT 3
20991: ST_TO_ADDR
// vc_control := control_computer ;
20992: LD_ADDR_OWVAR 38
20996: PUSH
20997: LD_INT 3
20999: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21000: LD_ADDR_OWVAR 40
21004: PUSH
21005: LD_INT 10
21007: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21008: LD_VAR 0 2
21012: PUSH
21013: LD_INT 1
21015: ARRAY
21016: PPUSH
21017: CALL_OW 310
21021: NOT
21022: IFFALSE 21069
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21024: CALL_OW 45
21028: PPUSH
21029: LD_VAR 0 2
21033: PUSH
21034: LD_INT 1
21036: ARRAY
21037: PPUSH
21038: CALL_OW 250
21042: PPUSH
21043: LD_VAR 0 2
21047: PUSH
21048: LD_INT 1
21050: ARRAY
21051: PPUSH
21052: CALL_OW 251
21056: PPUSH
21057: LD_INT 12
21059: PPUSH
21060: LD_INT 1
21062: PPUSH
21063: CALL_OW 50
21067: GO 21081
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21069: CALL_OW 45
21073: PPUSH
21074: LD_INT 1
21076: PPUSH
21077: CALL_OW 51
// end ;
21081: GO 20955
21083: POP
21084: POP
// end ;
21085: PPOPN 2
21087: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21088: LD_EXP 44
21092: PUSH
21093: LD_EXP 90
21097: AND
21098: IFFALSE 21320
21100: GO 21102
21102: DISABLE
21103: LD_INT 0
21105: PPUSH
21106: PPUSH
21107: PPUSH
21108: PPUSH
21109: PPUSH
21110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21111: LD_ADDR_VAR 0 6
21115: PUSH
21116: LD_INT 22
21118: PUSH
21119: LD_OWVAR 2
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 21
21130: PUSH
21131: LD_INT 1
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 3
21140: PUSH
21141: LD_INT 23
21143: PUSH
21144: LD_INT 0
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: PPUSH
21160: CALL_OW 69
21164: ST_TO_ADDR
// if not tmp then
21165: LD_VAR 0 6
21169: NOT
21170: IFFALSE 21174
// exit ;
21172: GO 21320
// s1 := rand ( 1 , 4 ) ;
21174: LD_ADDR_VAR 0 2
21178: PUSH
21179: LD_INT 1
21181: PPUSH
21182: LD_INT 4
21184: PPUSH
21185: CALL_OW 12
21189: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21190: LD_ADDR_VAR 0 4
21194: PUSH
21195: LD_VAR 0 6
21199: PUSH
21200: LD_INT 1
21202: ARRAY
21203: PPUSH
21204: LD_VAR 0 2
21208: PPUSH
21209: CALL_OW 259
21213: ST_TO_ADDR
// if s1 = 1 then
21214: LD_VAR 0 2
21218: PUSH
21219: LD_INT 1
21221: EQUAL
21222: IFFALSE 21242
// s2 := rand ( 2 , 4 ) else
21224: LD_ADDR_VAR 0 3
21228: PUSH
21229: LD_INT 2
21231: PPUSH
21232: LD_INT 4
21234: PPUSH
21235: CALL_OW 12
21239: ST_TO_ADDR
21240: GO 21250
// s2 := 1 ;
21242: LD_ADDR_VAR 0 3
21246: PUSH
21247: LD_INT 1
21249: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21250: LD_ADDR_VAR 0 5
21254: PUSH
21255: LD_VAR 0 6
21259: PUSH
21260: LD_INT 1
21262: ARRAY
21263: PPUSH
21264: LD_VAR 0 3
21268: PPUSH
21269: CALL_OW 259
21273: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21274: LD_VAR 0 6
21278: PUSH
21279: LD_INT 1
21281: ARRAY
21282: PPUSH
21283: LD_VAR 0 2
21287: PPUSH
21288: LD_VAR 0 5
21292: PPUSH
21293: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21297: LD_VAR 0 6
21301: PUSH
21302: LD_INT 1
21304: ARRAY
21305: PPUSH
21306: LD_VAR 0 3
21310: PPUSH
21311: LD_VAR 0 4
21315: PPUSH
21316: CALL_OW 237
// end ;
21320: PPOPN 6
21322: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21323: LD_EXP 44
21327: PUSH
21328: LD_EXP 91
21332: AND
21333: IFFALSE 21412
21335: GO 21337
21337: DISABLE
21338: LD_INT 0
21340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21341: LD_ADDR_VAR 0 1
21345: PUSH
21346: LD_INT 22
21348: PUSH
21349: LD_OWVAR 2
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 30
21360: PUSH
21361: LD_INT 3
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PPUSH
21372: CALL_OW 69
21376: ST_TO_ADDR
// if not tmp then
21377: LD_VAR 0 1
21381: NOT
21382: IFFALSE 21386
// exit ;
21384: GO 21412
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21386: LD_VAR 0 1
21390: PUSH
21391: LD_INT 1
21393: PPUSH
21394: LD_VAR 0 1
21398: PPUSH
21399: CALL_OW 12
21403: ARRAY
21404: PPUSH
21405: LD_INT 1
21407: PPUSH
21408: CALL_OW 234
// end ;
21412: PPOPN 1
21414: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21415: LD_EXP 44
21419: PUSH
21420: LD_EXP 92
21424: AND
21425: IFFALSE 21537
21427: GO 21429
21429: DISABLE
21430: LD_INT 0
21432: PPUSH
21433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21434: LD_ADDR_VAR 0 2
21438: PUSH
21439: LD_INT 22
21441: PUSH
21442: LD_OWVAR 2
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 2
21453: PUSH
21454: LD_INT 30
21456: PUSH
21457: LD_INT 27
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 30
21466: PUSH
21467: LD_INT 26
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 30
21476: PUSH
21477: LD_INT 28
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PPUSH
21494: CALL_OW 69
21498: ST_TO_ADDR
// if not tmp then
21499: LD_VAR 0 2
21503: NOT
21504: IFFALSE 21508
// exit ;
21506: GO 21537
// for i in tmp do
21508: LD_ADDR_VAR 0 1
21512: PUSH
21513: LD_VAR 0 2
21517: PUSH
21518: FOR_IN
21519: IFFALSE 21535
// SetLives ( i , 1 ) ;
21521: LD_VAR 0 1
21525: PPUSH
21526: LD_INT 1
21528: PPUSH
21529: CALL_OW 234
21533: GO 21518
21535: POP
21536: POP
// end ;
21537: PPOPN 2
21539: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21540: LD_EXP 44
21544: PUSH
21545: LD_EXP 93
21549: AND
21550: IFFALSE 21837
21552: GO 21554
21554: DISABLE
21555: LD_INT 0
21557: PPUSH
21558: PPUSH
21559: PPUSH
// begin i := rand ( 1 , 7 ) ;
21560: LD_ADDR_VAR 0 1
21564: PUSH
21565: LD_INT 1
21567: PPUSH
21568: LD_INT 7
21570: PPUSH
21571: CALL_OW 12
21575: ST_TO_ADDR
// case i of 1 :
21576: LD_VAR 0 1
21580: PUSH
21581: LD_INT 1
21583: DOUBLE
21584: EQUAL
21585: IFTRUE 21589
21587: GO 21599
21589: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21590: LD_STRING earthquake(getX(game), 0, 32)
21592: PPUSH
21593: CALL_OW 559
21597: GO 21837
21599: LD_INT 2
21601: DOUBLE
21602: EQUAL
21603: IFTRUE 21607
21605: GO 21621
21607: POP
// begin ToLua ( displayStucuk(); ) ;
21608: LD_STRING displayStucuk();
21610: PPUSH
21611: CALL_OW 559
// ResetFog ;
21615: CALL_OW 335
// end ; 3 :
21619: GO 21837
21621: LD_INT 3
21623: DOUBLE
21624: EQUAL
21625: IFTRUE 21629
21627: GO 21733
21629: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21630: LD_ADDR_VAR 0 2
21634: PUSH
21635: LD_INT 22
21637: PUSH
21638: LD_OWVAR 2
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 25
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PPUSH
21661: CALL_OW 69
21665: ST_TO_ADDR
// if not tmp then
21666: LD_VAR 0 2
21670: NOT
21671: IFFALSE 21675
// exit ;
21673: GO 21837
// un := tmp [ rand ( 1 , tmp ) ] ;
21675: LD_ADDR_VAR 0 3
21679: PUSH
21680: LD_VAR 0 2
21684: PUSH
21685: LD_INT 1
21687: PPUSH
21688: LD_VAR 0 2
21692: PPUSH
21693: CALL_OW 12
21697: ARRAY
21698: ST_TO_ADDR
// if Crawls ( un ) then
21699: LD_VAR 0 3
21703: PPUSH
21704: CALL_OW 318
21708: IFFALSE 21719
// ComWalk ( un ) ;
21710: LD_VAR 0 3
21714: PPUSH
21715: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21719: LD_VAR 0 3
21723: PPUSH
21724: LD_INT 8
21726: PPUSH
21727: CALL_OW 336
// end ; 4 :
21731: GO 21837
21733: LD_INT 4
21735: DOUBLE
21736: EQUAL
21737: IFTRUE 21741
21739: GO 21815
21741: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21742: LD_ADDR_VAR 0 2
21746: PUSH
21747: LD_INT 22
21749: PUSH
21750: LD_OWVAR 2
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 30
21761: PUSH
21762: LD_INT 29
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PPUSH
21773: CALL_OW 69
21777: ST_TO_ADDR
// if not tmp then
21778: LD_VAR 0 2
21782: NOT
21783: IFFALSE 21787
// exit ;
21785: GO 21837
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21787: LD_VAR 0 2
21791: PUSH
21792: LD_INT 1
21794: ARRAY
21795: PPUSH
21796: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21800: LD_VAR 0 2
21804: PUSH
21805: LD_INT 1
21807: ARRAY
21808: PPUSH
21809: CALL_OW 65
// end ; 5 .. 7 :
21813: GO 21837
21815: LD_INT 5
21817: DOUBLE
21818: GREATEREQUAL
21819: IFFALSE 21827
21821: LD_INT 7
21823: DOUBLE
21824: LESSEQUAL
21825: IFTRUE 21829
21827: GO 21836
21829: POP
// StreamSibBomb ; end ;
21830: CALL 18074 0 0
21834: GO 21837
21836: POP
// end ;
21837: PPOPN 3
21839: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21840: LD_EXP 44
21844: PUSH
21845: LD_EXP 94
21849: AND
21850: IFFALSE 22006
21852: GO 21854
21854: DISABLE
21855: LD_INT 0
21857: PPUSH
21858: PPUSH
21859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21860: LD_ADDR_VAR 0 2
21864: PUSH
21865: LD_INT 81
21867: PUSH
21868: LD_OWVAR 2
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 2
21879: PUSH
21880: LD_INT 21
21882: PUSH
21883: LD_INT 1
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 21
21892: PUSH
21893: LD_INT 2
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: LIST
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PPUSH
21909: CALL_OW 69
21913: ST_TO_ADDR
// if not tmp then
21914: LD_VAR 0 2
21918: NOT
21919: IFFALSE 21923
// exit ;
21921: GO 22006
// p := 0 ;
21923: LD_ADDR_VAR 0 3
21927: PUSH
21928: LD_INT 0
21930: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21931: LD_INT 35
21933: PPUSH
21934: CALL_OW 67
// p := p + 1 ;
21938: LD_ADDR_VAR 0 3
21942: PUSH
21943: LD_VAR 0 3
21947: PUSH
21948: LD_INT 1
21950: PLUS
21951: ST_TO_ADDR
// for i in tmp do
21952: LD_ADDR_VAR 0 1
21956: PUSH
21957: LD_VAR 0 2
21961: PUSH
21962: FOR_IN
21963: IFFALSE 21994
// if GetLives ( i ) < 1000 then
21965: LD_VAR 0 1
21969: PPUSH
21970: CALL_OW 256
21974: PUSH
21975: LD_INT 1000
21977: LESS
21978: IFFALSE 21992
// SetLives ( i , 1000 ) ;
21980: LD_VAR 0 1
21984: PPUSH
21985: LD_INT 1000
21987: PPUSH
21988: CALL_OW 234
21992: GO 21962
21994: POP
21995: POP
// until p > 20 ;
21996: LD_VAR 0 3
22000: PUSH
22001: LD_INT 20
22003: GREATER
22004: IFFALSE 21931
// end ;
22006: PPOPN 3
22008: END
// every 0 0$1 trigger StreamModeActive and sTime do
22009: LD_EXP 44
22013: PUSH
22014: LD_EXP 95
22018: AND
22019: IFFALSE 22054
22021: GO 22023
22023: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22024: LD_INT 28
22026: PPUSH
22027: LD_OWVAR 2
22031: PPUSH
22032: LD_INT 2
22034: PPUSH
22035: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22039: LD_INT 30
22041: PPUSH
22042: LD_OWVAR 2
22046: PPUSH
22047: LD_INT 2
22049: PPUSH
22050: CALL_OW 322
// end ;
22054: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22055: LD_EXP 44
22059: PUSH
22060: LD_EXP 96
22064: AND
22065: IFFALSE 22186
22067: GO 22069
22069: DISABLE
22070: LD_INT 0
22072: PPUSH
22073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22074: LD_ADDR_VAR 0 2
22078: PUSH
22079: LD_INT 22
22081: PUSH
22082: LD_OWVAR 2
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 21
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 3
22103: PUSH
22104: LD_INT 23
22106: PUSH
22107: LD_INT 0
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: LIST
22122: PPUSH
22123: CALL_OW 69
22127: ST_TO_ADDR
// if not tmp then
22128: LD_VAR 0 2
22132: NOT
22133: IFFALSE 22137
// exit ;
22135: GO 22186
// for i in tmp do
22137: LD_ADDR_VAR 0 1
22141: PUSH
22142: LD_VAR 0 2
22146: PUSH
22147: FOR_IN
22148: IFFALSE 22184
// begin if Crawls ( i ) then
22150: LD_VAR 0 1
22154: PPUSH
22155: CALL_OW 318
22159: IFFALSE 22170
// ComWalk ( i ) ;
22161: LD_VAR 0 1
22165: PPUSH
22166: CALL_OW 138
// SetClass ( i , 2 ) ;
22170: LD_VAR 0 1
22174: PPUSH
22175: LD_INT 2
22177: PPUSH
22178: CALL_OW 336
// end ;
22182: GO 22147
22184: POP
22185: POP
// end ;
22186: PPOPN 2
22188: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22189: LD_EXP 44
22193: PUSH
22194: LD_EXP 97
22198: AND
22199: IFFALSE 22487
22201: GO 22203
22203: DISABLE
22204: LD_INT 0
22206: PPUSH
22207: PPUSH
22208: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22209: LD_OWVAR 2
22213: PPUSH
22214: LD_INT 9
22216: PPUSH
22217: LD_INT 1
22219: PPUSH
22220: LD_INT 1
22222: PPUSH
22223: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22227: LD_INT 9
22229: PPUSH
22230: LD_OWVAR 2
22234: PPUSH
22235: CALL_OW 343
// uc_side := 9 ;
22239: LD_ADDR_OWVAR 20
22243: PUSH
22244: LD_INT 9
22246: ST_TO_ADDR
// uc_nation := 2 ;
22247: LD_ADDR_OWVAR 21
22251: PUSH
22252: LD_INT 2
22254: ST_TO_ADDR
// hc_name := Dark Warrior ;
22255: LD_ADDR_OWVAR 26
22259: PUSH
22260: LD_STRING Dark Warrior
22262: ST_TO_ADDR
// hc_gallery :=  ;
22263: LD_ADDR_OWVAR 33
22267: PUSH
22268: LD_STRING 
22270: ST_TO_ADDR
// hc_noskilllimit := true ;
22271: LD_ADDR_OWVAR 76
22275: PUSH
22276: LD_INT 1
22278: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22279: LD_ADDR_OWVAR 31
22283: PUSH
22284: LD_INT 30
22286: PUSH
22287: LD_INT 30
22289: PUSH
22290: LD_INT 30
22292: PUSH
22293: LD_INT 30
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: ST_TO_ADDR
// un := CreateHuman ;
22302: LD_ADDR_VAR 0 3
22306: PUSH
22307: CALL_OW 44
22311: ST_TO_ADDR
// hc_noskilllimit := false ;
22312: LD_ADDR_OWVAR 76
22316: PUSH
22317: LD_INT 0
22319: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22320: LD_VAR 0 3
22324: PPUSH
22325: LD_INT 1
22327: PPUSH
22328: CALL_OW 51
// ToLua ( playRanger() ) ;
22332: LD_STRING playRanger()
22334: PPUSH
22335: CALL_OW 559
// p := 0 ;
22339: LD_ADDR_VAR 0 2
22343: PUSH
22344: LD_INT 0
22346: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22347: LD_INT 35
22349: PPUSH
22350: CALL_OW 67
// p := p + 1 ;
22354: LD_ADDR_VAR 0 2
22358: PUSH
22359: LD_VAR 0 2
22363: PUSH
22364: LD_INT 1
22366: PLUS
22367: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22368: LD_VAR 0 3
22372: PPUSH
22373: CALL_OW 256
22377: PUSH
22378: LD_INT 1000
22380: LESS
22381: IFFALSE 22395
// SetLives ( un , 1000 ) ;
22383: LD_VAR 0 3
22387: PPUSH
22388: LD_INT 1000
22390: PPUSH
22391: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22395: LD_VAR 0 3
22399: PPUSH
22400: LD_INT 81
22402: PUSH
22403: LD_OWVAR 2
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 91
22414: PUSH
22415: LD_VAR 0 3
22419: PUSH
22420: LD_INT 30
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: LIST
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PPUSH
22432: CALL_OW 69
22436: PPUSH
22437: LD_VAR 0 3
22441: PPUSH
22442: CALL_OW 74
22446: PPUSH
22447: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22451: LD_VAR 0 2
22455: PUSH
22456: LD_INT 80
22458: GREATER
22459: PUSH
22460: LD_VAR 0 3
22464: PPUSH
22465: CALL_OW 301
22469: OR
22470: IFFALSE 22347
// if un then
22472: LD_VAR 0 3
22476: IFFALSE 22487
// RemoveUnit ( un ) ;
22478: LD_VAR 0 3
22482: PPUSH
22483: CALL_OW 64
// end ;
22487: PPOPN 3
22489: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22490: LD_EXP 98
22494: IFFALSE 22610
22496: GO 22498
22498: DISABLE
22499: LD_INT 0
22501: PPUSH
22502: PPUSH
22503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22504: LD_ADDR_VAR 0 2
22508: PUSH
22509: LD_INT 81
22511: PUSH
22512: LD_OWVAR 2
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 21
22523: PUSH
22524: LD_INT 1
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PPUSH
22535: CALL_OW 69
22539: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22540: LD_STRING playComputer()
22542: PPUSH
22543: CALL_OW 559
// if not tmp then
22547: LD_VAR 0 2
22551: NOT
22552: IFFALSE 22556
// exit ;
22554: GO 22610
// for i in tmp do
22556: LD_ADDR_VAR 0 1
22560: PUSH
22561: LD_VAR 0 2
22565: PUSH
22566: FOR_IN
22567: IFFALSE 22608
// for j := 1 to 4 do
22569: LD_ADDR_VAR 0 3
22573: PUSH
22574: DOUBLE
22575: LD_INT 1
22577: DEC
22578: ST_TO_ADDR
22579: LD_INT 4
22581: PUSH
22582: FOR_TO
22583: IFFALSE 22604
// SetSkill ( i , j , 10 ) ;
22585: LD_VAR 0 1
22589: PPUSH
22590: LD_VAR 0 3
22594: PPUSH
22595: LD_INT 10
22597: PPUSH
22598: CALL_OW 237
22602: GO 22582
22604: POP
22605: POP
22606: GO 22566
22608: POP
22609: POP
// end ;
22610: PPOPN 3
22612: END
// every 0 0$1 trigger s30 do var i , tmp ;
22613: LD_EXP 99
22617: IFFALSE 22686
22619: GO 22621
22621: DISABLE
22622: LD_INT 0
22624: PPUSH
22625: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22626: LD_ADDR_VAR 0 2
22630: PUSH
22631: LD_INT 22
22633: PUSH
22634: LD_OWVAR 2
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PPUSH
22643: CALL_OW 69
22647: ST_TO_ADDR
// if not tmp then
22648: LD_VAR 0 2
22652: NOT
22653: IFFALSE 22657
// exit ;
22655: GO 22686
// for i in tmp do
22657: LD_ADDR_VAR 0 1
22661: PUSH
22662: LD_VAR 0 2
22666: PUSH
22667: FOR_IN
22668: IFFALSE 22684
// SetLives ( i , 300 ) ;
22670: LD_VAR 0 1
22674: PPUSH
22675: LD_INT 300
22677: PPUSH
22678: CALL_OW 234
22682: GO 22667
22684: POP
22685: POP
// end ;
22686: PPOPN 2
22688: END
// every 0 0$1 trigger s60 do var i , tmp ;
22689: LD_EXP 100
22693: IFFALSE 22762
22695: GO 22697
22697: DISABLE
22698: LD_INT 0
22700: PPUSH
22701: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22702: LD_ADDR_VAR 0 2
22706: PUSH
22707: LD_INT 22
22709: PUSH
22710: LD_OWVAR 2
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PPUSH
22719: CALL_OW 69
22723: ST_TO_ADDR
// if not tmp then
22724: LD_VAR 0 2
22728: NOT
22729: IFFALSE 22733
// exit ;
22731: GO 22762
// for i in tmp do
22733: LD_ADDR_VAR 0 1
22737: PUSH
22738: LD_VAR 0 2
22742: PUSH
22743: FOR_IN
22744: IFFALSE 22760
// SetLives ( i , 600 ) ;
22746: LD_VAR 0 1
22750: PPUSH
22751: LD_INT 600
22753: PPUSH
22754: CALL_OW 234
22758: GO 22743
22760: POP
22761: POP
// end ;
22762: PPOPN 2
22764: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22765: LD_INT 0
22767: PPUSH
// case cmd of 301 :
22768: LD_VAR 0 1
22772: PUSH
22773: LD_INT 301
22775: DOUBLE
22776: EQUAL
22777: IFTRUE 22781
22779: GO 22813
22781: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22782: LD_VAR 0 6
22786: PPUSH
22787: LD_VAR 0 7
22791: PPUSH
22792: LD_VAR 0 8
22796: PPUSH
22797: LD_VAR 0 4
22801: PPUSH
22802: LD_VAR 0 5
22806: PPUSH
22807: CALL 24022 0 5
22811: GO 22934
22813: LD_INT 302
22815: DOUBLE
22816: EQUAL
22817: IFTRUE 22821
22819: GO 22858
22821: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22822: LD_VAR 0 6
22826: PPUSH
22827: LD_VAR 0 7
22831: PPUSH
22832: LD_VAR 0 8
22836: PPUSH
22837: LD_VAR 0 9
22841: PPUSH
22842: LD_VAR 0 4
22846: PPUSH
22847: LD_VAR 0 5
22851: PPUSH
22852: CALL 24113 0 6
22856: GO 22934
22858: LD_INT 303
22860: DOUBLE
22861: EQUAL
22862: IFTRUE 22866
22864: GO 22903
22866: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22867: LD_VAR 0 6
22871: PPUSH
22872: LD_VAR 0 7
22876: PPUSH
22877: LD_VAR 0 8
22881: PPUSH
22882: LD_VAR 0 9
22886: PPUSH
22887: LD_VAR 0 4
22891: PPUSH
22892: LD_VAR 0 5
22896: PPUSH
22897: CALL 22939 0 6
22901: GO 22934
22903: LD_INT 304
22905: DOUBLE
22906: EQUAL
22907: IFTRUE 22911
22909: GO 22933
22911: POP
// hHackTeleport ( unit , x , y ) ; end ;
22912: LD_VAR 0 2
22916: PPUSH
22917: LD_VAR 0 4
22921: PPUSH
22922: LD_VAR 0 5
22926: PPUSH
22927: CALL 24706 0 3
22931: GO 22934
22933: POP
// end ;
22934: LD_VAR 0 12
22938: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22939: LD_INT 0
22941: PPUSH
22942: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22943: LD_VAR 0 1
22947: PUSH
22948: LD_INT 1
22950: LESS
22951: PUSH
22952: LD_VAR 0 1
22956: PUSH
22957: LD_INT 3
22959: GREATER
22960: OR
22961: PUSH
22962: LD_VAR 0 5
22966: PPUSH
22967: LD_VAR 0 6
22971: PPUSH
22972: CALL_OW 428
22976: OR
22977: IFFALSE 22981
// exit ;
22979: GO 23709
// uc_side := your_side ;
22981: LD_ADDR_OWVAR 20
22985: PUSH
22986: LD_OWVAR 2
22990: ST_TO_ADDR
// uc_nation := nation ;
22991: LD_ADDR_OWVAR 21
22995: PUSH
22996: LD_VAR 0 1
23000: ST_TO_ADDR
// bc_level = 1 ;
23001: LD_ADDR_OWVAR 43
23005: PUSH
23006: LD_INT 1
23008: ST_TO_ADDR
// case btype of 1 :
23009: LD_VAR 0 2
23013: PUSH
23014: LD_INT 1
23016: DOUBLE
23017: EQUAL
23018: IFTRUE 23022
23020: GO 23033
23022: POP
// bc_type := b_depot ; 2 :
23023: LD_ADDR_OWVAR 42
23027: PUSH
23028: LD_INT 0
23030: ST_TO_ADDR
23031: GO 23653
23033: LD_INT 2
23035: DOUBLE
23036: EQUAL
23037: IFTRUE 23041
23039: GO 23052
23041: POP
// bc_type := b_warehouse ; 3 :
23042: LD_ADDR_OWVAR 42
23046: PUSH
23047: LD_INT 1
23049: ST_TO_ADDR
23050: GO 23653
23052: LD_INT 3
23054: DOUBLE
23055: EQUAL
23056: IFTRUE 23060
23058: GO 23071
23060: POP
// bc_type := b_lab ; 4 .. 9 :
23061: LD_ADDR_OWVAR 42
23065: PUSH
23066: LD_INT 6
23068: ST_TO_ADDR
23069: GO 23653
23071: LD_INT 4
23073: DOUBLE
23074: GREATEREQUAL
23075: IFFALSE 23083
23077: LD_INT 9
23079: DOUBLE
23080: LESSEQUAL
23081: IFTRUE 23085
23083: GO 23145
23085: POP
// begin bc_type := b_lab_half ;
23086: LD_ADDR_OWVAR 42
23090: PUSH
23091: LD_INT 7
23093: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23094: LD_ADDR_OWVAR 44
23098: PUSH
23099: LD_INT 10
23101: PUSH
23102: LD_INT 11
23104: PUSH
23105: LD_INT 12
23107: PUSH
23108: LD_INT 15
23110: PUSH
23111: LD_INT 14
23113: PUSH
23114: LD_INT 13
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: PUSH
23125: LD_VAR 0 2
23129: PUSH
23130: LD_INT 3
23132: MINUS
23133: ARRAY
23134: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23135: LD_ADDR_OWVAR 45
23139: PUSH
23140: LD_INT 9
23142: ST_TO_ADDR
// end ; 10 .. 13 :
23143: GO 23653
23145: LD_INT 10
23147: DOUBLE
23148: GREATEREQUAL
23149: IFFALSE 23157
23151: LD_INT 13
23153: DOUBLE
23154: LESSEQUAL
23155: IFTRUE 23159
23157: GO 23236
23159: POP
// begin bc_type := b_lab_full ;
23160: LD_ADDR_OWVAR 42
23164: PUSH
23165: LD_INT 8
23167: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23168: LD_ADDR_OWVAR 44
23172: PUSH
23173: LD_INT 10
23175: PUSH
23176: LD_INT 12
23178: PUSH
23179: LD_INT 14
23181: PUSH
23182: LD_INT 13
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: PUSH
23191: LD_VAR 0 2
23195: PUSH
23196: LD_INT 9
23198: MINUS
23199: ARRAY
23200: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23201: LD_ADDR_OWVAR 45
23205: PUSH
23206: LD_INT 11
23208: PUSH
23209: LD_INT 15
23211: PUSH
23212: LD_INT 12
23214: PUSH
23215: LD_INT 15
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: PUSH
23224: LD_VAR 0 2
23228: PUSH
23229: LD_INT 9
23231: MINUS
23232: ARRAY
23233: ST_TO_ADDR
// end ; 14 :
23234: GO 23653
23236: LD_INT 14
23238: DOUBLE
23239: EQUAL
23240: IFTRUE 23244
23242: GO 23255
23244: POP
// bc_type := b_workshop ; 15 :
23245: LD_ADDR_OWVAR 42
23249: PUSH
23250: LD_INT 2
23252: ST_TO_ADDR
23253: GO 23653
23255: LD_INT 15
23257: DOUBLE
23258: EQUAL
23259: IFTRUE 23263
23261: GO 23274
23263: POP
// bc_type := b_factory ; 16 :
23264: LD_ADDR_OWVAR 42
23268: PUSH
23269: LD_INT 3
23271: ST_TO_ADDR
23272: GO 23653
23274: LD_INT 16
23276: DOUBLE
23277: EQUAL
23278: IFTRUE 23282
23280: GO 23293
23282: POP
// bc_type := b_ext_gun ; 17 :
23283: LD_ADDR_OWVAR 42
23287: PUSH
23288: LD_INT 17
23290: ST_TO_ADDR
23291: GO 23653
23293: LD_INT 17
23295: DOUBLE
23296: EQUAL
23297: IFTRUE 23301
23299: GO 23329
23301: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23302: LD_ADDR_OWVAR 42
23306: PUSH
23307: LD_INT 19
23309: PUSH
23310: LD_INT 23
23312: PUSH
23313: LD_INT 19
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: LIST
23320: PUSH
23321: LD_VAR 0 1
23325: ARRAY
23326: ST_TO_ADDR
23327: GO 23653
23329: LD_INT 18
23331: DOUBLE
23332: EQUAL
23333: IFTRUE 23337
23335: GO 23348
23337: POP
// bc_type := b_ext_radar ; 19 :
23338: LD_ADDR_OWVAR 42
23342: PUSH
23343: LD_INT 20
23345: ST_TO_ADDR
23346: GO 23653
23348: LD_INT 19
23350: DOUBLE
23351: EQUAL
23352: IFTRUE 23356
23354: GO 23367
23356: POP
// bc_type := b_ext_radio ; 20 :
23357: LD_ADDR_OWVAR 42
23361: PUSH
23362: LD_INT 22
23364: ST_TO_ADDR
23365: GO 23653
23367: LD_INT 20
23369: DOUBLE
23370: EQUAL
23371: IFTRUE 23375
23373: GO 23386
23375: POP
// bc_type := b_ext_siberium ; 21 :
23376: LD_ADDR_OWVAR 42
23380: PUSH
23381: LD_INT 21
23383: ST_TO_ADDR
23384: GO 23653
23386: LD_INT 21
23388: DOUBLE
23389: EQUAL
23390: IFTRUE 23394
23392: GO 23405
23394: POP
// bc_type := b_ext_computer ; 22 :
23395: LD_ADDR_OWVAR 42
23399: PUSH
23400: LD_INT 24
23402: ST_TO_ADDR
23403: GO 23653
23405: LD_INT 22
23407: DOUBLE
23408: EQUAL
23409: IFTRUE 23413
23411: GO 23424
23413: POP
// bc_type := b_ext_track ; 23 :
23414: LD_ADDR_OWVAR 42
23418: PUSH
23419: LD_INT 16
23421: ST_TO_ADDR
23422: GO 23653
23424: LD_INT 23
23426: DOUBLE
23427: EQUAL
23428: IFTRUE 23432
23430: GO 23443
23432: POP
// bc_type := b_ext_laser ; 24 :
23433: LD_ADDR_OWVAR 42
23437: PUSH
23438: LD_INT 25
23440: ST_TO_ADDR
23441: GO 23653
23443: LD_INT 24
23445: DOUBLE
23446: EQUAL
23447: IFTRUE 23451
23449: GO 23462
23451: POP
// bc_type := b_control_tower ; 25 :
23452: LD_ADDR_OWVAR 42
23456: PUSH
23457: LD_INT 36
23459: ST_TO_ADDR
23460: GO 23653
23462: LD_INT 25
23464: DOUBLE
23465: EQUAL
23466: IFTRUE 23470
23468: GO 23481
23470: POP
// bc_type := b_breastwork ; 26 :
23471: LD_ADDR_OWVAR 42
23475: PUSH
23476: LD_INT 31
23478: ST_TO_ADDR
23479: GO 23653
23481: LD_INT 26
23483: DOUBLE
23484: EQUAL
23485: IFTRUE 23489
23487: GO 23500
23489: POP
// bc_type := b_bunker ; 27 :
23490: LD_ADDR_OWVAR 42
23494: PUSH
23495: LD_INT 32
23497: ST_TO_ADDR
23498: GO 23653
23500: LD_INT 27
23502: DOUBLE
23503: EQUAL
23504: IFTRUE 23508
23506: GO 23519
23508: POP
// bc_type := b_turret ; 28 :
23509: LD_ADDR_OWVAR 42
23513: PUSH
23514: LD_INT 33
23516: ST_TO_ADDR
23517: GO 23653
23519: LD_INT 28
23521: DOUBLE
23522: EQUAL
23523: IFTRUE 23527
23525: GO 23538
23527: POP
// bc_type := b_armoury ; 29 :
23528: LD_ADDR_OWVAR 42
23532: PUSH
23533: LD_INT 4
23535: ST_TO_ADDR
23536: GO 23653
23538: LD_INT 29
23540: DOUBLE
23541: EQUAL
23542: IFTRUE 23546
23544: GO 23557
23546: POP
// bc_type := b_barracks ; 30 :
23547: LD_ADDR_OWVAR 42
23551: PUSH
23552: LD_INT 5
23554: ST_TO_ADDR
23555: GO 23653
23557: LD_INT 30
23559: DOUBLE
23560: EQUAL
23561: IFTRUE 23565
23563: GO 23576
23565: POP
// bc_type := b_solar_power ; 31 :
23566: LD_ADDR_OWVAR 42
23570: PUSH
23571: LD_INT 27
23573: ST_TO_ADDR
23574: GO 23653
23576: LD_INT 31
23578: DOUBLE
23579: EQUAL
23580: IFTRUE 23584
23582: GO 23595
23584: POP
// bc_type := b_oil_power ; 32 :
23585: LD_ADDR_OWVAR 42
23589: PUSH
23590: LD_INT 26
23592: ST_TO_ADDR
23593: GO 23653
23595: LD_INT 32
23597: DOUBLE
23598: EQUAL
23599: IFTRUE 23603
23601: GO 23614
23603: POP
// bc_type := b_siberite_power ; 33 :
23604: LD_ADDR_OWVAR 42
23608: PUSH
23609: LD_INT 28
23611: ST_TO_ADDR
23612: GO 23653
23614: LD_INT 33
23616: DOUBLE
23617: EQUAL
23618: IFTRUE 23622
23620: GO 23633
23622: POP
// bc_type := b_oil_mine ; 34 :
23623: LD_ADDR_OWVAR 42
23627: PUSH
23628: LD_INT 29
23630: ST_TO_ADDR
23631: GO 23653
23633: LD_INT 34
23635: DOUBLE
23636: EQUAL
23637: IFTRUE 23641
23639: GO 23652
23641: POP
// bc_type := b_siberite_mine ; end ;
23642: LD_ADDR_OWVAR 42
23646: PUSH
23647: LD_INT 30
23649: ST_TO_ADDR
23650: GO 23653
23652: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23653: LD_ADDR_VAR 0 8
23657: PUSH
23658: LD_VAR 0 5
23662: PPUSH
23663: LD_VAR 0 6
23667: PPUSH
23668: LD_VAR 0 3
23672: PPUSH
23673: CALL_OW 47
23677: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23678: LD_OWVAR 42
23682: PUSH
23683: LD_INT 32
23685: PUSH
23686: LD_INT 33
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: IN
23693: IFFALSE 23709
// PlaceWeaponTurret ( b , weapon ) ;
23695: LD_VAR 0 8
23699: PPUSH
23700: LD_VAR 0 4
23704: PPUSH
23705: CALL_OW 431
// end ;
23709: LD_VAR 0 7
23713: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23714: LD_INT 0
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23720: LD_ADDR_VAR 0 4
23724: PUSH
23725: LD_INT 22
23727: PUSH
23728: LD_OWVAR 2
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 2
23739: PUSH
23740: LD_INT 30
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 30
23752: PUSH
23753: LD_INT 1
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: LIST
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PPUSH
23769: CALL_OW 69
23773: ST_TO_ADDR
// if not tmp then
23774: LD_VAR 0 4
23778: NOT
23779: IFFALSE 23783
// exit ;
23781: GO 23842
// for i in tmp do
23783: LD_ADDR_VAR 0 2
23787: PUSH
23788: LD_VAR 0 4
23792: PUSH
23793: FOR_IN
23794: IFFALSE 23840
// for j = 1 to 3 do
23796: LD_ADDR_VAR 0 3
23800: PUSH
23801: DOUBLE
23802: LD_INT 1
23804: DEC
23805: ST_TO_ADDR
23806: LD_INT 3
23808: PUSH
23809: FOR_TO
23810: IFFALSE 23836
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23812: LD_VAR 0 2
23816: PPUSH
23817: CALL_OW 274
23821: PPUSH
23822: LD_VAR 0 3
23826: PPUSH
23827: LD_INT 99999
23829: PPUSH
23830: CALL_OW 277
23834: GO 23809
23836: POP
23837: POP
23838: GO 23793
23840: POP
23841: POP
// end ;
23842: LD_VAR 0 1
23846: RET
// export function hHackSetLevel10 ; var i , j ; begin
23847: LD_INT 0
23849: PPUSH
23850: PPUSH
23851: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23852: LD_ADDR_VAR 0 2
23856: PUSH
23857: LD_INT 21
23859: PUSH
23860: LD_INT 1
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PPUSH
23867: CALL_OW 69
23871: PUSH
23872: FOR_IN
23873: IFFALSE 23925
// if IsSelected ( i ) then
23875: LD_VAR 0 2
23879: PPUSH
23880: CALL_OW 306
23884: IFFALSE 23923
// begin for j := 1 to 4 do
23886: LD_ADDR_VAR 0 3
23890: PUSH
23891: DOUBLE
23892: LD_INT 1
23894: DEC
23895: ST_TO_ADDR
23896: LD_INT 4
23898: PUSH
23899: FOR_TO
23900: IFFALSE 23921
// SetSkill ( i , j , 10 ) ;
23902: LD_VAR 0 2
23906: PPUSH
23907: LD_VAR 0 3
23911: PPUSH
23912: LD_INT 10
23914: PPUSH
23915: CALL_OW 237
23919: GO 23899
23921: POP
23922: POP
// end ;
23923: GO 23872
23925: POP
23926: POP
// end ;
23927: LD_VAR 0 1
23931: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23932: LD_INT 0
23934: PPUSH
23935: PPUSH
23936: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23937: LD_ADDR_VAR 0 2
23941: PUSH
23942: LD_INT 22
23944: PUSH
23945: LD_OWVAR 2
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 21
23956: PUSH
23957: LD_INT 1
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PPUSH
23968: CALL_OW 69
23972: PUSH
23973: FOR_IN
23974: IFFALSE 24015
// begin for j := 1 to 4 do
23976: LD_ADDR_VAR 0 3
23980: PUSH
23981: DOUBLE
23982: LD_INT 1
23984: DEC
23985: ST_TO_ADDR
23986: LD_INT 4
23988: PUSH
23989: FOR_TO
23990: IFFALSE 24011
// SetSkill ( i , j , 10 ) ;
23992: LD_VAR 0 2
23996: PPUSH
23997: LD_VAR 0 3
24001: PPUSH
24002: LD_INT 10
24004: PPUSH
24005: CALL_OW 237
24009: GO 23989
24011: POP
24012: POP
// end ;
24013: GO 23973
24015: POP
24016: POP
// end ;
24017: LD_VAR 0 1
24021: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24022: LD_INT 0
24024: PPUSH
// uc_side := your_side ;
24025: LD_ADDR_OWVAR 20
24029: PUSH
24030: LD_OWVAR 2
24034: ST_TO_ADDR
// uc_nation := nation ;
24035: LD_ADDR_OWVAR 21
24039: PUSH
24040: LD_VAR 0 1
24044: ST_TO_ADDR
// InitHc ;
24045: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24049: LD_INT 0
24051: PPUSH
24052: LD_VAR 0 2
24056: PPUSH
24057: LD_VAR 0 3
24061: PPUSH
24062: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24066: LD_VAR 0 4
24070: PPUSH
24071: LD_VAR 0 5
24075: PPUSH
24076: CALL_OW 428
24080: PUSH
24081: LD_INT 0
24083: EQUAL
24084: IFFALSE 24108
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24086: CALL_OW 44
24090: PPUSH
24091: LD_VAR 0 4
24095: PPUSH
24096: LD_VAR 0 5
24100: PPUSH
24101: LD_INT 1
24103: PPUSH
24104: CALL_OW 48
// end ;
24108: LD_VAR 0 6
24112: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24113: LD_INT 0
24115: PPUSH
24116: PPUSH
// uc_side := your_side ;
24117: LD_ADDR_OWVAR 20
24121: PUSH
24122: LD_OWVAR 2
24126: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24127: LD_VAR 0 1
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: LD_INT 2
24137: PUSH
24138: LD_INT 3
24140: PUSH
24141: LD_INT 4
24143: PUSH
24144: LD_INT 5
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: IN
24154: IFFALSE 24166
// uc_nation := nation_american else
24156: LD_ADDR_OWVAR 21
24160: PUSH
24161: LD_INT 1
24163: ST_TO_ADDR
24164: GO 24209
// if chassis in [ 11 , 12 , 13 , 14 ] then
24166: LD_VAR 0 1
24170: PUSH
24171: LD_INT 11
24173: PUSH
24174: LD_INT 12
24176: PUSH
24177: LD_INT 13
24179: PUSH
24180: LD_INT 14
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: IN
24189: IFFALSE 24201
// uc_nation := nation_arabian else
24191: LD_ADDR_OWVAR 21
24195: PUSH
24196: LD_INT 2
24198: ST_TO_ADDR
24199: GO 24209
// uc_nation := nation_russian ;
24201: LD_ADDR_OWVAR 21
24205: PUSH
24206: LD_INT 3
24208: ST_TO_ADDR
// vc_chassis := chassis ;
24209: LD_ADDR_OWVAR 37
24213: PUSH
24214: LD_VAR 0 1
24218: ST_TO_ADDR
// vc_engine := engine ;
24219: LD_ADDR_OWVAR 39
24223: PUSH
24224: LD_VAR 0 2
24228: ST_TO_ADDR
// vc_control := control ;
24229: LD_ADDR_OWVAR 38
24233: PUSH
24234: LD_VAR 0 3
24238: ST_TO_ADDR
// vc_weapon := weapon ;
24239: LD_ADDR_OWVAR 40
24243: PUSH
24244: LD_VAR 0 4
24248: ST_TO_ADDR
// un := CreateVehicle ;
24249: LD_ADDR_VAR 0 8
24253: PUSH
24254: CALL_OW 45
24258: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24259: LD_VAR 0 8
24263: PPUSH
24264: LD_INT 0
24266: PPUSH
24267: LD_INT 5
24269: PPUSH
24270: CALL_OW 12
24274: PPUSH
24275: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24279: LD_VAR 0 8
24283: PPUSH
24284: LD_VAR 0 5
24288: PPUSH
24289: LD_VAR 0 6
24293: PPUSH
24294: LD_INT 1
24296: PPUSH
24297: CALL_OW 48
// end ;
24301: LD_VAR 0 7
24305: RET
// export hInvincible ; every 1 do
24306: GO 24308
24308: DISABLE
// hInvincible := [ ] ;
24309: LD_ADDR_EXP 101
24313: PUSH
24314: EMPTY
24315: ST_TO_ADDR
24316: END
// every 10 do var i ;
24317: GO 24319
24319: DISABLE
24320: LD_INT 0
24322: PPUSH
// begin enable ;
24323: ENABLE
// if not hInvincible then
24324: LD_EXP 101
24328: NOT
24329: IFFALSE 24333
// exit ;
24331: GO 24377
// for i in hInvincible do
24333: LD_ADDR_VAR 0 1
24337: PUSH
24338: LD_EXP 101
24342: PUSH
24343: FOR_IN
24344: IFFALSE 24375
// if GetLives ( i ) < 1000 then
24346: LD_VAR 0 1
24350: PPUSH
24351: CALL_OW 256
24355: PUSH
24356: LD_INT 1000
24358: LESS
24359: IFFALSE 24373
// SetLives ( i , 1000 ) ;
24361: LD_VAR 0 1
24365: PPUSH
24366: LD_INT 1000
24368: PPUSH
24369: CALL_OW 234
24373: GO 24343
24375: POP
24376: POP
// end ;
24377: PPOPN 1
24379: END
// export function hHackInvincible ; var i ; begin
24380: LD_INT 0
24382: PPUSH
24383: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24384: LD_ADDR_VAR 0 2
24388: PUSH
24389: LD_INT 2
24391: PUSH
24392: LD_INT 21
24394: PUSH
24395: LD_INT 1
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 21
24404: PUSH
24405: LD_INT 2
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: LIST
24416: PPUSH
24417: CALL_OW 69
24421: PUSH
24422: FOR_IN
24423: IFFALSE 24484
// if IsSelected ( i ) then
24425: LD_VAR 0 2
24429: PPUSH
24430: CALL_OW 306
24434: IFFALSE 24482
// begin if i in hInvincible then
24436: LD_VAR 0 2
24440: PUSH
24441: LD_EXP 101
24445: IN
24446: IFFALSE 24466
// hInvincible := hInvincible diff i else
24448: LD_ADDR_EXP 101
24452: PUSH
24453: LD_EXP 101
24457: PUSH
24458: LD_VAR 0 2
24462: DIFF
24463: ST_TO_ADDR
24464: GO 24482
// hInvincible := hInvincible union i ;
24466: LD_ADDR_EXP 101
24470: PUSH
24471: LD_EXP 101
24475: PUSH
24476: LD_VAR 0 2
24480: UNION
24481: ST_TO_ADDR
// end ;
24482: GO 24422
24484: POP
24485: POP
// end ;
24486: LD_VAR 0 1
24490: RET
// export function hHackInvisible ; var i , j ; begin
24491: LD_INT 0
24493: PPUSH
24494: PPUSH
24495: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24496: LD_ADDR_VAR 0 2
24500: PUSH
24501: LD_INT 21
24503: PUSH
24504: LD_INT 1
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PPUSH
24511: CALL_OW 69
24515: PUSH
24516: FOR_IN
24517: IFFALSE 24541
// if IsSelected ( i ) then
24519: LD_VAR 0 2
24523: PPUSH
24524: CALL_OW 306
24528: IFFALSE 24539
// ComForceInvisible ( i ) ;
24530: LD_VAR 0 2
24534: PPUSH
24535: CALL_OW 496
24539: GO 24516
24541: POP
24542: POP
// end ;
24543: LD_VAR 0 1
24547: RET
// export function hHackChangeYourSide ; begin
24548: LD_INT 0
24550: PPUSH
// if your_side = 8 then
24551: LD_OWVAR 2
24555: PUSH
24556: LD_INT 8
24558: EQUAL
24559: IFFALSE 24571
// your_side := 0 else
24561: LD_ADDR_OWVAR 2
24565: PUSH
24566: LD_INT 0
24568: ST_TO_ADDR
24569: GO 24585
// your_side := your_side + 1 ;
24571: LD_ADDR_OWVAR 2
24575: PUSH
24576: LD_OWVAR 2
24580: PUSH
24581: LD_INT 1
24583: PLUS
24584: ST_TO_ADDR
// end ;
24585: LD_VAR 0 1
24589: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24590: LD_INT 0
24592: PPUSH
24593: PPUSH
24594: PPUSH
// for i in all_units do
24595: LD_ADDR_VAR 0 2
24599: PUSH
24600: LD_OWVAR 3
24604: PUSH
24605: FOR_IN
24606: IFFALSE 24684
// if IsSelected ( i ) then
24608: LD_VAR 0 2
24612: PPUSH
24613: CALL_OW 306
24617: IFFALSE 24682
// begin j := GetSide ( i ) ;
24619: LD_ADDR_VAR 0 3
24623: PUSH
24624: LD_VAR 0 2
24628: PPUSH
24629: CALL_OW 255
24633: ST_TO_ADDR
// if j = 8 then
24634: LD_VAR 0 3
24638: PUSH
24639: LD_INT 8
24641: EQUAL
24642: IFFALSE 24654
// j := 0 else
24644: LD_ADDR_VAR 0 3
24648: PUSH
24649: LD_INT 0
24651: ST_TO_ADDR
24652: GO 24668
// j := j + 1 ;
24654: LD_ADDR_VAR 0 3
24658: PUSH
24659: LD_VAR 0 3
24663: PUSH
24664: LD_INT 1
24666: PLUS
24667: ST_TO_ADDR
// SetSide ( i , j ) ;
24668: LD_VAR 0 2
24672: PPUSH
24673: LD_VAR 0 3
24677: PPUSH
24678: CALL_OW 235
// end ;
24682: GO 24605
24684: POP
24685: POP
// end ;
24686: LD_VAR 0 1
24690: RET
// export function hHackFog ; begin
24691: LD_INT 0
24693: PPUSH
// FogOff ( true ) ;
24694: LD_INT 1
24696: PPUSH
24697: CALL_OW 344
// end ;
24701: LD_VAR 0 1
24705: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24706: LD_INT 0
24708: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24709: LD_VAR 0 1
24713: PPUSH
24714: LD_VAR 0 2
24718: PPUSH
24719: LD_VAR 0 3
24723: PPUSH
24724: LD_INT 1
24726: PPUSH
24727: LD_INT 1
24729: PPUSH
24730: CALL_OW 483
// CenterOnXY ( x , y ) ;
24734: LD_VAR 0 2
24738: PPUSH
24739: LD_VAR 0 3
24743: PPUSH
24744: CALL_OW 84
// end ;
24748: LD_VAR 0 4
24752: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24753: LD_INT 0
24755: PPUSH
24756: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24757: LD_VAR 0 1
24761: NOT
24762: PUSH
24763: LD_VAR 0 2
24767: PPUSH
24768: LD_VAR 0 3
24772: PPUSH
24773: CALL_OW 488
24777: NOT
24778: OR
24779: PUSH
24780: LD_VAR 0 1
24784: PPUSH
24785: CALL_OW 266
24789: PUSH
24790: LD_INT 3
24792: NONEQUAL
24793: PUSH
24794: LD_VAR 0 1
24798: PPUSH
24799: CALL_OW 247
24803: PUSH
24804: LD_INT 1
24806: EQUAL
24807: NOT
24808: AND
24809: OR
24810: IFFALSE 24814
// exit ;
24812: GO 24963
// if GetType ( factory ) = unit_human then
24814: LD_VAR 0 1
24818: PPUSH
24819: CALL_OW 247
24823: PUSH
24824: LD_INT 1
24826: EQUAL
24827: IFFALSE 24844
// factory := IsInUnit ( factory ) ;
24829: LD_ADDR_VAR 0 1
24833: PUSH
24834: LD_VAR 0 1
24838: PPUSH
24839: CALL_OW 310
24843: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24844: LD_VAR 0 1
24848: PPUSH
24849: CALL_OW 266
24853: PUSH
24854: LD_INT 3
24856: NONEQUAL
24857: IFFALSE 24861
// exit ;
24859: GO 24963
// if HexInfo ( x , y ) = factory then
24861: LD_VAR 0 2
24865: PPUSH
24866: LD_VAR 0 3
24870: PPUSH
24871: CALL_OW 428
24875: PUSH
24876: LD_VAR 0 1
24880: EQUAL
24881: IFFALSE 24908
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24883: LD_ADDR_EXP 102
24887: PUSH
24888: LD_EXP 102
24892: PPUSH
24893: LD_VAR 0 1
24897: PPUSH
24898: LD_INT 0
24900: PPUSH
24901: CALL_OW 1
24905: ST_TO_ADDR
24906: GO 24959
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24908: LD_ADDR_EXP 102
24912: PUSH
24913: LD_EXP 102
24917: PPUSH
24918: LD_VAR 0 1
24922: PPUSH
24923: LD_VAR 0 1
24927: PPUSH
24928: CALL_OW 255
24932: PUSH
24933: LD_VAR 0 1
24937: PUSH
24938: LD_VAR 0 2
24942: PUSH
24943: LD_VAR 0 3
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: PPUSH
24954: CALL_OW 1
24958: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24959: CALL 24968 0 0
// end ;
24963: LD_VAR 0 4
24967: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24968: LD_INT 0
24970: PPUSH
24971: PPUSH
24972: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24973: LD_STRING resetFactoryWaypoint();
24975: PPUSH
24976: CALL_OW 559
// if factoryWaypoints then
24980: LD_EXP 102
24984: IFFALSE 25110
// begin list := PrepareArray ( factoryWaypoints ) ;
24986: LD_ADDR_VAR 0 3
24990: PUSH
24991: LD_EXP 102
24995: PPUSH
24996: CALL 71595 0 1
25000: ST_TO_ADDR
// for i := 1 to list do
25001: LD_ADDR_VAR 0 2
25005: PUSH
25006: DOUBLE
25007: LD_INT 1
25009: DEC
25010: ST_TO_ADDR
25011: LD_VAR 0 3
25015: PUSH
25016: FOR_TO
25017: IFFALSE 25108
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25019: LD_STRING setFactoryWaypointXY(
25021: PUSH
25022: LD_VAR 0 3
25026: PUSH
25027: LD_VAR 0 2
25031: ARRAY
25032: PUSH
25033: LD_INT 1
25035: ARRAY
25036: STR
25037: PUSH
25038: LD_STRING ,
25040: STR
25041: PUSH
25042: LD_VAR 0 3
25046: PUSH
25047: LD_VAR 0 2
25051: ARRAY
25052: PUSH
25053: LD_INT 2
25055: ARRAY
25056: STR
25057: PUSH
25058: LD_STRING ,
25060: STR
25061: PUSH
25062: LD_VAR 0 3
25066: PUSH
25067: LD_VAR 0 2
25071: ARRAY
25072: PUSH
25073: LD_INT 3
25075: ARRAY
25076: STR
25077: PUSH
25078: LD_STRING ,
25080: STR
25081: PUSH
25082: LD_VAR 0 3
25086: PUSH
25087: LD_VAR 0 2
25091: ARRAY
25092: PUSH
25093: LD_INT 4
25095: ARRAY
25096: STR
25097: PUSH
25098: LD_STRING )
25100: STR
25101: PPUSH
25102: CALL_OW 559
25106: GO 25016
25108: POP
25109: POP
// end ; end ;
25110: LD_VAR 0 1
25114: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25115: LD_INT 0
25117: PPUSH
// if HexInfo ( x , y ) = warehouse then
25118: LD_VAR 0 2
25122: PPUSH
25123: LD_VAR 0 3
25127: PPUSH
25128: CALL_OW 428
25132: PUSH
25133: LD_VAR 0 1
25137: EQUAL
25138: IFFALSE 25165
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25140: LD_ADDR_EXP 103
25144: PUSH
25145: LD_EXP 103
25149: PPUSH
25150: LD_VAR 0 1
25154: PPUSH
25155: LD_INT 0
25157: PPUSH
25158: CALL_OW 1
25162: ST_TO_ADDR
25163: GO 25216
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25165: LD_ADDR_EXP 103
25169: PUSH
25170: LD_EXP 103
25174: PPUSH
25175: LD_VAR 0 1
25179: PPUSH
25180: LD_VAR 0 1
25184: PPUSH
25185: CALL_OW 255
25189: PUSH
25190: LD_VAR 0 1
25194: PUSH
25195: LD_VAR 0 2
25199: PUSH
25200: LD_VAR 0 3
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: PPUSH
25211: CALL_OW 1
25215: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25216: CALL 25225 0 0
// end ;
25220: LD_VAR 0 4
25224: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25225: LD_INT 0
25227: PPUSH
25228: PPUSH
25229: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25230: LD_STRING resetWarehouseGatheringPoints();
25232: PPUSH
25233: CALL_OW 559
// if warehouseGatheringPoints then
25237: LD_EXP 103
25241: IFFALSE 25367
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25243: LD_ADDR_VAR 0 3
25247: PUSH
25248: LD_EXP 103
25252: PPUSH
25253: CALL 71595 0 1
25257: ST_TO_ADDR
// for i := 1 to list do
25258: LD_ADDR_VAR 0 2
25262: PUSH
25263: DOUBLE
25264: LD_INT 1
25266: DEC
25267: ST_TO_ADDR
25268: LD_VAR 0 3
25272: PUSH
25273: FOR_TO
25274: IFFALSE 25365
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25276: LD_STRING setWarehouseGatheringPointXY(
25278: PUSH
25279: LD_VAR 0 3
25283: PUSH
25284: LD_VAR 0 2
25288: ARRAY
25289: PUSH
25290: LD_INT 1
25292: ARRAY
25293: STR
25294: PUSH
25295: LD_STRING ,
25297: STR
25298: PUSH
25299: LD_VAR 0 3
25303: PUSH
25304: LD_VAR 0 2
25308: ARRAY
25309: PUSH
25310: LD_INT 2
25312: ARRAY
25313: STR
25314: PUSH
25315: LD_STRING ,
25317: STR
25318: PUSH
25319: LD_VAR 0 3
25323: PUSH
25324: LD_VAR 0 2
25328: ARRAY
25329: PUSH
25330: LD_INT 3
25332: ARRAY
25333: STR
25334: PUSH
25335: LD_STRING ,
25337: STR
25338: PUSH
25339: LD_VAR 0 3
25343: PUSH
25344: LD_VAR 0 2
25348: ARRAY
25349: PUSH
25350: LD_INT 4
25352: ARRAY
25353: STR
25354: PUSH
25355: LD_STRING )
25357: STR
25358: PPUSH
25359: CALL_OW 559
25363: GO 25273
25365: POP
25366: POP
// end ; end ;
25367: LD_VAR 0 1
25371: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25372: LD_EXP 103
25376: IFFALSE 26061
25378: GO 25380
25380: DISABLE
25381: LD_INT 0
25383: PPUSH
25384: PPUSH
25385: PPUSH
25386: PPUSH
25387: PPUSH
25388: PPUSH
25389: PPUSH
25390: PPUSH
25391: PPUSH
// begin enable ;
25392: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25393: LD_ADDR_VAR 0 3
25397: PUSH
25398: LD_EXP 103
25402: PPUSH
25403: CALL 71595 0 1
25407: ST_TO_ADDR
// if not list then
25408: LD_VAR 0 3
25412: NOT
25413: IFFALSE 25417
// exit ;
25415: GO 26061
// for i := 1 to list do
25417: LD_ADDR_VAR 0 1
25421: PUSH
25422: DOUBLE
25423: LD_INT 1
25425: DEC
25426: ST_TO_ADDR
25427: LD_VAR 0 3
25431: PUSH
25432: FOR_TO
25433: IFFALSE 26059
// begin depot := list [ i ] [ 2 ] ;
25435: LD_ADDR_VAR 0 8
25439: PUSH
25440: LD_VAR 0 3
25444: PUSH
25445: LD_VAR 0 1
25449: ARRAY
25450: PUSH
25451: LD_INT 2
25453: ARRAY
25454: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25455: LD_ADDR_VAR 0 5
25459: PUSH
25460: LD_VAR 0 3
25464: PUSH
25465: LD_VAR 0 1
25469: ARRAY
25470: PUSH
25471: LD_INT 1
25473: ARRAY
25474: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25475: LD_VAR 0 8
25479: PPUSH
25480: CALL_OW 301
25484: PUSH
25485: LD_VAR 0 5
25489: PUSH
25490: LD_VAR 0 8
25494: PPUSH
25495: CALL_OW 255
25499: NONEQUAL
25500: OR
25501: IFFALSE 25530
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25503: LD_ADDR_EXP 103
25507: PUSH
25508: LD_EXP 103
25512: PPUSH
25513: LD_VAR 0 8
25517: PPUSH
25518: LD_INT 0
25520: PPUSH
25521: CALL_OW 1
25525: ST_TO_ADDR
// exit ;
25526: POP
25527: POP
25528: GO 26061
// end ; x := list [ i ] [ 3 ] ;
25530: LD_ADDR_VAR 0 6
25534: PUSH
25535: LD_VAR 0 3
25539: PUSH
25540: LD_VAR 0 1
25544: ARRAY
25545: PUSH
25546: LD_INT 3
25548: ARRAY
25549: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25550: LD_ADDR_VAR 0 7
25554: PUSH
25555: LD_VAR 0 3
25559: PUSH
25560: LD_VAR 0 1
25564: ARRAY
25565: PUSH
25566: LD_INT 4
25568: ARRAY
25569: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25570: LD_ADDR_VAR 0 9
25574: PUSH
25575: LD_VAR 0 6
25579: PPUSH
25580: LD_VAR 0 7
25584: PPUSH
25585: LD_INT 16
25587: PPUSH
25588: CALL 70183 0 3
25592: ST_TO_ADDR
// if not cratesNearbyPoint then
25593: LD_VAR 0 9
25597: NOT
25598: IFFALSE 25604
// exit ;
25600: POP
25601: POP
25602: GO 26061
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25604: LD_ADDR_VAR 0 4
25608: PUSH
25609: LD_INT 22
25611: PUSH
25612: LD_VAR 0 5
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 3
25623: PUSH
25624: LD_INT 60
25626: PUSH
25627: EMPTY
25628: LIST
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 91
25636: PUSH
25637: LD_VAR 0 8
25641: PUSH
25642: LD_INT 6
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 2
25652: PUSH
25653: LD_INT 25
25655: PUSH
25656: LD_INT 2
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 25
25665: PUSH
25666: LD_INT 16
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: LIST
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: PPUSH
25684: CALL_OW 69
25688: PUSH
25689: LD_VAR 0 8
25693: PPUSH
25694: CALL_OW 313
25698: PPUSH
25699: LD_INT 3
25701: PUSH
25702: LD_INT 60
25704: PUSH
25705: EMPTY
25706: LIST
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 2
25714: PUSH
25715: LD_INT 25
25717: PUSH
25718: LD_INT 2
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 25
25727: PUSH
25728: LD_INT 16
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PPUSH
25744: CALL_OW 72
25748: UNION
25749: ST_TO_ADDR
// if tmp then
25750: LD_VAR 0 4
25754: IFFALSE 25834
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25756: LD_ADDR_VAR 0 4
25760: PUSH
25761: LD_VAR 0 4
25765: PPUSH
25766: LD_INT 3
25768: PPUSH
25769: CALL 68152 0 2
25773: ST_TO_ADDR
// for j in tmp do
25774: LD_ADDR_VAR 0 2
25778: PUSH
25779: LD_VAR 0 4
25783: PUSH
25784: FOR_IN
25785: IFFALSE 25828
// begin if IsInUnit ( j ) then
25787: LD_VAR 0 2
25791: PPUSH
25792: CALL_OW 310
25796: IFFALSE 25807
// ComExit ( j ) ;
25798: LD_VAR 0 2
25802: PPUSH
25803: CALL 68235 0 1
// AddComCollect ( j , x , y ) ;
25807: LD_VAR 0 2
25811: PPUSH
25812: LD_VAR 0 6
25816: PPUSH
25817: LD_VAR 0 7
25821: PPUSH
25822: CALL_OW 177
// end ;
25826: GO 25784
25828: POP
25829: POP
// exit ;
25830: POP
25831: POP
25832: GO 26061
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25834: LD_ADDR_VAR 0 4
25838: PUSH
25839: LD_INT 22
25841: PUSH
25842: LD_VAR 0 5
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 91
25853: PUSH
25854: LD_VAR 0 8
25858: PUSH
25859: LD_INT 8
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 2
25869: PUSH
25870: LD_INT 34
25872: PUSH
25873: LD_INT 12
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 34
25882: PUSH
25883: LD_INT 51
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 34
25892: PUSH
25893: LD_INT 32
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 34
25902: PUSH
25903: LD_INT 89
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: LIST
25921: PPUSH
25922: CALL_OW 69
25926: ST_TO_ADDR
// if tmp then
25927: LD_VAR 0 4
25931: IFFALSE 26057
// begin for j in tmp do
25933: LD_ADDR_VAR 0 2
25937: PUSH
25938: LD_VAR 0 4
25942: PUSH
25943: FOR_IN
25944: IFFALSE 26055
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25946: LD_VAR 0 2
25950: PPUSH
25951: CALL_OW 262
25955: PUSH
25956: LD_INT 3
25958: EQUAL
25959: PUSH
25960: LD_VAR 0 2
25964: PPUSH
25965: CALL_OW 261
25969: PUSH
25970: LD_INT 20
25972: GREATER
25973: OR
25974: PUSH
25975: LD_VAR 0 2
25979: PPUSH
25980: CALL_OW 314
25984: NOT
25985: AND
25986: PUSH
25987: LD_VAR 0 2
25991: PPUSH
25992: CALL_OW 263
25996: PUSH
25997: LD_INT 1
25999: NONEQUAL
26000: PUSH
26001: LD_VAR 0 2
26005: PPUSH
26006: CALL_OW 311
26010: OR
26011: AND
26012: IFFALSE 26053
// begin ComCollect ( j , x , y ) ;
26014: LD_VAR 0 2
26018: PPUSH
26019: LD_VAR 0 6
26023: PPUSH
26024: LD_VAR 0 7
26028: PPUSH
26029: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26033: LD_VAR 0 2
26037: PPUSH
26038: LD_VAR 0 8
26042: PPUSH
26043: CALL_OW 172
// exit ;
26047: POP
26048: POP
26049: POP
26050: POP
26051: GO 26061
// end ;
26053: GO 25943
26055: POP
26056: POP
// end ; end ;
26057: GO 25432
26059: POP
26060: POP
// end ; end_of_file
26061: PPOPN 9
26063: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26064: LD_VAR 0 1
26068: PUSH
26069: LD_INT 200
26071: DOUBLE
26072: GREATEREQUAL
26073: IFFALSE 26081
26075: LD_INT 299
26077: DOUBLE
26078: LESSEQUAL
26079: IFTRUE 26083
26081: GO 26115
26083: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26084: LD_VAR 0 1
26088: PPUSH
26089: LD_VAR 0 2
26093: PPUSH
26094: LD_VAR 0 3
26098: PPUSH
26099: LD_VAR 0 4
26103: PPUSH
26104: LD_VAR 0 5
26108: PPUSH
26109: CALL 26603 0 5
26113: GO 26192
26115: LD_INT 300
26117: DOUBLE
26118: GREATEREQUAL
26119: IFFALSE 26127
26121: LD_INT 399
26123: DOUBLE
26124: LESSEQUAL
26125: IFTRUE 26129
26127: GO 26191
26129: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26130: LD_VAR 0 1
26134: PPUSH
26135: LD_VAR 0 2
26139: PPUSH
26140: LD_VAR 0 3
26144: PPUSH
26145: LD_VAR 0 4
26149: PPUSH
26150: LD_VAR 0 5
26154: PPUSH
26155: LD_VAR 0 6
26159: PPUSH
26160: LD_VAR 0 7
26164: PPUSH
26165: LD_VAR 0 8
26169: PPUSH
26170: LD_VAR 0 9
26174: PPUSH
26175: LD_VAR 0 10
26179: PPUSH
26180: LD_VAR 0 11
26184: PPUSH
26185: CALL 22765 0 11
26189: GO 26192
26191: POP
// end ;
26192: PPOPN 11
26194: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26195: LD_VAR 0 1
26199: PPUSH
26200: LD_VAR 0 2
26204: PPUSH
26205: LD_VAR 0 3
26209: PPUSH
26210: LD_VAR 0 4
26214: PPUSH
26215: LD_VAR 0 5
26219: PPUSH
26220: CALL 26339 0 5
// end ; end_of_file
26224: PPOPN 5
26226: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26227: LD_INT 0
26229: PPUSH
26230: PPUSH
26231: PPUSH
26232: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26233: LD_VAR 0 1
26237: PPUSH
26238: CALL_OW 264
26242: PUSH
26243: LD_INT 91
26245: EQUAL
26246: IFFALSE 26318
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26248: LD_INT 68
26250: PPUSH
26251: LD_VAR 0 1
26255: PPUSH
26256: CALL_OW 255
26260: PPUSH
26261: CALL_OW 321
26265: PUSH
26266: LD_INT 2
26268: EQUAL
26269: IFFALSE 26281
// eff := 70 else
26271: LD_ADDR_VAR 0 4
26275: PUSH
26276: LD_INT 70
26278: ST_TO_ADDR
26279: GO 26289
// eff := 30 ;
26281: LD_ADDR_VAR 0 4
26285: PUSH
26286: LD_INT 30
26288: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26289: LD_VAR 0 1
26293: PPUSH
26294: CALL_OW 250
26298: PPUSH
26299: LD_VAR 0 1
26303: PPUSH
26304: CALL_OW 251
26308: PPUSH
26309: LD_VAR 0 4
26313: PPUSH
26314: CALL_OW 495
// end ; end ;
26318: LD_VAR 0 2
26322: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26323: LD_INT 0
26325: PPUSH
// end ;
26326: LD_VAR 0 4
26330: RET
// export function SOS_Command ( cmd ) ; begin
26331: LD_INT 0
26333: PPUSH
// end ;
26334: LD_VAR 0 2
26338: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26339: LD_INT 0
26341: PPUSH
// end ;
26342: LD_VAR 0 6
26346: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26347: LD_INT 0
26349: PPUSH
26350: PPUSH
// if not vehicle or not factory then
26351: LD_VAR 0 1
26355: NOT
26356: PUSH
26357: LD_VAR 0 2
26361: NOT
26362: OR
26363: IFFALSE 26367
// exit ;
26365: GO 26598
// if factoryWaypoints >= factory then
26367: LD_EXP 102
26371: PUSH
26372: LD_VAR 0 2
26376: GREATEREQUAL
26377: IFFALSE 26598
// if factoryWaypoints [ factory ] then
26379: LD_EXP 102
26383: PUSH
26384: LD_VAR 0 2
26388: ARRAY
26389: IFFALSE 26598
// begin if GetControl ( vehicle ) = control_manual then
26391: LD_VAR 0 1
26395: PPUSH
26396: CALL_OW 263
26400: PUSH
26401: LD_INT 1
26403: EQUAL
26404: IFFALSE 26485
// begin driver := IsDrivenBy ( vehicle ) ;
26406: LD_ADDR_VAR 0 4
26410: PUSH
26411: LD_VAR 0 1
26415: PPUSH
26416: CALL_OW 311
26420: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26421: LD_VAR 0 4
26425: PPUSH
26426: LD_EXP 102
26430: PUSH
26431: LD_VAR 0 2
26435: ARRAY
26436: PUSH
26437: LD_INT 3
26439: ARRAY
26440: PPUSH
26441: LD_EXP 102
26445: PUSH
26446: LD_VAR 0 2
26450: ARRAY
26451: PUSH
26452: LD_INT 4
26454: ARRAY
26455: PPUSH
26456: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26460: LD_VAR 0 4
26464: PPUSH
26465: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26469: LD_VAR 0 4
26473: PPUSH
26474: LD_VAR 0 2
26478: PPUSH
26479: CALL_OW 180
// end else
26483: GO 26598
// if GetControl ( vehicle ) = control_remote then
26485: LD_VAR 0 1
26489: PPUSH
26490: CALL_OW 263
26494: PUSH
26495: LD_INT 2
26497: EQUAL
26498: IFFALSE 26559
// begin wait ( 0 0$2 ) ;
26500: LD_INT 70
26502: PPUSH
26503: CALL_OW 67
// if Connect ( vehicle ) then
26507: LD_VAR 0 1
26511: PPUSH
26512: CALL 38456 0 1
26516: IFFALSE 26557
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26518: LD_VAR 0 1
26522: PPUSH
26523: LD_EXP 102
26527: PUSH
26528: LD_VAR 0 2
26532: ARRAY
26533: PUSH
26534: LD_INT 3
26536: ARRAY
26537: PPUSH
26538: LD_EXP 102
26542: PUSH
26543: LD_VAR 0 2
26547: ARRAY
26548: PUSH
26549: LD_INT 4
26551: ARRAY
26552: PPUSH
26553: CALL_OW 171
// end else
26557: GO 26598
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26559: LD_VAR 0 1
26563: PPUSH
26564: LD_EXP 102
26568: PUSH
26569: LD_VAR 0 2
26573: ARRAY
26574: PUSH
26575: LD_INT 3
26577: ARRAY
26578: PPUSH
26579: LD_EXP 102
26583: PUSH
26584: LD_VAR 0 2
26588: ARRAY
26589: PUSH
26590: LD_INT 4
26592: ARRAY
26593: PPUSH
26594: CALL_OW 171
// end ; end ;
26598: LD_VAR 0 3
26602: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26603: LD_INT 0
26605: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26606: LD_VAR 0 1
26610: PUSH
26611: LD_INT 250
26613: EQUAL
26614: PUSH
26615: LD_VAR 0 2
26619: PPUSH
26620: CALL_OW 264
26624: PUSH
26625: LD_INT 81
26627: EQUAL
26628: AND
26629: IFFALSE 26650
// MinerPlaceMine ( unit , x , y ) ;
26631: LD_VAR 0 2
26635: PPUSH
26636: LD_VAR 0 4
26640: PPUSH
26641: LD_VAR 0 5
26645: PPUSH
26646: CALL 29035 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26650: LD_VAR 0 1
26654: PUSH
26655: LD_INT 251
26657: EQUAL
26658: PUSH
26659: LD_VAR 0 2
26663: PPUSH
26664: CALL_OW 264
26668: PUSH
26669: LD_INT 81
26671: EQUAL
26672: AND
26673: IFFALSE 26694
// MinerDetonateMine ( unit , x , y ) ;
26675: LD_VAR 0 2
26679: PPUSH
26680: LD_VAR 0 4
26684: PPUSH
26685: LD_VAR 0 5
26689: PPUSH
26690: CALL 29310 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26694: LD_VAR 0 1
26698: PUSH
26699: LD_INT 252
26701: EQUAL
26702: PUSH
26703: LD_VAR 0 2
26707: PPUSH
26708: CALL_OW 264
26712: PUSH
26713: LD_INT 81
26715: EQUAL
26716: AND
26717: IFFALSE 26738
// MinerCreateMinefield ( unit , x , y ) ;
26719: LD_VAR 0 2
26723: PPUSH
26724: LD_VAR 0 4
26728: PPUSH
26729: LD_VAR 0 5
26733: PPUSH
26734: CALL 29727 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26738: LD_VAR 0 1
26742: PUSH
26743: LD_INT 253
26745: EQUAL
26746: PUSH
26747: LD_VAR 0 2
26751: PPUSH
26752: CALL_OW 257
26756: PUSH
26757: LD_INT 5
26759: EQUAL
26760: AND
26761: IFFALSE 26782
// ComBinocular ( unit , x , y ) ;
26763: LD_VAR 0 2
26767: PPUSH
26768: LD_VAR 0 4
26772: PPUSH
26773: LD_VAR 0 5
26777: PPUSH
26778: CALL 30096 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26782: LD_VAR 0 1
26786: PUSH
26787: LD_INT 254
26789: EQUAL
26790: PUSH
26791: LD_VAR 0 2
26795: PPUSH
26796: CALL_OW 264
26800: PUSH
26801: LD_INT 99
26803: EQUAL
26804: AND
26805: PUSH
26806: LD_VAR 0 3
26810: PPUSH
26811: CALL_OW 263
26815: PUSH
26816: LD_INT 3
26818: EQUAL
26819: AND
26820: IFFALSE 26836
// HackDestroyVehicle ( unit , selectedUnit ) ;
26822: LD_VAR 0 2
26826: PPUSH
26827: LD_VAR 0 3
26831: PPUSH
26832: CALL 28399 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26836: LD_VAR 0 1
26840: PUSH
26841: LD_INT 255
26843: EQUAL
26844: PUSH
26845: LD_VAR 0 2
26849: PPUSH
26850: CALL_OW 264
26854: PUSH
26855: LD_INT 14
26857: PUSH
26858: LD_INT 53
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: IN
26865: AND
26866: PUSH
26867: LD_VAR 0 4
26871: PPUSH
26872: LD_VAR 0 5
26876: PPUSH
26877: CALL_OW 488
26881: AND
26882: IFFALSE 26906
// CutTreeXYR ( unit , x , y , 12 ) ;
26884: LD_VAR 0 2
26888: PPUSH
26889: LD_VAR 0 4
26893: PPUSH
26894: LD_VAR 0 5
26898: PPUSH
26899: LD_INT 12
26901: PPUSH
26902: CALL 26969 0 4
// if cmd = 256 then
26906: LD_VAR 0 1
26910: PUSH
26911: LD_INT 256
26913: EQUAL
26914: IFFALSE 26935
// SetFactoryWaypoint ( unit , x , y ) ;
26916: LD_VAR 0 2
26920: PPUSH
26921: LD_VAR 0 4
26925: PPUSH
26926: LD_VAR 0 5
26930: PPUSH
26931: CALL 24753 0 3
// if cmd = 257 then
26935: LD_VAR 0 1
26939: PUSH
26940: LD_INT 257
26942: EQUAL
26943: IFFALSE 26964
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26945: LD_VAR 0 2
26949: PPUSH
26950: LD_VAR 0 4
26954: PPUSH
26955: LD_VAR 0 5
26959: PPUSH
26960: CALL 25115 0 3
// end ;
26964: LD_VAR 0 6
26968: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26969: LD_INT 0
26971: PPUSH
26972: PPUSH
26973: PPUSH
26974: PPUSH
26975: PPUSH
26976: PPUSH
26977: PPUSH
26978: PPUSH
26979: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26980: LD_VAR 0 1
26984: NOT
26985: PUSH
26986: LD_VAR 0 2
26990: PPUSH
26991: LD_VAR 0 3
26995: PPUSH
26996: CALL_OW 488
27000: NOT
27001: OR
27002: PUSH
27003: LD_VAR 0 4
27007: NOT
27008: OR
27009: IFFALSE 27013
// exit ;
27011: GO 27353
// list := [ ] ;
27013: LD_ADDR_VAR 0 13
27017: PUSH
27018: EMPTY
27019: ST_TO_ADDR
// if x - r < 0 then
27020: LD_VAR 0 2
27024: PUSH
27025: LD_VAR 0 4
27029: MINUS
27030: PUSH
27031: LD_INT 0
27033: LESS
27034: IFFALSE 27046
// min_x := 0 else
27036: LD_ADDR_VAR 0 7
27040: PUSH
27041: LD_INT 0
27043: ST_TO_ADDR
27044: GO 27062
// min_x := x - r ;
27046: LD_ADDR_VAR 0 7
27050: PUSH
27051: LD_VAR 0 2
27055: PUSH
27056: LD_VAR 0 4
27060: MINUS
27061: ST_TO_ADDR
// if y - r < 0 then
27062: LD_VAR 0 3
27066: PUSH
27067: LD_VAR 0 4
27071: MINUS
27072: PUSH
27073: LD_INT 0
27075: LESS
27076: IFFALSE 27088
// min_y := 0 else
27078: LD_ADDR_VAR 0 8
27082: PUSH
27083: LD_INT 0
27085: ST_TO_ADDR
27086: GO 27104
// min_y := y - r ;
27088: LD_ADDR_VAR 0 8
27092: PUSH
27093: LD_VAR 0 3
27097: PUSH
27098: LD_VAR 0 4
27102: MINUS
27103: ST_TO_ADDR
// max_x := x + r ;
27104: LD_ADDR_VAR 0 9
27108: PUSH
27109: LD_VAR 0 2
27113: PUSH
27114: LD_VAR 0 4
27118: PLUS
27119: ST_TO_ADDR
// max_y := y + r ;
27120: LD_ADDR_VAR 0 10
27124: PUSH
27125: LD_VAR 0 3
27129: PUSH
27130: LD_VAR 0 4
27134: PLUS
27135: ST_TO_ADDR
// for _x = min_x to max_x do
27136: LD_ADDR_VAR 0 11
27140: PUSH
27141: DOUBLE
27142: LD_VAR 0 7
27146: DEC
27147: ST_TO_ADDR
27148: LD_VAR 0 9
27152: PUSH
27153: FOR_TO
27154: IFFALSE 27271
// for _y = min_y to max_y do
27156: LD_ADDR_VAR 0 12
27160: PUSH
27161: DOUBLE
27162: LD_VAR 0 8
27166: DEC
27167: ST_TO_ADDR
27168: LD_VAR 0 10
27172: PUSH
27173: FOR_TO
27174: IFFALSE 27267
// begin if not ValidHex ( _x , _y ) then
27176: LD_VAR 0 11
27180: PPUSH
27181: LD_VAR 0 12
27185: PPUSH
27186: CALL_OW 488
27190: NOT
27191: IFFALSE 27195
// continue ;
27193: GO 27173
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27195: LD_VAR 0 11
27199: PPUSH
27200: LD_VAR 0 12
27204: PPUSH
27205: CALL_OW 351
27209: PUSH
27210: LD_VAR 0 11
27214: PPUSH
27215: LD_VAR 0 12
27219: PPUSH
27220: CALL_OW 554
27224: AND
27225: IFFALSE 27265
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27227: LD_ADDR_VAR 0 13
27231: PUSH
27232: LD_VAR 0 13
27236: PPUSH
27237: LD_VAR 0 13
27241: PUSH
27242: LD_INT 1
27244: PLUS
27245: PPUSH
27246: LD_VAR 0 11
27250: PUSH
27251: LD_VAR 0 12
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PPUSH
27260: CALL_OW 2
27264: ST_TO_ADDR
// end ;
27265: GO 27173
27267: POP
27268: POP
27269: GO 27153
27271: POP
27272: POP
// if not list then
27273: LD_VAR 0 13
27277: NOT
27278: IFFALSE 27282
// exit ;
27280: GO 27353
// for i in list do
27282: LD_ADDR_VAR 0 6
27286: PUSH
27287: LD_VAR 0 13
27291: PUSH
27292: FOR_IN
27293: IFFALSE 27351
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27295: LD_VAR 0 1
27299: PPUSH
27300: LD_STRING M
27302: PUSH
27303: LD_VAR 0 6
27307: PUSH
27308: LD_INT 1
27310: ARRAY
27311: PUSH
27312: LD_VAR 0 6
27316: PUSH
27317: LD_INT 2
27319: ARRAY
27320: PUSH
27321: LD_INT 0
27323: PUSH
27324: LD_INT 0
27326: PUSH
27327: LD_INT 0
27329: PUSH
27330: LD_INT 0
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: PUSH
27342: EMPTY
27343: LIST
27344: PPUSH
27345: CALL_OW 447
27349: GO 27292
27351: POP
27352: POP
// end ;
27353: LD_VAR 0 5
27357: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27358: LD_EXP 105
27362: NOT
27363: IFFALSE 27413
27365: GO 27367
27367: DISABLE
// begin initHack := true ;
27368: LD_ADDR_EXP 105
27372: PUSH
27373: LD_INT 1
27375: ST_TO_ADDR
// hackTanks := [ ] ;
27376: LD_ADDR_EXP 106
27380: PUSH
27381: EMPTY
27382: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27383: LD_ADDR_EXP 107
27387: PUSH
27388: EMPTY
27389: ST_TO_ADDR
// hackLimit := 3 ;
27390: LD_ADDR_EXP 108
27394: PUSH
27395: LD_INT 3
27397: ST_TO_ADDR
// hackDist := 12 ;
27398: LD_ADDR_EXP 109
27402: PUSH
27403: LD_INT 12
27405: ST_TO_ADDR
// hackCounter := [ ] ;
27406: LD_ADDR_EXP 110
27410: PUSH
27411: EMPTY
27412: ST_TO_ADDR
// end ;
27413: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27414: LD_EXP 105
27418: PUSH
27419: LD_INT 34
27421: PUSH
27422: LD_INT 99
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PPUSH
27429: CALL_OW 69
27433: AND
27434: IFFALSE 27687
27436: GO 27438
27438: DISABLE
27439: LD_INT 0
27441: PPUSH
27442: PPUSH
// begin enable ;
27443: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27444: LD_ADDR_VAR 0 1
27448: PUSH
27449: LD_INT 34
27451: PUSH
27452: LD_INT 99
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PPUSH
27459: CALL_OW 69
27463: PUSH
27464: FOR_IN
27465: IFFALSE 27685
// begin if not i in hackTanks then
27467: LD_VAR 0 1
27471: PUSH
27472: LD_EXP 106
27476: IN
27477: NOT
27478: IFFALSE 27561
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27480: LD_ADDR_EXP 106
27484: PUSH
27485: LD_EXP 106
27489: PPUSH
27490: LD_EXP 106
27494: PUSH
27495: LD_INT 1
27497: PLUS
27498: PPUSH
27499: LD_VAR 0 1
27503: PPUSH
27504: CALL_OW 1
27508: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27509: LD_ADDR_EXP 107
27513: PUSH
27514: LD_EXP 107
27518: PPUSH
27519: LD_EXP 107
27523: PUSH
27524: LD_INT 1
27526: PLUS
27527: PPUSH
27528: EMPTY
27529: PPUSH
27530: CALL_OW 1
27534: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27535: LD_ADDR_EXP 110
27539: PUSH
27540: LD_EXP 110
27544: PPUSH
27545: LD_EXP 110
27549: PUSH
27550: LD_INT 1
27552: PLUS
27553: PPUSH
27554: EMPTY
27555: PPUSH
27556: CALL_OW 1
27560: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27561: LD_VAR 0 1
27565: PPUSH
27566: CALL_OW 302
27570: NOT
27571: IFFALSE 27584
// begin HackUnlinkAll ( i ) ;
27573: LD_VAR 0 1
27577: PPUSH
27578: CALL 27690 0 1
// continue ;
27582: GO 27464
// end ; HackCheckCapturedStatus ( i ) ;
27584: LD_VAR 0 1
27588: PPUSH
27589: CALL 28133 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27593: LD_ADDR_VAR 0 2
27597: PUSH
27598: LD_INT 81
27600: PUSH
27601: LD_VAR 0 1
27605: PPUSH
27606: CALL_OW 255
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 33
27617: PUSH
27618: LD_INT 3
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 91
27627: PUSH
27628: LD_VAR 0 1
27632: PUSH
27633: LD_EXP 109
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 50
27645: PUSH
27646: EMPTY
27647: LIST
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: PPUSH
27655: CALL_OW 69
27659: ST_TO_ADDR
// if not tmp then
27660: LD_VAR 0 2
27664: NOT
27665: IFFALSE 27669
// continue ;
27667: GO 27464
// HackLink ( i , tmp ) ;
27669: LD_VAR 0 1
27673: PPUSH
27674: LD_VAR 0 2
27678: PPUSH
27679: CALL 27826 0 2
// end ;
27683: GO 27464
27685: POP
27686: POP
// end ;
27687: PPOPN 2
27689: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27690: LD_INT 0
27692: PPUSH
27693: PPUSH
27694: PPUSH
// if not hack in hackTanks then
27695: LD_VAR 0 1
27699: PUSH
27700: LD_EXP 106
27704: IN
27705: NOT
27706: IFFALSE 27710
// exit ;
27708: GO 27821
// index := GetElementIndex ( hackTanks , hack ) ;
27710: LD_ADDR_VAR 0 4
27714: PUSH
27715: LD_EXP 106
27719: PPUSH
27720: LD_VAR 0 1
27724: PPUSH
27725: CALL 35263 0 2
27729: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27730: LD_EXP 107
27734: PUSH
27735: LD_VAR 0 4
27739: ARRAY
27740: IFFALSE 27821
// begin for i in hackTanksCaptured [ index ] do
27742: LD_ADDR_VAR 0 3
27746: PUSH
27747: LD_EXP 107
27751: PUSH
27752: LD_VAR 0 4
27756: ARRAY
27757: PUSH
27758: FOR_IN
27759: IFFALSE 27785
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27761: LD_VAR 0 3
27765: PUSH
27766: LD_INT 1
27768: ARRAY
27769: PPUSH
27770: LD_VAR 0 3
27774: PUSH
27775: LD_INT 2
27777: ARRAY
27778: PPUSH
27779: CALL_OW 235
27783: GO 27758
27785: POP
27786: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27787: LD_ADDR_EXP 107
27791: PUSH
27792: LD_EXP 107
27796: PPUSH
27797: LD_VAR 0 4
27801: PPUSH
27802: EMPTY
27803: PPUSH
27804: CALL_OW 1
27808: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27809: LD_VAR 0 1
27813: PPUSH
27814: LD_INT 0
27816: PPUSH
27817: CALL_OW 505
// end ; end ;
27821: LD_VAR 0 2
27825: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27826: LD_INT 0
27828: PPUSH
27829: PPUSH
27830: PPUSH
// if not hack in hackTanks or not vehicles then
27831: LD_VAR 0 1
27835: PUSH
27836: LD_EXP 106
27840: IN
27841: NOT
27842: PUSH
27843: LD_VAR 0 2
27847: NOT
27848: OR
27849: IFFALSE 27853
// exit ;
27851: GO 28128
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27853: LD_ADDR_VAR 0 2
27857: PUSH
27858: LD_VAR 0 1
27862: PPUSH
27863: LD_VAR 0 2
27867: PPUSH
27868: LD_INT 1
27870: PPUSH
27871: LD_INT 1
27873: PPUSH
27874: CALL 35913 0 4
27878: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27879: LD_ADDR_VAR 0 5
27883: PUSH
27884: LD_EXP 106
27888: PPUSH
27889: LD_VAR 0 1
27893: PPUSH
27894: CALL 35263 0 2
27898: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27899: LD_EXP 107
27903: PUSH
27904: LD_VAR 0 5
27908: ARRAY
27909: PUSH
27910: LD_EXP 108
27914: LESS
27915: IFFALSE 28104
// begin for i := 1 to vehicles do
27917: LD_ADDR_VAR 0 4
27921: PUSH
27922: DOUBLE
27923: LD_INT 1
27925: DEC
27926: ST_TO_ADDR
27927: LD_VAR 0 2
27931: PUSH
27932: FOR_TO
27933: IFFALSE 28102
// begin if hackTanksCaptured [ index ] = hackLimit then
27935: LD_EXP 107
27939: PUSH
27940: LD_VAR 0 5
27944: ARRAY
27945: PUSH
27946: LD_EXP 108
27950: EQUAL
27951: IFFALSE 27955
// break ;
27953: GO 28102
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27955: LD_ADDR_EXP 110
27959: PUSH
27960: LD_EXP 110
27964: PPUSH
27965: LD_VAR 0 5
27969: PPUSH
27970: LD_EXP 110
27974: PUSH
27975: LD_VAR 0 5
27979: ARRAY
27980: PUSH
27981: LD_INT 1
27983: PLUS
27984: PPUSH
27985: CALL_OW 1
27989: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27990: LD_ADDR_EXP 107
27994: PUSH
27995: LD_EXP 107
27999: PPUSH
28000: LD_VAR 0 5
28004: PUSH
28005: LD_EXP 107
28009: PUSH
28010: LD_VAR 0 5
28014: ARRAY
28015: PUSH
28016: LD_INT 1
28018: PLUS
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PPUSH
28024: LD_VAR 0 2
28028: PUSH
28029: LD_VAR 0 4
28033: ARRAY
28034: PUSH
28035: LD_VAR 0 2
28039: PUSH
28040: LD_VAR 0 4
28044: ARRAY
28045: PPUSH
28046: CALL_OW 255
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PPUSH
28055: CALL 35478 0 3
28059: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28060: LD_VAR 0 2
28064: PUSH
28065: LD_VAR 0 4
28069: ARRAY
28070: PPUSH
28071: LD_VAR 0 1
28075: PPUSH
28076: CALL_OW 255
28080: PPUSH
28081: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28085: LD_VAR 0 2
28089: PUSH
28090: LD_VAR 0 4
28094: ARRAY
28095: PPUSH
28096: CALL_OW 141
// end ;
28100: GO 27932
28102: POP
28103: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28104: LD_VAR 0 1
28108: PPUSH
28109: LD_EXP 107
28113: PUSH
28114: LD_VAR 0 5
28118: ARRAY
28119: PUSH
28120: LD_INT 0
28122: PLUS
28123: PPUSH
28124: CALL_OW 505
// end ;
28128: LD_VAR 0 3
28132: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28133: LD_INT 0
28135: PPUSH
28136: PPUSH
28137: PPUSH
28138: PPUSH
// if not hack in hackTanks then
28139: LD_VAR 0 1
28143: PUSH
28144: LD_EXP 106
28148: IN
28149: NOT
28150: IFFALSE 28154
// exit ;
28152: GO 28394
// index := GetElementIndex ( hackTanks , hack ) ;
28154: LD_ADDR_VAR 0 4
28158: PUSH
28159: LD_EXP 106
28163: PPUSH
28164: LD_VAR 0 1
28168: PPUSH
28169: CALL 35263 0 2
28173: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28174: LD_ADDR_VAR 0 3
28178: PUSH
28179: DOUBLE
28180: LD_EXP 107
28184: PUSH
28185: LD_VAR 0 4
28189: ARRAY
28190: INC
28191: ST_TO_ADDR
28192: LD_INT 1
28194: PUSH
28195: FOR_DOWNTO
28196: IFFALSE 28368
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28198: LD_ADDR_VAR 0 5
28202: PUSH
28203: LD_EXP 107
28207: PUSH
28208: LD_VAR 0 4
28212: ARRAY
28213: PUSH
28214: LD_VAR 0 3
28218: ARRAY
28219: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28220: LD_VAR 0 5
28224: PUSH
28225: LD_INT 1
28227: ARRAY
28228: PPUSH
28229: CALL_OW 302
28233: NOT
28234: PUSH
28235: LD_VAR 0 5
28239: PUSH
28240: LD_INT 1
28242: ARRAY
28243: PPUSH
28244: CALL_OW 255
28248: PUSH
28249: LD_VAR 0 1
28253: PPUSH
28254: CALL_OW 255
28258: NONEQUAL
28259: OR
28260: IFFALSE 28366
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28262: LD_VAR 0 5
28266: PUSH
28267: LD_INT 1
28269: ARRAY
28270: PPUSH
28271: CALL_OW 305
28275: PUSH
28276: LD_VAR 0 5
28280: PUSH
28281: LD_INT 1
28283: ARRAY
28284: PPUSH
28285: CALL_OW 255
28289: PUSH
28290: LD_VAR 0 1
28294: PPUSH
28295: CALL_OW 255
28299: EQUAL
28300: AND
28301: IFFALSE 28325
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28303: LD_VAR 0 5
28307: PUSH
28308: LD_INT 1
28310: ARRAY
28311: PPUSH
28312: LD_VAR 0 5
28316: PUSH
28317: LD_INT 2
28319: ARRAY
28320: PPUSH
28321: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28325: LD_ADDR_EXP 107
28329: PUSH
28330: LD_EXP 107
28334: PPUSH
28335: LD_VAR 0 4
28339: PPUSH
28340: LD_EXP 107
28344: PUSH
28345: LD_VAR 0 4
28349: ARRAY
28350: PPUSH
28351: LD_VAR 0 3
28355: PPUSH
28356: CALL_OW 3
28360: PPUSH
28361: CALL_OW 1
28365: ST_TO_ADDR
// end ; end ;
28366: GO 28195
28368: POP
28369: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28370: LD_VAR 0 1
28374: PPUSH
28375: LD_EXP 107
28379: PUSH
28380: LD_VAR 0 4
28384: ARRAY
28385: PUSH
28386: LD_INT 0
28388: PLUS
28389: PPUSH
28390: CALL_OW 505
// end ;
28394: LD_VAR 0 2
28398: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28399: LD_INT 0
28401: PPUSH
28402: PPUSH
28403: PPUSH
28404: PPUSH
// if not hack in hackTanks then
28405: LD_VAR 0 1
28409: PUSH
28410: LD_EXP 106
28414: IN
28415: NOT
28416: IFFALSE 28420
// exit ;
28418: GO 28505
// index := GetElementIndex ( hackTanks , hack ) ;
28420: LD_ADDR_VAR 0 5
28424: PUSH
28425: LD_EXP 106
28429: PPUSH
28430: LD_VAR 0 1
28434: PPUSH
28435: CALL 35263 0 2
28439: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28440: LD_ADDR_VAR 0 4
28444: PUSH
28445: DOUBLE
28446: LD_INT 1
28448: DEC
28449: ST_TO_ADDR
28450: LD_EXP 107
28454: PUSH
28455: LD_VAR 0 5
28459: ARRAY
28460: PUSH
28461: FOR_TO
28462: IFFALSE 28503
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28464: LD_EXP 107
28468: PUSH
28469: LD_VAR 0 5
28473: ARRAY
28474: PUSH
28475: LD_VAR 0 4
28479: ARRAY
28480: PUSH
28481: LD_INT 1
28483: ARRAY
28484: PUSH
28485: LD_VAR 0 2
28489: EQUAL
28490: IFFALSE 28501
// KillUnit ( vehicle ) ;
28492: LD_VAR 0 2
28496: PPUSH
28497: CALL_OW 66
28501: GO 28461
28503: POP
28504: POP
// end ;
28505: LD_VAR 0 3
28509: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28510: LD_EXP 111
28514: NOT
28515: IFFALSE 28550
28517: GO 28519
28519: DISABLE
// begin initMiner := true ;
28520: LD_ADDR_EXP 111
28524: PUSH
28525: LD_INT 1
28527: ST_TO_ADDR
// minersList := [ ] ;
28528: LD_ADDR_EXP 112
28532: PUSH
28533: EMPTY
28534: ST_TO_ADDR
// minerMinesList := [ ] ;
28535: LD_ADDR_EXP 113
28539: PUSH
28540: EMPTY
28541: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28542: LD_ADDR_EXP 114
28546: PUSH
28547: LD_INT 5
28549: ST_TO_ADDR
// end ;
28550: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28551: LD_EXP 111
28555: PUSH
28556: LD_INT 34
28558: PUSH
28559: LD_INT 81
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PPUSH
28566: CALL_OW 69
28570: AND
28571: IFFALSE 29032
28573: GO 28575
28575: DISABLE
28576: LD_INT 0
28578: PPUSH
28579: PPUSH
28580: PPUSH
28581: PPUSH
// begin enable ;
28582: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28583: LD_ADDR_VAR 0 1
28587: PUSH
28588: LD_INT 34
28590: PUSH
28591: LD_INT 81
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PPUSH
28598: CALL_OW 69
28602: PUSH
28603: FOR_IN
28604: IFFALSE 28676
// begin if not i in minersList then
28606: LD_VAR 0 1
28610: PUSH
28611: LD_EXP 112
28615: IN
28616: NOT
28617: IFFALSE 28674
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28619: LD_ADDR_EXP 112
28623: PUSH
28624: LD_EXP 112
28628: PPUSH
28629: LD_EXP 112
28633: PUSH
28634: LD_INT 1
28636: PLUS
28637: PPUSH
28638: LD_VAR 0 1
28642: PPUSH
28643: CALL_OW 1
28647: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28648: LD_ADDR_EXP 113
28652: PUSH
28653: LD_EXP 113
28657: PPUSH
28658: LD_EXP 113
28662: PUSH
28663: LD_INT 1
28665: PLUS
28666: PPUSH
28667: EMPTY
28668: PPUSH
28669: CALL_OW 1
28673: ST_TO_ADDR
// end end ;
28674: GO 28603
28676: POP
28677: POP
// for i := minerMinesList downto 1 do
28678: LD_ADDR_VAR 0 1
28682: PUSH
28683: DOUBLE
28684: LD_EXP 113
28688: INC
28689: ST_TO_ADDR
28690: LD_INT 1
28692: PUSH
28693: FOR_DOWNTO
28694: IFFALSE 29030
// begin if IsLive ( minersList [ i ] ) then
28696: LD_EXP 112
28700: PUSH
28701: LD_VAR 0 1
28705: ARRAY
28706: PPUSH
28707: CALL_OW 300
28711: IFFALSE 28739
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28713: LD_EXP 112
28717: PUSH
28718: LD_VAR 0 1
28722: ARRAY
28723: PPUSH
28724: LD_EXP 113
28728: PUSH
28729: LD_VAR 0 1
28733: ARRAY
28734: PPUSH
28735: CALL_OW 505
// if not minerMinesList [ i ] then
28739: LD_EXP 113
28743: PUSH
28744: LD_VAR 0 1
28748: ARRAY
28749: NOT
28750: IFFALSE 28754
// continue ;
28752: GO 28693
// for j := minerMinesList [ i ] downto 1 do
28754: LD_ADDR_VAR 0 2
28758: PUSH
28759: DOUBLE
28760: LD_EXP 113
28764: PUSH
28765: LD_VAR 0 1
28769: ARRAY
28770: INC
28771: ST_TO_ADDR
28772: LD_INT 1
28774: PUSH
28775: FOR_DOWNTO
28776: IFFALSE 29026
// begin side := GetSide ( minersList [ i ] ) ;
28778: LD_ADDR_VAR 0 3
28782: PUSH
28783: LD_EXP 112
28787: PUSH
28788: LD_VAR 0 1
28792: ARRAY
28793: PPUSH
28794: CALL_OW 255
28798: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28799: LD_ADDR_VAR 0 4
28803: PUSH
28804: LD_EXP 113
28808: PUSH
28809: LD_VAR 0 1
28813: ARRAY
28814: PUSH
28815: LD_VAR 0 2
28819: ARRAY
28820: PUSH
28821: LD_INT 1
28823: ARRAY
28824: PPUSH
28825: LD_EXP 113
28829: PUSH
28830: LD_VAR 0 1
28834: ARRAY
28835: PUSH
28836: LD_VAR 0 2
28840: ARRAY
28841: PUSH
28842: LD_INT 2
28844: ARRAY
28845: PPUSH
28846: CALL_OW 428
28850: ST_TO_ADDR
// if not tmp then
28851: LD_VAR 0 4
28855: NOT
28856: IFFALSE 28860
// continue ;
28858: GO 28775
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28860: LD_VAR 0 4
28864: PUSH
28865: LD_INT 81
28867: PUSH
28868: LD_VAR 0 3
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PPUSH
28877: CALL_OW 69
28881: IN
28882: PUSH
28883: LD_EXP 113
28887: PUSH
28888: LD_VAR 0 1
28892: ARRAY
28893: PUSH
28894: LD_VAR 0 2
28898: ARRAY
28899: PUSH
28900: LD_INT 1
28902: ARRAY
28903: PPUSH
28904: LD_EXP 113
28908: PUSH
28909: LD_VAR 0 1
28913: ARRAY
28914: PUSH
28915: LD_VAR 0 2
28919: ARRAY
28920: PUSH
28921: LD_INT 2
28923: ARRAY
28924: PPUSH
28925: CALL_OW 458
28929: AND
28930: IFFALSE 29024
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28932: LD_EXP 113
28936: PUSH
28937: LD_VAR 0 1
28941: ARRAY
28942: PUSH
28943: LD_VAR 0 2
28947: ARRAY
28948: PUSH
28949: LD_INT 1
28951: ARRAY
28952: PPUSH
28953: LD_EXP 113
28957: PUSH
28958: LD_VAR 0 1
28962: ARRAY
28963: PUSH
28964: LD_VAR 0 2
28968: ARRAY
28969: PUSH
28970: LD_INT 2
28972: ARRAY
28973: PPUSH
28974: LD_VAR 0 3
28978: PPUSH
28979: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28983: LD_ADDR_EXP 113
28987: PUSH
28988: LD_EXP 113
28992: PPUSH
28993: LD_VAR 0 1
28997: PPUSH
28998: LD_EXP 113
29002: PUSH
29003: LD_VAR 0 1
29007: ARRAY
29008: PPUSH
29009: LD_VAR 0 2
29013: PPUSH
29014: CALL_OW 3
29018: PPUSH
29019: CALL_OW 1
29023: ST_TO_ADDR
// end ; end ;
29024: GO 28775
29026: POP
29027: POP
// end ;
29028: GO 28693
29030: POP
29031: POP
// end ;
29032: PPOPN 4
29034: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29035: LD_INT 0
29037: PPUSH
29038: PPUSH
// result := false ;
29039: LD_ADDR_VAR 0 4
29043: PUSH
29044: LD_INT 0
29046: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29047: LD_VAR 0 1
29051: PPUSH
29052: CALL_OW 264
29056: PUSH
29057: LD_INT 81
29059: EQUAL
29060: NOT
29061: IFFALSE 29065
// exit ;
29063: GO 29305
// index := GetElementIndex ( minersList , unit ) ;
29065: LD_ADDR_VAR 0 5
29069: PUSH
29070: LD_EXP 112
29074: PPUSH
29075: LD_VAR 0 1
29079: PPUSH
29080: CALL 35263 0 2
29084: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29085: LD_EXP 113
29089: PUSH
29090: LD_VAR 0 5
29094: ARRAY
29095: PUSH
29096: LD_EXP 114
29100: GREATEREQUAL
29101: IFFALSE 29105
// exit ;
29103: GO 29305
// ComMoveXY ( unit , x , y ) ;
29105: LD_VAR 0 1
29109: PPUSH
29110: LD_VAR 0 2
29114: PPUSH
29115: LD_VAR 0 3
29119: PPUSH
29120: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29124: LD_INT 35
29126: PPUSH
29127: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29131: LD_VAR 0 1
29135: PPUSH
29136: LD_VAR 0 2
29140: PPUSH
29141: LD_VAR 0 3
29145: PPUSH
29146: CALL 66647 0 3
29150: NOT
29151: PUSH
29152: LD_VAR 0 1
29156: PPUSH
29157: CALL_OW 314
29161: AND
29162: IFFALSE 29166
// exit ;
29164: GO 29305
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29166: LD_VAR 0 2
29170: PPUSH
29171: LD_VAR 0 3
29175: PPUSH
29176: CALL_OW 428
29180: PUSH
29181: LD_VAR 0 1
29185: EQUAL
29186: PUSH
29187: LD_VAR 0 1
29191: PPUSH
29192: CALL_OW 314
29196: NOT
29197: AND
29198: IFFALSE 29124
// PlaySoundXY ( x , y , PlantMine ) ;
29200: LD_VAR 0 2
29204: PPUSH
29205: LD_VAR 0 3
29209: PPUSH
29210: LD_STRING PlantMine
29212: PPUSH
29213: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29217: LD_VAR 0 2
29221: PPUSH
29222: LD_VAR 0 3
29226: PPUSH
29227: LD_VAR 0 1
29231: PPUSH
29232: CALL_OW 255
29236: PPUSH
29237: LD_INT 0
29239: PPUSH
29240: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29244: LD_ADDR_EXP 113
29248: PUSH
29249: LD_EXP 113
29253: PPUSH
29254: LD_VAR 0 5
29258: PUSH
29259: LD_EXP 113
29263: PUSH
29264: LD_VAR 0 5
29268: ARRAY
29269: PUSH
29270: LD_INT 1
29272: PLUS
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PPUSH
29278: LD_VAR 0 2
29282: PUSH
29283: LD_VAR 0 3
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PPUSH
29292: CALL 35478 0 3
29296: ST_TO_ADDR
// result := true ;
29297: LD_ADDR_VAR 0 4
29301: PUSH
29302: LD_INT 1
29304: ST_TO_ADDR
// end ;
29305: LD_VAR 0 4
29309: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29310: LD_INT 0
29312: PPUSH
29313: PPUSH
29314: PPUSH
// if not unit in minersList then
29315: LD_VAR 0 1
29319: PUSH
29320: LD_EXP 112
29324: IN
29325: NOT
29326: IFFALSE 29330
// exit ;
29328: GO 29722
// index := GetElementIndex ( minersList , unit ) ;
29330: LD_ADDR_VAR 0 6
29334: PUSH
29335: LD_EXP 112
29339: PPUSH
29340: LD_VAR 0 1
29344: PPUSH
29345: CALL 35263 0 2
29349: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29350: LD_ADDR_VAR 0 5
29354: PUSH
29355: DOUBLE
29356: LD_EXP 113
29360: PUSH
29361: LD_VAR 0 6
29365: ARRAY
29366: INC
29367: ST_TO_ADDR
29368: LD_INT 1
29370: PUSH
29371: FOR_DOWNTO
29372: IFFALSE 29533
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29374: LD_EXP 113
29378: PUSH
29379: LD_VAR 0 6
29383: ARRAY
29384: PUSH
29385: LD_VAR 0 5
29389: ARRAY
29390: PUSH
29391: LD_INT 1
29393: ARRAY
29394: PUSH
29395: LD_VAR 0 2
29399: EQUAL
29400: PUSH
29401: LD_EXP 113
29405: PUSH
29406: LD_VAR 0 6
29410: ARRAY
29411: PUSH
29412: LD_VAR 0 5
29416: ARRAY
29417: PUSH
29418: LD_INT 2
29420: ARRAY
29421: PUSH
29422: LD_VAR 0 3
29426: EQUAL
29427: AND
29428: IFFALSE 29531
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29430: LD_EXP 113
29434: PUSH
29435: LD_VAR 0 6
29439: ARRAY
29440: PUSH
29441: LD_VAR 0 5
29445: ARRAY
29446: PUSH
29447: LD_INT 1
29449: ARRAY
29450: PPUSH
29451: LD_EXP 113
29455: PUSH
29456: LD_VAR 0 6
29460: ARRAY
29461: PUSH
29462: LD_VAR 0 5
29466: ARRAY
29467: PUSH
29468: LD_INT 2
29470: ARRAY
29471: PPUSH
29472: LD_VAR 0 1
29476: PPUSH
29477: CALL_OW 255
29481: PPUSH
29482: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29486: LD_ADDR_EXP 113
29490: PUSH
29491: LD_EXP 113
29495: PPUSH
29496: LD_VAR 0 6
29500: PPUSH
29501: LD_EXP 113
29505: PUSH
29506: LD_VAR 0 6
29510: ARRAY
29511: PPUSH
29512: LD_VAR 0 5
29516: PPUSH
29517: CALL_OW 3
29521: PPUSH
29522: CALL_OW 1
29526: ST_TO_ADDR
// exit ;
29527: POP
29528: POP
29529: GO 29722
// end ; end ;
29531: GO 29371
29533: POP
29534: POP
// for i := minerMinesList [ index ] downto 1 do
29535: LD_ADDR_VAR 0 5
29539: PUSH
29540: DOUBLE
29541: LD_EXP 113
29545: PUSH
29546: LD_VAR 0 6
29550: ARRAY
29551: INC
29552: ST_TO_ADDR
29553: LD_INT 1
29555: PUSH
29556: FOR_DOWNTO
29557: IFFALSE 29720
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29559: LD_EXP 113
29563: PUSH
29564: LD_VAR 0 6
29568: ARRAY
29569: PUSH
29570: LD_VAR 0 5
29574: ARRAY
29575: PUSH
29576: LD_INT 1
29578: ARRAY
29579: PPUSH
29580: LD_EXP 113
29584: PUSH
29585: LD_VAR 0 6
29589: ARRAY
29590: PUSH
29591: LD_VAR 0 5
29595: ARRAY
29596: PUSH
29597: LD_INT 2
29599: ARRAY
29600: PPUSH
29601: LD_VAR 0 2
29605: PPUSH
29606: LD_VAR 0 3
29610: PPUSH
29611: CALL_OW 298
29615: PUSH
29616: LD_INT 6
29618: LESS
29619: IFFALSE 29718
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29621: LD_EXP 113
29625: PUSH
29626: LD_VAR 0 6
29630: ARRAY
29631: PUSH
29632: LD_VAR 0 5
29636: ARRAY
29637: PUSH
29638: LD_INT 1
29640: ARRAY
29641: PPUSH
29642: LD_EXP 113
29646: PUSH
29647: LD_VAR 0 6
29651: ARRAY
29652: PUSH
29653: LD_VAR 0 5
29657: ARRAY
29658: PUSH
29659: LD_INT 2
29661: ARRAY
29662: PPUSH
29663: LD_VAR 0 1
29667: PPUSH
29668: CALL_OW 255
29672: PPUSH
29673: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29677: LD_ADDR_EXP 113
29681: PUSH
29682: LD_EXP 113
29686: PPUSH
29687: LD_VAR 0 6
29691: PPUSH
29692: LD_EXP 113
29696: PUSH
29697: LD_VAR 0 6
29701: ARRAY
29702: PPUSH
29703: LD_VAR 0 5
29707: PPUSH
29708: CALL_OW 3
29712: PPUSH
29713: CALL_OW 1
29717: ST_TO_ADDR
// end ; end ;
29718: GO 29556
29720: POP
29721: POP
// end ;
29722: LD_VAR 0 4
29726: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29727: LD_INT 0
29729: PPUSH
29730: PPUSH
29731: PPUSH
29732: PPUSH
29733: PPUSH
29734: PPUSH
29735: PPUSH
29736: PPUSH
29737: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29738: LD_VAR 0 1
29742: PPUSH
29743: CALL_OW 264
29747: PUSH
29748: LD_INT 81
29750: EQUAL
29751: NOT
29752: PUSH
29753: LD_VAR 0 1
29757: PUSH
29758: LD_EXP 112
29762: IN
29763: NOT
29764: OR
29765: IFFALSE 29769
// exit ;
29767: GO 30091
// index := GetElementIndex ( minersList , unit ) ;
29769: LD_ADDR_VAR 0 6
29773: PUSH
29774: LD_EXP 112
29778: PPUSH
29779: LD_VAR 0 1
29783: PPUSH
29784: CALL 35263 0 2
29788: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29789: LD_ADDR_VAR 0 8
29793: PUSH
29794: LD_EXP 114
29798: PUSH
29799: LD_EXP 113
29803: PUSH
29804: LD_VAR 0 6
29808: ARRAY
29809: MINUS
29810: ST_TO_ADDR
// if not minesFreeAmount then
29811: LD_VAR 0 8
29815: NOT
29816: IFFALSE 29820
// exit ;
29818: GO 30091
// tmp := [ ] ;
29820: LD_ADDR_VAR 0 7
29824: PUSH
29825: EMPTY
29826: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29827: LD_ADDR_VAR 0 5
29831: PUSH
29832: DOUBLE
29833: LD_INT 1
29835: DEC
29836: ST_TO_ADDR
29837: LD_VAR 0 8
29841: PUSH
29842: FOR_TO
29843: IFFALSE 30038
// begin _d := rand ( 0 , 5 ) ;
29845: LD_ADDR_VAR 0 11
29849: PUSH
29850: LD_INT 0
29852: PPUSH
29853: LD_INT 5
29855: PPUSH
29856: CALL_OW 12
29860: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29861: LD_ADDR_VAR 0 12
29865: PUSH
29866: LD_INT 2
29868: PPUSH
29869: LD_INT 6
29871: PPUSH
29872: CALL_OW 12
29876: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29877: LD_ADDR_VAR 0 9
29881: PUSH
29882: LD_VAR 0 2
29886: PPUSH
29887: LD_VAR 0 11
29891: PPUSH
29892: LD_VAR 0 12
29896: PPUSH
29897: CALL_OW 272
29901: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29902: LD_ADDR_VAR 0 10
29906: PUSH
29907: LD_VAR 0 3
29911: PPUSH
29912: LD_VAR 0 11
29916: PPUSH
29917: LD_VAR 0 12
29921: PPUSH
29922: CALL_OW 273
29926: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29927: LD_VAR 0 9
29931: PPUSH
29932: LD_VAR 0 10
29936: PPUSH
29937: CALL_OW 488
29941: PUSH
29942: LD_VAR 0 9
29946: PUSH
29947: LD_VAR 0 10
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_VAR 0 7
29960: IN
29961: NOT
29962: AND
29963: PUSH
29964: LD_VAR 0 9
29968: PPUSH
29969: LD_VAR 0 10
29973: PPUSH
29974: CALL_OW 458
29978: NOT
29979: AND
29980: IFFALSE 30022
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29982: LD_ADDR_VAR 0 7
29986: PUSH
29987: LD_VAR 0 7
29991: PPUSH
29992: LD_VAR 0 7
29996: PUSH
29997: LD_INT 1
29999: PLUS
30000: PPUSH
30001: LD_VAR 0 9
30005: PUSH
30006: LD_VAR 0 10
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PPUSH
30015: CALL_OW 1
30019: ST_TO_ADDR
30020: GO 30036
// i := i - 1 ;
30022: LD_ADDR_VAR 0 5
30026: PUSH
30027: LD_VAR 0 5
30031: PUSH
30032: LD_INT 1
30034: MINUS
30035: ST_TO_ADDR
// end ;
30036: GO 29842
30038: POP
30039: POP
// for i in tmp do
30040: LD_ADDR_VAR 0 5
30044: PUSH
30045: LD_VAR 0 7
30049: PUSH
30050: FOR_IN
30051: IFFALSE 30089
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30053: LD_VAR 0 1
30057: PPUSH
30058: LD_VAR 0 5
30062: PUSH
30063: LD_INT 1
30065: ARRAY
30066: PPUSH
30067: LD_VAR 0 5
30071: PUSH
30072: LD_INT 2
30074: ARRAY
30075: PPUSH
30076: CALL 29035 0 3
30080: NOT
30081: IFFALSE 30087
// exit ;
30083: POP
30084: POP
30085: GO 30091
30087: GO 30050
30089: POP
30090: POP
// end ;
30091: LD_VAR 0 4
30095: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30096: LD_INT 0
30098: PPUSH
30099: PPUSH
30100: PPUSH
30101: PPUSH
30102: PPUSH
30103: PPUSH
30104: PPUSH
// if not GetClass ( unit ) = class_sniper then
30105: LD_VAR 0 1
30109: PPUSH
30110: CALL_OW 257
30114: PUSH
30115: LD_INT 5
30117: EQUAL
30118: NOT
30119: IFFALSE 30123
// exit ;
30121: GO 30511
// dist := 8 ;
30123: LD_ADDR_VAR 0 5
30127: PUSH
30128: LD_INT 8
30130: ST_TO_ADDR
// viewRange := 12 ;
30131: LD_ADDR_VAR 0 7
30135: PUSH
30136: LD_INT 12
30138: ST_TO_ADDR
// side := GetSide ( unit ) ;
30139: LD_ADDR_VAR 0 6
30143: PUSH
30144: LD_VAR 0 1
30148: PPUSH
30149: CALL_OW 255
30153: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30154: LD_INT 61
30156: PPUSH
30157: LD_VAR 0 6
30161: PPUSH
30162: CALL_OW 321
30166: PUSH
30167: LD_INT 2
30169: EQUAL
30170: IFFALSE 30180
// viewRange := 16 ;
30172: LD_ADDR_VAR 0 7
30176: PUSH
30177: LD_INT 16
30179: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30180: LD_VAR 0 1
30184: PPUSH
30185: LD_VAR 0 2
30189: PPUSH
30190: LD_VAR 0 3
30194: PPUSH
30195: CALL_OW 297
30199: PUSH
30200: LD_VAR 0 5
30204: GREATER
30205: IFFALSE 30284
// begin ComMoveXY ( unit , x , y ) ;
30207: LD_VAR 0 1
30211: PPUSH
30212: LD_VAR 0 2
30216: PPUSH
30217: LD_VAR 0 3
30221: PPUSH
30222: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30226: LD_INT 35
30228: PPUSH
30229: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30233: LD_VAR 0 1
30237: PPUSH
30238: LD_VAR 0 2
30242: PPUSH
30243: LD_VAR 0 3
30247: PPUSH
30248: CALL 66647 0 3
30252: NOT
30253: IFFALSE 30257
// exit ;
30255: GO 30511
// until GetDistUnitXY ( unit , x , y ) < dist ;
30257: LD_VAR 0 1
30261: PPUSH
30262: LD_VAR 0 2
30266: PPUSH
30267: LD_VAR 0 3
30271: PPUSH
30272: CALL_OW 297
30276: PUSH
30277: LD_VAR 0 5
30281: LESS
30282: IFFALSE 30226
// end ; ComTurnXY ( unit , x , y ) ;
30284: LD_VAR 0 1
30288: PPUSH
30289: LD_VAR 0 2
30293: PPUSH
30294: LD_VAR 0 3
30298: PPUSH
30299: CALL_OW 118
// wait ( 5 ) ;
30303: LD_INT 5
30305: PPUSH
30306: CALL_OW 67
// _d := GetDir ( unit ) ;
30310: LD_ADDR_VAR 0 10
30314: PUSH
30315: LD_VAR 0 1
30319: PPUSH
30320: CALL_OW 254
30324: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30325: LD_ADDR_VAR 0 8
30329: PUSH
30330: LD_VAR 0 1
30334: PPUSH
30335: CALL_OW 250
30339: PPUSH
30340: LD_VAR 0 10
30344: PPUSH
30345: LD_VAR 0 5
30349: PPUSH
30350: CALL_OW 272
30354: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30355: LD_ADDR_VAR 0 9
30359: PUSH
30360: LD_VAR 0 1
30364: PPUSH
30365: CALL_OW 251
30369: PPUSH
30370: LD_VAR 0 10
30374: PPUSH
30375: LD_VAR 0 5
30379: PPUSH
30380: CALL_OW 273
30384: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30385: LD_VAR 0 8
30389: PPUSH
30390: LD_VAR 0 9
30394: PPUSH
30395: CALL_OW 488
30399: NOT
30400: IFFALSE 30404
// exit ;
30402: GO 30511
// ComAnimCustom ( unit , 1 ) ;
30404: LD_VAR 0 1
30408: PPUSH
30409: LD_INT 1
30411: PPUSH
30412: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30416: LD_VAR 0 8
30420: PPUSH
30421: LD_VAR 0 9
30425: PPUSH
30426: LD_VAR 0 6
30430: PPUSH
30431: LD_VAR 0 7
30435: PPUSH
30436: CALL_OW 330
// repeat wait ( 1 ) ;
30440: LD_INT 1
30442: PPUSH
30443: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30447: LD_VAR 0 1
30451: PPUSH
30452: CALL_OW 316
30456: PUSH
30457: LD_VAR 0 1
30461: PPUSH
30462: CALL_OW 314
30466: OR
30467: PUSH
30468: LD_VAR 0 1
30472: PPUSH
30473: CALL_OW 302
30477: NOT
30478: OR
30479: PUSH
30480: LD_VAR 0 1
30484: PPUSH
30485: CALL_OW 301
30489: OR
30490: IFFALSE 30440
// RemoveSeeing ( _x , _y , side ) ;
30492: LD_VAR 0 8
30496: PPUSH
30497: LD_VAR 0 9
30501: PPUSH
30502: LD_VAR 0 6
30506: PPUSH
30507: CALL_OW 331
// end ; end_of_file
30511: LD_VAR 0 4
30515: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30516: LD_INT 0
30518: PPUSH
30519: PPUSH
// if exist_mode then
30520: LD_VAR 0 2
30524: IFFALSE 30549
// unit := CreateCharacter ( prefix & ident ) else
30526: LD_ADDR_VAR 0 5
30530: PUSH
30531: LD_VAR 0 3
30535: PUSH
30536: LD_VAR 0 1
30540: STR
30541: PPUSH
30542: CALL_OW 34
30546: ST_TO_ADDR
30547: GO 30564
// unit := NewCharacter ( ident ) ;
30549: LD_ADDR_VAR 0 5
30553: PUSH
30554: LD_VAR 0 1
30558: PPUSH
30559: CALL_OW 25
30563: ST_TO_ADDR
// result := unit ;
30564: LD_ADDR_VAR 0 4
30568: PUSH
30569: LD_VAR 0 5
30573: ST_TO_ADDR
// end ;
30574: LD_VAR 0 4
30578: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30579: LD_INT 0
30581: PPUSH
30582: PPUSH
// if not side or not nation then
30583: LD_VAR 0 1
30587: NOT
30588: PUSH
30589: LD_VAR 0 2
30593: NOT
30594: OR
30595: IFFALSE 30599
// exit ;
30597: GO 31367
// case nation of nation_american :
30599: LD_VAR 0 2
30603: PUSH
30604: LD_INT 1
30606: DOUBLE
30607: EQUAL
30608: IFTRUE 30612
30610: GO 30826
30612: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30613: LD_ADDR_VAR 0 4
30617: PUSH
30618: LD_INT 35
30620: PUSH
30621: LD_INT 45
30623: PUSH
30624: LD_INT 46
30626: PUSH
30627: LD_INT 47
30629: PUSH
30630: LD_INT 82
30632: PUSH
30633: LD_INT 83
30635: PUSH
30636: LD_INT 84
30638: PUSH
30639: LD_INT 85
30641: PUSH
30642: LD_INT 86
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: LD_INT 2
30650: PUSH
30651: LD_INT 6
30653: PUSH
30654: LD_INT 15
30656: PUSH
30657: LD_INT 16
30659: PUSH
30660: LD_INT 7
30662: PUSH
30663: LD_INT 12
30665: PUSH
30666: LD_INT 13
30668: PUSH
30669: LD_INT 10
30671: PUSH
30672: LD_INT 14
30674: PUSH
30675: LD_INT 20
30677: PUSH
30678: LD_INT 21
30680: PUSH
30681: LD_INT 22
30683: PUSH
30684: LD_INT 25
30686: PUSH
30687: LD_INT 32
30689: PUSH
30690: LD_INT 27
30692: PUSH
30693: LD_INT 36
30695: PUSH
30696: LD_INT 69
30698: PUSH
30699: LD_INT 39
30701: PUSH
30702: LD_INT 34
30704: PUSH
30705: LD_INT 40
30707: PUSH
30708: LD_INT 48
30710: PUSH
30711: LD_INT 49
30713: PUSH
30714: LD_INT 50
30716: PUSH
30717: LD_INT 51
30719: PUSH
30720: LD_INT 52
30722: PUSH
30723: LD_INT 53
30725: PUSH
30726: LD_INT 54
30728: PUSH
30729: LD_INT 55
30731: PUSH
30732: LD_INT 56
30734: PUSH
30735: LD_INT 57
30737: PUSH
30738: LD_INT 58
30740: PUSH
30741: LD_INT 59
30743: PUSH
30744: LD_INT 60
30746: PUSH
30747: LD_INT 61
30749: PUSH
30750: LD_INT 62
30752: PUSH
30753: LD_INT 80
30755: PUSH
30756: LD_INT 82
30758: PUSH
30759: LD_INT 83
30761: PUSH
30762: LD_INT 84
30764: PUSH
30765: LD_INT 85
30767: PUSH
30768: LD_INT 86
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: ST_TO_ADDR
30824: GO 31291
30826: LD_INT 2
30828: DOUBLE
30829: EQUAL
30830: IFTRUE 30834
30832: GO 31060
30834: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30835: LD_ADDR_VAR 0 4
30839: PUSH
30840: LD_INT 35
30842: PUSH
30843: LD_INT 45
30845: PUSH
30846: LD_INT 46
30848: PUSH
30849: LD_INT 47
30851: PUSH
30852: LD_INT 82
30854: PUSH
30855: LD_INT 83
30857: PUSH
30858: LD_INT 84
30860: PUSH
30861: LD_INT 85
30863: PUSH
30864: LD_INT 87
30866: PUSH
30867: LD_INT 70
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: LD_INT 11
30875: PUSH
30876: LD_INT 3
30878: PUSH
30879: LD_INT 4
30881: PUSH
30882: LD_INT 5
30884: PUSH
30885: LD_INT 6
30887: PUSH
30888: LD_INT 15
30890: PUSH
30891: LD_INT 18
30893: PUSH
30894: LD_INT 7
30896: PUSH
30897: LD_INT 17
30899: PUSH
30900: LD_INT 8
30902: PUSH
30903: LD_INT 20
30905: PUSH
30906: LD_INT 21
30908: PUSH
30909: LD_INT 22
30911: PUSH
30912: LD_INT 72
30914: PUSH
30915: LD_INT 26
30917: PUSH
30918: LD_INT 69
30920: PUSH
30921: LD_INT 39
30923: PUSH
30924: LD_INT 40
30926: PUSH
30927: LD_INT 41
30929: PUSH
30930: LD_INT 42
30932: PUSH
30933: LD_INT 43
30935: PUSH
30936: LD_INT 48
30938: PUSH
30939: LD_INT 49
30941: PUSH
30942: LD_INT 50
30944: PUSH
30945: LD_INT 51
30947: PUSH
30948: LD_INT 52
30950: PUSH
30951: LD_INT 53
30953: PUSH
30954: LD_INT 54
30956: PUSH
30957: LD_INT 55
30959: PUSH
30960: LD_INT 56
30962: PUSH
30963: LD_INT 60
30965: PUSH
30966: LD_INT 61
30968: PUSH
30969: LD_INT 62
30971: PUSH
30972: LD_INT 66
30974: PUSH
30975: LD_INT 67
30977: PUSH
30978: LD_INT 68
30980: PUSH
30981: LD_INT 81
30983: PUSH
30984: LD_INT 82
30986: PUSH
30987: LD_INT 83
30989: PUSH
30990: LD_INT 84
30992: PUSH
30993: LD_INT 85
30995: PUSH
30996: LD_INT 87
30998: PUSH
30999: LD_INT 88
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: ST_TO_ADDR
31058: GO 31291
31060: LD_INT 3
31062: DOUBLE
31063: EQUAL
31064: IFTRUE 31068
31066: GO 31290
31068: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31069: LD_ADDR_VAR 0 4
31073: PUSH
31074: LD_INT 46
31076: PUSH
31077: LD_INT 47
31079: PUSH
31080: LD_INT 1
31082: PUSH
31083: LD_INT 2
31085: PUSH
31086: LD_INT 82
31088: PUSH
31089: LD_INT 83
31091: PUSH
31092: LD_INT 84
31094: PUSH
31095: LD_INT 85
31097: PUSH
31098: LD_INT 86
31100: PUSH
31101: LD_INT 11
31103: PUSH
31104: LD_INT 9
31106: PUSH
31107: LD_INT 20
31109: PUSH
31110: LD_INT 19
31112: PUSH
31113: LD_INT 21
31115: PUSH
31116: LD_INT 24
31118: PUSH
31119: LD_INT 22
31121: PUSH
31122: LD_INT 25
31124: PUSH
31125: LD_INT 28
31127: PUSH
31128: LD_INT 29
31130: PUSH
31131: LD_INT 30
31133: PUSH
31134: LD_INT 31
31136: PUSH
31137: LD_INT 37
31139: PUSH
31140: LD_INT 38
31142: PUSH
31143: LD_INT 32
31145: PUSH
31146: LD_INT 27
31148: PUSH
31149: LD_INT 33
31151: PUSH
31152: LD_INT 69
31154: PUSH
31155: LD_INT 39
31157: PUSH
31158: LD_INT 34
31160: PUSH
31161: LD_INT 40
31163: PUSH
31164: LD_INT 71
31166: PUSH
31167: LD_INT 23
31169: PUSH
31170: LD_INT 44
31172: PUSH
31173: LD_INT 48
31175: PUSH
31176: LD_INT 49
31178: PUSH
31179: LD_INT 50
31181: PUSH
31182: LD_INT 51
31184: PUSH
31185: LD_INT 52
31187: PUSH
31188: LD_INT 53
31190: PUSH
31191: LD_INT 54
31193: PUSH
31194: LD_INT 55
31196: PUSH
31197: LD_INT 56
31199: PUSH
31200: LD_INT 57
31202: PUSH
31203: LD_INT 58
31205: PUSH
31206: LD_INT 59
31208: PUSH
31209: LD_INT 63
31211: PUSH
31212: LD_INT 64
31214: PUSH
31215: LD_INT 65
31217: PUSH
31218: LD_INT 82
31220: PUSH
31221: LD_INT 83
31223: PUSH
31224: LD_INT 84
31226: PUSH
31227: LD_INT 85
31229: PUSH
31230: LD_INT 86
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: ST_TO_ADDR
31288: GO 31291
31290: POP
// if state > - 1 and state < 3 then
31291: LD_VAR 0 3
31295: PUSH
31296: LD_INT 1
31298: NEG
31299: GREATER
31300: PUSH
31301: LD_VAR 0 3
31305: PUSH
31306: LD_INT 3
31308: LESS
31309: AND
31310: IFFALSE 31367
// for i in result do
31312: LD_ADDR_VAR 0 5
31316: PUSH
31317: LD_VAR 0 4
31321: PUSH
31322: FOR_IN
31323: IFFALSE 31365
// if GetTech ( i , side ) <> state then
31325: LD_VAR 0 5
31329: PPUSH
31330: LD_VAR 0 1
31334: PPUSH
31335: CALL_OW 321
31339: PUSH
31340: LD_VAR 0 3
31344: NONEQUAL
31345: IFFALSE 31363
// result := result diff i ;
31347: LD_ADDR_VAR 0 4
31351: PUSH
31352: LD_VAR 0 4
31356: PUSH
31357: LD_VAR 0 5
31361: DIFF
31362: ST_TO_ADDR
31363: GO 31322
31365: POP
31366: POP
// end ;
31367: LD_VAR 0 4
31371: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31372: LD_INT 0
31374: PPUSH
31375: PPUSH
31376: PPUSH
// result := true ;
31377: LD_ADDR_VAR 0 3
31381: PUSH
31382: LD_INT 1
31384: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31385: LD_ADDR_VAR 0 5
31389: PUSH
31390: LD_VAR 0 2
31394: PPUSH
31395: CALL_OW 480
31399: ST_TO_ADDR
// if not tmp then
31400: LD_VAR 0 5
31404: NOT
31405: IFFALSE 31409
// exit ;
31407: GO 31458
// for i in tmp do
31409: LD_ADDR_VAR 0 4
31413: PUSH
31414: LD_VAR 0 5
31418: PUSH
31419: FOR_IN
31420: IFFALSE 31456
// if GetTech ( i , side ) <> state_researched then
31422: LD_VAR 0 4
31426: PPUSH
31427: LD_VAR 0 1
31431: PPUSH
31432: CALL_OW 321
31436: PUSH
31437: LD_INT 2
31439: NONEQUAL
31440: IFFALSE 31454
// begin result := false ;
31442: LD_ADDR_VAR 0 3
31446: PUSH
31447: LD_INT 0
31449: ST_TO_ADDR
// exit ;
31450: POP
31451: POP
31452: GO 31458
// end ;
31454: GO 31419
31456: POP
31457: POP
// end ;
31458: LD_VAR 0 3
31462: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31463: LD_INT 0
31465: PPUSH
31466: PPUSH
31467: PPUSH
31468: PPUSH
31469: PPUSH
31470: PPUSH
31471: PPUSH
31472: PPUSH
31473: PPUSH
31474: PPUSH
31475: PPUSH
31476: PPUSH
31477: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31478: LD_VAR 0 1
31482: NOT
31483: PUSH
31484: LD_VAR 0 1
31488: PPUSH
31489: CALL_OW 257
31493: PUSH
31494: LD_INT 9
31496: NONEQUAL
31497: OR
31498: IFFALSE 31502
// exit ;
31500: GO 32075
// side := GetSide ( unit ) ;
31502: LD_ADDR_VAR 0 9
31506: PUSH
31507: LD_VAR 0 1
31511: PPUSH
31512: CALL_OW 255
31516: ST_TO_ADDR
// tech_space := tech_spacanom ;
31517: LD_ADDR_VAR 0 12
31521: PUSH
31522: LD_INT 29
31524: ST_TO_ADDR
// tech_time := tech_taurad ;
31525: LD_ADDR_VAR 0 13
31529: PUSH
31530: LD_INT 28
31532: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31533: LD_ADDR_VAR 0 11
31537: PUSH
31538: LD_VAR 0 1
31542: PPUSH
31543: CALL_OW 310
31547: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31548: LD_VAR 0 11
31552: PPUSH
31553: CALL_OW 247
31557: PUSH
31558: LD_INT 2
31560: EQUAL
31561: IFFALSE 31565
// exit ;
31563: GO 32075
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31565: LD_ADDR_VAR 0 8
31569: PUSH
31570: LD_INT 81
31572: PUSH
31573: LD_VAR 0 9
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 3
31584: PUSH
31585: LD_INT 21
31587: PUSH
31588: LD_INT 3
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PPUSH
31603: CALL_OW 69
31607: ST_TO_ADDR
// if not tmp then
31608: LD_VAR 0 8
31612: NOT
31613: IFFALSE 31617
// exit ;
31615: GO 32075
// if in_unit then
31617: LD_VAR 0 11
31621: IFFALSE 31645
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31623: LD_ADDR_VAR 0 10
31627: PUSH
31628: LD_VAR 0 8
31632: PPUSH
31633: LD_VAR 0 11
31637: PPUSH
31638: CALL_OW 74
31642: ST_TO_ADDR
31643: GO 31665
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31645: LD_ADDR_VAR 0 10
31649: PUSH
31650: LD_VAR 0 8
31654: PPUSH
31655: LD_VAR 0 1
31659: PPUSH
31660: CALL_OW 74
31664: ST_TO_ADDR
// if not enemy then
31665: LD_VAR 0 10
31669: NOT
31670: IFFALSE 31674
// exit ;
31672: GO 32075
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31674: LD_VAR 0 11
31678: PUSH
31679: LD_VAR 0 11
31683: PPUSH
31684: LD_VAR 0 10
31688: PPUSH
31689: CALL_OW 296
31693: PUSH
31694: LD_INT 13
31696: GREATER
31697: AND
31698: PUSH
31699: LD_VAR 0 1
31703: PPUSH
31704: LD_VAR 0 10
31708: PPUSH
31709: CALL_OW 296
31713: PUSH
31714: LD_INT 12
31716: GREATER
31717: OR
31718: IFFALSE 31722
// exit ;
31720: GO 32075
// missile := [ 1 ] ;
31722: LD_ADDR_VAR 0 14
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: EMPTY
31731: LIST
31732: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31733: LD_VAR 0 9
31737: PPUSH
31738: LD_VAR 0 12
31742: PPUSH
31743: CALL_OW 325
31747: IFFALSE 31776
// missile := Replace ( missile , missile + 1 , 2 ) ;
31749: LD_ADDR_VAR 0 14
31753: PUSH
31754: LD_VAR 0 14
31758: PPUSH
31759: LD_VAR 0 14
31763: PUSH
31764: LD_INT 1
31766: PLUS
31767: PPUSH
31768: LD_INT 2
31770: PPUSH
31771: CALL_OW 1
31775: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31776: LD_VAR 0 9
31780: PPUSH
31781: LD_VAR 0 13
31785: PPUSH
31786: CALL_OW 325
31790: PUSH
31791: LD_VAR 0 10
31795: PPUSH
31796: CALL_OW 255
31800: PPUSH
31801: LD_VAR 0 13
31805: PPUSH
31806: CALL_OW 325
31810: NOT
31811: AND
31812: IFFALSE 31841
// missile := Replace ( missile , missile + 1 , 3 ) ;
31814: LD_ADDR_VAR 0 14
31818: PUSH
31819: LD_VAR 0 14
31823: PPUSH
31824: LD_VAR 0 14
31828: PUSH
31829: LD_INT 1
31831: PLUS
31832: PPUSH
31833: LD_INT 3
31835: PPUSH
31836: CALL_OW 1
31840: ST_TO_ADDR
// if missile < 2 then
31841: LD_VAR 0 14
31845: PUSH
31846: LD_INT 2
31848: LESS
31849: IFFALSE 31853
// exit ;
31851: GO 32075
// x := GetX ( enemy ) ;
31853: LD_ADDR_VAR 0 4
31857: PUSH
31858: LD_VAR 0 10
31862: PPUSH
31863: CALL_OW 250
31867: ST_TO_ADDR
// y := GetY ( enemy ) ;
31868: LD_ADDR_VAR 0 5
31872: PUSH
31873: LD_VAR 0 10
31877: PPUSH
31878: CALL_OW 251
31882: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31883: LD_ADDR_VAR 0 6
31887: PUSH
31888: LD_VAR 0 4
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PPUSH
31897: LD_INT 1
31899: PPUSH
31900: CALL_OW 12
31904: PLUS
31905: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31906: LD_ADDR_VAR 0 7
31910: PUSH
31911: LD_VAR 0 5
31915: PUSH
31916: LD_INT 1
31918: NEG
31919: PPUSH
31920: LD_INT 1
31922: PPUSH
31923: CALL_OW 12
31927: PLUS
31928: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31929: LD_VAR 0 6
31933: PPUSH
31934: LD_VAR 0 7
31938: PPUSH
31939: CALL_OW 488
31943: NOT
31944: IFFALSE 31966
// begin _x := x ;
31946: LD_ADDR_VAR 0 6
31950: PUSH
31951: LD_VAR 0 4
31955: ST_TO_ADDR
// _y := y ;
31956: LD_ADDR_VAR 0 7
31960: PUSH
31961: LD_VAR 0 5
31965: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31966: LD_ADDR_VAR 0 3
31970: PUSH
31971: LD_INT 1
31973: PPUSH
31974: LD_VAR 0 14
31978: PPUSH
31979: CALL_OW 12
31983: ST_TO_ADDR
// case i of 1 :
31984: LD_VAR 0 3
31988: PUSH
31989: LD_INT 1
31991: DOUBLE
31992: EQUAL
31993: IFTRUE 31997
31995: GO 32014
31997: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31998: LD_VAR 0 1
32002: PPUSH
32003: LD_VAR 0 10
32007: PPUSH
32008: CALL_OW 115
32012: GO 32075
32014: LD_INT 2
32016: DOUBLE
32017: EQUAL
32018: IFTRUE 32022
32020: GO 32044
32022: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32023: LD_VAR 0 1
32027: PPUSH
32028: LD_VAR 0 6
32032: PPUSH
32033: LD_VAR 0 7
32037: PPUSH
32038: CALL_OW 153
32042: GO 32075
32044: LD_INT 3
32046: DOUBLE
32047: EQUAL
32048: IFTRUE 32052
32050: GO 32074
32052: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32053: LD_VAR 0 1
32057: PPUSH
32058: LD_VAR 0 6
32062: PPUSH
32063: LD_VAR 0 7
32067: PPUSH
32068: CALL_OW 154
32072: GO 32075
32074: POP
// end ;
32075: LD_VAR 0 2
32079: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32080: LD_INT 0
32082: PPUSH
32083: PPUSH
32084: PPUSH
32085: PPUSH
32086: PPUSH
32087: PPUSH
// if not unit or not building then
32088: LD_VAR 0 1
32092: NOT
32093: PUSH
32094: LD_VAR 0 2
32098: NOT
32099: OR
32100: IFFALSE 32104
// exit ;
32102: GO 32262
// x := GetX ( building ) ;
32104: LD_ADDR_VAR 0 5
32108: PUSH
32109: LD_VAR 0 2
32113: PPUSH
32114: CALL_OW 250
32118: ST_TO_ADDR
// y := GetY ( building ) ;
32119: LD_ADDR_VAR 0 6
32123: PUSH
32124: LD_VAR 0 2
32128: PPUSH
32129: CALL_OW 251
32133: ST_TO_ADDR
// for i = 0 to 5 do
32134: LD_ADDR_VAR 0 4
32138: PUSH
32139: DOUBLE
32140: LD_INT 0
32142: DEC
32143: ST_TO_ADDR
32144: LD_INT 5
32146: PUSH
32147: FOR_TO
32148: IFFALSE 32260
// begin _x := ShiftX ( x , i , 3 ) ;
32150: LD_ADDR_VAR 0 7
32154: PUSH
32155: LD_VAR 0 5
32159: PPUSH
32160: LD_VAR 0 4
32164: PPUSH
32165: LD_INT 3
32167: PPUSH
32168: CALL_OW 272
32172: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32173: LD_ADDR_VAR 0 8
32177: PUSH
32178: LD_VAR 0 6
32182: PPUSH
32183: LD_VAR 0 4
32187: PPUSH
32188: LD_INT 3
32190: PPUSH
32191: CALL_OW 273
32195: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32196: LD_VAR 0 7
32200: PPUSH
32201: LD_VAR 0 8
32205: PPUSH
32206: CALL_OW 488
32210: NOT
32211: IFFALSE 32215
// continue ;
32213: GO 32147
// if HexInfo ( _x , _y ) = 0 then
32215: LD_VAR 0 7
32219: PPUSH
32220: LD_VAR 0 8
32224: PPUSH
32225: CALL_OW 428
32229: PUSH
32230: LD_INT 0
32232: EQUAL
32233: IFFALSE 32258
// begin ComMoveXY ( unit , _x , _y ) ;
32235: LD_VAR 0 1
32239: PPUSH
32240: LD_VAR 0 7
32244: PPUSH
32245: LD_VAR 0 8
32249: PPUSH
32250: CALL_OW 111
// exit ;
32254: POP
32255: POP
32256: GO 32262
// end ; end ;
32258: GO 32147
32260: POP
32261: POP
// end ;
32262: LD_VAR 0 3
32266: RET
// export function ScanBase ( side , base_area ) ; begin
32267: LD_INT 0
32269: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32270: LD_ADDR_VAR 0 3
32274: PUSH
32275: LD_VAR 0 2
32279: PPUSH
32280: LD_INT 81
32282: PUSH
32283: LD_VAR 0 1
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PPUSH
32292: CALL_OW 70
32296: ST_TO_ADDR
// end ;
32297: LD_VAR 0 3
32301: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32302: LD_INT 0
32304: PPUSH
32305: PPUSH
32306: PPUSH
32307: PPUSH
// result := false ;
32308: LD_ADDR_VAR 0 2
32312: PUSH
32313: LD_INT 0
32315: ST_TO_ADDR
// side := GetSide ( unit ) ;
32316: LD_ADDR_VAR 0 3
32320: PUSH
32321: LD_VAR 0 1
32325: PPUSH
32326: CALL_OW 255
32330: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32331: LD_ADDR_VAR 0 4
32335: PUSH
32336: LD_VAR 0 1
32340: PPUSH
32341: CALL_OW 248
32345: ST_TO_ADDR
// case nat of 1 :
32346: LD_VAR 0 4
32350: PUSH
32351: LD_INT 1
32353: DOUBLE
32354: EQUAL
32355: IFTRUE 32359
32357: GO 32370
32359: POP
// tech := tech_lassight ; 2 :
32360: LD_ADDR_VAR 0 5
32364: PUSH
32365: LD_INT 12
32367: ST_TO_ADDR
32368: GO 32409
32370: LD_INT 2
32372: DOUBLE
32373: EQUAL
32374: IFTRUE 32378
32376: GO 32389
32378: POP
// tech := tech_mortar ; 3 :
32379: LD_ADDR_VAR 0 5
32383: PUSH
32384: LD_INT 41
32386: ST_TO_ADDR
32387: GO 32409
32389: LD_INT 3
32391: DOUBLE
32392: EQUAL
32393: IFTRUE 32397
32395: GO 32408
32397: POP
// tech := tech_bazooka ; end ;
32398: LD_ADDR_VAR 0 5
32402: PUSH
32403: LD_INT 44
32405: ST_TO_ADDR
32406: GO 32409
32408: POP
// if Researched ( side , tech ) then
32409: LD_VAR 0 3
32413: PPUSH
32414: LD_VAR 0 5
32418: PPUSH
32419: CALL_OW 325
32423: IFFALSE 32450
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32425: LD_ADDR_VAR 0 2
32429: PUSH
32430: LD_INT 5
32432: PUSH
32433: LD_INT 8
32435: PUSH
32436: LD_INT 9
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: LIST
32443: PUSH
32444: LD_VAR 0 4
32448: ARRAY
32449: ST_TO_ADDR
// end ;
32450: LD_VAR 0 2
32454: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32455: LD_INT 0
32457: PPUSH
32458: PPUSH
32459: PPUSH
// if not mines then
32460: LD_VAR 0 2
32464: NOT
32465: IFFALSE 32469
// exit ;
32467: GO 32613
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32469: LD_ADDR_VAR 0 5
32473: PUSH
32474: LD_INT 81
32476: PUSH
32477: LD_VAR 0 1
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 3
32488: PUSH
32489: LD_INT 21
32491: PUSH
32492: LD_INT 3
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PPUSH
32507: CALL_OW 69
32511: ST_TO_ADDR
// for i in mines do
32512: LD_ADDR_VAR 0 4
32516: PUSH
32517: LD_VAR 0 2
32521: PUSH
32522: FOR_IN
32523: IFFALSE 32611
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32525: LD_VAR 0 4
32529: PUSH
32530: LD_INT 1
32532: ARRAY
32533: PPUSH
32534: LD_VAR 0 4
32538: PUSH
32539: LD_INT 2
32541: ARRAY
32542: PPUSH
32543: CALL_OW 458
32547: NOT
32548: IFFALSE 32552
// continue ;
32550: GO 32522
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32552: LD_VAR 0 4
32556: PUSH
32557: LD_INT 1
32559: ARRAY
32560: PPUSH
32561: LD_VAR 0 4
32565: PUSH
32566: LD_INT 2
32568: ARRAY
32569: PPUSH
32570: CALL_OW 428
32574: PUSH
32575: LD_VAR 0 5
32579: IN
32580: IFFALSE 32609
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32582: LD_VAR 0 4
32586: PUSH
32587: LD_INT 1
32589: ARRAY
32590: PPUSH
32591: LD_VAR 0 4
32595: PUSH
32596: LD_INT 2
32598: ARRAY
32599: PPUSH
32600: LD_VAR 0 1
32604: PPUSH
32605: CALL_OW 456
// end ;
32609: GO 32522
32611: POP
32612: POP
// end ;
32613: LD_VAR 0 3
32617: RET
// export function Count ( array ) ; begin
32618: LD_INT 0
32620: PPUSH
// result := array + 0 ;
32621: LD_ADDR_VAR 0 2
32625: PUSH
32626: LD_VAR 0 1
32630: PUSH
32631: LD_INT 0
32633: PLUS
32634: ST_TO_ADDR
// end ;
32635: LD_VAR 0 2
32639: RET
// export function IsEmpty ( building ) ; begin
32640: LD_INT 0
32642: PPUSH
// if not building then
32643: LD_VAR 0 1
32647: NOT
32648: IFFALSE 32652
// exit ;
32650: GO 32695
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32652: LD_ADDR_VAR 0 2
32656: PUSH
32657: LD_VAR 0 1
32661: PUSH
32662: LD_INT 22
32664: PUSH
32665: LD_VAR 0 1
32669: PPUSH
32670: CALL_OW 255
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 58
32681: PUSH
32682: EMPTY
32683: LIST
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PPUSH
32689: CALL_OW 69
32693: IN
32694: ST_TO_ADDR
// end ;
32695: LD_VAR 0 2
32699: RET
// export function IsNotFull ( building ) ; var places ; begin
32700: LD_INT 0
32702: PPUSH
32703: PPUSH
// if not building then
32704: LD_VAR 0 1
32708: NOT
32709: IFFALSE 32713
// exit ;
32711: GO 32741
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32713: LD_ADDR_VAR 0 2
32717: PUSH
32718: LD_VAR 0 1
32722: PPUSH
32723: LD_INT 3
32725: PUSH
32726: LD_INT 62
32728: PUSH
32729: EMPTY
32730: LIST
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PPUSH
32736: CALL_OW 72
32740: ST_TO_ADDR
// end ;
32741: LD_VAR 0 2
32745: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32746: LD_INT 0
32748: PPUSH
32749: PPUSH
32750: PPUSH
32751: PPUSH
// tmp := [ ] ;
32752: LD_ADDR_VAR 0 3
32756: PUSH
32757: EMPTY
32758: ST_TO_ADDR
// list := [ ] ;
32759: LD_ADDR_VAR 0 5
32763: PUSH
32764: EMPTY
32765: ST_TO_ADDR
// for i = 16 to 25 do
32766: LD_ADDR_VAR 0 4
32770: PUSH
32771: DOUBLE
32772: LD_INT 16
32774: DEC
32775: ST_TO_ADDR
32776: LD_INT 25
32778: PUSH
32779: FOR_TO
32780: IFFALSE 32853
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32782: LD_ADDR_VAR 0 3
32786: PUSH
32787: LD_VAR 0 3
32791: PUSH
32792: LD_INT 22
32794: PUSH
32795: LD_VAR 0 1
32799: PPUSH
32800: CALL_OW 255
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 91
32811: PUSH
32812: LD_VAR 0 1
32816: PUSH
32817: LD_INT 6
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 30
32827: PUSH
32828: LD_VAR 0 4
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: LIST
32841: PUSH
32842: EMPTY
32843: LIST
32844: PPUSH
32845: CALL_OW 69
32849: ADD
32850: ST_TO_ADDR
32851: GO 32779
32853: POP
32854: POP
// for i = 1 to tmp do
32855: LD_ADDR_VAR 0 4
32859: PUSH
32860: DOUBLE
32861: LD_INT 1
32863: DEC
32864: ST_TO_ADDR
32865: LD_VAR 0 3
32869: PUSH
32870: FOR_TO
32871: IFFALSE 32959
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32873: LD_ADDR_VAR 0 5
32877: PUSH
32878: LD_VAR 0 5
32882: PUSH
32883: LD_VAR 0 3
32887: PUSH
32888: LD_VAR 0 4
32892: ARRAY
32893: PPUSH
32894: CALL_OW 266
32898: PUSH
32899: LD_VAR 0 3
32903: PUSH
32904: LD_VAR 0 4
32908: ARRAY
32909: PPUSH
32910: CALL_OW 250
32914: PUSH
32915: LD_VAR 0 3
32919: PUSH
32920: LD_VAR 0 4
32924: ARRAY
32925: PPUSH
32926: CALL_OW 251
32930: PUSH
32931: LD_VAR 0 3
32935: PUSH
32936: LD_VAR 0 4
32940: ARRAY
32941: PPUSH
32942: CALL_OW 254
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: PUSH
32953: EMPTY
32954: LIST
32955: ADD
32956: ST_TO_ADDR
32957: GO 32870
32959: POP
32960: POP
// result := list ;
32961: LD_ADDR_VAR 0 2
32965: PUSH
32966: LD_VAR 0 5
32970: ST_TO_ADDR
// end ;
32971: LD_VAR 0 2
32975: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32976: LD_INT 0
32978: PPUSH
32979: PPUSH
32980: PPUSH
32981: PPUSH
32982: PPUSH
32983: PPUSH
32984: PPUSH
// if not factory then
32985: LD_VAR 0 1
32989: NOT
32990: IFFALSE 32994
// exit ;
32992: GO 33587
// if control = control_apeman then
32994: LD_VAR 0 4
32998: PUSH
32999: LD_INT 5
33001: EQUAL
33002: IFFALSE 33111
// begin tmp := UnitsInside ( factory ) ;
33004: LD_ADDR_VAR 0 8
33008: PUSH
33009: LD_VAR 0 1
33013: PPUSH
33014: CALL_OW 313
33018: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33019: LD_VAR 0 8
33023: PPUSH
33024: LD_INT 25
33026: PUSH
33027: LD_INT 12
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PPUSH
33034: CALL_OW 72
33038: NOT
33039: IFFALSE 33049
// control := control_manual ;
33041: LD_ADDR_VAR 0 4
33045: PUSH
33046: LD_INT 1
33048: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33049: LD_ADDR_VAR 0 8
33053: PUSH
33054: LD_VAR 0 1
33058: PPUSH
33059: CALL 32746 0 1
33063: ST_TO_ADDR
// if tmp then
33064: LD_VAR 0 8
33068: IFFALSE 33111
// begin for i in tmp do
33070: LD_ADDR_VAR 0 7
33074: PUSH
33075: LD_VAR 0 8
33079: PUSH
33080: FOR_IN
33081: IFFALSE 33109
// if i [ 1 ] = b_ext_radio then
33083: LD_VAR 0 7
33087: PUSH
33088: LD_INT 1
33090: ARRAY
33091: PUSH
33092: LD_INT 22
33094: EQUAL
33095: IFFALSE 33107
// begin control := control_remote ;
33097: LD_ADDR_VAR 0 4
33101: PUSH
33102: LD_INT 2
33104: ST_TO_ADDR
// break ;
33105: GO 33109
// end ;
33107: GO 33080
33109: POP
33110: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33111: LD_VAR 0 1
33115: PPUSH
33116: LD_VAR 0 2
33120: PPUSH
33121: LD_VAR 0 3
33125: PPUSH
33126: LD_VAR 0 4
33130: PPUSH
33131: LD_VAR 0 5
33135: PPUSH
33136: CALL_OW 448
33140: IFFALSE 33175
// begin result := [ chassis , engine , control , weapon ] ;
33142: LD_ADDR_VAR 0 6
33146: PUSH
33147: LD_VAR 0 2
33151: PUSH
33152: LD_VAR 0 3
33156: PUSH
33157: LD_VAR 0 4
33161: PUSH
33162: LD_VAR 0 5
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: ST_TO_ADDR
// exit ;
33173: GO 33587
// end ; _chassis := AvailableChassisList ( factory ) ;
33175: LD_ADDR_VAR 0 9
33179: PUSH
33180: LD_VAR 0 1
33184: PPUSH
33185: CALL_OW 475
33189: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33190: LD_ADDR_VAR 0 11
33194: PUSH
33195: LD_VAR 0 1
33199: PPUSH
33200: CALL_OW 476
33204: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33205: LD_ADDR_VAR 0 12
33209: PUSH
33210: LD_VAR 0 1
33214: PPUSH
33215: CALL_OW 477
33219: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33220: LD_ADDR_VAR 0 10
33224: PUSH
33225: LD_VAR 0 1
33229: PPUSH
33230: CALL_OW 478
33234: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33235: LD_VAR 0 9
33239: NOT
33240: PUSH
33241: LD_VAR 0 11
33245: NOT
33246: OR
33247: PUSH
33248: LD_VAR 0 12
33252: NOT
33253: OR
33254: PUSH
33255: LD_VAR 0 10
33259: NOT
33260: OR
33261: IFFALSE 33296
// begin result := [ chassis , engine , control , weapon ] ;
33263: LD_ADDR_VAR 0 6
33267: PUSH
33268: LD_VAR 0 2
33272: PUSH
33273: LD_VAR 0 3
33277: PUSH
33278: LD_VAR 0 4
33282: PUSH
33283: LD_VAR 0 5
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: ST_TO_ADDR
// exit ;
33294: GO 33587
// end ; if not chassis in _chassis then
33296: LD_VAR 0 2
33300: PUSH
33301: LD_VAR 0 9
33305: IN
33306: NOT
33307: IFFALSE 33333
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33309: LD_ADDR_VAR 0 2
33313: PUSH
33314: LD_VAR 0 9
33318: PUSH
33319: LD_INT 1
33321: PPUSH
33322: LD_VAR 0 9
33326: PPUSH
33327: CALL_OW 12
33331: ARRAY
33332: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33333: LD_VAR 0 2
33337: PPUSH
33338: LD_VAR 0 3
33342: PPUSH
33343: CALL 33592 0 2
33347: NOT
33348: IFFALSE 33407
// repeat engine := _engine [ 1 ] ;
33350: LD_ADDR_VAR 0 3
33354: PUSH
33355: LD_VAR 0 11
33359: PUSH
33360: LD_INT 1
33362: ARRAY
33363: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33364: LD_ADDR_VAR 0 11
33368: PUSH
33369: LD_VAR 0 11
33373: PPUSH
33374: LD_INT 1
33376: PPUSH
33377: CALL_OW 3
33381: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33382: LD_VAR 0 2
33386: PPUSH
33387: LD_VAR 0 3
33391: PPUSH
33392: CALL 33592 0 2
33396: PUSH
33397: LD_VAR 0 11
33401: PUSH
33402: EMPTY
33403: EQUAL
33404: OR
33405: IFFALSE 33350
// if not control in _control then
33407: LD_VAR 0 4
33411: PUSH
33412: LD_VAR 0 12
33416: IN
33417: NOT
33418: IFFALSE 33444
// control := _control [ rand ( 1 , _control ) ] ;
33420: LD_ADDR_VAR 0 4
33424: PUSH
33425: LD_VAR 0 12
33429: PUSH
33430: LD_INT 1
33432: PPUSH
33433: LD_VAR 0 12
33437: PPUSH
33438: CALL_OW 12
33442: ARRAY
33443: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33444: LD_VAR 0 2
33448: PPUSH
33449: LD_VAR 0 5
33453: PPUSH
33454: CALL 33812 0 2
33458: NOT
33459: IFFALSE 33518
// repeat weapon := _weapon [ 1 ] ;
33461: LD_ADDR_VAR 0 5
33465: PUSH
33466: LD_VAR 0 10
33470: PUSH
33471: LD_INT 1
33473: ARRAY
33474: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33475: LD_ADDR_VAR 0 10
33479: PUSH
33480: LD_VAR 0 10
33484: PPUSH
33485: LD_INT 1
33487: PPUSH
33488: CALL_OW 3
33492: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33493: LD_VAR 0 2
33497: PPUSH
33498: LD_VAR 0 5
33502: PPUSH
33503: CALL 33812 0 2
33507: PUSH
33508: LD_VAR 0 10
33512: PUSH
33513: EMPTY
33514: EQUAL
33515: OR
33516: IFFALSE 33461
// result := [ ] ;
33518: LD_ADDR_VAR 0 6
33522: PUSH
33523: EMPTY
33524: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33525: LD_VAR 0 1
33529: PPUSH
33530: LD_VAR 0 2
33534: PPUSH
33535: LD_VAR 0 3
33539: PPUSH
33540: LD_VAR 0 4
33544: PPUSH
33545: LD_VAR 0 5
33549: PPUSH
33550: CALL_OW 448
33554: IFFALSE 33587
// result := [ chassis , engine , control , weapon ] ;
33556: LD_ADDR_VAR 0 6
33560: PUSH
33561: LD_VAR 0 2
33565: PUSH
33566: LD_VAR 0 3
33570: PUSH
33571: LD_VAR 0 4
33575: PUSH
33576: LD_VAR 0 5
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: ST_TO_ADDR
// end ;
33587: LD_VAR 0 6
33591: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33592: LD_INT 0
33594: PPUSH
// if not chassis or not engine then
33595: LD_VAR 0 1
33599: NOT
33600: PUSH
33601: LD_VAR 0 2
33605: NOT
33606: OR
33607: IFFALSE 33611
// exit ;
33609: GO 33807
// case engine of engine_solar :
33611: LD_VAR 0 2
33615: PUSH
33616: LD_INT 2
33618: DOUBLE
33619: EQUAL
33620: IFTRUE 33624
33622: GO 33662
33624: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33625: LD_ADDR_VAR 0 3
33629: PUSH
33630: LD_INT 11
33632: PUSH
33633: LD_INT 12
33635: PUSH
33636: LD_INT 13
33638: PUSH
33639: LD_INT 14
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: LD_INT 2
33647: PUSH
33648: LD_INT 3
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: ST_TO_ADDR
33660: GO 33791
33662: LD_INT 1
33664: DOUBLE
33665: EQUAL
33666: IFTRUE 33670
33668: GO 33732
33670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33671: LD_ADDR_VAR 0 3
33675: PUSH
33676: LD_INT 11
33678: PUSH
33679: LD_INT 12
33681: PUSH
33682: LD_INT 13
33684: PUSH
33685: LD_INT 14
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: LD_INT 3
33696: PUSH
33697: LD_INT 4
33699: PUSH
33700: LD_INT 5
33702: PUSH
33703: LD_INT 21
33705: PUSH
33706: LD_INT 23
33708: PUSH
33709: LD_INT 22
33711: PUSH
33712: LD_INT 24
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: ST_TO_ADDR
33730: GO 33791
33732: LD_INT 3
33734: DOUBLE
33735: EQUAL
33736: IFTRUE 33740
33738: GO 33790
33740: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33741: LD_ADDR_VAR 0 3
33745: PUSH
33746: LD_INT 13
33748: PUSH
33749: LD_INT 14
33751: PUSH
33752: LD_INT 2
33754: PUSH
33755: LD_INT 3
33757: PUSH
33758: LD_INT 4
33760: PUSH
33761: LD_INT 5
33763: PUSH
33764: LD_INT 21
33766: PUSH
33767: LD_INT 22
33769: PUSH
33770: LD_INT 23
33772: PUSH
33773: LD_INT 24
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: ST_TO_ADDR
33788: GO 33791
33790: POP
// result := ( chassis in result ) ;
33791: LD_ADDR_VAR 0 3
33795: PUSH
33796: LD_VAR 0 1
33800: PUSH
33801: LD_VAR 0 3
33805: IN
33806: ST_TO_ADDR
// end ;
33807: LD_VAR 0 3
33811: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33812: LD_INT 0
33814: PPUSH
// if not chassis or not weapon then
33815: LD_VAR 0 1
33819: NOT
33820: PUSH
33821: LD_VAR 0 2
33825: NOT
33826: OR
33827: IFFALSE 33831
// exit ;
33829: GO 34891
// case weapon of us_machine_gun :
33831: LD_VAR 0 2
33835: PUSH
33836: LD_INT 2
33838: DOUBLE
33839: EQUAL
33840: IFTRUE 33844
33842: GO 33874
33844: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33845: LD_ADDR_VAR 0 3
33849: PUSH
33850: LD_INT 1
33852: PUSH
33853: LD_INT 2
33855: PUSH
33856: LD_INT 3
33858: PUSH
33859: LD_INT 4
33861: PUSH
33862: LD_INT 5
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: ST_TO_ADDR
33872: GO 34875
33874: LD_INT 3
33876: DOUBLE
33877: EQUAL
33878: IFTRUE 33882
33880: GO 33912
33882: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33883: LD_ADDR_VAR 0 3
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: LD_INT 3
33896: PUSH
33897: LD_INT 4
33899: PUSH
33900: LD_INT 5
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: ST_TO_ADDR
33910: GO 34875
33912: LD_INT 11
33914: DOUBLE
33915: EQUAL
33916: IFTRUE 33920
33918: GO 33950
33920: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33921: LD_ADDR_VAR 0 3
33925: PUSH
33926: LD_INT 1
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: LD_INT 3
33934: PUSH
33935: LD_INT 4
33937: PUSH
33938: LD_INT 5
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: ST_TO_ADDR
33948: GO 34875
33950: LD_INT 4
33952: DOUBLE
33953: EQUAL
33954: IFTRUE 33958
33956: GO 33984
33958: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33959: LD_ADDR_VAR 0 3
33963: PUSH
33964: LD_INT 2
33966: PUSH
33967: LD_INT 3
33969: PUSH
33970: LD_INT 4
33972: PUSH
33973: LD_INT 5
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: ST_TO_ADDR
33982: GO 34875
33984: LD_INT 5
33986: DOUBLE
33987: EQUAL
33988: IFTRUE 33992
33990: GO 34018
33992: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33993: LD_ADDR_VAR 0 3
33997: PUSH
33998: LD_INT 2
34000: PUSH
34001: LD_INT 3
34003: PUSH
34004: LD_INT 4
34006: PUSH
34007: LD_INT 5
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: ST_TO_ADDR
34016: GO 34875
34018: LD_INT 9
34020: DOUBLE
34021: EQUAL
34022: IFTRUE 34026
34024: GO 34052
34026: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34027: LD_ADDR_VAR 0 3
34031: PUSH
34032: LD_INT 2
34034: PUSH
34035: LD_INT 3
34037: PUSH
34038: LD_INT 4
34040: PUSH
34041: LD_INT 5
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: ST_TO_ADDR
34050: GO 34875
34052: LD_INT 7
34054: DOUBLE
34055: EQUAL
34056: IFTRUE 34060
34058: GO 34086
34060: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34061: LD_ADDR_VAR 0 3
34065: PUSH
34066: LD_INT 2
34068: PUSH
34069: LD_INT 3
34071: PUSH
34072: LD_INT 4
34074: PUSH
34075: LD_INT 5
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: ST_TO_ADDR
34084: GO 34875
34086: LD_INT 12
34088: DOUBLE
34089: EQUAL
34090: IFTRUE 34094
34092: GO 34120
34094: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34095: LD_ADDR_VAR 0 3
34099: PUSH
34100: LD_INT 2
34102: PUSH
34103: LD_INT 3
34105: PUSH
34106: LD_INT 4
34108: PUSH
34109: LD_INT 5
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: ST_TO_ADDR
34118: GO 34875
34120: LD_INT 13
34122: DOUBLE
34123: EQUAL
34124: IFTRUE 34128
34126: GO 34154
34128: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34129: LD_ADDR_VAR 0 3
34133: PUSH
34134: LD_INT 2
34136: PUSH
34137: LD_INT 3
34139: PUSH
34140: LD_INT 4
34142: PUSH
34143: LD_INT 5
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: ST_TO_ADDR
34152: GO 34875
34154: LD_INT 14
34156: DOUBLE
34157: EQUAL
34158: IFTRUE 34162
34160: GO 34180
34162: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34163: LD_ADDR_VAR 0 3
34167: PUSH
34168: LD_INT 4
34170: PUSH
34171: LD_INT 5
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: ST_TO_ADDR
34178: GO 34875
34180: LD_INT 6
34182: DOUBLE
34183: EQUAL
34184: IFTRUE 34188
34186: GO 34206
34188: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34189: LD_ADDR_VAR 0 3
34193: PUSH
34194: LD_INT 4
34196: PUSH
34197: LD_INT 5
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: ST_TO_ADDR
34204: GO 34875
34206: LD_INT 10
34208: DOUBLE
34209: EQUAL
34210: IFTRUE 34214
34212: GO 34232
34214: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34215: LD_ADDR_VAR 0 3
34219: PUSH
34220: LD_INT 4
34222: PUSH
34223: LD_INT 5
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: ST_TO_ADDR
34230: GO 34875
34232: LD_INT 22
34234: DOUBLE
34235: EQUAL
34236: IFTRUE 34240
34238: GO 34266
34240: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34241: LD_ADDR_VAR 0 3
34245: PUSH
34246: LD_INT 11
34248: PUSH
34249: LD_INT 12
34251: PUSH
34252: LD_INT 13
34254: PUSH
34255: LD_INT 14
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: ST_TO_ADDR
34264: GO 34875
34266: LD_INT 23
34268: DOUBLE
34269: EQUAL
34270: IFTRUE 34274
34272: GO 34300
34274: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34275: LD_ADDR_VAR 0 3
34279: PUSH
34280: LD_INT 11
34282: PUSH
34283: LD_INT 12
34285: PUSH
34286: LD_INT 13
34288: PUSH
34289: LD_INT 14
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: ST_TO_ADDR
34298: GO 34875
34300: LD_INT 24
34302: DOUBLE
34303: EQUAL
34304: IFTRUE 34308
34306: GO 34334
34308: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34309: LD_ADDR_VAR 0 3
34313: PUSH
34314: LD_INT 11
34316: PUSH
34317: LD_INT 12
34319: PUSH
34320: LD_INT 13
34322: PUSH
34323: LD_INT 14
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: ST_TO_ADDR
34332: GO 34875
34334: LD_INT 30
34336: DOUBLE
34337: EQUAL
34338: IFTRUE 34342
34340: GO 34368
34342: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34343: LD_ADDR_VAR 0 3
34347: PUSH
34348: LD_INT 11
34350: PUSH
34351: LD_INT 12
34353: PUSH
34354: LD_INT 13
34356: PUSH
34357: LD_INT 14
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: ST_TO_ADDR
34366: GO 34875
34368: LD_INT 25
34370: DOUBLE
34371: EQUAL
34372: IFTRUE 34376
34374: GO 34394
34376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34377: LD_ADDR_VAR 0 3
34381: PUSH
34382: LD_INT 13
34384: PUSH
34385: LD_INT 14
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: ST_TO_ADDR
34392: GO 34875
34394: LD_INT 27
34396: DOUBLE
34397: EQUAL
34398: IFTRUE 34402
34400: GO 34420
34402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34403: LD_ADDR_VAR 0 3
34407: PUSH
34408: LD_INT 13
34410: PUSH
34411: LD_INT 14
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: ST_TO_ADDR
34418: GO 34875
34420: LD_INT 92
34422: DOUBLE
34423: EQUAL
34424: IFTRUE 34428
34426: GO 34454
34428: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34429: LD_ADDR_VAR 0 3
34433: PUSH
34434: LD_INT 11
34436: PUSH
34437: LD_INT 12
34439: PUSH
34440: LD_INT 13
34442: PUSH
34443: LD_INT 14
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: ST_TO_ADDR
34452: GO 34875
34454: LD_INT 28
34456: DOUBLE
34457: EQUAL
34458: IFTRUE 34462
34460: GO 34480
34462: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34463: LD_ADDR_VAR 0 3
34467: PUSH
34468: LD_INT 13
34470: PUSH
34471: LD_INT 14
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: ST_TO_ADDR
34478: GO 34875
34480: LD_INT 29
34482: DOUBLE
34483: EQUAL
34484: IFTRUE 34488
34486: GO 34506
34488: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34489: LD_ADDR_VAR 0 3
34493: PUSH
34494: LD_INT 13
34496: PUSH
34497: LD_INT 14
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: ST_TO_ADDR
34504: GO 34875
34506: LD_INT 31
34508: DOUBLE
34509: EQUAL
34510: IFTRUE 34514
34512: GO 34532
34514: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34515: LD_ADDR_VAR 0 3
34519: PUSH
34520: LD_INT 13
34522: PUSH
34523: LD_INT 14
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: ST_TO_ADDR
34530: GO 34875
34532: LD_INT 26
34534: DOUBLE
34535: EQUAL
34536: IFTRUE 34540
34538: GO 34558
34540: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34541: LD_ADDR_VAR 0 3
34545: PUSH
34546: LD_INT 13
34548: PUSH
34549: LD_INT 14
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: ST_TO_ADDR
34556: GO 34875
34558: LD_INT 42
34560: DOUBLE
34561: EQUAL
34562: IFTRUE 34566
34564: GO 34592
34566: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34567: LD_ADDR_VAR 0 3
34571: PUSH
34572: LD_INT 21
34574: PUSH
34575: LD_INT 22
34577: PUSH
34578: LD_INT 23
34580: PUSH
34581: LD_INT 24
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: ST_TO_ADDR
34590: GO 34875
34592: LD_INT 43
34594: DOUBLE
34595: EQUAL
34596: IFTRUE 34600
34598: GO 34626
34600: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34601: LD_ADDR_VAR 0 3
34605: PUSH
34606: LD_INT 21
34608: PUSH
34609: LD_INT 22
34611: PUSH
34612: LD_INT 23
34614: PUSH
34615: LD_INT 24
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: ST_TO_ADDR
34624: GO 34875
34626: LD_INT 44
34628: DOUBLE
34629: EQUAL
34630: IFTRUE 34634
34632: GO 34660
34634: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34635: LD_ADDR_VAR 0 3
34639: PUSH
34640: LD_INT 21
34642: PUSH
34643: LD_INT 22
34645: PUSH
34646: LD_INT 23
34648: PUSH
34649: LD_INT 24
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: ST_TO_ADDR
34658: GO 34875
34660: LD_INT 45
34662: DOUBLE
34663: EQUAL
34664: IFTRUE 34668
34666: GO 34694
34668: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34669: LD_ADDR_VAR 0 3
34673: PUSH
34674: LD_INT 21
34676: PUSH
34677: LD_INT 22
34679: PUSH
34680: LD_INT 23
34682: PUSH
34683: LD_INT 24
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: ST_TO_ADDR
34692: GO 34875
34694: LD_INT 49
34696: DOUBLE
34697: EQUAL
34698: IFTRUE 34702
34700: GO 34728
34702: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34703: LD_ADDR_VAR 0 3
34707: PUSH
34708: LD_INT 21
34710: PUSH
34711: LD_INT 22
34713: PUSH
34714: LD_INT 23
34716: PUSH
34717: LD_INT 24
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: ST_TO_ADDR
34726: GO 34875
34728: LD_INT 51
34730: DOUBLE
34731: EQUAL
34732: IFTRUE 34736
34734: GO 34762
34736: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34737: LD_ADDR_VAR 0 3
34741: PUSH
34742: LD_INT 21
34744: PUSH
34745: LD_INT 22
34747: PUSH
34748: LD_INT 23
34750: PUSH
34751: LD_INT 24
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: ST_TO_ADDR
34760: GO 34875
34762: LD_INT 52
34764: DOUBLE
34765: EQUAL
34766: IFTRUE 34770
34768: GO 34796
34770: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34771: LD_ADDR_VAR 0 3
34775: PUSH
34776: LD_INT 21
34778: PUSH
34779: LD_INT 22
34781: PUSH
34782: LD_INT 23
34784: PUSH
34785: LD_INT 24
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: ST_TO_ADDR
34794: GO 34875
34796: LD_INT 53
34798: DOUBLE
34799: EQUAL
34800: IFTRUE 34804
34802: GO 34822
34804: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34805: LD_ADDR_VAR 0 3
34809: PUSH
34810: LD_INT 23
34812: PUSH
34813: LD_INT 24
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: ST_TO_ADDR
34820: GO 34875
34822: LD_INT 46
34824: DOUBLE
34825: EQUAL
34826: IFTRUE 34830
34828: GO 34848
34830: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34831: LD_ADDR_VAR 0 3
34835: PUSH
34836: LD_INT 23
34838: PUSH
34839: LD_INT 24
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: ST_TO_ADDR
34846: GO 34875
34848: LD_INT 47
34850: DOUBLE
34851: EQUAL
34852: IFTRUE 34856
34854: GO 34874
34856: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34857: LD_ADDR_VAR 0 3
34861: PUSH
34862: LD_INT 23
34864: PUSH
34865: LD_INT 24
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: ST_TO_ADDR
34872: GO 34875
34874: POP
// result := ( chassis in result ) ;
34875: LD_ADDR_VAR 0 3
34879: PUSH
34880: LD_VAR 0 1
34884: PUSH
34885: LD_VAR 0 3
34889: IN
34890: ST_TO_ADDR
// end ;
34891: LD_VAR 0 3
34895: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34896: LD_INT 0
34898: PPUSH
34899: PPUSH
34900: PPUSH
34901: PPUSH
34902: PPUSH
34903: PPUSH
34904: PPUSH
// result := array ;
34905: LD_ADDR_VAR 0 5
34909: PUSH
34910: LD_VAR 0 1
34914: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34915: LD_VAR 0 1
34919: NOT
34920: PUSH
34921: LD_VAR 0 2
34925: NOT
34926: OR
34927: PUSH
34928: LD_VAR 0 3
34932: NOT
34933: OR
34934: PUSH
34935: LD_VAR 0 2
34939: PUSH
34940: LD_VAR 0 1
34944: GREATER
34945: OR
34946: PUSH
34947: LD_VAR 0 3
34951: PUSH
34952: LD_VAR 0 1
34956: GREATER
34957: OR
34958: IFFALSE 34962
// exit ;
34960: GO 35258
// if direction then
34962: LD_VAR 0 4
34966: IFFALSE 35030
// begin d := 1 ;
34968: LD_ADDR_VAR 0 9
34972: PUSH
34973: LD_INT 1
34975: ST_TO_ADDR
// if i_from > i_to then
34976: LD_VAR 0 2
34980: PUSH
34981: LD_VAR 0 3
34985: GREATER
34986: IFFALSE 35012
// length := ( array - i_from ) + i_to else
34988: LD_ADDR_VAR 0 11
34992: PUSH
34993: LD_VAR 0 1
34997: PUSH
34998: LD_VAR 0 2
35002: MINUS
35003: PUSH
35004: LD_VAR 0 3
35008: PLUS
35009: ST_TO_ADDR
35010: GO 35028
// length := i_to - i_from ;
35012: LD_ADDR_VAR 0 11
35016: PUSH
35017: LD_VAR 0 3
35021: PUSH
35022: LD_VAR 0 2
35026: MINUS
35027: ST_TO_ADDR
// end else
35028: GO 35091
// begin d := - 1 ;
35030: LD_ADDR_VAR 0 9
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: ST_TO_ADDR
// if i_from > i_to then
35039: LD_VAR 0 2
35043: PUSH
35044: LD_VAR 0 3
35048: GREATER
35049: IFFALSE 35069
// length := i_from - i_to else
35051: LD_ADDR_VAR 0 11
35055: PUSH
35056: LD_VAR 0 2
35060: PUSH
35061: LD_VAR 0 3
35065: MINUS
35066: ST_TO_ADDR
35067: GO 35091
// length := ( array - i_to ) + i_from ;
35069: LD_ADDR_VAR 0 11
35073: PUSH
35074: LD_VAR 0 1
35078: PUSH
35079: LD_VAR 0 3
35083: MINUS
35084: PUSH
35085: LD_VAR 0 2
35089: PLUS
35090: ST_TO_ADDR
// end ; if not length then
35091: LD_VAR 0 11
35095: NOT
35096: IFFALSE 35100
// exit ;
35098: GO 35258
// tmp := array ;
35100: LD_ADDR_VAR 0 10
35104: PUSH
35105: LD_VAR 0 1
35109: ST_TO_ADDR
// for i = 1 to length do
35110: LD_ADDR_VAR 0 6
35114: PUSH
35115: DOUBLE
35116: LD_INT 1
35118: DEC
35119: ST_TO_ADDR
35120: LD_VAR 0 11
35124: PUSH
35125: FOR_TO
35126: IFFALSE 35246
// begin for j = 1 to array do
35128: LD_ADDR_VAR 0 7
35132: PUSH
35133: DOUBLE
35134: LD_INT 1
35136: DEC
35137: ST_TO_ADDR
35138: LD_VAR 0 1
35142: PUSH
35143: FOR_TO
35144: IFFALSE 35232
// begin k := j + d ;
35146: LD_ADDR_VAR 0 8
35150: PUSH
35151: LD_VAR 0 7
35155: PUSH
35156: LD_VAR 0 9
35160: PLUS
35161: ST_TO_ADDR
// if k > array then
35162: LD_VAR 0 8
35166: PUSH
35167: LD_VAR 0 1
35171: GREATER
35172: IFFALSE 35182
// k := 1 ;
35174: LD_ADDR_VAR 0 8
35178: PUSH
35179: LD_INT 1
35181: ST_TO_ADDR
// if not k then
35182: LD_VAR 0 8
35186: NOT
35187: IFFALSE 35199
// k := array ;
35189: LD_ADDR_VAR 0 8
35193: PUSH
35194: LD_VAR 0 1
35198: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35199: LD_ADDR_VAR 0 10
35203: PUSH
35204: LD_VAR 0 10
35208: PPUSH
35209: LD_VAR 0 8
35213: PPUSH
35214: LD_VAR 0 1
35218: PUSH
35219: LD_VAR 0 7
35223: ARRAY
35224: PPUSH
35225: CALL_OW 1
35229: ST_TO_ADDR
// end ;
35230: GO 35143
35232: POP
35233: POP
// array := tmp ;
35234: LD_ADDR_VAR 0 1
35238: PUSH
35239: LD_VAR 0 10
35243: ST_TO_ADDR
// end ;
35244: GO 35125
35246: POP
35247: POP
// result := array ;
35248: LD_ADDR_VAR 0 5
35252: PUSH
35253: LD_VAR 0 1
35257: ST_TO_ADDR
// end ;
35258: LD_VAR 0 5
35262: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35263: LD_INT 0
35265: PPUSH
35266: PPUSH
// result := 0 ;
35267: LD_ADDR_VAR 0 3
35271: PUSH
35272: LD_INT 0
35274: ST_TO_ADDR
// if not array or not value in array then
35275: LD_VAR 0 1
35279: NOT
35280: PUSH
35281: LD_VAR 0 2
35285: PUSH
35286: LD_VAR 0 1
35290: IN
35291: NOT
35292: OR
35293: IFFALSE 35297
// exit ;
35295: GO 35351
// for i = 1 to array do
35297: LD_ADDR_VAR 0 4
35301: PUSH
35302: DOUBLE
35303: LD_INT 1
35305: DEC
35306: ST_TO_ADDR
35307: LD_VAR 0 1
35311: PUSH
35312: FOR_TO
35313: IFFALSE 35349
// if value = array [ i ] then
35315: LD_VAR 0 2
35319: PUSH
35320: LD_VAR 0 1
35324: PUSH
35325: LD_VAR 0 4
35329: ARRAY
35330: EQUAL
35331: IFFALSE 35347
// begin result := i ;
35333: LD_ADDR_VAR 0 3
35337: PUSH
35338: LD_VAR 0 4
35342: ST_TO_ADDR
// exit ;
35343: POP
35344: POP
35345: GO 35351
// end ;
35347: GO 35312
35349: POP
35350: POP
// end ;
35351: LD_VAR 0 3
35355: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35356: LD_INT 0
35358: PPUSH
// vc_chassis := chassis ;
35359: LD_ADDR_OWVAR 37
35363: PUSH
35364: LD_VAR 0 1
35368: ST_TO_ADDR
// vc_engine := engine ;
35369: LD_ADDR_OWVAR 39
35373: PUSH
35374: LD_VAR 0 2
35378: ST_TO_ADDR
// vc_control := control ;
35379: LD_ADDR_OWVAR 38
35383: PUSH
35384: LD_VAR 0 3
35388: ST_TO_ADDR
// vc_weapon := weapon ;
35389: LD_ADDR_OWVAR 40
35393: PUSH
35394: LD_VAR 0 4
35398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35399: LD_ADDR_OWVAR 41
35403: PUSH
35404: LD_VAR 0 5
35408: ST_TO_ADDR
// end ;
35409: LD_VAR 0 6
35413: RET
// export function WantPlant ( unit ) ; var task ; begin
35414: LD_INT 0
35416: PPUSH
35417: PPUSH
// result := false ;
35418: LD_ADDR_VAR 0 2
35422: PUSH
35423: LD_INT 0
35425: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35426: LD_ADDR_VAR 0 3
35430: PUSH
35431: LD_VAR 0 1
35435: PPUSH
35436: CALL_OW 437
35440: ST_TO_ADDR
// if task then
35441: LD_VAR 0 3
35445: IFFALSE 35473
// if task [ 1 ] [ 1 ] = p then
35447: LD_VAR 0 3
35451: PUSH
35452: LD_INT 1
35454: ARRAY
35455: PUSH
35456: LD_INT 1
35458: ARRAY
35459: PUSH
35460: LD_STRING p
35462: EQUAL
35463: IFFALSE 35473
// result := true ;
35465: LD_ADDR_VAR 0 2
35469: PUSH
35470: LD_INT 1
35472: ST_TO_ADDR
// end ;
35473: LD_VAR 0 2
35477: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35478: LD_INT 0
35480: PPUSH
35481: PPUSH
35482: PPUSH
35483: PPUSH
// if pos < 1 then
35484: LD_VAR 0 2
35488: PUSH
35489: LD_INT 1
35491: LESS
35492: IFFALSE 35496
// exit ;
35494: GO 35799
// if pos = 1 then
35496: LD_VAR 0 2
35500: PUSH
35501: LD_INT 1
35503: EQUAL
35504: IFFALSE 35537
// result := Replace ( arr , pos [ 1 ] , value ) else
35506: LD_ADDR_VAR 0 4
35510: PUSH
35511: LD_VAR 0 1
35515: PPUSH
35516: LD_VAR 0 2
35520: PUSH
35521: LD_INT 1
35523: ARRAY
35524: PPUSH
35525: LD_VAR 0 3
35529: PPUSH
35530: CALL_OW 1
35534: ST_TO_ADDR
35535: GO 35799
// begin tmp := arr ;
35537: LD_ADDR_VAR 0 6
35541: PUSH
35542: LD_VAR 0 1
35546: ST_TO_ADDR
// s_arr := [ tmp ] ;
35547: LD_ADDR_VAR 0 7
35551: PUSH
35552: LD_VAR 0 6
35556: PUSH
35557: EMPTY
35558: LIST
35559: ST_TO_ADDR
// for i = 1 to pos - 1 do
35560: LD_ADDR_VAR 0 5
35564: PUSH
35565: DOUBLE
35566: LD_INT 1
35568: DEC
35569: ST_TO_ADDR
35570: LD_VAR 0 2
35574: PUSH
35575: LD_INT 1
35577: MINUS
35578: PUSH
35579: FOR_TO
35580: IFFALSE 35625
// begin tmp := tmp [ pos [ i ] ] ;
35582: LD_ADDR_VAR 0 6
35586: PUSH
35587: LD_VAR 0 6
35591: PUSH
35592: LD_VAR 0 2
35596: PUSH
35597: LD_VAR 0 5
35601: ARRAY
35602: ARRAY
35603: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35604: LD_ADDR_VAR 0 7
35608: PUSH
35609: LD_VAR 0 7
35613: PUSH
35614: LD_VAR 0 6
35618: PUSH
35619: EMPTY
35620: LIST
35621: ADD
35622: ST_TO_ADDR
// end ;
35623: GO 35579
35625: POP
35626: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35627: LD_ADDR_VAR 0 6
35631: PUSH
35632: LD_VAR 0 6
35636: PPUSH
35637: LD_VAR 0 2
35641: PUSH
35642: LD_VAR 0 2
35646: ARRAY
35647: PPUSH
35648: LD_VAR 0 3
35652: PPUSH
35653: CALL_OW 1
35657: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35658: LD_ADDR_VAR 0 7
35662: PUSH
35663: LD_VAR 0 7
35667: PPUSH
35668: LD_VAR 0 7
35672: PPUSH
35673: LD_VAR 0 6
35677: PPUSH
35678: CALL_OW 1
35682: ST_TO_ADDR
// for i = s_arr downto 2 do
35683: LD_ADDR_VAR 0 5
35687: PUSH
35688: DOUBLE
35689: LD_VAR 0 7
35693: INC
35694: ST_TO_ADDR
35695: LD_INT 2
35697: PUSH
35698: FOR_DOWNTO
35699: IFFALSE 35783
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35701: LD_ADDR_VAR 0 6
35705: PUSH
35706: LD_VAR 0 7
35710: PUSH
35711: LD_VAR 0 5
35715: PUSH
35716: LD_INT 1
35718: MINUS
35719: ARRAY
35720: PPUSH
35721: LD_VAR 0 2
35725: PUSH
35726: LD_VAR 0 5
35730: PUSH
35731: LD_INT 1
35733: MINUS
35734: ARRAY
35735: PPUSH
35736: LD_VAR 0 7
35740: PUSH
35741: LD_VAR 0 5
35745: ARRAY
35746: PPUSH
35747: CALL_OW 1
35751: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35752: LD_ADDR_VAR 0 7
35756: PUSH
35757: LD_VAR 0 7
35761: PPUSH
35762: LD_VAR 0 5
35766: PUSH
35767: LD_INT 1
35769: MINUS
35770: PPUSH
35771: LD_VAR 0 6
35775: PPUSH
35776: CALL_OW 1
35780: ST_TO_ADDR
// end ;
35781: GO 35698
35783: POP
35784: POP
// result := s_arr [ 1 ] ;
35785: LD_ADDR_VAR 0 4
35789: PUSH
35790: LD_VAR 0 7
35794: PUSH
35795: LD_INT 1
35797: ARRAY
35798: ST_TO_ADDR
// end ; end ;
35799: LD_VAR 0 4
35803: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35804: LD_INT 0
35806: PPUSH
35807: PPUSH
// if not list then
35808: LD_VAR 0 1
35812: NOT
35813: IFFALSE 35817
// exit ;
35815: GO 35908
// i := list [ pos1 ] ;
35817: LD_ADDR_VAR 0 5
35821: PUSH
35822: LD_VAR 0 1
35826: PUSH
35827: LD_VAR 0 2
35831: ARRAY
35832: ST_TO_ADDR
// if not i then
35833: LD_VAR 0 5
35837: NOT
35838: IFFALSE 35842
// exit ;
35840: GO 35908
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35842: LD_ADDR_VAR 0 1
35846: PUSH
35847: LD_VAR 0 1
35851: PPUSH
35852: LD_VAR 0 2
35856: PPUSH
35857: LD_VAR 0 1
35861: PUSH
35862: LD_VAR 0 3
35866: ARRAY
35867: PPUSH
35868: CALL_OW 1
35872: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35873: LD_ADDR_VAR 0 1
35877: PUSH
35878: LD_VAR 0 1
35882: PPUSH
35883: LD_VAR 0 3
35887: PPUSH
35888: LD_VAR 0 5
35892: PPUSH
35893: CALL_OW 1
35897: ST_TO_ADDR
// result := list ;
35898: LD_ADDR_VAR 0 4
35902: PUSH
35903: LD_VAR 0 1
35907: ST_TO_ADDR
// end ;
35908: LD_VAR 0 4
35912: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35913: LD_INT 0
35915: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35916: LD_ADDR_VAR 0 5
35920: PUSH
35921: LD_VAR 0 1
35925: PPUSH
35926: CALL_OW 250
35930: PPUSH
35931: LD_VAR 0 1
35935: PPUSH
35936: CALL_OW 251
35940: PPUSH
35941: LD_VAR 0 2
35945: PPUSH
35946: LD_VAR 0 3
35950: PPUSH
35951: LD_VAR 0 4
35955: PPUSH
35956: CALL 35966 0 5
35960: ST_TO_ADDR
// end ;
35961: LD_VAR 0 5
35965: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35966: LD_INT 0
35968: PPUSH
35969: PPUSH
35970: PPUSH
35971: PPUSH
// if not list then
35972: LD_VAR 0 3
35976: NOT
35977: IFFALSE 35981
// exit ;
35979: GO 36369
// result := [ ] ;
35981: LD_ADDR_VAR 0 6
35985: PUSH
35986: EMPTY
35987: ST_TO_ADDR
// for i in list do
35988: LD_ADDR_VAR 0 7
35992: PUSH
35993: LD_VAR 0 3
35997: PUSH
35998: FOR_IN
35999: IFFALSE 36201
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36001: LD_ADDR_VAR 0 9
36005: PUSH
36006: LD_VAR 0 7
36010: PPUSH
36011: LD_VAR 0 1
36015: PPUSH
36016: LD_VAR 0 2
36020: PPUSH
36021: CALL_OW 297
36025: ST_TO_ADDR
// if not result then
36026: LD_VAR 0 6
36030: NOT
36031: IFFALSE 36057
// result := [ [ i , tmp ] ] else
36033: LD_ADDR_VAR 0 6
36037: PUSH
36038: LD_VAR 0 7
36042: PUSH
36043: LD_VAR 0 9
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: EMPTY
36053: LIST
36054: ST_TO_ADDR
36055: GO 36199
// begin if result [ result ] [ 2 ] < tmp then
36057: LD_VAR 0 6
36061: PUSH
36062: LD_VAR 0 6
36066: ARRAY
36067: PUSH
36068: LD_INT 2
36070: ARRAY
36071: PUSH
36072: LD_VAR 0 9
36076: LESS
36077: IFFALSE 36119
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36079: LD_ADDR_VAR 0 6
36083: PUSH
36084: LD_VAR 0 6
36088: PPUSH
36089: LD_VAR 0 6
36093: PUSH
36094: LD_INT 1
36096: PLUS
36097: PPUSH
36098: LD_VAR 0 7
36102: PUSH
36103: LD_VAR 0 9
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PPUSH
36112: CALL_OW 2
36116: ST_TO_ADDR
36117: GO 36199
// for j = 1 to result do
36119: LD_ADDR_VAR 0 8
36123: PUSH
36124: DOUBLE
36125: LD_INT 1
36127: DEC
36128: ST_TO_ADDR
36129: LD_VAR 0 6
36133: PUSH
36134: FOR_TO
36135: IFFALSE 36197
// begin if tmp < result [ j ] [ 2 ] then
36137: LD_VAR 0 9
36141: PUSH
36142: LD_VAR 0 6
36146: PUSH
36147: LD_VAR 0 8
36151: ARRAY
36152: PUSH
36153: LD_INT 2
36155: ARRAY
36156: LESS
36157: IFFALSE 36195
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36159: LD_ADDR_VAR 0 6
36163: PUSH
36164: LD_VAR 0 6
36168: PPUSH
36169: LD_VAR 0 8
36173: PPUSH
36174: LD_VAR 0 7
36178: PUSH
36179: LD_VAR 0 9
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PPUSH
36188: CALL_OW 2
36192: ST_TO_ADDR
// break ;
36193: GO 36197
// end ; end ;
36195: GO 36134
36197: POP
36198: POP
// end ; end ;
36199: GO 35998
36201: POP
36202: POP
// if result and not asc then
36203: LD_VAR 0 6
36207: PUSH
36208: LD_VAR 0 4
36212: NOT
36213: AND
36214: IFFALSE 36289
// begin tmp := result ;
36216: LD_ADDR_VAR 0 9
36220: PUSH
36221: LD_VAR 0 6
36225: ST_TO_ADDR
// for i = tmp downto 1 do
36226: LD_ADDR_VAR 0 7
36230: PUSH
36231: DOUBLE
36232: LD_VAR 0 9
36236: INC
36237: ST_TO_ADDR
36238: LD_INT 1
36240: PUSH
36241: FOR_DOWNTO
36242: IFFALSE 36287
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36244: LD_ADDR_VAR 0 6
36248: PUSH
36249: LD_VAR 0 6
36253: PPUSH
36254: LD_VAR 0 9
36258: PUSH
36259: LD_VAR 0 7
36263: MINUS
36264: PUSH
36265: LD_INT 1
36267: PLUS
36268: PPUSH
36269: LD_VAR 0 9
36273: PUSH
36274: LD_VAR 0 7
36278: ARRAY
36279: PPUSH
36280: CALL_OW 1
36284: ST_TO_ADDR
36285: GO 36241
36287: POP
36288: POP
// end ; tmp := [ ] ;
36289: LD_ADDR_VAR 0 9
36293: PUSH
36294: EMPTY
36295: ST_TO_ADDR
// if mode then
36296: LD_VAR 0 5
36300: IFFALSE 36369
// begin for i = 1 to result do
36302: LD_ADDR_VAR 0 7
36306: PUSH
36307: DOUBLE
36308: LD_INT 1
36310: DEC
36311: ST_TO_ADDR
36312: LD_VAR 0 6
36316: PUSH
36317: FOR_TO
36318: IFFALSE 36357
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36320: LD_ADDR_VAR 0 9
36324: PUSH
36325: LD_VAR 0 9
36329: PPUSH
36330: LD_VAR 0 7
36334: PPUSH
36335: LD_VAR 0 6
36339: PUSH
36340: LD_VAR 0 7
36344: ARRAY
36345: PUSH
36346: LD_INT 1
36348: ARRAY
36349: PPUSH
36350: CALL_OW 1
36354: ST_TO_ADDR
36355: GO 36317
36357: POP
36358: POP
// result := tmp ;
36359: LD_ADDR_VAR 0 6
36363: PUSH
36364: LD_VAR 0 9
36368: ST_TO_ADDR
// end ; end ;
36369: LD_VAR 0 6
36373: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36374: LD_INT 0
36376: PPUSH
36377: PPUSH
36378: PPUSH
36379: PPUSH
36380: PPUSH
36381: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36382: LD_ADDR_VAR 0 5
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: EMPTY
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: ST_TO_ADDR
// if not x or not y then
36404: LD_VAR 0 2
36408: NOT
36409: PUSH
36410: LD_VAR 0 3
36414: NOT
36415: OR
36416: IFFALSE 36420
// exit ;
36418: GO 38070
// if not range then
36420: LD_VAR 0 4
36424: NOT
36425: IFFALSE 36435
// range := 10 ;
36427: LD_ADDR_VAR 0 4
36431: PUSH
36432: LD_INT 10
36434: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36435: LD_ADDR_VAR 0 8
36439: PUSH
36440: LD_INT 81
36442: PUSH
36443: LD_VAR 0 1
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 92
36454: PUSH
36455: LD_VAR 0 2
36459: PUSH
36460: LD_VAR 0 3
36464: PUSH
36465: LD_VAR 0 4
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 3
36478: PUSH
36479: LD_INT 21
36481: PUSH
36482: LD_INT 3
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: LIST
36497: PPUSH
36498: CALL_OW 69
36502: ST_TO_ADDR
// if not tmp then
36503: LD_VAR 0 8
36507: NOT
36508: IFFALSE 36512
// exit ;
36510: GO 38070
// for i in tmp do
36512: LD_ADDR_VAR 0 6
36516: PUSH
36517: LD_VAR 0 8
36521: PUSH
36522: FOR_IN
36523: IFFALSE 38045
// begin points := [ 0 , 0 , 0 ] ;
36525: LD_ADDR_VAR 0 9
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: LIST
36543: ST_TO_ADDR
// bpoints := 1 ;
36544: LD_ADDR_VAR 0 10
36548: PUSH
36549: LD_INT 1
36551: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36552: LD_VAR 0 6
36556: PPUSH
36557: CALL_OW 247
36561: PUSH
36562: LD_INT 1
36564: DOUBLE
36565: EQUAL
36566: IFTRUE 36570
36568: GO 37148
36570: POP
// begin if GetClass ( i ) = 1 then
36571: LD_VAR 0 6
36575: PPUSH
36576: CALL_OW 257
36580: PUSH
36581: LD_INT 1
36583: EQUAL
36584: IFFALSE 36605
// points := [ 10 , 5 , 3 ] ;
36586: LD_ADDR_VAR 0 9
36590: PUSH
36591: LD_INT 10
36593: PUSH
36594: LD_INT 5
36596: PUSH
36597: LD_INT 3
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: LIST
36604: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36605: LD_VAR 0 6
36609: PPUSH
36610: CALL_OW 257
36614: PUSH
36615: LD_INT 2
36617: PUSH
36618: LD_INT 3
36620: PUSH
36621: LD_INT 4
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: LIST
36628: IN
36629: IFFALSE 36650
// points := [ 3 , 2 , 1 ] ;
36631: LD_ADDR_VAR 0 9
36635: PUSH
36636: LD_INT 3
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: LIST
36649: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36650: LD_VAR 0 6
36654: PPUSH
36655: CALL_OW 257
36659: PUSH
36660: LD_INT 5
36662: EQUAL
36663: IFFALSE 36684
// points := [ 130 , 5 , 2 ] ;
36665: LD_ADDR_VAR 0 9
36669: PUSH
36670: LD_INT 130
36672: PUSH
36673: LD_INT 5
36675: PUSH
36676: LD_INT 2
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36684: LD_VAR 0 6
36688: PPUSH
36689: CALL_OW 257
36693: PUSH
36694: LD_INT 8
36696: EQUAL
36697: IFFALSE 36718
// points := [ 35 , 35 , 30 ] ;
36699: LD_ADDR_VAR 0 9
36703: PUSH
36704: LD_INT 35
36706: PUSH
36707: LD_INT 35
36709: PUSH
36710: LD_INT 30
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36718: LD_VAR 0 6
36722: PPUSH
36723: CALL_OW 257
36727: PUSH
36728: LD_INT 9
36730: EQUAL
36731: IFFALSE 36752
// points := [ 20 , 55 , 40 ] ;
36733: LD_ADDR_VAR 0 9
36737: PUSH
36738: LD_INT 20
36740: PUSH
36741: LD_INT 55
36743: PUSH
36744: LD_INT 40
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36752: LD_VAR 0 6
36756: PPUSH
36757: CALL_OW 257
36761: PUSH
36762: LD_INT 12
36764: PUSH
36765: LD_INT 16
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: IN
36772: IFFALSE 36793
// points := [ 5 , 3 , 2 ] ;
36774: LD_ADDR_VAR 0 9
36778: PUSH
36779: LD_INT 5
36781: PUSH
36782: LD_INT 3
36784: PUSH
36785: LD_INT 2
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: LIST
36792: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36793: LD_VAR 0 6
36797: PPUSH
36798: CALL_OW 257
36802: PUSH
36803: LD_INT 17
36805: EQUAL
36806: IFFALSE 36827
// points := [ 100 , 50 , 75 ] ;
36808: LD_ADDR_VAR 0 9
36812: PUSH
36813: LD_INT 100
36815: PUSH
36816: LD_INT 50
36818: PUSH
36819: LD_INT 75
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: LIST
36826: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36827: LD_VAR 0 6
36831: PPUSH
36832: CALL_OW 257
36836: PUSH
36837: LD_INT 15
36839: EQUAL
36840: IFFALSE 36861
// points := [ 10 , 5 , 3 ] ;
36842: LD_ADDR_VAR 0 9
36846: PUSH
36847: LD_INT 10
36849: PUSH
36850: LD_INT 5
36852: PUSH
36853: LD_INT 3
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: LIST
36860: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36861: LD_VAR 0 6
36865: PPUSH
36866: CALL_OW 257
36870: PUSH
36871: LD_INT 14
36873: EQUAL
36874: IFFALSE 36895
// points := [ 10 , 0 , 0 ] ;
36876: LD_ADDR_VAR 0 9
36880: PUSH
36881: LD_INT 10
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36895: LD_VAR 0 6
36899: PPUSH
36900: CALL_OW 257
36904: PUSH
36905: LD_INT 11
36907: EQUAL
36908: IFFALSE 36929
// points := [ 30 , 10 , 5 ] ;
36910: LD_ADDR_VAR 0 9
36914: PUSH
36915: LD_INT 30
36917: PUSH
36918: LD_INT 10
36920: PUSH
36921: LD_INT 5
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: LIST
36928: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36929: LD_VAR 0 1
36933: PPUSH
36934: LD_INT 5
36936: PPUSH
36937: CALL_OW 321
36941: PUSH
36942: LD_INT 2
36944: EQUAL
36945: IFFALSE 36962
// bpoints := bpoints * 1.8 ;
36947: LD_ADDR_VAR 0 10
36951: PUSH
36952: LD_VAR 0 10
36956: PUSH
36957: LD_REAL  1.80000000000000E+0000
36960: MUL
36961: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36962: LD_VAR 0 6
36966: PPUSH
36967: CALL_OW 257
36971: PUSH
36972: LD_INT 1
36974: PUSH
36975: LD_INT 2
36977: PUSH
36978: LD_INT 3
36980: PUSH
36981: LD_INT 4
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: IN
36990: PUSH
36991: LD_VAR 0 1
36995: PPUSH
36996: LD_INT 51
36998: PPUSH
36999: CALL_OW 321
37003: PUSH
37004: LD_INT 2
37006: EQUAL
37007: AND
37008: IFFALSE 37025
// bpoints := bpoints * 1.2 ;
37010: LD_ADDR_VAR 0 10
37014: PUSH
37015: LD_VAR 0 10
37019: PUSH
37020: LD_REAL  1.20000000000000E+0000
37023: MUL
37024: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37025: LD_VAR 0 6
37029: PPUSH
37030: CALL_OW 257
37034: PUSH
37035: LD_INT 5
37037: PUSH
37038: LD_INT 7
37040: PUSH
37041: LD_INT 9
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: LIST
37048: IN
37049: PUSH
37050: LD_VAR 0 1
37054: PPUSH
37055: LD_INT 52
37057: PPUSH
37058: CALL_OW 321
37062: PUSH
37063: LD_INT 2
37065: EQUAL
37066: AND
37067: IFFALSE 37084
// bpoints := bpoints * 1.5 ;
37069: LD_ADDR_VAR 0 10
37073: PUSH
37074: LD_VAR 0 10
37078: PUSH
37079: LD_REAL  1.50000000000000E+0000
37082: MUL
37083: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37084: LD_VAR 0 1
37088: PPUSH
37089: LD_INT 66
37091: PPUSH
37092: CALL_OW 321
37096: PUSH
37097: LD_INT 2
37099: EQUAL
37100: IFFALSE 37117
// bpoints := bpoints * 1.1 ;
37102: LD_ADDR_VAR 0 10
37106: PUSH
37107: LD_VAR 0 10
37111: PUSH
37112: LD_REAL  1.10000000000000E+0000
37115: MUL
37116: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37117: LD_ADDR_VAR 0 10
37121: PUSH
37122: LD_VAR 0 10
37126: PUSH
37127: LD_VAR 0 6
37131: PPUSH
37132: LD_INT 1
37134: PPUSH
37135: CALL_OW 259
37139: PUSH
37140: LD_REAL  1.15000000000000E+0000
37143: MUL
37144: MUL
37145: ST_TO_ADDR
// end ; unit_vehicle :
37146: GO 37974
37148: LD_INT 2
37150: DOUBLE
37151: EQUAL
37152: IFTRUE 37156
37154: GO 37962
37156: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37157: LD_VAR 0 6
37161: PPUSH
37162: CALL_OW 264
37166: PUSH
37167: LD_INT 2
37169: PUSH
37170: LD_INT 42
37172: PUSH
37173: LD_INT 24
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: LIST
37180: IN
37181: IFFALSE 37202
// points := [ 25 , 5 , 3 ] ;
37183: LD_ADDR_VAR 0 9
37187: PUSH
37188: LD_INT 25
37190: PUSH
37191: LD_INT 5
37193: PUSH
37194: LD_INT 3
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37202: LD_VAR 0 6
37206: PPUSH
37207: CALL_OW 264
37211: PUSH
37212: LD_INT 4
37214: PUSH
37215: LD_INT 43
37217: PUSH
37218: LD_INT 25
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: LIST
37225: IN
37226: IFFALSE 37247
// points := [ 40 , 15 , 5 ] ;
37228: LD_ADDR_VAR 0 9
37232: PUSH
37233: LD_INT 40
37235: PUSH
37236: LD_INT 15
37238: PUSH
37239: LD_INT 5
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: LIST
37246: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37247: LD_VAR 0 6
37251: PPUSH
37252: CALL_OW 264
37256: PUSH
37257: LD_INT 3
37259: PUSH
37260: LD_INT 23
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: IN
37267: IFFALSE 37288
// points := [ 7 , 25 , 8 ] ;
37269: LD_ADDR_VAR 0 9
37273: PUSH
37274: LD_INT 7
37276: PUSH
37277: LD_INT 25
37279: PUSH
37280: LD_INT 8
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37288: LD_VAR 0 6
37292: PPUSH
37293: CALL_OW 264
37297: PUSH
37298: LD_INT 5
37300: PUSH
37301: LD_INT 27
37303: PUSH
37304: LD_INT 44
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: LIST
37311: IN
37312: IFFALSE 37333
// points := [ 14 , 50 , 16 ] ;
37314: LD_ADDR_VAR 0 9
37318: PUSH
37319: LD_INT 14
37321: PUSH
37322: LD_INT 50
37324: PUSH
37325: LD_INT 16
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: LIST
37332: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37333: LD_VAR 0 6
37337: PPUSH
37338: CALL_OW 264
37342: PUSH
37343: LD_INT 6
37345: PUSH
37346: LD_INT 46
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: IN
37353: IFFALSE 37374
// points := [ 32 , 120 , 70 ] ;
37355: LD_ADDR_VAR 0 9
37359: PUSH
37360: LD_INT 32
37362: PUSH
37363: LD_INT 120
37365: PUSH
37366: LD_INT 70
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: LIST
37373: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37374: LD_VAR 0 6
37378: PPUSH
37379: CALL_OW 264
37383: PUSH
37384: LD_INT 7
37386: PUSH
37387: LD_INT 28
37389: PUSH
37390: LD_INT 45
37392: PUSH
37393: LD_INT 92
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: IN
37402: IFFALSE 37423
// points := [ 35 , 20 , 45 ] ;
37404: LD_ADDR_VAR 0 9
37408: PUSH
37409: LD_INT 35
37411: PUSH
37412: LD_INT 20
37414: PUSH
37415: LD_INT 45
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: LIST
37422: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37423: LD_VAR 0 6
37427: PPUSH
37428: CALL_OW 264
37432: PUSH
37433: LD_INT 47
37435: PUSH
37436: EMPTY
37437: LIST
37438: IN
37439: IFFALSE 37460
// points := [ 67 , 45 , 75 ] ;
37441: LD_ADDR_VAR 0 9
37445: PUSH
37446: LD_INT 67
37448: PUSH
37449: LD_INT 45
37451: PUSH
37452: LD_INT 75
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: LIST
37459: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37460: LD_VAR 0 6
37464: PPUSH
37465: CALL_OW 264
37469: PUSH
37470: LD_INT 26
37472: PUSH
37473: EMPTY
37474: LIST
37475: IN
37476: IFFALSE 37497
// points := [ 120 , 30 , 80 ] ;
37478: LD_ADDR_VAR 0 9
37482: PUSH
37483: LD_INT 120
37485: PUSH
37486: LD_INT 30
37488: PUSH
37489: LD_INT 80
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: LIST
37496: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37497: LD_VAR 0 6
37501: PPUSH
37502: CALL_OW 264
37506: PUSH
37507: LD_INT 22
37509: PUSH
37510: EMPTY
37511: LIST
37512: IN
37513: IFFALSE 37534
// points := [ 40 , 1 , 1 ] ;
37515: LD_ADDR_VAR 0 9
37519: PUSH
37520: LD_INT 40
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: LIST
37533: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37534: LD_VAR 0 6
37538: PPUSH
37539: CALL_OW 264
37543: PUSH
37544: LD_INT 29
37546: PUSH
37547: EMPTY
37548: LIST
37549: IN
37550: IFFALSE 37571
// points := [ 70 , 200 , 400 ] ;
37552: LD_ADDR_VAR 0 9
37556: PUSH
37557: LD_INT 70
37559: PUSH
37560: LD_INT 200
37562: PUSH
37563: LD_INT 400
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: LIST
37570: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37571: LD_VAR 0 6
37575: PPUSH
37576: CALL_OW 264
37580: PUSH
37581: LD_INT 14
37583: PUSH
37584: LD_INT 53
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: IN
37591: IFFALSE 37612
// points := [ 40 , 10 , 20 ] ;
37593: LD_ADDR_VAR 0 9
37597: PUSH
37598: LD_INT 40
37600: PUSH
37601: LD_INT 10
37603: PUSH
37604: LD_INT 20
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: LIST
37611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37612: LD_VAR 0 6
37616: PPUSH
37617: CALL_OW 264
37621: PUSH
37622: LD_INT 9
37624: PUSH
37625: EMPTY
37626: LIST
37627: IN
37628: IFFALSE 37649
// points := [ 5 , 70 , 20 ] ;
37630: LD_ADDR_VAR 0 9
37634: PUSH
37635: LD_INT 5
37637: PUSH
37638: LD_INT 70
37640: PUSH
37641: LD_INT 20
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: LIST
37648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37649: LD_VAR 0 6
37653: PPUSH
37654: CALL_OW 264
37658: PUSH
37659: LD_INT 10
37661: PUSH
37662: EMPTY
37663: LIST
37664: IN
37665: IFFALSE 37686
// points := [ 35 , 110 , 70 ] ;
37667: LD_ADDR_VAR 0 9
37671: PUSH
37672: LD_INT 35
37674: PUSH
37675: LD_INT 110
37677: PUSH
37678: LD_INT 70
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: LIST
37685: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37686: LD_VAR 0 6
37690: PPUSH
37691: CALL_OW 265
37695: PUSH
37696: LD_INT 25
37698: EQUAL
37699: IFFALSE 37720
// points := [ 80 , 65 , 100 ] ;
37701: LD_ADDR_VAR 0 9
37705: PUSH
37706: LD_INT 80
37708: PUSH
37709: LD_INT 65
37711: PUSH
37712: LD_INT 100
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37720: LD_VAR 0 6
37724: PPUSH
37725: CALL_OW 263
37729: PUSH
37730: LD_INT 1
37732: EQUAL
37733: IFFALSE 37768
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37735: LD_ADDR_VAR 0 10
37739: PUSH
37740: LD_VAR 0 10
37744: PUSH
37745: LD_VAR 0 6
37749: PPUSH
37750: CALL_OW 311
37754: PPUSH
37755: LD_INT 3
37757: PPUSH
37758: CALL_OW 259
37762: PUSH
37763: LD_INT 4
37765: MUL
37766: MUL
37767: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37768: LD_VAR 0 6
37772: PPUSH
37773: CALL_OW 263
37777: PUSH
37778: LD_INT 2
37780: EQUAL
37781: IFFALSE 37832
// begin j := IsControledBy ( i ) ;
37783: LD_ADDR_VAR 0 7
37787: PUSH
37788: LD_VAR 0 6
37792: PPUSH
37793: CALL_OW 312
37797: ST_TO_ADDR
// if j then
37798: LD_VAR 0 7
37802: IFFALSE 37832
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37804: LD_ADDR_VAR 0 10
37808: PUSH
37809: LD_VAR 0 10
37813: PUSH
37814: LD_VAR 0 7
37818: PPUSH
37819: LD_INT 3
37821: PPUSH
37822: CALL_OW 259
37826: PUSH
37827: LD_INT 3
37829: MUL
37830: MUL
37831: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37832: LD_VAR 0 6
37836: PPUSH
37837: CALL_OW 264
37841: PUSH
37842: LD_INT 5
37844: PUSH
37845: LD_INT 6
37847: PUSH
37848: LD_INT 46
37850: PUSH
37851: LD_INT 44
37853: PUSH
37854: LD_INT 47
37856: PUSH
37857: LD_INT 45
37859: PUSH
37860: LD_INT 28
37862: PUSH
37863: LD_INT 7
37865: PUSH
37866: LD_INT 27
37868: PUSH
37869: LD_INT 29
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: IN
37884: PUSH
37885: LD_VAR 0 1
37889: PPUSH
37890: LD_INT 52
37892: PPUSH
37893: CALL_OW 321
37897: PUSH
37898: LD_INT 2
37900: EQUAL
37901: AND
37902: IFFALSE 37919
// bpoints := bpoints * 1.2 ;
37904: LD_ADDR_VAR 0 10
37908: PUSH
37909: LD_VAR 0 10
37913: PUSH
37914: LD_REAL  1.20000000000000E+0000
37917: MUL
37918: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37919: LD_VAR 0 6
37923: PPUSH
37924: CALL_OW 264
37928: PUSH
37929: LD_INT 6
37931: PUSH
37932: LD_INT 46
37934: PUSH
37935: LD_INT 47
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: LIST
37942: IN
37943: IFFALSE 37960
// bpoints := bpoints * 1.2 ;
37945: LD_ADDR_VAR 0 10
37949: PUSH
37950: LD_VAR 0 10
37954: PUSH
37955: LD_REAL  1.20000000000000E+0000
37958: MUL
37959: ST_TO_ADDR
// end ; unit_building :
37960: GO 37974
37962: LD_INT 3
37964: DOUBLE
37965: EQUAL
37966: IFTRUE 37970
37968: GO 37973
37970: POP
// ; end ;
37971: GO 37974
37973: POP
// for j = 1 to 3 do
37974: LD_ADDR_VAR 0 7
37978: PUSH
37979: DOUBLE
37980: LD_INT 1
37982: DEC
37983: ST_TO_ADDR
37984: LD_INT 3
37986: PUSH
37987: FOR_TO
37988: IFFALSE 38041
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37990: LD_ADDR_VAR 0 5
37994: PUSH
37995: LD_VAR 0 5
37999: PPUSH
38000: LD_VAR 0 7
38004: PPUSH
38005: LD_VAR 0 5
38009: PUSH
38010: LD_VAR 0 7
38014: ARRAY
38015: PUSH
38016: LD_VAR 0 9
38020: PUSH
38021: LD_VAR 0 7
38025: ARRAY
38026: PUSH
38027: LD_VAR 0 10
38031: MUL
38032: PLUS
38033: PPUSH
38034: CALL_OW 1
38038: ST_TO_ADDR
38039: GO 37987
38041: POP
38042: POP
// end ;
38043: GO 36522
38045: POP
38046: POP
// result := Replace ( result , 4 , tmp ) ;
38047: LD_ADDR_VAR 0 5
38051: PUSH
38052: LD_VAR 0 5
38056: PPUSH
38057: LD_INT 4
38059: PPUSH
38060: LD_VAR 0 8
38064: PPUSH
38065: CALL_OW 1
38069: ST_TO_ADDR
// end ;
38070: LD_VAR 0 5
38074: RET
// export function DangerAtRange ( unit , range ) ; begin
38075: LD_INT 0
38077: PPUSH
// if not unit then
38078: LD_VAR 0 1
38082: NOT
38083: IFFALSE 38087
// exit ;
38085: GO 38132
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38087: LD_ADDR_VAR 0 3
38091: PUSH
38092: LD_VAR 0 1
38096: PPUSH
38097: CALL_OW 255
38101: PPUSH
38102: LD_VAR 0 1
38106: PPUSH
38107: CALL_OW 250
38111: PPUSH
38112: LD_VAR 0 1
38116: PPUSH
38117: CALL_OW 251
38121: PPUSH
38122: LD_VAR 0 2
38126: PPUSH
38127: CALL 36374 0 4
38131: ST_TO_ADDR
// end ;
38132: LD_VAR 0 3
38136: RET
// export function DangerInArea ( side , area ) ; begin
38137: LD_INT 0
38139: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38140: LD_ADDR_VAR 0 3
38144: PUSH
38145: LD_VAR 0 2
38149: PPUSH
38150: LD_INT 81
38152: PUSH
38153: LD_VAR 0 1
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PPUSH
38162: CALL_OW 70
38166: ST_TO_ADDR
// end ;
38167: LD_VAR 0 3
38171: RET
// export function IsExtension ( b ) ; begin
38172: LD_INT 0
38174: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38175: LD_ADDR_VAR 0 2
38179: PUSH
38180: LD_VAR 0 1
38184: PUSH
38185: LD_INT 23
38187: PUSH
38188: LD_INT 20
38190: PUSH
38191: LD_INT 22
38193: PUSH
38194: LD_INT 17
38196: PUSH
38197: LD_INT 24
38199: PUSH
38200: LD_INT 21
38202: PUSH
38203: LD_INT 19
38205: PUSH
38206: LD_INT 16
38208: PUSH
38209: LD_INT 25
38211: PUSH
38212: LD_INT 18
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: IN
38227: ST_TO_ADDR
// end ;
38228: LD_VAR 0 2
38232: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38233: LD_INT 0
38235: PPUSH
38236: PPUSH
38237: PPUSH
// result := [ ] ;
38238: LD_ADDR_VAR 0 4
38242: PUSH
38243: EMPTY
38244: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38245: LD_ADDR_VAR 0 5
38249: PUSH
38250: LD_VAR 0 2
38254: PPUSH
38255: LD_INT 21
38257: PUSH
38258: LD_INT 3
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PPUSH
38265: CALL_OW 70
38269: ST_TO_ADDR
// if not tmp then
38270: LD_VAR 0 5
38274: NOT
38275: IFFALSE 38279
// exit ;
38277: GO 38343
// if checkLink then
38279: LD_VAR 0 3
38283: IFFALSE 38333
// begin for i in tmp do
38285: LD_ADDR_VAR 0 6
38289: PUSH
38290: LD_VAR 0 5
38294: PUSH
38295: FOR_IN
38296: IFFALSE 38331
// if GetBase ( i ) <> base then
38298: LD_VAR 0 6
38302: PPUSH
38303: CALL_OW 274
38307: PUSH
38308: LD_VAR 0 1
38312: NONEQUAL
38313: IFFALSE 38329
// ComLinkToBase ( base , i ) ;
38315: LD_VAR 0 1
38319: PPUSH
38320: LD_VAR 0 6
38324: PPUSH
38325: CALL_OW 169
38329: GO 38295
38331: POP
38332: POP
// end ; result := tmp ;
38333: LD_ADDR_VAR 0 4
38337: PUSH
38338: LD_VAR 0 5
38342: ST_TO_ADDR
// end ;
38343: LD_VAR 0 4
38347: RET
// export function ComComplete ( units , b ) ; var i ; begin
38348: LD_INT 0
38350: PPUSH
38351: PPUSH
// if not units then
38352: LD_VAR 0 1
38356: NOT
38357: IFFALSE 38361
// exit ;
38359: GO 38451
// for i in units do
38361: LD_ADDR_VAR 0 4
38365: PUSH
38366: LD_VAR 0 1
38370: PUSH
38371: FOR_IN
38372: IFFALSE 38449
// if BuildingStatus ( b ) = bs_build then
38374: LD_VAR 0 2
38378: PPUSH
38379: CALL_OW 461
38383: PUSH
38384: LD_INT 1
38386: EQUAL
38387: IFFALSE 38447
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38389: LD_VAR 0 4
38393: PPUSH
38394: LD_STRING h
38396: PUSH
38397: LD_VAR 0 2
38401: PPUSH
38402: CALL_OW 250
38406: PUSH
38407: LD_VAR 0 2
38411: PPUSH
38412: CALL_OW 251
38416: PUSH
38417: LD_VAR 0 2
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: PUSH
38440: EMPTY
38441: LIST
38442: PPUSH
38443: CALL_OW 446
38447: GO 38371
38449: POP
38450: POP
// end ;
38451: LD_VAR 0 3
38455: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38456: LD_INT 0
38458: PPUSH
38459: PPUSH
38460: PPUSH
38461: PPUSH
38462: PPUSH
38463: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38464: LD_VAR 0 1
38468: NOT
38469: PUSH
38470: LD_VAR 0 1
38474: PPUSH
38475: CALL_OW 263
38479: PUSH
38480: LD_INT 2
38482: NONEQUAL
38483: OR
38484: IFFALSE 38488
// exit ;
38486: GO 38804
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38488: LD_ADDR_VAR 0 6
38492: PUSH
38493: LD_INT 22
38495: PUSH
38496: LD_VAR 0 1
38500: PPUSH
38501: CALL_OW 255
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 2
38512: PUSH
38513: LD_INT 30
38515: PUSH
38516: LD_INT 36
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 34
38525: PUSH
38526: LD_INT 31
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: LIST
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PPUSH
38542: CALL_OW 69
38546: ST_TO_ADDR
// if not tmp then
38547: LD_VAR 0 6
38551: NOT
38552: IFFALSE 38556
// exit ;
38554: GO 38804
// result := [ ] ;
38556: LD_ADDR_VAR 0 2
38560: PUSH
38561: EMPTY
38562: ST_TO_ADDR
// for i in tmp do
38563: LD_ADDR_VAR 0 3
38567: PUSH
38568: LD_VAR 0 6
38572: PUSH
38573: FOR_IN
38574: IFFALSE 38645
// begin t := UnitsInside ( i ) ;
38576: LD_ADDR_VAR 0 4
38580: PUSH
38581: LD_VAR 0 3
38585: PPUSH
38586: CALL_OW 313
38590: ST_TO_ADDR
// if t then
38591: LD_VAR 0 4
38595: IFFALSE 38643
// for j in t do
38597: LD_ADDR_VAR 0 7
38601: PUSH
38602: LD_VAR 0 4
38606: PUSH
38607: FOR_IN
38608: IFFALSE 38641
// result := Replace ( result , result + 1 , j ) ;
38610: LD_ADDR_VAR 0 2
38614: PUSH
38615: LD_VAR 0 2
38619: PPUSH
38620: LD_VAR 0 2
38624: PUSH
38625: LD_INT 1
38627: PLUS
38628: PPUSH
38629: LD_VAR 0 7
38633: PPUSH
38634: CALL_OW 1
38638: ST_TO_ADDR
38639: GO 38607
38641: POP
38642: POP
// end ;
38643: GO 38573
38645: POP
38646: POP
// if not result then
38647: LD_VAR 0 2
38651: NOT
38652: IFFALSE 38656
// exit ;
38654: GO 38804
// mech := result [ 1 ] ;
38656: LD_ADDR_VAR 0 5
38660: PUSH
38661: LD_VAR 0 2
38665: PUSH
38666: LD_INT 1
38668: ARRAY
38669: ST_TO_ADDR
// if result > 1 then
38670: LD_VAR 0 2
38674: PUSH
38675: LD_INT 1
38677: GREATER
38678: IFFALSE 38790
// begin for i = 2 to result do
38680: LD_ADDR_VAR 0 3
38684: PUSH
38685: DOUBLE
38686: LD_INT 2
38688: DEC
38689: ST_TO_ADDR
38690: LD_VAR 0 2
38694: PUSH
38695: FOR_TO
38696: IFFALSE 38788
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38698: LD_ADDR_VAR 0 4
38702: PUSH
38703: LD_VAR 0 2
38707: PUSH
38708: LD_VAR 0 3
38712: ARRAY
38713: PPUSH
38714: LD_INT 3
38716: PPUSH
38717: CALL_OW 259
38721: PUSH
38722: LD_VAR 0 2
38726: PUSH
38727: LD_VAR 0 3
38731: ARRAY
38732: PPUSH
38733: CALL_OW 432
38737: MINUS
38738: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38739: LD_VAR 0 4
38743: PUSH
38744: LD_VAR 0 5
38748: PPUSH
38749: LD_INT 3
38751: PPUSH
38752: CALL_OW 259
38756: PUSH
38757: LD_VAR 0 5
38761: PPUSH
38762: CALL_OW 432
38766: MINUS
38767: GREATEREQUAL
38768: IFFALSE 38786
// mech := result [ i ] ;
38770: LD_ADDR_VAR 0 5
38774: PUSH
38775: LD_VAR 0 2
38779: PUSH
38780: LD_VAR 0 3
38784: ARRAY
38785: ST_TO_ADDR
// end ;
38786: GO 38695
38788: POP
38789: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38790: LD_VAR 0 1
38794: PPUSH
38795: LD_VAR 0 5
38799: PPUSH
38800: CALL_OW 135
// end ;
38804: LD_VAR 0 2
38808: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38809: LD_INT 0
38811: PPUSH
38812: PPUSH
38813: PPUSH
38814: PPUSH
38815: PPUSH
38816: PPUSH
38817: PPUSH
38818: PPUSH
38819: PPUSH
38820: PPUSH
38821: PPUSH
38822: PPUSH
38823: PPUSH
// result := [ ] ;
38824: LD_ADDR_VAR 0 7
38828: PUSH
38829: EMPTY
38830: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38831: LD_VAR 0 1
38835: PPUSH
38836: CALL_OW 266
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: IN
38851: NOT
38852: IFFALSE 38856
// exit ;
38854: GO 40490
// if name then
38856: LD_VAR 0 3
38860: IFFALSE 38876
// SetBName ( base_dep , name ) ;
38862: LD_VAR 0 1
38866: PPUSH
38867: LD_VAR 0 3
38871: PPUSH
38872: CALL_OW 500
// base := GetBase ( base_dep ) ;
38876: LD_ADDR_VAR 0 15
38880: PUSH
38881: LD_VAR 0 1
38885: PPUSH
38886: CALL_OW 274
38890: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38891: LD_ADDR_VAR 0 16
38895: PUSH
38896: LD_VAR 0 1
38900: PPUSH
38901: CALL_OW 255
38905: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38906: LD_ADDR_VAR 0 17
38910: PUSH
38911: LD_VAR 0 1
38915: PPUSH
38916: CALL_OW 248
38920: ST_TO_ADDR
// if sources then
38921: LD_VAR 0 5
38925: IFFALSE 38972
// for i = 1 to 3 do
38927: LD_ADDR_VAR 0 8
38931: PUSH
38932: DOUBLE
38933: LD_INT 1
38935: DEC
38936: ST_TO_ADDR
38937: LD_INT 3
38939: PUSH
38940: FOR_TO
38941: IFFALSE 38970
// AddResourceType ( base , i , sources [ i ] ) ;
38943: LD_VAR 0 15
38947: PPUSH
38948: LD_VAR 0 8
38952: PPUSH
38953: LD_VAR 0 5
38957: PUSH
38958: LD_VAR 0 8
38962: ARRAY
38963: PPUSH
38964: CALL_OW 276
38968: GO 38940
38970: POP
38971: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38972: LD_ADDR_VAR 0 18
38976: PUSH
38977: LD_VAR 0 15
38981: PPUSH
38982: LD_VAR 0 2
38986: PPUSH
38987: LD_INT 1
38989: PPUSH
38990: CALL 38233 0 3
38994: ST_TO_ADDR
// InitHc ;
38995: CALL_OW 19
// InitUc ;
38999: CALL_OW 18
// uc_side := side ;
39003: LD_ADDR_OWVAR 20
39007: PUSH
39008: LD_VAR 0 16
39012: ST_TO_ADDR
// uc_nation := nation ;
39013: LD_ADDR_OWVAR 21
39017: PUSH
39018: LD_VAR 0 17
39022: ST_TO_ADDR
// if buildings then
39023: LD_VAR 0 18
39027: IFFALSE 40349
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39029: LD_ADDR_VAR 0 19
39033: PUSH
39034: LD_VAR 0 18
39038: PPUSH
39039: LD_INT 2
39041: PUSH
39042: LD_INT 30
39044: PUSH
39045: LD_INT 29
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 30
39054: PUSH
39055: LD_INT 30
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: LIST
39066: PPUSH
39067: CALL_OW 72
39071: ST_TO_ADDR
// if tmp then
39072: LD_VAR 0 19
39076: IFFALSE 39124
// for i in tmp do
39078: LD_ADDR_VAR 0 8
39082: PUSH
39083: LD_VAR 0 19
39087: PUSH
39088: FOR_IN
39089: IFFALSE 39122
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39091: LD_VAR 0 8
39095: PPUSH
39096: CALL_OW 250
39100: PPUSH
39101: LD_VAR 0 8
39105: PPUSH
39106: CALL_OW 251
39110: PPUSH
39111: LD_VAR 0 16
39115: PPUSH
39116: CALL_OW 441
39120: GO 39088
39122: POP
39123: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39124: LD_VAR 0 18
39128: PPUSH
39129: LD_INT 2
39131: PUSH
39132: LD_INT 30
39134: PUSH
39135: LD_INT 32
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 30
39144: PUSH
39145: LD_INT 33
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: LIST
39156: PPUSH
39157: CALL_OW 72
39161: IFFALSE 39249
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39163: LD_ADDR_VAR 0 8
39167: PUSH
39168: LD_VAR 0 18
39172: PPUSH
39173: LD_INT 2
39175: PUSH
39176: LD_INT 30
39178: PUSH
39179: LD_INT 32
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 30
39188: PUSH
39189: LD_INT 33
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: LIST
39200: PPUSH
39201: CALL_OW 72
39205: PUSH
39206: FOR_IN
39207: IFFALSE 39247
// begin if not GetBWeapon ( i ) then
39209: LD_VAR 0 8
39213: PPUSH
39214: CALL_OW 269
39218: NOT
39219: IFFALSE 39245
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39221: LD_VAR 0 8
39225: PPUSH
39226: LD_VAR 0 8
39230: PPUSH
39231: LD_VAR 0 2
39235: PPUSH
39236: CALL 40495 0 2
39240: PPUSH
39241: CALL_OW 431
// end ;
39245: GO 39206
39247: POP
39248: POP
// end ; for i = 1 to personel do
39249: LD_ADDR_VAR 0 8
39253: PUSH
39254: DOUBLE
39255: LD_INT 1
39257: DEC
39258: ST_TO_ADDR
39259: LD_VAR 0 6
39263: PUSH
39264: FOR_TO
39265: IFFALSE 40329
// begin if i > 4 then
39267: LD_VAR 0 8
39271: PUSH
39272: LD_INT 4
39274: GREATER
39275: IFFALSE 39279
// break ;
39277: GO 40329
// case i of 1 :
39279: LD_VAR 0 8
39283: PUSH
39284: LD_INT 1
39286: DOUBLE
39287: EQUAL
39288: IFTRUE 39292
39290: GO 39372
39292: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39293: LD_ADDR_VAR 0 12
39297: PUSH
39298: LD_VAR 0 18
39302: PPUSH
39303: LD_INT 22
39305: PUSH
39306: LD_VAR 0 16
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 58
39317: PUSH
39318: EMPTY
39319: LIST
39320: PUSH
39321: LD_INT 2
39323: PUSH
39324: LD_INT 30
39326: PUSH
39327: LD_INT 32
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 30
39336: PUSH
39337: LD_INT 4
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 30
39346: PUSH
39347: LD_INT 5
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: LIST
39364: PPUSH
39365: CALL_OW 72
39369: ST_TO_ADDR
39370: GO 39594
39372: LD_INT 2
39374: DOUBLE
39375: EQUAL
39376: IFTRUE 39380
39378: GO 39442
39380: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39381: LD_ADDR_VAR 0 12
39385: PUSH
39386: LD_VAR 0 18
39390: PPUSH
39391: LD_INT 22
39393: PUSH
39394: LD_VAR 0 16
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 2
39405: PUSH
39406: LD_INT 30
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 30
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: LIST
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PPUSH
39435: CALL_OW 72
39439: ST_TO_ADDR
39440: GO 39594
39442: LD_INT 3
39444: DOUBLE
39445: EQUAL
39446: IFTRUE 39450
39448: GO 39512
39450: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39451: LD_ADDR_VAR 0 12
39455: PUSH
39456: LD_VAR 0 18
39460: PPUSH
39461: LD_INT 22
39463: PUSH
39464: LD_VAR 0 16
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 2
39475: PUSH
39476: LD_INT 30
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 30
39488: PUSH
39489: LD_INT 3
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: LIST
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PPUSH
39505: CALL_OW 72
39509: ST_TO_ADDR
39510: GO 39594
39512: LD_INT 4
39514: DOUBLE
39515: EQUAL
39516: IFTRUE 39520
39518: GO 39593
39520: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39521: LD_ADDR_VAR 0 12
39525: PUSH
39526: LD_VAR 0 18
39530: PPUSH
39531: LD_INT 22
39533: PUSH
39534: LD_VAR 0 16
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: LD_INT 30
39548: PUSH
39549: LD_INT 6
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 30
39558: PUSH
39559: LD_INT 7
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 30
39568: PUSH
39569: LD_INT 8
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PPUSH
39586: CALL_OW 72
39590: ST_TO_ADDR
39591: GO 39594
39593: POP
// if i = 1 then
39594: LD_VAR 0 8
39598: PUSH
39599: LD_INT 1
39601: EQUAL
39602: IFFALSE 39713
// begin tmp := [ ] ;
39604: LD_ADDR_VAR 0 19
39608: PUSH
39609: EMPTY
39610: ST_TO_ADDR
// for j in f do
39611: LD_ADDR_VAR 0 9
39615: PUSH
39616: LD_VAR 0 12
39620: PUSH
39621: FOR_IN
39622: IFFALSE 39695
// if GetBType ( j ) = b_bunker then
39624: LD_VAR 0 9
39628: PPUSH
39629: CALL_OW 266
39633: PUSH
39634: LD_INT 32
39636: EQUAL
39637: IFFALSE 39664
// tmp := Insert ( tmp , 1 , j ) else
39639: LD_ADDR_VAR 0 19
39643: PUSH
39644: LD_VAR 0 19
39648: PPUSH
39649: LD_INT 1
39651: PPUSH
39652: LD_VAR 0 9
39656: PPUSH
39657: CALL_OW 2
39661: ST_TO_ADDR
39662: GO 39693
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39664: LD_ADDR_VAR 0 19
39668: PUSH
39669: LD_VAR 0 19
39673: PPUSH
39674: LD_VAR 0 19
39678: PUSH
39679: LD_INT 1
39681: PLUS
39682: PPUSH
39683: LD_VAR 0 9
39687: PPUSH
39688: CALL_OW 2
39692: ST_TO_ADDR
39693: GO 39621
39695: POP
39696: POP
// if tmp then
39697: LD_VAR 0 19
39701: IFFALSE 39713
// f := tmp ;
39703: LD_ADDR_VAR 0 12
39707: PUSH
39708: LD_VAR 0 19
39712: ST_TO_ADDR
// end ; x := personel [ i ] ;
39713: LD_ADDR_VAR 0 13
39717: PUSH
39718: LD_VAR 0 6
39722: PUSH
39723: LD_VAR 0 8
39727: ARRAY
39728: ST_TO_ADDR
// if x = - 1 then
39729: LD_VAR 0 13
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: EQUAL
39738: IFFALSE 39947
// begin for j in f do
39740: LD_ADDR_VAR 0 9
39744: PUSH
39745: LD_VAR 0 12
39749: PUSH
39750: FOR_IN
39751: IFFALSE 39943
// repeat InitHc ;
39753: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39757: LD_VAR 0 9
39761: PPUSH
39762: CALL_OW 266
39766: PUSH
39767: LD_INT 5
39769: EQUAL
39770: IFFALSE 39840
// begin if UnitsInside ( j ) < 3 then
39772: LD_VAR 0 9
39776: PPUSH
39777: CALL_OW 313
39781: PUSH
39782: LD_INT 3
39784: LESS
39785: IFFALSE 39821
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39787: LD_INT 0
39789: PPUSH
39790: LD_INT 5
39792: PUSH
39793: LD_INT 8
39795: PUSH
39796: LD_INT 9
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: LIST
39803: PUSH
39804: LD_VAR 0 17
39808: ARRAY
39809: PPUSH
39810: LD_VAR 0 4
39814: PPUSH
39815: CALL_OW 380
39819: GO 39838
// PrepareHuman ( false , i , skill ) ;
39821: LD_INT 0
39823: PPUSH
39824: LD_VAR 0 8
39828: PPUSH
39829: LD_VAR 0 4
39833: PPUSH
39834: CALL_OW 380
// end else
39838: GO 39857
// PrepareHuman ( false , i , skill ) ;
39840: LD_INT 0
39842: PPUSH
39843: LD_VAR 0 8
39847: PPUSH
39848: LD_VAR 0 4
39852: PPUSH
39853: CALL_OW 380
// un := CreateHuman ;
39857: LD_ADDR_VAR 0 14
39861: PUSH
39862: CALL_OW 44
39866: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39867: LD_ADDR_VAR 0 7
39871: PUSH
39872: LD_VAR 0 7
39876: PPUSH
39877: LD_INT 1
39879: PPUSH
39880: LD_VAR 0 14
39884: PPUSH
39885: CALL_OW 2
39889: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39890: LD_VAR 0 14
39894: PPUSH
39895: LD_VAR 0 9
39899: PPUSH
39900: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39904: LD_VAR 0 9
39908: PPUSH
39909: CALL_OW 313
39913: PUSH
39914: LD_INT 6
39916: EQUAL
39917: PUSH
39918: LD_VAR 0 9
39922: PPUSH
39923: CALL_OW 266
39927: PUSH
39928: LD_INT 32
39930: PUSH
39931: LD_INT 31
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: IN
39938: OR
39939: IFFALSE 39753
39941: GO 39750
39943: POP
39944: POP
// end else
39945: GO 40327
// for j = 1 to x do
39947: LD_ADDR_VAR 0 9
39951: PUSH
39952: DOUBLE
39953: LD_INT 1
39955: DEC
39956: ST_TO_ADDR
39957: LD_VAR 0 13
39961: PUSH
39962: FOR_TO
39963: IFFALSE 40325
// begin InitHc ;
39965: CALL_OW 19
// if not f then
39969: LD_VAR 0 12
39973: NOT
39974: IFFALSE 40063
// begin PrepareHuman ( false , i , skill ) ;
39976: LD_INT 0
39978: PPUSH
39979: LD_VAR 0 8
39983: PPUSH
39984: LD_VAR 0 4
39988: PPUSH
39989: CALL_OW 380
// un := CreateHuman ;
39993: LD_ADDR_VAR 0 14
39997: PUSH
39998: CALL_OW 44
40002: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40003: LD_ADDR_VAR 0 7
40007: PUSH
40008: LD_VAR 0 7
40012: PPUSH
40013: LD_INT 1
40015: PPUSH
40016: LD_VAR 0 14
40020: PPUSH
40021: CALL_OW 2
40025: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40026: LD_VAR 0 14
40030: PPUSH
40031: LD_VAR 0 1
40035: PPUSH
40036: CALL_OW 250
40040: PPUSH
40041: LD_VAR 0 1
40045: PPUSH
40046: CALL_OW 251
40050: PPUSH
40051: LD_INT 10
40053: PPUSH
40054: LD_INT 0
40056: PPUSH
40057: CALL_OW 50
// continue ;
40061: GO 39962
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40063: LD_VAR 0 12
40067: PUSH
40068: LD_INT 1
40070: ARRAY
40071: PPUSH
40072: CALL_OW 313
40076: PUSH
40077: LD_VAR 0 12
40081: PUSH
40082: LD_INT 1
40084: ARRAY
40085: PPUSH
40086: CALL_OW 266
40090: PUSH
40091: LD_INT 32
40093: PUSH
40094: LD_INT 31
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: IN
40101: AND
40102: PUSH
40103: LD_VAR 0 12
40107: PUSH
40108: LD_INT 1
40110: ARRAY
40111: PPUSH
40112: CALL_OW 313
40116: PUSH
40117: LD_INT 6
40119: EQUAL
40120: OR
40121: IFFALSE 40141
// f := Delete ( f , 1 ) ;
40123: LD_ADDR_VAR 0 12
40127: PUSH
40128: LD_VAR 0 12
40132: PPUSH
40133: LD_INT 1
40135: PPUSH
40136: CALL_OW 3
40140: ST_TO_ADDR
// if not f then
40141: LD_VAR 0 12
40145: NOT
40146: IFFALSE 40164
// begin x := x + 2 ;
40148: LD_ADDR_VAR 0 13
40152: PUSH
40153: LD_VAR 0 13
40157: PUSH
40158: LD_INT 2
40160: PLUS
40161: ST_TO_ADDR
// continue ;
40162: GO 39962
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40164: LD_VAR 0 12
40168: PUSH
40169: LD_INT 1
40171: ARRAY
40172: PPUSH
40173: CALL_OW 266
40177: PUSH
40178: LD_INT 5
40180: EQUAL
40181: IFFALSE 40255
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40183: LD_VAR 0 12
40187: PUSH
40188: LD_INT 1
40190: ARRAY
40191: PPUSH
40192: CALL_OW 313
40196: PUSH
40197: LD_INT 3
40199: LESS
40200: IFFALSE 40236
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40202: LD_INT 0
40204: PPUSH
40205: LD_INT 5
40207: PUSH
40208: LD_INT 8
40210: PUSH
40211: LD_INT 9
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: LIST
40218: PUSH
40219: LD_VAR 0 17
40223: ARRAY
40224: PPUSH
40225: LD_VAR 0 4
40229: PPUSH
40230: CALL_OW 380
40234: GO 40253
// PrepareHuman ( false , i , skill ) ;
40236: LD_INT 0
40238: PPUSH
40239: LD_VAR 0 8
40243: PPUSH
40244: LD_VAR 0 4
40248: PPUSH
40249: CALL_OW 380
// end else
40253: GO 40272
// PrepareHuman ( false , i , skill ) ;
40255: LD_INT 0
40257: PPUSH
40258: LD_VAR 0 8
40262: PPUSH
40263: LD_VAR 0 4
40267: PPUSH
40268: CALL_OW 380
// un := CreateHuman ;
40272: LD_ADDR_VAR 0 14
40276: PUSH
40277: CALL_OW 44
40281: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40282: LD_ADDR_VAR 0 7
40286: PUSH
40287: LD_VAR 0 7
40291: PPUSH
40292: LD_INT 1
40294: PPUSH
40295: LD_VAR 0 14
40299: PPUSH
40300: CALL_OW 2
40304: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40305: LD_VAR 0 14
40309: PPUSH
40310: LD_VAR 0 12
40314: PUSH
40315: LD_INT 1
40317: ARRAY
40318: PPUSH
40319: CALL_OW 52
// end ;
40323: GO 39962
40325: POP
40326: POP
// end ;
40327: GO 39264
40329: POP
40330: POP
// result := result ^ buildings ;
40331: LD_ADDR_VAR 0 7
40335: PUSH
40336: LD_VAR 0 7
40340: PUSH
40341: LD_VAR 0 18
40345: ADD
40346: ST_TO_ADDR
// end else
40347: GO 40490
// begin for i = 1 to personel do
40349: LD_ADDR_VAR 0 8
40353: PUSH
40354: DOUBLE
40355: LD_INT 1
40357: DEC
40358: ST_TO_ADDR
40359: LD_VAR 0 6
40363: PUSH
40364: FOR_TO
40365: IFFALSE 40488
// begin if i > 4 then
40367: LD_VAR 0 8
40371: PUSH
40372: LD_INT 4
40374: GREATER
40375: IFFALSE 40379
// break ;
40377: GO 40488
// x := personel [ i ] ;
40379: LD_ADDR_VAR 0 13
40383: PUSH
40384: LD_VAR 0 6
40388: PUSH
40389: LD_VAR 0 8
40393: ARRAY
40394: ST_TO_ADDR
// if x = - 1 then
40395: LD_VAR 0 13
40399: PUSH
40400: LD_INT 1
40402: NEG
40403: EQUAL
40404: IFFALSE 40408
// continue ;
40406: GO 40364
// PrepareHuman ( false , i , skill ) ;
40408: LD_INT 0
40410: PPUSH
40411: LD_VAR 0 8
40415: PPUSH
40416: LD_VAR 0 4
40420: PPUSH
40421: CALL_OW 380
// un := CreateHuman ;
40425: LD_ADDR_VAR 0 14
40429: PUSH
40430: CALL_OW 44
40434: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40435: LD_VAR 0 14
40439: PPUSH
40440: LD_VAR 0 1
40444: PPUSH
40445: CALL_OW 250
40449: PPUSH
40450: LD_VAR 0 1
40454: PPUSH
40455: CALL_OW 251
40459: PPUSH
40460: LD_INT 10
40462: PPUSH
40463: LD_INT 0
40465: PPUSH
40466: CALL_OW 50
// result := result ^ un ;
40470: LD_ADDR_VAR 0 7
40474: PUSH
40475: LD_VAR 0 7
40479: PUSH
40480: LD_VAR 0 14
40484: ADD
40485: ST_TO_ADDR
// end ;
40486: GO 40364
40488: POP
40489: POP
// end ; end ;
40490: LD_VAR 0 7
40494: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40495: LD_INT 0
40497: PPUSH
40498: PPUSH
40499: PPUSH
40500: PPUSH
40501: PPUSH
40502: PPUSH
40503: PPUSH
40504: PPUSH
40505: PPUSH
40506: PPUSH
40507: PPUSH
40508: PPUSH
40509: PPUSH
40510: PPUSH
40511: PPUSH
40512: PPUSH
// result := false ;
40513: LD_ADDR_VAR 0 3
40517: PUSH
40518: LD_INT 0
40520: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40521: LD_VAR 0 1
40525: NOT
40526: PUSH
40527: LD_VAR 0 1
40531: PPUSH
40532: CALL_OW 266
40536: PUSH
40537: LD_INT 32
40539: PUSH
40540: LD_INT 33
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: IN
40547: NOT
40548: OR
40549: IFFALSE 40553
// exit ;
40551: GO 41662
// nat := GetNation ( tower ) ;
40553: LD_ADDR_VAR 0 12
40557: PUSH
40558: LD_VAR 0 1
40562: PPUSH
40563: CALL_OW 248
40567: ST_TO_ADDR
// side := GetSide ( tower ) ;
40568: LD_ADDR_VAR 0 16
40572: PUSH
40573: LD_VAR 0 1
40577: PPUSH
40578: CALL_OW 255
40582: ST_TO_ADDR
// x := GetX ( tower ) ;
40583: LD_ADDR_VAR 0 10
40587: PUSH
40588: LD_VAR 0 1
40592: PPUSH
40593: CALL_OW 250
40597: ST_TO_ADDR
// y := GetY ( tower ) ;
40598: LD_ADDR_VAR 0 11
40602: PUSH
40603: LD_VAR 0 1
40607: PPUSH
40608: CALL_OW 251
40612: ST_TO_ADDR
// if not x or not y then
40613: LD_VAR 0 10
40617: NOT
40618: PUSH
40619: LD_VAR 0 11
40623: NOT
40624: OR
40625: IFFALSE 40629
// exit ;
40627: GO 41662
// weapon := 0 ;
40629: LD_ADDR_VAR 0 18
40633: PUSH
40634: LD_INT 0
40636: ST_TO_ADDR
// fac_list := [ ] ;
40637: LD_ADDR_VAR 0 17
40641: PUSH
40642: EMPTY
40643: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40644: LD_ADDR_VAR 0 6
40648: PUSH
40649: LD_VAR 0 1
40653: PPUSH
40654: CALL_OW 274
40658: PPUSH
40659: LD_VAR 0 2
40663: PPUSH
40664: LD_INT 0
40666: PPUSH
40667: CALL 38233 0 3
40671: PPUSH
40672: LD_INT 30
40674: PUSH
40675: LD_INT 3
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PPUSH
40682: CALL_OW 72
40686: ST_TO_ADDR
// if not factories then
40687: LD_VAR 0 6
40691: NOT
40692: IFFALSE 40696
// exit ;
40694: GO 41662
// for i in factories do
40696: LD_ADDR_VAR 0 8
40700: PUSH
40701: LD_VAR 0 6
40705: PUSH
40706: FOR_IN
40707: IFFALSE 40732
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40709: LD_ADDR_VAR 0 17
40713: PUSH
40714: LD_VAR 0 17
40718: PUSH
40719: LD_VAR 0 8
40723: PPUSH
40724: CALL_OW 478
40728: UNION
40729: ST_TO_ADDR
40730: GO 40706
40732: POP
40733: POP
// if not fac_list then
40734: LD_VAR 0 17
40738: NOT
40739: IFFALSE 40743
// exit ;
40741: GO 41662
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40743: LD_ADDR_VAR 0 5
40747: PUSH
40748: LD_INT 4
40750: PUSH
40751: LD_INT 5
40753: PUSH
40754: LD_INT 9
40756: PUSH
40757: LD_INT 10
40759: PUSH
40760: LD_INT 6
40762: PUSH
40763: LD_INT 7
40765: PUSH
40766: LD_INT 11
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 27
40780: PUSH
40781: LD_INT 28
40783: PUSH
40784: LD_INT 26
40786: PUSH
40787: LD_INT 30
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 43
40798: PUSH
40799: LD_INT 44
40801: PUSH
40802: LD_INT 46
40804: PUSH
40805: LD_INT 45
40807: PUSH
40808: LD_INT 47
40810: PUSH
40811: LD_INT 49
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: LIST
40826: PUSH
40827: LD_VAR 0 12
40831: ARRAY
40832: ST_TO_ADDR
// list := list isect fac_list ;
40833: LD_ADDR_VAR 0 5
40837: PUSH
40838: LD_VAR 0 5
40842: PUSH
40843: LD_VAR 0 17
40847: ISECT
40848: ST_TO_ADDR
// if not list then
40849: LD_VAR 0 5
40853: NOT
40854: IFFALSE 40858
// exit ;
40856: GO 41662
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40858: LD_VAR 0 12
40862: PUSH
40863: LD_INT 3
40865: EQUAL
40866: PUSH
40867: LD_INT 49
40869: PUSH
40870: LD_VAR 0 5
40874: IN
40875: AND
40876: PUSH
40877: LD_INT 31
40879: PPUSH
40880: LD_VAR 0 16
40884: PPUSH
40885: CALL_OW 321
40889: PUSH
40890: LD_INT 2
40892: EQUAL
40893: AND
40894: IFFALSE 40954
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40896: LD_INT 22
40898: PUSH
40899: LD_VAR 0 16
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 35
40910: PUSH
40911: LD_INT 49
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 91
40920: PUSH
40921: LD_VAR 0 1
40925: PUSH
40926: LD_INT 10
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: LIST
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: LIST
40938: PPUSH
40939: CALL_OW 69
40943: NOT
40944: IFFALSE 40954
// weapon := ru_time_lapser ;
40946: LD_ADDR_VAR 0 18
40950: PUSH
40951: LD_INT 49
40953: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40954: LD_VAR 0 12
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: IN
40969: PUSH
40970: LD_INT 11
40972: PUSH
40973: LD_VAR 0 5
40977: IN
40978: PUSH
40979: LD_INT 30
40981: PUSH
40982: LD_VAR 0 5
40986: IN
40987: OR
40988: AND
40989: PUSH
40990: LD_INT 6
40992: PPUSH
40993: LD_VAR 0 16
40997: PPUSH
40998: CALL_OW 321
41002: PUSH
41003: LD_INT 2
41005: EQUAL
41006: AND
41007: IFFALSE 41172
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41009: LD_INT 22
41011: PUSH
41012: LD_VAR 0 16
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: LD_INT 35
41026: PUSH
41027: LD_INT 11
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 35
41036: PUSH
41037: LD_INT 30
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 91
41051: PUSH
41052: LD_VAR 0 1
41056: PUSH
41057: LD_INT 18
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: LIST
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: LIST
41069: PPUSH
41070: CALL_OW 69
41074: NOT
41075: PUSH
41076: LD_INT 22
41078: PUSH
41079: LD_VAR 0 16
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: LD_INT 30
41093: PUSH
41094: LD_INT 32
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 30
41103: PUSH
41104: LD_INT 33
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 91
41118: PUSH
41119: LD_VAR 0 1
41123: PUSH
41124: LD_INT 12
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: LIST
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: LIST
41136: PUSH
41137: EMPTY
41138: LIST
41139: PPUSH
41140: CALL_OW 69
41144: PUSH
41145: LD_INT 2
41147: GREATER
41148: AND
41149: IFFALSE 41172
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41151: LD_ADDR_VAR 0 18
41155: PUSH
41156: LD_INT 11
41158: PUSH
41159: LD_INT 30
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_VAR 0 12
41170: ARRAY
41171: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41172: LD_VAR 0 18
41176: NOT
41177: PUSH
41178: LD_INT 40
41180: PPUSH
41181: LD_VAR 0 16
41185: PPUSH
41186: CALL_OW 321
41190: PUSH
41191: LD_INT 2
41193: EQUAL
41194: AND
41195: PUSH
41196: LD_INT 7
41198: PUSH
41199: LD_VAR 0 5
41203: IN
41204: PUSH
41205: LD_INT 28
41207: PUSH
41208: LD_VAR 0 5
41212: IN
41213: OR
41214: PUSH
41215: LD_INT 45
41217: PUSH
41218: LD_VAR 0 5
41222: IN
41223: OR
41224: AND
41225: IFFALSE 41479
// begin hex := GetHexInfo ( x , y ) ;
41227: LD_ADDR_VAR 0 4
41231: PUSH
41232: LD_VAR 0 10
41236: PPUSH
41237: LD_VAR 0 11
41241: PPUSH
41242: CALL_OW 546
41246: ST_TO_ADDR
// if hex [ 1 ] then
41247: LD_VAR 0 4
41251: PUSH
41252: LD_INT 1
41254: ARRAY
41255: IFFALSE 41259
// exit ;
41257: GO 41662
// height := hex [ 2 ] ;
41259: LD_ADDR_VAR 0 15
41263: PUSH
41264: LD_VAR 0 4
41268: PUSH
41269: LD_INT 2
41271: ARRAY
41272: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41273: LD_ADDR_VAR 0 14
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 2
41283: PUSH
41284: LD_INT 3
41286: PUSH
41287: LD_INT 5
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: ST_TO_ADDR
// for i in tmp do
41296: LD_ADDR_VAR 0 8
41300: PUSH
41301: LD_VAR 0 14
41305: PUSH
41306: FOR_IN
41307: IFFALSE 41477
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41309: LD_ADDR_VAR 0 9
41313: PUSH
41314: LD_VAR 0 10
41318: PPUSH
41319: LD_VAR 0 8
41323: PPUSH
41324: LD_INT 5
41326: PPUSH
41327: CALL_OW 272
41331: PUSH
41332: LD_VAR 0 11
41336: PPUSH
41337: LD_VAR 0 8
41341: PPUSH
41342: LD_INT 5
41344: PPUSH
41345: CALL_OW 273
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41354: LD_VAR 0 9
41358: PUSH
41359: LD_INT 1
41361: ARRAY
41362: PPUSH
41363: LD_VAR 0 9
41367: PUSH
41368: LD_INT 2
41370: ARRAY
41371: PPUSH
41372: CALL_OW 488
41376: IFFALSE 41475
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41378: LD_ADDR_VAR 0 4
41382: PUSH
41383: LD_VAR 0 9
41387: PUSH
41388: LD_INT 1
41390: ARRAY
41391: PPUSH
41392: LD_VAR 0 9
41396: PUSH
41397: LD_INT 2
41399: ARRAY
41400: PPUSH
41401: CALL_OW 546
41405: ST_TO_ADDR
// if hex [ 1 ] then
41406: LD_VAR 0 4
41410: PUSH
41411: LD_INT 1
41413: ARRAY
41414: IFFALSE 41418
// continue ;
41416: GO 41306
// h := hex [ 2 ] ;
41418: LD_ADDR_VAR 0 13
41422: PUSH
41423: LD_VAR 0 4
41427: PUSH
41428: LD_INT 2
41430: ARRAY
41431: ST_TO_ADDR
// if h + 7 < height then
41432: LD_VAR 0 13
41436: PUSH
41437: LD_INT 7
41439: PLUS
41440: PUSH
41441: LD_VAR 0 15
41445: LESS
41446: IFFALSE 41475
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41448: LD_ADDR_VAR 0 18
41452: PUSH
41453: LD_INT 7
41455: PUSH
41456: LD_INT 28
41458: PUSH
41459: LD_INT 45
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: LIST
41466: PUSH
41467: LD_VAR 0 12
41471: ARRAY
41472: ST_TO_ADDR
// break ;
41473: GO 41477
// end ; end ; end ;
41475: GO 41306
41477: POP
41478: POP
// end ; if not weapon then
41479: LD_VAR 0 18
41483: NOT
41484: IFFALSE 41544
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41486: LD_ADDR_VAR 0 5
41490: PUSH
41491: LD_VAR 0 5
41495: PUSH
41496: LD_INT 11
41498: PUSH
41499: LD_INT 30
41501: PUSH
41502: LD_INT 49
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: DIFF
41510: ST_TO_ADDR
// if not list then
41511: LD_VAR 0 5
41515: NOT
41516: IFFALSE 41520
// exit ;
41518: GO 41662
// weapon := list [ rand ( 1 , list ) ] ;
41520: LD_ADDR_VAR 0 18
41524: PUSH
41525: LD_VAR 0 5
41529: PUSH
41530: LD_INT 1
41532: PPUSH
41533: LD_VAR 0 5
41537: PPUSH
41538: CALL_OW 12
41542: ARRAY
41543: ST_TO_ADDR
// end ; if weapon then
41544: LD_VAR 0 18
41548: IFFALSE 41662
// begin tmp := CostOfWeapon ( weapon ) ;
41550: LD_ADDR_VAR 0 14
41554: PUSH
41555: LD_VAR 0 18
41559: PPUSH
41560: CALL_OW 451
41564: ST_TO_ADDR
// j := GetBase ( tower ) ;
41565: LD_ADDR_VAR 0 9
41569: PUSH
41570: LD_VAR 0 1
41574: PPUSH
41575: CALL_OW 274
41579: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41580: LD_VAR 0 9
41584: PPUSH
41585: LD_INT 1
41587: PPUSH
41588: CALL_OW 275
41592: PUSH
41593: LD_VAR 0 14
41597: PUSH
41598: LD_INT 1
41600: ARRAY
41601: GREATEREQUAL
41602: PUSH
41603: LD_VAR 0 9
41607: PPUSH
41608: LD_INT 2
41610: PPUSH
41611: CALL_OW 275
41615: PUSH
41616: LD_VAR 0 14
41620: PUSH
41621: LD_INT 2
41623: ARRAY
41624: GREATEREQUAL
41625: AND
41626: PUSH
41627: LD_VAR 0 9
41631: PPUSH
41632: LD_INT 3
41634: PPUSH
41635: CALL_OW 275
41639: PUSH
41640: LD_VAR 0 14
41644: PUSH
41645: LD_INT 3
41647: ARRAY
41648: GREATEREQUAL
41649: AND
41650: IFFALSE 41662
// result := weapon ;
41652: LD_ADDR_VAR 0 3
41656: PUSH
41657: LD_VAR 0 18
41661: ST_TO_ADDR
// end ; end ;
41662: LD_VAR 0 3
41666: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41667: LD_INT 0
41669: PPUSH
41670: PPUSH
// result := true ;
41671: LD_ADDR_VAR 0 3
41675: PUSH
41676: LD_INT 1
41678: ST_TO_ADDR
// if array1 = array2 then
41679: LD_VAR 0 1
41683: PUSH
41684: LD_VAR 0 2
41688: EQUAL
41689: IFFALSE 41749
// begin for i = 1 to array1 do
41691: LD_ADDR_VAR 0 4
41695: PUSH
41696: DOUBLE
41697: LD_INT 1
41699: DEC
41700: ST_TO_ADDR
41701: LD_VAR 0 1
41705: PUSH
41706: FOR_TO
41707: IFFALSE 41745
// if array1 [ i ] <> array2 [ i ] then
41709: LD_VAR 0 1
41713: PUSH
41714: LD_VAR 0 4
41718: ARRAY
41719: PUSH
41720: LD_VAR 0 2
41724: PUSH
41725: LD_VAR 0 4
41729: ARRAY
41730: NONEQUAL
41731: IFFALSE 41743
// begin result := false ;
41733: LD_ADDR_VAR 0 3
41737: PUSH
41738: LD_INT 0
41740: ST_TO_ADDR
// break ;
41741: GO 41745
// end ;
41743: GO 41706
41745: POP
41746: POP
// end else
41747: GO 41757
// result := false ;
41749: LD_ADDR_VAR 0 3
41753: PUSH
41754: LD_INT 0
41756: ST_TO_ADDR
// end ;
41757: LD_VAR 0 3
41761: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41762: LD_INT 0
41764: PPUSH
41765: PPUSH
// if not array1 or not array2 then
41766: LD_VAR 0 1
41770: NOT
41771: PUSH
41772: LD_VAR 0 2
41776: NOT
41777: OR
41778: IFFALSE 41782
// exit ;
41780: GO 41846
// result := true ;
41782: LD_ADDR_VAR 0 3
41786: PUSH
41787: LD_INT 1
41789: ST_TO_ADDR
// for i = 1 to array1 do
41790: LD_ADDR_VAR 0 4
41794: PUSH
41795: DOUBLE
41796: LD_INT 1
41798: DEC
41799: ST_TO_ADDR
41800: LD_VAR 0 1
41804: PUSH
41805: FOR_TO
41806: IFFALSE 41844
// if array1 [ i ] <> array2 [ i ] then
41808: LD_VAR 0 1
41812: PUSH
41813: LD_VAR 0 4
41817: ARRAY
41818: PUSH
41819: LD_VAR 0 2
41823: PUSH
41824: LD_VAR 0 4
41828: ARRAY
41829: NONEQUAL
41830: IFFALSE 41842
// begin result := false ;
41832: LD_ADDR_VAR 0 3
41836: PUSH
41837: LD_INT 0
41839: ST_TO_ADDR
// break ;
41840: GO 41844
// end ;
41842: GO 41805
41844: POP
41845: POP
// end ;
41846: LD_VAR 0 3
41850: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41851: LD_INT 0
41853: PPUSH
41854: PPUSH
41855: PPUSH
// pom := GetBase ( fac ) ;
41856: LD_ADDR_VAR 0 5
41860: PUSH
41861: LD_VAR 0 1
41865: PPUSH
41866: CALL_OW 274
41870: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41871: LD_ADDR_VAR 0 4
41875: PUSH
41876: LD_VAR 0 2
41880: PUSH
41881: LD_INT 1
41883: ARRAY
41884: PPUSH
41885: LD_VAR 0 2
41889: PUSH
41890: LD_INT 2
41892: ARRAY
41893: PPUSH
41894: LD_VAR 0 2
41898: PUSH
41899: LD_INT 3
41901: ARRAY
41902: PPUSH
41903: LD_VAR 0 2
41907: PUSH
41908: LD_INT 4
41910: ARRAY
41911: PPUSH
41912: CALL_OW 449
41916: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41917: LD_ADDR_VAR 0 3
41921: PUSH
41922: LD_VAR 0 5
41926: PPUSH
41927: LD_INT 1
41929: PPUSH
41930: CALL_OW 275
41934: PUSH
41935: LD_VAR 0 4
41939: PUSH
41940: LD_INT 1
41942: ARRAY
41943: GREATEREQUAL
41944: PUSH
41945: LD_VAR 0 5
41949: PPUSH
41950: LD_INT 2
41952: PPUSH
41953: CALL_OW 275
41957: PUSH
41958: LD_VAR 0 4
41962: PUSH
41963: LD_INT 2
41965: ARRAY
41966: GREATEREQUAL
41967: AND
41968: PUSH
41969: LD_VAR 0 5
41973: PPUSH
41974: LD_INT 3
41976: PPUSH
41977: CALL_OW 275
41981: PUSH
41982: LD_VAR 0 4
41986: PUSH
41987: LD_INT 3
41989: ARRAY
41990: GREATEREQUAL
41991: AND
41992: ST_TO_ADDR
// end ;
41993: LD_VAR 0 3
41997: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41998: LD_INT 0
42000: PPUSH
42001: PPUSH
42002: PPUSH
42003: PPUSH
// pom := GetBase ( building ) ;
42004: LD_ADDR_VAR 0 3
42008: PUSH
42009: LD_VAR 0 1
42013: PPUSH
42014: CALL_OW 274
42018: ST_TO_ADDR
// if not pom then
42019: LD_VAR 0 3
42023: NOT
42024: IFFALSE 42028
// exit ;
42026: GO 42198
// btype := GetBType ( building ) ;
42028: LD_ADDR_VAR 0 5
42032: PUSH
42033: LD_VAR 0 1
42037: PPUSH
42038: CALL_OW 266
42042: ST_TO_ADDR
// if btype = b_armoury then
42043: LD_VAR 0 5
42047: PUSH
42048: LD_INT 4
42050: EQUAL
42051: IFFALSE 42061
// btype := b_barracks ;
42053: LD_ADDR_VAR 0 5
42057: PUSH
42058: LD_INT 5
42060: ST_TO_ADDR
// if btype = b_depot then
42061: LD_VAR 0 5
42065: PUSH
42066: LD_INT 0
42068: EQUAL
42069: IFFALSE 42079
// btype := b_warehouse ;
42071: LD_ADDR_VAR 0 5
42075: PUSH
42076: LD_INT 1
42078: ST_TO_ADDR
// if btype = b_workshop then
42079: LD_VAR 0 5
42083: PUSH
42084: LD_INT 2
42086: EQUAL
42087: IFFALSE 42097
// btype := b_factory ;
42089: LD_ADDR_VAR 0 5
42093: PUSH
42094: LD_INT 3
42096: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42097: LD_ADDR_VAR 0 4
42101: PUSH
42102: LD_VAR 0 5
42106: PPUSH
42107: LD_VAR 0 1
42111: PPUSH
42112: CALL_OW 248
42116: PPUSH
42117: CALL_OW 450
42121: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42122: LD_ADDR_VAR 0 2
42126: PUSH
42127: LD_VAR 0 3
42131: PPUSH
42132: LD_INT 1
42134: PPUSH
42135: CALL_OW 275
42139: PUSH
42140: LD_VAR 0 4
42144: PUSH
42145: LD_INT 1
42147: ARRAY
42148: GREATEREQUAL
42149: PUSH
42150: LD_VAR 0 3
42154: PPUSH
42155: LD_INT 2
42157: PPUSH
42158: CALL_OW 275
42162: PUSH
42163: LD_VAR 0 4
42167: PUSH
42168: LD_INT 2
42170: ARRAY
42171: GREATEREQUAL
42172: AND
42173: PUSH
42174: LD_VAR 0 3
42178: PPUSH
42179: LD_INT 3
42181: PPUSH
42182: CALL_OW 275
42186: PUSH
42187: LD_VAR 0 4
42191: PUSH
42192: LD_INT 3
42194: ARRAY
42195: GREATEREQUAL
42196: AND
42197: ST_TO_ADDR
// end ;
42198: LD_VAR 0 2
42202: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42203: LD_INT 0
42205: PPUSH
42206: PPUSH
42207: PPUSH
// pom := GetBase ( building ) ;
42208: LD_ADDR_VAR 0 4
42212: PUSH
42213: LD_VAR 0 1
42217: PPUSH
42218: CALL_OW 274
42222: ST_TO_ADDR
// if not pom then
42223: LD_VAR 0 4
42227: NOT
42228: IFFALSE 42232
// exit ;
42230: GO 42333
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42232: LD_ADDR_VAR 0 5
42236: PUSH
42237: LD_VAR 0 2
42241: PPUSH
42242: LD_VAR 0 1
42246: PPUSH
42247: CALL_OW 248
42251: PPUSH
42252: CALL_OW 450
42256: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42257: LD_ADDR_VAR 0 3
42261: PUSH
42262: LD_VAR 0 4
42266: PPUSH
42267: LD_INT 1
42269: PPUSH
42270: CALL_OW 275
42274: PUSH
42275: LD_VAR 0 5
42279: PUSH
42280: LD_INT 1
42282: ARRAY
42283: GREATEREQUAL
42284: PUSH
42285: LD_VAR 0 4
42289: PPUSH
42290: LD_INT 2
42292: PPUSH
42293: CALL_OW 275
42297: PUSH
42298: LD_VAR 0 5
42302: PUSH
42303: LD_INT 2
42305: ARRAY
42306: GREATEREQUAL
42307: AND
42308: PUSH
42309: LD_VAR 0 4
42313: PPUSH
42314: LD_INT 3
42316: PPUSH
42317: CALL_OW 275
42321: PUSH
42322: LD_VAR 0 5
42326: PUSH
42327: LD_INT 3
42329: ARRAY
42330: GREATEREQUAL
42331: AND
42332: ST_TO_ADDR
// end ;
42333: LD_VAR 0 3
42337: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42338: LD_INT 0
42340: PPUSH
42341: PPUSH
42342: PPUSH
42343: PPUSH
42344: PPUSH
42345: PPUSH
42346: PPUSH
42347: PPUSH
42348: PPUSH
42349: PPUSH
42350: PPUSH
// result := false ;
42351: LD_ADDR_VAR 0 8
42355: PUSH
42356: LD_INT 0
42358: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42359: LD_VAR 0 5
42363: NOT
42364: PUSH
42365: LD_VAR 0 1
42369: NOT
42370: OR
42371: PUSH
42372: LD_VAR 0 2
42376: NOT
42377: OR
42378: PUSH
42379: LD_VAR 0 3
42383: NOT
42384: OR
42385: IFFALSE 42389
// exit ;
42387: GO 43203
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42389: LD_ADDR_VAR 0 14
42393: PUSH
42394: LD_VAR 0 1
42398: PPUSH
42399: LD_VAR 0 2
42403: PPUSH
42404: LD_VAR 0 3
42408: PPUSH
42409: LD_VAR 0 4
42413: PPUSH
42414: LD_VAR 0 5
42418: PUSH
42419: LD_INT 1
42421: ARRAY
42422: PPUSH
42423: CALL_OW 248
42427: PPUSH
42428: LD_INT 0
42430: PPUSH
42431: CALL 44456 0 6
42435: ST_TO_ADDR
// if not hexes then
42436: LD_VAR 0 14
42440: NOT
42441: IFFALSE 42445
// exit ;
42443: GO 43203
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42445: LD_ADDR_VAR 0 17
42449: PUSH
42450: LD_VAR 0 5
42454: PPUSH
42455: LD_INT 22
42457: PUSH
42458: LD_VAR 0 13
42462: PPUSH
42463: CALL_OW 255
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: LD_INT 30
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 30
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: LIST
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PPUSH
42504: CALL_OW 72
42508: ST_TO_ADDR
// for i = 1 to hexes do
42509: LD_ADDR_VAR 0 9
42513: PUSH
42514: DOUBLE
42515: LD_INT 1
42517: DEC
42518: ST_TO_ADDR
42519: LD_VAR 0 14
42523: PUSH
42524: FOR_TO
42525: IFFALSE 43201
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42527: LD_ADDR_VAR 0 13
42531: PUSH
42532: LD_VAR 0 14
42536: PUSH
42537: LD_VAR 0 9
42541: ARRAY
42542: PUSH
42543: LD_INT 1
42545: ARRAY
42546: PPUSH
42547: LD_VAR 0 14
42551: PUSH
42552: LD_VAR 0 9
42556: ARRAY
42557: PUSH
42558: LD_INT 2
42560: ARRAY
42561: PPUSH
42562: CALL_OW 428
42566: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42567: LD_VAR 0 14
42571: PUSH
42572: LD_VAR 0 9
42576: ARRAY
42577: PUSH
42578: LD_INT 1
42580: ARRAY
42581: PPUSH
42582: LD_VAR 0 14
42586: PUSH
42587: LD_VAR 0 9
42591: ARRAY
42592: PUSH
42593: LD_INT 2
42595: ARRAY
42596: PPUSH
42597: CALL_OW 351
42601: PUSH
42602: LD_VAR 0 14
42606: PUSH
42607: LD_VAR 0 9
42611: ARRAY
42612: PUSH
42613: LD_INT 1
42615: ARRAY
42616: PPUSH
42617: LD_VAR 0 14
42621: PUSH
42622: LD_VAR 0 9
42626: ARRAY
42627: PUSH
42628: LD_INT 2
42630: ARRAY
42631: PPUSH
42632: CALL_OW 488
42636: NOT
42637: OR
42638: PUSH
42639: LD_VAR 0 13
42643: PPUSH
42644: CALL_OW 247
42648: PUSH
42649: LD_INT 3
42651: EQUAL
42652: OR
42653: IFFALSE 42659
// exit ;
42655: POP
42656: POP
42657: GO 43203
// if not tmp then
42659: LD_VAR 0 13
42663: NOT
42664: IFFALSE 42668
// continue ;
42666: GO 42524
// result := true ;
42668: LD_ADDR_VAR 0 8
42672: PUSH
42673: LD_INT 1
42675: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42676: LD_VAR 0 6
42680: PUSH
42681: LD_VAR 0 13
42685: PPUSH
42686: CALL_OW 247
42690: PUSH
42691: LD_INT 2
42693: EQUAL
42694: AND
42695: PUSH
42696: LD_VAR 0 13
42700: PPUSH
42701: CALL_OW 263
42705: PUSH
42706: LD_INT 1
42708: EQUAL
42709: AND
42710: IFFALSE 42874
// begin if IsDrivenBy ( tmp ) then
42712: LD_VAR 0 13
42716: PPUSH
42717: CALL_OW 311
42721: IFFALSE 42725
// continue ;
42723: GO 42524
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42725: LD_VAR 0 6
42729: PPUSH
42730: LD_INT 3
42732: PUSH
42733: LD_INT 60
42735: PUSH
42736: EMPTY
42737: LIST
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 3
42745: PUSH
42746: LD_INT 55
42748: PUSH
42749: EMPTY
42750: LIST
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PPUSH
42760: CALL_OW 72
42764: IFFALSE 42872
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42766: LD_ADDR_VAR 0 18
42770: PUSH
42771: LD_VAR 0 6
42775: PPUSH
42776: LD_INT 3
42778: PUSH
42779: LD_INT 60
42781: PUSH
42782: EMPTY
42783: LIST
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 3
42791: PUSH
42792: LD_INT 55
42794: PUSH
42795: EMPTY
42796: LIST
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PPUSH
42806: CALL_OW 72
42810: PUSH
42811: LD_INT 1
42813: ARRAY
42814: ST_TO_ADDR
// if IsInUnit ( driver ) then
42815: LD_VAR 0 18
42819: PPUSH
42820: CALL_OW 310
42824: IFFALSE 42835
// ComExit ( driver ) ;
42826: LD_VAR 0 18
42830: PPUSH
42831: CALL 68235 0 1
// AddComEnterUnit ( driver , tmp ) ;
42835: LD_VAR 0 18
42839: PPUSH
42840: LD_VAR 0 13
42844: PPUSH
42845: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42849: LD_VAR 0 18
42853: PPUSH
42854: LD_VAR 0 7
42858: PPUSH
42859: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42863: LD_VAR 0 18
42867: PPUSH
42868: CALL_OW 181
// end ; continue ;
42872: GO 42524
// end ; if not cleaners or not tmp in cleaners then
42874: LD_VAR 0 6
42878: NOT
42879: PUSH
42880: LD_VAR 0 13
42884: PUSH
42885: LD_VAR 0 6
42889: IN
42890: NOT
42891: OR
42892: IFFALSE 43199
// begin if dep then
42894: LD_VAR 0 17
42898: IFFALSE 43034
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42900: LD_ADDR_VAR 0 16
42904: PUSH
42905: LD_VAR 0 17
42909: PUSH
42910: LD_INT 1
42912: ARRAY
42913: PPUSH
42914: CALL_OW 250
42918: PPUSH
42919: LD_VAR 0 17
42923: PUSH
42924: LD_INT 1
42926: ARRAY
42927: PPUSH
42928: CALL_OW 254
42932: PPUSH
42933: LD_INT 5
42935: PPUSH
42936: CALL_OW 272
42940: PUSH
42941: LD_VAR 0 17
42945: PUSH
42946: LD_INT 1
42948: ARRAY
42949: PPUSH
42950: CALL_OW 251
42954: PPUSH
42955: LD_VAR 0 17
42959: PUSH
42960: LD_INT 1
42962: ARRAY
42963: PPUSH
42964: CALL_OW 254
42968: PPUSH
42969: LD_INT 5
42971: PPUSH
42972: CALL_OW 273
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42981: LD_VAR 0 16
42985: PUSH
42986: LD_INT 1
42988: ARRAY
42989: PPUSH
42990: LD_VAR 0 16
42994: PUSH
42995: LD_INT 2
42997: ARRAY
42998: PPUSH
42999: CALL_OW 488
43003: IFFALSE 43034
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43005: LD_VAR 0 13
43009: PPUSH
43010: LD_VAR 0 16
43014: PUSH
43015: LD_INT 1
43017: ARRAY
43018: PPUSH
43019: LD_VAR 0 16
43023: PUSH
43024: LD_INT 2
43026: ARRAY
43027: PPUSH
43028: CALL_OW 111
// continue ;
43032: GO 42524
// end ; end ; r := GetDir ( tmp ) ;
43034: LD_ADDR_VAR 0 15
43038: PUSH
43039: LD_VAR 0 13
43043: PPUSH
43044: CALL_OW 254
43048: ST_TO_ADDR
// if r = 5 then
43049: LD_VAR 0 15
43053: PUSH
43054: LD_INT 5
43056: EQUAL
43057: IFFALSE 43067
// r := 0 ;
43059: LD_ADDR_VAR 0 15
43063: PUSH
43064: LD_INT 0
43066: ST_TO_ADDR
// for j = r to 5 do
43067: LD_ADDR_VAR 0 10
43071: PUSH
43072: DOUBLE
43073: LD_VAR 0 15
43077: DEC
43078: ST_TO_ADDR
43079: LD_INT 5
43081: PUSH
43082: FOR_TO
43083: IFFALSE 43197
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43085: LD_ADDR_VAR 0 11
43089: PUSH
43090: LD_VAR 0 13
43094: PPUSH
43095: CALL_OW 250
43099: PPUSH
43100: LD_VAR 0 10
43104: PPUSH
43105: LD_INT 2
43107: PPUSH
43108: CALL_OW 272
43112: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43113: LD_ADDR_VAR 0 12
43117: PUSH
43118: LD_VAR 0 13
43122: PPUSH
43123: CALL_OW 251
43127: PPUSH
43128: LD_VAR 0 10
43132: PPUSH
43133: LD_INT 2
43135: PPUSH
43136: CALL_OW 273
43140: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43141: LD_VAR 0 11
43145: PPUSH
43146: LD_VAR 0 12
43150: PPUSH
43151: CALL_OW 488
43155: PUSH
43156: LD_VAR 0 11
43160: PPUSH
43161: LD_VAR 0 12
43165: PPUSH
43166: CALL_OW 428
43170: NOT
43171: AND
43172: IFFALSE 43195
// begin ComMoveXY ( tmp , _x , _y ) ;
43174: LD_VAR 0 13
43178: PPUSH
43179: LD_VAR 0 11
43183: PPUSH
43184: LD_VAR 0 12
43188: PPUSH
43189: CALL_OW 111
// break ;
43193: GO 43197
// end ; end ;
43195: GO 43082
43197: POP
43198: POP
// end ; end ;
43199: GO 42524
43201: POP
43202: POP
// end ;
43203: LD_VAR 0 8
43207: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43208: LD_INT 0
43210: PPUSH
// result := true ;
43211: LD_ADDR_VAR 0 3
43215: PUSH
43216: LD_INT 1
43218: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43219: LD_VAR 0 2
43223: PUSH
43224: LD_INT 24
43226: DOUBLE
43227: EQUAL
43228: IFTRUE 43238
43230: LD_INT 33
43232: DOUBLE
43233: EQUAL
43234: IFTRUE 43238
43236: GO 43263
43238: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43239: LD_ADDR_VAR 0 3
43243: PUSH
43244: LD_INT 32
43246: PPUSH
43247: LD_VAR 0 1
43251: PPUSH
43252: CALL_OW 321
43256: PUSH
43257: LD_INT 2
43259: EQUAL
43260: ST_TO_ADDR
43261: GO 43579
43263: LD_INT 20
43265: DOUBLE
43266: EQUAL
43267: IFTRUE 43271
43269: GO 43296
43271: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43272: LD_ADDR_VAR 0 3
43276: PUSH
43277: LD_INT 6
43279: PPUSH
43280: LD_VAR 0 1
43284: PPUSH
43285: CALL_OW 321
43289: PUSH
43290: LD_INT 2
43292: EQUAL
43293: ST_TO_ADDR
43294: GO 43579
43296: LD_INT 22
43298: DOUBLE
43299: EQUAL
43300: IFTRUE 43310
43302: LD_INT 36
43304: DOUBLE
43305: EQUAL
43306: IFTRUE 43310
43308: GO 43335
43310: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43311: LD_ADDR_VAR 0 3
43315: PUSH
43316: LD_INT 15
43318: PPUSH
43319: LD_VAR 0 1
43323: PPUSH
43324: CALL_OW 321
43328: PUSH
43329: LD_INT 2
43331: EQUAL
43332: ST_TO_ADDR
43333: GO 43579
43335: LD_INT 30
43337: DOUBLE
43338: EQUAL
43339: IFTRUE 43343
43341: GO 43368
43343: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43344: LD_ADDR_VAR 0 3
43348: PUSH
43349: LD_INT 20
43351: PPUSH
43352: LD_VAR 0 1
43356: PPUSH
43357: CALL_OW 321
43361: PUSH
43362: LD_INT 2
43364: EQUAL
43365: ST_TO_ADDR
43366: GO 43579
43368: LD_INT 28
43370: DOUBLE
43371: EQUAL
43372: IFTRUE 43382
43374: LD_INT 21
43376: DOUBLE
43377: EQUAL
43378: IFTRUE 43382
43380: GO 43407
43382: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43383: LD_ADDR_VAR 0 3
43387: PUSH
43388: LD_INT 21
43390: PPUSH
43391: LD_VAR 0 1
43395: PPUSH
43396: CALL_OW 321
43400: PUSH
43401: LD_INT 2
43403: EQUAL
43404: ST_TO_ADDR
43405: GO 43579
43407: LD_INT 16
43409: DOUBLE
43410: EQUAL
43411: IFTRUE 43415
43413: GO 43440
43415: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43416: LD_ADDR_VAR 0 3
43420: PUSH
43421: LD_INT 84
43423: PPUSH
43424: LD_VAR 0 1
43428: PPUSH
43429: CALL_OW 321
43433: PUSH
43434: LD_INT 2
43436: EQUAL
43437: ST_TO_ADDR
43438: GO 43579
43440: LD_INT 19
43442: DOUBLE
43443: EQUAL
43444: IFTRUE 43454
43446: LD_INT 23
43448: DOUBLE
43449: EQUAL
43450: IFTRUE 43454
43452: GO 43479
43454: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43455: LD_ADDR_VAR 0 3
43459: PUSH
43460: LD_INT 83
43462: PPUSH
43463: LD_VAR 0 1
43467: PPUSH
43468: CALL_OW 321
43472: PUSH
43473: LD_INT 2
43475: EQUAL
43476: ST_TO_ADDR
43477: GO 43579
43479: LD_INT 17
43481: DOUBLE
43482: EQUAL
43483: IFTRUE 43487
43485: GO 43512
43487: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43488: LD_ADDR_VAR 0 3
43492: PUSH
43493: LD_INT 39
43495: PPUSH
43496: LD_VAR 0 1
43500: PPUSH
43501: CALL_OW 321
43505: PUSH
43506: LD_INT 2
43508: EQUAL
43509: ST_TO_ADDR
43510: GO 43579
43512: LD_INT 18
43514: DOUBLE
43515: EQUAL
43516: IFTRUE 43520
43518: GO 43545
43520: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43521: LD_ADDR_VAR 0 3
43525: PUSH
43526: LD_INT 40
43528: PPUSH
43529: LD_VAR 0 1
43533: PPUSH
43534: CALL_OW 321
43538: PUSH
43539: LD_INT 2
43541: EQUAL
43542: ST_TO_ADDR
43543: GO 43579
43545: LD_INT 27
43547: DOUBLE
43548: EQUAL
43549: IFTRUE 43553
43551: GO 43578
43553: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43554: LD_ADDR_VAR 0 3
43558: PUSH
43559: LD_INT 35
43561: PPUSH
43562: LD_VAR 0 1
43566: PPUSH
43567: CALL_OW 321
43571: PUSH
43572: LD_INT 2
43574: EQUAL
43575: ST_TO_ADDR
43576: GO 43579
43578: POP
// end ;
43579: LD_VAR 0 3
43583: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43584: LD_INT 0
43586: PPUSH
43587: PPUSH
43588: PPUSH
43589: PPUSH
43590: PPUSH
43591: PPUSH
43592: PPUSH
43593: PPUSH
43594: PPUSH
43595: PPUSH
43596: PPUSH
// result := false ;
43597: LD_ADDR_VAR 0 6
43601: PUSH
43602: LD_INT 0
43604: ST_TO_ADDR
// if btype = b_depot then
43605: LD_VAR 0 2
43609: PUSH
43610: LD_INT 0
43612: EQUAL
43613: IFFALSE 43625
// begin result := true ;
43615: LD_ADDR_VAR 0 6
43619: PUSH
43620: LD_INT 1
43622: ST_TO_ADDR
// exit ;
43623: GO 44451
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43625: LD_VAR 0 1
43629: NOT
43630: PUSH
43631: LD_VAR 0 1
43635: PPUSH
43636: CALL_OW 266
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: IN
43651: NOT
43652: OR
43653: PUSH
43654: LD_VAR 0 2
43658: NOT
43659: OR
43660: PUSH
43661: LD_VAR 0 5
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: LD_INT 2
43674: PUSH
43675: LD_INT 3
43677: PUSH
43678: LD_INT 4
43680: PUSH
43681: LD_INT 5
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: IN
43692: NOT
43693: OR
43694: PUSH
43695: LD_VAR 0 3
43699: PPUSH
43700: LD_VAR 0 4
43704: PPUSH
43705: CALL_OW 488
43709: NOT
43710: OR
43711: IFFALSE 43715
// exit ;
43713: GO 44451
// side := GetSide ( depot ) ;
43715: LD_ADDR_VAR 0 9
43719: PUSH
43720: LD_VAR 0 1
43724: PPUSH
43725: CALL_OW 255
43729: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43730: LD_VAR 0 9
43734: PPUSH
43735: LD_VAR 0 2
43739: PPUSH
43740: CALL 43208 0 2
43744: NOT
43745: IFFALSE 43749
// exit ;
43747: GO 44451
// pom := GetBase ( depot ) ;
43749: LD_ADDR_VAR 0 10
43753: PUSH
43754: LD_VAR 0 1
43758: PPUSH
43759: CALL_OW 274
43763: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43764: LD_ADDR_VAR 0 11
43768: PUSH
43769: LD_VAR 0 2
43773: PPUSH
43774: LD_VAR 0 1
43778: PPUSH
43779: CALL_OW 248
43783: PPUSH
43784: CALL_OW 450
43788: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43789: LD_VAR 0 10
43793: PPUSH
43794: LD_INT 1
43796: PPUSH
43797: CALL_OW 275
43801: PUSH
43802: LD_VAR 0 11
43806: PUSH
43807: LD_INT 1
43809: ARRAY
43810: GREATEREQUAL
43811: PUSH
43812: LD_VAR 0 10
43816: PPUSH
43817: LD_INT 2
43819: PPUSH
43820: CALL_OW 275
43824: PUSH
43825: LD_VAR 0 11
43829: PUSH
43830: LD_INT 2
43832: ARRAY
43833: GREATEREQUAL
43834: AND
43835: PUSH
43836: LD_VAR 0 10
43840: PPUSH
43841: LD_INT 3
43843: PPUSH
43844: CALL_OW 275
43848: PUSH
43849: LD_VAR 0 11
43853: PUSH
43854: LD_INT 3
43856: ARRAY
43857: GREATEREQUAL
43858: AND
43859: NOT
43860: IFFALSE 43864
// exit ;
43862: GO 44451
// if GetBType ( depot ) = b_depot then
43864: LD_VAR 0 1
43868: PPUSH
43869: CALL_OW 266
43873: PUSH
43874: LD_INT 0
43876: EQUAL
43877: IFFALSE 43889
// dist := 28 else
43879: LD_ADDR_VAR 0 14
43883: PUSH
43884: LD_INT 28
43886: ST_TO_ADDR
43887: GO 43897
// dist := 36 ;
43889: LD_ADDR_VAR 0 14
43893: PUSH
43894: LD_INT 36
43896: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43897: LD_VAR 0 1
43901: PPUSH
43902: LD_VAR 0 3
43906: PPUSH
43907: LD_VAR 0 4
43911: PPUSH
43912: CALL_OW 297
43916: PUSH
43917: LD_VAR 0 14
43921: GREATER
43922: IFFALSE 43926
// exit ;
43924: GO 44451
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43926: LD_ADDR_VAR 0 12
43930: PUSH
43931: LD_VAR 0 2
43935: PPUSH
43936: LD_VAR 0 3
43940: PPUSH
43941: LD_VAR 0 4
43945: PPUSH
43946: LD_VAR 0 5
43950: PPUSH
43951: LD_VAR 0 1
43955: PPUSH
43956: CALL_OW 248
43960: PPUSH
43961: LD_INT 0
43963: PPUSH
43964: CALL 44456 0 6
43968: ST_TO_ADDR
// if not hexes then
43969: LD_VAR 0 12
43973: NOT
43974: IFFALSE 43978
// exit ;
43976: GO 44451
// hex := GetHexInfo ( x , y ) ;
43978: LD_ADDR_VAR 0 15
43982: PUSH
43983: LD_VAR 0 3
43987: PPUSH
43988: LD_VAR 0 4
43992: PPUSH
43993: CALL_OW 546
43997: ST_TO_ADDR
// if hex [ 1 ] then
43998: LD_VAR 0 15
44002: PUSH
44003: LD_INT 1
44005: ARRAY
44006: IFFALSE 44010
// exit ;
44008: GO 44451
// height := hex [ 2 ] ;
44010: LD_ADDR_VAR 0 13
44014: PUSH
44015: LD_VAR 0 15
44019: PUSH
44020: LD_INT 2
44022: ARRAY
44023: ST_TO_ADDR
// for i = 1 to hexes do
44024: LD_ADDR_VAR 0 7
44028: PUSH
44029: DOUBLE
44030: LD_INT 1
44032: DEC
44033: ST_TO_ADDR
44034: LD_VAR 0 12
44038: PUSH
44039: FOR_TO
44040: IFFALSE 44370
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44042: LD_VAR 0 12
44046: PUSH
44047: LD_VAR 0 7
44051: ARRAY
44052: PUSH
44053: LD_INT 1
44055: ARRAY
44056: PPUSH
44057: LD_VAR 0 12
44061: PUSH
44062: LD_VAR 0 7
44066: ARRAY
44067: PUSH
44068: LD_INT 2
44070: ARRAY
44071: PPUSH
44072: CALL_OW 488
44076: NOT
44077: PUSH
44078: LD_VAR 0 12
44082: PUSH
44083: LD_VAR 0 7
44087: ARRAY
44088: PUSH
44089: LD_INT 1
44091: ARRAY
44092: PPUSH
44093: LD_VAR 0 12
44097: PUSH
44098: LD_VAR 0 7
44102: ARRAY
44103: PUSH
44104: LD_INT 2
44106: ARRAY
44107: PPUSH
44108: CALL_OW 428
44112: PUSH
44113: LD_INT 0
44115: GREATER
44116: OR
44117: PUSH
44118: LD_VAR 0 12
44122: PUSH
44123: LD_VAR 0 7
44127: ARRAY
44128: PUSH
44129: LD_INT 1
44131: ARRAY
44132: PPUSH
44133: LD_VAR 0 12
44137: PUSH
44138: LD_VAR 0 7
44142: ARRAY
44143: PUSH
44144: LD_INT 2
44146: ARRAY
44147: PPUSH
44148: CALL_OW 351
44152: OR
44153: IFFALSE 44159
// exit ;
44155: POP
44156: POP
44157: GO 44451
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44159: LD_ADDR_VAR 0 8
44163: PUSH
44164: LD_VAR 0 12
44168: PUSH
44169: LD_VAR 0 7
44173: ARRAY
44174: PUSH
44175: LD_INT 1
44177: ARRAY
44178: PPUSH
44179: LD_VAR 0 12
44183: PUSH
44184: LD_VAR 0 7
44188: ARRAY
44189: PUSH
44190: LD_INT 2
44192: ARRAY
44193: PPUSH
44194: CALL_OW 546
44198: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44199: LD_VAR 0 8
44203: PUSH
44204: LD_INT 1
44206: ARRAY
44207: PUSH
44208: LD_VAR 0 8
44212: PUSH
44213: LD_INT 2
44215: ARRAY
44216: PUSH
44217: LD_VAR 0 13
44221: PUSH
44222: LD_INT 2
44224: PLUS
44225: GREATER
44226: OR
44227: PUSH
44228: LD_VAR 0 8
44232: PUSH
44233: LD_INT 2
44235: ARRAY
44236: PUSH
44237: LD_VAR 0 13
44241: PUSH
44242: LD_INT 2
44244: MINUS
44245: LESS
44246: OR
44247: PUSH
44248: LD_VAR 0 8
44252: PUSH
44253: LD_INT 3
44255: ARRAY
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: LD_INT 8
44262: PUSH
44263: LD_INT 9
44265: PUSH
44266: LD_INT 10
44268: PUSH
44269: LD_INT 11
44271: PUSH
44272: LD_INT 12
44274: PUSH
44275: LD_INT 13
44277: PUSH
44278: LD_INT 16
44280: PUSH
44281: LD_INT 17
44283: PUSH
44284: LD_INT 18
44286: PUSH
44287: LD_INT 19
44289: PUSH
44290: LD_INT 20
44292: PUSH
44293: LD_INT 21
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: IN
44311: NOT
44312: OR
44313: PUSH
44314: LD_VAR 0 8
44318: PUSH
44319: LD_INT 5
44321: ARRAY
44322: NOT
44323: OR
44324: PUSH
44325: LD_VAR 0 8
44329: PUSH
44330: LD_INT 6
44332: ARRAY
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: LD_INT 7
44342: PUSH
44343: LD_INT 9
44345: PUSH
44346: LD_INT 10
44348: PUSH
44349: LD_INT 11
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: IN
44360: NOT
44361: OR
44362: IFFALSE 44368
// exit ;
44364: POP
44365: POP
44366: GO 44451
// end ;
44368: GO 44039
44370: POP
44371: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44372: LD_VAR 0 9
44376: PPUSH
44377: LD_VAR 0 3
44381: PPUSH
44382: LD_VAR 0 4
44386: PPUSH
44387: LD_INT 20
44389: PPUSH
44390: CALL 36374 0 4
44394: PUSH
44395: LD_INT 4
44397: ARRAY
44398: IFFALSE 44402
// exit ;
44400: GO 44451
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44402: LD_VAR 0 2
44406: PUSH
44407: LD_INT 29
44409: PUSH
44410: LD_INT 30
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: IN
44417: PUSH
44418: LD_VAR 0 3
44422: PPUSH
44423: LD_VAR 0 4
44427: PPUSH
44428: LD_VAR 0 9
44432: PPUSH
44433: CALL_OW 440
44437: NOT
44438: AND
44439: IFFALSE 44443
// exit ;
44441: GO 44451
// result := true ;
44443: LD_ADDR_VAR 0 6
44447: PUSH
44448: LD_INT 1
44450: ST_TO_ADDR
// end ;
44451: LD_VAR 0 6
44455: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44456: LD_INT 0
44458: PPUSH
44459: PPUSH
44460: PPUSH
44461: PPUSH
44462: PPUSH
44463: PPUSH
44464: PPUSH
44465: PPUSH
44466: PPUSH
44467: PPUSH
44468: PPUSH
44469: PPUSH
44470: PPUSH
44471: PPUSH
44472: PPUSH
44473: PPUSH
44474: PPUSH
44475: PPUSH
44476: PPUSH
44477: PPUSH
44478: PPUSH
44479: PPUSH
44480: PPUSH
44481: PPUSH
44482: PPUSH
44483: PPUSH
44484: PPUSH
44485: PPUSH
44486: PPUSH
44487: PPUSH
44488: PPUSH
44489: PPUSH
44490: PPUSH
44491: PPUSH
44492: PPUSH
44493: PPUSH
44494: PPUSH
44495: PPUSH
44496: PPUSH
44497: PPUSH
44498: PPUSH
44499: PPUSH
44500: PPUSH
44501: PPUSH
44502: PPUSH
44503: PPUSH
44504: PPUSH
44505: PPUSH
44506: PPUSH
44507: PPUSH
44508: PPUSH
44509: PPUSH
44510: PPUSH
44511: PPUSH
44512: PPUSH
44513: PPUSH
44514: PPUSH
44515: PPUSH
// result = [ ] ;
44516: LD_ADDR_VAR 0 7
44520: PUSH
44521: EMPTY
44522: ST_TO_ADDR
// temp_list = [ ] ;
44523: LD_ADDR_VAR 0 9
44527: PUSH
44528: EMPTY
44529: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44530: LD_VAR 0 4
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: LD_INT 3
44546: PUSH
44547: LD_INT 4
44549: PUSH
44550: LD_INT 5
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: IN
44561: NOT
44562: PUSH
44563: LD_VAR 0 1
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: IN
44578: PUSH
44579: LD_VAR 0 5
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: LD_INT 3
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: LIST
44597: IN
44598: NOT
44599: AND
44600: OR
44601: IFFALSE 44605
// exit ;
44603: GO 62996
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44605: LD_VAR 0 1
44609: PUSH
44610: LD_INT 6
44612: PUSH
44613: LD_INT 7
44615: PUSH
44616: LD_INT 8
44618: PUSH
44619: LD_INT 13
44621: PUSH
44622: LD_INT 12
44624: PUSH
44625: LD_INT 15
44627: PUSH
44628: LD_INT 11
44630: PUSH
44631: LD_INT 14
44633: PUSH
44634: LD_INT 10
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: IN
44648: IFFALSE 44658
// btype = b_lab ;
44650: LD_ADDR_VAR 0 1
44654: PUSH
44655: LD_INT 6
44657: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44658: LD_VAR 0 6
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: LIST
44676: IN
44677: NOT
44678: PUSH
44679: LD_VAR 0 1
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: LD_INT 2
44692: PUSH
44693: LD_INT 3
44695: PUSH
44696: LD_INT 6
44698: PUSH
44699: LD_INT 36
44701: PUSH
44702: LD_INT 4
44704: PUSH
44705: LD_INT 5
44707: PUSH
44708: LD_INT 31
44710: PUSH
44711: LD_INT 32
44713: PUSH
44714: LD_INT 33
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: IN
44730: NOT
44731: PUSH
44732: LD_VAR 0 6
44736: PUSH
44737: LD_INT 1
44739: EQUAL
44740: AND
44741: OR
44742: PUSH
44743: LD_VAR 0 1
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: LD_INT 3
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: IN
44758: NOT
44759: PUSH
44760: LD_VAR 0 6
44764: PUSH
44765: LD_INT 2
44767: EQUAL
44768: AND
44769: OR
44770: IFFALSE 44780
// mode = 0 ;
44772: LD_ADDR_VAR 0 6
44776: PUSH
44777: LD_INT 0
44779: ST_TO_ADDR
// case mode of 0 :
44780: LD_VAR 0 6
44784: PUSH
44785: LD_INT 0
44787: DOUBLE
44788: EQUAL
44789: IFTRUE 44793
44791: GO 56246
44793: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44794: LD_ADDR_VAR 0 11
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: NEG
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: LD_INT 3
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: LD_INT 3
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44987: LD_ADDR_VAR 0 12
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 1
45099: NEG
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 2
45110: NEG
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 2
45133: NEG
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 3
45144: NEG
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 3
45155: NEG
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45183: LD_ADDR_VAR 0 13
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 2
45306: NEG
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 2
45318: NEG
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: LD_INT 3
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 3
45342: NEG
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 3
45354: NEG
45355: PUSH
45356: LD_INT 3
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45382: LD_ADDR_VAR 0 14
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 2
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 3
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 3
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 2
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45578: LD_ADDR_VAR 0 15
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 2
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 3
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 3
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45771: LD_ADDR_VAR 0 16
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: NEG
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 3
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 3
45928: PUSH
45929: LD_INT 3
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: LD_INT 3
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45964: LD_ADDR_VAR 0 17
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: LD_INT 2
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 2
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 2
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 2
46151: NEG
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 2
46163: NEG
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46194: LD_ADDR_VAR 0 18
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46424: LD_ADDR_VAR 0 19
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: NEG
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46654: LD_ADDR_VAR 0 20
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 2
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 2
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: NEG
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 2
46853: NEG
46854: PUSH
46855: LD_INT 2
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46884: LD_ADDR_VAR 0 21
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: LD_INT 2
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 2
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 2
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 2
47019: PUSH
47020: LD_INT 2
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 2
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 2
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: LD_INT 2
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47114: LD_ADDR_VAR 0 22
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: LD_INT 2
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 2
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: NEG
47314: PUSH
47315: LD_INT 2
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47344: LD_ADDR_VAR 0 23
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 2
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 2
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: LD_INT 2
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 2
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: NEG
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: NEG
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: LD_INT 2
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 3
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 3
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: LD_INT 2
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47624: LD_ADDR_VAR 0 24
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 2
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 2
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 2
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 2
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 2
47800: NEG
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: LD_INT 2
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 2
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 3
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 3
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47900: LD_ADDR_VAR 0 25
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: NEG
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 2
48087: NEG
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 3
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 3
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: LD_INT 3
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 3
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48174: LD_ADDR_VAR 0 26
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: LD_INT 2
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 2
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 2
48373: NEG
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: LD_INT 3
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 3
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48450: LD_ADDR_VAR 0 27
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: NEG
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 3
48683: NEG
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 3
48695: NEG
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48730: LD_ADDR_VAR 0 28
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: LD_INT 2
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 2
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 2
48906: NEG
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: NEG
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 2
48929: NEG
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: LD_INT 3
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 3
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 3
48965: NEG
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 3
48977: NEG
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49012: LD_ADDR_VAR 0 29
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 2
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 2
49190: NEG
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: LD_INT 3
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 3
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: LD_INT 3
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 3
49256: NEG
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49291: LD_ADDR_VAR 0 30
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: LD_INT 2
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: LD_INT 2
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: NEG
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 2
49468: NEG
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: LD_INT 3
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 2
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 3
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: PUSH
49514: LD_INT 3
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 3
49534: NEG
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49569: LD_ADDR_VAR 0 31
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: LD_INT 2
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: LD_INT 2
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 2
49734: NEG
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: LD_INT 2
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: NEG
49759: PUSH
49760: LD_INT 3
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 3
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: LD_INT 3
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: LD_INT 2
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 3
49812: NEG
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49847: LD_ADDR_VAR 0 32
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 2
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 2
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: PUSH
49973: LD_INT 2
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: LD_INT 2
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: LD_INT 3
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 3
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: LD_INT 3
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: NEG
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 3
50090: NEG
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50125: LD_ADDR_VAR 0 33
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: LD_INT 2
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 2
50280: NEG
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 2
50291: NEG
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: NEG
50316: PUSH
50317: LD_INT 3
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 3
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 3
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: LD_INT 2
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 3
50369: NEG
50370: PUSH
50371: LD_INT 2
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50404: LD_ADDR_VAR 0 34
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: LD_INT 2
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: LD_INT 2
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: NEG
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 2
50571: NEG
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: NEG
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 3
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: LD_INT 2
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 3
50618: PUSH
50619: LD_INT 2
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: LD_INT 3
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 3
50649: NEG
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50684: LD_ADDR_VAR 0 35
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50796: LD_ADDR_VAR 0 36
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50908: LD_ADDR_VAR 0 37
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51020: LD_ADDR_VAR 0 38
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51132: LD_ADDR_VAR 0 39
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: LD_INT 1
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51244: LD_ADDR_VAR 0 40
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: NEG
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51356: LD_ADDR_VAR 0 41
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: LD_INT 2
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 2
51480: PUSH
51481: LD_INT 2
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: NEG
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: LD_INT 3
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 3
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 3
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 3
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 3
51599: PUSH
51600: LD_INT 3
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: LD_INT 3
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 3
51630: NEG
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 3
51641: NEG
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 3
51653: NEG
51654: PUSH
51655: LD_INT 2
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 3
51665: NEG
51666: PUSH
51667: LD_INT 3
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51706: LD_ADDR_VAR 0 42
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: LD_INT 2
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 2
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: LD_INT 3
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 3
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: LD_INT 3
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 3
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 3
51952: PUSH
51953: LD_INT 3
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: LD_INT 3
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: LD_INT 3
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: LD_INT 3
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: LD_INT 2
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 3
52003: NEG
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 3
52015: NEG
52016: PUSH
52017: LD_INT 3
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52056: LD_ADDR_VAR 0 43
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 3
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: LD_INT 3
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: LD_INT 2
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 3
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 3
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: LD_INT 3
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 3
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 3
52352: NEG
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 3
52363: NEG
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52404: LD_ADDR_VAR 0 44
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 2
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: LD_INT 2
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: NEG
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: NEG
52595: PUSH
52596: LD_INT 3
52598: NEG
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 3
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 3
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 3
52637: PUSH
52638: LD_INT 2
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 3
52647: PUSH
52648: LD_INT 3
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: LD_INT 3
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 2
52667: NEG
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 3
52678: NEG
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 3
52689: NEG
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 3
52701: NEG
52702: PUSH
52703: LD_INT 2
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 3
52713: NEG
52714: PUSH
52715: LD_INT 3
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52754: LD_ADDR_VAR 0 45
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: LD_INT 2
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 2
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: LD_INT 2
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: LD_INT 2
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 2
52944: NEG
52945: PUSH
52946: LD_INT 3
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 3
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: LD_INT 3
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: LD_INT 2
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 3
52990: PUSH
52991: LD_INT 2
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 3
53000: PUSH
53001: LD_INT 3
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: LD_INT 3
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: LD_INT 3
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 3
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 3
53051: NEG
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 3
53063: NEG
53064: PUSH
53065: LD_INT 3
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53104: LD_ADDR_VAR 0 46
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: LD_INT 2
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 2
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 3
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 3
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 2
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 3
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 3
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 3
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 3
53400: NEG
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 3
53411: NEG
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53452: LD_ADDR_VAR 0 47
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 2
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53603: LD_ADDR_VAR 0 48
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53750: LD_ADDR_VAR 0 49
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 2
53862: PUSH
53863: LD_INT 2
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53894: LD_ADDR_VAR 0 50
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: LD_INT 2
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: LD_INT 2
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: LD_INT 2
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 1
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54038: LD_ADDR_VAR 0 51
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 2
54161: NEG
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54185: LD_ADDR_VAR 0 52
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 2
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 2
54289: NEG
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 2
54300: NEG
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: NEG
54313: PUSH
54314: LD_INT 2
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54336: LD_ADDR_VAR 0 53
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 2
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 2
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: NEG
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54566: LD_ADDR_VAR 0 54
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 2
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 2
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 2
54753: NEG
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54796: LD_ADDR_VAR 0 55
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: NEG
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: LD_INT 2
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55026: LD_ADDR_VAR 0 56
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 2
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 2
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: PUSH
55162: LD_INT 2
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55256: LD_ADDR_VAR 0 57
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: LD_INT 2
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 2
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: NEG
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: LD_INT 2
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55486: LD_ADDR_VAR 0 58
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 2
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: NEG
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 2
55685: NEG
55686: PUSH
55687: LD_INT 2
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55716: LD_ADDR_VAR 0 59
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55804: LD_ADDR_VAR 0 60
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: NEG
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55892: LD_ADDR_VAR 0 61
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55980: LD_ADDR_VAR 0 62
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56068: LD_ADDR_VAR 0 63
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56156: LD_ADDR_VAR 0 64
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: ST_TO_ADDR
// end ; 1 :
56244: GO 62141
56246: LD_INT 1
56248: DOUBLE
56249: EQUAL
56250: IFTRUE 56254
56252: GO 58877
56254: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56255: LD_ADDR_VAR 0 11
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: LD_INT 3
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: LD_INT 2
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56299: LD_ADDR_VAR 0 12
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: LD_INT 1
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 3
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 3
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: LIST
56339: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56340: LD_ADDR_VAR 0 13
56344: PUSH
56345: LD_INT 3
56347: PUSH
56348: LD_INT 2
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: LD_INT 3
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: LD_INT 3
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: LIST
56379: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56380: LD_ADDR_VAR 0 14
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: LD_INT 3
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: LD_INT 3
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: LIST
56420: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56421: LD_ADDR_VAR 0 15
56425: PUSH
56426: LD_INT 2
56428: NEG
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 3
56439: NEG
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 3
56450: NEG
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: LIST
56464: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56465: LD_ADDR_VAR 0 16
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: LD_INT 3
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 3
56484: NEG
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 3
56496: NEG
56497: PUSH
56498: LD_INT 3
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: LIST
56510: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56511: LD_ADDR_VAR 0 17
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 3
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: LIST
56554: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56555: LD_ADDR_VAR 0 18
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 3
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: LIST
56595: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56596: LD_ADDR_VAR 0 19
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 3
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: PUSH
56624: LD_INT 3
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: LIST
56635: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56636: LD_ADDR_VAR 0 20
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 3
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: LD_INT 3
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: LIST
56676: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56677: LD_ADDR_VAR 0 21
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 3
56695: NEG
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: LIST
56720: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56721: LD_ADDR_VAR 0 22
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: LD_INT 3
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 3
56740: NEG
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 3
56752: NEG
56753: PUSH
56754: LD_INT 3
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: LIST
56766: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56767: LD_ADDR_VAR 0 23
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: LD_INT 3
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: LD_INT 4
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 3
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: LIST
56810: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56811: LD_ADDR_VAR 0 24
56815: PUSH
56816: LD_INT 3
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 3
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 4
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: LIST
56851: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56852: LD_ADDR_VAR 0 25
56856: PUSH
56857: LD_INT 3
56859: PUSH
56860: LD_INT 3
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 4
56869: PUSH
56870: LD_INT 3
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 3
56879: PUSH
56880: LD_INT 4
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: LIST
56891: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56892: LD_ADDR_VAR 0 26
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: LD_INT 3
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 1
56909: PUSH
56910: LD_INT 4
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: NEG
56920: PUSH
56921: LD_INT 3
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: LIST
56932: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56933: LD_ADDR_VAR 0 27
56937: PUSH
56938: LD_INT 3
56940: NEG
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 3
56951: NEG
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 4
56962: NEG
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: LIST
56976: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56977: LD_ADDR_VAR 0 28
56981: PUSH
56982: LD_INT 3
56984: NEG
56985: PUSH
56986: LD_INT 3
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 3
56996: NEG
56997: PUSH
56998: LD_INT 4
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 4
57008: NEG
57009: PUSH
57010: LD_INT 3
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: LIST
57022: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57023: LD_ADDR_VAR 0 29
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: LD_INT 3
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: LD_INT 3
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: LD_INT 4
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 4
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: LD_INT 3
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: LD_INT 5
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 5
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: LD_INT 4
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 6
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 6
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: LD_INT 5
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57178: LD_ADDR_VAR 0 30
57182: PUSH
57183: LD_INT 2
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 3
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 3
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 3
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 4
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 4
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 4
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 5
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 5
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 5
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 6
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 6
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57321: LD_ADDR_VAR 0 31
57325: PUSH
57326: LD_INT 3
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 3
57338: PUSH
57339: LD_INT 3
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: PUSH
57349: LD_INT 3
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 4
57358: PUSH
57359: LD_INT 3
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 4
57368: PUSH
57369: LD_INT 4
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 3
57378: PUSH
57379: LD_INT 4
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 5
57388: PUSH
57389: LD_INT 4
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 5
57398: PUSH
57399: LD_INT 5
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 4
57408: PUSH
57409: LD_INT 5
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 6
57418: PUSH
57419: LD_INT 5
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 6
57428: PUSH
57429: LD_INT 6
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 5
57438: PUSH
57439: LD_INT 6
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57460: LD_ADDR_VAR 0 32
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: LD_INT 3
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 3
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: LD_INT 4
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: LD_INT 4
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: LD_INT 3
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: LD_INT 5
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: LD_INT 5
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: LD_INT 4
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: LD_INT 6
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: LD_INT 6
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: LD_INT 5
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57603: LD_ADDR_VAR 0 33
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 3
57632: NEG
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 3
57644: NEG
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 4
57655: NEG
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 4
57666: NEG
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 4
57678: NEG
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 5
57689: NEG
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 5
57700: NEG
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 5
57712: NEG
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 6
57723: NEG
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 6
57734: NEG
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57758: LD_ADDR_VAR 0 34
57762: PUSH
57763: LD_INT 2
57765: NEG
57766: PUSH
57767: LD_INT 3
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 3
57777: NEG
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 3
57789: NEG
57790: PUSH
57791: LD_INT 3
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 3
57801: NEG
57802: PUSH
57803: LD_INT 4
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 4
57813: NEG
57814: PUSH
57815: LD_INT 3
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 4
57825: NEG
57826: PUSH
57827: LD_INT 4
57829: NEG
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 4
57837: NEG
57838: PUSH
57839: LD_INT 5
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 5
57849: NEG
57850: PUSH
57851: LD_INT 4
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 5
57861: NEG
57862: PUSH
57863: LD_INT 5
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 5
57873: NEG
57874: PUSH
57875: LD_INT 6
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 6
57885: NEG
57886: PUSH
57887: LD_INT 5
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 6
57897: NEG
57898: PUSH
57899: LD_INT 6
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57921: LD_ADDR_VAR 0 41
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: LD_INT 2
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: LD_INT 3
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: LD_INT 2
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: LIST
57964: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57965: LD_ADDR_VAR 0 42
57969: PUSH
57970: LD_INT 2
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 2
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 3
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: LIST
58005: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58006: LD_ADDR_VAR 0 43
58010: PUSH
58011: LD_INT 2
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 3
58023: PUSH
58024: LD_INT 2
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: LD_INT 3
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: LIST
58045: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58046: LD_ADDR_VAR 0 44
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: LD_INT 3
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: LIST
58086: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58087: LD_ADDR_VAR 0 45
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 2
58105: NEG
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 3
58116: NEG
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: LIST
58130: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58131: LD_ADDR_VAR 0 46
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: LD_INT 2
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: LD_INT 3
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 3
58162: NEG
58163: PUSH
58164: LD_INT 2
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: LIST
58176: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58177: LD_ADDR_VAR 0 47
58181: PUSH
58182: LD_INT 2
58184: NEG
58185: PUSH
58186: LD_INT 3
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: LD_INT 3
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58210: LD_ADDR_VAR 0 48
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: LD_INT 2
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58241: LD_ADDR_VAR 0 49
58245: PUSH
58246: LD_INT 3
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 3
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58270: LD_ADDR_VAR 0 50
58274: PUSH
58275: LD_INT 2
58277: PUSH
58278: LD_INT 3
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: PUSH
58288: LD_INT 3
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58299: LD_ADDR_VAR 0 51
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 2
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 2
58317: NEG
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58330: LD_ADDR_VAR 0 52
58334: PUSH
58335: LD_INT 3
58337: NEG
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 3
58349: NEG
58350: PUSH
58351: LD_INT 2
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58363: LD_ADDR_VAR 0 53
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: LD_INT 3
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: LD_INT 2
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: LIST
58406: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58407: LD_ADDR_VAR 0 54
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 3
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: LIST
58447: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58448: LD_ADDR_VAR 0 55
58452: PUSH
58453: LD_INT 3
58455: PUSH
58456: LD_INT 2
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: PUSH
58466: LD_INT 3
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 2
58475: PUSH
58476: LD_INT 3
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: LIST
58487: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58488: LD_ADDR_VAR 0 56
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: LD_INT 3
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: LD_INT 3
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: LD_INT 2
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: LIST
58528: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58529: LD_ADDR_VAR 0 57
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 3
58547: NEG
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 3
58558: NEG
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: LIST
58572: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58573: LD_ADDR_VAR 0 58
58577: PUSH
58578: LD_INT 2
58580: NEG
58581: PUSH
58582: LD_INT 3
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 3
58592: NEG
58593: PUSH
58594: LD_INT 2
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 3
58604: NEG
58605: PUSH
58606: LD_INT 3
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: LIST
58618: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58619: LD_ADDR_VAR 0 59
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: LD_INT 2
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: LIST
58662: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58663: LD_ADDR_VAR 0 60
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 2
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 2
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: LIST
58703: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58704: LD_ADDR_VAR 0 61
58708: PUSH
58709: LD_INT 2
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: LD_INT 2
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: LIST
58743: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58744: LD_ADDR_VAR 0 62
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: LIST
58784: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58785: LD_ADDR_VAR 0 63
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 2
58814: NEG
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: LIST
58828: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58829: LD_ADDR_VAR 0 64
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 2
58848: NEG
58849: PUSH
58850: LD_INT 1
58852: NEG
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 2
58860: NEG
58861: PUSH
58862: LD_INT 2
58864: NEG
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: LIST
58874: ST_TO_ADDR
// end ; 2 :
58875: GO 62141
58877: LD_INT 2
58879: DOUBLE
58880: EQUAL
58881: IFTRUE 58885
58883: GO 62140
58885: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58886: LD_ADDR_VAR 0 29
58890: PUSH
58891: LD_INT 4
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 4
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 5
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 5
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 4
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 3
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 3
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 3
58965: PUSH
58966: LD_INT 2
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 5
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 3
58986: PUSH
58987: LD_INT 3
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 3
58996: PUSH
58997: LD_INT 2
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 4
59006: PUSH
59007: LD_INT 3
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 4
59016: PUSH
59017: LD_INT 4
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 3
59026: PUSH
59027: LD_INT 4
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: LD_INT 3
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: PUSH
59047: LD_INT 2
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 4
59056: PUSH
59057: LD_INT 2
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 2
59066: PUSH
59067: LD_INT 4
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: LD_INT 4
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: LD_INT 3
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: LD_INT 4
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: LD_INT 5
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: LD_INT 5
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: LD_INT 4
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: LD_INT 3
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 2
59148: PUSH
59149: LD_INT 5
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 2
59158: NEG
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 3
59169: NEG
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 3
59180: NEG
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: NEG
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: NEG
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 3
59214: NEG
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 4
59225: NEG
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 4
59236: NEG
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 4
59248: NEG
59249: PUSH
59250: LD_INT 2
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: NEG
59261: PUSH
59262: LD_INT 2
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 4
59271: NEG
59272: PUSH
59273: LD_INT 4
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 4
59283: NEG
59284: PUSH
59285: LD_INT 5
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 3
59295: NEG
59296: PUSH
59297: LD_INT 4
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 3
59307: NEG
59308: PUSH
59309: LD_INT 3
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 4
59319: NEG
59320: PUSH
59321: LD_INT 3
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 5
59331: NEG
59332: PUSH
59333: LD_INT 4
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 5
59343: NEG
59344: PUSH
59345: LD_INT 5
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: LD_INT 5
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 5
59367: NEG
59368: PUSH
59369: LD_INT 3
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59424: LD_ADDR_VAR 0 30
59428: PUSH
59429: LD_INT 4
59431: PUSH
59432: LD_INT 4
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 4
59441: PUSH
59442: LD_INT 3
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 5
59451: PUSH
59452: LD_INT 4
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 5
59461: PUSH
59462: LD_INT 5
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 4
59471: PUSH
59472: LD_INT 5
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 3
59481: PUSH
59482: LD_INT 4
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 3
59491: PUSH
59492: LD_INT 3
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 5
59501: PUSH
59502: LD_INT 3
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 3
59511: PUSH
59512: LD_INT 5
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 3
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: LD_INT 3
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: LD_INT 4
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: LD_INT 4
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: LD_INT 3
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: LD_INT 2
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 2
59593: PUSH
59594: LD_INT 4
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: LD_INT 2
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 4
59614: NEG
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 4
59625: NEG
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 3
59637: NEG
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 3
59648: NEG
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 4
59659: NEG
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 5
59670: NEG
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 5
59681: NEG
59682: PUSH
59683: LD_INT 1
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 5
59693: NEG
59694: PUSH
59695: LD_INT 2
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 3
59705: NEG
59706: PUSH
59707: LD_INT 2
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 3
59716: NEG
59717: PUSH
59718: LD_INT 3
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 3
59728: NEG
59729: PUSH
59730: LD_INT 4
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: LD_INT 3
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 2
59752: NEG
59753: PUSH
59754: LD_INT 2
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 3
59764: NEG
59765: PUSH
59766: LD_INT 2
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 4
59776: NEG
59777: PUSH
59778: LD_INT 3
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 4
59788: NEG
59789: PUSH
59790: LD_INT 4
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 2
59800: NEG
59801: PUSH
59802: LD_INT 4
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 4
59812: NEG
59813: PUSH
59814: LD_INT 2
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: LD_INT 4
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: LD_INT 5
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: LD_INT 4
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: LD_INT 3
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: LD_INT 3
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: LD_INT 4
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: LD_INT 5
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 2
59903: PUSH
59904: LD_INT 3
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 2
59914: NEG
59915: PUSH
59916: LD_INT 5
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59971: LD_ADDR_VAR 0 31
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: LD_INT 4
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: LD_INT 3
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: LD_INT 4
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: PUSH
60009: LD_INT 5
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: LD_INT 5
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: LD_INT 4
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: NEG
60040: PUSH
60041: LD_INT 3
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: LD_INT 5
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 2
60060: NEG
60061: PUSH
60062: LD_INT 3
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 3
60071: NEG
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 3
60082: NEG
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 2
60094: NEG
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 2
60105: NEG
60106: PUSH
60107: LD_INT 1
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 3
60116: NEG
60117: PUSH
60118: LD_INT 1
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 4
60127: NEG
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 4
60138: NEG
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 4
60150: NEG
60151: PUSH
60152: LD_INT 2
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 2
60162: NEG
60163: PUSH
60164: LD_INT 2
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 4
60173: NEG
60174: PUSH
60175: LD_INT 4
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 4
60185: NEG
60186: PUSH
60187: LD_INT 5
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 3
60197: NEG
60198: PUSH
60199: LD_INT 4
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 3
60209: NEG
60210: PUSH
60211: LD_INT 3
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 4
60221: NEG
60222: PUSH
60223: LD_INT 3
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 5
60233: NEG
60234: PUSH
60235: LD_INT 4
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 5
60245: NEG
60246: PUSH
60247: LD_INT 5
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 3
60257: NEG
60258: PUSH
60259: LD_INT 5
60261: NEG
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 5
60269: NEG
60270: PUSH
60271: LD_INT 3
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: LD_INT 3
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: LD_INT 4
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: PUSH
60304: LD_INT 3
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: LD_INT 2
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: LD_INT 2
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: LD_INT 3
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: LD_INT 4
60352: NEG
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 2
60360: PUSH
60361: LD_INT 2
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 2
60371: NEG
60372: PUSH
60373: LD_INT 4
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 4
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 4
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 5
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 5
60414: PUSH
60415: LD_INT 1
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 4
60424: PUSH
60425: LD_INT 1
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 3
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 3
60444: PUSH
60445: LD_INT 1
60447: NEG
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 3
60455: PUSH
60456: LD_INT 2
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 5
60466: PUSH
60467: LD_INT 2
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60521: LD_ADDR_VAR 0 32
60525: PUSH
60526: LD_INT 4
60528: NEG
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 4
60539: NEG
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 3
60551: NEG
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 3
60562: NEG
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 4
60573: NEG
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 5
60584: NEG
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 5
60595: NEG
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 5
60607: NEG
60608: PUSH
60609: LD_INT 2
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 3
60619: NEG
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 3
60630: NEG
60631: PUSH
60632: LD_INT 3
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 3
60642: NEG
60643: PUSH
60644: LD_INT 4
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: LD_INT 3
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 2
60666: NEG
60667: PUSH
60668: LD_INT 2
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 3
60678: NEG
60679: PUSH
60680: LD_INT 2
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 4
60690: NEG
60691: PUSH
60692: LD_INT 3
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 4
60702: NEG
60703: PUSH
60704: LD_INT 4
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 2
60714: NEG
60715: PUSH
60716: LD_INT 4
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 4
60726: NEG
60727: PUSH
60728: LD_INT 2
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: LD_INT 4
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 0
60749: PUSH
60750: LD_INT 5
60752: NEG
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 1
60760: PUSH
60761: LD_INT 4
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: LD_INT 3
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: LD_INT 3
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: LD_INT 4
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: NEG
60806: PUSH
60807: LD_INT 5
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 2
60817: PUSH
60818: LD_INT 3
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: NEG
60829: PUSH
60830: LD_INT 5
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 3
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 3
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 4
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 4
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 3
60881: PUSH
60882: LD_INT 1
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 2
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 2
60901: PUSH
60902: LD_INT 1
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: LD_INT 2
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 4
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 4
60933: PUSH
60934: LD_INT 4
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 4
60943: PUSH
60944: LD_INT 3
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 5
60953: PUSH
60954: LD_INT 4
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 5
60963: PUSH
60964: LD_INT 5
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 4
60973: PUSH
60974: LD_INT 5
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 3
60983: PUSH
60984: LD_INT 4
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 3
60993: PUSH
60994: LD_INT 3
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 5
61003: PUSH
61004: LD_INT 3
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 3
61013: PUSH
61014: LD_INT 5
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61068: LD_ADDR_VAR 0 33
61072: PUSH
61073: LD_INT 4
61075: NEG
61076: PUSH
61077: LD_INT 4
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 4
61087: NEG
61088: PUSH
61089: LD_INT 5
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: LD_INT 4
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 3
61111: NEG
61112: PUSH
61113: LD_INT 3
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 4
61123: NEG
61124: PUSH
61125: LD_INT 3
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 5
61135: NEG
61136: PUSH
61137: LD_INT 4
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 5
61147: NEG
61148: PUSH
61149: LD_INT 5
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 3
61159: NEG
61160: PUSH
61161: LD_INT 5
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 5
61171: NEG
61172: PUSH
61173: LD_INT 3
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: LD_INT 3
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: LD_INT 4
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 1
61205: PUSH
61206: LD_INT 3
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: LD_INT 2
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: LD_INT 2
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: LD_INT 3
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: LD_INT 4
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 2
61262: PUSH
61263: LD_INT 2
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 2
61273: NEG
61274: PUSH
61275: LD_INT 4
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 4
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 4
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 5
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 5
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 4
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 3
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 3
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 3
61357: PUSH
61358: LD_INT 2
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 5
61368: PUSH
61369: LD_INT 2
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 3
61378: PUSH
61379: LD_INT 3
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 3
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 4
61398: PUSH
61399: LD_INT 3
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 4
61408: PUSH
61409: LD_INT 4
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 3
61418: PUSH
61419: LD_INT 4
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 2
61428: PUSH
61429: LD_INT 3
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 2
61438: PUSH
61439: LD_INT 2
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 4
61448: PUSH
61449: LD_INT 2
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 2
61458: PUSH
61459: LD_INT 4
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 0
61468: PUSH
61469: LD_INT 4
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: LD_INT 3
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: LD_INT 4
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 1
61498: PUSH
61499: LD_INT 5
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: LD_INT 5
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: LD_INT 4
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: LD_INT 3
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 2
61540: PUSH
61541: LD_INT 5
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 2
61550: NEG
61551: PUSH
61552: LD_INT 3
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61606: LD_ADDR_VAR 0 34
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: LD_INT 4
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: LD_INT 5
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: LD_INT 4
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: PUSH
61647: LD_INT 3
61649: NEG
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: LD_INT 3
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: NEG
61669: PUSH
61670: LD_INT 4
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 1
61680: NEG
61681: PUSH
61682: LD_INT 5
61684: NEG
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 2
61692: PUSH
61693: LD_INT 3
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 2
61703: NEG
61704: PUSH
61705: LD_INT 5
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 3
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 3
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 4
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 4
61746: PUSH
61747: LD_INT 1
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 3
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 2
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 2
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 2
61787: PUSH
61788: LD_INT 2
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 4
61798: PUSH
61799: LD_INT 2
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 4
61808: PUSH
61809: LD_INT 4
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 4
61818: PUSH
61819: LD_INT 3
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 5
61828: PUSH
61829: LD_INT 4
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 5
61838: PUSH
61839: LD_INT 5
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 4
61848: PUSH
61849: LD_INT 5
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 3
61858: PUSH
61859: LD_INT 4
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 3
61868: PUSH
61869: LD_INT 3
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 5
61878: PUSH
61879: LD_INT 3
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 3
61888: PUSH
61889: LD_INT 5
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: LD_INT 3
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 2
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: LD_INT 3
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 1
61928: PUSH
61929: LD_INT 4
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: LD_INT 4
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 1
61948: NEG
61949: PUSH
61950: LD_INT 3
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: LD_INT 2
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 2
61970: PUSH
61971: LD_INT 4
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 2
61980: NEG
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 4
61991: NEG
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 4
62002: NEG
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 3
62014: NEG
62015: PUSH
62016: LD_INT 0
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 3
62025: NEG
62026: PUSH
62027: LD_INT 1
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 4
62036: NEG
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 5
62047: NEG
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 5
62058: NEG
62059: PUSH
62060: LD_INT 1
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 5
62070: NEG
62071: PUSH
62072: LD_INT 2
62074: NEG
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 3
62082: NEG
62083: PUSH
62084: LD_INT 2
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: ST_TO_ADDR
// end ; end ;
62138: GO 62141
62140: POP
// case btype of b_depot , b_warehouse :
62141: LD_VAR 0 1
62145: PUSH
62146: LD_INT 0
62148: DOUBLE
62149: EQUAL
62150: IFTRUE 62160
62152: LD_INT 1
62154: DOUBLE
62155: EQUAL
62156: IFTRUE 62160
62158: GO 62361
62160: POP
// case nation of nation_american :
62161: LD_VAR 0 5
62165: PUSH
62166: LD_INT 1
62168: DOUBLE
62169: EQUAL
62170: IFTRUE 62174
62172: GO 62230
62174: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62175: LD_ADDR_VAR 0 9
62179: PUSH
62180: LD_VAR 0 11
62184: PUSH
62185: LD_VAR 0 12
62189: PUSH
62190: LD_VAR 0 13
62194: PUSH
62195: LD_VAR 0 14
62199: PUSH
62200: LD_VAR 0 15
62204: PUSH
62205: LD_VAR 0 16
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: PUSH
62218: LD_VAR 0 4
62222: PUSH
62223: LD_INT 1
62225: PLUS
62226: ARRAY
62227: ST_TO_ADDR
62228: GO 62359
62230: LD_INT 2
62232: DOUBLE
62233: EQUAL
62234: IFTRUE 62238
62236: GO 62294
62238: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62239: LD_ADDR_VAR 0 9
62243: PUSH
62244: LD_VAR 0 17
62248: PUSH
62249: LD_VAR 0 18
62253: PUSH
62254: LD_VAR 0 19
62258: PUSH
62259: LD_VAR 0 20
62263: PUSH
62264: LD_VAR 0 21
62268: PUSH
62269: LD_VAR 0 22
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: PUSH
62282: LD_VAR 0 4
62286: PUSH
62287: LD_INT 1
62289: PLUS
62290: ARRAY
62291: ST_TO_ADDR
62292: GO 62359
62294: LD_INT 3
62296: DOUBLE
62297: EQUAL
62298: IFTRUE 62302
62300: GO 62358
62302: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62303: LD_ADDR_VAR 0 9
62307: PUSH
62308: LD_VAR 0 23
62312: PUSH
62313: LD_VAR 0 24
62317: PUSH
62318: LD_VAR 0 25
62322: PUSH
62323: LD_VAR 0 26
62327: PUSH
62328: LD_VAR 0 27
62332: PUSH
62333: LD_VAR 0 28
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: PUSH
62346: LD_VAR 0 4
62350: PUSH
62351: LD_INT 1
62353: PLUS
62354: ARRAY
62355: ST_TO_ADDR
62356: GO 62359
62358: POP
62359: GO 62914
62361: LD_INT 2
62363: DOUBLE
62364: EQUAL
62365: IFTRUE 62375
62367: LD_INT 3
62369: DOUBLE
62370: EQUAL
62371: IFTRUE 62375
62373: GO 62431
62375: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62376: LD_ADDR_VAR 0 9
62380: PUSH
62381: LD_VAR 0 29
62385: PUSH
62386: LD_VAR 0 30
62390: PUSH
62391: LD_VAR 0 31
62395: PUSH
62396: LD_VAR 0 32
62400: PUSH
62401: LD_VAR 0 33
62405: PUSH
62406: LD_VAR 0 34
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: PUSH
62419: LD_VAR 0 4
62423: PUSH
62424: LD_INT 1
62426: PLUS
62427: ARRAY
62428: ST_TO_ADDR
62429: GO 62914
62431: LD_INT 16
62433: DOUBLE
62434: EQUAL
62435: IFTRUE 62493
62437: LD_INT 17
62439: DOUBLE
62440: EQUAL
62441: IFTRUE 62493
62443: LD_INT 18
62445: DOUBLE
62446: EQUAL
62447: IFTRUE 62493
62449: LD_INT 19
62451: DOUBLE
62452: EQUAL
62453: IFTRUE 62493
62455: LD_INT 22
62457: DOUBLE
62458: EQUAL
62459: IFTRUE 62493
62461: LD_INT 20
62463: DOUBLE
62464: EQUAL
62465: IFTRUE 62493
62467: LD_INT 21
62469: DOUBLE
62470: EQUAL
62471: IFTRUE 62493
62473: LD_INT 23
62475: DOUBLE
62476: EQUAL
62477: IFTRUE 62493
62479: LD_INT 24
62481: DOUBLE
62482: EQUAL
62483: IFTRUE 62493
62485: LD_INT 25
62487: DOUBLE
62488: EQUAL
62489: IFTRUE 62493
62491: GO 62549
62493: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62494: LD_ADDR_VAR 0 9
62498: PUSH
62499: LD_VAR 0 35
62503: PUSH
62504: LD_VAR 0 36
62508: PUSH
62509: LD_VAR 0 37
62513: PUSH
62514: LD_VAR 0 38
62518: PUSH
62519: LD_VAR 0 39
62523: PUSH
62524: LD_VAR 0 40
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: PUSH
62537: LD_VAR 0 4
62541: PUSH
62542: LD_INT 1
62544: PLUS
62545: ARRAY
62546: ST_TO_ADDR
62547: GO 62914
62549: LD_INT 6
62551: DOUBLE
62552: EQUAL
62553: IFTRUE 62605
62555: LD_INT 7
62557: DOUBLE
62558: EQUAL
62559: IFTRUE 62605
62561: LD_INT 8
62563: DOUBLE
62564: EQUAL
62565: IFTRUE 62605
62567: LD_INT 13
62569: DOUBLE
62570: EQUAL
62571: IFTRUE 62605
62573: LD_INT 12
62575: DOUBLE
62576: EQUAL
62577: IFTRUE 62605
62579: LD_INT 15
62581: DOUBLE
62582: EQUAL
62583: IFTRUE 62605
62585: LD_INT 11
62587: DOUBLE
62588: EQUAL
62589: IFTRUE 62605
62591: LD_INT 14
62593: DOUBLE
62594: EQUAL
62595: IFTRUE 62605
62597: LD_INT 10
62599: DOUBLE
62600: EQUAL
62601: IFTRUE 62605
62603: GO 62661
62605: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62606: LD_ADDR_VAR 0 9
62610: PUSH
62611: LD_VAR 0 41
62615: PUSH
62616: LD_VAR 0 42
62620: PUSH
62621: LD_VAR 0 43
62625: PUSH
62626: LD_VAR 0 44
62630: PUSH
62631: LD_VAR 0 45
62635: PUSH
62636: LD_VAR 0 46
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: PUSH
62649: LD_VAR 0 4
62653: PUSH
62654: LD_INT 1
62656: PLUS
62657: ARRAY
62658: ST_TO_ADDR
62659: GO 62914
62661: LD_INT 36
62663: DOUBLE
62664: EQUAL
62665: IFTRUE 62669
62667: GO 62725
62669: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62670: LD_ADDR_VAR 0 9
62674: PUSH
62675: LD_VAR 0 47
62679: PUSH
62680: LD_VAR 0 48
62684: PUSH
62685: LD_VAR 0 49
62689: PUSH
62690: LD_VAR 0 50
62694: PUSH
62695: LD_VAR 0 51
62699: PUSH
62700: LD_VAR 0 52
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: PUSH
62713: LD_VAR 0 4
62717: PUSH
62718: LD_INT 1
62720: PLUS
62721: ARRAY
62722: ST_TO_ADDR
62723: GO 62914
62725: LD_INT 4
62727: DOUBLE
62728: EQUAL
62729: IFTRUE 62751
62731: LD_INT 5
62733: DOUBLE
62734: EQUAL
62735: IFTRUE 62751
62737: LD_INT 34
62739: DOUBLE
62740: EQUAL
62741: IFTRUE 62751
62743: LD_INT 37
62745: DOUBLE
62746: EQUAL
62747: IFTRUE 62751
62749: GO 62807
62751: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62752: LD_ADDR_VAR 0 9
62756: PUSH
62757: LD_VAR 0 53
62761: PUSH
62762: LD_VAR 0 54
62766: PUSH
62767: LD_VAR 0 55
62771: PUSH
62772: LD_VAR 0 56
62776: PUSH
62777: LD_VAR 0 57
62781: PUSH
62782: LD_VAR 0 58
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: PUSH
62795: LD_VAR 0 4
62799: PUSH
62800: LD_INT 1
62802: PLUS
62803: ARRAY
62804: ST_TO_ADDR
62805: GO 62914
62807: LD_INT 31
62809: DOUBLE
62810: EQUAL
62811: IFTRUE 62857
62813: LD_INT 32
62815: DOUBLE
62816: EQUAL
62817: IFTRUE 62857
62819: LD_INT 33
62821: DOUBLE
62822: EQUAL
62823: IFTRUE 62857
62825: LD_INT 27
62827: DOUBLE
62828: EQUAL
62829: IFTRUE 62857
62831: LD_INT 26
62833: DOUBLE
62834: EQUAL
62835: IFTRUE 62857
62837: LD_INT 28
62839: DOUBLE
62840: EQUAL
62841: IFTRUE 62857
62843: LD_INT 29
62845: DOUBLE
62846: EQUAL
62847: IFTRUE 62857
62849: LD_INT 30
62851: DOUBLE
62852: EQUAL
62853: IFTRUE 62857
62855: GO 62913
62857: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62858: LD_ADDR_VAR 0 9
62862: PUSH
62863: LD_VAR 0 59
62867: PUSH
62868: LD_VAR 0 60
62872: PUSH
62873: LD_VAR 0 61
62877: PUSH
62878: LD_VAR 0 62
62882: PUSH
62883: LD_VAR 0 63
62887: PUSH
62888: LD_VAR 0 64
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: PUSH
62901: LD_VAR 0 4
62905: PUSH
62906: LD_INT 1
62908: PLUS
62909: ARRAY
62910: ST_TO_ADDR
62911: GO 62914
62913: POP
// temp_list2 = [ ] ;
62914: LD_ADDR_VAR 0 10
62918: PUSH
62919: EMPTY
62920: ST_TO_ADDR
// for i in temp_list do
62921: LD_ADDR_VAR 0 8
62925: PUSH
62926: LD_VAR 0 9
62930: PUSH
62931: FOR_IN
62932: IFFALSE 62984
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62934: LD_ADDR_VAR 0 10
62938: PUSH
62939: LD_VAR 0 10
62943: PUSH
62944: LD_VAR 0 8
62948: PUSH
62949: LD_INT 1
62951: ARRAY
62952: PUSH
62953: LD_VAR 0 2
62957: PLUS
62958: PUSH
62959: LD_VAR 0 8
62963: PUSH
62964: LD_INT 2
62966: ARRAY
62967: PUSH
62968: LD_VAR 0 3
62972: PLUS
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: EMPTY
62979: LIST
62980: ADD
62981: ST_TO_ADDR
62982: GO 62931
62984: POP
62985: POP
// result = temp_list2 ;
62986: LD_ADDR_VAR 0 7
62990: PUSH
62991: LD_VAR 0 10
62995: ST_TO_ADDR
// end ;
62996: LD_VAR 0 7
63000: RET
// export function EnemyInRange ( unit , dist ) ; begin
63001: LD_INT 0
63003: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63004: LD_ADDR_VAR 0 3
63008: PUSH
63009: LD_VAR 0 1
63013: PPUSH
63014: CALL_OW 255
63018: PPUSH
63019: LD_VAR 0 1
63023: PPUSH
63024: CALL_OW 250
63028: PPUSH
63029: LD_VAR 0 1
63033: PPUSH
63034: CALL_OW 251
63038: PPUSH
63039: LD_VAR 0 2
63043: PPUSH
63044: CALL 36374 0 4
63048: PUSH
63049: LD_INT 4
63051: ARRAY
63052: ST_TO_ADDR
// end ;
63053: LD_VAR 0 3
63057: RET
// export function PlayerSeeMe ( unit ) ; begin
63058: LD_INT 0
63060: PPUSH
// result := See ( your_side , unit ) ;
63061: LD_ADDR_VAR 0 2
63065: PUSH
63066: LD_OWVAR 2
63070: PPUSH
63071: LD_VAR 0 1
63075: PPUSH
63076: CALL_OW 292
63080: ST_TO_ADDR
// end ;
63081: LD_VAR 0 2
63085: RET
// export function ReverseDir ( unit ) ; begin
63086: LD_INT 0
63088: PPUSH
// if not unit then
63089: LD_VAR 0 1
63093: NOT
63094: IFFALSE 63098
// exit ;
63096: GO 63121
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63098: LD_ADDR_VAR 0 2
63102: PUSH
63103: LD_VAR 0 1
63107: PPUSH
63108: CALL_OW 254
63112: PUSH
63113: LD_INT 3
63115: PLUS
63116: PUSH
63117: LD_INT 6
63119: MOD
63120: ST_TO_ADDR
// end ;
63121: LD_VAR 0 2
63125: RET
// export function ReverseArray ( array ) ; var i ; begin
63126: LD_INT 0
63128: PPUSH
63129: PPUSH
// if not array then
63130: LD_VAR 0 1
63134: NOT
63135: IFFALSE 63139
// exit ;
63137: GO 63194
// result := [ ] ;
63139: LD_ADDR_VAR 0 2
63143: PUSH
63144: EMPTY
63145: ST_TO_ADDR
// for i := array downto 1 do
63146: LD_ADDR_VAR 0 3
63150: PUSH
63151: DOUBLE
63152: LD_VAR 0 1
63156: INC
63157: ST_TO_ADDR
63158: LD_INT 1
63160: PUSH
63161: FOR_DOWNTO
63162: IFFALSE 63192
// result := Join ( result , array [ i ] ) ;
63164: LD_ADDR_VAR 0 2
63168: PUSH
63169: LD_VAR 0 2
63173: PPUSH
63174: LD_VAR 0 1
63178: PUSH
63179: LD_VAR 0 3
63183: ARRAY
63184: PPUSH
63185: CALL 67837 0 2
63189: ST_TO_ADDR
63190: GO 63161
63192: POP
63193: POP
// end ;
63194: LD_VAR 0 2
63198: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63199: LD_INT 0
63201: PPUSH
63202: PPUSH
63203: PPUSH
63204: PPUSH
63205: PPUSH
63206: PPUSH
// if not unit or not hexes then
63207: LD_VAR 0 1
63211: NOT
63212: PUSH
63213: LD_VAR 0 2
63217: NOT
63218: OR
63219: IFFALSE 63223
// exit ;
63221: GO 63346
// dist := 9999 ;
63223: LD_ADDR_VAR 0 5
63227: PUSH
63228: LD_INT 9999
63230: ST_TO_ADDR
// for i = 1 to hexes do
63231: LD_ADDR_VAR 0 4
63235: PUSH
63236: DOUBLE
63237: LD_INT 1
63239: DEC
63240: ST_TO_ADDR
63241: LD_VAR 0 2
63245: PUSH
63246: FOR_TO
63247: IFFALSE 63334
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63249: LD_ADDR_VAR 0 6
63253: PUSH
63254: LD_VAR 0 1
63258: PPUSH
63259: LD_VAR 0 2
63263: PUSH
63264: LD_VAR 0 4
63268: ARRAY
63269: PUSH
63270: LD_INT 1
63272: ARRAY
63273: PPUSH
63274: LD_VAR 0 2
63278: PUSH
63279: LD_VAR 0 4
63283: ARRAY
63284: PUSH
63285: LD_INT 2
63287: ARRAY
63288: PPUSH
63289: CALL_OW 297
63293: ST_TO_ADDR
// if tdist < dist then
63294: LD_VAR 0 6
63298: PUSH
63299: LD_VAR 0 5
63303: LESS
63304: IFFALSE 63332
// begin hex := hexes [ i ] ;
63306: LD_ADDR_VAR 0 8
63310: PUSH
63311: LD_VAR 0 2
63315: PUSH
63316: LD_VAR 0 4
63320: ARRAY
63321: ST_TO_ADDR
// dist := tdist ;
63322: LD_ADDR_VAR 0 5
63326: PUSH
63327: LD_VAR 0 6
63331: ST_TO_ADDR
// end ; end ;
63332: GO 63246
63334: POP
63335: POP
// result := hex ;
63336: LD_ADDR_VAR 0 3
63340: PUSH
63341: LD_VAR 0 8
63345: ST_TO_ADDR
// end ;
63346: LD_VAR 0 3
63350: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63351: LD_INT 0
63353: PPUSH
63354: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63355: LD_VAR 0 1
63359: NOT
63360: PUSH
63361: LD_VAR 0 1
63365: PUSH
63366: LD_INT 21
63368: PUSH
63369: LD_INT 2
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 23
63378: PUSH
63379: LD_INT 2
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PPUSH
63390: CALL_OW 69
63394: IN
63395: NOT
63396: OR
63397: IFFALSE 63401
// exit ;
63399: GO 63448
// for i = 1 to 3 do
63401: LD_ADDR_VAR 0 3
63405: PUSH
63406: DOUBLE
63407: LD_INT 1
63409: DEC
63410: ST_TO_ADDR
63411: LD_INT 3
63413: PUSH
63414: FOR_TO
63415: IFFALSE 63446
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63417: LD_VAR 0 1
63421: PPUSH
63422: CALL_OW 250
63426: PPUSH
63427: LD_VAR 0 1
63431: PPUSH
63432: CALL_OW 251
63436: PPUSH
63437: LD_INT 1
63439: PPUSH
63440: CALL_OW 453
63444: GO 63414
63446: POP
63447: POP
// end ;
63448: LD_VAR 0 2
63452: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63453: LD_INT 0
63455: PPUSH
63456: PPUSH
63457: PPUSH
63458: PPUSH
63459: PPUSH
63460: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63461: LD_VAR 0 1
63465: NOT
63466: PUSH
63467: LD_VAR 0 2
63471: NOT
63472: OR
63473: PUSH
63474: LD_VAR 0 1
63478: PPUSH
63479: CALL_OW 314
63483: OR
63484: IFFALSE 63488
// exit ;
63486: GO 63955
// if GetLives ( i ) < 250 then
63488: LD_VAR 0 4
63492: PPUSH
63493: CALL_OW 256
63497: PUSH
63498: LD_INT 250
63500: LESS
63501: IFFALSE 63514
// begin ComAutodestruct ( i ) ;
63503: LD_VAR 0 4
63507: PPUSH
63508: CALL 63351 0 1
// exit ;
63512: GO 63955
// end ; x := GetX ( enemy_unit ) ;
63514: LD_ADDR_VAR 0 7
63518: PUSH
63519: LD_VAR 0 2
63523: PPUSH
63524: CALL_OW 250
63528: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63529: LD_ADDR_VAR 0 8
63533: PUSH
63534: LD_VAR 0 2
63538: PPUSH
63539: CALL_OW 251
63543: ST_TO_ADDR
// if not x or not y then
63544: LD_VAR 0 7
63548: NOT
63549: PUSH
63550: LD_VAR 0 8
63554: NOT
63555: OR
63556: IFFALSE 63560
// exit ;
63558: GO 63955
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63560: LD_ADDR_VAR 0 6
63564: PUSH
63565: LD_VAR 0 7
63569: PPUSH
63570: LD_INT 0
63572: PPUSH
63573: LD_INT 4
63575: PPUSH
63576: CALL_OW 272
63580: PUSH
63581: LD_VAR 0 8
63585: PPUSH
63586: LD_INT 0
63588: PPUSH
63589: LD_INT 4
63591: PPUSH
63592: CALL_OW 273
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_VAR 0 7
63605: PPUSH
63606: LD_INT 1
63608: PPUSH
63609: LD_INT 4
63611: PPUSH
63612: CALL_OW 272
63616: PUSH
63617: LD_VAR 0 8
63621: PPUSH
63622: LD_INT 1
63624: PPUSH
63625: LD_INT 4
63627: PPUSH
63628: CALL_OW 273
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_VAR 0 7
63641: PPUSH
63642: LD_INT 2
63644: PPUSH
63645: LD_INT 4
63647: PPUSH
63648: CALL_OW 272
63652: PUSH
63653: LD_VAR 0 8
63657: PPUSH
63658: LD_INT 2
63660: PPUSH
63661: LD_INT 4
63663: PPUSH
63664: CALL_OW 273
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_VAR 0 7
63677: PPUSH
63678: LD_INT 3
63680: PPUSH
63681: LD_INT 4
63683: PPUSH
63684: CALL_OW 272
63688: PUSH
63689: LD_VAR 0 8
63693: PPUSH
63694: LD_INT 3
63696: PPUSH
63697: LD_INT 4
63699: PPUSH
63700: CALL_OW 273
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_VAR 0 7
63713: PPUSH
63714: LD_INT 4
63716: PPUSH
63717: LD_INT 4
63719: PPUSH
63720: CALL_OW 272
63724: PUSH
63725: LD_VAR 0 8
63729: PPUSH
63730: LD_INT 4
63732: PPUSH
63733: LD_INT 4
63735: PPUSH
63736: CALL_OW 273
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_VAR 0 7
63749: PPUSH
63750: LD_INT 5
63752: PPUSH
63753: LD_INT 4
63755: PPUSH
63756: CALL_OW 272
63760: PUSH
63761: LD_VAR 0 8
63765: PPUSH
63766: LD_INT 5
63768: PPUSH
63769: LD_INT 4
63771: PPUSH
63772: CALL_OW 273
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: ST_TO_ADDR
// for i = tmp downto 1 do
63789: LD_ADDR_VAR 0 4
63793: PUSH
63794: DOUBLE
63795: LD_VAR 0 6
63799: INC
63800: ST_TO_ADDR
63801: LD_INT 1
63803: PUSH
63804: FOR_DOWNTO
63805: IFFALSE 63906
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63807: LD_VAR 0 6
63811: PUSH
63812: LD_VAR 0 4
63816: ARRAY
63817: PUSH
63818: LD_INT 1
63820: ARRAY
63821: PPUSH
63822: LD_VAR 0 6
63826: PUSH
63827: LD_VAR 0 4
63831: ARRAY
63832: PUSH
63833: LD_INT 2
63835: ARRAY
63836: PPUSH
63837: CALL_OW 488
63841: NOT
63842: PUSH
63843: LD_VAR 0 6
63847: PUSH
63848: LD_VAR 0 4
63852: ARRAY
63853: PUSH
63854: LD_INT 1
63856: ARRAY
63857: PPUSH
63858: LD_VAR 0 6
63862: PUSH
63863: LD_VAR 0 4
63867: ARRAY
63868: PUSH
63869: LD_INT 2
63871: ARRAY
63872: PPUSH
63873: CALL_OW 428
63877: PUSH
63878: LD_INT 0
63880: NONEQUAL
63881: OR
63882: IFFALSE 63904
// tmp := Delete ( tmp , i ) ;
63884: LD_ADDR_VAR 0 6
63888: PUSH
63889: LD_VAR 0 6
63893: PPUSH
63894: LD_VAR 0 4
63898: PPUSH
63899: CALL_OW 3
63903: ST_TO_ADDR
63904: GO 63804
63906: POP
63907: POP
// j := GetClosestHex ( unit , tmp ) ;
63908: LD_ADDR_VAR 0 5
63912: PUSH
63913: LD_VAR 0 1
63917: PPUSH
63918: LD_VAR 0 6
63922: PPUSH
63923: CALL 63199 0 2
63927: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63928: LD_VAR 0 1
63932: PPUSH
63933: LD_VAR 0 5
63937: PUSH
63938: LD_INT 1
63940: ARRAY
63941: PPUSH
63942: LD_VAR 0 5
63946: PUSH
63947: LD_INT 2
63949: ARRAY
63950: PPUSH
63951: CALL_OW 111
// end ;
63955: LD_VAR 0 3
63959: RET
// export function PrepareApemanSoldier ( ) ; begin
63960: LD_INT 0
63962: PPUSH
// uc_nation := 0 ;
63963: LD_ADDR_OWVAR 21
63967: PUSH
63968: LD_INT 0
63970: ST_TO_ADDR
// hc_sex := sex_male ;
63971: LD_ADDR_OWVAR 27
63975: PUSH
63976: LD_INT 1
63978: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63979: LD_ADDR_OWVAR 28
63983: PUSH
63984: LD_INT 15
63986: ST_TO_ADDR
// hc_gallery :=  ;
63987: LD_ADDR_OWVAR 33
63991: PUSH
63992: LD_STRING 
63994: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63995: LD_ADDR_OWVAR 31
63999: PUSH
64000: LD_INT 0
64002: PPUSH
64003: LD_INT 3
64005: PPUSH
64006: CALL_OW 12
64010: PUSH
64011: LD_INT 0
64013: PPUSH
64014: LD_INT 3
64016: PPUSH
64017: CALL_OW 12
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: ST_TO_ADDR
// end ;
64034: LD_VAR 0 1
64038: RET
// export function PrepareApemanEngineer ( ) ; begin
64039: LD_INT 0
64041: PPUSH
// uc_nation := 0 ;
64042: LD_ADDR_OWVAR 21
64046: PUSH
64047: LD_INT 0
64049: ST_TO_ADDR
// hc_sex := sex_male ;
64050: LD_ADDR_OWVAR 27
64054: PUSH
64055: LD_INT 1
64057: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64058: LD_ADDR_OWVAR 28
64062: PUSH
64063: LD_INT 16
64065: ST_TO_ADDR
// hc_gallery :=  ;
64066: LD_ADDR_OWVAR 33
64070: PUSH
64071: LD_STRING 
64073: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64074: LD_ADDR_OWVAR 31
64078: PUSH
64079: LD_INT 0
64081: PPUSH
64082: LD_INT 3
64084: PPUSH
64085: CALL_OW 12
64089: PUSH
64090: LD_INT 0
64092: PPUSH
64093: LD_INT 3
64095: PPUSH
64096: CALL_OW 12
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: LD_INT 0
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: ST_TO_ADDR
// end ;
64113: LD_VAR 0 1
64117: RET
// export function PrepareApeman ( agressivity ) ; begin
64118: LD_INT 0
64120: PPUSH
// uc_side := 0 ;
64121: LD_ADDR_OWVAR 20
64125: PUSH
64126: LD_INT 0
64128: ST_TO_ADDR
// uc_nation := 0 ;
64129: LD_ADDR_OWVAR 21
64133: PUSH
64134: LD_INT 0
64136: ST_TO_ADDR
// hc_sex := sex_male ;
64137: LD_ADDR_OWVAR 27
64141: PUSH
64142: LD_INT 1
64144: ST_TO_ADDR
// hc_class := class_apeman ;
64145: LD_ADDR_OWVAR 28
64149: PUSH
64150: LD_INT 12
64152: ST_TO_ADDR
// hc_gallery :=  ;
64153: LD_ADDR_OWVAR 33
64157: PUSH
64158: LD_STRING 
64160: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64161: LD_ADDR_OWVAR 35
64165: PUSH
64166: LD_VAR 0 1
64170: NEG
64171: PPUSH
64172: LD_VAR 0 1
64176: PPUSH
64177: CALL_OW 12
64181: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64182: LD_ADDR_OWVAR 31
64186: PUSH
64187: LD_INT 0
64189: PPUSH
64190: LD_INT 3
64192: PPUSH
64193: CALL_OW 12
64197: PUSH
64198: LD_INT 0
64200: PPUSH
64201: LD_INT 3
64203: PPUSH
64204: CALL_OW 12
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: LD_INT 0
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: ST_TO_ADDR
// end ;
64221: LD_VAR 0 2
64225: RET
// export function PrepareTiger ( agressivity ) ; begin
64226: LD_INT 0
64228: PPUSH
// uc_side := 0 ;
64229: LD_ADDR_OWVAR 20
64233: PUSH
64234: LD_INT 0
64236: ST_TO_ADDR
// uc_nation := 0 ;
64237: LD_ADDR_OWVAR 21
64241: PUSH
64242: LD_INT 0
64244: ST_TO_ADDR
// hc_class := class_tiger ;
64245: LD_ADDR_OWVAR 28
64249: PUSH
64250: LD_INT 14
64252: ST_TO_ADDR
// hc_gallery :=  ;
64253: LD_ADDR_OWVAR 33
64257: PUSH
64258: LD_STRING 
64260: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64261: LD_ADDR_OWVAR 35
64265: PUSH
64266: LD_VAR 0 1
64270: NEG
64271: PPUSH
64272: LD_VAR 0 1
64276: PPUSH
64277: CALL_OW 12
64281: ST_TO_ADDR
// end ;
64282: LD_VAR 0 2
64286: RET
// export function PrepareEnchidna ( ) ; begin
64287: LD_INT 0
64289: PPUSH
// uc_side := 0 ;
64290: LD_ADDR_OWVAR 20
64294: PUSH
64295: LD_INT 0
64297: ST_TO_ADDR
// uc_nation := 0 ;
64298: LD_ADDR_OWVAR 21
64302: PUSH
64303: LD_INT 0
64305: ST_TO_ADDR
// hc_class := class_baggie ;
64306: LD_ADDR_OWVAR 28
64310: PUSH
64311: LD_INT 13
64313: ST_TO_ADDR
// hc_gallery :=  ;
64314: LD_ADDR_OWVAR 33
64318: PUSH
64319: LD_STRING 
64321: ST_TO_ADDR
// end ;
64322: LD_VAR 0 1
64326: RET
// export function PrepareFrog ( ) ; begin
64327: LD_INT 0
64329: PPUSH
// uc_side := 0 ;
64330: LD_ADDR_OWVAR 20
64334: PUSH
64335: LD_INT 0
64337: ST_TO_ADDR
// uc_nation := 0 ;
64338: LD_ADDR_OWVAR 21
64342: PUSH
64343: LD_INT 0
64345: ST_TO_ADDR
// hc_class := class_frog ;
64346: LD_ADDR_OWVAR 28
64350: PUSH
64351: LD_INT 19
64353: ST_TO_ADDR
// hc_gallery :=  ;
64354: LD_ADDR_OWVAR 33
64358: PUSH
64359: LD_STRING 
64361: ST_TO_ADDR
// end ;
64362: LD_VAR 0 1
64366: RET
// export function PrepareFish ( ) ; begin
64367: LD_INT 0
64369: PPUSH
// uc_side := 0 ;
64370: LD_ADDR_OWVAR 20
64374: PUSH
64375: LD_INT 0
64377: ST_TO_ADDR
// uc_nation := 0 ;
64378: LD_ADDR_OWVAR 21
64382: PUSH
64383: LD_INT 0
64385: ST_TO_ADDR
// hc_class := class_fish ;
64386: LD_ADDR_OWVAR 28
64390: PUSH
64391: LD_INT 20
64393: ST_TO_ADDR
// hc_gallery :=  ;
64394: LD_ADDR_OWVAR 33
64398: PUSH
64399: LD_STRING 
64401: ST_TO_ADDR
// end ;
64402: LD_VAR 0 1
64406: RET
// export function PrepareBird ( ) ; begin
64407: LD_INT 0
64409: PPUSH
// uc_side := 0 ;
64410: LD_ADDR_OWVAR 20
64414: PUSH
64415: LD_INT 0
64417: ST_TO_ADDR
// uc_nation := 0 ;
64418: LD_ADDR_OWVAR 21
64422: PUSH
64423: LD_INT 0
64425: ST_TO_ADDR
// hc_class := class_phororhacos ;
64426: LD_ADDR_OWVAR 28
64430: PUSH
64431: LD_INT 18
64433: ST_TO_ADDR
// hc_gallery :=  ;
64434: LD_ADDR_OWVAR 33
64438: PUSH
64439: LD_STRING 
64441: ST_TO_ADDR
// end ;
64442: LD_VAR 0 1
64446: RET
// export function PrepareHorse ( ) ; begin
64447: LD_INT 0
64449: PPUSH
// uc_side := 0 ;
64450: LD_ADDR_OWVAR 20
64454: PUSH
64455: LD_INT 0
64457: ST_TO_ADDR
// uc_nation := 0 ;
64458: LD_ADDR_OWVAR 21
64462: PUSH
64463: LD_INT 0
64465: ST_TO_ADDR
// hc_class := class_horse ;
64466: LD_ADDR_OWVAR 28
64470: PUSH
64471: LD_INT 21
64473: ST_TO_ADDR
// hc_gallery :=  ;
64474: LD_ADDR_OWVAR 33
64478: PUSH
64479: LD_STRING 
64481: ST_TO_ADDR
// end ;
64482: LD_VAR 0 1
64486: RET
// export function PrepareMastodont ( ) ; begin
64487: LD_INT 0
64489: PPUSH
// uc_side := 0 ;
64490: LD_ADDR_OWVAR 20
64494: PUSH
64495: LD_INT 0
64497: ST_TO_ADDR
// uc_nation := 0 ;
64498: LD_ADDR_OWVAR 21
64502: PUSH
64503: LD_INT 0
64505: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64506: LD_ADDR_OWVAR 37
64510: PUSH
64511: LD_INT 31
64513: ST_TO_ADDR
// vc_control := control_rider ;
64514: LD_ADDR_OWVAR 38
64518: PUSH
64519: LD_INT 4
64521: ST_TO_ADDR
// end ;
64522: LD_VAR 0 1
64526: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64527: LD_INT 0
64529: PPUSH
64530: PPUSH
64531: PPUSH
// uc_side = 0 ;
64532: LD_ADDR_OWVAR 20
64536: PUSH
64537: LD_INT 0
64539: ST_TO_ADDR
// uc_nation = 0 ;
64540: LD_ADDR_OWVAR 21
64544: PUSH
64545: LD_INT 0
64547: ST_TO_ADDR
// InitHc_All ( ) ;
64548: CALL_OW 584
// InitVc ;
64552: CALL_OW 20
// if mastodonts then
64556: LD_VAR 0 6
64560: IFFALSE 64627
// for i = 1 to mastodonts do
64562: LD_ADDR_VAR 0 11
64566: PUSH
64567: DOUBLE
64568: LD_INT 1
64570: DEC
64571: ST_TO_ADDR
64572: LD_VAR 0 6
64576: PUSH
64577: FOR_TO
64578: IFFALSE 64625
// begin vc_chassis := 31 ;
64580: LD_ADDR_OWVAR 37
64584: PUSH
64585: LD_INT 31
64587: ST_TO_ADDR
// vc_control := control_rider ;
64588: LD_ADDR_OWVAR 38
64592: PUSH
64593: LD_INT 4
64595: ST_TO_ADDR
// animal := CreateVehicle ;
64596: LD_ADDR_VAR 0 12
64600: PUSH
64601: CALL_OW 45
64605: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64606: LD_VAR 0 12
64610: PPUSH
64611: LD_VAR 0 8
64615: PPUSH
64616: LD_INT 0
64618: PPUSH
64619: CALL 66755 0 3
// end ;
64623: GO 64577
64625: POP
64626: POP
// if horses then
64627: LD_VAR 0 5
64631: IFFALSE 64698
// for i = 1 to horses do
64633: LD_ADDR_VAR 0 11
64637: PUSH
64638: DOUBLE
64639: LD_INT 1
64641: DEC
64642: ST_TO_ADDR
64643: LD_VAR 0 5
64647: PUSH
64648: FOR_TO
64649: IFFALSE 64696
// begin hc_class := 21 ;
64651: LD_ADDR_OWVAR 28
64655: PUSH
64656: LD_INT 21
64658: ST_TO_ADDR
// hc_gallery :=  ;
64659: LD_ADDR_OWVAR 33
64663: PUSH
64664: LD_STRING 
64666: ST_TO_ADDR
// animal := CreateHuman ;
64667: LD_ADDR_VAR 0 12
64671: PUSH
64672: CALL_OW 44
64676: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64677: LD_VAR 0 12
64681: PPUSH
64682: LD_VAR 0 8
64686: PPUSH
64687: LD_INT 0
64689: PPUSH
64690: CALL 66755 0 3
// end ;
64694: GO 64648
64696: POP
64697: POP
// if birds then
64698: LD_VAR 0 1
64702: IFFALSE 64769
// for i = 1 to birds do
64704: LD_ADDR_VAR 0 11
64708: PUSH
64709: DOUBLE
64710: LD_INT 1
64712: DEC
64713: ST_TO_ADDR
64714: LD_VAR 0 1
64718: PUSH
64719: FOR_TO
64720: IFFALSE 64767
// begin hc_class := 18 ;
64722: LD_ADDR_OWVAR 28
64726: PUSH
64727: LD_INT 18
64729: ST_TO_ADDR
// hc_gallery =  ;
64730: LD_ADDR_OWVAR 33
64734: PUSH
64735: LD_STRING 
64737: ST_TO_ADDR
// animal := CreateHuman ;
64738: LD_ADDR_VAR 0 12
64742: PUSH
64743: CALL_OW 44
64747: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64748: LD_VAR 0 12
64752: PPUSH
64753: LD_VAR 0 8
64757: PPUSH
64758: LD_INT 0
64760: PPUSH
64761: CALL 66755 0 3
// end ;
64765: GO 64719
64767: POP
64768: POP
// if tigers then
64769: LD_VAR 0 2
64773: IFFALSE 64857
// for i = 1 to tigers do
64775: LD_ADDR_VAR 0 11
64779: PUSH
64780: DOUBLE
64781: LD_INT 1
64783: DEC
64784: ST_TO_ADDR
64785: LD_VAR 0 2
64789: PUSH
64790: FOR_TO
64791: IFFALSE 64855
// begin hc_class = class_tiger ;
64793: LD_ADDR_OWVAR 28
64797: PUSH
64798: LD_INT 14
64800: ST_TO_ADDR
// hc_gallery =  ;
64801: LD_ADDR_OWVAR 33
64805: PUSH
64806: LD_STRING 
64808: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64809: LD_ADDR_OWVAR 35
64813: PUSH
64814: LD_INT 7
64816: NEG
64817: PPUSH
64818: LD_INT 7
64820: PPUSH
64821: CALL_OW 12
64825: ST_TO_ADDR
// animal := CreateHuman ;
64826: LD_ADDR_VAR 0 12
64830: PUSH
64831: CALL_OW 44
64835: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64836: LD_VAR 0 12
64840: PPUSH
64841: LD_VAR 0 8
64845: PPUSH
64846: LD_INT 0
64848: PPUSH
64849: CALL 66755 0 3
// end ;
64853: GO 64790
64855: POP
64856: POP
// if apemans then
64857: LD_VAR 0 3
64861: IFFALSE 64984
// for i = 1 to apemans do
64863: LD_ADDR_VAR 0 11
64867: PUSH
64868: DOUBLE
64869: LD_INT 1
64871: DEC
64872: ST_TO_ADDR
64873: LD_VAR 0 3
64877: PUSH
64878: FOR_TO
64879: IFFALSE 64982
// begin hc_class = class_apeman ;
64881: LD_ADDR_OWVAR 28
64885: PUSH
64886: LD_INT 12
64888: ST_TO_ADDR
// hc_gallery =  ;
64889: LD_ADDR_OWVAR 33
64893: PUSH
64894: LD_STRING 
64896: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64897: LD_ADDR_OWVAR 35
64901: PUSH
64902: LD_INT 2
64904: NEG
64905: PPUSH
64906: LD_INT 2
64908: PPUSH
64909: CALL_OW 12
64913: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64914: LD_ADDR_OWVAR 31
64918: PUSH
64919: LD_INT 1
64921: PPUSH
64922: LD_INT 3
64924: PPUSH
64925: CALL_OW 12
64929: PUSH
64930: LD_INT 1
64932: PPUSH
64933: LD_INT 3
64935: PPUSH
64936: CALL_OW 12
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: ST_TO_ADDR
// animal := CreateHuman ;
64953: LD_ADDR_VAR 0 12
64957: PUSH
64958: CALL_OW 44
64962: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64963: LD_VAR 0 12
64967: PPUSH
64968: LD_VAR 0 8
64972: PPUSH
64973: LD_INT 0
64975: PPUSH
64976: CALL 66755 0 3
// end ;
64980: GO 64878
64982: POP
64983: POP
// if enchidnas then
64984: LD_VAR 0 4
64988: IFFALSE 65055
// for i = 1 to enchidnas do
64990: LD_ADDR_VAR 0 11
64994: PUSH
64995: DOUBLE
64996: LD_INT 1
64998: DEC
64999: ST_TO_ADDR
65000: LD_VAR 0 4
65004: PUSH
65005: FOR_TO
65006: IFFALSE 65053
// begin hc_class = 13 ;
65008: LD_ADDR_OWVAR 28
65012: PUSH
65013: LD_INT 13
65015: ST_TO_ADDR
// hc_gallery =  ;
65016: LD_ADDR_OWVAR 33
65020: PUSH
65021: LD_STRING 
65023: ST_TO_ADDR
// animal := CreateHuman ;
65024: LD_ADDR_VAR 0 12
65028: PUSH
65029: CALL_OW 44
65033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65034: LD_VAR 0 12
65038: PPUSH
65039: LD_VAR 0 8
65043: PPUSH
65044: LD_INT 0
65046: PPUSH
65047: CALL 66755 0 3
// end ;
65051: GO 65005
65053: POP
65054: POP
// if fishes then
65055: LD_VAR 0 7
65059: IFFALSE 65126
// for i = 1 to fishes do
65061: LD_ADDR_VAR 0 11
65065: PUSH
65066: DOUBLE
65067: LD_INT 1
65069: DEC
65070: ST_TO_ADDR
65071: LD_VAR 0 7
65075: PUSH
65076: FOR_TO
65077: IFFALSE 65124
// begin hc_class = 20 ;
65079: LD_ADDR_OWVAR 28
65083: PUSH
65084: LD_INT 20
65086: ST_TO_ADDR
// hc_gallery =  ;
65087: LD_ADDR_OWVAR 33
65091: PUSH
65092: LD_STRING 
65094: ST_TO_ADDR
// animal := CreateHuman ;
65095: LD_ADDR_VAR 0 12
65099: PUSH
65100: CALL_OW 44
65104: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65105: LD_VAR 0 12
65109: PPUSH
65110: LD_VAR 0 9
65114: PPUSH
65115: LD_INT 0
65117: PPUSH
65118: CALL 66755 0 3
// end ;
65122: GO 65076
65124: POP
65125: POP
// end ;
65126: LD_VAR 0 10
65130: RET
// export function WantHeal ( sci , unit ) ; begin
65131: LD_INT 0
65133: PPUSH
// if GetTaskList ( sci ) > 0 then
65134: LD_VAR 0 1
65138: PPUSH
65139: CALL_OW 437
65143: PUSH
65144: LD_INT 0
65146: GREATER
65147: IFFALSE 65217
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65149: LD_VAR 0 1
65153: PPUSH
65154: CALL_OW 437
65158: PUSH
65159: LD_INT 1
65161: ARRAY
65162: PUSH
65163: LD_INT 1
65165: ARRAY
65166: PUSH
65167: LD_STRING l
65169: EQUAL
65170: PUSH
65171: LD_VAR 0 1
65175: PPUSH
65176: CALL_OW 437
65180: PUSH
65181: LD_INT 1
65183: ARRAY
65184: PUSH
65185: LD_INT 4
65187: ARRAY
65188: PUSH
65189: LD_VAR 0 2
65193: EQUAL
65194: AND
65195: IFFALSE 65207
// result := true else
65197: LD_ADDR_VAR 0 3
65201: PUSH
65202: LD_INT 1
65204: ST_TO_ADDR
65205: GO 65215
// result := false ;
65207: LD_ADDR_VAR 0 3
65211: PUSH
65212: LD_INT 0
65214: ST_TO_ADDR
// end else
65215: GO 65225
// result := false ;
65217: LD_ADDR_VAR 0 3
65221: PUSH
65222: LD_INT 0
65224: ST_TO_ADDR
// end ;
65225: LD_VAR 0 3
65229: RET
// export function HealTarget ( sci ) ; begin
65230: LD_INT 0
65232: PPUSH
// if not sci then
65233: LD_VAR 0 1
65237: NOT
65238: IFFALSE 65242
// exit ;
65240: GO 65307
// result := 0 ;
65242: LD_ADDR_VAR 0 2
65246: PUSH
65247: LD_INT 0
65249: ST_TO_ADDR
// if GetTaskList ( sci ) then
65250: LD_VAR 0 1
65254: PPUSH
65255: CALL_OW 437
65259: IFFALSE 65307
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65261: LD_VAR 0 1
65265: PPUSH
65266: CALL_OW 437
65270: PUSH
65271: LD_INT 1
65273: ARRAY
65274: PUSH
65275: LD_INT 1
65277: ARRAY
65278: PUSH
65279: LD_STRING l
65281: EQUAL
65282: IFFALSE 65307
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65284: LD_ADDR_VAR 0 2
65288: PUSH
65289: LD_VAR 0 1
65293: PPUSH
65294: CALL_OW 437
65298: PUSH
65299: LD_INT 1
65301: ARRAY
65302: PUSH
65303: LD_INT 4
65305: ARRAY
65306: ST_TO_ADDR
// end ;
65307: LD_VAR 0 2
65311: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65312: LD_INT 0
65314: PPUSH
65315: PPUSH
65316: PPUSH
65317: PPUSH
// if not base_units then
65318: LD_VAR 0 1
65322: NOT
65323: IFFALSE 65327
// exit ;
65325: GO 65414
// result := false ;
65327: LD_ADDR_VAR 0 2
65331: PUSH
65332: LD_INT 0
65334: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65335: LD_ADDR_VAR 0 5
65339: PUSH
65340: LD_VAR 0 1
65344: PPUSH
65345: LD_INT 21
65347: PUSH
65348: LD_INT 3
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PPUSH
65355: CALL_OW 72
65359: ST_TO_ADDR
// if not tmp then
65360: LD_VAR 0 5
65364: NOT
65365: IFFALSE 65369
// exit ;
65367: GO 65414
// for i in tmp do
65369: LD_ADDR_VAR 0 3
65373: PUSH
65374: LD_VAR 0 5
65378: PUSH
65379: FOR_IN
65380: IFFALSE 65412
// begin result := EnemyInRange ( i , 22 ) ;
65382: LD_ADDR_VAR 0 2
65386: PUSH
65387: LD_VAR 0 3
65391: PPUSH
65392: LD_INT 22
65394: PPUSH
65395: CALL 63001 0 2
65399: ST_TO_ADDR
// if result then
65400: LD_VAR 0 2
65404: IFFALSE 65410
// exit ;
65406: POP
65407: POP
65408: GO 65414
// end ;
65410: GO 65379
65412: POP
65413: POP
// end ;
65414: LD_VAR 0 2
65418: RET
// export function FilterByTag ( units , tag ) ; begin
65419: LD_INT 0
65421: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65422: LD_ADDR_VAR 0 3
65426: PUSH
65427: LD_VAR 0 1
65431: PPUSH
65432: LD_INT 120
65434: PUSH
65435: LD_VAR 0 2
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PPUSH
65444: CALL_OW 72
65448: ST_TO_ADDR
// end ;
65449: LD_VAR 0 3
65453: RET
// export function IsDriver ( un ) ; begin
65454: LD_INT 0
65456: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65457: LD_ADDR_VAR 0 2
65461: PUSH
65462: LD_VAR 0 1
65466: PUSH
65467: LD_INT 55
65469: PUSH
65470: EMPTY
65471: LIST
65472: PPUSH
65473: CALL_OW 69
65477: IN
65478: ST_TO_ADDR
// end ;
65479: LD_VAR 0 2
65483: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65484: LD_INT 0
65486: PPUSH
65487: PPUSH
// list := [ ] ;
65488: LD_ADDR_VAR 0 5
65492: PUSH
65493: EMPTY
65494: ST_TO_ADDR
// case d of 0 :
65495: LD_VAR 0 3
65499: PUSH
65500: LD_INT 0
65502: DOUBLE
65503: EQUAL
65504: IFTRUE 65508
65506: GO 65641
65508: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65509: LD_ADDR_VAR 0 5
65513: PUSH
65514: LD_VAR 0 1
65518: PUSH
65519: LD_INT 4
65521: MINUS
65522: PUSH
65523: LD_VAR 0 2
65527: PUSH
65528: LD_INT 4
65530: MINUS
65531: PUSH
65532: LD_INT 2
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: LIST
65539: PUSH
65540: LD_VAR 0 1
65544: PUSH
65545: LD_INT 3
65547: MINUS
65548: PUSH
65549: LD_VAR 0 2
65553: PUSH
65554: LD_INT 1
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: LIST
65561: PUSH
65562: LD_VAR 0 1
65566: PUSH
65567: LD_INT 4
65569: PLUS
65570: PUSH
65571: LD_VAR 0 2
65575: PUSH
65576: LD_INT 4
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: LIST
65583: PUSH
65584: LD_VAR 0 1
65588: PUSH
65589: LD_INT 3
65591: PLUS
65592: PUSH
65593: LD_VAR 0 2
65597: PUSH
65598: LD_INT 3
65600: PLUS
65601: PUSH
65602: LD_INT 5
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: LIST
65609: PUSH
65610: LD_VAR 0 1
65614: PUSH
65615: LD_VAR 0 2
65619: PUSH
65620: LD_INT 4
65622: PLUS
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: LIST
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: ST_TO_ADDR
// end ; 1 :
65639: GO 66339
65641: LD_INT 1
65643: DOUBLE
65644: EQUAL
65645: IFTRUE 65649
65647: GO 65782
65649: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65650: LD_ADDR_VAR 0 5
65654: PUSH
65655: LD_VAR 0 1
65659: PUSH
65660: LD_VAR 0 2
65664: PUSH
65665: LD_INT 4
65667: MINUS
65668: PUSH
65669: LD_INT 3
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: LIST
65676: PUSH
65677: LD_VAR 0 1
65681: PUSH
65682: LD_INT 3
65684: MINUS
65685: PUSH
65686: LD_VAR 0 2
65690: PUSH
65691: LD_INT 3
65693: MINUS
65694: PUSH
65695: LD_INT 2
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: LIST
65702: PUSH
65703: LD_VAR 0 1
65707: PUSH
65708: LD_INT 4
65710: MINUS
65711: PUSH
65712: LD_VAR 0 2
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: LIST
65724: PUSH
65725: LD_VAR 0 1
65729: PUSH
65730: LD_VAR 0 2
65734: PUSH
65735: LD_INT 3
65737: PLUS
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: LIST
65746: PUSH
65747: LD_VAR 0 1
65751: PUSH
65752: LD_INT 4
65754: PLUS
65755: PUSH
65756: LD_VAR 0 2
65760: PUSH
65761: LD_INT 4
65763: PLUS
65764: PUSH
65765: LD_INT 5
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: LIST
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: ST_TO_ADDR
// end ; 2 :
65780: GO 66339
65782: LD_INT 2
65784: DOUBLE
65785: EQUAL
65786: IFTRUE 65790
65788: GO 65919
65790: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65791: LD_ADDR_VAR 0 5
65795: PUSH
65796: LD_VAR 0 1
65800: PUSH
65801: LD_VAR 0 2
65805: PUSH
65806: LD_INT 3
65808: MINUS
65809: PUSH
65810: LD_INT 3
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: LIST
65817: PUSH
65818: LD_VAR 0 1
65822: PUSH
65823: LD_INT 4
65825: PLUS
65826: PUSH
65827: LD_VAR 0 2
65831: PUSH
65832: LD_INT 4
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: LIST
65839: PUSH
65840: LD_VAR 0 1
65844: PUSH
65845: LD_VAR 0 2
65849: PUSH
65850: LD_INT 4
65852: PLUS
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: LIST
65861: PUSH
65862: LD_VAR 0 1
65866: PUSH
65867: LD_INT 3
65869: MINUS
65870: PUSH
65871: LD_VAR 0 2
65875: PUSH
65876: LD_INT 1
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: LIST
65883: PUSH
65884: LD_VAR 0 1
65888: PUSH
65889: LD_INT 4
65891: MINUS
65892: PUSH
65893: LD_VAR 0 2
65897: PUSH
65898: LD_INT 4
65900: MINUS
65901: PUSH
65902: LD_INT 2
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: LIST
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: ST_TO_ADDR
// end ; 3 :
65917: GO 66339
65919: LD_INT 3
65921: DOUBLE
65922: EQUAL
65923: IFTRUE 65927
65925: GO 66060
65927: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65928: LD_ADDR_VAR 0 5
65932: PUSH
65933: LD_VAR 0 1
65937: PUSH
65938: LD_INT 3
65940: PLUS
65941: PUSH
65942: LD_VAR 0 2
65946: PUSH
65947: LD_INT 4
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: LIST
65954: PUSH
65955: LD_VAR 0 1
65959: PUSH
65960: LD_INT 4
65962: PLUS
65963: PUSH
65964: LD_VAR 0 2
65968: PUSH
65969: LD_INT 4
65971: PLUS
65972: PUSH
65973: LD_INT 5
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: LIST
65980: PUSH
65981: LD_VAR 0 1
65985: PUSH
65986: LD_INT 4
65988: MINUS
65989: PUSH
65990: LD_VAR 0 2
65994: PUSH
65995: LD_INT 1
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: LIST
66002: PUSH
66003: LD_VAR 0 1
66007: PUSH
66008: LD_VAR 0 2
66012: PUSH
66013: LD_INT 4
66015: MINUS
66016: PUSH
66017: LD_INT 3
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: LIST
66024: PUSH
66025: LD_VAR 0 1
66029: PUSH
66030: LD_INT 3
66032: MINUS
66033: PUSH
66034: LD_VAR 0 2
66038: PUSH
66039: LD_INT 3
66041: MINUS
66042: PUSH
66043: LD_INT 2
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: LIST
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: ST_TO_ADDR
// end ; 4 :
66058: GO 66339
66060: LD_INT 4
66062: DOUBLE
66063: EQUAL
66064: IFTRUE 66068
66066: GO 66201
66068: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66069: LD_ADDR_VAR 0 5
66073: PUSH
66074: LD_VAR 0 1
66078: PUSH
66079: LD_VAR 0 2
66083: PUSH
66084: LD_INT 4
66086: PLUS
66087: PUSH
66088: LD_INT 0
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: LIST
66095: PUSH
66096: LD_VAR 0 1
66100: PUSH
66101: LD_INT 3
66103: PLUS
66104: PUSH
66105: LD_VAR 0 2
66109: PUSH
66110: LD_INT 3
66112: PLUS
66113: PUSH
66114: LD_INT 5
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: LIST
66121: PUSH
66122: LD_VAR 0 1
66126: PUSH
66127: LD_INT 4
66129: PLUS
66130: PUSH
66131: LD_VAR 0 2
66135: PUSH
66136: LD_INT 4
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: LIST
66143: PUSH
66144: LD_VAR 0 1
66148: PUSH
66149: LD_VAR 0 2
66153: PUSH
66154: LD_INT 3
66156: MINUS
66157: PUSH
66158: LD_INT 3
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: LIST
66165: PUSH
66166: LD_VAR 0 1
66170: PUSH
66171: LD_INT 4
66173: MINUS
66174: PUSH
66175: LD_VAR 0 2
66179: PUSH
66180: LD_INT 4
66182: MINUS
66183: PUSH
66184: LD_INT 2
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: LIST
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: ST_TO_ADDR
// end ; 5 :
66199: GO 66339
66201: LD_INT 5
66203: DOUBLE
66204: EQUAL
66205: IFTRUE 66209
66207: GO 66338
66209: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66210: LD_ADDR_VAR 0 5
66214: PUSH
66215: LD_VAR 0 1
66219: PUSH
66220: LD_INT 4
66222: MINUS
66223: PUSH
66224: LD_VAR 0 2
66228: PUSH
66229: LD_INT 1
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: LIST
66236: PUSH
66237: LD_VAR 0 1
66241: PUSH
66242: LD_VAR 0 2
66246: PUSH
66247: LD_INT 4
66249: MINUS
66250: PUSH
66251: LD_INT 3
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: LIST
66258: PUSH
66259: LD_VAR 0 1
66263: PUSH
66264: LD_INT 4
66266: PLUS
66267: PUSH
66268: LD_VAR 0 2
66272: PUSH
66273: LD_INT 4
66275: PLUS
66276: PUSH
66277: LD_INT 5
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: LIST
66284: PUSH
66285: LD_VAR 0 1
66289: PUSH
66290: LD_INT 3
66292: PLUS
66293: PUSH
66294: LD_VAR 0 2
66298: PUSH
66299: LD_INT 4
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: LIST
66306: PUSH
66307: LD_VAR 0 1
66311: PUSH
66312: LD_VAR 0 2
66316: PUSH
66317: LD_INT 3
66319: PLUS
66320: PUSH
66321: LD_INT 0
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: LIST
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: ST_TO_ADDR
// end ; end ;
66336: GO 66339
66338: POP
// result := list ;
66339: LD_ADDR_VAR 0 4
66343: PUSH
66344: LD_VAR 0 5
66348: ST_TO_ADDR
// end ;
66349: LD_VAR 0 4
66353: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66354: LD_INT 0
66356: PPUSH
66357: PPUSH
66358: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66359: LD_VAR 0 1
66363: NOT
66364: PUSH
66365: LD_VAR 0 2
66369: PUSH
66370: LD_INT 1
66372: PUSH
66373: LD_INT 2
66375: PUSH
66376: LD_INT 3
66378: PUSH
66379: LD_INT 4
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: IN
66388: NOT
66389: OR
66390: IFFALSE 66394
// exit ;
66392: GO 66477
// tmp := [ ] ;
66394: LD_ADDR_VAR 0 5
66398: PUSH
66399: EMPTY
66400: ST_TO_ADDR
// for i in units do
66401: LD_ADDR_VAR 0 4
66405: PUSH
66406: LD_VAR 0 1
66410: PUSH
66411: FOR_IN
66412: IFFALSE 66446
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66414: LD_ADDR_VAR 0 5
66418: PUSH
66419: LD_VAR 0 5
66423: PPUSH
66424: LD_VAR 0 4
66428: PPUSH
66429: LD_VAR 0 2
66433: PPUSH
66434: CALL_OW 259
66438: PPUSH
66439: CALL 67837 0 2
66443: ST_TO_ADDR
66444: GO 66411
66446: POP
66447: POP
// if not tmp then
66448: LD_VAR 0 5
66452: NOT
66453: IFFALSE 66457
// exit ;
66455: GO 66477
// result := SortListByListDesc ( units , tmp ) ;
66457: LD_ADDR_VAR 0 3
66461: PUSH
66462: LD_VAR 0 1
66466: PPUSH
66467: LD_VAR 0 5
66471: PPUSH
66472: CALL_OW 77
66476: ST_TO_ADDR
// end ;
66477: LD_VAR 0 3
66481: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66482: LD_INT 0
66484: PPUSH
66485: PPUSH
66486: PPUSH
// result := false ;
66487: LD_ADDR_VAR 0 3
66491: PUSH
66492: LD_INT 0
66494: ST_TO_ADDR
// if not building then
66495: LD_VAR 0 2
66499: NOT
66500: IFFALSE 66504
// exit ;
66502: GO 66642
// x := GetX ( building ) ;
66504: LD_ADDR_VAR 0 4
66508: PUSH
66509: LD_VAR 0 2
66513: PPUSH
66514: CALL_OW 250
66518: ST_TO_ADDR
// y := GetY ( building ) ;
66519: LD_ADDR_VAR 0 5
66523: PUSH
66524: LD_VAR 0 2
66528: PPUSH
66529: CALL_OW 251
66533: ST_TO_ADDR
// if not x or not y then
66534: LD_VAR 0 4
66538: NOT
66539: PUSH
66540: LD_VAR 0 5
66544: NOT
66545: OR
66546: IFFALSE 66550
// exit ;
66548: GO 66642
// if GetTaskList ( unit ) then
66550: LD_VAR 0 1
66554: PPUSH
66555: CALL_OW 437
66559: IFFALSE 66642
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66561: LD_STRING e
66563: PUSH
66564: LD_VAR 0 1
66568: PPUSH
66569: CALL_OW 437
66573: PUSH
66574: LD_INT 1
66576: ARRAY
66577: PUSH
66578: LD_INT 1
66580: ARRAY
66581: EQUAL
66582: PUSH
66583: LD_VAR 0 4
66587: PUSH
66588: LD_VAR 0 1
66592: PPUSH
66593: CALL_OW 437
66597: PUSH
66598: LD_INT 1
66600: ARRAY
66601: PUSH
66602: LD_INT 2
66604: ARRAY
66605: EQUAL
66606: AND
66607: PUSH
66608: LD_VAR 0 5
66612: PUSH
66613: LD_VAR 0 1
66617: PPUSH
66618: CALL_OW 437
66622: PUSH
66623: LD_INT 1
66625: ARRAY
66626: PUSH
66627: LD_INT 3
66629: ARRAY
66630: EQUAL
66631: AND
66632: IFFALSE 66642
// result := true end ;
66634: LD_ADDR_VAR 0 3
66638: PUSH
66639: LD_INT 1
66641: ST_TO_ADDR
// end ;
66642: LD_VAR 0 3
66646: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66647: LD_INT 0
66649: PPUSH
// result := false ;
66650: LD_ADDR_VAR 0 4
66654: PUSH
66655: LD_INT 0
66657: ST_TO_ADDR
// if GetTaskList ( unit ) then
66658: LD_VAR 0 1
66662: PPUSH
66663: CALL_OW 437
66667: IFFALSE 66750
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66669: LD_STRING M
66671: PUSH
66672: LD_VAR 0 1
66676: PPUSH
66677: CALL_OW 437
66681: PUSH
66682: LD_INT 1
66684: ARRAY
66685: PUSH
66686: LD_INT 1
66688: ARRAY
66689: EQUAL
66690: PUSH
66691: LD_VAR 0 2
66695: PUSH
66696: LD_VAR 0 1
66700: PPUSH
66701: CALL_OW 437
66705: PUSH
66706: LD_INT 1
66708: ARRAY
66709: PUSH
66710: LD_INT 2
66712: ARRAY
66713: EQUAL
66714: AND
66715: PUSH
66716: LD_VAR 0 3
66720: PUSH
66721: LD_VAR 0 1
66725: PPUSH
66726: CALL_OW 437
66730: PUSH
66731: LD_INT 1
66733: ARRAY
66734: PUSH
66735: LD_INT 3
66737: ARRAY
66738: EQUAL
66739: AND
66740: IFFALSE 66750
// result := true ;
66742: LD_ADDR_VAR 0 4
66746: PUSH
66747: LD_INT 1
66749: ST_TO_ADDR
// end ; end ;
66750: LD_VAR 0 4
66754: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66755: LD_INT 0
66757: PPUSH
66758: PPUSH
66759: PPUSH
66760: PPUSH
// if not unit or not area then
66761: LD_VAR 0 1
66765: NOT
66766: PUSH
66767: LD_VAR 0 2
66771: NOT
66772: OR
66773: IFFALSE 66777
// exit ;
66775: GO 66940
// tmp := AreaToList ( area , i ) ;
66777: LD_ADDR_VAR 0 6
66781: PUSH
66782: LD_VAR 0 2
66786: PPUSH
66787: LD_VAR 0 5
66791: PPUSH
66792: CALL_OW 517
66796: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66797: LD_ADDR_VAR 0 5
66801: PUSH
66802: DOUBLE
66803: LD_INT 1
66805: DEC
66806: ST_TO_ADDR
66807: LD_VAR 0 6
66811: PUSH
66812: LD_INT 1
66814: ARRAY
66815: PUSH
66816: FOR_TO
66817: IFFALSE 66938
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66819: LD_ADDR_VAR 0 7
66823: PUSH
66824: LD_VAR 0 6
66828: PUSH
66829: LD_INT 1
66831: ARRAY
66832: PUSH
66833: LD_VAR 0 5
66837: ARRAY
66838: PUSH
66839: LD_VAR 0 6
66843: PUSH
66844: LD_INT 2
66846: ARRAY
66847: PUSH
66848: LD_VAR 0 5
66852: ARRAY
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
66858: LD_INT 92
66860: PUSH
66861: LD_VAR 0 7
66865: PUSH
66866: LD_INT 1
66868: ARRAY
66869: PUSH
66870: LD_VAR 0 7
66874: PUSH
66875: LD_INT 2
66877: ARRAY
66878: PUSH
66879: LD_INT 3
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: PPUSH
66888: CALL_OW 69
66892: PUSH
66893: LD_INT 0
66895: EQUAL
66896: IFFALSE 66936
// begin PlaceUnitArea ( unit , area , mode ) ;
66898: LD_VAR 0 1
66902: PPUSH
66903: LD_VAR 0 2
66907: PPUSH
66908: LD_VAR 0 3
66912: PPUSH
66913: CALL_OW 49
// result := IsPlaced ( unit ) ;
66917: LD_ADDR_VAR 0 4
66921: PUSH
66922: LD_VAR 0 1
66926: PPUSH
66927: CALL_OW 305
66931: ST_TO_ADDR
// exit ;
66932: POP
66933: POP
66934: GO 66940
// end ; end ;
66936: GO 66816
66938: POP
66939: POP
// end ;
66940: LD_VAR 0 4
66944: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66945: LD_INT 0
66947: PPUSH
66948: PPUSH
66949: PPUSH
// if not side or side > 8 then
66950: LD_VAR 0 1
66954: NOT
66955: PUSH
66956: LD_VAR 0 1
66960: PUSH
66961: LD_INT 8
66963: GREATER
66964: OR
66965: IFFALSE 66969
// exit ;
66967: GO 67156
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66969: LD_ADDR_VAR 0 4
66973: PUSH
66974: LD_INT 22
66976: PUSH
66977: LD_VAR 0 1
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 21
66988: PUSH
66989: LD_INT 3
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PPUSH
67000: CALL_OW 69
67004: ST_TO_ADDR
// if not tmp then
67005: LD_VAR 0 4
67009: NOT
67010: IFFALSE 67014
// exit ;
67012: GO 67156
// enable_addtolog := true ;
67014: LD_ADDR_OWVAR 81
67018: PUSH
67019: LD_INT 1
67021: ST_TO_ADDR
// AddToLog ( [ ) ;
67022: LD_STRING [
67024: PPUSH
67025: CALL_OW 561
// for i in tmp do
67029: LD_ADDR_VAR 0 3
67033: PUSH
67034: LD_VAR 0 4
67038: PUSH
67039: FOR_IN
67040: IFFALSE 67147
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67042: LD_STRING [
67044: PUSH
67045: LD_VAR 0 3
67049: PPUSH
67050: CALL_OW 266
67054: STR
67055: PUSH
67056: LD_STRING , 
67058: STR
67059: PUSH
67060: LD_VAR 0 3
67064: PPUSH
67065: CALL_OW 250
67069: STR
67070: PUSH
67071: LD_STRING , 
67073: STR
67074: PUSH
67075: LD_VAR 0 3
67079: PPUSH
67080: CALL_OW 251
67084: STR
67085: PUSH
67086: LD_STRING , 
67088: STR
67089: PUSH
67090: LD_VAR 0 3
67094: PPUSH
67095: CALL_OW 254
67099: STR
67100: PUSH
67101: LD_STRING , 
67103: STR
67104: PUSH
67105: LD_VAR 0 3
67109: PPUSH
67110: LD_INT 1
67112: PPUSH
67113: CALL_OW 268
67117: STR
67118: PUSH
67119: LD_STRING , 
67121: STR
67122: PUSH
67123: LD_VAR 0 3
67127: PPUSH
67128: LD_INT 2
67130: PPUSH
67131: CALL_OW 268
67135: STR
67136: PUSH
67137: LD_STRING ],
67139: STR
67140: PPUSH
67141: CALL_OW 561
// end ;
67145: GO 67039
67147: POP
67148: POP
// AddToLog ( ]; ) ;
67149: LD_STRING ];
67151: PPUSH
67152: CALL_OW 561
// end ;
67156: LD_VAR 0 2
67160: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67161: LD_INT 0
67163: PPUSH
67164: PPUSH
67165: PPUSH
67166: PPUSH
67167: PPUSH
// if not area or not rate or not max then
67168: LD_VAR 0 1
67172: NOT
67173: PUSH
67174: LD_VAR 0 2
67178: NOT
67179: OR
67180: PUSH
67181: LD_VAR 0 4
67185: NOT
67186: OR
67187: IFFALSE 67191
// exit ;
67189: GO 67380
// while 1 do
67191: LD_INT 1
67193: IFFALSE 67380
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67195: LD_ADDR_VAR 0 9
67199: PUSH
67200: LD_VAR 0 1
67204: PPUSH
67205: LD_INT 1
67207: PPUSH
67208: CALL_OW 287
67212: PUSH
67213: LD_INT 10
67215: MUL
67216: ST_TO_ADDR
// r := rate / 10 ;
67217: LD_ADDR_VAR 0 7
67221: PUSH
67222: LD_VAR 0 2
67226: PUSH
67227: LD_INT 10
67229: DIVREAL
67230: ST_TO_ADDR
// time := 1 1$00 ;
67231: LD_ADDR_VAR 0 8
67235: PUSH
67236: LD_INT 2100
67238: ST_TO_ADDR
// if amount < min then
67239: LD_VAR 0 9
67243: PUSH
67244: LD_VAR 0 3
67248: LESS
67249: IFFALSE 67267
// r := r * 2 else
67251: LD_ADDR_VAR 0 7
67255: PUSH
67256: LD_VAR 0 7
67260: PUSH
67261: LD_INT 2
67263: MUL
67264: ST_TO_ADDR
67265: GO 67293
// if amount > max then
67267: LD_VAR 0 9
67271: PUSH
67272: LD_VAR 0 4
67276: GREATER
67277: IFFALSE 67293
// r := r / 2 ;
67279: LD_ADDR_VAR 0 7
67283: PUSH
67284: LD_VAR 0 7
67288: PUSH
67289: LD_INT 2
67291: DIVREAL
67292: ST_TO_ADDR
// time := time / r ;
67293: LD_ADDR_VAR 0 8
67297: PUSH
67298: LD_VAR 0 8
67302: PUSH
67303: LD_VAR 0 7
67307: DIVREAL
67308: ST_TO_ADDR
// if time < 0 then
67309: LD_VAR 0 8
67313: PUSH
67314: LD_INT 0
67316: LESS
67317: IFFALSE 67334
// time := time * - 1 ;
67319: LD_ADDR_VAR 0 8
67323: PUSH
67324: LD_VAR 0 8
67328: PUSH
67329: LD_INT 1
67331: NEG
67332: MUL
67333: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67334: LD_VAR 0 8
67338: PUSH
67339: LD_INT 35
67341: PPUSH
67342: LD_INT 875
67344: PPUSH
67345: CALL_OW 12
67349: PLUS
67350: PPUSH
67351: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67355: LD_INT 1
67357: PPUSH
67358: LD_INT 5
67360: PPUSH
67361: CALL_OW 12
67365: PPUSH
67366: LD_VAR 0 1
67370: PPUSH
67371: LD_INT 1
67373: PPUSH
67374: CALL_OW 55
// end ;
67378: GO 67191
// end ;
67380: LD_VAR 0 5
67384: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67385: LD_INT 0
67387: PPUSH
67388: PPUSH
67389: PPUSH
67390: PPUSH
67391: PPUSH
67392: PPUSH
67393: PPUSH
67394: PPUSH
// if not turrets or not factories then
67395: LD_VAR 0 1
67399: NOT
67400: PUSH
67401: LD_VAR 0 2
67405: NOT
67406: OR
67407: IFFALSE 67411
// exit ;
67409: GO 67718
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67411: LD_ADDR_VAR 0 10
67415: PUSH
67416: LD_INT 5
67418: PUSH
67419: LD_INT 6
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 2
67428: PUSH
67429: LD_INT 4
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 3
67438: PUSH
67439: LD_INT 5
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 24
67453: PUSH
67454: LD_INT 25
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 23
67463: PUSH
67464: LD_INT 27
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 42
67477: PUSH
67478: LD_INT 43
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 44
67487: PUSH
67488: LD_INT 46
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 45
67497: PUSH
67498: LD_INT 47
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: LIST
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: LIST
67514: ST_TO_ADDR
// result := [ ] ;
67515: LD_ADDR_VAR 0 3
67519: PUSH
67520: EMPTY
67521: ST_TO_ADDR
// for i in turrets do
67522: LD_ADDR_VAR 0 4
67526: PUSH
67527: LD_VAR 0 1
67531: PUSH
67532: FOR_IN
67533: IFFALSE 67716
// begin nat := GetNation ( i ) ;
67535: LD_ADDR_VAR 0 7
67539: PUSH
67540: LD_VAR 0 4
67544: PPUSH
67545: CALL_OW 248
67549: ST_TO_ADDR
// weapon := 0 ;
67550: LD_ADDR_VAR 0 8
67554: PUSH
67555: LD_INT 0
67557: ST_TO_ADDR
// if not nat then
67558: LD_VAR 0 7
67562: NOT
67563: IFFALSE 67567
// continue ;
67565: GO 67532
// for j in list [ nat ] do
67567: LD_ADDR_VAR 0 5
67571: PUSH
67572: LD_VAR 0 10
67576: PUSH
67577: LD_VAR 0 7
67581: ARRAY
67582: PUSH
67583: FOR_IN
67584: IFFALSE 67625
// if GetBWeapon ( i ) = j [ 1 ] then
67586: LD_VAR 0 4
67590: PPUSH
67591: CALL_OW 269
67595: PUSH
67596: LD_VAR 0 5
67600: PUSH
67601: LD_INT 1
67603: ARRAY
67604: EQUAL
67605: IFFALSE 67623
// begin weapon := j [ 2 ] ;
67607: LD_ADDR_VAR 0 8
67611: PUSH
67612: LD_VAR 0 5
67616: PUSH
67617: LD_INT 2
67619: ARRAY
67620: ST_TO_ADDR
// break ;
67621: GO 67625
// end ;
67623: GO 67583
67625: POP
67626: POP
// if not weapon then
67627: LD_VAR 0 8
67631: NOT
67632: IFFALSE 67636
// continue ;
67634: GO 67532
// for k in factories do
67636: LD_ADDR_VAR 0 6
67640: PUSH
67641: LD_VAR 0 2
67645: PUSH
67646: FOR_IN
67647: IFFALSE 67712
// begin weapons := AvailableWeaponList ( k ) ;
67649: LD_ADDR_VAR 0 9
67653: PUSH
67654: LD_VAR 0 6
67658: PPUSH
67659: CALL_OW 478
67663: ST_TO_ADDR
// if not weapons then
67664: LD_VAR 0 9
67668: NOT
67669: IFFALSE 67673
// continue ;
67671: GO 67646
// if weapon in weapons then
67673: LD_VAR 0 8
67677: PUSH
67678: LD_VAR 0 9
67682: IN
67683: IFFALSE 67710
// begin result := [ i , weapon ] ;
67685: LD_ADDR_VAR 0 3
67689: PUSH
67690: LD_VAR 0 4
67694: PUSH
67695: LD_VAR 0 8
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: ST_TO_ADDR
// exit ;
67704: POP
67705: POP
67706: POP
67707: POP
67708: GO 67718
// end ; end ;
67710: GO 67646
67712: POP
67713: POP
// end ;
67714: GO 67532
67716: POP
67717: POP
// end ;
67718: LD_VAR 0 3
67722: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67723: LD_INT 0
67725: PPUSH
// if not side or side > 8 then
67726: LD_VAR 0 3
67730: NOT
67731: PUSH
67732: LD_VAR 0 3
67736: PUSH
67737: LD_INT 8
67739: GREATER
67740: OR
67741: IFFALSE 67745
// exit ;
67743: GO 67804
// if not range then
67745: LD_VAR 0 4
67749: NOT
67750: IFFALSE 67761
// range := - 12 ;
67752: LD_ADDR_VAR 0 4
67756: PUSH
67757: LD_INT 12
67759: NEG
67760: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67761: LD_VAR 0 1
67765: PPUSH
67766: LD_VAR 0 2
67770: PPUSH
67771: LD_VAR 0 3
67775: PPUSH
67776: LD_VAR 0 4
67780: PPUSH
67781: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67785: LD_VAR 0 1
67789: PPUSH
67790: LD_VAR 0 2
67794: PPUSH
67795: LD_VAR 0 3
67799: PPUSH
67800: CALL_OW 331
// end ;
67804: LD_VAR 0 5
67808: RET
// export function Video ( mode ) ; begin
67809: LD_INT 0
67811: PPUSH
// ingame_video = mode ;
67812: LD_ADDR_OWVAR 52
67816: PUSH
67817: LD_VAR 0 1
67821: ST_TO_ADDR
// interface_hidden = mode ;
67822: LD_ADDR_OWVAR 54
67826: PUSH
67827: LD_VAR 0 1
67831: ST_TO_ADDR
// end ;
67832: LD_VAR 0 2
67836: RET
// export function Join ( array , element ) ; begin
67837: LD_INT 0
67839: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67840: LD_ADDR_VAR 0 3
67844: PUSH
67845: LD_VAR 0 1
67849: PPUSH
67850: LD_VAR 0 1
67854: PUSH
67855: LD_INT 1
67857: PLUS
67858: PPUSH
67859: LD_VAR 0 2
67863: PPUSH
67864: CALL_OW 1
67868: ST_TO_ADDR
// end ;
67869: LD_VAR 0 3
67873: RET
// export function JoinUnion ( array , element ) ; begin
67874: LD_INT 0
67876: PPUSH
// result := array union element ;
67877: LD_ADDR_VAR 0 3
67881: PUSH
67882: LD_VAR 0 1
67886: PUSH
67887: LD_VAR 0 2
67891: UNION
67892: ST_TO_ADDR
// end ;
67893: LD_VAR 0 3
67897: RET
// export function GetBehemoths ( side ) ; begin
67898: LD_INT 0
67900: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67901: LD_ADDR_VAR 0 2
67905: PUSH
67906: LD_INT 22
67908: PUSH
67909: LD_VAR 0 1
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 31
67920: PUSH
67921: LD_INT 25
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PPUSH
67932: CALL_OW 69
67936: ST_TO_ADDR
// end ;
67937: LD_VAR 0 2
67941: RET
// export function Shuffle ( array ) ; var i , index ; begin
67942: LD_INT 0
67944: PPUSH
67945: PPUSH
67946: PPUSH
// result := [ ] ;
67947: LD_ADDR_VAR 0 2
67951: PUSH
67952: EMPTY
67953: ST_TO_ADDR
// if not array then
67954: LD_VAR 0 1
67958: NOT
67959: IFFALSE 67963
// exit ;
67961: GO 68062
// Randomize ;
67963: CALL_OW 10
// for i = array downto 1 do
67967: LD_ADDR_VAR 0 3
67971: PUSH
67972: DOUBLE
67973: LD_VAR 0 1
67977: INC
67978: ST_TO_ADDR
67979: LD_INT 1
67981: PUSH
67982: FOR_DOWNTO
67983: IFFALSE 68060
// begin index := rand ( 1 , array ) ;
67985: LD_ADDR_VAR 0 4
67989: PUSH
67990: LD_INT 1
67992: PPUSH
67993: LD_VAR 0 1
67997: PPUSH
67998: CALL_OW 12
68002: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68003: LD_ADDR_VAR 0 2
68007: PUSH
68008: LD_VAR 0 2
68012: PPUSH
68013: LD_VAR 0 2
68017: PUSH
68018: LD_INT 1
68020: PLUS
68021: PPUSH
68022: LD_VAR 0 1
68026: PUSH
68027: LD_VAR 0 4
68031: ARRAY
68032: PPUSH
68033: CALL_OW 2
68037: ST_TO_ADDR
// array := Delete ( array , index ) ;
68038: LD_ADDR_VAR 0 1
68042: PUSH
68043: LD_VAR 0 1
68047: PPUSH
68048: LD_VAR 0 4
68052: PPUSH
68053: CALL_OW 3
68057: ST_TO_ADDR
// end ;
68058: GO 67982
68060: POP
68061: POP
// end ;
68062: LD_VAR 0 2
68066: RET
// export function GetBaseMaterials ( base ) ; begin
68067: LD_INT 0
68069: PPUSH
// result := [ 0 , 0 , 0 ] ;
68070: LD_ADDR_VAR 0 2
68074: PUSH
68075: LD_INT 0
68077: PUSH
68078: LD_INT 0
68080: PUSH
68081: LD_INT 0
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: LIST
68088: ST_TO_ADDR
// if not base then
68089: LD_VAR 0 1
68093: NOT
68094: IFFALSE 68098
// exit ;
68096: GO 68147
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68098: LD_ADDR_VAR 0 2
68102: PUSH
68103: LD_VAR 0 1
68107: PPUSH
68108: LD_INT 1
68110: PPUSH
68111: CALL_OW 275
68115: PUSH
68116: LD_VAR 0 1
68120: PPUSH
68121: LD_INT 2
68123: PPUSH
68124: CALL_OW 275
68128: PUSH
68129: LD_VAR 0 1
68133: PPUSH
68134: LD_INT 3
68136: PPUSH
68137: CALL_OW 275
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: LIST
68146: ST_TO_ADDR
// end ;
68147: LD_VAR 0 2
68151: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68152: LD_INT 0
68154: PPUSH
68155: PPUSH
// result := array ;
68156: LD_ADDR_VAR 0 3
68160: PUSH
68161: LD_VAR 0 1
68165: ST_TO_ADDR
// if size >= result then
68166: LD_VAR 0 2
68170: PUSH
68171: LD_VAR 0 3
68175: GREATEREQUAL
68176: IFFALSE 68180
// exit ;
68178: GO 68230
// if size then
68180: LD_VAR 0 2
68184: IFFALSE 68230
// for i := array downto size do
68186: LD_ADDR_VAR 0 4
68190: PUSH
68191: DOUBLE
68192: LD_VAR 0 1
68196: INC
68197: ST_TO_ADDR
68198: LD_VAR 0 2
68202: PUSH
68203: FOR_DOWNTO
68204: IFFALSE 68228
// result := Delete ( result , result ) ;
68206: LD_ADDR_VAR 0 3
68210: PUSH
68211: LD_VAR 0 3
68215: PPUSH
68216: LD_VAR 0 3
68220: PPUSH
68221: CALL_OW 3
68225: ST_TO_ADDR
68226: GO 68203
68228: POP
68229: POP
// end ;
68230: LD_VAR 0 3
68234: RET
// export function ComExit ( unit ) ; var tmp ; begin
68235: LD_INT 0
68237: PPUSH
68238: PPUSH
// if not IsInUnit ( unit ) then
68239: LD_VAR 0 1
68243: PPUSH
68244: CALL_OW 310
68248: NOT
68249: IFFALSE 68253
// exit ;
68251: GO 68313
// tmp := IsInUnit ( unit ) ;
68253: LD_ADDR_VAR 0 3
68257: PUSH
68258: LD_VAR 0 1
68262: PPUSH
68263: CALL_OW 310
68267: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68268: LD_VAR 0 3
68272: PPUSH
68273: CALL_OW 247
68277: PUSH
68278: LD_INT 2
68280: EQUAL
68281: IFFALSE 68294
// ComExitVehicle ( unit ) else
68283: LD_VAR 0 1
68287: PPUSH
68288: CALL_OW 121
68292: GO 68303
// ComExitBuilding ( unit ) ;
68294: LD_VAR 0 1
68298: PPUSH
68299: CALL_OW 122
// result := tmp ;
68303: LD_ADDR_VAR 0 2
68307: PUSH
68308: LD_VAR 0 3
68312: ST_TO_ADDR
// end ;
68313: LD_VAR 0 2
68317: RET
// export function ComExitAll ( units ) ; var i ; begin
68318: LD_INT 0
68320: PPUSH
68321: PPUSH
// if not units then
68322: LD_VAR 0 1
68326: NOT
68327: IFFALSE 68331
// exit ;
68329: GO 68357
// for i in units do
68331: LD_ADDR_VAR 0 3
68335: PUSH
68336: LD_VAR 0 1
68340: PUSH
68341: FOR_IN
68342: IFFALSE 68355
// ComExit ( i ) ;
68344: LD_VAR 0 3
68348: PPUSH
68349: CALL 68235 0 1
68353: GO 68341
68355: POP
68356: POP
// end ;
68357: LD_VAR 0 2
68361: RET
// export function ResetHc ; begin
68362: LD_INT 0
68364: PPUSH
// InitHc ;
68365: CALL_OW 19
// hc_importance := 0 ;
68369: LD_ADDR_OWVAR 32
68373: PUSH
68374: LD_INT 0
68376: ST_TO_ADDR
// end ;
68377: LD_VAR 0 1
68381: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68382: LD_INT 0
68384: PPUSH
68385: PPUSH
68386: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68387: LD_ADDR_VAR 0 6
68391: PUSH
68392: LD_VAR 0 1
68396: PUSH
68397: LD_VAR 0 3
68401: PLUS
68402: PUSH
68403: LD_INT 2
68405: DIV
68406: ST_TO_ADDR
// if _x < 0 then
68407: LD_VAR 0 6
68411: PUSH
68412: LD_INT 0
68414: LESS
68415: IFFALSE 68432
// _x := _x * - 1 ;
68417: LD_ADDR_VAR 0 6
68421: PUSH
68422: LD_VAR 0 6
68426: PUSH
68427: LD_INT 1
68429: NEG
68430: MUL
68431: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68432: LD_ADDR_VAR 0 7
68436: PUSH
68437: LD_VAR 0 2
68441: PUSH
68442: LD_VAR 0 4
68446: PLUS
68447: PUSH
68448: LD_INT 2
68450: DIV
68451: ST_TO_ADDR
// if _y < 0 then
68452: LD_VAR 0 7
68456: PUSH
68457: LD_INT 0
68459: LESS
68460: IFFALSE 68477
// _y := _y * - 1 ;
68462: LD_ADDR_VAR 0 7
68466: PUSH
68467: LD_VAR 0 7
68471: PUSH
68472: LD_INT 1
68474: NEG
68475: MUL
68476: ST_TO_ADDR
// result := [ _x , _y ] ;
68477: LD_ADDR_VAR 0 5
68481: PUSH
68482: LD_VAR 0 6
68486: PUSH
68487: LD_VAR 0 7
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: ST_TO_ADDR
// end ;
68496: LD_VAR 0 5
68500: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68501: LD_INT 0
68503: PPUSH
68504: PPUSH
68505: PPUSH
68506: PPUSH
// task := GetTaskList ( unit ) ;
68507: LD_ADDR_VAR 0 7
68511: PUSH
68512: LD_VAR 0 1
68516: PPUSH
68517: CALL_OW 437
68521: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68522: LD_VAR 0 7
68526: NOT
68527: PUSH
68528: LD_VAR 0 1
68532: PPUSH
68533: LD_VAR 0 2
68537: PPUSH
68538: CALL_OW 308
68542: NOT
68543: AND
68544: IFFALSE 68548
// exit ;
68546: GO 68666
// if IsInArea ( unit , area ) then
68548: LD_VAR 0 1
68552: PPUSH
68553: LD_VAR 0 2
68557: PPUSH
68558: CALL_OW 308
68562: IFFALSE 68580
// begin ComMoveToArea ( unit , goAway ) ;
68564: LD_VAR 0 1
68568: PPUSH
68569: LD_VAR 0 3
68573: PPUSH
68574: CALL_OW 113
// exit ;
68578: GO 68666
// end ; if task [ 1 ] [ 1 ] <> M then
68580: LD_VAR 0 7
68584: PUSH
68585: LD_INT 1
68587: ARRAY
68588: PUSH
68589: LD_INT 1
68591: ARRAY
68592: PUSH
68593: LD_STRING M
68595: NONEQUAL
68596: IFFALSE 68600
// exit ;
68598: GO 68666
// x := task [ 1 ] [ 2 ] ;
68600: LD_ADDR_VAR 0 5
68604: PUSH
68605: LD_VAR 0 7
68609: PUSH
68610: LD_INT 1
68612: ARRAY
68613: PUSH
68614: LD_INT 2
68616: ARRAY
68617: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68618: LD_ADDR_VAR 0 6
68622: PUSH
68623: LD_VAR 0 7
68627: PUSH
68628: LD_INT 1
68630: ARRAY
68631: PUSH
68632: LD_INT 3
68634: ARRAY
68635: ST_TO_ADDR
// if InArea ( x , y , area ) then
68636: LD_VAR 0 5
68640: PPUSH
68641: LD_VAR 0 6
68645: PPUSH
68646: LD_VAR 0 2
68650: PPUSH
68651: CALL_OW 309
68655: IFFALSE 68666
// ComStop ( unit ) ;
68657: LD_VAR 0 1
68661: PPUSH
68662: CALL_OW 141
// end ;
68666: LD_VAR 0 4
68670: RET
// export function Abs ( value ) ; begin
68671: LD_INT 0
68673: PPUSH
// result := value ;
68674: LD_ADDR_VAR 0 2
68678: PUSH
68679: LD_VAR 0 1
68683: ST_TO_ADDR
// if value < 0 then
68684: LD_VAR 0 1
68688: PUSH
68689: LD_INT 0
68691: LESS
68692: IFFALSE 68709
// result := value * - 1 ;
68694: LD_ADDR_VAR 0 2
68698: PUSH
68699: LD_VAR 0 1
68703: PUSH
68704: LD_INT 1
68706: NEG
68707: MUL
68708: ST_TO_ADDR
// end ;
68709: LD_VAR 0 2
68713: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68714: LD_INT 0
68716: PPUSH
68717: PPUSH
68718: PPUSH
68719: PPUSH
68720: PPUSH
68721: PPUSH
68722: PPUSH
68723: PPUSH
// if not unit or not building then
68724: LD_VAR 0 1
68728: NOT
68729: PUSH
68730: LD_VAR 0 2
68734: NOT
68735: OR
68736: IFFALSE 68740
// exit ;
68738: GO 68966
// x := GetX ( building ) ;
68740: LD_ADDR_VAR 0 4
68744: PUSH
68745: LD_VAR 0 2
68749: PPUSH
68750: CALL_OW 250
68754: ST_TO_ADDR
// y := GetY ( building ) ;
68755: LD_ADDR_VAR 0 6
68759: PUSH
68760: LD_VAR 0 2
68764: PPUSH
68765: CALL_OW 251
68769: ST_TO_ADDR
// d := GetDir ( building ) ;
68770: LD_ADDR_VAR 0 8
68774: PUSH
68775: LD_VAR 0 2
68779: PPUSH
68780: CALL_OW 254
68784: ST_TO_ADDR
// r := 4 ;
68785: LD_ADDR_VAR 0 9
68789: PUSH
68790: LD_INT 4
68792: ST_TO_ADDR
// for i := 1 to 5 do
68793: LD_ADDR_VAR 0 10
68797: PUSH
68798: DOUBLE
68799: LD_INT 1
68801: DEC
68802: ST_TO_ADDR
68803: LD_INT 5
68805: PUSH
68806: FOR_TO
68807: IFFALSE 68964
// begin _x := ShiftX ( x , d , r + i ) ;
68809: LD_ADDR_VAR 0 5
68813: PUSH
68814: LD_VAR 0 4
68818: PPUSH
68819: LD_VAR 0 8
68823: PPUSH
68824: LD_VAR 0 9
68828: PUSH
68829: LD_VAR 0 10
68833: PLUS
68834: PPUSH
68835: CALL_OW 272
68839: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68840: LD_ADDR_VAR 0 7
68844: PUSH
68845: LD_VAR 0 6
68849: PPUSH
68850: LD_VAR 0 8
68854: PPUSH
68855: LD_VAR 0 9
68859: PUSH
68860: LD_VAR 0 10
68864: PLUS
68865: PPUSH
68866: CALL_OW 273
68870: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68871: LD_VAR 0 5
68875: PPUSH
68876: LD_VAR 0 7
68880: PPUSH
68881: CALL_OW 488
68885: PUSH
68886: LD_VAR 0 5
68890: PPUSH
68891: LD_VAR 0 7
68895: PPUSH
68896: CALL_OW 428
68900: PPUSH
68901: CALL_OW 247
68905: PUSH
68906: LD_INT 3
68908: PUSH
68909: LD_INT 2
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: IN
68916: NOT
68917: AND
68918: IFFALSE 68962
// begin ComMoveXY ( unit , _x , _y ) ;
68920: LD_VAR 0 1
68924: PPUSH
68925: LD_VAR 0 5
68929: PPUSH
68930: LD_VAR 0 7
68934: PPUSH
68935: CALL_OW 111
// result := [ _x , _y ] ;
68939: LD_ADDR_VAR 0 3
68943: PUSH
68944: LD_VAR 0 5
68948: PUSH
68949: LD_VAR 0 7
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: ST_TO_ADDR
// exit ;
68958: POP
68959: POP
68960: GO 68966
// end ; end ;
68962: GO 68806
68964: POP
68965: POP
// end ;
68966: LD_VAR 0 3
68970: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68971: LD_INT 0
68973: PPUSH
68974: PPUSH
68975: PPUSH
// result := 0 ;
68976: LD_ADDR_VAR 0 3
68980: PUSH
68981: LD_INT 0
68983: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68984: LD_VAR 0 1
68988: PUSH
68989: LD_INT 0
68991: LESS
68992: PUSH
68993: LD_VAR 0 1
68997: PUSH
68998: LD_INT 8
69000: GREATER
69001: OR
69002: PUSH
69003: LD_VAR 0 2
69007: PUSH
69008: LD_INT 0
69010: LESS
69011: OR
69012: PUSH
69013: LD_VAR 0 2
69017: PUSH
69018: LD_INT 8
69020: GREATER
69021: OR
69022: IFFALSE 69026
// exit ;
69024: GO 69101
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69026: LD_ADDR_VAR 0 4
69030: PUSH
69031: LD_INT 22
69033: PUSH
69034: LD_VAR 0 2
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PPUSH
69043: CALL_OW 69
69047: PUSH
69048: FOR_IN
69049: IFFALSE 69099
// begin un := UnitShoot ( i ) ;
69051: LD_ADDR_VAR 0 5
69055: PUSH
69056: LD_VAR 0 4
69060: PPUSH
69061: CALL_OW 504
69065: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69066: LD_VAR 0 5
69070: PPUSH
69071: CALL_OW 255
69075: PUSH
69076: LD_VAR 0 1
69080: EQUAL
69081: IFFALSE 69097
// begin result := un ;
69083: LD_ADDR_VAR 0 3
69087: PUSH
69088: LD_VAR 0 5
69092: ST_TO_ADDR
// exit ;
69093: POP
69094: POP
69095: GO 69101
// end ; end ;
69097: GO 69048
69099: POP
69100: POP
// end ;
69101: LD_VAR 0 3
69105: RET
// export function GetCargoBay ( units ) ; begin
69106: LD_INT 0
69108: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69109: LD_ADDR_VAR 0 2
69113: PUSH
69114: LD_VAR 0 1
69118: PPUSH
69119: LD_INT 2
69121: PUSH
69122: LD_INT 34
69124: PUSH
69125: LD_INT 12
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 34
69134: PUSH
69135: LD_INT 51
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 34
69144: PUSH
69145: LD_INT 32
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 34
69154: PUSH
69155: LD_INT 89
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: PPUSH
69169: CALL_OW 72
69173: ST_TO_ADDR
// end ;
69174: LD_VAR 0 2
69178: RET
// export function Negate ( value ) ; begin
69179: LD_INT 0
69181: PPUSH
// result := not value ;
69182: LD_ADDR_VAR 0 2
69186: PUSH
69187: LD_VAR 0 1
69191: NOT
69192: ST_TO_ADDR
// end ;
69193: LD_VAR 0 2
69197: RET
// export function Inc ( value ) ; begin
69198: LD_INT 0
69200: PPUSH
// result := value + 1 ;
69201: LD_ADDR_VAR 0 2
69205: PUSH
69206: LD_VAR 0 1
69210: PUSH
69211: LD_INT 1
69213: PLUS
69214: ST_TO_ADDR
// end ;
69215: LD_VAR 0 2
69219: RET
// export function Dec ( value ) ; begin
69220: LD_INT 0
69222: PPUSH
// result := value - 1 ;
69223: LD_ADDR_VAR 0 2
69227: PUSH
69228: LD_VAR 0 1
69232: PUSH
69233: LD_INT 1
69235: MINUS
69236: ST_TO_ADDR
// end ;
69237: LD_VAR 0 2
69241: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69242: LD_INT 0
69244: PPUSH
69245: PPUSH
69246: PPUSH
69247: PPUSH
69248: PPUSH
69249: PPUSH
69250: PPUSH
69251: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69252: LD_VAR 0 1
69256: PPUSH
69257: LD_VAR 0 2
69261: PPUSH
69262: CALL_OW 488
69266: NOT
69267: PUSH
69268: LD_VAR 0 3
69272: PPUSH
69273: LD_VAR 0 4
69277: PPUSH
69278: CALL_OW 488
69282: NOT
69283: OR
69284: IFFALSE 69297
// begin result := - 1 ;
69286: LD_ADDR_VAR 0 5
69290: PUSH
69291: LD_INT 1
69293: NEG
69294: ST_TO_ADDR
// exit ;
69295: GO 69532
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69297: LD_ADDR_VAR 0 12
69301: PUSH
69302: LD_VAR 0 1
69306: PPUSH
69307: LD_VAR 0 2
69311: PPUSH
69312: LD_VAR 0 3
69316: PPUSH
69317: LD_VAR 0 4
69321: PPUSH
69322: CALL 68382 0 4
69326: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69327: LD_ADDR_VAR 0 11
69331: PUSH
69332: LD_VAR 0 1
69336: PPUSH
69337: LD_VAR 0 2
69341: PPUSH
69342: LD_VAR 0 12
69346: PUSH
69347: LD_INT 1
69349: ARRAY
69350: PPUSH
69351: LD_VAR 0 12
69355: PUSH
69356: LD_INT 2
69358: ARRAY
69359: PPUSH
69360: CALL_OW 298
69364: ST_TO_ADDR
// distance := 9999 ;
69365: LD_ADDR_VAR 0 10
69369: PUSH
69370: LD_INT 9999
69372: ST_TO_ADDR
// for i := 0 to 5 do
69373: LD_ADDR_VAR 0 6
69377: PUSH
69378: DOUBLE
69379: LD_INT 0
69381: DEC
69382: ST_TO_ADDR
69383: LD_INT 5
69385: PUSH
69386: FOR_TO
69387: IFFALSE 69530
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69389: LD_ADDR_VAR 0 7
69393: PUSH
69394: LD_VAR 0 1
69398: PPUSH
69399: LD_VAR 0 6
69403: PPUSH
69404: LD_VAR 0 11
69408: PPUSH
69409: CALL_OW 272
69413: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69414: LD_ADDR_VAR 0 8
69418: PUSH
69419: LD_VAR 0 2
69423: PPUSH
69424: LD_VAR 0 6
69428: PPUSH
69429: LD_VAR 0 11
69433: PPUSH
69434: CALL_OW 273
69438: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69439: LD_VAR 0 7
69443: PPUSH
69444: LD_VAR 0 8
69448: PPUSH
69449: CALL_OW 488
69453: NOT
69454: IFFALSE 69458
// continue ;
69456: GO 69386
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69458: LD_ADDR_VAR 0 9
69462: PUSH
69463: LD_VAR 0 12
69467: PUSH
69468: LD_INT 1
69470: ARRAY
69471: PPUSH
69472: LD_VAR 0 12
69476: PUSH
69477: LD_INT 2
69479: ARRAY
69480: PPUSH
69481: LD_VAR 0 7
69485: PPUSH
69486: LD_VAR 0 8
69490: PPUSH
69491: CALL_OW 298
69495: ST_TO_ADDR
// if tmp < distance then
69496: LD_VAR 0 9
69500: PUSH
69501: LD_VAR 0 10
69505: LESS
69506: IFFALSE 69528
// begin result := i ;
69508: LD_ADDR_VAR 0 5
69512: PUSH
69513: LD_VAR 0 6
69517: ST_TO_ADDR
// distance := tmp ;
69518: LD_ADDR_VAR 0 10
69522: PUSH
69523: LD_VAR 0 9
69527: ST_TO_ADDR
// end ; end ;
69528: GO 69386
69530: POP
69531: POP
// end ;
69532: LD_VAR 0 5
69536: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69537: LD_INT 0
69539: PPUSH
69540: PPUSH
// if not driver or not IsInUnit ( driver ) then
69541: LD_VAR 0 1
69545: NOT
69546: PUSH
69547: LD_VAR 0 1
69551: PPUSH
69552: CALL_OW 310
69556: NOT
69557: OR
69558: IFFALSE 69562
// exit ;
69560: GO 69652
// vehicle := IsInUnit ( driver ) ;
69562: LD_ADDR_VAR 0 3
69566: PUSH
69567: LD_VAR 0 1
69571: PPUSH
69572: CALL_OW 310
69576: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69577: LD_VAR 0 1
69581: PPUSH
69582: LD_STRING \
69584: PUSH
69585: LD_INT 0
69587: PUSH
69588: LD_INT 0
69590: PUSH
69591: LD_INT 0
69593: PUSH
69594: LD_INT 0
69596: PUSH
69597: LD_INT 0
69599: PUSH
69600: LD_INT 0
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: PUSH
69612: LD_STRING E
69614: PUSH
69615: LD_INT 0
69617: PUSH
69618: LD_INT 0
69620: PUSH
69621: LD_VAR 0 3
69625: PUSH
69626: LD_INT 0
69628: PUSH
69629: LD_INT 0
69631: PUSH
69632: LD_INT 0
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PPUSH
69648: CALL_OW 446
// end ;
69652: LD_VAR 0 2
69656: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69657: LD_INT 0
69659: PPUSH
69660: PPUSH
// if not driver or not IsInUnit ( driver ) then
69661: LD_VAR 0 1
69665: NOT
69666: PUSH
69667: LD_VAR 0 1
69671: PPUSH
69672: CALL_OW 310
69676: NOT
69677: OR
69678: IFFALSE 69682
// exit ;
69680: GO 69772
// vehicle := IsInUnit ( driver ) ;
69682: LD_ADDR_VAR 0 3
69686: PUSH
69687: LD_VAR 0 1
69691: PPUSH
69692: CALL_OW 310
69696: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69697: LD_VAR 0 1
69701: PPUSH
69702: LD_STRING \
69704: PUSH
69705: LD_INT 0
69707: PUSH
69708: LD_INT 0
69710: PUSH
69711: LD_INT 0
69713: PUSH
69714: LD_INT 0
69716: PUSH
69717: LD_INT 0
69719: PUSH
69720: LD_INT 0
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: PUSH
69732: LD_STRING E
69734: PUSH
69735: LD_INT 0
69737: PUSH
69738: LD_INT 0
69740: PUSH
69741: LD_VAR 0 3
69745: PUSH
69746: LD_INT 0
69748: PUSH
69749: LD_INT 0
69751: PUSH
69752: LD_INT 0
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PPUSH
69768: CALL_OW 447
// end ;
69772: LD_VAR 0 2
69776: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69777: LD_INT 0
69779: PPUSH
69780: PPUSH
69781: PPUSH
// tmp := [ ] ;
69782: LD_ADDR_VAR 0 5
69786: PUSH
69787: EMPTY
69788: ST_TO_ADDR
// for i in units do
69789: LD_ADDR_VAR 0 4
69793: PUSH
69794: LD_VAR 0 1
69798: PUSH
69799: FOR_IN
69800: IFFALSE 69838
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69802: LD_ADDR_VAR 0 5
69806: PUSH
69807: LD_VAR 0 5
69811: PPUSH
69812: LD_VAR 0 5
69816: PUSH
69817: LD_INT 1
69819: PLUS
69820: PPUSH
69821: LD_VAR 0 4
69825: PPUSH
69826: CALL_OW 256
69830: PPUSH
69831: CALL_OW 2
69835: ST_TO_ADDR
69836: GO 69799
69838: POP
69839: POP
// if not tmp then
69840: LD_VAR 0 5
69844: NOT
69845: IFFALSE 69849
// exit ;
69847: GO 69897
// if asc then
69849: LD_VAR 0 2
69853: IFFALSE 69877
// result := SortListByListAsc ( units , tmp ) else
69855: LD_ADDR_VAR 0 3
69859: PUSH
69860: LD_VAR 0 1
69864: PPUSH
69865: LD_VAR 0 5
69869: PPUSH
69870: CALL_OW 76
69874: ST_TO_ADDR
69875: GO 69897
// result := SortListByListDesc ( units , tmp ) ;
69877: LD_ADDR_VAR 0 3
69881: PUSH
69882: LD_VAR 0 1
69886: PPUSH
69887: LD_VAR 0 5
69891: PPUSH
69892: CALL_OW 77
69896: ST_TO_ADDR
// end ;
69897: LD_VAR 0 3
69901: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69902: LD_INT 0
69904: PPUSH
69905: PPUSH
// task := GetTaskList ( mech ) ;
69906: LD_ADDR_VAR 0 4
69910: PUSH
69911: LD_VAR 0 1
69915: PPUSH
69916: CALL_OW 437
69920: ST_TO_ADDR
// if not task then
69921: LD_VAR 0 4
69925: NOT
69926: IFFALSE 69930
// exit ;
69928: GO 69972
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69930: LD_ADDR_VAR 0 3
69934: PUSH
69935: LD_VAR 0 4
69939: PUSH
69940: LD_INT 1
69942: ARRAY
69943: PUSH
69944: LD_INT 1
69946: ARRAY
69947: PUSH
69948: LD_STRING r
69950: EQUAL
69951: PUSH
69952: LD_VAR 0 4
69956: PUSH
69957: LD_INT 1
69959: ARRAY
69960: PUSH
69961: LD_INT 4
69963: ARRAY
69964: PUSH
69965: LD_VAR 0 2
69969: EQUAL
69970: AND
69971: ST_TO_ADDR
// end ;
69972: LD_VAR 0 3
69976: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69977: LD_INT 0
69979: PPUSH
// SetDir ( unit , d ) ;
69980: LD_VAR 0 1
69984: PPUSH
69985: LD_VAR 0 4
69989: PPUSH
69990: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69994: LD_VAR 0 1
69998: PPUSH
69999: LD_VAR 0 2
70003: PPUSH
70004: LD_VAR 0 3
70008: PPUSH
70009: LD_VAR 0 5
70013: PPUSH
70014: CALL_OW 48
// end ;
70018: LD_VAR 0 6
70022: RET
// export function ToNaturalNumber ( number ) ; begin
70023: LD_INT 0
70025: PPUSH
// result := number div 1 ;
70026: LD_ADDR_VAR 0 2
70030: PUSH
70031: LD_VAR 0 1
70035: PUSH
70036: LD_INT 1
70038: DIV
70039: ST_TO_ADDR
// if number < 0 then
70040: LD_VAR 0 1
70044: PUSH
70045: LD_INT 0
70047: LESS
70048: IFFALSE 70058
// result := 0 ;
70050: LD_ADDR_VAR 0 2
70054: PUSH
70055: LD_INT 0
70057: ST_TO_ADDR
// end ;
70058: LD_VAR 0 2
70062: RET
// export function SortByClass ( units , class ) ; var un ; begin
70063: LD_INT 0
70065: PPUSH
70066: PPUSH
// if not units or not class then
70067: LD_VAR 0 1
70071: NOT
70072: PUSH
70073: LD_VAR 0 2
70077: NOT
70078: OR
70079: IFFALSE 70083
// exit ;
70081: GO 70178
// result := [ ] ;
70083: LD_ADDR_VAR 0 3
70087: PUSH
70088: EMPTY
70089: ST_TO_ADDR
// for un in units do
70090: LD_ADDR_VAR 0 4
70094: PUSH
70095: LD_VAR 0 1
70099: PUSH
70100: FOR_IN
70101: IFFALSE 70176
// if GetClass ( un ) = class then
70103: LD_VAR 0 4
70107: PPUSH
70108: CALL_OW 257
70112: PUSH
70113: LD_VAR 0 2
70117: EQUAL
70118: IFFALSE 70145
// result := Insert ( result , 1 , un ) else
70120: LD_ADDR_VAR 0 3
70124: PUSH
70125: LD_VAR 0 3
70129: PPUSH
70130: LD_INT 1
70132: PPUSH
70133: LD_VAR 0 4
70137: PPUSH
70138: CALL_OW 2
70142: ST_TO_ADDR
70143: GO 70174
// result := Replace ( result , result + 1 , un ) ;
70145: LD_ADDR_VAR 0 3
70149: PUSH
70150: LD_VAR 0 3
70154: PPUSH
70155: LD_VAR 0 3
70159: PUSH
70160: LD_INT 1
70162: PLUS
70163: PPUSH
70164: LD_VAR 0 4
70168: PPUSH
70169: CALL_OW 1
70173: ST_TO_ADDR
70174: GO 70100
70176: POP
70177: POP
// end ;
70178: LD_VAR 0 3
70182: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70183: LD_INT 0
70185: PPUSH
70186: PPUSH
70187: PPUSH
70188: PPUSH
70189: PPUSH
70190: PPUSH
70191: PPUSH
// result := [ ] ;
70192: LD_ADDR_VAR 0 4
70196: PUSH
70197: EMPTY
70198: ST_TO_ADDR
// if x - r < 0 then
70199: LD_VAR 0 1
70203: PUSH
70204: LD_VAR 0 3
70208: MINUS
70209: PUSH
70210: LD_INT 0
70212: LESS
70213: IFFALSE 70225
// min_x := 0 else
70215: LD_ADDR_VAR 0 8
70219: PUSH
70220: LD_INT 0
70222: ST_TO_ADDR
70223: GO 70241
// min_x := x - r ;
70225: LD_ADDR_VAR 0 8
70229: PUSH
70230: LD_VAR 0 1
70234: PUSH
70235: LD_VAR 0 3
70239: MINUS
70240: ST_TO_ADDR
// if y - r < 0 then
70241: LD_VAR 0 2
70245: PUSH
70246: LD_VAR 0 3
70250: MINUS
70251: PUSH
70252: LD_INT 0
70254: LESS
70255: IFFALSE 70267
// min_y := 0 else
70257: LD_ADDR_VAR 0 7
70261: PUSH
70262: LD_INT 0
70264: ST_TO_ADDR
70265: GO 70283
// min_y := y - r ;
70267: LD_ADDR_VAR 0 7
70271: PUSH
70272: LD_VAR 0 2
70276: PUSH
70277: LD_VAR 0 3
70281: MINUS
70282: ST_TO_ADDR
// max_x := x + r ;
70283: LD_ADDR_VAR 0 9
70287: PUSH
70288: LD_VAR 0 1
70292: PUSH
70293: LD_VAR 0 3
70297: PLUS
70298: ST_TO_ADDR
// max_y := y + r ;
70299: LD_ADDR_VAR 0 10
70303: PUSH
70304: LD_VAR 0 2
70308: PUSH
70309: LD_VAR 0 3
70313: PLUS
70314: ST_TO_ADDR
// for _x = min_x to max_x do
70315: LD_ADDR_VAR 0 5
70319: PUSH
70320: DOUBLE
70321: LD_VAR 0 8
70325: DEC
70326: ST_TO_ADDR
70327: LD_VAR 0 9
70331: PUSH
70332: FOR_TO
70333: IFFALSE 70434
// for _y = min_y to max_y do
70335: LD_ADDR_VAR 0 6
70339: PUSH
70340: DOUBLE
70341: LD_VAR 0 7
70345: DEC
70346: ST_TO_ADDR
70347: LD_VAR 0 10
70351: PUSH
70352: FOR_TO
70353: IFFALSE 70430
// begin if not ValidHex ( _x , _y ) then
70355: LD_VAR 0 5
70359: PPUSH
70360: LD_VAR 0 6
70364: PPUSH
70365: CALL_OW 488
70369: NOT
70370: IFFALSE 70374
// continue ;
70372: GO 70352
// if GetResourceTypeXY ( _x , _y ) then
70374: LD_VAR 0 5
70378: PPUSH
70379: LD_VAR 0 6
70383: PPUSH
70384: CALL_OW 283
70388: IFFALSE 70428
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70390: LD_ADDR_VAR 0 4
70394: PUSH
70395: LD_VAR 0 4
70399: PPUSH
70400: LD_VAR 0 4
70404: PUSH
70405: LD_INT 1
70407: PLUS
70408: PPUSH
70409: LD_VAR 0 5
70413: PUSH
70414: LD_VAR 0 6
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PPUSH
70423: CALL_OW 1
70427: ST_TO_ADDR
// end ;
70428: GO 70352
70430: POP
70431: POP
70432: GO 70332
70434: POP
70435: POP
// end ;
70436: LD_VAR 0 4
70440: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70441: LD_INT 0
70443: PPUSH
70444: PPUSH
70445: PPUSH
70446: PPUSH
70447: PPUSH
70448: PPUSH
70449: PPUSH
70450: PPUSH
// if not units then
70451: LD_VAR 0 1
70455: NOT
70456: IFFALSE 70460
// exit ;
70458: GO 70984
// result := UnitFilter ( units , [ f_ok ] ) ;
70460: LD_ADDR_VAR 0 3
70464: PUSH
70465: LD_VAR 0 1
70469: PPUSH
70470: LD_INT 50
70472: PUSH
70473: EMPTY
70474: LIST
70475: PPUSH
70476: CALL_OW 72
70480: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70481: LD_ADDR_VAR 0 8
70485: PUSH
70486: LD_VAR 0 1
70490: PUSH
70491: LD_INT 1
70493: ARRAY
70494: PPUSH
70495: CALL_OW 255
70499: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70500: LD_ADDR_VAR 0 10
70504: PUSH
70505: LD_INT 29
70507: PUSH
70508: LD_INT 91
70510: PUSH
70511: LD_INT 49
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: LIST
70518: ST_TO_ADDR
// if not result then
70519: LD_VAR 0 3
70523: NOT
70524: IFFALSE 70528
// exit ;
70526: GO 70984
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70528: LD_ADDR_VAR 0 5
70532: PUSH
70533: LD_INT 81
70535: PUSH
70536: LD_VAR 0 8
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PPUSH
70545: CALL_OW 69
70549: ST_TO_ADDR
// for i in result do
70550: LD_ADDR_VAR 0 4
70554: PUSH
70555: LD_VAR 0 3
70559: PUSH
70560: FOR_IN
70561: IFFALSE 70982
// begin tag := GetTag ( i ) + 1 ;
70563: LD_ADDR_VAR 0 9
70567: PUSH
70568: LD_VAR 0 4
70572: PPUSH
70573: CALL_OW 110
70577: PUSH
70578: LD_INT 1
70580: PLUS
70581: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70582: LD_ADDR_VAR 0 7
70586: PUSH
70587: LD_VAR 0 4
70591: PPUSH
70592: CALL_OW 250
70596: PPUSH
70597: LD_VAR 0 4
70601: PPUSH
70602: CALL_OW 251
70606: PPUSH
70607: LD_INT 6
70609: PPUSH
70610: CALL 70183 0 3
70614: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70615: LD_VAR 0 4
70619: PPUSH
70620: CALL_OW 247
70624: PUSH
70625: LD_INT 2
70627: EQUAL
70628: PUSH
70629: LD_VAR 0 7
70633: AND
70634: PUSH
70635: LD_VAR 0 4
70639: PPUSH
70640: CALL_OW 264
70644: PUSH
70645: LD_VAR 0 10
70649: IN
70650: NOT
70651: AND
70652: IFFALSE 70691
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70654: LD_VAR 0 4
70658: PPUSH
70659: LD_VAR 0 7
70663: PUSH
70664: LD_INT 1
70666: ARRAY
70667: PUSH
70668: LD_INT 1
70670: ARRAY
70671: PPUSH
70672: LD_VAR 0 7
70676: PUSH
70677: LD_INT 1
70679: ARRAY
70680: PUSH
70681: LD_INT 2
70683: ARRAY
70684: PPUSH
70685: CALL_OW 116
70689: GO 70980
// if path > tag then
70691: LD_VAR 0 2
70695: PUSH
70696: LD_VAR 0 9
70700: GREATER
70701: IFFALSE 70909
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70703: LD_ADDR_VAR 0 6
70707: PUSH
70708: LD_VAR 0 5
70712: PPUSH
70713: LD_INT 91
70715: PUSH
70716: LD_VAR 0 4
70720: PUSH
70721: LD_INT 8
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: LIST
70728: PPUSH
70729: CALL_OW 72
70733: ST_TO_ADDR
// if nearEnemy then
70734: LD_VAR 0 6
70738: IFFALSE 70807
// begin if GetWeapon ( i ) = ru_time_lapser then
70740: LD_VAR 0 4
70744: PPUSH
70745: CALL_OW 264
70749: PUSH
70750: LD_INT 49
70752: EQUAL
70753: IFFALSE 70781
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70755: LD_VAR 0 4
70759: PPUSH
70760: LD_VAR 0 6
70764: PPUSH
70765: LD_VAR 0 4
70769: PPUSH
70770: CALL_OW 74
70774: PPUSH
70775: CALL_OW 112
70779: GO 70805
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70781: LD_VAR 0 4
70785: PPUSH
70786: LD_VAR 0 6
70790: PPUSH
70791: LD_VAR 0 4
70795: PPUSH
70796: CALL_OW 74
70800: PPUSH
70801: CALL 71909 0 2
// end else
70805: GO 70907
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70807: LD_VAR 0 4
70811: PPUSH
70812: LD_VAR 0 2
70816: PUSH
70817: LD_VAR 0 9
70821: ARRAY
70822: PUSH
70823: LD_INT 1
70825: ARRAY
70826: PPUSH
70827: LD_VAR 0 2
70831: PUSH
70832: LD_VAR 0 9
70836: ARRAY
70837: PUSH
70838: LD_INT 2
70840: ARRAY
70841: PPUSH
70842: CALL_OW 297
70846: PUSH
70847: LD_INT 6
70849: GREATER
70850: IFFALSE 70893
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70852: LD_VAR 0 4
70856: PPUSH
70857: LD_VAR 0 2
70861: PUSH
70862: LD_VAR 0 9
70866: ARRAY
70867: PUSH
70868: LD_INT 1
70870: ARRAY
70871: PPUSH
70872: LD_VAR 0 2
70876: PUSH
70877: LD_VAR 0 9
70881: ARRAY
70882: PUSH
70883: LD_INT 2
70885: ARRAY
70886: PPUSH
70887: CALL_OW 114
70891: GO 70907
// SetTag ( i , tag ) ;
70893: LD_VAR 0 4
70897: PPUSH
70898: LD_VAR 0 9
70902: PPUSH
70903: CALL_OW 109
// end else
70907: GO 70980
// if enemy then
70909: LD_VAR 0 5
70913: IFFALSE 70980
// begin if GetWeapon ( i ) = ru_time_lapser then
70915: LD_VAR 0 4
70919: PPUSH
70920: CALL_OW 264
70924: PUSH
70925: LD_INT 49
70927: EQUAL
70928: IFFALSE 70956
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70930: LD_VAR 0 4
70934: PPUSH
70935: LD_VAR 0 5
70939: PPUSH
70940: LD_VAR 0 4
70944: PPUSH
70945: CALL_OW 74
70949: PPUSH
70950: CALL_OW 112
70954: GO 70980
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70956: LD_VAR 0 4
70960: PPUSH
70961: LD_VAR 0 5
70965: PPUSH
70966: LD_VAR 0 4
70970: PPUSH
70971: CALL_OW 74
70975: PPUSH
70976: CALL 71909 0 2
// end ; end ;
70980: GO 70560
70982: POP
70983: POP
// end ;
70984: LD_VAR 0 3
70988: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70989: LD_INT 0
70991: PPUSH
70992: PPUSH
70993: PPUSH
// if not unit or IsInUnit ( unit ) then
70994: LD_VAR 0 1
70998: NOT
70999: PUSH
71000: LD_VAR 0 1
71004: PPUSH
71005: CALL_OW 310
71009: OR
71010: IFFALSE 71014
// exit ;
71012: GO 71105
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71014: LD_ADDR_VAR 0 4
71018: PUSH
71019: LD_VAR 0 1
71023: PPUSH
71024: CALL_OW 250
71028: PPUSH
71029: LD_VAR 0 2
71033: PPUSH
71034: LD_INT 1
71036: PPUSH
71037: CALL_OW 272
71041: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71042: LD_ADDR_VAR 0 5
71046: PUSH
71047: LD_VAR 0 1
71051: PPUSH
71052: CALL_OW 251
71056: PPUSH
71057: LD_VAR 0 2
71061: PPUSH
71062: LD_INT 1
71064: PPUSH
71065: CALL_OW 273
71069: ST_TO_ADDR
// if ValidHex ( x , y ) then
71070: LD_VAR 0 4
71074: PPUSH
71075: LD_VAR 0 5
71079: PPUSH
71080: CALL_OW 488
71084: IFFALSE 71105
// ComTurnXY ( unit , x , y ) ;
71086: LD_VAR 0 1
71090: PPUSH
71091: LD_VAR 0 4
71095: PPUSH
71096: LD_VAR 0 5
71100: PPUSH
71101: CALL_OW 118
// end ;
71105: LD_VAR 0 3
71109: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71110: LD_INT 0
71112: PPUSH
71113: PPUSH
// result := false ;
71114: LD_ADDR_VAR 0 3
71118: PUSH
71119: LD_INT 0
71121: ST_TO_ADDR
// if not units then
71122: LD_VAR 0 2
71126: NOT
71127: IFFALSE 71131
// exit ;
71129: GO 71176
// for i in units do
71131: LD_ADDR_VAR 0 4
71135: PUSH
71136: LD_VAR 0 2
71140: PUSH
71141: FOR_IN
71142: IFFALSE 71174
// if See ( side , i ) then
71144: LD_VAR 0 1
71148: PPUSH
71149: LD_VAR 0 4
71153: PPUSH
71154: CALL_OW 292
71158: IFFALSE 71172
// begin result := true ;
71160: LD_ADDR_VAR 0 3
71164: PUSH
71165: LD_INT 1
71167: ST_TO_ADDR
// exit ;
71168: POP
71169: POP
71170: GO 71176
// end ;
71172: GO 71141
71174: POP
71175: POP
// end ;
71176: LD_VAR 0 3
71180: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71181: LD_INT 0
71183: PPUSH
71184: PPUSH
71185: PPUSH
71186: PPUSH
// if not unit or not points then
71187: LD_VAR 0 1
71191: NOT
71192: PUSH
71193: LD_VAR 0 2
71197: NOT
71198: OR
71199: IFFALSE 71203
// exit ;
71201: GO 71293
// dist := 99999 ;
71203: LD_ADDR_VAR 0 5
71207: PUSH
71208: LD_INT 99999
71210: ST_TO_ADDR
// for i in points do
71211: LD_ADDR_VAR 0 4
71215: PUSH
71216: LD_VAR 0 2
71220: PUSH
71221: FOR_IN
71222: IFFALSE 71291
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71224: LD_ADDR_VAR 0 6
71228: PUSH
71229: LD_VAR 0 1
71233: PPUSH
71234: LD_VAR 0 4
71238: PUSH
71239: LD_INT 1
71241: ARRAY
71242: PPUSH
71243: LD_VAR 0 4
71247: PUSH
71248: LD_INT 2
71250: ARRAY
71251: PPUSH
71252: CALL_OW 297
71256: ST_TO_ADDR
// if tmpDist < dist then
71257: LD_VAR 0 6
71261: PUSH
71262: LD_VAR 0 5
71266: LESS
71267: IFFALSE 71289
// begin result := i ;
71269: LD_ADDR_VAR 0 3
71273: PUSH
71274: LD_VAR 0 4
71278: ST_TO_ADDR
// dist := tmpDist ;
71279: LD_ADDR_VAR 0 5
71283: PUSH
71284: LD_VAR 0 6
71288: ST_TO_ADDR
// end ; end ;
71289: GO 71221
71291: POP
71292: POP
// end ;
71293: LD_VAR 0 3
71297: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71298: LD_INT 0
71300: PPUSH
// uc_side := side ;
71301: LD_ADDR_OWVAR 20
71305: PUSH
71306: LD_VAR 0 1
71310: ST_TO_ADDR
// uc_nation := 3 ;
71311: LD_ADDR_OWVAR 21
71315: PUSH
71316: LD_INT 3
71318: ST_TO_ADDR
// vc_chassis := 25 ;
71319: LD_ADDR_OWVAR 37
71323: PUSH
71324: LD_INT 25
71326: ST_TO_ADDR
// vc_engine := engine_siberite ;
71327: LD_ADDR_OWVAR 39
71331: PUSH
71332: LD_INT 3
71334: ST_TO_ADDR
// vc_control := control_computer ;
71335: LD_ADDR_OWVAR 38
71339: PUSH
71340: LD_INT 3
71342: ST_TO_ADDR
// vc_weapon := 59 ;
71343: LD_ADDR_OWVAR 40
71347: PUSH
71348: LD_INT 59
71350: ST_TO_ADDR
// result := CreateVehicle ;
71351: LD_ADDR_VAR 0 5
71355: PUSH
71356: CALL_OW 45
71360: ST_TO_ADDR
// SetDir ( result , d ) ;
71361: LD_VAR 0 5
71365: PPUSH
71366: LD_VAR 0 4
71370: PPUSH
71371: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71375: LD_VAR 0 5
71379: PPUSH
71380: LD_VAR 0 2
71384: PPUSH
71385: LD_VAR 0 3
71389: PPUSH
71390: LD_INT 0
71392: PPUSH
71393: CALL_OW 48
// end ;
71397: LD_VAR 0 5
71401: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71402: LD_INT 0
71404: PPUSH
71405: PPUSH
71406: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71407: LD_ADDR_VAR 0 2
71411: PUSH
71412: LD_INT 0
71414: PUSH
71415: LD_INT 0
71417: PUSH
71418: LD_INT 0
71420: PUSH
71421: LD_INT 0
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71430: LD_VAR 0 1
71434: NOT
71435: PUSH
71436: LD_VAR 0 1
71440: PPUSH
71441: CALL_OW 264
71445: PUSH
71446: LD_INT 12
71448: PUSH
71449: LD_INT 51
71451: PUSH
71452: LD_INT 32
71454: PUSH
71455: LD_INT 89
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: IN
71464: NOT
71465: OR
71466: IFFALSE 71470
// exit ;
71468: GO 71568
// for i := 1 to 3 do
71470: LD_ADDR_VAR 0 3
71474: PUSH
71475: DOUBLE
71476: LD_INT 1
71478: DEC
71479: ST_TO_ADDR
71480: LD_INT 3
71482: PUSH
71483: FOR_TO
71484: IFFALSE 71566
// begin tmp := GetCargo ( cargo , i ) ;
71486: LD_ADDR_VAR 0 4
71490: PUSH
71491: LD_VAR 0 1
71495: PPUSH
71496: LD_VAR 0 3
71500: PPUSH
71501: CALL_OW 289
71505: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71506: LD_ADDR_VAR 0 2
71510: PUSH
71511: LD_VAR 0 2
71515: PPUSH
71516: LD_VAR 0 3
71520: PPUSH
71521: LD_VAR 0 4
71525: PPUSH
71526: CALL_OW 1
71530: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71531: LD_ADDR_VAR 0 2
71535: PUSH
71536: LD_VAR 0 2
71540: PPUSH
71541: LD_INT 4
71543: PPUSH
71544: LD_VAR 0 2
71548: PUSH
71549: LD_INT 4
71551: ARRAY
71552: PUSH
71553: LD_VAR 0 4
71557: PLUS
71558: PPUSH
71559: CALL_OW 1
71563: ST_TO_ADDR
// end ;
71564: GO 71483
71566: POP
71567: POP
// end ;
71568: LD_VAR 0 2
71572: RET
// export function Length ( array ) ; begin
71573: LD_INT 0
71575: PPUSH
// result := array + 0 ;
71576: LD_ADDR_VAR 0 2
71580: PUSH
71581: LD_VAR 0 1
71585: PUSH
71586: LD_INT 0
71588: PLUS
71589: ST_TO_ADDR
// end ;
71590: LD_VAR 0 2
71594: RET
// export function PrepareArray ( array ) ; begin
71595: LD_INT 0
71597: PPUSH
// result := array diff 0 ;
71598: LD_ADDR_VAR 0 2
71602: PUSH
71603: LD_VAR 0 1
71607: PUSH
71608: LD_INT 0
71610: DIFF
71611: ST_TO_ADDR
// if not result [ 1 ] then
71612: LD_VAR 0 2
71616: PUSH
71617: LD_INT 1
71619: ARRAY
71620: NOT
71621: IFFALSE 71641
// result := Delete ( result , 1 ) ;
71623: LD_ADDR_VAR 0 2
71627: PUSH
71628: LD_VAR 0 2
71632: PPUSH
71633: LD_INT 1
71635: PPUSH
71636: CALL_OW 3
71640: ST_TO_ADDR
// end ;
71641: LD_VAR 0 2
71645: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71646: LD_INT 0
71648: PPUSH
71649: PPUSH
71650: PPUSH
71651: PPUSH
// sibRocketRange := 25 ;
71652: LD_ADDR_VAR 0 6
71656: PUSH
71657: LD_INT 25
71659: ST_TO_ADDR
// result := false ;
71660: LD_ADDR_VAR 0 4
71664: PUSH
71665: LD_INT 0
71667: ST_TO_ADDR
// for i := 0 to 5 do
71668: LD_ADDR_VAR 0 5
71672: PUSH
71673: DOUBLE
71674: LD_INT 0
71676: DEC
71677: ST_TO_ADDR
71678: LD_INT 5
71680: PUSH
71681: FOR_TO
71682: IFFALSE 71749
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71684: LD_VAR 0 1
71688: PPUSH
71689: LD_VAR 0 5
71693: PPUSH
71694: LD_VAR 0 6
71698: PPUSH
71699: CALL_OW 272
71703: PPUSH
71704: LD_VAR 0 2
71708: PPUSH
71709: LD_VAR 0 5
71713: PPUSH
71714: LD_VAR 0 6
71718: PPUSH
71719: CALL_OW 273
71723: PPUSH
71724: LD_VAR 0 3
71728: PPUSH
71729: CALL_OW 309
71733: IFFALSE 71747
// begin result := true ;
71735: LD_ADDR_VAR 0 4
71739: PUSH
71740: LD_INT 1
71742: ST_TO_ADDR
// exit ;
71743: POP
71744: POP
71745: GO 71751
// end ;
71747: GO 71681
71749: POP
71750: POP
// end ;
71751: LD_VAR 0 4
71755: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71756: LD_INT 0
71758: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71759: LD_VAR 0 1
71763: PPUSH
71764: LD_VAR 0 2
71768: PPUSH
71769: LD_INT 0
71771: PPUSH
71772: LD_INT 0
71774: PPUSH
71775: LD_INT 1
71777: PPUSH
71778: LD_INT 0
71780: PPUSH
71781: CALL_OW 587
// end ;
71785: LD_VAR 0 3
71789: RET
// export function CenterOnNow ( unit ) ; begin
71790: LD_INT 0
71792: PPUSH
// result := IsInUnit ( unit ) ;
71793: LD_ADDR_VAR 0 2
71797: PUSH
71798: LD_VAR 0 1
71802: PPUSH
71803: CALL_OW 310
71807: ST_TO_ADDR
// if not result then
71808: LD_VAR 0 2
71812: NOT
71813: IFFALSE 71825
// result := unit ;
71815: LD_ADDR_VAR 0 2
71819: PUSH
71820: LD_VAR 0 1
71824: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71825: LD_VAR 0 1
71829: PPUSH
71830: CALL_OW 87
// end ;
71834: LD_VAR 0 2
71838: RET
// export function ComMoveHex ( unit , hex ) ; begin
71839: LD_INT 0
71841: PPUSH
// if not hex then
71842: LD_VAR 0 2
71846: NOT
71847: IFFALSE 71851
// exit ;
71849: GO 71904
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71851: LD_VAR 0 2
71855: PUSH
71856: LD_INT 1
71858: ARRAY
71859: PPUSH
71860: LD_VAR 0 2
71864: PUSH
71865: LD_INT 2
71867: ARRAY
71868: PPUSH
71869: CALL_OW 428
71873: IFFALSE 71877
// exit ;
71875: GO 71904
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71877: LD_VAR 0 1
71881: PPUSH
71882: LD_VAR 0 2
71886: PUSH
71887: LD_INT 1
71889: ARRAY
71890: PPUSH
71891: LD_VAR 0 2
71895: PUSH
71896: LD_INT 2
71898: ARRAY
71899: PPUSH
71900: CALL_OW 111
// end ;
71904: LD_VAR 0 3
71908: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71909: LD_INT 0
71911: PPUSH
71912: PPUSH
71913: PPUSH
// if not unit or not enemy then
71914: LD_VAR 0 1
71918: NOT
71919: PUSH
71920: LD_VAR 0 2
71924: NOT
71925: OR
71926: IFFALSE 71930
// exit ;
71928: GO 72054
// x := GetX ( enemy ) ;
71930: LD_ADDR_VAR 0 4
71934: PUSH
71935: LD_VAR 0 2
71939: PPUSH
71940: CALL_OW 250
71944: ST_TO_ADDR
// y := GetY ( enemy ) ;
71945: LD_ADDR_VAR 0 5
71949: PUSH
71950: LD_VAR 0 2
71954: PPUSH
71955: CALL_OW 251
71959: ST_TO_ADDR
// if ValidHex ( x , y ) then
71960: LD_VAR 0 4
71964: PPUSH
71965: LD_VAR 0 5
71969: PPUSH
71970: CALL_OW 488
71974: IFFALSE 72054
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
71976: LD_VAR 0 2
71980: PPUSH
71981: CALL_OW 247
71985: PUSH
71986: LD_INT 3
71988: PUSH
71989: LD_INT 2
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: IN
71996: PUSH
71997: LD_VAR 0 1
72001: PPUSH
72002: CALL_OW 255
72006: PPUSH
72007: LD_VAR 0 2
72011: PPUSH
72012: CALL_OW 292
72016: AND
72017: IFFALSE 72035
// ComAttackUnit ( unit , enemy ) else
72019: LD_VAR 0 1
72023: PPUSH
72024: LD_VAR 0 2
72028: PPUSH
72029: CALL_OW 115
72033: GO 72054
// ComAgressiveMove ( unit , x , y ) ;
72035: LD_VAR 0 1
72039: PPUSH
72040: LD_VAR 0 4
72044: PPUSH
72045: LD_VAR 0 5
72049: PPUSH
72050: CALL_OW 114
// end ; end_of_file
72054: LD_VAR 0 3
72058: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72059: LD_VAR 0 1
72063: PPUSH
72064: LD_VAR 0 2
72068: PPUSH
72069: LD_VAR 0 3
72073: PPUSH
72074: LD_VAR 0 4
72078: PPUSH
72079: LD_VAR 0 5
72083: PPUSH
72084: LD_VAR 0 6
72088: PPUSH
72089: CALL 10417 0 6
// end ;
72093: PPOPN 6
72095: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72096: LD_INT 0
72098: PPUSH
// begin if not units then
72099: LD_VAR 0 1
72103: NOT
72104: IFFALSE 72108
// exit ;
72106: GO 72108
// end ;
72108: PPOPN 7
72110: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72111: CALL 10321 0 0
// end ;
72115: PPOPN 1
72117: END
