// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 237 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 649 0 1
// PrepareRussian ;
  19: CALL 2254 0 0
// PrepareArabian ;
  23: CALL 1242 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5954 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape , activeInvincible ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// activeInvincible := true ;
 224: LD_ADDR_EXP 17
 228: PUSH
 229: LD_INT 1
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export tEscape ; function InitTag ; begin
 237: LD_INT 0
 239: PPUSH
// tEscape := 10 ;
 240: LD_ADDR_EXP 18
 244: PUSH
 245: LD_INT 10
 247: ST_TO_ADDR
// end ;
 248: LD_VAR 0 1
 252: RET
// every 0 0$1 trigger debug do var i ;
 253: LD_EXP 1
 257: IFFALSE 341
 259: GO 261
 261: DISABLE
 262: LD_INT 0
 264: PPUSH
// begin enable ;
 265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 266: LD_ADDR_VAR 0 1
 270: PUSH
 271: LD_INT 22
 273: PUSH
 274: LD_INT 2
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 3
 283: PUSH
 284: LD_INT 21
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 339
// if GetLives ( i ) < 1000 then
 310: LD_VAR 0 1
 314: PPUSH
 315: CALL_OW 256
 319: PUSH
 320: LD_INT 1000
 322: LESS
 323: IFFALSE 337
// SetLives ( i , 1000 ) ;
 325: LD_VAR 0 1
 329: PPUSH
 330: LD_INT 1000
 332: PPUSH
 333: CALL_OW 234
 337: GO 307
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 344: LD_INT 0
 346: PPUSH
// uc_side := side ;
 347: LD_ADDR_OWVAR 20
 351: PUSH
 352: LD_VAR 0 1
 356: ST_TO_ADDR
// uc_nation := nation ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_VAR 0 2
 366: ST_TO_ADDR
// vc_chassis := chassis ;
 367: LD_ADDR_OWVAR 37
 371: PUSH
 372: LD_VAR 0 3
 376: ST_TO_ADDR
// vc_engine := engine ;
 377: LD_ADDR_OWVAR 39
 381: PUSH
 382: LD_VAR 0 4
 386: ST_TO_ADDR
// vc_control := control ;
 387: LD_ADDR_OWVAR 38
 391: PUSH
 392: LD_VAR 0 5
 396: ST_TO_ADDR
// vc_weapon := weapon ;
 397: LD_ADDR_OWVAR 40
 401: PUSH
 402: LD_VAR 0 6
 406: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 407: LD_ADDR_OWVAR 41
 411: PUSH
 412: LD_VAR 0 7
 416: ST_TO_ADDR
// result := CreateVehicle ;
 417: LD_ADDR_VAR 0 8
 421: PUSH
 422: CALL_OW 45
 426: ST_TO_ADDR
// end ;
 427: LD_VAR 0 8
 431: RET
// export function SayX ( units , ident ) ; var i ; begin
 432: LD_INT 0
 434: PPUSH
 435: PPUSH
// result := false ;
 436: LD_ADDR_VAR 0 3
 440: PUSH
 441: LD_INT 0
 443: ST_TO_ADDR
// if not units then
 444: LD_VAR 0 1
 448: NOT
 449: IFFALSE 453
// exit ;
 451: GO 507
// for i in units do
 453: LD_ADDR_VAR 0 4
 457: PUSH
 458: LD_VAR 0 1
 462: PUSH
 463: FOR_IN
 464: IFFALSE 505
// if IsOk ( i ) then
 466: LD_VAR 0 4
 470: PPUSH
 471: CALL_OW 302
 475: IFFALSE 503
// begin Say ( i , ident ) ;
 477: LD_VAR 0 4
 481: PPUSH
 482: LD_VAR 0 2
 486: PPUSH
 487: CALL_OW 88
// result := i ;
 491: LD_ADDR_VAR 0 3
 495: PUSH
 496: LD_VAR 0 4
 500: ST_TO_ADDR
// break ;
 501: GO 505
// end ;
 503: GO 463
 505: POP
 506: POP
// end ;
 507: LD_VAR 0 3
 511: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 512: LD_INT 0
 514: PPUSH
 515: PPUSH
// InitUc ;
 516: CALL_OW 18
// InitHc ;
 520: CALL_OW 19
// uc_side := 0 ;
 524: LD_ADDR_OWVAR 20
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// uc_nation := 0 ;
 532: LD_ADDR_OWVAR 21
 536: PUSH
 537: LD_INT 0
 539: ST_TO_ADDR
// for i = 1 to amount do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: DOUBLE
 546: LD_INT 1
 548: DEC
 549: ST_TO_ADDR
 550: LD_VAR 0 2
 554: PUSH
 555: FOR_TO
 556: IFFALSE 638
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 558: LD_ADDR_OWVAR 29
 562: PUSH
 563: LD_INT 9
 565: PPUSH
 566: LD_INT 12
 568: PPUSH
 569: CALL_OW 12
 573: PUSH
 574: LD_INT 9
 576: PPUSH
 577: LD_INT 12
 579: PPUSH
 580: CALL_OW 12
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 589: LD_ADDR_OWVAR 35
 593: PUSH
 594: LD_INT 1
 596: NEG
 597: PPUSH
 598: LD_INT 1
 600: PPUSH
 601: CALL_OW 12
 605: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 606: LD_INT 0
 608: PPUSH
 609: LD_INT 12
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 619: CALL_OW 44
 623: PPUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: LD_INT 0
 631: PPUSH
 632: CALL_OW 49
// end ;
 636: GO 555
 638: POP
 639: POP
// InitHc ;
 640: CALL_OW 19
// end ;
 644: LD_VAR 0 3
 648: RET
// export function CreateNature ( forest ) ; var i ; begin
 649: LD_INT 0
 651: PPUSH
 652: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 653: LD_VAR 0 1
 657: PPUSH
 658: LD_INT 3
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: PUSH
 676: LD_OWVAR 67
 680: ARRAY
 681: PPUSH
 682: CALL 512 0 2
// for i := 1 to 2 do
 686: LD_ADDR_VAR 0 3
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 2
 698: PUSH
 699: FOR_TO
 700: IFFALSE 737
// begin hc_class := 21 ;
 702: LD_ADDR_OWVAR 28
 706: PUSH
 707: LD_INT 21
 709: ST_TO_ADDR
// hc_gallery :=  ;
 710: LD_ADDR_OWVAR 33
 714: PUSH
 715: LD_STRING 
 717: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 718: CALL_OW 44
 722: PPUSH
 723: LD_VAR 0 1
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 49
// end ;
 735: GO 699
 737: POP
 738: POP
// for i := 1 to 2 do
 739: LD_ADDR_VAR 0 3
 743: PUSH
 744: DOUBLE
 745: LD_INT 1
 747: DEC
 748: ST_TO_ADDR
 749: LD_INT 2
 751: PUSH
 752: FOR_TO
 753: IFFALSE 790
// begin hc_class := 18 ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 18
 762: ST_TO_ADDR
// hc_gallery :=  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 771: CALL_OW 44
 775: PPUSH
 776: LD_VAR 0 1
 780: PPUSH
 781: LD_INT 0
 783: PPUSH
 784: CALL_OW 49
// end ;
 788: GO 752
 790: POP
 791: POP
// for i := 1 to 2 do
 792: LD_ADDR_VAR 0 3
 796: PUSH
 797: DOUBLE
 798: LD_INT 1
 800: DEC
 801: ST_TO_ADDR
 802: LD_INT 2
 804: PUSH
 805: FOR_TO
 806: IFFALSE 843
// begin hc_class := 13 ;
 808: LD_ADDR_OWVAR 28
 812: PUSH
 813: LD_INT 13
 815: ST_TO_ADDR
// hc_gallery :=  ;
 816: LD_ADDR_OWVAR 33
 820: PUSH
 821: LD_STRING 
 823: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 824: CALL_OW 44
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: LD_INT 0
 836: PPUSH
 837: CALL_OW 49
// end ;
 841: GO 805
 843: POP
 844: POP
// end ;
 845: LD_VAR 0 2
 849: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 850: LD_INT 0
 852: PPUSH
 853: PPUSH
 854: PPUSH
// if not observer or not unit then
 855: LD_VAR 0 1
 859: NOT
 860: PUSH
 861: LD_VAR 0 2
 865: NOT
 866: OR
 867: IFFALSE 871
// exit ;
 869: GO 919
// if not See ( GetSide ( observer ) , unit ) then
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: PPUSH
 881: LD_VAR 0 2
 885: PPUSH
 886: CALL_OW 292
 890: NOT
 891: IFFALSE 895
// exit ;
 893: GO 919
// result := GetDistUnits ( observer , unit ) < 12 ;
 895: LD_ADDR_VAR 0 3
 899: PUSH
 900: LD_VAR 0 1
 904: PPUSH
 905: LD_VAR 0 2
 909: PPUSH
 910: CALL_OW 296
 914: PUSH
 915: LD_INT 12
 917: LESS
 918: ST_TO_ADDR
// end ;
 919: LD_VAR 0 3
 923: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 924: LD_INT 0
 926: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 927: LD_VAR 0 2
 931: PUSH
 932: LD_INT 1
 934: ARRAY
 935: PPUSH
 936: LD_VAR 0 2
 940: PUSH
 941: LD_INT 2
 943: ARRAY
 944: PPUSH
 945: CALL_OW 488
 949: PUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 2
 963: PUSH
 964: LD_INT 2
 966: ARRAY
 967: PPUSH
 968: CALL_OW 428
 972: PUSH
 973: LD_INT 0
 975: EQUAL
 976: AND
 977: IFFALSE 1011
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 979: LD_VAR 0 1
 983: PPUSH
 984: LD_VAR 0 2
 988: PUSH
 989: LD_INT 1
 991: ARRAY
 992: PPUSH
 993: LD_VAR 0 2
 997: PUSH
 998: LD_INT 2
1000: ARRAY
1001: PPUSH
1002: LD_VAR 0 3
1006: PPUSH
1007: CALL_OW 48
// end ;
1011: LD_VAR 0 4
1015: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1016: LD_INT 0
1018: PPUSH
1019: PPUSH
1020: PPUSH
1021: PPUSH
1022: PPUSH
// if not unit then
1023: LD_VAR 0 1
1027: NOT
1028: IFFALSE 1032
// exit ;
1030: GO 1237
// side := GetSide ( unit ) ;
1032: LD_ADDR_VAR 0 4
1036: PUSH
1037: LD_VAR 0 1
1041: PPUSH
1042: CALL_OW 255
1046: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1047: LD_ADDR_VAR 0 5
1051: PUSH
1052: LD_INT 22
1054: PUSH
1055: LD_VAR 0 4
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: LD_INT 30
1066: PUSH
1067: LD_VAR 0 2
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PPUSH
1080: CALL_OW 69
1084: ST_TO_ADDR
// if not tmp then
1085: LD_VAR 0 5
1089: NOT
1090: IFFALSE 1094
// exit ;
1092: GO 1237
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1094: LD_ADDR_VAR 0 5
1098: PUSH
1099: LD_VAR 0 1
1103: PPUSH
1104: LD_VAR 0 5
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: CALL 36746 0 4
1119: ST_TO_ADDR
// places := 1 ;
1120: LD_ADDR_VAR 0 7
1124: PUSH
1125: LD_INT 1
1127: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1128: LD_VAR 0 2
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 4
1141: PUSH
1142: LD_INT 5
1144: PUSH
1145: LD_INT 2
1147: PUSH
1148: LD_INT 3
1150: PUSH
1151: LD_INT 6
1153: PUSH
1154: LD_INT 7
1156: PUSH
1157: LD_INT 8
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: IN
1171: IFFALSE 1181
// places := 6 ;
1173: LD_ADDR_VAR 0 7
1177: PUSH
1178: LD_INT 6
1180: ST_TO_ADDR
// for i in tmp do
1181: LD_ADDR_VAR 0 6
1185: PUSH
1186: LD_VAR 0 5
1190: PUSH
1191: FOR_IN
1192: IFFALSE 1235
// begin if UnitsInside ( i ) - places <= 0 then
1194: LD_VAR 0 6
1198: PPUSH
1199: CALL_OW 313
1203: PUSH
1204: LD_VAR 0 7
1208: MINUS
1209: PUSH
1210: LD_INT 0
1212: LESSEQUAL
1213: IFFALSE 1219
// continue else
1215: GO 1191
1217: GO 1233
// begin result := i ;
1219: LD_ADDR_VAR 0 3
1223: PUSH
1224: LD_VAR 0 6
1228: ST_TO_ADDR
// exit ;
1229: POP
1230: POP
1231: GO 1237
// end ; end ;
1233: GO 1191
1235: POP
1236: POP
// end ; end_of_file
1237: LD_VAR 0 3
1241: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1242: LD_INT 0
1244: PPUSH
1245: PPUSH
// uc_side := 2 ;
1246: LD_ADDR_OWVAR 20
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// uc_nation := 2 ;
1254: LD_ADDR_OWVAR 21
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1262: LD_ADDR_EXP 19
1266: PUSH
1267: LD_STRING Heike
1269: PPUSH
1270: LD_EXP 1
1274: NOT
1275: PPUSH
1276: LD_EXP 2
1280: PPUSH
1281: CALL 31349 0 3
1285: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1286: LD_ADDR_EXP 22
1290: PUSH
1291: LD_STRING Ibrahim
1293: PPUSH
1294: LD_EXP 1
1298: NOT
1299: PPUSH
1300: LD_EXP 2
1304: PPUSH
1305: CALL 31349 0 3
1309: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1310: LD_ADDR_EXP 20
1314: PUSH
1315: LD_STRING Givi
1317: PPUSH
1318: LD_EXP 1
1322: NOT
1323: PPUSH
1324: LD_EXP 2
1328: PPUSH
1329: CALL 31349 0 3
1333: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1334: LD_ADDR_EXP 23
1338: PUSH
1339: LD_STRING Kamil
1341: PPUSH
1342: LD_EXP 1
1346: NOT
1347: PPUSH
1348: LD_EXP 2
1352: PPUSH
1353: CALL 31349 0 3
1357: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1358: LD_ADDR_EXP 24
1362: PUSH
1363: LD_STRING Kaia
1365: PPUSH
1366: LD_EXP 1
1370: NOT
1371: PPUSH
1372: LD_EXP 2
1376: PPUSH
1377: CALL 31349 0 3
1381: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1382: LD_ADDR_EXP 25
1386: PUSH
1387: LD_STRING Sophia
1389: PPUSH
1390: LD_EXP 1
1394: NOT
1395: PPUSH
1396: LD_EXP 2
1400: PPUSH
1401: CALL 31349 0 3
1405: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1406: LD_ADDR_EXP 26
1410: PUSH
1411: LD_STRING Markov
1413: PPUSH
1414: LD_EXP 1
1418: NOT
1419: PPUSH
1420: LD_EXP 2
1424: PPUSH
1425: CALL 31349 0 3
1429: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1430: LD_ADDR_EXP 29
1434: PUSH
1435: LD_STRING Aviradze
1437: PPUSH
1438: LD_EXP 1
1442: NOT
1443: PPUSH
1444: LD_EXP 2
1448: PPUSH
1449: CALL 31349 0 3
1453: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1454: LD_ADDR_EXP 28
1458: PUSH
1459: LD_STRING Kurt
1461: PPUSH
1462: LD_EXP 1
1466: NOT
1467: PPUSH
1468: LD_EXP 2
1472: PPUSH
1473: CALL 31349 0 3
1477: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1478: LD_ADDR_EXP 21
1482: PUSH
1483: LD_STRING Mike
1485: PPUSH
1486: LD_EXP 1
1490: NOT
1491: PPUSH
1492: LD_EXP 2
1496: PPUSH
1497: CALL 31349 0 3
1501: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1502: LD_ADDR_EXP 30
1506: PUSH
1507: LD_STRING 04_1_others
1509: PPUSH
1510: CALL_OW 31
1514: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1515: LD_ADDR_EXP 32
1519: PUSH
1520: LD_STRING 04_1_apes
1522: PPUSH
1523: CALL_OW 31
1527: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1528: LD_ADDR_EXP 31
1532: PUSH
1533: LD_STRING 04_1_Vehicles
1535: PPUSH
1536: EMPTY
1537: PPUSH
1538: CALL_OW 30
1542: ST_TO_ADDR
// if debug then
1543: LD_EXP 1
1547: IFFALSE 1766
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_big_cargo_bay , 3 , 1000 , [ 40 , 40 ] , 1 ] ] ;
1549: LD_ADDR_EXP 31
1553: PUSH
1554: LD_INT 13
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 1
1562: PUSH
1563: LD_INT 27
1565: PUSH
1566: LD_INT 2
1568: PUSH
1569: LD_INT 1000
1571: PUSH
1572: LD_INT 0
1574: PUSH
1575: LD_INT 0
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 3
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: PUSH
1595: LD_INT 13
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: LD_INT 1
1603: PUSH
1604: LD_INT 25
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 1000
1612: PUSH
1613: LD_INT 0
1615: PUSH
1616: LD_INT 0
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 3
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 13
1638: PUSH
1639: LD_INT 1
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 27
1647: PUSH
1648: LD_INT 2
1650: PUSH
1651: LD_INT 1000
1653: PUSH
1654: LD_INT 0
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 1
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 13
1679: PUSH
1680: LD_INT 1
1682: PUSH
1683: LD_INT 1
1685: PUSH
1686: LD_INT 27
1688: PUSH
1689: LD_INT 2
1691: PUSH
1692: LD_INT 1000
1694: PUSH
1695: LD_INT 0
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 1
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 23
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: LD_INT 89
1729: PUSH
1730: LD_INT 3
1732: PUSH
1733: LD_INT 1000
1735: PUSH
1736: LD_INT 40
1738: PUSH
1739: LD_INT 40
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: ST_TO_ADDR
// uc_side := 5 ;
1766: LD_ADDR_OWVAR 20
1770: PUSH
1771: LD_INT 5
1773: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1774: LD_ADDR_EXP 27
1778: PUSH
1779: LD_STRING Abdul
1781: PPUSH
1782: LD_INT 0
1784: PPUSH
1785: LD_STRING 
1787: PPUSH
1788: CALL 31349 0 3
1792: ST_TO_ADDR
// end ;
1793: LD_VAR 0 1
1797: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , debug ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1798: LD_STRING 04_1_KaganCaptured
1800: PPUSH
1801: LD_EXP 1
1805: PPUSH
1806: CALL_OW 30
1810: PUSH
1811: LD_INT 22
1813: PUSH
1814: LD_INT 5
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PPUSH
1821: CALL_OW 69
1825: NOT
1826: AND
1827: PUSH
1828: LD_INT 124
1830: PPUSH
1831: LD_INT 26
1833: PPUSH
1834: CALL_OW 428
1838: PUSH
1839: LD_INT 0
1841: EQUAL
1842: PUSH
1843: LD_INT 124
1845: PPUSH
1846: LD_INT 26
1848: PPUSH
1849: CALL_OW 428
1853: PPUSH
1854: CALL_OW 255
1858: PUSH
1859: LD_INT 2
1861: EQUAL
1862: XOR
1863: AND
1864: IFFALSE 2251
1866: GO 1868
1868: DISABLE
1869: LD_INT 0
1871: PPUSH
1872: PPUSH
// begin enable ;
1873: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1874: LD_EXP 34
1878: NOT
1879: PUSH
1880: LD_EXP 34
1884: PUSH
1885: LD_INT 4
1887: GREATER
1888: OR
1889: IFFALSE 1899
// cargoCounter := 1 ;
1891: LD_ADDR_EXP 34
1895: PUSH
1896: LD_INT 1
1898: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1899: LD_ADDR_VAR 0 2
1903: PUSH
1904: LD_INT 142
1906: PUSH
1907: LD_INT 15
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 129
1916: PUSH
1917: LD_INT 11
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 138
1926: PUSH
1927: LD_INT 9
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 133
1936: PUSH
1937: LD_INT 10
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: ST_TO_ADDR
// uc_side := 5 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 5
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1966: LD_INT 5
1968: PPUSH
1969: LD_INT 2
1971: PPUSH
1972: LD_INT 13
1974: PPUSH
1975: LD_INT 2
1977: PPUSH
1978: LD_INT 1
1980: PPUSH
1981: LD_INT 32
1983: PPUSH
1984: LD_INT 70
1986: PPUSH
1987: CALL 344 0 7
// veh := CreateVehicle ;
1991: LD_ADDR_VAR 0 1
1995: PUSH
1996: CALL_OW 45
2000: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2001: LD_VAR 0 1
2005: PPUSH
2006: LD_INT 3
2008: PPUSH
2009: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
2013: LD_VAR 0 1
2017: PPUSH
2018: LD_INT 8
2020: PPUSH
2021: LD_INT 0
2023: PPUSH
2024: CALL_OW 49
// if not cargoDriver then
2028: LD_EXP 33
2032: NOT
2033: IFFALSE 2058
// begin PrepareHuman ( false , 1 , 3 ) ;
2035: LD_INT 0
2037: PPUSH
2038: LD_INT 1
2040: PPUSH
2041: LD_INT 3
2043: PPUSH
2044: CALL_OW 380
// cargoDriver := CreateHuman ;
2048: LD_ADDR_EXP 33
2052: PUSH
2053: CALL_OW 44
2057: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
2058: LD_EXP 33
2062: PPUSH
2063: LD_VAR 0 1
2067: PPUSH
2068: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 2
2079: PPUSH
2080: LD_INT 100
2082: PPUSH
2083: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
2087: LD_VAR 0 1
2091: PPUSH
2092: LD_VAR 0 2
2096: PUSH
2097: LD_EXP 34
2101: ARRAY
2102: PUSH
2103: LD_INT 1
2105: ARRAY
2106: PPUSH
2107: LD_VAR 0 2
2111: PUSH
2112: LD_EXP 34
2116: ARRAY
2117: PUSH
2118: LD_INT 2
2120: ARRAY
2121: PPUSH
2122: CALL_OW 111
// AddComUnload ( veh ) ;
2126: LD_VAR 0 1
2130: PPUSH
2131: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
2135: LD_VAR 0 1
2139: PPUSH
2140: LD_INT 133
2142: PPUSH
2143: LD_INT 2
2145: PPUSH
2146: CALL_OW 171
// wait ( 0 0$5 ) ;
2150: LD_INT 175
2152: PPUSH
2153: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2157: LD_INT 35
2159: PPUSH
2160: CALL_OW 67
// if not HasTask ( veh ) then
2164: LD_VAR 0 1
2168: PPUSH
2169: CALL_OW 314
2173: NOT
2174: IFFALSE 2191
// ComMoveXY ( veh , 133 , 2 ) ;
2176: LD_VAR 0 1
2180: PPUSH
2181: LD_INT 133
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: CALL_OW 111
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
2191: LD_VAR 0 1
2195: PPUSH
2196: LD_INT 133
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL_OW 307
2206: PUSH
2207: LD_VAR 0 1
2211: PPUSH
2212: LD_INT 8
2214: PPUSH
2215: CALL_OW 308
2219: OR
2220: IFFALSE 2157
// RemoveUnit ( cargoDriver ) ;
2222: LD_EXP 33
2226: PPUSH
2227: CALL_OW 64
// RemoveUnit ( veh ) ;
2231: LD_VAR 0 1
2235: PPUSH
2236: CALL_OW 64
// if tick >= 20 20$00 then
2240: LD_OWVAR 1
2244: PUSH
2245: LD_INT 42000
2247: GREATEREQUAL
2248: IFFALSE 2251
// disable ;
2250: DISABLE
// end ; end_of_file
2251: PPOPN 2
2253: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
2254: LD_INT 0
2256: PPUSH
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
2261: PPUSH
2262: PPUSH
2263: PPUSH
2264: PPUSH
// uc_side := 3 ;
2265: LD_ADDR_OWVAR 20
2269: PUSH
2270: LD_INT 3
2272: ST_TO_ADDR
// uc_nation := 3 ;
2273: LD_ADDR_OWVAR 21
2277: PUSH
2278: LD_INT 3
2280: ST_TO_ADDR
// ruForce := [ ] ;
2281: LD_ADDR_EXP 38
2285: PUSH
2286: EMPTY
2287: ST_TO_ADDR
// ruMech := [ ] ;
2288: LD_ADDR_EXP 40
2292: PUSH
2293: EMPTY
2294: ST_TO_ADDR
// ruEng := [ ] ;
2295: LD_ADDR_EXP 39
2299: PUSH
2300: EMPTY
2301: ST_TO_ADDR
// ruSci := [ ] ;
2302: LD_ADDR_EXP 41
2306: PUSH
2307: EMPTY
2308: ST_TO_ADDR
// ruMobile := [ ] ;
2309: LD_ADDR_EXP 42
2313: PUSH
2314: EMPTY
2315: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2316: LD_ADDR_EXP 35
2320: PUSH
2321: LD_STRING Burlak
2323: PPUSH
2324: LD_INT 0
2326: PPUSH
2327: LD_STRING 
2329: PPUSH
2330: CALL 31349 0 3
2334: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2335: LD_ADDR_EXP 36
2339: PUSH
2340: LD_STRING Gaydar
2342: PPUSH
2343: LD_INT 0
2345: PPUSH
2346: LD_STRING 
2348: PPUSH
2349: CALL 31349 0 3
2353: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2354: LD_ADDR_EXP 37
2358: PUSH
2359: LD_STRING Kuzmov
2361: PPUSH
2362: LD_INT 0
2364: PPUSH
2365: LD_STRING 
2367: PPUSH
2368: CALL 31349 0 3
2372: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2373: LD_EXP 37
2377: PPUSH
2378: LD_INT 200
2380: PPUSH
2381: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2385: LD_INT 200
2387: PPUSH
2388: LD_STRING chuikov
2390: PPUSH
2391: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2395: LD_INT 200
2397: PPUSH
2398: CALL_OW 274
2402: PPUSH
2403: LD_INT 1
2405: PPUSH
2406: LD_INT 800
2408: PUSH
2409: LD_INT 1000
2411: PUSH
2412: LD_INT 1250
2414: PUSH
2415: LD_INT 1300
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: PUSH
2424: LD_OWVAR 67
2428: ARRAY
2429: PPUSH
2430: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2434: LD_INT 200
2436: PPUSH
2437: CALL_OW 274
2441: PPUSH
2442: LD_INT 2
2444: PPUSH
2445: LD_INT 160
2447: PPUSH
2448: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2452: LD_INT 225
2454: PPUSH
2455: CALL_OW 274
2459: PPUSH
2460: LD_INT 1
2462: PPUSH
2463: LD_INT 200
2465: PPUSH
2466: CALL_OW 277
// oil := 150 ;
2470: LD_ADDR_VAR 0 9
2474: PUSH
2475: LD_INT 150
2477: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2478: LD_EXP 5
2482: PUSH
2483: LD_INT 94500
2485: PUSH
2486: LD_INT 84000
2488: PUSH
2489: LD_INT 73500
2491: PUSH
2492: LD_INT 67200
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: PUSH
2501: LD_OWVAR 67
2505: ARRAY
2506: GREATEREQUAL
2507: IFFALSE 2662
// begin oil := 450 ;
2509: LD_ADDR_VAR 0 9
2513: PUSH
2514: LD_INT 450
2516: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2517: LD_ADDR_VAR 0 7
2521: PUSH
2522: LD_INT 123
2524: PUSH
2525: LD_INT 17
2527: PUSH
2528: LD_INT 3
2530: PUSH
2531: LD_INT 31
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 152
2542: PUSH
2543: LD_INT 38
2545: PUSH
2546: LD_INT 3
2548: PUSH
2549: LD_INT 31
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: PUSH
2558: LD_INT 81
2560: PUSH
2561: LD_INT 6
2563: PUSH
2564: LD_INT 4
2566: PUSH
2567: LD_INT 31
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 113
2578: PUSH
2579: LD_INT 67
2581: PUSH
2582: LD_INT 4
2584: PUSH
2585: LD_INT 32
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: ST_TO_ADDR
// for i in tmp do
2600: LD_ADDR_VAR 0 4
2604: PUSH
2605: LD_VAR 0 7
2609: PUSH
2610: FOR_IN
2611: IFFALSE 2660
// begin bc_type := i [ 4 ] ;
2613: LD_ADDR_OWVAR 42
2617: PUSH
2618: LD_VAR 0 4
2622: PUSH
2623: LD_INT 4
2625: ARRAY
2626: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2627: LD_VAR 0 4
2631: PUSH
2632: LD_INT 1
2634: ARRAY
2635: PPUSH
2636: LD_VAR 0 4
2640: PUSH
2641: LD_INT 2
2643: ARRAY
2644: PPUSH
2645: LD_VAR 0 4
2649: PUSH
2650: LD_INT 3
2652: ARRAY
2653: PPUSH
2654: CALL_OW 47
// end ;
2658: GO 2610
2660: POP
2661: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2662: LD_INT 225
2664: PPUSH
2665: CALL_OW 274
2669: PPUSH
2670: LD_INT 2
2672: PPUSH
2673: LD_VAR 0 9
2677: PPUSH
2678: CALL_OW 277
// if Difficulty > 1 then
2682: LD_OWVAR 67
2686: PUSH
2687: LD_INT 1
2689: GREATER
2690: IFFALSE 2785
// begin bc_type := b_bunker ;
2692: LD_ADDR_OWVAR 42
2696: PUSH
2697: LD_INT 32
2699: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2700: LD_ADDR_VAR 0 7
2704: PUSH
2705: LD_INT 121
2707: PUSH
2708: LD_INT 85
2710: PUSH
2711: LD_INT 5
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 93
2721: PUSH
2722: LD_INT 72
2724: PUSH
2725: LD_INT 1
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: LIST
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: ST_TO_ADDR
// for i in tmp do
2737: LD_ADDR_VAR 0 4
2741: PUSH
2742: LD_VAR 0 7
2746: PUSH
2747: FOR_IN
2748: IFFALSE 2783
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2750: LD_VAR 0 4
2754: PUSH
2755: LD_INT 1
2757: ARRAY
2758: PPUSH
2759: LD_VAR 0 4
2763: PUSH
2764: LD_INT 2
2766: ARRAY
2767: PPUSH
2768: LD_VAR 0 4
2772: PUSH
2773: LD_INT 3
2775: ARRAY
2776: PPUSH
2777: CALL_OW 47
2781: GO 2747
2783: POP
2784: POP
// end ; base := GetBase ( ruMainBase ) ;
2785: LD_ADDR_VAR 0 2
2789: PUSH
2790: LD_INT 200
2792: PPUSH
2793: CALL_OW 274
2797: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2798: LD_ADDR_VAR 0 3
2802: PUSH
2803: LD_VAR 0 2
2807: PPUSH
2808: CALL_OW 417
2812: ST_TO_ADDR
// for b in blist do
2813: LD_ADDR_VAR 0 5
2817: PUSH
2818: LD_VAR 0 3
2822: PUSH
2823: FOR_IN
2824: IFFALSE 3275
// begin if b [ 1 ] = b_factory then
2826: LD_VAR 0 5
2830: PUSH
2831: LD_INT 1
2833: ARRAY
2834: PUSH
2835: LD_INT 3
2837: EQUAL
2838: IFFALSE 2989
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2840: LD_ADDR_VAR 0 8
2844: PUSH
2845: LD_VAR 0 5
2849: PUSH
2850: LD_INT 2
2852: ARRAY
2853: PPUSH
2854: LD_VAR 0 5
2858: PUSH
2859: LD_INT 3
2861: ARRAY
2862: PPUSH
2863: CALL_OW 428
2867: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2868: LD_ADDR_VAR 0 4
2872: PUSH
2873: DOUBLE
2874: LD_INT 1
2876: DEC
2877: ST_TO_ADDR
2878: LD_INT 2
2880: PUSH
2881: LD_INT 2
2883: PUSH
2884: LD_OWVAR 67
2888: PLUS
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PUSH
2894: LD_EXP 10
2898: PUSH
2899: LD_INT 3
2901: GREATER
2902: PUSH
2903: LD_INT 1
2905: PLUS
2906: ARRAY
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2985
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 3
2916: PPUSH
2917: LD_INT 1
2919: PUSH
2920: LD_OWVAR 67
2924: PLUS
2925: PPUSH
2926: CALL_OW 380
// un := CreateHuman ;
2930: LD_ADDR_VAR 0 6
2934: PUSH
2935: CALL_OW 44
2939: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2940: LD_ADDR_EXP 40
2944: PUSH
2945: LD_EXP 40
2949: PPUSH
2950: LD_EXP 40
2954: PUSH
2955: LD_INT 1
2957: PLUS
2958: PPUSH
2959: LD_VAR 0 6
2963: PPUSH
2964: CALL_OW 1
2968: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2969: LD_VAR 0 6
2973: PPUSH
2974: LD_VAR 0 8
2978: PPUSH
2979: CALL_OW 52
// end ;
2983: GO 2908
2985: POP
2986: POP
// end else
2987: GO 3273
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2989: LD_VAR 0 5
2993: PUSH
2994: LD_INT 1
2996: ARRAY
2997: PUSH
2998: LD_INT 6
3000: PUSH
3001: LD_INT 7
3003: PUSH
3004: LD_INT 8
3006: PUSH
3007: LD_INT 10
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: IN
3016: IFFALSE 3126
// begin for i := 1 to 2 do
3018: LD_ADDR_VAR 0 4
3022: PUSH
3023: DOUBLE
3024: LD_INT 1
3026: DEC
3027: ST_TO_ADDR
3028: LD_INT 2
3030: PUSH
3031: FOR_TO
3032: IFFALSE 3122
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3034: LD_INT 0
3036: PPUSH
3037: LD_INT 4
3039: PPUSH
3040: LD_OWVAR 67
3044: PPUSH
3045: CALL_OW 380
// un := CreateHuman ;
3049: LD_ADDR_VAR 0 6
3053: PUSH
3054: CALL_OW 44
3058: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
3059: LD_ADDR_EXP 41
3063: PUSH
3064: LD_EXP 41
3068: PPUSH
3069: LD_EXP 41
3073: PUSH
3074: LD_INT 1
3076: PLUS
3077: PPUSH
3078: LD_VAR 0 6
3082: PPUSH
3083: CALL_OW 1
3087: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3088: LD_VAR 0 6
3092: PPUSH
3093: LD_VAR 0 5
3097: PUSH
3098: LD_INT 2
3100: ARRAY
3101: PPUSH
3102: LD_VAR 0 5
3106: PUSH
3107: LD_INT 3
3109: ARRAY
3110: PPUSH
3111: CALL_OW 428
3115: PPUSH
3116: CALL_OW 52
// end ;
3120: GO 3031
3122: POP
3123: POP
// end else
3124: GO 3273
// if b [ 1 ] = b_warehouse then
3126: LD_VAR 0 5
3130: PUSH
3131: LD_INT 1
3133: ARRAY
3134: PUSH
3135: LD_INT 1
3137: EQUAL
3138: IFFALSE 3273
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3140: LD_ADDR_VAR 0 4
3144: PUSH
3145: DOUBLE
3146: LD_INT 1
3148: DEC
3149: ST_TO_ADDR
3150: LD_INT 1
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: LD_OWVAR 67
3160: PLUS
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PUSH
3166: LD_EXP 10
3170: PUSH
3171: LD_INT 3
3173: GREATER
3174: PUSH
3175: LD_INT 1
3177: PLUS
3178: ARRAY
3179: PUSH
3180: FOR_TO
3181: IFFALSE 3271
// begin PrepareHuman ( false , 2 , Difficulty ) ;
3183: LD_INT 0
3185: PPUSH
3186: LD_INT 2
3188: PPUSH
3189: LD_OWVAR 67
3193: PPUSH
3194: CALL_OW 380
// un := CreateHuman ;
3198: LD_ADDR_VAR 0 6
3202: PUSH
3203: CALL_OW 44
3207: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
3208: LD_ADDR_EXP 39
3212: PUSH
3213: LD_EXP 39
3217: PPUSH
3218: LD_EXP 39
3222: PUSH
3223: LD_INT 1
3225: PLUS
3226: PPUSH
3227: LD_VAR 0 6
3231: PPUSH
3232: CALL_OW 1
3236: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3237: LD_VAR 0 6
3241: PPUSH
3242: LD_VAR 0 5
3246: PUSH
3247: LD_INT 2
3249: ARRAY
3250: PPUSH
3251: LD_VAR 0 5
3255: PUSH
3256: LD_INT 3
3258: ARRAY
3259: PPUSH
3260: CALL_OW 428
3264: PPUSH
3265: CALL_OW 52
// end ;
3269: GO 3180
3271: POP
3272: POP
// end ; end ;
3273: GO 2823
3275: POP
3276: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3277: LD_ADDR_VAR 0 3
3281: PUSH
3282: LD_INT 22
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: LD_INT 21
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: PPUSH
3306: CALL_OW 69
3310: ST_TO_ADDR
// for b in blist do
3311: LD_ADDR_VAR 0 5
3315: PUSH
3316: LD_VAR 0 3
3320: PUSH
3321: FOR_IN
3322: IFFALSE 3344
// SetBLevel ( b , 3 + Difficulty ) ;
3324: LD_VAR 0 5
3328: PPUSH
3329: LD_INT 3
3331: PUSH
3332: LD_OWVAR 67
3336: PLUS
3337: PPUSH
3338: CALL_OW 241
3342: GO 3321
3344: POP
3345: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3346: LD_ADDR_VAR 0 3
3350: PUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 3
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 30
3363: PUSH
3364: LD_INT 32
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PPUSH
3375: CALL_OW 69
3379: ST_TO_ADDR
// for b in blist do
3380: LD_ADDR_VAR 0 5
3384: PUSH
3385: LD_VAR 0 3
3389: PUSH
3390: FOR_IN
3391: IFFALSE 3500
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3393: LD_INT 0
3395: PPUSH
3396: LD_INT 1
3398: PPUSH
3399: LD_INT 1
3401: PUSH
3402: LD_OWVAR 67
3406: PLUS
3407: PPUSH
3408: CALL_OW 380
// un := CreateHuman ;
3412: LD_ADDR_VAR 0 6
3416: PUSH
3417: CALL_OW 44
3421: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3422: LD_ADDR_EXP 38
3426: PUSH
3427: LD_EXP 38
3431: PPUSH
3432: LD_EXP 38
3436: PUSH
3437: LD_INT 1
3439: PLUS
3440: PPUSH
3441: LD_VAR 0 6
3445: PPUSH
3446: CALL_OW 1
3450: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3451: LD_VAR 0 6
3455: PPUSH
3456: LD_VAR 0 5
3460: PPUSH
3461: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3465: LD_VAR 0 5
3469: PPUSH
3470: LD_INT 44
3472: PUSH
3473: LD_INT 43
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: LD_VAR 0 5
3484: PUSH
3485: LD_INT 2
3487: MOD
3488: PUSH
3489: LD_INT 1
3491: PLUS
3492: ARRAY
3493: PPUSH
3494: CALL_OW 431
// end ;
3498: GO 3390
3500: POP
3501: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3502: LD_ADDR_VAR 0 3
3506: PUSH
3507: LD_INT 22
3509: PUSH
3510: LD_INT 3
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PUSH
3517: LD_INT 30
3519: PUSH
3520: LD_INT 31
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: PPUSH
3531: CALL_OW 69
3535: ST_TO_ADDR
// for b in blist do
3536: LD_ADDR_VAR 0 5
3540: PUSH
3541: LD_VAR 0 3
3545: PUSH
3546: FOR_IN
3547: IFFALSE 3646
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3549: LD_INT 0
3551: PPUSH
3552: LD_INT 1
3554: PPUSH
3555: LD_INT 1
3557: PUSH
3558: LD_OWVAR 67
3562: PLUS
3563: PPUSH
3564: CALL_OW 380
// un := CreateHuman ;
3568: LD_ADDR_VAR 0 6
3572: PUSH
3573: CALL_OW 44
3577: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3578: LD_ADDR_EXP 38
3582: PUSH
3583: LD_EXP 38
3587: PPUSH
3588: LD_EXP 38
3592: PUSH
3593: LD_INT 1
3595: PLUS
3596: PPUSH
3597: LD_VAR 0 6
3601: PPUSH
3602: CALL_OW 1
3606: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3607: LD_VAR 0 6
3611: PPUSH
3612: LD_VAR 0 5
3616: PPUSH
3617: CALL_OW 254
3621: PUSH
3622: LD_INT 3
3624: PLUS
3625: PPUSH
3626: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3630: LD_VAR 0 6
3634: PPUSH
3635: LD_VAR 0 5
3639: PPUSH
3640: CALL_OW 52
// end ;
3644: GO 3546
3646: POP
3647: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: LD_INT 22
3655: PUSH
3656: LD_INT 3
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PUSH
3663: LD_INT 2
3665: PUSH
3666: LD_INT 30
3668: PUSH
3669: LD_INT 4
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: PUSH
3676: LD_INT 30
3678: PUSH
3679: LD_INT 5
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PPUSH
3695: CALL_OW 69
3699: ST_TO_ADDR
// for b in blist do
3700: LD_ADDR_VAR 0 5
3704: PUSH
3705: LD_VAR 0 3
3709: PUSH
3710: FOR_IN
3711: IFFALSE 3807
// begin for i := 1 to 2 do
3713: LD_ADDR_VAR 0 4
3717: PUSH
3718: DOUBLE
3719: LD_INT 1
3721: DEC
3722: ST_TO_ADDR
3723: LD_INT 2
3725: PUSH
3726: FOR_TO
3727: IFFALSE 3803
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3729: LD_INT 0
3731: PPUSH
3732: LD_INT 1
3734: PPUSH
3735: LD_INT 1
3737: PUSH
3738: LD_OWVAR 67
3742: PLUS
3743: PPUSH
3744: CALL_OW 380
// un := CreateHuman ;
3748: LD_ADDR_VAR 0 6
3752: PUSH
3753: CALL_OW 44
3757: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3758: LD_ADDR_EXP 38
3762: PUSH
3763: LD_EXP 38
3767: PPUSH
3768: LD_EXP 38
3772: PUSH
3773: LD_INT 1
3775: PLUS
3776: PPUSH
3777: LD_VAR 0 6
3781: PPUSH
3782: CALL_OW 1
3786: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3787: LD_VAR 0 6
3791: PPUSH
3792: LD_VAR 0 5
3796: PPUSH
3797: CALL_OW 52
// end ;
3801: GO 3726
3803: POP
3804: POP
// end ;
3805: GO 3710
3807: POP
3808: POP
// if ibrahimOnRuSide then
3809: LD_EXP 3
3813: IFFALSE 3911
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3815: LD_ADDR_EXP 22
3819: PUSH
3820: LD_STRING IbrahimRu
3822: PPUSH
3823: LD_INT 0
3825: PPUSH
3826: LD_STRING 
3828: PPUSH
3829: CALL 31349 0 3
3833: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3834: LD_EXP 22
3838: PPUSH
3839: LD_INT 121
3841: PPUSH
3842: LD_INT 78
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 48
// ComHold ( Ibrahim ) ;
3852: LD_EXP 22
3856: PPUSH
3857: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3861: LD_INT 1
3863: PPUSH
3864: LD_INT 1
3866: PPUSH
3867: LD_INT 2
3869: PPUSH
3870: CALL_OW 380
// ruSol := CreateHuman ;
3874: LD_ADDR_EXP 43
3878: PUSH
3879: CALL_OW 44
3883: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3884: LD_EXP 43
3888: PPUSH
3889: LD_INT 121
3891: PPUSH
3892: LD_INT 75
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL_OW 48
// ComHold ( ruSol ) ;
3902: LD_EXP 43
3906: PPUSH
3907: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3911: LD_ADDR_VAR 0 4
3915: PUSH
3916: DOUBLE
3917: LD_INT 1
3919: DEC
3920: ST_TO_ADDR
3921: LD_INT 2
3923: PUSH
3924: LD_INT 2
3926: PUSH
3927: LD_OWVAR 67
3931: PLUS
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: PUSH
3937: LD_EXP 10
3941: PUSH
3942: LD_INT 3
3944: GREATER
3945: PUSH
3946: LD_INT 1
3948: PLUS
3949: ARRAY
3950: PUSH
3951: FOR_TO
3952: IFFALSE 4021
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3954: LD_VAR 0 8
3958: PPUSH
3959: LD_INT 21
3961: PUSH
3962: LD_INT 23
3964: PUSH
3965: LD_INT 24
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: LIST
3972: PUSH
3973: LD_VAR 0 4
3977: PUSH
3978: LD_INT 3
3980: MOD
3981: PUSH
3982: LD_INT 1
3984: PLUS
3985: ARRAY
3986: PPUSH
3987: LD_INT 1
3989: PPUSH
3990: LD_INT 1
3992: PPUSH
3993: LD_INT 43
3995: PUSH
3996: LD_INT 44
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: CALL_OW 185
4019: GO 3951
4021: POP
4022: POP
// end ;
4023: LD_VAR 0 1
4027: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x , tag ;
4028: LD_EXP 42
4032: PUSH
4033: LD_EXP 4
4037: NOT
4038: AND
4039: IFFALSE 4527
4041: GO 4043
4043: DISABLE
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
4051: PPUSH
// begin enable ;
4052: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
4053: LD_ADDR_VAR 0 2
4057: PUSH
4058: LD_EXP 42
4062: PPUSH
4063: LD_INT 21
4065: PUSH
4066: LD_INT 2
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 72
4077: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
4078: LD_ADDR_VAR 0 4
4082: PUSH
4083: LD_INT 81
4085: PUSH
4086: LD_INT 3
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 2
4095: PUSH
4096: LD_INT 95
4098: PUSH
4099: LD_INT 4
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 95
4108: PUSH
4109: LD_INT 5
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 95
4118: PUSH
4119: LD_INT 6
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: LD_INT 95
4128: PUSH
4129: LD_INT 7
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 69
4151: ST_TO_ADDR
// for i in filter do
4152: LD_ADDR_VAR 0 1
4156: PUSH
4157: LD_VAR 0 2
4161: PUSH
4162: FOR_IN
4163: IFFALSE 4525
// begin tmp := IsDrivenBy ( i ) ;
4165: LD_ADDR_VAR 0 3
4169: PUSH
4170: LD_VAR 0 1
4174: PPUSH
4175: CALL_OW 311
4179: ST_TO_ADDR
// tag := GetTag ( i ) ;
4180: LD_ADDR_VAR 0 6
4184: PUSH
4185: LD_VAR 0 1
4189: PPUSH
4190: CALL_OW 110
4194: ST_TO_ADDR
// if not tmp then
4195: LD_VAR 0 3
4199: NOT
4200: IFFALSE 4204
// continue ;
4202: GO 4162
// if GetFuel ( i ) > 90 and tag = 2 then
4204: LD_VAR 0 1
4208: PPUSH
4209: CALL_OW 261
4213: PUSH
4214: LD_INT 90
4216: GREATER
4217: PUSH
4218: LD_VAR 0 6
4222: PUSH
4223: LD_INT 2
4225: EQUAL
4226: AND
4227: IFFALSE 4243
// SetTag ( i , 0 ) else
4229: LD_VAR 0 1
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 109
4241: GO 4286
// if GetTag ( i ) = 2 then
4243: LD_VAR 0 1
4247: PPUSH
4248: CALL_OW 110
4252: PUSH
4253: LD_INT 2
4255: EQUAL
4256: IFFALSE 4286
// begin x := rand ( 1 , 2 ) ;
4258: LD_ADDR_VAR 0 5
4262: PUSH
4263: LD_INT 1
4265: PPUSH
4266: LD_INT 2
4268: PPUSH
4269: CALL_OW 12
4273: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4274: LD_VAR 0 1
4278: PPUSH
4279: LD_INT 200
4281: PPUSH
4282: CALL_OW 172
// end ; if GetLives ( i ) >= 650 and not tag then
4286: LD_VAR 0 1
4290: PPUSH
4291: CALL_OW 256
4295: PUSH
4296: LD_INT 650
4298: GREATEREQUAL
4299: PUSH
4300: LD_VAR 0 6
4304: NOT
4305: AND
4306: IFFALSE 4332
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4308: LD_VAR 0 1
4312: PPUSH
4313: LD_VAR 0 4
4317: PPUSH
4318: LD_VAR 0 1
4322: PPUSH
4323: CALL_OW 74
4327: PPUSH
4328: CALL_OW 115
// if GetLives ( i ) < 650 and not tag then
4332: LD_VAR 0 1
4336: PPUSH
4337: CALL_OW 256
4341: PUSH
4342: LD_INT 650
4344: LESS
4345: PUSH
4346: LD_VAR 0 6
4350: NOT
4351: AND
4352: IFFALSE 4381
// begin SetTag ( i , 1 ) ;
4354: LD_VAR 0 1
4358: PPUSH
4359: LD_INT 1
4361: PPUSH
4362: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4366: LD_VAR 0 1
4370: PPUSH
4371: LD_INT 112
4373: PPUSH
4374: LD_INT 119
4376: PPUSH
4377: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4381: LD_VAR 0 1
4385: PPUSH
4386: CALL_OW 110
4390: PUSH
4391: LD_INT 1
4393: EQUAL
4394: PUSH
4395: LD_VAR 0 1
4399: PPUSH
4400: LD_INT 112
4402: PPUSH
4403: LD_INT 119
4405: PPUSH
4406: CALL_OW 297
4410: PUSH
4411: LD_INT 9
4413: LESS
4414: AND
4415: PUSH
4416: LD_VAR 0 3
4420: AND
4421: IFFALSE 4523
// begin ComExitVehicle ( tmp ) ;
4423: LD_VAR 0 3
4427: PPUSH
4428: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4432: LD_VAR 0 3
4436: PPUSH
4437: LD_VAR 0 1
4441: PPUSH
4442: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4446: LD_INT 35
4448: PPUSH
4449: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4453: LD_VAR 0 1
4457: PPUSH
4458: CALL_OW 256
4462: PUSH
4463: LD_INT 1000
4465: EQUAL
4466: IFFALSE 4446
// ComEnterUnit ( tmp , i ) ;
4468: LD_VAR 0 3
4472: PPUSH
4473: LD_VAR 0 1
4477: PPUSH
4478: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4482: LD_VAR 0 1
4486: PPUSH
4487: CALL_OW 261
4491: PUSH
4492: LD_INT 50
4494: LESSEQUAL
4495: IFFALSE 4511
// SetTag ( i , 2 ) else
4497: LD_VAR 0 1
4501: PPUSH
4502: LD_INT 2
4504: PPUSH
4505: CALL_OW 109
4509: GO 4523
// SetTag ( i , 0 ) ;
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_INT 0
4518: PPUSH
4519: CALL_OW 109
// end ; end ;
4523: GO 4162
4525: POP
4526: POP
// end ;
4527: PPOPN 6
4529: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4530: LD_EXP 4
4534: NOT
4535: PUSH
4536: LD_EXP 39
4540: AND
4541: IFFALSE 4802
4543: GO 4545
4545: DISABLE
4546: LD_INT 0
4548: PPUSH
4549: PPUSH
4550: PPUSH
4551: PPUSH
// begin enable ;
4552: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_INT 3
4560: PPUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 3
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 21
4573: PUSH
4574: LD_INT 3
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 3
4583: PUSH
4584: LD_INT 24
4586: PUSH
4587: LD_INT 1000
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: LIST
4602: PPUSH
4603: CALL_OW 70
4607: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4608: LD_ADDR_VAR 0 3
4612: PUSH
4613: LD_EXP 39
4617: PPUSH
4618: LD_INT 50
4620: PUSH
4621: EMPTY
4622: LIST
4623: PPUSH
4624: CALL_OW 72
4628: ST_TO_ADDR
// if filter and tmp then
4629: LD_VAR 0 2
4633: PUSH
4634: LD_VAR 0 3
4638: AND
4639: IFFALSE 4731
// begin for i in tmp do
4641: LD_ADDR_VAR 0 1
4645: PUSH
4646: LD_VAR 0 3
4650: PUSH
4651: FOR_IN
4652: IFFALSE 4727
// begin if GetTag ( i ) = tEscape then
4654: LD_VAR 0 1
4658: PPUSH
4659: CALL_OW 110
4663: PUSH
4664: LD_EXP 18
4668: EQUAL
4669: IFFALSE 4673
// continue ;
4671: GO 4651
// if IsInUnit ( i ) then
4673: LD_VAR 0 1
4677: PPUSH
4678: CALL_OW 310
4682: IFFALSE 4695
// ComExitBuilding ( i ) else
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 122
4693: GO 4725
// if not HasTask ( i ) then
4695: LD_VAR 0 1
4699: PPUSH
4700: CALL_OW 314
4704: NOT
4705: IFFALSE 4725
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4707: LD_VAR 0 1
4711: PPUSH
4712: LD_VAR 0 2
4716: PUSH
4717: LD_INT 1
4719: ARRAY
4720: PPUSH
4721: CALL_OW 130
// end ;
4725: GO 4651
4727: POP
4728: POP
// end else
4729: GO 4802
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4731: LD_VAR 0 3
4735: PPUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 54
4741: PUSH
4742: EMPTY
4743: LIST
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PPUSH
4749: CALL_OW 72
4753: IFFALSE 4802
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4755: LD_ADDR_VAR 0 1
4759: PUSH
4760: LD_VAR 0 3
4764: PPUSH
4765: LD_INT 3
4767: PUSH
4768: LD_INT 54
4770: PUSH
4771: EMPTY
4772: LIST
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PPUSH
4778: CALL_OW 72
4782: PUSH
4783: FOR_IN
4784: IFFALSE 4800
// ComEnterUnit ( i , ruMainBase ) ;
4786: LD_VAR 0 1
4790: PPUSH
4791: LD_INT 200
4793: PPUSH
4794: CALL_OW 120
4798: GO 4783
4800: POP
4801: POP
// end ; end ;
4802: PPOPN 4
4804: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4805: LD_EXP 4
4809: NOT
4810: PUSH
4811: LD_EXP 41
4815: AND
4816: IFFALSE 5095
4818: GO 4820
4820: DISABLE
4821: LD_INT 0
4823: PPUSH
4824: PPUSH
4825: PPUSH
4826: PPUSH
// begin enable ;
4827: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4828: LD_ADDR_VAR 0 2
4832: PUSH
4833: LD_INT 3
4835: PPUSH
4836: LD_INT 22
4838: PUSH
4839: LD_INT 3
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 21
4848: PUSH
4849: LD_INT 1
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 3
4858: PUSH
4859: LD_INT 24
4861: PUSH
4862: LD_INT 1000
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: PPUSH
4878: CALL_OW 70
4882: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4883: LD_ADDR_VAR 0 3
4887: PUSH
4888: LD_EXP 41
4892: PPUSH
4893: LD_INT 50
4895: PUSH
4896: EMPTY
4897: LIST
4898: PPUSH
4899: CALL_OW 72
4903: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4904: LD_ADDR_VAR 0 4
4908: PUSH
4909: LD_INT 118
4911: PPUSH
4912: LD_INT 121
4914: PPUSH
4915: CALL_OW 428
4919: ST_TO_ADDR
// if filter and tmp then
4920: LD_VAR 0 2
4924: PUSH
4925: LD_VAR 0 3
4929: AND
4930: IFFALSE 5022
// begin for i in tmp do
4932: LD_ADDR_VAR 0 1
4936: PUSH
4937: LD_VAR 0 3
4941: PUSH
4942: FOR_IN
4943: IFFALSE 5018
// begin if GetTag ( i ) = tEscape then
4945: LD_VAR 0 1
4949: PPUSH
4950: CALL_OW 110
4954: PUSH
4955: LD_EXP 18
4959: EQUAL
4960: IFFALSE 4964
// continue ;
4962: GO 4942
// if IsInUnit ( i ) then
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL_OW 310
4973: IFFALSE 4986
// ComExitBuilding ( i ) else
4975: LD_VAR 0 1
4979: PPUSH
4980: CALL_OW 122
4984: GO 5016
// if not HasTask ( i ) then
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 314
4995: NOT
4996: IFFALSE 5016
// ComHeal ( i , filter [ 1 ] ) ;
4998: LD_VAR 0 1
5002: PPUSH
5003: LD_VAR 0 2
5007: PUSH
5008: LD_INT 1
5010: ARRAY
5011: PPUSH
5012: CALL_OW 128
// end ;
5016: GO 4942
5018: POP
5019: POP
// end else
5020: GO 5095
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
5022: LD_VAR 0 3
5026: PPUSH
5027: LD_INT 3
5029: PUSH
5030: LD_INT 54
5032: PUSH
5033: EMPTY
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PPUSH
5040: CALL_OW 72
5044: IFFALSE 5095
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
5046: LD_ADDR_VAR 0 1
5050: PUSH
5051: LD_VAR 0 3
5055: PPUSH
5056: LD_INT 3
5058: PUSH
5059: LD_INT 54
5061: PUSH
5062: EMPTY
5063: LIST
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PPUSH
5069: CALL_OW 72
5073: PUSH
5074: FOR_IN
5075: IFFALSE 5093
// ComEnterUnit ( i , lab ) ;
5077: LD_VAR 0 1
5081: PPUSH
5082: LD_VAR 0 4
5086: PPUSH
5087: CALL_OW 120
5091: GO 5074
5093: POP
5094: POP
// end ; end ; end_of_file
5095: PPOPN 4
5097: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5098: LD_VAR 0 1
5102: PPUSH
5103: CALL 26455 0 1
// if un = Heike then
5107: LD_VAR 0 1
5111: PUSH
5112: LD_EXP 19
5116: EQUAL
5117: IFFALSE 5126
// YouLost ( Heike ) ;
5119: LD_STRING Heike
5121: PPUSH
5122: CALL_OW 104
// if un in ruEng then
5126: LD_VAR 0 1
5130: PUSH
5131: LD_EXP 39
5135: IN
5136: IFFALSE 5154
// ruEng := ruEng diff un ;
5138: LD_ADDR_EXP 39
5142: PUSH
5143: LD_EXP 39
5147: PUSH
5148: LD_VAR 0 1
5152: DIFF
5153: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
5154: LD_VAR 0 1
5158: PUSH
5159: LD_INT 22
5161: PUSH
5162: LD_INT 2
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 21
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 23
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: PPUSH
5194: CALL_OW 69
5198: IN
5199: IFFALSE 5215
// loseCounter := loseCounter + 1 ;
5201: LD_ADDR_EXP 6
5205: PUSH
5206: LD_EXP 6
5210: PUSH
5211: LD_INT 1
5213: PLUS
5214: ST_TO_ADDR
// end ;
5215: PPOPN 1
5217: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
5218: LD_INT 0
5220: PPUSH
5221: PPUSH
// begin if un in ruMobile then
5222: LD_VAR 0 2
5226: PUSH
5227: LD_EXP 42
5231: IN
5232: IFFALSE 5391
// begin ruMobile := ruMobile diff un ;
5234: LD_ADDR_EXP 42
5238: PUSH
5239: LD_EXP 42
5243: PUSH
5244: LD_VAR 0 2
5248: DIFF
5249: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
5250: LD_ADDR_VAR 0 5
5254: PUSH
5255: LD_VAR 0 2
5259: PPUSH
5260: CALL_OW 264
5264: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5265: LD_ADDR_VAR 0 6
5269: PUSH
5270: LD_INT 110
5272: PPUSH
5273: LD_INT 126
5275: PPUSH
5276: CALL_OW 428
5280: ST_TO_ADDR
// if not driver or not fac then
5281: LD_VAR 0 1
5285: NOT
5286: PUSH
5287: LD_VAR 0 6
5291: NOT
5292: OR
5293: IFFALSE 5297
// exit ;
5295: GO 5391
// AddComMoveXY ( driver , 111 , 121 ) ;
5297: LD_VAR 0 1
5301: PPUSH
5302: LD_INT 111
5304: PPUSH
5305: LD_INT 121
5307: PPUSH
5308: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5312: LD_VAR 0 1
5316: PPUSH
5317: LD_VAR 0 6
5321: PPUSH
5322: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5326: LD_INT 35
5328: PPUSH
5329: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5333: LD_VAR 0 1
5337: PPUSH
5338: CALL_OW 301
5342: PUSH
5343: LD_VAR 0 1
5347: PPUSH
5348: CALL_OW 310
5352: OR
5353: IFFALSE 5326
// if IsDead ( driver ) then
5355: LD_VAR 0 1
5359: PPUSH
5360: CALL_OW 301
5364: IFFALSE 5368
// exit ;
5366: GO 5391
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5368: LD_VAR 0 6
5372: PPUSH
5373: LD_INT 21
5375: PPUSH
5376: LD_INT 1
5378: PPUSH
5379: LD_INT 1
5381: PPUSH
5382: LD_VAR 0 5
5386: PPUSH
5387: CALL_OW 185
// end ; end ;
5391: PPOPN 6
5393: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5394: LD_VAR 0 1
5398: PPUSH
5399: LD_VAR 0 2
5403: PPUSH
5404: CALL 26575 0 2
// if GetSide ( fac ) = 3 then
5408: LD_VAR 0 2
5412: PPUSH
5413: CALL_OW 255
5417: PUSH
5418: LD_INT 3
5420: EQUAL
5421: IFFALSE 5467
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5423: LD_ADDR_EXP 42
5427: PUSH
5428: LD_EXP 42
5432: PPUSH
5433: LD_EXP 42
5437: PUSH
5438: LD_INT 1
5440: PLUS
5441: PPUSH
5442: LD_VAR 0 1
5446: PPUSH
5447: CALL_OW 1
5451: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5452: LD_VAR 0 1
5456: PPUSH
5457: LD_INT 110
5459: PPUSH
5460: LD_INT 117
5462: PPUSH
5463: CALL_OW 171
// end ; end ;
5467: PPOPN 2
5469: END
// on LeaveBuilding ( b , un ) do var barracks ;
5470: LD_INT 0
5472: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5473: LD_VAR 0 1
5477: PUSH
5478: LD_INT 130
5480: PPUSH
5481: LD_INT 17
5483: PPUSH
5484: CALL_OW 428
5488: PUSH
5489: LD_INT 138
5491: PPUSH
5492: LD_INT 22
5494: PPUSH
5495: CALL_OW 428
5499: PUSH
5500: LD_INT 123
5502: PPUSH
5503: LD_INT 17
5505: PPUSH
5506: CALL_OW 428
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: LIST
5515: IN
5516: IFFALSE 5540
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5518: LD_VAR 0 2
5522: PPUSH
5523: LD_INT 135
5525: PPUSH
5526: LD_INT 31
5528: PPUSH
5529: CALL_OW 428
5533: PPUSH
5534: CALL_OW 180
// exit ;
5538: GO 5814
// end ; if b = HexInfo ( 135 , 31 ) then
5540: LD_VAR 0 1
5544: PUSH
5545: LD_INT 135
5547: PPUSH
5548: LD_INT 31
5550: PPUSH
5551: CALL_OW 428
5555: EQUAL
5556: IFFALSE 5628
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5558: LD_VAR 0 2
5562: PPUSH
5563: LD_INT 106
5565: PPUSH
5566: LD_INT 51
5568: PPUSH
5569: CALL_OW 428
5573: PPUSH
5574: CALL_OW 180
// if not explodeFirstDepot then
5578: LD_EXP 12
5582: NOT
5583: IFFALSE 5626
// begin explodeFirstDepot := true ;
5585: LD_ADDR_EXP 12
5589: PUSH
5590: LD_INT 1
5592: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5593: LD_INT 525
5595: PPUSH
5596: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5600: LD_INT 127
5602: PPUSH
5603: LD_INT 27
5605: PPUSH
5606: LD_INT 1
5608: PPUSH
5609: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5613: LD_INT 125
5615: PPUSH
5616: LD_INT 29
5618: PPUSH
5619: LD_INT 1
5621: PPUSH
5622: CALL_OW 453
// end ; exit ;
5626: GO 5814
// end ; if b = HexInfo ( 106 , 51 ) then
5628: LD_VAR 0 1
5632: PUSH
5633: LD_INT 106
5635: PPUSH
5636: LD_INT 51
5638: PPUSH
5639: CALL_OW 428
5643: EQUAL
5644: IFFALSE 5744
// begin AddComMoveXY ( un , 106 , 93 ) ;
5646: LD_VAR 0 2
5650: PPUSH
5651: LD_INT 106
5653: PPUSH
5654: LD_INT 93
5656: PPUSH
5657: CALL_OW 171
// if not explodeSecondDepot then
5661: LD_EXP 13
5665: NOT
5666: IFFALSE 5742
// begin explodeSecondDepot := true ;
5668: LD_ADDR_EXP 13
5672: PUSH
5673: LD_INT 1
5675: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5676: LD_INT 420
5678: PPUSH
5679: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5683: LD_INT 111
5685: PPUSH
5686: LD_INT 75
5688: PPUSH
5689: LD_INT 1
5691: PPUSH
5692: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5696: LD_INT 111
5698: PPUSH
5699: LD_INT 75
5701: PPUSH
5702: LD_INT 1
5704: PPUSH
5705: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5709: LD_INT 108
5711: PPUSH
5712: LD_INT 69
5714: PPUSH
5715: LD_INT 1
5717: PPUSH
5718: CALL_OW 453
// wait ( 0 0$2 ) ;
5722: LD_INT 70
5724: PPUSH
5725: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5729: LD_INT 94
5731: PPUSH
5732: LD_INT 65
5734: PPUSH
5735: LD_INT 1
5737: PPUSH
5738: CALL_OW 453
// end ; exit ;
5742: GO 5814
// end ; if GetBType ( b ) = b_bunker then
5744: LD_VAR 0 1
5748: PPUSH
5749: CALL_OW 266
5753: PUSH
5754: LD_INT 32
5756: EQUAL
5757: IFFALSE 5814
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5759: LD_ADDR_VAR 0 3
5763: PUSH
5764: LD_VAR 0 2
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: CALL 1016 0 2
5776: ST_TO_ADDR
// if barracks then
5777: LD_VAR 0 3
5781: IFFALSE 5799
// AddComEnterUnit ( un , barracks ) else
5783: LD_VAR 0 2
5787: PPUSH
5788: LD_VAR 0 3
5792: PPUSH
5793: CALL_OW 180
5797: GO 5814
// AddComMoveXY ( un , 116 , 110 ) ;
5799: LD_VAR 0 2
5803: PPUSH
5804: LD_INT 116
5806: PPUSH
5807: LD_INT 110
5809: PPUSH
5810: CALL_OW 171
// end ; end ;
5814: PPOPN 3
5816: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5817: LD_VAR 0 1
5821: PUSH
5822: LD_EXP 24
5826: EQUAL
5827: PUSH
5828: LD_VAR 0 2
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: LD_INT 6
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: IN
5843: AND
5844: IFFALSE 5875
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5846: LD_ADDR_EXP 8
5850: PUSH
5851: LD_VAR 0 1
5855: PPUSH
5856: CALL_OW 250
5860: PUSH
5861: LD_VAR 0 1
5865: PPUSH
5866: CALL_OW 251
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: ST_TO_ADDR
// end ;
5875: PPOPN 3
5877: END
// every 0 0$1 trigger activeInvincible do var i ;
5878: LD_EXP 17
5882: IFFALSE 5951
5884: GO 5886
5886: DISABLE
5887: LD_INT 0
5889: PPUSH
// begin enable ;
5890: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
5891: LD_ADDR_VAR 0 1
5895: PUSH
5896: LD_INT 22
5898: PUSH
5899: LD_INT 2
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: PUSH
5906: LD_INT 3
5908: PUSH
5909: LD_INT 24
5911: PUSH
5912: LD_INT 1000
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PPUSH
5927: CALL_OW 69
5931: PUSH
5932: FOR_IN
5933: IFFALSE 5949
// SetLives ( i , 1000 ) ;
5935: LD_VAR 0 1
5939: PPUSH
5940: LD_INT 1000
5942: PPUSH
5943: CALL_OW 234
5947: GO 5932
5949: POP
5950: POP
// end ; end_of_file
5951: PPOPN 1
5953: END
// export function Action ; var i , j , un , veh , tmp , rutmp ; begin
5954: LD_INT 0
5956: PPUSH
5957: PPUSH
5958: PPUSH
5959: PPUSH
5960: PPUSH
5961: PPUSH
5962: PPUSH
// Video ( true ) ;
5963: LD_INT 1
5965: PPUSH
5966: CALL 69012 0 1
// ChangeSideFog ( 5 , 2 ) ;
5970: LD_INT 5
5972: PPUSH
5973: LD_INT 2
5975: PPUSH
5976: CALL_OW 343
// music_nat := 4 ;
5980: LD_ADDR_OWVAR 71
5984: PUSH
5985: LD_INT 4
5987: ST_TO_ADDR
// music_class := music_combat ;
5988: LD_ADDR_OWVAR 72
5992: PUSH
5993: LD_INT 1
5995: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5996: LD_INT 133
5998: PPUSH
5999: LD_INT 2
6001: PPUSH
6002: LD_INT 2
6004: PPUSH
6005: LD_INT 10
6007: PPUSH
6008: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
6012: LD_INT 133
6014: PPUSH
6015: LD_INT 2
6017: PPUSH
6018: CALL_OW 86
// wait ( 0 0$1 ) ;
6022: LD_INT 35
6024: PPUSH
6025: CALL_OW 67
// uc_side := 6 ;
6029: LD_ADDR_OWVAR 20
6033: PUSH
6034: LD_INT 6
6036: ST_TO_ADDR
// uc_nation := 3 ;
6037: LD_ADDR_OWVAR 21
6041: PUSH
6042: LD_INT 3
6044: ST_TO_ADDR
// rutmp := [ ] ;
6045: LD_ADDR_VAR 0 7
6049: PUSH
6050: EMPTY
6051: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
6052: LD_INT 6
6054: PPUSH
6055: LD_INT 3
6057: PPUSH
6058: LD_INT 21
6060: PPUSH
6061: LD_INT 1
6063: PPUSH
6064: LD_INT 1
6066: PPUSH
6067: LD_INT 44
6069: PPUSH
6070: LD_INT 66
6072: PPUSH
6073: CALL 344 0 7
// veh := CreateVehicle ;
6077: LD_ADDR_VAR 0 5
6081: PUSH
6082: CALL_OW 45
6086: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6087: LD_VAR 0 5
6091: PPUSH
6092: LD_INT 3
6094: PPUSH
6095: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6099: LD_VAR 0 5
6103: PPUSH
6104: LD_INT 8
6106: PPUSH
6107: LD_INT 0
6109: PPUSH
6110: CALL_OW 49
// SetLives ( veh , 500 ) ;
6114: LD_VAR 0 5
6118: PPUSH
6119: LD_INT 500
6121: PPUSH
6122: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
6126: LD_INT 0
6128: PPUSH
6129: LD_INT 3
6131: PPUSH
6132: LD_INT 3
6134: PPUSH
6135: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6139: CALL_OW 44
6143: PPUSH
6144: LD_VAR 0 5
6148: PPUSH
6149: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
6153: LD_VAR 0 5
6157: PPUSH
6158: LD_INT 133
6160: PPUSH
6161: LD_INT 11
6163: PPUSH
6164: CALL_OW 111
// rutmp := [ veh ] ;
6168: LD_ADDR_VAR 0 7
6172: PUSH
6173: LD_VAR 0 5
6177: PUSH
6178: EMPTY
6179: LIST
6180: ST_TO_ADDR
// for i := 1 to 4 do
6181: LD_ADDR_VAR 0 2
6185: PUSH
6186: DOUBLE
6187: LD_INT 1
6189: DEC
6190: ST_TO_ADDR
6191: LD_INT 4
6193: PUSH
6194: FOR_TO
6195: IFFALSE 6302
// begin PrepareHuman ( false , i , 2 ) ;
6197: LD_INT 0
6199: PPUSH
6200: LD_VAR 0 2
6204: PPUSH
6205: LD_INT 2
6207: PPUSH
6208: CALL_OW 380
// un := CreateHuman ;
6212: LD_ADDR_VAR 0 4
6216: PUSH
6217: CALL_OW 44
6221: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6222: LD_VAR 0 4
6226: PPUSH
6227: LD_INT 3
6229: PPUSH
6230: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6234: LD_VAR 0 4
6238: PPUSH
6239: LD_INT 8
6241: PPUSH
6242: LD_INT 0
6244: PPUSH
6245: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
6249: LD_ADDR_VAR 0 7
6253: PUSH
6254: LD_VAR 0 7
6258: PPUSH
6259: LD_VAR 0 7
6263: PUSH
6264: LD_INT 1
6266: PLUS
6267: PPUSH
6268: LD_VAR 0 4
6272: PPUSH
6273: CALL_OW 1
6277: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
6278: LD_VAR 0 4
6282: PPUSH
6283: LD_INT 133
6285: PPUSH
6286: LD_INT 11
6288: PPUSH
6289: CALL_OW 111
// wait ( 0 0$0.5 ) ;
6293: LD_INT 18
6295: PPUSH
6296: CALL_OW 67
// end ;
6300: GO 6194
6302: POP
6303: POP
// for i in rutmp do
6304: LD_ADDR_VAR 0 2
6308: PUSH
6309: LD_VAR 0 7
6313: PUSH
6314: FOR_IN
6315: IFFALSE 6364
// begin AddComMoveXY ( i , 99 , 65 ) ;
6317: LD_VAR 0 2
6321: PPUSH
6322: LD_INT 99
6324: PPUSH
6325: LD_INT 65
6327: PPUSH
6328: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
6332: LD_VAR 0 2
6336: PPUSH
6337: LD_INT 76
6339: PPUSH
6340: LD_INT 108
6342: PPUSH
6343: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6347: LD_VAR 0 2
6351: PPUSH
6352: LD_INT 92
6354: PPUSH
6355: LD_INT 176
6357: PPUSH
6358: CALL_OW 171
// end ;
6362: GO 6314
6364: POP
6365: POP
// wait ( 0 0$10 ) ;
6366: LD_INT 350
6368: PPUSH
6369: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6373: LD_ADDR_VAR 0 6
6377: PUSH
6378: LD_EXP 19
6382: PUSH
6383: LD_EXP 20
6387: PUSH
6388: LD_EXP 21
6392: PUSH
6393: LD_EXP 22
6397: PUSH
6398: LD_EXP 23
6402: PUSH
6403: LD_EXP 24
6407: PUSH
6408: LD_EXP 25
6412: PUSH
6413: LD_EXP 26
6417: PUSH
6418: LD_EXP 28
6422: PUSH
6423: LD_EXP 29
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: LD_EXP 30
6444: UNION
6445: ST_TO_ADDR
// tmp := tmp diff 0 ;
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: LD_VAR 0 6
6455: PUSH
6456: LD_INT 0
6458: DIFF
6459: ST_TO_ADDR
// for i in heikeVehicles do
6460: LD_ADDR_VAR 0 2
6464: PUSH
6465: LD_EXP 31
6469: PUSH
6470: FOR_IN
6471: IFFALSE 6890
// begin if not tmp then
6473: LD_VAR 0 6
6477: NOT
6478: IFFALSE 6482
// continue ;
6480: GO 6470
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6482: LD_INT 2
6484: PPUSH
6485: LD_VAR 0 2
6489: PUSH
6490: LD_INT 5
6492: ARRAY
6493: PPUSH
6494: LD_VAR 0 2
6498: PUSH
6499: LD_INT 1
6501: ARRAY
6502: PPUSH
6503: LD_VAR 0 2
6507: PUSH
6508: LD_INT 2
6510: ARRAY
6511: PPUSH
6512: LD_VAR 0 2
6516: PUSH
6517: LD_INT 3
6519: ARRAY
6520: PPUSH
6521: LD_VAR 0 2
6525: PUSH
6526: LD_INT 4
6528: ARRAY
6529: PPUSH
6530: LD_INT 34
6532: PPUSH
6533: CALL 344 0 7
// veh := CreateVehicle ;
6537: LD_ADDR_VAR 0 5
6541: PUSH
6542: CALL_OW 45
6546: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6547: LD_VAR 0 2
6551: PUSH
6552: LD_INT 4
6554: ARRAY
6555: PUSH
6556: LD_INT 51
6558: PUSH
6559: LD_INT 32
6561: PUSH
6562: LD_INT 12
6564: PUSH
6565: LD_INT 89
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: IN
6574: IFFALSE 6654
// begin if i [ 7 ] [ 1 ] then
6576: LD_VAR 0 2
6580: PUSH
6581: LD_INT 7
6583: ARRAY
6584: PUSH
6585: LD_INT 1
6587: ARRAY
6588: IFFALSE 6615
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6590: LD_VAR 0 5
6594: PPUSH
6595: LD_INT 1
6597: PPUSH
6598: LD_VAR 0 2
6602: PUSH
6603: LD_INT 7
6605: ARRAY
6606: PUSH
6607: LD_INT 1
6609: ARRAY
6610: PPUSH
6611: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6615: LD_VAR 0 2
6619: PUSH
6620: LD_INT 7
6622: ARRAY
6623: PUSH
6624: LD_INT 2
6626: ARRAY
6627: IFFALSE 6654
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6629: LD_VAR 0 5
6633: PPUSH
6634: LD_INT 2
6636: PPUSH
6637: LD_VAR 0 2
6641: PUSH
6642: LD_INT 7
6644: ARRAY
6645: PUSH
6646: LD_INT 2
6648: ARRAY
6649: PPUSH
6650: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6654: LD_VAR 0 5
6658: PPUSH
6659: LD_INT 3
6661: PPUSH
6662: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6666: LD_VAR 0 5
6670: PPUSH
6671: LD_INT 8
6673: PPUSH
6674: LD_INT 0
6676: PPUSH
6677: CALL_OW 49
// for j := 1 to tmp do
6681: LD_ADDR_VAR 0 3
6685: PUSH
6686: DOUBLE
6687: LD_INT 1
6689: DEC
6690: ST_TO_ADDR
6691: LD_VAR 0 6
6695: PUSH
6696: FOR_TO
6697: IFFALSE 6770
// begin if i [ 8 ] = GetClass ( tmp [ j ] ) then
6699: LD_VAR 0 2
6703: PUSH
6704: LD_INT 8
6706: ARRAY
6707: PUSH
6708: LD_VAR 0 6
6712: PUSH
6713: LD_VAR 0 3
6717: ARRAY
6718: PPUSH
6719: CALL_OW 257
6723: EQUAL
6724: IFFALSE 6768
// begin PlaceHumanInUnit ( tmp [ j ] , veh ) ;
6726: LD_VAR 0 6
6730: PUSH
6731: LD_VAR 0 3
6735: ARRAY
6736: PPUSH
6737: LD_VAR 0 5
6741: PPUSH
6742: CALL_OW 52
// tmp := Delete ( tmp , j ) ;
6746: LD_ADDR_VAR 0 6
6750: PUSH
6751: LD_VAR 0 6
6755: PPUSH
6756: LD_VAR 0 3
6760: PPUSH
6761: CALL_OW 3
6765: ST_TO_ADDR
// break ;
6766: GO 6770
// end ; end ;
6768: GO 6696
6770: POP
6771: POP
// if IsEmpty ( veh ) then
6772: LD_VAR 0 5
6776: PPUSH
6777: CALL 33473 0 1
6781: IFFALSE 6819
// begin PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6783: LD_VAR 0 6
6787: PUSH
6788: LD_INT 1
6790: ARRAY
6791: PPUSH
6792: LD_VAR 0 5
6796: PPUSH
6797: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6801: LD_ADDR_VAR 0 6
6805: PUSH
6806: LD_VAR 0 6
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: CALL_OW 3
6818: ST_TO_ADDR
// end ; if GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6819: LD_VAR 0 5
6823: PPUSH
6824: CALL_OW 264
6828: PUSH
6829: LD_INT 51
6831: PUSH
6832: LD_INT 32
6834: PUSH
6835: LD_INT 12
6837: PUSH
6838: LD_INT 89
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: IN
6847: IFFALSE 6866
// ComMoveXY ( veh , 130 , 8 ) else
6849: LD_VAR 0 5
6853: PPUSH
6854: LD_INT 130
6856: PPUSH
6857: LD_INT 8
6859: PPUSH
6860: CALL_OW 111
6864: GO 6881
// ComMoveXY ( veh , 134 , 15 ) ;
6866: LD_VAR 0 5
6870: PPUSH
6871: LD_INT 134
6873: PPUSH
6874: LD_INT 15
6876: PPUSH
6877: CALL_OW 111
// wait ( 0 0$3 ) ;
6881: LD_INT 105
6883: PPUSH
6884: CALL_OW 67
// end ;
6888: GO 6470
6890: POP
6891: POP
// if tmp then
6892: LD_VAR 0 6
6896: IFFALSE 6952
// for i in tmp do
6898: LD_ADDR_VAR 0 2
6902: PUSH
6903: LD_VAR 0 6
6907: PUSH
6908: FOR_IN
6909: IFFALSE 6950
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6911: LD_VAR 0 2
6915: PPUSH
6916: LD_INT 10
6918: PPUSH
6919: LD_INT 0
6921: PPUSH
6922: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6926: LD_VAR 0 2
6930: PPUSH
6931: LD_INT 146
6933: PPUSH
6934: LD_INT 7
6936: PPUSH
6937: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6941: LD_INT 18
6943: PPUSH
6944: CALL_OW 67
// end ;
6948: GO 6908
6950: POP
6951: POP
// if heikeApes then
6952: LD_EXP 32
6956: IFFALSE 7012
// for i in heikeApes do
6958: LD_ADDR_VAR 0 2
6962: PUSH
6963: LD_EXP 32
6967: PUSH
6968: FOR_IN
6969: IFFALSE 7010
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6971: LD_VAR 0 2
6975: PPUSH
6976: LD_INT 10
6978: PPUSH
6979: LD_INT 0
6981: PPUSH
6982: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6986: LD_VAR 0 2
6990: PPUSH
6991: LD_INT 146
6993: PPUSH
6994: LD_INT 7
6996: PPUSH
6997: CALL_OW 114
// wait ( 0 0$0.5 ) ;
7001: LD_INT 18
7003: PPUSH
7004: CALL_OW 67
// end ;
7008: GO 6968
7010: POP
7011: POP
// DialogueOn ;
7012: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
7016: LD_EXP 19
7020: PPUSH
7021: LD_STRING DH-outpost-a-1
7023: PPUSH
7024: CALL_OW 88
// DialogueOff ;
7028: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
7032: LD_INT 133
7034: PPUSH
7035: LD_INT 2
7037: PPUSH
7038: LD_INT 2
7040: PPUSH
7041: CALL_OW 331
// activeInvincible := false ;
7045: LD_ADDR_EXP 17
7049: PUSH
7050: LD_INT 0
7052: ST_TO_ADDR
// Video ( false ) ;
7053: LD_INT 0
7055: PPUSH
7056: CALL 69012 0 1
// music_nat := 0 ;
7060: LD_ADDR_OWVAR 71
7064: PUSH
7065: LD_INT 0
7067: ST_TO_ADDR
// music_class := 0 ;
7068: LD_ADDR_OWVAR 72
7072: PUSH
7073: LD_INT 0
7075: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
7076: LD_STRING Outposts
7078: PPUSH
7079: CALL_OW 337
// SaveForQuickRestart ;
7083: CALL_OW 22
// end ;
7087: LD_VAR 0 1
7091: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
7092: LD_INT 22
7094: PUSH
7095: LD_INT 2
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: LD_INT 91
7104: PUSH
7105: LD_EXP 22
7109: PUSH
7110: LD_INT 20
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: LIST
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PPUSH
7122: CALL_OW 69
7126: PUSH
7127: LD_EXP 3
7131: AND
7132: PUSH
7133: LD_EXP 22
7137: PPUSH
7138: CALL_OW 302
7142: AND
7143: IFFALSE 7390
7145: GO 7147
7147: DISABLE
7148: LD_INT 0
7150: PPUSH
7151: PPUSH
7152: PPUSH
7153: PPUSH
// begin IbrahimBetrayal ;
7154: CALL 7393 0 0
// repeat wait ( 0 0$1 ) ;
7158: LD_INT 35
7160: PPUSH
7161: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
7165: LD_EXP 22
7169: PPUSH
7170: CALL_OW 301
7174: PUSH
7175: LD_INT 22
7177: PUSH
7178: LD_INT 2
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 91
7187: PUSH
7188: LD_EXP 22
7192: PUSH
7193: LD_INT 6
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PPUSH
7205: CALL_OW 69
7209: PUSH
7210: LD_EXP 22
7214: PPUSH
7215: CALL_OW 302
7219: AND
7220: OR
7221: IFFALSE 7158
// if IsDead ( Ibrahim ) then
7223: LD_EXP 22
7227: PPUSH
7228: CALL_OW 301
7232: IFFALSE 7236
// exit ;
7234: GO 7390
// x := GetX ( Ibrahim ) ;
7236: LD_ADDR_VAR 0 1
7240: PUSH
7241: LD_EXP 22
7245: PPUSH
7246: CALL_OW 250
7250: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
7251: LD_ADDR_VAR 0 2
7255: PUSH
7256: LD_EXP 22
7260: PPUSH
7261: CALL_OW 251
7265: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
7266: LD_ADDR_VAR 0 3
7270: PUSH
7271: LD_EXP 22
7275: PPUSH
7276: CALL_OW 254
7280: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
7281: LD_ADDR_VAR 0 4
7285: PUSH
7286: LD_EXP 22
7290: PPUSH
7291: CALL_OW 256
7295: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
7296: LD_EXP 22
7300: PPUSH
7301: CALL_OW 64
// uc_side := 2 ;
7305: LD_ADDR_OWVAR 20
7309: PUSH
7310: LD_INT 2
7312: ST_TO_ADDR
// uc_nation := 2 ;
7313: LD_ADDR_OWVAR 21
7317: PUSH
7318: LD_INT 2
7320: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
7321: LD_ADDR_EXP 22
7325: PUSH
7326: LD_STRING Ibrahim
7328: PPUSH
7329: LD_INT 0
7331: PPUSH
7332: LD_STRING 
7334: PPUSH
7335: CALL 31349 0 3
7339: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
7340: LD_EXP 22
7344: PPUSH
7345: LD_VAR 0 3
7349: PPUSH
7350: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
7354: LD_EXP 22
7358: PPUSH
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_VAR 0 2
7368: PPUSH
7369: LD_INT 0
7371: PPUSH
7372: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
7376: LD_EXP 22
7380: PPUSH
7381: LD_VAR 0 4
7385: PPUSH
7386: CALL_OW 234
// end ;
7390: PPOPN 4
7392: END
// export function IbrahimBetrayal ; var i , tmp ; begin
7393: LD_INT 0
7395: PPUSH
7396: PPUSH
7397: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
7398: LD_INT 122
7400: PPUSH
7401: LD_INT 77
7403: PPUSH
7404: LD_INT 2
7406: PPUSH
7407: LD_INT 6
7409: NEG
7410: PPUSH
7411: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
7415: LD_EXP 22
7419: PPUSH
7420: LD_INT 123
7422: PPUSH
7423: LD_INT 79
7425: PPUSH
7426: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
7430: LD_EXP 22
7434: PPUSH
7435: LD_INT 125
7437: PPUSH
7438: LD_INT 82
7440: PPUSH
7441: CALL_OW 178
// wait ( 0 0$2 ) ;
7445: LD_INT 70
7447: PPUSH
7448: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
7452: LD_EXP 43
7456: PPUSH
7457: LD_EXP 22
7461: PPUSH
7462: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
7466: LD_EXP 43
7470: PPUSH
7471: LD_STRING DRum-outpost-b-3
7473: PPUSH
7474: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
7478: LD_ADDR_VAR 0 3
7482: PUSH
7483: LD_INT 125
7485: PPUSH
7486: LD_INT 76
7488: PPUSH
7489: CALL_OW 428
7493: PUSH
7494: LD_INT 125
7496: PPUSH
7497: LD_INT 79
7499: PPUSH
7500: CALL_OW 428
7504: PUSH
7505: LD_INT 125
7507: PPUSH
7508: LD_INT 82
7510: PPUSH
7511: CALL_OW 428
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: ST_TO_ADDR
// for i in tmp do
7521: LD_ADDR_VAR 0 2
7525: PUSH
7526: LD_VAR 0 3
7530: PUSH
7531: FOR_IN
7532: IFFALSE 7548
// SetLives ( i , 200 ) ;
7534: LD_VAR 0 2
7538: PPUSH
7539: LD_INT 200
7541: PPUSH
7542: CALL_OW 234
7546: GO 7531
7548: POP
7549: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7550: LD_EXP 22
7554: PPUSH
7555: LD_STRING DI-outpost-b-4
7557: PPUSH
7558: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7562: LD_EXP 22
7566: PPUSH
7567: LD_INT 5
7569: PPUSH
7570: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7574: LD_EXP 22
7578: PUSH
7579: LD_EXP 43
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PPUSH
7588: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7592: LD_INT 122
7594: PPUSH
7595: LD_INT 77
7597: PPUSH
7598: LD_INT 2
7600: PPUSH
7601: CALL_OW 331
// if Givi then
7605: LD_EXP 20
7609: IFFALSE 7625
// Say ( Givi , DG-1-outpost-b-5 ) else
7611: LD_EXP 20
7615: PPUSH
7616: LD_STRING DG-1-outpost-b-5
7618: PPUSH
7619: CALL_OW 88
7623: GO 7690
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7625: LD_EXP 30
7629: PPUSH
7630: LD_INT 26
7632: PUSH
7633: LD_INT 2
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PPUSH
7640: CALL_OW 72
7644: PUSH
7645: LD_INT 1
7647: ARRAY
7648: PPUSH
7649: LD_STRING DArf-outpost-b-a-5
7651: PPUSH
7652: CALL_OW 88
7656: NOT
7657: IFFALSE 7690
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7659: LD_EXP 30
7663: PPUSH
7664: LD_INT 26
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PPUSH
7674: CALL_OW 72
7678: PUSH
7679: LD_INT 1
7681: ARRAY
7682: PPUSH
7683: LD_STRING DArm-outpost-b-a-5
7685: PPUSH
7686: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7690: LD_INT 35
7692: PPUSH
7693: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7697: LD_EXP 22
7701: PPUSH
7702: CALL_OW 301
7706: PUSH
7707: LD_EXP 19
7711: PPUSH
7712: LD_EXP 22
7716: PPUSH
7717: CALL_OW 296
7721: PUSH
7722: LD_INT 6
7724: LESS
7725: PUSH
7726: LD_EXP 22
7730: PPUSH
7731: CALL_OW 302
7735: AND
7736: OR
7737: IFFALSE 7690
// if IsDead ( Ibrahim ) then
7739: LD_EXP 22
7743: PPUSH
7744: CALL_OW 301
7748: IFFALSE 7764
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7750: LD_EXP 19
7754: PPUSH
7755: LD_STRING DH-ibrahimdead-1
7757: PPUSH
7758: CALL_OW 88
// exit ;
7762: GO 7805
// end ; CenterNowOnUnits ( Ibrahim ) ;
7764: LD_EXP 22
7768: PPUSH
7769: CALL_OW 87
// DialogueOn ;
7773: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7777: LD_EXP 22
7781: PPUSH
7782: LD_STRING DI-ibrahimlives-1
7784: PPUSH
7785: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7789: LD_EXP 19
7793: PPUSH
7794: LD_STRING DH-Ibrahimlives-2
7796: PPUSH
7797: CALL_OW 88
// DialogueOff ;
7801: CALL_OW 7
// end ;
7805: LD_VAR 0 1
7809: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7810: LD_INT 11
7812: PPUSH
7813: LD_INT 22
7815: PUSH
7816: LD_INT 2
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PPUSH
7823: CALL_OW 70
7827: PUSH
7828: LD_OWVAR 1
7832: PUSH
7833: LD_INT 18900
7835: PUSH
7836: LD_INT 16800
7838: PUSH
7839: LD_INT 16800
7841: PUSH
7842: LD_INT 15750
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: LD_OWVAR 67
7855: ARRAY
7856: GREATEREQUAL
7857: OR
7858: IFFALSE 8366
7860: GO 7862
7862: DISABLE
// begin outerAreaAchived := true ;
7863: LD_ADDR_EXP 15
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7871: LD_INT 700
7873: PPUSH
7874: CALL_OW 67
// DialogueOn ;
7878: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7882: LD_EXP 27
7886: PPUSH
7887: LD_STRING DShar-radio-1
7889: PPUSH
7890: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7894: LD_EXP 27
7898: PPUSH
7899: LD_STRING DShar-radio-2
7901: PPUSH
7902: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7906: LD_EXP 19
7910: PPUSH
7911: LD_STRING DH-radio-2
7913: PPUSH
7914: CALL_OW 88
// DialogueOff ;
7918: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7922: LD_STRING Gaidar
7924: PPUSH
7925: CALL_OW 337
// if Difficulty < 3 then
7929: LD_OWVAR 67
7933: PUSH
7934: LD_INT 3
7936: LESS
7937: IFFALSE 8003
// begin DialogueOn ;
7939: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7943: LD_INT 11
7945: PPUSH
7946: LD_INT 14
7948: PPUSH
7949: LD_INT 2
7951: PPUSH
7952: LD_INT 6
7954: NEG
7955: PPUSH
7956: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7960: LD_INT 11
7962: PPUSH
7963: LD_INT 14
7965: PPUSH
7966: LD_INT 2
7968: PPUSH
7969: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7973: LD_INT 11
7975: PPUSH
7976: LD_INT 14
7978: PPUSH
7979: CALL_OW 84
// dwait ( 0 0$1 ) ;
7983: LD_INT 35
7985: PPUSH
7986: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7990: LD_EXP 19
7994: PPUSH
7995: CALL_OW 87
// DialogueOff ;
7999: CALL_OW 7
// end ; wait ( 1 1$20 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
8003: LD_INT 2800
8005: PUSH
8006: LD_INT 350
8008: PPUSH
8009: LD_INT 525
8011: PPUSH
8012: CALL_OW 12
8016: PUSH
8017: LD_OWVAR 67
8021: MUL
8022: PLUS
8023: PPUSH
8024: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8028: LD_INT 35
8030: PPUSH
8031: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
8035: LD_INT 2
8037: PPUSH
8038: LD_INT 1
8040: PPUSH
8041: CALL_OW 428
8045: PUSH
8046: LD_INT 0
8048: EQUAL
8049: IFFALSE 8028
// SetDir ( Gaidar , 2 ) ;
8051: LD_EXP 36
8055: PPUSH
8056: LD_INT 2
8058: PPUSH
8059: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
8063: LD_EXP 36
8067: PPUSH
8068: LD_INT 2
8070: PPUSH
8071: LD_INT 1
8073: PPUSH
8074: LD_INT 0
8076: PPUSH
8077: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
8081: LD_EXP 36
8085: PPUSH
8086: LD_INT 19
8088: PPUSH
8089: LD_INT 24
8091: PPUSH
8092: CALL_OW 111
// if Difficulty < 3 then
8096: LD_OWVAR 67
8100: PUSH
8101: LD_INT 3
8103: LESS
8104: IFFALSE 8143
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
8106: LD_INT 11
8108: PPUSH
8109: LD_INT 14
8111: PPUSH
8112: LD_INT 2
8114: PPUSH
8115: LD_INT 6
8117: NEG
8118: PPUSH
8119: CALL_OW 330
// wait ( 0 0$2 ) ;
8123: LD_INT 70
8125: PPUSH
8126: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
8130: LD_INT 11
8132: PPUSH
8133: LD_INT 14
8135: PPUSH
8136: LD_INT 2
8138: PPUSH
8139: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
8143: LD_EXP 36
8147: PPUSH
8148: LD_INT 210
8150: PPUSH
8151: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
8155: LD_EXP 36
8159: PPUSH
8160: LD_INT 38
8162: PPUSH
8163: LD_INT 47
8165: PPUSH
8166: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
8170: LD_EXP 36
8174: PPUSH
8175: LD_INT 32
8177: PPUSH
8178: LD_INT 59
8180: PPUSH
8181: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
8185: LD_EXP 36
8189: PPUSH
8190: LD_INT 350
8192: PPUSH
8193: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
8197: LD_EXP 36
8201: PPUSH
8202: LD_INT 62
8204: PPUSH
8205: LD_INT 116
8207: PPUSH
8208: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
8212: LD_EXP 36
8216: PPUSH
8217: LD_INT 92
8219: PPUSH
8220: LD_INT 177
8222: PPUSH
8223: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8227: LD_INT 35
8229: PPUSH
8230: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
8234: LD_EXP 36
8238: PPUSH
8239: CALL_OW 301
8243: PUSH
8244: LD_EXP 36
8248: PPUSH
8249: LD_INT 92
8251: PPUSH
8252: LD_INT 177
8254: PPUSH
8255: CALL_OW 307
8259: OR
8260: IFFALSE 8227
// if IsAt ( Gaidar , 92 , 177 ) then
8262: LD_EXP 36
8266: PPUSH
8267: LD_INT 92
8269: PPUSH
8270: LD_INT 177
8272: PPUSH
8273: CALL_OW 307
8277: IFFALSE 8344
// begin DialogueOn ;
8279: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
8283: LD_INT 92
8285: PPUSH
8286: LD_INT 177
8288: PPUSH
8289: LD_INT 2
8291: PPUSH
8292: LD_INT 3
8294: NEG
8295: PPUSH
8296: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
8300: LD_EXP 36
8304: PPUSH
8305: CALL_OW 87
// dwait ( 0 0$2 ) ;
8309: LD_INT 70
8311: PPUSH
8312: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
8316: LD_INT 92
8318: PPUSH
8319: LD_INT 177
8321: PPUSH
8322: LD_INT 2
8324: PPUSH
8325: CALL_OW 331
// DialogueOff ;
8329: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
8333: LD_EXP 36
8337: PPUSH
8338: CALL_OW 64
// exit ;
8342: GO 8366
// end ; gaidarKilled := true ;
8344: LD_ADDR_EXP 14
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
8352: LD_STRING GaidarKilled
8354: PPUSH
8355: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
8359: LD_STRING ACH_COMMISAR
8361: PPUSH
8362: CALL_OW 543
// end ;
8366: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
8367: LD_INT 2
8369: PPUSH
8370: LD_EXP 36
8374: PPUSH
8375: CALL_OW 292
8379: IFFALSE 8396
8381: GO 8383
8383: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
8384: LD_EXP 36
8388: PPUSH
8389: LD_STRING DT-objective-1
8391: PPUSH
8392: CALL_OW 88
8396: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
8397: LD_INT 22
8399: PUSH
8400: LD_INT 2
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 2
8409: PUSH
8410: LD_INT 95
8412: PUSH
8413: LD_INT 5
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: PUSH
8420: LD_INT 95
8422: PUSH
8423: LD_INT 6
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: LD_INT 95
8432: PUSH
8433: LD_INT 7
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 69
8454: IFFALSE 8491
8456: GO 8458
8458: DISABLE
// begin DialogueOn ;
8459: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
8463: LD_EXP 19
8467: PPUSH
8468: LD_STRING DH-outpost-last-1
8470: PPUSH
8471: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
8475: LD_EXP 35
8479: PPUSH
8480: LD_STRING DB-outpost-last-2
8482: PPUSH
8483: CALL_OW 94
// DialogueOff ;
8487: CALL_OW 7
// end ;
8491: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
8492: LD_INT 200
8494: PPUSH
8495: CALL_OW 256
8499: PUSH
8500: LD_INT 999
8502: LESS
8503: PUSH
8504: LD_INT 200
8506: PPUSH
8507: CALL_OW 255
8511: PUSH
8512: LD_INT 2
8514: EQUAL
8515: OR
8516: IFFALSE 8689
8518: GO 8520
8520: DISABLE
8521: LD_INT 0
8523: PPUSH
8524: PPUSH
// begin if not earlyEscape then
8525: LD_EXP 16
8529: NOT
8530: IFFALSE 8556
// begin SayRadio ( Burlak , DB-end-1 ) ;
8532: LD_EXP 35
8536: PPUSH
8537: LD_STRING DB-end-1
8539: PPUSH
8540: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8544: LD_EXP 19
8548: PPUSH
8549: LD_STRING DH-end-2
8551: PPUSH
8552: CALL_OW 88
// end ; if tick <= 15 15$00 then
8556: LD_OWVAR 1
8560: PUSH
8561: LD_INT 31500
8563: LESSEQUAL
8564: IFFALSE 8573
// SetAchievement ( ACH_FIST ) ;
8566: LD_STRING ACH_FIST
8568: PPUSH
8569: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8573: LD_ADDR_VAR 0 2
8577: PUSH
8578: LD_INT 22
8580: PUSH
8581: LD_INT 3
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 3
8590: PUSH
8591: LD_INT 21
8593: PUSH
8594: LD_INT 3
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PPUSH
8609: CALL_OW 69
8613: ST_TO_ADDR
// if not tmp then
8614: LD_VAR 0 2
8618: NOT
8619: IFFALSE 8623
// exit ;
8621: GO 8689
// for i in tmp do
8623: LD_ADDR_VAR 0 1
8627: PUSH
8628: LD_VAR 0 2
8632: PUSH
8633: FOR_IN
8634: IFFALSE 8687
// begin SetTag ( i , tEscape ) ;
8636: LD_VAR 0 1
8640: PPUSH
8641: LD_EXP 18
8645: PPUSH
8646: CALL_OW 109
// if IsInUnit ( i ) then
8650: LD_VAR 0 1
8654: PPUSH
8655: CALL_OW 310
8659: IFFALSE 8670
// ComExitBuilding ( i ) ;
8661: LD_VAR 0 1
8665: PPUSH
8666: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8670: LD_VAR 0 1
8674: PPUSH
8675: LD_INT 92
8677: PPUSH
8678: LD_INT 177
8680: PPUSH
8681: CALL_OW 171
// end ;
8685: GO 8633
8687: POP
8688: POP
// end ;
8689: PPOPN 2
8691: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8692: LD_INT 4
8694: PPUSH
8695: LD_INT 22
8697: PUSH
8698: LD_INT 2
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PPUSH
8705: CALL_OW 70
8709: PUSH
8710: LD_EXP 15
8714: NOT
8715: AND
8716: PUSH
8717: LD_EXP 28
8721: PPUSH
8722: CALL_OW 302
8726: AND
8727: IFFALSE 8967
8729: GO 8731
8731: DISABLE
// begin DialogueOn ;
8732: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8736: LD_INT 111
8738: PPUSH
8739: LD_INT 54
8741: PPUSH
8742: LD_INT 2
8744: PPUSH
8745: LD_INT 16
8747: NEG
8748: PPUSH
8749: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8753: LD_INT 111
8755: PPUSH
8756: LD_INT 53
8758: PPUSH
8759: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8763: LD_INT 10
8765: PPUSH
8766: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8770: LD_EXP 28
8774: PPUSH
8775: LD_STRING DKs-Hannibal-1
8777: PPUSH
8778: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8782: LD_EXP 28
8786: PPUSH
8787: LD_STRING DKs-Hannibal-2
8789: PPUSH
8790: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8794: LD_EXP 28
8798: PPUSH
8799: LD_STRING DKs-Hannibal-3
8801: PPUSH
8802: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8806: LD_EXP 28
8810: PPUSH
8811: LD_STRING DKs-Hannibal-4
8813: PPUSH
8814: CALL_OW 88
// dwait ( 0 0$1 ) ;
8818: LD_INT 35
8820: PPUSH
8821: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8825: LD_INT 111
8827: PPUSH
8828: LD_INT 54
8830: PPUSH
8831: LD_INT 2
8833: PPUSH
8834: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8838: LD_INT 173
8840: PPUSH
8841: LD_INT 76
8843: PPUSH
8844: LD_INT 2
8846: PPUSH
8847: LD_INT 12
8849: NEG
8850: PPUSH
8851: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8855: LD_INT 173
8857: PPUSH
8858: LD_INT 76
8860: PPUSH
8861: LD_INT 2
8863: PPUSH
8864: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8868: LD_INT 173
8870: PPUSH
8871: LD_INT 76
8873: PPUSH
8874: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8878: LD_EXP 28
8882: PPUSH
8883: LD_STRING DKs-Hannibal-5
8885: PPUSH
8886: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8890: LD_EXP 23
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_INT 2
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 34
8907: PUSH
8908: LD_INT 26
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PPUSH
8919: CALL_OW 69
8923: NOT
8924: AND
8925: IFFALSE 8963
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8927: LD_EXP 23
8931: PPUSH
8932: LD_STRING DKam-Hannibal-a-6
8934: PPUSH
8935: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8939: LD_EXP 23
8943: PPUSH
8944: LD_STRING DKam-Hannibal-a-7
8946: PPUSH
8947: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8951: LD_EXP 20
8955: PPUSH
8956: LD_STRING DG-Hannibal-a-8
8958: PPUSH
8959: CALL_OW 88
// end ; DialogueOff ;
8963: CALL_OW 7
// end ;
8967: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8968: LD_INT 225
8970: PPUSH
8971: CALL_OW 302
8975: PUSH
8976: LD_INT 200
8978: PPUSH
8979: CALL_OW 302
8983: AND
8984: PUSH
8985: LD_INT 12
8987: PPUSH
8988: LD_INT 21
8990: PUSH
8991: LD_INT 3
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 70
9002: PUSH
9003: LD_INT 2
9005: GREATER
9006: AND
9007: PUSH
9008: LD_INT 13
9010: PPUSH
9011: LD_INT 22
9013: PUSH
9014: LD_INT 2
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PPUSH
9021: CALL_OW 70
9025: PUSH
9026: LD_INT 3
9028: GREATER
9029: AND
9030: IFFALSE 9043
9032: GO 9034
9034: DISABLE
// hannibalPath := true ;
9035: LD_ADDR_EXP 9
9039: PUSH
9040: LD_INT 1
9042: ST_TO_ADDR
9043: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
9044: LD_EXP 9
9048: PUSH
9049: LD_INT 6
9051: PPUSH
9052: LD_INT 22
9054: PUSH
9055: LD_INT 2
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: PPUSH
9062: CALL_OW 70
9066: AND
9067: IFFALSE 9412
9069: GO 9071
9071: DISABLE
9072: LD_INT 0
9074: PPUSH
9075: PPUSH
9076: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
9077: LD_ADDR_VAR 0 2
9081: PUSH
9082: LD_INT 6
9084: PPUSH
9085: LD_INT 22
9087: PUSH
9088: LD_INT 2
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PPUSH
9095: CALL_OW 70
9099: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
9100: LD_ADDR_VAR 0 3
9104: PUSH
9105: LD_VAR 0 2
9109: PPUSH
9110: LD_INT 34
9112: PUSH
9113: LD_INT 26
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 72
9124: PUSH
9125: LD_INT 0
9127: GREATER
9128: ST_TO_ADDR
// DialogueOn ;
9129: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
9133: LD_EXP 19
9137: PPUSH
9138: LD_STRING DH-Cleverattack-1
9140: PPUSH
9141: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
9145: LD_EXP 19
9149: PPUSH
9150: LD_STRING DH-Cleverattack-2
9152: PPUSH
9153: CALL_OW 88
// if hasFlameThrower then
9157: LD_VAR 0 3
9161: IFFALSE 9189
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
9163: LD_EXP 35
9167: PPUSH
9168: LD_STRING DB-Cleverattack-3
9170: PPUSH
9171: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
9175: LD_EXP 19
9179: PPUSH
9180: LD_STRING DH-Cleverattack-4
9182: PPUSH
9183: CALL_OW 88
// end else
9187: GO 9213
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
9189: LD_EXP 35
9193: PPUSH
9194: LD_STRING DB-Cleverattack-a-3
9196: PPUSH
9197: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
9201: LD_EXP 19
9205: PPUSH
9206: LD_STRING DH-Cleverattack-a-4
9208: PPUSH
9209: CALL_OW 88
// end ; DialogueOff ;
9213: CALL_OW 7
// if not hasFlameThrower then
9217: LD_VAR 0 3
9221: NOT
9222: IFFALSE 9226
// exit ;
9224: GO 9412
// earlyEscape := true ;
9226: LD_ADDR_EXP 16
9230: PUSH
9231: LD_INT 1
9233: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9234: LD_INT 140
9236: PPUSH
9237: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
9241: LD_ADDR_VAR 0 2
9245: PUSH
9246: LD_INT 22
9248: PUSH
9249: LD_INT 3
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 2
9258: PUSH
9259: LD_INT 25
9261: PUSH
9262: LD_INT 1
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 25
9271: PUSH
9272: LD_INT 2
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 25
9281: PUSH
9282: LD_INT 4
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 69
9303: PUSH
9304: LD_EXP 22
9308: PUSH
9309: LD_EXP 37
9313: PUSH
9314: LD_EXP 36
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: DIFF
9324: ST_TO_ADDR
// for i in tmp do
9325: LD_ADDR_VAR 0 1
9329: PUSH
9330: LD_VAR 0 2
9334: PUSH
9335: FOR_IN
9336: IFFALSE 9410
// begin if Prob ( 40 + 10 * Difficulty ) then
9338: LD_INT 40
9340: PUSH
9341: LD_INT 10
9343: PUSH
9344: LD_OWVAR 67
9348: MUL
9349: PLUS
9350: PPUSH
9351: CALL_OW 13
9355: IFFALSE 9359
// continue ;
9357: GO 9335
// SetTag ( i , tEscape ) ;
9359: LD_VAR 0 1
9363: PPUSH
9364: LD_EXP 18
9368: PPUSH
9369: CALL_OW 109
// if IsInUnit ( i ) then
9373: LD_VAR 0 1
9377: PPUSH
9378: CALL_OW 310
9382: IFFALSE 9393
// ComExitBuilding ( i ) ;
9384: LD_VAR 0 1
9388: PPUSH
9389: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
9393: LD_VAR 0 1
9397: PPUSH
9398: LD_INT 92
9400: PPUSH
9401: LD_INT 177
9403: PPUSH
9404: CALL_OW 171
// end ;
9408: GO 9335
9410: POP
9411: POP
// end ;
9412: PPOPN 3
9414: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
9415: LD_INT 9
9417: PPUSH
9418: LD_INT 2
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 22
9433: PUSH
9434: LD_INT 6
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: LIST
9445: PPUSH
9446: CALL_OW 70
9450: IFFALSE 9548
9452: GO 9454
9454: DISABLE
9455: LD_INT 0
9457: PPUSH
// begin enable ;
9458: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
9459: LD_ADDR_VAR 0 1
9463: PUSH
9464: LD_INT 9
9466: PPUSH
9467: LD_INT 2
9469: PUSH
9470: LD_INT 22
9472: PUSH
9473: LD_INT 3
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 22
9482: PUSH
9483: LD_INT 6
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 70
9499: PUSH
9500: FOR_IN
9501: IFFALSE 9546
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
9503: LD_VAR 0 1
9507: PPUSH
9508: CALL_OW 110
9512: PUSH
9513: LD_EXP 18
9517: EQUAL
9518: PUSH
9519: LD_VAR 0 1
9523: PPUSH
9524: CALL_OW 255
9528: PUSH
9529: LD_INT 6
9531: EQUAL
9532: OR
9533: IFFALSE 9544
// RemoveUnit ( i ) ;
9535: LD_VAR 0 1
9539: PPUSH
9540: CALL_OW 64
9544: GO 9500
9546: POP
9547: POP
// end ;
9548: PPOPN 1
9550: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9551: LD_EXP 24
9555: PUSH
9556: LD_EXP 24
9560: PPUSH
9561: CALL_OW 256
9565: PUSH
9566: LD_INT 3
9568: LESS
9569: AND
9570: IFFALSE 9616
9572: GO 9574
9574: DISABLE
// begin DialogueOn ;
9575: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9579: LD_EXP 24
9583: PPUSH
9584: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9588: LD_EXP 24
9592: PPUSH
9593: LD_STRING DK-Kkilled-1
9595: PPUSH
9596: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9600: LD_EXP 19
9604: PPUSH
9605: LD_STRING DH-Kkilled-2
9607: PPUSH
9608: CALL_OW 88
// DialogueOff ;
9612: CALL_OW 7
// end ;
9616: END
// every 0 0$1 trigger kaiaKilledByRussian do
9617: LD_EXP 8
9621: IFFALSE 9638
9623: GO 9625
9625: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9626: LD_EXP 19
9630: PPUSH
9631: LD_STRING DH-Kkilled-3
9633: PPUSH
9634: CALL_OW 88
9638: END
// every 0 0$1 trigger tick >= 24 24$00 do
9639: LD_OWVAR 1
9643: PUSH
9644: LD_INT 50400
9646: GREATEREQUAL
9647: IFFALSE 9684
9649: GO 9651
9651: DISABLE
// begin DialogueOn ;
9652: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9656: LD_EXP 27
9660: PPUSH
9661: LD_STRING DShar-slow-1
9663: PPUSH
9664: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9668: LD_EXP 27
9672: PPUSH
9673: LD_STRING DShar-slow-2
9675: PPUSH
9676: CALL_OW 94
// DialogueOff ;
9680: CALL_OW 7
// end ;
9684: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9685: LD_OWVAR 1
9689: PUSH
9690: LD_INT 84000
9692: PUSH
9693: LD_INT 75600
9695: PUSH
9696: LD_INT 67200
9698: PUSH
9699: LD_INT 63000
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: PUSH
9708: LD_OWVAR 67
9712: ARRAY
9713: GREATEREQUAL
9714: IFFALSE 9758
9716: GO 9718
9718: DISABLE
// begin DialogueOn ;
9719: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9723: LD_EXP 27
9727: PPUSH
9728: LD_STRING DShar-fail-1
9730: PPUSH
9731: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9735: LD_EXP 27
9739: PPUSH
9740: LD_STRING DShar-fail-2
9742: PPUSH
9743: CALL_OW 94
// DialogueOff ;
9747: CALL_OW 7
// YouLost ( Time ) ;
9751: LD_STRING Time
9753: PPUSH
9754: CALL_OW 104
// end ;
9758: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9759: LD_INT 22
9761: PUSH
9762: LD_INT 3
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: LD_INT 2
9771: PUSH
9772: LD_INT 30
9774: PUSH
9775: LD_INT 1
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 30
9784: PUSH
9785: LD_INT 0
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: PUSH
9806: LD_INT 0
9808: EQUAL
9809: IFFALSE 10470
9811: GO 9813
9813: DISABLE
9814: LD_INT 0
9816: PPUSH
// begin if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) < 5 then
9817: LD_INT 22
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 23
9829: PUSH
9830: LD_INT 2
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 21
9839: PUSH
9840: LD_INT 1
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 50
9849: PUSH
9850: EMPTY
9851: LIST
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: PPUSH
9859: CALL_OW 69
9863: PPUSH
9864: CALL 33451 0 1
9868: PUSH
9869: LD_INT 5
9871: LESS
9872: IFFALSE 9881
// YouLost ( Troops ) ;
9874: LD_STRING Troops
9876: PPUSH
9877: CALL_OW 104
// if ( tick + gameTime ) <= 55 55$00 then
9881: LD_OWVAR 1
9885: PUSH
9886: LD_EXP 5
9890: PLUS
9891: PUSH
9892: LD_INT 115500
9894: LESSEQUAL
9895: IFFALSE 9904
// SetAchievement ( ACH_HSPEED_4 ) ;
9897: LD_STRING ACH_HSPEED_4
9899: PPUSH
9900: CALL_OW 543
// if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9904: LD_OWVAR 1
9908: PUSH
9909: LD_EXP 5
9913: PLUS
9914: PUSH
9915: LD_INT 178500
9917: PUSH
9918: LD_INT 157500
9920: PUSH
9921: LD_INT 136500
9923: PUSH
9924: LD_INT 126000
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: PUSH
9933: LD_OWVAR 67
9937: ARRAY
9938: LESSEQUAL
9939: IFFALSE 9953
// AddMedal ( med1 , 1 ) else
9941: LD_STRING med1
9943: PPUSH
9944: LD_INT 1
9946: PPUSH
9947: CALL_OW 101
9951: GO 9964
// AddMedal ( med1 , - 1 ) ;
9953: LD_STRING med1
9955: PPUSH
9956: LD_INT 1
9958: NEG
9959: PPUSH
9960: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9964: LD_EXP 7
9968: PUSH
9969: LD_INT 3
9971: GREATEREQUAL
9972: PUSH
9973: LD_EXP 11
9977: MUL
9978: PUSH
9979: LD_EXP 9
9983: MUL
9984: PUSH
9985: LD_EXP 6
9989: PUSH
9990: LD_INT 6
9992: PUSH
9993: LD_INT 5
9995: PUSH
9996: LD_INT 4
9998: PUSH
9999: LD_INT 3
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: PUSH
10008: LD_OWVAR 67
10012: ARRAY
10013: LESS
10014: MUL
10015: IFFALSE 10029
// AddMedal ( med2 , 1 ) else
10017: LD_STRING med2
10019: PPUSH
10020: LD_INT 1
10022: PPUSH
10023: CALL_OW 101
10027: GO 10103
// if flamethrowers < 3 then
10029: LD_EXP 7
10033: PUSH
10034: LD_INT 3
10036: LESS
10037: IFFALSE 10052
// AddMedal ( med2 , - 1 ) else
10039: LD_STRING med2
10041: PPUSH
10042: LD_INT 1
10044: NEG
10045: PPUSH
10046: CALL_OW 101
10050: GO 10103
// if not baseHill then
10052: LD_EXP 11
10056: NOT
10057: IFFALSE 10072
// AddMedal ( med2 , - 2 ) else
10059: LD_STRING med2
10061: PPUSH
10062: LD_INT 2
10064: NEG
10065: PPUSH
10066: CALL_OW 101
10070: GO 10103
// if not hannibalPath then
10072: LD_EXP 9
10076: NOT
10077: IFFALSE 10092
// AddMedal ( med2 , - 3 ) else
10079: LD_STRING med2
10081: PPUSH
10082: LD_INT 3
10084: NEG
10085: PPUSH
10086: CALL_OW 101
10090: GO 10103
// AddMedal ( med3 , - 2 ) ;
10092: LD_STRING med3
10094: PPUSH
10095: LD_INT 2
10097: NEG
10098: PPUSH
10099: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
10103: LD_EXP 14
10107: PPUSH
10108: LD_STRING 04_2_GaidarKilled
10110: PPUSH
10111: CALL_OW 39
// if gaidarKilled then
10115: LD_EXP 14
10119: IFFALSE 10133
// AddMedal ( med3 , 1 ) else
10121: LD_STRING med3
10123: PPUSH
10124: LD_INT 1
10126: PPUSH
10127: CALL_OW 101
10131: GO 10144
// AddMedal ( med3 , - 1 ) ;
10133: LD_STRING med3
10135: PPUSH
10136: LD_INT 1
10138: NEG
10139: PPUSH
10140: CALL_OW 101
// GiveMedals ( MAIN ) ;
10144: LD_STRING MAIN
10146: PPUSH
10147: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
10151: LD_INT 22
10153: PUSH
10154: LD_INT 2
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 3
10163: PUSH
10164: LD_INT 23
10166: PUSH
10167: LD_INT 0
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 69
10186: PPUSH
10187: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
10191: LD_EXP 19
10195: PPUSH
10196: LD_STRING 04_2_Heike
10198: PPUSH
10199: CALL_OW 38
// if Aviradze then
10203: LD_EXP 29
10207: IFFALSE 10221
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
10209: LD_EXP 29
10213: PPUSH
10214: LD_STRING 04_2_Aviradze
10216: PPUSH
10217: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
10221: LD_EXP 22
10225: PUSH
10226: LD_EXP 22
10230: PPUSH
10231: CALL_OW 255
10235: PUSH
10236: LD_INT 2
10238: EQUAL
10239: AND
10240: IFFALSE 10270
// begin if ibrahimOnRuSide then
10242: LD_EXP 3
10246: IFFALSE 10258
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
10248: LD_INT 1
10250: PPUSH
10251: LD_STRING 04_2_IbrahimJoined
10253: PPUSH
10254: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
10258: LD_EXP 22
10262: PPUSH
10263: LD_STRING 04_2_Ibrahim
10265: PPUSH
10266: CALL_OW 38
// end ; if Kamil then
10270: LD_EXP 23
10274: IFFALSE 10288
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
10276: LD_EXP 23
10280: PPUSH
10281: LD_STRING 04_2_Kamil
10283: PPUSH
10284: CALL_OW 38
// if Sophia then
10288: LD_EXP 25
10292: IFFALSE 10306
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
10294: LD_EXP 25
10298: PPUSH
10299: LD_STRING 04_2_Sophia
10301: PPUSH
10302: CALL_OW 38
// if Kaia then
10306: LD_EXP 24
10310: IFFALSE 10324
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
10312: LD_EXP 24
10316: PPUSH
10317: LD_STRING 04_2_Kaia
10319: PPUSH
10320: CALL_OW 38
// if Givi then
10324: LD_EXP 20
10328: IFFALSE 10342
// SaveCharacters ( Givi , 04_2_Givi ) ;
10330: LD_EXP 20
10334: PPUSH
10335: LD_STRING 04_2_Givi
10337: PPUSH
10338: CALL_OW 38
// if Mike then
10342: LD_EXP 21
10346: IFFALSE 10360
// SaveCharacters ( Mike , 04_2_Mike ) ;
10348: LD_EXP 21
10352: PPUSH
10353: LD_STRING 04_2_Mike
10355: PPUSH
10356: CALL_OW 38
// if Markov then
10360: LD_EXP 26
10364: IFFALSE 10378
// SaveCharacters ( Markov , 04_2_Markov ) ;
10366: LD_EXP 26
10370: PPUSH
10371: LD_STRING 04_2_Markov
10373: PPUSH
10374: CALL_OW 38
// if Kurt then
10378: LD_EXP 28
10382: IFFALSE 10396
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
10384: LD_EXP 28
10388: PPUSH
10389: LD_STRING 04_2_Kurt
10391: PPUSH
10392: CALL_OW 38
// if heikeSecondSquad then
10396: LD_EXP 30
10400: IFFALSE 10414
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
10402: LD_EXP 30
10406: PPUSH
10407: LD_STRING 04_2_others
10409: PPUSH
10410: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10414: LD_ADDR_VAR 0 1
10418: PUSH
10419: LD_INT 22
10421: PUSH
10422: LD_INT 2
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 23
10431: PUSH
10432: LD_INT 0
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PPUSH
10443: CALL_OW 69
10447: ST_TO_ADDR
// if tmp then
10448: LD_VAR 0 1
10452: IFFALSE 10466
// SaveCharacters ( tmp , 04_2_apes ) ;
10454: LD_VAR 0 1
10458: PPUSH
10459: LD_STRING 04_2_apes
10461: PPUSH
10462: CALL_OW 38
// YouWin ;
10466: CALL_OW 103
// end ; end_of_file
10470: PPOPN 1
10472: END
// export globalGameSaveCounter ; every 0 0$1 do
10473: GO 10475
10475: DISABLE
// begin enable ;
10476: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10477: LD_STRING updateTimer(
10479: PUSH
10480: LD_OWVAR 1
10484: STR
10485: PUSH
10486: LD_STRING );
10488: STR
10489: PPUSH
10490: CALL_OW 559
// end ;
10494: END
// every 0 0$1 do
10495: GO 10497
10497: DISABLE
// begin globalGameSaveCounter := 0 ;
10498: LD_ADDR_EXP 44
10502: PUSH
10503: LD_INT 0
10505: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10506: LD_STRING setGameSaveCounter(0)
10508: PPUSH
10509: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10513: LD_STRING initStreamRollete();
10515: PPUSH
10516: CALL_OW 559
// InitStreamMode ;
10520: CALL 11863 0 0
// DefineStreamItems ( false ) ;
10524: LD_INT 0
10526: PPUSH
10527: CALL 12327 0 1
// end ;
10531: END
// export function SOS_MapStart ( ) ; begin
10532: LD_INT 0
10534: PPUSH
// if streamModeActive then
10535: LD_EXP 45
10539: IFFALSE 10548
// DefineStreamItems ( true ) ;
10541: LD_INT 1
10543: PPUSH
10544: CALL 12327 0 1
// UpdateLuaVariables ( ) ;
10548: CALL 10565 0 0
// UpdateFactoryWaypoints ( ) ;
10552: CALL 25196 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10556: CALL 25453 0 0
// end ;
10560: LD_VAR 0 1
10564: RET
// function UpdateLuaVariables ( ) ; begin
10565: LD_INT 0
10567: PPUSH
// if globalGameSaveCounter then
10568: LD_EXP 44
10572: IFFALSE 10606
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10574: LD_ADDR_EXP 44
10578: PUSH
10579: LD_EXP 44
10583: PPUSH
10584: CALL 70401 0 1
10588: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10589: LD_STRING setGameSaveCounter(
10591: PUSH
10592: LD_EXP 44
10596: STR
10597: PUSH
10598: LD_STRING )
10600: STR
10601: PPUSH
10602: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10606: LD_STRING setGameDifficulty(
10608: PUSH
10609: LD_OWVAR 67
10613: STR
10614: PUSH
10615: LD_STRING )
10617: STR
10618: PPUSH
10619: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
10623: LD_STRING displayDifficulty(
10625: PUSH
10626: LD_OWVAR 67
10630: STR
10631: PUSH
10632: LD_STRING )
10634: STR
10635: PPUSH
10636: CALL_OW 559
// end ;
10640: LD_VAR 0 1
10644: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10645: LD_INT 0
10647: PPUSH
// if p2 = stream_mode then
10648: LD_VAR 0 2
10652: PUSH
10653: LD_INT 100
10655: EQUAL
10656: IFFALSE 11659
// begin if not StreamModeActive then
10658: LD_EXP 45
10662: NOT
10663: IFFALSE 10673
// StreamModeActive := true ;
10665: LD_ADDR_EXP 45
10669: PUSH
10670: LD_INT 1
10672: ST_TO_ADDR
// if p3 = 0 then
10673: LD_VAR 0 3
10677: PUSH
10678: LD_INT 0
10680: EQUAL
10681: IFFALSE 10687
// InitStreamMode ;
10683: CALL 11863 0 0
// if p3 = 1 then
10687: LD_VAR 0 3
10691: PUSH
10692: LD_INT 1
10694: EQUAL
10695: IFFALSE 10705
// sRocket := true ;
10697: LD_ADDR_EXP 50
10701: PUSH
10702: LD_INT 1
10704: ST_TO_ADDR
// if p3 = 2 then
10705: LD_VAR 0 3
10709: PUSH
10710: LD_INT 2
10712: EQUAL
10713: IFFALSE 10723
// sSpeed := true ;
10715: LD_ADDR_EXP 49
10719: PUSH
10720: LD_INT 1
10722: ST_TO_ADDR
// if p3 = 3 then
10723: LD_VAR 0 3
10727: PUSH
10728: LD_INT 3
10730: EQUAL
10731: IFFALSE 10741
// sEngine := true ;
10733: LD_ADDR_EXP 51
10737: PUSH
10738: LD_INT 1
10740: ST_TO_ADDR
// if p3 = 4 then
10741: LD_VAR 0 3
10745: PUSH
10746: LD_INT 4
10748: EQUAL
10749: IFFALSE 10759
// sSpec := true ;
10751: LD_ADDR_EXP 48
10755: PUSH
10756: LD_INT 1
10758: ST_TO_ADDR
// if p3 = 5 then
10759: LD_VAR 0 3
10763: PUSH
10764: LD_INT 5
10766: EQUAL
10767: IFFALSE 10777
// sLevel := true ;
10769: LD_ADDR_EXP 52
10773: PUSH
10774: LD_INT 1
10776: ST_TO_ADDR
// if p3 = 6 then
10777: LD_VAR 0 3
10781: PUSH
10782: LD_INT 6
10784: EQUAL
10785: IFFALSE 10795
// sArmoury := true ;
10787: LD_ADDR_EXP 53
10791: PUSH
10792: LD_INT 1
10794: ST_TO_ADDR
// if p3 = 7 then
10795: LD_VAR 0 3
10799: PUSH
10800: LD_INT 7
10802: EQUAL
10803: IFFALSE 10813
// sRadar := true ;
10805: LD_ADDR_EXP 54
10809: PUSH
10810: LD_INT 1
10812: ST_TO_ADDR
// if p3 = 8 then
10813: LD_VAR 0 3
10817: PUSH
10818: LD_INT 8
10820: EQUAL
10821: IFFALSE 10831
// sBunker := true ;
10823: LD_ADDR_EXP 55
10827: PUSH
10828: LD_INT 1
10830: ST_TO_ADDR
// if p3 = 9 then
10831: LD_VAR 0 3
10835: PUSH
10836: LD_INT 9
10838: EQUAL
10839: IFFALSE 10849
// sHack := true ;
10841: LD_ADDR_EXP 56
10845: PUSH
10846: LD_INT 1
10848: ST_TO_ADDR
// if p3 = 10 then
10849: LD_VAR 0 3
10853: PUSH
10854: LD_INT 10
10856: EQUAL
10857: IFFALSE 10867
// sFire := true ;
10859: LD_ADDR_EXP 57
10863: PUSH
10864: LD_INT 1
10866: ST_TO_ADDR
// if p3 = 11 then
10867: LD_VAR 0 3
10871: PUSH
10872: LD_INT 11
10874: EQUAL
10875: IFFALSE 10885
// sRefresh := true ;
10877: LD_ADDR_EXP 58
10881: PUSH
10882: LD_INT 1
10884: ST_TO_ADDR
// if p3 = 12 then
10885: LD_VAR 0 3
10889: PUSH
10890: LD_INT 12
10892: EQUAL
10893: IFFALSE 10903
// sExp := true ;
10895: LD_ADDR_EXP 59
10899: PUSH
10900: LD_INT 1
10902: ST_TO_ADDR
// if p3 = 13 then
10903: LD_VAR 0 3
10907: PUSH
10908: LD_INT 13
10910: EQUAL
10911: IFFALSE 10921
// sDepot := true ;
10913: LD_ADDR_EXP 60
10917: PUSH
10918: LD_INT 1
10920: ST_TO_ADDR
// if p3 = 14 then
10921: LD_VAR 0 3
10925: PUSH
10926: LD_INT 14
10928: EQUAL
10929: IFFALSE 10939
// sFlag := true ;
10931: LD_ADDR_EXP 61
10935: PUSH
10936: LD_INT 1
10938: ST_TO_ADDR
// if p3 = 15 then
10939: LD_VAR 0 3
10943: PUSH
10944: LD_INT 15
10946: EQUAL
10947: IFFALSE 10957
// sKamikadze := true ;
10949: LD_ADDR_EXP 69
10953: PUSH
10954: LD_INT 1
10956: ST_TO_ADDR
// if p3 = 16 then
10957: LD_VAR 0 3
10961: PUSH
10962: LD_INT 16
10964: EQUAL
10965: IFFALSE 10975
// sTroll := true ;
10967: LD_ADDR_EXP 70
10971: PUSH
10972: LD_INT 1
10974: ST_TO_ADDR
// if p3 = 17 then
10975: LD_VAR 0 3
10979: PUSH
10980: LD_INT 17
10982: EQUAL
10983: IFFALSE 10993
// sSlow := true ;
10985: LD_ADDR_EXP 71
10989: PUSH
10990: LD_INT 1
10992: ST_TO_ADDR
// if p3 = 18 then
10993: LD_VAR 0 3
10997: PUSH
10998: LD_INT 18
11000: EQUAL
11001: IFFALSE 11011
// sLack := true ;
11003: LD_ADDR_EXP 72
11007: PUSH
11008: LD_INT 1
11010: ST_TO_ADDR
// if p3 = 19 then
11011: LD_VAR 0 3
11015: PUSH
11016: LD_INT 19
11018: EQUAL
11019: IFFALSE 11029
// sTank := true ;
11021: LD_ADDR_EXP 74
11025: PUSH
11026: LD_INT 1
11028: ST_TO_ADDR
// if p3 = 20 then
11029: LD_VAR 0 3
11033: PUSH
11034: LD_INT 20
11036: EQUAL
11037: IFFALSE 11047
// sRemote := true ;
11039: LD_ADDR_EXP 75
11043: PUSH
11044: LD_INT 1
11046: ST_TO_ADDR
// if p3 = 21 then
11047: LD_VAR 0 3
11051: PUSH
11052: LD_INT 21
11054: EQUAL
11055: IFFALSE 11065
// sPowell := true ;
11057: LD_ADDR_EXP 76
11061: PUSH
11062: LD_INT 1
11064: ST_TO_ADDR
// if p3 = 22 then
11065: LD_VAR 0 3
11069: PUSH
11070: LD_INT 22
11072: EQUAL
11073: IFFALSE 11083
// sTeleport := true ;
11075: LD_ADDR_EXP 79
11079: PUSH
11080: LD_INT 1
11082: ST_TO_ADDR
// if p3 = 23 then
11083: LD_VAR 0 3
11087: PUSH
11088: LD_INT 23
11090: EQUAL
11091: IFFALSE 11101
// sOilTower := true ;
11093: LD_ADDR_EXP 81
11097: PUSH
11098: LD_INT 1
11100: ST_TO_ADDR
// if p3 = 24 then
11101: LD_VAR 0 3
11105: PUSH
11106: LD_INT 24
11108: EQUAL
11109: IFFALSE 11119
// sShovel := true ;
11111: LD_ADDR_EXP 82
11115: PUSH
11116: LD_INT 1
11118: ST_TO_ADDR
// if p3 = 25 then
11119: LD_VAR 0 3
11123: PUSH
11124: LD_INT 25
11126: EQUAL
11127: IFFALSE 11137
// sSheik := true ;
11129: LD_ADDR_EXP 83
11133: PUSH
11134: LD_INT 1
11136: ST_TO_ADDR
// if p3 = 26 then
11137: LD_VAR 0 3
11141: PUSH
11142: LD_INT 26
11144: EQUAL
11145: IFFALSE 11155
// sEarthquake := true ;
11147: LD_ADDR_EXP 85
11151: PUSH
11152: LD_INT 1
11154: ST_TO_ADDR
// if p3 = 27 then
11155: LD_VAR 0 3
11159: PUSH
11160: LD_INT 27
11162: EQUAL
11163: IFFALSE 11173
// sAI := true ;
11165: LD_ADDR_EXP 86
11169: PUSH
11170: LD_INT 1
11172: ST_TO_ADDR
// if p3 = 28 then
11173: LD_VAR 0 3
11177: PUSH
11178: LD_INT 28
11180: EQUAL
11181: IFFALSE 11191
// sCargo := true ;
11183: LD_ADDR_EXP 89
11187: PUSH
11188: LD_INT 1
11190: ST_TO_ADDR
// if p3 = 29 then
11191: LD_VAR 0 3
11195: PUSH
11196: LD_INT 29
11198: EQUAL
11199: IFFALSE 11209
// sDLaser := true ;
11201: LD_ADDR_EXP 90
11205: PUSH
11206: LD_INT 1
11208: ST_TO_ADDR
// if p3 = 30 then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_INT 30
11216: EQUAL
11217: IFFALSE 11227
// sExchange := true ;
11219: LD_ADDR_EXP 91
11223: PUSH
11224: LD_INT 1
11226: ST_TO_ADDR
// if p3 = 31 then
11227: LD_VAR 0 3
11231: PUSH
11232: LD_INT 31
11234: EQUAL
11235: IFFALSE 11245
// sFac := true ;
11237: LD_ADDR_EXP 92
11241: PUSH
11242: LD_INT 1
11244: ST_TO_ADDR
// if p3 = 32 then
11245: LD_VAR 0 3
11249: PUSH
11250: LD_INT 32
11252: EQUAL
11253: IFFALSE 11263
// sPower := true ;
11255: LD_ADDR_EXP 93
11259: PUSH
11260: LD_INT 1
11262: ST_TO_ADDR
// if p3 = 33 then
11263: LD_VAR 0 3
11267: PUSH
11268: LD_INT 33
11270: EQUAL
11271: IFFALSE 11281
// sRandom := true ;
11273: LD_ADDR_EXP 94
11277: PUSH
11278: LD_INT 1
11280: ST_TO_ADDR
// if p3 = 34 then
11281: LD_VAR 0 3
11285: PUSH
11286: LD_INT 34
11288: EQUAL
11289: IFFALSE 11299
// sShield := true ;
11291: LD_ADDR_EXP 95
11295: PUSH
11296: LD_INT 1
11298: ST_TO_ADDR
// if p3 = 35 then
11299: LD_VAR 0 3
11303: PUSH
11304: LD_INT 35
11306: EQUAL
11307: IFFALSE 11317
// sTime := true ;
11309: LD_ADDR_EXP 96
11313: PUSH
11314: LD_INT 1
11316: ST_TO_ADDR
// if p3 = 36 then
11317: LD_VAR 0 3
11321: PUSH
11322: LD_INT 36
11324: EQUAL
11325: IFFALSE 11335
// sTools := true ;
11327: LD_ADDR_EXP 97
11331: PUSH
11332: LD_INT 1
11334: ST_TO_ADDR
// if p3 = 101 then
11335: LD_VAR 0 3
11339: PUSH
11340: LD_INT 101
11342: EQUAL
11343: IFFALSE 11353
// sSold := true ;
11345: LD_ADDR_EXP 62
11349: PUSH
11350: LD_INT 1
11352: ST_TO_ADDR
// if p3 = 102 then
11353: LD_VAR 0 3
11357: PUSH
11358: LD_INT 102
11360: EQUAL
11361: IFFALSE 11371
// sDiff := true ;
11363: LD_ADDR_EXP 63
11367: PUSH
11368: LD_INT 1
11370: ST_TO_ADDR
// if p3 = 103 then
11371: LD_VAR 0 3
11375: PUSH
11376: LD_INT 103
11378: EQUAL
11379: IFFALSE 11389
// sFog := true ;
11381: LD_ADDR_EXP 66
11385: PUSH
11386: LD_INT 1
11388: ST_TO_ADDR
// if p3 = 104 then
11389: LD_VAR 0 3
11393: PUSH
11394: LD_INT 104
11396: EQUAL
11397: IFFALSE 11407
// sReset := true ;
11399: LD_ADDR_EXP 67
11403: PUSH
11404: LD_INT 1
11406: ST_TO_ADDR
// if p3 = 105 then
11407: LD_VAR 0 3
11411: PUSH
11412: LD_INT 105
11414: EQUAL
11415: IFFALSE 11425
// sSun := true ;
11417: LD_ADDR_EXP 68
11421: PUSH
11422: LD_INT 1
11424: ST_TO_ADDR
// if p3 = 106 then
11425: LD_VAR 0 3
11429: PUSH
11430: LD_INT 106
11432: EQUAL
11433: IFFALSE 11443
// sTiger := true ;
11435: LD_ADDR_EXP 64
11439: PUSH
11440: LD_INT 1
11442: ST_TO_ADDR
// if p3 = 107 then
11443: LD_VAR 0 3
11447: PUSH
11448: LD_INT 107
11450: EQUAL
11451: IFFALSE 11461
// sBomb := true ;
11453: LD_ADDR_EXP 65
11457: PUSH
11458: LD_INT 1
11460: ST_TO_ADDR
// if p3 = 108 then
11461: LD_VAR 0 3
11465: PUSH
11466: LD_INT 108
11468: EQUAL
11469: IFFALSE 11479
// sWound := true ;
11471: LD_ADDR_EXP 73
11475: PUSH
11476: LD_INT 1
11478: ST_TO_ADDR
// if p3 = 109 then
11479: LD_VAR 0 3
11483: PUSH
11484: LD_INT 109
11486: EQUAL
11487: IFFALSE 11497
// sBetray := true ;
11489: LD_ADDR_EXP 77
11493: PUSH
11494: LD_INT 1
11496: ST_TO_ADDR
// if p3 = 110 then
11497: LD_VAR 0 3
11501: PUSH
11502: LD_INT 110
11504: EQUAL
11505: IFFALSE 11515
// sContamin := true ;
11507: LD_ADDR_EXP 78
11511: PUSH
11512: LD_INT 1
11514: ST_TO_ADDR
// if p3 = 111 then
11515: LD_VAR 0 3
11519: PUSH
11520: LD_INT 111
11522: EQUAL
11523: IFFALSE 11533
// sOil := true ;
11525: LD_ADDR_EXP 80
11529: PUSH
11530: LD_INT 1
11532: ST_TO_ADDR
// if p3 = 112 then
11533: LD_VAR 0 3
11537: PUSH
11538: LD_INT 112
11540: EQUAL
11541: IFFALSE 11551
// sStu := true ;
11543: LD_ADDR_EXP 84
11547: PUSH
11548: LD_INT 1
11550: ST_TO_ADDR
// if p3 = 113 then
11551: LD_VAR 0 3
11555: PUSH
11556: LD_INT 113
11558: EQUAL
11559: IFFALSE 11569
// sBazooka := true ;
11561: LD_ADDR_EXP 87
11565: PUSH
11566: LD_INT 1
11568: ST_TO_ADDR
// if p3 = 114 then
11569: LD_VAR 0 3
11573: PUSH
11574: LD_INT 114
11576: EQUAL
11577: IFFALSE 11587
// sMortar := true ;
11579: LD_ADDR_EXP 88
11583: PUSH
11584: LD_INT 1
11586: ST_TO_ADDR
// if p3 = 115 then
11587: LD_VAR 0 3
11591: PUSH
11592: LD_INT 115
11594: EQUAL
11595: IFFALSE 11605
// sRanger := true ;
11597: LD_ADDR_EXP 98
11601: PUSH
11602: LD_INT 1
11604: ST_TO_ADDR
// if p3 = 116 then
11605: LD_VAR 0 3
11609: PUSH
11610: LD_INT 116
11612: EQUAL
11613: IFFALSE 11623
// sComputer := true ;
11615: LD_ADDR_EXP 99
11619: PUSH
11620: LD_INT 1
11622: ST_TO_ADDR
// if p3 = 117 then
11623: LD_VAR 0 3
11627: PUSH
11628: LD_INT 117
11630: EQUAL
11631: IFFALSE 11641
// s30 := true ;
11633: LD_ADDR_EXP 100
11637: PUSH
11638: LD_INT 1
11640: ST_TO_ADDR
// if p3 = 118 then
11641: LD_VAR 0 3
11645: PUSH
11646: LD_INT 118
11648: EQUAL
11649: IFFALSE 11659
// s60 := true ;
11651: LD_ADDR_EXP 101
11655: PUSH
11656: LD_INT 1
11658: ST_TO_ADDR
// end ; if p2 = hack_mode then
11659: LD_VAR 0 2
11663: PUSH
11664: LD_INT 101
11666: EQUAL
11667: IFFALSE 11795
// begin case p3 of 1 :
11669: LD_VAR 0 3
11673: PUSH
11674: LD_INT 1
11676: DOUBLE
11677: EQUAL
11678: IFTRUE 11682
11680: GO 11689
11682: POP
// hHackUnlimitedResources ; 2 :
11683: CALL 23942 0 0
11687: GO 11795
11689: LD_INT 2
11691: DOUBLE
11692: EQUAL
11693: IFTRUE 11697
11695: GO 11704
11697: POP
// hHackSetLevel10 ; 3 :
11698: CALL 24075 0 0
11702: GO 11795
11704: LD_INT 3
11706: DOUBLE
11707: EQUAL
11708: IFTRUE 11712
11710: GO 11719
11712: POP
// hHackSetLevel10YourUnits ; 4 :
11713: CALL 24160 0 0
11717: GO 11795
11719: LD_INT 4
11721: DOUBLE
11722: EQUAL
11723: IFTRUE 11727
11725: GO 11734
11727: POP
// hHackInvincible ; 5 :
11728: CALL 24608 0 0
11732: GO 11795
11734: LD_INT 5
11736: DOUBLE
11737: EQUAL
11738: IFTRUE 11742
11740: GO 11749
11742: POP
// hHackInvisible ; 6 :
11743: CALL 24719 0 0
11747: GO 11795
11749: LD_INT 6
11751: DOUBLE
11752: EQUAL
11753: IFTRUE 11757
11755: GO 11764
11757: POP
// hHackChangeYourSide ; 7 :
11758: CALL 24776 0 0
11762: GO 11795
11764: LD_INT 7
11766: DOUBLE
11767: EQUAL
11768: IFTRUE 11772
11770: GO 11779
11772: POP
// hHackChangeUnitSide ; 8 :
11773: CALL 24818 0 0
11777: GO 11795
11779: LD_INT 8
11781: DOUBLE
11782: EQUAL
11783: IFTRUE 11787
11785: GO 11794
11787: POP
// hHackFog ; end ;
11788: CALL 24919 0 0
11792: GO 11795
11794: POP
// end ; if p2 = game_save_mode then
11795: LD_VAR 0 2
11799: PUSH
11800: LD_INT 102
11802: EQUAL
11803: IFFALSE 11858
// begin if p3 = 1 then
11805: LD_VAR 0 3
11809: PUSH
11810: LD_INT 1
11812: EQUAL
11813: IFFALSE 11825
// globalGameSaveCounter := p4 ;
11815: LD_ADDR_EXP 44
11819: PUSH
11820: LD_VAR 0 4
11824: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11825: LD_VAR 0 3
11829: PUSH
11830: LD_INT 2
11832: EQUAL
11833: PUSH
11834: LD_EXP 44
11838: AND
11839: IFFALSE 11858
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11841: LD_STRING setGameSaveCounter(
11843: PUSH
11844: LD_EXP 44
11848: STR
11849: PUSH
11850: LD_STRING )
11852: STR
11853: PPUSH
11854: CALL_OW 559
// end ; end ;
11858: LD_VAR 0 7
11862: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11863: LD_INT 0
11865: PPUSH
// streamModeActive := false ;
11866: LD_ADDR_EXP 45
11870: PUSH
11871: LD_INT 0
11873: ST_TO_ADDR
// normalCounter := 36 ;
11874: LD_ADDR_EXP 46
11878: PUSH
11879: LD_INT 36
11881: ST_TO_ADDR
// hardcoreCounter := 18 ;
11882: LD_ADDR_EXP 47
11886: PUSH
11887: LD_INT 18
11889: ST_TO_ADDR
// sRocket := false ;
11890: LD_ADDR_EXP 50
11894: PUSH
11895: LD_INT 0
11897: ST_TO_ADDR
// sSpeed := false ;
11898: LD_ADDR_EXP 49
11902: PUSH
11903: LD_INT 0
11905: ST_TO_ADDR
// sEngine := false ;
11906: LD_ADDR_EXP 51
11910: PUSH
11911: LD_INT 0
11913: ST_TO_ADDR
// sSpec := false ;
11914: LD_ADDR_EXP 48
11918: PUSH
11919: LD_INT 0
11921: ST_TO_ADDR
// sLevel := false ;
11922: LD_ADDR_EXP 52
11926: PUSH
11927: LD_INT 0
11929: ST_TO_ADDR
// sArmoury := false ;
11930: LD_ADDR_EXP 53
11934: PUSH
11935: LD_INT 0
11937: ST_TO_ADDR
// sRadar := false ;
11938: LD_ADDR_EXP 54
11942: PUSH
11943: LD_INT 0
11945: ST_TO_ADDR
// sBunker := false ;
11946: LD_ADDR_EXP 55
11950: PUSH
11951: LD_INT 0
11953: ST_TO_ADDR
// sHack := false ;
11954: LD_ADDR_EXP 56
11958: PUSH
11959: LD_INT 0
11961: ST_TO_ADDR
// sFire := false ;
11962: LD_ADDR_EXP 57
11966: PUSH
11967: LD_INT 0
11969: ST_TO_ADDR
// sRefresh := false ;
11970: LD_ADDR_EXP 58
11974: PUSH
11975: LD_INT 0
11977: ST_TO_ADDR
// sExp := false ;
11978: LD_ADDR_EXP 59
11982: PUSH
11983: LD_INT 0
11985: ST_TO_ADDR
// sDepot := false ;
11986: LD_ADDR_EXP 60
11990: PUSH
11991: LD_INT 0
11993: ST_TO_ADDR
// sFlag := false ;
11994: LD_ADDR_EXP 61
11998: PUSH
11999: LD_INT 0
12001: ST_TO_ADDR
// sKamikadze := false ;
12002: LD_ADDR_EXP 69
12006: PUSH
12007: LD_INT 0
12009: ST_TO_ADDR
// sTroll := false ;
12010: LD_ADDR_EXP 70
12014: PUSH
12015: LD_INT 0
12017: ST_TO_ADDR
// sSlow := false ;
12018: LD_ADDR_EXP 71
12022: PUSH
12023: LD_INT 0
12025: ST_TO_ADDR
// sLack := false ;
12026: LD_ADDR_EXP 72
12030: PUSH
12031: LD_INT 0
12033: ST_TO_ADDR
// sTank := false ;
12034: LD_ADDR_EXP 74
12038: PUSH
12039: LD_INT 0
12041: ST_TO_ADDR
// sRemote := false ;
12042: LD_ADDR_EXP 75
12046: PUSH
12047: LD_INT 0
12049: ST_TO_ADDR
// sPowell := false ;
12050: LD_ADDR_EXP 76
12054: PUSH
12055: LD_INT 0
12057: ST_TO_ADDR
// sTeleport := false ;
12058: LD_ADDR_EXP 79
12062: PUSH
12063: LD_INT 0
12065: ST_TO_ADDR
// sOilTower := false ;
12066: LD_ADDR_EXP 81
12070: PUSH
12071: LD_INT 0
12073: ST_TO_ADDR
// sShovel := false ;
12074: LD_ADDR_EXP 82
12078: PUSH
12079: LD_INT 0
12081: ST_TO_ADDR
// sSheik := false ;
12082: LD_ADDR_EXP 83
12086: PUSH
12087: LD_INT 0
12089: ST_TO_ADDR
// sEarthquake := false ;
12090: LD_ADDR_EXP 85
12094: PUSH
12095: LD_INT 0
12097: ST_TO_ADDR
// sAI := false ;
12098: LD_ADDR_EXP 86
12102: PUSH
12103: LD_INT 0
12105: ST_TO_ADDR
// sCargo := false ;
12106: LD_ADDR_EXP 89
12110: PUSH
12111: LD_INT 0
12113: ST_TO_ADDR
// sDLaser := false ;
12114: LD_ADDR_EXP 90
12118: PUSH
12119: LD_INT 0
12121: ST_TO_ADDR
// sExchange := false ;
12122: LD_ADDR_EXP 91
12126: PUSH
12127: LD_INT 0
12129: ST_TO_ADDR
// sFac := false ;
12130: LD_ADDR_EXP 92
12134: PUSH
12135: LD_INT 0
12137: ST_TO_ADDR
// sPower := false ;
12138: LD_ADDR_EXP 93
12142: PUSH
12143: LD_INT 0
12145: ST_TO_ADDR
// sRandom := false ;
12146: LD_ADDR_EXP 94
12150: PUSH
12151: LD_INT 0
12153: ST_TO_ADDR
// sShield := false ;
12154: LD_ADDR_EXP 95
12158: PUSH
12159: LD_INT 0
12161: ST_TO_ADDR
// sTime := false ;
12162: LD_ADDR_EXP 96
12166: PUSH
12167: LD_INT 0
12169: ST_TO_ADDR
// sTools := false ;
12170: LD_ADDR_EXP 97
12174: PUSH
12175: LD_INT 0
12177: ST_TO_ADDR
// sSold := false ;
12178: LD_ADDR_EXP 62
12182: PUSH
12183: LD_INT 0
12185: ST_TO_ADDR
// sDiff := false ;
12186: LD_ADDR_EXP 63
12190: PUSH
12191: LD_INT 0
12193: ST_TO_ADDR
// sFog := false ;
12194: LD_ADDR_EXP 66
12198: PUSH
12199: LD_INT 0
12201: ST_TO_ADDR
// sReset := false ;
12202: LD_ADDR_EXP 67
12206: PUSH
12207: LD_INT 0
12209: ST_TO_ADDR
// sSun := false ;
12210: LD_ADDR_EXP 68
12214: PUSH
12215: LD_INT 0
12217: ST_TO_ADDR
// sTiger := false ;
12218: LD_ADDR_EXP 64
12222: PUSH
12223: LD_INT 0
12225: ST_TO_ADDR
// sBomb := false ;
12226: LD_ADDR_EXP 65
12230: PUSH
12231: LD_INT 0
12233: ST_TO_ADDR
// sWound := false ;
12234: LD_ADDR_EXP 73
12238: PUSH
12239: LD_INT 0
12241: ST_TO_ADDR
// sBetray := false ;
12242: LD_ADDR_EXP 77
12246: PUSH
12247: LD_INT 0
12249: ST_TO_ADDR
// sContamin := false ;
12250: LD_ADDR_EXP 78
12254: PUSH
12255: LD_INT 0
12257: ST_TO_ADDR
// sOil := false ;
12258: LD_ADDR_EXP 80
12262: PUSH
12263: LD_INT 0
12265: ST_TO_ADDR
// sStu := false ;
12266: LD_ADDR_EXP 84
12270: PUSH
12271: LD_INT 0
12273: ST_TO_ADDR
// sBazooka := false ;
12274: LD_ADDR_EXP 87
12278: PUSH
12279: LD_INT 0
12281: ST_TO_ADDR
// sMortar := false ;
12282: LD_ADDR_EXP 88
12286: PUSH
12287: LD_INT 0
12289: ST_TO_ADDR
// sRanger := false ;
12290: LD_ADDR_EXP 98
12294: PUSH
12295: LD_INT 0
12297: ST_TO_ADDR
// sComputer := false ;
12298: LD_ADDR_EXP 99
12302: PUSH
12303: LD_INT 0
12305: ST_TO_ADDR
// s30 := false ;
12306: LD_ADDR_EXP 100
12310: PUSH
12311: LD_INT 0
12313: ST_TO_ADDR
// s60 := false ;
12314: LD_ADDR_EXP 101
12318: PUSH
12319: LD_INT 0
12321: ST_TO_ADDR
// end ;
12322: LD_VAR 0 1
12326: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12327: LD_INT 0
12329: PPUSH
12330: PPUSH
12331: PPUSH
12332: PPUSH
12333: PPUSH
12334: PPUSH
12335: PPUSH
// result := [ ] ;
12336: LD_ADDR_VAR 0 2
12340: PUSH
12341: EMPTY
12342: ST_TO_ADDR
// if campaign_id = 1 then
12343: LD_OWVAR 69
12347: PUSH
12348: LD_INT 1
12350: EQUAL
12351: IFFALSE 15517
// begin case mission_number of 1 :
12353: LD_OWVAR 70
12357: PUSH
12358: LD_INT 1
12360: DOUBLE
12361: EQUAL
12362: IFTRUE 12366
12364: GO 12442
12366: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12367: LD_ADDR_VAR 0 2
12371: PUSH
12372: LD_INT 2
12374: PUSH
12375: LD_INT 4
12377: PUSH
12378: LD_INT 11
12380: PUSH
12381: LD_INT 12
12383: PUSH
12384: LD_INT 15
12386: PUSH
12387: LD_INT 16
12389: PUSH
12390: LD_INT 22
12392: PUSH
12393: LD_INT 23
12395: PUSH
12396: LD_INT 26
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 101
12412: PUSH
12413: LD_INT 102
12415: PUSH
12416: LD_INT 106
12418: PUSH
12419: LD_INT 116
12421: PUSH
12422: LD_INT 117
12424: PUSH
12425: LD_INT 118
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: ST_TO_ADDR
12440: GO 15515
12442: LD_INT 2
12444: DOUBLE
12445: EQUAL
12446: IFTRUE 12450
12448: GO 12534
12450: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12451: LD_ADDR_VAR 0 2
12455: PUSH
12456: LD_INT 2
12458: PUSH
12459: LD_INT 4
12461: PUSH
12462: LD_INT 11
12464: PUSH
12465: LD_INT 12
12467: PUSH
12468: LD_INT 15
12470: PUSH
12471: LD_INT 16
12473: PUSH
12474: LD_INT 22
12476: PUSH
12477: LD_INT 23
12479: PUSH
12480: LD_INT 26
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 101
12496: PUSH
12497: LD_INT 102
12499: PUSH
12500: LD_INT 105
12502: PUSH
12503: LD_INT 106
12505: PUSH
12506: LD_INT 108
12508: PUSH
12509: LD_INT 116
12511: PUSH
12512: LD_INT 117
12514: PUSH
12515: LD_INT 118
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: ST_TO_ADDR
12532: GO 15515
12534: LD_INT 3
12536: DOUBLE
12537: EQUAL
12538: IFTRUE 12542
12540: GO 12630
12542: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12543: LD_ADDR_VAR 0 2
12547: PUSH
12548: LD_INT 2
12550: PUSH
12551: LD_INT 4
12553: PUSH
12554: LD_INT 5
12556: PUSH
12557: LD_INT 11
12559: PUSH
12560: LD_INT 12
12562: PUSH
12563: LD_INT 15
12565: PUSH
12566: LD_INT 16
12568: PUSH
12569: LD_INT 22
12571: PUSH
12572: LD_INT 26
12574: PUSH
12575: LD_INT 36
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 101
12592: PUSH
12593: LD_INT 102
12595: PUSH
12596: LD_INT 105
12598: PUSH
12599: LD_INT 106
12601: PUSH
12602: LD_INT 108
12604: PUSH
12605: LD_INT 116
12607: PUSH
12608: LD_INT 117
12610: PUSH
12611: LD_INT 118
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: ST_TO_ADDR
12628: GO 15515
12630: LD_INT 4
12632: DOUBLE
12633: EQUAL
12634: IFTRUE 12638
12636: GO 12734
12638: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12639: LD_ADDR_VAR 0 2
12643: PUSH
12644: LD_INT 2
12646: PUSH
12647: LD_INT 4
12649: PUSH
12650: LD_INT 5
12652: PUSH
12653: LD_INT 8
12655: PUSH
12656: LD_INT 11
12658: PUSH
12659: LD_INT 12
12661: PUSH
12662: LD_INT 15
12664: PUSH
12665: LD_INT 16
12667: PUSH
12668: LD_INT 22
12670: PUSH
12671: LD_INT 23
12673: PUSH
12674: LD_INT 26
12676: PUSH
12677: LD_INT 36
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 101
12696: PUSH
12697: LD_INT 102
12699: PUSH
12700: LD_INT 105
12702: PUSH
12703: LD_INT 106
12705: PUSH
12706: LD_INT 108
12708: PUSH
12709: LD_INT 116
12711: PUSH
12712: LD_INT 117
12714: PUSH
12715: LD_INT 118
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: ST_TO_ADDR
12732: GO 15515
12734: LD_INT 5
12736: DOUBLE
12737: EQUAL
12738: IFTRUE 12742
12740: GO 12854
12742: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12743: LD_ADDR_VAR 0 2
12747: PUSH
12748: LD_INT 2
12750: PUSH
12751: LD_INT 4
12753: PUSH
12754: LD_INT 5
12756: PUSH
12757: LD_INT 6
12759: PUSH
12760: LD_INT 8
12762: PUSH
12763: LD_INT 11
12765: PUSH
12766: LD_INT 12
12768: PUSH
12769: LD_INT 15
12771: PUSH
12772: LD_INT 16
12774: PUSH
12775: LD_INT 22
12777: PUSH
12778: LD_INT 23
12780: PUSH
12781: LD_INT 25
12783: PUSH
12784: LD_INT 26
12786: PUSH
12787: LD_INT 36
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: PUSH
12806: LD_INT 101
12808: PUSH
12809: LD_INT 102
12811: PUSH
12812: LD_INT 105
12814: PUSH
12815: LD_INT 106
12817: PUSH
12818: LD_INT 108
12820: PUSH
12821: LD_INT 109
12823: PUSH
12824: LD_INT 112
12826: PUSH
12827: LD_INT 116
12829: PUSH
12830: LD_INT 117
12832: PUSH
12833: LD_INT 118
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: ST_TO_ADDR
12852: GO 15515
12854: LD_INT 6
12856: DOUBLE
12857: EQUAL
12858: IFTRUE 12862
12860: GO 12994
12862: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12863: LD_ADDR_VAR 0 2
12867: PUSH
12868: LD_INT 2
12870: PUSH
12871: LD_INT 4
12873: PUSH
12874: LD_INT 5
12876: PUSH
12877: LD_INT 6
12879: PUSH
12880: LD_INT 8
12882: PUSH
12883: LD_INT 11
12885: PUSH
12886: LD_INT 12
12888: PUSH
12889: LD_INT 15
12891: PUSH
12892: LD_INT 16
12894: PUSH
12895: LD_INT 20
12897: PUSH
12898: LD_INT 21
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_INT 23
12906: PUSH
12907: LD_INT 25
12909: PUSH
12910: LD_INT 26
12912: PUSH
12913: LD_INT 30
12915: PUSH
12916: LD_INT 31
12918: PUSH
12919: LD_INT 32
12921: PUSH
12922: LD_INT 36
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 101
12948: PUSH
12949: LD_INT 102
12951: PUSH
12952: LD_INT 105
12954: PUSH
12955: LD_INT 106
12957: PUSH
12958: LD_INT 108
12960: PUSH
12961: LD_INT 109
12963: PUSH
12964: LD_INT 112
12966: PUSH
12967: LD_INT 116
12969: PUSH
12970: LD_INT 117
12972: PUSH
12973: LD_INT 118
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: ST_TO_ADDR
12992: GO 15515
12994: LD_INT 7
12996: DOUBLE
12997: EQUAL
12998: IFTRUE 13002
13000: GO 13114
13002: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13003: LD_ADDR_VAR 0 2
13007: PUSH
13008: LD_INT 2
13010: PUSH
13011: LD_INT 4
13013: PUSH
13014: LD_INT 5
13016: PUSH
13017: LD_INT 7
13019: PUSH
13020: LD_INT 11
13022: PUSH
13023: LD_INT 12
13025: PUSH
13026: LD_INT 15
13028: PUSH
13029: LD_INT 16
13031: PUSH
13032: LD_INT 20
13034: PUSH
13035: LD_INT 21
13037: PUSH
13038: LD_INT 22
13040: PUSH
13041: LD_INT 23
13043: PUSH
13044: LD_INT 25
13046: PUSH
13047: LD_INT 26
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: PUSH
13066: LD_INT 101
13068: PUSH
13069: LD_INT 102
13071: PUSH
13072: LD_INT 103
13074: PUSH
13075: LD_INT 105
13077: PUSH
13078: LD_INT 106
13080: PUSH
13081: LD_INT 108
13083: PUSH
13084: LD_INT 112
13086: PUSH
13087: LD_INT 116
13089: PUSH
13090: LD_INT 117
13092: PUSH
13093: LD_INT 118
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: ST_TO_ADDR
13112: GO 15515
13114: LD_INT 8
13116: DOUBLE
13117: EQUAL
13118: IFTRUE 13122
13120: GO 13262
13122: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13123: LD_ADDR_VAR 0 2
13127: PUSH
13128: LD_INT 2
13130: PUSH
13131: LD_INT 4
13133: PUSH
13134: LD_INT 5
13136: PUSH
13137: LD_INT 6
13139: PUSH
13140: LD_INT 7
13142: PUSH
13143: LD_INT 8
13145: PUSH
13146: LD_INT 11
13148: PUSH
13149: LD_INT 12
13151: PUSH
13152: LD_INT 15
13154: PUSH
13155: LD_INT 16
13157: PUSH
13158: LD_INT 20
13160: PUSH
13161: LD_INT 21
13163: PUSH
13164: LD_INT 22
13166: PUSH
13167: LD_INT 23
13169: PUSH
13170: LD_INT 25
13172: PUSH
13173: LD_INT 26
13175: PUSH
13176: LD_INT 30
13178: PUSH
13179: LD_INT 31
13181: PUSH
13182: LD_INT 32
13184: PUSH
13185: LD_INT 36
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 101
13212: PUSH
13213: LD_INT 102
13215: PUSH
13216: LD_INT 103
13218: PUSH
13219: LD_INT 105
13221: PUSH
13222: LD_INT 106
13224: PUSH
13225: LD_INT 108
13227: PUSH
13228: LD_INT 109
13230: PUSH
13231: LD_INT 112
13233: PUSH
13234: LD_INT 116
13236: PUSH
13237: LD_INT 117
13239: PUSH
13240: LD_INT 118
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: ST_TO_ADDR
13260: GO 15515
13262: LD_INT 9
13264: DOUBLE
13265: EQUAL
13266: IFTRUE 13270
13268: GO 13418
13270: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13271: LD_ADDR_VAR 0 2
13275: PUSH
13276: LD_INT 2
13278: PUSH
13279: LD_INT 4
13281: PUSH
13282: LD_INT 5
13284: PUSH
13285: LD_INT 6
13287: PUSH
13288: LD_INT 7
13290: PUSH
13291: LD_INT 8
13293: PUSH
13294: LD_INT 11
13296: PUSH
13297: LD_INT 12
13299: PUSH
13300: LD_INT 15
13302: PUSH
13303: LD_INT 16
13305: PUSH
13306: LD_INT 20
13308: PUSH
13309: LD_INT 21
13311: PUSH
13312: LD_INT 22
13314: PUSH
13315: LD_INT 23
13317: PUSH
13318: LD_INT 25
13320: PUSH
13321: LD_INT 26
13323: PUSH
13324: LD_INT 28
13326: PUSH
13327: LD_INT 30
13329: PUSH
13330: LD_INT 31
13332: PUSH
13333: LD_INT 32
13335: PUSH
13336: LD_INT 36
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 101
13364: PUSH
13365: LD_INT 102
13367: PUSH
13368: LD_INT 103
13370: PUSH
13371: LD_INT 105
13373: PUSH
13374: LD_INT 106
13376: PUSH
13377: LD_INT 108
13379: PUSH
13380: LD_INT 109
13382: PUSH
13383: LD_INT 112
13385: PUSH
13386: LD_INT 114
13388: PUSH
13389: LD_INT 116
13391: PUSH
13392: LD_INT 117
13394: PUSH
13395: LD_INT 118
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: ST_TO_ADDR
13416: GO 15515
13418: LD_INT 10
13420: DOUBLE
13421: EQUAL
13422: IFTRUE 13426
13424: GO 13622
13426: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13427: LD_ADDR_VAR 0 2
13431: PUSH
13432: LD_INT 2
13434: PUSH
13435: LD_INT 4
13437: PUSH
13438: LD_INT 5
13440: PUSH
13441: LD_INT 6
13443: PUSH
13444: LD_INT 7
13446: PUSH
13447: LD_INT 8
13449: PUSH
13450: LD_INT 9
13452: PUSH
13453: LD_INT 10
13455: PUSH
13456: LD_INT 11
13458: PUSH
13459: LD_INT 12
13461: PUSH
13462: LD_INT 13
13464: PUSH
13465: LD_INT 14
13467: PUSH
13468: LD_INT 15
13470: PUSH
13471: LD_INT 16
13473: PUSH
13474: LD_INT 17
13476: PUSH
13477: LD_INT 18
13479: PUSH
13480: LD_INT 19
13482: PUSH
13483: LD_INT 20
13485: PUSH
13486: LD_INT 21
13488: PUSH
13489: LD_INT 22
13491: PUSH
13492: LD_INT 23
13494: PUSH
13495: LD_INT 24
13497: PUSH
13498: LD_INT 25
13500: PUSH
13501: LD_INT 26
13503: PUSH
13504: LD_INT 28
13506: PUSH
13507: LD_INT 30
13509: PUSH
13510: LD_INT 31
13512: PUSH
13513: LD_INT 32
13515: PUSH
13516: LD_INT 36
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 101
13552: PUSH
13553: LD_INT 102
13555: PUSH
13556: LD_INT 103
13558: PUSH
13559: LD_INT 104
13561: PUSH
13562: LD_INT 105
13564: PUSH
13565: LD_INT 106
13567: PUSH
13568: LD_INT 107
13570: PUSH
13571: LD_INT 108
13573: PUSH
13574: LD_INT 109
13576: PUSH
13577: LD_INT 110
13579: PUSH
13580: LD_INT 111
13582: PUSH
13583: LD_INT 112
13585: PUSH
13586: LD_INT 114
13588: PUSH
13589: LD_INT 116
13591: PUSH
13592: LD_INT 117
13594: PUSH
13595: LD_INT 118
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: ST_TO_ADDR
13620: GO 15515
13622: LD_INT 11
13624: DOUBLE
13625: EQUAL
13626: IFTRUE 13630
13628: GO 13834
13630: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13631: LD_ADDR_VAR 0 2
13635: PUSH
13636: LD_INT 2
13638: PUSH
13639: LD_INT 3
13641: PUSH
13642: LD_INT 4
13644: PUSH
13645: LD_INT 5
13647: PUSH
13648: LD_INT 6
13650: PUSH
13651: LD_INT 7
13653: PUSH
13654: LD_INT 8
13656: PUSH
13657: LD_INT 9
13659: PUSH
13660: LD_INT 10
13662: PUSH
13663: LD_INT 11
13665: PUSH
13666: LD_INT 12
13668: PUSH
13669: LD_INT 13
13671: PUSH
13672: LD_INT 14
13674: PUSH
13675: LD_INT 15
13677: PUSH
13678: LD_INT 16
13680: PUSH
13681: LD_INT 17
13683: PUSH
13684: LD_INT 18
13686: PUSH
13687: LD_INT 19
13689: PUSH
13690: LD_INT 20
13692: PUSH
13693: LD_INT 21
13695: PUSH
13696: LD_INT 22
13698: PUSH
13699: LD_INT 23
13701: PUSH
13702: LD_INT 24
13704: PUSH
13705: LD_INT 25
13707: PUSH
13708: LD_INT 26
13710: PUSH
13711: LD_INT 28
13713: PUSH
13714: LD_INT 30
13716: PUSH
13717: LD_INT 31
13719: PUSH
13720: LD_INT 32
13722: PUSH
13723: LD_INT 34
13725: PUSH
13726: LD_INT 36
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: PUSH
13762: LD_INT 101
13764: PUSH
13765: LD_INT 102
13767: PUSH
13768: LD_INT 103
13770: PUSH
13771: LD_INT 104
13773: PUSH
13774: LD_INT 105
13776: PUSH
13777: LD_INT 106
13779: PUSH
13780: LD_INT 107
13782: PUSH
13783: LD_INT 108
13785: PUSH
13786: LD_INT 109
13788: PUSH
13789: LD_INT 110
13791: PUSH
13792: LD_INT 111
13794: PUSH
13795: LD_INT 112
13797: PUSH
13798: LD_INT 114
13800: PUSH
13801: LD_INT 116
13803: PUSH
13804: LD_INT 117
13806: PUSH
13807: LD_INT 118
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: ST_TO_ADDR
13832: GO 15515
13834: LD_INT 12
13836: DOUBLE
13837: EQUAL
13838: IFTRUE 13842
13840: GO 14062
13842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13843: LD_ADDR_VAR 0 2
13847: PUSH
13848: LD_INT 1
13850: PUSH
13851: LD_INT 2
13853: PUSH
13854: LD_INT 3
13856: PUSH
13857: LD_INT 4
13859: PUSH
13860: LD_INT 5
13862: PUSH
13863: LD_INT 6
13865: PUSH
13866: LD_INT 7
13868: PUSH
13869: LD_INT 8
13871: PUSH
13872: LD_INT 9
13874: PUSH
13875: LD_INT 10
13877: PUSH
13878: LD_INT 11
13880: PUSH
13881: LD_INT 12
13883: PUSH
13884: LD_INT 13
13886: PUSH
13887: LD_INT 14
13889: PUSH
13890: LD_INT 15
13892: PUSH
13893: LD_INT 16
13895: PUSH
13896: LD_INT 17
13898: PUSH
13899: LD_INT 18
13901: PUSH
13902: LD_INT 19
13904: PUSH
13905: LD_INT 20
13907: PUSH
13908: LD_INT 21
13910: PUSH
13911: LD_INT 22
13913: PUSH
13914: LD_INT 23
13916: PUSH
13917: LD_INT 24
13919: PUSH
13920: LD_INT 25
13922: PUSH
13923: LD_INT 26
13925: PUSH
13926: LD_INT 27
13928: PUSH
13929: LD_INT 28
13931: PUSH
13932: LD_INT 30
13934: PUSH
13935: LD_INT 31
13937: PUSH
13938: LD_INT 32
13940: PUSH
13941: LD_INT 33
13943: PUSH
13944: LD_INT 34
13946: PUSH
13947: LD_INT 36
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: PUSH
13986: LD_INT 101
13988: PUSH
13989: LD_INT 102
13991: PUSH
13992: LD_INT 103
13994: PUSH
13995: LD_INT 104
13997: PUSH
13998: LD_INT 105
14000: PUSH
14001: LD_INT 106
14003: PUSH
14004: LD_INT 107
14006: PUSH
14007: LD_INT 108
14009: PUSH
14010: LD_INT 109
14012: PUSH
14013: LD_INT 110
14015: PUSH
14016: LD_INT 111
14018: PUSH
14019: LD_INT 112
14021: PUSH
14022: LD_INT 113
14024: PUSH
14025: LD_INT 114
14027: PUSH
14028: LD_INT 116
14030: PUSH
14031: LD_INT 117
14033: PUSH
14034: LD_INT 118
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: ST_TO_ADDR
14060: GO 15515
14062: LD_INT 13
14064: DOUBLE
14065: EQUAL
14066: IFTRUE 14070
14068: GO 14278
14070: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14071: LD_ADDR_VAR 0 2
14075: PUSH
14076: LD_INT 1
14078: PUSH
14079: LD_INT 2
14081: PUSH
14082: LD_INT 3
14084: PUSH
14085: LD_INT 4
14087: PUSH
14088: LD_INT 5
14090: PUSH
14091: LD_INT 8
14093: PUSH
14094: LD_INT 9
14096: PUSH
14097: LD_INT 10
14099: PUSH
14100: LD_INT 11
14102: PUSH
14103: LD_INT 12
14105: PUSH
14106: LD_INT 14
14108: PUSH
14109: LD_INT 15
14111: PUSH
14112: LD_INT 16
14114: PUSH
14115: LD_INT 17
14117: PUSH
14118: LD_INT 18
14120: PUSH
14121: LD_INT 19
14123: PUSH
14124: LD_INT 20
14126: PUSH
14127: LD_INT 21
14129: PUSH
14130: LD_INT 22
14132: PUSH
14133: LD_INT 23
14135: PUSH
14136: LD_INT 24
14138: PUSH
14139: LD_INT 25
14141: PUSH
14142: LD_INT 26
14144: PUSH
14145: LD_INT 27
14147: PUSH
14148: LD_INT 28
14150: PUSH
14151: LD_INT 30
14153: PUSH
14154: LD_INT 31
14156: PUSH
14157: LD_INT 32
14159: PUSH
14160: LD_INT 33
14162: PUSH
14163: LD_INT 34
14165: PUSH
14166: LD_INT 36
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: PUSH
14202: LD_INT 101
14204: PUSH
14205: LD_INT 102
14207: PUSH
14208: LD_INT 103
14210: PUSH
14211: LD_INT 104
14213: PUSH
14214: LD_INT 105
14216: PUSH
14217: LD_INT 106
14219: PUSH
14220: LD_INT 107
14222: PUSH
14223: LD_INT 108
14225: PUSH
14226: LD_INT 109
14228: PUSH
14229: LD_INT 110
14231: PUSH
14232: LD_INT 111
14234: PUSH
14235: LD_INT 112
14237: PUSH
14238: LD_INT 113
14240: PUSH
14241: LD_INT 114
14243: PUSH
14244: LD_INT 116
14246: PUSH
14247: LD_INT 117
14249: PUSH
14250: LD_INT 118
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: ST_TO_ADDR
14276: GO 15515
14278: LD_INT 14
14280: DOUBLE
14281: EQUAL
14282: IFTRUE 14286
14284: GO 14510
14286: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14287: LD_ADDR_VAR 0 2
14291: PUSH
14292: LD_INT 1
14294: PUSH
14295: LD_INT 2
14297: PUSH
14298: LD_INT 3
14300: PUSH
14301: LD_INT 4
14303: PUSH
14304: LD_INT 5
14306: PUSH
14307: LD_INT 6
14309: PUSH
14310: LD_INT 7
14312: PUSH
14313: LD_INT 8
14315: PUSH
14316: LD_INT 9
14318: PUSH
14319: LD_INT 10
14321: PUSH
14322: LD_INT 11
14324: PUSH
14325: LD_INT 12
14327: PUSH
14328: LD_INT 13
14330: PUSH
14331: LD_INT 14
14333: PUSH
14334: LD_INT 15
14336: PUSH
14337: LD_INT 16
14339: PUSH
14340: LD_INT 17
14342: PUSH
14343: LD_INT 18
14345: PUSH
14346: LD_INT 19
14348: PUSH
14349: LD_INT 20
14351: PUSH
14352: LD_INT 21
14354: PUSH
14355: LD_INT 22
14357: PUSH
14358: LD_INT 23
14360: PUSH
14361: LD_INT 24
14363: PUSH
14364: LD_INT 25
14366: PUSH
14367: LD_INT 26
14369: PUSH
14370: LD_INT 27
14372: PUSH
14373: LD_INT 28
14375: PUSH
14376: LD_INT 29
14378: PUSH
14379: LD_INT 30
14381: PUSH
14382: LD_INT 31
14384: PUSH
14385: LD_INT 32
14387: PUSH
14388: LD_INT 33
14390: PUSH
14391: LD_INT 34
14393: PUSH
14394: LD_INT 36
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: PUSH
14434: LD_INT 101
14436: PUSH
14437: LD_INT 102
14439: PUSH
14440: LD_INT 103
14442: PUSH
14443: LD_INT 104
14445: PUSH
14446: LD_INT 105
14448: PUSH
14449: LD_INT 106
14451: PUSH
14452: LD_INT 107
14454: PUSH
14455: LD_INT 108
14457: PUSH
14458: LD_INT 109
14460: PUSH
14461: LD_INT 110
14463: PUSH
14464: LD_INT 111
14466: PUSH
14467: LD_INT 112
14469: PUSH
14470: LD_INT 113
14472: PUSH
14473: LD_INT 114
14475: PUSH
14476: LD_INT 116
14478: PUSH
14479: LD_INT 117
14481: PUSH
14482: LD_INT 118
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: ST_TO_ADDR
14508: GO 15515
14510: LD_INT 15
14512: DOUBLE
14513: EQUAL
14514: IFTRUE 14518
14516: GO 14742
14518: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14519: LD_ADDR_VAR 0 2
14523: PUSH
14524: LD_INT 1
14526: PUSH
14527: LD_INT 2
14529: PUSH
14530: LD_INT 3
14532: PUSH
14533: LD_INT 4
14535: PUSH
14536: LD_INT 5
14538: PUSH
14539: LD_INT 6
14541: PUSH
14542: LD_INT 7
14544: PUSH
14545: LD_INT 8
14547: PUSH
14548: LD_INT 9
14550: PUSH
14551: LD_INT 10
14553: PUSH
14554: LD_INT 11
14556: PUSH
14557: LD_INT 12
14559: PUSH
14560: LD_INT 13
14562: PUSH
14563: LD_INT 14
14565: PUSH
14566: LD_INT 15
14568: PUSH
14569: LD_INT 16
14571: PUSH
14572: LD_INT 17
14574: PUSH
14575: LD_INT 18
14577: PUSH
14578: LD_INT 19
14580: PUSH
14581: LD_INT 20
14583: PUSH
14584: LD_INT 21
14586: PUSH
14587: LD_INT 22
14589: PUSH
14590: LD_INT 23
14592: PUSH
14593: LD_INT 24
14595: PUSH
14596: LD_INT 25
14598: PUSH
14599: LD_INT 26
14601: PUSH
14602: LD_INT 27
14604: PUSH
14605: LD_INT 28
14607: PUSH
14608: LD_INT 29
14610: PUSH
14611: LD_INT 30
14613: PUSH
14614: LD_INT 31
14616: PUSH
14617: LD_INT 32
14619: PUSH
14620: LD_INT 33
14622: PUSH
14623: LD_INT 34
14625: PUSH
14626: LD_INT 36
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: PUSH
14666: LD_INT 101
14668: PUSH
14669: LD_INT 102
14671: PUSH
14672: LD_INT 103
14674: PUSH
14675: LD_INT 104
14677: PUSH
14678: LD_INT 105
14680: PUSH
14681: LD_INT 106
14683: PUSH
14684: LD_INT 107
14686: PUSH
14687: LD_INT 108
14689: PUSH
14690: LD_INT 109
14692: PUSH
14693: LD_INT 110
14695: PUSH
14696: LD_INT 111
14698: PUSH
14699: LD_INT 112
14701: PUSH
14702: LD_INT 113
14704: PUSH
14705: LD_INT 114
14707: PUSH
14708: LD_INT 116
14710: PUSH
14711: LD_INT 117
14713: PUSH
14714: LD_INT 118
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: ST_TO_ADDR
14740: GO 15515
14742: LD_INT 16
14744: DOUBLE
14745: EQUAL
14746: IFTRUE 14750
14748: GO 14886
14750: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14751: LD_ADDR_VAR 0 2
14755: PUSH
14756: LD_INT 2
14758: PUSH
14759: LD_INT 4
14761: PUSH
14762: LD_INT 5
14764: PUSH
14765: LD_INT 7
14767: PUSH
14768: LD_INT 11
14770: PUSH
14771: LD_INT 12
14773: PUSH
14774: LD_INT 15
14776: PUSH
14777: LD_INT 16
14779: PUSH
14780: LD_INT 20
14782: PUSH
14783: LD_INT 21
14785: PUSH
14786: LD_INT 22
14788: PUSH
14789: LD_INT 23
14791: PUSH
14792: LD_INT 25
14794: PUSH
14795: LD_INT 26
14797: PUSH
14798: LD_INT 30
14800: PUSH
14801: LD_INT 31
14803: PUSH
14804: LD_INT 32
14806: PUSH
14807: LD_INT 33
14809: PUSH
14810: LD_INT 34
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 101
14836: PUSH
14837: LD_INT 102
14839: PUSH
14840: LD_INT 103
14842: PUSH
14843: LD_INT 106
14845: PUSH
14846: LD_INT 108
14848: PUSH
14849: LD_INT 112
14851: PUSH
14852: LD_INT 113
14854: PUSH
14855: LD_INT 114
14857: PUSH
14858: LD_INT 116
14860: PUSH
14861: LD_INT 117
14863: PUSH
14864: LD_INT 118
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: ST_TO_ADDR
14884: GO 15515
14886: LD_INT 17
14888: DOUBLE
14889: EQUAL
14890: IFTRUE 14894
14892: GO 15118
14894: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14895: LD_ADDR_VAR 0 2
14899: PUSH
14900: LD_INT 1
14902: PUSH
14903: LD_INT 2
14905: PUSH
14906: LD_INT 3
14908: PUSH
14909: LD_INT 4
14911: PUSH
14912: LD_INT 5
14914: PUSH
14915: LD_INT 6
14917: PUSH
14918: LD_INT 7
14920: PUSH
14921: LD_INT 8
14923: PUSH
14924: LD_INT 9
14926: PUSH
14927: LD_INT 10
14929: PUSH
14930: LD_INT 11
14932: PUSH
14933: LD_INT 12
14935: PUSH
14936: LD_INT 13
14938: PUSH
14939: LD_INT 14
14941: PUSH
14942: LD_INT 15
14944: PUSH
14945: LD_INT 16
14947: PUSH
14948: LD_INT 17
14950: PUSH
14951: LD_INT 18
14953: PUSH
14954: LD_INT 19
14956: PUSH
14957: LD_INT 20
14959: PUSH
14960: LD_INT 21
14962: PUSH
14963: LD_INT 22
14965: PUSH
14966: LD_INT 23
14968: PUSH
14969: LD_INT 24
14971: PUSH
14972: LD_INT 25
14974: PUSH
14975: LD_INT 26
14977: PUSH
14978: LD_INT 27
14980: PUSH
14981: LD_INT 28
14983: PUSH
14984: LD_INT 29
14986: PUSH
14987: LD_INT 30
14989: PUSH
14990: LD_INT 31
14992: PUSH
14993: LD_INT 32
14995: PUSH
14996: LD_INT 33
14998: PUSH
14999: LD_INT 34
15001: PUSH
15002: LD_INT 36
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: PUSH
15042: LD_INT 101
15044: PUSH
15045: LD_INT 102
15047: PUSH
15048: LD_INT 103
15050: PUSH
15051: LD_INT 104
15053: PUSH
15054: LD_INT 105
15056: PUSH
15057: LD_INT 106
15059: PUSH
15060: LD_INT 107
15062: PUSH
15063: LD_INT 108
15065: PUSH
15066: LD_INT 109
15068: PUSH
15069: LD_INT 110
15071: PUSH
15072: LD_INT 111
15074: PUSH
15075: LD_INT 112
15077: PUSH
15078: LD_INT 113
15080: PUSH
15081: LD_INT 114
15083: PUSH
15084: LD_INT 116
15086: PUSH
15087: LD_INT 117
15089: PUSH
15090: LD_INT 118
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: ST_TO_ADDR
15116: GO 15515
15118: LD_INT 18
15120: DOUBLE
15121: EQUAL
15122: IFTRUE 15126
15124: GO 15274
15126: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15127: LD_ADDR_VAR 0 2
15131: PUSH
15132: LD_INT 2
15134: PUSH
15135: LD_INT 4
15137: PUSH
15138: LD_INT 5
15140: PUSH
15141: LD_INT 7
15143: PUSH
15144: LD_INT 11
15146: PUSH
15147: LD_INT 12
15149: PUSH
15150: LD_INT 15
15152: PUSH
15153: LD_INT 16
15155: PUSH
15156: LD_INT 20
15158: PUSH
15159: LD_INT 21
15161: PUSH
15162: LD_INT 22
15164: PUSH
15165: LD_INT 23
15167: PUSH
15168: LD_INT 25
15170: PUSH
15171: LD_INT 26
15173: PUSH
15174: LD_INT 30
15176: PUSH
15177: LD_INT 31
15179: PUSH
15180: LD_INT 32
15182: PUSH
15183: LD_INT 33
15185: PUSH
15186: LD_INT 34
15188: PUSH
15189: LD_INT 35
15191: PUSH
15192: LD_INT 36
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 101
15220: PUSH
15221: LD_INT 102
15223: PUSH
15224: LD_INT 103
15226: PUSH
15227: LD_INT 106
15229: PUSH
15230: LD_INT 108
15232: PUSH
15233: LD_INT 112
15235: PUSH
15236: LD_INT 113
15238: PUSH
15239: LD_INT 114
15241: PUSH
15242: LD_INT 115
15244: PUSH
15245: LD_INT 116
15247: PUSH
15248: LD_INT 117
15250: PUSH
15251: LD_INT 118
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: ST_TO_ADDR
15272: GO 15515
15274: LD_INT 19
15276: DOUBLE
15277: EQUAL
15278: IFTRUE 15282
15280: GO 15514
15282: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15283: LD_ADDR_VAR 0 2
15287: PUSH
15288: LD_INT 1
15290: PUSH
15291: LD_INT 2
15293: PUSH
15294: LD_INT 3
15296: PUSH
15297: LD_INT 4
15299: PUSH
15300: LD_INT 5
15302: PUSH
15303: LD_INT 6
15305: PUSH
15306: LD_INT 7
15308: PUSH
15309: LD_INT 8
15311: PUSH
15312: LD_INT 9
15314: PUSH
15315: LD_INT 10
15317: PUSH
15318: LD_INT 11
15320: PUSH
15321: LD_INT 12
15323: PUSH
15324: LD_INT 13
15326: PUSH
15327: LD_INT 14
15329: PUSH
15330: LD_INT 15
15332: PUSH
15333: LD_INT 16
15335: PUSH
15336: LD_INT 17
15338: PUSH
15339: LD_INT 18
15341: PUSH
15342: LD_INT 19
15344: PUSH
15345: LD_INT 20
15347: PUSH
15348: LD_INT 21
15350: PUSH
15351: LD_INT 22
15353: PUSH
15354: LD_INT 23
15356: PUSH
15357: LD_INT 24
15359: PUSH
15360: LD_INT 25
15362: PUSH
15363: LD_INT 26
15365: PUSH
15366: LD_INT 27
15368: PUSH
15369: LD_INT 28
15371: PUSH
15372: LD_INT 29
15374: PUSH
15375: LD_INT 30
15377: PUSH
15378: LD_INT 31
15380: PUSH
15381: LD_INT 32
15383: PUSH
15384: LD_INT 33
15386: PUSH
15387: LD_INT 34
15389: PUSH
15390: LD_INT 35
15392: PUSH
15393: LD_INT 36
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 101
15436: PUSH
15437: LD_INT 102
15439: PUSH
15440: LD_INT 103
15442: PUSH
15443: LD_INT 104
15445: PUSH
15446: LD_INT 105
15448: PUSH
15449: LD_INT 106
15451: PUSH
15452: LD_INT 107
15454: PUSH
15455: LD_INT 108
15457: PUSH
15458: LD_INT 109
15460: PUSH
15461: LD_INT 110
15463: PUSH
15464: LD_INT 111
15466: PUSH
15467: LD_INT 112
15469: PUSH
15470: LD_INT 113
15472: PUSH
15473: LD_INT 114
15475: PUSH
15476: LD_INT 115
15478: PUSH
15479: LD_INT 116
15481: PUSH
15482: LD_INT 117
15484: PUSH
15485: LD_INT 118
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: ST_TO_ADDR
15512: GO 15515
15514: POP
// end else
15515: GO 15746
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15517: LD_ADDR_VAR 0 2
15521: PUSH
15522: LD_INT 1
15524: PUSH
15525: LD_INT 2
15527: PUSH
15528: LD_INT 3
15530: PUSH
15531: LD_INT 4
15533: PUSH
15534: LD_INT 5
15536: PUSH
15537: LD_INT 6
15539: PUSH
15540: LD_INT 7
15542: PUSH
15543: LD_INT 8
15545: PUSH
15546: LD_INT 9
15548: PUSH
15549: LD_INT 10
15551: PUSH
15552: LD_INT 11
15554: PUSH
15555: LD_INT 12
15557: PUSH
15558: LD_INT 13
15560: PUSH
15561: LD_INT 14
15563: PUSH
15564: LD_INT 15
15566: PUSH
15567: LD_INT 16
15569: PUSH
15570: LD_INT 17
15572: PUSH
15573: LD_INT 18
15575: PUSH
15576: LD_INT 19
15578: PUSH
15579: LD_INT 20
15581: PUSH
15582: LD_INT 21
15584: PUSH
15585: LD_INT 22
15587: PUSH
15588: LD_INT 23
15590: PUSH
15591: LD_INT 24
15593: PUSH
15594: LD_INT 25
15596: PUSH
15597: LD_INT 26
15599: PUSH
15600: LD_INT 27
15602: PUSH
15603: LD_INT 28
15605: PUSH
15606: LD_INT 29
15608: PUSH
15609: LD_INT 30
15611: PUSH
15612: LD_INT 31
15614: PUSH
15615: LD_INT 32
15617: PUSH
15618: LD_INT 33
15620: PUSH
15621: LD_INT 34
15623: PUSH
15624: LD_INT 35
15626: PUSH
15627: LD_INT 36
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 101
15670: PUSH
15671: LD_INT 102
15673: PUSH
15674: LD_INT 103
15676: PUSH
15677: LD_INT 104
15679: PUSH
15680: LD_INT 105
15682: PUSH
15683: LD_INT 106
15685: PUSH
15686: LD_INT 107
15688: PUSH
15689: LD_INT 108
15691: PUSH
15692: LD_INT 109
15694: PUSH
15695: LD_INT 110
15697: PUSH
15698: LD_INT 111
15700: PUSH
15701: LD_INT 112
15703: PUSH
15704: LD_INT 113
15706: PUSH
15707: LD_INT 114
15709: PUSH
15710: LD_INT 115
15712: PUSH
15713: LD_INT 116
15715: PUSH
15716: LD_INT 117
15718: PUSH
15719: LD_INT 118
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: ST_TO_ADDR
// if result then
15746: LD_VAR 0 2
15750: IFFALSE 16536
// begin normal :=  ;
15752: LD_ADDR_VAR 0 5
15756: PUSH
15757: LD_STRING 
15759: ST_TO_ADDR
// hardcore :=  ;
15760: LD_ADDR_VAR 0 6
15764: PUSH
15765: LD_STRING 
15767: ST_TO_ADDR
// active :=  ;
15768: LD_ADDR_VAR 0 7
15772: PUSH
15773: LD_STRING 
15775: ST_TO_ADDR
// for i = 1 to normalCounter do
15776: LD_ADDR_VAR 0 8
15780: PUSH
15781: DOUBLE
15782: LD_INT 1
15784: DEC
15785: ST_TO_ADDR
15786: LD_EXP 46
15790: PUSH
15791: FOR_TO
15792: IFFALSE 15893
// begin tmp := 0 ;
15794: LD_ADDR_VAR 0 3
15798: PUSH
15799: LD_STRING 0
15801: ST_TO_ADDR
// if result [ 1 ] then
15802: LD_VAR 0 2
15806: PUSH
15807: LD_INT 1
15809: ARRAY
15810: IFFALSE 15875
// if result [ 1 ] [ 1 ] = i then
15812: LD_VAR 0 2
15816: PUSH
15817: LD_INT 1
15819: ARRAY
15820: PUSH
15821: LD_INT 1
15823: ARRAY
15824: PUSH
15825: LD_VAR 0 8
15829: EQUAL
15830: IFFALSE 15875
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15832: LD_ADDR_VAR 0 2
15836: PUSH
15837: LD_VAR 0 2
15841: PPUSH
15842: LD_INT 1
15844: PPUSH
15845: LD_VAR 0 2
15849: PUSH
15850: LD_INT 1
15852: ARRAY
15853: PPUSH
15854: LD_INT 1
15856: PPUSH
15857: CALL_OW 3
15861: PPUSH
15862: CALL_OW 1
15866: ST_TO_ADDR
// tmp := 1 ;
15867: LD_ADDR_VAR 0 3
15871: PUSH
15872: LD_STRING 1
15874: ST_TO_ADDR
// end ; normal := normal & tmp ;
15875: LD_ADDR_VAR 0 5
15879: PUSH
15880: LD_VAR 0 5
15884: PUSH
15885: LD_VAR 0 3
15889: STR
15890: ST_TO_ADDR
// end ;
15891: GO 15791
15893: POP
15894: POP
// for i = 1 to hardcoreCounter do
15895: LD_ADDR_VAR 0 8
15899: PUSH
15900: DOUBLE
15901: LD_INT 1
15903: DEC
15904: ST_TO_ADDR
15905: LD_EXP 47
15909: PUSH
15910: FOR_TO
15911: IFFALSE 16016
// begin tmp := 0 ;
15913: LD_ADDR_VAR 0 3
15917: PUSH
15918: LD_STRING 0
15920: ST_TO_ADDR
// if result [ 2 ] then
15921: LD_VAR 0 2
15925: PUSH
15926: LD_INT 2
15928: ARRAY
15929: IFFALSE 15998
// if result [ 2 ] [ 1 ] = 100 + i then
15931: LD_VAR 0 2
15935: PUSH
15936: LD_INT 2
15938: ARRAY
15939: PUSH
15940: LD_INT 1
15942: ARRAY
15943: PUSH
15944: LD_INT 100
15946: PUSH
15947: LD_VAR 0 8
15951: PLUS
15952: EQUAL
15953: IFFALSE 15998
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15955: LD_ADDR_VAR 0 2
15959: PUSH
15960: LD_VAR 0 2
15964: PPUSH
15965: LD_INT 2
15967: PPUSH
15968: LD_VAR 0 2
15972: PUSH
15973: LD_INT 2
15975: ARRAY
15976: PPUSH
15977: LD_INT 1
15979: PPUSH
15980: CALL_OW 3
15984: PPUSH
15985: CALL_OW 1
15989: ST_TO_ADDR
// tmp := 1 ;
15990: LD_ADDR_VAR 0 3
15994: PUSH
15995: LD_STRING 1
15997: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15998: LD_ADDR_VAR 0 6
16002: PUSH
16003: LD_VAR 0 6
16007: PUSH
16008: LD_VAR 0 3
16012: STR
16013: ST_TO_ADDR
// end ;
16014: GO 15910
16016: POP
16017: POP
// if isGameLoad then
16018: LD_VAR 0 1
16022: IFFALSE 16497
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16024: LD_ADDR_VAR 0 4
16028: PUSH
16029: LD_EXP 50
16033: PUSH
16034: LD_EXP 49
16038: PUSH
16039: LD_EXP 51
16043: PUSH
16044: LD_EXP 48
16048: PUSH
16049: LD_EXP 52
16053: PUSH
16054: LD_EXP 53
16058: PUSH
16059: LD_EXP 54
16063: PUSH
16064: LD_EXP 55
16068: PUSH
16069: LD_EXP 56
16073: PUSH
16074: LD_EXP 57
16078: PUSH
16079: LD_EXP 58
16083: PUSH
16084: LD_EXP 59
16088: PUSH
16089: LD_EXP 60
16093: PUSH
16094: LD_EXP 61
16098: PUSH
16099: LD_EXP 69
16103: PUSH
16104: LD_EXP 70
16108: PUSH
16109: LD_EXP 71
16113: PUSH
16114: LD_EXP 72
16118: PUSH
16119: LD_EXP 74
16123: PUSH
16124: LD_EXP 75
16128: PUSH
16129: LD_EXP 76
16133: PUSH
16134: LD_EXP 79
16138: PUSH
16139: LD_EXP 81
16143: PUSH
16144: LD_EXP 82
16148: PUSH
16149: LD_EXP 83
16153: PUSH
16154: LD_EXP 85
16158: PUSH
16159: LD_EXP 86
16163: PUSH
16164: LD_EXP 89
16168: PUSH
16169: LD_EXP 90
16173: PUSH
16174: LD_EXP 91
16178: PUSH
16179: LD_EXP 92
16183: PUSH
16184: LD_EXP 93
16188: PUSH
16189: LD_EXP 94
16193: PUSH
16194: LD_EXP 95
16198: PUSH
16199: LD_EXP 96
16203: PUSH
16204: LD_EXP 97
16208: PUSH
16209: LD_EXP 62
16213: PUSH
16214: LD_EXP 63
16218: PUSH
16219: LD_EXP 66
16223: PUSH
16224: LD_EXP 67
16228: PUSH
16229: LD_EXP 68
16233: PUSH
16234: LD_EXP 64
16238: PUSH
16239: LD_EXP 65
16243: PUSH
16244: LD_EXP 73
16248: PUSH
16249: LD_EXP 77
16253: PUSH
16254: LD_EXP 78
16258: PUSH
16259: LD_EXP 80
16263: PUSH
16264: LD_EXP 84
16268: PUSH
16269: LD_EXP 87
16273: PUSH
16274: LD_EXP 88
16278: PUSH
16279: LD_EXP 98
16283: PUSH
16284: LD_EXP 99
16288: PUSH
16289: LD_EXP 100
16293: PUSH
16294: LD_EXP 101
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: ST_TO_ADDR
// tmp :=  ;
16355: LD_ADDR_VAR 0 3
16359: PUSH
16360: LD_STRING 
16362: ST_TO_ADDR
// for i = 1 to normalCounter do
16363: LD_ADDR_VAR 0 8
16367: PUSH
16368: DOUBLE
16369: LD_INT 1
16371: DEC
16372: ST_TO_ADDR
16373: LD_EXP 46
16377: PUSH
16378: FOR_TO
16379: IFFALSE 16415
// begin if flags [ i ] then
16381: LD_VAR 0 4
16385: PUSH
16386: LD_VAR 0 8
16390: ARRAY
16391: IFFALSE 16413
// tmp := tmp & i & ; ;
16393: LD_ADDR_VAR 0 3
16397: PUSH
16398: LD_VAR 0 3
16402: PUSH
16403: LD_VAR 0 8
16407: STR
16408: PUSH
16409: LD_STRING ;
16411: STR
16412: ST_TO_ADDR
// end ;
16413: GO 16378
16415: POP
16416: POP
// for i = 1 to hardcoreCounter do
16417: LD_ADDR_VAR 0 8
16421: PUSH
16422: DOUBLE
16423: LD_INT 1
16425: DEC
16426: ST_TO_ADDR
16427: LD_EXP 47
16431: PUSH
16432: FOR_TO
16433: IFFALSE 16479
// begin if flags [ normalCounter + i ] then
16435: LD_VAR 0 4
16439: PUSH
16440: LD_EXP 46
16444: PUSH
16445: LD_VAR 0 8
16449: PLUS
16450: ARRAY
16451: IFFALSE 16477
// tmp := tmp & ( 100 + i ) & ; ;
16453: LD_ADDR_VAR 0 3
16457: PUSH
16458: LD_VAR 0 3
16462: PUSH
16463: LD_INT 100
16465: PUSH
16466: LD_VAR 0 8
16470: PLUS
16471: STR
16472: PUSH
16473: LD_STRING ;
16475: STR
16476: ST_TO_ADDR
// end ;
16477: GO 16432
16479: POP
16480: POP
// if tmp then
16481: LD_VAR 0 3
16485: IFFALSE 16497
// active := tmp ;
16487: LD_ADDR_VAR 0 7
16491: PUSH
16492: LD_VAR 0 3
16496: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16497: LD_STRING getStreamItemsFromMission("
16499: PUSH
16500: LD_VAR 0 5
16504: STR
16505: PUSH
16506: LD_STRING ","
16508: STR
16509: PUSH
16510: LD_VAR 0 6
16514: STR
16515: PUSH
16516: LD_STRING ","
16518: STR
16519: PUSH
16520: LD_VAR 0 7
16524: STR
16525: PUSH
16526: LD_STRING ")
16528: STR
16529: PPUSH
16530: CALL_OW 559
// end else
16534: GO 16543
// ToLua ( getStreamItemsFromMission("","","") ) ;
16536: LD_STRING getStreamItemsFromMission("","","")
16538: PPUSH
16539: CALL_OW 559
// end ;
16543: LD_VAR 0 2
16547: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16548: LD_EXP 45
16552: PUSH
16553: LD_EXP 50
16557: AND
16558: IFFALSE 16682
16560: GO 16562
16562: DISABLE
16563: LD_INT 0
16565: PPUSH
16566: PPUSH
// begin enable ;
16567: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16568: LD_ADDR_VAR 0 2
16572: PUSH
16573: LD_INT 22
16575: PUSH
16576: LD_OWVAR 2
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: LD_INT 2
16587: PUSH
16588: LD_INT 34
16590: PUSH
16591: LD_INT 7
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 34
16600: PUSH
16601: LD_INT 45
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 34
16610: PUSH
16611: LD_INT 28
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 34
16620: PUSH
16621: LD_INT 47
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PPUSH
16639: CALL_OW 69
16643: ST_TO_ADDR
// if not tmp then
16644: LD_VAR 0 2
16648: NOT
16649: IFFALSE 16653
// exit ;
16651: GO 16682
// for i in tmp do
16653: LD_ADDR_VAR 0 1
16657: PUSH
16658: LD_VAR 0 2
16662: PUSH
16663: FOR_IN
16664: IFFALSE 16680
// begin SetLives ( i , 0 ) ;
16666: LD_VAR 0 1
16670: PPUSH
16671: LD_INT 0
16673: PPUSH
16674: CALL_OW 234
// end ;
16678: GO 16663
16680: POP
16681: POP
// end ;
16682: PPOPN 2
16684: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16685: LD_EXP 45
16689: PUSH
16690: LD_EXP 51
16694: AND
16695: IFFALSE 16779
16697: GO 16699
16699: DISABLE
16700: LD_INT 0
16702: PPUSH
16703: PPUSH
// begin enable ;
16704: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16705: LD_ADDR_VAR 0 2
16709: PUSH
16710: LD_INT 22
16712: PUSH
16713: LD_OWVAR 2
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 32
16724: PUSH
16725: LD_INT 3
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PPUSH
16736: CALL_OW 69
16740: ST_TO_ADDR
// if not tmp then
16741: LD_VAR 0 2
16745: NOT
16746: IFFALSE 16750
// exit ;
16748: GO 16779
// for i in tmp do
16750: LD_ADDR_VAR 0 1
16754: PUSH
16755: LD_VAR 0 2
16759: PUSH
16760: FOR_IN
16761: IFFALSE 16777
// begin SetLives ( i , 0 ) ;
16763: LD_VAR 0 1
16767: PPUSH
16768: LD_INT 0
16770: PPUSH
16771: CALL_OW 234
// end ;
16775: GO 16760
16777: POP
16778: POP
// end ;
16779: PPOPN 2
16781: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16782: LD_EXP 45
16786: PUSH
16787: LD_EXP 48
16791: AND
16792: IFFALSE 16885
16794: GO 16796
16796: DISABLE
16797: LD_INT 0
16799: PPUSH
// begin enable ;
16800: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16801: LD_ADDR_VAR 0 1
16805: PUSH
16806: LD_INT 22
16808: PUSH
16809: LD_OWVAR 2
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 2
16820: PUSH
16821: LD_INT 25
16823: PUSH
16824: LD_INT 5
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 25
16833: PUSH
16834: LD_INT 9
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 25
16843: PUSH
16844: LD_INT 8
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PPUSH
16861: CALL_OW 69
16865: PUSH
16866: FOR_IN
16867: IFFALSE 16883
// begin SetClass ( i , 1 ) ;
16869: LD_VAR 0 1
16873: PPUSH
16874: LD_INT 1
16876: PPUSH
16877: CALL_OW 336
// end ;
16881: GO 16866
16883: POP
16884: POP
// end ;
16885: PPOPN 1
16887: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16888: LD_EXP 45
16892: PUSH
16893: LD_EXP 49
16897: AND
16898: PUSH
16899: LD_OWVAR 65
16903: PUSH
16904: LD_INT 7
16906: LESS
16907: AND
16908: IFFALSE 16922
16910: GO 16912
16912: DISABLE
// begin enable ;
16913: ENABLE
// game_speed := 7 ;
16914: LD_ADDR_OWVAR 65
16918: PUSH
16919: LD_INT 7
16921: ST_TO_ADDR
// end ;
16922: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16923: LD_EXP 45
16927: PUSH
16928: LD_EXP 52
16932: AND
16933: IFFALSE 17135
16935: GO 16937
16937: DISABLE
16938: LD_INT 0
16940: PPUSH
16941: PPUSH
16942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16943: LD_ADDR_VAR 0 3
16947: PUSH
16948: LD_INT 81
16950: PUSH
16951: LD_OWVAR 2
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: LD_INT 21
16962: PUSH
16963: LD_INT 1
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PPUSH
16974: CALL_OW 69
16978: ST_TO_ADDR
// if not tmp then
16979: LD_VAR 0 3
16983: NOT
16984: IFFALSE 16988
// exit ;
16986: GO 17135
// if tmp > 5 then
16988: LD_VAR 0 3
16992: PUSH
16993: LD_INT 5
16995: GREATER
16996: IFFALSE 17008
// k := 5 else
16998: LD_ADDR_VAR 0 2
17002: PUSH
17003: LD_INT 5
17005: ST_TO_ADDR
17006: GO 17018
// k := tmp ;
17008: LD_ADDR_VAR 0 2
17012: PUSH
17013: LD_VAR 0 3
17017: ST_TO_ADDR
// for i := 1 to k do
17018: LD_ADDR_VAR 0 1
17022: PUSH
17023: DOUBLE
17024: LD_INT 1
17026: DEC
17027: ST_TO_ADDR
17028: LD_VAR 0 2
17032: PUSH
17033: FOR_TO
17034: IFFALSE 17133
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17036: LD_VAR 0 3
17040: PUSH
17041: LD_VAR 0 1
17045: ARRAY
17046: PPUSH
17047: LD_VAR 0 1
17051: PUSH
17052: LD_INT 4
17054: MOD
17055: PUSH
17056: LD_INT 1
17058: PLUS
17059: PPUSH
17060: CALL_OW 259
17064: PUSH
17065: LD_INT 10
17067: LESS
17068: IFFALSE 17131
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17070: LD_VAR 0 3
17074: PUSH
17075: LD_VAR 0 1
17079: ARRAY
17080: PPUSH
17081: LD_VAR 0 1
17085: PUSH
17086: LD_INT 4
17088: MOD
17089: PUSH
17090: LD_INT 1
17092: PLUS
17093: PPUSH
17094: LD_VAR 0 3
17098: PUSH
17099: LD_VAR 0 1
17103: ARRAY
17104: PPUSH
17105: LD_VAR 0 1
17109: PUSH
17110: LD_INT 4
17112: MOD
17113: PUSH
17114: LD_INT 1
17116: PLUS
17117: PPUSH
17118: CALL_OW 259
17122: PUSH
17123: LD_INT 1
17125: PLUS
17126: PPUSH
17127: CALL_OW 237
17131: GO 17033
17133: POP
17134: POP
// end ;
17135: PPOPN 3
17137: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17138: LD_EXP 45
17142: PUSH
17143: LD_EXP 53
17147: AND
17148: IFFALSE 17168
17150: GO 17152
17152: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17153: LD_INT 4
17155: PPUSH
17156: LD_OWVAR 2
17160: PPUSH
17161: LD_INT 0
17163: PPUSH
17164: CALL_OW 324
17168: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17169: LD_EXP 45
17173: PUSH
17174: LD_EXP 82
17178: AND
17179: IFFALSE 17199
17181: GO 17183
17183: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17184: LD_INT 19
17186: PPUSH
17187: LD_OWVAR 2
17191: PPUSH
17192: LD_INT 0
17194: PPUSH
17195: CALL_OW 324
17199: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17200: LD_EXP 45
17204: PUSH
17205: LD_EXP 54
17209: AND
17210: IFFALSE 17312
17212: GO 17214
17214: DISABLE
17215: LD_INT 0
17217: PPUSH
17218: PPUSH
// begin enable ;
17219: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17220: LD_ADDR_VAR 0 2
17224: PUSH
17225: LD_INT 22
17227: PUSH
17228: LD_OWVAR 2
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 2
17239: PUSH
17240: LD_INT 34
17242: PUSH
17243: LD_INT 11
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 34
17252: PUSH
17253: LD_INT 30
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PPUSH
17269: CALL_OW 69
17273: ST_TO_ADDR
// if not tmp then
17274: LD_VAR 0 2
17278: NOT
17279: IFFALSE 17283
// exit ;
17281: GO 17312
// for i in tmp do
17283: LD_ADDR_VAR 0 1
17287: PUSH
17288: LD_VAR 0 2
17292: PUSH
17293: FOR_IN
17294: IFFALSE 17310
// begin SetLives ( i , 0 ) ;
17296: LD_VAR 0 1
17300: PPUSH
17301: LD_INT 0
17303: PPUSH
17304: CALL_OW 234
// end ;
17308: GO 17293
17310: POP
17311: POP
// end ;
17312: PPOPN 2
17314: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17315: LD_EXP 45
17319: PUSH
17320: LD_EXP 55
17324: AND
17325: IFFALSE 17345
17327: GO 17329
17329: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17330: LD_INT 32
17332: PPUSH
17333: LD_OWVAR 2
17337: PPUSH
17338: LD_INT 0
17340: PPUSH
17341: CALL_OW 324
17345: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17346: LD_EXP 45
17350: PUSH
17351: LD_EXP 56
17355: AND
17356: IFFALSE 17537
17358: GO 17360
17360: DISABLE
17361: LD_INT 0
17363: PPUSH
17364: PPUSH
17365: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17366: LD_ADDR_VAR 0 2
17370: PUSH
17371: LD_INT 22
17373: PUSH
17374: LD_OWVAR 2
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 33
17385: PUSH
17386: LD_INT 3
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PPUSH
17397: CALL_OW 69
17401: ST_TO_ADDR
// if not tmp then
17402: LD_VAR 0 2
17406: NOT
17407: IFFALSE 17411
// exit ;
17409: GO 17537
// side := 0 ;
17411: LD_ADDR_VAR 0 3
17415: PUSH
17416: LD_INT 0
17418: ST_TO_ADDR
// for i := 1 to 8 do
17419: LD_ADDR_VAR 0 1
17423: PUSH
17424: DOUBLE
17425: LD_INT 1
17427: DEC
17428: ST_TO_ADDR
17429: LD_INT 8
17431: PUSH
17432: FOR_TO
17433: IFFALSE 17481
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17435: LD_OWVAR 2
17439: PUSH
17440: LD_VAR 0 1
17444: NONEQUAL
17445: PUSH
17446: LD_OWVAR 2
17450: PPUSH
17451: LD_VAR 0 1
17455: PPUSH
17456: CALL_OW 81
17460: PUSH
17461: LD_INT 2
17463: EQUAL
17464: AND
17465: IFFALSE 17479
// begin side := i ;
17467: LD_ADDR_VAR 0 3
17471: PUSH
17472: LD_VAR 0 1
17476: ST_TO_ADDR
// break ;
17477: GO 17481
// end ;
17479: GO 17432
17481: POP
17482: POP
// if not side then
17483: LD_VAR 0 3
17487: NOT
17488: IFFALSE 17492
// exit ;
17490: GO 17537
// for i := 1 to tmp do
17492: LD_ADDR_VAR 0 1
17496: PUSH
17497: DOUBLE
17498: LD_INT 1
17500: DEC
17501: ST_TO_ADDR
17502: LD_VAR 0 2
17506: PUSH
17507: FOR_TO
17508: IFFALSE 17535
// if Prob ( 60 ) then
17510: LD_INT 60
17512: PPUSH
17513: CALL_OW 13
17517: IFFALSE 17533
// SetSide ( i , side ) ;
17519: LD_VAR 0 1
17523: PPUSH
17524: LD_VAR 0 3
17528: PPUSH
17529: CALL_OW 235
17533: GO 17507
17535: POP
17536: POP
// end ;
17537: PPOPN 3
17539: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17540: LD_EXP 45
17544: PUSH
17545: LD_EXP 58
17549: AND
17550: IFFALSE 17669
17552: GO 17554
17554: DISABLE
17555: LD_INT 0
17557: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17558: LD_ADDR_VAR 0 1
17562: PUSH
17563: LD_INT 22
17565: PUSH
17566: LD_OWVAR 2
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 21
17577: PUSH
17578: LD_INT 1
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 3
17587: PUSH
17588: LD_INT 23
17590: PUSH
17591: LD_INT 0
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: PPUSH
17607: CALL_OW 69
17611: PUSH
17612: FOR_IN
17613: IFFALSE 17667
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17615: LD_VAR 0 1
17619: PPUSH
17620: CALL_OW 257
17624: PUSH
17625: LD_INT 1
17627: PUSH
17628: LD_INT 2
17630: PUSH
17631: LD_INT 3
17633: PUSH
17634: LD_INT 4
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: IN
17643: IFFALSE 17665
// SetClass ( un , rand ( 1 , 4 ) ) ;
17645: LD_VAR 0 1
17649: PPUSH
17650: LD_INT 1
17652: PPUSH
17653: LD_INT 4
17655: PPUSH
17656: CALL_OW 12
17660: PPUSH
17661: CALL_OW 336
17665: GO 17612
17667: POP
17668: POP
// end ;
17669: PPOPN 1
17671: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17672: LD_EXP 45
17676: PUSH
17677: LD_EXP 57
17681: AND
17682: IFFALSE 17761
17684: GO 17686
17686: DISABLE
17687: LD_INT 0
17689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17690: LD_ADDR_VAR 0 1
17694: PUSH
17695: LD_INT 22
17697: PUSH
17698: LD_OWVAR 2
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 21
17709: PUSH
17710: LD_INT 3
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 69
17725: ST_TO_ADDR
// if not tmp then
17726: LD_VAR 0 1
17730: NOT
17731: IFFALSE 17735
// exit ;
17733: GO 17761
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17735: LD_VAR 0 1
17739: PUSH
17740: LD_INT 1
17742: PPUSH
17743: LD_VAR 0 1
17747: PPUSH
17748: CALL_OW 12
17752: ARRAY
17753: PPUSH
17754: LD_INT 100
17756: PPUSH
17757: CALL_OW 234
// end ;
17761: PPOPN 1
17763: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17764: LD_EXP 45
17768: PUSH
17769: LD_EXP 59
17773: AND
17774: IFFALSE 17872
17776: GO 17778
17778: DISABLE
17779: LD_INT 0
17781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17782: LD_ADDR_VAR 0 1
17786: PUSH
17787: LD_INT 22
17789: PUSH
17790: LD_OWVAR 2
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 21
17801: PUSH
17802: LD_INT 1
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PPUSH
17813: CALL_OW 69
17817: ST_TO_ADDR
// if not tmp then
17818: LD_VAR 0 1
17822: NOT
17823: IFFALSE 17827
// exit ;
17825: GO 17872
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17827: LD_VAR 0 1
17831: PUSH
17832: LD_INT 1
17834: PPUSH
17835: LD_VAR 0 1
17839: PPUSH
17840: CALL_OW 12
17844: ARRAY
17845: PPUSH
17846: LD_INT 1
17848: PPUSH
17849: LD_INT 4
17851: PPUSH
17852: CALL_OW 12
17856: PPUSH
17857: LD_INT 3000
17859: PPUSH
17860: LD_INT 9000
17862: PPUSH
17863: CALL_OW 12
17867: PPUSH
17868: CALL_OW 492
// end ;
17872: PPOPN 1
17874: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17875: LD_EXP 45
17879: PUSH
17880: LD_EXP 60
17884: AND
17885: IFFALSE 17905
17887: GO 17889
17889: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17890: LD_INT 1
17892: PPUSH
17893: LD_OWVAR 2
17897: PPUSH
17898: LD_INT 0
17900: PPUSH
17901: CALL_OW 324
17905: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17906: LD_EXP 45
17910: PUSH
17911: LD_EXP 61
17915: AND
17916: IFFALSE 17999
17918: GO 17920
17920: DISABLE
17921: LD_INT 0
17923: PPUSH
17924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17925: LD_ADDR_VAR 0 2
17929: PUSH
17930: LD_INT 22
17932: PUSH
17933: LD_OWVAR 2
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 21
17944: PUSH
17945: LD_INT 3
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PPUSH
17956: CALL_OW 69
17960: ST_TO_ADDR
// if not tmp then
17961: LD_VAR 0 2
17965: NOT
17966: IFFALSE 17970
// exit ;
17968: GO 17999
// for i in tmp do
17970: LD_ADDR_VAR 0 1
17974: PUSH
17975: LD_VAR 0 2
17979: PUSH
17980: FOR_IN
17981: IFFALSE 17997
// SetBLevel ( i , 10 ) ;
17983: LD_VAR 0 1
17987: PPUSH
17988: LD_INT 10
17990: PPUSH
17991: CALL_OW 241
17995: GO 17980
17997: POP
17998: POP
// end ;
17999: PPOPN 2
18001: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18002: LD_EXP 45
18006: PUSH
18007: LD_EXP 62
18011: AND
18012: IFFALSE 18123
18014: GO 18016
18016: DISABLE
18017: LD_INT 0
18019: PPUSH
18020: PPUSH
18021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18022: LD_ADDR_VAR 0 3
18026: PUSH
18027: LD_INT 22
18029: PUSH
18030: LD_OWVAR 2
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 25
18041: PUSH
18042: LD_INT 1
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PPUSH
18053: CALL_OW 69
18057: ST_TO_ADDR
// if not tmp then
18058: LD_VAR 0 3
18062: NOT
18063: IFFALSE 18067
// exit ;
18065: GO 18123
// un := tmp [ rand ( 1 , tmp ) ] ;
18067: LD_ADDR_VAR 0 2
18071: PUSH
18072: LD_VAR 0 3
18076: PUSH
18077: LD_INT 1
18079: PPUSH
18080: LD_VAR 0 3
18084: PPUSH
18085: CALL_OW 12
18089: ARRAY
18090: ST_TO_ADDR
// if Crawls ( un ) then
18091: LD_VAR 0 2
18095: PPUSH
18096: CALL_OW 318
18100: IFFALSE 18111
// ComWalk ( un ) ;
18102: LD_VAR 0 2
18106: PPUSH
18107: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18111: LD_VAR 0 2
18115: PPUSH
18116: LD_INT 5
18118: PPUSH
18119: CALL_OW 336
// end ;
18123: PPOPN 3
18125: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18126: LD_EXP 45
18130: PUSH
18131: LD_EXP 63
18135: AND
18136: PUSH
18137: LD_OWVAR 67
18141: PUSH
18142: LD_INT 4
18144: LESS
18145: AND
18146: IFFALSE 18165
18148: GO 18150
18150: DISABLE
// begin Difficulty := Difficulty + 1 ;
18151: LD_ADDR_OWVAR 67
18155: PUSH
18156: LD_OWVAR 67
18160: PUSH
18161: LD_INT 1
18163: PLUS
18164: ST_TO_ADDR
// end ;
18165: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18166: LD_EXP 45
18170: PUSH
18171: LD_EXP 64
18175: AND
18176: IFFALSE 18279
18178: GO 18180
18180: DISABLE
18181: LD_INT 0
18183: PPUSH
// begin for i := 1 to 5 do
18184: LD_ADDR_VAR 0 1
18188: PUSH
18189: DOUBLE
18190: LD_INT 1
18192: DEC
18193: ST_TO_ADDR
18194: LD_INT 5
18196: PUSH
18197: FOR_TO
18198: IFFALSE 18277
// begin uc_nation := nation_nature ;
18200: LD_ADDR_OWVAR 21
18204: PUSH
18205: LD_INT 0
18207: ST_TO_ADDR
// uc_side := 0 ;
18208: LD_ADDR_OWVAR 20
18212: PUSH
18213: LD_INT 0
18215: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18216: LD_ADDR_OWVAR 29
18220: PUSH
18221: LD_INT 12
18223: PUSH
18224: LD_INT 12
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: ST_TO_ADDR
// hc_agressivity := 20 ;
18231: LD_ADDR_OWVAR 35
18235: PUSH
18236: LD_INT 20
18238: ST_TO_ADDR
// hc_class := class_tiger ;
18239: LD_ADDR_OWVAR 28
18243: PUSH
18244: LD_INT 14
18246: ST_TO_ADDR
// hc_gallery :=  ;
18247: LD_ADDR_OWVAR 33
18251: PUSH
18252: LD_STRING 
18254: ST_TO_ADDR
// hc_name :=  ;
18255: LD_ADDR_OWVAR 26
18259: PUSH
18260: LD_STRING 
18262: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18263: CALL_OW 44
18267: PPUSH
18268: LD_INT 0
18270: PPUSH
18271: CALL_OW 51
// end ;
18275: GO 18197
18277: POP
18278: POP
// end ;
18279: PPOPN 1
18281: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18282: LD_EXP 45
18286: PUSH
18287: LD_EXP 65
18291: AND
18292: IFFALSE 18301
18294: GO 18296
18296: DISABLE
// StreamSibBomb ;
18297: CALL 18302 0 0
18301: END
// export function StreamSibBomb ; var i , x , y ; begin
18302: LD_INT 0
18304: PPUSH
18305: PPUSH
18306: PPUSH
18307: PPUSH
// result := false ;
18308: LD_ADDR_VAR 0 1
18312: PUSH
18313: LD_INT 0
18315: ST_TO_ADDR
// for i := 1 to 16 do
18316: LD_ADDR_VAR 0 2
18320: PUSH
18321: DOUBLE
18322: LD_INT 1
18324: DEC
18325: ST_TO_ADDR
18326: LD_INT 16
18328: PUSH
18329: FOR_TO
18330: IFFALSE 18529
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18332: LD_ADDR_VAR 0 3
18336: PUSH
18337: LD_INT 10
18339: PUSH
18340: LD_INT 20
18342: PUSH
18343: LD_INT 30
18345: PUSH
18346: LD_INT 40
18348: PUSH
18349: LD_INT 50
18351: PUSH
18352: LD_INT 60
18354: PUSH
18355: LD_INT 70
18357: PUSH
18358: LD_INT 80
18360: PUSH
18361: LD_INT 90
18363: PUSH
18364: LD_INT 100
18366: PUSH
18367: LD_INT 110
18369: PUSH
18370: LD_INT 120
18372: PUSH
18373: LD_INT 130
18375: PUSH
18376: LD_INT 140
18378: PUSH
18379: LD_INT 150
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 1
18401: PPUSH
18402: LD_INT 15
18404: PPUSH
18405: CALL_OW 12
18409: ARRAY
18410: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18411: LD_ADDR_VAR 0 4
18415: PUSH
18416: LD_INT 10
18418: PUSH
18419: LD_INT 20
18421: PUSH
18422: LD_INT 30
18424: PUSH
18425: LD_INT 40
18427: PUSH
18428: LD_INT 50
18430: PUSH
18431: LD_INT 60
18433: PUSH
18434: LD_INT 70
18436: PUSH
18437: LD_INT 80
18439: PUSH
18440: LD_INT 90
18442: PUSH
18443: LD_INT 100
18445: PUSH
18446: LD_INT 110
18448: PUSH
18449: LD_INT 120
18451: PUSH
18452: LD_INT 130
18454: PUSH
18455: LD_INT 140
18457: PUSH
18458: LD_INT 150
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 1
18480: PPUSH
18481: LD_INT 15
18483: PPUSH
18484: CALL_OW 12
18488: ARRAY
18489: ST_TO_ADDR
// if ValidHex ( x , y ) then
18490: LD_VAR 0 3
18494: PPUSH
18495: LD_VAR 0 4
18499: PPUSH
18500: CALL_OW 488
18504: IFFALSE 18527
// begin result := [ x , y ] ;
18506: LD_ADDR_VAR 0 1
18510: PUSH
18511: LD_VAR 0 3
18515: PUSH
18516: LD_VAR 0 4
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: ST_TO_ADDR
// break ;
18525: GO 18529
// end ; end ;
18527: GO 18329
18529: POP
18530: POP
// if result then
18531: LD_VAR 0 1
18535: IFFALSE 18595
// begin ToLua ( playSibBomb() ) ;
18537: LD_STRING playSibBomb()
18539: PPUSH
18540: CALL_OW 559
// wait ( 0 0$14 ) ;
18544: LD_INT 490
18546: PPUSH
18547: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18551: LD_VAR 0 1
18555: PUSH
18556: LD_INT 1
18558: ARRAY
18559: PPUSH
18560: LD_VAR 0 1
18564: PUSH
18565: LD_INT 2
18567: ARRAY
18568: PPUSH
18569: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18573: LD_VAR 0 1
18577: PUSH
18578: LD_INT 1
18580: ARRAY
18581: PPUSH
18582: LD_VAR 0 1
18586: PUSH
18587: LD_INT 2
18589: ARRAY
18590: PPUSH
18591: CALL_OW 429
// end ; end ;
18595: LD_VAR 0 1
18599: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18600: LD_EXP 45
18604: PUSH
18605: LD_EXP 67
18609: AND
18610: IFFALSE 18622
18612: GO 18614
18614: DISABLE
// YouLost (  ) ;
18615: LD_STRING 
18617: PPUSH
18618: CALL_OW 104
18622: END
// every 0 0$1 trigger StreamModeActive and sFog do
18623: LD_EXP 45
18627: PUSH
18628: LD_EXP 66
18632: AND
18633: IFFALSE 18647
18635: GO 18637
18637: DISABLE
// FogOff ( your_side ) ;
18638: LD_OWVAR 2
18642: PPUSH
18643: CALL_OW 344
18647: END
// every 0 0$1 trigger StreamModeActive and sSun do
18648: LD_EXP 45
18652: PUSH
18653: LD_EXP 68
18657: AND
18658: IFFALSE 18686
18660: GO 18662
18662: DISABLE
// begin solar_recharge_percent := 0 ;
18663: LD_ADDR_OWVAR 79
18667: PUSH
18668: LD_INT 0
18670: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18671: LD_INT 10500
18673: PPUSH
18674: CALL_OW 67
// solar_recharge_percent := 100 ;
18678: LD_ADDR_OWVAR 79
18682: PUSH
18683: LD_INT 100
18685: ST_TO_ADDR
// end ;
18686: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18687: LD_EXP 45
18691: PUSH
18692: LD_EXP 69
18696: AND
18697: IFFALSE 18936
18699: GO 18701
18701: DISABLE
18702: LD_INT 0
18704: PPUSH
18705: PPUSH
18706: PPUSH
// begin tmp := [ ] ;
18707: LD_ADDR_VAR 0 3
18711: PUSH
18712: EMPTY
18713: ST_TO_ADDR
// for i := 1 to 6 do
18714: LD_ADDR_VAR 0 1
18718: PUSH
18719: DOUBLE
18720: LD_INT 1
18722: DEC
18723: ST_TO_ADDR
18724: LD_INT 6
18726: PUSH
18727: FOR_TO
18728: IFFALSE 18833
// begin uc_nation := nation_nature ;
18730: LD_ADDR_OWVAR 21
18734: PUSH
18735: LD_INT 0
18737: ST_TO_ADDR
// uc_side := 0 ;
18738: LD_ADDR_OWVAR 20
18742: PUSH
18743: LD_INT 0
18745: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18746: LD_ADDR_OWVAR 29
18750: PUSH
18751: LD_INT 12
18753: PUSH
18754: LD_INT 12
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: ST_TO_ADDR
// hc_agressivity := 20 ;
18761: LD_ADDR_OWVAR 35
18765: PUSH
18766: LD_INT 20
18768: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18769: LD_ADDR_OWVAR 28
18773: PUSH
18774: LD_INT 17
18776: ST_TO_ADDR
// hc_gallery :=  ;
18777: LD_ADDR_OWVAR 33
18781: PUSH
18782: LD_STRING 
18784: ST_TO_ADDR
// hc_name :=  ;
18785: LD_ADDR_OWVAR 26
18789: PUSH
18790: LD_STRING 
18792: ST_TO_ADDR
// un := CreateHuman ;
18793: LD_ADDR_VAR 0 2
18797: PUSH
18798: CALL_OW 44
18802: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18803: LD_VAR 0 2
18807: PPUSH
18808: LD_INT 1
18810: PPUSH
18811: CALL_OW 51
// tmp := tmp ^ un ;
18815: LD_ADDR_VAR 0 3
18819: PUSH
18820: LD_VAR 0 3
18824: PUSH
18825: LD_VAR 0 2
18829: ADD
18830: ST_TO_ADDR
// end ;
18831: GO 18727
18833: POP
18834: POP
// repeat wait ( 0 0$1 ) ;
18835: LD_INT 35
18837: PPUSH
18838: CALL_OW 67
// for un in tmp do
18842: LD_ADDR_VAR 0 2
18846: PUSH
18847: LD_VAR 0 3
18851: PUSH
18852: FOR_IN
18853: IFFALSE 18927
// begin if IsDead ( un ) then
18855: LD_VAR 0 2
18859: PPUSH
18860: CALL_OW 301
18864: IFFALSE 18884
// begin tmp := tmp diff un ;
18866: LD_ADDR_VAR 0 3
18870: PUSH
18871: LD_VAR 0 3
18875: PUSH
18876: LD_VAR 0 2
18880: DIFF
18881: ST_TO_ADDR
// continue ;
18882: GO 18852
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18884: LD_VAR 0 2
18888: PPUSH
18889: LD_INT 3
18891: PUSH
18892: LD_INT 22
18894: PUSH
18895: LD_INT 0
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PPUSH
18906: CALL_OW 69
18910: PPUSH
18911: LD_VAR 0 2
18915: PPUSH
18916: CALL_OW 74
18920: PPUSH
18921: CALL_OW 115
// end ;
18925: GO 18852
18927: POP
18928: POP
// until not tmp ;
18929: LD_VAR 0 3
18933: NOT
18934: IFFALSE 18835
// end ;
18936: PPOPN 3
18938: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18939: LD_EXP 45
18943: PUSH
18944: LD_EXP 70
18948: AND
18949: IFFALSE 19003
18951: GO 18953
18953: DISABLE
// begin ToLua ( displayTroll(); ) ;
18954: LD_STRING displayTroll();
18956: PPUSH
18957: CALL_OW 559
// wait ( 3 3$00 ) ;
18961: LD_INT 6300
18963: PPUSH
18964: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18968: LD_STRING hideTroll();
18970: PPUSH
18971: CALL_OW 559
// wait ( 1 1$00 ) ;
18975: LD_INT 2100
18977: PPUSH
18978: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18982: LD_STRING displayTroll();
18984: PPUSH
18985: CALL_OW 559
// wait ( 1 1$00 ) ;
18989: LD_INT 2100
18991: PPUSH
18992: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18996: LD_STRING hideTroll();
18998: PPUSH
18999: CALL_OW 559
// end ;
19003: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19004: LD_EXP 45
19008: PUSH
19009: LD_EXP 71
19013: AND
19014: IFFALSE 19077
19016: GO 19018
19018: DISABLE
19019: LD_INT 0
19021: PPUSH
// begin p := 0 ;
19022: LD_ADDR_VAR 0 1
19026: PUSH
19027: LD_INT 0
19029: ST_TO_ADDR
// repeat game_speed := 1 ;
19030: LD_ADDR_OWVAR 65
19034: PUSH
19035: LD_INT 1
19037: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19038: LD_INT 35
19040: PPUSH
19041: CALL_OW 67
// p := p + 1 ;
19045: LD_ADDR_VAR 0 1
19049: PUSH
19050: LD_VAR 0 1
19054: PUSH
19055: LD_INT 1
19057: PLUS
19058: ST_TO_ADDR
// until p >= 60 ;
19059: LD_VAR 0 1
19063: PUSH
19064: LD_INT 60
19066: GREATEREQUAL
19067: IFFALSE 19030
// game_speed := 4 ;
19069: LD_ADDR_OWVAR 65
19073: PUSH
19074: LD_INT 4
19076: ST_TO_ADDR
// end ;
19077: PPOPN 1
19079: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19080: LD_EXP 45
19084: PUSH
19085: LD_EXP 72
19089: AND
19090: IFFALSE 19236
19092: GO 19094
19094: DISABLE
19095: LD_INT 0
19097: PPUSH
19098: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19099: LD_ADDR_VAR 0 1
19103: PUSH
19104: LD_INT 22
19106: PUSH
19107: LD_OWVAR 2
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 2
19118: PUSH
19119: LD_INT 30
19121: PUSH
19122: LD_INT 0
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 30
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: LIST
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PPUSH
19148: CALL_OW 69
19152: ST_TO_ADDR
// if not depot then
19153: LD_VAR 0 1
19157: NOT
19158: IFFALSE 19162
// exit ;
19160: GO 19236
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19162: LD_ADDR_VAR 0 2
19166: PUSH
19167: LD_VAR 0 1
19171: PUSH
19172: LD_INT 1
19174: PPUSH
19175: LD_VAR 0 1
19179: PPUSH
19180: CALL_OW 12
19184: ARRAY
19185: PPUSH
19186: CALL_OW 274
19190: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19191: LD_VAR 0 2
19195: PPUSH
19196: LD_INT 1
19198: PPUSH
19199: LD_INT 0
19201: PPUSH
19202: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19206: LD_VAR 0 2
19210: PPUSH
19211: LD_INT 2
19213: PPUSH
19214: LD_INT 0
19216: PPUSH
19217: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19221: LD_VAR 0 2
19225: PPUSH
19226: LD_INT 3
19228: PPUSH
19229: LD_INT 0
19231: PPUSH
19232: CALL_OW 277
// end ;
19236: PPOPN 2
19238: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19239: LD_EXP 45
19243: PUSH
19244: LD_EXP 73
19248: AND
19249: IFFALSE 19346
19251: GO 19253
19253: DISABLE
19254: LD_INT 0
19256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19257: LD_ADDR_VAR 0 1
19261: PUSH
19262: LD_INT 22
19264: PUSH
19265: LD_OWVAR 2
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 21
19276: PUSH
19277: LD_INT 1
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 3
19286: PUSH
19287: LD_INT 23
19289: PUSH
19290: LD_INT 0
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: LIST
19305: PPUSH
19306: CALL_OW 69
19310: ST_TO_ADDR
// if not tmp then
19311: LD_VAR 0 1
19315: NOT
19316: IFFALSE 19320
// exit ;
19318: GO 19346
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19320: LD_VAR 0 1
19324: PUSH
19325: LD_INT 1
19327: PPUSH
19328: LD_VAR 0 1
19332: PPUSH
19333: CALL_OW 12
19337: ARRAY
19338: PPUSH
19339: LD_INT 200
19341: PPUSH
19342: CALL_OW 234
// end ;
19346: PPOPN 1
19348: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19349: LD_EXP 45
19353: PUSH
19354: LD_EXP 74
19358: AND
19359: IFFALSE 19438
19361: GO 19363
19363: DISABLE
19364: LD_INT 0
19366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19367: LD_ADDR_VAR 0 1
19371: PUSH
19372: LD_INT 22
19374: PUSH
19375: LD_OWVAR 2
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 21
19386: PUSH
19387: LD_INT 2
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PPUSH
19398: CALL_OW 69
19402: ST_TO_ADDR
// if not tmp then
19403: LD_VAR 0 1
19407: NOT
19408: IFFALSE 19412
// exit ;
19410: GO 19438
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19412: LD_VAR 0 1
19416: PUSH
19417: LD_INT 1
19419: PPUSH
19420: LD_VAR 0 1
19424: PPUSH
19425: CALL_OW 12
19429: ARRAY
19430: PPUSH
19431: LD_INT 60
19433: PPUSH
19434: CALL_OW 234
// end ;
19438: PPOPN 1
19440: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19441: LD_EXP 45
19445: PUSH
19446: LD_EXP 75
19450: AND
19451: IFFALSE 19550
19453: GO 19455
19455: DISABLE
19456: LD_INT 0
19458: PPUSH
19459: PPUSH
// begin enable ;
19460: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19461: LD_ADDR_VAR 0 1
19465: PUSH
19466: LD_INT 22
19468: PUSH
19469: LD_OWVAR 2
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 61
19480: PUSH
19481: EMPTY
19482: LIST
19483: PUSH
19484: LD_INT 33
19486: PUSH
19487: LD_INT 2
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: LIST
19498: PPUSH
19499: CALL_OW 69
19503: ST_TO_ADDR
// if not tmp then
19504: LD_VAR 0 1
19508: NOT
19509: IFFALSE 19513
// exit ;
19511: GO 19550
// for i in tmp do
19513: LD_ADDR_VAR 0 2
19517: PUSH
19518: LD_VAR 0 1
19522: PUSH
19523: FOR_IN
19524: IFFALSE 19548
// if IsControledBy ( i ) then
19526: LD_VAR 0 2
19530: PPUSH
19531: CALL_OW 312
19535: IFFALSE 19546
// ComUnlink ( i ) ;
19537: LD_VAR 0 2
19541: PPUSH
19542: CALL_OW 136
19546: GO 19523
19548: POP
19549: POP
// end ;
19550: PPOPN 2
19552: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19553: LD_EXP 45
19557: PUSH
19558: LD_EXP 76
19562: AND
19563: IFFALSE 19703
19565: GO 19567
19567: DISABLE
19568: LD_INT 0
19570: PPUSH
19571: PPUSH
// begin ToLua ( displayPowell(); ) ;
19572: LD_STRING displayPowell();
19574: PPUSH
19575: CALL_OW 559
// uc_side := 0 ;
19579: LD_ADDR_OWVAR 20
19583: PUSH
19584: LD_INT 0
19586: ST_TO_ADDR
// uc_nation := 2 ;
19587: LD_ADDR_OWVAR 21
19591: PUSH
19592: LD_INT 2
19594: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19595: LD_ADDR_OWVAR 37
19599: PUSH
19600: LD_INT 14
19602: ST_TO_ADDR
// vc_engine := engine_siberite ;
19603: LD_ADDR_OWVAR 39
19607: PUSH
19608: LD_INT 3
19610: ST_TO_ADDR
// vc_control := control_apeman ;
19611: LD_ADDR_OWVAR 38
19615: PUSH
19616: LD_INT 5
19618: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19619: LD_ADDR_OWVAR 40
19623: PUSH
19624: LD_INT 29
19626: ST_TO_ADDR
// un := CreateVehicle ;
19627: LD_ADDR_VAR 0 2
19631: PUSH
19632: CALL_OW 45
19636: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19637: LD_VAR 0 2
19641: PPUSH
19642: LD_INT 1
19644: PPUSH
19645: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19649: LD_INT 35
19651: PPUSH
19652: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19656: LD_VAR 0 2
19660: PPUSH
19661: LD_INT 22
19663: PUSH
19664: LD_OWVAR 2
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PPUSH
19673: CALL_OW 69
19677: PPUSH
19678: LD_VAR 0 2
19682: PPUSH
19683: CALL_OW 74
19687: PPUSH
19688: CALL_OW 115
// until IsDead ( un ) ;
19692: LD_VAR 0 2
19696: PPUSH
19697: CALL_OW 301
19701: IFFALSE 19649
// end ;
19703: PPOPN 2
19705: END
// every 0 0$1 trigger StreamModeActive and sStu do
19706: LD_EXP 45
19710: PUSH
19711: LD_EXP 84
19715: AND
19716: IFFALSE 19732
19718: GO 19720
19720: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19721: LD_STRING displayStucuk();
19723: PPUSH
19724: CALL_OW 559
// ResetFog ;
19728: CALL_OW 335
// end ;
19732: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19733: LD_EXP 45
19737: PUSH
19738: LD_EXP 77
19742: AND
19743: IFFALSE 19884
19745: GO 19747
19747: DISABLE
19748: LD_INT 0
19750: PPUSH
19751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19752: LD_ADDR_VAR 0 2
19756: PUSH
19757: LD_INT 22
19759: PUSH
19760: LD_OWVAR 2
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 21
19771: PUSH
19772: LD_INT 1
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PPUSH
19783: CALL_OW 69
19787: ST_TO_ADDR
// if not tmp then
19788: LD_VAR 0 2
19792: NOT
19793: IFFALSE 19797
// exit ;
19795: GO 19884
// un := tmp [ rand ( 1 , tmp ) ] ;
19797: LD_ADDR_VAR 0 1
19801: PUSH
19802: LD_VAR 0 2
19806: PUSH
19807: LD_INT 1
19809: PPUSH
19810: LD_VAR 0 2
19814: PPUSH
19815: CALL_OW 12
19819: ARRAY
19820: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19821: LD_VAR 0 1
19825: PPUSH
19826: LD_INT 0
19828: PPUSH
19829: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19833: LD_VAR 0 1
19837: PPUSH
19838: LD_OWVAR 3
19842: PUSH
19843: LD_VAR 0 1
19847: DIFF
19848: PPUSH
19849: LD_VAR 0 1
19853: PPUSH
19854: CALL_OW 74
19858: PPUSH
19859: CALL_OW 115
// wait ( 0 0$20 ) ;
19863: LD_INT 700
19865: PPUSH
19866: CALL_OW 67
// SetSide ( un , your_side ) ;
19870: LD_VAR 0 1
19874: PPUSH
19875: LD_OWVAR 2
19879: PPUSH
19880: CALL_OW 235
// end ;
19884: PPOPN 2
19886: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19887: LD_EXP 45
19891: PUSH
19892: LD_EXP 78
19896: AND
19897: IFFALSE 20003
19899: GO 19901
19901: DISABLE
19902: LD_INT 0
19904: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19905: LD_ADDR_VAR 0 1
19909: PUSH
19910: LD_INT 22
19912: PUSH
19913: LD_OWVAR 2
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 2
19924: PUSH
19925: LD_INT 30
19927: PUSH
19928: LD_INT 0
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 30
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: LIST
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PPUSH
19954: CALL_OW 69
19958: ST_TO_ADDR
// if not depot then
19959: LD_VAR 0 1
19963: NOT
19964: IFFALSE 19968
// exit ;
19966: GO 20003
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19968: LD_VAR 0 1
19972: PUSH
19973: LD_INT 1
19975: ARRAY
19976: PPUSH
19977: CALL_OW 250
19981: PPUSH
19982: LD_VAR 0 1
19986: PUSH
19987: LD_INT 1
19989: ARRAY
19990: PPUSH
19991: CALL_OW 251
19995: PPUSH
19996: LD_INT 70
19998: PPUSH
19999: CALL_OW 495
// end ;
20003: PPOPN 1
20005: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20006: LD_EXP 45
20010: PUSH
20011: LD_EXP 79
20015: AND
20016: IFFALSE 20227
20018: GO 20020
20020: DISABLE
20021: LD_INT 0
20023: PPUSH
20024: PPUSH
20025: PPUSH
20026: PPUSH
20027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20028: LD_ADDR_VAR 0 5
20032: PUSH
20033: LD_INT 22
20035: PUSH
20036: LD_OWVAR 2
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 21
20047: PUSH
20048: LD_INT 1
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PPUSH
20059: CALL_OW 69
20063: ST_TO_ADDR
// if not tmp then
20064: LD_VAR 0 5
20068: NOT
20069: IFFALSE 20073
// exit ;
20071: GO 20227
// for i in tmp do
20073: LD_ADDR_VAR 0 1
20077: PUSH
20078: LD_VAR 0 5
20082: PUSH
20083: FOR_IN
20084: IFFALSE 20225
// begin d := rand ( 0 , 5 ) ;
20086: LD_ADDR_VAR 0 4
20090: PUSH
20091: LD_INT 0
20093: PPUSH
20094: LD_INT 5
20096: PPUSH
20097: CALL_OW 12
20101: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20102: LD_ADDR_VAR 0 2
20106: PUSH
20107: LD_VAR 0 1
20111: PPUSH
20112: CALL_OW 250
20116: PPUSH
20117: LD_VAR 0 4
20121: PPUSH
20122: LD_INT 3
20124: PPUSH
20125: LD_INT 12
20127: PPUSH
20128: CALL_OW 12
20132: PPUSH
20133: CALL_OW 272
20137: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20138: LD_ADDR_VAR 0 3
20142: PUSH
20143: LD_VAR 0 1
20147: PPUSH
20148: CALL_OW 251
20152: PPUSH
20153: LD_VAR 0 4
20157: PPUSH
20158: LD_INT 3
20160: PPUSH
20161: LD_INT 12
20163: PPUSH
20164: CALL_OW 12
20168: PPUSH
20169: CALL_OW 273
20173: ST_TO_ADDR
// if ValidHex ( x , y ) then
20174: LD_VAR 0 2
20178: PPUSH
20179: LD_VAR 0 3
20183: PPUSH
20184: CALL_OW 488
20188: IFFALSE 20223
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20190: LD_VAR 0 1
20194: PPUSH
20195: LD_VAR 0 2
20199: PPUSH
20200: LD_VAR 0 3
20204: PPUSH
20205: LD_INT 3
20207: PPUSH
20208: LD_INT 6
20210: PPUSH
20211: CALL_OW 12
20215: PPUSH
20216: LD_INT 1
20218: PPUSH
20219: CALL_OW 483
// end ;
20223: GO 20083
20225: POP
20226: POP
// end ;
20227: PPOPN 5
20229: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20230: LD_EXP 45
20234: PUSH
20235: LD_EXP 80
20239: AND
20240: IFFALSE 20334
20242: GO 20244
20244: DISABLE
20245: LD_INT 0
20247: PPUSH
20248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20249: LD_ADDR_VAR 0 2
20253: PUSH
20254: LD_INT 22
20256: PUSH
20257: LD_OWVAR 2
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 32
20268: PUSH
20269: LD_INT 1
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 21
20278: PUSH
20279: LD_INT 2
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: LIST
20290: PPUSH
20291: CALL_OW 69
20295: ST_TO_ADDR
// if not tmp then
20296: LD_VAR 0 2
20300: NOT
20301: IFFALSE 20305
// exit ;
20303: GO 20334
// for i in tmp do
20305: LD_ADDR_VAR 0 1
20309: PUSH
20310: LD_VAR 0 2
20314: PUSH
20315: FOR_IN
20316: IFFALSE 20332
// SetFuel ( i , 0 ) ;
20318: LD_VAR 0 1
20322: PPUSH
20323: LD_INT 0
20325: PPUSH
20326: CALL_OW 240
20330: GO 20315
20332: POP
20333: POP
// end ;
20334: PPOPN 2
20336: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20337: LD_EXP 45
20341: PUSH
20342: LD_EXP 81
20346: AND
20347: IFFALSE 20413
20349: GO 20351
20351: DISABLE
20352: LD_INT 0
20354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20355: LD_ADDR_VAR 0 1
20359: PUSH
20360: LD_INT 22
20362: PUSH
20363: LD_OWVAR 2
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 30
20374: PUSH
20375: LD_INT 29
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PPUSH
20386: CALL_OW 69
20390: ST_TO_ADDR
// if not tmp then
20391: LD_VAR 0 1
20395: NOT
20396: IFFALSE 20400
// exit ;
20398: GO 20413
// DestroyUnit ( tmp [ 1 ] ) ;
20400: LD_VAR 0 1
20404: PUSH
20405: LD_INT 1
20407: ARRAY
20408: PPUSH
20409: CALL_OW 65
// end ;
20413: PPOPN 1
20415: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20416: LD_EXP 45
20420: PUSH
20421: LD_EXP 83
20425: AND
20426: IFFALSE 20555
20428: GO 20430
20430: DISABLE
20431: LD_INT 0
20433: PPUSH
// begin uc_side := 0 ;
20434: LD_ADDR_OWVAR 20
20438: PUSH
20439: LD_INT 0
20441: ST_TO_ADDR
// uc_nation := nation_arabian ;
20442: LD_ADDR_OWVAR 21
20446: PUSH
20447: LD_INT 2
20449: ST_TO_ADDR
// hc_gallery :=  ;
20450: LD_ADDR_OWVAR 33
20454: PUSH
20455: LD_STRING 
20457: ST_TO_ADDR
// hc_name :=  ;
20458: LD_ADDR_OWVAR 26
20462: PUSH
20463: LD_STRING 
20465: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20466: LD_INT 1
20468: PPUSH
20469: LD_INT 11
20471: PPUSH
20472: LD_INT 10
20474: PPUSH
20475: CALL_OW 380
// un := CreateHuman ;
20479: LD_ADDR_VAR 0 1
20483: PUSH
20484: CALL_OW 44
20488: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20489: LD_VAR 0 1
20493: PPUSH
20494: LD_INT 1
20496: PPUSH
20497: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20501: LD_INT 35
20503: PPUSH
20504: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20508: LD_VAR 0 1
20512: PPUSH
20513: LD_INT 22
20515: PUSH
20516: LD_OWVAR 2
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PPUSH
20525: CALL_OW 69
20529: PPUSH
20530: LD_VAR 0 1
20534: PPUSH
20535: CALL_OW 74
20539: PPUSH
20540: CALL_OW 115
// until IsDead ( un ) ;
20544: LD_VAR 0 1
20548: PPUSH
20549: CALL_OW 301
20553: IFFALSE 20501
// end ;
20555: PPOPN 1
20557: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20558: LD_EXP 45
20562: PUSH
20563: LD_EXP 85
20567: AND
20568: IFFALSE 20580
20570: GO 20572
20572: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20573: LD_STRING earthquake(getX(game), 0, 32)
20575: PPUSH
20576: CALL_OW 559
20580: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20581: LD_EXP 45
20585: PUSH
20586: LD_EXP 86
20590: AND
20591: IFFALSE 20682
20593: GO 20595
20595: DISABLE
20596: LD_INT 0
20598: PPUSH
// begin enable ;
20599: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20600: LD_ADDR_VAR 0 1
20604: PUSH
20605: LD_INT 22
20607: PUSH
20608: LD_OWVAR 2
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 21
20619: PUSH
20620: LD_INT 2
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 33
20629: PUSH
20630: LD_INT 3
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: LIST
20641: PPUSH
20642: CALL_OW 69
20646: ST_TO_ADDR
// if not tmp then
20647: LD_VAR 0 1
20651: NOT
20652: IFFALSE 20656
// exit ;
20654: GO 20682
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20656: LD_VAR 0 1
20660: PUSH
20661: LD_INT 1
20663: PPUSH
20664: LD_VAR 0 1
20668: PPUSH
20669: CALL_OW 12
20673: ARRAY
20674: PPUSH
20675: LD_INT 1
20677: PPUSH
20678: CALL_OW 234
// end ;
20682: PPOPN 1
20684: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20685: LD_EXP 45
20689: PUSH
20690: LD_EXP 87
20694: AND
20695: IFFALSE 20836
20697: GO 20699
20699: DISABLE
20700: LD_INT 0
20702: PPUSH
20703: PPUSH
20704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20705: LD_ADDR_VAR 0 3
20709: PUSH
20710: LD_INT 22
20712: PUSH
20713: LD_OWVAR 2
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 25
20724: PUSH
20725: LD_INT 1
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PPUSH
20736: CALL_OW 69
20740: ST_TO_ADDR
// if not tmp then
20741: LD_VAR 0 3
20745: NOT
20746: IFFALSE 20750
// exit ;
20748: GO 20836
// un := tmp [ rand ( 1 , tmp ) ] ;
20750: LD_ADDR_VAR 0 2
20754: PUSH
20755: LD_VAR 0 3
20759: PUSH
20760: LD_INT 1
20762: PPUSH
20763: LD_VAR 0 3
20767: PPUSH
20768: CALL_OW 12
20772: ARRAY
20773: ST_TO_ADDR
// if Crawls ( un ) then
20774: LD_VAR 0 2
20778: PPUSH
20779: CALL_OW 318
20783: IFFALSE 20794
// ComWalk ( un ) ;
20785: LD_VAR 0 2
20789: PPUSH
20790: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20794: LD_VAR 0 2
20798: PPUSH
20799: LD_INT 9
20801: PPUSH
20802: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20806: LD_INT 28
20808: PPUSH
20809: LD_OWVAR 2
20813: PPUSH
20814: LD_INT 2
20816: PPUSH
20817: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20821: LD_INT 29
20823: PPUSH
20824: LD_OWVAR 2
20828: PPUSH
20829: LD_INT 2
20831: PPUSH
20832: CALL_OW 322
// end ;
20836: PPOPN 3
20838: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20839: LD_EXP 45
20843: PUSH
20844: LD_EXP 88
20848: AND
20849: IFFALSE 20960
20851: GO 20853
20853: DISABLE
20854: LD_INT 0
20856: PPUSH
20857: PPUSH
20858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20859: LD_ADDR_VAR 0 3
20863: PUSH
20864: LD_INT 22
20866: PUSH
20867: LD_OWVAR 2
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 25
20878: PUSH
20879: LD_INT 1
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PPUSH
20890: CALL_OW 69
20894: ST_TO_ADDR
// if not tmp then
20895: LD_VAR 0 3
20899: NOT
20900: IFFALSE 20904
// exit ;
20902: GO 20960
// un := tmp [ rand ( 1 , tmp ) ] ;
20904: LD_ADDR_VAR 0 2
20908: PUSH
20909: LD_VAR 0 3
20913: PUSH
20914: LD_INT 1
20916: PPUSH
20917: LD_VAR 0 3
20921: PPUSH
20922: CALL_OW 12
20926: ARRAY
20927: ST_TO_ADDR
// if Crawls ( un ) then
20928: LD_VAR 0 2
20932: PPUSH
20933: CALL_OW 318
20937: IFFALSE 20948
// ComWalk ( un ) ;
20939: LD_VAR 0 2
20943: PPUSH
20944: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20948: LD_VAR 0 2
20952: PPUSH
20953: LD_INT 8
20955: PPUSH
20956: CALL_OW 336
// end ;
20960: PPOPN 3
20962: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20963: LD_EXP 45
20967: PUSH
20968: LD_EXP 89
20972: AND
20973: IFFALSE 21117
20975: GO 20977
20977: DISABLE
20978: LD_INT 0
20980: PPUSH
20981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20982: LD_ADDR_VAR 0 2
20986: PUSH
20987: LD_INT 22
20989: PUSH
20990: LD_OWVAR 2
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 21
21001: PUSH
21002: LD_INT 2
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 2
21011: PUSH
21012: LD_INT 34
21014: PUSH
21015: LD_INT 12
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 34
21024: PUSH
21025: LD_INT 51
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 34
21034: PUSH
21035: LD_INT 32
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: LIST
21052: PPUSH
21053: CALL_OW 69
21057: ST_TO_ADDR
// if not tmp then
21058: LD_VAR 0 2
21062: NOT
21063: IFFALSE 21067
// exit ;
21065: GO 21117
// for i in tmp do
21067: LD_ADDR_VAR 0 1
21071: PUSH
21072: LD_VAR 0 2
21076: PUSH
21077: FOR_IN
21078: IFFALSE 21115
// if GetCargo ( i , mat_artifact ) = 0 then
21080: LD_VAR 0 1
21084: PPUSH
21085: LD_INT 4
21087: PPUSH
21088: CALL_OW 289
21092: PUSH
21093: LD_INT 0
21095: EQUAL
21096: IFFALSE 21113
// SetCargo ( i , mat_siberit , 100 ) ;
21098: LD_VAR 0 1
21102: PPUSH
21103: LD_INT 3
21105: PPUSH
21106: LD_INT 100
21108: PPUSH
21109: CALL_OW 290
21113: GO 21077
21115: POP
21116: POP
// end ;
21117: PPOPN 2
21119: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21120: LD_EXP 45
21124: PUSH
21125: LD_EXP 90
21129: AND
21130: IFFALSE 21313
21132: GO 21134
21134: DISABLE
21135: LD_INT 0
21137: PPUSH
21138: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21139: LD_ADDR_VAR 0 2
21143: PUSH
21144: LD_INT 22
21146: PUSH
21147: LD_OWVAR 2
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PPUSH
21156: CALL_OW 69
21160: ST_TO_ADDR
// if not tmp then
21161: LD_VAR 0 2
21165: NOT
21166: IFFALSE 21170
// exit ;
21168: GO 21313
// for i := 1 to 2 do
21170: LD_ADDR_VAR 0 1
21174: PUSH
21175: DOUBLE
21176: LD_INT 1
21178: DEC
21179: ST_TO_ADDR
21180: LD_INT 2
21182: PUSH
21183: FOR_TO
21184: IFFALSE 21311
// begin uc_side := your_side ;
21186: LD_ADDR_OWVAR 20
21190: PUSH
21191: LD_OWVAR 2
21195: ST_TO_ADDR
// uc_nation := nation_american ;
21196: LD_ADDR_OWVAR 21
21200: PUSH
21201: LD_INT 1
21203: ST_TO_ADDR
// vc_chassis := us_morphling ;
21204: LD_ADDR_OWVAR 37
21208: PUSH
21209: LD_INT 5
21211: ST_TO_ADDR
// vc_engine := engine_siberite ;
21212: LD_ADDR_OWVAR 39
21216: PUSH
21217: LD_INT 3
21219: ST_TO_ADDR
// vc_control := control_computer ;
21220: LD_ADDR_OWVAR 38
21224: PUSH
21225: LD_INT 3
21227: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21228: LD_ADDR_OWVAR 40
21232: PUSH
21233: LD_INT 10
21235: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21236: LD_VAR 0 2
21240: PUSH
21241: LD_INT 1
21243: ARRAY
21244: PPUSH
21245: CALL_OW 310
21249: NOT
21250: IFFALSE 21297
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21252: CALL_OW 45
21256: PPUSH
21257: LD_VAR 0 2
21261: PUSH
21262: LD_INT 1
21264: ARRAY
21265: PPUSH
21266: CALL_OW 250
21270: PPUSH
21271: LD_VAR 0 2
21275: PUSH
21276: LD_INT 1
21278: ARRAY
21279: PPUSH
21280: CALL_OW 251
21284: PPUSH
21285: LD_INT 12
21287: PPUSH
21288: LD_INT 1
21290: PPUSH
21291: CALL_OW 50
21295: GO 21309
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21297: CALL_OW 45
21301: PPUSH
21302: LD_INT 1
21304: PPUSH
21305: CALL_OW 51
// end ;
21309: GO 21183
21311: POP
21312: POP
// end ;
21313: PPOPN 2
21315: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21316: LD_EXP 45
21320: PUSH
21321: LD_EXP 91
21325: AND
21326: IFFALSE 21548
21328: GO 21330
21330: DISABLE
21331: LD_INT 0
21333: PPUSH
21334: PPUSH
21335: PPUSH
21336: PPUSH
21337: PPUSH
21338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21339: LD_ADDR_VAR 0 6
21343: PUSH
21344: LD_INT 22
21346: PUSH
21347: LD_OWVAR 2
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 21
21358: PUSH
21359: LD_INT 1
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 3
21368: PUSH
21369: LD_INT 23
21371: PUSH
21372: LD_INT 0
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: LIST
21387: PPUSH
21388: CALL_OW 69
21392: ST_TO_ADDR
// if not tmp then
21393: LD_VAR 0 6
21397: NOT
21398: IFFALSE 21402
// exit ;
21400: GO 21548
// s1 := rand ( 1 , 4 ) ;
21402: LD_ADDR_VAR 0 2
21406: PUSH
21407: LD_INT 1
21409: PPUSH
21410: LD_INT 4
21412: PPUSH
21413: CALL_OW 12
21417: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21418: LD_ADDR_VAR 0 4
21422: PUSH
21423: LD_VAR 0 6
21427: PUSH
21428: LD_INT 1
21430: ARRAY
21431: PPUSH
21432: LD_VAR 0 2
21436: PPUSH
21437: CALL_OW 259
21441: ST_TO_ADDR
// if s1 = 1 then
21442: LD_VAR 0 2
21446: PUSH
21447: LD_INT 1
21449: EQUAL
21450: IFFALSE 21470
// s2 := rand ( 2 , 4 ) else
21452: LD_ADDR_VAR 0 3
21456: PUSH
21457: LD_INT 2
21459: PPUSH
21460: LD_INT 4
21462: PPUSH
21463: CALL_OW 12
21467: ST_TO_ADDR
21468: GO 21478
// s2 := 1 ;
21470: LD_ADDR_VAR 0 3
21474: PUSH
21475: LD_INT 1
21477: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21478: LD_ADDR_VAR 0 5
21482: PUSH
21483: LD_VAR 0 6
21487: PUSH
21488: LD_INT 1
21490: ARRAY
21491: PPUSH
21492: LD_VAR 0 3
21496: PPUSH
21497: CALL_OW 259
21501: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21502: LD_VAR 0 6
21506: PUSH
21507: LD_INT 1
21509: ARRAY
21510: PPUSH
21511: LD_VAR 0 2
21515: PPUSH
21516: LD_VAR 0 5
21520: PPUSH
21521: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21525: LD_VAR 0 6
21529: PUSH
21530: LD_INT 1
21532: ARRAY
21533: PPUSH
21534: LD_VAR 0 3
21538: PPUSH
21539: LD_VAR 0 4
21543: PPUSH
21544: CALL_OW 237
// end ;
21548: PPOPN 6
21550: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21551: LD_EXP 45
21555: PUSH
21556: LD_EXP 92
21560: AND
21561: IFFALSE 21640
21563: GO 21565
21565: DISABLE
21566: LD_INT 0
21568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21569: LD_ADDR_VAR 0 1
21573: PUSH
21574: LD_INT 22
21576: PUSH
21577: LD_OWVAR 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 30
21588: PUSH
21589: LD_INT 3
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PPUSH
21600: CALL_OW 69
21604: ST_TO_ADDR
// if not tmp then
21605: LD_VAR 0 1
21609: NOT
21610: IFFALSE 21614
// exit ;
21612: GO 21640
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21614: LD_VAR 0 1
21618: PUSH
21619: LD_INT 1
21621: PPUSH
21622: LD_VAR 0 1
21626: PPUSH
21627: CALL_OW 12
21631: ARRAY
21632: PPUSH
21633: LD_INT 1
21635: PPUSH
21636: CALL_OW 234
// end ;
21640: PPOPN 1
21642: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21643: LD_EXP 45
21647: PUSH
21648: LD_EXP 93
21652: AND
21653: IFFALSE 21765
21655: GO 21657
21657: DISABLE
21658: LD_INT 0
21660: PPUSH
21661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21662: LD_ADDR_VAR 0 2
21666: PUSH
21667: LD_INT 22
21669: PUSH
21670: LD_OWVAR 2
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 2
21681: PUSH
21682: LD_INT 30
21684: PUSH
21685: LD_INT 27
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 30
21694: PUSH
21695: LD_INT 26
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 30
21704: PUSH
21705: LD_INT 28
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PPUSH
21722: CALL_OW 69
21726: ST_TO_ADDR
// if not tmp then
21727: LD_VAR 0 2
21731: NOT
21732: IFFALSE 21736
// exit ;
21734: GO 21765
// for i in tmp do
21736: LD_ADDR_VAR 0 1
21740: PUSH
21741: LD_VAR 0 2
21745: PUSH
21746: FOR_IN
21747: IFFALSE 21763
// SetLives ( i , 1 ) ;
21749: LD_VAR 0 1
21753: PPUSH
21754: LD_INT 1
21756: PPUSH
21757: CALL_OW 234
21761: GO 21746
21763: POP
21764: POP
// end ;
21765: PPOPN 2
21767: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21768: LD_EXP 45
21772: PUSH
21773: LD_EXP 94
21777: AND
21778: IFFALSE 22065
21780: GO 21782
21782: DISABLE
21783: LD_INT 0
21785: PPUSH
21786: PPUSH
21787: PPUSH
// begin i := rand ( 1 , 7 ) ;
21788: LD_ADDR_VAR 0 1
21792: PUSH
21793: LD_INT 1
21795: PPUSH
21796: LD_INT 7
21798: PPUSH
21799: CALL_OW 12
21803: ST_TO_ADDR
// case i of 1 :
21804: LD_VAR 0 1
21808: PUSH
21809: LD_INT 1
21811: DOUBLE
21812: EQUAL
21813: IFTRUE 21817
21815: GO 21827
21817: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21818: LD_STRING earthquake(getX(game), 0, 32)
21820: PPUSH
21821: CALL_OW 559
21825: GO 22065
21827: LD_INT 2
21829: DOUBLE
21830: EQUAL
21831: IFTRUE 21835
21833: GO 21849
21835: POP
// begin ToLua ( displayStucuk(); ) ;
21836: LD_STRING displayStucuk();
21838: PPUSH
21839: CALL_OW 559
// ResetFog ;
21843: CALL_OW 335
// end ; 3 :
21847: GO 22065
21849: LD_INT 3
21851: DOUBLE
21852: EQUAL
21853: IFTRUE 21857
21855: GO 21961
21857: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21858: LD_ADDR_VAR 0 2
21862: PUSH
21863: LD_INT 22
21865: PUSH
21866: LD_OWVAR 2
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 25
21877: PUSH
21878: LD_INT 1
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PPUSH
21889: CALL_OW 69
21893: ST_TO_ADDR
// if not tmp then
21894: LD_VAR 0 2
21898: NOT
21899: IFFALSE 21903
// exit ;
21901: GO 22065
// un := tmp [ rand ( 1 , tmp ) ] ;
21903: LD_ADDR_VAR 0 3
21907: PUSH
21908: LD_VAR 0 2
21912: PUSH
21913: LD_INT 1
21915: PPUSH
21916: LD_VAR 0 2
21920: PPUSH
21921: CALL_OW 12
21925: ARRAY
21926: ST_TO_ADDR
// if Crawls ( un ) then
21927: LD_VAR 0 3
21931: PPUSH
21932: CALL_OW 318
21936: IFFALSE 21947
// ComWalk ( un ) ;
21938: LD_VAR 0 3
21942: PPUSH
21943: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21947: LD_VAR 0 3
21951: PPUSH
21952: LD_INT 8
21954: PPUSH
21955: CALL_OW 336
// end ; 4 :
21959: GO 22065
21961: LD_INT 4
21963: DOUBLE
21964: EQUAL
21965: IFTRUE 21969
21967: GO 22043
21969: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21970: LD_ADDR_VAR 0 2
21974: PUSH
21975: LD_INT 22
21977: PUSH
21978: LD_OWVAR 2
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 30
21989: PUSH
21990: LD_INT 29
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PPUSH
22001: CALL_OW 69
22005: ST_TO_ADDR
// if not tmp then
22006: LD_VAR 0 2
22010: NOT
22011: IFFALSE 22015
// exit ;
22013: GO 22065
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22015: LD_VAR 0 2
22019: PUSH
22020: LD_INT 1
22022: ARRAY
22023: PPUSH
22024: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22028: LD_VAR 0 2
22032: PUSH
22033: LD_INT 1
22035: ARRAY
22036: PPUSH
22037: CALL_OW 65
// end ; 5 .. 7 :
22041: GO 22065
22043: LD_INT 5
22045: DOUBLE
22046: GREATEREQUAL
22047: IFFALSE 22055
22049: LD_INT 7
22051: DOUBLE
22052: LESSEQUAL
22053: IFTRUE 22057
22055: GO 22064
22057: POP
// StreamSibBomb ; end ;
22058: CALL 18302 0 0
22062: GO 22065
22064: POP
// end ;
22065: PPOPN 3
22067: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22068: LD_EXP 45
22072: PUSH
22073: LD_EXP 95
22077: AND
22078: IFFALSE 22234
22080: GO 22082
22082: DISABLE
22083: LD_INT 0
22085: PPUSH
22086: PPUSH
22087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22088: LD_ADDR_VAR 0 2
22092: PUSH
22093: LD_INT 81
22095: PUSH
22096: LD_OWVAR 2
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 2
22107: PUSH
22108: LD_INT 21
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 21
22120: PUSH
22121: LD_INT 2
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PPUSH
22137: CALL_OW 69
22141: ST_TO_ADDR
// if not tmp then
22142: LD_VAR 0 2
22146: NOT
22147: IFFALSE 22151
// exit ;
22149: GO 22234
// p := 0 ;
22151: LD_ADDR_VAR 0 3
22155: PUSH
22156: LD_INT 0
22158: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22159: LD_INT 35
22161: PPUSH
22162: CALL_OW 67
// p := p + 1 ;
22166: LD_ADDR_VAR 0 3
22170: PUSH
22171: LD_VAR 0 3
22175: PUSH
22176: LD_INT 1
22178: PLUS
22179: ST_TO_ADDR
// for i in tmp do
22180: LD_ADDR_VAR 0 1
22184: PUSH
22185: LD_VAR 0 2
22189: PUSH
22190: FOR_IN
22191: IFFALSE 22222
// if GetLives ( i ) < 1000 then
22193: LD_VAR 0 1
22197: PPUSH
22198: CALL_OW 256
22202: PUSH
22203: LD_INT 1000
22205: LESS
22206: IFFALSE 22220
// SetLives ( i , 1000 ) ;
22208: LD_VAR 0 1
22212: PPUSH
22213: LD_INT 1000
22215: PPUSH
22216: CALL_OW 234
22220: GO 22190
22222: POP
22223: POP
// until p > 20 ;
22224: LD_VAR 0 3
22228: PUSH
22229: LD_INT 20
22231: GREATER
22232: IFFALSE 22159
// end ;
22234: PPOPN 3
22236: END
// every 0 0$1 trigger StreamModeActive and sTime do
22237: LD_EXP 45
22241: PUSH
22242: LD_EXP 96
22246: AND
22247: IFFALSE 22282
22249: GO 22251
22251: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22252: LD_INT 28
22254: PPUSH
22255: LD_OWVAR 2
22259: PPUSH
22260: LD_INT 2
22262: PPUSH
22263: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22267: LD_INT 30
22269: PPUSH
22270: LD_OWVAR 2
22274: PPUSH
22275: LD_INT 2
22277: PPUSH
22278: CALL_OW 322
// end ;
22282: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22283: LD_EXP 45
22287: PUSH
22288: LD_EXP 97
22292: AND
22293: IFFALSE 22414
22295: GO 22297
22297: DISABLE
22298: LD_INT 0
22300: PPUSH
22301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22302: LD_ADDR_VAR 0 2
22306: PUSH
22307: LD_INT 22
22309: PUSH
22310: LD_OWVAR 2
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 21
22321: PUSH
22322: LD_INT 1
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 3
22331: PUSH
22332: LD_INT 23
22334: PUSH
22335: LD_INT 0
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: LIST
22350: PPUSH
22351: CALL_OW 69
22355: ST_TO_ADDR
// if not tmp then
22356: LD_VAR 0 2
22360: NOT
22361: IFFALSE 22365
// exit ;
22363: GO 22414
// for i in tmp do
22365: LD_ADDR_VAR 0 1
22369: PUSH
22370: LD_VAR 0 2
22374: PUSH
22375: FOR_IN
22376: IFFALSE 22412
// begin if Crawls ( i ) then
22378: LD_VAR 0 1
22382: PPUSH
22383: CALL_OW 318
22387: IFFALSE 22398
// ComWalk ( i ) ;
22389: LD_VAR 0 1
22393: PPUSH
22394: CALL_OW 138
// SetClass ( i , 2 ) ;
22398: LD_VAR 0 1
22402: PPUSH
22403: LD_INT 2
22405: PPUSH
22406: CALL_OW 336
// end ;
22410: GO 22375
22412: POP
22413: POP
// end ;
22414: PPOPN 2
22416: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22417: LD_EXP 45
22421: PUSH
22422: LD_EXP 98
22426: AND
22427: IFFALSE 22715
22429: GO 22431
22431: DISABLE
22432: LD_INT 0
22434: PPUSH
22435: PPUSH
22436: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22437: LD_OWVAR 2
22441: PPUSH
22442: LD_INT 9
22444: PPUSH
22445: LD_INT 1
22447: PPUSH
22448: LD_INT 1
22450: PPUSH
22451: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22455: LD_INT 9
22457: PPUSH
22458: LD_OWVAR 2
22462: PPUSH
22463: CALL_OW 343
// uc_side := 9 ;
22467: LD_ADDR_OWVAR 20
22471: PUSH
22472: LD_INT 9
22474: ST_TO_ADDR
// uc_nation := 2 ;
22475: LD_ADDR_OWVAR 21
22479: PUSH
22480: LD_INT 2
22482: ST_TO_ADDR
// hc_name := Dark Warrior ;
22483: LD_ADDR_OWVAR 26
22487: PUSH
22488: LD_STRING Dark Warrior
22490: ST_TO_ADDR
// hc_gallery :=  ;
22491: LD_ADDR_OWVAR 33
22495: PUSH
22496: LD_STRING 
22498: ST_TO_ADDR
// hc_noskilllimit := true ;
22499: LD_ADDR_OWVAR 76
22503: PUSH
22504: LD_INT 1
22506: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22507: LD_ADDR_OWVAR 31
22511: PUSH
22512: LD_INT 30
22514: PUSH
22515: LD_INT 30
22517: PUSH
22518: LD_INT 30
22520: PUSH
22521: LD_INT 30
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: ST_TO_ADDR
// un := CreateHuman ;
22530: LD_ADDR_VAR 0 3
22534: PUSH
22535: CALL_OW 44
22539: ST_TO_ADDR
// hc_noskilllimit := false ;
22540: LD_ADDR_OWVAR 76
22544: PUSH
22545: LD_INT 0
22547: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22548: LD_VAR 0 3
22552: PPUSH
22553: LD_INT 1
22555: PPUSH
22556: CALL_OW 51
// ToLua ( playRanger() ) ;
22560: LD_STRING playRanger()
22562: PPUSH
22563: CALL_OW 559
// p := 0 ;
22567: LD_ADDR_VAR 0 2
22571: PUSH
22572: LD_INT 0
22574: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22575: LD_INT 35
22577: PPUSH
22578: CALL_OW 67
// p := p + 1 ;
22582: LD_ADDR_VAR 0 2
22586: PUSH
22587: LD_VAR 0 2
22591: PUSH
22592: LD_INT 1
22594: PLUS
22595: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22596: LD_VAR 0 3
22600: PPUSH
22601: CALL_OW 256
22605: PUSH
22606: LD_INT 1000
22608: LESS
22609: IFFALSE 22623
// SetLives ( un , 1000 ) ;
22611: LD_VAR 0 3
22615: PPUSH
22616: LD_INT 1000
22618: PPUSH
22619: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22623: LD_VAR 0 3
22627: PPUSH
22628: LD_INT 81
22630: PUSH
22631: LD_OWVAR 2
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 91
22642: PUSH
22643: LD_VAR 0 3
22647: PUSH
22648: LD_INT 30
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: LIST
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PPUSH
22660: CALL_OW 69
22664: PPUSH
22665: LD_VAR 0 3
22669: PPUSH
22670: CALL_OW 74
22674: PPUSH
22675: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22679: LD_VAR 0 2
22683: PUSH
22684: LD_INT 80
22686: GREATER
22687: PUSH
22688: LD_VAR 0 3
22692: PPUSH
22693: CALL_OW 301
22697: OR
22698: IFFALSE 22575
// if un then
22700: LD_VAR 0 3
22704: IFFALSE 22715
// RemoveUnit ( un ) ;
22706: LD_VAR 0 3
22710: PPUSH
22711: CALL_OW 64
// end ;
22715: PPOPN 3
22717: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22718: LD_EXP 99
22722: IFFALSE 22838
22724: GO 22726
22726: DISABLE
22727: LD_INT 0
22729: PPUSH
22730: PPUSH
22731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22732: LD_ADDR_VAR 0 2
22736: PUSH
22737: LD_INT 81
22739: PUSH
22740: LD_OWVAR 2
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 21
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PPUSH
22763: CALL_OW 69
22767: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22768: LD_STRING playComputer()
22770: PPUSH
22771: CALL_OW 559
// if not tmp then
22775: LD_VAR 0 2
22779: NOT
22780: IFFALSE 22784
// exit ;
22782: GO 22838
// for i in tmp do
22784: LD_ADDR_VAR 0 1
22788: PUSH
22789: LD_VAR 0 2
22793: PUSH
22794: FOR_IN
22795: IFFALSE 22836
// for j := 1 to 4 do
22797: LD_ADDR_VAR 0 3
22801: PUSH
22802: DOUBLE
22803: LD_INT 1
22805: DEC
22806: ST_TO_ADDR
22807: LD_INT 4
22809: PUSH
22810: FOR_TO
22811: IFFALSE 22832
// SetSkill ( i , j , 10 ) ;
22813: LD_VAR 0 1
22817: PPUSH
22818: LD_VAR 0 3
22822: PPUSH
22823: LD_INT 10
22825: PPUSH
22826: CALL_OW 237
22830: GO 22810
22832: POP
22833: POP
22834: GO 22794
22836: POP
22837: POP
// end ;
22838: PPOPN 3
22840: END
// every 0 0$1 trigger s30 do var i , tmp ;
22841: LD_EXP 100
22845: IFFALSE 22914
22847: GO 22849
22849: DISABLE
22850: LD_INT 0
22852: PPUSH
22853: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22854: LD_ADDR_VAR 0 2
22858: PUSH
22859: LD_INT 22
22861: PUSH
22862: LD_OWVAR 2
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PPUSH
22871: CALL_OW 69
22875: ST_TO_ADDR
// if not tmp then
22876: LD_VAR 0 2
22880: NOT
22881: IFFALSE 22885
// exit ;
22883: GO 22914
// for i in tmp do
22885: LD_ADDR_VAR 0 1
22889: PUSH
22890: LD_VAR 0 2
22894: PUSH
22895: FOR_IN
22896: IFFALSE 22912
// SetLives ( i , 300 ) ;
22898: LD_VAR 0 1
22902: PPUSH
22903: LD_INT 300
22905: PPUSH
22906: CALL_OW 234
22910: GO 22895
22912: POP
22913: POP
// end ;
22914: PPOPN 2
22916: END
// every 0 0$1 trigger s60 do var i , tmp ;
22917: LD_EXP 101
22921: IFFALSE 22990
22923: GO 22925
22925: DISABLE
22926: LD_INT 0
22928: PPUSH
22929: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22930: LD_ADDR_VAR 0 2
22934: PUSH
22935: LD_INT 22
22937: PUSH
22938: LD_OWVAR 2
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PPUSH
22947: CALL_OW 69
22951: ST_TO_ADDR
// if not tmp then
22952: LD_VAR 0 2
22956: NOT
22957: IFFALSE 22961
// exit ;
22959: GO 22990
// for i in tmp do
22961: LD_ADDR_VAR 0 1
22965: PUSH
22966: LD_VAR 0 2
22970: PUSH
22971: FOR_IN
22972: IFFALSE 22988
// SetLives ( i , 600 ) ;
22974: LD_VAR 0 1
22978: PPUSH
22979: LD_INT 600
22981: PPUSH
22982: CALL_OW 234
22986: GO 22971
22988: POP
22989: POP
// end ;
22990: PPOPN 2
22992: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22993: LD_INT 0
22995: PPUSH
// case cmd of 301 :
22996: LD_VAR 0 1
23000: PUSH
23001: LD_INT 301
23003: DOUBLE
23004: EQUAL
23005: IFTRUE 23009
23007: GO 23041
23009: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23010: LD_VAR 0 6
23014: PPUSH
23015: LD_VAR 0 7
23019: PPUSH
23020: LD_VAR 0 8
23024: PPUSH
23025: LD_VAR 0 4
23029: PPUSH
23030: LD_VAR 0 5
23034: PPUSH
23035: CALL 24250 0 5
23039: GO 23162
23041: LD_INT 302
23043: DOUBLE
23044: EQUAL
23045: IFTRUE 23049
23047: GO 23086
23049: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23050: LD_VAR 0 6
23054: PPUSH
23055: LD_VAR 0 7
23059: PPUSH
23060: LD_VAR 0 8
23064: PPUSH
23065: LD_VAR 0 9
23069: PPUSH
23070: LD_VAR 0 4
23074: PPUSH
23075: LD_VAR 0 5
23079: PPUSH
23080: CALL 24341 0 6
23084: GO 23162
23086: LD_INT 303
23088: DOUBLE
23089: EQUAL
23090: IFTRUE 23094
23092: GO 23131
23094: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23095: LD_VAR 0 6
23099: PPUSH
23100: LD_VAR 0 7
23104: PPUSH
23105: LD_VAR 0 8
23109: PPUSH
23110: LD_VAR 0 9
23114: PPUSH
23115: LD_VAR 0 4
23119: PPUSH
23120: LD_VAR 0 5
23124: PPUSH
23125: CALL 23167 0 6
23129: GO 23162
23131: LD_INT 304
23133: DOUBLE
23134: EQUAL
23135: IFTRUE 23139
23137: GO 23161
23139: POP
// hHackTeleport ( unit , x , y ) ; end ;
23140: LD_VAR 0 2
23144: PPUSH
23145: LD_VAR 0 4
23149: PPUSH
23150: LD_VAR 0 5
23154: PPUSH
23155: CALL 24934 0 3
23159: GO 23162
23161: POP
// end ;
23162: LD_VAR 0 12
23166: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23167: LD_INT 0
23169: PPUSH
23170: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23171: LD_VAR 0 1
23175: PUSH
23176: LD_INT 1
23178: LESS
23179: PUSH
23180: LD_VAR 0 1
23184: PUSH
23185: LD_INT 3
23187: GREATER
23188: OR
23189: PUSH
23190: LD_VAR 0 5
23194: PPUSH
23195: LD_VAR 0 6
23199: PPUSH
23200: CALL_OW 428
23204: OR
23205: IFFALSE 23209
// exit ;
23207: GO 23937
// uc_side := your_side ;
23209: LD_ADDR_OWVAR 20
23213: PUSH
23214: LD_OWVAR 2
23218: ST_TO_ADDR
// uc_nation := nation ;
23219: LD_ADDR_OWVAR 21
23223: PUSH
23224: LD_VAR 0 1
23228: ST_TO_ADDR
// bc_level = 1 ;
23229: LD_ADDR_OWVAR 43
23233: PUSH
23234: LD_INT 1
23236: ST_TO_ADDR
// case btype of 1 :
23237: LD_VAR 0 2
23241: PUSH
23242: LD_INT 1
23244: DOUBLE
23245: EQUAL
23246: IFTRUE 23250
23248: GO 23261
23250: POP
// bc_type := b_depot ; 2 :
23251: LD_ADDR_OWVAR 42
23255: PUSH
23256: LD_INT 0
23258: ST_TO_ADDR
23259: GO 23881
23261: LD_INT 2
23263: DOUBLE
23264: EQUAL
23265: IFTRUE 23269
23267: GO 23280
23269: POP
// bc_type := b_warehouse ; 3 :
23270: LD_ADDR_OWVAR 42
23274: PUSH
23275: LD_INT 1
23277: ST_TO_ADDR
23278: GO 23881
23280: LD_INT 3
23282: DOUBLE
23283: EQUAL
23284: IFTRUE 23288
23286: GO 23299
23288: POP
// bc_type := b_lab ; 4 .. 9 :
23289: LD_ADDR_OWVAR 42
23293: PUSH
23294: LD_INT 6
23296: ST_TO_ADDR
23297: GO 23881
23299: LD_INT 4
23301: DOUBLE
23302: GREATEREQUAL
23303: IFFALSE 23311
23305: LD_INT 9
23307: DOUBLE
23308: LESSEQUAL
23309: IFTRUE 23313
23311: GO 23373
23313: POP
// begin bc_type := b_lab_half ;
23314: LD_ADDR_OWVAR 42
23318: PUSH
23319: LD_INT 7
23321: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23322: LD_ADDR_OWVAR 44
23326: PUSH
23327: LD_INT 10
23329: PUSH
23330: LD_INT 11
23332: PUSH
23333: LD_INT 12
23335: PUSH
23336: LD_INT 15
23338: PUSH
23339: LD_INT 14
23341: PUSH
23342: LD_INT 13
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: PUSH
23353: LD_VAR 0 2
23357: PUSH
23358: LD_INT 3
23360: MINUS
23361: ARRAY
23362: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23363: LD_ADDR_OWVAR 45
23367: PUSH
23368: LD_INT 9
23370: ST_TO_ADDR
// end ; 10 .. 13 :
23371: GO 23881
23373: LD_INT 10
23375: DOUBLE
23376: GREATEREQUAL
23377: IFFALSE 23385
23379: LD_INT 13
23381: DOUBLE
23382: LESSEQUAL
23383: IFTRUE 23387
23385: GO 23464
23387: POP
// begin bc_type := b_lab_full ;
23388: LD_ADDR_OWVAR 42
23392: PUSH
23393: LD_INT 8
23395: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23396: LD_ADDR_OWVAR 44
23400: PUSH
23401: LD_INT 10
23403: PUSH
23404: LD_INT 12
23406: PUSH
23407: LD_INT 14
23409: PUSH
23410: LD_INT 13
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: PUSH
23419: LD_VAR 0 2
23423: PUSH
23424: LD_INT 9
23426: MINUS
23427: ARRAY
23428: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23429: LD_ADDR_OWVAR 45
23433: PUSH
23434: LD_INT 11
23436: PUSH
23437: LD_INT 15
23439: PUSH
23440: LD_INT 12
23442: PUSH
23443: LD_INT 15
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: PUSH
23452: LD_VAR 0 2
23456: PUSH
23457: LD_INT 9
23459: MINUS
23460: ARRAY
23461: ST_TO_ADDR
// end ; 14 :
23462: GO 23881
23464: LD_INT 14
23466: DOUBLE
23467: EQUAL
23468: IFTRUE 23472
23470: GO 23483
23472: POP
// bc_type := b_workshop ; 15 :
23473: LD_ADDR_OWVAR 42
23477: PUSH
23478: LD_INT 2
23480: ST_TO_ADDR
23481: GO 23881
23483: LD_INT 15
23485: DOUBLE
23486: EQUAL
23487: IFTRUE 23491
23489: GO 23502
23491: POP
// bc_type := b_factory ; 16 :
23492: LD_ADDR_OWVAR 42
23496: PUSH
23497: LD_INT 3
23499: ST_TO_ADDR
23500: GO 23881
23502: LD_INT 16
23504: DOUBLE
23505: EQUAL
23506: IFTRUE 23510
23508: GO 23521
23510: POP
// bc_type := b_ext_gun ; 17 :
23511: LD_ADDR_OWVAR 42
23515: PUSH
23516: LD_INT 17
23518: ST_TO_ADDR
23519: GO 23881
23521: LD_INT 17
23523: DOUBLE
23524: EQUAL
23525: IFTRUE 23529
23527: GO 23557
23529: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23530: LD_ADDR_OWVAR 42
23534: PUSH
23535: LD_INT 19
23537: PUSH
23538: LD_INT 23
23540: PUSH
23541: LD_INT 19
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: LIST
23548: PUSH
23549: LD_VAR 0 1
23553: ARRAY
23554: ST_TO_ADDR
23555: GO 23881
23557: LD_INT 18
23559: DOUBLE
23560: EQUAL
23561: IFTRUE 23565
23563: GO 23576
23565: POP
// bc_type := b_ext_radar ; 19 :
23566: LD_ADDR_OWVAR 42
23570: PUSH
23571: LD_INT 20
23573: ST_TO_ADDR
23574: GO 23881
23576: LD_INT 19
23578: DOUBLE
23579: EQUAL
23580: IFTRUE 23584
23582: GO 23595
23584: POP
// bc_type := b_ext_radio ; 20 :
23585: LD_ADDR_OWVAR 42
23589: PUSH
23590: LD_INT 22
23592: ST_TO_ADDR
23593: GO 23881
23595: LD_INT 20
23597: DOUBLE
23598: EQUAL
23599: IFTRUE 23603
23601: GO 23614
23603: POP
// bc_type := b_ext_siberium ; 21 :
23604: LD_ADDR_OWVAR 42
23608: PUSH
23609: LD_INT 21
23611: ST_TO_ADDR
23612: GO 23881
23614: LD_INT 21
23616: DOUBLE
23617: EQUAL
23618: IFTRUE 23622
23620: GO 23633
23622: POP
// bc_type := b_ext_computer ; 22 :
23623: LD_ADDR_OWVAR 42
23627: PUSH
23628: LD_INT 24
23630: ST_TO_ADDR
23631: GO 23881
23633: LD_INT 22
23635: DOUBLE
23636: EQUAL
23637: IFTRUE 23641
23639: GO 23652
23641: POP
// bc_type := b_ext_track ; 23 :
23642: LD_ADDR_OWVAR 42
23646: PUSH
23647: LD_INT 16
23649: ST_TO_ADDR
23650: GO 23881
23652: LD_INT 23
23654: DOUBLE
23655: EQUAL
23656: IFTRUE 23660
23658: GO 23671
23660: POP
// bc_type := b_ext_laser ; 24 :
23661: LD_ADDR_OWVAR 42
23665: PUSH
23666: LD_INT 25
23668: ST_TO_ADDR
23669: GO 23881
23671: LD_INT 24
23673: DOUBLE
23674: EQUAL
23675: IFTRUE 23679
23677: GO 23690
23679: POP
// bc_type := b_control_tower ; 25 :
23680: LD_ADDR_OWVAR 42
23684: PUSH
23685: LD_INT 36
23687: ST_TO_ADDR
23688: GO 23881
23690: LD_INT 25
23692: DOUBLE
23693: EQUAL
23694: IFTRUE 23698
23696: GO 23709
23698: POP
// bc_type := b_breastwork ; 26 :
23699: LD_ADDR_OWVAR 42
23703: PUSH
23704: LD_INT 31
23706: ST_TO_ADDR
23707: GO 23881
23709: LD_INT 26
23711: DOUBLE
23712: EQUAL
23713: IFTRUE 23717
23715: GO 23728
23717: POP
// bc_type := b_bunker ; 27 :
23718: LD_ADDR_OWVAR 42
23722: PUSH
23723: LD_INT 32
23725: ST_TO_ADDR
23726: GO 23881
23728: LD_INT 27
23730: DOUBLE
23731: EQUAL
23732: IFTRUE 23736
23734: GO 23747
23736: POP
// bc_type := b_turret ; 28 :
23737: LD_ADDR_OWVAR 42
23741: PUSH
23742: LD_INT 33
23744: ST_TO_ADDR
23745: GO 23881
23747: LD_INT 28
23749: DOUBLE
23750: EQUAL
23751: IFTRUE 23755
23753: GO 23766
23755: POP
// bc_type := b_armoury ; 29 :
23756: LD_ADDR_OWVAR 42
23760: PUSH
23761: LD_INT 4
23763: ST_TO_ADDR
23764: GO 23881
23766: LD_INT 29
23768: DOUBLE
23769: EQUAL
23770: IFTRUE 23774
23772: GO 23785
23774: POP
// bc_type := b_barracks ; 30 :
23775: LD_ADDR_OWVAR 42
23779: PUSH
23780: LD_INT 5
23782: ST_TO_ADDR
23783: GO 23881
23785: LD_INT 30
23787: DOUBLE
23788: EQUAL
23789: IFTRUE 23793
23791: GO 23804
23793: POP
// bc_type := b_solar_power ; 31 :
23794: LD_ADDR_OWVAR 42
23798: PUSH
23799: LD_INT 27
23801: ST_TO_ADDR
23802: GO 23881
23804: LD_INT 31
23806: DOUBLE
23807: EQUAL
23808: IFTRUE 23812
23810: GO 23823
23812: POP
// bc_type := b_oil_power ; 32 :
23813: LD_ADDR_OWVAR 42
23817: PUSH
23818: LD_INT 26
23820: ST_TO_ADDR
23821: GO 23881
23823: LD_INT 32
23825: DOUBLE
23826: EQUAL
23827: IFTRUE 23831
23829: GO 23842
23831: POP
// bc_type := b_siberite_power ; 33 :
23832: LD_ADDR_OWVAR 42
23836: PUSH
23837: LD_INT 28
23839: ST_TO_ADDR
23840: GO 23881
23842: LD_INT 33
23844: DOUBLE
23845: EQUAL
23846: IFTRUE 23850
23848: GO 23861
23850: POP
// bc_type := b_oil_mine ; 34 :
23851: LD_ADDR_OWVAR 42
23855: PUSH
23856: LD_INT 29
23858: ST_TO_ADDR
23859: GO 23881
23861: LD_INT 34
23863: DOUBLE
23864: EQUAL
23865: IFTRUE 23869
23867: GO 23880
23869: POP
// bc_type := b_siberite_mine ; end ;
23870: LD_ADDR_OWVAR 42
23874: PUSH
23875: LD_INT 30
23877: ST_TO_ADDR
23878: GO 23881
23880: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23881: LD_ADDR_VAR 0 8
23885: PUSH
23886: LD_VAR 0 5
23890: PPUSH
23891: LD_VAR 0 6
23895: PPUSH
23896: LD_VAR 0 3
23900: PPUSH
23901: CALL_OW 47
23905: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23906: LD_OWVAR 42
23910: PUSH
23911: LD_INT 32
23913: PUSH
23914: LD_INT 33
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: IN
23921: IFFALSE 23937
// PlaceWeaponTurret ( b , weapon ) ;
23923: LD_VAR 0 8
23927: PPUSH
23928: LD_VAR 0 4
23932: PPUSH
23933: CALL_OW 431
// end ;
23937: LD_VAR 0 7
23941: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23942: LD_INT 0
23944: PPUSH
23945: PPUSH
23946: PPUSH
23947: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23948: LD_ADDR_VAR 0 4
23952: PUSH
23953: LD_INT 22
23955: PUSH
23956: LD_OWVAR 2
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 2
23967: PUSH
23968: LD_INT 30
23970: PUSH
23971: LD_INT 0
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 30
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PPUSH
23997: CALL_OW 69
24001: ST_TO_ADDR
// if not tmp then
24002: LD_VAR 0 4
24006: NOT
24007: IFFALSE 24011
// exit ;
24009: GO 24070
// for i in tmp do
24011: LD_ADDR_VAR 0 2
24015: PUSH
24016: LD_VAR 0 4
24020: PUSH
24021: FOR_IN
24022: IFFALSE 24068
// for j = 1 to 3 do
24024: LD_ADDR_VAR 0 3
24028: PUSH
24029: DOUBLE
24030: LD_INT 1
24032: DEC
24033: ST_TO_ADDR
24034: LD_INT 3
24036: PUSH
24037: FOR_TO
24038: IFFALSE 24064
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24040: LD_VAR 0 2
24044: PPUSH
24045: CALL_OW 274
24049: PPUSH
24050: LD_VAR 0 3
24054: PPUSH
24055: LD_INT 99999
24057: PPUSH
24058: CALL_OW 277
24062: GO 24037
24064: POP
24065: POP
24066: GO 24021
24068: POP
24069: POP
// end ;
24070: LD_VAR 0 1
24074: RET
// export function hHackSetLevel10 ; var i , j ; begin
24075: LD_INT 0
24077: PPUSH
24078: PPUSH
24079: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24080: LD_ADDR_VAR 0 2
24084: PUSH
24085: LD_INT 21
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PPUSH
24095: CALL_OW 69
24099: PUSH
24100: FOR_IN
24101: IFFALSE 24153
// if IsSelected ( i ) then
24103: LD_VAR 0 2
24107: PPUSH
24108: CALL_OW 306
24112: IFFALSE 24151
// begin for j := 1 to 4 do
24114: LD_ADDR_VAR 0 3
24118: PUSH
24119: DOUBLE
24120: LD_INT 1
24122: DEC
24123: ST_TO_ADDR
24124: LD_INT 4
24126: PUSH
24127: FOR_TO
24128: IFFALSE 24149
// SetSkill ( i , j , 10 ) ;
24130: LD_VAR 0 2
24134: PPUSH
24135: LD_VAR 0 3
24139: PPUSH
24140: LD_INT 10
24142: PPUSH
24143: CALL_OW 237
24147: GO 24127
24149: POP
24150: POP
// end ;
24151: GO 24100
24153: POP
24154: POP
// end ;
24155: LD_VAR 0 1
24159: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24160: LD_INT 0
24162: PPUSH
24163: PPUSH
24164: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24165: LD_ADDR_VAR 0 2
24169: PUSH
24170: LD_INT 22
24172: PUSH
24173: LD_OWVAR 2
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 21
24184: PUSH
24185: LD_INT 1
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PPUSH
24196: CALL_OW 69
24200: PUSH
24201: FOR_IN
24202: IFFALSE 24243
// begin for j := 1 to 4 do
24204: LD_ADDR_VAR 0 3
24208: PUSH
24209: DOUBLE
24210: LD_INT 1
24212: DEC
24213: ST_TO_ADDR
24214: LD_INT 4
24216: PUSH
24217: FOR_TO
24218: IFFALSE 24239
// SetSkill ( i , j , 10 ) ;
24220: LD_VAR 0 2
24224: PPUSH
24225: LD_VAR 0 3
24229: PPUSH
24230: LD_INT 10
24232: PPUSH
24233: CALL_OW 237
24237: GO 24217
24239: POP
24240: POP
// end ;
24241: GO 24201
24243: POP
24244: POP
// end ;
24245: LD_VAR 0 1
24249: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24250: LD_INT 0
24252: PPUSH
// uc_side := your_side ;
24253: LD_ADDR_OWVAR 20
24257: PUSH
24258: LD_OWVAR 2
24262: ST_TO_ADDR
// uc_nation := nation ;
24263: LD_ADDR_OWVAR 21
24267: PUSH
24268: LD_VAR 0 1
24272: ST_TO_ADDR
// InitHc ;
24273: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24277: LD_INT 0
24279: PPUSH
24280: LD_VAR 0 2
24284: PPUSH
24285: LD_VAR 0 3
24289: PPUSH
24290: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24294: LD_VAR 0 4
24298: PPUSH
24299: LD_VAR 0 5
24303: PPUSH
24304: CALL_OW 428
24308: PUSH
24309: LD_INT 0
24311: EQUAL
24312: IFFALSE 24336
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24314: CALL_OW 44
24318: PPUSH
24319: LD_VAR 0 4
24323: PPUSH
24324: LD_VAR 0 5
24328: PPUSH
24329: LD_INT 1
24331: PPUSH
24332: CALL_OW 48
// end ;
24336: LD_VAR 0 6
24340: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24341: LD_INT 0
24343: PPUSH
24344: PPUSH
// uc_side := your_side ;
24345: LD_ADDR_OWVAR 20
24349: PUSH
24350: LD_OWVAR 2
24354: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24355: LD_VAR 0 1
24359: PUSH
24360: LD_INT 1
24362: PUSH
24363: LD_INT 2
24365: PUSH
24366: LD_INT 3
24368: PUSH
24369: LD_INT 4
24371: PUSH
24372: LD_INT 5
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: IN
24382: IFFALSE 24394
// uc_nation := nation_american else
24384: LD_ADDR_OWVAR 21
24388: PUSH
24389: LD_INT 1
24391: ST_TO_ADDR
24392: GO 24437
// if chassis in [ 11 , 12 , 13 , 14 ] then
24394: LD_VAR 0 1
24398: PUSH
24399: LD_INT 11
24401: PUSH
24402: LD_INT 12
24404: PUSH
24405: LD_INT 13
24407: PUSH
24408: LD_INT 14
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: IN
24417: IFFALSE 24429
// uc_nation := nation_arabian else
24419: LD_ADDR_OWVAR 21
24423: PUSH
24424: LD_INT 2
24426: ST_TO_ADDR
24427: GO 24437
// uc_nation := nation_russian ;
24429: LD_ADDR_OWVAR 21
24433: PUSH
24434: LD_INT 3
24436: ST_TO_ADDR
// vc_chassis := chassis ;
24437: LD_ADDR_OWVAR 37
24441: PUSH
24442: LD_VAR 0 1
24446: ST_TO_ADDR
// vc_engine := engine ;
24447: LD_ADDR_OWVAR 39
24451: PUSH
24452: LD_VAR 0 2
24456: ST_TO_ADDR
// vc_control := control ;
24457: LD_ADDR_OWVAR 38
24461: PUSH
24462: LD_VAR 0 3
24466: ST_TO_ADDR
// vc_weapon := weapon ;
24467: LD_ADDR_OWVAR 40
24471: PUSH
24472: LD_VAR 0 4
24476: ST_TO_ADDR
// un := CreateVehicle ;
24477: LD_ADDR_VAR 0 8
24481: PUSH
24482: CALL_OW 45
24486: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24487: LD_VAR 0 8
24491: PPUSH
24492: LD_INT 0
24494: PPUSH
24495: LD_INT 5
24497: PPUSH
24498: CALL_OW 12
24502: PPUSH
24503: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24507: LD_VAR 0 8
24511: PPUSH
24512: LD_VAR 0 5
24516: PPUSH
24517: LD_VAR 0 6
24521: PPUSH
24522: LD_INT 1
24524: PPUSH
24525: CALL_OW 48
// end ;
24529: LD_VAR 0 7
24533: RET
// export hInvincible ; every 1 do
24534: GO 24536
24536: DISABLE
// hInvincible := [ ] ;
24537: LD_ADDR_EXP 102
24541: PUSH
24542: EMPTY
24543: ST_TO_ADDR
24544: END
// every 10 do var i ;
24545: GO 24547
24547: DISABLE
24548: LD_INT 0
24550: PPUSH
// begin enable ;
24551: ENABLE
// if not hInvincible then
24552: LD_EXP 102
24556: NOT
24557: IFFALSE 24561
// exit ;
24559: GO 24605
// for i in hInvincible do
24561: LD_ADDR_VAR 0 1
24565: PUSH
24566: LD_EXP 102
24570: PUSH
24571: FOR_IN
24572: IFFALSE 24603
// if GetLives ( i ) < 1000 then
24574: LD_VAR 0 1
24578: PPUSH
24579: CALL_OW 256
24583: PUSH
24584: LD_INT 1000
24586: LESS
24587: IFFALSE 24601
// SetLives ( i , 1000 ) ;
24589: LD_VAR 0 1
24593: PPUSH
24594: LD_INT 1000
24596: PPUSH
24597: CALL_OW 234
24601: GO 24571
24603: POP
24604: POP
// end ;
24605: PPOPN 1
24607: END
// export function hHackInvincible ; var i ; begin
24608: LD_INT 0
24610: PPUSH
24611: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24612: LD_ADDR_VAR 0 2
24616: PUSH
24617: LD_INT 2
24619: PUSH
24620: LD_INT 21
24622: PUSH
24623: LD_INT 1
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 21
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: LIST
24644: PPUSH
24645: CALL_OW 69
24649: PUSH
24650: FOR_IN
24651: IFFALSE 24712
// if IsSelected ( i ) then
24653: LD_VAR 0 2
24657: PPUSH
24658: CALL_OW 306
24662: IFFALSE 24710
// begin if i in hInvincible then
24664: LD_VAR 0 2
24668: PUSH
24669: LD_EXP 102
24673: IN
24674: IFFALSE 24694
// hInvincible := hInvincible diff i else
24676: LD_ADDR_EXP 102
24680: PUSH
24681: LD_EXP 102
24685: PUSH
24686: LD_VAR 0 2
24690: DIFF
24691: ST_TO_ADDR
24692: GO 24710
// hInvincible := hInvincible union i ;
24694: LD_ADDR_EXP 102
24698: PUSH
24699: LD_EXP 102
24703: PUSH
24704: LD_VAR 0 2
24708: UNION
24709: ST_TO_ADDR
// end ;
24710: GO 24650
24712: POP
24713: POP
// end ;
24714: LD_VAR 0 1
24718: RET
// export function hHackInvisible ; var i , j ; begin
24719: LD_INT 0
24721: PPUSH
24722: PPUSH
24723: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24724: LD_ADDR_VAR 0 2
24728: PUSH
24729: LD_INT 21
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PPUSH
24739: CALL_OW 69
24743: PUSH
24744: FOR_IN
24745: IFFALSE 24769
// if IsSelected ( i ) then
24747: LD_VAR 0 2
24751: PPUSH
24752: CALL_OW 306
24756: IFFALSE 24767
// ComForceInvisible ( i ) ;
24758: LD_VAR 0 2
24762: PPUSH
24763: CALL_OW 496
24767: GO 24744
24769: POP
24770: POP
// end ;
24771: LD_VAR 0 1
24775: RET
// export function hHackChangeYourSide ; begin
24776: LD_INT 0
24778: PPUSH
// if your_side = 8 then
24779: LD_OWVAR 2
24783: PUSH
24784: LD_INT 8
24786: EQUAL
24787: IFFALSE 24799
// your_side := 0 else
24789: LD_ADDR_OWVAR 2
24793: PUSH
24794: LD_INT 0
24796: ST_TO_ADDR
24797: GO 24813
// your_side := your_side + 1 ;
24799: LD_ADDR_OWVAR 2
24803: PUSH
24804: LD_OWVAR 2
24808: PUSH
24809: LD_INT 1
24811: PLUS
24812: ST_TO_ADDR
// end ;
24813: LD_VAR 0 1
24817: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24818: LD_INT 0
24820: PPUSH
24821: PPUSH
24822: PPUSH
// for i in all_units do
24823: LD_ADDR_VAR 0 2
24827: PUSH
24828: LD_OWVAR 3
24832: PUSH
24833: FOR_IN
24834: IFFALSE 24912
// if IsSelected ( i ) then
24836: LD_VAR 0 2
24840: PPUSH
24841: CALL_OW 306
24845: IFFALSE 24910
// begin j := GetSide ( i ) ;
24847: LD_ADDR_VAR 0 3
24851: PUSH
24852: LD_VAR 0 2
24856: PPUSH
24857: CALL_OW 255
24861: ST_TO_ADDR
// if j = 8 then
24862: LD_VAR 0 3
24866: PUSH
24867: LD_INT 8
24869: EQUAL
24870: IFFALSE 24882
// j := 0 else
24872: LD_ADDR_VAR 0 3
24876: PUSH
24877: LD_INT 0
24879: ST_TO_ADDR
24880: GO 24896
// j := j + 1 ;
24882: LD_ADDR_VAR 0 3
24886: PUSH
24887: LD_VAR 0 3
24891: PUSH
24892: LD_INT 1
24894: PLUS
24895: ST_TO_ADDR
// SetSide ( i , j ) ;
24896: LD_VAR 0 2
24900: PPUSH
24901: LD_VAR 0 3
24905: PPUSH
24906: CALL_OW 235
// end ;
24910: GO 24833
24912: POP
24913: POP
// end ;
24914: LD_VAR 0 1
24918: RET
// export function hHackFog ; begin
24919: LD_INT 0
24921: PPUSH
// FogOff ( true ) ;
24922: LD_INT 1
24924: PPUSH
24925: CALL_OW 344
// end ;
24929: LD_VAR 0 1
24933: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24934: LD_INT 0
24936: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24937: LD_VAR 0 1
24941: PPUSH
24942: LD_VAR 0 2
24946: PPUSH
24947: LD_VAR 0 3
24951: PPUSH
24952: LD_INT 1
24954: PPUSH
24955: LD_INT 1
24957: PPUSH
24958: CALL_OW 483
// CenterOnXY ( x , y ) ;
24962: LD_VAR 0 2
24966: PPUSH
24967: LD_VAR 0 3
24971: PPUSH
24972: CALL_OW 84
// end ;
24976: LD_VAR 0 4
24980: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24981: LD_INT 0
24983: PPUSH
24984: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24985: LD_VAR 0 1
24989: NOT
24990: PUSH
24991: LD_VAR 0 2
24995: PPUSH
24996: LD_VAR 0 3
25000: PPUSH
25001: CALL_OW 488
25005: NOT
25006: OR
25007: PUSH
25008: LD_VAR 0 1
25012: PPUSH
25013: CALL_OW 266
25017: PUSH
25018: LD_INT 3
25020: NONEQUAL
25021: PUSH
25022: LD_VAR 0 1
25026: PPUSH
25027: CALL_OW 247
25031: PUSH
25032: LD_INT 1
25034: EQUAL
25035: NOT
25036: AND
25037: OR
25038: IFFALSE 25042
// exit ;
25040: GO 25191
// if GetType ( factory ) = unit_human then
25042: LD_VAR 0 1
25046: PPUSH
25047: CALL_OW 247
25051: PUSH
25052: LD_INT 1
25054: EQUAL
25055: IFFALSE 25072
// factory := IsInUnit ( factory ) ;
25057: LD_ADDR_VAR 0 1
25061: PUSH
25062: LD_VAR 0 1
25066: PPUSH
25067: CALL_OW 310
25071: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25072: LD_VAR 0 1
25076: PPUSH
25077: CALL_OW 266
25081: PUSH
25082: LD_INT 3
25084: NONEQUAL
25085: IFFALSE 25089
// exit ;
25087: GO 25191
// if HexInfo ( x , y ) = factory then
25089: LD_VAR 0 2
25093: PPUSH
25094: LD_VAR 0 3
25098: PPUSH
25099: CALL_OW 428
25103: PUSH
25104: LD_VAR 0 1
25108: EQUAL
25109: IFFALSE 25136
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25111: LD_ADDR_EXP 103
25115: PUSH
25116: LD_EXP 103
25120: PPUSH
25121: LD_VAR 0 1
25125: PPUSH
25126: LD_INT 0
25128: PPUSH
25129: CALL_OW 1
25133: ST_TO_ADDR
25134: GO 25187
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25136: LD_ADDR_EXP 103
25140: PUSH
25141: LD_EXP 103
25145: PPUSH
25146: LD_VAR 0 1
25150: PPUSH
25151: LD_VAR 0 1
25155: PPUSH
25156: CALL_OW 255
25160: PUSH
25161: LD_VAR 0 1
25165: PUSH
25166: LD_VAR 0 2
25170: PUSH
25171: LD_VAR 0 3
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: PPUSH
25182: CALL_OW 1
25186: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25187: CALL 25196 0 0
// end ;
25191: LD_VAR 0 4
25195: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25196: LD_INT 0
25198: PPUSH
25199: PPUSH
25200: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25201: LD_STRING resetFactoryWaypoint();
25203: PPUSH
25204: CALL_OW 559
// if factoryWaypoints then
25208: LD_EXP 103
25212: IFFALSE 25338
// begin list := PrepareArray ( factoryWaypoints ) ;
25214: LD_ADDR_VAR 0 3
25218: PUSH
25219: LD_EXP 103
25223: PPUSH
25224: CALL 72798 0 1
25228: ST_TO_ADDR
// for i := 1 to list do
25229: LD_ADDR_VAR 0 2
25233: PUSH
25234: DOUBLE
25235: LD_INT 1
25237: DEC
25238: ST_TO_ADDR
25239: LD_VAR 0 3
25243: PUSH
25244: FOR_TO
25245: IFFALSE 25336
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25247: LD_STRING setFactoryWaypointXY(
25249: PUSH
25250: LD_VAR 0 3
25254: PUSH
25255: LD_VAR 0 2
25259: ARRAY
25260: PUSH
25261: LD_INT 1
25263: ARRAY
25264: STR
25265: PUSH
25266: LD_STRING ,
25268: STR
25269: PUSH
25270: LD_VAR 0 3
25274: PUSH
25275: LD_VAR 0 2
25279: ARRAY
25280: PUSH
25281: LD_INT 2
25283: ARRAY
25284: STR
25285: PUSH
25286: LD_STRING ,
25288: STR
25289: PUSH
25290: LD_VAR 0 3
25294: PUSH
25295: LD_VAR 0 2
25299: ARRAY
25300: PUSH
25301: LD_INT 3
25303: ARRAY
25304: STR
25305: PUSH
25306: LD_STRING ,
25308: STR
25309: PUSH
25310: LD_VAR 0 3
25314: PUSH
25315: LD_VAR 0 2
25319: ARRAY
25320: PUSH
25321: LD_INT 4
25323: ARRAY
25324: STR
25325: PUSH
25326: LD_STRING )
25328: STR
25329: PPUSH
25330: CALL_OW 559
25334: GO 25244
25336: POP
25337: POP
// end ; end ;
25338: LD_VAR 0 1
25342: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25343: LD_INT 0
25345: PPUSH
// if HexInfo ( x , y ) = warehouse then
25346: LD_VAR 0 2
25350: PPUSH
25351: LD_VAR 0 3
25355: PPUSH
25356: CALL_OW 428
25360: PUSH
25361: LD_VAR 0 1
25365: EQUAL
25366: IFFALSE 25393
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25368: LD_ADDR_EXP 104
25372: PUSH
25373: LD_EXP 104
25377: PPUSH
25378: LD_VAR 0 1
25382: PPUSH
25383: LD_INT 0
25385: PPUSH
25386: CALL_OW 1
25390: ST_TO_ADDR
25391: GO 25444
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25393: LD_ADDR_EXP 104
25397: PUSH
25398: LD_EXP 104
25402: PPUSH
25403: LD_VAR 0 1
25407: PPUSH
25408: LD_VAR 0 1
25412: PPUSH
25413: CALL_OW 255
25417: PUSH
25418: LD_VAR 0 1
25422: PUSH
25423: LD_VAR 0 2
25427: PUSH
25428: LD_VAR 0 3
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: PPUSH
25439: CALL_OW 1
25443: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25444: CALL 25453 0 0
// end ;
25448: LD_VAR 0 4
25452: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25453: LD_INT 0
25455: PPUSH
25456: PPUSH
25457: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25458: LD_STRING resetWarehouseGatheringPoints();
25460: PPUSH
25461: CALL_OW 559
// if warehouseGatheringPoints then
25465: LD_EXP 104
25469: IFFALSE 25595
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25471: LD_ADDR_VAR 0 3
25475: PUSH
25476: LD_EXP 104
25480: PPUSH
25481: CALL 72798 0 1
25485: ST_TO_ADDR
// for i := 1 to list do
25486: LD_ADDR_VAR 0 2
25490: PUSH
25491: DOUBLE
25492: LD_INT 1
25494: DEC
25495: ST_TO_ADDR
25496: LD_VAR 0 3
25500: PUSH
25501: FOR_TO
25502: IFFALSE 25593
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25504: LD_STRING setWarehouseGatheringPointXY(
25506: PUSH
25507: LD_VAR 0 3
25511: PUSH
25512: LD_VAR 0 2
25516: ARRAY
25517: PUSH
25518: LD_INT 1
25520: ARRAY
25521: STR
25522: PUSH
25523: LD_STRING ,
25525: STR
25526: PUSH
25527: LD_VAR 0 3
25531: PUSH
25532: LD_VAR 0 2
25536: ARRAY
25537: PUSH
25538: LD_INT 2
25540: ARRAY
25541: STR
25542: PUSH
25543: LD_STRING ,
25545: STR
25546: PUSH
25547: LD_VAR 0 3
25551: PUSH
25552: LD_VAR 0 2
25556: ARRAY
25557: PUSH
25558: LD_INT 3
25560: ARRAY
25561: STR
25562: PUSH
25563: LD_STRING ,
25565: STR
25566: PUSH
25567: LD_VAR 0 3
25571: PUSH
25572: LD_VAR 0 2
25576: ARRAY
25577: PUSH
25578: LD_INT 4
25580: ARRAY
25581: STR
25582: PUSH
25583: LD_STRING )
25585: STR
25586: PPUSH
25587: CALL_OW 559
25591: GO 25501
25593: POP
25594: POP
// end ; end ;
25595: LD_VAR 0 1
25599: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25600: LD_EXP 104
25604: IFFALSE 26289
25606: GO 25608
25608: DISABLE
25609: LD_INT 0
25611: PPUSH
25612: PPUSH
25613: PPUSH
25614: PPUSH
25615: PPUSH
25616: PPUSH
25617: PPUSH
25618: PPUSH
25619: PPUSH
// begin enable ;
25620: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25621: LD_ADDR_VAR 0 3
25625: PUSH
25626: LD_EXP 104
25630: PPUSH
25631: CALL 72798 0 1
25635: ST_TO_ADDR
// if not list then
25636: LD_VAR 0 3
25640: NOT
25641: IFFALSE 25645
// exit ;
25643: GO 26289
// for i := 1 to list do
25645: LD_ADDR_VAR 0 1
25649: PUSH
25650: DOUBLE
25651: LD_INT 1
25653: DEC
25654: ST_TO_ADDR
25655: LD_VAR 0 3
25659: PUSH
25660: FOR_TO
25661: IFFALSE 26287
// begin depot := list [ i ] [ 2 ] ;
25663: LD_ADDR_VAR 0 8
25667: PUSH
25668: LD_VAR 0 3
25672: PUSH
25673: LD_VAR 0 1
25677: ARRAY
25678: PUSH
25679: LD_INT 2
25681: ARRAY
25682: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25683: LD_ADDR_VAR 0 5
25687: PUSH
25688: LD_VAR 0 3
25692: PUSH
25693: LD_VAR 0 1
25697: ARRAY
25698: PUSH
25699: LD_INT 1
25701: ARRAY
25702: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25703: LD_VAR 0 8
25707: PPUSH
25708: CALL_OW 301
25712: PUSH
25713: LD_VAR 0 5
25717: PUSH
25718: LD_VAR 0 8
25722: PPUSH
25723: CALL_OW 255
25727: NONEQUAL
25728: OR
25729: IFFALSE 25758
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25731: LD_ADDR_EXP 104
25735: PUSH
25736: LD_EXP 104
25740: PPUSH
25741: LD_VAR 0 8
25745: PPUSH
25746: LD_INT 0
25748: PPUSH
25749: CALL_OW 1
25753: ST_TO_ADDR
// exit ;
25754: POP
25755: POP
25756: GO 26289
// end ; x := list [ i ] [ 3 ] ;
25758: LD_ADDR_VAR 0 6
25762: PUSH
25763: LD_VAR 0 3
25767: PUSH
25768: LD_VAR 0 1
25772: ARRAY
25773: PUSH
25774: LD_INT 3
25776: ARRAY
25777: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25778: LD_ADDR_VAR 0 7
25782: PUSH
25783: LD_VAR 0 3
25787: PUSH
25788: LD_VAR 0 1
25792: ARRAY
25793: PUSH
25794: LD_INT 4
25796: ARRAY
25797: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25798: LD_ADDR_VAR 0 9
25802: PUSH
25803: LD_VAR 0 6
25807: PPUSH
25808: LD_VAR 0 7
25812: PPUSH
25813: LD_INT 16
25815: PPUSH
25816: CALL 71386 0 3
25820: ST_TO_ADDR
// if not cratesNearbyPoint then
25821: LD_VAR 0 9
25825: NOT
25826: IFFALSE 25832
// exit ;
25828: POP
25829: POP
25830: GO 26289
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25832: LD_ADDR_VAR 0 4
25836: PUSH
25837: LD_INT 22
25839: PUSH
25840: LD_VAR 0 5
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 3
25851: PUSH
25852: LD_INT 60
25854: PUSH
25855: EMPTY
25856: LIST
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 91
25864: PUSH
25865: LD_VAR 0 8
25869: PUSH
25870: LD_INT 6
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 2
25880: PUSH
25881: LD_INT 25
25883: PUSH
25884: LD_INT 2
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 25
25893: PUSH
25894: LD_INT 16
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: LIST
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: PPUSH
25912: CALL_OW 69
25916: PUSH
25917: LD_VAR 0 8
25921: PPUSH
25922: CALL_OW 313
25926: PPUSH
25927: LD_INT 3
25929: PUSH
25930: LD_INT 60
25932: PUSH
25933: EMPTY
25934: LIST
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 2
25942: PUSH
25943: LD_INT 25
25945: PUSH
25946: LD_INT 2
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 25
25955: PUSH
25956: LD_INT 16
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: LIST
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PPUSH
25972: CALL_OW 72
25976: UNION
25977: ST_TO_ADDR
// if tmp then
25978: LD_VAR 0 4
25982: IFFALSE 26062
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25984: LD_ADDR_VAR 0 4
25988: PUSH
25989: LD_VAR 0 4
25993: PPUSH
25994: LD_INT 3
25996: PPUSH
25997: CALL 69355 0 2
26001: ST_TO_ADDR
// for j in tmp do
26002: LD_ADDR_VAR 0 2
26006: PUSH
26007: LD_VAR 0 4
26011: PUSH
26012: FOR_IN
26013: IFFALSE 26056
// begin if IsInUnit ( j ) then
26015: LD_VAR 0 2
26019: PPUSH
26020: CALL_OW 310
26024: IFFALSE 26035
// ComExit ( j ) ;
26026: LD_VAR 0 2
26030: PPUSH
26031: CALL 69438 0 1
// AddComCollect ( j , x , y ) ;
26035: LD_VAR 0 2
26039: PPUSH
26040: LD_VAR 0 6
26044: PPUSH
26045: LD_VAR 0 7
26049: PPUSH
26050: CALL_OW 177
// end ;
26054: GO 26012
26056: POP
26057: POP
// exit ;
26058: POP
26059: POP
26060: GO 26289
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26062: LD_ADDR_VAR 0 4
26066: PUSH
26067: LD_INT 22
26069: PUSH
26070: LD_VAR 0 5
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 91
26081: PUSH
26082: LD_VAR 0 8
26086: PUSH
26087: LD_INT 8
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 2
26097: PUSH
26098: LD_INT 34
26100: PUSH
26101: LD_INT 12
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 34
26110: PUSH
26111: LD_INT 51
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 34
26120: PUSH
26121: LD_INT 32
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 34
26130: PUSH
26131: LD_INT 89
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: LIST
26149: PPUSH
26150: CALL_OW 69
26154: ST_TO_ADDR
// if tmp then
26155: LD_VAR 0 4
26159: IFFALSE 26285
// begin for j in tmp do
26161: LD_ADDR_VAR 0 2
26165: PUSH
26166: LD_VAR 0 4
26170: PUSH
26171: FOR_IN
26172: IFFALSE 26283
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26174: LD_VAR 0 2
26178: PPUSH
26179: CALL_OW 262
26183: PUSH
26184: LD_INT 3
26186: EQUAL
26187: PUSH
26188: LD_VAR 0 2
26192: PPUSH
26193: CALL_OW 261
26197: PUSH
26198: LD_INT 20
26200: GREATER
26201: OR
26202: PUSH
26203: LD_VAR 0 2
26207: PPUSH
26208: CALL_OW 314
26212: NOT
26213: AND
26214: PUSH
26215: LD_VAR 0 2
26219: PPUSH
26220: CALL_OW 263
26224: PUSH
26225: LD_INT 1
26227: NONEQUAL
26228: PUSH
26229: LD_VAR 0 2
26233: PPUSH
26234: CALL_OW 311
26238: OR
26239: AND
26240: IFFALSE 26281
// begin ComCollect ( j , x , y ) ;
26242: LD_VAR 0 2
26246: PPUSH
26247: LD_VAR 0 6
26251: PPUSH
26252: LD_VAR 0 7
26256: PPUSH
26257: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26261: LD_VAR 0 2
26265: PPUSH
26266: LD_VAR 0 8
26270: PPUSH
26271: CALL_OW 172
// exit ;
26275: POP
26276: POP
26277: POP
26278: POP
26279: GO 26289
// end ;
26281: GO 26171
26283: POP
26284: POP
// end ; end ;
26285: GO 25660
26287: POP
26288: POP
// end ; end_of_file
26289: PPOPN 9
26291: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26292: LD_VAR 0 1
26296: PUSH
26297: LD_INT 200
26299: DOUBLE
26300: GREATEREQUAL
26301: IFFALSE 26309
26303: LD_INT 299
26305: DOUBLE
26306: LESSEQUAL
26307: IFTRUE 26311
26309: GO 26343
26311: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26312: LD_VAR 0 1
26316: PPUSH
26317: LD_VAR 0 2
26321: PPUSH
26322: LD_VAR 0 3
26326: PPUSH
26327: LD_VAR 0 4
26331: PPUSH
26332: LD_VAR 0 5
26336: PPUSH
26337: CALL 26831 0 5
26341: GO 26420
26343: LD_INT 300
26345: DOUBLE
26346: GREATEREQUAL
26347: IFFALSE 26355
26349: LD_INT 399
26351: DOUBLE
26352: LESSEQUAL
26353: IFTRUE 26357
26355: GO 26419
26357: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26358: LD_VAR 0 1
26362: PPUSH
26363: LD_VAR 0 2
26367: PPUSH
26368: LD_VAR 0 3
26372: PPUSH
26373: LD_VAR 0 4
26377: PPUSH
26378: LD_VAR 0 5
26382: PPUSH
26383: LD_VAR 0 6
26387: PPUSH
26388: LD_VAR 0 7
26392: PPUSH
26393: LD_VAR 0 8
26397: PPUSH
26398: LD_VAR 0 9
26402: PPUSH
26403: LD_VAR 0 10
26407: PPUSH
26408: LD_VAR 0 11
26412: PPUSH
26413: CALL 22993 0 11
26417: GO 26420
26419: POP
// end ;
26420: PPOPN 11
26422: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26423: LD_VAR 0 1
26427: PPUSH
26428: LD_VAR 0 2
26432: PPUSH
26433: LD_VAR 0 3
26437: PPUSH
26438: LD_VAR 0 4
26442: PPUSH
26443: LD_VAR 0 5
26447: PPUSH
26448: CALL 26567 0 5
// end ; end_of_file
26452: PPOPN 5
26454: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26455: LD_INT 0
26457: PPUSH
26458: PPUSH
26459: PPUSH
26460: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26461: LD_VAR 0 1
26465: PPUSH
26466: CALL_OW 264
26470: PUSH
26471: LD_INT 91
26473: EQUAL
26474: IFFALSE 26546
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26476: LD_INT 68
26478: PPUSH
26479: LD_VAR 0 1
26483: PPUSH
26484: CALL_OW 255
26488: PPUSH
26489: CALL_OW 321
26493: PUSH
26494: LD_INT 2
26496: EQUAL
26497: IFFALSE 26509
// eff := 70 else
26499: LD_ADDR_VAR 0 4
26503: PUSH
26504: LD_INT 70
26506: ST_TO_ADDR
26507: GO 26517
// eff := 30 ;
26509: LD_ADDR_VAR 0 4
26513: PUSH
26514: LD_INT 30
26516: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26517: LD_VAR 0 1
26521: PPUSH
26522: CALL_OW 250
26526: PPUSH
26527: LD_VAR 0 1
26531: PPUSH
26532: CALL_OW 251
26536: PPUSH
26537: LD_VAR 0 4
26541: PPUSH
26542: CALL_OW 495
// end ; end ;
26546: LD_VAR 0 2
26550: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26551: LD_INT 0
26553: PPUSH
// end ;
26554: LD_VAR 0 4
26558: RET
// export function SOS_Command ( cmd ) ; begin
26559: LD_INT 0
26561: PPUSH
// end ;
26562: LD_VAR 0 2
26566: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26567: LD_INT 0
26569: PPUSH
// end ;
26570: LD_VAR 0 6
26574: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26575: LD_INT 0
26577: PPUSH
26578: PPUSH
// if not vehicle or not factory then
26579: LD_VAR 0 1
26583: NOT
26584: PUSH
26585: LD_VAR 0 2
26589: NOT
26590: OR
26591: IFFALSE 26595
// exit ;
26593: GO 26826
// if factoryWaypoints >= factory then
26595: LD_EXP 103
26599: PUSH
26600: LD_VAR 0 2
26604: GREATEREQUAL
26605: IFFALSE 26826
// if factoryWaypoints [ factory ] then
26607: LD_EXP 103
26611: PUSH
26612: LD_VAR 0 2
26616: ARRAY
26617: IFFALSE 26826
// begin if GetControl ( vehicle ) = control_manual then
26619: LD_VAR 0 1
26623: PPUSH
26624: CALL_OW 263
26628: PUSH
26629: LD_INT 1
26631: EQUAL
26632: IFFALSE 26713
// begin driver := IsDrivenBy ( vehicle ) ;
26634: LD_ADDR_VAR 0 4
26638: PUSH
26639: LD_VAR 0 1
26643: PPUSH
26644: CALL_OW 311
26648: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26649: LD_VAR 0 4
26653: PPUSH
26654: LD_EXP 103
26658: PUSH
26659: LD_VAR 0 2
26663: ARRAY
26664: PUSH
26665: LD_INT 3
26667: ARRAY
26668: PPUSH
26669: LD_EXP 103
26673: PUSH
26674: LD_VAR 0 2
26678: ARRAY
26679: PUSH
26680: LD_INT 4
26682: ARRAY
26683: PPUSH
26684: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26688: LD_VAR 0 4
26692: PPUSH
26693: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26697: LD_VAR 0 4
26701: PPUSH
26702: LD_VAR 0 2
26706: PPUSH
26707: CALL_OW 180
// end else
26711: GO 26826
// if GetControl ( vehicle ) = control_remote then
26713: LD_VAR 0 1
26717: PPUSH
26718: CALL_OW 263
26722: PUSH
26723: LD_INT 2
26725: EQUAL
26726: IFFALSE 26787
// begin wait ( 0 0$2 ) ;
26728: LD_INT 70
26730: PPUSH
26731: CALL_OW 67
// if Connect ( vehicle ) then
26735: LD_VAR 0 1
26739: PPUSH
26740: CALL 39657 0 1
26744: IFFALSE 26785
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26746: LD_VAR 0 1
26750: PPUSH
26751: LD_EXP 103
26755: PUSH
26756: LD_VAR 0 2
26760: ARRAY
26761: PUSH
26762: LD_INT 3
26764: ARRAY
26765: PPUSH
26766: LD_EXP 103
26770: PUSH
26771: LD_VAR 0 2
26775: ARRAY
26776: PUSH
26777: LD_INT 4
26779: ARRAY
26780: PPUSH
26781: CALL_OW 171
// end else
26785: GO 26826
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26787: LD_VAR 0 1
26791: PPUSH
26792: LD_EXP 103
26796: PUSH
26797: LD_VAR 0 2
26801: ARRAY
26802: PUSH
26803: LD_INT 3
26805: ARRAY
26806: PPUSH
26807: LD_EXP 103
26811: PUSH
26812: LD_VAR 0 2
26816: ARRAY
26817: PUSH
26818: LD_INT 4
26820: ARRAY
26821: PPUSH
26822: CALL_OW 171
// end ; end ;
26826: LD_VAR 0 3
26830: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26831: LD_INT 0
26833: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26834: LD_VAR 0 1
26838: PUSH
26839: LD_INT 250
26841: EQUAL
26842: PUSH
26843: LD_VAR 0 2
26847: PPUSH
26848: CALL_OW 264
26852: PUSH
26853: LD_INT 81
26855: EQUAL
26856: AND
26857: IFFALSE 26878
// MinerPlaceMine ( unit , x , y ) ;
26859: LD_VAR 0 2
26863: PPUSH
26864: LD_VAR 0 4
26868: PPUSH
26869: LD_VAR 0 5
26873: PPUSH
26874: CALL 29868 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26878: LD_VAR 0 1
26882: PUSH
26883: LD_INT 251
26885: EQUAL
26886: PUSH
26887: LD_VAR 0 2
26891: PPUSH
26892: CALL_OW 264
26896: PUSH
26897: LD_INT 81
26899: EQUAL
26900: AND
26901: IFFALSE 26922
// MinerDetonateMine ( unit , x , y ) ;
26903: LD_VAR 0 2
26907: PPUSH
26908: LD_VAR 0 4
26912: PPUSH
26913: LD_VAR 0 5
26917: PPUSH
26918: CALL 30143 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26922: LD_VAR 0 1
26926: PUSH
26927: LD_INT 252
26929: EQUAL
26930: PUSH
26931: LD_VAR 0 2
26935: PPUSH
26936: CALL_OW 264
26940: PUSH
26941: LD_INT 81
26943: EQUAL
26944: AND
26945: IFFALSE 26966
// MinerCreateMinefield ( unit , x , y ) ;
26947: LD_VAR 0 2
26951: PPUSH
26952: LD_VAR 0 4
26956: PPUSH
26957: LD_VAR 0 5
26961: PPUSH
26962: CALL 30560 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26966: LD_VAR 0 1
26970: PUSH
26971: LD_INT 253
26973: EQUAL
26974: PUSH
26975: LD_VAR 0 2
26979: PPUSH
26980: CALL_OW 257
26984: PUSH
26985: LD_INT 5
26987: EQUAL
26988: AND
26989: IFFALSE 27010
// ComBinocular ( unit , x , y ) ;
26991: LD_VAR 0 2
26995: PPUSH
26996: LD_VAR 0 4
27000: PPUSH
27001: LD_VAR 0 5
27005: PPUSH
27006: CALL 30929 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27010: LD_VAR 0 1
27014: PUSH
27015: LD_INT 254
27017: EQUAL
27018: PUSH
27019: LD_VAR 0 2
27023: PPUSH
27024: CALL_OW 264
27028: PUSH
27029: LD_INT 99
27031: EQUAL
27032: AND
27033: PUSH
27034: LD_VAR 0 3
27038: PPUSH
27039: CALL_OW 263
27043: PUSH
27044: LD_INT 3
27046: EQUAL
27047: AND
27048: IFFALSE 27064
// HackDestroyVehicle ( unit , selectedUnit ) ;
27050: LD_VAR 0 2
27054: PPUSH
27055: LD_VAR 0 3
27059: PPUSH
27060: CALL 29232 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27064: LD_VAR 0 1
27068: PUSH
27069: LD_INT 255
27071: EQUAL
27072: PUSH
27073: LD_VAR 0 2
27077: PPUSH
27078: CALL_OW 264
27082: PUSH
27083: LD_INT 14
27085: PUSH
27086: LD_INT 53
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: IN
27093: AND
27094: PUSH
27095: LD_VAR 0 4
27099: PPUSH
27100: LD_VAR 0 5
27104: PPUSH
27105: CALL_OW 488
27109: AND
27110: IFFALSE 27134
// CutTreeXYR ( unit , x , y , 12 ) ;
27112: LD_VAR 0 2
27116: PPUSH
27117: LD_VAR 0 4
27121: PPUSH
27122: LD_VAR 0 5
27126: PPUSH
27127: LD_INT 12
27129: PPUSH
27130: CALL 27229 0 4
// if cmd = 256 then
27134: LD_VAR 0 1
27138: PUSH
27139: LD_INT 256
27141: EQUAL
27142: IFFALSE 27163
// SetFactoryWaypoint ( unit , x , y ) ;
27144: LD_VAR 0 2
27148: PPUSH
27149: LD_VAR 0 4
27153: PPUSH
27154: LD_VAR 0 5
27158: PPUSH
27159: CALL 24981 0 3
// if cmd = 257 then
27163: LD_VAR 0 1
27167: PUSH
27168: LD_INT 257
27170: EQUAL
27171: IFFALSE 27192
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27173: LD_VAR 0 2
27177: PPUSH
27178: LD_VAR 0 4
27182: PPUSH
27183: LD_VAR 0 5
27187: PPUSH
27188: CALL 25343 0 3
// if cmd = 258 then
27192: LD_VAR 0 1
27196: PUSH
27197: LD_INT 258
27199: EQUAL
27200: IFFALSE 27224
// BurnTreeXYR ( unit , x , y , 8 ) ;
27202: LD_VAR 0 2
27206: PPUSH
27207: LD_VAR 0 4
27211: PPUSH
27212: LD_VAR 0 5
27216: PPUSH
27217: LD_INT 8
27219: PPUSH
27220: CALL 27623 0 4
// end ;
27224: LD_VAR 0 6
27228: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27229: LD_INT 0
27231: PPUSH
27232: PPUSH
27233: PPUSH
27234: PPUSH
27235: PPUSH
27236: PPUSH
27237: PPUSH
27238: PPUSH
27239: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27240: LD_VAR 0 1
27244: PPUSH
27245: CALL_OW 302
27249: NOT
27250: PUSH
27251: LD_VAR 0 2
27255: PPUSH
27256: LD_VAR 0 3
27260: PPUSH
27261: CALL_OW 488
27265: NOT
27266: OR
27267: PUSH
27268: LD_VAR 0 4
27272: NOT
27273: OR
27274: IFFALSE 27278
// exit ;
27276: GO 27618
// list := [ ] ;
27278: LD_ADDR_VAR 0 13
27282: PUSH
27283: EMPTY
27284: ST_TO_ADDR
// if x - r < 0 then
27285: LD_VAR 0 2
27289: PUSH
27290: LD_VAR 0 4
27294: MINUS
27295: PUSH
27296: LD_INT 0
27298: LESS
27299: IFFALSE 27311
// min_x := 0 else
27301: LD_ADDR_VAR 0 7
27305: PUSH
27306: LD_INT 0
27308: ST_TO_ADDR
27309: GO 27327
// min_x := x - r ;
27311: LD_ADDR_VAR 0 7
27315: PUSH
27316: LD_VAR 0 2
27320: PUSH
27321: LD_VAR 0 4
27325: MINUS
27326: ST_TO_ADDR
// if y - r < 0 then
27327: LD_VAR 0 3
27331: PUSH
27332: LD_VAR 0 4
27336: MINUS
27337: PUSH
27338: LD_INT 0
27340: LESS
27341: IFFALSE 27353
// min_y := 0 else
27343: LD_ADDR_VAR 0 8
27347: PUSH
27348: LD_INT 0
27350: ST_TO_ADDR
27351: GO 27369
// min_y := y - r ;
27353: LD_ADDR_VAR 0 8
27357: PUSH
27358: LD_VAR 0 3
27362: PUSH
27363: LD_VAR 0 4
27367: MINUS
27368: ST_TO_ADDR
// max_x := x + r ;
27369: LD_ADDR_VAR 0 9
27373: PUSH
27374: LD_VAR 0 2
27378: PUSH
27379: LD_VAR 0 4
27383: PLUS
27384: ST_TO_ADDR
// max_y := y + r ;
27385: LD_ADDR_VAR 0 10
27389: PUSH
27390: LD_VAR 0 3
27394: PUSH
27395: LD_VAR 0 4
27399: PLUS
27400: ST_TO_ADDR
// for _x = min_x to max_x do
27401: LD_ADDR_VAR 0 11
27405: PUSH
27406: DOUBLE
27407: LD_VAR 0 7
27411: DEC
27412: ST_TO_ADDR
27413: LD_VAR 0 9
27417: PUSH
27418: FOR_TO
27419: IFFALSE 27536
// for _y = min_y to max_y do
27421: LD_ADDR_VAR 0 12
27425: PUSH
27426: DOUBLE
27427: LD_VAR 0 8
27431: DEC
27432: ST_TO_ADDR
27433: LD_VAR 0 10
27437: PUSH
27438: FOR_TO
27439: IFFALSE 27532
// begin if not ValidHex ( _x , _y ) then
27441: LD_VAR 0 11
27445: PPUSH
27446: LD_VAR 0 12
27450: PPUSH
27451: CALL_OW 488
27455: NOT
27456: IFFALSE 27460
// continue ;
27458: GO 27438
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27460: LD_VAR 0 11
27464: PPUSH
27465: LD_VAR 0 12
27469: PPUSH
27470: CALL_OW 351
27474: PUSH
27475: LD_VAR 0 11
27479: PPUSH
27480: LD_VAR 0 12
27484: PPUSH
27485: CALL_OW 554
27489: AND
27490: IFFALSE 27530
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27492: LD_ADDR_VAR 0 13
27496: PUSH
27497: LD_VAR 0 13
27501: PPUSH
27502: LD_VAR 0 13
27506: PUSH
27507: LD_INT 1
27509: PLUS
27510: PPUSH
27511: LD_VAR 0 11
27515: PUSH
27516: LD_VAR 0 12
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PPUSH
27525: CALL_OW 2
27529: ST_TO_ADDR
// end ;
27530: GO 27438
27532: POP
27533: POP
27534: GO 27418
27536: POP
27537: POP
// if not list then
27538: LD_VAR 0 13
27542: NOT
27543: IFFALSE 27547
// exit ;
27545: GO 27618
// for i in list do
27547: LD_ADDR_VAR 0 6
27551: PUSH
27552: LD_VAR 0 13
27556: PUSH
27557: FOR_IN
27558: IFFALSE 27616
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27560: LD_VAR 0 1
27564: PPUSH
27565: LD_STRING M
27567: PUSH
27568: LD_VAR 0 6
27572: PUSH
27573: LD_INT 1
27575: ARRAY
27576: PUSH
27577: LD_VAR 0 6
27581: PUSH
27582: LD_INT 2
27584: ARRAY
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: LD_INT 0
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: PUSH
27607: EMPTY
27608: LIST
27609: PPUSH
27610: CALL_OW 447
27614: GO 27557
27616: POP
27617: POP
// end ;
27618: LD_VAR 0 5
27622: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
27623: LD_INT 0
27625: PPUSH
27626: PPUSH
27627: PPUSH
27628: PPUSH
27629: PPUSH
27630: PPUSH
27631: PPUSH
27632: PPUSH
27633: PPUSH
27634: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
27635: LD_VAR 0 1
27639: PPUSH
27640: CALL_OW 302
27644: NOT
27645: PUSH
27646: LD_VAR 0 2
27650: PPUSH
27651: LD_VAR 0 3
27655: PPUSH
27656: CALL_OW 488
27660: NOT
27661: OR
27662: PUSH
27663: LD_VAR 0 4
27667: NOT
27668: OR
27669: IFFALSE 27673
// exit ;
27671: GO 28186
// list := [ ] ;
27673: LD_ADDR_VAR 0 13
27677: PUSH
27678: EMPTY
27679: ST_TO_ADDR
// if x - r < 0 then
27680: LD_VAR 0 2
27684: PUSH
27685: LD_VAR 0 4
27689: MINUS
27690: PUSH
27691: LD_INT 0
27693: LESS
27694: IFFALSE 27706
// min_x := 0 else
27696: LD_ADDR_VAR 0 7
27700: PUSH
27701: LD_INT 0
27703: ST_TO_ADDR
27704: GO 27722
// min_x := x - r ;
27706: LD_ADDR_VAR 0 7
27710: PUSH
27711: LD_VAR 0 2
27715: PUSH
27716: LD_VAR 0 4
27720: MINUS
27721: ST_TO_ADDR
// if y - r < 0 then
27722: LD_VAR 0 3
27726: PUSH
27727: LD_VAR 0 4
27731: MINUS
27732: PUSH
27733: LD_INT 0
27735: LESS
27736: IFFALSE 27748
// min_y := 0 else
27738: LD_ADDR_VAR 0 8
27742: PUSH
27743: LD_INT 0
27745: ST_TO_ADDR
27746: GO 27764
// min_y := y - r ;
27748: LD_ADDR_VAR 0 8
27752: PUSH
27753: LD_VAR 0 3
27757: PUSH
27758: LD_VAR 0 4
27762: MINUS
27763: ST_TO_ADDR
// max_x := x + r ;
27764: LD_ADDR_VAR 0 9
27768: PUSH
27769: LD_VAR 0 2
27773: PUSH
27774: LD_VAR 0 4
27778: PLUS
27779: ST_TO_ADDR
// max_y := y + r ;
27780: LD_ADDR_VAR 0 10
27784: PUSH
27785: LD_VAR 0 3
27789: PUSH
27790: LD_VAR 0 4
27794: PLUS
27795: ST_TO_ADDR
// for _x = min_x to max_x do
27796: LD_ADDR_VAR 0 11
27800: PUSH
27801: DOUBLE
27802: LD_VAR 0 7
27806: DEC
27807: ST_TO_ADDR
27808: LD_VAR 0 9
27812: PUSH
27813: FOR_TO
27814: IFFALSE 27931
// for _y = min_y to max_y do
27816: LD_ADDR_VAR 0 12
27820: PUSH
27821: DOUBLE
27822: LD_VAR 0 8
27826: DEC
27827: ST_TO_ADDR
27828: LD_VAR 0 10
27832: PUSH
27833: FOR_TO
27834: IFFALSE 27927
// begin if not ValidHex ( _x , _y ) then
27836: LD_VAR 0 11
27840: PPUSH
27841: LD_VAR 0 12
27845: PPUSH
27846: CALL_OW 488
27850: NOT
27851: IFFALSE 27855
// continue ;
27853: GO 27833
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27855: LD_VAR 0 11
27859: PPUSH
27860: LD_VAR 0 12
27864: PPUSH
27865: CALL_OW 351
27869: PUSH
27870: LD_VAR 0 11
27874: PPUSH
27875: LD_VAR 0 12
27879: PPUSH
27880: CALL_OW 554
27884: AND
27885: IFFALSE 27925
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27887: LD_ADDR_VAR 0 13
27891: PUSH
27892: LD_VAR 0 13
27896: PPUSH
27897: LD_VAR 0 13
27901: PUSH
27902: LD_INT 1
27904: PLUS
27905: PPUSH
27906: LD_VAR 0 11
27910: PUSH
27911: LD_VAR 0 12
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PPUSH
27920: CALL_OW 2
27924: ST_TO_ADDR
// end ;
27925: GO 27833
27927: POP
27928: POP
27929: GO 27813
27931: POP
27932: POP
// if not list then
27933: LD_VAR 0 13
27937: NOT
27938: IFFALSE 27942
// exit ;
27940: GO 28186
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
27942: LD_ADDR_VAR 0 13
27946: PUSH
27947: LD_VAR 0 1
27951: PPUSH
27952: LD_VAR 0 13
27956: PPUSH
27957: LD_INT 1
27959: PPUSH
27960: LD_INT 1
27962: PPUSH
27963: CALL 36799 0 4
27967: ST_TO_ADDR
// ComStop ( flame ) ;
27968: LD_VAR 0 1
27972: PPUSH
27973: CALL_OW 141
// for i in list do
27977: LD_ADDR_VAR 0 6
27981: PUSH
27982: LD_VAR 0 13
27986: PUSH
27987: FOR_IN
27988: IFFALSE 28019
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
27990: LD_VAR 0 1
27994: PPUSH
27995: LD_VAR 0 6
27999: PUSH
28000: LD_INT 1
28002: ARRAY
28003: PPUSH
28004: LD_VAR 0 6
28008: PUSH
28009: LD_INT 2
28011: ARRAY
28012: PPUSH
28013: CALL_OW 176
28017: GO 27987
28019: POP
28020: POP
// repeat wait ( 0 0$1 ) ;
28021: LD_INT 35
28023: PPUSH
28024: CALL_OW 67
// task := GetTaskList ( flame ) ;
28028: LD_ADDR_VAR 0 14
28032: PUSH
28033: LD_VAR 0 1
28037: PPUSH
28038: CALL_OW 437
28042: ST_TO_ADDR
// if not task then
28043: LD_VAR 0 14
28047: NOT
28048: IFFALSE 28052
// exit ;
28050: GO 28186
// if task [ 1 ] [ 1 ] <> | then
28052: LD_VAR 0 14
28056: PUSH
28057: LD_INT 1
28059: ARRAY
28060: PUSH
28061: LD_INT 1
28063: ARRAY
28064: PUSH
28065: LD_STRING |
28067: NONEQUAL
28068: IFFALSE 28072
// exit ;
28070: GO 28186
// _x := task [ 1 ] [ 2 ] ;
28072: LD_ADDR_VAR 0 11
28076: PUSH
28077: LD_VAR 0 14
28081: PUSH
28082: LD_INT 1
28084: ARRAY
28085: PUSH
28086: LD_INT 2
28088: ARRAY
28089: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
28090: LD_ADDR_VAR 0 12
28094: PUSH
28095: LD_VAR 0 14
28099: PUSH
28100: LD_INT 1
28102: ARRAY
28103: PUSH
28104: LD_INT 3
28106: ARRAY
28107: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
28108: LD_VAR 0 11
28112: PPUSH
28113: LD_VAR 0 12
28117: PPUSH
28118: CALL_OW 351
28122: NOT
28123: PUSH
28124: LD_VAR 0 11
28128: PPUSH
28129: LD_VAR 0 12
28133: PPUSH
28134: CALL_OW 554
28138: NOT
28139: OR
28140: IFFALSE 28174
// begin task := Delete ( task , 1 ) ;
28142: LD_ADDR_VAR 0 14
28146: PUSH
28147: LD_VAR 0 14
28151: PPUSH
28152: LD_INT 1
28154: PPUSH
28155: CALL_OW 3
28159: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
28160: LD_VAR 0 1
28164: PPUSH
28165: LD_VAR 0 14
28169: PPUSH
28170: CALL_OW 446
// end ; until not HasTask ( flame ) ;
28174: LD_VAR 0 1
28178: PPUSH
28179: CALL_OW 314
28183: NOT
28184: IFFALSE 28021
// end ;
28186: LD_VAR 0 5
28190: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28191: LD_EXP 106
28195: NOT
28196: IFFALSE 28246
28198: GO 28200
28200: DISABLE
// begin initHack := true ;
28201: LD_ADDR_EXP 106
28205: PUSH
28206: LD_INT 1
28208: ST_TO_ADDR
// hackTanks := [ ] ;
28209: LD_ADDR_EXP 107
28213: PUSH
28214: EMPTY
28215: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28216: LD_ADDR_EXP 108
28220: PUSH
28221: EMPTY
28222: ST_TO_ADDR
// hackLimit := 3 ;
28223: LD_ADDR_EXP 109
28227: PUSH
28228: LD_INT 3
28230: ST_TO_ADDR
// hackDist := 12 ;
28231: LD_ADDR_EXP 110
28235: PUSH
28236: LD_INT 12
28238: ST_TO_ADDR
// hackCounter := [ ] ;
28239: LD_ADDR_EXP 111
28243: PUSH
28244: EMPTY
28245: ST_TO_ADDR
// end ;
28246: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28247: LD_EXP 106
28251: PUSH
28252: LD_INT 34
28254: PUSH
28255: LD_INT 99
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PPUSH
28262: CALL_OW 69
28266: AND
28267: IFFALSE 28520
28269: GO 28271
28271: DISABLE
28272: LD_INT 0
28274: PPUSH
28275: PPUSH
// begin enable ;
28276: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28277: LD_ADDR_VAR 0 1
28281: PUSH
28282: LD_INT 34
28284: PUSH
28285: LD_INT 99
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PPUSH
28292: CALL_OW 69
28296: PUSH
28297: FOR_IN
28298: IFFALSE 28518
// begin if not i in hackTanks then
28300: LD_VAR 0 1
28304: PUSH
28305: LD_EXP 107
28309: IN
28310: NOT
28311: IFFALSE 28394
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28313: LD_ADDR_EXP 107
28317: PUSH
28318: LD_EXP 107
28322: PPUSH
28323: LD_EXP 107
28327: PUSH
28328: LD_INT 1
28330: PLUS
28331: PPUSH
28332: LD_VAR 0 1
28336: PPUSH
28337: CALL_OW 1
28341: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28342: LD_ADDR_EXP 108
28346: PUSH
28347: LD_EXP 108
28351: PPUSH
28352: LD_EXP 108
28356: PUSH
28357: LD_INT 1
28359: PLUS
28360: PPUSH
28361: EMPTY
28362: PPUSH
28363: CALL_OW 1
28367: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28368: LD_ADDR_EXP 111
28372: PUSH
28373: LD_EXP 111
28377: PPUSH
28378: LD_EXP 111
28382: PUSH
28383: LD_INT 1
28385: PLUS
28386: PPUSH
28387: EMPTY
28388: PPUSH
28389: CALL_OW 1
28393: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28394: LD_VAR 0 1
28398: PPUSH
28399: CALL_OW 302
28403: NOT
28404: IFFALSE 28417
// begin HackUnlinkAll ( i ) ;
28406: LD_VAR 0 1
28410: PPUSH
28411: CALL 28523 0 1
// continue ;
28415: GO 28297
// end ; HackCheckCapturedStatus ( i ) ;
28417: LD_VAR 0 1
28421: PPUSH
28422: CALL 28966 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28426: LD_ADDR_VAR 0 2
28430: PUSH
28431: LD_INT 81
28433: PUSH
28434: LD_VAR 0 1
28438: PPUSH
28439: CALL_OW 255
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 33
28450: PUSH
28451: LD_INT 3
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 91
28460: PUSH
28461: LD_VAR 0 1
28465: PUSH
28466: LD_EXP 110
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 50
28478: PUSH
28479: EMPTY
28480: LIST
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: PPUSH
28488: CALL_OW 69
28492: ST_TO_ADDR
// if not tmp then
28493: LD_VAR 0 2
28497: NOT
28498: IFFALSE 28502
// continue ;
28500: GO 28297
// HackLink ( i , tmp ) ;
28502: LD_VAR 0 1
28506: PPUSH
28507: LD_VAR 0 2
28511: PPUSH
28512: CALL 28659 0 2
// end ;
28516: GO 28297
28518: POP
28519: POP
// end ;
28520: PPOPN 2
28522: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28523: LD_INT 0
28525: PPUSH
28526: PPUSH
28527: PPUSH
// if not hack in hackTanks then
28528: LD_VAR 0 1
28532: PUSH
28533: LD_EXP 107
28537: IN
28538: NOT
28539: IFFALSE 28543
// exit ;
28541: GO 28654
// index := GetElementIndex ( hackTanks , hack ) ;
28543: LD_ADDR_VAR 0 4
28547: PUSH
28548: LD_EXP 107
28552: PPUSH
28553: LD_VAR 0 1
28557: PPUSH
28558: CALL 36096 0 2
28562: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28563: LD_EXP 108
28567: PUSH
28568: LD_VAR 0 4
28572: ARRAY
28573: IFFALSE 28654
// begin for i in hackTanksCaptured [ index ] do
28575: LD_ADDR_VAR 0 3
28579: PUSH
28580: LD_EXP 108
28584: PUSH
28585: LD_VAR 0 4
28589: ARRAY
28590: PUSH
28591: FOR_IN
28592: IFFALSE 28618
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28594: LD_VAR 0 3
28598: PUSH
28599: LD_INT 1
28601: ARRAY
28602: PPUSH
28603: LD_VAR 0 3
28607: PUSH
28608: LD_INT 2
28610: ARRAY
28611: PPUSH
28612: CALL_OW 235
28616: GO 28591
28618: POP
28619: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28620: LD_ADDR_EXP 108
28624: PUSH
28625: LD_EXP 108
28629: PPUSH
28630: LD_VAR 0 4
28634: PPUSH
28635: EMPTY
28636: PPUSH
28637: CALL_OW 1
28641: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28642: LD_VAR 0 1
28646: PPUSH
28647: LD_INT 0
28649: PPUSH
28650: CALL_OW 505
// end ; end ;
28654: LD_VAR 0 2
28658: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28659: LD_INT 0
28661: PPUSH
28662: PPUSH
28663: PPUSH
// if not hack in hackTanks or not vehicles then
28664: LD_VAR 0 1
28668: PUSH
28669: LD_EXP 107
28673: IN
28674: NOT
28675: PUSH
28676: LD_VAR 0 2
28680: NOT
28681: OR
28682: IFFALSE 28686
// exit ;
28684: GO 28961
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28686: LD_ADDR_VAR 0 2
28690: PUSH
28691: LD_VAR 0 1
28695: PPUSH
28696: LD_VAR 0 2
28700: PPUSH
28701: LD_INT 1
28703: PPUSH
28704: LD_INT 1
28706: PPUSH
28707: CALL 36746 0 4
28711: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28712: LD_ADDR_VAR 0 5
28716: PUSH
28717: LD_EXP 107
28721: PPUSH
28722: LD_VAR 0 1
28726: PPUSH
28727: CALL 36096 0 2
28731: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28732: LD_EXP 108
28736: PUSH
28737: LD_VAR 0 5
28741: ARRAY
28742: PUSH
28743: LD_EXP 109
28747: LESS
28748: IFFALSE 28937
// begin for i := 1 to vehicles do
28750: LD_ADDR_VAR 0 4
28754: PUSH
28755: DOUBLE
28756: LD_INT 1
28758: DEC
28759: ST_TO_ADDR
28760: LD_VAR 0 2
28764: PUSH
28765: FOR_TO
28766: IFFALSE 28935
// begin if hackTanksCaptured [ index ] = hackLimit then
28768: LD_EXP 108
28772: PUSH
28773: LD_VAR 0 5
28777: ARRAY
28778: PUSH
28779: LD_EXP 109
28783: EQUAL
28784: IFFALSE 28788
// break ;
28786: GO 28935
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28788: LD_ADDR_EXP 111
28792: PUSH
28793: LD_EXP 111
28797: PPUSH
28798: LD_VAR 0 5
28802: PPUSH
28803: LD_EXP 111
28807: PUSH
28808: LD_VAR 0 5
28812: ARRAY
28813: PUSH
28814: LD_INT 1
28816: PLUS
28817: PPUSH
28818: CALL_OW 1
28822: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28823: LD_ADDR_EXP 108
28827: PUSH
28828: LD_EXP 108
28832: PPUSH
28833: LD_VAR 0 5
28837: PUSH
28838: LD_EXP 108
28842: PUSH
28843: LD_VAR 0 5
28847: ARRAY
28848: PUSH
28849: LD_INT 1
28851: PLUS
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PPUSH
28857: LD_VAR 0 2
28861: PUSH
28862: LD_VAR 0 4
28866: ARRAY
28867: PUSH
28868: LD_VAR 0 2
28872: PUSH
28873: LD_VAR 0 4
28877: ARRAY
28878: PPUSH
28879: CALL_OW 255
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PPUSH
28888: CALL 36311 0 3
28892: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28893: LD_VAR 0 2
28897: PUSH
28898: LD_VAR 0 4
28902: ARRAY
28903: PPUSH
28904: LD_VAR 0 1
28908: PPUSH
28909: CALL_OW 255
28913: PPUSH
28914: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28918: LD_VAR 0 2
28922: PUSH
28923: LD_VAR 0 4
28927: ARRAY
28928: PPUSH
28929: CALL_OW 141
// end ;
28933: GO 28765
28935: POP
28936: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28937: LD_VAR 0 1
28941: PPUSH
28942: LD_EXP 108
28946: PUSH
28947: LD_VAR 0 5
28951: ARRAY
28952: PUSH
28953: LD_INT 0
28955: PLUS
28956: PPUSH
28957: CALL_OW 505
// end ;
28961: LD_VAR 0 3
28965: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28966: LD_INT 0
28968: PPUSH
28969: PPUSH
28970: PPUSH
28971: PPUSH
// if not hack in hackTanks then
28972: LD_VAR 0 1
28976: PUSH
28977: LD_EXP 107
28981: IN
28982: NOT
28983: IFFALSE 28987
// exit ;
28985: GO 29227
// index := GetElementIndex ( hackTanks , hack ) ;
28987: LD_ADDR_VAR 0 4
28991: PUSH
28992: LD_EXP 107
28996: PPUSH
28997: LD_VAR 0 1
29001: PPUSH
29002: CALL 36096 0 2
29006: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29007: LD_ADDR_VAR 0 3
29011: PUSH
29012: DOUBLE
29013: LD_EXP 108
29017: PUSH
29018: LD_VAR 0 4
29022: ARRAY
29023: INC
29024: ST_TO_ADDR
29025: LD_INT 1
29027: PUSH
29028: FOR_DOWNTO
29029: IFFALSE 29201
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29031: LD_ADDR_VAR 0 5
29035: PUSH
29036: LD_EXP 108
29040: PUSH
29041: LD_VAR 0 4
29045: ARRAY
29046: PUSH
29047: LD_VAR 0 3
29051: ARRAY
29052: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29053: LD_VAR 0 5
29057: PUSH
29058: LD_INT 1
29060: ARRAY
29061: PPUSH
29062: CALL_OW 302
29066: NOT
29067: PUSH
29068: LD_VAR 0 5
29072: PUSH
29073: LD_INT 1
29075: ARRAY
29076: PPUSH
29077: CALL_OW 255
29081: PUSH
29082: LD_VAR 0 1
29086: PPUSH
29087: CALL_OW 255
29091: NONEQUAL
29092: OR
29093: IFFALSE 29199
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29095: LD_VAR 0 5
29099: PUSH
29100: LD_INT 1
29102: ARRAY
29103: PPUSH
29104: CALL_OW 305
29108: PUSH
29109: LD_VAR 0 5
29113: PUSH
29114: LD_INT 1
29116: ARRAY
29117: PPUSH
29118: CALL_OW 255
29122: PUSH
29123: LD_VAR 0 1
29127: PPUSH
29128: CALL_OW 255
29132: EQUAL
29133: AND
29134: IFFALSE 29158
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29136: LD_VAR 0 5
29140: PUSH
29141: LD_INT 1
29143: ARRAY
29144: PPUSH
29145: LD_VAR 0 5
29149: PUSH
29150: LD_INT 2
29152: ARRAY
29153: PPUSH
29154: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29158: LD_ADDR_EXP 108
29162: PUSH
29163: LD_EXP 108
29167: PPUSH
29168: LD_VAR 0 4
29172: PPUSH
29173: LD_EXP 108
29177: PUSH
29178: LD_VAR 0 4
29182: ARRAY
29183: PPUSH
29184: LD_VAR 0 3
29188: PPUSH
29189: CALL_OW 3
29193: PPUSH
29194: CALL_OW 1
29198: ST_TO_ADDR
// end ; end ;
29199: GO 29028
29201: POP
29202: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29203: LD_VAR 0 1
29207: PPUSH
29208: LD_EXP 108
29212: PUSH
29213: LD_VAR 0 4
29217: ARRAY
29218: PUSH
29219: LD_INT 0
29221: PLUS
29222: PPUSH
29223: CALL_OW 505
// end ;
29227: LD_VAR 0 2
29231: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29232: LD_INT 0
29234: PPUSH
29235: PPUSH
29236: PPUSH
29237: PPUSH
// if not hack in hackTanks then
29238: LD_VAR 0 1
29242: PUSH
29243: LD_EXP 107
29247: IN
29248: NOT
29249: IFFALSE 29253
// exit ;
29251: GO 29338
// index := GetElementIndex ( hackTanks , hack ) ;
29253: LD_ADDR_VAR 0 5
29257: PUSH
29258: LD_EXP 107
29262: PPUSH
29263: LD_VAR 0 1
29267: PPUSH
29268: CALL 36096 0 2
29272: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29273: LD_ADDR_VAR 0 4
29277: PUSH
29278: DOUBLE
29279: LD_INT 1
29281: DEC
29282: ST_TO_ADDR
29283: LD_EXP 108
29287: PUSH
29288: LD_VAR 0 5
29292: ARRAY
29293: PUSH
29294: FOR_TO
29295: IFFALSE 29336
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29297: LD_EXP 108
29301: PUSH
29302: LD_VAR 0 5
29306: ARRAY
29307: PUSH
29308: LD_VAR 0 4
29312: ARRAY
29313: PUSH
29314: LD_INT 1
29316: ARRAY
29317: PUSH
29318: LD_VAR 0 2
29322: EQUAL
29323: IFFALSE 29334
// KillUnit ( vehicle ) ;
29325: LD_VAR 0 2
29329: PPUSH
29330: CALL_OW 66
29334: GO 29294
29336: POP
29337: POP
// end ;
29338: LD_VAR 0 3
29342: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29343: LD_EXP 112
29347: NOT
29348: IFFALSE 29383
29350: GO 29352
29352: DISABLE
// begin initMiner := true ;
29353: LD_ADDR_EXP 112
29357: PUSH
29358: LD_INT 1
29360: ST_TO_ADDR
// minersList := [ ] ;
29361: LD_ADDR_EXP 113
29365: PUSH
29366: EMPTY
29367: ST_TO_ADDR
// minerMinesList := [ ] ;
29368: LD_ADDR_EXP 114
29372: PUSH
29373: EMPTY
29374: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29375: LD_ADDR_EXP 115
29379: PUSH
29380: LD_INT 5
29382: ST_TO_ADDR
// end ;
29383: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29384: LD_EXP 112
29388: PUSH
29389: LD_INT 34
29391: PUSH
29392: LD_INT 81
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PPUSH
29399: CALL_OW 69
29403: AND
29404: IFFALSE 29865
29406: GO 29408
29408: DISABLE
29409: LD_INT 0
29411: PPUSH
29412: PPUSH
29413: PPUSH
29414: PPUSH
// begin enable ;
29415: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29416: LD_ADDR_VAR 0 1
29420: PUSH
29421: LD_INT 34
29423: PUSH
29424: LD_INT 81
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PPUSH
29431: CALL_OW 69
29435: PUSH
29436: FOR_IN
29437: IFFALSE 29509
// begin if not i in minersList then
29439: LD_VAR 0 1
29443: PUSH
29444: LD_EXP 113
29448: IN
29449: NOT
29450: IFFALSE 29507
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29452: LD_ADDR_EXP 113
29456: PUSH
29457: LD_EXP 113
29461: PPUSH
29462: LD_EXP 113
29466: PUSH
29467: LD_INT 1
29469: PLUS
29470: PPUSH
29471: LD_VAR 0 1
29475: PPUSH
29476: CALL_OW 1
29480: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29481: LD_ADDR_EXP 114
29485: PUSH
29486: LD_EXP 114
29490: PPUSH
29491: LD_EXP 114
29495: PUSH
29496: LD_INT 1
29498: PLUS
29499: PPUSH
29500: EMPTY
29501: PPUSH
29502: CALL_OW 1
29506: ST_TO_ADDR
// end end ;
29507: GO 29436
29509: POP
29510: POP
// for i := minerMinesList downto 1 do
29511: LD_ADDR_VAR 0 1
29515: PUSH
29516: DOUBLE
29517: LD_EXP 114
29521: INC
29522: ST_TO_ADDR
29523: LD_INT 1
29525: PUSH
29526: FOR_DOWNTO
29527: IFFALSE 29863
// begin if IsLive ( minersList [ i ] ) then
29529: LD_EXP 113
29533: PUSH
29534: LD_VAR 0 1
29538: ARRAY
29539: PPUSH
29540: CALL_OW 300
29544: IFFALSE 29572
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29546: LD_EXP 113
29550: PUSH
29551: LD_VAR 0 1
29555: ARRAY
29556: PPUSH
29557: LD_EXP 114
29561: PUSH
29562: LD_VAR 0 1
29566: ARRAY
29567: PPUSH
29568: CALL_OW 505
// if not minerMinesList [ i ] then
29572: LD_EXP 114
29576: PUSH
29577: LD_VAR 0 1
29581: ARRAY
29582: NOT
29583: IFFALSE 29587
// continue ;
29585: GO 29526
// for j := minerMinesList [ i ] downto 1 do
29587: LD_ADDR_VAR 0 2
29591: PUSH
29592: DOUBLE
29593: LD_EXP 114
29597: PUSH
29598: LD_VAR 0 1
29602: ARRAY
29603: INC
29604: ST_TO_ADDR
29605: LD_INT 1
29607: PUSH
29608: FOR_DOWNTO
29609: IFFALSE 29859
// begin side := GetSide ( minersList [ i ] ) ;
29611: LD_ADDR_VAR 0 3
29615: PUSH
29616: LD_EXP 113
29620: PUSH
29621: LD_VAR 0 1
29625: ARRAY
29626: PPUSH
29627: CALL_OW 255
29631: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29632: LD_ADDR_VAR 0 4
29636: PUSH
29637: LD_EXP 114
29641: PUSH
29642: LD_VAR 0 1
29646: ARRAY
29647: PUSH
29648: LD_VAR 0 2
29652: ARRAY
29653: PUSH
29654: LD_INT 1
29656: ARRAY
29657: PPUSH
29658: LD_EXP 114
29662: PUSH
29663: LD_VAR 0 1
29667: ARRAY
29668: PUSH
29669: LD_VAR 0 2
29673: ARRAY
29674: PUSH
29675: LD_INT 2
29677: ARRAY
29678: PPUSH
29679: CALL_OW 428
29683: ST_TO_ADDR
// if not tmp then
29684: LD_VAR 0 4
29688: NOT
29689: IFFALSE 29693
// continue ;
29691: GO 29608
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29693: LD_VAR 0 4
29697: PUSH
29698: LD_INT 81
29700: PUSH
29701: LD_VAR 0 3
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PPUSH
29710: CALL_OW 69
29714: IN
29715: PUSH
29716: LD_EXP 114
29720: PUSH
29721: LD_VAR 0 1
29725: ARRAY
29726: PUSH
29727: LD_VAR 0 2
29731: ARRAY
29732: PUSH
29733: LD_INT 1
29735: ARRAY
29736: PPUSH
29737: LD_EXP 114
29741: PUSH
29742: LD_VAR 0 1
29746: ARRAY
29747: PUSH
29748: LD_VAR 0 2
29752: ARRAY
29753: PUSH
29754: LD_INT 2
29756: ARRAY
29757: PPUSH
29758: CALL_OW 458
29762: AND
29763: IFFALSE 29857
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29765: LD_EXP 114
29769: PUSH
29770: LD_VAR 0 1
29774: ARRAY
29775: PUSH
29776: LD_VAR 0 2
29780: ARRAY
29781: PUSH
29782: LD_INT 1
29784: ARRAY
29785: PPUSH
29786: LD_EXP 114
29790: PUSH
29791: LD_VAR 0 1
29795: ARRAY
29796: PUSH
29797: LD_VAR 0 2
29801: ARRAY
29802: PUSH
29803: LD_INT 2
29805: ARRAY
29806: PPUSH
29807: LD_VAR 0 3
29811: PPUSH
29812: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29816: LD_ADDR_EXP 114
29820: PUSH
29821: LD_EXP 114
29825: PPUSH
29826: LD_VAR 0 1
29830: PPUSH
29831: LD_EXP 114
29835: PUSH
29836: LD_VAR 0 1
29840: ARRAY
29841: PPUSH
29842: LD_VAR 0 2
29846: PPUSH
29847: CALL_OW 3
29851: PPUSH
29852: CALL_OW 1
29856: ST_TO_ADDR
// end ; end ;
29857: GO 29608
29859: POP
29860: POP
// end ;
29861: GO 29526
29863: POP
29864: POP
// end ;
29865: PPOPN 4
29867: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29868: LD_INT 0
29870: PPUSH
29871: PPUSH
// result := false ;
29872: LD_ADDR_VAR 0 4
29876: PUSH
29877: LD_INT 0
29879: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29880: LD_VAR 0 1
29884: PPUSH
29885: CALL_OW 264
29889: PUSH
29890: LD_INT 81
29892: EQUAL
29893: NOT
29894: IFFALSE 29898
// exit ;
29896: GO 30138
// index := GetElementIndex ( minersList , unit ) ;
29898: LD_ADDR_VAR 0 5
29902: PUSH
29903: LD_EXP 113
29907: PPUSH
29908: LD_VAR 0 1
29912: PPUSH
29913: CALL 36096 0 2
29917: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29918: LD_EXP 114
29922: PUSH
29923: LD_VAR 0 5
29927: ARRAY
29928: PUSH
29929: LD_EXP 115
29933: GREATEREQUAL
29934: IFFALSE 29938
// exit ;
29936: GO 30138
// ComMoveXY ( unit , x , y ) ;
29938: LD_VAR 0 1
29942: PPUSH
29943: LD_VAR 0 2
29947: PPUSH
29948: LD_VAR 0 3
29952: PPUSH
29953: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29957: LD_INT 35
29959: PPUSH
29960: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29964: LD_VAR 0 1
29968: PPUSH
29969: LD_VAR 0 2
29973: PPUSH
29974: LD_VAR 0 3
29978: PPUSH
29979: CALL 67837 0 3
29983: NOT
29984: PUSH
29985: LD_VAR 0 1
29989: PPUSH
29990: CALL_OW 314
29994: AND
29995: IFFALSE 29999
// exit ;
29997: GO 30138
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29999: LD_VAR 0 2
30003: PPUSH
30004: LD_VAR 0 3
30008: PPUSH
30009: CALL_OW 428
30013: PUSH
30014: LD_VAR 0 1
30018: EQUAL
30019: PUSH
30020: LD_VAR 0 1
30024: PPUSH
30025: CALL_OW 314
30029: NOT
30030: AND
30031: IFFALSE 29957
// PlaySoundXY ( x , y , PlantMine ) ;
30033: LD_VAR 0 2
30037: PPUSH
30038: LD_VAR 0 3
30042: PPUSH
30043: LD_STRING PlantMine
30045: PPUSH
30046: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30050: LD_VAR 0 2
30054: PPUSH
30055: LD_VAR 0 3
30059: PPUSH
30060: LD_VAR 0 1
30064: PPUSH
30065: CALL_OW 255
30069: PPUSH
30070: LD_INT 0
30072: PPUSH
30073: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30077: LD_ADDR_EXP 114
30081: PUSH
30082: LD_EXP 114
30086: PPUSH
30087: LD_VAR 0 5
30091: PUSH
30092: LD_EXP 114
30096: PUSH
30097: LD_VAR 0 5
30101: ARRAY
30102: PUSH
30103: LD_INT 1
30105: PLUS
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PPUSH
30111: LD_VAR 0 2
30115: PUSH
30116: LD_VAR 0 3
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PPUSH
30125: CALL 36311 0 3
30129: ST_TO_ADDR
// result := true ;
30130: LD_ADDR_VAR 0 4
30134: PUSH
30135: LD_INT 1
30137: ST_TO_ADDR
// end ;
30138: LD_VAR 0 4
30142: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30143: LD_INT 0
30145: PPUSH
30146: PPUSH
30147: PPUSH
// if not unit in minersList then
30148: LD_VAR 0 1
30152: PUSH
30153: LD_EXP 113
30157: IN
30158: NOT
30159: IFFALSE 30163
// exit ;
30161: GO 30555
// index := GetElementIndex ( minersList , unit ) ;
30163: LD_ADDR_VAR 0 6
30167: PUSH
30168: LD_EXP 113
30172: PPUSH
30173: LD_VAR 0 1
30177: PPUSH
30178: CALL 36096 0 2
30182: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30183: LD_ADDR_VAR 0 5
30187: PUSH
30188: DOUBLE
30189: LD_EXP 114
30193: PUSH
30194: LD_VAR 0 6
30198: ARRAY
30199: INC
30200: ST_TO_ADDR
30201: LD_INT 1
30203: PUSH
30204: FOR_DOWNTO
30205: IFFALSE 30366
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30207: LD_EXP 114
30211: PUSH
30212: LD_VAR 0 6
30216: ARRAY
30217: PUSH
30218: LD_VAR 0 5
30222: ARRAY
30223: PUSH
30224: LD_INT 1
30226: ARRAY
30227: PUSH
30228: LD_VAR 0 2
30232: EQUAL
30233: PUSH
30234: LD_EXP 114
30238: PUSH
30239: LD_VAR 0 6
30243: ARRAY
30244: PUSH
30245: LD_VAR 0 5
30249: ARRAY
30250: PUSH
30251: LD_INT 2
30253: ARRAY
30254: PUSH
30255: LD_VAR 0 3
30259: EQUAL
30260: AND
30261: IFFALSE 30364
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30263: LD_EXP 114
30267: PUSH
30268: LD_VAR 0 6
30272: ARRAY
30273: PUSH
30274: LD_VAR 0 5
30278: ARRAY
30279: PUSH
30280: LD_INT 1
30282: ARRAY
30283: PPUSH
30284: LD_EXP 114
30288: PUSH
30289: LD_VAR 0 6
30293: ARRAY
30294: PUSH
30295: LD_VAR 0 5
30299: ARRAY
30300: PUSH
30301: LD_INT 2
30303: ARRAY
30304: PPUSH
30305: LD_VAR 0 1
30309: PPUSH
30310: CALL_OW 255
30314: PPUSH
30315: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30319: LD_ADDR_EXP 114
30323: PUSH
30324: LD_EXP 114
30328: PPUSH
30329: LD_VAR 0 6
30333: PPUSH
30334: LD_EXP 114
30338: PUSH
30339: LD_VAR 0 6
30343: ARRAY
30344: PPUSH
30345: LD_VAR 0 5
30349: PPUSH
30350: CALL_OW 3
30354: PPUSH
30355: CALL_OW 1
30359: ST_TO_ADDR
// exit ;
30360: POP
30361: POP
30362: GO 30555
// end ; end ;
30364: GO 30204
30366: POP
30367: POP
// for i := minerMinesList [ index ] downto 1 do
30368: LD_ADDR_VAR 0 5
30372: PUSH
30373: DOUBLE
30374: LD_EXP 114
30378: PUSH
30379: LD_VAR 0 6
30383: ARRAY
30384: INC
30385: ST_TO_ADDR
30386: LD_INT 1
30388: PUSH
30389: FOR_DOWNTO
30390: IFFALSE 30553
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30392: LD_EXP 114
30396: PUSH
30397: LD_VAR 0 6
30401: ARRAY
30402: PUSH
30403: LD_VAR 0 5
30407: ARRAY
30408: PUSH
30409: LD_INT 1
30411: ARRAY
30412: PPUSH
30413: LD_EXP 114
30417: PUSH
30418: LD_VAR 0 6
30422: ARRAY
30423: PUSH
30424: LD_VAR 0 5
30428: ARRAY
30429: PUSH
30430: LD_INT 2
30432: ARRAY
30433: PPUSH
30434: LD_VAR 0 2
30438: PPUSH
30439: LD_VAR 0 3
30443: PPUSH
30444: CALL_OW 298
30448: PUSH
30449: LD_INT 6
30451: LESS
30452: IFFALSE 30551
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30454: LD_EXP 114
30458: PUSH
30459: LD_VAR 0 6
30463: ARRAY
30464: PUSH
30465: LD_VAR 0 5
30469: ARRAY
30470: PUSH
30471: LD_INT 1
30473: ARRAY
30474: PPUSH
30475: LD_EXP 114
30479: PUSH
30480: LD_VAR 0 6
30484: ARRAY
30485: PUSH
30486: LD_VAR 0 5
30490: ARRAY
30491: PUSH
30492: LD_INT 2
30494: ARRAY
30495: PPUSH
30496: LD_VAR 0 1
30500: PPUSH
30501: CALL_OW 255
30505: PPUSH
30506: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30510: LD_ADDR_EXP 114
30514: PUSH
30515: LD_EXP 114
30519: PPUSH
30520: LD_VAR 0 6
30524: PPUSH
30525: LD_EXP 114
30529: PUSH
30530: LD_VAR 0 6
30534: ARRAY
30535: PPUSH
30536: LD_VAR 0 5
30540: PPUSH
30541: CALL_OW 3
30545: PPUSH
30546: CALL_OW 1
30550: ST_TO_ADDR
// end ; end ;
30551: GO 30389
30553: POP
30554: POP
// end ;
30555: LD_VAR 0 4
30559: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30560: LD_INT 0
30562: PPUSH
30563: PPUSH
30564: PPUSH
30565: PPUSH
30566: PPUSH
30567: PPUSH
30568: PPUSH
30569: PPUSH
30570: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30571: LD_VAR 0 1
30575: PPUSH
30576: CALL_OW 264
30580: PUSH
30581: LD_INT 81
30583: EQUAL
30584: NOT
30585: PUSH
30586: LD_VAR 0 1
30590: PUSH
30591: LD_EXP 113
30595: IN
30596: NOT
30597: OR
30598: IFFALSE 30602
// exit ;
30600: GO 30924
// index := GetElementIndex ( minersList , unit ) ;
30602: LD_ADDR_VAR 0 6
30606: PUSH
30607: LD_EXP 113
30611: PPUSH
30612: LD_VAR 0 1
30616: PPUSH
30617: CALL 36096 0 2
30621: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30622: LD_ADDR_VAR 0 8
30626: PUSH
30627: LD_EXP 115
30631: PUSH
30632: LD_EXP 114
30636: PUSH
30637: LD_VAR 0 6
30641: ARRAY
30642: MINUS
30643: ST_TO_ADDR
// if not minesFreeAmount then
30644: LD_VAR 0 8
30648: NOT
30649: IFFALSE 30653
// exit ;
30651: GO 30924
// tmp := [ ] ;
30653: LD_ADDR_VAR 0 7
30657: PUSH
30658: EMPTY
30659: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30660: LD_ADDR_VAR 0 5
30664: PUSH
30665: DOUBLE
30666: LD_INT 1
30668: DEC
30669: ST_TO_ADDR
30670: LD_VAR 0 8
30674: PUSH
30675: FOR_TO
30676: IFFALSE 30871
// begin _d := rand ( 0 , 5 ) ;
30678: LD_ADDR_VAR 0 11
30682: PUSH
30683: LD_INT 0
30685: PPUSH
30686: LD_INT 5
30688: PPUSH
30689: CALL_OW 12
30693: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30694: LD_ADDR_VAR 0 12
30698: PUSH
30699: LD_INT 2
30701: PPUSH
30702: LD_INT 6
30704: PPUSH
30705: CALL_OW 12
30709: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30710: LD_ADDR_VAR 0 9
30714: PUSH
30715: LD_VAR 0 2
30719: PPUSH
30720: LD_VAR 0 11
30724: PPUSH
30725: LD_VAR 0 12
30729: PPUSH
30730: CALL_OW 272
30734: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30735: LD_ADDR_VAR 0 10
30739: PUSH
30740: LD_VAR 0 3
30744: PPUSH
30745: LD_VAR 0 11
30749: PPUSH
30750: LD_VAR 0 12
30754: PPUSH
30755: CALL_OW 273
30759: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30760: LD_VAR 0 9
30764: PPUSH
30765: LD_VAR 0 10
30769: PPUSH
30770: CALL_OW 488
30774: PUSH
30775: LD_VAR 0 9
30779: PUSH
30780: LD_VAR 0 10
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_VAR 0 7
30793: IN
30794: NOT
30795: AND
30796: PUSH
30797: LD_VAR 0 9
30801: PPUSH
30802: LD_VAR 0 10
30806: PPUSH
30807: CALL_OW 458
30811: NOT
30812: AND
30813: IFFALSE 30855
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30815: LD_ADDR_VAR 0 7
30819: PUSH
30820: LD_VAR 0 7
30824: PPUSH
30825: LD_VAR 0 7
30829: PUSH
30830: LD_INT 1
30832: PLUS
30833: PPUSH
30834: LD_VAR 0 9
30838: PUSH
30839: LD_VAR 0 10
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PPUSH
30848: CALL_OW 1
30852: ST_TO_ADDR
30853: GO 30869
// i := i - 1 ;
30855: LD_ADDR_VAR 0 5
30859: PUSH
30860: LD_VAR 0 5
30864: PUSH
30865: LD_INT 1
30867: MINUS
30868: ST_TO_ADDR
// end ;
30869: GO 30675
30871: POP
30872: POP
// for i in tmp do
30873: LD_ADDR_VAR 0 5
30877: PUSH
30878: LD_VAR 0 7
30882: PUSH
30883: FOR_IN
30884: IFFALSE 30922
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30886: LD_VAR 0 1
30890: PPUSH
30891: LD_VAR 0 5
30895: PUSH
30896: LD_INT 1
30898: ARRAY
30899: PPUSH
30900: LD_VAR 0 5
30904: PUSH
30905: LD_INT 2
30907: ARRAY
30908: PPUSH
30909: CALL 29868 0 3
30913: NOT
30914: IFFALSE 30920
// exit ;
30916: POP
30917: POP
30918: GO 30924
30920: GO 30883
30922: POP
30923: POP
// end ;
30924: LD_VAR 0 4
30928: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30929: LD_INT 0
30931: PPUSH
30932: PPUSH
30933: PPUSH
30934: PPUSH
30935: PPUSH
30936: PPUSH
30937: PPUSH
// if not GetClass ( unit ) = class_sniper then
30938: LD_VAR 0 1
30942: PPUSH
30943: CALL_OW 257
30947: PUSH
30948: LD_INT 5
30950: EQUAL
30951: NOT
30952: IFFALSE 30956
// exit ;
30954: GO 31344
// dist := 8 ;
30956: LD_ADDR_VAR 0 5
30960: PUSH
30961: LD_INT 8
30963: ST_TO_ADDR
// viewRange := 12 ;
30964: LD_ADDR_VAR 0 7
30968: PUSH
30969: LD_INT 12
30971: ST_TO_ADDR
// side := GetSide ( unit ) ;
30972: LD_ADDR_VAR 0 6
30976: PUSH
30977: LD_VAR 0 1
30981: PPUSH
30982: CALL_OW 255
30986: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30987: LD_INT 61
30989: PPUSH
30990: LD_VAR 0 6
30994: PPUSH
30995: CALL_OW 321
30999: PUSH
31000: LD_INT 2
31002: EQUAL
31003: IFFALSE 31013
// viewRange := 16 ;
31005: LD_ADDR_VAR 0 7
31009: PUSH
31010: LD_INT 16
31012: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31013: LD_VAR 0 1
31017: PPUSH
31018: LD_VAR 0 2
31022: PPUSH
31023: LD_VAR 0 3
31027: PPUSH
31028: CALL_OW 297
31032: PUSH
31033: LD_VAR 0 5
31037: GREATER
31038: IFFALSE 31117
// begin ComMoveXY ( unit , x , y ) ;
31040: LD_VAR 0 1
31044: PPUSH
31045: LD_VAR 0 2
31049: PPUSH
31050: LD_VAR 0 3
31054: PPUSH
31055: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31059: LD_INT 35
31061: PPUSH
31062: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31066: LD_VAR 0 1
31070: PPUSH
31071: LD_VAR 0 2
31075: PPUSH
31076: LD_VAR 0 3
31080: PPUSH
31081: CALL 67837 0 3
31085: NOT
31086: IFFALSE 31090
// exit ;
31088: GO 31344
// until GetDistUnitXY ( unit , x , y ) < dist ;
31090: LD_VAR 0 1
31094: PPUSH
31095: LD_VAR 0 2
31099: PPUSH
31100: LD_VAR 0 3
31104: PPUSH
31105: CALL_OW 297
31109: PUSH
31110: LD_VAR 0 5
31114: LESS
31115: IFFALSE 31059
// end ; ComTurnXY ( unit , x , y ) ;
31117: LD_VAR 0 1
31121: PPUSH
31122: LD_VAR 0 2
31126: PPUSH
31127: LD_VAR 0 3
31131: PPUSH
31132: CALL_OW 118
// wait ( 5 ) ;
31136: LD_INT 5
31138: PPUSH
31139: CALL_OW 67
// _d := GetDir ( unit ) ;
31143: LD_ADDR_VAR 0 10
31147: PUSH
31148: LD_VAR 0 1
31152: PPUSH
31153: CALL_OW 254
31157: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31158: LD_ADDR_VAR 0 8
31162: PUSH
31163: LD_VAR 0 1
31167: PPUSH
31168: CALL_OW 250
31172: PPUSH
31173: LD_VAR 0 10
31177: PPUSH
31178: LD_VAR 0 5
31182: PPUSH
31183: CALL_OW 272
31187: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31188: LD_ADDR_VAR 0 9
31192: PUSH
31193: LD_VAR 0 1
31197: PPUSH
31198: CALL_OW 251
31202: PPUSH
31203: LD_VAR 0 10
31207: PPUSH
31208: LD_VAR 0 5
31212: PPUSH
31213: CALL_OW 273
31217: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31218: LD_VAR 0 8
31222: PPUSH
31223: LD_VAR 0 9
31227: PPUSH
31228: CALL_OW 488
31232: NOT
31233: IFFALSE 31237
// exit ;
31235: GO 31344
// ComAnimCustom ( unit , 1 ) ;
31237: LD_VAR 0 1
31241: PPUSH
31242: LD_INT 1
31244: PPUSH
31245: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31249: LD_VAR 0 8
31253: PPUSH
31254: LD_VAR 0 9
31258: PPUSH
31259: LD_VAR 0 6
31263: PPUSH
31264: LD_VAR 0 7
31268: PPUSH
31269: CALL_OW 330
// repeat wait ( 1 ) ;
31273: LD_INT 1
31275: PPUSH
31276: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31280: LD_VAR 0 1
31284: PPUSH
31285: CALL_OW 316
31289: PUSH
31290: LD_VAR 0 1
31294: PPUSH
31295: CALL_OW 314
31299: OR
31300: PUSH
31301: LD_VAR 0 1
31305: PPUSH
31306: CALL_OW 302
31310: NOT
31311: OR
31312: PUSH
31313: LD_VAR 0 1
31317: PPUSH
31318: CALL_OW 301
31322: OR
31323: IFFALSE 31273
// RemoveSeeing ( _x , _y , side ) ;
31325: LD_VAR 0 8
31329: PPUSH
31330: LD_VAR 0 9
31334: PPUSH
31335: LD_VAR 0 6
31339: PPUSH
31340: CALL_OW 331
// end ; end_of_file
31344: LD_VAR 0 4
31348: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31349: LD_INT 0
31351: PPUSH
31352: PPUSH
// if exist_mode then
31353: LD_VAR 0 2
31357: IFFALSE 31382
// unit := CreateCharacter ( prefix & ident ) else
31359: LD_ADDR_VAR 0 5
31363: PUSH
31364: LD_VAR 0 3
31368: PUSH
31369: LD_VAR 0 1
31373: STR
31374: PPUSH
31375: CALL_OW 34
31379: ST_TO_ADDR
31380: GO 31397
// unit := NewCharacter ( ident ) ;
31382: LD_ADDR_VAR 0 5
31386: PUSH
31387: LD_VAR 0 1
31391: PPUSH
31392: CALL_OW 25
31396: ST_TO_ADDR
// result := unit ;
31397: LD_ADDR_VAR 0 4
31401: PUSH
31402: LD_VAR 0 5
31406: ST_TO_ADDR
// end ;
31407: LD_VAR 0 4
31411: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31412: LD_INT 0
31414: PPUSH
31415: PPUSH
// if not side or not nation then
31416: LD_VAR 0 1
31420: NOT
31421: PUSH
31422: LD_VAR 0 2
31426: NOT
31427: OR
31428: IFFALSE 31432
// exit ;
31430: GO 32200
// case nation of nation_american :
31432: LD_VAR 0 2
31436: PUSH
31437: LD_INT 1
31439: DOUBLE
31440: EQUAL
31441: IFTRUE 31445
31443: GO 31659
31445: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31446: LD_ADDR_VAR 0 4
31450: PUSH
31451: LD_INT 35
31453: PUSH
31454: LD_INT 45
31456: PUSH
31457: LD_INT 46
31459: PUSH
31460: LD_INT 47
31462: PUSH
31463: LD_INT 82
31465: PUSH
31466: LD_INT 83
31468: PUSH
31469: LD_INT 84
31471: PUSH
31472: LD_INT 85
31474: PUSH
31475: LD_INT 86
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: LD_INT 2
31483: PUSH
31484: LD_INT 6
31486: PUSH
31487: LD_INT 15
31489: PUSH
31490: LD_INT 16
31492: PUSH
31493: LD_INT 7
31495: PUSH
31496: LD_INT 12
31498: PUSH
31499: LD_INT 13
31501: PUSH
31502: LD_INT 10
31504: PUSH
31505: LD_INT 14
31507: PUSH
31508: LD_INT 20
31510: PUSH
31511: LD_INT 21
31513: PUSH
31514: LD_INT 22
31516: PUSH
31517: LD_INT 25
31519: PUSH
31520: LD_INT 32
31522: PUSH
31523: LD_INT 27
31525: PUSH
31526: LD_INT 36
31528: PUSH
31529: LD_INT 69
31531: PUSH
31532: LD_INT 39
31534: PUSH
31535: LD_INT 34
31537: PUSH
31538: LD_INT 40
31540: PUSH
31541: LD_INT 48
31543: PUSH
31544: LD_INT 49
31546: PUSH
31547: LD_INT 50
31549: PUSH
31550: LD_INT 51
31552: PUSH
31553: LD_INT 52
31555: PUSH
31556: LD_INT 53
31558: PUSH
31559: LD_INT 54
31561: PUSH
31562: LD_INT 55
31564: PUSH
31565: LD_INT 56
31567: PUSH
31568: LD_INT 57
31570: PUSH
31571: LD_INT 58
31573: PUSH
31574: LD_INT 59
31576: PUSH
31577: LD_INT 60
31579: PUSH
31580: LD_INT 61
31582: PUSH
31583: LD_INT 62
31585: PUSH
31586: LD_INT 80
31588: PUSH
31589: LD_INT 82
31591: PUSH
31592: LD_INT 83
31594: PUSH
31595: LD_INT 84
31597: PUSH
31598: LD_INT 85
31600: PUSH
31601: LD_INT 86
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: ST_TO_ADDR
31657: GO 32124
31659: LD_INT 2
31661: DOUBLE
31662: EQUAL
31663: IFTRUE 31667
31665: GO 31893
31667: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31668: LD_ADDR_VAR 0 4
31672: PUSH
31673: LD_INT 35
31675: PUSH
31676: LD_INT 45
31678: PUSH
31679: LD_INT 46
31681: PUSH
31682: LD_INT 47
31684: PUSH
31685: LD_INT 82
31687: PUSH
31688: LD_INT 83
31690: PUSH
31691: LD_INT 84
31693: PUSH
31694: LD_INT 85
31696: PUSH
31697: LD_INT 87
31699: PUSH
31700: LD_INT 70
31702: PUSH
31703: LD_INT 1
31705: PUSH
31706: LD_INT 11
31708: PUSH
31709: LD_INT 3
31711: PUSH
31712: LD_INT 4
31714: PUSH
31715: LD_INT 5
31717: PUSH
31718: LD_INT 6
31720: PUSH
31721: LD_INT 15
31723: PUSH
31724: LD_INT 18
31726: PUSH
31727: LD_INT 7
31729: PUSH
31730: LD_INT 17
31732: PUSH
31733: LD_INT 8
31735: PUSH
31736: LD_INT 20
31738: PUSH
31739: LD_INT 21
31741: PUSH
31742: LD_INT 22
31744: PUSH
31745: LD_INT 72
31747: PUSH
31748: LD_INT 26
31750: PUSH
31751: LD_INT 69
31753: PUSH
31754: LD_INT 39
31756: PUSH
31757: LD_INT 40
31759: PUSH
31760: LD_INT 41
31762: PUSH
31763: LD_INT 42
31765: PUSH
31766: LD_INT 43
31768: PUSH
31769: LD_INT 48
31771: PUSH
31772: LD_INT 49
31774: PUSH
31775: LD_INT 50
31777: PUSH
31778: LD_INT 51
31780: PUSH
31781: LD_INT 52
31783: PUSH
31784: LD_INT 53
31786: PUSH
31787: LD_INT 54
31789: PUSH
31790: LD_INT 55
31792: PUSH
31793: LD_INT 56
31795: PUSH
31796: LD_INT 60
31798: PUSH
31799: LD_INT 61
31801: PUSH
31802: LD_INT 62
31804: PUSH
31805: LD_INT 66
31807: PUSH
31808: LD_INT 67
31810: PUSH
31811: LD_INT 68
31813: PUSH
31814: LD_INT 81
31816: PUSH
31817: LD_INT 82
31819: PUSH
31820: LD_INT 83
31822: PUSH
31823: LD_INT 84
31825: PUSH
31826: LD_INT 85
31828: PUSH
31829: LD_INT 87
31831: PUSH
31832: LD_INT 88
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: ST_TO_ADDR
31891: GO 32124
31893: LD_INT 3
31895: DOUBLE
31896: EQUAL
31897: IFTRUE 31901
31899: GO 32123
31901: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31902: LD_ADDR_VAR 0 4
31906: PUSH
31907: LD_INT 46
31909: PUSH
31910: LD_INT 47
31912: PUSH
31913: LD_INT 1
31915: PUSH
31916: LD_INT 2
31918: PUSH
31919: LD_INT 82
31921: PUSH
31922: LD_INT 83
31924: PUSH
31925: LD_INT 84
31927: PUSH
31928: LD_INT 85
31930: PUSH
31931: LD_INT 86
31933: PUSH
31934: LD_INT 11
31936: PUSH
31937: LD_INT 9
31939: PUSH
31940: LD_INT 20
31942: PUSH
31943: LD_INT 19
31945: PUSH
31946: LD_INT 21
31948: PUSH
31949: LD_INT 24
31951: PUSH
31952: LD_INT 22
31954: PUSH
31955: LD_INT 25
31957: PUSH
31958: LD_INT 28
31960: PUSH
31961: LD_INT 29
31963: PUSH
31964: LD_INT 30
31966: PUSH
31967: LD_INT 31
31969: PUSH
31970: LD_INT 37
31972: PUSH
31973: LD_INT 38
31975: PUSH
31976: LD_INT 32
31978: PUSH
31979: LD_INT 27
31981: PUSH
31982: LD_INT 33
31984: PUSH
31985: LD_INT 69
31987: PUSH
31988: LD_INT 39
31990: PUSH
31991: LD_INT 34
31993: PUSH
31994: LD_INT 40
31996: PUSH
31997: LD_INT 71
31999: PUSH
32000: LD_INT 23
32002: PUSH
32003: LD_INT 44
32005: PUSH
32006: LD_INT 48
32008: PUSH
32009: LD_INT 49
32011: PUSH
32012: LD_INT 50
32014: PUSH
32015: LD_INT 51
32017: PUSH
32018: LD_INT 52
32020: PUSH
32021: LD_INT 53
32023: PUSH
32024: LD_INT 54
32026: PUSH
32027: LD_INT 55
32029: PUSH
32030: LD_INT 56
32032: PUSH
32033: LD_INT 57
32035: PUSH
32036: LD_INT 58
32038: PUSH
32039: LD_INT 59
32041: PUSH
32042: LD_INT 63
32044: PUSH
32045: LD_INT 64
32047: PUSH
32048: LD_INT 65
32050: PUSH
32051: LD_INT 82
32053: PUSH
32054: LD_INT 83
32056: PUSH
32057: LD_INT 84
32059: PUSH
32060: LD_INT 85
32062: PUSH
32063: LD_INT 86
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: ST_TO_ADDR
32121: GO 32124
32123: POP
// if state > - 1 and state < 3 then
32124: LD_VAR 0 3
32128: PUSH
32129: LD_INT 1
32131: NEG
32132: GREATER
32133: PUSH
32134: LD_VAR 0 3
32138: PUSH
32139: LD_INT 3
32141: LESS
32142: AND
32143: IFFALSE 32200
// for i in result do
32145: LD_ADDR_VAR 0 5
32149: PUSH
32150: LD_VAR 0 4
32154: PUSH
32155: FOR_IN
32156: IFFALSE 32198
// if GetTech ( i , side ) <> state then
32158: LD_VAR 0 5
32162: PPUSH
32163: LD_VAR 0 1
32167: PPUSH
32168: CALL_OW 321
32172: PUSH
32173: LD_VAR 0 3
32177: NONEQUAL
32178: IFFALSE 32196
// result := result diff i ;
32180: LD_ADDR_VAR 0 4
32184: PUSH
32185: LD_VAR 0 4
32189: PUSH
32190: LD_VAR 0 5
32194: DIFF
32195: ST_TO_ADDR
32196: GO 32155
32198: POP
32199: POP
// end ;
32200: LD_VAR 0 4
32204: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32205: LD_INT 0
32207: PPUSH
32208: PPUSH
32209: PPUSH
// result := true ;
32210: LD_ADDR_VAR 0 3
32214: PUSH
32215: LD_INT 1
32217: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32218: LD_ADDR_VAR 0 5
32222: PUSH
32223: LD_VAR 0 2
32227: PPUSH
32228: CALL_OW 480
32232: ST_TO_ADDR
// if not tmp then
32233: LD_VAR 0 5
32237: NOT
32238: IFFALSE 32242
// exit ;
32240: GO 32291
// for i in tmp do
32242: LD_ADDR_VAR 0 4
32246: PUSH
32247: LD_VAR 0 5
32251: PUSH
32252: FOR_IN
32253: IFFALSE 32289
// if GetTech ( i , side ) <> state_researched then
32255: LD_VAR 0 4
32259: PPUSH
32260: LD_VAR 0 1
32264: PPUSH
32265: CALL_OW 321
32269: PUSH
32270: LD_INT 2
32272: NONEQUAL
32273: IFFALSE 32287
// begin result := false ;
32275: LD_ADDR_VAR 0 3
32279: PUSH
32280: LD_INT 0
32282: ST_TO_ADDR
// exit ;
32283: POP
32284: POP
32285: GO 32291
// end ;
32287: GO 32252
32289: POP
32290: POP
// end ;
32291: LD_VAR 0 3
32295: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32296: LD_INT 0
32298: PPUSH
32299: PPUSH
32300: PPUSH
32301: PPUSH
32302: PPUSH
32303: PPUSH
32304: PPUSH
32305: PPUSH
32306: PPUSH
32307: PPUSH
32308: PPUSH
32309: PPUSH
32310: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32311: LD_VAR 0 1
32315: NOT
32316: PUSH
32317: LD_VAR 0 1
32321: PPUSH
32322: CALL_OW 257
32326: PUSH
32327: LD_INT 9
32329: NONEQUAL
32330: OR
32331: IFFALSE 32335
// exit ;
32333: GO 32908
// side := GetSide ( unit ) ;
32335: LD_ADDR_VAR 0 9
32339: PUSH
32340: LD_VAR 0 1
32344: PPUSH
32345: CALL_OW 255
32349: ST_TO_ADDR
// tech_space := tech_spacanom ;
32350: LD_ADDR_VAR 0 12
32354: PUSH
32355: LD_INT 29
32357: ST_TO_ADDR
// tech_time := tech_taurad ;
32358: LD_ADDR_VAR 0 13
32362: PUSH
32363: LD_INT 28
32365: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32366: LD_ADDR_VAR 0 11
32370: PUSH
32371: LD_VAR 0 1
32375: PPUSH
32376: CALL_OW 310
32380: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32381: LD_VAR 0 11
32385: PPUSH
32386: CALL_OW 247
32390: PUSH
32391: LD_INT 2
32393: EQUAL
32394: IFFALSE 32398
// exit ;
32396: GO 32908
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32398: LD_ADDR_VAR 0 8
32402: PUSH
32403: LD_INT 81
32405: PUSH
32406: LD_VAR 0 9
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 3
32417: PUSH
32418: LD_INT 21
32420: PUSH
32421: LD_INT 3
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PPUSH
32436: CALL_OW 69
32440: ST_TO_ADDR
// if not tmp then
32441: LD_VAR 0 8
32445: NOT
32446: IFFALSE 32450
// exit ;
32448: GO 32908
// if in_unit then
32450: LD_VAR 0 11
32454: IFFALSE 32478
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32456: LD_ADDR_VAR 0 10
32460: PUSH
32461: LD_VAR 0 8
32465: PPUSH
32466: LD_VAR 0 11
32470: PPUSH
32471: CALL_OW 74
32475: ST_TO_ADDR
32476: GO 32498
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32478: LD_ADDR_VAR 0 10
32482: PUSH
32483: LD_VAR 0 8
32487: PPUSH
32488: LD_VAR 0 1
32492: PPUSH
32493: CALL_OW 74
32497: ST_TO_ADDR
// if not enemy then
32498: LD_VAR 0 10
32502: NOT
32503: IFFALSE 32507
// exit ;
32505: GO 32908
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32507: LD_VAR 0 11
32511: PUSH
32512: LD_VAR 0 11
32516: PPUSH
32517: LD_VAR 0 10
32521: PPUSH
32522: CALL_OW 296
32526: PUSH
32527: LD_INT 13
32529: GREATER
32530: AND
32531: PUSH
32532: LD_VAR 0 1
32536: PPUSH
32537: LD_VAR 0 10
32541: PPUSH
32542: CALL_OW 296
32546: PUSH
32547: LD_INT 12
32549: GREATER
32550: OR
32551: IFFALSE 32555
// exit ;
32553: GO 32908
// missile := [ 1 ] ;
32555: LD_ADDR_VAR 0 14
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: EMPTY
32564: LIST
32565: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32566: LD_VAR 0 9
32570: PPUSH
32571: LD_VAR 0 12
32575: PPUSH
32576: CALL_OW 325
32580: IFFALSE 32609
// missile := Replace ( missile , missile + 1 , 2 ) ;
32582: LD_ADDR_VAR 0 14
32586: PUSH
32587: LD_VAR 0 14
32591: PPUSH
32592: LD_VAR 0 14
32596: PUSH
32597: LD_INT 1
32599: PLUS
32600: PPUSH
32601: LD_INT 2
32603: PPUSH
32604: CALL_OW 1
32608: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32609: LD_VAR 0 9
32613: PPUSH
32614: LD_VAR 0 13
32618: PPUSH
32619: CALL_OW 325
32623: PUSH
32624: LD_VAR 0 10
32628: PPUSH
32629: CALL_OW 255
32633: PPUSH
32634: LD_VAR 0 13
32638: PPUSH
32639: CALL_OW 325
32643: NOT
32644: AND
32645: IFFALSE 32674
// missile := Replace ( missile , missile + 1 , 3 ) ;
32647: LD_ADDR_VAR 0 14
32651: PUSH
32652: LD_VAR 0 14
32656: PPUSH
32657: LD_VAR 0 14
32661: PUSH
32662: LD_INT 1
32664: PLUS
32665: PPUSH
32666: LD_INT 3
32668: PPUSH
32669: CALL_OW 1
32673: ST_TO_ADDR
// if missile < 2 then
32674: LD_VAR 0 14
32678: PUSH
32679: LD_INT 2
32681: LESS
32682: IFFALSE 32686
// exit ;
32684: GO 32908
// x := GetX ( enemy ) ;
32686: LD_ADDR_VAR 0 4
32690: PUSH
32691: LD_VAR 0 10
32695: PPUSH
32696: CALL_OW 250
32700: ST_TO_ADDR
// y := GetY ( enemy ) ;
32701: LD_ADDR_VAR 0 5
32705: PUSH
32706: LD_VAR 0 10
32710: PPUSH
32711: CALL_OW 251
32715: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32716: LD_ADDR_VAR 0 6
32720: PUSH
32721: LD_VAR 0 4
32725: PUSH
32726: LD_INT 1
32728: NEG
32729: PPUSH
32730: LD_INT 1
32732: PPUSH
32733: CALL_OW 12
32737: PLUS
32738: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32739: LD_ADDR_VAR 0 7
32743: PUSH
32744: LD_VAR 0 5
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PPUSH
32753: LD_INT 1
32755: PPUSH
32756: CALL_OW 12
32760: PLUS
32761: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32762: LD_VAR 0 6
32766: PPUSH
32767: LD_VAR 0 7
32771: PPUSH
32772: CALL_OW 488
32776: NOT
32777: IFFALSE 32799
// begin _x := x ;
32779: LD_ADDR_VAR 0 6
32783: PUSH
32784: LD_VAR 0 4
32788: ST_TO_ADDR
// _y := y ;
32789: LD_ADDR_VAR 0 7
32793: PUSH
32794: LD_VAR 0 5
32798: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32799: LD_ADDR_VAR 0 3
32803: PUSH
32804: LD_INT 1
32806: PPUSH
32807: LD_VAR 0 14
32811: PPUSH
32812: CALL_OW 12
32816: ST_TO_ADDR
// case i of 1 :
32817: LD_VAR 0 3
32821: PUSH
32822: LD_INT 1
32824: DOUBLE
32825: EQUAL
32826: IFTRUE 32830
32828: GO 32847
32830: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32831: LD_VAR 0 1
32835: PPUSH
32836: LD_VAR 0 10
32840: PPUSH
32841: CALL_OW 115
32845: GO 32908
32847: LD_INT 2
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32855
32853: GO 32877
32855: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32856: LD_VAR 0 1
32860: PPUSH
32861: LD_VAR 0 6
32865: PPUSH
32866: LD_VAR 0 7
32870: PPUSH
32871: CALL_OW 153
32875: GO 32908
32877: LD_INT 3
32879: DOUBLE
32880: EQUAL
32881: IFTRUE 32885
32883: GO 32907
32885: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32886: LD_VAR 0 1
32890: PPUSH
32891: LD_VAR 0 6
32895: PPUSH
32896: LD_VAR 0 7
32900: PPUSH
32901: CALL_OW 154
32905: GO 32908
32907: POP
// end ;
32908: LD_VAR 0 2
32912: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32913: LD_INT 0
32915: PPUSH
32916: PPUSH
32917: PPUSH
32918: PPUSH
32919: PPUSH
32920: PPUSH
// if not unit or not building then
32921: LD_VAR 0 1
32925: NOT
32926: PUSH
32927: LD_VAR 0 2
32931: NOT
32932: OR
32933: IFFALSE 32937
// exit ;
32935: GO 33095
// x := GetX ( building ) ;
32937: LD_ADDR_VAR 0 5
32941: PUSH
32942: LD_VAR 0 2
32946: PPUSH
32947: CALL_OW 250
32951: ST_TO_ADDR
// y := GetY ( building ) ;
32952: LD_ADDR_VAR 0 6
32956: PUSH
32957: LD_VAR 0 2
32961: PPUSH
32962: CALL_OW 251
32966: ST_TO_ADDR
// for i = 0 to 5 do
32967: LD_ADDR_VAR 0 4
32971: PUSH
32972: DOUBLE
32973: LD_INT 0
32975: DEC
32976: ST_TO_ADDR
32977: LD_INT 5
32979: PUSH
32980: FOR_TO
32981: IFFALSE 33093
// begin _x := ShiftX ( x , i , 3 ) ;
32983: LD_ADDR_VAR 0 7
32987: PUSH
32988: LD_VAR 0 5
32992: PPUSH
32993: LD_VAR 0 4
32997: PPUSH
32998: LD_INT 3
33000: PPUSH
33001: CALL_OW 272
33005: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33006: LD_ADDR_VAR 0 8
33010: PUSH
33011: LD_VAR 0 6
33015: PPUSH
33016: LD_VAR 0 4
33020: PPUSH
33021: LD_INT 3
33023: PPUSH
33024: CALL_OW 273
33028: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33029: LD_VAR 0 7
33033: PPUSH
33034: LD_VAR 0 8
33038: PPUSH
33039: CALL_OW 488
33043: NOT
33044: IFFALSE 33048
// continue ;
33046: GO 32980
// if HexInfo ( _x , _y ) = 0 then
33048: LD_VAR 0 7
33052: PPUSH
33053: LD_VAR 0 8
33057: PPUSH
33058: CALL_OW 428
33062: PUSH
33063: LD_INT 0
33065: EQUAL
33066: IFFALSE 33091
// begin ComMoveXY ( unit , _x , _y ) ;
33068: LD_VAR 0 1
33072: PPUSH
33073: LD_VAR 0 7
33077: PPUSH
33078: LD_VAR 0 8
33082: PPUSH
33083: CALL_OW 111
// exit ;
33087: POP
33088: POP
33089: GO 33095
// end ; end ;
33091: GO 32980
33093: POP
33094: POP
// end ;
33095: LD_VAR 0 3
33099: RET
// export function ScanBase ( side , base_area ) ; begin
33100: LD_INT 0
33102: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33103: LD_ADDR_VAR 0 3
33107: PUSH
33108: LD_VAR 0 2
33112: PPUSH
33113: LD_INT 81
33115: PUSH
33116: LD_VAR 0 1
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PPUSH
33125: CALL_OW 70
33129: ST_TO_ADDR
// end ;
33130: LD_VAR 0 3
33134: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33135: LD_INT 0
33137: PPUSH
33138: PPUSH
33139: PPUSH
33140: PPUSH
// result := false ;
33141: LD_ADDR_VAR 0 2
33145: PUSH
33146: LD_INT 0
33148: ST_TO_ADDR
// side := GetSide ( unit ) ;
33149: LD_ADDR_VAR 0 3
33153: PUSH
33154: LD_VAR 0 1
33158: PPUSH
33159: CALL_OW 255
33163: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33164: LD_ADDR_VAR 0 4
33168: PUSH
33169: LD_VAR 0 1
33173: PPUSH
33174: CALL_OW 248
33178: ST_TO_ADDR
// case nat of 1 :
33179: LD_VAR 0 4
33183: PUSH
33184: LD_INT 1
33186: DOUBLE
33187: EQUAL
33188: IFTRUE 33192
33190: GO 33203
33192: POP
// tech := tech_lassight ; 2 :
33193: LD_ADDR_VAR 0 5
33197: PUSH
33198: LD_INT 12
33200: ST_TO_ADDR
33201: GO 33242
33203: LD_INT 2
33205: DOUBLE
33206: EQUAL
33207: IFTRUE 33211
33209: GO 33222
33211: POP
// tech := tech_mortar ; 3 :
33212: LD_ADDR_VAR 0 5
33216: PUSH
33217: LD_INT 41
33219: ST_TO_ADDR
33220: GO 33242
33222: LD_INT 3
33224: DOUBLE
33225: EQUAL
33226: IFTRUE 33230
33228: GO 33241
33230: POP
// tech := tech_bazooka ; end ;
33231: LD_ADDR_VAR 0 5
33235: PUSH
33236: LD_INT 44
33238: ST_TO_ADDR
33239: GO 33242
33241: POP
// if Researched ( side , tech ) then
33242: LD_VAR 0 3
33246: PPUSH
33247: LD_VAR 0 5
33251: PPUSH
33252: CALL_OW 325
33256: IFFALSE 33283
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33258: LD_ADDR_VAR 0 2
33262: PUSH
33263: LD_INT 5
33265: PUSH
33266: LD_INT 8
33268: PUSH
33269: LD_INT 9
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: LIST
33276: PUSH
33277: LD_VAR 0 4
33281: ARRAY
33282: ST_TO_ADDR
// end ;
33283: LD_VAR 0 2
33287: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33288: LD_INT 0
33290: PPUSH
33291: PPUSH
33292: PPUSH
// if not mines then
33293: LD_VAR 0 2
33297: NOT
33298: IFFALSE 33302
// exit ;
33300: GO 33446
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33302: LD_ADDR_VAR 0 5
33306: PUSH
33307: LD_INT 81
33309: PUSH
33310: LD_VAR 0 1
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 3
33321: PUSH
33322: LD_INT 21
33324: PUSH
33325: LD_INT 3
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PPUSH
33340: CALL_OW 69
33344: ST_TO_ADDR
// for i in mines do
33345: LD_ADDR_VAR 0 4
33349: PUSH
33350: LD_VAR 0 2
33354: PUSH
33355: FOR_IN
33356: IFFALSE 33444
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33358: LD_VAR 0 4
33362: PUSH
33363: LD_INT 1
33365: ARRAY
33366: PPUSH
33367: LD_VAR 0 4
33371: PUSH
33372: LD_INT 2
33374: ARRAY
33375: PPUSH
33376: CALL_OW 458
33380: NOT
33381: IFFALSE 33385
// continue ;
33383: GO 33355
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33385: LD_VAR 0 4
33389: PUSH
33390: LD_INT 1
33392: ARRAY
33393: PPUSH
33394: LD_VAR 0 4
33398: PUSH
33399: LD_INT 2
33401: ARRAY
33402: PPUSH
33403: CALL_OW 428
33407: PUSH
33408: LD_VAR 0 5
33412: IN
33413: IFFALSE 33442
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33415: LD_VAR 0 4
33419: PUSH
33420: LD_INT 1
33422: ARRAY
33423: PPUSH
33424: LD_VAR 0 4
33428: PUSH
33429: LD_INT 2
33431: ARRAY
33432: PPUSH
33433: LD_VAR 0 1
33437: PPUSH
33438: CALL_OW 456
// end ;
33442: GO 33355
33444: POP
33445: POP
// end ;
33446: LD_VAR 0 3
33450: RET
// export function Count ( array ) ; begin
33451: LD_INT 0
33453: PPUSH
// result := array + 0 ;
33454: LD_ADDR_VAR 0 2
33458: PUSH
33459: LD_VAR 0 1
33463: PUSH
33464: LD_INT 0
33466: PLUS
33467: ST_TO_ADDR
// end ;
33468: LD_VAR 0 2
33472: RET
// export function IsEmpty ( building ) ; begin
33473: LD_INT 0
33475: PPUSH
// if not building then
33476: LD_VAR 0 1
33480: NOT
33481: IFFALSE 33485
// exit ;
33483: GO 33528
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33485: LD_ADDR_VAR 0 2
33489: PUSH
33490: LD_VAR 0 1
33494: PUSH
33495: LD_INT 22
33497: PUSH
33498: LD_VAR 0 1
33502: PPUSH
33503: CALL_OW 255
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 58
33514: PUSH
33515: EMPTY
33516: LIST
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PPUSH
33522: CALL_OW 69
33526: IN
33527: ST_TO_ADDR
// end ;
33528: LD_VAR 0 2
33532: RET
// export function IsNotFull ( building ) ; var places ; begin
33533: LD_INT 0
33535: PPUSH
33536: PPUSH
// if not building then
33537: LD_VAR 0 1
33541: NOT
33542: IFFALSE 33546
// exit ;
33544: GO 33574
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33546: LD_ADDR_VAR 0 2
33550: PUSH
33551: LD_VAR 0 1
33555: PPUSH
33556: LD_INT 3
33558: PUSH
33559: LD_INT 62
33561: PUSH
33562: EMPTY
33563: LIST
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PPUSH
33569: CALL_OW 72
33573: ST_TO_ADDR
// end ;
33574: LD_VAR 0 2
33578: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33579: LD_INT 0
33581: PPUSH
33582: PPUSH
33583: PPUSH
33584: PPUSH
// tmp := [ ] ;
33585: LD_ADDR_VAR 0 3
33589: PUSH
33590: EMPTY
33591: ST_TO_ADDR
// list := [ ] ;
33592: LD_ADDR_VAR 0 5
33596: PUSH
33597: EMPTY
33598: ST_TO_ADDR
// for i = 16 to 25 do
33599: LD_ADDR_VAR 0 4
33603: PUSH
33604: DOUBLE
33605: LD_INT 16
33607: DEC
33608: ST_TO_ADDR
33609: LD_INT 25
33611: PUSH
33612: FOR_TO
33613: IFFALSE 33686
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33615: LD_ADDR_VAR 0 3
33619: PUSH
33620: LD_VAR 0 3
33624: PUSH
33625: LD_INT 22
33627: PUSH
33628: LD_VAR 0 1
33632: PPUSH
33633: CALL_OW 255
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 91
33644: PUSH
33645: LD_VAR 0 1
33649: PUSH
33650: LD_INT 6
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 30
33660: PUSH
33661: LD_VAR 0 4
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: LIST
33674: PUSH
33675: EMPTY
33676: LIST
33677: PPUSH
33678: CALL_OW 69
33682: ADD
33683: ST_TO_ADDR
33684: GO 33612
33686: POP
33687: POP
// for i = 1 to tmp do
33688: LD_ADDR_VAR 0 4
33692: PUSH
33693: DOUBLE
33694: LD_INT 1
33696: DEC
33697: ST_TO_ADDR
33698: LD_VAR 0 3
33702: PUSH
33703: FOR_TO
33704: IFFALSE 33792
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33706: LD_ADDR_VAR 0 5
33710: PUSH
33711: LD_VAR 0 5
33715: PUSH
33716: LD_VAR 0 3
33720: PUSH
33721: LD_VAR 0 4
33725: ARRAY
33726: PPUSH
33727: CALL_OW 266
33731: PUSH
33732: LD_VAR 0 3
33736: PUSH
33737: LD_VAR 0 4
33741: ARRAY
33742: PPUSH
33743: CALL_OW 250
33747: PUSH
33748: LD_VAR 0 3
33752: PUSH
33753: LD_VAR 0 4
33757: ARRAY
33758: PPUSH
33759: CALL_OW 251
33763: PUSH
33764: LD_VAR 0 3
33768: PUSH
33769: LD_VAR 0 4
33773: ARRAY
33774: PPUSH
33775: CALL_OW 254
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: PUSH
33786: EMPTY
33787: LIST
33788: ADD
33789: ST_TO_ADDR
33790: GO 33703
33792: POP
33793: POP
// result := list ;
33794: LD_ADDR_VAR 0 2
33798: PUSH
33799: LD_VAR 0 5
33803: ST_TO_ADDR
// end ;
33804: LD_VAR 0 2
33808: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33809: LD_INT 0
33811: PPUSH
33812: PPUSH
33813: PPUSH
33814: PPUSH
33815: PPUSH
33816: PPUSH
33817: PPUSH
// if not factory then
33818: LD_VAR 0 1
33822: NOT
33823: IFFALSE 33827
// exit ;
33825: GO 34420
// if control = control_apeman then
33827: LD_VAR 0 4
33831: PUSH
33832: LD_INT 5
33834: EQUAL
33835: IFFALSE 33944
// begin tmp := UnitsInside ( factory ) ;
33837: LD_ADDR_VAR 0 8
33841: PUSH
33842: LD_VAR 0 1
33846: PPUSH
33847: CALL_OW 313
33851: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33852: LD_VAR 0 8
33856: PPUSH
33857: LD_INT 25
33859: PUSH
33860: LD_INT 12
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PPUSH
33867: CALL_OW 72
33871: NOT
33872: IFFALSE 33882
// control := control_manual ;
33874: LD_ADDR_VAR 0 4
33878: PUSH
33879: LD_INT 1
33881: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33882: LD_ADDR_VAR 0 8
33886: PUSH
33887: LD_VAR 0 1
33891: PPUSH
33892: CALL 33579 0 1
33896: ST_TO_ADDR
// if tmp then
33897: LD_VAR 0 8
33901: IFFALSE 33944
// begin for i in tmp do
33903: LD_ADDR_VAR 0 7
33907: PUSH
33908: LD_VAR 0 8
33912: PUSH
33913: FOR_IN
33914: IFFALSE 33942
// if i [ 1 ] = b_ext_radio then
33916: LD_VAR 0 7
33920: PUSH
33921: LD_INT 1
33923: ARRAY
33924: PUSH
33925: LD_INT 22
33927: EQUAL
33928: IFFALSE 33940
// begin control := control_remote ;
33930: LD_ADDR_VAR 0 4
33934: PUSH
33935: LD_INT 2
33937: ST_TO_ADDR
// break ;
33938: GO 33942
// end ;
33940: GO 33913
33942: POP
33943: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33944: LD_VAR 0 1
33948: PPUSH
33949: LD_VAR 0 2
33953: PPUSH
33954: LD_VAR 0 3
33958: PPUSH
33959: LD_VAR 0 4
33963: PPUSH
33964: LD_VAR 0 5
33968: PPUSH
33969: CALL_OW 448
33973: IFFALSE 34008
// begin result := [ chassis , engine , control , weapon ] ;
33975: LD_ADDR_VAR 0 6
33979: PUSH
33980: LD_VAR 0 2
33984: PUSH
33985: LD_VAR 0 3
33989: PUSH
33990: LD_VAR 0 4
33994: PUSH
33995: LD_VAR 0 5
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: ST_TO_ADDR
// exit ;
34006: GO 34420
// end ; _chassis := AvailableChassisList ( factory ) ;
34008: LD_ADDR_VAR 0 9
34012: PUSH
34013: LD_VAR 0 1
34017: PPUSH
34018: CALL_OW 475
34022: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34023: LD_ADDR_VAR 0 11
34027: PUSH
34028: LD_VAR 0 1
34032: PPUSH
34033: CALL_OW 476
34037: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34038: LD_ADDR_VAR 0 12
34042: PUSH
34043: LD_VAR 0 1
34047: PPUSH
34048: CALL_OW 477
34052: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34053: LD_ADDR_VAR 0 10
34057: PUSH
34058: LD_VAR 0 1
34062: PPUSH
34063: CALL_OW 478
34067: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34068: LD_VAR 0 9
34072: NOT
34073: PUSH
34074: LD_VAR 0 11
34078: NOT
34079: OR
34080: PUSH
34081: LD_VAR 0 12
34085: NOT
34086: OR
34087: PUSH
34088: LD_VAR 0 10
34092: NOT
34093: OR
34094: IFFALSE 34129
// begin result := [ chassis , engine , control , weapon ] ;
34096: LD_ADDR_VAR 0 6
34100: PUSH
34101: LD_VAR 0 2
34105: PUSH
34106: LD_VAR 0 3
34110: PUSH
34111: LD_VAR 0 4
34115: PUSH
34116: LD_VAR 0 5
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: ST_TO_ADDR
// exit ;
34127: GO 34420
// end ; if not chassis in _chassis then
34129: LD_VAR 0 2
34133: PUSH
34134: LD_VAR 0 9
34138: IN
34139: NOT
34140: IFFALSE 34166
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34142: LD_ADDR_VAR 0 2
34146: PUSH
34147: LD_VAR 0 9
34151: PUSH
34152: LD_INT 1
34154: PPUSH
34155: LD_VAR 0 9
34159: PPUSH
34160: CALL_OW 12
34164: ARRAY
34165: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34166: LD_VAR 0 2
34170: PPUSH
34171: LD_VAR 0 3
34175: PPUSH
34176: CALL 34425 0 2
34180: NOT
34181: IFFALSE 34240
// repeat engine := _engine [ 1 ] ;
34183: LD_ADDR_VAR 0 3
34187: PUSH
34188: LD_VAR 0 11
34192: PUSH
34193: LD_INT 1
34195: ARRAY
34196: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34197: LD_ADDR_VAR 0 11
34201: PUSH
34202: LD_VAR 0 11
34206: PPUSH
34207: LD_INT 1
34209: PPUSH
34210: CALL_OW 3
34214: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34215: LD_VAR 0 2
34219: PPUSH
34220: LD_VAR 0 3
34224: PPUSH
34225: CALL 34425 0 2
34229: PUSH
34230: LD_VAR 0 11
34234: PUSH
34235: EMPTY
34236: EQUAL
34237: OR
34238: IFFALSE 34183
// if not control in _control then
34240: LD_VAR 0 4
34244: PUSH
34245: LD_VAR 0 12
34249: IN
34250: NOT
34251: IFFALSE 34277
// control := _control [ rand ( 1 , _control ) ] ;
34253: LD_ADDR_VAR 0 4
34257: PUSH
34258: LD_VAR 0 12
34262: PUSH
34263: LD_INT 1
34265: PPUSH
34266: LD_VAR 0 12
34270: PPUSH
34271: CALL_OW 12
34275: ARRAY
34276: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34277: LD_VAR 0 2
34281: PPUSH
34282: LD_VAR 0 5
34286: PPUSH
34287: CALL 34645 0 2
34291: NOT
34292: IFFALSE 34351
// repeat weapon := _weapon [ 1 ] ;
34294: LD_ADDR_VAR 0 5
34298: PUSH
34299: LD_VAR 0 10
34303: PUSH
34304: LD_INT 1
34306: ARRAY
34307: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34308: LD_ADDR_VAR 0 10
34312: PUSH
34313: LD_VAR 0 10
34317: PPUSH
34318: LD_INT 1
34320: PPUSH
34321: CALL_OW 3
34325: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34326: LD_VAR 0 2
34330: PPUSH
34331: LD_VAR 0 5
34335: PPUSH
34336: CALL 34645 0 2
34340: PUSH
34341: LD_VAR 0 10
34345: PUSH
34346: EMPTY
34347: EQUAL
34348: OR
34349: IFFALSE 34294
// result := [ ] ;
34351: LD_ADDR_VAR 0 6
34355: PUSH
34356: EMPTY
34357: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34358: LD_VAR 0 1
34362: PPUSH
34363: LD_VAR 0 2
34367: PPUSH
34368: LD_VAR 0 3
34372: PPUSH
34373: LD_VAR 0 4
34377: PPUSH
34378: LD_VAR 0 5
34382: PPUSH
34383: CALL_OW 448
34387: IFFALSE 34420
// result := [ chassis , engine , control , weapon ] ;
34389: LD_ADDR_VAR 0 6
34393: PUSH
34394: LD_VAR 0 2
34398: PUSH
34399: LD_VAR 0 3
34403: PUSH
34404: LD_VAR 0 4
34408: PUSH
34409: LD_VAR 0 5
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: ST_TO_ADDR
// end ;
34420: LD_VAR 0 6
34424: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34425: LD_INT 0
34427: PPUSH
// if not chassis or not engine then
34428: LD_VAR 0 1
34432: NOT
34433: PUSH
34434: LD_VAR 0 2
34438: NOT
34439: OR
34440: IFFALSE 34444
// exit ;
34442: GO 34640
// case engine of engine_solar :
34444: LD_VAR 0 2
34448: PUSH
34449: LD_INT 2
34451: DOUBLE
34452: EQUAL
34453: IFTRUE 34457
34455: GO 34495
34457: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34458: LD_ADDR_VAR 0 3
34462: PUSH
34463: LD_INT 11
34465: PUSH
34466: LD_INT 12
34468: PUSH
34469: LD_INT 13
34471: PUSH
34472: LD_INT 14
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: LD_INT 3
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: ST_TO_ADDR
34493: GO 34624
34495: LD_INT 1
34497: DOUBLE
34498: EQUAL
34499: IFTRUE 34503
34501: GO 34565
34503: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34504: LD_ADDR_VAR 0 3
34508: PUSH
34509: LD_INT 11
34511: PUSH
34512: LD_INT 12
34514: PUSH
34515: LD_INT 13
34517: PUSH
34518: LD_INT 14
34520: PUSH
34521: LD_INT 1
34523: PUSH
34524: LD_INT 2
34526: PUSH
34527: LD_INT 3
34529: PUSH
34530: LD_INT 4
34532: PUSH
34533: LD_INT 5
34535: PUSH
34536: LD_INT 21
34538: PUSH
34539: LD_INT 23
34541: PUSH
34542: LD_INT 22
34544: PUSH
34545: LD_INT 24
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: ST_TO_ADDR
34563: GO 34624
34565: LD_INT 3
34567: DOUBLE
34568: EQUAL
34569: IFTRUE 34573
34571: GO 34623
34573: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34574: LD_ADDR_VAR 0 3
34578: PUSH
34579: LD_INT 13
34581: PUSH
34582: LD_INT 14
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: LD_INT 3
34590: PUSH
34591: LD_INT 4
34593: PUSH
34594: LD_INT 5
34596: PUSH
34597: LD_INT 21
34599: PUSH
34600: LD_INT 22
34602: PUSH
34603: LD_INT 23
34605: PUSH
34606: LD_INT 24
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: ST_TO_ADDR
34621: GO 34624
34623: POP
// result := ( chassis in result ) ;
34624: LD_ADDR_VAR 0 3
34628: PUSH
34629: LD_VAR 0 1
34633: PUSH
34634: LD_VAR 0 3
34638: IN
34639: ST_TO_ADDR
// end ;
34640: LD_VAR 0 3
34644: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34645: LD_INT 0
34647: PPUSH
// if not chassis or not weapon then
34648: LD_VAR 0 1
34652: NOT
34653: PUSH
34654: LD_VAR 0 2
34658: NOT
34659: OR
34660: IFFALSE 34664
// exit ;
34662: GO 35724
// case weapon of us_machine_gun :
34664: LD_VAR 0 2
34668: PUSH
34669: LD_INT 2
34671: DOUBLE
34672: EQUAL
34673: IFTRUE 34677
34675: GO 34707
34677: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34678: LD_ADDR_VAR 0 3
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: LD_INT 3
34691: PUSH
34692: LD_INT 4
34694: PUSH
34695: LD_INT 5
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: ST_TO_ADDR
34705: GO 35708
34707: LD_INT 3
34709: DOUBLE
34710: EQUAL
34711: IFTRUE 34715
34713: GO 34745
34715: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34716: LD_ADDR_VAR 0 3
34720: PUSH
34721: LD_INT 1
34723: PUSH
34724: LD_INT 2
34726: PUSH
34727: LD_INT 3
34729: PUSH
34730: LD_INT 4
34732: PUSH
34733: LD_INT 5
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: ST_TO_ADDR
34743: GO 35708
34745: LD_INT 11
34747: DOUBLE
34748: EQUAL
34749: IFTRUE 34753
34751: GO 34783
34753: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34754: LD_ADDR_VAR 0 3
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: LD_INT 2
34764: PUSH
34765: LD_INT 3
34767: PUSH
34768: LD_INT 4
34770: PUSH
34771: LD_INT 5
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: ST_TO_ADDR
34781: GO 35708
34783: LD_INT 4
34785: DOUBLE
34786: EQUAL
34787: IFTRUE 34791
34789: GO 34817
34791: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34792: LD_ADDR_VAR 0 3
34796: PUSH
34797: LD_INT 2
34799: PUSH
34800: LD_INT 3
34802: PUSH
34803: LD_INT 4
34805: PUSH
34806: LD_INT 5
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: ST_TO_ADDR
34815: GO 35708
34817: LD_INT 5
34819: DOUBLE
34820: EQUAL
34821: IFTRUE 34825
34823: GO 34851
34825: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34826: LD_ADDR_VAR 0 3
34830: PUSH
34831: LD_INT 2
34833: PUSH
34834: LD_INT 3
34836: PUSH
34837: LD_INT 4
34839: PUSH
34840: LD_INT 5
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: ST_TO_ADDR
34849: GO 35708
34851: LD_INT 9
34853: DOUBLE
34854: EQUAL
34855: IFTRUE 34859
34857: GO 34885
34859: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34860: LD_ADDR_VAR 0 3
34864: PUSH
34865: LD_INT 2
34867: PUSH
34868: LD_INT 3
34870: PUSH
34871: LD_INT 4
34873: PUSH
34874: LD_INT 5
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: ST_TO_ADDR
34883: GO 35708
34885: LD_INT 7
34887: DOUBLE
34888: EQUAL
34889: IFTRUE 34893
34891: GO 34919
34893: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34894: LD_ADDR_VAR 0 3
34898: PUSH
34899: LD_INT 2
34901: PUSH
34902: LD_INT 3
34904: PUSH
34905: LD_INT 4
34907: PUSH
34908: LD_INT 5
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: ST_TO_ADDR
34917: GO 35708
34919: LD_INT 12
34921: DOUBLE
34922: EQUAL
34923: IFTRUE 34927
34925: GO 34953
34927: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34928: LD_ADDR_VAR 0 3
34932: PUSH
34933: LD_INT 2
34935: PUSH
34936: LD_INT 3
34938: PUSH
34939: LD_INT 4
34941: PUSH
34942: LD_INT 5
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: ST_TO_ADDR
34951: GO 35708
34953: LD_INT 13
34955: DOUBLE
34956: EQUAL
34957: IFTRUE 34961
34959: GO 34987
34961: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34962: LD_ADDR_VAR 0 3
34966: PUSH
34967: LD_INT 2
34969: PUSH
34970: LD_INT 3
34972: PUSH
34973: LD_INT 4
34975: PUSH
34976: LD_INT 5
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: ST_TO_ADDR
34985: GO 35708
34987: LD_INT 14
34989: DOUBLE
34990: EQUAL
34991: IFTRUE 34995
34993: GO 35013
34995: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34996: LD_ADDR_VAR 0 3
35000: PUSH
35001: LD_INT 4
35003: PUSH
35004: LD_INT 5
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: ST_TO_ADDR
35011: GO 35708
35013: LD_INT 6
35015: DOUBLE
35016: EQUAL
35017: IFTRUE 35021
35019: GO 35039
35021: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35022: LD_ADDR_VAR 0 3
35026: PUSH
35027: LD_INT 4
35029: PUSH
35030: LD_INT 5
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: ST_TO_ADDR
35037: GO 35708
35039: LD_INT 10
35041: DOUBLE
35042: EQUAL
35043: IFTRUE 35047
35045: GO 35065
35047: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35048: LD_ADDR_VAR 0 3
35052: PUSH
35053: LD_INT 4
35055: PUSH
35056: LD_INT 5
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: ST_TO_ADDR
35063: GO 35708
35065: LD_INT 22
35067: DOUBLE
35068: EQUAL
35069: IFTRUE 35073
35071: GO 35099
35073: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35074: LD_ADDR_VAR 0 3
35078: PUSH
35079: LD_INT 11
35081: PUSH
35082: LD_INT 12
35084: PUSH
35085: LD_INT 13
35087: PUSH
35088: LD_INT 14
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: ST_TO_ADDR
35097: GO 35708
35099: LD_INT 23
35101: DOUBLE
35102: EQUAL
35103: IFTRUE 35107
35105: GO 35133
35107: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35108: LD_ADDR_VAR 0 3
35112: PUSH
35113: LD_INT 11
35115: PUSH
35116: LD_INT 12
35118: PUSH
35119: LD_INT 13
35121: PUSH
35122: LD_INT 14
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: ST_TO_ADDR
35131: GO 35708
35133: LD_INT 24
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35141
35139: GO 35167
35141: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35142: LD_ADDR_VAR 0 3
35146: PUSH
35147: LD_INT 11
35149: PUSH
35150: LD_INT 12
35152: PUSH
35153: LD_INT 13
35155: PUSH
35156: LD_INT 14
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: ST_TO_ADDR
35165: GO 35708
35167: LD_INT 30
35169: DOUBLE
35170: EQUAL
35171: IFTRUE 35175
35173: GO 35201
35175: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35176: LD_ADDR_VAR 0 3
35180: PUSH
35181: LD_INT 11
35183: PUSH
35184: LD_INT 12
35186: PUSH
35187: LD_INT 13
35189: PUSH
35190: LD_INT 14
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: ST_TO_ADDR
35199: GO 35708
35201: LD_INT 25
35203: DOUBLE
35204: EQUAL
35205: IFTRUE 35209
35207: GO 35227
35209: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35210: LD_ADDR_VAR 0 3
35214: PUSH
35215: LD_INT 13
35217: PUSH
35218: LD_INT 14
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: ST_TO_ADDR
35225: GO 35708
35227: LD_INT 27
35229: DOUBLE
35230: EQUAL
35231: IFTRUE 35235
35233: GO 35253
35235: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35236: LD_ADDR_VAR 0 3
35240: PUSH
35241: LD_INT 13
35243: PUSH
35244: LD_INT 14
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: ST_TO_ADDR
35251: GO 35708
35253: LD_INT 92
35255: DOUBLE
35256: EQUAL
35257: IFTRUE 35261
35259: GO 35287
35261: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35262: LD_ADDR_VAR 0 3
35266: PUSH
35267: LD_INT 11
35269: PUSH
35270: LD_INT 12
35272: PUSH
35273: LD_INT 13
35275: PUSH
35276: LD_INT 14
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: ST_TO_ADDR
35285: GO 35708
35287: LD_INT 28
35289: DOUBLE
35290: EQUAL
35291: IFTRUE 35295
35293: GO 35313
35295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35296: LD_ADDR_VAR 0 3
35300: PUSH
35301: LD_INT 13
35303: PUSH
35304: LD_INT 14
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: ST_TO_ADDR
35311: GO 35708
35313: LD_INT 29
35315: DOUBLE
35316: EQUAL
35317: IFTRUE 35321
35319: GO 35339
35321: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35322: LD_ADDR_VAR 0 3
35326: PUSH
35327: LD_INT 13
35329: PUSH
35330: LD_INT 14
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: ST_TO_ADDR
35337: GO 35708
35339: LD_INT 31
35341: DOUBLE
35342: EQUAL
35343: IFTRUE 35347
35345: GO 35365
35347: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35348: LD_ADDR_VAR 0 3
35352: PUSH
35353: LD_INT 13
35355: PUSH
35356: LD_INT 14
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: ST_TO_ADDR
35363: GO 35708
35365: LD_INT 26
35367: DOUBLE
35368: EQUAL
35369: IFTRUE 35373
35371: GO 35391
35373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35374: LD_ADDR_VAR 0 3
35378: PUSH
35379: LD_INT 13
35381: PUSH
35382: LD_INT 14
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: ST_TO_ADDR
35389: GO 35708
35391: LD_INT 42
35393: DOUBLE
35394: EQUAL
35395: IFTRUE 35399
35397: GO 35425
35399: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35400: LD_ADDR_VAR 0 3
35404: PUSH
35405: LD_INT 21
35407: PUSH
35408: LD_INT 22
35410: PUSH
35411: LD_INT 23
35413: PUSH
35414: LD_INT 24
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: ST_TO_ADDR
35423: GO 35708
35425: LD_INT 43
35427: DOUBLE
35428: EQUAL
35429: IFTRUE 35433
35431: GO 35459
35433: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35434: LD_ADDR_VAR 0 3
35438: PUSH
35439: LD_INT 21
35441: PUSH
35442: LD_INT 22
35444: PUSH
35445: LD_INT 23
35447: PUSH
35448: LD_INT 24
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: ST_TO_ADDR
35457: GO 35708
35459: LD_INT 44
35461: DOUBLE
35462: EQUAL
35463: IFTRUE 35467
35465: GO 35493
35467: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35468: LD_ADDR_VAR 0 3
35472: PUSH
35473: LD_INT 21
35475: PUSH
35476: LD_INT 22
35478: PUSH
35479: LD_INT 23
35481: PUSH
35482: LD_INT 24
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: ST_TO_ADDR
35491: GO 35708
35493: LD_INT 45
35495: DOUBLE
35496: EQUAL
35497: IFTRUE 35501
35499: GO 35527
35501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35502: LD_ADDR_VAR 0 3
35506: PUSH
35507: LD_INT 21
35509: PUSH
35510: LD_INT 22
35512: PUSH
35513: LD_INT 23
35515: PUSH
35516: LD_INT 24
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: ST_TO_ADDR
35525: GO 35708
35527: LD_INT 49
35529: DOUBLE
35530: EQUAL
35531: IFTRUE 35535
35533: GO 35561
35535: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35536: LD_ADDR_VAR 0 3
35540: PUSH
35541: LD_INT 21
35543: PUSH
35544: LD_INT 22
35546: PUSH
35547: LD_INT 23
35549: PUSH
35550: LD_INT 24
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: ST_TO_ADDR
35559: GO 35708
35561: LD_INT 51
35563: DOUBLE
35564: EQUAL
35565: IFTRUE 35569
35567: GO 35595
35569: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35570: LD_ADDR_VAR 0 3
35574: PUSH
35575: LD_INT 21
35577: PUSH
35578: LD_INT 22
35580: PUSH
35581: LD_INT 23
35583: PUSH
35584: LD_INT 24
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: ST_TO_ADDR
35593: GO 35708
35595: LD_INT 52
35597: DOUBLE
35598: EQUAL
35599: IFTRUE 35603
35601: GO 35629
35603: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35604: LD_ADDR_VAR 0 3
35608: PUSH
35609: LD_INT 21
35611: PUSH
35612: LD_INT 22
35614: PUSH
35615: LD_INT 23
35617: PUSH
35618: LD_INT 24
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: ST_TO_ADDR
35627: GO 35708
35629: LD_INT 53
35631: DOUBLE
35632: EQUAL
35633: IFTRUE 35637
35635: GO 35655
35637: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35638: LD_ADDR_VAR 0 3
35642: PUSH
35643: LD_INT 23
35645: PUSH
35646: LD_INT 24
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: ST_TO_ADDR
35653: GO 35708
35655: LD_INT 46
35657: DOUBLE
35658: EQUAL
35659: IFTRUE 35663
35661: GO 35681
35663: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35664: LD_ADDR_VAR 0 3
35668: PUSH
35669: LD_INT 23
35671: PUSH
35672: LD_INT 24
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: ST_TO_ADDR
35679: GO 35708
35681: LD_INT 47
35683: DOUBLE
35684: EQUAL
35685: IFTRUE 35689
35687: GO 35707
35689: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35690: LD_ADDR_VAR 0 3
35694: PUSH
35695: LD_INT 23
35697: PUSH
35698: LD_INT 24
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: ST_TO_ADDR
35705: GO 35708
35707: POP
// result := ( chassis in result ) ;
35708: LD_ADDR_VAR 0 3
35712: PUSH
35713: LD_VAR 0 1
35717: PUSH
35718: LD_VAR 0 3
35722: IN
35723: ST_TO_ADDR
// end ;
35724: LD_VAR 0 3
35728: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35729: LD_INT 0
35731: PPUSH
35732: PPUSH
35733: PPUSH
35734: PPUSH
35735: PPUSH
35736: PPUSH
35737: PPUSH
// result := array ;
35738: LD_ADDR_VAR 0 5
35742: PUSH
35743: LD_VAR 0 1
35747: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35748: LD_VAR 0 1
35752: NOT
35753: PUSH
35754: LD_VAR 0 2
35758: NOT
35759: OR
35760: PUSH
35761: LD_VAR 0 3
35765: NOT
35766: OR
35767: PUSH
35768: LD_VAR 0 2
35772: PUSH
35773: LD_VAR 0 1
35777: GREATER
35778: OR
35779: PUSH
35780: LD_VAR 0 3
35784: PUSH
35785: LD_VAR 0 1
35789: GREATER
35790: OR
35791: IFFALSE 35795
// exit ;
35793: GO 36091
// if direction then
35795: LD_VAR 0 4
35799: IFFALSE 35863
// begin d := 1 ;
35801: LD_ADDR_VAR 0 9
35805: PUSH
35806: LD_INT 1
35808: ST_TO_ADDR
// if i_from > i_to then
35809: LD_VAR 0 2
35813: PUSH
35814: LD_VAR 0 3
35818: GREATER
35819: IFFALSE 35845
// length := ( array - i_from ) + i_to else
35821: LD_ADDR_VAR 0 11
35825: PUSH
35826: LD_VAR 0 1
35830: PUSH
35831: LD_VAR 0 2
35835: MINUS
35836: PUSH
35837: LD_VAR 0 3
35841: PLUS
35842: ST_TO_ADDR
35843: GO 35861
// length := i_to - i_from ;
35845: LD_ADDR_VAR 0 11
35849: PUSH
35850: LD_VAR 0 3
35854: PUSH
35855: LD_VAR 0 2
35859: MINUS
35860: ST_TO_ADDR
// end else
35861: GO 35924
// begin d := - 1 ;
35863: LD_ADDR_VAR 0 9
35867: PUSH
35868: LD_INT 1
35870: NEG
35871: ST_TO_ADDR
// if i_from > i_to then
35872: LD_VAR 0 2
35876: PUSH
35877: LD_VAR 0 3
35881: GREATER
35882: IFFALSE 35902
// length := i_from - i_to else
35884: LD_ADDR_VAR 0 11
35888: PUSH
35889: LD_VAR 0 2
35893: PUSH
35894: LD_VAR 0 3
35898: MINUS
35899: ST_TO_ADDR
35900: GO 35924
// length := ( array - i_to ) + i_from ;
35902: LD_ADDR_VAR 0 11
35906: PUSH
35907: LD_VAR 0 1
35911: PUSH
35912: LD_VAR 0 3
35916: MINUS
35917: PUSH
35918: LD_VAR 0 2
35922: PLUS
35923: ST_TO_ADDR
// end ; if not length then
35924: LD_VAR 0 11
35928: NOT
35929: IFFALSE 35933
// exit ;
35931: GO 36091
// tmp := array ;
35933: LD_ADDR_VAR 0 10
35937: PUSH
35938: LD_VAR 0 1
35942: ST_TO_ADDR
// for i = 1 to length do
35943: LD_ADDR_VAR 0 6
35947: PUSH
35948: DOUBLE
35949: LD_INT 1
35951: DEC
35952: ST_TO_ADDR
35953: LD_VAR 0 11
35957: PUSH
35958: FOR_TO
35959: IFFALSE 36079
// begin for j = 1 to array do
35961: LD_ADDR_VAR 0 7
35965: PUSH
35966: DOUBLE
35967: LD_INT 1
35969: DEC
35970: ST_TO_ADDR
35971: LD_VAR 0 1
35975: PUSH
35976: FOR_TO
35977: IFFALSE 36065
// begin k := j + d ;
35979: LD_ADDR_VAR 0 8
35983: PUSH
35984: LD_VAR 0 7
35988: PUSH
35989: LD_VAR 0 9
35993: PLUS
35994: ST_TO_ADDR
// if k > array then
35995: LD_VAR 0 8
35999: PUSH
36000: LD_VAR 0 1
36004: GREATER
36005: IFFALSE 36015
// k := 1 ;
36007: LD_ADDR_VAR 0 8
36011: PUSH
36012: LD_INT 1
36014: ST_TO_ADDR
// if not k then
36015: LD_VAR 0 8
36019: NOT
36020: IFFALSE 36032
// k := array ;
36022: LD_ADDR_VAR 0 8
36026: PUSH
36027: LD_VAR 0 1
36031: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36032: LD_ADDR_VAR 0 10
36036: PUSH
36037: LD_VAR 0 10
36041: PPUSH
36042: LD_VAR 0 8
36046: PPUSH
36047: LD_VAR 0 1
36051: PUSH
36052: LD_VAR 0 7
36056: ARRAY
36057: PPUSH
36058: CALL_OW 1
36062: ST_TO_ADDR
// end ;
36063: GO 35976
36065: POP
36066: POP
// array := tmp ;
36067: LD_ADDR_VAR 0 1
36071: PUSH
36072: LD_VAR 0 10
36076: ST_TO_ADDR
// end ;
36077: GO 35958
36079: POP
36080: POP
// result := array ;
36081: LD_ADDR_VAR 0 5
36085: PUSH
36086: LD_VAR 0 1
36090: ST_TO_ADDR
// end ;
36091: LD_VAR 0 5
36095: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36096: LD_INT 0
36098: PPUSH
36099: PPUSH
// result := 0 ;
36100: LD_ADDR_VAR 0 3
36104: PUSH
36105: LD_INT 0
36107: ST_TO_ADDR
// if not array or not value in array then
36108: LD_VAR 0 1
36112: NOT
36113: PUSH
36114: LD_VAR 0 2
36118: PUSH
36119: LD_VAR 0 1
36123: IN
36124: NOT
36125: OR
36126: IFFALSE 36130
// exit ;
36128: GO 36184
// for i = 1 to array do
36130: LD_ADDR_VAR 0 4
36134: PUSH
36135: DOUBLE
36136: LD_INT 1
36138: DEC
36139: ST_TO_ADDR
36140: LD_VAR 0 1
36144: PUSH
36145: FOR_TO
36146: IFFALSE 36182
// if value = array [ i ] then
36148: LD_VAR 0 2
36152: PUSH
36153: LD_VAR 0 1
36157: PUSH
36158: LD_VAR 0 4
36162: ARRAY
36163: EQUAL
36164: IFFALSE 36180
// begin result := i ;
36166: LD_ADDR_VAR 0 3
36170: PUSH
36171: LD_VAR 0 4
36175: ST_TO_ADDR
// exit ;
36176: POP
36177: POP
36178: GO 36184
// end ;
36180: GO 36145
36182: POP
36183: POP
// end ;
36184: LD_VAR 0 3
36188: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36189: LD_INT 0
36191: PPUSH
// vc_chassis := chassis ;
36192: LD_ADDR_OWVAR 37
36196: PUSH
36197: LD_VAR 0 1
36201: ST_TO_ADDR
// vc_engine := engine ;
36202: LD_ADDR_OWVAR 39
36206: PUSH
36207: LD_VAR 0 2
36211: ST_TO_ADDR
// vc_control := control ;
36212: LD_ADDR_OWVAR 38
36216: PUSH
36217: LD_VAR 0 3
36221: ST_TO_ADDR
// vc_weapon := weapon ;
36222: LD_ADDR_OWVAR 40
36226: PUSH
36227: LD_VAR 0 4
36231: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36232: LD_ADDR_OWVAR 41
36236: PUSH
36237: LD_VAR 0 5
36241: ST_TO_ADDR
// end ;
36242: LD_VAR 0 6
36246: RET
// export function WantPlant ( unit ) ; var task ; begin
36247: LD_INT 0
36249: PPUSH
36250: PPUSH
// result := false ;
36251: LD_ADDR_VAR 0 2
36255: PUSH
36256: LD_INT 0
36258: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36259: LD_ADDR_VAR 0 3
36263: PUSH
36264: LD_VAR 0 1
36268: PPUSH
36269: CALL_OW 437
36273: ST_TO_ADDR
// if task then
36274: LD_VAR 0 3
36278: IFFALSE 36306
// if task [ 1 ] [ 1 ] = p then
36280: LD_VAR 0 3
36284: PUSH
36285: LD_INT 1
36287: ARRAY
36288: PUSH
36289: LD_INT 1
36291: ARRAY
36292: PUSH
36293: LD_STRING p
36295: EQUAL
36296: IFFALSE 36306
// result := true ;
36298: LD_ADDR_VAR 0 2
36302: PUSH
36303: LD_INT 1
36305: ST_TO_ADDR
// end ;
36306: LD_VAR 0 2
36310: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36311: LD_INT 0
36313: PPUSH
36314: PPUSH
36315: PPUSH
36316: PPUSH
// if pos < 1 then
36317: LD_VAR 0 2
36321: PUSH
36322: LD_INT 1
36324: LESS
36325: IFFALSE 36329
// exit ;
36327: GO 36632
// if pos = 1 then
36329: LD_VAR 0 2
36333: PUSH
36334: LD_INT 1
36336: EQUAL
36337: IFFALSE 36370
// result := Replace ( arr , pos [ 1 ] , value ) else
36339: LD_ADDR_VAR 0 4
36343: PUSH
36344: LD_VAR 0 1
36348: PPUSH
36349: LD_VAR 0 2
36353: PUSH
36354: LD_INT 1
36356: ARRAY
36357: PPUSH
36358: LD_VAR 0 3
36362: PPUSH
36363: CALL_OW 1
36367: ST_TO_ADDR
36368: GO 36632
// begin tmp := arr ;
36370: LD_ADDR_VAR 0 6
36374: PUSH
36375: LD_VAR 0 1
36379: ST_TO_ADDR
// s_arr := [ tmp ] ;
36380: LD_ADDR_VAR 0 7
36384: PUSH
36385: LD_VAR 0 6
36389: PUSH
36390: EMPTY
36391: LIST
36392: ST_TO_ADDR
// for i = 1 to pos - 1 do
36393: LD_ADDR_VAR 0 5
36397: PUSH
36398: DOUBLE
36399: LD_INT 1
36401: DEC
36402: ST_TO_ADDR
36403: LD_VAR 0 2
36407: PUSH
36408: LD_INT 1
36410: MINUS
36411: PUSH
36412: FOR_TO
36413: IFFALSE 36458
// begin tmp := tmp [ pos [ i ] ] ;
36415: LD_ADDR_VAR 0 6
36419: PUSH
36420: LD_VAR 0 6
36424: PUSH
36425: LD_VAR 0 2
36429: PUSH
36430: LD_VAR 0 5
36434: ARRAY
36435: ARRAY
36436: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36437: LD_ADDR_VAR 0 7
36441: PUSH
36442: LD_VAR 0 7
36446: PUSH
36447: LD_VAR 0 6
36451: PUSH
36452: EMPTY
36453: LIST
36454: ADD
36455: ST_TO_ADDR
// end ;
36456: GO 36412
36458: POP
36459: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36460: LD_ADDR_VAR 0 6
36464: PUSH
36465: LD_VAR 0 6
36469: PPUSH
36470: LD_VAR 0 2
36474: PUSH
36475: LD_VAR 0 2
36479: ARRAY
36480: PPUSH
36481: LD_VAR 0 3
36485: PPUSH
36486: CALL_OW 1
36490: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36491: LD_ADDR_VAR 0 7
36495: PUSH
36496: LD_VAR 0 7
36500: PPUSH
36501: LD_VAR 0 7
36505: PPUSH
36506: LD_VAR 0 6
36510: PPUSH
36511: CALL_OW 1
36515: ST_TO_ADDR
// for i = s_arr downto 2 do
36516: LD_ADDR_VAR 0 5
36520: PUSH
36521: DOUBLE
36522: LD_VAR 0 7
36526: INC
36527: ST_TO_ADDR
36528: LD_INT 2
36530: PUSH
36531: FOR_DOWNTO
36532: IFFALSE 36616
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36534: LD_ADDR_VAR 0 6
36538: PUSH
36539: LD_VAR 0 7
36543: PUSH
36544: LD_VAR 0 5
36548: PUSH
36549: LD_INT 1
36551: MINUS
36552: ARRAY
36553: PPUSH
36554: LD_VAR 0 2
36558: PUSH
36559: LD_VAR 0 5
36563: PUSH
36564: LD_INT 1
36566: MINUS
36567: ARRAY
36568: PPUSH
36569: LD_VAR 0 7
36573: PUSH
36574: LD_VAR 0 5
36578: ARRAY
36579: PPUSH
36580: CALL_OW 1
36584: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36585: LD_ADDR_VAR 0 7
36589: PUSH
36590: LD_VAR 0 7
36594: PPUSH
36595: LD_VAR 0 5
36599: PUSH
36600: LD_INT 1
36602: MINUS
36603: PPUSH
36604: LD_VAR 0 6
36608: PPUSH
36609: CALL_OW 1
36613: ST_TO_ADDR
// end ;
36614: GO 36531
36616: POP
36617: POP
// result := s_arr [ 1 ] ;
36618: LD_ADDR_VAR 0 4
36622: PUSH
36623: LD_VAR 0 7
36627: PUSH
36628: LD_INT 1
36630: ARRAY
36631: ST_TO_ADDR
// end ; end ;
36632: LD_VAR 0 4
36636: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36637: LD_INT 0
36639: PPUSH
36640: PPUSH
// if not list then
36641: LD_VAR 0 1
36645: NOT
36646: IFFALSE 36650
// exit ;
36648: GO 36741
// i := list [ pos1 ] ;
36650: LD_ADDR_VAR 0 5
36654: PUSH
36655: LD_VAR 0 1
36659: PUSH
36660: LD_VAR 0 2
36664: ARRAY
36665: ST_TO_ADDR
// if not i then
36666: LD_VAR 0 5
36670: NOT
36671: IFFALSE 36675
// exit ;
36673: GO 36741
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36675: LD_ADDR_VAR 0 1
36679: PUSH
36680: LD_VAR 0 1
36684: PPUSH
36685: LD_VAR 0 2
36689: PPUSH
36690: LD_VAR 0 1
36694: PUSH
36695: LD_VAR 0 3
36699: ARRAY
36700: PPUSH
36701: CALL_OW 1
36705: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36706: LD_ADDR_VAR 0 1
36710: PUSH
36711: LD_VAR 0 1
36715: PPUSH
36716: LD_VAR 0 3
36720: PPUSH
36721: LD_VAR 0 5
36725: PPUSH
36726: CALL_OW 1
36730: ST_TO_ADDR
// result := list ;
36731: LD_ADDR_VAR 0 4
36735: PUSH
36736: LD_VAR 0 1
36740: ST_TO_ADDR
// end ;
36741: LD_VAR 0 4
36745: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36746: LD_INT 0
36748: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36749: LD_ADDR_VAR 0 5
36753: PUSH
36754: LD_VAR 0 1
36758: PPUSH
36759: CALL_OW 250
36763: PPUSH
36764: LD_VAR 0 1
36768: PPUSH
36769: CALL_OW 251
36773: PPUSH
36774: LD_VAR 0 2
36778: PPUSH
36779: LD_VAR 0 3
36783: PPUSH
36784: LD_VAR 0 4
36788: PPUSH
36789: CALL 37167 0 5
36793: ST_TO_ADDR
// end ;
36794: LD_VAR 0 5
36798: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36799: LD_INT 0
36801: PPUSH
36802: PPUSH
36803: PPUSH
36804: PPUSH
// if not list or not unit then
36805: LD_VAR 0 2
36809: NOT
36810: PUSH
36811: LD_VAR 0 1
36815: NOT
36816: OR
36817: IFFALSE 36821
// exit ;
36819: GO 37162
// result := [ ] ;
36821: LD_ADDR_VAR 0 5
36825: PUSH
36826: EMPTY
36827: ST_TO_ADDR
// for i in list do
36828: LD_ADDR_VAR 0 6
36832: PUSH
36833: LD_VAR 0 2
36837: PUSH
36838: FOR_IN
36839: IFFALSE 37057
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36841: LD_ADDR_VAR 0 8
36845: PUSH
36846: LD_VAR 0 1
36850: PPUSH
36851: LD_VAR 0 6
36855: PUSH
36856: LD_INT 1
36858: ARRAY
36859: PPUSH
36860: LD_VAR 0 6
36864: PUSH
36865: LD_INT 2
36867: ARRAY
36868: PPUSH
36869: CALL_OW 297
36873: ST_TO_ADDR
// if not Count ( result ) then
36874: LD_VAR 0 5
36878: PPUSH
36879: CALL 33451 0 1
36883: NOT
36884: IFFALSE 36917
// begin result := Join ( result , [ i , tmp ] ) ;
36886: LD_ADDR_VAR 0 5
36890: PUSH
36891: LD_VAR 0 5
36895: PPUSH
36896: LD_VAR 0 6
36900: PUSH
36901: LD_VAR 0 8
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PPUSH
36910: CALL 69040 0 2
36914: ST_TO_ADDR
// continue ;
36915: GO 36838
// end ; if result [ result ] [ 2 ] <= tmp then
36917: LD_VAR 0 5
36921: PUSH
36922: LD_VAR 0 5
36926: ARRAY
36927: PUSH
36928: LD_INT 2
36930: ARRAY
36931: PUSH
36932: LD_VAR 0 8
36936: LESSEQUAL
36937: IFFALSE 36970
// result := Join ( result , [ i , tmp ] ) else
36939: LD_ADDR_VAR 0 5
36943: PUSH
36944: LD_VAR 0 5
36948: PPUSH
36949: LD_VAR 0 6
36953: PUSH
36954: LD_VAR 0 8
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PPUSH
36963: CALL 69040 0 2
36967: ST_TO_ADDR
36968: GO 37055
// begin for j := 1 to Count ( result ) do
36970: LD_ADDR_VAR 0 7
36974: PUSH
36975: DOUBLE
36976: LD_INT 1
36978: DEC
36979: ST_TO_ADDR
36980: LD_VAR 0 5
36984: PPUSH
36985: CALL 33451 0 1
36989: PUSH
36990: FOR_TO
36991: IFFALSE 37053
// begin if tmp < result [ j ] [ 2 ] then
36993: LD_VAR 0 8
36997: PUSH
36998: LD_VAR 0 5
37002: PUSH
37003: LD_VAR 0 7
37007: ARRAY
37008: PUSH
37009: LD_INT 2
37011: ARRAY
37012: LESS
37013: IFFALSE 37051
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37015: LD_ADDR_VAR 0 5
37019: PUSH
37020: LD_VAR 0 5
37024: PPUSH
37025: LD_VAR 0 7
37029: PPUSH
37030: LD_VAR 0 6
37034: PUSH
37035: LD_VAR 0 8
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PPUSH
37044: CALL_OW 2
37048: ST_TO_ADDR
// break ;
37049: GO 37053
// end ; end ;
37051: GO 36990
37053: POP
37054: POP
// end ; end ;
37055: GO 36838
37057: POP
37058: POP
// if result and not asc then
37059: LD_VAR 0 5
37063: PUSH
37064: LD_VAR 0 3
37068: NOT
37069: AND
37070: IFFALSE 37087
// result := ReverseArray ( result ) ;
37072: LD_ADDR_VAR 0 5
37076: PUSH
37077: LD_VAR 0 5
37081: PPUSH
37082: CALL 64327 0 1
37086: ST_TO_ADDR
// tmp := [ ] ;
37087: LD_ADDR_VAR 0 8
37091: PUSH
37092: EMPTY
37093: ST_TO_ADDR
// if mode then
37094: LD_VAR 0 4
37098: IFFALSE 37162
// begin for i := 1 to result do
37100: LD_ADDR_VAR 0 6
37104: PUSH
37105: DOUBLE
37106: LD_INT 1
37108: DEC
37109: ST_TO_ADDR
37110: LD_VAR 0 5
37114: PUSH
37115: FOR_TO
37116: IFFALSE 37150
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37118: LD_ADDR_VAR 0 8
37122: PUSH
37123: LD_VAR 0 8
37127: PPUSH
37128: LD_VAR 0 5
37132: PUSH
37133: LD_VAR 0 6
37137: ARRAY
37138: PUSH
37139: LD_INT 1
37141: ARRAY
37142: PPUSH
37143: CALL 69040 0 2
37147: ST_TO_ADDR
37148: GO 37115
37150: POP
37151: POP
// result := tmp ;
37152: LD_ADDR_VAR 0 5
37156: PUSH
37157: LD_VAR 0 8
37161: ST_TO_ADDR
// end ; end ;
37162: LD_VAR 0 5
37166: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37167: LD_INT 0
37169: PPUSH
37170: PPUSH
37171: PPUSH
37172: PPUSH
// if not list then
37173: LD_VAR 0 3
37177: NOT
37178: IFFALSE 37182
// exit ;
37180: GO 37570
// result := [ ] ;
37182: LD_ADDR_VAR 0 6
37186: PUSH
37187: EMPTY
37188: ST_TO_ADDR
// for i in list do
37189: LD_ADDR_VAR 0 7
37193: PUSH
37194: LD_VAR 0 3
37198: PUSH
37199: FOR_IN
37200: IFFALSE 37402
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37202: LD_ADDR_VAR 0 9
37206: PUSH
37207: LD_VAR 0 7
37211: PPUSH
37212: LD_VAR 0 1
37216: PPUSH
37217: LD_VAR 0 2
37221: PPUSH
37222: CALL_OW 297
37226: ST_TO_ADDR
// if not result then
37227: LD_VAR 0 6
37231: NOT
37232: IFFALSE 37258
// result := [ [ i , tmp ] ] else
37234: LD_ADDR_VAR 0 6
37238: PUSH
37239: LD_VAR 0 7
37243: PUSH
37244: LD_VAR 0 9
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: EMPTY
37254: LIST
37255: ST_TO_ADDR
37256: GO 37400
// begin if result [ result ] [ 2 ] < tmp then
37258: LD_VAR 0 6
37262: PUSH
37263: LD_VAR 0 6
37267: ARRAY
37268: PUSH
37269: LD_INT 2
37271: ARRAY
37272: PUSH
37273: LD_VAR 0 9
37277: LESS
37278: IFFALSE 37320
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37280: LD_ADDR_VAR 0 6
37284: PUSH
37285: LD_VAR 0 6
37289: PPUSH
37290: LD_VAR 0 6
37294: PUSH
37295: LD_INT 1
37297: PLUS
37298: PPUSH
37299: LD_VAR 0 7
37303: PUSH
37304: LD_VAR 0 9
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PPUSH
37313: CALL_OW 2
37317: ST_TO_ADDR
37318: GO 37400
// for j = 1 to result do
37320: LD_ADDR_VAR 0 8
37324: PUSH
37325: DOUBLE
37326: LD_INT 1
37328: DEC
37329: ST_TO_ADDR
37330: LD_VAR 0 6
37334: PUSH
37335: FOR_TO
37336: IFFALSE 37398
// begin if tmp < result [ j ] [ 2 ] then
37338: LD_VAR 0 9
37342: PUSH
37343: LD_VAR 0 6
37347: PUSH
37348: LD_VAR 0 8
37352: ARRAY
37353: PUSH
37354: LD_INT 2
37356: ARRAY
37357: LESS
37358: IFFALSE 37396
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37360: LD_ADDR_VAR 0 6
37364: PUSH
37365: LD_VAR 0 6
37369: PPUSH
37370: LD_VAR 0 8
37374: PPUSH
37375: LD_VAR 0 7
37379: PUSH
37380: LD_VAR 0 9
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PPUSH
37389: CALL_OW 2
37393: ST_TO_ADDR
// break ;
37394: GO 37398
// end ; end ;
37396: GO 37335
37398: POP
37399: POP
// end ; end ;
37400: GO 37199
37402: POP
37403: POP
// if result and not asc then
37404: LD_VAR 0 6
37408: PUSH
37409: LD_VAR 0 4
37413: NOT
37414: AND
37415: IFFALSE 37490
// begin tmp := result ;
37417: LD_ADDR_VAR 0 9
37421: PUSH
37422: LD_VAR 0 6
37426: ST_TO_ADDR
// for i = tmp downto 1 do
37427: LD_ADDR_VAR 0 7
37431: PUSH
37432: DOUBLE
37433: LD_VAR 0 9
37437: INC
37438: ST_TO_ADDR
37439: LD_INT 1
37441: PUSH
37442: FOR_DOWNTO
37443: IFFALSE 37488
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37445: LD_ADDR_VAR 0 6
37449: PUSH
37450: LD_VAR 0 6
37454: PPUSH
37455: LD_VAR 0 9
37459: PUSH
37460: LD_VAR 0 7
37464: MINUS
37465: PUSH
37466: LD_INT 1
37468: PLUS
37469: PPUSH
37470: LD_VAR 0 9
37474: PUSH
37475: LD_VAR 0 7
37479: ARRAY
37480: PPUSH
37481: CALL_OW 1
37485: ST_TO_ADDR
37486: GO 37442
37488: POP
37489: POP
// end ; tmp := [ ] ;
37490: LD_ADDR_VAR 0 9
37494: PUSH
37495: EMPTY
37496: ST_TO_ADDR
// if mode then
37497: LD_VAR 0 5
37501: IFFALSE 37570
// begin for i = 1 to result do
37503: LD_ADDR_VAR 0 7
37507: PUSH
37508: DOUBLE
37509: LD_INT 1
37511: DEC
37512: ST_TO_ADDR
37513: LD_VAR 0 6
37517: PUSH
37518: FOR_TO
37519: IFFALSE 37558
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37521: LD_ADDR_VAR 0 9
37525: PUSH
37526: LD_VAR 0 9
37530: PPUSH
37531: LD_VAR 0 7
37535: PPUSH
37536: LD_VAR 0 6
37540: PUSH
37541: LD_VAR 0 7
37545: ARRAY
37546: PUSH
37547: LD_INT 1
37549: ARRAY
37550: PPUSH
37551: CALL_OW 1
37555: ST_TO_ADDR
37556: GO 37518
37558: POP
37559: POP
// result := tmp ;
37560: LD_ADDR_VAR 0 6
37564: PUSH
37565: LD_VAR 0 9
37569: ST_TO_ADDR
// end ; end ;
37570: LD_VAR 0 6
37574: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37575: LD_INT 0
37577: PPUSH
37578: PPUSH
37579: PPUSH
37580: PPUSH
37581: PPUSH
37582: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37583: LD_ADDR_VAR 0 5
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: EMPTY
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: ST_TO_ADDR
// if not x or not y then
37605: LD_VAR 0 2
37609: NOT
37610: PUSH
37611: LD_VAR 0 3
37615: NOT
37616: OR
37617: IFFALSE 37621
// exit ;
37619: GO 39271
// if not range then
37621: LD_VAR 0 4
37625: NOT
37626: IFFALSE 37636
// range := 10 ;
37628: LD_ADDR_VAR 0 4
37632: PUSH
37633: LD_INT 10
37635: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37636: LD_ADDR_VAR 0 8
37640: PUSH
37641: LD_INT 81
37643: PUSH
37644: LD_VAR 0 1
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 92
37655: PUSH
37656: LD_VAR 0 2
37660: PUSH
37661: LD_VAR 0 3
37665: PUSH
37666: LD_VAR 0 4
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 3
37679: PUSH
37680: LD_INT 21
37682: PUSH
37683: LD_INT 3
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: LIST
37698: PPUSH
37699: CALL_OW 69
37703: ST_TO_ADDR
// if not tmp then
37704: LD_VAR 0 8
37708: NOT
37709: IFFALSE 37713
// exit ;
37711: GO 39271
// for i in tmp do
37713: LD_ADDR_VAR 0 6
37717: PUSH
37718: LD_VAR 0 8
37722: PUSH
37723: FOR_IN
37724: IFFALSE 39246
// begin points := [ 0 , 0 , 0 ] ;
37726: LD_ADDR_VAR 0 9
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: LIST
37744: ST_TO_ADDR
// bpoints := 1 ;
37745: LD_ADDR_VAR 0 10
37749: PUSH
37750: LD_INT 1
37752: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37753: LD_VAR 0 6
37757: PPUSH
37758: CALL_OW 247
37762: PUSH
37763: LD_INT 1
37765: DOUBLE
37766: EQUAL
37767: IFTRUE 37771
37769: GO 38349
37771: POP
// begin if GetClass ( i ) = 1 then
37772: LD_VAR 0 6
37776: PPUSH
37777: CALL_OW 257
37781: PUSH
37782: LD_INT 1
37784: EQUAL
37785: IFFALSE 37806
// points := [ 10 , 5 , 3 ] ;
37787: LD_ADDR_VAR 0 9
37791: PUSH
37792: LD_INT 10
37794: PUSH
37795: LD_INT 5
37797: PUSH
37798: LD_INT 3
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: LIST
37805: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37806: LD_VAR 0 6
37810: PPUSH
37811: CALL_OW 257
37815: PUSH
37816: LD_INT 2
37818: PUSH
37819: LD_INT 3
37821: PUSH
37822: LD_INT 4
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: LIST
37829: IN
37830: IFFALSE 37851
// points := [ 3 , 2 , 1 ] ;
37832: LD_ADDR_VAR 0 9
37836: PUSH
37837: LD_INT 3
37839: PUSH
37840: LD_INT 2
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: LIST
37850: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37851: LD_VAR 0 6
37855: PPUSH
37856: CALL_OW 257
37860: PUSH
37861: LD_INT 5
37863: EQUAL
37864: IFFALSE 37885
// points := [ 130 , 5 , 2 ] ;
37866: LD_ADDR_VAR 0 9
37870: PUSH
37871: LD_INT 130
37873: PUSH
37874: LD_INT 5
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: LIST
37884: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37885: LD_VAR 0 6
37889: PPUSH
37890: CALL_OW 257
37894: PUSH
37895: LD_INT 8
37897: EQUAL
37898: IFFALSE 37919
// points := [ 35 , 35 , 30 ] ;
37900: LD_ADDR_VAR 0 9
37904: PUSH
37905: LD_INT 35
37907: PUSH
37908: LD_INT 35
37910: PUSH
37911: LD_INT 30
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37919: LD_VAR 0 6
37923: PPUSH
37924: CALL_OW 257
37928: PUSH
37929: LD_INT 9
37931: EQUAL
37932: IFFALSE 37953
// points := [ 20 , 55 , 40 ] ;
37934: LD_ADDR_VAR 0 9
37938: PUSH
37939: LD_INT 20
37941: PUSH
37942: LD_INT 55
37944: PUSH
37945: LD_INT 40
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: LIST
37952: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37953: LD_VAR 0 6
37957: PPUSH
37958: CALL_OW 257
37962: PUSH
37963: LD_INT 12
37965: PUSH
37966: LD_INT 16
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: IN
37973: IFFALSE 37994
// points := [ 5 , 3 , 2 ] ;
37975: LD_ADDR_VAR 0 9
37979: PUSH
37980: LD_INT 5
37982: PUSH
37983: LD_INT 3
37985: PUSH
37986: LD_INT 2
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: LIST
37993: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37994: LD_VAR 0 6
37998: PPUSH
37999: CALL_OW 257
38003: PUSH
38004: LD_INT 17
38006: EQUAL
38007: IFFALSE 38028
// points := [ 100 , 50 , 75 ] ;
38009: LD_ADDR_VAR 0 9
38013: PUSH
38014: LD_INT 100
38016: PUSH
38017: LD_INT 50
38019: PUSH
38020: LD_INT 75
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: LIST
38027: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38028: LD_VAR 0 6
38032: PPUSH
38033: CALL_OW 257
38037: PUSH
38038: LD_INT 15
38040: EQUAL
38041: IFFALSE 38062
// points := [ 10 , 5 , 3 ] ;
38043: LD_ADDR_VAR 0 9
38047: PUSH
38048: LD_INT 10
38050: PUSH
38051: LD_INT 5
38053: PUSH
38054: LD_INT 3
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: LIST
38061: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38062: LD_VAR 0 6
38066: PPUSH
38067: CALL_OW 257
38071: PUSH
38072: LD_INT 14
38074: EQUAL
38075: IFFALSE 38096
// points := [ 10 , 0 , 0 ] ;
38077: LD_ADDR_VAR 0 9
38081: PUSH
38082: LD_INT 10
38084: PUSH
38085: LD_INT 0
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: LIST
38095: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38096: LD_VAR 0 6
38100: PPUSH
38101: CALL_OW 257
38105: PUSH
38106: LD_INT 11
38108: EQUAL
38109: IFFALSE 38130
// points := [ 30 , 10 , 5 ] ;
38111: LD_ADDR_VAR 0 9
38115: PUSH
38116: LD_INT 30
38118: PUSH
38119: LD_INT 10
38121: PUSH
38122: LD_INT 5
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38130: LD_VAR 0 1
38134: PPUSH
38135: LD_INT 5
38137: PPUSH
38138: CALL_OW 321
38142: PUSH
38143: LD_INT 2
38145: EQUAL
38146: IFFALSE 38163
// bpoints := bpoints * 1.8 ;
38148: LD_ADDR_VAR 0 10
38152: PUSH
38153: LD_VAR 0 10
38157: PUSH
38158: LD_REAL  1.80000000000000E+0000
38161: MUL
38162: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38163: LD_VAR 0 6
38167: PPUSH
38168: CALL_OW 257
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: LD_INT 2
38178: PUSH
38179: LD_INT 3
38181: PUSH
38182: LD_INT 4
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: IN
38191: PUSH
38192: LD_VAR 0 1
38196: PPUSH
38197: LD_INT 51
38199: PPUSH
38200: CALL_OW 321
38204: PUSH
38205: LD_INT 2
38207: EQUAL
38208: AND
38209: IFFALSE 38226
// bpoints := bpoints * 1.2 ;
38211: LD_ADDR_VAR 0 10
38215: PUSH
38216: LD_VAR 0 10
38220: PUSH
38221: LD_REAL  1.20000000000000E+0000
38224: MUL
38225: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38226: LD_VAR 0 6
38230: PPUSH
38231: CALL_OW 257
38235: PUSH
38236: LD_INT 5
38238: PUSH
38239: LD_INT 7
38241: PUSH
38242: LD_INT 9
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: LIST
38249: IN
38250: PUSH
38251: LD_VAR 0 1
38255: PPUSH
38256: LD_INT 52
38258: PPUSH
38259: CALL_OW 321
38263: PUSH
38264: LD_INT 2
38266: EQUAL
38267: AND
38268: IFFALSE 38285
// bpoints := bpoints * 1.5 ;
38270: LD_ADDR_VAR 0 10
38274: PUSH
38275: LD_VAR 0 10
38279: PUSH
38280: LD_REAL  1.50000000000000E+0000
38283: MUL
38284: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38285: LD_VAR 0 1
38289: PPUSH
38290: LD_INT 66
38292: PPUSH
38293: CALL_OW 321
38297: PUSH
38298: LD_INT 2
38300: EQUAL
38301: IFFALSE 38318
// bpoints := bpoints * 1.1 ;
38303: LD_ADDR_VAR 0 10
38307: PUSH
38308: LD_VAR 0 10
38312: PUSH
38313: LD_REAL  1.10000000000000E+0000
38316: MUL
38317: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38318: LD_ADDR_VAR 0 10
38322: PUSH
38323: LD_VAR 0 10
38327: PUSH
38328: LD_VAR 0 6
38332: PPUSH
38333: LD_INT 1
38335: PPUSH
38336: CALL_OW 259
38340: PUSH
38341: LD_REAL  1.15000000000000E+0000
38344: MUL
38345: MUL
38346: ST_TO_ADDR
// end ; unit_vehicle :
38347: GO 39175
38349: LD_INT 2
38351: DOUBLE
38352: EQUAL
38353: IFTRUE 38357
38355: GO 39163
38357: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38358: LD_VAR 0 6
38362: PPUSH
38363: CALL_OW 264
38367: PUSH
38368: LD_INT 2
38370: PUSH
38371: LD_INT 42
38373: PUSH
38374: LD_INT 24
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: IN
38382: IFFALSE 38403
// points := [ 25 , 5 , 3 ] ;
38384: LD_ADDR_VAR 0 9
38388: PUSH
38389: LD_INT 25
38391: PUSH
38392: LD_INT 5
38394: PUSH
38395: LD_INT 3
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: LIST
38402: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38403: LD_VAR 0 6
38407: PPUSH
38408: CALL_OW 264
38412: PUSH
38413: LD_INT 4
38415: PUSH
38416: LD_INT 43
38418: PUSH
38419: LD_INT 25
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: LIST
38426: IN
38427: IFFALSE 38448
// points := [ 40 , 15 , 5 ] ;
38429: LD_ADDR_VAR 0 9
38433: PUSH
38434: LD_INT 40
38436: PUSH
38437: LD_INT 15
38439: PUSH
38440: LD_INT 5
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: LIST
38447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38448: LD_VAR 0 6
38452: PPUSH
38453: CALL_OW 264
38457: PUSH
38458: LD_INT 3
38460: PUSH
38461: LD_INT 23
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: IN
38468: IFFALSE 38489
// points := [ 7 , 25 , 8 ] ;
38470: LD_ADDR_VAR 0 9
38474: PUSH
38475: LD_INT 7
38477: PUSH
38478: LD_INT 25
38480: PUSH
38481: LD_INT 8
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: LIST
38488: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38489: LD_VAR 0 6
38493: PPUSH
38494: CALL_OW 264
38498: PUSH
38499: LD_INT 5
38501: PUSH
38502: LD_INT 27
38504: PUSH
38505: LD_INT 44
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: LIST
38512: IN
38513: IFFALSE 38534
// points := [ 14 , 50 , 16 ] ;
38515: LD_ADDR_VAR 0 9
38519: PUSH
38520: LD_INT 14
38522: PUSH
38523: LD_INT 50
38525: PUSH
38526: LD_INT 16
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: LIST
38533: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38534: LD_VAR 0 6
38538: PPUSH
38539: CALL_OW 264
38543: PUSH
38544: LD_INT 6
38546: PUSH
38547: LD_INT 46
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: IN
38554: IFFALSE 38575
// points := [ 32 , 120 , 70 ] ;
38556: LD_ADDR_VAR 0 9
38560: PUSH
38561: LD_INT 32
38563: PUSH
38564: LD_INT 120
38566: PUSH
38567: LD_INT 70
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: LIST
38574: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38575: LD_VAR 0 6
38579: PPUSH
38580: CALL_OW 264
38584: PUSH
38585: LD_INT 7
38587: PUSH
38588: LD_INT 28
38590: PUSH
38591: LD_INT 45
38593: PUSH
38594: LD_INT 92
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: IN
38603: IFFALSE 38624
// points := [ 35 , 20 , 45 ] ;
38605: LD_ADDR_VAR 0 9
38609: PUSH
38610: LD_INT 35
38612: PUSH
38613: LD_INT 20
38615: PUSH
38616: LD_INT 45
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38624: LD_VAR 0 6
38628: PPUSH
38629: CALL_OW 264
38633: PUSH
38634: LD_INT 47
38636: PUSH
38637: EMPTY
38638: LIST
38639: IN
38640: IFFALSE 38661
// points := [ 67 , 45 , 75 ] ;
38642: LD_ADDR_VAR 0 9
38646: PUSH
38647: LD_INT 67
38649: PUSH
38650: LD_INT 45
38652: PUSH
38653: LD_INT 75
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38661: LD_VAR 0 6
38665: PPUSH
38666: CALL_OW 264
38670: PUSH
38671: LD_INT 26
38673: PUSH
38674: EMPTY
38675: LIST
38676: IN
38677: IFFALSE 38698
// points := [ 120 , 30 , 80 ] ;
38679: LD_ADDR_VAR 0 9
38683: PUSH
38684: LD_INT 120
38686: PUSH
38687: LD_INT 30
38689: PUSH
38690: LD_INT 80
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: LIST
38697: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38698: LD_VAR 0 6
38702: PPUSH
38703: CALL_OW 264
38707: PUSH
38708: LD_INT 22
38710: PUSH
38711: EMPTY
38712: LIST
38713: IN
38714: IFFALSE 38735
// points := [ 40 , 1 , 1 ] ;
38716: LD_ADDR_VAR 0 9
38720: PUSH
38721: LD_INT 40
38723: PUSH
38724: LD_INT 1
38726: PUSH
38727: LD_INT 1
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: LIST
38734: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38735: LD_VAR 0 6
38739: PPUSH
38740: CALL_OW 264
38744: PUSH
38745: LD_INT 29
38747: PUSH
38748: EMPTY
38749: LIST
38750: IN
38751: IFFALSE 38772
// points := [ 70 , 200 , 400 ] ;
38753: LD_ADDR_VAR 0 9
38757: PUSH
38758: LD_INT 70
38760: PUSH
38761: LD_INT 200
38763: PUSH
38764: LD_INT 400
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: LIST
38771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38772: LD_VAR 0 6
38776: PPUSH
38777: CALL_OW 264
38781: PUSH
38782: LD_INT 14
38784: PUSH
38785: LD_INT 53
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: IN
38792: IFFALSE 38813
// points := [ 40 , 10 , 20 ] ;
38794: LD_ADDR_VAR 0 9
38798: PUSH
38799: LD_INT 40
38801: PUSH
38802: LD_INT 10
38804: PUSH
38805: LD_INT 20
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: LIST
38812: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38813: LD_VAR 0 6
38817: PPUSH
38818: CALL_OW 264
38822: PUSH
38823: LD_INT 9
38825: PUSH
38826: EMPTY
38827: LIST
38828: IN
38829: IFFALSE 38850
// points := [ 5 , 70 , 20 ] ;
38831: LD_ADDR_VAR 0 9
38835: PUSH
38836: LD_INT 5
38838: PUSH
38839: LD_INT 70
38841: PUSH
38842: LD_INT 20
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38850: LD_VAR 0 6
38854: PPUSH
38855: CALL_OW 264
38859: PUSH
38860: LD_INT 10
38862: PUSH
38863: EMPTY
38864: LIST
38865: IN
38866: IFFALSE 38887
// points := [ 35 , 110 , 70 ] ;
38868: LD_ADDR_VAR 0 9
38872: PUSH
38873: LD_INT 35
38875: PUSH
38876: LD_INT 110
38878: PUSH
38879: LD_INT 70
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38887: LD_VAR 0 6
38891: PPUSH
38892: CALL_OW 265
38896: PUSH
38897: LD_INT 25
38899: EQUAL
38900: IFFALSE 38921
// points := [ 80 , 65 , 100 ] ;
38902: LD_ADDR_VAR 0 9
38906: PUSH
38907: LD_INT 80
38909: PUSH
38910: LD_INT 65
38912: PUSH
38913: LD_INT 100
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: LIST
38920: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38921: LD_VAR 0 6
38925: PPUSH
38926: CALL_OW 263
38930: PUSH
38931: LD_INT 1
38933: EQUAL
38934: IFFALSE 38969
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38936: LD_ADDR_VAR 0 10
38940: PUSH
38941: LD_VAR 0 10
38945: PUSH
38946: LD_VAR 0 6
38950: PPUSH
38951: CALL_OW 311
38955: PPUSH
38956: LD_INT 3
38958: PPUSH
38959: CALL_OW 259
38963: PUSH
38964: LD_INT 4
38966: MUL
38967: MUL
38968: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38969: LD_VAR 0 6
38973: PPUSH
38974: CALL_OW 263
38978: PUSH
38979: LD_INT 2
38981: EQUAL
38982: IFFALSE 39033
// begin j := IsControledBy ( i ) ;
38984: LD_ADDR_VAR 0 7
38988: PUSH
38989: LD_VAR 0 6
38993: PPUSH
38994: CALL_OW 312
38998: ST_TO_ADDR
// if j then
38999: LD_VAR 0 7
39003: IFFALSE 39033
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39005: LD_ADDR_VAR 0 10
39009: PUSH
39010: LD_VAR 0 10
39014: PUSH
39015: LD_VAR 0 7
39019: PPUSH
39020: LD_INT 3
39022: PPUSH
39023: CALL_OW 259
39027: PUSH
39028: LD_INT 3
39030: MUL
39031: MUL
39032: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39033: LD_VAR 0 6
39037: PPUSH
39038: CALL_OW 264
39042: PUSH
39043: LD_INT 5
39045: PUSH
39046: LD_INT 6
39048: PUSH
39049: LD_INT 46
39051: PUSH
39052: LD_INT 44
39054: PUSH
39055: LD_INT 47
39057: PUSH
39058: LD_INT 45
39060: PUSH
39061: LD_INT 28
39063: PUSH
39064: LD_INT 7
39066: PUSH
39067: LD_INT 27
39069: PUSH
39070: LD_INT 29
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: IN
39085: PUSH
39086: LD_VAR 0 1
39090: PPUSH
39091: LD_INT 52
39093: PPUSH
39094: CALL_OW 321
39098: PUSH
39099: LD_INT 2
39101: EQUAL
39102: AND
39103: IFFALSE 39120
// bpoints := bpoints * 1.2 ;
39105: LD_ADDR_VAR 0 10
39109: PUSH
39110: LD_VAR 0 10
39114: PUSH
39115: LD_REAL  1.20000000000000E+0000
39118: MUL
39119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39120: LD_VAR 0 6
39124: PPUSH
39125: CALL_OW 264
39129: PUSH
39130: LD_INT 6
39132: PUSH
39133: LD_INT 46
39135: PUSH
39136: LD_INT 47
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: LIST
39143: IN
39144: IFFALSE 39161
// bpoints := bpoints * 1.2 ;
39146: LD_ADDR_VAR 0 10
39150: PUSH
39151: LD_VAR 0 10
39155: PUSH
39156: LD_REAL  1.20000000000000E+0000
39159: MUL
39160: ST_TO_ADDR
// end ; unit_building :
39161: GO 39175
39163: LD_INT 3
39165: DOUBLE
39166: EQUAL
39167: IFTRUE 39171
39169: GO 39174
39171: POP
// ; end ;
39172: GO 39175
39174: POP
// for j = 1 to 3 do
39175: LD_ADDR_VAR 0 7
39179: PUSH
39180: DOUBLE
39181: LD_INT 1
39183: DEC
39184: ST_TO_ADDR
39185: LD_INT 3
39187: PUSH
39188: FOR_TO
39189: IFFALSE 39242
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39191: LD_ADDR_VAR 0 5
39195: PUSH
39196: LD_VAR 0 5
39200: PPUSH
39201: LD_VAR 0 7
39205: PPUSH
39206: LD_VAR 0 5
39210: PUSH
39211: LD_VAR 0 7
39215: ARRAY
39216: PUSH
39217: LD_VAR 0 9
39221: PUSH
39222: LD_VAR 0 7
39226: ARRAY
39227: PUSH
39228: LD_VAR 0 10
39232: MUL
39233: PLUS
39234: PPUSH
39235: CALL_OW 1
39239: ST_TO_ADDR
39240: GO 39188
39242: POP
39243: POP
// end ;
39244: GO 37723
39246: POP
39247: POP
// result := Replace ( result , 4 , tmp ) ;
39248: LD_ADDR_VAR 0 5
39252: PUSH
39253: LD_VAR 0 5
39257: PPUSH
39258: LD_INT 4
39260: PPUSH
39261: LD_VAR 0 8
39265: PPUSH
39266: CALL_OW 1
39270: ST_TO_ADDR
// end ;
39271: LD_VAR 0 5
39275: RET
// export function DangerAtRange ( unit , range ) ; begin
39276: LD_INT 0
39278: PPUSH
// if not unit then
39279: LD_VAR 0 1
39283: NOT
39284: IFFALSE 39288
// exit ;
39286: GO 39333
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39288: LD_ADDR_VAR 0 3
39292: PUSH
39293: LD_VAR 0 1
39297: PPUSH
39298: CALL_OW 255
39302: PPUSH
39303: LD_VAR 0 1
39307: PPUSH
39308: CALL_OW 250
39312: PPUSH
39313: LD_VAR 0 1
39317: PPUSH
39318: CALL_OW 251
39322: PPUSH
39323: LD_VAR 0 2
39327: PPUSH
39328: CALL 37575 0 4
39332: ST_TO_ADDR
// end ;
39333: LD_VAR 0 3
39337: RET
// export function DangerInArea ( side , area ) ; begin
39338: LD_INT 0
39340: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39341: LD_ADDR_VAR 0 3
39345: PUSH
39346: LD_VAR 0 2
39350: PPUSH
39351: LD_INT 81
39353: PUSH
39354: LD_VAR 0 1
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PPUSH
39363: CALL_OW 70
39367: ST_TO_ADDR
// end ;
39368: LD_VAR 0 3
39372: RET
// export function IsExtension ( b ) ; begin
39373: LD_INT 0
39375: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39376: LD_ADDR_VAR 0 2
39380: PUSH
39381: LD_VAR 0 1
39385: PUSH
39386: LD_INT 23
39388: PUSH
39389: LD_INT 20
39391: PUSH
39392: LD_INT 22
39394: PUSH
39395: LD_INT 17
39397: PUSH
39398: LD_INT 24
39400: PUSH
39401: LD_INT 21
39403: PUSH
39404: LD_INT 19
39406: PUSH
39407: LD_INT 16
39409: PUSH
39410: LD_INT 25
39412: PUSH
39413: LD_INT 18
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: IN
39428: ST_TO_ADDR
// end ;
39429: LD_VAR 0 2
39433: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39434: LD_INT 0
39436: PPUSH
39437: PPUSH
39438: PPUSH
// result := [ ] ;
39439: LD_ADDR_VAR 0 4
39443: PUSH
39444: EMPTY
39445: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39446: LD_ADDR_VAR 0 5
39450: PUSH
39451: LD_VAR 0 2
39455: PPUSH
39456: LD_INT 21
39458: PUSH
39459: LD_INT 3
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PPUSH
39466: CALL_OW 70
39470: ST_TO_ADDR
// if not tmp then
39471: LD_VAR 0 5
39475: NOT
39476: IFFALSE 39480
// exit ;
39478: GO 39544
// if checkLink then
39480: LD_VAR 0 3
39484: IFFALSE 39534
// begin for i in tmp do
39486: LD_ADDR_VAR 0 6
39490: PUSH
39491: LD_VAR 0 5
39495: PUSH
39496: FOR_IN
39497: IFFALSE 39532
// if GetBase ( i ) <> base then
39499: LD_VAR 0 6
39503: PPUSH
39504: CALL_OW 274
39508: PUSH
39509: LD_VAR 0 1
39513: NONEQUAL
39514: IFFALSE 39530
// ComLinkToBase ( base , i ) ;
39516: LD_VAR 0 1
39520: PPUSH
39521: LD_VAR 0 6
39525: PPUSH
39526: CALL_OW 169
39530: GO 39496
39532: POP
39533: POP
// end ; result := tmp ;
39534: LD_ADDR_VAR 0 4
39538: PUSH
39539: LD_VAR 0 5
39543: ST_TO_ADDR
// end ;
39544: LD_VAR 0 4
39548: RET
// export function ComComplete ( units , b ) ; var i ; begin
39549: LD_INT 0
39551: PPUSH
39552: PPUSH
// if not units then
39553: LD_VAR 0 1
39557: NOT
39558: IFFALSE 39562
// exit ;
39560: GO 39652
// for i in units do
39562: LD_ADDR_VAR 0 4
39566: PUSH
39567: LD_VAR 0 1
39571: PUSH
39572: FOR_IN
39573: IFFALSE 39650
// if BuildingStatus ( b ) = bs_build then
39575: LD_VAR 0 2
39579: PPUSH
39580: CALL_OW 461
39584: PUSH
39585: LD_INT 1
39587: EQUAL
39588: IFFALSE 39648
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39590: LD_VAR 0 4
39594: PPUSH
39595: LD_STRING h
39597: PUSH
39598: LD_VAR 0 2
39602: PPUSH
39603: CALL_OW 250
39607: PUSH
39608: LD_VAR 0 2
39612: PPUSH
39613: CALL_OW 251
39617: PUSH
39618: LD_VAR 0 2
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: PUSH
39641: EMPTY
39642: LIST
39643: PPUSH
39644: CALL_OW 446
39648: GO 39572
39650: POP
39651: POP
// end ;
39652: LD_VAR 0 3
39656: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39657: LD_INT 0
39659: PPUSH
39660: PPUSH
39661: PPUSH
39662: PPUSH
39663: PPUSH
39664: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39665: LD_VAR 0 1
39669: NOT
39670: PUSH
39671: LD_VAR 0 1
39675: PPUSH
39676: CALL_OW 263
39680: PUSH
39681: LD_INT 2
39683: NONEQUAL
39684: OR
39685: IFFALSE 39689
// exit ;
39687: GO 40005
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39689: LD_ADDR_VAR 0 6
39693: PUSH
39694: LD_INT 22
39696: PUSH
39697: LD_VAR 0 1
39701: PPUSH
39702: CALL_OW 255
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 2
39713: PUSH
39714: LD_INT 30
39716: PUSH
39717: LD_INT 36
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 34
39726: PUSH
39727: LD_INT 31
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: LIST
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PPUSH
39743: CALL_OW 69
39747: ST_TO_ADDR
// if not tmp then
39748: LD_VAR 0 6
39752: NOT
39753: IFFALSE 39757
// exit ;
39755: GO 40005
// result := [ ] ;
39757: LD_ADDR_VAR 0 2
39761: PUSH
39762: EMPTY
39763: ST_TO_ADDR
// for i in tmp do
39764: LD_ADDR_VAR 0 3
39768: PUSH
39769: LD_VAR 0 6
39773: PUSH
39774: FOR_IN
39775: IFFALSE 39846
// begin t := UnitsInside ( i ) ;
39777: LD_ADDR_VAR 0 4
39781: PUSH
39782: LD_VAR 0 3
39786: PPUSH
39787: CALL_OW 313
39791: ST_TO_ADDR
// if t then
39792: LD_VAR 0 4
39796: IFFALSE 39844
// for j in t do
39798: LD_ADDR_VAR 0 7
39802: PUSH
39803: LD_VAR 0 4
39807: PUSH
39808: FOR_IN
39809: IFFALSE 39842
// result := Replace ( result , result + 1 , j ) ;
39811: LD_ADDR_VAR 0 2
39815: PUSH
39816: LD_VAR 0 2
39820: PPUSH
39821: LD_VAR 0 2
39825: PUSH
39826: LD_INT 1
39828: PLUS
39829: PPUSH
39830: LD_VAR 0 7
39834: PPUSH
39835: CALL_OW 1
39839: ST_TO_ADDR
39840: GO 39808
39842: POP
39843: POP
// end ;
39844: GO 39774
39846: POP
39847: POP
// if not result then
39848: LD_VAR 0 2
39852: NOT
39853: IFFALSE 39857
// exit ;
39855: GO 40005
// mech := result [ 1 ] ;
39857: LD_ADDR_VAR 0 5
39861: PUSH
39862: LD_VAR 0 2
39866: PUSH
39867: LD_INT 1
39869: ARRAY
39870: ST_TO_ADDR
// if result > 1 then
39871: LD_VAR 0 2
39875: PUSH
39876: LD_INT 1
39878: GREATER
39879: IFFALSE 39991
// begin for i = 2 to result do
39881: LD_ADDR_VAR 0 3
39885: PUSH
39886: DOUBLE
39887: LD_INT 2
39889: DEC
39890: ST_TO_ADDR
39891: LD_VAR 0 2
39895: PUSH
39896: FOR_TO
39897: IFFALSE 39989
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39899: LD_ADDR_VAR 0 4
39903: PUSH
39904: LD_VAR 0 2
39908: PUSH
39909: LD_VAR 0 3
39913: ARRAY
39914: PPUSH
39915: LD_INT 3
39917: PPUSH
39918: CALL_OW 259
39922: PUSH
39923: LD_VAR 0 2
39927: PUSH
39928: LD_VAR 0 3
39932: ARRAY
39933: PPUSH
39934: CALL_OW 432
39938: MINUS
39939: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39940: LD_VAR 0 4
39944: PUSH
39945: LD_VAR 0 5
39949: PPUSH
39950: LD_INT 3
39952: PPUSH
39953: CALL_OW 259
39957: PUSH
39958: LD_VAR 0 5
39962: PPUSH
39963: CALL_OW 432
39967: MINUS
39968: GREATEREQUAL
39969: IFFALSE 39987
// mech := result [ i ] ;
39971: LD_ADDR_VAR 0 5
39975: PUSH
39976: LD_VAR 0 2
39980: PUSH
39981: LD_VAR 0 3
39985: ARRAY
39986: ST_TO_ADDR
// end ;
39987: GO 39896
39989: POP
39990: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39991: LD_VAR 0 1
39995: PPUSH
39996: LD_VAR 0 5
40000: PPUSH
40001: CALL_OW 135
// end ;
40005: LD_VAR 0 2
40009: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40010: LD_INT 0
40012: PPUSH
40013: PPUSH
40014: PPUSH
40015: PPUSH
40016: PPUSH
40017: PPUSH
40018: PPUSH
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
40023: PPUSH
40024: PPUSH
// result := [ ] ;
40025: LD_ADDR_VAR 0 7
40029: PUSH
40030: EMPTY
40031: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40032: LD_VAR 0 1
40036: PPUSH
40037: CALL_OW 266
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: IN
40052: NOT
40053: IFFALSE 40057
// exit ;
40055: GO 41691
// if name then
40057: LD_VAR 0 3
40061: IFFALSE 40077
// SetBName ( base_dep , name ) ;
40063: LD_VAR 0 1
40067: PPUSH
40068: LD_VAR 0 3
40072: PPUSH
40073: CALL_OW 500
// base := GetBase ( base_dep ) ;
40077: LD_ADDR_VAR 0 15
40081: PUSH
40082: LD_VAR 0 1
40086: PPUSH
40087: CALL_OW 274
40091: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40092: LD_ADDR_VAR 0 16
40096: PUSH
40097: LD_VAR 0 1
40101: PPUSH
40102: CALL_OW 255
40106: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40107: LD_ADDR_VAR 0 17
40111: PUSH
40112: LD_VAR 0 1
40116: PPUSH
40117: CALL_OW 248
40121: ST_TO_ADDR
// if sources then
40122: LD_VAR 0 5
40126: IFFALSE 40173
// for i = 1 to 3 do
40128: LD_ADDR_VAR 0 8
40132: PUSH
40133: DOUBLE
40134: LD_INT 1
40136: DEC
40137: ST_TO_ADDR
40138: LD_INT 3
40140: PUSH
40141: FOR_TO
40142: IFFALSE 40171
// AddResourceType ( base , i , sources [ i ] ) ;
40144: LD_VAR 0 15
40148: PPUSH
40149: LD_VAR 0 8
40153: PPUSH
40154: LD_VAR 0 5
40158: PUSH
40159: LD_VAR 0 8
40163: ARRAY
40164: PPUSH
40165: CALL_OW 276
40169: GO 40141
40171: POP
40172: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40173: LD_ADDR_VAR 0 18
40177: PUSH
40178: LD_VAR 0 15
40182: PPUSH
40183: LD_VAR 0 2
40187: PPUSH
40188: LD_INT 1
40190: PPUSH
40191: CALL 39434 0 3
40195: ST_TO_ADDR
// InitHc ;
40196: CALL_OW 19
// InitUc ;
40200: CALL_OW 18
// uc_side := side ;
40204: LD_ADDR_OWVAR 20
40208: PUSH
40209: LD_VAR 0 16
40213: ST_TO_ADDR
// uc_nation := nation ;
40214: LD_ADDR_OWVAR 21
40218: PUSH
40219: LD_VAR 0 17
40223: ST_TO_ADDR
// if buildings then
40224: LD_VAR 0 18
40228: IFFALSE 41550
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40230: LD_ADDR_VAR 0 19
40234: PUSH
40235: LD_VAR 0 18
40239: PPUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 30
40245: PUSH
40246: LD_INT 29
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 30
40255: PUSH
40256: LD_INT 30
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: LIST
40267: PPUSH
40268: CALL_OW 72
40272: ST_TO_ADDR
// if tmp then
40273: LD_VAR 0 19
40277: IFFALSE 40325
// for i in tmp do
40279: LD_ADDR_VAR 0 8
40283: PUSH
40284: LD_VAR 0 19
40288: PUSH
40289: FOR_IN
40290: IFFALSE 40323
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40292: LD_VAR 0 8
40296: PPUSH
40297: CALL_OW 250
40301: PPUSH
40302: LD_VAR 0 8
40306: PPUSH
40307: CALL_OW 251
40311: PPUSH
40312: LD_VAR 0 16
40316: PPUSH
40317: CALL_OW 441
40321: GO 40289
40323: POP
40324: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40325: LD_VAR 0 18
40329: PPUSH
40330: LD_INT 2
40332: PUSH
40333: LD_INT 30
40335: PUSH
40336: LD_INT 32
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 30
40345: PUSH
40346: LD_INT 33
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: LIST
40357: PPUSH
40358: CALL_OW 72
40362: IFFALSE 40450
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40364: LD_ADDR_VAR 0 8
40368: PUSH
40369: LD_VAR 0 18
40373: PPUSH
40374: LD_INT 2
40376: PUSH
40377: LD_INT 30
40379: PUSH
40380: LD_INT 32
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 30
40389: PUSH
40390: LD_INT 33
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: LIST
40401: PPUSH
40402: CALL_OW 72
40406: PUSH
40407: FOR_IN
40408: IFFALSE 40448
// begin if not GetBWeapon ( i ) then
40410: LD_VAR 0 8
40414: PPUSH
40415: CALL_OW 269
40419: NOT
40420: IFFALSE 40446
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40422: LD_VAR 0 8
40426: PPUSH
40427: LD_VAR 0 8
40431: PPUSH
40432: LD_VAR 0 2
40436: PPUSH
40437: CALL 41696 0 2
40441: PPUSH
40442: CALL_OW 431
// end ;
40446: GO 40407
40448: POP
40449: POP
// end ; for i = 1 to personel do
40450: LD_ADDR_VAR 0 8
40454: PUSH
40455: DOUBLE
40456: LD_INT 1
40458: DEC
40459: ST_TO_ADDR
40460: LD_VAR 0 6
40464: PUSH
40465: FOR_TO
40466: IFFALSE 41530
// begin if i > 4 then
40468: LD_VAR 0 8
40472: PUSH
40473: LD_INT 4
40475: GREATER
40476: IFFALSE 40480
// break ;
40478: GO 41530
// case i of 1 :
40480: LD_VAR 0 8
40484: PUSH
40485: LD_INT 1
40487: DOUBLE
40488: EQUAL
40489: IFTRUE 40493
40491: GO 40573
40493: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40494: LD_ADDR_VAR 0 12
40498: PUSH
40499: LD_VAR 0 18
40503: PPUSH
40504: LD_INT 22
40506: PUSH
40507: LD_VAR 0 16
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 58
40518: PUSH
40519: EMPTY
40520: LIST
40521: PUSH
40522: LD_INT 2
40524: PUSH
40525: LD_INT 30
40527: PUSH
40528: LD_INT 32
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 30
40537: PUSH
40538: LD_INT 4
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 30
40547: PUSH
40548: LD_INT 5
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: LIST
40565: PPUSH
40566: CALL_OW 72
40570: ST_TO_ADDR
40571: GO 40795
40573: LD_INT 2
40575: DOUBLE
40576: EQUAL
40577: IFTRUE 40581
40579: GO 40643
40581: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40582: LD_ADDR_VAR 0 12
40586: PUSH
40587: LD_VAR 0 18
40591: PPUSH
40592: LD_INT 22
40594: PUSH
40595: LD_VAR 0 16
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 2
40606: PUSH
40607: LD_INT 30
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 30
40619: PUSH
40620: LD_INT 1
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: LIST
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PPUSH
40636: CALL_OW 72
40640: ST_TO_ADDR
40641: GO 40795
40643: LD_INT 3
40645: DOUBLE
40646: EQUAL
40647: IFTRUE 40651
40649: GO 40713
40651: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40652: LD_ADDR_VAR 0 12
40656: PUSH
40657: LD_VAR 0 18
40661: PPUSH
40662: LD_INT 22
40664: PUSH
40665: LD_VAR 0 16
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 2
40676: PUSH
40677: LD_INT 30
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 30
40689: PUSH
40690: LD_INT 3
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: LIST
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PPUSH
40706: CALL_OW 72
40710: ST_TO_ADDR
40711: GO 40795
40713: LD_INT 4
40715: DOUBLE
40716: EQUAL
40717: IFTRUE 40721
40719: GO 40794
40721: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40722: LD_ADDR_VAR 0 12
40726: PUSH
40727: LD_VAR 0 18
40731: PPUSH
40732: LD_INT 22
40734: PUSH
40735: LD_VAR 0 16
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 2
40746: PUSH
40747: LD_INT 30
40749: PUSH
40750: LD_INT 6
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 30
40759: PUSH
40760: LD_INT 7
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 30
40769: PUSH
40770: LD_INT 8
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PPUSH
40787: CALL_OW 72
40791: ST_TO_ADDR
40792: GO 40795
40794: POP
// if i = 1 then
40795: LD_VAR 0 8
40799: PUSH
40800: LD_INT 1
40802: EQUAL
40803: IFFALSE 40914
// begin tmp := [ ] ;
40805: LD_ADDR_VAR 0 19
40809: PUSH
40810: EMPTY
40811: ST_TO_ADDR
// for j in f do
40812: LD_ADDR_VAR 0 9
40816: PUSH
40817: LD_VAR 0 12
40821: PUSH
40822: FOR_IN
40823: IFFALSE 40896
// if GetBType ( j ) = b_bunker then
40825: LD_VAR 0 9
40829: PPUSH
40830: CALL_OW 266
40834: PUSH
40835: LD_INT 32
40837: EQUAL
40838: IFFALSE 40865
// tmp := Insert ( tmp , 1 , j ) else
40840: LD_ADDR_VAR 0 19
40844: PUSH
40845: LD_VAR 0 19
40849: PPUSH
40850: LD_INT 1
40852: PPUSH
40853: LD_VAR 0 9
40857: PPUSH
40858: CALL_OW 2
40862: ST_TO_ADDR
40863: GO 40894
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40865: LD_ADDR_VAR 0 19
40869: PUSH
40870: LD_VAR 0 19
40874: PPUSH
40875: LD_VAR 0 19
40879: PUSH
40880: LD_INT 1
40882: PLUS
40883: PPUSH
40884: LD_VAR 0 9
40888: PPUSH
40889: CALL_OW 2
40893: ST_TO_ADDR
40894: GO 40822
40896: POP
40897: POP
// if tmp then
40898: LD_VAR 0 19
40902: IFFALSE 40914
// f := tmp ;
40904: LD_ADDR_VAR 0 12
40908: PUSH
40909: LD_VAR 0 19
40913: ST_TO_ADDR
// end ; x := personel [ i ] ;
40914: LD_ADDR_VAR 0 13
40918: PUSH
40919: LD_VAR 0 6
40923: PUSH
40924: LD_VAR 0 8
40928: ARRAY
40929: ST_TO_ADDR
// if x = - 1 then
40930: LD_VAR 0 13
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: EQUAL
40939: IFFALSE 41148
// begin for j in f do
40941: LD_ADDR_VAR 0 9
40945: PUSH
40946: LD_VAR 0 12
40950: PUSH
40951: FOR_IN
40952: IFFALSE 41144
// repeat InitHc ;
40954: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40958: LD_VAR 0 9
40962: PPUSH
40963: CALL_OW 266
40967: PUSH
40968: LD_INT 5
40970: EQUAL
40971: IFFALSE 41041
// begin if UnitsInside ( j ) < 3 then
40973: LD_VAR 0 9
40977: PPUSH
40978: CALL_OW 313
40982: PUSH
40983: LD_INT 3
40985: LESS
40986: IFFALSE 41022
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40988: LD_INT 0
40990: PPUSH
40991: LD_INT 5
40993: PUSH
40994: LD_INT 8
40996: PUSH
40997: LD_INT 9
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: LIST
41004: PUSH
41005: LD_VAR 0 17
41009: ARRAY
41010: PPUSH
41011: LD_VAR 0 4
41015: PPUSH
41016: CALL_OW 380
41020: GO 41039
// PrepareHuman ( false , i , skill ) ;
41022: LD_INT 0
41024: PPUSH
41025: LD_VAR 0 8
41029: PPUSH
41030: LD_VAR 0 4
41034: PPUSH
41035: CALL_OW 380
// end else
41039: GO 41058
// PrepareHuman ( false , i , skill ) ;
41041: LD_INT 0
41043: PPUSH
41044: LD_VAR 0 8
41048: PPUSH
41049: LD_VAR 0 4
41053: PPUSH
41054: CALL_OW 380
// un := CreateHuman ;
41058: LD_ADDR_VAR 0 14
41062: PUSH
41063: CALL_OW 44
41067: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41068: LD_ADDR_VAR 0 7
41072: PUSH
41073: LD_VAR 0 7
41077: PPUSH
41078: LD_INT 1
41080: PPUSH
41081: LD_VAR 0 14
41085: PPUSH
41086: CALL_OW 2
41090: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41091: LD_VAR 0 14
41095: PPUSH
41096: LD_VAR 0 9
41100: PPUSH
41101: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41105: LD_VAR 0 9
41109: PPUSH
41110: CALL_OW 313
41114: PUSH
41115: LD_INT 6
41117: EQUAL
41118: PUSH
41119: LD_VAR 0 9
41123: PPUSH
41124: CALL_OW 266
41128: PUSH
41129: LD_INT 32
41131: PUSH
41132: LD_INT 31
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: IN
41139: OR
41140: IFFALSE 40954
41142: GO 40951
41144: POP
41145: POP
// end else
41146: GO 41528
// for j = 1 to x do
41148: LD_ADDR_VAR 0 9
41152: PUSH
41153: DOUBLE
41154: LD_INT 1
41156: DEC
41157: ST_TO_ADDR
41158: LD_VAR 0 13
41162: PUSH
41163: FOR_TO
41164: IFFALSE 41526
// begin InitHc ;
41166: CALL_OW 19
// if not f then
41170: LD_VAR 0 12
41174: NOT
41175: IFFALSE 41264
// begin PrepareHuman ( false , i , skill ) ;
41177: LD_INT 0
41179: PPUSH
41180: LD_VAR 0 8
41184: PPUSH
41185: LD_VAR 0 4
41189: PPUSH
41190: CALL_OW 380
// un := CreateHuman ;
41194: LD_ADDR_VAR 0 14
41198: PUSH
41199: CALL_OW 44
41203: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41204: LD_ADDR_VAR 0 7
41208: PUSH
41209: LD_VAR 0 7
41213: PPUSH
41214: LD_INT 1
41216: PPUSH
41217: LD_VAR 0 14
41221: PPUSH
41222: CALL_OW 2
41226: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41227: LD_VAR 0 14
41231: PPUSH
41232: LD_VAR 0 1
41236: PPUSH
41237: CALL_OW 250
41241: PPUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: CALL_OW 251
41251: PPUSH
41252: LD_INT 10
41254: PPUSH
41255: LD_INT 0
41257: PPUSH
41258: CALL_OW 50
// continue ;
41262: GO 41163
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41264: LD_VAR 0 12
41268: PUSH
41269: LD_INT 1
41271: ARRAY
41272: PPUSH
41273: CALL_OW 313
41277: PUSH
41278: LD_VAR 0 12
41282: PUSH
41283: LD_INT 1
41285: ARRAY
41286: PPUSH
41287: CALL_OW 266
41291: PUSH
41292: LD_INT 32
41294: PUSH
41295: LD_INT 31
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: IN
41302: AND
41303: PUSH
41304: LD_VAR 0 12
41308: PUSH
41309: LD_INT 1
41311: ARRAY
41312: PPUSH
41313: CALL_OW 313
41317: PUSH
41318: LD_INT 6
41320: EQUAL
41321: OR
41322: IFFALSE 41342
// f := Delete ( f , 1 ) ;
41324: LD_ADDR_VAR 0 12
41328: PUSH
41329: LD_VAR 0 12
41333: PPUSH
41334: LD_INT 1
41336: PPUSH
41337: CALL_OW 3
41341: ST_TO_ADDR
// if not f then
41342: LD_VAR 0 12
41346: NOT
41347: IFFALSE 41365
// begin x := x + 2 ;
41349: LD_ADDR_VAR 0 13
41353: PUSH
41354: LD_VAR 0 13
41358: PUSH
41359: LD_INT 2
41361: PLUS
41362: ST_TO_ADDR
// continue ;
41363: GO 41163
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41365: LD_VAR 0 12
41369: PUSH
41370: LD_INT 1
41372: ARRAY
41373: PPUSH
41374: CALL_OW 266
41378: PUSH
41379: LD_INT 5
41381: EQUAL
41382: IFFALSE 41456
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41384: LD_VAR 0 12
41388: PUSH
41389: LD_INT 1
41391: ARRAY
41392: PPUSH
41393: CALL_OW 313
41397: PUSH
41398: LD_INT 3
41400: LESS
41401: IFFALSE 41437
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41403: LD_INT 0
41405: PPUSH
41406: LD_INT 5
41408: PUSH
41409: LD_INT 8
41411: PUSH
41412: LD_INT 9
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: LIST
41419: PUSH
41420: LD_VAR 0 17
41424: ARRAY
41425: PPUSH
41426: LD_VAR 0 4
41430: PPUSH
41431: CALL_OW 380
41435: GO 41454
// PrepareHuman ( false , i , skill ) ;
41437: LD_INT 0
41439: PPUSH
41440: LD_VAR 0 8
41444: PPUSH
41445: LD_VAR 0 4
41449: PPUSH
41450: CALL_OW 380
// end else
41454: GO 41473
// PrepareHuman ( false , i , skill ) ;
41456: LD_INT 0
41458: PPUSH
41459: LD_VAR 0 8
41463: PPUSH
41464: LD_VAR 0 4
41468: PPUSH
41469: CALL_OW 380
// un := CreateHuman ;
41473: LD_ADDR_VAR 0 14
41477: PUSH
41478: CALL_OW 44
41482: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41483: LD_ADDR_VAR 0 7
41487: PUSH
41488: LD_VAR 0 7
41492: PPUSH
41493: LD_INT 1
41495: PPUSH
41496: LD_VAR 0 14
41500: PPUSH
41501: CALL_OW 2
41505: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41506: LD_VAR 0 14
41510: PPUSH
41511: LD_VAR 0 12
41515: PUSH
41516: LD_INT 1
41518: ARRAY
41519: PPUSH
41520: CALL_OW 52
// end ;
41524: GO 41163
41526: POP
41527: POP
// end ;
41528: GO 40465
41530: POP
41531: POP
// result := result ^ buildings ;
41532: LD_ADDR_VAR 0 7
41536: PUSH
41537: LD_VAR 0 7
41541: PUSH
41542: LD_VAR 0 18
41546: ADD
41547: ST_TO_ADDR
// end else
41548: GO 41691
// begin for i = 1 to personel do
41550: LD_ADDR_VAR 0 8
41554: PUSH
41555: DOUBLE
41556: LD_INT 1
41558: DEC
41559: ST_TO_ADDR
41560: LD_VAR 0 6
41564: PUSH
41565: FOR_TO
41566: IFFALSE 41689
// begin if i > 4 then
41568: LD_VAR 0 8
41572: PUSH
41573: LD_INT 4
41575: GREATER
41576: IFFALSE 41580
// break ;
41578: GO 41689
// x := personel [ i ] ;
41580: LD_ADDR_VAR 0 13
41584: PUSH
41585: LD_VAR 0 6
41589: PUSH
41590: LD_VAR 0 8
41594: ARRAY
41595: ST_TO_ADDR
// if x = - 1 then
41596: LD_VAR 0 13
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: EQUAL
41605: IFFALSE 41609
// continue ;
41607: GO 41565
// PrepareHuman ( false , i , skill ) ;
41609: LD_INT 0
41611: PPUSH
41612: LD_VAR 0 8
41616: PPUSH
41617: LD_VAR 0 4
41621: PPUSH
41622: CALL_OW 380
// un := CreateHuman ;
41626: LD_ADDR_VAR 0 14
41630: PUSH
41631: CALL_OW 44
41635: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41636: LD_VAR 0 14
41640: PPUSH
41641: LD_VAR 0 1
41645: PPUSH
41646: CALL_OW 250
41650: PPUSH
41651: LD_VAR 0 1
41655: PPUSH
41656: CALL_OW 251
41660: PPUSH
41661: LD_INT 10
41663: PPUSH
41664: LD_INT 0
41666: PPUSH
41667: CALL_OW 50
// result := result ^ un ;
41671: LD_ADDR_VAR 0 7
41675: PUSH
41676: LD_VAR 0 7
41680: PUSH
41681: LD_VAR 0 14
41685: ADD
41686: ST_TO_ADDR
// end ;
41687: GO 41565
41689: POP
41690: POP
// end ; end ;
41691: LD_VAR 0 7
41695: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41696: LD_INT 0
41698: PPUSH
41699: PPUSH
41700: PPUSH
41701: PPUSH
41702: PPUSH
41703: PPUSH
41704: PPUSH
41705: PPUSH
41706: PPUSH
41707: PPUSH
41708: PPUSH
41709: PPUSH
41710: PPUSH
41711: PPUSH
41712: PPUSH
41713: PPUSH
// result := false ;
41714: LD_ADDR_VAR 0 3
41718: PUSH
41719: LD_INT 0
41721: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41722: LD_VAR 0 1
41726: NOT
41727: PUSH
41728: LD_VAR 0 1
41732: PPUSH
41733: CALL_OW 266
41737: PUSH
41738: LD_INT 32
41740: PUSH
41741: LD_INT 33
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: IN
41748: NOT
41749: OR
41750: IFFALSE 41754
// exit ;
41752: GO 42863
// nat := GetNation ( tower ) ;
41754: LD_ADDR_VAR 0 12
41758: PUSH
41759: LD_VAR 0 1
41763: PPUSH
41764: CALL_OW 248
41768: ST_TO_ADDR
// side := GetSide ( tower ) ;
41769: LD_ADDR_VAR 0 16
41773: PUSH
41774: LD_VAR 0 1
41778: PPUSH
41779: CALL_OW 255
41783: ST_TO_ADDR
// x := GetX ( tower ) ;
41784: LD_ADDR_VAR 0 10
41788: PUSH
41789: LD_VAR 0 1
41793: PPUSH
41794: CALL_OW 250
41798: ST_TO_ADDR
// y := GetY ( tower ) ;
41799: LD_ADDR_VAR 0 11
41803: PUSH
41804: LD_VAR 0 1
41808: PPUSH
41809: CALL_OW 251
41813: ST_TO_ADDR
// if not x or not y then
41814: LD_VAR 0 10
41818: NOT
41819: PUSH
41820: LD_VAR 0 11
41824: NOT
41825: OR
41826: IFFALSE 41830
// exit ;
41828: GO 42863
// weapon := 0 ;
41830: LD_ADDR_VAR 0 18
41834: PUSH
41835: LD_INT 0
41837: ST_TO_ADDR
// fac_list := [ ] ;
41838: LD_ADDR_VAR 0 17
41842: PUSH
41843: EMPTY
41844: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41845: LD_ADDR_VAR 0 6
41849: PUSH
41850: LD_VAR 0 1
41854: PPUSH
41855: CALL_OW 274
41859: PPUSH
41860: LD_VAR 0 2
41864: PPUSH
41865: LD_INT 0
41867: PPUSH
41868: CALL 39434 0 3
41872: PPUSH
41873: LD_INT 30
41875: PUSH
41876: LD_INT 3
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PPUSH
41883: CALL_OW 72
41887: ST_TO_ADDR
// if not factories then
41888: LD_VAR 0 6
41892: NOT
41893: IFFALSE 41897
// exit ;
41895: GO 42863
// for i in factories do
41897: LD_ADDR_VAR 0 8
41901: PUSH
41902: LD_VAR 0 6
41906: PUSH
41907: FOR_IN
41908: IFFALSE 41933
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41910: LD_ADDR_VAR 0 17
41914: PUSH
41915: LD_VAR 0 17
41919: PUSH
41920: LD_VAR 0 8
41924: PPUSH
41925: CALL_OW 478
41929: UNION
41930: ST_TO_ADDR
41931: GO 41907
41933: POP
41934: POP
// if not fac_list then
41935: LD_VAR 0 17
41939: NOT
41940: IFFALSE 41944
// exit ;
41942: GO 42863
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41944: LD_ADDR_VAR 0 5
41948: PUSH
41949: LD_INT 4
41951: PUSH
41952: LD_INT 5
41954: PUSH
41955: LD_INT 9
41957: PUSH
41958: LD_INT 10
41960: PUSH
41961: LD_INT 6
41963: PUSH
41964: LD_INT 7
41966: PUSH
41967: LD_INT 11
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 27
41981: PUSH
41982: LD_INT 28
41984: PUSH
41985: LD_INT 26
41987: PUSH
41988: LD_INT 30
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 43
41999: PUSH
42000: LD_INT 44
42002: PUSH
42003: LD_INT 46
42005: PUSH
42006: LD_INT 45
42008: PUSH
42009: LD_INT 47
42011: PUSH
42012: LD_INT 49
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: LIST
42027: PUSH
42028: LD_VAR 0 12
42032: ARRAY
42033: ST_TO_ADDR
// list := list isect fac_list ;
42034: LD_ADDR_VAR 0 5
42038: PUSH
42039: LD_VAR 0 5
42043: PUSH
42044: LD_VAR 0 17
42048: ISECT
42049: ST_TO_ADDR
// if not list then
42050: LD_VAR 0 5
42054: NOT
42055: IFFALSE 42059
// exit ;
42057: GO 42863
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42059: LD_VAR 0 12
42063: PUSH
42064: LD_INT 3
42066: EQUAL
42067: PUSH
42068: LD_INT 49
42070: PUSH
42071: LD_VAR 0 5
42075: IN
42076: AND
42077: PUSH
42078: LD_INT 31
42080: PPUSH
42081: LD_VAR 0 16
42085: PPUSH
42086: CALL_OW 321
42090: PUSH
42091: LD_INT 2
42093: EQUAL
42094: AND
42095: IFFALSE 42155
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42097: LD_INT 22
42099: PUSH
42100: LD_VAR 0 16
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 35
42111: PUSH
42112: LD_INT 49
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 91
42121: PUSH
42122: LD_VAR 0 1
42126: PUSH
42127: LD_INT 10
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: LIST
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: LIST
42139: PPUSH
42140: CALL_OW 69
42144: NOT
42145: IFFALSE 42155
// weapon := ru_time_lapser ;
42147: LD_ADDR_VAR 0 18
42151: PUSH
42152: LD_INT 49
42154: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42155: LD_VAR 0 12
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: IN
42170: PUSH
42171: LD_INT 11
42173: PUSH
42174: LD_VAR 0 5
42178: IN
42179: PUSH
42180: LD_INT 30
42182: PUSH
42183: LD_VAR 0 5
42187: IN
42188: OR
42189: AND
42190: PUSH
42191: LD_INT 6
42193: PPUSH
42194: LD_VAR 0 16
42198: PPUSH
42199: CALL_OW 321
42203: PUSH
42204: LD_INT 2
42206: EQUAL
42207: AND
42208: IFFALSE 42373
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42210: LD_INT 22
42212: PUSH
42213: LD_VAR 0 16
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 2
42224: PUSH
42225: LD_INT 35
42227: PUSH
42228: LD_INT 11
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 35
42237: PUSH
42238: LD_INT 30
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 91
42252: PUSH
42253: LD_VAR 0 1
42257: PUSH
42258: LD_INT 18
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: LIST
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: LIST
42270: PPUSH
42271: CALL_OW 69
42275: NOT
42276: PUSH
42277: LD_INT 22
42279: PUSH
42280: LD_VAR 0 16
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: PUSH
42292: LD_INT 30
42294: PUSH
42295: LD_INT 32
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 30
42304: PUSH
42305: LD_INT 33
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 91
42319: PUSH
42320: LD_VAR 0 1
42324: PUSH
42325: LD_INT 12
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: LIST
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: LIST
42337: PUSH
42338: EMPTY
42339: LIST
42340: PPUSH
42341: CALL_OW 69
42345: PUSH
42346: LD_INT 2
42348: GREATER
42349: AND
42350: IFFALSE 42373
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42352: LD_ADDR_VAR 0 18
42356: PUSH
42357: LD_INT 11
42359: PUSH
42360: LD_INT 30
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_VAR 0 12
42371: ARRAY
42372: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42373: LD_VAR 0 18
42377: NOT
42378: PUSH
42379: LD_INT 40
42381: PPUSH
42382: LD_VAR 0 16
42386: PPUSH
42387: CALL_OW 321
42391: PUSH
42392: LD_INT 2
42394: EQUAL
42395: AND
42396: PUSH
42397: LD_INT 7
42399: PUSH
42400: LD_VAR 0 5
42404: IN
42405: PUSH
42406: LD_INT 28
42408: PUSH
42409: LD_VAR 0 5
42413: IN
42414: OR
42415: PUSH
42416: LD_INT 45
42418: PUSH
42419: LD_VAR 0 5
42423: IN
42424: OR
42425: AND
42426: IFFALSE 42680
// begin hex := GetHexInfo ( x , y ) ;
42428: LD_ADDR_VAR 0 4
42432: PUSH
42433: LD_VAR 0 10
42437: PPUSH
42438: LD_VAR 0 11
42442: PPUSH
42443: CALL_OW 546
42447: ST_TO_ADDR
// if hex [ 1 ] then
42448: LD_VAR 0 4
42452: PUSH
42453: LD_INT 1
42455: ARRAY
42456: IFFALSE 42460
// exit ;
42458: GO 42863
// height := hex [ 2 ] ;
42460: LD_ADDR_VAR 0 15
42464: PUSH
42465: LD_VAR 0 4
42469: PUSH
42470: LD_INT 2
42472: ARRAY
42473: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42474: LD_ADDR_VAR 0 14
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: LD_INT 2
42484: PUSH
42485: LD_INT 3
42487: PUSH
42488: LD_INT 5
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: ST_TO_ADDR
// for i in tmp do
42497: LD_ADDR_VAR 0 8
42501: PUSH
42502: LD_VAR 0 14
42506: PUSH
42507: FOR_IN
42508: IFFALSE 42678
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42510: LD_ADDR_VAR 0 9
42514: PUSH
42515: LD_VAR 0 10
42519: PPUSH
42520: LD_VAR 0 8
42524: PPUSH
42525: LD_INT 5
42527: PPUSH
42528: CALL_OW 272
42532: PUSH
42533: LD_VAR 0 11
42537: PPUSH
42538: LD_VAR 0 8
42542: PPUSH
42543: LD_INT 5
42545: PPUSH
42546: CALL_OW 273
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42555: LD_VAR 0 9
42559: PUSH
42560: LD_INT 1
42562: ARRAY
42563: PPUSH
42564: LD_VAR 0 9
42568: PUSH
42569: LD_INT 2
42571: ARRAY
42572: PPUSH
42573: CALL_OW 488
42577: IFFALSE 42676
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42579: LD_ADDR_VAR 0 4
42583: PUSH
42584: LD_VAR 0 9
42588: PUSH
42589: LD_INT 1
42591: ARRAY
42592: PPUSH
42593: LD_VAR 0 9
42597: PUSH
42598: LD_INT 2
42600: ARRAY
42601: PPUSH
42602: CALL_OW 546
42606: ST_TO_ADDR
// if hex [ 1 ] then
42607: LD_VAR 0 4
42611: PUSH
42612: LD_INT 1
42614: ARRAY
42615: IFFALSE 42619
// continue ;
42617: GO 42507
// h := hex [ 2 ] ;
42619: LD_ADDR_VAR 0 13
42623: PUSH
42624: LD_VAR 0 4
42628: PUSH
42629: LD_INT 2
42631: ARRAY
42632: ST_TO_ADDR
// if h + 7 < height then
42633: LD_VAR 0 13
42637: PUSH
42638: LD_INT 7
42640: PLUS
42641: PUSH
42642: LD_VAR 0 15
42646: LESS
42647: IFFALSE 42676
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42649: LD_ADDR_VAR 0 18
42653: PUSH
42654: LD_INT 7
42656: PUSH
42657: LD_INT 28
42659: PUSH
42660: LD_INT 45
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: LIST
42667: PUSH
42668: LD_VAR 0 12
42672: ARRAY
42673: ST_TO_ADDR
// break ;
42674: GO 42678
// end ; end ; end ;
42676: GO 42507
42678: POP
42679: POP
// end ; if not weapon then
42680: LD_VAR 0 18
42684: NOT
42685: IFFALSE 42745
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42687: LD_ADDR_VAR 0 5
42691: PUSH
42692: LD_VAR 0 5
42696: PUSH
42697: LD_INT 11
42699: PUSH
42700: LD_INT 30
42702: PUSH
42703: LD_INT 49
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: LIST
42710: DIFF
42711: ST_TO_ADDR
// if not list then
42712: LD_VAR 0 5
42716: NOT
42717: IFFALSE 42721
// exit ;
42719: GO 42863
// weapon := list [ rand ( 1 , list ) ] ;
42721: LD_ADDR_VAR 0 18
42725: PUSH
42726: LD_VAR 0 5
42730: PUSH
42731: LD_INT 1
42733: PPUSH
42734: LD_VAR 0 5
42738: PPUSH
42739: CALL_OW 12
42743: ARRAY
42744: ST_TO_ADDR
// end ; if weapon then
42745: LD_VAR 0 18
42749: IFFALSE 42863
// begin tmp := CostOfWeapon ( weapon ) ;
42751: LD_ADDR_VAR 0 14
42755: PUSH
42756: LD_VAR 0 18
42760: PPUSH
42761: CALL_OW 451
42765: ST_TO_ADDR
// j := GetBase ( tower ) ;
42766: LD_ADDR_VAR 0 9
42770: PUSH
42771: LD_VAR 0 1
42775: PPUSH
42776: CALL_OW 274
42780: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42781: LD_VAR 0 9
42785: PPUSH
42786: LD_INT 1
42788: PPUSH
42789: CALL_OW 275
42793: PUSH
42794: LD_VAR 0 14
42798: PUSH
42799: LD_INT 1
42801: ARRAY
42802: GREATEREQUAL
42803: PUSH
42804: LD_VAR 0 9
42808: PPUSH
42809: LD_INT 2
42811: PPUSH
42812: CALL_OW 275
42816: PUSH
42817: LD_VAR 0 14
42821: PUSH
42822: LD_INT 2
42824: ARRAY
42825: GREATEREQUAL
42826: AND
42827: PUSH
42828: LD_VAR 0 9
42832: PPUSH
42833: LD_INT 3
42835: PPUSH
42836: CALL_OW 275
42840: PUSH
42841: LD_VAR 0 14
42845: PUSH
42846: LD_INT 3
42848: ARRAY
42849: GREATEREQUAL
42850: AND
42851: IFFALSE 42863
// result := weapon ;
42853: LD_ADDR_VAR 0 3
42857: PUSH
42858: LD_VAR 0 18
42862: ST_TO_ADDR
// end ; end ;
42863: LD_VAR 0 3
42867: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42868: LD_INT 0
42870: PPUSH
42871: PPUSH
// result := true ;
42872: LD_ADDR_VAR 0 3
42876: PUSH
42877: LD_INT 1
42879: ST_TO_ADDR
// if array1 = array2 then
42880: LD_VAR 0 1
42884: PUSH
42885: LD_VAR 0 2
42889: EQUAL
42890: IFFALSE 42950
// begin for i = 1 to array1 do
42892: LD_ADDR_VAR 0 4
42896: PUSH
42897: DOUBLE
42898: LD_INT 1
42900: DEC
42901: ST_TO_ADDR
42902: LD_VAR 0 1
42906: PUSH
42907: FOR_TO
42908: IFFALSE 42946
// if array1 [ i ] <> array2 [ i ] then
42910: LD_VAR 0 1
42914: PUSH
42915: LD_VAR 0 4
42919: ARRAY
42920: PUSH
42921: LD_VAR 0 2
42925: PUSH
42926: LD_VAR 0 4
42930: ARRAY
42931: NONEQUAL
42932: IFFALSE 42944
// begin result := false ;
42934: LD_ADDR_VAR 0 3
42938: PUSH
42939: LD_INT 0
42941: ST_TO_ADDR
// break ;
42942: GO 42946
// end ;
42944: GO 42907
42946: POP
42947: POP
// end else
42948: GO 42958
// result := false ;
42950: LD_ADDR_VAR 0 3
42954: PUSH
42955: LD_INT 0
42957: ST_TO_ADDR
// end ;
42958: LD_VAR 0 3
42962: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42963: LD_INT 0
42965: PPUSH
42966: PPUSH
// if not array1 or not array2 then
42967: LD_VAR 0 1
42971: NOT
42972: PUSH
42973: LD_VAR 0 2
42977: NOT
42978: OR
42979: IFFALSE 42983
// exit ;
42981: GO 43047
// result := true ;
42983: LD_ADDR_VAR 0 3
42987: PUSH
42988: LD_INT 1
42990: ST_TO_ADDR
// for i = 1 to array1 do
42991: LD_ADDR_VAR 0 4
42995: PUSH
42996: DOUBLE
42997: LD_INT 1
42999: DEC
43000: ST_TO_ADDR
43001: LD_VAR 0 1
43005: PUSH
43006: FOR_TO
43007: IFFALSE 43045
// if array1 [ i ] <> array2 [ i ] then
43009: LD_VAR 0 1
43013: PUSH
43014: LD_VAR 0 4
43018: ARRAY
43019: PUSH
43020: LD_VAR 0 2
43024: PUSH
43025: LD_VAR 0 4
43029: ARRAY
43030: NONEQUAL
43031: IFFALSE 43043
// begin result := false ;
43033: LD_ADDR_VAR 0 3
43037: PUSH
43038: LD_INT 0
43040: ST_TO_ADDR
// break ;
43041: GO 43045
// end ;
43043: GO 43006
43045: POP
43046: POP
// end ;
43047: LD_VAR 0 3
43051: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43052: LD_INT 0
43054: PPUSH
43055: PPUSH
43056: PPUSH
// pom := GetBase ( fac ) ;
43057: LD_ADDR_VAR 0 5
43061: PUSH
43062: LD_VAR 0 1
43066: PPUSH
43067: CALL_OW 274
43071: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43072: LD_ADDR_VAR 0 4
43076: PUSH
43077: LD_VAR 0 2
43081: PUSH
43082: LD_INT 1
43084: ARRAY
43085: PPUSH
43086: LD_VAR 0 2
43090: PUSH
43091: LD_INT 2
43093: ARRAY
43094: PPUSH
43095: LD_VAR 0 2
43099: PUSH
43100: LD_INT 3
43102: ARRAY
43103: PPUSH
43104: LD_VAR 0 2
43108: PUSH
43109: LD_INT 4
43111: ARRAY
43112: PPUSH
43113: CALL_OW 449
43117: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43118: LD_ADDR_VAR 0 3
43122: PUSH
43123: LD_VAR 0 5
43127: PPUSH
43128: LD_INT 1
43130: PPUSH
43131: CALL_OW 275
43135: PUSH
43136: LD_VAR 0 4
43140: PUSH
43141: LD_INT 1
43143: ARRAY
43144: GREATEREQUAL
43145: PUSH
43146: LD_VAR 0 5
43150: PPUSH
43151: LD_INT 2
43153: PPUSH
43154: CALL_OW 275
43158: PUSH
43159: LD_VAR 0 4
43163: PUSH
43164: LD_INT 2
43166: ARRAY
43167: GREATEREQUAL
43168: AND
43169: PUSH
43170: LD_VAR 0 5
43174: PPUSH
43175: LD_INT 3
43177: PPUSH
43178: CALL_OW 275
43182: PUSH
43183: LD_VAR 0 4
43187: PUSH
43188: LD_INT 3
43190: ARRAY
43191: GREATEREQUAL
43192: AND
43193: ST_TO_ADDR
// end ;
43194: LD_VAR 0 3
43198: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43199: LD_INT 0
43201: PPUSH
43202: PPUSH
43203: PPUSH
43204: PPUSH
// pom := GetBase ( building ) ;
43205: LD_ADDR_VAR 0 3
43209: PUSH
43210: LD_VAR 0 1
43214: PPUSH
43215: CALL_OW 274
43219: ST_TO_ADDR
// if not pom then
43220: LD_VAR 0 3
43224: NOT
43225: IFFALSE 43229
// exit ;
43227: GO 43399
// btype := GetBType ( building ) ;
43229: LD_ADDR_VAR 0 5
43233: PUSH
43234: LD_VAR 0 1
43238: PPUSH
43239: CALL_OW 266
43243: ST_TO_ADDR
// if btype = b_armoury then
43244: LD_VAR 0 5
43248: PUSH
43249: LD_INT 4
43251: EQUAL
43252: IFFALSE 43262
// btype := b_barracks ;
43254: LD_ADDR_VAR 0 5
43258: PUSH
43259: LD_INT 5
43261: ST_TO_ADDR
// if btype = b_depot then
43262: LD_VAR 0 5
43266: PUSH
43267: LD_INT 0
43269: EQUAL
43270: IFFALSE 43280
// btype := b_warehouse ;
43272: LD_ADDR_VAR 0 5
43276: PUSH
43277: LD_INT 1
43279: ST_TO_ADDR
// if btype = b_workshop then
43280: LD_VAR 0 5
43284: PUSH
43285: LD_INT 2
43287: EQUAL
43288: IFFALSE 43298
// btype := b_factory ;
43290: LD_ADDR_VAR 0 5
43294: PUSH
43295: LD_INT 3
43297: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43298: LD_ADDR_VAR 0 4
43302: PUSH
43303: LD_VAR 0 5
43307: PPUSH
43308: LD_VAR 0 1
43312: PPUSH
43313: CALL_OW 248
43317: PPUSH
43318: CALL_OW 450
43322: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43323: LD_ADDR_VAR 0 2
43327: PUSH
43328: LD_VAR 0 3
43332: PPUSH
43333: LD_INT 1
43335: PPUSH
43336: CALL_OW 275
43340: PUSH
43341: LD_VAR 0 4
43345: PUSH
43346: LD_INT 1
43348: ARRAY
43349: GREATEREQUAL
43350: PUSH
43351: LD_VAR 0 3
43355: PPUSH
43356: LD_INT 2
43358: PPUSH
43359: CALL_OW 275
43363: PUSH
43364: LD_VAR 0 4
43368: PUSH
43369: LD_INT 2
43371: ARRAY
43372: GREATEREQUAL
43373: AND
43374: PUSH
43375: LD_VAR 0 3
43379: PPUSH
43380: LD_INT 3
43382: PPUSH
43383: CALL_OW 275
43387: PUSH
43388: LD_VAR 0 4
43392: PUSH
43393: LD_INT 3
43395: ARRAY
43396: GREATEREQUAL
43397: AND
43398: ST_TO_ADDR
// end ;
43399: LD_VAR 0 2
43403: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43404: LD_INT 0
43406: PPUSH
43407: PPUSH
43408: PPUSH
// pom := GetBase ( building ) ;
43409: LD_ADDR_VAR 0 4
43413: PUSH
43414: LD_VAR 0 1
43418: PPUSH
43419: CALL_OW 274
43423: ST_TO_ADDR
// if not pom then
43424: LD_VAR 0 4
43428: NOT
43429: IFFALSE 43433
// exit ;
43431: GO 43534
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43433: LD_ADDR_VAR 0 5
43437: PUSH
43438: LD_VAR 0 2
43442: PPUSH
43443: LD_VAR 0 1
43447: PPUSH
43448: CALL_OW 248
43452: PPUSH
43453: CALL_OW 450
43457: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43458: LD_ADDR_VAR 0 3
43462: PUSH
43463: LD_VAR 0 4
43467: PPUSH
43468: LD_INT 1
43470: PPUSH
43471: CALL_OW 275
43475: PUSH
43476: LD_VAR 0 5
43480: PUSH
43481: LD_INT 1
43483: ARRAY
43484: GREATEREQUAL
43485: PUSH
43486: LD_VAR 0 4
43490: PPUSH
43491: LD_INT 2
43493: PPUSH
43494: CALL_OW 275
43498: PUSH
43499: LD_VAR 0 5
43503: PUSH
43504: LD_INT 2
43506: ARRAY
43507: GREATEREQUAL
43508: AND
43509: PUSH
43510: LD_VAR 0 4
43514: PPUSH
43515: LD_INT 3
43517: PPUSH
43518: CALL_OW 275
43522: PUSH
43523: LD_VAR 0 5
43527: PUSH
43528: LD_INT 3
43530: ARRAY
43531: GREATEREQUAL
43532: AND
43533: ST_TO_ADDR
// end ;
43534: LD_VAR 0 3
43538: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43539: LD_INT 0
43541: PPUSH
43542: PPUSH
43543: PPUSH
43544: PPUSH
43545: PPUSH
43546: PPUSH
43547: PPUSH
43548: PPUSH
43549: PPUSH
43550: PPUSH
43551: PPUSH
// result := false ;
43552: LD_ADDR_VAR 0 8
43556: PUSH
43557: LD_INT 0
43559: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43560: LD_VAR 0 5
43564: NOT
43565: PUSH
43566: LD_VAR 0 1
43570: NOT
43571: OR
43572: PUSH
43573: LD_VAR 0 2
43577: NOT
43578: OR
43579: PUSH
43580: LD_VAR 0 3
43584: NOT
43585: OR
43586: IFFALSE 43590
// exit ;
43588: GO 44404
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43590: LD_ADDR_VAR 0 14
43594: PUSH
43595: LD_VAR 0 1
43599: PPUSH
43600: LD_VAR 0 2
43604: PPUSH
43605: LD_VAR 0 3
43609: PPUSH
43610: LD_VAR 0 4
43614: PPUSH
43615: LD_VAR 0 5
43619: PUSH
43620: LD_INT 1
43622: ARRAY
43623: PPUSH
43624: CALL_OW 248
43628: PPUSH
43629: LD_INT 0
43631: PPUSH
43632: CALL 45657 0 6
43636: ST_TO_ADDR
// if not hexes then
43637: LD_VAR 0 14
43641: NOT
43642: IFFALSE 43646
// exit ;
43644: GO 44404
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43646: LD_ADDR_VAR 0 17
43650: PUSH
43651: LD_VAR 0 5
43655: PPUSH
43656: LD_INT 22
43658: PUSH
43659: LD_VAR 0 13
43663: PPUSH
43664: CALL_OW 255
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: PUSH
43676: LD_INT 30
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 30
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: LIST
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PPUSH
43705: CALL_OW 72
43709: ST_TO_ADDR
// for i = 1 to hexes do
43710: LD_ADDR_VAR 0 9
43714: PUSH
43715: DOUBLE
43716: LD_INT 1
43718: DEC
43719: ST_TO_ADDR
43720: LD_VAR 0 14
43724: PUSH
43725: FOR_TO
43726: IFFALSE 44402
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43728: LD_ADDR_VAR 0 13
43732: PUSH
43733: LD_VAR 0 14
43737: PUSH
43738: LD_VAR 0 9
43742: ARRAY
43743: PUSH
43744: LD_INT 1
43746: ARRAY
43747: PPUSH
43748: LD_VAR 0 14
43752: PUSH
43753: LD_VAR 0 9
43757: ARRAY
43758: PUSH
43759: LD_INT 2
43761: ARRAY
43762: PPUSH
43763: CALL_OW 428
43767: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43768: LD_VAR 0 14
43772: PUSH
43773: LD_VAR 0 9
43777: ARRAY
43778: PUSH
43779: LD_INT 1
43781: ARRAY
43782: PPUSH
43783: LD_VAR 0 14
43787: PUSH
43788: LD_VAR 0 9
43792: ARRAY
43793: PUSH
43794: LD_INT 2
43796: ARRAY
43797: PPUSH
43798: CALL_OW 351
43802: PUSH
43803: LD_VAR 0 14
43807: PUSH
43808: LD_VAR 0 9
43812: ARRAY
43813: PUSH
43814: LD_INT 1
43816: ARRAY
43817: PPUSH
43818: LD_VAR 0 14
43822: PUSH
43823: LD_VAR 0 9
43827: ARRAY
43828: PUSH
43829: LD_INT 2
43831: ARRAY
43832: PPUSH
43833: CALL_OW 488
43837: NOT
43838: OR
43839: PUSH
43840: LD_VAR 0 13
43844: PPUSH
43845: CALL_OW 247
43849: PUSH
43850: LD_INT 3
43852: EQUAL
43853: OR
43854: IFFALSE 43860
// exit ;
43856: POP
43857: POP
43858: GO 44404
// if not tmp then
43860: LD_VAR 0 13
43864: NOT
43865: IFFALSE 43869
// continue ;
43867: GO 43725
// result := true ;
43869: LD_ADDR_VAR 0 8
43873: PUSH
43874: LD_INT 1
43876: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43877: LD_VAR 0 6
43881: PUSH
43882: LD_VAR 0 13
43886: PPUSH
43887: CALL_OW 247
43891: PUSH
43892: LD_INT 2
43894: EQUAL
43895: AND
43896: PUSH
43897: LD_VAR 0 13
43901: PPUSH
43902: CALL_OW 263
43906: PUSH
43907: LD_INT 1
43909: EQUAL
43910: AND
43911: IFFALSE 44075
// begin if IsDrivenBy ( tmp ) then
43913: LD_VAR 0 13
43917: PPUSH
43918: CALL_OW 311
43922: IFFALSE 43926
// continue ;
43924: GO 43725
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43926: LD_VAR 0 6
43930: PPUSH
43931: LD_INT 3
43933: PUSH
43934: LD_INT 60
43936: PUSH
43937: EMPTY
43938: LIST
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 3
43946: PUSH
43947: LD_INT 55
43949: PUSH
43950: EMPTY
43951: LIST
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PPUSH
43961: CALL_OW 72
43965: IFFALSE 44073
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43967: LD_ADDR_VAR 0 18
43971: PUSH
43972: LD_VAR 0 6
43976: PPUSH
43977: LD_INT 3
43979: PUSH
43980: LD_INT 60
43982: PUSH
43983: EMPTY
43984: LIST
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 3
43992: PUSH
43993: LD_INT 55
43995: PUSH
43996: EMPTY
43997: LIST
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PPUSH
44007: CALL_OW 72
44011: PUSH
44012: LD_INT 1
44014: ARRAY
44015: ST_TO_ADDR
// if IsInUnit ( driver ) then
44016: LD_VAR 0 18
44020: PPUSH
44021: CALL_OW 310
44025: IFFALSE 44036
// ComExit ( driver ) ;
44027: LD_VAR 0 18
44031: PPUSH
44032: CALL 69438 0 1
// AddComEnterUnit ( driver , tmp ) ;
44036: LD_VAR 0 18
44040: PPUSH
44041: LD_VAR 0 13
44045: PPUSH
44046: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44050: LD_VAR 0 18
44054: PPUSH
44055: LD_VAR 0 7
44059: PPUSH
44060: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44064: LD_VAR 0 18
44068: PPUSH
44069: CALL_OW 181
// end ; continue ;
44073: GO 43725
// end ; if not cleaners or not tmp in cleaners then
44075: LD_VAR 0 6
44079: NOT
44080: PUSH
44081: LD_VAR 0 13
44085: PUSH
44086: LD_VAR 0 6
44090: IN
44091: NOT
44092: OR
44093: IFFALSE 44400
// begin if dep then
44095: LD_VAR 0 17
44099: IFFALSE 44235
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44101: LD_ADDR_VAR 0 16
44105: PUSH
44106: LD_VAR 0 17
44110: PUSH
44111: LD_INT 1
44113: ARRAY
44114: PPUSH
44115: CALL_OW 250
44119: PPUSH
44120: LD_VAR 0 17
44124: PUSH
44125: LD_INT 1
44127: ARRAY
44128: PPUSH
44129: CALL_OW 254
44133: PPUSH
44134: LD_INT 5
44136: PPUSH
44137: CALL_OW 272
44141: PUSH
44142: LD_VAR 0 17
44146: PUSH
44147: LD_INT 1
44149: ARRAY
44150: PPUSH
44151: CALL_OW 251
44155: PPUSH
44156: LD_VAR 0 17
44160: PUSH
44161: LD_INT 1
44163: ARRAY
44164: PPUSH
44165: CALL_OW 254
44169: PPUSH
44170: LD_INT 5
44172: PPUSH
44173: CALL_OW 273
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44182: LD_VAR 0 16
44186: PUSH
44187: LD_INT 1
44189: ARRAY
44190: PPUSH
44191: LD_VAR 0 16
44195: PUSH
44196: LD_INT 2
44198: ARRAY
44199: PPUSH
44200: CALL_OW 488
44204: IFFALSE 44235
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44206: LD_VAR 0 13
44210: PPUSH
44211: LD_VAR 0 16
44215: PUSH
44216: LD_INT 1
44218: ARRAY
44219: PPUSH
44220: LD_VAR 0 16
44224: PUSH
44225: LD_INT 2
44227: ARRAY
44228: PPUSH
44229: CALL_OW 111
// continue ;
44233: GO 43725
// end ; end ; r := GetDir ( tmp ) ;
44235: LD_ADDR_VAR 0 15
44239: PUSH
44240: LD_VAR 0 13
44244: PPUSH
44245: CALL_OW 254
44249: ST_TO_ADDR
// if r = 5 then
44250: LD_VAR 0 15
44254: PUSH
44255: LD_INT 5
44257: EQUAL
44258: IFFALSE 44268
// r := 0 ;
44260: LD_ADDR_VAR 0 15
44264: PUSH
44265: LD_INT 0
44267: ST_TO_ADDR
// for j = r to 5 do
44268: LD_ADDR_VAR 0 10
44272: PUSH
44273: DOUBLE
44274: LD_VAR 0 15
44278: DEC
44279: ST_TO_ADDR
44280: LD_INT 5
44282: PUSH
44283: FOR_TO
44284: IFFALSE 44398
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44286: LD_ADDR_VAR 0 11
44290: PUSH
44291: LD_VAR 0 13
44295: PPUSH
44296: CALL_OW 250
44300: PPUSH
44301: LD_VAR 0 10
44305: PPUSH
44306: LD_INT 2
44308: PPUSH
44309: CALL_OW 272
44313: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44314: LD_ADDR_VAR 0 12
44318: PUSH
44319: LD_VAR 0 13
44323: PPUSH
44324: CALL_OW 251
44328: PPUSH
44329: LD_VAR 0 10
44333: PPUSH
44334: LD_INT 2
44336: PPUSH
44337: CALL_OW 273
44341: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44342: LD_VAR 0 11
44346: PPUSH
44347: LD_VAR 0 12
44351: PPUSH
44352: CALL_OW 488
44356: PUSH
44357: LD_VAR 0 11
44361: PPUSH
44362: LD_VAR 0 12
44366: PPUSH
44367: CALL_OW 428
44371: NOT
44372: AND
44373: IFFALSE 44396
// begin ComMoveXY ( tmp , _x , _y ) ;
44375: LD_VAR 0 13
44379: PPUSH
44380: LD_VAR 0 11
44384: PPUSH
44385: LD_VAR 0 12
44389: PPUSH
44390: CALL_OW 111
// break ;
44394: GO 44398
// end ; end ;
44396: GO 44283
44398: POP
44399: POP
// end ; end ;
44400: GO 43725
44402: POP
44403: POP
// end ;
44404: LD_VAR 0 8
44408: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44409: LD_INT 0
44411: PPUSH
// result := true ;
44412: LD_ADDR_VAR 0 3
44416: PUSH
44417: LD_INT 1
44419: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44420: LD_VAR 0 2
44424: PUSH
44425: LD_INT 24
44427: DOUBLE
44428: EQUAL
44429: IFTRUE 44439
44431: LD_INT 33
44433: DOUBLE
44434: EQUAL
44435: IFTRUE 44439
44437: GO 44464
44439: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44440: LD_ADDR_VAR 0 3
44444: PUSH
44445: LD_INT 32
44447: PPUSH
44448: LD_VAR 0 1
44452: PPUSH
44453: CALL_OW 321
44457: PUSH
44458: LD_INT 2
44460: EQUAL
44461: ST_TO_ADDR
44462: GO 44780
44464: LD_INT 20
44466: DOUBLE
44467: EQUAL
44468: IFTRUE 44472
44470: GO 44497
44472: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44473: LD_ADDR_VAR 0 3
44477: PUSH
44478: LD_INT 6
44480: PPUSH
44481: LD_VAR 0 1
44485: PPUSH
44486: CALL_OW 321
44490: PUSH
44491: LD_INT 2
44493: EQUAL
44494: ST_TO_ADDR
44495: GO 44780
44497: LD_INT 22
44499: DOUBLE
44500: EQUAL
44501: IFTRUE 44511
44503: LD_INT 36
44505: DOUBLE
44506: EQUAL
44507: IFTRUE 44511
44509: GO 44536
44511: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44512: LD_ADDR_VAR 0 3
44516: PUSH
44517: LD_INT 15
44519: PPUSH
44520: LD_VAR 0 1
44524: PPUSH
44525: CALL_OW 321
44529: PUSH
44530: LD_INT 2
44532: EQUAL
44533: ST_TO_ADDR
44534: GO 44780
44536: LD_INT 30
44538: DOUBLE
44539: EQUAL
44540: IFTRUE 44544
44542: GO 44569
44544: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44545: LD_ADDR_VAR 0 3
44549: PUSH
44550: LD_INT 20
44552: PPUSH
44553: LD_VAR 0 1
44557: PPUSH
44558: CALL_OW 321
44562: PUSH
44563: LD_INT 2
44565: EQUAL
44566: ST_TO_ADDR
44567: GO 44780
44569: LD_INT 28
44571: DOUBLE
44572: EQUAL
44573: IFTRUE 44583
44575: LD_INT 21
44577: DOUBLE
44578: EQUAL
44579: IFTRUE 44583
44581: GO 44608
44583: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44584: LD_ADDR_VAR 0 3
44588: PUSH
44589: LD_INT 21
44591: PPUSH
44592: LD_VAR 0 1
44596: PPUSH
44597: CALL_OW 321
44601: PUSH
44602: LD_INT 2
44604: EQUAL
44605: ST_TO_ADDR
44606: GO 44780
44608: LD_INT 16
44610: DOUBLE
44611: EQUAL
44612: IFTRUE 44616
44614: GO 44641
44616: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44617: LD_ADDR_VAR 0 3
44621: PUSH
44622: LD_INT 84
44624: PPUSH
44625: LD_VAR 0 1
44629: PPUSH
44630: CALL_OW 321
44634: PUSH
44635: LD_INT 2
44637: EQUAL
44638: ST_TO_ADDR
44639: GO 44780
44641: LD_INT 19
44643: DOUBLE
44644: EQUAL
44645: IFTRUE 44655
44647: LD_INT 23
44649: DOUBLE
44650: EQUAL
44651: IFTRUE 44655
44653: GO 44680
44655: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44656: LD_ADDR_VAR 0 3
44660: PUSH
44661: LD_INT 83
44663: PPUSH
44664: LD_VAR 0 1
44668: PPUSH
44669: CALL_OW 321
44673: PUSH
44674: LD_INT 2
44676: EQUAL
44677: ST_TO_ADDR
44678: GO 44780
44680: LD_INT 17
44682: DOUBLE
44683: EQUAL
44684: IFTRUE 44688
44686: GO 44713
44688: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44689: LD_ADDR_VAR 0 3
44693: PUSH
44694: LD_INT 39
44696: PPUSH
44697: LD_VAR 0 1
44701: PPUSH
44702: CALL_OW 321
44706: PUSH
44707: LD_INT 2
44709: EQUAL
44710: ST_TO_ADDR
44711: GO 44780
44713: LD_INT 18
44715: DOUBLE
44716: EQUAL
44717: IFTRUE 44721
44719: GO 44746
44721: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44722: LD_ADDR_VAR 0 3
44726: PUSH
44727: LD_INT 40
44729: PPUSH
44730: LD_VAR 0 1
44734: PPUSH
44735: CALL_OW 321
44739: PUSH
44740: LD_INT 2
44742: EQUAL
44743: ST_TO_ADDR
44744: GO 44780
44746: LD_INT 27
44748: DOUBLE
44749: EQUAL
44750: IFTRUE 44754
44752: GO 44779
44754: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44755: LD_ADDR_VAR 0 3
44759: PUSH
44760: LD_INT 35
44762: PPUSH
44763: LD_VAR 0 1
44767: PPUSH
44768: CALL_OW 321
44772: PUSH
44773: LD_INT 2
44775: EQUAL
44776: ST_TO_ADDR
44777: GO 44780
44779: POP
// end ;
44780: LD_VAR 0 3
44784: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44785: LD_INT 0
44787: PPUSH
44788: PPUSH
44789: PPUSH
44790: PPUSH
44791: PPUSH
44792: PPUSH
44793: PPUSH
44794: PPUSH
44795: PPUSH
44796: PPUSH
44797: PPUSH
// result := false ;
44798: LD_ADDR_VAR 0 6
44802: PUSH
44803: LD_INT 0
44805: ST_TO_ADDR
// if btype = b_depot then
44806: LD_VAR 0 2
44810: PUSH
44811: LD_INT 0
44813: EQUAL
44814: IFFALSE 44826
// begin result := true ;
44816: LD_ADDR_VAR 0 6
44820: PUSH
44821: LD_INT 1
44823: ST_TO_ADDR
// exit ;
44824: GO 45652
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44826: LD_VAR 0 1
44830: NOT
44831: PUSH
44832: LD_VAR 0 1
44836: PPUSH
44837: CALL_OW 266
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: IN
44852: NOT
44853: OR
44854: PUSH
44855: LD_VAR 0 2
44859: NOT
44860: OR
44861: PUSH
44862: LD_VAR 0 5
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 3
44878: PUSH
44879: LD_INT 4
44881: PUSH
44882: LD_INT 5
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: IN
44893: NOT
44894: OR
44895: PUSH
44896: LD_VAR 0 3
44900: PPUSH
44901: LD_VAR 0 4
44905: PPUSH
44906: CALL_OW 488
44910: NOT
44911: OR
44912: IFFALSE 44916
// exit ;
44914: GO 45652
// side := GetSide ( depot ) ;
44916: LD_ADDR_VAR 0 9
44920: PUSH
44921: LD_VAR 0 1
44925: PPUSH
44926: CALL_OW 255
44930: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44931: LD_VAR 0 9
44935: PPUSH
44936: LD_VAR 0 2
44940: PPUSH
44941: CALL 44409 0 2
44945: NOT
44946: IFFALSE 44950
// exit ;
44948: GO 45652
// pom := GetBase ( depot ) ;
44950: LD_ADDR_VAR 0 10
44954: PUSH
44955: LD_VAR 0 1
44959: PPUSH
44960: CALL_OW 274
44964: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44965: LD_ADDR_VAR 0 11
44969: PUSH
44970: LD_VAR 0 2
44974: PPUSH
44975: LD_VAR 0 1
44979: PPUSH
44980: CALL_OW 248
44984: PPUSH
44985: CALL_OW 450
44989: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44990: LD_VAR 0 10
44994: PPUSH
44995: LD_INT 1
44997: PPUSH
44998: CALL_OW 275
45002: PUSH
45003: LD_VAR 0 11
45007: PUSH
45008: LD_INT 1
45010: ARRAY
45011: GREATEREQUAL
45012: PUSH
45013: LD_VAR 0 10
45017: PPUSH
45018: LD_INT 2
45020: PPUSH
45021: CALL_OW 275
45025: PUSH
45026: LD_VAR 0 11
45030: PUSH
45031: LD_INT 2
45033: ARRAY
45034: GREATEREQUAL
45035: AND
45036: PUSH
45037: LD_VAR 0 10
45041: PPUSH
45042: LD_INT 3
45044: PPUSH
45045: CALL_OW 275
45049: PUSH
45050: LD_VAR 0 11
45054: PUSH
45055: LD_INT 3
45057: ARRAY
45058: GREATEREQUAL
45059: AND
45060: NOT
45061: IFFALSE 45065
// exit ;
45063: GO 45652
// if GetBType ( depot ) = b_depot then
45065: LD_VAR 0 1
45069: PPUSH
45070: CALL_OW 266
45074: PUSH
45075: LD_INT 0
45077: EQUAL
45078: IFFALSE 45090
// dist := 28 else
45080: LD_ADDR_VAR 0 14
45084: PUSH
45085: LD_INT 28
45087: ST_TO_ADDR
45088: GO 45098
// dist := 36 ;
45090: LD_ADDR_VAR 0 14
45094: PUSH
45095: LD_INT 36
45097: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45098: LD_VAR 0 1
45102: PPUSH
45103: LD_VAR 0 3
45107: PPUSH
45108: LD_VAR 0 4
45112: PPUSH
45113: CALL_OW 297
45117: PUSH
45118: LD_VAR 0 14
45122: GREATER
45123: IFFALSE 45127
// exit ;
45125: GO 45652
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45127: LD_ADDR_VAR 0 12
45131: PUSH
45132: LD_VAR 0 2
45136: PPUSH
45137: LD_VAR 0 3
45141: PPUSH
45142: LD_VAR 0 4
45146: PPUSH
45147: LD_VAR 0 5
45151: PPUSH
45152: LD_VAR 0 1
45156: PPUSH
45157: CALL_OW 248
45161: PPUSH
45162: LD_INT 0
45164: PPUSH
45165: CALL 45657 0 6
45169: ST_TO_ADDR
// if not hexes then
45170: LD_VAR 0 12
45174: NOT
45175: IFFALSE 45179
// exit ;
45177: GO 45652
// hex := GetHexInfo ( x , y ) ;
45179: LD_ADDR_VAR 0 15
45183: PUSH
45184: LD_VAR 0 3
45188: PPUSH
45189: LD_VAR 0 4
45193: PPUSH
45194: CALL_OW 546
45198: ST_TO_ADDR
// if hex [ 1 ] then
45199: LD_VAR 0 15
45203: PUSH
45204: LD_INT 1
45206: ARRAY
45207: IFFALSE 45211
// exit ;
45209: GO 45652
// height := hex [ 2 ] ;
45211: LD_ADDR_VAR 0 13
45215: PUSH
45216: LD_VAR 0 15
45220: PUSH
45221: LD_INT 2
45223: ARRAY
45224: ST_TO_ADDR
// for i = 1 to hexes do
45225: LD_ADDR_VAR 0 7
45229: PUSH
45230: DOUBLE
45231: LD_INT 1
45233: DEC
45234: ST_TO_ADDR
45235: LD_VAR 0 12
45239: PUSH
45240: FOR_TO
45241: IFFALSE 45571
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45243: LD_VAR 0 12
45247: PUSH
45248: LD_VAR 0 7
45252: ARRAY
45253: PUSH
45254: LD_INT 1
45256: ARRAY
45257: PPUSH
45258: LD_VAR 0 12
45262: PUSH
45263: LD_VAR 0 7
45267: ARRAY
45268: PUSH
45269: LD_INT 2
45271: ARRAY
45272: PPUSH
45273: CALL_OW 488
45277: NOT
45278: PUSH
45279: LD_VAR 0 12
45283: PUSH
45284: LD_VAR 0 7
45288: ARRAY
45289: PUSH
45290: LD_INT 1
45292: ARRAY
45293: PPUSH
45294: LD_VAR 0 12
45298: PUSH
45299: LD_VAR 0 7
45303: ARRAY
45304: PUSH
45305: LD_INT 2
45307: ARRAY
45308: PPUSH
45309: CALL_OW 428
45313: PUSH
45314: LD_INT 0
45316: GREATER
45317: OR
45318: PUSH
45319: LD_VAR 0 12
45323: PUSH
45324: LD_VAR 0 7
45328: ARRAY
45329: PUSH
45330: LD_INT 1
45332: ARRAY
45333: PPUSH
45334: LD_VAR 0 12
45338: PUSH
45339: LD_VAR 0 7
45343: ARRAY
45344: PUSH
45345: LD_INT 2
45347: ARRAY
45348: PPUSH
45349: CALL_OW 351
45353: OR
45354: IFFALSE 45360
// exit ;
45356: POP
45357: POP
45358: GO 45652
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45360: LD_ADDR_VAR 0 8
45364: PUSH
45365: LD_VAR 0 12
45369: PUSH
45370: LD_VAR 0 7
45374: ARRAY
45375: PUSH
45376: LD_INT 1
45378: ARRAY
45379: PPUSH
45380: LD_VAR 0 12
45384: PUSH
45385: LD_VAR 0 7
45389: ARRAY
45390: PUSH
45391: LD_INT 2
45393: ARRAY
45394: PPUSH
45395: CALL_OW 546
45399: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45400: LD_VAR 0 8
45404: PUSH
45405: LD_INT 1
45407: ARRAY
45408: PUSH
45409: LD_VAR 0 8
45413: PUSH
45414: LD_INT 2
45416: ARRAY
45417: PUSH
45418: LD_VAR 0 13
45422: PUSH
45423: LD_INT 2
45425: PLUS
45426: GREATER
45427: OR
45428: PUSH
45429: LD_VAR 0 8
45433: PUSH
45434: LD_INT 2
45436: ARRAY
45437: PUSH
45438: LD_VAR 0 13
45442: PUSH
45443: LD_INT 2
45445: MINUS
45446: LESS
45447: OR
45448: PUSH
45449: LD_VAR 0 8
45453: PUSH
45454: LD_INT 3
45456: ARRAY
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: LD_INT 8
45463: PUSH
45464: LD_INT 9
45466: PUSH
45467: LD_INT 10
45469: PUSH
45470: LD_INT 11
45472: PUSH
45473: LD_INT 12
45475: PUSH
45476: LD_INT 13
45478: PUSH
45479: LD_INT 16
45481: PUSH
45482: LD_INT 17
45484: PUSH
45485: LD_INT 18
45487: PUSH
45488: LD_INT 19
45490: PUSH
45491: LD_INT 20
45493: PUSH
45494: LD_INT 21
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: IN
45512: NOT
45513: OR
45514: PUSH
45515: LD_VAR 0 8
45519: PUSH
45520: LD_INT 5
45522: ARRAY
45523: NOT
45524: OR
45525: PUSH
45526: LD_VAR 0 8
45530: PUSH
45531: LD_INT 6
45533: ARRAY
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: LD_INT 2
45540: PUSH
45541: LD_INT 7
45543: PUSH
45544: LD_INT 9
45546: PUSH
45547: LD_INT 10
45549: PUSH
45550: LD_INT 11
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: IN
45561: NOT
45562: OR
45563: IFFALSE 45569
// exit ;
45565: POP
45566: POP
45567: GO 45652
// end ;
45569: GO 45240
45571: POP
45572: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45573: LD_VAR 0 9
45577: PPUSH
45578: LD_VAR 0 3
45582: PPUSH
45583: LD_VAR 0 4
45587: PPUSH
45588: LD_INT 20
45590: PPUSH
45591: CALL 37575 0 4
45595: PUSH
45596: LD_INT 4
45598: ARRAY
45599: IFFALSE 45603
// exit ;
45601: GO 45652
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45603: LD_VAR 0 2
45607: PUSH
45608: LD_INT 29
45610: PUSH
45611: LD_INT 30
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: IN
45618: PUSH
45619: LD_VAR 0 3
45623: PPUSH
45624: LD_VAR 0 4
45628: PPUSH
45629: LD_VAR 0 9
45633: PPUSH
45634: CALL_OW 440
45638: NOT
45639: AND
45640: IFFALSE 45644
// exit ;
45642: GO 45652
// result := true ;
45644: LD_ADDR_VAR 0 6
45648: PUSH
45649: LD_INT 1
45651: ST_TO_ADDR
// end ;
45652: LD_VAR 0 6
45656: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45657: LD_INT 0
45659: PPUSH
45660: PPUSH
45661: PPUSH
45662: PPUSH
45663: PPUSH
45664: PPUSH
45665: PPUSH
45666: PPUSH
45667: PPUSH
45668: PPUSH
45669: PPUSH
45670: PPUSH
45671: PPUSH
45672: PPUSH
45673: PPUSH
45674: PPUSH
45675: PPUSH
45676: PPUSH
45677: PPUSH
45678: PPUSH
45679: PPUSH
45680: PPUSH
45681: PPUSH
45682: PPUSH
45683: PPUSH
45684: PPUSH
45685: PPUSH
45686: PPUSH
45687: PPUSH
45688: PPUSH
45689: PPUSH
45690: PPUSH
45691: PPUSH
45692: PPUSH
45693: PPUSH
45694: PPUSH
45695: PPUSH
45696: PPUSH
45697: PPUSH
45698: PPUSH
45699: PPUSH
45700: PPUSH
45701: PPUSH
45702: PPUSH
45703: PPUSH
45704: PPUSH
45705: PPUSH
45706: PPUSH
45707: PPUSH
45708: PPUSH
45709: PPUSH
45710: PPUSH
45711: PPUSH
45712: PPUSH
45713: PPUSH
45714: PPUSH
45715: PPUSH
45716: PPUSH
// result = [ ] ;
45717: LD_ADDR_VAR 0 7
45721: PUSH
45722: EMPTY
45723: ST_TO_ADDR
// temp_list = [ ] ;
45724: LD_ADDR_VAR 0 9
45728: PUSH
45729: EMPTY
45730: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45731: LD_VAR 0 4
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: LD_INT 3
45747: PUSH
45748: LD_INT 4
45750: PUSH
45751: LD_INT 5
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: IN
45762: NOT
45763: PUSH
45764: LD_VAR 0 1
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: IN
45779: PUSH
45780: LD_VAR 0 5
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: LD_INT 2
45790: PUSH
45791: LD_INT 3
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: LIST
45798: IN
45799: NOT
45800: AND
45801: OR
45802: IFFALSE 45806
// exit ;
45804: GO 64197
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45806: LD_VAR 0 1
45810: PUSH
45811: LD_INT 6
45813: PUSH
45814: LD_INT 7
45816: PUSH
45817: LD_INT 8
45819: PUSH
45820: LD_INT 13
45822: PUSH
45823: LD_INT 12
45825: PUSH
45826: LD_INT 15
45828: PUSH
45829: LD_INT 11
45831: PUSH
45832: LD_INT 14
45834: PUSH
45835: LD_INT 10
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: IN
45849: IFFALSE 45859
// btype = b_lab ;
45851: LD_ADDR_VAR 0 1
45855: PUSH
45856: LD_INT 6
45858: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45859: LD_VAR 0 6
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: LIST
45877: IN
45878: NOT
45879: PUSH
45880: LD_VAR 0 1
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: LD_INT 3
45896: PUSH
45897: LD_INT 6
45899: PUSH
45900: LD_INT 36
45902: PUSH
45903: LD_INT 4
45905: PUSH
45906: LD_INT 5
45908: PUSH
45909: LD_INT 31
45911: PUSH
45912: LD_INT 32
45914: PUSH
45915: LD_INT 33
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: IN
45931: NOT
45932: PUSH
45933: LD_VAR 0 6
45937: PUSH
45938: LD_INT 1
45940: EQUAL
45941: AND
45942: OR
45943: PUSH
45944: LD_VAR 0 1
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: LD_INT 3
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: IN
45959: NOT
45960: PUSH
45961: LD_VAR 0 6
45965: PUSH
45966: LD_INT 2
45968: EQUAL
45969: AND
45970: OR
45971: IFFALSE 45981
// mode = 0 ;
45973: LD_ADDR_VAR 0 6
45977: PUSH
45978: LD_INT 0
45980: ST_TO_ADDR
// case mode of 0 :
45981: LD_VAR 0 6
45985: PUSH
45986: LD_INT 0
45988: DOUBLE
45989: EQUAL
45990: IFTRUE 45994
45992: GO 57447
45994: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45995: LD_ADDR_VAR 0 11
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: LD_INT 3
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 3
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46188: LD_ADDR_VAR 0 12
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 2
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: NEG
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 3
46345: NEG
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 3
46356: NEG
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46384: LD_ADDR_VAR 0 13
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: LD_INT 2
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 2
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 2
46507: NEG
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 2
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 2
46531: NEG
46532: PUSH
46533: LD_INT 3
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 3
46543: NEG
46544: PUSH
46545: LD_INT 2
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 3
46555: NEG
46556: PUSH
46557: LD_INT 3
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46583: LD_ADDR_VAR 0 14
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: LD_INT 3
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: LD_INT 3
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: LD_INT 2
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46779: LD_ADDR_VAR 0 15
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 3
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 3
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46972: LD_ADDR_VAR 0 16
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: LD_INT 2
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: LD_INT 3
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: LD_INT 3
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47165: LD_ADDR_VAR 0 17
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 2
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 2
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47395: LD_ADDR_VAR 0 18
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 2
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 2
47571: NEG
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 2
47582: NEG
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47625: LD_ADDR_VAR 0 19
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: LD_INT 2
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: NEG
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 2
47812: NEG
47813: PUSH
47814: LD_INT 1
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: LD_INT 2
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47855: LD_ADDR_VAR 0 20
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: LD_INT 2
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: LD_INT 2
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 2
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: LD_INT 2
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: NEG
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: NEG
48055: PUSH
48056: LD_INT 2
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48085: LD_ADDR_VAR 0 21
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: LD_INT 2
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 2
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 2
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: LD_INT 2
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48315: LD_ADDR_VAR 0 22
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 1
48384: NEG
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: LD_INT 2
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: LD_INT 2
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: LD_INT 2
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 2
48491: NEG
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48545: LD_ADDR_VAR 0 23
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: NEG
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 2
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 2
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: NEG
48745: PUSH
48746: LD_INT 2
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 2
48756: NEG
48757: PUSH
48758: LD_INT 3
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: LD_INT 3
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 2
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48825: LD_ADDR_VAR 0 24
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: PUSH
48961: LD_INT 2
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 2
49024: NEG
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 2
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 3
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49101: LD_ADDR_VAR 0 25
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: LD_INT 2
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: LD_INT 2
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 2
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 2
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: LD_INT 2
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 2
49277: NEG
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 3
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 3
49322: PUSH
49323: LD_INT 2
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: LD_INT 3
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 3
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49375: LD_ADDR_VAR 0 26
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: LD_INT 2
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: NEG
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 2
49574: NEG
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 2
49586: PUSH
49587: LD_INT 3
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 3
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: LD_INT 2
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49651: LD_ADDR_VAR 0 27
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 2
49827: NEG
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: NEG
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 2
49850: NEG
49851: PUSH
49852: LD_INT 2
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 3
49884: NEG
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 3
49896: NEG
49897: PUSH
49898: LD_INT 2
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49931: LD_ADDR_VAR 0 28
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 2
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 3
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: LD_INT 3
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 3
50166: NEG
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 3
50178: NEG
50179: PUSH
50180: LD_INT 2
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50213: LD_ADDR_VAR 0 29
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: LD_INT 2
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: LD_INT 2
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 2
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 2
50391: NEG
50392: PUSH
50393: LD_INT 2
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: NEG
50404: PUSH
50405: LD_INT 3
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 3
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: LD_INT 3
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 3
50457: NEG
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50492: LD_ADDR_VAR 0 30
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 2
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 2
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 2
50658: NEG
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 2
50669: NEG
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 3
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: LD_INT 2
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 3
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 2
50714: PUSH
50715: LD_INT 3
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: NEG
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50770: LD_ADDR_VAR 0 31
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 2
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 2
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 2
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: LD_INT 2
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: LD_INT 3
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 3
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 3
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 3
51013: NEG
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51048: LD_ADDR_VAR 0 32
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 2
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 2
51173: PUSH
51174: LD_INT 2
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: LD_INT 2
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: LD_INT 1
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 3
51291: NEG
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51326: LD_ADDR_VAR 0 33
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: LD_INT 2
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 2
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: LD_INT 2
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: LD_INT 2
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 2
51481: NEG
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 2
51492: NEG
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: LD_INT 3
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 3
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: LD_INT 3
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: LD_INT 2
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 3
51570: NEG
51571: PUSH
51572: LD_INT 2
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51605: LD_ADDR_VAR 0 34
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: NEG
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 2
51784: NEG
51785: PUSH
51786: LD_INT 2
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: LD_INT 3
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: LD_INT 2
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 3
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: LD_INT 3
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 3
51850: NEG
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51885: LD_ADDR_VAR 0 35
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 2
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 2
51976: NEG
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51997: LD_ADDR_VAR 0 36
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: LD_INT 2
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52109: LD_ADDR_VAR 0 37
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52221: LD_ADDR_VAR 0 38
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52333: LD_ADDR_VAR 0 39
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 2
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52445: LD_ADDR_VAR 0 40
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52557: LD_ADDR_VAR 0 41
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 1
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: LD_INT 3
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 3
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 3
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 3
52790: PUSH
52791: LD_INT 2
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 3
52800: PUSH
52801: LD_INT 3
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: LD_INT 3
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 3
52831: NEG
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 3
52854: NEG
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 3
52866: NEG
52867: PUSH
52868: LD_INT 3
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52907: LD_ADDR_VAR 0 42
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: NEG
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: LD_INT 3
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: LD_INT 3
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 3
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 3
53153: PUSH
53154: LD_INT 3
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: LD_INT 3
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 3
53204: NEG
53205: PUSH
53206: LD_INT 2
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 3
53216: NEG
53217: PUSH
53218: LD_INT 3
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53257: LD_ADDR_VAR 0 43
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: NEG
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: LD_INT 3
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: LD_INT 3
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 3
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 3
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 3
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: LD_INT 3
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 3
53553: NEG
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 3
53564: NEG
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53605: LD_ADDR_VAR 0 44
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 2
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 2
53760: NEG
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: NEG
53784: PUSH
53785: LD_INT 2
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: NEG
53796: PUSH
53797: LD_INT 3
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 3
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 3
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 3
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 3
53848: PUSH
53849: LD_INT 3
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: PUSH
53859: LD_INT 3
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 3
53879: NEG
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 3
53890: NEG
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 3
53902: NEG
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 3
53914: NEG
53915: PUSH
53916: LD_INT 3
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53955: LD_ADDR_VAR 0 45
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: LD_INT 2
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 2
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 2
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 2
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: LD_INT 2
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 2
54121: NEG
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 2
54133: NEG
54134: PUSH
54135: LD_INT 2
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: LD_INT 3
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: LD_INT 3
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 3
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 3
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 3
54201: PUSH
54202: LD_INT 3
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: LD_INT 3
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: LD_INT 3
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 3
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 3
54252: NEG
54253: PUSH
54254: LD_INT 2
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 3
54264: NEG
54265: PUSH
54266: LD_INT 3
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54305: LD_ADDR_VAR 0 46
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: NEG
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: NEG
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: LD_INT 3
54498: NEG
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: LD_INT 3
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 3
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 3
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: LD_INT 3
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 3
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 3
54601: NEG
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 3
54612: NEG
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54653: LD_ADDR_VAR 0 47
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: LD_INT 2
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: NEG
54781: PUSH
54782: LD_INT 2
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54804: LD_ADDR_VAR 0 48
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: LD_INT 2
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: LD_INT 2
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54951: LD_ADDR_VAR 0 49
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: LD_INT 2
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55095: LD_ADDR_VAR 0 50
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55239: LD_ADDR_VAR 0 51
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55386: LD_ADDR_VAR 0 52
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: NEG
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 2
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: NEG
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55537: LD_ADDR_VAR 0 53
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 2
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: LD_INT 2
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 2
55713: NEG
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 2
55724: NEG
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: LD_INT 2
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55767: LD_ADDR_VAR 0 54
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 2
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: LD_INT 2
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 2
55943: NEG
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: LD_INT 2
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55997: LD_ADDR_VAR 0 55
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: LD_INT 2
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 2
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 2
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: LD_INT 2
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 2
56184: NEG
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56227: LD_ADDR_VAR 0 56
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: LD_INT 1
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: LD_INT 2
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 2
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 2
56403: NEG
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 2
56414: NEG
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: LD_INT 2
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56457: LD_ADDR_VAR 0 57
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: LD_INT 2
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 2
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: NEG
56657: PUSH
56658: LD_INT 2
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56687: LD_ADDR_VAR 0 58
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: LD_INT 2
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: LD_INT 2
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 2
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 2
56886: NEG
56887: PUSH
56888: LD_INT 2
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56917: LD_ADDR_VAR 0 59
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57005: LD_ADDR_VAR 0 60
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: NEG
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: NEG
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57093: LD_ADDR_VAR 0 61
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57181: LD_ADDR_VAR 0 62
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57269: LD_ADDR_VAR 0 63
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57357: LD_ADDR_VAR 0 64
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 0
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: ST_TO_ADDR
// end ; 1 :
57445: GO 63342
57447: LD_INT 1
57449: DOUBLE
57450: EQUAL
57451: IFTRUE 57455
57453: GO 60078
57455: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57456: LD_ADDR_VAR 0 11
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: LD_INT 3
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 3
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: LD_INT 2
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: LIST
57499: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57500: LD_ADDR_VAR 0 12
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 3
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 3
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: LIST
57540: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57541: LD_ADDR_VAR 0 13
57545: PUSH
57546: LD_INT 3
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 3
57558: PUSH
57559: LD_INT 3
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: LD_INT 3
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: LIST
57580: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57581: LD_ADDR_VAR 0 14
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: LD_INT 3
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 2
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: LIST
57621: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57622: LD_ADDR_VAR 0 15
57626: PUSH
57627: LD_INT 2
57629: NEG
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 3
57640: NEG
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 3
57651: NEG
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: LIST
57665: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57666: LD_ADDR_VAR 0 16
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: LD_INT 3
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 3
57685: NEG
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 3
57697: NEG
57698: PUSH
57699: LD_INT 3
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: LIST
57711: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57712: LD_ADDR_VAR 0 17
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: LD_INT 3
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 3
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: LD_INT 2
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: LIST
57755: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57756: LD_ADDR_VAR 0 18
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 3
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 3
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: LIST
57796: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57797: LD_ADDR_VAR 0 19
57801: PUSH
57802: LD_INT 3
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: LD_INT 3
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: LD_INT 3
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: LIST
57836: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57837: LD_ADDR_VAR 0 20
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: LD_INT 3
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: LD_INT 3
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: LIST
57877: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57878: LD_ADDR_VAR 0 21
57882: PUSH
57883: LD_INT 2
57885: NEG
57886: PUSH
57887: LD_INT 1
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 3
57896: NEG
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 3
57907: NEG
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: LIST
57921: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57922: LD_ADDR_VAR 0 22
57926: PUSH
57927: LD_INT 2
57929: NEG
57930: PUSH
57931: LD_INT 3
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 3
57941: NEG
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 3
57953: NEG
57954: PUSH
57955: LD_INT 3
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: LIST
57967: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57968: LD_ADDR_VAR 0 23
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 3
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: LD_INT 4
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: LD_INT 3
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: LIST
58011: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58012: LD_ADDR_VAR 0 24
58016: PUSH
58017: LD_INT 3
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 3
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 4
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: LIST
58052: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58053: LD_ADDR_VAR 0 25
58057: PUSH
58058: LD_INT 3
58060: PUSH
58061: LD_INT 3
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 4
58070: PUSH
58071: LD_INT 3
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 3
58080: PUSH
58081: LD_INT 4
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: LIST
58092: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58093: LD_ADDR_VAR 0 26
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: LD_INT 3
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: LD_INT 4
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: LD_INT 3
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: LIST
58133: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58134: LD_ADDR_VAR 0 27
58138: PUSH
58139: LD_INT 3
58141: NEG
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 3
58152: NEG
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 4
58163: NEG
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: LIST
58177: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58178: LD_ADDR_VAR 0 28
58182: PUSH
58183: LD_INT 3
58185: NEG
58186: PUSH
58187: LD_INT 3
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 3
58197: NEG
58198: PUSH
58199: LD_INT 4
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 4
58209: NEG
58210: PUSH
58211: LD_INT 3
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: LIST
58223: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58224: LD_ADDR_VAR 0 29
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: LD_INT 3
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: LD_INT 3
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: LD_INT 4
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: LD_INT 4
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: LD_INT 3
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: NEG
58300: PUSH
58301: LD_INT 5
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 5
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: LD_INT 4
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: LD_INT 6
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: LD_INT 6
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: LD_INT 5
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58379: LD_ADDR_VAR 0 30
58383: PUSH
58384: LD_INT 2
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 3
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 3
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 4
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 4
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 4
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 5
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 5
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 5
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 6
58490: PUSH
58491: LD_INT 0
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 6
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58522: LD_ADDR_VAR 0 31
58526: PUSH
58527: LD_INT 3
58529: PUSH
58530: LD_INT 2
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 3
58539: PUSH
58540: LD_INT 3
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 2
58549: PUSH
58550: LD_INT 3
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 4
58559: PUSH
58560: LD_INT 3
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 4
58569: PUSH
58570: LD_INT 4
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 3
58579: PUSH
58580: LD_INT 4
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 5
58589: PUSH
58590: LD_INT 4
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 5
58599: PUSH
58600: LD_INT 5
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 4
58609: PUSH
58610: LD_INT 5
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 6
58619: PUSH
58620: LD_INT 5
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 6
58629: PUSH
58630: LD_INT 6
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 5
58639: PUSH
58640: LD_INT 6
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58661: LD_ADDR_VAR 0 32
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: LD_INT 3
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: LD_INT 3
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: LD_INT 4
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: LD_INT 4
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: LD_INT 5
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: LD_INT 5
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: LD_INT 4
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: LD_INT 6
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: LD_INT 6
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: LD_INT 5
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58804: LD_ADDR_VAR 0 33
58808: PUSH
58809: LD_INT 2
58811: NEG
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 3
58822: NEG
58823: PUSH
58824: LD_INT 0
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 3
58833: NEG
58834: PUSH
58835: LD_INT 1
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 3
58845: NEG
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 4
58856: NEG
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 4
58867: NEG
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 4
58879: NEG
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 5
58890: NEG
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 5
58901: NEG
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 5
58913: NEG
58914: PUSH
58915: LD_INT 1
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 6
58924: NEG
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 6
58935: NEG
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58959: LD_ADDR_VAR 0 34
58963: PUSH
58964: LD_INT 2
58966: NEG
58967: PUSH
58968: LD_INT 3
58970: NEG
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 3
58978: NEG
58979: PUSH
58980: LD_INT 2
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 3
58990: NEG
58991: PUSH
58992: LD_INT 3
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 3
59002: NEG
59003: PUSH
59004: LD_INT 4
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 4
59014: NEG
59015: PUSH
59016: LD_INT 3
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 4
59026: NEG
59027: PUSH
59028: LD_INT 4
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 4
59038: NEG
59039: PUSH
59040: LD_INT 5
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 5
59050: NEG
59051: PUSH
59052: LD_INT 4
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 5
59062: NEG
59063: PUSH
59064: LD_INT 5
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 5
59074: NEG
59075: PUSH
59076: LD_INT 6
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 6
59086: NEG
59087: PUSH
59088: LD_INT 5
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 6
59098: NEG
59099: PUSH
59100: LD_INT 6
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59122: LD_ADDR_VAR 0 41
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: NEG
59141: PUSH
59142: LD_INT 3
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: LD_INT 2
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: LIST
59165: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59166: LD_ADDR_VAR 0 42
59170: PUSH
59171: LD_INT 2
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 3
59194: PUSH
59195: LD_INT 1
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: LIST
59206: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59207: LD_ADDR_VAR 0 43
59211: PUSH
59212: LD_INT 2
59214: PUSH
59215: LD_INT 2
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 2
59234: PUSH
59235: LD_INT 3
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: LIST
59246: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59247: LD_ADDR_VAR 0 44
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: LD_INT 2
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: LD_INT 3
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: LIST
59287: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59288: LD_ADDR_VAR 0 45
59292: PUSH
59293: LD_INT 2
59295: NEG
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 2
59306: NEG
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 3
59317: NEG
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: LIST
59331: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59332: LD_ADDR_VAR 0 46
59336: PUSH
59337: LD_INT 2
59339: NEG
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 2
59351: NEG
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 3
59363: NEG
59364: PUSH
59365: LD_INT 2
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: LIST
59377: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59378: LD_ADDR_VAR 0 47
59382: PUSH
59383: LD_INT 2
59385: NEG
59386: PUSH
59387: LD_INT 3
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: NEG
59398: PUSH
59399: LD_INT 3
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59411: LD_ADDR_VAR 0 48
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: LD_INT 2
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 2
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59442: LD_ADDR_VAR 0 49
59446: PUSH
59447: LD_INT 3
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 3
59459: PUSH
59460: LD_INT 2
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59471: LD_ADDR_VAR 0 50
59475: PUSH
59476: LD_INT 2
59478: PUSH
59479: LD_INT 3
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: LD_INT 3
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59500: LD_ADDR_VAR 0 51
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59531: LD_ADDR_VAR 0 52
59535: PUSH
59536: LD_INT 3
59538: NEG
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 3
59550: NEG
59551: PUSH
59552: LD_INT 2
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59564: LD_ADDR_VAR 0 53
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: LD_INT 3
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: LD_INT 3
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: LD_INT 2
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: LIST
59607: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59608: LD_ADDR_VAR 0 54
59612: PUSH
59613: LD_INT 2
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 3
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 3
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: LIST
59648: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59649: LD_ADDR_VAR 0 55
59653: PUSH
59654: LD_INT 3
59656: PUSH
59657: LD_INT 2
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 3
59666: PUSH
59667: LD_INT 3
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: LD_INT 3
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: LIST
59688: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59689: LD_ADDR_VAR 0 56
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: LD_INT 3
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: LD_INT 3
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 1
59716: NEG
59717: PUSH
59718: LD_INT 2
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: LIST
59729: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59730: LD_ADDR_VAR 0 57
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 3
59748: NEG
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 3
59759: NEG
59760: PUSH
59761: LD_INT 1
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: LIST
59773: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59774: LD_ADDR_VAR 0 58
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: LD_INT 3
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 3
59793: NEG
59794: PUSH
59795: LD_INT 2
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 3
59805: NEG
59806: PUSH
59807: LD_INT 3
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: LIST
59819: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59820: LD_ADDR_VAR 0 59
59824: PUSH
59825: LD_INT 1
59827: NEG
59828: PUSH
59829: LD_INT 2
59831: NEG
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: LD_INT 2
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: LIST
59863: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59864: LD_ADDR_VAR 0 60
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: LD_INT 1
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 2
59882: PUSH
59883: LD_INT 0
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: LIST
59904: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59905: LD_ADDR_VAR 0 61
59909: PUSH
59910: LD_INT 2
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 2
59922: PUSH
59923: LD_INT 2
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: LD_INT 2
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: LIST
59944: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59945: LD_ADDR_VAR 0 62
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: LD_INT 2
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: LD_INT 2
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: NEG
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: LIST
59985: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59986: LD_ADDR_VAR 0 63
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 2
60004: NEG
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 2
60015: NEG
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: LIST
60029: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60030: LD_ADDR_VAR 0 64
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: LD_INT 2
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 2
60049: NEG
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: NEG
60062: PUSH
60063: LD_INT 2
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: LIST
60075: ST_TO_ADDR
// end ; 2 :
60076: GO 63342
60078: LD_INT 2
60080: DOUBLE
60081: EQUAL
60082: IFTRUE 60086
60084: GO 63341
60086: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60087: LD_ADDR_VAR 0 29
60091: PUSH
60092: LD_INT 4
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 4
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 5
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 5
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 4
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 3
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 3
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 3
60166: PUSH
60167: LD_INT 2
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 5
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: LD_INT 3
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 3
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 4
60207: PUSH
60208: LD_INT 3
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 4
60217: PUSH
60218: LD_INT 4
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 3
60227: PUSH
60228: LD_INT 4
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: LD_INT 3
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: LD_INT 2
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 4
60257: PUSH
60258: LD_INT 2
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 2
60267: PUSH
60268: LD_INT 4
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 4
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: LD_INT 3
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: LD_INT 4
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: LD_INT 5
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: LD_INT 5
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: LD_INT 4
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 1
60338: NEG
60339: PUSH
60340: LD_INT 3
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 2
60349: PUSH
60350: LD_INT 5
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 2
60359: NEG
60360: PUSH
60361: LD_INT 3
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 3
60370: NEG
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 3
60381: NEG
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 2
60393: NEG
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 2
60404: NEG
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 3
60415: NEG
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 4
60426: NEG
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 4
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 4
60449: NEG
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 2
60461: NEG
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 4
60472: NEG
60473: PUSH
60474: LD_INT 4
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 4
60484: NEG
60485: PUSH
60486: LD_INT 5
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 3
60496: NEG
60497: PUSH
60498: LD_INT 4
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 3
60508: NEG
60509: PUSH
60510: LD_INT 3
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 4
60520: NEG
60521: PUSH
60522: LD_INT 3
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 5
60532: NEG
60533: PUSH
60534: LD_INT 4
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 5
60544: NEG
60545: PUSH
60546: LD_INT 5
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 3
60556: NEG
60557: PUSH
60558: LD_INT 5
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 5
60568: NEG
60569: PUSH
60570: LD_INT 3
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60625: LD_ADDR_VAR 0 30
60629: PUSH
60630: LD_INT 4
60632: PUSH
60633: LD_INT 4
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 4
60642: PUSH
60643: LD_INT 3
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 5
60652: PUSH
60653: LD_INT 4
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 5
60662: PUSH
60663: LD_INT 5
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 4
60672: PUSH
60673: LD_INT 5
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 3
60682: PUSH
60683: LD_INT 4
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 3
60692: PUSH
60693: LD_INT 3
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 5
60702: PUSH
60703: LD_INT 3
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 3
60712: PUSH
60713: LD_INT 5
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: LD_INT 3
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 1
60742: PUSH
60743: LD_INT 3
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 1
60752: PUSH
60753: LD_INT 4
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 4
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: LD_INT 3
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: LD_INT 2
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: LD_INT 4
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: NEG
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 4
60815: NEG
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 4
60826: NEG
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 3
60838: NEG
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 3
60849: NEG
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 4
60860: NEG
60861: PUSH
60862: LD_INT 1
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 5
60871: NEG
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 5
60882: NEG
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 5
60894: NEG
60895: PUSH
60896: LD_INT 2
60898: NEG
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 3
60906: NEG
60907: PUSH
60908: LD_INT 2
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 3
60917: NEG
60918: PUSH
60919: LD_INT 3
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 3
60929: NEG
60930: PUSH
60931: LD_INT 4
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 2
60941: NEG
60942: PUSH
60943: LD_INT 3
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: NEG
60954: PUSH
60955: LD_INT 2
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 3
60965: NEG
60966: PUSH
60967: LD_INT 2
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 4
60977: NEG
60978: PUSH
60979: LD_INT 3
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 4
60989: NEG
60990: PUSH
60991: LD_INT 4
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 2
61001: NEG
61002: PUSH
61003: LD_INT 4
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 4
61013: NEG
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: LD_INT 4
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: LD_INT 5
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: LD_INT 4
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: LD_INT 3
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: LD_INT 3
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: NEG
61081: PUSH
61082: LD_INT 4
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: NEG
61093: PUSH
61094: LD_INT 5
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 2
61104: PUSH
61105: LD_INT 3
61107: NEG
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 2
61115: NEG
61116: PUSH
61117: LD_INT 5
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61172: LD_ADDR_VAR 0 31
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: LD_INT 4
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: LD_INT 3
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: LD_INT 4
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: LD_INT 5
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: LD_INT 5
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: LD_INT 4
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: LD_INT 3
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 2
61251: PUSH
61252: LD_INT 5
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: LD_INT 3
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 3
61272: NEG
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 3
61283: NEG
61284: PUSH
61285: LD_INT 1
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 2
61295: NEG
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 2
61306: NEG
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 3
61317: NEG
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 4
61328: NEG
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 4
61339: NEG
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 4
61351: NEG
61352: PUSH
61353: LD_INT 2
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 2
61363: NEG
61364: PUSH
61365: LD_INT 2
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 4
61374: NEG
61375: PUSH
61376: LD_INT 4
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 4
61386: NEG
61387: PUSH
61388: LD_INT 5
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 3
61398: NEG
61399: PUSH
61400: LD_INT 4
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 3
61410: NEG
61411: PUSH
61412: LD_INT 3
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 4
61422: NEG
61423: PUSH
61424: LD_INT 3
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 5
61434: NEG
61435: PUSH
61436: LD_INT 4
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 5
61446: NEG
61447: PUSH
61448: LD_INT 5
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 3
61458: NEG
61459: PUSH
61460: LD_INT 5
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 5
61470: NEG
61471: PUSH
61472: LD_INT 3
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 3
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: LD_INT 4
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: LD_INT 3
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: LD_INT 2
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: LD_INT 2
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: LD_INT 3
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 1
61549: NEG
61550: PUSH
61551: LD_INT 4
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 2
61561: PUSH
61562: LD_INT 2
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: NEG
61573: PUSH
61574: LD_INT 4
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 4
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 4
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 5
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 5
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 4
61625: PUSH
61626: LD_INT 1
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 3
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 3
61645: PUSH
61646: LD_INT 1
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 3
61656: PUSH
61657: LD_INT 2
61659: NEG
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 5
61667: PUSH
61668: LD_INT 2
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61722: LD_ADDR_VAR 0 32
61726: PUSH
61727: LD_INT 4
61729: NEG
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 4
61740: NEG
61741: PUSH
61742: LD_INT 1
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 3
61752: NEG
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 3
61763: NEG
61764: PUSH
61765: LD_INT 1
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 4
61774: NEG
61775: PUSH
61776: LD_INT 1
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 5
61785: NEG
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 5
61796: NEG
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 5
61808: NEG
61809: PUSH
61810: LD_INT 2
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 3
61820: NEG
61821: PUSH
61822: LD_INT 2
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 3
61831: NEG
61832: PUSH
61833: LD_INT 3
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 3
61843: NEG
61844: PUSH
61845: LD_INT 4
61847: NEG
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 2
61855: NEG
61856: PUSH
61857: LD_INT 3
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 2
61867: NEG
61868: PUSH
61869: LD_INT 2
61871: NEG
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 3
61879: NEG
61880: PUSH
61881: LD_INT 2
61883: NEG
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 4
61891: NEG
61892: PUSH
61893: LD_INT 3
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 4
61903: NEG
61904: PUSH
61905: LD_INT 4
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 2
61915: NEG
61916: PUSH
61917: LD_INT 4
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 4
61927: NEG
61928: PUSH
61929: LD_INT 2
61931: NEG
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: LD_INT 4
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: LD_INT 5
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: LD_INT 4
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: LD_INT 3
61975: NEG
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 0
61983: PUSH
61984: LD_INT 3
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: LD_INT 4
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: LD_INT 5
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 2
62018: PUSH
62019: LD_INT 3
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 2
62029: NEG
62030: PUSH
62031: LD_INT 5
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 3
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 3
62051: PUSH
62052: LD_INT 1
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 4
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 4
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 3
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 2
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 2
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 2
62113: PUSH
62114: LD_INT 2
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 4
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 4
62134: PUSH
62135: LD_INT 4
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 4
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 5
62154: PUSH
62155: LD_INT 4
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 5
62164: PUSH
62165: LD_INT 5
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 4
62174: PUSH
62175: LD_INT 5
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 3
62184: PUSH
62185: LD_INT 4
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 3
62194: PUSH
62195: LD_INT 3
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 5
62204: PUSH
62205: LD_INT 3
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 3
62214: PUSH
62215: LD_INT 5
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62269: LD_ADDR_VAR 0 33
62273: PUSH
62274: LD_INT 4
62276: NEG
62277: PUSH
62278: LD_INT 4
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 4
62288: NEG
62289: PUSH
62290: LD_INT 5
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 3
62300: NEG
62301: PUSH
62302: LD_INT 4
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 3
62312: NEG
62313: PUSH
62314: LD_INT 3
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 4
62324: NEG
62325: PUSH
62326: LD_INT 3
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 5
62336: NEG
62337: PUSH
62338: LD_INT 4
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 5
62348: NEG
62349: PUSH
62350: LD_INT 5
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 3
62360: NEG
62361: PUSH
62362: LD_INT 5
62364: NEG
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 5
62372: NEG
62373: PUSH
62374: LD_INT 3
62376: NEG
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: LD_INT 3
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: LD_INT 4
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: LD_INT 3
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: LD_INT 2
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: LD_INT 2
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: LD_INT 3
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: LD_INT 4
62455: NEG
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 2
62463: PUSH
62464: LD_INT 2
62466: NEG
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 2
62474: NEG
62475: PUSH
62476: LD_INT 4
62478: NEG
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 4
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 4
62496: PUSH
62497: LD_INT 1
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 5
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 5
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 4
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 3
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 3
62547: PUSH
62548: LD_INT 1
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 3
62558: PUSH
62559: LD_INT 2
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 5
62569: PUSH
62570: LD_INT 2
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 3
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 3
62589: PUSH
62590: LD_INT 2
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 4
62599: PUSH
62600: LD_INT 3
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 4
62609: PUSH
62610: LD_INT 4
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 3
62619: PUSH
62620: LD_INT 4
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 2
62629: PUSH
62630: LD_INT 3
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 2
62639: PUSH
62640: LD_INT 2
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 4
62649: PUSH
62650: LD_INT 2
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 2
62659: PUSH
62660: LD_INT 4
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 0
62669: PUSH
62670: LD_INT 4
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 3
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: LD_INT 4
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: LD_INT 5
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 0
62709: PUSH
62710: LD_INT 5
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: LD_INT 4
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 3
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 2
62741: PUSH
62742: LD_INT 5
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 2
62751: NEG
62752: PUSH
62753: LD_INT 3
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62807: LD_ADDR_VAR 0 34
62811: PUSH
62812: LD_INT 0
62814: PUSH
62815: LD_INT 4
62817: NEG
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: LD_INT 5
62828: NEG
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: LD_INT 4
62839: NEG
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 1
62847: PUSH
62848: LD_INT 3
62850: NEG
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: LD_INT 3
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: LD_INT 4
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: LD_INT 5
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 2
62893: PUSH
62894: LD_INT 3
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 2
62904: NEG
62905: PUSH
62906: LD_INT 5
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 3
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 3
62926: PUSH
62927: LD_INT 1
62929: NEG
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 4
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 4
62947: PUSH
62948: LD_INT 1
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 3
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 2
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 2
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 2
62988: PUSH
62989: LD_INT 2
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 4
62999: PUSH
63000: LD_INT 2
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 4
63009: PUSH
63010: LD_INT 4
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 4
63019: PUSH
63020: LD_INT 3
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 5
63029: PUSH
63030: LD_INT 4
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 5
63039: PUSH
63040: LD_INT 5
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 4
63049: PUSH
63050: LD_INT 5
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 3
63059: PUSH
63060: LD_INT 4
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 3
63069: PUSH
63070: LD_INT 3
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 5
63079: PUSH
63080: LD_INT 3
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 3
63089: PUSH
63090: LD_INT 5
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: LD_INT 3
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: LD_INT 2
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: LD_INT 3
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 1
63129: PUSH
63130: LD_INT 4
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: LD_INT 4
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: LD_INT 3
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: LD_INT 2
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 2
63171: PUSH
63172: LD_INT 4
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 2
63181: NEG
63182: PUSH
63183: LD_INT 2
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 4
63192: NEG
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 4
63203: NEG
63204: PUSH
63205: LD_INT 1
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 3
63215: NEG
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 3
63226: NEG
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 4
63237: NEG
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 5
63248: NEG
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 5
63259: NEG
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 5
63271: NEG
63272: PUSH
63273: LD_INT 2
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 3
63283: NEG
63284: PUSH
63285: LD_INT 2
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: ST_TO_ADDR
// end ; end ;
63339: GO 63342
63341: POP
// case btype of b_depot , b_warehouse :
63342: LD_VAR 0 1
63346: PUSH
63347: LD_INT 0
63349: DOUBLE
63350: EQUAL
63351: IFTRUE 63361
63353: LD_INT 1
63355: DOUBLE
63356: EQUAL
63357: IFTRUE 63361
63359: GO 63562
63361: POP
// case nation of nation_american :
63362: LD_VAR 0 5
63366: PUSH
63367: LD_INT 1
63369: DOUBLE
63370: EQUAL
63371: IFTRUE 63375
63373: GO 63431
63375: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63376: LD_ADDR_VAR 0 9
63380: PUSH
63381: LD_VAR 0 11
63385: PUSH
63386: LD_VAR 0 12
63390: PUSH
63391: LD_VAR 0 13
63395: PUSH
63396: LD_VAR 0 14
63400: PUSH
63401: LD_VAR 0 15
63405: PUSH
63406: LD_VAR 0 16
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: PUSH
63419: LD_VAR 0 4
63423: PUSH
63424: LD_INT 1
63426: PLUS
63427: ARRAY
63428: ST_TO_ADDR
63429: GO 63560
63431: LD_INT 2
63433: DOUBLE
63434: EQUAL
63435: IFTRUE 63439
63437: GO 63495
63439: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63440: LD_ADDR_VAR 0 9
63444: PUSH
63445: LD_VAR 0 17
63449: PUSH
63450: LD_VAR 0 18
63454: PUSH
63455: LD_VAR 0 19
63459: PUSH
63460: LD_VAR 0 20
63464: PUSH
63465: LD_VAR 0 21
63469: PUSH
63470: LD_VAR 0 22
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: PUSH
63483: LD_VAR 0 4
63487: PUSH
63488: LD_INT 1
63490: PLUS
63491: ARRAY
63492: ST_TO_ADDR
63493: GO 63560
63495: LD_INT 3
63497: DOUBLE
63498: EQUAL
63499: IFTRUE 63503
63501: GO 63559
63503: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63504: LD_ADDR_VAR 0 9
63508: PUSH
63509: LD_VAR 0 23
63513: PUSH
63514: LD_VAR 0 24
63518: PUSH
63519: LD_VAR 0 25
63523: PUSH
63524: LD_VAR 0 26
63528: PUSH
63529: LD_VAR 0 27
63533: PUSH
63534: LD_VAR 0 28
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: PUSH
63547: LD_VAR 0 4
63551: PUSH
63552: LD_INT 1
63554: PLUS
63555: ARRAY
63556: ST_TO_ADDR
63557: GO 63560
63559: POP
63560: GO 64115
63562: LD_INT 2
63564: DOUBLE
63565: EQUAL
63566: IFTRUE 63576
63568: LD_INT 3
63570: DOUBLE
63571: EQUAL
63572: IFTRUE 63576
63574: GO 63632
63576: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63577: LD_ADDR_VAR 0 9
63581: PUSH
63582: LD_VAR 0 29
63586: PUSH
63587: LD_VAR 0 30
63591: PUSH
63592: LD_VAR 0 31
63596: PUSH
63597: LD_VAR 0 32
63601: PUSH
63602: LD_VAR 0 33
63606: PUSH
63607: LD_VAR 0 34
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: PUSH
63620: LD_VAR 0 4
63624: PUSH
63625: LD_INT 1
63627: PLUS
63628: ARRAY
63629: ST_TO_ADDR
63630: GO 64115
63632: LD_INT 16
63634: DOUBLE
63635: EQUAL
63636: IFTRUE 63694
63638: LD_INT 17
63640: DOUBLE
63641: EQUAL
63642: IFTRUE 63694
63644: LD_INT 18
63646: DOUBLE
63647: EQUAL
63648: IFTRUE 63694
63650: LD_INT 19
63652: DOUBLE
63653: EQUAL
63654: IFTRUE 63694
63656: LD_INT 22
63658: DOUBLE
63659: EQUAL
63660: IFTRUE 63694
63662: LD_INT 20
63664: DOUBLE
63665: EQUAL
63666: IFTRUE 63694
63668: LD_INT 21
63670: DOUBLE
63671: EQUAL
63672: IFTRUE 63694
63674: LD_INT 23
63676: DOUBLE
63677: EQUAL
63678: IFTRUE 63694
63680: LD_INT 24
63682: DOUBLE
63683: EQUAL
63684: IFTRUE 63694
63686: LD_INT 25
63688: DOUBLE
63689: EQUAL
63690: IFTRUE 63694
63692: GO 63750
63694: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63695: LD_ADDR_VAR 0 9
63699: PUSH
63700: LD_VAR 0 35
63704: PUSH
63705: LD_VAR 0 36
63709: PUSH
63710: LD_VAR 0 37
63714: PUSH
63715: LD_VAR 0 38
63719: PUSH
63720: LD_VAR 0 39
63724: PUSH
63725: LD_VAR 0 40
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: PUSH
63738: LD_VAR 0 4
63742: PUSH
63743: LD_INT 1
63745: PLUS
63746: ARRAY
63747: ST_TO_ADDR
63748: GO 64115
63750: LD_INT 6
63752: DOUBLE
63753: EQUAL
63754: IFTRUE 63806
63756: LD_INT 7
63758: DOUBLE
63759: EQUAL
63760: IFTRUE 63806
63762: LD_INT 8
63764: DOUBLE
63765: EQUAL
63766: IFTRUE 63806
63768: LD_INT 13
63770: DOUBLE
63771: EQUAL
63772: IFTRUE 63806
63774: LD_INT 12
63776: DOUBLE
63777: EQUAL
63778: IFTRUE 63806
63780: LD_INT 15
63782: DOUBLE
63783: EQUAL
63784: IFTRUE 63806
63786: LD_INT 11
63788: DOUBLE
63789: EQUAL
63790: IFTRUE 63806
63792: LD_INT 14
63794: DOUBLE
63795: EQUAL
63796: IFTRUE 63806
63798: LD_INT 10
63800: DOUBLE
63801: EQUAL
63802: IFTRUE 63806
63804: GO 63862
63806: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63807: LD_ADDR_VAR 0 9
63811: PUSH
63812: LD_VAR 0 41
63816: PUSH
63817: LD_VAR 0 42
63821: PUSH
63822: LD_VAR 0 43
63826: PUSH
63827: LD_VAR 0 44
63831: PUSH
63832: LD_VAR 0 45
63836: PUSH
63837: LD_VAR 0 46
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: PUSH
63850: LD_VAR 0 4
63854: PUSH
63855: LD_INT 1
63857: PLUS
63858: ARRAY
63859: ST_TO_ADDR
63860: GO 64115
63862: LD_INT 36
63864: DOUBLE
63865: EQUAL
63866: IFTRUE 63870
63868: GO 63926
63870: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63871: LD_ADDR_VAR 0 9
63875: PUSH
63876: LD_VAR 0 47
63880: PUSH
63881: LD_VAR 0 48
63885: PUSH
63886: LD_VAR 0 49
63890: PUSH
63891: LD_VAR 0 50
63895: PUSH
63896: LD_VAR 0 51
63900: PUSH
63901: LD_VAR 0 52
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: PUSH
63914: LD_VAR 0 4
63918: PUSH
63919: LD_INT 1
63921: PLUS
63922: ARRAY
63923: ST_TO_ADDR
63924: GO 64115
63926: LD_INT 4
63928: DOUBLE
63929: EQUAL
63930: IFTRUE 63952
63932: LD_INT 5
63934: DOUBLE
63935: EQUAL
63936: IFTRUE 63952
63938: LD_INT 34
63940: DOUBLE
63941: EQUAL
63942: IFTRUE 63952
63944: LD_INT 37
63946: DOUBLE
63947: EQUAL
63948: IFTRUE 63952
63950: GO 64008
63952: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63953: LD_ADDR_VAR 0 9
63957: PUSH
63958: LD_VAR 0 53
63962: PUSH
63963: LD_VAR 0 54
63967: PUSH
63968: LD_VAR 0 55
63972: PUSH
63973: LD_VAR 0 56
63977: PUSH
63978: LD_VAR 0 57
63982: PUSH
63983: LD_VAR 0 58
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: PUSH
63996: LD_VAR 0 4
64000: PUSH
64001: LD_INT 1
64003: PLUS
64004: ARRAY
64005: ST_TO_ADDR
64006: GO 64115
64008: LD_INT 31
64010: DOUBLE
64011: EQUAL
64012: IFTRUE 64058
64014: LD_INT 32
64016: DOUBLE
64017: EQUAL
64018: IFTRUE 64058
64020: LD_INT 33
64022: DOUBLE
64023: EQUAL
64024: IFTRUE 64058
64026: LD_INT 27
64028: DOUBLE
64029: EQUAL
64030: IFTRUE 64058
64032: LD_INT 26
64034: DOUBLE
64035: EQUAL
64036: IFTRUE 64058
64038: LD_INT 28
64040: DOUBLE
64041: EQUAL
64042: IFTRUE 64058
64044: LD_INT 29
64046: DOUBLE
64047: EQUAL
64048: IFTRUE 64058
64050: LD_INT 30
64052: DOUBLE
64053: EQUAL
64054: IFTRUE 64058
64056: GO 64114
64058: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64059: LD_ADDR_VAR 0 9
64063: PUSH
64064: LD_VAR 0 59
64068: PUSH
64069: LD_VAR 0 60
64073: PUSH
64074: LD_VAR 0 61
64078: PUSH
64079: LD_VAR 0 62
64083: PUSH
64084: LD_VAR 0 63
64088: PUSH
64089: LD_VAR 0 64
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: PUSH
64102: LD_VAR 0 4
64106: PUSH
64107: LD_INT 1
64109: PLUS
64110: ARRAY
64111: ST_TO_ADDR
64112: GO 64115
64114: POP
// temp_list2 = [ ] ;
64115: LD_ADDR_VAR 0 10
64119: PUSH
64120: EMPTY
64121: ST_TO_ADDR
// for i in temp_list do
64122: LD_ADDR_VAR 0 8
64126: PUSH
64127: LD_VAR 0 9
64131: PUSH
64132: FOR_IN
64133: IFFALSE 64185
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64135: LD_ADDR_VAR 0 10
64139: PUSH
64140: LD_VAR 0 10
64144: PUSH
64145: LD_VAR 0 8
64149: PUSH
64150: LD_INT 1
64152: ARRAY
64153: PUSH
64154: LD_VAR 0 2
64158: PLUS
64159: PUSH
64160: LD_VAR 0 8
64164: PUSH
64165: LD_INT 2
64167: ARRAY
64168: PUSH
64169: LD_VAR 0 3
64173: PLUS
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: EMPTY
64180: LIST
64181: ADD
64182: ST_TO_ADDR
64183: GO 64132
64185: POP
64186: POP
// result = temp_list2 ;
64187: LD_ADDR_VAR 0 7
64191: PUSH
64192: LD_VAR 0 10
64196: ST_TO_ADDR
// end ;
64197: LD_VAR 0 7
64201: RET
// export function EnemyInRange ( unit , dist ) ; begin
64202: LD_INT 0
64204: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64205: LD_ADDR_VAR 0 3
64209: PUSH
64210: LD_VAR 0 1
64214: PPUSH
64215: CALL_OW 255
64219: PPUSH
64220: LD_VAR 0 1
64224: PPUSH
64225: CALL_OW 250
64229: PPUSH
64230: LD_VAR 0 1
64234: PPUSH
64235: CALL_OW 251
64239: PPUSH
64240: LD_VAR 0 2
64244: PPUSH
64245: CALL 37575 0 4
64249: PUSH
64250: LD_INT 4
64252: ARRAY
64253: ST_TO_ADDR
// end ;
64254: LD_VAR 0 3
64258: RET
// export function PlayerSeeMe ( unit ) ; begin
64259: LD_INT 0
64261: PPUSH
// result := See ( your_side , unit ) ;
64262: LD_ADDR_VAR 0 2
64266: PUSH
64267: LD_OWVAR 2
64271: PPUSH
64272: LD_VAR 0 1
64276: PPUSH
64277: CALL_OW 292
64281: ST_TO_ADDR
// end ;
64282: LD_VAR 0 2
64286: RET
// export function ReverseDir ( unit ) ; begin
64287: LD_INT 0
64289: PPUSH
// if not unit then
64290: LD_VAR 0 1
64294: NOT
64295: IFFALSE 64299
// exit ;
64297: GO 64322
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64299: LD_ADDR_VAR 0 2
64303: PUSH
64304: LD_VAR 0 1
64308: PPUSH
64309: CALL_OW 254
64313: PUSH
64314: LD_INT 3
64316: PLUS
64317: PUSH
64318: LD_INT 6
64320: MOD
64321: ST_TO_ADDR
// end ;
64322: LD_VAR 0 2
64326: RET
// export function ReverseArray ( array ) ; var i ; begin
64327: LD_INT 0
64329: PPUSH
64330: PPUSH
// if not array then
64331: LD_VAR 0 1
64335: NOT
64336: IFFALSE 64340
// exit ;
64338: GO 64395
// result := [ ] ;
64340: LD_ADDR_VAR 0 2
64344: PUSH
64345: EMPTY
64346: ST_TO_ADDR
// for i := array downto 1 do
64347: LD_ADDR_VAR 0 3
64351: PUSH
64352: DOUBLE
64353: LD_VAR 0 1
64357: INC
64358: ST_TO_ADDR
64359: LD_INT 1
64361: PUSH
64362: FOR_DOWNTO
64363: IFFALSE 64393
// result := Join ( result , array [ i ] ) ;
64365: LD_ADDR_VAR 0 2
64369: PUSH
64370: LD_VAR 0 2
64374: PPUSH
64375: LD_VAR 0 1
64379: PUSH
64380: LD_VAR 0 3
64384: ARRAY
64385: PPUSH
64386: CALL 69040 0 2
64390: ST_TO_ADDR
64391: GO 64362
64393: POP
64394: POP
// end ;
64395: LD_VAR 0 2
64399: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64400: LD_INT 0
64402: PPUSH
64403: PPUSH
64404: PPUSH
64405: PPUSH
64406: PPUSH
64407: PPUSH
// if not unit or not hexes then
64408: LD_VAR 0 1
64412: NOT
64413: PUSH
64414: LD_VAR 0 2
64418: NOT
64419: OR
64420: IFFALSE 64424
// exit ;
64422: GO 64547
// dist := 9999 ;
64424: LD_ADDR_VAR 0 5
64428: PUSH
64429: LD_INT 9999
64431: ST_TO_ADDR
// for i = 1 to hexes do
64432: LD_ADDR_VAR 0 4
64436: PUSH
64437: DOUBLE
64438: LD_INT 1
64440: DEC
64441: ST_TO_ADDR
64442: LD_VAR 0 2
64446: PUSH
64447: FOR_TO
64448: IFFALSE 64535
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64450: LD_ADDR_VAR 0 6
64454: PUSH
64455: LD_VAR 0 1
64459: PPUSH
64460: LD_VAR 0 2
64464: PUSH
64465: LD_VAR 0 4
64469: ARRAY
64470: PUSH
64471: LD_INT 1
64473: ARRAY
64474: PPUSH
64475: LD_VAR 0 2
64479: PUSH
64480: LD_VAR 0 4
64484: ARRAY
64485: PUSH
64486: LD_INT 2
64488: ARRAY
64489: PPUSH
64490: CALL_OW 297
64494: ST_TO_ADDR
// if tdist < dist then
64495: LD_VAR 0 6
64499: PUSH
64500: LD_VAR 0 5
64504: LESS
64505: IFFALSE 64533
// begin hex := hexes [ i ] ;
64507: LD_ADDR_VAR 0 8
64511: PUSH
64512: LD_VAR 0 2
64516: PUSH
64517: LD_VAR 0 4
64521: ARRAY
64522: ST_TO_ADDR
// dist := tdist ;
64523: LD_ADDR_VAR 0 5
64527: PUSH
64528: LD_VAR 0 6
64532: ST_TO_ADDR
// end ; end ;
64533: GO 64447
64535: POP
64536: POP
// result := hex ;
64537: LD_ADDR_VAR 0 3
64541: PUSH
64542: LD_VAR 0 8
64546: ST_TO_ADDR
// end ;
64547: LD_VAR 0 3
64551: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64552: LD_INT 0
64554: PPUSH
64555: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64556: LD_VAR 0 1
64560: NOT
64561: PUSH
64562: LD_VAR 0 1
64566: PUSH
64567: LD_INT 21
64569: PUSH
64570: LD_INT 2
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 23
64579: PUSH
64580: LD_INT 2
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PPUSH
64591: CALL_OW 69
64595: IN
64596: NOT
64597: OR
64598: IFFALSE 64602
// exit ;
64600: GO 64649
// for i = 1 to 3 do
64602: LD_ADDR_VAR 0 3
64606: PUSH
64607: DOUBLE
64608: LD_INT 1
64610: DEC
64611: ST_TO_ADDR
64612: LD_INT 3
64614: PUSH
64615: FOR_TO
64616: IFFALSE 64647
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64618: LD_VAR 0 1
64622: PPUSH
64623: CALL_OW 250
64627: PPUSH
64628: LD_VAR 0 1
64632: PPUSH
64633: CALL_OW 251
64637: PPUSH
64638: LD_INT 1
64640: PPUSH
64641: CALL_OW 453
64645: GO 64615
64647: POP
64648: POP
// end ;
64649: LD_VAR 0 2
64653: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64654: LD_INT 0
64656: PPUSH
64657: PPUSH
64658: PPUSH
64659: PPUSH
64660: PPUSH
64661: PPUSH
// if not unit or not enemy_unit then
64662: LD_VAR 0 1
64666: NOT
64667: PUSH
64668: LD_VAR 0 2
64672: NOT
64673: OR
64674: IFFALSE 64678
// exit ;
64676: GO 65145
// if GetLives ( i ) < 250 then
64678: LD_VAR 0 4
64682: PPUSH
64683: CALL_OW 256
64687: PUSH
64688: LD_INT 250
64690: LESS
64691: IFFALSE 64704
// begin ComAutodestruct ( i ) ;
64693: LD_VAR 0 4
64697: PPUSH
64698: CALL 64552 0 1
// exit ;
64702: GO 65145
// end ; x := GetX ( enemy_unit ) ;
64704: LD_ADDR_VAR 0 7
64708: PUSH
64709: LD_VAR 0 2
64713: PPUSH
64714: CALL_OW 250
64718: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64719: LD_ADDR_VAR 0 8
64723: PUSH
64724: LD_VAR 0 2
64728: PPUSH
64729: CALL_OW 251
64733: ST_TO_ADDR
// if not x or not y then
64734: LD_VAR 0 7
64738: NOT
64739: PUSH
64740: LD_VAR 0 8
64744: NOT
64745: OR
64746: IFFALSE 64750
// exit ;
64748: GO 65145
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64750: LD_ADDR_VAR 0 6
64754: PUSH
64755: LD_VAR 0 7
64759: PPUSH
64760: LD_INT 0
64762: PPUSH
64763: LD_INT 4
64765: PPUSH
64766: CALL_OW 272
64770: PUSH
64771: LD_VAR 0 8
64775: PPUSH
64776: LD_INT 0
64778: PPUSH
64779: LD_INT 4
64781: PPUSH
64782: CALL_OW 273
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_VAR 0 7
64795: PPUSH
64796: LD_INT 1
64798: PPUSH
64799: LD_INT 4
64801: PPUSH
64802: CALL_OW 272
64806: PUSH
64807: LD_VAR 0 8
64811: PPUSH
64812: LD_INT 1
64814: PPUSH
64815: LD_INT 4
64817: PPUSH
64818: CALL_OW 273
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_VAR 0 7
64831: PPUSH
64832: LD_INT 2
64834: PPUSH
64835: LD_INT 4
64837: PPUSH
64838: CALL_OW 272
64842: PUSH
64843: LD_VAR 0 8
64847: PPUSH
64848: LD_INT 2
64850: PPUSH
64851: LD_INT 4
64853: PPUSH
64854: CALL_OW 273
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_VAR 0 7
64867: PPUSH
64868: LD_INT 3
64870: PPUSH
64871: LD_INT 4
64873: PPUSH
64874: CALL_OW 272
64878: PUSH
64879: LD_VAR 0 8
64883: PPUSH
64884: LD_INT 3
64886: PPUSH
64887: LD_INT 4
64889: PPUSH
64890: CALL_OW 273
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_VAR 0 7
64903: PPUSH
64904: LD_INT 4
64906: PPUSH
64907: LD_INT 4
64909: PPUSH
64910: CALL_OW 272
64914: PUSH
64915: LD_VAR 0 8
64919: PPUSH
64920: LD_INT 4
64922: PPUSH
64923: LD_INT 4
64925: PPUSH
64926: CALL_OW 273
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_VAR 0 7
64939: PPUSH
64940: LD_INT 5
64942: PPUSH
64943: LD_INT 4
64945: PPUSH
64946: CALL_OW 272
64950: PUSH
64951: LD_VAR 0 8
64955: PPUSH
64956: LD_INT 5
64958: PPUSH
64959: LD_INT 4
64961: PPUSH
64962: CALL_OW 273
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: ST_TO_ADDR
// for i = tmp downto 1 do
64979: LD_ADDR_VAR 0 4
64983: PUSH
64984: DOUBLE
64985: LD_VAR 0 6
64989: INC
64990: ST_TO_ADDR
64991: LD_INT 1
64993: PUSH
64994: FOR_DOWNTO
64995: IFFALSE 65096
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64997: LD_VAR 0 6
65001: PUSH
65002: LD_VAR 0 4
65006: ARRAY
65007: PUSH
65008: LD_INT 1
65010: ARRAY
65011: PPUSH
65012: LD_VAR 0 6
65016: PUSH
65017: LD_VAR 0 4
65021: ARRAY
65022: PUSH
65023: LD_INT 2
65025: ARRAY
65026: PPUSH
65027: CALL_OW 488
65031: NOT
65032: PUSH
65033: LD_VAR 0 6
65037: PUSH
65038: LD_VAR 0 4
65042: ARRAY
65043: PUSH
65044: LD_INT 1
65046: ARRAY
65047: PPUSH
65048: LD_VAR 0 6
65052: PUSH
65053: LD_VAR 0 4
65057: ARRAY
65058: PUSH
65059: LD_INT 2
65061: ARRAY
65062: PPUSH
65063: CALL_OW 428
65067: PUSH
65068: LD_INT 0
65070: NONEQUAL
65071: OR
65072: IFFALSE 65094
// tmp := Delete ( tmp , i ) ;
65074: LD_ADDR_VAR 0 6
65078: PUSH
65079: LD_VAR 0 6
65083: PPUSH
65084: LD_VAR 0 4
65088: PPUSH
65089: CALL_OW 3
65093: ST_TO_ADDR
65094: GO 64994
65096: POP
65097: POP
// j := GetClosestHex ( unit , tmp ) ;
65098: LD_ADDR_VAR 0 5
65102: PUSH
65103: LD_VAR 0 1
65107: PPUSH
65108: LD_VAR 0 6
65112: PPUSH
65113: CALL 64400 0 2
65117: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65118: LD_VAR 0 1
65122: PPUSH
65123: LD_VAR 0 5
65127: PUSH
65128: LD_INT 1
65130: ARRAY
65131: PPUSH
65132: LD_VAR 0 5
65136: PUSH
65137: LD_INT 2
65139: ARRAY
65140: PPUSH
65141: CALL_OW 111
// end ;
65145: LD_VAR 0 3
65149: RET
// export function PrepareApemanSoldier ( ) ; begin
65150: LD_INT 0
65152: PPUSH
// uc_nation := 0 ;
65153: LD_ADDR_OWVAR 21
65157: PUSH
65158: LD_INT 0
65160: ST_TO_ADDR
// hc_sex := sex_male ;
65161: LD_ADDR_OWVAR 27
65165: PUSH
65166: LD_INT 1
65168: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65169: LD_ADDR_OWVAR 28
65173: PUSH
65174: LD_INT 15
65176: ST_TO_ADDR
// hc_gallery :=  ;
65177: LD_ADDR_OWVAR 33
65181: PUSH
65182: LD_STRING 
65184: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65185: LD_ADDR_OWVAR 31
65189: PUSH
65190: LD_INT 0
65192: PPUSH
65193: LD_INT 3
65195: PPUSH
65196: CALL_OW 12
65200: PUSH
65201: LD_INT 0
65203: PPUSH
65204: LD_INT 3
65206: PPUSH
65207: CALL_OW 12
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: ST_TO_ADDR
// end ;
65224: LD_VAR 0 1
65228: RET
// export function PrepareApemanEngineer ( ) ; begin
65229: LD_INT 0
65231: PPUSH
// uc_nation := 0 ;
65232: LD_ADDR_OWVAR 21
65236: PUSH
65237: LD_INT 0
65239: ST_TO_ADDR
// hc_sex := sex_male ;
65240: LD_ADDR_OWVAR 27
65244: PUSH
65245: LD_INT 1
65247: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65248: LD_ADDR_OWVAR 28
65252: PUSH
65253: LD_INT 16
65255: ST_TO_ADDR
// hc_gallery :=  ;
65256: LD_ADDR_OWVAR 33
65260: PUSH
65261: LD_STRING 
65263: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65264: LD_ADDR_OWVAR 31
65268: PUSH
65269: LD_INT 0
65271: PPUSH
65272: LD_INT 3
65274: PPUSH
65275: CALL_OW 12
65279: PUSH
65280: LD_INT 0
65282: PPUSH
65283: LD_INT 3
65285: PPUSH
65286: CALL_OW 12
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: LD_INT 0
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: ST_TO_ADDR
// end ;
65303: LD_VAR 0 1
65307: RET
// export function PrepareApeman ( agressivity ) ; begin
65308: LD_INT 0
65310: PPUSH
// uc_side := 0 ;
65311: LD_ADDR_OWVAR 20
65315: PUSH
65316: LD_INT 0
65318: ST_TO_ADDR
// uc_nation := 0 ;
65319: LD_ADDR_OWVAR 21
65323: PUSH
65324: LD_INT 0
65326: ST_TO_ADDR
// hc_sex := sex_male ;
65327: LD_ADDR_OWVAR 27
65331: PUSH
65332: LD_INT 1
65334: ST_TO_ADDR
// hc_class := class_apeman ;
65335: LD_ADDR_OWVAR 28
65339: PUSH
65340: LD_INT 12
65342: ST_TO_ADDR
// hc_gallery :=  ;
65343: LD_ADDR_OWVAR 33
65347: PUSH
65348: LD_STRING 
65350: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65351: LD_ADDR_OWVAR 35
65355: PUSH
65356: LD_VAR 0 1
65360: NEG
65361: PPUSH
65362: LD_VAR 0 1
65366: PPUSH
65367: CALL_OW 12
65371: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65372: LD_ADDR_OWVAR 31
65376: PUSH
65377: LD_INT 0
65379: PPUSH
65380: LD_INT 3
65382: PPUSH
65383: CALL_OW 12
65387: PUSH
65388: LD_INT 0
65390: PPUSH
65391: LD_INT 3
65393: PPUSH
65394: CALL_OW 12
65398: PUSH
65399: LD_INT 0
65401: PUSH
65402: LD_INT 0
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: ST_TO_ADDR
// end ;
65411: LD_VAR 0 2
65415: RET
// export function PrepareTiger ( agressivity ) ; begin
65416: LD_INT 0
65418: PPUSH
// uc_side := 0 ;
65419: LD_ADDR_OWVAR 20
65423: PUSH
65424: LD_INT 0
65426: ST_TO_ADDR
// uc_nation := 0 ;
65427: LD_ADDR_OWVAR 21
65431: PUSH
65432: LD_INT 0
65434: ST_TO_ADDR
// hc_class := class_tiger ;
65435: LD_ADDR_OWVAR 28
65439: PUSH
65440: LD_INT 14
65442: ST_TO_ADDR
// hc_gallery :=  ;
65443: LD_ADDR_OWVAR 33
65447: PUSH
65448: LD_STRING 
65450: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65451: LD_ADDR_OWVAR 35
65455: PUSH
65456: LD_VAR 0 1
65460: NEG
65461: PPUSH
65462: LD_VAR 0 1
65466: PPUSH
65467: CALL_OW 12
65471: ST_TO_ADDR
// end ;
65472: LD_VAR 0 2
65476: RET
// export function PrepareEnchidna ( ) ; begin
65477: LD_INT 0
65479: PPUSH
// uc_side := 0 ;
65480: LD_ADDR_OWVAR 20
65484: PUSH
65485: LD_INT 0
65487: ST_TO_ADDR
// uc_nation := 0 ;
65488: LD_ADDR_OWVAR 21
65492: PUSH
65493: LD_INT 0
65495: ST_TO_ADDR
// hc_class := class_baggie ;
65496: LD_ADDR_OWVAR 28
65500: PUSH
65501: LD_INT 13
65503: ST_TO_ADDR
// hc_gallery :=  ;
65504: LD_ADDR_OWVAR 33
65508: PUSH
65509: LD_STRING 
65511: ST_TO_ADDR
// end ;
65512: LD_VAR 0 1
65516: RET
// export function PrepareFrog ( ) ; begin
65517: LD_INT 0
65519: PPUSH
// uc_side := 0 ;
65520: LD_ADDR_OWVAR 20
65524: PUSH
65525: LD_INT 0
65527: ST_TO_ADDR
// uc_nation := 0 ;
65528: LD_ADDR_OWVAR 21
65532: PUSH
65533: LD_INT 0
65535: ST_TO_ADDR
// hc_class := class_frog ;
65536: LD_ADDR_OWVAR 28
65540: PUSH
65541: LD_INT 19
65543: ST_TO_ADDR
// hc_gallery :=  ;
65544: LD_ADDR_OWVAR 33
65548: PUSH
65549: LD_STRING 
65551: ST_TO_ADDR
// end ;
65552: LD_VAR 0 1
65556: RET
// export function PrepareFish ( ) ; begin
65557: LD_INT 0
65559: PPUSH
// uc_side := 0 ;
65560: LD_ADDR_OWVAR 20
65564: PUSH
65565: LD_INT 0
65567: ST_TO_ADDR
// uc_nation := 0 ;
65568: LD_ADDR_OWVAR 21
65572: PUSH
65573: LD_INT 0
65575: ST_TO_ADDR
// hc_class := class_fish ;
65576: LD_ADDR_OWVAR 28
65580: PUSH
65581: LD_INT 20
65583: ST_TO_ADDR
// hc_gallery :=  ;
65584: LD_ADDR_OWVAR 33
65588: PUSH
65589: LD_STRING 
65591: ST_TO_ADDR
// end ;
65592: LD_VAR 0 1
65596: RET
// export function PrepareBird ( ) ; begin
65597: LD_INT 0
65599: PPUSH
// uc_side := 0 ;
65600: LD_ADDR_OWVAR 20
65604: PUSH
65605: LD_INT 0
65607: ST_TO_ADDR
// uc_nation := 0 ;
65608: LD_ADDR_OWVAR 21
65612: PUSH
65613: LD_INT 0
65615: ST_TO_ADDR
// hc_class := class_phororhacos ;
65616: LD_ADDR_OWVAR 28
65620: PUSH
65621: LD_INT 18
65623: ST_TO_ADDR
// hc_gallery :=  ;
65624: LD_ADDR_OWVAR 33
65628: PUSH
65629: LD_STRING 
65631: ST_TO_ADDR
// end ;
65632: LD_VAR 0 1
65636: RET
// export function PrepareHorse ( ) ; begin
65637: LD_INT 0
65639: PPUSH
// uc_side := 0 ;
65640: LD_ADDR_OWVAR 20
65644: PUSH
65645: LD_INT 0
65647: ST_TO_ADDR
// uc_nation := 0 ;
65648: LD_ADDR_OWVAR 21
65652: PUSH
65653: LD_INT 0
65655: ST_TO_ADDR
// hc_class := class_horse ;
65656: LD_ADDR_OWVAR 28
65660: PUSH
65661: LD_INT 21
65663: ST_TO_ADDR
// hc_gallery :=  ;
65664: LD_ADDR_OWVAR 33
65668: PUSH
65669: LD_STRING 
65671: ST_TO_ADDR
// end ;
65672: LD_VAR 0 1
65676: RET
// export function PrepareMastodont ( ) ; begin
65677: LD_INT 0
65679: PPUSH
// uc_side := 0 ;
65680: LD_ADDR_OWVAR 20
65684: PUSH
65685: LD_INT 0
65687: ST_TO_ADDR
// uc_nation := 0 ;
65688: LD_ADDR_OWVAR 21
65692: PUSH
65693: LD_INT 0
65695: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65696: LD_ADDR_OWVAR 37
65700: PUSH
65701: LD_INT 31
65703: ST_TO_ADDR
// vc_control := control_rider ;
65704: LD_ADDR_OWVAR 38
65708: PUSH
65709: LD_INT 4
65711: ST_TO_ADDR
// end ;
65712: LD_VAR 0 1
65716: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65717: LD_INT 0
65719: PPUSH
65720: PPUSH
65721: PPUSH
// uc_side = 0 ;
65722: LD_ADDR_OWVAR 20
65726: PUSH
65727: LD_INT 0
65729: ST_TO_ADDR
// uc_nation = 0 ;
65730: LD_ADDR_OWVAR 21
65734: PUSH
65735: LD_INT 0
65737: ST_TO_ADDR
// InitHc_All ( ) ;
65738: CALL_OW 584
// InitVc ;
65742: CALL_OW 20
// if mastodonts then
65746: LD_VAR 0 6
65750: IFFALSE 65817
// for i = 1 to mastodonts do
65752: LD_ADDR_VAR 0 11
65756: PUSH
65757: DOUBLE
65758: LD_INT 1
65760: DEC
65761: ST_TO_ADDR
65762: LD_VAR 0 6
65766: PUSH
65767: FOR_TO
65768: IFFALSE 65815
// begin vc_chassis := 31 ;
65770: LD_ADDR_OWVAR 37
65774: PUSH
65775: LD_INT 31
65777: ST_TO_ADDR
// vc_control := control_rider ;
65778: LD_ADDR_OWVAR 38
65782: PUSH
65783: LD_INT 4
65785: ST_TO_ADDR
// animal := CreateVehicle ;
65786: LD_ADDR_VAR 0 12
65790: PUSH
65791: CALL_OW 45
65795: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65796: LD_VAR 0 12
65800: PPUSH
65801: LD_VAR 0 8
65805: PPUSH
65806: LD_INT 0
65808: PPUSH
65809: CALL 67945 0 3
// end ;
65813: GO 65767
65815: POP
65816: POP
// if horses then
65817: LD_VAR 0 5
65821: IFFALSE 65888
// for i = 1 to horses do
65823: LD_ADDR_VAR 0 11
65827: PUSH
65828: DOUBLE
65829: LD_INT 1
65831: DEC
65832: ST_TO_ADDR
65833: LD_VAR 0 5
65837: PUSH
65838: FOR_TO
65839: IFFALSE 65886
// begin hc_class := 21 ;
65841: LD_ADDR_OWVAR 28
65845: PUSH
65846: LD_INT 21
65848: ST_TO_ADDR
// hc_gallery :=  ;
65849: LD_ADDR_OWVAR 33
65853: PUSH
65854: LD_STRING 
65856: ST_TO_ADDR
// animal := CreateHuman ;
65857: LD_ADDR_VAR 0 12
65861: PUSH
65862: CALL_OW 44
65866: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65867: LD_VAR 0 12
65871: PPUSH
65872: LD_VAR 0 8
65876: PPUSH
65877: LD_INT 0
65879: PPUSH
65880: CALL 67945 0 3
// end ;
65884: GO 65838
65886: POP
65887: POP
// if birds then
65888: LD_VAR 0 1
65892: IFFALSE 65959
// for i = 1 to birds do
65894: LD_ADDR_VAR 0 11
65898: PUSH
65899: DOUBLE
65900: LD_INT 1
65902: DEC
65903: ST_TO_ADDR
65904: LD_VAR 0 1
65908: PUSH
65909: FOR_TO
65910: IFFALSE 65957
// begin hc_class := 18 ;
65912: LD_ADDR_OWVAR 28
65916: PUSH
65917: LD_INT 18
65919: ST_TO_ADDR
// hc_gallery =  ;
65920: LD_ADDR_OWVAR 33
65924: PUSH
65925: LD_STRING 
65927: ST_TO_ADDR
// animal := CreateHuman ;
65928: LD_ADDR_VAR 0 12
65932: PUSH
65933: CALL_OW 44
65937: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65938: LD_VAR 0 12
65942: PPUSH
65943: LD_VAR 0 8
65947: PPUSH
65948: LD_INT 0
65950: PPUSH
65951: CALL 67945 0 3
// end ;
65955: GO 65909
65957: POP
65958: POP
// if tigers then
65959: LD_VAR 0 2
65963: IFFALSE 66047
// for i = 1 to tigers do
65965: LD_ADDR_VAR 0 11
65969: PUSH
65970: DOUBLE
65971: LD_INT 1
65973: DEC
65974: ST_TO_ADDR
65975: LD_VAR 0 2
65979: PUSH
65980: FOR_TO
65981: IFFALSE 66045
// begin hc_class = class_tiger ;
65983: LD_ADDR_OWVAR 28
65987: PUSH
65988: LD_INT 14
65990: ST_TO_ADDR
// hc_gallery =  ;
65991: LD_ADDR_OWVAR 33
65995: PUSH
65996: LD_STRING 
65998: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65999: LD_ADDR_OWVAR 35
66003: PUSH
66004: LD_INT 7
66006: NEG
66007: PPUSH
66008: LD_INT 7
66010: PPUSH
66011: CALL_OW 12
66015: ST_TO_ADDR
// animal := CreateHuman ;
66016: LD_ADDR_VAR 0 12
66020: PUSH
66021: CALL_OW 44
66025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66026: LD_VAR 0 12
66030: PPUSH
66031: LD_VAR 0 8
66035: PPUSH
66036: LD_INT 0
66038: PPUSH
66039: CALL 67945 0 3
// end ;
66043: GO 65980
66045: POP
66046: POP
// if apemans then
66047: LD_VAR 0 3
66051: IFFALSE 66174
// for i = 1 to apemans do
66053: LD_ADDR_VAR 0 11
66057: PUSH
66058: DOUBLE
66059: LD_INT 1
66061: DEC
66062: ST_TO_ADDR
66063: LD_VAR 0 3
66067: PUSH
66068: FOR_TO
66069: IFFALSE 66172
// begin hc_class = class_apeman ;
66071: LD_ADDR_OWVAR 28
66075: PUSH
66076: LD_INT 12
66078: ST_TO_ADDR
// hc_gallery =  ;
66079: LD_ADDR_OWVAR 33
66083: PUSH
66084: LD_STRING 
66086: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66087: LD_ADDR_OWVAR 35
66091: PUSH
66092: LD_INT 2
66094: NEG
66095: PPUSH
66096: LD_INT 2
66098: PPUSH
66099: CALL_OW 12
66103: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66104: LD_ADDR_OWVAR 31
66108: PUSH
66109: LD_INT 1
66111: PPUSH
66112: LD_INT 3
66114: PPUSH
66115: CALL_OW 12
66119: PUSH
66120: LD_INT 1
66122: PPUSH
66123: LD_INT 3
66125: PPUSH
66126: CALL_OW 12
66130: PUSH
66131: LD_INT 0
66133: PUSH
66134: LD_INT 0
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: ST_TO_ADDR
// animal := CreateHuman ;
66143: LD_ADDR_VAR 0 12
66147: PUSH
66148: CALL_OW 44
66152: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66153: LD_VAR 0 12
66157: PPUSH
66158: LD_VAR 0 8
66162: PPUSH
66163: LD_INT 0
66165: PPUSH
66166: CALL 67945 0 3
// end ;
66170: GO 66068
66172: POP
66173: POP
// if enchidnas then
66174: LD_VAR 0 4
66178: IFFALSE 66245
// for i = 1 to enchidnas do
66180: LD_ADDR_VAR 0 11
66184: PUSH
66185: DOUBLE
66186: LD_INT 1
66188: DEC
66189: ST_TO_ADDR
66190: LD_VAR 0 4
66194: PUSH
66195: FOR_TO
66196: IFFALSE 66243
// begin hc_class = 13 ;
66198: LD_ADDR_OWVAR 28
66202: PUSH
66203: LD_INT 13
66205: ST_TO_ADDR
// hc_gallery =  ;
66206: LD_ADDR_OWVAR 33
66210: PUSH
66211: LD_STRING 
66213: ST_TO_ADDR
// animal := CreateHuman ;
66214: LD_ADDR_VAR 0 12
66218: PUSH
66219: CALL_OW 44
66223: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66224: LD_VAR 0 12
66228: PPUSH
66229: LD_VAR 0 8
66233: PPUSH
66234: LD_INT 0
66236: PPUSH
66237: CALL 67945 0 3
// end ;
66241: GO 66195
66243: POP
66244: POP
// if fishes then
66245: LD_VAR 0 7
66249: IFFALSE 66316
// for i = 1 to fishes do
66251: LD_ADDR_VAR 0 11
66255: PUSH
66256: DOUBLE
66257: LD_INT 1
66259: DEC
66260: ST_TO_ADDR
66261: LD_VAR 0 7
66265: PUSH
66266: FOR_TO
66267: IFFALSE 66314
// begin hc_class = 20 ;
66269: LD_ADDR_OWVAR 28
66273: PUSH
66274: LD_INT 20
66276: ST_TO_ADDR
// hc_gallery =  ;
66277: LD_ADDR_OWVAR 33
66281: PUSH
66282: LD_STRING 
66284: ST_TO_ADDR
// animal := CreateHuman ;
66285: LD_ADDR_VAR 0 12
66289: PUSH
66290: CALL_OW 44
66294: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66295: LD_VAR 0 12
66299: PPUSH
66300: LD_VAR 0 9
66304: PPUSH
66305: LD_INT 0
66307: PPUSH
66308: CALL 67945 0 3
// end ;
66312: GO 66266
66314: POP
66315: POP
// end ;
66316: LD_VAR 0 10
66320: RET
// export function WantHeal ( sci , unit ) ; begin
66321: LD_INT 0
66323: PPUSH
// if GetTaskList ( sci ) > 0 then
66324: LD_VAR 0 1
66328: PPUSH
66329: CALL_OW 437
66333: PUSH
66334: LD_INT 0
66336: GREATER
66337: IFFALSE 66407
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66339: LD_VAR 0 1
66343: PPUSH
66344: CALL_OW 437
66348: PUSH
66349: LD_INT 1
66351: ARRAY
66352: PUSH
66353: LD_INT 1
66355: ARRAY
66356: PUSH
66357: LD_STRING l
66359: EQUAL
66360: PUSH
66361: LD_VAR 0 1
66365: PPUSH
66366: CALL_OW 437
66370: PUSH
66371: LD_INT 1
66373: ARRAY
66374: PUSH
66375: LD_INT 4
66377: ARRAY
66378: PUSH
66379: LD_VAR 0 2
66383: EQUAL
66384: AND
66385: IFFALSE 66397
// result := true else
66387: LD_ADDR_VAR 0 3
66391: PUSH
66392: LD_INT 1
66394: ST_TO_ADDR
66395: GO 66405
// result := false ;
66397: LD_ADDR_VAR 0 3
66401: PUSH
66402: LD_INT 0
66404: ST_TO_ADDR
// end else
66405: GO 66415
// result := false ;
66407: LD_ADDR_VAR 0 3
66411: PUSH
66412: LD_INT 0
66414: ST_TO_ADDR
// end ;
66415: LD_VAR 0 3
66419: RET
// export function HealTarget ( sci ) ; begin
66420: LD_INT 0
66422: PPUSH
// if not sci then
66423: LD_VAR 0 1
66427: NOT
66428: IFFALSE 66432
// exit ;
66430: GO 66497
// result := 0 ;
66432: LD_ADDR_VAR 0 2
66436: PUSH
66437: LD_INT 0
66439: ST_TO_ADDR
// if GetTaskList ( sci ) then
66440: LD_VAR 0 1
66444: PPUSH
66445: CALL_OW 437
66449: IFFALSE 66497
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66451: LD_VAR 0 1
66455: PPUSH
66456: CALL_OW 437
66460: PUSH
66461: LD_INT 1
66463: ARRAY
66464: PUSH
66465: LD_INT 1
66467: ARRAY
66468: PUSH
66469: LD_STRING l
66471: EQUAL
66472: IFFALSE 66497
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66474: LD_ADDR_VAR 0 2
66478: PUSH
66479: LD_VAR 0 1
66483: PPUSH
66484: CALL_OW 437
66488: PUSH
66489: LD_INT 1
66491: ARRAY
66492: PUSH
66493: LD_INT 4
66495: ARRAY
66496: ST_TO_ADDR
// end ;
66497: LD_VAR 0 2
66501: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66502: LD_INT 0
66504: PPUSH
66505: PPUSH
66506: PPUSH
66507: PPUSH
// if not base_units then
66508: LD_VAR 0 1
66512: NOT
66513: IFFALSE 66517
// exit ;
66515: GO 66604
// result := false ;
66517: LD_ADDR_VAR 0 2
66521: PUSH
66522: LD_INT 0
66524: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66525: LD_ADDR_VAR 0 5
66529: PUSH
66530: LD_VAR 0 1
66534: PPUSH
66535: LD_INT 21
66537: PUSH
66538: LD_INT 3
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PPUSH
66545: CALL_OW 72
66549: ST_TO_ADDR
// if not tmp then
66550: LD_VAR 0 5
66554: NOT
66555: IFFALSE 66559
// exit ;
66557: GO 66604
// for i in tmp do
66559: LD_ADDR_VAR 0 3
66563: PUSH
66564: LD_VAR 0 5
66568: PUSH
66569: FOR_IN
66570: IFFALSE 66602
// begin result := EnemyInRange ( i , 22 ) ;
66572: LD_ADDR_VAR 0 2
66576: PUSH
66577: LD_VAR 0 3
66581: PPUSH
66582: LD_INT 22
66584: PPUSH
66585: CALL 64202 0 2
66589: ST_TO_ADDR
// if result then
66590: LD_VAR 0 2
66594: IFFALSE 66600
// exit ;
66596: POP
66597: POP
66598: GO 66604
// end ;
66600: GO 66569
66602: POP
66603: POP
// end ;
66604: LD_VAR 0 2
66608: RET
// export function FilterByTag ( units , tag ) ; begin
66609: LD_INT 0
66611: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66612: LD_ADDR_VAR 0 3
66616: PUSH
66617: LD_VAR 0 1
66621: PPUSH
66622: LD_INT 120
66624: PUSH
66625: LD_VAR 0 2
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PPUSH
66634: CALL_OW 72
66638: ST_TO_ADDR
// end ;
66639: LD_VAR 0 3
66643: RET
// export function IsDriver ( un ) ; begin
66644: LD_INT 0
66646: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66647: LD_ADDR_VAR 0 2
66651: PUSH
66652: LD_VAR 0 1
66656: PUSH
66657: LD_INT 55
66659: PUSH
66660: EMPTY
66661: LIST
66662: PPUSH
66663: CALL_OW 69
66667: IN
66668: ST_TO_ADDR
// end ;
66669: LD_VAR 0 2
66673: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66674: LD_INT 0
66676: PPUSH
66677: PPUSH
// list := [ ] ;
66678: LD_ADDR_VAR 0 5
66682: PUSH
66683: EMPTY
66684: ST_TO_ADDR
// case d of 0 :
66685: LD_VAR 0 3
66689: PUSH
66690: LD_INT 0
66692: DOUBLE
66693: EQUAL
66694: IFTRUE 66698
66696: GO 66831
66698: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66699: LD_ADDR_VAR 0 5
66703: PUSH
66704: LD_VAR 0 1
66708: PUSH
66709: LD_INT 4
66711: MINUS
66712: PUSH
66713: LD_VAR 0 2
66717: PUSH
66718: LD_INT 4
66720: MINUS
66721: PUSH
66722: LD_INT 2
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: LIST
66729: PUSH
66730: LD_VAR 0 1
66734: PUSH
66735: LD_INT 3
66737: MINUS
66738: PUSH
66739: LD_VAR 0 2
66743: PUSH
66744: LD_INT 1
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: LIST
66751: PUSH
66752: LD_VAR 0 1
66756: PUSH
66757: LD_INT 4
66759: PLUS
66760: PUSH
66761: LD_VAR 0 2
66765: PUSH
66766: LD_INT 4
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: LIST
66773: PUSH
66774: LD_VAR 0 1
66778: PUSH
66779: LD_INT 3
66781: PLUS
66782: PUSH
66783: LD_VAR 0 2
66787: PUSH
66788: LD_INT 3
66790: PLUS
66791: PUSH
66792: LD_INT 5
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: LIST
66799: PUSH
66800: LD_VAR 0 1
66804: PUSH
66805: LD_VAR 0 2
66809: PUSH
66810: LD_INT 4
66812: PLUS
66813: PUSH
66814: LD_INT 0
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: LIST
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: ST_TO_ADDR
// end ; 1 :
66829: GO 67529
66831: LD_INT 1
66833: DOUBLE
66834: EQUAL
66835: IFTRUE 66839
66837: GO 66972
66839: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66840: LD_ADDR_VAR 0 5
66844: PUSH
66845: LD_VAR 0 1
66849: PUSH
66850: LD_VAR 0 2
66854: PUSH
66855: LD_INT 4
66857: MINUS
66858: PUSH
66859: LD_INT 3
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: LIST
66866: PUSH
66867: LD_VAR 0 1
66871: PUSH
66872: LD_INT 3
66874: MINUS
66875: PUSH
66876: LD_VAR 0 2
66880: PUSH
66881: LD_INT 3
66883: MINUS
66884: PUSH
66885: LD_INT 2
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: LIST
66892: PUSH
66893: LD_VAR 0 1
66897: PUSH
66898: LD_INT 4
66900: MINUS
66901: PUSH
66902: LD_VAR 0 2
66906: PUSH
66907: LD_INT 1
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: LIST
66914: PUSH
66915: LD_VAR 0 1
66919: PUSH
66920: LD_VAR 0 2
66924: PUSH
66925: LD_INT 3
66927: PLUS
66928: PUSH
66929: LD_INT 0
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: LIST
66936: PUSH
66937: LD_VAR 0 1
66941: PUSH
66942: LD_INT 4
66944: PLUS
66945: PUSH
66946: LD_VAR 0 2
66950: PUSH
66951: LD_INT 4
66953: PLUS
66954: PUSH
66955: LD_INT 5
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: LIST
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: ST_TO_ADDR
// end ; 2 :
66970: GO 67529
66972: LD_INT 2
66974: DOUBLE
66975: EQUAL
66976: IFTRUE 66980
66978: GO 67109
66980: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66981: LD_ADDR_VAR 0 5
66985: PUSH
66986: LD_VAR 0 1
66990: PUSH
66991: LD_VAR 0 2
66995: PUSH
66996: LD_INT 3
66998: MINUS
66999: PUSH
67000: LD_INT 3
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: LIST
67007: PUSH
67008: LD_VAR 0 1
67012: PUSH
67013: LD_INT 4
67015: PLUS
67016: PUSH
67017: LD_VAR 0 2
67021: PUSH
67022: LD_INT 4
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: LIST
67029: PUSH
67030: LD_VAR 0 1
67034: PUSH
67035: LD_VAR 0 2
67039: PUSH
67040: LD_INT 4
67042: PLUS
67043: PUSH
67044: LD_INT 0
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: LIST
67051: PUSH
67052: LD_VAR 0 1
67056: PUSH
67057: LD_INT 3
67059: MINUS
67060: PUSH
67061: LD_VAR 0 2
67065: PUSH
67066: LD_INT 1
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: LIST
67073: PUSH
67074: LD_VAR 0 1
67078: PUSH
67079: LD_INT 4
67081: MINUS
67082: PUSH
67083: LD_VAR 0 2
67087: PUSH
67088: LD_INT 4
67090: MINUS
67091: PUSH
67092: LD_INT 2
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: LIST
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: ST_TO_ADDR
// end ; 3 :
67107: GO 67529
67109: LD_INT 3
67111: DOUBLE
67112: EQUAL
67113: IFTRUE 67117
67115: GO 67250
67117: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67118: LD_ADDR_VAR 0 5
67122: PUSH
67123: LD_VAR 0 1
67127: PUSH
67128: LD_INT 3
67130: PLUS
67131: PUSH
67132: LD_VAR 0 2
67136: PUSH
67137: LD_INT 4
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: LIST
67144: PUSH
67145: LD_VAR 0 1
67149: PUSH
67150: LD_INT 4
67152: PLUS
67153: PUSH
67154: LD_VAR 0 2
67158: PUSH
67159: LD_INT 4
67161: PLUS
67162: PUSH
67163: LD_INT 5
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: LIST
67170: PUSH
67171: LD_VAR 0 1
67175: PUSH
67176: LD_INT 4
67178: MINUS
67179: PUSH
67180: LD_VAR 0 2
67184: PUSH
67185: LD_INT 1
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: LIST
67192: PUSH
67193: LD_VAR 0 1
67197: PUSH
67198: LD_VAR 0 2
67202: PUSH
67203: LD_INT 4
67205: MINUS
67206: PUSH
67207: LD_INT 3
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: LIST
67214: PUSH
67215: LD_VAR 0 1
67219: PUSH
67220: LD_INT 3
67222: MINUS
67223: PUSH
67224: LD_VAR 0 2
67228: PUSH
67229: LD_INT 3
67231: MINUS
67232: PUSH
67233: LD_INT 2
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: LIST
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: ST_TO_ADDR
// end ; 4 :
67248: GO 67529
67250: LD_INT 4
67252: DOUBLE
67253: EQUAL
67254: IFTRUE 67258
67256: GO 67391
67258: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67259: LD_ADDR_VAR 0 5
67263: PUSH
67264: LD_VAR 0 1
67268: PUSH
67269: LD_VAR 0 2
67273: PUSH
67274: LD_INT 4
67276: PLUS
67277: PUSH
67278: LD_INT 0
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: LIST
67285: PUSH
67286: LD_VAR 0 1
67290: PUSH
67291: LD_INT 3
67293: PLUS
67294: PUSH
67295: LD_VAR 0 2
67299: PUSH
67300: LD_INT 3
67302: PLUS
67303: PUSH
67304: LD_INT 5
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: LIST
67311: PUSH
67312: LD_VAR 0 1
67316: PUSH
67317: LD_INT 4
67319: PLUS
67320: PUSH
67321: LD_VAR 0 2
67325: PUSH
67326: LD_INT 4
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: LIST
67333: PUSH
67334: LD_VAR 0 1
67338: PUSH
67339: LD_VAR 0 2
67343: PUSH
67344: LD_INT 3
67346: MINUS
67347: PUSH
67348: LD_INT 3
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: LIST
67355: PUSH
67356: LD_VAR 0 1
67360: PUSH
67361: LD_INT 4
67363: MINUS
67364: PUSH
67365: LD_VAR 0 2
67369: PUSH
67370: LD_INT 4
67372: MINUS
67373: PUSH
67374: LD_INT 2
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: LIST
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: ST_TO_ADDR
// end ; 5 :
67389: GO 67529
67391: LD_INT 5
67393: DOUBLE
67394: EQUAL
67395: IFTRUE 67399
67397: GO 67528
67399: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67400: LD_ADDR_VAR 0 5
67404: PUSH
67405: LD_VAR 0 1
67409: PUSH
67410: LD_INT 4
67412: MINUS
67413: PUSH
67414: LD_VAR 0 2
67418: PUSH
67419: LD_INT 1
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: LIST
67426: PUSH
67427: LD_VAR 0 1
67431: PUSH
67432: LD_VAR 0 2
67436: PUSH
67437: LD_INT 4
67439: MINUS
67440: PUSH
67441: LD_INT 3
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: LIST
67448: PUSH
67449: LD_VAR 0 1
67453: PUSH
67454: LD_INT 4
67456: PLUS
67457: PUSH
67458: LD_VAR 0 2
67462: PUSH
67463: LD_INT 4
67465: PLUS
67466: PUSH
67467: LD_INT 5
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: LIST
67474: PUSH
67475: LD_VAR 0 1
67479: PUSH
67480: LD_INT 3
67482: PLUS
67483: PUSH
67484: LD_VAR 0 2
67488: PUSH
67489: LD_INT 4
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: LIST
67496: PUSH
67497: LD_VAR 0 1
67501: PUSH
67502: LD_VAR 0 2
67506: PUSH
67507: LD_INT 3
67509: PLUS
67510: PUSH
67511: LD_INT 0
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: LIST
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: ST_TO_ADDR
// end ; end ;
67526: GO 67529
67528: POP
// result := list ;
67529: LD_ADDR_VAR 0 4
67533: PUSH
67534: LD_VAR 0 5
67538: ST_TO_ADDR
// end ;
67539: LD_VAR 0 4
67543: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67544: LD_INT 0
67546: PPUSH
67547: PPUSH
67548: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67549: LD_VAR 0 1
67553: NOT
67554: PUSH
67555: LD_VAR 0 2
67559: PUSH
67560: LD_INT 1
67562: PUSH
67563: LD_INT 2
67565: PUSH
67566: LD_INT 3
67568: PUSH
67569: LD_INT 4
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: IN
67578: NOT
67579: OR
67580: IFFALSE 67584
// exit ;
67582: GO 67667
// tmp := [ ] ;
67584: LD_ADDR_VAR 0 5
67588: PUSH
67589: EMPTY
67590: ST_TO_ADDR
// for i in units do
67591: LD_ADDR_VAR 0 4
67595: PUSH
67596: LD_VAR 0 1
67600: PUSH
67601: FOR_IN
67602: IFFALSE 67636
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67604: LD_ADDR_VAR 0 5
67608: PUSH
67609: LD_VAR 0 5
67613: PPUSH
67614: LD_VAR 0 4
67618: PPUSH
67619: LD_VAR 0 2
67623: PPUSH
67624: CALL_OW 259
67628: PPUSH
67629: CALL 69040 0 2
67633: ST_TO_ADDR
67634: GO 67601
67636: POP
67637: POP
// if not tmp then
67638: LD_VAR 0 5
67642: NOT
67643: IFFALSE 67647
// exit ;
67645: GO 67667
// result := SortListByListDesc ( units , tmp ) ;
67647: LD_ADDR_VAR 0 3
67651: PUSH
67652: LD_VAR 0 1
67656: PPUSH
67657: LD_VAR 0 5
67661: PPUSH
67662: CALL_OW 77
67666: ST_TO_ADDR
// end ;
67667: LD_VAR 0 3
67671: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67672: LD_INT 0
67674: PPUSH
67675: PPUSH
67676: PPUSH
// result := false ;
67677: LD_ADDR_VAR 0 3
67681: PUSH
67682: LD_INT 0
67684: ST_TO_ADDR
// if not building then
67685: LD_VAR 0 2
67689: NOT
67690: IFFALSE 67694
// exit ;
67692: GO 67832
// x := GetX ( building ) ;
67694: LD_ADDR_VAR 0 4
67698: PUSH
67699: LD_VAR 0 2
67703: PPUSH
67704: CALL_OW 250
67708: ST_TO_ADDR
// y := GetY ( building ) ;
67709: LD_ADDR_VAR 0 5
67713: PUSH
67714: LD_VAR 0 2
67718: PPUSH
67719: CALL_OW 251
67723: ST_TO_ADDR
// if not x or not y then
67724: LD_VAR 0 4
67728: NOT
67729: PUSH
67730: LD_VAR 0 5
67734: NOT
67735: OR
67736: IFFALSE 67740
// exit ;
67738: GO 67832
// if GetTaskList ( unit ) then
67740: LD_VAR 0 1
67744: PPUSH
67745: CALL_OW 437
67749: IFFALSE 67832
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67751: LD_STRING e
67753: PUSH
67754: LD_VAR 0 1
67758: PPUSH
67759: CALL_OW 437
67763: PUSH
67764: LD_INT 1
67766: ARRAY
67767: PUSH
67768: LD_INT 1
67770: ARRAY
67771: EQUAL
67772: PUSH
67773: LD_VAR 0 4
67777: PUSH
67778: LD_VAR 0 1
67782: PPUSH
67783: CALL_OW 437
67787: PUSH
67788: LD_INT 1
67790: ARRAY
67791: PUSH
67792: LD_INT 2
67794: ARRAY
67795: EQUAL
67796: AND
67797: PUSH
67798: LD_VAR 0 5
67802: PUSH
67803: LD_VAR 0 1
67807: PPUSH
67808: CALL_OW 437
67812: PUSH
67813: LD_INT 1
67815: ARRAY
67816: PUSH
67817: LD_INT 3
67819: ARRAY
67820: EQUAL
67821: AND
67822: IFFALSE 67832
// result := true end ;
67824: LD_ADDR_VAR 0 3
67828: PUSH
67829: LD_INT 1
67831: ST_TO_ADDR
// end ;
67832: LD_VAR 0 3
67836: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67837: LD_INT 0
67839: PPUSH
// result := false ;
67840: LD_ADDR_VAR 0 4
67844: PUSH
67845: LD_INT 0
67847: ST_TO_ADDR
// if GetTaskList ( unit ) then
67848: LD_VAR 0 1
67852: PPUSH
67853: CALL_OW 437
67857: IFFALSE 67940
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67859: LD_STRING M
67861: PUSH
67862: LD_VAR 0 1
67866: PPUSH
67867: CALL_OW 437
67871: PUSH
67872: LD_INT 1
67874: ARRAY
67875: PUSH
67876: LD_INT 1
67878: ARRAY
67879: EQUAL
67880: PUSH
67881: LD_VAR 0 2
67885: PUSH
67886: LD_VAR 0 1
67890: PPUSH
67891: CALL_OW 437
67895: PUSH
67896: LD_INT 1
67898: ARRAY
67899: PUSH
67900: LD_INT 2
67902: ARRAY
67903: EQUAL
67904: AND
67905: PUSH
67906: LD_VAR 0 3
67910: PUSH
67911: LD_VAR 0 1
67915: PPUSH
67916: CALL_OW 437
67920: PUSH
67921: LD_INT 1
67923: ARRAY
67924: PUSH
67925: LD_INT 3
67927: ARRAY
67928: EQUAL
67929: AND
67930: IFFALSE 67940
// result := true ;
67932: LD_ADDR_VAR 0 4
67936: PUSH
67937: LD_INT 1
67939: ST_TO_ADDR
// end ; end ;
67940: LD_VAR 0 4
67944: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67945: LD_INT 0
67947: PPUSH
67948: PPUSH
67949: PPUSH
67950: PPUSH
// if not unit or not area then
67951: LD_VAR 0 1
67955: NOT
67956: PUSH
67957: LD_VAR 0 2
67961: NOT
67962: OR
67963: IFFALSE 67967
// exit ;
67965: GO 68143
// tmp := AreaToList ( area , i ) ;
67967: LD_ADDR_VAR 0 6
67971: PUSH
67972: LD_VAR 0 2
67976: PPUSH
67977: LD_VAR 0 5
67981: PPUSH
67982: CALL_OW 517
67986: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67987: LD_ADDR_VAR 0 5
67991: PUSH
67992: DOUBLE
67993: LD_INT 1
67995: DEC
67996: ST_TO_ADDR
67997: LD_VAR 0 6
68001: PUSH
68002: LD_INT 1
68004: ARRAY
68005: PUSH
68006: FOR_TO
68007: IFFALSE 68141
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68009: LD_ADDR_VAR 0 7
68013: PUSH
68014: LD_VAR 0 6
68018: PUSH
68019: LD_INT 1
68021: ARRAY
68022: PUSH
68023: LD_VAR 0 5
68027: ARRAY
68028: PUSH
68029: LD_VAR 0 6
68033: PUSH
68034: LD_INT 2
68036: ARRAY
68037: PUSH
68038: LD_VAR 0 5
68042: ARRAY
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68048: LD_INT 92
68050: PUSH
68051: LD_VAR 0 7
68055: PUSH
68056: LD_INT 1
68058: ARRAY
68059: PUSH
68060: LD_VAR 0 7
68064: PUSH
68065: LD_INT 2
68067: ARRAY
68068: PUSH
68069: LD_INT 2
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: PPUSH
68078: CALL_OW 69
68082: PUSH
68083: LD_INT 0
68085: EQUAL
68086: IFFALSE 68139
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68088: LD_VAR 0 1
68092: PPUSH
68093: LD_VAR 0 7
68097: PUSH
68098: LD_INT 1
68100: ARRAY
68101: PPUSH
68102: LD_VAR 0 7
68106: PUSH
68107: LD_INT 2
68109: ARRAY
68110: PPUSH
68111: LD_VAR 0 3
68115: PPUSH
68116: CALL_OW 48
// result := IsPlaced ( unit ) ;
68120: LD_ADDR_VAR 0 4
68124: PUSH
68125: LD_VAR 0 1
68129: PPUSH
68130: CALL_OW 305
68134: ST_TO_ADDR
// exit ;
68135: POP
68136: POP
68137: GO 68143
// end ; end ;
68139: GO 68006
68141: POP
68142: POP
// end ;
68143: LD_VAR 0 4
68147: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68148: LD_INT 0
68150: PPUSH
68151: PPUSH
68152: PPUSH
// if not side or side > 8 then
68153: LD_VAR 0 1
68157: NOT
68158: PUSH
68159: LD_VAR 0 1
68163: PUSH
68164: LD_INT 8
68166: GREATER
68167: OR
68168: IFFALSE 68172
// exit ;
68170: GO 68359
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68172: LD_ADDR_VAR 0 4
68176: PUSH
68177: LD_INT 22
68179: PUSH
68180: LD_VAR 0 1
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 21
68191: PUSH
68192: LD_INT 3
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PPUSH
68203: CALL_OW 69
68207: ST_TO_ADDR
// if not tmp then
68208: LD_VAR 0 4
68212: NOT
68213: IFFALSE 68217
// exit ;
68215: GO 68359
// enable_addtolog := true ;
68217: LD_ADDR_OWVAR 81
68221: PUSH
68222: LD_INT 1
68224: ST_TO_ADDR
// AddToLog ( [ ) ;
68225: LD_STRING [
68227: PPUSH
68228: CALL_OW 561
// for i in tmp do
68232: LD_ADDR_VAR 0 3
68236: PUSH
68237: LD_VAR 0 4
68241: PUSH
68242: FOR_IN
68243: IFFALSE 68350
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68245: LD_STRING [
68247: PUSH
68248: LD_VAR 0 3
68252: PPUSH
68253: CALL_OW 266
68257: STR
68258: PUSH
68259: LD_STRING , 
68261: STR
68262: PUSH
68263: LD_VAR 0 3
68267: PPUSH
68268: CALL_OW 250
68272: STR
68273: PUSH
68274: LD_STRING , 
68276: STR
68277: PUSH
68278: LD_VAR 0 3
68282: PPUSH
68283: CALL_OW 251
68287: STR
68288: PUSH
68289: LD_STRING , 
68291: STR
68292: PUSH
68293: LD_VAR 0 3
68297: PPUSH
68298: CALL_OW 254
68302: STR
68303: PUSH
68304: LD_STRING , 
68306: STR
68307: PUSH
68308: LD_VAR 0 3
68312: PPUSH
68313: LD_INT 1
68315: PPUSH
68316: CALL_OW 268
68320: STR
68321: PUSH
68322: LD_STRING , 
68324: STR
68325: PUSH
68326: LD_VAR 0 3
68330: PPUSH
68331: LD_INT 2
68333: PPUSH
68334: CALL_OW 268
68338: STR
68339: PUSH
68340: LD_STRING ],
68342: STR
68343: PPUSH
68344: CALL_OW 561
// end ;
68348: GO 68242
68350: POP
68351: POP
// AddToLog ( ]; ) ;
68352: LD_STRING ];
68354: PPUSH
68355: CALL_OW 561
// end ;
68359: LD_VAR 0 2
68363: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68364: LD_INT 0
68366: PPUSH
68367: PPUSH
68368: PPUSH
68369: PPUSH
68370: PPUSH
// if not area or not rate or not max then
68371: LD_VAR 0 1
68375: NOT
68376: PUSH
68377: LD_VAR 0 2
68381: NOT
68382: OR
68383: PUSH
68384: LD_VAR 0 4
68388: NOT
68389: OR
68390: IFFALSE 68394
// exit ;
68392: GO 68583
// while 1 do
68394: LD_INT 1
68396: IFFALSE 68583
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68398: LD_ADDR_VAR 0 9
68402: PUSH
68403: LD_VAR 0 1
68407: PPUSH
68408: LD_INT 1
68410: PPUSH
68411: CALL_OW 287
68415: PUSH
68416: LD_INT 10
68418: MUL
68419: ST_TO_ADDR
// r := rate / 10 ;
68420: LD_ADDR_VAR 0 7
68424: PUSH
68425: LD_VAR 0 2
68429: PUSH
68430: LD_INT 10
68432: DIVREAL
68433: ST_TO_ADDR
// time := 1 1$00 ;
68434: LD_ADDR_VAR 0 8
68438: PUSH
68439: LD_INT 2100
68441: ST_TO_ADDR
// if amount < min then
68442: LD_VAR 0 9
68446: PUSH
68447: LD_VAR 0 3
68451: LESS
68452: IFFALSE 68470
// r := r * 2 else
68454: LD_ADDR_VAR 0 7
68458: PUSH
68459: LD_VAR 0 7
68463: PUSH
68464: LD_INT 2
68466: MUL
68467: ST_TO_ADDR
68468: GO 68496
// if amount > max then
68470: LD_VAR 0 9
68474: PUSH
68475: LD_VAR 0 4
68479: GREATER
68480: IFFALSE 68496
// r := r / 2 ;
68482: LD_ADDR_VAR 0 7
68486: PUSH
68487: LD_VAR 0 7
68491: PUSH
68492: LD_INT 2
68494: DIVREAL
68495: ST_TO_ADDR
// time := time / r ;
68496: LD_ADDR_VAR 0 8
68500: PUSH
68501: LD_VAR 0 8
68505: PUSH
68506: LD_VAR 0 7
68510: DIVREAL
68511: ST_TO_ADDR
// if time < 0 then
68512: LD_VAR 0 8
68516: PUSH
68517: LD_INT 0
68519: LESS
68520: IFFALSE 68537
// time := time * - 1 ;
68522: LD_ADDR_VAR 0 8
68526: PUSH
68527: LD_VAR 0 8
68531: PUSH
68532: LD_INT 1
68534: NEG
68535: MUL
68536: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68537: LD_VAR 0 8
68541: PUSH
68542: LD_INT 35
68544: PPUSH
68545: LD_INT 875
68547: PPUSH
68548: CALL_OW 12
68552: PLUS
68553: PPUSH
68554: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68558: LD_INT 1
68560: PPUSH
68561: LD_INT 5
68563: PPUSH
68564: CALL_OW 12
68568: PPUSH
68569: LD_VAR 0 1
68573: PPUSH
68574: LD_INT 1
68576: PPUSH
68577: CALL_OW 55
// end ;
68581: GO 68394
// end ;
68583: LD_VAR 0 5
68587: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68588: LD_INT 0
68590: PPUSH
68591: PPUSH
68592: PPUSH
68593: PPUSH
68594: PPUSH
68595: PPUSH
68596: PPUSH
68597: PPUSH
// if not turrets or not factories then
68598: LD_VAR 0 1
68602: NOT
68603: PUSH
68604: LD_VAR 0 2
68608: NOT
68609: OR
68610: IFFALSE 68614
// exit ;
68612: GO 68921
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68614: LD_ADDR_VAR 0 10
68618: PUSH
68619: LD_INT 5
68621: PUSH
68622: LD_INT 6
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 2
68631: PUSH
68632: LD_INT 4
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 3
68641: PUSH
68642: LD_INT 5
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 24
68656: PUSH
68657: LD_INT 25
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 23
68666: PUSH
68667: LD_INT 27
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 42
68680: PUSH
68681: LD_INT 43
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 44
68690: PUSH
68691: LD_INT 46
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 45
68700: PUSH
68701: LD_INT 47
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: LIST
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: LIST
68717: ST_TO_ADDR
// result := [ ] ;
68718: LD_ADDR_VAR 0 3
68722: PUSH
68723: EMPTY
68724: ST_TO_ADDR
// for i in turrets do
68725: LD_ADDR_VAR 0 4
68729: PUSH
68730: LD_VAR 0 1
68734: PUSH
68735: FOR_IN
68736: IFFALSE 68919
// begin nat := GetNation ( i ) ;
68738: LD_ADDR_VAR 0 7
68742: PUSH
68743: LD_VAR 0 4
68747: PPUSH
68748: CALL_OW 248
68752: ST_TO_ADDR
// weapon := 0 ;
68753: LD_ADDR_VAR 0 8
68757: PUSH
68758: LD_INT 0
68760: ST_TO_ADDR
// if not nat then
68761: LD_VAR 0 7
68765: NOT
68766: IFFALSE 68770
// continue ;
68768: GO 68735
// for j in list [ nat ] do
68770: LD_ADDR_VAR 0 5
68774: PUSH
68775: LD_VAR 0 10
68779: PUSH
68780: LD_VAR 0 7
68784: ARRAY
68785: PUSH
68786: FOR_IN
68787: IFFALSE 68828
// if GetBWeapon ( i ) = j [ 1 ] then
68789: LD_VAR 0 4
68793: PPUSH
68794: CALL_OW 269
68798: PUSH
68799: LD_VAR 0 5
68803: PUSH
68804: LD_INT 1
68806: ARRAY
68807: EQUAL
68808: IFFALSE 68826
// begin weapon := j [ 2 ] ;
68810: LD_ADDR_VAR 0 8
68814: PUSH
68815: LD_VAR 0 5
68819: PUSH
68820: LD_INT 2
68822: ARRAY
68823: ST_TO_ADDR
// break ;
68824: GO 68828
// end ;
68826: GO 68786
68828: POP
68829: POP
// if not weapon then
68830: LD_VAR 0 8
68834: NOT
68835: IFFALSE 68839
// continue ;
68837: GO 68735
// for k in factories do
68839: LD_ADDR_VAR 0 6
68843: PUSH
68844: LD_VAR 0 2
68848: PUSH
68849: FOR_IN
68850: IFFALSE 68915
// begin weapons := AvailableWeaponList ( k ) ;
68852: LD_ADDR_VAR 0 9
68856: PUSH
68857: LD_VAR 0 6
68861: PPUSH
68862: CALL_OW 478
68866: ST_TO_ADDR
// if not weapons then
68867: LD_VAR 0 9
68871: NOT
68872: IFFALSE 68876
// continue ;
68874: GO 68849
// if weapon in weapons then
68876: LD_VAR 0 8
68880: PUSH
68881: LD_VAR 0 9
68885: IN
68886: IFFALSE 68913
// begin result := [ i , weapon ] ;
68888: LD_ADDR_VAR 0 3
68892: PUSH
68893: LD_VAR 0 4
68897: PUSH
68898: LD_VAR 0 8
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: ST_TO_ADDR
// exit ;
68907: POP
68908: POP
68909: POP
68910: POP
68911: GO 68921
// end ; end ;
68913: GO 68849
68915: POP
68916: POP
// end ;
68917: GO 68735
68919: POP
68920: POP
// end ;
68921: LD_VAR 0 3
68925: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68926: LD_INT 0
68928: PPUSH
// if not side or side > 8 then
68929: LD_VAR 0 3
68933: NOT
68934: PUSH
68935: LD_VAR 0 3
68939: PUSH
68940: LD_INT 8
68942: GREATER
68943: OR
68944: IFFALSE 68948
// exit ;
68946: GO 69007
// if not range then
68948: LD_VAR 0 4
68952: NOT
68953: IFFALSE 68964
// range := - 12 ;
68955: LD_ADDR_VAR 0 4
68959: PUSH
68960: LD_INT 12
68962: NEG
68963: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68964: LD_VAR 0 1
68968: PPUSH
68969: LD_VAR 0 2
68973: PPUSH
68974: LD_VAR 0 3
68978: PPUSH
68979: LD_VAR 0 4
68983: PPUSH
68984: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68988: LD_VAR 0 1
68992: PPUSH
68993: LD_VAR 0 2
68997: PPUSH
68998: LD_VAR 0 3
69002: PPUSH
69003: CALL_OW 331
// end ;
69007: LD_VAR 0 5
69011: RET
// export function Video ( mode ) ; begin
69012: LD_INT 0
69014: PPUSH
// ingame_video = mode ;
69015: LD_ADDR_OWVAR 52
69019: PUSH
69020: LD_VAR 0 1
69024: ST_TO_ADDR
// interface_hidden = mode ;
69025: LD_ADDR_OWVAR 54
69029: PUSH
69030: LD_VAR 0 1
69034: ST_TO_ADDR
// end ;
69035: LD_VAR 0 2
69039: RET
// export function Join ( array , element ) ; begin
69040: LD_INT 0
69042: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69043: LD_ADDR_VAR 0 3
69047: PUSH
69048: LD_VAR 0 1
69052: PPUSH
69053: LD_VAR 0 1
69057: PUSH
69058: LD_INT 1
69060: PLUS
69061: PPUSH
69062: LD_VAR 0 2
69066: PPUSH
69067: CALL_OW 1
69071: ST_TO_ADDR
// end ;
69072: LD_VAR 0 3
69076: RET
// export function JoinUnion ( array , element ) ; begin
69077: LD_INT 0
69079: PPUSH
// result := array union element ;
69080: LD_ADDR_VAR 0 3
69084: PUSH
69085: LD_VAR 0 1
69089: PUSH
69090: LD_VAR 0 2
69094: UNION
69095: ST_TO_ADDR
// end ;
69096: LD_VAR 0 3
69100: RET
// export function GetBehemoths ( side ) ; begin
69101: LD_INT 0
69103: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69104: LD_ADDR_VAR 0 2
69108: PUSH
69109: LD_INT 22
69111: PUSH
69112: LD_VAR 0 1
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 31
69123: PUSH
69124: LD_INT 25
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PPUSH
69135: CALL_OW 69
69139: ST_TO_ADDR
// end ;
69140: LD_VAR 0 2
69144: RET
// export function Shuffle ( array ) ; var i , index ; begin
69145: LD_INT 0
69147: PPUSH
69148: PPUSH
69149: PPUSH
// result := [ ] ;
69150: LD_ADDR_VAR 0 2
69154: PUSH
69155: EMPTY
69156: ST_TO_ADDR
// if not array then
69157: LD_VAR 0 1
69161: NOT
69162: IFFALSE 69166
// exit ;
69164: GO 69265
// Randomize ;
69166: CALL_OW 10
// for i = array downto 1 do
69170: LD_ADDR_VAR 0 3
69174: PUSH
69175: DOUBLE
69176: LD_VAR 0 1
69180: INC
69181: ST_TO_ADDR
69182: LD_INT 1
69184: PUSH
69185: FOR_DOWNTO
69186: IFFALSE 69263
// begin index := rand ( 1 , array ) ;
69188: LD_ADDR_VAR 0 4
69192: PUSH
69193: LD_INT 1
69195: PPUSH
69196: LD_VAR 0 1
69200: PPUSH
69201: CALL_OW 12
69205: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69206: LD_ADDR_VAR 0 2
69210: PUSH
69211: LD_VAR 0 2
69215: PPUSH
69216: LD_VAR 0 2
69220: PUSH
69221: LD_INT 1
69223: PLUS
69224: PPUSH
69225: LD_VAR 0 1
69229: PUSH
69230: LD_VAR 0 4
69234: ARRAY
69235: PPUSH
69236: CALL_OW 2
69240: ST_TO_ADDR
// array := Delete ( array , index ) ;
69241: LD_ADDR_VAR 0 1
69245: PUSH
69246: LD_VAR 0 1
69250: PPUSH
69251: LD_VAR 0 4
69255: PPUSH
69256: CALL_OW 3
69260: ST_TO_ADDR
// end ;
69261: GO 69185
69263: POP
69264: POP
// end ;
69265: LD_VAR 0 2
69269: RET
// export function GetBaseMaterials ( base ) ; begin
69270: LD_INT 0
69272: PPUSH
// result := [ 0 , 0 , 0 ] ;
69273: LD_ADDR_VAR 0 2
69277: PUSH
69278: LD_INT 0
69280: PUSH
69281: LD_INT 0
69283: PUSH
69284: LD_INT 0
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: LIST
69291: ST_TO_ADDR
// if not base then
69292: LD_VAR 0 1
69296: NOT
69297: IFFALSE 69301
// exit ;
69299: GO 69350
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69301: LD_ADDR_VAR 0 2
69305: PUSH
69306: LD_VAR 0 1
69310: PPUSH
69311: LD_INT 1
69313: PPUSH
69314: CALL_OW 275
69318: PUSH
69319: LD_VAR 0 1
69323: PPUSH
69324: LD_INT 2
69326: PPUSH
69327: CALL_OW 275
69331: PUSH
69332: LD_VAR 0 1
69336: PPUSH
69337: LD_INT 3
69339: PPUSH
69340: CALL_OW 275
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: LIST
69349: ST_TO_ADDR
// end ;
69350: LD_VAR 0 2
69354: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69355: LD_INT 0
69357: PPUSH
69358: PPUSH
// result := array ;
69359: LD_ADDR_VAR 0 3
69363: PUSH
69364: LD_VAR 0 1
69368: ST_TO_ADDR
// if size >= result then
69369: LD_VAR 0 2
69373: PUSH
69374: LD_VAR 0 3
69378: GREATEREQUAL
69379: IFFALSE 69383
// exit ;
69381: GO 69433
// if size then
69383: LD_VAR 0 2
69387: IFFALSE 69433
// for i := array downto size do
69389: LD_ADDR_VAR 0 4
69393: PUSH
69394: DOUBLE
69395: LD_VAR 0 1
69399: INC
69400: ST_TO_ADDR
69401: LD_VAR 0 2
69405: PUSH
69406: FOR_DOWNTO
69407: IFFALSE 69431
// result := Delete ( result , result ) ;
69409: LD_ADDR_VAR 0 3
69413: PUSH
69414: LD_VAR 0 3
69418: PPUSH
69419: LD_VAR 0 3
69423: PPUSH
69424: CALL_OW 3
69428: ST_TO_ADDR
69429: GO 69406
69431: POP
69432: POP
// end ;
69433: LD_VAR 0 3
69437: RET
// export function ComExit ( unit ) ; var tmp ; begin
69438: LD_INT 0
69440: PPUSH
69441: PPUSH
// if not IsInUnit ( unit ) then
69442: LD_VAR 0 1
69446: PPUSH
69447: CALL_OW 310
69451: NOT
69452: IFFALSE 69456
// exit ;
69454: GO 69516
// tmp := IsInUnit ( unit ) ;
69456: LD_ADDR_VAR 0 3
69460: PUSH
69461: LD_VAR 0 1
69465: PPUSH
69466: CALL_OW 310
69470: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69471: LD_VAR 0 3
69475: PPUSH
69476: CALL_OW 247
69480: PUSH
69481: LD_INT 2
69483: EQUAL
69484: IFFALSE 69497
// ComExitVehicle ( unit ) else
69486: LD_VAR 0 1
69490: PPUSH
69491: CALL_OW 121
69495: GO 69506
// ComExitBuilding ( unit ) ;
69497: LD_VAR 0 1
69501: PPUSH
69502: CALL_OW 122
// result := tmp ;
69506: LD_ADDR_VAR 0 2
69510: PUSH
69511: LD_VAR 0 3
69515: ST_TO_ADDR
// end ;
69516: LD_VAR 0 2
69520: RET
// export function ComExitAll ( units ) ; var i ; begin
69521: LD_INT 0
69523: PPUSH
69524: PPUSH
// if not units then
69525: LD_VAR 0 1
69529: NOT
69530: IFFALSE 69534
// exit ;
69532: GO 69560
// for i in units do
69534: LD_ADDR_VAR 0 3
69538: PUSH
69539: LD_VAR 0 1
69543: PUSH
69544: FOR_IN
69545: IFFALSE 69558
// ComExit ( i ) ;
69547: LD_VAR 0 3
69551: PPUSH
69552: CALL 69438 0 1
69556: GO 69544
69558: POP
69559: POP
// end ;
69560: LD_VAR 0 2
69564: RET
// export function ResetHc ; begin
69565: LD_INT 0
69567: PPUSH
// InitHc ;
69568: CALL_OW 19
// hc_importance := 0 ;
69572: LD_ADDR_OWVAR 32
69576: PUSH
69577: LD_INT 0
69579: ST_TO_ADDR
// end ;
69580: LD_VAR 0 1
69584: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69585: LD_INT 0
69587: PPUSH
69588: PPUSH
69589: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69590: LD_ADDR_VAR 0 6
69594: PUSH
69595: LD_VAR 0 1
69599: PUSH
69600: LD_VAR 0 3
69604: PLUS
69605: PUSH
69606: LD_INT 2
69608: DIV
69609: ST_TO_ADDR
// if _x < 0 then
69610: LD_VAR 0 6
69614: PUSH
69615: LD_INT 0
69617: LESS
69618: IFFALSE 69635
// _x := _x * - 1 ;
69620: LD_ADDR_VAR 0 6
69624: PUSH
69625: LD_VAR 0 6
69629: PUSH
69630: LD_INT 1
69632: NEG
69633: MUL
69634: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69635: LD_ADDR_VAR 0 7
69639: PUSH
69640: LD_VAR 0 2
69644: PUSH
69645: LD_VAR 0 4
69649: PLUS
69650: PUSH
69651: LD_INT 2
69653: DIV
69654: ST_TO_ADDR
// if _y < 0 then
69655: LD_VAR 0 7
69659: PUSH
69660: LD_INT 0
69662: LESS
69663: IFFALSE 69680
// _y := _y * - 1 ;
69665: LD_ADDR_VAR 0 7
69669: PUSH
69670: LD_VAR 0 7
69674: PUSH
69675: LD_INT 1
69677: NEG
69678: MUL
69679: ST_TO_ADDR
// result := [ _x , _y ] ;
69680: LD_ADDR_VAR 0 5
69684: PUSH
69685: LD_VAR 0 6
69689: PUSH
69690: LD_VAR 0 7
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: ST_TO_ADDR
// end ;
69699: LD_VAR 0 5
69703: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69704: LD_INT 0
69706: PPUSH
69707: PPUSH
69708: PPUSH
69709: PPUSH
// task := GetTaskList ( unit ) ;
69710: LD_ADDR_VAR 0 7
69714: PUSH
69715: LD_VAR 0 1
69719: PPUSH
69720: CALL_OW 437
69724: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69725: LD_VAR 0 7
69729: NOT
69730: PUSH
69731: LD_VAR 0 1
69735: PPUSH
69736: LD_VAR 0 2
69740: PPUSH
69741: CALL_OW 308
69745: NOT
69746: AND
69747: IFFALSE 69751
// exit ;
69749: GO 69869
// if IsInArea ( unit , area ) then
69751: LD_VAR 0 1
69755: PPUSH
69756: LD_VAR 0 2
69760: PPUSH
69761: CALL_OW 308
69765: IFFALSE 69783
// begin ComMoveToArea ( unit , goAway ) ;
69767: LD_VAR 0 1
69771: PPUSH
69772: LD_VAR 0 3
69776: PPUSH
69777: CALL_OW 113
// exit ;
69781: GO 69869
// end ; if task [ 1 ] [ 1 ] <> M then
69783: LD_VAR 0 7
69787: PUSH
69788: LD_INT 1
69790: ARRAY
69791: PUSH
69792: LD_INT 1
69794: ARRAY
69795: PUSH
69796: LD_STRING M
69798: NONEQUAL
69799: IFFALSE 69803
// exit ;
69801: GO 69869
// x := task [ 1 ] [ 2 ] ;
69803: LD_ADDR_VAR 0 5
69807: PUSH
69808: LD_VAR 0 7
69812: PUSH
69813: LD_INT 1
69815: ARRAY
69816: PUSH
69817: LD_INT 2
69819: ARRAY
69820: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69821: LD_ADDR_VAR 0 6
69825: PUSH
69826: LD_VAR 0 7
69830: PUSH
69831: LD_INT 1
69833: ARRAY
69834: PUSH
69835: LD_INT 3
69837: ARRAY
69838: ST_TO_ADDR
// if InArea ( x , y , area ) then
69839: LD_VAR 0 5
69843: PPUSH
69844: LD_VAR 0 6
69848: PPUSH
69849: LD_VAR 0 2
69853: PPUSH
69854: CALL_OW 309
69858: IFFALSE 69869
// ComStop ( unit ) ;
69860: LD_VAR 0 1
69864: PPUSH
69865: CALL_OW 141
// end ;
69869: LD_VAR 0 4
69873: RET
// export function Abs ( value ) ; begin
69874: LD_INT 0
69876: PPUSH
// result := value ;
69877: LD_ADDR_VAR 0 2
69881: PUSH
69882: LD_VAR 0 1
69886: ST_TO_ADDR
// if value < 0 then
69887: LD_VAR 0 1
69891: PUSH
69892: LD_INT 0
69894: LESS
69895: IFFALSE 69912
// result := value * - 1 ;
69897: LD_ADDR_VAR 0 2
69901: PUSH
69902: LD_VAR 0 1
69906: PUSH
69907: LD_INT 1
69909: NEG
69910: MUL
69911: ST_TO_ADDR
// end ;
69912: LD_VAR 0 2
69916: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69917: LD_INT 0
69919: PPUSH
69920: PPUSH
69921: PPUSH
69922: PPUSH
69923: PPUSH
69924: PPUSH
69925: PPUSH
69926: PPUSH
// if not unit or not building then
69927: LD_VAR 0 1
69931: NOT
69932: PUSH
69933: LD_VAR 0 2
69937: NOT
69938: OR
69939: IFFALSE 69943
// exit ;
69941: GO 70169
// x := GetX ( building ) ;
69943: LD_ADDR_VAR 0 4
69947: PUSH
69948: LD_VAR 0 2
69952: PPUSH
69953: CALL_OW 250
69957: ST_TO_ADDR
// y := GetY ( building ) ;
69958: LD_ADDR_VAR 0 6
69962: PUSH
69963: LD_VAR 0 2
69967: PPUSH
69968: CALL_OW 251
69972: ST_TO_ADDR
// d := GetDir ( building ) ;
69973: LD_ADDR_VAR 0 8
69977: PUSH
69978: LD_VAR 0 2
69982: PPUSH
69983: CALL_OW 254
69987: ST_TO_ADDR
// r := 4 ;
69988: LD_ADDR_VAR 0 9
69992: PUSH
69993: LD_INT 4
69995: ST_TO_ADDR
// for i := 1 to 5 do
69996: LD_ADDR_VAR 0 10
70000: PUSH
70001: DOUBLE
70002: LD_INT 1
70004: DEC
70005: ST_TO_ADDR
70006: LD_INT 5
70008: PUSH
70009: FOR_TO
70010: IFFALSE 70167
// begin _x := ShiftX ( x , d , r + i ) ;
70012: LD_ADDR_VAR 0 5
70016: PUSH
70017: LD_VAR 0 4
70021: PPUSH
70022: LD_VAR 0 8
70026: PPUSH
70027: LD_VAR 0 9
70031: PUSH
70032: LD_VAR 0 10
70036: PLUS
70037: PPUSH
70038: CALL_OW 272
70042: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70043: LD_ADDR_VAR 0 7
70047: PUSH
70048: LD_VAR 0 6
70052: PPUSH
70053: LD_VAR 0 8
70057: PPUSH
70058: LD_VAR 0 9
70062: PUSH
70063: LD_VAR 0 10
70067: PLUS
70068: PPUSH
70069: CALL_OW 273
70073: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70074: LD_VAR 0 5
70078: PPUSH
70079: LD_VAR 0 7
70083: PPUSH
70084: CALL_OW 488
70088: PUSH
70089: LD_VAR 0 5
70093: PPUSH
70094: LD_VAR 0 7
70098: PPUSH
70099: CALL_OW 428
70103: PPUSH
70104: CALL_OW 247
70108: PUSH
70109: LD_INT 3
70111: PUSH
70112: LD_INT 2
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: IN
70119: NOT
70120: AND
70121: IFFALSE 70165
// begin ComMoveXY ( unit , _x , _y ) ;
70123: LD_VAR 0 1
70127: PPUSH
70128: LD_VAR 0 5
70132: PPUSH
70133: LD_VAR 0 7
70137: PPUSH
70138: CALL_OW 111
// result := [ _x , _y ] ;
70142: LD_ADDR_VAR 0 3
70146: PUSH
70147: LD_VAR 0 5
70151: PUSH
70152: LD_VAR 0 7
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: ST_TO_ADDR
// exit ;
70161: POP
70162: POP
70163: GO 70169
// end ; end ;
70165: GO 70009
70167: POP
70168: POP
// end ;
70169: LD_VAR 0 3
70173: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70174: LD_INT 0
70176: PPUSH
70177: PPUSH
70178: PPUSH
// result := 0 ;
70179: LD_ADDR_VAR 0 3
70183: PUSH
70184: LD_INT 0
70186: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70187: LD_VAR 0 1
70191: PUSH
70192: LD_INT 0
70194: LESS
70195: PUSH
70196: LD_VAR 0 1
70200: PUSH
70201: LD_INT 8
70203: GREATER
70204: OR
70205: PUSH
70206: LD_VAR 0 2
70210: PUSH
70211: LD_INT 0
70213: LESS
70214: OR
70215: PUSH
70216: LD_VAR 0 2
70220: PUSH
70221: LD_INT 8
70223: GREATER
70224: OR
70225: IFFALSE 70229
// exit ;
70227: GO 70304
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70229: LD_ADDR_VAR 0 4
70233: PUSH
70234: LD_INT 22
70236: PUSH
70237: LD_VAR 0 2
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PPUSH
70246: CALL_OW 69
70250: PUSH
70251: FOR_IN
70252: IFFALSE 70302
// begin un := UnitShoot ( i ) ;
70254: LD_ADDR_VAR 0 5
70258: PUSH
70259: LD_VAR 0 4
70263: PPUSH
70264: CALL_OW 504
70268: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70269: LD_VAR 0 5
70273: PPUSH
70274: CALL_OW 255
70278: PUSH
70279: LD_VAR 0 1
70283: EQUAL
70284: IFFALSE 70300
// begin result := un ;
70286: LD_ADDR_VAR 0 3
70290: PUSH
70291: LD_VAR 0 5
70295: ST_TO_ADDR
// exit ;
70296: POP
70297: POP
70298: GO 70304
// end ; end ;
70300: GO 70251
70302: POP
70303: POP
// end ;
70304: LD_VAR 0 3
70308: RET
// export function GetCargoBay ( units ) ; begin
70309: LD_INT 0
70311: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70312: LD_ADDR_VAR 0 2
70316: PUSH
70317: LD_VAR 0 1
70321: PPUSH
70322: LD_INT 2
70324: PUSH
70325: LD_INT 34
70327: PUSH
70328: LD_INT 12
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 34
70337: PUSH
70338: LD_INT 51
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 34
70347: PUSH
70348: LD_INT 32
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 34
70357: PUSH
70358: LD_INT 89
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: PPUSH
70372: CALL_OW 72
70376: ST_TO_ADDR
// end ;
70377: LD_VAR 0 2
70381: RET
// export function Negate ( value ) ; begin
70382: LD_INT 0
70384: PPUSH
// result := not value ;
70385: LD_ADDR_VAR 0 2
70389: PUSH
70390: LD_VAR 0 1
70394: NOT
70395: ST_TO_ADDR
// end ;
70396: LD_VAR 0 2
70400: RET
// export function Inc ( value ) ; begin
70401: LD_INT 0
70403: PPUSH
// result := value + 1 ;
70404: LD_ADDR_VAR 0 2
70408: PUSH
70409: LD_VAR 0 1
70413: PUSH
70414: LD_INT 1
70416: PLUS
70417: ST_TO_ADDR
// end ;
70418: LD_VAR 0 2
70422: RET
// export function Dec ( value ) ; begin
70423: LD_INT 0
70425: PPUSH
// result := value - 1 ;
70426: LD_ADDR_VAR 0 2
70430: PUSH
70431: LD_VAR 0 1
70435: PUSH
70436: LD_INT 1
70438: MINUS
70439: ST_TO_ADDR
// end ;
70440: LD_VAR 0 2
70444: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70445: LD_INT 0
70447: PPUSH
70448: PPUSH
70449: PPUSH
70450: PPUSH
70451: PPUSH
70452: PPUSH
70453: PPUSH
70454: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70455: LD_VAR 0 1
70459: PPUSH
70460: LD_VAR 0 2
70464: PPUSH
70465: CALL_OW 488
70469: NOT
70470: PUSH
70471: LD_VAR 0 3
70475: PPUSH
70476: LD_VAR 0 4
70480: PPUSH
70481: CALL_OW 488
70485: NOT
70486: OR
70487: IFFALSE 70500
// begin result := - 1 ;
70489: LD_ADDR_VAR 0 5
70493: PUSH
70494: LD_INT 1
70496: NEG
70497: ST_TO_ADDR
// exit ;
70498: GO 70735
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70500: LD_ADDR_VAR 0 12
70504: PUSH
70505: LD_VAR 0 1
70509: PPUSH
70510: LD_VAR 0 2
70514: PPUSH
70515: LD_VAR 0 3
70519: PPUSH
70520: LD_VAR 0 4
70524: PPUSH
70525: CALL 69585 0 4
70529: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70530: LD_ADDR_VAR 0 11
70534: PUSH
70535: LD_VAR 0 1
70539: PPUSH
70540: LD_VAR 0 2
70544: PPUSH
70545: LD_VAR 0 12
70549: PUSH
70550: LD_INT 1
70552: ARRAY
70553: PPUSH
70554: LD_VAR 0 12
70558: PUSH
70559: LD_INT 2
70561: ARRAY
70562: PPUSH
70563: CALL_OW 298
70567: ST_TO_ADDR
// distance := 9999 ;
70568: LD_ADDR_VAR 0 10
70572: PUSH
70573: LD_INT 9999
70575: ST_TO_ADDR
// for i := 0 to 5 do
70576: LD_ADDR_VAR 0 6
70580: PUSH
70581: DOUBLE
70582: LD_INT 0
70584: DEC
70585: ST_TO_ADDR
70586: LD_INT 5
70588: PUSH
70589: FOR_TO
70590: IFFALSE 70733
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70592: LD_ADDR_VAR 0 7
70596: PUSH
70597: LD_VAR 0 1
70601: PPUSH
70602: LD_VAR 0 6
70606: PPUSH
70607: LD_VAR 0 11
70611: PPUSH
70612: CALL_OW 272
70616: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70617: LD_ADDR_VAR 0 8
70621: PUSH
70622: LD_VAR 0 2
70626: PPUSH
70627: LD_VAR 0 6
70631: PPUSH
70632: LD_VAR 0 11
70636: PPUSH
70637: CALL_OW 273
70641: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70642: LD_VAR 0 7
70646: PPUSH
70647: LD_VAR 0 8
70651: PPUSH
70652: CALL_OW 488
70656: NOT
70657: IFFALSE 70661
// continue ;
70659: GO 70589
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70661: LD_ADDR_VAR 0 9
70665: PUSH
70666: LD_VAR 0 12
70670: PUSH
70671: LD_INT 1
70673: ARRAY
70674: PPUSH
70675: LD_VAR 0 12
70679: PUSH
70680: LD_INT 2
70682: ARRAY
70683: PPUSH
70684: LD_VAR 0 7
70688: PPUSH
70689: LD_VAR 0 8
70693: PPUSH
70694: CALL_OW 298
70698: ST_TO_ADDR
// if tmp < distance then
70699: LD_VAR 0 9
70703: PUSH
70704: LD_VAR 0 10
70708: LESS
70709: IFFALSE 70731
// begin result := i ;
70711: LD_ADDR_VAR 0 5
70715: PUSH
70716: LD_VAR 0 6
70720: ST_TO_ADDR
// distance := tmp ;
70721: LD_ADDR_VAR 0 10
70725: PUSH
70726: LD_VAR 0 9
70730: ST_TO_ADDR
// end ; end ;
70731: GO 70589
70733: POP
70734: POP
// end ;
70735: LD_VAR 0 5
70739: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70740: LD_INT 0
70742: PPUSH
70743: PPUSH
// if not driver or not IsInUnit ( driver ) then
70744: LD_VAR 0 1
70748: NOT
70749: PUSH
70750: LD_VAR 0 1
70754: PPUSH
70755: CALL_OW 310
70759: NOT
70760: OR
70761: IFFALSE 70765
// exit ;
70763: GO 70855
// vehicle := IsInUnit ( driver ) ;
70765: LD_ADDR_VAR 0 3
70769: PUSH
70770: LD_VAR 0 1
70774: PPUSH
70775: CALL_OW 310
70779: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70780: LD_VAR 0 1
70784: PPUSH
70785: LD_STRING \
70787: PUSH
70788: LD_INT 0
70790: PUSH
70791: LD_INT 0
70793: PUSH
70794: LD_INT 0
70796: PUSH
70797: LD_INT 0
70799: PUSH
70800: LD_INT 0
70802: PUSH
70803: LD_INT 0
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: PUSH
70815: LD_STRING E
70817: PUSH
70818: LD_INT 0
70820: PUSH
70821: LD_INT 0
70823: PUSH
70824: LD_VAR 0 3
70828: PUSH
70829: LD_INT 0
70831: PUSH
70832: LD_INT 0
70834: PUSH
70835: LD_INT 0
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PPUSH
70851: CALL_OW 446
// end ;
70855: LD_VAR 0 2
70859: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70860: LD_INT 0
70862: PPUSH
70863: PPUSH
// if not driver or not IsInUnit ( driver ) then
70864: LD_VAR 0 1
70868: NOT
70869: PUSH
70870: LD_VAR 0 1
70874: PPUSH
70875: CALL_OW 310
70879: NOT
70880: OR
70881: IFFALSE 70885
// exit ;
70883: GO 70975
// vehicle := IsInUnit ( driver ) ;
70885: LD_ADDR_VAR 0 3
70889: PUSH
70890: LD_VAR 0 1
70894: PPUSH
70895: CALL_OW 310
70899: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70900: LD_VAR 0 1
70904: PPUSH
70905: LD_STRING \
70907: PUSH
70908: LD_INT 0
70910: PUSH
70911: LD_INT 0
70913: PUSH
70914: LD_INT 0
70916: PUSH
70917: LD_INT 0
70919: PUSH
70920: LD_INT 0
70922: PUSH
70923: LD_INT 0
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: PUSH
70935: LD_STRING E
70937: PUSH
70938: LD_INT 0
70940: PUSH
70941: LD_INT 0
70943: PUSH
70944: LD_VAR 0 3
70948: PUSH
70949: LD_INT 0
70951: PUSH
70952: LD_INT 0
70954: PUSH
70955: LD_INT 0
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: PPUSH
70971: CALL_OW 447
// end ;
70975: LD_VAR 0 2
70979: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70980: LD_INT 0
70982: PPUSH
70983: PPUSH
70984: PPUSH
// tmp := [ ] ;
70985: LD_ADDR_VAR 0 5
70989: PUSH
70990: EMPTY
70991: ST_TO_ADDR
// for i in units do
70992: LD_ADDR_VAR 0 4
70996: PUSH
70997: LD_VAR 0 1
71001: PUSH
71002: FOR_IN
71003: IFFALSE 71041
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71005: LD_ADDR_VAR 0 5
71009: PUSH
71010: LD_VAR 0 5
71014: PPUSH
71015: LD_VAR 0 5
71019: PUSH
71020: LD_INT 1
71022: PLUS
71023: PPUSH
71024: LD_VAR 0 4
71028: PPUSH
71029: CALL_OW 256
71033: PPUSH
71034: CALL_OW 2
71038: ST_TO_ADDR
71039: GO 71002
71041: POP
71042: POP
// if not tmp then
71043: LD_VAR 0 5
71047: NOT
71048: IFFALSE 71052
// exit ;
71050: GO 71100
// if asc then
71052: LD_VAR 0 2
71056: IFFALSE 71080
// result := SortListByListAsc ( units , tmp ) else
71058: LD_ADDR_VAR 0 3
71062: PUSH
71063: LD_VAR 0 1
71067: PPUSH
71068: LD_VAR 0 5
71072: PPUSH
71073: CALL_OW 76
71077: ST_TO_ADDR
71078: GO 71100
// result := SortListByListDesc ( units , tmp ) ;
71080: LD_ADDR_VAR 0 3
71084: PUSH
71085: LD_VAR 0 1
71089: PPUSH
71090: LD_VAR 0 5
71094: PPUSH
71095: CALL_OW 77
71099: ST_TO_ADDR
// end ;
71100: LD_VAR 0 3
71104: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71105: LD_INT 0
71107: PPUSH
71108: PPUSH
// task := GetTaskList ( mech ) ;
71109: LD_ADDR_VAR 0 4
71113: PUSH
71114: LD_VAR 0 1
71118: PPUSH
71119: CALL_OW 437
71123: ST_TO_ADDR
// if not task then
71124: LD_VAR 0 4
71128: NOT
71129: IFFALSE 71133
// exit ;
71131: GO 71175
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71133: LD_ADDR_VAR 0 3
71137: PUSH
71138: LD_VAR 0 4
71142: PUSH
71143: LD_INT 1
71145: ARRAY
71146: PUSH
71147: LD_INT 1
71149: ARRAY
71150: PUSH
71151: LD_STRING r
71153: EQUAL
71154: PUSH
71155: LD_VAR 0 4
71159: PUSH
71160: LD_INT 1
71162: ARRAY
71163: PUSH
71164: LD_INT 4
71166: ARRAY
71167: PUSH
71168: LD_VAR 0 2
71172: EQUAL
71173: AND
71174: ST_TO_ADDR
// end ;
71175: LD_VAR 0 3
71179: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71180: LD_INT 0
71182: PPUSH
// SetDir ( unit , d ) ;
71183: LD_VAR 0 1
71187: PPUSH
71188: LD_VAR 0 4
71192: PPUSH
71193: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71197: LD_VAR 0 1
71201: PPUSH
71202: LD_VAR 0 2
71206: PPUSH
71207: LD_VAR 0 3
71211: PPUSH
71212: LD_VAR 0 5
71216: PPUSH
71217: CALL_OW 48
// end ;
71221: LD_VAR 0 6
71225: RET
// export function ToNaturalNumber ( number ) ; begin
71226: LD_INT 0
71228: PPUSH
// result := number div 1 ;
71229: LD_ADDR_VAR 0 2
71233: PUSH
71234: LD_VAR 0 1
71238: PUSH
71239: LD_INT 1
71241: DIV
71242: ST_TO_ADDR
// if number < 0 then
71243: LD_VAR 0 1
71247: PUSH
71248: LD_INT 0
71250: LESS
71251: IFFALSE 71261
// result := 0 ;
71253: LD_ADDR_VAR 0 2
71257: PUSH
71258: LD_INT 0
71260: ST_TO_ADDR
// end ;
71261: LD_VAR 0 2
71265: RET
// export function SortByClass ( units , class ) ; var un ; begin
71266: LD_INT 0
71268: PPUSH
71269: PPUSH
// if not units or not class then
71270: LD_VAR 0 1
71274: NOT
71275: PUSH
71276: LD_VAR 0 2
71280: NOT
71281: OR
71282: IFFALSE 71286
// exit ;
71284: GO 71381
// result := [ ] ;
71286: LD_ADDR_VAR 0 3
71290: PUSH
71291: EMPTY
71292: ST_TO_ADDR
// for un in units do
71293: LD_ADDR_VAR 0 4
71297: PUSH
71298: LD_VAR 0 1
71302: PUSH
71303: FOR_IN
71304: IFFALSE 71379
// if GetClass ( un ) = class then
71306: LD_VAR 0 4
71310: PPUSH
71311: CALL_OW 257
71315: PUSH
71316: LD_VAR 0 2
71320: EQUAL
71321: IFFALSE 71348
// result := Insert ( result , 1 , un ) else
71323: LD_ADDR_VAR 0 3
71327: PUSH
71328: LD_VAR 0 3
71332: PPUSH
71333: LD_INT 1
71335: PPUSH
71336: LD_VAR 0 4
71340: PPUSH
71341: CALL_OW 2
71345: ST_TO_ADDR
71346: GO 71377
// result := Replace ( result , result + 1 , un ) ;
71348: LD_ADDR_VAR 0 3
71352: PUSH
71353: LD_VAR 0 3
71357: PPUSH
71358: LD_VAR 0 3
71362: PUSH
71363: LD_INT 1
71365: PLUS
71366: PPUSH
71367: LD_VAR 0 4
71371: PPUSH
71372: CALL_OW 1
71376: ST_TO_ADDR
71377: GO 71303
71379: POP
71380: POP
// end ;
71381: LD_VAR 0 3
71385: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71386: LD_INT 0
71388: PPUSH
71389: PPUSH
71390: PPUSH
71391: PPUSH
71392: PPUSH
71393: PPUSH
71394: PPUSH
// result := [ ] ;
71395: LD_ADDR_VAR 0 4
71399: PUSH
71400: EMPTY
71401: ST_TO_ADDR
// if x - r < 0 then
71402: LD_VAR 0 1
71406: PUSH
71407: LD_VAR 0 3
71411: MINUS
71412: PUSH
71413: LD_INT 0
71415: LESS
71416: IFFALSE 71428
// min_x := 0 else
71418: LD_ADDR_VAR 0 8
71422: PUSH
71423: LD_INT 0
71425: ST_TO_ADDR
71426: GO 71444
// min_x := x - r ;
71428: LD_ADDR_VAR 0 8
71432: PUSH
71433: LD_VAR 0 1
71437: PUSH
71438: LD_VAR 0 3
71442: MINUS
71443: ST_TO_ADDR
// if y - r < 0 then
71444: LD_VAR 0 2
71448: PUSH
71449: LD_VAR 0 3
71453: MINUS
71454: PUSH
71455: LD_INT 0
71457: LESS
71458: IFFALSE 71470
// min_y := 0 else
71460: LD_ADDR_VAR 0 7
71464: PUSH
71465: LD_INT 0
71467: ST_TO_ADDR
71468: GO 71486
// min_y := y - r ;
71470: LD_ADDR_VAR 0 7
71474: PUSH
71475: LD_VAR 0 2
71479: PUSH
71480: LD_VAR 0 3
71484: MINUS
71485: ST_TO_ADDR
// max_x := x + r ;
71486: LD_ADDR_VAR 0 9
71490: PUSH
71491: LD_VAR 0 1
71495: PUSH
71496: LD_VAR 0 3
71500: PLUS
71501: ST_TO_ADDR
// max_y := y + r ;
71502: LD_ADDR_VAR 0 10
71506: PUSH
71507: LD_VAR 0 2
71511: PUSH
71512: LD_VAR 0 3
71516: PLUS
71517: ST_TO_ADDR
// for _x = min_x to max_x do
71518: LD_ADDR_VAR 0 5
71522: PUSH
71523: DOUBLE
71524: LD_VAR 0 8
71528: DEC
71529: ST_TO_ADDR
71530: LD_VAR 0 9
71534: PUSH
71535: FOR_TO
71536: IFFALSE 71637
// for _y = min_y to max_y do
71538: LD_ADDR_VAR 0 6
71542: PUSH
71543: DOUBLE
71544: LD_VAR 0 7
71548: DEC
71549: ST_TO_ADDR
71550: LD_VAR 0 10
71554: PUSH
71555: FOR_TO
71556: IFFALSE 71633
// begin if not ValidHex ( _x , _y ) then
71558: LD_VAR 0 5
71562: PPUSH
71563: LD_VAR 0 6
71567: PPUSH
71568: CALL_OW 488
71572: NOT
71573: IFFALSE 71577
// continue ;
71575: GO 71555
// if GetResourceTypeXY ( _x , _y ) then
71577: LD_VAR 0 5
71581: PPUSH
71582: LD_VAR 0 6
71586: PPUSH
71587: CALL_OW 283
71591: IFFALSE 71631
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71593: LD_ADDR_VAR 0 4
71597: PUSH
71598: LD_VAR 0 4
71602: PPUSH
71603: LD_VAR 0 4
71607: PUSH
71608: LD_INT 1
71610: PLUS
71611: PPUSH
71612: LD_VAR 0 5
71616: PUSH
71617: LD_VAR 0 6
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PPUSH
71626: CALL_OW 1
71630: ST_TO_ADDR
// end ;
71631: GO 71555
71633: POP
71634: POP
71635: GO 71535
71637: POP
71638: POP
// end ;
71639: LD_VAR 0 4
71643: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71644: LD_INT 0
71646: PPUSH
71647: PPUSH
71648: PPUSH
71649: PPUSH
71650: PPUSH
71651: PPUSH
71652: PPUSH
71653: PPUSH
// if not units then
71654: LD_VAR 0 1
71658: NOT
71659: IFFALSE 71663
// exit ;
71661: GO 72187
// result := UnitFilter ( units , [ f_ok ] ) ;
71663: LD_ADDR_VAR 0 3
71667: PUSH
71668: LD_VAR 0 1
71672: PPUSH
71673: LD_INT 50
71675: PUSH
71676: EMPTY
71677: LIST
71678: PPUSH
71679: CALL_OW 72
71683: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71684: LD_ADDR_VAR 0 8
71688: PUSH
71689: LD_VAR 0 1
71693: PUSH
71694: LD_INT 1
71696: ARRAY
71697: PPUSH
71698: CALL_OW 255
71702: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71703: LD_ADDR_VAR 0 10
71707: PUSH
71708: LD_INT 29
71710: PUSH
71711: LD_INT 91
71713: PUSH
71714: LD_INT 49
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: LIST
71721: ST_TO_ADDR
// if not result then
71722: LD_VAR 0 3
71726: NOT
71727: IFFALSE 71731
// exit ;
71729: GO 72187
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71731: LD_ADDR_VAR 0 5
71735: PUSH
71736: LD_INT 81
71738: PUSH
71739: LD_VAR 0 8
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: PPUSH
71748: CALL_OW 69
71752: ST_TO_ADDR
// for i in result do
71753: LD_ADDR_VAR 0 4
71757: PUSH
71758: LD_VAR 0 3
71762: PUSH
71763: FOR_IN
71764: IFFALSE 72185
// begin tag := GetTag ( i ) + 1 ;
71766: LD_ADDR_VAR 0 9
71770: PUSH
71771: LD_VAR 0 4
71775: PPUSH
71776: CALL_OW 110
71780: PUSH
71781: LD_INT 1
71783: PLUS
71784: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71785: LD_ADDR_VAR 0 7
71789: PUSH
71790: LD_VAR 0 4
71794: PPUSH
71795: CALL_OW 250
71799: PPUSH
71800: LD_VAR 0 4
71804: PPUSH
71805: CALL_OW 251
71809: PPUSH
71810: LD_INT 6
71812: PPUSH
71813: CALL 71386 0 3
71817: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71818: LD_VAR 0 4
71822: PPUSH
71823: CALL_OW 247
71827: PUSH
71828: LD_INT 2
71830: EQUAL
71831: PUSH
71832: LD_VAR 0 7
71836: AND
71837: PUSH
71838: LD_VAR 0 4
71842: PPUSH
71843: CALL_OW 264
71847: PUSH
71848: LD_VAR 0 10
71852: IN
71853: NOT
71854: AND
71855: IFFALSE 71894
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71857: LD_VAR 0 4
71861: PPUSH
71862: LD_VAR 0 7
71866: PUSH
71867: LD_INT 1
71869: ARRAY
71870: PUSH
71871: LD_INT 1
71873: ARRAY
71874: PPUSH
71875: LD_VAR 0 7
71879: PUSH
71880: LD_INT 1
71882: ARRAY
71883: PUSH
71884: LD_INT 2
71886: ARRAY
71887: PPUSH
71888: CALL_OW 116
71892: GO 72183
// if path > tag then
71894: LD_VAR 0 2
71898: PUSH
71899: LD_VAR 0 9
71903: GREATER
71904: IFFALSE 72112
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71906: LD_ADDR_VAR 0 6
71910: PUSH
71911: LD_VAR 0 5
71915: PPUSH
71916: LD_INT 91
71918: PUSH
71919: LD_VAR 0 4
71923: PUSH
71924: LD_INT 8
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: LIST
71931: PPUSH
71932: CALL_OW 72
71936: ST_TO_ADDR
// if nearEnemy then
71937: LD_VAR 0 6
71941: IFFALSE 72010
// begin if GetWeapon ( i ) = ru_time_lapser then
71943: LD_VAR 0 4
71947: PPUSH
71948: CALL_OW 264
71952: PUSH
71953: LD_INT 49
71955: EQUAL
71956: IFFALSE 71984
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71958: LD_VAR 0 4
71962: PPUSH
71963: LD_VAR 0 6
71967: PPUSH
71968: LD_VAR 0 4
71972: PPUSH
71973: CALL_OW 74
71977: PPUSH
71978: CALL_OW 112
71982: GO 72008
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71984: LD_VAR 0 4
71988: PPUSH
71989: LD_VAR 0 6
71993: PPUSH
71994: LD_VAR 0 4
71998: PPUSH
71999: CALL_OW 74
72003: PPUSH
72004: CALL 73112 0 2
// end else
72008: GO 72110
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72010: LD_VAR 0 4
72014: PPUSH
72015: LD_VAR 0 2
72019: PUSH
72020: LD_VAR 0 9
72024: ARRAY
72025: PUSH
72026: LD_INT 1
72028: ARRAY
72029: PPUSH
72030: LD_VAR 0 2
72034: PUSH
72035: LD_VAR 0 9
72039: ARRAY
72040: PUSH
72041: LD_INT 2
72043: ARRAY
72044: PPUSH
72045: CALL_OW 297
72049: PUSH
72050: LD_INT 6
72052: GREATER
72053: IFFALSE 72096
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72055: LD_VAR 0 4
72059: PPUSH
72060: LD_VAR 0 2
72064: PUSH
72065: LD_VAR 0 9
72069: ARRAY
72070: PUSH
72071: LD_INT 1
72073: ARRAY
72074: PPUSH
72075: LD_VAR 0 2
72079: PUSH
72080: LD_VAR 0 9
72084: ARRAY
72085: PUSH
72086: LD_INT 2
72088: ARRAY
72089: PPUSH
72090: CALL_OW 114
72094: GO 72110
// SetTag ( i , tag ) ;
72096: LD_VAR 0 4
72100: PPUSH
72101: LD_VAR 0 9
72105: PPUSH
72106: CALL_OW 109
// end else
72110: GO 72183
// if enemy then
72112: LD_VAR 0 5
72116: IFFALSE 72183
// begin if GetWeapon ( i ) = ru_time_lapser then
72118: LD_VAR 0 4
72122: PPUSH
72123: CALL_OW 264
72127: PUSH
72128: LD_INT 49
72130: EQUAL
72131: IFFALSE 72159
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72133: LD_VAR 0 4
72137: PPUSH
72138: LD_VAR 0 5
72142: PPUSH
72143: LD_VAR 0 4
72147: PPUSH
72148: CALL_OW 74
72152: PPUSH
72153: CALL_OW 112
72157: GO 72183
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72159: LD_VAR 0 4
72163: PPUSH
72164: LD_VAR 0 5
72168: PPUSH
72169: LD_VAR 0 4
72173: PPUSH
72174: CALL_OW 74
72178: PPUSH
72179: CALL 73112 0 2
// end ; end ;
72183: GO 71763
72185: POP
72186: POP
// end ;
72187: LD_VAR 0 3
72191: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72192: LD_INT 0
72194: PPUSH
72195: PPUSH
72196: PPUSH
// if not unit or IsInUnit ( unit ) then
72197: LD_VAR 0 1
72201: NOT
72202: PUSH
72203: LD_VAR 0 1
72207: PPUSH
72208: CALL_OW 310
72212: OR
72213: IFFALSE 72217
// exit ;
72215: GO 72308
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72217: LD_ADDR_VAR 0 4
72221: PUSH
72222: LD_VAR 0 1
72226: PPUSH
72227: CALL_OW 250
72231: PPUSH
72232: LD_VAR 0 2
72236: PPUSH
72237: LD_INT 1
72239: PPUSH
72240: CALL_OW 272
72244: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72245: LD_ADDR_VAR 0 5
72249: PUSH
72250: LD_VAR 0 1
72254: PPUSH
72255: CALL_OW 251
72259: PPUSH
72260: LD_VAR 0 2
72264: PPUSH
72265: LD_INT 1
72267: PPUSH
72268: CALL_OW 273
72272: ST_TO_ADDR
// if ValidHex ( x , y ) then
72273: LD_VAR 0 4
72277: PPUSH
72278: LD_VAR 0 5
72282: PPUSH
72283: CALL_OW 488
72287: IFFALSE 72308
// ComTurnXY ( unit , x , y ) ;
72289: LD_VAR 0 1
72293: PPUSH
72294: LD_VAR 0 4
72298: PPUSH
72299: LD_VAR 0 5
72303: PPUSH
72304: CALL_OW 118
// end ;
72308: LD_VAR 0 3
72312: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72313: LD_INT 0
72315: PPUSH
72316: PPUSH
// result := false ;
72317: LD_ADDR_VAR 0 3
72321: PUSH
72322: LD_INT 0
72324: ST_TO_ADDR
// if not units then
72325: LD_VAR 0 2
72329: NOT
72330: IFFALSE 72334
// exit ;
72332: GO 72379
// for i in units do
72334: LD_ADDR_VAR 0 4
72338: PUSH
72339: LD_VAR 0 2
72343: PUSH
72344: FOR_IN
72345: IFFALSE 72377
// if See ( side , i ) then
72347: LD_VAR 0 1
72351: PPUSH
72352: LD_VAR 0 4
72356: PPUSH
72357: CALL_OW 292
72361: IFFALSE 72375
// begin result := true ;
72363: LD_ADDR_VAR 0 3
72367: PUSH
72368: LD_INT 1
72370: ST_TO_ADDR
// exit ;
72371: POP
72372: POP
72373: GO 72379
// end ;
72375: GO 72344
72377: POP
72378: POP
// end ;
72379: LD_VAR 0 3
72383: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72384: LD_INT 0
72386: PPUSH
72387: PPUSH
72388: PPUSH
72389: PPUSH
// if not unit or not points then
72390: LD_VAR 0 1
72394: NOT
72395: PUSH
72396: LD_VAR 0 2
72400: NOT
72401: OR
72402: IFFALSE 72406
// exit ;
72404: GO 72496
// dist := 99999 ;
72406: LD_ADDR_VAR 0 5
72410: PUSH
72411: LD_INT 99999
72413: ST_TO_ADDR
// for i in points do
72414: LD_ADDR_VAR 0 4
72418: PUSH
72419: LD_VAR 0 2
72423: PUSH
72424: FOR_IN
72425: IFFALSE 72494
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72427: LD_ADDR_VAR 0 6
72431: PUSH
72432: LD_VAR 0 1
72436: PPUSH
72437: LD_VAR 0 4
72441: PUSH
72442: LD_INT 1
72444: ARRAY
72445: PPUSH
72446: LD_VAR 0 4
72450: PUSH
72451: LD_INT 2
72453: ARRAY
72454: PPUSH
72455: CALL_OW 297
72459: ST_TO_ADDR
// if tmpDist < dist then
72460: LD_VAR 0 6
72464: PUSH
72465: LD_VAR 0 5
72469: LESS
72470: IFFALSE 72492
// begin result := i ;
72472: LD_ADDR_VAR 0 3
72476: PUSH
72477: LD_VAR 0 4
72481: ST_TO_ADDR
// dist := tmpDist ;
72482: LD_ADDR_VAR 0 5
72486: PUSH
72487: LD_VAR 0 6
72491: ST_TO_ADDR
// end ; end ;
72492: GO 72424
72494: POP
72495: POP
// end ;
72496: LD_VAR 0 3
72500: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72501: LD_INT 0
72503: PPUSH
// uc_side := side ;
72504: LD_ADDR_OWVAR 20
72508: PUSH
72509: LD_VAR 0 1
72513: ST_TO_ADDR
// uc_nation := 3 ;
72514: LD_ADDR_OWVAR 21
72518: PUSH
72519: LD_INT 3
72521: ST_TO_ADDR
// vc_chassis := 25 ;
72522: LD_ADDR_OWVAR 37
72526: PUSH
72527: LD_INT 25
72529: ST_TO_ADDR
// vc_engine := engine_siberite ;
72530: LD_ADDR_OWVAR 39
72534: PUSH
72535: LD_INT 3
72537: ST_TO_ADDR
// vc_control := control_computer ;
72538: LD_ADDR_OWVAR 38
72542: PUSH
72543: LD_INT 3
72545: ST_TO_ADDR
// vc_weapon := 59 ;
72546: LD_ADDR_OWVAR 40
72550: PUSH
72551: LD_INT 59
72553: ST_TO_ADDR
// result := CreateVehicle ;
72554: LD_ADDR_VAR 0 5
72558: PUSH
72559: CALL_OW 45
72563: ST_TO_ADDR
// SetDir ( result , d ) ;
72564: LD_VAR 0 5
72568: PPUSH
72569: LD_VAR 0 4
72573: PPUSH
72574: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72578: LD_VAR 0 5
72582: PPUSH
72583: LD_VAR 0 2
72587: PPUSH
72588: LD_VAR 0 3
72592: PPUSH
72593: LD_INT 0
72595: PPUSH
72596: CALL_OW 48
// end ;
72600: LD_VAR 0 5
72604: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72605: LD_INT 0
72607: PPUSH
72608: PPUSH
72609: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72610: LD_ADDR_VAR 0 2
72614: PUSH
72615: LD_INT 0
72617: PUSH
72618: LD_INT 0
72620: PUSH
72621: LD_INT 0
72623: PUSH
72624: LD_INT 0
72626: PUSH
72627: EMPTY
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72633: LD_VAR 0 1
72637: NOT
72638: PUSH
72639: LD_VAR 0 1
72643: PPUSH
72644: CALL_OW 264
72648: PUSH
72649: LD_INT 12
72651: PUSH
72652: LD_INT 51
72654: PUSH
72655: LD_INT 32
72657: PUSH
72658: LD_INT 89
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: IN
72667: NOT
72668: OR
72669: IFFALSE 72673
// exit ;
72671: GO 72771
// for i := 1 to 3 do
72673: LD_ADDR_VAR 0 3
72677: PUSH
72678: DOUBLE
72679: LD_INT 1
72681: DEC
72682: ST_TO_ADDR
72683: LD_INT 3
72685: PUSH
72686: FOR_TO
72687: IFFALSE 72769
// begin tmp := GetCargo ( cargo , i ) ;
72689: LD_ADDR_VAR 0 4
72693: PUSH
72694: LD_VAR 0 1
72698: PPUSH
72699: LD_VAR 0 3
72703: PPUSH
72704: CALL_OW 289
72708: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72709: LD_ADDR_VAR 0 2
72713: PUSH
72714: LD_VAR 0 2
72718: PPUSH
72719: LD_VAR 0 3
72723: PPUSH
72724: LD_VAR 0 4
72728: PPUSH
72729: CALL_OW 1
72733: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72734: LD_ADDR_VAR 0 2
72738: PUSH
72739: LD_VAR 0 2
72743: PPUSH
72744: LD_INT 4
72746: PPUSH
72747: LD_VAR 0 2
72751: PUSH
72752: LD_INT 4
72754: ARRAY
72755: PUSH
72756: LD_VAR 0 4
72760: PLUS
72761: PPUSH
72762: CALL_OW 1
72766: ST_TO_ADDR
// end ;
72767: GO 72686
72769: POP
72770: POP
// end ;
72771: LD_VAR 0 2
72775: RET
// export function Length ( array ) ; begin
72776: LD_INT 0
72778: PPUSH
// result := array + 0 ;
72779: LD_ADDR_VAR 0 2
72783: PUSH
72784: LD_VAR 0 1
72788: PUSH
72789: LD_INT 0
72791: PLUS
72792: ST_TO_ADDR
// end ;
72793: LD_VAR 0 2
72797: RET
// export function PrepareArray ( array ) ; begin
72798: LD_INT 0
72800: PPUSH
// result := array diff 0 ;
72801: LD_ADDR_VAR 0 2
72805: PUSH
72806: LD_VAR 0 1
72810: PUSH
72811: LD_INT 0
72813: DIFF
72814: ST_TO_ADDR
// if not result [ 1 ] then
72815: LD_VAR 0 2
72819: PUSH
72820: LD_INT 1
72822: ARRAY
72823: NOT
72824: IFFALSE 72844
// result := Delete ( result , 1 ) ;
72826: LD_ADDR_VAR 0 2
72830: PUSH
72831: LD_VAR 0 2
72835: PPUSH
72836: LD_INT 1
72838: PPUSH
72839: CALL_OW 3
72843: ST_TO_ADDR
// end ;
72844: LD_VAR 0 2
72848: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72849: LD_INT 0
72851: PPUSH
72852: PPUSH
72853: PPUSH
72854: PPUSH
// sibRocketRange := 25 ;
72855: LD_ADDR_VAR 0 6
72859: PUSH
72860: LD_INT 25
72862: ST_TO_ADDR
// result := false ;
72863: LD_ADDR_VAR 0 4
72867: PUSH
72868: LD_INT 0
72870: ST_TO_ADDR
// for i := 0 to 5 do
72871: LD_ADDR_VAR 0 5
72875: PUSH
72876: DOUBLE
72877: LD_INT 0
72879: DEC
72880: ST_TO_ADDR
72881: LD_INT 5
72883: PUSH
72884: FOR_TO
72885: IFFALSE 72952
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72887: LD_VAR 0 1
72891: PPUSH
72892: LD_VAR 0 5
72896: PPUSH
72897: LD_VAR 0 6
72901: PPUSH
72902: CALL_OW 272
72906: PPUSH
72907: LD_VAR 0 2
72911: PPUSH
72912: LD_VAR 0 5
72916: PPUSH
72917: LD_VAR 0 6
72921: PPUSH
72922: CALL_OW 273
72926: PPUSH
72927: LD_VAR 0 3
72931: PPUSH
72932: CALL_OW 309
72936: IFFALSE 72950
// begin result := true ;
72938: LD_ADDR_VAR 0 4
72942: PUSH
72943: LD_INT 1
72945: ST_TO_ADDR
// exit ;
72946: POP
72947: POP
72948: GO 72954
// end ;
72950: GO 72884
72952: POP
72953: POP
// end ;
72954: LD_VAR 0 4
72958: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72959: LD_INT 0
72961: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72962: LD_VAR 0 1
72966: PPUSH
72967: LD_VAR 0 2
72971: PPUSH
72972: LD_INT 0
72974: PPUSH
72975: LD_INT 0
72977: PPUSH
72978: LD_INT 1
72980: PPUSH
72981: LD_INT 0
72983: PPUSH
72984: CALL_OW 587
// end ;
72988: LD_VAR 0 3
72992: RET
// export function CenterOnNow ( unit ) ; begin
72993: LD_INT 0
72995: PPUSH
// result := IsInUnit ( unit ) ;
72996: LD_ADDR_VAR 0 2
73000: PUSH
73001: LD_VAR 0 1
73005: PPUSH
73006: CALL_OW 310
73010: ST_TO_ADDR
// if not result then
73011: LD_VAR 0 2
73015: NOT
73016: IFFALSE 73028
// result := unit ;
73018: LD_ADDR_VAR 0 2
73022: PUSH
73023: LD_VAR 0 1
73027: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73028: LD_VAR 0 1
73032: PPUSH
73033: CALL_OW 87
// end ;
73037: LD_VAR 0 2
73041: RET
// export function ComMoveHex ( unit , hex ) ; begin
73042: LD_INT 0
73044: PPUSH
// if not hex then
73045: LD_VAR 0 2
73049: NOT
73050: IFFALSE 73054
// exit ;
73052: GO 73107
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73054: LD_VAR 0 2
73058: PUSH
73059: LD_INT 1
73061: ARRAY
73062: PPUSH
73063: LD_VAR 0 2
73067: PUSH
73068: LD_INT 2
73070: ARRAY
73071: PPUSH
73072: CALL_OW 428
73076: IFFALSE 73080
// exit ;
73078: GO 73107
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73080: LD_VAR 0 1
73084: PPUSH
73085: LD_VAR 0 2
73089: PUSH
73090: LD_INT 1
73092: ARRAY
73093: PPUSH
73094: LD_VAR 0 2
73098: PUSH
73099: LD_INT 2
73101: ARRAY
73102: PPUSH
73103: CALL_OW 111
// end ;
73107: LD_VAR 0 3
73111: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73112: LD_INT 0
73114: PPUSH
73115: PPUSH
73116: PPUSH
// if not unit or not enemy then
73117: LD_VAR 0 1
73121: NOT
73122: PUSH
73123: LD_VAR 0 2
73127: NOT
73128: OR
73129: IFFALSE 73133
// exit ;
73131: GO 73257
// x := GetX ( enemy ) ;
73133: LD_ADDR_VAR 0 4
73137: PUSH
73138: LD_VAR 0 2
73142: PPUSH
73143: CALL_OW 250
73147: ST_TO_ADDR
// y := GetY ( enemy ) ;
73148: LD_ADDR_VAR 0 5
73152: PUSH
73153: LD_VAR 0 2
73157: PPUSH
73158: CALL_OW 251
73162: ST_TO_ADDR
// if ValidHex ( x , y ) then
73163: LD_VAR 0 4
73167: PPUSH
73168: LD_VAR 0 5
73172: PPUSH
73173: CALL_OW 488
73177: IFFALSE 73257
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73179: LD_VAR 0 2
73183: PPUSH
73184: CALL_OW 247
73188: PUSH
73189: LD_INT 3
73191: PUSH
73192: LD_INT 2
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: IN
73199: PUSH
73200: LD_VAR 0 1
73204: PPUSH
73205: CALL_OW 255
73209: PPUSH
73210: LD_VAR 0 2
73214: PPUSH
73215: CALL_OW 292
73219: OR
73220: IFFALSE 73238
// ComAttackUnit ( unit , enemy ) else
73222: LD_VAR 0 1
73226: PPUSH
73227: LD_VAR 0 2
73231: PPUSH
73232: CALL_OW 115
73236: GO 73257
// ComAgressiveMove ( unit , x , y ) ;
73238: LD_VAR 0 1
73242: PPUSH
73243: LD_VAR 0 4
73247: PPUSH
73248: LD_VAR 0 5
73252: PPUSH
73253: CALL_OW 114
// end ;
73257: LD_VAR 0 3
73261: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73262: LD_INT 0
73264: PPUSH
73265: PPUSH
73266: PPUSH
// list := AreaToList ( area , 0 ) ;
73267: LD_ADDR_VAR 0 5
73271: PUSH
73272: LD_VAR 0 1
73276: PPUSH
73277: LD_INT 0
73279: PPUSH
73280: CALL_OW 517
73284: ST_TO_ADDR
// if not list then
73285: LD_VAR 0 5
73289: NOT
73290: IFFALSE 73294
// exit ;
73292: GO 73424
// if all then
73294: LD_VAR 0 2
73298: IFFALSE 73386
// begin for i := 1 to list [ 1 ] do
73300: LD_ADDR_VAR 0 4
73304: PUSH
73305: DOUBLE
73306: LD_INT 1
73308: DEC
73309: ST_TO_ADDR
73310: LD_VAR 0 5
73314: PUSH
73315: LD_INT 1
73317: ARRAY
73318: PUSH
73319: FOR_TO
73320: IFFALSE 73382
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73322: LD_ADDR_VAR 0 3
73326: PUSH
73327: LD_VAR 0 3
73331: PPUSH
73332: LD_VAR 0 3
73336: PUSH
73337: LD_INT 1
73339: PLUS
73340: PPUSH
73341: LD_VAR 0 5
73345: PUSH
73346: LD_INT 1
73348: ARRAY
73349: PUSH
73350: LD_VAR 0 4
73354: ARRAY
73355: PUSH
73356: LD_VAR 0 5
73360: PUSH
73361: LD_INT 2
73363: ARRAY
73364: PUSH
73365: LD_VAR 0 4
73369: ARRAY
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PPUSH
73375: CALL_OW 1
73379: ST_TO_ADDR
73380: GO 73319
73382: POP
73383: POP
// exit ;
73384: GO 73424
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73386: LD_ADDR_VAR 0 3
73390: PUSH
73391: LD_VAR 0 5
73395: PUSH
73396: LD_INT 1
73398: ARRAY
73399: PUSH
73400: LD_INT 1
73402: ARRAY
73403: PUSH
73404: LD_VAR 0 5
73408: PUSH
73409: LD_INT 2
73411: ARRAY
73412: PUSH
73413: LD_INT 1
73415: ARRAY
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: PUSH
73421: EMPTY
73422: LIST
73423: ST_TO_ADDR
// end ;
73424: LD_VAR 0 3
73428: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73429: LD_INT 0
73431: PPUSH
73432: PPUSH
// list := AreaToList ( area , 0 ) ;
73433: LD_ADDR_VAR 0 4
73437: PUSH
73438: LD_VAR 0 1
73442: PPUSH
73443: LD_INT 0
73445: PPUSH
73446: CALL_OW 517
73450: ST_TO_ADDR
// if not list then
73451: LD_VAR 0 4
73455: NOT
73456: IFFALSE 73460
// exit ;
73458: GO 73501
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73460: LD_ADDR_VAR 0 3
73464: PUSH
73465: LD_VAR 0 4
73469: PUSH
73470: LD_INT 1
73472: ARRAY
73473: PUSH
73474: LD_INT 1
73476: ARRAY
73477: PUSH
73478: LD_VAR 0 4
73482: PUSH
73483: LD_INT 2
73485: ARRAY
73486: PUSH
73487: LD_INT 1
73489: ARRAY
73490: PUSH
73491: LD_VAR 0 2
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: LIST
73500: ST_TO_ADDR
// end ;
73501: LD_VAR 0 3
73505: RET
// export function First ( array ) ; begin
73506: LD_INT 0
73508: PPUSH
// if not array then
73509: LD_VAR 0 1
73513: NOT
73514: IFFALSE 73518
// exit ;
73516: GO 73532
// result := array [ 1 ] ;
73518: LD_ADDR_VAR 0 2
73522: PUSH
73523: LD_VAR 0 1
73527: PUSH
73528: LD_INT 1
73530: ARRAY
73531: ST_TO_ADDR
// end ;
73532: LD_VAR 0 2
73536: RET
// export function Last ( array ) ; begin
73537: LD_INT 0
73539: PPUSH
// if not array then
73540: LD_VAR 0 1
73544: NOT
73545: IFFALSE 73549
// exit ;
73547: GO 73565
// result := array [ array ] ;
73549: LD_ADDR_VAR 0 2
73553: PUSH
73554: LD_VAR 0 1
73558: PUSH
73559: LD_VAR 0 1
73563: ARRAY
73564: ST_TO_ADDR
// end ;
73565: LD_VAR 0 2
73569: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73570: LD_INT 0
73572: PPUSH
73573: PPUSH
// result := [ ] ;
73574: LD_ADDR_VAR 0 5
73578: PUSH
73579: EMPTY
73580: ST_TO_ADDR
// if not array then
73581: LD_VAR 0 1
73585: NOT
73586: IFFALSE 73590
// exit ;
73588: GO 73702
// for i := 1 to array do
73590: LD_ADDR_VAR 0 6
73594: PUSH
73595: DOUBLE
73596: LD_INT 1
73598: DEC
73599: ST_TO_ADDR
73600: LD_VAR 0 1
73604: PUSH
73605: FOR_TO
73606: IFFALSE 73700
// if array [ i ] [ index ] = value then
73608: LD_VAR 0 1
73612: PUSH
73613: LD_VAR 0 6
73617: ARRAY
73618: PUSH
73619: LD_VAR 0 2
73623: ARRAY
73624: PUSH
73625: LD_VAR 0 3
73629: EQUAL
73630: IFFALSE 73698
// begin if indexColumn then
73632: LD_VAR 0 4
73636: IFFALSE 73672
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73638: LD_ADDR_VAR 0 5
73642: PUSH
73643: LD_VAR 0 5
73647: PPUSH
73648: LD_VAR 0 1
73652: PUSH
73653: LD_VAR 0 6
73657: ARRAY
73658: PUSH
73659: LD_VAR 0 4
73663: ARRAY
73664: PPUSH
73665: CALL 69040 0 2
73669: ST_TO_ADDR
73670: GO 73698
// result := Join ( result , array [ i ] ) ;
73672: LD_ADDR_VAR 0 5
73676: PUSH
73677: LD_VAR 0 5
73681: PPUSH
73682: LD_VAR 0 1
73686: PUSH
73687: LD_VAR 0 6
73691: ARRAY
73692: PPUSH
73693: CALL 69040 0 2
73697: ST_TO_ADDR
// end ;
73698: GO 73605
73700: POP
73701: POP
// end ;
73702: LD_VAR 0 5
73706: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
73707: LD_INT 0
73709: PPUSH
73710: PPUSH
73711: PPUSH
// if btype = b_depot then
73712: LD_VAR 0 2
73716: PUSH
73717: LD_INT 0
73719: EQUAL
73720: IFFALSE 73732
// begin result := true ;
73722: LD_ADDR_VAR 0 3
73726: PUSH
73727: LD_INT 1
73729: ST_TO_ADDR
// exit ;
73730: GO 73848
// end ; pom := GetBase ( depot ) ;
73732: LD_ADDR_VAR 0 4
73736: PUSH
73737: LD_VAR 0 1
73741: PPUSH
73742: CALL_OW 274
73746: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
73747: LD_ADDR_VAR 0 5
73751: PUSH
73752: LD_VAR 0 2
73756: PPUSH
73757: LD_VAR 0 1
73761: PPUSH
73762: CALL_OW 248
73766: PPUSH
73767: CALL_OW 450
73771: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
73772: LD_ADDR_VAR 0 3
73776: PUSH
73777: LD_VAR 0 4
73781: PPUSH
73782: LD_INT 1
73784: PPUSH
73785: CALL_OW 275
73789: PUSH
73790: LD_VAR 0 5
73794: PUSH
73795: LD_INT 1
73797: ARRAY
73798: GREATEREQUAL
73799: PUSH
73800: LD_VAR 0 4
73804: PPUSH
73805: LD_INT 2
73807: PPUSH
73808: CALL_OW 275
73812: PUSH
73813: LD_VAR 0 5
73817: PUSH
73818: LD_INT 2
73820: ARRAY
73821: GREATEREQUAL
73822: AND
73823: PUSH
73824: LD_VAR 0 4
73828: PPUSH
73829: LD_INT 3
73831: PPUSH
73832: CALL_OW 275
73836: PUSH
73837: LD_VAR 0 5
73841: PUSH
73842: LD_INT 3
73844: ARRAY
73845: GREATEREQUAL
73846: AND
73847: ST_TO_ADDR
// end ;
73848: LD_VAR 0 3
73852: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73853: LD_INT 0
73855: PPUSH
// if not vehicles or not parkingPoint then
73856: LD_VAR 0 1
73860: NOT
73861: PUSH
73862: LD_VAR 0 2
73866: NOT
73867: OR
73868: IFFALSE 73872
// exit ;
73870: GO 73970
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73872: LD_ADDR_VAR 0 1
73876: PUSH
73877: LD_VAR 0 1
73881: PPUSH
73882: LD_INT 50
73884: PUSH
73885: EMPTY
73886: LIST
73887: PUSH
73888: LD_INT 3
73890: PUSH
73891: LD_INT 92
73893: PUSH
73894: LD_VAR 0 2
73898: PUSH
73899: LD_INT 1
73901: ARRAY
73902: PUSH
73903: LD_VAR 0 2
73907: PUSH
73908: LD_INT 2
73910: ARRAY
73911: PUSH
73912: LD_INT 8
73914: PUSH
73915: EMPTY
73916: LIST
73917: LIST
73918: LIST
73919: LIST
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: PPUSH
73929: CALL_OW 72
73933: ST_TO_ADDR
// if not vehicles then
73934: LD_VAR 0 1
73938: NOT
73939: IFFALSE 73943
// exit ;
73941: GO 73970
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73943: LD_VAR 0 1
73947: PPUSH
73948: LD_VAR 0 2
73952: PUSH
73953: LD_INT 1
73955: ARRAY
73956: PPUSH
73957: LD_VAR 0 2
73961: PUSH
73962: LD_INT 2
73964: ARRAY
73965: PPUSH
73966: CALL_OW 111
// end ;
73970: LD_VAR 0 3
73974: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73975: LD_INT 0
73977: PPUSH
73978: PPUSH
73979: PPUSH
// if not side or not area then
73980: LD_VAR 0 1
73984: NOT
73985: PUSH
73986: LD_VAR 0 2
73990: NOT
73991: OR
73992: IFFALSE 73996
// exit ;
73994: GO 74115
// tmp := AreaToList ( area , 0 ) ;
73996: LD_ADDR_VAR 0 5
74000: PUSH
74001: LD_VAR 0 2
74005: PPUSH
74006: LD_INT 0
74008: PPUSH
74009: CALL_OW 517
74013: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
74014: LD_ADDR_VAR 0 4
74018: PUSH
74019: DOUBLE
74020: LD_INT 1
74022: DEC
74023: ST_TO_ADDR
74024: LD_VAR 0 5
74028: PUSH
74029: LD_INT 1
74031: ARRAY
74032: PUSH
74033: FOR_TO
74034: IFFALSE 74113
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
74036: LD_VAR 0 5
74040: PUSH
74041: LD_INT 1
74043: ARRAY
74044: PUSH
74045: LD_VAR 0 4
74049: ARRAY
74050: PPUSH
74051: LD_VAR 0 5
74055: PUSH
74056: LD_INT 2
74058: ARRAY
74059: PUSH
74060: LD_VAR 0 4
74064: ARRAY
74065: PPUSH
74066: CALL_OW 351
74070: IFFALSE 74111
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
74072: LD_VAR 0 5
74076: PUSH
74077: LD_INT 1
74079: ARRAY
74080: PUSH
74081: LD_VAR 0 4
74085: ARRAY
74086: PPUSH
74087: LD_VAR 0 5
74091: PUSH
74092: LD_INT 2
74094: ARRAY
74095: PUSH
74096: LD_VAR 0 4
74100: ARRAY
74101: PPUSH
74102: LD_VAR 0 1
74106: PPUSH
74107: CALL_OW 244
// end ;
74111: GO 74033
74113: POP
74114: POP
// end ; end_of_file
74115: LD_VAR 0 3
74119: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74120: LD_VAR 0 1
74124: PPUSH
74125: LD_VAR 0 2
74129: PPUSH
74130: LD_VAR 0 3
74134: PPUSH
74135: LD_VAR 0 4
74139: PPUSH
74140: LD_VAR 0 5
74144: PPUSH
74145: LD_VAR 0 6
74149: PPUSH
74150: CALL 10645 0 6
// end ;
74154: PPOPN 6
74156: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74157: LD_INT 0
74159: PPUSH
// begin if not units then
74160: LD_VAR 0 1
74164: NOT
74165: IFFALSE 74169
// exit ;
74167: GO 74169
// end ;
74169: PPOPN 7
74171: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74172: CALL 10532 0 0
// end ;
74176: PPOPN 1
74178: END
