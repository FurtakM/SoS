// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 1990 0 0
// PrepareArabian ;
  23: CALL 1230 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5582 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: PUSH
 664: LD_OWVAR 67
 668: ARRAY
 669: PPUSH
 670: CALL 504 0 2
// for i := 1 to 2 do
 674: LD_ADDR_VAR 0 3
 678: PUSH
 679: DOUBLE
 680: LD_INT 1
 682: DEC
 683: ST_TO_ADDR
 684: LD_INT 2
 686: PUSH
 687: FOR_TO
 688: IFFALSE 725
// begin hc_class := 21 ;
 690: LD_ADDR_OWVAR 28
 694: PUSH
 695: LD_INT 21
 697: ST_TO_ADDR
// hc_gallery :=  ;
 698: LD_ADDR_OWVAR 33
 702: PUSH
 703: LD_STRING 
 705: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 706: CALL_OW 44
 710: PPUSH
 711: LD_VAR 0 1
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end ;
 723: GO 687
 725: POP
 726: POP
// for i := 1 to 2 do
 727: LD_ADDR_VAR 0 3
 731: PUSH
 732: DOUBLE
 733: LD_INT 1
 735: DEC
 736: ST_TO_ADDR
 737: LD_INT 2
 739: PUSH
 740: FOR_TO
 741: IFFALSE 778
// begin hc_class := 18 ;
 743: LD_ADDR_OWVAR 28
 747: PUSH
 748: LD_INT 18
 750: ST_TO_ADDR
// hc_gallery :=  ;
 751: LD_ADDR_OWVAR 33
 755: PUSH
 756: LD_STRING 
 758: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 759: CALL_OW 44
 763: PPUSH
 764: LD_VAR 0 1
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 49
// end ;
 776: GO 740
 778: POP
 779: POP
// for i := 1 to 2 do
 780: LD_ADDR_VAR 0 3
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 2
 792: PUSH
 793: FOR_TO
 794: IFFALSE 831
// begin hc_class := 13 ;
 796: LD_ADDR_OWVAR 28
 800: PUSH
 801: LD_INT 13
 803: ST_TO_ADDR
// hc_gallery :=  ;
 804: LD_ADDR_OWVAR 33
 808: PUSH
 809: LD_STRING 
 811: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 812: CALL_OW 44
 816: PPUSH
 817: LD_VAR 0 1
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 793
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 2
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: PUSH
 849: LD_VAR 0 2
 853: NOT
 854: OR
 855: IFFALSE 859
// exit ;
 857: GO 907
// if not See ( GetSide ( observer ) , unit ) then
 859: LD_VAR 0 1
 863: PPUSH
 864: CALL_OW 255
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 292
 878: NOT
 879: IFFALSE 883
// exit ;
 881: GO 907
// result := GetDistUnits ( observer , unit ) < 12 ;
 883: LD_ADDR_VAR 0 3
 887: PUSH
 888: LD_VAR 0 1
 892: PPUSH
 893: LD_VAR 0 2
 897: PPUSH
 898: CALL_OW 296
 902: PUSH
 903: LD_INT 12
 905: LESS
 906: ST_TO_ADDR
// end ;
 907: LD_VAR 0 3
 911: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 912: LD_INT 0
 914: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: CALL_OW 488
 937: PUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: LD_VAR 0 2
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: PPUSH
 956: CALL_OW 428
 960: PUSH
 961: LD_INT 0
 963: EQUAL
 964: AND
 965: IFFALSE 999
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 967: LD_VAR 0 1
 971: PPUSH
 972: LD_VAR 0 2
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: ARRAY
 989: PPUSH
 990: LD_VAR 0 3
 994: PPUSH
 995: CALL_OW 48
// end ;
 999: LD_VAR 0 4
1003: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1004: LD_INT 0
1006: PPUSH
1007: PPUSH
1008: PPUSH
1009: PPUSH
1010: PPUSH
// if not unit then
1011: LD_VAR 0 1
1015: NOT
1016: IFFALSE 1020
// exit ;
1018: GO 1225
// side := GetSide ( unit ) ;
1020: LD_ADDR_VAR 0 4
1024: PUSH
1025: LD_VAR 0 1
1029: PPUSH
1030: CALL_OW 255
1034: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1035: LD_ADDR_VAR 0 5
1039: PUSH
1040: LD_INT 22
1042: PUSH
1043: LD_VAR 0 4
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PUSH
1052: LD_INT 30
1054: PUSH
1055: LD_VAR 0 2
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PPUSH
1068: CALL_OW 69
1072: ST_TO_ADDR
// if not tmp then
1073: LD_VAR 0 5
1077: NOT
1078: IFFALSE 1082
// exit ;
1080: GO 1225
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1082: LD_ADDR_VAR 0 5
1086: PUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: LD_VAR 0 5
1096: PPUSH
1097: LD_INT 1
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 32272 0 4
1107: ST_TO_ADDR
// places := 1 ;
1108: LD_ADDR_VAR 0 7
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1116: LD_VAR 0 2
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 4
1129: PUSH
1130: LD_INT 5
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: LD_INT 3
1138: PUSH
1139: LD_INT 6
1141: PUSH
1142: LD_INT 7
1144: PUSH
1145: LD_INT 8
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: IN
1159: IFFALSE 1169
// places := 6 ;
1161: LD_ADDR_VAR 0 7
1165: PUSH
1166: LD_INT 6
1168: ST_TO_ADDR
// for i in tmp do
1169: LD_ADDR_VAR 0 6
1173: PUSH
1174: LD_VAR 0 5
1178: PUSH
1179: FOR_IN
1180: IFFALSE 1223
// begin if UnitsInside ( i ) - places <= 0 then
1182: LD_VAR 0 6
1186: PPUSH
1187: CALL_OW 313
1191: PUSH
1192: LD_VAR 0 7
1196: MINUS
1197: PUSH
1198: LD_INT 0
1200: LESSEQUAL
1201: IFFALSE 1207
// continue else
1203: GO 1179
1205: GO 1221
// begin result := i ;
1207: LD_ADDR_VAR 0 3
1211: PUSH
1212: LD_VAR 0 6
1216: ST_TO_ADDR
// exit ;
1217: POP
1218: POP
1219: GO 1225
// end ; end ;
1221: GO 1179
1223: POP
1224: POP
// end ; end_of_file
1225: LD_VAR 0 3
1229: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1230: LD_INT 0
1232: PPUSH
1233: PPUSH
// uc_side := 2 ;
1234: LD_ADDR_OWVAR 20
1238: PUSH
1239: LD_INT 2
1241: ST_TO_ADDR
// uc_nation := 2 ;
1242: LD_ADDR_OWVAR 21
1246: PUSH
1247: LD_INT 2
1249: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1250: LD_ADDR_EXP 18
1254: PUSH
1255: LD_STRING Heike
1257: PPUSH
1258: LD_EXP 1
1262: NOT
1263: PPUSH
1264: LD_EXP 2
1268: PPUSH
1269: CALL 26891 0 3
1273: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1274: LD_ADDR_EXP 21
1278: PUSH
1279: LD_STRING Ibrahim
1281: PPUSH
1282: LD_EXP 1
1286: NOT
1287: PPUSH
1288: LD_EXP 2
1292: PPUSH
1293: CALL 26891 0 3
1297: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1298: LD_ADDR_EXP 19
1302: PUSH
1303: LD_STRING Givi
1305: PPUSH
1306: LD_EXP 1
1310: NOT
1311: PPUSH
1312: LD_EXP 2
1316: PPUSH
1317: CALL 26891 0 3
1321: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1322: LD_ADDR_EXP 22
1326: PUSH
1327: LD_STRING Kamil
1329: PPUSH
1330: LD_EXP 1
1334: NOT
1335: PPUSH
1336: LD_EXP 2
1340: PPUSH
1341: CALL 26891 0 3
1345: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1346: LD_ADDR_EXP 23
1350: PUSH
1351: LD_STRING Kaia
1353: PPUSH
1354: LD_EXP 1
1358: NOT
1359: PPUSH
1360: LD_EXP 2
1364: PPUSH
1365: CALL 26891 0 3
1369: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1370: LD_ADDR_EXP 24
1374: PUSH
1375: LD_STRING Sophia
1377: PPUSH
1378: LD_EXP 1
1382: NOT
1383: PPUSH
1384: LD_EXP 2
1388: PPUSH
1389: CALL 26891 0 3
1393: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1394: LD_ADDR_EXP 25
1398: PUSH
1399: LD_STRING Markov
1401: PPUSH
1402: LD_EXP 1
1406: NOT
1407: PPUSH
1408: LD_EXP 2
1412: PPUSH
1413: CALL 26891 0 3
1417: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1418: LD_ADDR_EXP 28
1422: PUSH
1423: LD_STRING Aviradze
1425: PPUSH
1426: LD_EXP 1
1430: NOT
1431: PPUSH
1432: LD_EXP 2
1436: PPUSH
1437: CALL 26891 0 3
1441: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1442: LD_ADDR_EXP 27
1446: PUSH
1447: LD_STRING Kurt
1449: PPUSH
1450: LD_EXP 1
1454: NOT
1455: PPUSH
1456: LD_EXP 2
1460: PPUSH
1461: CALL 26891 0 3
1465: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1466: LD_ADDR_EXP 20
1470: PUSH
1471: LD_STRING Mike
1473: PPUSH
1474: LD_EXP 1
1478: NOT
1479: PPUSH
1480: LD_EXP 2
1484: PPUSH
1485: CALL 26891 0 3
1489: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1490: LD_ADDR_EXP 29
1494: PUSH
1495: LD_STRING 04_1_others
1497: PPUSH
1498: CALL_OW 31
1502: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1503: LD_ADDR_EXP 31
1507: PUSH
1508: LD_STRING 04_1_apes
1510: PPUSH
1511: CALL_OW 31
1515: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1516: LD_ADDR_EXP 30
1520: PUSH
1521: LD_STRING 04_1_Vehicles
1523: PPUSH
1524: EMPTY
1525: PPUSH
1526: CALL_OW 30
1530: ST_TO_ADDR
// uc_side := 5 ;
1531: LD_ADDR_OWVAR 20
1535: PUSH
1536: LD_INT 5
1538: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1539: LD_ADDR_EXP 26
1543: PUSH
1544: LD_STRING Abdul
1546: PPUSH
1547: LD_INT 0
1549: PPUSH
1550: LD_STRING 
1552: PPUSH
1553: CALL 26891 0 3
1557: ST_TO_ADDR
// end ;
1558: LD_VAR 0 1
1562: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1563: LD_STRING 04_1_KaganCaptured
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 30
1573: PUSH
1574: LD_INT 22
1576: PUSH
1577: LD_INT 5
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PPUSH
1584: CALL_OW 69
1588: NOT
1589: AND
1590: PUSH
1591: LD_INT 124
1593: PPUSH
1594: LD_INT 26
1596: PPUSH
1597: CALL_OW 428
1601: PUSH
1602: LD_INT 0
1604: EQUAL
1605: PUSH
1606: LD_INT 124
1608: PPUSH
1609: LD_INT 26
1611: PPUSH
1612: CALL_OW 428
1616: PPUSH
1617: CALL_OW 255
1621: PUSH
1622: LD_INT 2
1624: EQUAL
1625: XOR
1626: AND
1627: IFFALSE 1987
1629: GO 1631
1631: DISABLE
1632: LD_INT 0
1634: PPUSH
1635: PPUSH
// begin enable ;
1636: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1637: LD_EXP 33
1641: NOT
1642: PUSH
1643: LD_EXP 33
1647: PUSH
1648: LD_INT 4
1650: GREATER
1651: OR
1652: IFFALSE 1662
// cargoCounter := 1 ;
1654: LD_ADDR_EXP 33
1658: PUSH
1659: LD_INT 1
1661: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1662: LD_ADDR_VAR 0 2
1666: PUSH
1667: LD_INT 142
1669: PUSH
1670: LD_INT 15
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 129
1679: PUSH
1680: LD_INT 11
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 138
1689: PUSH
1690: LD_INT 9
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 133
1699: PUSH
1700: LD_INT 10
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: ST_TO_ADDR
// uc_side := 5 ;
1713: LD_ADDR_OWVAR 20
1717: PUSH
1718: LD_INT 5
1720: ST_TO_ADDR
// uc_nation := 2 ;
1721: LD_ADDR_OWVAR 21
1725: PUSH
1726: LD_INT 2
1728: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1729: LD_INT 5
1731: PPUSH
1732: LD_INT 2
1734: PPUSH
1735: LD_INT 13
1737: PPUSH
1738: LD_INT 2
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 32
1746: PPUSH
1747: LD_INT 70
1749: PPUSH
1750: CALL 336 0 7
// veh := CreateVehicle ;
1754: LD_ADDR_VAR 0 1
1758: PUSH
1759: CALL_OW 45
1763: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1764: LD_VAR 0 1
1768: PPUSH
1769: LD_INT 3
1771: PPUSH
1772: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
1776: LD_VAR 0 1
1780: PPUSH
1781: LD_INT 8
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL_OW 49
// if not cargoDriver then
1791: LD_EXP 32
1795: NOT
1796: IFFALSE 1821
// begin PrepareHuman ( false , 1 , 3 ) ;
1798: LD_INT 0
1800: PPUSH
1801: LD_INT 1
1803: PPUSH
1804: LD_INT 3
1806: PPUSH
1807: CALL_OW 380
// cargoDriver := CreateHuman ;
1811: LD_ADDR_EXP 32
1815: PUSH
1816: CALL_OW 44
1820: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
1821: LD_EXP 32
1825: PPUSH
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
1835: LD_VAR 0 1
1839: PPUSH
1840: LD_INT 2
1842: PPUSH
1843: LD_INT 100
1845: PPUSH
1846: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
1850: LD_VAR 0 1
1854: PPUSH
1855: LD_VAR 0 2
1859: PUSH
1860: LD_EXP 33
1864: ARRAY
1865: PUSH
1866: LD_INT 1
1868: ARRAY
1869: PPUSH
1870: LD_VAR 0 2
1874: PUSH
1875: LD_EXP 33
1879: ARRAY
1880: PUSH
1881: LD_INT 2
1883: ARRAY
1884: PPUSH
1885: CALL_OW 111
// AddComUnload ( veh ) ;
1889: LD_VAR 0 1
1893: PPUSH
1894: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
1898: LD_VAR 0 1
1902: PPUSH
1903: LD_INT 133
1905: PPUSH
1906: LD_INT 2
1908: PPUSH
1909: CALL_OW 171
// wait ( 0 0$5 ) ;
1913: LD_INT 175
1915: PPUSH
1916: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1920: LD_INT 35
1922: PPUSH
1923: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
1927: LD_VAR 0 1
1931: PPUSH
1932: LD_INT 133
1934: PPUSH
1935: LD_INT 2
1937: PPUSH
1938: CALL_OW 307
1942: PUSH
1943: LD_VAR 0 1
1947: PPUSH
1948: LD_INT 8
1950: PPUSH
1951: CALL_OW 308
1955: OR
1956: IFFALSE 1920
// RemoveUnit ( cargoDriver ) ;
1958: LD_EXP 32
1962: PPUSH
1963: CALL_OW 64
// RemoveUnit ( veh ) ;
1967: LD_VAR 0 1
1971: PPUSH
1972: CALL_OW 64
// if tick >= 20 20$00 then
1976: LD_OWVAR 1
1980: PUSH
1981: LD_INT 42000
1983: GREATEREQUAL
1984: IFFALSE 1987
// disable ;
1986: DISABLE
// end ; end_of_file
1987: PPOPN 2
1989: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
1990: LD_INT 0
1992: PPUSH
1993: PPUSH
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
// uc_side := 3 ;
2001: LD_ADDR_OWVAR 20
2005: PUSH
2006: LD_INT 3
2008: ST_TO_ADDR
// uc_nation := 3 ;
2009: LD_ADDR_OWVAR 21
2013: PUSH
2014: LD_INT 3
2016: ST_TO_ADDR
// ruForce := [ ] ;
2017: LD_ADDR_EXP 37
2021: PUSH
2022: EMPTY
2023: ST_TO_ADDR
// ruMech := [ ] ;
2024: LD_ADDR_EXP 39
2028: PUSH
2029: EMPTY
2030: ST_TO_ADDR
// ruEng := [ ] ;
2031: LD_ADDR_EXP 38
2035: PUSH
2036: EMPTY
2037: ST_TO_ADDR
// ruSci := [ ] ;
2038: LD_ADDR_EXP 40
2042: PUSH
2043: EMPTY
2044: ST_TO_ADDR
// ruMobile := [ ] ;
2045: LD_ADDR_EXP 41
2049: PUSH
2050: EMPTY
2051: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2052: LD_ADDR_EXP 34
2056: PUSH
2057: LD_STRING Burlak
2059: PPUSH
2060: LD_INT 0
2062: PPUSH
2063: LD_STRING 
2065: PPUSH
2066: CALL 26891 0 3
2070: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2071: LD_ADDR_EXP 35
2075: PUSH
2076: LD_STRING Gaydar
2078: PPUSH
2079: LD_INT 0
2081: PPUSH
2082: LD_STRING 
2084: PPUSH
2085: CALL 26891 0 3
2089: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2090: LD_ADDR_EXP 36
2094: PUSH
2095: LD_STRING Kuzmov
2097: PPUSH
2098: LD_INT 0
2100: PPUSH
2101: LD_STRING 
2103: PPUSH
2104: CALL 26891 0 3
2108: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2109: LD_EXP 36
2113: PPUSH
2114: LD_INT 200
2116: PPUSH
2117: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2121: LD_INT 200
2123: PPUSH
2124: LD_STRING chuikov
2126: PPUSH
2127: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 ] [ Difficulty ] ) ;
2131: LD_INT 200
2133: PPUSH
2134: CALL_OW 274
2138: PPUSH
2139: LD_INT 1
2141: PPUSH
2142: LD_INT 800
2144: PUSH
2145: LD_INT 1000
2147: PUSH
2148: LD_INT 1250
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: PUSH
2156: LD_OWVAR 67
2160: ARRAY
2161: PPUSH
2162: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2166: LD_INT 200
2168: PPUSH
2169: CALL_OW 274
2173: PPUSH
2174: LD_INT 2
2176: PPUSH
2177: LD_INT 160
2179: PPUSH
2180: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2184: LD_INT 225
2186: PPUSH
2187: CALL_OW 274
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_INT 200
2197: PPUSH
2198: CALL_OW 277
// oil := 150 ;
2202: LD_ADDR_VAR 0 9
2206: PUSH
2207: LD_INT 150
2209: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
2210: LD_EXP 5
2214: PUSH
2215: LD_INT 94500
2217: PUSH
2218: LD_INT 84000
2220: PUSH
2221: LD_INT 73500
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: LIST
2228: PUSH
2229: LD_OWVAR 67
2233: ARRAY
2234: GREATEREQUAL
2235: IFFALSE 2390
// begin oil := 450 ;
2237: LD_ADDR_VAR 0 9
2241: PUSH
2242: LD_INT 450
2244: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2245: LD_ADDR_VAR 0 7
2249: PUSH
2250: LD_INT 123
2252: PUSH
2253: LD_INT 17
2255: PUSH
2256: LD_INT 3
2258: PUSH
2259: LD_INT 31
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PUSH
2268: LD_INT 152
2270: PUSH
2271: LD_INT 38
2273: PUSH
2274: LD_INT 3
2276: PUSH
2277: LD_INT 31
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 81
2288: PUSH
2289: LD_INT 6
2291: PUSH
2292: LD_INT 4
2294: PUSH
2295: LD_INT 31
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 113
2306: PUSH
2307: LD_INT 67
2309: PUSH
2310: LD_INT 4
2312: PUSH
2313: LD_INT 32
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: ST_TO_ADDR
// for i in tmp do
2328: LD_ADDR_VAR 0 4
2332: PUSH
2333: LD_VAR 0 7
2337: PUSH
2338: FOR_IN
2339: IFFALSE 2388
// begin bc_type := i [ 4 ] ;
2341: LD_ADDR_OWVAR 42
2345: PUSH
2346: LD_VAR 0 4
2350: PUSH
2351: LD_INT 4
2353: ARRAY
2354: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2355: LD_VAR 0 4
2359: PUSH
2360: LD_INT 1
2362: ARRAY
2363: PPUSH
2364: LD_VAR 0 4
2368: PUSH
2369: LD_INT 2
2371: ARRAY
2372: PPUSH
2373: LD_VAR 0 4
2377: PUSH
2378: LD_INT 3
2380: ARRAY
2381: PPUSH
2382: CALL_OW 47
// end ;
2386: GO 2338
2388: POP
2389: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2390: LD_INT 225
2392: PPUSH
2393: CALL_OW 274
2397: PPUSH
2398: LD_INT 2
2400: PPUSH
2401: LD_VAR 0 9
2405: PPUSH
2406: CALL_OW 277
// if Difficulty > 1 then
2410: LD_OWVAR 67
2414: PUSH
2415: LD_INT 1
2417: GREATER
2418: IFFALSE 2513
// begin bc_type := b_bunker ;
2420: LD_ADDR_OWVAR 42
2424: PUSH
2425: LD_INT 32
2427: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2428: LD_ADDR_VAR 0 7
2432: PUSH
2433: LD_INT 121
2435: PUSH
2436: LD_INT 85
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: PUSH
2447: LD_INT 93
2449: PUSH
2450: LD_INT 72
2452: PUSH
2453: LD_INT 1
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: ST_TO_ADDR
// for i in tmp do
2465: LD_ADDR_VAR 0 4
2469: PUSH
2470: LD_VAR 0 7
2474: PUSH
2475: FOR_IN
2476: IFFALSE 2511
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2478: LD_VAR 0 4
2482: PUSH
2483: LD_INT 1
2485: ARRAY
2486: PPUSH
2487: LD_VAR 0 4
2491: PUSH
2492: LD_INT 2
2494: ARRAY
2495: PPUSH
2496: LD_VAR 0 4
2500: PUSH
2501: LD_INT 3
2503: ARRAY
2504: PPUSH
2505: CALL_OW 47
2509: GO 2475
2511: POP
2512: POP
// end ; base := GetBase ( ruMainBase ) ;
2513: LD_ADDR_VAR 0 2
2517: PUSH
2518: LD_INT 200
2520: PPUSH
2521: CALL_OW 274
2525: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2526: LD_ADDR_VAR 0 3
2530: PUSH
2531: LD_VAR 0 2
2535: PPUSH
2536: CALL_OW 417
2540: ST_TO_ADDR
// for b in blist do
2541: LD_ADDR_VAR 0 5
2545: PUSH
2546: LD_VAR 0 3
2550: PUSH
2551: FOR_IN
2552: IFFALSE 3003
// begin if b [ 1 ] = b_factory then
2554: LD_VAR 0 5
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PUSH
2563: LD_INT 3
2565: EQUAL
2566: IFFALSE 2717
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2568: LD_ADDR_VAR 0 8
2572: PUSH
2573: LD_VAR 0 5
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: LD_VAR 0 5
2586: PUSH
2587: LD_INT 3
2589: ARRAY
2590: PPUSH
2591: CALL_OW 428
2595: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2596: LD_ADDR_VAR 0 4
2600: PUSH
2601: DOUBLE
2602: LD_INT 1
2604: DEC
2605: ST_TO_ADDR
2606: LD_INT 2
2608: PUSH
2609: LD_INT 2
2611: PUSH
2612: LD_OWVAR 67
2616: PLUS
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: PUSH
2622: LD_EXP 10
2626: PUSH
2627: LD_INT 3
2629: GREATER
2630: PUSH
2631: LD_INT 1
2633: PLUS
2634: ARRAY
2635: PUSH
2636: FOR_TO
2637: IFFALSE 2713
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2639: LD_INT 0
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 1
2647: PUSH
2648: LD_OWVAR 67
2652: PLUS
2653: PPUSH
2654: CALL_OW 380
// un := CreateHuman ;
2658: LD_ADDR_VAR 0 6
2662: PUSH
2663: CALL_OW 44
2667: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2668: LD_ADDR_EXP 39
2672: PUSH
2673: LD_EXP 39
2677: PPUSH
2678: LD_EXP 39
2682: PUSH
2683: LD_INT 1
2685: PLUS
2686: PPUSH
2687: LD_VAR 0 6
2691: PPUSH
2692: CALL_OW 1
2696: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2697: LD_VAR 0 6
2701: PPUSH
2702: LD_VAR 0 8
2706: PPUSH
2707: CALL_OW 52
// end ;
2711: GO 2636
2713: POP
2714: POP
// end else
2715: GO 3001
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2717: LD_VAR 0 5
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: PUSH
2726: LD_INT 6
2728: PUSH
2729: LD_INT 7
2731: PUSH
2732: LD_INT 8
2734: PUSH
2735: LD_INT 10
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: IN
2744: IFFALSE 2854
// begin for i := 1 to 2 do
2746: LD_ADDR_VAR 0 4
2750: PUSH
2751: DOUBLE
2752: LD_INT 1
2754: DEC
2755: ST_TO_ADDR
2756: LD_INT 2
2758: PUSH
2759: FOR_TO
2760: IFFALSE 2850
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2762: LD_INT 0
2764: PPUSH
2765: LD_INT 4
2767: PPUSH
2768: LD_OWVAR 67
2772: PPUSH
2773: CALL_OW 380
// un := CreateHuman ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: CALL_OW 44
2786: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
2787: LD_ADDR_EXP 40
2791: PUSH
2792: LD_EXP 40
2796: PPUSH
2797: LD_EXP 40
2801: PUSH
2802: LD_INT 1
2804: PLUS
2805: PPUSH
2806: LD_VAR 0 6
2810: PPUSH
2811: CALL_OW 1
2815: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2816: LD_VAR 0 6
2820: PPUSH
2821: LD_VAR 0 5
2825: PUSH
2826: LD_INT 2
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 5
2834: PUSH
2835: LD_INT 3
2837: ARRAY
2838: PPUSH
2839: CALL_OW 428
2843: PPUSH
2844: CALL_OW 52
// end ;
2848: GO 2759
2850: POP
2851: POP
// end else
2852: GO 3001
// if b [ 1 ] = b_warehouse then
2854: LD_VAR 0 5
2858: PUSH
2859: LD_INT 1
2861: ARRAY
2862: PUSH
2863: LD_INT 1
2865: EQUAL
2866: IFFALSE 3001
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2868: LD_ADDR_VAR 0 4
2872: PUSH
2873: DOUBLE
2874: LD_INT 1
2876: DEC
2877: ST_TO_ADDR
2878: LD_INT 1
2880: PUSH
2881: LD_INT 1
2883: PUSH
2884: LD_OWVAR 67
2888: PLUS
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PUSH
2894: LD_EXP 10
2898: PUSH
2899: LD_INT 3
2901: GREATER
2902: PUSH
2903: LD_INT 1
2905: PLUS
2906: ARRAY
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2999
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 2
2916: PPUSH
2917: LD_OWVAR 67
2921: PPUSH
2922: CALL_OW 380
// un := CreateHuman ;
2926: LD_ADDR_VAR 0 6
2930: PUSH
2931: CALL_OW 44
2935: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
2936: LD_ADDR_EXP 38
2940: PUSH
2941: LD_EXP 38
2945: PPUSH
2946: LD_EXP 38
2950: PUSH
2951: LD_INT 1
2953: PLUS
2954: PPUSH
2955: LD_VAR 0 6
2959: PPUSH
2960: CALL_OW 1
2964: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2965: LD_VAR 0 6
2969: PPUSH
2970: LD_VAR 0 5
2974: PUSH
2975: LD_INT 2
2977: ARRAY
2978: PPUSH
2979: LD_VAR 0 5
2983: PUSH
2984: LD_INT 3
2986: ARRAY
2987: PPUSH
2988: CALL_OW 428
2992: PPUSH
2993: CALL_OW 52
// end ;
2997: GO 2908
2999: POP
3000: POP
// end ; end ;
3001: GO 2551
3003: POP
3004: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3005: LD_ADDR_VAR 0 3
3009: PUSH
3010: LD_INT 22
3012: PUSH
3013: LD_INT 3
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: LD_INT 21
3022: PUSH
3023: LD_INT 3
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PPUSH
3034: CALL_OW 69
3038: ST_TO_ADDR
// for b in blist do
3039: LD_ADDR_VAR 0 5
3043: PUSH
3044: LD_VAR 0 3
3048: PUSH
3049: FOR_IN
3050: IFFALSE 3072
// SetBLevel ( b , 3 + Difficulty ) ;
3052: LD_VAR 0 5
3056: PPUSH
3057: LD_INT 3
3059: PUSH
3060: LD_OWVAR 67
3064: PLUS
3065: PPUSH
3066: CALL_OW 241
3070: GO 3049
3072: POP
3073: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3074: LD_ADDR_VAR 0 3
3078: PUSH
3079: LD_INT 22
3081: PUSH
3082: LD_INT 3
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 30
3091: PUSH
3092: LD_INT 32
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PPUSH
3103: CALL_OW 69
3107: ST_TO_ADDR
// for b in blist do
3108: LD_ADDR_VAR 0 5
3112: PUSH
3113: LD_VAR 0 3
3117: PUSH
3118: FOR_IN
3119: IFFALSE 3228
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3121: LD_INT 0
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 1
3129: PUSH
3130: LD_OWVAR 67
3134: PLUS
3135: PPUSH
3136: CALL_OW 380
// un := CreateHuman ;
3140: LD_ADDR_VAR 0 6
3144: PUSH
3145: CALL_OW 44
3149: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3150: LD_ADDR_EXP 37
3154: PUSH
3155: LD_EXP 37
3159: PPUSH
3160: LD_EXP 37
3164: PUSH
3165: LD_INT 1
3167: PLUS
3168: PPUSH
3169: LD_VAR 0 6
3173: PPUSH
3174: CALL_OW 1
3178: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3179: LD_VAR 0 6
3183: PPUSH
3184: LD_VAR 0 5
3188: PPUSH
3189: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3193: LD_VAR 0 5
3197: PPUSH
3198: LD_INT 44
3200: PUSH
3201: LD_INT 43
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: PUSH
3208: LD_VAR 0 5
3212: PUSH
3213: LD_INT 2
3215: MOD
3216: PUSH
3217: LD_INT 1
3219: PLUS
3220: ARRAY
3221: PPUSH
3222: CALL_OW 431
// end ;
3226: GO 3118
3228: POP
3229: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_INT 22
3237: PUSH
3238: LD_INT 3
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: PUSH
3245: LD_INT 30
3247: PUSH
3248: LD_INT 31
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: ST_TO_ADDR
// for b in blist do
3264: LD_ADDR_VAR 0 5
3268: PUSH
3269: LD_VAR 0 3
3273: PUSH
3274: FOR_IN
3275: IFFALSE 3374
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3277: LD_INT 0
3279: PPUSH
3280: LD_INT 1
3282: PPUSH
3283: LD_INT 1
3285: PUSH
3286: LD_OWVAR 67
3290: PLUS
3291: PPUSH
3292: CALL_OW 380
// un := CreateHuman ;
3296: LD_ADDR_VAR 0 6
3300: PUSH
3301: CALL_OW 44
3305: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3306: LD_ADDR_EXP 37
3310: PUSH
3311: LD_EXP 37
3315: PPUSH
3316: LD_EXP 37
3320: PUSH
3321: LD_INT 1
3323: PLUS
3324: PPUSH
3325: LD_VAR 0 6
3329: PPUSH
3330: CALL_OW 1
3334: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3335: LD_VAR 0 6
3339: PPUSH
3340: LD_VAR 0 5
3344: PPUSH
3345: CALL_OW 254
3349: PUSH
3350: LD_INT 3
3352: PLUS
3353: PPUSH
3354: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3358: LD_VAR 0 6
3362: PPUSH
3363: LD_VAR 0 5
3367: PPUSH
3368: CALL_OW 52
// end ;
3372: GO 3274
3374: POP
3375: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3376: LD_ADDR_VAR 0 3
3380: PUSH
3381: LD_INT 22
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: LD_INT 2
3393: PUSH
3394: LD_INT 30
3396: PUSH
3397: LD_INT 4
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_INT 30
3406: PUSH
3407: LD_INT 5
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PPUSH
3423: CALL_OW 69
3427: ST_TO_ADDR
// for b in blist do
3428: LD_ADDR_VAR 0 5
3432: PUSH
3433: LD_VAR 0 3
3437: PUSH
3438: FOR_IN
3439: IFFALSE 3535
// begin for i := 1 to 2 do
3441: LD_ADDR_VAR 0 4
3445: PUSH
3446: DOUBLE
3447: LD_INT 1
3449: DEC
3450: ST_TO_ADDR
3451: LD_INT 2
3453: PUSH
3454: FOR_TO
3455: IFFALSE 3531
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3457: LD_INT 0
3459: PPUSH
3460: LD_INT 1
3462: PPUSH
3463: LD_INT 1
3465: PUSH
3466: LD_OWVAR 67
3470: PLUS
3471: PPUSH
3472: CALL_OW 380
// un := CreateHuman ;
3476: LD_ADDR_VAR 0 6
3480: PUSH
3481: CALL_OW 44
3485: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3486: LD_ADDR_EXP 37
3490: PUSH
3491: LD_EXP 37
3495: PPUSH
3496: LD_EXP 37
3500: PUSH
3501: LD_INT 1
3503: PLUS
3504: PPUSH
3505: LD_VAR 0 6
3509: PPUSH
3510: CALL_OW 1
3514: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3515: LD_VAR 0 6
3519: PPUSH
3520: LD_VAR 0 5
3524: PPUSH
3525: CALL_OW 52
// end ;
3529: GO 3454
3531: POP
3532: POP
// end ;
3533: GO 3438
3535: POP
3536: POP
// if ibrahimOnRuSide then
3537: LD_EXP 3
3541: IFFALSE 3639
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3543: LD_ADDR_EXP 21
3547: PUSH
3548: LD_STRING IbrahimRu
3550: PPUSH
3551: LD_INT 0
3553: PPUSH
3554: LD_STRING 
3556: PPUSH
3557: CALL 26891 0 3
3561: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3562: LD_EXP 21
3566: PPUSH
3567: LD_INT 121
3569: PPUSH
3570: LD_INT 78
3572: PPUSH
3573: LD_INT 0
3575: PPUSH
3576: CALL_OW 48
// ComHold ( Ibrahim ) ;
3580: LD_EXP 21
3584: PPUSH
3585: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3589: LD_INT 1
3591: PPUSH
3592: LD_INT 1
3594: PPUSH
3595: LD_INT 2
3597: PPUSH
3598: CALL_OW 380
// ruSol := CreateHuman ;
3602: LD_ADDR_EXP 42
3606: PUSH
3607: CALL_OW 44
3611: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3612: LD_EXP 42
3616: PPUSH
3617: LD_INT 121
3619: PPUSH
3620: LD_INT 75
3622: PPUSH
3623: LD_INT 0
3625: PPUSH
3626: CALL_OW 48
// ComHold ( ruSol ) ;
3630: LD_EXP 42
3634: PPUSH
3635: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3639: LD_ADDR_VAR 0 4
3643: PUSH
3644: DOUBLE
3645: LD_INT 1
3647: DEC
3648: ST_TO_ADDR
3649: LD_INT 2
3651: PUSH
3652: LD_INT 2
3654: PUSH
3655: LD_OWVAR 67
3659: PLUS
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: PUSH
3665: LD_EXP 10
3669: PUSH
3670: LD_INT 3
3672: GREATER
3673: PUSH
3674: LD_INT 1
3676: PLUS
3677: ARRAY
3678: PUSH
3679: FOR_TO
3680: IFFALSE 3749
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3682: LD_VAR 0 8
3686: PPUSH
3687: LD_INT 21
3689: PUSH
3690: LD_INT 23
3692: PUSH
3693: LD_INT 24
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: LIST
3700: PUSH
3701: LD_VAR 0 4
3705: PUSH
3706: LD_INT 3
3708: MOD
3709: PUSH
3710: LD_INT 1
3712: PLUS
3713: ARRAY
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 1
3720: PPUSH
3721: LD_INT 43
3723: PUSH
3724: LD_INT 44
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 2
3736: PPUSH
3737: CALL_OW 12
3741: ARRAY
3742: PPUSH
3743: CALL_OW 185
3747: GO 3679
3749: POP
3750: POP
// end ;
3751: LD_VAR 0 1
3755: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3756: LD_EXP 41
3760: PUSH
3761: LD_EXP 4
3765: NOT
3766: AND
3767: IFFALSE 4254
3769: GO 3771
3771: DISABLE
3772: LD_INT 0
3774: PPUSH
3775: PPUSH
3776: PPUSH
3777: PPUSH
3778: PPUSH
// begin enable ;
3779: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: LD_EXP 41
3789: PPUSH
3790: LD_INT 21
3792: PUSH
3793: LD_INT 2
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PPUSH
3800: CALL_OW 72
3804: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
3805: LD_ADDR_VAR 0 4
3809: PUSH
3810: LD_INT 81
3812: PUSH
3813: LD_INT 3
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 2
3822: PUSH
3823: LD_INT 95
3825: PUSH
3826: LD_INT 4
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 95
3835: PUSH
3836: LD_INT 5
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 95
3845: PUSH
3846: LD_INT 6
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: LD_INT 95
3855: PUSH
3856: LD_INT 7
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PPUSH
3874: CALL_OW 69
3878: ST_TO_ADDR
// for i in filter do
3879: LD_ADDR_VAR 0 1
3883: PUSH
3884: LD_VAR 0 2
3888: PUSH
3889: FOR_IN
3890: IFFALSE 4252
// begin tmp := IsDrivenBy ( i ) ;
3892: LD_ADDR_VAR 0 3
3896: PUSH
3897: LD_VAR 0 1
3901: PPUSH
3902: CALL_OW 311
3906: ST_TO_ADDR
// if not tmp then
3907: LD_VAR 0 3
3911: NOT
3912: IFFALSE 3916
// continue ;
3914: GO 3889
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
3916: LD_VAR 0 1
3920: PPUSH
3921: CALL_OW 261
3925: PUSH
3926: LD_INT 90
3928: GREATER
3929: PUSH
3930: LD_VAR 0 1
3934: PPUSH
3935: CALL_OW 110
3939: PUSH
3940: LD_INT 2
3942: EQUAL
3943: AND
3944: IFFALSE 3960
// SetTag ( i , 0 ) else
3946: LD_VAR 0 1
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 109
3958: GO 4003
// if GetTag ( i ) = 2 then
3960: LD_VAR 0 1
3964: PPUSH
3965: CALL_OW 110
3969: PUSH
3970: LD_INT 2
3972: EQUAL
3973: IFFALSE 4003
// begin x := rand ( 1 , 2 ) ;
3975: LD_ADDR_VAR 0 5
3979: PUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_INT 2
3985: PPUSH
3986: CALL_OW 12
3990: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
3991: LD_VAR 0 1
3995: PPUSH
3996: LD_INT 200
3998: PPUSH
3999: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4003: LD_VAR 0 1
4007: PPUSH
4008: CALL_OW 256
4012: PUSH
4013: LD_INT 600
4015: GREATEREQUAL
4016: PUSH
4017: LD_VAR 0 1
4021: PPUSH
4022: CALL_OW 110
4026: NOT
4027: AND
4028: IFFALSE 4054
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4030: LD_VAR 0 1
4034: PPUSH
4035: LD_VAR 0 4
4039: PPUSH
4040: LD_VAR 0 1
4044: PPUSH
4045: CALL_OW 74
4049: PPUSH
4050: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4054: LD_VAR 0 1
4058: PPUSH
4059: CALL_OW 256
4063: PUSH
4064: LD_INT 600
4066: LESS
4067: PUSH
4068: LD_VAR 0 1
4072: PPUSH
4073: CALL_OW 110
4077: NOT
4078: AND
4079: IFFALSE 4108
// begin SetTag ( i , 1 ) ;
4081: LD_VAR 0 1
4085: PPUSH
4086: LD_INT 1
4088: PPUSH
4089: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4093: LD_VAR 0 1
4097: PPUSH
4098: LD_INT 112
4100: PPUSH
4101: LD_INT 119
4103: PPUSH
4104: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4108: LD_VAR 0 1
4112: PPUSH
4113: CALL_OW 110
4117: PUSH
4118: LD_INT 1
4120: EQUAL
4121: PUSH
4122: LD_VAR 0 1
4126: PPUSH
4127: LD_INT 112
4129: PPUSH
4130: LD_INT 119
4132: PPUSH
4133: CALL_OW 297
4137: PUSH
4138: LD_INT 9
4140: LESS
4141: AND
4142: PUSH
4143: LD_VAR 0 3
4147: AND
4148: IFFALSE 4250
// begin ComExitVehicle ( tmp ) ;
4150: LD_VAR 0 3
4154: PPUSH
4155: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4159: LD_VAR 0 3
4163: PPUSH
4164: LD_VAR 0 1
4168: PPUSH
4169: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4173: LD_INT 35
4175: PPUSH
4176: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4180: LD_VAR 0 1
4184: PPUSH
4185: CALL_OW 256
4189: PUSH
4190: LD_INT 1000
4192: EQUAL
4193: IFFALSE 4173
// ComEnterUnit ( tmp , i ) ;
4195: LD_VAR 0 3
4199: PPUSH
4200: LD_VAR 0 1
4204: PPUSH
4205: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 261
4218: PUSH
4219: LD_INT 50
4221: LESSEQUAL
4222: IFFALSE 4238
// SetTag ( i , 2 ) else
4224: LD_VAR 0 1
4228: PPUSH
4229: LD_INT 2
4231: PPUSH
4232: CALL_OW 109
4236: GO 4250
// SetTag ( i , 0 ) ;
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_INT 0
4245: PPUSH
4246: CALL_OW 109
// end ; end ;
4250: GO 3889
4252: POP
4253: POP
// end ;
4254: PPOPN 5
4256: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4257: LD_EXP 4
4261: NOT
4262: PUSH
4263: LD_EXP 38
4267: AND
4268: IFFALSE 4529
4270: GO 4272
4272: DISABLE
4273: LD_INT 0
4275: PPUSH
4276: PPUSH
4277: PPUSH
4278: PPUSH
// begin enable ;
4279: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: LD_INT 3
4287: PPUSH
4288: LD_INT 22
4290: PUSH
4291: LD_INT 3
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 21
4300: PUSH
4301: LD_INT 3
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 3
4310: PUSH
4311: LD_INT 24
4313: PUSH
4314: LD_INT 1000
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 70
4334: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4335: LD_ADDR_VAR 0 3
4339: PUSH
4340: LD_EXP 38
4344: PPUSH
4345: LD_INT 50
4347: PUSH
4348: EMPTY
4349: LIST
4350: PPUSH
4351: CALL_OW 72
4355: ST_TO_ADDR
// if filter and tmp then
4356: LD_VAR 0 2
4360: PUSH
4361: LD_VAR 0 3
4365: AND
4366: IFFALSE 4458
// begin for i in tmp do
4368: LD_ADDR_VAR 0 1
4372: PUSH
4373: LD_VAR 0 3
4377: PUSH
4378: FOR_IN
4379: IFFALSE 4454
// begin if GetTag ( i ) = tEscape then
4381: LD_VAR 0 1
4385: PPUSH
4386: CALL_OW 110
4390: PUSH
4391: LD_EXP 17
4395: EQUAL
4396: IFFALSE 4400
// continue ;
4398: GO 4378
// if IsInUnit ( i ) then
4400: LD_VAR 0 1
4404: PPUSH
4405: CALL_OW 310
4409: IFFALSE 4422
// ComExitBuilding ( i ) else
4411: LD_VAR 0 1
4415: PPUSH
4416: CALL_OW 122
4420: GO 4452
// if not HasTask ( i ) then
4422: LD_VAR 0 1
4426: PPUSH
4427: CALL_OW 314
4431: NOT
4432: IFFALSE 4452
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4434: LD_VAR 0 1
4438: PPUSH
4439: LD_VAR 0 2
4443: PUSH
4444: LD_INT 1
4446: ARRAY
4447: PPUSH
4448: CALL_OW 130
// end ;
4452: GO 4378
4454: POP
4455: POP
// end else
4456: GO 4529
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4458: LD_VAR 0 3
4462: PPUSH
4463: LD_INT 3
4465: PUSH
4466: LD_INT 54
4468: PUSH
4469: EMPTY
4470: LIST
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PPUSH
4476: CALL_OW 72
4480: IFFALSE 4529
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4482: LD_ADDR_VAR 0 1
4486: PUSH
4487: LD_VAR 0 3
4491: PPUSH
4492: LD_INT 3
4494: PUSH
4495: LD_INT 54
4497: PUSH
4498: EMPTY
4499: LIST
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PPUSH
4505: CALL_OW 72
4509: PUSH
4510: FOR_IN
4511: IFFALSE 4527
// ComEnterUnit ( i , ruMainBase ) ;
4513: LD_VAR 0 1
4517: PPUSH
4518: LD_INT 200
4520: PPUSH
4521: CALL_OW 120
4525: GO 4510
4527: POP
4528: POP
// end ; end ;
4529: PPOPN 4
4531: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4532: LD_EXP 4
4536: NOT
4537: PUSH
4538: LD_EXP 40
4542: AND
4543: IFFALSE 4822
4545: GO 4547
4547: DISABLE
4548: LD_INT 0
4550: PPUSH
4551: PPUSH
4552: PPUSH
4553: PPUSH
// begin enable ;
4554: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4555: LD_ADDR_VAR 0 2
4559: PUSH
4560: LD_INT 3
4562: PPUSH
4563: LD_INT 22
4565: PUSH
4566: LD_INT 3
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 21
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_INT 3
4585: PUSH
4586: LD_INT 24
4588: PUSH
4589: LD_INT 1000
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: PPUSH
4605: CALL_OW 70
4609: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4610: LD_ADDR_VAR 0 3
4614: PUSH
4615: LD_EXP 40
4619: PPUSH
4620: LD_INT 50
4622: PUSH
4623: EMPTY
4624: LIST
4625: PPUSH
4626: CALL_OW 72
4630: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4631: LD_ADDR_VAR 0 4
4635: PUSH
4636: LD_INT 118
4638: PPUSH
4639: LD_INT 121
4641: PPUSH
4642: CALL_OW 428
4646: ST_TO_ADDR
// if filter and tmp then
4647: LD_VAR 0 2
4651: PUSH
4652: LD_VAR 0 3
4656: AND
4657: IFFALSE 4749
// begin for i in tmp do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: LD_VAR 0 3
4668: PUSH
4669: FOR_IN
4670: IFFALSE 4745
// begin if GetTag ( i ) = tEscape then
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 110
4681: PUSH
4682: LD_EXP 17
4686: EQUAL
4687: IFFALSE 4691
// continue ;
4689: GO 4669
// if IsInUnit ( i ) then
4691: LD_VAR 0 1
4695: PPUSH
4696: CALL_OW 310
4700: IFFALSE 4713
// ComExitBuilding ( i ) else
4702: LD_VAR 0 1
4706: PPUSH
4707: CALL_OW 122
4711: GO 4743
// if not HasTask ( i ) then
4713: LD_VAR 0 1
4717: PPUSH
4718: CALL_OW 314
4722: NOT
4723: IFFALSE 4743
// ComHeal ( i , filter [ 1 ] ) ;
4725: LD_VAR 0 1
4729: PPUSH
4730: LD_VAR 0 2
4734: PUSH
4735: LD_INT 1
4737: ARRAY
4738: PPUSH
4739: CALL_OW 128
// end ;
4743: GO 4669
4745: POP
4746: POP
// end else
4747: GO 4822
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4749: LD_VAR 0 3
4753: PPUSH
4754: LD_INT 3
4756: PUSH
4757: LD_INT 54
4759: PUSH
4760: EMPTY
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PPUSH
4767: CALL_OW 72
4771: IFFALSE 4822
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4773: LD_ADDR_VAR 0 1
4777: PUSH
4778: LD_VAR 0 3
4782: PPUSH
4783: LD_INT 3
4785: PUSH
4786: LD_INT 54
4788: PUSH
4789: EMPTY
4790: LIST
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PPUSH
4796: CALL_OW 72
4800: PUSH
4801: FOR_IN
4802: IFFALSE 4820
// ComEnterUnit ( i , lab ) ;
4804: LD_VAR 0 1
4808: PPUSH
4809: LD_VAR 0 4
4813: PPUSH
4814: CALL_OW 120
4818: GO 4801
4820: POP
4821: POP
// end ; end ; end_of_file
4822: PPOPN 4
4824: END
// on UnitDestroyed ( un ) do begin if un = Heike then
4825: LD_VAR 0 1
4829: PUSH
4830: LD_EXP 18
4834: EQUAL
4835: IFFALSE 4844
// YouLost ( Heike ) ;
4837: LD_STRING Heike
4839: PPUSH
4840: CALL_OW 104
// if un in ruEng then
4844: LD_VAR 0 1
4848: PUSH
4849: LD_EXP 38
4853: IN
4854: IFFALSE 4872
// ruEng := ruEng diff un ;
4856: LD_ADDR_EXP 38
4860: PUSH
4861: LD_EXP 38
4865: PUSH
4866: LD_VAR 0 1
4870: DIFF
4871: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
4872: LD_VAR 0 1
4876: PUSH
4877: LD_INT 22
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: LD_INT 21
4889: PUSH
4890: LD_INT 1
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: PUSH
4897: LD_INT 23
4899: PUSH
4900: LD_INT 2
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: LIST
4911: PPUSH
4912: CALL_OW 69
4916: IN
4917: IFFALSE 4933
// loseCounter := loseCounter + 1 ;
4919: LD_ADDR_EXP 6
4923: PUSH
4924: LD_EXP 6
4928: PUSH
4929: LD_INT 1
4931: PLUS
4932: ST_TO_ADDR
// end ;
4933: PPOPN 1
4935: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
4936: LD_INT 0
4938: PPUSH
4939: PPUSH
// begin if un in ruMobile then
4940: LD_VAR 0 2
4944: PUSH
4945: LD_EXP 41
4949: IN
4950: IFFALSE 5109
// begin ruMobile := ruMobile diff un ;
4952: LD_ADDR_EXP 41
4956: PUSH
4957: LD_EXP 41
4961: PUSH
4962: LD_VAR 0 2
4966: DIFF
4967: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
4968: LD_ADDR_VAR 0 5
4972: PUSH
4973: LD_VAR 0 2
4977: PPUSH
4978: CALL_OW 264
4982: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
4983: LD_ADDR_VAR 0 6
4987: PUSH
4988: LD_INT 110
4990: PPUSH
4991: LD_INT 126
4993: PPUSH
4994: CALL_OW 428
4998: ST_TO_ADDR
// if not driver or not fac then
4999: LD_VAR 0 1
5003: NOT
5004: PUSH
5005: LD_VAR 0 6
5009: NOT
5010: OR
5011: IFFALSE 5015
// exit ;
5013: GO 5109
// AddComMoveXY ( driver , 111 , 121 ) ;
5015: LD_VAR 0 1
5019: PPUSH
5020: LD_INT 111
5022: PPUSH
5023: LD_INT 121
5025: PPUSH
5026: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5030: LD_VAR 0 1
5034: PPUSH
5035: LD_VAR 0 6
5039: PPUSH
5040: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5044: LD_INT 35
5046: PPUSH
5047: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5051: LD_VAR 0 1
5055: PPUSH
5056: CALL_OW 301
5060: PUSH
5061: LD_VAR 0 1
5065: PPUSH
5066: CALL_OW 310
5070: OR
5071: IFFALSE 5044
// if IsDead ( driver ) then
5073: LD_VAR 0 1
5077: PPUSH
5078: CALL_OW 301
5082: IFFALSE 5086
// exit ;
5084: GO 5109
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5086: LD_VAR 0 6
5090: PPUSH
5091: LD_INT 21
5093: PPUSH
5094: LD_INT 1
5096: PPUSH
5097: LD_INT 1
5099: PPUSH
5100: LD_VAR 0 5
5104: PPUSH
5105: CALL_OW 185
// end ; end ;
5109: PPOPN 6
5111: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( fac ) = 3 then
5112: LD_VAR 0 2
5116: PPUSH
5117: CALL_OW 255
5121: PUSH
5122: LD_INT 3
5124: EQUAL
5125: IFFALSE 5171
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5127: LD_ADDR_EXP 41
5131: PUSH
5132: LD_EXP 41
5136: PPUSH
5137: LD_EXP 41
5141: PUSH
5142: LD_INT 1
5144: PLUS
5145: PPUSH
5146: LD_VAR 0 1
5150: PPUSH
5151: CALL_OW 1
5155: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5156: LD_VAR 0 1
5160: PPUSH
5161: LD_INT 110
5163: PPUSH
5164: LD_INT 117
5166: PPUSH
5167: CALL_OW 171
// end ; end ;
5171: PPOPN 2
5173: END
// on LeaveBuilding ( b , un ) do var barracks ;
5174: LD_INT 0
5176: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5177: LD_VAR 0 1
5181: PUSH
5182: LD_INT 130
5184: PPUSH
5185: LD_INT 17
5187: PPUSH
5188: CALL_OW 428
5192: PUSH
5193: LD_INT 138
5195: PPUSH
5196: LD_INT 22
5198: PPUSH
5199: CALL_OW 428
5203: PUSH
5204: LD_INT 123
5206: PPUSH
5207: LD_INT 17
5209: PPUSH
5210: CALL_OW 428
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: IN
5220: IFFALSE 5244
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_INT 135
5229: PPUSH
5230: LD_INT 31
5232: PPUSH
5233: CALL_OW 428
5237: PPUSH
5238: CALL_OW 180
// exit ;
5242: GO 5518
// end ; if b = HexInfo ( 135 , 31 ) then
5244: LD_VAR 0 1
5248: PUSH
5249: LD_INT 135
5251: PPUSH
5252: LD_INT 31
5254: PPUSH
5255: CALL_OW 428
5259: EQUAL
5260: IFFALSE 5332
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5262: LD_VAR 0 2
5266: PPUSH
5267: LD_INT 106
5269: PPUSH
5270: LD_INT 51
5272: PPUSH
5273: CALL_OW 428
5277: PPUSH
5278: CALL_OW 180
// if not explodeFirstDepot then
5282: LD_EXP 12
5286: NOT
5287: IFFALSE 5330
// begin explodeFirstDepot := true ;
5289: LD_ADDR_EXP 12
5293: PUSH
5294: LD_INT 1
5296: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5297: LD_INT 525
5299: PPUSH
5300: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5304: LD_INT 127
5306: PPUSH
5307: LD_INT 27
5309: PPUSH
5310: LD_INT 1
5312: PPUSH
5313: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5317: LD_INT 125
5319: PPUSH
5320: LD_INT 29
5322: PPUSH
5323: LD_INT 1
5325: PPUSH
5326: CALL_OW 453
// end ; exit ;
5330: GO 5518
// end ; if b = HexInfo ( 106 , 51 ) then
5332: LD_VAR 0 1
5336: PUSH
5337: LD_INT 106
5339: PPUSH
5340: LD_INT 51
5342: PPUSH
5343: CALL_OW 428
5347: EQUAL
5348: IFFALSE 5448
// begin AddComMoveXY ( un , 106 , 93 ) ;
5350: LD_VAR 0 2
5354: PPUSH
5355: LD_INT 106
5357: PPUSH
5358: LD_INT 93
5360: PPUSH
5361: CALL_OW 171
// if not explodeSecondDepot then
5365: LD_EXP 13
5369: NOT
5370: IFFALSE 5446
// begin explodeSecondDepot := true ;
5372: LD_ADDR_EXP 13
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5380: LD_INT 420
5382: PPUSH
5383: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5387: LD_INT 111
5389: PPUSH
5390: LD_INT 75
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5400: LD_INT 111
5402: PPUSH
5403: LD_INT 75
5405: PPUSH
5406: LD_INT 1
5408: PPUSH
5409: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5413: LD_INT 108
5415: PPUSH
5416: LD_INT 69
5418: PPUSH
5419: LD_INT 1
5421: PPUSH
5422: CALL_OW 453
// wait ( 0 0$2 ) ;
5426: LD_INT 70
5428: PPUSH
5429: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5433: LD_INT 94
5435: PPUSH
5436: LD_INT 65
5438: PPUSH
5439: LD_INT 1
5441: PPUSH
5442: CALL_OW 453
// end ; exit ;
5446: GO 5518
// end ; if GetBType ( b ) = b_bunker then
5448: LD_VAR 0 1
5452: PPUSH
5453: CALL_OW 266
5457: PUSH
5458: LD_INT 32
5460: EQUAL
5461: IFFALSE 5518
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5463: LD_ADDR_VAR 0 3
5467: PUSH
5468: LD_VAR 0 2
5472: PPUSH
5473: LD_INT 5
5475: PPUSH
5476: CALL 1004 0 2
5480: ST_TO_ADDR
// if barracks then
5481: LD_VAR 0 3
5485: IFFALSE 5503
// AddComEnterUnit ( un , barracks ) else
5487: LD_VAR 0 2
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 180
5501: GO 5518
// AddComMoveXY ( un , 116 , 110 ) ;
5503: LD_VAR 0 2
5507: PPUSH
5508: LD_INT 116
5510: PPUSH
5511: LD_INT 110
5513: PPUSH
5514: CALL_OW 171
// end ; end ;
5518: PPOPN 3
5520: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5521: LD_VAR 0 1
5525: PUSH
5526: LD_EXP 23
5530: EQUAL
5531: PUSH
5532: LD_VAR 0 2
5536: PUSH
5537: LD_INT 3
5539: PUSH
5540: LD_INT 6
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: IN
5547: AND
5548: IFFALSE 5579
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5550: LD_ADDR_EXP 8
5554: PUSH
5555: LD_VAR 0 1
5559: PPUSH
5560: CALL_OW 250
5564: PUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL_OW 251
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: ST_TO_ADDR
// end ; end_of_file
5579: PPOPN 3
5581: END
// export function Action ; var i , un , veh , tmp , rutmp ; begin
5582: LD_INT 0
5584: PPUSH
5585: PPUSH
5586: PPUSH
5587: PPUSH
5588: PPUSH
5589: PPUSH
// InGameOn ;
5590: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5594: LD_INT 5
5596: PPUSH
5597: LD_INT 2
5599: PPUSH
5600: CALL_OW 343
// music_nat := 4 ;
5604: LD_ADDR_OWVAR 71
5608: PUSH
5609: LD_INT 4
5611: ST_TO_ADDR
// music_class := music_combat ;
5612: LD_ADDR_OWVAR 72
5616: PUSH
5617: LD_INT 1
5619: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5620: LD_INT 133
5622: PPUSH
5623: LD_INT 2
5625: PPUSH
5626: LD_INT 2
5628: PPUSH
5629: LD_INT 10
5631: PPUSH
5632: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5636: LD_INT 133
5638: PPUSH
5639: LD_INT 2
5641: PPUSH
5642: CALL_OW 86
// wait ( 0 0$1 ) ;
5646: LD_INT 35
5648: PPUSH
5649: CALL_OW 67
// uc_side := 6 ;
5653: LD_ADDR_OWVAR 20
5657: PUSH
5658: LD_INT 6
5660: ST_TO_ADDR
// uc_nation := 3 ;
5661: LD_ADDR_OWVAR 21
5665: PUSH
5666: LD_INT 3
5668: ST_TO_ADDR
// rutmp := [ ] ;
5669: LD_ADDR_VAR 0 6
5673: PUSH
5674: EMPTY
5675: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5676: LD_INT 6
5678: PPUSH
5679: LD_INT 3
5681: PPUSH
5682: LD_INT 21
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: LD_INT 1
5690: PPUSH
5691: LD_INT 44
5693: PPUSH
5694: LD_INT 66
5696: PPUSH
5697: CALL 336 0 7
// veh := CreateVehicle ;
5701: LD_ADDR_VAR 0 4
5705: PUSH
5706: CALL_OW 45
5710: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5711: LD_VAR 0 4
5715: PPUSH
5716: LD_INT 3
5718: PPUSH
5719: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5723: LD_VAR 0 4
5727: PPUSH
5728: LD_INT 8
5730: PPUSH
5731: LD_INT 0
5733: PPUSH
5734: CALL_OW 49
// SetLives ( veh , 500 ) ;
5738: LD_VAR 0 4
5742: PPUSH
5743: LD_INT 500
5745: PPUSH
5746: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
5750: LD_INT 0
5752: PPUSH
5753: LD_INT 3
5755: PPUSH
5756: LD_INT 3
5758: PPUSH
5759: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5763: CALL_OW 44
5767: PPUSH
5768: LD_VAR 0 4
5772: PPUSH
5773: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
5777: LD_VAR 0 4
5781: PPUSH
5782: LD_INT 133
5784: PPUSH
5785: LD_INT 11
5787: PPUSH
5788: CALL_OW 111
// rutmp := [ veh ] ;
5792: LD_ADDR_VAR 0 6
5796: PUSH
5797: LD_VAR 0 4
5801: PUSH
5802: EMPTY
5803: LIST
5804: ST_TO_ADDR
// for i := 1 to 4 do
5805: LD_ADDR_VAR 0 2
5809: PUSH
5810: DOUBLE
5811: LD_INT 1
5813: DEC
5814: ST_TO_ADDR
5815: LD_INT 4
5817: PUSH
5818: FOR_TO
5819: IFFALSE 5926
// begin PrepareHuman ( false , i , 2 ) ;
5821: LD_INT 0
5823: PPUSH
5824: LD_VAR 0 2
5828: PPUSH
5829: LD_INT 2
5831: PPUSH
5832: CALL_OW 380
// un := CreateHuman ;
5836: LD_ADDR_VAR 0 3
5840: PUSH
5841: CALL_OW 44
5845: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5846: LD_VAR 0 3
5850: PPUSH
5851: LD_INT 3
5853: PPUSH
5854: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
5858: LD_VAR 0 3
5862: PPUSH
5863: LD_INT 8
5865: PPUSH
5866: LD_INT 0
5868: PPUSH
5869: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
5873: LD_ADDR_VAR 0 6
5877: PUSH
5878: LD_VAR 0 6
5882: PPUSH
5883: LD_VAR 0 6
5887: PUSH
5888: LD_INT 1
5890: PLUS
5891: PPUSH
5892: LD_VAR 0 3
5896: PPUSH
5897: CALL_OW 1
5901: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
5902: LD_VAR 0 3
5906: PPUSH
5907: LD_INT 133
5909: PPUSH
5910: LD_INT 11
5912: PPUSH
5913: CALL_OW 111
// wait ( 0 0$0.5 ) ;
5917: LD_INT 18
5919: PPUSH
5920: CALL_OW 67
// end ;
5924: GO 5818
5926: POP
5927: POP
// for i in rutmp do
5928: LD_ADDR_VAR 0 2
5932: PUSH
5933: LD_VAR 0 6
5937: PUSH
5938: FOR_IN
5939: IFFALSE 5988
// begin AddComMoveXY ( i , 99 , 65 ) ;
5941: LD_VAR 0 2
5945: PPUSH
5946: LD_INT 99
5948: PPUSH
5949: LD_INT 65
5951: PPUSH
5952: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
5956: LD_VAR 0 2
5960: PPUSH
5961: LD_INT 76
5963: PPUSH
5964: LD_INT 108
5966: PPUSH
5967: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
5971: LD_VAR 0 2
5975: PPUSH
5976: LD_INT 92
5978: PPUSH
5979: LD_INT 176
5981: PPUSH
5982: CALL_OW 171
// end ;
5986: GO 5938
5988: POP
5989: POP
// wait ( 0 0$10 ) ;
5990: LD_INT 350
5992: PPUSH
5993: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
5997: LD_ADDR_VAR 0 5
6001: PUSH
6002: LD_EXP 18
6006: PUSH
6007: LD_EXP 19
6011: PUSH
6012: LD_EXP 20
6016: PUSH
6017: LD_EXP 21
6021: PUSH
6022: LD_EXP 22
6026: PUSH
6027: LD_EXP 23
6031: PUSH
6032: LD_EXP 24
6036: PUSH
6037: LD_EXP 25
6041: PUSH
6042: LD_EXP 27
6046: PUSH
6047: LD_EXP 28
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: PUSH
6064: LD_EXP 29
6068: UNION
6069: ST_TO_ADDR
// tmp := tmp diff 0 ;
6070: LD_ADDR_VAR 0 5
6074: PUSH
6075: LD_VAR 0 5
6079: PUSH
6080: LD_INT 0
6082: DIFF
6083: ST_TO_ADDR
// for i in heikeVehicles do
6084: LD_ADDR_VAR 0 2
6088: PUSH
6089: LD_EXP 30
6093: PUSH
6094: FOR_IN
6095: IFFALSE 6361
// begin if not tmp then
6097: LD_VAR 0 5
6101: NOT
6102: IFFALSE 6106
// continue ;
6104: GO 6094
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6106: LD_INT 2
6108: PPUSH
6109: LD_VAR 0 2
6113: PUSH
6114: LD_INT 5
6116: ARRAY
6117: PPUSH
6118: LD_VAR 0 2
6122: PUSH
6123: LD_INT 1
6125: ARRAY
6126: PPUSH
6127: LD_VAR 0 2
6131: PUSH
6132: LD_INT 2
6134: ARRAY
6135: PPUSH
6136: LD_VAR 0 2
6140: PUSH
6141: LD_INT 3
6143: ARRAY
6144: PPUSH
6145: LD_VAR 0 2
6149: PUSH
6150: LD_INT 4
6152: ARRAY
6153: PPUSH
6154: LD_INT 34
6156: PPUSH
6157: CALL 336 0 7
// veh := CreateVehicle ;
6161: LD_ADDR_VAR 0 4
6165: PUSH
6166: CALL_OW 45
6170: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6171: LD_VAR 0 2
6175: PUSH
6176: LD_INT 4
6178: ARRAY
6179: PUSH
6180: LD_INT 51
6182: PUSH
6183: LD_INT 32
6185: PUSH
6186: LD_INT 12
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: IN
6194: IFFALSE 6274
// begin if i [ 7 ] [ 1 ] then
6196: LD_VAR 0 2
6200: PUSH
6201: LD_INT 7
6203: ARRAY
6204: PUSH
6205: LD_INT 1
6207: ARRAY
6208: IFFALSE 6235
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6210: LD_VAR 0 4
6214: PPUSH
6215: LD_INT 1
6217: PPUSH
6218: LD_VAR 0 2
6222: PUSH
6223: LD_INT 7
6225: ARRAY
6226: PUSH
6227: LD_INT 1
6229: ARRAY
6230: PPUSH
6231: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6235: LD_VAR 0 2
6239: PUSH
6240: LD_INT 7
6242: ARRAY
6243: PUSH
6244: LD_INT 2
6246: ARRAY
6247: IFFALSE 6274
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6249: LD_VAR 0 4
6253: PPUSH
6254: LD_INT 2
6256: PPUSH
6257: LD_VAR 0 2
6261: PUSH
6262: LD_INT 7
6264: ARRAY
6265: PUSH
6266: LD_INT 2
6268: ARRAY
6269: PPUSH
6270: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6274: LD_VAR 0 4
6278: PPUSH
6279: LD_INT 3
6281: PPUSH
6282: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6286: LD_VAR 0 4
6290: PPUSH
6291: LD_INT 8
6293: PPUSH
6294: LD_INT 0
6296: PPUSH
6297: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6301: LD_VAR 0 5
6305: PUSH
6306: LD_INT 1
6308: ARRAY
6309: PPUSH
6310: LD_VAR 0 4
6314: PPUSH
6315: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6319: LD_ADDR_VAR 0 5
6323: PUSH
6324: LD_VAR 0 5
6328: PPUSH
6329: LD_INT 1
6331: PPUSH
6332: CALL_OW 3
6336: ST_TO_ADDR
// ComAgressiveMove ( veh , 133 , 7 ) ;
6337: LD_VAR 0 4
6341: PPUSH
6342: LD_INT 133
6344: PPUSH
6345: LD_INT 7
6347: PPUSH
6348: CALL_OW 114
// wait ( 0 0$1 ) ;
6352: LD_INT 35
6354: PPUSH
6355: CALL_OW 67
// end ;
6359: GO 6094
6361: POP
6362: POP
// if tmp then
6363: LD_VAR 0 5
6367: IFFALSE 6423
// for i in tmp do
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: LD_VAR 0 5
6378: PUSH
6379: FOR_IN
6380: IFFALSE 6421
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6382: LD_VAR 0 2
6386: PPUSH
6387: LD_INT 10
6389: PPUSH
6390: LD_INT 0
6392: PPUSH
6393: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6397: LD_VAR 0 2
6401: PPUSH
6402: LD_INT 146
6404: PPUSH
6405: LD_INT 7
6407: PPUSH
6408: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6412: LD_INT 18
6414: PPUSH
6415: CALL_OW 67
// end ;
6419: GO 6379
6421: POP
6422: POP
// if heikeApes then
6423: LD_EXP 31
6427: IFFALSE 6483
// for i in heikeApes do
6429: LD_ADDR_VAR 0 2
6433: PUSH
6434: LD_EXP 31
6438: PUSH
6439: FOR_IN
6440: IFFALSE 6481
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6442: LD_VAR 0 2
6446: PPUSH
6447: LD_INT 10
6449: PPUSH
6450: LD_INT 0
6452: PPUSH
6453: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6457: LD_VAR 0 2
6461: PPUSH
6462: LD_INT 146
6464: PPUSH
6465: LD_INT 7
6467: PPUSH
6468: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6472: LD_INT 18
6474: PPUSH
6475: CALL_OW 67
// end ;
6479: GO 6439
6481: POP
6482: POP
// DialogueOn ;
6483: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6487: LD_EXP 18
6491: PPUSH
6492: LD_STRING DH-outpost-a-1
6494: PPUSH
6495: CALL_OW 88
// DialogueOff ;
6499: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6503: LD_INT 133
6505: PPUSH
6506: LD_INT 2
6508: PPUSH
6509: LD_INT 2
6511: PPUSH
6512: CALL_OW 331
// InGameOff ;
6516: CALL_OW 9
// music_nat := 0 ;
6520: LD_ADDR_OWVAR 71
6524: PUSH
6525: LD_INT 0
6527: ST_TO_ADDR
// music_class := 0 ;
6528: LD_ADDR_OWVAR 72
6532: PUSH
6533: LD_INT 0
6535: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6536: LD_STRING Outposts
6538: PPUSH
6539: CALL_OW 337
// SaveForQuickRestart ;
6543: CALL_OW 22
// end ;
6547: LD_VAR 0 1
6551: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6552: LD_INT 22
6554: PUSH
6555: LD_INT 2
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 91
6564: PUSH
6565: LD_EXP 21
6569: PUSH
6570: LD_INT 20
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 69
6586: PUSH
6587: LD_EXP 3
6591: AND
6592: PUSH
6593: LD_EXP 21
6597: PPUSH
6598: CALL_OW 302
6602: AND
6603: IFFALSE 6850
6605: GO 6607
6607: DISABLE
6608: LD_INT 0
6610: PPUSH
6611: PPUSH
6612: PPUSH
6613: PPUSH
// begin IbrahimBetrayal ;
6614: CALL 6853 0 0
// repeat wait ( 0 0$1 ) ;
6618: LD_INT 35
6620: PPUSH
6621: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6625: LD_EXP 21
6629: PPUSH
6630: CALL_OW 301
6634: PUSH
6635: LD_INT 22
6637: PUSH
6638: LD_INT 2
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 91
6647: PUSH
6648: LD_EXP 21
6652: PUSH
6653: LD_INT 6
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: PPUSH
6665: CALL_OW 69
6669: PUSH
6670: LD_EXP 21
6674: PPUSH
6675: CALL_OW 302
6679: AND
6680: OR
6681: IFFALSE 6618
// if IsDead ( Ibrahim ) then
6683: LD_EXP 21
6687: PPUSH
6688: CALL_OW 301
6692: IFFALSE 6696
// exit ;
6694: GO 6850
// x := GetX ( Ibrahim ) ;
6696: LD_ADDR_VAR 0 1
6700: PUSH
6701: LD_EXP 21
6705: PPUSH
6706: CALL_OW 250
6710: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
6711: LD_ADDR_VAR 0 2
6715: PUSH
6716: LD_EXP 21
6720: PPUSH
6721: CALL_OW 251
6725: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
6726: LD_ADDR_VAR 0 3
6730: PUSH
6731: LD_EXP 21
6735: PPUSH
6736: CALL_OW 254
6740: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
6741: LD_ADDR_VAR 0 4
6745: PUSH
6746: LD_EXP 21
6750: PPUSH
6751: CALL_OW 256
6755: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
6756: LD_EXP 21
6760: PPUSH
6761: CALL_OW 64
// uc_side := 2 ;
6765: LD_ADDR_OWVAR 20
6769: PUSH
6770: LD_INT 2
6772: ST_TO_ADDR
// uc_nation := 2 ;
6773: LD_ADDR_OWVAR 21
6777: PUSH
6778: LD_INT 2
6780: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
6781: LD_ADDR_EXP 21
6785: PUSH
6786: LD_STRING Ibrahim
6788: PPUSH
6789: LD_INT 0
6791: PPUSH
6792: LD_STRING 
6794: PPUSH
6795: CALL 26891 0 3
6799: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
6800: LD_EXP 21
6804: PPUSH
6805: LD_VAR 0 3
6809: PPUSH
6810: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
6814: LD_EXP 21
6818: PPUSH
6819: LD_VAR 0 1
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: LD_INT 0
6831: PPUSH
6832: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
6836: LD_EXP 21
6840: PPUSH
6841: LD_VAR 0 4
6845: PPUSH
6846: CALL_OW 234
// end ;
6850: PPOPN 4
6852: END
// export function IbrahimBetrayal ; var i , tmp ; begin
6853: LD_INT 0
6855: PPUSH
6856: PPUSH
6857: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
6858: LD_INT 122
6860: PPUSH
6861: LD_INT 77
6863: PPUSH
6864: LD_INT 2
6866: PPUSH
6867: LD_INT 6
6869: NEG
6870: PPUSH
6871: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
6875: LD_EXP 21
6879: PPUSH
6880: LD_INT 123
6882: PPUSH
6883: LD_INT 79
6885: PPUSH
6886: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
6890: LD_EXP 21
6894: PPUSH
6895: LD_INT 125
6897: PPUSH
6898: LD_INT 82
6900: PPUSH
6901: CALL_OW 178
// wait ( 0 0$2 ) ;
6905: LD_INT 70
6907: PPUSH
6908: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
6912: LD_EXP 42
6916: PPUSH
6917: LD_EXP 21
6921: PPUSH
6922: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
6926: LD_EXP 42
6930: PPUSH
6931: LD_STRING DRum-outpost-b-3
6933: PPUSH
6934: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: LD_INT 125
6945: PPUSH
6946: LD_INT 76
6948: PPUSH
6949: CALL_OW 428
6953: PUSH
6954: LD_INT 125
6956: PPUSH
6957: LD_INT 79
6959: PPUSH
6960: CALL_OW 428
6964: PUSH
6965: LD_INT 125
6967: PPUSH
6968: LD_INT 82
6970: PPUSH
6971: CALL_OW 428
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// for i in tmp do
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: LD_VAR 0 3
6990: PUSH
6991: FOR_IN
6992: IFFALSE 7008
// SetLives ( i , 200 ) ;
6994: LD_VAR 0 2
6998: PPUSH
6999: LD_INT 200
7001: PPUSH
7002: CALL_OW 234
7006: GO 6991
7008: POP
7009: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7010: LD_EXP 21
7014: PPUSH
7015: LD_STRING DI-outpost-b-4
7017: PPUSH
7018: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7022: LD_EXP 21
7026: PPUSH
7027: LD_INT 5
7029: PPUSH
7030: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7034: LD_EXP 21
7038: PUSH
7039: LD_EXP 42
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PPUSH
7048: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7052: LD_INT 122
7054: PPUSH
7055: LD_INT 77
7057: PPUSH
7058: LD_INT 2
7060: PPUSH
7061: CALL_OW 331
// if Givi then
7065: LD_EXP 19
7069: IFFALSE 7085
// Say ( Givi , DG-1-outpost-b-5 ) else
7071: LD_EXP 19
7075: PPUSH
7076: LD_STRING DG-1-outpost-b-5
7078: PPUSH
7079: CALL_OW 88
7083: GO 7150
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7085: LD_EXP 29
7089: PPUSH
7090: LD_INT 26
7092: PUSH
7093: LD_INT 2
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 72
7104: PUSH
7105: LD_INT 1
7107: ARRAY
7108: PPUSH
7109: LD_STRING DArf-outpost-b-a-5
7111: PPUSH
7112: CALL_OW 88
7116: NOT
7117: IFFALSE 7150
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7119: LD_EXP 29
7123: PPUSH
7124: LD_INT 26
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PPUSH
7134: CALL_OW 72
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: PPUSH
7143: LD_STRING DArm-outpost-b-a-5
7145: PPUSH
7146: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7150: LD_INT 35
7152: PPUSH
7153: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7157: LD_EXP 21
7161: PPUSH
7162: CALL_OW 301
7166: PUSH
7167: LD_EXP 18
7171: PPUSH
7172: LD_EXP 21
7176: PPUSH
7177: CALL_OW 296
7181: PUSH
7182: LD_INT 6
7184: LESS
7185: PUSH
7186: LD_EXP 21
7190: PPUSH
7191: CALL_OW 302
7195: AND
7196: OR
7197: IFFALSE 7150
// if IsDead ( Ibrahim ) then
7199: LD_EXP 21
7203: PPUSH
7204: CALL_OW 301
7208: IFFALSE 7224
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7210: LD_EXP 18
7214: PPUSH
7215: LD_STRING DH-ibrahimdead-1
7217: PPUSH
7218: CALL_OW 88
// exit ;
7222: GO 7265
// end ; CenterNowOnUnits ( Ibrahim ) ;
7224: LD_EXP 21
7228: PPUSH
7229: CALL_OW 87
// DialogueOn ;
7233: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7237: LD_EXP 21
7241: PPUSH
7242: LD_STRING DI-ibrahimlives-1
7244: PPUSH
7245: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7249: LD_EXP 18
7253: PPUSH
7254: LD_STRING DH-Ibrahimlives-2
7256: PPUSH
7257: CALL_OW 88
// DialogueOff ;
7261: CALL_OW 7
// end ;
7265: LD_VAR 0 1
7269: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 ] [ Difficulty ] do
7270: LD_INT 11
7272: PPUSH
7273: LD_INT 22
7275: PUSH
7276: LD_INT 2
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PPUSH
7283: CALL_OW 70
7287: PUSH
7288: LD_OWVAR 1
7292: PUSH
7293: LD_INT 18900
7295: PUSH
7296: LD_INT 16800
7298: PUSH
7299: LD_INT 16800
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: PUSH
7307: LD_OWVAR 67
7311: ARRAY
7312: GREATEREQUAL
7313: OR
7314: IFFALSE 7721
7316: GO 7318
7318: DISABLE
// begin outerAreaAchived := true ;
7319: LD_ADDR_EXP 15
7323: PUSH
7324: LD_INT 1
7326: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7327: LD_INT 700
7329: PPUSH
7330: CALL_OW 67
// DialogueOn ;
7334: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7338: LD_EXP 26
7342: PPUSH
7343: LD_STRING DShar-radio-1
7345: PPUSH
7346: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7350: LD_EXP 26
7354: PPUSH
7355: LD_STRING DShar-radio-2
7357: PPUSH
7358: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7362: LD_EXP 18
7366: PPUSH
7367: LD_STRING DH-radio-2
7369: PPUSH
7370: CALL_OW 88
// DialogueOff ;
7374: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7378: LD_STRING Gaidar
7380: PPUSH
7381: CALL_OW 337
// if Difficulty < 3 then
7385: LD_OWVAR 67
7389: PUSH
7390: LD_INT 3
7392: LESS
7393: IFFALSE 7459
// begin DialogueOn ;
7395: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7399: LD_INT 11
7401: PPUSH
7402: LD_INT 14
7404: PPUSH
7405: LD_INT 2
7407: PPUSH
7408: LD_INT 6
7410: NEG
7411: PPUSH
7412: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7416: LD_INT 11
7418: PPUSH
7419: LD_INT 14
7421: PPUSH
7422: LD_INT 2
7424: PPUSH
7425: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7429: LD_INT 11
7431: PPUSH
7432: LD_INT 14
7434: PPUSH
7435: CALL_OW 84
// dwait ( 0 0$1 ) ;
7439: LD_INT 35
7441: PPUSH
7442: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7446: LD_EXP 18
7450: PPUSH
7451: CALL_OW 87
// DialogueOff ;
7455: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7459: LD_INT 1050
7461: PUSH
7462: LD_INT 350
7464: PPUSH
7465: LD_INT 525
7467: PPUSH
7468: CALL_OW 12
7472: PUSH
7473: LD_OWVAR 67
7477: MUL
7478: PLUS
7479: PPUSH
7480: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7484: LD_INT 35
7486: PPUSH
7487: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7491: LD_INT 2
7493: PPUSH
7494: LD_INT 1
7496: PPUSH
7497: CALL_OW 428
7501: PUSH
7502: LD_INT 0
7504: EQUAL
7505: IFFALSE 7484
// SetDir ( Gaidar , 2 ) ;
7507: LD_EXP 35
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7519: LD_EXP 35
7523: PPUSH
7524: LD_INT 2
7526: PPUSH
7527: LD_INT 1
7529: PPUSH
7530: LD_INT 0
7532: PPUSH
7533: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7537: LD_EXP 35
7541: PPUSH
7542: LD_INT 19
7544: PPUSH
7545: LD_INT 24
7547: PPUSH
7548: CALL_OW 111
// AddComWait ( Gaidar , 0 0$6 ) ;
7552: LD_EXP 35
7556: PPUSH
7557: LD_INT 210
7559: PPUSH
7560: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7564: LD_EXP 35
7568: PPUSH
7569: LD_INT 38
7571: PPUSH
7572: LD_INT 47
7574: PPUSH
7575: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7579: LD_EXP 35
7583: PPUSH
7584: LD_INT 32
7586: PPUSH
7587: LD_INT 59
7589: PPUSH
7590: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
7594: LD_EXP 35
7598: PPUSH
7599: LD_INT 350
7601: PPUSH
7602: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
7606: LD_EXP 35
7610: PPUSH
7611: LD_INT 62
7613: PPUSH
7614: LD_INT 116
7616: PPUSH
7617: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
7621: LD_EXP 35
7625: PPUSH
7626: LD_INT 92
7628: PPUSH
7629: LD_INT 177
7631: PPUSH
7632: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7636: LD_INT 35
7638: PPUSH
7639: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
7643: LD_EXP 35
7647: PPUSH
7648: CALL_OW 301
7652: PUSH
7653: LD_EXP 35
7657: PPUSH
7658: LD_INT 92
7660: PPUSH
7661: LD_INT 177
7663: PPUSH
7664: CALL_OW 307
7668: OR
7669: IFFALSE 7636
// if IsAt ( Gaidar , 92 , 177 ) then
7671: LD_EXP 35
7675: PPUSH
7676: LD_INT 92
7678: PPUSH
7679: LD_INT 177
7681: PPUSH
7682: CALL_OW 307
7686: IFFALSE 7699
// begin RemoveUnit ( Gaidar ) ;
7688: LD_EXP 35
7692: PPUSH
7693: CALL_OW 64
// exit ;
7697: GO 7721
// end ; gaidarKilled := true ;
7699: LD_ADDR_EXP 14
7703: PUSH
7704: LD_INT 1
7706: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
7707: LD_STRING GaidarKilled
7709: PPUSH
7710: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
7714: LD_STRING ACH_COMMISAR
7716: PPUSH
7717: CALL_OW 543
// end ;
7721: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
7722: LD_INT 2
7724: PPUSH
7725: LD_EXP 35
7729: PPUSH
7730: CALL_OW 292
7734: IFFALSE 7751
7736: GO 7738
7738: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
7739: LD_EXP 35
7743: PPUSH
7744: LD_STRING DT-objective-1
7746: PPUSH
7747: CALL_OW 88
7751: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
7752: LD_INT 22
7754: PUSH
7755: LD_INT 2
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: LD_INT 95
7767: PUSH
7768: LD_INT 5
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 95
7777: PUSH
7778: LD_INT 6
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 95
7787: PUSH
7788: LD_INT 7
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PPUSH
7805: CALL_OW 69
7809: IFFALSE 7846
7811: GO 7813
7813: DISABLE
// begin DialogueOn ;
7814: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
7818: LD_EXP 18
7822: PPUSH
7823: LD_STRING DH-outpost-last-1
7825: PPUSH
7826: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
7830: LD_EXP 34
7834: PPUSH
7835: LD_STRING DB-outpost-last-2
7837: PPUSH
7838: CALL_OW 94
// DialogueOff ;
7842: CALL_OW 7
// end ;
7846: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
7847: LD_INT 200
7849: PPUSH
7850: CALL_OW 256
7854: PUSH
7855: LD_INT 999
7857: LESS
7858: PUSH
7859: LD_INT 200
7861: PPUSH
7862: CALL_OW 255
7866: PUSH
7867: LD_INT 2
7869: EQUAL
7870: OR
7871: IFFALSE 8044
7873: GO 7875
7875: DISABLE
7876: LD_INT 0
7878: PPUSH
7879: PPUSH
// begin if not earlyEscape then
7880: LD_EXP 16
7884: NOT
7885: IFFALSE 7911
// begin SayRadio ( Burlak , DB-end-1 ) ;
7887: LD_EXP 34
7891: PPUSH
7892: LD_STRING DB-end-1
7894: PPUSH
7895: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
7899: LD_EXP 18
7903: PPUSH
7904: LD_STRING DH-end-2
7906: PPUSH
7907: CALL_OW 88
// end ; if tick <= 15 15$00 then
7911: LD_OWVAR 1
7915: PUSH
7916: LD_INT 31500
7918: LESSEQUAL
7919: IFFALSE 7928
// SetAchievement ( ACH_FIST ) ;
7921: LD_STRING ACH_FIST
7923: PPUSH
7924: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7928: LD_ADDR_VAR 0 2
7932: PUSH
7933: LD_INT 22
7935: PUSH
7936: LD_INT 3
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 3
7945: PUSH
7946: LD_INT 21
7948: PUSH
7949: LD_INT 3
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PPUSH
7964: CALL_OW 69
7968: ST_TO_ADDR
// if not tmp then
7969: LD_VAR 0 2
7973: NOT
7974: IFFALSE 7978
// exit ;
7976: GO 8044
// for i in tmp do
7978: LD_ADDR_VAR 0 1
7982: PUSH
7983: LD_VAR 0 2
7987: PUSH
7988: FOR_IN
7989: IFFALSE 8042
// begin SetTag ( i , tEscape ) ;
7991: LD_VAR 0 1
7995: PPUSH
7996: LD_EXP 17
8000: PPUSH
8001: CALL_OW 109
// if IsInUnit ( i ) then
8005: LD_VAR 0 1
8009: PPUSH
8010: CALL_OW 310
8014: IFFALSE 8025
// ComExitBuilding ( i ) ;
8016: LD_VAR 0 1
8020: PPUSH
8021: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8025: LD_VAR 0 1
8029: PPUSH
8030: LD_INT 92
8032: PPUSH
8033: LD_INT 177
8035: PPUSH
8036: CALL_OW 171
// end ;
8040: GO 7988
8042: POP
8043: POP
// end ;
8044: PPOPN 2
8046: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8047: LD_INT 4
8049: PPUSH
8050: LD_INT 22
8052: PUSH
8053: LD_INT 2
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PPUSH
8060: CALL_OW 70
8064: PUSH
8065: LD_EXP 15
8069: NOT
8070: AND
8071: PUSH
8072: LD_EXP 27
8076: PPUSH
8077: CALL_OW 302
8081: AND
8082: IFFALSE 8322
8084: GO 8086
8086: DISABLE
// begin DialogueOn ;
8087: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8091: LD_INT 111
8093: PPUSH
8094: LD_INT 54
8096: PPUSH
8097: LD_INT 2
8099: PPUSH
8100: LD_INT 16
8102: NEG
8103: PPUSH
8104: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8108: LD_INT 111
8110: PPUSH
8111: LD_INT 53
8113: PPUSH
8114: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8118: LD_INT 10
8120: PPUSH
8121: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8125: LD_EXP 27
8129: PPUSH
8130: LD_STRING DKs-Hannibal-1
8132: PPUSH
8133: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8137: LD_EXP 27
8141: PPUSH
8142: LD_STRING DKs-Hannibal-2
8144: PPUSH
8145: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8149: LD_EXP 27
8153: PPUSH
8154: LD_STRING DKs-Hannibal-3
8156: PPUSH
8157: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8161: LD_EXP 27
8165: PPUSH
8166: LD_STRING DKs-Hannibal-4
8168: PPUSH
8169: CALL_OW 88
// dwait ( 0 0$1 ) ;
8173: LD_INT 35
8175: PPUSH
8176: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8180: LD_INT 111
8182: PPUSH
8183: LD_INT 54
8185: PPUSH
8186: LD_INT 2
8188: PPUSH
8189: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8193: LD_INT 173
8195: PPUSH
8196: LD_INT 76
8198: PPUSH
8199: LD_INT 2
8201: PPUSH
8202: LD_INT 12
8204: NEG
8205: PPUSH
8206: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8210: LD_INT 173
8212: PPUSH
8213: LD_INT 76
8215: PPUSH
8216: LD_INT 2
8218: PPUSH
8219: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8223: LD_INT 173
8225: PPUSH
8226: LD_INT 76
8228: PPUSH
8229: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8233: LD_EXP 27
8237: PPUSH
8238: LD_STRING DKs-Hannibal-5
8240: PPUSH
8241: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8245: LD_EXP 22
8249: PUSH
8250: LD_INT 22
8252: PUSH
8253: LD_INT 2
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 34
8262: PUSH
8263: LD_INT 26
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 69
8278: NOT
8279: AND
8280: IFFALSE 8318
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8282: LD_EXP 22
8286: PPUSH
8287: LD_STRING DKam-Hannibal-a-6
8289: PPUSH
8290: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8294: LD_EXP 22
8298: PPUSH
8299: LD_STRING DKam-Hannibal-a-7
8301: PPUSH
8302: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8306: LD_EXP 19
8310: PPUSH
8311: LD_STRING DG-Hannibal-a-8
8313: PPUSH
8314: CALL_OW 88
// end ; DialogueOff ;
8318: CALL_OW 7
// end ;
8322: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8323: LD_INT 225
8325: PPUSH
8326: CALL_OW 302
8330: PUSH
8331: LD_INT 200
8333: PPUSH
8334: CALL_OW 302
8338: AND
8339: PUSH
8340: LD_INT 12
8342: PPUSH
8343: LD_INT 21
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PPUSH
8353: CALL_OW 70
8357: PUSH
8358: LD_INT 2
8360: GREATER
8361: AND
8362: PUSH
8363: LD_INT 13
8365: PPUSH
8366: LD_INT 22
8368: PUSH
8369: LD_INT 2
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PPUSH
8376: CALL_OW 70
8380: PUSH
8381: LD_INT 3
8383: GREATER
8384: AND
8385: IFFALSE 8398
8387: GO 8389
8389: DISABLE
// hannibalPath := true ;
8390: LD_ADDR_EXP 9
8394: PUSH
8395: LD_INT 1
8397: ST_TO_ADDR
8398: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8399: LD_EXP 9
8403: PUSH
8404: LD_INT 6
8406: PPUSH
8407: LD_INT 22
8409: PUSH
8410: LD_INT 2
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PPUSH
8417: CALL_OW 70
8421: AND
8422: IFFALSE 8767
8424: GO 8426
8426: DISABLE
8427: LD_INT 0
8429: PPUSH
8430: PPUSH
8431: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8432: LD_ADDR_VAR 0 2
8436: PUSH
8437: LD_INT 6
8439: PPUSH
8440: LD_INT 22
8442: PUSH
8443: LD_INT 2
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 70
8454: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8455: LD_ADDR_VAR 0 3
8459: PUSH
8460: LD_VAR 0 2
8464: PPUSH
8465: LD_INT 34
8467: PUSH
8468: LD_INT 26
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PPUSH
8475: CALL_OW 72
8479: PUSH
8480: LD_INT 0
8482: GREATER
8483: ST_TO_ADDR
// DialogueOn ;
8484: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8488: LD_EXP 18
8492: PPUSH
8493: LD_STRING DH-Cleverattack-1
8495: PPUSH
8496: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8500: LD_EXP 18
8504: PPUSH
8505: LD_STRING DH-Cleverattack-2
8507: PPUSH
8508: CALL_OW 88
// if hasFlameThrower then
8512: LD_VAR 0 3
8516: IFFALSE 8544
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8518: LD_EXP 34
8522: PPUSH
8523: LD_STRING DB-Cleverattack-3
8525: PPUSH
8526: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8530: LD_EXP 18
8534: PPUSH
8535: LD_STRING DH-Cleverattack-4
8537: PPUSH
8538: CALL_OW 88
// end else
8542: GO 8568
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
8544: LD_EXP 34
8548: PPUSH
8549: LD_STRING DB-Cleverattack-a-3
8551: PPUSH
8552: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
8556: LD_EXP 18
8560: PPUSH
8561: LD_STRING DH-Cleverattack-a-4
8563: PPUSH
8564: CALL_OW 88
// end ; DialogueOff ;
8568: CALL_OW 7
// if not hasFlameThrower then
8572: LD_VAR 0 3
8576: NOT
8577: IFFALSE 8581
// exit ;
8579: GO 8767
// earlyEscape := true ;
8581: LD_ADDR_EXP 16
8585: PUSH
8586: LD_INT 1
8588: ST_TO_ADDR
// wait ( 0 0$4 ) ;
8589: LD_INT 140
8591: PPUSH
8592: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
8596: LD_ADDR_VAR 0 2
8600: PUSH
8601: LD_INT 22
8603: PUSH
8604: LD_INT 3
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PUSH
8611: LD_INT 2
8613: PUSH
8614: LD_INT 25
8616: PUSH
8617: LD_INT 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 25
8626: PUSH
8627: LD_INT 2
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 25
8636: PUSH
8637: LD_INT 4
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PPUSH
8654: CALL_OW 69
8658: PUSH
8659: LD_EXP 21
8663: PUSH
8664: LD_EXP 36
8668: PUSH
8669: LD_EXP 35
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: LIST
8678: DIFF
8679: ST_TO_ADDR
// for i in tmp do
8680: LD_ADDR_VAR 0 1
8684: PUSH
8685: LD_VAR 0 2
8689: PUSH
8690: FOR_IN
8691: IFFALSE 8765
// begin if Prob ( 40 + 10 * Difficulty ) then
8693: LD_INT 40
8695: PUSH
8696: LD_INT 10
8698: PUSH
8699: LD_OWVAR 67
8703: MUL
8704: PLUS
8705: PPUSH
8706: CALL_OW 13
8710: IFFALSE 8714
// continue ;
8712: GO 8690
// SetTag ( i , tEscape ) ;
8714: LD_VAR 0 1
8718: PPUSH
8719: LD_EXP 17
8723: PPUSH
8724: CALL_OW 109
// if IsInUnit ( i ) then
8728: LD_VAR 0 1
8732: PPUSH
8733: CALL_OW 310
8737: IFFALSE 8748
// ComExitBuilding ( i ) ;
8739: LD_VAR 0 1
8743: PPUSH
8744: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8748: LD_VAR 0 1
8752: PPUSH
8753: LD_INT 92
8755: PPUSH
8756: LD_INT 177
8758: PPUSH
8759: CALL_OW 171
// end ;
8763: GO 8690
8765: POP
8766: POP
// end ;
8767: PPOPN 3
8769: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
8770: LD_INT 9
8772: PPUSH
8773: LD_INT 2
8775: PUSH
8776: LD_INT 22
8778: PUSH
8779: LD_INT 3
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 22
8788: PUSH
8789: LD_INT 6
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: PPUSH
8801: CALL_OW 70
8805: IFFALSE 8903
8807: GO 8809
8809: DISABLE
8810: LD_INT 0
8812: PPUSH
// begin enable ;
8813: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
8814: LD_ADDR_VAR 0 1
8818: PUSH
8819: LD_INT 9
8821: PPUSH
8822: LD_INT 2
8824: PUSH
8825: LD_INT 22
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 22
8837: PUSH
8838: LD_INT 6
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 70
8854: PUSH
8855: FOR_IN
8856: IFFALSE 8901
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
8858: LD_VAR 0 1
8862: PPUSH
8863: CALL_OW 110
8867: PUSH
8868: LD_EXP 17
8872: EQUAL
8873: PUSH
8874: LD_VAR 0 1
8878: PPUSH
8879: CALL_OW 255
8883: PUSH
8884: LD_INT 6
8886: EQUAL
8887: OR
8888: IFFALSE 8899
// RemoveUnit ( i ) ;
8890: LD_VAR 0 1
8894: PPUSH
8895: CALL_OW 64
8899: GO 8855
8901: POP
8902: POP
// end ;
8903: PPOPN 1
8905: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
8906: LD_EXP 23
8910: PUSH
8911: LD_EXP 23
8915: PPUSH
8916: CALL_OW 256
8920: PUSH
8921: LD_INT 3
8923: LESS
8924: AND
8925: IFFALSE 8971
8927: GO 8929
8929: DISABLE
// begin DialogueOn ;
8930: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
8934: LD_EXP 23
8938: PPUSH
8939: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
8943: LD_EXP 23
8947: PPUSH
8948: LD_STRING DK-Kkilled-1
8950: PPUSH
8951: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
8955: LD_EXP 18
8959: PPUSH
8960: LD_STRING DH-Kkilled-2
8962: PPUSH
8963: CALL_OW 88
// DialogueOff ;
8967: CALL_OW 7
// end ;
8971: END
// every 0 0$1 trigger kaiaKilledByRussian do
8972: LD_EXP 8
8976: IFFALSE 8993
8978: GO 8980
8980: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
8981: LD_EXP 18
8985: PPUSH
8986: LD_STRING DH-Kkilled-3
8988: PPUSH
8989: CALL_OW 88
8993: END
// every 0 0$1 trigger tick >= 22 22$00 do
8994: LD_OWVAR 1
8998: PUSH
8999: LD_INT 46200
9001: GREATEREQUAL
9002: IFFALSE 9039
9004: GO 9006
9006: DISABLE
// begin DialogueOn ;
9007: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9011: LD_EXP 26
9015: PPUSH
9016: LD_STRING DShar-slow-1
9018: PPUSH
9019: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9023: LD_EXP 26
9027: PPUSH
9028: LD_STRING DShar-slow-2
9030: PPUSH
9031: CALL_OW 94
// DialogueOff ;
9035: CALL_OW 7
// end ;
9039: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 ] [ Difficulty ] do
9040: LD_OWVAR 1
9044: PUSH
9045: LD_INT 84000
9047: PUSH
9048: LD_INT 75600
9050: PUSH
9051: LD_INT 67200
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: LD_OWVAR 67
9063: ARRAY
9064: GREATEREQUAL
9065: IFFALSE 9109
9067: GO 9069
9069: DISABLE
// begin DialogueOn ;
9070: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9074: LD_EXP 26
9078: PPUSH
9079: LD_STRING DShar-fail-1
9081: PPUSH
9082: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9086: LD_EXP 26
9090: PPUSH
9091: LD_STRING DShar-fail-2
9093: PPUSH
9094: CALL_OW 94
// DialogueOff ;
9098: CALL_OW 7
// YouLost ( Time ) ;
9102: LD_STRING Time
9104: PPUSH
9105: CALL_OW 104
// end ;
9109: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9110: LD_INT 22
9112: PUSH
9113: LD_INT 3
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 2
9122: PUSH
9123: LD_INT 30
9125: PUSH
9126: LD_INT 1
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 30
9135: PUSH
9136: LD_INT 0
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PPUSH
9152: CALL_OW 69
9156: PUSH
9157: LD_INT 0
9159: EQUAL
9160: IFFALSE 9651
9162: GO 9164
9164: DISABLE
9165: LD_INT 0
9167: PPUSH
// begin if ( tick + gameTime ) <= [ 75 75$00 , 70 70$00 , 65 65$00 ] [ Difficulty ] then
9168: LD_OWVAR 1
9172: PUSH
9173: LD_EXP 5
9177: PLUS
9178: PUSH
9179: LD_INT 157500
9181: PUSH
9182: LD_INT 147000
9184: PUSH
9185: LD_INT 136500
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: LIST
9192: PUSH
9193: LD_OWVAR 67
9197: ARRAY
9198: LESSEQUAL
9199: IFFALSE 9213
// AddMedal ( med1 , 1 ) else
9201: LD_STRING med1
9203: PPUSH
9204: LD_INT 1
9206: PPUSH
9207: CALL_OW 101
9211: GO 9224
// AddMedal ( med1 , - 1 ) ;
9213: LD_STRING med1
9215: PPUSH
9216: LD_INT 1
9218: NEG
9219: PPUSH
9220: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 ] [ Difficulty ] ) then
9224: LD_EXP 7
9228: PUSH
9229: LD_INT 3
9231: GREATEREQUAL
9232: PUSH
9233: LD_EXP 11
9237: MUL
9238: PUSH
9239: LD_EXP 9
9243: MUL
9244: PUSH
9245: LD_EXP 6
9249: PUSH
9250: LD_INT 6
9252: PUSH
9253: LD_INT 5
9255: PUSH
9256: LD_INT 4
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: PUSH
9264: LD_OWVAR 67
9268: ARRAY
9269: LESS
9270: MUL
9271: IFFALSE 9285
// AddMedal ( med2 , 1 ) else
9273: LD_STRING med2
9275: PPUSH
9276: LD_INT 1
9278: PPUSH
9279: CALL_OW 101
9283: GO 9296
// AddMedal ( med2 , - 1 ) ;
9285: LD_STRING med2
9287: PPUSH
9288: LD_INT 1
9290: NEG
9291: PPUSH
9292: CALL_OW 101
// if gaidarKilled then
9296: LD_EXP 14
9300: IFFALSE 9314
// AddMedal ( med3 , 1 ) else
9302: LD_STRING med3
9304: PPUSH
9305: LD_INT 1
9307: PPUSH
9308: CALL_OW 101
9312: GO 9325
// AddMedal ( med3 , - 1 ) ;
9314: LD_STRING med3
9316: PPUSH
9317: LD_INT 1
9319: NEG
9320: PPUSH
9321: CALL_OW 101
// GiveMedals ( MAIN ) ;
9325: LD_STRING MAIN
9327: PPUSH
9328: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9332: LD_INT 22
9334: PUSH
9335: LD_INT 2
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: LD_INT 3
9344: PUSH
9345: LD_INT 23
9347: PUSH
9348: LD_INT 0
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 69
9367: PPUSH
9368: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9372: LD_EXP 18
9376: PPUSH
9377: LD_STRING 04_2_Heike
9379: PPUSH
9380: CALL_OW 38
// if Aviradze then
9384: LD_EXP 28
9388: IFFALSE 9402
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9390: LD_EXP 28
9394: PPUSH
9395: LD_STRING 04_2_Aviradze
9397: PPUSH
9398: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9402: LD_EXP 21
9406: PUSH
9407: LD_EXP 21
9411: PPUSH
9412: CALL_OW 255
9416: PUSH
9417: LD_INT 2
9419: EQUAL
9420: AND
9421: IFFALSE 9451
// begin if ibrahimOnRuSide then
9423: LD_EXP 3
9427: IFFALSE 9439
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9429: LD_INT 1
9431: PPUSH
9432: LD_STRING 04_2_IbrahimJoined
9434: PPUSH
9435: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9439: LD_EXP 21
9443: PPUSH
9444: LD_STRING 04_2_Ibrahim
9446: PPUSH
9447: CALL_OW 38
// end ; if Kamil then
9451: LD_EXP 22
9455: IFFALSE 9469
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
9457: LD_EXP 22
9461: PPUSH
9462: LD_STRING 04_2_Kamil
9464: PPUSH
9465: CALL_OW 38
// if Sophia then
9469: LD_EXP 24
9473: IFFALSE 9487
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
9475: LD_EXP 24
9479: PPUSH
9480: LD_STRING 04_2_Sophia
9482: PPUSH
9483: CALL_OW 38
// if Kaia then
9487: LD_EXP 23
9491: IFFALSE 9505
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
9493: LD_EXP 23
9497: PPUSH
9498: LD_STRING 04_2_Kaia
9500: PPUSH
9501: CALL_OW 38
// if Givi then
9505: LD_EXP 19
9509: IFFALSE 9523
// SaveCharacters ( Givi , 04_2_Givi ) ;
9511: LD_EXP 19
9515: PPUSH
9516: LD_STRING 04_2_Givi
9518: PPUSH
9519: CALL_OW 38
// if Mike then
9523: LD_EXP 20
9527: IFFALSE 9541
// SaveCharacters ( Mike , 04_2_Mike ) ;
9529: LD_EXP 20
9533: PPUSH
9534: LD_STRING 04_2_Mike
9536: PPUSH
9537: CALL_OW 38
// if Markov then
9541: LD_EXP 25
9545: IFFALSE 9559
// SaveCharacters ( Markov , 04_2_Markov ) ;
9547: LD_EXP 25
9551: PPUSH
9552: LD_STRING 04_2_Markov
9554: PPUSH
9555: CALL_OW 38
// if Kurt then
9559: LD_EXP 27
9563: IFFALSE 9577
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
9565: LD_EXP 27
9569: PPUSH
9570: LD_STRING 04_2_Kurt
9572: PPUSH
9573: CALL_OW 38
// if heikeSecondSquad then
9577: LD_EXP 29
9581: IFFALSE 9595
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
9583: LD_EXP 29
9587: PPUSH
9588: LD_STRING 04_2_others
9590: PPUSH
9591: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
9595: LD_ADDR_VAR 0 1
9599: PUSH
9600: LD_INT 22
9602: PUSH
9603: LD_INT 2
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 23
9612: PUSH
9613: LD_INT 0
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PPUSH
9624: CALL_OW 69
9628: ST_TO_ADDR
// if tmp then
9629: LD_VAR 0 1
9633: IFFALSE 9647
// SaveCharacters ( tmp , 04_2_apes ) ;
9635: LD_VAR 0 1
9639: PPUSH
9640: LD_STRING 04_2_apes
9642: PPUSH
9643: CALL_OW 38
// YouWin ;
9647: CALL_OW 103
// end ; end_of_file
9651: PPOPN 1
9653: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
9654: LD_VAR 0 2
9658: PUSH
9659: LD_INT 100
9661: EQUAL
9662: IFFALSE 10611
// begin if not StreamModeActive then
9664: LD_EXP 43
9668: NOT
9669: IFFALSE 9679
// StreamModeActive := true ;
9671: LD_ADDR_EXP 43
9675: PUSH
9676: LD_INT 1
9678: ST_TO_ADDR
// if p3 = 0 then
9679: LD_VAR 0 3
9683: PUSH
9684: LD_INT 0
9686: EQUAL
9687: IFFALSE 9693
// InitStreamMode ;
9689: CALL 10769 0 0
// if p3 = 1 then
9693: LD_VAR 0 3
9697: PUSH
9698: LD_INT 1
9700: EQUAL
9701: IFFALSE 9711
// sRocket := true ;
9703: LD_ADDR_EXP 48
9707: PUSH
9708: LD_INT 1
9710: ST_TO_ADDR
// if p3 = 2 then
9711: LD_VAR 0 3
9715: PUSH
9716: LD_INT 2
9718: EQUAL
9719: IFFALSE 9729
// sSpeed := true ;
9721: LD_ADDR_EXP 47
9725: PUSH
9726: LD_INT 1
9728: ST_TO_ADDR
// if p3 = 3 then
9729: LD_VAR 0 3
9733: PUSH
9734: LD_INT 3
9736: EQUAL
9737: IFFALSE 9747
// sEngine := true ;
9739: LD_ADDR_EXP 49
9743: PUSH
9744: LD_INT 1
9746: ST_TO_ADDR
// if p3 = 4 then
9747: LD_VAR 0 3
9751: PUSH
9752: LD_INT 4
9754: EQUAL
9755: IFFALSE 9765
// sSpec := true ;
9757: LD_ADDR_EXP 46
9761: PUSH
9762: LD_INT 1
9764: ST_TO_ADDR
// if p3 = 5 then
9765: LD_VAR 0 3
9769: PUSH
9770: LD_INT 5
9772: EQUAL
9773: IFFALSE 9783
// sLevel := true ;
9775: LD_ADDR_EXP 50
9779: PUSH
9780: LD_INT 1
9782: ST_TO_ADDR
// if p3 = 6 then
9783: LD_VAR 0 3
9787: PUSH
9788: LD_INT 6
9790: EQUAL
9791: IFFALSE 9801
// sArmoury := true ;
9793: LD_ADDR_EXP 51
9797: PUSH
9798: LD_INT 1
9800: ST_TO_ADDR
// if p3 = 7 then
9801: LD_VAR 0 3
9805: PUSH
9806: LD_INT 7
9808: EQUAL
9809: IFFALSE 9819
// sRadar := true ;
9811: LD_ADDR_EXP 52
9815: PUSH
9816: LD_INT 1
9818: ST_TO_ADDR
// if p3 = 8 then
9819: LD_VAR 0 3
9823: PUSH
9824: LD_INT 8
9826: EQUAL
9827: IFFALSE 9837
// sBunker := true ;
9829: LD_ADDR_EXP 53
9833: PUSH
9834: LD_INT 1
9836: ST_TO_ADDR
// if p3 = 9 then
9837: LD_VAR 0 3
9841: PUSH
9842: LD_INT 9
9844: EQUAL
9845: IFFALSE 9855
// sHack := true ;
9847: LD_ADDR_EXP 54
9851: PUSH
9852: LD_INT 1
9854: ST_TO_ADDR
// if p3 = 10 then
9855: LD_VAR 0 3
9859: PUSH
9860: LD_INT 10
9862: EQUAL
9863: IFFALSE 9873
// sFire := true ;
9865: LD_ADDR_EXP 55
9869: PUSH
9870: LD_INT 1
9872: ST_TO_ADDR
// if p3 = 11 then
9873: LD_VAR 0 3
9877: PUSH
9878: LD_INT 11
9880: EQUAL
9881: IFFALSE 9891
// sRefresh := true ;
9883: LD_ADDR_EXP 56
9887: PUSH
9888: LD_INT 1
9890: ST_TO_ADDR
// if p3 = 12 then
9891: LD_VAR 0 3
9895: PUSH
9896: LD_INT 12
9898: EQUAL
9899: IFFALSE 9909
// sExp := true ;
9901: LD_ADDR_EXP 57
9905: PUSH
9906: LD_INT 1
9908: ST_TO_ADDR
// if p3 = 13 then
9909: LD_VAR 0 3
9913: PUSH
9914: LD_INT 13
9916: EQUAL
9917: IFFALSE 9927
// sDepot := true ;
9919: LD_ADDR_EXP 58
9923: PUSH
9924: LD_INT 1
9926: ST_TO_ADDR
// if p3 = 14 then
9927: LD_VAR 0 3
9931: PUSH
9932: LD_INT 14
9934: EQUAL
9935: IFFALSE 9945
// sFlag := true ;
9937: LD_ADDR_EXP 59
9941: PUSH
9942: LD_INT 1
9944: ST_TO_ADDR
// if p3 = 15 then
9945: LD_VAR 0 3
9949: PUSH
9950: LD_INT 15
9952: EQUAL
9953: IFFALSE 9963
// sKamikadze := true ;
9955: LD_ADDR_EXP 67
9959: PUSH
9960: LD_INT 1
9962: ST_TO_ADDR
// if p3 = 16 then
9963: LD_VAR 0 3
9967: PUSH
9968: LD_INT 16
9970: EQUAL
9971: IFFALSE 9981
// sTroll := true ;
9973: LD_ADDR_EXP 68
9977: PUSH
9978: LD_INT 1
9980: ST_TO_ADDR
// if p3 = 17 then
9981: LD_VAR 0 3
9985: PUSH
9986: LD_INT 17
9988: EQUAL
9989: IFFALSE 9999
// sSlow := true ;
9991: LD_ADDR_EXP 69
9995: PUSH
9996: LD_INT 1
9998: ST_TO_ADDR
// if p3 = 18 then
9999: LD_VAR 0 3
10003: PUSH
10004: LD_INT 18
10006: EQUAL
10007: IFFALSE 10017
// sLack := true ;
10009: LD_ADDR_EXP 70
10013: PUSH
10014: LD_INT 1
10016: ST_TO_ADDR
// if p3 = 19 then
10017: LD_VAR 0 3
10021: PUSH
10022: LD_INT 19
10024: EQUAL
10025: IFFALSE 10035
// sTank := true ;
10027: LD_ADDR_EXP 72
10031: PUSH
10032: LD_INT 1
10034: ST_TO_ADDR
// if p3 = 20 then
10035: LD_VAR 0 3
10039: PUSH
10040: LD_INT 20
10042: EQUAL
10043: IFFALSE 10053
// sRemote := true ;
10045: LD_ADDR_EXP 73
10049: PUSH
10050: LD_INT 1
10052: ST_TO_ADDR
// if p3 = 21 then
10053: LD_VAR 0 3
10057: PUSH
10058: LD_INT 21
10060: EQUAL
10061: IFFALSE 10071
// sPowell := true ;
10063: LD_ADDR_EXP 74
10067: PUSH
10068: LD_INT 1
10070: ST_TO_ADDR
// if p3 = 22 then
10071: LD_VAR 0 3
10075: PUSH
10076: LD_INT 22
10078: EQUAL
10079: IFFALSE 10089
// sTeleport := true ;
10081: LD_ADDR_EXP 77
10085: PUSH
10086: LD_INT 1
10088: ST_TO_ADDR
// if p3 = 23 then
10089: LD_VAR 0 3
10093: PUSH
10094: LD_INT 23
10096: EQUAL
10097: IFFALSE 10107
// sOilTower := true ;
10099: LD_ADDR_EXP 79
10103: PUSH
10104: LD_INT 1
10106: ST_TO_ADDR
// if p3 = 24 then
10107: LD_VAR 0 3
10111: PUSH
10112: LD_INT 24
10114: EQUAL
10115: IFFALSE 10125
// sShovel := true ;
10117: LD_ADDR_EXP 80
10121: PUSH
10122: LD_INT 1
10124: ST_TO_ADDR
// if p3 = 25 then
10125: LD_VAR 0 3
10129: PUSH
10130: LD_INT 25
10132: EQUAL
10133: IFFALSE 10143
// sSheik := true ;
10135: LD_ADDR_EXP 81
10139: PUSH
10140: LD_INT 1
10142: ST_TO_ADDR
// if p3 = 26 then
10143: LD_VAR 0 3
10147: PUSH
10148: LD_INT 26
10150: EQUAL
10151: IFFALSE 10161
// sEarthquake := true ;
10153: LD_ADDR_EXP 83
10157: PUSH
10158: LD_INT 1
10160: ST_TO_ADDR
// if p3 = 27 then
10161: LD_VAR 0 3
10165: PUSH
10166: LD_INT 27
10168: EQUAL
10169: IFFALSE 10179
// sAI := true ;
10171: LD_ADDR_EXP 84
10175: PUSH
10176: LD_INT 1
10178: ST_TO_ADDR
// if p3 = 28 then
10179: LD_VAR 0 3
10183: PUSH
10184: LD_INT 28
10186: EQUAL
10187: IFFALSE 10197
// sCargo := true ;
10189: LD_ADDR_EXP 87
10193: PUSH
10194: LD_INT 1
10196: ST_TO_ADDR
// if p3 = 29 then
10197: LD_VAR 0 3
10201: PUSH
10202: LD_INT 29
10204: EQUAL
10205: IFFALSE 10215
// sDLaser := true ;
10207: LD_ADDR_EXP 88
10211: PUSH
10212: LD_INT 1
10214: ST_TO_ADDR
// if p3 = 30 then
10215: LD_VAR 0 3
10219: PUSH
10220: LD_INT 30
10222: EQUAL
10223: IFFALSE 10233
// sExchange := true ;
10225: LD_ADDR_EXP 89
10229: PUSH
10230: LD_INT 1
10232: ST_TO_ADDR
// if p3 = 31 then
10233: LD_VAR 0 3
10237: PUSH
10238: LD_INT 31
10240: EQUAL
10241: IFFALSE 10251
// sFac := true ;
10243: LD_ADDR_EXP 90
10247: PUSH
10248: LD_INT 1
10250: ST_TO_ADDR
// if p3 = 32 then
10251: LD_VAR 0 3
10255: PUSH
10256: LD_INT 32
10258: EQUAL
10259: IFFALSE 10269
// sPower := true ;
10261: LD_ADDR_EXP 91
10265: PUSH
10266: LD_INT 1
10268: ST_TO_ADDR
// if p3 = 33 then
10269: LD_VAR 0 3
10273: PUSH
10274: LD_INT 33
10276: EQUAL
10277: IFFALSE 10287
// sRandom := true ;
10279: LD_ADDR_EXP 92
10283: PUSH
10284: LD_INT 1
10286: ST_TO_ADDR
// if p3 = 34 then
10287: LD_VAR 0 3
10291: PUSH
10292: LD_INT 34
10294: EQUAL
10295: IFFALSE 10305
// sShield := true ;
10297: LD_ADDR_EXP 93
10301: PUSH
10302: LD_INT 1
10304: ST_TO_ADDR
// if p3 = 35 then
10305: LD_VAR 0 3
10309: PUSH
10310: LD_INT 35
10312: EQUAL
10313: IFFALSE 10323
// sTime := true ;
10315: LD_ADDR_EXP 94
10319: PUSH
10320: LD_INT 1
10322: ST_TO_ADDR
// if p3 = 36 then
10323: LD_VAR 0 3
10327: PUSH
10328: LD_INT 36
10330: EQUAL
10331: IFFALSE 10341
// sTools := true ;
10333: LD_ADDR_EXP 95
10337: PUSH
10338: LD_INT 1
10340: ST_TO_ADDR
// if p3 = 101 then
10341: LD_VAR 0 3
10345: PUSH
10346: LD_INT 101
10348: EQUAL
10349: IFFALSE 10359
// sSold := true ;
10351: LD_ADDR_EXP 60
10355: PUSH
10356: LD_INT 1
10358: ST_TO_ADDR
// if p3 = 102 then
10359: LD_VAR 0 3
10363: PUSH
10364: LD_INT 102
10366: EQUAL
10367: IFFALSE 10377
// sDiff := true ;
10369: LD_ADDR_EXP 61
10373: PUSH
10374: LD_INT 1
10376: ST_TO_ADDR
// if p3 = 103 then
10377: LD_VAR 0 3
10381: PUSH
10382: LD_INT 103
10384: EQUAL
10385: IFFALSE 10395
// sFog := true ;
10387: LD_ADDR_EXP 64
10391: PUSH
10392: LD_INT 1
10394: ST_TO_ADDR
// if p3 = 104 then
10395: LD_VAR 0 3
10399: PUSH
10400: LD_INT 104
10402: EQUAL
10403: IFFALSE 10413
// sReset := true ;
10405: LD_ADDR_EXP 65
10409: PUSH
10410: LD_INT 1
10412: ST_TO_ADDR
// if p3 = 105 then
10413: LD_VAR 0 3
10417: PUSH
10418: LD_INT 105
10420: EQUAL
10421: IFFALSE 10431
// sSun := true ;
10423: LD_ADDR_EXP 66
10427: PUSH
10428: LD_INT 1
10430: ST_TO_ADDR
// if p3 = 106 then
10431: LD_VAR 0 3
10435: PUSH
10436: LD_INT 106
10438: EQUAL
10439: IFFALSE 10449
// sTiger := true ;
10441: LD_ADDR_EXP 62
10445: PUSH
10446: LD_INT 1
10448: ST_TO_ADDR
// if p3 = 107 then
10449: LD_VAR 0 3
10453: PUSH
10454: LD_INT 107
10456: EQUAL
10457: IFFALSE 10467
// sBomb := true ;
10459: LD_ADDR_EXP 63
10463: PUSH
10464: LD_INT 1
10466: ST_TO_ADDR
// if p3 = 108 then
10467: LD_VAR 0 3
10471: PUSH
10472: LD_INT 108
10474: EQUAL
10475: IFFALSE 10485
// sWound := true ;
10477: LD_ADDR_EXP 71
10481: PUSH
10482: LD_INT 1
10484: ST_TO_ADDR
// if p3 = 109 then
10485: LD_VAR 0 3
10489: PUSH
10490: LD_INT 109
10492: EQUAL
10493: IFFALSE 10503
// sBetray := true ;
10495: LD_ADDR_EXP 75
10499: PUSH
10500: LD_INT 1
10502: ST_TO_ADDR
// if p3 = 110 then
10503: LD_VAR 0 3
10507: PUSH
10508: LD_INT 110
10510: EQUAL
10511: IFFALSE 10521
// sContamin := true ;
10513: LD_ADDR_EXP 76
10517: PUSH
10518: LD_INT 1
10520: ST_TO_ADDR
// if p3 = 111 then
10521: LD_VAR 0 3
10525: PUSH
10526: LD_INT 111
10528: EQUAL
10529: IFFALSE 10539
// sOil := true ;
10531: LD_ADDR_EXP 78
10535: PUSH
10536: LD_INT 1
10538: ST_TO_ADDR
// if p3 = 112 then
10539: LD_VAR 0 3
10543: PUSH
10544: LD_INT 112
10546: EQUAL
10547: IFFALSE 10557
// sStu := true ;
10549: LD_ADDR_EXP 82
10553: PUSH
10554: LD_INT 1
10556: ST_TO_ADDR
// if p3 = 113 then
10557: LD_VAR 0 3
10561: PUSH
10562: LD_INT 113
10564: EQUAL
10565: IFFALSE 10575
// sBazooka := true ;
10567: LD_ADDR_EXP 85
10571: PUSH
10572: LD_INT 1
10574: ST_TO_ADDR
// if p3 = 114 then
10575: LD_VAR 0 3
10579: PUSH
10580: LD_INT 114
10582: EQUAL
10583: IFFALSE 10593
// sMortar := true ;
10585: LD_ADDR_EXP 86
10589: PUSH
10590: LD_INT 1
10592: ST_TO_ADDR
// if p3 = 115 then
10593: LD_VAR 0 3
10597: PUSH
10598: LD_INT 115
10600: EQUAL
10601: IFFALSE 10611
// sRanger := true ;
10603: LD_ADDR_EXP 96
10607: PUSH
10608: LD_INT 1
10610: ST_TO_ADDR
// end ; if p2 = 101 then
10611: LD_VAR 0 2
10615: PUSH
10616: LD_INT 101
10618: EQUAL
10619: IFFALSE 10747
// begin case p3 of 1 :
10621: LD_VAR 0 3
10625: PUSH
10626: LD_INT 1
10628: DOUBLE
10629: EQUAL
10630: IFTRUE 10634
10632: GO 10641
10634: POP
// hHackUnlimitedResources ; 2 :
10635: CALL 21782 0 0
10639: GO 10747
10641: LD_INT 2
10643: DOUBLE
10644: EQUAL
10645: IFTRUE 10649
10647: GO 10656
10649: POP
// hHackSetLevel10 ; 3 :
10650: CALL 21915 0 0
10654: GO 10747
10656: LD_INT 3
10658: DOUBLE
10659: EQUAL
10660: IFTRUE 10664
10662: GO 10671
10664: POP
// hHackSetLevel10YourUnits ; 4 :
10665: CALL 22000 0 0
10669: GO 10747
10671: LD_INT 4
10673: DOUBLE
10674: EQUAL
10675: IFTRUE 10679
10677: GO 10686
10679: POP
// hHackInvincible ; 5 :
10680: CALL 22448 0 0
10684: GO 10747
10686: LD_INT 5
10688: DOUBLE
10689: EQUAL
10690: IFTRUE 10694
10692: GO 10701
10694: POP
// hHackInvisible ; 6 :
10695: CALL 22559 0 0
10699: GO 10747
10701: LD_INT 6
10703: DOUBLE
10704: EQUAL
10705: IFTRUE 10709
10707: GO 10716
10709: POP
// hHackChangeYourSide ; 7 :
10710: CALL 22616 0 0
10714: GO 10747
10716: LD_INT 7
10718: DOUBLE
10719: EQUAL
10720: IFTRUE 10724
10722: GO 10731
10724: POP
// hHackChangeUnitSide ; 8 :
10725: CALL 22658 0 0
10729: GO 10747
10731: LD_INT 8
10733: DOUBLE
10734: EQUAL
10735: IFTRUE 10739
10737: GO 10746
10739: POP
// hHackFog ; end ;
10740: CALL 22759 0 0
10744: GO 10747
10746: POP
// end ; end ;
10747: PPOPN 6
10749: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
10750: GO 10752
10752: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10753: LD_STRING initStreamRollete();
10755: PPUSH
10756: CALL_OW 559
// InitStreamMode ;
10760: CALL 10769 0 0
// DefineStreamItems ( ) ;
10764: CALL 11209 0 0
// end ;
10768: END
// function InitStreamMode ; begin
10769: LD_INT 0
10771: PPUSH
// streamModeActive := false ;
10772: LD_ADDR_EXP 43
10776: PUSH
10777: LD_INT 0
10779: ST_TO_ADDR
// normalCounter := 36 ;
10780: LD_ADDR_EXP 44
10784: PUSH
10785: LD_INT 36
10787: ST_TO_ADDR
// hardcoreCounter := 16 ;
10788: LD_ADDR_EXP 45
10792: PUSH
10793: LD_INT 16
10795: ST_TO_ADDR
// sRocket := false ;
10796: LD_ADDR_EXP 48
10800: PUSH
10801: LD_INT 0
10803: ST_TO_ADDR
// sSpeed := false ;
10804: LD_ADDR_EXP 47
10808: PUSH
10809: LD_INT 0
10811: ST_TO_ADDR
// sEngine := false ;
10812: LD_ADDR_EXP 49
10816: PUSH
10817: LD_INT 0
10819: ST_TO_ADDR
// sSpec := false ;
10820: LD_ADDR_EXP 46
10824: PUSH
10825: LD_INT 0
10827: ST_TO_ADDR
// sLevel := false ;
10828: LD_ADDR_EXP 50
10832: PUSH
10833: LD_INT 0
10835: ST_TO_ADDR
// sArmoury := false ;
10836: LD_ADDR_EXP 51
10840: PUSH
10841: LD_INT 0
10843: ST_TO_ADDR
// sRadar := false ;
10844: LD_ADDR_EXP 52
10848: PUSH
10849: LD_INT 0
10851: ST_TO_ADDR
// sBunker := false ;
10852: LD_ADDR_EXP 53
10856: PUSH
10857: LD_INT 0
10859: ST_TO_ADDR
// sHack := false ;
10860: LD_ADDR_EXP 54
10864: PUSH
10865: LD_INT 0
10867: ST_TO_ADDR
// sFire := false ;
10868: LD_ADDR_EXP 55
10872: PUSH
10873: LD_INT 0
10875: ST_TO_ADDR
// sRefresh := false ;
10876: LD_ADDR_EXP 56
10880: PUSH
10881: LD_INT 0
10883: ST_TO_ADDR
// sExp := false ;
10884: LD_ADDR_EXP 57
10888: PUSH
10889: LD_INT 0
10891: ST_TO_ADDR
// sDepot := false ;
10892: LD_ADDR_EXP 58
10896: PUSH
10897: LD_INT 0
10899: ST_TO_ADDR
// sFlag := false ;
10900: LD_ADDR_EXP 59
10904: PUSH
10905: LD_INT 0
10907: ST_TO_ADDR
// sKamikadze := false ;
10908: LD_ADDR_EXP 67
10912: PUSH
10913: LD_INT 0
10915: ST_TO_ADDR
// sTroll := false ;
10916: LD_ADDR_EXP 68
10920: PUSH
10921: LD_INT 0
10923: ST_TO_ADDR
// sSlow := false ;
10924: LD_ADDR_EXP 69
10928: PUSH
10929: LD_INT 0
10931: ST_TO_ADDR
// sLack := false ;
10932: LD_ADDR_EXP 70
10936: PUSH
10937: LD_INT 0
10939: ST_TO_ADDR
// sTank := false ;
10940: LD_ADDR_EXP 72
10944: PUSH
10945: LD_INT 0
10947: ST_TO_ADDR
// sRemote := false ;
10948: LD_ADDR_EXP 73
10952: PUSH
10953: LD_INT 0
10955: ST_TO_ADDR
// sPowell := false ;
10956: LD_ADDR_EXP 74
10960: PUSH
10961: LD_INT 0
10963: ST_TO_ADDR
// sTeleport := false ;
10964: LD_ADDR_EXP 77
10968: PUSH
10969: LD_INT 0
10971: ST_TO_ADDR
// sOilTower := false ;
10972: LD_ADDR_EXP 79
10976: PUSH
10977: LD_INT 0
10979: ST_TO_ADDR
// sShovel := false ;
10980: LD_ADDR_EXP 80
10984: PUSH
10985: LD_INT 0
10987: ST_TO_ADDR
// sSheik := false ;
10988: LD_ADDR_EXP 81
10992: PUSH
10993: LD_INT 0
10995: ST_TO_ADDR
// sEarthquake := false ;
10996: LD_ADDR_EXP 83
11000: PUSH
11001: LD_INT 0
11003: ST_TO_ADDR
// sAI := false ;
11004: LD_ADDR_EXP 84
11008: PUSH
11009: LD_INT 0
11011: ST_TO_ADDR
// sCargo := false ;
11012: LD_ADDR_EXP 87
11016: PUSH
11017: LD_INT 0
11019: ST_TO_ADDR
// sDLaser := false ;
11020: LD_ADDR_EXP 88
11024: PUSH
11025: LD_INT 0
11027: ST_TO_ADDR
// sExchange := false ;
11028: LD_ADDR_EXP 89
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// sFac := false ;
11036: LD_ADDR_EXP 90
11040: PUSH
11041: LD_INT 0
11043: ST_TO_ADDR
// sPower := false ;
11044: LD_ADDR_EXP 91
11048: PUSH
11049: LD_INT 0
11051: ST_TO_ADDR
// sRandom := false ;
11052: LD_ADDR_EXP 92
11056: PUSH
11057: LD_INT 0
11059: ST_TO_ADDR
// sShield := false ;
11060: LD_ADDR_EXP 93
11064: PUSH
11065: LD_INT 0
11067: ST_TO_ADDR
// sTime := false ;
11068: LD_ADDR_EXP 94
11072: PUSH
11073: LD_INT 0
11075: ST_TO_ADDR
// sTools := false ;
11076: LD_ADDR_EXP 95
11080: PUSH
11081: LD_INT 0
11083: ST_TO_ADDR
// sSold := false ;
11084: LD_ADDR_EXP 60
11088: PUSH
11089: LD_INT 0
11091: ST_TO_ADDR
// sDiff := false ;
11092: LD_ADDR_EXP 61
11096: PUSH
11097: LD_INT 0
11099: ST_TO_ADDR
// sFog := false ;
11100: LD_ADDR_EXP 64
11104: PUSH
11105: LD_INT 0
11107: ST_TO_ADDR
// sReset := false ;
11108: LD_ADDR_EXP 65
11112: PUSH
11113: LD_INT 0
11115: ST_TO_ADDR
// sSun := false ;
11116: LD_ADDR_EXP 66
11120: PUSH
11121: LD_INT 0
11123: ST_TO_ADDR
// sTiger := false ;
11124: LD_ADDR_EXP 62
11128: PUSH
11129: LD_INT 0
11131: ST_TO_ADDR
// sBomb := false ;
11132: LD_ADDR_EXP 63
11136: PUSH
11137: LD_INT 0
11139: ST_TO_ADDR
// sWound := false ;
11140: LD_ADDR_EXP 71
11144: PUSH
11145: LD_INT 0
11147: ST_TO_ADDR
// sBetray := false ;
11148: LD_ADDR_EXP 75
11152: PUSH
11153: LD_INT 0
11155: ST_TO_ADDR
// sContamin := false ;
11156: LD_ADDR_EXP 76
11160: PUSH
11161: LD_INT 0
11163: ST_TO_ADDR
// sOil := false ;
11164: LD_ADDR_EXP 78
11168: PUSH
11169: LD_INT 0
11171: ST_TO_ADDR
// sStu := false ;
11172: LD_ADDR_EXP 82
11176: PUSH
11177: LD_INT 0
11179: ST_TO_ADDR
// sBazooka := false ;
11180: LD_ADDR_EXP 85
11184: PUSH
11185: LD_INT 0
11187: ST_TO_ADDR
// sMortar := false ;
11188: LD_ADDR_EXP 86
11192: PUSH
11193: LD_INT 0
11195: ST_TO_ADDR
// sRanger := false ;
11196: LD_ADDR_EXP 96
11200: PUSH
11201: LD_INT 0
11203: ST_TO_ADDR
// end ;
11204: LD_VAR 0 1
11208: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11209: LD_INT 0
11211: PPUSH
11212: PPUSH
11213: PPUSH
11214: PPUSH
11215: PPUSH
// result := [ ] ;
11216: LD_ADDR_VAR 0 1
11220: PUSH
11221: EMPTY
11222: ST_TO_ADDR
// if campaign_id = 1 then
11223: LD_OWVAR 69
11227: PUSH
11228: LD_INT 1
11230: EQUAL
11231: IFFALSE 14169
// begin case mission_number of 1 :
11233: LD_OWVAR 70
11237: PUSH
11238: LD_INT 1
11240: DOUBLE
11241: EQUAL
11242: IFTRUE 11246
11244: GO 11310
11246: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11247: LD_ADDR_VAR 0 1
11251: PUSH
11252: LD_INT 2
11254: PUSH
11255: LD_INT 4
11257: PUSH
11258: LD_INT 11
11260: PUSH
11261: LD_INT 12
11263: PUSH
11264: LD_INT 15
11266: PUSH
11267: LD_INT 16
11269: PUSH
11270: LD_INT 22
11272: PUSH
11273: LD_INT 23
11275: PUSH
11276: LD_INT 26
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: PUSH
11290: LD_INT 101
11292: PUSH
11293: LD_INT 102
11295: PUSH
11296: LD_INT 106
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: ST_TO_ADDR
11308: GO 14167
11310: LD_INT 2
11312: DOUBLE
11313: EQUAL
11314: IFTRUE 11318
11316: GO 11390
11318: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11319: LD_ADDR_VAR 0 1
11323: PUSH
11324: LD_INT 2
11326: PUSH
11327: LD_INT 4
11329: PUSH
11330: LD_INT 11
11332: PUSH
11333: LD_INT 12
11335: PUSH
11336: LD_INT 15
11338: PUSH
11339: LD_INT 16
11341: PUSH
11342: LD_INT 22
11344: PUSH
11345: LD_INT 23
11347: PUSH
11348: LD_INT 26
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 101
11364: PUSH
11365: LD_INT 102
11367: PUSH
11368: LD_INT 105
11370: PUSH
11371: LD_INT 106
11373: PUSH
11374: LD_INT 108
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: ST_TO_ADDR
11388: GO 14167
11390: LD_INT 3
11392: DOUBLE
11393: EQUAL
11394: IFTRUE 11398
11396: GO 11474
11398: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11399: LD_ADDR_VAR 0 1
11403: PUSH
11404: LD_INT 2
11406: PUSH
11407: LD_INT 4
11409: PUSH
11410: LD_INT 5
11412: PUSH
11413: LD_INT 11
11415: PUSH
11416: LD_INT 12
11418: PUSH
11419: LD_INT 15
11421: PUSH
11422: LD_INT 16
11424: PUSH
11425: LD_INT 22
11427: PUSH
11428: LD_INT 26
11430: PUSH
11431: LD_INT 36
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 101
11448: PUSH
11449: LD_INT 102
11451: PUSH
11452: LD_INT 105
11454: PUSH
11455: LD_INT 106
11457: PUSH
11458: LD_INT 108
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: ST_TO_ADDR
11472: GO 14167
11474: LD_INT 4
11476: DOUBLE
11477: EQUAL
11478: IFTRUE 11482
11480: GO 11566
11482: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11483: LD_ADDR_VAR 0 1
11487: PUSH
11488: LD_INT 2
11490: PUSH
11491: LD_INT 4
11493: PUSH
11494: LD_INT 5
11496: PUSH
11497: LD_INT 8
11499: PUSH
11500: LD_INT 11
11502: PUSH
11503: LD_INT 12
11505: PUSH
11506: LD_INT 15
11508: PUSH
11509: LD_INT 16
11511: PUSH
11512: LD_INT 22
11514: PUSH
11515: LD_INT 23
11517: PUSH
11518: LD_INT 26
11520: PUSH
11521: LD_INT 36
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: PUSH
11538: LD_INT 101
11540: PUSH
11541: LD_INT 102
11543: PUSH
11544: LD_INT 105
11546: PUSH
11547: LD_INT 106
11549: PUSH
11550: LD_INT 108
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: ST_TO_ADDR
11564: GO 14167
11566: LD_INT 5
11568: DOUBLE
11569: EQUAL
11570: IFTRUE 11574
11572: GO 11674
11574: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11575: LD_ADDR_VAR 0 1
11579: PUSH
11580: LD_INT 2
11582: PUSH
11583: LD_INT 4
11585: PUSH
11586: LD_INT 5
11588: PUSH
11589: LD_INT 6
11591: PUSH
11592: LD_INT 8
11594: PUSH
11595: LD_INT 11
11597: PUSH
11598: LD_INT 12
11600: PUSH
11601: LD_INT 15
11603: PUSH
11604: LD_INT 16
11606: PUSH
11607: LD_INT 22
11609: PUSH
11610: LD_INT 23
11612: PUSH
11613: LD_INT 25
11615: PUSH
11616: LD_INT 26
11618: PUSH
11619: LD_INT 36
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: PUSH
11638: LD_INT 101
11640: PUSH
11641: LD_INT 102
11643: PUSH
11644: LD_INT 105
11646: PUSH
11647: LD_INT 106
11649: PUSH
11650: LD_INT 108
11652: PUSH
11653: LD_INT 109
11655: PUSH
11656: LD_INT 112
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: ST_TO_ADDR
11672: GO 14167
11674: LD_INT 6
11676: DOUBLE
11677: EQUAL
11678: IFTRUE 11682
11680: GO 11802
11682: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11683: LD_ADDR_VAR 0 1
11687: PUSH
11688: LD_INT 2
11690: PUSH
11691: LD_INT 4
11693: PUSH
11694: LD_INT 5
11696: PUSH
11697: LD_INT 6
11699: PUSH
11700: LD_INT 8
11702: PUSH
11703: LD_INT 11
11705: PUSH
11706: LD_INT 12
11708: PUSH
11709: LD_INT 15
11711: PUSH
11712: LD_INT 16
11714: PUSH
11715: LD_INT 20
11717: PUSH
11718: LD_INT 21
11720: PUSH
11721: LD_INT 22
11723: PUSH
11724: LD_INT 23
11726: PUSH
11727: LD_INT 25
11729: PUSH
11730: LD_INT 26
11732: PUSH
11733: LD_INT 30
11735: PUSH
11736: LD_INT 31
11738: PUSH
11739: LD_INT 32
11741: PUSH
11742: LD_INT 36
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 101
11768: PUSH
11769: LD_INT 102
11771: PUSH
11772: LD_INT 105
11774: PUSH
11775: LD_INT 106
11777: PUSH
11778: LD_INT 108
11780: PUSH
11781: LD_INT 109
11783: PUSH
11784: LD_INT 112
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: ST_TO_ADDR
11800: GO 14167
11802: LD_INT 7
11804: DOUBLE
11805: EQUAL
11806: IFTRUE 11810
11808: GO 11910
11810: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
11811: LD_ADDR_VAR 0 1
11815: PUSH
11816: LD_INT 2
11818: PUSH
11819: LD_INT 4
11821: PUSH
11822: LD_INT 5
11824: PUSH
11825: LD_INT 7
11827: PUSH
11828: LD_INT 11
11830: PUSH
11831: LD_INT 12
11833: PUSH
11834: LD_INT 15
11836: PUSH
11837: LD_INT 16
11839: PUSH
11840: LD_INT 20
11842: PUSH
11843: LD_INT 21
11845: PUSH
11846: LD_INT 22
11848: PUSH
11849: LD_INT 23
11851: PUSH
11852: LD_INT 25
11854: PUSH
11855: LD_INT 26
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: PUSH
11874: LD_INT 101
11876: PUSH
11877: LD_INT 102
11879: PUSH
11880: LD_INT 103
11882: PUSH
11883: LD_INT 105
11885: PUSH
11886: LD_INT 106
11888: PUSH
11889: LD_INT 108
11891: PUSH
11892: LD_INT 112
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: ST_TO_ADDR
11908: GO 14167
11910: LD_INT 8
11912: DOUBLE
11913: EQUAL
11914: IFTRUE 11918
11916: GO 12046
11918: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11919: LD_ADDR_VAR 0 1
11923: PUSH
11924: LD_INT 2
11926: PUSH
11927: LD_INT 4
11929: PUSH
11930: LD_INT 5
11932: PUSH
11933: LD_INT 6
11935: PUSH
11936: LD_INT 7
11938: PUSH
11939: LD_INT 8
11941: PUSH
11942: LD_INT 11
11944: PUSH
11945: LD_INT 12
11947: PUSH
11948: LD_INT 15
11950: PUSH
11951: LD_INT 16
11953: PUSH
11954: LD_INT 20
11956: PUSH
11957: LD_INT 21
11959: PUSH
11960: LD_INT 22
11962: PUSH
11963: LD_INT 23
11965: PUSH
11966: LD_INT 25
11968: PUSH
11969: LD_INT 26
11971: PUSH
11972: LD_INT 30
11974: PUSH
11975: LD_INT 31
11977: PUSH
11978: LD_INT 32
11980: PUSH
11981: LD_INT 36
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 101
12008: PUSH
12009: LD_INT 102
12011: PUSH
12012: LD_INT 103
12014: PUSH
12015: LD_INT 105
12017: PUSH
12018: LD_INT 106
12020: PUSH
12021: LD_INT 108
12023: PUSH
12024: LD_INT 109
12026: PUSH
12027: LD_INT 112
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: ST_TO_ADDR
12044: GO 14167
12046: LD_INT 9
12048: DOUBLE
12049: EQUAL
12050: IFTRUE 12054
12052: GO 12190
12054: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12055: LD_ADDR_VAR 0 1
12059: PUSH
12060: LD_INT 2
12062: PUSH
12063: LD_INT 4
12065: PUSH
12066: LD_INT 5
12068: PUSH
12069: LD_INT 6
12071: PUSH
12072: LD_INT 7
12074: PUSH
12075: LD_INT 8
12077: PUSH
12078: LD_INT 11
12080: PUSH
12081: LD_INT 12
12083: PUSH
12084: LD_INT 15
12086: PUSH
12087: LD_INT 16
12089: PUSH
12090: LD_INT 20
12092: PUSH
12093: LD_INT 21
12095: PUSH
12096: LD_INT 22
12098: PUSH
12099: LD_INT 23
12101: PUSH
12102: LD_INT 25
12104: PUSH
12105: LD_INT 26
12107: PUSH
12108: LD_INT 28
12110: PUSH
12111: LD_INT 30
12113: PUSH
12114: LD_INT 31
12116: PUSH
12117: LD_INT 32
12119: PUSH
12120: LD_INT 36
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: PUSH
12146: LD_INT 101
12148: PUSH
12149: LD_INT 102
12151: PUSH
12152: LD_INT 103
12154: PUSH
12155: LD_INT 105
12157: PUSH
12158: LD_INT 106
12160: PUSH
12161: LD_INT 108
12163: PUSH
12164: LD_INT 109
12166: PUSH
12167: LD_INT 112
12169: PUSH
12170: LD_INT 114
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: ST_TO_ADDR
12188: GO 14167
12190: LD_INT 10
12192: DOUBLE
12193: EQUAL
12194: IFTRUE 12198
12196: GO 12382
12198: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12199: LD_ADDR_VAR 0 1
12203: PUSH
12204: LD_INT 2
12206: PUSH
12207: LD_INT 4
12209: PUSH
12210: LD_INT 5
12212: PUSH
12213: LD_INT 6
12215: PUSH
12216: LD_INT 7
12218: PUSH
12219: LD_INT 8
12221: PUSH
12222: LD_INT 9
12224: PUSH
12225: LD_INT 10
12227: PUSH
12228: LD_INT 11
12230: PUSH
12231: LD_INT 12
12233: PUSH
12234: LD_INT 13
12236: PUSH
12237: LD_INT 14
12239: PUSH
12240: LD_INT 15
12242: PUSH
12243: LD_INT 16
12245: PUSH
12246: LD_INT 17
12248: PUSH
12249: LD_INT 18
12251: PUSH
12252: LD_INT 19
12254: PUSH
12255: LD_INT 20
12257: PUSH
12258: LD_INT 21
12260: PUSH
12261: LD_INT 22
12263: PUSH
12264: LD_INT 23
12266: PUSH
12267: LD_INT 24
12269: PUSH
12270: LD_INT 25
12272: PUSH
12273: LD_INT 26
12275: PUSH
12276: LD_INT 28
12278: PUSH
12279: LD_INT 30
12281: PUSH
12282: LD_INT 31
12284: PUSH
12285: LD_INT 32
12287: PUSH
12288: LD_INT 36
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 101
12324: PUSH
12325: LD_INT 102
12327: PUSH
12328: LD_INT 103
12330: PUSH
12331: LD_INT 104
12333: PUSH
12334: LD_INT 105
12336: PUSH
12337: LD_INT 106
12339: PUSH
12340: LD_INT 107
12342: PUSH
12343: LD_INT 108
12345: PUSH
12346: LD_INT 109
12348: PUSH
12349: LD_INT 110
12351: PUSH
12352: LD_INT 111
12354: PUSH
12355: LD_INT 112
12357: PUSH
12358: LD_INT 114
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: ST_TO_ADDR
12380: GO 14167
12382: LD_INT 11
12384: DOUBLE
12385: EQUAL
12386: IFTRUE 12390
12388: GO 12582
12390: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12391: LD_ADDR_VAR 0 1
12395: PUSH
12396: LD_INT 2
12398: PUSH
12399: LD_INT 3
12401: PUSH
12402: LD_INT 4
12404: PUSH
12405: LD_INT 5
12407: PUSH
12408: LD_INT 6
12410: PUSH
12411: LD_INT 7
12413: PUSH
12414: LD_INT 8
12416: PUSH
12417: LD_INT 9
12419: PUSH
12420: LD_INT 10
12422: PUSH
12423: LD_INT 11
12425: PUSH
12426: LD_INT 12
12428: PUSH
12429: LD_INT 13
12431: PUSH
12432: LD_INT 14
12434: PUSH
12435: LD_INT 15
12437: PUSH
12438: LD_INT 16
12440: PUSH
12441: LD_INT 17
12443: PUSH
12444: LD_INT 18
12446: PUSH
12447: LD_INT 19
12449: PUSH
12450: LD_INT 20
12452: PUSH
12453: LD_INT 21
12455: PUSH
12456: LD_INT 22
12458: PUSH
12459: LD_INT 23
12461: PUSH
12462: LD_INT 24
12464: PUSH
12465: LD_INT 25
12467: PUSH
12468: LD_INT 26
12470: PUSH
12471: LD_INT 28
12473: PUSH
12474: LD_INT 30
12476: PUSH
12477: LD_INT 31
12479: PUSH
12480: LD_INT 32
12482: PUSH
12483: LD_INT 34
12485: PUSH
12486: LD_INT 36
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 101
12524: PUSH
12525: LD_INT 102
12527: PUSH
12528: LD_INT 103
12530: PUSH
12531: LD_INT 104
12533: PUSH
12534: LD_INT 105
12536: PUSH
12537: LD_INT 106
12539: PUSH
12540: LD_INT 107
12542: PUSH
12543: LD_INT 108
12545: PUSH
12546: LD_INT 109
12548: PUSH
12549: LD_INT 110
12551: PUSH
12552: LD_INT 111
12554: PUSH
12555: LD_INT 112
12557: PUSH
12558: LD_INT 114
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: ST_TO_ADDR
12580: GO 14167
12582: LD_INT 12
12584: DOUBLE
12585: EQUAL
12586: IFTRUE 12590
12588: GO 12798
12590: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12591: LD_ADDR_VAR 0 1
12595: PUSH
12596: LD_INT 1
12598: PUSH
12599: LD_INT 2
12601: PUSH
12602: LD_INT 3
12604: PUSH
12605: LD_INT 4
12607: PUSH
12608: LD_INT 5
12610: PUSH
12611: LD_INT 6
12613: PUSH
12614: LD_INT 7
12616: PUSH
12617: LD_INT 8
12619: PUSH
12620: LD_INT 9
12622: PUSH
12623: LD_INT 10
12625: PUSH
12626: LD_INT 11
12628: PUSH
12629: LD_INT 12
12631: PUSH
12632: LD_INT 13
12634: PUSH
12635: LD_INT 14
12637: PUSH
12638: LD_INT 15
12640: PUSH
12641: LD_INT 16
12643: PUSH
12644: LD_INT 17
12646: PUSH
12647: LD_INT 18
12649: PUSH
12650: LD_INT 19
12652: PUSH
12653: LD_INT 20
12655: PUSH
12656: LD_INT 21
12658: PUSH
12659: LD_INT 22
12661: PUSH
12662: LD_INT 23
12664: PUSH
12665: LD_INT 24
12667: PUSH
12668: LD_INT 25
12670: PUSH
12671: LD_INT 26
12673: PUSH
12674: LD_INT 27
12676: PUSH
12677: LD_INT 28
12679: PUSH
12680: LD_INT 30
12682: PUSH
12683: LD_INT 31
12685: PUSH
12686: LD_INT 32
12688: PUSH
12689: LD_INT 33
12691: PUSH
12692: LD_INT 34
12694: PUSH
12695: LD_INT 36
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: PUSH
12734: LD_INT 101
12736: PUSH
12737: LD_INT 102
12739: PUSH
12740: LD_INT 103
12742: PUSH
12743: LD_INT 104
12745: PUSH
12746: LD_INT 105
12748: PUSH
12749: LD_INT 106
12751: PUSH
12752: LD_INT 107
12754: PUSH
12755: LD_INT 108
12757: PUSH
12758: LD_INT 109
12760: PUSH
12761: LD_INT 110
12763: PUSH
12764: LD_INT 111
12766: PUSH
12767: LD_INT 112
12769: PUSH
12770: LD_INT 113
12772: PUSH
12773: LD_INT 114
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: ST_TO_ADDR
12796: GO 14167
12798: LD_INT 13
12800: DOUBLE
12801: EQUAL
12802: IFTRUE 12806
12804: GO 13002
12806: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
12807: LD_ADDR_VAR 0 1
12811: PUSH
12812: LD_INT 1
12814: PUSH
12815: LD_INT 2
12817: PUSH
12818: LD_INT 3
12820: PUSH
12821: LD_INT 4
12823: PUSH
12824: LD_INT 5
12826: PUSH
12827: LD_INT 8
12829: PUSH
12830: LD_INT 9
12832: PUSH
12833: LD_INT 10
12835: PUSH
12836: LD_INT 11
12838: PUSH
12839: LD_INT 12
12841: PUSH
12842: LD_INT 14
12844: PUSH
12845: LD_INT 15
12847: PUSH
12848: LD_INT 16
12850: PUSH
12851: LD_INT 17
12853: PUSH
12854: LD_INT 18
12856: PUSH
12857: LD_INT 19
12859: PUSH
12860: LD_INT 20
12862: PUSH
12863: LD_INT 21
12865: PUSH
12866: LD_INT 22
12868: PUSH
12869: LD_INT 23
12871: PUSH
12872: LD_INT 24
12874: PUSH
12875: LD_INT 25
12877: PUSH
12878: LD_INT 26
12880: PUSH
12881: LD_INT 27
12883: PUSH
12884: LD_INT 28
12886: PUSH
12887: LD_INT 30
12889: PUSH
12890: LD_INT 31
12892: PUSH
12893: LD_INT 32
12895: PUSH
12896: LD_INT 33
12898: PUSH
12899: LD_INT 34
12901: PUSH
12902: LD_INT 36
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: PUSH
12938: LD_INT 101
12940: PUSH
12941: LD_INT 102
12943: PUSH
12944: LD_INT 103
12946: PUSH
12947: LD_INT 104
12949: PUSH
12950: LD_INT 105
12952: PUSH
12953: LD_INT 106
12955: PUSH
12956: LD_INT 107
12958: PUSH
12959: LD_INT 108
12961: PUSH
12962: LD_INT 109
12964: PUSH
12965: LD_INT 110
12967: PUSH
12968: LD_INT 111
12970: PUSH
12971: LD_INT 112
12973: PUSH
12974: LD_INT 113
12976: PUSH
12977: LD_INT 114
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: ST_TO_ADDR
13000: GO 14167
13002: LD_INT 14
13004: DOUBLE
13005: EQUAL
13006: IFTRUE 13010
13008: GO 13222
13010: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13011: LD_ADDR_VAR 0 1
13015: PUSH
13016: LD_INT 1
13018: PUSH
13019: LD_INT 2
13021: PUSH
13022: LD_INT 3
13024: PUSH
13025: LD_INT 4
13027: PUSH
13028: LD_INT 5
13030: PUSH
13031: LD_INT 6
13033: PUSH
13034: LD_INT 7
13036: PUSH
13037: LD_INT 8
13039: PUSH
13040: LD_INT 9
13042: PUSH
13043: LD_INT 10
13045: PUSH
13046: LD_INT 11
13048: PUSH
13049: LD_INT 12
13051: PUSH
13052: LD_INT 13
13054: PUSH
13055: LD_INT 14
13057: PUSH
13058: LD_INT 15
13060: PUSH
13061: LD_INT 16
13063: PUSH
13064: LD_INT 17
13066: PUSH
13067: LD_INT 18
13069: PUSH
13070: LD_INT 19
13072: PUSH
13073: LD_INT 20
13075: PUSH
13076: LD_INT 21
13078: PUSH
13079: LD_INT 22
13081: PUSH
13082: LD_INT 23
13084: PUSH
13085: LD_INT 24
13087: PUSH
13088: LD_INT 25
13090: PUSH
13091: LD_INT 26
13093: PUSH
13094: LD_INT 27
13096: PUSH
13097: LD_INT 28
13099: PUSH
13100: LD_INT 29
13102: PUSH
13103: LD_INT 30
13105: PUSH
13106: LD_INT 31
13108: PUSH
13109: LD_INT 32
13111: PUSH
13112: LD_INT 33
13114: PUSH
13115: LD_INT 34
13117: PUSH
13118: LD_INT 36
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 101
13160: PUSH
13161: LD_INT 102
13163: PUSH
13164: LD_INT 103
13166: PUSH
13167: LD_INT 104
13169: PUSH
13170: LD_INT 105
13172: PUSH
13173: LD_INT 106
13175: PUSH
13176: LD_INT 107
13178: PUSH
13179: LD_INT 108
13181: PUSH
13182: LD_INT 109
13184: PUSH
13185: LD_INT 110
13187: PUSH
13188: LD_INT 111
13190: PUSH
13191: LD_INT 112
13193: PUSH
13194: LD_INT 113
13196: PUSH
13197: LD_INT 114
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: ST_TO_ADDR
13220: GO 14167
13222: LD_INT 15
13224: DOUBLE
13225: EQUAL
13226: IFTRUE 13230
13228: GO 13442
13230: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13231: LD_ADDR_VAR 0 1
13235: PUSH
13236: LD_INT 1
13238: PUSH
13239: LD_INT 2
13241: PUSH
13242: LD_INT 3
13244: PUSH
13245: LD_INT 4
13247: PUSH
13248: LD_INT 5
13250: PUSH
13251: LD_INT 6
13253: PUSH
13254: LD_INT 7
13256: PUSH
13257: LD_INT 8
13259: PUSH
13260: LD_INT 9
13262: PUSH
13263: LD_INT 10
13265: PUSH
13266: LD_INT 11
13268: PUSH
13269: LD_INT 12
13271: PUSH
13272: LD_INT 13
13274: PUSH
13275: LD_INT 14
13277: PUSH
13278: LD_INT 15
13280: PUSH
13281: LD_INT 16
13283: PUSH
13284: LD_INT 17
13286: PUSH
13287: LD_INT 18
13289: PUSH
13290: LD_INT 19
13292: PUSH
13293: LD_INT 20
13295: PUSH
13296: LD_INT 21
13298: PUSH
13299: LD_INT 22
13301: PUSH
13302: LD_INT 23
13304: PUSH
13305: LD_INT 24
13307: PUSH
13308: LD_INT 25
13310: PUSH
13311: LD_INT 26
13313: PUSH
13314: LD_INT 27
13316: PUSH
13317: LD_INT 28
13319: PUSH
13320: LD_INT 29
13322: PUSH
13323: LD_INT 30
13325: PUSH
13326: LD_INT 31
13328: PUSH
13329: LD_INT 32
13331: PUSH
13332: LD_INT 33
13334: PUSH
13335: LD_INT 34
13337: PUSH
13338: LD_INT 36
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 101
13380: PUSH
13381: LD_INT 102
13383: PUSH
13384: LD_INT 103
13386: PUSH
13387: LD_INT 104
13389: PUSH
13390: LD_INT 105
13392: PUSH
13393: LD_INT 106
13395: PUSH
13396: LD_INT 107
13398: PUSH
13399: LD_INT 108
13401: PUSH
13402: LD_INT 109
13404: PUSH
13405: LD_INT 110
13407: PUSH
13408: LD_INT 111
13410: PUSH
13411: LD_INT 112
13413: PUSH
13414: LD_INT 113
13416: PUSH
13417: LD_INT 114
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: ST_TO_ADDR
13440: GO 14167
13442: LD_INT 16
13444: DOUBLE
13445: EQUAL
13446: IFTRUE 13450
13448: GO 13574
13450: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13451: LD_ADDR_VAR 0 1
13455: PUSH
13456: LD_INT 2
13458: PUSH
13459: LD_INT 4
13461: PUSH
13462: LD_INT 5
13464: PUSH
13465: LD_INT 7
13467: PUSH
13468: LD_INT 11
13470: PUSH
13471: LD_INT 12
13473: PUSH
13474: LD_INT 15
13476: PUSH
13477: LD_INT 16
13479: PUSH
13480: LD_INT 20
13482: PUSH
13483: LD_INT 21
13485: PUSH
13486: LD_INT 22
13488: PUSH
13489: LD_INT 23
13491: PUSH
13492: LD_INT 25
13494: PUSH
13495: LD_INT 26
13497: PUSH
13498: LD_INT 30
13500: PUSH
13501: LD_INT 31
13503: PUSH
13504: LD_INT 32
13506: PUSH
13507: LD_INT 33
13509: PUSH
13510: LD_INT 34
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 101
13536: PUSH
13537: LD_INT 102
13539: PUSH
13540: LD_INT 103
13542: PUSH
13543: LD_INT 106
13545: PUSH
13546: LD_INT 108
13548: PUSH
13549: LD_INT 112
13551: PUSH
13552: LD_INT 113
13554: PUSH
13555: LD_INT 114
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: ST_TO_ADDR
13572: GO 14167
13574: LD_INT 17
13576: DOUBLE
13577: EQUAL
13578: IFTRUE 13582
13580: GO 13794
13582: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13583: LD_ADDR_VAR 0 1
13587: PUSH
13588: LD_INT 1
13590: PUSH
13591: LD_INT 2
13593: PUSH
13594: LD_INT 3
13596: PUSH
13597: LD_INT 4
13599: PUSH
13600: LD_INT 5
13602: PUSH
13603: LD_INT 6
13605: PUSH
13606: LD_INT 7
13608: PUSH
13609: LD_INT 8
13611: PUSH
13612: LD_INT 9
13614: PUSH
13615: LD_INT 10
13617: PUSH
13618: LD_INT 11
13620: PUSH
13621: LD_INT 12
13623: PUSH
13624: LD_INT 13
13626: PUSH
13627: LD_INT 14
13629: PUSH
13630: LD_INT 15
13632: PUSH
13633: LD_INT 16
13635: PUSH
13636: LD_INT 17
13638: PUSH
13639: LD_INT 18
13641: PUSH
13642: LD_INT 19
13644: PUSH
13645: LD_INT 20
13647: PUSH
13648: LD_INT 21
13650: PUSH
13651: LD_INT 22
13653: PUSH
13654: LD_INT 23
13656: PUSH
13657: LD_INT 24
13659: PUSH
13660: LD_INT 25
13662: PUSH
13663: LD_INT 26
13665: PUSH
13666: LD_INT 27
13668: PUSH
13669: LD_INT 28
13671: PUSH
13672: LD_INT 29
13674: PUSH
13675: LD_INT 30
13677: PUSH
13678: LD_INT 31
13680: PUSH
13681: LD_INT 32
13683: PUSH
13684: LD_INT 33
13686: PUSH
13687: LD_INT 34
13689: PUSH
13690: LD_INT 36
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 101
13732: PUSH
13733: LD_INT 102
13735: PUSH
13736: LD_INT 103
13738: PUSH
13739: LD_INT 104
13741: PUSH
13742: LD_INT 105
13744: PUSH
13745: LD_INT 106
13747: PUSH
13748: LD_INT 107
13750: PUSH
13751: LD_INT 108
13753: PUSH
13754: LD_INT 109
13756: PUSH
13757: LD_INT 110
13759: PUSH
13760: LD_INT 111
13762: PUSH
13763: LD_INT 112
13765: PUSH
13766: LD_INT 113
13768: PUSH
13769: LD_INT 114
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: ST_TO_ADDR
13792: GO 14167
13794: LD_INT 18
13796: DOUBLE
13797: EQUAL
13798: IFTRUE 13802
13800: GO 13938
13802: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
13803: LD_ADDR_VAR 0 1
13807: PUSH
13808: LD_INT 2
13810: PUSH
13811: LD_INT 4
13813: PUSH
13814: LD_INT 5
13816: PUSH
13817: LD_INT 7
13819: PUSH
13820: LD_INT 11
13822: PUSH
13823: LD_INT 12
13825: PUSH
13826: LD_INT 15
13828: PUSH
13829: LD_INT 16
13831: PUSH
13832: LD_INT 20
13834: PUSH
13835: LD_INT 21
13837: PUSH
13838: LD_INT 22
13840: PUSH
13841: LD_INT 23
13843: PUSH
13844: LD_INT 25
13846: PUSH
13847: LD_INT 26
13849: PUSH
13850: LD_INT 30
13852: PUSH
13853: LD_INT 31
13855: PUSH
13856: LD_INT 32
13858: PUSH
13859: LD_INT 33
13861: PUSH
13862: LD_INT 34
13864: PUSH
13865: LD_INT 35
13867: PUSH
13868: LD_INT 36
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 101
13896: PUSH
13897: LD_INT 102
13899: PUSH
13900: LD_INT 103
13902: PUSH
13903: LD_INT 106
13905: PUSH
13906: LD_INT 108
13908: PUSH
13909: LD_INT 112
13911: PUSH
13912: LD_INT 113
13914: PUSH
13915: LD_INT 114
13917: PUSH
13918: LD_INT 115
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: ST_TO_ADDR
13936: GO 14167
13938: LD_INT 19
13940: DOUBLE
13941: EQUAL
13942: IFTRUE 13946
13944: GO 14166
13946: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13947: LD_ADDR_VAR 0 1
13951: PUSH
13952: LD_INT 1
13954: PUSH
13955: LD_INT 2
13957: PUSH
13958: LD_INT 3
13960: PUSH
13961: LD_INT 4
13963: PUSH
13964: LD_INT 5
13966: PUSH
13967: LD_INT 6
13969: PUSH
13970: LD_INT 7
13972: PUSH
13973: LD_INT 8
13975: PUSH
13976: LD_INT 9
13978: PUSH
13979: LD_INT 10
13981: PUSH
13982: LD_INT 11
13984: PUSH
13985: LD_INT 12
13987: PUSH
13988: LD_INT 13
13990: PUSH
13991: LD_INT 14
13993: PUSH
13994: LD_INT 15
13996: PUSH
13997: LD_INT 16
13999: PUSH
14000: LD_INT 17
14002: PUSH
14003: LD_INT 18
14005: PUSH
14006: LD_INT 19
14008: PUSH
14009: LD_INT 20
14011: PUSH
14012: LD_INT 21
14014: PUSH
14015: LD_INT 22
14017: PUSH
14018: LD_INT 23
14020: PUSH
14021: LD_INT 24
14023: PUSH
14024: LD_INT 25
14026: PUSH
14027: LD_INT 26
14029: PUSH
14030: LD_INT 27
14032: PUSH
14033: LD_INT 28
14035: PUSH
14036: LD_INT 29
14038: PUSH
14039: LD_INT 30
14041: PUSH
14042: LD_INT 31
14044: PUSH
14045: LD_INT 32
14047: PUSH
14048: LD_INT 33
14050: PUSH
14051: LD_INT 34
14053: PUSH
14054: LD_INT 35
14056: PUSH
14057: LD_INT 36
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 101
14100: PUSH
14101: LD_INT 102
14103: PUSH
14104: LD_INT 103
14106: PUSH
14107: LD_INT 104
14109: PUSH
14110: LD_INT 105
14112: PUSH
14113: LD_INT 106
14115: PUSH
14116: LD_INT 107
14118: PUSH
14119: LD_INT 108
14121: PUSH
14122: LD_INT 109
14124: PUSH
14125: LD_INT 110
14127: PUSH
14128: LD_INT 111
14130: PUSH
14131: LD_INT 112
14133: PUSH
14134: LD_INT 113
14136: PUSH
14137: LD_INT 114
14139: PUSH
14140: LD_INT 115
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: ST_TO_ADDR
14164: GO 14167
14166: POP
// end else
14167: GO 14386
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14169: LD_ADDR_VAR 0 1
14173: PUSH
14174: LD_INT 1
14176: PUSH
14177: LD_INT 2
14179: PUSH
14180: LD_INT 3
14182: PUSH
14183: LD_INT 4
14185: PUSH
14186: LD_INT 5
14188: PUSH
14189: LD_INT 6
14191: PUSH
14192: LD_INT 7
14194: PUSH
14195: LD_INT 8
14197: PUSH
14198: LD_INT 9
14200: PUSH
14201: LD_INT 10
14203: PUSH
14204: LD_INT 11
14206: PUSH
14207: LD_INT 12
14209: PUSH
14210: LD_INT 13
14212: PUSH
14213: LD_INT 14
14215: PUSH
14216: LD_INT 15
14218: PUSH
14219: LD_INT 16
14221: PUSH
14222: LD_INT 17
14224: PUSH
14225: LD_INT 18
14227: PUSH
14228: LD_INT 19
14230: PUSH
14231: LD_INT 20
14233: PUSH
14234: LD_INT 21
14236: PUSH
14237: LD_INT 22
14239: PUSH
14240: LD_INT 23
14242: PUSH
14243: LD_INT 24
14245: PUSH
14246: LD_INT 25
14248: PUSH
14249: LD_INT 26
14251: PUSH
14252: LD_INT 27
14254: PUSH
14255: LD_INT 28
14257: PUSH
14258: LD_INT 29
14260: PUSH
14261: LD_INT 30
14263: PUSH
14264: LD_INT 31
14266: PUSH
14267: LD_INT 32
14269: PUSH
14270: LD_INT 33
14272: PUSH
14273: LD_INT 34
14275: PUSH
14276: LD_INT 35
14278: PUSH
14279: LD_INT 36
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 101
14322: PUSH
14323: LD_INT 102
14325: PUSH
14326: LD_INT 103
14328: PUSH
14329: LD_INT 104
14331: PUSH
14332: LD_INT 105
14334: PUSH
14335: LD_INT 106
14337: PUSH
14338: LD_INT 107
14340: PUSH
14341: LD_INT 108
14343: PUSH
14344: LD_INT 109
14346: PUSH
14347: LD_INT 110
14349: PUSH
14350: LD_INT 111
14352: PUSH
14353: LD_INT 112
14355: PUSH
14356: LD_INT 113
14358: PUSH
14359: LD_INT 114
14361: PUSH
14362: LD_INT 115
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: ST_TO_ADDR
// if result then
14386: LD_VAR 0 1
14390: IFFALSE 14679
// begin normal :=  ;
14392: LD_ADDR_VAR 0 3
14396: PUSH
14397: LD_STRING 
14399: ST_TO_ADDR
// hardcore :=  ;
14400: LD_ADDR_VAR 0 4
14404: PUSH
14405: LD_STRING 
14407: ST_TO_ADDR
// for i = 1 to normalCounter do
14408: LD_ADDR_VAR 0 5
14412: PUSH
14413: DOUBLE
14414: LD_INT 1
14416: DEC
14417: ST_TO_ADDR
14418: LD_EXP 44
14422: PUSH
14423: FOR_TO
14424: IFFALSE 14525
// begin tmp := 0 ;
14426: LD_ADDR_VAR 0 2
14430: PUSH
14431: LD_STRING 0
14433: ST_TO_ADDR
// if result [ 1 ] then
14434: LD_VAR 0 1
14438: PUSH
14439: LD_INT 1
14441: ARRAY
14442: IFFALSE 14507
// if result [ 1 ] [ 1 ] = i then
14444: LD_VAR 0 1
14448: PUSH
14449: LD_INT 1
14451: ARRAY
14452: PUSH
14453: LD_INT 1
14455: ARRAY
14456: PUSH
14457: LD_VAR 0 5
14461: EQUAL
14462: IFFALSE 14507
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14464: LD_ADDR_VAR 0 1
14468: PUSH
14469: LD_VAR 0 1
14473: PPUSH
14474: LD_INT 1
14476: PPUSH
14477: LD_VAR 0 1
14481: PUSH
14482: LD_INT 1
14484: ARRAY
14485: PPUSH
14486: LD_INT 1
14488: PPUSH
14489: CALL_OW 3
14493: PPUSH
14494: CALL_OW 1
14498: ST_TO_ADDR
// tmp := 1 ;
14499: LD_ADDR_VAR 0 2
14503: PUSH
14504: LD_STRING 1
14506: ST_TO_ADDR
// end ; normal := normal & tmp ;
14507: LD_ADDR_VAR 0 3
14511: PUSH
14512: LD_VAR 0 3
14516: PUSH
14517: LD_VAR 0 2
14521: STR
14522: ST_TO_ADDR
// end ;
14523: GO 14423
14525: POP
14526: POP
// for i = 1 to hardcoreCounter do
14527: LD_ADDR_VAR 0 5
14531: PUSH
14532: DOUBLE
14533: LD_INT 1
14535: DEC
14536: ST_TO_ADDR
14537: LD_EXP 45
14541: PUSH
14542: FOR_TO
14543: IFFALSE 14648
// begin tmp := 0 ;
14545: LD_ADDR_VAR 0 2
14549: PUSH
14550: LD_STRING 0
14552: ST_TO_ADDR
// if result [ 2 ] then
14553: LD_VAR 0 1
14557: PUSH
14558: LD_INT 2
14560: ARRAY
14561: IFFALSE 14630
// if result [ 2 ] [ 1 ] = 100 + i then
14563: LD_VAR 0 1
14567: PUSH
14568: LD_INT 2
14570: ARRAY
14571: PUSH
14572: LD_INT 1
14574: ARRAY
14575: PUSH
14576: LD_INT 100
14578: PUSH
14579: LD_VAR 0 5
14583: PLUS
14584: EQUAL
14585: IFFALSE 14630
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14587: LD_ADDR_VAR 0 1
14591: PUSH
14592: LD_VAR 0 1
14596: PPUSH
14597: LD_INT 2
14599: PPUSH
14600: LD_VAR 0 1
14604: PUSH
14605: LD_INT 2
14607: ARRAY
14608: PPUSH
14609: LD_INT 1
14611: PPUSH
14612: CALL_OW 3
14616: PPUSH
14617: CALL_OW 1
14621: ST_TO_ADDR
// tmp := 1 ;
14622: LD_ADDR_VAR 0 2
14626: PUSH
14627: LD_STRING 1
14629: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14630: LD_ADDR_VAR 0 4
14634: PUSH
14635: LD_VAR 0 4
14639: PUSH
14640: LD_VAR 0 2
14644: STR
14645: ST_TO_ADDR
// end ;
14646: GO 14542
14648: POP
14649: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14650: LD_STRING getStreamItemsFromMission("
14652: PUSH
14653: LD_VAR 0 3
14657: STR
14658: PUSH
14659: LD_STRING ","
14661: STR
14662: PUSH
14663: LD_VAR 0 4
14667: STR
14668: PUSH
14669: LD_STRING ")
14671: STR
14672: PPUSH
14673: CALL_OW 559
// end else
14677: GO 14686
// ToLua ( getStreamItemsFromMission("","") ) ;
14679: LD_STRING getStreamItemsFromMission("","")
14681: PPUSH
14682: CALL_OW 559
// end ;
14686: LD_VAR 0 1
14690: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14691: LD_EXP 43
14695: PUSH
14696: LD_EXP 48
14700: AND
14701: IFFALSE 14825
14703: GO 14705
14705: DISABLE
14706: LD_INT 0
14708: PPUSH
14709: PPUSH
// begin enable ;
14710: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14711: LD_ADDR_VAR 0 2
14715: PUSH
14716: LD_INT 22
14718: PUSH
14719: LD_OWVAR 2
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 2
14730: PUSH
14731: LD_INT 34
14733: PUSH
14734: LD_INT 7
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 34
14743: PUSH
14744: LD_INT 45
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 34
14753: PUSH
14754: LD_INT 28
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 34
14763: PUSH
14764: LD_INT 47
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PPUSH
14782: CALL_OW 69
14786: ST_TO_ADDR
// if not tmp then
14787: LD_VAR 0 2
14791: NOT
14792: IFFALSE 14796
// exit ;
14794: GO 14825
// for i in tmp do
14796: LD_ADDR_VAR 0 1
14800: PUSH
14801: LD_VAR 0 2
14805: PUSH
14806: FOR_IN
14807: IFFALSE 14823
// begin SetLives ( i , 0 ) ;
14809: LD_VAR 0 1
14813: PPUSH
14814: LD_INT 0
14816: PPUSH
14817: CALL_OW 234
// end ;
14821: GO 14806
14823: POP
14824: POP
// end ;
14825: PPOPN 2
14827: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14828: LD_EXP 43
14832: PUSH
14833: LD_EXP 49
14837: AND
14838: IFFALSE 14922
14840: GO 14842
14842: DISABLE
14843: LD_INT 0
14845: PPUSH
14846: PPUSH
// begin enable ;
14847: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14848: LD_ADDR_VAR 0 2
14852: PUSH
14853: LD_INT 22
14855: PUSH
14856: LD_OWVAR 2
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 32
14867: PUSH
14868: LD_INT 3
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PPUSH
14879: CALL_OW 69
14883: ST_TO_ADDR
// if not tmp then
14884: LD_VAR 0 2
14888: NOT
14889: IFFALSE 14893
// exit ;
14891: GO 14922
// for i in tmp do
14893: LD_ADDR_VAR 0 1
14897: PUSH
14898: LD_VAR 0 2
14902: PUSH
14903: FOR_IN
14904: IFFALSE 14920
// begin SetLives ( i , 0 ) ;
14906: LD_VAR 0 1
14910: PPUSH
14911: LD_INT 0
14913: PPUSH
14914: CALL_OW 234
// end ;
14918: GO 14903
14920: POP
14921: POP
// end ;
14922: PPOPN 2
14924: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14925: LD_EXP 43
14929: PUSH
14930: LD_EXP 46
14934: AND
14935: IFFALSE 15028
14937: GO 14939
14939: DISABLE
14940: LD_INT 0
14942: PPUSH
// begin enable ;
14943: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14944: LD_ADDR_VAR 0 1
14948: PUSH
14949: LD_INT 22
14951: PUSH
14952: LD_OWVAR 2
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: LD_INT 25
14966: PUSH
14967: LD_INT 5
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 25
14976: PUSH
14977: LD_INT 9
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 25
14986: PUSH
14987: LD_INT 8
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PPUSH
15004: CALL_OW 69
15008: PUSH
15009: FOR_IN
15010: IFFALSE 15026
// begin SetClass ( i , 1 ) ;
15012: LD_VAR 0 1
15016: PPUSH
15017: LD_INT 1
15019: PPUSH
15020: CALL_OW 336
// end ;
15024: GO 15009
15026: POP
15027: POP
// end ;
15028: PPOPN 1
15030: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15031: LD_EXP 43
15035: PUSH
15036: LD_EXP 47
15040: AND
15041: PUSH
15042: LD_OWVAR 65
15046: PUSH
15047: LD_INT 7
15049: LESS
15050: AND
15051: IFFALSE 15065
15053: GO 15055
15055: DISABLE
// begin enable ;
15056: ENABLE
// game_speed := 7 ;
15057: LD_ADDR_OWVAR 65
15061: PUSH
15062: LD_INT 7
15064: ST_TO_ADDR
// end ;
15065: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15066: LD_EXP 43
15070: PUSH
15071: LD_EXP 50
15075: AND
15076: IFFALSE 15278
15078: GO 15080
15080: DISABLE
15081: LD_INT 0
15083: PPUSH
15084: PPUSH
15085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15086: LD_ADDR_VAR 0 3
15090: PUSH
15091: LD_INT 81
15093: PUSH
15094: LD_OWVAR 2
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: LD_INT 21
15105: PUSH
15106: LD_INT 1
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PPUSH
15117: CALL_OW 69
15121: ST_TO_ADDR
// if not tmp then
15122: LD_VAR 0 3
15126: NOT
15127: IFFALSE 15131
// exit ;
15129: GO 15278
// if tmp > 5 then
15131: LD_VAR 0 3
15135: PUSH
15136: LD_INT 5
15138: GREATER
15139: IFFALSE 15151
// k := 5 else
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: LD_INT 5
15148: ST_TO_ADDR
15149: GO 15161
// k := tmp ;
15151: LD_ADDR_VAR 0 2
15155: PUSH
15156: LD_VAR 0 3
15160: ST_TO_ADDR
// for i := 1 to k do
15161: LD_ADDR_VAR 0 1
15165: PUSH
15166: DOUBLE
15167: LD_INT 1
15169: DEC
15170: ST_TO_ADDR
15171: LD_VAR 0 2
15175: PUSH
15176: FOR_TO
15177: IFFALSE 15276
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15179: LD_VAR 0 3
15183: PUSH
15184: LD_VAR 0 1
15188: ARRAY
15189: PPUSH
15190: LD_VAR 0 1
15194: PUSH
15195: LD_INT 4
15197: MOD
15198: PUSH
15199: LD_INT 1
15201: PLUS
15202: PPUSH
15203: CALL_OW 259
15207: PUSH
15208: LD_INT 10
15210: LESS
15211: IFFALSE 15274
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15213: LD_VAR 0 3
15217: PUSH
15218: LD_VAR 0 1
15222: ARRAY
15223: PPUSH
15224: LD_VAR 0 1
15228: PUSH
15229: LD_INT 4
15231: MOD
15232: PUSH
15233: LD_INT 1
15235: PLUS
15236: PPUSH
15237: LD_VAR 0 3
15241: PUSH
15242: LD_VAR 0 1
15246: ARRAY
15247: PPUSH
15248: LD_VAR 0 1
15252: PUSH
15253: LD_INT 4
15255: MOD
15256: PUSH
15257: LD_INT 1
15259: PLUS
15260: PPUSH
15261: CALL_OW 259
15265: PUSH
15266: LD_INT 1
15268: PLUS
15269: PPUSH
15270: CALL_OW 237
15274: GO 15176
15276: POP
15277: POP
// end ;
15278: PPOPN 3
15280: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15281: LD_EXP 43
15285: PUSH
15286: LD_EXP 51
15290: AND
15291: IFFALSE 15311
15293: GO 15295
15295: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15296: LD_INT 4
15298: PPUSH
15299: LD_OWVAR 2
15303: PPUSH
15304: LD_INT 0
15306: PPUSH
15307: CALL_OW 324
15311: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15312: LD_EXP 43
15316: PUSH
15317: LD_EXP 80
15321: AND
15322: IFFALSE 15342
15324: GO 15326
15326: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15327: LD_INT 19
15329: PPUSH
15330: LD_OWVAR 2
15334: PPUSH
15335: LD_INT 0
15337: PPUSH
15338: CALL_OW 324
15342: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15343: LD_EXP 43
15347: PUSH
15348: LD_EXP 52
15352: AND
15353: IFFALSE 15455
15355: GO 15357
15357: DISABLE
15358: LD_INT 0
15360: PPUSH
15361: PPUSH
// begin enable ;
15362: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15363: LD_ADDR_VAR 0 2
15367: PUSH
15368: LD_INT 22
15370: PUSH
15371: LD_OWVAR 2
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 2
15382: PUSH
15383: LD_INT 34
15385: PUSH
15386: LD_INT 11
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 34
15395: PUSH
15396: LD_INT 30
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PPUSH
15412: CALL_OW 69
15416: ST_TO_ADDR
// if not tmp then
15417: LD_VAR 0 2
15421: NOT
15422: IFFALSE 15426
// exit ;
15424: GO 15455
// for i in tmp do
15426: LD_ADDR_VAR 0 1
15430: PUSH
15431: LD_VAR 0 2
15435: PUSH
15436: FOR_IN
15437: IFFALSE 15453
// begin SetLives ( i , 0 ) ;
15439: LD_VAR 0 1
15443: PPUSH
15444: LD_INT 0
15446: PPUSH
15447: CALL_OW 234
// end ;
15451: GO 15436
15453: POP
15454: POP
// end ;
15455: PPOPN 2
15457: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15458: LD_EXP 43
15462: PUSH
15463: LD_EXP 53
15467: AND
15468: IFFALSE 15488
15470: GO 15472
15472: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15473: LD_INT 32
15475: PPUSH
15476: LD_OWVAR 2
15480: PPUSH
15481: LD_INT 0
15483: PPUSH
15484: CALL_OW 324
15488: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15489: LD_EXP 43
15493: PUSH
15494: LD_EXP 54
15498: AND
15499: IFFALSE 15680
15501: GO 15503
15503: DISABLE
15504: LD_INT 0
15506: PPUSH
15507: PPUSH
15508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15509: LD_ADDR_VAR 0 2
15513: PUSH
15514: LD_INT 22
15516: PUSH
15517: LD_OWVAR 2
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 33
15528: PUSH
15529: LD_INT 3
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PPUSH
15540: CALL_OW 69
15544: ST_TO_ADDR
// if not tmp then
15545: LD_VAR 0 2
15549: NOT
15550: IFFALSE 15554
// exit ;
15552: GO 15680
// side := 0 ;
15554: LD_ADDR_VAR 0 3
15558: PUSH
15559: LD_INT 0
15561: ST_TO_ADDR
// for i := 1 to 8 do
15562: LD_ADDR_VAR 0 1
15566: PUSH
15567: DOUBLE
15568: LD_INT 1
15570: DEC
15571: ST_TO_ADDR
15572: LD_INT 8
15574: PUSH
15575: FOR_TO
15576: IFFALSE 15624
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15578: LD_OWVAR 2
15582: PUSH
15583: LD_VAR 0 1
15587: NONEQUAL
15588: PUSH
15589: LD_OWVAR 2
15593: PPUSH
15594: LD_VAR 0 1
15598: PPUSH
15599: CALL_OW 81
15603: PUSH
15604: LD_INT 2
15606: EQUAL
15607: AND
15608: IFFALSE 15622
// begin side := i ;
15610: LD_ADDR_VAR 0 3
15614: PUSH
15615: LD_VAR 0 1
15619: ST_TO_ADDR
// break ;
15620: GO 15624
// end ;
15622: GO 15575
15624: POP
15625: POP
// if not side then
15626: LD_VAR 0 3
15630: NOT
15631: IFFALSE 15635
// exit ;
15633: GO 15680
// for i := 1 to tmp do
15635: LD_ADDR_VAR 0 1
15639: PUSH
15640: DOUBLE
15641: LD_INT 1
15643: DEC
15644: ST_TO_ADDR
15645: LD_VAR 0 2
15649: PUSH
15650: FOR_TO
15651: IFFALSE 15678
// if Prob ( 60 ) then
15653: LD_INT 60
15655: PPUSH
15656: CALL_OW 13
15660: IFFALSE 15676
// SetSide ( i , side ) ;
15662: LD_VAR 0 1
15666: PPUSH
15667: LD_VAR 0 3
15671: PPUSH
15672: CALL_OW 235
15676: GO 15650
15678: POP
15679: POP
// end ;
15680: PPOPN 3
15682: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15683: LD_EXP 43
15687: PUSH
15688: LD_EXP 56
15692: AND
15693: IFFALSE 15812
15695: GO 15697
15697: DISABLE
15698: LD_INT 0
15700: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15701: LD_ADDR_VAR 0 1
15705: PUSH
15706: LD_INT 22
15708: PUSH
15709: LD_OWVAR 2
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 21
15720: PUSH
15721: LD_INT 1
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 3
15730: PUSH
15731: LD_INT 23
15733: PUSH
15734: LD_INT 0
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: LIST
15749: PPUSH
15750: CALL_OW 69
15754: PUSH
15755: FOR_IN
15756: IFFALSE 15810
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15758: LD_VAR 0 1
15762: PPUSH
15763: CALL_OW 257
15767: PUSH
15768: LD_INT 1
15770: PUSH
15771: LD_INT 2
15773: PUSH
15774: LD_INT 3
15776: PUSH
15777: LD_INT 4
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: IN
15786: IFFALSE 15808
// SetClass ( un , rand ( 1 , 4 ) ) ;
15788: LD_VAR 0 1
15792: PPUSH
15793: LD_INT 1
15795: PPUSH
15796: LD_INT 4
15798: PPUSH
15799: CALL_OW 12
15803: PPUSH
15804: CALL_OW 336
15808: GO 15755
15810: POP
15811: POP
// end ;
15812: PPOPN 1
15814: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15815: LD_EXP 43
15819: PUSH
15820: LD_EXP 55
15824: AND
15825: IFFALSE 15904
15827: GO 15829
15829: DISABLE
15830: LD_INT 0
15832: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15833: LD_ADDR_VAR 0 1
15837: PUSH
15838: LD_INT 22
15840: PUSH
15841: LD_OWVAR 2
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 21
15852: PUSH
15853: LD_INT 3
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PPUSH
15864: CALL_OW 69
15868: ST_TO_ADDR
// if not tmp then
15869: LD_VAR 0 1
15873: NOT
15874: IFFALSE 15878
// exit ;
15876: GO 15904
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15878: LD_VAR 0 1
15882: PUSH
15883: LD_INT 1
15885: PPUSH
15886: LD_VAR 0 1
15890: PPUSH
15891: CALL_OW 12
15895: ARRAY
15896: PPUSH
15897: LD_INT 100
15899: PPUSH
15900: CALL_OW 234
// end ;
15904: PPOPN 1
15906: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15907: LD_EXP 43
15911: PUSH
15912: LD_EXP 57
15916: AND
15917: IFFALSE 16015
15919: GO 15921
15921: DISABLE
15922: LD_INT 0
15924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15925: LD_ADDR_VAR 0 1
15929: PUSH
15930: LD_INT 22
15932: PUSH
15933: LD_OWVAR 2
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 21
15944: PUSH
15945: LD_INT 1
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PPUSH
15956: CALL_OW 69
15960: ST_TO_ADDR
// if not tmp then
15961: LD_VAR 0 1
15965: NOT
15966: IFFALSE 15970
// exit ;
15968: GO 16015
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15970: LD_VAR 0 1
15974: PUSH
15975: LD_INT 1
15977: PPUSH
15978: LD_VAR 0 1
15982: PPUSH
15983: CALL_OW 12
15987: ARRAY
15988: PPUSH
15989: LD_INT 1
15991: PPUSH
15992: LD_INT 4
15994: PPUSH
15995: CALL_OW 12
15999: PPUSH
16000: LD_INT 3000
16002: PPUSH
16003: LD_INT 9000
16005: PPUSH
16006: CALL_OW 12
16010: PPUSH
16011: CALL_OW 492
// end ;
16015: PPOPN 1
16017: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16018: LD_EXP 43
16022: PUSH
16023: LD_EXP 58
16027: AND
16028: IFFALSE 16048
16030: GO 16032
16032: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16033: LD_INT 1
16035: PPUSH
16036: LD_OWVAR 2
16040: PPUSH
16041: LD_INT 0
16043: PPUSH
16044: CALL_OW 324
16048: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16049: LD_EXP 43
16053: PUSH
16054: LD_EXP 59
16058: AND
16059: IFFALSE 16142
16061: GO 16063
16063: DISABLE
16064: LD_INT 0
16066: PPUSH
16067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16068: LD_ADDR_VAR 0 2
16072: PUSH
16073: LD_INT 22
16075: PUSH
16076: LD_OWVAR 2
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PUSH
16085: LD_INT 21
16087: PUSH
16088: LD_INT 3
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PPUSH
16099: CALL_OW 69
16103: ST_TO_ADDR
// if not tmp then
16104: LD_VAR 0 2
16108: NOT
16109: IFFALSE 16113
// exit ;
16111: GO 16142
// for i in tmp do
16113: LD_ADDR_VAR 0 1
16117: PUSH
16118: LD_VAR 0 2
16122: PUSH
16123: FOR_IN
16124: IFFALSE 16140
// SetBLevel ( i , 10 ) ;
16126: LD_VAR 0 1
16130: PPUSH
16131: LD_INT 10
16133: PPUSH
16134: CALL_OW 241
16138: GO 16123
16140: POP
16141: POP
// end ;
16142: PPOPN 2
16144: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16145: LD_EXP 43
16149: PUSH
16150: LD_EXP 60
16154: AND
16155: IFFALSE 16266
16157: GO 16159
16159: DISABLE
16160: LD_INT 0
16162: PPUSH
16163: PPUSH
16164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16165: LD_ADDR_VAR 0 3
16169: PUSH
16170: LD_INT 22
16172: PUSH
16173: LD_OWVAR 2
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 25
16184: PUSH
16185: LD_INT 1
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PPUSH
16196: CALL_OW 69
16200: ST_TO_ADDR
// if not tmp then
16201: LD_VAR 0 3
16205: NOT
16206: IFFALSE 16210
// exit ;
16208: GO 16266
// un := tmp [ rand ( 1 , tmp ) ] ;
16210: LD_ADDR_VAR 0 2
16214: PUSH
16215: LD_VAR 0 3
16219: PUSH
16220: LD_INT 1
16222: PPUSH
16223: LD_VAR 0 3
16227: PPUSH
16228: CALL_OW 12
16232: ARRAY
16233: ST_TO_ADDR
// if Crawls ( un ) then
16234: LD_VAR 0 2
16238: PPUSH
16239: CALL_OW 318
16243: IFFALSE 16254
// ComWalk ( un ) ;
16245: LD_VAR 0 2
16249: PPUSH
16250: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16254: LD_VAR 0 2
16258: PPUSH
16259: LD_INT 5
16261: PPUSH
16262: CALL_OW 336
// end ;
16266: PPOPN 3
16268: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16269: LD_EXP 43
16273: PUSH
16274: LD_EXP 61
16278: AND
16279: PUSH
16280: LD_OWVAR 67
16284: PUSH
16285: LD_INT 3
16287: LESS
16288: AND
16289: IFFALSE 16308
16291: GO 16293
16293: DISABLE
// Difficulty := Difficulty + 1 ;
16294: LD_ADDR_OWVAR 67
16298: PUSH
16299: LD_OWVAR 67
16303: PUSH
16304: LD_INT 1
16306: PLUS
16307: ST_TO_ADDR
16308: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16309: LD_EXP 43
16313: PUSH
16314: LD_EXP 62
16318: AND
16319: IFFALSE 16422
16321: GO 16323
16323: DISABLE
16324: LD_INT 0
16326: PPUSH
// begin for i := 1 to 5 do
16327: LD_ADDR_VAR 0 1
16331: PUSH
16332: DOUBLE
16333: LD_INT 1
16335: DEC
16336: ST_TO_ADDR
16337: LD_INT 5
16339: PUSH
16340: FOR_TO
16341: IFFALSE 16420
// begin uc_nation := nation_nature ;
16343: LD_ADDR_OWVAR 21
16347: PUSH
16348: LD_INT 0
16350: ST_TO_ADDR
// uc_side := 0 ;
16351: LD_ADDR_OWVAR 20
16355: PUSH
16356: LD_INT 0
16358: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16359: LD_ADDR_OWVAR 29
16363: PUSH
16364: LD_INT 12
16366: PUSH
16367: LD_INT 12
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: ST_TO_ADDR
// hc_agressivity := 20 ;
16374: LD_ADDR_OWVAR 35
16378: PUSH
16379: LD_INT 20
16381: ST_TO_ADDR
// hc_class := class_tiger ;
16382: LD_ADDR_OWVAR 28
16386: PUSH
16387: LD_INT 14
16389: ST_TO_ADDR
// hc_gallery :=  ;
16390: LD_ADDR_OWVAR 33
16394: PUSH
16395: LD_STRING 
16397: ST_TO_ADDR
// hc_name :=  ;
16398: LD_ADDR_OWVAR 26
16402: PUSH
16403: LD_STRING 
16405: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16406: CALL_OW 44
16410: PPUSH
16411: LD_INT 0
16413: PPUSH
16414: CALL_OW 51
// end ;
16418: GO 16340
16420: POP
16421: POP
// end ;
16422: PPOPN 1
16424: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16425: LD_EXP 43
16429: PUSH
16430: LD_EXP 63
16434: AND
16435: IFFALSE 16444
16437: GO 16439
16439: DISABLE
// StreamSibBomb ;
16440: CALL 16445 0 0
16444: END
// export function StreamSibBomb ; var i , x , y ; begin
16445: LD_INT 0
16447: PPUSH
16448: PPUSH
16449: PPUSH
16450: PPUSH
// result := false ;
16451: LD_ADDR_VAR 0 1
16455: PUSH
16456: LD_INT 0
16458: ST_TO_ADDR
// for i := 1 to 16 do
16459: LD_ADDR_VAR 0 2
16463: PUSH
16464: DOUBLE
16465: LD_INT 1
16467: DEC
16468: ST_TO_ADDR
16469: LD_INT 16
16471: PUSH
16472: FOR_TO
16473: IFFALSE 16672
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16475: LD_ADDR_VAR 0 3
16479: PUSH
16480: LD_INT 10
16482: PUSH
16483: LD_INT 20
16485: PUSH
16486: LD_INT 30
16488: PUSH
16489: LD_INT 40
16491: PUSH
16492: LD_INT 50
16494: PUSH
16495: LD_INT 60
16497: PUSH
16498: LD_INT 70
16500: PUSH
16501: LD_INT 80
16503: PUSH
16504: LD_INT 90
16506: PUSH
16507: LD_INT 100
16509: PUSH
16510: LD_INT 110
16512: PUSH
16513: LD_INT 120
16515: PUSH
16516: LD_INT 130
16518: PUSH
16519: LD_INT 140
16521: PUSH
16522: LD_INT 150
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 1
16544: PPUSH
16545: LD_INT 15
16547: PPUSH
16548: CALL_OW 12
16552: ARRAY
16553: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16554: LD_ADDR_VAR 0 4
16558: PUSH
16559: LD_INT 10
16561: PUSH
16562: LD_INT 20
16564: PUSH
16565: LD_INT 30
16567: PUSH
16568: LD_INT 40
16570: PUSH
16571: LD_INT 50
16573: PUSH
16574: LD_INT 60
16576: PUSH
16577: LD_INT 70
16579: PUSH
16580: LD_INT 80
16582: PUSH
16583: LD_INT 90
16585: PUSH
16586: LD_INT 100
16588: PUSH
16589: LD_INT 110
16591: PUSH
16592: LD_INT 120
16594: PUSH
16595: LD_INT 130
16597: PUSH
16598: LD_INT 140
16600: PUSH
16601: LD_INT 150
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 1
16623: PPUSH
16624: LD_INT 15
16626: PPUSH
16627: CALL_OW 12
16631: ARRAY
16632: ST_TO_ADDR
// if ValidHex ( x , y ) then
16633: LD_VAR 0 3
16637: PPUSH
16638: LD_VAR 0 4
16642: PPUSH
16643: CALL_OW 488
16647: IFFALSE 16670
// begin result := [ x , y ] ;
16649: LD_ADDR_VAR 0 1
16653: PUSH
16654: LD_VAR 0 3
16658: PUSH
16659: LD_VAR 0 4
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: ST_TO_ADDR
// break ;
16668: GO 16672
// end ; end ;
16670: GO 16472
16672: POP
16673: POP
// if result then
16674: LD_VAR 0 1
16678: IFFALSE 16738
// begin ToLua ( playSibBomb() ) ;
16680: LD_STRING playSibBomb()
16682: PPUSH
16683: CALL_OW 559
// wait ( 0 0$14 ) ;
16687: LD_INT 490
16689: PPUSH
16690: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16694: LD_VAR 0 1
16698: PUSH
16699: LD_INT 1
16701: ARRAY
16702: PPUSH
16703: LD_VAR 0 1
16707: PUSH
16708: LD_INT 2
16710: ARRAY
16711: PPUSH
16712: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16716: LD_VAR 0 1
16720: PUSH
16721: LD_INT 1
16723: ARRAY
16724: PPUSH
16725: LD_VAR 0 1
16729: PUSH
16730: LD_INT 2
16732: ARRAY
16733: PPUSH
16734: CALL_OW 429
// end ; end ;
16738: LD_VAR 0 1
16742: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16743: LD_EXP 43
16747: PUSH
16748: LD_EXP 65
16752: AND
16753: IFFALSE 16765
16755: GO 16757
16757: DISABLE
// YouLost (  ) ;
16758: LD_STRING 
16760: PPUSH
16761: CALL_OW 104
16765: END
// every 0 0$1 trigger StreamModeActive and sFog do
16766: LD_EXP 43
16770: PUSH
16771: LD_EXP 64
16775: AND
16776: IFFALSE 16790
16778: GO 16780
16780: DISABLE
// FogOff ( your_side ) ;
16781: LD_OWVAR 2
16785: PPUSH
16786: CALL_OW 344
16790: END
// every 0 0$1 trigger StreamModeActive and sSun do
16791: LD_EXP 43
16795: PUSH
16796: LD_EXP 66
16800: AND
16801: IFFALSE 16829
16803: GO 16805
16805: DISABLE
// begin solar_recharge_percent := 0 ;
16806: LD_ADDR_OWVAR 79
16810: PUSH
16811: LD_INT 0
16813: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16814: LD_INT 10500
16816: PPUSH
16817: CALL_OW 67
// solar_recharge_percent := 100 ;
16821: LD_ADDR_OWVAR 79
16825: PUSH
16826: LD_INT 100
16828: ST_TO_ADDR
// end ;
16829: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16830: LD_EXP 43
16834: PUSH
16835: LD_EXP 67
16839: AND
16840: IFFALSE 17079
16842: GO 16844
16844: DISABLE
16845: LD_INT 0
16847: PPUSH
16848: PPUSH
16849: PPUSH
// begin tmp := [ ] ;
16850: LD_ADDR_VAR 0 3
16854: PUSH
16855: EMPTY
16856: ST_TO_ADDR
// for i := 1 to 6 do
16857: LD_ADDR_VAR 0 1
16861: PUSH
16862: DOUBLE
16863: LD_INT 1
16865: DEC
16866: ST_TO_ADDR
16867: LD_INT 6
16869: PUSH
16870: FOR_TO
16871: IFFALSE 16976
// begin uc_nation := nation_nature ;
16873: LD_ADDR_OWVAR 21
16877: PUSH
16878: LD_INT 0
16880: ST_TO_ADDR
// uc_side := 0 ;
16881: LD_ADDR_OWVAR 20
16885: PUSH
16886: LD_INT 0
16888: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16889: LD_ADDR_OWVAR 29
16893: PUSH
16894: LD_INT 12
16896: PUSH
16897: LD_INT 12
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: ST_TO_ADDR
// hc_agressivity := 20 ;
16904: LD_ADDR_OWVAR 35
16908: PUSH
16909: LD_INT 20
16911: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16912: LD_ADDR_OWVAR 28
16916: PUSH
16917: LD_INT 17
16919: ST_TO_ADDR
// hc_gallery :=  ;
16920: LD_ADDR_OWVAR 33
16924: PUSH
16925: LD_STRING 
16927: ST_TO_ADDR
// hc_name :=  ;
16928: LD_ADDR_OWVAR 26
16932: PUSH
16933: LD_STRING 
16935: ST_TO_ADDR
// un := CreateHuman ;
16936: LD_ADDR_VAR 0 2
16940: PUSH
16941: CALL_OW 44
16945: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16946: LD_VAR 0 2
16950: PPUSH
16951: LD_INT 1
16953: PPUSH
16954: CALL_OW 51
// tmp := tmp ^ un ;
16958: LD_ADDR_VAR 0 3
16962: PUSH
16963: LD_VAR 0 3
16967: PUSH
16968: LD_VAR 0 2
16972: ADD
16973: ST_TO_ADDR
// end ;
16974: GO 16870
16976: POP
16977: POP
// repeat wait ( 0 0$1 ) ;
16978: LD_INT 35
16980: PPUSH
16981: CALL_OW 67
// for un in tmp do
16985: LD_ADDR_VAR 0 2
16989: PUSH
16990: LD_VAR 0 3
16994: PUSH
16995: FOR_IN
16996: IFFALSE 17070
// begin if IsDead ( un ) then
16998: LD_VAR 0 2
17002: PPUSH
17003: CALL_OW 301
17007: IFFALSE 17027
// begin tmp := tmp diff un ;
17009: LD_ADDR_VAR 0 3
17013: PUSH
17014: LD_VAR 0 3
17018: PUSH
17019: LD_VAR 0 2
17023: DIFF
17024: ST_TO_ADDR
// continue ;
17025: GO 16995
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17027: LD_VAR 0 2
17031: PPUSH
17032: LD_INT 3
17034: PUSH
17035: LD_INT 22
17037: PUSH
17038: LD_INT 0
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PPUSH
17049: CALL_OW 69
17053: PPUSH
17054: LD_VAR 0 2
17058: PPUSH
17059: CALL_OW 74
17063: PPUSH
17064: CALL_OW 115
// end ;
17068: GO 16995
17070: POP
17071: POP
// until not tmp ;
17072: LD_VAR 0 3
17076: NOT
17077: IFFALSE 16978
// end ;
17079: PPOPN 3
17081: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17082: LD_EXP 43
17086: PUSH
17087: LD_EXP 68
17091: AND
17092: IFFALSE 17146
17094: GO 17096
17096: DISABLE
// begin ToLua ( displayTroll(); ) ;
17097: LD_STRING displayTroll();
17099: PPUSH
17100: CALL_OW 559
// wait ( 3 3$00 ) ;
17104: LD_INT 6300
17106: PPUSH
17107: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17111: LD_STRING hideTroll();
17113: PPUSH
17114: CALL_OW 559
// wait ( 1 1$00 ) ;
17118: LD_INT 2100
17120: PPUSH
17121: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17125: LD_STRING displayTroll();
17127: PPUSH
17128: CALL_OW 559
// wait ( 1 1$00 ) ;
17132: LD_INT 2100
17134: PPUSH
17135: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17139: LD_STRING hideTroll();
17141: PPUSH
17142: CALL_OW 559
// end ;
17146: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17147: LD_EXP 43
17151: PUSH
17152: LD_EXP 69
17156: AND
17157: IFFALSE 17220
17159: GO 17161
17161: DISABLE
17162: LD_INT 0
17164: PPUSH
// begin p := 0 ;
17165: LD_ADDR_VAR 0 1
17169: PUSH
17170: LD_INT 0
17172: ST_TO_ADDR
// repeat game_speed := 1 ;
17173: LD_ADDR_OWVAR 65
17177: PUSH
17178: LD_INT 1
17180: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17181: LD_INT 35
17183: PPUSH
17184: CALL_OW 67
// p := p + 1 ;
17188: LD_ADDR_VAR 0 1
17192: PUSH
17193: LD_VAR 0 1
17197: PUSH
17198: LD_INT 1
17200: PLUS
17201: ST_TO_ADDR
// until p >= 60 ;
17202: LD_VAR 0 1
17206: PUSH
17207: LD_INT 60
17209: GREATEREQUAL
17210: IFFALSE 17173
// game_speed := 4 ;
17212: LD_ADDR_OWVAR 65
17216: PUSH
17217: LD_INT 4
17219: ST_TO_ADDR
// end ;
17220: PPOPN 1
17222: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17223: LD_EXP 43
17227: PUSH
17228: LD_EXP 70
17232: AND
17233: IFFALSE 17379
17235: GO 17237
17237: DISABLE
17238: LD_INT 0
17240: PPUSH
17241: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17242: LD_ADDR_VAR 0 1
17246: PUSH
17247: LD_INT 22
17249: PUSH
17250: LD_OWVAR 2
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 2
17261: PUSH
17262: LD_INT 30
17264: PUSH
17265: LD_INT 0
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 30
17274: PUSH
17275: LD_INT 1
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: LIST
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PPUSH
17291: CALL_OW 69
17295: ST_TO_ADDR
// if not depot then
17296: LD_VAR 0 1
17300: NOT
17301: IFFALSE 17305
// exit ;
17303: GO 17379
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17305: LD_ADDR_VAR 0 2
17309: PUSH
17310: LD_VAR 0 1
17314: PUSH
17315: LD_INT 1
17317: PPUSH
17318: LD_VAR 0 1
17322: PPUSH
17323: CALL_OW 12
17327: ARRAY
17328: PPUSH
17329: CALL_OW 274
17333: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17334: LD_VAR 0 2
17338: PPUSH
17339: LD_INT 1
17341: PPUSH
17342: LD_INT 0
17344: PPUSH
17345: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17349: LD_VAR 0 2
17353: PPUSH
17354: LD_INT 2
17356: PPUSH
17357: LD_INT 0
17359: PPUSH
17360: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17364: LD_VAR 0 2
17368: PPUSH
17369: LD_INT 3
17371: PPUSH
17372: LD_INT 0
17374: PPUSH
17375: CALL_OW 277
// end ;
17379: PPOPN 2
17381: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17382: LD_EXP 43
17386: PUSH
17387: LD_EXP 71
17391: AND
17392: IFFALSE 17489
17394: GO 17396
17396: DISABLE
17397: LD_INT 0
17399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17400: LD_ADDR_VAR 0 1
17404: PUSH
17405: LD_INT 22
17407: PUSH
17408: LD_OWVAR 2
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 21
17419: PUSH
17420: LD_INT 1
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: LD_INT 23
17432: PUSH
17433: LD_INT 0
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: LIST
17448: PPUSH
17449: CALL_OW 69
17453: ST_TO_ADDR
// if not tmp then
17454: LD_VAR 0 1
17458: NOT
17459: IFFALSE 17463
// exit ;
17461: GO 17489
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17463: LD_VAR 0 1
17467: PUSH
17468: LD_INT 1
17470: PPUSH
17471: LD_VAR 0 1
17475: PPUSH
17476: CALL_OW 12
17480: ARRAY
17481: PPUSH
17482: LD_INT 200
17484: PPUSH
17485: CALL_OW 234
// end ;
17489: PPOPN 1
17491: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17492: LD_EXP 43
17496: PUSH
17497: LD_EXP 72
17501: AND
17502: IFFALSE 17581
17504: GO 17506
17506: DISABLE
17507: LD_INT 0
17509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17510: LD_ADDR_VAR 0 1
17514: PUSH
17515: LD_INT 22
17517: PUSH
17518: LD_OWVAR 2
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 21
17529: PUSH
17530: LD_INT 2
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PPUSH
17541: CALL_OW 69
17545: ST_TO_ADDR
// if not tmp then
17546: LD_VAR 0 1
17550: NOT
17551: IFFALSE 17555
// exit ;
17553: GO 17581
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17555: LD_VAR 0 1
17559: PUSH
17560: LD_INT 1
17562: PPUSH
17563: LD_VAR 0 1
17567: PPUSH
17568: CALL_OW 12
17572: ARRAY
17573: PPUSH
17574: LD_INT 60
17576: PPUSH
17577: CALL_OW 234
// end ;
17581: PPOPN 1
17583: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17584: LD_EXP 43
17588: PUSH
17589: LD_EXP 73
17593: AND
17594: IFFALSE 17693
17596: GO 17598
17598: DISABLE
17599: LD_INT 0
17601: PPUSH
17602: PPUSH
// begin enable ;
17603: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17604: LD_ADDR_VAR 0 1
17608: PUSH
17609: LD_INT 22
17611: PUSH
17612: LD_OWVAR 2
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 61
17623: PUSH
17624: EMPTY
17625: LIST
17626: PUSH
17627: LD_INT 33
17629: PUSH
17630: LD_INT 2
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: LIST
17641: PPUSH
17642: CALL_OW 69
17646: ST_TO_ADDR
// if not tmp then
17647: LD_VAR 0 1
17651: NOT
17652: IFFALSE 17656
// exit ;
17654: GO 17693
// for i in tmp do
17656: LD_ADDR_VAR 0 2
17660: PUSH
17661: LD_VAR 0 1
17665: PUSH
17666: FOR_IN
17667: IFFALSE 17691
// if IsControledBy ( i ) then
17669: LD_VAR 0 2
17673: PPUSH
17674: CALL_OW 312
17678: IFFALSE 17689
// ComUnlink ( i ) ;
17680: LD_VAR 0 2
17684: PPUSH
17685: CALL_OW 136
17689: GO 17666
17691: POP
17692: POP
// end ;
17693: PPOPN 2
17695: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17696: LD_EXP 43
17700: PUSH
17701: LD_EXP 74
17705: AND
17706: IFFALSE 17846
17708: GO 17710
17710: DISABLE
17711: LD_INT 0
17713: PPUSH
17714: PPUSH
// begin ToLua ( displayPowell(); ) ;
17715: LD_STRING displayPowell();
17717: PPUSH
17718: CALL_OW 559
// uc_side := 0 ;
17722: LD_ADDR_OWVAR 20
17726: PUSH
17727: LD_INT 0
17729: ST_TO_ADDR
// uc_nation := 2 ;
17730: LD_ADDR_OWVAR 21
17734: PUSH
17735: LD_INT 2
17737: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17738: LD_ADDR_OWVAR 37
17742: PUSH
17743: LD_INT 14
17745: ST_TO_ADDR
// vc_engine := engine_siberite ;
17746: LD_ADDR_OWVAR 39
17750: PUSH
17751: LD_INT 3
17753: ST_TO_ADDR
// vc_control := control_apeman ;
17754: LD_ADDR_OWVAR 38
17758: PUSH
17759: LD_INT 5
17761: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17762: LD_ADDR_OWVAR 40
17766: PUSH
17767: LD_INT 29
17769: ST_TO_ADDR
// un := CreateVehicle ;
17770: LD_ADDR_VAR 0 2
17774: PUSH
17775: CALL_OW 45
17779: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17780: LD_VAR 0 2
17784: PPUSH
17785: LD_INT 1
17787: PPUSH
17788: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17792: LD_INT 35
17794: PPUSH
17795: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17799: LD_VAR 0 2
17803: PPUSH
17804: LD_INT 22
17806: PUSH
17807: LD_OWVAR 2
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PPUSH
17816: CALL_OW 69
17820: PPUSH
17821: LD_VAR 0 2
17825: PPUSH
17826: CALL_OW 74
17830: PPUSH
17831: CALL_OW 115
// until IsDead ( un ) ;
17835: LD_VAR 0 2
17839: PPUSH
17840: CALL_OW 301
17844: IFFALSE 17792
// end ;
17846: PPOPN 2
17848: END
// every 0 0$1 trigger StreamModeActive and sStu do
17849: LD_EXP 43
17853: PUSH
17854: LD_EXP 82
17858: AND
17859: IFFALSE 17875
17861: GO 17863
17863: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17864: LD_STRING displayStucuk();
17866: PPUSH
17867: CALL_OW 559
// ResetFog ;
17871: CALL_OW 335
// end ;
17875: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17876: LD_EXP 43
17880: PUSH
17881: LD_EXP 75
17885: AND
17886: IFFALSE 18027
17888: GO 17890
17890: DISABLE
17891: LD_INT 0
17893: PPUSH
17894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17895: LD_ADDR_VAR 0 2
17899: PUSH
17900: LD_INT 22
17902: PUSH
17903: LD_OWVAR 2
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 21
17914: PUSH
17915: LD_INT 1
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PPUSH
17926: CALL_OW 69
17930: ST_TO_ADDR
// if not tmp then
17931: LD_VAR 0 2
17935: NOT
17936: IFFALSE 17940
// exit ;
17938: GO 18027
// un := tmp [ rand ( 1 , tmp ) ] ;
17940: LD_ADDR_VAR 0 1
17944: PUSH
17945: LD_VAR 0 2
17949: PUSH
17950: LD_INT 1
17952: PPUSH
17953: LD_VAR 0 2
17957: PPUSH
17958: CALL_OW 12
17962: ARRAY
17963: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17964: LD_VAR 0 1
17968: PPUSH
17969: LD_INT 0
17971: PPUSH
17972: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17976: LD_VAR 0 1
17980: PPUSH
17981: LD_OWVAR 3
17985: PUSH
17986: LD_VAR 0 1
17990: DIFF
17991: PPUSH
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL_OW 74
18001: PPUSH
18002: CALL_OW 115
// wait ( 0 0$20 ) ;
18006: LD_INT 700
18008: PPUSH
18009: CALL_OW 67
// SetSide ( un , your_side ) ;
18013: LD_VAR 0 1
18017: PPUSH
18018: LD_OWVAR 2
18022: PPUSH
18023: CALL_OW 235
// end ;
18027: PPOPN 2
18029: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18030: LD_EXP 43
18034: PUSH
18035: LD_EXP 76
18039: AND
18040: IFFALSE 18146
18042: GO 18044
18044: DISABLE
18045: LD_INT 0
18047: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18048: LD_ADDR_VAR 0 1
18052: PUSH
18053: LD_INT 22
18055: PUSH
18056: LD_OWVAR 2
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 2
18067: PUSH
18068: LD_INT 30
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 30
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: LIST
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PPUSH
18097: CALL_OW 69
18101: ST_TO_ADDR
// if not depot then
18102: LD_VAR 0 1
18106: NOT
18107: IFFALSE 18111
// exit ;
18109: GO 18146
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18111: LD_VAR 0 1
18115: PUSH
18116: LD_INT 1
18118: ARRAY
18119: PPUSH
18120: CALL_OW 250
18124: PPUSH
18125: LD_VAR 0 1
18129: PUSH
18130: LD_INT 1
18132: ARRAY
18133: PPUSH
18134: CALL_OW 251
18138: PPUSH
18139: LD_INT 70
18141: PPUSH
18142: CALL_OW 495
// end ;
18146: PPOPN 1
18148: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18149: LD_EXP 43
18153: PUSH
18154: LD_EXP 77
18158: AND
18159: IFFALSE 18370
18161: GO 18163
18163: DISABLE
18164: LD_INT 0
18166: PPUSH
18167: PPUSH
18168: PPUSH
18169: PPUSH
18170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18171: LD_ADDR_VAR 0 5
18175: PUSH
18176: LD_INT 22
18178: PUSH
18179: LD_OWVAR 2
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 21
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PPUSH
18202: CALL_OW 69
18206: ST_TO_ADDR
// if not tmp then
18207: LD_VAR 0 5
18211: NOT
18212: IFFALSE 18216
// exit ;
18214: GO 18370
// for i in tmp do
18216: LD_ADDR_VAR 0 1
18220: PUSH
18221: LD_VAR 0 5
18225: PUSH
18226: FOR_IN
18227: IFFALSE 18368
// begin d := rand ( 0 , 5 ) ;
18229: LD_ADDR_VAR 0 4
18233: PUSH
18234: LD_INT 0
18236: PPUSH
18237: LD_INT 5
18239: PPUSH
18240: CALL_OW 12
18244: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18245: LD_ADDR_VAR 0 2
18249: PUSH
18250: LD_VAR 0 1
18254: PPUSH
18255: CALL_OW 250
18259: PPUSH
18260: LD_VAR 0 4
18264: PPUSH
18265: LD_INT 3
18267: PPUSH
18268: LD_INT 12
18270: PPUSH
18271: CALL_OW 12
18275: PPUSH
18276: CALL_OW 272
18280: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18281: LD_ADDR_VAR 0 3
18285: PUSH
18286: LD_VAR 0 1
18290: PPUSH
18291: CALL_OW 251
18295: PPUSH
18296: LD_VAR 0 4
18300: PPUSH
18301: LD_INT 3
18303: PPUSH
18304: LD_INT 12
18306: PPUSH
18307: CALL_OW 12
18311: PPUSH
18312: CALL_OW 273
18316: ST_TO_ADDR
// if ValidHex ( x , y ) then
18317: LD_VAR 0 2
18321: PPUSH
18322: LD_VAR 0 3
18326: PPUSH
18327: CALL_OW 488
18331: IFFALSE 18366
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18333: LD_VAR 0 1
18337: PPUSH
18338: LD_VAR 0 2
18342: PPUSH
18343: LD_VAR 0 3
18347: PPUSH
18348: LD_INT 3
18350: PPUSH
18351: LD_INT 6
18353: PPUSH
18354: CALL_OW 12
18358: PPUSH
18359: LD_INT 1
18361: PPUSH
18362: CALL_OW 483
// end ;
18366: GO 18226
18368: POP
18369: POP
// end ;
18370: PPOPN 5
18372: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18373: LD_EXP 43
18377: PUSH
18378: LD_EXP 78
18382: AND
18383: IFFALSE 18477
18385: GO 18387
18387: DISABLE
18388: LD_INT 0
18390: PPUSH
18391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18392: LD_ADDR_VAR 0 2
18396: PUSH
18397: LD_INT 22
18399: PUSH
18400: LD_OWVAR 2
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 32
18411: PUSH
18412: LD_INT 1
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 21
18421: PUSH
18422: LD_INT 2
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: LIST
18433: PPUSH
18434: CALL_OW 69
18438: ST_TO_ADDR
// if not tmp then
18439: LD_VAR 0 2
18443: NOT
18444: IFFALSE 18448
// exit ;
18446: GO 18477
// for i in tmp do
18448: LD_ADDR_VAR 0 1
18452: PUSH
18453: LD_VAR 0 2
18457: PUSH
18458: FOR_IN
18459: IFFALSE 18475
// SetFuel ( i , 0 ) ;
18461: LD_VAR 0 1
18465: PPUSH
18466: LD_INT 0
18468: PPUSH
18469: CALL_OW 240
18473: GO 18458
18475: POP
18476: POP
// end ;
18477: PPOPN 2
18479: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18480: LD_EXP 43
18484: PUSH
18485: LD_EXP 79
18489: AND
18490: IFFALSE 18556
18492: GO 18494
18494: DISABLE
18495: LD_INT 0
18497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18498: LD_ADDR_VAR 0 1
18502: PUSH
18503: LD_INT 22
18505: PUSH
18506: LD_OWVAR 2
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 30
18517: PUSH
18518: LD_INT 29
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PPUSH
18529: CALL_OW 69
18533: ST_TO_ADDR
// if not tmp then
18534: LD_VAR 0 1
18538: NOT
18539: IFFALSE 18543
// exit ;
18541: GO 18556
// DestroyUnit ( tmp [ 1 ] ) ;
18543: LD_VAR 0 1
18547: PUSH
18548: LD_INT 1
18550: ARRAY
18551: PPUSH
18552: CALL_OW 65
// end ;
18556: PPOPN 1
18558: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18559: LD_EXP 43
18563: PUSH
18564: LD_EXP 81
18568: AND
18569: IFFALSE 18698
18571: GO 18573
18573: DISABLE
18574: LD_INT 0
18576: PPUSH
// begin uc_side := 0 ;
18577: LD_ADDR_OWVAR 20
18581: PUSH
18582: LD_INT 0
18584: ST_TO_ADDR
// uc_nation := nation_arabian ;
18585: LD_ADDR_OWVAR 21
18589: PUSH
18590: LD_INT 2
18592: ST_TO_ADDR
// hc_gallery :=  ;
18593: LD_ADDR_OWVAR 33
18597: PUSH
18598: LD_STRING 
18600: ST_TO_ADDR
// hc_name :=  ;
18601: LD_ADDR_OWVAR 26
18605: PUSH
18606: LD_STRING 
18608: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18609: LD_INT 1
18611: PPUSH
18612: LD_INT 11
18614: PPUSH
18615: LD_INT 10
18617: PPUSH
18618: CALL_OW 380
// un := CreateHuman ;
18622: LD_ADDR_VAR 0 1
18626: PUSH
18627: CALL_OW 44
18631: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18632: LD_VAR 0 1
18636: PPUSH
18637: LD_INT 1
18639: PPUSH
18640: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18644: LD_INT 35
18646: PPUSH
18647: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18651: LD_VAR 0 1
18655: PPUSH
18656: LD_INT 22
18658: PUSH
18659: LD_OWVAR 2
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PPUSH
18668: CALL_OW 69
18672: PPUSH
18673: LD_VAR 0 1
18677: PPUSH
18678: CALL_OW 74
18682: PPUSH
18683: CALL_OW 115
// until IsDead ( un ) ;
18687: LD_VAR 0 1
18691: PPUSH
18692: CALL_OW 301
18696: IFFALSE 18644
// end ;
18698: PPOPN 1
18700: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18701: LD_EXP 43
18705: PUSH
18706: LD_EXP 83
18710: AND
18711: IFFALSE 18723
18713: GO 18715
18715: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18716: LD_STRING earthquake(getX(game), 0, 32)
18718: PPUSH
18719: CALL_OW 559
18723: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18724: LD_EXP 43
18728: PUSH
18729: LD_EXP 84
18733: AND
18734: IFFALSE 18825
18736: GO 18738
18738: DISABLE
18739: LD_INT 0
18741: PPUSH
// begin enable ;
18742: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18743: LD_ADDR_VAR 0 1
18747: PUSH
18748: LD_INT 22
18750: PUSH
18751: LD_OWVAR 2
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 21
18762: PUSH
18763: LD_INT 2
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 33
18772: PUSH
18773: LD_INT 3
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: LIST
18784: PPUSH
18785: CALL_OW 69
18789: ST_TO_ADDR
// if not tmp then
18790: LD_VAR 0 1
18794: NOT
18795: IFFALSE 18799
// exit ;
18797: GO 18825
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18799: LD_VAR 0 1
18803: PUSH
18804: LD_INT 1
18806: PPUSH
18807: LD_VAR 0 1
18811: PPUSH
18812: CALL_OW 12
18816: ARRAY
18817: PPUSH
18818: LD_INT 1
18820: PPUSH
18821: CALL_OW 234
// end ;
18825: PPOPN 1
18827: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18828: LD_EXP 43
18832: PUSH
18833: LD_EXP 85
18837: AND
18838: IFFALSE 18979
18840: GO 18842
18842: DISABLE
18843: LD_INT 0
18845: PPUSH
18846: PPUSH
18847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18848: LD_ADDR_VAR 0 3
18852: PUSH
18853: LD_INT 22
18855: PUSH
18856: LD_OWVAR 2
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 25
18867: PUSH
18868: LD_INT 1
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PPUSH
18879: CALL_OW 69
18883: ST_TO_ADDR
// if not tmp then
18884: LD_VAR 0 3
18888: NOT
18889: IFFALSE 18893
// exit ;
18891: GO 18979
// un := tmp [ rand ( 1 , tmp ) ] ;
18893: LD_ADDR_VAR 0 2
18897: PUSH
18898: LD_VAR 0 3
18902: PUSH
18903: LD_INT 1
18905: PPUSH
18906: LD_VAR 0 3
18910: PPUSH
18911: CALL_OW 12
18915: ARRAY
18916: ST_TO_ADDR
// if Crawls ( un ) then
18917: LD_VAR 0 2
18921: PPUSH
18922: CALL_OW 318
18926: IFFALSE 18937
// ComWalk ( un ) ;
18928: LD_VAR 0 2
18932: PPUSH
18933: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18937: LD_VAR 0 2
18941: PPUSH
18942: LD_INT 9
18944: PPUSH
18945: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18949: LD_INT 28
18951: PPUSH
18952: LD_OWVAR 2
18956: PPUSH
18957: LD_INT 2
18959: PPUSH
18960: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18964: LD_INT 29
18966: PPUSH
18967: LD_OWVAR 2
18971: PPUSH
18972: LD_INT 2
18974: PPUSH
18975: CALL_OW 322
// end ;
18979: PPOPN 3
18981: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18982: LD_EXP 43
18986: PUSH
18987: LD_EXP 86
18991: AND
18992: IFFALSE 19103
18994: GO 18996
18996: DISABLE
18997: LD_INT 0
18999: PPUSH
19000: PPUSH
19001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19002: LD_ADDR_VAR 0 3
19006: PUSH
19007: LD_INT 22
19009: PUSH
19010: LD_OWVAR 2
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 25
19021: PUSH
19022: LD_INT 1
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PPUSH
19033: CALL_OW 69
19037: ST_TO_ADDR
// if not tmp then
19038: LD_VAR 0 3
19042: NOT
19043: IFFALSE 19047
// exit ;
19045: GO 19103
// un := tmp [ rand ( 1 , tmp ) ] ;
19047: LD_ADDR_VAR 0 2
19051: PUSH
19052: LD_VAR 0 3
19056: PUSH
19057: LD_INT 1
19059: PPUSH
19060: LD_VAR 0 3
19064: PPUSH
19065: CALL_OW 12
19069: ARRAY
19070: ST_TO_ADDR
// if Crawls ( un ) then
19071: LD_VAR 0 2
19075: PPUSH
19076: CALL_OW 318
19080: IFFALSE 19091
// ComWalk ( un ) ;
19082: LD_VAR 0 2
19086: PPUSH
19087: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19091: LD_VAR 0 2
19095: PPUSH
19096: LD_INT 8
19098: PPUSH
19099: CALL_OW 336
// end ;
19103: PPOPN 3
19105: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19106: LD_EXP 43
19110: PUSH
19111: LD_EXP 87
19115: AND
19116: IFFALSE 19260
19118: GO 19120
19120: DISABLE
19121: LD_INT 0
19123: PPUSH
19124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19125: LD_ADDR_VAR 0 2
19129: PUSH
19130: LD_INT 22
19132: PUSH
19133: LD_OWVAR 2
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 21
19144: PUSH
19145: LD_INT 2
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 2
19154: PUSH
19155: LD_INT 34
19157: PUSH
19158: LD_INT 12
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 34
19167: PUSH
19168: LD_INT 51
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 34
19177: PUSH
19178: LD_INT 32
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: LIST
19195: PPUSH
19196: CALL_OW 69
19200: ST_TO_ADDR
// if not tmp then
19201: LD_VAR 0 2
19205: NOT
19206: IFFALSE 19210
// exit ;
19208: GO 19260
// for i in tmp do
19210: LD_ADDR_VAR 0 1
19214: PUSH
19215: LD_VAR 0 2
19219: PUSH
19220: FOR_IN
19221: IFFALSE 19258
// if GetCargo ( i , mat_artifact ) = 0 then
19223: LD_VAR 0 1
19227: PPUSH
19228: LD_INT 4
19230: PPUSH
19231: CALL_OW 289
19235: PUSH
19236: LD_INT 0
19238: EQUAL
19239: IFFALSE 19256
// SetCargo ( i , mat_siberit , 100 ) ;
19241: LD_VAR 0 1
19245: PPUSH
19246: LD_INT 3
19248: PPUSH
19249: LD_INT 100
19251: PPUSH
19252: CALL_OW 290
19256: GO 19220
19258: POP
19259: POP
// end ;
19260: PPOPN 2
19262: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19263: LD_EXP 43
19267: PUSH
19268: LD_EXP 88
19272: AND
19273: IFFALSE 19456
19275: GO 19277
19277: DISABLE
19278: LD_INT 0
19280: PPUSH
19281: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19282: LD_ADDR_VAR 0 2
19286: PUSH
19287: LD_INT 22
19289: PUSH
19290: LD_OWVAR 2
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PPUSH
19299: CALL_OW 69
19303: ST_TO_ADDR
// if not tmp then
19304: LD_VAR 0 2
19308: NOT
19309: IFFALSE 19313
// exit ;
19311: GO 19456
// for i := 1 to 2 do
19313: LD_ADDR_VAR 0 1
19317: PUSH
19318: DOUBLE
19319: LD_INT 1
19321: DEC
19322: ST_TO_ADDR
19323: LD_INT 2
19325: PUSH
19326: FOR_TO
19327: IFFALSE 19454
// begin uc_side := your_side ;
19329: LD_ADDR_OWVAR 20
19333: PUSH
19334: LD_OWVAR 2
19338: ST_TO_ADDR
// uc_nation := nation_american ;
19339: LD_ADDR_OWVAR 21
19343: PUSH
19344: LD_INT 1
19346: ST_TO_ADDR
// vc_chassis := us_morphling ;
19347: LD_ADDR_OWVAR 37
19351: PUSH
19352: LD_INT 5
19354: ST_TO_ADDR
// vc_engine := engine_siberite ;
19355: LD_ADDR_OWVAR 39
19359: PUSH
19360: LD_INT 3
19362: ST_TO_ADDR
// vc_control := control_computer ;
19363: LD_ADDR_OWVAR 38
19367: PUSH
19368: LD_INT 3
19370: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19371: LD_ADDR_OWVAR 40
19375: PUSH
19376: LD_INT 10
19378: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19379: LD_VAR 0 2
19383: PUSH
19384: LD_INT 1
19386: ARRAY
19387: PPUSH
19388: CALL_OW 310
19392: NOT
19393: IFFALSE 19440
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19395: CALL_OW 45
19399: PPUSH
19400: LD_VAR 0 2
19404: PUSH
19405: LD_INT 1
19407: ARRAY
19408: PPUSH
19409: CALL_OW 250
19413: PPUSH
19414: LD_VAR 0 2
19418: PUSH
19419: LD_INT 1
19421: ARRAY
19422: PPUSH
19423: CALL_OW 251
19427: PPUSH
19428: LD_INT 12
19430: PPUSH
19431: LD_INT 1
19433: PPUSH
19434: CALL_OW 50
19438: GO 19452
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19440: CALL_OW 45
19444: PPUSH
19445: LD_INT 1
19447: PPUSH
19448: CALL_OW 51
// end ;
19452: GO 19326
19454: POP
19455: POP
// end ;
19456: PPOPN 2
19458: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19459: LD_EXP 43
19463: PUSH
19464: LD_EXP 89
19468: AND
19469: IFFALSE 19691
19471: GO 19473
19473: DISABLE
19474: LD_INT 0
19476: PPUSH
19477: PPUSH
19478: PPUSH
19479: PPUSH
19480: PPUSH
19481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19482: LD_ADDR_VAR 0 6
19486: PUSH
19487: LD_INT 22
19489: PUSH
19490: LD_OWVAR 2
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 21
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 3
19511: PUSH
19512: LD_INT 23
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: LIST
19530: PPUSH
19531: CALL_OW 69
19535: ST_TO_ADDR
// if not tmp then
19536: LD_VAR 0 6
19540: NOT
19541: IFFALSE 19545
// exit ;
19543: GO 19691
// s1 := rand ( 1 , 4 ) ;
19545: LD_ADDR_VAR 0 2
19549: PUSH
19550: LD_INT 1
19552: PPUSH
19553: LD_INT 4
19555: PPUSH
19556: CALL_OW 12
19560: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19561: LD_ADDR_VAR 0 4
19565: PUSH
19566: LD_VAR 0 6
19570: PUSH
19571: LD_INT 1
19573: ARRAY
19574: PPUSH
19575: LD_VAR 0 2
19579: PPUSH
19580: CALL_OW 259
19584: ST_TO_ADDR
// if s1 = 1 then
19585: LD_VAR 0 2
19589: PUSH
19590: LD_INT 1
19592: EQUAL
19593: IFFALSE 19613
// s2 := rand ( 2 , 4 ) else
19595: LD_ADDR_VAR 0 3
19599: PUSH
19600: LD_INT 2
19602: PPUSH
19603: LD_INT 4
19605: PPUSH
19606: CALL_OW 12
19610: ST_TO_ADDR
19611: GO 19621
// s2 := 1 ;
19613: LD_ADDR_VAR 0 3
19617: PUSH
19618: LD_INT 1
19620: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19621: LD_ADDR_VAR 0 5
19625: PUSH
19626: LD_VAR 0 6
19630: PUSH
19631: LD_INT 1
19633: ARRAY
19634: PPUSH
19635: LD_VAR 0 3
19639: PPUSH
19640: CALL_OW 259
19644: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19645: LD_VAR 0 6
19649: PUSH
19650: LD_INT 1
19652: ARRAY
19653: PPUSH
19654: LD_VAR 0 2
19658: PPUSH
19659: LD_VAR 0 5
19663: PPUSH
19664: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19668: LD_VAR 0 6
19672: PUSH
19673: LD_INT 1
19675: ARRAY
19676: PPUSH
19677: LD_VAR 0 3
19681: PPUSH
19682: LD_VAR 0 4
19686: PPUSH
19687: CALL_OW 237
// end ;
19691: PPOPN 6
19693: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19694: LD_EXP 43
19698: PUSH
19699: LD_EXP 90
19703: AND
19704: IFFALSE 19783
19706: GO 19708
19708: DISABLE
19709: LD_INT 0
19711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19712: LD_ADDR_VAR 0 1
19716: PUSH
19717: LD_INT 22
19719: PUSH
19720: LD_OWVAR 2
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 30
19731: PUSH
19732: LD_INT 3
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PPUSH
19743: CALL_OW 69
19747: ST_TO_ADDR
// if not tmp then
19748: LD_VAR 0 1
19752: NOT
19753: IFFALSE 19757
// exit ;
19755: GO 19783
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19757: LD_VAR 0 1
19761: PUSH
19762: LD_INT 1
19764: PPUSH
19765: LD_VAR 0 1
19769: PPUSH
19770: CALL_OW 12
19774: ARRAY
19775: PPUSH
19776: LD_INT 1
19778: PPUSH
19779: CALL_OW 234
// end ;
19783: PPOPN 1
19785: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19786: LD_EXP 43
19790: PUSH
19791: LD_EXP 91
19795: AND
19796: IFFALSE 19908
19798: GO 19800
19800: DISABLE
19801: LD_INT 0
19803: PPUSH
19804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19805: LD_ADDR_VAR 0 2
19809: PUSH
19810: LD_INT 22
19812: PUSH
19813: LD_OWVAR 2
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: LD_INT 30
19827: PUSH
19828: LD_INT 27
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 30
19837: PUSH
19838: LD_INT 26
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 30
19847: PUSH
19848: LD_INT 28
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PPUSH
19865: CALL_OW 69
19869: ST_TO_ADDR
// if not tmp then
19870: LD_VAR 0 2
19874: NOT
19875: IFFALSE 19879
// exit ;
19877: GO 19908
// for i in tmp do
19879: LD_ADDR_VAR 0 1
19883: PUSH
19884: LD_VAR 0 2
19888: PUSH
19889: FOR_IN
19890: IFFALSE 19906
// SetLives ( i , 1 ) ;
19892: LD_VAR 0 1
19896: PPUSH
19897: LD_INT 1
19899: PPUSH
19900: CALL_OW 234
19904: GO 19889
19906: POP
19907: POP
// end ;
19908: PPOPN 2
19910: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19911: LD_EXP 43
19915: PUSH
19916: LD_EXP 92
19920: AND
19921: IFFALSE 20195
19923: GO 19925
19925: DISABLE
19926: LD_INT 0
19928: PPUSH
19929: PPUSH
19930: PPUSH
// begin i := rand ( 1 , 7 ) ;
19931: LD_ADDR_VAR 0 1
19935: PUSH
19936: LD_INT 1
19938: PPUSH
19939: LD_INT 7
19941: PPUSH
19942: CALL_OW 12
19946: ST_TO_ADDR
// case i of 1 :
19947: LD_VAR 0 1
19951: PUSH
19952: LD_INT 1
19954: DOUBLE
19955: EQUAL
19956: IFTRUE 19960
19958: GO 19970
19960: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19961: LD_STRING earthquake(getX(game), 0, 32)
19963: PPUSH
19964: CALL_OW 559
19968: GO 20195
19970: LD_INT 2
19972: DOUBLE
19973: EQUAL
19974: IFTRUE 19978
19976: GO 19992
19978: POP
// begin ToLua ( displayStucuk(); ) ;
19979: LD_STRING displayStucuk();
19981: PPUSH
19982: CALL_OW 559
// ResetFog ;
19986: CALL_OW 335
// end ; 3 :
19990: GO 20195
19992: LD_INT 3
19994: DOUBLE
19995: EQUAL
19996: IFTRUE 20000
19998: GO 20104
20000: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20001: LD_ADDR_VAR 0 2
20005: PUSH
20006: LD_INT 22
20008: PUSH
20009: LD_OWVAR 2
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 25
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PPUSH
20032: CALL_OW 69
20036: ST_TO_ADDR
// if not tmp then
20037: LD_VAR 0 2
20041: NOT
20042: IFFALSE 20046
// exit ;
20044: GO 20195
// un := tmp [ rand ( 1 , tmp ) ] ;
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_VAR 0 2
20055: PUSH
20056: LD_INT 1
20058: PPUSH
20059: LD_VAR 0 2
20063: PPUSH
20064: CALL_OW 12
20068: ARRAY
20069: ST_TO_ADDR
// if Crawls ( un ) then
20070: LD_VAR 0 3
20074: PPUSH
20075: CALL_OW 318
20079: IFFALSE 20090
// ComWalk ( un ) ;
20081: LD_VAR 0 3
20085: PPUSH
20086: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20090: LD_VAR 0 3
20094: PPUSH
20095: LD_INT 8
20097: PPUSH
20098: CALL_OW 336
// end ; 4 :
20102: GO 20195
20104: LD_INT 4
20106: DOUBLE
20107: EQUAL
20108: IFTRUE 20112
20110: GO 20173
20112: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20113: LD_ADDR_VAR 0 2
20117: PUSH
20118: LD_INT 22
20120: PUSH
20121: LD_OWVAR 2
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 30
20132: PUSH
20133: LD_INT 29
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PPUSH
20144: CALL_OW 69
20148: ST_TO_ADDR
// if not tmp then
20149: LD_VAR 0 2
20153: NOT
20154: IFFALSE 20158
// exit ;
20156: GO 20195
// DestroyUnit ( tmp [ 1 ] ) ;
20158: LD_VAR 0 2
20162: PUSH
20163: LD_INT 1
20165: ARRAY
20166: PPUSH
20167: CALL_OW 65
// end ; 5 .. 7 :
20171: GO 20195
20173: LD_INT 5
20175: DOUBLE
20176: GREATEREQUAL
20177: IFFALSE 20185
20179: LD_INT 7
20181: DOUBLE
20182: LESSEQUAL
20183: IFTRUE 20187
20185: GO 20194
20187: POP
// StreamSibBomb ; end ;
20188: CALL 16445 0 0
20192: GO 20195
20194: POP
// end ;
20195: PPOPN 3
20197: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20198: LD_EXP 43
20202: PUSH
20203: LD_EXP 93
20207: AND
20208: IFFALSE 20364
20210: GO 20212
20212: DISABLE
20213: LD_INT 0
20215: PPUSH
20216: PPUSH
20217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20218: LD_ADDR_VAR 0 2
20222: PUSH
20223: LD_INT 81
20225: PUSH
20226: LD_OWVAR 2
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: LD_INT 21
20240: PUSH
20241: LD_INT 1
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 21
20250: PUSH
20251: LD_INT 2
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: LIST
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PPUSH
20267: CALL_OW 69
20271: ST_TO_ADDR
// if not tmp then
20272: LD_VAR 0 2
20276: NOT
20277: IFFALSE 20281
// exit ;
20279: GO 20364
// p := 0 ;
20281: LD_ADDR_VAR 0 3
20285: PUSH
20286: LD_INT 0
20288: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20289: LD_INT 35
20291: PPUSH
20292: CALL_OW 67
// p := p + 1 ;
20296: LD_ADDR_VAR 0 3
20300: PUSH
20301: LD_VAR 0 3
20305: PUSH
20306: LD_INT 1
20308: PLUS
20309: ST_TO_ADDR
// for i in tmp do
20310: LD_ADDR_VAR 0 1
20314: PUSH
20315: LD_VAR 0 2
20319: PUSH
20320: FOR_IN
20321: IFFALSE 20352
// if GetLives ( i ) < 1000 then
20323: LD_VAR 0 1
20327: PPUSH
20328: CALL_OW 256
20332: PUSH
20333: LD_INT 1000
20335: LESS
20336: IFFALSE 20350
// SetLives ( i , 1000 ) ;
20338: LD_VAR 0 1
20342: PPUSH
20343: LD_INT 1000
20345: PPUSH
20346: CALL_OW 234
20350: GO 20320
20352: POP
20353: POP
// until p > 20 ;
20354: LD_VAR 0 3
20358: PUSH
20359: LD_INT 20
20361: GREATER
20362: IFFALSE 20289
// end ;
20364: PPOPN 3
20366: END
// every 0 0$1 trigger StreamModeActive and sTime do
20367: LD_EXP 43
20371: PUSH
20372: LD_EXP 94
20376: AND
20377: IFFALSE 20412
20379: GO 20381
20381: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20382: LD_INT 28
20384: PPUSH
20385: LD_OWVAR 2
20389: PPUSH
20390: LD_INT 2
20392: PPUSH
20393: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20397: LD_INT 30
20399: PPUSH
20400: LD_OWVAR 2
20404: PPUSH
20405: LD_INT 2
20407: PPUSH
20408: CALL_OW 322
// end ;
20412: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20413: LD_EXP 43
20417: PUSH
20418: LD_EXP 95
20422: AND
20423: IFFALSE 20544
20425: GO 20427
20427: DISABLE
20428: LD_INT 0
20430: PPUSH
20431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20432: LD_ADDR_VAR 0 2
20436: PUSH
20437: LD_INT 22
20439: PUSH
20440: LD_OWVAR 2
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 21
20451: PUSH
20452: LD_INT 1
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 3
20461: PUSH
20462: LD_INT 23
20464: PUSH
20465: LD_INT 0
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: LIST
20480: PPUSH
20481: CALL_OW 69
20485: ST_TO_ADDR
// if not tmp then
20486: LD_VAR 0 2
20490: NOT
20491: IFFALSE 20495
// exit ;
20493: GO 20544
// for i in tmp do
20495: LD_ADDR_VAR 0 1
20499: PUSH
20500: LD_VAR 0 2
20504: PUSH
20505: FOR_IN
20506: IFFALSE 20542
// begin if Crawls ( i ) then
20508: LD_VAR 0 1
20512: PPUSH
20513: CALL_OW 318
20517: IFFALSE 20528
// ComWalk ( i ) ;
20519: LD_VAR 0 1
20523: PPUSH
20524: CALL_OW 138
// SetClass ( i , 2 ) ;
20528: LD_VAR 0 1
20532: PPUSH
20533: LD_INT 2
20535: PPUSH
20536: CALL_OW 336
// end ;
20540: GO 20505
20542: POP
20543: POP
// end ;
20544: PPOPN 2
20546: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20547: LD_EXP 43
20551: PUSH
20552: LD_EXP 96
20556: AND
20557: IFFALSE 20838
20559: GO 20561
20561: DISABLE
20562: LD_INT 0
20564: PPUSH
20565: PPUSH
20566: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20567: LD_OWVAR 2
20571: PPUSH
20572: LD_INT 9
20574: PPUSH
20575: LD_INT 1
20577: PPUSH
20578: LD_INT 1
20580: PPUSH
20581: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20585: LD_INT 9
20587: PPUSH
20588: LD_OWVAR 2
20592: PPUSH
20593: CALL_OW 343
// uc_side := 9 ;
20597: LD_ADDR_OWVAR 20
20601: PUSH
20602: LD_INT 9
20604: ST_TO_ADDR
// uc_nation := 2 ;
20605: LD_ADDR_OWVAR 21
20609: PUSH
20610: LD_INT 2
20612: ST_TO_ADDR
// hc_name := Dark Warrior ;
20613: LD_ADDR_OWVAR 26
20617: PUSH
20618: LD_STRING Dark Warrior
20620: ST_TO_ADDR
// hc_gallery :=  ;
20621: LD_ADDR_OWVAR 33
20625: PUSH
20626: LD_STRING 
20628: ST_TO_ADDR
// hc_noskilllimit := true ;
20629: LD_ADDR_OWVAR 76
20633: PUSH
20634: LD_INT 1
20636: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20637: LD_ADDR_OWVAR 31
20641: PUSH
20642: LD_INT 30
20644: PUSH
20645: LD_INT 30
20647: PUSH
20648: LD_INT 30
20650: PUSH
20651: LD_INT 30
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: ST_TO_ADDR
// un := CreateHuman ;
20660: LD_ADDR_VAR 0 3
20664: PUSH
20665: CALL_OW 44
20669: ST_TO_ADDR
// hc_noskilllimit := false ;
20670: LD_ADDR_OWVAR 76
20674: PUSH
20675: LD_INT 0
20677: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20678: LD_VAR 0 3
20682: PPUSH
20683: LD_INT 1
20685: PPUSH
20686: CALL_OW 51
// p := 0 ;
20690: LD_ADDR_VAR 0 2
20694: PUSH
20695: LD_INT 0
20697: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20698: LD_INT 35
20700: PPUSH
20701: CALL_OW 67
// p := p + 1 ;
20705: LD_ADDR_VAR 0 2
20709: PUSH
20710: LD_VAR 0 2
20714: PUSH
20715: LD_INT 1
20717: PLUS
20718: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20719: LD_VAR 0 3
20723: PPUSH
20724: CALL_OW 256
20728: PUSH
20729: LD_INT 1000
20731: LESS
20732: IFFALSE 20746
// SetLives ( un , 1000 ) ;
20734: LD_VAR 0 3
20738: PPUSH
20739: LD_INT 1000
20741: PPUSH
20742: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20746: LD_VAR 0 3
20750: PPUSH
20751: LD_INT 81
20753: PUSH
20754: LD_OWVAR 2
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 91
20765: PUSH
20766: LD_VAR 0 3
20770: PUSH
20771: LD_INT 30
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: LIST
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PPUSH
20783: CALL_OW 69
20787: PPUSH
20788: LD_VAR 0 3
20792: PPUSH
20793: CALL_OW 74
20797: PPUSH
20798: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20802: LD_VAR 0 2
20806: PUSH
20807: LD_INT 60
20809: GREATER
20810: PUSH
20811: LD_VAR 0 3
20815: PPUSH
20816: CALL_OW 301
20820: OR
20821: IFFALSE 20698
// if un then
20823: LD_VAR 0 3
20827: IFFALSE 20838
// RemoveUnit ( un ) ;
20829: LD_VAR 0 3
20833: PPUSH
20834: CALL_OW 64
// end ;
20838: PPOPN 3
20840: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20841: LD_INT 0
20843: PPUSH
// case cmd of 301 :
20844: LD_VAR 0 1
20848: PUSH
20849: LD_INT 301
20851: DOUBLE
20852: EQUAL
20853: IFTRUE 20857
20855: GO 20889
20857: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20858: LD_VAR 0 6
20862: PPUSH
20863: LD_VAR 0 7
20867: PPUSH
20868: LD_VAR 0 8
20872: PPUSH
20873: LD_VAR 0 4
20877: PPUSH
20878: LD_VAR 0 5
20882: PPUSH
20883: CALL 22090 0 5
20887: GO 21010
20889: LD_INT 302
20891: DOUBLE
20892: EQUAL
20893: IFTRUE 20897
20895: GO 20934
20897: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20898: LD_VAR 0 6
20902: PPUSH
20903: LD_VAR 0 7
20907: PPUSH
20908: LD_VAR 0 8
20912: PPUSH
20913: LD_VAR 0 9
20917: PPUSH
20918: LD_VAR 0 4
20922: PPUSH
20923: LD_VAR 0 5
20927: PPUSH
20928: CALL 22181 0 6
20932: GO 21010
20934: LD_INT 303
20936: DOUBLE
20937: EQUAL
20938: IFTRUE 20942
20940: GO 20979
20942: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20943: LD_VAR 0 6
20947: PPUSH
20948: LD_VAR 0 7
20952: PPUSH
20953: LD_VAR 0 8
20957: PPUSH
20958: LD_VAR 0 9
20962: PPUSH
20963: LD_VAR 0 4
20967: PPUSH
20968: LD_VAR 0 5
20972: PPUSH
20973: CALL 21015 0 6
20977: GO 21010
20979: LD_INT 304
20981: DOUBLE
20982: EQUAL
20983: IFTRUE 20987
20985: GO 21009
20987: POP
// hHackTeleport ( unit , x , y ) ; end ;
20988: LD_VAR 0 2
20992: PPUSH
20993: LD_VAR 0 4
20997: PPUSH
20998: LD_VAR 0 5
21002: PPUSH
21003: CALL 22774 0 3
21007: GO 21010
21009: POP
// end ;
21010: LD_VAR 0 12
21014: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21015: LD_INT 0
21017: PPUSH
21018: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21019: LD_VAR 0 1
21023: PUSH
21024: LD_INT 1
21026: LESS
21027: PUSH
21028: LD_VAR 0 1
21032: PUSH
21033: LD_INT 3
21035: GREATER
21036: OR
21037: PUSH
21038: LD_VAR 0 5
21042: PPUSH
21043: LD_VAR 0 6
21047: PPUSH
21048: CALL_OW 428
21052: OR
21053: IFFALSE 21057
// exit ;
21055: GO 21777
// uc_side := your_side ;
21057: LD_ADDR_OWVAR 20
21061: PUSH
21062: LD_OWVAR 2
21066: ST_TO_ADDR
// uc_nation := nation ;
21067: LD_ADDR_OWVAR 21
21071: PUSH
21072: LD_VAR 0 1
21076: ST_TO_ADDR
// bc_level = 1 ;
21077: LD_ADDR_OWVAR 43
21081: PUSH
21082: LD_INT 1
21084: ST_TO_ADDR
// case btype of 1 :
21085: LD_VAR 0 2
21089: PUSH
21090: LD_INT 1
21092: DOUBLE
21093: EQUAL
21094: IFTRUE 21098
21096: GO 21109
21098: POP
// bc_type := b_depot ; 2 :
21099: LD_ADDR_OWVAR 42
21103: PUSH
21104: LD_INT 0
21106: ST_TO_ADDR
21107: GO 21721
21109: LD_INT 2
21111: DOUBLE
21112: EQUAL
21113: IFTRUE 21117
21115: GO 21128
21117: POP
// bc_type := b_warehouse ; 3 :
21118: LD_ADDR_OWVAR 42
21122: PUSH
21123: LD_INT 1
21125: ST_TO_ADDR
21126: GO 21721
21128: LD_INT 3
21130: DOUBLE
21131: EQUAL
21132: IFTRUE 21136
21134: GO 21147
21136: POP
// bc_type := b_lab ; 4 .. 9 :
21137: LD_ADDR_OWVAR 42
21141: PUSH
21142: LD_INT 6
21144: ST_TO_ADDR
21145: GO 21721
21147: LD_INT 4
21149: DOUBLE
21150: GREATEREQUAL
21151: IFFALSE 21159
21153: LD_INT 9
21155: DOUBLE
21156: LESSEQUAL
21157: IFTRUE 21161
21159: GO 21213
21161: POP
// begin bc_type := b_lab_half ;
21162: LD_ADDR_OWVAR 42
21166: PUSH
21167: LD_INT 7
21169: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21170: LD_ADDR_OWVAR 44
21174: PUSH
21175: LD_INT 10
21177: PUSH
21178: LD_INT 11
21180: PUSH
21181: LD_INT 12
21183: PUSH
21184: LD_INT 15
21186: PUSH
21187: LD_INT 14
21189: PUSH
21190: LD_INT 13
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: PUSH
21201: LD_VAR 0 2
21205: PUSH
21206: LD_INT 3
21208: MINUS
21209: ARRAY
21210: ST_TO_ADDR
// end ; 10 .. 13 :
21211: GO 21721
21213: LD_INT 10
21215: DOUBLE
21216: GREATEREQUAL
21217: IFFALSE 21225
21219: LD_INT 13
21221: DOUBLE
21222: LESSEQUAL
21223: IFTRUE 21227
21225: GO 21304
21227: POP
// begin bc_type := b_lab_full ;
21228: LD_ADDR_OWVAR 42
21232: PUSH
21233: LD_INT 8
21235: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21236: LD_ADDR_OWVAR 44
21240: PUSH
21241: LD_INT 10
21243: PUSH
21244: LD_INT 12
21246: PUSH
21247: LD_INT 14
21249: PUSH
21250: LD_INT 13
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: PUSH
21259: LD_VAR 0 2
21263: PUSH
21264: LD_INT 9
21266: MINUS
21267: ARRAY
21268: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21269: LD_ADDR_OWVAR 45
21273: PUSH
21274: LD_INT 11
21276: PUSH
21277: LD_INT 15
21279: PUSH
21280: LD_INT 12
21282: PUSH
21283: LD_INT 15
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: PUSH
21292: LD_VAR 0 2
21296: PUSH
21297: LD_INT 9
21299: MINUS
21300: ARRAY
21301: ST_TO_ADDR
// end ; 14 :
21302: GO 21721
21304: LD_INT 14
21306: DOUBLE
21307: EQUAL
21308: IFTRUE 21312
21310: GO 21323
21312: POP
// bc_type := b_workshop ; 15 :
21313: LD_ADDR_OWVAR 42
21317: PUSH
21318: LD_INT 2
21320: ST_TO_ADDR
21321: GO 21721
21323: LD_INT 15
21325: DOUBLE
21326: EQUAL
21327: IFTRUE 21331
21329: GO 21342
21331: POP
// bc_type := b_factory ; 16 :
21332: LD_ADDR_OWVAR 42
21336: PUSH
21337: LD_INT 3
21339: ST_TO_ADDR
21340: GO 21721
21342: LD_INT 16
21344: DOUBLE
21345: EQUAL
21346: IFTRUE 21350
21348: GO 21361
21350: POP
// bc_type := b_ext_gun ; 17 :
21351: LD_ADDR_OWVAR 42
21355: PUSH
21356: LD_INT 17
21358: ST_TO_ADDR
21359: GO 21721
21361: LD_INT 17
21363: DOUBLE
21364: EQUAL
21365: IFTRUE 21369
21367: GO 21397
21369: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21370: LD_ADDR_OWVAR 42
21374: PUSH
21375: LD_INT 19
21377: PUSH
21378: LD_INT 23
21380: PUSH
21381: LD_INT 19
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: LIST
21388: PUSH
21389: LD_VAR 0 1
21393: ARRAY
21394: ST_TO_ADDR
21395: GO 21721
21397: LD_INT 18
21399: DOUBLE
21400: EQUAL
21401: IFTRUE 21405
21403: GO 21416
21405: POP
// bc_type := b_ext_radar ; 19 :
21406: LD_ADDR_OWVAR 42
21410: PUSH
21411: LD_INT 20
21413: ST_TO_ADDR
21414: GO 21721
21416: LD_INT 19
21418: DOUBLE
21419: EQUAL
21420: IFTRUE 21424
21422: GO 21435
21424: POP
// bc_type := b_ext_radio ; 20 :
21425: LD_ADDR_OWVAR 42
21429: PUSH
21430: LD_INT 22
21432: ST_TO_ADDR
21433: GO 21721
21435: LD_INT 20
21437: DOUBLE
21438: EQUAL
21439: IFTRUE 21443
21441: GO 21454
21443: POP
// bc_type := b_ext_siberium ; 21 :
21444: LD_ADDR_OWVAR 42
21448: PUSH
21449: LD_INT 21
21451: ST_TO_ADDR
21452: GO 21721
21454: LD_INT 21
21456: DOUBLE
21457: EQUAL
21458: IFTRUE 21462
21460: GO 21473
21462: POP
// bc_type := b_ext_computer ; 22 :
21463: LD_ADDR_OWVAR 42
21467: PUSH
21468: LD_INT 24
21470: ST_TO_ADDR
21471: GO 21721
21473: LD_INT 22
21475: DOUBLE
21476: EQUAL
21477: IFTRUE 21481
21479: GO 21492
21481: POP
// bc_type := b_ext_track ; 23 :
21482: LD_ADDR_OWVAR 42
21486: PUSH
21487: LD_INT 16
21489: ST_TO_ADDR
21490: GO 21721
21492: LD_INT 23
21494: DOUBLE
21495: EQUAL
21496: IFTRUE 21500
21498: GO 21511
21500: POP
// bc_type := b_ext_laser ; 24 :
21501: LD_ADDR_OWVAR 42
21505: PUSH
21506: LD_INT 25
21508: ST_TO_ADDR
21509: GO 21721
21511: LD_INT 24
21513: DOUBLE
21514: EQUAL
21515: IFTRUE 21519
21517: GO 21530
21519: POP
// bc_type := b_control_tower ; 25 :
21520: LD_ADDR_OWVAR 42
21524: PUSH
21525: LD_INT 36
21527: ST_TO_ADDR
21528: GO 21721
21530: LD_INT 25
21532: DOUBLE
21533: EQUAL
21534: IFTRUE 21538
21536: GO 21549
21538: POP
// bc_type := b_breastwork ; 26 :
21539: LD_ADDR_OWVAR 42
21543: PUSH
21544: LD_INT 31
21546: ST_TO_ADDR
21547: GO 21721
21549: LD_INT 26
21551: DOUBLE
21552: EQUAL
21553: IFTRUE 21557
21555: GO 21568
21557: POP
// bc_type := b_bunker ; 27 :
21558: LD_ADDR_OWVAR 42
21562: PUSH
21563: LD_INT 32
21565: ST_TO_ADDR
21566: GO 21721
21568: LD_INT 27
21570: DOUBLE
21571: EQUAL
21572: IFTRUE 21576
21574: GO 21587
21576: POP
// bc_type := b_turret ; 28 :
21577: LD_ADDR_OWVAR 42
21581: PUSH
21582: LD_INT 33
21584: ST_TO_ADDR
21585: GO 21721
21587: LD_INT 28
21589: DOUBLE
21590: EQUAL
21591: IFTRUE 21595
21593: GO 21606
21595: POP
// bc_type := b_armoury ; 29 :
21596: LD_ADDR_OWVAR 42
21600: PUSH
21601: LD_INT 4
21603: ST_TO_ADDR
21604: GO 21721
21606: LD_INT 29
21608: DOUBLE
21609: EQUAL
21610: IFTRUE 21614
21612: GO 21625
21614: POP
// bc_type := b_barracks ; 30 :
21615: LD_ADDR_OWVAR 42
21619: PUSH
21620: LD_INT 5
21622: ST_TO_ADDR
21623: GO 21721
21625: LD_INT 30
21627: DOUBLE
21628: EQUAL
21629: IFTRUE 21633
21631: GO 21644
21633: POP
// bc_type := b_solar_power ; 31 :
21634: LD_ADDR_OWVAR 42
21638: PUSH
21639: LD_INT 27
21641: ST_TO_ADDR
21642: GO 21721
21644: LD_INT 31
21646: DOUBLE
21647: EQUAL
21648: IFTRUE 21652
21650: GO 21663
21652: POP
// bc_type := b_oil_power ; 32 :
21653: LD_ADDR_OWVAR 42
21657: PUSH
21658: LD_INT 26
21660: ST_TO_ADDR
21661: GO 21721
21663: LD_INT 32
21665: DOUBLE
21666: EQUAL
21667: IFTRUE 21671
21669: GO 21682
21671: POP
// bc_type := b_siberite_power ; 33 :
21672: LD_ADDR_OWVAR 42
21676: PUSH
21677: LD_INT 28
21679: ST_TO_ADDR
21680: GO 21721
21682: LD_INT 33
21684: DOUBLE
21685: EQUAL
21686: IFTRUE 21690
21688: GO 21701
21690: POP
// bc_type := b_oil_mine ; 34 :
21691: LD_ADDR_OWVAR 42
21695: PUSH
21696: LD_INT 29
21698: ST_TO_ADDR
21699: GO 21721
21701: LD_INT 34
21703: DOUBLE
21704: EQUAL
21705: IFTRUE 21709
21707: GO 21720
21709: POP
// bc_type := b_siberite_mine ; end ;
21710: LD_ADDR_OWVAR 42
21714: PUSH
21715: LD_INT 30
21717: ST_TO_ADDR
21718: GO 21721
21720: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21721: LD_ADDR_VAR 0 8
21725: PUSH
21726: LD_VAR 0 5
21730: PPUSH
21731: LD_VAR 0 6
21735: PPUSH
21736: LD_VAR 0 3
21740: PPUSH
21741: CALL_OW 47
21745: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21746: LD_OWVAR 42
21750: PUSH
21751: LD_INT 32
21753: PUSH
21754: LD_INT 33
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: IN
21761: IFFALSE 21777
// PlaceWeaponTurret ( b , weapon ) ;
21763: LD_VAR 0 8
21767: PPUSH
21768: LD_VAR 0 4
21772: PPUSH
21773: CALL_OW 431
// end ;
21777: LD_VAR 0 7
21781: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21782: LD_INT 0
21784: PPUSH
21785: PPUSH
21786: PPUSH
21787: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21788: LD_ADDR_VAR 0 4
21792: PUSH
21793: LD_INT 22
21795: PUSH
21796: LD_OWVAR 2
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 2
21807: PUSH
21808: LD_INT 30
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 30
21820: PUSH
21821: LD_INT 1
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: LIST
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PPUSH
21837: CALL_OW 69
21841: ST_TO_ADDR
// if not tmp then
21842: LD_VAR 0 4
21846: NOT
21847: IFFALSE 21851
// exit ;
21849: GO 21910
// for i in tmp do
21851: LD_ADDR_VAR 0 2
21855: PUSH
21856: LD_VAR 0 4
21860: PUSH
21861: FOR_IN
21862: IFFALSE 21908
// for j = 1 to 3 do
21864: LD_ADDR_VAR 0 3
21868: PUSH
21869: DOUBLE
21870: LD_INT 1
21872: DEC
21873: ST_TO_ADDR
21874: LD_INT 3
21876: PUSH
21877: FOR_TO
21878: IFFALSE 21904
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21880: LD_VAR 0 2
21884: PPUSH
21885: CALL_OW 274
21889: PPUSH
21890: LD_VAR 0 3
21894: PPUSH
21895: LD_INT 99999
21897: PPUSH
21898: CALL_OW 277
21902: GO 21877
21904: POP
21905: POP
21906: GO 21861
21908: POP
21909: POP
// end ;
21910: LD_VAR 0 1
21914: RET
// export function hHackSetLevel10 ; var i , j ; begin
21915: LD_INT 0
21917: PPUSH
21918: PPUSH
21919: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21920: LD_ADDR_VAR 0 2
21924: PUSH
21925: LD_INT 21
21927: PUSH
21928: LD_INT 1
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PPUSH
21935: CALL_OW 69
21939: PUSH
21940: FOR_IN
21941: IFFALSE 21993
// if IsSelected ( i ) then
21943: LD_VAR 0 2
21947: PPUSH
21948: CALL_OW 306
21952: IFFALSE 21991
// begin for j := 1 to 4 do
21954: LD_ADDR_VAR 0 3
21958: PUSH
21959: DOUBLE
21960: LD_INT 1
21962: DEC
21963: ST_TO_ADDR
21964: LD_INT 4
21966: PUSH
21967: FOR_TO
21968: IFFALSE 21989
// SetSkill ( i , j , 10 ) ;
21970: LD_VAR 0 2
21974: PPUSH
21975: LD_VAR 0 3
21979: PPUSH
21980: LD_INT 10
21982: PPUSH
21983: CALL_OW 237
21987: GO 21967
21989: POP
21990: POP
// end ;
21991: GO 21940
21993: POP
21994: POP
// end ;
21995: LD_VAR 0 1
21999: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22000: LD_INT 0
22002: PPUSH
22003: PPUSH
22004: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22005: LD_ADDR_VAR 0 2
22009: PUSH
22010: LD_INT 22
22012: PUSH
22013: LD_OWVAR 2
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 21
22024: PUSH
22025: LD_INT 1
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PPUSH
22036: CALL_OW 69
22040: PUSH
22041: FOR_IN
22042: IFFALSE 22083
// begin for j := 1 to 4 do
22044: LD_ADDR_VAR 0 3
22048: PUSH
22049: DOUBLE
22050: LD_INT 1
22052: DEC
22053: ST_TO_ADDR
22054: LD_INT 4
22056: PUSH
22057: FOR_TO
22058: IFFALSE 22079
// SetSkill ( i , j , 10 ) ;
22060: LD_VAR 0 2
22064: PPUSH
22065: LD_VAR 0 3
22069: PPUSH
22070: LD_INT 10
22072: PPUSH
22073: CALL_OW 237
22077: GO 22057
22079: POP
22080: POP
// end ;
22081: GO 22041
22083: POP
22084: POP
// end ;
22085: LD_VAR 0 1
22089: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22090: LD_INT 0
22092: PPUSH
// uc_side := your_side ;
22093: LD_ADDR_OWVAR 20
22097: PUSH
22098: LD_OWVAR 2
22102: ST_TO_ADDR
// uc_nation := nation ;
22103: LD_ADDR_OWVAR 21
22107: PUSH
22108: LD_VAR 0 1
22112: ST_TO_ADDR
// InitHc ;
22113: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22117: LD_INT 0
22119: PPUSH
22120: LD_VAR 0 2
22124: PPUSH
22125: LD_VAR 0 3
22129: PPUSH
22130: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22134: LD_VAR 0 4
22138: PPUSH
22139: LD_VAR 0 5
22143: PPUSH
22144: CALL_OW 428
22148: PUSH
22149: LD_INT 0
22151: EQUAL
22152: IFFALSE 22176
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22154: CALL_OW 44
22158: PPUSH
22159: LD_VAR 0 4
22163: PPUSH
22164: LD_VAR 0 5
22168: PPUSH
22169: LD_INT 1
22171: PPUSH
22172: CALL_OW 48
// end ;
22176: LD_VAR 0 6
22180: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22181: LD_INT 0
22183: PPUSH
22184: PPUSH
// uc_side := your_side ;
22185: LD_ADDR_OWVAR 20
22189: PUSH
22190: LD_OWVAR 2
22194: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22195: LD_VAR 0 1
22199: PUSH
22200: LD_INT 1
22202: PUSH
22203: LD_INT 2
22205: PUSH
22206: LD_INT 3
22208: PUSH
22209: LD_INT 4
22211: PUSH
22212: LD_INT 5
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: IN
22222: IFFALSE 22234
// uc_nation := nation_american else
22224: LD_ADDR_OWVAR 21
22228: PUSH
22229: LD_INT 1
22231: ST_TO_ADDR
22232: GO 22277
// if chassis in [ 11 , 12 , 13 , 14 ] then
22234: LD_VAR 0 1
22238: PUSH
22239: LD_INT 11
22241: PUSH
22242: LD_INT 12
22244: PUSH
22245: LD_INT 13
22247: PUSH
22248: LD_INT 14
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: IN
22257: IFFALSE 22269
// uc_nation := nation_arabian else
22259: LD_ADDR_OWVAR 21
22263: PUSH
22264: LD_INT 2
22266: ST_TO_ADDR
22267: GO 22277
// uc_nation := nation_russian ;
22269: LD_ADDR_OWVAR 21
22273: PUSH
22274: LD_INT 3
22276: ST_TO_ADDR
// vc_chassis := chassis ;
22277: LD_ADDR_OWVAR 37
22281: PUSH
22282: LD_VAR 0 1
22286: ST_TO_ADDR
// vc_engine := engine ;
22287: LD_ADDR_OWVAR 39
22291: PUSH
22292: LD_VAR 0 2
22296: ST_TO_ADDR
// vc_control := control ;
22297: LD_ADDR_OWVAR 38
22301: PUSH
22302: LD_VAR 0 3
22306: ST_TO_ADDR
// vc_weapon := weapon ;
22307: LD_ADDR_OWVAR 40
22311: PUSH
22312: LD_VAR 0 4
22316: ST_TO_ADDR
// un := CreateVehicle ;
22317: LD_ADDR_VAR 0 8
22321: PUSH
22322: CALL_OW 45
22326: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22327: LD_VAR 0 8
22331: PPUSH
22332: LD_INT 0
22334: PPUSH
22335: LD_INT 5
22337: PPUSH
22338: CALL_OW 12
22342: PPUSH
22343: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22347: LD_VAR 0 8
22351: PPUSH
22352: LD_VAR 0 5
22356: PPUSH
22357: LD_VAR 0 6
22361: PPUSH
22362: LD_INT 1
22364: PPUSH
22365: CALL_OW 48
// end ;
22369: LD_VAR 0 7
22373: RET
// export hInvincible ; every 1 do
22374: GO 22376
22376: DISABLE
// hInvincible := [ ] ;
22377: LD_ADDR_EXP 97
22381: PUSH
22382: EMPTY
22383: ST_TO_ADDR
22384: END
// every 10 do var i ;
22385: GO 22387
22387: DISABLE
22388: LD_INT 0
22390: PPUSH
// begin enable ;
22391: ENABLE
// if not hInvincible then
22392: LD_EXP 97
22396: NOT
22397: IFFALSE 22401
// exit ;
22399: GO 22445
// for i in hInvincible do
22401: LD_ADDR_VAR 0 1
22405: PUSH
22406: LD_EXP 97
22410: PUSH
22411: FOR_IN
22412: IFFALSE 22443
// if GetLives ( i ) < 1000 then
22414: LD_VAR 0 1
22418: PPUSH
22419: CALL_OW 256
22423: PUSH
22424: LD_INT 1000
22426: LESS
22427: IFFALSE 22441
// SetLives ( i , 1000 ) ;
22429: LD_VAR 0 1
22433: PPUSH
22434: LD_INT 1000
22436: PPUSH
22437: CALL_OW 234
22441: GO 22411
22443: POP
22444: POP
// end ;
22445: PPOPN 1
22447: END
// export function hHackInvincible ; var i ; begin
22448: LD_INT 0
22450: PPUSH
22451: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22452: LD_ADDR_VAR 0 2
22456: PUSH
22457: LD_INT 2
22459: PUSH
22460: LD_INT 21
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 21
22472: PUSH
22473: LD_INT 2
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: PPUSH
22485: CALL_OW 69
22489: PUSH
22490: FOR_IN
22491: IFFALSE 22552
// if IsSelected ( i ) then
22493: LD_VAR 0 2
22497: PPUSH
22498: CALL_OW 306
22502: IFFALSE 22550
// begin if i in hInvincible then
22504: LD_VAR 0 2
22508: PUSH
22509: LD_EXP 97
22513: IN
22514: IFFALSE 22534
// hInvincible := hInvincible diff i else
22516: LD_ADDR_EXP 97
22520: PUSH
22521: LD_EXP 97
22525: PUSH
22526: LD_VAR 0 2
22530: DIFF
22531: ST_TO_ADDR
22532: GO 22550
// hInvincible := hInvincible union i ;
22534: LD_ADDR_EXP 97
22538: PUSH
22539: LD_EXP 97
22543: PUSH
22544: LD_VAR 0 2
22548: UNION
22549: ST_TO_ADDR
// end ;
22550: GO 22490
22552: POP
22553: POP
// end ;
22554: LD_VAR 0 1
22558: RET
// export function hHackInvisible ; var i , j ; begin
22559: LD_INT 0
22561: PPUSH
22562: PPUSH
22563: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22564: LD_ADDR_VAR 0 2
22568: PUSH
22569: LD_INT 21
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PPUSH
22579: CALL_OW 69
22583: PUSH
22584: FOR_IN
22585: IFFALSE 22609
// if IsSelected ( i ) then
22587: LD_VAR 0 2
22591: PPUSH
22592: CALL_OW 306
22596: IFFALSE 22607
// ComForceInvisible ( i ) ;
22598: LD_VAR 0 2
22602: PPUSH
22603: CALL_OW 496
22607: GO 22584
22609: POP
22610: POP
// end ;
22611: LD_VAR 0 1
22615: RET
// export function hHackChangeYourSide ; begin
22616: LD_INT 0
22618: PPUSH
// if your_side = 8 then
22619: LD_OWVAR 2
22623: PUSH
22624: LD_INT 8
22626: EQUAL
22627: IFFALSE 22639
// your_side := 0 else
22629: LD_ADDR_OWVAR 2
22633: PUSH
22634: LD_INT 0
22636: ST_TO_ADDR
22637: GO 22653
// your_side := your_side + 1 ;
22639: LD_ADDR_OWVAR 2
22643: PUSH
22644: LD_OWVAR 2
22648: PUSH
22649: LD_INT 1
22651: PLUS
22652: ST_TO_ADDR
// end ;
22653: LD_VAR 0 1
22657: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22658: LD_INT 0
22660: PPUSH
22661: PPUSH
22662: PPUSH
// for i in all_units do
22663: LD_ADDR_VAR 0 2
22667: PUSH
22668: LD_OWVAR 3
22672: PUSH
22673: FOR_IN
22674: IFFALSE 22752
// if IsSelected ( i ) then
22676: LD_VAR 0 2
22680: PPUSH
22681: CALL_OW 306
22685: IFFALSE 22750
// begin j := GetSide ( i ) ;
22687: LD_ADDR_VAR 0 3
22691: PUSH
22692: LD_VAR 0 2
22696: PPUSH
22697: CALL_OW 255
22701: ST_TO_ADDR
// if j = 8 then
22702: LD_VAR 0 3
22706: PUSH
22707: LD_INT 8
22709: EQUAL
22710: IFFALSE 22722
// j := 0 else
22712: LD_ADDR_VAR 0 3
22716: PUSH
22717: LD_INT 0
22719: ST_TO_ADDR
22720: GO 22736
// j := j + 1 ;
22722: LD_ADDR_VAR 0 3
22726: PUSH
22727: LD_VAR 0 3
22731: PUSH
22732: LD_INT 1
22734: PLUS
22735: ST_TO_ADDR
// SetSide ( i , j ) ;
22736: LD_VAR 0 2
22740: PPUSH
22741: LD_VAR 0 3
22745: PPUSH
22746: CALL_OW 235
// end ;
22750: GO 22673
22752: POP
22753: POP
// end ;
22754: LD_VAR 0 1
22758: RET
// export function hHackFog ; begin
22759: LD_INT 0
22761: PPUSH
// FogOff ( true ) ;
22762: LD_INT 1
22764: PPUSH
22765: CALL_OW 344
// end ;
22769: LD_VAR 0 1
22773: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22774: LD_INT 0
22776: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22777: LD_VAR 0 1
22781: PPUSH
22782: LD_VAR 0 2
22786: PPUSH
22787: LD_VAR 0 3
22791: PPUSH
22792: LD_INT 1
22794: PPUSH
22795: LD_INT 1
22797: PPUSH
22798: CALL_OW 483
// CenterOnXY ( x , y ) ;
22802: LD_VAR 0 2
22806: PPUSH
22807: LD_VAR 0 3
22811: PPUSH
22812: CALL_OW 84
// end ; end_of_file
22816: LD_VAR 0 4
22820: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22821: LD_VAR 0 1
22825: PUSH
22826: LD_INT 200
22828: DOUBLE
22829: GREATEREQUAL
22830: IFFALSE 22838
22832: LD_INT 299
22834: DOUBLE
22835: LESSEQUAL
22836: IFTRUE 22840
22838: GO 22872
22840: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; end ;
22841: LD_VAR 0 1
22845: PPUSH
22846: LD_VAR 0 2
22850: PPUSH
22851: LD_VAR 0 3
22855: PPUSH
22856: LD_VAR 0 4
22860: PPUSH
22861: LD_VAR 0 5
22865: PPUSH
22866: CALL 23008 0 5
22870: GO 22873
22872: POP
// end ; end_of_file
22873: PPOPN 11
22875: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22876: LD_INT 0
22878: PPUSH
22879: PPUSH
22880: PPUSH
22881: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22882: LD_VAR 0 1
22886: PPUSH
22887: CALL_OW 264
22891: PUSH
22892: LD_EXP 114
22896: EQUAL
22897: IFFALSE 22969
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22899: LD_INT 68
22901: PPUSH
22902: LD_VAR 0 1
22906: PPUSH
22907: CALL_OW 255
22911: PPUSH
22912: CALL_OW 321
22916: PUSH
22917: LD_INT 2
22919: EQUAL
22920: IFFALSE 22932
// eff := 70 else
22922: LD_ADDR_VAR 0 4
22926: PUSH
22927: LD_INT 70
22929: ST_TO_ADDR
22930: GO 22940
// eff := 30 ;
22932: LD_ADDR_VAR 0 4
22936: PUSH
22937: LD_INT 30
22939: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22940: LD_VAR 0 1
22944: PPUSH
22945: CALL_OW 250
22949: PPUSH
22950: LD_VAR 0 1
22954: PPUSH
22955: CALL_OW 251
22959: PPUSH
22960: LD_VAR 0 4
22964: PPUSH
22965: CALL_OW 495
// end ; end ;
22969: LD_VAR 0 2
22973: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22974: LD_INT 0
22976: PPUSH
// end ;
22977: LD_VAR 0 4
22981: RET
// export function SOS_Command ( cmd ) ; begin
22982: LD_INT 0
22984: PPUSH
// end ;
22985: LD_VAR 0 2
22989: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22990: LD_INT 0
22992: PPUSH
// if cmd = 121 then
22993: LD_VAR 0 1
22997: PUSH
22998: LD_INT 121
23000: EQUAL
23001: IFFALSE 23003
// end ;
23003: LD_VAR 0 6
23007: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23008: LD_INT 0
23010: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23011: LD_VAR 0 1
23015: PUSH
23016: LD_INT 250
23018: EQUAL
23019: PUSH
23020: LD_VAR 0 2
23024: PPUSH
23025: CALL_OW 264
23029: PUSH
23030: LD_EXP 117
23034: EQUAL
23035: AND
23036: IFFALSE 23057
// MinerPlaceMine ( unit , x , y ) ;
23038: LD_VAR 0 2
23042: PPUSH
23043: LD_VAR 0 4
23047: PPUSH
23048: LD_VAR 0 5
23052: PPUSH
23053: CALL 25406 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23057: LD_VAR 0 1
23061: PUSH
23062: LD_INT 251
23064: EQUAL
23065: PUSH
23066: LD_VAR 0 2
23070: PPUSH
23071: CALL_OW 264
23075: PUSH
23076: LD_EXP 117
23080: EQUAL
23081: AND
23082: IFFALSE 23103
// MinerDetonateMine ( unit , x , y ) ;
23084: LD_VAR 0 2
23088: PPUSH
23089: LD_VAR 0 4
23093: PPUSH
23094: LD_VAR 0 5
23098: PPUSH
23099: CALL 25683 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23103: LD_VAR 0 1
23107: PUSH
23108: LD_INT 252
23110: EQUAL
23111: PUSH
23112: LD_VAR 0 2
23116: PPUSH
23117: CALL_OW 264
23121: PUSH
23122: LD_EXP 117
23126: EQUAL
23127: AND
23128: IFFALSE 23149
// MinerCreateMinefield ( unit , x , y ) ;
23130: LD_VAR 0 2
23134: PPUSH
23135: LD_VAR 0 4
23139: PPUSH
23140: LD_VAR 0 5
23144: PPUSH
23145: CALL 26100 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23149: LD_VAR 0 1
23153: PUSH
23154: LD_INT 253
23156: EQUAL
23157: PUSH
23158: LD_VAR 0 2
23162: PPUSH
23163: CALL_OW 257
23167: PUSH
23168: LD_INT 5
23170: EQUAL
23171: AND
23172: IFFALSE 23193
// ComBinocular ( unit , x , y ) ;
23174: LD_VAR 0 2
23178: PPUSH
23179: LD_VAR 0 4
23183: PPUSH
23184: LD_VAR 0 5
23188: PPUSH
23189: CALL 26471 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23193: LD_VAR 0 1
23197: PUSH
23198: LD_INT 254
23200: EQUAL
23201: PUSH
23202: LD_VAR 0 2
23206: PPUSH
23207: CALL_OW 264
23211: PUSH
23212: LD_EXP 112
23216: EQUAL
23217: AND
23218: PUSH
23219: LD_VAR 0 3
23223: PPUSH
23224: CALL_OW 263
23228: PUSH
23229: LD_INT 3
23231: EQUAL
23232: AND
23233: IFFALSE 23249
// HackDestroyVehicle ( unit , selectedUnit ) ;
23235: LD_VAR 0 2
23239: PPUSH
23240: LD_VAR 0 3
23244: PPUSH
23245: CALL 24766 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23249: LD_VAR 0 1
23253: PUSH
23254: LD_INT 255
23256: EQUAL
23257: PUSH
23258: LD_VAR 0 2
23262: PPUSH
23263: CALL_OW 264
23267: PUSH
23268: LD_INT 14
23270: PUSH
23271: LD_INT 53
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: IN
23278: AND
23279: PUSH
23280: LD_VAR 0 4
23284: PPUSH
23285: LD_VAR 0 5
23289: PPUSH
23290: CALL_OW 488
23294: AND
23295: IFFALSE 23319
// CutTreeXYR ( unit , x , y , 12 ) ;
23297: LD_VAR 0 2
23301: PPUSH
23302: LD_VAR 0 4
23306: PPUSH
23307: LD_VAR 0 5
23311: PPUSH
23312: LD_INT 12
23314: PPUSH
23315: CALL 23332 0 4
// end ;
23319: LD_VAR 0 6
23323: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
23324: LD_INT 0
23326: PPUSH
// end ;
23327: LD_VAR 0 4
23331: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23332: LD_INT 0
23334: PPUSH
23335: PPUSH
23336: PPUSH
23337: PPUSH
23338: PPUSH
23339: PPUSH
23340: PPUSH
23341: PPUSH
23342: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23343: LD_VAR 0 1
23347: NOT
23348: PUSH
23349: LD_VAR 0 2
23353: PPUSH
23354: LD_VAR 0 3
23358: PPUSH
23359: CALL_OW 488
23363: NOT
23364: OR
23365: PUSH
23366: LD_VAR 0 4
23370: NOT
23371: OR
23372: IFFALSE 23376
// exit ;
23374: GO 23716
// list := [ ] ;
23376: LD_ADDR_VAR 0 13
23380: PUSH
23381: EMPTY
23382: ST_TO_ADDR
// if x - r < 0 then
23383: LD_VAR 0 2
23387: PUSH
23388: LD_VAR 0 4
23392: MINUS
23393: PUSH
23394: LD_INT 0
23396: LESS
23397: IFFALSE 23409
// min_x := 0 else
23399: LD_ADDR_VAR 0 7
23403: PUSH
23404: LD_INT 0
23406: ST_TO_ADDR
23407: GO 23425
// min_x := x - r ;
23409: LD_ADDR_VAR 0 7
23413: PUSH
23414: LD_VAR 0 2
23418: PUSH
23419: LD_VAR 0 4
23423: MINUS
23424: ST_TO_ADDR
// if y - r < 0 then
23425: LD_VAR 0 3
23429: PUSH
23430: LD_VAR 0 4
23434: MINUS
23435: PUSH
23436: LD_INT 0
23438: LESS
23439: IFFALSE 23451
// min_y := 0 else
23441: LD_ADDR_VAR 0 8
23445: PUSH
23446: LD_INT 0
23448: ST_TO_ADDR
23449: GO 23467
// min_y := y - r ;
23451: LD_ADDR_VAR 0 8
23455: PUSH
23456: LD_VAR 0 3
23460: PUSH
23461: LD_VAR 0 4
23465: MINUS
23466: ST_TO_ADDR
// max_x := x + r ;
23467: LD_ADDR_VAR 0 9
23471: PUSH
23472: LD_VAR 0 2
23476: PUSH
23477: LD_VAR 0 4
23481: PLUS
23482: ST_TO_ADDR
// max_y := y + r ;
23483: LD_ADDR_VAR 0 10
23487: PUSH
23488: LD_VAR 0 3
23492: PUSH
23493: LD_VAR 0 4
23497: PLUS
23498: ST_TO_ADDR
// for _x = min_x to max_x do
23499: LD_ADDR_VAR 0 11
23503: PUSH
23504: DOUBLE
23505: LD_VAR 0 7
23509: DEC
23510: ST_TO_ADDR
23511: LD_VAR 0 9
23515: PUSH
23516: FOR_TO
23517: IFFALSE 23634
// for _y = min_y to max_y do
23519: LD_ADDR_VAR 0 12
23523: PUSH
23524: DOUBLE
23525: LD_VAR 0 8
23529: DEC
23530: ST_TO_ADDR
23531: LD_VAR 0 10
23535: PUSH
23536: FOR_TO
23537: IFFALSE 23630
// begin if not ValidHex ( _x , _y ) then
23539: LD_VAR 0 11
23543: PPUSH
23544: LD_VAR 0 12
23548: PPUSH
23549: CALL_OW 488
23553: NOT
23554: IFFALSE 23558
// continue ;
23556: GO 23536
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23558: LD_VAR 0 11
23562: PPUSH
23563: LD_VAR 0 12
23567: PPUSH
23568: CALL_OW 351
23572: PUSH
23573: LD_VAR 0 11
23577: PPUSH
23578: LD_VAR 0 12
23582: PPUSH
23583: CALL_OW 554
23587: AND
23588: IFFALSE 23628
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23590: LD_ADDR_VAR 0 13
23594: PUSH
23595: LD_VAR 0 13
23599: PPUSH
23600: LD_VAR 0 13
23604: PUSH
23605: LD_INT 1
23607: PLUS
23608: PPUSH
23609: LD_VAR 0 11
23613: PUSH
23614: LD_VAR 0 12
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PPUSH
23623: CALL_OW 2
23627: ST_TO_ADDR
// end ;
23628: GO 23536
23630: POP
23631: POP
23632: GO 23516
23634: POP
23635: POP
// if not list then
23636: LD_VAR 0 13
23640: NOT
23641: IFFALSE 23645
// exit ;
23643: GO 23716
// for i in list do
23645: LD_ADDR_VAR 0 6
23649: PUSH
23650: LD_VAR 0 13
23654: PUSH
23655: FOR_IN
23656: IFFALSE 23714
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23658: LD_VAR 0 1
23662: PPUSH
23663: LD_STRING M
23665: PUSH
23666: LD_VAR 0 6
23670: PUSH
23671: LD_INT 1
23673: ARRAY
23674: PUSH
23675: LD_VAR 0 6
23679: PUSH
23680: LD_INT 2
23682: ARRAY
23683: PUSH
23684: LD_INT 0
23686: PUSH
23687: LD_INT 0
23689: PUSH
23690: LD_INT 0
23692: PUSH
23693: LD_INT 0
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: PUSH
23705: EMPTY
23706: LIST
23707: PPUSH
23708: CALL_OW 447
23712: GO 23655
23714: POP
23715: POP
// end ;
23716: LD_VAR 0 5
23720: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23721: LD_EXP 100
23725: NOT
23726: IFFALSE 23776
23728: GO 23730
23730: DISABLE
// begin initHack := true ;
23731: LD_ADDR_EXP 100
23735: PUSH
23736: LD_INT 1
23738: ST_TO_ADDR
// hackTanks := [ ] ;
23739: LD_ADDR_EXP 101
23743: PUSH
23744: EMPTY
23745: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23746: LD_ADDR_EXP 102
23750: PUSH
23751: EMPTY
23752: ST_TO_ADDR
// hackLimit := 3 ;
23753: LD_ADDR_EXP 103
23757: PUSH
23758: LD_INT 3
23760: ST_TO_ADDR
// hackDist := 12 ;
23761: LD_ADDR_EXP 104
23765: PUSH
23766: LD_INT 12
23768: ST_TO_ADDR
// hackCounter := [ ] ;
23769: LD_ADDR_EXP 105
23773: PUSH
23774: EMPTY
23775: ST_TO_ADDR
// end ;
23776: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23777: LD_EXP 100
23781: PUSH
23782: LD_INT 34
23784: PUSH
23785: LD_EXP 112
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PPUSH
23794: CALL_OW 69
23798: AND
23799: IFFALSE 24054
23801: GO 23803
23803: DISABLE
23804: LD_INT 0
23806: PPUSH
23807: PPUSH
// begin enable ;
23808: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23809: LD_ADDR_VAR 0 1
23813: PUSH
23814: LD_INT 34
23816: PUSH
23817: LD_EXP 112
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PPUSH
23826: CALL_OW 69
23830: PUSH
23831: FOR_IN
23832: IFFALSE 24052
// begin if not i in hackTanks then
23834: LD_VAR 0 1
23838: PUSH
23839: LD_EXP 101
23843: IN
23844: NOT
23845: IFFALSE 23928
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23847: LD_ADDR_EXP 101
23851: PUSH
23852: LD_EXP 101
23856: PPUSH
23857: LD_EXP 101
23861: PUSH
23862: LD_INT 1
23864: PLUS
23865: PPUSH
23866: LD_VAR 0 1
23870: PPUSH
23871: CALL_OW 1
23875: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23876: LD_ADDR_EXP 102
23880: PUSH
23881: LD_EXP 102
23885: PPUSH
23886: LD_EXP 102
23890: PUSH
23891: LD_INT 1
23893: PLUS
23894: PPUSH
23895: EMPTY
23896: PPUSH
23897: CALL_OW 1
23901: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23902: LD_ADDR_EXP 105
23906: PUSH
23907: LD_EXP 105
23911: PPUSH
23912: LD_EXP 105
23916: PUSH
23917: LD_INT 1
23919: PLUS
23920: PPUSH
23921: EMPTY
23922: PPUSH
23923: CALL_OW 1
23927: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23928: LD_VAR 0 1
23932: PPUSH
23933: CALL_OW 302
23937: NOT
23938: IFFALSE 23951
// begin HackUnlinkAll ( i ) ;
23940: LD_VAR 0 1
23944: PPUSH
23945: CALL 24057 0 1
// continue ;
23949: GO 23831
// end ; HackCheckCapturedStatus ( i ) ;
23951: LD_VAR 0 1
23955: PPUSH
23956: CALL 24500 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23960: LD_ADDR_VAR 0 2
23964: PUSH
23965: LD_INT 81
23967: PUSH
23968: LD_VAR 0 1
23972: PPUSH
23973: CALL_OW 255
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 33
23984: PUSH
23985: LD_INT 3
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 91
23994: PUSH
23995: LD_VAR 0 1
23999: PUSH
24000: LD_EXP 104
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 50
24012: PUSH
24013: EMPTY
24014: LIST
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: PPUSH
24022: CALL_OW 69
24026: ST_TO_ADDR
// if not tmp then
24027: LD_VAR 0 2
24031: NOT
24032: IFFALSE 24036
// continue ;
24034: GO 23831
// HackLink ( i , tmp ) ;
24036: LD_VAR 0 1
24040: PPUSH
24041: LD_VAR 0 2
24045: PPUSH
24046: CALL 24193 0 2
// end ;
24050: GO 23831
24052: POP
24053: POP
// end ;
24054: PPOPN 2
24056: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24057: LD_INT 0
24059: PPUSH
24060: PPUSH
24061: PPUSH
// if not hack in hackTanks then
24062: LD_VAR 0 1
24066: PUSH
24067: LD_EXP 101
24071: IN
24072: NOT
24073: IFFALSE 24077
// exit ;
24075: GO 24188
// index := GetElementIndex ( hackTanks , hack ) ;
24077: LD_ADDR_VAR 0 4
24081: PUSH
24082: LD_EXP 101
24086: PPUSH
24087: LD_VAR 0 1
24091: PPUSH
24092: CALL 31622 0 2
24096: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24097: LD_EXP 102
24101: PUSH
24102: LD_VAR 0 4
24106: ARRAY
24107: IFFALSE 24188
// begin for i in hackTanksCaptured [ index ] do
24109: LD_ADDR_VAR 0 3
24113: PUSH
24114: LD_EXP 102
24118: PUSH
24119: LD_VAR 0 4
24123: ARRAY
24124: PUSH
24125: FOR_IN
24126: IFFALSE 24152
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24128: LD_VAR 0 3
24132: PUSH
24133: LD_INT 1
24135: ARRAY
24136: PPUSH
24137: LD_VAR 0 3
24141: PUSH
24142: LD_INT 2
24144: ARRAY
24145: PPUSH
24146: CALL_OW 235
24150: GO 24125
24152: POP
24153: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24154: LD_ADDR_EXP 102
24158: PUSH
24159: LD_EXP 102
24163: PPUSH
24164: LD_VAR 0 4
24168: PPUSH
24169: EMPTY
24170: PPUSH
24171: CALL_OW 1
24175: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24176: LD_VAR 0 1
24180: PPUSH
24181: LD_INT 0
24183: PPUSH
24184: CALL_OW 505
// end ; end ;
24188: LD_VAR 0 2
24192: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24193: LD_INT 0
24195: PPUSH
24196: PPUSH
24197: PPUSH
// if not hack in hackTanks or not vehicles then
24198: LD_VAR 0 1
24202: PUSH
24203: LD_EXP 101
24207: IN
24208: NOT
24209: PUSH
24210: LD_VAR 0 2
24214: NOT
24215: OR
24216: IFFALSE 24220
// exit ;
24218: GO 24495
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24220: LD_ADDR_VAR 0 2
24224: PUSH
24225: LD_VAR 0 1
24229: PPUSH
24230: LD_VAR 0 2
24234: PPUSH
24235: LD_INT 1
24237: PPUSH
24238: LD_INT 1
24240: PPUSH
24241: CALL 32272 0 4
24245: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24246: LD_ADDR_VAR 0 5
24250: PUSH
24251: LD_EXP 101
24255: PPUSH
24256: LD_VAR 0 1
24260: PPUSH
24261: CALL 31622 0 2
24265: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24266: LD_EXP 102
24270: PUSH
24271: LD_VAR 0 5
24275: ARRAY
24276: PUSH
24277: LD_EXP 103
24281: LESS
24282: IFFALSE 24471
// begin for i := 1 to vehicles do
24284: LD_ADDR_VAR 0 4
24288: PUSH
24289: DOUBLE
24290: LD_INT 1
24292: DEC
24293: ST_TO_ADDR
24294: LD_VAR 0 2
24298: PUSH
24299: FOR_TO
24300: IFFALSE 24469
// begin if hackTanksCaptured [ index ] = hackLimit then
24302: LD_EXP 102
24306: PUSH
24307: LD_VAR 0 5
24311: ARRAY
24312: PUSH
24313: LD_EXP 103
24317: EQUAL
24318: IFFALSE 24322
// break ;
24320: GO 24469
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24322: LD_ADDR_EXP 105
24326: PUSH
24327: LD_EXP 105
24331: PPUSH
24332: LD_VAR 0 5
24336: PPUSH
24337: LD_EXP 105
24341: PUSH
24342: LD_VAR 0 5
24346: ARRAY
24347: PUSH
24348: LD_INT 1
24350: PLUS
24351: PPUSH
24352: CALL_OW 1
24356: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24357: LD_ADDR_EXP 102
24361: PUSH
24362: LD_EXP 102
24366: PPUSH
24367: LD_VAR 0 5
24371: PUSH
24372: LD_EXP 102
24376: PUSH
24377: LD_VAR 0 5
24381: ARRAY
24382: PUSH
24383: LD_INT 1
24385: PLUS
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PPUSH
24391: LD_VAR 0 2
24395: PUSH
24396: LD_VAR 0 4
24400: ARRAY
24401: PUSH
24402: LD_VAR 0 2
24406: PUSH
24407: LD_VAR 0 4
24411: ARRAY
24412: PPUSH
24413: CALL_OW 255
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PPUSH
24422: CALL 31837 0 3
24426: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24427: LD_VAR 0 2
24431: PUSH
24432: LD_VAR 0 4
24436: ARRAY
24437: PPUSH
24438: LD_VAR 0 1
24442: PPUSH
24443: CALL_OW 255
24447: PPUSH
24448: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24452: LD_VAR 0 2
24456: PUSH
24457: LD_VAR 0 4
24461: ARRAY
24462: PPUSH
24463: CALL_OW 141
// end ;
24467: GO 24299
24469: POP
24470: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24471: LD_VAR 0 1
24475: PPUSH
24476: LD_EXP 102
24480: PUSH
24481: LD_VAR 0 5
24485: ARRAY
24486: PUSH
24487: LD_INT 0
24489: PLUS
24490: PPUSH
24491: CALL_OW 505
// end ;
24495: LD_VAR 0 3
24499: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24500: LD_INT 0
24502: PPUSH
24503: PPUSH
24504: PPUSH
24505: PPUSH
// if not hack in hackTanks then
24506: LD_VAR 0 1
24510: PUSH
24511: LD_EXP 101
24515: IN
24516: NOT
24517: IFFALSE 24521
// exit ;
24519: GO 24761
// index := GetElementIndex ( hackTanks , hack ) ;
24521: LD_ADDR_VAR 0 4
24525: PUSH
24526: LD_EXP 101
24530: PPUSH
24531: LD_VAR 0 1
24535: PPUSH
24536: CALL 31622 0 2
24540: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24541: LD_ADDR_VAR 0 3
24545: PUSH
24546: DOUBLE
24547: LD_EXP 102
24551: PUSH
24552: LD_VAR 0 4
24556: ARRAY
24557: INC
24558: ST_TO_ADDR
24559: LD_INT 1
24561: PUSH
24562: FOR_DOWNTO
24563: IFFALSE 24735
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24565: LD_ADDR_VAR 0 5
24569: PUSH
24570: LD_EXP 102
24574: PUSH
24575: LD_VAR 0 4
24579: ARRAY
24580: PUSH
24581: LD_VAR 0 3
24585: ARRAY
24586: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24587: LD_VAR 0 5
24591: PUSH
24592: LD_INT 1
24594: ARRAY
24595: PPUSH
24596: CALL_OW 302
24600: NOT
24601: PUSH
24602: LD_VAR 0 5
24606: PUSH
24607: LD_INT 1
24609: ARRAY
24610: PPUSH
24611: CALL_OW 255
24615: PUSH
24616: LD_VAR 0 1
24620: PPUSH
24621: CALL_OW 255
24625: NONEQUAL
24626: OR
24627: IFFALSE 24733
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24629: LD_VAR 0 5
24633: PUSH
24634: LD_INT 1
24636: ARRAY
24637: PPUSH
24638: CALL_OW 305
24642: PUSH
24643: LD_VAR 0 5
24647: PUSH
24648: LD_INT 1
24650: ARRAY
24651: PPUSH
24652: CALL_OW 255
24656: PUSH
24657: LD_VAR 0 1
24661: PPUSH
24662: CALL_OW 255
24666: EQUAL
24667: AND
24668: IFFALSE 24692
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24670: LD_VAR 0 5
24674: PUSH
24675: LD_INT 1
24677: ARRAY
24678: PPUSH
24679: LD_VAR 0 5
24683: PUSH
24684: LD_INT 2
24686: ARRAY
24687: PPUSH
24688: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24692: LD_ADDR_EXP 102
24696: PUSH
24697: LD_EXP 102
24701: PPUSH
24702: LD_VAR 0 4
24706: PPUSH
24707: LD_EXP 102
24711: PUSH
24712: LD_VAR 0 4
24716: ARRAY
24717: PPUSH
24718: LD_VAR 0 3
24722: PPUSH
24723: CALL_OW 3
24727: PPUSH
24728: CALL_OW 1
24732: ST_TO_ADDR
// end ; end ;
24733: GO 24562
24735: POP
24736: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24737: LD_VAR 0 1
24741: PPUSH
24742: LD_EXP 102
24746: PUSH
24747: LD_VAR 0 4
24751: ARRAY
24752: PUSH
24753: LD_INT 0
24755: PLUS
24756: PPUSH
24757: CALL_OW 505
// end ;
24761: LD_VAR 0 2
24765: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24766: LD_INT 0
24768: PPUSH
24769: PPUSH
24770: PPUSH
24771: PPUSH
// if not hack in hackTanks then
24772: LD_VAR 0 1
24776: PUSH
24777: LD_EXP 101
24781: IN
24782: NOT
24783: IFFALSE 24787
// exit ;
24785: GO 24872
// index := GetElementIndex ( hackTanks , hack ) ;
24787: LD_ADDR_VAR 0 5
24791: PUSH
24792: LD_EXP 101
24796: PPUSH
24797: LD_VAR 0 1
24801: PPUSH
24802: CALL 31622 0 2
24806: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24807: LD_ADDR_VAR 0 4
24811: PUSH
24812: DOUBLE
24813: LD_INT 1
24815: DEC
24816: ST_TO_ADDR
24817: LD_EXP 102
24821: PUSH
24822: LD_VAR 0 5
24826: ARRAY
24827: PUSH
24828: FOR_TO
24829: IFFALSE 24870
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24831: LD_EXP 102
24835: PUSH
24836: LD_VAR 0 5
24840: ARRAY
24841: PUSH
24842: LD_VAR 0 4
24846: ARRAY
24847: PUSH
24848: LD_INT 1
24850: ARRAY
24851: PUSH
24852: LD_VAR 0 2
24856: EQUAL
24857: IFFALSE 24868
// KillUnit ( vehicle ) ;
24859: LD_VAR 0 2
24863: PPUSH
24864: CALL_OW 66
24868: GO 24828
24870: POP
24871: POP
// end ;
24872: LD_VAR 0 3
24876: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24877: LD_EXP 106
24881: NOT
24882: IFFALSE 24917
24884: GO 24886
24886: DISABLE
// begin initMiner := true ;
24887: LD_ADDR_EXP 106
24891: PUSH
24892: LD_INT 1
24894: ST_TO_ADDR
// minersList := [ ] ;
24895: LD_ADDR_EXP 107
24899: PUSH
24900: EMPTY
24901: ST_TO_ADDR
// minerMinesList := [ ] ;
24902: LD_ADDR_EXP 108
24906: PUSH
24907: EMPTY
24908: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24909: LD_ADDR_EXP 109
24913: PUSH
24914: LD_INT 5
24916: ST_TO_ADDR
// end ;
24917: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24918: LD_EXP 106
24922: PUSH
24923: LD_INT 34
24925: PUSH
24926: LD_EXP 117
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PPUSH
24935: CALL_OW 69
24939: AND
24940: IFFALSE 25403
24942: GO 24944
24944: DISABLE
24945: LD_INT 0
24947: PPUSH
24948: PPUSH
24949: PPUSH
24950: PPUSH
// begin enable ;
24951: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24952: LD_ADDR_VAR 0 1
24956: PUSH
24957: LD_INT 34
24959: PUSH
24960: LD_EXP 117
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PPUSH
24969: CALL_OW 69
24973: PUSH
24974: FOR_IN
24975: IFFALSE 25047
// begin if not i in minersList then
24977: LD_VAR 0 1
24981: PUSH
24982: LD_EXP 107
24986: IN
24987: NOT
24988: IFFALSE 25045
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24990: LD_ADDR_EXP 107
24994: PUSH
24995: LD_EXP 107
24999: PPUSH
25000: LD_EXP 107
25004: PUSH
25005: LD_INT 1
25007: PLUS
25008: PPUSH
25009: LD_VAR 0 1
25013: PPUSH
25014: CALL_OW 1
25018: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25019: LD_ADDR_EXP 108
25023: PUSH
25024: LD_EXP 108
25028: PPUSH
25029: LD_EXP 108
25033: PUSH
25034: LD_INT 1
25036: PLUS
25037: PPUSH
25038: EMPTY
25039: PPUSH
25040: CALL_OW 1
25044: ST_TO_ADDR
// end end ;
25045: GO 24974
25047: POP
25048: POP
// for i := minerMinesList downto 1 do
25049: LD_ADDR_VAR 0 1
25053: PUSH
25054: DOUBLE
25055: LD_EXP 108
25059: INC
25060: ST_TO_ADDR
25061: LD_INT 1
25063: PUSH
25064: FOR_DOWNTO
25065: IFFALSE 25401
// begin if IsLive ( minersList [ i ] ) then
25067: LD_EXP 107
25071: PUSH
25072: LD_VAR 0 1
25076: ARRAY
25077: PPUSH
25078: CALL_OW 300
25082: IFFALSE 25110
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25084: LD_EXP 107
25088: PUSH
25089: LD_VAR 0 1
25093: ARRAY
25094: PPUSH
25095: LD_EXP 108
25099: PUSH
25100: LD_VAR 0 1
25104: ARRAY
25105: PPUSH
25106: CALL_OW 505
// if not minerMinesList [ i ] then
25110: LD_EXP 108
25114: PUSH
25115: LD_VAR 0 1
25119: ARRAY
25120: NOT
25121: IFFALSE 25125
// continue ;
25123: GO 25064
// for j := minerMinesList [ i ] downto 1 do
25125: LD_ADDR_VAR 0 2
25129: PUSH
25130: DOUBLE
25131: LD_EXP 108
25135: PUSH
25136: LD_VAR 0 1
25140: ARRAY
25141: INC
25142: ST_TO_ADDR
25143: LD_INT 1
25145: PUSH
25146: FOR_DOWNTO
25147: IFFALSE 25397
// begin side := GetSide ( minersList [ i ] ) ;
25149: LD_ADDR_VAR 0 3
25153: PUSH
25154: LD_EXP 107
25158: PUSH
25159: LD_VAR 0 1
25163: ARRAY
25164: PPUSH
25165: CALL_OW 255
25169: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25170: LD_ADDR_VAR 0 4
25174: PUSH
25175: LD_EXP 108
25179: PUSH
25180: LD_VAR 0 1
25184: ARRAY
25185: PUSH
25186: LD_VAR 0 2
25190: ARRAY
25191: PUSH
25192: LD_INT 1
25194: ARRAY
25195: PPUSH
25196: LD_EXP 108
25200: PUSH
25201: LD_VAR 0 1
25205: ARRAY
25206: PUSH
25207: LD_VAR 0 2
25211: ARRAY
25212: PUSH
25213: LD_INT 2
25215: ARRAY
25216: PPUSH
25217: CALL_OW 428
25221: ST_TO_ADDR
// if not tmp then
25222: LD_VAR 0 4
25226: NOT
25227: IFFALSE 25231
// continue ;
25229: GO 25146
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25231: LD_VAR 0 4
25235: PUSH
25236: LD_INT 81
25238: PUSH
25239: LD_VAR 0 3
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PPUSH
25248: CALL_OW 69
25252: IN
25253: PUSH
25254: LD_EXP 108
25258: PUSH
25259: LD_VAR 0 1
25263: ARRAY
25264: PUSH
25265: LD_VAR 0 2
25269: ARRAY
25270: PUSH
25271: LD_INT 1
25273: ARRAY
25274: PPUSH
25275: LD_EXP 108
25279: PUSH
25280: LD_VAR 0 1
25284: ARRAY
25285: PUSH
25286: LD_VAR 0 2
25290: ARRAY
25291: PUSH
25292: LD_INT 2
25294: ARRAY
25295: PPUSH
25296: CALL_OW 458
25300: AND
25301: IFFALSE 25395
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25303: LD_EXP 108
25307: PUSH
25308: LD_VAR 0 1
25312: ARRAY
25313: PUSH
25314: LD_VAR 0 2
25318: ARRAY
25319: PUSH
25320: LD_INT 1
25322: ARRAY
25323: PPUSH
25324: LD_EXP 108
25328: PUSH
25329: LD_VAR 0 1
25333: ARRAY
25334: PUSH
25335: LD_VAR 0 2
25339: ARRAY
25340: PUSH
25341: LD_INT 2
25343: ARRAY
25344: PPUSH
25345: LD_VAR 0 3
25349: PPUSH
25350: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25354: LD_ADDR_EXP 108
25358: PUSH
25359: LD_EXP 108
25363: PPUSH
25364: LD_VAR 0 1
25368: PPUSH
25369: LD_EXP 108
25373: PUSH
25374: LD_VAR 0 1
25378: ARRAY
25379: PPUSH
25380: LD_VAR 0 2
25384: PPUSH
25385: CALL_OW 3
25389: PPUSH
25390: CALL_OW 1
25394: ST_TO_ADDR
// end ; end ;
25395: GO 25146
25397: POP
25398: POP
// end ;
25399: GO 25064
25401: POP
25402: POP
// end ;
25403: PPOPN 4
25405: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25406: LD_INT 0
25408: PPUSH
25409: PPUSH
// result := false ;
25410: LD_ADDR_VAR 0 4
25414: PUSH
25415: LD_INT 0
25417: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25418: LD_VAR 0 1
25422: PPUSH
25423: CALL_OW 264
25427: PUSH
25428: LD_EXP 117
25432: EQUAL
25433: NOT
25434: IFFALSE 25438
// exit ;
25436: GO 25678
// index := GetElementIndex ( minersList , unit ) ;
25438: LD_ADDR_VAR 0 5
25442: PUSH
25443: LD_EXP 107
25447: PPUSH
25448: LD_VAR 0 1
25452: PPUSH
25453: CALL 31622 0 2
25457: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25458: LD_EXP 108
25462: PUSH
25463: LD_VAR 0 5
25467: ARRAY
25468: PUSH
25469: LD_EXP 109
25473: GREATEREQUAL
25474: IFFALSE 25478
// exit ;
25476: GO 25678
// ComMoveXY ( unit , x , y ) ;
25478: LD_VAR 0 1
25482: PPUSH
25483: LD_VAR 0 2
25487: PPUSH
25488: LD_VAR 0 3
25492: PPUSH
25493: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25497: LD_INT 35
25499: PPUSH
25500: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25504: LD_VAR 0 1
25508: PPUSH
25509: LD_VAR 0 2
25513: PPUSH
25514: LD_VAR 0 3
25518: PPUSH
25519: CALL 62006 0 3
25523: NOT
25524: PUSH
25525: LD_VAR 0 1
25529: PPUSH
25530: CALL_OW 314
25534: AND
25535: IFFALSE 25539
// exit ;
25537: GO 25678
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25539: LD_VAR 0 2
25543: PPUSH
25544: LD_VAR 0 3
25548: PPUSH
25549: CALL_OW 428
25553: PUSH
25554: LD_VAR 0 1
25558: EQUAL
25559: PUSH
25560: LD_VAR 0 1
25564: PPUSH
25565: CALL_OW 314
25569: NOT
25570: AND
25571: IFFALSE 25497
// PlaySoundXY ( x , y , PlantMine ) ;
25573: LD_VAR 0 2
25577: PPUSH
25578: LD_VAR 0 3
25582: PPUSH
25583: LD_STRING PlantMine
25585: PPUSH
25586: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25590: LD_VAR 0 2
25594: PPUSH
25595: LD_VAR 0 3
25599: PPUSH
25600: LD_VAR 0 1
25604: PPUSH
25605: CALL_OW 255
25609: PPUSH
25610: LD_INT 0
25612: PPUSH
25613: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25617: LD_ADDR_EXP 108
25621: PUSH
25622: LD_EXP 108
25626: PPUSH
25627: LD_VAR 0 5
25631: PUSH
25632: LD_EXP 108
25636: PUSH
25637: LD_VAR 0 5
25641: ARRAY
25642: PUSH
25643: LD_INT 1
25645: PLUS
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PPUSH
25651: LD_VAR 0 2
25655: PUSH
25656: LD_VAR 0 3
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PPUSH
25665: CALL 31837 0 3
25669: ST_TO_ADDR
// result := true ;
25670: LD_ADDR_VAR 0 4
25674: PUSH
25675: LD_INT 1
25677: ST_TO_ADDR
// end ;
25678: LD_VAR 0 4
25682: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25683: LD_INT 0
25685: PPUSH
25686: PPUSH
25687: PPUSH
// if not unit in minersList then
25688: LD_VAR 0 1
25692: PUSH
25693: LD_EXP 107
25697: IN
25698: NOT
25699: IFFALSE 25703
// exit ;
25701: GO 26095
// index := GetElementIndex ( minersList , unit ) ;
25703: LD_ADDR_VAR 0 6
25707: PUSH
25708: LD_EXP 107
25712: PPUSH
25713: LD_VAR 0 1
25717: PPUSH
25718: CALL 31622 0 2
25722: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25723: LD_ADDR_VAR 0 5
25727: PUSH
25728: DOUBLE
25729: LD_EXP 108
25733: PUSH
25734: LD_VAR 0 6
25738: ARRAY
25739: INC
25740: ST_TO_ADDR
25741: LD_INT 1
25743: PUSH
25744: FOR_DOWNTO
25745: IFFALSE 25906
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25747: LD_EXP 108
25751: PUSH
25752: LD_VAR 0 6
25756: ARRAY
25757: PUSH
25758: LD_VAR 0 5
25762: ARRAY
25763: PUSH
25764: LD_INT 1
25766: ARRAY
25767: PUSH
25768: LD_VAR 0 2
25772: EQUAL
25773: PUSH
25774: LD_EXP 108
25778: PUSH
25779: LD_VAR 0 6
25783: ARRAY
25784: PUSH
25785: LD_VAR 0 5
25789: ARRAY
25790: PUSH
25791: LD_INT 2
25793: ARRAY
25794: PUSH
25795: LD_VAR 0 3
25799: EQUAL
25800: AND
25801: IFFALSE 25904
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25803: LD_EXP 108
25807: PUSH
25808: LD_VAR 0 6
25812: ARRAY
25813: PUSH
25814: LD_VAR 0 5
25818: ARRAY
25819: PUSH
25820: LD_INT 1
25822: ARRAY
25823: PPUSH
25824: LD_EXP 108
25828: PUSH
25829: LD_VAR 0 6
25833: ARRAY
25834: PUSH
25835: LD_VAR 0 5
25839: ARRAY
25840: PUSH
25841: LD_INT 2
25843: ARRAY
25844: PPUSH
25845: LD_VAR 0 1
25849: PPUSH
25850: CALL_OW 255
25854: PPUSH
25855: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25859: LD_ADDR_EXP 108
25863: PUSH
25864: LD_EXP 108
25868: PPUSH
25869: LD_VAR 0 6
25873: PPUSH
25874: LD_EXP 108
25878: PUSH
25879: LD_VAR 0 6
25883: ARRAY
25884: PPUSH
25885: LD_VAR 0 5
25889: PPUSH
25890: CALL_OW 3
25894: PPUSH
25895: CALL_OW 1
25899: ST_TO_ADDR
// exit ;
25900: POP
25901: POP
25902: GO 26095
// end ; end ;
25904: GO 25744
25906: POP
25907: POP
// for i := minerMinesList [ index ] downto 1 do
25908: LD_ADDR_VAR 0 5
25912: PUSH
25913: DOUBLE
25914: LD_EXP 108
25918: PUSH
25919: LD_VAR 0 6
25923: ARRAY
25924: INC
25925: ST_TO_ADDR
25926: LD_INT 1
25928: PUSH
25929: FOR_DOWNTO
25930: IFFALSE 26093
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25932: LD_EXP 108
25936: PUSH
25937: LD_VAR 0 6
25941: ARRAY
25942: PUSH
25943: LD_VAR 0 5
25947: ARRAY
25948: PUSH
25949: LD_INT 1
25951: ARRAY
25952: PPUSH
25953: LD_EXP 108
25957: PUSH
25958: LD_VAR 0 6
25962: ARRAY
25963: PUSH
25964: LD_VAR 0 5
25968: ARRAY
25969: PUSH
25970: LD_INT 2
25972: ARRAY
25973: PPUSH
25974: LD_VAR 0 2
25978: PPUSH
25979: LD_VAR 0 3
25983: PPUSH
25984: CALL_OW 298
25988: PUSH
25989: LD_INT 6
25991: LESS
25992: IFFALSE 26091
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25994: LD_EXP 108
25998: PUSH
25999: LD_VAR 0 6
26003: ARRAY
26004: PUSH
26005: LD_VAR 0 5
26009: ARRAY
26010: PUSH
26011: LD_INT 1
26013: ARRAY
26014: PPUSH
26015: LD_EXP 108
26019: PUSH
26020: LD_VAR 0 6
26024: ARRAY
26025: PUSH
26026: LD_VAR 0 5
26030: ARRAY
26031: PUSH
26032: LD_INT 2
26034: ARRAY
26035: PPUSH
26036: LD_VAR 0 1
26040: PPUSH
26041: CALL_OW 255
26045: PPUSH
26046: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26050: LD_ADDR_EXP 108
26054: PUSH
26055: LD_EXP 108
26059: PPUSH
26060: LD_VAR 0 6
26064: PPUSH
26065: LD_EXP 108
26069: PUSH
26070: LD_VAR 0 6
26074: ARRAY
26075: PPUSH
26076: LD_VAR 0 5
26080: PPUSH
26081: CALL_OW 3
26085: PPUSH
26086: CALL_OW 1
26090: ST_TO_ADDR
// end ; end ;
26091: GO 25929
26093: POP
26094: POP
// end ;
26095: LD_VAR 0 4
26099: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26100: LD_INT 0
26102: PPUSH
26103: PPUSH
26104: PPUSH
26105: PPUSH
26106: PPUSH
26107: PPUSH
26108: PPUSH
26109: PPUSH
26110: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26111: LD_VAR 0 1
26115: PPUSH
26116: CALL_OW 264
26120: PUSH
26121: LD_EXP 117
26125: EQUAL
26126: NOT
26127: PUSH
26128: LD_VAR 0 1
26132: PUSH
26133: LD_EXP 107
26137: IN
26138: NOT
26139: OR
26140: IFFALSE 26144
// exit ;
26142: GO 26466
// index := GetElementIndex ( minersList , unit ) ;
26144: LD_ADDR_VAR 0 6
26148: PUSH
26149: LD_EXP 107
26153: PPUSH
26154: LD_VAR 0 1
26158: PPUSH
26159: CALL 31622 0 2
26163: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26164: LD_ADDR_VAR 0 8
26168: PUSH
26169: LD_EXP 109
26173: PUSH
26174: LD_EXP 108
26178: PUSH
26179: LD_VAR 0 6
26183: ARRAY
26184: MINUS
26185: ST_TO_ADDR
// if not minesFreeAmount then
26186: LD_VAR 0 8
26190: NOT
26191: IFFALSE 26195
// exit ;
26193: GO 26466
// tmp := [ ] ;
26195: LD_ADDR_VAR 0 7
26199: PUSH
26200: EMPTY
26201: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26202: LD_ADDR_VAR 0 5
26206: PUSH
26207: DOUBLE
26208: LD_INT 1
26210: DEC
26211: ST_TO_ADDR
26212: LD_VAR 0 8
26216: PUSH
26217: FOR_TO
26218: IFFALSE 26413
// begin _d := rand ( 0 , 5 ) ;
26220: LD_ADDR_VAR 0 11
26224: PUSH
26225: LD_INT 0
26227: PPUSH
26228: LD_INT 5
26230: PPUSH
26231: CALL_OW 12
26235: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26236: LD_ADDR_VAR 0 12
26240: PUSH
26241: LD_INT 2
26243: PPUSH
26244: LD_INT 6
26246: PPUSH
26247: CALL_OW 12
26251: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26252: LD_ADDR_VAR 0 9
26256: PUSH
26257: LD_VAR 0 2
26261: PPUSH
26262: LD_VAR 0 11
26266: PPUSH
26267: LD_VAR 0 12
26271: PPUSH
26272: CALL_OW 272
26276: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26277: LD_ADDR_VAR 0 10
26281: PUSH
26282: LD_VAR 0 3
26286: PPUSH
26287: LD_VAR 0 11
26291: PPUSH
26292: LD_VAR 0 12
26296: PPUSH
26297: CALL_OW 273
26301: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26302: LD_VAR 0 9
26306: PPUSH
26307: LD_VAR 0 10
26311: PPUSH
26312: CALL_OW 488
26316: PUSH
26317: LD_VAR 0 9
26321: PUSH
26322: LD_VAR 0 10
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_VAR 0 7
26335: IN
26336: NOT
26337: AND
26338: PUSH
26339: LD_VAR 0 9
26343: PPUSH
26344: LD_VAR 0 10
26348: PPUSH
26349: CALL_OW 458
26353: NOT
26354: AND
26355: IFFALSE 26397
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26357: LD_ADDR_VAR 0 7
26361: PUSH
26362: LD_VAR 0 7
26366: PPUSH
26367: LD_VAR 0 7
26371: PUSH
26372: LD_INT 1
26374: PLUS
26375: PPUSH
26376: LD_VAR 0 9
26380: PUSH
26381: LD_VAR 0 10
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PPUSH
26390: CALL_OW 1
26394: ST_TO_ADDR
26395: GO 26411
// i := i - 1 ;
26397: LD_ADDR_VAR 0 5
26401: PUSH
26402: LD_VAR 0 5
26406: PUSH
26407: LD_INT 1
26409: MINUS
26410: ST_TO_ADDR
// end ;
26411: GO 26217
26413: POP
26414: POP
// for i in tmp do
26415: LD_ADDR_VAR 0 5
26419: PUSH
26420: LD_VAR 0 7
26424: PUSH
26425: FOR_IN
26426: IFFALSE 26464
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26428: LD_VAR 0 1
26432: PPUSH
26433: LD_VAR 0 5
26437: PUSH
26438: LD_INT 1
26440: ARRAY
26441: PPUSH
26442: LD_VAR 0 5
26446: PUSH
26447: LD_INT 2
26449: ARRAY
26450: PPUSH
26451: CALL 25406 0 3
26455: NOT
26456: IFFALSE 26462
// exit ;
26458: POP
26459: POP
26460: GO 26466
26462: GO 26425
26464: POP
26465: POP
// end ;
26466: LD_VAR 0 4
26470: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26471: LD_INT 0
26473: PPUSH
26474: PPUSH
26475: PPUSH
26476: PPUSH
26477: PPUSH
26478: PPUSH
26479: PPUSH
// if not GetClass ( unit ) = class_sniper then
26480: LD_VAR 0 1
26484: PPUSH
26485: CALL_OW 257
26489: PUSH
26490: LD_INT 5
26492: EQUAL
26493: NOT
26494: IFFALSE 26498
// exit ;
26496: GO 26886
// dist := 8 ;
26498: LD_ADDR_VAR 0 5
26502: PUSH
26503: LD_INT 8
26505: ST_TO_ADDR
// viewRange := 12 ;
26506: LD_ADDR_VAR 0 7
26510: PUSH
26511: LD_INT 12
26513: ST_TO_ADDR
// side := GetSide ( unit ) ;
26514: LD_ADDR_VAR 0 6
26518: PUSH
26519: LD_VAR 0 1
26523: PPUSH
26524: CALL_OW 255
26528: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26529: LD_INT 61
26531: PPUSH
26532: LD_VAR 0 6
26536: PPUSH
26537: CALL_OW 321
26541: PUSH
26542: LD_INT 2
26544: EQUAL
26545: IFFALSE 26555
// viewRange := 16 ;
26547: LD_ADDR_VAR 0 7
26551: PUSH
26552: LD_INT 16
26554: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26555: LD_VAR 0 1
26559: PPUSH
26560: LD_VAR 0 2
26564: PPUSH
26565: LD_VAR 0 3
26569: PPUSH
26570: CALL_OW 297
26574: PUSH
26575: LD_VAR 0 5
26579: GREATER
26580: IFFALSE 26659
// begin ComMoveXY ( unit , x , y ) ;
26582: LD_VAR 0 1
26586: PPUSH
26587: LD_VAR 0 2
26591: PPUSH
26592: LD_VAR 0 3
26596: PPUSH
26597: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26601: LD_INT 35
26603: PPUSH
26604: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26608: LD_VAR 0 1
26612: PPUSH
26613: LD_VAR 0 2
26617: PPUSH
26618: LD_VAR 0 3
26622: PPUSH
26623: CALL 62006 0 3
26627: NOT
26628: IFFALSE 26632
// exit ;
26630: GO 26886
// until GetDistUnitXY ( unit , x , y ) < dist ;
26632: LD_VAR 0 1
26636: PPUSH
26637: LD_VAR 0 2
26641: PPUSH
26642: LD_VAR 0 3
26646: PPUSH
26647: CALL_OW 297
26651: PUSH
26652: LD_VAR 0 5
26656: LESS
26657: IFFALSE 26601
// end ; ComTurnXY ( unit , x , y ) ;
26659: LD_VAR 0 1
26663: PPUSH
26664: LD_VAR 0 2
26668: PPUSH
26669: LD_VAR 0 3
26673: PPUSH
26674: CALL_OW 118
// wait ( 5 ) ;
26678: LD_INT 5
26680: PPUSH
26681: CALL_OW 67
// _d := GetDir ( unit ) ;
26685: LD_ADDR_VAR 0 10
26689: PUSH
26690: LD_VAR 0 1
26694: PPUSH
26695: CALL_OW 254
26699: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26700: LD_ADDR_VAR 0 8
26704: PUSH
26705: LD_VAR 0 1
26709: PPUSH
26710: CALL_OW 250
26714: PPUSH
26715: LD_VAR 0 10
26719: PPUSH
26720: LD_VAR 0 5
26724: PPUSH
26725: CALL_OW 272
26729: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26730: LD_ADDR_VAR 0 9
26734: PUSH
26735: LD_VAR 0 1
26739: PPUSH
26740: CALL_OW 251
26744: PPUSH
26745: LD_VAR 0 10
26749: PPUSH
26750: LD_VAR 0 5
26754: PPUSH
26755: CALL_OW 273
26759: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26760: LD_VAR 0 8
26764: PPUSH
26765: LD_VAR 0 9
26769: PPUSH
26770: CALL_OW 488
26774: NOT
26775: IFFALSE 26779
// exit ;
26777: GO 26886
// ComAnimCustom ( unit , 1 ) ;
26779: LD_VAR 0 1
26783: PPUSH
26784: LD_INT 1
26786: PPUSH
26787: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26791: LD_VAR 0 8
26795: PPUSH
26796: LD_VAR 0 9
26800: PPUSH
26801: LD_VAR 0 6
26805: PPUSH
26806: LD_VAR 0 7
26810: PPUSH
26811: CALL_OW 330
// repeat wait ( 1 ) ;
26815: LD_INT 1
26817: PPUSH
26818: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26822: LD_VAR 0 1
26826: PPUSH
26827: CALL_OW 316
26831: PUSH
26832: LD_VAR 0 1
26836: PPUSH
26837: CALL_OW 314
26841: OR
26842: PUSH
26843: LD_VAR 0 1
26847: PPUSH
26848: CALL_OW 302
26852: NOT
26853: OR
26854: PUSH
26855: LD_VAR 0 1
26859: PPUSH
26860: CALL_OW 301
26864: OR
26865: IFFALSE 26815
// RemoveSeeing ( _x , _y , side ) ;
26867: LD_VAR 0 8
26871: PPUSH
26872: LD_VAR 0 9
26876: PPUSH
26877: LD_VAR 0 6
26881: PPUSH
26882: CALL_OW 331
// end ; end_of_file
26886: LD_VAR 0 4
26890: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26891: LD_INT 0
26893: PPUSH
26894: PPUSH
// if exist_mode then
26895: LD_VAR 0 2
26899: IFFALSE 26924
// unit := CreateCharacter ( prefix & ident ) else
26901: LD_ADDR_VAR 0 5
26905: PUSH
26906: LD_VAR 0 3
26910: PUSH
26911: LD_VAR 0 1
26915: STR
26916: PPUSH
26917: CALL_OW 34
26921: ST_TO_ADDR
26922: GO 26939
// unit := NewCharacter ( ident ) ;
26924: LD_ADDR_VAR 0 5
26928: PUSH
26929: LD_VAR 0 1
26933: PPUSH
26934: CALL_OW 25
26938: ST_TO_ADDR
// result := unit ;
26939: LD_ADDR_VAR 0 4
26943: PUSH
26944: LD_VAR 0 5
26948: ST_TO_ADDR
// end ;
26949: LD_VAR 0 4
26953: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26954: LD_INT 0
26956: PPUSH
26957: PPUSH
// if not side or not nation then
26958: LD_VAR 0 1
26962: NOT
26963: PUSH
26964: LD_VAR 0 2
26968: NOT
26969: OR
26970: IFFALSE 26974
// exit ;
26972: GO 27738
// case nation of nation_american :
26974: LD_VAR 0 2
26978: PUSH
26979: LD_INT 1
26981: DOUBLE
26982: EQUAL
26983: IFTRUE 26987
26985: GO 27201
26987: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26988: LD_ADDR_VAR 0 4
26992: PUSH
26993: LD_INT 35
26995: PUSH
26996: LD_INT 45
26998: PUSH
26999: LD_INT 46
27001: PUSH
27002: LD_INT 47
27004: PUSH
27005: LD_INT 82
27007: PUSH
27008: LD_INT 83
27010: PUSH
27011: LD_INT 84
27013: PUSH
27014: LD_INT 85
27016: PUSH
27017: LD_INT 86
27019: PUSH
27020: LD_INT 1
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: LD_INT 6
27028: PUSH
27029: LD_INT 15
27031: PUSH
27032: LD_INT 16
27034: PUSH
27035: LD_INT 7
27037: PUSH
27038: LD_INT 12
27040: PUSH
27041: LD_INT 13
27043: PUSH
27044: LD_INT 10
27046: PUSH
27047: LD_INT 14
27049: PUSH
27050: LD_INT 20
27052: PUSH
27053: LD_INT 21
27055: PUSH
27056: LD_INT 22
27058: PUSH
27059: LD_INT 25
27061: PUSH
27062: LD_INT 32
27064: PUSH
27065: LD_INT 27
27067: PUSH
27068: LD_INT 36
27070: PUSH
27071: LD_INT 69
27073: PUSH
27074: LD_INT 39
27076: PUSH
27077: LD_INT 34
27079: PUSH
27080: LD_INT 40
27082: PUSH
27083: LD_INT 48
27085: PUSH
27086: LD_INT 49
27088: PUSH
27089: LD_INT 50
27091: PUSH
27092: LD_INT 51
27094: PUSH
27095: LD_INT 52
27097: PUSH
27098: LD_INT 53
27100: PUSH
27101: LD_INT 54
27103: PUSH
27104: LD_INT 55
27106: PUSH
27107: LD_INT 56
27109: PUSH
27110: LD_INT 57
27112: PUSH
27113: LD_INT 58
27115: PUSH
27116: LD_INT 59
27118: PUSH
27119: LD_INT 60
27121: PUSH
27122: LD_INT 61
27124: PUSH
27125: LD_INT 62
27127: PUSH
27128: LD_INT 80
27130: PUSH
27131: LD_INT 82
27133: PUSH
27134: LD_INT 83
27136: PUSH
27137: LD_INT 84
27139: PUSH
27140: LD_INT 85
27142: PUSH
27143: LD_INT 86
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: ST_TO_ADDR
27199: GO 27662
27201: LD_INT 2
27203: DOUBLE
27204: EQUAL
27205: IFTRUE 27209
27207: GO 27431
27209: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
27210: LD_ADDR_VAR 0 4
27214: PUSH
27215: LD_INT 35
27217: PUSH
27218: LD_INT 45
27220: PUSH
27221: LD_INT 46
27223: PUSH
27224: LD_INT 47
27226: PUSH
27227: LD_INT 82
27229: PUSH
27230: LD_INT 83
27232: PUSH
27233: LD_INT 84
27235: PUSH
27236: LD_INT 85
27238: PUSH
27239: LD_INT 87
27241: PUSH
27242: LD_INT 70
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: LD_INT 11
27250: PUSH
27251: LD_INT 3
27253: PUSH
27254: LD_INT 4
27256: PUSH
27257: LD_INT 5
27259: PUSH
27260: LD_INT 6
27262: PUSH
27263: LD_INT 15
27265: PUSH
27266: LD_INT 18
27268: PUSH
27269: LD_INT 7
27271: PUSH
27272: LD_INT 17
27274: PUSH
27275: LD_INT 8
27277: PUSH
27278: LD_INT 20
27280: PUSH
27281: LD_INT 21
27283: PUSH
27284: LD_INT 22
27286: PUSH
27287: LD_INT 72
27289: PUSH
27290: LD_INT 26
27292: PUSH
27293: LD_INT 69
27295: PUSH
27296: LD_INT 39
27298: PUSH
27299: LD_INT 40
27301: PUSH
27302: LD_INT 41
27304: PUSH
27305: LD_INT 42
27307: PUSH
27308: LD_INT 43
27310: PUSH
27311: LD_INT 48
27313: PUSH
27314: LD_INT 49
27316: PUSH
27317: LD_INT 50
27319: PUSH
27320: LD_INT 51
27322: PUSH
27323: LD_INT 52
27325: PUSH
27326: LD_INT 53
27328: PUSH
27329: LD_INT 54
27331: PUSH
27332: LD_INT 55
27334: PUSH
27335: LD_INT 56
27337: PUSH
27338: LD_INT 60
27340: PUSH
27341: LD_INT 61
27343: PUSH
27344: LD_INT 62
27346: PUSH
27347: LD_INT 66
27349: PUSH
27350: LD_INT 67
27352: PUSH
27353: LD_INT 68
27355: PUSH
27356: LD_INT 81
27358: PUSH
27359: LD_INT 82
27361: PUSH
27362: LD_INT 83
27364: PUSH
27365: LD_INT 84
27367: PUSH
27368: LD_INT 85
27370: PUSH
27371: LD_INT 87
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: ST_TO_ADDR
27429: GO 27662
27431: LD_INT 3
27433: DOUBLE
27434: EQUAL
27435: IFTRUE 27439
27437: GO 27661
27439: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27440: LD_ADDR_VAR 0 4
27444: PUSH
27445: LD_INT 46
27447: PUSH
27448: LD_INT 47
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: LD_INT 2
27456: PUSH
27457: LD_INT 82
27459: PUSH
27460: LD_INT 83
27462: PUSH
27463: LD_INT 84
27465: PUSH
27466: LD_INT 85
27468: PUSH
27469: LD_INT 86
27471: PUSH
27472: LD_INT 11
27474: PUSH
27475: LD_INT 9
27477: PUSH
27478: LD_INT 20
27480: PUSH
27481: LD_INT 19
27483: PUSH
27484: LD_INT 21
27486: PUSH
27487: LD_INT 24
27489: PUSH
27490: LD_INT 22
27492: PUSH
27493: LD_INT 25
27495: PUSH
27496: LD_INT 28
27498: PUSH
27499: LD_INT 29
27501: PUSH
27502: LD_INT 30
27504: PUSH
27505: LD_INT 31
27507: PUSH
27508: LD_INT 37
27510: PUSH
27511: LD_INT 38
27513: PUSH
27514: LD_INT 32
27516: PUSH
27517: LD_INT 27
27519: PUSH
27520: LD_INT 33
27522: PUSH
27523: LD_INT 69
27525: PUSH
27526: LD_INT 39
27528: PUSH
27529: LD_INT 34
27531: PUSH
27532: LD_INT 40
27534: PUSH
27535: LD_INT 71
27537: PUSH
27538: LD_INT 23
27540: PUSH
27541: LD_INT 44
27543: PUSH
27544: LD_INT 48
27546: PUSH
27547: LD_INT 49
27549: PUSH
27550: LD_INT 50
27552: PUSH
27553: LD_INT 51
27555: PUSH
27556: LD_INT 52
27558: PUSH
27559: LD_INT 53
27561: PUSH
27562: LD_INT 54
27564: PUSH
27565: LD_INT 55
27567: PUSH
27568: LD_INT 56
27570: PUSH
27571: LD_INT 57
27573: PUSH
27574: LD_INT 58
27576: PUSH
27577: LD_INT 59
27579: PUSH
27580: LD_INT 63
27582: PUSH
27583: LD_INT 64
27585: PUSH
27586: LD_INT 65
27588: PUSH
27589: LD_INT 82
27591: PUSH
27592: LD_INT 83
27594: PUSH
27595: LD_INT 84
27597: PUSH
27598: LD_INT 85
27600: PUSH
27601: LD_INT 86
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: ST_TO_ADDR
27659: GO 27662
27661: POP
// if state > - 1 and state < 3 then
27662: LD_VAR 0 3
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: GREATER
27671: PUSH
27672: LD_VAR 0 3
27676: PUSH
27677: LD_INT 3
27679: LESS
27680: AND
27681: IFFALSE 27738
// for i in result do
27683: LD_ADDR_VAR 0 5
27687: PUSH
27688: LD_VAR 0 4
27692: PUSH
27693: FOR_IN
27694: IFFALSE 27736
// if GetTech ( i , side ) <> state then
27696: LD_VAR 0 5
27700: PPUSH
27701: LD_VAR 0 1
27705: PPUSH
27706: CALL_OW 321
27710: PUSH
27711: LD_VAR 0 3
27715: NONEQUAL
27716: IFFALSE 27734
// result := result diff i ;
27718: LD_ADDR_VAR 0 4
27722: PUSH
27723: LD_VAR 0 4
27727: PUSH
27728: LD_VAR 0 5
27732: DIFF
27733: ST_TO_ADDR
27734: GO 27693
27736: POP
27737: POP
// end ;
27738: LD_VAR 0 4
27742: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27743: LD_INT 0
27745: PPUSH
27746: PPUSH
27747: PPUSH
// result := true ;
27748: LD_ADDR_VAR 0 3
27752: PUSH
27753: LD_INT 1
27755: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27756: LD_ADDR_VAR 0 5
27760: PUSH
27761: LD_VAR 0 2
27765: PPUSH
27766: CALL_OW 480
27770: ST_TO_ADDR
// if not tmp then
27771: LD_VAR 0 5
27775: NOT
27776: IFFALSE 27780
// exit ;
27778: GO 27829
// for i in tmp do
27780: LD_ADDR_VAR 0 4
27784: PUSH
27785: LD_VAR 0 5
27789: PUSH
27790: FOR_IN
27791: IFFALSE 27827
// if GetTech ( i , side ) <> state_researched then
27793: LD_VAR 0 4
27797: PPUSH
27798: LD_VAR 0 1
27802: PPUSH
27803: CALL_OW 321
27807: PUSH
27808: LD_INT 2
27810: NONEQUAL
27811: IFFALSE 27825
// begin result := false ;
27813: LD_ADDR_VAR 0 3
27817: PUSH
27818: LD_INT 0
27820: ST_TO_ADDR
// exit ;
27821: POP
27822: POP
27823: GO 27829
// end ;
27825: GO 27790
27827: POP
27828: POP
// end ;
27829: LD_VAR 0 3
27833: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27834: LD_INT 0
27836: PPUSH
27837: PPUSH
27838: PPUSH
27839: PPUSH
27840: PPUSH
27841: PPUSH
27842: PPUSH
27843: PPUSH
27844: PPUSH
27845: PPUSH
27846: PPUSH
27847: PPUSH
27848: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27849: LD_VAR 0 1
27853: NOT
27854: PUSH
27855: LD_VAR 0 1
27859: PPUSH
27860: CALL_OW 257
27864: PUSH
27865: LD_INT 9
27867: NONEQUAL
27868: OR
27869: IFFALSE 27873
// exit ;
27871: GO 28446
// side := GetSide ( unit ) ;
27873: LD_ADDR_VAR 0 9
27877: PUSH
27878: LD_VAR 0 1
27882: PPUSH
27883: CALL_OW 255
27887: ST_TO_ADDR
// tech_space := tech_spacanom ;
27888: LD_ADDR_VAR 0 12
27892: PUSH
27893: LD_INT 29
27895: ST_TO_ADDR
// tech_time := tech_taurad ;
27896: LD_ADDR_VAR 0 13
27900: PUSH
27901: LD_INT 28
27903: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27904: LD_ADDR_VAR 0 11
27908: PUSH
27909: LD_VAR 0 1
27913: PPUSH
27914: CALL_OW 310
27918: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27919: LD_VAR 0 11
27923: PPUSH
27924: CALL_OW 247
27928: PUSH
27929: LD_INT 2
27931: EQUAL
27932: IFFALSE 27936
// exit ;
27934: GO 28446
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27936: LD_ADDR_VAR 0 8
27940: PUSH
27941: LD_INT 81
27943: PUSH
27944: LD_VAR 0 9
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 3
27955: PUSH
27956: LD_INT 21
27958: PUSH
27959: LD_INT 3
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PPUSH
27974: CALL_OW 69
27978: ST_TO_ADDR
// if not tmp then
27979: LD_VAR 0 8
27983: NOT
27984: IFFALSE 27988
// exit ;
27986: GO 28446
// if in_unit then
27988: LD_VAR 0 11
27992: IFFALSE 28016
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27994: LD_ADDR_VAR 0 10
27998: PUSH
27999: LD_VAR 0 8
28003: PPUSH
28004: LD_VAR 0 11
28008: PPUSH
28009: CALL_OW 74
28013: ST_TO_ADDR
28014: GO 28036
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28016: LD_ADDR_VAR 0 10
28020: PUSH
28021: LD_VAR 0 8
28025: PPUSH
28026: LD_VAR 0 1
28030: PPUSH
28031: CALL_OW 74
28035: ST_TO_ADDR
// if not enemy then
28036: LD_VAR 0 10
28040: NOT
28041: IFFALSE 28045
// exit ;
28043: GO 28446
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28045: LD_VAR 0 11
28049: PUSH
28050: LD_VAR 0 11
28054: PPUSH
28055: LD_VAR 0 10
28059: PPUSH
28060: CALL_OW 296
28064: PUSH
28065: LD_INT 13
28067: GREATER
28068: AND
28069: PUSH
28070: LD_VAR 0 1
28074: PPUSH
28075: LD_VAR 0 10
28079: PPUSH
28080: CALL_OW 296
28084: PUSH
28085: LD_INT 12
28087: GREATER
28088: OR
28089: IFFALSE 28093
// exit ;
28091: GO 28446
// missile := [ 1 ] ;
28093: LD_ADDR_VAR 0 14
28097: PUSH
28098: LD_INT 1
28100: PUSH
28101: EMPTY
28102: LIST
28103: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28104: LD_VAR 0 9
28108: PPUSH
28109: LD_VAR 0 12
28113: PPUSH
28114: CALL_OW 325
28118: IFFALSE 28147
// missile := Insert ( missile , missile + 1 , 2 ) ;
28120: LD_ADDR_VAR 0 14
28124: PUSH
28125: LD_VAR 0 14
28129: PPUSH
28130: LD_VAR 0 14
28134: PUSH
28135: LD_INT 1
28137: PLUS
28138: PPUSH
28139: LD_INT 2
28141: PPUSH
28142: CALL_OW 2
28146: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28147: LD_VAR 0 9
28151: PPUSH
28152: LD_VAR 0 13
28156: PPUSH
28157: CALL_OW 325
28161: PUSH
28162: LD_VAR 0 10
28166: PPUSH
28167: CALL_OW 255
28171: PPUSH
28172: LD_VAR 0 13
28176: PPUSH
28177: CALL_OW 325
28181: NOT
28182: AND
28183: IFFALSE 28212
// missile := Insert ( missile , missile + 1 , 3 ) ;
28185: LD_ADDR_VAR 0 14
28189: PUSH
28190: LD_VAR 0 14
28194: PPUSH
28195: LD_VAR 0 14
28199: PUSH
28200: LD_INT 1
28202: PLUS
28203: PPUSH
28204: LD_INT 3
28206: PPUSH
28207: CALL_OW 2
28211: ST_TO_ADDR
// if missile < 2 then
28212: LD_VAR 0 14
28216: PUSH
28217: LD_INT 2
28219: LESS
28220: IFFALSE 28224
// exit ;
28222: GO 28446
// x := GetX ( enemy ) ;
28224: LD_ADDR_VAR 0 4
28228: PUSH
28229: LD_VAR 0 10
28233: PPUSH
28234: CALL_OW 250
28238: ST_TO_ADDR
// y := GetY ( enemy ) ;
28239: LD_ADDR_VAR 0 5
28243: PUSH
28244: LD_VAR 0 10
28248: PPUSH
28249: CALL_OW 251
28253: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28254: LD_ADDR_VAR 0 6
28258: PUSH
28259: LD_VAR 0 4
28263: PUSH
28264: LD_INT 1
28266: NEG
28267: PPUSH
28268: LD_INT 1
28270: PPUSH
28271: CALL_OW 12
28275: PLUS
28276: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28277: LD_ADDR_VAR 0 7
28281: PUSH
28282: LD_VAR 0 5
28286: PUSH
28287: LD_INT 1
28289: NEG
28290: PPUSH
28291: LD_INT 1
28293: PPUSH
28294: CALL_OW 12
28298: PLUS
28299: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28300: LD_VAR 0 6
28304: PPUSH
28305: LD_VAR 0 7
28309: PPUSH
28310: CALL_OW 488
28314: NOT
28315: IFFALSE 28337
// begin _x := x ;
28317: LD_ADDR_VAR 0 6
28321: PUSH
28322: LD_VAR 0 4
28326: ST_TO_ADDR
// _y := y ;
28327: LD_ADDR_VAR 0 7
28331: PUSH
28332: LD_VAR 0 5
28336: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28337: LD_ADDR_VAR 0 3
28341: PUSH
28342: LD_INT 1
28344: PPUSH
28345: LD_VAR 0 14
28349: PPUSH
28350: CALL_OW 12
28354: ST_TO_ADDR
// case i of 1 :
28355: LD_VAR 0 3
28359: PUSH
28360: LD_INT 1
28362: DOUBLE
28363: EQUAL
28364: IFTRUE 28368
28366: GO 28385
28368: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28369: LD_VAR 0 1
28373: PPUSH
28374: LD_VAR 0 10
28378: PPUSH
28379: CALL_OW 115
28383: GO 28446
28385: LD_INT 2
28387: DOUBLE
28388: EQUAL
28389: IFTRUE 28393
28391: GO 28415
28393: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28394: LD_VAR 0 1
28398: PPUSH
28399: LD_VAR 0 6
28403: PPUSH
28404: LD_VAR 0 7
28408: PPUSH
28409: CALL_OW 153
28413: GO 28446
28415: LD_INT 3
28417: DOUBLE
28418: EQUAL
28419: IFTRUE 28423
28421: GO 28445
28423: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28424: LD_VAR 0 1
28428: PPUSH
28429: LD_VAR 0 6
28433: PPUSH
28434: LD_VAR 0 7
28438: PPUSH
28439: CALL_OW 154
28443: GO 28446
28445: POP
// end ;
28446: LD_VAR 0 2
28450: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28451: LD_INT 0
28453: PPUSH
28454: PPUSH
28455: PPUSH
28456: PPUSH
28457: PPUSH
28458: PPUSH
// if not unit or not building then
28459: LD_VAR 0 1
28463: NOT
28464: PUSH
28465: LD_VAR 0 2
28469: NOT
28470: OR
28471: IFFALSE 28475
// exit ;
28473: GO 28633
// x := GetX ( building ) ;
28475: LD_ADDR_VAR 0 5
28479: PUSH
28480: LD_VAR 0 2
28484: PPUSH
28485: CALL_OW 250
28489: ST_TO_ADDR
// y := GetY ( building ) ;
28490: LD_ADDR_VAR 0 6
28494: PUSH
28495: LD_VAR 0 2
28499: PPUSH
28500: CALL_OW 251
28504: ST_TO_ADDR
// for i = 0 to 5 do
28505: LD_ADDR_VAR 0 4
28509: PUSH
28510: DOUBLE
28511: LD_INT 0
28513: DEC
28514: ST_TO_ADDR
28515: LD_INT 5
28517: PUSH
28518: FOR_TO
28519: IFFALSE 28631
// begin _x := ShiftX ( x , i , 3 ) ;
28521: LD_ADDR_VAR 0 7
28525: PUSH
28526: LD_VAR 0 5
28530: PPUSH
28531: LD_VAR 0 4
28535: PPUSH
28536: LD_INT 3
28538: PPUSH
28539: CALL_OW 272
28543: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28544: LD_ADDR_VAR 0 8
28548: PUSH
28549: LD_VAR 0 6
28553: PPUSH
28554: LD_VAR 0 4
28558: PPUSH
28559: LD_INT 3
28561: PPUSH
28562: CALL_OW 273
28566: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28567: LD_VAR 0 7
28571: PPUSH
28572: LD_VAR 0 8
28576: PPUSH
28577: CALL_OW 488
28581: NOT
28582: IFFALSE 28586
// continue ;
28584: GO 28518
// if HexInfo ( _x , _y ) = 0 then
28586: LD_VAR 0 7
28590: PPUSH
28591: LD_VAR 0 8
28595: PPUSH
28596: CALL_OW 428
28600: PUSH
28601: LD_INT 0
28603: EQUAL
28604: IFFALSE 28629
// begin ComMoveXY ( unit , _x , _y ) ;
28606: LD_VAR 0 1
28610: PPUSH
28611: LD_VAR 0 7
28615: PPUSH
28616: LD_VAR 0 8
28620: PPUSH
28621: CALL_OW 111
// exit ;
28625: POP
28626: POP
28627: GO 28633
// end ; end ;
28629: GO 28518
28631: POP
28632: POP
// end ;
28633: LD_VAR 0 3
28637: RET
// export function ScanBase ( side , base_area ) ; begin
28638: LD_INT 0
28640: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28641: LD_ADDR_VAR 0 3
28645: PUSH
28646: LD_VAR 0 2
28650: PPUSH
28651: LD_INT 81
28653: PUSH
28654: LD_VAR 0 1
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PPUSH
28663: CALL_OW 70
28667: ST_TO_ADDR
// end ;
28668: LD_VAR 0 3
28672: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28673: LD_INT 0
28675: PPUSH
28676: PPUSH
28677: PPUSH
28678: PPUSH
// result := false ;
28679: LD_ADDR_VAR 0 2
28683: PUSH
28684: LD_INT 0
28686: ST_TO_ADDR
// side := GetSide ( unit ) ;
28687: LD_ADDR_VAR 0 3
28691: PUSH
28692: LD_VAR 0 1
28696: PPUSH
28697: CALL_OW 255
28701: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28702: LD_ADDR_VAR 0 4
28706: PUSH
28707: LD_VAR 0 1
28711: PPUSH
28712: CALL_OW 248
28716: ST_TO_ADDR
// case nat of 1 :
28717: LD_VAR 0 4
28721: PUSH
28722: LD_INT 1
28724: DOUBLE
28725: EQUAL
28726: IFTRUE 28730
28728: GO 28741
28730: POP
// tech := tech_lassight ; 2 :
28731: LD_ADDR_VAR 0 5
28735: PUSH
28736: LD_INT 12
28738: ST_TO_ADDR
28739: GO 28780
28741: LD_INT 2
28743: DOUBLE
28744: EQUAL
28745: IFTRUE 28749
28747: GO 28760
28749: POP
// tech := tech_mortar ; 3 :
28750: LD_ADDR_VAR 0 5
28754: PUSH
28755: LD_INT 41
28757: ST_TO_ADDR
28758: GO 28780
28760: LD_INT 3
28762: DOUBLE
28763: EQUAL
28764: IFTRUE 28768
28766: GO 28779
28768: POP
// tech := tech_bazooka ; end ;
28769: LD_ADDR_VAR 0 5
28773: PUSH
28774: LD_INT 44
28776: ST_TO_ADDR
28777: GO 28780
28779: POP
// if Researched ( side , tech ) then
28780: LD_VAR 0 3
28784: PPUSH
28785: LD_VAR 0 5
28789: PPUSH
28790: CALL_OW 325
28794: IFFALSE 28821
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28796: LD_ADDR_VAR 0 2
28800: PUSH
28801: LD_INT 5
28803: PUSH
28804: LD_INT 8
28806: PUSH
28807: LD_INT 9
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: LIST
28814: PUSH
28815: LD_VAR 0 4
28819: ARRAY
28820: ST_TO_ADDR
// end ;
28821: LD_VAR 0 2
28825: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28826: LD_INT 0
28828: PPUSH
28829: PPUSH
28830: PPUSH
// if not mines then
28831: LD_VAR 0 2
28835: NOT
28836: IFFALSE 28840
// exit ;
28838: GO 28984
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28840: LD_ADDR_VAR 0 5
28844: PUSH
28845: LD_INT 81
28847: PUSH
28848: LD_VAR 0 1
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 3
28859: PUSH
28860: LD_INT 21
28862: PUSH
28863: LD_INT 3
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PPUSH
28878: CALL_OW 69
28882: ST_TO_ADDR
// for i in mines do
28883: LD_ADDR_VAR 0 4
28887: PUSH
28888: LD_VAR 0 2
28892: PUSH
28893: FOR_IN
28894: IFFALSE 28982
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28896: LD_VAR 0 4
28900: PUSH
28901: LD_INT 1
28903: ARRAY
28904: PPUSH
28905: LD_VAR 0 4
28909: PUSH
28910: LD_INT 2
28912: ARRAY
28913: PPUSH
28914: CALL_OW 458
28918: NOT
28919: IFFALSE 28923
// continue ;
28921: GO 28893
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28923: LD_VAR 0 4
28927: PUSH
28928: LD_INT 1
28930: ARRAY
28931: PPUSH
28932: LD_VAR 0 4
28936: PUSH
28937: LD_INT 2
28939: ARRAY
28940: PPUSH
28941: CALL_OW 428
28945: PUSH
28946: LD_VAR 0 5
28950: IN
28951: IFFALSE 28980
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28953: LD_VAR 0 4
28957: PUSH
28958: LD_INT 1
28960: ARRAY
28961: PPUSH
28962: LD_VAR 0 4
28966: PUSH
28967: LD_INT 2
28969: ARRAY
28970: PPUSH
28971: LD_VAR 0 1
28975: PPUSH
28976: CALL_OW 456
// end ;
28980: GO 28893
28982: POP
28983: POP
// end ;
28984: LD_VAR 0 3
28988: RET
// export function Count ( array ) ; var i ; begin
28989: LD_INT 0
28991: PPUSH
28992: PPUSH
// result := 0 ;
28993: LD_ADDR_VAR 0 2
28997: PUSH
28998: LD_INT 0
29000: ST_TO_ADDR
// for i in array do
29001: LD_ADDR_VAR 0 3
29005: PUSH
29006: LD_VAR 0 1
29010: PUSH
29011: FOR_IN
29012: IFFALSE 29036
// if i then
29014: LD_VAR 0 3
29018: IFFALSE 29034
// result := result + 1 ;
29020: LD_ADDR_VAR 0 2
29024: PUSH
29025: LD_VAR 0 2
29029: PUSH
29030: LD_INT 1
29032: PLUS
29033: ST_TO_ADDR
29034: GO 29011
29036: POP
29037: POP
// end ;
29038: LD_VAR 0 2
29042: RET
// export function IsEmpty ( building ) ; begin
29043: LD_INT 0
29045: PPUSH
// if not building then
29046: LD_VAR 0 1
29050: NOT
29051: IFFALSE 29055
// exit ;
29053: GO 29098
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29055: LD_ADDR_VAR 0 2
29059: PUSH
29060: LD_VAR 0 1
29064: PUSH
29065: LD_INT 22
29067: PUSH
29068: LD_VAR 0 1
29072: PPUSH
29073: CALL_OW 255
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 58
29084: PUSH
29085: EMPTY
29086: LIST
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PPUSH
29092: CALL_OW 69
29096: IN
29097: ST_TO_ADDR
// end ;
29098: LD_VAR 0 2
29102: RET
// export function IsNotFull ( building ) ; begin
29103: LD_INT 0
29105: PPUSH
// if not building then
29106: LD_VAR 0 1
29110: NOT
29111: IFFALSE 29115
// exit ;
29113: GO 29134
// result := UnitsInside ( building ) < 6 ;
29115: LD_ADDR_VAR 0 2
29119: PUSH
29120: LD_VAR 0 1
29124: PPUSH
29125: CALL_OW 313
29129: PUSH
29130: LD_INT 6
29132: LESS
29133: ST_TO_ADDR
// end ;
29134: LD_VAR 0 2
29138: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29139: LD_INT 0
29141: PPUSH
29142: PPUSH
29143: PPUSH
29144: PPUSH
// tmp := [ ] ;
29145: LD_ADDR_VAR 0 3
29149: PUSH
29150: EMPTY
29151: ST_TO_ADDR
// list := [ ] ;
29152: LD_ADDR_VAR 0 5
29156: PUSH
29157: EMPTY
29158: ST_TO_ADDR
// for i = 16 to 25 do
29159: LD_ADDR_VAR 0 4
29163: PUSH
29164: DOUBLE
29165: LD_INT 16
29167: DEC
29168: ST_TO_ADDR
29169: LD_INT 25
29171: PUSH
29172: FOR_TO
29173: IFFALSE 29246
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29175: LD_ADDR_VAR 0 3
29179: PUSH
29180: LD_VAR 0 3
29184: PUSH
29185: LD_INT 22
29187: PUSH
29188: LD_VAR 0 1
29192: PPUSH
29193: CALL_OW 255
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 91
29204: PUSH
29205: LD_VAR 0 1
29209: PUSH
29210: LD_INT 6
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 30
29220: PUSH
29221: LD_VAR 0 4
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: LIST
29234: PUSH
29235: EMPTY
29236: LIST
29237: PPUSH
29238: CALL_OW 69
29242: ADD
29243: ST_TO_ADDR
29244: GO 29172
29246: POP
29247: POP
// for i = 1 to tmp do
29248: LD_ADDR_VAR 0 4
29252: PUSH
29253: DOUBLE
29254: LD_INT 1
29256: DEC
29257: ST_TO_ADDR
29258: LD_VAR 0 3
29262: PUSH
29263: FOR_TO
29264: IFFALSE 29352
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29266: LD_ADDR_VAR 0 5
29270: PUSH
29271: LD_VAR 0 5
29275: PUSH
29276: LD_VAR 0 3
29280: PUSH
29281: LD_VAR 0 4
29285: ARRAY
29286: PPUSH
29287: CALL_OW 266
29291: PUSH
29292: LD_VAR 0 3
29296: PUSH
29297: LD_VAR 0 4
29301: ARRAY
29302: PPUSH
29303: CALL_OW 250
29307: PUSH
29308: LD_VAR 0 3
29312: PUSH
29313: LD_VAR 0 4
29317: ARRAY
29318: PPUSH
29319: CALL_OW 251
29323: PUSH
29324: LD_VAR 0 3
29328: PUSH
29329: LD_VAR 0 4
29333: ARRAY
29334: PPUSH
29335: CALL_OW 254
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: PUSH
29346: EMPTY
29347: LIST
29348: ADD
29349: ST_TO_ADDR
29350: GO 29263
29352: POP
29353: POP
// result := list ;
29354: LD_ADDR_VAR 0 2
29358: PUSH
29359: LD_VAR 0 5
29363: ST_TO_ADDR
// end ;
29364: LD_VAR 0 2
29368: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29369: LD_INT 0
29371: PPUSH
29372: PPUSH
29373: PPUSH
29374: PPUSH
29375: PPUSH
29376: PPUSH
29377: PPUSH
// if not factory then
29378: LD_VAR 0 1
29382: NOT
29383: IFFALSE 29387
// exit ;
29385: GO 29980
// if control = control_apeman then
29387: LD_VAR 0 4
29391: PUSH
29392: LD_INT 5
29394: EQUAL
29395: IFFALSE 29504
// begin tmp := UnitsInside ( factory ) ;
29397: LD_ADDR_VAR 0 8
29401: PUSH
29402: LD_VAR 0 1
29406: PPUSH
29407: CALL_OW 313
29411: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29412: LD_VAR 0 8
29416: PPUSH
29417: LD_INT 25
29419: PUSH
29420: LD_INT 12
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PPUSH
29427: CALL_OW 72
29431: NOT
29432: IFFALSE 29442
// control := control_manual ;
29434: LD_ADDR_VAR 0 4
29438: PUSH
29439: LD_INT 1
29441: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29442: LD_ADDR_VAR 0 8
29446: PUSH
29447: LD_VAR 0 1
29451: PPUSH
29452: CALL 29139 0 1
29456: ST_TO_ADDR
// if tmp then
29457: LD_VAR 0 8
29461: IFFALSE 29504
// begin for i in tmp do
29463: LD_ADDR_VAR 0 7
29467: PUSH
29468: LD_VAR 0 8
29472: PUSH
29473: FOR_IN
29474: IFFALSE 29502
// if i [ 1 ] = b_ext_radio then
29476: LD_VAR 0 7
29480: PUSH
29481: LD_INT 1
29483: ARRAY
29484: PUSH
29485: LD_INT 22
29487: EQUAL
29488: IFFALSE 29500
// begin control := control_remote ;
29490: LD_ADDR_VAR 0 4
29494: PUSH
29495: LD_INT 2
29497: ST_TO_ADDR
// break ;
29498: GO 29502
// end ;
29500: GO 29473
29502: POP
29503: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29504: LD_VAR 0 1
29508: PPUSH
29509: LD_VAR 0 2
29513: PPUSH
29514: LD_VAR 0 3
29518: PPUSH
29519: LD_VAR 0 4
29523: PPUSH
29524: LD_VAR 0 5
29528: PPUSH
29529: CALL_OW 448
29533: IFFALSE 29568
// begin result := [ chassis , engine , control , weapon ] ;
29535: LD_ADDR_VAR 0 6
29539: PUSH
29540: LD_VAR 0 2
29544: PUSH
29545: LD_VAR 0 3
29549: PUSH
29550: LD_VAR 0 4
29554: PUSH
29555: LD_VAR 0 5
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: ST_TO_ADDR
// exit ;
29566: GO 29980
// end ; _chassis := AvailableChassisList ( factory ) ;
29568: LD_ADDR_VAR 0 9
29572: PUSH
29573: LD_VAR 0 1
29577: PPUSH
29578: CALL_OW 475
29582: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29583: LD_ADDR_VAR 0 11
29587: PUSH
29588: LD_VAR 0 1
29592: PPUSH
29593: CALL_OW 476
29597: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29598: LD_ADDR_VAR 0 12
29602: PUSH
29603: LD_VAR 0 1
29607: PPUSH
29608: CALL_OW 477
29612: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29613: LD_ADDR_VAR 0 10
29617: PUSH
29618: LD_VAR 0 1
29622: PPUSH
29623: CALL_OW 478
29627: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29628: LD_VAR 0 9
29632: NOT
29633: PUSH
29634: LD_VAR 0 11
29638: NOT
29639: OR
29640: PUSH
29641: LD_VAR 0 12
29645: NOT
29646: OR
29647: PUSH
29648: LD_VAR 0 10
29652: NOT
29653: OR
29654: IFFALSE 29689
// begin result := [ chassis , engine , control , weapon ] ;
29656: LD_ADDR_VAR 0 6
29660: PUSH
29661: LD_VAR 0 2
29665: PUSH
29666: LD_VAR 0 3
29670: PUSH
29671: LD_VAR 0 4
29675: PUSH
29676: LD_VAR 0 5
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: ST_TO_ADDR
// exit ;
29687: GO 29980
// end ; if not chassis in _chassis then
29689: LD_VAR 0 2
29693: PUSH
29694: LD_VAR 0 9
29698: IN
29699: NOT
29700: IFFALSE 29726
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29702: LD_ADDR_VAR 0 2
29706: PUSH
29707: LD_VAR 0 9
29711: PUSH
29712: LD_INT 1
29714: PPUSH
29715: LD_VAR 0 9
29719: PPUSH
29720: CALL_OW 12
29724: ARRAY
29725: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29726: LD_VAR 0 2
29730: PPUSH
29731: LD_VAR 0 3
29735: PPUSH
29736: CALL 29985 0 2
29740: NOT
29741: IFFALSE 29800
// repeat engine := _engine [ 1 ] ;
29743: LD_ADDR_VAR 0 3
29747: PUSH
29748: LD_VAR 0 11
29752: PUSH
29753: LD_INT 1
29755: ARRAY
29756: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29757: LD_ADDR_VAR 0 11
29761: PUSH
29762: LD_VAR 0 11
29766: PPUSH
29767: LD_INT 1
29769: PPUSH
29770: CALL_OW 3
29774: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29775: LD_VAR 0 2
29779: PPUSH
29780: LD_VAR 0 3
29784: PPUSH
29785: CALL 29985 0 2
29789: PUSH
29790: LD_VAR 0 11
29794: PUSH
29795: EMPTY
29796: EQUAL
29797: OR
29798: IFFALSE 29743
// if not control in _control then
29800: LD_VAR 0 4
29804: PUSH
29805: LD_VAR 0 12
29809: IN
29810: NOT
29811: IFFALSE 29837
// control := _control [ rand ( 1 , _control ) ] ;
29813: LD_ADDR_VAR 0 4
29817: PUSH
29818: LD_VAR 0 12
29822: PUSH
29823: LD_INT 1
29825: PPUSH
29826: LD_VAR 0 12
29830: PPUSH
29831: CALL_OW 12
29835: ARRAY
29836: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29837: LD_VAR 0 2
29841: PPUSH
29842: LD_VAR 0 5
29846: PPUSH
29847: CALL 30205 0 2
29851: NOT
29852: IFFALSE 29911
// repeat weapon := _weapon [ 1 ] ;
29854: LD_ADDR_VAR 0 5
29858: PUSH
29859: LD_VAR 0 10
29863: PUSH
29864: LD_INT 1
29866: ARRAY
29867: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29868: LD_ADDR_VAR 0 10
29872: PUSH
29873: LD_VAR 0 10
29877: PPUSH
29878: LD_INT 1
29880: PPUSH
29881: CALL_OW 3
29885: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29886: LD_VAR 0 2
29890: PPUSH
29891: LD_VAR 0 5
29895: PPUSH
29896: CALL 30205 0 2
29900: PUSH
29901: LD_VAR 0 10
29905: PUSH
29906: EMPTY
29907: EQUAL
29908: OR
29909: IFFALSE 29854
// result := [ ] ;
29911: LD_ADDR_VAR 0 6
29915: PUSH
29916: EMPTY
29917: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29918: LD_VAR 0 1
29922: PPUSH
29923: LD_VAR 0 2
29927: PPUSH
29928: LD_VAR 0 3
29932: PPUSH
29933: LD_VAR 0 4
29937: PPUSH
29938: LD_VAR 0 5
29942: PPUSH
29943: CALL_OW 448
29947: IFFALSE 29980
// result := [ chassis , engine , control , weapon ] ;
29949: LD_ADDR_VAR 0 6
29953: PUSH
29954: LD_VAR 0 2
29958: PUSH
29959: LD_VAR 0 3
29963: PUSH
29964: LD_VAR 0 4
29968: PUSH
29969: LD_VAR 0 5
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: ST_TO_ADDR
// end ;
29980: LD_VAR 0 6
29984: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29985: LD_INT 0
29987: PPUSH
// if not chassis or not engine then
29988: LD_VAR 0 1
29992: NOT
29993: PUSH
29994: LD_VAR 0 2
29998: NOT
29999: OR
30000: IFFALSE 30004
// exit ;
30002: GO 30200
// case engine of engine_solar :
30004: LD_VAR 0 2
30008: PUSH
30009: LD_INT 2
30011: DOUBLE
30012: EQUAL
30013: IFTRUE 30017
30015: GO 30055
30017: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30018: LD_ADDR_VAR 0 3
30022: PUSH
30023: LD_INT 11
30025: PUSH
30026: LD_INT 12
30028: PUSH
30029: LD_INT 13
30031: PUSH
30032: LD_INT 14
30034: PUSH
30035: LD_INT 1
30037: PUSH
30038: LD_INT 2
30040: PUSH
30041: LD_INT 3
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: ST_TO_ADDR
30053: GO 30184
30055: LD_INT 1
30057: DOUBLE
30058: EQUAL
30059: IFTRUE 30063
30061: GO 30125
30063: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30064: LD_ADDR_VAR 0 3
30068: PUSH
30069: LD_INT 11
30071: PUSH
30072: LD_INT 12
30074: PUSH
30075: LD_INT 13
30077: PUSH
30078: LD_INT 14
30080: PUSH
30081: LD_INT 1
30083: PUSH
30084: LD_INT 2
30086: PUSH
30087: LD_INT 3
30089: PUSH
30090: LD_INT 4
30092: PUSH
30093: LD_INT 5
30095: PUSH
30096: LD_INT 21
30098: PUSH
30099: LD_INT 23
30101: PUSH
30102: LD_INT 22
30104: PUSH
30105: LD_INT 24
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: ST_TO_ADDR
30123: GO 30184
30125: LD_INT 3
30127: DOUBLE
30128: EQUAL
30129: IFTRUE 30133
30131: GO 30183
30133: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30134: LD_ADDR_VAR 0 3
30138: PUSH
30139: LD_INT 13
30141: PUSH
30142: LD_INT 14
30144: PUSH
30145: LD_INT 2
30147: PUSH
30148: LD_INT 3
30150: PUSH
30151: LD_INT 4
30153: PUSH
30154: LD_INT 5
30156: PUSH
30157: LD_INT 21
30159: PUSH
30160: LD_INT 22
30162: PUSH
30163: LD_INT 23
30165: PUSH
30166: LD_INT 24
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: ST_TO_ADDR
30181: GO 30184
30183: POP
// result := ( chassis in result ) ;
30184: LD_ADDR_VAR 0 3
30188: PUSH
30189: LD_VAR 0 1
30193: PUSH
30194: LD_VAR 0 3
30198: IN
30199: ST_TO_ADDR
// end ;
30200: LD_VAR 0 3
30204: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30205: LD_INT 0
30207: PPUSH
// if not chassis or not weapon then
30208: LD_VAR 0 1
30212: NOT
30213: PUSH
30214: LD_VAR 0 2
30218: NOT
30219: OR
30220: IFFALSE 30224
// exit ;
30222: GO 31250
// case weapon of us_machine_gun :
30224: LD_VAR 0 2
30228: PUSH
30229: LD_INT 2
30231: DOUBLE
30232: EQUAL
30233: IFTRUE 30237
30235: GO 30267
30237: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30238: LD_ADDR_VAR 0 3
30242: PUSH
30243: LD_INT 1
30245: PUSH
30246: LD_INT 2
30248: PUSH
30249: LD_INT 3
30251: PUSH
30252: LD_INT 4
30254: PUSH
30255: LD_INT 5
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: ST_TO_ADDR
30265: GO 31234
30267: LD_INT 3
30269: DOUBLE
30270: EQUAL
30271: IFTRUE 30275
30273: GO 30305
30275: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30276: LD_ADDR_VAR 0 3
30280: PUSH
30281: LD_INT 1
30283: PUSH
30284: LD_INT 2
30286: PUSH
30287: LD_INT 3
30289: PUSH
30290: LD_INT 4
30292: PUSH
30293: LD_INT 5
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: ST_TO_ADDR
30303: GO 31234
30305: LD_INT 11
30307: DOUBLE
30308: EQUAL
30309: IFTRUE 30313
30311: GO 30343
30313: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30314: LD_ADDR_VAR 0 3
30318: PUSH
30319: LD_INT 1
30321: PUSH
30322: LD_INT 2
30324: PUSH
30325: LD_INT 3
30327: PUSH
30328: LD_INT 4
30330: PUSH
30331: LD_INT 5
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: ST_TO_ADDR
30341: GO 31234
30343: LD_INT 4
30345: DOUBLE
30346: EQUAL
30347: IFTRUE 30351
30349: GO 30377
30351: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30352: LD_ADDR_VAR 0 3
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: LD_INT 3
30362: PUSH
30363: LD_INT 4
30365: PUSH
30366: LD_INT 5
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: ST_TO_ADDR
30375: GO 31234
30377: LD_INT 5
30379: DOUBLE
30380: EQUAL
30381: IFTRUE 30385
30383: GO 30411
30385: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30386: LD_ADDR_VAR 0 3
30390: PUSH
30391: LD_INT 2
30393: PUSH
30394: LD_INT 3
30396: PUSH
30397: LD_INT 4
30399: PUSH
30400: LD_INT 5
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: ST_TO_ADDR
30409: GO 31234
30411: LD_INT 9
30413: DOUBLE
30414: EQUAL
30415: IFTRUE 30419
30417: GO 30445
30419: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30420: LD_ADDR_VAR 0 3
30424: PUSH
30425: LD_INT 2
30427: PUSH
30428: LD_INT 3
30430: PUSH
30431: LD_INT 4
30433: PUSH
30434: LD_INT 5
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: ST_TO_ADDR
30443: GO 31234
30445: LD_INT 7
30447: DOUBLE
30448: EQUAL
30449: IFTRUE 30453
30451: GO 30479
30453: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30454: LD_ADDR_VAR 0 3
30458: PUSH
30459: LD_INT 2
30461: PUSH
30462: LD_INT 3
30464: PUSH
30465: LD_INT 4
30467: PUSH
30468: LD_INT 5
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: ST_TO_ADDR
30477: GO 31234
30479: LD_INT 12
30481: DOUBLE
30482: EQUAL
30483: IFTRUE 30487
30485: GO 30513
30487: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30488: LD_ADDR_VAR 0 3
30492: PUSH
30493: LD_INT 2
30495: PUSH
30496: LD_INT 3
30498: PUSH
30499: LD_INT 4
30501: PUSH
30502: LD_INT 5
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: ST_TO_ADDR
30511: GO 31234
30513: LD_INT 13
30515: DOUBLE
30516: EQUAL
30517: IFTRUE 30521
30519: GO 30547
30521: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30522: LD_ADDR_VAR 0 3
30526: PUSH
30527: LD_INT 2
30529: PUSH
30530: LD_INT 3
30532: PUSH
30533: LD_INT 4
30535: PUSH
30536: LD_INT 5
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: ST_TO_ADDR
30545: GO 31234
30547: LD_INT 14
30549: DOUBLE
30550: EQUAL
30551: IFTRUE 30555
30553: GO 30573
30555: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30556: LD_ADDR_VAR 0 3
30560: PUSH
30561: LD_INT 4
30563: PUSH
30564: LD_INT 5
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: ST_TO_ADDR
30571: GO 31234
30573: LD_INT 6
30575: DOUBLE
30576: EQUAL
30577: IFTRUE 30581
30579: GO 30599
30581: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30582: LD_ADDR_VAR 0 3
30586: PUSH
30587: LD_INT 4
30589: PUSH
30590: LD_INT 5
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: ST_TO_ADDR
30597: GO 31234
30599: LD_INT 10
30601: DOUBLE
30602: EQUAL
30603: IFTRUE 30607
30605: GO 30625
30607: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30608: LD_ADDR_VAR 0 3
30612: PUSH
30613: LD_INT 4
30615: PUSH
30616: LD_INT 5
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: ST_TO_ADDR
30623: GO 31234
30625: LD_INT 22
30627: DOUBLE
30628: EQUAL
30629: IFTRUE 30633
30631: GO 30659
30633: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30634: LD_ADDR_VAR 0 3
30638: PUSH
30639: LD_INT 11
30641: PUSH
30642: LD_INT 12
30644: PUSH
30645: LD_INT 13
30647: PUSH
30648: LD_INT 14
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: ST_TO_ADDR
30657: GO 31234
30659: LD_INT 23
30661: DOUBLE
30662: EQUAL
30663: IFTRUE 30667
30665: GO 30693
30667: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30668: LD_ADDR_VAR 0 3
30672: PUSH
30673: LD_INT 11
30675: PUSH
30676: LD_INT 12
30678: PUSH
30679: LD_INT 13
30681: PUSH
30682: LD_INT 14
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: ST_TO_ADDR
30691: GO 31234
30693: LD_INT 24
30695: DOUBLE
30696: EQUAL
30697: IFTRUE 30701
30699: GO 30727
30701: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30702: LD_ADDR_VAR 0 3
30706: PUSH
30707: LD_INT 11
30709: PUSH
30710: LD_INT 12
30712: PUSH
30713: LD_INT 13
30715: PUSH
30716: LD_INT 14
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: ST_TO_ADDR
30725: GO 31234
30727: LD_INT 30
30729: DOUBLE
30730: EQUAL
30731: IFTRUE 30735
30733: GO 30761
30735: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30736: LD_ADDR_VAR 0 3
30740: PUSH
30741: LD_INT 11
30743: PUSH
30744: LD_INT 12
30746: PUSH
30747: LD_INT 13
30749: PUSH
30750: LD_INT 14
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: ST_TO_ADDR
30759: GO 31234
30761: LD_INT 25
30763: DOUBLE
30764: EQUAL
30765: IFTRUE 30769
30767: GO 30787
30769: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30770: LD_ADDR_VAR 0 3
30774: PUSH
30775: LD_INT 13
30777: PUSH
30778: LD_INT 14
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: ST_TO_ADDR
30785: GO 31234
30787: LD_INT 27
30789: DOUBLE
30790: EQUAL
30791: IFTRUE 30795
30793: GO 30813
30795: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30796: LD_ADDR_VAR 0 3
30800: PUSH
30801: LD_INT 13
30803: PUSH
30804: LD_INT 14
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: ST_TO_ADDR
30811: GO 31234
30813: LD_INT 28
30815: DOUBLE
30816: EQUAL
30817: IFTRUE 30821
30819: GO 30839
30821: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30822: LD_ADDR_VAR 0 3
30826: PUSH
30827: LD_INT 13
30829: PUSH
30830: LD_INT 14
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: ST_TO_ADDR
30837: GO 31234
30839: LD_INT 29
30841: DOUBLE
30842: EQUAL
30843: IFTRUE 30847
30845: GO 30865
30847: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30848: LD_ADDR_VAR 0 3
30852: PUSH
30853: LD_INT 13
30855: PUSH
30856: LD_INT 14
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: ST_TO_ADDR
30863: GO 31234
30865: LD_INT 31
30867: DOUBLE
30868: EQUAL
30869: IFTRUE 30873
30871: GO 30891
30873: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30874: LD_ADDR_VAR 0 3
30878: PUSH
30879: LD_INT 13
30881: PUSH
30882: LD_INT 14
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: ST_TO_ADDR
30889: GO 31234
30891: LD_INT 26
30893: DOUBLE
30894: EQUAL
30895: IFTRUE 30899
30897: GO 30917
30899: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30900: LD_ADDR_VAR 0 3
30904: PUSH
30905: LD_INT 13
30907: PUSH
30908: LD_INT 14
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: ST_TO_ADDR
30915: GO 31234
30917: LD_INT 42
30919: DOUBLE
30920: EQUAL
30921: IFTRUE 30925
30923: GO 30951
30925: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30926: LD_ADDR_VAR 0 3
30930: PUSH
30931: LD_INT 21
30933: PUSH
30934: LD_INT 22
30936: PUSH
30937: LD_INT 23
30939: PUSH
30940: LD_INT 24
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: ST_TO_ADDR
30949: GO 31234
30951: LD_INT 43
30953: DOUBLE
30954: EQUAL
30955: IFTRUE 30959
30957: GO 30985
30959: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30960: LD_ADDR_VAR 0 3
30964: PUSH
30965: LD_INT 21
30967: PUSH
30968: LD_INT 22
30970: PUSH
30971: LD_INT 23
30973: PUSH
30974: LD_INT 24
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: ST_TO_ADDR
30983: GO 31234
30985: LD_INT 44
30987: DOUBLE
30988: EQUAL
30989: IFTRUE 30993
30991: GO 31019
30993: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30994: LD_ADDR_VAR 0 3
30998: PUSH
30999: LD_INT 21
31001: PUSH
31002: LD_INT 22
31004: PUSH
31005: LD_INT 23
31007: PUSH
31008: LD_INT 24
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: ST_TO_ADDR
31017: GO 31234
31019: LD_INT 45
31021: DOUBLE
31022: EQUAL
31023: IFTRUE 31027
31025: GO 31053
31027: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31028: LD_ADDR_VAR 0 3
31032: PUSH
31033: LD_INT 21
31035: PUSH
31036: LD_INT 22
31038: PUSH
31039: LD_INT 23
31041: PUSH
31042: LD_INT 24
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: ST_TO_ADDR
31051: GO 31234
31053: LD_INT 49
31055: DOUBLE
31056: EQUAL
31057: IFTRUE 31061
31059: GO 31087
31061: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31062: LD_ADDR_VAR 0 3
31066: PUSH
31067: LD_INT 21
31069: PUSH
31070: LD_INT 22
31072: PUSH
31073: LD_INT 23
31075: PUSH
31076: LD_INT 24
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: ST_TO_ADDR
31085: GO 31234
31087: LD_INT 51
31089: DOUBLE
31090: EQUAL
31091: IFTRUE 31095
31093: GO 31121
31095: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31096: LD_ADDR_VAR 0 3
31100: PUSH
31101: LD_INT 21
31103: PUSH
31104: LD_INT 22
31106: PUSH
31107: LD_INT 23
31109: PUSH
31110: LD_INT 24
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: ST_TO_ADDR
31119: GO 31234
31121: LD_INT 52
31123: DOUBLE
31124: EQUAL
31125: IFTRUE 31129
31127: GO 31155
31129: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31130: LD_ADDR_VAR 0 3
31134: PUSH
31135: LD_INT 21
31137: PUSH
31138: LD_INT 22
31140: PUSH
31141: LD_INT 23
31143: PUSH
31144: LD_INT 24
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: ST_TO_ADDR
31153: GO 31234
31155: LD_INT 53
31157: DOUBLE
31158: EQUAL
31159: IFTRUE 31163
31161: GO 31181
31163: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31164: LD_ADDR_VAR 0 3
31168: PUSH
31169: LD_INT 23
31171: PUSH
31172: LD_INT 24
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: ST_TO_ADDR
31179: GO 31234
31181: LD_INT 46
31183: DOUBLE
31184: EQUAL
31185: IFTRUE 31189
31187: GO 31207
31189: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31190: LD_ADDR_VAR 0 3
31194: PUSH
31195: LD_INT 23
31197: PUSH
31198: LD_INT 24
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: ST_TO_ADDR
31205: GO 31234
31207: LD_INT 47
31209: DOUBLE
31210: EQUAL
31211: IFTRUE 31215
31213: GO 31233
31215: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31216: LD_ADDR_VAR 0 3
31220: PUSH
31221: LD_INT 23
31223: PUSH
31224: LD_INT 24
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: ST_TO_ADDR
31231: GO 31234
31233: POP
// result := ( chassis in result ) ;
31234: LD_ADDR_VAR 0 3
31238: PUSH
31239: LD_VAR 0 1
31243: PUSH
31244: LD_VAR 0 3
31248: IN
31249: ST_TO_ADDR
// end ;
31250: LD_VAR 0 3
31254: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31255: LD_INT 0
31257: PPUSH
31258: PPUSH
31259: PPUSH
31260: PPUSH
31261: PPUSH
31262: PPUSH
31263: PPUSH
// result := array ;
31264: LD_ADDR_VAR 0 5
31268: PUSH
31269: LD_VAR 0 1
31273: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31274: LD_VAR 0 1
31278: NOT
31279: PUSH
31280: LD_VAR 0 2
31284: NOT
31285: OR
31286: PUSH
31287: LD_VAR 0 3
31291: NOT
31292: OR
31293: PUSH
31294: LD_VAR 0 2
31298: PUSH
31299: LD_VAR 0 1
31303: GREATER
31304: OR
31305: PUSH
31306: LD_VAR 0 3
31310: PUSH
31311: LD_VAR 0 1
31315: GREATER
31316: OR
31317: IFFALSE 31321
// exit ;
31319: GO 31617
// if direction then
31321: LD_VAR 0 4
31325: IFFALSE 31389
// begin d := 1 ;
31327: LD_ADDR_VAR 0 9
31331: PUSH
31332: LD_INT 1
31334: ST_TO_ADDR
// if i_from > i_to then
31335: LD_VAR 0 2
31339: PUSH
31340: LD_VAR 0 3
31344: GREATER
31345: IFFALSE 31371
// length := ( array - i_from ) + i_to else
31347: LD_ADDR_VAR 0 11
31351: PUSH
31352: LD_VAR 0 1
31356: PUSH
31357: LD_VAR 0 2
31361: MINUS
31362: PUSH
31363: LD_VAR 0 3
31367: PLUS
31368: ST_TO_ADDR
31369: GO 31387
// length := i_to - i_from ;
31371: LD_ADDR_VAR 0 11
31375: PUSH
31376: LD_VAR 0 3
31380: PUSH
31381: LD_VAR 0 2
31385: MINUS
31386: ST_TO_ADDR
// end else
31387: GO 31450
// begin d := - 1 ;
31389: LD_ADDR_VAR 0 9
31393: PUSH
31394: LD_INT 1
31396: NEG
31397: ST_TO_ADDR
// if i_from > i_to then
31398: LD_VAR 0 2
31402: PUSH
31403: LD_VAR 0 3
31407: GREATER
31408: IFFALSE 31428
// length := i_from - i_to else
31410: LD_ADDR_VAR 0 11
31414: PUSH
31415: LD_VAR 0 2
31419: PUSH
31420: LD_VAR 0 3
31424: MINUS
31425: ST_TO_ADDR
31426: GO 31450
// length := ( array - i_to ) + i_from ;
31428: LD_ADDR_VAR 0 11
31432: PUSH
31433: LD_VAR 0 1
31437: PUSH
31438: LD_VAR 0 3
31442: MINUS
31443: PUSH
31444: LD_VAR 0 2
31448: PLUS
31449: ST_TO_ADDR
// end ; if not length then
31450: LD_VAR 0 11
31454: NOT
31455: IFFALSE 31459
// exit ;
31457: GO 31617
// tmp := array ;
31459: LD_ADDR_VAR 0 10
31463: PUSH
31464: LD_VAR 0 1
31468: ST_TO_ADDR
// for i = 1 to length do
31469: LD_ADDR_VAR 0 6
31473: PUSH
31474: DOUBLE
31475: LD_INT 1
31477: DEC
31478: ST_TO_ADDR
31479: LD_VAR 0 11
31483: PUSH
31484: FOR_TO
31485: IFFALSE 31605
// begin for j = 1 to array do
31487: LD_ADDR_VAR 0 7
31491: PUSH
31492: DOUBLE
31493: LD_INT 1
31495: DEC
31496: ST_TO_ADDR
31497: LD_VAR 0 1
31501: PUSH
31502: FOR_TO
31503: IFFALSE 31591
// begin k := j + d ;
31505: LD_ADDR_VAR 0 8
31509: PUSH
31510: LD_VAR 0 7
31514: PUSH
31515: LD_VAR 0 9
31519: PLUS
31520: ST_TO_ADDR
// if k > array then
31521: LD_VAR 0 8
31525: PUSH
31526: LD_VAR 0 1
31530: GREATER
31531: IFFALSE 31541
// k := 1 ;
31533: LD_ADDR_VAR 0 8
31537: PUSH
31538: LD_INT 1
31540: ST_TO_ADDR
// if not k then
31541: LD_VAR 0 8
31545: NOT
31546: IFFALSE 31558
// k := array ;
31548: LD_ADDR_VAR 0 8
31552: PUSH
31553: LD_VAR 0 1
31557: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31558: LD_ADDR_VAR 0 10
31562: PUSH
31563: LD_VAR 0 10
31567: PPUSH
31568: LD_VAR 0 8
31572: PPUSH
31573: LD_VAR 0 1
31577: PUSH
31578: LD_VAR 0 7
31582: ARRAY
31583: PPUSH
31584: CALL_OW 1
31588: ST_TO_ADDR
// end ;
31589: GO 31502
31591: POP
31592: POP
// array := tmp ;
31593: LD_ADDR_VAR 0 1
31597: PUSH
31598: LD_VAR 0 10
31602: ST_TO_ADDR
// end ;
31603: GO 31484
31605: POP
31606: POP
// result := array ;
31607: LD_ADDR_VAR 0 5
31611: PUSH
31612: LD_VAR 0 1
31616: ST_TO_ADDR
// end ;
31617: LD_VAR 0 5
31621: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31622: LD_INT 0
31624: PPUSH
31625: PPUSH
// result := 0 ;
31626: LD_ADDR_VAR 0 3
31630: PUSH
31631: LD_INT 0
31633: ST_TO_ADDR
// if not array or not value in array then
31634: LD_VAR 0 1
31638: NOT
31639: PUSH
31640: LD_VAR 0 2
31644: PUSH
31645: LD_VAR 0 1
31649: IN
31650: NOT
31651: OR
31652: IFFALSE 31656
// exit ;
31654: GO 31710
// for i = 1 to array do
31656: LD_ADDR_VAR 0 4
31660: PUSH
31661: DOUBLE
31662: LD_INT 1
31664: DEC
31665: ST_TO_ADDR
31666: LD_VAR 0 1
31670: PUSH
31671: FOR_TO
31672: IFFALSE 31708
// if value = array [ i ] then
31674: LD_VAR 0 2
31678: PUSH
31679: LD_VAR 0 1
31683: PUSH
31684: LD_VAR 0 4
31688: ARRAY
31689: EQUAL
31690: IFFALSE 31706
// begin result := i ;
31692: LD_ADDR_VAR 0 3
31696: PUSH
31697: LD_VAR 0 4
31701: ST_TO_ADDR
// exit ;
31702: POP
31703: POP
31704: GO 31710
// end ;
31706: GO 31671
31708: POP
31709: POP
// end ;
31710: LD_VAR 0 3
31714: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31715: LD_INT 0
31717: PPUSH
// vc_chassis := chassis ;
31718: LD_ADDR_OWVAR 37
31722: PUSH
31723: LD_VAR 0 1
31727: ST_TO_ADDR
// vc_engine := engine ;
31728: LD_ADDR_OWVAR 39
31732: PUSH
31733: LD_VAR 0 2
31737: ST_TO_ADDR
// vc_control := control ;
31738: LD_ADDR_OWVAR 38
31742: PUSH
31743: LD_VAR 0 3
31747: ST_TO_ADDR
// vc_weapon := weapon ;
31748: LD_ADDR_OWVAR 40
31752: PUSH
31753: LD_VAR 0 4
31757: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31758: LD_ADDR_OWVAR 41
31762: PUSH
31763: LD_VAR 0 5
31767: ST_TO_ADDR
// end ;
31768: LD_VAR 0 6
31772: RET
// export function WantPlant ( unit ) ; var task ; begin
31773: LD_INT 0
31775: PPUSH
31776: PPUSH
// result := false ;
31777: LD_ADDR_VAR 0 2
31781: PUSH
31782: LD_INT 0
31784: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31785: LD_ADDR_VAR 0 3
31789: PUSH
31790: LD_VAR 0 1
31794: PPUSH
31795: CALL_OW 437
31799: ST_TO_ADDR
// if task then
31800: LD_VAR 0 3
31804: IFFALSE 31832
// if task [ 1 ] [ 1 ] = p then
31806: LD_VAR 0 3
31810: PUSH
31811: LD_INT 1
31813: ARRAY
31814: PUSH
31815: LD_INT 1
31817: ARRAY
31818: PUSH
31819: LD_STRING p
31821: EQUAL
31822: IFFALSE 31832
// result := true ;
31824: LD_ADDR_VAR 0 2
31828: PUSH
31829: LD_INT 1
31831: ST_TO_ADDR
// end ;
31832: LD_VAR 0 2
31836: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31837: LD_INT 0
31839: PPUSH
31840: PPUSH
31841: PPUSH
31842: PPUSH
// if pos < 1 then
31843: LD_VAR 0 2
31847: PUSH
31848: LD_INT 1
31850: LESS
31851: IFFALSE 31855
// exit ;
31853: GO 32158
// if pos = 1 then
31855: LD_VAR 0 2
31859: PUSH
31860: LD_INT 1
31862: EQUAL
31863: IFFALSE 31896
// result := Replace ( arr , pos [ 1 ] , value ) else
31865: LD_ADDR_VAR 0 4
31869: PUSH
31870: LD_VAR 0 1
31874: PPUSH
31875: LD_VAR 0 2
31879: PUSH
31880: LD_INT 1
31882: ARRAY
31883: PPUSH
31884: LD_VAR 0 3
31888: PPUSH
31889: CALL_OW 1
31893: ST_TO_ADDR
31894: GO 32158
// begin tmp := arr ;
31896: LD_ADDR_VAR 0 6
31900: PUSH
31901: LD_VAR 0 1
31905: ST_TO_ADDR
// s_arr := [ tmp ] ;
31906: LD_ADDR_VAR 0 7
31910: PUSH
31911: LD_VAR 0 6
31915: PUSH
31916: EMPTY
31917: LIST
31918: ST_TO_ADDR
// for i = 1 to pos - 1 do
31919: LD_ADDR_VAR 0 5
31923: PUSH
31924: DOUBLE
31925: LD_INT 1
31927: DEC
31928: ST_TO_ADDR
31929: LD_VAR 0 2
31933: PUSH
31934: LD_INT 1
31936: MINUS
31937: PUSH
31938: FOR_TO
31939: IFFALSE 31984
// begin tmp := tmp [ pos [ i ] ] ;
31941: LD_ADDR_VAR 0 6
31945: PUSH
31946: LD_VAR 0 6
31950: PUSH
31951: LD_VAR 0 2
31955: PUSH
31956: LD_VAR 0 5
31960: ARRAY
31961: ARRAY
31962: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31963: LD_ADDR_VAR 0 7
31967: PUSH
31968: LD_VAR 0 7
31972: PUSH
31973: LD_VAR 0 6
31977: PUSH
31978: EMPTY
31979: LIST
31980: ADD
31981: ST_TO_ADDR
// end ;
31982: GO 31938
31984: POP
31985: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31986: LD_ADDR_VAR 0 6
31990: PUSH
31991: LD_VAR 0 6
31995: PPUSH
31996: LD_VAR 0 2
32000: PUSH
32001: LD_VAR 0 2
32005: ARRAY
32006: PPUSH
32007: LD_VAR 0 3
32011: PPUSH
32012: CALL_OW 1
32016: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32017: LD_ADDR_VAR 0 7
32021: PUSH
32022: LD_VAR 0 7
32026: PPUSH
32027: LD_VAR 0 7
32031: PPUSH
32032: LD_VAR 0 6
32036: PPUSH
32037: CALL_OW 1
32041: ST_TO_ADDR
// for i = s_arr downto 2 do
32042: LD_ADDR_VAR 0 5
32046: PUSH
32047: DOUBLE
32048: LD_VAR 0 7
32052: INC
32053: ST_TO_ADDR
32054: LD_INT 2
32056: PUSH
32057: FOR_DOWNTO
32058: IFFALSE 32142
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32060: LD_ADDR_VAR 0 6
32064: PUSH
32065: LD_VAR 0 7
32069: PUSH
32070: LD_VAR 0 5
32074: PUSH
32075: LD_INT 1
32077: MINUS
32078: ARRAY
32079: PPUSH
32080: LD_VAR 0 2
32084: PUSH
32085: LD_VAR 0 5
32089: PUSH
32090: LD_INT 1
32092: MINUS
32093: ARRAY
32094: PPUSH
32095: LD_VAR 0 7
32099: PUSH
32100: LD_VAR 0 5
32104: ARRAY
32105: PPUSH
32106: CALL_OW 1
32110: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32111: LD_ADDR_VAR 0 7
32115: PUSH
32116: LD_VAR 0 7
32120: PPUSH
32121: LD_VAR 0 5
32125: PUSH
32126: LD_INT 1
32128: MINUS
32129: PPUSH
32130: LD_VAR 0 6
32134: PPUSH
32135: CALL_OW 1
32139: ST_TO_ADDR
// end ;
32140: GO 32057
32142: POP
32143: POP
// result := s_arr [ 1 ] ;
32144: LD_ADDR_VAR 0 4
32148: PUSH
32149: LD_VAR 0 7
32153: PUSH
32154: LD_INT 1
32156: ARRAY
32157: ST_TO_ADDR
// end ; end ;
32158: LD_VAR 0 4
32162: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32163: LD_INT 0
32165: PPUSH
32166: PPUSH
// if not list then
32167: LD_VAR 0 1
32171: NOT
32172: IFFALSE 32176
// exit ;
32174: GO 32267
// i := list [ pos1 ] ;
32176: LD_ADDR_VAR 0 5
32180: PUSH
32181: LD_VAR 0 1
32185: PUSH
32186: LD_VAR 0 2
32190: ARRAY
32191: ST_TO_ADDR
// if not i then
32192: LD_VAR 0 5
32196: NOT
32197: IFFALSE 32201
// exit ;
32199: GO 32267
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32201: LD_ADDR_VAR 0 1
32205: PUSH
32206: LD_VAR 0 1
32210: PPUSH
32211: LD_VAR 0 2
32215: PPUSH
32216: LD_VAR 0 1
32220: PUSH
32221: LD_VAR 0 3
32225: ARRAY
32226: PPUSH
32227: CALL_OW 1
32231: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32232: LD_ADDR_VAR 0 1
32236: PUSH
32237: LD_VAR 0 1
32241: PPUSH
32242: LD_VAR 0 3
32246: PPUSH
32247: LD_VAR 0 5
32251: PPUSH
32252: CALL_OW 1
32256: ST_TO_ADDR
// result := list ;
32257: LD_ADDR_VAR 0 4
32261: PUSH
32262: LD_VAR 0 1
32266: ST_TO_ADDR
// end ;
32267: LD_VAR 0 4
32271: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32272: LD_INT 0
32274: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32275: LD_ADDR_VAR 0 5
32279: PUSH
32280: LD_VAR 0 1
32284: PPUSH
32285: CALL_OW 250
32289: PPUSH
32290: LD_VAR 0 1
32294: PPUSH
32295: CALL_OW 251
32299: PPUSH
32300: LD_VAR 0 2
32304: PPUSH
32305: LD_VAR 0 3
32309: PPUSH
32310: LD_VAR 0 4
32314: PPUSH
32315: CALL 32325 0 5
32319: ST_TO_ADDR
// end ;
32320: LD_VAR 0 5
32324: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32325: LD_INT 0
32327: PPUSH
32328: PPUSH
32329: PPUSH
32330: PPUSH
// if not list then
32331: LD_VAR 0 3
32335: NOT
32336: IFFALSE 32340
// exit ;
32338: GO 32728
// result := [ ] ;
32340: LD_ADDR_VAR 0 6
32344: PUSH
32345: EMPTY
32346: ST_TO_ADDR
// for i in list do
32347: LD_ADDR_VAR 0 7
32351: PUSH
32352: LD_VAR 0 3
32356: PUSH
32357: FOR_IN
32358: IFFALSE 32560
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32360: LD_ADDR_VAR 0 9
32364: PUSH
32365: LD_VAR 0 7
32369: PPUSH
32370: LD_VAR 0 1
32374: PPUSH
32375: LD_VAR 0 2
32379: PPUSH
32380: CALL_OW 297
32384: ST_TO_ADDR
// if not result then
32385: LD_VAR 0 6
32389: NOT
32390: IFFALSE 32416
// result := [ [ i , tmp ] ] else
32392: LD_ADDR_VAR 0 6
32396: PUSH
32397: LD_VAR 0 7
32401: PUSH
32402: LD_VAR 0 9
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: EMPTY
32412: LIST
32413: ST_TO_ADDR
32414: GO 32558
// begin if result [ result ] [ 2 ] < tmp then
32416: LD_VAR 0 6
32420: PUSH
32421: LD_VAR 0 6
32425: ARRAY
32426: PUSH
32427: LD_INT 2
32429: ARRAY
32430: PUSH
32431: LD_VAR 0 9
32435: LESS
32436: IFFALSE 32478
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32438: LD_ADDR_VAR 0 6
32442: PUSH
32443: LD_VAR 0 6
32447: PPUSH
32448: LD_VAR 0 6
32452: PUSH
32453: LD_INT 1
32455: PLUS
32456: PPUSH
32457: LD_VAR 0 7
32461: PUSH
32462: LD_VAR 0 9
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PPUSH
32471: CALL_OW 2
32475: ST_TO_ADDR
32476: GO 32558
// for j = 1 to result do
32478: LD_ADDR_VAR 0 8
32482: PUSH
32483: DOUBLE
32484: LD_INT 1
32486: DEC
32487: ST_TO_ADDR
32488: LD_VAR 0 6
32492: PUSH
32493: FOR_TO
32494: IFFALSE 32556
// begin if tmp < result [ j ] [ 2 ] then
32496: LD_VAR 0 9
32500: PUSH
32501: LD_VAR 0 6
32505: PUSH
32506: LD_VAR 0 8
32510: ARRAY
32511: PUSH
32512: LD_INT 2
32514: ARRAY
32515: LESS
32516: IFFALSE 32554
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32518: LD_ADDR_VAR 0 6
32522: PUSH
32523: LD_VAR 0 6
32527: PPUSH
32528: LD_VAR 0 8
32532: PPUSH
32533: LD_VAR 0 7
32537: PUSH
32538: LD_VAR 0 9
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PPUSH
32547: CALL_OW 2
32551: ST_TO_ADDR
// break ;
32552: GO 32556
// end ; end ;
32554: GO 32493
32556: POP
32557: POP
// end ; end ;
32558: GO 32357
32560: POP
32561: POP
// if result and not asc then
32562: LD_VAR 0 6
32566: PUSH
32567: LD_VAR 0 4
32571: NOT
32572: AND
32573: IFFALSE 32648
// begin tmp := result ;
32575: LD_ADDR_VAR 0 9
32579: PUSH
32580: LD_VAR 0 6
32584: ST_TO_ADDR
// for i = tmp downto 1 do
32585: LD_ADDR_VAR 0 7
32589: PUSH
32590: DOUBLE
32591: LD_VAR 0 9
32595: INC
32596: ST_TO_ADDR
32597: LD_INT 1
32599: PUSH
32600: FOR_DOWNTO
32601: IFFALSE 32646
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32603: LD_ADDR_VAR 0 6
32607: PUSH
32608: LD_VAR 0 6
32612: PPUSH
32613: LD_VAR 0 9
32617: PUSH
32618: LD_VAR 0 7
32622: MINUS
32623: PUSH
32624: LD_INT 1
32626: PLUS
32627: PPUSH
32628: LD_VAR 0 9
32632: PUSH
32633: LD_VAR 0 7
32637: ARRAY
32638: PPUSH
32639: CALL_OW 1
32643: ST_TO_ADDR
32644: GO 32600
32646: POP
32647: POP
// end ; tmp := [ ] ;
32648: LD_ADDR_VAR 0 9
32652: PUSH
32653: EMPTY
32654: ST_TO_ADDR
// if mode then
32655: LD_VAR 0 5
32659: IFFALSE 32728
// begin for i = 1 to result do
32661: LD_ADDR_VAR 0 7
32665: PUSH
32666: DOUBLE
32667: LD_INT 1
32669: DEC
32670: ST_TO_ADDR
32671: LD_VAR 0 6
32675: PUSH
32676: FOR_TO
32677: IFFALSE 32716
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32679: LD_ADDR_VAR 0 9
32683: PUSH
32684: LD_VAR 0 9
32688: PPUSH
32689: LD_VAR 0 7
32693: PPUSH
32694: LD_VAR 0 6
32698: PUSH
32699: LD_VAR 0 7
32703: ARRAY
32704: PUSH
32705: LD_INT 1
32707: ARRAY
32708: PPUSH
32709: CALL_OW 1
32713: ST_TO_ADDR
32714: GO 32676
32716: POP
32717: POP
// result := tmp ;
32718: LD_ADDR_VAR 0 6
32722: PUSH
32723: LD_VAR 0 9
32727: ST_TO_ADDR
// end ; end ;
32728: LD_VAR 0 6
32732: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32733: LD_INT 0
32735: PPUSH
32736: PPUSH
32737: PPUSH
32738: PPUSH
32739: PPUSH
32740: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32741: LD_ADDR_VAR 0 5
32745: PUSH
32746: LD_INT 0
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: LD_INT 0
32754: PUSH
32755: EMPTY
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: ST_TO_ADDR
// if not x or not y then
32763: LD_VAR 0 2
32767: NOT
32768: PUSH
32769: LD_VAR 0 3
32773: NOT
32774: OR
32775: IFFALSE 32779
// exit ;
32777: GO 34425
// if not range then
32779: LD_VAR 0 4
32783: NOT
32784: IFFALSE 32794
// range := 10 ;
32786: LD_ADDR_VAR 0 4
32790: PUSH
32791: LD_INT 10
32793: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32794: LD_ADDR_VAR 0 8
32798: PUSH
32799: LD_INT 81
32801: PUSH
32802: LD_VAR 0 1
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 92
32813: PUSH
32814: LD_VAR 0 2
32818: PUSH
32819: LD_VAR 0 3
32823: PUSH
32824: LD_VAR 0 4
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 3
32837: PUSH
32838: LD_INT 21
32840: PUSH
32841: LD_INT 3
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: LIST
32856: PPUSH
32857: CALL_OW 69
32861: ST_TO_ADDR
// if not tmp then
32862: LD_VAR 0 8
32866: NOT
32867: IFFALSE 32871
// exit ;
32869: GO 34425
// for i in tmp do
32871: LD_ADDR_VAR 0 6
32875: PUSH
32876: LD_VAR 0 8
32880: PUSH
32881: FOR_IN
32882: IFFALSE 34400
// begin points := [ 0 , 0 , 0 ] ;
32884: LD_ADDR_VAR 0 9
32888: PUSH
32889: LD_INT 0
32891: PUSH
32892: LD_INT 0
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: LIST
32902: ST_TO_ADDR
// bpoints := 1 ;
32903: LD_ADDR_VAR 0 10
32907: PUSH
32908: LD_INT 1
32910: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32911: LD_VAR 0 6
32915: PPUSH
32916: CALL_OW 247
32920: PUSH
32921: LD_INT 1
32923: DOUBLE
32924: EQUAL
32925: IFTRUE 32929
32927: GO 33507
32929: POP
// begin if GetClass ( i ) = 1 then
32930: LD_VAR 0 6
32934: PPUSH
32935: CALL_OW 257
32939: PUSH
32940: LD_INT 1
32942: EQUAL
32943: IFFALSE 32964
// points := [ 10 , 5 , 3 ] ;
32945: LD_ADDR_VAR 0 9
32949: PUSH
32950: LD_INT 10
32952: PUSH
32953: LD_INT 5
32955: PUSH
32956: LD_INT 3
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: LIST
32963: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32964: LD_VAR 0 6
32968: PPUSH
32969: CALL_OW 257
32973: PUSH
32974: LD_INT 2
32976: PUSH
32977: LD_INT 3
32979: PUSH
32980: LD_INT 4
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: IN
32988: IFFALSE 33009
// points := [ 3 , 2 , 1 ] ;
32990: LD_ADDR_VAR 0 9
32994: PUSH
32995: LD_INT 3
32997: PUSH
32998: LD_INT 2
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: LIST
33008: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33009: LD_VAR 0 6
33013: PPUSH
33014: CALL_OW 257
33018: PUSH
33019: LD_INT 5
33021: EQUAL
33022: IFFALSE 33043
// points := [ 130 , 5 , 2 ] ;
33024: LD_ADDR_VAR 0 9
33028: PUSH
33029: LD_INT 130
33031: PUSH
33032: LD_INT 5
33034: PUSH
33035: LD_INT 2
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: LIST
33042: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33043: LD_VAR 0 6
33047: PPUSH
33048: CALL_OW 257
33052: PUSH
33053: LD_INT 8
33055: EQUAL
33056: IFFALSE 33077
// points := [ 35 , 35 , 30 ] ;
33058: LD_ADDR_VAR 0 9
33062: PUSH
33063: LD_INT 35
33065: PUSH
33066: LD_INT 35
33068: PUSH
33069: LD_INT 30
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: LIST
33076: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33077: LD_VAR 0 6
33081: PPUSH
33082: CALL_OW 257
33086: PUSH
33087: LD_INT 9
33089: EQUAL
33090: IFFALSE 33111
// points := [ 20 , 55 , 40 ] ;
33092: LD_ADDR_VAR 0 9
33096: PUSH
33097: LD_INT 20
33099: PUSH
33100: LD_INT 55
33102: PUSH
33103: LD_INT 40
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: LIST
33110: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33111: LD_VAR 0 6
33115: PPUSH
33116: CALL_OW 257
33120: PUSH
33121: LD_INT 12
33123: PUSH
33124: LD_INT 16
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: IN
33131: IFFALSE 33152
// points := [ 5 , 3 , 2 ] ;
33133: LD_ADDR_VAR 0 9
33137: PUSH
33138: LD_INT 5
33140: PUSH
33141: LD_INT 3
33143: PUSH
33144: LD_INT 2
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: LIST
33151: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33152: LD_VAR 0 6
33156: PPUSH
33157: CALL_OW 257
33161: PUSH
33162: LD_INT 17
33164: EQUAL
33165: IFFALSE 33186
// points := [ 100 , 50 , 75 ] ;
33167: LD_ADDR_VAR 0 9
33171: PUSH
33172: LD_INT 100
33174: PUSH
33175: LD_INT 50
33177: PUSH
33178: LD_INT 75
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: LIST
33185: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33186: LD_VAR 0 6
33190: PPUSH
33191: CALL_OW 257
33195: PUSH
33196: LD_INT 15
33198: EQUAL
33199: IFFALSE 33220
// points := [ 10 , 5 , 3 ] ;
33201: LD_ADDR_VAR 0 9
33205: PUSH
33206: LD_INT 10
33208: PUSH
33209: LD_INT 5
33211: PUSH
33212: LD_INT 3
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: LIST
33219: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33220: LD_VAR 0 6
33224: PPUSH
33225: CALL_OW 257
33229: PUSH
33230: LD_INT 14
33232: EQUAL
33233: IFFALSE 33254
// points := [ 10 , 0 , 0 ] ;
33235: LD_ADDR_VAR 0 9
33239: PUSH
33240: LD_INT 10
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: LD_INT 0
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: LIST
33253: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33254: LD_VAR 0 6
33258: PPUSH
33259: CALL_OW 257
33263: PUSH
33264: LD_INT 11
33266: EQUAL
33267: IFFALSE 33288
// points := [ 30 , 10 , 5 ] ;
33269: LD_ADDR_VAR 0 9
33273: PUSH
33274: LD_INT 30
33276: PUSH
33277: LD_INT 10
33279: PUSH
33280: LD_INT 5
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: LIST
33287: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33288: LD_VAR 0 1
33292: PPUSH
33293: LD_INT 5
33295: PPUSH
33296: CALL_OW 321
33300: PUSH
33301: LD_INT 2
33303: EQUAL
33304: IFFALSE 33321
// bpoints := bpoints * 1.8 ;
33306: LD_ADDR_VAR 0 10
33310: PUSH
33311: LD_VAR 0 10
33315: PUSH
33316: LD_REAL  1.80000000000000E+0000
33319: MUL
33320: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33321: LD_VAR 0 6
33325: PPUSH
33326: CALL_OW 257
33330: PUSH
33331: LD_INT 1
33333: PUSH
33334: LD_INT 2
33336: PUSH
33337: LD_INT 3
33339: PUSH
33340: LD_INT 4
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: IN
33349: PUSH
33350: LD_VAR 0 1
33354: PPUSH
33355: LD_INT 51
33357: PPUSH
33358: CALL_OW 321
33362: PUSH
33363: LD_INT 2
33365: EQUAL
33366: AND
33367: IFFALSE 33384
// bpoints := bpoints * 1.2 ;
33369: LD_ADDR_VAR 0 10
33373: PUSH
33374: LD_VAR 0 10
33378: PUSH
33379: LD_REAL  1.20000000000000E+0000
33382: MUL
33383: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33384: LD_VAR 0 6
33388: PPUSH
33389: CALL_OW 257
33393: PUSH
33394: LD_INT 5
33396: PUSH
33397: LD_INT 7
33399: PUSH
33400: LD_INT 9
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: LIST
33407: IN
33408: PUSH
33409: LD_VAR 0 1
33413: PPUSH
33414: LD_INT 52
33416: PPUSH
33417: CALL_OW 321
33421: PUSH
33422: LD_INT 2
33424: EQUAL
33425: AND
33426: IFFALSE 33443
// bpoints := bpoints * 1.5 ;
33428: LD_ADDR_VAR 0 10
33432: PUSH
33433: LD_VAR 0 10
33437: PUSH
33438: LD_REAL  1.50000000000000E+0000
33441: MUL
33442: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33443: LD_VAR 0 1
33447: PPUSH
33448: LD_INT 66
33450: PPUSH
33451: CALL_OW 321
33455: PUSH
33456: LD_INT 2
33458: EQUAL
33459: IFFALSE 33476
// bpoints := bpoints * 1.1 ;
33461: LD_ADDR_VAR 0 10
33465: PUSH
33466: LD_VAR 0 10
33470: PUSH
33471: LD_REAL  1.10000000000000E+0000
33474: MUL
33475: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33476: LD_ADDR_VAR 0 10
33480: PUSH
33481: LD_VAR 0 10
33485: PUSH
33486: LD_VAR 0 6
33490: PPUSH
33491: LD_INT 1
33493: PPUSH
33494: CALL_OW 259
33498: PUSH
33499: LD_REAL  1.15000000000000E+0000
33502: MUL
33503: MUL
33504: ST_TO_ADDR
// end ; unit_vehicle :
33505: GO 34329
33507: LD_INT 2
33509: DOUBLE
33510: EQUAL
33511: IFTRUE 33515
33513: GO 34317
33515: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33516: LD_VAR 0 6
33520: PPUSH
33521: CALL_OW 264
33525: PUSH
33526: LD_INT 2
33528: PUSH
33529: LD_INT 42
33531: PUSH
33532: LD_INT 24
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: LIST
33539: IN
33540: IFFALSE 33561
// points := [ 25 , 5 , 3 ] ;
33542: LD_ADDR_VAR 0 9
33546: PUSH
33547: LD_INT 25
33549: PUSH
33550: LD_INT 5
33552: PUSH
33553: LD_INT 3
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: LIST
33560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33561: LD_VAR 0 6
33565: PPUSH
33566: CALL_OW 264
33570: PUSH
33571: LD_INT 4
33573: PUSH
33574: LD_INT 43
33576: PUSH
33577: LD_INT 25
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: LIST
33584: IN
33585: IFFALSE 33606
// points := [ 40 , 15 , 5 ] ;
33587: LD_ADDR_VAR 0 9
33591: PUSH
33592: LD_INT 40
33594: PUSH
33595: LD_INT 15
33597: PUSH
33598: LD_INT 5
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: LIST
33605: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33606: LD_VAR 0 6
33610: PPUSH
33611: CALL_OW 264
33615: PUSH
33616: LD_INT 3
33618: PUSH
33619: LD_INT 23
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: IN
33626: IFFALSE 33647
// points := [ 7 , 25 , 8 ] ;
33628: LD_ADDR_VAR 0 9
33632: PUSH
33633: LD_INT 7
33635: PUSH
33636: LD_INT 25
33638: PUSH
33639: LD_INT 8
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33647: LD_VAR 0 6
33651: PPUSH
33652: CALL_OW 264
33656: PUSH
33657: LD_INT 5
33659: PUSH
33660: LD_INT 27
33662: PUSH
33663: LD_INT 44
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: LIST
33670: IN
33671: IFFALSE 33692
// points := [ 14 , 50 , 16 ] ;
33673: LD_ADDR_VAR 0 9
33677: PUSH
33678: LD_INT 14
33680: PUSH
33681: LD_INT 50
33683: PUSH
33684: LD_INT 16
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: LIST
33691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33692: LD_VAR 0 6
33696: PPUSH
33697: CALL_OW 264
33701: PUSH
33702: LD_INT 6
33704: PUSH
33705: LD_INT 46
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: IN
33712: IFFALSE 33733
// points := [ 32 , 120 , 70 ] ;
33714: LD_ADDR_VAR 0 9
33718: PUSH
33719: LD_INT 32
33721: PUSH
33722: LD_INT 120
33724: PUSH
33725: LD_INT 70
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: LIST
33732: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
33733: LD_VAR 0 6
33737: PPUSH
33738: CALL_OW 264
33742: PUSH
33743: LD_INT 7
33745: PUSH
33746: LD_INT 28
33748: PUSH
33749: LD_INT 45
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: LIST
33756: IN
33757: IFFALSE 33778
// points := [ 35 , 20 , 45 ] ;
33759: LD_ADDR_VAR 0 9
33763: PUSH
33764: LD_INT 35
33766: PUSH
33767: LD_INT 20
33769: PUSH
33770: LD_INT 45
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: LIST
33777: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33778: LD_VAR 0 6
33782: PPUSH
33783: CALL_OW 264
33787: PUSH
33788: LD_INT 47
33790: PUSH
33791: EMPTY
33792: LIST
33793: IN
33794: IFFALSE 33815
// points := [ 67 , 45 , 75 ] ;
33796: LD_ADDR_VAR 0 9
33800: PUSH
33801: LD_INT 67
33803: PUSH
33804: LD_INT 45
33806: PUSH
33807: LD_INT 75
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: LIST
33814: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33815: LD_VAR 0 6
33819: PPUSH
33820: CALL_OW 264
33824: PUSH
33825: LD_INT 26
33827: PUSH
33828: EMPTY
33829: LIST
33830: IN
33831: IFFALSE 33852
// points := [ 120 , 30 , 80 ] ;
33833: LD_ADDR_VAR 0 9
33837: PUSH
33838: LD_INT 120
33840: PUSH
33841: LD_INT 30
33843: PUSH
33844: LD_INT 80
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: LIST
33851: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33852: LD_VAR 0 6
33856: PPUSH
33857: CALL_OW 264
33861: PUSH
33862: LD_INT 22
33864: PUSH
33865: EMPTY
33866: LIST
33867: IN
33868: IFFALSE 33889
// points := [ 40 , 1 , 1 ] ;
33870: LD_ADDR_VAR 0 9
33874: PUSH
33875: LD_INT 40
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: LD_INT 1
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: LIST
33888: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33889: LD_VAR 0 6
33893: PPUSH
33894: CALL_OW 264
33898: PUSH
33899: LD_INT 29
33901: PUSH
33902: EMPTY
33903: LIST
33904: IN
33905: IFFALSE 33926
// points := [ 70 , 200 , 400 ] ;
33907: LD_ADDR_VAR 0 9
33911: PUSH
33912: LD_INT 70
33914: PUSH
33915: LD_INT 200
33917: PUSH
33918: LD_INT 400
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: LIST
33925: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33926: LD_VAR 0 6
33930: PPUSH
33931: CALL_OW 264
33935: PUSH
33936: LD_INT 14
33938: PUSH
33939: LD_INT 53
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: IN
33946: IFFALSE 33967
// points := [ 40 , 10 , 20 ] ;
33948: LD_ADDR_VAR 0 9
33952: PUSH
33953: LD_INT 40
33955: PUSH
33956: LD_INT 10
33958: PUSH
33959: LD_INT 20
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: LIST
33966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33967: LD_VAR 0 6
33971: PPUSH
33972: CALL_OW 264
33976: PUSH
33977: LD_INT 9
33979: PUSH
33980: EMPTY
33981: LIST
33982: IN
33983: IFFALSE 34004
// points := [ 5 , 70 , 20 ] ;
33985: LD_ADDR_VAR 0 9
33989: PUSH
33990: LD_INT 5
33992: PUSH
33993: LD_INT 70
33995: PUSH
33996: LD_INT 20
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34004: LD_VAR 0 6
34008: PPUSH
34009: CALL_OW 264
34013: PUSH
34014: LD_INT 10
34016: PUSH
34017: EMPTY
34018: LIST
34019: IN
34020: IFFALSE 34041
// points := [ 35 , 110 , 70 ] ;
34022: LD_ADDR_VAR 0 9
34026: PUSH
34027: LD_INT 35
34029: PUSH
34030: LD_INT 110
34032: PUSH
34033: LD_INT 70
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: LIST
34040: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34041: LD_VAR 0 6
34045: PPUSH
34046: CALL_OW 265
34050: PUSH
34051: LD_INT 25
34053: EQUAL
34054: IFFALSE 34075
// points := [ 80 , 65 , 100 ] ;
34056: LD_ADDR_VAR 0 9
34060: PUSH
34061: LD_INT 80
34063: PUSH
34064: LD_INT 65
34066: PUSH
34067: LD_INT 100
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: LIST
34074: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34075: LD_VAR 0 6
34079: PPUSH
34080: CALL_OW 263
34084: PUSH
34085: LD_INT 1
34087: EQUAL
34088: IFFALSE 34123
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34090: LD_ADDR_VAR 0 10
34094: PUSH
34095: LD_VAR 0 10
34099: PUSH
34100: LD_VAR 0 6
34104: PPUSH
34105: CALL_OW 311
34109: PPUSH
34110: LD_INT 3
34112: PPUSH
34113: CALL_OW 259
34117: PUSH
34118: LD_INT 4
34120: MUL
34121: MUL
34122: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34123: LD_VAR 0 6
34127: PPUSH
34128: CALL_OW 263
34132: PUSH
34133: LD_INT 2
34135: EQUAL
34136: IFFALSE 34187
// begin j := IsControledBy ( i ) ;
34138: LD_ADDR_VAR 0 7
34142: PUSH
34143: LD_VAR 0 6
34147: PPUSH
34148: CALL_OW 312
34152: ST_TO_ADDR
// if j then
34153: LD_VAR 0 7
34157: IFFALSE 34187
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34159: LD_ADDR_VAR 0 10
34163: PUSH
34164: LD_VAR 0 10
34168: PUSH
34169: LD_VAR 0 7
34173: PPUSH
34174: LD_INT 3
34176: PPUSH
34177: CALL_OW 259
34181: PUSH
34182: LD_INT 3
34184: MUL
34185: MUL
34186: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34187: LD_VAR 0 6
34191: PPUSH
34192: CALL_OW 264
34196: PUSH
34197: LD_INT 5
34199: PUSH
34200: LD_INT 6
34202: PUSH
34203: LD_INT 46
34205: PUSH
34206: LD_INT 44
34208: PUSH
34209: LD_INT 47
34211: PUSH
34212: LD_INT 45
34214: PUSH
34215: LD_INT 28
34217: PUSH
34218: LD_INT 7
34220: PUSH
34221: LD_INT 27
34223: PUSH
34224: LD_INT 29
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: IN
34239: PUSH
34240: LD_VAR 0 1
34244: PPUSH
34245: LD_INT 52
34247: PPUSH
34248: CALL_OW 321
34252: PUSH
34253: LD_INT 2
34255: EQUAL
34256: AND
34257: IFFALSE 34274
// bpoints := bpoints * 1.2 ;
34259: LD_ADDR_VAR 0 10
34263: PUSH
34264: LD_VAR 0 10
34268: PUSH
34269: LD_REAL  1.20000000000000E+0000
34272: MUL
34273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34274: LD_VAR 0 6
34278: PPUSH
34279: CALL_OW 264
34283: PUSH
34284: LD_INT 6
34286: PUSH
34287: LD_INT 46
34289: PUSH
34290: LD_INT 47
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: LIST
34297: IN
34298: IFFALSE 34315
// bpoints := bpoints * 1.2 ;
34300: LD_ADDR_VAR 0 10
34304: PUSH
34305: LD_VAR 0 10
34309: PUSH
34310: LD_REAL  1.20000000000000E+0000
34313: MUL
34314: ST_TO_ADDR
// end ; unit_building :
34315: GO 34329
34317: LD_INT 3
34319: DOUBLE
34320: EQUAL
34321: IFTRUE 34325
34323: GO 34328
34325: POP
// ; end ;
34326: GO 34329
34328: POP
// for j = 1 to 3 do
34329: LD_ADDR_VAR 0 7
34333: PUSH
34334: DOUBLE
34335: LD_INT 1
34337: DEC
34338: ST_TO_ADDR
34339: LD_INT 3
34341: PUSH
34342: FOR_TO
34343: IFFALSE 34396
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34345: LD_ADDR_VAR 0 5
34349: PUSH
34350: LD_VAR 0 5
34354: PPUSH
34355: LD_VAR 0 7
34359: PPUSH
34360: LD_VAR 0 5
34364: PUSH
34365: LD_VAR 0 7
34369: ARRAY
34370: PUSH
34371: LD_VAR 0 9
34375: PUSH
34376: LD_VAR 0 7
34380: ARRAY
34381: PUSH
34382: LD_VAR 0 10
34386: MUL
34387: PLUS
34388: PPUSH
34389: CALL_OW 1
34393: ST_TO_ADDR
34394: GO 34342
34396: POP
34397: POP
// end ;
34398: GO 32881
34400: POP
34401: POP
// result := Replace ( result , 4 , tmp ) ;
34402: LD_ADDR_VAR 0 5
34406: PUSH
34407: LD_VAR 0 5
34411: PPUSH
34412: LD_INT 4
34414: PPUSH
34415: LD_VAR 0 8
34419: PPUSH
34420: CALL_OW 1
34424: ST_TO_ADDR
// end ;
34425: LD_VAR 0 5
34429: RET
// export function DangerAtRange ( unit , range ) ; begin
34430: LD_INT 0
34432: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34433: LD_ADDR_VAR 0 3
34437: PUSH
34438: LD_VAR 0 1
34442: PPUSH
34443: CALL_OW 255
34447: PPUSH
34448: LD_VAR 0 1
34452: PPUSH
34453: CALL_OW 250
34457: PPUSH
34458: LD_VAR 0 1
34462: PPUSH
34463: CALL_OW 251
34467: PPUSH
34468: LD_VAR 0 2
34472: PPUSH
34473: CALL 32733 0 4
34477: ST_TO_ADDR
// end ;
34478: LD_VAR 0 3
34482: RET
// export function DangerInArea ( side , area ) ; begin
34483: LD_INT 0
34485: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34486: LD_ADDR_VAR 0 3
34490: PUSH
34491: LD_VAR 0 2
34495: PPUSH
34496: LD_INT 81
34498: PUSH
34499: LD_VAR 0 1
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PPUSH
34508: CALL_OW 70
34512: ST_TO_ADDR
// end ;
34513: LD_VAR 0 3
34517: RET
// export function IsExtension ( b ) ; begin
34518: LD_INT 0
34520: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34521: LD_ADDR_VAR 0 2
34525: PUSH
34526: LD_VAR 0 1
34530: PUSH
34531: LD_INT 23
34533: PUSH
34534: LD_INT 20
34536: PUSH
34537: LD_INT 22
34539: PUSH
34540: LD_INT 17
34542: PUSH
34543: LD_INT 24
34545: PUSH
34546: LD_INT 21
34548: PUSH
34549: LD_INT 19
34551: PUSH
34552: LD_INT 16
34554: PUSH
34555: LD_INT 25
34557: PUSH
34558: LD_INT 18
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: IN
34573: ST_TO_ADDR
// end ;
34574: LD_VAR 0 2
34578: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34579: LD_INT 0
34581: PPUSH
34582: PPUSH
34583: PPUSH
// result := [ ] ;
34584: LD_ADDR_VAR 0 4
34588: PUSH
34589: EMPTY
34590: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34591: LD_ADDR_VAR 0 5
34595: PUSH
34596: LD_VAR 0 2
34600: PPUSH
34601: LD_INT 21
34603: PUSH
34604: LD_INT 3
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PPUSH
34611: CALL_OW 70
34615: ST_TO_ADDR
// if not tmp then
34616: LD_VAR 0 5
34620: NOT
34621: IFFALSE 34625
// exit ;
34623: GO 34689
// if checkLink then
34625: LD_VAR 0 3
34629: IFFALSE 34679
// begin for i in tmp do
34631: LD_ADDR_VAR 0 6
34635: PUSH
34636: LD_VAR 0 5
34640: PUSH
34641: FOR_IN
34642: IFFALSE 34677
// if GetBase ( i ) <> base then
34644: LD_VAR 0 6
34648: PPUSH
34649: CALL_OW 274
34653: PUSH
34654: LD_VAR 0 1
34658: NONEQUAL
34659: IFFALSE 34675
// ComLinkToBase ( base , i ) ;
34661: LD_VAR 0 1
34665: PPUSH
34666: LD_VAR 0 6
34670: PPUSH
34671: CALL_OW 169
34675: GO 34641
34677: POP
34678: POP
// end ; result := tmp ;
34679: LD_ADDR_VAR 0 4
34683: PUSH
34684: LD_VAR 0 5
34688: ST_TO_ADDR
// end ;
34689: LD_VAR 0 4
34693: RET
// export function ComComplete ( units , b ) ; var i ; begin
34694: LD_INT 0
34696: PPUSH
34697: PPUSH
// if not units then
34698: LD_VAR 0 1
34702: NOT
34703: IFFALSE 34707
// exit ;
34705: GO 34797
// for i in units do
34707: LD_ADDR_VAR 0 4
34711: PUSH
34712: LD_VAR 0 1
34716: PUSH
34717: FOR_IN
34718: IFFALSE 34795
// if BuildingStatus ( b ) = bs_build then
34720: LD_VAR 0 2
34724: PPUSH
34725: CALL_OW 461
34729: PUSH
34730: LD_INT 1
34732: EQUAL
34733: IFFALSE 34793
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34735: LD_VAR 0 4
34739: PPUSH
34740: LD_STRING h
34742: PUSH
34743: LD_VAR 0 2
34747: PPUSH
34748: CALL_OW 250
34752: PUSH
34753: LD_VAR 0 2
34757: PPUSH
34758: CALL_OW 251
34762: PUSH
34763: LD_VAR 0 2
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: PUSH
34786: EMPTY
34787: LIST
34788: PPUSH
34789: CALL_OW 446
34793: GO 34717
34795: POP
34796: POP
// end ;
34797: LD_VAR 0 3
34801: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34802: LD_INT 0
34804: PPUSH
34805: PPUSH
34806: PPUSH
34807: PPUSH
34808: PPUSH
34809: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
34810: LD_VAR 0 1
34814: NOT
34815: PUSH
34816: LD_VAR 0 1
34820: PPUSH
34821: CALL_OW 263
34825: PUSH
34826: LD_INT 2
34828: EQUAL
34829: NOT
34830: OR
34831: IFFALSE 34835
// exit ;
34833: GO 35151
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34835: LD_ADDR_VAR 0 6
34839: PUSH
34840: LD_INT 22
34842: PUSH
34843: LD_VAR 0 1
34847: PPUSH
34848: CALL_OW 255
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 2
34859: PUSH
34860: LD_INT 30
34862: PUSH
34863: LD_INT 36
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 34
34872: PUSH
34873: LD_INT 31
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: LIST
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PPUSH
34889: CALL_OW 69
34893: ST_TO_ADDR
// if not tmp then
34894: LD_VAR 0 6
34898: NOT
34899: IFFALSE 34903
// exit ;
34901: GO 35151
// result := [ ] ;
34903: LD_ADDR_VAR 0 2
34907: PUSH
34908: EMPTY
34909: ST_TO_ADDR
// for i in tmp do
34910: LD_ADDR_VAR 0 3
34914: PUSH
34915: LD_VAR 0 6
34919: PUSH
34920: FOR_IN
34921: IFFALSE 34992
// begin t := UnitsInside ( i ) ;
34923: LD_ADDR_VAR 0 4
34927: PUSH
34928: LD_VAR 0 3
34932: PPUSH
34933: CALL_OW 313
34937: ST_TO_ADDR
// if t then
34938: LD_VAR 0 4
34942: IFFALSE 34990
// for j in t do
34944: LD_ADDR_VAR 0 7
34948: PUSH
34949: LD_VAR 0 4
34953: PUSH
34954: FOR_IN
34955: IFFALSE 34988
// result := Insert ( result , result + 1 , j ) ;
34957: LD_ADDR_VAR 0 2
34961: PUSH
34962: LD_VAR 0 2
34966: PPUSH
34967: LD_VAR 0 2
34971: PUSH
34972: LD_INT 1
34974: PLUS
34975: PPUSH
34976: LD_VAR 0 7
34980: PPUSH
34981: CALL_OW 2
34985: ST_TO_ADDR
34986: GO 34954
34988: POP
34989: POP
// end ;
34990: GO 34920
34992: POP
34993: POP
// if not result then
34994: LD_VAR 0 2
34998: NOT
34999: IFFALSE 35003
// exit ;
35001: GO 35151
// mech := result [ 1 ] ;
35003: LD_ADDR_VAR 0 5
35007: PUSH
35008: LD_VAR 0 2
35012: PUSH
35013: LD_INT 1
35015: ARRAY
35016: ST_TO_ADDR
// if result > 1 then
35017: LD_VAR 0 2
35021: PUSH
35022: LD_INT 1
35024: GREATER
35025: IFFALSE 35137
// for i = 2 to result do
35027: LD_ADDR_VAR 0 3
35031: PUSH
35032: DOUBLE
35033: LD_INT 2
35035: DEC
35036: ST_TO_ADDR
35037: LD_VAR 0 2
35041: PUSH
35042: FOR_TO
35043: IFFALSE 35135
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35045: LD_ADDR_VAR 0 4
35049: PUSH
35050: LD_VAR 0 2
35054: PUSH
35055: LD_VAR 0 3
35059: ARRAY
35060: PPUSH
35061: LD_INT 3
35063: PPUSH
35064: CALL_OW 259
35068: PUSH
35069: LD_VAR 0 2
35073: PUSH
35074: LD_VAR 0 3
35078: ARRAY
35079: PPUSH
35080: CALL_OW 432
35084: MINUS
35085: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35086: LD_VAR 0 4
35090: PUSH
35091: LD_VAR 0 5
35095: PPUSH
35096: LD_INT 3
35098: PPUSH
35099: CALL_OW 259
35103: PUSH
35104: LD_VAR 0 5
35108: PPUSH
35109: CALL_OW 432
35113: MINUS
35114: GREATEREQUAL
35115: IFFALSE 35133
// mech := result [ i ] ;
35117: LD_ADDR_VAR 0 5
35121: PUSH
35122: LD_VAR 0 2
35126: PUSH
35127: LD_VAR 0 3
35131: ARRAY
35132: ST_TO_ADDR
// end ;
35133: GO 35042
35135: POP
35136: POP
// ComLinkTo ( vehicle , mech ) ;
35137: LD_VAR 0 1
35141: PPUSH
35142: LD_VAR 0 5
35146: PPUSH
35147: CALL_OW 135
// end ;
35151: LD_VAR 0 2
35155: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35156: LD_INT 0
35158: PPUSH
35159: PPUSH
35160: PPUSH
35161: PPUSH
35162: PPUSH
35163: PPUSH
35164: PPUSH
35165: PPUSH
35166: PPUSH
35167: PPUSH
35168: PPUSH
35169: PPUSH
35170: PPUSH
// result := [ ] ;
35171: LD_ADDR_VAR 0 7
35175: PUSH
35176: EMPTY
35177: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35178: LD_VAR 0 1
35182: PPUSH
35183: CALL_OW 266
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: IN
35198: NOT
35199: IFFALSE 35203
// exit ;
35201: GO 36837
// if name then
35203: LD_VAR 0 3
35207: IFFALSE 35223
// SetBName ( base_dep , name ) ;
35209: LD_VAR 0 1
35213: PPUSH
35214: LD_VAR 0 3
35218: PPUSH
35219: CALL_OW 500
// base := GetBase ( base_dep ) ;
35223: LD_ADDR_VAR 0 15
35227: PUSH
35228: LD_VAR 0 1
35232: PPUSH
35233: CALL_OW 274
35237: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35238: LD_ADDR_VAR 0 16
35242: PUSH
35243: LD_VAR 0 1
35247: PPUSH
35248: CALL_OW 255
35252: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35253: LD_ADDR_VAR 0 17
35257: PUSH
35258: LD_VAR 0 1
35262: PPUSH
35263: CALL_OW 248
35267: ST_TO_ADDR
// if sources then
35268: LD_VAR 0 5
35272: IFFALSE 35319
// for i = 1 to 3 do
35274: LD_ADDR_VAR 0 8
35278: PUSH
35279: DOUBLE
35280: LD_INT 1
35282: DEC
35283: ST_TO_ADDR
35284: LD_INT 3
35286: PUSH
35287: FOR_TO
35288: IFFALSE 35317
// AddResourceType ( base , i , sources [ i ] ) ;
35290: LD_VAR 0 15
35294: PPUSH
35295: LD_VAR 0 8
35299: PPUSH
35300: LD_VAR 0 5
35304: PUSH
35305: LD_VAR 0 8
35309: ARRAY
35310: PPUSH
35311: CALL_OW 276
35315: GO 35287
35317: POP
35318: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35319: LD_ADDR_VAR 0 18
35323: PUSH
35324: LD_VAR 0 15
35328: PPUSH
35329: LD_VAR 0 2
35333: PPUSH
35334: LD_INT 1
35336: PPUSH
35337: CALL 34579 0 3
35341: ST_TO_ADDR
// InitHc ;
35342: CALL_OW 19
// InitUc ;
35346: CALL_OW 18
// uc_side := side ;
35350: LD_ADDR_OWVAR 20
35354: PUSH
35355: LD_VAR 0 16
35359: ST_TO_ADDR
// uc_nation := nation ;
35360: LD_ADDR_OWVAR 21
35364: PUSH
35365: LD_VAR 0 17
35369: ST_TO_ADDR
// if buildings then
35370: LD_VAR 0 18
35374: IFFALSE 36696
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35376: LD_ADDR_VAR 0 19
35380: PUSH
35381: LD_VAR 0 18
35385: PPUSH
35386: LD_INT 2
35388: PUSH
35389: LD_INT 30
35391: PUSH
35392: LD_INT 29
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 30
35401: PUSH
35402: LD_INT 30
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: LIST
35413: PPUSH
35414: CALL_OW 72
35418: ST_TO_ADDR
// if tmp then
35419: LD_VAR 0 19
35423: IFFALSE 35471
// for i in tmp do
35425: LD_ADDR_VAR 0 8
35429: PUSH
35430: LD_VAR 0 19
35434: PUSH
35435: FOR_IN
35436: IFFALSE 35469
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35438: LD_VAR 0 8
35442: PPUSH
35443: CALL_OW 250
35447: PPUSH
35448: LD_VAR 0 8
35452: PPUSH
35453: CALL_OW 251
35457: PPUSH
35458: LD_VAR 0 16
35462: PPUSH
35463: CALL_OW 441
35467: GO 35435
35469: POP
35470: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35471: LD_VAR 0 18
35475: PPUSH
35476: LD_INT 2
35478: PUSH
35479: LD_INT 30
35481: PUSH
35482: LD_INT 32
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 30
35491: PUSH
35492: LD_INT 33
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: LIST
35503: PPUSH
35504: CALL_OW 72
35508: IFFALSE 35596
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35510: LD_ADDR_VAR 0 8
35514: PUSH
35515: LD_VAR 0 18
35519: PPUSH
35520: LD_INT 2
35522: PUSH
35523: LD_INT 30
35525: PUSH
35526: LD_INT 32
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 30
35535: PUSH
35536: LD_INT 33
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: LIST
35547: PPUSH
35548: CALL_OW 72
35552: PUSH
35553: FOR_IN
35554: IFFALSE 35594
// begin if not GetBWeapon ( i ) then
35556: LD_VAR 0 8
35560: PPUSH
35561: CALL_OW 269
35565: NOT
35566: IFFALSE 35592
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35568: LD_VAR 0 8
35572: PPUSH
35573: LD_VAR 0 8
35577: PPUSH
35578: LD_VAR 0 2
35582: PPUSH
35583: CALL 36842 0 2
35587: PPUSH
35588: CALL_OW 431
// end ;
35592: GO 35553
35594: POP
35595: POP
// end ; for i = 1 to personel do
35596: LD_ADDR_VAR 0 8
35600: PUSH
35601: DOUBLE
35602: LD_INT 1
35604: DEC
35605: ST_TO_ADDR
35606: LD_VAR 0 6
35610: PUSH
35611: FOR_TO
35612: IFFALSE 36676
// begin if i > 4 then
35614: LD_VAR 0 8
35618: PUSH
35619: LD_INT 4
35621: GREATER
35622: IFFALSE 35626
// break ;
35624: GO 36676
// case i of 1 :
35626: LD_VAR 0 8
35630: PUSH
35631: LD_INT 1
35633: DOUBLE
35634: EQUAL
35635: IFTRUE 35639
35637: GO 35719
35639: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35640: LD_ADDR_VAR 0 12
35644: PUSH
35645: LD_VAR 0 18
35649: PPUSH
35650: LD_INT 22
35652: PUSH
35653: LD_VAR 0 16
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 58
35664: PUSH
35665: EMPTY
35666: LIST
35667: PUSH
35668: LD_INT 2
35670: PUSH
35671: LD_INT 30
35673: PUSH
35674: LD_INT 32
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 30
35683: PUSH
35684: LD_INT 4
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 30
35693: PUSH
35694: LD_INT 5
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: LIST
35711: PPUSH
35712: CALL_OW 72
35716: ST_TO_ADDR
35717: GO 35941
35719: LD_INT 2
35721: DOUBLE
35722: EQUAL
35723: IFTRUE 35727
35725: GO 35789
35727: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35728: LD_ADDR_VAR 0 12
35732: PUSH
35733: LD_VAR 0 18
35737: PPUSH
35738: LD_INT 22
35740: PUSH
35741: LD_VAR 0 16
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 2
35752: PUSH
35753: LD_INT 30
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 30
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: LIST
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PPUSH
35782: CALL_OW 72
35786: ST_TO_ADDR
35787: GO 35941
35789: LD_INT 3
35791: DOUBLE
35792: EQUAL
35793: IFTRUE 35797
35795: GO 35859
35797: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35798: LD_ADDR_VAR 0 12
35802: PUSH
35803: LD_VAR 0 18
35807: PPUSH
35808: LD_INT 22
35810: PUSH
35811: LD_VAR 0 16
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 2
35822: PUSH
35823: LD_INT 30
35825: PUSH
35826: LD_INT 2
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 30
35835: PUSH
35836: LD_INT 3
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: LIST
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PPUSH
35852: CALL_OW 72
35856: ST_TO_ADDR
35857: GO 35941
35859: LD_INT 4
35861: DOUBLE
35862: EQUAL
35863: IFTRUE 35867
35865: GO 35940
35867: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35868: LD_ADDR_VAR 0 12
35872: PUSH
35873: LD_VAR 0 18
35877: PPUSH
35878: LD_INT 22
35880: PUSH
35881: LD_VAR 0 16
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 2
35892: PUSH
35893: LD_INT 30
35895: PUSH
35896: LD_INT 6
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 30
35905: PUSH
35906: LD_INT 7
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 30
35915: PUSH
35916: LD_INT 8
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PPUSH
35933: CALL_OW 72
35937: ST_TO_ADDR
35938: GO 35941
35940: POP
// if i = 1 then
35941: LD_VAR 0 8
35945: PUSH
35946: LD_INT 1
35948: EQUAL
35949: IFFALSE 36060
// begin tmp := [ ] ;
35951: LD_ADDR_VAR 0 19
35955: PUSH
35956: EMPTY
35957: ST_TO_ADDR
// for j in f do
35958: LD_ADDR_VAR 0 9
35962: PUSH
35963: LD_VAR 0 12
35967: PUSH
35968: FOR_IN
35969: IFFALSE 36042
// if GetBType ( j ) = b_bunker then
35971: LD_VAR 0 9
35975: PPUSH
35976: CALL_OW 266
35980: PUSH
35981: LD_INT 32
35983: EQUAL
35984: IFFALSE 36011
// tmp := Insert ( tmp , 1 , j ) else
35986: LD_ADDR_VAR 0 19
35990: PUSH
35991: LD_VAR 0 19
35995: PPUSH
35996: LD_INT 1
35998: PPUSH
35999: LD_VAR 0 9
36003: PPUSH
36004: CALL_OW 2
36008: ST_TO_ADDR
36009: GO 36040
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36011: LD_ADDR_VAR 0 19
36015: PUSH
36016: LD_VAR 0 19
36020: PPUSH
36021: LD_VAR 0 19
36025: PUSH
36026: LD_INT 1
36028: PLUS
36029: PPUSH
36030: LD_VAR 0 9
36034: PPUSH
36035: CALL_OW 2
36039: ST_TO_ADDR
36040: GO 35968
36042: POP
36043: POP
// if tmp then
36044: LD_VAR 0 19
36048: IFFALSE 36060
// f := tmp ;
36050: LD_ADDR_VAR 0 12
36054: PUSH
36055: LD_VAR 0 19
36059: ST_TO_ADDR
// end ; x := personel [ i ] ;
36060: LD_ADDR_VAR 0 13
36064: PUSH
36065: LD_VAR 0 6
36069: PUSH
36070: LD_VAR 0 8
36074: ARRAY
36075: ST_TO_ADDR
// if x = - 1 then
36076: LD_VAR 0 13
36080: PUSH
36081: LD_INT 1
36083: NEG
36084: EQUAL
36085: IFFALSE 36294
// begin for j in f do
36087: LD_ADDR_VAR 0 9
36091: PUSH
36092: LD_VAR 0 12
36096: PUSH
36097: FOR_IN
36098: IFFALSE 36290
// repeat InitHc ;
36100: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36104: LD_VAR 0 9
36108: PPUSH
36109: CALL_OW 266
36113: PUSH
36114: LD_INT 5
36116: EQUAL
36117: IFFALSE 36187
// begin if UnitsInside ( j ) < 3 then
36119: LD_VAR 0 9
36123: PPUSH
36124: CALL_OW 313
36128: PUSH
36129: LD_INT 3
36131: LESS
36132: IFFALSE 36168
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36134: LD_INT 0
36136: PPUSH
36137: LD_INT 5
36139: PUSH
36140: LD_INT 8
36142: PUSH
36143: LD_INT 9
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: LIST
36150: PUSH
36151: LD_VAR 0 17
36155: ARRAY
36156: PPUSH
36157: LD_VAR 0 4
36161: PPUSH
36162: CALL_OW 380
36166: GO 36185
// PrepareHuman ( false , i , skill ) ;
36168: LD_INT 0
36170: PPUSH
36171: LD_VAR 0 8
36175: PPUSH
36176: LD_VAR 0 4
36180: PPUSH
36181: CALL_OW 380
// end else
36185: GO 36204
// PrepareHuman ( false , i , skill ) ;
36187: LD_INT 0
36189: PPUSH
36190: LD_VAR 0 8
36194: PPUSH
36195: LD_VAR 0 4
36199: PPUSH
36200: CALL_OW 380
// un := CreateHuman ;
36204: LD_ADDR_VAR 0 14
36208: PUSH
36209: CALL_OW 44
36213: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36214: LD_ADDR_VAR 0 7
36218: PUSH
36219: LD_VAR 0 7
36223: PPUSH
36224: LD_INT 1
36226: PPUSH
36227: LD_VAR 0 14
36231: PPUSH
36232: CALL_OW 2
36236: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36237: LD_VAR 0 14
36241: PPUSH
36242: LD_VAR 0 9
36246: PPUSH
36247: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36251: LD_VAR 0 9
36255: PPUSH
36256: CALL_OW 313
36260: PUSH
36261: LD_INT 6
36263: EQUAL
36264: PUSH
36265: LD_VAR 0 9
36269: PPUSH
36270: CALL_OW 266
36274: PUSH
36275: LD_INT 32
36277: PUSH
36278: LD_INT 31
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: IN
36285: OR
36286: IFFALSE 36100
36288: GO 36097
36290: POP
36291: POP
// end else
36292: GO 36674
// for j = 1 to x do
36294: LD_ADDR_VAR 0 9
36298: PUSH
36299: DOUBLE
36300: LD_INT 1
36302: DEC
36303: ST_TO_ADDR
36304: LD_VAR 0 13
36308: PUSH
36309: FOR_TO
36310: IFFALSE 36672
// begin InitHc ;
36312: CALL_OW 19
// if not f then
36316: LD_VAR 0 12
36320: NOT
36321: IFFALSE 36410
// begin PrepareHuman ( false , i , skill ) ;
36323: LD_INT 0
36325: PPUSH
36326: LD_VAR 0 8
36330: PPUSH
36331: LD_VAR 0 4
36335: PPUSH
36336: CALL_OW 380
// un := CreateHuman ;
36340: LD_ADDR_VAR 0 14
36344: PUSH
36345: CALL_OW 44
36349: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36350: LD_ADDR_VAR 0 7
36354: PUSH
36355: LD_VAR 0 7
36359: PPUSH
36360: LD_INT 1
36362: PPUSH
36363: LD_VAR 0 14
36367: PPUSH
36368: CALL_OW 2
36372: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36373: LD_VAR 0 14
36377: PPUSH
36378: LD_VAR 0 1
36382: PPUSH
36383: CALL_OW 250
36387: PPUSH
36388: LD_VAR 0 1
36392: PPUSH
36393: CALL_OW 251
36397: PPUSH
36398: LD_INT 10
36400: PPUSH
36401: LD_INT 0
36403: PPUSH
36404: CALL_OW 50
// continue ;
36408: GO 36309
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36410: LD_VAR 0 12
36414: PUSH
36415: LD_INT 1
36417: ARRAY
36418: PPUSH
36419: CALL_OW 313
36423: PUSH
36424: LD_VAR 0 12
36428: PUSH
36429: LD_INT 1
36431: ARRAY
36432: PPUSH
36433: CALL_OW 266
36437: PUSH
36438: LD_INT 32
36440: PUSH
36441: LD_INT 31
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: IN
36448: AND
36449: PUSH
36450: LD_VAR 0 12
36454: PUSH
36455: LD_INT 1
36457: ARRAY
36458: PPUSH
36459: CALL_OW 313
36463: PUSH
36464: LD_INT 6
36466: EQUAL
36467: OR
36468: IFFALSE 36488
// f := Delete ( f , 1 ) ;
36470: LD_ADDR_VAR 0 12
36474: PUSH
36475: LD_VAR 0 12
36479: PPUSH
36480: LD_INT 1
36482: PPUSH
36483: CALL_OW 3
36487: ST_TO_ADDR
// if not f then
36488: LD_VAR 0 12
36492: NOT
36493: IFFALSE 36511
// begin x := x + 2 ;
36495: LD_ADDR_VAR 0 13
36499: PUSH
36500: LD_VAR 0 13
36504: PUSH
36505: LD_INT 2
36507: PLUS
36508: ST_TO_ADDR
// continue ;
36509: GO 36309
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36511: LD_VAR 0 12
36515: PUSH
36516: LD_INT 1
36518: ARRAY
36519: PPUSH
36520: CALL_OW 266
36524: PUSH
36525: LD_INT 5
36527: EQUAL
36528: IFFALSE 36602
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36530: LD_VAR 0 12
36534: PUSH
36535: LD_INT 1
36537: ARRAY
36538: PPUSH
36539: CALL_OW 313
36543: PUSH
36544: LD_INT 3
36546: LESS
36547: IFFALSE 36583
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36549: LD_INT 0
36551: PPUSH
36552: LD_INT 5
36554: PUSH
36555: LD_INT 8
36557: PUSH
36558: LD_INT 9
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: LIST
36565: PUSH
36566: LD_VAR 0 17
36570: ARRAY
36571: PPUSH
36572: LD_VAR 0 4
36576: PPUSH
36577: CALL_OW 380
36581: GO 36600
// PrepareHuman ( false , i , skill ) ;
36583: LD_INT 0
36585: PPUSH
36586: LD_VAR 0 8
36590: PPUSH
36591: LD_VAR 0 4
36595: PPUSH
36596: CALL_OW 380
// end else
36600: GO 36619
// PrepareHuman ( false , i , skill ) ;
36602: LD_INT 0
36604: PPUSH
36605: LD_VAR 0 8
36609: PPUSH
36610: LD_VAR 0 4
36614: PPUSH
36615: CALL_OW 380
// un := CreateHuman ;
36619: LD_ADDR_VAR 0 14
36623: PUSH
36624: CALL_OW 44
36628: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36629: LD_ADDR_VAR 0 7
36633: PUSH
36634: LD_VAR 0 7
36638: PPUSH
36639: LD_INT 1
36641: PPUSH
36642: LD_VAR 0 14
36646: PPUSH
36647: CALL_OW 2
36651: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36652: LD_VAR 0 14
36656: PPUSH
36657: LD_VAR 0 12
36661: PUSH
36662: LD_INT 1
36664: ARRAY
36665: PPUSH
36666: CALL_OW 52
// end ;
36670: GO 36309
36672: POP
36673: POP
// end ;
36674: GO 35611
36676: POP
36677: POP
// result := result ^ buildings ;
36678: LD_ADDR_VAR 0 7
36682: PUSH
36683: LD_VAR 0 7
36687: PUSH
36688: LD_VAR 0 18
36692: ADD
36693: ST_TO_ADDR
// end else
36694: GO 36837
// begin for i = 1 to personel do
36696: LD_ADDR_VAR 0 8
36700: PUSH
36701: DOUBLE
36702: LD_INT 1
36704: DEC
36705: ST_TO_ADDR
36706: LD_VAR 0 6
36710: PUSH
36711: FOR_TO
36712: IFFALSE 36835
// begin if i > 4 then
36714: LD_VAR 0 8
36718: PUSH
36719: LD_INT 4
36721: GREATER
36722: IFFALSE 36726
// break ;
36724: GO 36835
// x := personel [ i ] ;
36726: LD_ADDR_VAR 0 13
36730: PUSH
36731: LD_VAR 0 6
36735: PUSH
36736: LD_VAR 0 8
36740: ARRAY
36741: ST_TO_ADDR
// if x = - 1 then
36742: LD_VAR 0 13
36746: PUSH
36747: LD_INT 1
36749: NEG
36750: EQUAL
36751: IFFALSE 36755
// continue ;
36753: GO 36711
// PrepareHuman ( false , i , skill ) ;
36755: LD_INT 0
36757: PPUSH
36758: LD_VAR 0 8
36762: PPUSH
36763: LD_VAR 0 4
36767: PPUSH
36768: CALL_OW 380
// un := CreateHuman ;
36772: LD_ADDR_VAR 0 14
36776: PUSH
36777: CALL_OW 44
36781: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36782: LD_VAR 0 14
36786: PPUSH
36787: LD_VAR 0 1
36791: PPUSH
36792: CALL_OW 250
36796: PPUSH
36797: LD_VAR 0 1
36801: PPUSH
36802: CALL_OW 251
36806: PPUSH
36807: LD_INT 10
36809: PPUSH
36810: LD_INT 0
36812: PPUSH
36813: CALL_OW 50
// result := result ^ un ;
36817: LD_ADDR_VAR 0 7
36821: PUSH
36822: LD_VAR 0 7
36826: PUSH
36827: LD_VAR 0 14
36831: ADD
36832: ST_TO_ADDR
// end ;
36833: GO 36711
36835: POP
36836: POP
// end ; end ;
36837: LD_VAR 0 7
36841: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36842: LD_INT 0
36844: PPUSH
36845: PPUSH
36846: PPUSH
36847: PPUSH
36848: PPUSH
36849: PPUSH
36850: PPUSH
36851: PPUSH
36852: PPUSH
36853: PPUSH
36854: PPUSH
36855: PPUSH
36856: PPUSH
36857: PPUSH
36858: PPUSH
36859: PPUSH
// result := false ;
36860: LD_ADDR_VAR 0 3
36864: PUSH
36865: LD_INT 0
36867: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36868: LD_VAR 0 1
36872: NOT
36873: PUSH
36874: LD_VAR 0 1
36878: PPUSH
36879: CALL_OW 266
36883: PUSH
36884: LD_INT 32
36886: PUSH
36887: LD_INT 33
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: IN
36894: NOT
36895: OR
36896: IFFALSE 36900
// exit ;
36898: GO 38039
// nat := GetNation ( tower ) ;
36900: LD_ADDR_VAR 0 12
36904: PUSH
36905: LD_VAR 0 1
36909: PPUSH
36910: CALL_OW 248
36914: ST_TO_ADDR
// side := GetSide ( tower ) ;
36915: LD_ADDR_VAR 0 16
36919: PUSH
36920: LD_VAR 0 1
36924: PPUSH
36925: CALL_OW 255
36929: ST_TO_ADDR
// x := GetX ( tower ) ;
36930: LD_ADDR_VAR 0 10
36934: PUSH
36935: LD_VAR 0 1
36939: PPUSH
36940: CALL_OW 250
36944: ST_TO_ADDR
// y := GetY ( tower ) ;
36945: LD_ADDR_VAR 0 11
36949: PUSH
36950: LD_VAR 0 1
36954: PPUSH
36955: CALL_OW 251
36959: ST_TO_ADDR
// if not x or not y then
36960: LD_VAR 0 10
36964: NOT
36965: PUSH
36966: LD_VAR 0 11
36970: NOT
36971: OR
36972: IFFALSE 36976
// exit ;
36974: GO 38039
// weapon := 0 ;
36976: LD_ADDR_VAR 0 18
36980: PUSH
36981: LD_INT 0
36983: ST_TO_ADDR
// fac_list := [ ] ;
36984: LD_ADDR_VAR 0 17
36988: PUSH
36989: EMPTY
36990: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36991: LD_ADDR_VAR 0 6
36995: PUSH
36996: LD_VAR 0 1
37000: PPUSH
37001: CALL_OW 274
37005: PPUSH
37006: LD_VAR 0 2
37010: PPUSH
37011: LD_INT 0
37013: PPUSH
37014: CALL 34579 0 3
37018: PPUSH
37019: LD_INT 30
37021: PUSH
37022: LD_INT 3
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PPUSH
37029: CALL_OW 72
37033: ST_TO_ADDR
// if not factories then
37034: LD_VAR 0 6
37038: NOT
37039: IFFALSE 37043
// exit ;
37041: GO 38039
// for i in factories do
37043: LD_ADDR_VAR 0 8
37047: PUSH
37048: LD_VAR 0 6
37052: PUSH
37053: FOR_IN
37054: IFFALSE 37079
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37056: LD_ADDR_VAR 0 17
37060: PUSH
37061: LD_VAR 0 17
37065: PUSH
37066: LD_VAR 0 8
37070: PPUSH
37071: CALL_OW 478
37075: UNION
37076: ST_TO_ADDR
37077: GO 37053
37079: POP
37080: POP
// if not fac_list then
37081: LD_VAR 0 17
37085: NOT
37086: IFFALSE 37090
// exit ;
37088: GO 38039
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37090: LD_ADDR_VAR 0 5
37094: PUSH
37095: LD_INT 4
37097: PUSH
37098: LD_INT 5
37100: PUSH
37101: LD_INT 9
37103: PUSH
37104: LD_INT 10
37106: PUSH
37107: LD_INT 6
37109: PUSH
37110: LD_INT 7
37112: PUSH
37113: LD_INT 11
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 27
37127: PUSH
37128: LD_INT 28
37130: PUSH
37131: LD_INT 26
37133: PUSH
37134: LD_INT 30
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 43
37145: PUSH
37146: LD_INT 44
37148: PUSH
37149: LD_INT 46
37151: PUSH
37152: LD_INT 45
37154: PUSH
37155: LD_INT 47
37157: PUSH
37158: LD_INT 49
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: LIST
37173: PUSH
37174: LD_VAR 0 12
37178: ARRAY
37179: ST_TO_ADDR
// for i in list do
37180: LD_ADDR_VAR 0 8
37184: PUSH
37185: LD_VAR 0 5
37189: PUSH
37190: FOR_IN
37191: IFFALSE 37224
// if not i in fac_list then
37193: LD_VAR 0 8
37197: PUSH
37198: LD_VAR 0 17
37202: IN
37203: NOT
37204: IFFALSE 37222
// list := list diff i ;
37206: LD_ADDR_VAR 0 5
37210: PUSH
37211: LD_VAR 0 5
37215: PUSH
37216: LD_VAR 0 8
37220: DIFF
37221: ST_TO_ADDR
37222: GO 37190
37224: POP
37225: POP
// if not list then
37226: LD_VAR 0 5
37230: NOT
37231: IFFALSE 37235
// exit ;
37233: GO 38039
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37235: LD_VAR 0 12
37239: PUSH
37240: LD_INT 3
37242: EQUAL
37243: PUSH
37244: LD_INT 49
37246: PUSH
37247: LD_VAR 0 5
37251: IN
37252: AND
37253: PUSH
37254: LD_INT 31
37256: PPUSH
37257: LD_VAR 0 16
37261: PPUSH
37262: CALL_OW 321
37266: PUSH
37267: LD_INT 2
37269: EQUAL
37270: AND
37271: IFFALSE 37331
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37273: LD_INT 22
37275: PUSH
37276: LD_VAR 0 16
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 35
37287: PUSH
37288: LD_INT 49
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 91
37297: PUSH
37298: LD_VAR 0 1
37302: PUSH
37303: LD_INT 10
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: LIST
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: LIST
37315: PPUSH
37316: CALL_OW 69
37320: NOT
37321: IFFALSE 37331
// weapon := ru_time_lapser ;
37323: LD_ADDR_VAR 0 18
37327: PUSH
37328: LD_INT 49
37330: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37331: LD_VAR 0 12
37335: PUSH
37336: LD_INT 1
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: IN
37346: PUSH
37347: LD_INT 11
37349: PUSH
37350: LD_VAR 0 5
37354: IN
37355: PUSH
37356: LD_INT 30
37358: PUSH
37359: LD_VAR 0 5
37363: IN
37364: OR
37365: AND
37366: PUSH
37367: LD_INT 6
37369: PPUSH
37370: LD_VAR 0 16
37374: PPUSH
37375: CALL_OW 321
37379: PUSH
37380: LD_INT 2
37382: EQUAL
37383: AND
37384: IFFALSE 37549
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37386: LD_INT 22
37388: PUSH
37389: LD_VAR 0 16
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 2
37400: PUSH
37401: LD_INT 35
37403: PUSH
37404: LD_INT 11
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 35
37413: PUSH
37414: LD_INT 30
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 91
37428: PUSH
37429: LD_VAR 0 1
37433: PUSH
37434: LD_INT 18
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: PPUSH
37447: CALL_OW 69
37451: NOT
37452: PUSH
37453: LD_INT 22
37455: PUSH
37456: LD_VAR 0 16
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 2
37467: PUSH
37468: LD_INT 30
37470: PUSH
37471: LD_INT 32
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 30
37480: PUSH
37481: LD_INT 33
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 91
37495: PUSH
37496: LD_VAR 0 1
37500: PUSH
37501: LD_INT 12
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: LIST
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: LIST
37513: PUSH
37514: EMPTY
37515: LIST
37516: PPUSH
37517: CALL_OW 69
37521: PUSH
37522: LD_INT 2
37524: GREATER
37525: AND
37526: IFFALSE 37549
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37528: LD_ADDR_VAR 0 18
37532: PUSH
37533: LD_INT 11
37535: PUSH
37536: LD_INT 30
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_VAR 0 12
37547: ARRAY
37548: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37549: LD_VAR 0 18
37553: NOT
37554: PUSH
37555: LD_INT 40
37557: PPUSH
37558: LD_VAR 0 16
37562: PPUSH
37563: CALL_OW 321
37567: PUSH
37568: LD_INT 2
37570: EQUAL
37571: AND
37572: PUSH
37573: LD_INT 7
37575: PUSH
37576: LD_VAR 0 5
37580: IN
37581: PUSH
37582: LD_INT 28
37584: PUSH
37585: LD_VAR 0 5
37589: IN
37590: OR
37591: PUSH
37592: LD_INT 45
37594: PUSH
37595: LD_VAR 0 5
37599: IN
37600: OR
37601: AND
37602: IFFALSE 37856
// begin hex := GetHexInfo ( x , y ) ;
37604: LD_ADDR_VAR 0 4
37608: PUSH
37609: LD_VAR 0 10
37613: PPUSH
37614: LD_VAR 0 11
37618: PPUSH
37619: CALL_OW 546
37623: ST_TO_ADDR
// if hex [ 1 ] then
37624: LD_VAR 0 4
37628: PUSH
37629: LD_INT 1
37631: ARRAY
37632: IFFALSE 37636
// exit ;
37634: GO 38039
// height := hex [ 2 ] ;
37636: LD_ADDR_VAR 0 15
37640: PUSH
37641: LD_VAR 0 4
37645: PUSH
37646: LD_INT 2
37648: ARRAY
37649: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37650: LD_ADDR_VAR 0 14
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: LD_INT 2
37660: PUSH
37661: LD_INT 3
37663: PUSH
37664: LD_INT 5
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: ST_TO_ADDR
// for i in tmp do
37673: LD_ADDR_VAR 0 8
37677: PUSH
37678: LD_VAR 0 14
37682: PUSH
37683: FOR_IN
37684: IFFALSE 37854
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37686: LD_ADDR_VAR 0 9
37690: PUSH
37691: LD_VAR 0 10
37695: PPUSH
37696: LD_VAR 0 8
37700: PPUSH
37701: LD_INT 5
37703: PPUSH
37704: CALL_OW 272
37708: PUSH
37709: LD_VAR 0 11
37713: PPUSH
37714: LD_VAR 0 8
37718: PPUSH
37719: LD_INT 5
37721: PPUSH
37722: CALL_OW 273
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37731: LD_VAR 0 9
37735: PUSH
37736: LD_INT 1
37738: ARRAY
37739: PPUSH
37740: LD_VAR 0 9
37744: PUSH
37745: LD_INT 2
37747: ARRAY
37748: PPUSH
37749: CALL_OW 488
37753: IFFALSE 37852
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37755: LD_ADDR_VAR 0 4
37759: PUSH
37760: LD_VAR 0 9
37764: PUSH
37765: LD_INT 1
37767: ARRAY
37768: PPUSH
37769: LD_VAR 0 9
37773: PUSH
37774: LD_INT 2
37776: ARRAY
37777: PPUSH
37778: CALL_OW 546
37782: ST_TO_ADDR
// if hex [ 1 ] then
37783: LD_VAR 0 4
37787: PUSH
37788: LD_INT 1
37790: ARRAY
37791: IFFALSE 37795
// continue ;
37793: GO 37683
// h := hex [ 2 ] ;
37795: LD_ADDR_VAR 0 13
37799: PUSH
37800: LD_VAR 0 4
37804: PUSH
37805: LD_INT 2
37807: ARRAY
37808: ST_TO_ADDR
// if h + 7 < height then
37809: LD_VAR 0 13
37813: PUSH
37814: LD_INT 7
37816: PLUS
37817: PUSH
37818: LD_VAR 0 15
37822: LESS
37823: IFFALSE 37852
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37825: LD_ADDR_VAR 0 18
37829: PUSH
37830: LD_INT 7
37832: PUSH
37833: LD_INT 28
37835: PUSH
37836: LD_INT 45
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: PUSH
37844: LD_VAR 0 12
37848: ARRAY
37849: ST_TO_ADDR
// break ;
37850: GO 37854
// end ; end ; end ;
37852: GO 37683
37854: POP
37855: POP
// end ; if not weapon then
37856: LD_VAR 0 18
37860: NOT
37861: IFFALSE 37921
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37863: LD_ADDR_VAR 0 5
37867: PUSH
37868: LD_VAR 0 5
37872: PUSH
37873: LD_INT 11
37875: PUSH
37876: LD_INT 30
37878: PUSH
37879: LD_INT 49
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: LIST
37886: DIFF
37887: ST_TO_ADDR
// if not list then
37888: LD_VAR 0 5
37892: NOT
37893: IFFALSE 37897
// exit ;
37895: GO 38039
// weapon := list [ rand ( 1 , list ) ] ;
37897: LD_ADDR_VAR 0 18
37901: PUSH
37902: LD_VAR 0 5
37906: PUSH
37907: LD_INT 1
37909: PPUSH
37910: LD_VAR 0 5
37914: PPUSH
37915: CALL_OW 12
37919: ARRAY
37920: ST_TO_ADDR
// end ; if weapon then
37921: LD_VAR 0 18
37925: IFFALSE 38039
// begin tmp := CostOfWeapon ( weapon ) ;
37927: LD_ADDR_VAR 0 14
37931: PUSH
37932: LD_VAR 0 18
37936: PPUSH
37937: CALL_OW 451
37941: ST_TO_ADDR
// j := GetBase ( tower ) ;
37942: LD_ADDR_VAR 0 9
37946: PUSH
37947: LD_VAR 0 1
37951: PPUSH
37952: CALL_OW 274
37956: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37957: LD_VAR 0 9
37961: PPUSH
37962: LD_INT 1
37964: PPUSH
37965: CALL_OW 275
37969: PUSH
37970: LD_VAR 0 14
37974: PUSH
37975: LD_INT 1
37977: ARRAY
37978: GREATEREQUAL
37979: PUSH
37980: LD_VAR 0 9
37984: PPUSH
37985: LD_INT 2
37987: PPUSH
37988: CALL_OW 275
37992: PUSH
37993: LD_VAR 0 14
37997: PUSH
37998: LD_INT 2
38000: ARRAY
38001: GREATEREQUAL
38002: AND
38003: PUSH
38004: LD_VAR 0 9
38008: PPUSH
38009: LD_INT 3
38011: PPUSH
38012: CALL_OW 275
38016: PUSH
38017: LD_VAR 0 14
38021: PUSH
38022: LD_INT 3
38024: ARRAY
38025: GREATEREQUAL
38026: AND
38027: IFFALSE 38039
// result := weapon ;
38029: LD_ADDR_VAR 0 3
38033: PUSH
38034: LD_VAR 0 18
38038: ST_TO_ADDR
// end ; end ;
38039: LD_VAR 0 3
38043: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38044: LD_INT 0
38046: PPUSH
38047: PPUSH
// result := true ;
38048: LD_ADDR_VAR 0 3
38052: PUSH
38053: LD_INT 1
38055: ST_TO_ADDR
// if array1 = array2 then
38056: LD_VAR 0 1
38060: PUSH
38061: LD_VAR 0 2
38065: EQUAL
38066: IFFALSE 38126
// begin for i = 1 to array1 do
38068: LD_ADDR_VAR 0 4
38072: PUSH
38073: DOUBLE
38074: LD_INT 1
38076: DEC
38077: ST_TO_ADDR
38078: LD_VAR 0 1
38082: PUSH
38083: FOR_TO
38084: IFFALSE 38122
// if array1 [ i ] <> array2 [ i ] then
38086: LD_VAR 0 1
38090: PUSH
38091: LD_VAR 0 4
38095: ARRAY
38096: PUSH
38097: LD_VAR 0 2
38101: PUSH
38102: LD_VAR 0 4
38106: ARRAY
38107: NONEQUAL
38108: IFFALSE 38120
// begin result := false ;
38110: LD_ADDR_VAR 0 3
38114: PUSH
38115: LD_INT 0
38117: ST_TO_ADDR
// break ;
38118: GO 38122
// end ;
38120: GO 38083
38122: POP
38123: POP
// end else
38124: GO 38134
// result := false ;
38126: LD_ADDR_VAR 0 3
38130: PUSH
38131: LD_INT 0
38133: ST_TO_ADDR
// end ;
38134: LD_VAR 0 3
38138: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38139: LD_INT 0
38141: PPUSH
38142: PPUSH
// if not array1 or not array2 then
38143: LD_VAR 0 1
38147: NOT
38148: PUSH
38149: LD_VAR 0 2
38153: NOT
38154: OR
38155: IFFALSE 38159
// exit ;
38157: GO 38223
// result := true ;
38159: LD_ADDR_VAR 0 3
38163: PUSH
38164: LD_INT 1
38166: ST_TO_ADDR
// for i = 1 to array1 do
38167: LD_ADDR_VAR 0 4
38171: PUSH
38172: DOUBLE
38173: LD_INT 1
38175: DEC
38176: ST_TO_ADDR
38177: LD_VAR 0 1
38181: PUSH
38182: FOR_TO
38183: IFFALSE 38221
// if array1 [ i ] <> array2 [ i ] then
38185: LD_VAR 0 1
38189: PUSH
38190: LD_VAR 0 4
38194: ARRAY
38195: PUSH
38196: LD_VAR 0 2
38200: PUSH
38201: LD_VAR 0 4
38205: ARRAY
38206: NONEQUAL
38207: IFFALSE 38219
// begin result := false ;
38209: LD_ADDR_VAR 0 3
38213: PUSH
38214: LD_INT 0
38216: ST_TO_ADDR
// break ;
38217: GO 38221
// end ;
38219: GO 38182
38221: POP
38222: POP
// end ;
38223: LD_VAR 0 3
38227: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38228: LD_INT 0
38230: PPUSH
38231: PPUSH
38232: PPUSH
// pom := GetBase ( fac ) ;
38233: LD_ADDR_VAR 0 5
38237: PUSH
38238: LD_VAR 0 1
38242: PPUSH
38243: CALL_OW 274
38247: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38248: LD_ADDR_VAR 0 4
38252: PUSH
38253: LD_VAR 0 2
38257: PUSH
38258: LD_INT 1
38260: ARRAY
38261: PPUSH
38262: LD_VAR 0 2
38266: PUSH
38267: LD_INT 2
38269: ARRAY
38270: PPUSH
38271: LD_VAR 0 2
38275: PUSH
38276: LD_INT 3
38278: ARRAY
38279: PPUSH
38280: LD_VAR 0 2
38284: PUSH
38285: LD_INT 4
38287: ARRAY
38288: PPUSH
38289: CALL_OW 449
38293: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38294: LD_ADDR_VAR 0 3
38298: PUSH
38299: LD_VAR 0 5
38303: PPUSH
38304: LD_INT 1
38306: PPUSH
38307: CALL_OW 275
38311: PUSH
38312: LD_VAR 0 4
38316: PUSH
38317: LD_INT 1
38319: ARRAY
38320: GREATEREQUAL
38321: PUSH
38322: LD_VAR 0 5
38326: PPUSH
38327: LD_INT 2
38329: PPUSH
38330: CALL_OW 275
38334: PUSH
38335: LD_VAR 0 4
38339: PUSH
38340: LD_INT 2
38342: ARRAY
38343: GREATEREQUAL
38344: AND
38345: PUSH
38346: LD_VAR 0 5
38350: PPUSH
38351: LD_INT 3
38353: PPUSH
38354: CALL_OW 275
38358: PUSH
38359: LD_VAR 0 4
38363: PUSH
38364: LD_INT 3
38366: ARRAY
38367: GREATEREQUAL
38368: AND
38369: ST_TO_ADDR
// end ;
38370: LD_VAR 0 3
38374: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38375: LD_INT 0
38377: PPUSH
38378: PPUSH
38379: PPUSH
38380: PPUSH
// pom := GetBase ( building ) ;
38381: LD_ADDR_VAR 0 3
38385: PUSH
38386: LD_VAR 0 1
38390: PPUSH
38391: CALL_OW 274
38395: ST_TO_ADDR
// if not pom then
38396: LD_VAR 0 3
38400: NOT
38401: IFFALSE 38405
// exit ;
38403: GO 38575
// btype := GetBType ( building ) ;
38405: LD_ADDR_VAR 0 5
38409: PUSH
38410: LD_VAR 0 1
38414: PPUSH
38415: CALL_OW 266
38419: ST_TO_ADDR
// if btype = b_armoury then
38420: LD_VAR 0 5
38424: PUSH
38425: LD_INT 4
38427: EQUAL
38428: IFFALSE 38438
// btype := b_barracks ;
38430: LD_ADDR_VAR 0 5
38434: PUSH
38435: LD_INT 5
38437: ST_TO_ADDR
// if btype = b_depot then
38438: LD_VAR 0 5
38442: PUSH
38443: LD_INT 0
38445: EQUAL
38446: IFFALSE 38456
// btype := b_warehouse ;
38448: LD_ADDR_VAR 0 5
38452: PUSH
38453: LD_INT 1
38455: ST_TO_ADDR
// if btype = b_workshop then
38456: LD_VAR 0 5
38460: PUSH
38461: LD_INT 2
38463: EQUAL
38464: IFFALSE 38474
// btype := b_factory ;
38466: LD_ADDR_VAR 0 5
38470: PUSH
38471: LD_INT 3
38473: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38474: LD_ADDR_VAR 0 4
38478: PUSH
38479: LD_VAR 0 5
38483: PPUSH
38484: LD_VAR 0 1
38488: PPUSH
38489: CALL_OW 248
38493: PPUSH
38494: CALL_OW 450
38498: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38499: LD_ADDR_VAR 0 2
38503: PUSH
38504: LD_VAR 0 3
38508: PPUSH
38509: LD_INT 1
38511: PPUSH
38512: CALL_OW 275
38516: PUSH
38517: LD_VAR 0 4
38521: PUSH
38522: LD_INT 1
38524: ARRAY
38525: GREATEREQUAL
38526: PUSH
38527: LD_VAR 0 3
38531: PPUSH
38532: LD_INT 2
38534: PPUSH
38535: CALL_OW 275
38539: PUSH
38540: LD_VAR 0 4
38544: PUSH
38545: LD_INT 2
38547: ARRAY
38548: GREATEREQUAL
38549: AND
38550: PUSH
38551: LD_VAR 0 3
38555: PPUSH
38556: LD_INT 3
38558: PPUSH
38559: CALL_OW 275
38563: PUSH
38564: LD_VAR 0 4
38568: PUSH
38569: LD_INT 3
38571: ARRAY
38572: GREATEREQUAL
38573: AND
38574: ST_TO_ADDR
// end ;
38575: LD_VAR 0 2
38579: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38580: LD_INT 0
38582: PPUSH
38583: PPUSH
38584: PPUSH
// pom := GetBase ( building ) ;
38585: LD_ADDR_VAR 0 4
38589: PUSH
38590: LD_VAR 0 1
38594: PPUSH
38595: CALL_OW 274
38599: ST_TO_ADDR
// if not pom then
38600: LD_VAR 0 4
38604: NOT
38605: IFFALSE 38609
// exit ;
38607: GO 38710
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38609: LD_ADDR_VAR 0 5
38613: PUSH
38614: LD_VAR 0 2
38618: PPUSH
38619: LD_VAR 0 1
38623: PPUSH
38624: CALL_OW 248
38628: PPUSH
38629: CALL_OW 450
38633: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38634: LD_ADDR_VAR 0 3
38638: PUSH
38639: LD_VAR 0 4
38643: PPUSH
38644: LD_INT 1
38646: PPUSH
38647: CALL_OW 275
38651: PUSH
38652: LD_VAR 0 5
38656: PUSH
38657: LD_INT 1
38659: ARRAY
38660: GREATEREQUAL
38661: PUSH
38662: LD_VAR 0 4
38666: PPUSH
38667: LD_INT 2
38669: PPUSH
38670: CALL_OW 275
38674: PUSH
38675: LD_VAR 0 5
38679: PUSH
38680: LD_INT 2
38682: ARRAY
38683: GREATEREQUAL
38684: AND
38685: PUSH
38686: LD_VAR 0 4
38690: PPUSH
38691: LD_INT 3
38693: PPUSH
38694: CALL_OW 275
38698: PUSH
38699: LD_VAR 0 5
38703: PUSH
38704: LD_INT 3
38706: ARRAY
38707: GREATEREQUAL
38708: AND
38709: ST_TO_ADDR
// end ;
38710: LD_VAR 0 3
38714: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38715: LD_INT 0
38717: PPUSH
38718: PPUSH
38719: PPUSH
38720: PPUSH
38721: PPUSH
38722: PPUSH
38723: PPUSH
38724: PPUSH
38725: PPUSH
38726: PPUSH
38727: PPUSH
// result := false ;
38728: LD_ADDR_VAR 0 8
38732: PUSH
38733: LD_INT 0
38735: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38736: LD_VAR 0 5
38740: NOT
38741: PUSH
38742: LD_VAR 0 1
38746: NOT
38747: OR
38748: PUSH
38749: LD_VAR 0 2
38753: NOT
38754: OR
38755: PUSH
38756: LD_VAR 0 3
38760: NOT
38761: OR
38762: IFFALSE 38766
// exit ;
38764: GO 39567
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38766: LD_ADDR_VAR 0 14
38770: PUSH
38771: LD_VAR 0 1
38775: PPUSH
38776: LD_VAR 0 2
38780: PPUSH
38781: LD_VAR 0 3
38785: PPUSH
38786: LD_VAR 0 4
38790: PPUSH
38791: LD_VAR 0 5
38795: PUSH
38796: LD_INT 1
38798: ARRAY
38799: PPUSH
38800: CALL_OW 248
38804: PPUSH
38805: LD_INT 0
38807: PPUSH
38808: CALL 40404 0 6
38812: ST_TO_ADDR
// if not hexes then
38813: LD_VAR 0 14
38817: NOT
38818: IFFALSE 38822
// exit ;
38820: GO 39567
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38822: LD_ADDR_VAR 0 17
38826: PUSH
38827: LD_VAR 0 5
38831: PPUSH
38832: LD_INT 22
38834: PUSH
38835: LD_VAR 0 13
38839: PPUSH
38840: CALL_OW 255
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 2
38851: PUSH
38852: LD_INT 30
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 30
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: LIST
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PPUSH
38881: CALL_OW 72
38885: ST_TO_ADDR
// for i = 1 to hexes do
38886: LD_ADDR_VAR 0 9
38890: PUSH
38891: DOUBLE
38892: LD_INT 1
38894: DEC
38895: ST_TO_ADDR
38896: LD_VAR 0 14
38900: PUSH
38901: FOR_TO
38902: IFFALSE 39565
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38904: LD_ADDR_VAR 0 13
38908: PUSH
38909: LD_VAR 0 14
38913: PUSH
38914: LD_VAR 0 9
38918: ARRAY
38919: PUSH
38920: LD_INT 1
38922: ARRAY
38923: PPUSH
38924: LD_VAR 0 14
38928: PUSH
38929: LD_VAR 0 9
38933: ARRAY
38934: PUSH
38935: LD_INT 2
38937: ARRAY
38938: PPUSH
38939: CALL_OW 428
38943: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38944: LD_VAR 0 14
38948: PUSH
38949: LD_VAR 0 9
38953: ARRAY
38954: PUSH
38955: LD_INT 1
38957: ARRAY
38958: PPUSH
38959: LD_VAR 0 14
38963: PUSH
38964: LD_VAR 0 9
38968: ARRAY
38969: PUSH
38970: LD_INT 2
38972: ARRAY
38973: PPUSH
38974: CALL_OW 351
38978: PUSH
38979: LD_VAR 0 14
38983: PUSH
38984: LD_VAR 0 9
38988: ARRAY
38989: PUSH
38990: LD_INT 1
38992: ARRAY
38993: PPUSH
38994: LD_VAR 0 14
38998: PUSH
38999: LD_VAR 0 9
39003: ARRAY
39004: PUSH
39005: LD_INT 2
39007: ARRAY
39008: PPUSH
39009: CALL_OW 488
39013: NOT
39014: OR
39015: PUSH
39016: LD_VAR 0 13
39020: PPUSH
39021: CALL_OW 247
39025: PUSH
39026: LD_INT 3
39028: EQUAL
39029: OR
39030: IFFALSE 39036
// exit ;
39032: POP
39033: POP
39034: GO 39567
// if not tmp then
39036: LD_VAR 0 13
39040: NOT
39041: IFFALSE 39045
// continue ;
39043: GO 38901
// result := true ;
39045: LD_ADDR_VAR 0 8
39049: PUSH
39050: LD_INT 1
39052: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39053: LD_VAR 0 13
39057: PPUSH
39058: CALL_OW 247
39062: PUSH
39063: LD_INT 2
39065: EQUAL
39066: PUSH
39067: LD_VAR 0 13
39071: PPUSH
39072: CALL_OW 263
39076: PUSH
39077: LD_INT 1
39079: EQUAL
39080: AND
39081: IFFALSE 39245
// begin if IsDrivenBy ( tmp ) then
39083: LD_VAR 0 13
39087: PPUSH
39088: CALL_OW 311
39092: IFFALSE 39096
// continue ;
39094: GO 38901
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39096: LD_VAR 0 6
39100: PPUSH
39101: LD_INT 3
39103: PUSH
39104: LD_INT 60
39106: PUSH
39107: EMPTY
39108: LIST
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 3
39116: PUSH
39117: LD_INT 55
39119: PUSH
39120: EMPTY
39121: LIST
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PPUSH
39131: CALL_OW 72
39135: IFFALSE 39243
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39137: LD_ADDR_VAR 0 18
39141: PUSH
39142: LD_VAR 0 6
39146: PPUSH
39147: LD_INT 3
39149: PUSH
39150: LD_INT 60
39152: PUSH
39153: EMPTY
39154: LIST
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 3
39162: PUSH
39163: LD_INT 55
39165: PUSH
39166: EMPTY
39167: LIST
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PPUSH
39177: CALL_OW 72
39181: PUSH
39182: LD_INT 1
39184: ARRAY
39185: ST_TO_ADDR
// if IsInUnit ( driver ) then
39186: LD_VAR 0 18
39190: PPUSH
39191: CALL_OW 310
39195: IFFALSE 39206
// ComExit ( driver ) ;
39197: LD_VAR 0 18
39201: PPUSH
39202: CALL 63588 0 1
// AddComEnterUnit ( driver , tmp ) ;
39206: LD_VAR 0 18
39210: PPUSH
39211: LD_VAR 0 13
39215: PPUSH
39216: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39220: LD_VAR 0 18
39224: PPUSH
39225: LD_VAR 0 7
39229: PPUSH
39230: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39234: LD_VAR 0 18
39238: PPUSH
39239: CALL_OW 181
// end ; continue ;
39243: GO 38901
// end ; if not tmp in cleaners then
39245: LD_VAR 0 13
39249: PUSH
39250: LD_VAR 0 6
39254: IN
39255: NOT
39256: IFFALSE 39563
// begin if dep then
39258: LD_VAR 0 17
39262: IFFALSE 39398
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39264: LD_ADDR_VAR 0 16
39268: PUSH
39269: LD_VAR 0 17
39273: PUSH
39274: LD_INT 1
39276: ARRAY
39277: PPUSH
39278: CALL_OW 250
39282: PPUSH
39283: LD_VAR 0 17
39287: PUSH
39288: LD_INT 1
39290: ARRAY
39291: PPUSH
39292: CALL_OW 254
39296: PPUSH
39297: LD_INT 5
39299: PPUSH
39300: CALL_OW 272
39304: PUSH
39305: LD_VAR 0 17
39309: PUSH
39310: LD_INT 1
39312: ARRAY
39313: PPUSH
39314: CALL_OW 251
39318: PPUSH
39319: LD_VAR 0 17
39323: PUSH
39324: LD_INT 1
39326: ARRAY
39327: PPUSH
39328: CALL_OW 254
39332: PPUSH
39333: LD_INT 5
39335: PPUSH
39336: CALL_OW 273
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39345: LD_VAR 0 16
39349: PUSH
39350: LD_INT 1
39352: ARRAY
39353: PPUSH
39354: LD_VAR 0 16
39358: PUSH
39359: LD_INT 2
39361: ARRAY
39362: PPUSH
39363: CALL_OW 488
39367: IFFALSE 39398
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39369: LD_VAR 0 13
39373: PPUSH
39374: LD_VAR 0 16
39378: PUSH
39379: LD_INT 1
39381: ARRAY
39382: PPUSH
39383: LD_VAR 0 16
39387: PUSH
39388: LD_INT 2
39390: ARRAY
39391: PPUSH
39392: CALL_OW 111
// continue ;
39396: GO 38901
// end ; end ; r := GetDir ( tmp ) ;
39398: LD_ADDR_VAR 0 15
39402: PUSH
39403: LD_VAR 0 13
39407: PPUSH
39408: CALL_OW 254
39412: ST_TO_ADDR
// if r = 5 then
39413: LD_VAR 0 15
39417: PUSH
39418: LD_INT 5
39420: EQUAL
39421: IFFALSE 39431
// r := 0 ;
39423: LD_ADDR_VAR 0 15
39427: PUSH
39428: LD_INT 0
39430: ST_TO_ADDR
// for j = r to 5 do
39431: LD_ADDR_VAR 0 10
39435: PUSH
39436: DOUBLE
39437: LD_VAR 0 15
39441: DEC
39442: ST_TO_ADDR
39443: LD_INT 5
39445: PUSH
39446: FOR_TO
39447: IFFALSE 39561
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39449: LD_ADDR_VAR 0 11
39453: PUSH
39454: LD_VAR 0 13
39458: PPUSH
39459: CALL_OW 250
39463: PPUSH
39464: LD_VAR 0 10
39468: PPUSH
39469: LD_INT 2
39471: PPUSH
39472: CALL_OW 272
39476: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39477: LD_ADDR_VAR 0 12
39481: PUSH
39482: LD_VAR 0 13
39486: PPUSH
39487: CALL_OW 251
39491: PPUSH
39492: LD_VAR 0 10
39496: PPUSH
39497: LD_INT 2
39499: PPUSH
39500: CALL_OW 273
39504: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39505: LD_VAR 0 11
39509: PPUSH
39510: LD_VAR 0 12
39514: PPUSH
39515: CALL_OW 488
39519: PUSH
39520: LD_VAR 0 11
39524: PPUSH
39525: LD_VAR 0 12
39529: PPUSH
39530: CALL_OW 428
39534: NOT
39535: AND
39536: IFFALSE 39559
// begin ComMoveXY ( tmp , _x , _y ) ;
39538: LD_VAR 0 13
39542: PPUSH
39543: LD_VAR 0 11
39547: PPUSH
39548: LD_VAR 0 12
39552: PPUSH
39553: CALL_OW 111
// break ;
39557: GO 39561
// end ; end ;
39559: GO 39446
39561: POP
39562: POP
// end ; end ;
39563: GO 38901
39565: POP
39566: POP
// end ;
39567: LD_VAR 0 8
39571: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
39572: LD_INT 0
39574: PPUSH
39575: PPUSH
39576: PPUSH
39577: PPUSH
39578: PPUSH
39579: PPUSH
39580: PPUSH
39581: PPUSH
39582: PPUSH
39583: PPUSH
// result := false ;
39584: LD_ADDR_VAR 0 6
39588: PUSH
39589: LD_INT 0
39591: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39592: LD_VAR 0 1
39596: NOT
39597: PUSH
39598: LD_VAR 0 1
39602: PPUSH
39603: CALL_OW 266
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: IN
39618: NOT
39619: OR
39620: PUSH
39621: LD_VAR 0 2
39625: NOT
39626: OR
39627: PUSH
39628: LD_VAR 0 5
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: LD_INT 3
39644: PUSH
39645: LD_INT 4
39647: PUSH
39648: LD_INT 5
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: IN
39659: NOT
39660: OR
39661: PUSH
39662: LD_VAR 0 3
39666: PPUSH
39667: LD_VAR 0 4
39671: PPUSH
39672: CALL_OW 488
39676: NOT
39677: OR
39678: IFFALSE 39682
// exit ;
39680: GO 40399
// pom := GetBase ( depot ) ;
39682: LD_ADDR_VAR 0 10
39686: PUSH
39687: LD_VAR 0 1
39691: PPUSH
39692: CALL_OW 274
39696: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39697: LD_ADDR_VAR 0 11
39701: PUSH
39702: LD_VAR 0 2
39706: PPUSH
39707: LD_VAR 0 1
39711: PPUSH
39712: CALL_OW 248
39716: PPUSH
39717: CALL_OW 450
39721: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39722: LD_VAR 0 10
39726: PPUSH
39727: LD_INT 1
39729: PPUSH
39730: CALL_OW 275
39734: PUSH
39735: LD_VAR 0 11
39739: PUSH
39740: LD_INT 1
39742: ARRAY
39743: GREATEREQUAL
39744: PUSH
39745: LD_VAR 0 10
39749: PPUSH
39750: LD_INT 2
39752: PPUSH
39753: CALL_OW 275
39757: PUSH
39758: LD_VAR 0 11
39762: PUSH
39763: LD_INT 2
39765: ARRAY
39766: GREATEREQUAL
39767: AND
39768: PUSH
39769: LD_VAR 0 10
39773: PPUSH
39774: LD_INT 3
39776: PPUSH
39777: CALL_OW 275
39781: PUSH
39782: LD_VAR 0 11
39786: PUSH
39787: LD_INT 3
39789: ARRAY
39790: GREATEREQUAL
39791: AND
39792: NOT
39793: IFFALSE 39797
// exit ;
39795: GO 40399
// if GetBType ( depot ) = b_depot then
39797: LD_VAR 0 1
39801: PPUSH
39802: CALL_OW 266
39806: PUSH
39807: LD_INT 0
39809: EQUAL
39810: IFFALSE 39822
// dist := 28 else
39812: LD_ADDR_VAR 0 14
39816: PUSH
39817: LD_INT 28
39819: ST_TO_ADDR
39820: GO 39830
// dist := 36 ;
39822: LD_ADDR_VAR 0 14
39826: PUSH
39827: LD_INT 36
39829: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39830: LD_VAR 0 1
39834: PPUSH
39835: LD_VAR 0 3
39839: PPUSH
39840: LD_VAR 0 4
39844: PPUSH
39845: CALL_OW 297
39849: PUSH
39850: LD_VAR 0 14
39854: GREATER
39855: IFFALSE 39859
// exit ;
39857: GO 40399
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39859: LD_ADDR_VAR 0 12
39863: PUSH
39864: LD_VAR 0 2
39868: PPUSH
39869: LD_VAR 0 3
39873: PPUSH
39874: LD_VAR 0 4
39878: PPUSH
39879: LD_VAR 0 5
39883: PPUSH
39884: LD_VAR 0 1
39888: PPUSH
39889: CALL_OW 248
39893: PPUSH
39894: LD_INT 0
39896: PPUSH
39897: CALL 40404 0 6
39901: ST_TO_ADDR
// if not hexes then
39902: LD_VAR 0 12
39906: NOT
39907: IFFALSE 39911
// exit ;
39909: GO 40399
// hex := GetHexInfo ( x , y ) ;
39911: LD_ADDR_VAR 0 15
39915: PUSH
39916: LD_VAR 0 3
39920: PPUSH
39921: LD_VAR 0 4
39925: PPUSH
39926: CALL_OW 546
39930: ST_TO_ADDR
// if hex [ 1 ] then
39931: LD_VAR 0 15
39935: PUSH
39936: LD_INT 1
39938: ARRAY
39939: IFFALSE 39943
// exit ;
39941: GO 40399
// height := hex [ 2 ] ;
39943: LD_ADDR_VAR 0 13
39947: PUSH
39948: LD_VAR 0 15
39952: PUSH
39953: LD_INT 2
39955: ARRAY
39956: ST_TO_ADDR
// for i = 1 to hexes do
39957: LD_ADDR_VAR 0 7
39961: PUSH
39962: DOUBLE
39963: LD_INT 1
39965: DEC
39966: ST_TO_ADDR
39967: LD_VAR 0 12
39971: PUSH
39972: FOR_TO
39973: IFFALSE 40303
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39975: LD_VAR 0 12
39979: PUSH
39980: LD_VAR 0 7
39984: ARRAY
39985: PUSH
39986: LD_INT 1
39988: ARRAY
39989: PPUSH
39990: LD_VAR 0 12
39994: PUSH
39995: LD_VAR 0 7
39999: ARRAY
40000: PUSH
40001: LD_INT 2
40003: ARRAY
40004: PPUSH
40005: CALL_OW 488
40009: NOT
40010: PUSH
40011: LD_VAR 0 12
40015: PUSH
40016: LD_VAR 0 7
40020: ARRAY
40021: PUSH
40022: LD_INT 1
40024: ARRAY
40025: PPUSH
40026: LD_VAR 0 12
40030: PUSH
40031: LD_VAR 0 7
40035: ARRAY
40036: PUSH
40037: LD_INT 2
40039: ARRAY
40040: PPUSH
40041: CALL_OW 428
40045: PUSH
40046: LD_INT 0
40048: GREATER
40049: OR
40050: PUSH
40051: LD_VAR 0 12
40055: PUSH
40056: LD_VAR 0 7
40060: ARRAY
40061: PUSH
40062: LD_INT 1
40064: ARRAY
40065: PPUSH
40066: LD_VAR 0 12
40070: PUSH
40071: LD_VAR 0 7
40075: ARRAY
40076: PUSH
40077: LD_INT 2
40079: ARRAY
40080: PPUSH
40081: CALL_OW 351
40085: OR
40086: IFFALSE 40092
// exit ;
40088: POP
40089: POP
40090: GO 40399
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40092: LD_ADDR_VAR 0 8
40096: PUSH
40097: LD_VAR 0 12
40101: PUSH
40102: LD_VAR 0 7
40106: ARRAY
40107: PUSH
40108: LD_INT 1
40110: ARRAY
40111: PPUSH
40112: LD_VAR 0 12
40116: PUSH
40117: LD_VAR 0 7
40121: ARRAY
40122: PUSH
40123: LD_INT 2
40125: ARRAY
40126: PPUSH
40127: CALL_OW 546
40131: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40132: LD_VAR 0 8
40136: PUSH
40137: LD_INT 1
40139: ARRAY
40140: PUSH
40141: LD_VAR 0 8
40145: PUSH
40146: LD_INT 2
40148: ARRAY
40149: PUSH
40150: LD_VAR 0 13
40154: PUSH
40155: LD_INT 2
40157: PLUS
40158: GREATER
40159: OR
40160: PUSH
40161: LD_VAR 0 8
40165: PUSH
40166: LD_INT 2
40168: ARRAY
40169: PUSH
40170: LD_VAR 0 13
40174: PUSH
40175: LD_INT 2
40177: MINUS
40178: LESS
40179: OR
40180: PUSH
40181: LD_VAR 0 8
40185: PUSH
40186: LD_INT 3
40188: ARRAY
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: LD_INT 8
40195: PUSH
40196: LD_INT 9
40198: PUSH
40199: LD_INT 10
40201: PUSH
40202: LD_INT 11
40204: PUSH
40205: LD_INT 12
40207: PUSH
40208: LD_INT 13
40210: PUSH
40211: LD_INT 16
40213: PUSH
40214: LD_INT 17
40216: PUSH
40217: LD_INT 18
40219: PUSH
40220: LD_INT 19
40222: PUSH
40223: LD_INT 20
40225: PUSH
40226: LD_INT 21
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: IN
40244: NOT
40245: OR
40246: PUSH
40247: LD_VAR 0 8
40251: PUSH
40252: LD_INT 5
40254: ARRAY
40255: NOT
40256: OR
40257: PUSH
40258: LD_VAR 0 8
40262: PUSH
40263: LD_INT 6
40265: ARRAY
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: LD_INT 2
40272: PUSH
40273: LD_INT 7
40275: PUSH
40276: LD_INT 9
40278: PUSH
40279: LD_INT 10
40281: PUSH
40282: LD_INT 11
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: IN
40293: NOT
40294: OR
40295: IFFALSE 40301
// exit ;
40297: POP
40298: POP
40299: GO 40399
// end ;
40301: GO 39972
40303: POP
40304: POP
// side := GetSide ( depot ) ;
40305: LD_ADDR_VAR 0 9
40309: PUSH
40310: LD_VAR 0 1
40314: PPUSH
40315: CALL_OW 255
40319: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40320: LD_VAR 0 9
40324: PPUSH
40325: LD_VAR 0 3
40329: PPUSH
40330: LD_VAR 0 4
40334: PPUSH
40335: LD_INT 20
40337: PPUSH
40338: CALL 32733 0 4
40342: PUSH
40343: LD_INT 4
40345: ARRAY
40346: IFFALSE 40350
// exit ;
40348: GO 40399
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40350: LD_VAR 0 2
40354: PUSH
40355: LD_INT 29
40357: PUSH
40358: LD_INT 30
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: IN
40365: PUSH
40366: LD_VAR 0 3
40370: PPUSH
40371: LD_VAR 0 4
40375: PPUSH
40376: LD_VAR 0 9
40380: PPUSH
40381: CALL_OW 440
40385: NOT
40386: AND
40387: IFFALSE 40391
// exit ;
40389: GO 40399
// result := true ;
40391: LD_ADDR_VAR 0 6
40395: PUSH
40396: LD_INT 1
40398: ST_TO_ADDR
// end ;
40399: LD_VAR 0 6
40403: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40404: LD_INT 0
40406: PPUSH
40407: PPUSH
40408: PPUSH
40409: PPUSH
40410: PPUSH
40411: PPUSH
40412: PPUSH
40413: PPUSH
40414: PPUSH
40415: PPUSH
40416: PPUSH
40417: PPUSH
40418: PPUSH
40419: PPUSH
40420: PPUSH
40421: PPUSH
40422: PPUSH
40423: PPUSH
40424: PPUSH
40425: PPUSH
40426: PPUSH
40427: PPUSH
40428: PPUSH
40429: PPUSH
40430: PPUSH
40431: PPUSH
40432: PPUSH
40433: PPUSH
40434: PPUSH
40435: PPUSH
40436: PPUSH
40437: PPUSH
40438: PPUSH
40439: PPUSH
40440: PPUSH
40441: PPUSH
40442: PPUSH
40443: PPUSH
40444: PPUSH
40445: PPUSH
40446: PPUSH
40447: PPUSH
40448: PPUSH
40449: PPUSH
40450: PPUSH
40451: PPUSH
40452: PPUSH
40453: PPUSH
40454: PPUSH
40455: PPUSH
40456: PPUSH
40457: PPUSH
40458: PPUSH
40459: PPUSH
40460: PPUSH
40461: PPUSH
40462: PPUSH
40463: PPUSH
// result = [ ] ;
40464: LD_ADDR_VAR 0 7
40468: PUSH
40469: EMPTY
40470: ST_TO_ADDR
// temp_list = [ ] ;
40471: LD_ADDR_VAR 0 9
40475: PUSH
40476: EMPTY
40477: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40478: LD_VAR 0 4
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: LD_INT 1
40488: PUSH
40489: LD_INT 2
40491: PUSH
40492: LD_INT 3
40494: PUSH
40495: LD_INT 4
40497: PUSH
40498: LD_INT 5
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: IN
40509: NOT
40510: PUSH
40511: LD_VAR 0 1
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: IN
40526: PUSH
40527: LD_VAR 0 5
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: LD_INT 2
40537: PUSH
40538: LD_INT 3
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: LIST
40545: IN
40546: NOT
40547: AND
40548: OR
40549: IFFALSE 40553
// exit ;
40551: GO 58944
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40553: LD_VAR 0 1
40557: PUSH
40558: LD_INT 6
40560: PUSH
40561: LD_INT 7
40563: PUSH
40564: LD_INT 8
40566: PUSH
40567: LD_INT 13
40569: PUSH
40570: LD_INT 12
40572: PUSH
40573: LD_INT 15
40575: PUSH
40576: LD_INT 11
40578: PUSH
40579: LD_INT 14
40581: PUSH
40582: LD_INT 10
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: IN
40596: IFFALSE 40606
// btype = b_lab ;
40598: LD_ADDR_VAR 0 1
40602: PUSH
40603: LD_INT 6
40605: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40606: LD_VAR 0 6
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: LD_INT 2
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: LIST
40624: IN
40625: NOT
40626: PUSH
40627: LD_VAR 0 1
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: LD_INT 2
40640: PUSH
40641: LD_INT 3
40643: PUSH
40644: LD_INT 6
40646: PUSH
40647: LD_INT 36
40649: PUSH
40650: LD_INT 4
40652: PUSH
40653: LD_INT 5
40655: PUSH
40656: LD_INT 31
40658: PUSH
40659: LD_INT 32
40661: PUSH
40662: LD_INT 33
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: IN
40678: NOT
40679: PUSH
40680: LD_VAR 0 6
40684: PUSH
40685: LD_INT 1
40687: EQUAL
40688: AND
40689: OR
40690: PUSH
40691: LD_VAR 0 1
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: LD_INT 3
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: IN
40706: NOT
40707: PUSH
40708: LD_VAR 0 6
40712: PUSH
40713: LD_INT 2
40715: EQUAL
40716: AND
40717: OR
40718: IFFALSE 40728
// mode = 0 ;
40720: LD_ADDR_VAR 0 6
40724: PUSH
40725: LD_INT 0
40727: ST_TO_ADDR
// case mode of 0 :
40728: LD_VAR 0 6
40732: PUSH
40733: LD_INT 0
40735: DOUBLE
40736: EQUAL
40737: IFTRUE 40741
40739: GO 52194
40741: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40742: LD_ADDR_VAR 0 11
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 1
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: LD_INT 2
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: LD_INT 2
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: LD_INT 2
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 2
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: LD_INT 3
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 3
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: LD_INT 2
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40935: LD_ADDR_VAR 0 12
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: LD_INT 0
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: LD_INT 1
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 1
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: LD_INT 1
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: LD_INT 1
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 2
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 2
41058: NEG
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 2
41069: NEG
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 2
41081: NEG
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 3
41092: NEG
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 3
41103: NEG
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41131: LD_ADDR_VAR 0 13
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: LD_INT 2
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 2
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 2
41234: PUSH
41235: LD_INT 2
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 2
41254: NEG
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 2
41266: NEG
41267: PUSH
41268: LD_INT 2
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 2
41278: NEG
41279: PUSH
41280: LD_INT 3
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 3
41290: NEG
41291: PUSH
41292: LD_INT 2
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 3
41302: NEG
41303: PUSH
41304: LD_INT 3
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41330: LD_ADDR_VAR 0 14
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 1
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: LD_INT 1
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 1
41388: NEG
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 1
41411: NEG
41412: PUSH
41413: LD_INT 2
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: LD_INT 2
41426: NEG
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 1
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: LD_INT 2
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: LD_INT 2
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: NEG
41477: PUSH
41478: LD_INT 3
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: LD_INT 3
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41526: LD_ADDR_VAR 0 15
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: LD_INT 1
41546: NEG
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: LD_INT 1
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 1
41584: NEG
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: NEG
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 2
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 2
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 2
41660: NEG
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 3
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 3
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41719: LD_ADDR_VAR 0 16
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: LD_INT 2
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 2
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 2
41822: PUSH
41823: LD_INT 2
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: LD_INT 2
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 2
41842: NEG
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 3
41866: PUSH
41867: LD_INT 2
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 3
41876: PUSH
41877: LD_INT 3
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: LD_INT 3
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41912: LD_ADDR_VAR 0 17
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: LD_INT 2
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 2
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 2
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 2
42047: PUSH
42048: LD_INT 2
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 2
42088: NEG
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 2
42099: NEG
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: LD_INT 2
42115: NEG
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42142: LD_ADDR_VAR 0 18
42146: PUSH
42147: LD_INT 0
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 1
42200: NEG
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: LD_INT 1
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PUSH
42225: LD_INT 2
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: LD_INT 2
42238: NEG
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 2
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 2
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: LD_INT 2
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: LD_INT 2
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: LD_INT 2
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 2
42318: NEG
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 2
42329: NEG
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: LD_INT 2
42345: NEG
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42372: LD_ADDR_VAR 0 19
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: LD_INT 1
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: NEG
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: PUSH
42455: LD_INT 2
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 2
42507: PUSH
42508: LD_INT 2
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: LD_INT 2
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 2
42548: NEG
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 2
42559: NEG
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 2
42571: NEG
42572: PUSH
42573: LD_INT 2
42575: NEG
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42602: LD_ADDR_VAR 0 20
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 0
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 2
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: LD_INT 2
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 2
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 2
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 2
42737: PUSH
42738: LD_INT 2
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 0
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 2
42778: NEG
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 2
42789: NEG
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: LD_INT 2
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42832: LD_ADDR_VAR 0 21
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 1
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: NEG
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: LD_INT 2
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: LD_INT 2
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 2
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 2
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 2
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 1
42997: NEG
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 2
43008: NEG
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 2
43019: NEG
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: LD_INT 2
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43062: LD_ADDR_VAR 0 22
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: LD_INT 2
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: LD_INT 2
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: LD_INT 2
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: LD_INT 2
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 2
43238: NEG
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 2
43249: NEG
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 2
43261: NEG
43262: PUSH
43263: LD_INT 2
43265: NEG
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43292: LD_ADDR_VAR 0 23
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: NEG
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 2
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 2
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: LD_INT 2
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: LD_INT 2
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 2
43468: NEG
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 2
43479: NEG
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 2
43491: NEG
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 2
43503: NEG
43504: PUSH
43505: LD_INT 3
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: LD_INT 3
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: LD_INT 2
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: LD_INT 1
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43572: LD_ADDR_VAR 0 24
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: LD_INT 2
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: LD_INT 2
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 1
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 2
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: LD_INT 2
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: LD_INT 2
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 1
43737: NEG
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 2
43748: NEG
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 2
43759: NEG
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 2
43771: NEG
43772: PUSH
43773: LD_INT 2
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: LD_INT 2
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 2
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 3
43805: PUSH
43806: LD_INT 1
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 3
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43848: LD_ADDR_VAR 0 25
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: LD_INT 2
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: LD_INT 2
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 2
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 2
43983: PUSH
43984: LD_INT 2
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 2
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 2
44024: NEG
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: NEG
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 3
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 3
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: LD_INT 3
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: LD_INT 3
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44122: LD_ADDR_VAR 0 26
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: NEG
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: LD_INT 2
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 2
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: LD_INT 2
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 2
44298: NEG
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: NEG
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 2
44321: NEG
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: LD_INT 3
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: LD_INT 3
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44398: LD_ADDR_VAR 0 27
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: LD_INT 2
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 2
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 2
44574: NEG
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 2
44597: NEG
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 2
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: NEG
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 3
44631: NEG
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 3
44643: NEG
44644: PUSH
44645: LD_INT 2
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44678: LD_ADDR_VAR 0 28
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 1
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 2
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 2
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: NEG
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 2
44889: NEG
44890: PUSH
44891: LD_INT 3
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: LD_INT 3
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 3
44913: NEG
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 3
44925: NEG
44926: PUSH
44927: LD_INT 2
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44960: LD_ADDR_VAR 0 29
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: NEG
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: LD_INT 2
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 2
45126: NEG
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 2
45138: NEG
45139: PUSH
45140: LD_INT 2
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 2
45150: NEG
45151: PUSH
45152: LD_INT 3
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 3
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 3
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 3
45204: NEG
45205: PUSH
45206: LD_INT 2
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45239: LD_ADDR_VAR 0 30
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: LD_INT 2
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 2
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: LD_INT 2
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 2
45416: NEG
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: LD_INT 3
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 1
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 3
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 3
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: NEG
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 3
45482: NEG
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45517: LD_ADDR_VAR 0 31
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 2
45682: NEG
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 2
45694: NEG
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: LD_INT 3
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 3
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 3
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 3
45760: NEG
45761: PUSH
45762: LD_INT 2
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45795: LD_ADDR_VAR 0 32
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: LD_INT 2
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 2
45961: NEG
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: LD_INT 3
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 3
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: LD_INT 3
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: NEG
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 3
46038: NEG
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46073: LD_ADDR_VAR 0 33
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 2
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: NEG
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: LD_INT 1
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: LD_INT 3
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 3
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 3
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 3
46317: NEG
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46352: LD_ADDR_VAR 0 34
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 2
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: LD_INT 2
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 2
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 2
46508: NEG
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 2
46531: NEG
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: LD_INT 3
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 3
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: LD_INT 3
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 3
46597: NEG
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46632: LD_ADDR_VAR 0 35
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 1
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: NEG
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46744: LD_ADDR_VAR 0 36
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 2
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46856: LD_ADDR_VAR 0 37
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46968: LD_ADDR_VAR 0 38
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 2
47059: NEG
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47080: LD_ADDR_VAR 0 39
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47192: LD_ADDR_VAR 0 40
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47304: LD_ADDR_VAR 0 41
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: LD_INT 2
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 2
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: LD_INT 2
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: LD_INT 3
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 3
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 3
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 3
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 3
47547: PUSH
47548: LD_INT 3
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: LD_INT 3
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 3
47578: NEG
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 3
47589: NEG
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 3
47601: NEG
47602: PUSH
47603: LD_INT 2
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 3
47613: NEG
47614: PUSH
47615: LD_INT 3
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47654: LD_ADDR_VAR 0 42
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 2
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: LD_INT 2
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: LD_INT 2
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 2
47820: NEG
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: LD_INT 3
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: LD_INT 3
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: LD_INT 3
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: LD_INT 2
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 3
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 3
47900: PUSH
47901: LD_INT 3
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: LD_INT 3
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: LD_INT 3
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: LD_INT 3
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: LD_INT 2
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 3
47951: NEG
47952: PUSH
47953: LD_INT 2
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: LD_INT 3
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48004: LD_ADDR_VAR 0 43
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: LD_INT 2
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 2
48170: NEG
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 3
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: LD_INT 3
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 3
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 3
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 3
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: LD_INT 3
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 2
48289: NEG
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 3
48300: NEG
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 3
48311: NEG
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48352: LD_ADDR_VAR 0 44
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 2
48507: NEG
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: LD_INT 2
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 2
48542: NEG
48543: PUSH
48544: LD_INT 3
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 3
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 3
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 3
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 3
48595: PUSH
48596: LD_INT 3
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: PUSH
48606: LD_INT 3
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 3
48626: NEG
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 3
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: NEG
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 3
48661: NEG
48662: PUSH
48663: LD_INT 3
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48702: LD_ADDR_VAR 0 45
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: LD_INT 2
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 2
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: LD_INT 2
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: LD_INT 3
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: LD_INT 3
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 3
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 3
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 3
48948: PUSH
48949: LD_INT 3
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 2
48958: PUSH
48959: LD_INT 3
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 3
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 3
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 3
48999: NEG
49000: PUSH
49001: LD_INT 2
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 3
49011: NEG
49012: PUSH
49013: LD_INT 3
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49052: LD_ADDR_VAR 0 46
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: LD_INT 1
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: LD_INT 2
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: NEG
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 3
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 3
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 3
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 3
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: LD_INT 3
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: LD_INT 3
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 2
49337: NEG
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 3
49348: NEG
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 3
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49400: LD_ADDR_VAR 0 47
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 2
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: LD_INT 2
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49551: LD_ADDR_VAR 0 48
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 2
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49698: LD_ADDR_VAR 0 49
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49842: LD_ADDR_VAR 0 50
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: LD_INT 2
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49986: LD_ADDR_VAR 0 51
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50133: LD_ADDR_VAR 0 52
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: LD_INT 2
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 2
50248: NEG
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 2
50260: NEG
50261: PUSH
50262: LD_INT 2
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50284: LD_ADDR_VAR 0 53
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 0
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: LD_INT 2
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 2
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: LD_INT 2
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50514: LD_ADDR_VAR 0 54
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 2
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 2
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 2
50701: NEG
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50744: LD_ADDR_VAR 0 55
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50974: LD_ADDR_VAR 0 56
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 2
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 2
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 2
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51204: LD_ADDR_VAR 0 57
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: LD_INT 2
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 2
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 2
51391: NEG
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: LD_INT 2
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51434: LD_ADDR_VAR 0 58
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: LD_INT 2
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 2
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 2
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 2
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: PUSH
51570: LD_INT 2
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: LD_INT 2
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51664: LD_ADDR_VAR 0 59
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51752: LD_ADDR_VAR 0 60
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51840: LD_ADDR_VAR 0 61
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51928: LD_ADDR_VAR 0 62
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52016: LD_ADDR_VAR 0 63
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: NEG
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52104: LD_ADDR_VAR 0 64
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 1
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: ST_TO_ADDR
// end ; 1 :
52192: GO 58089
52194: LD_INT 1
52196: DOUBLE
52197: EQUAL
52198: IFTRUE 52202
52200: GO 54825
52202: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52203: LD_ADDR_VAR 0 11
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: LD_INT 3
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 3
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: LIST
52246: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52247: LD_ADDR_VAR 0 12
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 3
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 3
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: LIST
52287: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52288: LD_ADDR_VAR 0 13
52292: PUSH
52293: LD_INT 3
52295: PUSH
52296: LD_INT 2
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 3
52305: PUSH
52306: LD_INT 3
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: LD_INT 3
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: LIST
52327: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52328: LD_ADDR_VAR 0 14
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 3
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 3
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: LIST
52368: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52369: LD_ADDR_VAR 0 15
52373: PUSH
52374: LD_INT 2
52376: NEG
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: NEG
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 3
52398: NEG
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: LIST
52412: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52413: LD_ADDR_VAR 0 16
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: LD_INT 3
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 3
52432: NEG
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 3
52444: NEG
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: LIST
52458: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52459: LD_ADDR_VAR 0 17
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: LD_INT 3
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 3
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 2
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: LIST
52502: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52503: LD_ADDR_VAR 0 18
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 3
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 3
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: LIST
52543: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52544: LD_ADDR_VAR 0 19
52548: PUSH
52549: LD_INT 3
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 3
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: LD_INT 3
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: LIST
52583: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52584: LD_ADDR_VAR 0 20
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 3
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: LD_INT 3
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: LIST
52624: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52625: LD_ADDR_VAR 0 21
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 3
52643: NEG
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: NEG
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: LIST
52668: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52669: LD_ADDR_VAR 0 22
52673: PUSH
52674: LD_INT 2
52676: NEG
52677: PUSH
52678: LD_INT 3
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 3
52688: NEG
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 3
52700: NEG
52701: PUSH
52702: LD_INT 3
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: LIST
52714: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52715: LD_ADDR_VAR 0 23
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: LD_INT 3
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: LD_INT 4
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: LD_INT 3
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: LIST
52758: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52759: LD_ADDR_VAR 0 24
52763: PUSH
52764: LD_INT 3
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 3
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 4
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: LIST
52799: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52800: LD_ADDR_VAR 0 25
52804: PUSH
52805: LD_INT 3
52807: PUSH
52808: LD_INT 3
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 4
52817: PUSH
52818: LD_INT 3
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 3
52827: PUSH
52828: LD_INT 4
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: LIST
52839: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52840: LD_ADDR_VAR 0 26
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 3
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: LD_INT 4
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: LD_INT 3
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: LIST
52880: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52881: LD_ADDR_VAR 0 27
52885: PUSH
52886: LD_INT 3
52888: NEG
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 3
52899: NEG
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 4
52910: NEG
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: LIST
52924: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52925: LD_ADDR_VAR 0 28
52929: PUSH
52930: LD_INT 3
52932: NEG
52933: PUSH
52934: LD_INT 3
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 3
52944: NEG
52945: PUSH
52946: LD_INT 4
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 4
52956: NEG
52957: PUSH
52958: LD_INT 3
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: LIST
52970: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52971: LD_ADDR_VAR 0 29
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: LD_INT 3
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: LD_INT 3
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: LD_INT 2
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: LD_INT 4
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 4
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: LD_INT 3
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: LD_INT 5
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 5
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 4
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: LD_INT 6
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 6
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 5
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53126: LD_ADDR_VAR 0 30
53130: PUSH
53131: LD_INT 2
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 3
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 3
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 3
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 4
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 4
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 4
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 5
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 5
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 5
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 6
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 6
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53269: LD_ADDR_VAR 0 31
53273: PUSH
53274: LD_INT 3
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 3
53286: PUSH
53287: LD_INT 3
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: LD_INT 3
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 4
53306: PUSH
53307: LD_INT 3
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 4
53316: PUSH
53317: LD_INT 4
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 3
53326: PUSH
53327: LD_INT 4
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 5
53336: PUSH
53337: LD_INT 4
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 5
53346: PUSH
53347: LD_INT 5
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 4
53356: PUSH
53357: LD_INT 5
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 6
53366: PUSH
53367: LD_INT 5
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 6
53376: PUSH
53377: LD_INT 6
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 5
53386: PUSH
53387: LD_INT 6
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53408: LD_ADDR_VAR 0 32
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 3
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 3
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: LD_INT 2
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: LD_INT 4
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: LD_INT 4
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: LD_INT 3
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: LD_INT 5
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 5
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: LD_INT 4
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 6
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 6
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 5
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53551: LD_ADDR_VAR 0 33
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 3
53569: NEG
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 3
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 3
53592: NEG
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 4
53603: NEG
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 4
53614: NEG
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 4
53626: NEG
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 5
53637: NEG
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 5
53648: NEG
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 5
53660: NEG
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 6
53671: NEG
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 6
53682: NEG
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53706: LD_ADDR_VAR 0 34
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: LD_INT 3
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 3
53725: NEG
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 3
53737: NEG
53738: PUSH
53739: LD_INT 3
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 3
53749: NEG
53750: PUSH
53751: LD_INT 4
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 4
53761: NEG
53762: PUSH
53763: LD_INT 3
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 4
53773: NEG
53774: PUSH
53775: LD_INT 4
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 4
53785: NEG
53786: PUSH
53787: LD_INT 5
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 5
53797: NEG
53798: PUSH
53799: LD_INT 4
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 5
53809: NEG
53810: PUSH
53811: LD_INT 5
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 5
53821: NEG
53822: PUSH
53823: LD_INT 6
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 6
53833: NEG
53834: PUSH
53835: LD_INT 5
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 6
53845: NEG
53846: PUSH
53847: LD_INT 6
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53869: LD_ADDR_VAR 0 41
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 3
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: LIST
53912: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53913: LD_ADDR_VAR 0 42
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 3
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: LIST
53953: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53954: LD_ADDR_VAR 0 43
53958: PUSH
53959: LD_INT 2
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 3
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: LD_INT 3
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: LIST
53993: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53994: LD_ADDR_VAR 0 44
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: LD_INT 3
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: LIST
54034: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54035: LD_ADDR_VAR 0 45
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 3
54064: NEG
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: LIST
54078: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54079: LD_ADDR_VAR 0 46
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: LD_INT 2
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 2
54098: NEG
54099: PUSH
54100: LD_INT 3
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 3
54110: NEG
54111: PUSH
54112: LD_INT 2
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: LIST
54124: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54125: LD_ADDR_VAR 0 47
54129: PUSH
54130: LD_INT 2
54132: NEG
54133: PUSH
54134: LD_INT 3
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: LD_INT 3
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54158: LD_ADDR_VAR 0 48
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: LD_INT 2
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54189: LD_ADDR_VAR 0 49
54193: PUSH
54194: LD_INT 3
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 3
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54218: LD_ADDR_VAR 0 50
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: LD_INT 3
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: LD_INT 3
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54247: LD_ADDR_VAR 0 51
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 2
54265: NEG
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54278: LD_ADDR_VAR 0 52
54282: PUSH
54283: LD_INT 3
54285: NEG
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 3
54297: NEG
54298: PUSH
54299: LD_INT 2
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54311: LD_ADDR_VAR 0 53
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 3
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 3
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 2
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: LIST
54354: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54355: LD_ADDR_VAR 0 54
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 3
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 3
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: LIST
54395: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54396: LD_ADDR_VAR 0 55
54400: PUSH
54401: LD_INT 3
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 3
54413: PUSH
54414: LD_INT 3
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: LD_INT 3
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: LIST
54435: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54436: LD_ADDR_VAR 0 56
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 3
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: LIST
54476: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54477: LD_ADDR_VAR 0 57
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 3
54495: NEG
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 3
54506: NEG
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: LIST
54520: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54521: LD_ADDR_VAR 0 58
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: LD_INT 3
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 3
54540: NEG
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 3
54552: NEG
54553: PUSH
54554: LD_INT 3
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: LIST
54566: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54567: LD_ADDR_VAR 0 59
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 2
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: LIST
54610: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54611: LD_ADDR_VAR 0 60
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: LIST
54651: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54652: LD_ADDR_VAR 0 61
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: LD_INT 2
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: LIST
54691: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54692: LD_ADDR_VAR 0 62
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: LIST
54732: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54733: LD_ADDR_VAR 0 63
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: LIST
54776: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54777: LD_ADDR_VAR 0 64
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: LIST
54822: ST_TO_ADDR
// end ; 2 :
54823: GO 58089
54825: LD_INT 2
54827: DOUBLE
54828: EQUAL
54829: IFTRUE 54833
54831: GO 58088
54833: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54834: LD_ADDR_VAR 0 29
54838: PUSH
54839: LD_INT 4
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 4
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 5
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 5
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 4
54882: PUSH
54883: LD_INT 1
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 3
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 3
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 3
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 5
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 3
54934: PUSH
54935: LD_INT 3
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 3
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 4
54954: PUSH
54955: LD_INT 3
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 4
54964: PUSH
54965: LD_INT 4
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 3
54974: PUSH
54975: LD_INT 4
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 2
54984: PUSH
54985: LD_INT 3
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 4
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: LD_INT 4
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: LD_INT 4
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 3
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: LD_INT 4
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 5
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: LD_INT 5
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: LD_INT 4
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: LD_INT 3
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: LD_INT 5
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 2
55106: NEG
55107: PUSH
55108: LD_INT 3
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 3
55128: NEG
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 2
55151: NEG
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 3
55162: NEG
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 4
55173: NEG
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 4
55184: NEG
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 4
55196: NEG
55197: PUSH
55198: LD_INT 2
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 4
55219: NEG
55220: PUSH
55221: LD_INT 4
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 4
55231: NEG
55232: PUSH
55233: LD_INT 5
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 3
55243: NEG
55244: PUSH
55245: LD_INT 4
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 3
55255: NEG
55256: PUSH
55257: LD_INT 3
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 4
55267: NEG
55268: PUSH
55269: LD_INT 3
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 5
55279: NEG
55280: PUSH
55281: LD_INT 4
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 5
55291: NEG
55292: PUSH
55293: LD_INT 5
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 3
55303: NEG
55304: PUSH
55305: LD_INT 5
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 5
55315: NEG
55316: PUSH
55317: LD_INT 3
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55372: LD_ADDR_VAR 0 30
55376: PUSH
55377: LD_INT 4
55379: PUSH
55380: LD_INT 4
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 4
55389: PUSH
55390: LD_INT 3
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 5
55399: PUSH
55400: LD_INT 4
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 5
55409: PUSH
55410: LD_INT 5
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 4
55419: PUSH
55420: LD_INT 5
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 3
55429: PUSH
55430: LD_INT 4
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 3
55439: PUSH
55440: LD_INT 3
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 5
55449: PUSH
55450: LD_INT 3
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 3
55459: PUSH
55460: LD_INT 5
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: LD_INT 3
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: LD_INT 2
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: LD_INT 3
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: LD_INT 4
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 4
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: LD_INT 3
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: LD_INT 4
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 4
55562: NEG
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 4
55573: NEG
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 3
55585: NEG
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 3
55596: NEG
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 4
55607: NEG
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 5
55618: NEG
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 5
55629: NEG
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 5
55641: NEG
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 3
55653: NEG
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 3
55664: NEG
55665: PUSH
55666: LD_INT 3
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 3
55676: NEG
55677: PUSH
55678: LD_INT 4
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: LD_INT 3
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 3
55712: NEG
55713: PUSH
55714: LD_INT 2
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 4
55724: NEG
55725: PUSH
55726: LD_INT 3
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 4
55736: NEG
55737: PUSH
55738: LD_INT 4
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: LD_INT 4
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 4
55760: NEG
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 4
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 5
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: LD_INT 4
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 3
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: LD_INT 3
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: LD_INT 4
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: LD_INT 5
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: LD_INT 3
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 2
55862: NEG
55863: PUSH
55864: LD_INT 5
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55919: LD_ADDR_VAR 0 31
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: LD_INT 4
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: LD_INT 3
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: LD_INT 4
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: LD_INT 5
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 5
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: LD_INT 4
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: LD_INT 3
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 2
55998: PUSH
55999: LD_INT 5
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 2
56008: NEG
56009: PUSH
56010: LD_INT 3
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 3
56019: NEG
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 3
56030: NEG
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 3
56064: NEG
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 4
56075: NEG
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 4
56086: NEG
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 4
56098: NEG
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 4
56121: NEG
56122: PUSH
56123: LD_INT 4
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 4
56133: NEG
56134: PUSH
56135: LD_INT 5
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 3
56145: NEG
56146: PUSH
56147: LD_INT 4
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 3
56157: NEG
56158: PUSH
56159: LD_INT 3
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 4
56169: NEG
56170: PUSH
56171: LD_INT 3
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 5
56181: NEG
56182: PUSH
56183: LD_INT 4
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 5
56193: NEG
56194: PUSH
56195: LD_INT 5
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 3
56205: NEG
56206: PUSH
56207: LD_INT 5
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 5
56217: NEG
56218: PUSH
56219: LD_INT 3
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 3
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: LD_INT 4
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: LD_INT 3
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: LD_INT 2
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: LD_INT 3
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: LD_INT 4
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: LD_INT 2
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 2
56319: NEG
56320: PUSH
56321: LD_INT 4
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 4
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 4
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 5
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 5
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 4
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 3
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 3
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 3
56403: PUSH
56404: LD_INT 2
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 5
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56469: LD_ADDR_VAR 0 32
56473: PUSH
56474: LD_INT 4
56476: NEG
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 4
56487: NEG
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 3
56499: NEG
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 3
56510: NEG
56511: PUSH
56512: LD_INT 1
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 4
56521: NEG
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 5
56532: NEG
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 5
56543: NEG
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 5
56555: NEG
56556: PUSH
56557: LD_INT 2
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 3
56567: NEG
56568: PUSH
56569: LD_INT 2
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 3
56578: NEG
56579: PUSH
56580: LD_INT 3
56582: NEG
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 3
56590: NEG
56591: PUSH
56592: LD_INT 4
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: LD_INT 3
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: LD_INT 2
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 3
56626: NEG
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 4
56638: NEG
56639: PUSH
56640: LD_INT 3
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 4
56650: NEG
56651: PUSH
56652: LD_INT 4
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: LD_INT 4
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 4
56674: NEG
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: LD_INT 4
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: LD_INT 5
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: LD_INT 4
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: LD_INT 3
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: LD_INT 3
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: LD_INT 4
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: LD_INT 5
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: LD_INT 3
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 2
56776: NEG
56777: PUSH
56778: LD_INT 5
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 3
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 3
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 4
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 4
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 3
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 4
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 4
56881: PUSH
56882: LD_INT 4
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 4
56891: PUSH
56892: LD_INT 3
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 5
56901: PUSH
56902: LD_INT 4
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 5
56911: PUSH
56912: LD_INT 5
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 4
56921: PUSH
56922: LD_INT 5
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 3
56931: PUSH
56932: LD_INT 4
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 3
56941: PUSH
56942: LD_INT 3
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 5
56951: PUSH
56952: LD_INT 3
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 3
56961: PUSH
56962: LD_INT 5
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57016: LD_ADDR_VAR 0 33
57020: PUSH
57021: LD_INT 4
57023: NEG
57024: PUSH
57025: LD_INT 4
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 4
57035: NEG
57036: PUSH
57037: LD_INT 5
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 3
57047: NEG
57048: PUSH
57049: LD_INT 4
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 3
57059: NEG
57060: PUSH
57061: LD_INT 3
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 4
57071: NEG
57072: PUSH
57073: LD_INT 3
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 5
57083: NEG
57084: PUSH
57085: LD_INT 4
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 5
57095: NEG
57096: PUSH
57097: LD_INT 5
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 3
57107: NEG
57108: PUSH
57109: LD_INT 5
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 5
57119: NEG
57120: PUSH
57121: LD_INT 3
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: LD_INT 3
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: LD_INT 4
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: LD_INT 3
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: LD_INT 2
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: LD_INT 3
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: LD_INT 4
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: LD_INT 2
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 2
57221: NEG
57222: PUSH
57223: LD_INT 4
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 4
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 5
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 5
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 4
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 3
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 3
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 3
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 5
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 3
57326: PUSH
57327: LD_INT 3
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 3
57336: PUSH
57337: LD_INT 2
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 4
57346: PUSH
57347: LD_INT 3
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 4
57356: PUSH
57357: LD_INT 4
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 3
57366: PUSH
57367: LD_INT 4
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: PUSH
57377: LD_INT 3
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 4
57396: PUSH
57397: LD_INT 2
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: LD_INT 4
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: LD_INT 4
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: LD_INT 3
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: LD_INT 4
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: LD_INT 5
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: LD_INT 5
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: LD_INT 4
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: LD_INT 3
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 2
57488: PUSH
57489: LD_INT 5
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57554: LD_ADDR_VAR 0 34
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: LD_INT 4
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: LD_INT 5
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: LD_INT 4
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: LD_INT 3
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: LD_INT 3
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: LD_INT 4
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: LD_INT 5
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: LD_INT 3
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: LD_INT 5
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 3
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 3
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 4
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 4
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 3
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 2
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: LD_INT 2
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 4
57746: PUSH
57747: LD_INT 2
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 4
57756: PUSH
57757: LD_INT 4
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 4
57766: PUSH
57767: LD_INT 3
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 5
57776: PUSH
57777: LD_INT 4
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 5
57786: PUSH
57787: LD_INT 5
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 4
57796: PUSH
57797: LD_INT 5
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 3
57806: PUSH
57807: LD_INT 4
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 3
57816: PUSH
57817: LD_INT 3
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 5
57826: PUSH
57827: LD_INT 3
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 3
57836: PUSH
57837: LD_INT 5
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 0
57846: PUSH
57847: LD_INT 3
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 2
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 3
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: LD_INT 4
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 4
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: LD_INT 3
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 2
57918: PUSH
57919: LD_INT 4
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 2
57928: NEG
57929: PUSH
57930: LD_INT 2
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 4
57939: NEG
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 4
57950: NEG
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 3
57962: NEG
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 3
57973: NEG
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 4
57984: NEG
57985: PUSH
57986: LD_INT 1
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 5
57995: NEG
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 5
58006: NEG
58007: PUSH
58008: LD_INT 1
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 5
58018: NEG
58019: PUSH
58020: LD_INT 2
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 3
58030: NEG
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: ST_TO_ADDR
// end ; end ;
58086: GO 58089
58088: POP
// case btype of b_depot , b_warehouse :
58089: LD_VAR 0 1
58093: PUSH
58094: LD_INT 0
58096: DOUBLE
58097: EQUAL
58098: IFTRUE 58108
58100: LD_INT 1
58102: DOUBLE
58103: EQUAL
58104: IFTRUE 58108
58106: GO 58309
58108: POP
// case nation of nation_american :
58109: LD_VAR 0 5
58113: PUSH
58114: LD_INT 1
58116: DOUBLE
58117: EQUAL
58118: IFTRUE 58122
58120: GO 58178
58122: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58123: LD_ADDR_VAR 0 9
58127: PUSH
58128: LD_VAR 0 11
58132: PUSH
58133: LD_VAR 0 12
58137: PUSH
58138: LD_VAR 0 13
58142: PUSH
58143: LD_VAR 0 14
58147: PUSH
58148: LD_VAR 0 15
58152: PUSH
58153: LD_VAR 0 16
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: PUSH
58166: LD_VAR 0 4
58170: PUSH
58171: LD_INT 1
58173: PLUS
58174: ARRAY
58175: ST_TO_ADDR
58176: GO 58307
58178: LD_INT 2
58180: DOUBLE
58181: EQUAL
58182: IFTRUE 58186
58184: GO 58242
58186: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58187: LD_ADDR_VAR 0 9
58191: PUSH
58192: LD_VAR 0 17
58196: PUSH
58197: LD_VAR 0 18
58201: PUSH
58202: LD_VAR 0 19
58206: PUSH
58207: LD_VAR 0 20
58211: PUSH
58212: LD_VAR 0 21
58216: PUSH
58217: LD_VAR 0 22
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: PUSH
58230: LD_VAR 0 4
58234: PUSH
58235: LD_INT 1
58237: PLUS
58238: ARRAY
58239: ST_TO_ADDR
58240: GO 58307
58242: LD_INT 3
58244: DOUBLE
58245: EQUAL
58246: IFTRUE 58250
58248: GO 58306
58250: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58251: LD_ADDR_VAR 0 9
58255: PUSH
58256: LD_VAR 0 23
58260: PUSH
58261: LD_VAR 0 24
58265: PUSH
58266: LD_VAR 0 25
58270: PUSH
58271: LD_VAR 0 26
58275: PUSH
58276: LD_VAR 0 27
58280: PUSH
58281: LD_VAR 0 28
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: PUSH
58294: LD_VAR 0 4
58298: PUSH
58299: LD_INT 1
58301: PLUS
58302: ARRAY
58303: ST_TO_ADDR
58304: GO 58307
58306: POP
58307: GO 58862
58309: LD_INT 2
58311: DOUBLE
58312: EQUAL
58313: IFTRUE 58323
58315: LD_INT 3
58317: DOUBLE
58318: EQUAL
58319: IFTRUE 58323
58321: GO 58379
58323: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58324: LD_ADDR_VAR 0 9
58328: PUSH
58329: LD_VAR 0 29
58333: PUSH
58334: LD_VAR 0 30
58338: PUSH
58339: LD_VAR 0 31
58343: PUSH
58344: LD_VAR 0 32
58348: PUSH
58349: LD_VAR 0 33
58353: PUSH
58354: LD_VAR 0 34
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: PUSH
58367: LD_VAR 0 4
58371: PUSH
58372: LD_INT 1
58374: PLUS
58375: ARRAY
58376: ST_TO_ADDR
58377: GO 58862
58379: LD_INT 16
58381: DOUBLE
58382: EQUAL
58383: IFTRUE 58441
58385: LD_INT 17
58387: DOUBLE
58388: EQUAL
58389: IFTRUE 58441
58391: LD_INT 18
58393: DOUBLE
58394: EQUAL
58395: IFTRUE 58441
58397: LD_INT 19
58399: DOUBLE
58400: EQUAL
58401: IFTRUE 58441
58403: LD_INT 22
58405: DOUBLE
58406: EQUAL
58407: IFTRUE 58441
58409: LD_INT 20
58411: DOUBLE
58412: EQUAL
58413: IFTRUE 58441
58415: LD_INT 21
58417: DOUBLE
58418: EQUAL
58419: IFTRUE 58441
58421: LD_INT 23
58423: DOUBLE
58424: EQUAL
58425: IFTRUE 58441
58427: LD_INT 24
58429: DOUBLE
58430: EQUAL
58431: IFTRUE 58441
58433: LD_INT 25
58435: DOUBLE
58436: EQUAL
58437: IFTRUE 58441
58439: GO 58497
58441: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58442: LD_ADDR_VAR 0 9
58446: PUSH
58447: LD_VAR 0 35
58451: PUSH
58452: LD_VAR 0 36
58456: PUSH
58457: LD_VAR 0 37
58461: PUSH
58462: LD_VAR 0 38
58466: PUSH
58467: LD_VAR 0 39
58471: PUSH
58472: LD_VAR 0 40
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: PUSH
58485: LD_VAR 0 4
58489: PUSH
58490: LD_INT 1
58492: PLUS
58493: ARRAY
58494: ST_TO_ADDR
58495: GO 58862
58497: LD_INT 6
58499: DOUBLE
58500: EQUAL
58501: IFTRUE 58553
58503: LD_INT 7
58505: DOUBLE
58506: EQUAL
58507: IFTRUE 58553
58509: LD_INT 8
58511: DOUBLE
58512: EQUAL
58513: IFTRUE 58553
58515: LD_INT 13
58517: DOUBLE
58518: EQUAL
58519: IFTRUE 58553
58521: LD_INT 12
58523: DOUBLE
58524: EQUAL
58525: IFTRUE 58553
58527: LD_INT 15
58529: DOUBLE
58530: EQUAL
58531: IFTRUE 58553
58533: LD_INT 11
58535: DOUBLE
58536: EQUAL
58537: IFTRUE 58553
58539: LD_INT 14
58541: DOUBLE
58542: EQUAL
58543: IFTRUE 58553
58545: LD_INT 10
58547: DOUBLE
58548: EQUAL
58549: IFTRUE 58553
58551: GO 58609
58553: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58554: LD_ADDR_VAR 0 9
58558: PUSH
58559: LD_VAR 0 41
58563: PUSH
58564: LD_VAR 0 42
58568: PUSH
58569: LD_VAR 0 43
58573: PUSH
58574: LD_VAR 0 44
58578: PUSH
58579: LD_VAR 0 45
58583: PUSH
58584: LD_VAR 0 46
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: PUSH
58597: LD_VAR 0 4
58601: PUSH
58602: LD_INT 1
58604: PLUS
58605: ARRAY
58606: ST_TO_ADDR
58607: GO 58862
58609: LD_INT 36
58611: DOUBLE
58612: EQUAL
58613: IFTRUE 58617
58615: GO 58673
58617: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58618: LD_ADDR_VAR 0 9
58622: PUSH
58623: LD_VAR 0 47
58627: PUSH
58628: LD_VAR 0 48
58632: PUSH
58633: LD_VAR 0 49
58637: PUSH
58638: LD_VAR 0 50
58642: PUSH
58643: LD_VAR 0 51
58647: PUSH
58648: LD_VAR 0 52
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: PUSH
58661: LD_VAR 0 4
58665: PUSH
58666: LD_INT 1
58668: PLUS
58669: ARRAY
58670: ST_TO_ADDR
58671: GO 58862
58673: LD_INT 4
58675: DOUBLE
58676: EQUAL
58677: IFTRUE 58699
58679: LD_INT 5
58681: DOUBLE
58682: EQUAL
58683: IFTRUE 58699
58685: LD_INT 34
58687: DOUBLE
58688: EQUAL
58689: IFTRUE 58699
58691: LD_INT 37
58693: DOUBLE
58694: EQUAL
58695: IFTRUE 58699
58697: GO 58755
58699: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58700: LD_ADDR_VAR 0 9
58704: PUSH
58705: LD_VAR 0 53
58709: PUSH
58710: LD_VAR 0 54
58714: PUSH
58715: LD_VAR 0 55
58719: PUSH
58720: LD_VAR 0 56
58724: PUSH
58725: LD_VAR 0 57
58729: PUSH
58730: LD_VAR 0 58
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: PUSH
58743: LD_VAR 0 4
58747: PUSH
58748: LD_INT 1
58750: PLUS
58751: ARRAY
58752: ST_TO_ADDR
58753: GO 58862
58755: LD_INT 31
58757: DOUBLE
58758: EQUAL
58759: IFTRUE 58805
58761: LD_INT 32
58763: DOUBLE
58764: EQUAL
58765: IFTRUE 58805
58767: LD_INT 33
58769: DOUBLE
58770: EQUAL
58771: IFTRUE 58805
58773: LD_INT 27
58775: DOUBLE
58776: EQUAL
58777: IFTRUE 58805
58779: LD_INT 26
58781: DOUBLE
58782: EQUAL
58783: IFTRUE 58805
58785: LD_INT 28
58787: DOUBLE
58788: EQUAL
58789: IFTRUE 58805
58791: LD_INT 29
58793: DOUBLE
58794: EQUAL
58795: IFTRUE 58805
58797: LD_INT 30
58799: DOUBLE
58800: EQUAL
58801: IFTRUE 58805
58803: GO 58861
58805: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58806: LD_ADDR_VAR 0 9
58810: PUSH
58811: LD_VAR 0 59
58815: PUSH
58816: LD_VAR 0 60
58820: PUSH
58821: LD_VAR 0 61
58825: PUSH
58826: LD_VAR 0 62
58830: PUSH
58831: LD_VAR 0 63
58835: PUSH
58836: LD_VAR 0 64
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: PUSH
58849: LD_VAR 0 4
58853: PUSH
58854: LD_INT 1
58856: PLUS
58857: ARRAY
58858: ST_TO_ADDR
58859: GO 58862
58861: POP
// temp_list2 = [ ] ;
58862: LD_ADDR_VAR 0 10
58866: PUSH
58867: EMPTY
58868: ST_TO_ADDR
// for i in temp_list do
58869: LD_ADDR_VAR 0 8
58873: PUSH
58874: LD_VAR 0 9
58878: PUSH
58879: FOR_IN
58880: IFFALSE 58932
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58882: LD_ADDR_VAR 0 10
58886: PUSH
58887: LD_VAR 0 10
58891: PUSH
58892: LD_VAR 0 8
58896: PUSH
58897: LD_INT 1
58899: ARRAY
58900: PUSH
58901: LD_VAR 0 2
58905: PLUS
58906: PUSH
58907: LD_VAR 0 8
58911: PUSH
58912: LD_INT 2
58914: ARRAY
58915: PUSH
58916: LD_VAR 0 3
58920: PLUS
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: EMPTY
58927: LIST
58928: ADD
58929: ST_TO_ADDR
58930: GO 58879
58932: POP
58933: POP
// result = temp_list2 ;
58934: LD_ADDR_VAR 0 7
58938: PUSH
58939: LD_VAR 0 10
58943: ST_TO_ADDR
// end ;
58944: LD_VAR 0 7
58948: RET
// export function EnemyInRange ( unit , dist ) ; begin
58949: LD_INT 0
58951: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58952: LD_ADDR_VAR 0 3
58956: PUSH
58957: LD_VAR 0 1
58961: PPUSH
58962: CALL_OW 255
58966: PPUSH
58967: LD_VAR 0 1
58971: PPUSH
58972: CALL_OW 250
58976: PPUSH
58977: LD_VAR 0 1
58981: PPUSH
58982: CALL_OW 251
58986: PPUSH
58987: LD_VAR 0 2
58991: PPUSH
58992: CALL 32733 0 4
58996: PUSH
58997: LD_INT 4
58999: ARRAY
59000: ST_TO_ADDR
// end ;
59001: LD_VAR 0 3
59005: RET
// export function PlayerSeeMe ( unit ) ; begin
59006: LD_INT 0
59008: PPUSH
// result := See ( your_side , unit ) ;
59009: LD_ADDR_VAR 0 2
59013: PUSH
59014: LD_OWVAR 2
59018: PPUSH
59019: LD_VAR 0 1
59023: PPUSH
59024: CALL_OW 292
59028: ST_TO_ADDR
// end ;
59029: LD_VAR 0 2
59033: RET
// export function ReverseDir ( unit ) ; begin
59034: LD_INT 0
59036: PPUSH
// if not unit then
59037: LD_VAR 0 1
59041: NOT
59042: IFFALSE 59046
// exit ;
59044: GO 59069
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59046: LD_ADDR_VAR 0 2
59050: PUSH
59051: LD_VAR 0 1
59055: PPUSH
59056: CALL_OW 254
59060: PUSH
59061: LD_INT 3
59063: PLUS
59064: PUSH
59065: LD_INT 6
59067: MOD
59068: ST_TO_ADDR
// end ;
59069: LD_VAR 0 2
59073: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59074: LD_INT 0
59076: PPUSH
59077: PPUSH
59078: PPUSH
59079: PPUSH
59080: PPUSH
// if not hexes then
59081: LD_VAR 0 2
59085: NOT
59086: IFFALSE 59090
// exit ;
59088: GO 59238
// dist := 9999 ;
59090: LD_ADDR_VAR 0 5
59094: PUSH
59095: LD_INT 9999
59097: ST_TO_ADDR
// for i = 1 to hexes do
59098: LD_ADDR_VAR 0 4
59102: PUSH
59103: DOUBLE
59104: LD_INT 1
59106: DEC
59107: ST_TO_ADDR
59108: LD_VAR 0 2
59112: PUSH
59113: FOR_TO
59114: IFFALSE 59226
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59116: LD_VAR 0 1
59120: PPUSH
59121: LD_VAR 0 2
59125: PUSH
59126: LD_VAR 0 4
59130: ARRAY
59131: PUSH
59132: LD_INT 1
59134: ARRAY
59135: PPUSH
59136: LD_VAR 0 2
59140: PUSH
59141: LD_VAR 0 4
59145: ARRAY
59146: PUSH
59147: LD_INT 2
59149: ARRAY
59150: PPUSH
59151: CALL_OW 297
59155: PUSH
59156: LD_VAR 0 5
59160: LESS
59161: IFFALSE 59224
// begin hex := hexes [ i ] ;
59163: LD_ADDR_VAR 0 7
59167: PUSH
59168: LD_VAR 0 2
59172: PUSH
59173: LD_VAR 0 4
59177: ARRAY
59178: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59179: LD_ADDR_VAR 0 5
59183: PUSH
59184: LD_VAR 0 1
59188: PPUSH
59189: LD_VAR 0 2
59193: PUSH
59194: LD_VAR 0 4
59198: ARRAY
59199: PUSH
59200: LD_INT 1
59202: ARRAY
59203: PPUSH
59204: LD_VAR 0 2
59208: PUSH
59209: LD_VAR 0 4
59213: ARRAY
59214: PUSH
59215: LD_INT 2
59217: ARRAY
59218: PPUSH
59219: CALL_OW 297
59223: ST_TO_ADDR
// end ; end ;
59224: GO 59113
59226: POP
59227: POP
// result := hex ;
59228: LD_ADDR_VAR 0 3
59232: PUSH
59233: LD_VAR 0 7
59237: ST_TO_ADDR
// end ;
59238: LD_VAR 0 3
59242: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59243: LD_INT 0
59245: PPUSH
59246: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59247: LD_VAR 0 1
59251: NOT
59252: PUSH
59253: LD_VAR 0 1
59257: PUSH
59258: LD_INT 21
59260: PUSH
59261: LD_INT 2
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 23
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PPUSH
59282: CALL_OW 69
59286: IN
59287: NOT
59288: OR
59289: IFFALSE 59293
// exit ;
59291: GO 59340
// for i = 1 to 3 do
59293: LD_ADDR_VAR 0 3
59297: PUSH
59298: DOUBLE
59299: LD_INT 1
59301: DEC
59302: ST_TO_ADDR
59303: LD_INT 3
59305: PUSH
59306: FOR_TO
59307: IFFALSE 59338
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59309: LD_VAR 0 1
59313: PPUSH
59314: CALL_OW 250
59318: PPUSH
59319: LD_VAR 0 1
59323: PPUSH
59324: CALL_OW 251
59328: PPUSH
59329: LD_INT 1
59331: PPUSH
59332: CALL_OW 453
59336: GO 59306
59338: POP
59339: POP
// end ;
59340: LD_VAR 0 2
59344: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59345: LD_INT 0
59347: PPUSH
59348: PPUSH
59349: PPUSH
59350: PPUSH
59351: PPUSH
59352: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59353: LD_VAR 0 1
59357: NOT
59358: PUSH
59359: LD_VAR 0 2
59363: NOT
59364: OR
59365: PUSH
59366: LD_VAR 0 1
59370: PPUSH
59371: CALL_OW 314
59375: OR
59376: IFFALSE 59380
// exit ;
59378: GO 59821
// x := GetX ( enemy_unit ) ;
59380: LD_ADDR_VAR 0 7
59384: PUSH
59385: LD_VAR 0 2
59389: PPUSH
59390: CALL_OW 250
59394: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59395: LD_ADDR_VAR 0 8
59399: PUSH
59400: LD_VAR 0 2
59404: PPUSH
59405: CALL_OW 251
59409: ST_TO_ADDR
// if not x or not y then
59410: LD_VAR 0 7
59414: NOT
59415: PUSH
59416: LD_VAR 0 8
59420: NOT
59421: OR
59422: IFFALSE 59426
// exit ;
59424: GO 59821
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59426: LD_ADDR_VAR 0 6
59430: PUSH
59431: LD_VAR 0 7
59435: PPUSH
59436: LD_INT 0
59438: PPUSH
59439: LD_INT 4
59441: PPUSH
59442: CALL_OW 272
59446: PUSH
59447: LD_VAR 0 8
59451: PPUSH
59452: LD_INT 0
59454: PPUSH
59455: LD_INT 4
59457: PPUSH
59458: CALL_OW 273
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_VAR 0 7
59471: PPUSH
59472: LD_INT 1
59474: PPUSH
59475: LD_INT 4
59477: PPUSH
59478: CALL_OW 272
59482: PUSH
59483: LD_VAR 0 8
59487: PPUSH
59488: LD_INT 1
59490: PPUSH
59491: LD_INT 4
59493: PPUSH
59494: CALL_OW 273
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_VAR 0 7
59507: PPUSH
59508: LD_INT 2
59510: PPUSH
59511: LD_INT 4
59513: PPUSH
59514: CALL_OW 272
59518: PUSH
59519: LD_VAR 0 8
59523: PPUSH
59524: LD_INT 2
59526: PPUSH
59527: LD_INT 4
59529: PPUSH
59530: CALL_OW 273
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_VAR 0 7
59543: PPUSH
59544: LD_INT 3
59546: PPUSH
59547: LD_INT 4
59549: PPUSH
59550: CALL_OW 272
59554: PUSH
59555: LD_VAR 0 8
59559: PPUSH
59560: LD_INT 3
59562: PPUSH
59563: LD_INT 4
59565: PPUSH
59566: CALL_OW 273
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_VAR 0 7
59579: PPUSH
59580: LD_INT 4
59582: PPUSH
59583: LD_INT 4
59585: PPUSH
59586: CALL_OW 272
59590: PUSH
59591: LD_VAR 0 8
59595: PPUSH
59596: LD_INT 4
59598: PPUSH
59599: LD_INT 4
59601: PPUSH
59602: CALL_OW 273
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_VAR 0 7
59615: PPUSH
59616: LD_INT 5
59618: PPUSH
59619: LD_INT 4
59621: PPUSH
59622: CALL_OW 272
59626: PUSH
59627: LD_VAR 0 8
59631: PPUSH
59632: LD_INT 5
59634: PPUSH
59635: LD_INT 4
59637: PPUSH
59638: CALL_OW 273
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: ST_TO_ADDR
// for i = tmp downto 1 do
59655: LD_ADDR_VAR 0 4
59659: PUSH
59660: DOUBLE
59661: LD_VAR 0 6
59665: INC
59666: ST_TO_ADDR
59667: LD_INT 1
59669: PUSH
59670: FOR_DOWNTO
59671: IFFALSE 59772
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59673: LD_VAR 0 6
59677: PUSH
59678: LD_VAR 0 4
59682: ARRAY
59683: PUSH
59684: LD_INT 1
59686: ARRAY
59687: PPUSH
59688: LD_VAR 0 6
59692: PUSH
59693: LD_VAR 0 4
59697: ARRAY
59698: PUSH
59699: LD_INT 2
59701: ARRAY
59702: PPUSH
59703: CALL_OW 488
59707: NOT
59708: PUSH
59709: LD_VAR 0 6
59713: PUSH
59714: LD_VAR 0 4
59718: ARRAY
59719: PUSH
59720: LD_INT 1
59722: ARRAY
59723: PPUSH
59724: LD_VAR 0 6
59728: PUSH
59729: LD_VAR 0 4
59733: ARRAY
59734: PUSH
59735: LD_INT 2
59737: ARRAY
59738: PPUSH
59739: CALL_OW 428
59743: PUSH
59744: LD_INT 0
59746: NONEQUAL
59747: OR
59748: IFFALSE 59770
// tmp := Delete ( tmp , i ) ;
59750: LD_ADDR_VAR 0 6
59754: PUSH
59755: LD_VAR 0 6
59759: PPUSH
59760: LD_VAR 0 4
59764: PPUSH
59765: CALL_OW 3
59769: ST_TO_ADDR
59770: GO 59670
59772: POP
59773: POP
// j := GetClosestHex ( unit , tmp ) ;
59774: LD_ADDR_VAR 0 5
59778: PUSH
59779: LD_VAR 0 1
59783: PPUSH
59784: LD_VAR 0 6
59788: PPUSH
59789: CALL 59074 0 2
59793: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59794: LD_VAR 0 1
59798: PPUSH
59799: LD_VAR 0 5
59803: PUSH
59804: LD_INT 1
59806: ARRAY
59807: PPUSH
59808: LD_VAR 0 5
59812: PUSH
59813: LD_INT 2
59815: ARRAY
59816: PPUSH
59817: CALL_OW 111
// end ;
59821: LD_VAR 0 3
59825: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59826: LD_INT 0
59828: PPUSH
59829: PPUSH
59830: PPUSH
// uc_side = 0 ;
59831: LD_ADDR_OWVAR 20
59835: PUSH
59836: LD_INT 0
59838: ST_TO_ADDR
// uc_nation = 0 ;
59839: LD_ADDR_OWVAR 21
59843: PUSH
59844: LD_INT 0
59846: ST_TO_ADDR
// InitHc_All ( ) ;
59847: CALL_OW 584
// InitVc ;
59851: CALL_OW 20
// if mastodonts then
59855: LD_VAR 0 6
59859: IFFALSE 59926
// for i = 1 to mastodonts do
59861: LD_ADDR_VAR 0 11
59865: PUSH
59866: DOUBLE
59867: LD_INT 1
59869: DEC
59870: ST_TO_ADDR
59871: LD_VAR 0 6
59875: PUSH
59876: FOR_TO
59877: IFFALSE 59924
// begin vc_chassis := 31 ;
59879: LD_ADDR_OWVAR 37
59883: PUSH
59884: LD_INT 31
59886: ST_TO_ADDR
// vc_control := control_rider ;
59887: LD_ADDR_OWVAR 38
59891: PUSH
59892: LD_INT 4
59894: ST_TO_ADDR
// animal := CreateVehicle ;
59895: LD_ADDR_VAR 0 12
59899: PUSH
59900: CALL_OW 45
59904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59905: LD_VAR 0 12
59909: PPUSH
59910: LD_VAR 0 8
59914: PPUSH
59915: LD_INT 0
59917: PPUSH
59918: CALL 62114 0 3
// end ;
59922: GO 59876
59924: POP
59925: POP
// if horses then
59926: LD_VAR 0 5
59930: IFFALSE 59997
// for i = 1 to horses do
59932: LD_ADDR_VAR 0 11
59936: PUSH
59937: DOUBLE
59938: LD_INT 1
59940: DEC
59941: ST_TO_ADDR
59942: LD_VAR 0 5
59946: PUSH
59947: FOR_TO
59948: IFFALSE 59995
// begin hc_class := 21 ;
59950: LD_ADDR_OWVAR 28
59954: PUSH
59955: LD_INT 21
59957: ST_TO_ADDR
// hc_gallery :=  ;
59958: LD_ADDR_OWVAR 33
59962: PUSH
59963: LD_STRING 
59965: ST_TO_ADDR
// animal := CreateHuman ;
59966: LD_ADDR_VAR 0 12
59970: PUSH
59971: CALL_OW 44
59975: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59976: LD_VAR 0 12
59980: PPUSH
59981: LD_VAR 0 8
59985: PPUSH
59986: LD_INT 0
59988: PPUSH
59989: CALL 62114 0 3
// end ;
59993: GO 59947
59995: POP
59996: POP
// if birds then
59997: LD_VAR 0 1
60001: IFFALSE 60068
// for i = 1 to birds do
60003: LD_ADDR_VAR 0 11
60007: PUSH
60008: DOUBLE
60009: LD_INT 1
60011: DEC
60012: ST_TO_ADDR
60013: LD_VAR 0 1
60017: PUSH
60018: FOR_TO
60019: IFFALSE 60066
// begin hc_class = 18 ;
60021: LD_ADDR_OWVAR 28
60025: PUSH
60026: LD_INT 18
60028: ST_TO_ADDR
// hc_gallery =  ;
60029: LD_ADDR_OWVAR 33
60033: PUSH
60034: LD_STRING 
60036: ST_TO_ADDR
// animal := CreateHuman ;
60037: LD_ADDR_VAR 0 12
60041: PUSH
60042: CALL_OW 44
60046: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60047: LD_VAR 0 12
60051: PPUSH
60052: LD_VAR 0 8
60056: PPUSH
60057: LD_INT 0
60059: PPUSH
60060: CALL 62114 0 3
// end ;
60064: GO 60018
60066: POP
60067: POP
// if tigers then
60068: LD_VAR 0 2
60072: IFFALSE 60156
// for i = 1 to tigers do
60074: LD_ADDR_VAR 0 11
60078: PUSH
60079: DOUBLE
60080: LD_INT 1
60082: DEC
60083: ST_TO_ADDR
60084: LD_VAR 0 2
60088: PUSH
60089: FOR_TO
60090: IFFALSE 60154
// begin hc_class = class_tiger ;
60092: LD_ADDR_OWVAR 28
60096: PUSH
60097: LD_INT 14
60099: ST_TO_ADDR
// hc_gallery =  ;
60100: LD_ADDR_OWVAR 33
60104: PUSH
60105: LD_STRING 
60107: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60108: LD_ADDR_OWVAR 35
60112: PUSH
60113: LD_INT 7
60115: NEG
60116: PPUSH
60117: LD_INT 7
60119: PPUSH
60120: CALL_OW 12
60124: ST_TO_ADDR
// animal := CreateHuman ;
60125: LD_ADDR_VAR 0 12
60129: PUSH
60130: CALL_OW 44
60134: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60135: LD_VAR 0 12
60139: PPUSH
60140: LD_VAR 0 8
60144: PPUSH
60145: LD_INT 0
60147: PPUSH
60148: CALL 62114 0 3
// end ;
60152: GO 60089
60154: POP
60155: POP
// if apemans then
60156: LD_VAR 0 3
60160: IFFALSE 60283
// for i = 1 to apemans do
60162: LD_ADDR_VAR 0 11
60166: PUSH
60167: DOUBLE
60168: LD_INT 1
60170: DEC
60171: ST_TO_ADDR
60172: LD_VAR 0 3
60176: PUSH
60177: FOR_TO
60178: IFFALSE 60281
// begin hc_class = class_apeman ;
60180: LD_ADDR_OWVAR 28
60184: PUSH
60185: LD_INT 12
60187: ST_TO_ADDR
// hc_gallery =  ;
60188: LD_ADDR_OWVAR 33
60192: PUSH
60193: LD_STRING 
60195: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
60196: LD_ADDR_OWVAR 35
60200: PUSH
60201: LD_INT 5
60203: NEG
60204: PPUSH
60205: LD_INT 5
60207: PPUSH
60208: CALL_OW 12
60212: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60213: LD_ADDR_OWVAR 31
60217: PUSH
60218: LD_INT 1
60220: PPUSH
60221: LD_INT 3
60223: PPUSH
60224: CALL_OW 12
60228: PUSH
60229: LD_INT 1
60231: PPUSH
60232: LD_INT 3
60234: PPUSH
60235: CALL_OW 12
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: ST_TO_ADDR
// animal := CreateHuman ;
60252: LD_ADDR_VAR 0 12
60256: PUSH
60257: CALL_OW 44
60261: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60262: LD_VAR 0 12
60266: PPUSH
60267: LD_VAR 0 8
60271: PPUSH
60272: LD_INT 0
60274: PPUSH
60275: CALL 62114 0 3
// end ;
60279: GO 60177
60281: POP
60282: POP
// if enchidnas then
60283: LD_VAR 0 4
60287: IFFALSE 60354
// for i = 1 to enchidnas do
60289: LD_ADDR_VAR 0 11
60293: PUSH
60294: DOUBLE
60295: LD_INT 1
60297: DEC
60298: ST_TO_ADDR
60299: LD_VAR 0 4
60303: PUSH
60304: FOR_TO
60305: IFFALSE 60352
// begin hc_class = 13 ;
60307: LD_ADDR_OWVAR 28
60311: PUSH
60312: LD_INT 13
60314: ST_TO_ADDR
// hc_gallery =  ;
60315: LD_ADDR_OWVAR 33
60319: PUSH
60320: LD_STRING 
60322: ST_TO_ADDR
// animal := CreateHuman ;
60323: LD_ADDR_VAR 0 12
60327: PUSH
60328: CALL_OW 44
60332: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60333: LD_VAR 0 12
60337: PPUSH
60338: LD_VAR 0 8
60342: PPUSH
60343: LD_INT 0
60345: PPUSH
60346: CALL 62114 0 3
// end ;
60350: GO 60304
60352: POP
60353: POP
// if fishes then
60354: LD_VAR 0 7
60358: IFFALSE 60425
// for i = 1 to fishes do
60360: LD_ADDR_VAR 0 11
60364: PUSH
60365: DOUBLE
60366: LD_INT 1
60368: DEC
60369: ST_TO_ADDR
60370: LD_VAR 0 7
60374: PUSH
60375: FOR_TO
60376: IFFALSE 60423
// begin hc_class = 20 ;
60378: LD_ADDR_OWVAR 28
60382: PUSH
60383: LD_INT 20
60385: ST_TO_ADDR
// hc_gallery =  ;
60386: LD_ADDR_OWVAR 33
60390: PUSH
60391: LD_STRING 
60393: ST_TO_ADDR
// animal := CreateHuman ;
60394: LD_ADDR_VAR 0 12
60398: PUSH
60399: CALL_OW 44
60403: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60404: LD_VAR 0 12
60408: PPUSH
60409: LD_VAR 0 9
60413: PPUSH
60414: LD_INT 0
60416: PPUSH
60417: CALL 62114 0 3
// end ;
60421: GO 60375
60423: POP
60424: POP
// end ;
60425: LD_VAR 0 10
60429: RET
// export function WantHeal ( sci , unit ) ; begin
60430: LD_INT 0
60432: PPUSH
// if GetTaskList ( sci ) > 0 then
60433: LD_VAR 0 1
60437: PPUSH
60438: CALL_OW 437
60442: PUSH
60443: LD_INT 0
60445: GREATER
60446: IFFALSE 60516
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60448: LD_VAR 0 1
60452: PPUSH
60453: CALL_OW 437
60457: PUSH
60458: LD_INT 1
60460: ARRAY
60461: PUSH
60462: LD_INT 1
60464: ARRAY
60465: PUSH
60466: LD_STRING l
60468: EQUAL
60469: PUSH
60470: LD_VAR 0 1
60474: PPUSH
60475: CALL_OW 437
60479: PUSH
60480: LD_INT 1
60482: ARRAY
60483: PUSH
60484: LD_INT 4
60486: ARRAY
60487: PUSH
60488: LD_VAR 0 2
60492: EQUAL
60493: AND
60494: IFFALSE 60506
// result := true else
60496: LD_ADDR_VAR 0 3
60500: PUSH
60501: LD_INT 1
60503: ST_TO_ADDR
60504: GO 60514
// result := false ;
60506: LD_ADDR_VAR 0 3
60510: PUSH
60511: LD_INT 0
60513: ST_TO_ADDR
// end else
60514: GO 60524
// result := false ;
60516: LD_ADDR_VAR 0 3
60520: PUSH
60521: LD_INT 0
60523: ST_TO_ADDR
// end ;
60524: LD_VAR 0 3
60528: RET
// export function HealTarget ( sci ) ; begin
60529: LD_INT 0
60531: PPUSH
// if not sci then
60532: LD_VAR 0 1
60536: NOT
60537: IFFALSE 60541
// exit ;
60539: GO 60606
// result := 0 ;
60541: LD_ADDR_VAR 0 2
60545: PUSH
60546: LD_INT 0
60548: ST_TO_ADDR
// if GetTaskList ( sci ) then
60549: LD_VAR 0 1
60553: PPUSH
60554: CALL_OW 437
60558: IFFALSE 60606
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60560: LD_VAR 0 1
60564: PPUSH
60565: CALL_OW 437
60569: PUSH
60570: LD_INT 1
60572: ARRAY
60573: PUSH
60574: LD_INT 1
60576: ARRAY
60577: PUSH
60578: LD_STRING l
60580: EQUAL
60581: IFFALSE 60606
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60583: LD_ADDR_VAR 0 2
60587: PUSH
60588: LD_VAR 0 1
60592: PPUSH
60593: CALL_OW 437
60597: PUSH
60598: LD_INT 1
60600: ARRAY
60601: PUSH
60602: LD_INT 4
60604: ARRAY
60605: ST_TO_ADDR
// end ;
60606: LD_VAR 0 2
60610: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60611: LD_INT 0
60613: PPUSH
60614: PPUSH
60615: PPUSH
60616: PPUSH
// if not base_units then
60617: LD_VAR 0 1
60621: NOT
60622: IFFALSE 60626
// exit ;
60624: GO 60713
// result := false ;
60626: LD_ADDR_VAR 0 2
60630: PUSH
60631: LD_INT 0
60633: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60634: LD_ADDR_VAR 0 5
60638: PUSH
60639: LD_VAR 0 1
60643: PPUSH
60644: LD_INT 21
60646: PUSH
60647: LD_INT 3
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PPUSH
60654: CALL_OW 72
60658: ST_TO_ADDR
// if not tmp then
60659: LD_VAR 0 5
60663: NOT
60664: IFFALSE 60668
// exit ;
60666: GO 60713
// for i in tmp do
60668: LD_ADDR_VAR 0 3
60672: PUSH
60673: LD_VAR 0 5
60677: PUSH
60678: FOR_IN
60679: IFFALSE 60711
// begin result := EnemyInRange ( i , 22 ) ;
60681: LD_ADDR_VAR 0 2
60685: PUSH
60686: LD_VAR 0 3
60690: PPUSH
60691: LD_INT 22
60693: PPUSH
60694: CALL 58949 0 2
60698: ST_TO_ADDR
// if result then
60699: LD_VAR 0 2
60703: IFFALSE 60709
// exit ;
60705: POP
60706: POP
60707: GO 60713
// end ;
60709: GO 60678
60711: POP
60712: POP
// end ;
60713: LD_VAR 0 2
60717: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60718: LD_INT 0
60720: PPUSH
60721: PPUSH
// if not units then
60722: LD_VAR 0 1
60726: NOT
60727: IFFALSE 60731
// exit ;
60729: GO 60801
// result := [ ] ;
60731: LD_ADDR_VAR 0 3
60735: PUSH
60736: EMPTY
60737: ST_TO_ADDR
// for i in units do
60738: LD_ADDR_VAR 0 4
60742: PUSH
60743: LD_VAR 0 1
60747: PUSH
60748: FOR_IN
60749: IFFALSE 60799
// if GetTag ( i ) = tag then
60751: LD_VAR 0 4
60755: PPUSH
60756: CALL_OW 110
60760: PUSH
60761: LD_VAR 0 2
60765: EQUAL
60766: IFFALSE 60797
// result := Insert ( result , result + 1 , i ) ;
60768: LD_ADDR_VAR 0 3
60772: PUSH
60773: LD_VAR 0 3
60777: PPUSH
60778: LD_VAR 0 3
60782: PUSH
60783: LD_INT 1
60785: PLUS
60786: PPUSH
60787: LD_VAR 0 4
60791: PPUSH
60792: CALL_OW 2
60796: ST_TO_ADDR
60797: GO 60748
60799: POP
60800: POP
// end ;
60801: LD_VAR 0 3
60805: RET
// export function IsDriver ( un ) ; begin
60806: LD_INT 0
60808: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60809: LD_ADDR_VAR 0 2
60813: PUSH
60814: LD_VAR 0 1
60818: PUSH
60819: LD_INT 55
60821: PUSH
60822: EMPTY
60823: LIST
60824: PPUSH
60825: CALL_OW 69
60829: IN
60830: ST_TO_ADDR
// end ;
60831: LD_VAR 0 2
60835: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60836: LD_INT 0
60838: PPUSH
60839: PPUSH
// list := [ ] ;
60840: LD_ADDR_VAR 0 5
60844: PUSH
60845: EMPTY
60846: ST_TO_ADDR
// case d of 0 :
60847: LD_VAR 0 3
60851: PUSH
60852: LD_INT 0
60854: DOUBLE
60855: EQUAL
60856: IFTRUE 60860
60858: GO 60993
60860: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60861: LD_ADDR_VAR 0 5
60865: PUSH
60866: LD_VAR 0 1
60870: PUSH
60871: LD_INT 4
60873: MINUS
60874: PUSH
60875: LD_VAR 0 2
60879: PUSH
60880: LD_INT 4
60882: MINUS
60883: PUSH
60884: LD_INT 2
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: LIST
60891: PUSH
60892: LD_VAR 0 1
60896: PUSH
60897: LD_INT 3
60899: MINUS
60900: PUSH
60901: LD_VAR 0 2
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: LIST
60913: PUSH
60914: LD_VAR 0 1
60918: PUSH
60919: LD_INT 4
60921: PLUS
60922: PUSH
60923: LD_VAR 0 2
60927: PUSH
60928: LD_INT 4
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: LIST
60935: PUSH
60936: LD_VAR 0 1
60940: PUSH
60941: LD_INT 3
60943: PLUS
60944: PUSH
60945: LD_VAR 0 2
60949: PUSH
60950: LD_INT 3
60952: PLUS
60953: PUSH
60954: LD_INT 5
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: LIST
60961: PUSH
60962: LD_VAR 0 1
60966: PUSH
60967: LD_VAR 0 2
60971: PUSH
60972: LD_INT 4
60974: PLUS
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: LIST
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: ST_TO_ADDR
// end ; 1 :
60991: GO 61691
60993: LD_INT 1
60995: DOUBLE
60996: EQUAL
60997: IFTRUE 61001
60999: GO 61134
61001: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61002: LD_ADDR_VAR 0 5
61006: PUSH
61007: LD_VAR 0 1
61011: PUSH
61012: LD_VAR 0 2
61016: PUSH
61017: LD_INT 4
61019: MINUS
61020: PUSH
61021: LD_INT 3
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: LIST
61028: PUSH
61029: LD_VAR 0 1
61033: PUSH
61034: LD_INT 3
61036: MINUS
61037: PUSH
61038: LD_VAR 0 2
61042: PUSH
61043: LD_INT 3
61045: MINUS
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: LIST
61054: PUSH
61055: LD_VAR 0 1
61059: PUSH
61060: LD_INT 4
61062: MINUS
61063: PUSH
61064: LD_VAR 0 2
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: LIST
61076: PUSH
61077: LD_VAR 0 1
61081: PUSH
61082: LD_VAR 0 2
61086: PUSH
61087: LD_INT 3
61089: PLUS
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: LIST
61098: PUSH
61099: LD_VAR 0 1
61103: PUSH
61104: LD_INT 4
61106: PLUS
61107: PUSH
61108: LD_VAR 0 2
61112: PUSH
61113: LD_INT 4
61115: PLUS
61116: PUSH
61117: LD_INT 5
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: ST_TO_ADDR
// end ; 2 :
61132: GO 61691
61134: LD_INT 2
61136: DOUBLE
61137: EQUAL
61138: IFTRUE 61142
61140: GO 61271
61142: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61143: LD_ADDR_VAR 0 5
61147: PUSH
61148: LD_VAR 0 1
61152: PUSH
61153: LD_VAR 0 2
61157: PUSH
61158: LD_INT 3
61160: MINUS
61161: PUSH
61162: LD_INT 3
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: LIST
61169: PUSH
61170: LD_VAR 0 1
61174: PUSH
61175: LD_INT 4
61177: PLUS
61178: PUSH
61179: LD_VAR 0 2
61183: PUSH
61184: LD_INT 4
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: LIST
61191: PUSH
61192: LD_VAR 0 1
61196: PUSH
61197: LD_VAR 0 2
61201: PUSH
61202: LD_INT 4
61204: PLUS
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: LIST
61213: PUSH
61214: LD_VAR 0 1
61218: PUSH
61219: LD_INT 3
61221: MINUS
61222: PUSH
61223: LD_VAR 0 2
61227: PUSH
61228: LD_INT 1
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: LIST
61235: PUSH
61236: LD_VAR 0 1
61240: PUSH
61241: LD_INT 4
61243: MINUS
61244: PUSH
61245: LD_VAR 0 2
61249: PUSH
61250: LD_INT 4
61252: MINUS
61253: PUSH
61254: LD_INT 2
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: LIST
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: ST_TO_ADDR
// end ; 3 :
61269: GO 61691
61271: LD_INT 3
61273: DOUBLE
61274: EQUAL
61275: IFTRUE 61279
61277: GO 61412
61279: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61280: LD_ADDR_VAR 0 5
61284: PUSH
61285: LD_VAR 0 1
61289: PUSH
61290: LD_INT 3
61292: PLUS
61293: PUSH
61294: LD_VAR 0 2
61298: PUSH
61299: LD_INT 4
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: LIST
61306: PUSH
61307: LD_VAR 0 1
61311: PUSH
61312: LD_INT 4
61314: PLUS
61315: PUSH
61316: LD_VAR 0 2
61320: PUSH
61321: LD_INT 4
61323: PLUS
61324: PUSH
61325: LD_INT 5
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: LIST
61332: PUSH
61333: LD_VAR 0 1
61337: PUSH
61338: LD_INT 4
61340: MINUS
61341: PUSH
61342: LD_VAR 0 2
61346: PUSH
61347: LD_INT 1
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: LIST
61354: PUSH
61355: LD_VAR 0 1
61359: PUSH
61360: LD_VAR 0 2
61364: PUSH
61365: LD_INT 4
61367: MINUS
61368: PUSH
61369: LD_INT 3
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: LIST
61376: PUSH
61377: LD_VAR 0 1
61381: PUSH
61382: LD_INT 3
61384: MINUS
61385: PUSH
61386: LD_VAR 0 2
61390: PUSH
61391: LD_INT 3
61393: MINUS
61394: PUSH
61395: LD_INT 2
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: LIST
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: ST_TO_ADDR
// end ; 4 :
61410: GO 61691
61412: LD_INT 4
61414: DOUBLE
61415: EQUAL
61416: IFTRUE 61420
61418: GO 61553
61420: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61421: LD_ADDR_VAR 0 5
61425: PUSH
61426: LD_VAR 0 1
61430: PUSH
61431: LD_VAR 0 2
61435: PUSH
61436: LD_INT 4
61438: PLUS
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: LIST
61447: PUSH
61448: LD_VAR 0 1
61452: PUSH
61453: LD_INT 3
61455: PLUS
61456: PUSH
61457: LD_VAR 0 2
61461: PUSH
61462: LD_INT 3
61464: PLUS
61465: PUSH
61466: LD_INT 5
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: LIST
61473: PUSH
61474: LD_VAR 0 1
61478: PUSH
61479: LD_INT 4
61481: PLUS
61482: PUSH
61483: LD_VAR 0 2
61487: PUSH
61488: LD_INT 4
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: LIST
61495: PUSH
61496: LD_VAR 0 1
61500: PUSH
61501: LD_VAR 0 2
61505: PUSH
61506: LD_INT 3
61508: MINUS
61509: PUSH
61510: LD_INT 3
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: LIST
61517: PUSH
61518: LD_VAR 0 1
61522: PUSH
61523: LD_INT 4
61525: MINUS
61526: PUSH
61527: LD_VAR 0 2
61531: PUSH
61532: LD_INT 4
61534: MINUS
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: LIST
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: ST_TO_ADDR
// end ; 5 :
61551: GO 61691
61553: LD_INT 5
61555: DOUBLE
61556: EQUAL
61557: IFTRUE 61561
61559: GO 61690
61561: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61562: LD_ADDR_VAR 0 5
61566: PUSH
61567: LD_VAR 0 1
61571: PUSH
61572: LD_INT 4
61574: MINUS
61575: PUSH
61576: LD_VAR 0 2
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: LIST
61588: PUSH
61589: LD_VAR 0 1
61593: PUSH
61594: LD_VAR 0 2
61598: PUSH
61599: LD_INT 4
61601: MINUS
61602: PUSH
61603: LD_INT 3
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: LIST
61610: PUSH
61611: LD_VAR 0 1
61615: PUSH
61616: LD_INT 4
61618: PLUS
61619: PUSH
61620: LD_VAR 0 2
61624: PUSH
61625: LD_INT 4
61627: PLUS
61628: PUSH
61629: LD_INT 5
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: LIST
61636: PUSH
61637: LD_VAR 0 1
61641: PUSH
61642: LD_INT 3
61644: PLUS
61645: PUSH
61646: LD_VAR 0 2
61650: PUSH
61651: LD_INT 4
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: LIST
61658: PUSH
61659: LD_VAR 0 1
61663: PUSH
61664: LD_VAR 0 2
61668: PUSH
61669: LD_INT 3
61671: PLUS
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: LIST
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: ST_TO_ADDR
// end ; end ;
61688: GO 61691
61690: POP
// result := list ;
61691: LD_ADDR_VAR 0 4
61695: PUSH
61696: LD_VAR 0 5
61700: ST_TO_ADDR
// end ;
61701: LD_VAR 0 4
61705: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61706: LD_INT 0
61708: PPUSH
61709: PPUSH
61710: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61711: LD_VAR 0 1
61715: NOT
61716: PUSH
61717: LD_VAR 0 2
61721: PUSH
61722: LD_INT 1
61724: PUSH
61725: LD_INT 2
61727: PUSH
61728: LD_INT 3
61730: PUSH
61731: LD_INT 4
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: IN
61740: NOT
61741: OR
61742: IFFALSE 61746
// exit ;
61744: GO 61838
// tmp := [ ] ;
61746: LD_ADDR_VAR 0 5
61750: PUSH
61751: EMPTY
61752: ST_TO_ADDR
// for i in units do
61753: LD_ADDR_VAR 0 4
61757: PUSH
61758: LD_VAR 0 1
61762: PUSH
61763: FOR_IN
61764: IFFALSE 61807
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61766: LD_ADDR_VAR 0 5
61770: PUSH
61771: LD_VAR 0 5
61775: PPUSH
61776: LD_VAR 0 5
61780: PUSH
61781: LD_INT 1
61783: PLUS
61784: PPUSH
61785: LD_VAR 0 4
61789: PPUSH
61790: LD_VAR 0 2
61794: PPUSH
61795: CALL_OW 259
61799: PPUSH
61800: CALL_OW 2
61804: ST_TO_ADDR
61805: GO 61763
61807: POP
61808: POP
// if not tmp then
61809: LD_VAR 0 5
61813: NOT
61814: IFFALSE 61818
// exit ;
61816: GO 61838
// result := SortListByListDesc ( units , tmp ) ;
61818: LD_ADDR_VAR 0 3
61822: PUSH
61823: LD_VAR 0 1
61827: PPUSH
61828: LD_VAR 0 5
61832: PPUSH
61833: CALL_OW 77
61837: ST_TO_ADDR
// end ;
61838: LD_VAR 0 3
61842: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61843: LD_INT 0
61845: PPUSH
61846: PPUSH
61847: PPUSH
// result := false ;
61848: LD_ADDR_VAR 0 3
61852: PUSH
61853: LD_INT 0
61855: ST_TO_ADDR
// x := GetX ( building ) ;
61856: LD_ADDR_VAR 0 4
61860: PUSH
61861: LD_VAR 0 2
61865: PPUSH
61866: CALL_OW 250
61870: ST_TO_ADDR
// y := GetY ( building ) ;
61871: LD_ADDR_VAR 0 5
61875: PUSH
61876: LD_VAR 0 2
61880: PPUSH
61881: CALL_OW 251
61885: ST_TO_ADDR
// if not building or not x or not y then
61886: LD_VAR 0 2
61890: NOT
61891: PUSH
61892: LD_VAR 0 4
61896: NOT
61897: OR
61898: PUSH
61899: LD_VAR 0 5
61903: NOT
61904: OR
61905: IFFALSE 61909
// exit ;
61907: GO 62001
// if GetTaskList ( unit ) then
61909: LD_VAR 0 1
61913: PPUSH
61914: CALL_OW 437
61918: IFFALSE 62001
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61920: LD_STRING e
61922: PUSH
61923: LD_VAR 0 1
61927: PPUSH
61928: CALL_OW 437
61932: PUSH
61933: LD_INT 1
61935: ARRAY
61936: PUSH
61937: LD_INT 1
61939: ARRAY
61940: EQUAL
61941: PUSH
61942: LD_VAR 0 4
61946: PUSH
61947: LD_VAR 0 1
61951: PPUSH
61952: CALL_OW 437
61956: PUSH
61957: LD_INT 1
61959: ARRAY
61960: PUSH
61961: LD_INT 2
61963: ARRAY
61964: EQUAL
61965: AND
61966: PUSH
61967: LD_VAR 0 5
61971: PUSH
61972: LD_VAR 0 1
61976: PPUSH
61977: CALL_OW 437
61981: PUSH
61982: LD_INT 1
61984: ARRAY
61985: PUSH
61986: LD_INT 3
61988: ARRAY
61989: EQUAL
61990: AND
61991: IFFALSE 62001
// result := true end ;
61993: LD_ADDR_VAR 0 3
61997: PUSH
61998: LD_INT 1
62000: ST_TO_ADDR
// end ;
62001: LD_VAR 0 3
62005: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62006: LD_INT 0
62008: PPUSH
// result := false ;
62009: LD_ADDR_VAR 0 4
62013: PUSH
62014: LD_INT 0
62016: ST_TO_ADDR
// if GetTaskList ( unit ) then
62017: LD_VAR 0 1
62021: PPUSH
62022: CALL_OW 437
62026: IFFALSE 62109
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62028: LD_STRING M
62030: PUSH
62031: LD_VAR 0 1
62035: PPUSH
62036: CALL_OW 437
62040: PUSH
62041: LD_INT 1
62043: ARRAY
62044: PUSH
62045: LD_INT 1
62047: ARRAY
62048: EQUAL
62049: PUSH
62050: LD_VAR 0 2
62054: PUSH
62055: LD_VAR 0 1
62059: PPUSH
62060: CALL_OW 437
62064: PUSH
62065: LD_INT 1
62067: ARRAY
62068: PUSH
62069: LD_INT 2
62071: ARRAY
62072: EQUAL
62073: AND
62074: PUSH
62075: LD_VAR 0 3
62079: PUSH
62080: LD_VAR 0 1
62084: PPUSH
62085: CALL_OW 437
62089: PUSH
62090: LD_INT 1
62092: ARRAY
62093: PUSH
62094: LD_INT 3
62096: ARRAY
62097: EQUAL
62098: AND
62099: IFFALSE 62109
// result := true ;
62101: LD_ADDR_VAR 0 4
62105: PUSH
62106: LD_INT 1
62108: ST_TO_ADDR
// end ; end ;
62109: LD_VAR 0 4
62113: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62114: LD_INT 0
62116: PPUSH
62117: PPUSH
62118: PPUSH
62119: PPUSH
// if not unit or not area then
62120: LD_VAR 0 1
62124: NOT
62125: PUSH
62126: LD_VAR 0 2
62130: NOT
62131: OR
62132: IFFALSE 62136
// exit ;
62134: GO 62300
// tmp := AreaToList ( area , i ) ;
62136: LD_ADDR_VAR 0 6
62140: PUSH
62141: LD_VAR 0 2
62145: PPUSH
62146: LD_VAR 0 5
62150: PPUSH
62151: CALL_OW 517
62155: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62156: LD_ADDR_VAR 0 5
62160: PUSH
62161: DOUBLE
62162: LD_INT 1
62164: DEC
62165: ST_TO_ADDR
62166: LD_VAR 0 6
62170: PUSH
62171: LD_INT 1
62173: ARRAY
62174: PUSH
62175: FOR_TO
62176: IFFALSE 62298
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62178: LD_ADDR_VAR 0 7
62182: PUSH
62183: LD_VAR 0 6
62187: PUSH
62188: LD_INT 1
62190: ARRAY
62191: PUSH
62192: LD_VAR 0 5
62196: ARRAY
62197: PUSH
62198: LD_VAR 0 6
62202: PUSH
62203: LD_INT 2
62205: ARRAY
62206: PUSH
62207: LD_VAR 0 5
62211: ARRAY
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62217: LD_VAR 0 7
62221: PUSH
62222: LD_INT 1
62224: ARRAY
62225: PPUSH
62226: LD_VAR 0 7
62230: PUSH
62231: LD_INT 2
62233: ARRAY
62234: PPUSH
62235: CALL_OW 428
62239: PUSH
62240: LD_INT 0
62242: EQUAL
62243: IFFALSE 62296
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62245: LD_VAR 0 1
62249: PPUSH
62250: LD_VAR 0 7
62254: PUSH
62255: LD_INT 1
62257: ARRAY
62258: PPUSH
62259: LD_VAR 0 7
62263: PUSH
62264: LD_INT 2
62266: ARRAY
62267: PPUSH
62268: LD_VAR 0 3
62272: PPUSH
62273: CALL_OW 48
// result := IsPlaced ( unit ) ;
62277: LD_ADDR_VAR 0 4
62281: PUSH
62282: LD_VAR 0 1
62286: PPUSH
62287: CALL_OW 305
62291: ST_TO_ADDR
// exit ;
62292: POP
62293: POP
62294: GO 62300
// end ; end ;
62296: GO 62175
62298: POP
62299: POP
// end ;
62300: LD_VAR 0 4
62304: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62305: LD_INT 0
62307: PPUSH
62308: PPUSH
62309: PPUSH
// if not side or side > 8 then
62310: LD_VAR 0 1
62314: NOT
62315: PUSH
62316: LD_VAR 0 1
62320: PUSH
62321: LD_INT 8
62323: GREATER
62324: OR
62325: IFFALSE 62329
// exit ;
62327: GO 62516
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62329: LD_ADDR_VAR 0 4
62333: PUSH
62334: LD_INT 22
62336: PUSH
62337: LD_VAR 0 1
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 21
62348: PUSH
62349: LD_INT 3
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PPUSH
62360: CALL_OW 69
62364: ST_TO_ADDR
// if not tmp then
62365: LD_VAR 0 4
62369: NOT
62370: IFFALSE 62374
// exit ;
62372: GO 62516
// enable_addtolog := true ;
62374: LD_ADDR_OWVAR 81
62378: PUSH
62379: LD_INT 1
62381: ST_TO_ADDR
// AddToLog ( [ ) ;
62382: LD_STRING [
62384: PPUSH
62385: CALL_OW 561
// for i in tmp do
62389: LD_ADDR_VAR 0 3
62393: PUSH
62394: LD_VAR 0 4
62398: PUSH
62399: FOR_IN
62400: IFFALSE 62507
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62402: LD_STRING [
62404: PUSH
62405: LD_VAR 0 3
62409: PPUSH
62410: CALL_OW 266
62414: STR
62415: PUSH
62416: LD_STRING , 
62418: STR
62419: PUSH
62420: LD_VAR 0 3
62424: PPUSH
62425: CALL_OW 250
62429: STR
62430: PUSH
62431: LD_STRING , 
62433: STR
62434: PUSH
62435: LD_VAR 0 3
62439: PPUSH
62440: CALL_OW 251
62444: STR
62445: PUSH
62446: LD_STRING , 
62448: STR
62449: PUSH
62450: LD_VAR 0 3
62454: PPUSH
62455: CALL_OW 254
62459: STR
62460: PUSH
62461: LD_STRING , 
62463: STR
62464: PUSH
62465: LD_VAR 0 3
62469: PPUSH
62470: LD_INT 1
62472: PPUSH
62473: CALL_OW 268
62477: STR
62478: PUSH
62479: LD_STRING , 
62481: STR
62482: PUSH
62483: LD_VAR 0 3
62487: PPUSH
62488: LD_INT 2
62490: PPUSH
62491: CALL_OW 268
62495: STR
62496: PUSH
62497: LD_STRING ],
62499: STR
62500: PPUSH
62501: CALL_OW 561
// end ;
62505: GO 62399
62507: POP
62508: POP
// AddToLog ( ]; ) ;
62509: LD_STRING ];
62511: PPUSH
62512: CALL_OW 561
// end ;
62516: LD_VAR 0 2
62520: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62521: LD_INT 0
62523: PPUSH
62524: PPUSH
62525: PPUSH
62526: PPUSH
62527: PPUSH
// if not area or not rate or not max then
62528: LD_VAR 0 1
62532: NOT
62533: PUSH
62534: LD_VAR 0 2
62538: NOT
62539: OR
62540: PUSH
62541: LD_VAR 0 4
62545: NOT
62546: OR
62547: IFFALSE 62551
// exit ;
62549: GO 62743
// while 1 do
62551: LD_INT 1
62553: IFFALSE 62743
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62555: LD_ADDR_VAR 0 9
62559: PUSH
62560: LD_VAR 0 1
62564: PPUSH
62565: LD_INT 1
62567: PPUSH
62568: CALL_OW 287
62572: PUSH
62573: LD_INT 10
62575: MUL
62576: ST_TO_ADDR
// r := rate / 10 ;
62577: LD_ADDR_VAR 0 7
62581: PUSH
62582: LD_VAR 0 2
62586: PUSH
62587: LD_INT 10
62589: DIVREAL
62590: ST_TO_ADDR
// time := 1 1$00 ;
62591: LD_ADDR_VAR 0 8
62595: PUSH
62596: LD_INT 2100
62598: ST_TO_ADDR
// if amount < min then
62599: LD_VAR 0 9
62603: PUSH
62604: LD_VAR 0 3
62608: LESS
62609: IFFALSE 62627
// r := r * 2 else
62611: LD_ADDR_VAR 0 7
62615: PUSH
62616: LD_VAR 0 7
62620: PUSH
62621: LD_INT 2
62623: MUL
62624: ST_TO_ADDR
62625: GO 62653
// if amount > max then
62627: LD_VAR 0 9
62631: PUSH
62632: LD_VAR 0 4
62636: GREATER
62637: IFFALSE 62653
// r := r / 2 ;
62639: LD_ADDR_VAR 0 7
62643: PUSH
62644: LD_VAR 0 7
62648: PUSH
62649: LD_INT 2
62651: DIVREAL
62652: ST_TO_ADDR
// time := time / r ;
62653: LD_ADDR_VAR 0 8
62657: PUSH
62658: LD_VAR 0 8
62662: PUSH
62663: LD_VAR 0 7
62667: DIVREAL
62668: ST_TO_ADDR
// if time < 0 then
62669: LD_VAR 0 8
62673: PUSH
62674: LD_INT 0
62676: LESS
62677: IFFALSE 62694
// time := time * - 1 ;
62679: LD_ADDR_VAR 0 8
62683: PUSH
62684: LD_VAR 0 8
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: MUL
62693: ST_TO_ADDR
// wait ( time ) ;
62694: LD_VAR 0 8
62698: PPUSH
62699: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62703: LD_INT 35
62705: PPUSH
62706: LD_INT 875
62708: PPUSH
62709: CALL_OW 12
62713: PPUSH
62714: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62718: LD_INT 1
62720: PPUSH
62721: LD_INT 5
62723: PPUSH
62724: CALL_OW 12
62728: PPUSH
62729: LD_VAR 0 1
62733: PPUSH
62734: LD_INT 1
62736: PPUSH
62737: CALL_OW 55
// end ;
62741: GO 62551
// end ;
62743: LD_VAR 0 5
62747: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62748: LD_INT 0
62750: PPUSH
62751: PPUSH
62752: PPUSH
62753: PPUSH
62754: PPUSH
62755: PPUSH
62756: PPUSH
62757: PPUSH
// if not turrets or not factories then
62758: LD_VAR 0 1
62762: NOT
62763: PUSH
62764: LD_VAR 0 2
62768: NOT
62769: OR
62770: IFFALSE 62774
// exit ;
62772: GO 63081
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62774: LD_ADDR_VAR 0 10
62778: PUSH
62779: LD_INT 5
62781: PUSH
62782: LD_INT 6
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 2
62791: PUSH
62792: LD_INT 4
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 3
62801: PUSH
62802: LD_INT 5
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 24
62816: PUSH
62817: LD_INT 25
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 23
62826: PUSH
62827: LD_INT 27
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 42
62840: PUSH
62841: LD_INT 43
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 44
62850: PUSH
62851: LD_INT 46
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 45
62860: PUSH
62861: LD_INT 47
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: LIST
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: LIST
62877: ST_TO_ADDR
// result := [ ] ;
62878: LD_ADDR_VAR 0 3
62882: PUSH
62883: EMPTY
62884: ST_TO_ADDR
// for i in turrets do
62885: LD_ADDR_VAR 0 4
62889: PUSH
62890: LD_VAR 0 1
62894: PUSH
62895: FOR_IN
62896: IFFALSE 63079
// begin nat := GetNation ( i ) ;
62898: LD_ADDR_VAR 0 7
62902: PUSH
62903: LD_VAR 0 4
62907: PPUSH
62908: CALL_OW 248
62912: ST_TO_ADDR
// weapon := 0 ;
62913: LD_ADDR_VAR 0 8
62917: PUSH
62918: LD_INT 0
62920: ST_TO_ADDR
// if not nat then
62921: LD_VAR 0 7
62925: NOT
62926: IFFALSE 62930
// continue ;
62928: GO 62895
// for j in list [ nat ] do
62930: LD_ADDR_VAR 0 5
62934: PUSH
62935: LD_VAR 0 10
62939: PUSH
62940: LD_VAR 0 7
62944: ARRAY
62945: PUSH
62946: FOR_IN
62947: IFFALSE 62988
// if GetBWeapon ( i ) = j [ 1 ] then
62949: LD_VAR 0 4
62953: PPUSH
62954: CALL_OW 269
62958: PUSH
62959: LD_VAR 0 5
62963: PUSH
62964: LD_INT 1
62966: ARRAY
62967: EQUAL
62968: IFFALSE 62986
// begin weapon := j [ 2 ] ;
62970: LD_ADDR_VAR 0 8
62974: PUSH
62975: LD_VAR 0 5
62979: PUSH
62980: LD_INT 2
62982: ARRAY
62983: ST_TO_ADDR
// break ;
62984: GO 62988
// end ;
62986: GO 62946
62988: POP
62989: POP
// if not weapon then
62990: LD_VAR 0 8
62994: NOT
62995: IFFALSE 62999
// continue ;
62997: GO 62895
// for k in factories do
62999: LD_ADDR_VAR 0 6
63003: PUSH
63004: LD_VAR 0 2
63008: PUSH
63009: FOR_IN
63010: IFFALSE 63075
// begin weapons := AvailableWeaponList ( k ) ;
63012: LD_ADDR_VAR 0 9
63016: PUSH
63017: LD_VAR 0 6
63021: PPUSH
63022: CALL_OW 478
63026: ST_TO_ADDR
// if not weapons then
63027: LD_VAR 0 9
63031: NOT
63032: IFFALSE 63036
// continue ;
63034: GO 63009
// if weapon in weapons then
63036: LD_VAR 0 8
63040: PUSH
63041: LD_VAR 0 9
63045: IN
63046: IFFALSE 63073
// begin result := [ i , weapon ] ;
63048: LD_ADDR_VAR 0 3
63052: PUSH
63053: LD_VAR 0 4
63057: PUSH
63058: LD_VAR 0 8
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: ST_TO_ADDR
// exit ;
63067: POP
63068: POP
63069: POP
63070: POP
63071: GO 63081
// end ; end ;
63073: GO 63009
63075: POP
63076: POP
// end ;
63077: GO 62895
63079: POP
63080: POP
// end ;
63081: LD_VAR 0 3
63085: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63086: LD_INT 0
63088: PPUSH
// if not side or side > 8 then
63089: LD_VAR 0 3
63093: NOT
63094: PUSH
63095: LD_VAR 0 3
63099: PUSH
63100: LD_INT 8
63102: GREATER
63103: OR
63104: IFFALSE 63108
// exit ;
63106: GO 63167
// if not range then
63108: LD_VAR 0 4
63112: NOT
63113: IFFALSE 63124
// range := - 12 ;
63115: LD_ADDR_VAR 0 4
63119: PUSH
63120: LD_INT 12
63122: NEG
63123: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63124: LD_VAR 0 1
63128: PPUSH
63129: LD_VAR 0 2
63133: PPUSH
63134: LD_VAR 0 3
63138: PPUSH
63139: LD_VAR 0 4
63143: PPUSH
63144: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63148: LD_VAR 0 1
63152: PPUSH
63153: LD_VAR 0 2
63157: PPUSH
63158: LD_VAR 0 3
63162: PPUSH
63163: CALL_OW 331
// end ;
63167: LD_VAR 0 5
63171: RET
// export function Video ( mode ) ; begin
63172: LD_INT 0
63174: PPUSH
// ingame_video = mode ;
63175: LD_ADDR_OWVAR 52
63179: PUSH
63180: LD_VAR 0 1
63184: ST_TO_ADDR
// interface_hidden = mode ;
63185: LD_ADDR_OWVAR 54
63189: PUSH
63190: LD_VAR 0 1
63194: ST_TO_ADDR
// end ;
63195: LD_VAR 0 2
63199: RET
// export function Join ( array , element ) ; begin
63200: LD_INT 0
63202: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63203: LD_ADDR_VAR 0 3
63207: PUSH
63208: LD_VAR 0 1
63212: PPUSH
63213: LD_VAR 0 1
63217: PUSH
63218: LD_INT 1
63220: PLUS
63221: PPUSH
63222: LD_VAR 0 2
63226: PPUSH
63227: CALL_OW 1
63231: ST_TO_ADDR
// end ;
63232: LD_VAR 0 3
63236: RET
// export function JoinUnion ( array , element ) ; begin
63237: LD_INT 0
63239: PPUSH
// result := array union element ;
63240: LD_ADDR_VAR 0 3
63244: PUSH
63245: LD_VAR 0 1
63249: PUSH
63250: LD_VAR 0 2
63254: UNION
63255: ST_TO_ADDR
// end ;
63256: LD_VAR 0 3
63260: RET
// export function GetBehemoths ( side ) ; begin
63261: LD_INT 0
63263: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63264: LD_ADDR_VAR 0 2
63268: PUSH
63269: LD_INT 22
63271: PUSH
63272: LD_VAR 0 1
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 31
63283: PUSH
63284: LD_INT 25
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PPUSH
63295: CALL_OW 69
63299: ST_TO_ADDR
// end ;
63300: LD_VAR 0 2
63304: RET
// export function Shuffle ( array ) ; var i , index ; begin
63305: LD_INT 0
63307: PPUSH
63308: PPUSH
63309: PPUSH
// result := [ ] ;
63310: LD_ADDR_VAR 0 2
63314: PUSH
63315: EMPTY
63316: ST_TO_ADDR
// if not array then
63317: LD_VAR 0 1
63321: NOT
63322: IFFALSE 63326
// exit ;
63324: GO 63425
// Randomize ;
63326: CALL_OW 10
// for i = array downto 1 do
63330: LD_ADDR_VAR 0 3
63334: PUSH
63335: DOUBLE
63336: LD_VAR 0 1
63340: INC
63341: ST_TO_ADDR
63342: LD_INT 1
63344: PUSH
63345: FOR_DOWNTO
63346: IFFALSE 63423
// begin index := rand ( 1 , array ) ;
63348: LD_ADDR_VAR 0 4
63352: PUSH
63353: LD_INT 1
63355: PPUSH
63356: LD_VAR 0 1
63360: PPUSH
63361: CALL_OW 12
63365: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63366: LD_ADDR_VAR 0 2
63370: PUSH
63371: LD_VAR 0 2
63375: PPUSH
63376: LD_VAR 0 2
63380: PUSH
63381: LD_INT 1
63383: PLUS
63384: PPUSH
63385: LD_VAR 0 1
63389: PUSH
63390: LD_VAR 0 4
63394: ARRAY
63395: PPUSH
63396: CALL_OW 2
63400: ST_TO_ADDR
// array := Delete ( array , index ) ;
63401: LD_ADDR_VAR 0 1
63405: PUSH
63406: LD_VAR 0 1
63410: PPUSH
63411: LD_VAR 0 4
63415: PPUSH
63416: CALL_OW 3
63420: ST_TO_ADDR
// end ;
63421: GO 63345
63423: POP
63424: POP
// end ;
63425: LD_VAR 0 2
63429: RET
// export function GetBaseMaterials ( base ) ; begin
63430: LD_INT 0
63432: PPUSH
// result := [ 0 , 0 , 0 ] ;
63433: LD_ADDR_VAR 0 2
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: LIST
63451: ST_TO_ADDR
// if not base then
63452: LD_VAR 0 1
63456: NOT
63457: IFFALSE 63461
// exit ;
63459: GO 63510
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63461: LD_ADDR_VAR 0 2
63465: PUSH
63466: LD_VAR 0 1
63470: PPUSH
63471: LD_INT 1
63473: PPUSH
63474: CALL_OW 275
63478: PUSH
63479: LD_VAR 0 1
63483: PPUSH
63484: LD_INT 2
63486: PPUSH
63487: CALL_OW 275
63491: PUSH
63492: LD_VAR 0 1
63496: PPUSH
63497: LD_INT 3
63499: PPUSH
63500: CALL_OW 275
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: LIST
63509: ST_TO_ADDR
// end ;
63510: LD_VAR 0 2
63514: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63515: LD_INT 0
63517: PPUSH
63518: PPUSH
// result := array ;
63519: LD_ADDR_VAR 0 3
63523: PUSH
63524: LD_VAR 0 1
63528: ST_TO_ADDR
// if size > 0 then
63529: LD_VAR 0 2
63533: PUSH
63534: LD_INT 0
63536: GREATER
63537: IFFALSE 63583
// for i := array downto size do
63539: LD_ADDR_VAR 0 4
63543: PUSH
63544: DOUBLE
63545: LD_VAR 0 1
63549: INC
63550: ST_TO_ADDR
63551: LD_VAR 0 2
63555: PUSH
63556: FOR_DOWNTO
63557: IFFALSE 63581
// result := Delete ( result , result ) ;
63559: LD_ADDR_VAR 0 3
63563: PUSH
63564: LD_VAR 0 3
63568: PPUSH
63569: LD_VAR 0 3
63573: PPUSH
63574: CALL_OW 3
63578: ST_TO_ADDR
63579: GO 63556
63581: POP
63582: POP
// end ;
63583: LD_VAR 0 3
63587: RET
// export function ComExit ( unit ) ; var tmp ; begin
63588: LD_INT 0
63590: PPUSH
63591: PPUSH
// if not IsInUnit ( unit ) then
63592: LD_VAR 0 1
63596: PPUSH
63597: CALL_OW 310
63601: NOT
63602: IFFALSE 63606
// exit ;
63604: GO 63666
// tmp := IsInUnit ( unit ) ;
63606: LD_ADDR_VAR 0 3
63610: PUSH
63611: LD_VAR 0 1
63615: PPUSH
63616: CALL_OW 310
63620: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63621: LD_VAR 0 3
63625: PPUSH
63626: CALL_OW 247
63630: PUSH
63631: LD_INT 2
63633: EQUAL
63634: IFFALSE 63647
// ComExitVehicle ( unit ) else
63636: LD_VAR 0 1
63640: PPUSH
63641: CALL_OW 121
63645: GO 63656
// ComExitBuilding ( unit ) ;
63647: LD_VAR 0 1
63651: PPUSH
63652: CALL_OW 122
// result := tmp ;
63656: LD_ADDR_VAR 0 2
63660: PUSH
63661: LD_VAR 0 3
63665: ST_TO_ADDR
// end ;
63666: LD_VAR 0 2
63670: RET
// export function ComExitAll ( units ) ; var i ; begin
63671: LD_INT 0
63673: PPUSH
63674: PPUSH
// if not units then
63675: LD_VAR 0 1
63679: NOT
63680: IFFALSE 63684
// exit ;
63682: GO 63710
// for i in units do
63684: LD_ADDR_VAR 0 3
63688: PUSH
63689: LD_VAR 0 1
63693: PUSH
63694: FOR_IN
63695: IFFALSE 63708
// ComExit ( i ) ;
63697: LD_VAR 0 3
63701: PPUSH
63702: CALL 63588 0 1
63706: GO 63694
63708: POP
63709: POP
// end ;
63710: LD_VAR 0 2
63714: RET
// export function ResetHc ; begin
63715: LD_INT 0
63717: PPUSH
// InitHc ;
63718: CALL_OW 19
// hc_importance := 0 ;
63722: LD_ADDR_OWVAR 32
63726: PUSH
63727: LD_INT 0
63729: ST_TO_ADDR
// end ;
63730: LD_VAR 0 1
63734: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63735: LD_INT 0
63737: PPUSH
63738: PPUSH
63739: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63740: LD_ADDR_VAR 0 6
63744: PUSH
63745: LD_VAR 0 1
63749: PUSH
63750: LD_VAR 0 3
63754: PLUS
63755: PUSH
63756: LD_INT 2
63758: DIV
63759: ST_TO_ADDR
// if _x < 0 then
63760: LD_VAR 0 6
63764: PUSH
63765: LD_INT 0
63767: LESS
63768: IFFALSE 63785
// _x := _x * - 1 ;
63770: LD_ADDR_VAR 0 6
63774: PUSH
63775: LD_VAR 0 6
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: MUL
63784: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63785: LD_ADDR_VAR 0 7
63789: PUSH
63790: LD_VAR 0 2
63794: PUSH
63795: LD_VAR 0 4
63799: PLUS
63800: PUSH
63801: LD_INT 2
63803: DIV
63804: ST_TO_ADDR
// if _y < 0 then
63805: LD_VAR 0 7
63809: PUSH
63810: LD_INT 0
63812: LESS
63813: IFFALSE 63830
// _y := _y * - 1 ;
63815: LD_ADDR_VAR 0 7
63819: PUSH
63820: LD_VAR 0 7
63824: PUSH
63825: LD_INT 1
63827: NEG
63828: MUL
63829: ST_TO_ADDR
// result := [ _x , _y ] ;
63830: LD_ADDR_VAR 0 5
63834: PUSH
63835: LD_VAR 0 6
63839: PUSH
63840: LD_VAR 0 7
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: ST_TO_ADDR
// end ;
63849: LD_VAR 0 5
63853: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63854: LD_INT 0
63856: PPUSH
63857: PPUSH
63858: PPUSH
63859: PPUSH
// task := GetTaskList ( unit ) ;
63860: LD_ADDR_VAR 0 7
63864: PUSH
63865: LD_VAR 0 1
63869: PPUSH
63870: CALL_OW 437
63874: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63875: LD_VAR 0 7
63879: NOT
63880: PUSH
63881: LD_VAR 0 1
63885: PPUSH
63886: LD_VAR 0 2
63890: PPUSH
63891: CALL_OW 308
63895: NOT
63896: AND
63897: IFFALSE 63901
// exit ;
63899: GO 64019
// if IsInArea ( unit , area ) then
63901: LD_VAR 0 1
63905: PPUSH
63906: LD_VAR 0 2
63910: PPUSH
63911: CALL_OW 308
63915: IFFALSE 63933
// begin ComMoveToArea ( unit , goAway ) ;
63917: LD_VAR 0 1
63921: PPUSH
63922: LD_VAR 0 3
63926: PPUSH
63927: CALL_OW 113
// exit ;
63931: GO 64019
// end ; if task [ 1 ] [ 1 ] <> M then
63933: LD_VAR 0 7
63937: PUSH
63938: LD_INT 1
63940: ARRAY
63941: PUSH
63942: LD_INT 1
63944: ARRAY
63945: PUSH
63946: LD_STRING M
63948: NONEQUAL
63949: IFFALSE 63953
// exit ;
63951: GO 64019
// x := task [ 1 ] [ 2 ] ;
63953: LD_ADDR_VAR 0 5
63957: PUSH
63958: LD_VAR 0 7
63962: PUSH
63963: LD_INT 1
63965: ARRAY
63966: PUSH
63967: LD_INT 2
63969: ARRAY
63970: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63971: LD_ADDR_VAR 0 6
63975: PUSH
63976: LD_VAR 0 7
63980: PUSH
63981: LD_INT 1
63983: ARRAY
63984: PUSH
63985: LD_INT 3
63987: ARRAY
63988: ST_TO_ADDR
// if InArea ( x , y , area ) then
63989: LD_VAR 0 5
63993: PPUSH
63994: LD_VAR 0 6
63998: PPUSH
63999: LD_VAR 0 2
64003: PPUSH
64004: CALL_OW 309
64008: IFFALSE 64019
// ComStop ( unit ) ;
64010: LD_VAR 0 1
64014: PPUSH
64015: CALL_OW 141
// end ;
64019: LD_VAR 0 4
64023: RET
// export function Abs ( value ) ; begin
64024: LD_INT 0
64026: PPUSH
// result := value ;
64027: LD_ADDR_VAR 0 2
64031: PUSH
64032: LD_VAR 0 1
64036: ST_TO_ADDR
// if value < 0 then
64037: LD_VAR 0 1
64041: PUSH
64042: LD_INT 0
64044: LESS
64045: IFFALSE 64062
// result := value * - 1 ;
64047: LD_ADDR_VAR 0 2
64051: PUSH
64052: LD_VAR 0 1
64056: PUSH
64057: LD_INT 1
64059: NEG
64060: MUL
64061: ST_TO_ADDR
// end ;
64062: LD_VAR 0 2
64066: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64067: LD_INT 0
64069: PPUSH
64070: PPUSH
64071: PPUSH
64072: PPUSH
64073: PPUSH
64074: PPUSH
64075: PPUSH
64076: PPUSH
// if not unit or not building then
64077: LD_VAR 0 1
64081: NOT
64082: PUSH
64083: LD_VAR 0 2
64087: NOT
64088: OR
64089: IFFALSE 64093
// exit ;
64091: GO 64319
// x := GetX ( building ) ;
64093: LD_ADDR_VAR 0 4
64097: PUSH
64098: LD_VAR 0 2
64102: PPUSH
64103: CALL_OW 250
64107: ST_TO_ADDR
// y := GetY ( building ) ;
64108: LD_ADDR_VAR 0 6
64112: PUSH
64113: LD_VAR 0 2
64117: PPUSH
64118: CALL_OW 251
64122: ST_TO_ADDR
// d := GetDir ( building ) ;
64123: LD_ADDR_VAR 0 8
64127: PUSH
64128: LD_VAR 0 2
64132: PPUSH
64133: CALL_OW 254
64137: ST_TO_ADDR
// r := 4 ;
64138: LD_ADDR_VAR 0 9
64142: PUSH
64143: LD_INT 4
64145: ST_TO_ADDR
// for i := 1 to 5 do
64146: LD_ADDR_VAR 0 10
64150: PUSH
64151: DOUBLE
64152: LD_INT 1
64154: DEC
64155: ST_TO_ADDR
64156: LD_INT 5
64158: PUSH
64159: FOR_TO
64160: IFFALSE 64317
// begin _x := ShiftX ( x , d , r + i ) ;
64162: LD_ADDR_VAR 0 5
64166: PUSH
64167: LD_VAR 0 4
64171: PPUSH
64172: LD_VAR 0 8
64176: PPUSH
64177: LD_VAR 0 9
64181: PUSH
64182: LD_VAR 0 10
64186: PLUS
64187: PPUSH
64188: CALL_OW 272
64192: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64193: LD_ADDR_VAR 0 7
64197: PUSH
64198: LD_VAR 0 6
64202: PPUSH
64203: LD_VAR 0 8
64207: PPUSH
64208: LD_VAR 0 9
64212: PUSH
64213: LD_VAR 0 10
64217: PLUS
64218: PPUSH
64219: CALL_OW 273
64223: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64224: LD_VAR 0 5
64228: PPUSH
64229: LD_VAR 0 7
64233: PPUSH
64234: CALL_OW 488
64238: PUSH
64239: LD_VAR 0 5
64243: PPUSH
64244: LD_VAR 0 7
64248: PPUSH
64249: CALL_OW 428
64253: PPUSH
64254: CALL_OW 247
64258: PUSH
64259: LD_INT 3
64261: PUSH
64262: LD_INT 2
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: IN
64269: NOT
64270: AND
64271: IFFALSE 64315
// begin ComMoveXY ( unit , _x , _y ) ;
64273: LD_VAR 0 1
64277: PPUSH
64278: LD_VAR 0 5
64282: PPUSH
64283: LD_VAR 0 7
64287: PPUSH
64288: CALL_OW 111
// result := [ _x , _y ] ;
64292: LD_ADDR_VAR 0 3
64296: PUSH
64297: LD_VAR 0 5
64301: PUSH
64302: LD_VAR 0 7
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: ST_TO_ADDR
// exit ;
64311: POP
64312: POP
64313: GO 64319
// end ; end ;
64315: GO 64159
64317: POP
64318: POP
// end ;
64319: LD_VAR 0 3
64323: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64324: LD_INT 0
64326: PPUSH
64327: PPUSH
64328: PPUSH
// result := 0 ;
64329: LD_ADDR_VAR 0 3
64333: PUSH
64334: LD_INT 0
64336: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64337: LD_VAR 0 1
64341: PUSH
64342: LD_INT 0
64344: LESS
64345: PUSH
64346: LD_VAR 0 1
64350: PUSH
64351: LD_INT 8
64353: GREATER
64354: OR
64355: PUSH
64356: LD_VAR 0 2
64360: PUSH
64361: LD_INT 0
64363: LESS
64364: OR
64365: PUSH
64366: LD_VAR 0 2
64370: PUSH
64371: LD_INT 8
64373: GREATER
64374: OR
64375: IFFALSE 64379
// exit ;
64377: GO 64454
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64379: LD_ADDR_VAR 0 4
64383: PUSH
64384: LD_INT 22
64386: PUSH
64387: LD_VAR 0 2
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PPUSH
64396: CALL_OW 69
64400: PUSH
64401: FOR_IN
64402: IFFALSE 64452
// begin un := UnitShoot ( i ) ;
64404: LD_ADDR_VAR 0 5
64408: PUSH
64409: LD_VAR 0 4
64413: PPUSH
64414: CALL_OW 504
64418: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64419: LD_VAR 0 5
64423: PPUSH
64424: CALL_OW 255
64428: PUSH
64429: LD_VAR 0 1
64433: EQUAL
64434: IFFALSE 64450
// begin result := un ;
64436: LD_ADDR_VAR 0 3
64440: PUSH
64441: LD_VAR 0 5
64445: ST_TO_ADDR
// exit ;
64446: POP
64447: POP
64448: GO 64454
// end ; end ;
64450: GO 64401
64452: POP
64453: POP
// end ;
64454: LD_VAR 0 3
64458: RET
// export function GetCargoBay ( units ) ; begin
64459: LD_INT 0
64461: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64462: LD_ADDR_VAR 0 2
64466: PUSH
64467: LD_VAR 0 1
64471: PPUSH
64472: LD_INT 2
64474: PUSH
64475: LD_INT 34
64477: PUSH
64478: LD_INT 12
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 34
64487: PUSH
64488: LD_INT 51
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 34
64497: PUSH
64498: LD_INT 32
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 34
64507: PUSH
64508: LD_EXP 111
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: PPUSH
64524: CALL_OW 72
64528: ST_TO_ADDR
// end ; end_of_file
64529: LD_VAR 0 2
64533: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
64534: LD_INT 0
64536: PPUSH
// ar_miner := 81 ;
64537: LD_ADDR_EXP 117
64541: PUSH
64542: LD_INT 81
64544: ST_TO_ADDR
// ar_crane := 88 ;
64545: LD_ADDR_EXP 116
64549: PUSH
64550: LD_INT 88
64552: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
64553: LD_ADDR_EXP 111
64557: PUSH
64558: LD_INT 89
64560: ST_TO_ADDR
// us_hack := 99 ;
64561: LD_ADDR_EXP 112
64565: PUSH
64566: LD_INT 99
64568: ST_TO_ADDR
// us_artillery := 97 ;
64569: LD_ADDR_EXP 113
64573: PUSH
64574: LD_INT 97
64576: ST_TO_ADDR
// ar_bio_bomb := 91 ;
64577: LD_ADDR_EXP 114
64581: PUSH
64582: LD_INT 91
64584: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
64585: LD_ADDR_EXP 115
64589: PUSH
64590: LD_INT 92
64592: ST_TO_ADDR
// ru_radar := 98 ;
64593: LD_ADDR_EXP 110
64597: PUSH
64598: LD_INT 98
64600: ST_TO_ADDR
// tech_Artillery := 80 ;
64601: LD_ADDR_EXP 118
64605: PUSH
64606: LD_INT 80
64608: ST_TO_ADDR
// tech_RadMat := 81 ;
64609: LD_ADDR_EXP 119
64613: PUSH
64614: LD_INT 81
64616: ST_TO_ADDR
// tech_BasicTools := 82 ;
64617: LD_ADDR_EXP 120
64621: PUSH
64622: LD_INT 82
64624: ST_TO_ADDR
// tech_Cargo := 83 ;
64625: LD_ADDR_EXP 121
64629: PUSH
64630: LD_INT 83
64632: ST_TO_ADDR
// tech_Track := 84 ;
64633: LD_ADDR_EXP 122
64637: PUSH
64638: LD_INT 84
64640: ST_TO_ADDR
// tech_Crane := 85 ;
64641: LD_ADDR_EXP 123
64645: PUSH
64646: LD_INT 85
64648: ST_TO_ADDR
// tech_Bulldozer := 86 ;
64649: LD_ADDR_EXP 124
64653: PUSH
64654: LD_INT 86
64656: ST_TO_ADDR
// tech_Hovercraft := 87 ;
64657: LD_ADDR_EXP 125
64661: PUSH
64662: LD_INT 87
64664: ST_TO_ADDR
// end ;
64665: LD_VAR 0 1
64669: RET
// every 1 do
64670: GO 64672
64672: DISABLE
// InitGlobalVariables ;
64673: CALL 64534 0 0
64677: END
