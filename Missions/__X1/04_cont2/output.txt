// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 1889 0 0
// PrepareArabian ;
  23: CALL 1230 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5481 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: PUSH
 664: LD_OWVAR 67
 668: ARRAY
 669: PPUSH
 670: CALL 504 0 2
// for i := 1 to 2 do
 674: LD_ADDR_VAR 0 3
 678: PUSH
 679: DOUBLE
 680: LD_INT 1
 682: DEC
 683: ST_TO_ADDR
 684: LD_INT 2
 686: PUSH
 687: FOR_TO
 688: IFFALSE 725
// begin hc_class := 21 ;
 690: LD_ADDR_OWVAR 28
 694: PUSH
 695: LD_INT 21
 697: ST_TO_ADDR
// hc_gallery :=  ;
 698: LD_ADDR_OWVAR 33
 702: PUSH
 703: LD_STRING 
 705: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 706: CALL_OW 44
 710: PPUSH
 711: LD_VAR 0 1
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end ;
 723: GO 687
 725: POP
 726: POP
// for i := 1 to 2 do
 727: LD_ADDR_VAR 0 3
 731: PUSH
 732: DOUBLE
 733: LD_INT 1
 735: DEC
 736: ST_TO_ADDR
 737: LD_INT 2
 739: PUSH
 740: FOR_TO
 741: IFFALSE 778
// begin hc_class := 18 ;
 743: LD_ADDR_OWVAR 28
 747: PUSH
 748: LD_INT 18
 750: ST_TO_ADDR
// hc_gallery :=  ;
 751: LD_ADDR_OWVAR 33
 755: PUSH
 756: LD_STRING 
 758: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 759: CALL_OW 44
 763: PPUSH
 764: LD_VAR 0 1
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 49
// end ;
 776: GO 740
 778: POP
 779: POP
// for i := 1 to 2 do
 780: LD_ADDR_VAR 0 3
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 2
 792: PUSH
 793: FOR_TO
 794: IFFALSE 831
// begin hc_class := 13 ;
 796: LD_ADDR_OWVAR 28
 800: PUSH
 801: LD_INT 13
 803: ST_TO_ADDR
// hc_gallery :=  ;
 804: LD_ADDR_OWVAR 33
 808: PUSH
 809: LD_STRING 
 811: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 812: CALL_OW 44
 816: PPUSH
 817: LD_VAR 0 1
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 793
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 2
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: PUSH
 849: LD_VAR 0 2
 853: NOT
 854: OR
 855: IFFALSE 859
// exit ;
 857: GO 907
// if not See ( GetSide ( observer ) , unit ) then
 859: LD_VAR 0 1
 863: PPUSH
 864: CALL_OW 255
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 292
 878: NOT
 879: IFFALSE 883
// exit ;
 881: GO 907
// result := GetDistUnits ( observer , unit ) < 12 ;
 883: LD_ADDR_VAR 0 3
 887: PUSH
 888: LD_VAR 0 1
 892: PPUSH
 893: LD_VAR 0 2
 897: PPUSH
 898: CALL_OW 296
 902: PUSH
 903: LD_INT 12
 905: LESS
 906: ST_TO_ADDR
// end ;
 907: LD_VAR 0 3
 911: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 912: LD_INT 0
 914: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: CALL_OW 488
 937: PUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: LD_VAR 0 2
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: PPUSH
 956: CALL_OW 428
 960: PUSH
 961: LD_INT 0
 963: EQUAL
 964: AND
 965: IFFALSE 999
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 967: LD_VAR 0 1
 971: PPUSH
 972: LD_VAR 0 2
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: ARRAY
 989: PPUSH
 990: LD_VAR 0 3
 994: PPUSH
 995: CALL_OW 48
// end ;
 999: LD_VAR 0 4
1003: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1004: LD_INT 0
1006: PPUSH
1007: PPUSH
1008: PPUSH
1009: PPUSH
1010: PPUSH
// if not unit then
1011: LD_VAR 0 1
1015: NOT
1016: IFFALSE 1020
// exit ;
1018: GO 1225
// side := GetSide ( unit ) ;
1020: LD_ADDR_VAR 0 4
1024: PUSH
1025: LD_VAR 0 1
1029: PPUSH
1030: CALL_OW 255
1034: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1035: LD_ADDR_VAR 0 5
1039: PUSH
1040: LD_INT 22
1042: PUSH
1043: LD_VAR 0 4
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PUSH
1052: LD_INT 30
1054: PUSH
1055: LD_VAR 0 2
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PPUSH
1068: CALL_OW 69
1072: ST_TO_ADDR
// if not tmp then
1073: LD_VAR 0 5
1077: NOT
1078: IFFALSE 1082
// exit ;
1080: GO 1225
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1082: LD_ADDR_VAR 0 5
1086: PUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: LD_VAR 0 5
1096: PPUSH
1097: LD_INT 1
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 32221 0 4
1107: ST_TO_ADDR
// places := 1 ;
1108: LD_ADDR_VAR 0 7
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1116: LD_VAR 0 2
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 4
1129: PUSH
1130: LD_INT 5
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: LD_INT 3
1138: PUSH
1139: LD_INT 6
1141: PUSH
1142: LD_INT 7
1144: PUSH
1145: LD_INT 8
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: IN
1159: IFFALSE 1169
// places := 6 ;
1161: LD_ADDR_VAR 0 7
1165: PUSH
1166: LD_INT 6
1168: ST_TO_ADDR
// for i in tmp do
1169: LD_ADDR_VAR 0 6
1173: PUSH
1174: LD_VAR 0 5
1178: PUSH
1179: FOR_IN
1180: IFFALSE 1223
// begin if UnitsInside ( i ) - places <= 0 then
1182: LD_VAR 0 6
1186: PPUSH
1187: CALL_OW 313
1191: PUSH
1192: LD_VAR 0 7
1196: MINUS
1197: PUSH
1198: LD_INT 0
1200: LESSEQUAL
1201: IFFALSE 1207
// continue else
1203: GO 1179
1205: GO 1221
// begin result := i ;
1207: LD_ADDR_VAR 0 3
1211: PUSH
1212: LD_VAR 0 6
1216: ST_TO_ADDR
// exit ;
1217: POP
1218: POP
1219: GO 1225
// end ; end ;
1221: GO 1179
1223: POP
1224: POP
// end ; end_of_file
1225: LD_VAR 0 3
1229: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1230: LD_INT 0
1232: PPUSH
1233: PPUSH
// uc_side := 2 ;
1234: LD_ADDR_OWVAR 20
1238: PUSH
1239: LD_INT 2
1241: ST_TO_ADDR
// uc_nation := 2 ;
1242: LD_ADDR_OWVAR 21
1246: PUSH
1247: LD_INT 2
1249: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1250: LD_ADDR_EXP 18
1254: PUSH
1255: LD_STRING Heike
1257: PPUSH
1258: LD_EXP 1
1262: NOT
1263: PPUSH
1264: LD_EXP 2
1268: PPUSH
1269: CALL 26840 0 3
1273: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1274: LD_ADDR_EXP 21
1278: PUSH
1279: LD_STRING Ibrahim
1281: PPUSH
1282: LD_EXP 1
1286: NOT
1287: PPUSH
1288: LD_EXP 2
1292: PPUSH
1293: CALL 26840 0 3
1297: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1298: LD_ADDR_EXP 19
1302: PUSH
1303: LD_STRING Givi
1305: PPUSH
1306: LD_EXP 1
1310: NOT
1311: PPUSH
1312: LD_EXP 2
1316: PPUSH
1317: CALL 26840 0 3
1321: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1322: LD_ADDR_EXP 22
1326: PUSH
1327: LD_STRING Kamil
1329: PPUSH
1330: LD_EXP 1
1334: NOT
1335: PPUSH
1336: LD_EXP 2
1340: PPUSH
1341: CALL 26840 0 3
1345: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1346: LD_ADDR_EXP 23
1350: PUSH
1351: LD_STRING Kaia
1353: PPUSH
1354: LD_EXP 1
1358: NOT
1359: PPUSH
1360: LD_EXP 2
1364: PPUSH
1365: CALL 26840 0 3
1369: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1370: LD_ADDR_EXP 24
1374: PUSH
1375: LD_STRING Sophia
1377: PPUSH
1378: LD_EXP 1
1382: NOT
1383: PPUSH
1384: LD_EXP 2
1388: PPUSH
1389: CALL 26840 0 3
1393: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1394: LD_ADDR_EXP 25
1398: PUSH
1399: LD_STRING Markov
1401: PPUSH
1402: LD_EXP 1
1406: NOT
1407: PPUSH
1408: LD_EXP 2
1412: PPUSH
1413: CALL 26840 0 3
1417: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1418: LD_ADDR_EXP 28
1422: PUSH
1423: LD_STRING Aviradze
1425: PPUSH
1426: LD_EXP 1
1430: NOT
1431: PPUSH
1432: LD_EXP 2
1436: PPUSH
1437: CALL 26840 0 3
1441: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1442: LD_ADDR_EXP 27
1446: PUSH
1447: LD_STRING Kurt
1449: PPUSH
1450: LD_EXP 1
1454: NOT
1455: PPUSH
1456: LD_EXP 2
1460: PPUSH
1461: CALL 26840 0 3
1465: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1466: LD_ADDR_EXP 20
1470: PUSH
1471: LD_STRING Mike
1473: PPUSH
1474: LD_EXP 1
1478: NOT
1479: PPUSH
1480: LD_EXP 2
1484: PPUSH
1485: CALL 26840 0 3
1489: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1490: LD_ADDR_EXP 29
1494: PUSH
1495: LD_STRING 04_1_others
1497: PPUSH
1498: CALL_OW 31
1502: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1503: LD_ADDR_EXP 31
1507: PUSH
1508: LD_STRING 04_1_apes
1510: PPUSH
1511: CALL_OW 31
1515: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1516: LD_ADDR_EXP 30
1520: PUSH
1521: LD_STRING 04_1_Vehicles
1523: PPUSH
1524: EMPTY
1525: PPUSH
1526: CALL_OW 30
1530: ST_TO_ADDR
// uc_side := 5 ;
1531: LD_ADDR_OWVAR 20
1535: PUSH
1536: LD_INT 5
1538: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1539: LD_ADDR_EXP 26
1543: PUSH
1544: LD_STRING Abdul
1546: PPUSH
1547: LD_INT 0
1549: PPUSH
1550: LD_STRING 
1552: PPUSH
1553: CALL 26840 0 3
1557: ST_TO_ADDR
// end ;
1558: LD_VAR 0 1
1562: RET
// export cargoDriver ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh ;
1563: LD_STRING 04_1_KaganCaptured
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 30
1573: PUSH
1574: LD_INT 22
1576: PUSH
1577: LD_INT 5
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PPUSH
1584: CALL_OW 69
1588: NOT
1589: AND
1590: PUSH
1591: LD_INT 124
1593: PPUSH
1594: LD_INT 26
1596: PPUSH
1597: CALL_OW 428
1601: PUSH
1602: LD_INT 0
1604: EQUAL
1605: PUSH
1606: LD_INT 124
1608: PPUSH
1609: LD_INT 26
1611: PPUSH
1612: CALL_OW 428
1616: PPUSH
1617: CALL_OW 255
1621: PUSH
1622: LD_INT 2
1624: EQUAL
1625: XOR
1626: AND
1627: IFFALSE 1886
1629: GO 1631
1631: DISABLE
1632: LD_INT 0
1634: PPUSH
// begin enable ;
1635: ENABLE
// uc_side := 5 ;
1636: LD_ADDR_OWVAR 20
1640: PUSH
1641: LD_INT 5
1643: ST_TO_ADDR
// uc_nation := 2 ;
1644: LD_ADDR_OWVAR 21
1648: PUSH
1649: LD_INT 2
1651: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1652: LD_INT 5
1654: PPUSH
1655: LD_INT 2
1657: PPUSH
1658: LD_INT 13
1660: PPUSH
1661: LD_INT 2
1663: PPUSH
1664: LD_INT 1
1666: PPUSH
1667: LD_INT 32
1669: PPUSH
1670: LD_INT 70
1672: PPUSH
1673: CALL 336 0 7
// veh := CreateVehicle ;
1677: LD_ADDR_VAR 0 1
1681: PUSH
1682: CALL_OW 45
1686: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1687: LD_VAR 0 1
1691: PPUSH
1692: LD_INT 3
1694: PPUSH
1695: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
1699: LD_VAR 0 1
1703: PPUSH
1704: LD_INT 8
1706: PPUSH
1707: LD_INT 0
1709: PPUSH
1710: CALL_OW 49
// if not cargoDriver then
1714: LD_EXP 32
1718: NOT
1719: IFFALSE 1744
// begin PrepareHuman ( false , 1 , 3 ) ;
1721: LD_INT 0
1723: PPUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 3
1729: PPUSH
1730: CALL_OW 380
// cargoDriver := CreateHuman ;
1734: LD_ADDR_EXP 32
1738: PUSH
1739: CALL_OW 44
1743: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
1744: LD_EXP 32
1748: PPUSH
1749: LD_VAR 0 1
1753: PPUSH
1754: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
1758: LD_VAR 0 1
1762: PPUSH
1763: LD_INT 2
1765: PPUSH
1766: LD_INT 100
1768: PPUSH
1769: CALL_OW 290
// ComMoveXY ( veh , 142 , 15 ) ;
1773: LD_VAR 0 1
1777: PPUSH
1778: LD_INT 142
1780: PPUSH
1781: LD_INT 15
1783: PPUSH
1784: CALL_OW 111
// AddComUnload ( veh ) ;
1788: LD_VAR 0 1
1792: PPUSH
1793: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
1797: LD_VAR 0 1
1801: PPUSH
1802: LD_INT 133
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 171
// wait ( 0 0$5 ) ;
1812: LD_INT 175
1814: PPUSH
1815: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1819: LD_INT 35
1821: PPUSH
1822: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
1826: LD_VAR 0 1
1830: PPUSH
1831: LD_INT 133
1833: PPUSH
1834: LD_INT 2
1836: PPUSH
1837: CALL_OW 307
1841: PUSH
1842: LD_VAR 0 1
1846: PPUSH
1847: LD_INT 8
1849: PPUSH
1850: CALL_OW 308
1854: OR
1855: IFFALSE 1819
// RemoveUnit ( cargoDriver ) ;
1857: LD_EXP 32
1861: PPUSH
1862: CALL_OW 64
// RemoveUnit ( veh ) ;
1866: LD_VAR 0 1
1870: PPUSH
1871: CALL_OW 64
// if tick >= 20 20$00 then
1875: LD_OWVAR 1
1879: PUSH
1880: LD_INT 42000
1882: GREATEREQUAL
1883: IFFALSE 1886
// disable ;
1885: DISABLE
// end ; end_of_file
1886: PPOPN 1
1888: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
1889: LD_INT 0
1891: PPUSH
1892: PPUSH
1893: PPUSH
1894: PPUSH
1895: PPUSH
1896: PPUSH
1897: PPUSH
1898: PPUSH
1899: PPUSH
// uc_side := 3 ;
1900: LD_ADDR_OWVAR 20
1904: PUSH
1905: LD_INT 3
1907: ST_TO_ADDR
// uc_nation := 3 ;
1908: LD_ADDR_OWVAR 21
1912: PUSH
1913: LD_INT 3
1915: ST_TO_ADDR
// ruForce := [ ] ;
1916: LD_ADDR_EXP 36
1920: PUSH
1921: EMPTY
1922: ST_TO_ADDR
// ruMech := [ ] ;
1923: LD_ADDR_EXP 38
1927: PUSH
1928: EMPTY
1929: ST_TO_ADDR
// ruEng := [ ] ;
1930: LD_ADDR_EXP 37
1934: PUSH
1935: EMPTY
1936: ST_TO_ADDR
// ruSci := [ ] ;
1937: LD_ADDR_EXP 39
1941: PUSH
1942: EMPTY
1943: ST_TO_ADDR
// ruMobile := [ ] ;
1944: LD_ADDR_EXP 40
1948: PUSH
1949: EMPTY
1950: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1951: LD_ADDR_EXP 33
1955: PUSH
1956: LD_STRING Burlak
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: LD_STRING 
1964: PPUSH
1965: CALL 26840 0 3
1969: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
1970: LD_ADDR_EXP 34
1974: PUSH
1975: LD_STRING Gaydar
1977: PPUSH
1978: LD_INT 0
1980: PPUSH
1981: LD_STRING 
1983: PPUSH
1984: CALL 26840 0 3
1988: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
1989: LD_ADDR_EXP 35
1993: PUSH
1994: LD_STRING Kuzmov
1996: PPUSH
1997: LD_INT 0
1999: PPUSH
2000: LD_STRING 
2002: PPUSH
2003: CALL 26840 0 3
2007: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2008: LD_EXP 35
2012: PPUSH
2013: LD_INT 200
2015: PPUSH
2016: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2020: LD_INT 200
2022: PPUSH
2023: LD_STRING chuikov
2025: PPUSH
2026: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 ] [ Difficulty ] ) ;
2030: LD_INT 200
2032: PPUSH
2033: CALL_OW 274
2037: PPUSH
2038: LD_INT 1
2040: PPUSH
2041: LD_INT 800
2043: PUSH
2044: LD_INT 1000
2046: PUSH
2047: LD_INT 1250
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: LIST
2054: PUSH
2055: LD_OWVAR 67
2059: ARRAY
2060: PPUSH
2061: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2065: LD_INT 200
2067: PPUSH
2068: CALL_OW 274
2072: PPUSH
2073: LD_INT 2
2075: PPUSH
2076: LD_INT 160
2078: PPUSH
2079: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2083: LD_INT 225
2085: PPUSH
2086: CALL_OW 274
2090: PPUSH
2091: LD_INT 1
2093: PPUSH
2094: LD_INT 200
2096: PPUSH
2097: CALL_OW 277
// oil := 150 ;
2101: LD_ADDR_VAR 0 9
2105: PUSH
2106: LD_INT 150
2108: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
2109: LD_EXP 5
2113: PUSH
2114: LD_INT 94500
2116: PUSH
2117: LD_INT 84000
2119: PUSH
2120: LD_INT 73500
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: PUSH
2128: LD_OWVAR 67
2132: ARRAY
2133: GREATEREQUAL
2134: IFFALSE 2289
// begin oil := 450 ;
2136: LD_ADDR_VAR 0 9
2140: PUSH
2141: LD_INT 450
2143: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2144: LD_ADDR_VAR 0 7
2148: PUSH
2149: LD_INT 123
2151: PUSH
2152: LD_INT 17
2154: PUSH
2155: LD_INT 3
2157: PUSH
2158: LD_INT 31
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 152
2169: PUSH
2170: LD_INT 38
2172: PUSH
2173: LD_INT 3
2175: PUSH
2176: LD_INT 31
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: PUSH
2185: LD_INT 81
2187: PUSH
2188: LD_INT 6
2190: PUSH
2191: LD_INT 4
2193: PUSH
2194: LD_INT 31
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 113
2205: PUSH
2206: LD_INT 67
2208: PUSH
2209: LD_INT 4
2211: PUSH
2212: LD_INT 32
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: ST_TO_ADDR
// for i in tmp do
2227: LD_ADDR_VAR 0 4
2231: PUSH
2232: LD_VAR 0 7
2236: PUSH
2237: FOR_IN
2238: IFFALSE 2287
// begin bc_type := i [ 4 ] ;
2240: LD_ADDR_OWVAR 42
2244: PUSH
2245: LD_VAR 0 4
2249: PUSH
2250: LD_INT 4
2252: ARRAY
2253: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2254: LD_VAR 0 4
2258: PUSH
2259: LD_INT 1
2261: ARRAY
2262: PPUSH
2263: LD_VAR 0 4
2267: PUSH
2268: LD_INT 2
2270: ARRAY
2271: PPUSH
2272: LD_VAR 0 4
2276: PUSH
2277: LD_INT 3
2279: ARRAY
2280: PPUSH
2281: CALL_OW 47
// end ;
2285: GO 2237
2287: POP
2288: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2289: LD_INT 225
2291: PPUSH
2292: CALL_OW 274
2296: PPUSH
2297: LD_INT 2
2299: PPUSH
2300: LD_VAR 0 9
2304: PPUSH
2305: CALL_OW 277
// if Difficulty > 1 then
2309: LD_OWVAR 67
2313: PUSH
2314: LD_INT 1
2316: GREATER
2317: IFFALSE 2412
// begin bc_type := b_bunker ;
2319: LD_ADDR_OWVAR 42
2323: PUSH
2324: LD_INT 32
2326: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2327: LD_ADDR_VAR 0 7
2331: PUSH
2332: LD_INT 121
2334: PUSH
2335: LD_INT 85
2337: PUSH
2338: LD_INT 5
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 93
2348: PUSH
2349: LD_INT 72
2351: PUSH
2352: LD_INT 1
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: ST_TO_ADDR
// for i in tmp do
2364: LD_ADDR_VAR 0 4
2368: PUSH
2369: LD_VAR 0 7
2373: PUSH
2374: FOR_IN
2375: IFFALSE 2410
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2377: LD_VAR 0 4
2381: PUSH
2382: LD_INT 1
2384: ARRAY
2385: PPUSH
2386: LD_VAR 0 4
2390: PUSH
2391: LD_INT 2
2393: ARRAY
2394: PPUSH
2395: LD_VAR 0 4
2399: PUSH
2400: LD_INT 3
2402: ARRAY
2403: PPUSH
2404: CALL_OW 47
2408: GO 2374
2410: POP
2411: POP
// end ; base := GetBase ( ruMainBase ) ;
2412: LD_ADDR_VAR 0 2
2416: PUSH
2417: LD_INT 200
2419: PPUSH
2420: CALL_OW 274
2424: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2425: LD_ADDR_VAR 0 3
2429: PUSH
2430: LD_VAR 0 2
2434: PPUSH
2435: CALL_OW 417
2439: ST_TO_ADDR
// for b in blist do
2440: LD_ADDR_VAR 0 5
2444: PUSH
2445: LD_VAR 0 3
2449: PUSH
2450: FOR_IN
2451: IFFALSE 2902
// begin if b [ 1 ] = b_factory then
2453: LD_VAR 0 5
2457: PUSH
2458: LD_INT 1
2460: ARRAY
2461: PUSH
2462: LD_INT 3
2464: EQUAL
2465: IFFALSE 2616
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2467: LD_ADDR_VAR 0 8
2471: PUSH
2472: LD_VAR 0 5
2476: PUSH
2477: LD_INT 2
2479: ARRAY
2480: PPUSH
2481: LD_VAR 0 5
2485: PUSH
2486: LD_INT 3
2488: ARRAY
2489: PPUSH
2490: CALL_OW 428
2494: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2495: LD_ADDR_VAR 0 4
2499: PUSH
2500: DOUBLE
2501: LD_INT 1
2503: DEC
2504: ST_TO_ADDR
2505: LD_INT 2
2507: PUSH
2508: LD_INT 2
2510: PUSH
2511: LD_OWVAR 67
2515: PLUS
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: PUSH
2521: LD_EXP 10
2525: PUSH
2526: LD_INT 3
2528: GREATER
2529: PUSH
2530: LD_INT 1
2532: PLUS
2533: ARRAY
2534: PUSH
2535: FOR_TO
2536: IFFALSE 2612
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2538: LD_INT 0
2540: PPUSH
2541: LD_INT 3
2543: PPUSH
2544: LD_INT 1
2546: PUSH
2547: LD_OWVAR 67
2551: PLUS
2552: PPUSH
2553: CALL_OW 380
// un := CreateHuman ;
2557: LD_ADDR_VAR 0 6
2561: PUSH
2562: CALL_OW 44
2566: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2567: LD_ADDR_EXP 38
2571: PUSH
2572: LD_EXP 38
2576: PPUSH
2577: LD_EXP 38
2581: PUSH
2582: LD_INT 1
2584: PLUS
2585: PPUSH
2586: LD_VAR 0 6
2590: PPUSH
2591: CALL_OW 1
2595: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2596: LD_VAR 0 6
2600: PPUSH
2601: LD_VAR 0 8
2605: PPUSH
2606: CALL_OW 52
// end ;
2610: GO 2535
2612: POP
2613: POP
// end else
2614: GO 2900
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2616: LD_VAR 0 5
2620: PUSH
2621: LD_INT 1
2623: ARRAY
2624: PUSH
2625: LD_INT 6
2627: PUSH
2628: LD_INT 7
2630: PUSH
2631: LD_INT 8
2633: PUSH
2634: LD_INT 10
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: IN
2643: IFFALSE 2753
// begin for i := 1 to 2 do
2645: LD_ADDR_VAR 0 4
2649: PUSH
2650: DOUBLE
2651: LD_INT 1
2653: DEC
2654: ST_TO_ADDR
2655: LD_INT 2
2657: PUSH
2658: FOR_TO
2659: IFFALSE 2749
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2661: LD_INT 0
2663: PPUSH
2664: LD_INT 4
2666: PPUSH
2667: LD_OWVAR 67
2671: PPUSH
2672: CALL_OW 380
// un := CreateHuman ;
2676: LD_ADDR_VAR 0 6
2680: PUSH
2681: CALL_OW 44
2685: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
2686: LD_ADDR_EXP 39
2690: PUSH
2691: LD_EXP 39
2695: PPUSH
2696: LD_EXP 39
2700: PUSH
2701: LD_INT 1
2703: PLUS
2704: PPUSH
2705: LD_VAR 0 6
2709: PPUSH
2710: CALL_OW 1
2714: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2715: LD_VAR 0 6
2719: PPUSH
2720: LD_VAR 0 5
2724: PUSH
2725: LD_INT 2
2727: ARRAY
2728: PPUSH
2729: LD_VAR 0 5
2733: PUSH
2734: LD_INT 3
2736: ARRAY
2737: PPUSH
2738: CALL_OW 428
2742: PPUSH
2743: CALL_OW 52
// end ;
2747: GO 2658
2749: POP
2750: POP
// end else
2751: GO 2900
// if b [ 1 ] = b_warehouse then
2753: LD_VAR 0 5
2757: PUSH
2758: LD_INT 1
2760: ARRAY
2761: PUSH
2762: LD_INT 1
2764: EQUAL
2765: IFFALSE 2900
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2767: LD_ADDR_VAR 0 4
2771: PUSH
2772: DOUBLE
2773: LD_INT 1
2775: DEC
2776: ST_TO_ADDR
2777: LD_INT 1
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_OWVAR 67
2787: PLUS
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PUSH
2793: LD_EXP 10
2797: PUSH
2798: LD_INT 3
2800: GREATER
2801: PUSH
2802: LD_INT 1
2804: PLUS
2805: ARRAY
2806: PUSH
2807: FOR_TO
2808: IFFALSE 2898
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2810: LD_INT 0
2812: PPUSH
2813: LD_INT 2
2815: PPUSH
2816: LD_OWVAR 67
2820: PPUSH
2821: CALL_OW 380
// un := CreateHuman ;
2825: LD_ADDR_VAR 0 6
2829: PUSH
2830: CALL_OW 44
2834: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
2835: LD_ADDR_EXP 37
2839: PUSH
2840: LD_EXP 37
2844: PPUSH
2845: LD_EXP 37
2849: PUSH
2850: LD_INT 1
2852: PLUS
2853: PPUSH
2854: LD_VAR 0 6
2858: PPUSH
2859: CALL_OW 1
2863: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2864: LD_VAR 0 6
2868: PPUSH
2869: LD_VAR 0 5
2873: PUSH
2874: LD_INT 2
2876: ARRAY
2877: PPUSH
2878: LD_VAR 0 5
2882: PUSH
2883: LD_INT 3
2885: ARRAY
2886: PPUSH
2887: CALL_OW 428
2891: PPUSH
2892: CALL_OW 52
// end ;
2896: GO 2807
2898: POP
2899: POP
// end ; end ;
2900: GO 2450
2902: POP
2903: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
2904: LD_ADDR_VAR 0 3
2908: PUSH
2909: LD_INT 22
2911: PUSH
2912: LD_INT 3
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: PUSH
2919: LD_INT 21
2921: PUSH
2922: LD_INT 3
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: PPUSH
2933: CALL_OW 69
2937: ST_TO_ADDR
// for b in blist do
2938: LD_ADDR_VAR 0 5
2942: PUSH
2943: LD_VAR 0 3
2947: PUSH
2948: FOR_IN
2949: IFFALSE 2971
// SetBLevel ( b , 3 + Difficulty ) ;
2951: LD_VAR 0 5
2955: PPUSH
2956: LD_INT 3
2958: PUSH
2959: LD_OWVAR 67
2963: PLUS
2964: PPUSH
2965: CALL_OW 241
2969: GO 2948
2971: POP
2972: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
2973: LD_ADDR_VAR 0 3
2977: PUSH
2978: LD_INT 22
2980: PUSH
2981: LD_INT 3
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: PUSH
2988: LD_INT 30
2990: PUSH
2991: LD_INT 32
2993: PUSH
2994: EMPTY
2995: LIST
2996: LIST
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PPUSH
3002: CALL_OW 69
3006: ST_TO_ADDR
// for b in blist do
3007: LD_ADDR_VAR 0 5
3011: PUSH
3012: LD_VAR 0 3
3016: PUSH
3017: FOR_IN
3018: IFFALSE 3127
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3020: LD_INT 0
3022: PPUSH
3023: LD_INT 1
3025: PPUSH
3026: LD_INT 1
3028: PUSH
3029: LD_OWVAR 67
3033: PLUS
3034: PPUSH
3035: CALL_OW 380
// un := CreateHuman ;
3039: LD_ADDR_VAR 0 6
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3049: LD_ADDR_EXP 36
3053: PUSH
3054: LD_EXP 36
3058: PPUSH
3059: LD_EXP 36
3063: PUSH
3064: LD_INT 1
3066: PLUS
3067: PPUSH
3068: LD_VAR 0 6
3072: PPUSH
3073: CALL_OW 1
3077: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3078: LD_VAR 0 6
3082: PPUSH
3083: LD_VAR 0 5
3087: PPUSH
3088: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3092: LD_VAR 0 5
3096: PPUSH
3097: LD_INT 44
3099: PUSH
3100: LD_INT 43
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_VAR 0 5
3111: PUSH
3112: LD_INT 2
3114: MOD
3115: PUSH
3116: LD_INT 1
3118: PLUS
3119: ARRAY
3120: PPUSH
3121: CALL_OW 431
// end ;
3125: GO 3017
3127: POP
3128: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3129: LD_ADDR_VAR 0 3
3133: PUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 3
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 30
3146: PUSH
3147: LD_INT 31
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 69
3162: ST_TO_ADDR
// for b in blist do
3163: LD_ADDR_VAR 0 5
3167: PUSH
3168: LD_VAR 0 3
3172: PUSH
3173: FOR_IN
3174: IFFALSE 3273
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3176: LD_INT 0
3178: PPUSH
3179: LD_INT 1
3181: PPUSH
3182: LD_INT 1
3184: PUSH
3185: LD_OWVAR 67
3189: PLUS
3190: PPUSH
3191: CALL_OW 380
// un := CreateHuman ;
3195: LD_ADDR_VAR 0 6
3199: PUSH
3200: CALL_OW 44
3204: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3205: LD_ADDR_EXP 36
3209: PUSH
3210: LD_EXP 36
3214: PPUSH
3215: LD_EXP 36
3219: PUSH
3220: LD_INT 1
3222: PLUS
3223: PPUSH
3224: LD_VAR 0 6
3228: PPUSH
3229: CALL_OW 1
3233: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3234: LD_VAR 0 6
3238: PPUSH
3239: LD_VAR 0 5
3243: PPUSH
3244: CALL_OW 254
3248: PUSH
3249: LD_INT 3
3251: PLUS
3252: PPUSH
3253: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3257: LD_VAR 0 6
3261: PPUSH
3262: LD_VAR 0 5
3266: PPUSH
3267: CALL_OW 52
// end ;
3271: GO 3173
3273: POP
3274: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3275: LD_ADDR_VAR 0 3
3279: PUSH
3280: LD_INT 22
3282: PUSH
3283: LD_INT 3
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 2
3292: PUSH
3293: LD_INT 30
3295: PUSH
3296: LD_INT 4
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: PUSH
3303: LD_INT 30
3305: PUSH
3306: LD_INT 5
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: LIST
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PPUSH
3322: CALL_OW 69
3326: ST_TO_ADDR
// for b in blist do
3327: LD_ADDR_VAR 0 5
3331: PUSH
3332: LD_VAR 0 3
3336: PUSH
3337: FOR_IN
3338: IFFALSE 3434
// begin for i := 1 to 2 do
3340: LD_ADDR_VAR 0 4
3344: PUSH
3345: DOUBLE
3346: LD_INT 1
3348: DEC
3349: ST_TO_ADDR
3350: LD_INT 2
3352: PUSH
3353: FOR_TO
3354: IFFALSE 3430
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3356: LD_INT 0
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: LD_INT 1
3364: PUSH
3365: LD_OWVAR 67
3369: PLUS
3370: PPUSH
3371: CALL_OW 380
// un := CreateHuman ;
3375: LD_ADDR_VAR 0 6
3379: PUSH
3380: CALL_OW 44
3384: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3385: LD_ADDR_EXP 36
3389: PUSH
3390: LD_EXP 36
3394: PPUSH
3395: LD_EXP 36
3399: PUSH
3400: LD_INT 1
3402: PLUS
3403: PPUSH
3404: LD_VAR 0 6
3408: PPUSH
3409: CALL_OW 1
3413: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3414: LD_VAR 0 6
3418: PPUSH
3419: LD_VAR 0 5
3423: PPUSH
3424: CALL_OW 52
// end ;
3428: GO 3353
3430: POP
3431: POP
// end ;
3432: GO 3337
3434: POP
3435: POP
// if ibrahimOnRuSide then
3436: LD_EXP 3
3440: IFFALSE 3538
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3442: LD_ADDR_EXP 21
3446: PUSH
3447: LD_STRING IbrahimRu
3449: PPUSH
3450: LD_INT 0
3452: PPUSH
3453: LD_STRING 
3455: PPUSH
3456: CALL 26840 0 3
3460: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3461: LD_EXP 21
3465: PPUSH
3466: LD_INT 121
3468: PPUSH
3469: LD_INT 78
3471: PPUSH
3472: LD_INT 0
3474: PPUSH
3475: CALL_OW 48
// ComHold ( Ibrahim ) ;
3479: LD_EXP 21
3483: PPUSH
3484: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3488: LD_INT 1
3490: PPUSH
3491: LD_INT 1
3493: PPUSH
3494: LD_INT 2
3496: PPUSH
3497: CALL_OW 380
// ruSol := CreateHuman ;
3501: LD_ADDR_EXP 41
3505: PUSH
3506: CALL_OW 44
3510: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3511: LD_EXP 41
3515: PPUSH
3516: LD_INT 121
3518: PPUSH
3519: LD_INT 75
3521: PPUSH
3522: LD_INT 0
3524: PPUSH
3525: CALL_OW 48
// ComHold ( ruSol ) ;
3529: LD_EXP 41
3533: PPUSH
3534: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3538: LD_ADDR_VAR 0 4
3542: PUSH
3543: DOUBLE
3544: LD_INT 1
3546: DEC
3547: ST_TO_ADDR
3548: LD_INT 2
3550: PUSH
3551: LD_INT 2
3553: PUSH
3554: LD_OWVAR 67
3558: PLUS
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PUSH
3564: LD_EXP 10
3568: PUSH
3569: LD_INT 3
3571: GREATER
3572: PUSH
3573: LD_INT 1
3575: PLUS
3576: ARRAY
3577: PUSH
3578: FOR_TO
3579: IFFALSE 3648
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3581: LD_VAR 0 8
3585: PPUSH
3586: LD_INT 21
3588: PUSH
3589: LD_INT 23
3591: PUSH
3592: LD_INT 24
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: LIST
3599: PUSH
3600: LD_VAR 0 4
3604: PUSH
3605: LD_INT 3
3607: MOD
3608: PUSH
3609: LD_INT 1
3611: PLUS
3612: ARRAY
3613: PPUSH
3614: LD_INT 1
3616: PPUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 43
3622: PUSH
3623: LD_INT 44
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: PUSH
3630: LD_INT 1
3632: PPUSH
3633: LD_INT 2
3635: PPUSH
3636: CALL_OW 12
3640: ARRAY
3641: PPUSH
3642: CALL_OW 185
3646: GO 3578
3648: POP
3649: POP
// end ;
3650: LD_VAR 0 1
3654: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3655: LD_EXP 40
3659: PUSH
3660: LD_EXP 4
3664: NOT
3665: AND
3666: IFFALSE 4153
3668: GO 3670
3670: DISABLE
3671: LD_INT 0
3673: PPUSH
3674: PPUSH
3675: PPUSH
3676: PPUSH
3677: PPUSH
// begin enable ;
3678: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
3679: LD_ADDR_VAR 0 2
3683: PUSH
3684: LD_EXP 40
3688: PPUSH
3689: LD_INT 21
3691: PUSH
3692: LD_INT 2
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 72
3703: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
3704: LD_ADDR_VAR 0 4
3708: PUSH
3709: LD_INT 81
3711: PUSH
3712: LD_INT 3
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PUSH
3719: LD_INT 2
3721: PUSH
3722: LD_INT 95
3724: PUSH
3725: LD_INT 4
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: PUSH
3732: LD_INT 95
3734: PUSH
3735: LD_INT 5
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: PUSH
3742: LD_INT 95
3744: PUSH
3745: LD_INT 6
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: PUSH
3752: LD_INT 95
3754: PUSH
3755: LD_INT 7
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PPUSH
3773: CALL_OW 69
3777: ST_TO_ADDR
// for i in filter do
3778: LD_ADDR_VAR 0 1
3782: PUSH
3783: LD_VAR 0 2
3787: PUSH
3788: FOR_IN
3789: IFFALSE 4151
// begin tmp := IsDrivenBy ( i ) ;
3791: LD_ADDR_VAR 0 3
3795: PUSH
3796: LD_VAR 0 1
3800: PPUSH
3801: CALL_OW 311
3805: ST_TO_ADDR
// if not tmp then
3806: LD_VAR 0 3
3810: NOT
3811: IFFALSE 3815
// continue ;
3813: GO 3788
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
3815: LD_VAR 0 1
3819: PPUSH
3820: CALL_OW 261
3824: PUSH
3825: LD_INT 90
3827: GREATER
3828: PUSH
3829: LD_VAR 0 1
3833: PPUSH
3834: CALL_OW 110
3838: PUSH
3839: LD_INT 2
3841: EQUAL
3842: AND
3843: IFFALSE 3859
// SetTag ( i , 0 ) else
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_INT 0
3852: PPUSH
3853: CALL_OW 109
3857: GO 3902
// if GetTag ( i ) = 2 then
3859: LD_VAR 0 1
3863: PPUSH
3864: CALL_OW 110
3868: PUSH
3869: LD_INT 2
3871: EQUAL
3872: IFFALSE 3902
// begin x := rand ( 1 , 2 ) ;
3874: LD_ADDR_VAR 0 5
3878: PUSH
3879: LD_INT 1
3881: PPUSH
3882: LD_INT 2
3884: PPUSH
3885: CALL_OW 12
3889: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
3890: LD_VAR 0 1
3894: PPUSH
3895: LD_INT 200
3897: PPUSH
3898: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
3902: LD_VAR 0 1
3906: PPUSH
3907: CALL_OW 256
3911: PUSH
3912: LD_INT 600
3914: GREATEREQUAL
3915: PUSH
3916: LD_VAR 0 1
3920: PPUSH
3921: CALL_OW 110
3925: NOT
3926: AND
3927: IFFALSE 3953
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
3929: LD_VAR 0 1
3933: PPUSH
3934: LD_VAR 0 4
3938: PPUSH
3939: LD_VAR 0 1
3943: PPUSH
3944: CALL_OW 74
3948: PPUSH
3949: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
3953: LD_VAR 0 1
3957: PPUSH
3958: CALL_OW 256
3962: PUSH
3963: LD_INT 600
3965: LESS
3966: PUSH
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 110
3976: NOT
3977: AND
3978: IFFALSE 4007
// begin SetTag ( i , 1 ) ;
3980: LD_VAR 0 1
3984: PPUSH
3985: LD_INT 1
3987: PPUSH
3988: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
3992: LD_VAR 0 1
3996: PPUSH
3997: LD_INT 112
3999: PPUSH
4000: LD_INT 119
4002: PPUSH
4003: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4007: LD_VAR 0 1
4011: PPUSH
4012: CALL_OW 110
4016: PUSH
4017: LD_INT 1
4019: EQUAL
4020: PUSH
4021: LD_VAR 0 1
4025: PPUSH
4026: LD_INT 112
4028: PPUSH
4029: LD_INT 119
4031: PPUSH
4032: CALL_OW 297
4036: PUSH
4037: LD_INT 9
4039: LESS
4040: AND
4041: PUSH
4042: LD_VAR 0 3
4046: AND
4047: IFFALSE 4149
// begin ComExitVehicle ( tmp ) ;
4049: LD_VAR 0 3
4053: PPUSH
4054: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4058: LD_VAR 0 3
4062: PPUSH
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4072: LD_INT 35
4074: PPUSH
4075: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4079: LD_VAR 0 1
4083: PPUSH
4084: CALL_OW 256
4088: PUSH
4089: LD_INT 1000
4091: EQUAL
4092: IFFALSE 4072
// ComEnterUnit ( tmp , i ) ;
4094: LD_VAR 0 3
4098: PPUSH
4099: LD_VAR 0 1
4103: PPUSH
4104: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4108: LD_VAR 0 1
4112: PPUSH
4113: CALL_OW 261
4117: PUSH
4118: LD_INT 50
4120: LESSEQUAL
4121: IFFALSE 4137
// SetTag ( i , 2 ) else
4123: LD_VAR 0 1
4127: PPUSH
4128: LD_INT 2
4130: PPUSH
4131: CALL_OW 109
4135: GO 4149
// SetTag ( i , 0 ) ;
4137: LD_VAR 0 1
4141: PPUSH
4142: LD_INT 0
4144: PPUSH
4145: CALL_OW 109
// end ; end ;
4149: GO 3788
4151: POP
4152: POP
// end ;
4153: PPOPN 5
4155: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4156: LD_EXP 4
4160: NOT
4161: PUSH
4162: LD_EXP 37
4166: AND
4167: IFFALSE 4428
4169: GO 4171
4171: DISABLE
4172: LD_INT 0
4174: PPUSH
4175: PPUSH
4176: PPUSH
4177: PPUSH
// begin enable ;
4178: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4179: LD_ADDR_VAR 0 2
4183: PUSH
4184: LD_INT 3
4186: PPUSH
4187: LD_INT 22
4189: PUSH
4190: LD_INT 3
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: PUSH
4197: LD_INT 21
4199: PUSH
4200: LD_INT 3
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 3
4209: PUSH
4210: LD_INT 24
4212: PUSH
4213: LD_INT 1000
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: LIST
4228: PPUSH
4229: CALL_OW 70
4233: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4234: LD_ADDR_VAR 0 3
4238: PUSH
4239: LD_EXP 37
4243: PPUSH
4244: LD_INT 50
4246: PUSH
4247: EMPTY
4248: LIST
4249: PPUSH
4250: CALL_OW 72
4254: ST_TO_ADDR
// if filter and tmp then
4255: LD_VAR 0 2
4259: PUSH
4260: LD_VAR 0 3
4264: AND
4265: IFFALSE 4357
// begin for i in tmp do
4267: LD_ADDR_VAR 0 1
4271: PUSH
4272: LD_VAR 0 3
4276: PUSH
4277: FOR_IN
4278: IFFALSE 4353
// begin if GetTag ( i ) = tEscape then
4280: LD_VAR 0 1
4284: PPUSH
4285: CALL_OW 110
4289: PUSH
4290: LD_EXP 17
4294: EQUAL
4295: IFFALSE 4299
// continue ;
4297: GO 4277
// if IsInUnit ( i ) then
4299: LD_VAR 0 1
4303: PPUSH
4304: CALL_OW 310
4308: IFFALSE 4321
// ComExitBuilding ( i ) else
4310: LD_VAR 0 1
4314: PPUSH
4315: CALL_OW 122
4319: GO 4351
// if not HasTask ( i ) then
4321: LD_VAR 0 1
4325: PPUSH
4326: CALL_OW 314
4330: NOT
4331: IFFALSE 4351
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4333: LD_VAR 0 1
4337: PPUSH
4338: LD_VAR 0 2
4342: PUSH
4343: LD_INT 1
4345: ARRAY
4346: PPUSH
4347: CALL_OW 130
// end ;
4351: GO 4277
4353: POP
4354: POP
// end else
4355: GO 4428
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4357: LD_VAR 0 3
4361: PPUSH
4362: LD_INT 3
4364: PUSH
4365: LD_INT 54
4367: PUSH
4368: EMPTY
4369: LIST
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PPUSH
4375: CALL_OW 72
4379: IFFALSE 4428
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4381: LD_ADDR_VAR 0 1
4385: PUSH
4386: LD_VAR 0 3
4390: PPUSH
4391: LD_INT 3
4393: PUSH
4394: LD_INT 54
4396: PUSH
4397: EMPTY
4398: LIST
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PPUSH
4404: CALL_OW 72
4408: PUSH
4409: FOR_IN
4410: IFFALSE 4426
// ComEnterUnit ( i , ruMainBase ) ;
4412: LD_VAR 0 1
4416: PPUSH
4417: LD_INT 200
4419: PPUSH
4420: CALL_OW 120
4424: GO 4409
4426: POP
4427: POP
// end ; end ;
4428: PPOPN 4
4430: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4431: LD_EXP 4
4435: NOT
4436: PUSH
4437: LD_EXP 39
4441: AND
4442: IFFALSE 4721
4444: GO 4446
4446: DISABLE
4447: LD_INT 0
4449: PPUSH
4450: PPUSH
4451: PPUSH
4452: PPUSH
// begin enable ;
4453: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4454: LD_ADDR_VAR 0 2
4458: PUSH
4459: LD_INT 3
4461: PPUSH
4462: LD_INT 22
4464: PUSH
4465: LD_INT 3
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 21
4474: PUSH
4475: LD_INT 1
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 3
4484: PUSH
4485: LD_INT 24
4487: PUSH
4488: LD_INT 1000
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 70
4508: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4509: LD_ADDR_VAR 0 3
4513: PUSH
4514: LD_EXP 39
4518: PPUSH
4519: LD_INT 50
4521: PUSH
4522: EMPTY
4523: LIST
4524: PPUSH
4525: CALL_OW 72
4529: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4530: LD_ADDR_VAR 0 4
4534: PUSH
4535: LD_INT 118
4537: PPUSH
4538: LD_INT 121
4540: PPUSH
4541: CALL_OW 428
4545: ST_TO_ADDR
// if filter and tmp then
4546: LD_VAR 0 2
4550: PUSH
4551: LD_VAR 0 3
4555: AND
4556: IFFALSE 4648
// begin for i in tmp do
4558: LD_ADDR_VAR 0 1
4562: PUSH
4563: LD_VAR 0 3
4567: PUSH
4568: FOR_IN
4569: IFFALSE 4644
// begin if GetTag ( i ) = tEscape then
4571: LD_VAR 0 1
4575: PPUSH
4576: CALL_OW 110
4580: PUSH
4581: LD_EXP 17
4585: EQUAL
4586: IFFALSE 4590
// continue ;
4588: GO 4568
// if IsInUnit ( i ) then
4590: LD_VAR 0 1
4594: PPUSH
4595: CALL_OW 310
4599: IFFALSE 4612
// ComExitBuilding ( i ) else
4601: LD_VAR 0 1
4605: PPUSH
4606: CALL_OW 122
4610: GO 4642
// if not HasTask ( i ) then
4612: LD_VAR 0 1
4616: PPUSH
4617: CALL_OW 314
4621: NOT
4622: IFFALSE 4642
// ComHeal ( i , filter [ 1 ] ) ;
4624: LD_VAR 0 1
4628: PPUSH
4629: LD_VAR 0 2
4633: PUSH
4634: LD_INT 1
4636: ARRAY
4637: PPUSH
4638: CALL_OW 128
// end ;
4642: GO 4568
4644: POP
4645: POP
// end else
4646: GO 4721
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4648: LD_VAR 0 3
4652: PPUSH
4653: LD_INT 3
4655: PUSH
4656: LD_INT 54
4658: PUSH
4659: EMPTY
4660: LIST
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PPUSH
4666: CALL_OW 72
4670: IFFALSE 4721
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4672: LD_ADDR_VAR 0 1
4676: PUSH
4677: LD_VAR 0 3
4681: PPUSH
4682: LD_INT 3
4684: PUSH
4685: LD_INT 54
4687: PUSH
4688: EMPTY
4689: LIST
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PPUSH
4695: CALL_OW 72
4699: PUSH
4700: FOR_IN
4701: IFFALSE 4719
// ComEnterUnit ( i , lab ) ;
4703: LD_VAR 0 1
4707: PPUSH
4708: LD_VAR 0 4
4712: PPUSH
4713: CALL_OW 120
4717: GO 4700
4719: POP
4720: POP
// end ; end ; end_of_file
4721: PPOPN 4
4723: END
// on UnitDestroyed ( un ) do begin if un = Heike then
4724: LD_VAR 0 1
4728: PUSH
4729: LD_EXP 18
4733: EQUAL
4734: IFFALSE 4743
// YouLost ( Heike ) ;
4736: LD_STRING Heike
4738: PPUSH
4739: CALL_OW 104
// if un in ruEng then
4743: LD_VAR 0 1
4747: PUSH
4748: LD_EXP 37
4752: IN
4753: IFFALSE 4771
// ruEng := ruEng diff un ;
4755: LD_ADDR_EXP 37
4759: PUSH
4760: LD_EXP 37
4764: PUSH
4765: LD_VAR 0 1
4769: DIFF
4770: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
4771: LD_VAR 0 1
4775: PUSH
4776: LD_INT 22
4778: PUSH
4779: LD_INT 2
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 21
4788: PUSH
4789: LD_INT 1
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 23
4798: PUSH
4799: LD_INT 2
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: LIST
4810: PPUSH
4811: CALL_OW 69
4815: IN
4816: IFFALSE 4832
// loseCounter := loseCounter + 1 ;
4818: LD_ADDR_EXP 6
4822: PUSH
4823: LD_EXP 6
4827: PUSH
4828: LD_INT 1
4830: PLUS
4831: ST_TO_ADDR
// end ;
4832: PPOPN 1
4834: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
4835: LD_INT 0
4837: PPUSH
4838: PPUSH
// begin if un in ruMobile then
4839: LD_VAR 0 2
4843: PUSH
4844: LD_EXP 40
4848: IN
4849: IFFALSE 5008
// begin ruMobile := ruMobile diff un ;
4851: LD_ADDR_EXP 40
4855: PUSH
4856: LD_EXP 40
4860: PUSH
4861: LD_VAR 0 2
4865: DIFF
4866: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
4867: LD_ADDR_VAR 0 5
4871: PUSH
4872: LD_VAR 0 2
4876: PPUSH
4877: CALL_OW 264
4881: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
4882: LD_ADDR_VAR 0 6
4886: PUSH
4887: LD_INT 110
4889: PPUSH
4890: LD_INT 126
4892: PPUSH
4893: CALL_OW 428
4897: ST_TO_ADDR
// if not driver or not fac then
4898: LD_VAR 0 1
4902: NOT
4903: PUSH
4904: LD_VAR 0 6
4908: NOT
4909: OR
4910: IFFALSE 4914
// exit ;
4912: GO 5008
// AddComMoveXY ( driver , 111 , 121 ) ;
4914: LD_VAR 0 1
4918: PPUSH
4919: LD_INT 111
4921: PPUSH
4922: LD_INT 121
4924: PPUSH
4925: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
4929: LD_VAR 0 1
4933: PPUSH
4934: LD_VAR 0 6
4938: PPUSH
4939: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
4943: LD_INT 35
4945: PPUSH
4946: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
4950: LD_VAR 0 1
4954: PPUSH
4955: CALL_OW 301
4959: PUSH
4960: LD_VAR 0 1
4964: PPUSH
4965: CALL_OW 310
4969: OR
4970: IFFALSE 4943
// if IsDead ( driver ) then
4972: LD_VAR 0 1
4976: PPUSH
4977: CALL_OW 301
4981: IFFALSE 4985
// exit ;
4983: GO 5008
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
4985: LD_VAR 0 6
4989: PPUSH
4990: LD_INT 21
4992: PPUSH
4993: LD_INT 1
4995: PPUSH
4996: LD_INT 1
4998: PPUSH
4999: LD_VAR 0 5
5003: PPUSH
5004: CALL_OW 185
// end ; end ;
5008: PPOPN 6
5010: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( fac ) = 3 then
5011: LD_VAR 0 2
5015: PPUSH
5016: CALL_OW 255
5020: PUSH
5021: LD_INT 3
5023: EQUAL
5024: IFFALSE 5070
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5026: LD_ADDR_EXP 40
5030: PUSH
5031: LD_EXP 40
5035: PPUSH
5036: LD_EXP 40
5040: PUSH
5041: LD_INT 1
5043: PLUS
5044: PPUSH
5045: LD_VAR 0 1
5049: PPUSH
5050: CALL_OW 1
5054: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5055: LD_VAR 0 1
5059: PPUSH
5060: LD_INT 110
5062: PPUSH
5063: LD_INT 117
5065: PPUSH
5066: CALL_OW 171
// end ; end ;
5070: PPOPN 2
5072: END
// on LeaveBuilding ( b , un ) do var barracks ;
5073: LD_INT 0
5075: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5076: LD_VAR 0 1
5080: PUSH
5081: LD_INT 130
5083: PPUSH
5084: LD_INT 17
5086: PPUSH
5087: CALL_OW 428
5091: PUSH
5092: LD_INT 138
5094: PPUSH
5095: LD_INT 22
5097: PPUSH
5098: CALL_OW 428
5102: PUSH
5103: LD_INT 123
5105: PPUSH
5106: LD_INT 17
5108: PPUSH
5109: CALL_OW 428
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: IN
5119: IFFALSE 5143
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5121: LD_VAR 0 2
5125: PPUSH
5126: LD_INT 135
5128: PPUSH
5129: LD_INT 31
5131: PPUSH
5132: CALL_OW 428
5136: PPUSH
5137: CALL_OW 180
// exit ;
5141: GO 5417
// end ; if b = HexInfo ( 135 , 31 ) then
5143: LD_VAR 0 1
5147: PUSH
5148: LD_INT 135
5150: PPUSH
5151: LD_INT 31
5153: PPUSH
5154: CALL_OW 428
5158: EQUAL
5159: IFFALSE 5231
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5161: LD_VAR 0 2
5165: PPUSH
5166: LD_INT 106
5168: PPUSH
5169: LD_INT 51
5171: PPUSH
5172: CALL_OW 428
5176: PPUSH
5177: CALL_OW 180
// if not explodeFirstDepot then
5181: LD_EXP 12
5185: NOT
5186: IFFALSE 5229
// begin explodeFirstDepot := true ;
5188: LD_ADDR_EXP 12
5192: PUSH
5193: LD_INT 1
5195: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5196: LD_INT 525
5198: PPUSH
5199: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5203: LD_INT 127
5205: PPUSH
5206: LD_INT 27
5208: PPUSH
5209: LD_INT 1
5211: PPUSH
5212: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5216: LD_INT 125
5218: PPUSH
5219: LD_INT 29
5221: PPUSH
5222: LD_INT 1
5224: PPUSH
5225: CALL_OW 453
// end ; exit ;
5229: GO 5417
// end ; if b = HexInfo ( 106 , 51 ) then
5231: LD_VAR 0 1
5235: PUSH
5236: LD_INT 106
5238: PPUSH
5239: LD_INT 51
5241: PPUSH
5242: CALL_OW 428
5246: EQUAL
5247: IFFALSE 5347
// begin AddComMoveXY ( un , 106 , 93 ) ;
5249: LD_VAR 0 2
5253: PPUSH
5254: LD_INT 106
5256: PPUSH
5257: LD_INT 93
5259: PPUSH
5260: CALL_OW 171
// if not explodeSecondDepot then
5264: LD_EXP 13
5268: NOT
5269: IFFALSE 5345
// begin explodeSecondDepot := true ;
5271: LD_ADDR_EXP 13
5275: PUSH
5276: LD_INT 1
5278: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5279: LD_INT 420
5281: PPUSH
5282: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5286: LD_INT 111
5288: PPUSH
5289: LD_INT 75
5291: PPUSH
5292: LD_INT 1
5294: PPUSH
5295: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5299: LD_INT 111
5301: PPUSH
5302: LD_INT 75
5304: PPUSH
5305: LD_INT 1
5307: PPUSH
5308: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5312: LD_INT 108
5314: PPUSH
5315: LD_INT 69
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 453
// wait ( 0 0$2 ) ;
5325: LD_INT 70
5327: PPUSH
5328: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5332: LD_INT 94
5334: PPUSH
5335: LD_INT 65
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: CALL_OW 453
// end ; exit ;
5345: GO 5417
// end ; if GetBType ( b ) = b_bunker then
5347: LD_VAR 0 1
5351: PPUSH
5352: CALL_OW 266
5356: PUSH
5357: LD_INT 32
5359: EQUAL
5360: IFFALSE 5417
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5362: LD_ADDR_VAR 0 3
5366: PUSH
5367: LD_VAR 0 2
5371: PPUSH
5372: LD_INT 5
5374: PPUSH
5375: CALL 1004 0 2
5379: ST_TO_ADDR
// if barracks then
5380: LD_VAR 0 3
5384: IFFALSE 5402
// AddComEnterUnit ( un , barracks ) else
5386: LD_VAR 0 2
5390: PPUSH
5391: LD_VAR 0 3
5395: PPUSH
5396: CALL_OW 180
5400: GO 5417
// AddComMoveXY ( un , 116 , 110 ) ;
5402: LD_VAR 0 2
5406: PPUSH
5407: LD_INT 116
5409: PPUSH
5410: LD_INT 110
5412: PPUSH
5413: CALL_OW 171
// end ; end ;
5417: PPOPN 3
5419: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5420: LD_VAR 0 1
5424: PUSH
5425: LD_EXP 23
5429: EQUAL
5430: PUSH
5431: LD_VAR 0 2
5435: PUSH
5436: LD_INT 3
5438: PUSH
5439: LD_INT 6
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: IN
5446: AND
5447: IFFALSE 5478
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5449: LD_ADDR_EXP 8
5453: PUSH
5454: LD_VAR 0 1
5458: PPUSH
5459: CALL_OW 250
5463: PUSH
5464: LD_VAR 0 1
5468: PPUSH
5469: CALL_OW 251
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: ST_TO_ADDR
// end ; end_of_file
5478: PPOPN 3
5480: END
// export function Action ; var i , un , veh , tmp , rutmp ; begin
5481: LD_INT 0
5483: PPUSH
5484: PPUSH
5485: PPUSH
5486: PPUSH
5487: PPUSH
5488: PPUSH
// InGameOn ;
5489: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5493: LD_INT 5
5495: PPUSH
5496: LD_INT 2
5498: PPUSH
5499: CALL_OW 343
// music_nat := 4 ;
5503: LD_ADDR_OWVAR 71
5507: PUSH
5508: LD_INT 4
5510: ST_TO_ADDR
// music_class := music_combat ;
5511: LD_ADDR_OWVAR 72
5515: PUSH
5516: LD_INT 1
5518: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5519: LD_INT 133
5521: PPUSH
5522: LD_INT 2
5524: PPUSH
5525: LD_INT 2
5527: PPUSH
5528: LD_INT 10
5530: PPUSH
5531: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5535: LD_INT 133
5537: PPUSH
5538: LD_INT 2
5540: PPUSH
5541: CALL_OW 86
// wait ( 0 0$1 ) ;
5545: LD_INT 35
5547: PPUSH
5548: CALL_OW 67
// uc_side := 6 ;
5552: LD_ADDR_OWVAR 20
5556: PUSH
5557: LD_INT 6
5559: ST_TO_ADDR
// uc_nation := 3 ;
5560: LD_ADDR_OWVAR 21
5564: PUSH
5565: LD_INT 3
5567: ST_TO_ADDR
// rutmp := [ ] ;
5568: LD_ADDR_VAR 0 6
5572: PUSH
5573: EMPTY
5574: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5575: LD_INT 6
5577: PPUSH
5578: LD_INT 3
5580: PPUSH
5581: LD_INT 21
5583: PPUSH
5584: LD_INT 1
5586: PPUSH
5587: LD_INT 1
5589: PPUSH
5590: LD_INT 44
5592: PPUSH
5593: LD_INT 66
5595: PPUSH
5596: CALL 336 0 7
// veh := CreateVehicle ;
5600: LD_ADDR_VAR 0 4
5604: PUSH
5605: CALL_OW 45
5609: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5610: LD_VAR 0 4
5614: PPUSH
5615: LD_INT 3
5617: PPUSH
5618: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5622: LD_VAR 0 4
5626: PPUSH
5627: LD_INT 8
5629: PPUSH
5630: LD_INT 0
5632: PPUSH
5633: CALL_OW 49
// SetLives ( veh , 500 ) ;
5637: LD_VAR 0 4
5641: PPUSH
5642: LD_INT 500
5644: PPUSH
5645: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
5649: LD_INT 0
5651: PPUSH
5652: LD_INT 3
5654: PPUSH
5655: LD_INT 3
5657: PPUSH
5658: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5662: CALL_OW 44
5666: PPUSH
5667: LD_VAR 0 4
5671: PPUSH
5672: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
5676: LD_VAR 0 4
5680: PPUSH
5681: LD_INT 133
5683: PPUSH
5684: LD_INT 11
5686: PPUSH
5687: CALL_OW 111
// rutmp := [ veh ] ;
5691: LD_ADDR_VAR 0 6
5695: PUSH
5696: LD_VAR 0 4
5700: PUSH
5701: EMPTY
5702: LIST
5703: ST_TO_ADDR
// for i := 1 to 4 do
5704: LD_ADDR_VAR 0 2
5708: PUSH
5709: DOUBLE
5710: LD_INT 1
5712: DEC
5713: ST_TO_ADDR
5714: LD_INT 4
5716: PUSH
5717: FOR_TO
5718: IFFALSE 5825
// begin PrepareHuman ( false , i , 2 ) ;
5720: LD_INT 0
5722: PPUSH
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_INT 2
5730: PPUSH
5731: CALL_OW 380
// un := CreateHuman ;
5735: LD_ADDR_VAR 0 3
5739: PUSH
5740: CALL_OW 44
5744: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5745: LD_VAR 0 3
5749: PPUSH
5750: LD_INT 3
5752: PPUSH
5753: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
5757: LD_VAR 0 3
5761: PPUSH
5762: LD_INT 8
5764: PPUSH
5765: LD_INT 0
5767: PPUSH
5768: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
5772: LD_ADDR_VAR 0 6
5776: PUSH
5777: LD_VAR 0 6
5781: PPUSH
5782: LD_VAR 0 6
5786: PUSH
5787: LD_INT 1
5789: PLUS
5790: PPUSH
5791: LD_VAR 0 3
5795: PPUSH
5796: CALL_OW 1
5800: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
5801: LD_VAR 0 3
5805: PPUSH
5806: LD_INT 133
5808: PPUSH
5809: LD_INT 11
5811: PPUSH
5812: CALL_OW 111
// wait ( 0 0$0.5 ) ;
5816: LD_INT 18
5818: PPUSH
5819: CALL_OW 67
// end ;
5823: GO 5717
5825: POP
5826: POP
// for i in rutmp do
5827: LD_ADDR_VAR 0 2
5831: PUSH
5832: LD_VAR 0 6
5836: PUSH
5837: FOR_IN
5838: IFFALSE 5887
// begin AddComMoveXY ( i , 99 , 65 ) ;
5840: LD_VAR 0 2
5844: PPUSH
5845: LD_INT 99
5847: PPUSH
5848: LD_INT 65
5850: PPUSH
5851: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
5855: LD_VAR 0 2
5859: PPUSH
5860: LD_INT 76
5862: PPUSH
5863: LD_INT 108
5865: PPUSH
5866: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
5870: LD_VAR 0 2
5874: PPUSH
5875: LD_INT 92
5877: PPUSH
5878: LD_INT 176
5880: PPUSH
5881: CALL_OW 171
// end ;
5885: GO 5837
5887: POP
5888: POP
// wait ( 0 0$10 ) ;
5889: LD_INT 350
5891: PPUSH
5892: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
5896: LD_ADDR_VAR 0 5
5900: PUSH
5901: LD_EXP 18
5905: PUSH
5906: LD_EXP 19
5910: PUSH
5911: LD_EXP 20
5915: PUSH
5916: LD_EXP 21
5920: PUSH
5921: LD_EXP 22
5925: PUSH
5926: LD_EXP 23
5930: PUSH
5931: LD_EXP 24
5935: PUSH
5936: LD_EXP 25
5940: PUSH
5941: LD_EXP 27
5945: PUSH
5946: LD_EXP 28
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: PUSH
5963: LD_EXP 29
5967: UNION
5968: ST_TO_ADDR
// tmp := tmp diff 0 ;
5969: LD_ADDR_VAR 0 5
5973: PUSH
5974: LD_VAR 0 5
5978: PUSH
5979: LD_INT 0
5981: DIFF
5982: ST_TO_ADDR
// for i in heikeVehicles do
5983: LD_ADDR_VAR 0 2
5987: PUSH
5988: LD_EXP 30
5992: PUSH
5993: FOR_IN
5994: IFFALSE 6260
// begin if not tmp then
5996: LD_VAR 0 5
6000: NOT
6001: IFFALSE 6005
// continue ;
6003: GO 5993
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6005: LD_INT 2
6007: PPUSH
6008: LD_VAR 0 2
6012: PUSH
6013: LD_INT 5
6015: ARRAY
6016: PPUSH
6017: LD_VAR 0 2
6021: PUSH
6022: LD_INT 1
6024: ARRAY
6025: PPUSH
6026: LD_VAR 0 2
6030: PUSH
6031: LD_INT 2
6033: ARRAY
6034: PPUSH
6035: LD_VAR 0 2
6039: PUSH
6040: LD_INT 3
6042: ARRAY
6043: PPUSH
6044: LD_VAR 0 2
6048: PUSH
6049: LD_INT 4
6051: ARRAY
6052: PPUSH
6053: LD_INT 34
6055: PPUSH
6056: CALL 336 0 7
// veh := CreateVehicle ;
6060: LD_ADDR_VAR 0 4
6064: PUSH
6065: CALL_OW 45
6069: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6070: LD_VAR 0 2
6074: PUSH
6075: LD_INT 4
6077: ARRAY
6078: PUSH
6079: LD_INT 51
6081: PUSH
6082: LD_INT 32
6084: PUSH
6085: LD_INT 12
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: LIST
6092: IN
6093: IFFALSE 6173
// begin if i [ 7 ] [ 1 ] then
6095: LD_VAR 0 2
6099: PUSH
6100: LD_INT 7
6102: ARRAY
6103: PUSH
6104: LD_INT 1
6106: ARRAY
6107: IFFALSE 6134
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6109: LD_VAR 0 4
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: LD_VAR 0 2
6121: PUSH
6122: LD_INT 7
6124: ARRAY
6125: PUSH
6126: LD_INT 1
6128: ARRAY
6129: PPUSH
6130: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6134: LD_VAR 0 2
6138: PUSH
6139: LD_INT 7
6141: ARRAY
6142: PUSH
6143: LD_INT 2
6145: ARRAY
6146: IFFALSE 6173
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6148: LD_VAR 0 4
6152: PPUSH
6153: LD_INT 2
6155: PPUSH
6156: LD_VAR 0 2
6160: PUSH
6161: LD_INT 7
6163: ARRAY
6164: PUSH
6165: LD_INT 2
6167: ARRAY
6168: PPUSH
6169: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6173: LD_VAR 0 4
6177: PPUSH
6178: LD_INT 3
6180: PPUSH
6181: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6185: LD_VAR 0 4
6189: PPUSH
6190: LD_INT 8
6192: PPUSH
6193: LD_INT 0
6195: PPUSH
6196: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6200: LD_VAR 0 5
6204: PUSH
6205: LD_INT 1
6207: ARRAY
6208: PPUSH
6209: LD_VAR 0 4
6213: PPUSH
6214: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6218: LD_ADDR_VAR 0 5
6222: PUSH
6223: LD_VAR 0 5
6227: PPUSH
6228: LD_INT 1
6230: PPUSH
6231: CALL_OW 3
6235: ST_TO_ADDR
// ComAgressiveMove ( veh , 133 , 7 ) ;
6236: LD_VAR 0 4
6240: PPUSH
6241: LD_INT 133
6243: PPUSH
6244: LD_INT 7
6246: PPUSH
6247: CALL_OW 114
// wait ( 0 0$1 ) ;
6251: LD_INT 35
6253: PPUSH
6254: CALL_OW 67
// end ;
6258: GO 5993
6260: POP
6261: POP
// if tmp then
6262: LD_VAR 0 5
6266: IFFALSE 6322
// for i in tmp do
6268: LD_ADDR_VAR 0 2
6272: PUSH
6273: LD_VAR 0 5
6277: PUSH
6278: FOR_IN
6279: IFFALSE 6320
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6281: LD_VAR 0 2
6285: PPUSH
6286: LD_INT 10
6288: PPUSH
6289: LD_INT 0
6291: PPUSH
6292: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6296: LD_VAR 0 2
6300: PPUSH
6301: LD_INT 146
6303: PPUSH
6304: LD_INT 7
6306: PPUSH
6307: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6311: LD_INT 18
6313: PPUSH
6314: CALL_OW 67
// end ;
6318: GO 6278
6320: POP
6321: POP
// if heikeApes then
6322: LD_EXP 31
6326: IFFALSE 6382
// for i in heikeApes do
6328: LD_ADDR_VAR 0 2
6332: PUSH
6333: LD_EXP 31
6337: PUSH
6338: FOR_IN
6339: IFFALSE 6380
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6341: LD_VAR 0 2
6345: PPUSH
6346: LD_INT 10
6348: PPUSH
6349: LD_INT 0
6351: PPUSH
6352: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6356: LD_VAR 0 2
6360: PPUSH
6361: LD_INT 146
6363: PPUSH
6364: LD_INT 7
6366: PPUSH
6367: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6371: LD_INT 18
6373: PPUSH
6374: CALL_OW 67
// end ;
6378: GO 6338
6380: POP
6381: POP
// DialogueOn ;
6382: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6386: LD_EXP 18
6390: PPUSH
6391: LD_STRING DH-outpost-a-1
6393: PPUSH
6394: CALL_OW 88
// DialogueOff ;
6398: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6402: LD_INT 133
6404: PPUSH
6405: LD_INT 2
6407: PPUSH
6408: LD_INT 2
6410: PPUSH
6411: CALL_OW 331
// InGameOff ;
6415: CALL_OW 9
// music_nat := 0 ;
6419: LD_ADDR_OWVAR 71
6423: PUSH
6424: LD_INT 0
6426: ST_TO_ADDR
// music_class := 0 ;
6427: LD_ADDR_OWVAR 72
6431: PUSH
6432: LD_INT 0
6434: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6435: LD_STRING Outposts
6437: PPUSH
6438: CALL_OW 337
// SaveForQuickRestart ;
6442: CALL_OW 22
// end ;
6446: LD_VAR 0 1
6450: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6451: LD_INT 22
6453: PUSH
6454: LD_INT 2
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 91
6463: PUSH
6464: LD_EXP 21
6468: PUSH
6469: LD_INT 20
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: LIST
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PPUSH
6481: CALL_OW 69
6485: PUSH
6486: LD_EXP 3
6490: AND
6491: PUSH
6492: LD_EXP 21
6496: PPUSH
6497: CALL_OW 302
6501: AND
6502: IFFALSE 6749
6504: GO 6506
6506: DISABLE
6507: LD_INT 0
6509: PPUSH
6510: PPUSH
6511: PPUSH
6512: PPUSH
// begin IbrahimBetrayal ;
6513: CALL 6752 0 0
// repeat wait ( 0 0$1 ) ;
6517: LD_INT 35
6519: PPUSH
6520: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6524: LD_EXP 21
6528: PPUSH
6529: CALL_OW 301
6533: PUSH
6534: LD_INT 22
6536: PUSH
6537: LD_INT 2
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 91
6546: PUSH
6547: LD_EXP 21
6551: PUSH
6552: LD_INT 6
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: LIST
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: PPUSH
6564: CALL_OW 69
6568: PUSH
6569: LD_EXP 21
6573: PPUSH
6574: CALL_OW 302
6578: AND
6579: OR
6580: IFFALSE 6517
// if IsDead ( Ibrahim ) then
6582: LD_EXP 21
6586: PPUSH
6587: CALL_OW 301
6591: IFFALSE 6595
// exit ;
6593: GO 6749
// x := GetX ( Ibrahim ) ;
6595: LD_ADDR_VAR 0 1
6599: PUSH
6600: LD_EXP 21
6604: PPUSH
6605: CALL_OW 250
6609: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
6610: LD_ADDR_VAR 0 2
6614: PUSH
6615: LD_EXP 21
6619: PPUSH
6620: CALL_OW 251
6624: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
6625: LD_ADDR_VAR 0 3
6629: PUSH
6630: LD_EXP 21
6634: PPUSH
6635: CALL_OW 254
6639: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
6640: LD_ADDR_VAR 0 4
6644: PUSH
6645: LD_EXP 21
6649: PPUSH
6650: CALL_OW 256
6654: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
6655: LD_EXP 21
6659: PPUSH
6660: CALL_OW 64
// uc_side := 2 ;
6664: LD_ADDR_OWVAR 20
6668: PUSH
6669: LD_INT 2
6671: ST_TO_ADDR
// uc_nation := 2 ;
6672: LD_ADDR_OWVAR 21
6676: PUSH
6677: LD_INT 2
6679: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
6680: LD_ADDR_EXP 21
6684: PUSH
6685: LD_STRING Ibrahim
6687: PPUSH
6688: LD_INT 0
6690: PPUSH
6691: LD_STRING 
6693: PPUSH
6694: CALL 26840 0 3
6698: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
6699: LD_EXP 21
6703: PPUSH
6704: LD_VAR 0 3
6708: PPUSH
6709: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
6713: LD_EXP 21
6717: PPUSH
6718: LD_VAR 0 1
6722: PPUSH
6723: LD_VAR 0 2
6727: PPUSH
6728: LD_INT 0
6730: PPUSH
6731: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
6735: LD_EXP 21
6739: PPUSH
6740: LD_VAR 0 4
6744: PPUSH
6745: CALL_OW 234
// end ;
6749: PPOPN 4
6751: END
// export function IbrahimBetrayal ; var i , tmp ; begin
6752: LD_INT 0
6754: PPUSH
6755: PPUSH
6756: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
6757: LD_INT 122
6759: PPUSH
6760: LD_INT 77
6762: PPUSH
6763: LD_INT 2
6765: PPUSH
6766: LD_INT 6
6768: NEG
6769: PPUSH
6770: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
6774: LD_EXP 21
6778: PPUSH
6779: LD_INT 123
6781: PPUSH
6782: LD_INT 79
6784: PPUSH
6785: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
6789: LD_EXP 21
6793: PPUSH
6794: LD_INT 125
6796: PPUSH
6797: LD_INT 82
6799: PPUSH
6800: CALL_OW 178
// wait ( 0 0$2 ) ;
6804: LD_INT 70
6806: PPUSH
6807: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
6811: LD_EXP 41
6815: PPUSH
6816: LD_EXP 21
6820: PPUSH
6821: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
6825: LD_EXP 41
6829: PPUSH
6830: LD_STRING DRum-outpost-b-3
6832: PPUSH
6833: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
6837: LD_ADDR_VAR 0 3
6841: PUSH
6842: LD_INT 125
6844: PPUSH
6845: LD_INT 76
6847: PPUSH
6848: CALL_OW 428
6852: PUSH
6853: LD_INT 125
6855: PPUSH
6856: LD_INT 79
6858: PPUSH
6859: CALL_OW 428
6863: PUSH
6864: LD_INT 125
6866: PPUSH
6867: LD_INT 82
6869: PPUSH
6870: CALL_OW 428
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: LIST
6879: ST_TO_ADDR
// for i in tmp do
6880: LD_ADDR_VAR 0 2
6884: PUSH
6885: LD_VAR 0 3
6889: PUSH
6890: FOR_IN
6891: IFFALSE 6907
// SetLives ( i , 200 ) ;
6893: LD_VAR 0 2
6897: PPUSH
6898: LD_INT 200
6900: PPUSH
6901: CALL_OW 234
6905: GO 6890
6907: POP
6908: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
6909: LD_EXP 21
6913: PPUSH
6914: LD_STRING DI-outpost-b-4
6916: PPUSH
6917: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
6921: LD_EXP 21
6925: PPUSH
6926: LD_INT 5
6928: PPUSH
6929: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
6933: LD_EXP 21
6937: PUSH
6938: LD_EXP 41
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PPUSH
6947: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
6951: LD_INT 122
6953: PPUSH
6954: LD_INT 77
6956: PPUSH
6957: LD_INT 2
6959: PPUSH
6960: CALL_OW 331
// if Givi then
6964: LD_EXP 19
6968: IFFALSE 6984
// Say ( Givi , DG-1-outpost-b-5 ) else
6970: LD_EXP 19
6974: PPUSH
6975: LD_STRING DG-1-outpost-b-5
6977: PPUSH
6978: CALL_OW 88
6982: GO 7049
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
6984: LD_EXP 29
6988: PPUSH
6989: LD_INT 26
6991: PUSH
6992: LD_INT 2
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PPUSH
6999: CALL_OW 72
7003: PUSH
7004: LD_INT 1
7006: ARRAY
7007: PPUSH
7008: LD_STRING DArf-outpost-b-a-5
7010: PPUSH
7011: CALL_OW 88
7015: NOT
7016: IFFALSE 7049
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7018: LD_EXP 29
7022: PPUSH
7023: LD_INT 26
7025: PUSH
7026: LD_INT 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: PUSH
7038: LD_INT 1
7040: ARRAY
7041: PPUSH
7042: LD_STRING DArm-outpost-b-a-5
7044: PPUSH
7045: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7049: LD_INT 35
7051: PPUSH
7052: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7056: LD_EXP 21
7060: PPUSH
7061: CALL_OW 301
7065: PUSH
7066: LD_EXP 18
7070: PPUSH
7071: LD_EXP 21
7075: PPUSH
7076: CALL_OW 296
7080: PUSH
7081: LD_INT 6
7083: LESS
7084: PUSH
7085: LD_EXP 21
7089: PPUSH
7090: CALL_OW 302
7094: AND
7095: OR
7096: IFFALSE 7049
// if IsDead ( Ibrahim ) then
7098: LD_EXP 21
7102: PPUSH
7103: CALL_OW 301
7107: IFFALSE 7123
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7109: LD_EXP 18
7113: PPUSH
7114: LD_STRING DH-ibrahimdead-1
7116: PPUSH
7117: CALL_OW 88
// exit ;
7121: GO 7164
// end ; CenterNowOnUnits ( Ibrahim ) ;
7123: LD_EXP 21
7127: PPUSH
7128: CALL_OW 87
// DialogueOn ;
7132: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7136: LD_EXP 21
7140: PPUSH
7141: LD_STRING DI-ibrahimlives-1
7143: PPUSH
7144: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7148: LD_EXP 18
7152: PPUSH
7153: LD_STRING DH-Ibrahimlives-2
7155: PPUSH
7156: CALL_OW 88
// DialogueOff ;
7160: CALL_OW 7
// end ;
7164: LD_VAR 0 1
7168: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 ] [ Difficulty ] do
7169: LD_INT 11
7171: PPUSH
7172: LD_INT 22
7174: PUSH
7175: LD_INT 2
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PPUSH
7182: CALL_OW 70
7186: PUSH
7187: LD_OWVAR 1
7191: PUSH
7192: LD_INT 18900
7194: PUSH
7195: LD_INT 16800
7197: PUSH
7198: LD_INT 16800
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: PUSH
7206: LD_OWVAR 67
7210: ARRAY
7211: GREATEREQUAL
7212: OR
7213: IFFALSE 7620
7215: GO 7217
7217: DISABLE
// begin outerAreaAchived := true ;
7218: LD_ADDR_EXP 15
7222: PUSH
7223: LD_INT 1
7225: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7226: LD_INT 700
7228: PPUSH
7229: CALL_OW 67
// DialogueOn ;
7233: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7237: LD_EXP 26
7241: PPUSH
7242: LD_STRING DShar-radio-1
7244: PPUSH
7245: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7249: LD_EXP 26
7253: PPUSH
7254: LD_STRING DShar-radio-2
7256: PPUSH
7257: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7261: LD_EXP 18
7265: PPUSH
7266: LD_STRING DH-radio-2
7268: PPUSH
7269: CALL_OW 88
// DialogueOff ;
7273: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7277: LD_STRING Gaidar
7279: PPUSH
7280: CALL_OW 337
// if Difficulty < 3 then
7284: LD_OWVAR 67
7288: PUSH
7289: LD_INT 3
7291: LESS
7292: IFFALSE 7358
// begin DialogueOn ;
7294: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7298: LD_INT 11
7300: PPUSH
7301: LD_INT 14
7303: PPUSH
7304: LD_INT 2
7306: PPUSH
7307: LD_INT 6
7309: NEG
7310: PPUSH
7311: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7315: LD_INT 11
7317: PPUSH
7318: LD_INT 14
7320: PPUSH
7321: LD_INT 2
7323: PPUSH
7324: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7328: LD_INT 11
7330: PPUSH
7331: LD_INT 14
7333: PPUSH
7334: CALL_OW 84
// dwait ( 0 0$1 ) ;
7338: LD_INT 35
7340: PPUSH
7341: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7345: LD_EXP 18
7349: PPUSH
7350: CALL_OW 87
// DialogueOff ;
7354: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7358: LD_INT 1050
7360: PUSH
7361: LD_INT 350
7363: PPUSH
7364: LD_INT 525
7366: PPUSH
7367: CALL_OW 12
7371: PUSH
7372: LD_OWVAR 67
7376: MUL
7377: PLUS
7378: PPUSH
7379: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7383: LD_INT 35
7385: PPUSH
7386: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7390: LD_INT 2
7392: PPUSH
7393: LD_INT 1
7395: PPUSH
7396: CALL_OW 428
7400: PUSH
7401: LD_INT 0
7403: EQUAL
7404: IFFALSE 7383
// SetDir ( Gaidar , 2 ) ;
7406: LD_EXP 34
7410: PPUSH
7411: LD_INT 2
7413: PPUSH
7414: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7418: LD_EXP 34
7422: PPUSH
7423: LD_INT 2
7425: PPUSH
7426: LD_INT 1
7428: PPUSH
7429: LD_INT 0
7431: PPUSH
7432: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7436: LD_EXP 34
7440: PPUSH
7441: LD_INT 19
7443: PPUSH
7444: LD_INT 24
7446: PPUSH
7447: CALL_OW 111
// AddComWait ( Gaidar , 0 0$6 ) ;
7451: LD_EXP 34
7455: PPUSH
7456: LD_INT 210
7458: PPUSH
7459: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7463: LD_EXP 34
7467: PPUSH
7468: LD_INT 38
7470: PPUSH
7471: LD_INT 47
7473: PPUSH
7474: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7478: LD_EXP 34
7482: PPUSH
7483: LD_INT 32
7485: PPUSH
7486: LD_INT 59
7488: PPUSH
7489: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
7493: LD_EXP 34
7497: PPUSH
7498: LD_INT 350
7500: PPUSH
7501: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
7505: LD_EXP 34
7509: PPUSH
7510: LD_INT 62
7512: PPUSH
7513: LD_INT 116
7515: PPUSH
7516: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
7520: LD_EXP 34
7524: PPUSH
7525: LD_INT 92
7527: PPUSH
7528: LD_INT 177
7530: PPUSH
7531: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7535: LD_INT 35
7537: PPUSH
7538: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
7542: LD_EXP 34
7546: PPUSH
7547: CALL_OW 301
7551: PUSH
7552: LD_EXP 34
7556: PPUSH
7557: LD_INT 92
7559: PPUSH
7560: LD_INT 177
7562: PPUSH
7563: CALL_OW 307
7567: OR
7568: IFFALSE 7535
// if IsAt ( Gaidar , 92 , 177 ) then
7570: LD_EXP 34
7574: PPUSH
7575: LD_INT 92
7577: PPUSH
7578: LD_INT 177
7580: PPUSH
7581: CALL_OW 307
7585: IFFALSE 7598
// begin RemoveUnit ( Gaidar ) ;
7587: LD_EXP 34
7591: PPUSH
7592: CALL_OW 64
// exit ;
7596: GO 7620
// end ; gaidarKilled := true ;
7598: LD_ADDR_EXP 14
7602: PUSH
7603: LD_INT 1
7605: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
7606: LD_STRING GaidarKilled
7608: PPUSH
7609: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
7613: LD_STRING ACH_COMMISAR
7615: PPUSH
7616: CALL_OW 543
// end ;
7620: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
7621: LD_INT 2
7623: PPUSH
7624: LD_EXP 34
7628: PPUSH
7629: CALL_OW 292
7633: IFFALSE 7650
7635: GO 7637
7637: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
7638: LD_EXP 34
7642: PPUSH
7643: LD_STRING DT-objective-1
7645: PPUSH
7646: CALL_OW 88
7650: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
7651: LD_INT 22
7653: PUSH
7654: LD_INT 2
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 2
7663: PUSH
7664: LD_INT 95
7666: PUSH
7667: LD_INT 5
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 95
7676: PUSH
7677: LD_INT 6
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: LD_INT 95
7686: PUSH
7687: LD_INT 7
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PPUSH
7704: CALL_OW 69
7708: IFFALSE 7745
7710: GO 7712
7712: DISABLE
// begin DialogueOn ;
7713: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
7717: LD_EXP 18
7721: PPUSH
7722: LD_STRING DH-outpost-last-1
7724: PPUSH
7725: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
7729: LD_EXP 33
7733: PPUSH
7734: LD_STRING DB-outpost-last-2
7736: PPUSH
7737: CALL_OW 94
// DialogueOff ;
7741: CALL_OW 7
// end ;
7745: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
7746: LD_INT 200
7748: PPUSH
7749: CALL_OW 256
7753: PUSH
7754: LD_INT 999
7756: LESS
7757: PUSH
7758: LD_INT 200
7760: PPUSH
7761: CALL_OW 255
7765: PUSH
7766: LD_INT 2
7768: EQUAL
7769: OR
7770: IFFALSE 7943
7772: GO 7774
7774: DISABLE
7775: LD_INT 0
7777: PPUSH
7778: PPUSH
// begin if not earlyEscape then
7779: LD_EXP 16
7783: NOT
7784: IFFALSE 7810
// begin SayRadio ( Burlak , DB-end-1 ) ;
7786: LD_EXP 33
7790: PPUSH
7791: LD_STRING DB-end-1
7793: PPUSH
7794: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
7798: LD_EXP 18
7802: PPUSH
7803: LD_STRING DH-end-2
7805: PPUSH
7806: CALL_OW 88
// end ; if tick <= 15 15$00 then
7810: LD_OWVAR 1
7814: PUSH
7815: LD_INT 31500
7817: LESSEQUAL
7818: IFFALSE 7827
// SetAchievement ( ACH_FIST ) ;
7820: LD_STRING ACH_FIST
7822: PPUSH
7823: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7827: LD_ADDR_VAR 0 2
7831: PUSH
7832: LD_INT 22
7834: PUSH
7835: LD_INT 3
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 3
7844: PUSH
7845: LD_INT 21
7847: PUSH
7848: LD_INT 3
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: PPUSH
7863: CALL_OW 69
7867: ST_TO_ADDR
// if not tmp then
7868: LD_VAR 0 2
7872: NOT
7873: IFFALSE 7877
// exit ;
7875: GO 7943
// for i in tmp do
7877: LD_ADDR_VAR 0 1
7881: PUSH
7882: LD_VAR 0 2
7886: PUSH
7887: FOR_IN
7888: IFFALSE 7941
// begin SetTag ( i , tEscape ) ;
7890: LD_VAR 0 1
7894: PPUSH
7895: LD_EXP 17
7899: PPUSH
7900: CALL_OW 109
// if IsInUnit ( i ) then
7904: LD_VAR 0 1
7908: PPUSH
7909: CALL_OW 310
7913: IFFALSE 7924
// ComExitBuilding ( i ) ;
7915: LD_VAR 0 1
7919: PPUSH
7920: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
7924: LD_VAR 0 1
7928: PPUSH
7929: LD_INT 92
7931: PPUSH
7932: LD_INT 177
7934: PPUSH
7935: CALL_OW 171
// end ;
7939: GO 7887
7941: POP
7942: POP
// end ;
7943: PPOPN 2
7945: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
7946: LD_INT 4
7948: PPUSH
7949: LD_INT 22
7951: PUSH
7952: LD_INT 2
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PPUSH
7959: CALL_OW 70
7963: PUSH
7964: LD_EXP 15
7968: NOT
7969: AND
7970: PUSH
7971: LD_EXP 27
7975: PPUSH
7976: CALL_OW 302
7980: AND
7981: IFFALSE 8221
7983: GO 7985
7985: DISABLE
// begin DialogueOn ;
7986: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
7990: LD_INT 111
7992: PPUSH
7993: LD_INT 54
7995: PPUSH
7996: LD_INT 2
7998: PPUSH
7999: LD_INT 16
8001: NEG
8002: PPUSH
8003: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8007: LD_INT 111
8009: PPUSH
8010: LD_INT 53
8012: PPUSH
8013: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8017: LD_INT 10
8019: PPUSH
8020: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8024: LD_EXP 27
8028: PPUSH
8029: LD_STRING DKs-Hannibal-1
8031: PPUSH
8032: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8036: LD_EXP 27
8040: PPUSH
8041: LD_STRING DKs-Hannibal-2
8043: PPUSH
8044: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8048: LD_EXP 27
8052: PPUSH
8053: LD_STRING DKs-Hannibal-3
8055: PPUSH
8056: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8060: LD_EXP 27
8064: PPUSH
8065: LD_STRING DKs-Hannibal-4
8067: PPUSH
8068: CALL_OW 88
// dwait ( 0 0$1 ) ;
8072: LD_INT 35
8074: PPUSH
8075: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8079: LD_INT 111
8081: PPUSH
8082: LD_INT 54
8084: PPUSH
8085: LD_INT 2
8087: PPUSH
8088: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8092: LD_INT 173
8094: PPUSH
8095: LD_INT 76
8097: PPUSH
8098: LD_INT 2
8100: PPUSH
8101: LD_INT 12
8103: NEG
8104: PPUSH
8105: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8109: LD_INT 173
8111: PPUSH
8112: LD_INT 76
8114: PPUSH
8115: LD_INT 2
8117: PPUSH
8118: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8122: LD_INT 173
8124: PPUSH
8125: LD_INT 76
8127: PPUSH
8128: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8132: LD_EXP 27
8136: PPUSH
8137: LD_STRING DKs-Hannibal-5
8139: PPUSH
8140: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8144: LD_EXP 22
8148: PUSH
8149: LD_INT 22
8151: PUSH
8152: LD_INT 2
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: PUSH
8159: LD_INT 34
8161: PUSH
8162: LD_INT 26
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PPUSH
8173: CALL_OW 69
8177: NOT
8178: AND
8179: IFFALSE 8217
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8181: LD_EXP 22
8185: PPUSH
8186: LD_STRING DKam-Hannibal-a-6
8188: PPUSH
8189: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8193: LD_EXP 22
8197: PPUSH
8198: LD_STRING DKam-Hannibal-a-7
8200: PPUSH
8201: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8205: LD_EXP 19
8209: PPUSH
8210: LD_STRING DG-Hannibal-a-8
8212: PPUSH
8213: CALL_OW 88
// end ; DialogueOff ;
8217: CALL_OW 7
// end ;
8221: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8222: LD_INT 225
8224: PPUSH
8225: CALL_OW 302
8229: PUSH
8230: LD_INT 200
8232: PPUSH
8233: CALL_OW 302
8237: AND
8238: PUSH
8239: LD_INT 12
8241: PPUSH
8242: LD_INT 21
8244: PUSH
8245: LD_INT 3
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PPUSH
8252: CALL_OW 70
8256: PUSH
8257: LD_INT 2
8259: GREATER
8260: AND
8261: PUSH
8262: LD_INT 13
8264: PPUSH
8265: LD_INT 22
8267: PUSH
8268: LD_INT 2
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PPUSH
8275: CALL_OW 70
8279: PUSH
8280: LD_INT 3
8282: GREATER
8283: AND
8284: IFFALSE 8297
8286: GO 8288
8288: DISABLE
// hannibalPath := true ;
8289: LD_ADDR_EXP 9
8293: PUSH
8294: LD_INT 1
8296: ST_TO_ADDR
8297: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8298: LD_EXP 9
8302: PUSH
8303: LD_INT 6
8305: PPUSH
8306: LD_INT 22
8308: PUSH
8309: LD_INT 2
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PPUSH
8316: CALL_OW 70
8320: AND
8321: IFFALSE 8666
8323: GO 8325
8325: DISABLE
8326: LD_INT 0
8328: PPUSH
8329: PPUSH
8330: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8331: LD_ADDR_VAR 0 2
8335: PUSH
8336: LD_INT 6
8338: PPUSH
8339: LD_INT 22
8341: PUSH
8342: LD_INT 2
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 70
8353: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8354: LD_ADDR_VAR 0 3
8358: PUSH
8359: LD_VAR 0 2
8363: PPUSH
8364: LD_INT 34
8366: PUSH
8367: LD_INT 26
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PPUSH
8374: CALL_OW 72
8378: PUSH
8379: LD_INT 0
8381: GREATER
8382: ST_TO_ADDR
// DialogueOn ;
8383: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8387: LD_EXP 18
8391: PPUSH
8392: LD_STRING DH-Cleverattack-1
8394: PPUSH
8395: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8399: LD_EXP 18
8403: PPUSH
8404: LD_STRING DH-Cleverattack-2
8406: PPUSH
8407: CALL_OW 88
// if hasFlameThrower then
8411: LD_VAR 0 3
8415: IFFALSE 8443
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8417: LD_EXP 33
8421: PPUSH
8422: LD_STRING DB-Cleverattack-3
8424: PPUSH
8425: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8429: LD_EXP 18
8433: PPUSH
8434: LD_STRING DH-Cleverattack-4
8436: PPUSH
8437: CALL_OW 88
// end else
8441: GO 8467
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
8443: LD_EXP 33
8447: PPUSH
8448: LD_STRING DB-Cleverattack-a-3
8450: PPUSH
8451: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
8455: LD_EXP 18
8459: PPUSH
8460: LD_STRING DH-Cleverattack-a-4
8462: PPUSH
8463: CALL_OW 88
// end ; DialogueOff ;
8467: CALL_OW 7
// if not hasFlameThrower then
8471: LD_VAR 0 3
8475: NOT
8476: IFFALSE 8480
// exit ;
8478: GO 8666
// earlyEscape := true ;
8480: LD_ADDR_EXP 16
8484: PUSH
8485: LD_INT 1
8487: ST_TO_ADDR
// wait ( 0 0$4 ) ;
8488: LD_INT 140
8490: PPUSH
8491: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
8495: LD_ADDR_VAR 0 2
8499: PUSH
8500: LD_INT 22
8502: PUSH
8503: LD_INT 3
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 2
8512: PUSH
8513: LD_INT 25
8515: PUSH
8516: LD_INT 1
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: LD_INT 25
8525: PUSH
8526: LD_INT 2
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 25
8535: PUSH
8536: LD_INT 4
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PPUSH
8553: CALL_OW 69
8557: PUSH
8558: LD_EXP 21
8562: PUSH
8563: LD_EXP 35
8567: PUSH
8568: LD_EXP 34
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: DIFF
8578: ST_TO_ADDR
// for i in tmp do
8579: LD_ADDR_VAR 0 1
8583: PUSH
8584: LD_VAR 0 2
8588: PUSH
8589: FOR_IN
8590: IFFALSE 8664
// begin if Prob ( 40 + 10 * Difficulty ) then
8592: LD_INT 40
8594: PUSH
8595: LD_INT 10
8597: PUSH
8598: LD_OWVAR 67
8602: MUL
8603: PLUS
8604: PPUSH
8605: CALL_OW 13
8609: IFFALSE 8613
// continue ;
8611: GO 8589
// SetTag ( i , tEscape ) ;
8613: LD_VAR 0 1
8617: PPUSH
8618: LD_EXP 17
8622: PPUSH
8623: CALL_OW 109
// if IsInUnit ( i ) then
8627: LD_VAR 0 1
8631: PPUSH
8632: CALL_OW 310
8636: IFFALSE 8647
// ComExitBuilding ( i ) ;
8638: LD_VAR 0 1
8642: PPUSH
8643: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8647: LD_VAR 0 1
8651: PPUSH
8652: LD_INT 92
8654: PPUSH
8655: LD_INT 177
8657: PPUSH
8658: CALL_OW 171
// end ;
8662: GO 8589
8664: POP
8665: POP
// end ;
8666: PPOPN 3
8668: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
8669: LD_INT 9
8671: PPUSH
8672: LD_INT 2
8674: PUSH
8675: LD_INT 22
8677: PUSH
8678: LD_INT 3
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PUSH
8685: LD_INT 22
8687: PUSH
8688: LD_INT 6
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: LIST
8699: PPUSH
8700: CALL_OW 70
8704: IFFALSE 8802
8706: GO 8708
8708: DISABLE
8709: LD_INT 0
8711: PPUSH
// begin enable ;
8712: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
8713: LD_ADDR_VAR 0 1
8717: PUSH
8718: LD_INT 9
8720: PPUSH
8721: LD_INT 2
8723: PUSH
8724: LD_INT 22
8726: PUSH
8727: LD_INT 3
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 22
8736: PUSH
8737: LD_INT 6
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: LIST
8748: PPUSH
8749: CALL_OW 70
8753: PUSH
8754: FOR_IN
8755: IFFALSE 8800
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
8757: LD_VAR 0 1
8761: PPUSH
8762: CALL_OW 110
8766: PUSH
8767: LD_EXP 17
8771: EQUAL
8772: PUSH
8773: LD_VAR 0 1
8777: PPUSH
8778: CALL_OW 255
8782: PUSH
8783: LD_INT 6
8785: EQUAL
8786: OR
8787: IFFALSE 8798
// RemoveUnit ( i ) ;
8789: LD_VAR 0 1
8793: PPUSH
8794: CALL_OW 64
8798: GO 8754
8800: POP
8801: POP
// end ;
8802: PPOPN 1
8804: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
8805: LD_EXP 23
8809: PUSH
8810: LD_EXP 23
8814: PPUSH
8815: CALL_OW 256
8819: PUSH
8820: LD_INT 3
8822: LESS
8823: AND
8824: IFFALSE 8870
8826: GO 8828
8828: DISABLE
// begin DialogueOn ;
8829: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
8833: LD_EXP 23
8837: PPUSH
8838: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
8842: LD_EXP 23
8846: PPUSH
8847: LD_STRING DK-Kkilled-1
8849: PPUSH
8850: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
8854: LD_EXP 18
8858: PPUSH
8859: LD_STRING DH-Kkilled-2
8861: PPUSH
8862: CALL_OW 88
// DialogueOff ;
8866: CALL_OW 7
// end ;
8870: END
// every 0 0$1 trigger kaiaKilledByRussian do
8871: LD_EXP 8
8875: IFFALSE 8892
8877: GO 8879
8879: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
8880: LD_EXP 18
8884: PPUSH
8885: LD_STRING DH-Kkilled-3
8887: PPUSH
8888: CALL_OW 88
8892: END
// every 0 0$1 trigger tick >= 22 22$00 do
8893: LD_OWVAR 1
8897: PUSH
8898: LD_INT 46200
8900: GREATEREQUAL
8901: IFFALSE 8938
8903: GO 8905
8905: DISABLE
// begin DialogueOn ;
8906: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
8910: LD_EXP 26
8914: PPUSH
8915: LD_STRING DShar-slow-1
8917: PPUSH
8918: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
8922: LD_EXP 26
8926: PPUSH
8927: LD_STRING DShar-slow-2
8929: PPUSH
8930: CALL_OW 94
// DialogueOff ;
8934: CALL_OW 7
// end ;
8938: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 ] [ Difficulty ] do
8939: LD_OWVAR 1
8943: PUSH
8944: LD_INT 84000
8946: PUSH
8947: LD_INT 75600
8949: PUSH
8950: LD_INT 67200
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: PUSH
8958: LD_OWVAR 67
8962: ARRAY
8963: GREATEREQUAL
8964: IFFALSE 9008
8966: GO 8968
8968: DISABLE
// begin DialogueOn ;
8969: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
8973: LD_EXP 26
8977: PPUSH
8978: LD_STRING DShar-fail-1
8980: PPUSH
8981: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
8985: LD_EXP 26
8989: PPUSH
8990: LD_STRING DShar-fail-2
8992: PPUSH
8993: CALL_OW 94
// DialogueOff ;
8997: CALL_OW 7
// YouLost ( Time ) ;
9001: LD_STRING Time
9003: PPUSH
9004: CALL_OW 104
// end ;
9008: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9009: LD_INT 22
9011: PUSH
9012: LD_INT 3
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: LD_INT 2
9021: PUSH
9022: LD_INT 30
9024: PUSH
9025: LD_INT 1
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PUSH
9032: LD_INT 30
9034: PUSH
9035: LD_INT 0
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: LIST
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 69
9055: PUSH
9056: LD_INT 0
9058: EQUAL
9059: IFFALSE 9550
9061: GO 9063
9063: DISABLE
9064: LD_INT 0
9066: PPUSH
// begin if ( tick + gameTime ) <= [ 75 75$00 , 70 70$00 , 65 65$00 ] [ Difficulty ] then
9067: LD_OWVAR 1
9071: PUSH
9072: LD_EXP 5
9076: PLUS
9077: PUSH
9078: LD_INT 157500
9080: PUSH
9081: LD_INT 147000
9083: PUSH
9084: LD_INT 136500
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: LIST
9091: PUSH
9092: LD_OWVAR 67
9096: ARRAY
9097: LESSEQUAL
9098: IFFALSE 9112
// AddMedal ( med1 , 1 ) else
9100: LD_STRING med1
9102: PPUSH
9103: LD_INT 1
9105: PPUSH
9106: CALL_OW 101
9110: GO 9123
// AddMedal ( med1 , - 1 ) ;
9112: LD_STRING med1
9114: PPUSH
9115: LD_INT 1
9117: NEG
9118: PPUSH
9119: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 ] [ Difficulty ] ) then
9123: LD_EXP 7
9127: PUSH
9128: LD_INT 3
9130: GREATEREQUAL
9131: PUSH
9132: LD_EXP 11
9136: MUL
9137: PUSH
9138: LD_EXP 9
9142: MUL
9143: PUSH
9144: LD_EXP 6
9148: PUSH
9149: LD_INT 6
9151: PUSH
9152: LD_INT 5
9154: PUSH
9155: LD_INT 4
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: LIST
9162: PUSH
9163: LD_OWVAR 67
9167: ARRAY
9168: LESS
9169: MUL
9170: IFFALSE 9184
// AddMedal ( med2 , 1 ) else
9172: LD_STRING med2
9174: PPUSH
9175: LD_INT 1
9177: PPUSH
9178: CALL_OW 101
9182: GO 9195
// AddMedal ( med2 , - 1 ) ;
9184: LD_STRING med2
9186: PPUSH
9187: LD_INT 1
9189: NEG
9190: PPUSH
9191: CALL_OW 101
// if gaidarKilled then
9195: LD_EXP 14
9199: IFFALSE 9213
// AddMedal ( med3 , 1 ) else
9201: LD_STRING med3
9203: PPUSH
9204: LD_INT 1
9206: PPUSH
9207: CALL_OW 101
9211: GO 9224
// AddMedal ( med3 , - 1 ) ;
9213: LD_STRING med3
9215: PPUSH
9216: LD_INT 1
9218: NEG
9219: PPUSH
9220: CALL_OW 101
// GiveMedals ( MAIN ) ;
9224: LD_STRING MAIN
9226: PPUSH
9227: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9231: LD_INT 22
9233: PUSH
9234: LD_INT 2
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: LD_INT 3
9243: PUSH
9244: LD_INT 23
9246: PUSH
9247: LD_INT 0
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PPUSH
9262: CALL_OW 69
9266: PPUSH
9267: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9271: LD_EXP 18
9275: PPUSH
9276: LD_STRING 04_2_Heike
9278: PPUSH
9279: CALL_OW 38
// if Aviradze then
9283: LD_EXP 28
9287: IFFALSE 9301
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9289: LD_EXP 28
9293: PPUSH
9294: LD_STRING 04_2_Aviradze
9296: PPUSH
9297: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9301: LD_EXP 21
9305: PUSH
9306: LD_EXP 21
9310: PPUSH
9311: CALL_OW 255
9315: PUSH
9316: LD_INT 2
9318: EQUAL
9319: AND
9320: IFFALSE 9350
// begin if ibrahimOnRuSide then
9322: LD_EXP 3
9326: IFFALSE 9338
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9328: LD_INT 1
9330: PPUSH
9331: LD_STRING 04_2_IbrahimJoined
9333: PPUSH
9334: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9338: LD_EXP 21
9342: PPUSH
9343: LD_STRING 04_2_Ibrahim
9345: PPUSH
9346: CALL_OW 38
// end ; if Kamil then
9350: LD_EXP 22
9354: IFFALSE 9368
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
9356: LD_EXP 22
9360: PPUSH
9361: LD_STRING 04_2_Kamil
9363: PPUSH
9364: CALL_OW 38
// if Sophia then
9368: LD_EXP 24
9372: IFFALSE 9386
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
9374: LD_EXP 24
9378: PPUSH
9379: LD_STRING 04_2_Sophia
9381: PPUSH
9382: CALL_OW 38
// if Kaia then
9386: LD_EXP 23
9390: IFFALSE 9404
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
9392: LD_EXP 23
9396: PPUSH
9397: LD_STRING 04_2_Kaia
9399: PPUSH
9400: CALL_OW 38
// if Givi then
9404: LD_EXP 19
9408: IFFALSE 9422
// SaveCharacters ( Givi , 04_2_Givi ) ;
9410: LD_EXP 19
9414: PPUSH
9415: LD_STRING 04_2_Givi
9417: PPUSH
9418: CALL_OW 38
// if Mike then
9422: LD_EXP 20
9426: IFFALSE 9440
// SaveCharacters ( Mike , 04_2_Mike ) ;
9428: LD_EXP 20
9432: PPUSH
9433: LD_STRING 04_2_Mike
9435: PPUSH
9436: CALL_OW 38
// if Markov then
9440: LD_EXP 25
9444: IFFALSE 9458
// SaveCharacters ( Markov , 04_2_Markov ) ;
9446: LD_EXP 25
9450: PPUSH
9451: LD_STRING 04_2_Markov
9453: PPUSH
9454: CALL_OW 38
// if Kurt then
9458: LD_EXP 27
9462: IFFALSE 9476
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
9464: LD_EXP 27
9468: PPUSH
9469: LD_STRING 04_2_Kurt
9471: PPUSH
9472: CALL_OW 38
// if heikeSecondSquad then
9476: LD_EXP 29
9480: IFFALSE 9494
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
9482: LD_EXP 29
9486: PPUSH
9487: LD_STRING 04_2_others
9489: PPUSH
9490: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
9494: LD_ADDR_VAR 0 1
9498: PUSH
9499: LD_INT 22
9501: PUSH
9502: LD_INT 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 23
9511: PUSH
9512: LD_INT 0
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PPUSH
9523: CALL_OW 69
9527: ST_TO_ADDR
// if tmp then
9528: LD_VAR 0 1
9532: IFFALSE 9546
// SaveCharacters ( tmp , 04_2_apes ) ;
9534: LD_VAR 0 1
9538: PPUSH
9539: LD_STRING 04_2_apes
9541: PPUSH
9542: CALL_OW 38
// YouWin ;
9546: CALL_OW 103
// end ; end_of_file
9550: PPOPN 1
9552: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
9553: LD_VAR 0 2
9557: PUSH
9558: LD_INT 100
9560: EQUAL
9561: IFFALSE 10510
// begin if not StreamModeActive then
9563: LD_EXP 42
9567: NOT
9568: IFFALSE 9578
// StreamModeActive := true ;
9570: LD_ADDR_EXP 42
9574: PUSH
9575: LD_INT 1
9577: ST_TO_ADDR
// if p3 = 0 then
9578: LD_VAR 0 3
9582: PUSH
9583: LD_INT 0
9585: EQUAL
9586: IFFALSE 9592
// InitStreamMode ;
9588: CALL 10668 0 0
// if p3 = 1 then
9592: LD_VAR 0 3
9596: PUSH
9597: LD_INT 1
9599: EQUAL
9600: IFFALSE 9610
// sRocket := true ;
9602: LD_ADDR_EXP 47
9606: PUSH
9607: LD_INT 1
9609: ST_TO_ADDR
// if p3 = 2 then
9610: LD_VAR 0 3
9614: PUSH
9615: LD_INT 2
9617: EQUAL
9618: IFFALSE 9628
// sSpeed := true ;
9620: LD_ADDR_EXP 46
9624: PUSH
9625: LD_INT 1
9627: ST_TO_ADDR
// if p3 = 3 then
9628: LD_VAR 0 3
9632: PUSH
9633: LD_INT 3
9635: EQUAL
9636: IFFALSE 9646
// sEngine := true ;
9638: LD_ADDR_EXP 48
9642: PUSH
9643: LD_INT 1
9645: ST_TO_ADDR
// if p3 = 4 then
9646: LD_VAR 0 3
9650: PUSH
9651: LD_INT 4
9653: EQUAL
9654: IFFALSE 9664
// sSpec := true ;
9656: LD_ADDR_EXP 45
9660: PUSH
9661: LD_INT 1
9663: ST_TO_ADDR
// if p3 = 5 then
9664: LD_VAR 0 3
9668: PUSH
9669: LD_INT 5
9671: EQUAL
9672: IFFALSE 9682
// sLevel := true ;
9674: LD_ADDR_EXP 49
9678: PUSH
9679: LD_INT 1
9681: ST_TO_ADDR
// if p3 = 6 then
9682: LD_VAR 0 3
9686: PUSH
9687: LD_INT 6
9689: EQUAL
9690: IFFALSE 9700
// sArmoury := true ;
9692: LD_ADDR_EXP 50
9696: PUSH
9697: LD_INT 1
9699: ST_TO_ADDR
// if p3 = 7 then
9700: LD_VAR 0 3
9704: PUSH
9705: LD_INT 7
9707: EQUAL
9708: IFFALSE 9718
// sRadar := true ;
9710: LD_ADDR_EXP 51
9714: PUSH
9715: LD_INT 1
9717: ST_TO_ADDR
// if p3 = 8 then
9718: LD_VAR 0 3
9722: PUSH
9723: LD_INT 8
9725: EQUAL
9726: IFFALSE 9736
// sBunker := true ;
9728: LD_ADDR_EXP 52
9732: PUSH
9733: LD_INT 1
9735: ST_TO_ADDR
// if p3 = 9 then
9736: LD_VAR 0 3
9740: PUSH
9741: LD_INT 9
9743: EQUAL
9744: IFFALSE 9754
// sHack := true ;
9746: LD_ADDR_EXP 53
9750: PUSH
9751: LD_INT 1
9753: ST_TO_ADDR
// if p3 = 10 then
9754: LD_VAR 0 3
9758: PUSH
9759: LD_INT 10
9761: EQUAL
9762: IFFALSE 9772
// sFire := true ;
9764: LD_ADDR_EXP 54
9768: PUSH
9769: LD_INT 1
9771: ST_TO_ADDR
// if p3 = 11 then
9772: LD_VAR 0 3
9776: PUSH
9777: LD_INT 11
9779: EQUAL
9780: IFFALSE 9790
// sRefresh := true ;
9782: LD_ADDR_EXP 55
9786: PUSH
9787: LD_INT 1
9789: ST_TO_ADDR
// if p3 = 12 then
9790: LD_VAR 0 3
9794: PUSH
9795: LD_INT 12
9797: EQUAL
9798: IFFALSE 9808
// sExp := true ;
9800: LD_ADDR_EXP 56
9804: PUSH
9805: LD_INT 1
9807: ST_TO_ADDR
// if p3 = 13 then
9808: LD_VAR 0 3
9812: PUSH
9813: LD_INT 13
9815: EQUAL
9816: IFFALSE 9826
// sDepot := true ;
9818: LD_ADDR_EXP 57
9822: PUSH
9823: LD_INT 1
9825: ST_TO_ADDR
// if p3 = 14 then
9826: LD_VAR 0 3
9830: PUSH
9831: LD_INT 14
9833: EQUAL
9834: IFFALSE 9844
// sFlag := true ;
9836: LD_ADDR_EXP 58
9840: PUSH
9841: LD_INT 1
9843: ST_TO_ADDR
// if p3 = 15 then
9844: LD_VAR 0 3
9848: PUSH
9849: LD_INT 15
9851: EQUAL
9852: IFFALSE 9862
// sKamikadze := true ;
9854: LD_ADDR_EXP 66
9858: PUSH
9859: LD_INT 1
9861: ST_TO_ADDR
// if p3 = 16 then
9862: LD_VAR 0 3
9866: PUSH
9867: LD_INT 16
9869: EQUAL
9870: IFFALSE 9880
// sTroll := true ;
9872: LD_ADDR_EXP 67
9876: PUSH
9877: LD_INT 1
9879: ST_TO_ADDR
// if p3 = 17 then
9880: LD_VAR 0 3
9884: PUSH
9885: LD_INT 17
9887: EQUAL
9888: IFFALSE 9898
// sSlow := true ;
9890: LD_ADDR_EXP 68
9894: PUSH
9895: LD_INT 1
9897: ST_TO_ADDR
// if p3 = 18 then
9898: LD_VAR 0 3
9902: PUSH
9903: LD_INT 18
9905: EQUAL
9906: IFFALSE 9916
// sLack := true ;
9908: LD_ADDR_EXP 69
9912: PUSH
9913: LD_INT 1
9915: ST_TO_ADDR
// if p3 = 19 then
9916: LD_VAR 0 3
9920: PUSH
9921: LD_INT 19
9923: EQUAL
9924: IFFALSE 9934
// sTank := true ;
9926: LD_ADDR_EXP 71
9930: PUSH
9931: LD_INT 1
9933: ST_TO_ADDR
// if p3 = 20 then
9934: LD_VAR 0 3
9938: PUSH
9939: LD_INT 20
9941: EQUAL
9942: IFFALSE 9952
// sRemote := true ;
9944: LD_ADDR_EXP 72
9948: PUSH
9949: LD_INT 1
9951: ST_TO_ADDR
// if p3 = 21 then
9952: LD_VAR 0 3
9956: PUSH
9957: LD_INT 21
9959: EQUAL
9960: IFFALSE 9970
// sPowell := true ;
9962: LD_ADDR_EXP 73
9966: PUSH
9967: LD_INT 1
9969: ST_TO_ADDR
// if p3 = 22 then
9970: LD_VAR 0 3
9974: PUSH
9975: LD_INT 22
9977: EQUAL
9978: IFFALSE 9988
// sTeleport := true ;
9980: LD_ADDR_EXP 76
9984: PUSH
9985: LD_INT 1
9987: ST_TO_ADDR
// if p3 = 23 then
9988: LD_VAR 0 3
9992: PUSH
9993: LD_INT 23
9995: EQUAL
9996: IFFALSE 10006
// sOilTower := true ;
9998: LD_ADDR_EXP 78
10002: PUSH
10003: LD_INT 1
10005: ST_TO_ADDR
// if p3 = 24 then
10006: LD_VAR 0 3
10010: PUSH
10011: LD_INT 24
10013: EQUAL
10014: IFFALSE 10024
// sShovel := true ;
10016: LD_ADDR_EXP 79
10020: PUSH
10021: LD_INT 1
10023: ST_TO_ADDR
// if p3 = 25 then
10024: LD_VAR 0 3
10028: PUSH
10029: LD_INT 25
10031: EQUAL
10032: IFFALSE 10042
// sSheik := true ;
10034: LD_ADDR_EXP 80
10038: PUSH
10039: LD_INT 1
10041: ST_TO_ADDR
// if p3 = 26 then
10042: LD_VAR 0 3
10046: PUSH
10047: LD_INT 26
10049: EQUAL
10050: IFFALSE 10060
// sEarthquake := true ;
10052: LD_ADDR_EXP 82
10056: PUSH
10057: LD_INT 1
10059: ST_TO_ADDR
// if p3 = 27 then
10060: LD_VAR 0 3
10064: PUSH
10065: LD_INT 27
10067: EQUAL
10068: IFFALSE 10078
// sAI := true ;
10070: LD_ADDR_EXP 83
10074: PUSH
10075: LD_INT 1
10077: ST_TO_ADDR
// if p3 = 28 then
10078: LD_VAR 0 3
10082: PUSH
10083: LD_INT 28
10085: EQUAL
10086: IFFALSE 10096
// sCargo := true ;
10088: LD_ADDR_EXP 86
10092: PUSH
10093: LD_INT 1
10095: ST_TO_ADDR
// if p3 = 29 then
10096: LD_VAR 0 3
10100: PUSH
10101: LD_INT 29
10103: EQUAL
10104: IFFALSE 10114
// sDLaser := true ;
10106: LD_ADDR_EXP 87
10110: PUSH
10111: LD_INT 1
10113: ST_TO_ADDR
// if p3 = 30 then
10114: LD_VAR 0 3
10118: PUSH
10119: LD_INT 30
10121: EQUAL
10122: IFFALSE 10132
// sExchange := true ;
10124: LD_ADDR_EXP 88
10128: PUSH
10129: LD_INT 1
10131: ST_TO_ADDR
// if p3 = 31 then
10132: LD_VAR 0 3
10136: PUSH
10137: LD_INT 31
10139: EQUAL
10140: IFFALSE 10150
// sFac := true ;
10142: LD_ADDR_EXP 89
10146: PUSH
10147: LD_INT 1
10149: ST_TO_ADDR
// if p3 = 32 then
10150: LD_VAR 0 3
10154: PUSH
10155: LD_INT 32
10157: EQUAL
10158: IFFALSE 10168
// sPower := true ;
10160: LD_ADDR_EXP 90
10164: PUSH
10165: LD_INT 1
10167: ST_TO_ADDR
// if p3 = 33 then
10168: LD_VAR 0 3
10172: PUSH
10173: LD_INT 33
10175: EQUAL
10176: IFFALSE 10186
// sRandom := true ;
10178: LD_ADDR_EXP 91
10182: PUSH
10183: LD_INT 1
10185: ST_TO_ADDR
// if p3 = 34 then
10186: LD_VAR 0 3
10190: PUSH
10191: LD_INT 34
10193: EQUAL
10194: IFFALSE 10204
// sShield := true ;
10196: LD_ADDR_EXP 92
10200: PUSH
10201: LD_INT 1
10203: ST_TO_ADDR
// if p3 = 35 then
10204: LD_VAR 0 3
10208: PUSH
10209: LD_INT 35
10211: EQUAL
10212: IFFALSE 10222
// sTime := true ;
10214: LD_ADDR_EXP 93
10218: PUSH
10219: LD_INT 1
10221: ST_TO_ADDR
// if p3 = 36 then
10222: LD_VAR 0 3
10226: PUSH
10227: LD_INT 36
10229: EQUAL
10230: IFFALSE 10240
// sTools := true ;
10232: LD_ADDR_EXP 94
10236: PUSH
10237: LD_INT 1
10239: ST_TO_ADDR
// if p3 = 101 then
10240: LD_VAR 0 3
10244: PUSH
10245: LD_INT 101
10247: EQUAL
10248: IFFALSE 10258
// sSold := true ;
10250: LD_ADDR_EXP 59
10254: PUSH
10255: LD_INT 1
10257: ST_TO_ADDR
// if p3 = 102 then
10258: LD_VAR 0 3
10262: PUSH
10263: LD_INT 102
10265: EQUAL
10266: IFFALSE 10276
// sDiff := true ;
10268: LD_ADDR_EXP 60
10272: PUSH
10273: LD_INT 1
10275: ST_TO_ADDR
// if p3 = 103 then
10276: LD_VAR 0 3
10280: PUSH
10281: LD_INT 103
10283: EQUAL
10284: IFFALSE 10294
// sFog := true ;
10286: LD_ADDR_EXP 63
10290: PUSH
10291: LD_INT 1
10293: ST_TO_ADDR
// if p3 = 104 then
10294: LD_VAR 0 3
10298: PUSH
10299: LD_INT 104
10301: EQUAL
10302: IFFALSE 10312
// sReset := true ;
10304: LD_ADDR_EXP 64
10308: PUSH
10309: LD_INT 1
10311: ST_TO_ADDR
// if p3 = 105 then
10312: LD_VAR 0 3
10316: PUSH
10317: LD_INT 105
10319: EQUAL
10320: IFFALSE 10330
// sSun := true ;
10322: LD_ADDR_EXP 65
10326: PUSH
10327: LD_INT 1
10329: ST_TO_ADDR
// if p3 = 106 then
10330: LD_VAR 0 3
10334: PUSH
10335: LD_INT 106
10337: EQUAL
10338: IFFALSE 10348
// sTiger := true ;
10340: LD_ADDR_EXP 61
10344: PUSH
10345: LD_INT 1
10347: ST_TO_ADDR
// if p3 = 107 then
10348: LD_VAR 0 3
10352: PUSH
10353: LD_INT 107
10355: EQUAL
10356: IFFALSE 10366
// sBomb := true ;
10358: LD_ADDR_EXP 62
10362: PUSH
10363: LD_INT 1
10365: ST_TO_ADDR
// if p3 = 108 then
10366: LD_VAR 0 3
10370: PUSH
10371: LD_INT 108
10373: EQUAL
10374: IFFALSE 10384
// sWound := true ;
10376: LD_ADDR_EXP 70
10380: PUSH
10381: LD_INT 1
10383: ST_TO_ADDR
// if p3 = 109 then
10384: LD_VAR 0 3
10388: PUSH
10389: LD_INT 109
10391: EQUAL
10392: IFFALSE 10402
// sBetray := true ;
10394: LD_ADDR_EXP 74
10398: PUSH
10399: LD_INT 1
10401: ST_TO_ADDR
// if p3 = 110 then
10402: LD_VAR 0 3
10406: PUSH
10407: LD_INT 110
10409: EQUAL
10410: IFFALSE 10420
// sContamin := true ;
10412: LD_ADDR_EXP 75
10416: PUSH
10417: LD_INT 1
10419: ST_TO_ADDR
// if p3 = 111 then
10420: LD_VAR 0 3
10424: PUSH
10425: LD_INT 111
10427: EQUAL
10428: IFFALSE 10438
// sOil := true ;
10430: LD_ADDR_EXP 77
10434: PUSH
10435: LD_INT 1
10437: ST_TO_ADDR
// if p3 = 112 then
10438: LD_VAR 0 3
10442: PUSH
10443: LD_INT 112
10445: EQUAL
10446: IFFALSE 10456
// sStu := true ;
10448: LD_ADDR_EXP 81
10452: PUSH
10453: LD_INT 1
10455: ST_TO_ADDR
// if p3 = 113 then
10456: LD_VAR 0 3
10460: PUSH
10461: LD_INT 113
10463: EQUAL
10464: IFFALSE 10474
// sBazooka := true ;
10466: LD_ADDR_EXP 84
10470: PUSH
10471: LD_INT 1
10473: ST_TO_ADDR
// if p3 = 114 then
10474: LD_VAR 0 3
10478: PUSH
10479: LD_INT 114
10481: EQUAL
10482: IFFALSE 10492
// sMortar := true ;
10484: LD_ADDR_EXP 85
10488: PUSH
10489: LD_INT 1
10491: ST_TO_ADDR
// if p3 = 115 then
10492: LD_VAR 0 3
10496: PUSH
10497: LD_INT 115
10499: EQUAL
10500: IFFALSE 10510
// sRanger := true ;
10502: LD_ADDR_EXP 95
10506: PUSH
10507: LD_INT 1
10509: ST_TO_ADDR
// end ; if p2 = 101 then
10510: LD_VAR 0 2
10514: PUSH
10515: LD_INT 101
10517: EQUAL
10518: IFFALSE 10646
// begin case p3 of 1 :
10520: LD_VAR 0 3
10524: PUSH
10525: LD_INT 1
10527: DOUBLE
10528: EQUAL
10529: IFTRUE 10533
10531: GO 10540
10533: POP
// hHackUnlimitedResources ; 2 :
10534: CALL 21681 0 0
10538: GO 10646
10540: LD_INT 2
10542: DOUBLE
10543: EQUAL
10544: IFTRUE 10548
10546: GO 10555
10548: POP
// hHackSetLevel10 ; 3 :
10549: CALL 21814 0 0
10553: GO 10646
10555: LD_INT 3
10557: DOUBLE
10558: EQUAL
10559: IFTRUE 10563
10561: GO 10570
10563: POP
// hHackSetLevel10YourUnits ; 4 :
10564: CALL 21899 0 0
10568: GO 10646
10570: LD_INT 4
10572: DOUBLE
10573: EQUAL
10574: IFTRUE 10578
10576: GO 10585
10578: POP
// hHackInvincible ; 5 :
10579: CALL 22347 0 0
10583: GO 10646
10585: LD_INT 5
10587: DOUBLE
10588: EQUAL
10589: IFTRUE 10593
10591: GO 10600
10593: POP
// hHackInvisible ; 6 :
10594: CALL 22458 0 0
10598: GO 10646
10600: LD_INT 6
10602: DOUBLE
10603: EQUAL
10604: IFTRUE 10608
10606: GO 10615
10608: POP
// hHackChangeYourSide ; 7 :
10609: CALL 22515 0 0
10613: GO 10646
10615: LD_INT 7
10617: DOUBLE
10618: EQUAL
10619: IFTRUE 10623
10621: GO 10630
10623: POP
// hHackChangeUnitSide ; 8 :
10624: CALL 22557 0 0
10628: GO 10646
10630: LD_INT 8
10632: DOUBLE
10633: EQUAL
10634: IFTRUE 10638
10636: GO 10645
10638: POP
// hHackFog ; end ;
10639: CALL 22658 0 0
10643: GO 10646
10645: POP
// end ; end ;
10646: PPOPN 6
10648: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
10649: GO 10651
10651: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10652: LD_STRING initStreamRollete();
10654: PPUSH
10655: CALL_OW 559
// InitStreamMode ;
10659: CALL 10668 0 0
// DefineStreamItems ( ) ;
10663: CALL 11108 0 0
// end ;
10667: END
// function InitStreamMode ; begin
10668: LD_INT 0
10670: PPUSH
// streamModeActive := false ;
10671: LD_ADDR_EXP 42
10675: PUSH
10676: LD_INT 0
10678: ST_TO_ADDR
// normalCounter := 36 ;
10679: LD_ADDR_EXP 43
10683: PUSH
10684: LD_INT 36
10686: ST_TO_ADDR
// hardcoreCounter := 16 ;
10687: LD_ADDR_EXP 44
10691: PUSH
10692: LD_INT 16
10694: ST_TO_ADDR
// sRocket := false ;
10695: LD_ADDR_EXP 47
10699: PUSH
10700: LD_INT 0
10702: ST_TO_ADDR
// sSpeed := false ;
10703: LD_ADDR_EXP 46
10707: PUSH
10708: LD_INT 0
10710: ST_TO_ADDR
// sEngine := false ;
10711: LD_ADDR_EXP 48
10715: PUSH
10716: LD_INT 0
10718: ST_TO_ADDR
// sSpec := false ;
10719: LD_ADDR_EXP 45
10723: PUSH
10724: LD_INT 0
10726: ST_TO_ADDR
// sLevel := false ;
10727: LD_ADDR_EXP 49
10731: PUSH
10732: LD_INT 0
10734: ST_TO_ADDR
// sArmoury := false ;
10735: LD_ADDR_EXP 50
10739: PUSH
10740: LD_INT 0
10742: ST_TO_ADDR
// sRadar := false ;
10743: LD_ADDR_EXP 51
10747: PUSH
10748: LD_INT 0
10750: ST_TO_ADDR
// sBunker := false ;
10751: LD_ADDR_EXP 52
10755: PUSH
10756: LD_INT 0
10758: ST_TO_ADDR
// sHack := false ;
10759: LD_ADDR_EXP 53
10763: PUSH
10764: LD_INT 0
10766: ST_TO_ADDR
// sFire := false ;
10767: LD_ADDR_EXP 54
10771: PUSH
10772: LD_INT 0
10774: ST_TO_ADDR
// sRefresh := false ;
10775: LD_ADDR_EXP 55
10779: PUSH
10780: LD_INT 0
10782: ST_TO_ADDR
// sExp := false ;
10783: LD_ADDR_EXP 56
10787: PUSH
10788: LD_INT 0
10790: ST_TO_ADDR
// sDepot := false ;
10791: LD_ADDR_EXP 57
10795: PUSH
10796: LD_INT 0
10798: ST_TO_ADDR
// sFlag := false ;
10799: LD_ADDR_EXP 58
10803: PUSH
10804: LD_INT 0
10806: ST_TO_ADDR
// sKamikadze := false ;
10807: LD_ADDR_EXP 66
10811: PUSH
10812: LD_INT 0
10814: ST_TO_ADDR
// sTroll := false ;
10815: LD_ADDR_EXP 67
10819: PUSH
10820: LD_INT 0
10822: ST_TO_ADDR
// sSlow := false ;
10823: LD_ADDR_EXP 68
10827: PUSH
10828: LD_INT 0
10830: ST_TO_ADDR
// sLack := false ;
10831: LD_ADDR_EXP 69
10835: PUSH
10836: LD_INT 0
10838: ST_TO_ADDR
// sTank := false ;
10839: LD_ADDR_EXP 71
10843: PUSH
10844: LD_INT 0
10846: ST_TO_ADDR
// sRemote := false ;
10847: LD_ADDR_EXP 72
10851: PUSH
10852: LD_INT 0
10854: ST_TO_ADDR
// sPowell := false ;
10855: LD_ADDR_EXP 73
10859: PUSH
10860: LD_INT 0
10862: ST_TO_ADDR
// sTeleport := false ;
10863: LD_ADDR_EXP 76
10867: PUSH
10868: LD_INT 0
10870: ST_TO_ADDR
// sOilTower := false ;
10871: LD_ADDR_EXP 78
10875: PUSH
10876: LD_INT 0
10878: ST_TO_ADDR
// sShovel := false ;
10879: LD_ADDR_EXP 79
10883: PUSH
10884: LD_INT 0
10886: ST_TO_ADDR
// sSheik := false ;
10887: LD_ADDR_EXP 80
10891: PUSH
10892: LD_INT 0
10894: ST_TO_ADDR
// sEarthquake := false ;
10895: LD_ADDR_EXP 82
10899: PUSH
10900: LD_INT 0
10902: ST_TO_ADDR
// sAI := false ;
10903: LD_ADDR_EXP 83
10907: PUSH
10908: LD_INT 0
10910: ST_TO_ADDR
// sCargo := false ;
10911: LD_ADDR_EXP 86
10915: PUSH
10916: LD_INT 0
10918: ST_TO_ADDR
// sDLaser := false ;
10919: LD_ADDR_EXP 87
10923: PUSH
10924: LD_INT 0
10926: ST_TO_ADDR
// sExchange := false ;
10927: LD_ADDR_EXP 88
10931: PUSH
10932: LD_INT 0
10934: ST_TO_ADDR
// sFac := false ;
10935: LD_ADDR_EXP 89
10939: PUSH
10940: LD_INT 0
10942: ST_TO_ADDR
// sPower := false ;
10943: LD_ADDR_EXP 90
10947: PUSH
10948: LD_INT 0
10950: ST_TO_ADDR
// sRandom := false ;
10951: LD_ADDR_EXP 91
10955: PUSH
10956: LD_INT 0
10958: ST_TO_ADDR
// sShield := false ;
10959: LD_ADDR_EXP 92
10963: PUSH
10964: LD_INT 0
10966: ST_TO_ADDR
// sTime := false ;
10967: LD_ADDR_EXP 93
10971: PUSH
10972: LD_INT 0
10974: ST_TO_ADDR
// sTools := false ;
10975: LD_ADDR_EXP 94
10979: PUSH
10980: LD_INT 0
10982: ST_TO_ADDR
// sSold := false ;
10983: LD_ADDR_EXP 59
10987: PUSH
10988: LD_INT 0
10990: ST_TO_ADDR
// sDiff := false ;
10991: LD_ADDR_EXP 60
10995: PUSH
10996: LD_INT 0
10998: ST_TO_ADDR
// sFog := false ;
10999: LD_ADDR_EXP 63
11003: PUSH
11004: LD_INT 0
11006: ST_TO_ADDR
// sReset := false ;
11007: LD_ADDR_EXP 64
11011: PUSH
11012: LD_INT 0
11014: ST_TO_ADDR
// sSun := false ;
11015: LD_ADDR_EXP 65
11019: PUSH
11020: LD_INT 0
11022: ST_TO_ADDR
// sTiger := false ;
11023: LD_ADDR_EXP 61
11027: PUSH
11028: LD_INT 0
11030: ST_TO_ADDR
// sBomb := false ;
11031: LD_ADDR_EXP 62
11035: PUSH
11036: LD_INT 0
11038: ST_TO_ADDR
// sWound := false ;
11039: LD_ADDR_EXP 70
11043: PUSH
11044: LD_INT 0
11046: ST_TO_ADDR
// sBetray := false ;
11047: LD_ADDR_EXP 74
11051: PUSH
11052: LD_INT 0
11054: ST_TO_ADDR
// sContamin := false ;
11055: LD_ADDR_EXP 75
11059: PUSH
11060: LD_INT 0
11062: ST_TO_ADDR
// sOil := false ;
11063: LD_ADDR_EXP 77
11067: PUSH
11068: LD_INT 0
11070: ST_TO_ADDR
// sStu := false ;
11071: LD_ADDR_EXP 81
11075: PUSH
11076: LD_INT 0
11078: ST_TO_ADDR
// sBazooka := false ;
11079: LD_ADDR_EXP 84
11083: PUSH
11084: LD_INT 0
11086: ST_TO_ADDR
// sMortar := false ;
11087: LD_ADDR_EXP 85
11091: PUSH
11092: LD_INT 0
11094: ST_TO_ADDR
// sRanger := false ;
11095: LD_ADDR_EXP 95
11099: PUSH
11100: LD_INT 0
11102: ST_TO_ADDR
// end ;
11103: LD_VAR 0 1
11107: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11108: LD_INT 0
11110: PPUSH
11111: PPUSH
11112: PPUSH
11113: PPUSH
11114: PPUSH
// result := [ ] ;
11115: LD_ADDR_VAR 0 1
11119: PUSH
11120: EMPTY
11121: ST_TO_ADDR
// if campaign_id = 1 then
11122: LD_OWVAR 69
11126: PUSH
11127: LD_INT 1
11129: EQUAL
11130: IFFALSE 14068
// begin case mission_number of 1 :
11132: LD_OWVAR 70
11136: PUSH
11137: LD_INT 1
11139: DOUBLE
11140: EQUAL
11141: IFTRUE 11145
11143: GO 11209
11145: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11146: LD_ADDR_VAR 0 1
11150: PUSH
11151: LD_INT 2
11153: PUSH
11154: LD_INT 4
11156: PUSH
11157: LD_INT 11
11159: PUSH
11160: LD_INT 12
11162: PUSH
11163: LD_INT 15
11165: PUSH
11166: LD_INT 16
11168: PUSH
11169: LD_INT 22
11171: PUSH
11172: LD_INT 23
11174: PUSH
11175: LD_INT 26
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: PUSH
11189: LD_INT 101
11191: PUSH
11192: LD_INT 102
11194: PUSH
11195: LD_INT 106
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: ST_TO_ADDR
11207: GO 14066
11209: LD_INT 2
11211: DOUBLE
11212: EQUAL
11213: IFTRUE 11217
11215: GO 11289
11217: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11218: LD_ADDR_VAR 0 1
11222: PUSH
11223: LD_INT 2
11225: PUSH
11226: LD_INT 4
11228: PUSH
11229: LD_INT 11
11231: PUSH
11232: LD_INT 12
11234: PUSH
11235: LD_INT 15
11237: PUSH
11238: LD_INT 16
11240: PUSH
11241: LD_INT 22
11243: PUSH
11244: LD_INT 23
11246: PUSH
11247: LD_INT 26
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 101
11263: PUSH
11264: LD_INT 102
11266: PUSH
11267: LD_INT 105
11269: PUSH
11270: LD_INT 106
11272: PUSH
11273: LD_INT 108
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: ST_TO_ADDR
11287: GO 14066
11289: LD_INT 3
11291: DOUBLE
11292: EQUAL
11293: IFTRUE 11297
11295: GO 11373
11297: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11298: LD_ADDR_VAR 0 1
11302: PUSH
11303: LD_INT 2
11305: PUSH
11306: LD_INT 4
11308: PUSH
11309: LD_INT 5
11311: PUSH
11312: LD_INT 11
11314: PUSH
11315: LD_INT 12
11317: PUSH
11318: LD_INT 15
11320: PUSH
11321: LD_INT 16
11323: PUSH
11324: LD_INT 22
11326: PUSH
11327: LD_INT 26
11329: PUSH
11330: LD_INT 36
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: PUSH
11345: LD_INT 101
11347: PUSH
11348: LD_INT 102
11350: PUSH
11351: LD_INT 105
11353: PUSH
11354: LD_INT 106
11356: PUSH
11357: LD_INT 108
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: ST_TO_ADDR
11371: GO 14066
11373: LD_INT 4
11375: DOUBLE
11376: EQUAL
11377: IFTRUE 11381
11379: GO 11465
11381: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11382: LD_ADDR_VAR 0 1
11386: PUSH
11387: LD_INT 2
11389: PUSH
11390: LD_INT 4
11392: PUSH
11393: LD_INT 5
11395: PUSH
11396: LD_INT 8
11398: PUSH
11399: LD_INT 11
11401: PUSH
11402: LD_INT 12
11404: PUSH
11405: LD_INT 15
11407: PUSH
11408: LD_INT 16
11410: PUSH
11411: LD_INT 22
11413: PUSH
11414: LD_INT 23
11416: PUSH
11417: LD_INT 26
11419: PUSH
11420: LD_INT 36
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: PUSH
11437: LD_INT 101
11439: PUSH
11440: LD_INT 102
11442: PUSH
11443: LD_INT 105
11445: PUSH
11446: LD_INT 106
11448: PUSH
11449: LD_INT 108
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: ST_TO_ADDR
11463: GO 14066
11465: LD_INT 5
11467: DOUBLE
11468: EQUAL
11469: IFTRUE 11473
11471: GO 11573
11473: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11474: LD_ADDR_VAR 0 1
11478: PUSH
11479: LD_INT 2
11481: PUSH
11482: LD_INT 4
11484: PUSH
11485: LD_INT 5
11487: PUSH
11488: LD_INT 6
11490: PUSH
11491: LD_INT 8
11493: PUSH
11494: LD_INT 11
11496: PUSH
11497: LD_INT 12
11499: PUSH
11500: LD_INT 15
11502: PUSH
11503: LD_INT 16
11505: PUSH
11506: LD_INT 22
11508: PUSH
11509: LD_INT 23
11511: PUSH
11512: LD_INT 25
11514: PUSH
11515: LD_INT 26
11517: PUSH
11518: LD_INT 36
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: PUSH
11537: LD_INT 101
11539: PUSH
11540: LD_INT 102
11542: PUSH
11543: LD_INT 105
11545: PUSH
11546: LD_INT 106
11548: PUSH
11549: LD_INT 108
11551: PUSH
11552: LD_INT 109
11554: PUSH
11555: LD_INT 112
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: ST_TO_ADDR
11571: GO 14066
11573: LD_INT 6
11575: DOUBLE
11576: EQUAL
11577: IFTRUE 11581
11579: GO 11701
11581: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11582: LD_ADDR_VAR 0 1
11586: PUSH
11587: LD_INT 2
11589: PUSH
11590: LD_INT 4
11592: PUSH
11593: LD_INT 5
11595: PUSH
11596: LD_INT 6
11598: PUSH
11599: LD_INT 8
11601: PUSH
11602: LD_INT 11
11604: PUSH
11605: LD_INT 12
11607: PUSH
11608: LD_INT 15
11610: PUSH
11611: LD_INT 16
11613: PUSH
11614: LD_INT 20
11616: PUSH
11617: LD_INT 21
11619: PUSH
11620: LD_INT 22
11622: PUSH
11623: LD_INT 23
11625: PUSH
11626: LD_INT 25
11628: PUSH
11629: LD_INT 26
11631: PUSH
11632: LD_INT 30
11634: PUSH
11635: LD_INT 31
11637: PUSH
11638: LD_INT 32
11640: PUSH
11641: LD_INT 36
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 101
11667: PUSH
11668: LD_INT 102
11670: PUSH
11671: LD_INT 105
11673: PUSH
11674: LD_INT 106
11676: PUSH
11677: LD_INT 108
11679: PUSH
11680: LD_INT 109
11682: PUSH
11683: LD_INT 112
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: ST_TO_ADDR
11699: GO 14066
11701: LD_INT 7
11703: DOUBLE
11704: EQUAL
11705: IFTRUE 11709
11707: GO 11809
11709: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
11710: LD_ADDR_VAR 0 1
11714: PUSH
11715: LD_INT 2
11717: PUSH
11718: LD_INT 4
11720: PUSH
11721: LD_INT 5
11723: PUSH
11724: LD_INT 7
11726: PUSH
11727: LD_INT 11
11729: PUSH
11730: LD_INT 12
11732: PUSH
11733: LD_INT 15
11735: PUSH
11736: LD_INT 16
11738: PUSH
11739: LD_INT 20
11741: PUSH
11742: LD_INT 21
11744: PUSH
11745: LD_INT 22
11747: PUSH
11748: LD_INT 23
11750: PUSH
11751: LD_INT 25
11753: PUSH
11754: LD_INT 26
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 101
11775: PUSH
11776: LD_INT 102
11778: PUSH
11779: LD_INT 103
11781: PUSH
11782: LD_INT 105
11784: PUSH
11785: LD_INT 106
11787: PUSH
11788: LD_INT 108
11790: PUSH
11791: LD_INT 112
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: ST_TO_ADDR
11807: GO 14066
11809: LD_INT 8
11811: DOUBLE
11812: EQUAL
11813: IFTRUE 11817
11815: GO 11945
11817: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11818: LD_ADDR_VAR 0 1
11822: PUSH
11823: LD_INT 2
11825: PUSH
11826: LD_INT 4
11828: PUSH
11829: LD_INT 5
11831: PUSH
11832: LD_INT 6
11834: PUSH
11835: LD_INT 7
11837: PUSH
11838: LD_INT 8
11840: PUSH
11841: LD_INT 11
11843: PUSH
11844: LD_INT 12
11846: PUSH
11847: LD_INT 15
11849: PUSH
11850: LD_INT 16
11852: PUSH
11853: LD_INT 20
11855: PUSH
11856: LD_INT 21
11858: PUSH
11859: LD_INT 22
11861: PUSH
11862: LD_INT 23
11864: PUSH
11865: LD_INT 25
11867: PUSH
11868: LD_INT 26
11870: PUSH
11871: LD_INT 30
11873: PUSH
11874: LD_INT 31
11876: PUSH
11877: LD_INT 32
11879: PUSH
11880: LD_INT 36
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: PUSH
11905: LD_INT 101
11907: PUSH
11908: LD_INT 102
11910: PUSH
11911: LD_INT 103
11913: PUSH
11914: LD_INT 105
11916: PUSH
11917: LD_INT 106
11919: PUSH
11920: LD_INT 108
11922: PUSH
11923: LD_INT 109
11925: PUSH
11926: LD_INT 112
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: ST_TO_ADDR
11943: GO 14066
11945: LD_INT 9
11947: DOUBLE
11948: EQUAL
11949: IFTRUE 11953
11951: GO 12089
11953: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
11954: LD_ADDR_VAR 0 1
11958: PUSH
11959: LD_INT 2
11961: PUSH
11962: LD_INT 4
11964: PUSH
11965: LD_INT 5
11967: PUSH
11968: LD_INT 6
11970: PUSH
11971: LD_INT 7
11973: PUSH
11974: LD_INT 8
11976: PUSH
11977: LD_INT 11
11979: PUSH
11980: LD_INT 12
11982: PUSH
11983: LD_INT 15
11985: PUSH
11986: LD_INT 16
11988: PUSH
11989: LD_INT 20
11991: PUSH
11992: LD_INT 21
11994: PUSH
11995: LD_INT 22
11997: PUSH
11998: LD_INT 23
12000: PUSH
12001: LD_INT 25
12003: PUSH
12004: LD_INT 26
12006: PUSH
12007: LD_INT 28
12009: PUSH
12010: LD_INT 30
12012: PUSH
12013: LD_INT 31
12015: PUSH
12016: LD_INT 32
12018: PUSH
12019: LD_INT 36
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 101
12047: PUSH
12048: LD_INT 102
12050: PUSH
12051: LD_INT 103
12053: PUSH
12054: LD_INT 105
12056: PUSH
12057: LD_INT 106
12059: PUSH
12060: LD_INT 108
12062: PUSH
12063: LD_INT 109
12065: PUSH
12066: LD_INT 112
12068: PUSH
12069: LD_INT 114
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: ST_TO_ADDR
12087: GO 14066
12089: LD_INT 10
12091: DOUBLE
12092: EQUAL
12093: IFTRUE 12097
12095: GO 12281
12097: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12098: LD_ADDR_VAR 0 1
12102: PUSH
12103: LD_INT 2
12105: PUSH
12106: LD_INT 4
12108: PUSH
12109: LD_INT 5
12111: PUSH
12112: LD_INT 6
12114: PUSH
12115: LD_INT 7
12117: PUSH
12118: LD_INT 8
12120: PUSH
12121: LD_INT 9
12123: PUSH
12124: LD_INT 10
12126: PUSH
12127: LD_INT 11
12129: PUSH
12130: LD_INT 12
12132: PUSH
12133: LD_INT 13
12135: PUSH
12136: LD_INT 14
12138: PUSH
12139: LD_INT 15
12141: PUSH
12142: LD_INT 16
12144: PUSH
12145: LD_INT 17
12147: PUSH
12148: LD_INT 18
12150: PUSH
12151: LD_INT 19
12153: PUSH
12154: LD_INT 20
12156: PUSH
12157: LD_INT 21
12159: PUSH
12160: LD_INT 22
12162: PUSH
12163: LD_INT 23
12165: PUSH
12166: LD_INT 24
12168: PUSH
12169: LD_INT 25
12171: PUSH
12172: LD_INT 26
12174: PUSH
12175: LD_INT 28
12177: PUSH
12178: LD_INT 30
12180: PUSH
12181: LD_INT 31
12183: PUSH
12184: LD_INT 32
12186: PUSH
12187: LD_INT 36
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 101
12223: PUSH
12224: LD_INT 102
12226: PUSH
12227: LD_INT 103
12229: PUSH
12230: LD_INT 104
12232: PUSH
12233: LD_INT 105
12235: PUSH
12236: LD_INT 106
12238: PUSH
12239: LD_INT 107
12241: PUSH
12242: LD_INT 108
12244: PUSH
12245: LD_INT 109
12247: PUSH
12248: LD_INT 110
12250: PUSH
12251: LD_INT 111
12253: PUSH
12254: LD_INT 112
12256: PUSH
12257: LD_INT 114
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: ST_TO_ADDR
12279: GO 14066
12281: LD_INT 11
12283: DOUBLE
12284: EQUAL
12285: IFTRUE 12289
12287: GO 12481
12289: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12290: LD_ADDR_VAR 0 1
12294: PUSH
12295: LD_INT 2
12297: PUSH
12298: LD_INT 3
12300: PUSH
12301: LD_INT 4
12303: PUSH
12304: LD_INT 5
12306: PUSH
12307: LD_INT 6
12309: PUSH
12310: LD_INT 7
12312: PUSH
12313: LD_INT 8
12315: PUSH
12316: LD_INT 9
12318: PUSH
12319: LD_INT 10
12321: PUSH
12322: LD_INT 11
12324: PUSH
12325: LD_INT 12
12327: PUSH
12328: LD_INT 13
12330: PUSH
12331: LD_INT 14
12333: PUSH
12334: LD_INT 15
12336: PUSH
12337: LD_INT 16
12339: PUSH
12340: LD_INT 17
12342: PUSH
12343: LD_INT 18
12345: PUSH
12346: LD_INT 19
12348: PUSH
12349: LD_INT 20
12351: PUSH
12352: LD_INT 21
12354: PUSH
12355: LD_INT 22
12357: PUSH
12358: LD_INT 23
12360: PUSH
12361: LD_INT 24
12363: PUSH
12364: LD_INT 25
12366: PUSH
12367: LD_INT 26
12369: PUSH
12370: LD_INT 28
12372: PUSH
12373: LD_INT 30
12375: PUSH
12376: LD_INT 31
12378: PUSH
12379: LD_INT 32
12381: PUSH
12382: LD_INT 34
12384: PUSH
12385: LD_INT 36
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 101
12423: PUSH
12424: LD_INT 102
12426: PUSH
12427: LD_INT 103
12429: PUSH
12430: LD_INT 104
12432: PUSH
12433: LD_INT 105
12435: PUSH
12436: LD_INT 106
12438: PUSH
12439: LD_INT 107
12441: PUSH
12442: LD_INT 108
12444: PUSH
12445: LD_INT 109
12447: PUSH
12448: LD_INT 110
12450: PUSH
12451: LD_INT 111
12453: PUSH
12454: LD_INT 112
12456: PUSH
12457: LD_INT 114
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: ST_TO_ADDR
12479: GO 14066
12481: LD_INT 12
12483: DOUBLE
12484: EQUAL
12485: IFTRUE 12489
12487: GO 12697
12489: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12490: LD_ADDR_VAR 0 1
12494: PUSH
12495: LD_INT 1
12497: PUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 3
12503: PUSH
12504: LD_INT 4
12506: PUSH
12507: LD_INT 5
12509: PUSH
12510: LD_INT 6
12512: PUSH
12513: LD_INT 7
12515: PUSH
12516: LD_INT 8
12518: PUSH
12519: LD_INT 9
12521: PUSH
12522: LD_INT 10
12524: PUSH
12525: LD_INT 11
12527: PUSH
12528: LD_INT 12
12530: PUSH
12531: LD_INT 13
12533: PUSH
12534: LD_INT 14
12536: PUSH
12537: LD_INT 15
12539: PUSH
12540: LD_INT 16
12542: PUSH
12543: LD_INT 17
12545: PUSH
12546: LD_INT 18
12548: PUSH
12549: LD_INT 19
12551: PUSH
12552: LD_INT 20
12554: PUSH
12555: LD_INT 21
12557: PUSH
12558: LD_INT 22
12560: PUSH
12561: LD_INT 23
12563: PUSH
12564: LD_INT 24
12566: PUSH
12567: LD_INT 25
12569: PUSH
12570: LD_INT 26
12572: PUSH
12573: LD_INT 27
12575: PUSH
12576: LD_INT 28
12578: PUSH
12579: LD_INT 30
12581: PUSH
12582: LD_INT 31
12584: PUSH
12585: LD_INT 32
12587: PUSH
12588: LD_INT 33
12590: PUSH
12591: LD_INT 34
12593: PUSH
12594: LD_INT 36
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: PUSH
12633: LD_INT 101
12635: PUSH
12636: LD_INT 102
12638: PUSH
12639: LD_INT 103
12641: PUSH
12642: LD_INT 104
12644: PUSH
12645: LD_INT 105
12647: PUSH
12648: LD_INT 106
12650: PUSH
12651: LD_INT 107
12653: PUSH
12654: LD_INT 108
12656: PUSH
12657: LD_INT 109
12659: PUSH
12660: LD_INT 110
12662: PUSH
12663: LD_INT 111
12665: PUSH
12666: LD_INT 112
12668: PUSH
12669: LD_INT 113
12671: PUSH
12672: LD_INT 114
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: ST_TO_ADDR
12695: GO 14066
12697: LD_INT 13
12699: DOUBLE
12700: EQUAL
12701: IFTRUE 12705
12703: GO 12901
12705: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
12706: LD_ADDR_VAR 0 1
12710: PUSH
12711: LD_INT 1
12713: PUSH
12714: LD_INT 2
12716: PUSH
12717: LD_INT 3
12719: PUSH
12720: LD_INT 4
12722: PUSH
12723: LD_INT 5
12725: PUSH
12726: LD_INT 8
12728: PUSH
12729: LD_INT 9
12731: PUSH
12732: LD_INT 10
12734: PUSH
12735: LD_INT 11
12737: PUSH
12738: LD_INT 12
12740: PUSH
12741: LD_INT 14
12743: PUSH
12744: LD_INT 15
12746: PUSH
12747: LD_INT 16
12749: PUSH
12750: LD_INT 17
12752: PUSH
12753: LD_INT 18
12755: PUSH
12756: LD_INT 19
12758: PUSH
12759: LD_INT 20
12761: PUSH
12762: LD_INT 21
12764: PUSH
12765: LD_INT 22
12767: PUSH
12768: LD_INT 23
12770: PUSH
12771: LD_INT 24
12773: PUSH
12774: LD_INT 25
12776: PUSH
12777: LD_INT 26
12779: PUSH
12780: LD_INT 27
12782: PUSH
12783: LD_INT 28
12785: PUSH
12786: LD_INT 30
12788: PUSH
12789: LD_INT 31
12791: PUSH
12792: LD_INT 32
12794: PUSH
12795: LD_INT 33
12797: PUSH
12798: LD_INT 34
12800: PUSH
12801: LD_INT 36
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: PUSH
12837: LD_INT 101
12839: PUSH
12840: LD_INT 102
12842: PUSH
12843: LD_INT 103
12845: PUSH
12846: LD_INT 104
12848: PUSH
12849: LD_INT 105
12851: PUSH
12852: LD_INT 106
12854: PUSH
12855: LD_INT 107
12857: PUSH
12858: LD_INT 108
12860: PUSH
12861: LD_INT 109
12863: PUSH
12864: LD_INT 110
12866: PUSH
12867: LD_INT 111
12869: PUSH
12870: LD_INT 112
12872: PUSH
12873: LD_INT 113
12875: PUSH
12876: LD_INT 114
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: ST_TO_ADDR
12899: GO 14066
12901: LD_INT 14
12903: DOUBLE
12904: EQUAL
12905: IFTRUE 12909
12907: GO 13121
12909: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
12910: LD_ADDR_VAR 0 1
12914: PUSH
12915: LD_INT 1
12917: PUSH
12918: LD_INT 2
12920: PUSH
12921: LD_INT 3
12923: PUSH
12924: LD_INT 4
12926: PUSH
12927: LD_INT 5
12929: PUSH
12930: LD_INT 6
12932: PUSH
12933: LD_INT 7
12935: PUSH
12936: LD_INT 8
12938: PUSH
12939: LD_INT 9
12941: PUSH
12942: LD_INT 10
12944: PUSH
12945: LD_INT 11
12947: PUSH
12948: LD_INT 12
12950: PUSH
12951: LD_INT 13
12953: PUSH
12954: LD_INT 14
12956: PUSH
12957: LD_INT 15
12959: PUSH
12960: LD_INT 16
12962: PUSH
12963: LD_INT 17
12965: PUSH
12966: LD_INT 18
12968: PUSH
12969: LD_INT 19
12971: PUSH
12972: LD_INT 20
12974: PUSH
12975: LD_INT 21
12977: PUSH
12978: LD_INT 22
12980: PUSH
12981: LD_INT 23
12983: PUSH
12984: LD_INT 24
12986: PUSH
12987: LD_INT 25
12989: PUSH
12990: LD_INT 26
12992: PUSH
12993: LD_INT 27
12995: PUSH
12996: LD_INT 28
12998: PUSH
12999: LD_INT 29
13001: PUSH
13002: LD_INT 30
13004: PUSH
13005: LD_INT 31
13007: PUSH
13008: LD_INT 32
13010: PUSH
13011: LD_INT 33
13013: PUSH
13014: LD_INT 34
13016: PUSH
13017: LD_INT 36
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 101
13059: PUSH
13060: LD_INT 102
13062: PUSH
13063: LD_INT 103
13065: PUSH
13066: LD_INT 104
13068: PUSH
13069: LD_INT 105
13071: PUSH
13072: LD_INT 106
13074: PUSH
13075: LD_INT 107
13077: PUSH
13078: LD_INT 108
13080: PUSH
13081: LD_INT 109
13083: PUSH
13084: LD_INT 110
13086: PUSH
13087: LD_INT 111
13089: PUSH
13090: LD_INT 112
13092: PUSH
13093: LD_INT 113
13095: PUSH
13096: LD_INT 114
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: ST_TO_ADDR
13119: GO 14066
13121: LD_INT 15
13123: DOUBLE
13124: EQUAL
13125: IFTRUE 13129
13127: GO 13341
13129: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13130: LD_ADDR_VAR 0 1
13134: PUSH
13135: LD_INT 1
13137: PUSH
13138: LD_INT 2
13140: PUSH
13141: LD_INT 3
13143: PUSH
13144: LD_INT 4
13146: PUSH
13147: LD_INT 5
13149: PUSH
13150: LD_INT 6
13152: PUSH
13153: LD_INT 7
13155: PUSH
13156: LD_INT 8
13158: PUSH
13159: LD_INT 9
13161: PUSH
13162: LD_INT 10
13164: PUSH
13165: LD_INT 11
13167: PUSH
13168: LD_INT 12
13170: PUSH
13171: LD_INT 13
13173: PUSH
13174: LD_INT 14
13176: PUSH
13177: LD_INT 15
13179: PUSH
13180: LD_INT 16
13182: PUSH
13183: LD_INT 17
13185: PUSH
13186: LD_INT 18
13188: PUSH
13189: LD_INT 19
13191: PUSH
13192: LD_INT 20
13194: PUSH
13195: LD_INT 21
13197: PUSH
13198: LD_INT 22
13200: PUSH
13201: LD_INT 23
13203: PUSH
13204: LD_INT 24
13206: PUSH
13207: LD_INT 25
13209: PUSH
13210: LD_INT 26
13212: PUSH
13213: LD_INT 27
13215: PUSH
13216: LD_INT 28
13218: PUSH
13219: LD_INT 29
13221: PUSH
13222: LD_INT 30
13224: PUSH
13225: LD_INT 31
13227: PUSH
13228: LD_INT 32
13230: PUSH
13231: LD_INT 33
13233: PUSH
13234: LD_INT 34
13236: PUSH
13237: LD_INT 36
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 101
13279: PUSH
13280: LD_INT 102
13282: PUSH
13283: LD_INT 103
13285: PUSH
13286: LD_INT 104
13288: PUSH
13289: LD_INT 105
13291: PUSH
13292: LD_INT 106
13294: PUSH
13295: LD_INT 107
13297: PUSH
13298: LD_INT 108
13300: PUSH
13301: LD_INT 109
13303: PUSH
13304: LD_INT 110
13306: PUSH
13307: LD_INT 111
13309: PUSH
13310: LD_INT 112
13312: PUSH
13313: LD_INT 113
13315: PUSH
13316: LD_INT 114
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: ST_TO_ADDR
13339: GO 14066
13341: LD_INT 16
13343: DOUBLE
13344: EQUAL
13345: IFTRUE 13349
13347: GO 13473
13349: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13350: LD_ADDR_VAR 0 1
13354: PUSH
13355: LD_INT 2
13357: PUSH
13358: LD_INT 4
13360: PUSH
13361: LD_INT 5
13363: PUSH
13364: LD_INT 7
13366: PUSH
13367: LD_INT 11
13369: PUSH
13370: LD_INT 12
13372: PUSH
13373: LD_INT 15
13375: PUSH
13376: LD_INT 16
13378: PUSH
13379: LD_INT 20
13381: PUSH
13382: LD_INT 21
13384: PUSH
13385: LD_INT 22
13387: PUSH
13388: LD_INT 23
13390: PUSH
13391: LD_INT 25
13393: PUSH
13394: LD_INT 26
13396: PUSH
13397: LD_INT 30
13399: PUSH
13400: LD_INT 31
13402: PUSH
13403: LD_INT 32
13405: PUSH
13406: LD_INT 33
13408: PUSH
13409: LD_INT 34
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 101
13435: PUSH
13436: LD_INT 102
13438: PUSH
13439: LD_INT 103
13441: PUSH
13442: LD_INT 106
13444: PUSH
13445: LD_INT 108
13447: PUSH
13448: LD_INT 112
13450: PUSH
13451: LD_INT 113
13453: PUSH
13454: LD_INT 114
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: ST_TO_ADDR
13471: GO 14066
13473: LD_INT 17
13475: DOUBLE
13476: EQUAL
13477: IFTRUE 13481
13479: GO 13693
13481: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13482: LD_ADDR_VAR 0 1
13486: PUSH
13487: LD_INT 1
13489: PUSH
13490: LD_INT 2
13492: PUSH
13493: LD_INT 3
13495: PUSH
13496: LD_INT 4
13498: PUSH
13499: LD_INT 5
13501: PUSH
13502: LD_INT 6
13504: PUSH
13505: LD_INT 7
13507: PUSH
13508: LD_INT 8
13510: PUSH
13511: LD_INT 9
13513: PUSH
13514: LD_INT 10
13516: PUSH
13517: LD_INT 11
13519: PUSH
13520: LD_INT 12
13522: PUSH
13523: LD_INT 13
13525: PUSH
13526: LD_INT 14
13528: PUSH
13529: LD_INT 15
13531: PUSH
13532: LD_INT 16
13534: PUSH
13535: LD_INT 17
13537: PUSH
13538: LD_INT 18
13540: PUSH
13541: LD_INT 19
13543: PUSH
13544: LD_INT 20
13546: PUSH
13547: LD_INT 21
13549: PUSH
13550: LD_INT 22
13552: PUSH
13553: LD_INT 23
13555: PUSH
13556: LD_INT 24
13558: PUSH
13559: LD_INT 25
13561: PUSH
13562: LD_INT 26
13564: PUSH
13565: LD_INT 27
13567: PUSH
13568: LD_INT 28
13570: PUSH
13571: LD_INT 29
13573: PUSH
13574: LD_INT 30
13576: PUSH
13577: LD_INT 31
13579: PUSH
13580: LD_INT 32
13582: PUSH
13583: LD_INT 33
13585: PUSH
13586: LD_INT 34
13588: PUSH
13589: LD_INT 36
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 101
13631: PUSH
13632: LD_INT 102
13634: PUSH
13635: LD_INT 103
13637: PUSH
13638: LD_INT 104
13640: PUSH
13641: LD_INT 105
13643: PUSH
13644: LD_INT 106
13646: PUSH
13647: LD_INT 107
13649: PUSH
13650: LD_INT 108
13652: PUSH
13653: LD_INT 109
13655: PUSH
13656: LD_INT 110
13658: PUSH
13659: LD_INT 111
13661: PUSH
13662: LD_INT 112
13664: PUSH
13665: LD_INT 113
13667: PUSH
13668: LD_INT 114
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: ST_TO_ADDR
13691: GO 14066
13693: LD_INT 18
13695: DOUBLE
13696: EQUAL
13697: IFTRUE 13701
13699: GO 13837
13701: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
13702: LD_ADDR_VAR 0 1
13706: PUSH
13707: LD_INT 2
13709: PUSH
13710: LD_INT 4
13712: PUSH
13713: LD_INT 5
13715: PUSH
13716: LD_INT 7
13718: PUSH
13719: LD_INT 11
13721: PUSH
13722: LD_INT 12
13724: PUSH
13725: LD_INT 15
13727: PUSH
13728: LD_INT 16
13730: PUSH
13731: LD_INT 20
13733: PUSH
13734: LD_INT 21
13736: PUSH
13737: LD_INT 22
13739: PUSH
13740: LD_INT 23
13742: PUSH
13743: LD_INT 25
13745: PUSH
13746: LD_INT 26
13748: PUSH
13749: LD_INT 30
13751: PUSH
13752: LD_INT 31
13754: PUSH
13755: LD_INT 32
13757: PUSH
13758: LD_INT 33
13760: PUSH
13761: LD_INT 34
13763: PUSH
13764: LD_INT 35
13766: PUSH
13767: LD_INT 36
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 101
13795: PUSH
13796: LD_INT 102
13798: PUSH
13799: LD_INT 103
13801: PUSH
13802: LD_INT 106
13804: PUSH
13805: LD_INT 108
13807: PUSH
13808: LD_INT 112
13810: PUSH
13811: LD_INT 113
13813: PUSH
13814: LD_INT 114
13816: PUSH
13817: LD_INT 115
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: ST_TO_ADDR
13835: GO 14066
13837: LD_INT 19
13839: DOUBLE
13840: EQUAL
13841: IFTRUE 13845
13843: GO 14065
13845: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
13846: LD_ADDR_VAR 0 1
13850: PUSH
13851: LD_INT 1
13853: PUSH
13854: LD_INT 2
13856: PUSH
13857: LD_INT 3
13859: PUSH
13860: LD_INT 4
13862: PUSH
13863: LD_INT 5
13865: PUSH
13866: LD_INT 6
13868: PUSH
13869: LD_INT 7
13871: PUSH
13872: LD_INT 8
13874: PUSH
13875: LD_INT 9
13877: PUSH
13878: LD_INT 10
13880: PUSH
13881: LD_INT 11
13883: PUSH
13884: LD_INT 12
13886: PUSH
13887: LD_INT 13
13889: PUSH
13890: LD_INT 14
13892: PUSH
13893: LD_INT 15
13895: PUSH
13896: LD_INT 16
13898: PUSH
13899: LD_INT 17
13901: PUSH
13902: LD_INT 18
13904: PUSH
13905: LD_INT 19
13907: PUSH
13908: LD_INT 20
13910: PUSH
13911: LD_INT 21
13913: PUSH
13914: LD_INT 22
13916: PUSH
13917: LD_INT 23
13919: PUSH
13920: LD_INT 24
13922: PUSH
13923: LD_INT 25
13925: PUSH
13926: LD_INT 26
13928: PUSH
13929: LD_INT 27
13931: PUSH
13932: LD_INT 28
13934: PUSH
13935: LD_INT 29
13937: PUSH
13938: LD_INT 30
13940: PUSH
13941: LD_INT 31
13943: PUSH
13944: LD_INT 32
13946: PUSH
13947: LD_INT 33
13949: PUSH
13950: LD_INT 34
13952: PUSH
13953: LD_INT 35
13955: PUSH
13956: LD_INT 36
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 101
13999: PUSH
14000: LD_INT 102
14002: PUSH
14003: LD_INT 103
14005: PUSH
14006: LD_INT 104
14008: PUSH
14009: LD_INT 105
14011: PUSH
14012: LD_INT 106
14014: PUSH
14015: LD_INT 107
14017: PUSH
14018: LD_INT 108
14020: PUSH
14021: LD_INT 109
14023: PUSH
14024: LD_INT 110
14026: PUSH
14027: LD_INT 111
14029: PUSH
14030: LD_INT 112
14032: PUSH
14033: LD_INT 113
14035: PUSH
14036: LD_INT 114
14038: PUSH
14039: LD_INT 115
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: ST_TO_ADDR
14063: GO 14066
14065: POP
// end else
14066: GO 14285
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14068: LD_ADDR_VAR 0 1
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: LD_INT 2
14078: PUSH
14079: LD_INT 3
14081: PUSH
14082: LD_INT 4
14084: PUSH
14085: LD_INT 5
14087: PUSH
14088: LD_INT 6
14090: PUSH
14091: LD_INT 7
14093: PUSH
14094: LD_INT 8
14096: PUSH
14097: LD_INT 9
14099: PUSH
14100: LD_INT 10
14102: PUSH
14103: LD_INT 11
14105: PUSH
14106: LD_INT 12
14108: PUSH
14109: LD_INT 13
14111: PUSH
14112: LD_INT 14
14114: PUSH
14115: LD_INT 15
14117: PUSH
14118: LD_INT 16
14120: PUSH
14121: LD_INT 17
14123: PUSH
14124: LD_INT 18
14126: PUSH
14127: LD_INT 19
14129: PUSH
14130: LD_INT 20
14132: PUSH
14133: LD_INT 21
14135: PUSH
14136: LD_INT 22
14138: PUSH
14139: LD_INT 23
14141: PUSH
14142: LD_INT 24
14144: PUSH
14145: LD_INT 25
14147: PUSH
14148: LD_INT 26
14150: PUSH
14151: LD_INT 27
14153: PUSH
14154: LD_INT 28
14156: PUSH
14157: LD_INT 29
14159: PUSH
14160: LD_INT 30
14162: PUSH
14163: LD_INT 31
14165: PUSH
14166: LD_INT 32
14168: PUSH
14169: LD_INT 33
14171: PUSH
14172: LD_INT 34
14174: PUSH
14175: LD_INT 35
14177: PUSH
14178: LD_INT 36
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: PUSH
14219: LD_INT 101
14221: PUSH
14222: LD_INT 102
14224: PUSH
14225: LD_INT 103
14227: PUSH
14228: LD_INT 104
14230: PUSH
14231: LD_INT 105
14233: PUSH
14234: LD_INT 106
14236: PUSH
14237: LD_INT 107
14239: PUSH
14240: LD_INT 108
14242: PUSH
14243: LD_INT 109
14245: PUSH
14246: LD_INT 110
14248: PUSH
14249: LD_INT 111
14251: PUSH
14252: LD_INT 112
14254: PUSH
14255: LD_INT 113
14257: PUSH
14258: LD_INT 114
14260: PUSH
14261: LD_INT 115
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: ST_TO_ADDR
// if result then
14285: LD_VAR 0 1
14289: IFFALSE 14578
// begin normal :=  ;
14291: LD_ADDR_VAR 0 3
14295: PUSH
14296: LD_STRING 
14298: ST_TO_ADDR
// hardcore :=  ;
14299: LD_ADDR_VAR 0 4
14303: PUSH
14304: LD_STRING 
14306: ST_TO_ADDR
// for i = 1 to normalCounter do
14307: LD_ADDR_VAR 0 5
14311: PUSH
14312: DOUBLE
14313: LD_INT 1
14315: DEC
14316: ST_TO_ADDR
14317: LD_EXP 43
14321: PUSH
14322: FOR_TO
14323: IFFALSE 14424
// begin tmp := 0 ;
14325: LD_ADDR_VAR 0 2
14329: PUSH
14330: LD_STRING 0
14332: ST_TO_ADDR
// if result [ 1 ] then
14333: LD_VAR 0 1
14337: PUSH
14338: LD_INT 1
14340: ARRAY
14341: IFFALSE 14406
// if result [ 1 ] [ 1 ] = i then
14343: LD_VAR 0 1
14347: PUSH
14348: LD_INT 1
14350: ARRAY
14351: PUSH
14352: LD_INT 1
14354: ARRAY
14355: PUSH
14356: LD_VAR 0 5
14360: EQUAL
14361: IFFALSE 14406
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14363: LD_ADDR_VAR 0 1
14367: PUSH
14368: LD_VAR 0 1
14372: PPUSH
14373: LD_INT 1
14375: PPUSH
14376: LD_VAR 0 1
14380: PUSH
14381: LD_INT 1
14383: ARRAY
14384: PPUSH
14385: LD_INT 1
14387: PPUSH
14388: CALL_OW 3
14392: PPUSH
14393: CALL_OW 1
14397: ST_TO_ADDR
// tmp := 1 ;
14398: LD_ADDR_VAR 0 2
14402: PUSH
14403: LD_STRING 1
14405: ST_TO_ADDR
// end ; normal := normal & tmp ;
14406: LD_ADDR_VAR 0 3
14410: PUSH
14411: LD_VAR 0 3
14415: PUSH
14416: LD_VAR 0 2
14420: STR
14421: ST_TO_ADDR
// end ;
14422: GO 14322
14424: POP
14425: POP
// for i = 1 to hardcoreCounter do
14426: LD_ADDR_VAR 0 5
14430: PUSH
14431: DOUBLE
14432: LD_INT 1
14434: DEC
14435: ST_TO_ADDR
14436: LD_EXP 44
14440: PUSH
14441: FOR_TO
14442: IFFALSE 14547
// begin tmp := 0 ;
14444: LD_ADDR_VAR 0 2
14448: PUSH
14449: LD_STRING 0
14451: ST_TO_ADDR
// if result [ 2 ] then
14452: LD_VAR 0 1
14456: PUSH
14457: LD_INT 2
14459: ARRAY
14460: IFFALSE 14529
// if result [ 2 ] [ 1 ] = 100 + i then
14462: LD_VAR 0 1
14466: PUSH
14467: LD_INT 2
14469: ARRAY
14470: PUSH
14471: LD_INT 1
14473: ARRAY
14474: PUSH
14475: LD_INT 100
14477: PUSH
14478: LD_VAR 0 5
14482: PLUS
14483: EQUAL
14484: IFFALSE 14529
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14486: LD_ADDR_VAR 0 1
14490: PUSH
14491: LD_VAR 0 1
14495: PPUSH
14496: LD_INT 2
14498: PPUSH
14499: LD_VAR 0 1
14503: PUSH
14504: LD_INT 2
14506: ARRAY
14507: PPUSH
14508: LD_INT 1
14510: PPUSH
14511: CALL_OW 3
14515: PPUSH
14516: CALL_OW 1
14520: ST_TO_ADDR
// tmp := 1 ;
14521: LD_ADDR_VAR 0 2
14525: PUSH
14526: LD_STRING 1
14528: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14529: LD_ADDR_VAR 0 4
14533: PUSH
14534: LD_VAR 0 4
14538: PUSH
14539: LD_VAR 0 2
14543: STR
14544: ST_TO_ADDR
// end ;
14545: GO 14441
14547: POP
14548: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14549: LD_STRING getStreamItemsFromMission("
14551: PUSH
14552: LD_VAR 0 3
14556: STR
14557: PUSH
14558: LD_STRING ","
14560: STR
14561: PUSH
14562: LD_VAR 0 4
14566: STR
14567: PUSH
14568: LD_STRING ")
14570: STR
14571: PPUSH
14572: CALL_OW 559
// end else
14576: GO 14585
// ToLua ( getStreamItemsFromMission("","") ) ;
14578: LD_STRING getStreamItemsFromMission("","")
14580: PPUSH
14581: CALL_OW 559
// end ;
14585: LD_VAR 0 1
14589: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14590: LD_EXP 42
14594: PUSH
14595: LD_EXP 47
14599: AND
14600: IFFALSE 14724
14602: GO 14604
14604: DISABLE
14605: LD_INT 0
14607: PPUSH
14608: PPUSH
// begin enable ;
14609: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14610: LD_ADDR_VAR 0 2
14614: PUSH
14615: LD_INT 22
14617: PUSH
14618: LD_OWVAR 2
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PUSH
14627: LD_INT 2
14629: PUSH
14630: LD_INT 34
14632: PUSH
14633: LD_INT 7
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 34
14642: PUSH
14643: LD_INT 45
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: LD_INT 34
14652: PUSH
14653: LD_INT 28
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 34
14662: PUSH
14663: LD_INT 47
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PPUSH
14681: CALL_OW 69
14685: ST_TO_ADDR
// if not tmp then
14686: LD_VAR 0 2
14690: NOT
14691: IFFALSE 14695
// exit ;
14693: GO 14724
// for i in tmp do
14695: LD_ADDR_VAR 0 1
14699: PUSH
14700: LD_VAR 0 2
14704: PUSH
14705: FOR_IN
14706: IFFALSE 14722
// begin SetLives ( i , 0 ) ;
14708: LD_VAR 0 1
14712: PPUSH
14713: LD_INT 0
14715: PPUSH
14716: CALL_OW 234
// end ;
14720: GO 14705
14722: POP
14723: POP
// end ;
14724: PPOPN 2
14726: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14727: LD_EXP 42
14731: PUSH
14732: LD_EXP 48
14736: AND
14737: IFFALSE 14821
14739: GO 14741
14741: DISABLE
14742: LD_INT 0
14744: PPUSH
14745: PPUSH
// begin enable ;
14746: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14747: LD_ADDR_VAR 0 2
14751: PUSH
14752: LD_INT 22
14754: PUSH
14755: LD_OWVAR 2
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: LD_INT 32
14766: PUSH
14767: LD_INT 3
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PPUSH
14778: CALL_OW 69
14782: ST_TO_ADDR
// if not tmp then
14783: LD_VAR 0 2
14787: NOT
14788: IFFALSE 14792
// exit ;
14790: GO 14821
// for i in tmp do
14792: LD_ADDR_VAR 0 1
14796: PUSH
14797: LD_VAR 0 2
14801: PUSH
14802: FOR_IN
14803: IFFALSE 14819
// begin SetLives ( i , 0 ) ;
14805: LD_VAR 0 1
14809: PPUSH
14810: LD_INT 0
14812: PPUSH
14813: CALL_OW 234
// end ;
14817: GO 14802
14819: POP
14820: POP
// end ;
14821: PPOPN 2
14823: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14824: LD_EXP 42
14828: PUSH
14829: LD_EXP 45
14833: AND
14834: IFFALSE 14927
14836: GO 14838
14838: DISABLE
14839: LD_INT 0
14841: PPUSH
// begin enable ;
14842: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14843: LD_ADDR_VAR 0 1
14847: PUSH
14848: LD_INT 22
14850: PUSH
14851: LD_OWVAR 2
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: LD_INT 2
14862: PUSH
14863: LD_INT 25
14865: PUSH
14866: LD_INT 5
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: LD_INT 25
14875: PUSH
14876: LD_INT 9
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 25
14885: PUSH
14886: LD_INT 8
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PPUSH
14903: CALL_OW 69
14907: PUSH
14908: FOR_IN
14909: IFFALSE 14925
// begin SetClass ( i , 1 ) ;
14911: LD_VAR 0 1
14915: PPUSH
14916: LD_INT 1
14918: PPUSH
14919: CALL_OW 336
// end ;
14923: GO 14908
14925: POP
14926: POP
// end ;
14927: PPOPN 1
14929: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14930: LD_EXP 42
14934: PUSH
14935: LD_EXP 46
14939: AND
14940: PUSH
14941: LD_OWVAR 65
14945: PUSH
14946: LD_INT 7
14948: LESS
14949: AND
14950: IFFALSE 14964
14952: GO 14954
14954: DISABLE
// begin enable ;
14955: ENABLE
// game_speed := 7 ;
14956: LD_ADDR_OWVAR 65
14960: PUSH
14961: LD_INT 7
14963: ST_TO_ADDR
// end ;
14964: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14965: LD_EXP 42
14969: PUSH
14970: LD_EXP 49
14974: AND
14975: IFFALSE 15177
14977: GO 14979
14979: DISABLE
14980: LD_INT 0
14982: PPUSH
14983: PPUSH
14984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14985: LD_ADDR_VAR 0 3
14989: PUSH
14990: LD_INT 81
14992: PUSH
14993: LD_OWVAR 2
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 21
15004: PUSH
15005: LD_INT 1
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PPUSH
15016: CALL_OW 69
15020: ST_TO_ADDR
// if not tmp then
15021: LD_VAR 0 3
15025: NOT
15026: IFFALSE 15030
// exit ;
15028: GO 15177
// if tmp > 5 then
15030: LD_VAR 0 3
15034: PUSH
15035: LD_INT 5
15037: GREATER
15038: IFFALSE 15050
// k := 5 else
15040: LD_ADDR_VAR 0 2
15044: PUSH
15045: LD_INT 5
15047: ST_TO_ADDR
15048: GO 15060
// k := tmp ;
15050: LD_ADDR_VAR 0 2
15054: PUSH
15055: LD_VAR 0 3
15059: ST_TO_ADDR
// for i := 1 to k do
15060: LD_ADDR_VAR 0 1
15064: PUSH
15065: DOUBLE
15066: LD_INT 1
15068: DEC
15069: ST_TO_ADDR
15070: LD_VAR 0 2
15074: PUSH
15075: FOR_TO
15076: IFFALSE 15175
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15078: LD_VAR 0 3
15082: PUSH
15083: LD_VAR 0 1
15087: ARRAY
15088: PPUSH
15089: LD_VAR 0 1
15093: PUSH
15094: LD_INT 4
15096: MOD
15097: PUSH
15098: LD_INT 1
15100: PLUS
15101: PPUSH
15102: CALL_OW 259
15106: PUSH
15107: LD_INT 10
15109: LESS
15110: IFFALSE 15173
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15112: LD_VAR 0 3
15116: PUSH
15117: LD_VAR 0 1
15121: ARRAY
15122: PPUSH
15123: LD_VAR 0 1
15127: PUSH
15128: LD_INT 4
15130: MOD
15131: PUSH
15132: LD_INT 1
15134: PLUS
15135: PPUSH
15136: LD_VAR 0 3
15140: PUSH
15141: LD_VAR 0 1
15145: ARRAY
15146: PPUSH
15147: LD_VAR 0 1
15151: PUSH
15152: LD_INT 4
15154: MOD
15155: PUSH
15156: LD_INT 1
15158: PLUS
15159: PPUSH
15160: CALL_OW 259
15164: PUSH
15165: LD_INT 1
15167: PLUS
15168: PPUSH
15169: CALL_OW 237
15173: GO 15075
15175: POP
15176: POP
// end ;
15177: PPOPN 3
15179: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15180: LD_EXP 42
15184: PUSH
15185: LD_EXP 50
15189: AND
15190: IFFALSE 15210
15192: GO 15194
15194: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15195: LD_INT 4
15197: PPUSH
15198: LD_OWVAR 2
15202: PPUSH
15203: LD_INT 0
15205: PPUSH
15206: CALL_OW 324
15210: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15211: LD_EXP 42
15215: PUSH
15216: LD_EXP 79
15220: AND
15221: IFFALSE 15241
15223: GO 15225
15225: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15226: LD_INT 19
15228: PPUSH
15229: LD_OWVAR 2
15233: PPUSH
15234: LD_INT 0
15236: PPUSH
15237: CALL_OW 324
15241: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15242: LD_EXP 42
15246: PUSH
15247: LD_EXP 51
15251: AND
15252: IFFALSE 15354
15254: GO 15256
15256: DISABLE
15257: LD_INT 0
15259: PPUSH
15260: PPUSH
// begin enable ;
15261: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15262: LD_ADDR_VAR 0 2
15266: PUSH
15267: LD_INT 22
15269: PUSH
15270: LD_OWVAR 2
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: LD_INT 2
15281: PUSH
15282: LD_INT 34
15284: PUSH
15285: LD_INT 11
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PUSH
15292: LD_INT 34
15294: PUSH
15295: LD_INT 30
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: LIST
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PPUSH
15311: CALL_OW 69
15315: ST_TO_ADDR
// if not tmp then
15316: LD_VAR 0 2
15320: NOT
15321: IFFALSE 15325
// exit ;
15323: GO 15354
// for i in tmp do
15325: LD_ADDR_VAR 0 1
15329: PUSH
15330: LD_VAR 0 2
15334: PUSH
15335: FOR_IN
15336: IFFALSE 15352
// begin SetLives ( i , 0 ) ;
15338: LD_VAR 0 1
15342: PPUSH
15343: LD_INT 0
15345: PPUSH
15346: CALL_OW 234
// end ;
15350: GO 15335
15352: POP
15353: POP
// end ;
15354: PPOPN 2
15356: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15357: LD_EXP 42
15361: PUSH
15362: LD_EXP 52
15366: AND
15367: IFFALSE 15387
15369: GO 15371
15371: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15372: LD_INT 32
15374: PPUSH
15375: LD_OWVAR 2
15379: PPUSH
15380: LD_INT 0
15382: PPUSH
15383: CALL_OW 324
15387: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15388: LD_EXP 42
15392: PUSH
15393: LD_EXP 53
15397: AND
15398: IFFALSE 15579
15400: GO 15402
15402: DISABLE
15403: LD_INT 0
15405: PPUSH
15406: PPUSH
15407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15408: LD_ADDR_VAR 0 2
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_OWVAR 2
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 33
15427: PUSH
15428: LD_INT 3
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PPUSH
15439: CALL_OW 69
15443: ST_TO_ADDR
// if not tmp then
15444: LD_VAR 0 2
15448: NOT
15449: IFFALSE 15453
// exit ;
15451: GO 15579
// side := 0 ;
15453: LD_ADDR_VAR 0 3
15457: PUSH
15458: LD_INT 0
15460: ST_TO_ADDR
// for i := 1 to 8 do
15461: LD_ADDR_VAR 0 1
15465: PUSH
15466: DOUBLE
15467: LD_INT 1
15469: DEC
15470: ST_TO_ADDR
15471: LD_INT 8
15473: PUSH
15474: FOR_TO
15475: IFFALSE 15523
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15477: LD_OWVAR 2
15481: PUSH
15482: LD_VAR 0 1
15486: NONEQUAL
15487: PUSH
15488: LD_OWVAR 2
15492: PPUSH
15493: LD_VAR 0 1
15497: PPUSH
15498: CALL_OW 81
15502: PUSH
15503: LD_INT 2
15505: EQUAL
15506: AND
15507: IFFALSE 15521
// begin side := i ;
15509: LD_ADDR_VAR 0 3
15513: PUSH
15514: LD_VAR 0 1
15518: ST_TO_ADDR
// break ;
15519: GO 15523
// end ;
15521: GO 15474
15523: POP
15524: POP
// if not side then
15525: LD_VAR 0 3
15529: NOT
15530: IFFALSE 15534
// exit ;
15532: GO 15579
// for i := 1 to tmp do
15534: LD_ADDR_VAR 0 1
15538: PUSH
15539: DOUBLE
15540: LD_INT 1
15542: DEC
15543: ST_TO_ADDR
15544: LD_VAR 0 2
15548: PUSH
15549: FOR_TO
15550: IFFALSE 15577
// if Prob ( 60 ) then
15552: LD_INT 60
15554: PPUSH
15555: CALL_OW 13
15559: IFFALSE 15575
// SetSide ( i , side ) ;
15561: LD_VAR 0 1
15565: PPUSH
15566: LD_VAR 0 3
15570: PPUSH
15571: CALL_OW 235
15575: GO 15549
15577: POP
15578: POP
// end ;
15579: PPOPN 3
15581: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15582: LD_EXP 42
15586: PUSH
15587: LD_EXP 55
15591: AND
15592: IFFALSE 15711
15594: GO 15596
15596: DISABLE
15597: LD_INT 0
15599: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15600: LD_ADDR_VAR 0 1
15604: PUSH
15605: LD_INT 22
15607: PUSH
15608: LD_OWVAR 2
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: LD_INT 21
15619: PUSH
15620: LD_INT 1
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PUSH
15627: LD_INT 3
15629: PUSH
15630: LD_INT 23
15632: PUSH
15633: LD_INT 0
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: LIST
15648: PPUSH
15649: CALL_OW 69
15653: PUSH
15654: FOR_IN
15655: IFFALSE 15709
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15657: LD_VAR 0 1
15661: PPUSH
15662: CALL_OW 257
15666: PUSH
15667: LD_INT 1
15669: PUSH
15670: LD_INT 2
15672: PUSH
15673: LD_INT 3
15675: PUSH
15676: LD_INT 4
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: IN
15685: IFFALSE 15707
// SetClass ( un , rand ( 1 , 4 ) ) ;
15687: LD_VAR 0 1
15691: PPUSH
15692: LD_INT 1
15694: PPUSH
15695: LD_INT 4
15697: PPUSH
15698: CALL_OW 12
15702: PPUSH
15703: CALL_OW 336
15707: GO 15654
15709: POP
15710: POP
// end ;
15711: PPOPN 1
15713: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15714: LD_EXP 42
15718: PUSH
15719: LD_EXP 54
15723: AND
15724: IFFALSE 15803
15726: GO 15728
15728: DISABLE
15729: LD_INT 0
15731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15732: LD_ADDR_VAR 0 1
15736: PUSH
15737: LD_INT 22
15739: PUSH
15740: LD_OWVAR 2
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 21
15751: PUSH
15752: LD_INT 3
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PPUSH
15763: CALL_OW 69
15767: ST_TO_ADDR
// if not tmp then
15768: LD_VAR 0 1
15772: NOT
15773: IFFALSE 15777
// exit ;
15775: GO 15803
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15777: LD_VAR 0 1
15781: PUSH
15782: LD_INT 1
15784: PPUSH
15785: LD_VAR 0 1
15789: PPUSH
15790: CALL_OW 12
15794: ARRAY
15795: PPUSH
15796: LD_INT 100
15798: PPUSH
15799: CALL_OW 234
// end ;
15803: PPOPN 1
15805: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15806: LD_EXP 42
15810: PUSH
15811: LD_EXP 56
15815: AND
15816: IFFALSE 15914
15818: GO 15820
15820: DISABLE
15821: LD_INT 0
15823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15824: LD_ADDR_VAR 0 1
15828: PUSH
15829: LD_INT 22
15831: PUSH
15832: LD_OWVAR 2
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 21
15843: PUSH
15844: LD_INT 1
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 69
15859: ST_TO_ADDR
// if not tmp then
15860: LD_VAR 0 1
15864: NOT
15865: IFFALSE 15869
// exit ;
15867: GO 15914
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15869: LD_VAR 0 1
15873: PUSH
15874: LD_INT 1
15876: PPUSH
15877: LD_VAR 0 1
15881: PPUSH
15882: CALL_OW 12
15886: ARRAY
15887: PPUSH
15888: LD_INT 1
15890: PPUSH
15891: LD_INT 4
15893: PPUSH
15894: CALL_OW 12
15898: PPUSH
15899: LD_INT 3000
15901: PPUSH
15902: LD_INT 9000
15904: PPUSH
15905: CALL_OW 12
15909: PPUSH
15910: CALL_OW 492
// end ;
15914: PPOPN 1
15916: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15917: LD_EXP 42
15921: PUSH
15922: LD_EXP 57
15926: AND
15927: IFFALSE 15947
15929: GO 15931
15931: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15932: LD_INT 1
15934: PPUSH
15935: LD_OWVAR 2
15939: PPUSH
15940: LD_INT 0
15942: PPUSH
15943: CALL_OW 324
15947: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15948: LD_EXP 42
15952: PUSH
15953: LD_EXP 58
15957: AND
15958: IFFALSE 16041
15960: GO 15962
15962: DISABLE
15963: LD_INT 0
15965: PPUSH
15966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15967: LD_ADDR_VAR 0 2
15971: PUSH
15972: LD_INT 22
15974: PUSH
15975: LD_OWVAR 2
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 21
15986: PUSH
15987: LD_INT 3
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PPUSH
15998: CALL_OW 69
16002: ST_TO_ADDR
// if not tmp then
16003: LD_VAR 0 2
16007: NOT
16008: IFFALSE 16012
// exit ;
16010: GO 16041
// for i in tmp do
16012: LD_ADDR_VAR 0 1
16016: PUSH
16017: LD_VAR 0 2
16021: PUSH
16022: FOR_IN
16023: IFFALSE 16039
// SetBLevel ( i , 10 ) ;
16025: LD_VAR 0 1
16029: PPUSH
16030: LD_INT 10
16032: PPUSH
16033: CALL_OW 241
16037: GO 16022
16039: POP
16040: POP
// end ;
16041: PPOPN 2
16043: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16044: LD_EXP 42
16048: PUSH
16049: LD_EXP 59
16053: AND
16054: IFFALSE 16165
16056: GO 16058
16058: DISABLE
16059: LD_INT 0
16061: PPUSH
16062: PPUSH
16063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16064: LD_ADDR_VAR 0 3
16068: PUSH
16069: LD_INT 22
16071: PUSH
16072: LD_OWVAR 2
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PUSH
16081: LD_INT 25
16083: PUSH
16084: LD_INT 1
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PPUSH
16095: CALL_OW 69
16099: ST_TO_ADDR
// if not tmp then
16100: LD_VAR 0 3
16104: NOT
16105: IFFALSE 16109
// exit ;
16107: GO 16165
// un := tmp [ rand ( 1 , tmp ) ] ;
16109: LD_ADDR_VAR 0 2
16113: PUSH
16114: LD_VAR 0 3
16118: PUSH
16119: LD_INT 1
16121: PPUSH
16122: LD_VAR 0 3
16126: PPUSH
16127: CALL_OW 12
16131: ARRAY
16132: ST_TO_ADDR
// if Crawls ( un ) then
16133: LD_VAR 0 2
16137: PPUSH
16138: CALL_OW 318
16142: IFFALSE 16153
// ComWalk ( un ) ;
16144: LD_VAR 0 2
16148: PPUSH
16149: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16153: LD_VAR 0 2
16157: PPUSH
16158: LD_INT 5
16160: PPUSH
16161: CALL_OW 336
// end ;
16165: PPOPN 3
16167: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16168: LD_EXP 42
16172: PUSH
16173: LD_EXP 60
16177: AND
16178: PUSH
16179: LD_OWVAR 67
16183: PUSH
16184: LD_INT 3
16186: LESS
16187: AND
16188: IFFALSE 16207
16190: GO 16192
16192: DISABLE
// Difficulty := Difficulty + 1 ;
16193: LD_ADDR_OWVAR 67
16197: PUSH
16198: LD_OWVAR 67
16202: PUSH
16203: LD_INT 1
16205: PLUS
16206: ST_TO_ADDR
16207: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16208: LD_EXP 42
16212: PUSH
16213: LD_EXP 61
16217: AND
16218: IFFALSE 16321
16220: GO 16222
16222: DISABLE
16223: LD_INT 0
16225: PPUSH
// begin for i := 1 to 5 do
16226: LD_ADDR_VAR 0 1
16230: PUSH
16231: DOUBLE
16232: LD_INT 1
16234: DEC
16235: ST_TO_ADDR
16236: LD_INT 5
16238: PUSH
16239: FOR_TO
16240: IFFALSE 16319
// begin uc_nation := nation_nature ;
16242: LD_ADDR_OWVAR 21
16246: PUSH
16247: LD_INT 0
16249: ST_TO_ADDR
// uc_side := 0 ;
16250: LD_ADDR_OWVAR 20
16254: PUSH
16255: LD_INT 0
16257: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16258: LD_ADDR_OWVAR 29
16262: PUSH
16263: LD_INT 12
16265: PUSH
16266: LD_INT 12
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: ST_TO_ADDR
// hc_agressivity := 20 ;
16273: LD_ADDR_OWVAR 35
16277: PUSH
16278: LD_INT 20
16280: ST_TO_ADDR
// hc_class := class_tiger ;
16281: LD_ADDR_OWVAR 28
16285: PUSH
16286: LD_INT 14
16288: ST_TO_ADDR
// hc_gallery :=  ;
16289: LD_ADDR_OWVAR 33
16293: PUSH
16294: LD_STRING 
16296: ST_TO_ADDR
// hc_name :=  ;
16297: LD_ADDR_OWVAR 26
16301: PUSH
16302: LD_STRING 
16304: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16305: CALL_OW 44
16309: PPUSH
16310: LD_INT 0
16312: PPUSH
16313: CALL_OW 51
// end ;
16317: GO 16239
16319: POP
16320: POP
// end ;
16321: PPOPN 1
16323: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16324: LD_EXP 42
16328: PUSH
16329: LD_EXP 62
16333: AND
16334: IFFALSE 16343
16336: GO 16338
16338: DISABLE
// StreamSibBomb ;
16339: CALL 16344 0 0
16343: END
// export function StreamSibBomb ; var i , x , y ; begin
16344: LD_INT 0
16346: PPUSH
16347: PPUSH
16348: PPUSH
16349: PPUSH
// result := false ;
16350: LD_ADDR_VAR 0 1
16354: PUSH
16355: LD_INT 0
16357: ST_TO_ADDR
// for i := 1 to 16 do
16358: LD_ADDR_VAR 0 2
16362: PUSH
16363: DOUBLE
16364: LD_INT 1
16366: DEC
16367: ST_TO_ADDR
16368: LD_INT 16
16370: PUSH
16371: FOR_TO
16372: IFFALSE 16571
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16374: LD_ADDR_VAR 0 3
16378: PUSH
16379: LD_INT 10
16381: PUSH
16382: LD_INT 20
16384: PUSH
16385: LD_INT 30
16387: PUSH
16388: LD_INT 40
16390: PUSH
16391: LD_INT 50
16393: PUSH
16394: LD_INT 60
16396: PUSH
16397: LD_INT 70
16399: PUSH
16400: LD_INT 80
16402: PUSH
16403: LD_INT 90
16405: PUSH
16406: LD_INT 100
16408: PUSH
16409: LD_INT 110
16411: PUSH
16412: LD_INT 120
16414: PUSH
16415: LD_INT 130
16417: PUSH
16418: LD_INT 140
16420: PUSH
16421: LD_INT 150
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 1
16443: PPUSH
16444: LD_INT 15
16446: PPUSH
16447: CALL_OW 12
16451: ARRAY
16452: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16453: LD_ADDR_VAR 0 4
16457: PUSH
16458: LD_INT 10
16460: PUSH
16461: LD_INT 20
16463: PUSH
16464: LD_INT 30
16466: PUSH
16467: LD_INT 40
16469: PUSH
16470: LD_INT 50
16472: PUSH
16473: LD_INT 60
16475: PUSH
16476: LD_INT 70
16478: PUSH
16479: LD_INT 80
16481: PUSH
16482: LD_INT 90
16484: PUSH
16485: LD_INT 100
16487: PUSH
16488: LD_INT 110
16490: PUSH
16491: LD_INT 120
16493: PUSH
16494: LD_INT 130
16496: PUSH
16497: LD_INT 140
16499: PUSH
16500: LD_INT 150
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 1
16522: PPUSH
16523: LD_INT 15
16525: PPUSH
16526: CALL_OW 12
16530: ARRAY
16531: ST_TO_ADDR
// if ValidHex ( x , y ) then
16532: LD_VAR 0 3
16536: PPUSH
16537: LD_VAR 0 4
16541: PPUSH
16542: CALL_OW 488
16546: IFFALSE 16569
// begin result := [ x , y ] ;
16548: LD_ADDR_VAR 0 1
16552: PUSH
16553: LD_VAR 0 3
16557: PUSH
16558: LD_VAR 0 4
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: ST_TO_ADDR
// break ;
16567: GO 16571
// end ; end ;
16569: GO 16371
16571: POP
16572: POP
// if result then
16573: LD_VAR 0 1
16577: IFFALSE 16637
// begin ToLua ( playSibBomb() ) ;
16579: LD_STRING playSibBomb()
16581: PPUSH
16582: CALL_OW 559
// wait ( 0 0$14 ) ;
16586: LD_INT 490
16588: PPUSH
16589: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16593: LD_VAR 0 1
16597: PUSH
16598: LD_INT 1
16600: ARRAY
16601: PPUSH
16602: LD_VAR 0 1
16606: PUSH
16607: LD_INT 2
16609: ARRAY
16610: PPUSH
16611: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16615: LD_VAR 0 1
16619: PUSH
16620: LD_INT 1
16622: ARRAY
16623: PPUSH
16624: LD_VAR 0 1
16628: PUSH
16629: LD_INT 2
16631: ARRAY
16632: PPUSH
16633: CALL_OW 429
// end ; end ;
16637: LD_VAR 0 1
16641: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16642: LD_EXP 42
16646: PUSH
16647: LD_EXP 64
16651: AND
16652: IFFALSE 16664
16654: GO 16656
16656: DISABLE
// YouLost (  ) ;
16657: LD_STRING 
16659: PPUSH
16660: CALL_OW 104
16664: END
// every 0 0$1 trigger StreamModeActive and sFog do
16665: LD_EXP 42
16669: PUSH
16670: LD_EXP 63
16674: AND
16675: IFFALSE 16689
16677: GO 16679
16679: DISABLE
// FogOff ( your_side ) ;
16680: LD_OWVAR 2
16684: PPUSH
16685: CALL_OW 344
16689: END
// every 0 0$1 trigger StreamModeActive and sSun do
16690: LD_EXP 42
16694: PUSH
16695: LD_EXP 65
16699: AND
16700: IFFALSE 16728
16702: GO 16704
16704: DISABLE
// begin solar_recharge_percent := 0 ;
16705: LD_ADDR_OWVAR 79
16709: PUSH
16710: LD_INT 0
16712: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16713: LD_INT 10500
16715: PPUSH
16716: CALL_OW 67
// solar_recharge_percent := 100 ;
16720: LD_ADDR_OWVAR 79
16724: PUSH
16725: LD_INT 100
16727: ST_TO_ADDR
// end ;
16728: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16729: LD_EXP 42
16733: PUSH
16734: LD_EXP 66
16738: AND
16739: IFFALSE 16978
16741: GO 16743
16743: DISABLE
16744: LD_INT 0
16746: PPUSH
16747: PPUSH
16748: PPUSH
// begin tmp := [ ] ;
16749: LD_ADDR_VAR 0 3
16753: PUSH
16754: EMPTY
16755: ST_TO_ADDR
// for i := 1 to 6 do
16756: LD_ADDR_VAR 0 1
16760: PUSH
16761: DOUBLE
16762: LD_INT 1
16764: DEC
16765: ST_TO_ADDR
16766: LD_INT 6
16768: PUSH
16769: FOR_TO
16770: IFFALSE 16875
// begin uc_nation := nation_nature ;
16772: LD_ADDR_OWVAR 21
16776: PUSH
16777: LD_INT 0
16779: ST_TO_ADDR
// uc_side := 0 ;
16780: LD_ADDR_OWVAR 20
16784: PUSH
16785: LD_INT 0
16787: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16788: LD_ADDR_OWVAR 29
16792: PUSH
16793: LD_INT 12
16795: PUSH
16796: LD_INT 12
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: ST_TO_ADDR
// hc_agressivity := 20 ;
16803: LD_ADDR_OWVAR 35
16807: PUSH
16808: LD_INT 20
16810: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16811: LD_ADDR_OWVAR 28
16815: PUSH
16816: LD_INT 17
16818: ST_TO_ADDR
// hc_gallery :=  ;
16819: LD_ADDR_OWVAR 33
16823: PUSH
16824: LD_STRING 
16826: ST_TO_ADDR
// hc_name :=  ;
16827: LD_ADDR_OWVAR 26
16831: PUSH
16832: LD_STRING 
16834: ST_TO_ADDR
// un := CreateHuman ;
16835: LD_ADDR_VAR 0 2
16839: PUSH
16840: CALL_OW 44
16844: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16845: LD_VAR 0 2
16849: PPUSH
16850: LD_INT 1
16852: PPUSH
16853: CALL_OW 51
// tmp := tmp ^ un ;
16857: LD_ADDR_VAR 0 3
16861: PUSH
16862: LD_VAR 0 3
16866: PUSH
16867: LD_VAR 0 2
16871: ADD
16872: ST_TO_ADDR
// end ;
16873: GO 16769
16875: POP
16876: POP
// repeat wait ( 0 0$1 ) ;
16877: LD_INT 35
16879: PPUSH
16880: CALL_OW 67
// for un in tmp do
16884: LD_ADDR_VAR 0 2
16888: PUSH
16889: LD_VAR 0 3
16893: PUSH
16894: FOR_IN
16895: IFFALSE 16969
// begin if IsDead ( un ) then
16897: LD_VAR 0 2
16901: PPUSH
16902: CALL_OW 301
16906: IFFALSE 16926
// begin tmp := tmp diff un ;
16908: LD_ADDR_VAR 0 3
16912: PUSH
16913: LD_VAR 0 3
16917: PUSH
16918: LD_VAR 0 2
16922: DIFF
16923: ST_TO_ADDR
// continue ;
16924: GO 16894
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16926: LD_VAR 0 2
16930: PPUSH
16931: LD_INT 3
16933: PUSH
16934: LD_INT 22
16936: PUSH
16937: LD_INT 0
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PPUSH
16948: CALL_OW 69
16952: PPUSH
16953: LD_VAR 0 2
16957: PPUSH
16958: CALL_OW 74
16962: PPUSH
16963: CALL_OW 115
// end ;
16967: GO 16894
16969: POP
16970: POP
// until not tmp ;
16971: LD_VAR 0 3
16975: NOT
16976: IFFALSE 16877
// end ;
16978: PPOPN 3
16980: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16981: LD_EXP 42
16985: PUSH
16986: LD_EXP 67
16990: AND
16991: IFFALSE 17045
16993: GO 16995
16995: DISABLE
// begin ToLua ( displayTroll(); ) ;
16996: LD_STRING displayTroll();
16998: PPUSH
16999: CALL_OW 559
// wait ( 3 3$00 ) ;
17003: LD_INT 6300
17005: PPUSH
17006: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17010: LD_STRING hideTroll();
17012: PPUSH
17013: CALL_OW 559
// wait ( 1 1$00 ) ;
17017: LD_INT 2100
17019: PPUSH
17020: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17024: LD_STRING displayTroll();
17026: PPUSH
17027: CALL_OW 559
// wait ( 1 1$00 ) ;
17031: LD_INT 2100
17033: PPUSH
17034: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17038: LD_STRING hideTroll();
17040: PPUSH
17041: CALL_OW 559
// end ;
17045: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17046: LD_EXP 42
17050: PUSH
17051: LD_EXP 68
17055: AND
17056: IFFALSE 17119
17058: GO 17060
17060: DISABLE
17061: LD_INT 0
17063: PPUSH
// begin p := 0 ;
17064: LD_ADDR_VAR 0 1
17068: PUSH
17069: LD_INT 0
17071: ST_TO_ADDR
// repeat game_speed := 1 ;
17072: LD_ADDR_OWVAR 65
17076: PUSH
17077: LD_INT 1
17079: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17080: LD_INT 35
17082: PPUSH
17083: CALL_OW 67
// p := p + 1 ;
17087: LD_ADDR_VAR 0 1
17091: PUSH
17092: LD_VAR 0 1
17096: PUSH
17097: LD_INT 1
17099: PLUS
17100: ST_TO_ADDR
// until p >= 60 ;
17101: LD_VAR 0 1
17105: PUSH
17106: LD_INT 60
17108: GREATEREQUAL
17109: IFFALSE 17072
// game_speed := 4 ;
17111: LD_ADDR_OWVAR 65
17115: PUSH
17116: LD_INT 4
17118: ST_TO_ADDR
// end ;
17119: PPOPN 1
17121: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17122: LD_EXP 42
17126: PUSH
17127: LD_EXP 69
17131: AND
17132: IFFALSE 17278
17134: GO 17136
17136: DISABLE
17137: LD_INT 0
17139: PPUSH
17140: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17141: LD_ADDR_VAR 0 1
17145: PUSH
17146: LD_INT 22
17148: PUSH
17149: LD_OWVAR 2
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 2
17160: PUSH
17161: LD_INT 30
17163: PUSH
17164: LD_INT 0
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 30
17173: PUSH
17174: LD_INT 1
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: LIST
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PPUSH
17190: CALL_OW 69
17194: ST_TO_ADDR
// if not depot then
17195: LD_VAR 0 1
17199: NOT
17200: IFFALSE 17204
// exit ;
17202: GO 17278
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17204: LD_ADDR_VAR 0 2
17208: PUSH
17209: LD_VAR 0 1
17213: PUSH
17214: LD_INT 1
17216: PPUSH
17217: LD_VAR 0 1
17221: PPUSH
17222: CALL_OW 12
17226: ARRAY
17227: PPUSH
17228: CALL_OW 274
17232: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17233: LD_VAR 0 2
17237: PPUSH
17238: LD_INT 1
17240: PPUSH
17241: LD_INT 0
17243: PPUSH
17244: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17248: LD_VAR 0 2
17252: PPUSH
17253: LD_INT 2
17255: PPUSH
17256: LD_INT 0
17258: PPUSH
17259: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17263: LD_VAR 0 2
17267: PPUSH
17268: LD_INT 3
17270: PPUSH
17271: LD_INT 0
17273: PPUSH
17274: CALL_OW 277
// end ;
17278: PPOPN 2
17280: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17281: LD_EXP 42
17285: PUSH
17286: LD_EXP 70
17290: AND
17291: IFFALSE 17388
17293: GO 17295
17295: DISABLE
17296: LD_INT 0
17298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17299: LD_ADDR_VAR 0 1
17303: PUSH
17304: LD_INT 22
17306: PUSH
17307: LD_OWVAR 2
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 21
17318: PUSH
17319: LD_INT 1
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 3
17328: PUSH
17329: LD_INT 23
17331: PUSH
17332: LD_INT 0
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: PPUSH
17348: CALL_OW 69
17352: ST_TO_ADDR
// if not tmp then
17353: LD_VAR 0 1
17357: NOT
17358: IFFALSE 17362
// exit ;
17360: GO 17388
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17362: LD_VAR 0 1
17366: PUSH
17367: LD_INT 1
17369: PPUSH
17370: LD_VAR 0 1
17374: PPUSH
17375: CALL_OW 12
17379: ARRAY
17380: PPUSH
17381: LD_INT 200
17383: PPUSH
17384: CALL_OW 234
// end ;
17388: PPOPN 1
17390: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17391: LD_EXP 42
17395: PUSH
17396: LD_EXP 71
17400: AND
17401: IFFALSE 17480
17403: GO 17405
17405: DISABLE
17406: LD_INT 0
17408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17409: LD_ADDR_VAR 0 1
17413: PUSH
17414: LD_INT 22
17416: PUSH
17417: LD_OWVAR 2
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 21
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PPUSH
17440: CALL_OW 69
17444: ST_TO_ADDR
// if not tmp then
17445: LD_VAR 0 1
17449: NOT
17450: IFFALSE 17454
// exit ;
17452: GO 17480
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17454: LD_VAR 0 1
17458: PUSH
17459: LD_INT 1
17461: PPUSH
17462: LD_VAR 0 1
17466: PPUSH
17467: CALL_OW 12
17471: ARRAY
17472: PPUSH
17473: LD_INT 60
17475: PPUSH
17476: CALL_OW 234
// end ;
17480: PPOPN 1
17482: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17483: LD_EXP 42
17487: PUSH
17488: LD_EXP 72
17492: AND
17493: IFFALSE 17592
17495: GO 17497
17497: DISABLE
17498: LD_INT 0
17500: PPUSH
17501: PPUSH
// begin enable ;
17502: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17503: LD_ADDR_VAR 0 1
17507: PUSH
17508: LD_INT 22
17510: PUSH
17511: LD_OWVAR 2
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 61
17522: PUSH
17523: EMPTY
17524: LIST
17525: PUSH
17526: LD_INT 33
17528: PUSH
17529: LD_INT 2
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: PPUSH
17541: CALL_OW 69
17545: ST_TO_ADDR
// if not tmp then
17546: LD_VAR 0 1
17550: NOT
17551: IFFALSE 17555
// exit ;
17553: GO 17592
// for i in tmp do
17555: LD_ADDR_VAR 0 2
17559: PUSH
17560: LD_VAR 0 1
17564: PUSH
17565: FOR_IN
17566: IFFALSE 17590
// if IsControledBy ( i ) then
17568: LD_VAR 0 2
17572: PPUSH
17573: CALL_OW 312
17577: IFFALSE 17588
// ComUnlink ( i ) ;
17579: LD_VAR 0 2
17583: PPUSH
17584: CALL_OW 136
17588: GO 17565
17590: POP
17591: POP
// end ;
17592: PPOPN 2
17594: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17595: LD_EXP 42
17599: PUSH
17600: LD_EXP 73
17604: AND
17605: IFFALSE 17745
17607: GO 17609
17609: DISABLE
17610: LD_INT 0
17612: PPUSH
17613: PPUSH
// begin ToLua ( displayPowell(); ) ;
17614: LD_STRING displayPowell();
17616: PPUSH
17617: CALL_OW 559
// uc_side := 0 ;
17621: LD_ADDR_OWVAR 20
17625: PUSH
17626: LD_INT 0
17628: ST_TO_ADDR
// uc_nation := 2 ;
17629: LD_ADDR_OWVAR 21
17633: PUSH
17634: LD_INT 2
17636: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17637: LD_ADDR_OWVAR 37
17641: PUSH
17642: LD_INT 14
17644: ST_TO_ADDR
// vc_engine := engine_siberite ;
17645: LD_ADDR_OWVAR 39
17649: PUSH
17650: LD_INT 3
17652: ST_TO_ADDR
// vc_control := control_apeman ;
17653: LD_ADDR_OWVAR 38
17657: PUSH
17658: LD_INT 5
17660: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17661: LD_ADDR_OWVAR 40
17665: PUSH
17666: LD_INT 29
17668: ST_TO_ADDR
// un := CreateVehicle ;
17669: LD_ADDR_VAR 0 2
17673: PUSH
17674: CALL_OW 45
17678: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17679: LD_VAR 0 2
17683: PPUSH
17684: LD_INT 1
17686: PPUSH
17687: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17691: LD_INT 35
17693: PPUSH
17694: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17698: LD_VAR 0 2
17702: PPUSH
17703: LD_INT 22
17705: PUSH
17706: LD_OWVAR 2
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PPUSH
17715: CALL_OW 69
17719: PPUSH
17720: LD_VAR 0 2
17724: PPUSH
17725: CALL_OW 74
17729: PPUSH
17730: CALL_OW 115
// until IsDead ( un ) ;
17734: LD_VAR 0 2
17738: PPUSH
17739: CALL_OW 301
17743: IFFALSE 17691
// end ;
17745: PPOPN 2
17747: END
// every 0 0$1 trigger StreamModeActive and sStu do
17748: LD_EXP 42
17752: PUSH
17753: LD_EXP 81
17757: AND
17758: IFFALSE 17774
17760: GO 17762
17762: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17763: LD_STRING displayStucuk();
17765: PPUSH
17766: CALL_OW 559
// ResetFog ;
17770: CALL_OW 335
// end ;
17774: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17775: LD_EXP 42
17779: PUSH
17780: LD_EXP 74
17784: AND
17785: IFFALSE 17926
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
17793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17794: LD_ADDR_VAR 0 2
17798: PUSH
17799: LD_INT 22
17801: PUSH
17802: LD_OWVAR 2
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 21
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PPUSH
17825: CALL_OW 69
17829: ST_TO_ADDR
// if not tmp then
17830: LD_VAR 0 2
17834: NOT
17835: IFFALSE 17839
// exit ;
17837: GO 17926
// un := tmp [ rand ( 1 , tmp ) ] ;
17839: LD_ADDR_VAR 0 1
17843: PUSH
17844: LD_VAR 0 2
17848: PUSH
17849: LD_INT 1
17851: PPUSH
17852: LD_VAR 0 2
17856: PPUSH
17857: CALL_OW 12
17861: ARRAY
17862: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17863: LD_VAR 0 1
17867: PPUSH
17868: LD_INT 0
17870: PPUSH
17871: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17875: LD_VAR 0 1
17879: PPUSH
17880: LD_OWVAR 3
17884: PUSH
17885: LD_VAR 0 1
17889: DIFF
17890: PPUSH
17891: LD_VAR 0 1
17895: PPUSH
17896: CALL_OW 74
17900: PPUSH
17901: CALL_OW 115
// wait ( 0 0$20 ) ;
17905: LD_INT 700
17907: PPUSH
17908: CALL_OW 67
// SetSide ( un , your_side ) ;
17912: LD_VAR 0 1
17916: PPUSH
17917: LD_OWVAR 2
17921: PPUSH
17922: CALL_OW 235
// end ;
17926: PPOPN 2
17928: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17929: LD_EXP 42
17933: PUSH
17934: LD_EXP 75
17938: AND
17939: IFFALSE 18045
17941: GO 17943
17943: DISABLE
17944: LD_INT 0
17946: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17947: LD_ADDR_VAR 0 1
17951: PUSH
17952: LD_INT 22
17954: PUSH
17955: LD_OWVAR 2
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 2
17966: PUSH
17967: LD_INT 30
17969: PUSH
17970: LD_INT 0
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 30
17979: PUSH
17980: LD_INT 1
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: LIST
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PPUSH
17996: CALL_OW 69
18000: ST_TO_ADDR
// if not depot then
18001: LD_VAR 0 1
18005: NOT
18006: IFFALSE 18010
// exit ;
18008: GO 18045
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18010: LD_VAR 0 1
18014: PUSH
18015: LD_INT 1
18017: ARRAY
18018: PPUSH
18019: CALL_OW 250
18023: PPUSH
18024: LD_VAR 0 1
18028: PUSH
18029: LD_INT 1
18031: ARRAY
18032: PPUSH
18033: CALL_OW 251
18037: PPUSH
18038: LD_INT 70
18040: PPUSH
18041: CALL_OW 495
// end ;
18045: PPOPN 1
18047: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18048: LD_EXP 42
18052: PUSH
18053: LD_EXP 76
18057: AND
18058: IFFALSE 18269
18060: GO 18062
18062: DISABLE
18063: LD_INT 0
18065: PPUSH
18066: PPUSH
18067: PPUSH
18068: PPUSH
18069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18070: LD_ADDR_VAR 0 5
18074: PUSH
18075: LD_INT 22
18077: PUSH
18078: LD_OWVAR 2
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 21
18089: PUSH
18090: LD_INT 1
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PPUSH
18101: CALL_OW 69
18105: ST_TO_ADDR
// if not tmp then
18106: LD_VAR 0 5
18110: NOT
18111: IFFALSE 18115
// exit ;
18113: GO 18269
// for i in tmp do
18115: LD_ADDR_VAR 0 1
18119: PUSH
18120: LD_VAR 0 5
18124: PUSH
18125: FOR_IN
18126: IFFALSE 18267
// begin d := rand ( 0 , 5 ) ;
18128: LD_ADDR_VAR 0 4
18132: PUSH
18133: LD_INT 0
18135: PPUSH
18136: LD_INT 5
18138: PPUSH
18139: CALL_OW 12
18143: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18144: LD_ADDR_VAR 0 2
18148: PUSH
18149: LD_VAR 0 1
18153: PPUSH
18154: CALL_OW 250
18158: PPUSH
18159: LD_VAR 0 4
18163: PPUSH
18164: LD_INT 3
18166: PPUSH
18167: LD_INT 12
18169: PPUSH
18170: CALL_OW 12
18174: PPUSH
18175: CALL_OW 272
18179: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18180: LD_ADDR_VAR 0 3
18184: PUSH
18185: LD_VAR 0 1
18189: PPUSH
18190: CALL_OW 251
18194: PPUSH
18195: LD_VAR 0 4
18199: PPUSH
18200: LD_INT 3
18202: PPUSH
18203: LD_INT 12
18205: PPUSH
18206: CALL_OW 12
18210: PPUSH
18211: CALL_OW 273
18215: ST_TO_ADDR
// if ValidHex ( x , y ) then
18216: LD_VAR 0 2
18220: PPUSH
18221: LD_VAR 0 3
18225: PPUSH
18226: CALL_OW 488
18230: IFFALSE 18265
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18232: LD_VAR 0 1
18236: PPUSH
18237: LD_VAR 0 2
18241: PPUSH
18242: LD_VAR 0 3
18246: PPUSH
18247: LD_INT 3
18249: PPUSH
18250: LD_INT 6
18252: PPUSH
18253: CALL_OW 12
18257: PPUSH
18258: LD_INT 1
18260: PPUSH
18261: CALL_OW 483
// end ;
18265: GO 18125
18267: POP
18268: POP
// end ;
18269: PPOPN 5
18271: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18272: LD_EXP 42
18276: PUSH
18277: LD_EXP 77
18281: AND
18282: IFFALSE 18376
18284: GO 18286
18286: DISABLE
18287: LD_INT 0
18289: PPUSH
18290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18291: LD_ADDR_VAR 0 2
18295: PUSH
18296: LD_INT 22
18298: PUSH
18299: LD_OWVAR 2
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 32
18310: PUSH
18311: LD_INT 1
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 21
18320: PUSH
18321: LD_INT 2
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: LIST
18332: PPUSH
18333: CALL_OW 69
18337: ST_TO_ADDR
// if not tmp then
18338: LD_VAR 0 2
18342: NOT
18343: IFFALSE 18347
// exit ;
18345: GO 18376
// for i in tmp do
18347: LD_ADDR_VAR 0 1
18351: PUSH
18352: LD_VAR 0 2
18356: PUSH
18357: FOR_IN
18358: IFFALSE 18374
// SetFuel ( i , 0 ) ;
18360: LD_VAR 0 1
18364: PPUSH
18365: LD_INT 0
18367: PPUSH
18368: CALL_OW 240
18372: GO 18357
18374: POP
18375: POP
// end ;
18376: PPOPN 2
18378: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18379: LD_EXP 42
18383: PUSH
18384: LD_EXP 78
18388: AND
18389: IFFALSE 18455
18391: GO 18393
18393: DISABLE
18394: LD_INT 0
18396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18397: LD_ADDR_VAR 0 1
18401: PUSH
18402: LD_INT 22
18404: PUSH
18405: LD_OWVAR 2
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 30
18416: PUSH
18417: LD_INT 29
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PPUSH
18428: CALL_OW 69
18432: ST_TO_ADDR
// if not tmp then
18433: LD_VAR 0 1
18437: NOT
18438: IFFALSE 18442
// exit ;
18440: GO 18455
// DestroyUnit ( tmp [ 1 ] ) ;
18442: LD_VAR 0 1
18446: PUSH
18447: LD_INT 1
18449: ARRAY
18450: PPUSH
18451: CALL_OW 65
// end ;
18455: PPOPN 1
18457: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18458: LD_EXP 42
18462: PUSH
18463: LD_EXP 80
18467: AND
18468: IFFALSE 18597
18470: GO 18472
18472: DISABLE
18473: LD_INT 0
18475: PPUSH
// begin uc_side := 0 ;
18476: LD_ADDR_OWVAR 20
18480: PUSH
18481: LD_INT 0
18483: ST_TO_ADDR
// uc_nation := nation_arabian ;
18484: LD_ADDR_OWVAR 21
18488: PUSH
18489: LD_INT 2
18491: ST_TO_ADDR
// hc_gallery :=  ;
18492: LD_ADDR_OWVAR 33
18496: PUSH
18497: LD_STRING 
18499: ST_TO_ADDR
// hc_name :=  ;
18500: LD_ADDR_OWVAR 26
18504: PUSH
18505: LD_STRING 
18507: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18508: LD_INT 1
18510: PPUSH
18511: LD_INT 11
18513: PPUSH
18514: LD_INT 10
18516: PPUSH
18517: CALL_OW 380
// un := CreateHuman ;
18521: LD_ADDR_VAR 0 1
18525: PUSH
18526: CALL_OW 44
18530: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18531: LD_VAR 0 1
18535: PPUSH
18536: LD_INT 1
18538: PPUSH
18539: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18543: LD_INT 35
18545: PPUSH
18546: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18550: LD_VAR 0 1
18554: PPUSH
18555: LD_INT 22
18557: PUSH
18558: LD_OWVAR 2
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PPUSH
18567: CALL_OW 69
18571: PPUSH
18572: LD_VAR 0 1
18576: PPUSH
18577: CALL_OW 74
18581: PPUSH
18582: CALL_OW 115
// until IsDead ( un ) ;
18586: LD_VAR 0 1
18590: PPUSH
18591: CALL_OW 301
18595: IFFALSE 18543
// end ;
18597: PPOPN 1
18599: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18600: LD_EXP 42
18604: PUSH
18605: LD_EXP 82
18609: AND
18610: IFFALSE 18622
18612: GO 18614
18614: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18615: LD_STRING earthquake(getX(game), 0, 32)
18617: PPUSH
18618: CALL_OW 559
18622: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18623: LD_EXP 42
18627: PUSH
18628: LD_EXP 83
18632: AND
18633: IFFALSE 18724
18635: GO 18637
18637: DISABLE
18638: LD_INT 0
18640: PPUSH
// begin enable ;
18641: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18642: LD_ADDR_VAR 0 1
18646: PUSH
18647: LD_INT 22
18649: PUSH
18650: LD_OWVAR 2
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 21
18661: PUSH
18662: LD_INT 2
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 33
18671: PUSH
18672: LD_INT 3
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: LIST
18683: PPUSH
18684: CALL_OW 69
18688: ST_TO_ADDR
// if not tmp then
18689: LD_VAR 0 1
18693: NOT
18694: IFFALSE 18698
// exit ;
18696: GO 18724
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18698: LD_VAR 0 1
18702: PUSH
18703: LD_INT 1
18705: PPUSH
18706: LD_VAR 0 1
18710: PPUSH
18711: CALL_OW 12
18715: ARRAY
18716: PPUSH
18717: LD_INT 1
18719: PPUSH
18720: CALL_OW 234
// end ;
18724: PPOPN 1
18726: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18727: LD_EXP 42
18731: PUSH
18732: LD_EXP 84
18736: AND
18737: IFFALSE 18878
18739: GO 18741
18741: DISABLE
18742: LD_INT 0
18744: PPUSH
18745: PPUSH
18746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18747: LD_ADDR_VAR 0 3
18751: PUSH
18752: LD_INT 22
18754: PUSH
18755: LD_OWVAR 2
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 25
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PPUSH
18778: CALL_OW 69
18782: ST_TO_ADDR
// if not tmp then
18783: LD_VAR 0 3
18787: NOT
18788: IFFALSE 18792
// exit ;
18790: GO 18878
// un := tmp [ rand ( 1 , tmp ) ] ;
18792: LD_ADDR_VAR 0 2
18796: PUSH
18797: LD_VAR 0 3
18801: PUSH
18802: LD_INT 1
18804: PPUSH
18805: LD_VAR 0 3
18809: PPUSH
18810: CALL_OW 12
18814: ARRAY
18815: ST_TO_ADDR
// if Crawls ( un ) then
18816: LD_VAR 0 2
18820: PPUSH
18821: CALL_OW 318
18825: IFFALSE 18836
// ComWalk ( un ) ;
18827: LD_VAR 0 2
18831: PPUSH
18832: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18836: LD_VAR 0 2
18840: PPUSH
18841: LD_INT 9
18843: PPUSH
18844: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18848: LD_INT 28
18850: PPUSH
18851: LD_OWVAR 2
18855: PPUSH
18856: LD_INT 2
18858: PPUSH
18859: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18863: LD_INT 29
18865: PPUSH
18866: LD_OWVAR 2
18870: PPUSH
18871: LD_INT 2
18873: PPUSH
18874: CALL_OW 322
// end ;
18878: PPOPN 3
18880: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18881: LD_EXP 42
18885: PUSH
18886: LD_EXP 85
18890: AND
18891: IFFALSE 19002
18893: GO 18895
18895: DISABLE
18896: LD_INT 0
18898: PPUSH
18899: PPUSH
18900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18901: LD_ADDR_VAR 0 3
18905: PUSH
18906: LD_INT 22
18908: PUSH
18909: LD_OWVAR 2
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 25
18920: PUSH
18921: LD_INT 1
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PPUSH
18932: CALL_OW 69
18936: ST_TO_ADDR
// if not tmp then
18937: LD_VAR 0 3
18941: NOT
18942: IFFALSE 18946
// exit ;
18944: GO 19002
// un := tmp [ rand ( 1 , tmp ) ] ;
18946: LD_ADDR_VAR 0 2
18950: PUSH
18951: LD_VAR 0 3
18955: PUSH
18956: LD_INT 1
18958: PPUSH
18959: LD_VAR 0 3
18963: PPUSH
18964: CALL_OW 12
18968: ARRAY
18969: ST_TO_ADDR
// if Crawls ( un ) then
18970: LD_VAR 0 2
18974: PPUSH
18975: CALL_OW 318
18979: IFFALSE 18990
// ComWalk ( un ) ;
18981: LD_VAR 0 2
18985: PPUSH
18986: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18990: LD_VAR 0 2
18994: PPUSH
18995: LD_INT 8
18997: PPUSH
18998: CALL_OW 336
// end ;
19002: PPOPN 3
19004: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19005: LD_EXP 42
19009: PUSH
19010: LD_EXP 86
19014: AND
19015: IFFALSE 19159
19017: GO 19019
19019: DISABLE
19020: LD_INT 0
19022: PPUSH
19023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19024: LD_ADDR_VAR 0 2
19028: PUSH
19029: LD_INT 22
19031: PUSH
19032: LD_OWVAR 2
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 21
19043: PUSH
19044: LD_INT 2
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 2
19053: PUSH
19054: LD_INT 34
19056: PUSH
19057: LD_INT 12
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 34
19066: PUSH
19067: LD_INT 51
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 34
19076: PUSH
19077: LD_INT 32
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: LIST
19094: PPUSH
19095: CALL_OW 69
19099: ST_TO_ADDR
// if not tmp then
19100: LD_VAR 0 2
19104: NOT
19105: IFFALSE 19109
// exit ;
19107: GO 19159
// for i in tmp do
19109: LD_ADDR_VAR 0 1
19113: PUSH
19114: LD_VAR 0 2
19118: PUSH
19119: FOR_IN
19120: IFFALSE 19157
// if GetCargo ( i , mat_artifact ) = 0 then
19122: LD_VAR 0 1
19126: PPUSH
19127: LD_INT 4
19129: PPUSH
19130: CALL_OW 289
19134: PUSH
19135: LD_INT 0
19137: EQUAL
19138: IFFALSE 19155
// SetCargo ( i , mat_siberit , 100 ) ;
19140: LD_VAR 0 1
19144: PPUSH
19145: LD_INT 3
19147: PPUSH
19148: LD_INT 100
19150: PPUSH
19151: CALL_OW 290
19155: GO 19119
19157: POP
19158: POP
// end ;
19159: PPOPN 2
19161: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19162: LD_EXP 42
19166: PUSH
19167: LD_EXP 87
19171: AND
19172: IFFALSE 19355
19174: GO 19176
19176: DISABLE
19177: LD_INT 0
19179: PPUSH
19180: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19181: LD_ADDR_VAR 0 2
19185: PUSH
19186: LD_INT 22
19188: PUSH
19189: LD_OWVAR 2
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PPUSH
19198: CALL_OW 69
19202: ST_TO_ADDR
// if not tmp then
19203: LD_VAR 0 2
19207: NOT
19208: IFFALSE 19212
// exit ;
19210: GO 19355
// for i := 1 to 2 do
19212: LD_ADDR_VAR 0 1
19216: PUSH
19217: DOUBLE
19218: LD_INT 1
19220: DEC
19221: ST_TO_ADDR
19222: LD_INT 2
19224: PUSH
19225: FOR_TO
19226: IFFALSE 19353
// begin uc_side := your_side ;
19228: LD_ADDR_OWVAR 20
19232: PUSH
19233: LD_OWVAR 2
19237: ST_TO_ADDR
// uc_nation := nation_american ;
19238: LD_ADDR_OWVAR 21
19242: PUSH
19243: LD_INT 1
19245: ST_TO_ADDR
// vc_chassis := us_morphling ;
19246: LD_ADDR_OWVAR 37
19250: PUSH
19251: LD_INT 5
19253: ST_TO_ADDR
// vc_engine := engine_siberite ;
19254: LD_ADDR_OWVAR 39
19258: PUSH
19259: LD_INT 3
19261: ST_TO_ADDR
// vc_control := control_computer ;
19262: LD_ADDR_OWVAR 38
19266: PUSH
19267: LD_INT 3
19269: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19270: LD_ADDR_OWVAR 40
19274: PUSH
19275: LD_INT 10
19277: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19278: LD_VAR 0 2
19282: PUSH
19283: LD_INT 1
19285: ARRAY
19286: PPUSH
19287: CALL_OW 310
19291: NOT
19292: IFFALSE 19339
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19294: CALL_OW 45
19298: PPUSH
19299: LD_VAR 0 2
19303: PUSH
19304: LD_INT 1
19306: ARRAY
19307: PPUSH
19308: CALL_OW 250
19312: PPUSH
19313: LD_VAR 0 2
19317: PUSH
19318: LD_INT 1
19320: ARRAY
19321: PPUSH
19322: CALL_OW 251
19326: PPUSH
19327: LD_INT 12
19329: PPUSH
19330: LD_INT 1
19332: PPUSH
19333: CALL_OW 50
19337: GO 19351
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19339: CALL_OW 45
19343: PPUSH
19344: LD_INT 1
19346: PPUSH
19347: CALL_OW 51
// end ;
19351: GO 19225
19353: POP
19354: POP
// end ;
19355: PPOPN 2
19357: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19358: LD_EXP 42
19362: PUSH
19363: LD_EXP 88
19367: AND
19368: IFFALSE 19590
19370: GO 19372
19372: DISABLE
19373: LD_INT 0
19375: PPUSH
19376: PPUSH
19377: PPUSH
19378: PPUSH
19379: PPUSH
19380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19381: LD_ADDR_VAR 0 6
19385: PUSH
19386: LD_INT 22
19388: PUSH
19389: LD_OWVAR 2
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 21
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 3
19410: PUSH
19411: LD_INT 23
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: PPUSH
19430: CALL_OW 69
19434: ST_TO_ADDR
// if not tmp then
19435: LD_VAR 0 6
19439: NOT
19440: IFFALSE 19444
// exit ;
19442: GO 19590
// s1 := rand ( 1 , 4 ) ;
19444: LD_ADDR_VAR 0 2
19448: PUSH
19449: LD_INT 1
19451: PPUSH
19452: LD_INT 4
19454: PPUSH
19455: CALL_OW 12
19459: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19460: LD_ADDR_VAR 0 4
19464: PUSH
19465: LD_VAR 0 6
19469: PUSH
19470: LD_INT 1
19472: ARRAY
19473: PPUSH
19474: LD_VAR 0 2
19478: PPUSH
19479: CALL_OW 259
19483: ST_TO_ADDR
// if s1 = 1 then
19484: LD_VAR 0 2
19488: PUSH
19489: LD_INT 1
19491: EQUAL
19492: IFFALSE 19512
// s2 := rand ( 2 , 4 ) else
19494: LD_ADDR_VAR 0 3
19498: PUSH
19499: LD_INT 2
19501: PPUSH
19502: LD_INT 4
19504: PPUSH
19505: CALL_OW 12
19509: ST_TO_ADDR
19510: GO 19520
// s2 := 1 ;
19512: LD_ADDR_VAR 0 3
19516: PUSH
19517: LD_INT 1
19519: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19520: LD_ADDR_VAR 0 5
19524: PUSH
19525: LD_VAR 0 6
19529: PUSH
19530: LD_INT 1
19532: ARRAY
19533: PPUSH
19534: LD_VAR 0 3
19538: PPUSH
19539: CALL_OW 259
19543: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19544: LD_VAR 0 6
19548: PUSH
19549: LD_INT 1
19551: ARRAY
19552: PPUSH
19553: LD_VAR 0 2
19557: PPUSH
19558: LD_VAR 0 5
19562: PPUSH
19563: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19567: LD_VAR 0 6
19571: PUSH
19572: LD_INT 1
19574: ARRAY
19575: PPUSH
19576: LD_VAR 0 3
19580: PPUSH
19581: LD_VAR 0 4
19585: PPUSH
19586: CALL_OW 237
// end ;
19590: PPOPN 6
19592: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19593: LD_EXP 42
19597: PUSH
19598: LD_EXP 89
19602: AND
19603: IFFALSE 19682
19605: GO 19607
19607: DISABLE
19608: LD_INT 0
19610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19611: LD_ADDR_VAR 0 1
19615: PUSH
19616: LD_INT 22
19618: PUSH
19619: LD_OWVAR 2
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 30
19630: PUSH
19631: LD_INT 3
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PPUSH
19642: CALL_OW 69
19646: ST_TO_ADDR
// if not tmp then
19647: LD_VAR 0 1
19651: NOT
19652: IFFALSE 19656
// exit ;
19654: GO 19682
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19656: LD_VAR 0 1
19660: PUSH
19661: LD_INT 1
19663: PPUSH
19664: LD_VAR 0 1
19668: PPUSH
19669: CALL_OW 12
19673: ARRAY
19674: PPUSH
19675: LD_INT 1
19677: PPUSH
19678: CALL_OW 234
// end ;
19682: PPOPN 1
19684: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19685: LD_EXP 42
19689: PUSH
19690: LD_EXP 90
19694: AND
19695: IFFALSE 19807
19697: GO 19699
19699: DISABLE
19700: LD_INT 0
19702: PPUSH
19703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19704: LD_ADDR_VAR 0 2
19708: PUSH
19709: LD_INT 22
19711: PUSH
19712: LD_OWVAR 2
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 2
19723: PUSH
19724: LD_INT 30
19726: PUSH
19727: LD_INT 27
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 30
19736: PUSH
19737: LD_INT 26
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 30
19746: PUSH
19747: LD_INT 28
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PPUSH
19764: CALL_OW 69
19768: ST_TO_ADDR
// if not tmp then
19769: LD_VAR 0 2
19773: NOT
19774: IFFALSE 19778
// exit ;
19776: GO 19807
// for i in tmp do
19778: LD_ADDR_VAR 0 1
19782: PUSH
19783: LD_VAR 0 2
19787: PUSH
19788: FOR_IN
19789: IFFALSE 19805
// SetLives ( i , 1 ) ;
19791: LD_VAR 0 1
19795: PPUSH
19796: LD_INT 1
19798: PPUSH
19799: CALL_OW 234
19803: GO 19788
19805: POP
19806: POP
// end ;
19807: PPOPN 2
19809: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19810: LD_EXP 42
19814: PUSH
19815: LD_EXP 91
19819: AND
19820: IFFALSE 20094
19822: GO 19824
19824: DISABLE
19825: LD_INT 0
19827: PPUSH
19828: PPUSH
19829: PPUSH
// begin i := rand ( 1 , 7 ) ;
19830: LD_ADDR_VAR 0 1
19834: PUSH
19835: LD_INT 1
19837: PPUSH
19838: LD_INT 7
19840: PPUSH
19841: CALL_OW 12
19845: ST_TO_ADDR
// case i of 1 :
19846: LD_VAR 0 1
19850: PUSH
19851: LD_INT 1
19853: DOUBLE
19854: EQUAL
19855: IFTRUE 19859
19857: GO 19869
19859: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19860: LD_STRING earthquake(getX(game), 0, 32)
19862: PPUSH
19863: CALL_OW 559
19867: GO 20094
19869: LD_INT 2
19871: DOUBLE
19872: EQUAL
19873: IFTRUE 19877
19875: GO 19891
19877: POP
// begin ToLua ( displayStucuk(); ) ;
19878: LD_STRING displayStucuk();
19880: PPUSH
19881: CALL_OW 559
// ResetFog ;
19885: CALL_OW 335
// end ; 3 :
19889: GO 20094
19891: LD_INT 3
19893: DOUBLE
19894: EQUAL
19895: IFTRUE 19899
19897: GO 20003
19899: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19900: LD_ADDR_VAR 0 2
19904: PUSH
19905: LD_INT 22
19907: PUSH
19908: LD_OWVAR 2
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 25
19919: PUSH
19920: LD_INT 1
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PPUSH
19931: CALL_OW 69
19935: ST_TO_ADDR
// if not tmp then
19936: LD_VAR 0 2
19940: NOT
19941: IFFALSE 19945
// exit ;
19943: GO 20094
// un := tmp [ rand ( 1 , tmp ) ] ;
19945: LD_ADDR_VAR 0 3
19949: PUSH
19950: LD_VAR 0 2
19954: PUSH
19955: LD_INT 1
19957: PPUSH
19958: LD_VAR 0 2
19962: PPUSH
19963: CALL_OW 12
19967: ARRAY
19968: ST_TO_ADDR
// if Crawls ( un ) then
19969: LD_VAR 0 3
19973: PPUSH
19974: CALL_OW 318
19978: IFFALSE 19989
// ComWalk ( un ) ;
19980: LD_VAR 0 3
19984: PPUSH
19985: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19989: LD_VAR 0 3
19993: PPUSH
19994: LD_INT 8
19996: PPUSH
19997: CALL_OW 336
// end ; 4 :
20001: GO 20094
20003: LD_INT 4
20005: DOUBLE
20006: EQUAL
20007: IFTRUE 20011
20009: GO 20072
20011: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20012: LD_ADDR_VAR 0 2
20016: PUSH
20017: LD_INT 22
20019: PUSH
20020: LD_OWVAR 2
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 30
20031: PUSH
20032: LD_INT 29
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PPUSH
20043: CALL_OW 69
20047: ST_TO_ADDR
// if not tmp then
20048: LD_VAR 0 2
20052: NOT
20053: IFFALSE 20057
// exit ;
20055: GO 20094
// DestroyUnit ( tmp [ 1 ] ) ;
20057: LD_VAR 0 2
20061: PUSH
20062: LD_INT 1
20064: ARRAY
20065: PPUSH
20066: CALL_OW 65
// end ; 5 .. 7 :
20070: GO 20094
20072: LD_INT 5
20074: DOUBLE
20075: GREATEREQUAL
20076: IFFALSE 20084
20078: LD_INT 7
20080: DOUBLE
20081: LESSEQUAL
20082: IFTRUE 20086
20084: GO 20093
20086: POP
// StreamSibBomb ; end ;
20087: CALL 16344 0 0
20091: GO 20094
20093: POP
// end ;
20094: PPOPN 3
20096: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20097: LD_EXP 42
20101: PUSH
20102: LD_EXP 92
20106: AND
20107: IFFALSE 20263
20109: GO 20111
20111: DISABLE
20112: LD_INT 0
20114: PPUSH
20115: PPUSH
20116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20117: LD_ADDR_VAR 0 2
20121: PUSH
20122: LD_INT 81
20124: PUSH
20125: LD_OWVAR 2
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 2
20136: PUSH
20137: LD_INT 21
20139: PUSH
20140: LD_INT 1
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 21
20149: PUSH
20150: LD_INT 2
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: LIST
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PPUSH
20166: CALL_OW 69
20170: ST_TO_ADDR
// if not tmp then
20171: LD_VAR 0 2
20175: NOT
20176: IFFALSE 20180
// exit ;
20178: GO 20263
// p := 0 ;
20180: LD_ADDR_VAR 0 3
20184: PUSH
20185: LD_INT 0
20187: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20188: LD_INT 35
20190: PPUSH
20191: CALL_OW 67
// p := p + 1 ;
20195: LD_ADDR_VAR 0 3
20199: PUSH
20200: LD_VAR 0 3
20204: PUSH
20205: LD_INT 1
20207: PLUS
20208: ST_TO_ADDR
// for i in tmp do
20209: LD_ADDR_VAR 0 1
20213: PUSH
20214: LD_VAR 0 2
20218: PUSH
20219: FOR_IN
20220: IFFALSE 20251
// if GetLives ( i ) < 1000 then
20222: LD_VAR 0 1
20226: PPUSH
20227: CALL_OW 256
20231: PUSH
20232: LD_INT 1000
20234: LESS
20235: IFFALSE 20249
// SetLives ( i , 1000 ) ;
20237: LD_VAR 0 1
20241: PPUSH
20242: LD_INT 1000
20244: PPUSH
20245: CALL_OW 234
20249: GO 20219
20251: POP
20252: POP
// until p > 20 ;
20253: LD_VAR 0 3
20257: PUSH
20258: LD_INT 20
20260: GREATER
20261: IFFALSE 20188
// end ;
20263: PPOPN 3
20265: END
// every 0 0$1 trigger StreamModeActive and sTime do
20266: LD_EXP 42
20270: PUSH
20271: LD_EXP 93
20275: AND
20276: IFFALSE 20311
20278: GO 20280
20280: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20281: LD_INT 28
20283: PPUSH
20284: LD_OWVAR 2
20288: PPUSH
20289: LD_INT 2
20291: PPUSH
20292: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20296: LD_INT 30
20298: PPUSH
20299: LD_OWVAR 2
20303: PPUSH
20304: LD_INT 2
20306: PPUSH
20307: CALL_OW 322
// end ;
20311: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20312: LD_EXP 42
20316: PUSH
20317: LD_EXP 94
20321: AND
20322: IFFALSE 20443
20324: GO 20326
20326: DISABLE
20327: LD_INT 0
20329: PPUSH
20330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20331: LD_ADDR_VAR 0 2
20335: PUSH
20336: LD_INT 22
20338: PUSH
20339: LD_OWVAR 2
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 21
20350: PUSH
20351: LD_INT 1
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 3
20360: PUSH
20361: LD_INT 23
20363: PUSH
20364: LD_INT 0
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: LIST
20379: PPUSH
20380: CALL_OW 69
20384: ST_TO_ADDR
// if not tmp then
20385: LD_VAR 0 2
20389: NOT
20390: IFFALSE 20394
// exit ;
20392: GO 20443
// for i in tmp do
20394: LD_ADDR_VAR 0 1
20398: PUSH
20399: LD_VAR 0 2
20403: PUSH
20404: FOR_IN
20405: IFFALSE 20441
// begin if Crawls ( i ) then
20407: LD_VAR 0 1
20411: PPUSH
20412: CALL_OW 318
20416: IFFALSE 20427
// ComWalk ( i ) ;
20418: LD_VAR 0 1
20422: PPUSH
20423: CALL_OW 138
// SetClass ( i , 2 ) ;
20427: LD_VAR 0 1
20431: PPUSH
20432: LD_INT 2
20434: PPUSH
20435: CALL_OW 336
// end ;
20439: GO 20404
20441: POP
20442: POP
// end ;
20443: PPOPN 2
20445: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20446: LD_EXP 42
20450: PUSH
20451: LD_EXP 95
20455: AND
20456: IFFALSE 20737
20458: GO 20460
20460: DISABLE
20461: LD_INT 0
20463: PPUSH
20464: PPUSH
20465: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20466: LD_OWVAR 2
20470: PPUSH
20471: LD_INT 9
20473: PPUSH
20474: LD_INT 1
20476: PPUSH
20477: LD_INT 1
20479: PPUSH
20480: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20484: LD_INT 9
20486: PPUSH
20487: LD_OWVAR 2
20491: PPUSH
20492: CALL_OW 343
// uc_side := 9 ;
20496: LD_ADDR_OWVAR 20
20500: PUSH
20501: LD_INT 9
20503: ST_TO_ADDR
// uc_nation := 2 ;
20504: LD_ADDR_OWVAR 21
20508: PUSH
20509: LD_INT 2
20511: ST_TO_ADDR
// hc_name := Dark Warrior ;
20512: LD_ADDR_OWVAR 26
20516: PUSH
20517: LD_STRING Dark Warrior
20519: ST_TO_ADDR
// hc_gallery :=  ;
20520: LD_ADDR_OWVAR 33
20524: PUSH
20525: LD_STRING 
20527: ST_TO_ADDR
// hc_noskilllimit := true ;
20528: LD_ADDR_OWVAR 76
20532: PUSH
20533: LD_INT 1
20535: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20536: LD_ADDR_OWVAR 31
20540: PUSH
20541: LD_INT 30
20543: PUSH
20544: LD_INT 30
20546: PUSH
20547: LD_INT 30
20549: PUSH
20550: LD_INT 30
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: ST_TO_ADDR
// un := CreateHuman ;
20559: LD_ADDR_VAR 0 3
20563: PUSH
20564: CALL_OW 44
20568: ST_TO_ADDR
// hc_noskilllimit := false ;
20569: LD_ADDR_OWVAR 76
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20577: LD_VAR 0 3
20581: PPUSH
20582: LD_INT 1
20584: PPUSH
20585: CALL_OW 51
// p := 0 ;
20589: LD_ADDR_VAR 0 2
20593: PUSH
20594: LD_INT 0
20596: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20597: LD_INT 35
20599: PPUSH
20600: CALL_OW 67
// p := p + 1 ;
20604: LD_ADDR_VAR 0 2
20608: PUSH
20609: LD_VAR 0 2
20613: PUSH
20614: LD_INT 1
20616: PLUS
20617: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20618: LD_VAR 0 3
20622: PPUSH
20623: CALL_OW 256
20627: PUSH
20628: LD_INT 1000
20630: LESS
20631: IFFALSE 20645
// SetLives ( un , 1000 ) ;
20633: LD_VAR 0 3
20637: PPUSH
20638: LD_INT 1000
20640: PPUSH
20641: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20645: LD_VAR 0 3
20649: PPUSH
20650: LD_INT 81
20652: PUSH
20653: LD_OWVAR 2
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 91
20664: PUSH
20665: LD_VAR 0 3
20669: PUSH
20670: LD_INT 30
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: LIST
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PPUSH
20682: CALL_OW 69
20686: PPUSH
20687: LD_VAR 0 3
20691: PPUSH
20692: CALL_OW 74
20696: PPUSH
20697: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20701: LD_VAR 0 2
20705: PUSH
20706: LD_INT 60
20708: GREATER
20709: PUSH
20710: LD_VAR 0 3
20714: PPUSH
20715: CALL_OW 301
20719: OR
20720: IFFALSE 20597
// if un then
20722: LD_VAR 0 3
20726: IFFALSE 20737
// RemoveUnit ( un ) ;
20728: LD_VAR 0 3
20732: PPUSH
20733: CALL_OW 64
// end ;
20737: PPOPN 3
20739: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20740: LD_INT 0
20742: PPUSH
// case cmd of 301 :
20743: LD_VAR 0 1
20747: PUSH
20748: LD_INT 301
20750: DOUBLE
20751: EQUAL
20752: IFTRUE 20756
20754: GO 20788
20756: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20757: LD_VAR 0 6
20761: PPUSH
20762: LD_VAR 0 7
20766: PPUSH
20767: LD_VAR 0 8
20771: PPUSH
20772: LD_VAR 0 4
20776: PPUSH
20777: LD_VAR 0 5
20781: PPUSH
20782: CALL 21989 0 5
20786: GO 20909
20788: LD_INT 302
20790: DOUBLE
20791: EQUAL
20792: IFTRUE 20796
20794: GO 20833
20796: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20797: LD_VAR 0 6
20801: PPUSH
20802: LD_VAR 0 7
20806: PPUSH
20807: LD_VAR 0 8
20811: PPUSH
20812: LD_VAR 0 9
20816: PPUSH
20817: LD_VAR 0 4
20821: PPUSH
20822: LD_VAR 0 5
20826: PPUSH
20827: CALL 22080 0 6
20831: GO 20909
20833: LD_INT 303
20835: DOUBLE
20836: EQUAL
20837: IFTRUE 20841
20839: GO 20878
20841: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20842: LD_VAR 0 6
20846: PPUSH
20847: LD_VAR 0 7
20851: PPUSH
20852: LD_VAR 0 8
20856: PPUSH
20857: LD_VAR 0 9
20861: PPUSH
20862: LD_VAR 0 4
20866: PPUSH
20867: LD_VAR 0 5
20871: PPUSH
20872: CALL 20914 0 6
20876: GO 20909
20878: LD_INT 304
20880: DOUBLE
20881: EQUAL
20882: IFTRUE 20886
20884: GO 20908
20886: POP
// hHackTeleport ( unit , x , y ) ; end ;
20887: LD_VAR 0 2
20891: PPUSH
20892: LD_VAR 0 4
20896: PPUSH
20897: LD_VAR 0 5
20901: PPUSH
20902: CALL 22673 0 3
20906: GO 20909
20908: POP
// end ;
20909: LD_VAR 0 12
20913: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20914: LD_INT 0
20916: PPUSH
20917: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20918: LD_VAR 0 1
20922: PUSH
20923: LD_INT 1
20925: LESS
20926: PUSH
20927: LD_VAR 0 1
20931: PUSH
20932: LD_INT 3
20934: GREATER
20935: OR
20936: PUSH
20937: LD_VAR 0 5
20941: PPUSH
20942: LD_VAR 0 6
20946: PPUSH
20947: CALL_OW 428
20951: OR
20952: IFFALSE 20956
// exit ;
20954: GO 21676
// uc_side := your_side ;
20956: LD_ADDR_OWVAR 20
20960: PUSH
20961: LD_OWVAR 2
20965: ST_TO_ADDR
// uc_nation := nation ;
20966: LD_ADDR_OWVAR 21
20970: PUSH
20971: LD_VAR 0 1
20975: ST_TO_ADDR
// bc_level = 1 ;
20976: LD_ADDR_OWVAR 43
20980: PUSH
20981: LD_INT 1
20983: ST_TO_ADDR
// case btype of 1 :
20984: LD_VAR 0 2
20988: PUSH
20989: LD_INT 1
20991: DOUBLE
20992: EQUAL
20993: IFTRUE 20997
20995: GO 21008
20997: POP
// bc_type := b_depot ; 2 :
20998: LD_ADDR_OWVAR 42
21002: PUSH
21003: LD_INT 0
21005: ST_TO_ADDR
21006: GO 21620
21008: LD_INT 2
21010: DOUBLE
21011: EQUAL
21012: IFTRUE 21016
21014: GO 21027
21016: POP
// bc_type := b_warehouse ; 3 :
21017: LD_ADDR_OWVAR 42
21021: PUSH
21022: LD_INT 1
21024: ST_TO_ADDR
21025: GO 21620
21027: LD_INT 3
21029: DOUBLE
21030: EQUAL
21031: IFTRUE 21035
21033: GO 21046
21035: POP
// bc_type := b_lab ; 4 .. 9 :
21036: LD_ADDR_OWVAR 42
21040: PUSH
21041: LD_INT 6
21043: ST_TO_ADDR
21044: GO 21620
21046: LD_INT 4
21048: DOUBLE
21049: GREATEREQUAL
21050: IFFALSE 21058
21052: LD_INT 9
21054: DOUBLE
21055: LESSEQUAL
21056: IFTRUE 21060
21058: GO 21112
21060: POP
// begin bc_type := b_lab_half ;
21061: LD_ADDR_OWVAR 42
21065: PUSH
21066: LD_INT 7
21068: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21069: LD_ADDR_OWVAR 44
21073: PUSH
21074: LD_INT 10
21076: PUSH
21077: LD_INT 11
21079: PUSH
21080: LD_INT 12
21082: PUSH
21083: LD_INT 15
21085: PUSH
21086: LD_INT 14
21088: PUSH
21089: LD_INT 13
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: PUSH
21100: LD_VAR 0 2
21104: PUSH
21105: LD_INT 3
21107: MINUS
21108: ARRAY
21109: ST_TO_ADDR
// end ; 10 .. 13 :
21110: GO 21620
21112: LD_INT 10
21114: DOUBLE
21115: GREATEREQUAL
21116: IFFALSE 21124
21118: LD_INT 13
21120: DOUBLE
21121: LESSEQUAL
21122: IFTRUE 21126
21124: GO 21203
21126: POP
// begin bc_type := b_lab_full ;
21127: LD_ADDR_OWVAR 42
21131: PUSH
21132: LD_INT 8
21134: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21135: LD_ADDR_OWVAR 44
21139: PUSH
21140: LD_INT 10
21142: PUSH
21143: LD_INT 12
21145: PUSH
21146: LD_INT 14
21148: PUSH
21149: LD_INT 13
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: PUSH
21158: LD_VAR 0 2
21162: PUSH
21163: LD_INT 9
21165: MINUS
21166: ARRAY
21167: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21168: LD_ADDR_OWVAR 45
21172: PUSH
21173: LD_INT 11
21175: PUSH
21176: LD_INT 15
21178: PUSH
21179: LD_INT 12
21181: PUSH
21182: LD_INT 15
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: PUSH
21191: LD_VAR 0 2
21195: PUSH
21196: LD_INT 9
21198: MINUS
21199: ARRAY
21200: ST_TO_ADDR
// end ; 14 :
21201: GO 21620
21203: LD_INT 14
21205: DOUBLE
21206: EQUAL
21207: IFTRUE 21211
21209: GO 21222
21211: POP
// bc_type := b_workshop ; 15 :
21212: LD_ADDR_OWVAR 42
21216: PUSH
21217: LD_INT 2
21219: ST_TO_ADDR
21220: GO 21620
21222: LD_INT 15
21224: DOUBLE
21225: EQUAL
21226: IFTRUE 21230
21228: GO 21241
21230: POP
// bc_type := b_factory ; 16 :
21231: LD_ADDR_OWVAR 42
21235: PUSH
21236: LD_INT 3
21238: ST_TO_ADDR
21239: GO 21620
21241: LD_INT 16
21243: DOUBLE
21244: EQUAL
21245: IFTRUE 21249
21247: GO 21260
21249: POP
// bc_type := b_ext_gun ; 17 :
21250: LD_ADDR_OWVAR 42
21254: PUSH
21255: LD_INT 17
21257: ST_TO_ADDR
21258: GO 21620
21260: LD_INT 17
21262: DOUBLE
21263: EQUAL
21264: IFTRUE 21268
21266: GO 21296
21268: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21269: LD_ADDR_OWVAR 42
21273: PUSH
21274: LD_INT 19
21276: PUSH
21277: LD_INT 23
21279: PUSH
21280: LD_INT 19
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: LIST
21287: PUSH
21288: LD_VAR 0 1
21292: ARRAY
21293: ST_TO_ADDR
21294: GO 21620
21296: LD_INT 18
21298: DOUBLE
21299: EQUAL
21300: IFTRUE 21304
21302: GO 21315
21304: POP
// bc_type := b_ext_radar ; 19 :
21305: LD_ADDR_OWVAR 42
21309: PUSH
21310: LD_INT 20
21312: ST_TO_ADDR
21313: GO 21620
21315: LD_INT 19
21317: DOUBLE
21318: EQUAL
21319: IFTRUE 21323
21321: GO 21334
21323: POP
// bc_type := b_ext_radio ; 20 :
21324: LD_ADDR_OWVAR 42
21328: PUSH
21329: LD_INT 22
21331: ST_TO_ADDR
21332: GO 21620
21334: LD_INT 20
21336: DOUBLE
21337: EQUAL
21338: IFTRUE 21342
21340: GO 21353
21342: POP
// bc_type := b_ext_siberium ; 21 :
21343: LD_ADDR_OWVAR 42
21347: PUSH
21348: LD_INT 21
21350: ST_TO_ADDR
21351: GO 21620
21353: LD_INT 21
21355: DOUBLE
21356: EQUAL
21357: IFTRUE 21361
21359: GO 21372
21361: POP
// bc_type := b_ext_computer ; 22 :
21362: LD_ADDR_OWVAR 42
21366: PUSH
21367: LD_INT 24
21369: ST_TO_ADDR
21370: GO 21620
21372: LD_INT 22
21374: DOUBLE
21375: EQUAL
21376: IFTRUE 21380
21378: GO 21391
21380: POP
// bc_type := b_ext_track ; 23 :
21381: LD_ADDR_OWVAR 42
21385: PUSH
21386: LD_INT 16
21388: ST_TO_ADDR
21389: GO 21620
21391: LD_INT 23
21393: DOUBLE
21394: EQUAL
21395: IFTRUE 21399
21397: GO 21410
21399: POP
// bc_type := b_ext_laser ; 24 :
21400: LD_ADDR_OWVAR 42
21404: PUSH
21405: LD_INT 25
21407: ST_TO_ADDR
21408: GO 21620
21410: LD_INT 24
21412: DOUBLE
21413: EQUAL
21414: IFTRUE 21418
21416: GO 21429
21418: POP
// bc_type := b_control_tower ; 25 :
21419: LD_ADDR_OWVAR 42
21423: PUSH
21424: LD_INT 36
21426: ST_TO_ADDR
21427: GO 21620
21429: LD_INT 25
21431: DOUBLE
21432: EQUAL
21433: IFTRUE 21437
21435: GO 21448
21437: POP
// bc_type := b_breastwork ; 26 :
21438: LD_ADDR_OWVAR 42
21442: PUSH
21443: LD_INT 31
21445: ST_TO_ADDR
21446: GO 21620
21448: LD_INT 26
21450: DOUBLE
21451: EQUAL
21452: IFTRUE 21456
21454: GO 21467
21456: POP
// bc_type := b_bunker ; 27 :
21457: LD_ADDR_OWVAR 42
21461: PUSH
21462: LD_INT 32
21464: ST_TO_ADDR
21465: GO 21620
21467: LD_INT 27
21469: DOUBLE
21470: EQUAL
21471: IFTRUE 21475
21473: GO 21486
21475: POP
// bc_type := b_turret ; 28 :
21476: LD_ADDR_OWVAR 42
21480: PUSH
21481: LD_INT 33
21483: ST_TO_ADDR
21484: GO 21620
21486: LD_INT 28
21488: DOUBLE
21489: EQUAL
21490: IFTRUE 21494
21492: GO 21505
21494: POP
// bc_type := b_armoury ; 29 :
21495: LD_ADDR_OWVAR 42
21499: PUSH
21500: LD_INT 4
21502: ST_TO_ADDR
21503: GO 21620
21505: LD_INT 29
21507: DOUBLE
21508: EQUAL
21509: IFTRUE 21513
21511: GO 21524
21513: POP
// bc_type := b_barracks ; 30 :
21514: LD_ADDR_OWVAR 42
21518: PUSH
21519: LD_INT 5
21521: ST_TO_ADDR
21522: GO 21620
21524: LD_INT 30
21526: DOUBLE
21527: EQUAL
21528: IFTRUE 21532
21530: GO 21543
21532: POP
// bc_type := b_solar_power ; 31 :
21533: LD_ADDR_OWVAR 42
21537: PUSH
21538: LD_INT 27
21540: ST_TO_ADDR
21541: GO 21620
21543: LD_INT 31
21545: DOUBLE
21546: EQUAL
21547: IFTRUE 21551
21549: GO 21562
21551: POP
// bc_type := b_oil_power ; 32 :
21552: LD_ADDR_OWVAR 42
21556: PUSH
21557: LD_INT 26
21559: ST_TO_ADDR
21560: GO 21620
21562: LD_INT 32
21564: DOUBLE
21565: EQUAL
21566: IFTRUE 21570
21568: GO 21581
21570: POP
// bc_type := b_siberite_power ; 33 :
21571: LD_ADDR_OWVAR 42
21575: PUSH
21576: LD_INT 28
21578: ST_TO_ADDR
21579: GO 21620
21581: LD_INT 33
21583: DOUBLE
21584: EQUAL
21585: IFTRUE 21589
21587: GO 21600
21589: POP
// bc_type := b_oil_mine ; 34 :
21590: LD_ADDR_OWVAR 42
21594: PUSH
21595: LD_INT 29
21597: ST_TO_ADDR
21598: GO 21620
21600: LD_INT 34
21602: DOUBLE
21603: EQUAL
21604: IFTRUE 21608
21606: GO 21619
21608: POP
// bc_type := b_siberite_mine ; end ;
21609: LD_ADDR_OWVAR 42
21613: PUSH
21614: LD_INT 30
21616: ST_TO_ADDR
21617: GO 21620
21619: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21620: LD_ADDR_VAR 0 8
21624: PUSH
21625: LD_VAR 0 5
21629: PPUSH
21630: LD_VAR 0 6
21634: PPUSH
21635: LD_VAR 0 3
21639: PPUSH
21640: CALL_OW 47
21644: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21645: LD_OWVAR 42
21649: PUSH
21650: LD_INT 32
21652: PUSH
21653: LD_INT 33
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: IN
21660: IFFALSE 21676
// PlaceWeaponTurret ( b , weapon ) ;
21662: LD_VAR 0 8
21666: PPUSH
21667: LD_VAR 0 4
21671: PPUSH
21672: CALL_OW 431
// end ;
21676: LD_VAR 0 7
21680: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21681: LD_INT 0
21683: PPUSH
21684: PPUSH
21685: PPUSH
21686: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21687: LD_ADDR_VAR 0 4
21691: PUSH
21692: LD_INT 22
21694: PUSH
21695: LD_OWVAR 2
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 2
21706: PUSH
21707: LD_INT 30
21709: PUSH
21710: LD_INT 0
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 30
21719: PUSH
21720: LD_INT 1
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: LIST
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PPUSH
21736: CALL_OW 69
21740: ST_TO_ADDR
// if not tmp then
21741: LD_VAR 0 4
21745: NOT
21746: IFFALSE 21750
// exit ;
21748: GO 21809
// for i in tmp do
21750: LD_ADDR_VAR 0 2
21754: PUSH
21755: LD_VAR 0 4
21759: PUSH
21760: FOR_IN
21761: IFFALSE 21807
// for j = 1 to 3 do
21763: LD_ADDR_VAR 0 3
21767: PUSH
21768: DOUBLE
21769: LD_INT 1
21771: DEC
21772: ST_TO_ADDR
21773: LD_INT 3
21775: PUSH
21776: FOR_TO
21777: IFFALSE 21803
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21779: LD_VAR 0 2
21783: PPUSH
21784: CALL_OW 274
21788: PPUSH
21789: LD_VAR 0 3
21793: PPUSH
21794: LD_INT 99999
21796: PPUSH
21797: CALL_OW 277
21801: GO 21776
21803: POP
21804: POP
21805: GO 21760
21807: POP
21808: POP
// end ;
21809: LD_VAR 0 1
21813: RET
// export function hHackSetLevel10 ; var i , j ; begin
21814: LD_INT 0
21816: PPUSH
21817: PPUSH
21818: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21819: LD_ADDR_VAR 0 2
21823: PUSH
21824: LD_INT 21
21826: PUSH
21827: LD_INT 1
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PPUSH
21834: CALL_OW 69
21838: PUSH
21839: FOR_IN
21840: IFFALSE 21892
// if IsSelected ( i ) then
21842: LD_VAR 0 2
21846: PPUSH
21847: CALL_OW 306
21851: IFFALSE 21890
// begin for j := 1 to 4 do
21853: LD_ADDR_VAR 0 3
21857: PUSH
21858: DOUBLE
21859: LD_INT 1
21861: DEC
21862: ST_TO_ADDR
21863: LD_INT 4
21865: PUSH
21866: FOR_TO
21867: IFFALSE 21888
// SetSkill ( i , j , 10 ) ;
21869: LD_VAR 0 2
21873: PPUSH
21874: LD_VAR 0 3
21878: PPUSH
21879: LD_INT 10
21881: PPUSH
21882: CALL_OW 237
21886: GO 21866
21888: POP
21889: POP
// end ;
21890: GO 21839
21892: POP
21893: POP
// end ;
21894: LD_VAR 0 1
21898: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21899: LD_INT 0
21901: PPUSH
21902: PPUSH
21903: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21904: LD_ADDR_VAR 0 2
21908: PUSH
21909: LD_INT 22
21911: PUSH
21912: LD_OWVAR 2
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 21
21923: PUSH
21924: LD_INT 1
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PPUSH
21935: CALL_OW 69
21939: PUSH
21940: FOR_IN
21941: IFFALSE 21982
// begin for j := 1 to 4 do
21943: LD_ADDR_VAR 0 3
21947: PUSH
21948: DOUBLE
21949: LD_INT 1
21951: DEC
21952: ST_TO_ADDR
21953: LD_INT 4
21955: PUSH
21956: FOR_TO
21957: IFFALSE 21978
// SetSkill ( i , j , 10 ) ;
21959: LD_VAR 0 2
21963: PPUSH
21964: LD_VAR 0 3
21968: PPUSH
21969: LD_INT 10
21971: PPUSH
21972: CALL_OW 237
21976: GO 21956
21978: POP
21979: POP
// end ;
21980: GO 21940
21982: POP
21983: POP
// end ;
21984: LD_VAR 0 1
21988: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21989: LD_INT 0
21991: PPUSH
// uc_side := your_side ;
21992: LD_ADDR_OWVAR 20
21996: PUSH
21997: LD_OWVAR 2
22001: ST_TO_ADDR
// uc_nation := nation ;
22002: LD_ADDR_OWVAR 21
22006: PUSH
22007: LD_VAR 0 1
22011: ST_TO_ADDR
// InitHc ;
22012: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22016: LD_INT 0
22018: PPUSH
22019: LD_VAR 0 2
22023: PPUSH
22024: LD_VAR 0 3
22028: PPUSH
22029: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22033: LD_VAR 0 4
22037: PPUSH
22038: LD_VAR 0 5
22042: PPUSH
22043: CALL_OW 428
22047: PUSH
22048: LD_INT 0
22050: EQUAL
22051: IFFALSE 22075
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22053: CALL_OW 44
22057: PPUSH
22058: LD_VAR 0 4
22062: PPUSH
22063: LD_VAR 0 5
22067: PPUSH
22068: LD_INT 1
22070: PPUSH
22071: CALL_OW 48
// end ;
22075: LD_VAR 0 6
22079: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22080: LD_INT 0
22082: PPUSH
22083: PPUSH
// uc_side := your_side ;
22084: LD_ADDR_OWVAR 20
22088: PUSH
22089: LD_OWVAR 2
22093: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22094: LD_VAR 0 1
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: LD_INT 2
22104: PUSH
22105: LD_INT 3
22107: PUSH
22108: LD_INT 4
22110: PUSH
22111: LD_INT 5
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: IN
22121: IFFALSE 22133
// uc_nation := nation_american else
22123: LD_ADDR_OWVAR 21
22127: PUSH
22128: LD_INT 1
22130: ST_TO_ADDR
22131: GO 22176
// if chassis in [ 11 , 12 , 13 , 14 ] then
22133: LD_VAR 0 1
22137: PUSH
22138: LD_INT 11
22140: PUSH
22141: LD_INT 12
22143: PUSH
22144: LD_INT 13
22146: PUSH
22147: LD_INT 14
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: IN
22156: IFFALSE 22168
// uc_nation := nation_arabian else
22158: LD_ADDR_OWVAR 21
22162: PUSH
22163: LD_INT 2
22165: ST_TO_ADDR
22166: GO 22176
// uc_nation := nation_russian ;
22168: LD_ADDR_OWVAR 21
22172: PUSH
22173: LD_INT 3
22175: ST_TO_ADDR
// vc_chassis := chassis ;
22176: LD_ADDR_OWVAR 37
22180: PUSH
22181: LD_VAR 0 1
22185: ST_TO_ADDR
// vc_engine := engine ;
22186: LD_ADDR_OWVAR 39
22190: PUSH
22191: LD_VAR 0 2
22195: ST_TO_ADDR
// vc_control := control ;
22196: LD_ADDR_OWVAR 38
22200: PUSH
22201: LD_VAR 0 3
22205: ST_TO_ADDR
// vc_weapon := weapon ;
22206: LD_ADDR_OWVAR 40
22210: PUSH
22211: LD_VAR 0 4
22215: ST_TO_ADDR
// un := CreateVehicle ;
22216: LD_ADDR_VAR 0 8
22220: PUSH
22221: CALL_OW 45
22225: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22226: LD_VAR 0 8
22230: PPUSH
22231: LD_INT 0
22233: PPUSH
22234: LD_INT 5
22236: PPUSH
22237: CALL_OW 12
22241: PPUSH
22242: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22246: LD_VAR 0 8
22250: PPUSH
22251: LD_VAR 0 5
22255: PPUSH
22256: LD_VAR 0 6
22260: PPUSH
22261: LD_INT 1
22263: PPUSH
22264: CALL_OW 48
// end ;
22268: LD_VAR 0 7
22272: RET
// export hInvincible ; every 1 do
22273: GO 22275
22275: DISABLE
// hInvincible := [ ] ;
22276: LD_ADDR_EXP 96
22280: PUSH
22281: EMPTY
22282: ST_TO_ADDR
22283: END
// every 10 do var i ;
22284: GO 22286
22286: DISABLE
22287: LD_INT 0
22289: PPUSH
// begin enable ;
22290: ENABLE
// if not hInvincible then
22291: LD_EXP 96
22295: NOT
22296: IFFALSE 22300
// exit ;
22298: GO 22344
// for i in hInvincible do
22300: LD_ADDR_VAR 0 1
22304: PUSH
22305: LD_EXP 96
22309: PUSH
22310: FOR_IN
22311: IFFALSE 22342
// if GetLives ( i ) < 1000 then
22313: LD_VAR 0 1
22317: PPUSH
22318: CALL_OW 256
22322: PUSH
22323: LD_INT 1000
22325: LESS
22326: IFFALSE 22340
// SetLives ( i , 1000 ) ;
22328: LD_VAR 0 1
22332: PPUSH
22333: LD_INT 1000
22335: PPUSH
22336: CALL_OW 234
22340: GO 22310
22342: POP
22343: POP
// end ;
22344: PPOPN 1
22346: END
// export function hHackInvincible ; var i ; begin
22347: LD_INT 0
22349: PPUSH
22350: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22351: LD_ADDR_VAR 0 2
22355: PUSH
22356: LD_INT 2
22358: PUSH
22359: LD_INT 21
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 21
22371: PUSH
22372: LD_INT 2
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: LIST
22383: PPUSH
22384: CALL_OW 69
22388: PUSH
22389: FOR_IN
22390: IFFALSE 22451
// if IsSelected ( i ) then
22392: LD_VAR 0 2
22396: PPUSH
22397: CALL_OW 306
22401: IFFALSE 22449
// begin if i in hInvincible then
22403: LD_VAR 0 2
22407: PUSH
22408: LD_EXP 96
22412: IN
22413: IFFALSE 22433
// hInvincible := hInvincible diff i else
22415: LD_ADDR_EXP 96
22419: PUSH
22420: LD_EXP 96
22424: PUSH
22425: LD_VAR 0 2
22429: DIFF
22430: ST_TO_ADDR
22431: GO 22449
// hInvincible := hInvincible union i ;
22433: LD_ADDR_EXP 96
22437: PUSH
22438: LD_EXP 96
22442: PUSH
22443: LD_VAR 0 2
22447: UNION
22448: ST_TO_ADDR
// end ;
22449: GO 22389
22451: POP
22452: POP
// end ;
22453: LD_VAR 0 1
22457: RET
// export function hHackInvisible ; var i , j ; begin
22458: LD_INT 0
22460: PPUSH
22461: PPUSH
22462: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22463: LD_ADDR_VAR 0 2
22467: PUSH
22468: LD_INT 21
22470: PUSH
22471: LD_INT 1
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PPUSH
22478: CALL_OW 69
22482: PUSH
22483: FOR_IN
22484: IFFALSE 22508
// if IsSelected ( i ) then
22486: LD_VAR 0 2
22490: PPUSH
22491: CALL_OW 306
22495: IFFALSE 22506
// ComForceInvisible ( i ) ;
22497: LD_VAR 0 2
22501: PPUSH
22502: CALL_OW 496
22506: GO 22483
22508: POP
22509: POP
// end ;
22510: LD_VAR 0 1
22514: RET
// export function hHackChangeYourSide ; begin
22515: LD_INT 0
22517: PPUSH
// if your_side = 8 then
22518: LD_OWVAR 2
22522: PUSH
22523: LD_INT 8
22525: EQUAL
22526: IFFALSE 22538
// your_side := 0 else
22528: LD_ADDR_OWVAR 2
22532: PUSH
22533: LD_INT 0
22535: ST_TO_ADDR
22536: GO 22552
// your_side := your_side + 1 ;
22538: LD_ADDR_OWVAR 2
22542: PUSH
22543: LD_OWVAR 2
22547: PUSH
22548: LD_INT 1
22550: PLUS
22551: ST_TO_ADDR
// end ;
22552: LD_VAR 0 1
22556: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22557: LD_INT 0
22559: PPUSH
22560: PPUSH
22561: PPUSH
// for i in all_units do
22562: LD_ADDR_VAR 0 2
22566: PUSH
22567: LD_OWVAR 3
22571: PUSH
22572: FOR_IN
22573: IFFALSE 22651
// if IsSelected ( i ) then
22575: LD_VAR 0 2
22579: PPUSH
22580: CALL_OW 306
22584: IFFALSE 22649
// begin j := GetSide ( i ) ;
22586: LD_ADDR_VAR 0 3
22590: PUSH
22591: LD_VAR 0 2
22595: PPUSH
22596: CALL_OW 255
22600: ST_TO_ADDR
// if j = 8 then
22601: LD_VAR 0 3
22605: PUSH
22606: LD_INT 8
22608: EQUAL
22609: IFFALSE 22621
// j := 0 else
22611: LD_ADDR_VAR 0 3
22615: PUSH
22616: LD_INT 0
22618: ST_TO_ADDR
22619: GO 22635
// j := j + 1 ;
22621: LD_ADDR_VAR 0 3
22625: PUSH
22626: LD_VAR 0 3
22630: PUSH
22631: LD_INT 1
22633: PLUS
22634: ST_TO_ADDR
// SetSide ( i , j ) ;
22635: LD_VAR 0 2
22639: PPUSH
22640: LD_VAR 0 3
22644: PPUSH
22645: CALL_OW 235
// end ;
22649: GO 22572
22651: POP
22652: POP
// end ;
22653: LD_VAR 0 1
22657: RET
// export function hHackFog ; begin
22658: LD_INT 0
22660: PPUSH
// FogOff ( true ) ;
22661: LD_INT 1
22663: PPUSH
22664: CALL_OW 344
// end ;
22668: LD_VAR 0 1
22672: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22673: LD_INT 0
22675: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22676: LD_VAR 0 1
22680: PPUSH
22681: LD_VAR 0 2
22685: PPUSH
22686: LD_VAR 0 3
22690: PPUSH
22691: LD_INT 1
22693: PPUSH
22694: LD_INT 1
22696: PPUSH
22697: CALL_OW 483
// CenterOnXY ( x , y ) ;
22701: LD_VAR 0 2
22705: PPUSH
22706: LD_VAR 0 3
22710: PPUSH
22711: CALL_OW 84
// end ; end_of_file
22715: LD_VAR 0 4
22719: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22720: LD_VAR 0 1
22724: PUSH
22725: LD_INT 200
22727: DOUBLE
22728: GREATEREQUAL
22729: IFFALSE 22737
22731: LD_INT 299
22733: DOUBLE
22734: LESSEQUAL
22735: IFTRUE 22739
22737: GO 22771
22739: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22740: LD_VAR 0 1
22744: PPUSH
22745: LD_VAR 0 2
22749: PPUSH
22750: LD_VAR 0 3
22754: PPUSH
22755: LD_VAR 0 4
22759: PPUSH
22760: LD_VAR 0 5
22764: PPUSH
22765: CALL 22965 0 5
22769: GO 22848
22771: LD_INT 300
22773: DOUBLE
22774: GREATEREQUAL
22775: IFFALSE 22783
22777: LD_INT 399
22779: DOUBLE
22780: LESSEQUAL
22781: IFTRUE 22785
22783: GO 22847
22785: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22786: LD_VAR 0 1
22790: PPUSH
22791: LD_VAR 0 2
22795: PPUSH
22796: LD_VAR 0 3
22800: PPUSH
22801: LD_VAR 0 4
22805: PPUSH
22806: LD_VAR 0 5
22810: PPUSH
22811: LD_VAR 0 6
22815: PPUSH
22816: LD_VAR 0 7
22820: PPUSH
22821: LD_VAR 0 8
22825: PPUSH
22826: LD_VAR 0 9
22830: PPUSH
22831: LD_VAR 0 10
22835: PPUSH
22836: LD_VAR 0 11
22840: PPUSH
22841: CALL 20740 0 11
22845: GO 22848
22847: POP
// end ; end_of_file
22848: PPOPN 11
22850: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22851: LD_INT 0
22853: PPUSH
22854: PPUSH
22855: PPUSH
22856: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22857: LD_VAR 0 1
22861: PPUSH
22862: CALL_OW 264
22866: PUSH
22867: LD_EXP 111
22871: EQUAL
22872: IFFALSE 22944
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22874: LD_INT 68
22876: PPUSH
22877: LD_VAR 0 1
22881: PPUSH
22882: CALL_OW 255
22886: PPUSH
22887: CALL_OW 321
22891: PUSH
22892: LD_INT 2
22894: EQUAL
22895: IFFALSE 22907
// eff := 70 else
22897: LD_ADDR_VAR 0 4
22901: PUSH
22902: LD_INT 70
22904: ST_TO_ADDR
22905: GO 22915
// eff := 30 ;
22907: LD_ADDR_VAR 0 4
22911: PUSH
22912: LD_INT 30
22914: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22915: LD_VAR 0 1
22919: PPUSH
22920: CALL_OW 250
22924: PPUSH
22925: LD_VAR 0 1
22929: PPUSH
22930: CALL_OW 251
22934: PPUSH
22935: LD_VAR 0 4
22939: PPUSH
22940: CALL_OW 495
// end ; end ;
22944: LD_VAR 0 2
22948: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22949: LD_INT 0
22951: PPUSH
// end ;
22952: LD_VAR 0 4
22956: RET
// export function SOS_Command ( cmd ) ; begin
22957: LD_INT 0
22959: PPUSH
// end ;
22960: LD_VAR 0 2
22964: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22965: LD_INT 0
22967: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22968: LD_VAR 0 1
22972: PUSH
22973: LD_INT 250
22975: EQUAL
22976: PUSH
22977: LD_VAR 0 2
22981: PPUSH
22982: CALL_OW 264
22986: PUSH
22987: LD_EXP 114
22991: EQUAL
22992: AND
22993: IFFALSE 23014
// MinerPlaceMine ( unit , x , y ) ;
22995: LD_VAR 0 2
22999: PPUSH
23000: LD_VAR 0 4
23004: PPUSH
23005: LD_VAR 0 5
23009: PPUSH
23010: CALL 25355 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23014: LD_VAR 0 1
23018: PUSH
23019: LD_INT 251
23021: EQUAL
23022: PUSH
23023: LD_VAR 0 2
23027: PPUSH
23028: CALL_OW 264
23032: PUSH
23033: LD_EXP 114
23037: EQUAL
23038: AND
23039: IFFALSE 23060
// MinerDetonateMine ( unit , x , y ) ;
23041: LD_VAR 0 2
23045: PPUSH
23046: LD_VAR 0 4
23050: PPUSH
23051: LD_VAR 0 5
23055: PPUSH
23056: CALL 25632 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23060: LD_VAR 0 1
23064: PUSH
23065: LD_INT 252
23067: EQUAL
23068: PUSH
23069: LD_VAR 0 2
23073: PPUSH
23074: CALL_OW 264
23078: PUSH
23079: LD_EXP 114
23083: EQUAL
23084: AND
23085: IFFALSE 23106
// MinerCreateMinefield ( unit , x , y ) ;
23087: LD_VAR 0 2
23091: PPUSH
23092: LD_VAR 0 4
23096: PPUSH
23097: LD_VAR 0 5
23101: PPUSH
23102: CALL 26049 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23106: LD_VAR 0 1
23110: PUSH
23111: LD_INT 253
23113: EQUAL
23114: PUSH
23115: LD_VAR 0 2
23119: PPUSH
23120: CALL_OW 257
23124: PUSH
23125: LD_INT 5
23127: EQUAL
23128: AND
23129: IFFALSE 23150
// ComBinocular ( unit , x , y ) ;
23131: LD_VAR 0 2
23135: PPUSH
23136: LD_VAR 0 4
23140: PPUSH
23141: LD_VAR 0 5
23145: PPUSH
23146: CALL 26420 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23150: LD_VAR 0 1
23154: PUSH
23155: LD_INT 254
23157: EQUAL
23158: PUSH
23159: LD_VAR 0 2
23163: PPUSH
23164: CALL_OW 264
23168: PUSH
23169: LD_EXP 109
23173: EQUAL
23174: AND
23175: PUSH
23176: LD_VAR 0 3
23180: PPUSH
23181: CALL_OW 263
23185: PUSH
23186: LD_INT 3
23188: EQUAL
23189: AND
23190: IFFALSE 23206
// HackDestroyVehicle ( unit , selectedUnit ) ;
23192: LD_VAR 0 2
23196: PPUSH
23197: LD_VAR 0 3
23201: PPUSH
23202: CALL 24715 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23206: LD_VAR 0 1
23210: PUSH
23211: LD_INT 255
23213: EQUAL
23214: PUSH
23215: LD_VAR 0 2
23219: PPUSH
23220: CALL_OW 264
23224: PUSH
23225: LD_INT 14
23227: PUSH
23228: LD_INT 53
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: IN
23235: AND
23236: PUSH
23237: LD_VAR 0 4
23241: PPUSH
23242: LD_VAR 0 5
23246: PPUSH
23247: CALL_OW 488
23251: AND
23252: IFFALSE 23276
// CutTreeXYR ( unit , x , y , 12 ) ;
23254: LD_VAR 0 2
23258: PPUSH
23259: LD_VAR 0 4
23263: PPUSH
23264: LD_VAR 0 5
23268: PPUSH
23269: LD_INT 12
23271: PPUSH
23272: CALL 23281 0 4
// end ;
23276: LD_VAR 0 6
23280: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23281: LD_INT 0
23283: PPUSH
23284: PPUSH
23285: PPUSH
23286: PPUSH
23287: PPUSH
23288: PPUSH
23289: PPUSH
23290: PPUSH
23291: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23292: LD_VAR 0 1
23296: NOT
23297: PUSH
23298: LD_VAR 0 2
23302: PPUSH
23303: LD_VAR 0 3
23307: PPUSH
23308: CALL_OW 488
23312: NOT
23313: OR
23314: PUSH
23315: LD_VAR 0 4
23319: NOT
23320: OR
23321: IFFALSE 23325
// exit ;
23323: GO 23665
// list := [ ] ;
23325: LD_ADDR_VAR 0 13
23329: PUSH
23330: EMPTY
23331: ST_TO_ADDR
// if x - r < 0 then
23332: LD_VAR 0 2
23336: PUSH
23337: LD_VAR 0 4
23341: MINUS
23342: PUSH
23343: LD_INT 0
23345: LESS
23346: IFFALSE 23358
// min_x := 0 else
23348: LD_ADDR_VAR 0 7
23352: PUSH
23353: LD_INT 0
23355: ST_TO_ADDR
23356: GO 23374
// min_x := x - r ;
23358: LD_ADDR_VAR 0 7
23362: PUSH
23363: LD_VAR 0 2
23367: PUSH
23368: LD_VAR 0 4
23372: MINUS
23373: ST_TO_ADDR
// if y - r < 0 then
23374: LD_VAR 0 3
23378: PUSH
23379: LD_VAR 0 4
23383: MINUS
23384: PUSH
23385: LD_INT 0
23387: LESS
23388: IFFALSE 23400
// min_y := 0 else
23390: LD_ADDR_VAR 0 8
23394: PUSH
23395: LD_INT 0
23397: ST_TO_ADDR
23398: GO 23416
// min_y := y - r ;
23400: LD_ADDR_VAR 0 8
23404: PUSH
23405: LD_VAR 0 3
23409: PUSH
23410: LD_VAR 0 4
23414: MINUS
23415: ST_TO_ADDR
// max_x := x + r ;
23416: LD_ADDR_VAR 0 9
23420: PUSH
23421: LD_VAR 0 2
23425: PUSH
23426: LD_VAR 0 4
23430: PLUS
23431: ST_TO_ADDR
// max_y := y + r ;
23432: LD_ADDR_VAR 0 10
23436: PUSH
23437: LD_VAR 0 3
23441: PUSH
23442: LD_VAR 0 4
23446: PLUS
23447: ST_TO_ADDR
// for _x = min_x to max_x do
23448: LD_ADDR_VAR 0 11
23452: PUSH
23453: DOUBLE
23454: LD_VAR 0 7
23458: DEC
23459: ST_TO_ADDR
23460: LD_VAR 0 9
23464: PUSH
23465: FOR_TO
23466: IFFALSE 23583
// for _y = min_y to max_y do
23468: LD_ADDR_VAR 0 12
23472: PUSH
23473: DOUBLE
23474: LD_VAR 0 8
23478: DEC
23479: ST_TO_ADDR
23480: LD_VAR 0 10
23484: PUSH
23485: FOR_TO
23486: IFFALSE 23579
// begin if not ValidHex ( _x , _y ) then
23488: LD_VAR 0 11
23492: PPUSH
23493: LD_VAR 0 12
23497: PPUSH
23498: CALL_OW 488
23502: NOT
23503: IFFALSE 23507
// continue ;
23505: GO 23485
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23507: LD_VAR 0 11
23511: PPUSH
23512: LD_VAR 0 12
23516: PPUSH
23517: CALL_OW 351
23521: PUSH
23522: LD_VAR 0 11
23526: PPUSH
23527: LD_VAR 0 12
23531: PPUSH
23532: CALL_OW 554
23536: AND
23537: IFFALSE 23577
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23539: LD_ADDR_VAR 0 13
23543: PUSH
23544: LD_VAR 0 13
23548: PPUSH
23549: LD_VAR 0 13
23553: PUSH
23554: LD_INT 1
23556: PLUS
23557: PPUSH
23558: LD_VAR 0 11
23562: PUSH
23563: LD_VAR 0 12
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PPUSH
23572: CALL_OW 2
23576: ST_TO_ADDR
// end ;
23577: GO 23485
23579: POP
23580: POP
23581: GO 23465
23583: POP
23584: POP
// if not list then
23585: LD_VAR 0 13
23589: NOT
23590: IFFALSE 23594
// exit ;
23592: GO 23665
// for i in list do
23594: LD_ADDR_VAR 0 6
23598: PUSH
23599: LD_VAR 0 13
23603: PUSH
23604: FOR_IN
23605: IFFALSE 23663
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23607: LD_VAR 0 1
23611: PPUSH
23612: LD_STRING M
23614: PUSH
23615: LD_VAR 0 6
23619: PUSH
23620: LD_INT 1
23622: ARRAY
23623: PUSH
23624: LD_VAR 0 6
23628: PUSH
23629: LD_INT 2
23631: ARRAY
23632: PUSH
23633: LD_INT 0
23635: PUSH
23636: LD_INT 0
23638: PUSH
23639: LD_INT 0
23641: PUSH
23642: LD_INT 0
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: PPUSH
23657: CALL_OW 447
23661: GO 23604
23663: POP
23664: POP
// end ;
23665: LD_VAR 0 5
23669: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23670: LD_EXP 97
23674: NOT
23675: IFFALSE 23725
23677: GO 23679
23679: DISABLE
// begin initHack := true ;
23680: LD_ADDR_EXP 97
23684: PUSH
23685: LD_INT 1
23687: ST_TO_ADDR
// hackTanks := [ ] ;
23688: LD_ADDR_EXP 98
23692: PUSH
23693: EMPTY
23694: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23695: LD_ADDR_EXP 99
23699: PUSH
23700: EMPTY
23701: ST_TO_ADDR
// hackLimit := 3 ;
23702: LD_ADDR_EXP 100
23706: PUSH
23707: LD_INT 3
23709: ST_TO_ADDR
// hackDist := 12 ;
23710: LD_ADDR_EXP 101
23714: PUSH
23715: LD_INT 12
23717: ST_TO_ADDR
// hackCounter := [ ] ;
23718: LD_ADDR_EXP 102
23722: PUSH
23723: EMPTY
23724: ST_TO_ADDR
// end ;
23725: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23726: LD_EXP 97
23730: PUSH
23731: LD_INT 34
23733: PUSH
23734: LD_EXP 109
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PPUSH
23743: CALL_OW 69
23747: AND
23748: IFFALSE 24003
23750: GO 23752
23752: DISABLE
23753: LD_INT 0
23755: PPUSH
23756: PPUSH
// begin enable ;
23757: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23758: LD_ADDR_VAR 0 1
23762: PUSH
23763: LD_INT 34
23765: PUSH
23766: LD_EXP 109
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PPUSH
23775: CALL_OW 69
23779: PUSH
23780: FOR_IN
23781: IFFALSE 24001
// begin if not i in hackTanks then
23783: LD_VAR 0 1
23787: PUSH
23788: LD_EXP 98
23792: IN
23793: NOT
23794: IFFALSE 23877
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23796: LD_ADDR_EXP 98
23800: PUSH
23801: LD_EXP 98
23805: PPUSH
23806: LD_EXP 98
23810: PUSH
23811: LD_INT 1
23813: PLUS
23814: PPUSH
23815: LD_VAR 0 1
23819: PPUSH
23820: CALL_OW 1
23824: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23825: LD_ADDR_EXP 99
23829: PUSH
23830: LD_EXP 99
23834: PPUSH
23835: LD_EXP 99
23839: PUSH
23840: LD_INT 1
23842: PLUS
23843: PPUSH
23844: EMPTY
23845: PPUSH
23846: CALL_OW 1
23850: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23851: LD_ADDR_EXP 102
23855: PUSH
23856: LD_EXP 102
23860: PPUSH
23861: LD_EXP 102
23865: PUSH
23866: LD_INT 1
23868: PLUS
23869: PPUSH
23870: EMPTY
23871: PPUSH
23872: CALL_OW 1
23876: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23877: LD_VAR 0 1
23881: PPUSH
23882: CALL_OW 302
23886: NOT
23887: IFFALSE 23900
// begin HackUnlinkAll ( i ) ;
23889: LD_VAR 0 1
23893: PPUSH
23894: CALL 24006 0 1
// continue ;
23898: GO 23780
// end ; HackCheckCapturedStatus ( i ) ;
23900: LD_VAR 0 1
23904: PPUSH
23905: CALL 24449 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23909: LD_ADDR_VAR 0 2
23913: PUSH
23914: LD_INT 81
23916: PUSH
23917: LD_VAR 0 1
23921: PPUSH
23922: CALL_OW 255
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 33
23933: PUSH
23934: LD_INT 3
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 91
23943: PUSH
23944: LD_VAR 0 1
23948: PUSH
23949: LD_EXP 101
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 50
23961: PUSH
23962: EMPTY
23963: LIST
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: PPUSH
23971: CALL_OW 69
23975: ST_TO_ADDR
// if not tmp then
23976: LD_VAR 0 2
23980: NOT
23981: IFFALSE 23985
// continue ;
23983: GO 23780
// HackLink ( i , tmp ) ;
23985: LD_VAR 0 1
23989: PPUSH
23990: LD_VAR 0 2
23994: PPUSH
23995: CALL 24142 0 2
// end ;
23999: GO 23780
24001: POP
24002: POP
// end ;
24003: PPOPN 2
24005: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24006: LD_INT 0
24008: PPUSH
24009: PPUSH
24010: PPUSH
// if not hack in hackTanks then
24011: LD_VAR 0 1
24015: PUSH
24016: LD_EXP 98
24020: IN
24021: NOT
24022: IFFALSE 24026
// exit ;
24024: GO 24137
// index := GetElementIndex ( hackTanks , hack ) ;
24026: LD_ADDR_VAR 0 4
24030: PUSH
24031: LD_EXP 98
24035: PPUSH
24036: LD_VAR 0 1
24040: PPUSH
24041: CALL 31571 0 2
24045: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24046: LD_EXP 99
24050: PUSH
24051: LD_VAR 0 4
24055: ARRAY
24056: IFFALSE 24137
// begin for i in hackTanksCaptured [ index ] do
24058: LD_ADDR_VAR 0 3
24062: PUSH
24063: LD_EXP 99
24067: PUSH
24068: LD_VAR 0 4
24072: ARRAY
24073: PUSH
24074: FOR_IN
24075: IFFALSE 24101
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24077: LD_VAR 0 3
24081: PUSH
24082: LD_INT 1
24084: ARRAY
24085: PPUSH
24086: LD_VAR 0 3
24090: PUSH
24091: LD_INT 2
24093: ARRAY
24094: PPUSH
24095: CALL_OW 235
24099: GO 24074
24101: POP
24102: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24103: LD_ADDR_EXP 99
24107: PUSH
24108: LD_EXP 99
24112: PPUSH
24113: LD_VAR 0 4
24117: PPUSH
24118: EMPTY
24119: PPUSH
24120: CALL_OW 1
24124: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24125: LD_VAR 0 1
24129: PPUSH
24130: LD_INT 0
24132: PPUSH
24133: CALL_OW 505
// end ; end ;
24137: LD_VAR 0 2
24141: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24142: LD_INT 0
24144: PPUSH
24145: PPUSH
24146: PPUSH
// if not hack in hackTanks or not vehicles then
24147: LD_VAR 0 1
24151: PUSH
24152: LD_EXP 98
24156: IN
24157: NOT
24158: PUSH
24159: LD_VAR 0 2
24163: NOT
24164: OR
24165: IFFALSE 24169
// exit ;
24167: GO 24444
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24169: LD_ADDR_VAR 0 2
24173: PUSH
24174: LD_VAR 0 1
24178: PPUSH
24179: LD_VAR 0 2
24183: PPUSH
24184: LD_INT 1
24186: PPUSH
24187: LD_INT 1
24189: PPUSH
24190: CALL 32221 0 4
24194: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24195: LD_ADDR_VAR 0 5
24199: PUSH
24200: LD_EXP 98
24204: PPUSH
24205: LD_VAR 0 1
24209: PPUSH
24210: CALL 31571 0 2
24214: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24215: LD_EXP 99
24219: PUSH
24220: LD_VAR 0 5
24224: ARRAY
24225: PUSH
24226: LD_EXP 100
24230: LESS
24231: IFFALSE 24420
// begin for i := 1 to vehicles do
24233: LD_ADDR_VAR 0 4
24237: PUSH
24238: DOUBLE
24239: LD_INT 1
24241: DEC
24242: ST_TO_ADDR
24243: LD_VAR 0 2
24247: PUSH
24248: FOR_TO
24249: IFFALSE 24418
// begin if hackTanksCaptured [ index ] = hackLimit then
24251: LD_EXP 99
24255: PUSH
24256: LD_VAR 0 5
24260: ARRAY
24261: PUSH
24262: LD_EXP 100
24266: EQUAL
24267: IFFALSE 24271
// break ;
24269: GO 24418
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24271: LD_ADDR_EXP 102
24275: PUSH
24276: LD_EXP 102
24280: PPUSH
24281: LD_VAR 0 5
24285: PPUSH
24286: LD_EXP 102
24290: PUSH
24291: LD_VAR 0 5
24295: ARRAY
24296: PUSH
24297: LD_INT 1
24299: PLUS
24300: PPUSH
24301: CALL_OW 1
24305: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24306: LD_ADDR_EXP 99
24310: PUSH
24311: LD_EXP 99
24315: PPUSH
24316: LD_VAR 0 5
24320: PUSH
24321: LD_EXP 99
24325: PUSH
24326: LD_VAR 0 5
24330: ARRAY
24331: PUSH
24332: LD_INT 1
24334: PLUS
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PPUSH
24340: LD_VAR 0 2
24344: PUSH
24345: LD_VAR 0 4
24349: ARRAY
24350: PUSH
24351: LD_VAR 0 2
24355: PUSH
24356: LD_VAR 0 4
24360: ARRAY
24361: PPUSH
24362: CALL_OW 255
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PPUSH
24371: CALL 31786 0 3
24375: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24376: LD_VAR 0 2
24380: PUSH
24381: LD_VAR 0 4
24385: ARRAY
24386: PPUSH
24387: LD_VAR 0 1
24391: PPUSH
24392: CALL_OW 255
24396: PPUSH
24397: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24401: LD_VAR 0 2
24405: PUSH
24406: LD_VAR 0 4
24410: ARRAY
24411: PPUSH
24412: CALL_OW 141
// end ;
24416: GO 24248
24418: POP
24419: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24420: LD_VAR 0 1
24424: PPUSH
24425: LD_EXP 99
24429: PUSH
24430: LD_VAR 0 5
24434: ARRAY
24435: PUSH
24436: LD_INT 0
24438: PLUS
24439: PPUSH
24440: CALL_OW 505
// end ;
24444: LD_VAR 0 3
24448: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24449: LD_INT 0
24451: PPUSH
24452: PPUSH
24453: PPUSH
24454: PPUSH
// if not hack in hackTanks then
24455: LD_VAR 0 1
24459: PUSH
24460: LD_EXP 98
24464: IN
24465: NOT
24466: IFFALSE 24470
// exit ;
24468: GO 24710
// index := GetElementIndex ( hackTanks , hack ) ;
24470: LD_ADDR_VAR 0 4
24474: PUSH
24475: LD_EXP 98
24479: PPUSH
24480: LD_VAR 0 1
24484: PPUSH
24485: CALL 31571 0 2
24489: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24490: LD_ADDR_VAR 0 3
24494: PUSH
24495: DOUBLE
24496: LD_EXP 99
24500: PUSH
24501: LD_VAR 0 4
24505: ARRAY
24506: INC
24507: ST_TO_ADDR
24508: LD_INT 1
24510: PUSH
24511: FOR_DOWNTO
24512: IFFALSE 24684
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24514: LD_ADDR_VAR 0 5
24518: PUSH
24519: LD_EXP 99
24523: PUSH
24524: LD_VAR 0 4
24528: ARRAY
24529: PUSH
24530: LD_VAR 0 3
24534: ARRAY
24535: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24536: LD_VAR 0 5
24540: PUSH
24541: LD_INT 1
24543: ARRAY
24544: PPUSH
24545: CALL_OW 302
24549: NOT
24550: PUSH
24551: LD_VAR 0 5
24555: PUSH
24556: LD_INT 1
24558: ARRAY
24559: PPUSH
24560: CALL_OW 255
24564: PUSH
24565: LD_VAR 0 1
24569: PPUSH
24570: CALL_OW 255
24574: NONEQUAL
24575: OR
24576: IFFALSE 24682
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24578: LD_VAR 0 5
24582: PUSH
24583: LD_INT 1
24585: ARRAY
24586: PPUSH
24587: CALL_OW 305
24591: PUSH
24592: LD_VAR 0 5
24596: PUSH
24597: LD_INT 1
24599: ARRAY
24600: PPUSH
24601: CALL_OW 255
24605: PUSH
24606: LD_VAR 0 1
24610: PPUSH
24611: CALL_OW 255
24615: EQUAL
24616: AND
24617: IFFALSE 24641
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24619: LD_VAR 0 5
24623: PUSH
24624: LD_INT 1
24626: ARRAY
24627: PPUSH
24628: LD_VAR 0 5
24632: PUSH
24633: LD_INT 2
24635: ARRAY
24636: PPUSH
24637: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24641: LD_ADDR_EXP 99
24645: PUSH
24646: LD_EXP 99
24650: PPUSH
24651: LD_VAR 0 4
24655: PPUSH
24656: LD_EXP 99
24660: PUSH
24661: LD_VAR 0 4
24665: ARRAY
24666: PPUSH
24667: LD_VAR 0 3
24671: PPUSH
24672: CALL_OW 3
24676: PPUSH
24677: CALL_OW 1
24681: ST_TO_ADDR
// end ; end ;
24682: GO 24511
24684: POP
24685: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24686: LD_VAR 0 1
24690: PPUSH
24691: LD_EXP 99
24695: PUSH
24696: LD_VAR 0 4
24700: ARRAY
24701: PUSH
24702: LD_INT 0
24704: PLUS
24705: PPUSH
24706: CALL_OW 505
// end ;
24710: LD_VAR 0 2
24714: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24715: LD_INT 0
24717: PPUSH
24718: PPUSH
24719: PPUSH
24720: PPUSH
// if not hack in hackTanks then
24721: LD_VAR 0 1
24725: PUSH
24726: LD_EXP 98
24730: IN
24731: NOT
24732: IFFALSE 24736
// exit ;
24734: GO 24821
// index := GetElementIndex ( hackTanks , hack ) ;
24736: LD_ADDR_VAR 0 5
24740: PUSH
24741: LD_EXP 98
24745: PPUSH
24746: LD_VAR 0 1
24750: PPUSH
24751: CALL 31571 0 2
24755: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24756: LD_ADDR_VAR 0 4
24760: PUSH
24761: DOUBLE
24762: LD_INT 1
24764: DEC
24765: ST_TO_ADDR
24766: LD_EXP 99
24770: PUSH
24771: LD_VAR 0 5
24775: ARRAY
24776: PUSH
24777: FOR_TO
24778: IFFALSE 24819
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24780: LD_EXP 99
24784: PUSH
24785: LD_VAR 0 5
24789: ARRAY
24790: PUSH
24791: LD_VAR 0 4
24795: ARRAY
24796: PUSH
24797: LD_INT 1
24799: ARRAY
24800: PUSH
24801: LD_VAR 0 2
24805: EQUAL
24806: IFFALSE 24817
// KillUnit ( vehicle ) ;
24808: LD_VAR 0 2
24812: PPUSH
24813: CALL_OW 66
24817: GO 24777
24819: POP
24820: POP
// end ;
24821: LD_VAR 0 3
24825: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24826: LD_EXP 103
24830: NOT
24831: IFFALSE 24866
24833: GO 24835
24835: DISABLE
// begin initMiner := true ;
24836: LD_ADDR_EXP 103
24840: PUSH
24841: LD_INT 1
24843: ST_TO_ADDR
// minersList := [ ] ;
24844: LD_ADDR_EXP 104
24848: PUSH
24849: EMPTY
24850: ST_TO_ADDR
// minerMinesList := [ ] ;
24851: LD_ADDR_EXP 105
24855: PUSH
24856: EMPTY
24857: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24858: LD_ADDR_EXP 106
24862: PUSH
24863: LD_INT 5
24865: ST_TO_ADDR
// end ;
24866: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24867: LD_EXP 103
24871: PUSH
24872: LD_INT 34
24874: PUSH
24875: LD_EXP 114
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PPUSH
24884: CALL_OW 69
24888: AND
24889: IFFALSE 25352
24891: GO 24893
24893: DISABLE
24894: LD_INT 0
24896: PPUSH
24897: PPUSH
24898: PPUSH
24899: PPUSH
// begin enable ;
24900: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24901: LD_ADDR_VAR 0 1
24905: PUSH
24906: LD_INT 34
24908: PUSH
24909: LD_EXP 114
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PPUSH
24918: CALL_OW 69
24922: PUSH
24923: FOR_IN
24924: IFFALSE 24996
// begin if not i in minersList then
24926: LD_VAR 0 1
24930: PUSH
24931: LD_EXP 104
24935: IN
24936: NOT
24937: IFFALSE 24994
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24939: LD_ADDR_EXP 104
24943: PUSH
24944: LD_EXP 104
24948: PPUSH
24949: LD_EXP 104
24953: PUSH
24954: LD_INT 1
24956: PLUS
24957: PPUSH
24958: LD_VAR 0 1
24962: PPUSH
24963: CALL_OW 1
24967: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24968: LD_ADDR_EXP 105
24972: PUSH
24973: LD_EXP 105
24977: PPUSH
24978: LD_EXP 105
24982: PUSH
24983: LD_INT 1
24985: PLUS
24986: PPUSH
24987: EMPTY
24988: PPUSH
24989: CALL_OW 1
24993: ST_TO_ADDR
// end end ;
24994: GO 24923
24996: POP
24997: POP
// for i := minerMinesList downto 1 do
24998: LD_ADDR_VAR 0 1
25002: PUSH
25003: DOUBLE
25004: LD_EXP 105
25008: INC
25009: ST_TO_ADDR
25010: LD_INT 1
25012: PUSH
25013: FOR_DOWNTO
25014: IFFALSE 25350
// begin if IsLive ( minersList [ i ] ) then
25016: LD_EXP 104
25020: PUSH
25021: LD_VAR 0 1
25025: ARRAY
25026: PPUSH
25027: CALL_OW 300
25031: IFFALSE 25059
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25033: LD_EXP 104
25037: PUSH
25038: LD_VAR 0 1
25042: ARRAY
25043: PPUSH
25044: LD_EXP 105
25048: PUSH
25049: LD_VAR 0 1
25053: ARRAY
25054: PPUSH
25055: CALL_OW 505
// if not minerMinesList [ i ] then
25059: LD_EXP 105
25063: PUSH
25064: LD_VAR 0 1
25068: ARRAY
25069: NOT
25070: IFFALSE 25074
// continue ;
25072: GO 25013
// for j := minerMinesList [ i ] downto 1 do
25074: LD_ADDR_VAR 0 2
25078: PUSH
25079: DOUBLE
25080: LD_EXP 105
25084: PUSH
25085: LD_VAR 0 1
25089: ARRAY
25090: INC
25091: ST_TO_ADDR
25092: LD_INT 1
25094: PUSH
25095: FOR_DOWNTO
25096: IFFALSE 25346
// begin side := GetSide ( minersList [ i ] ) ;
25098: LD_ADDR_VAR 0 3
25102: PUSH
25103: LD_EXP 104
25107: PUSH
25108: LD_VAR 0 1
25112: ARRAY
25113: PPUSH
25114: CALL_OW 255
25118: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25119: LD_ADDR_VAR 0 4
25123: PUSH
25124: LD_EXP 105
25128: PUSH
25129: LD_VAR 0 1
25133: ARRAY
25134: PUSH
25135: LD_VAR 0 2
25139: ARRAY
25140: PUSH
25141: LD_INT 1
25143: ARRAY
25144: PPUSH
25145: LD_EXP 105
25149: PUSH
25150: LD_VAR 0 1
25154: ARRAY
25155: PUSH
25156: LD_VAR 0 2
25160: ARRAY
25161: PUSH
25162: LD_INT 2
25164: ARRAY
25165: PPUSH
25166: CALL_OW 428
25170: ST_TO_ADDR
// if not tmp then
25171: LD_VAR 0 4
25175: NOT
25176: IFFALSE 25180
// continue ;
25178: GO 25095
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25180: LD_VAR 0 4
25184: PUSH
25185: LD_INT 81
25187: PUSH
25188: LD_VAR 0 3
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PPUSH
25197: CALL_OW 69
25201: IN
25202: PUSH
25203: LD_EXP 105
25207: PUSH
25208: LD_VAR 0 1
25212: ARRAY
25213: PUSH
25214: LD_VAR 0 2
25218: ARRAY
25219: PUSH
25220: LD_INT 1
25222: ARRAY
25223: PPUSH
25224: LD_EXP 105
25228: PUSH
25229: LD_VAR 0 1
25233: ARRAY
25234: PUSH
25235: LD_VAR 0 2
25239: ARRAY
25240: PUSH
25241: LD_INT 2
25243: ARRAY
25244: PPUSH
25245: CALL_OW 458
25249: AND
25250: IFFALSE 25344
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25252: LD_EXP 105
25256: PUSH
25257: LD_VAR 0 1
25261: ARRAY
25262: PUSH
25263: LD_VAR 0 2
25267: ARRAY
25268: PUSH
25269: LD_INT 1
25271: ARRAY
25272: PPUSH
25273: LD_EXP 105
25277: PUSH
25278: LD_VAR 0 1
25282: ARRAY
25283: PUSH
25284: LD_VAR 0 2
25288: ARRAY
25289: PUSH
25290: LD_INT 2
25292: ARRAY
25293: PPUSH
25294: LD_VAR 0 3
25298: PPUSH
25299: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25303: LD_ADDR_EXP 105
25307: PUSH
25308: LD_EXP 105
25312: PPUSH
25313: LD_VAR 0 1
25317: PPUSH
25318: LD_EXP 105
25322: PUSH
25323: LD_VAR 0 1
25327: ARRAY
25328: PPUSH
25329: LD_VAR 0 2
25333: PPUSH
25334: CALL_OW 3
25338: PPUSH
25339: CALL_OW 1
25343: ST_TO_ADDR
// end ; end ;
25344: GO 25095
25346: POP
25347: POP
// end ;
25348: GO 25013
25350: POP
25351: POP
// end ;
25352: PPOPN 4
25354: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25355: LD_INT 0
25357: PPUSH
25358: PPUSH
// result := false ;
25359: LD_ADDR_VAR 0 4
25363: PUSH
25364: LD_INT 0
25366: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25367: LD_VAR 0 1
25371: PPUSH
25372: CALL_OW 264
25376: PUSH
25377: LD_EXP 114
25381: EQUAL
25382: NOT
25383: IFFALSE 25387
// exit ;
25385: GO 25627
// index := GetElementIndex ( minersList , unit ) ;
25387: LD_ADDR_VAR 0 5
25391: PUSH
25392: LD_EXP 104
25396: PPUSH
25397: LD_VAR 0 1
25401: PPUSH
25402: CALL 31571 0 2
25406: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25407: LD_EXP 105
25411: PUSH
25412: LD_VAR 0 5
25416: ARRAY
25417: PUSH
25418: LD_EXP 106
25422: GREATEREQUAL
25423: IFFALSE 25427
// exit ;
25425: GO 25627
// ComMoveXY ( unit , x , y ) ;
25427: LD_VAR 0 1
25431: PPUSH
25432: LD_VAR 0 2
25436: PPUSH
25437: LD_VAR 0 3
25441: PPUSH
25442: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25446: LD_INT 35
25448: PPUSH
25449: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25453: LD_VAR 0 1
25457: PPUSH
25458: LD_VAR 0 2
25462: PPUSH
25463: LD_VAR 0 3
25467: PPUSH
25468: CALL 61635 0 3
25472: NOT
25473: PUSH
25474: LD_VAR 0 1
25478: PPUSH
25479: CALL_OW 314
25483: AND
25484: IFFALSE 25488
// exit ;
25486: GO 25627
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25488: LD_VAR 0 2
25492: PPUSH
25493: LD_VAR 0 3
25497: PPUSH
25498: CALL_OW 428
25502: PUSH
25503: LD_VAR 0 1
25507: EQUAL
25508: PUSH
25509: LD_VAR 0 1
25513: PPUSH
25514: CALL_OW 314
25518: NOT
25519: AND
25520: IFFALSE 25446
// PlaySoundXY ( x , y , PlantMine ) ;
25522: LD_VAR 0 2
25526: PPUSH
25527: LD_VAR 0 3
25531: PPUSH
25532: LD_STRING PlantMine
25534: PPUSH
25535: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25539: LD_VAR 0 2
25543: PPUSH
25544: LD_VAR 0 3
25548: PPUSH
25549: LD_VAR 0 1
25553: PPUSH
25554: CALL_OW 255
25558: PPUSH
25559: LD_INT 0
25561: PPUSH
25562: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25566: LD_ADDR_EXP 105
25570: PUSH
25571: LD_EXP 105
25575: PPUSH
25576: LD_VAR 0 5
25580: PUSH
25581: LD_EXP 105
25585: PUSH
25586: LD_VAR 0 5
25590: ARRAY
25591: PUSH
25592: LD_INT 1
25594: PLUS
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PPUSH
25600: LD_VAR 0 2
25604: PUSH
25605: LD_VAR 0 3
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PPUSH
25614: CALL 31786 0 3
25618: ST_TO_ADDR
// result := true ;
25619: LD_ADDR_VAR 0 4
25623: PUSH
25624: LD_INT 1
25626: ST_TO_ADDR
// end ;
25627: LD_VAR 0 4
25631: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25632: LD_INT 0
25634: PPUSH
25635: PPUSH
25636: PPUSH
// if not unit in minersList then
25637: LD_VAR 0 1
25641: PUSH
25642: LD_EXP 104
25646: IN
25647: NOT
25648: IFFALSE 25652
// exit ;
25650: GO 26044
// index := GetElementIndex ( minersList , unit ) ;
25652: LD_ADDR_VAR 0 6
25656: PUSH
25657: LD_EXP 104
25661: PPUSH
25662: LD_VAR 0 1
25666: PPUSH
25667: CALL 31571 0 2
25671: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25672: LD_ADDR_VAR 0 5
25676: PUSH
25677: DOUBLE
25678: LD_EXP 105
25682: PUSH
25683: LD_VAR 0 6
25687: ARRAY
25688: INC
25689: ST_TO_ADDR
25690: LD_INT 1
25692: PUSH
25693: FOR_DOWNTO
25694: IFFALSE 25855
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25696: LD_EXP 105
25700: PUSH
25701: LD_VAR 0 6
25705: ARRAY
25706: PUSH
25707: LD_VAR 0 5
25711: ARRAY
25712: PUSH
25713: LD_INT 1
25715: ARRAY
25716: PUSH
25717: LD_VAR 0 2
25721: EQUAL
25722: PUSH
25723: LD_EXP 105
25727: PUSH
25728: LD_VAR 0 6
25732: ARRAY
25733: PUSH
25734: LD_VAR 0 5
25738: ARRAY
25739: PUSH
25740: LD_INT 2
25742: ARRAY
25743: PUSH
25744: LD_VAR 0 3
25748: EQUAL
25749: AND
25750: IFFALSE 25853
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25752: LD_EXP 105
25756: PUSH
25757: LD_VAR 0 6
25761: ARRAY
25762: PUSH
25763: LD_VAR 0 5
25767: ARRAY
25768: PUSH
25769: LD_INT 1
25771: ARRAY
25772: PPUSH
25773: LD_EXP 105
25777: PUSH
25778: LD_VAR 0 6
25782: ARRAY
25783: PUSH
25784: LD_VAR 0 5
25788: ARRAY
25789: PUSH
25790: LD_INT 2
25792: ARRAY
25793: PPUSH
25794: LD_VAR 0 1
25798: PPUSH
25799: CALL_OW 255
25803: PPUSH
25804: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25808: LD_ADDR_EXP 105
25812: PUSH
25813: LD_EXP 105
25817: PPUSH
25818: LD_VAR 0 6
25822: PPUSH
25823: LD_EXP 105
25827: PUSH
25828: LD_VAR 0 6
25832: ARRAY
25833: PPUSH
25834: LD_VAR 0 5
25838: PPUSH
25839: CALL_OW 3
25843: PPUSH
25844: CALL_OW 1
25848: ST_TO_ADDR
// exit ;
25849: POP
25850: POP
25851: GO 26044
// end ; end ;
25853: GO 25693
25855: POP
25856: POP
// for i := minerMinesList [ index ] downto 1 do
25857: LD_ADDR_VAR 0 5
25861: PUSH
25862: DOUBLE
25863: LD_EXP 105
25867: PUSH
25868: LD_VAR 0 6
25872: ARRAY
25873: INC
25874: ST_TO_ADDR
25875: LD_INT 1
25877: PUSH
25878: FOR_DOWNTO
25879: IFFALSE 26042
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25881: LD_EXP 105
25885: PUSH
25886: LD_VAR 0 6
25890: ARRAY
25891: PUSH
25892: LD_VAR 0 5
25896: ARRAY
25897: PUSH
25898: LD_INT 1
25900: ARRAY
25901: PPUSH
25902: LD_EXP 105
25906: PUSH
25907: LD_VAR 0 6
25911: ARRAY
25912: PUSH
25913: LD_VAR 0 5
25917: ARRAY
25918: PUSH
25919: LD_INT 2
25921: ARRAY
25922: PPUSH
25923: LD_VAR 0 2
25927: PPUSH
25928: LD_VAR 0 3
25932: PPUSH
25933: CALL_OW 298
25937: PUSH
25938: LD_INT 6
25940: LESS
25941: IFFALSE 26040
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25943: LD_EXP 105
25947: PUSH
25948: LD_VAR 0 6
25952: ARRAY
25953: PUSH
25954: LD_VAR 0 5
25958: ARRAY
25959: PUSH
25960: LD_INT 1
25962: ARRAY
25963: PPUSH
25964: LD_EXP 105
25968: PUSH
25969: LD_VAR 0 6
25973: ARRAY
25974: PUSH
25975: LD_VAR 0 5
25979: ARRAY
25980: PUSH
25981: LD_INT 2
25983: ARRAY
25984: PPUSH
25985: LD_VAR 0 1
25989: PPUSH
25990: CALL_OW 255
25994: PPUSH
25995: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25999: LD_ADDR_EXP 105
26003: PUSH
26004: LD_EXP 105
26008: PPUSH
26009: LD_VAR 0 6
26013: PPUSH
26014: LD_EXP 105
26018: PUSH
26019: LD_VAR 0 6
26023: ARRAY
26024: PPUSH
26025: LD_VAR 0 5
26029: PPUSH
26030: CALL_OW 3
26034: PPUSH
26035: CALL_OW 1
26039: ST_TO_ADDR
// end ; end ;
26040: GO 25878
26042: POP
26043: POP
// end ;
26044: LD_VAR 0 4
26048: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26049: LD_INT 0
26051: PPUSH
26052: PPUSH
26053: PPUSH
26054: PPUSH
26055: PPUSH
26056: PPUSH
26057: PPUSH
26058: PPUSH
26059: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26060: LD_VAR 0 1
26064: PPUSH
26065: CALL_OW 264
26069: PUSH
26070: LD_EXP 114
26074: EQUAL
26075: NOT
26076: PUSH
26077: LD_VAR 0 1
26081: PUSH
26082: LD_EXP 104
26086: IN
26087: NOT
26088: OR
26089: IFFALSE 26093
// exit ;
26091: GO 26415
// index := GetElementIndex ( minersList , unit ) ;
26093: LD_ADDR_VAR 0 6
26097: PUSH
26098: LD_EXP 104
26102: PPUSH
26103: LD_VAR 0 1
26107: PPUSH
26108: CALL 31571 0 2
26112: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26113: LD_ADDR_VAR 0 8
26117: PUSH
26118: LD_EXP 106
26122: PUSH
26123: LD_EXP 105
26127: PUSH
26128: LD_VAR 0 6
26132: ARRAY
26133: MINUS
26134: ST_TO_ADDR
// if not minesFreeAmount then
26135: LD_VAR 0 8
26139: NOT
26140: IFFALSE 26144
// exit ;
26142: GO 26415
// tmp := [ ] ;
26144: LD_ADDR_VAR 0 7
26148: PUSH
26149: EMPTY
26150: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26151: LD_ADDR_VAR 0 5
26155: PUSH
26156: DOUBLE
26157: LD_INT 1
26159: DEC
26160: ST_TO_ADDR
26161: LD_VAR 0 8
26165: PUSH
26166: FOR_TO
26167: IFFALSE 26362
// begin _d := rand ( 0 , 5 ) ;
26169: LD_ADDR_VAR 0 11
26173: PUSH
26174: LD_INT 0
26176: PPUSH
26177: LD_INT 5
26179: PPUSH
26180: CALL_OW 12
26184: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26185: LD_ADDR_VAR 0 12
26189: PUSH
26190: LD_INT 2
26192: PPUSH
26193: LD_INT 6
26195: PPUSH
26196: CALL_OW 12
26200: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26201: LD_ADDR_VAR 0 9
26205: PUSH
26206: LD_VAR 0 2
26210: PPUSH
26211: LD_VAR 0 11
26215: PPUSH
26216: LD_VAR 0 12
26220: PPUSH
26221: CALL_OW 272
26225: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26226: LD_ADDR_VAR 0 10
26230: PUSH
26231: LD_VAR 0 3
26235: PPUSH
26236: LD_VAR 0 11
26240: PPUSH
26241: LD_VAR 0 12
26245: PPUSH
26246: CALL_OW 273
26250: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26251: LD_VAR 0 9
26255: PPUSH
26256: LD_VAR 0 10
26260: PPUSH
26261: CALL_OW 488
26265: PUSH
26266: LD_VAR 0 9
26270: PUSH
26271: LD_VAR 0 10
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_VAR 0 7
26284: IN
26285: NOT
26286: AND
26287: PUSH
26288: LD_VAR 0 9
26292: PPUSH
26293: LD_VAR 0 10
26297: PPUSH
26298: CALL_OW 458
26302: NOT
26303: AND
26304: IFFALSE 26346
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26306: LD_ADDR_VAR 0 7
26310: PUSH
26311: LD_VAR 0 7
26315: PPUSH
26316: LD_VAR 0 7
26320: PUSH
26321: LD_INT 1
26323: PLUS
26324: PPUSH
26325: LD_VAR 0 9
26329: PUSH
26330: LD_VAR 0 10
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PPUSH
26339: CALL_OW 1
26343: ST_TO_ADDR
26344: GO 26360
// i := i - 1 ;
26346: LD_ADDR_VAR 0 5
26350: PUSH
26351: LD_VAR 0 5
26355: PUSH
26356: LD_INT 1
26358: MINUS
26359: ST_TO_ADDR
// end ;
26360: GO 26166
26362: POP
26363: POP
// for i in tmp do
26364: LD_ADDR_VAR 0 5
26368: PUSH
26369: LD_VAR 0 7
26373: PUSH
26374: FOR_IN
26375: IFFALSE 26413
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26377: LD_VAR 0 1
26381: PPUSH
26382: LD_VAR 0 5
26386: PUSH
26387: LD_INT 1
26389: ARRAY
26390: PPUSH
26391: LD_VAR 0 5
26395: PUSH
26396: LD_INT 2
26398: ARRAY
26399: PPUSH
26400: CALL 25355 0 3
26404: NOT
26405: IFFALSE 26411
// exit ;
26407: POP
26408: POP
26409: GO 26415
26411: GO 26374
26413: POP
26414: POP
// end ;
26415: LD_VAR 0 4
26419: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26420: LD_INT 0
26422: PPUSH
26423: PPUSH
26424: PPUSH
26425: PPUSH
26426: PPUSH
26427: PPUSH
26428: PPUSH
// if not GetClass ( unit ) = class_sniper then
26429: LD_VAR 0 1
26433: PPUSH
26434: CALL_OW 257
26438: PUSH
26439: LD_INT 5
26441: EQUAL
26442: NOT
26443: IFFALSE 26447
// exit ;
26445: GO 26835
// dist := 8 ;
26447: LD_ADDR_VAR 0 5
26451: PUSH
26452: LD_INT 8
26454: ST_TO_ADDR
// viewRange := 12 ;
26455: LD_ADDR_VAR 0 7
26459: PUSH
26460: LD_INT 12
26462: ST_TO_ADDR
// side := GetSide ( unit ) ;
26463: LD_ADDR_VAR 0 6
26467: PUSH
26468: LD_VAR 0 1
26472: PPUSH
26473: CALL_OW 255
26477: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26478: LD_INT 61
26480: PPUSH
26481: LD_VAR 0 6
26485: PPUSH
26486: CALL_OW 321
26490: PUSH
26491: LD_INT 2
26493: EQUAL
26494: IFFALSE 26504
// viewRange := 16 ;
26496: LD_ADDR_VAR 0 7
26500: PUSH
26501: LD_INT 16
26503: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26504: LD_VAR 0 1
26508: PPUSH
26509: LD_VAR 0 2
26513: PPUSH
26514: LD_VAR 0 3
26518: PPUSH
26519: CALL_OW 297
26523: PUSH
26524: LD_VAR 0 5
26528: GREATER
26529: IFFALSE 26608
// begin ComMoveXY ( unit , x , y ) ;
26531: LD_VAR 0 1
26535: PPUSH
26536: LD_VAR 0 2
26540: PPUSH
26541: LD_VAR 0 3
26545: PPUSH
26546: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26550: LD_INT 35
26552: PPUSH
26553: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26557: LD_VAR 0 1
26561: PPUSH
26562: LD_VAR 0 2
26566: PPUSH
26567: LD_VAR 0 3
26571: PPUSH
26572: CALL 61635 0 3
26576: NOT
26577: IFFALSE 26581
// exit ;
26579: GO 26835
// until GetDistUnitXY ( unit , x , y ) < dist ;
26581: LD_VAR 0 1
26585: PPUSH
26586: LD_VAR 0 2
26590: PPUSH
26591: LD_VAR 0 3
26595: PPUSH
26596: CALL_OW 297
26600: PUSH
26601: LD_VAR 0 5
26605: LESS
26606: IFFALSE 26550
// end ; ComTurnXY ( unit , x , y ) ;
26608: LD_VAR 0 1
26612: PPUSH
26613: LD_VAR 0 2
26617: PPUSH
26618: LD_VAR 0 3
26622: PPUSH
26623: CALL_OW 118
// wait ( 5 ) ;
26627: LD_INT 5
26629: PPUSH
26630: CALL_OW 67
// _d := GetDir ( unit ) ;
26634: LD_ADDR_VAR 0 10
26638: PUSH
26639: LD_VAR 0 1
26643: PPUSH
26644: CALL_OW 254
26648: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26649: LD_ADDR_VAR 0 8
26653: PUSH
26654: LD_VAR 0 1
26658: PPUSH
26659: CALL_OW 250
26663: PPUSH
26664: LD_VAR 0 10
26668: PPUSH
26669: LD_VAR 0 5
26673: PPUSH
26674: CALL_OW 272
26678: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26679: LD_ADDR_VAR 0 9
26683: PUSH
26684: LD_VAR 0 1
26688: PPUSH
26689: CALL_OW 251
26693: PPUSH
26694: LD_VAR 0 10
26698: PPUSH
26699: LD_VAR 0 5
26703: PPUSH
26704: CALL_OW 273
26708: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26709: LD_VAR 0 8
26713: PPUSH
26714: LD_VAR 0 9
26718: PPUSH
26719: CALL_OW 488
26723: NOT
26724: IFFALSE 26728
// exit ;
26726: GO 26835
// ComAnimCustom ( unit , 1 ) ;
26728: LD_VAR 0 1
26732: PPUSH
26733: LD_INT 1
26735: PPUSH
26736: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26740: LD_VAR 0 8
26744: PPUSH
26745: LD_VAR 0 9
26749: PPUSH
26750: LD_VAR 0 6
26754: PPUSH
26755: LD_VAR 0 7
26759: PPUSH
26760: CALL_OW 330
// repeat wait ( 1 ) ;
26764: LD_INT 1
26766: PPUSH
26767: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26771: LD_VAR 0 1
26775: PPUSH
26776: CALL_OW 316
26780: PUSH
26781: LD_VAR 0 1
26785: PPUSH
26786: CALL_OW 314
26790: OR
26791: PUSH
26792: LD_VAR 0 1
26796: PPUSH
26797: CALL_OW 302
26801: NOT
26802: OR
26803: PUSH
26804: LD_VAR 0 1
26808: PPUSH
26809: CALL_OW 301
26813: OR
26814: IFFALSE 26764
// RemoveSeeing ( _x , _y , side ) ;
26816: LD_VAR 0 8
26820: PPUSH
26821: LD_VAR 0 9
26825: PPUSH
26826: LD_VAR 0 6
26830: PPUSH
26831: CALL_OW 331
// end ; end_of_file
26835: LD_VAR 0 4
26839: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26840: LD_INT 0
26842: PPUSH
26843: PPUSH
// if exist_mode then
26844: LD_VAR 0 2
26848: IFFALSE 26873
// unit := CreateCharacter ( prefix & ident ) else
26850: LD_ADDR_VAR 0 5
26854: PUSH
26855: LD_VAR 0 3
26859: PUSH
26860: LD_VAR 0 1
26864: STR
26865: PPUSH
26866: CALL_OW 34
26870: ST_TO_ADDR
26871: GO 26888
// unit := NewCharacter ( ident ) ;
26873: LD_ADDR_VAR 0 5
26877: PUSH
26878: LD_VAR 0 1
26882: PPUSH
26883: CALL_OW 25
26887: ST_TO_ADDR
// result := unit ;
26888: LD_ADDR_VAR 0 4
26892: PUSH
26893: LD_VAR 0 5
26897: ST_TO_ADDR
// end ;
26898: LD_VAR 0 4
26902: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26903: LD_INT 0
26905: PPUSH
26906: PPUSH
// if not side or not nation then
26907: LD_VAR 0 1
26911: NOT
26912: PUSH
26913: LD_VAR 0 2
26917: NOT
26918: OR
26919: IFFALSE 26923
// exit ;
26921: GO 27687
// case nation of nation_american :
26923: LD_VAR 0 2
26927: PUSH
26928: LD_INT 1
26930: DOUBLE
26931: EQUAL
26932: IFTRUE 26936
26934: GO 27150
26936: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26937: LD_ADDR_VAR 0 4
26941: PUSH
26942: LD_INT 35
26944: PUSH
26945: LD_INT 45
26947: PUSH
26948: LD_INT 46
26950: PUSH
26951: LD_INT 47
26953: PUSH
26954: LD_INT 82
26956: PUSH
26957: LD_INT 83
26959: PUSH
26960: LD_INT 84
26962: PUSH
26963: LD_INT 85
26965: PUSH
26966: LD_INT 86
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: LD_INT 2
26974: PUSH
26975: LD_INT 6
26977: PUSH
26978: LD_INT 15
26980: PUSH
26981: LD_INT 16
26983: PUSH
26984: LD_INT 7
26986: PUSH
26987: LD_INT 12
26989: PUSH
26990: LD_INT 13
26992: PUSH
26993: LD_INT 10
26995: PUSH
26996: LD_INT 14
26998: PUSH
26999: LD_INT 20
27001: PUSH
27002: LD_INT 21
27004: PUSH
27005: LD_INT 22
27007: PUSH
27008: LD_INT 25
27010: PUSH
27011: LD_INT 32
27013: PUSH
27014: LD_INT 27
27016: PUSH
27017: LD_INT 36
27019: PUSH
27020: LD_INT 69
27022: PUSH
27023: LD_INT 39
27025: PUSH
27026: LD_INT 34
27028: PUSH
27029: LD_INT 40
27031: PUSH
27032: LD_INT 48
27034: PUSH
27035: LD_INT 49
27037: PUSH
27038: LD_INT 50
27040: PUSH
27041: LD_INT 51
27043: PUSH
27044: LD_INT 52
27046: PUSH
27047: LD_INT 53
27049: PUSH
27050: LD_INT 54
27052: PUSH
27053: LD_INT 55
27055: PUSH
27056: LD_INT 56
27058: PUSH
27059: LD_INT 57
27061: PUSH
27062: LD_INT 58
27064: PUSH
27065: LD_INT 59
27067: PUSH
27068: LD_INT 60
27070: PUSH
27071: LD_INT 61
27073: PUSH
27074: LD_INT 62
27076: PUSH
27077: LD_INT 80
27079: PUSH
27080: LD_INT 82
27082: PUSH
27083: LD_INT 83
27085: PUSH
27086: LD_INT 84
27088: PUSH
27089: LD_INT 85
27091: PUSH
27092: LD_INT 86
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: ST_TO_ADDR
27148: GO 27611
27150: LD_INT 2
27152: DOUBLE
27153: EQUAL
27154: IFTRUE 27158
27156: GO 27380
27158: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
27159: LD_ADDR_VAR 0 4
27163: PUSH
27164: LD_INT 35
27166: PUSH
27167: LD_INT 45
27169: PUSH
27170: LD_INT 46
27172: PUSH
27173: LD_INT 47
27175: PUSH
27176: LD_INT 82
27178: PUSH
27179: LD_INT 83
27181: PUSH
27182: LD_INT 84
27184: PUSH
27185: LD_INT 85
27187: PUSH
27188: LD_INT 87
27190: PUSH
27191: LD_INT 70
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: LD_INT 11
27199: PUSH
27200: LD_INT 3
27202: PUSH
27203: LD_INT 4
27205: PUSH
27206: LD_INT 5
27208: PUSH
27209: LD_INT 6
27211: PUSH
27212: LD_INT 15
27214: PUSH
27215: LD_INT 18
27217: PUSH
27218: LD_INT 7
27220: PUSH
27221: LD_INT 17
27223: PUSH
27224: LD_INT 8
27226: PUSH
27227: LD_INT 20
27229: PUSH
27230: LD_INT 21
27232: PUSH
27233: LD_INT 22
27235: PUSH
27236: LD_INT 72
27238: PUSH
27239: LD_INT 26
27241: PUSH
27242: LD_INT 69
27244: PUSH
27245: LD_INT 39
27247: PUSH
27248: LD_INT 40
27250: PUSH
27251: LD_INT 41
27253: PUSH
27254: LD_INT 42
27256: PUSH
27257: LD_INT 43
27259: PUSH
27260: LD_INT 48
27262: PUSH
27263: LD_INT 49
27265: PUSH
27266: LD_INT 50
27268: PUSH
27269: LD_INT 51
27271: PUSH
27272: LD_INT 52
27274: PUSH
27275: LD_INT 53
27277: PUSH
27278: LD_INT 54
27280: PUSH
27281: LD_INT 55
27283: PUSH
27284: LD_INT 56
27286: PUSH
27287: LD_INT 60
27289: PUSH
27290: LD_INT 61
27292: PUSH
27293: LD_INT 62
27295: PUSH
27296: LD_INT 66
27298: PUSH
27299: LD_INT 67
27301: PUSH
27302: LD_INT 68
27304: PUSH
27305: LD_INT 81
27307: PUSH
27308: LD_INT 82
27310: PUSH
27311: LD_INT 83
27313: PUSH
27314: LD_INT 84
27316: PUSH
27317: LD_INT 85
27319: PUSH
27320: LD_INT 87
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: ST_TO_ADDR
27378: GO 27611
27380: LD_INT 3
27382: DOUBLE
27383: EQUAL
27384: IFTRUE 27388
27386: GO 27610
27388: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27389: LD_ADDR_VAR 0 4
27393: PUSH
27394: LD_INT 46
27396: PUSH
27397: LD_INT 47
27399: PUSH
27400: LD_INT 1
27402: PUSH
27403: LD_INT 2
27405: PUSH
27406: LD_INT 82
27408: PUSH
27409: LD_INT 83
27411: PUSH
27412: LD_INT 84
27414: PUSH
27415: LD_INT 85
27417: PUSH
27418: LD_INT 86
27420: PUSH
27421: LD_INT 11
27423: PUSH
27424: LD_INT 9
27426: PUSH
27427: LD_INT 20
27429: PUSH
27430: LD_INT 19
27432: PUSH
27433: LD_INT 21
27435: PUSH
27436: LD_INT 24
27438: PUSH
27439: LD_INT 22
27441: PUSH
27442: LD_INT 25
27444: PUSH
27445: LD_INT 28
27447: PUSH
27448: LD_INT 29
27450: PUSH
27451: LD_INT 30
27453: PUSH
27454: LD_INT 31
27456: PUSH
27457: LD_INT 37
27459: PUSH
27460: LD_INT 38
27462: PUSH
27463: LD_INT 32
27465: PUSH
27466: LD_INT 27
27468: PUSH
27469: LD_INT 33
27471: PUSH
27472: LD_INT 69
27474: PUSH
27475: LD_INT 39
27477: PUSH
27478: LD_INT 34
27480: PUSH
27481: LD_INT 40
27483: PUSH
27484: LD_INT 71
27486: PUSH
27487: LD_INT 23
27489: PUSH
27490: LD_INT 44
27492: PUSH
27493: LD_INT 48
27495: PUSH
27496: LD_INT 49
27498: PUSH
27499: LD_INT 50
27501: PUSH
27502: LD_INT 51
27504: PUSH
27505: LD_INT 52
27507: PUSH
27508: LD_INT 53
27510: PUSH
27511: LD_INT 54
27513: PUSH
27514: LD_INT 55
27516: PUSH
27517: LD_INT 56
27519: PUSH
27520: LD_INT 57
27522: PUSH
27523: LD_INT 58
27525: PUSH
27526: LD_INT 59
27528: PUSH
27529: LD_INT 63
27531: PUSH
27532: LD_INT 64
27534: PUSH
27535: LD_INT 65
27537: PUSH
27538: LD_INT 82
27540: PUSH
27541: LD_INT 83
27543: PUSH
27544: LD_INT 84
27546: PUSH
27547: LD_INT 85
27549: PUSH
27550: LD_INT 86
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: ST_TO_ADDR
27608: GO 27611
27610: POP
// if state > - 1 and state < 3 then
27611: LD_VAR 0 3
27615: PUSH
27616: LD_INT 1
27618: NEG
27619: GREATER
27620: PUSH
27621: LD_VAR 0 3
27625: PUSH
27626: LD_INT 3
27628: LESS
27629: AND
27630: IFFALSE 27687
// for i in result do
27632: LD_ADDR_VAR 0 5
27636: PUSH
27637: LD_VAR 0 4
27641: PUSH
27642: FOR_IN
27643: IFFALSE 27685
// if GetTech ( i , side ) <> state then
27645: LD_VAR 0 5
27649: PPUSH
27650: LD_VAR 0 1
27654: PPUSH
27655: CALL_OW 321
27659: PUSH
27660: LD_VAR 0 3
27664: NONEQUAL
27665: IFFALSE 27683
// result := result diff i ;
27667: LD_ADDR_VAR 0 4
27671: PUSH
27672: LD_VAR 0 4
27676: PUSH
27677: LD_VAR 0 5
27681: DIFF
27682: ST_TO_ADDR
27683: GO 27642
27685: POP
27686: POP
// end ;
27687: LD_VAR 0 4
27691: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27692: LD_INT 0
27694: PPUSH
27695: PPUSH
27696: PPUSH
// result := true ;
27697: LD_ADDR_VAR 0 3
27701: PUSH
27702: LD_INT 1
27704: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27705: LD_ADDR_VAR 0 5
27709: PUSH
27710: LD_VAR 0 2
27714: PPUSH
27715: CALL_OW 480
27719: ST_TO_ADDR
// if not tmp then
27720: LD_VAR 0 5
27724: NOT
27725: IFFALSE 27729
// exit ;
27727: GO 27778
// for i in tmp do
27729: LD_ADDR_VAR 0 4
27733: PUSH
27734: LD_VAR 0 5
27738: PUSH
27739: FOR_IN
27740: IFFALSE 27776
// if GetTech ( i , side ) <> state_researched then
27742: LD_VAR 0 4
27746: PPUSH
27747: LD_VAR 0 1
27751: PPUSH
27752: CALL_OW 321
27756: PUSH
27757: LD_INT 2
27759: NONEQUAL
27760: IFFALSE 27774
// begin result := false ;
27762: LD_ADDR_VAR 0 3
27766: PUSH
27767: LD_INT 0
27769: ST_TO_ADDR
// exit ;
27770: POP
27771: POP
27772: GO 27778
// end ;
27774: GO 27739
27776: POP
27777: POP
// end ;
27778: LD_VAR 0 3
27782: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27783: LD_INT 0
27785: PPUSH
27786: PPUSH
27787: PPUSH
27788: PPUSH
27789: PPUSH
27790: PPUSH
27791: PPUSH
27792: PPUSH
27793: PPUSH
27794: PPUSH
27795: PPUSH
27796: PPUSH
27797: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27798: LD_VAR 0 1
27802: NOT
27803: PUSH
27804: LD_VAR 0 1
27808: PPUSH
27809: CALL_OW 257
27813: PUSH
27814: LD_INT 9
27816: NONEQUAL
27817: OR
27818: IFFALSE 27822
// exit ;
27820: GO 28395
// side := GetSide ( unit ) ;
27822: LD_ADDR_VAR 0 9
27826: PUSH
27827: LD_VAR 0 1
27831: PPUSH
27832: CALL_OW 255
27836: ST_TO_ADDR
// tech_space := tech_spacanom ;
27837: LD_ADDR_VAR 0 12
27841: PUSH
27842: LD_INT 29
27844: ST_TO_ADDR
// tech_time := tech_taurad ;
27845: LD_ADDR_VAR 0 13
27849: PUSH
27850: LD_INT 28
27852: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27853: LD_ADDR_VAR 0 11
27857: PUSH
27858: LD_VAR 0 1
27862: PPUSH
27863: CALL_OW 310
27867: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27868: LD_VAR 0 11
27872: PPUSH
27873: CALL_OW 247
27877: PUSH
27878: LD_INT 2
27880: EQUAL
27881: IFFALSE 27885
// exit ;
27883: GO 28395
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27885: LD_ADDR_VAR 0 8
27889: PUSH
27890: LD_INT 81
27892: PUSH
27893: LD_VAR 0 9
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 3
27904: PUSH
27905: LD_INT 21
27907: PUSH
27908: LD_INT 3
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PPUSH
27923: CALL_OW 69
27927: ST_TO_ADDR
// if not tmp then
27928: LD_VAR 0 8
27932: NOT
27933: IFFALSE 27937
// exit ;
27935: GO 28395
// if in_unit then
27937: LD_VAR 0 11
27941: IFFALSE 27965
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27943: LD_ADDR_VAR 0 10
27947: PUSH
27948: LD_VAR 0 8
27952: PPUSH
27953: LD_VAR 0 11
27957: PPUSH
27958: CALL_OW 74
27962: ST_TO_ADDR
27963: GO 27985
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27965: LD_ADDR_VAR 0 10
27969: PUSH
27970: LD_VAR 0 8
27974: PPUSH
27975: LD_VAR 0 1
27979: PPUSH
27980: CALL_OW 74
27984: ST_TO_ADDR
// if not enemy then
27985: LD_VAR 0 10
27989: NOT
27990: IFFALSE 27994
// exit ;
27992: GO 28395
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27994: LD_VAR 0 11
27998: PUSH
27999: LD_VAR 0 11
28003: PPUSH
28004: LD_VAR 0 10
28008: PPUSH
28009: CALL_OW 296
28013: PUSH
28014: LD_INT 13
28016: GREATER
28017: AND
28018: PUSH
28019: LD_VAR 0 1
28023: PPUSH
28024: LD_VAR 0 10
28028: PPUSH
28029: CALL_OW 296
28033: PUSH
28034: LD_INT 12
28036: GREATER
28037: OR
28038: IFFALSE 28042
// exit ;
28040: GO 28395
// missile := [ 1 ] ;
28042: LD_ADDR_VAR 0 14
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: EMPTY
28051: LIST
28052: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28053: LD_VAR 0 9
28057: PPUSH
28058: LD_VAR 0 12
28062: PPUSH
28063: CALL_OW 325
28067: IFFALSE 28096
// missile := Insert ( missile , missile + 1 , 2 ) ;
28069: LD_ADDR_VAR 0 14
28073: PUSH
28074: LD_VAR 0 14
28078: PPUSH
28079: LD_VAR 0 14
28083: PUSH
28084: LD_INT 1
28086: PLUS
28087: PPUSH
28088: LD_INT 2
28090: PPUSH
28091: CALL_OW 2
28095: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28096: LD_VAR 0 9
28100: PPUSH
28101: LD_VAR 0 13
28105: PPUSH
28106: CALL_OW 325
28110: PUSH
28111: LD_VAR 0 10
28115: PPUSH
28116: CALL_OW 255
28120: PPUSH
28121: LD_VAR 0 13
28125: PPUSH
28126: CALL_OW 325
28130: NOT
28131: AND
28132: IFFALSE 28161
// missile := Insert ( missile , missile + 1 , 3 ) ;
28134: LD_ADDR_VAR 0 14
28138: PUSH
28139: LD_VAR 0 14
28143: PPUSH
28144: LD_VAR 0 14
28148: PUSH
28149: LD_INT 1
28151: PLUS
28152: PPUSH
28153: LD_INT 3
28155: PPUSH
28156: CALL_OW 2
28160: ST_TO_ADDR
// if missile < 2 then
28161: LD_VAR 0 14
28165: PUSH
28166: LD_INT 2
28168: LESS
28169: IFFALSE 28173
// exit ;
28171: GO 28395
// x := GetX ( enemy ) ;
28173: LD_ADDR_VAR 0 4
28177: PUSH
28178: LD_VAR 0 10
28182: PPUSH
28183: CALL_OW 250
28187: ST_TO_ADDR
// y := GetY ( enemy ) ;
28188: LD_ADDR_VAR 0 5
28192: PUSH
28193: LD_VAR 0 10
28197: PPUSH
28198: CALL_OW 251
28202: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28203: LD_ADDR_VAR 0 6
28207: PUSH
28208: LD_VAR 0 4
28212: PUSH
28213: LD_INT 1
28215: NEG
28216: PPUSH
28217: LD_INT 1
28219: PPUSH
28220: CALL_OW 12
28224: PLUS
28225: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28226: LD_ADDR_VAR 0 7
28230: PUSH
28231: LD_VAR 0 5
28235: PUSH
28236: LD_INT 1
28238: NEG
28239: PPUSH
28240: LD_INT 1
28242: PPUSH
28243: CALL_OW 12
28247: PLUS
28248: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28249: LD_VAR 0 6
28253: PPUSH
28254: LD_VAR 0 7
28258: PPUSH
28259: CALL_OW 488
28263: NOT
28264: IFFALSE 28286
// begin _x := x ;
28266: LD_ADDR_VAR 0 6
28270: PUSH
28271: LD_VAR 0 4
28275: ST_TO_ADDR
// _y := y ;
28276: LD_ADDR_VAR 0 7
28280: PUSH
28281: LD_VAR 0 5
28285: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28286: LD_ADDR_VAR 0 3
28290: PUSH
28291: LD_INT 1
28293: PPUSH
28294: LD_VAR 0 14
28298: PPUSH
28299: CALL_OW 12
28303: ST_TO_ADDR
// case i of 1 :
28304: LD_VAR 0 3
28308: PUSH
28309: LD_INT 1
28311: DOUBLE
28312: EQUAL
28313: IFTRUE 28317
28315: GO 28334
28317: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28318: LD_VAR 0 1
28322: PPUSH
28323: LD_VAR 0 10
28327: PPUSH
28328: CALL_OW 115
28332: GO 28395
28334: LD_INT 2
28336: DOUBLE
28337: EQUAL
28338: IFTRUE 28342
28340: GO 28364
28342: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28343: LD_VAR 0 1
28347: PPUSH
28348: LD_VAR 0 6
28352: PPUSH
28353: LD_VAR 0 7
28357: PPUSH
28358: CALL_OW 153
28362: GO 28395
28364: LD_INT 3
28366: DOUBLE
28367: EQUAL
28368: IFTRUE 28372
28370: GO 28394
28372: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28373: LD_VAR 0 1
28377: PPUSH
28378: LD_VAR 0 6
28382: PPUSH
28383: LD_VAR 0 7
28387: PPUSH
28388: CALL_OW 154
28392: GO 28395
28394: POP
// end ;
28395: LD_VAR 0 2
28399: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28400: LD_INT 0
28402: PPUSH
28403: PPUSH
28404: PPUSH
28405: PPUSH
28406: PPUSH
28407: PPUSH
// if not unit or not building then
28408: LD_VAR 0 1
28412: NOT
28413: PUSH
28414: LD_VAR 0 2
28418: NOT
28419: OR
28420: IFFALSE 28424
// exit ;
28422: GO 28582
// x := GetX ( building ) ;
28424: LD_ADDR_VAR 0 5
28428: PUSH
28429: LD_VAR 0 2
28433: PPUSH
28434: CALL_OW 250
28438: ST_TO_ADDR
// y := GetY ( building ) ;
28439: LD_ADDR_VAR 0 6
28443: PUSH
28444: LD_VAR 0 2
28448: PPUSH
28449: CALL_OW 251
28453: ST_TO_ADDR
// for i = 0 to 5 do
28454: LD_ADDR_VAR 0 4
28458: PUSH
28459: DOUBLE
28460: LD_INT 0
28462: DEC
28463: ST_TO_ADDR
28464: LD_INT 5
28466: PUSH
28467: FOR_TO
28468: IFFALSE 28580
// begin _x := ShiftX ( x , i , 3 ) ;
28470: LD_ADDR_VAR 0 7
28474: PUSH
28475: LD_VAR 0 5
28479: PPUSH
28480: LD_VAR 0 4
28484: PPUSH
28485: LD_INT 3
28487: PPUSH
28488: CALL_OW 272
28492: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28493: LD_ADDR_VAR 0 8
28497: PUSH
28498: LD_VAR 0 6
28502: PPUSH
28503: LD_VAR 0 4
28507: PPUSH
28508: LD_INT 3
28510: PPUSH
28511: CALL_OW 273
28515: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28516: LD_VAR 0 7
28520: PPUSH
28521: LD_VAR 0 8
28525: PPUSH
28526: CALL_OW 488
28530: NOT
28531: IFFALSE 28535
// continue ;
28533: GO 28467
// if HexInfo ( _x , _y ) = 0 then
28535: LD_VAR 0 7
28539: PPUSH
28540: LD_VAR 0 8
28544: PPUSH
28545: CALL_OW 428
28549: PUSH
28550: LD_INT 0
28552: EQUAL
28553: IFFALSE 28578
// begin ComMoveXY ( unit , _x , _y ) ;
28555: LD_VAR 0 1
28559: PPUSH
28560: LD_VAR 0 7
28564: PPUSH
28565: LD_VAR 0 8
28569: PPUSH
28570: CALL_OW 111
// exit ;
28574: POP
28575: POP
28576: GO 28582
// end ; end ;
28578: GO 28467
28580: POP
28581: POP
// end ;
28582: LD_VAR 0 3
28586: RET
// export function ScanBase ( side , base_area ) ; begin
28587: LD_INT 0
28589: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28590: LD_ADDR_VAR 0 3
28594: PUSH
28595: LD_VAR 0 2
28599: PPUSH
28600: LD_INT 81
28602: PUSH
28603: LD_VAR 0 1
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PPUSH
28612: CALL_OW 70
28616: ST_TO_ADDR
// end ;
28617: LD_VAR 0 3
28621: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28622: LD_INT 0
28624: PPUSH
28625: PPUSH
28626: PPUSH
28627: PPUSH
// result := false ;
28628: LD_ADDR_VAR 0 2
28632: PUSH
28633: LD_INT 0
28635: ST_TO_ADDR
// side := GetSide ( unit ) ;
28636: LD_ADDR_VAR 0 3
28640: PUSH
28641: LD_VAR 0 1
28645: PPUSH
28646: CALL_OW 255
28650: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28651: LD_ADDR_VAR 0 4
28655: PUSH
28656: LD_VAR 0 1
28660: PPUSH
28661: CALL_OW 248
28665: ST_TO_ADDR
// case nat of 1 :
28666: LD_VAR 0 4
28670: PUSH
28671: LD_INT 1
28673: DOUBLE
28674: EQUAL
28675: IFTRUE 28679
28677: GO 28690
28679: POP
// tech := tech_lassight ; 2 :
28680: LD_ADDR_VAR 0 5
28684: PUSH
28685: LD_INT 12
28687: ST_TO_ADDR
28688: GO 28729
28690: LD_INT 2
28692: DOUBLE
28693: EQUAL
28694: IFTRUE 28698
28696: GO 28709
28698: POP
// tech := tech_mortar ; 3 :
28699: LD_ADDR_VAR 0 5
28703: PUSH
28704: LD_INT 41
28706: ST_TO_ADDR
28707: GO 28729
28709: LD_INT 3
28711: DOUBLE
28712: EQUAL
28713: IFTRUE 28717
28715: GO 28728
28717: POP
// tech := tech_bazooka ; end ;
28718: LD_ADDR_VAR 0 5
28722: PUSH
28723: LD_INT 44
28725: ST_TO_ADDR
28726: GO 28729
28728: POP
// if Researched ( side , tech ) then
28729: LD_VAR 0 3
28733: PPUSH
28734: LD_VAR 0 5
28738: PPUSH
28739: CALL_OW 325
28743: IFFALSE 28770
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28745: LD_ADDR_VAR 0 2
28749: PUSH
28750: LD_INT 5
28752: PUSH
28753: LD_INT 8
28755: PUSH
28756: LD_INT 9
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: LIST
28763: PUSH
28764: LD_VAR 0 4
28768: ARRAY
28769: ST_TO_ADDR
// end ;
28770: LD_VAR 0 2
28774: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28775: LD_INT 0
28777: PPUSH
28778: PPUSH
28779: PPUSH
// if not mines then
28780: LD_VAR 0 2
28784: NOT
28785: IFFALSE 28789
// exit ;
28787: GO 28933
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28789: LD_ADDR_VAR 0 5
28793: PUSH
28794: LD_INT 81
28796: PUSH
28797: LD_VAR 0 1
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 3
28808: PUSH
28809: LD_INT 21
28811: PUSH
28812: LD_INT 3
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PPUSH
28827: CALL_OW 69
28831: ST_TO_ADDR
// for i in mines do
28832: LD_ADDR_VAR 0 4
28836: PUSH
28837: LD_VAR 0 2
28841: PUSH
28842: FOR_IN
28843: IFFALSE 28931
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28845: LD_VAR 0 4
28849: PUSH
28850: LD_INT 1
28852: ARRAY
28853: PPUSH
28854: LD_VAR 0 4
28858: PUSH
28859: LD_INT 2
28861: ARRAY
28862: PPUSH
28863: CALL_OW 458
28867: NOT
28868: IFFALSE 28872
// continue ;
28870: GO 28842
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28872: LD_VAR 0 4
28876: PUSH
28877: LD_INT 1
28879: ARRAY
28880: PPUSH
28881: LD_VAR 0 4
28885: PUSH
28886: LD_INT 2
28888: ARRAY
28889: PPUSH
28890: CALL_OW 428
28894: PUSH
28895: LD_VAR 0 5
28899: IN
28900: IFFALSE 28929
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28902: LD_VAR 0 4
28906: PUSH
28907: LD_INT 1
28909: ARRAY
28910: PPUSH
28911: LD_VAR 0 4
28915: PUSH
28916: LD_INT 2
28918: ARRAY
28919: PPUSH
28920: LD_VAR 0 1
28924: PPUSH
28925: CALL_OW 456
// end ;
28929: GO 28842
28931: POP
28932: POP
// end ;
28933: LD_VAR 0 3
28937: RET
// export function Count ( array ) ; var i ; begin
28938: LD_INT 0
28940: PPUSH
28941: PPUSH
// result := 0 ;
28942: LD_ADDR_VAR 0 2
28946: PUSH
28947: LD_INT 0
28949: ST_TO_ADDR
// for i in array do
28950: LD_ADDR_VAR 0 3
28954: PUSH
28955: LD_VAR 0 1
28959: PUSH
28960: FOR_IN
28961: IFFALSE 28985
// if i then
28963: LD_VAR 0 3
28967: IFFALSE 28983
// result := result + 1 ;
28969: LD_ADDR_VAR 0 2
28973: PUSH
28974: LD_VAR 0 2
28978: PUSH
28979: LD_INT 1
28981: PLUS
28982: ST_TO_ADDR
28983: GO 28960
28985: POP
28986: POP
// end ;
28987: LD_VAR 0 2
28991: RET
// export function IsEmpty ( building ) ; begin
28992: LD_INT 0
28994: PPUSH
// if not building then
28995: LD_VAR 0 1
28999: NOT
29000: IFFALSE 29004
// exit ;
29002: GO 29047
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29004: LD_ADDR_VAR 0 2
29008: PUSH
29009: LD_VAR 0 1
29013: PUSH
29014: LD_INT 22
29016: PUSH
29017: LD_VAR 0 1
29021: PPUSH
29022: CALL_OW 255
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 58
29033: PUSH
29034: EMPTY
29035: LIST
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PPUSH
29041: CALL_OW 69
29045: IN
29046: ST_TO_ADDR
// end ;
29047: LD_VAR 0 2
29051: RET
// export function IsNotFull ( building ) ; begin
29052: LD_INT 0
29054: PPUSH
// if not building then
29055: LD_VAR 0 1
29059: NOT
29060: IFFALSE 29064
// exit ;
29062: GO 29083
// result := UnitsInside ( building ) < 6 ;
29064: LD_ADDR_VAR 0 2
29068: PUSH
29069: LD_VAR 0 1
29073: PPUSH
29074: CALL_OW 313
29078: PUSH
29079: LD_INT 6
29081: LESS
29082: ST_TO_ADDR
// end ;
29083: LD_VAR 0 2
29087: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29088: LD_INT 0
29090: PPUSH
29091: PPUSH
29092: PPUSH
29093: PPUSH
// tmp := [ ] ;
29094: LD_ADDR_VAR 0 3
29098: PUSH
29099: EMPTY
29100: ST_TO_ADDR
// list := [ ] ;
29101: LD_ADDR_VAR 0 5
29105: PUSH
29106: EMPTY
29107: ST_TO_ADDR
// for i = 16 to 25 do
29108: LD_ADDR_VAR 0 4
29112: PUSH
29113: DOUBLE
29114: LD_INT 16
29116: DEC
29117: ST_TO_ADDR
29118: LD_INT 25
29120: PUSH
29121: FOR_TO
29122: IFFALSE 29195
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29124: LD_ADDR_VAR 0 3
29128: PUSH
29129: LD_VAR 0 3
29133: PUSH
29134: LD_INT 22
29136: PUSH
29137: LD_VAR 0 1
29141: PPUSH
29142: CALL_OW 255
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 91
29153: PUSH
29154: LD_VAR 0 1
29158: PUSH
29159: LD_INT 6
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 30
29169: PUSH
29170: LD_VAR 0 4
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: LIST
29183: PUSH
29184: EMPTY
29185: LIST
29186: PPUSH
29187: CALL_OW 69
29191: ADD
29192: ST_TO_ADDR
29193: GO 29121
29195: POP
29196: POP
// for i = 1 to tmp do
29197: LD_ADDR_VAR 0 4
29201: PUSH
29202: DOUBLE
29203: LD_INT 1
29205: DEC
29206: ST_TO_ADDR
29207: LD_VAR 0 3
29211: PUSH
29212: FOR_TO
29213: IFFALSE 29301
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29215: LD_ADDR_VAR 0 5
29219: PUSH
29220: LD_VAR 0 5
29224: PUSH
29225: LD_VAR 0 3
29229: PUSH
29230: LD_VAR 0 4
29234: ARRAY
29235: PPUSH
29236: CALL_OW 266
29240: PUSH
29241: LD_VAR 0 3
29245: PUSH
29246: LD_VAR 0 4
29250: ARRAY
29251: PPUSH
29252: CALL_OW 250
29256: PUSH
29257: LD_VAR 0 3
29261: PUSH
29262: LD_VAR 0 4
29266: ARRAY
29267: PPUSH
29268: CALL_OW 251
29272: PUSH
29273: LD_VAR 0 3
29277: PUSH
29278: LD_VAR 0 4
29282: ARRAY
29283: PPUSH
29284: CALL_OW 254
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: PUSH
29295: EMPTY
29296: LIST
29297: ADD
29298: ST_TO_ADDR
29299: GO 29212
29301: POP
29302: POP
// result := list ;
29303: LD_ADDR_VAR 0 2
29307: PUSH
29308: LD_VAR 0 5
29312: ST_TO_ADDR
// end ;
29313: LD_VAR 0 2
29317: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29318: LD_INT 0
29320: PPUSH
29321: PPUSH
29322: PPUSH
29323: PPUSH
29324: PPUSH
29325: PPUSH
29326: PPUSH
// if not factory then
29327: LD_VAR 0 1
29331: NOT
29332: IFFALSE 29336
// exit ;
29334: GO 29929
// if control = control_apeman then
29336: LD_VAR 0 4
29340: PUSH
29341: LD_INT 5
29343: EQUAL
29344: IFFALSE 29453
// begin tmp := UnitsInside ( factory ) ;
29346: LD_ADDR_VAR 0 8
29350: PUSH
29351: LD_VAR 0 1
29355: PPUSH
29356: CALL_OW 313
29360: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29361: LD_VAR 0 8
29365: PPUSH
29366: LD_INT 25
29368: PUSH
29369: LD_INT 12
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PPUSH
29376: CALL_OW 72
29380: NOT
29381: IFFALSE 29391
// control := control_manual ;
29383: LD_ADDR_VAR 0 4
29387: PUSH
29388: LD_INT 1
29390: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29391: LD_ADDR_VAR 0 8
29395: PUSH
29396: LD_VAR 0 1
29400: PPUSH
29401: CALL 29088 0 1
29405: ST_TO_ADDR
// if tmp then
29406: LD_VAR 0 8
29410: IFFALSE 29453
// begin for i in tmp do
29412: LD_ADDR_VAR 0 7
29416: PUSH
29417: LD_VAR 0 8
29421: PUSH
29422: FOR_IN
29423: IFFALSE 29451
// if i [ 1 ] = b_ext_radio then
29425: LD_VAR 0 7
29429: PUSH
29430: LD_INT 1
29432: ARRAY
29433: PUSH
29434: LD_INT 22
29436: EQUAL
29437: IFFALSE 29449
// begin control := control_remote ;
29439: LD_ADDR_VAR 0 4
29443: PUSH
29444: LD_INT 2
29446: ST_TO_ADDR
// break ;
29447: GO 29451
// end ;
29449: GO 29422
29451: POP
29452: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29453: LD_VAR 0 1
29457: PPUSH
29458: LD_VAR 0 2
29462: PPUSH
29463: LD_VAR 0 3
29467: PPUSH
29468: LD_VAR 0 4
29472: PPUSH
29473: LD_VAR 0 5
29477: PPUSH
29478: CALL_OW 448
29482: IFFALSE 29517
// begin result := [ chassis , engine , control , weapon ] ;
29484: LD_ADDR_VAR 0 6
29488: PUSH
29489: LD_VAR 0 2
29493: PUSH
29494: LD_VAR 0 3
29498: PUSH
29499: LD_VAR 0 4
29503: PUSH
29504: LD_VAR 0 5
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: ST_TO_ADDR
// exit ;
29515: GO 29929
// end ; _chassis := AvailableChassisList ( factory ) ;
29517: LD_ADDR_VAR 0 9
29521: PUSH
29522: LD_VAR 0 1
29526: PPUSH
29527: CALL_OW 475
29531: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29532: LD_ADDR_VAR 0 11
29536: PUSH
29537: LD_VAR 0 1
29541: PPUSH
29542: CALL_OW 476
29546: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29547: LD_ADDR_VAR 0 12
29551: PUSH
29552: LD_VAR 0 1
29556: PPUSH
29557: CALL_OW 477
29561: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29562: LD_ADDR_VAR 0 10
29566: PUSH
29567: LD_VAR 0 1
29571: PPUSH
29572: CALL_OW 478
29576: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29577: LD_VAR 0 9
29581: NOT
29582: PUSH
29583: LD_VAR 0 11
29587: NOT
29588: OR
29589: PUSH
29590: LD_VAR 0 12
29594: NOT
29595: OR
29596: PUSH
29597: LD_VAR 0 10
29601: NOT
29602: OR
29603: IFFALSE 29638
// begin result := [ chassis , engine , control , weapon ] ;
29605: LD_ADDR_VAR 0 6
29609: PUSH
29610: LD_VAR 0 2
29614: PUSH
29615: LD_VAR 0 3
29619: PUSH
29620: LD_VAR 0 4
29624: PUSH
29625: LD_VAR 0 5
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: ST_TO_ADDR
// exit ;
29636: GO 29929
// end ; if not chassis in _chassis then
29638: LD_VAR 0 2
29642: PUSH
29643: LD_VAR 0 9
29647: IN
29648: NOT
29649: IFFALSE 29675
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29651: LD_ADDR_VAR 0 2
29655: PUSH
29656: LD_VAR 0 9
29660: PUSH
29661: LD_INT 1
29663: PPUSH
29664: LD_VAR 0 9
29668: PPUSH
29669: CALL_OW 12
29673: ARRAY
29674: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29675: LD_VAR 0 2
29679: PPUSH
29680: LD_VAR 0 3
29684: PPUSH
29685: CALL 29934 0 2
29689: NOT
29690: IFFALSE 29749
// repeat engine := _engine [ 1 ] ;
29692: LD_ADDR_VAR 0 3
29696: PUSH
29697: LD_VAR 0 11
29701: PUSH
29702: LD_INT 1
29704: ARRAY
29705: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29706: LD_ADDR_VAR 0 11
29710: PUSH
29711: LD_VAR 0 11
29715: PPUSH
29716: LD_INT 1
29718: PPUSH
29719: CALL_OW 3
29723: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29724: LD_VAR 0 2
29728: PPUSH
29729: LD_VAR 0 3
29733: PPUSH
29734: CALL 29934 0 2
29738: PUSH
29739: LD_VAR 0 11
29743: PUSH
29744: EMPTY
29745: EQUAL
29746: OR
29747: IFFALSE 29692
// if not control in _control then
29749: LD_VAR 0 4
29753: PUSH
29754: LD_VAR 0 12
29758: IN
29759: NOT
29760: IFFALSE 29786
// control := _control [ rand ( 1 , _control ) ] ;
29762: LD_ADDR_VAR 0 4
29766: PUSH
29767: LD_VAR 0 12
29771: PUSH
29772: LD_INT 1
29774: PPUSH
29775: LD_VAR 0 12
29779: PPUSH
29780: CALL_OW 12
29784: ARRAY
29785: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29786: LD_VAR 0 2
29790: PPUSH
29791: LD_VAR 0 5
29795: PPUSH
29796: CALL 30154 0 2
29800: NOT
29801: IFFALSE 29860
// repeat weapon := _weapon [ 1 ] ;
29803: LD_ADDR_VAR 0 5
29807: PUSH
29808: LD_VAR 0 10
29812: PUSH
29813: LD_INT 1
29815: ARRAY
29816: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29817: LD_ADDR_VAR 0 10
29821: PUSH
29822: LD_VAR 0 10
29826: PPUSH
29827: LD_INT 1
29829: PPUSH
29830: CALL_OW 3
29834: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29835: LD_VAR 0 2
29839: PPUSH
29840: LD_VAR 0 5
29844: PPUSH
29845: CALL 30154 0 2
29849: PUSH
29850: LD_VAR 0 10
29854: PUSH
29855: EMPTY
29856: EQUAL
29857: OR
29858: IFFALSE 29803
// result := [ ] ;
29860: LD_ADDR_VAR 0 6
29864: PUSH
29865: EMPTY
29866: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29867: LD_VAR 0 1
29871: PPUSH
29872: LD_VAR 0 2
29876: PPUSH
29877: LD_VAR 0 3
29881: PPUSH
29882: LD_VAR 0 4
29886: PPUSH
29887: LD_VAR 0 5
29891: PPUSH
29892: CALL_OW 448
29896: IFFALSE 29929
// result := [ chassis , engine , control , weapon ] ;
29898: LD_ADDR_VAR 0 6
29902: PUSH
29903: LD_VAR 0 2
29907: PUSH
29908: LD_VAR 0 3
29912: PUSH
29913: LD_VAR 0 4
29917: PUSH
29918: LD_VAR 0 5
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: ST_TO_ADDR
// end ;
29929: LD_VAR 0 6
29933: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29934: LD_INT 0
29936: PPUSH
// if not chassis or not engine then
29937: LD_VAR 0 1
29941: NOT
29942: PUSH
29943: LD_VAR 0 2
29947: NOT
29948: OR
29949: IFFALSE 29953
// exit ;
29951: GO 30149
// case engine of engine_solar :
29953: LD_VAR 0 2
29957: PUSH
29958: LD_INT 2
29960: DOUBLE
29961: EQUAL
29962: IFTRUE 29966
29964: GO 30004
29966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29967: LD_ADDR_VAR 0 3
29971: PUSH
29972: LD_INT 11
29974: PUSH
29975: LD_INT 12
29977: PUSH
29978: LD_INT 13
29980: PUSH
29981: LD_INT 14
29983: PUSH
29984: LD_INT 1
29986: PUSH
29987: LD_INT 2
29989: PUSH
29990: LD_INT 3
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: ST_TO_ADDR
30002: GO 30133
30004: LD_INT 1
30006: DOUBLE
30007: EQUAL
30008: IFTRUE 30012
30010: GO 30074
30012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30013: LD_ADDR_VAR 0 3
30017: PUSH
30018: LD_INT 11
30020: PUSH
30021: LD_INT 12
30023: PUSH
30024: LD_INT 13
30026: PUSH
30027: LD_INT 14
30029: PUSH
30030: LD_INT 1
30032: PUSH
30033: LD_INT 2
30035: PUSH
30036: LD_INT 3
30038: PUSH
30039: LD_INT 4
30041: PUSH
30042: LD_INT 5
30044: PUSH
30045: LD_INT 21
30047: PUSH
30048: LD_INT 23
30050: PUSH
30051: LD_INT 22
30053: PUSH
30054: LD_INT 24
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: ST_TO_ADDR
30072: GO 30133
30074: LD_INT 3
30076: DOUBLE
30077: EQUAL
30078: IFTRUE 30082
30080: GO 30132
30082: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30083: LD_ADDR_VAR 0 3
30087: PUSH
30088: LD_INT 13
30090: PUSH
30091: LD_INT 14
30093: PUSH
30094: LD_INT 2
30096: PUSH
30097: LD_INT 3
30099: PUSH
30100: LD_INT 4
30102: PUSH
30103: LD_INT 5
30105: PUSH
30106: LD_INT 21
30108: PUSH
30109: LD_INT 22
30111: PUSH
30112: LD_INT 23
30114: PUSH
30115: LD_INT 24
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: ST_TO_ADDR
30130: GO 30133
30132: POP
// result := ( chassis in result ) ;
30133: LD_ADDR_VAR 0 3
30137: PUSH
30138: LD_VAR 0 1
30142: PUSH
30143: LD_VAR 0 3
30147: IN
30148: ST_TO_ADDR
// end ;
30149: LD_VAR 0 3
30153: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30154: LD_INT 0
30156: PPUSH
// if not chassis or not weapon then
30157: LD_VAR 0 1
30161: NOT
30162: PUSH
30163: LD_VAR 0 2
30167: NOT
30168: OR
30169: IFFALSE 30173
// exit ;
30171: GO 31199
// case weapon of us_machine_gun :
30173: LD_VAR 0 2
30177: PUSH
30178: LD_INT 2
30180: DOUBLE
30181: EQUAL
30182: IFTRUE 30186
30184: GO 30216
30186: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30187: LD_ADDR_VAR 0 3
30191: PUSH
30192: LD_INT 1
30194: PUSH
30195: LD_INT 2
30197: PUSH
30198: LD_INT 3
30200: PUSH
30201: LD_INT 4
30203: PUSH
30204: LD_INT 5
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: ST_TO_ADDR
30214: GO 31183
30216: LD_INT 3
30218: DOUBLE
30219: EQUAL
30220: IFTRUE 30224
30222: GO 30254
30224: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30225: LD_ADDR_VAR 0 3
30229: PUSH
30230: LD_INT 1
30232: PUSH
30233: LD_INT 2
30235: PUSH
30236: LD_INT 3
30238: PUSH
30239: LD_INT 4
30241: PUSH
30242: LD_INT 5
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: ST_TO_ADDR
30252: GO 31183
30254: LD_INT 11
30256: DOUBLE
30257: EQUAL
30258: IFTRUE 30262
30260: GO 30292
30262: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30263: LD_ADDR_VAR 0 3
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: LD_INT 2
30273: PUSH
30274: LD_INT 3
30276: PUSH
30277: LD_INT 4
30279: PUSH
30280: LD_INT 5
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: ST_TO_ADDR
30290: GO 31183
30292: LD_INT 4
30294: DOUBLE
30295: EQUAL
30296: IFTRUE 30300
30298: GO 30326
30300: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30301: LD_ADDR_VAR 0 3
30305: PUSH
30306: LD_INT 2
30308: PUSH
30309: LD_INT 3
30311: PUSH
30312: LD_INT 4
30314: PUSH
30315: LD_INT 5
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: ST_TO_ADDR
30324: GO 31183
30326: LD_INT 5
30328: DOUBLE
30329: EQUAL
30330: IFTRUE 30334
30332: GO 30360
30334: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30335: LD_ADDR_VAR 0 3
30339: PUSH
30340: LD_INT 2
30342: PUSH
30343: LD_INT 3
30345: PUSH
30346: LD_INT 4
30348: PUSH
30349: LD_INT 5
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: ST_TO_ADDR
30358: GO 31183
30360: LD_INT 9
30362: DOUBLE
30363: EQUAL
30364: IFTRUE 30368
30366: GO 30394
30368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30369: LD_ADDR_VAR 0 3
30373: PUSH
30374: LD_INT 2
30376: PUSH
30377: LD_INT 3
30379: PUSH
30380: LD_INT 4
30382: PUSH
30383: LD_INT 5
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: ST_TO_ADDR
30392: GO 31183
30394: LD_INT 7
30396: DOUBLE
30397: EQUAL
30398: IFTRUE 30402
30400: GO 30428
30402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30403: LD_ADDR_VAR 0 3
30407: PUSH
30408: LD_INT 2
30410: PUSH
30411: LD_INT 3
30413: PUSH
30414: LD_INT 4
30416: PUSH
30417: LD_INT 5
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: ST_TO_ADDR
30426: GO 31183
30428: LD_INT 12
30430: DOUBLE
30431: EQUAL
30432: IFTRUE 30436
30434: GO 30462
30436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30437: LD_ADDR_VAR 0 3
30441: PUSH
30442: LD_INT 2
30444: PUSH
30445: LD_INT 3
30447: PUSH
30448: LD_INT 4
30450: PUSH
30451: LD_INT 5
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: ST_TO_ADDR
30460: GO 31183
30462: LD_INT 13
30464: DOUBLE
30465: EQUAL
30466: IFTRUE 30470
30468: GO 30496
30470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30471: LD_ADDR_VAR 0 3
30475: PUSH
30476: LD_INT 2
30478: PUSH
30479: LD_INT 3
30481: PUSH
30482: LD_INT 4
30484: PUSH
30485: LD_INT 5
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: ST_TO_ADDR
30494: GO 31183
30496: LD_INT 14
30498: DOUBLE
30499: EQUAL
30500: IFTRUE 30504
30502: GO 30522
30504: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30505: LD_ADDR_VAR 0 3
30509: PUSH
30510: LD_INT 4
30512: PUSH
30513: LD_INT 5
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: ST_TO_ADDR
30520: GO 31183
30522: LD_INT 6
30524: DOUBLE
30525: EQUAL
30526: IFTRUE 30530
30528: GO 30548
30530: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30531: LD_ADDR_VAR 0 3
30535: PUSH
30536: LD_INT 4
30538: PUSH
30539: LD_INT 5
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: ST_TO_ADDR
30546: GO 31183
30548: LD_INT 10
30550: DOUBLE
30551: EQUAL
30552: IFTRUE 30556
30554: GO 30574
30556: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30557: LD_ADDR_VAR 0 3
30561: PUSH
30562: LD_INT 4
30564: PUSH
30565: LD_INT 5
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: ST_TO_ADDR
30572: GO 31183
30574: LD_INT 22
30576: DOUBLE
30577: EQUAL
30578: IFTRUE 30582
30580: GO 30608
30582: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30583: LD_ADDR_VAR 0 3
30587: PUSH
30588: LD_INT 11
30590: PUSH
30591: LD_INT 12
30593: PUSH
30594: LD_INT 13
30596: PUSH
30597: LD_INT 14
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: ST_TO_ADDR
30606: GO 31183
30608: LD_INT 23
30610: DOUBLE
30611: EQUAL
30612: IFTRUE 30616
30614: GO 30642
30616: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30617: LD_ADDR_VAR 0 3
30621: PUSH
30622: LD_INT 11
30624: PUSH
30625: LD_INT 12
30627: PUSH
30628: LD_INT 13
30630: PUSH
30631: LD_INT 14
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: ST_TO_ADDR
30640: GO 31183
30642: LD_INT 24
30644: DOUBLE
30645: EQUAL
30646: IFTRUE 30650
30648: GO 30676
30650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30651: LD_ADDR_VAR 0 3
30655: PUSH
30656: LD_INT 11
30658: PUSH
30659: LD_INT 12
30661: PUSH
30662: LD_INT 13
30664: PUSH
30665: LD_INT 14
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: ST_TO_ADDR
30674: GO 31183
30676: LD_INT 30
30678: DOUBLE
30679: EQUAL
30680: IFTRUE 30684
30682: GO 30710
30684: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30685: LD_ADDR_VAR 0 3
30689: PUSH
30690: LD_INT 11
30692: PUSH
30693: LD_INT 12
30695: PUSH
30696: LD_INT 13
30698: PUSH
30699: LD_INT 14
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: ST_TO_ADDR
30708: GO 31183
30710: LD_INT 25
30712: DOUBLE
30713: EQUAL
30714: IFTRUE 30718
30716: GO 30736
30718: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30719: LD_ADDR_VAR 0 3
30723: PUSH
30724: LD_INT 13
30726: PUSH
30727: LD_INT 14
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: ST_TO_ADDR
30734: GO 31183
30736: LD_INT 27
30738: DOUBLE
30739: EQUAL
30740: IFTRUE 30744
30742: GO 30762
30744: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30745: LD_ADDR_VAR 0 3
30749: PUSH
30750: LD_INT 13
30752: PUSH
30753: LD_INT 14
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: ST_TO_ADDR
30760: GO 31183
30762: LD_INT 28
30764: DOUBLE
30765: EQUAL
30766: IFTRUE 30770
30768: GO 30788
30770: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30771: LD_ADDR_VAR 0 3
30775: PUSH
30776: LD_INT 13
30778: PUSH
30779: LD_INT 14
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: ST_TO_ADDR
30786: GO 31183
30788: LD_INT 29
30790: DOUBLE
30791: EQUAL
30792: IFTRUE 30796
30794: GO 30814
30796: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30797: LD_ADDR_VAR 0 3
30801: PUSH
30802: LD_INT 13
30804: PUSH
30805: LD_INT 14
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: ST_TO_ADDR
30812: GO 31183
30814: LD_INT 31
30816: DOUBLE
30817: EQUAL
30818: IFTRUE 30822
30820: GO 30840
30822: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30823: LD_ADDR_VAR 0 3
30827: PUSH
30828: LD_INT 13
30830: PUSH
30831: LD_INT 14
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: ST_TO_ADDR
30838: GO 31183
30840: LD_INT 26
30842: DOUBLE
30843: EQUAL
30844: IFTRUE 30848
30846: GO 30866
30848: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30849: LD_ADDR_VAR 0 3
30853: PUSH
30854: LD_INT 13
30856: PUSH
30857: LD_INT 14
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: ST_TO_ADDR
30864: GO 31183
30866: LD_INT 42
30868: DOUBLE
30869: EQUAL
30870: IFTRUE 30874
30872: GO 30900
30874: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30875: LD_ADDR_VAR 0 3
30879: PUSH
30880: LD_INT 21
30882: PUSH
30883: LD_INT 22
30885: PUSH
30886: LD_INT 23
30888: PUSH
30889: LD_INT 24
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: ST_TO_ADDR
30898: GO 31183
30900: LD_INT 43
30902: DOUBLE
30903: EQUAL
30904: IFTRUE 30908
30906: GO 30934
30908: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30909: LD_ADDR_VAR 0 3
30913: PUSH
30914: LD_INT 21
30916: PUSH
30917: LD_INT 22
30919: PUSH
30920: LD_INT 23
30922: PUSH
30923: LD_INT 24
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: ST_TO_ADDR
30932: GO 31183
30934: LD_INT 44
30936: DOUBLE
30937: EQUAL
30938: IFTRUE 30942
30940: GO 30968
30942: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30943: LD_ADDR_VAR 0 3
30947: PUSH
30948: LD_INT 21
30950: PUSH
30951: LD_INT 22
30953: PUSH
30954: LD_INT 23
30956: PUSH
30957: LD_INT 24
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: ST_TO_ADDR
30966: GO 31183
30968: LD_INT 45
30970: DOUBLE
30971: EQUAL
30972: IFTRUE 30976
30974: GO 31002
30976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30977: LD_ADDR_VAR 0 3
30981: PUSH
30982: LD_INT 21
30984: PUSH
30985: LD_INT 22
30987: PUSH
30988: LD_INT 23
30990: PUSH
30991: LD_INT 24
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: ST_TO_ADDR
31000: GO 31183
31002: LD_INT 49
31004: DOUBLE
31005: EQUAL
31006: IFTRUE 31010
31008: GO 31036
31010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31011: LD_ADDR_VAR 0 3
31015: PUSH
31016: LD_INT 21
31018: PUSH
31019: LD_INT 22
31021: PUSH
31022: LD_INT 23
31024: PUSH
31025: LD_INT 24
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: ST_TO_ADDR
31034: GO 31183
31036: LD_INT 51
31038: DOUBLE
31039: EQUAL
31040: IFTRUE 31044
31042: GO 31070
31044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31045: LD_ADDR_VAR 0 3
31049: PUSH
31050: LD_INT 21
31052: PUSH
31053: LD_INT 22
31055: PUSH
31056: LD_INT 23
31058: PUSH
31059: LD_INT 24
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: ST_TO_ADDR
31068: GO 31183
31070: LD_INT 52
31072: DOUBLE
31073: EQUAL
31074: IFTRUE 31078
31076: GO 31104
31078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31079: LD_ADDR_VAR 0 3
31083: PUSH
31084: LD_INT 21
31086: PUSH
31087: LD_INT 22
31089: PUSH
31090: LD_INT 23
31092: PUSH
31093: LD_INT 24
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: ST_TO_ADDR
31102: GO 31183
31104: LD_INT 53
31106: DOUBLE
31107: EQUAL
31108: IFTRUE 31112
31110: GO 31130
31112: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31113: LD_ADDR_VAR 0 3
31117: PUSH
31118: LD_INT 23
31120: PUSH
31121: LD_INT 24
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: ST_TO_ADDR
31128: GO 31183
31130: LD_INT 46
31132: DOUBLE
31133: EQUAL
31134: IFTRUE 31138
31136: GO 31156
31138: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31139: LD_ADDR_VAR 0 3
31143: PUSH
31144: LD_INT 23
31146: PUSH
31147: LD_INT 24
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: ST_TO_ADDR
31154: GO 31183
31156: LD_INT 47
31158: DOUBLE
31159: EQUAL
31160: IFTRUE 31164
31162: GO 31182
31164: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31165: LD_ADDR_VAR 0 3
31169: PUSH
31170: LD_INT 23
31172: PUSH
31173: LD_INT 24
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: ST_TO_ADDR
31180: GO 31183
31182: POP
// result := ( chassis in result ) ;
31183: LD_ADDR_VAR 0 3
31187: PUSH
31188: LD_VAR 0 1
31192: PUSH
31193: LD_VAR 0 3
31197: IN
31198: ST_TO_ADDR
// end ;
31199: LD_VAR 0 3
31203: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31204: LD_INT 0
31206: PPUSH
31207: PPUSH
31208: PPUSH
31209: PPUSH
31210: PPUSH
31211: PPUSH
31212: PPUSH
// result := array ;
31213: LD_ADDR_VAR 0 5
31217: PUSH
31218: LD_VAR 0 1
31222: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31223: LD_VAR 0 1
31227: NOT
31228: PUSH
31229: LD_VAR 0 2
31233: NOT
31234: OR
31235: PUSH
31236: LD_VAR 0 3
31240: NOT
31241: OR
31242: PUSH
31243: LD_VAR 0 2
31247: PUSH
31248: LD_VAR 0 1
31252: GREATER
31253: OR
31254: PUSH
31255: LD_VAR 0 3
31259: PUSH
31260: LD_VAR 0 1
31264: GREATER
31265: OR
31266: IFFALSE 31270
// exit ;
31268: GO 31566
// if direction then
31270: LD_VAR 0 4
31274: IFFALSE 31338
// begin d := 1 ;
31276: LD_ADDR_VAR 0 9
31280: PUSH
31281: LD_INT 1
31283: ST_TO_ADDR
// if i_from > i_to then
31284: LD_VAR 0 2
31288: PUSH
31289: LD_VAR 0 3
31293: GREATER
31294: IFFALSE 31320
// length := ( array - i_from ) + i_to else
31296: LD_ADDR_VAR 0 11
31300: PUSH
31301: LD_VAR 0 1
31305: PUSH
31306: LD_VAR 0 2
31310: MINUS
31311: PUSH
31312: LD_VAR 0 3
31316: PLUS
31317: ST_TO_ADDR
31318: GO 31336
// length := i_to - i_from ;
31320: LD_ADDR_VAR 0 11
31324: PUSH
31325: LD_VAR 0 3
31329: PUSH
31330: LD_VAR 0 2
31334: MINUS
31335: ST_TO_ADDR
// end else
31336: GO 31399
// begin d := - 1 ;
31338: LD_ADDR_VAR 0 9
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: ST_TO_ADDR
// if i_from > i_to then
31347: LD_VAR 0 2
31351: PUSH
31352: LD_VAR 0 3
31356: GREATER
31357: IFFALSE 31377
// length := i_from - i_to else
31359: LD_ADDR_VAR 0 11
31363: PUSH
31364: LD_VAR 0 2
31368: PUSH
31369: LD_VAR 0 3
31373: MINUS
31374: ST_TO_ADDR
31375: GO 31399
// length := ( array - i_to ) + i_from ;
31377: LD_ADDR_VAR 0 11
31381: PUSH
31382: LD_VAR 0 1
31386: PUSH
31387: LD_VAR 0 3
31391: MINUS
31392: PUSH
31393: LD_VAR 0 2
31397: PLUS
31398: ST_TO_ADDR
// end ; if not length then
31399: LD_VAR 0 11
31403: NOT
31404: IFFALSE 31408
// exit ;
31406: GO 31566
// tmp := array ;
31408: LD_ADDR_VAR 0 10
31412: PUSH
31413: LD_VAR 0 1
31417: ST_TO_ADDR
// for i = 1 to length do
31418: LD_ADDR_VAR 0 6
31422: PUSH
31423: DOUBLE
31424: LD_INT 1
31426: DEC
31427: ST_TO_ADDR
31428: LD_VAR 0 11
31432: PUSH
31433: FOR_TO
31434: IFFALSE 31554
// begin for j = 1 to array do
31436: LD_ADDR_VAR 0 7
31440: PUSH
31441: DOUBLE
31442: LD_INT 1
31444: DEC
31445: ST_TO_ADDR
31446: LD_VAR 0 1
31450: PUSH
31451: FOR_TO
31452: IFFALSE 31540
// begin k := j + d ;
31454: LD_ADDR_VAR 0 8
31458: PUSH
31459: LD_VAR 0 7
31463: PUSH
31464: LD_VAR 0 9
31468: PLUS
31469: ST_TO_ADDR
// if k > array then
31470: LD_VAR 0 8
31474: PUSH
31475: LD_VAR 0 1
31479: GREATER
31480: IFFALSE 31490
// k := 1 ;
31482: LD_ADDR_VAR 0 8
31486: PUSH
31487: LD_INT 1
31489: ST_TO_ADDR
// if not k then
31490: LD_VAR 0 8
31494: NOT
31495: IFFALSE 31507
// k := array ;
31497: LD_ADDR_VAR 0 8
31501: PUSH
31502: LD_VAR 0 1
31506: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31507: LD_ADDR_VAR 0 10
31511: PUSH
31512: LD_VAR 0 10
31516: PPUSH
31517: LD_VAR 0 8
31521: PPUSH
31522: LD_VAR 0 1
31526: PUSH
31527: LD_VAR 0 7
31531: ARRAY
31532: PPUSH
31533: CALL_OW 1
31537: ST_TO_ADDR
// end ;
31538: GO 31451
31540: POP
31541: POP
// array := tmp ;
31542: LD_ADDR_VAR 0 1
31546: PUSH
31547: LD_VAR 0 10
31551: ST_TO_ADDR
// end ;
31552: GO 31433
31554: POP
31555: POP
// result := array ;
31556: LD_ADDR_VAR 0 5
31560: PUSH
31561: LD_VAR 0 1
31565: ST_TO_ADDR
// end ;
31566: LD_VAR 0 5
31570: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31571: LD_INT 0
31573: PPUSH
31574: PPUSH
// result := 0 ;
31575: LD_ADDR_VAR 0 3
31579: PUSH
31580: LD_INT 0
31582: ST_TO_ADDR
// if not array or not value in array then
31583: LD_VAR 0 1
31587: NOT
31588: PUSH
31589: LD_VAR 0 2
31593: PUSH
31594: LD_VAR 0 1
31598: IN
31599: NOT
31600: OR
31601: IFFALSE 31605
// exit ;
31603: GO 31659
// for i = 1 to array do
31605: LD_ADDR_VAR 0 4
31609: PUSH
31610: DOUBLE
31611: LD_INT 1
31613: DEC
31614: ST_TO_ADDR
31615: LD_VAR 0 1
31619: PUSH
31620: FOR_TO
31621: IFFALSE 31657
// if value = array [ i ] then
31623: LD_VAR 0 2
31627: PUSH
31628: LD_VAR 0 1
31632: PUSH
31633: LD_VAR 0 4
31637: ARRAY
31638: EQUAL
31639: IFFALSE 31655
// begin result := i ;
31641: LD_ADDR_VAR 0 3
31645: PUSH
31646: LD_VAR 0 4
31650: ST_TO_ADDR
// exit ;
31651: POP
31652: POP
31653: GO 31659
// end ;
31655: GO 31620
31657: POP
31658: POP
// end ;
31659: LD_VAR 0 3
31663: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31664: LD_INT 0
31666: PPUSH
// vc_chassis := chassis ;
31667: LD_ADDR_OWVAR 37
31671: PUSH
31672: LD_VAR 0 1
31676: ST_TO_ADDR
// vc_engine := engine ;
31677: LD_ADDR_OWVAR 39
31681: PUSH
31682: LD_VAR 0 2
31686: ST_TO_ADDR
// vc_control := control ;
31687: LD_ADDR_OWVAR 38
31691: PUSH
31692: LD_VAR 0 3
31696: ST_TO_ADDR
// vc_weapon := weapon ;
31697: LD_ADDR_OWVAR 40
31701: PUSH
31702: LD_VAR 0 4
31706: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31707: LD_ADDR_OWVAR 41
31711: PUSH
31712: LD_VAR 0 5
31716: ST_TO_ADDR
// end ;
31717: LD_VAR 0 6
31721: RET
// export function WantPlant ( unit ) ; var task ; begin
31722: LD_INT 0
31724: PPUSH
31725: PPUSH
// result := false ;
31726: LD_ADDR_VAR 0 2
31730: PUSH
31731: LD_INT 0
31733: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31734: LD_ADDR_VAR 0 3
31738: PUSH
31739: LD_VAR 0 1
31743: PPUSH
31744: CALL_OW 437
31748: ST_TO_ADDR
// if task then
31749: LD_VAR 0 3
31753: IFFALSE 31781
// if task [ 1 ] [ 1 ] = p then
31755: LD_VAR 0 3
31759: PUSH
31760: LD_INT 1
31762: ARRAY
31763: PUSH
31764: LD_INT 1
31766: ARRAY
31767: PUSH
31768: LD_STRING p
31770: EQUAL
31771: IFFALSE 31781
// result := true ;
31773: LD_ADDR_VAR 0 2
31777: PUSH
31778: LD_INT 1
31780: ST_TO_ADDR
// end ;
31781: LD_VAR 0 2
31785: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31786: LD_INT 0
31788: PPUSH
31789: PPUSH
31790: PPUSH
31791: PPUSH
// if pos < 1 then
31792: LD_VAR 0 2
31796: PUSH
31797: LD_INT 1
31799: LESS
31800: IFFALSE 31804
// exit ;
31802: GO 32107
// if pos = 1 then
31804: LD_VAR 0 2
31808: PUSH
31809: LD_INT 1
31811: EQUAL
31812: IFFALSE 31845
// result := Replace ( arr , pos [ 1 ] , value ) else
31814: LD_ADDR_VAR 0 4
31818: PUSH
31819: LD_VAR 0 1
31823: PPUSH
31824: LD_VAR 0 2
31828: PUSH
31829: LD_INT 1
31831: ARRAY
31832: PPUSH
31833: LD_VAR 0 3
31837: PPUSH
31838: CALL_OW 1
31842: ST_TO_ADDR
31843: GO 32107
// begin tmp := arr ;
31845: LD_ADDR_VAR 0 6
31849: PUSH
31850: LD_VAR 0 1
31854: ST_TO_ADDR
// s_arr := [ tmp ] ;
31855: LD_ADDR_VAR 0 7
31859: PUSH
31860: LD_VAR 0 6
31864: PUSH
31865: EMPTY
31866: LIST
31867: ST_TO_ADDR
// for i = 1 to pos - 1 do
31868: LD_ADDR_VAR 0 5
31872: PUSH
31873: DOUBLE
31874: LD_INT 1
31876: DEC
31877: ST_TO_ADDR
31878: LD_VAR 0 2
31882: PUSH
31883: LD_INT 1
31885: MINUS
31886: PUSH
31887: FOR_TO
31888: IFFALSE 31933
// begin tmp := tmp [ pos [ i ] ] ;
31890: LD_ADDR_VAR 0 6
31894: PUSH
31895: LD_VAR 0 6
31899: PUSH
31900: LD_VAR 0 2
31904: PUSH
31905: LD_VAR 0 5
31909: ARRAY
31910: ARRAY
31911: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31912: LD_ADDR_VAR 0 7
31916: PUSH
31917: LD_VAR 0 7
31921: PUSH
31922: LD_VAR 0 6
31926: PUSH
31927: EMPTY
31928: LIST
31929: ADD
31930: ST_TO_ADDR
// end ;
31931: GO 31887
31933: POP
31934: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31935: LD_ADDR_VAR 0 6
31939: PUSH
31940: LD_VAR 0 6
31944: PPUSH
31945: LD_VAR 0 2
31949: PUSH
31950: LD_VAR 0 2
31954: ARRAY
31955: PPUSH
31956: LD_VAR 0 3
31960: PPUSH
31961: CALL_OW 1
31965: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31966: LD_ADDR_VAR 0 7
31970: PUSH
31971: LD_VAR 0 7
31975: PPUSH
31976: LD_VAR 0 7
31980: PPUSH
31981: LD_VAR 0 6
31985: PPUSH
31986: CALL_OW 1
31990: ST_TO_ADDR
// for i = s_arr downto 2 do
31991: LD_ADDR_VAR 0 5
31995: PUSH
31996: DOUBLE
31997: LD_VAR 0 7
32001: INC
32002: ST_TO_ADDR
32003: LD_INT 2
32005: PUSH
32006: FOR_DOWNTO
32007: IFFALSE 32091
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32009: LD_ADDR_VAR 0 6
32013: PUSH
32014: LD_VAR 0 7
32018: PUSH
32019: LD_VAR 0 5
32023: PUSH
32024: LD_INT 1
32026: MINUS
32027: ARRAY
32028: PPUSH
32029: LD_VAR 0 2
32033: PUSH
32034: LD_VAR 0 5
32038: PUSH
32039: LD_INT 1
32041: MINUS
32042: ARRAY
32043: PPUSH
32044: LD_VAR 0 7
32048: PUSH
32049: LD_VAR 0 5
32053: ARRAY
32054: PPUSH
32055: CALL_OW 1
32059: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32060: LD_ADDR_VAR 0 7
32064: PUSH
32065: LD_VAR 0 7
32069: PPUSH
32070: LD_VAR 0 5
32074: PUSH
32075: LD_INT 1
32077: MINUS
32078: PPUSH
32079: LD_VAR 0 6
32083: PPUSH
32084: CALL_OW 1
32088: ST_TO_ADDR
// end ;
32089: GO 32006
32091: POP
32092: POP
// result := s_arr [ 1 ] ;
32093: LD_ADDR_VAR 0 4
32097: PUSH
32098: LD_VAR 0 7
32102: PUSH
32103: LD_INT 1
32105: ARRAY
32106: ST_TO_ADDR
// end ; end ;
32107: LD_VAR 0 4
32111: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32112: LD_INT 0
32114: PPUSH
32115: PPUSH
// if not list then
32116: LD_VAR 0 1
32120: NOT
32121: IFFALSE 32125
// exit ;
32123: GO 32216
// i := list [ pos1 ] ;
32125: LD_ADDR_VAR 0 5
32129: PUSH
32130: LD_VAR 0 1
32134: PUSH
32135: LD_VAR 0 2
32139: ARRAY
32140: ST_TO_ADDR
// if not i then
32141: LD_VAR 0 5
32145: NOT
32146: IFFALSE 32150
// exit ;
32148: GO 32216
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32150: LD_ADDR_VAR 0 1
32154: PUSH
32155: LD_VAR 0 1
32159: PPUSH
32160: LD_VAR 0 2
32164: PPUSH
32165: LD_VAR 0 1
32169: PUSH
32170: LD_VAR 0 3
32174: ARRAY
32175: PPUSH
32176: CALL_OW 1
32180: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32181: LD_ADDR_VAR 0 1
32185: PUSH
32186: LD_VAR 0 1
32190: PPUSH
32191: LD_VAR 0 3
32195: PPUSH
32196: LD_VAR 0 5
32200: PPUSH
32201: CALL_OW 1
32205: ST_TO_ADDR
// result := list ;
32206: LD_ADDR_VAR 0 4
32210: PUSH
32211: LD_VAR 0 1
32215: ST_TO_ADDR
// end ;
32216: LD_VAR 0 4
32220: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32221: LD_INT 0
32223: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32224: LD_ADDR_VAR 0 5
32228: PUSH
32229: LD_VAR 0 1
32233: PPUSH
32234: CALL_OW 250
32238: PPUSH
32239: LD_VAR 0 1
32243: PPUSH
32244: CALL_OW 251
32248: PPUSH
32249: LD_VAR 0 2
32253: PPUSH
32254: LD_VAR 0 3
32258: PPUSH
32259: LD_VAR 0 4
32263: PPUSH
32264: CALL 32274 0 5
32268: ST_TO_ADDR
// end ;
32269: LD_VAR 0 5
32273: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32274: LD_INT 0
32276: PPUSH
32277: PPUSH
32278: PPUSH
32279: PPUSH
// if not list then
32280: LD_VAR 0 3
32284: NOT
32285: IFFALSE 32289
// exit ;
32287: GO 32677
// result := [ ] ;
32289: LD_ADDR_VAR 0 6
32293: PUSH
32294: EMPTY
32295: ST_TO_ADDR
// for i in list do
32296: LD_ADDR_VAR 0 7
32300: PUSH
32301: LD_VAR 0 3
32305: PUSH
32306: FOR_IN
32307: IFFALSE 32509
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32309: LD_ADDR_VAR 0 9
32313: PUSH
32314: LD_VAR 0 7
32318: PPUSH
32319: LD_VAR 0 1
32323: PPUSH
32324: LD_VAR 0 2
32328: PPUSH
32329: CALL_OW 297
32333: ST_TO_ADDR
// if not result then
32334: LD_VAR 0 6
32338: NOT
32339: IFFALSE 32365
// result := [ [ i , tmp ] ] else
32341: LD_ADDR_VAR 0 6
32345: PUSH
32346: LD_VAR 0 7
32350: PUSH
32351: LD_VAR 0 9
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: EMPTY
32361: LIST
32362: ST_TO_ADDR
32363: GO 32507
// begin if result [ result ] [ 2 ] < tmp then
32365: LD_VAR 0 6
32369: PUSH
32370: LD_VAR 0 6
32374: ARRAY
32375: PUSH
32376: LD_INT 2
32378: ARRAY
32379: PUSH
32380: LD_VAR 0 9
32384: LESS
32385: IFFALSE 32427
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32387: LD_ADDR_VAR 0 6
32391: PUSH
32392: LD_VAR 0 6
32396: PPUSH
32397: LD_VAR 0 6
32401: PUSH
32402: LD_INT 1
32404: PLUS
32405: PPUSH
32406: LD_VAR 0 7
32410: PUSH
32411: LD_VAR 0 9
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PPUSH
32420: CALL_OW 2
32424: ST_TO_ADDR
32425: GO 32507
// for j = 1 to result do
32427: LD_ADDR_VAR 0 8
32431: PUSH
32432: DOUBLE
32433: LD_INT 1
32435: DEC
32436: ST_TO_ADDR
32437: LD_VAR 0 6
32441: PUSH
32442: FOR_TO
32443: IFFALSE 32505
// begin if tmp < result [ j ] [ 2 ] then
32445: LD_VAR 0 9
32449: PUSH
32450: LD_VAR 0 6
32454: PUSH
32455: LD_VAR 0 8
32459: ARRAY
32460: PUSH
32461: LD_INT 2
32463: ARRAY
32464: LESS
32465: IFFALSE 32503
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32467: LD_ADDR_VAR 0 6
32471: PUSH
32472: LD_VAR 0 6
32476: PPUSH
32477: LD_VAR 0 8
32481: PPUSH
32482: LD_VAR 0 7
32486: PUSH
32487: LD_VAR 0 9
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PPUSH
32496: CALL_OW 2
32500: ST_TO_ADDR
// break ;
32501: GO 32505
// end ; end ;
32503: GO 32442
32505: POP
32506: POP
// end ; end ;
32507: GO 32306
32509: POP
32510: POP
// if result and not asc then
32511: LD_VAR 0 6
32515: PUSH
32516: LD_VAR 0 4
32520: NOT
32521: AND
32522: IFFALSE 32597
// begin tmp := result ;
32524: LD_ADDR_VAR 0 9
32528: PUSH
32529: LD_VAR 0 6
32533: ST_TO_ADDR
// for i = tmp downto 1 do
32534: LD_ADDR_VAR 0 7
32538: PUSH
32539: DOUBLE
32540: LD_VAR 0 9
32544: INC
32545: ST_TO_ADDR
32546: LD_INT 1
32548: PUSH
32549: FOR_DOWNTO
32550: IFFALSE 32595
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32552: LD_ADDR_VAR 0 6
32556: PUSH
32557: LD_VAR 0 6
32561: PPUSH
32562: LD_VAR 0 9
32566: PUSH
32567: LD_VAR 0 7
32571: MINUS
32572: PUSH
32573: LD_INT 1
32575: PLUS
32576: PPUSH
32577: LD_VAR 0 9
32581: PUSH
32582: LD_VAR 0 7
32586: ARRAY
32587: PPUSH
32588: CALL_OW 1
32592: ST_TO_ADDR
32593: GO 32549
32595: POP
32596: POP
// end ; tmp := [ ] ;
32597: LD_ADDR_VAR 0 9
32601: PUSH
32602: EMPTY
32603: ST_TO_ADDR
// if mode then
32604: LD_VAR 0 5
32608: IFFALSE 32677
// begin for i = 1 to result do
32610: LD_ADDR_VAR 0 7
32614: PUSH
32615: DOUBLE
32616: LD_INT 1
32618: DEC
32619: ST_TO_ADDR
32620: LD_VAR 0 6
32624: PUSH
32625: FOR_TO
32626: IFFALSE 32665
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32628: LD_ADDR_VAR 0 9
32632: PUSH
32633: LD_VAR 0 9
32637: PPUSH
32638: LD_VAR 0 7
32642: PPUSH
32643: LD_VAR 0 6
32647: PUSH
32648: LD_VAR 0 7
32652: ARRAY
32653: PUSH
32654: LD_INT 1
32656: ARRAY
32657: PPUSH
32658: CALL_OW 1
32662: ST_TO_ADDR
32663: GO 32625
32665: POP
32666: POP
// result := tmp ;
32667: LD_ADDR_VAR 0 6
32671: PUSH
32672: LD_VAR 0 9
32676: ST_TO_ADDR
// end ; end ;
32677: LD_VAR 0 6
32681: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32682: LD_INT 0
32684: PPUSH
32685: PPUSH
32686: PPUSH
32687: PPUSH
32688: PPUSH
32689: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32690: LD_ADDR_VAR 0 5
32694: PUSH
32695: LD_INT 0
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: EMPTY
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: ST_TO_ADDR
// if not x or not y then
32712: LD_VAR 0 2
32716: NOT
32717: PUSH
32718: LD_VAR 0 3
32722: NOT
32723: OR
32724: IFFALSE 32728
// exit ;
32726: GO 34374
// if not range then
32728: LD_VAR 0 4
32732: NOT
32733: IFFALSE 32743
// range := 10 ;
32735: LD_ADDR_VAR 0 4
32739: PUSH
32740: LD_INT 10
32742: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32743: LD_ADDR_VAR 0 8
32747: PUSH
32748: LD_INT 81
32750: PUSH
32751: LD_VAR 0 1
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 92
32762: PUSH
32763: LD_VAR 0 2
32767: PUSH
32768: LD_VAR 0 3
32772: PUSH
32773: LD_VAR 0 4
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 3
32786: PUSH
32787: LD_INT 21
32789: PUSH
32790: LD_INT 3
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: LIST
32805: PPUSH
32806: CALL_OW 69
32810: ST_TO_ADDR
// if not tmp then
32811: LD_VAR 0 8
32815: NOT
32816: IFFALSE 32820
// exit ;
32818: GO 34374
// for i in tmp do
32820: LD_ADDR_VAR 0 6
32824: PUSH
32825: LD_VAR 0 8
32829: PUSH
32830: FOR_IN
32831: IFFALSE 34349
// begin points := [ 0 , 0 , 0 ] ;
32833: LD_ADDR_VAR 0 9
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: LIST
32851: ST_TO_ADDR
// bpoints := 1 ;
32852: LD_ADDR_VAR 0 10
32856: PUSH
32857: LD_INT 1
32859: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32860: LD_VAR 0 6
32864: PPUSH
32865: CALL_OW 247
32869: PUSH
32870: LD_INT 1
32872: DOUBLE
32873: EQUAL
32874: IFTRUE 32878
32876: GO 33456
32878: POP
// begin if GetClass ( i ) = 1 then
32879: LD_VAR 0 6
32883: PPUSH
32884: CALL_OW 257
32888: PUSH
32889: LD_INT 1
32891: EQUAL
32892: IFFALSE 32913
// points := [ 10 , 5 , 3 ] ;
32894: LD_ADDR_VAR 0 9
32898: PUSH
32899: LD_INT 10
32901: PUSH
32902: LD_INT 5
32904: PUSH
32905: LD_INT 3
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32913: LD_VAR 0 6
32917: PPUSH
32918: CALL_OW 257
32922: PUSH
32923: LD_INT 2
32925: PUSH
32926: LD_INT 3
32928: PUSH
32929: LD_INT 4
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: LIST
32936: IN
32937: IFFALSE 32958
// points := [ 3 , 2 , 1 ] ;
32939: LD_ADDR_VAR 0 9
32943: PUSH
32944: LD_INT 3
32946: PUSH
32947: LD_INT 2
32949: PUSH
32950: LD_INT 1
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: LIST
32957: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32958: LD_VAR 0 6
32962: PPUSH
32963: CALL_OW 257
32967: PUSH
32968: LD_INT 5
32970: EQUAL
32971: IFFALSE 32992
// points := [ 130 , 5 , 2 ] ;
32973: LD_ADDR_VAR 0 9
32977: PUSH
32978: LD_INT 130
32980: PUSH
32981: LD_INT 5
32983: PUSH
32984: LD_INT 2
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: LIST
32991: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32992: LD_VAR 0 6
32996: PPUSH
32997: CALL_OW 257
33001: PUSH
33002: LD_INT 8
33004: EQUAL
33005: IFFALSE 33026
// points := [ 35 , 35 , 30 ] ;
33007: LD_ADDR_VAR 0 9
33011: PUSH
33012: LD_INT 35
33014: PUSH
33015: LD_INT 35
33017: PUSH
33018: LD_INT 30
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: LIST
33025: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33026: LD_VAR 0 6
33030: PPUSH
33031: CALL_OW 257
33035: PUSH
33036: LD_INT 9
33038: EQUAL
33039: IFFALSE 33060
// points := [ 20 , 55 , 40 ] ;
33041: LD_ADDR_VAR 0 9
33045: PUSH
33046: LD_INT 20
33048: PUSH
33049: LD_INT 55
33051: PUSH
33052: LD_INT 40
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33060: LD_VAR 0 6
33064: PPUSH
33065: CALL_OW 257
33069: PUSH
33070: LD_INT 12
33072: PUSH
33073: LD_INT 16
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: IN
33080: IFFALSE 33101
// points := [ 5 , 3 , 2 ] ;
33082: LD_ADDR_VAR 0 9
33086: PUSH
33087: LD_INT 5
33089: PUSH
33090: LD_INT 3
33092: PUSH
33093: LD_INT 2
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: LIST
33100: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33101: LD_VAR 0 6
33105: PPUSH
33106: CALL_OW 257
33110: PUSH
33111: LD_INT 17
33113: EQUAL
33114: IFFALSE 33135
// points := [ 100 , 50 , 75 ] ;
33116: LD_ADDR_VAR 0 9
33120: PUSH
33121: LD_INT 100
33123: PUSH
33124: LD_INT 50
33126: PUSH
33127: LD_INT 75
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: LIST
33134: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33135: LD_VAR 0 6
33139: PPUSH
33140: CALL_OW 257
33144: PUSH
33145: LD_INT 15
33147: EQUAL
33148: IFFALSE 33169
// points := [ 10 , 5 , 3 ] ;
33150: LD_ADDR_VAR 0 9
33154: PUSH
33155: LD_INT 10
33157: PUSH
33158: LD_INT 5
33160: PUSH
33161: LD_INT 3
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: LIST
33168: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33169: LD_VAR 0 6
33173: PPUSH
33174: CALL_OW 257
33178: PUSH
33179: LD_INT 14
33181: EQUAL
33182: IFFALSE 33203
// points := [ 10 , 0 , 0 ] ;
33184: LD_ADDR_VAR 0 9
33188: PUSH
33189: LD_INT 10
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: LD_INT 0
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: LIST
33202: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33203: LD_VAR 0 6
33207: PPUSH
33208: CALL_OW 257
33212: PUSH
33213: LD_INT 11
33215: EQUAL
33216: IFFALSE 33237
// points := [ 30 , 10 , 5 ] ;
33218: LD_ADDR_VAR 0 9
33222: PUSH
33223: LD_INT 30
33225: PUSH
33226: LD_INT 10
33228: PUSH
33229: LD_INT 5
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: LIST
33236: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33237: LD_VAR 0 1
33241: PPUSH
33242: LD_INT 5
33244: PPUSH
33245: CALL_OW 321
33249: PUSH
33250: LD_INT 2
33252: EQUAL
33253: IFFALSE 33270
// bpoints := bpoints * 1.8 ;
33255: LD_ADDR_VAR 0 10
33259: PUSH
33260: LD_VAR 0 10
33264: PUSH
33265: LD_REAL  1.80000000000000E+0000
33268: MUL
33269: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33270: LD_VAR 0 6
33274: PPUSH
33275: CALL_OW 257
33279: PUSH
33280: LD_INT 1
33282: PUSH
33283: LD_INT 2
33285: PUSH
33286: LD_INT 3
33288: PUSH
33289: LD_INT 4
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: IN
33298: PUSH
33299: LD_VAR 0 1
33303: PPUSH
33304: LD_INT 51
33306: PPUSH
33307: CALL_OW 321
33311: PUSH
33312: LD_INT 2
33314: EQUAL
33315: AND
33316: IFFALSE 33333
// bpoints := bpoints * 1.2 ;
33318: LD_ADDR_VAR 0 10
33322: PUSH
33323: LD_VAR 0 10
33327: PUSH
33328: LD_REAL  1.20000000000000E+0000
33331: MUL
33332: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33333: LD_VAR 0 6
33337: PPUSH
33338: CALL_OW 257
33342: PUSH
33343: LD_INT 5
33345: PUSH
33346: LD_INT 7
33348: PUSH
33349: LD_INT 9
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: LIST
33356: IN
33357: PUSH
33358: LD_VAR 0 1
33362: PPUSH
33363: LD_INT 52
33365: PPUSH
33366: CALL_OW 321
33370: PUSH
33371: LD_INT 2
33373: EQUAL
33374: AND
33375: IFFALSE 33392
// bpoints := bpoints * 1.5 ;
33377: LD_ADDR_VAR 0 10
33381: PUSH
33382: LD_VAR 0 10
33386: PUSH
33387: LD_REAL  1.50000000000000E+0000
33390: MUL
33391: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33392: LD_VAR 0 1
33396: PPUSH
33397: LD_INT 66
33399: PPUSH
33400: CALL_OW 321
33404: PUSH
33405: LD_INT 2
33407: EQUAL
33408: IFFALSE 33425
// bpoints := bpoints * 1.1 ;
33410: LD_ADDR_VAR 0 10
33414: PUSH
33415: LD_VAR 0 10
33419: PUSH
33420: LD_REAL  1.10000000000000E+0000
33423: MUL
33424: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33425: LD_ADDR_VAR 0 10
33429: PUSH
33430: LD_VAR 0 10
33434: PUSH
33435: LD_VAR 0 6
33439: PPUSH
33440: LD_INT 1
33442: PPUSH
33443: CALL_OW 259
33447: PUSH
33448: LD_REAL  1.15000000000000E+0000
33451: MUL
33452: MUL
33453: ST_TO_ADDR
// end ; unit_vehicle :
33454: GO 34278
33456: LD_INT 2
33458: DOUBLE
33459: EQUAL
33460: IFTRUE 33464
33462: GO 34266
33464: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33465: LD_VAR 0 6
33469: PPUSH
33470: CALL_OW 264
33474: PUSH
33475: LD_INT 2
33477: PUSH
33478: LD_INT 42
33480: PUSH
33481: LD_INT 24
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: LIST
33488: IN
33489: IFFALSE 33510
// points := [ 25 , 5 , 3 ] ;
33491: LD_ADDR_VAR 0 9
33495: PUSH
33496: LD_INT 25
33498: PUSH
33499: LD_INT 5
33501: PUSH
33502: LD_INT 3
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33510: LD_VAR 0 6
33514: PPUSH
33515: CALL_OW 264
33519: PUSH
33520: LD_INT 4
33522: PUSH
33523: LD_INT 43
33525: PUSH
33526: LD_INT 25
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: LIST
33533: IN
33534: IFFALSE 33555
// points := [ 40 , 15 , 5 ] ;
33536: LD_ADDR_VAR 0 9
33540: PUSH
33541: LD_INT 40
33543: PUSH
33544: LD_INT 15
33546: PUSH
33547: LD_INT 5
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: LIST
33554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33555: LD_VAR 0 6
33559: PPUSH
33560: CALL_OW 264
33564: PUSH
33565: LD_INT 3
33567: PUSH
33568: LD_INT 23
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: IN
33575: IFFALSE 33596
// points := [ 7 , 25 , 8 ] ;
33577: LD_ADDR_VAR 0 9
33581: PUSH
33582: LD_INT 7
33584: PUSH
33585: LD_INT 25
33587: PUSH
33588: LD_INT 8
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: LIST
33595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33596: LD_VAR 0 6
33600: PPUSH
33601: CALL_OW 264
33605: PUSH
33606: LD_INT 5
33608: PUSH
33609: LD_INT 27
33611: PUSH
33612: LD_INT 44
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: LIST
33619: IN
33620: IFFALSE 33641
// points := [ 14 , 50 , 16 ] ;
33622: LD_ADDR_VAR 0 9
33626: PUSH
33627: LD_INT 14
33629: PUSH
33630: LD_INT 50
33632: PUSH
33633: LD_INT 16
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: LIST
33640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33641: LD_VAR 0 6
33645: PPUSH
33646: CALL_OW 264
33650: PUSH
33651: LD_INT 6
33653: PUSH
33654: LD_INT 46
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: IN
33661: IFFALSE 33682
// points := [ 32 , 120 , 70 ] ;
33663: LD_ADDR_VAR 0 9
33667: PUSH
33668: LD_INT 32
33670: PUSH
33671: LD_INT 120
33673: PUSH
33674: LD_INT 70
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: LIST
33681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
33682: LD_VAR 0 6
33686: PPUSH
33687: CALL_OW 264
33691: PUSH
33692: LD_INT 7
33694: PUSH
33695: LD_INT 28
33697: PUSH
33698: LD_INT 45
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: LIST
33705: IN
33706: IFFALSE 33727
// points := [ 35 , 20 , 45 ] ;
33708: LD_ADDR_VAR 0 9
33712: PUSH
33713: LD_INT 35
33715: PUSH
33716: LD_INT 20
33718: PUSH
33719: LD_INT 45
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: LIST
33726: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33727: LD_VAR 0 6
33731: PPUSH
33732: CALL_OW 264
33736: PUSH
33737: LD_INT 47
33739: PUSH
33740: EMPTY
33741: LIST
33742: IN
33743: IFFALSE 33764
// points := [ 67 , 45 , 75 ] ;
33745: LD_ADDR_VAR 0 9
33749: PUSH
33750: LD_INT 67
33752: PUSH
33753: LD_INT 45
33755: PUSH
33756: LD_INT 75
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: LIST
33763: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33764: LD_VAR 0 6
33768: PPUSH
33769: CALL_OW 264
33773: PUSH
33774: LD_INT 26
33776: PUSH
33777: EMPTY
33778: LIST
33779: IN
33780: IFFALSE 33801
// points := [ 120 , 30 , 80 ] ;
33782: LD_ADDR_VAR 0 9
33786: PUSH
33787: LD_INT 120
33789: PUSH
33790: LD_INT 30
33792: PUSH
33793: LD_INT 80
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: LIST
33800: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33801: LD_VAR 0 6
33805: PPUSH
33806: CALL_OW 264
33810: PUSH
33811: LD_INT 22
33813: PUSH
33814: EMPTY
33815: LIST
33816: IN
33817: IFFALSE 33838
// points := [ 40 , 1 , 1 ] ;
33819: LD_ADDR_VAR 0 9
33823: PUSH
33824: LD_INT 40
33826: PUSH
33827: LD_INT 1
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: LIST
33837: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33838: LD_VAR 0 6
33842: PPUSH
33843: CALL_OW 264
33847: PUSH
33848: LD_INT 29
33850: PUSH
33851: EMPTY
33852: LIST
33853: IN
33854: IFFALSE 33875
// points := [ 70 , 200 , 400 ] ;
33856: LD_ADDR_VAR 0 9
33860: PUSH
33861: LD_INT 70
33863: PUSH
33864: LD_INT 200
33866: PUSH
33867: LD_INT 400
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: LIST
33874: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33875: LD_VAR 0 6
33879: PPUSH
33880: CALL_OW 264
33884: PUSH
33885: LD_INT 14
33887: PUSH
33888: LD_INT 53
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: IN
33895: IFFALSE 33916
// points := [ 40 , 10 , 20 ] ;
33897: LD_ADDR_VAR 0 9
33901: PUSH
33902: LD_INT 40
33904: PUSH
33905: LD_INT 10
33907: PUSH
33908: LD_INT 20
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: LIST
33915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33916: LD_VAR 0 6
33920: PPUSH
33921: CALL_OW 264
33925: PUSH
33926: LD_INT 9
33928: PUSH
33929: EMPTY
33930: LIST
33931: IN
33932: IFFALSE 33953
// points := [ 5 , 70 , 20 ] ;
33934: LD_ADDR_VAR 0 9
33938: PUSH
33939: LD_INT 5
33941: PUSH
33942: LD_INT 70
33944: PUSH
33945: LD_INT 20
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: LIST
33952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33953: LD_VAR 0 6
33957: PPUSH
33958: CALL_OW 264
33962: PUSH
33963: LD_INT 10
33965: PUSH
33966: EMPTY
33967: LIST
33968: IN
33969: IFFALSE 33990
// points := [ 35 , 110 , 70 ] ;
33971: LD_ADDR_VAR 0 9
33975: PUSH
33976: LD_INT 35
33978: PUSH
33979: LD_INT 110
33981: PUSH
33982: LD_INT 70
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: LIST
33989: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33990: LD_VAR 0 6
33994: PPUSH
33995: CALL_OW 265
33999: PUSH
34000: LD_INT 25
34002: EQUAL
34003: IFFALSE 34024
// points := [ 80 , 65 , 100 ] ;
34005: LD_ADDR_VAR 0 9
34009: PUSH
34010: LD_INT 80
34012: PUSH
34013: LD_INT 65
34015: PUSH
34016: LD_INT 100
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34024: LD_VAR 0 6
34028: PPUSH
34029: CALL_OW 263
34033: PUSH
34034: LD_INT 1
34036: EQUAL
34037: IFFALSE 34072
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34039: LD_ADDR_VAR 0 10
34043: PUSH
34044: LD_VAR 0 10
34048: PUSH
34049: LD_VAR 0 6
34053: PPUSH
34054: CALL_OW 311
34058: PPUSH
34059: LD_INT 3
34061: PPUSH
34062: CALL_OW 259
34066: PUSH
34067: LD_INT 4
34069: MUL
34070: MUL
34071: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34072: LD_VAR 0 6
34076: PPUSH
34077: CALL_OW 263
34081: PUSH
34082: LD_INT 2
34084: EQUAL
34085: IFFALSE 34136
// begin j := IsControledBy ( i ) ;
34087: LD_ADDR_VAR 0 7
34091: PUSH
34092: LD_VAR 0 6
34096: PPUSH
34097: CALL_OW 312
34101: ST_TO_ADDR
// if j then
34102: LD_VAR 0 7
34106: IFFALSE 34136
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34108: LD_ADDR_VAR 0 10
34112: PUSH
34113: LD_VAR 0 10
34117: PUSH
34118: LD_VAR 0 7
34122: PPUSH
34123: LD_INT 3
34125: PPUSH
34126: CALL_OW 259
34130: PUSH
34131: LD_INT 3
34133: MUL
34134: MUL
34135: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34136: LD_VAR 0 6
34140: PPUSH
34141: CALL_OW 264
34145: PUSH
34146: LD_INT 5
34148: PUSH
34149: LD_INT 6
34151: PUSH
34152: LD_INT 46
34154: PUSH
34155: LD_INT 44
34157: PUSH
34158: LD_INT 47
34160: PUSH
34161: LD_INT 45
34163: PUSH
34164: LD_INT 28
34166: PUSH
34167: LD_INT 7
34169: PUSH
34170: LD_INT 27
34172: PUSH
34173: LD_INT 29
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: IN
34188: PUSH
34189: LD_VAR 0 1
34193: PPUSH
34194: LD_INT 52
34196: PPUSH
34197: CALL_OW 321
34201: PUSH
34202: LD_INT 2
34204: EQUAL
34205: AND
34206: IFFALSE 34223
// bpoints := bpoints * 1.2 ;
34208: LD_ADDR_VAR 0 10
34212: PUSH
34213: LD_VAR 0 10
34217: PUSH
34218: LD_REAL  1.20000000000000E+0000
34221: MUL
34222: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34223: LD_VAR 0 6
34227: PPUSH
34228: CALL_OW 264
34232: PUSH
34233: LD_INT 6
34235: PUSH
34236: LD_INT 46
34238: PUSH
34239: LD_INT 47
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: LIST
34246: IN
34247: IFFALSE 34264
// bpoints := bpoints * 1.2 ;
34249: LD_ADDR_VAR 0 10
34253: PUSH
34254: LD_VAR 0 10
34258: PUSH
34259: LD_REAL  1.20000000000000E+0000
34262: MUL
34263: ST_TO_ADDR
// end ; unit_building :
34264: GO 34278
34266: LD_INT 3
34268: DOUBLE
34269: EQUAL
34270: IFTRUE 34274
34272: GO 34277
34274: POP
// ; end ;
34275: GO 34278
34277: POP
// for j = 1 to 3 do
34278: LD_ADDR_VAR 0 7
34282: PUSH
34283: DOUBLE
34284: LD_INT 1
34286: DEC
34287: ST_TO_ADDR
34288: LD_INT 3
34290: PUSH
34291: FOR_TO
34292: IFFALSE 34345
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34294: LD_ADDR_VAR 0 5
34298: PUSH
34299: LD_VAR 0 5
34303: PPUSH
34304: LD_VAR 0 7
34308: PPUSH
34309: LD_VAR 0 5
34313: PUSH
34314: LD_VAR 0 7
34318: ARRAY
34319: PUSH
34320: LD_VAR 0 9
34324: PUSH
34325: LD_VAR 0 7
34329: ARRAY
34330: PUSH
34331: LD_VAR 0 10
34335: MUL
34336: PLUS
34337: PPUSH
34338: CALL_OW 1
34342: ST_TO_ADDR
34343: GO 34291
34345: POP
34346: POP
// end ;
34347: GO 32830
34349: POP
34350: POP
// result := Replace ( result , 4 , tmp ) ;
34351: LD_ADDR_VAR 0 5
34355: PUSH
34356: LD_VAR 0 5
34360: PPUSH
34361: LD_INT 4
34363: PPUSH
34364: LD_VAR 0 8
34368: PPUSH
34369: CALL_OW 1
34373: ST_TO_ADDR
// end ;
34374: LD_VAR 0 5
34378: RET
// export function DangerAtRange ( unit , range ) ; begin
34379: LD_INT 0
34381: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34382: LD_ADDR_VAR 0 3
34386: PUSH
34387: LD_VAR 0 1
34391: PPUSH
34392: CALL_OW 255
34396: PPUSH
34397: LD_VAR 0 1
34401: PPUSH
34402: CALL_OW 250
34406: PPUSH
34407: LD_VAR 0 1
34411: PPUSH
34412: CALL_OW 251
34416: PPUSH
34417: LD_VAR 0 2
34421: PPUSH
34422: CALL 32682 0 4
34426: ST_TO_ADDR
// end ;
34427: LD_VAR 0 3
34431: RET
// export function DangerInArea ( side , area ) ; begin
34432: LD_INT 0
34434: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34435: LD_ADDR_VAR 0 3
34439: PUSH
34440: LD_VAR 0 2
34444: PPUSH
34445: LD_INT 81
34447: PUSH
34448: LD_VAR 0 1
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PPUSH
34457: CALL_OW 70
34461: ST_TO_ADDR
// end ;
34462: LD_VAR 0 3
34466: RET
// export function IsExtension ( b ) ; begin
34467: LD_INT 0
34469: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34470: LD_ADDR_VAR 0 2
34474: PUSH
34475: LD_VAR 0 1
34479: PUSH
34480: LD_INT 23
34482: PUSH
34483: LD_INT 20
34485: PUSH
34486: LD_INT 22
34488: PUSH
34489: LD_INT 17
34491: PUSH
34492: LD_INT 24
34494: PUSH
34495: LD_INT 21
34497: PUSH
34498: LD_INT 19
34500: PUSH
34501: LD_INT 16
34503: PUSH
34504: LD_INT 25
34506: PUSH
34507: LD_INT 18
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: IN
34522: ST_TO_ADDR
// end ;
34523: LD_VAR 0 2
34527: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
34528: LD_INT 0
34530: PPUSH
34531: PPUSH
34532: PPUSH
// result := [ ] ;
34533: LD_ADDR_VAR 0 3
34537: PUSH
34538: EMPTY
34539: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34540: LD_ADDR_VAR 0 4
34544: PUSH
34545: LD_VAR 0 2
34549: PPUSH
34550: LD_INT 21
34552: PUSH
34553: LD_INT 3
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PPUSH
34560: CALL_OW 70
34564: ST_TO_ADDR
// if not tmp then
34565: LD_VAR 0 4
34569: NOT
34570: IFFALSE 34574
// exit ;
34572: GO 34632
// for i in tmp do
34574: LD_ADDR_VAR 0 5
34578: PUSH
34579: LD_VAR 0 4
34583: PUSH
34584: FOR_IN
34585: IFFALSE 34620
// if GetBase ( i ) <> base then
34587: LD_VAR 0 5
34591: PPUSH
34592: CALL_OW 274
34596: PUSH
34597: LD_VAR 0 1
34601: NONEQUAL
34602: IFFALSE 34618
// ComLinkToBase ( base , i ) ;
34604: LD_VAR 0 1
34608: PPUSH
34609: LD_VAR 0 5
34613: PPUSH
34614: CALL_OW 169
34618: GO 34584
34620: POP
34621: POP
// result := tmp ;
34622: LD_ADDR_VAR 0 3
34626: PUSH
34627: LD_VAR 0 4
34631: ST_TO_ADDR
// end ;
34632: LD_VAR 0 3
34636: RET
// export function ComComplete ( unit , b ) ; var i ; begin
34637: LD_INT 0
34639: PPUSH
34640: PPUSH
// if BuildingStatus ( b ) = bs_build then
34641: LD_VAR 0 2
34645: PPUSH
34646: CALL_OW 461
34650: PUSH
34651: LD_INT 1
34653: EQUAL
34654: IFFALSE 34714
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34656: LD_VAR 0 1
34660: PPUSH
34661: LD_STRING h
34663: PUSH
34664: LD_VAR 0 2
34668: PPUSH
34669: CALL_OW 250
34673: PUSH
34674: LD_VAR 0 2
34678: PPUSH
34679: CALL_OW 251
34683: PUSH
34684: LD_VAR 0 2
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: PUSH
34707: EMPTY
34708: LIST
34709: PPUSH
34710: CALL_OW 446
// end ;
34714: LD_VAR 0 3
34718: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34719: LD_INT 0
34721: PPUSH
34722: PPUSH
34723: PPUSH
34724: PPUSH
34725: PPUSH
34726: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
34727: LD_VAR 0 1
34731: NOT
34732: PUSH
34733: LD_VAR 0 1
34737: PPUSH
34738: CALL_OW 263
34742: PUSH
34743: LD_INT 2
34745: EQUAL
34746: NOT
34747: OR
34748: IFFALSE 34752
// exit ;
34750: GO 35068
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34752: LD_ADDR_VAR 0 6
34756: PUSH
34757: LD_INT 22
34759: PUSH
34760: LD_VAR 0 1
34764: PPUSH
34765: CALL_OW 255
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 2
34776: PUSH
34777: LD_INT 30
34779: PUSH
34780: LD_INT 36
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 34
34789: PUSH
34790: LD_INT 31
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: LIST
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PPUSH
34806: CALL_OW 69
34810: ST_TO_ADDR
// if not tmp then
34811: LD_VAR 0 6
34815: NOT
34816: IFFALSE 34820
// exit ;
34818: GO 35068
// result := [ ] ;
34820: LD_ADDR_VAR 0 2
34824: PUSH
34825: EMPTY
34826: ST_TO_ADDR
// for i in tmp do
34827: LD_ADDR_VAR 0 3
34831: PUSH
34832: LD_VAR 0 6
34836: PUSH
34837: FOR_IN
34838: IFFALSE 34909
// begin t := UnitsInside ( i ) ;
34840: LD_ADDR_VAR 0 4
34844: PUSH
34845: LD_VAR 0 3
34849: PPUSH
34850: CALL_OW 313
34854: ST_TO_ADDR
// if t then
34855: LD_VAR 0 4
34859: IFFALSE 34907
// for j in t do
34861: LD_ADDR_VAR 0 7
34865: PUSH
34866: LD_VAR 0 4
34870: PUSH
34871: FOR_IN
34872: IFFALSE 34905
// result := Insert ( result , result + 1 , j ) ;
34874: LD_ADDR_VAR 0 2
34878: PUSH
34879: LD_VAR 0 2
34883: PPUSH
34884: LD_VAR 0 2
34888: PUSH
34889: LD_INT 1
34891: PLUS
34892: PPUSH
34893: LD_VAR 0 7
34897: PPUSH
34898: CALL_OW 2
34902: ST_TO_ADDR
34903: GO 34871
34905: POP
34906: POP
// end ;
34907: GO 34837
34909: POP
34910: POP
// if not result then
34911: LD_VAR 0 2
34915: NOT
34916: IFFALSE 34920
// exit ;
34918: GO 35068
// mech := result [ 1 ] ;
34920: LD_ADDR_VAR 0 5
34924: PUSH
34925: LD_VAR 0 2
34929: PUSH
34930: LD_INT 1
34932: ARRAY
34933: ST_TO_ADDR
// if result > 1 then
34934: LD_VAR 0 2
34938: PUSH
34939: LD_INT 1
34941: GREATER
34942: IFFALSE 35054
// for i = 2 to result do
34944: LD_ADDR_VAR 0 3
34948: PUSH
34949: DOUBLE
34950: LD_INT 2
34952: DEC
34953: ST_TO_ADDR
34954: LD_VAR 0 2
34958: PUSH
34959: FOR_TO
34960: IFFALSE 35052
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34962: LD_ADDR_VAR 0 4
34966: PUSH
34967: LD_VAR 0 2
34971: PUSH
34972: LD_VAR 0 3
34976: ARRAY
34977: PPUSH
34978: LD_INT 3
34980: PPUSH
34981: CALL_OW 259
34985: PUSH
34986: LD_VAR 0 2
34990: PUSH
34991: LD_VAR 0 3
34995: ARRAY
34996: PPUSH
34997: CALL_OW 432
35001: MINUS
35002: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35003: LD_VAR 0 4
35007: PUSH
35008: LD_VAR 0 5
35012: PPUSH
35013: LD_INT 3
35015: PPUSH
35016: CALL_OW 259
35020: PUSH
35021: LD_VAR 0 5
35025: PPUSH
35026: CALL_OW 432
35030: MINUS
35031: GREATEREQUAL
35032: IFFALSE 35050
// mech := result [ i ] ;
35034: LD_ADDR_VAR 0 5
35038: PUSH
35039: LD_VAR 0 2
35043: PUSH
35044: LD_VAR 0 3
35048: ARRAY
35049: ST_TO_ADDR
// end ;
35050: GO 34959
35052: POP
35053: POP
// ComLinkTo ( vehicle , mech ) ;
35054: LD_VAR 0 1
35058: PPUSH
35059: LD_VAR 0 5
35063: PPUSH
35064: CALL_OW 135
// end ;
35068: LD_VAR 0 2
35072: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35073: LD_INT 0
35075: PPUSH
35076: PPUSH
35077: PPUSH
35078: PPUSH
35079: PPUSH
35080: PPUSH
35081: PPUSH
35082: PPUSH
35083: PPUSH
35084: PPUSH
35085: PPUSH
35086: PPUSH
35087: PPUSH
// result := [ ] ;
35088: LD_ADDR_VAR 0 7
35092: PUSH
35093: EMPTY
35094: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35095: LD_VAR 0 1
35099: PPUSH
35100: CALL_OW 266
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: LD_INT 1
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: IN
35115: NOT
35116: IFFALSE 35120
// exit ;
35118: GO 36751
// if name then
35120: LD_VAR 0 3
35124: IFFALSE 35140
// SetBName ( base_dep , name ) ;
35126: LD_VAR 0 1
35130: PPUSH
35131: LD_VAR 0 3
35135: PPUSH
35136: CALL_OW 500
// base := GetBase ( base_dep ) ;
35140: LD_ADDR_VAR 0 15
35144: PUSH
35145: LD_VAR 0 1
35149: PPUSH
35150: CALL_OW 274
35154: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35155: LD_ADDR_VAR 0 16
35159: PUSH
35160: LD_VAR 0 1
35164: PPUSH
35165: CALL_OW 255
35169: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35170: LD_ADDR_VAR 0 17
35174: PUSH
35175: LD_VAR 0 1
35179: PPUSH
35180: CALL_OW 248
35184: ST_TO_ADDR
// if sources then
35185: LD_VAR 0 5
35189: IFFALSE 35236
// for i = 1 to 3 do
35191: LD_ADDR_VAR 0 8
35195: PUSH
35196: DOUBLE
35197: LD_INT 1
35199: DEC
35200: ST_TO_ADDR
35201: LD_INT 3
35203: PUSH
35204: FOR_TO
35205: IFFALSE 35234
// AddResourceType ( base , i , sources [ i ] ) ;
35207: LD_VAR 0 15
35211: PPUSH
35212: LD_VAR 0 8
35216: PPUSH
35217: LD_VAR 0 5
35221: PUSH
35222: LD_VAR 0 8
35226: ARRAY
35227: PPUSH
35228: CALL_OW 276
35232: GO 35204
35234: POP
35235: POP
// buildings := GetBaseBuildings ( base , area ) ;
35236: LD_ADDR_VAR 0 18
35240: PUSH
35241: LD_VAR 0 15
35245: PPUSH
35246: LD_VAR 0 2
35250: PPUSH
35251: CALL 34528 0 2
35255: ST_TO_ADDR
// InitHc ;
35256: CALL_OW 19
// InitUc ;
35260: CALL_OW 18
// uc_side := side ;
35264: LD_ADDR_OWVAR 20
35268: PUSH
35269: LD_VAR 0 16
35273: ST_TO_ADDR
// uc_nation := nation ;
35274: LD_ADDR_OWVAR 21
35278: PUSH
35279: LD_VAR 0 17
35283: ST_TO_ADDR
// if buildings then
35284: LD_VAR 0 18
35288: IFFALSE 36610
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35290: LD_ADDR_VAR 0 19
35294: PUSH
35295: LD_VAR 0 18
35299: PPUSH
35300: LD_INT 2
35302: PUSH
35303: LD_INT 30
35305: PUSH
35306: LD_INT 29
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 30
35315: PUSH
35316: LD_INT 30
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: LIST
35327: PPUSH
35328: CALL_OW 72
35332: ST_TO_ADDR
// if tmp then
35333: LD_VAR 0 19
35337: IFFALSE 35385
// for i in tmp do
35339: LD_ADDR_VAR 0 8
35343: PUSH
35344: LD_VAR 0 19
35348: PUSH
35349: FOR_IN
35350: IFFALSE 35383
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35352: LD_VAR 0 8
35356: PPUSH
35357: CALL_OW 250
35361: PPUSH
35362: LD_VAR 0 8
35366: PPUSH
35367: CALL_OW 251
35371: PPUSH
35372: LD_VAR 0 16
35376: PPUSH
35377: CALL_OW 441
35381: GO 35349
35383: POP
35384: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35385: LD_VAR 0 18
35389: PPUSH
35390: LD_INT 2
35392: PUSH
35393: LD_INT 30
35395: PUSH
35396: LD_INT 32
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 30
35405: PUSH
35406: LD_INT 33
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: LIST
35417: PPUSH
35418: CALL_OW 72
35422: IFFALSE 35510
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35424: LD_ADDR_VAR 0 8
35428: PUSH
35429: LD_VAR 0 18
35433: PPUSH
35434: LD_INT 2
35436: PUSH
35437: LD_INT 30
35439: PUSH
35440: LD_INT 32
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 30
35449: PUSH
35450: LD_INT 33
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: PPUSH
35462: CALL_OW 72
35466: PUSH
35467: FOR_IN
35468: IFFALSE 35508
// begin if not GetBWeapon ( i ) then
35470: LD_VAR 0 8
35474: PPUSH
35475: CALL_OW 269
35479: NOT
35480: IFFALSE 35506
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35482: LD_VAR 0 8
35486: PPUSH
35487: LD_VAR 0 8
35491: PPUSH
35492: LD_VAR 0 2
35496: PPUSH
35497: CALL 36756 0 2
35501: PPUSH
35502: CALL_OW 431
// end ;
35506: GO 35467
35508: POP
35509: POP
// end ; for i = 1 to personel do
35510: LD_ADDR_VAR 0 8
35514: PUSH
35515: DOUBLE
35516: LD_INT 1
35518: DEC
35519: ST_TO_ADDR
35520: LD_VAR 0 6
35524: PUSH
35525: FOR_TO
35526: IFFALSE 36590
// begin if i > 4 then
35528: LD_VAR 0 8
35532: PUSH
35533: LD_INT 4
35535: GREATER
35536: IFFALSE 35540
// break ;
35538: GO 36590
// case i of 1 :
35540: LD_VAR 0 8
35544: PUSH
35545: LD_INT 1
35547: DOUBLE
35548: EQUAL
35549: IFTRUE 35553
35551: GO 35633
35553: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35554: LD_ADDR_VAR 0 12
35558: PUSH
35559: LD_VAR 0 18
35563: PPUSH
35564: LD_INT 22
35566: PUSH
35567: LD_VAR 0 16
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 58
35578: PUSH
35579: EMPTY
35580: LIST
35581: PUSH
35582: LD_INT 2
35584: PUSH
35585: LD_INT 30
35587: PUSH
35588: LD_INT 32
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 30
35597: PUSH
35598: LD_INT 4
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 30
35607: PUSH
35608: LD_INT 5
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: PPUSH
35626: CALL_OW 72
35630: ST_TO_ADDR
35631: GO 35855
35633: LD_INT 2
35635: DOUBLE
35636: EQUAL
35637: IFTRUE 35641
35639: GO 35703
35641: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35642: LD_ADDR_VAR 0 12
35646: PUSH
35647: LD_VAR 0 18
35651: PPUSH
35652: LD_INT 22
35654: PUSH
35655: LD_VAR 0 16
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 2
35666: PUSH
35667: LD_INT 30
35669: PUSH
35670: LD_INT 0
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 30
35679: PUSH
35680: LD_INT 1
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PPUSH
35696: CALL_OW 72
35700: ST_TO_ADDR
35701: GO 35855
35703: LD_INT 3
35705: DOUBLE
35706: EQUAL
35707: IFTRUE 35711
35709: GO 35773
35711: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35712: LD_ADDR_VAR 0 12
35716: PUSH
35717: LD_VAR 0 18
35721: PPUSH
35722: LD_INT 22
35724: PUSH
35725: LD_VAR 0 16
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 2
35736: PUSH
35737: LD_INT 30
35739: PUSH
35740: LD_INT 2
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 30
35749: PUSH
35750: LD_INT 3
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PPUSH
35766: CALL_OW 72
35770: ST_TO_ADDR
35771: GO 35855
35773: LD_INT 4
35775: DOUBLE
35776: EQUAL
35777: IFTRUE 35781
35779: GO 35854
35781: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35782: LD_ADDR_VAR 0 12
35786: PUSH
35787: LD_VAR 0 18
35791: PPUSH
35792: LD_INT 22
35794: PUSH
35795: LD_VAR 0 16
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 2
35806: PUSH
35807: LD_INT 30
35809: PUSH
35810: LD_INT 6
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 30
35819: PUSH
35820: LD_INT 7
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 30
35829: PUSH
35830: LD_INT 8
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PPUSH
35847: CALL_OW 72
35851: ST_TO_ADDR
35852: GO 35855
35854: POP
// if i = 1 then
35855: LD_VAR 0 8
35859: PUSH
35860: LD_INT 1
35862: EQUAL
35863: IFFALSE 35974
// begin tmp := [ ] ;
35865: LD_ADDR_VAR 0 19
35869: PUSH
35870: EMPTY
35871: ST_TO_ADDR
// for j in f do
35872: LD_ADDR_VAR 0 9
35876: PUSH
35877: LD_VAR 0 12
35881: PUSH
35882: FOR_IN
35883: IFFALSE 35956
// if GetBType ( j ) = b_bunker then
35885: LD_VAR 0 9
35889: PPUSH
35890: CALL_OW 266
35894: PUSH
35895: LD_INT 32
35897: EQUAL
35898: IFFALSE 35925
// tmp := Insert ( tmp , 1 , j ) else
35900: LD_ADDR_VAR 0 19
35904: PUSH
35905: LD_VAR 0 19
35909: PPUSH
35910: LD_INT 1
35912: PPUSH
35913: LD_VAR 0 9
35917: PPUSH
35918: CALL_OW 2
35922: ST_TO_ADDR
35923: GO 35954
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35925: LD_ADDR_VAR 0 19
35929: PUSH
35930: LD_VAR 0 19
35934: PPUSH
35935: LD_VAR 0 19
35939: PUSH
35940: LD_INT 1
35942: PLUS
35943: PPUSH
35944: LD_VAR 0 9
35948: PPUSH
35949: CALL_OW 2
35953: ST_TO_ADDR
35954: GO 35882
35956: POP
35957: POP
// if tmp then
35958: LD_VAR 0 19
35962: IFFALSE 35974
// f := tmp ;
35964: LD_ADDR_VAR 0 12
35968: PUSH
35969: LD_VAR 0 19
35973: ST_TO_ADDR
// end ; x := personel [ i ] ;
35974: LD_ADDR_VAR 0 13
35978: PUSH
35979: LD_VAR 0 6
35983: PUSH
35984: LD_VAR 0 8
35988: ARRAY
35989: ST_TO_ADDR
// if x = - 1 then
35990: LD_VAR 0 13
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: EQUAL
35999: IFFALSE 36208
// begin for j in f do
36001: LD_ADDR_VAR 0 9
36005: PUSH
36006: LD_VAR 0 12
36010: PUSH
36011: FOR_IN
36012: IFFALSE 36204
// repeat InitHc ;
36014: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36018: LD_VAR 0 9
36022: PPUSH
36023: CALL_OW 266
36027: PUSH
36028: LD_INT 5
36030: EQUAL
36031: IFFALSE 36101
// begin if UnitsInside ( j ) < 3 then
36033: LD_VAR 0 9
36037: PPUSH
36038: CALL_OW 313
36042: PUSH
36043: LD_INT 3
36045: LESS
36046: IFFALSE 36082
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36048: LD_INT 0
36050: PPUSH
36051: LD_INT 5
36053: PUSH
36054: LD_INT 8
36056: PUSH
36057: LD_INT 9
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: LIST
36064: PUSH
36065: LD_VAR 0 17
36069: ARRAY
36070: PPUSH
36071: LD_VAR 0 4
36075: PPUSH
36076: CALL_OW 380
36080: GO 36099
// PrepareHuman ( false , i , skill ) ;
36082: LD_INT 0
36084: PPUSH
36085: LD_VAR 0 8
36089: PPUSH
36090: LD_VAR 0 4
36094: PPUSH
36095: CALL_OW 380
// end else
36099: GO 36118
// PrepareHuman ( false , i , skill ) ;
36101: LD_INT 0
36103: PPUSH
36104: LD_VAR 0 8
36108: PPUSH
36109: LD_VAR 0 4
36113: PPUSH
36114: CALL_OW 380
// un := CreateHuman ;
36118: LD_ADDR_VAR 0 14
36122: PUSH
36123: CALL_OW 44
36127: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36128: LD_ADDR_VAR 0 7
36132: PUSH
36133: LD_VAR 0 7
36137: PPUSH
36138: LD_INT 1
36140: PPUSH
36141: LD_VAR 0 14
36145: PPUSH
36146: CALL_OW 2
36150: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36151: LD_VAR 0 14
36155: PPUSH
36156: LD_VAR 0 9
36160: PPUSH
36161: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36165: LD_VAR 0 9
36169: PPUSH
36170: CALL_OW 313
36174: PUSH
36175: LD_INT 6
36177: EQUAL
36178: PUSH
36179: LD_VAR 0 9
36183: PPUSH
36184: CALL_OW 266
36188: PUSH
36189: LD_INT 32
36191: PUSH
36192: LD_INT 31
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: IN
36199: OR
36200: IFFALSE 36014
36202: GO 36011
36204: POP
36205: POP
// end else
36206: GO 36588
// for j = 1 to x do
36208: LD_ADDR_VAR 0 9
36212: PUSH
36213: DOUBLE
36214: LD_INT 1
36216: DEC
36217: ST_TO_ADDR
36218: LD_VAR 0 13
36222: PUSH
36223: FOR_TO
36224: IFFALSE 36586
// begin InitHc ;
36226: CALL_OW 19
// if not f then
36230: LD_VAR 0 12
36234: NOT
36235: IFFALSE 36324
// begin PrepareHuman ( false , i , skill ) ;
36237: LD_INT 0
36239: PPUSH
36240: LD_VAR 0 8
36244: PPUSH
36245: LD_VAR 0 4
36249: PPUSH
36250: CALL_OW 380
// un := CreateHuman ;
36254: LD_ADDR_VAR 0 14
36258: PUSH
36259: CALL_OW 44
36263: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36264: LD_ADDR_VAR 0 7
36268: PUSH
36269: LD_VAR 0 7
36273: PPUSH
36274: LD_INT 1
36276: PPUSH
36277: LD_VAR 0 14
36281: PPUSH
36282: CALL_OW 2
36286: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36287: LD_VAR 0 14
36291: PPUSH
36292: LD_VAR 0 1
36296: PPUSH
36297: CALL_OW 250
36301: PPUSH
36302: LD_VAR 0 1
36306: PPUSH
36307: CALL_OW 251
36311: PPUSH
36312: LD_INT 10
36314: PPUSH
36315: LD_INT 0
36317: PPUSH
36318: CALL_OW 50
// continue ;
36322: GO 36223
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36324: LD_VAR 0 12
36328: PUSH
36329: LD_INT 1
36331: ARRAY
36332: PPUSH
36333: CALL_OW 313
36337: PUSH
36338: LD_VAR 0 12
36342: PUSH
36343: LD_INT 1
36345: ARRAY
36346: PPUSH
36347: CALL_OW 266
36351: PUSH
36352: LD_INT 32
36354: PUSH
36355: LD_INT 31
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: IN
36362: AND
36363: PUSH
36364: LD_VAR 0 12
36368: PUSH
36369: LD_INT 1
36371: ARRAY
36372: PPUSH
36373: CALL_OW 313
36377: PUSH
36378: LD_INT 6
36380: EQUAL
36381: OR
36382: IFFALSE 36402
// f := Delete ( f , 1 ) ;
36384: LD_ADDR_VAR 0 12
36388: PUSH
36389: LD_VAR 0 12
36393: PPUSH
36394: LD_INT 1
36396: PPUSH
36397: CALL_OW 3
36401: ST_TO_ADDR
// if not f then
36402: LD_VAR 0 12
36406: NOT
36407: IFFALSE 36425
// begin x := x + 2 ;
36409: LD_ADDR_VAR 0 13
36413: PUSH
36414: LD_VAR 0 13
36418: PUSH
36419: LD_INT 2
36421: PLUS
36422: ST_TO_ADDR
// continue ;
36423: GO 36223
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36425: LD_VAR 0 12
36429: PUSH
36430: LD_INT 1
36432: ARRAY
36433: PPUSH
36434: CALL_OW 266
36438: PUSH
36439: LD_INT 5
36441: EQUAL
36442: IFFALSE 36516
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36444: LD_VAR 0 12
36448: PUSH
36449: LD_INT 1
36451: ARRAY
36452: PPUSH
36453: CALL_OW 313
36457: PUSH
36458: LD_INT 3
36460: LESS
36461: IFFALSE 36497
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36463: LD_INT 0
36465: PPUSH
36466: LD_INT 5
36468: PUSH
36469: LD_INT 8
36471: PUSH
36472: LD_INT 9
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: LIST
36479: PUSH
36480: LD_VAR 0 17
36484: ARRAY
36485: PPUSH
36486: LD_VAR 0 4
36490: PPUSH
36491: CALL_OW 380
36495: GO 36514
// PrepareHuman ( false , i , skill ) ;
36497: LD_INT 0
36499: PPUSH
36500: LD_VAR 0 8
36504: PPUSH
36505: LD_VAR 0 4
36509: PPUSH
36510: CALL_OW 380
// end else
36514: GO 36533
// PrepareHuman ( false , i , skill ) ;
36516: LD_INT 0
36518: PPUSH
36519: LD_VAR 0 8
36523: PPUSH
36524: LD_VAR 0 4
36528: PPUSH
36529: CALL_OW 380
// un := CreateHuman ;
36533: LD_ADDR_VAR 0 14
36537: PUSH
36538: CALL_OW 44
36542: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36543: LD_ADDR_VAR 0 7
36547: PUSH
36548: LD_VAR 0 7
36552: PPUSH
36553: LD_INT 1
36555: PPUSH
36556: LD_VAR 0 14
36560: PPUSH
36561: CALL_OW 2
36565: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36566: LD_VAR 0 14
36570: PPUSH
36571: LD_VAR 0 12
36575: PUSH
36576: LD_INT 1
36578: ARRAY
36579: PPUSH
36580: CALL_OW 52
// end ;
36584: GO 36223
36586: POP
36587: POP
// end ;
36588: GO 35525
36590: POP
36591: POP
// result := result ^ buildings ;
36592: LD_ADDR_VAR 0 7
36596: PUSH
36597: LD_VAR 0 7
36601: PUSH
36602: LD_VAR 0 18
36606: ADD
36607: ST_TO_ADDR
// end else
36608: GO 36751
// begin for i = 1 to personel do
36610: LD_ADDR_VAR 0 8
36614: PUSH
36615: DOUBLE
36616: LD_INT 1
36618: DEC
36619: ST_TO_ADDR
36620: LD_VAR 0 6
36624: PUSH
36625: FOR_TO
36626: IFFALSE 36749
// begin if i > 4 then
36628: LD_VAR 0 8
36632: PUSH
36633: LD_INT 4
36635: GREATER
36636: IFFALSE 36640
// break ;
36638: GO 36749
// x := personel [ i ] ;
36640: LD_ADDR_VAR 0 13
36644: PUSH
36645: LD_VAR 0 6
36649: PUSH
36650: LD_VAR 0 8
36654: ARRAY
36655: ST_TO_ADDR
// if x = - 1 then
36656: LD_VAR 0 13
36660: PUSH
36661: LD_INT 1
36663: NEG
36664: EQUAL
36665: IFFALSE 36669
// continue ;
36667: GO 36625
// PrepareHuman ( false , i , skill ) ;
36669: LD_INT 0
36671: PPUSH
36672: LD_VAR 0 8
36676: PPUSH
36677: LD_VAR 0 4
36681: PPUSH
36682: CALL_OW 380
// un := CreateHuman ;
36686: LD_ADDR_VAR 0 14
36690: PUSH
36691: CALL_OW 44
36695: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36696: LD_VAR 0 14
36700: PPUSH
36701: LD_VAR 0 1
36705: PPUSH
36706: CALL_OW 250
36710: PPUSH
36711: LD_VAR 0 1
36715: PPUSH
36716: CALL_OW 251
36720: PPUSH
36721: LD_INT 10
36723: PPUSH
36724: LD_INT 0
36726: PPUSH
36727: CALL_OW 50
// result := result ^ un ;
36731: LD_ADDR_VAR 0 7
36735: PUSH
36736: LD_VAR 0 7
36740: PUSH
36741: LD_VAR 0 14
36745: ADD
36746: ST_TO_ADDR
// end ;
36747: GO 36625
36749: POP
36750: POP
// end ; end ;
36751: LD_VAR 0 7
36755: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36756: LD_INT 0
36758: PPUSH
36759: PPUSH
36760: PPUSH
36761: PPUSH
36762: PPUSH
36763: PPUSH
36764: PPUSH
36765: PPUSH
36766: PPUSH
36767: PPUSH
36768: PPUSH
36769: PPUSH
36770: PPUSH
36771: PPUSH
36772: PPUSH
36773: PPUSH
// result := false ;
36774: LD_ADDR_VAR 0 3
36778: PUSH
36779: LD_INT 0
36781: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36782: LD_VAR 0 1
36786: NOT
36787: PUSH
36788: LD_VAR 0 1
36792: PPUSH
36793: CALL_OW 266
36797: PUSH
36798: LD_INT 32
36800: PUSH
36801: LD_INT 33
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: IN
36808: NOT
36809: OR
36810: IFFALSE 36814
// exit ;
36812: GO 37950
// nat := GetNation ( tower ) ;
36814: LD_ADDR_VAR 0 12
36818: PUSH
36819: LD_VAR 0 1
36823: PPUSH
36824: CALL_OW 248
36828: ST_TO_ADDR
// side := GetSide ( tower ) ;
36829: LD_ADDR_VAR 0 16
36833: PUSH
36834: LD_VAR 0 1
36838: PPUSH
36839: CALL_OW 255
36843: ST_TO_ADDR
// x := GetX ( tower ) ;
36844: LD_ADDR_VAR 0 10
36848: PUSH
36849: LD_VAR 0 1
36853: PPUSH
36854: CALL_OW 250
36858: ST_TO_ADDR
// y := GetY ( tower ) ;
36859: LD_ADDR_VAR 0 11
36863: PUSH
36864: LD_VAR 0 1
36868: PPUSH
36869: CALL_OW 251
36873: ST_TO_ADDR
// if not x or not y then
36874: LD_VAR 0 10
36878: NOT
36879: PUSH
36880: LD_VAR 0 11
36884: NOT
36885: OR
36886: IFFALSE 36890
// exit ;
36888: GO 37950
// weapon := 0 ;
36890: LD_ADDR_VAR 0 18
36894: PUSH
36895: LD_INT 0
36897: ST_TO_ADDR
// fac_list := [ ] ;
36898: LD_ADDR_VAR 0 17
36902: PUSH
36903: EMPTY
36904: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
36905: LD_ADDR_VAR 0 6
36909: PUSH
36910: LD_VAR 0 1
36914: PPUSH
36915: CALL_OW 274
36919: PPUSH
36920: LD_VAR 0 2
36924: PPUSH
36925: CALL 34528 0 2
36929: PPUSH
36930: LD_INT 30
36932: PUSH
36933: LD_INT 3
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PPUSH
36940: CALL_OW 72
36944: ST_TO_ADDR
// if not factories then
36945: LD_VAR 0 6
36949: NOT
36950: IFFALSE 36954
// exit ;
36952: GO 37950
// for i in factories do
36954: LD_ADDR_VAR 0 8
36958: PUSH
36959: LD_VAR 0 6
36963: PUSH
36964: FOR_IN
36965: IFFALSE 36990
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36967: LD_ADDR_VAR 0 17
36971: PUSH
36972: LD_VAR 0 17
36976: PUSH
36977: LD_VAR 0 8
36981: PPUSH
36982: CALL_OW 478
36986: UNION
36987: ST_TO_ADDR
36988: GO 36964
36990: POP
36991: POP
// if not fac_list then
36992: LD_VAR 0 17
36996: NOT
36997: IFFALSE 37001
// exit ;
36999: GO 37950
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37001: LD_ADDR_VAR 0 5
37005: PUSH
37006: LD_INT 4
37008: PUSH
37009: LD_INT 5
37011: PUSH
37012: LD_INT 9
37014: PUSH
37015: LD_INT 10
37017: PUSH
37018: LD_INT 6
37020: PUSH
37021: LD_INT 7
37023: PUSH
37024: LD_INT 11
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 27
37038: PUSH
37039: LD_INT 28
37041: PUSH
37042: LD_INT 26
37044: PUSH
37045: LD_INT 30
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 43
37056: PUSH
37057: LD_INT 44
37059: PUSH
37060: LD_INT 46
37062: PUSH
37063: LD_INT 45
37065: PUSH
37066: LD_INT 47
37068: PUSH
37069: LD_INT 49
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: LIST
37084: PUSH
37085: LD_VAR 0 12
37089: ARRAY
37090: ST_TO_ADDR
// for i in list do
37091: LD_ADDR_VAR 0 8
37095: PUSH
37096: LD_VAR 0 5
37100: PUSH
37101: FOR_IN
37102: IFFALSE 37135
// if not i in fac_list then
37104: LD_VAR 0 8
37108: PUSH
37109: LD_VAR 0 17
37113: IN
37114: NOT
37115: IFFALSE 37133
// list := list diff i ;
37117: LD_ADDR_VAR 0 5
37121: PUSH
37122: LD_VAR 0 5
37126: PUSH
37127: LD_VAR 0 8
37131: DIFF
37132: ST_TO_ADDR
37133: GO 37101
37135: POP
37136: POP
// if not list then
37137: LD_VAR 0 5
37141: NOT
37142: IFFALSE 37146
// exit ;
37144: GO 37950
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37146: LD_VAR 0 12
37150: PUSH
37151: LD_INT 3
37153: EQUAL
37154: PUSH
37155: LD_INT 49
37157: PUSH
37158: LD_VAR 0 5
37162: IN
37163: AND
37164: PUSH
37165: LD_INT 31
37167: PPUSH
37168: LD_VAR 0 16
37172: PPUSH
37173: CALL_OW 321
37177: PUSH
37178: LD_INT 2
37180: EQUAL
37181: AND
37182: IFFALSE 37242
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37184: LD_INT 22
37186: PUSH
37187: LD_VAR 0 16
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 35
37198: PUSH
37199: LD_INT 49
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 91
37208: PUSH
37209: LD_VAR 0 1
37213: PUSH
37214: LD_INT 10
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: LIST
37226: PPUSH
37227: CALL_OW 69
37231: NOT
37232: IFFALSE 37242
// weapon := ru_time_lapser ;
37234: LD_ADDR_VAR 0 18
37238: PUSH
37239: LD_INT 49
37241: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37242: LD_VAR 0 12
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: IN
37257: PUSH
37258: LD_INT 11
37260: PUSH
37261: LD_VAR 0 5
37265: IN
37266: PUSH
37267: LD_INT 30
37269: PUSH
37270: LD_VAR 0 5
37274: IN
37275: OR
37276: AND
37277: PUSH
37278: LD_INT 6
37280: PPUSH
37281: LD_VAR 0 16
37285: PPUSH
37286: CALL_OW 321
37290: PUSH
37291: LD_INT 2
37293: EQUAL
37294: AND
37295: IFFALSE 37460
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37297: LD_INT 22
37299: PUSH
37300: LD_VAR 0 16
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 2
37311: PUSH
37312: LD_INT 35
37314: PUSH
37315: LD_INT 11
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 35
37324: PUSH
37325: LD_INT 30
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 91
37339: PUSH
37340: LD_VAR 0 1
37344: PUSH
37345: LD_INT 18
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: LIST
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: PPUSH
37358: CALL_OW 69
37362: NOT
37363: PUSH
37364: LD_INT 22
37366: PUSH
37367: LD_VAR 0 16
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 2
37378: PUSH
37379: LD_INT 30
37381: PUSH
37382: LD_INT 32
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 30
37391: PUSH
37392: LD_INT 33
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 91
37406: PUSH
37407: LD_VAR 0 1
37411: PUSH
37412: LD_INT 12
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: LIST
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: LIST
37424: PUSH
37425: EMPTY
37426: LIST
37427: PPUSH
37428: CALL_OW 69
37432: PUSH
37433: LD_INT 2
37435: GREATER
37436: AND
37437: IFFALSE 37460
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37439: LD_ADDR_VAR 0 18
37443: PUSH
37444: LD_INT 11
37446: PUSH
37447: LD_INT 30
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_VAR 0 12
37458: ARRAY
37459: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37460: LD_VAR 0 18
37464: NOT
37465: PUSH
37466: LD_INT 40
37468: PPUSH
37469: LD_VAR 0 16
37473: PPUSH
37474: CALL_OW 321
37478: PUSH
37479: LD_INT 2
37481: EQUAL
37482: AND
37483: PUSH
37484: LD_INT 7
37486: PUSH
37487: LD_VAR 0 5
37491: IN
37492: PUSH
37493: LD_INT 28
37495: PUSH
37496: LD_VAR 0 5
37500: IN
37501: OR
37502: PUSH
37503: LD_INT 45
37505: PUSH
37506: LD_VAR 0 5
37510: IN
37511: OR
37512: AND
37513: IFFALSE 37767
// begin hex := GetHexInfo ( x , y ) ;
37515: LD_ADDR_VAR 0 4
37519: PUSH
37520: LD_VAR 0 10
37524: PPUSH
37525: LD_VAR 0 11
37529: PPUSH
37530: CALL_OW 546
37534: ST_TO_ADDR
// if hex [ 1 ] then
37535: LD_VAR 0 4
37539: PUSH
37540: LD_INT 1
37542: ARRAY
37543: IFFALSE 37547
// exit ;
37545: GO 37950
// height := hex [ 2 ] ;
37547: LD_ADDR_VAR 0 15
37551: PUSH
37552: LD_VAR 0 4
37556: PUSH
37557: LD_INT 2
37559: ARRAY
37560: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37561: LD_ADDR_VAR 0 14
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: LD_INT 2
37571: PUSH
37572: LD_INT 3
37574: PUSH
37575: LD_INT 5
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: ST_TO_ADDR
// for i in tmp do
37584: LD_ADDR_VAR 0 8
37588: PUSH
37589: LD_VAR 0 14
37593: PUSH
37594: FOR_IN
37595: IFFALSE 37765
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37597: LD_ADDR_VAR 0 9
37601: PUSH
37602: LD_VAR 0 10
37606: PPUSH
37607: LD_VAR 0 8
37611: PPUSH
37612: LD_INT 5
37614: PPUSH
37615: CALL_OW 272
37619: PUSH
37620: LD_VAR 0 11
37624: PPUSH
37625: LD_VAR 0 8
37629: PPUSH
37630: LD_INT 5
37632: PPUSH
37633: CALL_OW 273
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37642: LD_VAR 0 9
37646: PUSH
37647: LD_INT 1
37649: ARRAY
37650: PPUSH
37651: LD_VAR 0 9
37655: PUSH
37656: LD_INT 2
37658: ARRAY
37659: PPUSH
37660: CALL_OW 488
37664: IFFALSE 37763
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37666: LD_ADDR_VAR 0 4
37670: PUSH
37671: LD_VAR 0 9
37675: PUSH
37676: LD_INT 1
37678: ARRAY
37679: PPUSH
37680: LD_VAR 0 9
37684: PUSH
37685: LD_INT 2
37687: ARRAY
37688: PPUSH
37689: CALL_OW 546
37693: ST_TO_ADDR
// if hex [ 1 ] then
37694: LD_VAR 0 4
37698: PUSH
37699: LD_INT 1
37701: ARRAY
37702: IFFALSE 37706
// continue ;
37704: GO 37594
// h := hex [ 2 ] ;
37706: LD_ADDR_VAR 0 13
37710: PUSH
37711: LD_VAR 0 4
37715: PUSH
37716: LD_INT 2
37718: ARRAY
37719: ST_TO_ADDR
// if h + 7 < height then
37720: LD_VAR 0 13
37724: PUSH
37725: LD_INT 7
37727: PLUS
37728: PUSH
37729: LD_VAR 0 15
37733: LESS
37734: IFFALSE 37763
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37736: LD_ADDR_VAR 0 18
37740: PUSH
37741: LD_INT 7
37743: PUSH
37744: LD_INT 28
37746: PUSH
37747: LD_INT 45
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: LIST
37754: PUSH
37755: LD_VAR 0 12
37759: ARRAY
37760: ST_TO_ADDR
// break ;
37761: GO 37765
// end ; end ; end ;
37763: GO 37594
37765: POP
37766: POP
// end ; if not weapon then
37767: LD_VAR 0 18
37771: NOT
37772: IFFALSE 37832
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37774: LD_ADDR_VAR 0 5
37778: PUSH
37779: LD_VAR 0 5
37783: PUSH
37784: LD_INT 11
37786: PUSH
37787: LD_INT 30
37789: PUSH
37790: LD_INT 49
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: LIST
37797: DIFF
37798: ST_TO_ADDR
// if not list then
37799: LD_VAR 0 5
37803: NOT
37804: IFFALSE 37808
// exit ;
37806: GO 37950
// weapon := list [ rand ( 1 , list ) ] ;
37808: LD_ADDR_VAR 0 18
37812: PUSH
37813: LD_VAR 0 5
37817: PUSH
37818: LD_INT 1
37820: PPUSH
37821: LD_VAR 0 5
37825: PPUSH
37826: CALL_OW 12
37830: ARRAY
37831: ST_TO_ADDR
// end ; if weapon then
37832: LD_VAR 0 18
37836: IFFALSE 37950
// begin tmp := CostOfWeapon ( weapon ) ;
37838: LD_ADDR_VAR 0 14
37842: PUSH
37843: LD_VAR 0 18
37847: PPUSH
37848: CALL_OW 451
37852: ST_TO_ADDR
// j := GetBase ( tower ) ;
37853: LD_ADDR_VAR 0 9
37857: PUSH
37858: LD_VAR 0 1
37862: PPUSH
37863: CALL_OW 274
37867: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37868: LD_VAR 0 9
37872: PPUSH
37873: LD_INT 1
37875: PPUSH
37876: CALL_OW 275
37880: PUSH
37881: LD_VAR 0 14
37885: PUSH
37886: LD_INT 1
37888: ARRAY
37889: GREATEREQUAL
37890: PUSH
37891: LD_VAR 0 9
37895: PPUSH
37896: LD_INT 2
37898: PPUSH
37899: CALL_OW 275
37903: PUSH
37904: LD_VAR 0 14
37908: PUSH
37909: LD_INT 2
37911: ARRAY
37912: GREATEREQUAL
37913: AND
37914: PUSH
37915: LD_VAR 0 9
37919: PPUSH
37920: LD_INT 3
37922: PPUSH
37923: CALL_OW 275
37927: PUSH
37928: LD_VAR 0 14
37932: PUSH
37933: LD_INT 3
37935: ARRAY
37936: GREATEREQUAL
37937: AND
37938: IFFALSE 37950
// result := weapon ;
37940: LD_ADDR_VAR 0 3
37944: PUSH
37945: LD_VAR 0 18
37949: ST_TO_ADDR
// end ; end ;
37950: LD_VAR 0 3
37954: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37955: LD_INT 0
37957: PPUSH
37958: PPUSH
// result := true ;
37959: LD_ADDR_VAR 0 3
37963: PUSH
37964: LD_INT 1
37966: ST_TO_ADDR
// if array1 = array2 then
37967: LD_VAR 0 1
37971: PUSH
37972: LD_VAR 0 2
37976: EQUAL
37977: IFFALSE 38037
// begin for i = 1 to array1 do
37979: LD_ADDR_VAR 0 4
37983: PUSH
37984: DOUBLE
37985: LD_INT 1
37987: DEC
37988: ST_TO_ADDR
37989: LD_VAR 0 1
37993: PUSH
37994: FOR_TO
37995: IFFALSE 38033
// if array1 [ i ] <> array2 [ i ] then
37997: LD_VAR 0 1
38001: PUSH
38002: LD_VAR 0 4
38006: ARRAY
38007: PUSH
38008: LD_VAR 0 2
38012: PUSH
38013: LD_VAR 0 4
38017: ARRAY
38018: NONEQUAL
38019: IFFALSE 38031
// begin result := false ;
38021: LD_ADDR_VAR 0 3
38025: PUSH
38026: LD_INT 0
38028: ST_TO_ADDR
// break ;
38029: GO 38033
// end ;
38031: GO 37994
38033: POP
38034: POP
// end else
38035: GO 38045
// result := false ;
38037: LD_ADDR_VAR 0 3
38041: PUSH
38042: LD_INT 0
38044: ST_TO_ADDR
// end ;
38045: LD_VAR 0 3
38049: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38050: LD_INT 0
38052: PPUSH
38053: PPUSH
38054: PPUSH
// pom := GetBase ( fac ) ;
38055: LD_ADDR_VAR 0 5
38059: PUSH
38060: LD_VAR 0 1
38064: PPUSH
38065: CALL_OW 274
38069: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38070: LD_ADDR_VAR 0 4
38074: PUSH
38075: LD_VAR 0 2
38079: PUSH
38080: LD_INT 1
38082: ARRAY
38083: PPUSH
38084: LD_VAR 0 2
38088: PUSH
38089: LD_INT 2
38091: ARRAY
38092: PPUSH
38093: LD_VAR 0 2
38097: PUSH
38098: LD_INT 3
38100: ARRAY
38101: PPUSH
38102: LD_VAR 0 2
38106: PUSH
38107: LD_INT 4
38109: ARRAY
38110: PPUSH
38111: CALL_OW 449
38115: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38116: LD_ADDR_VAR 0 3
38120: PUSH
38121: LD_VAR 0 5
38125: PPUSH
38126: LD_INT 1
38128: PPUSH
38129: CALL_OW 275
38133: PUSH
38134: LD_VAR 0 4
38138: PUSH
38139: LD_INT 1
38141: ARRAY
38142: GREATEREQUAL
38143: PUSH
38144: LD_VAR 0 5
38148: PPUSH
38149: LD_INT 2
38151: PPUSH
38152: CALL_OW 275
38156: PUSH
38157: LD_VAR 0 4
38161: PUSH
38162: LD_INT 2
38164: ARRAY
38165: GREATEREQUAL
38166: AND
38167: PUSH
38168: LD_VAR 0 5
38172: PPUSH
38173: LD_INT 3
38175: PPUSH
38176: CALL_OW 275
38180: PUSH
38181: LD_VAR 0 4
38185: PUSH
38186: LD_INT 3
38188: ARRAY
38189: GREATEREQUAL
38190: AND
38191: ST_TO_ADDR
// end ;
38192: LD_VAR 0 3
38196: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38197: LD_INT 0
38199: PPUSH
38200: PPUSH
38201: PPUSH
38202: PPUSH
// pom := GetBase ( building ) ;
38203: LD_ADDR_VAR 0 3
38207: PUSH
38208: LD_VAR 0 1
38212: PPUSH
38213: CALL_OW 274
38217: ST_TO_ADDR
// if not pom then
38218: LD_VAR 0 3
38222: NOT
38223: IFFALSE 38227
// exit ;
38225: GO 38397
// btype := GetBType ( building ) ;
38227: LD_ADDR_VAR 0 5
38231: PUSH
38232: LD_VAR 0 1
38236: PPUSH
38237: CALL_OW 266
38241: ST_TO_ADDR
// if btype = b_armoury then
38242: LD_VAR 0 5
38246: PUSH
38247: LD_INT 4
38249: EQUAL
38250: IFFALSE 38260
// btype := b_barracks ;
38252: LD_ADDR_VAR 0 5
38256: PUSH
38257: LD_INT 5
38259: ST_TO_ADDR
// if btype = b_depot then
38260: LD_VAR 0 5
38264: PUSH
38265: LD_INT 0
38267: EQUAL
38268: IFFALSE 38278
// btype := b_warehouse ;
38270: LD_ADDR_VAR 0 5
38274: PUSH
38275: LD_INT 1
38277: ST_TO_ADDR
// if btype = b_workshop then
38278: LD_VAR 0 5
38282: PUSH
38283: LD_INT 2
38285: EQUAL
38286: IFFALSE 38296
// btype := b_factory ;
38288: LD_ADDR_VAR 0 5
38292: PUSH
38293: LD_INT 3
38295: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38296: LD_ADDR_VAR 0 4
38300: PUSH
38301: LD_VAR 0 5
38305: PPUSH
38306: LD_VAR 0 1
38310: PPUSH
38311: CALL_OW 248
38315: PPUSH
38316: CALL_OW 450
38320: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38321: LD_ADDR_VAR 0 2
38325: PUSH
38326: LD_VAR 0 3
38330: PPUSH
38331: LD_INT 1
38333: PPUSH
38334: CALL_OW 275
38338: PUSH
38339: LD_VAR 0 4
38343: PUSH
38344: LD_INT 1
38346: ARRAY
38347: GREATEREQUAL
38348: PUSH
38349: LD_VAR 0 3
38353: PPUSH
38354: LD_INT 2
38356: PPUSH
38357: CALL_OW 275
38361: PUSH
38362: LD_VAR 0 4
38366: PUSH
38367: LD_INT 2
38369: ARRAY
38370: GREATEREQUAL
38371: AND
38372: PUSH
38373: LD_VAR 0 3
38377: PPUSH
38378: LD_INT 3
38380: PPUSH
38381: CALL_OW 275
38385: PUSH
38386: LD_VAR 0 4
38390: PUSH
38391: LD_INT 3
38393: ARRAY
38394: GREATEREQUAL
38395: AND
38396: ST_TO_ADDR
// end ;
38397: LD_VAR 0 2
38401: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38402: LD_INT 0
38404: PPUSH
38405: PPUSH
38406: PPUSH
// pom := GetBase ( building ) ;
38407: LD_ADDR_VAR 0 4
38411: PUSH
38412: LD_VAR 0 1
38416: PPUSH
38417: CALL_OW 274
38421: ST_TO_ADDR
// if not pom then
38422: LD_VAR 0 4
38426: NOT
38427: IFFALSE 38431
// exit ;
38429: GO 38532
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38431: LD_ADDR_VAR 0 5
38435: PUSH
38436: LD_VAR 0 2
38440: PPUSH
38441: LD_VAR 0 1
38445: PPUSH
38446: CALL_OW 248
38450: PPUSH
38451: CALL_OW 450
38455: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38456: LD_ADDR_VAR 0 3
38460: PUSH
38461: LD_VAR 0 4
38465: PPUSH
38466: LD_INT 1
38468: PPUSH
38469: CALL_OW 275
38473: PUSH
38474: LD_VAR 0 5
38478: PUSH
38479: LD_INT 1
38481: ARRAY
38482: GREATEREQUAL
38483: PUSH
38484: LD_VAR 0 4
38488: PPUSH
38489: LD_INT 2
38491: PPUSH
38492: CALL_OW 275
38496: PUSH
38497: LD_VAR 0 5
38501: PUSH
38502: LD_INT 2
38504: ARRAY
38505: GREATEREQUAL
38506: AND
38507: PUSH
38508: LD_VAR 0 4
38512: PPUSH
38513: LD_INT 3
38515: PPUSH
38516: CALL_OW 275
38520: PUSH
38521: LD_VAR 0 5
38525: PUSH
38526: LD_INT 3
38528: ARRAY
38529: GREATEREQUAL
38530: AND
38531: ST_TO_ADDR
// end ;
38532: LD_VAR 0 3
38536: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
38537: LD_INT 0
38539: PPUSH
38540: PPUSH
38541: PPUSH
38542: PPUSH
38543: PPUSH
38544: PPUSH
38545: PPUSH
38546: PPUSH
38547: PPUSH
38548: PPUSH
// result := false ;
38549: LD_ADDR_VAR 0 6
38553: PUSH
38554: LD_INT 0
38556: ST_TO_ADDR
// if not base or not btype or not x or not y then
38557: LD_VAR 0 1
38561: NOT
38562: PUSH
38563: LD_VAR 0 2
38567: NOT
38568: OR
38569: PUSH
38570: LD_VAR 0 3
38574: NOT
38575: OR
38576: PUSH
38577: LD_VAR 0 4
38581: NOT
38582: OR
38583: IFFALSE 38587
// exit ;
38585: GO 39196
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
38587: LD_ADDR_VAR 0 12
38591: PUSH
38592: LD_VAR 0 2
38596: PPUSH
38597: LD_VAR 0 3
38601: PPUSH
38602: LD_VAR 0 4
38606: PPUSH
38607: LD_VAR 0 5
38611: PPUSH
38612: LD_VAR 0 1
38616: PUSH
38617: LD_INT 1
38619: ARRAY
38620: PPUSH
38621: CALL_OW 248
38625: PPUSH
38626: LD_INT 0
38628: PPUSH
38629: CALL 40033 0 6
38633: ST_TO_ADDR
// if not hexes then
38634: LD_VAR 0 12
38638: NOT
38639: IFFALSE 38643
// exit ;
38641: GO 39196
// for i = 1 to hexes do
38643: LD_ADDR_VAR 0 7
38647: PUSH
38648: DOUBLE
38649: LD_INT 1
38651: DEC
38652: ST_TO_ADDR
38653: LD_VAR 0 12
38657: PUSH
38658: FOR_TO
38659: IFFALSE 39194
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38661: LD_ADDR_VAR 0 11
38665: PUSH
38666: LD_VAR 0 12
38670: PUSH
38671: LD_VAR 0 7
38675: ARRAY
38676: PUSH
38677: LD_INT 1
38679: ARRAY
38680: PPUSH
38681: LD_VAR 0 12
38685: PUSH
38686: LD_VAR 0 7
38690: ARRAY
38691: PUSH
38692: LD_INT 2
38694: ARRAY
38695: PPUSH
38696: CALL_OW 428
38700: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38701: LD_VAR 0 12
38705: PUSH
38706: LD_VAR 0 7
38710: ARRAY
38711: PUSH
38712: LD_INT 1
38714: ARRAY
38715: PPUSH
38716: LD_VAR 0 12
38720: PUSH
38721: LD_VAR 0 7
38725: ARRAY
38726: PUSH
38727: LD_INT 2
38729: ARRAY
38730: PPUSH
38731: CALL_OW 351
38735: PUSH
38736: LD_VAR 0 12
38740: PUSH
38741: LD_VAR 0 7
38745: ARRAY
38746: PUSH
38747: LD_INT 1
38749: ARRAY
38750: PPUSH
38751: LD_VAR 0 12
38755: PUSH
38756: LD_VAR 0 7
38760: ARRAY
38761: PUSH
38762: LD_INT 2
38764: ARRAY
38765: PPUSH
38766: CALL_OW 488
38770: NOT
38771: OR
38772: PUSH
38773: LD_VAR 0 11
38777: PPUSH
38778: CALL_OW 247
38782: PUSH
38783: LD_INT 3
38785: EQUAL
38786: OR
38787: IFFALSE 38793
// exit ;
38789: POP
38790: POP
38791: GO 39196
// if not tmp or not tmp in base then
38793: LD_VAR 0 11
38797: NOT
38798: PUSH
38799: LD_VAR 0 11
38803: PUSH
38804: LD_VAR 0 1
38808: IN
38809: NOT
38810: OR
38811: IFFALSE 38815
// continue ;
38813: GO 38658
// result := true ;
38815: LD_ADDR_VAR 0 6
38819: PUSH
38820: LD_INT 1
38822: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38823: LD_ADDR_VAR 0 15
38827: PUSH
38828: LD_VAR 0 1
38832: PPUSH
38833: LD_INT 22
38835: PUSH
38836: LD_VAR 0 11
38840: PPUSH
38841: CALL_OW 255
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: LD_INT 30
38855: PUSH
38856: LD_INT 0
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 30
38865: PUSH
38866: LD_INT 1
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: LIST
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PPUSH
38882: CALL_OW 72
38886: ST_TO_ADDR
// if dep then
38887: LD_VAR 0 15
38891: IFFALSE 39027
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38893: LD_ADDR_VAR 0 14
38897: PUSH
38898: LD_VAR 0 15
38902: PUSH
38903: LD_INT 1
38905: ARRAY
38906: PPUSH
38907: CALL_OW 250
38911: PPUSH
38912: LD_VAR 0 15
38916: PUSH
38917: LD_INT 1
38919: ARRAY
38920: PPUSH
38921: CALL_OW 254
38925: PPUSH
38926: LD_INT 5
38928: PPUSH
38929: CALL_OW 272
38933: PUSH
38934: LD_VAR 0 15
38938: PUSH
38939: LD_INT 1
38941: ARRAY
38942: PPUSH
38943: CALL_OW 251
38947: PPUSH
38948: LD_VAR 0 15
38952: PUSH
38953: LD_INT 1
38955: ARRAY
38956: PPUSH
38957: CALL_OW 254
38961: PPUSH
38962: LD_INT 5
38964: PPUSH
38965: CALL_OW 273
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38974: LD_VAR 0 14
38978: PUSH
38979: LD_INT 1
38981: ARRAY
38982: PPUSH
38983: LD_VAR 0 14
38987: PUSH
38988: LD_INT 2
38990: ARRAY
38991: PPUSH
38992: CALL_OW 488
38996: IFFALSE 39027
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38998: LD_VAR 0 11
39002: PPUSH
39003: LD_VAR 0 14
39007: PUSH
39008: LD_INT 1
39010: ARRAY
39011: PPUSH
39012: LD_VAR 0 14
39016: PUSH
39017: LD_INT 2
39019: ARRAY
39020: PPUSH
39021: CALL_OW 111
// continue ;
39025: GO 38658
// end ; end ; r := GetDir ( tmp ) ;
39027: LD_ADDR_VAR 0 13
39031: PUSH
39032: LD_VAR 0 11
39036: PPUSH
39037: CALL_OW 254
39041: ST_TO_ADDR
// if r = 5 then
39042: LD_VAR 0 13
39046: PUSH
39047: LD_INT 5
39049: EQUAL
39050: IFFALSE 39060
// r := 0 ;
39052: LD_ADDR_VAR 0 13
39056: PUSH
39057: LD_INT 0
39059: ST_TO_ADDR
// for j = r to 5 do
39060: LD_ADDR_VAR 0 8
39064: PUSH
39065: DOUBLE
39066: LD_VAR 0 13
39070: DEC
39071: ST_TO_ADDR
39072: LD_INT 5
39074: PUSH
39075: FOR_TO
39076: IFFALSE 39190
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39078: LD_ADDR_VAR 0 9
39082: PUSH
39083: LD_VAR 0 11
39087: PPUSH
39088: CALL_OW 250
39092: PPUSH
39093: LD_VAR 0 8
39097: PPUSH
39098: LD_INT 2
39100: PPUSH
39101: CALL_OW 272
39105: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39106: LD_ADDR_VAR 0 10
39110: PUSH
39111: LD_VAR 0 11
39115: PPUSH
39116: CALL_OW 251
39120: PPUSH
39121: LD_VAR 0 8
39125: PPUSH
39126: LD_INT 2
39128: PPUSH
39129: CALL_OW 273
39133: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39134: LD_VAR 0 9
39138: PPUSH
39139: LD_VAR 0 10
39143: PPUSH
39144: CALL_OW 488
39148: PUSH
39149: LD_VAR 0 9
39153: PPUSH
39154: LD_VAR 0 10
39158: PPUSH
39159: CALL_OW 428
39163: NOT
39164: AND
39165: IFFALSE 39188
// begin ComMoveXY ( tmp , _x , _y ) ;
39167: LD_VAR 0 11
39171: PPUSH
39172: LD_VAR 0 9
39176: PPUSH
39177: LD_VAR 0 10
39181: PPUSH
39182: CALL_OW 111
// break ;
39186: GO 39190
// end ; end ;
39188: GO 39075
39190: POP
39191: POP
// end ;
39192: GO 38658
39194: POP
39195: POP
// end ;
39196: LD_VAR 0 6
39200: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
39201: LD_INT 0
39203: PPUSH
39204: PPUSH
39205: PPUSH
39206: PPUSH
39207: PPUSH
39208: PPUSH
39209: PPUSH
39210: PPUSH
39211: PPUSH
39212: PPUSH
// result := false ;
39213: LD_ADDR_VAR 0 6
39217: PUSH
39218: LD_INT 0
39220: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39221: LD_VAR 0 1
39225: NOT
39226: PUSH
39227: LD_VAR 0 1
39231: PPUSH
39232: CALL_OW 266
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: IN
39247: NOT
39248: OR
39249: PUSH
39250: LD_VAR 0 2
39254: NOT
39255: OR
39256: PUSH
39257: LD_VAR 0 5
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: LD_INT 2
39270: PUSH
39271: LD_INT 3
39273: PUSH
39274: LD_INT 4
39276: PUSH
39277: LD_INT 5
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: IN
39288: NOT
39289: OR
39290: PUSH
39291: LD_VAR 0 3
39295: PPUSH
39296: LD_VAR 0 4
39300: PPUSH
39301: CALL_OW 488
39305: NOT
39306: OR
39307: IFFALSE 39311
// exit ;
39309: GO 40028
// pom := GetBase ( depot ) ;
39311: LD_ADDR_VAR 0 10
39315: PUSH
39316: LD_VAR 0 1
39320: PPUSH
39321: CALL_OW 274
39325: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39326: LD_ADDR_VAR 0 11
39330: PUSH
39331: LD_VAR 0 2
39335: PPUSH
39336: LD_VAR 0 1
39340: PPUSH
39341: CALL_OW 248
39345: PPUSH
39346: CALL_OW 450
39350: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39351: LD_VAR 0 10
39355: PPUSH
39356: LD_INT 1
39358: PPUSH
39359: CALL_OW 275
39363: PUSH
39364: LD_VAR 0 11
39368: PUSH
39369: LD_INT 1
39371: ARRAY
39372: GREATEREQUAL
39373: PUSH
39374: LD_VAR 0 10
39378: PPUSH
39379: LD_INT 2
39381: PPUSH
39382: CALL_OW 275
39386: PUSH
39387: LD_VAR 0 11
39391: PUSH
39392: LD_INT 2
39394: ARRAY
39395: GREATEREQUAL
39396: AND
39397: PUSH
39398: LD_VAR 0 10
39402: PPUSH
39403: LD_INT 3
39405: PPUSH
39406: CALL_OW 275
39410: PUSH
39411: LD_VAR 0 11
39415: PUSH
39416: LD_INT 3
39418: ARRAY
39419: GREATEREQUAL
39420: AND
39421: NOT
39422: IFFALSE 39426
// exit ;
39424: GO 40028
// if GetBType ( depot ) = b_depot then
39426: LD_VAR 0 1
39430: PPUSH
39431: CALL_OW 266
39435: PUSH
39436: LD_INT 0
39438: EQUAL
39439: IFFALSE 39451
// dist := 28 else
39441: LD_ADDR_VAR 0 14
39445: PUSH
39446: LD_INT 28
39448: ST_TO_ADDR
39449: GO 39459
// dist := 36 ;
39451: LD_ADDR_VAR 0 14
39455: PUSH
39456: LD_INT 36
39458: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39459: LD_VAR 0 1
39463: PPUSH
39464: LD_VAR 0 3
39468: PPUSH
39469: LD_VAR 0 4
39473: PPUSH
39474: CALL_OW 297
39478: PUSH
39479: LD_VAR 0 14
39483: GREATER
39484: IFFALSE 39488
// exit ;
39486: GO 40028
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39488: LD_ADDR_VAR 0 12
39492: PUSH
39493: LD_VAR 0 2
39497: PPUSH
39498: LD_VAR 0 3
39502: PPUSH
39503: LD_VAR 0 4
39507: PPUSH
39508: LD_VAR 0 5
39512: PPUSH
39513: LD_VAR 0 1
39517: PPUSH
39518: CALL_OW 248
39522: PPUSH
39523: LD_INT 0
39525: PPUSH
39526: CALL 40033 0 6
39530: ST_TO_ADDR
// if not hexes then
39531: LD_VAR 0 12
39535: NOT
39536: IFFALSE 39540
// exit ;
39538: GO 40028
// hex := GetHexInfo ( x , y ) ;
39540: LD_ADDR_VAR 0 15
39544: PUSH
39545: LD_VAR 0 3
39549: PPUSH
39550: LD_VAR 0 4
39554: PPUSH
39555: CALL_OW 546
39559: ST_TO_ADDR
// if hex [ 1 ] then
39560: LD_VAR 0 15
39564: PUSH
39565: LD_INT 1
39567: ARRAY
39568: IFFALSE 39572
// exit ;
39570: GO 40028
// height := hex [ 2 ] ;
39572: LD_ADDR_VAR 0 13
39576: PUSH
39577: LD_VAR 0 15
39581: PUSH
39582: LD_INT 2
39584: ARRAY
39585: ST_TO_ADDR
// for i = 1 to hexes do
39586: LD_ADDR_VAR 0 7
39590: PUSH
39591: DOUBLE
39592: LD_INT 1
39594: DEC
39595: ST_TO_ADDR
39596: LD_VAR 0 12
39600: PUSH
39601: FOR_TO
39602: IFFALSE 39932
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39604: LD_VAR 0 12
39608: PUSH
39609: LD_VAR 0 7
39613: ARRAY
39614: PUSH
39615: LD_INT 1
39617: ARRAY
39618: PPUSH
39619: LD_VAR 0 12
39623: PUSH
39624: LD_VAR 0 7
39628: ARRAY
39629: PUSH
39630: LD_INT 2
39632: ARRAY
39633: PPUSH
39634: CALL_OW 488
39638: NOT
39639: PUSH
39640: LD_VAR 0 12
39644: PUSH
39645: LD_VAR 0 7
39649: ARRAY
39650: PUSH
39651: LD_INT 1
39653: ARRAY
39654: PPUSH
39655: LD_VAR 0 12
39659: PUSH
39660: LD_VAR 0 7
39664: ARRAY
39665: PUSH
39666: LD_INT 2
39668: ARRAY
39669: PPUSH
39670: CALL_OW 428
39674: PUSH
39675: LD_INT 0
39677: GREATER
39678: OR
39679: PUSH
39680: LD_VAR 0 12
39684: PUSH
39685: LD_VAR 0 7
39689: ARRAY
39690: PUSH
39691: LD_INT 1
39693: ARRAY
39694: PPUSH
39695: LD_VAR 0 12
39699: PUSH
39700: LD_VAR 0 7
39704: ARRAY
39705: PUSH
39706: LD_INT 2
39708: ARRAY
39709: PPUSH
39710: CALL_OW 351
39714: OR
39715: IFFALSE 39721
// exit ;
39717: POP
39718: POP
39719: GO 40028
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39721: LD_ADDR_VAR 0 8
39725: PUSH
39726: LD_VAR 0 12
39730: PUSH
39731: LD_VAR 0 7
39735: ARRAY
39736: PUSH
39737: LD_INT 1
39739: ARRAY
39740: PPUSH
39741: LD_VAR 0 12
39745: PUSH
39746: LD_VAR 0 7
39750: ARRAY
39751: PUSH
39752: LD_INT 2
39754: ARRAY
39755: PPUSH
39756: CALL_OW 546
39760: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39761: LD_VAR 0 8
39765: PUSH
39766: LD_INT 1
39768: ARRAY
39769: PUSH
39770: LD_VAR 0 8
39774: PUSH
39775: LD_INT 2
39777: ARRAY
39778: PUSH
39779: LD_VAR 0 13
39783: PUSH
39784: LD_INT 2
39786: PLUS
39787: GREATER
39788: OR
39789: PUSH
39790: LD_VAR 0 8
39794: PUSH
39795: LD_INT 2
39797: ARRAY
39798: PUSH
39799: LD_VAR 0 13
39803: PUSH
39804: LD_INT 2
39806: MINUS
39807: LESS
39808: OR
39809: PUSH
39810: LD_VAR 0 8
39814: PUSH
39815: LD_INT 3
39817: ARRAY
39818: PUSH
39819: LD_INT 0
39821: PUSH
39822: LD_INT 8
39824: PUSH
39825: LD_INT 9
39827: PUSH
39828: LD_INT 10
39830: PUSH
39831: LD_INT 11
39833: PUSH
39834: LD_INT 12
39836: PUSH
39837: LD_INT 13
39839: PUSH
39840: LD_INT 16
39842: PUSH
39843: LD_INT 17
39845: PUSH
39846: LD_INT 18
39848: PUSH
39849: LD_INT 19
39851: PUSH
39852: LD_INT 20
39854: PUSH
39855: LD_INT 21
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: IN
39873: NOT
39874: OR
39875: PUSH
39876: LD_VAR 0 8
39880: PUSH
39881: LD_INT 5
39883: ARRAY
39884: NOT
39885: OR
39886: PUSH
39887: LD_VAR 0 8
39891: PUSH
39892: LD_INT 6
39894: ARRAY
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: LD_INT 2
39901: PUSH
39902: LD_INT 7
39904: PUSH
39905: LD_INT 9
39907: PUSH
39908: LD_INT 10
39910: PUSH
39911: LD_INT 11
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: IN
39922: NOT
39923: OR
39924: IFFALSE 39930
// exit ;
39926: POP
39927: POP
39928: GO 40028
// end ;
39930: GO 39601
39932: POP
39933: POP
// side := GetSide ( depot ) ;
39934: LD_ADDR_VAR 0 9
39938: PUSH
39939: LD_VAR 0 1
39943: PPUSH
39944: CALL_OW 255
39948: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39949: LD_VAR 0 9
39953: PPUSH
39954: LD_VAR 0 3
39958: PPUSH
39959: LD_VAR 0 4
39963: PPUSH
39964: LD_INT 20
39966: PPUSH
39967: CALL 32682 0 4
39971: PUSH
39972: LD_INT 4
39974: ARRAY
39975: IFFALSE 39979
// exit ;
39977: GO 40028
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39979: LD_VAR 0 2
39983: PUSH
39984: LD_INT 29
39986: PUSH
39987: LD_INT 30
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: IN
39994: PUSH
39995: LD_VAR 0 3
39999: PPUSH
40000: LD_VAR 0 4
40004: PPUSH
40005: LD_VAR 0 9
40009: PPUSH
40010: CALL_OW 440
40014: NOT
40015: AND
40016: IFFALSE 40020
// exit ;
40018: GO 40028
// result := true ;
40020: LD_ADDR_VAR 0 6
40024: PUSH
40025: LD_INT 1
40027: ST_TO_ADDR
// end ;
40028: LD_VAR 0 6
40032: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40033: LD_INT 0
40035: PPUSH
40036: PPUSH
40037: PPUSH
40038: PPUSH
40039: PPUSH
40040: PPUSH
40041: PPUSH
40042: PPUSH
40043: PPUSH
40044: PPUSH
40045: PPUSH
40046: PPUSH
40047: PPUSH
40048: PPUSH
40049: PPUSH
40050: PPUSH
40051: PPUSH
40052: PPUSH
40053: PPUSH
40054: PPUSH
40055: PPUSH
40056: PPUSH
40057: PPUSH
40058: PPUSH
40059: PPUSH
40060: PPUSH
40061: PPUSH
40062: PPUSH
40063: PPUSH
40064: PPUSH
40065: PPUSH
40066: PPUSH
40067: PPUSH
40068: PPUSH
40069: PPUSH
40070: PPUSH
40071: PPUSH
40072: PPUSH
40073: PPUSH
40074: PPUSH
40075: PPUSH
40076: PPUSH
40077: PPUSH
40078: PPUSH
40079: PPUSH
40080: PPUSH
40081: PPUSH
40082: PPUSH
40083: PPUSH
40084: PPUSH
40085: PPUSH
40086: PPUSH
40087: PPUSH
40088: PPUSH
40089: PPUSH
40090: PPUSH
40091: PPUSH
40092: PPUSH
// result = [ ] ;
40093: LD_ADDR_VAR 0 7
40097: PUSH
40098: EMPTY
40099: ST_TO_ADDR
// temp_list = [ ] ;
40100: LD_ADDR_VAR 0 9
40104: PUSH
40105: EMPTY
40106: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40107: LD_VAR 0 4
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: LD_INT 2
40120: PUSH
40121: LD_INT 3
40123: PUSH
40124: LD_INT 4
40126: PUSH
40127: LD_INT 5
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: IN
40138: NOT
40139: PUSH
40140: LD_VAR 0 1
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: LD_INT 1
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: IN
40155: PUSH
40156: LD_VAR 0 5
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: LD_INT 3
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: LIST
40174: IN
40175: NOT
40176: AND
40177: OR
40178: IFFALSE 40182
// exit ;
40180: GO 58573
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40182: LD_VAR 0 1
40186: PUSH
40187: LD_INT 6
40189: PUSH
40190: LD_INT 7
40192: PUSH
40193: LD_INT 8
40195: PUSH
40196: LD_INT 13
40198: PUSH
40199: LD_INT 12
40201: PUSH
40202: LD_INT 15
40204: PUSH
40205: LD_INT 11
40207: PUSH
40208: LD_INT 14
40210: PUSH
40211: LD_INT 10
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: IN
40225: IFFALSE 40235
// btype = b_lab ;
40227: LD_ADDR_VAR 0 1
40231: PUSH
40232: LD_INT 6
40234: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40235: LD_VAR 0 6
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 2
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: LIST
40253: IN
40254: NOT
40255: PUSH
40256: LD_VAR 0 1
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: LD_INT 2
40269: PUSH
40270: LD_INT 3
40272: PUSH
40273: LD_INT 6
40275: PUSH
40276: LD_INT 36
40278: PUSH
40279: LD_INT 4
40281: PUSH
40282: LD_INT 5
40284: PUSH
40285: LD_INT 31
40287: PUSH
40288: LD_INT 32
40290: PUSH
40291: LD_INT 33
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: IN
40307: NOT
40308: PUSH
40309: LD_VAR 0 6
40313: PUSH
40314: LD_INT 1
40316: EQUAL
40317: AND
40318: OR
40319: PUSH
40320: LD_VAR 0 1
40324: PUSH
40325: LD_INT 2
40327: PUSH
40328: LD_INT 3
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: IN
40335: NOT
40336: PUSH
40337: LD_VAR 0 6
40341: PUSH
40342: LD_INT 2
40344: EQUAL
40345: AND
40346: OR
40347: IFFALSE 40357
// mode = 0 ;
40349: LD_ADDR_VAR 0 6
40353: PUSH
40354: LD_INT 0
40356: ST_TO_ADDR
// case mode of 0 :
40357: LD_VAR 0 6
40361: PUSH
40362: LD_INT 0
40364: DOUBLE
40365: EQUAL
40366: IFTRUE 40370
40368: GO 51823
40370: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40371: LD_ADDR_VAR 0 11
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 2
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: LD_INT 1
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: LD_INT 2
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: LD_INT 2
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 3
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: LD_INT 3
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: LD_INT 2
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40564: LD_ADDR_VAR 0 12
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 1
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 2
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 2
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 2
40687: NEG
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 2
40698: NEG
40699: PUSH
40700: LD_INT 1
40702: NEG
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 2
40710: NEG
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 3
40721: NEG
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 3
40732: NEG
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40760: LD_ADDR_VAR 0 13
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: LD_INT 2
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 2
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 2
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: LD_INT 2
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 2
40907: NEG
40908: PUSH
40909: LD_INT 3
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 3
40919: NEG
40920: PUSH
40921: LD_INT 2
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 3
40931: NEG
40932: PUSH
40933: LD_INT 3
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40959: LD_ADDR_VAR 0 14
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: LD_INT 0
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 0
40976: PUSH
40977: LD_INT 1
40979: NEG
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 1
41028: NEG
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 1
41040: NEG
41041: PUSH
41042: LD_INT 2
41044: NEG
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: LD_INT 2
41055: NEG
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 2
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: LD_INT 3
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: LD_INT 3
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: LD_INT 2
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41155: LD_ADDR_VAR 0 15
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 2
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 2
41278: NEG
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 2
41289: NEG
41290: PUSH
41291: LD_INT 1
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 2
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 3
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 3
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41348: LD_ADDR_VAR 0 16
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: NEG
41430: PUSH
41431: LD_INT 2
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: LD_INT 2
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: LD_INT 2
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 2
41471: NEG
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 2
41483: NEG
41484: PUSH
41485: LD_INT 2
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 3
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 3
41505: PUSH
41506: LD_INT 3
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: LD_INT 3
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41541: LD_ADDR_VAR 0 17
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 1
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 0
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: NEG
41623: PUSH
41624: LD_INT 2
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: LD_INT 2
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 2
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 2
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: LD_INT 2
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 2
41717: NEG
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 2
41728: NEG
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41771: LD_ADDR_VAR 0 18
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: NEG
41853: PUSH
41854: LD_INT 2
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 2
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 2
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 2
41947: NEG
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 2
41970: NEG
41971: PUSH
41972: LD_INT 2
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42001: LD_ADDR_VAR 0 19
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: LD_INT 1
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 2
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: LD_INT 2
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 2
42177: NEG
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 2
42200: NEG
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42231: LD_ADDR_VAR 0 20
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: LD_INT 1
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: NEG
42313: PUSH
42314: LD_INT 2
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: LD_INT 2
42327: NEG
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: LD_INT 1
42338: NEG
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 2
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 2
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 2
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: LD_INT 2
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 2
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 2
42407: NEG
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 2
42430: NEG
42431: PUSH
42432: LD_INT 2
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42461: LD_ADDR_VAR 0 21
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: NEG
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: LD_INT 2
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 2
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 2
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 2
42637: NEG
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 2
42648: NEG
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 2
42660: NEG
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42691: LD_ADDR_VAR 0 22
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: LD_INT 1
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: LD_INT 2
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: LD_INT 2
42787: NEG
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 2
42826: PUSH
42827: LD_INT 2
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: LD_INT 2
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: LD_INT 2
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: NEG
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 2
42867: NEG
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 2
42890: NEG
42891: PUSH
42892: LD_INT 2
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42921: LD_ADDR_VAR 0 23
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: NEG
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: LD_INT 2
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 2
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: LD_INT 1
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 2
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 2
43108: NEG
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: LD_INT 2
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: LD_INT 3
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: LD_INT 3
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 2
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43201: LD_ADDR_VAR 0 24
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 2
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 2
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 2
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: LD_INT 2
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: LD_INT 2
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 3
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 3
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43477: LD_ADDR_VAR 0 25
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: NEG
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: LD_INT 2
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 1
43581: PUSH
43582: LD_INT 1
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 2
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: NEG
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 3
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 3
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: LD_INT 3
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: LD_INT 3
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43751: LD_ADDR_VAR 0 26
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: LD_INT 2
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 2
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 2
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 2
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: LD_INT 2
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: LD_INT 2
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 2
43927: NEG
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: LD_INT 2
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: LD_INT 3
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: LD_INT 3
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: LD_INT 2
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44027: LD_ADDR_VAR 0 27
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: LD_INT 2
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: LD_INT 2
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 3
44260: NEG
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 3
44272: NEG
44273: PUSH
44274: LD_INT 2
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44307: LD_ADDR_VAR 0 28
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 2
44392: NEG
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: LD_INT 2
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 2
44494: NEG
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: LD_INT 3
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: LD_INT 3
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 3
44542: NEG
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 3
44554: NEG
44555: PUSH
44556: LD_INT 2
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44589: LD_ADDR_VAR 0 29
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: LD_INT 2
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 2
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: LD_INT 3
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 2
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 3
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: LD_INT 3
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 3
44833: NEG
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44868: LD_ADDR_VAR 0 30
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: LD_INT 2
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: LD_INT 3
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 3
45080: PUSH
45081: LD_INT 2
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: LD_INT 3
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: NEG
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 3
45111: NEG
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45146: LD_ADDR_VAR 0 31
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 2
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 2
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 2
45323: NEG
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: LD_INT 3
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 3
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 3
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 2
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 3
45389: NEG
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45424: LD_ADDR_VAR 0 32
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 1
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 2
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 2
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 2
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 3
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 3
45636: PUSH
45637: LD_INT 2
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: LD_INT 3
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 2
45656: NEG
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 3
45667: NEG
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45702: LD_ADDR_VAR 0 33
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: LD_INT 2
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 2
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: NEG
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: NEG
45893: PUSH
45894: LD_INT 3
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 3
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: LD_INT 3
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: LD_INT 2
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 3
45946: NEG
45947: PUSH
45948: LD_INT 2
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45981: LD_ADDR_VAR 0 34
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: LD_INT 2
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: NEG
46138: PUSH
46139: LD_INT 0
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 3
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 3
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: LD_INT 3
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: NEG
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 3
46226: NEG
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46261: LD_ADDR_VAR 0 35
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46373: LD_ADDR_VAR 0 36
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: LD_INT 2
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46485: LD_ADDR_VAR 0 37
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46597: LD_ADDR_VAR 0 38
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: NEG
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46709: LD_ADDR_VAR 0 39
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 2
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46821: LD_ADDR_VAR 0 40
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46933: LD_ADDR_VAR 0 41
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 2
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: NEG
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: LD_INT 3
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 3
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 3
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 3
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 3
47176: PUSH
47177: LD_INT 3
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: LD_INT 3
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 2
47196: NEG
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 3
47207: NEG
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 3
47218: NEG
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 3
47230: NEG
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 3
47242: NEG
47243: PUSH
47244: LD_INT 3
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47283: LD_ADDR_VAR 0 42
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: LD_INT 2
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 2
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: LD_INT 2
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: LD_INT 3
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: LD_INT 3
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 3
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 3
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 3
47529: PUSH
47530: LD_INT 3
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: PUSH
47540: LD_INT 3
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: LD_INT 3
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: LD_INT 3
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 3
47580: NEG
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 3
47592: NEG
47593: PUSH
47594: LD_INT 3
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47633: LD_ADDR_VAR 0 43
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 2
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 2
47799: NEG
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 3
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 3
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 3
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 3
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 3
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 3
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 2
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: NEG
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 3
47929: NEG
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 3
47940: NEG
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47981: LD_ADDR_VAR 0 44
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: NEG
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: NEG
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: LD_INT 3
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 3
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 3
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 3
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 3
48224: PUSH
48225: LD_INT 3
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: LD_INT 3
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 2
48244: NEG
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 3
48255: NEG
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 3
48266: NEG
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 3
48278: NEG
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 3
48290: NEG
48291: PUSH
48292: LD_INT 3
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48331: LD_ADDR_VAR 0 45
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: LD_INT 3
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 3
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 3
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 3
48567: PUSH
48568: LD_INT 2
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 3
48577: PUSH
48578: LD_INT 3
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: LD_INT 3
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: LD_INT 3
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 3
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 3
48628: NEG
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 3
48640: NEG
48641: PUSH
48642: LD_INT 3
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48681: LD_ADDR_VAR 0 46
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: NEG
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: LD_INT 3
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 3
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: LD_INT 2
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 3
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 3
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: LD_INT 3
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 3
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 3
48977: NEG
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 3
48988: NEG
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49029: LD_ADDR_VAR 0 47
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: LD_INT 2
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: LD_INT 2
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49180: LD_ADDR_VAR 0 48
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: LD_INT 2
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 2
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49327: LD_ADDR_VAR 0 49
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 2
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49471: LD_ADDR_VAR 0 50
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: LD_INT 2
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49615: LD_ADDR_VAR 0 51
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 2
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49762: LD_ADDR_VAR 0 52
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 2
49877: NEG
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: LD_INT 2
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49913: LD_ADDR_VAR 0 53
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 2
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: LD_INT 2
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: LD_INT 2
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: NEG
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: LD_INT 2
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50143: LD_ADDR_VAR 0 54
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: LD_INT 2
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: LD_INT 2
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 2
50330: NEG
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: LD_INT 2
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50373: LD_ADDR_VAR 0 55
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 2
50508: PUSH
50509: LD_INT 2
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: LD_INT 2
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 2
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: NEG
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50603: LD_ADDR_VAR 0 56
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 2
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: LD_INT 2
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: LD_INT 2
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50833: LD_ADDR_VAR 0 57
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: LD_INT 2
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 2
51009: NEG
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51063: LD_ADDR_VAR 0 58
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: LD_INT 2
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 2
51250: NEG
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51293: LD_ADDR_VAR 0 59
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51381: LD_ADDR_VAR 0 60
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51469: LD_ADDR_VAR 0 61
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51557: LD_ADDR_VAR 0 62
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51645: LD_ADDR_VAR 0 63
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51733: LD_ADDR_VAR 0 64
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: ST_TO_ADDR
// end ; 1 :
51821: GO 57718
51823: LD_INT 1
51825: DOUBLE
51826: EQUAL
51827: IFTRUE 51831
51829: GO 54454
51831: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51832: LD_ADDR_VAR 0 11
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: LD_INT 3
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 3
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: LIST
51875: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51876: LD_ADDR_VAR 0 12
51880: PUSH
51881: LD_INT 2
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 3
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: LIST
51916: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51917: LD_ADDR_VAR 0 13
51921: PUSH
51922: LD_INT 3
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 3
51934: PUSH
51935: LD_INT 3
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: LD_INT 3
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51957: LD_ADDR_VAR 0 14
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: LD_INT 3
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: LD_INT 3
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: LIST
51997: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51998: LD_ADDR_VAR 0 15
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 3
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 3
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52042: LD_ADDR_VAR 0 16
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: LD_INT 3
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 3
52061: NEG
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 3
52073: NEG
52074: PUSH
52075: LD_INT 3
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: LIST
52087: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52088: LD_ADDR_VAR 0 17
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: LD_INT 3
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: LD_INT 3
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 2
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: LIST
52131: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52132: LD_ADDR_VAR 0 18
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 3
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 3
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: LIST
52172: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52173: LD_ADDR_VAR 0 19
52177: PUSH
52178: LD_INT 3
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: LD_INT 3
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: LD_INT 3
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: LIST
52212: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52213: LD_ADDR_VAR 0 20
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: LD_INT 3
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 3
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: LIST
52253: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52254: LD_ADDR_VAR 0 21
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 3
52272: NEG
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 3
52283: NEG
52284: PUSH
52285: LD_INT 1
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: LIST
52297: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52298: LD_ADDR_VAR 0 22
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: LD_INT 3
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 3
52317: NEG
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 3
52329: NEG
52330: PUSH
52331: LD_INT 3
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: LIST
52343: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52344: LD_ADDR_VAR 0 23
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 3
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: LD_INT 4
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: LD_INT 3
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52388: LD_ADDR_VAR 0 24
52392: PUSH
52393: LD_INT 3
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 3
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 4
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: LIST
52428: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52429: LD_ADDR_VAR 0 25
52433: PUSH
52434: LD_INT 3
52436: PUSH
52437: LD_INT 3
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 4
52446: PUSH
52447: LD_INT 3
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 3
52456: PUSH
52457: LD_INT 4
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: LIST
52468: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52469: LD_ADDR_VAR 0 26
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: LD_INT 3
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: LD_INT 4
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: LD_INT 3
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: LIST
52509: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52510: LD_ADDR_VAR 0 27
52514: PUSH
52515: LD_INT 3
52517: NEG
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 3
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 4
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: LIST
52553: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52554: LD_ADDR_VAR 0 28
52558: PUSH
52559: LD_INT 3
52561: NEG
52562: PUSH
52563: LD_INT 3
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 3
52573: NEG
52574: PUSH
52575: LD_INT 4
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 4
52585: NEG
52586: PUSH
52587: LD_INT 3
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: LIST
52599: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52600: LD_ADDR_VAR 0 29
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 3
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 3
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 2
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 4
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 4
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: LD_INT 3
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: LD_INT 5
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: LD_INT 5
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 4
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: LD_INT 6
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 6
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: LD_INT 5
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52755: LD_ADDR_VAR 0 30
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 3
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 3
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 3
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 4
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 4
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 4
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 5
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 5
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 5
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 6
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 6
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52898: LD_ADDR_VAR 0 31
52902: PUSH
52903: LD_INT 3
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 3
52915: PUSH
52916: LD_INT 3
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: LD_INT 3
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 4
52935: PUSH
52936: LD_INT 3
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 4
52945: PUSH
52946: LD_INT 4
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 3
52955: PUSH
52956: LD_INT 4
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 5
52965: PUSH
52966: LD_INT 4
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 5
52975: PUSH
52976: LD_INT 5
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 4
52985: PUSH
52986: LD_INT 5
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 6
52995: PUSH
52996: LD_INT 5
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 6
53005: PUSH
53006: LD_INT 6
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 5
53015: PUSH
53016: LD_INT 6
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53037: LD_ADDR_VAR 0 32
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 3
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: LD_INT 4
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: LD_INT 4
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: LD_INT 3
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: LD_INT 5
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 5
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: LD_INT 4
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 6
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: LD_INT 6
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 5
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53180: LD_ADDR_VAR 0 33
53184: PUSH
53185: LD_INT 2
53187: NEG
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 3
53198: NEG
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 3
53209: NEG
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 3
53221: NEG
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 4
53232: NEG
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 4
53243: NEG
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 4
53255: NEG
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 5
53266: NEG
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 5
53277: NEG
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 5
53289: NEG
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 6
53300: NEG
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 6
53311: NEG
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53335: LD_ADDR_VAR 0 34
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: LD_INT 3
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 3
53354: NEG
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 3
53366: NEG
53367: PUSH
53368: LD_INT 3
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 3
53378: NEG
53379: PUSH
53380: LD_INT 4
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 4
53390: NEG
53391: PUSH
53392: LD_INT 3
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 4
53402: NEG
53403: PUSH
53404: LD_INT 4
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 4
53414: NEG
53415: PUSH
53416: LD_INT 5
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 5
53426: NEG
53427: PUSH
53428: LD_INT 4
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 5
53438: NEG
53439: PUSH
53440: LD_INT 5
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 5
53450: NEG
53451: PUSH
53452: LD_INT 6
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 6
53462: NEG
53463: PUSH
53464: LD_INT 5
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 6
53474: NEG
53475: PUSH
53476: LD_INT 6
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53498: LD_ADDR_VAR 0 41
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 3
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: LIST
53541: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53542: LD_ADDR_VAR 0 42
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 2
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 3
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: LIST
53582: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53583: LD_ADDR_VAR 0 43
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 3
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 2
53610: PUSH
53611: LD_INT 3
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: LIST
53622: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53623: LD_ADDR_VAR 0 44
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 3
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 2
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: LIST
53663: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53664: LD_ADDR_VAR 0 45
53668: PUSH
53669: LD_INT 2
53671: NEG
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: NEG
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 3
53693: NEG
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: LIST
53707: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53708: LD_ADDR_VAR 0 46
53712: PUSH
53713: LD_INT 2
53715: NEG
53716: PUSH
53717: LD_INT 2
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: LD_INT 3
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 3
53739: NEG
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: LIST
53753: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53754: LD_ADDR_VAR 0 47
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: LD_INT 3
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: LD_INT 3
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53787: LD_ADDR_VAR 0 48
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 2
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53818: LD_ADDR_VAR 0 49
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 3
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53847: LD_ADDR_VAR 0 50
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: LD_INT 3
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: LD_INT 3
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53876: LD_ADDR_VAR 0 51
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53907: LD_ADDR_VAR 0 52
53911: PUSH
53912: LD_INT 3
53914: NEG
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 3
53926: NEG
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53940: LD_ADDR_VAR 0 53
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: LD_INT 3
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 0
53959: PUSH
53960: LD_INT 3
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: LD_INT 2
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: LIST
53983: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53984: LD_ADDR_VAR 0 54
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 3
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 3
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: LIST
54024: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54025: LD_ADDR_VAR 0 55
54029: PUSH
54030: LD_INT 3
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 3
54042: PUSH
54043: LD_INT 3
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: LD_INT 3
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: LIST
54064: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54065: LD_ADDR_VAR 0 56
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 3
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 3
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: LIST
54105: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54106: LD_ADDR_VAR 0 57
54110: PUSH
54111: LD_INT 2
54113: NEG
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 3
54124: NEG
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 3
54135: NEG
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54150: LD_ADDR_VAR 0 58
54154: PUSH
54155: LD_INT 2
54157: NEG
54158: PUSH
54159: LD_INT 3
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 3
54169: NEG
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 3
54181: NEG
54182: PUSH
54183: LD_INT 3
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: LIST
54195: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54196: LD_ADDR_VAR 0 59
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 2
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: LIST
54239: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54240: LD_ADDR_VAR 0 60
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: LIST
54280: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54281: LD_ADDR_VAR 0 61
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: LIST
54320: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54321: LD_ADDR_VAR 0 62
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: LIST
54361: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54362: LD_ADDR_VAR 0 63
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: LIST
54405: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54406: LD_ADDR_VAR 0 64
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: NEG
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: LIST
54451: ST_TO_ADDR
// end ; 2 :
54452: GO 57718
54454: LD_INT 2
54456: DOUBLE
54457: EQUAL
54458: IFTRUE 54462
54460: GO 57717
54462: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54463: LD_ADDR_VAR 0 29
54467: PUSH
54468: LD_INT 4
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 4
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 5
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 5
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 4
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 3
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 3
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 3
54542: PUSH
54543: LD_INT 2
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 5
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 3
54563: PUSH
54564: LD_INT 3
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 3
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 4
54583: PUSH
54584: LD_INT 3
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 4
54593: PUSH
54594: LD_INT 4
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 3
54603: PUSH
54604: LD_INT 4
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 2
54613: PUSH
54614: LD_INT 3
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 4
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: LD_INT 4
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 4
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 3
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: LD_INT 4
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: LD_INT 5
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 5
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: LD_INT 4
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: LD_INT 3
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 5
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: NEG
54736: PUSH
54737: LD_INT 3
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 3
54757: NEG
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: NEG
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 3
54791: NEG
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 4
54802: NEG
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 4
54813: NEG
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 4
54825: NEG
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 4
54848: NEG
54849: PUSH
54850: LD_INT 4
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 4
54860: NEG
54861: PUSH
54862: LD_INT 5
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 3
54872: NEG
54873: PUSH
54874: LD_INT 4
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 3
54884: NEG
54885: PUSH
54886: LD_INT 3
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 4
54896: NEG
54897: PUSH
54898: LD_INT 3
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 5
54908: NEG
54909: PUSH
54910: LD_INT 4
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 5
54920: NEG
54921: PUSH
54922: LD_INT 5
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 3
54932: NEG
54933: PUSH
54934: LD_INT 5
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 5
54944: NEG
54945: PUSH
54946: LD_INT 3
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55001: LD_ADDR_VAR 0 30
55005: PUSH
55006: LD_INT 4
55008: PUSH
55009: LD_INT 4
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 4
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 5
55028: PUSH
55029: LD_INT 4
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 5
55038: PUSH
55039: LD_INT 5
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 4
55048: PUSH
55049: LD_INT 5
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 3
55058: PUSH
55059: LD_INT 4
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 3
55068: PUSH
55069: LD_INT 3
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 5
55078: PUSH
55079: LD_INT 3
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 3
55088: PUSH
55089: LD_INT 5
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: LD_INT 3
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: LD_INT 3
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: LD_INT 4
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 4
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: LD_INT 3
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: LD_INT 4
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 2
55180: NEG
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 4
55191: NEG
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 4
55202: NEG
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 3
55214: NEG
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 3
55225: NEG
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 4
55236: NEG
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 5
55247: NEG
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 5
55258: NEG
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 5
55270: NEG
55271: PUSH
55272: LD_INT 2
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 3
55282: NEG
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 3
55293: NEG
55294: PUSH
55295: LD_INT 3
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 3
55305: NEG
55306: PUSH
55307: LD_INT 4
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: LD_INT 3
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 3
55341: NEG
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 4
55353: NEG
55354: PUSH
55355: LD_INT 3
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 4
55365: NEG
55366: PUSH
55367: LD_INT 4
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: LD_INT 4
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 4
55389: NEG
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 4
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 5
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 4
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 3
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 3
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: LD_INT 4
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: LD_INT 5
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: LD_INT 3
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 5
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55548: LD_ADDR_VAR 0 31
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: LD_INT 4
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 3
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 4
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: LD_INT 5
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 5
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: LD_INT 4
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: LD_INT 3
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: LD_INT 5
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 3
55648: NEG
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 3
55659: NEG
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: NEG
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: NEG
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 3
55693: NEG
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 4
55704: NEG
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 4
55715: NEG
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 4
55727: NEG
55728: PUSH
55729: LD_INT 2
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: NEG
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 4
55750: NEG
55751: PUSH
55752: LD_INT 4
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 4
55762: NEG
55763: PUSH
55764: LD_INT 5
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 3
55774: NEG
55775: PUSH
55776: LD_INT 4
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 3
55786: NEG
55787: PUSH
55788: LD_INT 3
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 4
55798: NEG
55799: PUSH
55800: LD_INT 3
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 5
55810: NEG
55811: PUSH
55812: LD_INT 4
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 5
55822: NEG
55823: PUSH
55824: LD_INT 5
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 3
55834: NEG
55835: PUSH
55836: LD_INT 5
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 5
55846: NEG
55847: PUSH
55848: LD_INT 3
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 3
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 4
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: LD_INT 3
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: LD_INT 3
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 4
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: NEG
55949: PUSH
55950: LD_INT 4
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 4
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 4
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 5
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 5
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 4
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 3
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 3
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 3
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 5
56043: PUSH
56044: LD_INT 2
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56098: LD_ADDR_VAR 0 32
56102: PUSH
56103: LD_INT 4
56105: NEG
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 4
56116: NEG
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 3
56128: NEG
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 3
56139: NEG
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 4
56150: NEG
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 5
56161: NEG
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 5
56172: NEG
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 5
56184: NEG
56185: PUSH
56186: LD_INT 2
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 3
56196: NEG
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 3
56207: NEG
56208: PUSH
56209: LD_INT 3
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 3
56219: NEG
56220: PUSH
56221: LD_INT 4
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 2
56231: NEG
56232: PUSH
56233: LD_INT 3
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: NEG
56244: PUSH
56245: LD_INT 2
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 3
56255: NEG
56256: PUSH
56257: LD_INT 2
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 4
56267: NEG
56268: PUSH
56269: LD_INT 3
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 4
56279: NEG
56280: PUSH
56281: LD_INT 4
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: LD_INT 4
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 4
56303: NEG
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 4
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 5
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 4
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: LD_INT 3
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: LD_INT 3
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: LD_INT 4
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: LD_INT 5
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: LD_INT 3
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: LD_INT 5
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 3
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 3
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 4
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 4
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 3
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 2
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: LD_INT 2
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 4
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 4
56510: PUSH
56511: LD_INT 4
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 4
56520: PUSH
56521: LD_INT 3
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 5
56530: PUSH
56531: LD_INT 4
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 5
56540: PUSH
56541: LD_INT 5
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 4
56550: PUSH
56551: LD_INT 5
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 3
56560: PUSH
56561: LD_INT 4
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 3
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 5
56580: PUSH
56581: LD_INT 3
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 3
56590: PUSH
56591: LD_INT 5
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56645: LD_ADDR_VAR 0 33
56649: PUSH
56650: LD_INT 4
56652: NEG
56653: PUSH
56654: LD_INT 4
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 4
56664: NEG
56665: PUSH
56666: LD_INT 5
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 3
56676: NEG
56677: PUSH
56678: LD_INT 4
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 3
56688: NEG
56689: PUSH
56690: LD_INT 3
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 4
56700: NEG
56701: PUSH
56702: LD_INT 3
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 5
56712: NEG
56713: PUSH
56714: LD_INT 4
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 5
56724: NEG
56725: PUSH
56726: LD_INT 5
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 3
56736: NEG
56737: PUSH
56738: LD_INT 5
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 5
56748: NEG
56749: PUSH
56750: LD_INT 3
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 3
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: LD_INT 4
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: LD_INT 3
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: LD_INT 2
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: LD_INT 3
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: LD_INT 4
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 2
56850: NEG
56851: PUSH
56852: LD_INT 4
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 4
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 4
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 5
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 5
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 4
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 3
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 3
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 3
56934: PUSH
56935: LD_INT 2
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 5
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: LD_INT 3
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: PUSH
56966: LD_INT 2
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 4
56975: PUSH
56976: LD_INT 3
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 4
56985: PUSH
56986: LD_INT 4
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 3
56995: PUSH
56996: LD_INT 4
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 2
57005: PUSH
57006: LD_INT 3
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: LD_INT 2
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 4
57025: PUSH
57026: LD_INT 2
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 2
57035: PUSH
57036: LD_INT 4
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 4
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: LD_INT 4
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: LD_INT 5
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 5
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: LD_INT 4
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: LD_INT 3
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: LD_INT 5
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: LD_INT 3
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57183: LD_ADDR_VAR 0 34
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: LD_INT 4
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: LD_INT 5
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 4
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: LD_INT 3
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 3
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: LD_INT 4
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: LD_INT 5
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 2
57269: PUSH
57270: LD_INT 3
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: LD_INT 5
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 3
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 3
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 4
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 4
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 3
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: PUSH
57365: LD_INT 2
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 4
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 4
57385: PUSH
57386: LD_INT 4
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 4
57395: PUSH
57396: LD_INT 3
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 5
57405: PUSH
57406: LD_INT 4
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 5
57415: PUSH
57416: LD_INT 5
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 4
57425: PUSH
57426: LD_INT 5
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 3
57435: PUSH
57436: LD_INT 4
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 3
57445: PUSH
57446: LD_INT 3
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 5
57455: PUSH
57456: LD_INT 3
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 3
57465: PUSH
57466: LD_INT 5
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 2
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: LD_INT 3
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: LD_INT 4
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 4
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: LD_INT 3
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: LD_INT 4
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 4
57568: NEG
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 4
57579: NEG
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 3
57591: NEG
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 3
57602: NEG
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 4
57613: NEG
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 5
57624: NEG
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 5
57635: NEG
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 5
57647: NEG
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 3
57659: NEG
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: ST_TO_ADDR
// end ; end ;
57715: GO 57718
57717: POP
// case btype of b_depot , b_warehouse :
57718: LD_VAR 0 1
57722: PUSH
57723: LD_INT 0
57725: DOUBLE
57726: EQUAL
57727: IFTRUE 57737
57729: LD_INT 1
57731: DOUBLE
57732: EQUAL
57733: IFTRUE 57737
57735: GO 57938
57737: POP
// case nation of nation_american :
57738: LD_VAR 0 5
57742: PUSH
57743: LD_INT 1
57745: DOUBLE
57746: EQUAL
57747: IFTRUE 57751
57749: GO 57807
57751: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57752: LD_ADDR_VAR 0 9
57756: PUSH
57757: LD_VAR 0 11
57761: PUSH
57762: LD_VAR 0 12
57766: PUSH
57767: LD_VAR 0 13
57771: PUSH
57772: LD_VAR 0 14
57776: PUSH
57777: LD_VAR 0 15
57781: PUSH
57782: LD_VAR 0 16
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: PUSH
57795: LD_VAR 0 4
57799: PUSH
57800: LD_INT 1
57802: PLUS
57803: ARRAY
57804: ST_TO_ADDR
57805: GO 57936
57807: LD_INT 2
57809: DOUBLE
57810: EQUAL
57811: IFTRUE 57815
57813: GO 57871
57815: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57816: LD_ADDR_VAR 0 9
57820: PUSH
57821: LD_VAR 0 17
57825: PUSH
57826: LD_VAR 0 18
57830: PUSH
57831: LD_VAR 0 19
57835: PUSH
57836: LD_VAR 0 20
57840: PUSH
57841: LD_VAR 0 21
57845: PUSH
57846: LD_VAR 0 22
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: PUSH
57859: LD_VAR 0 4
57863: PUSH
57864: LD_INT 1
57866: PLUS
57867: ARRAY
57868: ST_TO_ADDR
57869: GO 57936
57871: LD_INT 3
57873: DOUBLE
57874: EQUAL
57875: IFTRUE 57879
57877: GO 57935
57879: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57880: LD_ADDR_VAR 0 9
57884: PUSH
57885: LD_VAR 0 23
57889: PUSH
57890: LD_VAR 0 24
57894: PUSH
57895: LD_VAR 0 25
57899: PUSH
57900: LD_VAR 0 26
57904: PUSH
57905: LD_VAR 0 27
57909: PUSH
57910: LD_VAR 0 28
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: PUSH
57923: LD_VAR 0 4
57927: PUSH
57928: LD_INT 1
57930: PLUS
57931: ARRAY
57932: ST_TO_ADDR
57933: GO 57936
57935: POP
57936: GO 58491
57938: LD_INT 2
57940: DOUBLE
57941: EQUAL
57942: IFTRUE 57952
57944: LD_INT 3
57946: DOUBLE
57947: EQUAL
57948: IFTRUE 57952
57950: GO 58008
57952: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57953: LD_ADDR_VAR 0 9
57957: PUSH
57958: LD_VAR 0 29
57962: PUSH
57963: LD_VAR 0 30
57967: PUSH
57968: LD_VAR 0 31
57972: PUSH
57973: LD_VAR 0 32
57977: PUSH
57978: LD_VAR 0 33
57982: PUSH
57983: LD_VAR 0 34
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: PUSH
57996: LD_VAR 0 4
58000: PUSH
58001: LD_INT 1
58003: PLUS
58004: ARRAY
58005: ST_TO_ADDR
58006: GO 58491
58008: LD_INT 16
58010: DOUBLE
58011: EQUAL
58012: IFTRUE 58070
58014: LD_INT 17
58016: DOUBLE
58017: EQUAL
58018: IFTRUE 58070
58020: LD_INT 18
58022: DOUBLE
58023: EQUAL
58024: IFTRUE 58070
58026: LD_INT 19
58028: DOUBLE
58029: EQUAL
58030: IFTRUE 58070
58032: LD_INT 22
58034: DOUBLE
58035: EQUAL
58036: IFTRUE 58070
58038: LD_INT 20
58040: DOUBLE
58041: EQUAL
58042: IFTRUE 58070
58044: LD_INT 21
58046: DOUBLE
58047: EQUAL
58048: IFTRUE 58070
58050: LD_INT 23
58052: DOUBLE
58053: EQUAL
58054: IFTRUE 58070
58056: LD_INT 24
58058: DOUBLE
58059: EQUAL
58060: IFTRUE 58070
58062: LD_INT 25
58064: DOUBLE
58065: EQUAL
58066: IFTRUE 58070
58068: GO 58126
58070: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58071: LD_ADDR_VAR 0 9
58075: PUSH
58076: LD_VAR 0 35
58080: PUSH
58081: LD_VAR 0 36
58085: PUSH
58086: LD_VAR 0 37
58090: PUSH
58091: LD_VAR 0 38
58095: PUSH
58096: LD_VAR 0 39
58100: PUSH
58101: LD_VAR 0 40
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: PUSH
58114: LD_VAR 0 4
58118: PUSH
58119: LD_INT 1
58121: PLUS
58122: ARRAY
58123: ST_TO_ADDR
58124: GO 58491
58126: LD_INT 6
58128: DOUBLE
58129: EQUAL
58130: IFTRUE 58182
58132: LD_INT 7
58134: DOUBLE
58135: EQUAL
58136: IFTRUE 58182
58138: LD_INT 8
58140: DOUBLE
58141: EQUAL
58142: IFTRUE 58182
58144: LD_INT 13
58146: DOUBLE
58147: EQUAL
58148: IFTRUE 58182
58150: LD_INT 12
58152: DOUBLE
58153: EQUAL
58154: IFTRUE 58182
58156: LD_INT 15
58158: DOUBLE
58159: EQUAL
58160: IFTRUE 58182
58162: LD_INT 11
58164: DOUBLE
58165: EQUAL
58166: IFTRUE 58182
58168: LD_INT 14
58170: DOUBLE
58171: EQUAL
58172: IFTRUE 58182
58174: LD_INT 10
58176: DOUBLE
58177: EQUAL
58178: IFTRUE 58182
58180: GO 58238
58182: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58183: LD_ADDR_VAR 0 9
58187: PUSH
58188: LD_VAR 0 41
58192: PUSH
58193: LD_VAR 0 42
58197: PUSH
58198: LD_VAR 0 43
58202: PUSH
58203: LD_VAR 0 44
58207: PUSH
58208: LD_VAR 0 45
58212: PUSH
58213: LD_VAR 0 46
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: PUSH
58226: LD_VAR 0 4
58230: PUSH
58231: LD_INT 1
58233: PLUS
58234: ARRAY
58235: ST_TO_ADDR
58236: GO 58491
58238: LD_INT 36
58240: DOUBLE
58241: EQUAL
58242: IFTRUE 58246
58244: GO 58302
58246: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58247: LD_ADDR_VAR 0 9
58251: PUSH
58252: LD_VAR 0 47
58256: PUSH
58257: LD_VAR 0 48
58261: PUSH
58262: LD_VAR 0 49
58266: PUSH
58267: LD_VAR 0 50
58271: PUSH
58272: LD_VAR 0 51
58276: PUSH
58277: LD_VAR 0 52
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: PUSH
58290: LD_VAR 0 4
58294: PUSH
58295: LD_INT 1
58297: PLUS
58298: ARRAY
58299: ST_TO_ADDR
58300: GO 58491
58302: LD_INT 4
58304: DOUBLE
58305: EQUAL
58306: IFTRUE 58328
58308: LD_INT 5
58310: DOUBLE
58311: EQUAL
58312: IFTRUE 58328
58314: LD_INT 34
58316: DOUBLE
58317: EQUAL
58318: IFTRUE 58328
58320: LD_INT 37
58322: DOUBLE
58323: EQUAL
58324: IFTRUE 58328
58326: GO 58384
58328: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58329: LD_ADDR_VAR 0 9
58333: PUSH
58334: LD_VAR 0 53
58338: PUSH
58339: LD_VAR 0 54
58343: PUSH
58344: LD_VAR 0 55
58348: PUSH
58349: LD_VAR 0 56
58353: PUSH
58354: LD_VAR 0 57
58358: PUSH
58359: LD_VAR 0 58
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: PUSH
58372: LD_VAR 0 4
58376: PUSH
58377: LD_INT 1
58379: PLUS
58380: ARRAY
58381: ST_TO_ADDR
58382: GO 58491
58384: LD_INT 31
58386: DOUBLE
58387: EQUAL
58388: IFTRUE 58434
58390: LD_INT 32
58392: DOUBLE
58393: EQUAL
58394: IFTRUE 58434
58396: LD_INT 33
58398: DOUBLE
58399: EQUAL
58400: IFTRUE 58434
58402: LD_INT 27
58404: DOUBLE
58405: EQUAL
58406: IFTRUE 58434
58408: LD_INT 26
58410: DOUBLE
58411: EQUAL
58412: IFTRUE 58434
58414: LD_INT 28
58416: DOUBLE
58417: EQUAL
58418: IFTRUE 58434
58420: LD_INT 29
58422: DOUBLE
58423: EQUAL
58424: IFTRUE 58434
58426: LD_INT 30
58428: DOUBLE
58429: EQUAL
58430: IFTRUE 58434
58432: GO 58490
58434: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58435: LD_ADDR_VAR 0 9
58439: PUSH
58440: LD_VAR 0 59
58444: PUSH
58445: LD_VAR 0 60
58449: PUSH
58450: LD_VAR 0 61
58454: PUSH
58455: LD_VAR 0 62
58459: PUSH
58460: LD_VAR 0 63
58464: PUSH
58465: LD_VAR 0 64
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: PUSH
58478: LD_VAR 0 4
58482: PUSH
58483: LD_INT 1
58485: PLUS
58486: ARRAY
58487: ST_TO_ADDR
58488: GO 58491
58490: POP
// temp_list2 = [ ] ;
58491: LD_ADDR_VAR 0 10
58495: PUSH
58496: EMPTY
58497: ST_TO_ADDR
// for i in temp_list do
58498: LD_ADDR_VAR 0 8
58502: PUSH
58503: LD_VAR 0 9
58507: PUSH
58508: FOR_IN
58509: IFFALSE 58561
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58511: LD_ADDR_VAR 0 10
58515: PUSH
58516: LD_VAR 0 10
58520: PUSH
58521: LD_VAR 0 8
58525: PUSH
58526: LD_INT 1
58528: ARRAY
58529: PUSH
58530: LD_VAR 0 2
58534: PLUS
58535: PUSH
58536: LD_VAR 0 8
58540: PUSH
58541: LD_INT 2
58543: ARRAY
58544: PUSH
58545: LD_VAR 0 3
58549: PLUS
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: EMPTY
58556: LIST
58557: ADD
58558: ST_TO_ADDR
58559: GO 58508
58561: POP
58562: POP
// result = temp_list2 ;
58563: LD_ADDR_VAR 0 7
58567: PUSH
58568: LD_VAR 0 10
58572: ST_TO_ADDR
// end ;
58573: LD_VAR 0 7
58577: RET
// export function EnemyInRange ( unit , dist ) ; begin
58578: LD_INT 0
58580: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58581: LD_ADDR_VAR 0 3
58585: PUSH
58586: LD_VAR 0 1
58590: PPUSH
58591: CALL_OW 255
58595: PPUSH
58596: LD_VAR 0 1
58600: PPUSH
58601: CALL_OW 250
58605: PPUSH
58606: LD_VAR 0 1
58610: PPUSH
58611: CALL_OW 251
58615: PPUSH
58616: LD_VAR 0 2
58620: PPUSH
58621: CALL 32682 0 4
58625: PUSH
58626: LD_INT 4
58628: ARRAY
58629: ST_TO_ADDR
// end ;
58630: LD_VAR 0 3
58634: RET
// export function PlayerSeeMe ( unit ) ; begin
58635: LD_INT 0
58637: PPUSH
// result := See ( your_side , unit ) ;
58638: LD_ADDR_VAR 0 2
58642: PUSH
58643: LD_OWVAR 2
58647: PPUSH
58648: LD_VAR 0 1
58652: PPUSH
58653: CALL_OW 292
58657: ST_TO_ADDR
// end ;
58658: LD_VAR 0 2
58662: RET
// export function ReverseDir ( unit ) ; begin
58663: LD_INT 0
58665: PPUSH
// if not unit then
58666: LD_VAR 0 1
58670: NOT
58671: IFFALSE 58675
// exit ;
58673: GO 58698
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58675: LD_ADDR_VAR 0 2
58679: PUSH
58680: LD_VAR 0 1
58684: PPUSH
58685: CALL_OW 254
58689: PUSH
58690: LD_INT 3
58692: PLUS
58693: PUSH
58694: LD_INT 6
58696: MOD
58697: ST_TO_ADDR
// end ;
58698: LD_VAR 0 2
58702: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58703: LD_INT 0
58705: PPUSH
58706: PPUSH
58707: PPUSH
58708: PPUSH
58709: PPUSH
// if not hexes then
58710: LD_VAR 0 2
58714: NOT
58715: IFFALSE 58719
// exit ;
58717: GO 58867
// dist := 9999 ;
58719: LD_ADDR_VAR 0 5
58723: PUSH
58724: LD_INT 9999
58726: ST_TO_ADDR
// for i = 1 to hexes do
58727: LD_ADDR_VAR 0 4
58731: PUSH
58732: DOUBLE
58733: LD_INT 1
58735: DEC
58736: ST_TO_ADDR
58737: LD_VAR 0 2
58741: PUSH
58742: FOR_TO
58743: IFFALSE 58855
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58745: LD_VAR 0 1
58749: PPUSH
58750: LD_VAR 0 2
58754: PUSH
58755: LD_VAR 0 4
58759: ARRAY
58760: PUSH
58761: LD_INT 1
58763: ARRAY
58764: PPUSH
58765: LD_VAR 0 2
58769: PUSH
58770: LD_VAR 0 4
58774: ARRAY
58775: PUSH
58776: LD_INT 2
58778: ARRAY
58779: PPUSH
58780: CALL_OW 297
58784: PUSH
58785: LD_VAR 0 5
58789: LESS
58790: IFFALSE 58853
// begin hex := hexes [ i ] ;
58792: LD_ADDR_VAR 0 7
58796: PUSH
58797: LD_VAR 0 2
58801: PUSH
58802: LD_VAR 0 4
58806: ARRAY
58807: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58808: LD_ADDR_VAR 0 5
58812: PUSH
58813: LD_VAR 0 1
58817: PPUSH
58818: LD_VAR 0 2
58822: PUSH
58823: LD_VAR 0 4
58827: ARRAY
58828: PUSH
58829: LD_INT 1
58831: ARRAY
58832: PPUSH
58833: LD_VAR 0 2
58837: PUSH
58838: LD_VAR 0 4
58842: ARRAY
58843: PUSH
58844: LD_INT 2
58846: ARRAY
58847: PPUSH
58848: CALL_OW 297
58852: ST_TO_ADDR
// end ; end ;
58853: GO 58742
58855: POP
58856: POP
// result := hex ;
58857: LD_ADDR_VAR 0 3
58861: PUSH
58862: LD_VAR 0 7
58866: ST_TO_ADDR
// end ;
58867: LD_VAR 0 3
58871: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58872: LD_INT 0
58874: PPUSH
58875: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58876: LD_VAR 0 1
58880: NOT
58881: PUSH
58882: LD_VAR 0 1
58886: PUSH
58887: LD_INT 21
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 23
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PPUSH
58911: CALL_OW 69
58915: IN
58916: NOT
58917: OR
58918: IFFALSE 58922
// exit ;
58920: GO 58969
// for i = 1 to 3 do
58922: LD_ADDR_VAR 0 3
58926: PUSH
58927: DOUBLE
58928: LD_INT 1
58930: DEC
58931: ST_TO_ADDR
58932: LD_INT 3
58934: PUSH
58935: FOR_TO
58936: IFFALSE 58967
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58938: LD_VAR 0 1
58942: PPUSH
58943: CALL_OW 250
58947: PPUSH
58948: LD_VAR 0 1
58952: PPUSH
58953: CALL_OW 251
58957: PPUSH
58958: LD_INT 1
58960: PPUSH
58961: CALL_OW 453
58965: GO 58935
58967: POP
58968: POP
// end ;
58969: LD_VAR 0 2
58973: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58974: LD_INT 0
58976: PPUSH
58977: PPUSH
58978: PPUSH
58979: PPUSH
58980: PPUSH
58981: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58982: LD_VAR 0 1
58986: NOT
58987: PUSH
58988: LD_VAR 0 2
58992: NOT
58993: OR
58994: PUSH
58995: LD_VAR 0 1
58999: PPUSH
59000: CALL_OW 314
59004: OR
59005: IFFALSE 59009
// exit ;
59007: GO 59450
// x := GetX ( enemy_unit ) ;
59009: LD_ADDR_VAR 0 7
59013: PUSH
59014: LD_VAR 0 2
59018: PPUSH
59019: CALL_OW 250
59023: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59024: LD_ADDR_VAR 0 8
59028: PUSH
59029: LD_VAR 0 2
59033: PPUSH
59034: CALL_OW 251
59038: ST_TO_ADDR
// if not x or not y then
59039: LD_VAR 0 7
59043: NOT
59044: PUSH
59045: LD_VAR 0 8
59049: NOT
59050: OR
59051: IFFALSE 59055
// exit ;
59053: GO 59450
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59055: LD_ADDR_VAR 0 6
59059: PUSH
59060: LD_VAR 0 7
59064: PPUSH
59065: LD_INT 0
59067: PPUSH
59068: LD_INT 4
59070: PPUSH
59071: CALL_OW 272
59075: PUSH
59076: LD_VAR 0 8
59080: PPUSH
59081: LD_INT 0
59083: PPUSH
59084: LD_INT 4
59086: PPUSH
59087: CALL_OW 273
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_VAR 0 7
59100: PPUSH
59101: LD_INT 1
59103: PPUSH
59104: LD_INT 4
59106: PPUSH
59107: CALL_OW 272
59111: PUSH
59112: LD_VAR 0 8
59116: PPUSH
59117: LD_INT 1
59119: PPUSH
59120: LD_INT 4
59122: PPUSH
59123: CALL_OW 273
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_VAR 0 7
59136: PPUSH
59137: LD_INT 2
59139: PPUSH
59140: LD_INT 4
59142: PPUSH
59143: CALL_OW 272
59147: PUSH
59148: LD_VAR 0 8
59152: PPUSH
59153: LD_INT 2
59155: PPUSH
59156: LD_INT 4
59158: PPUSH
59159: CALL_OW 273
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_VAR 0 7
59172: PPUSH
59173: LD_INT 3
59175: PPUSH
59176: LD_INT 4
59178: PPUSH
59179: CALL_OW 272
59183: PUSH
59184: LD_VAR 0 8
59188: PPUSH
59189: LD_INT 3
59191: PPUSH
59192: LD_INT 4
59194: PPUSH
59195: CALL_OW 273
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_VAR 0 7
59208: PPUSH
59209: LD_INT 4
59211: PPUSH
59212: LD_INT 4
59214: PPUSH
59215: CALL_OW 272
59219: PUSH
59220: LD_VAR 0 8
59224: PPUSH
59225: LD_INT 4
59227: PPUSH
59228: LD_INT 4
59230: PPUSH
59231: CALL_OW 273
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_VAR 0 7
59244: PPUSH
59245: LD_INT 5
59247: PPUSH
59248: LD_INT 4
59250: PPUSH
59251: CALL_OW 272
59255: PUSH
59256: LD_VAR 0 8
59260: PPUSH
59261: LD_INT 5
59263: PPUSH
59264: LD_INT 4
59266: PPUSH
59267: CALL_OW 273
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: ST_TO_ADDR
// for i = tmp downto 1 do
59284: LD_ADDR_VAR 0 4
59288: PUSH
59289: DOUBLE
59290: LD_VAR 0 6
59294: INC
59295: ST_TO_ADDR
59296: LD_INT 1
59298: PUSH
59299: FOR_DOWNTO
59300: IFFALSE 59401
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59302: LD_VAR 0 6
59306: PUSH
59307: LD_VAR 0 4
59311: ARRAY
59312: PUSH
59313: LD_INT 1
59315: ARRAY
59316: PPUSH
59317: LD_VAR 0 6
59321: PUSH
59322: LD_VAR 0 4
59326: ARRAY
59327: PUSH
59328: LD_INT 2
59330: ARRAY
59331: PPUSH
59332: CALL_OW 488
59336: NOT
59337: PUSH
59338: LD_VAR 0 6
59342: PUSH
59343: LD_VAR 0 4
59347: ARRAY
59348: PUSH
59349: LD_INT 1
59351: ARRAY
59352: PPUSH
59353: LD_VAR 0 6
59357: PUSH
59358: LD_VAR 0 4
59362: ARRAY
59363: PUSH
59364: LD_INT 2
59366: ARRAY
59367: PPUSH
59368: CALL_OW 428
59372: PUSH
59373: LD_INT 0
59375: NONEQUAL
59376: OR
59377: IFFALSE 59399
// tmp := Delete ( tmp , i ) ;
59379: LD_ADDR_VAR 0 6
59383: PUSH
59384: LD_VAR 0 6
59388: PPUSH
59389: LD_VAR 0 4
59393: PPUSH
59394: CALL_OW 3
59398: ST_TO_ADDR
59399: GO 59299
59401: POP
59402: POP
// j := GetClosestHex ( unit , tmp ) ;
59403: LD_ADDR_VAR 0 5
59407: PUSH
59408: LD_VAR 0 1
59412: PPUSH
59413: LD_VAR 0 6
59417: PPUSH
59418: CALL 58703 0 2
59422: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59423: LD_VAR 0 1
59427: PPUSH
59428: LD_VAR 0 5
59432: PUSH
59433: LD_INT 1
59435: ARRAY
59436: PPUSH
59437: LD_VAR 0 5
59441: PUSH
59442: LD_INT 2
59444: ARRAY
59445: PPUSH
59446: CALL_OW 111
// end ;
59450: LD_VAR 0 3
59454: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59455: LD_INT 0
59457: PPUSH
59458: PPUSH
59459: PPUSH
// uc_side = 0 ;
59460: LD_ADDR_OWVAR 20
59464: PUSH
59465: LD_INT 0
59467: ST_TO_ADDR
// uc_nation = 0 ;
59468: LD_ADDR_OWVAR 21
59472: PUSH
59473: LD_INT 0
59475: ST_TO_ADDR
// InitHc_All ( ) ;
59476: CALL_OW 584
// InitVc ;
59480: CALL_OW 20
// if mastodonts then
59484: LD_VAR 0 6
59488: IFFALSE 59555
// for i = 1 to mastodonts do
59490: LD_ADDR_VAR 0 11
59494: PUSH
59495: DOUBLE
59496: LD_INT 1
59498: DEC
59499: ST_TO_ADDR
59500: LD_VAR 0 6
59504: PUSH
59505: FOR_TO
59506: IFFALSE 59553
// begin vc_chassis := 31 ;
59508: LD_ADDR_OWVAR 37
59512: PUSH
59513: LD_INT 31
59515: ST_TO_ADDR
// vc_control := control_rider ;
59516: LD_ADDR_OWVAR 38
59520: PUSH
59521: LD_INT 4
59523: ST_TO_ADDR
// animal := CreateVehicle ;
59524: LD_ADDR_VAR 0 12
59528: PUSH
59529: CALL_OW 45
59533: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59534: LD_VAR 0 12
59538: PPUSH
59539: LD_VAR 0 8
59543: PPUSH
59544: LD_INT 0
59546: PPUSH
59547: CALL 61743 0 3
// end ;
59551: GO 59505
59553: POP
59554: POP
// if horses then
59555: LD_VAR 0 5
59559: IFFALSE 59626
// for i = 1 to horses do
59561: LD_ADDR_VAR 0 11
59565: PUSH
59566: DOUBLE
59567: LD_INT 1
59569: DEC
59570: ST_TO_ADDR
59571: LD_VAR 0 5
59575: PUSH
59576: FOR_TO
59577: IFFALSE 59624
// begin hc_class := 21 ;
59579: LD_ADDR_OWVAR 28
59583: PUSH
59584: LD_INT 21
59586: ST_TO_ADDR
// hc_gallery :=  ;
59587: LD_ADDR_OWVAR 33
59591: PUSH
59592: LD_STRING 
59594: ST_TO_ADDR
// animal := CreateHuman ;
59595: LD_ADDR_VAR 0 12
59599: PUSH
59600: CALL_OW 44
59604: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59605: LD_VAR 0 12
59609: PPUSH
59610: LD_VAR 0 8
59614: PPUSH
59615: LD_INT 0
59617: PPUSH
59618: CALL 61743 0 3
// end ;
59622: GO 59576
59624: POP
59625: POP
// if birds then
59626: LD_VAR 0 1
59630: IFFALSE 59697
// for i = 1 to birds do
59632: LD_ADDR_VAR 0 11
59636: PUSH
59637: DOUBLE
59638: LD_INT 1
59640: DEC
59641: ST_TO_ADDR
59642: LD_VAR 0 1
59646: PUSH
59647: FOR_TO
59648: IFFALSE 59695
// begin hc_class = 18 ;
59650: LD_ADDR_OWVAR 28
59654: PUSH
59655: LD_INT 18
59657: ST_TO_ADDR
// hc_gallery =  ;
59658: LD_ADDR_OWVAR 33
59662: PUSH
59663: LD_STRING 
59665: ST_TO_ADDR
// animal := CreateHuman ;
59666: LD_ADDR_VAR 0 12
59670: PUSH
59671: CALL_OW 44
59675: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59676: LD_VAR 0 12
59680: PPUSH
59681: LD_VAR 0 8
59685: PPUSH
59686: LD_INT 0
59688: PPUSH
59689: CALL 61743 0 3
// end ;
59693: GO 59647
59695: POP
59696: POP
// if tigers then
59697: LD_VAR 0 2
59701: IFFALSE 59785
// for i = 1 to tigers do
59703: LD_ADDR_VAR 0 11
59707: PUSH
59708: DOUBLE
59709: LD_INT 1
59711: DEC
59712: ST_TO_ADDR
59713: LD_VAR 0 2
59717: PUSH
59718: FOR_TO
59719: IFFALSE 59783
// begin hc_class = class_tiger ;
59721: LD_ADDR_OWVAR 28
59725: PUSH
59726: LD_INT 14
59728: ST_TO_ADDR
// hc_gallery =  ;
59729: LD_ADDR_OWVAR 33
59733: PUSH
59734: LD_STRING 
59736: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59737: LD_ADDR_OWVAR 35
59741: PUSH
59742: LD_INT 7
59744: NEG
59745: PPUSH
59746: LD_INT 7
59748: PPUSH
59749: CALL_OW 12
59753: ST_TO_ADDR
// animal := CreateHuman ;
59754: LD_ADDR_VAR 0 12
59758: PUSH
59759: CALL_OW 44
59763: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59764: LD_VAR 0 12
59768: PPUSH
59769: LD_VAR 0 8
59773: PPUSH
59774: LD_INT 0
59776: PPUSH
59777: CALL 61743 0 3
// end ;
59781: GO 59718
59783: POP
59784: POP
// if apemans then
59785: LD_VAR 0 3
59789: IFFALSE 59912
// for i = 1 to apemans do
59791: LD_ADDR_VAR 0 11
59795: PUSH
59796: DOUBLE
59797: LD_INT 1
59799: DEC
59800: ST_TO_ADDR
59801: LD_VAR 0 3
59805: PUSH
59806: FOR_TO
59807: IFFALSE 59910
// begin hc_class = class_apeman ;
59809: LD_ADDR_OWVAR 28
59813: PUSH
59814: LD_INT 12
59816: ST_TO_ADDR
// hc_gallery =  ;
59817: LD_ADDR_OWVAR 33
59821: PUSH
59822: LD_STRING 
59824: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
59825: LD_ADDR_OWVAR 35
59829: PUSH
59830: LD_INT 5
59832: NEG
59833: PPUSH
59834: LD_INT 5
59836: PPUSH
59837: CALL_OW 12
59841: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59842: LD_ADDR_OWVAR 31
59846: PUSH
59847: LD_INT 1
59849: PPUSH
59850: LD_INT 3
59852: PPUSH
59853: CALL_OW 12
59857: PUSH
59858: LD_INT 1
59860: PPUSH
59861: LD_INT 3
59863: PPUSH
59864: CALL_OW 12
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: ST_TO_ADDR
// animal := CreateHuman ;
59881: LD_ADDR_VAR 0 12
59885: PUSH
59886: CALL_OW 44
59890: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59891: LD_VAR 0 12
59895: PPUSH
59896: LD_VAR 0 8
59900: PPUSH
59901: LD_INT 0
59903: PPUSH
59904: CALL 61743 0 3
// end ;
59908: GO 59806
59910: POP
59911: POP
// if enchidnas then
59912: LD_VAR 0 4
59916: IFFALSE 59983
// for i = 1 to enchidnas do
59918: LD_ADDR_VAR 0 11
59922: PUSH
59923: DOUBLE
59924: LD_INT 1
59926: DEC
59927: ST_TO_ADDR
59928: LD_VAR 0 4
59932: PUSH
59933: FOR_TO
59934: IFFALSE 59981
// begin hc_class = 13 ;
59936: LD_ADDR_OWVAR 28
59940: PUSH
59941: LD_INT 13
59943: ST_TO_ADDR
// hc_gallery =  ;
59944: LD_ADDR_OWVAR 33
59948: PUSH
59949: LD_STRING 
59951: ST_TO_ADDR
// animal := CreateHuman ;
59952: LD_ADDR_VAR 0 12
59956: PUSH
59957: CALL_OW 44
59961: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59962: LD_VAR 0 12
59966: PPUSH
59967: LD_VAR 0 8
59971: PPUSH
59972: LD_INT 0
59974: PPUSH
59975: CALL 61743 0 3
// end ;
59979: GO 59933
59981: POP
59982: POP
// if fishes then
59983: LD_VAR 0 7
59987: IFFALSE 60054
// for i = 1 to fishes do
59989: LD_ADDR_VAR 0 11
59993: PUSH
59994: DOUBLE
59995: LD_INT 1
59997: DEC
59998: ST_TO_ADDR
59999: LD_VAR 0 7
60003: PUSH
60004: FOR_TO
60005: IFFALSE 60052
// begin hc_class = 20 ;
60007: LD_ADDR_OWVAR 28
60011: PUSH
60012: LD_INT 20
60014: ST_TO_ADDR
// hc_gallery =  ;
60015: LD_ADDR_OWVAR 33
60019: PUSH
60020: LD_STRING 
60022: ST_TO_ADDR
// animal := CreateHuman ;
60023: LD_ADDR_VAR 0 12
60027: PUSH
60028: CALL_OW 44
60032: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60033: LD_VAR 0 12
60037: PPUSH
60038: LD_VAR 0 9
60042: PPUSH
60043: LD_INT 0
60045: PPUSH
60046: CALL 61743 0 3
// end ;
60050: GO 60004
60052: POP
60053: POP
// end ;
60054: LD_VAR 0 10
60058: RET
// export function WantHeal ( sci , unit ) ; begin
60059: LD_INT 0
60061: PPUSH
// if GetTaskList ( sci ) > 0 then
60062: LD_VAR 0 1
60066: PPUSH
60067: CALL_OW 437
60071: PUSH
60072: LD_INT 0
60074: GREATER
60075: IFFALSE 60145
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60077: LD_VAR 0 1
60081: PPUSH
60082: CALL_OW 437
60086: PUSH
60087: LD_INT 1
60089: ARRAY
60090: PUSH
60091: LD_INT 1
60093: ARRAY
60094: PUSH
60095: LD_STRING l
60097: EQUAL
60098: PUSH
60099: LD_VAR 0 1
60103: PPUSH
60104: CALL_OW 437
60108: PUSH
60109: LD_INT 1
60111: ARRAY
60112: PUSH
60113: LD_INT 4
60115: ARRAY
60116: PUSH
60117: LD_VAR 0 2
60121: EQUAL
60122: AND
60123: IFFALSE 60135
// result := true else
60125: LD_ADDR_VAR 0 3
60129: PUSH
60130: LD_INT 1
60132: ST_TO_ADDR
60133: GO 60143
// result := false ;
60135: LD_ADDR_VAR 0 3
60139: PUSH
60140: LD_INT 0
60142: ST_TO_ADDR
// end else
60143: GO 60153
// result := false ;
60145: LD_ADDR_VAR 0 3
60149: PUSH
60150: LD_INT 0
60152: ST_TO_ADDR
// end ;
60153: LD_VAR 0 3
60157: RET
// export function HealTarget ( sci ) ; begin
60158: LD_INT 0
60160: PPUSH
// if not sci then
60161: LD_VAR 0 1
60165: NOT
60166: IFFALSE 60170
// exit ;
60168: GO 60235
// result := 0 ;
60170: LD_ADDR_VAR 0 2
60174: PUSH
60175: LD_INT 0
60177: ST_TO_ADDR
// if GetTaskList ( sci ) then
60178: LD_VAR 0 1
60182: PPUSH
60183: CALL_OW 437
60187: IFFALSE 60235
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60189: LD_VAR 0 1
60193: PPUSH
60194: CALL_OW 437
60198: PUSH
60199: LD_INT 1
60201: ARRAY
60202: PUSH
60203: LD_INT 1
60205: ARRAY
60206: PUSH
60207: LD_STRING l
60209: EQUAL
60210: IFFALSE 60235
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60212: LD_ADDR_VAR 0 2
60216: PUSH
60217: LD_VAR 0 1
60221: PPUSH
60222: CALL_OW 437
60226: PUSH
60227: LD_INT 1
60229: ARRAY
60230: PUSH
60231: LD_INT 4
60233: ARRAY
60234: ST_TO_ADDR
// end ;
60235: LD_VAR 0 2
60239: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60240: LD_INT 0
60242: PPUSH
60243: PPUSH
60244: PPUSH
60245: PPUSH
// if not base_units then
60246: LD_VAR 0 1
60250: NOT
60251: IFFALSE 60255
// exit ;
60253: GO 60342
// result := false ;
60255: LD_ADDR_VAR 0 2
60259: PUSH
60260: LD_INT 0
60262: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60263: LD_ADDR_VAR 0 5
60267: PUSH
60268: LD_VAR 0 1
60272: PPUSH
60273: LD_INT 21
60275: PUSH
60276: LD_INT 3
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PPUSH
60283: CALL_OW 72
60287: ST_TO_ADDR
// if not tmp then
60288: LD_VAR 0 5
60292: NOT
60293: IFFALSE 60297
// exit ;
60295: GO 60342
// for i in tmp do
60297: LD_ADDR_VAR 0 3
60301: PUSH
60302: LD_VAR 0 5
60306: PUSH
60307: FOR_IN
60308: IFFALSE 60340
// begin result := EnemyInRange ( i , 22 ) ;
60310: LD_ADDR_VAR 0 2
60314: PUSH
60315: LD_VAR 0 3
60319: PPUSH
60320: LD_INT 22
60322: PPUSH
60323: CALL 58578 0 2
60327: ST_TO_ADDR
// if result then
60328: LD_VAR 0 2
60332: IFFALSE 60338
// exit ;
60334: POP
60335: POP
60336: GO 60342
// end ;
60338: GO 60307
60340: POP
60341: POP
// end ;
60342: LD_VAR 0 2
60346: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60347: LD_INT 0
60349: PPUSH
60350: PPUSH
// if not units then
60351: LD_VAR 0 1
60355: NOT
60356: IFFALSE 60360
// exit ;
60358: GO 60430
// result := [ ] ;
60360: LD_ADDR_VAR 0 3
60364: PUSH
60365: EMPTY
60366: ST_TO_ADDR
// for i in units do
60367: LD_ADDR_VAR 0 4
60371: PUSH
60372: LD_VAR 0 1
60376: PUSH
60377: FOR_IN
60378: IFFALSE 60428
// if GetTag ( i ) = tag then
60380: LD_VAR 0 4
60384: PPUSH
60385: CALL_OW 110
60389: PUSH
60390: LD_VAR 0 2
60394: EQUAL
60395: IFFALSE 60426
// result := Insert ( result , result + 1 , i ) ;
60397: LD_ADDR_VAR 0 3
60401: PUSH
60402: LD_VAR 0 3
60406: PPUSH
60407: LD_VAR 0 3
60411: PUSH
60412: LD_INT 1
60414: PLUS
60415: PPUSH
60416: LD_VAR 0 4
60420: PPUSH
60421: CALL_OW 2
60425: ST_TO_ADDR
60426: GO 60377
60428: POP
60429: POP
// end ;
60430: LD_VAR 0 3
60434: RET
// export function IsDriver ( un ) ; begin
60435: LD_INT 0
60437: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60438: LD_ADDR_VAR 0 2
60442: PUSH
60443: LD_VAR 0 1
60447: PUSH
60448: LD_INT 55
60450: PUSH
60451: EMPTY
60452: LIST
60453: PPUSH
60454: CALL_OW 69
60458: IN
60459: ST_TO_ADDR
// end ;
60460: LD_VAR 0 2
60464: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60465: LD_INT 0
60467: PPUSH
60468: PPUSH
// list := [ ] ;
60469: LD_ADDR_VAR 0 5
60473: PUSH
60474: EMPTY
60475: ST_TO_ADDR
// case d of 0 :
60476: LD_VAR 0 3
60480: PUSH
60481: LD_INT 0
60483: DOUBLE
60484: EQUAL
60485: IFTRUE 60489
60487: GO 60622
60489: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60490: LD_ADDR_VAR 0 5
60494: PUSH
60495: LD_VAR 0 1
60499: PUSH
60500: LD_INT 4
60502: MINUS
60503: PUSH
60504: LD_VAR 0 2
60508: PUSH
60509: LD_INT 4
60511: MINUS
60512: PUSH
60513: LD_INT 2
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: LIST
60520: PUSH
60521: LD_VAR 0 1
60525: PUSH
60526: LD_INT 3
60528: MINUS
60529: PUSH
60530: LD_VAR 0 2
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: LIST
60542: PUSH
60543: LD_VAR 0 1
60547: PUSH
60548: LD_INT 4
60550: PLUS
60551: PUSH
60552: LD_VAR 0 2
60556: PUSH
60557: LD_INT 4
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: LIST
60564: PUSH
60565: LD_VAR 0 1
60569: PUSH
60570: LD_INT 3
60572: PLUS
60573: PUSH
60574: LD_VAR 0 2
60578: PUSH
60579: LD_INT 3
60581: PLUS
60582: PUSH
60583: LD_INT 5
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: LIST
60590: PUSH
60591: LD_VAR 0 1
60595: PUSH
60596: LD_VAR 0 2
60600: PUSH
60601: LD_INT 4
60603: PLUS
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: LIST
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: ST_TO_ADDR
// end ; 1 :
60620: GO 61320
60622: LD_INT 1
60624: DOUBLE
60625: EQUAL
60626: IFTRUE 60630
60628: GO 60763
60630: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60631: LD_ADDR_VAR 0 5
60635: PUSH
60636: LD_VAR 0 1
60640: PUSH
60641: LD_VAR 0 2
60645: PUSH
60646: LD_INT 4
60648: MINUS
60649: PUSH
60650: LD_INT 3
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: LIST
60657: PUSH
60658: LD_VAR 0 1
60662: PUSH
60663: LD_INT 3
60665: MINUS
60666: PUSH
60667: LD_VAR 0 2
60671: PUSH
60672: LD_INT 3
60674: MINUS
60675: PUSH
60676: LD_INT 2
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: LIST
60683: PUSH
60684: LD_VAR 0 1
60688: PUSH
60689: LD_INT 4
60691: MINUS
60692: PUSH
60693: LD_VAR 0 2
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: LIST
60705: PUSH
60706: LD_VAR 0 1
60710: PUSH
60711: LD_VAR 0 2
60715: PUSH
60716: LD_INT 3
60718: PLUS
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: LIST
60727: PUSH
60728: LD_VAR 0 1
60732: PUSH
60733: LD_INT 4
60735: PLUS
60736: PUSH
60737: LD_VAR 0 2
60741: PUSH
60742: LD_INT 4
60744: PLUS
60745: PUSH
60746: LD_INT 5
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: LIST
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: ST_TO_ADDR
// end ; 2 :
60761: GO 61320
60763: LD_INT 2
60765: DOUBLE
60766: EQUAL
60767: IFTRUE 60771
60769: GO 60900
60771: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60772: LD_ADDR_VAR 0 5
60776: PUSH
60777: LD_VAR 0 1
60781: PUSH
60782: LD_VAR 0 2
60786: PUSH
60787: LD_INT 3
60789: MINUS
60790: PUSH
60791: LD_INT 3
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: LIST
60798: PUSH
60799: LD_VAR 0 1
60803: PUSH
60804: LD_INT 4
60806: PLUS
60807: PUSH
60808: LD_VAR 0 2
60812: PUSH
60813: LD_INT 4
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: LIST
60820: PUSH
60821: LD_VAR 0 1
60825: PUSH
60826: LD_VAR 0 2
60830: PUSH
60831: LD_INT 4
60833: PLUS
60834: PUSH
60835: LD_INT 0
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: LIST
60842: PUSH
60843: LD_VAR 0 1
60847: PUSH
60848: LD_INT 3
60850: MINUS
60851: PUSH
60852: LD_VAR 0 2
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: LIST
60864: PUSH
60865: LD_VAR 0 1
60869: PUSH
60870: LD_INT 4
60872: MINUS
60873: PUSH
60874: LD_VAR 0 2
60878: PUSH
60879: LD_INT 4
60881: MINUS
60882: PUSH
60883: LD_INT 2
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: LIST
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: ST_TO_ADDR
// end ; 3 :
60898: GO 61320
60900: LD_INT 3
60902: DOUBLE
60903: EQUAL
60904: IFTRUE 60908
60906: GO 61041
60908: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60909: LD_ADDR_VAR 0 5
60913: PUSH
60914: LD_VAR 0 1
60918: PUSH
60919: LD_INT 3
60921: PLUS
60922: PUSH
60923: LD_VAR 0 2
60927: PUSH
60928: LD_INT 4
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: LIST
60935: PUSH
60936: LD_VAR 0 1
60940: PUSH
60941: LD_INT 4
60943: PLUS
60944: PUSH
60945: LD_VAR 0 2
60949: PUSH
60950: LD_INT 4
60952: PLUS
60953: PUSH
60954: LD_INT 5
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: LIST
60961: PUSH
60962: LD_VAR 0 1
60966: PUSH
60967: LD_INT 4
60969: MINUS
60970: PUSH
60971: LD_VAR 0 2
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: LIST
60983: PUSH
60984: LD_VAR 0 1
60988: PUSH
60989: LD_VAR 0 2
60993: PUSH
60994: LD_INT 4
60996: MINUS
60997: PUSH
60998: LD_INT 3
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: LIST
61005: PUSH
61006: LD_VAR 0 1
61010: PUSH
61011: LD_INT 3
61013: MINUS
61014: PUSH
61015: LD_VAR 0 2
61019: PUSH
61020: LD_INT 3
61022: MINUS
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: LIST
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: ST_TO_ADDR
// end ; 4 :
61039: GO 61320
61041: LD_INT 4
61043: DOUBLE
61044: EQUAL
61045: IFTRUE 61049
61047: GO 61182
61049: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61050: LD_ADDR_VAR 0 5
61054: PUSH
61055: LD_VAR 0 1
61059: PUSH
61060: LD_VAR 0 2
61064: PUSH
61065: LD_INT 4
61067: PLUS
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: LIST
61076: PUSH
61077: LD_VAR 0 1
61081: PUSH
61082: LD_INT 3
61084: PLUS
61085: PUSH
61086: LD_VAR 0 2
61090: PUSH
61091: LD_INT 3
61093: PLUS
61094: PUSH
61095: LD_INT 5
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: LIST
61102: PUSH
61103: LD_VAR 0 1
61107: PUSH
61108: LD_INT 4
61110: PLUS
61111: PUSH
61112: LD_VAR 0 2
61116: PUSH
61117: LD_INT 4
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: PUSH
61125: LD_VAR 0 1
61129: PUSH
61130: LD_VAR 0 2
61134: PUSH
61135: LD_INT 3
61137: MINUS
61138: PUSH
61139: LD_INT 3
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: LIST
61146: PUSH
61147: LD_VAR 0 1
61151: PUSH
61152: LD_INT 4
61154: MINUS
61155: PUSH
61156: LD_VAR 0 2
61160: PUSH
61161: LD_INT 4
61163: MINUS
61164: PUSH
61165: LD_INT 2
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: LIST
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: ST_TO_ADDR
// end ; 5 :
61180: GO 61320
61182: LD_INT 5
61184: DOUBLE
61185: EQUAL
61186: IFTRUE 61190
61188: GO 61319
61190: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61191: LD_ADDR_VAR 0 5
61195: PUSH
61196: LD_VAR 0 1
61200: PUSH
61201: LD_INT 4
61203: MINUS
61204: PUSH
61205: LD_VAR 0 2
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: LIST
61217: PUSH
61218: LD_VAR 0 1
61222: PUSH
61223: LD_VAR 0 2
61227: PUSH
61228: LD_INT 4
61230: MINUS
61231: PUSH
61232: LD_INT 3
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: LIST
61239: PUSH
61240: LD_VAR 0 1
61244: PUSH
61245: LD_INT 4
61247: PLUS
61248: PUSH
61249: LD_VAR 0 2
61253: PUSH
61254: LD_INT 4
61256: PLUS
61257: PUSH
61258: LD_INT 5
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: LIST
61265: PUSH
61266: LD_VAR 0 1
61270: PUSH
61271: LD_INT 3
61273: PLUS
61274: PUSH
61275: LD_VAR 0 2
61279: PUSH
61280: LD_INT 4
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: LIST
61287: PUSH
61288: LD_VAR 0 1
61292: PUSH
61293: LD_VAR 0 2
61297: PUSH
61298: LD_INT 3
61300: PLUS
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: LIST
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: ST_TO_ADDR
// end ; end ;
61317: GO 61320
61319: POP
// result := list ;
61320: LD_ADDR_VAR 0 4
61324: PUSH
61325: LD_VAR 0 5
61329: ST_TO_ADDR
// end ;
61330: LD_VAR 0 4
61334: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61335: LD_INT 0
61337: PPUSH
61338: PPUSH
61339: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61340: LD_VAR 0 1
61344: NOT
61345: PUSH
61346: LD_VAR 0 2
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: LD_INT 3
61359: PUSH
61360: LD_INT 4
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: IN
61369: NOT
61370: OR
61371: IFFALSE 61375
// exit ;
61373: GO 61467
// tmp := [ ] ;
61375: LD_ADDR_VAR 0 5
61379: PUSH
61380: EMPTY
61381: ST_TO_ADDR
// for i in units do
61382: LD_ADDR_VAR 0 4
61386: PUSH
61387: LD_VAR 0 1
61391: PUSH
61392: FOR_IN
61393: IFFALSE 61436
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61395: LD_ADDR_VAR 0 5
61399: PUSH
61400: LD_VAR 0 5
61404: PPUSH
61405: LD_VAR 0 5
61409: PUSH
61410: LD_INT 1
61412: PLUS
61413: PPUSH
61414: LD_VAR 0 4
61418: PPUSH
61419: LD_VAR 0 2
61423: PPUSH
61424: CALL_OW 259
61428: PPUSH
61429: CALL_OW 2
61433: ST_TO_ADDR
61434: GO 61392
61436: POP
61437: POP
// if not tmp then
61438: LD_VAR 0 5
61442: NOT
61443: IFFALSE 61447
// exit ;
61445: GO 61467
// result := SortListByListDesc ( units , tmp ) ;
61447: LD_ADDR_VAR 0 3
61451: PUSH
61452: LD_VAR 0 1
61456: PPUSH
61457: LD_VAR 0 5
61461: PPUSH
61462: CALL_OW 77
61466: ST_TO_ADDR
// end ;
61467: LD_VAR 0 3
61471: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61472: LD_INT 0
61474: PPUSH
61475: PPUSH
61476: PPUSH
// result := false ;
61477: LD_ADDR_VAR 0 3
61481: PUSH
61482: LD_INT 0
61484: ST_TO_ADDR
// x := GetX ( building ) ;
61485: LD_ADDR_VAR 0 4
61489: PUSH
61490: LD_VAR 0 2
61494: PPUSH
61495: CALL_OW 250
61499: ST_TO_ADDR
// y := GetY ( building ) ;
61500: LD_ADDR_VAR 0 5
61504: PUSH
61505: LD_VAR 0 2
61509: PPUSH
61510: CALL_OW 251
61514: ST_TO_ADDR
// if not building or not x or not y then
61515: LD_VAR 0 2
61519: NOT
61520: PUSH
61521: LD_VAR 0 4
61525: NOT
61526: OR
61527: PUSH
61528: LD_VAR 0 5
61532: NOT
61533: OR
61534: IFFALSE 61538
// exit ;
61536: GO 61630
// if GetTaskList ( unit ) then
61538: LD_VAR 0 1
61542: PPUSH
61543: CALL_OW 437
61547: IFFALSE 61630
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61549: LD_STRING e
61551: PUSH
61552: LD_VAR 0 1
61556: PPUSH
61557: CALL_OW 437
61561: PUSH
61562: LD_INT 1
61564: ARRAY
61565: PUSH
61566: LD_INT 1
61568: ARRAY
61569: EQUAL
61570: PUSH
61571: LD_VAR 0 4
61575: PUSH
61576: LD_VAR 0 1
61580: PPUSH
61581: CALL_OW 437
61585: PUSH
61586: LD_INT 1
61588: ARRAY
61589: PUSH
61590: LD_INT 2
61592: ARRAY
61593: EQUAL
61594: AND
61595: PUSH
61596: LD_VAR 0 5
61600: PUSH
61601: LD_VAR 0 1
61605: PPUSH
61606: CALL_OW 437
61610: PUSH
61611: LD_INT 1
61613: ARRAY
61614: PUSH
61615: LD_INT 3
61617: ARRAY
61618: EQUAL
61619: AND
61620: IFFALSE 61630
// result := true end ;
61622: LD_ADDR_VAR 0 3
61626: PUSH
61627: LD_INT 1
61629: ST_TO_ADDR
// end ;
61630: LD_VAR 0 3
61634: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61635: LD_INT 0
61637: PPUSH
// result := false ;
61638: LD_ADDR_VAR 0 4
61642: PUSH
61643: LD_INT 0
61645: ST_TO_ADDR
// if GetTaskList ( unit ) then
61646: LD_VAR 0 1
61650: PPUSH
61651: CALL_OW 437
61655: IFFALSE 61738
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61657: LD_STRING M
61659: PUSH
61660: LD_VAR 0 1
61664: PPUSH
61665: CALL_OW 437
61669: PUSH
61670: LD_INT 1
61672: ARRAY
61673: PUSH
61674: LD_INT 1
61676: ARRAY
61677: EQUAL
61678: PUSH
61679: LD_VAR 0 2
61683: PUSH
61684: LD_VAR 0 1
61688: PPUSH
61689: CALL_OW 437
61693: PUSH
61694: LD_INT 1
61696: ARRAY
61697: PUSH
61698: LD_INT 2
61700: ARRAY
61701: EQUAL
61702: AND
61703: PUSH
61704: LD_VAR 0 3
61708: PUSH
61709: LD_VAR 0 1
61713: PPUSH
61714: CALL_OW 437
61718: PUSH
61719: LD_INT 1
61721: ARRAY
61722: PUSH
61723: LD_INT 3
61725: ARRAY
61726: EQUAL
61727: AND
61728: IFFALSE 61738
// result := true ;
61730: LD_ADDR_VAR 0 4
61734: PUSH
61735: LD_INT 1
61737: ST_TO_ADDR
// end ; end ;
61738: LD_VAR 0 4
61742: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61743: LD_INT 0
61745: PPUSH
61746: PPUSH
61747: PPUSH
61748: PPUSH
// if not unit or not area then
61749: LD_VAR 0 1
61753: NOT
61754: PUSH
61755: LD_VAR 0 2
61759: NOT
61760: OR
61761: IFFALSE 61765
// exit ;
61763: GO 61929
// tmp := AreaToList ( area , i ) ;
61765: LD_ADDR_VAR 0 6
61769: PUSH
61770: LD_VAR 0 2
61774: PPUSH
61775: LD_VAR 0 5
61779: PPUSH
61780: CALL_OW 517
61784: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61785: LD_ADDR_VAR 0 5
61789: PUSH
61790: DOUBLE
61791: LD_INT 1
61793: DEC
61794: ST_TO_ADDR
61795: LD_VAR 0 6
61799: PUSH
61800: LD_INT 1
61802: ARRAY
61803: PUSH
61804: FOR_TO
61805: IFFALSE 61927
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61807: LD_ADDR_VAR 0 7
61811: PUSH
61812: LD_VAR 0 6
61816: PUSH
61817: LD_INT 1
61819: ARRAY
61820: PUSH
61821: LD_VAR 0 5
61825: ARRAY
61826: PUSH
61827: LD_VAR 0 6
61831: PUSH
61832: LD_INT 2
61834: ARRAY
61835: PUSH
61836: LD_VAR 0 5
61840: ARRAY
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61846: LD_VAR 0 7
61850: PUSH
61851: LD_INT 1
61853: ARRAY
61854: PPUSH
61855: LD_VAR 0 7
61859: PUSH
61860: LD_INT 2
61862: ARRAY
61863: PPUSH
61864: CALL_OW 428
61868: PUSH
61869: LD_INT 0
61871: EQUAL
61872: IFFALSE 61925
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61874: LD_VAR 0 1
61878: PPUSH
61879: LD_VAR 0 7
61883: PUSH
61884: LD_INT 1
61886: ARRAY
61887: PPUSH
61888: LD_VAR 0 7
61892: PUSH
61893: LD_INT 2
61895: ARRAY
61896: PPUSH
61897: LD_VAR 0 3
61901: PPUSH
61902: CALL_OW 48
// result := IsPlaced ( unit ) ;
61906: LD_ADDR_VAR 0 4
61910: PUSH
61911: LD_VAR 0 1
61915: PPUSH
61916: CALL_OW 305
61920: ST_TO_ADDR
// exit ;
61921: POP
61922: POP
61923: GO 61929
// end ; end ;
61925: GO 61804
61927: POP
61928: POP
// end ;
61929: LD_VAR 0 4
61933: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61934: LD_INT 0
61936: PPUSH
61937: PPUSH
61938: PPUSH
// if not side or side > 8 then
61939: LD_VAR 0 1
61943: NOT
61944: PUSH
61945: LD_VAR 0 1
61949: PUSH
61950: LD_INT 8
61952: GREATER
61953: OR
61954: IFFALSE 61958
// exit ;
61956: GO 62145
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61958: LD_ADDR_VAR 0 4
61962: PUSH
61963: LD_INT 22
61965: PUSH
61966: LD_VAR 0 1
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 21
61977: PUSH
61978: LD_INT 3
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PPUSH
61989: CALL_OW 69
61993: ST_TO_ADDR
// if not tmp then
61994: LD_VAR 0 4
61998: NOT
61999: IFFALSE 62003
// exit ;
62001: GO 62145
// enable_addtolog := true ;
62003: LD_ADDR_OWVAR 81
62007: PUSH
62008: LD_INT 1
62010: ST_TO_ADDR
// AddToLog ( [ ) ;
62011: LD_STRING [
62013: PPUSH
62014: CALL_OW 561
// for i in tmp do
62018: LD_ADDR_VAR 0 3
62022: PUSH
62023: LD_VAR 0 4
62027: PUSH
62028: FOR_IN
62029: IFFALSE 62136
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62031: LD_STRING [
62033: PUSH
62034: LD_VAR 0 3
62038: PPUSH
62039: CALL_OW 266
62043: STR
62044: PUSH
62045: LD_STRING , 
62047: STR
62048: PUSH
62049: LD_VAR 0 3
62053: PPUSH
62054: CALL_OW 250
62058: STR
62059: PUSH
62060: LD_STRING , 
62062: STR
62063: PUSH
62064: LD_VAR 0 3
62068: PPUSH
62069: CALL_OW 251
62073: STR
62074: PUSH
62075: LD_STRING , 
62077: STR
62078: PUSH
62079: LD_VAR 0 3
62083: PPUSH
62084: CALL_OW 254
62088: STR
62089: PUSH
62090: LD_STRING , 
62092: STR
62093: PUSH
62094: LD_VAR 0 3
62098: PPUSH
62099: LD_INT 1
62101: PPUSH
62102: CALL_OW 268
62106: STR
62107: PUSH
62108: LD_STRING , 
62110: STR
62111: PUSH
62112: LD_VAR 0 3
62116: PPUSH
62117: LD_INT 2
62119: PPUSH
62120: CALL_OW 268
62124: STR
62125: PUSH
62126: LD_STRING ],
62128: STR
62129: PPUSH
62130: CALL_OW 561
// end ;
62134: GO 62028
62136: POP
62137: POP
// AddToLog ( ]; ) ;
62138: LD_STRING ];
62140: PPUSH
62141: CALL_OW 561
// end ;
62145: LD_VAR 0 2
62149: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62150: LD_INT 0
62152: PPUSH
62153: PPUSH
62154: PPUSH
62155: PPUSH
62156: PPUSH
// if not area or not rate or not max then
62157: LD_VAR 0 1
62161: NOT
62162: PUSH
62163: LD_VAR 0 2
62167: NOT
62168: OR
62169: PUSH
62170: LD_VAR 0 4
62174: NOT
62175: OR
62176: IFFALSE 62180
// exit ;
62178: GO 62372
// while 1 do
62180: LD_INT 1
62182: IFFALSE 62372
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62184: LD_ADDR_VAR 0 9
62188: PUSH
62189: LD_VAR 0 1
62193: PPUSH
62194: LD_INT 1
62196: PPUSH
62197: CALL_OW 287
62201: PUSH
62202: LD_INT 10
62204: MUL
62205: ST_TO_ADDR
// r := rate / 10 ;
62206: LD_ADDR_VAR 0 7
62210: PUSH
62211: LD_VAR 0 2
62215: PUSH
62216: LD_INT 10
62218: DIVREAL
62219: ST_TO_ADDR
// time := 1 1$00 ;
62220: LD_ADDR_VAR 0 8
62224: PUSH
62225: LD_INT 2100
62227: ST_TO_ADDR
// if amount < min then
62228: LD_VAR 0 9
62232: PUSH
62233: LD_VAR 0 3
62237: LESS
62238: IFFALSE 62256
// r := r * 2 else
62240: LD_ADDR_VAR 0 7
62244: PUSH
62245: LD_VAR 0 7
62249: PUSH
62250: LD_INT 2
62252: MUL
62253: ST_TO_ADDR
62254: GO 62282
// if amount > max then
62256: LD_VAR 0 9
62260: PUSH
62261: LD_VAR 0 4
62265: GREATER
62266: IFFALSE 62282
// r := r / 2 ;
62268: LD_ADDR_VAR 0 7
62272: PUSH
62273: LD_VAR 0 7
62277: PUSH
62278: LD_INT 2
62280: DIVREAL
62281: ST_TO_ADDR
// time := time / r ;
62282: LD_ADDR_VAR 0 8
62286: PUSH
62287: LD_VAR 0 8
62291: PUSH
62292: LD_VAR 0 7
62296: DIVREAL
62297: ST_TO_ADDR
// if time < 0 then
62298: LD_VAR 0 8
62302: PUSH
62303: LD_INT 0
62305: LESS
62306: IFFALSE 62323
// time := time * - 1 ;
62308: LD_ADDR_VAR 0 8
62312: PUSH
62313: LD_VAR 0 8
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: MUL
62322: ST_TO_ADDR
// wait ( time ) ;
62323: LD_VAR 0 8
62327: PPUSH
62328: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62332: LD_INT 35
62334: PPUSH
62335: LD_INT 875
62337: PPUSH
62338: CALL_OW 12
62342: PPUSH
62343: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62347: LD_INT 1
62349: PPUSH
62350: LD_INT 5
62352: PPUSH
62353: CALL_OW 12
62357: PPUSH
62358: LD_VAR 0 1
62362: PPUSH
62363: LD_INT 1
62365: PPUSH
62366: CALL_OW 55
// end ;
62370: GO 62180
// end ;
62372: LD_VAR 0 5
62376: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62377: LD_INT 0
62379: PPUSH
62380: PPUSH
62381: PPUSH
62382: PPUSH
62383: PPUSH
62384: PPUSH
62385: PPUSH
62386: PPUSH
// if not turrets or not factories then
62387: LD_VAR 0 1
62391: NOT
62392: PUSH
62393: LD_VAR 0 2
62397: NOT
62398: OR
62399: IFFALSE 62403
// exit ;
62401: GO 62710
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62403: LD_ADDR_VAR 0 10
62407: PUSH
62408: LD_INT 5
62410: PUSH
62411: LD_INT 6
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 2
62420: PUSH
62421: LD_INT 4
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 3
62430: PUSH
62431: LD_INT 5
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 24
62445: PUSH
62446: LD_INT 25
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 23
62455: PUSH
62456: LD_INT 27
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 42
62469: PUSH
62470: LD_INT 43
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 44
62479: PUSH
62480: LD_INT 46
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 45
62489: PUSH
62490: LD_INT 47
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: LIST
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: LIST
62506: ST_TO_ADDR
// result := [ ] ;
62507: LD_ADDR_VAR 0 3
62511: PUSH
62512: EMPTY
62513: ST_TO_ADDR
// for i in turrets do
62514: LD_ADDR_VAR 0 4
62518: PUSH
62519: LD_VAR 0 1
62523: PUSH
62524: FOR_IN
62525: IFFALSE 62708
// begin nat := GetNation ( i ) ;
62527: LD_ADDR_VAR 0 7
62531: PUSH
62532: LD_VAR 0 4
62536: PPUSH
62537: CALL_OW 248
62541: ST_TO_ADDR
// weapon := 0 ;
62542: LD_ADDR_VAR 0 8
62546: PUSH
62547: LD_INT 0
62549: ST_TO_ADDR
// if not nat then
62550: LD_VAR 0 7
62554: NOT
62555: IFFALSE 62559
// continue ;
62557: GO 62524
// for j in list [ nat ] do
62559: LD_ADDR_VAR 0 5
62563: PUSH
62564: LD_VAR 0 10
62568: PUSH
62569: LD_VAR 0 7
62573: ARRAY
62574: PUSH
62575: FOR_IN
62576: IFFALSE 62617
// if GetBWeapon ( i ) = j [ 1 ] then
62578: LD_VAR 0 4
62582: PPUSH
62583: CALL_OW 269
62587: PUSH
62588: LD_VAR 0 5
62592: PUSH
62593: LD_INT 1
62595: ARRAY
62596: EQUAL
62597: IFFALSE 62615
// begin weapon := j [ 2 ] ;
62599: LD_ADDR_VAR 0 8
62603: PUSH
62604: LD_VAR 0 5
62608: PUSH
62609: LD_INT 2
62611: ARRAY
62612: ST_TO_ADDR
// break ;
62613: GO 62617
// end ;
62615: GO 62575
62617: POP
62618: POP
// if not weapon then
62619: LD_VAR 0 8
62623: NOT
62624: IFFALSE 62628
// continue ;
62626: GO 62524
// for k in factories do
62628: LD_ADDR_VAR 0 6
62632: PUSH
62633: LD_VAR 0 2
62637: PUSH
62638: FOR_IN
62639: IFFALSE 62704
// begin weapons := AvailableWeaponList ( k ) ;
62641: LD_ADDR_VAR 0 9
62645: PUSH
62646: LD_VAR 0 6
62650: PPUSH
62651: CALL_OW 478
62655: ST_TO_ADDR
// if not weapons then
62656: LD_VAR 0 9
62660: NOT
62661: IFFALSE 62665
// continue ;
62663: GO 62638
// if weapon in weapons then
62665: LD_VAR 0 8
62669: PUSH
62670: LD_VAR 0 9
62674: IN
62675: IFFALSE 62702
// begin result := [ i , weapon ] ;
62677: LD_ADDR_VAR 0 3
62681: PUSH
62682: LD_VAR 0 4
62686: PUSH
62687: LD_VAR 0 8
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: ST_TO_ADDR
// exit ;
62696: POP
62697: POP
62698: POP
62699: POP
62700: GO 62710
// end ; end ;
62702: GO 62638
62704: POP
62705: POP
// end ;
62706: GO 62524
62708: POP
62709: POP
// end ;
62710: LD_VAR 0 3
62714: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62715: LD_INT 0
62717: PPUSH
// if not side or side > 8 then
62718: LD_VAR 0 3
62722: NOT
62723: PUSH
62724: LD_VAR 0 3
62728: PUSH
62729: LD_INT 8
62731: GREATER
62732: OR
62733: IFFALSE 62737
// exit ;
62735: GO 62796
// if not range then
62737: LD_VAR 0 4
62741: NOT
62742: IFFALSE 62753
// range := - 12 ;
62744: LD_ADDR_VAR 0 4
62748: PUSH
62749: LD_INT 12
62751: NEG
62752: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62753: LD_VAR 0 1
62757: PPUSH
62758: LD_VAR 0 2
62762: PPUSH
62763: LD_VAR 0 3
62767: PPUSH
62768: LD_VAR 0 4
62772: PPUSH
62773: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62777: LD_VAR 0 1
62781: PPUSH
62782: LD_VAR 0 2
62786: PPUSH
62787: LD_VAR 0 3
62791: PPUSH
62792: CALL_OW 331
// end ;
62796: LD_VAR 0 5
62800: RET
// export function Video ( mode ) ; begin
62801: LD_INT 0
62803: PPUSH
// ingame_video = mode ;
62804: LD_ADDR_OWVAR 52
62808: PUSH
62809: LD_VAR 0 1
62813: ST_TO_ADDR
// interface_hidden = mode ;
62814: LD_ADDR_OWVAR 54
62818: PUSH
62819: LD_VAR 0 1
62823: ST_TO_ADDR
// end ;
62824: LD_VAR 0 2
62828: RET
// export function Join ( array , element ) ; begin
62829: LD_INT 0
62831: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62832: LD_ADDR_VAR 0 3
62836: PUSH
62837: LD_VAR 0 1
62841: PPUSH
62842: LD_VAR 0 1
62846: PUSH
62847: LD_INT 1
62849: PLUS
62850: PPUSH
62851: LD_VAR 0 2
62855: PPUSH
62856: CALL_OW 1
62860: ST_TO_ADDR
// end ;
62861: LD_VAR 0 3
62865: RET
// export function JoinUnion ( array , element ) ; begin
62866: LD_INT 0
62868: PPUSH
// result := array union element ;
62869: LD_ADDR_VAR 0 3
62873: PUSH
62874: LD_VAR 0 1
62878: PUSH
62879: LD_VAR 0 2
62883: UNION
62884: ST_TO_ADDR
// end ;
62885: LD_VAR 0 3
62889: RET
// export function GetBehemoths ( side ) ; begin
62890: LD_INT 0
62892: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62893: LD_ADDR_VAR 0 2
62897: PUSH
62898: LD_INT 22
62900: PUSH
62901: LD_VAR 0 1
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 31
62912: PUSH
62913: LD_INT 25
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PPUSH
62924: CALL_OW 69
62928: ST_TO_ADDR
// end ;
62929: LD_VAR 0 2
62933: RET
// export function Shuffle ( array ) ; var i , index ; begin
62934: LD_INT 0
62936: PPUSH
62937: PPUSH
62938: PPUSH
// result := [ ] ;
62939: LD_ADDR_VAR 0 2
62943: PUSH
62944: EMPTY
62945: ST_TO_ADDR
// if not array then
62946: LD_VAR 0 1
62950: NOT
62951: IFFALSE 62955
// exit ;
62953: GO 63054
// Randomize ;
62955: CALL_OW 10
// for i = array downto 1 do
62959: LD_ADDR_VAR 0 3
62963: PUSH
62964: DOUBLE
62965: LD_VAR 0 1
62969: INC
62970: ST_TO_ADDR
62971: LD_INT 1
62973: PUSH
62974: FOR_DOWNTO
62975: IFFALSE 63052
// begin index := rand ( 1 , array ) ;
62977: LD_ADDR_VAR 0 4
62981: PUSH
62982: LD_INT 1
62984: PPUSH
62985: LD_VAR 0 1
62989: PPUSH
62990: CALL_OW 12
62994: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62995: LD_ADDR_VAR 0 2
62999: PUSH
63000: LD_VAR 0 2
63004: PPUSH
63005: LD_VAR 0 2
63009: PUSH
63010: LD_INT 1
63012: PLUS
63013: PPUSH
63014: LD_VAR 0 1
63018: PUSH
63019: LD_VAR 0 4
63023: ARRAY
63024: PPUSH
63025: CALL_OW 2
63029: ST_TO_ADDR
// array := Delete ( array , index ) ;
63030: LD_ADDR_VAR 0 1
63034: PUSH
63035: LD_VAR 0 1
63039: PPUSH
63040: LD_VAR 0 4
63044: PPUSH
63045: CALL_OW 3
63049: ST_TO_ADDR
// end ;
63050: GO 62974
63052: POP
63053: POP
// end ;
63054: LD_VAR 0 2
63058: RET
// export function GetBaseMaterials ( base ) ; begin
63059: LD_INT 0
63061: PPUSH
// result := [ 0 , 0 , 0 ] ;
63062: LD_ADDR_VAR 0 2
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: LIST
63080: ST_TO_ADDR
// if not base then
63081: LD_VAR 0 1
63085: NOT
63086: IFFALSE 63090
// exit ;
63088: GO 63139
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63090: LD_ADDR_VAR 0 2
63094: PUSH
63095: LD_VAR 0 1
63099: PPUSH
63100: LD_INT 1
63102: PPUSH
63103: CALL_OW 275
63107: PUSH
63108: LD_VAR 0 1
63112: PPUSH
63113: LD_INT 2
63115: PPUSH
63116: CALL_OW 275
63120: PUSH
63121: LD_VAR 0 1
63125: PPUSH
63126: LD_INT 3
63128: PPUSH
63129: CALL_OW 275
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: LIST
63138: ST_TO_ADDR
// end ;
63139: LD_VAR 0 2
63143: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63144: LD_INT 0
63146: PPUSH
63147: PPUSH
// result := array ;
63148: LD_ADDR_VAR 0 3
63152: PUSH
63153: LD_VAR 0 1
63157: ST_TO_ADDR
// if size > 0 then
63158: LD_VAR 0 2
63162: PUSH
63163: LD_INT 0
63165: GREATER
63166: IFFALSE 63212
// for i := array downto size do
63168: LD_ADDR_VAR 0 4
63172: PUSH
63173: DOUBLE
63174: LD_VAR 0 1
63178: INC
63179: ST_TO_ADDR
63180: LD_VAR 0 2
63184: PUSH
63185: FOR_DOWNTO
63186: IFFALSE 63210
// result := Delete ( result , result ) ;
63188: LD_ADDR_VAR 0 3
63192: PUSH
63193: LD_VAR 0 3
63197: PPUSH
63198: LD_VAR 0 3
63202: PPUSH
63203: CALL_OW 3
63207: ST_TO_ADDR
63208: GO 63185
63210: POP
63211: POP
// end ;
63212: LD_VAR 0 3
63216: RET
// export function ComExit ( unit ) ; var tmp ; begin
63217: LD_INT 0
63219: PPUSH
63220: PPUSH
// if not IsInUnit ( unit ) then
63221: LD_VAR 0 1
63225: PPUSH
63226: CALL_OW 310
63230: NOT
63231: IFFALSE 63235
// exit ;
63233: GO 63295
// tmp := IsInUnit ( unit ) ;
63235: LD_ADDR_VAR 0 3
63239: PUSH
63240: LD_VAR 0 1
63244: PPUSH
63245: CALL_OW 310
63249: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63250: LD_VAR 0 3
63254: PPUSH
63255: CALL_OW 247
63259: PUSH
63260: LD_INT 2
63262: EQUAL
63263: IFFALSE 63276
// ComExitVehicle ( unit ) else
63265: LD_VAR 0 1
63269: PPUSH
63270: CALL_OW 121
63274: GO 63285
// ComExitBuilding ( unit ) ;
63276: LD_VAR 0 1
63280: PPUSH
63281: CALL_OW 122
// result := tmp ;
63285: LD_ADDR_VAR 0 2
63289: PUSH
63290: LD_VAR 0 3
63294: ST_TO_ADDR
// end ;
63295: LD_VAR 0 2
63299: RET
// export function ResetHc ; begin
63300: LD_INT 0
63302: PPUSH
// InitHc ;
63303: CALL_OW 19
// hc_importance := 0 ;
63307: LD_ADDR_OWVAR 32
63311: PUSH
63312: LD_INT 0
63314: ST_TO_ADDR
// end ;
63315: LD_VAR 0 1
63319: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63320: LD_INT 0
63322: PPUSH
63323: PPUSH
63324: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63325: LD_ADDR_VAR 0 6
63329: PUSH
63330: LD_VAR 0 1
63334: PUSH
63335: LD_VAR 0 3
63339: PLUS
63340: PUSH
63341: LD_INT 2
63343: DIV
63344: ST_TO_ADDR
// if _x < 0 then
63345: LD_VAR 0 6
63349: PUSH
63350: LD_INT 0
63352: LESS
63353: IFFALSE 63370
// _x := _x * - 1 ;
63355: LD_ADDR_VAR 0 6
63359: PUSH
63360: LD_VAR 0 6
63364: PUSH
63365: LD_INT 1
63367: NEG
63368: MUL
63369: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63370: LD_ADDR_VAR 0 7
63374: PUSH
63375: LD_VAR 0 2
63379: PUSH
63380: LD_VAR 0 4
63384: PLUS
63385: PUSH
63386: LD_INT 2
63388: DIV
63389: ST_TO_ADDR
// if _y < 0 then
63390: LD_VAR 0 7
63394: PUSH
63395: LD_INT 0
63397: LESS
63398: IFFALSE 63415
// _y := _y * - 1 ;
63400: LD_ADDR_VAR 0 7
63404: PUSH
63405: LD_VAR 0 7
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: MUL
63414: ST_TO_ADDR
// result := [ _x , _y ] ;
63415: LD_ADDR_VAR 0 5
63419: PUSH
63420: LD_VAR 0 6
63424: PUSH
63425: LD_VAR 0 7
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: ST_TO_ADDR
// end ;
63434: LD_VAR 0 5
63438: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63439: LD_INT 0
63441: PPUSH
63442: PPUSH
63443: PPUSH
63444: PPUSH
// task := GetTaskList ( unit ) ;
63445: LD_ADDR_VAR 0 7
63449: PUSH
63450: LD_VAR 0 1
63454: PPUSH
63455: CALL_OW 437
63459: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63460: LD_VAR 0 7
63464: NOT
63465: PUSH
63466: LD_VAR 0 1
63470: PPUSH
63471: LD_VAR 0 2
63475: PPUSH
63476: CALL_OW 308
63480: NOT
63481: AND
63482: IFFALSE 63486
// exit ;
63484: GO 63604
// if IsInArea ( unit , area ) then
63486: LD_VAR 0 1
63490: PPUSH
63491: LD_VAR 0 2
63495: PPUSH
63496: CALL_OW 308
63500: IFFALSE 63518
// begin ComMoveToArea ( unit , goAway ) ;
63502: LD_VAR 0 1
63506: PPUSH
63507: LD_VAR 0 3
63511: PPUSH
63512: CALL_OW 113
// exit ;
63516: GO 63604
// end ; if task [ 1 ] [ 1 ] <> M then
63518: LD_VAR 0 7
63522: PUSH
63523: LD_INT 1
63525: ARRAY
63526: PUSH
63527: LD_INT 1
63529: ARRAY
63530: PUSH
63531: LD_STRING M
63533: NONEQUAL
63534: IFFALSE 63538
// exit ;
63536: GO 63604
// x := task [ 1 ] [ 2 ] ;
63538: LD_ADDR_VAR 0 5
63542: PUSH
63543: LD_VAR 0 7
63547: PUSH
63548: LD_INT 1
63550: ARRAY
63551: PUSH
63552: LD_INT 2
63554: ARRAY
63555: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63556: LD_ADDR_VAR 0 6
63560: PUSH
63561: LD_VAR 0 7
63565: PUSH
63566: LD_INT 1
63568: ARRAY
63569: PUSH
63570: LD_INT 3
63572: ARRAY
63573: ST_TO_ADDR
// if InArea ( x , y , area ) then
63574: LD_VAR 0 5
63578: PPUSH
63579: LD_VAR 0 6
63583: PPUSH
63584: LD_VAR 0 2
63588: PPUSH
63589: CALL_OW 309
63593: IFFALSE 63604
// ComStop ( unit ) ;
63595: LD_VAR 0 1
63599: PPUSH
63600: CALL_OW 141
// end ;
63604: LD_VAR 0 4
63608: RET
// export function Abs ( value ) ; begin
63609: LD_INT 0
63611: PPUSH
// result := value ;
63612: LD_ADDR_VAR 0 2
63616: PUSH
63617: LD_VAR 0 1
63621: ST_TO_ADDR
// if value < 0 then
63622: LD_VAR 0 1
63626: PUSH
63627: LD_INT 0
63629: LESS
63630: IFFALSE 63647
// result := value * - 1 ;
63632: LD_ADDR_VAR 0 2
63636: PUSH
63637: LD_VAR 0 1
63641: PUSH
63642: LD_INT 1
63644: NEG
63645: MUL
63646: ST_TO_ADDR
// end ; end_of_file
63647: LD_VAR 0 2
63651: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
63652: LD_INT 0
63654: PPUSH
// ar_miner := 81 ;
63655: LD_ADDR_EXP 114
63659: PUSH
63660: LD_INT 81
63662: ST_TO_ADDR
// ar_crane := 88 ;
63663: LD_ADDR_EXP 113
63667: PUSH
63668: LD_INT 88
63670: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
63671: LD_ADDR_EXP 108
63675: PUSH
63676: LD_INT 89
63678: ST_TO_ADDR
// us_hack := 99 ;
63679: LD_ADDR_EXP 109
63683: PUSH
63684: LD_INT 99
63686: ST_TO_ADDR
// us_artillery := 97 ;
63687: LD_ADDR_EXP 110
63691: PUSH
63692: LD_INT 97
63694: ST_TO_ADDR
// ar_bio_bomb := 91 ;
63695: LD_ADDR_EXP 111
63699: PUSH
63700: LD_INT 91
63702: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
63703: LD_ADDR_EXP 112
63707: PUSH
63708: LD_INT 92
63710: ST_TO_ADDR
// ru_radar := 98 ;
63711: LD_ADDR_EXP 107
63715: PUSH
63716: LD_INT 98
63718: ST_TO_ADDR
// tech_Artillery := 80 ;
63719: LD_ADDR_EXP 115
63723: PUSH
63724: LD_INT 80
63726: ST_TO_ADDR
// tech_RadMat := 81 ;
63727: LD_ADDR_EXP 116
63731: PUSH
63732: LD_INT 81
63734: ST_TO_ADDR
// tech_BasicTools := 82 ;
63735: LD_ADDR_EXP 117
63739: PUSH
63740: LD_INT 82
63742: ST_TO_ADDR
// tech_Cargo := 83 ;
63743: LD_ADDR_EXP 118
63747: PUSH
63748: LD_INT 83
63750: ST_TO_ADDR
// tech_Track := 84 ;
63751: LD_ADDR_EXP 119
63755: PUSH
63756: LD_INT 84
63758: ST_TO_ADDR
// tech_Crane := 85 ;
63759: LD_ADDR_EXP 120
63763: PUSH
63764: LD_INT 85
63766: ST_TO_ADDR
// tech_Bulldozer := 86 ;
63767: LD_ADDR_EXP 121
63771: PUSH
63772: LD_INT 86
63774: ST_TO_ADDR
// tech_Hovercraft := 87 ;
63775: LD_ADDR_EXP 122
63779: PUSH
63780: LD_INT 87
63782: ST_TO_ADDR
// end ;
63783: LD_VAR 0 1
63787: RET
// every 1 do
63788: GO 63790
63790: DISABLE
// InitGlobalVariables ;
63791: CALL 63652 0 0
63795: END
