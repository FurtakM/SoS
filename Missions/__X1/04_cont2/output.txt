// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 1994 0 0
// PrepareArabian ;
  23: CALL 1234 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5594 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_OWVAR 67
 672: ARRAY
 673: PPUSH
 674: CALL 504 0 2
// for i := 1 to 2 do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_INT 2
 690: PUSH
 691: FOR_TO
 692: IFFALSE 729
// begin hc_class := 21 ;
 694: LD_ADDR_OWVAR 28
 698: PUSH
 699: LD_INT 21
 701: ST_TO_ADDR
// hc_gallery :=  ;
 702: LD_ADDR_OWVAR 33
 706: PUSH
 707: LD_STRING 
 709: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 691
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 782
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end ;
 780: GO 744
 782: POP
 783: POP
// for i := 1 to 2 do
 784: LD_ADDR_VAR 0 3
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 2
 796: PUSH
 797: FOR_TO
 798: IFFALSE 835
// begin hc_class := 13 ;
 800: LD_ADDR_OWVAR 28
 804: PUSH
 805: LD_INT 13
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 816: CALL_OW 44
 820: PPUSH
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 49
// end ;
 833: GO 797
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 2
 841: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
// if not observer or not unit then
 847: LD_VAR 0 1
 851: NOT
 852: PUSH
 853: LD_VAR 0 2
 857: NOT
 858: OR
 859: IFFALSE 863
// exit ;
 861: GO 911
// if not See ( GetSide ( observer ) , unit ) then
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 292
 882: NOT
 883: IFFALSE 887
// exit ;
 885: GO 911
// result := GetDistUnits ( observer , unit ) < 12 ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 296
 906: PUSH
 907: LD_INT 12
 909: LESS
 910: ST_TO_ADDR
// end ;
 911: LD_VAR 0 3
 915: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 916: LD_INT 0
 918: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: CALL_OW 488
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ;
1003: LD_VAR 0 4
1007: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
1014: PPUSH
// if not unit then
1015: LD_VAR 0 1
1019: NOT
1020: IFFALSE 1024
// exit ;
1022: GO 1229
// side := GetSide ( unit ) ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 255
1038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_VAR 0 4
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_VAR 0 2
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 69
1076: ST_TO_ADDR
// if not tmp then
1077: LD_VAR 0 5
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1229
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 5
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 34301 0 4
1111: ST_TO_ADDR
// places := 1 ;
1112: LD_ADDR_VAR 0 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 7
1148: PUSH
1149: LD_INT 8
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1173
// places := 6 ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// for i in tmp do
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: LD_VAR 0 5
1182: PUSH
1183: FOR_IN
1184: IFFALSE 1227
// begin if UnitsInside ( i ) - places <= 0 then
1186: LD_VAR 0 6
1190: PPUSH
1191: CALL_OW 313
1195: PUSH
1196: LD_VAR 0 7
1200: MINUS
1201: PUSH
1202: LD_INT 0
1204: LESSEQUAL
1205: IFFALSE 1211
// continue else
1207: GO 1183
1209: GO 1225
// begin result := i ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_VAR 0 6
1220: ST_TO_ADDR
// exit ;
1221: POP
1222: POP
1223: GO 1229
// end ; end ;
1225: GO 1183
1227: POP
1228: POP
// end ; end_of_file
1229: LD_VAR 0 3
1233: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1234: LD_INT 0
1236: PPUSH
1237: PPUSH
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// uc_nation := 2 ;
1246: LD_ADDR_OWVAR 21
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1254: LD_ADDR_EXP 18
1258: PUSH
1259: LD_STRING Heike
1261: PPUSH
1262: LD_EXP 1
1266: NOT
1267: PPUSH
1268: LD_EXP 2
1272: PPUSH
1273: CALL 28880 0 3
1277: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1278: LD_ADDR_EXP 21
1282: PUSH
1283: LD_STRING Ibrahim
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL 28880 0 3
1301: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1302: LD_ADDR_EXP 19
1306: PUSH
1307: LD_STRING Givi
1309: PPUSH
1310: LD_EXP 1
1314: NOT
1315: PPUSH
1316: LD_EXP 2
1320: PPUSH
1321: CALL 28880 0 3
1325: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1326: LD_ADDR_EXP 22
1330: PUSH
1331: LD_STRING Kamil
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 2
1344: PPUSH
1345: CALL 28880 0 3
1349: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1350: LD_ADDR_EXP 23
1354: PUSH
1355: LD_STRING Kaia
1357: PPUSH
1358: LD_EXP 1
1362: NOT
1363: PPUSH
1364: LD_EXP 2
1368: PPUSH
1369: CALL 28880 0 3
1373: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1374: LD_ADDR_EXP 24
1378: PUSH
1379: LD_STRING Sophia
1381: PPUSH
1382: LD_EXP 1
1386: NOT
1387: PPUSH
1388: LD_EXP 2
1392: PPUSH
1393: CALL 28880 0 3
1397: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1398: LD_ADDR_EXP 25
1402: PUSH
1403: LD_STRING Markov
1405: PPUSH
1406: LD_EXP 1
1410: NOT
1411: PPUSH
1412: LD_EXP 2
1416: PPUSH
1417: CALL 28880 0 3
1421: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1422: LD_ADDR_EXP 28
1426: PUSH
1427: LD_STRING Aviradze
1429: PPUSH
1430: LD_EXP 1
1434: NOT
1435: PPUSH
1436: LD_EXP 2
1440: PPUSH
1441: CALL 28880 0 3
1445: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1446: LD_ADDR_EXP 27
1450: PUSH
1451: LD_STRING Kurt
1453: PPUSH
1454: LD_EXP 1
1458: NOT
1459: PPUSH
1460: LD_EXP 2
1464: PPUSH
1465: CALL 28880 0 3
1469: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1470: LD_ADDR_EXP 20
1474: PUSH
1475: LD_STRING Mike
1477: PPUSH
1478: LD_EXP 1
1482: NOT
1483: PPUSH
1484: LD_EXP 2
1488: PPUSH
1489: CALL 28880 0 3
1493: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1494: LD_ADDR_EXP 29
1498: PUSH
1499: LD_STRING 04_1_others
1501: PPUSH
1502: CALL_OW 31
1506: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1507: LD_ADDR_EXP 31
1511: PUSH
1512: LD_STRING 04_1_apes
1514: PPUSH
1515: CALL_OW 31
1519: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_STRING 04_1_Vehicles
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// uc_side := 5 ;
1535: LD_ADDR_OWVAR 20
1539: PUSH
1540: LD_INT 5
1542: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1543: LD_ADDR_EXP 26
1547: PUSH
1548: LD_STRING Abdul
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: LD_STRING 
1556: PPUSH
1557: CALL 28880 0 3
1561: ST_TO_ADDR
// end ;
1562: LD_VAR 0 1
1566: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1567: LD_STRING 04_1_KaganCaptured
1569: PPUSH
1570: LD_INT 0
1572: PPUSH
1573: CALL_OW 30
1577: PUSH
1578: LD_INT 22
1580: PUSH
1581: LD_INT 5
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PPUSH
1588: CALL_OW 69
1592: NOT
1593: AND
1594: PUSH
1595: LD_INT 124
1597: PPUSH
1598: LD_INT 26
1600: PPUSH
1601: CALL_OW 428
1605: PUSH
1606: LD_INT 0
1608: EQUAL
1609: PUSH
1610: LD_INT 124
1612: PPUSH
1613: LD_INT 26
1615: PPUSH
1616: CALL_OW 428
1620: PPUSH
1621: CALL_OW 255
1625: PUSH
1626: LD_INT 2
1628: EQUAL
1629: XOR
1630: AND
1631: IFFALSE 1991
1633: GO 1635
1635: DISABLE
1636: LD_INT 0
1638: PPUSH
1639: PPUSH
// begin enable ;
1640: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1641: LD_EXP 33
1645: NOT
1646: PUSH
1647: LD_EXP 33
1651: PUSH
1652: LD_INT 4
1654: GREATER
1655: OR
1656: IFFALSE 1666
// cargoCounter := 1 ;
1658: LD_ADDR_EXP 33
1662: PUSH
1663: LD_INT 1
1665: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1666: LD_ADDR_VAR 0 2
1670: PUSH
1671: LD_INT 142
1673: PUSH
1674: LD_INT 15
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 129
1683: PUSH
1684: LD_INT 11
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 138
1693: PUSH
1694: LD_INT 9
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 133
1703: PUSH
1704: LD_INT 10
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: ST_TO_ADDR
// uc_side := 5 ;
1717: LD_ADDR_OWVAR 20
1721: PUSH
1722: LD_INT 5
1724: ST_TO_ADDR
// uc_nation := 2 ;
1725: LD_ADDR_OWVAR 21
1729: PUSH
1730: LD_INT 2
1732: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1733: LD_INT 5
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: LD_INT 13
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 32
1750: PPUSH
1751: LD_INT 70
1753: PPUSH
1754: CALL 336 0 7
// veh := CreateVehicle ;
1758: LD_ADDR_VAR 0 1
1762: PUSH
1763: CALL_OW 45
1767: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1768: LD_VAR 0 1
1772: PPUSH
1773: LD_INT 3
1775: PPUSH
1776: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
1780: LD_VAR 0 1
1784: PPUSH
1785: LD_INT 8
1787: PPUSH
1788: LD_INT 0
1790: PPUSH
1791: CALL_OW 49
// if not cargoDriver then
1795: LD_EXP 32
1799: NOT
1800: IFFALSE 1825
// begin PrepareHuman ( false , 1 , 3 ) ;
1802: LD_INT 0
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_INT 3
1810: PPUSH
1811: CALL_OW 380
// cargoDriver := CreateHuman ;
1815: LD_ADDR_EXP 32
1819: PUSH
1820: CALL_OW 44
1824: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
1825: LD_EXP 32
1829: PPUSH
1830: LD_VAR 0 1
1834: PPUSH
1835: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
1839: LD_VAR 0 1
1843: PPUSH
1844: LD_INT 2
1846: PPUSH
1847: LD_INT 100
1849: PPUSH
1850: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
1854: LD_VAR 0 1
1858: PPUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 33
1868: ARRAY
1869: PUSH
1870: LD_INT 1
1872: ARRAY
1873: PPUSH
1874: LD_VAR 0 2
1878: PUSH
1879: LD_EXP 33
1883: ARRAY
1884: PUSH
1885: LD_INT 2
1887: ARRAY
1888: PPUSH
1889: CALL_OW 111
// AddComUnload ( veh ) ;
1893: LD_VAR 0 1
1897: PPUSH
1898: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
1902: LD_VAR 0 1
1906: PPUSH
1907: LD_INT 133
1909: PPUSH
1910: LD_INT 2
1912: PPUSH
1913: CALL_OW 171
// wait ( 0 0$5 ) ;
1917: LD_INT 175
1919: PPUSH
1920: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1924: LD_INT 35
1926: PPUSH
1927: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
1931: LD_VAR 0 1
1935: PPUSH
1936: LD_INT 133
1938: PPUSH
1939: LD_INT 2
1941: PPUSH
1942: CALL_OW 307
1946: PUSH
1947: LD_VAR 0 1
1951: PPUSH
1952: LD_INT 8
1954: PPUSH
1955: CALL_OW 308
1959: OR
1960: IFFALSE 1924
// RemoveUnit ( cargoDriver ) ;
1962: LD_EXP 32
1966: PPUSH
1967: CALL_OW 64
// RemoveUnit ( veh ) ;
1971: LD_VAR 0 1
1975: PPUSH
1976: CALL_OW 64
// if tick >= 20 20$00 then
1980: LD_OWVAR 1
1984: PUSH
1985: LD_INT 42000
1987: GREATEREQUAL
1988: IFFALSE 1991
// disable ;
1990: DISABLE
// end ; end_of_file
1991: PPOPN 2
1993: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
1994: LD_INT 0
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
2001: PPUSH
2002: PPUSH
2003: PPUSH
2004: PPUSH
// uc_side := 3 ;
2005: LD_ADDR_OWVAR 20
2009: PUSH
2010: LD_INT 3
2012: ST_TO_ADDR
// uc_nation := 3 ;
2013: LD_ADDR_OWVAR 21
2017: PUSH
2018: LD_INT 3
2020: ST_TO_ADDR
// ruForce := [ ] ;
2021: LD_ADDR_EXP 37
2025: PUSH
2026: EMPTY
2027: ST_TO_ADDR
// ruMech := [ ] ;
2028: LD_ADDR_EXP 39
2032: PUSH
2033: EMPTY
2034: ST_TO_ADDR
// ruEng := [ ] ;
2035: LD_ADDR_EXP 38
2039: PUSH
2040: EMPTY
2041: ST_TO_ADDR
// ruSci := [ ] ;
2042: LD_ADDR_EXP 40
2046: PUSH
2047: EMPTY
2048: ST_TO_ADDR
// ruMobile := [ ] ;
2049: LD_ADDR_EXP 41
2053: PUSH
2054: EMPTY
2055: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2056: LD_ADDR_EXP 34
2060: PUSH
2061: LD_STRING Burlak
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: LD_STRING 
2069: PPUSH
2070: CALL 28880 0 3
2074: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2075: LD_ADDR_EXP 35
2079: PUSH
2080: LD_STRING Gaydar
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: LD_STRING 
2088: PPUSH
2089: CALL 28880 0 3
2093: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2094: LD_ADDR_EXP 36
2098: PUSH
2099: LD_STRING Kuzmov
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: LD_STRING 
2107: PPUSH
2108: CALL 28880 0 3
2112: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2113: LD_EXP 36
2117: PPUSH
2118: LD_INT 200
2120: PPUSH
2121: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2125: LD_INT 200
2127: PPUSH
2128: LD_STRING chuikov
2130: PPUSH
2131: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2135: LD_INT 200
2137: PPUSH
2138: CALL_OW 274
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 800
2148: PUSH
2149: LD_INT 1000
2151: PUSH
2152: LD_INT 1250
2154: PUSH
2155: LD_INT 1300
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: PUSH
2164: LD_OWVAR 67
2168: ARRAY
2169: PPUSH
2170: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2174: LD_INT 200
2176: PPUSH
2177: CALL_OW 274
2181: PPUSH
2182: LD_INT 2
2184: PPUSH
2185: LD_INT 160
2187: PPUSH
2188: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2192: LD_INT 225
2194: PPUSH
2195: CALL_OW 274
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 200
2205: PPUSH
2206: CALL_OW 277
// oil := 150 ;
2210: LD_ADDR_VAR 0 9
2214: PUSH
2215: LD_INT 150
2217: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2218: LD_EXP 5
2222: PUSH
2223: LD_INT 94500
2225: PUSH
2226: LD_INT 84000
2228: PUSH
2229: LD_INT 73500
2231: PUSH
2232: LD_INT 67200
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: PUSH
2241: LD_OWVAR 67
2245: ARRAY
2246: GREATEREQUAL
2247: IFFALSE 2402
// begin oil := 450 ;
2249: LD_ADDR_VAR 0 9
2253: PUSH
2254: LD_INT 450
2256: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2257: LD_ADDR_VAR 0 7
2261: PUSH
2262: LD_INT 123
2264: PUSH
2265: LD_INT 17
2267: PUSH
2268: LD_INT 3
2270: PUSH
2271: LD_INT 31
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 152
2282: PUSH
2283: LD_INT 38
2285: PUSH
2286: LD_INT 3
2288: PUSH
2289: LD_INT 31
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 81
2300: PUSH
2301: LD_INT 6
2303: PUSH
2304: LD_INT 4
2306: PUSH
2307: LD_INT 31
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 113
2318: PUSH
2319: LD_INT 67
2321: PUSH
2322: LD_INT 4
2324: PUSH
2325: LD_INT 32
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: ST_TO_ADDR
// for i in tmp do
2340: LD_ADDR_VAR 0 4
2344: PUSH
2345: LD_VAR 0 7
2349: PUSH
2350: FOR_IN
2351: IFFALSE 2400
// begin bc_type := i [ 4 ] ;
2353: LD_ADDR_OWVAR 42
2357: PUSH
2358: LD_VAR 0 4
2362: PUSH
2363: LD_INT 4
2365: ARRAY
2366: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: LD_VAR 0 4
2380: PUSH
2381: LD_INT 2
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 4
2389: PUSH
2390: LD_INT 3
2392: ARRAY
2393: PPUSH
2394: CALL_OW 47
// end ;
2398: GO 2350
2400: POP
2401: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2402: LD_INT 225
2404: PPUSH
2405: CALL_OW 274
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: LD_VAR 0 9
2417: PPUSH
2418: CALL_OW 277
// if Difficulty > 1 then
2422: LD_OWVAR 67
2426: PUSH
2427: LD_INT 1
2429: GREATER
2430: IFFALSE 2525
// begin bc_type := b_bunker ;
2432: LD_ADDR_OWVAR 42
2436: PUSH
2437: LD_INT 32
2439: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2440: LD_ADDR_VAR 0 7
2444: PUSH
2445: LD_INT 121
2447: PUSH
2448: LD_INT 85
2450: PUSH
2451: LD_INT 5
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 93
2461: PUSH
2462: LD_INT 72
2464: PUSH
2465: LD_INT 1
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: LIST
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: ST_TO_ADDR
// for i in tmp do
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: LD_VAR 0 7
2486: PUSH
2487: FOR_IN
2488: IFFALSE 2523
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2490: LD_VAR 0 4
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: PPUSH
2499: LD_VAR 0 4
2503: PUSH
2504: LD_INT 2
2506: ARRAY
2507: PPUSH
2508: LD_VAR 0 4
2512: PUSH
2513: LD_INT 3
2515: ARRAY
2516: PPUSH
2517: CALL_OW 47
2521: GO 2487
2523: POP
2524: POP
// end ; base := GetBase ( ruMainBase ) ;
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: LD_INT 200
2532: PPUSH
2533: CALL_OW 274
2537: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2538: LD_ADDR_VAR 0 3
2542: PUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: CALL_OW 417
2552: ST_TO_ADDR
// for b in blist do
2553: LD_ADDR_VAR 0 5
2557: PUSH
2558: LD_VAR 0 3
2562: PUSH
2563: FOR_IN
2564: IFFALSE 3015
// begin if b [ 1 ] = b_factory then
2566: LD_VAR 0 5
2570: PUSH
2571: LD_INT 1
2573: ARRAY
2574: PUSH
2575: LD_INT 3
2577: EQUAL
2578: IFFALSE 2729
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2580: LD_ADDR_VAR 0 8
2584: PUSH
2585: LD_VAR 0 5
2589: PUSH
2590: LD_INT 2
2592: ARRAY
2593: PPUSH
2594: LD_VAR 0 5
2598: PUSH
2599: LD_INT 3
2601: ARRAY
2602: PPUSH
2603: CALL_OW 428
2607: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2608: LD_ADDR_VAR 0 4
2612: PUSH
2613: DOUBLE
2614: LD_INT 1
2616: DEC
2617: ST_TO_ADDR
2618: LD_INT 2
2620: PUSH
2621: LD_INT 2
2623: PUSH
2624: LD_OWVAR 67
2628: PLUS
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: LD_EXP 10
2638: PUSH
2639: LD_INT 3
2641: GREATER
2642: PUSH
2643: LD_INT 1
2645: PLUS
2646: ARRAY
2647: PUSH
2648: FOR_TO
2649: IFFALSE 2725
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2651: LD_INT 0
2653: PPUSH
2654: LD_INT 3
2656: PPUSH
2657: LD_INT 1
2659: PUSH
2660: LD_OWVAR 67
2664: PLUS
2665: PPUSH
2666: CALL_OW 380
// un := CreateHuman ;
2670: LD_ADDR_VAR 0 6
2674: PUSH
2675: CALL_OW 44
2679: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2680: LD_ADDR_EXP 39
2684: PUSH
2685: LD_EXP 39
2689: PPUSH
2690: LD_EXP 39
2694: PUSH
2695: LD_INT 1
2697: PLUS
2698: PPUSH
2699: LD_VAR 0 6
2703: PPUSH
2704: CALL_OW 1
2708: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2709: LD_VAR 0 6
2713: PPUSH
2714: LD_VAR 0 8
2718: PPUSH
2719: CALL_OW 52
// end ;
2723: GO 2648
2725: POP
2726: POP
// end else
2727: GO 3013
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2729: LD_VAR 0 5
2733: PUSH
2734: LD_INT 1
2736: ARRAY
2737: PUSH
2738: LD_INT 6
2740: PUSH
2741: LD_INT 7
2743: PUSH
2744: LD_INT 8
2746: PUSH
2747: LD_INT 10
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: IN
2756: IFFALSE 2866
// begin for i := 1 to 2 do
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: DOUBLE
2764: LD_INT 1
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 2
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2862
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2774: LD_INT 0
2776: PPUSH
2777: LD_INT 4
2779: PPUSH
2780: LD_OWVAR 67
2784: PPUSH
2785: CALL_OW 380
// un := CreateHuman ;
2789: LD_ADDR_VAR 0 6
2793: PUSH
2794: CALL_OW 44
2798: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
2799: LD_ADDR_EXP 40
2803: PUSH
2804: LD_EXP 40
2808: PPUSH
2809: LD_EXP 40
2813: PUSH
2814: LD_INT 1
2816: PLUS
2817: PPUSH
2818: LD_VAR 0 6
2822: PPUSH
2823: CALL_OW 1
2827: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2828: LD_VAR 0 6
2832: PPUSH
2833: LD_VAR 0 5
2837: PUSH
2838: LD_INT 2
2840: ARRAY
2841: PPUSH
2842: LD_VAR 0 5
2846: PUSH
2847: LD_INT 3
2849: ARRAY
2850: PPUSH
2851: CALL_OW 428
2855: PPUSH
2856: CALL_OW 52
// end ;
2860: GO 2771
2862: POP
2863: POP
// end else
2864: GO 3013
// if b [ 1 ] = b_warehouse then
2866: LD_VAR 0 5
2870: PUSH
2871: LD_INT 1
2873: ARRAY
2874: PUSH
2875: LD_INT 1
2877: EQUAL
2878: IFFALSE 3013
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 1
2892: PUSH
2893: LD_INT 1
2895: PUSH
2896: LD_OWVAR 67
2900: PLUS
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_EXP 10
2910: PUSH
2911: LD_INT 3
2913: GREATER
2914: PUSH
2915: LD_INT 1
2917: PLUS
2918: ARRAY
2919: PUSH
2920: FOR_TO
2921: IFFALSE 3011
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2923: LD_INT 0
2925: PPUSH
2926: LD_INT 2
2928: PPUSH
2929: LD_OWVAR 67
2933: PPUSH
2934: CALL_OW 380
// un := CreateHuman ;
2938: LD_ADDR_VAR 0 6
2942: PUSH
2943: CALL_OW 44
2947: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
2948: LD_ADDR_EXP 38
2952: PUSH
2953: LD_EXP 38
2957: PPUSH
2958: LD_EXP 38
2962: PUSH
2963: LD_INT 1
2965: PLUS
2966: PPUSH
2967: LD_VAR 0 6
2971: PPUSH
2972: CALL_OW 1
2976: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2977: LD_VAR 0 6
2981: PPUSH
2982: LD_VAR 0 5
2986: PUSH
2987: LD_INT 2
2989: ARRAY
2990: PPUSH
2991: LD_VAR 0 5
2995: PUSH
2996: LD_INT 3
2998: ARRAY
2999: PPUSH
3000: CALL_OW 428
3004: PPUSH
3005: CALL_OW 52
// end ;
3009: GO 2920
3011: POP
3012: POP
// end ; end ;
3013: GO 2563
3015: POP
3016: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: LD_INT 22
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 21
3034: PUSH
3035: LD_INT 3
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// for b in blist do
3051: LD_ADDR_VAR 0 5
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3084
// SetBLevel ( b , 3 + Difficulty ) ;
3064: LD_VAR 0 5
3068: PPUSH
3069: LD_INT 3
3071: PUSH
3072: LD_OWVAR 67
3076: PLUS
3077: PPUSH
3078: CALL_OW 241
3082: GO 3061
3084: POP
3085: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3086: LD_ADDR_VAR 0 3
3090: PUSH
3091: LD_INT 22
3093: PUSH
3094: LD_INT 3
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 30
3103: PUSH
3104: LD_INT 32
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PPUSH
3115: CALL_OW 69
3119: ST_TO_ADDR
// for b in blist do
3120: LD_ADDR_VAR 0 5
3124: PUSH
3125: LD_VAR 0 3
3129: PUSH
3130: FOR_IN
3131: IFFALSE 3240
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3133: LD_INT 0
3135: PPUSH
3136: LD_INT 1
3138: PPUSH
3139: LD_INT 1
3141: PUSH
3142: LD_OWVAR 67
3146: PLUS
3147: PPUSH
3148: CALL_OW 380
// un := CreateHuman ;
3152: LD_ADDR_VAR 0 6
3156: PUSH
3157: CALL_OW 44
3161: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3162: LD_ADDR_EXP 37
3166: PUSH
3167: LD_EXP 37
3171: PPUSH
3172: LD_EXP 37
3176: PUSH
3177: LD_INT 1
3179: PLUS
3180: PPUSH
3181: LD_VAR 0 6
3185: PPUSH
3186: CALL_OW 1
3190: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3191: LD_VAR 0 6
3195: PPUSH
3196: LD_VAR 0 5
3200: PPUSH
3201: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3205: LD_VAR 0 5
3209: PPUSH
3210: LD_INT 44
3212: PUSH
3213: LD_INT 43
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: LD_VAR 0 5
3224: PUSH
3225: LD_INT 2
3227: MOD
3228: PUSH
3229: LD_INT 1
3231: PLUS
3232: ARRAY
3233: PPUSH
3234: CALL_OW 431
// end ;
3238: GO 3130
3240: POP
3241: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3242: LD_ADDR_VAR 0 3
3246: PUSH
3247: LD_INT 22
3249: PUSH
3250: LD_INT 3
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 30
3259: PUSH
3260: LD_INT 31
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PPUSH
3271: CALL_OW 69
3275: ST_TO_ADDR
// for b in blist do
3276: LD_ADDR_VAR 0 5
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: FOR_IN
3287: IFFALSE 3386
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3289: LD_INT 0
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 1
3297: PUSH
3298: LD_OWVAR 67
3302: PLUS
3303: PPUSH
3304: CALL_OW 380
// un := CreateHuman ;
3308: LD_ADDR_VAR 0 6
3312: PUSH
3313: CALL_OW 44
3317: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3318: LD_ADDR_EXP 37
3322: PUSH
3323: LD_EXP 37
3327: PPUSH
3328: LD_EXP 37
3332: PUSH
3333: LD_INT 1
3335: PLUS
3336: PPUSH
3337: LD_VAR 0 6
3341: PPUSH
3342: CALL_OW 1
3346: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3347: LD_VAR 0 6
3351: PPUSH
3352: LD_VAR 0 5
3356: PPUSH
3357: CALL_OW 254
3361: PUSH
3362: LD_INT 3
3364: PLUS
3365: PPUSH
3366: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3370: LD_VAR 0 6
3374: PPUSH
3375: LD_VAR 0 5
3379: PPUSH
3380: CALL_OW 52
// end ;
3384: GO 3286
3386: POP
3387: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 2
3405: PUSH
3406: LD_INT 30
3408: PUSH
3409: LD_INT 4
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: LD_INT 30
3418: PUSH
3419: LD_INT 5
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PPUSH
3435: CALL_OW 69
3439: ST_TO_ADDR
// for b in blist do
3440: LD_ADDR_VAR 0 5
3444: PUSH
3445: LD_VAR 0 3
3449: PUSH
3450: FOR_IN
3451: IFFALSE 3547
// begin for i := 1 to 2 do
3453: LD_ADDR_VAR 0 4
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 2
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3543
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_OWVAR 67
3482: PLUS
3483: PPUSH
3484: CALL_OW 380
// un := CreateHuman ;
3488: LD_ADDR_VAR 0 6
3492: PUSH
3493: CALL_OW 44
3497: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3498: LD_ADDR_EXP 37
3502: PUSH
3503: LD_EXP 37
3507: PPUSH
3508: LD_EXP 37
3512: PUSH
3513: LD_INT 1
3515: PLUS
3516: PPUSH
3517: LD_VAR 0 6
3521: PPUSH
3522: CALL_OW 1
3526: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3527: LD_VAR 0 6
3531: PPUSH
3532: LD_VAR 0 5
3536: PPUSH
3537: CALL_OW 52
// end ;
3541: GO 3466
3543: POP
3544: POP
// end ;
3545: GO 3450
3547: POP
3548: POP
// if ibrahimOnRuSide then
3549: LD_EXP 3
3553: IFFALSE 3651
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3555: LD_ADDR_EXP 21
3559: PUSH
3560: LD_STRING IbrahimRu
3562: PPUSH
3563: LD_INT 0
3565: PPUSH
3566: LD_STRING 
3568: PPUSH
3569: CALL 28880 0 3
3573: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3574: LD_EXP 21
3578: PPUSH
3579: LD_INT 121
3581: PPUSH
3582: LD_INT 78
3584: PPUSH
3585: LD_INT 0
3587: PPUSH
3588: CALL_OW 48
// ComHold ( Ibrahim ) ;
3592: LD_EXP 21
3596: PPUSH
3597: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_INT 2
3609: PPUSH
3610: CALL_OW 380
// ruSol := CreateHuman ;
3614: LD_ADDR_EXP 42
3618: PUSH
3619: CALL_OW 44
3623: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3624: LD_EXP 42
3628: PPUSH
3629: LD_INT 121
3631: PPUSH
3632: LD_INT 75
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: CALL_OW 48
// ComHold ( ruSol ) ;
3642: LD_EXP 42
3646: PPUSH
3647: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3651: LD_ADDR_VAR 0 4
3655: PUSH
3656: DOUBLE
3657: LD_INT 1
3659: DEC
3660: ST_TO_ADDR
3661: LD_INT 2
3663: PUSH
3664: LD_INT 2
3666: PUSH
3667: LD_OWVAR 67
3671: PLUS
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_EXP 10
3681: PUSH
3682: LD_INT 3
3684: GREATER
3685: PUSH
3686: LD_INT 1
3688: PLUS
3689: ARRAY
3690: PUSH
3691: FOR_TO
3692: IFFALSE 3761
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3694: LD_VAR 0 8
3698: PPUSH
3699: LD_INT 21
3701: PUSH
3702: LD_INT 23
3704: PUSH
3705: LD_INT 24
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PUSH
3713: LD_VAR 0 4
3717: PUSH
3718: LD_INT 3
3720: MOD
3721: PUSH
3722: LD_INT 1
3724: PLUS
3725: ARRAY
3726: PPUSH
3727: LD_INT 1
3729: PPUSH
3730: LD_INT 1
3732: PPUSH
3733: LD_INT 43
3735: PUSH
3736: LD_INT 44
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 1
3745: PPUSH
3746: LD_INT 2
3748: PPUSH
3749: CALL_OW 12
3753: ARRAY
3754: PPUSH
3755: CALL_OW 185
3759: GO 3691
3761: POP
3762: POP
// end ;
3763: LD_VAR 0 1
3767: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3768: LD_EXP 41
3772: PUSH
3773: LD_EXP 4
3777: NOT
3778: AND
3779: IFFALSE 4266
3781: GO 3783
3783: DISABLE
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
// begin enable ;
3791: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
3792: LD_ADDR_VAR 0 2
3796: PUSH
3797: LD_EXP 41
3801: PPUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PPUSH
3812: CALL_OW 72
3816: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
3817: LD_ADDR_VAR 0 4
3821: PUSH
3822: LD_INT 81
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: LD_INT 2
3834: PUSH
3835: LD_INT 95
3837: PUSH
3838: LD_INT 4
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 95
3847: PUSH
3848: LD_INT 5
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 95
3857: PUSH
3858: LD_INT 6
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: PUSH
3865: LD_INT 95
3867: PUSH
3868: LD_INT 7
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PPUSH
3886: CALL_OW 69
3890: ST_TO_ADDR
// for i in filter do
3891: LD_ADDR_VAR 0 1
3895: PUSH
3896: LD_VAR 0 2
3900: PUSH
3901: FOR_IN
3902: IFFALSE 4264
// begin tmp := IsDrivenBy ( i ) ;
3904: LD_ADDR_VAR 0 3
3908: PUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 311
3918: ST_TO_ADDR
// if not tmp then
3919: LD_VAR 0 3
3923: NOT
3924: IFFALSE 3928
// continue ;
3926: GO 3901
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
3928: LD_VAR 0 1
3932: PPUSH
3933: CALL_OW 261
3937: PUSH
3938: LD_INT 90
3940: GREATER
3941: PUSH
3942: LD_VAR 0 1
3946: PPUSH
3947: CALL_OW 110
3951: PUSH
3952: LD_INT 2
3954: EQUAL
3955: AND
3956: IFFALSE 3972
// SetTag ( i , 0 ) else
3958: LD_VAR 0 1
3962: PPUSH
3963: LD_INT 0
3965: PPUSH
3966: CALL_OW 109
3970: GO 4015
// if GetTag ( i ) = 2 then
3972: LD_VAR 0 1
3976: PPUSH
3977: CALL_OW 110
3981: PUSH
3982: LD_INT 2
3984: EQUAL
3985: IFFALSE 4015
// begin x := rand ( 1 , 2 ) ;
3987: LD_ADDR_VAR 0 5
3991: PUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 2
3997: PPUSH
3998: CALL_OW 12
4002: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4003: LD_VAR 0 1
4007: PPUSH
4008: LD_INT 200
4010: PPUSH
4011: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4015: LD_VAR 0 1
4019: PPUSH
4020: CALL_OW 256
4024: PUSH
4025: LD_INT 600
4027: GREATEREQUAL
4028: PUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: CALL_OW 110
4038: NOT
4039: AND
4040: IFFALSE 4066
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4042: LD_VAR 0 1
4046: PPUSH
4047: LD_VAR 0 4
4051: PPUSH
4052: LD_VAR 0 1
4056: PPUSH
4057: CALL_OW 74
4061: PPUSH
4062: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4066: LD_VAR 0 1
4070: PPUSH
4071: CALL_OW 256
4075: PUSH
4076: LD_INT 600
4078: LESS
4079: PUSH
4080: LD_VAR 0 1
4084: PPUSH
4085: CALL_OW 110
4089: NOT
4090: AND
4091: IFFALSE 4120
// begin SetTag ( i , 1 ) ;
4093: LD_VAR 0 1
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4105: LD_VAR 0 1
4109: PPUSH
4110: LD_INT 112
4112: PPUSH
4113: LD_INT 119
4115: PPUSH
4116: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4120: LD_VAR 0 1
4124: PPUSH
4125: CALL_OW 110
4129: PUSH
4130: LD_INT 1
4132: EQUAL
4133: PUSH
4134: LD_VAR 0 1
4138: PPUSH
4139: LD_INT 112
4141: PPUSH
4142: LD_INT 119
4144: PPUSH
4145: CALL_OW 297
4149: PUSH
4150: LD_INT 9
4152: LESS
4153: AND
4154: PUSH
4155: LD_VAR 0 3
4159: AND
4160: IFFALSE 4262
// begin ComExitVehicle ( tmp ) ;
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4171: LD_VAR 0 3
4175: PPUSH
4176: LD_VAR 0 1
4180: PPUSH
4181: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4185: LD_INT 35
4187: PPUSH
4188: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4192: LD_VAR 0 1
4196: PPUSH
4197: CALL_OW 256
4201: PUSH
4202: LD_INT 1000
4204: EQUAL
4205: IFFALSE 4185
// ComEnterUnit ( tmp , i ) ;
4207: LD_VAR 0 3
4211: PPUSH
4212: LD_VAR 0 1
4216: PPUSH
4217: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4221: LD_VAR 0 1
4225: PPUSH
4226: CALL_OW 261
4230: PUSH
4231: LD_INT 50
4233: LESSEQUAL
4234: IFFALSE 4250
// SetTag ( i , 2 ) else
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 2
4243: PPUSH
4244: CALL_OW 109
4248: GO 4262
// SetTag ( i , 0 ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_INT 0
4257: PPUSH
4258: CALL_OW 109
// end ; end ;
4262: GO 3901
4264: POP
4265: POP
// end ;
4266: PPOPN 5
4268: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4269: LD_EXP 4
4273: NOT
4274: PUSH
4275: LD_EXP 38
4279: AND
4280: IFFALSE 4541
4282: GO 4284
4284: DISABLE
4285: LD_INT 0
4287: PPUSH
4288: PPUSH
4289: PPUSH
4290: PPUSH
// begin enable ;
4291: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4292: LD_ADDR_VAR 0 2
4296: PUSH
4297: LD_INT 3
4299: PPUSH
4300: LD_INT 22
4302: PUSH
4303: LD_INT 3
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: LD_INT 21
4312: PUSH
4313: LD_INT 3
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: PUSH
4320: LD_INT 3
4322: PUSH
4323: LD_INT 24
4325: PUSH
4326: LD_INT 1000
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: PPUSH
4342: CALL_OW 70
4346: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4347: LD_ADDR_VAR 0 3
4351: PUSH
4352: LD_EXP 38
4356: PPUSH
4357: LD_INT 50
4359: PUSH
4360: EMPTY
4361: LIST
4362: PPUSH
4363: CALL_OW 72
4367: ST_TO_ADDR
// if filter and tmp then
4368: LD_VAR 0 2
4372: PUSH
4373: LD_VAR 0 3
4377: AND
4378: IFFALSE 4470
// begin for i in tmp do
4380: LD_ADDR_VAR 0 1
4384: PUSH
4385: LD_VAR 0 3
4389: PUSH
4390: FOR_IN
4391: IFFALSE 4466
// begin if GetTag ( i ) = tEscape then
4393: LD_VAR 0 1
4397: PPUSH
4398: CALL_OW 110
4402: PUSH
4403: LD_EXP 17
4407: EQUAL
4408: IFFALSE 4412
// continue ;
4410: GO 4390
// if IsInUnit ( i ) then
4412: LD_VAR 0 1
4416: PPUSH
4417: CALL_OW 310
4421: IFFALSE 4434
// ComExitBuilding ( i ) else
4423: LD_VAR 0 1
4427: PPUSH
4428: CALL_OW 122
4432: GO 4464
// if not HasTask ( i ) then
4434: LD_VAR 0 1
4438: PPUSH
4439: CALL_OW 314
4443: NOT
4444: IFFALSE 4464
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 2
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: CALL_OW 130
// end ;
4464: GO 4390
4466: POP
4467: POP
// end else
4468: GO 4541
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4470: LD_VAR 0 3
4474: PPUSH
4475: LD_INT 3
4477: PUSH
4478: LD_INT 54
4480: PUSH
4481: EMPTY
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 72
4492: IFFALSE 4541
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4494: LD_ADDR_VAR 0 1
4498: PUSH
4499: LD_VAR 0 3
4503: PPUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 54
4509: PUSH
4510: EMPTY
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 72
4521: PUSH
4522: FOR_IN
4523: IFFALSE 4539
// ComEnterUnit ( i , ruMainBase ) ;
4525: LD_VAR 0 1
4529: PPUSH
4530: LD_INT 200
4532: PPUSH
4533: CALL_OW 120
4537: GO 4522
4539: POP
4540: POP
// end ; end ;
4541: PPOPN 4
4543: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4544: LD_EXP 4
4548: NOT
4549: PUSH
4550: LD_EXP 40
4554: AND
4555: IFFALSE 4834
4557: GO 4559
4559: DISABLE
4560: LD_INT 0
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
// begin enable ;
4566: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4567: LD_ADDR_VAR 0 2
4571: PUSH
4572: LD_INT 3
4574: PPUSH
4575: LD_INT 22
4577: PUSH
4578: LD_INT 3
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 21
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 3
4597: PUSH
4598: LD_INT 24
4600: PUSH
4601: LD_INT 1000
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL_OW 70
4621: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4622: LD_ADDR_VAR 0 3
4626: PUSH
4627: LD_EXP 40
4631: PPUSH
4632: LD_INT 50
4634: PUSH
4635: EMPTY
4636: LIST
4637: PPUSH
4638: CALL_OW 72
4642: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4643: LD_ADDR_VAR 0 4
4647: PUSH
4648: LD_INT 118
4650: PPUSH
4651: LD_INT 121
4653: PPUSH
4654: CALL_OW 428
4658: ST_TO_ADDR
// if filter and tmp then
4659: LD_VAR 0 2
4663: PUSH
4664: LD_VAR 0 3
4668: AND
4669: IFFALSE 4761
// begin for i in tmp do
4671: LD_ADDR_VAR 0 1
4675: PUSH
4676: LD_VAR 0 3
4680: PUSH
4681: FOR_IN
4682: IFFALSE 4757
// begin if GetTag ( i ) = tEscape then
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 110
4693: PUSH
4694: LD_EXP 17
4698: EQUAL
4699: IFFALSE 4703
// continue ;
4701: GO 4681
// if IsInUnit ( i ) then
4703: LD_VAR 0 1
4707: PPUSH
4708: CALL_OW 310
4712: IFFALSE 4725
// ComExitBuilding ( i ) else
4714: LD_VAR 0 1
4718: PPUSH
4719: CALL_OW 122
4723: GO 4755
// if not HasTask ( i ) then
4725: LD_VAR 0 1
4729: PPUSH
4730: CALL_OW 314
4734: NOT
4735: IFFALSE 4755
// ComHeal ( i , filter [ 1 ] ) ;
4737: LD_VAR 0 1
4741: PPUSH
4742: LD_VAR 0 2
4746: PUSH
4747: LD_INT 1
4749: ARRAY
4750: PPUSH
4751: CALL_OW 128
// end ;
4755: GO 4681
4757: POP
4758: POP
// end else
4759: GO 4834
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4761: LD_VAR 0 3
4765: PPUSH
4766: LD_INT 3
4768: PUSH
4769: LD_INT 54
4771: PUSH
4772: EMPTY
4773: LIST
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 72
4783: IFFALSE 4834
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4785: LD_ADDR_VAR 0 1
4789: PUSH
4790: LD_VAR 0 3
4794: PPUSH
4795: LD_INT 3
4797: PUSH
4798: LD_INT 54
4800: PUSH
4801: EMPTY
4802: LIST
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PPUSH
4808: CALL_OW 72
4812: PUSH
4813: FOR_IN
4814: IFFALSE 4832
// ComEnterUnit ( i , lab ) ;
4816: LD_VAR 0 1
4820: PPUSH
4821: LD_VAR 0 4
4825: PPUSH
4826: CALL_OW 120
4830: GO 4813
4832: POP
4833: POP
// end ; end ; end_of_file
4834: PPOPN 4
4836: END
// on UnitDestroyed ( un ) do begin if un = Heike then
4837: LD_VAR 0 1
4841: PUSH
4842: LD_EXP 18
4846: EQUAL
4847: IFFALSE 4856
// YouLost ( Heike ) ;
4849: LD_STRING Heike
4851: PPUSH
4852: CALL_OW 104
// if un in ruEng then
4856: LD_VAR 0 1
4860: PUSH
4861: LD_EXP 38
4865: IN
4866: IFFALSE 4884
// ruEng := ruEng diff un ;
4868: LD_ADDR_EXP 38
4872: PUSH
4873: LD_EXP 38
4877: PUSH
4878: LD_VAR 0 1
4882: DIFF
4883: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
4884: LD_VAR 0 1
4888: PUSH
4889: LD_INT 22
4891: PUSH
4892: LD_INT 2
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: LD_INT 21
4901: PUSH
4902: LD_INT 1
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 23
4911: PUSH
4912: LD_INT 2
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: PPUSH
4924: CALL_OW 69
4928: IN
4929: IFFALSE 4945
// loseCounter := loseCounter + 1 ;
4931: LD_ADDR_EXP 6
4935: PUSH
4936: LD_EXP 6
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: ST_TO_ADDR
// end ;
4945: PPOPN 1
4947: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
4948: LD_INT 0
4950: PPUSH
4951: PPUSH
// begin if un in ruMobile then
4952: LD_VAR 0 2
4956: PUSH
4957: LD_EXP 41
4961: IN
4962: IFFALSE 5121
// begin ruMobile := ruMobile diff un ;
4964: LD_ADDR_EXP 41
4968: PUSH
4969: LD_EXP 41
4973: PUSH
4974: LD_VAR 0 2
4978: DIFF
4979: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
4980: LD_ADDR_VAR 0 5
4984: PUSH
4985: LD_VAR 0 2
4989: PPUSH
4990: CALL_OW 264
4994: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
4995: LD_ADDR_VAR 0 6
4999: PUSH
5000: LD_INT 110
5002: PPUSH
5003: LD_INT 126
5005: PPUSH
5006: CALL_OW 428
5010: ST_TO_ADDR
// if not driver or not fac then
5011: LD_VAR 0 1
5015: NOT
5016: PUSH
5017: LD_VAR 0 6
5021: NOT
5022: OR
5023: IFFALSE 5027
// exit ;
5025: GO 5121
// AddComMoveXY ( driver , 111 , 121 ) ;
5027: LD_VAR 0 1
5031: PPUSH
5032: LD_INT 111
5034: PPUSH
5035: LD_INT 121
5037: PPUSH
5038: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5042: LD_VAR 0 1
5046: PPUSH
5047: LD_VAR 0 6
5051: PPUSH
5052: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5056: LD_INT 35
5058: PPUSH
5059: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5063: LD_VAR 0 1
5067: PPUSH
5068: CALL_OW 301
5072: PUSH
5073: LD_VAR 0 1
5077: PPUSH
5078: CALL_OW 310
5082: OR
5083: IFFALSE 5056
// if IsDead ( driver ) then
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 301
5094: IFFALSE 5098
// exit ;
5096: GO 5121
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5098: LD_VAR 0 6
5102: PPUSH
5103: LD_INT 21
5105: PPUSH
5106: LD_INT 1
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: LD_VAR 0 5
5116: PPUSH
5117: CALL_OW 185
// end ; end ;
5121: PPOPN 6
5123: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( fac ) = 3 then
5124: LD_VAR 0 2
5128: PPUSH
5129: CALL_OW 255
5133: PUSH
5134: LD_INT 3
5136: EQUAL
5137: IFFALSE 5183
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5139: LD_ADDR_EXP 41
5143: PUSH
5144: LD_EXP 41
5148: PPUSH
5149: LD_EXP 41
5153: PUSH
5154: LD_INT 1
5156: PLUS
5157: PPUSH
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL_OW 1
5167: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5168: LD_VAR 0 1
5172: PPUSH
5173: LD_INT 110
5175: PPUSH
5176: LD_INT 117
5178: PPUSH
5179: CALL_OW 171
// end ; end ;
5183: PPOPN 2
5185: END
// on LeaveBuilding ( b , un ) do var barracks ;
5186: LD_INT 0
5188: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5189: LD_VAR 0 1
5193: PUSH
5194: LD_INT 130
5196: PPUSH
5197: LD_INT 17
5199: PPUSH
5200: CALL_OW 428
5204: PUSH
5205: LD_INT 138
5207: PPUSH
5208: LD_INT 22
5210: PPUSH
5211: CALL_OW 428
5215: PUSH
5216: LD_INT 123
5218: PPUSH
5219: LD_INT 17
5221: PPUSH
5222: CALL_OW 428
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: IN
5232: IFFALSE 5256
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5234: LD_VAR 0 2
5238: PPUSH
5239: LD_INT 135
5241: PPUSH
5242: LD_INT 31
5244: PPUSH
5245: CALL_OW 428
5249: PPUSH
5250: CALL_OW 180
// exit ;
5254: GO 5530
// end ; if b = HexInfo ( 135 , 31 ) then
5256: LD_VAR 0 1
5260: PUSH
5261: LD_INT 135
5263: PPUSH
5264: LD_INT 31
5266: PPUSH
5267: CALL_OW 428
5271: EQUAL
5272: IFFALSE 5344
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5274: LD_VAR 0 2
5278: PPUSH
5279: LD_INT 106
5281: PPUSH
5282: LD_INT 51
5284: PPUSH
5285: CALL_OW 428
5289: PPUSH
5290: CALL_OW 180
// if not explodeFirstDepot then
5294: LD_EXP 12
5298: NOT
5299: IFFALSE 5342
// begin explodeFirstDepot := true ;
5301: LD_ADDR_EXP 12
5305: PUSH
5306: LD_INT 1
5308: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5309: LD_INT 525
5311: PPUSH
5312: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5316: LD_INT 127
5318: PPUSH
5319: LD_INT 27
5321: PPUSH
5322: LD_INT 1
5324: PPUSH
5325: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5329: LD_INT 125
5331: PPUSH
5332: LD_INT 29
5334: PPUSH
5335: LD_INT 1
5337: PPUSH
5338: CALL_OW 453
// end ; exit ;
5342: GO 5530
// end ; if b = HexInfo ( 106 , 51 ) then
5344: LD_VAR 0 1
5348: PUSH
5349: LD_INT 106
5351: PPUSH
5352: LD_INT 51
5354: PPUSH
5355: CALL_OW 428
5359: EQUAL
5360: IFFALSE 5460
// begin AddComMoveXY ( un , 106 , 93 ) ;
5362: LD_VAR 0 2
5366: PPUSH
5367: LD_INT 106
5369: PPUSH
5370: LD_INT 93
5372: PPUSH
5373: CALL_OW 171
// if not explodeSecondDepot then
5377: LD_EXP 13
5381: NOT
5382: IFFALSE 5458
// begin explodeSecondDepot := true ;
5384: LD_ADDR_EXP 13
5388: PUSH
5389: LD_INT 1
5391: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5392: LD_INT 420
5394: PPUSH
5395: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5399: LD_INT 111
5401: PPUSH
5402: LD_INT 75
5404: PPUSH
5405: LD_INT 1
5407: PPUSH
5408: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5412: LD_INT 111
5414: PPUSH
5415: LD_INT 75
5417: PPUSH
5418: LD_INT 1
5420: PPUSH
5421: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5425: LD_INT 108
5427: PPUSH
5428: LD_INT 69
5430: PPUSH
5431: LD_INT 1
5433: PPUSH
5434: CALL_OW 453
// wait ( 0 0$2 ) ;
5438: LD_INT 70
5440: PPUSH
5441: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5445: LD_INT 94
5447: PPUSH
5448: LD_INT 65
5450: PPUSH
5451: LD_INT 1
5453: PPUSH
5454: CALL_OW 453
// end ; exit ;
5458: GO 5530
// end ; if GetBType ( b ) = b_bunker then
5460: LD_VAR 0 1
5464: PPUSH
5465: CALL_OW 266
5469: PUSH
5470: LD_INT 32
5472: EQUAL
5473: IFFALSE 5530
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5475: LD_ADDR_VAR 0 3
5479: PUSH
5480: LD_VAR 0 2
5484: PPUSH
5485: LD_INT 5
5487: PPUSH
5488: CALL 1008 0 2
5492: ST_TO_ADDR
// if barracks then
5493: LD_VAR 0 3
5497: IFFALSE 5515
// AddComEnterUnit ( un , barracks ) else
5499: LD_VAR 0 2
5503: PPUSH
5504: LD_VAR 0 3
5508: PPUSH
5509: CALL_OW 180
5513: GO 5530
// AddComMoveXY ( un , 116 , 110 ) ;
5515: LD_VAR 0 2
5519: PPUSH
5520: LD_INT 116
5522: PPUSH
5523: LD_INT 110
5525: PPUSH
5526: CALL_OW 171
// end ; end ;
5530: PPOPN 3
5532: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5533: LD_VAR 0 1
5537: PUSH
5538: LD_EXP 23
5542: EQUAL
5543: PUSH
5544: LD_VAR 0 2
5548: PUSH
5549: LD_INT 3
5551: PUSH
5552: LD_INT 6
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: IN
5559: AND
5560: IFFALSE 5591
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5562: LD_ADDR_EXP 8
5566: PUSH
5567: LD_VAR 0 1
5571: PPUSH
5572: CALL_OW 250
5576: PUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL_OW 251
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: ST_TO_ADDR
// end ; end_of_file
5591: PPOPN 3
5593: END
// export function Action ; var i , un , veh , tmp , rutmp ; begin
5594: LD_INT 0
5596: PPUSH
5597: PPUSH
5598: PPUSH
5599: PPUSH
5600: PPUSH
5601: PPUSH
// InGameOn ;
5602: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5606: LD_INT 5
5608: PPUSH
5609: LD_INT 2
5611: PPUSH
5612: CALL_OW 343
// music_nat := 4 ;
5616: LD_ADDR_OWVAR 71
5620: PUSH
5621: LD_INT 4
5623: ST_TO_ADDR
// music_class := music_combat ;
5624: LD_ADDR_OWVAR 72
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5632: LD_INT 133
5634: PPUSH
5635: LD_INT 2
5637: PPUSH
5638: LD_INT 2
5640: PPUSH
5641: LD_INT 10
5643: PPUSH
5644: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5648: LD_INT 133
5650: PPUSH
5651: LD_INT 2
5653: PPUSH
5654: CALL_OW 86
// wait ( 0 0$1 ) ;
5658: LD_INT 35
5660: PPUSH
5661: CALL_OW 67
// uc_side := 6 ;
5665: LD_ADDR_OWVAR 20
5669: PUSH
5670: LD_INT 6
5672: ST_TO_ADDR
// uc_nation := 3 ;
5673: LD_ADDR_OWVAR 21
5677: PUSH
5678: LD_INT 3
5680: ST_TO_ADDR
// rutmp := [ ] ;
5681: LD_ADDR_VAR 0 6
5685: PUSH
5686: EMPTY
5687: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5688: LD_INT 6
5690: PPUSH
5691: LD_INT 3
5693: PPUSH
5694: LD_INT 21
5696: PPUSH
5697: LD_INT 1
5699: PPUSH
5700: LD_INT 1
5702: PPUSH
5703: LD_INT 44
5705: PPUSH
5706: LD_INT 66
5708: PPUSH
5709: CALL 336 0 7
// veh := CreateVehicle ;
5713: LD_ADDR_VAR 0 4
5717: PUSH
5718: CALL_OW 45
5722: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5723: LD_VAR 0 4
5727: PPUSH
5728: LD_INT 3
5730: PPUSH
5731: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5735: LD_VAR 0 4
5739: PPUSH
5740: LD_INT 8
5742: PPUSH
5743: LD_INT 0
5745: PPUSH
5746: CALL_OW 49
// SetLives ( veh , 500 ) ;
5750: LD_VAR 0 4
5754: PPUSH
5755: LD_INT 500
5757: PPUSH
5758: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
5762: LD_INT 0
5764: PPUSH
5765: LD_INT 3
5767: PPUSH
5768: LD_INT 3
5770: PPUSH
5771: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5775: CALL_OW 44
5779: PPUSH
5780: LD_VAR 0 4
5784: PPUSH
5785: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
5789: LD_VAR 0 4
5793: PPUSH
5794: LD_INT 133
5796: PPUSH
5797: LD_INT 11
5799: PPUSH
5800: CALL_OW 111
// rutmp := [ veh ] ;
5804: LD_ADDR_VAR 0 6
5808: PUSH
5809: LD_VAR 0 4
5813: PUSH
5814: EMPTY
5815: LIST
5816: ST_TO_ADDR
// for i := 1 to 4 do
5817: LD_ADDR_VAR 0 2
5821: PUSH
5822: DOUBLE
5823: LD_INT 1
5825: DEC
5826: ST_TO_ADDR
5827: LD_INT 4
5829: PUSH
5830: FOR_TO
5831: IFFALSE 5938
// begin PrepareHuman ( false , i , 2 ) ;
5833: LD_INT 0
5835: PPUSH
5836: LD_VAR 0 2
5840: PPUSH
5841: LD_INT 2
5843: PPUSH
5844: CALL_OW 380
// un := CreateHuman ;
5848: LD_ADDR_VAR 0 3
5852: PUSH
5853: CALL_OW 44
5857: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5858: LD_VAR 0 3
5862: PPUSH
5863: LD_INT 3
5865: PPUSH
5866: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
5870: LD_VAR 0 3
5874: PPUSH
5875: LD_INT 8
5877: PPUSH
5878: LD_INT 0
5880: PPUSH
5881: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
5885: LD_ADDR_VAR 0 6
5889: PUSH
5890: LD_VAR 0 6
5894: PPUSH
5895: LD_VAR 0 6
5899: PUSH
5900: LD_INT 1
5902: PLUS
5903: PPUSH
5904: LD_VAR 0 3
5908: PPUSH
5909: CALL_OW 1
5913: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
5914: LD_VAR 0 3
5918: PPUSH
5919: LD_INT 133
5921: PPUSH
5922: LD_INT 11
5924: PPUSH
5925: CALL_OW 111
// wait ( 0 0$0.5 ) ;
5929: LD_INT 18
5931: PPUSH
5932: CALL_OW 67
// end ;
5936: GO 5830
5938: POP
5939: POP
// for i in rutmp do
5940: LD_ADDR_VAR 0 2
5944: PUSH
5945: LD_VAR 0 6
5949: PUSH
5950: FOR_IN
5951: IFFALSE 6000
// begin AddComMoveXY ( i , 99 , 65 ) ;
5953: LD_VAR 0 2
5957: PPUSH
5958: LD_INT 99
5960: PPUSH
5961: LD_INT 65
5963: PPUSH
5964: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
5968: LD_VAR 0 2
5972: PPUSH
5973: LD_INT 76
5975: PPUSH
5976: LD_INT 108
5978: PPUSH
5979: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
5983: LD_VAR 0 2
5987: PPUSH
5988: LD_INT 92
5990: PPUSH
5991: LD_INT 176
5993: PPUSH
5994: CALL_OW 171
// end ;
5998: GO 5950
6000: POP
6001: POP
// wait ( 0 0$10 ) ;
6002: LD_INT 350
6004: PPUSH
6005: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6009: LD_ADDR_VAR 0 5
6013: PUSH
6014: LD_EXP 18
6018: PUSH
6019: LD_EXP 19
6023: PUSH
6024: LD_EXP 20
6028: PUSH
6029: LD_EXP 21
6033: PUSH
6034: LD_EXP 22
6038: PUSH
6039: LD_EXP 23
6043: PUSH
6044: LD_EXP 24
6048: PUSH
6049: LD_EXP 25
6053: PUSH
6054: LD_EXP 27
6058: PUSH
6059: LD_EXP 28
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: PUSH
6076: LD_EXP 29
6080: UNION
6081: ST_TO_ADDR
// tmp := tmp diff 0 ;
6082: LD_ADDR_VAR 0 5
6086: PUSH
6087: LD_VAR 0 5
6091: PUSH
6092: LD_INT 0
6094: DIFF
6095: ST_TO_ADDR
// for i in heikeVehicles do
6096: LD_ADDR_VAR 0 2
6100: PUSH
6101: LD_EXP 30
6105: PUSH
6106: FOR_IN
6107: IFFALSE 6373
// begin if not tmp then
6109: LD_VAR 0 5
6113: NOT
6114: IFFALSE 6118
// continue ;
6116: GO 6106
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6118: LD_INT 2
6120: PPUSH
6121: LD_VAR 0 2
6125: PUSH
6126: LD_INT 5
6128: ARRAY
6129: PPUSH
6130: LD_VAR 0 2
6134: PUSH
6135: LD_INT 1
6137: ARRAY
6138: PPUSH
6139: LD_VAR 0 2
6143: PUSH
6144: LD_INT 2
6146: ARRAY
6147: PPUSH
6148: LD_VAR 0 2
6152: PUSH
6153: LD_INT 3
6155: ARRAY
6156: PPUSH
6157: LD_VAR 0 2
6161: PUSH
6162: LD_INT 4
6164: ARRAY
6165: PPUSH
6166: LD_INT 34
6168: PPUSH
6169: CALL 336 0 7
// veh := CreateVehicle ;
6173: LD_ADDR_VAR 0 4
6177: PUSH
6178: CALL_OW 45
6182: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6183: LD_VAR 0 2
6187: PUSH
6188: LD_INT 4
6190: ARRAY
6191: PUSH
6192: LD_INT 51
6194: PUSH
6195: LD_INT 32
6197: PUSH
6198: LD_INT 12
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: LIST
6205: IN
6206: IFFALSE 6286
// begin if i [ 7 ] [ 1 ] then
6208: LD_VAR 0 2
6212: PUSH
6213: LD_INT 7
6215: ARRAY
6216: PUSH
6217: LD_INT 1
6219: ARRAY
6220: IFFALSE 6247
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6222: LD_VAR 0 4
6226: PPUSH
6227: LD_INT 1
6229: PPUSH
6230: LD_VAR 0 2
6234: PUSH
6235: LD_INT 7
6237: ARRAY
6238: PUSH
6239: LD_INT 1
6241: ARRAY
6242: PPUSH
6243: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6247: LD_VAR 0 2
6251: PUSH
6252: LD_INT 7
6254: ARRAY
6255: PUSH
6256: LD_INT 2
6258: ARRAY
6259: IFFALSE 6286
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6261: LD_VAR 0 4
6265: PPUSH
6266: LD_INT 2
6268: PPUSH
6269: LD_VAR 0 2
6273: PUSH
6274: LD_INT 7
6276: ARRAY
6277: PUSH
6278: LD_INT 2
6280: ARRAY
6281: PPUSH
6282: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6286: LD_VAR 0 4
6290: PPUSH
6291: LD_INT 3
6293: PPUSH
6294: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6298: LD_VAR 0 4
6302: PPUSH
6303: LD_INT 8
6305: PPUSH
6306: LD_INT 0
6308: PPUSH
6309: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6313: LD_VAR 0 5
6317: PUSH
6318: LD_INT 1
6320: ARRAY
6321: PPUSH
6322: LD_VAR 0 4
6326: PPUSH
6327: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6331: LD_ADDR_VAR 0 5
6335: PUSH
6336: LD_VAR 0 5
6340: PPUSH
6341: LD_INT 1
6343: PPUSH
6344: CALL_OW 3
6348: ST_TO_ADDR
// ComAgressiveMove ( veh , 133 , 7 ) ;
6349: LD_VAR 0 4
6353: PPUSH
6354: LD_INT 133
6356: PPUSH
6357: LD_INT 7
6359: PPUSH
6360: CALL_OW 114
// wait ( 0 0$1 ) ;
6364: LD_INT 35
6366: PPUSH
6367: CALL_OW 67
// end ;
6371: GO 6106
6373: POP
6374: POP
// if tmp then
6375: LD_VAR 0 5
6379: IFFALSE 6435
// for i in tmp do
6381: LD_ADDR_VAR 0 2
6385: PUSH
6386: LD_VAR 0 5
6390: PUSH
6391: FOR_IN
6392: IFFALSE 6433
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6394: LD_VAR 0 2
6398: PPUSH
6399: LD_INT 10
6401: PPUSH
6402: LD_INT 0
6404: PPUSH
6405: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6409: LD_VAR 0 2
6413: PPUSH
6414: LD_INT 146
6416: PPUSH
6417: LD_INT 7
6419: PPUSH
6420: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6424: LD_INT 18
6426: PPUSH
6427: CALL_OW 67
// end ;
6431: GO 6391
6433: POP
6434: POP
// if heikeApes then
6435: LD_EXP 31
6439: IFFALSE 6495
// for i in heikeApes do
6441: LD_ADDR_VAR 0 2
6445: PUSH
6446: LD_EXP 31
6450: PUSH
6451: FOR_IN
6452: IFFALSE 6493
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6454: LD_VAR 0 2
6458: PPUSH
6459: LD_INT 10
6461: PPUSH
6462: LD_INT 0
6464: PPUSH
6465: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6469: LD_VAR 0 2
6473: PPUSH
6474: LD_INT 146
6476: PPUSH
6477: LD_INT 7
6479: PPUSH
6480: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6484: LD_INT 18
6486: PPUSH
6487: CALL_OW 67
// end ;
6491: GO 6451
6493: POP
6494: POP
// DialogueOn ;
6495: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6499: LD_EXP 18
6503: PPUSH
6504: LD_STRING DH-outpost-a-1
6506: PPUSH
6507: CALL_OW 88
// DialogueOff ;
6511: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6515: LD_INT 133
6517: PPUSH
6518: LD_INT 2
6520: PPUSH
6521: LD_INT 2
6523: PPUSH
6524: CALL_OW 331
// InGameOff ;
6528: CALL_OW 9
// music_nat := 0 ;
6532: LD_ADDR_OWVAR 71
6536: PUSH
6537: LD_INT 0
6539: ST_TO_ADDR
// music_class := 0 ;
6540: LD_ADDR_OWVAR 72
6544: PUSH
6545: LD_INT 0
6547: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6548: LD_STRING Outposts
6550: PPUSH
6551: CALL_OW 337
// SaveForQuickRestart ;
6555: CALL_OW 22
// end ;
6559: LD_VAR 0 1
6563: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6564: LD_INT 22
6566: PUSH
6567: LD_INT 2
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: LD_INT 91
6576: PUSH
6577: LD_EXP 21
6581: PUSH
6582: LD_INT 20
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: LIST
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PPUSH
6594: CALL_OW 69
6598: PUSH
6599: LD_EXP 3
6603: AND
6604: PUSH
6605: LD_EXP 21
6609: PPUSH
6610: CALL_OW 302
6614: AND
6615: IFFALSE 6862
6617: GO 6619
6619: DISABLE
6620: LD_INT 0
6622: PPUSH
6623: PPUSH
6624: PPUSH
6625: PPUSH
// begin IbrahimBetrayal ;
6626: CALL 6865 0 0
// repeat wait ( 0 0$1 ) ;
6630: LD_INT 35
6632: PPUSH
6633: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6637: LD_EXP 21
6641: PPUSH
6642: CALL_OW 301
6646: PUSH
6647: LD_INT 22
6649: PUSH
6650: LD_INT 2
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 91
6659: PUSH
6660: LD_EXP 21
6664: PUSH
6665: LD_INT 6
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 69
6681: PUSH
6682: LD_EXP 21
6686: PPUSH
6687: CALL_OW 302
6691: AND
6692: OR
6693: IFFALSE 6630
// if IsDead ( Ibrahim ) then
6695: LD_EXP 21
6699: PPUSH
6700: CALL_OW 301
6704: IFFALSE 6708
// exit ;
6706: GO 6862
// x := GetX ( Ibrahim ) ;
6708: LD_ADDR_VAR 0 1
6712: PUSH
6713: LD_EXP 21
6717: PPUSH
6718: CALL_OW 250
6722: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
6723: LD_ADDR_VAR 0 2
6727: PUSH
6728: LD_EXP 21
6732: PPUSH
6733: CALL_OW 251
6737: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
6738: LD_ADDR_VAR 0 3
6742: PUSH
6743: LD_EXP 21
6747: PPUSH
6748: CALL_OW 254
6752: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
6753: LD_ADDR_VAR 0 4
6757: PUSH
6758: LD_EXP 21
6762: PPUSH
6763: CALL_OW 256
6767: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
6768: LD_EXP 21
6772: PPUSH
6773: CALL_OW 64
// uc_side := 2 ;
6777: LD_ADDR_OWVAR 20
6781: PUSH
6782: LD_INT 2
6784: ST_TO_ADDR
// uc_nation := 2 ;
6785: LD_ADDR_OWVAR 21
6789: PUSH
6790: LD_INT 2
6792: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
6793: LD_ADDR_EXP 21
6797: PUSH
6798: LD_STRING Ibrahim
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: LD_STRING 
6806: PPUSH
6807: CALL 28880 0 3
6811: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
6812: LD_EXP 21
6816: PPUSH
6817: LD_VAR 0 3
6821: PPUSH
6822: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
6826: LD_EXP 21
6830: PPUSH
6831: LD_VAR 0 1
6835: PPUSH
6836: LD_VAR 0 2
6840: PPUSH
6841: LD_INT 0
6843: PPUSH
6844: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
6848: LD_EXP 21
6852: PPUSH
6853: LD_VAR 0 4
6857: PPUSH
6858: CALL_OW 234
// end ;
6862: PPOPN 4
6864: END
// export function IbrahimBetrayal ; var i , tmp ; begin
6865: LD_INT 0
6867: PPUSH
6868: PPUSH
6869: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
6870: LD_INT 122
6872: PPUSH
6873: LD_INT 77
6875: PPUSH
6876: LD_INT 2
6878: PPUSH
6879: LD_INT 6
6881: NEG
6882: PPUSH
6883: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
6887: LD_EXP 21
6891: PPUSH
6892: LD_INT 123
6894: PPUSH
6895: LD_INT 79
6897: PPUSH
6898: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
6902: LD_EXP 21
6906: PPUSH
6907: LD_INT 125
6909: PPUSH
6910: LD_INT 82
6912: PPUSH
6913: CALL_OW 178
// wait ( 0 0$2 ) ;
6917: LD_INT 70
6919: PPUSH
6920: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
6924: LD_EXP 42
6928: PPUSH
6929: LD_EXP 21
6933: PPUSH
6934: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
6938: LD_EXP 42
6942: PPUSH
6943: LD_STRING DRum-outpost-b-3
6945: PPUSH
6946: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
6950: LD_ADDR_VAR 0 3
6954: PUSH
6955: LD_INT 125
6957: PPUSH
6958: LD_INT 76
6960: PPUSH
6961: CALL_OW 428
6965: PUSH
6966: LD_INT 125
6968: PPUSH
6969: LD_INT 79
6971: PPUSH
6972: CALL_OW 428
6976: PUSH
6977: LD_INT 125
6979: PPUSH
6980: LD_INT 82
6982: PPUSH
6983: CALL_OW 428
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: LIST
6992: ST_TO_ADDR
// for i in tmp do
6993: LD_ADDR_VAR 0 2
6997: PUSH
6998: LD_VAR 0 3
7002: PUSH
7003: FOR_IN
7004: IFFALSE 7020
// SetLives ( i , 200 ) ;
7006: LD_VAR 0 2
7010: PPUSH
7011: LD_INT 200
7013: PPUSH
7014: CALL_OW 234
7018: GO 7003
7020: POP
7021: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7022: LD_EXP 21
7026: PPUSH
7027: LD_STRING DI-outpost-b-4
7029: PPUSH
7030: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7034: LD_EXP 21
7038: PPUSH
7039: LD_INT 5
7041: PPUSH
7042: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7046: LD_EXP 21
7050: PUSH
7051: LD_EXP 42
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PPUSH
7060: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7064: LD_INT 122
7066: PPUSH
7067: LD_INT 77
7069: PPUSH
7070: LD_INT 2
7072: PPUSH
7073: CALL_OW 331
// if Givi then
7077: LD_EXP 19
7081: IFFALSE 7097
// Say ( Givi , DG-1-outpost-b-5 ) else
7083: LD_EXP 19
7087: PPUSH
7088: LD_STRING DG-1-outpost-b-5
7090: PPUSH
7091: CALL_OW 88
7095: GO 7162
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7097: LD_EXP 29
7101: PPUSH
7102: LD_INT 26
7104: PUSH
7105: LD_INT 2
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PPUSH
7112: CALL_OW 72
7116: PUSH
7117: LD_INT 1
7119: ARRAY
7120: PPUSH
7121: LD_STRING DArf-outpost-b-a-5
7123: PPUSH
7124: CALL_OW 88
7128: NOT
7129: IFFALSE 7162
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7131: LD_EXP 29
7135: PPUSH
7136: LD_INT 26
7138: PUSH
7139: LD_INT 1
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PPUSH
7146: CALL_OW 72
7150: PUSH
7151: LD_INT 1
7153: ARRAY
7154: PPUSH
7155: LD_STRING DArm-outpost-b-a-5
7157: PPUSH
7158: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7162: LD_INT 35
7164: PPUSH
7165: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7169: LD_EXP 21
7173: PPUSH
7174: CALL_OW 301
7178: PUSH
7179: LD_EXP 18
7183: PPUSH
7184: LD_EXP 21
7188: PPUSH
7189: CALL_OW 296
7193: PUSH
7194: LD_INT 6
7196: LESS
7197: PUSH
7198: LD_EXP 21
7202: PPUSH
7203: CALL_OW 302
7207: AND
7208: OR
7209: IFFALSE 7162
// if IsDead ( Ibrahim ) then
7211: LD_EXP 21
7215: PPUSH
7216: CALL_OW 301
7220: IFFALSE 7236
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7222: LD_EXP 18
7226: PPUSH
7227: LD_STRING DH-ibrahimdead-1
7229: PPUSH
7230: CALL_OW 88
// exit ;
7234: GO 7277
// end ; CenterNowOnUnits ( Ibrahim ) ;
7236: LD_EXP 21
7240: PPUSH
7241: CALL_OW 87
// DialogueOn ;
7245: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7249: LD_EXP 21
7253: PPUSH
7254: LD_STRING DI-ibrahimlives-1
7256: PPUSH
7257: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7261: LD_EXP 18
7265: PPUSH
7266: LD_STRING DH-Ibrahimlives-2
7268: PPUSH
7269: CALL_OW 88
// DialogueOff ;
7273: CALL_OW 7
// end ;
7277: LD_VAR 0 1
7281: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7282: LD_INT 11
7284: PPUSH
7285: LD_INT 22
7287: PUSH
7288: LD_INT 2
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 70
7299: PUSH
7300: LD_OWVAR 1
7304: PUSH
7305: LD_INT 18900
7307: PUSH
7308: LD_INT 16800
7310: PUSH
7311: LD_INT 16800
7313: PUSH
7314: LD_INT 15750
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: PUSH
7323: LD_OWVAR 67
7327: ARRAY
7328: GREATEREQUAL
7329: OR
7330: IFFALSE 7791
7332: GO 7334
7334: DISABLE
// begin outerAreaAchived := true ;
7335: LD_ADDR_EXP 15
7339: PUSH
7340: LD_INT 1
7342: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7343: LD_INT 700
7345: PPUSH
7346: CALL_OW 67
// DialogueOn ;
7350: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7354: LD_EXP 26
7358: PPUSH
7359: LD_STRING DShar-radio-1
7361: PPUSH
7362: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7366: LD_EXP 26
7370: PPUSH
7371: LD_STRING DShar-radio-2
7373: PPUSH
7374: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7378: LD_EXP 18
7382: PPUSH
7383: LD_STRING DH-radio-2
7385: PPUSH
7386: CALL_OW 88
// DialogueOff ;
7390: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7394: LD_STRING Gaidar
7396: PPUSH
7397: CALL_OW 337
// if Difficulty < 3 then
7401: LD_OWVAR 67
7405: PUSH
7406: LD_INT 3
7408: LESS
7409: IFFALSE 7475
// begin DialogueOn ;
7411: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7415: LD_INT 11
7417: PPUSH
7418: LD_INT 14
7420: PPUSH
7421: LD_INT 2
7423: PPUSH
7424: LD_INT 6
7426: NEG
7427: PPUSH
7428: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7432: LD_INT 11
7434: PPUSH
7435: LD_INT 14
7437: PPUSH
7438: LD_INT 2
7440: PPUSH
7441: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7445: LD_INT 11
7447: PPUSH
7448: LD_INT 14
7450: PPUSH
7451: CALL_OW 84
// dwait ( 0 0$1 ) ;
7455: LD_INT 35
7457: PPUSH
7458: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7462: LD_EXP 18
7466: PPUSH
7467: CALL_OW 87
// DialogueOff ;
7471: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7475: LD_INT 1050
7477: PUSH
7478: LD_INT 350
7480: PPUSH
7481: LD_INT 525
7483: PPUSH
7484: CALL_OW 12
7488: PUSH
7489: LD_OWVAR 67
7493: MUL
7494: PLUS
7495: PPUSH
7496: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7500: LD_INT 35
7502: PPUSH
7503: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7507: LD_INT 2
7509: PPUSH
7510: LD_INT 1
7512: PPUSH
7513: CALL_OW 428
7517: PUSH
7518: LD_INT 0
7520: EQUAL
7521: IFFALSE 7500
// SetDir ( Gaidar , 2 ) ;
7523: LD_EXP 35
7527: PPUSH
7528: LD_INT 2
7530: PPUSH
7531: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7535: LD_EXP 35
7539: PPUSH
7540: LD_INT 2
7542: PPUSH
7543: LD_INT 1
7545: PPUSH
7546: LD_INT 0
7548: PPUSH
7549: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7553: LD_EXP 35
7557: PPUSH
7558: LD_INT 19
7560: PPUSH
7561: LD_INT 24
7563: PPUSH
7564: CALL_OW 111
// AddComWait ( Gaidar , 0 0$6 ) ;
7568: LD_EXP 35
7572: PPUSH
7573: LD_INT 210
7575: PPUSH
7576: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7580: LD_EXP 35
7584: PPUSH
7585: LD_INT 38
7587: PPUSH
7588: LD_INT 47
7590: PPUSH
7591: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7595: LD_EXP 35
7599: PPUSH
7600: LD_INT 32
7602: PPUSH
7603: LD_INT 59
7605: PPUSH
7606: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
7610: LD_EXP 35
7614: PPUSH
7615: LD_INT 350
7617: PPUSH
7618: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
7622: LD_EXP 35
7626: PPUSH
7627: LD_INT 62
7629: PPUSH
7630: LD_INT 116
7632: PPUSH
7633: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
7637: LD_EXP 35
7641: PPUSH
7642: LD_INT 92
7644: PPUSH
7645: LD_INT 177
7647: PPUSH
7648: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7652: LD_INT 35
7654: PPUSH
7655: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
7659: LD_EXP 35
7663: PPUSH
7664: CALL_OW 301
7668: PUSH
7669: LD_EXP 35
7673: PPUSH
7674: LD_INT 92
7676: PPUSH
7677: LD_INT 177
7679: PPUSH
7680: CALL_OW 307
7684: OR
7685: IFFALSE 7652
// if IsAt ( Gaidar , 92 , 177 ) then
7687: LD_EXP 35
7691: PPUSH
7692: LD_INT 92
7694: PPUSH
7695: LD_INT 177
7697: PPUSH
7698: CALL_OW 307
7702: IFFALSE 7769
// begin DialogueOn ;
7704: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
7708: LD_INT 92
7710: PPUSH
7711: LD_INT 177
7713: PPUSH
7714: LD_INT 2
7716: PPUSH
7717: LD_INT 3
7719: NEG
7720: PPUSH
7721: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
7725: LD_EXP 35
7729: PPUSH
7730: CALL_OW 87
// dwait ( 0 0$2 ) ;
7734: LD_INT 70
7736: PPUSH
7737: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
7741: LD_INT 92
7743: PPUSH
7744: LD_INT 177
7746: PPUSH
7747: LD_INT 2
7749: PPUSH
7750: CALL_OW 331
// DialogueOff ;
7754: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
7758: LD_EXP 35
7762: PPUSH
7763: CALL_OW 64
// exit ;
7767: GO 7791
// end ; gaidarKilled := true ;
7769: LD_ADDR_EXP 14
7773: PUSH
7774: LD_INT 1
7776: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
7777: LD_STRING GaidarKilled
7779: PPUSH
7780: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
7784: LD_STRING ACH_COMMISAR
7786: PPUSH
7787: CALL_OW 543
// end ;
7791: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
7792: LD_INT 2
7794: PPUSH
7795: LD_EXP 35
7799: PPUSH
7800: CALL_OW 292
7804: IFFALSE 7821
7806: GO 7808
7808: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
7809: LD_EXP 35
7813: PPUSH
7814: LD_STRING DT-objective-1
7816: PPUSH
7817: CALL_OW 88
7821: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
7822: LD_INT 22
7824: PUSH
7825: LD_INT 2
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 2
7834: PUSH
7835: LD_INT 95
7837: PUSH
7838: LD_INT 5
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 95
7847: PUSH
7848: LD_INT 6
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 95
7857: PUSH
7858: LD_INT 7
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: IFFALSE 7916
7881: GO 7883
7883: DISABLE
// begin DialogueOn ;
7884: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
7888: LD_EXP 18
7892: PPUSH
7893: LD_STRING DH-outpost-last-1
7895: PPUSH
7896: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
7900: LD_EXP 34
7904: PPUSH
7905: LD_STRING DB-outpost-last-2
7907: PPUSH
7908: CALL_OW 94
// DialogueOff ;
7912: CALL_OW 7
// end ;
7916: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
7917: LD_INT 200
7919: PPUSH
7920: CALL_OW 256
7924: PUSH
7925: LD_INT 999
7927: LESS
7928: PUSH
7929: LD_INT 200
7931: PPUSH
7932: CALL_OW 255
7936: PUSH
7937: LD_INT 2
7939: EQUAL
7940: OR
7941: IFFALSE 8114
7943: GO 7945
7945: DISABLE
7946: LD_INT 0
7948: PPUSH
7949: PPUSH
// begin if not earlyEscape then
7950: LD_EXP 16
7954: NOT
7955: IFFALSE 7981
// begin SayRadio ( Burlak , DB-end-1 ) ;
7957: LD_EXP 34
7961: PPUSH
7962: LD_STRING DB-end-1
7964: PPUSH
7965: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
7969: LD_EXP 18
7973: PPUSH
7974: LD_STRING DH-end-2
7976: PPUSH
7977: CALL_OW 88
// end ; if tick <= 15 15$00 then
7981: LD_OWVAR 1
7985: PUSH
7986: LD_INT 31500
7988: LESSEQUAL
7989: IFFALSE 7998
// SetAchievement ( ACH_FIST ) ;
7991: LD_STRING ACH_FIST
7993: PPUSH
7994: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7998: LD_ADDR_VAR 0 2
8002: PUSH
8003: LD_INT 22
8005: PUSH
8006: LD_INT 3
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PUSH
8013: LD_INT 3
8015: PUSH
8016: LD_INT 21
8018: PUSH
8019: LD_INT 3
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PPUSH
8034: CALL_OW 69
8038: ST_TO_ADDR
// if not tmp then
8039: LD_VAR 0 2
8043: NOT
8044: IFFALSE 8048
// exit ;
8046: GO 8114
// for i in tmp do
8048: LD_ADDR_VAR 0 1
8052: PUSH
8053: LD_VAR 0 2
8057: PUSH
8058: FOR_IN
8059: IFFALSE 8112
// begin SetTag ( i , tEscape ) ;
8061: LD_VAR 0 1
8065: PPUSH
8066: LD_EXP 17
8070: PPUSH
8071: CALL_OW 109
// if IsInUnit ( i ) then
8075: LD_VAR 0 1
8079: PPUSH
8080: CALL_OW 310
8084: IFFALSE 8095
// ComExitBuilding ( i ) ;
8086: LD_VAR 0 1
8090: PPUSH
8091: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8095: LD_VAR 0 1
8099: PPUSH
8100: LD_INT 92
8102: PPUSH
8103: LD_INT 177
8105: PPUSH
8106: CALL_OW 171
// end ;
8110: GO 8058
8112: POP
8113: POP
// end ;
8114: PPOPN 2
8116: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8117: LD_INT 4
8119: PPUSH
8120: LD_INT 22
8122: PUSH
8123: LD_INT 2
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PPUSH
8130: CALL_OW 70
8134: PUSH
8135: LD_EXP 15
8139: NOT
8140: AND
8141: PUSH
8142: LD_EXP 27
8146: PPUSH
8147: CALL_OW 302
8151: AND
8152: IFFALSE 8392
8154: GO 8156
8156: DISABLE
// begin DialogueOn ;
8157: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8161: LD_INT 111
8163: PPUSH
8164: LD_INT 54
8166: PPUSH
8167: LD_INT 2
8169: PPUSH
8170: LD_INT 16
8172: NEG
8173: PPUSH
8174: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8178: LD_INT 111
8180: PPUSH
8181: LD_INT 53
8183: PPUSH
8184: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8188: LD_INT 10
8190: PPUSH
8191: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8195: LD_EXP 27
8199: PPUSH
8200: LD_STRING DKs-Hannibal-1
8202: PPUSH
8203: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8207: LD_EXP 27
8211: PPUSH
8212: LD_STRING DKs-Hannibal-2
8214: PPUSH
8215: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8219: LD_EXP 27
8223: PPUSH
8224: LD_STRING DKs-Hannibal-3
8226: PPUSH
8227: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8231: LD_EXP 27
8235: PPUSH
8236: LD_STRING DKs-Hannibal-4
8238: PPUSH
8239: CALL_OW 88
// dwait ( 0 0$1 ) ;
8243: LD_INT 35
8245: PPUSH
8246: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8250: LD_INT 111
8252: PPUSH
8253: LD_INT 54
8255: PPUSH
8256: LD_INT 2
8258: PPUSH
8259: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8263: LD_INT 173
8265: PPUSH
8266: LD_INT 76
8268: PPUSH
8269: LD_INT 2
8271: PPUSH
8272: LD_INT 12
8274: NEG
8275: PPUSH
8276: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8280: LD_INT 173
8282: PPUSH
8283: LD_INT 76
8285: PPUSH
8286: LD_INT 2
8288: PPUSH
8289: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8293: LD_INT 173
8295: PPUSH
8296: LD_INT 76
8298: PPUSH
8299: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8303: LD_EXP 27
8307: PPUSH
8308: LD_STRING DKs-Hannibal-5
8310: PPUSH
8311: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8315: LD_EXP 22
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_INT 2
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 34
8332: PUSH
8333: LD_INT 26
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PPUSH
8344: CALL_OW 69
8348: NOT
8349: AND
8350: IFFALSE 8388
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8352: LD_EXP 22
8356: PPUSH
8357: LD_STRING DKam-Hannibal-a-6
8359: PPUSH
8360: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8364: LD_EXP 22
8368: PPUSH
8369: LD_STRING DKam-Hannibal-a-7
8371: PPUSH
8372: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8376: LD_EXP 19
8380: PPUSH
8381: LD_STRING DG-Hannibal-a-8
8383: PPUSH
8384: CALL_OW 88
// end ; DialogueOff ;
8388: CALL_OW 7
// end ;
8392: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8393: LD_INT 225
8395: PPUSH
8396: CALL_OW 302
8400: PUSH
8401: LD_INT 200
8403: PPUSH
8404: CALL_OW 302
8408: AND
8409: PUSH
8410: LD_INT 12
8412: PPUSH
8413: LD_INT 21
8415: PUSH
8416: LD_INT 3
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PPUSH
8423: CALL_OW 70
8427: PUSH
8428: LD_INT 2
8430: GREATER
8431: AND
8432: PUSH
8433: LD_INT 13
8435: PPUSH
8436: LD_INT 22
8438: PUSH
8439: LD_INT 2
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 70
8450: PUSH
8451: LD_INT 3
8453: GREATER
8454: AND
8455: IFFALSE 8468
8457: GO 8459
8459: DISABLE
// hannibalPath := true ;
8460: LD_ADDR_EXP 9
8464: PUSH
8465: LD_INT 1
8467: ST_TO_ADDR
8468: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8469: LD_EXP 9
8473: PUSH
8474: LD_INT 6
8476: PPUSH
8477: LD_INT 22
8479: PUSH
8480: LD_INT 2
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL_OW 70
8491: AND
8492: IFFALSE 8837
8494: GO 8496
8496: DISABLE
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
8501: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8502: LD_ADDR_VAR 0 2
8506: PUSH
8507: LD_INT 6
8509: PPUSH
8510: LD_INT 22
8512: PUSH
8513: LD_INT 2
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PPUSH
8520: CALL_OW 70
8524: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8525: LD_ADDR_VAR 0 3
8529: PUSH
8530: LD_VAR 0 2
8534: PPUSH
8535: LD_INT 34
8537: PUSH
8538: LD_INT 26
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PPUSH
8545: CALL_OW 72
8549: PUSH
8550: LD_INT 0
8552: GREATER
8553: ST_TO_ADDR
// DialogueOn ;
8554: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8558: LD_EXP 18
8562: PPUSH
8563: LD_STRING DH-Cleverattack-1
8565: PPUSH
8566: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8570: LD_EXP 18
8574: PPUSH
8575: LD_STRING DH-Cleverattack-2
8577: PPUSH
8578: CALL_OW 88
// if hasFlameThrower then
8582: LD_VAR 0 3
8586: IFFALSE 8614
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8588: LD_EXP 34
8592: PPUSH
8593: LD_STRING DB-Cleverattack-3
8595: PPUSH
8596: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8600: LD_EXP 18
8604: PPUSH
8605: LD_STRING DH-Cleverattack-4
8607: PPUSH
8608: CALL_OW 88
// end else
8612: GO 8638
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
8614: LD_EXP 34
8618: PPUSH
8619: LD_STRING DB-Cleverattack-a-3
8621: PPUSH
8622: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
8626: LD_EXP 18
8630: PPUSH
8631: LD_STRING DH-Cleverattack-a-4
8633: PPUSH
8634: CALL_OW 88
// end ; DialogueOff ;
8638: CALL_OW 7
// if not hasFlameThrower then
8642: LD_VAR 0 3
8646: NOT
8647: IFFALSE 8651
// exit ;
8649: GO 8837
// earlyEscape := true ;
8651: LD_ADDR_EXP 16
8655: PUSH
8656: LD_INT 1
8658: ST_TO_ADDR
// wait ( 0 0$4 ) ;
8659: LD_INT 140
8661: PPUSH
8662: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
8666: LD_ADDR_VAR 0 2
8670: PUSH
8671: LD_INT 22
8673: PUSH
8674: LD_INT 3
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 2
8683: PUSH
8684: LD_INT 25
8686: PUSH
8687: LD_INT 1
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: LD_INT 25
8696: PUSH
8697: LD_INT 2
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: LD_INT 25
8706: PUSH
8707: LD_INT 4
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PPUSH
8724: CALL_OW 69
8728: PUSH
8729: LD_EXP 21
8733: PUSH
8734: LD_EXP 36
8738: PUSH
8739: LD_EXP 35
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: LIST
8748: DIFF
8749: ST_TO_ADDR
// for i in tmp do
8750: LD_ADDR_VAR 0 1
8754: PUSH
8755: LD_VAR 0 2
8759: PUSH
8760: FOR_IN
8761: IFFALSE 8835
// begin if Prob ( 40 + 10 * Difficulty ) then
8763: LD_INT 40
8765: PUSH
8766: LD_INT 10
8768: PUSH
8769: LD_OWVAR 67
8773: MUL
8774: PLUS
8775: PPUSH
8776: CALL_OW 13
8780: IFFALSE 8784
// continue ;
8782: GO 8760
// SetTag ( i , tEscape ) ;
8784: LD_VAR 0 1
8788: PPUSH
8789: LD_EXP 17
8793: PPUSH
8794: CALL_OW 109
// if IsInUnit ( i ) then
8798: LD_VAR 0 1
8802: PPUSH
8803: CALL_OW 310
8807: IFFALSE 8818
// ComExitBuilding ( i ) ;
8809: LD_VAR 0 1
8813: PPUSH
8814: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8818: LD_VAR 0 1
8822: PPUSH
8823: LD_INT 92
8825: PPUSH
8826: LD_INT 177
8828: PPUSH
8829: CALL_OW 171
// end ;
8833: GO 8760
8835: POP
8836: POP
// end ;
8837: PPOPN 3
8839: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
8840: LD_INT 9
8842: PPUSH
8843: LD_INT 2
8845: PUSH
8846: LD_INT 22
8848: PUSH
8849: LD_INT 3
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 22
8858: PUSH
8859: LD_INT 6
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: LIST
8870: PPUSH
8871: CALL_OW 70
8875: IFFALSE 8973
8877: GO 8879
8879: DISABLE
8880: LD_INT 0
8882: PPUSH
// begin enable ;
8883: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
8884: LD_ADDR_VAR 0 1
8888: PUSH
8889: LD_INT 9
8891: PPUSH
8892: LD_INT 2
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_INT 3
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 22
8907: PUSH
8908: LD_INT 6
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: LIST
8919: PPUSH
8920: CALL_OW 70
8924: PUSH
8925: FOR_IN
8926: IFFALSE 8971
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
8928: LD_VAR 0 1
8932: PPUSH
8933: CALL_OW 110
8937: PUSH
8938: LD_EXP 17
8942: EQUAL
8943: PUSH
8944: LD_VAR 0 1
8948: PPUSH
8949: CALL_OW 255
8953: PUSH
8954: LD_INT 6
8956: EQUAL
8957: OR
8958: IFFALSE 8969
// RemoveUnit ( i ) ;
8960: LD_VAR 0 1
8964: PPUSH
8965: CALL_OW 64
8969: GO 8925
8971: POP
8972: POP
// end ;
8973: PPOPN 1
8975: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
8976: LD_EXP 23
8980: PUSH
8981: LD_EXP 23
8985: PPUSH
8986: CALL_OW 256
8990: PUSH
8991: LD_INT 3
8993: LESS
8994: AND
8995: IFFALSE 9041
8997: GO 8999
8999: DISABLE
// begin DialogueOn ;
9000: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9004: LD_EXP 23
9008: PPUSH
9009: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9013: LD_EXP 23
9017: PPUSH
9018: LD_STRING DK-Kkilled-1
9020: PPUSH
9021: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9025: LD_EXP 18
9029: PPUSH
9030: LD_STRING DH-Kkilled-2
9032: PPUSH
9033: CALL_OW 88
// DialogueOff ;
9037: CALL_OW 7
// end ;
9041: END
// every 0 0$1 trigger kaiaKilledByRussian do
9042: LD_EXP 8
9046: IFFALSE 9063
9048: GO 9050
9050: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9051: LD_EXP 18
9055: PPUSH
9056: LD_STRING DH-Kkilled-3
9058: PPUSH
9059: CALL_OW 88
9063: END
// every 0 0$1 trigger tick >= 24 24$00 do
9064: LD_OWVAR 1
9068: PUSH
9069: LD_INT 50400
9071: GREATEREQUAL
9072: IFFALSE 9109
9074: GO 9076
9076: DISABLE
// begin DialogueOn ;
9077: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9081: LD_EXP 26
9085: PPUSH
9086: LD_STRING DShar-slow-1
9088: PPUSH
9089: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9093: LD_EXP 26
9097: PPUSH
9098: LD_STRING DShar-slow-2
9100: PPUSH
9101: CALL_OW 94
// DialogueOff ;
9105: CALL_OW 7
// end ;
9109: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9110: LD_OWVAR 1
9114: PUSH
9115: LD_INT 84000
9117: PUSH
9118: LD_INT 75600
9120: PUSH
9121: LD_INT 67200
9123: PUSH
9124: LD_INT 63000
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: PUSH
9133: LD_OWVAR 67
9137: ARRAY
9138: GREATEREQUAL
9139: IFFALSE 9183
9141: GO 9143
9143: DISABLE
// begin DialogueOn ;
9144: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9148: LD_EXP 26
9152: PPUSH
9153: LD_STRING DShar-fail-1
9155: PPUSH
9156: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9160: LD_EXP 26
9164: PPUSH
9165: LD_STRING DShar-fail-2
9167: PPUSH
9168: CALL_OW 94
// DialogueOff ;
9172: CALL_OW 7
// YouLost ( Time ) ;
9176: LD_STRING Time
9178: PPUSH
9179: CALL_OW 104
// end ;
9183: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9184: LD_INT 22
9186: PUSH
9187: LD_INT 3
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: LD_INT 30
9199: PUSH
9200: LD_INT 1
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 30
9209: PUSH
9210: LD_INT 0
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PPUSH
9226: CALL_OW 69
9230: PUSH
9231: LD_INT 0
9233: EQUAL
9234: IFFALSE 9745
9236: GO 9238
9238: DISABLE
9239: LD_INT 0
9241: PPUSH
// begin if ( tick + gameTime ) <= [ 75 75$00 , 70 70$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9242: LD_OWVAR 1
9246: PUSH
9247: LD_EXP 5
9251: PLUS
9252: PUSH
9253: LD_INT 157500
9255: PUSH
9256: LD_INT 147000
9258: PUSH
9259: LD_INT 136500
9261: PUSH
9262: LD_INT 126000
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: PUSH
9271: LD_OWVAR 67
9275: ARRAY
9276: LESSEQUAL
9277: IFFALSE 9291
// AddMedal ( med1 , 1 ) else
9279: LD_STRING med1
9281: PPUSH
9282: LD_INT 1
9284: PPUSH
9285: CALL_OW 101
9289: GO 9302
// AddMedal ( med1 , - 1 ) ;
9291: LD_STRING med1
9293: PPUSH
9294: LD_INT 1
9296: NEG
9297: PPUSH
9298: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9302: LD_EXP 7
9306: PUSH
9307: LD_INT 3
9309: GREATEREQUAL
9310: PUSH
9311: LD_EXP 11
9315: MUL
9316: PUSH
9317: LD_EXP 9
9321: MUL
9322: PUSH
9323: LD_EXP 6
9327: PUSH
9328: LD_INT 6
9330: PUSH
9331: LD_INT 5
9333: PUSH
9334: LD_INT 4
9336: PUSH
9337: LD_INT 3
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: PUSH
9346: LD_OWVAR 67
9350: ARRAY
9351: LESS
9352: MUL
9353: IFFALSE 9367
// AddMedal ( med2 , 1 ) else
9355: LD_STRING med2
9357: PPUSH
9358: LD_INT 1
9360: PPUSH
9361: CALL_OW 101
9365: GO 9378
// AddMedal ( med2 , - 1 ) ;
9367: LD_STRING med2
9369: PPUSH
9370: LD_INT 1
9372: NEG
9373: PPUSH
9374: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9378: LD_EXP 14
9382: PPUSH
9383: LD_STRING 04_2_GaidarKilled
9385: PPUSH
9386: CALL_OW 39
// if gaidarKilled then
9390: LD_EXP 14
9394: IFFALSE 9408
// AddMedal ( med3 , 1 ) else
9396: LD_STRING med3
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 101
9406: GO 9419
// AddMedal ( med3 , - 1 ) ;
9408: LD_STRING med3
9410: PPUSH
9411: LD_INT 1
9413: NEG
9414: PPUSH
9415: CALL_OW 101
// GiveMedals ( MAIN ) ;
9419: LD_STRING MAIN
9421: PPUSH
9422: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9426: LD_INT 22
9428: PUSH
9429: LD_INT 2
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 3
9438: PUSH
9439: LD_INT 23
9441: PUSH
9442: LD_INT 0
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PPUSH
9457: CALL_OW 69
9461: PPUSH
9462: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9466: LD_EXP 18
9470: PPUSH
9471: LD_STRING 04_2_Heike
9473: PPUSH
9474: CALL_OW 38
// if Aviradze then
9478: LD_EXP 28
9482: IFFALSE 9496
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9484: LD_EXP 28
9488: PPUSH
9489: LD_STRING 04_2_Aviradze
9491: PPUSH
9492: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9496: LD_EXP 21
9500: PUSH
9501: LD_EXP 21
9505: PPUSH
9506: CALL_OW 255
9510: PUSH
9511: LD_INT 2
9513: EQUAL
9514: AND
9515: IFFALSE 9545
// begin if ibrahimOnRuSide then
9517: LD_EXP 3
9521: IFFALSE 9533
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9523: LD_INT 1
9525: PPUSH
9526: LD_STRING 04_2_IbrahimJoined
9528: PPUSH
9529: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9533: LD_EXP 21
9537: PPUSH
9538: LD_STRING 04_2_Ibrahim
9540: PPUSH
9541: CALL_OW 38
// end ; if Kamil then
9545: LD_EXP 22
9549: IFFALSE 9563
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
9551: LD_EXP 22
9555: PPUSH
9556: LD_STRING 04_2_Kamil
9558: PPUSH
9559: CALL_OW 38
// if Sophia then
9563: LD_EXP 24
9567: IFFALSE 9581
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
9569: LD_EXP 24
9573: PPUSH
9574: LD_STRING 04_2_Sophia
9576: PPUSH
9577: CALL_OW 38
// if Kaia then
9581: LD_EXP 23
9585: IFFALSE 9599
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
9587: LD_EXP 23
9591: PPUSH
9592: LD_STRING 04_2_Kaia
9594: PPUSH
9595: CALL_OW 38
// if Givi then
9599: LD_EXP 19
9603: IFFALSE 9617
// SaveCharacters ( Givi , 04_2_Givi ) ;
9605: LD_EXP 19
9609: PPUSH
9610: LD_STRING 04_2_Givi
9612: PPUSH
9613: CALL_OW 38
// if Mike then
9617: LD_EXP 20
9621: IFFALSE 9635
// SaveCharacters ( Mike , 04_2_Mike ) ;
9623: LD_EXP 20
9627: PPUSH
9628: LD_STRING 04_2_Mike
9630: PPUSH
9631: CALL_OW 38
// if Markov then
9635: LD_EXP 25
9639: IFFALSE 9653
// SaveCharacters ( Markov , 04_2_Markov ) ;
9641: LD_EXP 25
9645: PPUSH
9646: LD_STRING 04_2_Markov
9648: PPUSH
9649: CALL_OW 38
// if Kurt then
9653: LD_EXP 27
9657: IFFALSE 9671
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
9659: LD_EXP 27
9663: PPUSH
9664: LD_STRING 04_2_Kurt
9666: PPUSH
9667: CALL_OW 38
// if heikeSecondSquad then
9671: LD_EXP 29
9675: IFFALSE 9689
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
9677: LD_EXP 29
9681: PPUSH
9682: LD_STRING 04_2_others
9684: PPUSH
9685: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
9689: LD_ADDR_VAR 0 1
9693: PUSH
9694: LD_INT 22
9696: PUSH
9697: LD_INT 2
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 23
9706: PUSH
9707: LD_INT 0
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PPUSH
9718: CALL_OW 69
9722: ST_TO_ADDR
// if tmp then
9723: LD_VAR 0 1
9727: IFFALSE 9741
// SaveCharacters ( tmp , 04_2_apes ) ;
9729: LD_VAR 0 1
9733: PPUSH
9734: LD_STRING 04_2_apes
9736: PPUSH
9737: CALL_OW 38
// YouWin ;
9741: CALL_OW 103
// end ; end_of_file
9745: PPOPN 1
9747: END
// every 0 0$1 do
9748: GO 9750
9750: DISABLE
// begin enable ;
9751: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9752: LD_STRING updateTimer(
9754: PUSH
9755: LD_OWVAR 1
9759: STR
9760: PUSH
9761: LD_STRING );
9763: STR
9764: PPUSH
9765: CALL_OW 559
// end ;
9769: END
// on MapStart ( p ) do begin if streamModeActive then
9770: LD_EXP 43
9774: IFFALSE 9783
// DefineStreamItems ( true ) ;
9776: LD_INT 1
9778: PPUSH
9779: CALL 11431 0 1
// UpdateFactoryWaypoints ( ) ;
9783: CALL 25178 0 0
// end ;
9787: PPOPN 1
9789: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9790: LD_INT 0
9792: PPUSH
// if p2 = 100 then
9793: LD_VAR 0 2
9797: PUSH
9798: LD_INT 100
9800: EQUAL
9801: IFFALSE 10804
// begin if not StreamModeActive then
9803: LD_EXP 43
9807: NOT
9808: IFFALSE 9818
// StreamModeActive := true ;
9810: LD_ADDR_EXP 43
9814: PUSH
9815: LD_INT 1
9817: ST_TO_ADDR
// if p3 = 0 then
9818: LD_VAR 0 3
9822: PUSH
9823: LD_INT 0
9825: EQUAL
9826: IFFALSE 9832
// InitStreamMode ;
9828: CALL 10967 0 0
// if p3 = 1 then
9832: LD_VAR 0 3
9836: PUSH
9837: LD_INT 1
9839: EQUAL
9840: IFFALSE 9850
// sRocket := true ;
9842: LD_ADDR_EXP 48
9846: PUSH
9847: LD_INT 1
9849: ST_TO_ADDR
// if p3 = 2 then
9850: LD_VAR 0 3
9854: PUSH
9855: LD_INT 2
9857: EQUAL
9858: IFFALSE 9868
// sSpeed := true ;
9860: LD_ADDR_EXP 47
9864: PUSH
9865: LD_INT 1
9867: ST_TO_ADDR
// if p3 = 3 then
9868: LD_VAR 0 3
9872: PUSH
9873: LD_INT 3
9875: EQUAL
9876: IFFALSE 9886
// sEngine := true ;
9878: LD_ADDR_EXP 49
9882: PUSH
9883: LD_INT 1
9885: ST_TO_ADDR
// if p3 = 4 then
9886: LD_VAR 0 3
9890: PUSH
9891: LD_INT 4
9893: EQUAL
9894: IFFALSE 9904
// sSpec := true ;
9896: LD_ADDR_EXP 46
9900: PUSH
9901: LD_INT 1
9903: ST_TO_ADDR
// if p3 = 5 then
9904: LD_VAR 0 3
9908: PUSH
9909: LD_INT 5
9911: EQUAL
9912: IFFALSE 9922
// sLevel := true ;
9914: LD_ADDR_EXP 50
9918: PUSH
9919: LD_INT 1
9921: ST_TO_ADDR
// if p3 = 6 then
9922: LD_VAR 0 3
9926: PUSH
9927: LD_INT 6
9929: EQUAL
9930: IFFALSE 9940
// sArmoury := true ;
9932: LD_ADDR_EXP 51
9936: PUSH
9937: LD_INT 1
9939: ST_TO_ADDR
// if p3 = 7 then
9940: LD_VAR 0 3
9944: PUSH
9945: LD_INT 7
9947: EQUAL
9948: IFFALSE 9958
// sRadar := true ;
9950: LD_ADDR_EXP 52
9954: PUSH
9955: LD_INT 1
9957: ST_TO_ADDR
// if p3 = 8 then
9958: LD_VAR 0 3
9962: PUSH
9963: LD_INT 8
9965: EQUAL
9966: IFFALSE 9976
// sBunker := true ;
9968: LD_ADDR_EXP 53
9972: PUSH
9973: LD_INT 1
9975: ST_TO_ADDR
// if p3 = 9 then
9976: LD_VAR 0 3
9980: PUSH
9981: LD_INT 9
9983: EQUAL
9984: IFFALSE 9994
// sHack := true ;
9986: LD_ADDR_EXP 54
9990: PUSH
9991: LD_INT 1
9993: ST_TO_ADDR
// if p3 = 10 then
9994: LD_VAR 0 3
9998: PUSH
9999: LD_INT 10
10001: EQUAL
10002: IFFALSE 10012
// sFire := true ;
10004: LD_ADDR_EXP 55
10008: PUSH
10009: LD_INT 1
10011: ST_TO_ADDR
// if p3 = 11 then
10012: LD_VAR 0 3
10016: PUSH
10017: LD_INT 11
10019: EQUAL
10020: IFFALSE 10030
// sRefresh := true ;
10022: LD_ADDR_EXP 56
10026: PUSH
10027: LD_INT 1
10029: ST_TO_ADDR
// if p3 = 12 then
10030: LD_VAR 0 3
10034: PUSH
10035: LD_INT 12
10037: EQUAL
10038: IFFALSE 10048
// sExp := true ;
10040: LD_ADDR_EXP 57
10044: PUSH
10045: LD_INT 1
10047: ST_TO_ADDR
// if p3 = 13 then
10048: LD_VAR 0 3
10052: PUSH
10053: LD_INT 13
10055: EQUAL
10056: IFFALSE 10066
// sDepot := true ;
10058: LD_ADDR_EXP 58
10062: PUSH
10063: LD_INT 1
10065: ST_TO_ADDR
// if p3 = 14 then
10066: LD_VAR 0 3
10070: PUSH
10071: LD_INT 14
10073: EQUAL
10074: IFFALSE 10084
// sFlag := true ;
10076: LD_ADDR_EXP 59
10080: PUSH
10081: LD_INT 1
10083: ST_TO_ADDR
// if p3 = 15 then
10084: LD_VAR 0 3
10088: PUSH
10089: LD_INT 15
10091: EQUAL
10092: IFFALSE 10102
// sKamikadze := true ;
10094: LD_ADDR_EXP 67
10098: PUSH
10099: LD_INT 1
10101: ST_TO_ADDR
// if p3 = 16 then
10102: LD_VAR 0 3
10106: PUSH
10107: LD_INT 16
10109: EQUAL
10110: IFFALSE 10120
// sTroll := true ;
10112: LD_ADDR_EXP 68
10116: PUSH
10117: LD_INT 1
10119: ST_TO_ADDR
// if p3 = 17 then
10120: LD_VAR 0 3
10124: PUSH
10125: LD_INT 17
10127: EQUAL
10128: IFFALSE 10138
// sSlow := true ;
10130: LD_ADDR_EXP 69
10134: PUSH
10135: LD_INT 1
10137: ST_TO_ADDR
// if p3 = 18 then
10138: LD_VAR 0 3
10142: PUSH
10143: LD_INT 18
10145: EQUAL
10146: IFFALSE 10156
// sLack := true ;
10148: LD_ADDR_EXP 70
10152: PUSH
10153: LD_INT 1
10155: ST_TO_ADDR
// if p3 = 19 then
10156: LD_VAR 0 3
10160: PUSH
10161: LD_INT 19
10163: EQUAL
10164: IFFALSE 10174
// sTank := true ;
10166: LD_ADDR_EXP 72
10170: PUSH
10171: LD_INT 1
10173: ST_TO_ADDR
// if p3 = 20 then
10174: LD_VAR 0 3
10178: PUSH
10179: LD_INT 20
10181: EQUAL
10182: IFFALSE 10192
// sRemote := true ;
10184: LD_ADDR_EXP 73
10188: PUSH
10189: LD_INT 1
10191: ST_TO_ADDR
// if p3 = 21 then
10192: LD_VAR 0 3
10196: PUSH
10197: LD_INT 21
10199: EQUAL
10200: IFFALSE 10210
// sPowell := true ;
10202: LD_ADDR_EXP 74
10206: PUSH
10207: LD_INT 1
10209: ST_TO_ADDR
// if p3 = 22 then
10210: LD_VAR 0 3
10214: PUSH
10215: LD_INT 22
10217: EQUAL
10218: IFFALSE 10228
// sTeleport := true ;
10220: LD_ADDR_EXP 77
10224: PUSH
10225: LD_INT 1
10227: ST_TO_ADDR
// if p3 = 23 then
10228: LD_VAR 0 3
10232: PUSH
10233: LD_INT 23
10235: EQUAL
10236: IFFALSE 10246
// sOilTower := true ;
10238: LD_ADDR_EXP 79
10242: PUSH
10243: LD_INT 1
10245: ST_TO_ADDR
// if p3 = 24 then
10246: LD_VAR 0 3
10250: PUSH
10251: LD_INT 24
10253: EQUAL
10254: IFFALSE 10264
// sShovel := true ;
10256: LD_ADDR_EXP 80
10260: PUSH
10261: LD_INT 1
10263: ST_TO_ADDR
// if p3 = 25 then
10264: LD_VAR 0 3
10268: PUSH
10269: LD_INT 25
10271: EQUAL
10272: IFFALSE 10282
// sSheik := true ;
10274: LD_ADDR_EXP 81
10278: PUSH
10279: LD_INT 1
10281: ST_TO_ADDR
// if p3 = 26 then
10282: LD_VAR 0 3
10286: PUSH
10287: LD_INT 26
10289: EQUAL
10290: IFFALSE 10300
// sEarthquake := true ;
10292: LD_ADDR_EXP 83
10296: PUSH
10297: LD_INT 1
10299: ST_TO_ADDR
// if p3 = 27 then
10300: LD_VAR 0 3
10304: PUSH
10305: LD_INT 27
10307: EQUAL
10308: IFFALSE 10318
// sAI := true ;
10310: LD_ADDR_EXP 84
10314: PUSH
10315: LD_INT 1
10317: ST_TO_ADDR
// if p3 = 28 then
10318: LD_VAR 0 3
10322: PUSH
10323: LD_INT 28
10325: EQUAL
10326: IFFALSE 10336
// sCargo := true ;
10328: LD_ADDR_EXP 87
10332: PUSH
10333: LD_INT 1
10335: ST_TO_ADDR
// if p3 = 29 then
10336: LD_VAR 0 3
10340: PUSH
10341: LD_INT 29
10343: EQUAL
10344: IFFALSE 10354
// sDLaser := true ;
10346: LD_ADDR_EXP 88
10350: PUSH
10351: LD_INT 1
10353: ST_TO_ADDR
// if p3 = 30 then
10354: LD_VAR 0 3
10358: PUSH
10359: LD_INT 30
10361: EQUAL
10362: IFFALSE 10372
// sExchange := true ;
10364: LD_ADDR_EXP 89
10368: PUSH
10369: LD_INT 1
10371: ST_TO_ADDR
// if p3 = 31 then
10372: LD_VAR 0 3
10376: PUSH
10377: LD_INT 31
10379: EQUAL
10380: IFFALSE 10390
// sFac := true ;
10382: LD_ADDR_EXP 90
10386: PUSH
10387: LD_INT 1
10389: ST_TO_ADDR
// if p3 = 32 then
10390: LD_VAR 0 3
10394: PUSH
10395: LD_INT 32
10397: EQUAL
10398: IFFALSE 10408
// sPower := true ;
10400: LD_ADDR_EXP 91
10404: PUSH
10405: LD_INT 1
10407: ST_TO_ADDR
// if p3 = 33 then
10408: LD_VAR 0 3
10412: PUSH
10413: LD_INT 33
10415: EQUAL
10416: IFFALSE 10426
// sRandom := true ;
10418: LD_ADDR_EXP 92
10422: PUSH
10423: LD_INT 1
10425: ST_TO_ADDR
// if p3 = 34 then
10426: LD_VAR 0 3
10430: PUSH
10431: LD_INT 34
10433: EQUAL
10434: IFFALSE 10444
// sShield := true ;
10436: LD_ADDR_EXP 93
10440: PUSH
10441: LD_INT 1
10443: ST_TO_ADDR
// if p3 = 35 then
10444: LD_VAR 0 3
10448: PUSH
10449: LD_INT 35
10451: EQUAL
10452: IFFALSE 10462
// sTime := true ;
10454: LD_ADDR_EXP 94
10458: PUSH
10459: LD_INT 1
10461: ST_TO_ADDR
// if p3 = 36 then
10462: LD_VAR 0 3
10466: PUSH
10467: LD_INT 36
10469: EQUAL
10470: IFFALSE 10480
// sTools := true ;
10472: LD_ADDR_EXP 95
10476: PUSH
10477: LD_INT 1
10479: ST_TO_ADDR
// if p3 = 101 then
10480: LD_VAR 0 3
10484: PUSH
10485: LD_INT 101
10487: EQUAL
10488: IFFALSE 10498
// sSold := true ;
10490: LD_ADDR_EXP 60
10494: PUSH
10495: LD_INT 1
10497: ST_TO_ADDR
// if p3 = 102 then
10498: LD_VAR 0 3
10502: PUSH
10503: LD_INT 102
10505: EQUAL
10506: IFFALSE 10516
// sDiff := true ;
10508: LD_ADDR_EXP 61
10512: PUSH
10513: LD_INT 1
10515: ST_TO_ADDR
// if p3 = 103 then
10516: LD_VAR 0 3
10520: PUSH
10521: LD_INT 103
10523: EQUAL
10524: IFFALSE 10534
// sFog := true ;
10526: LD_ADDR_EXP 64
10530: PUSH
10531: LD_INT 1
10533: ST_TO_ADDR
// if p3 = 104 then
10534: LD_VAR 0 3
10538: PUSH
10539: LD_INT 104
10541: EQUAL
10542: IFFALSE 10552
// sReset := true ;
10544: LD_ADDR_EXP 65
10548: PUSH
10549: LD_INT 1
10551: ST_TO_ADDR
// if p3 = 105 then
10552: LD_VAR 0 3
10556: PUSH
10557: LD_INT 105
10559: EQUAL
10560: IFFALSE 10570
// sSun := true ;
10562: LD_ADDR_EXP 66
10566: PUSH
10567: LD_INT 1
10569: ST_TO_ADDR
// if p3 = 106 then
10570: LD_VAR 0 3
10574: PUSH
10575: LD_INT 106
10577: EQUAL
10578: IFFALSE 10588
// sTiger := true ;
10580: LD_ADDR_EXP 62
10584: PUSH
10585: LD_INT 1
10587: ST_TO_ADDR
// if p3 = 107 then
10588: LD_VAR 0 3
10592: PUSH
10593: LD_INT 107
10595: EQUAL
10596: IFFALSE 10606
// sBomb := true ;
10598: LD_ADDR_EXP 63
10602: PUSH
10603: LD_INT 1
10605: ST_TO_ADDR
// if p3 = 108 then
10606: LD_VAR 0 3
10610: PUSH
10611: LD_INT 108
10613: EQUAL
10614: IFFALSE 10624
// sWound := true ;
10616: LD_ADDR_EXP 71
10620: PUSH
10621: LD_INT 1
10623: ST_TO_ADDR
// if p3 = 109 then
10624: LD_VAR 0 3
10628: PUSH
10629: LD_INT 109
10631: EQUAL
10632: IFFALSE 10642
// sBetray := true ;
10634: LD_ADDR_EXP 75
10638: PUSH
10639: LD_INT 1
10641: ST_TO_ADDR
// if p3 = 110 then
10642: LD_VAR 0 3
10646: PUSH
10647: LD_INT 110
10649: EQUAL
10650: IFFALSE 10660
// sContamin := true ;
10652: LD_ADDR_EXP 76
10656: PUSH
10657: LD_INT 1
10659: ST_TO_ADDR
// if p3 = 111 then
10660: LD_VAR 0 3
10664: PUSH
10665: LD_INT 111
10667: EQUAL
10668: IFFALSE 10678
// sOil := true ;
10670: LD_ADDR_EXP 78
10674: PUSH
10675: LD_INT 1
10677: ST_TO_ADDR
// if p3 = 112 then
10678: LD_VAR 0 3
10682: PUSH
10683: LD_INT 112
10685: EQUAL
10686: IFFALSE 10696
// sStu := true ;
10688: LD_ADDR_EXP 82
10692: PUSH
10693: LD_INT 1
10695: ST_TO_ADDR
// if p3 = 113 then
10696: LD_VAR 0 3
10700: PUSH
10701: LD_INT 113
10703: EQUAL
10704: IFFALSE 10714
// sBazooka := true ;
10706: LD_ADDR_EXP 85
10710: PUSH
10711: LD_INT 1
10713: ST_TO_ADDR
// if p3 = 114 then
10714: LD_VAR 0 3
10718: PUSH
10719: LD_INT 114
10721: EQUAL
10722: IFFALSE 10732
// sMortar := true ;
10724: LD_ADDR_EXP 86
10728: PUSH
10729: LD_INT 1
10731: ST_TO_ADDR
// if p3 = 115 then
10732: LD_VAR 0 3
10736: PUSH
10737: LD_INT 115
10739: EQUAL
10740: IFFALSE 10750
// sRanger := true ;
10742: LD_ADDR_EXP 96
10746: PUSH
10747: LD_INT 1
10749: ST_TO_ADDR
// if p3 = 116 then
10750: LD_VAR 0 3
10754: PUSH
10755: LD_INT 116
10757: EQUAL
10758: IFFALSE 10768
// sComputer := true ;
10760: LD_ADDR_EXP 97
10764: PUSH
10765: LD_INT 1
10767: ST_TO_ADDR
// if p3 = 117 then
10768: LD_VAR 0 3
10772: PUSH
10773: LD_INT 117
10775: EQUAL
10776: IFFALSE 10786
// s30 := true ;
10778: LD_ADDR_EXP 98
10782: PUSH
10783: LD_INT 1
10785: ST_TO_ADDR
// if p3 = 118 then
10786: LD_VAR 0 3
10790: PUSH
10791: LD_INT 118
10793: EQUAL
10794: IFFALSE 10804
// s60 := true ;
10796: LD_ADDR_EXP 99
10800: PUSH
10801: LD_INT 1
10803: ST_TO_ADDR
// end ; if p2 = 101 then
10804: LD_VAR 0 2
10808: PUSH
10809: LD_INT 101
10811: EQUAL
10812: IFFALSE 10940
// begin case p3 of 1 :
10814: LD_VAR 0 3
10818: PUSH
10819: LD_INT 1
10821: DOUBLE
10822: EQUAL
10823: IFTRUE 10827
10825: GO 10834
10827: POP
// hHackUnlimitedResources ; 2 :
10828: CALL 23038 0 0
10832: GO 10940
10834: LD_INT 2
10836: DOUBLE
10837: EQUAL
10838: IFTRUE 10842
10840: GO 10849
10842: POP
// hHackSetLevel10 ; 3 :
10843: CALL 23171 0 0
10847: GO 10940
10849: LD_INT 3
10851: DOUBLE
10852: EQUAL
10853: IFTRUE 10857
10855: GO 10864
10857: POP
// hHackSetLevel10YourUnits ; 4 :
10858: CALL 23256 0 0
10862: GO 10940
10864: LD_INT 4
10866: DOUBLE
10867: EQUAL
10868: IFTRUE 10872
10870: GO 10879
10872: POP
// hHackInvincible ; 5 :
10873: CALL 23704 0 0
10877: GO 10940
10879: LD_INT 5
10881: DOUBLE
10882: EQUAL
10883: IFTRUE 10887
10885: GO 10894
10887: POP
// hHackInvisible ; 6 :
10888: CALL 23815 0 0
10892: GO 10940
10894: LD_INT 6
10896: DOUBLE
10897: EQUAL
10898: IFTRUE 10902
10900: GO 10909
10902: POP
// hHackChangeYourSide ; 7 :
10903: CALL 23872 0 0
10907: GO 10940
10909: LD_INT 7
10911: DOUBLE
10912: EQUAL
10913: IFTRUE 10917
10915: GO 10924
10917: POP
// hHackChangeUnitSide ; 8 :
10918: CALL 23914 0 0
10922: GO 10940
10924: LD_INT 8
10926: DOUBLE
10927: EQUAL
10928: IFTRUE 10932
10930: GO 10939
10932: POP
// hHackFog ; end ;
10933: CALL 24015 0 0
10937: GO 10940
10939: POP
// end ; end ;
10940: LD_VAR 0 7
10944: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
10945: GO 10947
10947: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10948: LD_STRING initStreamRollete();
10950: PPUSH
10951: CALL_OW 559
// InitStreamMode ;
10955: CALL 10967 0 0
// DefineStreamItems ( false ) ;
10959: LD_INT 0
10961: PPUSH
10962: CALL 11431 0 1
// end ;
10966: END
// function InitStreamMode ; begin
10967: LD_INT 0
10969: PPUSH
// streamModeActive := false ;
10970: LD_ADDR_EXP 43
10974: PUSH
10975: LD_INT 0
10977: ST_TO_ADDR
// normalCounter := 36 ;
10978: LD_ADDR_EXP 44
10982: PUSH
10983: LD_INT 36
10985: ST_TO_ADDR
// hardcoreCounter := 18 ;
10986: LD_ADDR_EXP 45
10990: PUSH
10991: LD_INT 18
10993: ST_TO_ADDR
// sRocket := false ;
10994: LD_ADDR_EXP 48
10998: PUSH
10999: LD_INT 0
11001: ST_TO_ADDR
// sSpeed := false ;
11002: LD_ADDR_EXP 47
11006: PUSH
11007: LD_INT 0
11009: ST_TO_ADDR
// sEngine := false ;
11010: LD_ADDR_EXP 49
11014: PUSH
11015: LD_INT 0
11017: ST_TO_ADDR
// sSpec := false ;
11018: LD_ADDR_EXP 46
11022: PUSH
11023: LD_INT 0
11025: ST_TO_ADDR
// sLevel := false ;
11026: LD_ADDR_EXP 50
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// sArmoury := false ;
11034: LD_ADDR_EXP 51
11038: PUSH
11039: LD_INT 0
11041: ST_TO_ADDR
// sRadar := false ;
11042: LD_ADDR_EXP 52
11046: PUSH
11047: LD_INT 0
11049: ST_TO_ADDR
// sBunker := false ;
11050: LD_ADDR_EXP 53
11054: PUSH
11055: LD_INT 0
11057: ST_TO_ADDR
// sHack := false ;
11058: LD_ADDR_EXP 54
11062: PUSH
11063: LD_INT 0
11065: ST_TO_ADDR
// sFire := false ;
11066: LD_ADDR_EXP 55
11070: PUSH
11071: LD_INT 0
11073: ST_TO_ADDR
// sRefresh := false ;
11074: LD_ADDR_EXP 56
11078: PUSH
11079: LD_INT 0
11081: ST_TO_ADDR
// sExp := false ;
11082: LD_ADDR_EXP 57
11086: PUSH
11087: LD_INT 0
11089: ST_TO_ADDR
// sDepot := false ;
11090: LD_ADDR_EXP 58
11094: PUSH
11095: LD_INT 0
11097: ST_TO_ADDR
// sFlag := false ;
11098: LD_ADDR_EXP 59
11102: PUSH
11103: LD_INT 0
11105: ST_TO_ADDR
// sKamikadze := false ;
11106: LD_ADDR_EXP 67
11110: PUSH
11111: LD_INT 0
11113: ST_TO_ADDR
// sTroll := false ;
11114: LD_ADDR_EXP 68
11118: PUSH
11119: LD_INT 0
11121: ST_TO_ADDR
// sSlow := false ;
11122: LD_ADDR_EXP 69
11126: PUSH
11127: LD_INT 0
11129: ST_TO_ADDR
// sLack := false ;
11130: LD_ADDR_EXP 70
11134: PUSH
11135: LD_INT 0
11137: ST_TO_ADDR
// sTank := false ;
11138: LD_ADDR_EXP 72
11142: PUSH
11143: LD_INT 0
11145: ST_TO_ADDR
// sRemote := false ;
11146: LD_ADDR_EXP 73
11150: PUSH
11151: LD_INT 0
11153: ST_TO_ADDR
// sPowell := false ;
11154: LD_ADDR_EXP 74
11158: PUSH
11159: LD_INT 0
11161: ST_TO_ADDR
// sTeleport := false ;
11162: LD_ADDR_EXP 77
11166: PUSH
11167: LD_INT 0
11169: ST_TO_ADDR
// sOilTower := false ;
11170: LD_ADDR_EXP 79
11174: PUSH
11175: LD_INT 0
11177: ST_TO_ADDR
// sShovel := false ;
11178: LD_ADDR_EXP 80
11182: PUSH
11183: LD_INT 0
11185: ST_TO_ADDR
// sSheik := false ;
11186: LD_ADDR_EXP 81
11190: PUSH
11191: LD_INT 0
11193: ST_TO_ADDR
// sEarthquake := false ;
11194: LD_ADDR_EXP 83
11198: PUSH
11199: LD_INT 0
11201: ST_TO_ADDR
// sAI := false ;
11202: LD_ADDR_EXP 84
11206: PUSH
11207: LD_INT 0
11209: ST_TO_ADDR
// sCargo := false ;
11210: LD_ADDR_EXP 87
11214: PUSH
11215: LD_INT 0
11217: ST_TO_ADDR
// sDLaser := false ;
11218: LD_ADDR_EXP 88
11222: PUSH
11223: LD_INT 0
11225: ST_TO_ADDR
// sExchange := false ;
11226: LD_ADDR_EXP 89
11230: PUSH
11231: LD_INT 0
11233: ST_TO_ADDR
// sFac := false ;
11234: LD_ADDR_EXP 90
11238: PUSH
11239: LD_INT 0
11241: ST_TO_ADDR
// sPower := false ;
11242: LD_ADDR_EXP 91
11246: PUSH
11247: LD_INT 0
11249: ST_TO_ADDR
// sRandom := false ;
11250: LD_ADDR_EXP 92
11254: PUSH
11255: LD_INT 0
11257: ST_TO_ADDR
// sShield := false ;
11258: LD_ADDR_EXP 93
11262: PUSH
11263: LD_INT 0
11265: ST_TO_ADDR
// sTime := false ;
11266: LD_ADDR_EXP 94
11270: PUSH
11271: LD_INT 0
11273: ST_TO_ADDR
// sTools := false ;
11274: LD_ADDR_EXP 95
11278: PUSH
11279: LD_INT 0
11281: ST_TO_ADDR
// sSold := false ;
11282: LD_ADDR_EXP 60
11286: PUSH
11287: LD_INT 0
11289: ST_TO_ADDR
// sDiff := false ;
11290: LD_ADDR_EXP 61
11294: PUSH
11295: LD_INT 0
11297: ST_TO_ADDR
// sFog := false ;
11298: LD_ADDR_EXP 64
11302: PUSH
11303: LD_INT 0
11305: ST_TO_ADDR
// sReset := false ;
11306: LD_ADDR_EXP 65
11310: PUSH
11311: LD_INT 0
11313: ST_TO_ADDR
// sSun := false ;
11314: LD_ADDR_EXP 66
11318: PUSH
11319: LD_INT 0
11321: ST_TO_ADDR
// sTiger := false ;
11322: LD_ADDR_EXP 62
11326: PUSH
11327: LD_INT 0
11329: ST_TO_ADDR
// sBomb := false ;
11330: LD_ADDR_EXP 63
11334: PUSH
11335: LD_INT 0
11337: ST_TO_ADDR
// sWound := false ;
11338: LD_ADDR_EXP 71
11342: PUSH
11343: LD_INT 0
11345: ST_TO_ADDR
// sBetray := false ;
11346: LD_ADDR_EXP 75
11350: PUSH
11351: LD_INT 0
11353: ST_TO_ADDR
// sContamin := false ;
11354: LD_ADDR_EXP 76
11358: PUSH
11359: LD_INT 0
11361: ST_TO_ADDR
// sOil := false ;
11362: LD_ADDR_EXP 78
11366: PUSH
11367: LD_INT 0
11369: ST_TO_ADDR
// sStu := false ;
11370: LD_ADDR_EXP 82
11374: PUSH
11375: LD_INT 0
11377: ST_TO_ADDR
// sBazooka := false ;
11378: LD_ADDR_EXP 85
11382: PUSH
11383: LD_INT 0
11385: ST_TO_ADDR
// sMortar := false ;
11386: LD_ADDR_EXP 86
11390: PUSH
11391: LD_INT 0
11393: ST_TO_ADDR
// sRanger := false ;
11394: LD_ADDR_EXP 96
11398: PUSH
11399: LD_INT 0
11401: ST_TO_ADDR
// sComputer := false ;
11402: LD_ADDR_EXP 97
11406: PUSH
11407: LD_INT 0
11409: ST_TO_ADDR
// s30 := false ;
11410: LD_ADDR_EXP 98
11414: PUSH
11415: LD_INT 0
11417: ST_TO_ADDR
// s60 := false ;
11418: LD_ADDR_EXP 99
11422: PUSH
11423: LD_INT 0
11425: ST_TO_ADDR
// end ;
11426: LD_VAR 0 1
11430: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11431: LD_INT 0
11433: PPUSH
11434: PPUSH
11435: PPUSH
11436: PPUSH
11437: PPUSH
11438: PPUSH
11439: PPUSH
// result := [ ] ;
11440: LD_ADDR_VAR 0 2
11444: PUSH
11445: EMPTY
11446: ST_TO_ADDR
// if campaign_id = 1 then
11447: LD_OWVAR 69
11451: PUSH
11452: LD_INT 1
11454: EQUAL
11455: IFFALSE 14621
// begin case mission_number of 1 :
11457: LD_OWVAR 70
11461: PUSH
11462: LD_INT 1
11464: DOUBLE
11465: EQUAL
11466: IFTRUE 11470
11468: GO 11546
11470: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11471: LD_ADDR_VAR 0 2
11475: PUSH
11476: LD_INT 2
11478: PUSH
11479: LD_INT 4
11481: PUSH
11482: LD_INT 11
11484: PUSH
11485: LD_INT 12
11487: PUSH
11488: LD_INT 15
11490: PUSH
11491: LD_INT 16
11493: PUSH
11494: LD_INT 22
11496: PUSH
11497: LD_INT 23
11499: PUSH
11500: LD_INT 26
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 101
11516: PUSH
11517: LD_INT 102
11519: PUSH
11520: LD_INT 106
11522: PUSH
11523: LD_INT 116
11525: PUSH
11526: LD_INT 117
11528: PUSH
11529: LD_INT 118
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: ST_TO_ADDR
11544: GO 14619
11546: LD_INT 2
11548: DOUBLE
11549: EQUAL
11550: IFTRUE 11554
11552: GO 11638
11554: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11555: LD_ADDR_VAR 0 2
11559: PUSH
11560: LD_INT 2
11562: PUSH
11563: LD_INT 4
11565: PUSH
11566: LD_INT 11
11568: PUSH
11569: LD_INT 12
11571: PUSH
11572: LD_INT 15
11574: PUSH
11575: LD_INT 16
11577: PUSH
11578: LD_INT 22
11580: PUSH
11581: LD_INT 23
11583: PUSH
11584: LD_INT 26
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 101
11600: PUSH
11601: LD_INT 102
11603: PUSH
11604: LD_INT 105
11606: PUSH
11607: LD_INT 106
11609: PUSH
11610: LD_INT 108
11612: PUSH
11613: LD_INT 116
11615: PUSH
11616: LD_INT 117
11618: PUSH
11619: LD_INT 118
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: ST_TO_ADDR
11636: GO 14619
11638: LD_INT 3
11640: DOUBLE
11641: EQUAL
11642: IFTRUE 11646
11644: GO 11734
11646: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_INT 2
11654: PUSH
11655: LD_INT 4
11657: PUSH
11658: LD_INT 5
11660: PUSH
11661: LD_INT 11
11663: PUSH
11664: LD_INT 12
11666: PUSH
11667: LD_INT 15
11669: PUSH
11670: LD_INT 16
11672: PUSH
11673: LD_INT 22
11675: PUSH
11676: LD_INT 26
11678: PUSH
11679: LD_INT 36
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: PUSH
11694: LD_INT 101
11696: PUSH
11697: LD_INT 102
11699: PUSH
11700: LD_INT 105
11702: PUSH
11703: LD_INT 106
11705: PUSH
11706: LD_INT 108
11708: PUSH
11709: LD_INT 116
11711: PUSH
11712: LD_INT 117
11714: PUSH
11715: LD_INT 118
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: ST_TO_ADDR
11732: GO 14619
11734: LD_INT 4
11736: DOUBLE
11737: EQUAL
11738: IFTRUE 11742
11740: GO 11838
11742: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11743: LD_ADDR_VAR 0 2
11747: PUSH
11748: LD_INT 2
11750: PUSH
11751: LD_INT 4
11753: PUSH
11754: LD_INT 5
11756: PUSH
11757: LD_INT 8
11759: PUSH
11760: LD_INT 11
11762: PUSH
11763: LD_INT 12
11765: PUSH
11766: LD_INT 15
11768: PUSH
11769: LD_INT 16
11771: PUSH
11772: LD_INT 22
11774: PUSH
11775: LD_INT 23
11777: PUSH
11778: LD_INT 26
11780: PUSH
11781: LD_INT 36
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: PUSH
11798: LD_INT 101
11800: PUSH
11801: LD_INT 102
11803: PUSH
11804: LD_INT 105
11806: PUSH
11807: LD_INT 106
11809: PUSH
11810: LD_INT 108
11812: PUSH
11813: LD_INT 116
11815: PUSH
11816: LD_INT 117
11818: PUSH
11819: LD_INT 118
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: ST_TO_ADDR
11836: GO 14619
11838: LD_INT 5
11840: DOUBLE
11841: EQUAL
11842: IFTRUE 11846
11844: GO 11958
11846: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11847: LD_ADDR_VAR 0 2
11851: PUSH
11852: LD_INT 2
11854: PUSH
11855: LD_INT 4
11857: PUSH
11858: LD_INT 5
11860: PUSH
11861: LD_INT 6
11863: PUSH
11864: LD_INT 8
11866: PUSH
11867: LD_INT 11
11869: PUSH
11870: LD_INT 12
11872: PUSH
11873: LD_INT 15
11875: PUSH
11876: LD_INT 16
11878: PUSH
11879: LD_INT 22
11881: PUSH
11882: LD_INT 23
11884: PUSH
11885: LD_INT 25
11887: PUSH
11888: LD_INT 26
11890: PUSH
11891: LD_INT 36
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 101
11912: PUSH
11913: LD_INT 102
11915: PUSH
11916: LD_INT 105
11918: PUSH
11919: LD_INT 106
11921: PUSH
11922: LD_INT 108
11924: PUSH
11925: LD_INT 109
11927: PUSH
11928: LD_INT 112
11930: PUSH
11931: LD_INT 116
11933: PUSH
11934: LD_INT 117
11936: PUSH
11937: LD_INT 118
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: ST_TO_ADDR
11956: GO 14619
11958: LD_INT 6
11960: DOUBLE
11961: EQUAL
11962: IFTRUE 11966
11964: GO 12098
11966: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11967: LD_ADDR_VAR 0 2
11971: PUSH
11972: LD_INT 2
11974: PUSH
11975: LD_INT 4
11977: PUSH
11978: LD_INT 5
11980: PUSH
11981: LD_INT 6
11983: PUSH
11984: LD_INT 8
11986: PUSH
11987: LD_INT 11
11989: PUSH
11990: LD_INT 12
11992: PUSH
11993: LD_INT 15
11995: PUSH
11996: LD_INT 16
11998: PUSH
11999: LD_INT 20
12001: PUSH
12002: LD_INT 21
12004: PUSH
12005: LD_INT 22
12007: PUSH
12008: LD_INT 23
12010: PUSH
12011: LD_INT 25
12013: PUSH
12014: LD_INT 26
12016: PUSH
12017: LD_INT 30
12019: PUSH
12020: LD_INT 31
12022: PUSH
12023: LD_INT 32
12025: PUSH
12026: LD_INT 36
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 101
12052: PUSH
12053: LD_INT 102
12055: PUSH
12056: LD_INT 105
12058: PUSH
12059: LD_INT 106
12061: PUSH
12062: LD_INT 108
12064: PUSH
12065: LD_INT 109
12067: PUSH
12068: LD_INT 112
12070: PUSH
12071: LD_INT 116
12073: PUSH
12074: LD_INT 117
12076: PUSH
12077: LD_INT 118
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: ST_TO_ADDR
12096: GO 14619
12098: LD_INT 7
12100: DOUBLE
12101: EQUAL
12102: IFTRUE 12106
12104: GO 12218
12106: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12107: LD_ADDR_VAR 0 2
12111: PUSH
12112: LD_INT 2
12114: PUSH
12115: LD_INT 4
12117: PUSH
12118: LD_INT 5
12120: PUSH
12121: LD_INT 7
12123: PUSH
12124: LD_INT 11
12126: PUSH
12127: LD_INT 12
12129: PUSH
12130: LD_INT 15
12132: PUSH
12133: LD_INT 16
12135: PUSH
12136: LD_INT 20
12138: PUSH
12139: LD_INT 21
12141: PUSH
12142: LD_INT 22
12144: PUSH
12145: LD_INT 23
12147: PUSH
12148: LD_INT 25
12150: PUSH
12151: LD_INT 26
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 101
12172: PUSH
12173: LD_INT 102
12175: PUSH
12176: LD_INT 103
12178: PUSH
12179: LD_INT 105
12181: PUSH
12182: LD_INT 106
12184: PUSH
12185: LD_INT 108
12187: PUSH
12188: LD_INT 112
12190: PUSH
12191: LD_INT 116
12193: PUSH
12194: LD_INT 117
12196: PUSH
12197: LD_INT 118
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: ST_TO_ADDR
12216: GO 14619
12218: LD_INT 8
12220: DOUBLE
12221: EQUAL
12222: IFTRUE 12226
12224: GO 12366
12226: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12227: LD_ADDR_VAR 0 2
12231: PUSH
12232: LD_INT 2
12234: PUSH
12235: LD_INT 4
12237: PUSH
12238: LD_INT 5
12240: PUSH
12241: LD_INT 6
12243: PUSH
12244: LD_INT 7
12246: PUSH
12247: LD_INT 8
12249: PUSH
12250: LD_INT 11
12252: PUSH
12253: LD_INT 12
12255: PUSH
12256: LD_INT 15
12258: PUSH
12259: LD_INT 16
12261: PUSH
12262: LD_INT 20
12264: PUSH
12265: LD_INT 21
12267: PUSH
12268: LD_INT 22
12270: PUSH
12271: LD_INT 23
12273: PUSH
12274: LD_INT 25
12276: PUSH
12277: LD_INT 26
12279: PUSH
12280: LD_INT 30
12282: PUSH
12283: LD_INT 31
12285: PUSH
12286: LD_INT 32
12288: PUSH
12289: LD_INT 36
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 101
12316: PUSH
12317: LD_INT 102
12319: PUSH
12320: LD_INT 103
12322: PUSH
12323: LD_INT 105
12325: PUSH
12326: LD_INT 106
12328: PUSH
12329: LD_INT 108
12331: PUSH
12332: LD_INT 109
12334: PUSH
12335: LD_INT 112
12337: PUSH
12338: LD_INT 116
12340: PUSH
12341: LD_INT 117
12343: PUSH
12344: LD_INT 118
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: ST_TO_ADDR
12364: GO 14619
12366: LD_INT 9
12368: DOUBLE
12369: EQUAL
12370: IFTRUE 12374
12372: GO 12522
12374: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12375: LD_ADDR_VAR 0 2
12379: PUSH
12380: LD_INT 2
12382: PUSH
12383: LD_INT 4
12385: PUSH
12386: LD_INT 5
12388: PUSH
12389: LD_INT 6
12391: PUSH
12392: LD_INT 7
12394: PUSH
12395: LD_INT 8
12397: PUSH
12398: LD_INT 11
12400: PUSH
12401: LD_INT 12
12403: PUSH
12404: LD_INT 15
12406: PUSH
12407: LD_INT 16
12409: PUSH
12410: LD_INT 20
12412: PUSH
12413: LD_INT 21
12415: PUSH
12416: LD_INT 22
12418: PUSH
12419: LD_INT 23
12421: PUSH
12422: LD_INT 25
12424: PUSH
12425: LD_INT 26
12427: PUSH
12428: LD_INT 28
12430: PUSH
12431: LD_INT 30
12433: PUSH
12434: LD_INT 31
12436: PUSH
12437: LD_INT 32
12439: PUSH
12440: LD_INT 36
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 101
12468: PUSH
12469: LD_INT 102
12471: PUSH
12472: LD_INT 103
12474: PUSH
12475: LD_INT 105
12477: PUSH
12478: LD_INT 106
12480: PUSH
12481: LD_INT 108
12483: PUSH
12484: LD_INT 109
12486: PUSH
12487: LD_INT 112
12489: PUSH
12490: LD_INT 114
12492: PUSH
12493: LD_INT 116
12495: PUSH
12496: LD_INT 117
12498: PUSH
12499: LD_INT 118
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: ST_TO_ADDR
12520: GO 14619
12522: LD_INT 10
12524: DOUBLE
12525: EQUAL
12526: IFTRUE 12530
12528: GO 12726
12530: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12531: LD_ADDR_VAR 0 2
12535: PUSH
12536: LD_INT 2
12538: PUSH
12539: LD_INT 4
12541: PUSH
12542: LD_INT 5
12544: PUSH
12545: LD_INT 6
12547: PUSH
12548: LD_INT 7
12550: PUSH
12551: LD_INT 8
12553: PUSH
12554: LD_INT 9
12556: PUSH
12557: LD_INT 10
12559: PUSH
12560: LD_INT 11
12562: PUSH
12563: LD_INT 12
12565: PUSH
12566: LD_INT 13
12568: PUSH
12569: LD_INT 14
12571: PUSH
12572: LD_INT 15
12574: PUSH
12575: LD_INT 16
12577: PUSH
12578: LD_INT 17
12580: PUSH
12581: LD_INT 18
12583: PUSH
12584: LD_INT 19
12586: PUSH
12587: LD_INT 20
12589: PUSH
12590: LD_INT 21
12592: PUSH
12593: LD_INT 22
12595: PUSH
12596: LD_INT 23
12598: PUSH
12599: LD_INT 24
12601: PUSH
12602: LD_INT 25
12604: PUSH
12605: LD_INT 26
12607: PUSH
12608: LD_INT 28
12610: PUSH
12611: LD_INT 30
12613: PUSH
12614: LD_INT 31
12616: PUSH
12617: LD_INT 32
12619: PUSH
12620: LD_INT 36
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: PUSH
12654: LD_INT 101
12656: PUSH
12657: LD_INT 102
12659: PUSH
12660: LD_INT 103
12662: PUSH
12663: LD_INT 104
12665: PUSH
12666: LD_INT 105
12668: PUSH
12669: LD_INT 106
12671: PUSH
12672: LD_INT 107
12674: PUSH
12675: LD_INT 108
12677: PUSH
12678: LD_INT 109
12680: PUSH
12681: LD_INT 110
12683: PUSH
12684: LD_INT 111
12686: PUSH
12687: LD_INT 112
12689: PUSH
12690: LD_INT 114
12692: PUSH
12693: LD_INT 116
12695: PUSH
12696: LD_INT 117
12698: PUSH
12699: LD_INT 118
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: ST_TO_ADDR
12724: GO 14619
12726: LD_INT 11
12728: DOUBLE
12729: EQUAL
12730: IFTRUE 12734
12732: GO 12938
12734: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12735: LD_ADDR_VAR 0 2
12739: PUSH
12740: LD_INT 2
12742: PUSH
12743: LD_INT 3
12745: PUSH
12746: LD_INT 4
12748: PUSH
12749: LD_INT 5
12751: PUSH
12752: LD_INT 6
12754: PUSH
12755: LD_INT 7
12757: PUSH
12758: LD_INT 8
12760: PUSH
12761: LD_INT 9
12763: PUSH
12764: LD_INT 10
12766: PUSH
12767: LD_INT 11
12769: PUSH
12770: LD_INT 12
12772: PUSH
12773: LD_INT 13
12775: PUSH
12776: LD_INT 14
12778: PUSH
12779: LD_INT 15
12781: PUSH
12782: LD_INT 16
12784: PUSH
12785: LD_INT 17
12787: PUSH
12788: LD_INT 18
12790: PUSH
12791: LD_INT 19
12793: PUSH
12794: LD_INT 20
12796: PUSH
12797: LD_INT 21
12799: PUSH
12800: LD_INT 22
12802: PUSH
12803: LD_INT 23
12805: PUSH
12806: LD_INT 24
12808: PUSH
12809: LD_INT 25
12811: PUSH
12812: LD_INT 26
12814: PUSH
12815: LD_INT 28
12817: PUSH
12818: LD_INT 30
12820: PUSH
12821: LD_INT 31
12823: PUSH
12824: LD_INT 32
12826: PUSH
12827: LD_INT 34
12829: PUSH
12830: LD_INT 36
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 101
12868: PUSH
12869: LD_INT 102
12871: PUSH
12872: LD_INT 103
12874: PUSH
12875: LD_INT 104
12877: PUSH
12878: LD_INT 105
12880: PUSH
12881: LD_INT 106
12883: PUSH
12884: LD_INT 107
12886: PUSH
12887: LD_INT 108
12889: PUSH
12890: LD_INT 109
12892: PUSH
12893: LD_INT 110
12895: PUSH
12896: LD_INT 111
12898: PUSH
12899: LD_INT 112
12901: PUSH
12902: LD_INT 114
12904: PUSH
12905: LD_INT 116
12907: PUSH
12908: LD_INT 117
12910: PUSH
12911: LD_INT 118
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: ST_TO_ADDR
12936: GO 14619
12938: LD_INT 12
12940: DOUBLE
12941: EQUAL
12942: IFTRUE 12946
12944: GO 13166
12946: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12947: LD_ADDR_VAR 0 2
12951: PUSH
12952: LD_INT 1
12954: PUSH
12955: LD_INT 2
12957: PUSH
12958: LD_INT 3
12960: PUSH
12961: LD_INT 4
12963: PUSH
12964: LD_INT 5
12966: PUSH
12967: LD_INT 6
12969: PUSH
12970: LD_INT 7
12972: PUSH
12973: LD_INT 8
12975: PUSH
12976: LD_INT 9
12978: PUSH
12979: LD_INT 10
12981: PUSH
12982: LD_INT 11
12984: PUSH
12985: LD_INT 12
12987: PUSH
12988: LD_INT 13
12990: PUSH
12991: LD_INT 14
12993: PUSH
12994: LD_INT 15
12996: PUSH
12997: LD_INT 16
12999: PUSH
13000: LD_INT 17
13002: PUSH
13003: LD_INT 18
13005: PUSH
13006: LD_INT 19
13008: PUSH
13009: LD_INT 20
13011: PUSH
13012: LD_INT 21
13014: PUSH
13015: LD_INT 22
13017: PUSH
13018: LD_INT 23
13020: PUSH
13021: LD_INT 24
13023: PUSH
13024: LD_INT 25
13026: PUSH
13027: LD_INT 26
13029: PUSH
13030: LD_INT 27
13032: PUSH
13033: LD_INT 28
13035: PUSH
13036: LD_INT 30
13038: PUSH
13039: LD_INT 31
13041: PUSH
13042: LD_INT 32
13044: PUSH
13045: LD_INT 33
13047: PUSH
13048: LD_INT 34
13050: PUSH
13051: LD_INT 36
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 101
13092: PUSH
13093: LD_INT 102
13095: PUSH
13096: LD_INT 103
13098: PUSH
13099: LD_INT 104
13101: PUSH
13102: LD_INT 105
13104: PUSH
13105: LD_INT 106
13107: PUSH
13108: LD_INT 107
13110: PUSH
13111: LD_INT 108
13113: PUSH
13114: LD_INT 109
13116: PUSH
13117: LD_INT 110
13119: PUSH
13120: LD_INT 111
13122: PUSH
13123: LD_INT 112
13125: PUSH
13126: LD_INT 113
13128: PUSH
13129: LD_INT 114
13131: PUSH
13132: LD_INT 116
13134: PUSH
13135: LD_INT 117
13137: PUSH
13138: LD_INT 118
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: ST_TO_ADDR
13164: GO 14619
13166: LD_INT 13
13168: DOUBLE
13169: EQUAL
13170: IFTRUE 13174
13172: GO 13382
13174: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13175: LD_ADDR_VAR 0 2
13179: PUSH
13180: LD_INT 1
13182: PUSH
13183: LD_INT 2
13185: PUSH
13186: LD_INT 3
13188: PUSH
13189: LD_INT 4
13191: PUSH
13192: LD_INT 5
13194: PUSH
13195: LD_INT 8
13197: PUSH
13198: LD_INT 9
13200: PUSH
13201: LD_INT 10
13203: PUSH
13204: LD_INT 11
13206: PUSH
13207: LD_INT 12
13209: PUSH
13210: LD_INT 14
13212: PUSH
13213: LD_INT 15
13215: PUSH
13216: LD_INT 16
13218: PUSH
13219: LD_INT 17
13221: PUSH
13222: LD_INT 18
13224: PUSH
13225: LD_INT 19
13227: PUSH
13228: LD_INT 20
13230: PUSH
13231: LD_INT 21
13233: PUSH
13234: LD_INT 22
13236: PUSH
13237: LD_INT 23
13239: PUSH
13240: LD_INT 24
13242: PUSH
13243: LD_INT 25
13245: PUSH
13246: LD_INT 26
13248: PUSH
13249: LD_INT 27
13251: PUSH
13252: LD_INT 28
13254: PUSH
13255: LD_INT 30
13257: PUSH
13258: LD_INT 31
13260: PUSH
13261: LD_INT 32
13263: PUSH
13264: LD_INT 33
13266: PUSH
13267: LD_INT 34
13269: PUSH
13270: LD_INT 36
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: PUSH
13306: LD_INT 101
13308: PUSH
13309: LD_INT 102
13311: PUSH
13312: LD_INT 103
13314: PUSH
13315: LD_INT 104
13317: PUSH
13318: LD_INT 105
13320: PUSH
13321: LD_INT 106
13323: PUSH
13324: LD_INT 107
13326: PUSH
13327: LD_INT 108
13329: PUSH
13330: LD_INT 109
13332: PUSH
13333: LD_INT 110
13335: PUSH
13336: LD_INT 111
13338: PUSH
13339: LD_INT 112
13341: PUSH
13342: LD_INT 113
13344: PUSH
13345: LD_INT 114
13347: PUSH
13348: LD_INT 116
13350: PUSH
13351: LD_INT 117
13353: PUSH
13354: LD_INT 118
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: ST_TO_ADDR
13380: GO 14619
13382: LD_INT 14
13384: DOUBLE
13385: EQUAL
13386: IFTRUE 13390
13388: GO 13614
13390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13391: LD_ADDR_VAR 0 2
13395: PUSH
13396: LD_INT 1
13398: PUSH
13399: LD_INT 2
13401: PUSH
13402: LD_INT 3
13404: PUSH
13405: LD_INT 4
13407: PUSH
13408: LD_INT 5
13410: PUSH
13411: LD_INT 6
13413: PUSH
13414: LD_INT 7
13416: PUSH
13417: LD_INT 8
13419: PUSH
13420: LD_INT 9
13422: PUSH
13423: LD_INT 10
13425: PUSH
13426: LD_INT 11
13428: PUSH
13429: LD_INT 12
13431: PUSH
13432: LD_INT 13
13434: PUSH
13435: LD_INT 14
13437: PUSH
13438: LD_INT 15
13440: PUSH
13441: LD_INT 16
13443: PUSH
13444: LD_INT 17
13446: PUSH
13447: LD_INT 18
13449: PUSH
13450: LD_INT 19
13452: PUSH
13453: LD_INT 20
13455: PUSH
13456: LD_INT 21
13458: PUSH
13459: LD_INT 22
13461: PUSH
13462: LD_INT 23
13464: PUSH
13465: LD_INT 24
13467: PUSH
13468: LD_INT 25
13470: PUSH
13471: LD_INT 26
13473: PUSH
13474: LD_INT 27
13476: PUSH
13477: LD_INT 28
13479: PUSH
13480: LD_INT 29
13482: PUSH
13483: LD_INT 30
13485: PUSH
13486: LD_INT 31
13488: PUSH
13489: LD_INT 32
13491: PUSH
13492: LD_INT 33
13494: PUSH
13495: LD_INT 34
13497: PUSH
13498: LD_INT 36
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 101
13540: PUSH
13541: LD_INT 102
13543: PUSH
13544: LD_INT 103
13546: PUSH
13547: LD_INT 104
13549: PUSH
13550: LD_INT 105
13552: PUSH
13553: LD_INT 106
13555: PUSH
13556: LD_INT 107
13558: PUSH
13559: LD_INT 108
13561: PUSH
13562: LD_INT 109
13564: PUSH
13565: LD_INT 110
13567: PUSH
13568: LD_INT 111
13570: PUSH
13571: LD_INT 112
13573: PUSH
13574: LD_INT 113
13576: PUSH
13577: LD_INT 114
13579: PUSH
13580: LD_INT 116
13582: PUSH
13583: LD_INT 117
13585: PUSH
13586: LD_INT 118
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: ST_TO_ADDR
13612: GO 14619
13614: LD_INT 15
13616: DOUBLE
13617: EQUAL
13618: IFTRUE 13622
13620: GO 13846
13622: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13623: LD_ADDR_VAR 0 2
13627: PUSH
13628: LD_INT 1
13630: PUSH
13631: LD_INT 2
13633: PUSH
13634: LD_INT 3
13636: PUSH
13637: LD_INT 4
13639: PUSH
13640: LD_INT 5
13642: PUSH
13643: LD_INT 6
13645: PUSH
13646: LD_INT 7
13648: PUSH
13649: LD_INT 8
13651: PUSH
13652: LD_INT 9
13654: PUSH
13655: LD_INT 10
13657: PUSH
13658: LD_INT 11
13660: PUSH
13661: LD_INT 12
13663: PUSH
13664: LD_INT 13
13666: PUSH
13667: LD_INT 14
13669: PUSH
13670: LD_INT 15
13672: PUSH
13673: LD_INT 16
13675: PUSH
13676: LD_INT 17
13678: PUSH
13679: LD_INT 18
13681: PUSH
13682: LD_INT 19
13684: PUSH
13685: LD_INT 20
13687: PUSH
13688: LD_INT 21
13690: PUSH
13691: LD_INT 22
13693: PUSH
13694: LD_INT 23
13696: PUSH
13697: LD_INT 24
13699: PUSH
13700: LD_INT 25
13702: PUSH
13703: LD_INT 26
13705: PUSH
13706: LD_INT 27
13708: PUSH
13709: LD_INT 28
13711: PUSH
13712: LD_INT 29
13714: PUSH
13715: LD_INT 30
13717: PUSH
13718: LD_INT 31
13720: PUSH
13721: LD_INT 32
13723: PUSH
13724: LD_INT 33
13726: PUSH
13727: LD_INT 34
13729: PUSH
13730: LD_INT 36
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 101
13772: PUSH
13773: LD_INT 102
13775: PUSH
13776: LD_INT 103
13778: PUSH
13779: LD_INT 104
13781: PUSH
13782: LD_INT 105
13784: PUSH
13785: LD_INT 106
13787: PUSH
13788: LD_INT 107
13790: PUSH
13791: LD_INT 108
13793: PUSH
13794: LD_INT 109
13796: PUSH
13797: LD_INT 110
13799: PUSH
13800: LD_INT 111
13802: PUSH
13803: LD_INT 112
13805: PUSH
13806: LD_INT 113
13808: PUSH
13809: LD_INT 114
13811: PUSH
13812: LD_INT 116
13814: PUSH
13815: LD_INT 117
13817: PUSH
13818: LD_INT 118
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: ST_TO_ADDR
13844: GO 14619
13846: LD_INT 16
13848: DOUBLE
13849: EQUAL
13850: IFTRUE 13854
13852: GO 13990
13854: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13855: LD_ADDR_VAR 0 2
13859: PUSH
13860: LD_INT 2
13862: PUSH
13863: LD_INT 4
13865: PUSH
13866: LD_INT 5
13868: PUSH
13869: LD_INT 7
13871: PUSH
13872: LD_INT 11
13874: PUSH
13875: LD_INT 12
13877: PUSH
13878: LD_INT 15
13880: PUSH
13881: LD_INT 16
13883: PUSH
13884: LD_INT 20
13886: PUSH
13887: LD_INT 21
13889: PUSH
13890: LD_INT 22
13892: PUSH
13893: LD_INT 23
13895: PUSH
13896: LD_INT 25
13898: PUSH
13899: LD_INT 26
13901: PUSH
13902: LD_INT 30
13904: PUSH
13905: LD_INT 31
13907: PUSH
13908: LD_INT 32
13910: PUSH
13911: LD_INT 33
13913: PUSH
13914: LD_INT 34
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: PUSH
13938: LD_INT 101
13940: PUSH
13941: LD_INT 102
13943: PUSH
13944: LD_INT 103
13946: PUSH
13947: LD_INT 106
13949: PUSH
13950: LD_INT 108
13952: PUSH
13953: LD_INT 112
13955: PUSH
13956: LD_INT 113
13958: PUSH
13959: LD_INT 114
13961: PUSH
13962: LD_INT 116
13964: PUSH
13965: LD_INT 117
13967: PUSH
13968: LD_INT 118
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: ST_TO_ADDR
13988: GO 14619
13990: LD_INT 17
13992: DOUBLE
13993: EQUAL
13994: IFTRUE 13998
13996: GO 14222
13998: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13999: LD_ADDR_VAR 0 2
14003: PUSH
14004: LD_INT 1
14006: PUSH
14007: LD_INT 2
14009: PUSH
14010: LD_INT 3
14012: PUSH
14013: LD_INT 4
14015: PUSH
14016: LD_INT 5
14018: PUSH
14019: LD_INT 6
14021: PUSH
14022: LD_INT 7
14024: PUSH
14025: LD_INT 8
14027: PUSH
14028: LD_INT 9
14030: PUSH
14031: LD_INT 10
14033: PUSH
14034: LD_INT 11
14036: PUSH
14037: LD_INT 12
14039: PUSH
14040: LD_INT 13
14042: PUSH
14043: LD_INT 14
14045: PUSH
14046: LD_INT 15
14048: PUSH
14049: LD_INT 16
14051: PUSH
14052: LD_INT 17
14054: PUSH
14055: LD_INT 18
14057: PUSH
14058: LD_INT 19
14060: PUSH
14061: LD_INT 20
14063: PUSH
14064: LD_INT 21
14066: PUSH
14067: LD_INT 22
14069: PUSH
14070: LD_INT 23
14072: PUSH
14073: LD_INT 24
14075: PUSH
14076: LD_INT 25
14078: PUSH
14079: LD_INT 26
14081: PUSH
14082: LD_INT 27
14084: PUSH
14085: LD_INT 28
14087: PUSH
14088: LD_INT 29
14090: PUSH
14091: LD_INT 30
14093: PUSH
14094: LD_INT 31
14096: PUSH
14097: LD_INT 32
14099: PUSH
14100: LD_INT 33
14102: PUSH
14103: LD_INT 34
14105: PUSH
14106: LD_INT 36
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: PUSH
14146: LD_INT 101
14148: PUSH
14149: LD_INT 102
14151: PUSH
14152: LD_INT 103
14154: PUSH
14155: LD_INT 104
14157: PUSH
14158: LD_INT 105
14160: PUSH
14161: LD_INT 106
14163: PUSH
14164: LD_INT 107
14166: PUSH
14167: LD_INT 108
14169: PUSH
14170: LD_INT 109
14172: PUSH
14173: LD_INT 110
14175: PUSH
14176: LD_INT 111
14178: PUSH
14179: LD_INT 112
14181: PUSH
14182: LD_INT 113
14184: PUSH
14185: LD_INT 114
14187: PUSH
14188: LD_INT 116
14190: PUSH
14191: LD_INT 117
14193: PUSH
14194: LD_INT 118
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: ST_TO_ADDR
14220: GO 14619
14222: LD_INT 18
14224: DOUBLE
14225: EQUAL
14226: IFTRUE 14230
14228: GO 14378
14230: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14231: LD_ADDR_VAR 0 2
14235: PUSH
14236: LD_INT 2
14238: PUSH
14239: LD_INT 4
14241: PUSH
14242: LD_INT 5
14244: PUSH
14245: LD_INT 7
14247: PUSH
14248: LD_INT 11
14250: PUSH
14251: LD_INT 12
14253: PUSH
14254: LD_INT 15
14256: PUSH
14257: LD_INT 16
14259: PUSH
14260: LD_INT 20
14262: PUSH
14263: LD_INT 21
14265: PUSH
14266: LD_INT 22
14268: PUSH
14269: LD_INT 23
14271: PUSH
14272: LD_INT 25
14274: PUSH
14275: LD_INT 26
14277: PUSH
14278: LD_INT 30
14280: PUSH
14281: LD_INT 31
14283: PUSH
14284: LD_INT 32
14286: PUSH
14287: LD_INT 33
14289: PUSH
14290: LD_INT 34
14292: PUSH
14293: LD_INT 35
14295: PUSH
14296: LD_INT 36
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: PUSH
14322: LD_INT 101
14324: PUSH
14325: LD_INT 102
14327: PUSH
14328: LD_INT 103
14330: PUSH
14331: LD_INT 106
14333: PUSH
14334: LD_INT 108
14336: PUSH
14337: LD_INT 112
14339: PUSH
14340: LD_INT 113
14342: PUSH
14343: LD_INT 114
14345: PUSH
14346: LD_INT 115
14348: PUSH
14349: LD_INT 116
14351: PUSH
14352: LD_INT 117
14354: PUSH
14355: LD_INT 118
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: ST_TO_ADDR
14376: GO 14619
14378: LD_INT 19
14380: DOUBLE
14381: EQUAL
14382: IFTRUE 14386
14384: GO 14618
14386: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14387: LD_ADDR_VAR 0 2
14391: PUSH
14392: LD_INT 1
14394: PUSH
14395: LD_INT 2
14397: PUSH
14398: LD_INT 3
14400: PUSH
14401: LD_INT 4
14403: PUSH
14404: LD_INT 5
14406: PUSH
14407: LD_INT 6
14409: PUSH
14410: LD_INT 7
14412: PUSH
14413: LD_INT 8
14415: PUSH
14416: LD_INT 9
14418: PUSH
14419: LD_INT 10
14421: PUSH
14422: LD_INT 11
14424: PUSH
14425: LD_INT 12
14427: PUSH
14428: LD_INT 13
14430: PUSH
14431: LD_INT 14
14433: PUSH
14434: LD_INT 15
14436: PUSH
14437: LD_INT 16
14439: PUSH
14440: LD_INT 17
14442: PUSH
14443: LD_INT 18
14445: PUSH
14446: LD_INT 19
14448: PUSH
14449: LD_INT 20
14451: PUSH
14452: LD_INT 21
14454: PUSH
14455: LD_INT 22
14457: PUSH
14458: LD_INT 23
14460: PUSH
14461: LD_INT 24
14463: PUSH
14464: LD_INT 25
14466: PUSH
14467: LD_INT 26
14469: PUSH
14470: LD_INT 27
14472: PUSH
14473: LD_INT 28
14475: PUSH
14476: LD_INT 29
14478: PUSH
14479: LD_INT 30
14481: PUSH
14482: LD_INT 31
14484: PUSH
14485: LD_INT 32
14487: PUSH
14488: LD_INT 33
14490: PUSH
14491: LD_INT 34
14493: PUSH
14494: LD_INT 35
14496: PUSH
14497: LD_INT 36
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: PUSH
14538: LD_INT 101
14540: PUSH
14541: LD_INT 102
14543: PUSH
14544: LD_INT 103
14546: PUSH
14547: LD_INT 104
14549: PUSH
14550: LD_INT 105
14552: PUSH
14553: LD_INT 106
14555: PUSH
14556: LD_INT 107
14558: PUSH
14559: LD_INT 108
14561: PUSH
14562: LD_INT 109
14564: PUSH
14565: LD_INT 110
14567: PUSH
14568: LD_INT 111
14570: PUSH
14571: LD_INT 112
14573: PUSH
14574: LD_INT 113
14576: PUSH
14577: LD_INT 114
14579: PUSH
14580: LD_INT 115
14582: PUSH
14583: LD_INT 116
14585: PUSH
14586: LD_INT 117
14588: PUSH
14589: LD_INT 118
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: ST_TO_ADDR
14616: GO 14619
14618: POP
// end else
14619: GO 14850
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14621: LD_ADDR_VAR 0 2
14625: PUSH
14626: LD_INT 1
14628: PUSH
14629: LD_INT 2
14631: PUSH
14632: LD_INT 3
14634: PUSH
14635: LD_INT 4
14637: PUSH
14638: LD_INT 5
14640: PUSH
14641: LD_INT 6
14643: PUSH
14644: LD_INT 7
14646: PUSH
14647: LD_INT 8
14649: PUSH
14650: LD_INT 9
14652: PUSH
14653: LD_INT 10
14655: PUSH
14656: LD_INT 11
14658: PUSH
14659: LD_INT 12
14661: PUSH
14662: LD_INT 13
14664: PUSH
14665: LD_INT 14
14667: PUSH
14668: LD_INT 15
14670: PUSH
14671: LD_INT 16
14673: PUSH
14674: LD_INT 17
14676: PUSH
14677: LD_INT 18
14679: PUSH
14680: LD_INT 19
14682: PUSH
14683: LD_INT 20
14685: PUSH
14686: LD_INT 21
14688: PUSH
14689: LD_INT 22
14691: PUSH
14692: LD_INT 23
14694: PUSH
14695: LD_INT 24
14697: PUSH
14698: LD_INT 25
14700: PUSH
14701: LD_INT 26
14703: PUSH
14704: LD_INT 27
14706: PUSH
14707: LD_INT 28
14709: PUSH
14710: LD_INT 29
14712: PUSH
14713: LD_INT 30
14715: PUSH
14716: LD_INT 31
14718: PUSH
14719: LD_INT 32
14721: PUSH
14722: LD_INT 33
14724: PUSH
14725: LD_INT 34
14727: PUSH
14728: LD_INT 35
14730: PUSH
14731: LD_INT 36
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 101
14774: PUSH
14775: LD_INT 102
14777: PUSH
14778: LD_INT 103
14780: PUSH
14781: LD_INT 104
14783: PUSH
14784: LD_INT 105
14786: PUSH
14787: LD_INT 106
14789: PUSH
14790: LD_INT 107
14792: PUSH
14793: LD_INT 108
14795: PUSH
14796: LD_INT 109
14798: PUSH
14799: LD_INT 110
14801: PUSH
14802: LD_INT 111
14804: PUSH
14805: LD_INT 112
14807: PUSH
14808: LD_INT 113
14810: PUSH
14811: LD_INT 114
14813: PUSH
14814: LD_INT 115
14816: PUSH
14817: LD_INT 116
14819: PUSH
14820: LD_INT 117
14822: PUSH
14823: LD_INT 118
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: ST_TO_ADDR
// if result then
14850: LD_VAR 0 2
14854: IFFALSE 15640
// begin normal :=  ;
14856: LD_ADDR_VAR 0 5
14860: PUSH
14861: LD_STRING 
14863: ST_TO_ADDR
// hardcore :=  ;
14864: LD_ADDR_VAR 0 6
14868: PUSH
14869: LD_STRING 
14871: ST_TO_ADDR
// active :=  ;
14872: LD_ADDR_VAR 0 7
14876: PUSH
14877: LD_STRING 
14879: ST_TO_ADDR
// for i = 1 to normalCounter do
14880: LD_ADDR_VAR 0 8
14884: PUSH
14885: DOUBLE
14886: LD_INT 1
14888: DEC
14889: ST_TO_ADDR
14890: LD_EXP 44
14894: PUSH
14895: FOR_TO
14896: IFFALSE 14997
// begin tmp := 0 ;
14898: LD_ADDR_VAR 0 3
14902: PUSH
14903: LD_STRING 0
14905: ST_TO_ADDR
// if result [ 1 ] then
14906: LD_VAR 0 2
14910: PUSH
14911: LD_INT 1
14913: ARRAY
14914: IFFALSE 14979
// if result [ 1 ] [ 1 ] = i then
14916: LD_VAR 0 2
14920: PUSH
14921: LD_INT 1
14923: ARRAY
14924: PUSH
14925: LD_INT 1
14927: ARRAY
14928: PUSH
14929: LD_VAR 0 8
14933: EQUAL
14934: IFFALSE 14979
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14936: LD_ADDR_VAR 0 2
14940: PUSH
14941: LD_VAR 0 2
14945: PPUSH
14946: LD_INT 1
14948: PPUSH
14949: LD_VAR 0 2
14953: PUSH
14954: LD_INT 1
14956: ARRAY
14957: PPUSH
14958: LD_INT 1
14960: PPUSH
14961: CALL_OW 3
14965: PPUSH
14966: CALL_OW 1
14970: ST_TO_ADDR
// tmp := 1 ;
14971: LD_ADDR_VAR 0 3
14975: PUSH
14976: LD_STRING 1
14978: ST_TO_ADDR
// end ; normal := normal & tmp ;
14979: LD_ADDR_VAR 0 5
14983: PUSH
14984: LD_VAR 0 5
14988: PUSH
14989: LD_VAR 0 3
14993: STR
14994: ST_TO_ADDR
// end ;
14995: GO 14895
14997: POP
14998: POP
// for i = 1 to hardcoreCounter do
14999: LD_ADDR_VAR 0 8
15003: PUSH
15004: DOUBLE
15005: LD_INT 1
15007: DEC
15008: ST_TO_ADDR
15009: LD_EXP 45
15013: PUSH
15014: FOR_TO
15015: IFFALSE 15120
// begin tmp := 0 ;
15017: LD_ADDR_VAR 0 3
15021: PUSH
15022: LD_STRING 0
15024: ST_TO_ADDR
// if result [ 2 ] then
15025: LD_VAR 0 2
15029: PUSH
15030: LD_INT 2
15032: ARRAY
15033: IFFALSE 15102
// if result [ 2 ] [ 1 ] = 100 + i then
15035: LD_VAR 0 2
15039: PUSH
15040: LD_INT 2
15042: ARRAY
15043: PUSH
15044: LD_INT 1
15046: ARRAY
15047: PUSH
15048: LD_INT 100
15050: PUSH
15051: LD_VAR 0 8
15055: PLUS
15056: EQUAL
15057: IFFALSE 15102
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15059: LD_ADDR_VAR 0 2
15063: PUSH
15064: LD_VAR 0 2
15068: PPUSH
15069: LD_INT 2
15071: PPUSH
15072: LD_VAR 0 2
15076: PUSH
15077: LD_INT 2
15079: ARRAY
15080: PPUSH
15081: LD_INT 1
15083: PPUSH
15084: CALL_OW 3
15088: PPUSH
15089: CALL_OW 1
15093: ST_TO_ADDR
// tmp := 1 ;
15094: LD_ADDR_VAR 0 3
15098: PUSH
15099: LD_STRING 1
15101: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15102: LD_ADDR_VAR 0 6
15106: PUSH
15107: LD_VAR 0 6
15111: PUSH
15112: LD_VAR 0 3
15116: STR
15117: ST_TO_ADDR
// end ;
15118: GO 15014
15120: POP
15121: POP
// if isGameLoad then
15122: LD_VAR 0 1
15126: IFFALSE 15601
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15128: LD_ADDR_VAR 0 4
15132: PUSH
15133: LD_EXP 48
15137: PUSH
15138: LD_EXP 47
15142: PUSH
15143: LD_EXP 49
15147: PUSH
15148: LD_EXP 46
15152: PUSH
15153: LD_EXP 50
15157: PUSH
15158: LD_EXP 51
15162: PUSH
15163: LD_EXP 52
15167: PUSH
15168: LD_EXP 53
15172: PUSH
15173: LD_EXP 54
15177: PUSH
15178: LD_EXP 55
15182: PUSH
15183: LD_EXP 56
15187: PUSH
15188: LD_EXP 57
15192: PUSH
15193: LD_EXP 58
15197: PUSH
15198: LD_EXP 59
15202: PUSH
15203: LD_EXP 67
15207: PUSH
15208: LD_EXP 68
15212: PUSH
15213: LD_EXP 69
15217: PUSH
15218: LD_EXP 70
15222: PUSH
15223: LD_EXP 72
15227: PUSH
15228: LD_EXP 73
15232: PUSH
15233: LD_EXP 74
15237: PUSH
15238: LD_EXP 77
15242: PUSH
15243: LD_EXP 79
15247: PUSH
15248: LD_EXP 80
15252: PUSH
15253: LD_EXP 81
15257: PUSH
15258: LD_EXP 83
15262: PUSH
15263: LD_EXP 84
15267: PUSH
15268: LD_EXP 87
15272: PUSH
15273: LD_EXP 88
15277: PUSH
15278: LD_EXP 89
15282: PUSH
15283: LD_EXP 90
15287: PUSH
15288: LD_EXP 91
15292: PUSH
15293: LD_EXP 92
15297: PUSH
15298: LD_EXP 93
15302: PUSH
15303: LD_EXP 94
15307: PUSH
15308: LD_EXP 95
15312: PUSH
15313: LD_EXP 60
15317: PUSH
15318: LD_EXP 61
15322: PUSH
15323: LD_EXP 64
15327: PUSH
15328: LD_EXP 65
15332: PUSH
15333: LD_EXP 66
15337: PUSH
15338: LD_EXP 62
15342: PUSH
15343: LD_EXP 63
15347: PUSH
15348: LD_EXP 71
15352: PUSH
15353: LD_EXP 75
15357: PUSH
15358: LD_EXP 76
15362: PUSH
15363: LD_EXP 78
15367: PUSH
15368: LD_EXP 82
15372: PUSH
15373: LD_EXP 85
15377: PUSH
15378: LD_EXP 86
15382: PUSH
15383: LD_EXP 96
15387: PUSH
15388: LD_EXP 97
15392: PUSH
15393: LD_EXP 98
15397: PUSH
15398: LD_EXP 99
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: ST_TO_ADDR
// tmp :=  ;
15459: LD_ADDR_VAR 0 3
15463: PUSH
15464: LD_STRING 
15466: ST_TO_ADDR
// for i = 1 to normalCounter do
15467: LD_ADDR_VAR 0 8
15471: PUSH
15472: DOUBLE
15473: LD_INT 1
15475: DEC
15476: ST_TO_ADDR
15477: LD_EXP 44
15481: PUSH
15482: FOR_TO
15483: IFFALSE 15519
// begin if flags [ i ] then
15485: LD_VAR 0 4
15489: PUSH
15490: LD_VAR 0 8
15494: ARRAY
15495: IFFALSE 15517
// tmp := tmp & i & ; ;
15497: LD_ADDR_VAR 0 3
15501: PUSH
15502: LD_VAR 0 3
15506: PUSH
15507: LD_VAR 0 8
15511: STR
15512: PUSH
15513: LD_STRING ;
15515: STR
15516: ST_TO_ADDR
// end ;
15517: GO 15482
15519: POP
15520: POP
// for i = 1 to hardcoreCounter do
15521: LD_ADDR_VAR 0 8
15525: PUSH
15526: DOUBLE
15527: LD_INT 1
15529: DEC
15530: ST_TO_ADDR
15531: LD_EXP 45
15535: PUSH
15536: FOR_TO
15537: IFFALSE 15583
// begin if flags [ normalCounter + i ] then
15539: LD_VAR 0 4
15543: PUSH
15544: LD_EXP 44
15548: PUSH
15549: LD_VAR 0 8
15553: PLUS
15554: ARRAY
15555: IFFALSE 15581
// tmp := tmp & ( 100 + i ) & ; ;
15557: LD_ADDR_VAR 0 3
15561: PUSH
15562: LD_VAR 0 3
15566: PUSH
15567: LD_INT 100
15569: PUSH
15570: LD_VAR 0 8
15574: PLUS
15575: STR
15576: PUSH
15577: LD_STRING ;
15579: STR
15580: ST_TO_ADDR
// end ;
15581: GO 15536
15583: POP
15584: POP
// if tmp then
15585: LD_VAR 0 3
15589: IFFALSE 15601
// active := tmp ;
15591: LD_ADDR_VAR 0 7
15595: PUSH
15596: LD_VAR 0 3
15600: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15601: LD_STRING getStreamItemsFromMission("
15603: PUSH
15604: LD_VAR 0 5
15608: STR
15609: PUSH
15610: LD_STRING ","
15612: STR
15613: PUSH
15614: LD_VAR 0 6
15618: STR
15619: PUSH
15620: LD_STRING ","
15622: STR
15623: PUSH
15624: LD_VAR 0 7
15628: STR
15629: PUSH
15630: LD_STRING ")
15632: STR
15633: PPUSH
15634: CALL_OW 559
// end else
15638: GO 15647
// ToLua ( getStreamItemsFromMission("","","") ) ;
15640: LD_STRING getStreamItemsFromMission("","","")
15642: PPUSH
15643: CALL_OW 559
// end ;
15647: LD_VAR 0 2
15651: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15652: LD_EXP 43
15656: PUSH
15657: LD_EXP 48
15661: AND
15662: IFFALSE 15786
15664: GO 15666
15666: DISABLE
15667: LD_INT 0
15669: PPUSH
15670: PPUSH
// begin enable ;
15671: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15672: LD_ADDR_VAR 0 2
15676: PUSH
15677: LD_INT 22
15679: PUSH
15680: LD_OWVAR 2
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 2
15691: PUSH
15692: LD_INT 34
15694: PUSH
15695: LD_INT 7
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: LD_INT 34
15704: PUSH
15705: LD_INT 45
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PUSH
15712: LD_INT 34
15714: PUSH
15715: LD_INT 28
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 34
15724: PUSH
15725: LD_INT 47
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PPUSH
15743: CALL_OW 69
15747: ST_TO_ADDR
// if not tmp then
15748: LD_VAR 0 2
15752: NOT
15753: IFFALSE 15757
// exit ;
15755: GO 15786
// for i in tmp do
15757: LD_ADDR_VAR 0 1
15761: PUSH
15762: LD_VAR 0 2
15766: PUSH
15767: FOR_IN
15768: IFFALSE 15784
// begin SetLives ( i , 0 ) ;
15770: LD_VAR 0 1
15774: PPUSH
15775: LD_INT 0
15777: PPUSH
15778: CALL_OW 234
// end ;
15782: GO 15767
15784: POP
15785: POP
// end ;
15786: PPOPN 2
15788: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15789: LD_EXP 43
15793: PUSH
15794: LD_EXP 49
15798: AND
15799: IFFALSE 15883
15801: GO 15803
15803: DISABLE
15804: LD_INT 0
15806: PPUSH
15807: PPUSH
// begin enable ;
15808: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15809: LD_ADDR_VAR 0 2
15813: PUSH
15814: LD_INT 22
15816: PUSH
15817: LD_OWVAR 2
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 32
15828: PUSH
15829: LD_INT 3
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PPUSH
15840: CALL_OW 69
15844: ST_TO_ADDR
// if not tmp then
15845: LD_VAR 0 2
15849: NOT
15850: IFFALSE 15854
// exit ;
15852: GO 15883
// for i in tmp do
15854: LD_ADDR_VAR 0 1
15858: PUSH
15859: LD_VAR 0 2
15863: PUSH
15864: FOR_IN
15865: IFFALSE 15881
// begin SetLives ( i , 0 ) ;
15867: LD_VAR 0 1
15871: PPUSH
15872: LD_INT 0
15874: PPUSH
15875: CALL_OW 234
// end ;
15879: GO 15864
15881: POP
15882: POP
// end ;
15883: PPOPN 2
15885: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15886: LD_EXP 43
15890: PUSH
15891: LD_EXP 46
15895: AND
15896: IFFALSE 15989
15898: GO 15900
15900: DISABLE
15901: LD_INT 0
15903: PPUSH
// begin enable ;
15904: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15905: LD_ADDR_VAR 0 1
15909: PUSH
15910: LD_INT 22
15912: PUSH
15913: LD_OWVAR 2
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: LD_INT 2
15924: PUSH
15925: LD_INT 25
15927: PUSH
15928: LD_INT 5
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: LD_INT 25
15937: PUSH
15938: LD_INT 9
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 25
15947: PUSH
15948: LD_INT 8
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PPUSH
15965: CALL_OW 69
15969: PUSH
15970: FOR_IN
15971: IFFALSE 15987
// begin SetClass ( i , 1 ) ;
15973: LD_VAR 0 1
15977: PPUSH
15978: LD_INT 1
15980: PPUSH
15981: CALL_OW 336
// end ;
15985: GO 15970
15987: POP
15988: POP
// end ;
15989: PPOPN 1
15991: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15992: LD_EXP 43
15996: PUSH
15997: LD_EXP 47
16001: AND
16002: PUSH
16003: LD_OWVAR 65
16007: PUSH
16008: LD_INT 7
16010: LESS
16011: AND
16012: IFFALSE 16026
16014: GO 16016
16016: DISABLE
// begin enable ;
16017: ENABLE
// game_speed := 7 ;
16018: LD_ADDR_OWVAR 65
16022: PUSH
16023: LD_INT 7
16025: ST_TO_ADDR
// end ;
16026: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16027: LD_EXP 43
16031: PUSH
16032: LD_EXP 50
16036: AND
16037: IFFALSE 16239
16039: GO 16041
16041: DISABLE
16042: LD_INT 0
16044: PPUSH
16045: PPUSH
16046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16047: LD_ADDR_VAR 0 3
16051: PUSH
16052: LD_INT 81
16054: PUSH
16055: LD_OWVAR 2
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 21
16066: PUSH
16067: LD_INT 1
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PPUSH
16078: CALL_OW 69
16082: ST_TO_ADDR
// if not tmp then
16083: LD_VAR 0 3
16087: NOT
16088: IFFALSE 16092
// exit ;
16090: GO 16239
// if tmp > 5 then
16092: LD_VAR 0 3
16096: PUSH
16097: LD_INT 5
16099: GREATER
16100: IFFALSE 16112
// k := 5 else
16102: LD_ADDR_VAR 0 2
16106: PUSH
16107: LD_INT 5
16109: ST_TO_ADDR
16110: GO 16122
// k := tmp ;
16112: LD_ADDR_VAR 0 2
16116: PUSH
16117: LD_VAR 0 3
16121: ST_TO_ADDR
// for i := 1 to k do
16122: LD_ADDR_VAR 0 1
16126: PUSH
16127: DOUBLE
16128: LD_INT 1
16130: DEC
16131: ST_TO_ADDR
16132: LD_VAR 0 2
16136: PUSH
16137: FOR_TO
16138: IFFALSE 16237
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16140: LD_VAR 0 3
16144: PUSH
16145: LD_VAR 0 1
16149: ARRAY
16150: PPUSH
16151: LD_VAR 0 1
16155: PUSH
16156: LD_INT 4
16158: MOD
16159: PUSH
16160: LD_INT 1
16162: PLUS
16163: PPUSH
16164: CALL_OW 259
16168: PUSH
16169: LD_INT 10
16171: LESS
16172: IFFALSE 16235
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16174: LD_VAR 0 3
16178: PUSH
16179: LD_VAR 0 1
16183: ARRAY
16184: PPUSH
16185: LD_VAR 0 1
16189: PUSH
16190: LD_INT 4
16192: MOD
16193: PUSH
16194: LD_INT 1
16196: PLUS
16197: PPUSH
16198: LD_VAR 0 3
16202: PUSH
16203: LD_VAR 0 1
16207: ARRAY
16208: PPUSH
16209: LD_VAR 0 1
16213: PUSH
16214: LD_INT 4
16216: MOD
16217: PUSH
16218: LD_INT 1
16220: PLUS
16221: PPUSH
16222: CALL_OW 259
16226: PUSH
16227: LD_INT 1
16229: PLUS
16230: PPUSH
16231: CALL_OW 237
16235: GO 16137
16237: POP
16238: POP
// end ;
16239: PPOPN 3
16241: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16242: LD_EXP 43
16246: PUSH
16247: LD_EXP 51
16251: AND
16252: IFFALSE 16272
16254: GO 16256
16256: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16257: LD_INT 4
16259: PPUSH
16260: LD_OWVAR 2
16264: PPUSH
16265: LD_INT 0
16267: PPUSH
16268: CALL_OW 324
16272: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16273: LD_EXP 43
16277: PUSH
16278: LD_EXP 80
16282: AND
16283: IFFALSE 16303
16285: GO 16287
16287: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16288: LD_INT 19
16290: PPUSH
16291: LD_OWVAR 2
16295: PPUSH
16296: LD_INT 0
16298: PPUSH
16299: CALL_OW 324
16303: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16304: LD_EXP 43
16308: PUSH
16309: LD_EXP 52
16313: AND
16314: IFFALSE 16416
16316: GO 16318
16318: DISABLE
16319: LD_INT 0
16321: PPUSH
16322: PPUSH
// begin enable ;
16323: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16324: LD_ADDR_VAR 0 2
16328: PUSH
16329: LD_INT 22
16331: PUSH
16332: LD_OWVAR 2
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 2
16343: PUSH
16344: LD_INT 34
16346: PUSH
16347: LD_INT 11
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: LD_INT 34
16356: PUSH
16357: LD_INT 30
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: LIST
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PPUSH
16373: CALL_OW 69
16377: ST_TO_ADDR
// if not tmp then
16378: LD_VAR 0 2
16382: NOT
16383: IFFALSE 16387
// exit ;
16385: GO 16416
// for i in tmp do
16387: LD_ADDR_VAR 0 1
16391: PUSH
16392: LD_VAR 0 2
16396: PUSH
16397: FOR_IN
16398: IFFALSE 16414
// begin SetLives ( i , 0 ) ;
16400: LD_VAR 0 1
16404: PPUSH
16405: LD_INT 0
16407: PPUSH
16408: CALL_OW 234
// end ;
16412: GO 16397
16414: POP
16415: POP
// end ;
16416: PPOPN 2
16418: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16419: LD_EXP 43
16423: PUSH
16424: LD_EXP 53
16428: AND
16429: IFFALSE 16449
16431: GO 16433
16433: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16434: LD_INT 32
16436: PPUSH
16437: LD_OWVAR 2
16441: PPUSH
16442: LD_INT 0
16444: PPUSH
16445: CALL_OW 324
16449: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16450: LD_EXP 43
16454: PUSH
16455: LD_EXP 54
16459: AND
16460: IFFALSE 16641
16462: GO 16464
16464: DISABLE
16465: LD_INT 0
16467: PPUSH
16468: PPUSH
16469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16470: LD_ADDR_VAR 0 2
16474: PUSH
16475: LD_INT 22
16477: PUSH
16478: LD_OWVAR 2
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 33
16489: PUSH
16490: LD_INT 3
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PPUSH
16501: CALL_OW 69
16505: ST_TO_ADDR
// if not tmp then
16506: LD_VAR 0 2
16510: NOT
16511: IFFALSE 16515
// exit ;
16513: GO 16641
// side := 0 ;
16515: LD_ADDR_VAR 0 3
16519: PUSH
16520: LD_INT 0
16522: ST_TO_ADDR
// for i := 1 to 8 do
16523: LD_ADDR_VAR 0 1
16527: PUSH
16528: DOUBLE
16529: LD_INT 1
16531: DEC
16532: ST_TO_ADDR
16533: LD_INT 8
16535: PUSH
16536: FOR_TO
16537: IFFALSE 16585
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16539: LD_OWVAR 2
16543: PUSH
16544: LD_VAR 0 1
16548: NONEQUAL
16549: PUSH
16550: LD_OWVAR 2
16554: PPUSH
16555: LD_VAR 0 1
16559: PPUSH
16560: CALL_OW 81
16564: PUSH
16565: LD_INT 2
16567: EQUAL
16568: AND
16569: IFFALSE 16583
// begin side := i ;
16571: LD_ADDR_VAR 0 3
16575: PUSH
16576: LD_VAR 0 1
16580: ST_TO_ADDR
// break ;
16581: GO 16585
// end ;
16583: GO 16536
16585: POP
16586: POP
// if not side then
16587: LD_VAR 0 3
16591: NOT
16592: IFFALSE 16596
// exit ;
16594: GO 16641
// for i := 1 to tmp do
16596: LD_ADDR_VAR 0 1
16600: PUSH
16601: DOUBLE
16602: LD_INT 1
16604: DEC
16605: ST_TO_ADDR
16606: LD_VAR 0 2
16610: PUSH
16611: FOR_TO
16612: IFFALSE 16639
// if Prob ( 60 ) then
16614: LD_INT 60
16616: PPUSH
16617: CALL_OW 13
16621: IFFALSE 16637
// SetSide ( i , side ) ;
16623: LD_VAR 0 1
16627: PPUSH
16628: LD_VAR 0 3
16632: PPUSH
16633: CALL_OW 235
16637: GO 16611
16639: POP
16640: POP
// end ;
16641: PPOPN 3
16643: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16644: LD_EXP 43
16648: PUSH
16649: LD_EXP 56
16653: AND
16654: IFFALSE 16773
16656: GO 16658
16658: DISABLE
16659: LD_INT 0
16661: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16662: LD_ADDR_VAR 0 1
16666: PUSH
16667: LD_INT 22
16669: PUSH
16670: LD_OWVAR 2
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 21
16681: PUSH
16682: LD_INT 1
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 3
16691: PUSH
16692: LD_INT 23
16694: PUSH
16695: LD_INT 0
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: LIST
16710: PPUSH
16711: CALL_OW 69
16715: PUSH
16716: FOR_IN
16717: IFFALSE 16771
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16719: LD_VAR 0 1
16723: PPUSH
16724: CALL_OW 257
16728: PUSH
16729: LD_INT 1
16731: PUSH
16732: LD_INT 2
16734: PUSH
16735: LD_INT 3
16737: PUSH
16738: LD_INT 4
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: IN
16747: IFFALSE 16769
// SetClass ( un , rand ( 1 , 4 ) ) ;
16749: LD_VAR 0 1
16753: PPUSH
16754: LD_INT 1
16756: PPUSH
16757: LD_INT 4
16759: PPUSH
16760: CALL_OW 12
16764: PPUSH
16765: CALL_OW 336
16769: GO 16716
16771: POP
16772: POP
// end ;
16773: PPOPN 1
16775: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16776: LD_EXP 43
16780: PUSH
16781: LD_EXP 55
16785: AND
16786: IFFALSE 16865
16788: GO 16790
16790: DISABLE
16791: LD_INT 0
16793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16794: LD_ADDR_VAR 0 1
16798: PUSH
16799: LD_INT 22
16801: PUSH
16802: LD_OWVAR 2
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 21
16813: PUSH
16814: LD_INT 3
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PPUSH
16825: CALL_OW 69
16829: ST_TO_ADDR
// if not tmp then
16830: LD_VAR 0 1
16834: NOT
16835: IFFALSE 16839
// exit ;
16837: GO 16865
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16839: LD_VAR 0 1
16843: PUSH
16844: LD_INT 1
16846: PPUSH
16847: LD_VAR 0 1
16851: PPUSH
16852: CALL_OW 12
16856: ARRAY
16857: PPUSH
16858: LD_INT 100
16860: PPUSH
16861: CALL_OW 234
// end ;
16865: PPOPN 1
16867: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16868: LD_EXP 43
16872: PUSH
16873: LD_EXP 57
16877: AND
16878: IFFALSE 16976
16880: GO 16882
16882: DISABLE
16883: LD_INT 0
16885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16886: LD_ADDR_VAR 0 1
16890: PUSH
16891: LD_INT 22
16893: PUSH
16894: LD_OWVAR 2
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 21
16905: PUSH
16906: LD_INT 1
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PPUSH
16917: CALL_OW 69
16921: ST_TO_ADDR
// if not tmp then
16922: LD_VAR 0 1
16926: NOT
16927: IFFALSE 16931
// exit ;
16929: GO 16976
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16931: LD_VAR 0 1
16935: PUSH
16936: LD_INT 1
16938: PPUSH
16939: LD_VAR 0 1
16943: PPUSH
16944: CALL_OW 12
16948: ARRAY
16949: PPUSH
16950: LD_INT 1
16952: PPUSH
16953: LD_INT 4
16955: PPUSH
16956: CALL_OW 12
16960: PPUSH
16961: LD_INT 3000
16963: PPUSH
16964: LD_INT 9000
16966: PPUSH
16967: CALL_OW 12
16971: PPUSH
16972: CALL_OW 492
// end ;
16976: PPOPN 1
16978: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16979: LD_EXP 43
16983: PUSH
16984: LD_EXP 58
16988: AND
16989: IFFALSE 17009
16991: GO 16993
16993: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16994: LD_INT 1
16996: PPUSH
16997: LD_OWVAR 2
17001: PPUSH
17002: LD_INT 0
17004: PPUSH
17005: CALL_OW 324
17009: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17010: LD_EXP 43
17014: PUSH
17015: LD_EXP 59
17019: AND
17020: IFFALSE 17103
17022: GO 17024
17024: DISABLE
17025: LD_INT 0
17027: PPUSH
17028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17029: LD_ADDR_VAR 0 2
17033: PUSH
17034: LD_INT 22
17036: PUSH
17037: LD_OWVAR 2
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 21
17048: PUSH
17049: LD_INT 3
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PPUSH
17060: CALL_OW 69
17064: ST_TO_ADDR
// if not tmp then
17065: LD_VAR 0 2
17069: NOT
17070: IFFALSE 17074
// exit ;
17072: GO 17103
// for i in tmp do
17074: LD_ADDR_VAR 0 1
17078: PUSH
17079: LD_VAR 0 2
17083: PUSH
17084: FOR_IN
17085: IFFALSE 17101
// SetBLevel ( i , 10 ) ;
17087: LD_VAR 0 1
17091: PPUSH
17092: LD_INT 10
17094: PPUSH
17095: CALL_OW 241
17099: GO 17084
17101: POP
17102: POP
// end ;
17103: PPOPN 2
17105: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17106: LD_EXP 43
17110: PUSH
17111: LD_EXP 60
17115: AND
17116: IFFALSE 17227
17118: GO 17120
17120: DISABLE
17121: LD_INT 0
17123: PPUSH
17124: PPUSH
17125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17126: LD_ADDR_VAR 0 3
17130: PUSH
17131: LD_INT 22
17133: PUSH
17134: LD_OWVAR 2
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 25
17145: PUSH
17146: LD_INT 1
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PPUSH
17157: CALL_OW 69
17161: ST_TO_ADDR
// if not tmp then
17162: LD_VAR 0 3
17166: NOT
17167: IFFALSE 17171
// exit ;
17169: GO 17227
// un := tmp [ rand ( 1 , tmp ) ] ;
17171: LD_ADDR_VAR 0 2
17175: PUSH
17176: LD_VAR 0 3
17180: PUSH
17181: LD_INT 1
17183: PPUSH
17184: LD_VAR 0 3
17188: PPUSH
17189: CALL_OW 12
17193: ARRAY
17194: ST_TO_ADDR
// if Crawls ( un ) then
17195: LD_VAR 0 2
17199: PPUSH
17200: CALL_OW 318
17204: IFFALSE 17215
// ComWalk ( un ) ;
17206: LD_VAR 0 2
17210: PPUSH
17211: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17215: LD_VAR 0 2
17219: PPUSH
17220: LD_INT 5
17222: PPUSH
17223: CALL_OW 336
// end ;
17227: PPOPN 3
17229: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17230: LD_EXP 43
17234: PUSH
17235: LD_EXP 61
17239: AND
17240: PUSH
17241: LD_OWVAR 67
17245: PUSH
17246: LD_INT 4
17248: LESS
17249: AND
17250: IFFALSE 17269
17252: GO 17254
17254: DISABLE
// begin Difficulty := Difficulty + 1 ;
17255: LD_ADDR_OWVAR 67
17259: PUSH
17260: LD_OWVAR 67
17264: PUSH
17265: LD_INT 1
17267: PLUS
17268: ST_TO_ADDR
// end ;
17269: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17270: LD_EXP 43
17274: PUSH
17275: LD_EXP 62
17279: AND
17280: IFFALSE 17383
17282: GO 17284
17284: DISABLE
17285: LD_INT 0
17287: PPUSH
// begin for i := 1 to 5 do
17288: LD_ADDR_VAR 0 1
17292: PUSH
17293: DOUBLE
17294: LD_INT 1
17296: DEC
17297: ST_TO_ADDR
17298: LD_INT 5
17300: PUSH
17301: FOR_TO
17302: IFFALSE 17381
// begin uc_nation := nation_nature ;
17304: LD_ADDR_OWVAR 21
17308: PUSH
17309: LD_INT 0
17311: ST_TO_ADDR
// uc_side := 0 ;
17312: LD_ADDR_OWVAR 20
17316: PUSH
17317: LD_INT 0
17319: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17320: LD_ADDR_OWVAR 29
17324: PUSH
17325: LD_INT 12
17327: PUSH
17328: LD_INT 12
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: ST_TO_ADDR
// hc_agressivity := 20 ;
17335: LD_ADDR_OWVAR 35
17339: PUSH
17340: LD_INT 20
17342: ST_TO_ADDR
// hc_class := class_tiger ;
17343: LD_ADDR_OWVAR 28
17347: PUSH
17348: LD_INT 14
17350: ST_TO_ADDR
// hc_gallery :=  ;
17351: LD_ADDR_OWVAR 33
17355: PUSH
17356: LD_STRING 
17358: ST_TO_ADDR
// hc_name :=  ;
17359: LD_ADDR_OWVAR 26
17363: PUSH
17364: LD_STRING 
17366: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17367: CALL_OW 44
17371: PPUSH
17372: LD_INT 0
17374: PPUSH
17375: CALL_OW 51
// end ;
17379: GO 17301
17381: POP
17382: POP
// end ;
17383: PPOPN 1
17385: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17386: LD_EXP 43
17390: PUSH
17391: LD_EXP 63
17395: AND
17396: IFFALSE 17405
17398: GO 17400
17400: DISABLE
// StreamSibBomb ;
17401: CALL 17406 0 0
17405: END
// export function StreamSibBomb ; var i , x , y ; begin
17406: LD_INT 0
17408: PPUSH
17409: PPUSH
17410: PPUSH
17411: PPUSH
// result := false ;
17412: LD_ADDR_VAR 0 1
17416: PUSH
17417: LD_INT 0
17419: ST_TO_ADDR
// for i := 1 to 16 do
17420: LD_ADDR_VAR 0 2
17424: PUSH
17425: DOUBLE
17426: LD_INT 1
17428: DEC
17429: ST_TO_ADDR
17430: LD_INT 16
17432: PUSH
17433: FOR_TO
17434: IFFALSE 17633
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17436: LD_ADDR_VAR 0 3
17440: PUSH
17441: LD_INT 10
17443: PUSH
17444: LD_INT 20
17446: PUSH
17447: LD_INT 30
17449: PUSH
17450: LD_INT 40
17452: PUSH
17453: LD_INT 50
17455: PUSH
17456: LD_INT 60
17458: PUSH
17459: LD_INT 70
17461: PUSH
17462: LD_INT 80
17464: PUSH
17465: LD_INT 90
17467: PUSH
17468: LD_INT 100
17470: PUSH
17471: LD_INT 110
17473: PUSH
17474: LD_INT 120
17476: PUSH
17477: LD_INT 130
17479: PUSH
17480: LD_INT 140
17482: PUSH
17483: LD_INT 150
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 1
17505: PPUSH
17506: LD_INT 15
17508: PPUSH
17509: CALL_OW 12
17513: ARRAY
17514: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17515: LD_ADDR_VAR 0 4
17519: PUSH
17520: LD_INT 10
17522: PUSH
17523: LD_INT 20
17525: PUSH
17526: LD_INT 30
17528: PUSH
17529: LD_INT 40
17531: PUSH
17532: LD_INT 50
17534: PUSH
17535: LD_INT 60
17537: PUSH
17538: LD_INT 70
17540: PUSH
17541: LD_INT 80
17543: PUSH
17544: LD_INT 90
17546: PUSH
17547: LD_INT 100
17549: PUSH
17550: LD_INT 110
17552: PUSH
17553: LD_INT 120
17555: PUSH
17556: LD_INT 130
17558: PUSH
17559: LD_INT 140
17561: PUSH
17562: LD_INT 150
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 1
17584: PPUSH
17585: LD_INT 15
17587: PPUSH
17588: CALL_OW 12
17592: ARRAY
17593: ST_TO_ADDR
// if ValidHex ( x , y ) then
17594: LD_VAR 0 3
17598: PPUSH
17599: LD_VAR 0 4
17603: PPUSH
17604: CALL_OW 488
17608: IFFALSE 17631
// begin result := [ x , y ] ;
17610: LD_ADDR_VAR 0 1
17614: PUSH
17615: LD_VAR 0 3
17619: PUSH
17620: LD_VAR 0 4
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: ST_TO_ADDR
// break ;
17629: GO 17633
// end ; end ;
17631: GO 17433
17633: POP
17634: POP
// if result then
17635: LD_VAR 0 1
17639: IFFALSE 17699
// begin ToLua ( playSibBomb() ) ;
17641: LD_STRING playSibBomb()
17643: PPUSH
17644: CALL_OW 559
// wait ( 0 0$14 ) ;
17648: LD_INT 490
17650: PPUSH
17651: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17655: LD_VAR 0 1
17659: PUSH
17660: LD_INT 1
17662: ARRAY
17663: PPUSH
17664: LD_VAR 0 1
17668: PUSH
17669: LD_INT 2
17671: ARRAY
17672: PPUSH
17673: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17677: LD_VAR 0 1
17681: PUSH
17682: LD_INT 1
17684: ARRAY
17685: PPUSH
17686: LD_VAR 0 1
17690: PUSH
17691: LD_INT 2
17693: ARRAY
17694: PPUSH
17695: CALL_OW 429
// end ; end ;
17699: LD_VAR 0 1
17703: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17704: LD_EXP 43
17708: PUSH
17709: LD_EXP 65
17713: AND
17714: IFFALSE 17726
17716: GO 17718
17718: DISABLE
// YouLost (  ) ;
17719: LD_STRING 
17721: PPUSH
17722: CALL_OW 104
17726: END
// every 0 0$1 trigger StreamModeActive and sFog do
17727: LD_EXP 43
17731: PUSH
17732: LD_EXP 64
17736: AND
17737: IFFALSE 17751
17739: GO 17741
17741: DISABLE
// FogOff ( your_side ) ;
17742: LD_OWVAR 2
17746: PPUSH
17747: CALL_OW 344
17751: END
// every 0 0$1 trigger StreamModeActive and sSun do
17752: LD_EXP 43
17756: PUSH
17757: LD_EXP 66
17761: AND
17762: IFFALSE 17790
17764: GO 17766
17766: DISABLE
// begin solar_recharge_percent := 0 ;
17767: LD_ADDR_OWVAR 79
17771: PUSH
17772: LD_INT 0
17774: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17775: LD_INT 10500
17777: PPUSH
17778: CALL_OW 67
// solar_recharge_percent := 100 ;
17782: LD_ADDR_OWVAR 79
17786: PUSH
17787: LD_INT 100
17789: ST_TO_ADDR
// end ;
17790: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17791: LD_EXP 43
17795: PUSH
17796: LD_EXP 67
17800: AND
17801: IFFALSE 18040
17803: GO 17805
17805: DISABLE
17806: LD_INT 0
17808: PPUSH
17809: PPUSH
17810: PPUSH
// begin tmp := [ ] ;
17811: LD_ADDR_VAR 0 3
17815: PUSH
17816: EMPTY
17817: ST_TO_ADDR
// for i := 1 to 6 do
17818: LD_ADDR_VAR 0 1
17822: PUSH
17823: DOUBLE
17824: LD_INT 1
17826: DEC
17827: ST_TO_ADDR
17828: LD_INT 6
17830: PUSH
17831: FOR_TO
17832: IFFALSE 17937
// begin uc_nation := nation_nature ;
17834: LD_ADDR_OWVAR 21
17838: PUSH
17839: LD_INT 0
17841: ST_TO_ADDR
// uc_side := 0 ;
17842: LD_ADDR_OWVAR 20
17846: PUSH
17847: LD_INT 0
17849: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17850: LD_ADDR_OWVAR 29
17854: PUSH
17855: LD_INT 12
17857: PUSH
17858: LD_INT 12
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: ST_TO_ADDR
// hc_agressivity := 20 ;
17865: LD_ADDR_OWVAR 35
17869: PUSH
17870: LD_INT 20
17872: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17873: LD_ADDR_OWVAR 28
17877: PUSH
17878: LD_INT 17
17880: ST_TO_ADDR
// hc_gallery :=  ;
17881: LD_ADDR_OWVAR 33
17885: PUSH
17886: LD_STRING 
17888: ST_TO_ADDR
// hc_name :=  ;
17889: LD_ADDR_OWVAR 26
17893: PUSH
17894: LD_STRING 
17896: ST_TO_ADDR
// un := CreateHuman ;
17897: LD_ADDR_VAR 0 2
17901: PUSH
17902: CALL_OW 44
17906: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17907: LD_VAR 0 2
17911: PPUSH
17912: LD_INT 1
17914: PPUSH
17915: CALL_OW 51
// tmp := tmp ^ un ;
17919: LD_ADDR_VAR 0 3
17923: PUSH
17924: LD_VAR 0 3
17928: PUSH
17929: LD_VAR 0 2
17933: ADD
17934: ST_TO_ADDR
// end ;
17935: GO 17831
17937: POP
17938: POP
// repeat wait ( 0 0$1 ) ;
17939: LD_INT 35
17941: PPUSH
17942: CALL_OW 67
// for un in tmp do
17946: LD_ADDR_VAR 0 2
17950: PUSH
17951: LD_VAR 0 3
17955: PUSH
17956: FOR_IN
17957: IFFALSE 18031
// begin if IsDead ( un ) then
17959: LD_VAR 0 2
17963: PPUSH
17964: CALL_OW 301
17968: IFFALSE 17988
// begin tmp := tmp diff un ;
17970: LD_ADDR_VAR 0 3
17974: PUSH
17975: LD_VAR 0 3
17979: PUSH
17980: LD_VAR 0 2
17984: DIFF
17985: ST_TO_ADDR
// continue ;
17986: GO 17956
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17988: LD_VAR 0 2
17992: PPUSH
17993: LD_INT 3
17995: PUSH
17996: LD_INT 22
17998: PUSH
17999: LD_INT 0
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PPUSH
18010: CALL_OW 69
18014: PPUSH
18015: LD_VAR 0 2
18019: PPUSH
18020: CALL_OW 74
18024: PPUSH
18025: CALL_OW 115
// end ;
18029: GO 17956
18031: POP
18032: POP
// until not tmp ;
18033: LD_VAR 0 3
18037: NOT
18038: IFFALSE 17939
// end ;
18040: PPOPN 3
18042: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18043: LD_EXP 43
18047: PUSH
18048: LD_EXP 68
18052: AND
18053: IFFALSE 18107
18055: GO 18057
18057: DISABLE
// begin ToLua ( displayTroll(); ) ;
18058: LD_STRING displayTroll();
18060: PPUSH
18061: CALL_OW 559
// wait ( 3 3$00 ) ;
18065: LD_INT 6300
18067: PPUSH
18068: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18072: LD_STRING hideTroll();
18074: PPUSH
18075: CALL_OW 559
// wait ( 1 1$00 ) ;
18079: LD_INT 2100
18081: PPUSH
18082: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18086: LD_STRING displayTroll();
18088: PPUSH
18089: CALL_OW 559
// wait ( 1 1$00 ) ;
18093: LD_INT 2100
18095: PPUSH
18096: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18100: LD_STRING hideTroll();
18102: PPUSH
18103: CALL_OW 559
// end ;
18107: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18108: LD_EXP 43
18112: PUSH
18113: LD_EXP 69
18117: AND
18118: IFFALSE 18181
18120: GO 18122
18122: DISABLE
18123: LD_INT 0
18125: PPUSH
// begin p := 0 ;
18126: LD_ADDR_VAR 0 1
18130: PUSH
18131: LD_INT 0
18133: ST_TO_ADDR
// repeat game_speed := 1 ;
18134: LD_ADDR_OWVAR 65
18138: PUSH
18139: LD_INT 1
18141: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18142: LD_INT 35
18144: PPUSH
18145: CALL_OW 67
// p := p + 1 ;
18149: LD_ADDR_VAR 0 1
18153: PUSH
18154: LD_VAR 0 1
18158: PUSH
18159: LD_INT 1
18161: PLUS
18162: ST_TO_ADDR
// until p >= 60 ;
18163: LD_VAR 0 1
18167: PUSH
18168: LD_INT 60
18170: GREATEREQUAL
18171: IFFALSE 18134
// game_speed := 4 ;
18173: LD_ADDR_OWVAR 65
18177: PUSH
18178: LD_INT 4
18180: ST_TO_ADDR
// end ;
18181: PPOPN 1
18183: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18184: LD_EXP 43
18188: PUSH
18189: LD_EXP 70
18193: AND
18194: IFFALSE 18340
18196: GO 18198
18198: DISABLE
18199: LD_INT 0
18201: PPUSH
18202: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18203: LD_ADDR_VAR 0 1
18207: PUSH
18208: LD_INT 22
18210: PUSH
18211: LD_OWVAR 2
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 2
18222: PUSH
18223: LD_INT 30
18225: PUSH
18226: LD_INT 0
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 30
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: LIST
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PPUSH
18252: CALL_OW 69
18256: ST_TO_ADDR
// if not depot then
18257: LD_VAR 0 1
18261: NOT
18262: IFFALSE 18266
// exit ;
18264: GO 18340
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18266: LD_ADDR_VAR 0 2
18270: PUSH
18271: LD_VAR 0 1
18275: PUSH
18276: LD_INT 1
18278: PPUSH
18279: LD_VAR 0 1
18283: PPUSH
18284: CALL_OW 12
18288: ARRAY
18289: PPUSH
18290: CALL_OW 274
18294: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18295: LD_VAR 0 2
18299: PPUSH
18300: LD_INT 1
18302: PPUSH
18303: LD_INT 0
18305: PPUSH
18306: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18310: LD_VAR 0 2
18314: PPUSH
18315: LD_INT 2
18317: PPUSH
18318: LD_INT 0
18320: PPUSH
18321: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18325: LD_VAR 0 2
18329: PPUSH
18330: LD_INT 3
18332: PPUSH
18333: LD_INT 0
18335: PPUSH
18336: CALL_OW 277
// end ;
18340: PPOPN 2
18342: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18343: LD_EXP 43
18347: PUSH
18348: LD_EXP 71
18352: AND
18353: IFFALSE 18450
18355: GO 18357
18357: DISABLE
18358: LD_INT 0
18360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18361: LD_ADDR_VAR 0 1
18365: PUSH
18366: LD_INT 22
18368: PUSH
18369: LD_OWVAR 2
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 21
18380: PUSH
18381: LD_INT 1
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 3
18390: PUSH
18391: LD_INT 23
18393: PUSH
18394: LD_INT 0
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: LIST
18409: PPUSH
18410: CALL_OW 69
18414: ST_TO_ADDR
// if not tmp then
18415: LD_VAR 0 1
18419: NOT
18420: IFFALSE 18424
// exit ;
18422: GO 18450
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18424: LD_VAR 0 1
18428: PUSH
18429: LD_INT 1
18431: PPUSH
18432: LD_VAR 0 1
18436: PPUSH
18437: CALL_OW 12
18441: ARRAY
18442: PPUSH
18443: LD_INT 200
18445: PPUSH
18446: CALL_OW 234
// end ;
18450: PPOPN 1
18452: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18453: LD_EXP 43
18457: PUSH
18458: LD_EXP 72
18462: AND
18463: IFFALSE 18542
18465: GO 18467
18467: DISABLE
18468: LD_INT 0
18470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18471: LD_ADDR_VAR 0 1
18475: PUSH
18476: LD_INT 22
18478: PUSH
18479: LD_OWVAR 2
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 21
18490: PUSH
18491: LD_INT 2
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PPUSH
18502: CALL_OW 69
18506: ST_TO_ADDR
// if not tmp then
18507: LD_VAR 0 1
18511: NOT
18512: IFFALSE 18516
// exit ;
18514: GO 18542
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18516: LD_VAR 0 1
18520: PUSH
18521: LD_INT 1
18523: PPUSH
18524: LD_VAR 0 1
18528: PPUSH
18529: CALL_OW 12
18533: ARRAY
18534: PPUSH
18535: LD_INT 60
18537: PPUSH
18538: CALL_OW 234
// end ;
18542: PPOPN 1
18544: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18545: LD_EXP 43
18549: PUSH
18550: LD_EXP 73
18554: AND
18555: IFFALSE 18654
18557: GO 18559
18559: DISABLE
18560: LD_INT 0
18562: PPUSH
18563: PPUSH
// begin enable ;
18564: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18565: LD_ADDR_VAR 0 1
18569: PUSH
18570: LD_INT 22
18572: PUSH
18573: LD_OWVAR 2
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 61
18584: PUSH
18585: EMPTY
18586: LIST
18587: PUSH
18588: LD_INT 33
18590: PUSH
18591: LD_INT 2
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: LIST
18602: PPUSH
18603: CALL_OW 69
18607: ST_TO_ADDR
// if not tmp then
18608: LD_VAR 0 1
18612: NOT
18613: IFFALSE 18617
// exit ;
18615: GO 18654
// for i in tmp do
18617: LD_ADDR_VAR 0 2
18621: PUSH
18622: LD_VAR 0 1
18626: PUSH
18627: FOR_IN
18628: IFFALSE 18652
// if IsControledBy ( i ) then
18630: LD_VAR 0 2
18634: PPUSH
18635: CALL_OW 312
18639: IFFALSE 18650
// ComUnlink ( i ) ;
18641: LD_VAR 0 2
18645: PPUSH
18646: CALL_OW 136
18650: GO 18627
18652: POP
18653: POP
// end ;
18654: PPOPN 2
18656: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18657: LD_EXP 43
18661: PUSH
18662: LD_EXP 74
18666: AND
18667: IFFALSE 18807
18669: GO 18671
18671: DISABLE
18672: LD_INT 0
18674: PPUSH
18675: PPUSH
// begin ToLua ( displayPowell(); ) ;
18676: LD_STRING displayPowell();
18678: PPUSH
18679: CALL_OW 559
// uc_side := 0 ;
18683: LD_ADDR_OWVAR 20
18687: PUSH
18688: LD_INT 0
18690: ST_TO_ADDR
// uc_nation := 2 ;
18691: LD_ADDR_OWVAR 21
18695: PUSH
18696: LD_INT 2
18698: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18699: LD_ADDR_OWVAR 37
18703: PUSH
18704: LD_INT 14
18706: ST_TO_ADDR
// vc_engine := engine_siberite ;
18707: LD_ADDR_OWVAR 39
18711: PUSH
18712: LD_INT 3
18714: ST_TO_ADDR
// vc_control := control_apeman ;
18715: LD_ADDR_OWVAR 38
18719: PUSH
18720: LD_INT 5
18722: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18723: LD_ADDR_OWVAR 40
18727: PUSH
18728: LD_INT 29
18730: ST_TO_ADDR
// un := CreateVehicle ;
18731: LD_ADDR_VAR 0 2
18735: PUSH
18736: CALL_OW 45
18740: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18741: LD_VAR 0 2
18745: PPUSH
18746: LD_INT 1
18748: PPUSH
18749: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18753: LD_INT 35
18755: PPUSH
18756: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18760: LD_VAR 0 2
18764: PPUSH
18765: LD_INT 22
18767: PUSH
18768: LD_OWVAR 2
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PPUSH
18777: CALL_OW 69
18781: PPUSH
18782: LD_VAR 0 2
18786: PPUSH
18787: CALL_OW 74
18791: PPUSH
18792: CALL_OW 115
// until IsDead ( un ) ;
18796: LD_VAR 0 2
18800: PPUSH
18801: CALL_OW 301
18805: IFFALSE 18753
// end ;
18807: PPOPN 2
18809: END
// every 0 0$1 trigger StreamModeActive and sStu do
18810: LD_EXP 43
18814: PUSH
18815: LD_EXP 82
18819: AND
18820: IFFALSE 18836
18822: GO 18824
18824: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18825: LD_STRING displayStucuk();
18827: PPUSH
18828: CALL_OW 559
// ResetFog ;
18832: CALL_OW 335
// end ;
18836: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18837: LD_EXP 43
18841: PUSH
18842: LD_EXP 75
18846: AND
18847: IFFALSE 18988
18849: GO 18851
18851: DISABLE
18852: LD_INT 0
18854: PPUSH
18855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18856: LD_ADDR_VAR 0 2
18860: PUSH
18861: LD_INT 22
18863: PUSH
18864: LD_OWVAR 2
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 21
18875: PUSH
18876: LD_INT 1
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PPUSH
18887: CALL_OW 69
18891: ST_TO_ADDR
// if not tmp then
18892: LD_VAR 0 2
18896: NOT
18897: IFFALSE 18901
// exit ;
18899: GO 18988
// un := tmp [ rand ( 1 , tmp ) ] ;
18901: LD_ADDR_VAR 0 1
18905: PUSH
18906: LD_VAR 0 2
18910: PUSH
18911: LD_INT 1
18913: PPUSH
18914: LD_VAR 0 2
18918: PPUSH
18919: CALL_OW 12
18923: ARRAY
18924: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18925: LD_VAR 0 1
18929: PPUSH
18930: LD_INT 0
18932: PPUSH
18933: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18937: LD_VAR 0 1
18941: PPUSH
18942: LD_OWVAR 3
18946: PUSH
18947: LD_VAR 0 1
18951: DIFF
18952: PPUSH
18953: LD_VAR 0 1
18957: PPUSH
18958: CALL_OW 74
18962: PPUSH
18963: CALL_OW 115
// wait ( 0 0$20 ) ;
18967: LD_INT 700
18969: PPUSH
18970: CALL_OW 67
// SetSide ( un , your_side ) ;
18974: LD_VAR 0 1
18978: PPUSH
18979: LD_OWVAR 2
18983: PPUSH
18984: CALL_OW 235
// end ;
18988: PPOPN 2
18990: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18991: LD_EXP 43
18995: PUSH
18996: LD_EXP 76
19000: AND
19001: IFFALSE 19107
19003: GO 19005
19005: DISABLE
19006: LD_INT 0
19008: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19009: LD_ADDR_VAR 0 1
19013: PUSH
19014: LD_INT 22
19016: PUSH
19017: LD_OWVAR 2
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 2
19028: PUSH
19029: LD_INT 30
19031: PUSH
19032: LD_INT 0
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 30
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: LIST
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PPUSH
19058: CALL_OW 69
19062: ST_TO_ADDR
// if not depot then
19063: LD_VAR 0 1
19067: NOT
19068: IFFALSE 19072
// exit ;
19070: GO 19107
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19072: LD_VAR 0 1
19076: PUSH
19077: LD_INT 1
19079: ARRAY
19080: PPUSH
19081: CALL_OW 250
19085: PPUSH
19086: LD_VAR 0 1
19090: PUSH
19091: LD_INT 1
19093: ARRAY
19094: PPUSH
19095: CALL_OW 251
19099: PPUSH
19100: LD_INT 70
19102: PPUSH
19103: CALL_OW 495
// end ;
19107: PPOPN 1
19109: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19110: LD_EXP 43
19114: PUSH
19115: LD_EXP 77
19119: AND
19120: IFFALSE 19331
19122: GO 19124
19124: DISABLE
19125: LD_INT 0
19127: PPUSH
19128: PPUSH
19129: PPUSH
19130: PPUSH
19131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19132: LD_ADDR_VAR 0 5
19136: PUSH
19137: LD_INT 22
19139: PUSH
19140: LD_OWVAR 2
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 21
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PPUSH
19163: CALL_OW 69
19167: ST_TO_ADDR
// if not tmp then
19168: LD_VAR 0 5
19172: NOT
19173: IFFALSE 19177
// exit ;
19175: GO 19331
// for i in tmp do
19177: LD_ADDR_VAR 0 1
19181: PUSH
19182: LD_VAR 0 5
19186: PUSH
19187: FOR_IN
19188: IFFALSE 19329
// begin d := rand ( 0 , 5 ) ;
19190: LD_ADDR_VAR 0 4
19194: PUSH
19195: LD_INT 0
19197: PPUSH
19198: LD_INT 5
19200: PPUSH
19201: CALL_OW 12
19205: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19206: LD_ADDR_VAR 0 2
19210: PUSH
19211: LD_VAR 0 1
19215: PPUSH
19216: CALL_OW 250
19220: PPUSH
19221: LD_VAR 0 4
19225: PPUSH
19226: LD_INT 3
19228: PPUSH
19229: LD_INT 12
19231: PPUSH
19232: CALL_OW 12
19236: PPUSH
19237: CALL_OW 272
19241: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19242: LD_ADDR_VAR 0 3
19246: PUSH
19247: LD_VAR 0 1
19251: PPUSH
19252: CALL_OW 251
19256: PPUSH
19257: LD_VAR 0 4
19261: PPUSH
19262: LD_INT 3
19264: PPUSH
19265: LD_INT 12
19267: PPUSH
19268: CALL_OW 12
19272: PPUSH
19273: CALL_OW 273
19277: ST_TO_ADDR
// if ValidHex ( x , y ) then
19278: LD_VAR 0 2
19282: PPUSH
19283: LD_VAR 0 3
19287: PPUSH
19288: CALL_OW 488
19292: IFFALSE 19327
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19294: LD_VAR 0 1
19298: PPUSH
19299: LD_VAR 0 2
19303: PPUSH
19304: LD_VAR 0 3
19308: PPUSH
19309: LD_INT 3
19311: PPUSH
19312: LD_INT 6
19314: PPUSH
19315: CALL_OW 12
19319: PPUSH
19320: LD_INT 1
19322: PPUSH
19323: CALL_OW 483
// end ;
19327: GO 19187
19329: POP
19330: POP
// end ;
19331: PPOPN 5
19333: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19334: LD_EXP 43
19338: PUSH
19339: LD_EXP 78
19343: AND
19344: IFFALSE 19438
19346: GO 19348
19348: DISABLE
19349: LD_INT 0
19351: PPUSH
19352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19353: LD_ADDR_VAR 0 2
19357: PUSH
19358: LD_INT 22
19360: PUSH
19361: LD_OWVAR 2
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 32
19372: PUSH
19373: LD_INT 1
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 21
19382: PUSH
19383: LD_INT 2
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: LIST
19394: PPUSH
19395: CALL_OW 69
19399: ST_TO_ADDR
// if not tmp then
19400: LD_VAR 0 2
19404: NOT
19405: IFFALSE 19409
// exit ;
19407: GO 19438
// for i in tmp do
19409: LD_ADDR_VAR 0 1
19413: PUSH
19414: LD_VAR 0 2
19418: PUSH
19419: FOR_IN
19420: IFFALSE 19436
// SetFuel ( i , 0 ) ;
19422: LD_VAR 0 1
19426: PPUSH
19427: LD_INT 0
19429: PPUSH
19430: CALL_OW 240
19434: GO 19419
19436: POP
19437: POP
// end ;
19438: PPOPN 2
19440: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19441: LD_EXP 43
19445: PUSH
19446: LD_EXP 79
19450: AND
19451: IFFALSE 19517
19453: GO 19455
19455: DISABLE
19456: LD_INT 0
19458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19459: LD_ADDR_VAR 0 1
19463: PUSH
19464: LD_INT 22
19466: PUSH
19467: LD_OWVAR 2
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 30
19478: PUSH
19479: LD_INT 29
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PPUSH
19490: CALL_OW 69
19494: ST_TO_ADDR
// if not tmp then
19495: LD_VAR 0 1
19499: NOT
19500: IFFALSE 19504
// exit ;
19502: GO 19517
// DestroyUnit ( tmp [ 1 ] ) ;
19504: LD_VAR 0 1
19508: PUSH
19509: LD_INT 1
19511: ARRAY
19512: PPUSH
19513: CALL_OW 65
// end ;
19517: PPOPN 1
19519: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19520: LD_EXP 43
19524: PUSH
19525: LD_EXP 81
19529: AND
19530: IFFALSE 19659
19532: GO 19534
19534: DISABLE
19535: LD_INT 0
19537: PPUSH
// begin uc_side := 0 ;
19538: LD_ADDR_OWVAR 20
19542: PUSH
19543: LD_INT 0
19545: ST_TO_ADDR
// uc_nation := nation_arabian ;
19546: LD_ADDR_OWVAR 21
19550: PUSH
19551: LD_INT 2
19553: ST_TO_ADDR
// hc_gallery :=  ;
19554: LD_ADDR_OWVAR 33
19558: PUSH
19559: LD_STRING 
19561: ST_TO_ADDR
// hc_name :=  ;
19562: LD_ADDR_OWVAR 26
19566: PUSH
19567: LD_STRING 
19569: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19570: LD_INT 1
19572: PPUSH
19573: LD_INT 11
19575: PPUSH
19576: LD_INT 10
19578: PPUSH
19579: CALL_OW 380
// un := CreateHuman ;
19583: LD_ADDR_VAR 0 1
19587: PUSH
19588: CALL_OW 44
19592: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19593: LD_VAR 0 1
19597: PPUSH
19598: LD_INT 1
19600: PPUSH
19601: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19605: LD_INT 35
19607: PPUSH
19608: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19612: LD_VAR 0 1
19616: PPUSH
19617: LD_INT 22
19619: PUSH
19620: LD_OWVAR 2
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PPUSH
19629: CALL_OW 69
19633: PPUSH
19634: LD_VAR 0 1
19638: PPUSH
19639: CALL_OW 74
19643: PPUSH
19644: CALL_OW 115
// until IsDead ( un ) ;
19648: LD_VAR 0 1
19652: PPUSH
19653: CALL_OW 301
19657: IFFALSE 19605
// end ;
19659: PPOPN 1
19661: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19662: LD_EXP 43
19666: PUSH
19667: LD_EXP 83
19671: AND
19672: IFFALSE 19684
19674: GO 19676
19676: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19677: LD_STRING earthquake(getX(game), 0, 32)
19679: PPUSH
19680: CALL_OW 559
19684: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19685: LD_EXP 43
19689: PUSH
19690: LD_EXP 84
19694: AND
19695: IFFALSE 19786
19697: GO 19699
19699: DISABLE
19700: LD_INT 0
19702: PPUSH
// begin enable ;
19703: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19704: LD_ADDR_VAR 0 1
19708: PUSH
19709: LD_INT 22
19711: PUSH
19712: LD_OWVAR 2
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 21
19723: PUSH
19724: LD_INT 2
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 33
19733: PUSH
19734: LD_INT 3
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: LIST
19745: PPUSH
19746: CALL_OW 69
19750: ST_TO_ADDR
// if not tmp then
19751: LD_VAR 0 1
19755: NOT
19756: IFFALSE 19760
// exit ;
19758: GO 19786
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19760: LD_VAR 0 1
19764: PUSH
19765: LD_INT 1
19767: PPUSH
19768: LD_VAR 0 1
19772: PPUSH
19773: CALL_OW 12
19777: ARRAY
19778: PPUSH
19779: LD_INT 1
19781: PPUSH
19782: CALL_OW 234
// end ;
19786: PPOPN 1
19788: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19789: LD_EXP 43
19793: PUSH
19794: LD_EXP 85
19798: AND
19799: IFFALSE 19940
19801: GO 19803
19803: DISABLE
19804: LD_INT 0
19806: PPUSH
19807: PPUSH
19808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19809: LD_ADDR_VAR 0 3
19813: PUSH
19814: LD_INT 22
19816: PUSH
19817: LD_OWVAR 2
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 25
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PPUSH
19840: CALL_OW 69
19844: ST_TO_ADDR
// if not tmp then
19845: LD_VAR 0 3
19849: NOT
19850: IFFALSE 19854
// exit ;
19852: GO 19940
// un := tmp [ rand ( 1 , tmp ) ] ;
19854: LD_ADDR_VAR 0 2
19858: PUSH
19859: LD_VAR 0 3
19863: PUSH
19864: LD_INT 1
19866: PPUSH
19867: LD_VAR 0 3
19871: PPUSH
19872: CALL_OW 12
19876: ARRAY
19877: ST_TO_ADDR
// if Crawls ( un ) then
19878: LD_VAR 0 2
19882: PPUSH
19883: CALL_OW 318
19887: IFFALSE 19898
// ComWalk ( un ) ;
19889: LD_VAR 0 2
19893: PPUSH
19894: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19898: LD_VAR 0 2
19902: PPUSH
19903: LD_INT 9
19905: PPUSH
19906: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19910: LD_INT 28
19912: PPUSH
19913: LD_OWVAR 2
19917: PPUSH
19918: LD_INT 2
19920: PPUSH
19921: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19925: LD_INT 29
19927: PPUSH
19928: LD_OWVAR 2
19932: PPUSH
19933: LD_INT 2
19935: PPUSH
19936: CALL_OW 322
// end ;
19940: PPOPN 3
19942: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19943: LD_EXP 43
19947: PUSH
19948: LD_EXP 86
19952: AND
19953: IFFALSE 20064
19955: GO 19957
19957: DISABLE
19958: LD_INT 0
19960: PPUSH
19961: PPUSH
19962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19963: LD_ADDR_VAR 0 3
19967: PUSH
19968: LD_INT 22
19970: PUSH
19971: LD_OWVAR 2
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 25
19982: PUSH
19983: LD_INT 1
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PPUSH
19994: CALL_OW 69
19998: ST_TO_ADDR
// if not tmp then
19999: LD_VAR 0 3
20003: NOT
20004: IFFALSE 20008
// exit ;
20006: GO 20064
// un := tmp [ rand ( 1 , tmp ) ] ;
20008: LD_ADDR_VAR 0 2
20012: PUSH
20013: LD_VAR 0 3
20017: PUSH
20018: LD_INT 1
20020: PPUSH
20021: LD_VAR 0 3
20025: PPUSH
20026: CALL_OW 12
20030: ARRAY
20031: ST_TO_ADDR
// if Crawls ( un ) then
20032: LD_VAR 0 2
20036: PPUSH
20037: CALL_OW 318
20041: IFFALSE 20052
// ComWalk ( un ) ;
20043: LD_VAR 0 2
20047: PPUSH
20048: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20052: LD_VAR 0 2
20056: PPUSH
20057: LD_INT 8
20059: PPUSH
20060: CALL_OW 336
// end ;
20064: PPOPN 3
20066: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20067: LD_EXP 43
20071: PUSH
20072: LD_EXP 87
20076: AND
20077: IFFALSE 20221
20079: GO 20081
20081: DISABLE
20082: LD_INT 0
20084: PPUSH
20085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20086: LD_ADDR_VAR 0 2
20090: PUSH
20091: LD_INT 22
20093: PUSH
20094: LD_OWVAR 2
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 21
20105: PUSH
20106: LD_INT 2
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 2
20115: PUSH
20116: LD_INT 34
20118: PUSH
20119: LD_INT 12
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 34
20128: PUSH
20129: LD_INT 51
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 34
20138: PUSH
20139: LD_INT 32
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: PPUSH
20157: CALL_OW 69
20161: ST_TO_ADDR
// if not tmp then
20162: LD_VAR 0 2
20166: NOT
20167: IFFALSE 20171
// exit ;
20169: GO 20221
// for i in tmp do
20171: LD_ADDR_VAR 0 1
20175: PUSH
20176: LD_VAR 0 2
20180: PUSH
20181: FOR_IN
20182: IFFALSE 20219
// if GetCargo ( i , mat_artifact ) = 0 then
20184: LD_VAR 0 1
20188: PPUSH
20189: LD_INT 4
20191: PPUSH
20192: CALL_OW 289
20196: PUSH
20197: LD_INT 0
20199: EQUAL
20200: IFFALSE 20217
// SetCargo ( i , mat_siberit , 100 ) ;
20202: LD_VAR 0 1
20206: PPUSH
20207: LD_INT 3
20209: PPUSH
20210: LD_INT 100
20212: PPUSH
20213: CALL_OW 290
20217: GO 20181
20219: POP
20220: POP
// end ;
20221: PPOPN 2
20223: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20224: LD_EXP 43
20228: PUSH
20229: LD_EXP 88
20233: AND
20234: IFFALSE 20417
20236: GO 20238
20238: DISABLE
20239: LD_INT 0
20241: PPUSH
20242: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20243: LD_ADDR_VAR 0 2
20247: PUSH
20248: LD_INT 22
20250: PUSH
20251: LD_OWVAR 2
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PPUSH
20260: CALL_OW 69
20264: ST_TO_ADDR
// if not tmp then
20265: LD_VAR 0 2
20269: NOT
20270: IFFALSE 20274
// exit ;
20272: GO 20417
// for i := 1 to 2 do
20274: LD_ADDR_VAR 0 1
20278: PUSH
20279: DOUBLE
20280: LD_INT 1
20282: DEC
20283: ST_TO_ADDR
20284: LD_INT 2
20286: PUSH
20287: FOR_TO
20288: IFFALSE 20415
// begin uc_side := your_side ;
20290: LD_ADDR_OWVAR 20
20294: PUSH
20295: LD_OWVAR 2
20299: ST_TO_ADDR
// uc_nation := nation_american ;
20300: LD_ADDR_OWVAR 21
20304: PUSH
20305: LD_INT 1
20307: ST_TO_ADDR
// vc_chassis := us_morphling ;
20308: LD_ADDR_OWVAR 37
20312: PUSH
20313: LD_INT 5
20315: ST_TO_ADDR
// vc_engine := engine_siberite ;
20316: LD_ADDR_OWVAR 39
20320: PUSH
20321: LD_INT 3
20323: ST_TO_ADDR
// vc_control := control_computer ;
20324: LD_ADDR_OWVAR 38
20328: PUSH
20329: LD_INT 3
20331: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20332: LD_ADDR_OWVAR 40
20336: PUSH
20337: LD_INT 10
20339: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20340: LD_VAR 0 2
20344: PUSH
20345: LD_INT 1
20347: ARRAY
20348: PPUSH
20349: CALL_OW 310
20353: NOT
20354: IFFALSE 20401
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20356: CALL_OW 45
20360: PPUSH
20361: LD_VAR 0 2
20365: PUSH
20366: LD_INT 1
20368: ARRAY
20369: PPUSH
20370: CALL_OW 250
20374: PPUSH
20375: LD_VAR 0 2
20379: PUSH
20380: LD_INT 1
20382: ARRAY
20383: PPUSH
20384: CALL_OW 251
20388: PPUSH
20389: LD_INT 12
20391: PPUSH
20392: LD_INT 1
20394: PPUSH
20395: CALL_OW 50
20399: GO 20413
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20401: CALL_OW 45
20405: PPUSH
20406: LD_INT 1
20408: PPUSH
20409: CALL_OW 51
// end ;
20413: GO 20287
20415: POP
20416: POP
// end ;
20417: PPOPN 2
20419: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20420: LD_EXP 43
20424: PUSH
20425: LD_EXP 89
20429: AND
20430: IFFALSE 20652
20432: GO 20434
20434: DISABLE
20435: LD_INT 0
20437: PPUSH
20438: PPUSH
20439: PPUSH
20440: PPUSH
20441: PPUSH
20442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20443: LD_ADDR_VAR 0 6
20447: PUSH
20448: LD_INT 22
20450: PUSH
20451: LD_OWVAR 2
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 21
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 3
20472: PUSH
20473: LD_INT 23
20475: PUSH
20476: LD_INT 0
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: LIST
20491: PPUSH
20492: CALL_OW 69
20496: ST_TO_ADDR
// if not tmp then
20497: LD_VAR 0 6
20501: NOT
20502: IFFALSE 20506
// exit ;
20504: GO 20652
// s1 := rand ( 1 , 4 ) ;
20506: LD_ADDR_VAR 0 2
20510: PUSH
20511: LD_INT 1
20513: PPUSH
20514: LD_INT 4
20516: PPUSH
20517: CALL_OW 12
20521: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20522: LD_ADDR_VAR 0 4
20526: PUSH
20527: LD_VAR 0 6
20531: PUSH
20532: LD_INT 1
20534: ARRAY
20535: PPUSH
20536: LD_VAR 0 2
20540: PPUSH
20541: CALL_OW 259
20545: ST_TO_ADDR
// if s1 = 1 then
20546: LD_VAR 0 2
20550: PUSH
20551: LD_INT 1
20553: EQUAL
20554: IFFALSE 20574
// s2 := rand ( 2 , 4 ) else
20556: LD_ADDR_VAR 0 3
20560: PUSH
20561: LD_INT 2
20563: PPUSH
20564: LD_INT 4
20566: PPUSH
20567: CALL_OW 12
20571: ST_TO_ADDR
20572: GO 20582
// s2 := 1 ;
20574: LD_ADDR_VAR 0 3
20578: PUSH
20579: LD_INT 1
20581: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20582: LD_ADDR_VAR 0 5
20586: PUSH
20587: LD_VAR 0 6
20591: PUSH
20592: LD_INT 1
20594: ARRAY
20595: PPUSH
20596: LD_VAR 0 3
20600: PPUSH
20601: CALL_OW 259
20605: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20606: LD_VAR 0 6
20610: PUSH
20611: LD_INT 1
20613: ARRAY
20614: PPUSH
20615: LD_VAR 0 2
20619: PPUSH
20620: LD_VAR 0 5
20624: PPUSH
20625: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20629: LD_VAR 0 6
20633: PUSH
20634: LD_INT 1
20636: ARRAY
20637: PPUSH
20638: LD_VAR 0 3
20642: PPUSH
20643: LD_VAR 0 4
20647: PPUSH
20648: CALL_OW 237
// end ;
20652: PPOPN 6
20654: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20655: LD_EXP 43
20659: PUSH
20660: LD_EXP 90
20664: AND
20665: IFFALSE 20744
20667: GO 20669
20669: DISABLE
20670: LD_INT 0
20672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20673: LD_ADDR_VAR 0 1
20677: PUSH
20678: LD_INT 22
20680: PUSH
20681: LD_OWVAR 2
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 30
20692: PUSH
20693: LD_INT 3
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PPUSH
20704: CALL_OW 69
20708: ST_TO_ADDR
// if not tmp then
20709: LD_VAR 0 1
20713: NOT
20714: IFFALSE 20718
// exit ;
20716: GO 20744
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20718: LD_VAR 0 1
20722: PUSH
20723: LD_INT 1
20725: PPUSH
20726: LD_VAR 0 1
20730: PPUSH
20731: CALL_OW 12
20735: ARRAY
20736: PPUSH
20737: LD_INT 1
20739: PPUSH
20740: CALL_OW 234
// end ;
20744: PPOPN 1
20746: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20747: LD_EXP 43
20751: PUSH
20752: LD_EXP 91
20756: AND
20757: IFFALSE 20869
20759: GO 20761
20761: DISABLE
20762: LD_INT 0
20764: PPUSH
20765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20766: LD_ADDR_VAR 0 2
20770: PUSH
20771: LD_INT 22
20773: PUSH
20774: LD_OWVAR 2
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 2
20785: PUSH
20786: LD_INT 30
20788: PUSH
20789: LD_INT 27
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 30
20798: PUSH
20799: LD_INT 26
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 30
20808: PUSH
20809: LD_INT 28
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PPUSH
20826: CALL_OW 69
20830: ST_TO_ADDR
// if not tmp then
20831: LD_VAR 0 2
20835: NOT
20836: IFFALSE 20840
// exit ;
20838: GO 20869
// for i in tmp do
20840: LD_ADDR_VAR 0 1
20844: PUSH
20845: LD_VAR 0 2
20849: PUSH
20850: FOR_IN
20851: IFFALSE 20867
// SetLives ( i , 1 ) ;
20853: LD_VAR 0 1
20857: PPUSH
20858: LD_INT 1
20860: PPUSH
20861: CALL_OW 234
20865: GO 20850
20867: POP
20868: POP
// end ;
20869: PPOPN 2
20871: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20872: LD_EXP 43
20876: PUSH
20877: LD_EXP 92
20881: AND
20882: IFFALSE 21169
20884: GO 20886
20886: DISABLE
20887: LD_INT 0
20889: PPUSH
20890: PPUSH
20891: PPUSH
// begin i := rand ( 1 , 7 ) ;
20892: LD_ADDR_VAR 0 1
20896: PUSH
20897: LD_INT 1
20899: PPUSH
20900: LD_INT 7
20902: PPUSH
20903: CALL_OW 12
20907: ST_TO_ADDR
// case i of 1 :
20908: LD_VAR 0 1
20912: PUSH
20913: LD_INT 1
20915: DOUBLE
20916: EQUAL
20917: IFTRUE 20921
20919: GO 20931
20921: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20922: LD_STRING earthquake(getX(game), 0, 32)
20924: PPUSH
20925: CALL_OW 559
20929: GO 21169
20931: LD_INT 2
20933: DOUBLE
20934: EQUAL
20935: IFTRUE 20939
20937: GO 20953
20939: POP
// begin ToLua ( displayStucuk(); ) ;
20940: LD_STRING displayStucuk();
20942: PPUSH
20943: CALL_OW 559
// ResetFog ;
20947: CALL_OW 335
// end ; 3 :
20951: GO 21169
20953: LD_INT 3
20955: DOUBLE
20956: EQUAL
20957: IFTRUE 20961
20959: GO 21065
20961: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20962: LD_ADDR_VAR 0 2
20966: PUSH
20967: LD_INT 22
20969: PUSH
20970: LD_OWVAR 2
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 25
20981: PUSH
20982: LD_INT 1
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PPUSH
20993: CALL_OW 69
20997: ST_TO_ADDR
// if not tmp then
20998: LD_VAR 0 2
21002: NOT
21003: IFFALSE 21007
// exit ;
21005: GO 21169
// un := tmp [ rand ( 1 , tmp ) ] ;
21007: LD_ADDR_VAR 0 3
21011: PUSH
21012: LD_VAR 0 2
21016: PUSH
21017: LD_INT 1
21019: PPUSH
21020: LD_VAR 0 2
21024: PPUSH
21025: CALL_OW 12
21029: ARRAY
21030: ST_TO_ADDR
// if Crawls ( un ) then
21031: LD_VAR 0 3
21035: PPUSH
21036: CALL_OW 318
21040: IFFALSE 21051
// ComWalk ( un ) ;
21042: LD_VAR 0 3
21046: PPUSH
21047: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21051: LD_VAR 0 3
21055: PPUSH
21056: LD_INT 8
21058: PPUSH
21059: CALL_OW 336
// end ; 4 :
21063: GO 21169
21065: LD_INT 4
21067: DOUBLE
21068: EQUAL
21069: IFTRUE 21073
21071: GO 21147
21073: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21074: LD_ADDR_VAR 0 2
21078: PUSH
21079: LD_INT 22
21081: PUSH
21082: LD_OWVAR 2
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 30
21093: PUSH
21094: LD_INT 29
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PPUSH
21105: CALL_OW 69
21109: ST_TO_ADDR
// if not tmp then
21110: LD_VAR 0 2
21114: NOT
21115: IFFALSE 21119
// exit ;
21117: GO 21169
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21119: LD_VAR 0 2
21123: PUSH
21124: LD_INT 1
21126: ARRAY
21127: PPUSH
21128: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21132: LD_VAR 0 2
21136: PUSH
21137: LD_INT 1
21139: ARRAY
21140: PPUSH
21141: CALL_OW 65
// end ; 5 .. 7 :
21145: GO 21169
21147: LD_INT 5
21149: DOUBLE
21150: GREATEREQUAL
21151: IFFALSE 21159
21153: LD_INT 7
21155: DOUBLE
21156: LESSEQUAL
21157: IFTRUE 21161
21159: GO 21168
21161: POP
// StreamSibBomb ; end ;
21162: CALL 17406 0 0
21166: GO 21169
21168: POP
// end ;
21169: PPOPN 3
21171: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21172: LD_EXP 43
21176: PUSH
21177: LD_EXP 93
21181: AND
21182: IFFALSE 21338
21184: GO 21186
21186: DISABLE
21187: LD_INT 0
21189: PPUSH
21190: PPUSH
21191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21192: LD_ADDR_VAR 0 2
21196: PUSH
21197: LD_INT 81
21199: PUSH
21200: LD_OWVAR 2
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 2
21211: PUSH
21212: LD_INT 21
21214: PUSH
21215: LD_INT 1
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 21
21224: PUSH
21225: LD_INT 2
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PPUSH
21241: CALL_OW 69
21245: ST_TO_ADDR
// if not tmp then
21246: LD_VAR 0 2
21250: NOT
21251: IFFALSE 21255
// exit ;
21253: GO 21338
// p := 0 ;
21255: LD_ADDR_VAR 0 3
21259: PUSH
21260: LD_INT 0
21262: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21263: LD_INT 35
21265: PPUSH
21266: CALL_OW 67
// p := p + 1 ;
21270: LD_ADDR_VAR 0 3
21274: PUSH
21275: LD_VAR 0 3
21279: PUSH
21280: LD_INT 1
21282: PLUS
21283: ST_TO_ADDR
// for i in tmp do
21284: LD_ADDR_VAR 0 1
21288: PUSH
21289: LD_VAR 0 2
21293: PUSH
21294: FOR_IN
21295: IFFALSE 21326
// if GetLives ( i ) < 1000 then
21297: LD_VAR 0 1
21301: PPUSH
21302: CALL_OW 256
21306: PUSH
21307: LD_INT 1000
21309: LESS
21310: IFFALSE 21324
// SetLives ( i , 1000 ) ;
21312: LD_VAR 0 1
21316: PPUSH
21317: LD_INT 1000
21319: PPUSH
21320: CALL_OW 234
21324: GO 21294
21326: POP
21327: POP
// until p > 20 ;
21328: LD_VAR 0 3
21332: PUSH
21333: LD_INT 20
21335: GREATER
21336: IFFALSE 21263
// end ;
21338: PPOPN 3
21340: END
// every 0 0$1 trigger StreamModeActive and sTime do
21341: LD_EXP 43
21345: PUSH
21346: LD_EXP 94
21350: AND
21351: IFFALSE 21386
21353: GO 21355
21355: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21356: LD_INT 28
21358: PPUSH
21359: LD_OWVAR 2
21363: PPUSH
21364: LD_INT 2
21366: PPUSH
21367: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21371: LD_INT 30
21373: PPUSH
21374: LD_OWVAR 2
21378: PPUSH
21379: LD_INT 2
21381: PPUSH
21382: CALL_OW 322
// end ;
21386: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21387: LD_EXP 43
21391: PUSH
21392: LD_EXP 95
21396: AND
21397: IFFALSE 21518
21399: GO 21401
21401: DISABLE
21402: LD_INT 0
21404: PPUSH
21405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21406: LD_ADDR_VAR 0 2
21410: PUSH
21411: LD_INT 22
21413: PUSH
21414: LD_OWVAR 2
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 21
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 3
21435: PUSH
21436: LD_INT 23
21438: PUSH
21439: LD_INT 0
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: LIST
21454: PPUSH
21455: CALL_OW 69
21459: ST_TO_ADDR
// if not tmp then
21460: LD_VAR 0 2
21464: NOT
21465: IFFALSE 21469
// exit ;
21467: GO 21518
// for i in tmp do
21469: LD_ADDR_VAR 0 1
21473: PUSH
21474: LD_VAR 0 2
21478: PUSH
21479: FOR_IN
21480: IFFALSE 21516
// begin if Crawls ( i ) then
21482: LD_VAR 0 1
21486: PPUSH
21487: CALL_OW 318
21491: IFFALSE 21502
// ComWalk ( i ) ;
21493: LD_VAR 0 1
21497: PPUSH
21498: CALL_OW 138
// SetClass ( i , 2 ) ;
21502: LD_VAR 0 1
21506: PPUSH
21507: LD_INT 2
21509: PPUSH
21510: CALL_OW 336
// end ;
21514: GO 21479
21516: POP
21517: POP
// end ;
21518: PPOPN 2
21520: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21521: LD_EXP 43
21525: PUSH
21526: LD_EXP 96
21530: AND
21531: IFFALSE 21819
21533: GO 21535
21535: DISABLE
21536: LD_INT 0
21538: PPUSH
21539: PPUSH
21540: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21541: LD_OWVAR 2
21545: PPUSH
21546: LD_INT 9
21548: PPUSH
21549: LD_INT 1
21551: PPUSH
21552: LD_INT 1
21554: PPUSH
21555: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21559: LD_INT 9
21561: PPUSH
21562: LD_OWVAR 2
21566: PPUSH
21567: CALL_OW 343
// uc_side := 9 ;
21571: LD_ADDR_OWVAR 20
21575: PUSH
21576: LD_INT 9
21578: ST_TO_ADDR
// uc_nation := 2 ;
21579: LD_ADDR_OWVAR 21
21583: PUSH
21584: LD_INT 2
21586: ST_TO_ADDR
// hc_name := Dark Warrior ;
21587: LD_ADDR_OWVAR 26
21591: PUSH
21592: LD_STRING Dark Warrior
21594: ST_TO_ADDR
// hc_gallery :=  ;
21595: LD_ADDR_OWVAR 33
21599: PUSH
21600: LD_STRING 
21602: ST_TO_ADDR
// hc_noskilllimit := true ;
21603: LD_ADDR_OWVAR 76
21607: PUSH
21608: LD_INT 1
21610: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21611: LD_ADDR_OWVAR 31
21615: PUSH
21616: LD_INT 30
21618: PUSH
21619: LD_INT 30
21621: PUSH
21622: LD_INT 30
21624: PUSH
21625: LD_INT 30
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: ST_TO_ADDR
// un := CreateHuman ;
21634: LD_ADDR_VAR 0 3
21638: PUSH
21639: CALL_OW 44
21643: ST_TO_ADDR
// hc_noskilllimit := false ;
21644: LD_ADDR_OWVAR 76
21648: PUSH
21649: LD_INT 0
21651: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21652: LD_VAR 0 3
21656: PPUSH
21657: LD_INT 1
21659: PPUSH
21660: CALL_OW 51
// ToLua ( playRanger() ) ;
21664: LD_STRING playRanger()
21666: PPUSH
21667: CALL_OW 559
// p := 0 ;
21671: LD_ADDR_VAR 0 2
21675: PUSH
21676: LD_INT 0
21678: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21679: LD_INT 35
21681: PPUSH
21682: CALL_OW 67
// p := p + 1 ;
21686: LD_ADDR_VAR 0 2
21690: PUSH
21691: LD_VAR 0 2
21695: PUSH
21696: LD_INT 1
21698: PLUS
21699: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21700: LD_VAR 0 3
21704: PPUSH
21705: CALL_OW 256
21709: PUSH
21710: LD_INT 1000
21712: LESS
21713: IFFALSE 21727
// SetLives ( un , 1000 ) ;
21715: LD_VAR 0 3
21719: PPUSH
21720: LD_INT 1000
21722: PPUSH
21723: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21727: LD_VAR 0 3
21731: PPUSH
21732: LD_INT 81
21734: PUSH
21735: LD_OWVAR 2
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 91
21746: PUSH
21747: LD_VAR 0 3
21751: PUSH
21752: LD_INT 30
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: LIST
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PPUSH
21764: CALL_OW 69
21768: PPUSH
21769: LD_VAR 0 3
21773: PPUSH
21774: CALL_OW 74
21778: PPUSH
21779: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21783: LD_VAR 0 2
21787: PUSH
21788: LD_INT 80
21790: GREATER
21791: PUSH
21792: LD_VAR 0 3
21796: PPUSH
21797: CALL_OW 301
21801: OR
21802: IFFALSE 21679
// if un then
21804: LD_VAR 0 3
21808: IFFALSE 21819
// RemoveUnit ( un ) ;
21810: LD_VAR 0 3
21814: PPUSH
21815: CALL_OW 64
// end ;
21819: PPOPN 3
21821: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21822: LD_EXP 97
21826: IFFALSE 21942
21828: GO 21830
21830: DISABLE
21831: LD_INT 0
21833: PPUSH
21834: PPUSH
21835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21836: LD_ADDR_VAR 0 2
21840: PUSH
21841: LD_INT 81
21843: PUSH
21844: LD_OWVAR 2
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 21
21855: PUSH
21856: LD_INT 1
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PPUSH
21867: CALL_OW 69
21871: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21872: LD_STRING playComputer()
21874: PPUSH
21875: CALL_OW 559
// if not tmp then
21879: LD_VAR 0 2
21883: NOT
21884: IFFALSE 21888
// exit ;
21886: GO 21942
// for i in tmp do
21888: LD_ADDR_VAR 0 1
21892: PUSH
21893: LD_VAR 0 2
21897: PUSH
21898: FOR_IN
21899: IFFALSE 21940
// for j := 1 to 4 do
21901: LD_ADDR_VAR 0 3
21905: PUSH
21906: DOUBLE
21907: LD_INT 1
21909: DEC
21910: ST_TO_ADDR
21911: LD_INT 4
21913: PUSH
21914: FOR_TO
21915: IFFALSE 21936
// SetSkill ( i , j , 10 ) ;
21917: LD_VAR 0 1
21921: PPUSH
21922: LD_VAR 0 3
21926: PPUSH
21927: LD_INT 10
21929: PPUSH
21930: CALL_OW 237
21934: GO 21914
21936: POP
21937: POP
21938: GO 21898
21940: POP
21941: POP
// end ;
21942: PPOPN 3
21944: END
// every 0 0$1 trigger s30 do var i , tmp ;
21945: LD_EXP 98
21949: IFFALSE 22018
21951: GO 21953
21953: DISABLE
21954: LD_INT 0
21956: PPUSH
21957: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21958: LD_ADDR_VAR 0 2
21962: PUSH
21963: LD_INT 22
21965: PUSH
21966: LD_OWVAR 2
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PPUSH
21975: CALL_OW 69
21979: ST_TO_ADDR
// if not tmp then
21980: LD_VAR 0 2
21984: NOT
21985: IFFALSE 21989
// exit ;
21987: GO 22018
// for i in tmp do
21989: LD_ADDR_VAR 0 1
21993: PUSH
21994: LD_VAR 0 2
21998: PUSH
21999: FOR_IN
22000: IFFALSE 22016
// SetLives ( i , 300 ) ;
22002: LD_VAR 0 1
22006: PPUSH
22007: LD_INT 300
22009: PPUSH
22010: CALL_OW 234
22014: GO 21999
22016: POP
22017: POP
// end ;
22018: PPOPN 2
22020: END
// every 0 0$1 trigger s60 do var i , tmp ;
22021: LD_EXP 99
22025: IFFALSE 22094
22027: GO 22029
22029: DISABLE
22030: LD_INT 0
22032: PPUSH
22033: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22034: LD_ADDR_VAR 0 2
22038: PUSH
22039: LD_INT 22
22041: PUSH
22042: LD_OWVAR 2
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PPUSH
22051: CALL_OW 69
22055: ST_TO_ADDR
// if not tmp then
22056: LD_VAR 0 2
22060: NOT
22061: IFFALSE 22065
// exit ;
22063: GO 22094
// for i in tmp do
22065: LD_ADDR_VAR 0 1
22069: PUSH
22070: LD_VAR 0 2
22074: PUSH
22075: FOR_IN
22076: IFFALSE 22092
// SetLives ( i , 600 ) ;
22078: LD_VAR 0 1
22082: PPUSH
22083: LD_INT 600
22085: PPUSH
22086: CALL_OW 234
22090: GO 22075
22092: POP
22093: POP
// end ;
22094: PPOPN 2
22096: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22097: LD_INT 0
22099: PPUSH
// case cmd of 301 :
22100: LD_VAR 0 1
22104: PUSH
22105: LD_INT 301
22107: DOUBLE
22108: EQUAL
22109: IFTRUE 22113
22111: GO 22145
22113: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22114: LD_VAR 0 6
22118: PPUSH
22119: LD_VAR 0 7
22123: PPUSH
22124: LD_VAR 0 8
22128: PPUSH
22129: LD_VAR 0 4
22133: PPUSH
22134: LD_VAR 0 5
22138: PPUSH
22139: CALL 23346 0 5
22143: GO 22266
22145: LD_INT 302
22147: DOUBLE
22148: EQUAL
22149: IFTRUE 22153
22151: GO 22190
22153: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22154: LD_VAR 0 6
22158: PPUSH
22159: LD_VAR 0 7
22163: PPUSH
22164: LD_VAR 0 8
22168: PPUSH
22169: LD_VAR 0 9
22173: PPUSH
22174: LD_VAR 0 4
22178: PPUSH
22179: LD_VAR 0 5
22183: PPUSH
22184: CALL 23437 0 6
22188: GO 22266
22190: LD_INT 303
22192: DOUBLE
22193: EQUAL
22194: IFTRUE 22198
22196: GO 22235
22198: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22199: LD_VAR 0 6
22203: PPUSH
22204: LD_VAR 0 7
22208: PPUSH
22209: LD_VAR 0 8
22213: PPUSH
22214: LD_VAR 0 9
22218: PPUSH
22219: LD_VAR 0 4
22223: PPUSH
22224: LD_VAR 0 5
22228: PPUSH
22229: CALL 22271 0 6
22233: GO 22266
22235: LD_INT 304
22237: DOUBLE
22238: EQUAL
22239: IFTRUE 22243
22241: GO 22265
22243: POP
// hHackTeleport ( unit , x , y ) ; end ;
22244: LD_VAR 0 2
22248: PPUSH
22249: LD_VAR 0 4
22253: PPUSH
22254: LD_VAR 0 5
22258: PPUSH
22259: CALL 24030 0 3
22263: GO 22266
22265: POP
// end ;
22266: LD_VAR 0 12
22270: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22271: LD_INT 0
22273: PPUSH
22274: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22275: LD_VAR 0 1
22279: PUSH
22280: LD_INT 1
22282: LESS
22283: PUSH
22284: LD_VAR 0 1
22288: PUSH
22289: LD_INT 3
22291: GREATER
22292: OR
22293: PUSH
22294: LD_VAR 0 5
22298: PPUSH
22299: LD_VAR 0 6
22303: PPUSH
22304: CALL_OW 428
22308: OR
22309: IFFALSE 22313
// exit ;
22311: GO 23033
// uc_side := your_side ;
22313: LD_ADDR_OWVAR 20
22317: PUSH
22318: LD_OWVAR 2
22322: ST_TO_ADDR
// uc_nation := nation ;
22323: LD_ADDR_OWVAR 21
22327: PUSH
22328: LD_VAR 0 1
22332: ST_TO_ADDR
// bc_level = 1 ;
22333: LD_ADDR_OWVAR 43
22337: PUSH
22338: LD_INT 1
22340: ST_TO_ADDR
// case btype of 1 :
22341: LD_VAR 0 2
22345: PUSH
22346: LD_INT 1
22348: DOUBLE
22349: EQUAL
22350: IFTRUE 22354
22352: GO 22365
22354: POP
// bc_type := b_depot ; 2 :
22355: LD_ADDR_OWVAR 42
22359: PUSH
22360: LD_INT 0
22362: ST_TO_ADDR
22363: GO 22977
22365: LD_INT 2
22367: DOUBLE
22368: EQUAL
22369: IFTRUE 22373
22371: GO 22384
22373: POP
// bc_type := b_warehouse ; 3 :
22374: LD_ADDR_OWVAR 42
22378: PUSH
22379: LD_INT 1
22381: ST_TO_ADDR
22382: GO 22977
22384: LD_INT 3
22386: DOUBLE
22387: EQUAL
22388: IFTRUE 22392
22390: GO 22403
22392: POP
// bc_type := b_lab ; 4 .. 9 :
22393: LD_ADDR_OWVAR 42
22397: PUSH
22398: LD_INT 6
22400: ST_TO_ADDR
22401: GO 22977
22403: LD_INT 4
22405: DOUBLE
22406: GREATEREQUAL
22407: IFFALSE 22415
22409: LD_INT 9
22411: DOUBLE
22412: LESSEQUAL
22413: IFTRUE 22417
22415: GO 22469
22417: POP
// begin bc_type := b_lab_half ;
22418: LD_ADDR_OWVAR 42
22422: PUSH
22423: LD_INT 7
22425: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22426: LD_ADDR_OWVAR 44
22430: PUSH
22431: LD_INT 10
22433: PUSH
22434: LD_INT 11
22436: PUSH
22437: LD_INT 12
22439: PUSH
22440: LD_INT 15
22442: PUSH
22443: LD_INT 14
22445: PUSH
22446: LD_INT 13
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: PUSH
22457: LD_VAR 0 2
22461: PUSH
22462: LD_INT 3
22464: MINUS
22465: ARRAY
22466: ST_TO_ADDR
// end ; 10 .. 13 :
22467: GO 22977
22469: LD_INT 10
22471: DOUBLE
22472: GREATEREQUAL
22473: IFFALSE 22481
22475: LD_INT 13
22477: DOUBLE
22478: LESSEQUAL
22479: IFTRUE 22483
22481: GO 22560
22483: POP
// begin bc_type := b_lab_full ;
22484: LD_ADDR_OWVAR 42
22488: PUSH
22489: LD_INT 8
22491: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22492: LD_ADDR_OWVAR 44
22496: PUSH
22497: LD_INT 10
22499: PUSH
22500: LD_INT 12
22502: PUSH
22503: LD_INT 14
22505: PUSH
22506: LD_INT 13
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: PUSH
22515: LD_VAR 0 2
22519: PUSH
22520: LD_INT 9
22522: MINUS
22523: ARRAY
22524: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22525: LD_ADDR_OWVAR 45
22529: PUSH
22530: LD_INT 11
22532: PUSH
22533: LD_INT 15
22535: PUSH
22536: LD_INT 12
22538: PUSH
22539: LD_INT 15
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: PUSH
22548: LD_VAR 0 2
22552: PUSH
22553: LD_INT 9
22555: MINUS
22556: ARRAY
22557: ST_TO_ADDR
// end ; 14 :
22558: GO 22977
22560: LD_INT 14
22562: DOUBLE
22563: EQUAL
22564: IFTRUE 22568
22566: GO 22579
22568: POP
// bc_type := b_workshop ; 15 :
22569: LD_ADDR_OWVAR 42
22573: PUSH
22574: LD_INT 2
22576: ST_TO_ADDR
22577: GO 22977
22579: LD_INT 15
22581: DOUBLE
22582: EQUAL
22583: IFTRUE 22587
22585: GO 22598
22587: POP
// bc_type := b_factory ; 16 :
22588: LD_ADDR_OWVAR 42
22592: PUSH
22593: LD_INT 3
22595: ST_TO_ADDR
22596: GO 22977
22598: LD_INT 16
22600: DOUBLE
22601: EQUAL
22602: IFTRUE 22606
22604: GO 22617
22606: POP
// bc_type := b_ext_gun ; 17 :
22607: LD_ADDR_OWVAR 42
22611: PUSH
22612: LD_INT 17
22614: ST_TO_ADDR
22615: GO 22977
22617: LD_INT 17
22619: DOUBLE
22620: EQUAL
22621: IFTRUE 22625
22623: GO 22653
22625: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22626: LD_ADDR_OWVAR 42
22630: PUSH
22631: LD_INT 19
22633: PUSH
22634: LD_INT 23
22636: PUSH
22637: LD_INT 19
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: LIST
22644: PUSH
22645: LD_VAR 0 1
22649: ARRAY
22650: ST_TO_ADDR
22651: GO 22977
22653: LD_INT 18
22655: DOUBLE
22656: EQUAL
22657: IFTRUE 22661
22659: GO 22672
22661: POP
// bc_type := b_ext_radar ; 19 :
22662: LD_ADDR_OWVAR 42
22666: PUSH
22667: LD_INT 20
22669: ST_TO_ADDR
22670: GO 22977
22672: LD_INT 19
22674: DOUBLE
22675: EQUAL
22676: IFTRUE 22680
22678: GO 22691
22680: POP
// bc_type := b_ext_radio ; 20 :
22681: LD_ADDR_OWVAR 42
22685: PUSH
22686: LD_INT 22
22688: ST_TO_ADDR
22689: GO 22977
22691: LD_INT 20
22693: DOUBLE
22694: EQUAL
22695: IFTRUE 22699
22697: GO 22710
22699: POP
// bc_type := b_ext_siberium ; 21 :
22700: LD_ADDR_OWVAR 42
22704: PUSH
22705: LD_INT 21
22707: ST_TO_ADDR
22708: GO 22977
22710: LD_INT 21
22712: DOUBLE
22713: EQUAL
22714: IFTRUE 22718
22716: GO 22729
22718: POP
// bc_type := b_ext_computer ; 22 :
22719: LD_ADDR_OWVAR 42
22723: PUSH
22724: LD_INT 24
22726: ST_TO_ADDR
22727: GO 22977
22729: LD_INT 22
22731: DOUBLE
22732: EQUAL
22733: IFTRUE 22737
22735: GO 22748
22737: POP
// bc_type := b_ext_track ; 23 :
22738: LD_ADDR_OWVAR 42
22742: PUSH
22743: LD_INT 16
22745: ST_TO_ADDR
22746: GO 22977
22748: LD_INT 23
22750: DOUBLE
22751: EQUAL
22752: IFTRUE 22756
22754: GO 22767
22756: POP
// bc_type := b_ext_laser ; 24 :
22757: LD_ADDR_OWVAR 42
22761: PUSH
22762: LD_INT 25
22764: ST_TO_ADDR
22765: GO 22977
22767: LD_INT 24
22769: DOUBLE
22770: EQUAL
22771: IFTRUE 22775
22773: GO 22786
22775: POP
// bc_type := b_control_tower ; 25 :
22776: LD_ADDR_OWVAR 42
22780: PUSH
22781: LD_INT 36
22783: ST_TO_ADDR
22784: GO 22977
22786: LD_INT 25
22788: DOUBLE
22789: EQUAL
22790: IFTRUE 22794
22792: GO 22805
22794: POP
// bc_type := b_breastwork ; 26 :
22795: LD_ADDR_OWVAR 42
22799: PUSH
22800: LD_INT 31
22802: ST_TO_ADDR
22803: GO 22977
22805: LD_INT 26
22807: DOUBLE
22808: EQUAL
22809: IFTRUE 22813
22811: GO 22824
22813: POP
// bc_type := b_bunker ; 27 :
22814: LD_ADDR_OWVAR 42
22818: PUSH
22819: LD_INT 32
22821: ST_TO_ADDR
22822: GO 22977
22824: LD_INT 27
22826: DOUBLE
22827: EQUAL
22828: IFTRUE 22832
22830: GO 22843
22832: POP
// bc_type := b_turret ; 28 :
22833: LD_ADDR_OWVAR 42
22837: PUSH
22838: LD_INT 33
22840: ST_TO_ADDR
22841: GO 22977
22843: LD_INT 28
22845: DOUBLE
22846: EQUAL
22847: IFTRUE 22851
22849: GO 22862
22851: POP
// bc_type := b_armoury ; 29 :
22852: LD_ADDR_OWVAR 42
22856: PUSH
22857: LD_INT 4
22859: ST_TO_ADDR
22860: GO 22977
22862: LD_INT 29
22864: DOUBLE
22865: EQUAL
22866: IFTRUE 22870
22868: GO 22881
22870: POP
// bc_type := b_barracks ; 30 :
22871: LD_ADDR_OWVAR 42
22875: PUSH
22876: LD_INT 5
22878: ST_TO_ADDR
22879: GO 22977
22881: LD_INT 30
22883: DOUBLE
22884: EQUAL
22885: IFTRUE 22889
22887: GO 22900
22889: POP
// bc_type := b_solar_power ; 31 :
22890: LD_ADDR_OWVAR 42
22894: PUSH
22895: LD_INT 27
22897: ST_TO_ADDR
22898: GO 22977
22900: LD_INT 31
22902: DOUBLE
22903: EQUAL
22904: IFTRUE 22908
22906: GO 22919
22908: POP
// bc_type := b_oil_power ; 32 :
22909: LD_ADDR_OWVAR 42
22913: PUSH
22914: LD_INT 26
22916: ST_TO_ADDR
22917: GO 22977
22919: LD_INT 32
22921: DOUBLE
22922: EQUAL
22923: IFTRUE 22927
22925: GO 22938
22927: POP
// bc_type := b_siberite_power ; 33 :
22928: LD_ADDR_OWVAR 42
22932: PUSH
22933: LD_INT 28
22935: ST_TO_ADDR
22936: GO 22977
22938: LD_INT 33
22940: DOUBLE
22941: EQUAL
22942: IFTRUE 22946
22944: GO 22957
22946: POP
// bc_type := b_oil_mine ; 34 :
22947: LD_ADDR_OWVAR 42
22951: PUSH
22952: LD_INT 29
22954: ST_TO_ADDR
22955: GO 22977
22957: LD_INT 34
22959: DOUBLE
22960: EQUAL
22961: IFTRUE 22965
22963: GO 22976
22965: POP
// bc_type := b_siberite_mine ; end ;
22966: LD_ADDR_OWVAR 42
22970: PUSH
22971: LD_INT 30
22973: ST_TO_ADDR
22974: GO 22977
22976: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22977: LD_ADDR_VAR 0 8
22981: PUSH
22982: LD_VAR 0 5
22986: PPUSH
22987: LD_VAR 0 6
22991: PPUSH
22992: LD_VAR 0 3
22996: PPUSH
22997: CALL_OW 47
23001: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23002: LD_OWVAR 42
23006: PUSH
23007: LD_INT 32
23009: PUSH
23010: LD_INT 33
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: IN
23017: IFFALSE 23033
// PlaceWeaponTurret ( b , weapon ) ;
23019: LD_VAR 0 8
23023: PPUSH
23024: LD_VAR 0 4
23028: PPUSH
23029: CALL_OW 431
// end ;
23033: LD_VAR 0 7
23037: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23038: LD_INT 0
23040: PPUSH
23041: PPUSH
23042: PPUSH
23043: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23044: LD_ADDR_VAR 0 4
23048: PUSH
23049: LD_INT 22
23051: PUSH
23052: LD_OWVAR 2
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 2
23063: PUSH
23064: LD_INT 30
23066: PUSH
23067: LD_INT 0
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 30
23076: PUSH
23077: LD_INT 1
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: LIST
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PPUSH
23093: CALL_OW 69
23097: ST_TO_ADDR
// if not tmp then
23098: LD_VAR 0 4
23102: NOT
23103: IFFALSE 23107
// exit ;
23105: GO 23166
// for i in tmp do
23107: LD_ADDR_VAR 0 2
23111: PUSH
23112: LD_VAR 0 4
23116: PUSH
23117: FOR_IN
23118: IFFALSE 23164
// for j = 1 to 3 do
23120: LD_ADDR_VAR 0 3
23124: PUSH
23125: DOUBLE
23126: LD_INT 1
23128: DEC
23129: ST_TO_ADDR
23130: LD_INT 3
23132: PUSH
23133: FOR_TO
23134: IFFALSE 23160
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23136: LD_VAR 0 2
23140: PPUSH
23141: CALL_OW 274
23145: PPUSH
23146: LD_VAR 0 3
23150: PPUSH
23151: LD_INT 99999
23153: PPUSH
23154: CALL_OW 277
23158: GO 23133
23160: POP
23161: POP
23162: GO 23117
23164: POP
23165: POP
// end ;
23166: LD_VAR 0 1
23170: RET
// export function hHackSetLevel10 ; var i , j ; begin
23171: LD_INT 0
23173: PPUSH
23174: PPUSH
23175: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23176: LD_ADDR_VAR 0 2
23180: PUSH
23181: LD_INT 21
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PPUSH
23191: CALL_OW 69
23195: PUSH
23196: FOR_IN
23197: IFFALSE 23249
// if IsSelected ( i ) then
23199: LD_VAR 0 2
23203: PPUSH
23204: CALL_OW 306
23208: IFFALSE 23247
// begin for j := 1 to 4 do
23210: LD_ADDR_VAR 0 3
23214: PUSH
23215: DOUBLE
23216: LD_INT 1
23218: DEC
23219: ST_TO_ADDR
23220: LD_INT 4
23222: PUSH
23223: FOR_TO
23224: IFFALSE 23245
// SetSkill ( i , j , 10 ) ;
23226: LD_VAR 0 2
23230: PPUSH
23231: LD_VAR 0 3
23235: PPUSH
23236: LD_INT 10
23238: PPUSH
23239: CALL_OW 237
23243: GO 23223
23245: POP
23246: POP
// end ;
23247: GO 23196
23249: POP
23250: POP
// end ;
23251: LD_VAR 0 1
23255: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23256: LD_INT 0
23258: PPUSH
23259: PPUSH
23260: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23261: LD_ADDR_VAR 0 2
23265: PUSH
23266: LD_INT 22
23268: PUSH
23269: LD_OWVAR 2
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 21
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PPUSH
23292: CALL_OW 69
23296: PUSH
23297: FOR_IN
23298: IFFALSE 23339
// begin for j := 1 to 4 do
23300: LD_ADDR_VAR 0 3
23304: PUSH
23305: DOUBLE
23306: LD_INT 1
23308: DEC
23309: ST_TO_ADDR
23310: LD_INT 4
23312: PUSH
23313: FOR_TO
23314: IFFALSE 23335
// SetSkill ( i , j , 10 ) ;
23316: LD_VAR 0 2
23320: PPUSH
23321: LD_VAR 0 3
23325: PPUSH
23326: LD_INT 10
23328: PPUSH
23329: CALL_OW 237
23333: GO 23313
23335: POP
23336: POP
// end ;
23337: GO 23297
23339: POP
23340: POP
// end ;
23341: LD_VAR 0 1
23345: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23346: LD_INT 0
23348: PPUSH
// uc_side := your_side ;
23349: LD_ADDR_OWVAR 20
23353: PUSH
23354: LD_OWVAR 2
23358: ST_TO_ADDR
// uc_nation := nation ;
23359: LD_ADDR_OWVAR 21
23363: PUSH
23364: LD_VAR 0 1
23368: ST_TO_ADDR
// InitHc ;
23369: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23373: LD_INT 0
23375: PPUSH
23376: LD_VAR 0 2
23380: PPUSH
23381: LD_VAR 0 3
23385: PPUSH
23386: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23390: LD_VAR 0 4
23394: PPUSH
23395: LD_VAR 0 5
23399: PPUSH
23400: CALL_OW 428
23404: PUSH
23405: LD_INT 0
23407: EQUAL
23408: IFFALSE 23432
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23410: CALL_OW 44
23414: PPUSH
23415: LD_VAR 0 4
23419: PPUSH
23420: LD_VAR 0 5
23424: PPUSH
23425: LD_INT 1
23427: PPUSH
23428: CALL_OW 48
// end ;
23432: LD_VAR 0 6
23436: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23437: LD_INT 0
23439: PPUSH
23440: PPUSH
// uc_side := your_side ;
23441: LD_ADDR_OWVAR 20
23445: PUSH
23446: LD_OWVAR 2
23450: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23451: LD_VAR 0 1
23455: PUSH
23456: LD_INT 1
23458: PUSH
23459: LD_INT 2
23461: PUSH
23462: LD_INT 3
23464: PUSH
23465: LD_INT 4
23467: PUSH
23468: LD_INT 5
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: IN
23478: IFFALSE 23490
// uc_nation := nation_american else
23480: LD_ADDR_OWVAR 21
23484: PUSH
23485: LD_INT 1
23487: ST_TO_ADDR
23488: GO 23533
// if chassis in [ 11 , 12 , 13 , 14 ] then
23490: LD_VAR 0 1
23494: PUSH
23495: LD_INT 11
23497: PUSH
23498: LD_INT 12
23500: PUSH
23501: LD_INT 13
23503: PUSH
23504: LD_INT 14
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: IN
23513: IFFALSE 23525
// uc_nation := nation_arabian else
23515: LD_ADDR_OWVAR 21
23519: PUSH
23520: LD_INT 2
23522: ST_TO_ADDR
23523: GO 23533
// uc_nation := nation_russian ;
23525: LD_ADDR_OWVAR 21
23529: PUSH
23530: LD_INT 3
23532: ST_TO_ADDR
// vc_chassis := chassis ;
23533: LD_ADDR_OWVAR 37
23537: PUSH
23538: LD_VAR 0 1
23542: ST_TO_ADDR
// vc_engine := engine ;
23543: LD_ADDR_OWVAR 39
23547: PUSH
23548: LD_VAR 0 2
23552: ST_TO_ADDR
// vc_control := control ;
23553: LD_ADDR_OWVAR 38
23557: PUSH
23558: LD_VAR 0 3
23562: ST_TO_ADDR
// vc_weapon := weapon ;
23563: LD_ADDR_OWVAR 40
23567: PUSH
23568: LD_VAR 0 4
23572: ST_TO_ADDR
// un := CreateVehicle ;
23573: LD_ADDR_VAR 0 8
23577: PUSH
23578: CALL_OW 45
23582: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23583: LD_VAR 0 8
23587: PPUSH
23588: LD_INT 0
23590: PPUSH
23591: LD_INT 5
23593: PPUSH
23594: CALL_OW 12
23598: PPUSH
23599: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23603: LD_VAR 0 8
23607: PPUSH
23608: LD_VAR 0 5
23612: PPUSH
23613: LD_VAR 0 6
23617: PPUSH
23618: LD_INT 1
23620: PPUSH
23621: CALL_OW 48
// end ;
23625: LD_VAR 0 7
23629: RET
// export hInvincible ; every 1 do
23630: GO 23632
23632: DISABLE
// hInvincible := [ ] ;
23633: LD_ADDR_EXP 100
23637: PUSH
23638: EMPTY
23639: ST_TO_ADDR
23640: END
// every 10 do var i ;
23641: GO 23643
23643: DISABLE
23644: LD_INT 0
23646: PPUSH
// begin enable ;
23647: ENABLE
// if not hInvincible then
23648: LD_EXP 100
23652: NOT
23653: IFFALSE 23657
// exit ;
23655: GO 23701
// for i in hInvincible do
23657: LD_ADDR_VAR 0 1
23661: PUSH
23662: LD_EXP 100
23666: PUSH
23667: FOR_IN
23668: IFFALSE 23699
// if GetLives ( i ) < 1000 then
23670: LD_VAR 0 1
23674: PPUSH
23675: CALL_OW 256
23679: PUSH
23680: LD_INT 1000
23682: LESS
23683: IFFALSE 23697
// SetLives ( i , 1000 ) ;
23685: LD_VAR 0 1
23689: PPUSH
23690: LD_INT 1000
23692: PPUSH
23693: CALL_OW 234
23697: GO 23667
23699: POP
23700: POP
// end ;
23701: PPOPN 1
23703: END
// export function hHackInvincible ; var i ; begin
23704: LD_INT 0
23706: PPUSH
23707: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23708: LD_ADDR_VAR 0 2
23712: PUSH
23713: LD_INT 2
23715: PUSH
23716: LD_INT 21
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 21
23728: PUSH
23729: LD_INT 2
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: LIST
23740: PPUSH
23741: CALL_OW 69
23745: PUSH
23746: FOR_IN
23747: IFFALSE 23808
// if IsSelected ( i ) then
23749: LD_VAR 0 2
23753: PPUSH
23754: CALL_OW 306
23758: IFFALSE 23806
// begin if i in hInvincible then
23760: LD_VAR 0 2
23764: PUSH
23765: LD_EXP 100
23769: IN
23770: IFFALSE 23790
// hInvincible := hInvincible diff i else
23772: LD_ADDR_EXP 100
23776: PUSH
23777: LD_EXP 100
23781: PUSH
23782: LD_VAR 0 2
23786: DIFF
23787: ST_TO_ADDR
23788: GO 23806
// hInvincible := hInvincible union i ;
23790: LD_ADDR_EXP 100
23794: PUSH
23795: LD_EXP 100
23799: PUSH
23800: LD_VAR 0 2
23804: UNION
23805: ST_TO_ADDR
// end ;
23806: GO 23746
23808: POP
23809: POP
// end ;
23810: LD_VAR 0 1
23814: RET
// export function hHackInvisible ; var i , j ; begin
23815: LD_INT 0
23817: PPUSH
23818: PPUSH
23819: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23820: LD_ADDR_VAR 0 2
23824: PUSH
23825: LD_INT 21
23827: PUSH
23828: LD_INT 1
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PPUSH
23835: CALL_OW 69
23839: PUSH
23840: FOR_IN
23841: IFFALSE 23865
// if IsSelected ( i ) then
23843: LD_VAR 0 2
23847: PPUSH
23848: CALL_OW 306
23852: IFFALSE 23863
// ComForceInvisible ( i ) ;
23854: LD_VAR 0 2
23858: PPUSH
23859: CALL_OW 496
23863: GO 23840
23865: POP
23866: POP
// end ;
23867: LD_VAR 0 1
23871: RET
// export function hHackChangeYourSide ; begin
23872: LD_INT 0
23874: PPUSH
// if your_side = 8 then
23875: LD_OWVAR 2
23879: PUSH
23880: LD_INT 8
23882: EQUAL
23883: IFFALSE 23895
// your_side := 0 else
23885: LD_ADDR_OWVAR 2
23889: PUSH
23890: LD_INT 0
23892: ST_TO_ADDR
23893: GO 23909
// your_side := your_side + 1 ;
23895: LD_ADDR_OWVAR 2
23899: PUSH
23900: LD_OWVAR 2
23904: PUSH
23905: LD_INT 1
23907: PLUS
23908: ST_TO_ADDR
// end ;
23909: LD_VAR 0 1
23913: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23914: LD_INT 0
23916: PPUSH
23917: PPUSH
23918: PPUSH
// for i in all_units do
23919: LD_ADDR_VAR 0 2
23923: PUSH
23924: LD_OWVAR 3
23928: PUSH
23929: FOR_IN
23930: IFFALSE 24008
// if IsSelected ( i ) then
23932: LD_VAR 0 2
23936: PPUSH
23937: CALL_OW 306
23941: IFFALSE 24006
// begin j := GetSide ( i ) ;
23943: LD_ADDR_VAR 0 3
23947: PUSH
23948: LD_VAR 0 2
23952: PPUSH
23953: CALL_OW 255
23957: ST_TO_ADDR
// if j = 8 then
23958: LD_VAR 0 3
23962: PUSH
23963: LD_INT 8
23965: EQUAL
23966: IFFALSE 23978
// j := 0 else
23968: LD_ADDR_VAR 0 3
23972: PUSH
23973: LD_INT 0
23975: ST_TO_ADDR
23976: GO 23992
// j := j + 1 ;
23978: LD_ADDR_VAR 0 3
23982: PUSH
23983: LD_VAR 0 3
23987: PUSH
23988: LD_INT 1
23990: PLUS
23991: ST_TO_ADDR
// SetSide ( i , j ) ;
23992: LD_VAR 0 2
23996: PPUSH
23997: LD_VAR 0 3
24001: PPUSH
24002: CALL_OW 235
// end ;
24006: GO 23929
24008: POP
24009: POP
// end ;
24010: LD_VAR 0 1
24014: RET
// export function hHackFog ; begin
24015: LD_INT 0
24017: PPUSH
// FogOff ( true ) ;
24018: LD_INT 1
24020: PPUSH
24021: CALL_OW 344
// end ;
24025: LD_VAR 0 1
24029: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24030: LD_INT 0
24032: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24033: LD_VAR 0 1
24037: PPUSH
24038: LD_VAR 0 2
24042: PPUSH
24043: LD_VAR 0 3
24047: PPUSH
24048: LD_INT 1
24050: PPUSH
24051: LD_INT 1
24053: PPUSH
24054: CALL_OW 483
// CenterOnXY ( x , y ) ;
24058: LD_VAR 0 2
24062: PPUSH
24063: LD_VAR 0 3
24067: PPUSH
24068: CALL_OW 84
// end ; end_of_file
24072: LD_VAR 0 4
24076: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
24077: LD_VAR 0 1
24081: PUSH
24082: LD_INT 200
24084: DOUBLE
24085: GREATEREQUAL
24086: IFFALSE 24094
24088: LD_INT 299
24090: DOUBLE
24091: LESSEQUAL
24092: IFTRUE 24096
24094: GO 24128
24096: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
24097: LD_VAR 0 1
24101: PPUSH
24102: LD_VAR 0 2
24106: PPUSH
24107: LD_VAR 0 3
24111: PPUSH
24112: LD_VAR 0 4
24116: PPUSH
24117: LD_VAR 0 5
24121: PPUSH
24122: CALL 24618 0 5
24126: GO 24205
24128: LD_INT 300
24130: DOUBLE
24131: GREATEREQUAL
24132: IFFALSE 24140
24134: LD_INT 399
24136: DOUBLE
24137: LESSEQUAL
24138: IFTRUE 24142
24140: GO 24204
24142: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
24143: LD_VAR 0 1
24147: PPUSH
24148: LD_VAR 0 2
24152: PPUSH
24153: LD_VAR 0 3
24157: PPUSH
24158: LD_VAR 0 4
24162: PPUSH
24163: LD_VAR 0 5
24167: PPUSH
24168: LD_VAR 0 6
24172: PPUSH
24173: LD_VAR 0 7
24177: PPUSH
24178: LD_VAR 0 8
24182: PPUSH
24183: LD_VAR 0 9
24187: PPUSH
24188: LD_VAR 0 10
24192: PPUSH
24193: LD_VAR 0 11
24197: PPUSH
24198: CALL 22097 0 11
24202: GO 24205
24204: POP
// end ;
24205: PPOPN 11
24207: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
24208: LD_VAR 0 1
24212: PPUSH
24213: LD_VAR 0 2
24217: PPUSH
24218: LD_VAR 0 3
24222: PPUSH
24223: LD_VAR 0 4
24227: PPUSH
24228: LD_VAR 0 5
24232: PPUSH
24233: CALL 24354 0 5
// end ; end_of_file
24237: PPOPN 5
24239: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24240: LD_INT 0
24242: PPUSH
24243: PPUSH
24244: PPUSH
24245: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24246: LD_VAR 0 1
24250: PPUSH
24251: CALL_OW 264
24255: PUSH
24256: LD_EXP 116
24260: EQUAL
24261: IFFALSE 24333
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24263: LD_INT 68
24265: PPUSH
24266: LD_VAR 0 1
24270: PPUSH
24271: CALL_OW 255
24275: PPUSH
24276: CALL_OW 321
24280: PUSH
24281: LD_INT 2
24283: EQUAL
24284: IFFALSE 24296
// eff := 70 else
24286: LD_ADDR_VAR 0 4
24290: PUSH
24291: LD_INT 70
24293: ST_TO_ADDR
24294: GO 24304
// eff := 30 ;
24296: LD_ADDR_VAR 0 4
24300: PUSH
24301: LD_INT 30
24303: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24304: LD_VAR 0 1
24308: PPUSH
24309: CALL_OW 250
24313: PPUSH
24314: LD_VAR 0 1
24318: PPUSH
24319: CALL_OW 251
24323: PPUSH
24324: LD_VAR 0 4
24328: PPUSH
24329: CALL_OW 495
// end ; end ;
24333: LD_VAR 0 2
24337: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24338: LD_INT 0
24340: PPUSH
// end ;
24341: LD_VAR 0 4
24345: RET
// export function SOS_Command ( cmd ) ; begin
24346: LD_INT 0
24348: PPUSH
// end ;
24349: LD_VAR 0 2
24353: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24354: LD_INT 0
24356: PPUSH
// end ;
24357: LD_VAR 0 6
24361: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24362: LD_INT 0
24364: PPUSH
24365: PPUSH
// if not vehicle or not factory then
24366: LD_VAR 0 1
24370: NOT
24371: PUSH
24372: LD_VAR 0 2
24376: NOT
24377: OR
24378: IFFALSE 24382
// exit ;
24380: GO 24613
// if factoryWaypoints >= factory then
24382: LD_EXP 101
24386: PUSH
24387: LD_VAR 0 2
24391: GREATEREQUAL
24392: IFFALSE 24613
// if factoryWaypoints [ factory ] then
24394: LD_EXP 101
24398: PUSH
24399: LD_VAR 0 2
24403: ARRAY
24404: IFFALSE 24613
// begin if GetControl ( vehicle ) = control_manual then
24406: LD_VAR 0 1
24410: PPUSH
24411: CALL_OW 263
24415: PUSH
24416: LD_INT 1
24418: EQUAL
24419: IFFALSE 24500
// begin driver := IsDrivenBy ( vehicle ) ;
24421: LD_ADDR_VAR 0 4
24425: PUSH
24426: LD_VAR 0 1
24430: PPUSH
24431: CALL_OW 311
24435: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
24436: LD_VAR 0 4
24440: PPUSH
24441: LD_EXP 101
24445: PUSH
24446: LD_VAR 0 2
24450: ARRAY
24451: PUSH
24452: LD_INT 1
24454: ARRAY
24455: PPUSH
24456: LD_EXP 101
24460: PUSH
24461: LD_VAR 0 2
24465: ARRAY
24466: PUSH
24467: LD_INT 2
24469: ARRAY
24470: PPUSH
24471: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24475: LD_VAR 0 4
24479: PPUSH
24480: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24484: LD_VAR 0 4
24488: PPUSH
24489: LD_VAR 0 2
24493: PPUSH
24494: CALL_OW 180
// end else
24498: GO 24613
// if GetControl ( vehicle ) = control_remote then
24500: LD_VAR 0 1
24504: PPUSH
24505: CALL_OW 263
24509: PUSH
24510: LD_INT 2
24512: EQUAL
24513: IFFALSE 24574
// begin wait ( 0 0$2 ) ;
24515: LD_INT 70
24517: PPUSH
24518: CALL_OW 67
// if Connect ( vehicle ) then
24522: LD_VAR 0 1
24526: PPUSH
24527: CALL 36837 0 1
24531: IFFALSE 24572
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
24533: LD_VAR 0 1
24537: PPUSH
24538: LD_EXP 101
24542: PUSH
24543: LD_VAR 0 2
24547: ARRAY
24548: PUSH
24549: LD_INT 1
24551: ARRAY
24552: PPUSH
24553: LD_EXP 101
24557: PUSH
24558: LD_VAR 0 2
24562: ARRAY
24563: PUSH
24564: LD_INT 2
24566: ARRAY
24567: PPUSH
24568: CALL_OW 171
// end else
24572: GO 24613
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
24574: LD_VAR 0 1
24578: PPUSH
24579: LD_EXP 101
24583: PUSH
24584: LD_VAR 0 2
24588: ARRAY
24589: PUSH
24590: LD_INT 1
24592: ARRAY
24593: PPUSH
24594: LD_EXP 101
24598: PUSH
24599: LD_VAR 0 2
24603: ARRAY
24604: PUSH
24605: LD_INT 2
24607: ARRAY
24608: PPUSH
24609: CALL_OW 171
// end ; end ;
24613: LD_VAR 0 3
24617: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24618: LD_INT 0
24620: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24621: LD_VAR 0 1
24625: PUSH
24626: LD_INT 250
24628: EQUAL
24629: PUSH
24630: LD_VAR 0 2
24634: PPUSH
24635: CALL_OW 264
24639: PUSH
24640: LD_EXP 119
24644: EQUAL
24645: AND
24646: IFFALSE 24667
// MinerPlaceMine ( unit , x , y ) ;
24648: LD_VAR 0 2
24652: PPUSH
24653: LD_VAR 0 4
24657: PPUSH
24658: LD_VAR 0 5
24662: PPUSH
24663: CALL 27395 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24667: LD_VAR 0 1
24671: PUSH
24672: LD_INT 251
24674: EQUAL
24675: PUSH
24676: LD_VAR 0 2
24680: PPUSH
24681: CALL_OW 264
24685: PUSH
24686: LD_EXP 119
24690: EQUAL
24691: AND
24692: IFFALSE 24713
// MinerDetonateMine ( unit , x , y ) ;
24694: LD_VAR 0 2
24698: PPUSH
24699: LD_VAR 0 4
24703: PPUSH
24704: LD_VAR 0 5
24708: PPUSH
24709: CALL 27672 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24713: LD_VAR 0 1
24717: PUSH
24718: LD_INT 252
24720: EQUAL
24721: PUSH
24722: LD_VAR 0 2
24726: PPUSH
24727: CALL_OW 264
24731: PUSH
24732: LD_EXP 119
24736: EQUAL
24737: AND
24738: IFFALSE 24759
// MinerCreateMinefield ( unit , x , y ) ;
24740: LD_VAR 0 2
24744: PPUSH
24745: LD_VAR 0 4
24749: PPUSH
24750: LD_VAR 0 5
24754: PPUSH
24755: CALL 28089 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24759: LD_VAR 0 1
24763: PUSH
24764: LD_INT 253
24766: EQUAL
24767: PUSH
24768: LD_VAR 0 2
24772: PPUSH
24773: CALL_OW 257
24777: PUSH
24778: LD_INT 5
24780: EQUAL
24781: AND
24782: IFFALSE 24803
// ComBinocular ( unit , x , y ) ;
24784: LD_VAR 0 2
24788: PPUSH
24789: LD_VAR 0 4
24793: PPUSH
24794: LD_VAR 0 5
24798: PPUSH
24799: CALL 28460 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24803: LD_VAR 0 1
24807: PUSH
24808: LD_INT 254
24810: EQUAL
24811: PUSH
24812: LD_VAR 0 2
24816: PPUSH
24817: CALL_OW 264
24821: PUSH
24822: LD_EXP 114
24826: EQUAL
24827: AND
24828: PUSH
24829: LD_VAR 0 3
24833: PPUSH
24834: CALL_OW 263
24838: PUSH
24839: LD_INT 3
24841: EQUAL
24842: AND
24843: IFFALSE 24859
// HackDestroyVehicle ( unit , selectedUnit ) ;
24845: LD_VAR 0 2
24849: PPUSH
24850: LD_VAR 0 3
24854: PPUSH
24855: CALL 26755 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24859: LD_VAR 0 1
24863: PUSH
24864: LD_INT 255
24866: EQUAL
24867: PUSH
24868: LD_VAR 0 2
24872: PPUSH
24873: CALL_OW 264
24877: PUSH
24878: LD_INT 14
24880: PUSH
24881: LD_INT 53
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: IN
24888: AND
24889: PUSH
24890: LD_VAR 0 4
24894: PPUSH
24895: LD_VAR 0 5
24899: PPUSH
24900: CALL_OW 488
24904: AND
24905: IFFALSE 24929
// CutTreeXYR ( unit , x , y , 12 ) ;
24907: LD_VAR 0 2
24911: PPUSH
24912: LD_VAR 0 4
24916: PPUSH
24917: LD_VAR 0 5
24921: PPUSH
24922: LD_INT 12
24924: PPUSH
24925: CALL 25321 0 4
// if cmd = 256 then
24929: LD_VAR 0 1
24933: PUSH
24934: LD_INT 256
24936: EQUAL
24937: IFFALSE 24958
// SetFactoryWaypoint ( unit , x , y ) ;
24939: LD_VAR 0 2
24943: PPUSH
24944: LD_VAR 0 4
24948: PPUSH
24949: LD_VAR 0 5
24953: PPUSH
24954: CALL 24963 0 3
// end ;
24958: LD_VAR 0 6
24962: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24963: LD_INT 0
24965: PPUSH
24966: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24967: LD_VAR 0 1
24971: NOT
24972: PUSH
24973: LD_VAR 0 2
24977: PPUSH
24978: LD_VAR 0 3
24982: PPUSH
24983: CALL_OW 488
24987: NOT
24988: OR
24989: PUSH
24990: LD_VAR 0 1
24994: PPUSH
24995: CALL_OW 266
24999: PUSH
25000: LD_INT 3
25002: NONEQUAL
25003: PUSH
25004: LD_VAR 0 1
25008: PPUSH
25009: CALL_OW 247
25013: PUSH
25014: LD_INT 1
25016: EQUAL
25017: NOT
25018: AND
25019: OR
25020: IFFALSE 25024
// exit ;
25022: GO 25173
// if GetType ( factory ) = unit_human then
25024: LD_VAR 0 1
25028: PPUSH
25029: CALL_OW 247
25033: PUSH
25034: LD_INT 1
25036: EQUAL
25037: IFFALSE 25054
// factory := IsInUnit ( factory ) ;
25039: LD_ADDR_VAR 0 1
25043: PUSH
25044: LD_VAR 0 1
25048: PPUSH
25049: CALL_OW 310
25053: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25054: LD_VAR 0 1
25058: PPUSH
25059: CALL_OW 266
25063: PUSH
25064: LD_INT 3
25066: NONEQUAL
25067: IFFALSE 25071
// exit ;
25069: GO 25173
// if HexInfo ( x , y ) = factory then
25071: LD_VAR 0 2
25075: PPUSH
25076: LD_VAR 0 3
25080: PPUSH
25081: CALL_OW 428
25085: PUSH
25086: LD_VAR 0 1
25090: EQUAL
25091: IFFALSE 25118
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25093: LD_ADDR_EXP 101
25097: PUSH
25098: LD_EXP 101
25102: PPUSH
25103: LD_VAR 0 1
25107: PPUSH
25108: LD_INT 0
25110: PPUSH
25111: CALL_OW 1
25115: ST_TO_ADDR
25116: GO 25169
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25118: LD_ADDR_EXP 101
25122: PUSH
25123: LD_EXP 101
25127: PPUSH
25128: LD_VAR 0 1
25132: PPUSH
25133: LD_VAR 0 1
25137: PPUSH
25138: CALL_OW 255
25142: PUSH
25143: LD_VAR 0 1
25147: PUSH
25148: LD_VAR 0 2
25152: PUSH
25153: LD_VAR 0 3
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: PPUSH
25164: CALL_OW 1
25168: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25169: CALL 25178 0 0
// end ;
25173: LD_VAR 0 4
25177: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
25178: LD_INT 0
25180: PPUSH
25181: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25182: LD_STRING resetFactoryWaypoint();
25184: PPUSH
25185: CALL_OW 559
// if factoryWaypoints then
25189: LD_EXP 101
25193: IFFALSE 25316
// begin for i := 1 to factoryWaypoints do
25195: LD_ADDR_VAR 0 2
25199: PUSH
25200: DOUBLE
25201: LD_INT 1
25203: DEC
25204: ST_TO_ADDR
25205: LD_EXP 101
25209: PUSH
25210: FOR_TO
25211: IFFALSE 25314
// if factoryWaypoints [ i ] then
25213: LD_EXP 101
25217: PUSH
25218: LD_VAR 0 2
25222: ARRAY
25223: IFFALSE 25312
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
25225: LD_STRING setFactoryWaypointXY(
25227: PUSH
25228: LD_EXP 101
25232: PUSH
25233: LD_VAR 0 2
25237: ARRAY
25238: PUSH
25239: LD_INT 1
25241: ARRAY
25242: STR
25243: PUSH
25244: LD_STRING ,
25246: STR
25247: PUSH
25248: LD_EXP 101
25252: PUSH
25253: LD_VAR 0 2
25257: ARRAY
25258: PUSH
25259: LD_INT 2
25261: ARRAY
25262: STR
25263: PUSH
25264: LD_STRING ,
25266: STR
25267: PUSH
25268: LD_EXP 101
25272: PUSH
25273: LD_VAR 0 2
25277: ARRAY
25278: PUSH
25279: LD_INT 3
25281: ARRAY
25282: STR
25283: PUSH
25284: LD_STRING ,
25286: STR
25287: PUSH
25288: LD_EXP 101
25292: PUSH
25293: LD_VAR 0 2
25297: ARRAY
25298: PUSH
25299: LD_INT 4
25301: ARRAY
25302: STR
25303: PUSH
25304: LD_STRING )
25306: STR
25307: PPUSH
25308: CALL_OW 559
25312: GO 25210
25314: POP
25315: POP
// end ; end ;
25316: LD_VAR 0 1
25320: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25321: LD_INT 0
25323: PPUSH
25324: PPUSH
25325: PPUSH
25326: PPUSH
25327: PPUSH
25328: PPUSH
25329: PPUSH
25330: PPUSH
25331: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25332: LD_VAR 0 1
25336: NOT
25337: PUSH
25338: LD_VAR 0 2
25342: PPUSH
25343: LD_VAR 0 3
25347: PPUSH
25348: CALL_OW 488
25352: NOT
25353: OR
25354: PUSH
25355: LD_VAR 0 4
25359: NOT
25360: OR
25361: IFFALSE 25365
// exit ;
25363: GO 25705
// list := [ ] ;
25365: LD_ADDR_VAR 0 13
25369: PUSH
25370: EMPTY
25371: ST_TO_ADDR
// if x - r < 0 then
25372: LD_VAR 0 2
25376: PUSH
25377: LD_VAR 0 4
25381: MINUS
25382: PUSH
25383: LD_INT 0
25385: LESS
25386: IFFALSE 25398
// min_x := 0 else
25388: LD_ADDR_VAR 0 7
25392: PUSH
25393: LD_INT 0
25395: ST_TO_ADDR
25396: GO 25414
// min_x := x - r ;
25398: LD_ADDR_VAR 0 7
25402: PUSH
25403: LD_VAR 0 2
25407: PUSH
25408: LD_VAR 0 4
25412: MINUS
25413: ST_TO_ADDR
// if y - r < 0 then
25414: LD_VAR 0 3
25418: PUSH
25419: LD_VAR 0 4
25423: MINUS
25424: PUSH
25425: LD_INT 0
25427: LESS
25428: IFFALSE 25440
// min_y := 0 else
25430: LD_ADDR_VAR 0 8
25434: PUSH
25435: LD_INT 0
25437: ST_TO_ADDR
25438: GO 25456
// min_y := y - r ;
25440: LD_ADDR_VAR 0 8
25444: PUSH
25445: LD_VAR 0 3
25449: PUSH
25450: LD_VAR 0 4
25454: MINUS
25455: ST_TO_ADDR
// max_x := x + r ;
25456: LD_ADDR_VAR 0 9
25460: PUSH
25461: LD_VAR 0 2
25465: PUSH
25466: LD_VAR 0 4
25470: PLUS
25471: ST_TO_ADDR
// max_y := y + r ;
25472: LD_ADDR_VAR 0 10
25476: PUSH
25477: LD_VAR 0 3
25481: PUSH
25482: LD_VAR 0 4
25486: PLUS
25487: ST_TO_ADDR
// for _x = min_x to max_x do
25488: LD_ADDR_VAR 0 11
25492: PUSH
25493: DOUBLE
25494: LD_VAR 0 7
25498: DEC
25499: ST_TO_ADDR
25500: LD_VAR 0 9
25504: PUSH
25505: FOR_TO
25506: IFFALSE 25623
// for _y = min_y to max_y do
25508: LD_ADDR_VAR 0 12
25512: PUSH
25513: DOUBLE
25514: LD_VAR 0 8
25518: DEC
25519: ST_TO_ADDR
25520: LD_VAR 0 10
25524: PUSH
25525: FOR_TO
25526: IFFALSE 25619
// begin if not ValidHex ( _x , _y ) then
25528: LD_VAR 0 11
25532: PPUSH
25533: LD_VAR 0 12
25537: PPUSH
25538: CALL_OW 488
25542: NOT
25543: IFFALSE 25547
// continue ;
25545: GO 25525
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25547: LD_VAR 0 11
25551: PPUSH
25552: LD_VAR 0 12
25556: PPUSH
25557: CALL_OW 351
25561: PUSH
25562: LD_VAR 0 11
25566: PPUSH
25567: LD_VAR 0 12
25571: PPUSH
25572: CALL_OW 554
25576: AND
25577: IFFALSE 25617
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25579: LD_ADDR_VAR 0 13
25583: PUSH
25584: LD_VAR 0 13
25588: PPUSH
25589: LD_VAR 0 13
25593: PUSH
25594: LD_INT 1
25596: PLUS
25597: PPUSH
25598: LD_VAR 0 11
25602: PUSH
25603: LD_VAR 0 12
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PPUSH
25612: CALL_OW 2
25616: ST_TO_ADDR
// end ;
25617: GO 25525
25619: POP
25620: POP
25621: GO 25505
25623: POP
25624: POP
// if not list then
25625: LD_VAR 0 13
25629: NOT
25630: IFFALSE 25634
// exit ;
25632: GO 25705
// for i in list do
25634: LD_ADDR_VAR 0 6
25638: PUSH
25639: LD_VAR 0 13
25643: PUSH
25644: FOR_IN
25645: IFFALSE 25703
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25647: LD_VAR 0 1
25651: PPUSH
25652: LD_STRING M
25654: PUSH
25655: LD_VAR 0 6
25659: PUSH
25660: LD_INT 1
25662: ARRAY
25663: PUSH
25664: LD_VAR 0 6
25668: PUSH
25669: LD_INT 2
25671: ARRAY
25672: PUSH
25673: LD_INT 0
25675: PUSH
25676: LD_INT 0
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: LD_INT 0
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: PUSH
25694: EMPTY
25695: LIST
25696: PPUSH
25697: CALL_OW 447
25701: GO 25644
25703: POP
25704: POP
// end ;
25705: LD_VAR 0 5
25709: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25710: LD_EXP 102
25714: NOT
25715: IFFALSE 25765
25717: GO 25719
25719: DISABLE
// begin initHack := true ;
25720: LD_ADDR_EXP 102
25724: PUSH
25725: LD_INT 1
25727: ST_TO_ADDR
// hackTanks := [ ] ;
25728: LD_ADDR_EXP 103
25732: PUSH
25733: EMPTY
25734: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25735: LD_ADDR_EXP 104
25739: PUSH
25740: EMPTY
25741: ST_TO_ADDR
// hackLimit := 3 ;
25742: LD_ADDR_EXP 105
25746: PUSH
25747: LD_INT 3
25749: ST_TO_ADDR
// hackDist := 12 ;
25750: LD_ADDR_EXP 106
25754: PUSH
25755: LD_INT 12
25757: ST_TO_ADDR
// hackCounter := [ ] ;
25758: LD_ADDR_EXP 107
25762: PUSH
25763: EMPTY
25764: ST_TO_ADDR
// end ;
25765: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25766: LD_EXP 102
25770: PUSH
25771: LD_INT 34
25773: PUSH
25774: LD_EXP 114
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PPUSH
25783: CALL_OW 69
25787: AND
25788: IFFALSE 26043
25790: GO 25792
25792: DISABLE
25793: LD_INT 0
25795: PPUSH
25796: PPUSH
// begin enable ;
25797: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25798: LD_ADDR_VAR 0 1
25802: PUSH
25803: LD_INT 34
25805: PUSH
25806: LD_EXP 114
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PPUSH
25815: CALL_OW 69
25819: PUSH
25820: FOR_IN
25821: IFFALSE 26041
// begin if not i in hackTanks then
25823: LD_VAR 0 1
25827: PUSH
25828: LD_EXP 103
25832: IN
25833: NOT
25834: IFFALSE 25917
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25836: LD_ADDR_EXP 103
25840: PUSH
25841: LD_EXP 103
25845: PPUSH
25846: LD_EXP 103
25850: PUSH
25851: LD_INT 1
25853: PLUS
25854: PPUSH
25855: LD_VAR 0 1
25859: PPUSH
25860: CALL_OW 1
25864: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25865: LD_ADDR_EXP 104
25869: PUSH
25870: LD_EXP 104
25874: PPUSH
25875: LD_EXP 104
25879: PUSH
25880: LD_INT 1
25882: PLUS
25883: PPUSH
25884: EMPTY
25885: PPUSH
25886: CALL_OW 1
25890: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25891: LD_ADDR_EXP 107
25895: PUSH
25896: LD_EXP 107
25900: PPUSH
25901: LD_EXP 107
25905: PUSH
25906: LD_INT 1
25908: PLUS
25909: PPUSH
25910: EMPTY
25911: PPUSH
25912: CALL_OW 1
25916: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25917: LD_VAR 0 1
25921: PPUSH
25922: CALL_OW 302
25926: NOT
25927: IFFALSE 25940
// begin HackUnlinkAll ( i ) ;
25929: LD_VAR 0 1
25933: PPUSH
25934: CALL 26046 0 1
// continue ;
25938: GO 25820
// end ; HackCheckCapturedStatus ( i ) ;
25940: LD_VAR 0 1
25944: PPUSH
25945: CALL 26489 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25949: LD_ADDR_VAR 0 2
25953: PUSH
25954: LD_INT 81
25956: PUSH
25957: LD_VAR 0 1
25961: PPUSH
25962: CALL_OW 255
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 33
25973: PUSH
25974: LD_INT 3
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 91
25983: PUSH
25984: LD_VAR 0 1
25988: PUSH
25989: LD_EXP 106
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 50
26001: PUSH
26002: EMPTY
26003: LIST
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: PPUSH
26011: CALL_OW 69
26015: ST_TO_ADDR
// if not tmp then
26016: LD_VAR 0 2
26020: NOT
26021: IFFALSE 26025
// continue ;
26023: GO 25820
// HackLink ( i , tmp ) ;
26025: LD_VAR 0 1
26029: PPUSH
26030: LD_VAR 0 2
26034: PPUSH
26035: CALL 26182 0 2
// end ;
26039: GO 25820
26041: POP
26042: POP
// end ;
26043: PPOPN 2
26045: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26046: LD_INT 0
26048: PPUSH
26049: PPUSH
26050: PPUSH
// if not hack in hackTanks then
26051: LD_VAR 0 1
26055: PUSH
26056: LD_EXP 103
26060: IN
26061: NOT
26062: IFFALSE 26066
// exit ;
26064: GO 26177
// index := GetElementIndex ( hackTanks , hack ) ;
26066: LD_ADDR_VAR 0 4
26070: PUSH
26071: LD_EXP 103
26075: PPUSH
26076: LD_VAR 0 1
26080: PPUSH
26081: CALL 33651 0 2
26085: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26086: LD_EXP 104
26090: PUSH
26091: LD_VAR 0 4
26095: ARRAY
26096: IFFALSE 26177
// begin for i in hackTanksCaptured [ index ] do
26098: LD_ADDR_VAR 0 3
26102: PUSH
26103: LD_EXP 104
26107: PUSH
26108: LD_VAR 0 4
26112: ARRAY
26113: PUSH
26114: FOR_IN
26115: IFFALSE 26141
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26117: LD_VAR 0 3
26121: PUSH
26122: LD_INT 1
26124: ARRAY
26125: PPUSH
26126: LD_VAR 0 3
26130: PUSH
26131: LD_INT 2
26133: ARRAY
26134: PPUSH
26135: CALL_OW 235
26139: GO 26114
26141: POP
26142: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26143: LD_ADDR_EXP 104
26147: PUSH
26148: LD_EXP 104
26152: PPUSH
26153: LD_VAR 0 4
26157: PPUSH
26158: EMPTY
26159: PPUSH
26160: CALL_OW 1
26164: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26165: LD_VAR 0 1
26169: PPUSH
26170: LD_INT 0
26172: PPUSH
26173: CALL_OW 505
// end ; end ;
26177: LD_VAR 0 2
26181: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26182: LD_INT 0
26184: PPUSH
26185: PPUSH
26186: PPUSH
// if not hack in hackTanks or not vehicles then
26187: LD_VAR 0 1
26191: PUSH
26192: LD_EXP 103
26196: IN
26197: NOT
26198: PUSH
26199: LD_VAR 0 2
26203: NOT
26204: OR
26205: IFFALSE 26209
// exit ;
26207: GO 26484
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26209: LD_ADDR_VAR 0 2
26213: PUSH
26214: LD_VAR 0 1
26218: PPUSH
26219: LD_VAR 0 2
26223: PPUSH
26224: LD_INT 1
26226: PPUSH
26227: LD_INT 1
26229: PPUSH
26230: CALL 34301 0 4
26234: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26235: LD_ADDR_VAR 0 5
26239: PUSH
26240: LD_EXP 103
26244: PPUSH
26245: LD_VAR 0 1
26249: PPUSH
26250: CALL 33651 0 2
26254: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26255: LD_EXP 104
26259: PUSH
26260: LD_VAR 0 5
26264: ARRAY
26265: PUSH
26266: LD_EXP 105
26270: LESS
26271: IFFALSE 26460
// begin for i := 1 to vehicles do
26273: LD_ADDR_VAR 0 4
26277: PUSH
26278: DOUBLE
26279: LD_INT 1
26281: DEC
26282: ST_TO_ADDR
26283: LD_VAR 0 2
26287: PUSH
26288: FOR_TO
26289: IFFALSE 26458
// begin if hackTanksCaptured [ index ] = hackLimit then
26291: LD_EXP 104
26295: PUSH
26296: LD_VAR 0 5
26300: ARRAY
26301: PUSH
26302: LD_EXP 105
26306: EQUAL
26307: IFFALSE 26311
// break ;
26309: GO 26458
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26311: LD_ADDR_EXP 107
26315: PUSH
26316: LD_EXP 107
26320: PPUSH
26321: LD_VAR 0 5
26325: PPUSH
26326: LD_EXP 107
26330: PUSH
26331: LD_VAR 0 5
26335: ARRAY
26336: PUSH
26337: LD_INT 1
26339: PLUS
26340: PPUSH
26341: CALL_OW 1
26345: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26346: LD_ADDR_EXP 104
26350: PUSH
26351: LD_EXP 104
26355: PPUSH
26356: LD_VAR 0 5
26360: PUSH
26361: LD_EXP 104
26365: PUSH
26366: LD_VAR 0 5
26370: ARRAY
26371: PUSH
26372: LD_INT 1
26374: PLUS
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PPUSH
26380: LD_VAR 0 2
26384: PUSH
26385: LD_VAR 0 4
26389: ARRAY
26390: PUSH
26391: LD_VAR 0 2
26395: PUSH
26396: LD_VAR 0 4
26400: ARRAY
26401: PPUSH
26402: CALL_OW 255
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PPUSH
26411: CALL 33866 0 3
26415: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26416: LD_VAR 0 2
26420: PUSH
26421: LD_VAR 0 4
26425: ARRAY
26426: PPUSH
26427: LD_VAR 0 1
26431: PPUSH
26432: CALL_OW 255
26436: PPUSH
26437: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26441: LD_VAR 0 2
26445: PUSH
26446: LD_VAR 0 4
26450: ARRAY
26451: PPUSH
26452: CALL_OW 141
// end ;
26456: GO 26288
26458: POP
26459: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26460: LD_VAR 0 1
26464: PPUSH
26465: LD_EXP 104
26469: PUSH
26470: LD_VAR 0 5
26474: ARRAY
26475: PUSH
26476: LD_INT 0
26478: PLUS
26479: PPUSH
26480: CALL_OW 505
// end ;
26484: LD_VAR 0 3
26488: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26489: LD_INT 0
26491: PPUSH
26492: PPUSH
26493: PPUSH
26494: PPUSH
// if not hack in hackTanks then
26495: LD_VAR 0 1
26499: PUSH
26500: LD_EXP 103
26504: IN
26505: NOT
26506: IFFALSE 26510
// exit ;
26508: GO 26750
// index := GetElementIndex ( hackTanks , hack ) ;
26510: LD_ADDR_VAR 0 4
26514: PUSH
26515: LD_EXP 103
26519: PPUSH
26520: LD_VAR 0 1
26524: PPUSH
26525: CALL 33651 0 2
26529: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26530: LD_ADDR_VAR 0 3
26534: PUSH
26535: DOUBLE
26536: LD_EXP 104
26540: PUSH
26541: LD_VAR 0 4
26545: ARRAY
26546: INC
26547: ST_TO_ADDR
26548: LD_INT 1
26550: PUSH
26551: FOR_DOWNTO
26552: IFFALSE 26724
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26554: LD_ADDR_VAR 0 5
26558: PUSH
26559: LD_EXP 104
26563: PUSH
26564: LD_VAR 0 4
26568: ARRAY
26569: PUSH
26570: LD_VAR 0 3
26574: ARRAY
26575: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26576: LD_VAR 0 5
26580: PUSH
26581: LD_INT 1
26583: ARRAY
26584: PPUSH
26585: CALL_OW 302
26589: NOT
26590: PUSH
26591: LD_VAR 0 5
26595: PUSH
26596: LD_INT 1
26598: ARRAY
26599: PPUSH
26600: CALL_OW 255
26604: PUSH
26605: LD_VAR 0 1
26609: PPUSH
26610: CALL_OW 255
26614: NONEQUAL
26615: OR
26616: IFFALSE 26722
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26618: LD_VAR 0 5
26622: PUSH
26623: LD_INT 1
26625: ARRAY
26626: PPUSH
26627: CALL_OW 305
26631: PUSH
26632: LD_VAR 0 5
26636: PUSH
26637: LD_INT 1
26639: ARRAY
26640: PPUSH
26641: CALL_OW 255
26645: PUSH
26646: LD_VAR 0 1
26650: PPUSH
26651: CALL_OW 255
26655: EQUAL
26656: AND
26657: IFFALSE 26681
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26659: LD_VAR 0 5
26663: PUSH
26664: LD_INT 1
26666: ARRAY
26667: PPUSH
26668: LD_VAR 0 5
26672: PUSH
26673: LD_INT 2
26675: ARRAY
26676: PPUSH
26677: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26681: LD_ADDR_EXP 104
26685: PUSH
26686: LD_EXP 104
26690: PPUSH
26691: LD_VAR 0 4
26695: PPUSH
26696: LD_EXP 104
26700: PUSH
26701: LD_VAR 0 4
26705: ARRAY
26706: PPUSH
26707: LD_VAR 0 3
26711: PPUSH
26712: CALL_OW 3
26716: PPUSH
26717: CALL_OW 1
26721: ST_TO_ADDR
// end ; end ;
26722: GO 26551
26724: POP
26725: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26726: LD_VAR 0 1
26730: PPUSH
26731: LD_EXP 104
26735: PUSH
26736: LD_VAR 0 4
26740: ARRAY
26741: PUSH
26742: LD_INT 0
26744: PLUS
26745: PPUSH
26746: CALL_OW 505
// end ;
26750: LD_VAR 0 2
26754: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26755: LD_INT 0
26757: PPUSH
26758: PPUSH
26759: PPUSH
26760: PPUSH
// if not hack in hackTanks then
26761: LD_VAR 0 1
26765: PUSH
26766: LD_EXP 103
26770: IN
26771: NOT
26772: IFFALSE 26776
// exit ;
26774: GO 26861
// index := GetElementIndex ( hackTanks , hack ) ;
26776: LD_ADDR_VAR 0 5
26780: PUSH
26781: LD_EXP 103
26785: PPUSH
26786: LD_VAR 0 1
26790: PPUSH
26791: CALL 33651 0 2
26795: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26796: LD_ADDR_VAR 0 4
26800: PUSH
26801: DOUBLE
26802: LD_INT 1
26804: DEC
26805: ST_TO_ADDR
26806: LD_EXP 104
26810: PUSH
26811: LD_VAR 0 5
26815: ARRAY
26816: PUSH
26817: FOR_TO
26818: IFFALSE 26859
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26820: LD_EXP 104
26824: PUSH
26825: LD_VAR 0 5
26829: ARRAY
26830: PUSH
26831: LD_VAR 0 4
26835: ARRAY
26836: PUSH
26837: LD_INT 1
26839: ARRAY
26840: PUSH
26841: LD_VAR 0 2
26845: EQUAL
26846: IFFALSE 26857
// KillUnit ( vehicle ) ;
26848: LD_VAR 0 2
26852: PPUSH
26853: CALL_OW 66
26857: GO 26817
26859: POP
26860: POP
// end ;
26861: LD_VAR 0 3
26865: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26866: LD_EXP 108
26870: NOT
26871: IFFALSE 26906
26873: GO 26875
26875: DISABLE
// begin initMiner := true ;
26876: LD_ADDR_EXP 108
26880: PUSH
26881: LD_INT 1
26883: ST_TO_ADDR
// minersList := [ ] ;
26884: LD_ADDR_EXP 109
26888: PUSH
26889: EMPTY
26890: ST_TO_ADDR
// minerMinesList := [ ] ;
26891: LD_ADDR_EXP 110
26895: PUSH
26896: EMPTY
26897: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26898: LD_ADDR_EXP 111
26902: PUSH
26903: LD_INT 5
26905: ST_TO_ADDR
// end ;
26906: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26907: LD_EXP 108
26911: PUSH
26912: LD_INT 34
26914: PUSH
26915: LD_EXP 119
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PPUSH
26924: CALL_OW 69
26928: AND
26929: IFFALSE 27392
26931: GO 26933
26933: DISABLE
26934: LD_INT 0
26936: PPUSH
26937: PPUSH
26938: PPUSH
26939: PPUSH
// begin enable ;
26940: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26941: LD_ADDR_VAR 0 1
26945: PUSH
26946: LD_INT 34
26948: PUSH
26949: LD_EXP 119
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PPUSH
26958: CALL_OW 69
26962: PUSH
26963: FOR_IN
26964: IFFALSE 27036
// begin if not i in minersList then
26966: LD_VAR 0 1
26970: PUSH
26971: LD_EXP 109
26975: IN
26976: NOT
26977: IFFALSE 27034
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26979: LD_ADDR_EXP 109
26983: PUSH
26984: LD_EXP 109
26988: PPUSH
26989: LD_EXP 109
26993: PUSH
26994: LD_INT 1
26996: PLUS
26997: PPUSH
26998: LD_VAR 0 1
27002: PPUSH
27003: CALL_OW 1
27007: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27008: LD_ADDR_EXP 110
27012: PUSH
27013: LD_EXP 110
27017: PPUSH
27018: LD_EXP 110
27022: PUSH
27023: LD_INT 1
27025: PLUS
27026: PPUSH
27027: EMPTY
27028: PPUSH
27029: CALL_OW 1
27033: ST_TO_ADDR
// end end ;
27034: GO 26963
27036: POP
27037: POP
// for i := minerMinesList downto 1 do
27038: LD_ADDR_VAR 0 1
27042: PUSH
27043: DOUBLE
27044: LD_EXP 110
27048: INC
27049: ST_TO_ADDR
27050: LD_INT 1
27052: PUSH
27053: FOR_DOWNTO
27054: IFFALSE 27390
// begin if IsLive ( minersList [ i ] ) then
27056: LD_EXP 109
27060: PUSH
27061: LD_VAR 0 1
27065: ARRAY
27066: PPUSH
27067: CALL_OW 300
27071: IFFALSE 27099
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27073: LD_EXP 109
27077: PUSH
27078: LD_VAR 0 1
27082: ARRAY
27083: PPUSH
27084: LD_EXP 110
27088: PUSH
27089: LD_VAR 0 1
27093: ARRAY
27094: PPUSH
27095: CALL_OW 505
// if not minerMinesList [ i ] then
27099: LD_EXP 110
27103: PUSH
27104: LD_VAR 0 1
27108: ARRAY
27109: NOT
27110: IFFALSE 27114
// continue ;
27112: GO 27053
// for j := minerMinesList [ i ] downto 1 do
27114: LD_ADDR_VAR 0 2
27118: PUSH
27119: DOUBLE
27120: LD_EXP 110
27124: PUSH
27125: LD_VAR 0 1
27129: ARRAY
27130: INC
27131: ST_TO_ADDR
27132: LD_INT 1
27134: PUSH
27135: FOR_DOWNTO
27136: IFFALSE 27386
// begin side := GetSide ( minersList [ i ] ) ;
27138: LD_ADDR_VAR 0 3
27142: PUSH
27143: LD_EXP 109
27147: PUSH
27148: LD_VAR 0 1
27152: ARRAY
27153: PPUSH
27154: CALL_OW 255
27158: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27159: LD_ADDR_VAR 0 4
27163: PUSH
27164: LD_EXP 110
27168: PUSH
27169: LD_VAR 0 1
27173: ARRAY
27174: PUSH
27175: LD_VAR 0 2
27179: ARRAY
27180: PUSH
27181: LD_INT 1
27183: ARRAY
27184: PPUSH
27185: LD_EXP 110
27189: PUSH
27190: LD_VAR 0 1
27194: ARRAY
27195: PUSH
27196: LD_VAR 0 2
27200: ARRAY
27201: PUSH
27202: LD_INT 2
27204: ARRAY
27205: PPUSH
27206: CALL_OW 428
27210: ST_TO_ADDR
// if not tmp then
27211: LD_VAR 0 4
27215: NOT
27216: IFFALSE 27220
// continue ;
27218: GO 27135
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27220: LD_VAR 0 4
27224: PUSH
27225: LD_INT 81
27227: PUSH
27228: LD_VAR 0 3
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PPUSH
27237: CALL_OW 69
27241: IN
27242: PUSH
27243: LD_EXP 110
27247: PUSH
27248: LD_VAR 0 1
27252: ARRAY
27253: PUSH
27254: LD_VAR 0 2
27258: ARRAY
27259: PUSH
27260: LD_INT 1
27262: ARRAY
27263: PPUSH
27264: LD_EXP 110
27268: PUSH
27269: LD_VAR 0 1
27273: ARRAY
27274: PUSH
27275: LD_VAR 0 2
27279: ARRAY
27280: PUSH
27281: LD_INT 2
27283: ARRAY
27284: PPUSH
27285: CALL_OW 458
27289: AND
27290: IFFALSE 27384
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27292: LD_EXP 110
27296: PUSH
27297: LD_VAR 0 1
27301: ARRAY
27302: PUSH
27303: LD_VAR 0 2
27307: ARRAY
27308: PUSH
27309: LD_INT 1
27311: ARRAY
27312: PPUSH
27313: LD_EXP 110
27317: PUSH
27318: LD_VAR 0 1
27322: ARRAY
27323: PUSH
27324: LD_VAR 0 2
27328: ARRAY
27329: PUSH
27330: LD_INT 2
27332: ARRAY
27333: PPUSH
27334: LD_VAR 0 3
27338: PPUSH
27339: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27343: LD_ADDR_EXP 110
27347: PUSH
27348: LD_EXP 110
27352: PPUSH
27353: LD_VAR 0 1
27357: PPUSH
27358: LD_EXP 110
27362: PUSH
27363: LD_VAR 0 1
27367: ARRAY
27368: PPUSH
27369: LD_VAR 0 2
27373: PPUSH
27374: CALL_OW 3
27378: PPUSH
27379: CALL_OW 1
27383: ST_TO_ADDR
// end ; end ;
27384: GO 27135
27386: POP
27387: POP
// end ;
27388: GO 27053
27390: POP
27391: POP
// end ;
27392: PPOPN 4
27394: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27395: LD_INT 0
27397: PPUSH
27398: PPUSH
// result := false ;
27399: LD_ADDR_VAR 0 4
27403: PUSH
27404: LD_INT 0
27406: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27407: LD_VAR 0 1
27411: PPUSH
27412: CALL_OW 264
27416: PUSH
27417: LD_EXP 119
27421: EQUAL
27422: NOT
27423: IFFALSE 27427
// exit ;
27425: GO 27667
// index := GetElementIndex ( minersList , unit ) ;
27427: LD_ADDR_VAR 0 5
27431: PUSH
27432: LD_EXP 109
27436: PPUSH
27437: LD_VAR 0 1
27441: PPUSH
27442: CALL 33651 0 2
27446: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27447: LD_EXP 110
27451: PUSH
27452: LD_VAR 0 5
27456: ARRAY
27457: PUSH
27458: LD_EXP 111
27462: GREATEREQUAL
27463: IFFALSE 27467
// exit ;
27465: GO 27667
// ComMoveXY ( unit , x , y ) ;
27467: LD_VAR 0 1
27471: PPUSH
27472: LD_VAR 0 2
27476: PPUSH
27477: LD_VAR 0 3
27481: PPUSH
27482: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27486: LD_INT 35
27488: PPUSH
27489: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27493: LD_VAR 0 1
27497: PPUSH
27498: LD_VAR 0 2
27502: PPUSH
27503: LD_VAR 0 3
27507: PPUSH
27508: CALL 64423 0 3
27512: NOT
27513: PUSH
27514: LD_VAR 0 1
27518: PPUSH
27519: CALL_OW 314
27523: AND
27524: IFFALSE 27528
// exit ;
27526: GO 27667
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27528: LD_VAR 0 2
27532: PPUSH
27533: LD_VAR 0 3
27537: PPUSH
27538: CALL_OW 428
27542: PUSH
27543: LD_VAR 0 1
27547: EQUAL
27548: PUSH
27549: LD_VAR 0 1
27553: PPUSH
27554: CALL_OW 314
27558: NOT
27559: AND
27560: IFFALSE 27486
// PlaySoundXY ( x , y , PlantMine ) ;
27562: LD_VAR 0 2
27566: PPUSH
27567: LD_VAR 0 3
27571: PPUSH
27572: LD_STRING PlantMine
27574: PPUSH
27575: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27579: LD_VAR 0 2
27583: PPUSH
27584: LD_VAR 0 3
27588: PPUSH
27589: LD_VAR 0 1
27593: PPUSH
27594: CALL_OW 255
27598: PPUSH
27599: LD_INT 0
27601: PPUSH
27602: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27606: LD_ADDR_EXP 110
27610: PUSH
27611: LD_EXP 110
27615: PPUSH
27616: LD_VAR 0 5
27620: PUSH
27621: LD_EXP 110
27625: PUSH
27626: LD_VAR 0 5
27630: ARRAY
27631: PUSH
27632: LD_INT 1
27634: PLUS
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PPUSH
27640: LD_VAR 0 2
27644: PUSH
27645: LD_VAR 0 3
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PPUSH
27654: CALL 33866 0 3
27658: ST_TO_ADDR
// result := true ;
27659: LD_ADDR_VAR 0 4
27663: PUSH
27664: LD_INT 1
27666: ST_TO_ADDR
// end ;
27667: LD_VAR 0 4
27671: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27672: LD_INT 0
27674: PPUSH
27675: PPUSH
27676: PPUSH
// if not unit in minersList then
27677: LD_VAR 0 1
27681: PUSH
27682: LD_EXP 109
27686: IN
27687: NOT
27688: IFFALSE 27692
// exit ;
27690: GO 28084
// index := GetElementIndex ( minersList , unit ) ;
27692: LD_ADDR_VAR 0 6
27696: PUSH
27697: LD_EXP 109
27701: PPUSH
27702: LD_VAR 0 1
27706: PPUSH
27707: CALL 33651 0 2
27711: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27712: LD_ADDR_VAR 0 5
27716: PUSH
27717: DOUBLE
27718: LD_EXP 110
27722: PUSH
27723: LD_VAR 0 6
27727: ARRAY
27728: INC
27729: ST_TO_ADDR
27730: LD_INT 1
27732: PUSH
27733: FOR_DOWNTO
27734: IFFALSE 27895
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27736: LD_EXP 110
27740: PUSH
27741: LD_VAR 0 6
27745: ARRAY
27746: PUSH
27747: LD_VAR 0 5
27751: ARRAY
27752: PUSH
27753: LD_INT 1
27755: ARRAY
27756: PUSH
27757: LD_VAR 0 2
27761: EQUAL
27762: PUSH
27763: LD_EXP 110
27767: PUSH
27768: LD_VAR 0 6
27772: ARRAY
27773: PUSH
27774: LD_VAR 0 5
27778: ARRAY
27779: PUSH
27780: LD_INT 2
27782: ARRAY
27783: PUSH
27784: LD_VAR 0 3
27788: EQUAL
27789: AND
27790: IFFALSE 27893
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27792: LD_EXP 110
27796: PUSH
27797: LD_VAR 0 6
27801: ARRAY
27802: PUSH
27803: LD_VAR 0 5
27807: ARRAY
27808: PUSH
27809: LD_INT 1
27811: ARRAY
27812: PPUSH
27813: LD_EXP 110
27817: PUSH
27818: LD_VAR 0 6
27822: ARRAY
27823: PUSH
27824: LD_VAR 0 5
27828: ARRAY
27829: PUSH
27830: LD_INT 2
27832: ARRAY
27833: PPUSH
27834: LD_VAR 0 1
27838: PPUSH
27839: CALL_OW 255
27843: PPUSH
27844: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27848: LD_ADDR_EXP 110
27852: PUSH
27853: LD_EXP 110
27857: PPUSH
27858: LD_VAR 0 6
27862: PPUSH
27863: LD_EXP 110
27867: PUSH
27868: LD_VAR 0 6
27872: ARRAY
27873: PPUSH
27874: LD_VAR 0 5
27878: PPUSH
27879: CALL_OW 3
27883: PPUSH
27884: CALL_OW 1
27888: ST_TO_ADDR
// exit ;
27889: POP
27890: POP
27891: GO 28084
// end ; end ;
27893: GO 27733
27895: POP
27896: POP
// for i := minerMinesList [ index ] downto 1 do
27897: LD_ADDR_VAR 0 5
27901: PUSH
27902: DOUBLE
27903: LD_EXP 110
27907: PUSH
27908: LD_VAR 0 6
27912: ARRAY
27913: INC
27914: ST_TO_ADDR
27915: LD_INT 1
27917: PUSH
27918: FOR_DOWNTO
27919: IFFALSE 28082
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27921: LD_EXP 110
27925: PUSH
27926: LD_VAR 0 6
27930: ARRAY
27931: PUSH
27932: LD_VAR 0 5
27936: ARRAY
27937: PUSH
27938: LD_INT 1
27940: ARRAY
27941: PPUSH
27942: LD_EXP 110
27946: PUSH
27947: LD_VAR 0 6
27951: ARRAY
27952: PUSH
27953: LD_VAR 0 5
27957: ARRAY
27958: PUSH
27959: LD_INT 2
27961: ARRAY
27962: PPUSH
27963: LD_VAR 0 2
27967: PPUSH
27968: LD_VAR 0 3
27972: PPUSH
27973: CALL_OW 298
27977: PUSH
27978: LD_INT 6
27980: LESS
27981: IFFALSE 28080
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27983: LD_EXP 110
27987: PUSH
27988: LD_VAR 0 6
27992: ARRAY
27993: PUSH
27994: LD_VAR 0 5
27998: ARRAY
27999: PUSH
28000: LD_INT 1
28002: ARRAY
28003: PPUSH
28004: LD_EXP 110
28008: PUSH
28009: LD_VAR 0 6
28013: ARRAY
28014: PUSH
28015: LD_VAR 0 5
28019: ARRAY
28020: PUSH
28021: LD_INT 2
28023: ARRAY
28024: PPUSH
28025: LD_VAR 0 1
28029: PPUSH
28030: CALL_OW 255
28034: PPUSH
28035: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28039: LD_ADDR_EXP 110
28043: PUSH
28044: LD_EXP 110
28048: PPUSH
28049: LD_VAR 0 6
28053: PPUSH
28054: LD_EXP 110
28058: PUSH
28059: LD_VAR 0 6
28063: ARRAY
28064: PPUSH
28065: LD_VAR 0 5
28069: PPUSH
28070: CALL_OW 3
28074: PPUSH
28075: CALL_OW 1
28079: ST_TO_ADDR
// end ; end ;
28080: GO 27918
28082: POP
28083: POP
// end ;
28084: LD_VAR 0 4
28088: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28089: LD_INT 0
28091: PPUSH
28092: PPUSH
28093: PPUSH
28094: PPUSH
28095: PPUSH
28096: PPUSH
28097: PPUSH
28098: PPUSH
28099: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28100: LD_VAR 0 1
28104: PPUSH
28105: CALL_OW 264
28109: PUSH
28110: LD_EXP 119
28114: EQUAL
28115: NOT
28116: PUSH
28117: LD_VAR 0 1
28121: PUSH
28122: LD_EXP 109
28126: IN
28127: NOT
28128: OR
28129: IFFALSE 28133
// exit ;
28131: GO 28455
// index := GetElementIndex ( minersList , unit ) ;
28133: LD_ADDR_VAR 0 6
28137: PUSH
28138: LD_EXP 109
28142: PPUSH
28143: LD_VAR 0 1
28147: PPUSH
28148: CALL 33651 0 2
28152: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28153: LD_ADDR_VAR 0 8
28157: PUSH
28158: LD_EXP 111
28162: PUSH
28163: LD_EXP 110
28167: PUSH
28168: LD_VAR 0 6
28172: ARRAY
28173: MINUS
28174: ST_TO_ADDR
// if not minesFreeAmount then
28175: LD_VAR 0 8
28179: NOT
28180: IFFALSE 28184
// exit ;
28182: GO 28455
// tmp := [ ] ;
28184: LD_ADDR_VAR 0 7
28188: PUSH
28189: EMPTY
28190: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28191: LD_ADDR_VAR 0 5
28195: PUSH
28196: DOUBLE
28197: LD_INT 1
28199: DEC
28200: ST_TO_ADDR
28201: LD_VAR 0 8
28205: PUSH
28206: FOR_TO
28207: IFFALSE 28402
// begin _d := rand ( 0 , 5 ) ;
28209: LD_ADDR_VAR 0 11
28213: PUSH
28214: LD_INT 0
28216: PPUSH
28217: LD_INT 5
28219: PPUSH
28220: CALL_OW 12
28224: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28225: LD_ADDR_VAR 0 12
28229: PUSH
28230: LD_INT 2
28232: PPUSH
28233: LD_INT 6
28235: PPUSH
28236: CALL_OW 12
28240: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28241: LD_ADDR_VAR 0 9
28245: PUSH
28246: LD_VAR 0 2
28250: PPUSH
28251: LD_VAR 0 11
28255: PPUSH
28256: LD_VAR 0 12
28260: PPUSH
28261: CALL_OW 272
28265: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28266: LD_ADDR_VAR 0 10
28270: PUSH
28271: LD_VAR 0 3
28275: PPUSH
28276: LD_VAR 0 11
28280: PPUSH
28281: LD_VAR 0 12
28285: PPUSH
28286: CALL_OW 273
28290: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28291: LD_VAR 0 9
28295: PPUSH
28296: LD_VAR 0 10
28300: PPUSH
28301: CALL_OW 488
28305: PUSH
28306: LD_VAR 0 9
28310: PUSH
28311: LD_VAR 0 10
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_VAR 0 7
28324: IN
28325: NOT
28326: AND
28327: PUSH
28328: LD_VAR 0 9
28332: PPUSH
28333: LD_VAR 0 10
28337: PPUSH
28338: CALL_OW 458
28342: NOT
28343: AND
28344: IFFALSE 28386
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28346: LD_ADDR_VAR 0 7
28350: PUSH
28351: LD_VAR 0 7
28355: PPUSH
28356: LD_VAR 0 7
28360: PUSH
28361: LD_INT 1
28363: PLUS
28364: PPUSH
28365: LD_VAR 0 9
28369: PUSH
28370: LD_VAR 0 10
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PPUSH
28379: CALL_OW 1
28383: ST_TO_ADDR
28384: GO 28400
// i := i - 1 ;
28386: LD_ADDR_VAR 0 5
28390: PUSH
28391: LD_VAR 0 5
28395: PUSH
28396: LD_INT 1
28398: MINUS
28399: ST_TO_ADDR
// end ;
28400: GO 28206
28402: POP
28403: POP
// for i in tmp do
28404: LD_ADDR_VAR 0 5
28408: PUSH
28409: LD_VAR 0 7
28413: PUSH
28414: FOR_IN
28415: IFFALSE 28453
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28417: LD_VAR 0 1
28421: PPUSH
28422: LD_VAR 0 5
28426: PUSH
28427: LD_INT 1
28429: ARRAY
28430: PPUSH
28431: LD_VAR 0 5
28435: PUSH
28436: LD_INT 2
28438: ARRAY
28439: PPUSH
28440: CALL 27395 0 3
28444: NOT
28445: IFFALSE 28451
// exit ;
28447: POP
28448: POP
28449: GO 28455
28451: GO 28414
28453: POP
28454: POP
// end ;
28455: LD_VAR 0 4
28459: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28460: LD_INT 0
28462: PPUSH
28463: PPUSH
28464: PPUSH
28465: PPUSH
28466: PPUSH
28467: PPUSH
28468: PPUSH
// if not GetClass ( unit ) = class_sniper then
28469: LD_VAR 0 1
28473: PPUSH
28474: CALL_OW 257
28478: PUSH
28479: LD_INT 5
28481: EQUAL
28482: NOT
28483: IFFALSE 28487
// exit ;
28485: GO 28875
// dist := 8 ;
28487: LD_ADDR_VAR 0 5
28491: PUSH
28492: LD_INT 8
28494: ST_TO_ADDR
// viewRange := 12 ;
28495: LD_ADDR_VAR 0 7
28499: PUSH
28500: LD_INT 12
28502: ST_TO_ADDR
// side := GetSide ( unit ) ;
28503: LD_ADDR_VAR 0 6
28507: PUSH
28508: LD_VAR 0 1
28512: PPUSH
28513: CALL_OW 255
28517: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28518: LD_INT 61
28520: PPUSH
28521: LD_VAR 0 6
28525: PPUSH
28526: CALL_OW 321
28530: PUSH
28531: LD_INT 2
28533: EQUAL
28534: IFFALSE 28544
// viewRange := 16 ;
28536: LD_ADDR_VAR 0 7
28540: PUSH
28541: LD_INT 16
28543: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28544: LD_VAR 0 1
28548: PPUSH
28549: LD_VAR 0 2
28553: PPUSH
28554: LD_VAR 0 3
28558: PPUSH
28559: CALL_OW 297
28563: PUSH
28564: LD_VAR 0 5
28568: GREATER
28569: IFFALSE 28648
// begin ComMoveXY ( unit , x , y ) ;
28571: LD_VAR 0 1
28575: PPUSH
28576: LD_VAR 0 2
28580: PPUSH
28581: LD_VAR 0 3
28585: PPUSH
28586: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28590: LD_INT 35
28592: PPUSH
28593: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28597: LD_VAR 0 1
28601: PPUSH
28602: LD_VAR 0 2
28606: PPUSH
28607: LD_VAR 0 3
28611: PPUSH
28612: CALL 64423 0 3
28616: NOT
28617: IFFALSE 28621
// exit ;
28619: GO 28875
// until GetDistUnitXY ( unit , x , y ) < dist ;
28621: LD_VAR 0 1
28625: PPUSH
28626: LD_VAR 0 2
28630: PPUSH
28631: LD_VAR 0 3
28635: PPUSH
28636: CALL_OW 297
28640: PUSH
28641: LD_VAR 0 5
28645: LESS
28646: IFFALSE 28590
// end ; ComTurnXY ( unit , x , y ) ;
28648: LD_VAR 0 1
28652: PPUSH
28653: LD_VAR 0 2
28657: PPUSH
28658: LD_VAR 0 3
28662: PPUSH
28663: CALL_OW 118
// wait ( 5 ) ;
28667: LD_INT 5
28669: PPUSH
28670: CALL_OW 67
// _d := GetDir ( unit ) ;
28674: LD_ADDR_VAR 0 10
28678: PUSH
28679: LD_VAR 0 1
28683: PPUSH
28684: CALL_OW 254
28688: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28689: LD_ADDR_VAR 0 8
28693: PUSH
28694: LD_VAR 0 1
28698: PPUSH
28699: CALL_OW 250
28703: PPUSH
28704: LD_VAR 0 10
28708: PPUSH
28709: LD_VAR 0 5
28713: PPUSH
28714: CALL_OW 272
28718: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28719: LD_ADDR_VAR 0 9
28723: PUSH
28724: LD_VAR 0 1
28728: PPUSH
28729: CALL_OW 251
28733: PPUSH
28734: LD_VAR 0 10
28738: PPUSH
28739: LD_VAR 0 5
28743: PPUSH
28744: CALL_OW 273
28748: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28749: LD_VAR 0 8
28753: PPUSH
28754: LD_VAR 0 9
28758: PPUSH
28759: CALL_OW 488
28763: NOT
28764: IFFALSE 28768
// exit ;
28766: GO 28875
// ComAnimCustom ( unit , 1 ) ;
28768: LD_VAR 0 1
28772: PPUSH
28773: LD_INT 1
28775: PPUSH
28776: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28780: LD_VAR 0 8
28784: PPUSH
28785: LD_VAR 0 9
28789: PPUSH
28790: LD_VAR 0 6
28794: PPUSH
28795: LD_VAR 0 7
28799: PPUSH
28800: CALL_OW 330
// repeat wait ( 1 ) ;
28804: LD_INT 1
28806: PPUSH
28807: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28811: LD_VAR 0 1
28815: PPUSH
28816: CALL_OW 316
28820: PUSH
28821: LD_VAR 0 1
28825: PPUSH
28826: CALL_OW 314
28830: OR
28831: PUSH
28832: LD_VAR 0 1
28836: PPUSH
28837: CALL_OW 302
28841: NOT
28842: OR
28843: PUSH
28844: LD_VAR 0 1
28848: PPUSH
28849: CALL_OW 301
28853: OR
28854: IFFALSE 28804
// RemoveSeeing ( _x , _y , side ) ;
28856: LD_VAR 0 8
28860: PPUSH
28861: LD_VAR 0 9
28865: PPUSH
28866: LD_VAR 0 6
28870: PPUSH
28871: CALL_OW 331
// end ; end_of_file
28875: LD_VAR 0 4
28879: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28880: LD_INT 0
28882: PPUSH
28883: PPUSH
// if exist_mode then
28884: LD_VAR 0 2
28888: IFFALSE 28913
// unit := CreateCharacter ( prefix & ident ) else
28890: LD_ADDR_VAR 0 5
28894: PUSH
28895: LD_VAR 0 3
28899: PUSH
28900: LD_VAR 0 1
28904: STR
28905: PPUSH
28906: CALL_OW 34
28910: ST_TO_ADDR
28911: GO 28928
// unit := NewCharacter ( ident ) ;
28913: LD_ADDR_VAR 0 5
28917: PUSH
28918: LD_VAR 0 1
28922: PPUSH
28923: CALL_OW 25
28927: ST_TO_ADDR
// result := unit ;
28928: LD_ADDR_VAR 0 4
28932: PUSH
28933: LD_VAR 0 5
28937: ST_TO_ADDR
// end ;
28938: LD_VAR 0 4
28942: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28943: LD_INT 0
28945: PPUSH
28946: PPUSH
// if not side or not nation then
28947: LD_VAR 0 1
28951: NOT
28952: PUSH
28953: LD_VAR 0 2
28957: NOT
28958: OR
28959: IFFALSE 28963
// exit ;
28961: GO 29731
// case nation of nation_american :
28963: LD_VAR 0 2
28967: PUSH
28968: LD_INT 1
28970: DOUBLE
28971: EQUAL
28972: IFTRUE 28976
28974: GO 29190
28976: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28977: LD_ADDR_VAR 0 4
28981: PUSH
28982: LD_INT 35
28984: PUSH
28985: LD_INT 45
28987: PUSH
28988: LD_INT 46
28990: PUSH
28991: LD_INT 47
28993: PUSH
28994: LD_INT 82
28996: PUSH
28997: LD_INT 83
28999: PUSH
29000: LD_INT 84
29002: PUSH
29003: LD_INT 85
29005: PUSH
29006: LD_INT 86
29008: PUSH
29009: LD_INT 1
29011: PUSH
29012: LD_INT 2
29014: PUSH
29015: LD_INT 6
29017: PUSH
29018: LD_INT 15
29020: PUSH
29021: LD_INT 16
29023: PUSH
29024: LD_INT 7
29026: PUSH
29027: LD_INT 12
29029: PUSH
29030: LD_INT 13
29032: PUSH
29033: LD_INT 10
29035: PUSH
29036: LD_INT 14
29038: PUSH
29039: LD_INT 20
29041: PUSH
29042: LD_INT 21
29044: PUSH
29045: LD_INT 22
29047: PUSH
29048: LD_INT 25
29050: PUSH
29051: LD_INT 32
29053: PUSH
29054: LD_INT 27
29056: PUSH
29057: LD_INT 36
29059: PUSH
29060: LD_INT 69
29062: PUSH
29063: LD_INT 39
29065: PUSH
29066: LD_INT 34
29068: PUSH
29069: LD_INT 40
29071: PUSH
29072: LD_INT 48
29074: PUSH
29075: LD_INT 49
29077: PUSH
29078: LD_INT 50
29080: PUSH
29081: LD_INT 51
29083: PUSH
29084: LD_INT 52
29086: PUSH
29087: LD_INT 53
29089: PUSH
29090: LD_INT 54
29092: PUSH
29093: LD_INT 55
29095: PUSH
29096: LD_INT 56
29098: PUSH
29099: LD_INT 57
29101: PUSH
29102: LD_INT 58
29104: PUSH
29105: LD_INT 59
29107: PUSH
29108: LD_INT 60
29110: PUSH
29111: LD_INT 61
29113: PUSH
29114: LD_INT 62
29116: PUSH
29117: LD_INT 80
29119: PUSH
29120: LD_INT 82
29122: PUSH
29123: LD_INT 83
29125: PUSH
29126: LD_INT 84
29128: PUSH
29129: LD_INT 85
29131: PUSH
29132: LD_INT 86
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: ST_TO_ADDR
29188: GO 29655
29190: LD_INT 2
29192: DOUBLE
29193: EQUAL
29194: IFTRUE 29198
29196: GO 29424
29198: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29199: LD_ADDR_VAR 0 4
29203: PUSH
29204: LD_INT 35
29206: PUSH
29207: LD_INT 45
29209: PUSH
29210: LD_INT 46
29212: PUSH
29213: LD_INT 47
29215: PUSH
29216: LD_INT 82
29218: PUSH
29219: LD_INT 83
29221: PUSH
29222: LD_INT 84
29224: PUSH
29225: LD_INT 85
29227: PUSH
29228: LD_INT 87
29230: PUSH
29231: LD_INT 70
29233: PUSH
29234: LD_INT 1
29236: PUSH
29237: LD_INT 11
29239: PUSH
29240: LD_INT 3
29242: PUSH
29243: LD_INT 4
29245: PUSH
29246: LD_INT 5
29248: PUSH
29249: LD_INT 6
29251: PUSH
29252: LD_INT 15
29254: PUSH
29255: LD_INT 18
29257: PUSH
29258: LD_INT 7
29260: PUSH
29261: LD_INT 17
29263: PUSH
29264: LD_INT 8
29266: PUSH
29267: LD_INT 20
29269: PUSH
29270: LD_INT 21
29272: PUSH
29273: LD_INT 22
29275: PUSH
29276: LD_INT 72
29278: PUSH
29279: LD_INT 26
29281: PUSH
29282: LD_INT 69
29284: PUSH
29285: LD_INT 39
29287: PUSH
29288: LD_INT 40
29290: PUSH
29291: LD_INT 41
29293: PUSH
29294: LD_INT 42
29296: PUSH
29297: LD_INT 43
29299: PUSH
29300: LD_INT 48
29302: PUSH
29303: LD_INT 49
29305: PUSH
29306: LD_INT 50
29308: PUSH
29309: LD_INT 51
29311: PUSH
29312: LD_INT 52
29314: PUSH
29315: LD_INT 53
29317: PUSH
29318: LD_INT 54
29320: PUSH
29321: LD_INT 55
29323: PUSH
29324: LD_INT 56
29326: PUSH
29327: LD_INT 60
29329: PUSH
29330: LD_INT 61
29332: PUSH
29333: LD_INT 62
29335: PUSH
29336: LD_INT 66
29338: PUSH
29339: LD_INT 67
29341: PUSH
29342: LD_INT 68
29344: PUSH
29345: LD_INT 81
29347: PUSH
29348: LD_INT 82
29350: PUSH
29351: LD_INT 83
29353: PUSH
29354: LD_INT 84
29356: PUSH
29357: LD_INT 85
29359: PUSH
29360: LD_INT 87
29362: PUSH
29363: LD_INT 88
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: ST_TO_ADDR
29422: GO 29655
29424: LD_INT 3
29426: DOUBLE
29427: EQUAL
29428: IFTRUE 29432
29430: GO 29654
29432: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29433: LD_ADDR_VAR 0 4
29437: PUSH
29438: LD_INT 46
29440: PUSH
29441: LD_INT 47
29443: PUSH
29444: LD_INT 1
29446: PUSH
29447: LD_INT 2
29449: PUSH
29450: LD_INT 82
29452: PUSH
29453: LD_INT 83
29455: PUSH
29456: LD_INT 84
29458: PUSH
29459: LD_INT 85
29461: PUSH
29462: LD_INT 86
29464: PUSH
29465: LD_INT 11
29467: PUSH
29468: LD_INT 9
29470: PUSH
29471: LD_INT 20
29473: PUSH
29474: LD_INT 19
29476: PUSH
29477: LD_INT 21
29479: PUSH
29480: LD_INT 24
29482: PUSH
29483: LD_INT 22
29485: PUSH
29486: LD_INT 25
29488: PUSH
29489: LD_INT 28
29491: PUSH
29492: LD_INT 29
29494: PUSH
29495: LD_INT 30
29497: PUSH
29498: LD_INT 31
29500: PUSH
29501: LD_INT 37
29503: PUSH
29504: LD_INT 38
29506: PUSH
29507: LD_INT 32
29509: PUSH
29510: LD_INT 27
29512: PUSH
29513: LD_INT 33
29515: PUSH
29516: LD_INT 69
29518: PUSH
29519: LD_INT 39
29521: PUSH
29522: LD_INT 34
29524: PUSH
29525: LD_INT 40
29527: PUSH
29528: LD_INT 71
29530: PUSH
29531: LD_INT 23
29533: PUSH
29534: LD_INT 44
29536: PUSH
29537: LD_INT 48
29539: PUSH
29540: LD_INT 49
29542: PUSH
29543: LD_INT 50
29545: PUSH
29546: LD_INT 51
29548: PUSH
29549: LD_INT 52
29551: PUSH
29552: LD_INT 53
29554: PUSH
29555: LD_INT 54
29557: PUSH
29558: LD_INT 55
29560: PUSH
29561: LD_INT 56
29563: PUSH
29564: LD_INT 57
29566: PUSH
29567: LD_INT 58
29569: PUSH
29570: LD_INT 59
29572: PUSH
29573: LD_INT 63
29575: PUSH
29576: LD_INT 64
29578: PUSH
29579: LD_INT 65
29581: PUSH
29582: LD_INT 82
29584: PUSH
29585: LD_INT 83
29587: PUSH
29588: LD_INT 84
29590: PUSH
29591: LD_INT 85
29593: PUSH
29594: LD_INT 86
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: ST_TO_ADDR
29652: GO 29655
29654: POP
// if state > - 1 and state < 3 then
29655: LD_VAR 0 3
29659: PUSH
29660: LD_INT 1
29662: NEG
29663: GREATER
29664: PUSH
29665: LD_VAR 0 3
29669: PUSH
29670: LD_INT 3
29672: LESS
29673: AND
29674: IFFALSE 29731
// for i in result do
29676: LD_ADDR_VAR 0 5
29680: PUSH
29681: LD_VAR 0 4
29685: PUSH
29686: FOR_IN
29687: IFFALSE 29729
// if GetTech ( i , side ) <> state then
29689: LD_VAR 0 5
29693: PPUSH
29694: LD_VAR 0 1
29698: PPUSH
29699: CALL_OW 321
29703: PUSH
29704: LD_VAR 0 3
29708: NONEQUAL
29709: IFFALSE 29727
// result := result diff i ;
29711: LD_ADDR_VAR 0 4
29715: PUSH
29716: LD_VAR 0 4
29720: PUSH
29721: LD_VAR 0 5
29725: DIFF
29726: ST_TO_ADDR
29727: GO 29686
29729: POP
29730: POP
// end ;
29731: LD_VAR 0 4
29735: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29736: LD_INT 0
29738: PPUSH
29739: PPUSH
29740: PPUSH
// result := true ;
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: LD_INT 1
29748: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29749: LD_ADDR_VAR 0 5
29753: PUSH
29754: LD_VAR 0 2
29758: PPUSH
29759: CALL_OW 480
29763: ST_TO_ADDR
// if not tmp then
29764: LD_VAR 0 5
29768: NOT
29769: IFFALSE 29773
// exit ;
29771: GO 29822
// for i in tmp do
29773: LD_ADDR_VAR 0 4
29777: PUSH
29778: LD_VAR 0 5
29782: PUSH
29783: FOR_IN
29784: IFFALSE 29820
// if GetTech ( i , side ) <> state_researched then
29786: LD_VAR 0 4
29790: PPUSH
29791: LD_VAR 0 1
29795: PPUSH
29796: CALL_OW 321
29800: PUSH
29801: LD_INT 2
29803: NONEQUAL
29804: IFFALSE 29818
// begin result := false ;
29806: LD_ADDR_VAR 0 3
29810: PUSH
29811: LD_INT 0
29813: ST_TO_ADDR
// exit ;
29814: POP
29815: POP
29816: GO 29822
// end ;
29818: GO 29783
29820: POP
29821: POP
// end ;
29822: LD_VAR 0 3
29826: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29827: LD_INT 0
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
29833: PPUSH
29834: PPUSH
29835: PPUSH
29836: PPUSH
29837: PPUSH
29838: PPUSH
29839: PPUSH
29840: PPUSH
29841: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29842: LD_VAR 0 1
29846: NOT
29847: PUSH
29848: LD_VAR 0 1
29852: PPUSH
29853: CALL_OW 257
29857: PUSH
29858: LD_INT 9
29860: NONEQUAL
29861: OR
29862: IFFALSE 29866
// exit ;
29864: GO 30439
// side := GetSide ( unit ) ;
29866: LD_ADDR_VAR 0 9
29870: PUSH
29871: LD_VAR 0 1
29875: PPUSH
29876: CALL_OW 255
29880: ST_TO_ADDR
// tech_space := tech_spacanom ;
29881: LD_ADDR_VAR 0 12
29885: PUSH
29886: LD_INT 29
29888: ST_TO_ADDR
// tech_time := tech_taurad ;
29889: LD_ADDR_VAR 0 13
29893: PUSH
29894: LD_INT 28
29896: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29897: LD_ADDR_VAR 0 11
29901: PUSH
29902: LD_VAR 0 1
29906: PPUSH
29907: CALL_OW 310
29911: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29912: LD_VAR 0 11
29916: PPUSH
29917: CALL_OW 247
29921: PUSH
29922: LD_INT 2
29924: EQUAL
29925: IFFALSE 29929
// exit ;
29927: GO 30439
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29929: LD_ADDR_VAR 0 8
29933: PUSH
29934: LD_INT 81
29936: PUSH
29937: LD_VAR 0 9
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 3
29948: PUSH
29949: LD_INT 21
29951: PUSH
29952: LD_INT 3
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PPUSH
29967: CALL_OW 69
29971: ST_TO_ADDR
// if not tmp then
29972: LD_VAR 0 8
29976: NOT
29977: IFFALSE 29981
// exit ;
29979: GO 30439
// if in_unit then
29981: LD_VAR 0 11
29985: IFFALSE 30009
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29987: LD_ADDR_VAR 0 10
29991: PUSH
29992: LD_VAR 0 8
29996: PPUSH
29997: LD_VAR 0 11
30001: PPUSH
30002: CALL_OW 74
30006: ST_TO_ADDR
30007: GO 30029
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30009: LD_ADDR_VAR 0 10
30013: PUSH
30014: LD_VAR 0 8
30018: PPUSH
30019: LD_VAR 0 1
30023: PPUSH
30024: CALL_OW 74
30028: ST_TO_ADDR
// if not enemy then
30029: LD_VAR 0 10
30033: NOT
30034: IFFALSE 30038
// exit ;
30036: GO 30439
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30038: LD_VAR 0 11
30042: PUSH
30043: LD_VAR 0 11
30047: PPUSH
30048: LD_VAR 0 10
30052: PPUSH
30053: CALL_OW 296
30057: PUSH
30058: LD_INT 13
30060: GREATER
30061: AND
30062: PUSH
30063: LD_VAR 0 1
30067: PPUSH
30068: LD_VAR 0 10
30072: PPUSH
30073: CALL_OW 296
30077: PUSH
30078: LD_INT 12
30080: GREATER
30081: OR
30082: IFFALSE 30086
// exit ;
30084: GO 30439
// missile := [ 1 ] ;
30086: LD_ADDR_VAR 0 14
30090: PUSH
30091: LD_INT 1
30093: PUSH
30094: EMPTY
30095: LIST
30096: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30097: LD_VAR 0 9
30101: PPUSH
30102: LD_VAR 0 12
30106: PPUSH
30107: CALL_OW 325
30111: IFFALSE 30140
// missile := Insert ( missile , missile + 1 , 2 ) ;
30113: LD_ADDR_VAR 0 14
30117: PUSH
30118: LD_VAR 0 14
30122: PPUSH
30123: LD_VAR 0 14
30127: PUSH
30128: LD_INT 1
30130: PLUS
30131: PPUSH
30132: LD_INT 2
30134: PPUSH
30135: CALL_OW 2
30139: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30140: LD_VAR 0 9
30144: PPUSH
30145: LD_VAR 0 13
30149: PPUSH
30150: CALL_OW 325
30154: PUSH
30155: LD_VAR 0 10
30159: PPUSH
30160: CALL_OW 255
30164: PPUSH
30165: LD_VAR 0 13
30169: PPUSH
30170: CALL_OW 325
30174: NOT
30175: AND
30176: IFFALSE 30205
// missile := Insert ( missile , missile + 1 , 3 ) ;
30178: LD_ADDR_VAR 0 14
30182: PUSH
30183: LD_VAR 0 14
30187: PPUSH
30188: LD_VAR 0 14
30192: PUSH
30193: LD_INT 1
30195: PLUS
30196: PPUSH
30197: LD_INT 3
30199: PPUSH
30200: CALL_OW 2
30204: ST_TO_ADDR
// if missile < 2 then
30205: LD_VAR 0 14
30209: PUSH
30210: LD_INT 2
30212: LESS
30213: IFFALSE 30217
// exit ;
30215: GO 30439
// x := GetX ( enemy ) ;
30217: LD_ADDR_VAR 0 4
30221: PUSH
30222: LD_VAR 0 10
30226: PPUSH
30227: CALL_OW 250
30231: ST_TO_ADDR
// y := GetY ( enemy ) ;
30232: LD_ADDR_VAR 0 5
30236: PUSH
30237: LD_VAR 0 10
30241: PPUSH
30242: CALL_OW 251
30246: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30247: LD_ADDR_VAR 0 6
30251: PUSH
30252: LD_VAR 0 4
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PPUSH
30261: LD_INT 1
30263: PPUSH
30264: CALL_OW 12
30268: PLUS
30269: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30270: LD_ADDR_VAR 0 7
30274: PUSH
30275: LD_VAR 0 5
30279: PUSH
30280: LD_INT 1
30282: NEG
30283: PPUSH
30284: LD_INT 1
30286: PPUSH
30287: CALL_OW 12
30291: PLUS
30292: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30293: LD_VAR 0 6
30297: PPUSH
30298: LD_VAR 0 7
30302: PPUSH
30303: CALL_OW 488
30307: NOT
30308: IFFALSE 30330
// begin _x := x ;
30310: LD_ADDR_VAR 0 6
30314: PUSH
30315: LD_VAR 0 4
30319: ST_TO_ADDR
// _y := y ;
30320: LD_ADDR_VAR 0 7
30324: PUSH
30325: LD_VAR 0 5
30329: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30330: LD_ADDR_VAR 0 3
30334: PUSH
30335: LD_INT 1
30337: PPUSH
30338: LD_VAR 0 14
30342: PPUSH
30343: CALL_OW 12
30347: ST_TO_ADDR
// case i of 1 :
30348: LD_VAR 0 3
30352: PUSH
30353: LD_INT 1
30355: DOUBLE
30356: EQUAL
30357: IFTRUE 30361
30359: GO 30378
30361: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30362: LD_VAR 0 1
30366: PPUSH
30367: LD_VAR 0 10
30371: PPUSH
30372: CALL_OW 115
30376: GO 30439
30378: LD_INT 2
30380: DOUBLE
30381: EQUAL
30382: IFTRUE 30386
30384: GO 30408
30386: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30387: LD_VAR 0 1
30391: PPUSH
30392: LD_VAR 0 6
30396: PPUSH
30397: LD_VAR 0 7
30401: PPUSH
30402: CALL_OW 153
30406: GO 30439
30408: LD_INT 3
30410: DOUBLE
30411: EQUAL
30412: IFTRUE 30416
30414: GO 30438
30416: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30417: LD_VAR 0 1
30421: PPUSH
30422: LD_VAR 0 6
30426: PPUSH
30427: LD_VAR 0 7
30431: PPUSH
30432: CALL_OW 154
30436: GO 30439
30438: POP
// end ;
30439: LD_VAR 0 2
30443: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30444: LD_INT 0
30446: PPUSH
30447: PPUSH
30448: PPUSH
30449: PPUSH
30450: PPUSH
30451: PPUSH
// if not unit or not building then
30452: LD_VAR 0 1
30456: NOT
30457: PUSH
30458: LD_VAR 0 2
30462: NOT
30463: OR
30464: IFFALSE 30468
// exit ;
30466: GO 30626
// x := GetX ( building ) ;
30468: LD_ADDR_VAR 0 5
30472: PUSH
30473: LD_VAR 0 2
30477: PPUSH
30478: CALL_OW 250
30482: ST_TO_ADDR
// y := GetY ( building ) ;
30483: LD_ADDR_VAR 0 6
30487: PUSH
30488: LD_VAR 0 2
30492: PPUSH
30493: CALL_OW 251
30497: ST_TO_ADDR
// for i = 0 to 5 do
30498: LD_ADDR_VAR 0 4
30502: PUSH
30503: DOUBLE
30504: LD_INT 0
30506: DEC
30507: ST_TO_ADDR
30508: LD_INT 5
30510: PUSH
30511: FOR_TO
30512: IFFALSE 30624
// begin _x := ShiftX ( x , i , 3 ) ;
30514: LD_ADDR_VAR 0 7
30518: PUSH
30519: LD_VAR 0 5
30523: PPUSH
30524: LD_VAR 0 4
30528: PPUSH
30529: LD_INT 3
30531: PPUSH
30532: CALL_OW 272
30536: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30537: LD_ADDR_VAR 0 8
30541: PUSH
30542: LD_VAR 0 6
30546: PPUSH
30547: LD_VAR 0 4
30551: PPUSH
30552: LD_INT 3
30554: PPUSH
30555: CALL_OW 273
30559: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30560: LD_VAR 0 7
30564: PPUSH
30565: LD_VAR 0 8
30569: PPUSH
30570: CALL_OW 488
30574: NOT
30575: IFFALSE 30579
// continue ;
30577: GO 30511
// if HexInfo ( _x , _y ) = 0 then
30579: LD_VAR 0 7
30583: PPUSH
30584: LD_VAR 0 8
30588: PPUSH
30589: CALL_OW 428
30593: PUSH
30594: LD_INT 0
30596: EQUAL
30597: IFFALSE 30622
// begin ComMoveXY ( unit , _x , _y ) ;
30599: LD_VAR 0 1
30603: PPUSH
30604: LD_VAR 0 7
30608: PPUSH
30609: LD_VAR 0 8
30613: PPUSH
30614: CALL_OW 111
// exit ;
30618: POP
30619: POP
30620: GO 30626
// end ; end ;
30622: GO 30511
30624: POP
30625: POP
// end ;
30626: LD_VAR 0 3
30630: RET
// export function ScanBase ( side , base_area ) ; begin
30631: LD_INT 0
30633: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30634: LD_ADDR_VAR 0 3
30638: PUSH
30639: LD_VAR 0 2
30643: PPUSH
30644: LD_INT 81
30646: PUSH
30647: LD_VAR 0 1
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PPUSH
30656: CALL_OW 70
30660: ST_TO_ADDR
// end ;
30661: LD_VAR 0 3
30665: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30666: LD_INT 0
30668: PPUSH
30669: PPUSH
30670: PPUSH
30671: PPUSH
// result := false ;
30672: LD_ADDR_VAR 0 2
30676: PUSH
30677: LD_INT 0
30679: ST_TO_ADDR
// side := GetSide ( unit ) ;
30680: LD_ADDR_VAR 0 3
30684: PUSH
30685: LD_VAR 0 1
30689: PPUSH
30690: CALL_OW 255
30694: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30695: LD_ADDR_VAR 0 4
30699: PUSH
30700: LD_VAR 0 1
30704: PPUSH
30705: CALL_OW 248
30709: ST_TO_ADDR
// case nat of 1 :
30710: LD_VAR 0 4
30714: PUSH
30715: LD_INT 1
30717: DOUBLE
30718: EQUAL
30719: IFTRUE 30723
30721: GO 30734
30723: POP
// tech := tech_lassight ; 2 :
30724: LD_ADDR_VAR 0 5
30728: PUSH
30729: LD_INT 12
30731: ST_TO_ADDR
30732: GO 30773
30734: LD_INT 2
30736: DOUBLE
30737: EQUAL
30738: IFTRUE 30742
30740: GO 30753
30742: POP
// tech := tech_mortar ; 3 :
30743: LD_ADDR_VAR 0 5
30747: PUSH
30748: LD_INT 41
30750: ST_TO_ADDR
30751: GO 30773
30753: LD_INT 3
30755: DOUBLE
30756: EQUAL
30757: IFTRUE 30761
30759: GO 30772
30761: POP
// tech := tech_bazooka ; end ;
30762: LD_ADDR_VAR 0 5
30766: PUSH
30767: LD_INT 44
30769: ST_TO_ADDR
30770: GO 30773
30772: POP
// if Researched ( side , tech ) then
30773: LD_VAR 0 3
30777: PPUSH
30778: LD_VAR 0 5
30782: PPUSH
30783: CALL_OW 325
30787: IFFALSE 30814
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30789: LD_ADDR_VAR 0 2
30793: PUSH
30794: LD_INT 5
30796: PUSH
30797: LD_INT 8
30799: PUSH
30800: LD_INT 9
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: PUSH
30808: LD_VAR 0 4
30812: ARRAY
30813: ST_TO_ADDR
// end ;
30814: LD_VAR 0 2
30818: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30819: LD_INT 0
30821: PPUSH
30822: PPUSH
30823: PPUSH
// if not mines then
30824: LD_VAR 0 2
30828: NOT
30829: IFFALSE 30833
// exit ;
30831: GO 30977
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30833: LD_ADDR_VAR 0 5
30837: PUSH
30838: LD_INT 81
30840: PUSH
30841: LD_VAR 0 1
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 3
30852: PUSH
30853: LD_INT 21
30855: PUSH
30856: LD_INT 3
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PPUSH
30871: CALL_OW 69
30875: ST_TO_ADDR
// for i in mines do
30876: LD_ADDR_VAR 0 4
30880: PUSH
30881: LD_VAR 0 2
30885: PUSH
30886: FOR_IN
30887: IFFALSE 30975
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30889: LD_VAR 0 4
30893: PUSH
30894: LD_INT 1
30896: ARRAY
30897: PPUSH
30898: LD_VAR 0 4
30902: PUSH
30903: LD_INT 2
30905: ARRAY
30906: PPUSH
30907: CALL_OW 458
30911: NOT
30912: IFFALSE 30916
// continue ;
30914: GO 30886
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30916: LD_VAR 0 4
30920: PUSH
30921: LD_INT 1
30923: ARRAY
30924: PPUSH
30925: LD_VAR 0 4
30929: PUSH
30930: LD_INT 2
30932: ARRAY
30933: PPUSH
30934: CALL_OW 428
30938: PUSH
30939: LD_VAR 0 5
30943: IN
30944: IFFALSE 30973
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30946: LD_VAR 0 4
30950: PUSH
30951: LD_INT 1
30953: ARRAY
30954: PPUSH
30955: LD_VAR 0 4
30959: PUSH
30960: LD_INT 2
30962: ARRAY
30963: PPUSH
30964: LD_VAR 0 1
30968: PPUSH
30969: CALL_OW 456
// end ;
30973: GO 30886
30975: POP
30976: POP
// end ;
30977: LD_VAR 0 3
30981: RET
// export function Count ( array ) ; var i ; begin
30982: LD_INT 0
30984: PPUSH
30985: PPUSH
// result := 0 ;
30986: LD_ADDR_VAR 0 2
30990: PUSH
30991: LD_INT 0
30993: ST_TO_ADDR
// for i in array do
30994: LD_ADDR_VAR 0 3
30998: PUSH
30999: LD_VAR 0 1
31003: PUSH
31004: FOR_IN
31005: IFFALSE 31029
// if i then
31007: LD_VAR 0 3
31011: IFFALSE 31027
// result := result + 1 ;
31013: LD_ADDR_VAR 0 2
31017: PUSH
31018: LD_VAR 0 2
31022: PUSH
31023: LD_INT 1
31025: PLUS
31026: ST_TO_ADDR
31027: GO 31004
31029: POP
31030: POP
// end ;
31031: LD_VAR 0 2
31035: RET
// export function IsEmpty ( building ) ; begin
31036: LD_INT 0
31038: PPUSH
// if not building then
31039: LD_VAR 0 1
31043: NOT
31044: IFFALSE 31048
// exit ;
31046: GO 31091
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31048: LD_ADDR_VAR 0 2
31052: PUSH
31053: LD_VAR 0 1
31057: PUSH
31058: LD_INT 22
31060: PUSH
31061: LD_VAR 0 1
31065: PPUSH
31066: CALL_OW 255
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 58
31077: PUSH
31078: EMPTY
31079: LIST
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PPUSH
31085: CALL_OW 69
31089: IN
31090: ST_TO_ADDR
// end ;
31091: LD_VAR 0 2
31095: RET
// export function IsNotFull ( building ) ; begin
31096: LD_INT 0
31098: PPUSH
// if not building then
31099: LD_VAR 0 1
31103: NOT
31104: IFFALSE 31108
// exit ;
31106: GO 31127
// result := UnitsInside ( building ) < 6 ;
31108: LD_ADDR_VAR 0 2
31112: PUSH
31113: LD_VAR 0 1
31117: PPUSH
31118: CALL_OW 313
31122: PUSH
31123: LD_INT 6
31125: LESS
31126: ST_TO_ADDR
// end ;
31127: LD_VAR 0 2
31131: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31132: LD_INT 0
31134: PPUSH
31135: PPUSH
31136: PPUSH
31137: PPUSH
// tmp := [ ] ;
31138: LD_ADDR_VAR 0 3
31142: PUSH
31143: EMPTY
31144: ST_TO_ADDR
// list := [ ] ;
31145: LD_ADDR_VAR 0 5
31149: PUSH
31150: EMPTY
31151: ST_TO_ADDR
// for i = 16 to 25 do
31152: LD_ADDR_VAR 0 4
31156: PUSH
31157: DOUBLE
31158: LD_INT 16
31160: DEC
31161: ST_TO_ADDR
31162: LD_INT 25
31164: PUSH
31165: FOR_TO
31166: IFFALSE 31239
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31168: LD_ADDR_VAR 0 3
31172: PUSH
31173: LD_VAR 0 3
31177: PUSH
31178: LD_INT 22
31180: PUSH
31181: LD_VAR 0 1
31185: PPUSH
31186: CALL_OW 255
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 91
31197: PUSH
31198: LD_VAR 0 1
31202: PUSH
31203: LD_INT 6
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 30
31213: PUSH
31214: LD_VAR 0 4
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: LIST
31227: PUSH
31228: EMPTY
31229: LIST
31230: PPUSH
31231: CALL_OW 69
31235: ADD
31236: ST_TO_ADDR
31237: GO 31165
31239: POP
31240: POP
// for i = 1 to tmp do
31241: LD_ADDR_VAR 0 4
31245: PUSH
31246: DOUBLE
31247: LD_INT 1
31249: DEC
31250: ST_TO_ADDR
31251: LD_VAR 0 3
31255: PUSH
31256: FOR_TO
31257: IFFALSE 31345
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31259: LD_ADDR_VAR 0 5
31263: PUSH
31264: LD_VAR 0 5
31268: PUSH
31269: LD_VAR 0 3
31273: PUSH
31274: LD_VAR 0 4
31278: ARRAY
31279: PPUSH
31280: CALL_OW 266
31284: PUSH
31285: LD_VAR 0 3
31289: PUSH
31290: LD_VAR 0 4
31294: ARRAY
31295: PPUSH
31296: CALL_OW 250
31300: PUSH
31301: LD_VAR 0 3
31305: PUSH
31306: LD_VAR 0 4
31310: ARRAY
31311: PPUSH
31312: CALL_OW 251
31316: PUSH
31317: LD_VAR 0 3
31321: PUSH
31322: LD_VAR 0 4
31326: ARRAY
31327: PPUSH
31328: CALL_OW 254
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: PUSH
31339: EMPTY
31340: LIST
31341: ADD
31342: ST_TO_ADDR
31343: GO 31256
31345: POP
31346: POP
// result := list ;
31347: LD_ADDR_VAR 0 2
31351: PUSH
31352: LD_VAR 0 5
31356: ST_TO_ADDR
// end ;
31357: LD_VAR 0 2
31361: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31362: LD_INT 0
31364: PPUSH
31365: PPUSH
31366: PPUSH
31367: PPUSH
31368: PPUSH
31369: PPUSH
31370: PPUSH
// if not factory then
31371: LD_VAR 0 1
31375: NOT
31376: IFFALSE 31380
// exit ;
31378: GO 31973
// if control = control_apeman then
31380: LD_VAR 0 4
31384: PUSH
31385: LD_INT 5
31387: EQUAL
31388: IFFALSE 31497
// begin tmp := UnitsInside ( factory ) ;
31390: LD_ADDR_VAR 0 8
31394: PUSH
31395: LD_VAR 0 1
31399: PPUSH
31400: CALL_OW 313
31404: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31405: LD_VAR 0 8
31409: PPUSH
31410: LD_INT 25
31412: PUSH
31413: LD_INT 12
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PPUSH
31420: CALL_OW 72
31424: NOT
31425: IFFALSE 31435
// control := control_manual ;
31427: LD_ADDR_VAR 0 4
31431: PUSH
31432: LD_INT 1
31434: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31435: LD_ADDR_VAR 0 8
31439: PUSH
31440: LD_VAR 0 1
31444: PPUSH
31445: CALL 31132 0 1
31449: ST_TO_ADDR
// if tmp then
31450: LD_VAR 0 8
31454: IFFALSE 31497
// begin for i in tmp do
31456: LD_ADDR_VAR 0 7
31460: PUSH
31461: LD_VAR 0 8
31465: PUSH
31466: FOR_IN
31467: IFFALSE 31495
// if i [ 1 ] = b_ext_radio then
31469: LD_VAR 0 7
31473: PUSH
31474: LD_INT 1
31476: ARRAY
31477: PUSH
31478: LD_INT 22
31480: EQUAL
31481: IFFALSE 31493
// begin control := control_remote ;
31483: LD_ADDR_VAR 0 4
31487: PUSH
31488: LD_INT 2
31490: ST_TO_ADDR
// break ;
31491: GO 31495
// end ;
31493: GO 31466
31495: POP
31496: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31497: LD_VAR 0 1
31501: PPUSH
31502: LD_VAR 0 2
31506: PPUSH
31507: LD_VAR 0 3
31511: PPUSH
31512: LD_VAR 0 4
31516: PPUSH
31517: LD_VAR 0 5
31521: PPUSH
31522: CALL_OW 448
31526: IFFALSE 31561
// begin result := [ chassis , engine , control , weapon ] ;
31528: LD_ADDR_VAR 0 6
31532: PUSH
31533: LD_VAR 0 2
31537: PUSH
31538: LD_VAR 0 3
31542: PUSH
31543: LD_VAR 0 4
31547: PUSH
31548: LD_VAR 0 5
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: ST_TO_ADDR
// exit ;
31559: GO 31973
// end ; _chassis := AvailableChassisList ( factory ) ;
31561: LD_ADDR_VAR 0 9
31565: PUSH
31566: LD_VAR 0 1
31570: PPUSH
31571: CALL_OW 475
31575: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31576: LD_ADDR_VAR 0 11
31580: PUSH
31581: LD_VAR 0 1
31585: PPUSH
31586: CALL_OW 476
31590: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31591: LD_ADDR_VAR 0 12
31595: PUSH
31596: LD_VAR 0 1
31600: PPUSH
31601: CALL_OW 477
31605: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31606: LD_ADDR_VAR 0 10
31610: PUSH
31611: LD_VAR 0 1
31615: PPUSH
31616: CALL_OW 478
31620: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31621: LD_VAR 0 9
31625: NOT
31626: PUSH
31627: LD_VAR 0 11
31631: NOT
31632: OR
31633: PUSH
31634: LD_VAR 0 12
31638: NOT
31639: OR
31640: PUSH
31641: LD_VAR 0 10
31645: NOT
31646: OR
31647: IFFALSE 31682
// begin result := [ chassis , engine , control , weapon ] ;
31649: LD_ADDR_VAR 0 6
31653: PUSH
31654: LD_VAR 0 2
31658: PUSH
31659: LD_VAR 0 3
31663: PUSH
31664: LD_VAR 0 4
31668: PUSH
31669: LD_VAR 0 5
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: ST_TO_ADDR
// exit ;
31680: GO 31973
// end ; if not chassis in _chassis then
31682: LD_VAR 0 2
31686: PUSH
31687: LD_VAR 0 9
31691: IN
31692: NOT
31693: IFFALSE 31719
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31695: LD_ADDR_VAR 0 2
31699: PUSH
31700: LD_VAR 0 9
31704: PUSH
31705: LD_INT 1
31707: PPUSH
31708: LD_VAR 0 9
31712: PPUSH
31713: CALL_OW 12
31717: ARRAY
31718: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31719: LD_VAR 0 2
31723: PPUSH
31724: LD_VAR 0 3
31728: PPUSH
31729: CALL 31978 0 2
31733: NOT
31734: IFFALSE 31793
// repeat engine := _engine [ 1 ] ;
31736: LD_ADDR_VAR 0 3
31740: PUSH
31741: LD_VAR 0 11
31745: PUSH
31746: LD_INT 1
31748: ARRAY
31749: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31750: LD_ADDR_VAR 0 11
31754: PUSH
31755: LD_VAR 0 11
31759: PPUSH
31760: LD_INT 1
31762: PPUSH
31763: CALL_OW 3
31767: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31768: LD_VAR 0 2
31772: PPUSH
31773: LD_VAR 0 3
31777: PPUSH
31778: CALL 31978 0 2
31782: PUSH
31783: LD_VAR 0 11
31787: PUSH
31788: EMPTY
31789: EQUAL
31790: OR
31791: IFFALSE 31736
// if not control in _control then
31793: LD_VAR 0 4
31797: PUSH
31798: LD_VAR 0 12
31802: IN
31803: NOT
31804: IFFALSE 31830
// control := _control [ rand ( 1 , _control ) ] ;
31806: LD_ADDR_VAR 0 4
31810: PUSH
31811: LD_VAR 0 12
31815: PUSH
31816: LD_INT 1
31818: PPUSH
31819: LD_VAR 0 12
31823: PPUSH
31824: CALL_OW 12
31828: ARRAY
31829: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31830: LD_VAR 0 2
31834: PPUSH
31835: LD_VAR 0 5
31839: PPUSH
31840: CALL 32198 0 2
31844: NOT
31845: IFFALSE 31904
// repeat weapon := _weapon [ 1 ] ;
31847: LD_ADDR_VAR 0 5
31851: PUSH
31852: LD_VAR 0 10
31856: PUSH
31857: LD_INT 1
31859: ARRAY
31860: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31861: LD_ADDR_VAR 0 10
31865: PUSH
31866: LD_VAR 0 10
31870: PPUSH
31871: LD_INT 1
31873: PPUSH
31874: CALL_OW 3
31878: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31879: LD_VAR 0 2
31883: PPUSH
31884: LD_VAR 0 5
31888: PPUSH
31889: CALL 32198 0 2
31893: PUSH
31894: LD_VAR 0 10
31898: PUSH
31899: EMPTY
31900: EQUAL
31901: OR
31902: IFFALSE 31847
// result := [ ] ;
31904: LD_ADDR_VAR 0 6
31908: PUSH
31909: EMPTY
31910: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31911: LD_VAR 0 1
31915: PPUSH
31916: LD_VAR 0 2
31920: PPUSH
31921: LD_VAR 0 3
31925: PPUSH
31926: LD_VAR 0 4
31930: PPUSH
31931: LD_VAR 0 5
31935: PPUSH
31936: CALL_OW 448
31940: IFFALSE 31973
// result := [ chassis , engine , control , weapon ] ;
31942: LD_ADDR_VAR 0 6
31946: PUSH
31947: LD_VAR 0 2
31951: PUSH
31952: LD_VAR 0 3
31956: PUSH
31957: LD_VAR 0 4
31961: PUSH
31962: LD_VAR 0 5
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: ST_TO_ADDR
// end ;
31973: LD_VAR 0 6
31977: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31978: LD_INT 0
31980: PPUSH
// if not chassis or not engine then
31981: LD_VAR 0 1
31985: NOT
31986: PUSH
31987: LD_VAR 0 2
31991: NOT
31992: OR
31993: IFFALSE 31997
// exit ;
31995: GO 32193
// case engine of engine_solar :
31997: LD_VAR 0 2
32001: PUSH
32002: LD_INT 2
32004: DOUBLE
32005: EQUAL
32006: IFTRUE 32010
32008: GO 32048
32010: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32011: LD_ADDR_VAR 0 3
32015: PUSH
32016: LD_INT 11
32018: PUSH
32019: LD_INT 12
32021: PUSH
32022: LD_INT 13
32024: PUSH
32025: LD_INT 14
32027: PUSH
32028: LD_INT 1
32030: PUSH
32031: LD_INT 2
32033: PUSH
32034: LD_INT 3
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: ST_TO_ADDR
32046: GO 32177
32048: LD_INT 1
32050: DOUBLE
32051: EQUAL
32052: IFTRUE 32056
32054: GO 32118
32056: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32057: LD_ADDR_VAR 0 3
32061: PUSH
32062: LD_INT 11
32064: PUSH
32065: LD_INT 12
32067: PUSH
32068: LD_INT 13
32070: PUSH
32071: LD_INT 14
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: LD_INT 3
32082: PUSH
32083: LD_INT 4
32085: PUSH
32086: LD_INT 5
32088: PUSH
32089: LD_INT 21
32091: PUSH
32092: LD_INT 23
32094: PUSH
32095: LD_INT 22
32097: PUSH
32098: LD_INT 24
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: ST_TO_ADDR
32116: GO 32177
32118: LD_INT 3
32120: DOUBLE
32121: EQUAL
32122: IFTRUE 32126
32124: GO 32176
32126: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32127: LD_ADDR_VAR 0 3
32131: PUSH
32132: LD_INT 13
32134: PUSH
32135: LD_INT 14
32137: PUSH
32138: LD_INT 2
32140: PUSH
32141: LD_INT 3
32143: PUSH
32144: LD_INT 4
32146: PUSH
32147: LD_INT 5
32149: PUSH
32150: LD_INT 21
32152: PUSH
32153: LD_INT 22
32155: PUSH
32156: LD_INT 23
32158: PUSH
32159: LD_INT 24
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: ST_TO_ADDR
32174: GO 32177
32176: POP
// result := ( chassis in result ) ;
32177: LD_ADDR_VAR 0 3
32181: PUSH
32182: LD_VAR 0 1
32186: PUSH
32187: LD_VAR 0 3
32191: IN
32192: ST_TO_ADDR
// end ;
32193: LD_VAR 0 3
32197: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32198: LD_INT 0
32200: PPUSH
// if not chassis or not weapon then
32201: LD_VAR 0 1
32205: NOT
32206: PUSH
32207: LD_VAR 0 2
32211: NOT
32212: OR
32213: IFFALSE 32217
// exit ;
32215: GO 33279
// case weapon of us_machine_gun :
32217: LD_VAR 0 2
32221: PUSH
32222: LD_INT 2
32224: DOUBLE
32225: EQUAL
32226: IFTRUE 32230
32228: GO 32260
32230: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32231: LD_ADDR_VAR 0 3
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: LD_INT 2
32241: PUSH
32242: LD_INT 3
32244: PUSH
32245: LD_INT 4
32247: PUSH
32248: LD_INT 5
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: ST_TO_ADDR
32258: GO 33263
32260: LD_INT 3
32262: DOUBLE
32263: EQUAL
32264: IFTRUE 32268
32266: GO 32298
32268: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32269: LD_ADDR_VAR 0 3
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: LD_INT 2
32279: PUSH
32280: LD_INT 3
32282: PUSH
32283: LD_INT 4
32285: PUSH
32286: LD_INT 5
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: ST_TO_ADDR
32296: GO 33263
32298: LD_INT 11
32300: DOUBLE
32301: EQUAL
32302: IFTRUE 32306
32304: GO 32336
32306: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32307: LD_ADDR_VAR 0 3
32311: PUSH
32312: LD_INT 1
32314: PUSH
32315: LD_INT 2
32317: PUSH
32318: LD_INT 3
32320: PUSH
32321: LD_INT 4
32323: PUSH
32324: LD_INT 5
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: ST_TO_ADDR
32334: GO 33263
32336: LD_INT 4
32338: DOUBLE
32339: EQUAL
32340: IFTRUE 32344
32342: GO 32370
32344: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32345: LD_ADDR_VAR 0 3
32349: PUSH
32350: LD_INT 2
32352: PUSH
32353: LD_INT 3
32355: PUSH
32356: LD_INT 4
32358: PUSH
32359: LD_INT 5
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: ST_TO_ADDR
32368: GO 33263
32370: LD_INT 5
32372: DOUBLE
32373: EQUAL
32374: IFTRUE 32378
32376: GO 32404
32378: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32379: LD_ADDR_VAR 0 3
32383: PUSH
32384: LD_INT 2
32386: PUSH
32387: LD_INT 3
32389: PUSH
32390: LD_INT 4
32392: PUSH
32393: LD_INT 5
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: ST_TO_ADDR
32402: GO 33263
32404: LD_INT 9
32406: DOUBLE
32407: EQUAL
32408: IFTRUE 32412
32410: GO 32438
32412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32413: LD_ADDR_VAR 0 3
32417: PUSH
32418: LD_INT 2
32420: PUSH
32421: LD_INT 3
32423: PUSH
32424: LD_INT 4
32426: PUSH
32427: LD_INT 5
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: ST_TO_ADDR
32436: GO 33263
32438: LD_INT 7
32440: DOUBLE
32441: EQUAL
32442: IFTRUE 32446
32444: GO 32472
32446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32447: LD_ADDR_VAR 0 3
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: LD_INT 3
32457: PUSH
32458: LD_INT 4
32460: PUSH
32461: LD_INT 5
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: ST_TO_ADDR
32470: GO 33263
32472: LD_INT 12
32474: DOUBLE
32475: EQUAL
32476: IFTRUE 32480
32478: GO 32506
32480: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32481: LD_ADDR_VAR 0 3
32485: PUSH
32486: LD_INT 2
32488: PUSH
32489: LD_INT 3
32491: PUSH
32492: LD_INT 4
32494: PUSH
32495: LD_INT 5
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: ST_TO_ADDR
32504: GO 33263
32506: LD_INT 13
32508: DOUBLE
32509: EQUAL
32510: IFTRUE 32514
32512: GO 32540
32514: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32515: LD_ADDR_VAR 0 3
32519: PUSH
32520: LD_INT 2
32522: PUSH
32523: LD_INT 3
32525: PUSH
32526: LD_INT 4
32528: PUSH
32529: LD_INT 5
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: ST_TO_ADDR
32538: GO 33263
32540: LD_INT 14
32542: DOUBLE
32543: EQUAL
32544: IFTRUE 32548
32546: GO 32566
32548: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32549: LD_ADDR_VAR 0 3
32553: PUSH
32554: LD_INT 4
32556: PUSH
32557: LD_INT 5
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: ST_TO_ADDR
32564: GO 33263
32566: LD_INT 6
32568: DOUBLE
32569: EQUAL
32570: IFTRUE 32574
32572: GO 32592
32574: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32575: LD_ADDR_VAR 0 3
32579: PUSH
32580: LD_INT 4
32582: PUSH
32583: LD_INT 5
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: ST_TO_ADDR
32590: GO 33263
32592: LD_INT 10
32594: DOUBLE
32595: EQUAL
32596: IFTRUE 32600
32598: GO 32618
32600: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32601: LD_ADDR_VAR 0 3
32605: PUSH
32606: LD_INT 4
32608: PUSH
32609: LD_INT 5
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: ST_TO_ADDR
32616: GO 33263
32618: LD_INT 22
32620: DOUBLE
32621: EQUAL
32622: IFTRUE 32626
32624: GO 32652
32626: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32627: LD_ADDR_VAR 0 3
32631: PUSH
32632: LD_INT 11
32634: PUSH
32635: LD_INT 12
32637: PUSH
32638: LD_INT 13
32640: PUSH
32641: LD_INT 14
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: ST_TO_ADDR
32650: GO 33263
32652: LD_INT 23
32654: DOUBLE
32655: EQUAL
32656: IFTRUE 32660
32658: GO 32686
32660: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32661: LD_ADDR_VAR 0 3
32665: PUSH
32666: LD_INT 11
32668: PUSH
32669: LD_INT 12
32671: PUSH
32672: LD_INT 13
32674: PUSH
32675: LD_INT 14
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: ST_TO_ADDR
32684: GO 33263
32686: LD_INT 24
32688: DOUBLE
32689: EQUAL
32690: IFTRUE 32694
32692: GO 32720
32694: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32695: LD_ADDR_VAR 0 3
32699: PUSH
32700: LD_INT 11
32702: PUSH
32703: LD_INT 12
32705: PUSH
32706: LD_INT 13
32708: PUSH
32709: LD_INT 14
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: ST_TO_ADDR
32718: GO 33263
32720: LD_INT 30
32722: DOUBLE
32723: EQUAL
32724: IFTRUE 32728
32726: GO 32754
32728: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32729: LD_ADDR_VAR 0 3
32733: PUSH
32734: LD_INT 11
32736: PUSH
32737: LD_INT 12
32739: PUSH
32740: LD_INT 13
32742: PUSH
32743: LD_INT 14
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: ST_TO_ADDR
32752: GO 33263
32754: LD_INT 25
32756: DOUBLE
32757: EQUAL
32758: IFTRUE 32762
32760: GO 32780
32762: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32763: LD_ADDR_VAR 0 3
32767: PUSH
32768: LD_INT 13
32770: PUSH
32771: LD_INT 14
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: ST_TO_ADDR
32778: GO 33263
32780: LD_INT 27
32782: DOUBLE
32783: EQUAL
32784: IFTRUE 32788
32786: GO 32806
32788: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32789: LD_ADDR_VAR 0 3
32793: PUSH
32794: LD_INT 13
32796: PUSH
32797: LD_INT 14
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: ST_TO_ADDR
32804: GO 33263
32806: LD_EXP 117
32810: DOUBLE
32811: EQUAL
32812: IFTRUE 32816
32814: GO 32842
32816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32817: LD_ADDR_VAR 0 3
32821: PUSH
32822: LD_INT 11
32824: PUSH
32825: LD_INT 12
32827: PUSH
32828: LD_INT 13
32830: PUSH
32831: LD_INT 14
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: ST_TO_ADDR
32840: GO 33263
32842: LD_INT 28
32844: DOUBLE
32845: EQUAL
32846: IFTRUE 32850
32848: GO 32868
32850: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32851: LD_ADDR_VAR 0 3
32855: PUSH
32856: LD_INT 13
32858: PUSH
32859: LD_INT 14
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: ST_TO_ADDR
32866: GO 33263
32868: LD_INT 29
32870: DOUBLE
32871: EQUAL
32872: IFTRUE 32876
32874: GO 32894
32876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32877: LD_ADDR_VAR 0 3
32881: PUSH
32882: LD_INT 13
32884: PUSH
32885: LD_INT 14
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: ST_TO_ADDR
32892: GO 33263
32894: LD_INT 31
32896: DOUBLE
32897: EQUAL
32898: IFTRUE 32902
32900: GO 32920
32902: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32903: LD_ADDR_VAR 0 3
32907: PUSH
32908: LD_INT 13
32910: PUSH
32911: LD_INT 14
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: ST_TO_ADDR
32918: GO 33263
32920: LD_INT 26
32922: DOUBLE
32923: EQUAL
32924: IFTRUE 32928
32926: GO 32946
32928: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32929: LD_ADDR_VAR 0 3
32933: PUSH
32934: LD_INT 13
32936: PUSH
32937: LD_INT 14
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: ST_TO_ADDR
32944: GO 33263
32946: LD_INT 42
32948: DOUBLE
32949: EQUAL
32950: IFTRUE 32954
32952: GO 32980
32954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32955: LD_ADDR_VAR 0 3
32959: PUSH
32960: LD_INT 21
32962: PUSH
32963: LD_INT 22
32965: PUSH
32966: LD_INT 23
32968: PUSH
32969: LD_INT 24
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: ST_TO_ADDR
32978: GO 33263
32980: LD_INT 43
32982: DOUBLE
32983: EQUAL
32984: IFTRUE 32988
32986: GO 33014
32988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32989: LD_ADDR_VAR 0 3
32993: PUSH
32994: LD_INT 21
32996: PUSH
32997: LD_INT 22
32999: PUSH
33000: LD_INT 23
33002: PUSH
33003: LD_INT 24
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: ST_TO_ADDR
33012: GO 33263
33014: LD_INT 44
33016: DOUBLE
33017: EQUAL
33018: IFTRUE 33022
33020: GO 33048
33022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33023: LD_ADDR_VAR 0 3
33027: PUSH
33028: LD_INT 21
33030: PUSH
33031: LD_INT 22
33033: PUSH
33034: LD_INT 23
33036: PUSH
33037: LD_INT 24
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: ST_TO_ADDR
33046: GO 33263
33048: LD_INT 45
33050: DOUBLE
33051: EQUAL
33052: IFTRUE 33056
33054: GO 33082
33056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33057: LD_ADDR_VAR 0 3
33061: PUSH
33062: LD_INT 21
33064: PUSH
33065: LD_INT 22
33067: PUSH
33068: LD_INT 23
33070: PUSH
33071: LD_INT 24
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: ST_TO_ADDR
33080: GO 33263
33082: LD_INT 49
33084: DOUBLE
33085: EQUAL
33086: IFTRUE 33090
33088: GO 33116
33090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33091: LD_ADDR_VAR 0 3
33095: PUSH
33096: LD_INT 21
33098: PUSH
33099: LD_INT 22
33101: PUSH
33102: LD_INT 23
33104: PUSH
33105: LD_INT 24
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: ST_TO_ADDR
33114: GO 33263
33116: LD_INT 51
33118: DOUBLE
33119: EQUAL
33120: IFTRUE 33124
33122: GO 33150
33124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33125: LD_ADDR_VAR 0 3
33129: PUSH
33130: LD_INT 21
33132: PUSH
33133: LD_INT 22
33135: PUSH
33136: LD_INT 23
33138: PUSH
33139: LD_INT 24
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: ST_TO_ADDR
33148: GO 33263
33150: LD_INT 52
33152: DOUBLE
33153: EQUAL
33154: IFTRUE 33158
33156: GO 33184
33158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33159: LD_ADDR_VAR 0 3
33163: PUSH
33164: LD_INT 21
33166: PUSH
33167: LD_INT 22
33169: PUSH
33170: LD_INT 23
33172: PUSH
33173: LD_INT 24
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: ST_TO_ADDR
33182: GO 33263
33184: LD_INT 53
33186: DOUBLE
33187: EQUAL
33188: IFTRUE 33192
33190: GO 33210
33192: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33193: LD_ADDR_VAR 0 3
33197: PUSH
33198: LD_INT 23
33200: PUSH
33201: LD_INT 24
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: ST_TO_ADDR
33208: GO 33263
33210: LD_INT 46
33212: DOUBLE
33213: EQUAL
33214: IFTRUE 33218
33216: GO 33236
33218: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33219: LD_ADDR_VAR 0 3
33223: PUSH
33224: LD_INT 23
33226: PUSH
33227: LD_INT 24
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: ST_TO_ADDR
33234: GO 33263
33236: LD_INT 47
33238: DOUBLE
33239: EQUAL
33240: IFTRUE 33244
33242: GO 33262
33244: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33245: LD_ADDR_VAR 0 3
33249: PUSH
33250: LD_INT 23
33252: PUSH
33253: LD_INT 24
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: ST_TO_ADDR
33260: GO 33263
33262: POP
// result := ( chassis in result ) ;
33263: LD_ADDR_VAR 0 3
33267: PUSH
33268: LD_VAR 0 1
33272: PUSH
33273: LD_VAR 0 3
33277: IN
33278: ST_TO_ADDR
// end ;
33279: LD_VAR 0 3
33283: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33284: LD_INT 0
33286: PPUSH
33287: PPUSH
33288: PPUSH
33289: PPUSH
33290: PPUSH
33291: PPUSH
33292: PPUSH
// result := array ;
33293: LD_ADDR_VAR 0 5
33297: PUSH
33298: LD_VAR 0 1
33302: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33303: LD_VAR 0 1
33307: NOT
33308: PUSH
33309: LD_VAR 0 2
33313: NOT
33314: OR
33315: PUSH
33316: LD_VAR 0 3
33320: NOT
33321: OR
33322: PUSH
33323: LD_VAR 0 2
33327: PUSH
33328: LD_VAR 0 1
33332: GREATER
33333: OR
33334: PUSH
33335: LD_VAR 0 3
33339: PUSH
33340: LD_VAR 0 1
33344: GREATER
33345: OR
33346: IFFALSE 33350
// exit ;
33348: GO 33646
// if direction then
33350: LD_VAR 0 4
33354: IFFALSE 33418
// begin d := 1 ;
33356: LD_ADDR_VAR 0 9
33360: PUSH
33361: LD_INT 1
33363: ST_TO_ADDR
// if i_from > i_to then
33364: LD_VAR 0 2
33368: PUSH
33369: LD_VAR 0 3
33373: GREATER
33374: IFFALSE 33400
// length := ( array - i_from ) + i_to else
33376: LD_ADDR_VAR 0 11
33380: PUSH
33381: LD_VAR 0 1
33385: PUSH
33386: LD_VAR 0 2
33390: MINUS
33391: PUSH
33392: LD_VAR 0 3
33396: PLUS
33397: ST_TO_ADDR
33398: GO 33416
// length := i_to - i_from ;
33400: LD_ADDR_VAR 0 11
33404: PUSH
33405: LD_VAR 0 3
33409: PUSH
33410: LD_VAR 0 2
33414: MINUS
33415: ST_TO_ADDR
// end else
33416: GO 33479
// begin d := - 1 ;
33418: LD_ADDR_VAR 0 9
33422: PUSH
33423: LD_INT 1
33425: NEG
33426: ST_TO_ADDR
// if i_from > i_to then
33427: LD_VAR 0 2
33431: PUSH
33432: LD_VAR 0 3
33436: GREATER
33437: IFFALSE 33457
// length := i_from - i_to else
33439: LD_ADDR_VAR 0 11
33443: PUSH
33444: LD_VAR 0 2
33448: PUSH
33449: LD_VAR 0 3
33453: MINUS
33454: ST_TO_ADDR
33455: GO 33479
// length := ( array - i_to ) + i_from ;
33457: LD_ADDR_VAR 0 11
33461: PUSH
33462: LD_VAR 0 1
33466: PUSH
33467: LD_VAR 0 3
33471: MINUS
33472: PUSH
33473: LD_VAR 0 2
33477: PLUS
33478: ST_TO_ADDR
// end ; if not length then
33479: LD_VAR 0 11
33483: NOT
33484: IFFALSE 33488
// exit ;
33486: GO 33646
// tmp := array ;
33488: LD_ADDR_VAR 0 10
33492: PUSH
33493: LD_VAR 0 1
33497: ST_TO_ADDR
// for i = 1 to length do
33498: LD_ADDR_VAR 0 6
33502: PUSH
33503: DOUBLE
33504: LD_INT 1
33506: DEC
33507: ST_TO_ADDR
33508: LD_VAR 0 11
33512: PUSH
33513: FOR_TO
33514: IFFALSE 33634
// begin for j = 1 to array do
33516: LD_ADDR_VAR 0 7
33520: PUSH
33521: DOUBLE
33522: LD_INT 1
33524: DEC
33525: ST_TO_ADDR
33526: LD_VAR 0 1
33530: PUSH
33531: FOR_TO
33532: IFFALSE 33620
// begin k := j + d ;
33534: LD_ADDR_VAR 0 8
33538: PUSH
33539: LD_VAR 0 7
33543: PUSH
33544: LD_VAR 0 9
33548: PLUS
33549: ST_TO_ADDR
// if k > array then
33550: LD_VAR 0 8
33554: PUSH
33555: LD_VAR 0 1
33559: GREATER
33560: IFFALSE 33570
// k := 1 ;
33562: LD_ADDR_VAR 0 8
33566: PUSH
33567: LD_INT 1
33569: ST_TO_ADDR
// if not k then
33570: LD_VAR 0 8
33574: NOT
33575: IFFALSE 33587
// k := array ;
33577: LD_ADDR_VAR 0 8
33581: PUSH
33582: LD_VAR 0 1
33586: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33587: LD_ADDR_VAR 0 10
33591: PUSH
33592: LD_VAR 0 10
33596: PPUSH
33597: LD_VAR 0 8
33601: PPUSH
33602: LD_VAR 0 1
33606: PUSH
33607: LD_VAR 0 7
33611: ARRAY
33612: PPUSH
33613: CALL_OW 1
33617: ST_TO_ADDR
// end ;
33618: GO 33531
33620: POP
33621: POP
// array := tmp ;
33622: LD_ADDR_VAR 0 1
33626: PUSH
33627: LD_VAR 0 10
33631: ST_TO_ADDR
// end ;
33632: GO 33513
33634: POP
33635: POP
// result := array ;
33636: LD_ADDR_VAR 0 5
33640: PUSH
33641: LD_VAR 0 1
33645: ST_TO_ADDR
// end ;
33646: LD_VAR 0 5
33650: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33651: LD_INT 0
33653: PPUSH
33654: PPUSH
// result := 0 ;
33655: LD_ADDR_VAR 0 3
33659: PUSH
33660: LD_INT 0
33662: ST_TO_ADDR
// if not array or not value in array then
33663: LD_VAR 0 1
33667: NOT
33668: PUSH
33669: LD_VAR 0 2
33673: PUSH
33674: LD_VAR 0 1
33678: IN
33679: NOT
33680: OR
33681: IFFALSE 33685
// exit ;
33683: GO 33739
// for i = 1 to array do
33685: LD_ADDR_VAR 0 4
33689: PUSH
33690: DOUBLE
33691: LD_INT 1
33693: DEC
33694: ST_TO_ADDR
33695: LD_VAR 0 1
33699: PUSH
33700: FOR_TO
33701: IFFALSE 33737
// if value = array [ i ] then
33703: LD_VAR 0 2
33707: PUSH
33708: LD_VAR 0 1
33712: PUSH
33713: LD_VAR 0 4
33717: ARRAY
33718: EQUAL
33719: IFFALSE 33735
// begin result := i ;
33721: LD_ADDR_VAR 0 3
33725: PUSH
33726: LD_VAR 0 4
33730: ST_TO_ADDR
// exit ;
33731: POP
33732: POP
33733: GO 33739
// end ;
33735: GO 33700
33737: POP
33738: POP
// end ;
33739: LD_VAR 0 3
33743: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33744: LD_INT 0
33746: PPUSH
// vc_chassis := chassis ;
33747: LD_ADDR_OWVAR 37
33751: PUSH
33752: LD_VAR 0 1
33756: ST_TO_ADDR
// vc_engine := engine ;
33757: LD_ADDR_OWVAR 39
33761: PUSH
33762: LD_VAR 0 2
33766: ST_TO_ADDR
// vc_control := control ;
33767: LD_ADDR_OWVAR 38
33771: PUSH
33772: LD_VAR 0 3
33776: ST_TO_ADDR
// vc_weapon := weapon ;
33777: LD_ADDR_OWVAR 40
33781: PUSH
33782: LD_VAR 0 4
33786: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33787: LD_ADDR_OWVAR 41
33791: PUSH
33792: LD_VAR 0 5
33796: ST_TO_ADDR
// end ;
33797: LD_VAR 0 6
33801: RET
// export function WantPlant ( unit ) ; var task ; begin
33802: LD_INT 0
33804: PPUSH
33805: PPUSH
// result := false ;
33806: LD_ADDR_VAR 0 2
33810: PUSH
33811: LD_INT 0
33813: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33814: LD_ADDR_VAR 0 3
33818: PUSH
33819: LD_VAR 0 1
33823: PPUSH
33824: CALL_OW 437
33828: ST_TO_ADDR
// if task then
33829: LD_VAR 0 3
33833: IFFALSE 33861
// if task [ 1 ] [ 1 ] = p then
33835: LD_VAR 0 3
33839: PUSH
33840: LD_INT 1
33842: ARRAY
33843: PUSH
33844: LD_INT 1
33846: ARRAY
33847: PUSH
33848: LD_STRING p
33850: EQUAL
33851: IFFALSE 33861
// result := true ;
33853: LD_ADDR_VAR 0 2
33857: PUSH
33858: LD_INT 1
33860: ST_TO_ADDR
// end ;
33861: LD_VAR 0 2
33865: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33866: LD_INT 0
33868: PPUSH
33869: PPUSH
33870: PPUSH
33871: PPUSH
// if pos < 1 then
33872: LD_VAR 0 2
33876: PUSH
33877: LD_INT 1
33879: LESS
33880: IFFALSE 33884
// exit ;
33882: GO 34187
// if pos = 1 then
33884: LD_VAR 0 2
33888: PUSH
33889: LD_INT 1
33891: EQUAL
33892: IFFALSE 33925
// result := Replace ( arr , pos [ 1 ] , value ) else
33894: LD_ADDR_VAR 0 4
33898: PUSH
33899: LD_VAR 0 1
33903: PPUSH
33904: LD_VAR 0 2
33908: PUSH
33909: LD_INT 1
33911: ARRAY
33912: PPUSH
33913: LD_VAR 0 3
33917: PPUSH
33918: CALL_OW 1
33922: ST_TO_ADDR
33923: GO 34187
// begin tmp := arr ;
33925: LD_ADDR_VAR 0 6
33929: PUSH
33930: LD_VAR 0 1
33934: ST_TO_ADDR
// s_arr := [ tmp ] ;
33935: LD_ADDR_VAR 0 7
33939: PUSH
33940: LD_VAR 0 6
33944: PUSH
33945: EMPTY
33946: LIST
33947: ST_TO_ADDR
// for i = 1 to pos - 1 do
33948: LD_ADDR_VAR 0 5
33952: PUSH
33953: DOUBLE
33954: LD_INT 1
33956: DEC
33957: ST_TO_ADDR
33958: LD_VAR 0 2
33962: PUSH
33963: LD_INT 1
33965: MINUS
33966: PUSH
33967: FOR_TO
33968: IFFALSE 34013
// begin tmp := tmp [ pos [ i ] ] ;
33970: LD_ADDR_VAR 0 6
33974: PUSH
33975: LD_VAR 0 6
33979: PUSH
33980: LD_VAR 0 2
33984: PUSH
33985: LD_VAR 0 5
33989: ARRAY
33990: ARRAY
33991: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33992: LD_ADDR_VAR 0 7
33996: PUSH
33997: LD_VAR 0 7
34001: PUSH
34002: LD_VAR 0 6
34006: PUSH
34007: EMPTY
34008: LIST
34009: ADD
34010: ST_TO_ADDR
// end ;
34011: GO 33967
34013: POP
34014: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34015: LD_ADDR_VAR 0 6
34019: PUSH
34020: LD_VAR 0 6
34024: PPUSH
34025: LD_VAR 0 2
34029: PUSH
34030: LD_VAR 0 2
34034: ARRAY
34035: PPUSH
34036: LD_VAR 0 3
34040: PPUSH
34041: CALL_OW 1
34045: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34046: LD_ADDR_VAR 0 7
34050: PUSH
34051: LD_VAR 0 7
34055: PPUSH
34056: LD_VAR 0 7
34060: PPUSH
34061: LD_VAR 0 6
34065: PPUSH
34066: CALL_OW 1
34070: ST_TO_ADDR
// for i = s_arr downto 2 do
34071: LD_ADDR_VAR 0 5
34075: PUSH
34076: DOUBLE
34077: LD_VAR 0 7
34081: INC
34082: ST_TO_ADDR
34083: LD_INT 2
34085: PUSH
34086: FOR_DOWNTO
34087: IFFALSE 34171
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34089: LD_ADDR_VAR 0 6
34093: PUSH
34094: LD_VAR 0 7
34098: PUSH
34099: LD_VAR 0 5
34103: PUSH
34104: LD_INT 1
34106: MINUS
34107: ARRAY
34108: PPUSH
34109: LD_VAR 0 2
34113: PUSH
34114: LD_VAR 0 5
34118: PUSH
34119: LD_INT 1
34121: MINUS
34122: ARRAY
34123: PPUSH
34124: LD_VAR 0 7
34128: PUSH
34129: LD_VAR 0 5
34133: ARRAY
34134: PPUSH
34135: CALL_OW 1
34139: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34140: LD_ADDR_VAR 0 7
34144: PUSH
34145: LD_VAR 0 7
34149: PPUSH
34150: LD_VAR 0 5
34154: PUSH
34155: LD_INT 1
34157: MINUS
34158: PPUSH
34159: LD_VAR 0 6
34163: PPUSH
34164: CALL_OW 1
34168: ST_TO_ADDR
// end ;
34169: GO 34086
34171: POP
34172: POP
// result := s_arr [ 1 ] ;
34173: LD_ADDR_VAR 0 4
34177: PUSH
34178: LD_VAR 0 7
34182: PUSH
34183: LD_INT 1
34185: ARRAY
34186: ST_TO_ADDR
// end ; end ;
34187: LD_VAR 0 4
34191: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34192: LD_INT 0
34194: PPUSH
34195: PPUSH
// if not list then
34196: LD_VAR 0 1
34200: NOT
34201: IFFALSE 34205
// exit ;
34203: GO 34296
// i := list [ pos1 ] ;
34205: LD_ADDR_VAR 0 5
34209: PUSH
34210: LD_VAR 0 1
34214: PUSH
34215: LD_VAR 0 2
34219: ARRAY
34220: ST_TO_ADDR
// if not i then
34221: LD_VAR 0 5
34225: NOT
34226: IFFALSE 34230
// exit ;
34228: GO 34296
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34230: LD_ADDR_VAR 0 1
34234: PUSH
34235: LD_VAR 0 1
34239: PPUSH
34240: LD_VAR 0 2
34244: PPUSH
34245: LD_VAR 0 1
34249: PUSH
34250: LD_VAR 0 3
34254: ARRAY
34255: PPUSH
34256: CALL_OW 1
34260: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34261: LD_ADDR_VAR 0 1
34265: PUSH
34266: LD_VAR 0 1
34270: PPUSH
34271: LD_VAR 0 3
34275: PPUSH
34276: LD_VAR 0 5
34280: PPUSH
34281: CALL_OW 1
34285: ST_TO_ADDR
// result := list ;
34286: LD_ADDR_VAR 0 4
34290: PUSH
34291: LD_VAR 0 1
34295: ST_TO_ADDR
// end ;
34296: LD_VAR 0 4
34300: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34301: LD_INT 0
34303: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34304: LD_ADDR_VAR 0 5
34308: PUSH
34309: LD_VAR 0 1
34313: PPUSH
34314: CALL_OW 250
34318: PPUSH
34319: LD_VAR 0 1
34323: PPUSH
34324: CALL_OW 251
34328: PPUSH
34329: LD_VAR 0 2
34333: PPUSH
34334: LD_VAR 0 3
34338: PPUSH
34339: LD_VAR 0 4
34343: PPUSH
34344: CALL 34354 0 5
34348: ST_TO_ADDR
// end ;
34349: LD_VAR 0 5
34353: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34354: LD_INT 0
34356: PPUSH
34357: PPUSH
34358: PPUSH
34359: PPUSH
// if not list then
34360: LD_VAR 0 3
34364: NOT
34365: IFFALSE 34369
// exit ;
34367: GO 34757
// result := [ ] ;
34369: LD_ADDR_VAR 0 6
34373: PUSH
34374: EMPTY
34375: ST_TO_ADDR
// for i in list do
34376: LD_ADDR_VAR 0 7
34380: PUSH
34381: LD_VAR 0 3
34385: PUSH
34386: FOR_IN
34387: IFFALSE 34589
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34389: LD_ADDR_VAR 0 9
34393: PUSH
34394: LD_VAR 0 7
34398: PPUSH
34399: LD_VAR 0 1
34403: PPUSH
34404: LD_VAR 0 2
34408: PPUSH
34409: CALL_OW 297
34413: ST_TO_ADDR
// if not result then
34414: LD_VAR 0 6
34418: NOT
34419: IFFALSE 34445
// result := [ [ i , tmp ] ] else
34421: LD_ADDR_VAR 0 6
34425: PUSH
34426: LD_VAR 0 7
34430: PUSH
34431: LD_VAR 0 9
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: EMPTY
34441: LIST
34442: ST_TO_ADDR
34443: GO 34587
// begin if result [ result ] [ 2 ] < tmp then
34445: LD_VAR 0 6
34449: PUSH
34450: LD_VAR 0 6
34454: ARRAY
34455: PUSH
34456: LD_INT 2
34458: ARRAY
34459: PUSH
34460: LD_VAR 0 9
34464: LESS
34465: IFFALSE 34507
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34467: LD_ADDR_VAR 0 6
34471: PUSH
34472: LD_VAR 0 6
34476: PPUSH
34477: LD_VAR 0 6
34481: PUSH
34482: LD_INT 1
34484: PLUS
34485: PPUSH
34486: LD_VAR 0 7
34490: PUSH
34491: LD_VAR 0 9
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PPUSH
34500: CALL_OW 2
34504: ST_TO_ADDR
34505: GO 34587
// for j = 1 to result do
34507: LD_ADDR_VAR 0 8
34511: PUSH
34512: DOUBLE
34513: LD_INT 1
34515: DEC
34516: ST_TO_ADDR
34517: LD_VAR 0 6
34521: PUSH
34522: FOR_TO
34523: IFFALSE 34585
// begin if tmp < result [ j ] [ 2 ] then
34525: LD_VAR 0 9
34529: PUSH
34530: LD_VAR 0 6
34534: PUSH
34535: LD_VAR 0 8
34539: ARRAY
34540: PUSH
34541: LD_INT 2
34543: ARRAY
34544: LESS
34545: IFFALSE 34583
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34547: LD_ADDR_VAR 0 6
34551: PUSH
34552: LD_VAR 0 6
34556: PPUSH
34557: LD_VAR 0 8
34561: PPUSH
34562: LD_VAR 0 7
34566: PUSH
34567: LD_VAR 0 9
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PPUSH
34576: CALL_OW 2
34580: ST_TO_ADDR
// break ;
34581: GO 34585
// end ; end ;
34583: GO 34522
34585: POP
34586: POP
// end ; end ;
34587: GO 34386
34589: POP
34590: POP
// if result and not asc then
34591: LD_VAR 0 6
34595: PUSH
34596: LD_VAR 0 4
34600: NOT
34601: AND
34602: IFFALSE 34677
// begin tmp := result ;
34604: LD_ADDR_VAR 0 9
34608: PUSH
34609: LD_VAR 0 6
34613: ST_TO_ADDR
// for i = tmp downto 1 do
34614: LD_ADDR_VAR 0 7
34618: PUSH
34619: DOUBLE
34620: LD_VAR 0 9
34624: INC
34625: ST_TO_ADDR
34626: LD_INT 1
34628: PUSH
34629: FOR_DOWNTO
34630: IFFALSE 34675
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34632: LD_ADDR_VAR 0 6
34636: PUSH
34637: LD_VAR 0 6
34641: PPUSH
34642: LD_VAR 0 9
34646: PUSH
34647: LD_VAR 0 7
34651: MINUS
34652: PUSH
34653: LD_INT 1
34655: PLUS
34656: PPUSH
34657: LD_VAR 0 9
34661: PUSH
34662: LD_VAR 0 7
34666: ARRAY
34667: PPUSH
34668: CALL_OW 1
34672: ST_TO_ADDR
34673: GO 34629
34675: POP
34676: POP
// end ; tmp := [ ] ;
34677: LD_ADDR_VAR 0 9
34681: PUSH
34682: EMPTY
34683: ST_TO_ADDR
// if mode then
34684: LD_VAR 0 5
34688: IFFALSE 34757
// begin for i = 1 to result do
34690: LD_ADDR_VAR 0 7
34694: PUSH
34695: DOUBLE
34696: LD_INT 1
34698: DEC
34699: ST_TO_ADDR
34700: LD_VAR 0 6
34704: PUSH
34705: FOR_TO
34706: IFFALSE 34745
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34708: LD_ADDR_VAR 0 9
34712: PUSH
34713: LD_VAR 0 9
34717: PPUSH
34718: LD_VAR 0 7
34722: PPUSH
34723: LD_VAR 0 6
34727: PUSH
34728: LD_VAR 0 7
34732: ARRAY
34733: PUSH
34734: LD_INT 1
34736: ARRAY
34737: PPUSH
34738: CALL_OW 1
34742: ST_TO_ADDR
34743: GO 34705
34745: POP
34746: POP
// result := tmp ;
34747: LD_ADDR_VAR 0 6
34751: PUSH
34752: LD_VAR 0 9
34756: ST_TO_ADDR
// end ; end ;
34757: LD_VAR 0 6
34761: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34762: LD_INT 0
34764: PPUSH
34765: PPUSH
34766: PPUSH
34767: PPUSH
34768: PPUSH
34769: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34770: LD_ADDR_VAR 0 5
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: LD_INT 0
34783: PUSH
34784: EMPTY
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: ST_TO_ADDR
// if not x or not y then
34792: LD_VAR 0 2
34796: NOT
34797: PUSH
34798: LD_VAR 0 3
34802: NOT
34803: OR
34804: IFFALSE 34808
// exit ;
34806: GO 36460
// if not range then
34808: LD_VAR 0 4
34812: NOT
34813: IFFALSE 34823
// range := 10 ;
34815: LD_ADDR_VAR 0 4
34819: PUSH
34820: LD_INT 10
34822: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34823: LD_ADDR_VAR 0 8
34827: PUSH
34828: LD_INT 81
34830: PUSH
34831: LD_VAR 0 1
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 92
34842: PUSH
34843: LD_VAR 0 2
34847: PUSH
34848: LD_VAR 0 3
34852: PUSH
34853: LD_VAR 0 4
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 3
34866: PUSH
34867: LD_INT 21
34869: PUSH
34870: LD_INT 3
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: LIST
34885: PPUSH
34886: CALL_OW 69
34890: ST_TO_ADDR
// if not tmp then
34891: LD_VAR 0 8
34895: NOT
34896: IFFALSE 34900
// exit ;
34898: GO 36460
// for i in tmp do
34900: LD_ADDR_VAR 0 6
34904: PUSH
34905: LD_VAR 0 8
34909: PUSH
34910: FOR_IN
34911: IFFALSE 36435
// begin points := [ 0 , 0 , 0 ] ;
34913: LD_ADDR_VAR 0 9
34917: PUSH
34918: LD_INT 0
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: LIST
34931: ST_TO_ADDR
// bpoints := 1 ;
34932: LD_ADDR_VAR 0 10
34936: PUSH
34937: LD_INT 1
34939: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34940: LD_VAR 0 6
34944: PPUSH
34945: CALL_OW 247
34949: PUSH
34950: LD_INT 1
34952: DOUBLE
34953: EQUAL
34954: IFTRUE 34958
34956: GO 35536
34958: POP
// begin if GetClass ( i ) = 1 then
34959: LD_VAR 0 6
34963: PPUSH
34964: CALL_OW 257
34968: PUSH
34969: LD_INT 1
34971: EQUAL
34972: IFFALSE 34993
// points := [ 10 , 5 , 3 ] ;
34974: LD_ADDR_VAR 0 9
34978: PUSH
34979: LD_INT 10
34981: PUSH
34982: LD_INT 5
34984: PUSH
34985: LD_INT 3
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: LIST
34992: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34993: LD_VAR 0 6
34997: PPUSH
34998: CALL_OW 257
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: LD_INT 3
35008: PUSH
35009: LD_INT 4
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: LIST
35016: IN
35017: IFFALSE 35038
// points := [ 3 , 2 , 1 ] ;
35019: LD_ADDR_VAR 0 9
35023: PUSH
35024: LD_INT 3
35026: PUSH
35027: LD_INT 2
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: LIST
35037: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35038: LD_VAR 0 6
35042: PPUSH
35043: CALL_OW 257
35047: PUSH
35048: LD_INT 5
35050: EQUAL
35051: IFFALSE 35072
// points := [ 130 , 5 , 2 ] ;
35053: LD_ADDR_VAR 0 9
35057: PUSH
35058: LD_INT 130
35060: PUSH
35061: LD_INT 5
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: LIST
35071: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35072: LD_VAR 0 6
35076: PPUSH
35077: CALL_OW 257
35081: PUSH
35082: LD_INT 8
35084: EQUAL
35085: IFFALSE 35106
// points := [ 35 , 35 , 30 ] ;
35087: LD_ADDR_VAR 0 9
35091: PUSH
35092: LD_INT 35
35094: PUSH
35095: LD_INT 35
35097: PUSH
35098: LD_INT 30
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: LIST
35105: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35106: LD_VAR 0 6
35110: PPUSH
35111: CALL_OW 257
35115: PUSH
35116: LD_INT 9
35118: EQUAL
35119: IFFALSE 35140
// points := [ 20 , 55 , 40 ] ;
35121: LD_ADDR_VAR 0 9
35125: PUSH
35126: LD_INT 20
35128: PUSH
35129: LD_INT 55
35131: PUSH
35132: LD_INT 40
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: LIST
35139: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35140: LD_VAR 0 6
35144: PPUSH
35145: CALL_OW 257
35149: PUSH
35150: LD_INT 12
35152: PUSH
35153: LD_INT 16
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: IN
35160: IFFALSE 35181
// points := [ 5 , 3 , 2 ] ;
35162: LD_ADDR_VAR 0 9
35166: PUSH
35167: LD_INT 5
35169: PUSH
35170: LD_INT 3
35172: PUSH
35173: LD_INT 2
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: LIST
35180: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35181: LD_VAR 0 6
35185: PPUSH
35186: CALL_OW 257
35190: PUSH
35191: LD_INT 17
35193: EQUAL
35194: IFFALSE 35215
// points := [ 100 , 50 , 75 ] ;
35196: LD_ADDR_VAR 0 9
35200: PUSH
35201: LD_INT 100
35203: PUSH
35204: LD_INT 50
35206: PUSH
35207: LD_INT 75
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: LIST
35214: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35215: LD_VAR 0 6
35219: PPUSH
35220: CALL_OW 257
35224: PUSH
35225: LD_INT 15
35227: EQUAL
35228: IFFALSE 35249
// points := [ 10 , 5 , 3 ] ;
35230: LD_ADDR_VAR 0 9
35234: PUSH
35235: LD_INT 10
35237: PUSH
35238: LD_INT 5
35240: PUSH
35241: LD_INT 3
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: LIST
35248: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35249: LD_VAR 0 6
35253: PPUSH
35254: CALL_OW 257
35258: PUSH
35259: LD_INT 14
35261: EQUAL
35262: IFFALSE 35283
// points := [ 10 , 0 , 0 ] ;
35264: LD_ADDR_VAR 0 9
35268: PUSH
35269: LD_INT 10
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: LIST
35282: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35283: LD_VAR 0 6
35287: PPUSH
35288: CALL_OW 257
35292: PUSH
35293: LD_INT 11
35295: EQUAL
35296: IFFALSE 35317
// points := [ 30 , 10 , 5 ] ;
35298: LD_ADDR_VAR 0 9
35302: PUSH
35303: LD_INT 30
35305: PUSH
35306: LD_INT 10
35308: PUSH
35309: LD_INT 5
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: LIST
35316: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35317: LD_VAR 0 1
35321: PPUSH
35322: LD_INT 5
35324: PPUSH
35325: CALL_OW 321
35329: PUSH
35330: LD_INT 2
35332: EQUAL
35333: IFFALSE 35350
// bpoints := bpoints * 1.8 ;
35335: LD_ADDR_VAR 0 10
35339: PUSH
35340: LD_VAR 0 10
35344: PUSH
35345: LD_REAL  1.80000000000000E+0000
35348: MUL
35349: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35350: LD_VAR 0 6
35354: PPUSH
35355: CALL_OW 257
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: LD_INT 2
35365: PUSH
35366: LD_INT 3
35368: PUSH
35369: LD_INT 4
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: IN
35378: PUSH
35379: LD_VAR 0 1
35383: PPUSH
35384: LD_INT 51
35386: PPUSH
35387: CALL_OW 321
35391: PUSH
35392: LD_INT 2
35394: EQUAL
35395: AND
35396: IFFALSE 35413
// bpoints := bpoints * 1.2 ;
35398: LD_ADDR_VAR 0 10
35402: PUSH
35403: LD_VAR 0 10
35407: PUSH
35408: LD_REAL  1.20000000000000E+0000
35411: MUL
35412: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35413: LD_VAR 0 6
35417: PPUSH
35418: CALL_OW 257
35422: PUSH
35423: LD_INT 5
35425: PUSH
35426: LD_INT 7
35428: PUSH
35429: LD_INT 9
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: LIST
35436: IN
35437: PUSH
35438: LD_VAR 0 1
35442: PPUSH
35443: LD_INT 52
35445: PPUSH
35446: CALL_OW 321
35450: PUSH
35451: LD_INT 2
35453: EQUAL
35454: AND
35455: IFFALSE 35472
// bpoints := bpoints * 1.5 ;
35457: LD_ADDR_VAR 0 10
35461: PUSH
35462: LD_VAR 0 10
35466: PUSH
35467: LD_REAL  1.50000000000000E+0000
35470: MUL
35471: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35472: LD_VAR 0 1
35476: PPUSH
35477: LD_INT 66
35479: PPUSH
35480: CALL_OW 321
35484: PUSH
35485: LD_INT 2
35487: EQUAL
35488: IFFALSE 35505
// bpoints := bpoints * 1.1 ;
35490: LD_ADDR_VAR 0 10
35494: PUSH
35495: LD_VAR 0 10
35499: PUSH
35500: LD_REAL  1.10000000000000E+0000
35503: MUL
35504: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35505: LD_ADDR_VAR 0 10
35509: PUSH
35510: LD_VAR 0 10
35514: PUSH
35515: LD_VAR 0 6
35519: PPUSH
35520: LD_INT 1
35522: PPUSH
35523: CALL_OW 259
35527: PUSH
35528: LD_REAL  1.15000000000000E+0000
35531: MUL
35532: MUL
35533: ST_TO_ADDR
// end ; unit_vehicle :
35534: GO 36364
35536: LD_INT 2
35538: DOUBLE
35539: EQUAL
35540: IFTRUE 35544
35542: GO 36352
35544: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35545: LD_VAR 0 6
35549: PPUSH
35550: CALL_OW 264
35554: PUSH
35555: LD_INT 2
35557: PUSH
35558: LD_INT 42
35560: PUSH
35561: LD_INT 24
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: LIST
35568: IN
35569: IFFALSE 35590
// points := [ 25 , 5 , 3 ] ;
35571: LD_ADDR_VAR 0 9
35575: PUSH
35576: LD_INT 25
35578: PUSH
35579: LD_INT 5
35581: PUSH
35582: LD_INT 3
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: LIST
35589: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35590: LD_VAR 0 6
35594: PPUSH
35595: CALL_OW 264
35599: PUSH
35600: LD_INT 4
35602: PUSH
35603: LD_INT 43
35605: PUSH
35606: LD_INT 25
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: LIST
35613: IN
35614: IFFALSE 35635
// points := [ 40 , 15 , 5 ] ;
35616: LD_ADDR_VAR 0 9
35620: PUSH
35621: LD_INT 40
35623: PUSH
35624: LD_INT 15
35626: PUSH
35627: LD_INT 5
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: LIST
35634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35635: LD_VAR 0 6
35639: PPUSH
35640: CALL_OW 264
35644: PUSH
35645: LD_INT 3
35647: PUSH
35648: LD_INT 23
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: IN
35655: IFFALSE 35676
// points := [ 7 , 25 , 8 ] ;
35657: LD_ADDR_VAR 0 9
35661: PUSH
35662: LD_INT 7
35664: PUSH
35665: LD_INT 25
35667: PUSH
35668: LD_INT 8
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: LIST
35675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35676: LD_VAR 0 6
35680: PPUSH
35681: CALL_OW 264
35685: PUSH
35686: LD_INT 5
35688: PUSH
35689: LD_INT 27
35691: PUSH
35692: LD_INT 44
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: LIST
35699: IN
35700: IFFALSE 35721
// points := [ 14 , 50 , 16 ] ;
35702: LD_ADDR_VAR 0 9
35706: PUSH
35707: LD_INT 14
35709: PUSH
35710: LD_INT 50
35712: PUSH
35713: LD_INT 16
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: LIST
35720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35721: LD_VAR 0 6
35725: PPUSH
35726: CALL_OW 264
35730: PUSH
35731: LD_INT 6
35733: PUSH
35734: LD_INT 46
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: IN
35741: IFFALSE 35762
// points := [ 32 , 120 , 70 ] ;
35743: LD_ADDR_VAR 0 9
35747: PUSH
35748: LD_INT 32
35750: PUSH
35751: LD_INT 120
35753: PUSH
35754: LD_INT 70
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35762: LD_VAR 0 6
35766: PPUSH
35767: CALL_OW 264
35771: PUSH
35772: LD_INT 7
35774: PUSH
35775: LD_INT 28
35777: PUSH
35778: LD_INT 45
35780: PUSH
35781: LD_EXP 117
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: IN
35792: IFFALSE 35813
// points := [ 35 , 20 , 45 ] ;
35794: LD_ADDR_VAR 0 9
35798: PUSH
35799: LD_INT 35
35801: PUSH
35802: LD_INT 20
35804: PUSH
35805: LD_INT 45
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35813: LD_VAR 0 6
35817: PPUSH
35818: CALL_OW 264
35822: PUSH
35823: LD_INT 47
35825: PUSH
35826: EMPTY
35827: LIST
35828: IN
35829: IFFALSE 35850
// points := [ 67 , 45 , 75 ] ;
35831: LD_ADDR_VAR 0 9
35835: PUSH
35836: LD_INT 67
35838: PUSH
35839: LD_INT 45
35841: PUSH
35842: LD_INT 75
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: LIST
35849: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35850: LD_VAR 0 6
35854: PPUSH
35855: CALL_OW 264
35859: PUSH
35860: LD_INT 26
35862: PUSH
35863: EMPTY
35864: LIST
35865: IN
35866: IFFALSE 35887
// points := [ 120 , 30 , 80 ] ;
35868: LD_ADDR_VAR 0 9
35872: PUSH
35873: LD_INT 120
35875: PUSH
35876: LD_INT 30
35878: PUSH
35879: LD_INT 80
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35887: LD_VAR 0 6
35891: PPUSH
35892: CALL_OW 264
35896: PUSH
35897: LD_INT 22
35899: PUSH
35900: EMPTY
35901: LIST
35902: IN
35903: IFFALSE 35924
// points := [ 40 , 1 , 1 ] ;
35905: LD_ADDR_VAR 0 9
35909: PUSH
35910: LD_INT 40
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: LIST
35923: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35924: LD_VAR 0 6
35928: PPUSH
35929: CALL_OW 264
35933: PUSH
35934: LD_INT 29
35936: PUSH
35937: EMPTY
35938: LIST
35939: IN
35940: IFFALSE 35961
// points := [ 70 , 200 , 400 ] ;
35942: LD_ADDR_VAR 0 9
35946: PUSH
35947: LD_INT 70
35949: PUSH
35950: LD_INT 200
35952: PUSH
35953: LD_INT 400
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: LIST
35960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35961: LD_VAR 0 6
35965: PPUSH
35966: CALL_OW 264
35970: PUSH
35971: LD_INT 14
35973: PUSH
35974: LD_INT 53
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: IN
35981: IFFALSE 36002
// points := [ 40 , 10 , 20 ] ;
35983: LD_ADDR_VAR 0 9
35987: PUSH
35988: LD_INT 40
35990: PUSH
35991: LD_INT 10
35993: PUSH
35994: LD_INT 20
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: LIST
36001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36002: LD_VAR 0 6
36006: PPUSH
36007: CALL_OW 264
36011: PUSH
36012: LD_INT 9
36014: PUSH
36015: EMPTY
36016: LIST
36017: IN
36018: IFFALSE 36039
// points := [ 5 , 70 , 20 ] ;
36020: LD_ADDR_VAR 0 9
36024: PUSH
36025: LD_INT 5
36027: PUSH
36028: LD_INT 70
36030: PUSH
36031: LD_INT 20
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: LIST
36038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36039: LD_VAR 0 6
36043: PPUSH
36044: CALL_OW 264
36048: PUSH
36049: LD_INT 10
36051: PUSH
36052: EMPTY
36053: LIST
36054: IN
36055: IFFALSE 36076
// points := [ 35 , 110 , 70 ] ;
36057: LD_ADDR_VAR 0 9
36061: PUSH
36062: LD_INT 35
36064: PUSH
36065: LD_INT 110
36067: PUSH
36068: LD_INT 70
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: LIST
36075: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36076: LD_VAR 0 6
36080: PPUSH
36081: CALL_OW 265
36085: PUSH
36086: LD_INT 25
36088: EQUAL
36089: IFFALSE 36110
// points := [ 80 , 65 , 100 ] ;
36091: LD_ADDR_VAR 0 9
36095: PUSH
36096: LD_INT 80
36098: PUSH
36099: LD_INT 65
36101: PUSH
36102: LD_INT 100
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: LIST
36109: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36110: LD_VAR 0 6
36114: PPUSH
36115: CALL_OW 263
36119: PUSH
36120: LD_INT 1
36122: EQUAL
36123: IFFALSE 36158
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36125: LD_ADDR_VAR 0 10
36129: PUSH
36130: LD_VAR 0 10
36134: PUSH
36135: LD_VAR 0 6
36139: PPUSH
36140: CALL_OW 311
36144: PPUSH
36145: LD_INT 3
36147: PPUSH
36148: CALL_OW 259
36152: PUSH
36153: LD_INT 4
36155: MUL
36156: MUL
36157: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36158: LD_VAR 0 6
36162: PPUSH
36163: CALL_OW 263
36167: PUSH
36168: LD_INT 2
36170: EQUAL
36171: IFFALSE 36222
// begin j := IsControledBy ( i ) ;
36173: LD_ADDR_VAR 0 7
36177: PUSH
36178: LD_VAR 0 6
36182: PPUSH
36183: CALL_OW 312
36187: ST_TO_ADDR
// if j then
36188: LD_VAR 0 7
36192: IFFALSE 36222
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36194: LD_ADDR_VAR 0 10
36198: PUSH
36199: LD_VAR 0 10
36203: PUSH
36204: LD_VAR 0 7
36208: PPUSH
36209: LD_INT 3
36211: PPUSH
36212: CALL_OW 259
36216: PUSH
36217: LD_INT 3
36219: MUL
36220: MUL
36221: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36222: LD_VAR 0 6
36226: PPUSH
36227: CALL_OW 264
36231: PUSH
36232: LD_INT 5
36234: PUSH
36235: LD_INT 6
36237: PUSH
36238: LD_INT 46
36240: PUSH
36241: LD_INT 44
36243: PUSH
36244: LD_INT 47
36246: PUSH
36247: LD_INT 45
36249: PUSH
36250: LD_INT 28
36252: PUSH
36253: LD_INT 7
36255: PUSH
36256: LD_INT 27
36258: PUSH
36259: LD_INT 29
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: IN
36274: PUSH
36275: LD_VAR 0 1
36279: PPUSH
36280: LD_INT 52
36282: PPUSH
36283: CALL_OW 321
36287: PUSH
36288: LD_INT 2
36290: EQUAL
36291: AND
36292: IFFALSE 36309
// bpoints := bpoints * 1.2 ;
36294: LD_ADDR_VAR 0 10
36298: PUSH
36299: LD_VAR 0 10
36303: PUSH
36304: LD_REAL  1.20000000000000E+0000
36307: MUL
36308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36309: LD_VAR 0 6
36313: PPUSH
36314: CALL_OW 264
36318: PUSH
36319: LD_INT 6
36321: PUSH
36322: LD_INT 46
36324: PUSH
36325: LD_INT 47
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: LIST
36332: IN
36333: IFFALSE 36350
// bpoints := bpoints * 1.2 ;
36335: LD_ADDR_VAR 0 10
36339: PUSH
36340: LD_VAR 0 10
36344: PUSH
36345: LD_REAL  1.20000000000000E+0000
36348: MUL
36349: ST_TO_ADDR
// end ; unit_building :
36350: GO 36364
36352: LD_INT 3
36354: DOUBLE
36355: EQUAL
36356: IFTRUE 36360
36358: GO 36363
36360: POP
// ; end ;
36361: GO 36364
36363: POP
// for j = 1 to 3 do
36364: LD_ADDR_VAR 0 7
36368: PUSH
36369: DOUBLE
36370: LD_INT 1
36372: DEC
36373: ST_TO_ADDR
36374: LD_INT 3
36376: PUSH
36377: FOR_TO
36378: IFFALSE 36431
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36380: LD_ADDR_VAR 0 5
36384: PUSH
36385: LD_VAR 0 5
36389: PPUSH
36390: LD_VAR 0 7
36394: PPUSH
36395: LD_VAR 0 5
36399: PUSH
36400: LD_VAR 0 7
36404: ARRAY
36405: PUSH
36406: LD_VAR 0 9
36410: PUSH
36411: LD_VAR 0 7
36415: ARRAY
36416: PUSH
36417: LD_VAR 0 10
36421: MUL
36422: PLUS
36423: PPUSH
36424: CALL_OW 1
36428: ST_TO_ADDR
36429: GO 36377
36431: POP
36432: POP
// end ;
36433: GO 34910
36435: POP
36436: POP
// result := Replace ( result , 4 , tmp ) ;
36437: LD_ADDR_VAR 0 5
36441: PUSH
36442: LD_VAR 0 5
36446: PPUSH
36447: LD_INT 4
36449: PPUSH
36450: LD_VAR 0 8
36454: PPUSH
36455: CALL_OW 1
36459: ST_TO_ADDR
// end ;
36460: LD_VAR 0 5
36464: RET
// export function DangerAtRange ( unit , range ) ; begin
36465: LD_INT 0
36467: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36468: LD_ADDR_VAR 0 3
36472: PUSH
36473: LD_VAR 0 1
36477: PPUSH
36478: CALL_OW 255
36482: PPUSH
36483: LD_VAR 0 1
36487: PPUSH
36488: CALL_OW 250
36492: PPUSH
36493: LD_VAR 0 1
36497: PPUSH
36498: CALL_OW 251
36502: PPUSH
36503: LD_VAR 0 2
36507: PPUSH
36508: CALL 34762 0 4
36512: ST_TO_ADDR
// end ;
36513: LD_VAR 0 3
36517: RET
// export function DangerInArea ( side , area ) ; begin
36518: LD_INT 0
36520: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36521: LD_ADDR_VAR 0 3
36525: PUSH
36526: LD_VAR 0 2
36530: PPUSH
36531: LD_INT 81
36533: PUSH
36534: LD_VAR 0 1
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PPUSH
36543: CALL_OW 70
36547: ST_TO_ADDR
// end ;
36548: LD_VAR 0 3
36552: RET
// export function IsExtension ( b ) ; begin
36553: LD_INT 0
36555: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36556: LD_ADDR_VAR 0 2
36560: PUSH
36561: LD_VAR 0 1
36565: PUSH
36566: LD_INT 23
36568: PUSH
36569: LD_INT 20
36571: PUSH
36572: LD_INT 22
36574: PUSH
36575: LD_INT 17
36577: PUSH
36578: LD_INT 24
36580: PUSH
36581: LD_INT 21
36583: PUSH
36584: LD_INT 19
36586: PUSH
36587: LD_INT 16
36589: PUSH
36590: LD_INT 25
36592: PUSH
36593: LD_INT 18
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: IN
36608: ST_TO_ADDR
// end ;
36609: LD_VAR 0 2
36613: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36614: LD_INT 0
36616: PPUSH
36617: PPUSH
36618: PPUSH
// result := [ ] ;
36619: LD_ADDR_VAR 0 4
36623: PUSH
36624: EMPTY
36625: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36626: LD_ADDR_VAR 0 5
36630: PUSH
36631: LD_VAR 0 2
36635: PPUSH
36636: LD_INT 21
36638: PUSH
36639: LD_INT 3
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PPUSH
36646: CALL_OW 70
36650: ST_TO_ADDR
// if not tmp then
36651: LD_VAR 0 5
36655: NOT
36656: IFFALSE 36660
// exit ;
36658: GO 36724
// if checkLink then
36660: LD_VAR 0 3
36664: IFFALSE 36714
// begin for i in tmp do
36666: LD_ADDR_VAR 0 6
36670: PUSH
36671: LD_VAR 0 5
36675: PUSH
36676: FOR_IN
36677: IFFALSE 36712
// if GetBase ( i ) <> base then
36679: LD_VAR 0 6
36683: PPUSH
36684: CALL_OW 274
36688: PUSH
36689: LD_VAR 0 1
36693: NONEQUAL
36694: IFFALSE 36710
// ComLinkToBase ( base , i ) ;
36696: LD_VAR 0 1
36700: PPUSH
36701: LD_VAR 0 6
36705: PPUSH
36706: CALL_OW 169
36710: GO 36676
36712: POP
36713: POP
// end ; result := tmp ;
36714: LD_ADDR_VAR 0 4
36718: PUSH
36719: LD_VAR 0 5
36723: ST_TO_ADDR
// end ;
36724: LD_VAR 0 4
36728: RET
// export function ComComplete ( units , b ) ; var i ; begin
36729: LD_INT 0
36731: PPUSH
36732: PPUSH
// if not units then
36733: LD_VAR 0 1
36737: NOT
36738: IFFALSE 36742
// exit ;
36740: GO 36832
// for i in units do
36742: LD_ADDR_VAR 0 4
36746: PUSH
36747: LD_VAR 0 1
36751: PUSH
36752: FOR_IN
36753: IFFALSE 36830
// if BuildingStatus ( b ) = bs_build then
36755: LD_VAR 0 2
36759: PPUSH
36760: CALL_OW 461
36764: PUSH
36765: LD_INT 1
36767: EQUAL
36768: IFFALSE 36828
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36770: LD_VAR 0 4
36774: PPUSH
36775: LD_STRING h
36777: PUSH
36778: LD_VAR 0 2
36782: PPUSH
36783: CALL_OW 250
36787: PUSH
36788: LD_VAR 0 2
36792: PPUSH
36793: CALL_OW 251
36797: PUSH
36798: LD_VAR 0 2
36802: PUSH
36803: LD_INT 0
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: PUSH
36821: EMPTY
36822: LIST
36823: PPUSH
36824: CALL_OW 446
36828: GO 36752
36830: POP
36831: POP
// end ;
36832: LD_VAR 0 3
36836: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36837: LD_INT 0
36839: PPUSH
36840: PPUSH
36841: PPUSH
36842: PPUSH
36843: PPUSH
36844: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36845: LD_VAR 0 1
36849: NOT
36850: PUSH
36851: LD_VAR 0 1
36855: PPUSH
36856: CALL_OW 263
36860: PUSH
36861: LD_INT 2
36863: NONEQUAL
36864: OR
36865: IFFALSE 36869
// exit ;
36867: GO 37185
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36869: LD_ADDR_VAR 0 6
36873: PUSH
36874: LD_INT 22
36876: PUSH
36877: LD_VAR 0 1
36881: PPUSH
36882: CALL_OW 255
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 2
36893: PUSH
36894: LD_INT 30
36896: PUSH
36897: LD_INT 36
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 34
36906: PUSH
36907: LD_INT 31
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PPUSH
36923: CALL_OW 69
36927: ST_TO_ADDR
// if not tmp then
36928: LD_VAR 0 6
36932: NOT
36933: IFFALSE 36937
// exit ;
36935: GO 37185
// result := [ ] ;
36937: LD_ADDR_VAR 0 2
36941: PUSH
36942: EMPTY
36943: ST_TO_ADDR
// for i in tmp do
36944: LD_ADDR_VAR 0 3
36948: PUSH
36949: LD_VAR 0 6
36953: PUSH
36954: FOR_IN
36955: IFFALSE 37026
// begin t := UnitsInside ( i ) ;
36957: LD_ADDR_VAR 0 4
36961: PUSH
36962: LD_VAR 0 3
36966: PPUSH
36967: CALL_OW 313
36971: ST_TO_ADDR
// if t then
36972: LD_VAR 0 4
36976: IFFALSE 37024
// for j in t do
36978: LD_ADDR_VAR 0 7
36982: PUSH
36983: LD_VAR 0 4
36987: PUSH
36988: FOR_IN
36989: IFFALSE 37022
// result := Replace ( result , result + 1 , j ) ;
36991: LD_ADDR_VAR 0 2
36995: PUSH
36996: LD_VAR 0 2
37000: PPUSH
37001: LD_VAR 0 2
37005: PUSH
37006: LD_INT 1
37008: PLUS
37009: PPUSH
37010: LD_VAR 0 7
37014: PPUSH
37015: CALL_OW 1
37019: ST_TO_ADDR
37020: GO 36988
37022: POP
37023: POP
// end ;
37024: GO 36954
37026: POP
37027: POP
// if not result then
37028: LD_VAR 0 2
37032: NOT
37033: IFFALSE 37037
// exit ;
37035: GO 37185
// mech := result [ 1 ] ;
37037: LD_ADDR_VAR 0 5
37041: PUSH
37042: LD_VAR 0 2
37046: PUSH
37047: LD_INT 1
37049: ARRAY
37050: ST_TO_ADDR
// if result > 1 then
37051: LD_VAR 0 2
37055: PUSH
37056: LD_INT 1
37058: GREATER
37059: IFFALSE 37171
// begin for i = 2 to result do
37061: LD_ADDR_VAR 0 3
37065: PUSH
37066: DOUBLE
37067: LD_INT 2
37069: DEC
37070: ST_TO_ADDR
37071: LD_VAR 0 2
37075: PUSH
37076: FOR_TO
37077: IFFALSE 37169
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37079: LD_ADDR_VAR 0 4
37083: PUSH
37084: LD_VAR 0 2
37088: PUSH
37089: LD_VAR 0 3
37093: ARRAY
37094: PPUSH
37095: LD_INT 3
37097: PPUSH
37098: CALL_OW 259
37102: PUSH
37103: LD_VAR 0 2
37107: PUSH
37108: LD_VAR 0 3
37112: ARRAY
37113: PPUSH
37114: CALL_OW 432
37118: MINUS
37119: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37120: LD_VAR 0 4
37124: PUSH
37125: LD_VAR 0 5
37129: PPUSH
37130: LD_INT 3
37132: PPUSH
37133: CALL_OW 259
37137: PUSH
37138: LD_VAR 0 5
37142: PPUSH
37143: CALL_OW 432
37147: MINUS
37148: GREATEREQUAL
37149: IFFALSE 37167
// mech := result [ i ] ;
37151: LD_ADDR_VAR 0 5
37155: PUSH
37156: LD_VAR 0 2
37160: PUSH
37161: LD_VAR 0 3
37165: ARRAY
37166: ST_TO_ADDR
// end ;
37167: GO 37076
37169: POP
37170: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37171: LD_VAR 0 1
37175: PPUSH
37176: LD_VAR 0 5
37180: PPUSH
37181: CALL_OW 135
// end ;
37185: LD_VAR 0 2
37189: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37190: LD_INT 0
37192: PPUSH
37193: PPUSH
37194: PPUSH
37195: PPUSH
37196: PPUSH
37197: PPUSH
37198: PPUSH
37199: PPUSH
37200: PPUSH
37201: PPUSH
37202: PPUSH
37203: PPUSH
37204: PPUSH
// result := [ ] ;
37205: LD_ADDR_VAR 0 7
37209: PUSH
37210: EMPTY
37211: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37212: LD_VAR 0 1
37216: PPUSH
37217: CALL_OW 266
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: IN
37232: NOT
37233: IFFALSE 37237
// exit ;
37235: GO 38871
// if name then
37237: LD_VAR 0 3
37241: IFFALSE 37257
// SetBName ( base_dep , name ) ;
37243: LD_VAR 0 1
37247: PPUSH
37248: LD_VAR 0 3
37252: PPUSH
37253: CALL_OW 500
// base := GetBase ( base_dep ) ;
37257: LD_ADDR_VAR 0 15
37261: PUSH
37262: LD_VAR 0 1
37266: PPUSH
37267: CALL_OW 274
37271: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37272: LD_ADDR_VAR 0 16
37276: PUSH
37277: LD_VAR 0 1
37281: PPUSH
37282: CALL_OW 255
37286: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37287: LD_ADDR_VAR 0 17
37291: PUSH
37292: LD_VAR 0 1
37296: PPUSH
37297: CALL_OW 248
37301: ST_TO_ADDR
// if sources then
37302: LD_VAR 0 5
37306: IFFALSE 37353
// for i = 1 to 3 do
37308: LD_ADDR_VAR 0 8
37312: PUSH
37313: DOUBLE
37314: LD_INT 1
37316: DEC
37317: ST_TO_ADDR
37318: LD_INT 3
37320: PUSH
37321: FOR_TO
37322: IFFALSE 37351
// AddResourceType ( base , i , sources [ i ] ) ;
37324: LD_VAR 0 15
37328: PPUSH
37329: LD_VAR 0 8
37333: PPUSH
37334: LD_VAR 0 5
37338: PUSH
37339: LD_VAR 0 8
37343: ARRAY
37344: PPUSH
37345: CALL_OW 276
37349: GO 37321
37351: POP
37352: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37353: LD_ADDR_VAR 0 18
37357: PUSH
37358: LD_VAR 0 15
37362: PPUSH
37363: LD_VAR 0 2
37367: PPUSH
37368: LD_INT 1
37370: PPUSH
37371: CALL 36614 0 3
37375: ST_TO_ADDR
// InitHc ;
37376: CALL_OW 19
// InitUc ;
37380: CALL_OW 18
// uc_side := side ;
37384: LD_ADDR_OWVAR 20
37388: PUSH
37389: LD_VAR 0 16
37393: ST_TO_ADDR
// uc_nation := nation ;
37394: LD_ADDR_OWVAR 21
37398: PUSH
37399: LD_VAR 0 17
37403: ST_TO_ADDR
// if buildings then
37404: LD_VAR 0 18
37408: IFFALSE 38730
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37410: LD_ADDR_VAR 0 19
37414: PUSH
37415: LD_VAR 0 18
37419: PPUSH
37420: LD_INT 2
37422: PUSH
37423: LD_INT 30
37425: PUSH
37426: LD_INT 29
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 30
37435: PUSH
37436: LD_INT 30
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: LIST
37447: PPUSH
37448: CALL_OW 72
37452: ST_TO_ADDR
// if tmp then
37453: LD_VAR 0 19
37457: IFFALSE 37505
// for i in tmp do
37459: LD_ADDR_VAR 0 8
37463: PUSH
37464: LD_VAR 0 19
37468: PUSH
37469: FOR_IN
37470: IFFALSE 37503
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37472: LD_VAR 0 8
37476: PPUSH
37477: CALL_OW 250
37481: PPUSH
37482: LD_VAR 0 8
37486: PPUSH
37487: CALL_OW 251
37491: PPUSH
37492: LD_VAR 0 16
37496: PPUSH
37497: CALL_OW 441
37501: GO 37469
37503: POP
37504: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37505: LD_VAR 0 18
37509: PPUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 30
37515: PUSH
37516: LD_INT 32
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 30
37525: PUSH
37526: LD_INT 33
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: LIST
37537: PPUSH
37538: CALL_OW 72
37542: IFFALSE 37630
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37544: LD_ADDR_VAR 0 8
37548: PUSH
37549: LD_VAR 0 18
37553: PPUSH
37554: LD_INT 2
37556: PUSH
37557: LD_INT 30
37559: PUSH
37560: LD_INT 32
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 30
37569: PUSH
37570: LD_INT 33
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: LIST
37581: PPUSH
37582: CALL_OW 72
37586: PUSH
37587: FOR_IN
37588: IFFALSE 37628
// begin if not GetBWeapon ( i ) then
37590: LD_VAR 0 8
37594: PPUSH
37595: CALL_OW 269
37599: NOT
37600: IFFALSE 37626
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37602: LD_VAR 0 8
37606: PPUSH
37607: LD_VAR 0 8
37611: PPUSH
37612: LD_VAR 0 2
37616: PPUSH
37617: CALL 38876 0 2
37621: PPUSH
37622: CALL_OW 431
// end ;
37626: GO 37587
37628: POP
37629: POP
// end ; for i = 1 to personel do
37630: LD_ADDR_VAR 0 8
37634: PUSH
37635: DOUBLE
37636: LD_INT 1
37638: DEC
37639: ST_TO_ADDR
37640: LD_VAR 0 6
37644: PUSH
37645: FOR_TO
37646: IFFALSE 38710
// begin if i > 4 then
37648: LD_VAR 0 8
37652: PUSH
37653: LD_INT 4
37655: GREATER
37656: IFFALSE 37660
// break ;
37658: GO 38710
// case i of 1 :
37660: LD_VAR 0 8
37664: PUSH
37665: LD_INT 1
37667: DOUBLE
37668: EQUAL
37669: IFTRUE 37673
37671: GO 37753
37673: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37674: LD_ADDR_VAR 0 12
37678: PUSH
37679: LD_VAR 0 18
37683: PPUSH
37684: LD_INT 22
37686: PUSH
37687: LD_VAR 0 16
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 58
37698: PUSH
37699: EMPTY
37700: LIST
37701: PUSH
37702: LD_INT 2
37704: PUSH
37705: LD_INT 30
37707: PUSH
37708: LD_INT 32
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 30
37717: PUSH
37718: LD_INT 4
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 30
37727: PUSH
37728: LD_INT 5
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: LIST
37745: PPUSH
37746: CALL_OW 72
37750: ST_TO_ADDR
37751: GO 37975
37753: LD_INT 2
37755: DOUBLE
37756: EQUAL
37757: IFTRUE 37761
37759: GO 37823
37761: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37762: LD_ADDR_VAR 0 12
37766: PUSH
37767: LD_VAR 0 18
37771: PPUSH
37772: LD_INT 22
37774: PUSH
37775: LD_VAR 0 16
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 2
37786: PUSH
37787: LD_INT 30
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 30
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: LIST
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PPUSH
37816: CALL_OW 72
37820: ST_TO_ADDR
37821: GO 37975
37823: LD_INT 3
37825: DOUBLE
37826: EQUAL
37827: IFTRUE 37831
37829: GO 37893
37831: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37832: LD_ADDR_VAR 0 12
37836: PUSH
37837: LD_VAR 0 18
37841: PPUSH
37842: LD_INT 22
37844: PUSH
37845: LD_VAR 0 16
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: LD_INT 30
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 30
37869: PUSH
37870: LD_INT 3
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: LIST
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PPUSH
37886: CALL_OW 72
37890: ST_TO_ADDR
37891: GO 37975
37893: LD_INT 4
37895: DOUBLE
37896: EQUAL
37897: IFTRUE 37901
37899: GO 37974
37901: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37902: LD_ADDR_VAR 0 12
37906: PUSH
37907: LD_VAR 0 18
37911: PPUSH
37912: LD_INT 22
37914: PUSH
37915: LD_VAR 0 16
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 2
37926: PUSH
37927: LD_INT 30
37929: PUSH
37930: LD_INT 6
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 30
37939: PUSH
37940: LD_INT 7
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 30
37949: PUSH
37950: LD_INT 8
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PPUSH
37967: CALL_OW 72
37971: ST_TO_ADDR
37972: GO 37975
37974: POP
// if i = 1 then
37975: LD_VAR 0 8
37979: PUSH
37980: LD_INT 1
37982: EQUAL
37983: IFFALSE 38094
// begin tmp := [ ] ;
37985: LD_ADDR_VAR 0 19
37989: PUSH
37990: EMPTY
37991: ST_TO_ADDR
// for j in f do
37992: LD_ADDR_VAR 0 9
37996: PUSH
37997: LD_VAR 0 12
38001: PUSH
38002: FOR_IN
38003: IFFALSE 38076
// if GetBType ( j ) = b_bunker then
38005: LD_VAR 0 9
38009: PPUSH
38010: CALL_OW 266
38014: PUSH
38015: LD_INT 32
38017: EQUAL
38018: IFFALSE 38045
// tmp := Insert ( tmp , 1 , j ) else
38020: LD_ADDR_VAR 0 19
38024: PUSH
38025: LD_VAR 0 19
38029: PPUSH
38030: LD_INT 1
38032: PPUSH
38033: LD_VAR 0 9
38037: PPUSH
38038: CALL_OW 2
38042: ST_TO_ADDR
38043: GO 38074
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38045: LD_ADDR_VAR 0 19
38049: PUSH
38050: LD_VAR 0 19
38054: PPUSH
38055: LD_VAR 0 19
38059: PUSH
38060: LD_INT 1
38062: PLUS
38063: PPUSH
38064: LD_VAR 0 9
38068: PPUSH
38069: CALL_OW 2
38073: ST_TO_ADDR
38074: GO 38002
38076: POP
38077: POP
// if tmp then
38078: LD_VAR 0 19
38082: IFFALSE 38094
// f := tmp ;
38084: LD_ADDR_VAR 0 12
38088: PUSH
38089: LD_VAR 0 19
38093: ST_TO_ADDR
// end ; x := personel [ i ] ;
38094: LD_ADDR_VAR 0 13
38098: PUSH
38099: LD_VAR 0 6
38103: PUSH
38104: LD_VAR 0 8
38108: ARRAY
38109: ST_TO_ADDR
// if x = - 1 then
38110: LD_VAR 0 13
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: EQUAL
38119: IFFALSE 38328
// begin for j in f do
38121: LD_ADDR_VAR 0 9
38125: PUSH
38126: LD_VAR 0 12
38130: PUSH
38131: FOR_IN
38132: IFFALSE 38324
// repeat InitHc ;
38134: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38138: LD_VAR 0 9
38142: PPUSH
38143: CALL_OW 266
38147: PUSH
38148: LD_INT 5
38150: EQUAL
38151: IFFALSE 38221
// begin if UnitsInside ( j ) < 3 then
38153: LD_VAR 0 9
38157: PPUSH
38158: CALL_OW 313
38162: PUSH
38163: LD_INT 3
38165: LESS
38166: IFFALSE 38202
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38168: LD_INT 0
38170: PPUSH
38171: LD_INT 5
38173: PUSH
38174: LD_INT 8
38176: PUSH
38177: LD_INT 9
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: LIST
38184: PUSH
38185: LD_VAR 0 17
38189: ARRAY
38190: PPUSH
38191: LD_VAR 0 4
38195: PPUSH
38196: CALL_OW 380
38200: GO 38219
// PrepareHuman ( false , i , skill ) ;
38202: LD_INT 0
38204: PPUSH
38205: LD_VAR 0 8
38209: PPUSH
38210: LD_VAR 0 4
38214: PPUSH
38215: CALL_OW 380
// end else
38219: GO 38238
// PrepareHuman ( false , i , skill ) ;
38221: LD_INT 0
38223: PPUSH
38224: LD_VAR 0 8
38228: PPUSH
38229: LD_VAR 0 4
38233: PPUSH
38234: CALL_OW 380
// un := CreateHuman ;
38238: LD_ADDR_VAR 0 14
38242: PUSH
38243: CALL_OW 44
38247: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38248: LD_ADDR_VAR 0 7
38252: PUSH
38253: LD_VAR 0 7
38257: PPUSH
38258: LD_INT 1
38260: PPUSH
38261: LD_VAR 0 14
38265: PPUSH
38266: CALL_OW 2
38270: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38271: LD_VAR 0 14
38275: PPUSH
38276: LD_VAR 0 9
38280: PPUSH
38281: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38285: LD_VAR 0 9
38289: PPUSH
38290: CALL_OW 313
38294: PUSH
38295: LD_INT 6
38297: EQUAL
38298: PUSH
38299: LD_VAR 0 9
38303: PPUSH
38304: CALL_OW 266
38308: PUSH
38309: LD_INT 32
38311: PUSH
38312: LD_INT 31
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: IN
38319: OR
38320: IFFALSE 38134
38322: GO 38131
38324: POP
38325: POP
// end else
38326: GO 38708
// for j = 1 to x do
38328: LD_ADDR_VAR 0 9
38332: PUSH
38333: DOUBLE
38334: LD_INT 1
38336: DEC
38337: ST_TO_ADDR
38338: LD_VAR 0 13
38342: PUSH
38343: FOR_TO
38344: IFFALSE 38706
// begin InitHc ;
38346: CALL_OW 19
// if not f then
38350: LD_VAR 0 12
38354: NOT
38355: IFFALSE 38444
// begin PrepareHuman ( false , i , skill ) ;
38357: LD_INT 0
38359: PPUSH
38360: LD_VAR 0 8
38364: PPUSH
38365: LD_VAR 0 4
38369: PPUSH
38370: CALL_OW 380
// un := CreateHuman ;
38374: LD_ADDR_VAR 0 14
38378: PUSH
38379: CALL_OW 44
38383: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38384: LD_ADDR_VAR 0 7
38388: PUSH
38389: LD_VAR 0 7
38393: PPUSH
38394: LD_INT 1
38396: PPUSH
38397: LD_VAR 0 14
38401: PPUSH
38402: CALL_OW 2
38406: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38407: LD_VAR 0 14
38411: PPUSH
38412: LD_VAR 0 1
38416: PPUSH
38417: CALL_OW 250
38421: PPUSH
38422: LD_VAR 0 1
38426: PPUSH
38427: CALL_OW 251
38431: PPUSH
38432: LD_INT 10
38434: PPUSH
38435: LD_INT 0
38437: PPUSH
38438: CALL_OW 50
// continue ;
38442: GO 38343
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38444: LD_VAR 0 12
38448: PUSH
38449: LD_INT 1
38451: ARRAY
38452: PPUSH
38453: CALL_OW 313
38457: PUSH
38458: LD_VAR 0 12
38462: PUSH
38463: LD_INT 1
38465: ARRAY
38466: PPUSH
38467: CALL_OW 266
38471: PUSH
38472: LD_INT 32
38474: PUSH
38475: LD_INT 31
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: IN
38482: AND
38483: PUSH
38484: LD_VAR 0 12
38488: PUSH
38489: LD_INT 1
38491: ARRAY
38492: PPUSH
38493: CALL_OW 313
38497: PUSH
38498: LD_INT 6
38500: EQUAL
38501: OR
38502: IFFALSE 38522
// f := Delete ( f , 1 ) ;
38504: LD_ADDR_VAR 0 12
38508: PUSH
38509: LD_VAR 0 12
38513: PPUSH
38514: LD_INT 1
38516: PPUSH
38517: CALL_OW 3
38521: ST_TO_ADDR
// if not f then
38522: LD_VAR 0 12
38526: NOT
38527: IFFALSE 38545
// begin x := x + 2 ;
38529: LD_ADDR_VAR 0 13
38533: PUSH
38534: LD_VAR 0 13
38538: PUSH
38539: LD_INT 2
38541: PLUS
38542: ST_TO_ADDR
// continue ;
38543: GO 38343
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38545: LD_VAR 0 12
38549: PUSH
38550: LD_INT 1
38552: ARRAY
38553: PPUSH
38554: CALL_OW 266
38558: PUSH
38559: LD_INT 5
38561: EQUAL
38562: IFFALSE 38636
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38564: LD_VAR 0 12
38568: PUSH
38569: LD_INT 1
38571: ARRAY
38572: PPUSH
38573: CALL_OW 313
38577: PUSH
38578: LD_INT 3
38580: LESS
38581: IFFALSE 38617
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38583: LD_INT 0
38585: PPUSH
38586: LD_INT 5
38588: PUSH
38589: LD_INT 8
38591: PUSH
38592: LD_INT 9
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: PUSH
38600: LD_VAR 0 17
38604: ARRAY
38605: PPUSH
38606: LD_VAR 0 4
38610: PPUSH
38611: CALL_OW 380
38615: GO 38634
// PrepareHuman ( false , i , skill ) ;
38617: LD_INT 0
38619: PPUSH
38620: LD_VAR 0 8
38624: PPUSH
38625: LD_VAR 0 4
38629: PPUSH
38630: CALL_OW 380
// end else
38634: GO 38653
// PrepareHuman ( false , i , skill ) ;
38636: LD_INT 0
38638: PPUSH
38639: LD_VAR 0 8
38643: PPUSH
38644: LD_VAR 0 4
38648: PPUSH
38649: CALL_OW 380
// un := CreateHuman ;
38653: LD_ADDR_VAR 0 14
38657: PUSH
38658: CALL_OW 44
38662: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38663: LD_ADDR_VAR 0 7
38667: PUSH
38668: LD_VAR 0 7
38672: PPUSH
38673: LD_INT 1
38675: PPUSH
38676: LD_VAR 0 14
38680: PPUSH
38681: CALL_OW 2
38685: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38686: LD_VAR 0 14
38690: PPUSH
38691: LD_VAR 0 12
38695: PUSH
38696: LD_INT 1
38698: ARRAY
38699: PPUSH
38700: CALL_OW 52
// end ;
38704: GO 38343
38706: POP
38707: POP
// end ;
38708: GO 37645
38710: POP
38711: POP
// result := result ^ buildings ;
38712: LD_ADDR_VAR 0 7
38716: PUSH
38717: LD_VAR 0 7
38721: PUSH
38722: LD_VAR 0 18
38726: ADD
38727: ST_TO_ADDR
// end else
38728: GO 38871
// begin for i = 1 to personel do
38730: LD_ADDR_VAR 0 8
38734: PUSH
38735: DOUBLE
38736: LD_INT 1
38738: DEC
38739: ST_TO_ADDR
38740: LD_VAR 0 6
38744: PUSH
38745: FOR_TO
38746: IFFALSE 38869
// begin if i > 4 then
38748: LD_VAR 0 8
38752: PUSH
38753: LD_INT 4
38755: GREATER
38756: IFFALSE 38760
// break ;
38758: GO 38869
// x := personel [ i ] ;
38760: LD_ADDR_VAR 0 13
38764: PUSH
38765: LD_VAR 0 6
38769: PUSH
38770: LD_VAR 0 8
38774: ARRAY
38775: ST_TO_ADDR
// if x = - 1 then
38776: LD_VAR 0 13
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: EQUAL
38785: IFFALSE 38789
// continue ;
38787: GO 38745
// PrepareHuman ( false , i , skill ) ;
38789: LD_INT 0
38791: PPUSH
38792: LD_VAR 0 8
38796: PPUSH
38797: LD_VAR 0 4
38801: PPUSH
38802: CALL_OW 380
// un := CreateHuman ;
38806: LD_ADDR_VAR 0 14
38810: PUSH
38811: CALL_OW 44
38815: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38816: LD_VAR 0 14
38820: PPUSH
38821: LD_VAR 0 1
38825: PPUSH
38826: CALL_OW 250
38830: PPUSH
38831: LD_VAR 0 1
38835: PPUSH
38836: CALL_OW 251
38840: PPUSH
38841: LD_INT 10
38843: PPUSH
38844: LD_INT 0
38846: PPUSH
38847: CALL_OW 50
// result := result ^ un ;
38851: LD_ADDR_VAR 0 7
38855: PUSH
38856: LD_VAR 0 7
38860: PUSH
38861: LD_VAR 0 14
38865: ADD
38866: ST_TO_ADDR
// end ;
38867: GO 38745
38869: POP
38870: POP
// end ; end ;
38871: LD_VAR 0 7
38875: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38876: LD_INT 0
38878: PPUSH
38879: PPUSH
38880: PPUSH
38881: PPUSH
38882: PPUSH
38883: PPUSH
38884: PPUSH
38885: PPUSH
38886: PPUSH
38887: PPUSH
38888: PPUSH
38889: PPUSH
38890: PPUSH
38891: PPUSH
38892: PPUSH
38893: PPUSH
// result := false ;
38894: LD_ADDR_VAR 0 3
38898: PUSH
38899: LD_INT 0
38901: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38902: LD_VAR 0 1
38906: NOT
38907: PUSH
38908: LD_VAR 0 1
38912: PPUSH
38913: CALL_OW 266
38917: PUSH
38918: LD_INT 32
38920: PUSH
38921: LD_INT 33
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: IN
38928: NOT
38929: OR
38930: IFFALSE 38934
// exit ;
38932: GO 40043
// nat := GetNation ( tower ) ;
38934: LD_ADDR_VAR 0 12
38938: PUSH
38939: LD_VAR 0 1
38943: PPUSH
38944: CALL_OW 248
38948: ST_TO_ADDR
// side := GetSide ( tower ) ;
38949: LD_ADDR_VAR 0 16
38953: PUSH
38954: LD_VAR 0 1
38958: PPUSH
38959: CALL_OW 255
38963: ST_TO_ADDR
// x := GetX ( tower ) ;
38964: LD_ADDR_VAR 0 10
38968: PUSH
38969: LD_VAR 0 1
38973: PPUSH
38974: CALL_OW 250
38978: ST_TO_ADDR
// y := GetY ( tower ) ;
38979: LD_ADDR_VAR 0 11
38983: PUSH
38984: LD_VAR 0 1
38988: PPUSH
38989: CALL_OW 251
38993: ST_TO_ADDR
// if not x or not y then
38994: LD_VAR 0 10
38998: NOT
38999: PUSH
39000: LD_VAR 0 11
39004: NOT
39005: OR
39006: IFFALSE 39010
// exit ;
39008: GO 40043
// weapon := 0 ;
39010: LD_ADDR_VAR 0 18
39014: PUSH
39015: LD_INT 0
39017: ST_TO_ADDR
// fac_list := [ ] ;
39018: LD_ADDR_VAR 0 17
39022: PUSH
39023: EMPTY
39024: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39025: LD_ADDR_VAR 0 6
39029: PUSH
39030: LD_VAR 0 1
39034: PPUSH
39035: CALL_OW 274
39039: PPUSH
39040: LD_VAR 0 2
39044: PPUSH
39045: LD_INT 0
39047: PPUSH
39048: CALL 36614 0 3
39052: PPUSH
39053: LD_INT 30
39055: PUSH
39056: LD_INT 3
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PPUSH
39063: CALL_OW 72
39067: ST_TO_ADDR
// if not factories then
39068: LD_VAR 0 6
39072: NOT
39073: IFFALSE 39077
// exit ;
39075: GO 40043
// for i in factories do
39077: LD_ADDR_VAR 0 8
39081: PUSH
39082: LD_VAR 0 6
39086: PUSH
39087: FOR_IN
39088: IFFALSE 39113
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39090: LD_ADDR_VAR 0 17
39094: PUSH
39095: LD_VAR 0 17
39099: PUSH
39100: LD_VAR 0 8
39104: PPUSH
39105: CALL_OW 478
39109: UNION
39110: ST_TO_ADDR
39111: GO 39087
39113: POP
39114: POP
// if not fac_list then
39115: LD_VAR 0 17
39119: NOT
39120: IFFALSE 39124
// exit ;
39122: GO 40043
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39124: LD_ADDR_VAR 0 5
39128: PUSH
39129: LD_INT 4
39131: PUSH
39132: LD_INT 5
39134: PUSH
39135: LD_INT 9
39137: PUSH
39138: LD_INT 10
39140: PUSH
39141: LD_INT 6
39143: PUSH
39144: LD_INT 7
39146: PUSH
39147: LD_INT 11
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 27
39161: PUSH
39162: LD_INT 28
39164: PUSH
39165: LD_INT 26
39167: PUSH
39168: LD_INT 30
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 43
39179: PUSH
39180: LD_INT 44
39182: PUSH
39183: LD_INT 46
39185: PUSH
39186: LD_INT 45
39188: PUSH
39189: LD_INT 47
39191: PUSH
39192: LD_INT 49
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: LIST
39207: PUSH
39208: LD_VAR 0 12
39212: ARRAY
39213: ST_TO_ADDR
// list := list isect fac_list ;
39214: LD_ADDR_VAR 0 5
39218: PUSH
39219: LD_VAR 0 5
39223: PUSH
39224: LD_VAR 0 17
39228: ISECT
39229: ST_TO_ADDR
// if not list then
39230: LD_VAR 0 5
39234: NOT
39235: IFFALSE 39239
// exit ;
39237: GO 40043
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39239: LD_VAR 0 12
39243: PUSH
39244: LD_INT 3
39246: EQUAL
39247: PUSH
39248: LD_INT 49
39250: PUSH
39251: LD_VAR 0 5
39255: IN
39256: AND
39257: PUSH
39258: LD_INT 31
39260: PPUSH
39261: LD_VAR 0 16
39265: PPUSH
39266: CALL_OW 321
39270: PUSH
39271: LD_INT 2
39273: EQUAL
39274: AND
39275: IFFALSE 39335
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39277: LD_INT 22
39279: PUSH
39280: LD_VAR 0 16
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 35
39291: PUSH
39292: LD_INT 49
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 91
39301: PUSH
39302: LD_VAR 0 1
39306: PUSH
39307: LD_INT 10
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: LIST
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: LIST
39319: PPUSH
39320: CALL_OW 69
39324: NOT
39325: IFFALSE 39335
// weapon := ru_time_lapser ;
39327: LD_ADDR_VAR 0 18
39331: PUSH
39332: LD_INT 49
39334: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39335: LD_VAR 0 12
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: LD_INT 2
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: IN
39350: PUSH
39351: LD_INT 11
39353: PUSH
39354: LD_VAR 0 5
39358: IN
39359: PUSH
39360: LD_INT 30
39362: PUSH
39363: LD_VAR 0 5
39367: IN
39368: OR
39369: AND
39370: PUSH
39371: LD_INT 6
39373: PPUSH
39374: LD_VAR 0 16
39378: PPUSH
39379: CALL_OW 321
39383: PUSH
39384: LD_INT 2
39386: EQUAL
39387: AND
39388: IFFALSE 39553
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39390: LD_INT 22
39392: PUSH
39393: LD_VAR 0 16
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 2
39404: PUSH
39405: LD_INT 35
39407: PUSH
39408: LD_INT 11
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 35
39417: PUSH
39418: LD_INT 30
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 91
39432: PUSH
39433: LD_VAR 0 1
39437: PUSH
39438: LD_INT 18
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: LIST
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: LIST
39450: PPUSH
39451: CALL_OW 69
39455: NOT
39456: PUSH
39457: LD_INT 22
39459: PUSH
39460: LD_VAR 0 16
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: LD_INT 30
39474: PUSH
39475: LD_INT 32
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 30
39484: PUSH
39485: LD_INT 33
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 91
39499: PUSH
39500: LD_VAR 0 1
39504: PUSH
39505: LD_INT 12
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: LIST
39517: PUSH
39518: EMPTY
39519: LIST
39520: PPUSH
39521: CALL_OW 69
39525: PUSH
39526: LD_INT 2
39528: GREATER
39529: AND
39530: IFFALSE 39553
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39532: LD_ADDR_VAR 0 18
39536: PUSH
39537: LD_INT 11
39539: PUSH
39540: LD_INT 30
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_VAR 0 12
39551: ARRAY
39552: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39553: LD_VAR 0 18
39557: NOT
39558: PUSH
39559: LD_INT 40
39561: PPUSH
39562: LD_VAR 0 16
39566: PPUSH
39567: CALL_OW 321
39571: PUSH
39572: LD_INT 2
39574: EQUAL
39575: AND
39576: PUSH
39577: LD_INT 7
39579: PUSH
39580: LD_VAR 0 5
39584: IN
39585: PUSH
39586: LD_INT 28
39588: PUSH
39589: LD_VAR 0 5
39593: IN
39594: OR
39595: PUSH
39596: LD_INT 45
39598: PUSH
39599: LD_VAR 0 5
39603: IN
39604: OR
39605: AND
39606: IFFALSE 39860
// begin hex := GetHexInfo ( x , y ) ;
39608: LD_ADDR_VAR 0 4
39612: PUSH
39613: LD_VAR 0 10
39617: PPUSH
39618: LD_VAR 0 11
39622: PPUSH
39623: CALL_OW 546
39627: ST_TO_ADDR
// if hex [ 1 ] then
39628: LD_VAR 0 4
39632: PUSH
39633: LD_INT 1
39635: ARRAY
39636: IFFALSE 39640
// exit ;
39638: GO 40043
// height := hex [ 2 ] ;
39640: LD_ADDR_VAR 0 15
39644: PUSH
39645: LD_VAR 0 4
39649: PUSH
39650: LD_INT 2
39652: ARRAY
39653: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39654: LD_ADDR_VAR 0 14
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: LD_INT 3
39667: PUSH
39668: LD_INT 5
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: ST_TO_ADDR
// for i in tmp do
39677: LD_ADDR_VAR 0 8
39681: PUSH
39682: LD_VAR 0 14
39686: PUSH
39687: FOR_IN
39688: IFFALSE 39858
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39690: LD_ADDR_VAR 0 9
39694: PUSH
39695: LD_VAR 0 10
39699: PPUSH
39700: LD_VAR 0 8
39704: PPUSH
39705: LD_INT 5
39707: PPUSH
39708: CALL_OW 272
39712: PUSH
39713: LD_VAR 0 11
39717: PPUSH
39718: LD_VAR 0 8
39722: PPUSH
39723: LD_INT 5
39725: PPUSH
39726: CALL_OW 273
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39735: LD_VAR 0 9
39739: PUSH
39740: LD_INT 1
39742: ARRAY
39743: PPUSH
39744: LD_VAR 0 9
39748: PUSH
39749: LD_INT 2
39751: ARRAY
39752: PPUSH
39753: CALL_OW 488
39757: IFFALSE 39856
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39759: LD_ADDR_VAR 0 4
39763: PUSH
39764: LD_VAR 0 9
39768: PUSH
39769: LD_INT 1
39771: ARRAY
39772: PPUSH
39773: LD_VAR 0 9
39777: PUSH
39778: LD_INT 2
39780: ARRAY
39781: PPUSH
39782: CALL_OW 546
39786: ST_TO_ADDR
// if hex [ 1 ] then
39787: LD_VAR 0 4
39791: PUSH
39792: LD_INT 1
39794: ARRAY
39795: IFFALSE 39799
// continue ;
39797: GO 39687
// h := hex [ 2 ] ;
39799: LD_ADDR_VAR 0 13
39803: PUSH
39804: LD_VAR 0 4
39808: PUSH
39809: LD_INT 2
39811: ARRAY
39812: ST_TO_ADDR
// if h + 7 < height then
39813: LD_VAR 0 13
39817: PUSH
39818: LD_INT 7
39820: PLUS
39821: PUSH
39822: LD_VAR 0 15
39826: LESS
39827: IFFALSE 39856
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39829: LD_ADDR_VAR 0 18
39833: PUSH
39834: LD_INT 7
39836: PUSH
39837: LD_INT 28
39839: PUSH
39840: LD_INT 45
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: LIST
39847: PUSH
39848: LD_VAR 0 12
39852: ARRAY
39853: ST_TO_ADDR
// break ;
39854: GO 39858
// end ; end ; end ;
39856: GO 39687
39858: POP
39859: POP
// end ; if not weapon then
39860: LD_VAR 0 18
39864: NOT
39865: IFFALSE 39925
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39867: LD_ADDR_VAR 0 5
39871: PUSH
39872: LD_VAR 0 5
39876: PUSH
39877: LD_INT 11
39879: PUSH
39880: LD_INT 30
39882: PUSH
39883: LD_INT 49
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: LIST
39890: DIFF
39891: ST_TO_ADDR
// if not list then
39892: LD_VAR 0 5
39896: NOT
39897: IFFALSE 39901
// exit ;
39899: GO 40043
// weapon := list [ rand ( 1 , list ) ] ;
39901: LD_ADDR_VAR 0 18
39905: PUSH
39906: LD_VAR 0 5
39910: PUSH
39911: LD_INT 1
39913: PPUSH
39914: LD_VAR 0 5
39918: PPUSH
39919: CALL_OW 12
39923: ARRAY
39924: ST_TO_ADDR
// end ; if weapon then
39925: LD_VAR 0 18
39929: IFFALSE 40043
// begin tmp := CostOfWeapon ( weapon ) ;
39931: LD_ADDR_VAR 0 14
39935: PUSH
39936: LD_VAR 0 18
39940: PPUSH
39941: CALL_OW 451
39945: ST_TO_ADDR
// j := GetBase ( tower ) ;
39946: LD_ADDR_VAR 0 9
39950: PUSH
39951: LD_VAR 0 1
39955: PPUSH
39956: CALL_OW 274
39960: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39961: LD_VAR 0 9
39965: PPUSH
39966: LD_INT 1
39968: PPUSH
39969: CALL_OW 275
39973: PUSH
39974: LD_VAR 0 14
39978: PUSH
39979: LD_INT 1
39981: ARRAY
39982: GREATEREQUAL
39983: PUSH
39984: LD_VAR 0 9
39988: PPUSH
39989: LD_INT 2
39991: PPUSH
39992: CALL_OW 275
39996: PUSH
39997: LD_VAR 0 14
40001: PUSH
40002: LD_INT 2
40004: ARRAY
40005: GREATEREQUAL
40006: AND
40007: PUSH
40008: LD_VAR 0 9
40012: PPUSH
40013: LD_INT 3
40015: PPUSH
40016: CALL_OW 275
40020: PUSH
40021: LD_VAR 0 14
40025: PUSH
40026: LD_INT 3
40028: ARRAY
40029: GREATEREQUAL
40030: AND
40031: IFFALSE 40043
// result := weapon ;
40033: LD_ADDR_VAR 0 3
40037: PUSH
40038: LD_VAR 0 18
40042: ST_TO_ADDR
// end ; end ;
40043: LD_VAR 0 3
40047: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40048: LD_INT 0
40050: PPUSH
40051: PPUSH
// result := true ;
40052: LD_ADDR_VAR 0 3
40056: PUSH
40057: LD_INT 1
40059: ST_TO_ADDR
// if array1 = array2 then
40060: LD_VAR 0 1
40064: PUSH
40065: LD_VAR 0 2
40069: EQUAL
40070: IFFALSE 40130
// begin for i = 1 to array1 do
40072: LD_ADDR_VAR 0 4
40076: PUSH
40077: DOUBLE
40078: LD_INT 1
40080: DEC
40081: ST_TO_ADDR
40082: LD_VAR 0 1
40086: PUSH
40087: FOR_TO
40088: IFFALSE 40126
// if array1 [ i ] <> array2 [ i ] then
40090: LD_VAR 0 1
40094: PUSH
40095: LD_VAR 0 4
40099: ARRAY
40100: PUSH
40101: LD_VAR 0 2
40105: PUSH
40106: LD_VAR 0 4
40110: ARRAY
40111: NONEQUAL
40112: IFFALSE 40124
// begin result := false ;
40114: LD_ADDR_VAR 0 3
40118: PUSH
40119: LD_INT 0
40121: ST_TO_ADDR
// break ;
40122: GO 40126
// end ;
40124: GO 40087
40126: POP
40127: POP
// end else
40128: GO 40138
// result := false ;
40130: LD_ADDR_VAR 0 3
40134: PUSH
40135: LD_INT 0
40137: ST_TO_ADDR
// end ;
40138: LD_VAR 0 3
40142: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40143: LD_INT 0
40145: PPUSH
40146: PPUSH
// if not array1 or not array2 then
40147: LD_VAR 0 1
40151: NOT
40152: PUSH
40153: LD_VAR 0 2
40157: NOT
40158: OR
40159: IFFALSE 40163
// exit ;
40161: GO 40227
// result := true ;
40163: LD_ADDR_VAR 0 3
40167: PUSH
40168: LD_INT 1
40170: ST_TO_ADDR
// for i = 1 to array1 do
40171: LD_ADDR_VAR 0 4
40175: PUSH
40176: DOUBLE
40177: LD_INT 1
40179: DEC
40180: ST_TO_ADDR
40181: LD_VAR 0 1
40185: PUSH
40186: FOR_TO
40187: IFFALSE 40225
// if array1 [ i ] <> array2 [ i ] then
40189: LD_VAR 0 1
40193: PUSH
40194: LD_VAR 0 4
40198: ARRAY
40199: PUSH
40200: LD_VAR 0 2
40204: PUSH
40205: LD_VAR 0 4
40209: ARRAY
40210: NONEQUAL
40211: IFFALSE 40223
// begin result := false ;
40213: LD_ADDR_VAR 0 3
40217: PUSH
40218: LD_INT 0
40220: ST_TO_ADDR
// break ;
40221: GO 40225
// end ;
40223: GO 40186
40225: POP
40226: POP
// end ;
40227: LD_VAR 0 3
40231: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40232: LD_INT 0
40234: PPUSH
40235: PPUSH
40236: PPUSH
// pom := GetBase ( fac ) ;
40237: LD_ADDR_VAR 0 5
40241: PUSH
40242: LD_VAR 0 1
40246: PPUSH
40247: CALL_OW 274
40251: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40252: LD_ADDR_VAR 0 4
40256: PUSH
40257: LD_VAR 0 2
40261: PUSH
40262: LD_INT 1
40264: ARRAY
40265: PPUSH
40266: LD_VAR 0 2
40270: PUSH
40271: LD_INT 2
40273: ARRAY
40274: PPUSH
40275: LD_VAR 0 2
40279: PUSH
40280: LD_INT 3
40282: ARRAY
40283: PPUSH
40284: LD_VAR 0 2
40288: PUSH
40289: LD_INT 4
40291: ARRAY
40292: PPUSH
40293: CALL_OW 449
40297: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40298: LD_ADDR_VAR 0 3
40302: PUSH
40303: LD_VAR 0 5
40307: PPUSH
40308: LD_INT 1
40310: PPUSH
40311: CALL_OW 275
40315: PUSH
40316: LD_VAR 0 4
40320: PUSH
40321: LD_INT 1
40323: ARRAY
40324: GREATEREQUAL
40325: PUSH
40326: LD_VAR 0 5
40330: PPUSH
40331: LD_INT 2
40333: PPUSH
40334: CALL_OW 275
40338: PUSH
40339: LD_VAR 0 4
40343: PUSH
40344: LD_INT 2
40346: ARRAY
40347: GREATEREQUAL
40348: AND
40349: PUSH
40350: LD_VAR 0 5
40354: PPUSH
40355: LD_INT 3
40357: PPUSH
40358: CALL_OW 275
40362: PUSH
40363: LD_VAR 0 4
40367: PUSH
40368: LD_INT 3
40370: ARRAY
40371: GREATEREQUAL
40372: AND
40373: ST_TO_ADDR
// end ;
40374: LD_VAR 0 3
40378: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40379: LD_INT 0
40381: PPUSH
40382: PPUSH
40383: PPUSH
40384: PPUSH
// pom := GetBase ( building ) ;
40385: LD_ADDR_VAR 0 3
40389: PUSH
40390: LD_VAR 0 1
40394: PPUSH
40395: CALL_OW 274
40399: ST_TO_ADDR
// if not pom then
40400: LD_VAR 0 3
40404: NOT
40405: IFFALSE 40409
// exit ;
40407: GO 40579
// btype := GetBType ( building ) ;
40409: LD_ADDR_VAR 0 5
40413: PUSH
40414: LD_VAR 0 1
40418: PPUSH
40419: CALL_OW 266
40423: ST_TO_ADDR
// if btype = b_armoury then
40424: LD_VAR 0 5
40428: PUSH
40429: LD_INT 4
40431: EQUAL
40432: IFFALSE 40442
// btype := b_barracks ;
40434: LD_ADDR_VAR 0 5
40438: PUSH
40439: LD_INT 5
40441: ST_TO_ADDR
// if btype = b_depot then
40442: LD_VAR 0 5
40446: PUSH
40447: LD_INT 0
40449: EQUAL
40450: IFFALSE 40460
// btype := b_warehouse ;
40452: LD_ADDR_VAR 0 5
40456: PUSH
40457: LD_INT 1
40459: ST_TO_ADDR
// if btype = b_workshop then
40460: LD_VAR 0 5
40464: PUSH
40465: LD_INT 2
40467: EQUAL
40468: IFFALSE 40478
// btype := b_factory ;
40470: LD_ADDR_VAR 0 5
40474: PUSH
40475: LD_INT 3
40477: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40478: LD_ADDR_VAR 0 4
40482: PUSH
40483: LD_VAR 0 5
40487: PPUSH
40488: LD_VAR 0 1
40492: PPUSH
40493: CALL_OW 248
40497: PPUSH
40498: CALL_OW 450
40502: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40503: LD_ADDR_VAR 0 2
40507: PUSH
40508: LD_VAR 0 3
40512: PPUSH
40513: LD_INT 1
40515: PPUSH
40516: CALL_OW 275
40520: PUSH
40521: LD_VAR 0 4
40525: PUSH
40526: LD_INT 1
40528: ARRAY
40529: GREATEREQUAL
40530: PUSH
40531: LD_VAR 0 3
40535: PPUSH
40536: LD_INT 2
40538: PPUSH
40539: CALL_OW 275
40543: PUSH
40544: LD_VAR 0 4
40548: PUSH
40549: LD_INT 2
40551: ARRAY
40552: GREATEREQUAL
40553: AND
40554: PUSH
40555: LD_VAR 0 3
40559: PPUSH
40560: LD_INT 3
40562: PPUSH
40563: CALL_OW 275
40567: PUSH
40568: LD_VAR 0 4
40572: PUSH
40573: LD_INT 3
40575: ARRAY
40576: GREATEREQUAL
40577: AND
40578: ST_TO_ADDR
// end ;
40579: LD_VAR 0 2
40583: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40584: LD_INT 0
40586: PPUSH
40587: PPUSH
40588: PPUSH
// pom := GetBase ( building ) ;
40589: LD_ADDR_VAR 0 4
40593: PUSH
40594: LD_VAR 0 1
40598: PPUSH
40599: CALL_OW 274
40603: ST_TO_ADDR
// if not pom then
40604: LD_VAR 0 4
40608: NOT
40609: IFFALSE 40613
// exit ;
40611: GO 40714
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40613: LD_ADDR_VAR 0 5
40617: PUSH
40618: LD_VAR 0 2
40622: PPUSH
40623: LD_VAR 0 1
40627: PPUSH
40628: CALL_OW 248
40632: PPUSH
40633: CALL_OW 450
40637: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40638: LD_ADDR_VAR 0 3
40642: PUSH
40643: LD_VAR 0 4
40647: PPUSH
40648: LD_INT 1
40650: PPUSH
40651: CALL_OW 275
40655: PUSH
40656: LD_VAR 0 5
40660: PUSH
40661: LD_INT 1
40663: ARRAY
40664: GREATEREQUAL
40665: PUSH
40666: LD_VAR 0 4
40670: PPUSH
40671: LD_INT 2
40673: PPUSH
40674: CALL_OW 275
40678: PUSH
40679: LD_VAR 0 5
40683: PUSH
40684: LD_INT 2
40686: ARRAY
40687: GREATEREQUAL
40688: AND
40689: PUSH
40690: LD_VAR 0 4
40694: PPUSH
40695: LD_INT 3
40697: PPUSH
40698: CALL_OW 275
40702: PUSH
40703: LD_VAR 0 5
40707: PUSH
40708: LD_INT 3
40710: ARRAY
40711: GREATEREQUAL
40712: AND
40713: ST_TO_ADDR
// end ;
40714: LD_VAR 0 3
40718: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40719: LD_INT 0
40721: PPUSH
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
40726: PPUSH
40727: PPUSH
40728: PPUSH
40729: PPUSH
40730: PPUSH
40731: PPUSH
// result := false ;
40732: LD_ADDR_VAR 0 8
40736: PUSH
40737: LD_INT 0
40739: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40740: LD_VAR 0 5
40744: NOT
40745: PUSH
40746: LD_VAR 0 1
40750: NOT
40751: OR
40752: PUSH
40753: LD_VAR 0 2
40757: NOT
40758: OR
40759: PUSH
40760: LD_VAR 0 3
40764: NOT
40765: OR
40766: IFFALSE 40770
// exit ;
40768: GO 41584
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40770: LD_ADDR_VAR 0 14
40774: PUSH
40775: LD_VAR 0 1
40779: PPUSH
40780: LD_VAR 0 2
40784: PPUSH
40785: LD_VAR 0 3
40789: PPUSH
40790: LD_VAR 0 4
40794: PPUSH
40795: LD_VAR 0 5
40799: PUSH
40800: LD_INT 1
40802: ARRAY
40803: PPUSH
40804: CALL_OW 248
40808: PPUSH
40809: LD_INT 0
40811: PPUSH
40812: CALL 42821 0 6
40816: ST_TO_ADDR
// if not hexes then
40817: LD_VAR 0 14
40821: NOT
40822: IFFALSE 40826
// exit ;
40824: GO 41584
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40826: LD_ADDR_VAR 0 17
40830: PUSH
40831: LD_VAR 0 5
40835: PPUSH
40836: LD_INT 22
40838: PUSH
40839: LD_VAR 0 13
40843: PPUSH
40844: CALL_OW 255
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 2
40855: PUSH
40856: LD_INT 30
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 30
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: LIST
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PPUSH
40885: CALL_OW 72
40889: ST_TO_ADDR
// for i = 1 to hexes do
40890: LD_ADDR_VAR 0 9
40894: PUSH
40895: DOUBLE
40896: LD_INT 1
40898: DEC
40899: ST_TO_ADDR
40900: LD_VAR 0 14
40904: PUSH
40905: FOR_TO
40906: IFFALSE 41582
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40908: LD_ADDR_VAR 0 13
40912: PUSH
40913: LD_VAR 0 14
40917: PUSH
40918: LD_VAR 0 9
40922: ARRAY
40923: PUSH
40924: LD_INT 1
40926: ARRAY
40927: PPUSH
40928: LD_VAR 0 14
40932: PUSH
40933: LD_VAR 0 9
40937: ARRAY
40938: PUSH
40939: LD_INT 2
40941: ARRAY
40942: PPUSH
40943: CALL_OW 428
40947: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40948: LD_VAR 0 14
40952: PUSH
40953: LD_VAR 0 9
40957: ARRAY
40958: PUSH
40959: LD_INT 1
40961: ARRAY
40962: PPUSH
40963: LD_VAR 0 14
40967: PUSH
40968: LD_VAR 0 9
40972: ARRAY
40973: PUSH
40974: LD_INT 2
40976: ARRAY
40977: PPUSH
40978: CALL_OW 351
40982: PUSH
40983: LD_VAR 0 14
40987: PUSH
40988: LD_VAR 0 9
40992: ARRAY
40993: PUSH
40994: LD_INT 1
40996: ARRAY
40997: PPUSH
40998: LD_VAR 0 14
41002: PUSH
41003: LD_VAR 0 9
41007: ARRAY
41008: PUSH
41009: LD_INT 2
41011: ARRAY
41012: PPUSH
41013: CALL_OW 488
41017: NOT
41018: OR
41019: PUSH
41020: LD_VAR 0 13
41024: PPUSH
41025: CALL_OW 247
41029: PUSH
41030: LD_INT 3
41032: EQUAL
41033: OR
41034: IFFALSE 41040
// exit ;
41036: POP
41037: POP
41038: GO 41584
// if not tmp then
41040: LD_VAR 0 13
41044: NOT
41045: IFFALSE 41049
// continue ;
41047: GO 40905
// result := true ;
41049: LD_ADDR_VAR 0 8
41053: PUSH
41054: LD_INT 1
41056: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41057: LD_VAR 0 6
41061: PUSH
41062: LD_VAR 0 13
41066: PPUSH
41067: CALL_OW 247
41071: PUSH
41072: LD_INT 2
41074: EQUAL
41075: AND
41076: PUSH
41077: LD_VAR 0 13
41081: PPUSH
41082: CALL_OW 263
41086: PUSH
41087: LD_INT 1
41089: EQUAL
41090: AND
41091: IFFALSE 41255
// begin if IsDrivenBy ( tmp ) then
41093: LD_VAR 0 13
41097: PPUSH
41098: CALL_OW 311
41102: IFFALSE 41106
// continue ;
41104: GO 40905
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41106: LD_VAR 0 6
41110: PPUSH
41111: LD_INT 3
41113: PUSH
41114: LD_INT 60
41116: PUSH
41117: EMPTY
41118: LIST
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 3
41126: PUSH
41127: LD_INT 55
41129: PUSH
41130: EMPTY
41131: LIST
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PPUSH
41141: CALL_OW 72
41145: IFFALSE 41253
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41147: LD_ADDR_VAR 0 18
41151: PUSH
41152: LD_VAR 0 6
41156: PPUSH
41157: LD_INT 3
41159: PUSH
41160: LD_INT 60
41162: PUSH
41163: EMPTY
41164: LIST
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 3
41172: PUSH
41173: LD_INT 55
41175: PUSH
41176: EMPTY
41177: LIST
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PPUSH
41187: CALL_OW 72
41191: PUSH
41192: LD_INT 1
41194: ARRAY
41195: ST_TO_ADDR
// if IsInUnit ( driver ) then
41196: LD_VAR 0 18
41200: PPUSH
41201: CALL_OW 310
41205: IFFALSE 41216
// ComExit ( driver ) ;
41207: LD_VAR 0 18
41211: PPUSH
41212: CALL 66005 0 1
// AddComEnterUnit ( driver , tmp ) ;
41216: LD_VAR 0 18
41220: PPUSH
41221: LD_VAR 0 13
41225: PPUSH
41226: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41230: LD_VAR 0 18
41234: PPUSH
41235: LD_VAR 0 7
41239: PPUSH
41240: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41244: LD_VAR 0 18
41248: PPUSH
41249: CALL_OW 181
// end ; continue ;
41253: GO 40905
// end ; if not cleaners or not tmp in cleaners then
41255: LD_VAR 0 6
41259: NOT
41260: PUSH
41261: LD_VAR 0 13
41265: PUSH
41266: LD_VAR 0 6
41270: IN
41271: NOT
41272: OR
41273: IFFALSE 41580
// begin if dep then
41275: LD_VAR 0 17
41279: IFFALSE 41415
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41281: LD_ADDR_VAR 0 16
41285: PUSH
41286: LD_VAR 0 17
41290: PUSH
41291: LD_INT 1
41293: ARRAY
41294: PPUSH
41295: CALL_OW 250
41299: PPUSH
41300: LD_VAR 0 17
41304: PUSH
41305: LD_INT 1
41307: ARRAY
41308: PPUSH
41309: CALL_OW 254
41313: PPUSH
41314: LD_INT 5
41316: PPUSH
41317: CALL_OW 272
41321: PUSH
41322: LD_VAR 0 17
41326: PUSH
41327: LD_INT 1
41329: ARRAY
41330: PPUSH
41331: CALL_OW 251
41335: PPUSH
41336: LD_VAR 0 17
41340: PUSH
41341: LD_INT 1
41343: ARRAY
41344: PPUSH
41345: CALL_OW 254
41349: PPUSH
41350: LD_INT 5
41352: PPUSH
41353: CALL_OW 273
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41362: LD_VAR 0 16
41366: PUSH
41367: LD_INT 1
41369: ARRAY
41370: PPUSH
41371: LD_VAR 0 16
41375: PUSH
41376: LD_INT 2
41378: ARRAY
41379: PPUSH
41380: CALL_OW 488
41384: IFFALSE 41415
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41386: LD_VAR 0 13
41390: PPUSH
41391: LD_VAR 0 16
41395: PUSH
41396: LD_INT 1
41398: ARRAY
41399: PPUSH
41400: LD_VAR 0 16
41404: PUSH
41405: LD_INT 2
41407: ARRAY
41408: PPUSH
41409: CALL_OW 111
// continue ;
41413: GO 40905
// end ; end ; r := GetDir ( tmp ) ;
41415: LD_ADDR_VAR 0 15
41419: PUSH
41420: LD_VAR 0 13
41424: PPUSH
41425: CALL_OW 254
41429: ST_TO_ADDR
// if r = 5 then
41430: LD_VAR 0 15
41434: PUSH
41435: LD_INT 5
41437: EQUAL
41438: IFFALSE 41448
// r := 0 ;
41440: LD_ADDR_VAR 0 15
41444: PUSH
41445: LD_INT 0
41447: ST_TO_ADDR
// for j = r to 5 do
41448: LD_ADDR_VAR 0 10
41452: PUSH
41453: DOUBLE
41454: LD_VAR 0 15
41458: DEC
41459: ST_TO_ADDR
41460: LD_INT 5
41462: PUSH
41463: FOR_TO
41464: IFFALSE 41578
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41466: LD_ADDR_VAR 0 11
41470: PUSH
41471: LD_VAR 0 13
41475: PPUSH
41476: CALL_OW 250
41480: PPUSH
41481: LD_VAR 0 10
41485: PPUSH
41486: LD_INT 2
41488: PPUSH
41489: CALL_OW 272
41493: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41494: LD_ADDR_VAR 0 12
41498: PUSH
41499: LD_VAR 0 13
41503: PPUSH
41504: CALL_OW 251
41508: PPUSH
41509: LD_VAR 0 10
41513: PPUSH
41514: LD_INT 2
41516: PPUSH
41517: CALL_OW 273
41521: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41522: LD_VAR 0 11
41526: PPUSH
41527: LD_VAR 0 12
41531: PPUSH
41532: CALL_OW 488
41536: PUSH
41537: LD_VAR 0 11
41541: PPUSH
41542: LD_VAR 0 12
41546: PPUSH
41547: CALL_OW 428
41551: NOT
41552: AND
41553: IFFALSE 41576
// begin ComMoveXY ( tmp , _x , _y ) ;
41555: LD_VAR 0 13
41559: PPUSH
41560: LD_VAR 0 11
41564: PPUSH
41565: LD_VAR 0 12
41569: PPUSH
41570: CALL_OW 111
// break ;
41574: GO 41578
// end ; end ;
41576: GO 41463
41578: POP
41579: POP
// end ; end ;
41580: GO 40905
41582: POP
41583: POP
// end ;
41584: LD_VAR 0 8
41588: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41589: LD_INT 0
41591: PPUSH
// result := true ;
41592: LD_ADDR_VAR 0 3
41596: PUSH
41597: LD_INT 1
41599: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41600: LD_VAR 0 2
41604: PUSH
41605: LD_INT 24
41607: DOUBLE
41608: EQUAL
41609: IFTRUE 41619
41611: LD_INT 33
41613: DOUBLE
41614: EQUAL
41615: IFTRUE 41619
41617: GO 41644
41619: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41620: LD_ADDR_VAR 0 3
41624: PUSH
41625: LD_INT 32
41627: PPUSH
41628: LD_VAR 0 1
41632: PPUSH
41633: CALL_OW 321
41637: PUSH
41638: LD_INT 2
41640: EQUAL
41641: ST_TO_ADDR
41642: GO 41964
41644: LD_INT 20
41646: DOUBLE
41647: EQUAL
41648: IFTRUE 41652
41650: GO 41677
41652: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41653: LD_ADDR_VAR 0 3
41657: PUSH
41658: LD_INT 6
41660: PPUSH
41661: LD_VAR 0 1
41665: PPUSH
41666: CALL_OW 321
41670: PUSH
41671: LD_INT 2
41673: EQUAL
41674: ST_TO_ADDR
41675: GO 41964
41677: LD_INT 22
41679: DOUBLE
41680: EQUAL
41681: IFTRUE 41691
41683: LD_INT 36
41685: DOUBLE
41686: EQUAL
41687: IFTRUE 41691
41689: GO 41716
41691: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41692: LD_ADDR_VAR 0 3
41696: PUSH
41697: LD_INT 15
41699: PPUSH
41700: LD_VAR 0 1
41704: PPUSH
41705: CALL_OW 321
41709: PUSH
41710: LD_INT 2
41712: EQUAL
41713: ST_TO_ADDR
41714: GO 41964
41716: LD_INT 30
41718: DOUBLE
41719: EQUAL
41720: IFTRUE 41724
41722: GO 41749
41724: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41725: LD_ADDR_VAR 0 3
41729: PUSH
41730: LD_INT 20
41732: PPUSH
41733: LD_VAR 0 1
41737: PPUSH
41738: CALL_OW 321
41742: PUSH
41743: LD_INT 2
41745: EQUAL
41746: ST_TO_ADDR
41747: GO 41964
41749: LD_INT 28
41751: DOUBLE
41752: EQUAL
41753: IFTRUE 41763
41755: LD_INT 21
41757: DOUBLE
41758: EQUAL
41759: IFTRUE 41763
41761: GO 41788
41763: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41764: LD_ADDR_VAR 0 3
41768: PUSH
41769: LD_INT 21
41771: PPUSH
41772: LD_VAR 0 1
41776: PPUSH
41777: CALL_OW 321
41781: PUSH
41782: LD_INT 2
41784: EQUAL
41785: ST_TO_ADDR
41786: GO 41964
41788: LD_INT 16
41790: DOUBLE
41791: EQUAL
41792: IFTRUE 41796
41794: GO 41823
41796: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41797: LD_ADDR_VAR 0 3
41801: PUSH
41802: LD_EXP 124
41806: PPUSH
41807: LD_VAR 0 1
41811: PPUSH
41812: CALL_OW 321
41816: PUSH
41817: LD_INT 2
41819: EQUAL
41820: ST_TO_ADDR
41821: GO 41964
41823: LD_INT 19
41825: DOUBLE
41826: EQUAL
41827: IFTRUE 41837
41829: LD_INT 23
41831: DOUBLE
41832: EQUAL
41833: IFTRUE 41837
41835: GO 41864
41837: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41838: LD_ADDR_VAR 0 3
41842: PUSH
41843: LD_EXP 123
41847: PPUSH
41848: LD_VAR 0 1
41852: PPUSH
41853: CALL_OW 321
41857: PUSH
41858: LD_INT 2
41860: EQUAL
41861: ST_TO_ADDR
41862: GO 41964
41864: LD_INT 17
41866: DOUBLE
41867: EQUAL
41868: IFTRUE 41872
41870: GO 41897
41872: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41873: LD_ADDR_VAR 0 3
41877: PUSH
41878: LD_INT 39
41880: PPUSH
41881: LD_VAR 0 1
41885: PPUSH
41886: CALL_OW 321
41890: PUSH
41891: LD_INT 2
41893: EQUAL
41894: ST_TO_ADDR
41895: GO 41964
41897: LD_INT 18
41899: DOUBLE
41900: EQUAL
41901: IFTRUE 41905
41903: GO 41930
41905: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41906: LD_ADDR_VAR 0 3
41910: PUSH
41911: LD_INT 40
41913: PPUSH
41914: LD_VAR 0 1
41918: PPUSH
41919: CALL_OW 321
41923: PUSH
41924: LD_INT 2
41926: EQUAL
41927: ST_TO_ADDR
41928: GO 41964
41930: LD_INT 27
41932: DOUBLE
41933: EQUAL
41934: IFTRUE 41938
41936: GO 41963
41938: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41939: LD_ADDR_VAR 0 3
41943: PUSH
41944: LD_INT 35
41946: PPUSH
41947: LD_VAR 0 1
41951: PPUSH
41952: CALL_OW 321
41956: PUSH
41957: LD_INT 2
41959: EQUAL
41960: ST_TO_ADDR
41961: GO 41964
41963: POP
// end ;
41964: LD_VAR 0 3
41968: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41969: LD_INT 0
41971: PPUSH
41972: PPUSH
41973: PPUSH
41974: PPUSH
41975: PPUSH
41976: PPUSH
41977: PPUSH
41978: PPUSH
41979: PPUSH
41980: PPUSH
41981: PPUSH
// result := false ;
41982: LD_ADDR_VAR 0 6
41986: PUSH
41987: LD_INT 0
41989: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41990: LD_VAR 0 1
41994: NOT
41995: PUSH
41996: LD_VAR 0 1
42000: PPUSH
42001: CALL_OW 266
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: IN
42016: NOT
42017: OR
42018: PUSH
42019: LD_VAR 0 2
42023: NOT
42024: OR
42025: PUSH
42026: LD_VAR 0 5
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 2
42039: PUSH
42040: LD_INT 3
42042: PUSH
42043: LD_INT 4
42045: PUSH
42046: LD_INT 5
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: IN
42057: NOT
42058: OR
42059: PUSH
42060: LD_VAR 0 3
42064: PPUSH
42065: LD_VAR 0 4
42069: PPUSH
42070: CALL_OW 488
42074: NOT
42075: OR
42076: IFFALSE 42080
// exit ;
42078: GO 42816
// side := GetSide ( depot ) ;
42080: LD_ADDR_VAR 0 9
42084: PUSH
42085: LD_VAR 0 1
42089: PPUSH
42090: CALL_OW 255
42094: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42095: LD_VAR 0 9
42099: PPUSH
42100: LD_VAR 0 2
42104: PPUSH
42105: CALL 41589 0 2
42109: NOT
42110: IFFALSE 42114
// exit ;
42112: GO 42816
// pom := GetBase ( depot ) ;
42114: LD_ADDR_VAR 0 10
42118: PUSH
42119: LD_VAR 0 1
42123: PPUSH
42124: CALL_OW 274
42128: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42129: LD_ADDR_VAR 0 11
42133: PUSH
42134: LD_VAR 0 2
42138: PPUSH
42139: LD_VAR 0 1
42143: PPUSH
42144: CALL_OW 248
42148: PPUSH
42149: CALL_OW 450
42153: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42154: LD_VAR 0 10
42158: PPUSH
42159: LD_INT 1
42161: PPUSH
42162: CALL_OW 275
42166: PUSH
42167: LD_VAR 0 11
42171: PUSH
42172: LD_INT 1
42174: ARRAY
42175: GREATEREQUAL
42176: PUSH
42177: LD_VAR 0 10
42181: PPUSH
42182: LD_INT 2
42184: PPUSH
42185: CALL_OW 275
42189: PUSH
42190: LD_VAR 0 11
42194: PUSH
42195: LD_INT 2
42197: ARRAY
42198: GREATEREQUAL
42199: AND
42200: PUSH
42201: LD_VAR 0 10
42205: PPUSH
42206: LD_INT 3
42208: PPUSH
42209: CALL_OW 275
42213: PUSH
42214: LD_VAR 0 11
42218: PUSH
42219: LD_INT 3
42221: ARRAY
42222: GREATEREQUAL
42223: AND
42224: NOT
42225: IFFALSE 42229
// exit ;
42227: GO 42816
// if GetBType ( depot ) = b_depot then
42229: LD_VAR 0 1
42233: PPUSH
42234: CALL_OW 266
42238: PUSH
42239: LD_INT 0
42241: EQUAL
42242: IFFALSE 42254
// dist := 28 else
42244: LD_ADDR_VAR 0 14
42248: PUSH
42249: LD_INT 28
42251: ST_TO_ADDR
42252: GO 42262
// dist := 36 ;
42254: LD_ADDR_VAR 0 14
42258: PUSH
42259: LD_INT 36
42261: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42262: LD_VAR 0 1
42266: PPUSH
42267: LD_VAR 0 3
42271: PPUSH
42272: LD_VAR 0 4
42276: PPUSH
42277: CALL_OW 297
42281: PUSH
42282: LD_VAR 0 14
42286: GREATER
42287: IFFALSE 42291
// exit ;
42289: GO 42816
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42291: LD_ADDR_VAR 0 12
42295: PUSH
42296: LD_VAR 0 2
42300: PPUSH
42301: LD_VAR 0 3
42305: PPUSH
42306: LD_VAR 0 4
42310: PPUSH
42311: LD_VAR 0 5
42315: PPUSH
42316: LD_VAR 0 1
42320: PPUSH
42321: CALL_OW 248
42325: PPUSH
42326: LD_INT 0
42328: PPUSH
42329: CALL 42821 0 6
42333: ST_TO_ADDR
// if not hexes then
42334: LD_VAR 0 12
42338: NOT
42339: IFFALSE 42343
// exit ;
42341: GO 42816
// hex := GetHexInfo ( x , y ) ;
42343: LD_ADDR_VAR 0 15
42347: PUSH
42348: LD_VAR 0 3
42352: PPUSH
42353: LD_VAR 0 4
42357: PPUSH
42358: CALL_OW 546
42362: ST_TO_ADDR
// if hex [ 1 ] then
42363: LD_VAR 0 15
42367: PUSH
42368: LD_INT 1
42370: ARRAY
42371: IFFALSE 42375
// exit ;
42373: GO 42816
// height := hex [ 2 ] ;
42375: LD_ADDR_VAR 0 13
42379: PUSH
42380: LD_VAR 0 15
42384: PUSH
42385: LD_INT 2
42387: ARRAY
42388: ST_TO_ADDR
// for i = 1 to hexes do
42389: LD_ADDR_VAR 0 7
42393: PUSH
42394: DOUBLE
42395: LD_INT 1
42397: DEC
42398: ST_TO_ADDR
42399: LD_VAR 0 12
42403: PUSH
42404: FOR_TO
42405: IFFALSE 42735
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42407: LD_VAR 0 12
42411: PUSH
42412: LD_VAR 0 7
42416: ARRAY
42417: PUSH
42418: LD_INT 1
42420: ARRAY
42421: PPUSH
42422: LD_VAR 0 12
42426: PUSH
42427: LD_VAR 0 7
42431: ARRAY
42432: PUSH
42433: LD_INT 2
42435: ARRAY
42436: PPUSH
42437: CALL_OW 488
42441: NOT
42442: PUSH
42443: LD_VAR 0 12
42447: PUSH
42448: LD_VAR 0 7
42452: ARRAY
42453: PUSH
42454: LD_INT 1
42456: ARRAY
42457: PPUSH
42458: LD_VAR 0 12
42462: PUSH
42463: LD_VAR 0 7
42467: ARRAY
42468: PUSH
42469: LD_INT 2
42471: ARRAY
42472: PPUSH
42473: CALL_OW 428
42477: PUSH
42478: LD_INT 0
42480: GREATER
42481: OR
42482: PUSH
42483: LD_VAR 0 12
42487: PUSH
42488: LD_VAR 0 7
42492: ARRAY
42493: PUSH
42494: LD_INT 1
42496: ARRAY
42497: PPUSH
42498: LD_VAR 0 12
42502: PUSH
42503: LD_VAR 0 7
42507: ARRAY
42508: PUSH
42509: LD_INT 2
42511: ARRAY
42512: PPUSH
42513: CALL_OW 351
42517: OR
42518: IFFALSE 42524
// exit ;
42520: POP
42521: POP
42522: GO 42816
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42524: LD_ADDR_VAR 0 8
42528: PUSH
42529: LD_VAR 0 12
42533: PUSH
42534: LD_VAR 0 7
42538: ARRAY
42539: PUSH
42540: LD_INT 1
42542: ARRAY
42543: PPUSH
42544: LD_VAR 0 12
42548: PUSH
42549: LD_VAR 0 7
42553: ARRAY
42554: PUSH
42555: LD_INT 2
42557: ARRAY
42558: PPUSH
42559: CALL_OW 546
42563: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42564: LD_VAR 0 8
42568: PUSH
42569: LD_INT 1
42571: ARRAY
42572: PUSH
42573: LD_VAR 0 8
42577: PUSH
42578: LD_INT 2
42580: ARRAY
42581: PUSH
42582: LD_VAR 0 13
42586: PUSH
42587: LD_INT 2
42589: PLUS
42590: GREATER
42591: OR
42592: PUSH
42593: LD_VAR 0 8
42597: PUSH
42598: LD_INT 2
42600: ARRAY
42601: PUSH
42602: LD_VAR 0 13
42606: PUSH
42607: LD_INT 2
42609: MINUS
42610: LESS
42611: OR
42612: PUSH
42613: LD_VAR 0 8
42617: PUSH
42618: LD_INT 3
42620: ARRAY
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: LD_INT 8
42627: PUSH
42628: LD_INT 9
42630: PUSH
42631: LD_INT 10
42633: PUSH
42634: LD_INT 11
42636: PUSH
42637: LD_INT 12
42639: PUSH
42640: LD_INT 13
42642: PUSH
42643: LD_INT 16
42645: PUSH
42646: LD_INT 17
42648: PUSH
42649: LD_INT 18
42651: PUSH
42652: LD_INT 19
42654: PUSH
42655: LD_INT 20
42657: PUSH
42658: LD_INT 21
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: IN
42676: NOT
42677: OR
42678: PUSH
42679: LD_VAR 0 8
42683: PUSH
42684: LD_INT 5
42686: ARRAY
42687: NOT
42688: OR
42689: PUSH
42690: LD_VAR 0 8
42694: PUSH
42695: LD_INT 6
42697: ARRAY
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: LD_INT 7
42707: PUSH
42708: LD_INT 9
42710: PUSH
42711: LD_INT 10
42713: PUSH
42714: LD_INT 11
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: IN
42725: NOT
42726: OR
42727: IFFALSE 42733
// exit ;
42729: POP
42730: POP
42731: GO 42816
// end ;
42733: GO 42404
42735: POP
42736: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42737: LD_VAR 0 9
42741: PPUSH
42742: LD_VAR 0 3
42746: PPUSH
42747: LD_VAR 0 4
42751: PPUSH
42752: LD_INT 20
42754: PPUSH
42755: CALL 34762 0 4
42759: PUSH
42760: LD_INT 4
42762: ARRAY
42763: IFFALSE 42767
// exit ;
42765: GO 42816
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42767: LD_VAR 0 2
42771: PUSH
42772: LD_INT 29
42774: PUSH
42775: LD_INT 30
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: IN
42782: PUSH
42783: LD_VAR 0 3
42787: PPUSH
42788: LD_VAR 0 4
42792: PPUSH
42793: LD_VAR 0 9
42797: PPUSH
42798: CALL_OW 440
42802: NOT
42803: AND
42804: IFFALSE 42808
// exit ;
42806: GO 42816
// result := true ;
42808: LD_ADDR_VAR 0 6
42812: PUSH
42813: LD_INT 1
42815: ST_TO_ADDR
// end ;
42816: LD_VAR 0 6
42820: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42821: LD_INT 0
42823: PPUSH
42824: PPUSH
42825: PPUSH
42826: PPUSH
42827: PPUSH
42828: PPUSH
42829: PPUSH
42830: PPUSH
42831: PPUSH
42832: PPUSH
42833: PPUSH
42834: PPUSH
42835: PPUSH
42836: PPUSH
42837: PPUSH
42838: PPUSH
42839: PPUSH
42840: PPUSH
42841: PPUSH
42842: PPUSH
42843: PPUSH
42844: PPUSH
42845: PPUSH
42846: PPUSH
42847: PPUSH
42848: PPUSH
42849: PPUSH
42850: PPUSH
42851: PPUSH
42852: PPUSH
42853: PPUSH
42854: PPUSH
42855: PPUSH
42856: PPUSH
42857: PPUSH
42858: PPUSH
42859: PPUSH
42860: PPUSH
42861: PPUSH
42862: PPUSH
42863: PPUSH
42864: PPUSH
42865: PPUSH
42866: PPUSH
42867: PPUSH
42868: PPUSH
42869: PPUSH
42870: PPUSH
42871: PPUSH
42872: PPUSH
42873: PPUSH
42874: PPUSH
42875: PPUSH
42876: PPUSH
42877: PPUSH
42878: PPUSH
42879: PPUSH
42880: PPUSH
// result = [ ] ;
42881: LD_ADDR_VAR 0 7
42885: PUSH
42886: EMPTY
42887: ST_TO_ADDR
// temp_list = [ ] ;
42888: LD_ADDR_VAR 0 9
42892: PUSH
42893: EMPTY
42894: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42895: LD_VAR 0 4
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: LD_INT 2
42908: PUSH
42909: LD_INT 3
42911: PUSH
42912: LD_INT 4
42914: PUSH
42915: LD_INT 5
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: IN
42926: NOT
42927: PUSH
42928: LD_VAR 0 1
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: IN
42943: PUSH
42944: LD_VAR 0 5
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: LD_INT 2
42954: PUSH
42955: LD_INT 3
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: LIST
42962: IN
42963: NOT
42964: AND
42965: OR
42966: IFFALSE 42970
// exit ;
42968: GO 61361
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42970: LD_VAR 0 1
42974: PUSH
42975: LD_INT 6
42977: PUSH
42978: LD_INT 7
42980: PUSH
42981: LD_INT 8
42983: PUSH
42984: LD_INT 13
42986: PUSH
42987: LD_INT 12
42989: PUSH
42990: LD_INT 15
42992: PUSH
42993: LD_INT 11
42995: PUSH
42996: LD_INT 14
42998: PUSH
42999: LD_INT 10
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: IN
43013: IFFALSE 43023
// btype = b_lab ;
43015: LD_ADDR_VAR 0 1
43019: PUSH
43020: LD_INT 6
43022: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43023: LD_VAR 0 6
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: LIST
43041: IN
43042: NOT
43043: PUSH
43044: LD_VAR 0 1
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: LD_INT 2
43057: PUSH
43058: LD_INT 3
43060: PUSH
43061: LD_INT 6
43063: PUSH
43064: LD_INT 36
43066: PUSH
43067: LD_INT 4
43069: PUSH
43070: LD_INT 5
43072: PUSH
43073: LD_INT 31
43075: PUSH
43076: LD_INT 32
43078: PUSH
43079: LD_INT 33
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: IN
43095: NOT
43096: PUSH
43097: LD_VAR 0 6
43101: PUSH
43102: LD_INT 1
43104: EQUAL
43105: AND
43106: OR
43107: PUSH
43108: LD_VAR 0 1
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: LD_INT 3
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: IN
43123: NOT
43124: PUSH
43125: LD_VAR 0 6
43129: PUSH
43130: LD_INT 2
43132: EQUAL
43133: AND
43134: OR
43135: IFFALSE 43145
// mode = 0 ;
43137: LD_ADDR_VAR 0 6
43141: PUSH
43142: LD_INT 0
43144: ST_TO_ADDR
// case mode of 0 :
43145: LD_VAR 0 6
43149: PUSH
43150: LD_INT 0
43152: DOUBLE
43153: EQUAL
43154: IFTRUE 43158
43156: GO 54611
43158: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43159: LD_ADDR_VAR 0 11
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: LD_INT 2
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: LD_INT 2
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: LD_INT 2
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 2
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 3
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 3
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43352: LD_ADDR_VAR 0 12
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 2
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 2
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 2
43475: NEG
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 2
43486: NEG
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 3
43509: NEG
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 3
43520: NEG
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43548: LD_ADDR_VAR 0 13
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 2
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 2
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 2
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: LD_INT 2
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 2
43671: NEG
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: LD_INT 2
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: LD_INT 3
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 3
43707: NEG
43708: PUSH
43709: LD_INT 2
43711: NEG
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 3
43719: NEG
43720: PUSH
43721: LD_INT 3
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43747: LD_ADDR_VAR 0 14
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: LD_INT 2
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: LD_INT 3
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 3
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 2
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43943: LD_ADDR_VAR 0 15
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: NEG
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 2
44077: NEG
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 3
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 3
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44136: LD_ADDR_VAR 0 16
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: LD_INT 1
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: LD_INT 2
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 2
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 2
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 2
44259: NEG
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 2
44271: NEG
44272: PUSH
44273: LD_INT 2
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 3
44283: PUSH
44284: LD_INT 2
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 3
44293: PUSH
44294: LD_INT 3
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: LD_INT 3
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44329: LD_ADDR_VAR 0 17
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: LD_INT 2
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 2
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 2
44505: NEG
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: LD_INT 2
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44559: LD_ADDR_VAR 0 18
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: LD_INT 2
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: LD_INT 2
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 2
44746: NEG
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 2
44758: NEG
44759: PUSH
44760: LD_INT 2
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44789: LD_ADDR_VAR 0 19
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45019: LD_ADDR_VAR 0 20
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: LD_INT 2
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: LD_INT 2
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: LD_INT 2
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 2
45195: NEG
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: NEG
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 2
45218: NEG
45219: PUSH
45220: LD_INT 2
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45249: LD_ADDR_VAR 0 21
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: LD_INT 2
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: LD_INT 1
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: NEG
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 2
45448: NEG
45449: PUSH
45450: LD_INT 2
45452: NEG
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45479: LD_ADDR_VAR 0 22
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: LD_INT 2
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 2
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: NEG
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 2
45666: NEG
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: NEG
45679: PUSH
45680: LD_INT 2
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45709: LD_ADDR_VAR 0 23
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 2
45908: NEG
45909: PUSH
45910: LD_INT 2
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 2
45920: NEG
45921: PUSH
45922: LD_INT 3
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: LD_INT 3
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: LD_INT 2
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 2
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45989: LD_ADDR_VAR 0 24
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: LD_INT 2
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 3
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 3
46232: PUSH
46233: LD_INT 2
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46265: LD_ADDR_VAR 0 25
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: LD_INT 2
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 2
46441: NEG
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 2
46452: NEG
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: NEG
46465: PUSH
46466: LD_INT 2
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 3
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 3
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 3
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 3
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46539: LD_ADDR_VAR 0 26
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: LD_INT 2
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: LD_INT 2
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: LD_INT 3
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 3
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46815: LD_ADDR_VAR 0 27
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: LD_INT 2
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: NEG
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 2
47014: NEG
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 3
47048: NEG
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 3
47060: NEG
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47095: LD_ADDR_VAR 0 28
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 2
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: NEG
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: LD_INT 3
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: LD_INT 3
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 3
47330: NEG
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 3
47342: NEG
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47377: LD_ADDR_VAR 0 29
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: LD_INT 2
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 2
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: LD_INT 3
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 2
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 3
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 3
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 3
47621: NEG
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47656: LD_ADDR_VAR 0 30
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: LD_INT 2
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: NEG
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: LD_INT 3
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: LD_INT 2
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 3
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 2
47878: PUSH
47879: LD_INT 3
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 2
47888: NEG
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 3
47899: NEG
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47934: LD_ADDR_VAR 0 31
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: LD_INT 2
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: LD_INT 3
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 3
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: LD_INT 3
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 3
48177: NEG
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48212: LD_ADDR_VAR 0 32
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: LD_INT 2
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: NEG
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 2
48389: NEG
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: LD_INT 3
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 3
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: LD_INT 3
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 3
48455: NEG
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48490: LD_ADDR_VAR 0 33
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 2
48668: NEG
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 2
48680: NEG
48681: PUSH
48682: LD_INT 3
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 3
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: LD_INT 3
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 3
48734: NEG
48735: PUSH
48736: LD_INT 2
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48769: LD_ADDR_VAR 0 34
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 2
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 2
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 2
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: LD_INT 3
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 3
48983: PUSH
48984: LD_INT 2
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 3
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: NEG
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 3
49014: NEG
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49049: LD_ADDR_VAR 0 35
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 2
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 2
49140: NEG
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49161: LD_ADDR_VAR 0 36
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49273: LD_ADDR_VAR 0 37
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49385: LD_ADDR_VAR 0 38
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49497: LD_ADDR_VAR 0 39
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: LD_INT 2
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: LD_INT 2
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49609: LD_ADDR_VAR 0 40
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49721: LD_ADDR_VAR 0 41
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 2
49911: NEG
49912: PUSH
49913: LD_INT 3
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 3
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 3
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 3
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 3
49964: PUSH
49965: LD_INT 3
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: LD_INT 3
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 3
49995: NEG
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 3
50006: NEG
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 3
50018: NEG
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 3
50030: NEG
50031: PUSH
50032: LD_INT 3
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50071: LD_ADDR_VAR 0 42
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: LD_INT 2
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 2
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 2
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: NEG
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 2
50261: NEG
50262: PUSH
50263: LD_INT 3
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: LD_INT 3
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: LD_INT 3
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: LD_INT 2
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 3
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: LD_INT 3
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: LD_INT 3
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 3
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 3
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 3
50368: NEG
50369: PUSH
50370: LD_INT 2
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 3
50380: NEG
50381: PUSH
50382: LD_INT 3
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50421: LD_ADDR_VAR 0 43
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: LD_INT 2
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: LD_INT 2
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 2
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 2
50598: NEG
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: LD_INT 3
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: LD_INT 3
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: LD_INT 2
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 2
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 3
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 3
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: LD_INT 3
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: LD_INT 3
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: LD_INT 2
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 3
50717: NEG
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 3
50728: NEG
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50769: LD_ADDR_VAR 0 44
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: LD_INT 2
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: LD_INT 3
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 3
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 3
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 3
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 3
51012: PUSH
51013: LD_INT 3
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 2
51022: PUSH
51023: LD_INT 3
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 3
51043: NEG
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: NEG
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 3
51066: NEG
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 3
51078: NEG
51079: PUSH
51080: LD_INT 3
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51119: LD_ADDR_VAR 0 45
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: LD_INT 2
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: LD_INT 3
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: LD_INT 3
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 3
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 3
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 3
51365: PUSH
51366: LD_INT 3
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: LD_INT 3
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: LD_INT 3
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: LD_INT 3
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: LD_INT 2
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 3
51416: NEG
51417: PUSH
51418: LD_INT 2
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 3
51428: NEG
51429: PUSH
51430: LD_INT 3
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51469: LD_ADDR_VAR 0 46
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: LD_INT 2
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 2
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: LD_INT 2
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 2
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: NEG
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 3
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 2
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 3
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 3
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: LD_INT 3
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: LD_INT 3
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: NEG
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 3
51765: NEG
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 3
51776: NEG
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51817: LD_ADDR_VAR 0 47
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: LD_INT 2
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51968: LD_ADDR_VAR 0 48
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: LD_INT 2
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 2
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52115: LD_ADDR_VAR 0 49
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 2
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: LD_INT 2
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52259: LD_ADDR_VAR 0 50
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 2
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 2
52350: PUSH
52351: LD_INT 2
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: LD_INT 2
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52403: LD_ADDR_VAR 0 51
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 2
52515: NEG
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52550: LD_ADDR_VAR 0 52
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: NEG
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 2
52677: NEG
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52701: LD_ADDR_VAR 0 53
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 2
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 2
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 2
52877: NEG
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 2
52888: NEG
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 2
52900: NEG
52901: PUSH
52902: LD_INT 2
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52931: LD_ADDR_VAR 0 54
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: LD_INT 2
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 2
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: LD_INT 2
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53161: LD_ADDR_VAR 0 55
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: LD_INT 2
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 2
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 2
53348: NEG
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 2
53360: NEG
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53391: LD_ADDR_VAR 0 56
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 2
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 2
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: LD_INT 2
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: NEG
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 2
53590: NEG
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53621: LD_ADDR_VAR 0 57
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: LD_INT 2
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: LD_INT 2
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 2
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: LD_INT 2
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: LD_INT 2
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: NEG
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 2
53808: NEG
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 2
53820: NEG
53821: PUSH
53822: LD_INT 2
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53851: LD_ADDR_VAR 0 58
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: LD_INT 2
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 2
54027: NEG
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54081: LD_ADDR_VAR 0 59
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54169: LD_ADDR_VAR 0 60
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54257: LD_ADDR_VAR 0 61
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54345: LD_ADDR_VAR 0 62
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54433: LD_ADDR_VAR 0 63
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54521: LD_ADDR_VAR 0 64
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: ST_TO_ADDR
// end ; 1 :
54609: GO 60506
54611: LD_INT 1
54613: DOUBLE
54614: EQUAL
54615: IFTRUE 54619
54617: GO 57242
54619: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54620: LD_ADDR_VAR 0 11
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 3
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 3
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 2
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: LIST
54663: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54664: LD_ADDR_VAR 0 12
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 3
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 3
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: LIST
54704: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54705: LD_ADDR_VAR 0 13
54709: PUSH
54710: LD_INT 3
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 3
54722: PUSH
54723: LD_INT 3
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: LD_INT 3
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54745: LD_ADDR_VAR 0 14
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: LD_INT 3
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: LIST
54785: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54786: LD_ADDR_VAR 0 15
54790: PUSH
54791: LD_INT 2
54793: NEG
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 3
54804: NEG
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 3
54815: NEG
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: LIST
54829: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54830: LD_ADDR_VAR 0 16
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: LD_INT 3
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 3
54849: NEG
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 3
54861: NEG
54862: PUSH
54863: LD_INT 3
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: LIST
54875: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54876: LD_ADDR_VAR 0 17
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: LD_INT 3
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 3
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: LD_INT 2
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: LIST
54919: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54920: LD_ADDR_VAR 0 18
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 3
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 3
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: LIST
54960: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54961: LD_ADDR_VAR 0 19
54965: PUSH
54966: LD_INT 3
54968: PUSH
54969: LD_INT 2
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 3
54978: PUSH
54979: LD_INT 3
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: LD_INT 3
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55001: LD_ADDR_VAR 0 20
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 3
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 2
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: LIST
55041: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55042: LD_ADDR_VAR 0 21
55046: PUSH
55047: LD_INT 2
55049: NEG
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 3
55060: NEG
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 3
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: LIST
55085: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55086: LD_ADDR_VAR 0 22
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: LD_INT 3
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 3
55105: NEG
55106: PUSH
55107: LD_INT 2
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: LD_INT 3
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: LIST
55131: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55132: LD_ADDR_VAR 0 23
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 3
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 4
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: LD_INT 3
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: LIST
55175: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55176: LD_ADDR_VAR 0 24
55180: PUSH
55181: LD_INT 3
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 3
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 4
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: LIST
55216: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55217: LD_ADDR_VAR 0 25
55221: PUSH
55222: LD_INT 3
55224: PUSH
55225: LD_INT 3
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 4
55234: PUSH
55235: LD_INT 3
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 3
55244: PUSH
55245: LD_INT 4
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: LIST
55256: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55257: LD_ADDR_VAR 0 26
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: LD_INT 3
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: LD_INT 4
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: LD_INT 3
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: LIST
55297: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55298: LD_ADDR_VAR 0 27
55302: PUSH
55303: LD_INT 3
55305: NEG
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 3
55316: NEG
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 4
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: LIST
55341: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55342: LD_ADDR_VAR 0 28
55346: PUSH
55347: LD_INT 3
55349: NEG
55350: PUSH
55351: LD_INT 3
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 3
55361: NEG
55362: PUSH
55363: LD_INT 4
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 4
55373: NEG
55374: PUSH
55375: LD_INT 3
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: LIST
55387: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55388: LD_ADDR_VAR 0 29
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 3
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: LD_INT 3
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: LD_INT 2
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 4
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: LD_INT 4
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: LD_INT 3
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: LD_INT 5
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 5
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: LD_INT 4
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: LD_INT 6
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 6
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: LD_INT 5
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55543: LD_ADDR_VAR 0 30
55547: PUSH
55548: LD_INT 2
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 3
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 3
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 3
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 4
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 4
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 4
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 5
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 5
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 5
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 6
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 6
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55686: LD_ADDR_VAR 0 31
55690: PUSH
55691: LD_INT 3
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 3
55703: PUSH
55704: LD_INT 3
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 2
55713: PUSH
55714: LD_INT 3
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 4
55723: PUSH
55724: LD_INT 3
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 4
55733: PUSH
55734: LD_INT 4
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 3
55743: PUSH
55744: LD_INT 4
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 5
55753: PUSH
55754: LD_INT 4
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 5
55763: PUSH
55764: LD_INT 5
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 4
55773: PUSH
55774: LD_INT 5
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 6
55783: PUSH
55784: LD_INT 5
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 6
55793: PUSH
55794: LD_INT 6
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 5
55803: PUSH
55804: LD_INT 6
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55825: LD_ADDR_VAR 0 32
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: LD_INT 3
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 3
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 4
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 4
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: LD_INT 3
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 5
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: LD_INT 5
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: LD_INT 4
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: PUSH
55926: LD_INT 6
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: LD_INT 6
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: NEG
55946: PUSH
55947: LD_INT 5
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55968: LD_ADDR_VAR 0 33
55972: PUSH
55973: LD_INT 2
55975: NEG
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 3
55986: NEG
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 3
55997: NEG
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 3
56009: NEG
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 4
56020: NEG
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 4
56031: NEG
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 4
56043: NEG
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 5
56054: NEG
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 5
56065: NEG
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 5
56077: NEG
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 6
56088: NEG
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 6
56099: NEG
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56123: LD_ADDR_VAR 0 34
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: LD_INT 3
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 3
56142: NEG
56143: PUSH
56144: LD_INT 2
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 3
56154: NEG
56155: PUSH
56156: LD_INT 3
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 3
56166: NEG
56167: PUSH
56168: LD_INT 4
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 4
56178: NEG
56179: PUSH
56180: LD_INT 3
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 4
56190: NEG
56191: PUSH
56192: LD_INT 4
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 4
56202: NEG
56203: PUSH
56204: LD_INT 5
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 5
56214: NEG
56215: PUSH
56216: LD_INT 4
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 5
56226: NEG
56227: PUSH
56228: LD_INT 5
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 5
56238: NEG
56239: PUSH
56240: LD_INT 6
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 6
56250: NEG
56251: PUSH
56252: LD_INT 5
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 6
56262: NEG
56263: PUSH
56264: LD_INT 6
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56286: LD_ADDR_VAR 0 41
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: NEG
56305: PUSH
56306: LD_INT 3
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: LD_INT 2
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: LIST
56329: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56330: LD_ADDR_VAR 0 42
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: LIST
56370: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56371: LD_ADDR_VAR 0 43
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 3
56388: PUSH
56389: LD_INT 2
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: LD_INT 3
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: LIST
56410: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56411: LD_ADDR_VAR 0 44
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: LD_INT 3
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: LIST
56451: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56452: LD_ADDR_VAR 0 45
56456: PUSH
56457: LD_INT 2
56459: NEG
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: LIST
56495: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56496: LD_ADDR_VAR 0 46
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 2
56515: NEG
56516: PUSH
56517: LD_INT 3
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 3
56527: NEG
56528: PUSH
56529: LD_INT 2
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: LIST
56541: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56542: LD_ADDR_VAR 0 47
56546: PUSH
56547: LD_INT 2
56549: NEG
56550: PUSH
56551: LD_INT 3
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 3
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56575: LD_ADDR_VAR 0 48
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 2
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56606: LD_ADDR_VAR 0 49
56610: PUSH
56611: LD_INT 3
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 3
56623: PUSH
56624: LD_INT 2
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56635: LD_ADDR_VAR 0 50
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: LD_INT 3
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: LD_INT 3
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56664: LD_ADDR_VAR 0 51
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56695: LD_ADDR_VAR 0 52
56699: PUSH
56700: LD_INT 3
56702: NEG
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 3
56714: NEG
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56728: LD_ADDR_VAR 0 53
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: LD_INT 3
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: LD_INT 3
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: LD_INT 2
56761: NEG
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: LIST
56771: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56772: LD_ADDR_VAR 0 54
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 3
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 3
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: LIST
56812: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56813: LD_ADDR_VAR 0 55
56817: PUSH
56818: LD_INT 3
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 3
56830: PUSH
56831: LD_INT 3
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: LD_INT 3
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: LIST
56852: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56853: LD_ADDR_VAR 0 56
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 3
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: LD_INT 3
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: LIST
56893: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56894: LD_ADDR_VAR 0 57
56898: PUSH
56899: LD_INT 2
56901: NEG
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 3
56912: NEG
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 3
56923: NEG
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: LIST
56937: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56938: LD_ADDR_VAR 0 58
56942: PUSH
56943: LD_INT 2
56945: NEG
56946: PUSH
56947: LD_INT 3
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 3
56957: NEG
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 3
56969: NEG
56970: PUSH
56971: LD_INT 3
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: LIST
56983: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56984: LD_ADDR_VAR 0 59
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: LD_INT 2
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: LD_INT 2
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: LIST
57027: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57028: LD_ADDR_VAR 0 60
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 2
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: LIST
57068: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57069: LD_ADDR_VAR 0 61
57073: PUSH
57074: LD_INT 2
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 2
57086: PUSH
57087: LD_INT 2
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: LIST
57108: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57109: LD_ADDR_VAR 0 62
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: LD_INT 2
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: LIST
57149: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57150: LD_ADDR_VAR 0 63
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 2
57179: NEG
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: LIST
57193: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57194: LD_ADDR_VAR 0 64
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 2
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: LIST
57239: ST_TO_ADDR
// end ; 2 :
57240: GO 60506
57242: LD_INT 2
57244: DOUBLE
57245: EQUAL
57246: IFTRUE 57250
57248: GO 60505
57250: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57251: LD_ADDR_VAR 0 29
57255: PUSH
57256: LD_INT 4
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 4
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 5
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 5
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 4
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 3
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 3
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 3
57330: PUSH
57331: LD_INT 2
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 5
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 3
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 3
57361: PUSH
57362: LD_INT 2
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 4
57371: PUSH
57372: LD_INT 3
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 4
57381: PUSH
57382: LD_INT 4
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 3
57391: PUSH
57392: LD_INT 4
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 2
57401: PUSH
57402: LD_INT 3
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 4
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 4
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: LD_INT 4
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: LD_INT 3
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: LD_INT 4
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: LD_INT 5
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: LD_INT 5
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: LD_INT 4
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: LD_INT 3
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 2
57513: PUSH
57514: LD_INT 5
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 2
57523: NEG
57524: PUSH
57525: LD_INT 3
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 3
57534: NEG
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 3
57545: NEG
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: NEG
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 3
57579: NEG
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 4
57590: NEG
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 4
57601: NEG
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 4
57613: NEG
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 2
57625: NEG
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 4
57636: NEG
57637: PUSH
57638: LD_INT 4
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 4
57648: NEG
57649: PUSH
57650: LD_INT 5
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 3
57660: NEG
57661: PUSH
57662: LD_INT 4
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: LD_INT 3
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 4
57684: NEG
57685: PUSH
57686: LD_INT 3
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 5
57696: NEG
57697: PUSH
57698: LD_INT 4
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 5
57708: NEG
57709: PUSH
57710: LD_INT 5
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 3
57720: NEG
57721: PUSH
57722: LD_INT 5
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 5
57732: NEG
57733: PUSH
57734: LD_INT 3
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57789: LD_ADDR_VAR 0 30
57793: PUSH
57794: LD_INT 4
57796: PUSH
57797: LD_INT 4
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 4
57806: PUSH
57807: LD_INT 3
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 5
57816: PUSH
57817: LD_INT 4
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 5
57826: PUSH
57827: LD_INT 5
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 4
57836: PUSH
57837: LD_INT 5
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 3
57846: PUSH
57847: LD_INT 4
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 3
57856: PUSH
57857: LD_INT 3
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 5
57866: PUSH
57867: LD_INT 3
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 3
57876: PUSH
57877: LD_INT 5
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 3
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 2
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: LD_INT 3
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: LD_INT 4
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: LD_INT 4
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: LD_INT 3
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: LD_INT 2
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: LD_INT 4
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 2
57968: NEG
57969: PUSH
57970: LD_INT 2
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 4
57979: NEG
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 4
57990: NEG
57991: PUSH
57992: LD_INT 1
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 3
58013: NEG
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 4
58024: NEG
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 5
58035: NEG
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 5
58046: NEG
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 5
58058: NEG
58059: PUSH
58060: LD_INT 2
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 3
58070: NEG
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 3
58081: NEG
58082: PUSH
58083: LD_INT 3
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 3
58093: NEG
58094: PUSH
58095: LD_INT 4
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 2
58105: NEG
58106: PUSH
58107: LD_INT 3
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: LD_INT 2
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 3
58129: NEG
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 4
58141: NEG
58142: PUSH
58143: LD_INT 3
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 4
58153: NEG
58154: PUSH
58155: LD_INT 4
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 2
58165: NEG
58166: PUSH
58167: LD_INT 4
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 4
58177: NEG
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: LD_INT 4
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: LD_INT 5
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: LD_INT 4
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: LD_INT 3
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: LD_INT 3
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: LD_INT 4
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: LD_INT 5
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: LD_INT 3
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: LD_INT 5
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58336: LD_ADDR_VAR 0 31
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: LD_INT 4
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 3
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: LD_INT 4
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: LD_INT 5
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: LD_INT 5
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: LD_INT 4
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: LD_INT 3
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 5
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: LD_INT 3
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 3
58436: NEG
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 3
58447: NEG
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 2
58470: NEG
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 3
58481: NEG
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 4
58492: NEG
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 4
58503: NEG
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 4
58515: NEG
58516: PUSH
58517: LD_INT 2
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 2
58527: NEG
58528: PUSH
58529: LD_INT 2
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 4
58538: NEG
58539: PUSH
58540: LD_INT 4
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 4
58550: NEG
58551: PUSH
58552: LD_INT 5
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 3
58562: NEG
58563: PUSH
58564: LD_INT 4
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 3
58574: NEG
58575: PUSH
58576: LD_INT 3
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 4
58586: NEG
58587: PUSH
58588: LD_INT 3
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 5
58598: NEG
58599: PUSH
58600: LD_INT 4
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 5
58610: NEG
58611: PUSH
58612: LD_INT 5
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 3
58622: NEG
58623: PUSH
58624: LD_INT 5
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 5
58634: NEG
58635: PUSH
58636: LD_INT 3
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: LD_INT 3
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 4
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: LD_INT 3
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: LD_INT 2
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: LD_INT 2
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: NEG
58702: PUSH
58703: LD_INT 3
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: LD_INT 4
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: LD_INT 2
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 2
58736: NEG
58737: PUSH
58738: LD_INT 4
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 4
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 4
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 5
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 5
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 4
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 3
58799: PUSH
58800: LD_INT 0
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 3
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 3
58820: PUSH
58821: LD_INT 2
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 5
58831: PUSH
58832: LD_INT 2
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58886: LD_ADDR_VAR 0 32
58890: PUSH
58891: LD_INT 4
58893: NEG
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 4
58904: NEG
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 3
58916: NEG
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 3
58927: NEG
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 4
58938: NEG
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 5
58949: NEG
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 5
58960: NEG
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 5
58972: NEG
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 3
58984: NEG
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 3
58995: NEG
58996: PUSH
58997: LD_INT 3
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 3
59007: NEG
59008: PUSH
59009: LD_INT 4
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 2
59019: NEG
59020: PUSH
59021: LD_INT 3
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 2
59031: NEG
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 3
59043: NEG
59044: PUSH
59045: LD_INT 2
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 4
59055: NEG
59056: PUSH
59057: LD_INT 3
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 4
59067: NEG
59068: PUSH
59069: LD_INT 4
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 2
59079: NEG
59080: PUSH
59081: LD_INT 4
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 4
59091: NEG
59092: PUSH
59093: LD_INT 2
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: LD_INT 4
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 5
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 1
59125: PUSH
59126: LD_INT 4
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: LD_INT 3
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: LD_INT 3
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: LD_INT 4
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: LD_INT 5
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: LD_INT 3
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: LD_INT 5
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 3
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 3
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 4
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 4
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 3
59246: PUSH
59247: LD_INT 1
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 2
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 2
59266: PUSH
59267: LD_INT 1
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: LD_INT 2
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 4
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 4
59298: PUSH
59299: LD_INT 4
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 4
59308: PUSH
59309: LD_INT 3
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 5
59318: PUSH
59319: LD_INT 4
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 5
59328: PUSH
59329: LD_INT 5
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 4
59338: PUSH
59339: LD_INT 5
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: LD_INT 4
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 3
59358: PUSH
59359: LD_INT 3
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 5
59368: PUSH
59369: LD_INT 3
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 3
59378: PUSH
59379: LD_INT 5
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59433: LD_ADDR_VAR 0 33
59437: PUSH
59438: LD_INT 4
59440: NEG
59441: PUSH
59442: LD_INT 4
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 4
59452: NEG
59453: PUSH
59454: LD_INT 5
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 3
59464: NEG
59465: PUSH
59466: LD_INT 4
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 3
59476: NEG
59477: PUSH
59478: LD_INT 3
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 4
59488: NEG
59489: PUSH
59490: LD_INT 3
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 5
59500: NEG
59501: PUSH
59502: LD_INT 4
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 5
59512: NEG
59513: PUSH
59514: LD_INT 5
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 3
59524: NEG
59525: PUSH
59526: LD_INT 5
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 5
59536: NEG
59537: PUSH
59538: LD_INT 3
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: LD_INT 3
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: LD_INT 4
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: LD_INT 3
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: LD_INT 2
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: LD_INT 2
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: LD_INT 3
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 4
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 2
59627: PUSH
59628: LD_INT 2
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 2
59638: NEG
59639: PUSH
59640: LD_INT 4
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 4
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 4
59660: PUSH
59661: LD_INT 1
59663: NEG
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 5
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 5
59681: PUSH
59682: LD_INT 1
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 4
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 3
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 3
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 3
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 5
59733: PUSH
59734: LD_INT 2
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 3
59743: PUSH
59744: LD_INT 3
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 3
59753: PUSH
59754: LD_INT 2
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 4
59763: PUSH
59764: LD_INT 3
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 4
59773: PUSH
59774: LD_INT 4
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 3
59783: PUSH
59784: LD_INT 4
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: LD_INT 3
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 4
59813: PUSH
59814: LD_INT 2
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: LD_INT 4
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: LD_INT 4
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: LD_INT 3
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: LD_INT 4
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: LD_INT 5
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: LD_INT 5
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: LD_INT 4
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: LD_INT 3
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 2
59905: PUSH
59906: LD_INT 5
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 2
59915: NEG
59916: PUSH
59917: LD_INT 3
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59971: LD_ADDR_VAR 0 34
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: LD_INT 4
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: LD_INT 5
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 4
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: LD_INT 3
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: LD_INT 3
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: LD_INT 4
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: LD_INT 5
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: LD_INT 3
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 2
60068: NEG
60069: PUSH
60070: LD_INT 5
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 3
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 3
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 4
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 4
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 3
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 2
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 2
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 2
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 4
60163: PUSH
60164: LD_INT 2
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 4
60173: PUSH
60174: LD_INT 4
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 4
60183: PUSH
60184: LD_INT 3
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 5
60193: PUSH
60194: LD_INT 4
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 5
60203: PUSH
60204: LD_INT 5
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 4
60213: PUSH
60214: LD_INT 5
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 3
60223: PUSH
60224: LD_INT 4
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 3
60233: PUSH
60234: LD_INT 3
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 5
60243: PUSH
60244: LD_INT 3
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 3
60253: PUSH
60254: LD_INT 5
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: LD_INT 3
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: LD_INT 3
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: LD_INT 4
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: LD_INT 4
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: LD_INT 3
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 2
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: LD_INT 4
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 2
60345: NEG
60346: PUSH
60347: LD_INT 2
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 4
60356: NEG
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 4
60367: NEG
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 3
60379: NEG
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 3
60390: NEG
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 4
60401: NEG
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 5
60412: NEG
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 5
60423: NEG
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 5
60435: NEG
60436: PUSH
60437: LD_INT 2
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 3
60447: NEG
60448: PUSH
60449: LD_INT 2
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: ST_TO_ADDR
// end ; end ;
60503: GO 60506
60505: POP
// case btype of b_depot , b_warehouse :
60506: LD_VAR 0 1
60510: PUSH
60511: LD_INT 0
60513: DOUBLE
60514: EQUAL
60515: IFTRUE 60525
60517: LD_INT 1
60519: DOUBLE
60520: EQUAL
60521: IFTRUE 60525
60523: GO 60726
60525: POP
// case nation of nation_american :
60526: LD_VAR 0 5
60530: PUSH
60531: LD_INT 1
60533: DOUBLE
60534: EQUAL
60535: IFTRUE 60539
60537: GO 60595
60539: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60540: LD_ADDR_VAR 0 9
60544: PUSH
60545: LD_VAR 0 11
60549: PUSH
60550: LD_VAR 0 12
60554: PUSH
60555: LD_VAR 0 13
60559: PUSH
60560: LD_VAR 0 14
60564: PUSH
60565: LD_VAR 0 15
60569: PUSH
60570: LD_VAR 0 16
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: PUSH
60583: LD_VAR 0 4
60587: PUSH
60588: LD_INT 1
60590: PLUS
60591: ARRAY
60592: ST_TO_ADDR
60593: GO 60724
60595: LD_INT 2
60597: DOUBLE
60598: EQUAL
60599: IFTRUE 60603
60601: GO 60659
60603: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60604: LD_ADDR_VAR 0 9
60608: PUSH
60609: LD_VAR 0 17
60613: PUSH
60614: LD_VAR 0 18
60618: PUSH
60619: LD_VAR 0 19
60623: PUSH
60624: LD_VAR 0 20
60628: PUSH
60629: LD_VAR 0 21
60633: PUSH
60634: LD_VAR 0 22
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: PUSH
60647: LD_VAR 0 4
60651: PUSH
60652: LD_INT 1
60654: PLUS
60655: ARRAY
60656: ST_TO_ADDR
60657: GO 60724
60659: LD_INT 3
60661: DOUBLE
60662: EQUAL
60663: IFTRUE 60667
60665: GO 60723
60667: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60668: LD_ADDR_VAR 0 9
60672: PUSH
60673: LD_VAR 0 23
60677: PUSH
60678: LD_VAR 0 24
60682: PUSH
60683: LD_VAR 0 25
60687: PUSH
60688: LD_VAR 0 26
60692: PUSH
60693: LD_VAR 0 27
60697: PUSH
60698: LD_VAR 0 28
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: PUSH
60711: LD_VAR 0 4
60715: PUSH
60716: LD_INT 1
60718: PLUS
60719: ARRAY
60720: ST_TO_ADDR
60721: GO 60724
60723: POP
60724: GO 61279
60726: LD_INT 2
60728: DOUBLE
60729: EQUAL
60730: IFTRUE 60740
60732: LD_INT 3
60734: DOUBLE
60735: EQUAL
60736: IFTRUE 60740
60738: GO 60796
60740: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60741: LD_ADDR_VAR 0 9
60745: PUSH
60746: LD_VAR 0 29
60750: PUSH
60751: LD_VAR 0 30
60755: PUSH
60756: LD_VAR 0 31
60760: PUSH
60761: LD_VAR 0 32
60765: PUSH
60766: LD_VAR 0 33
60770: PUSH
60771: LD_VAR 0 34
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: PUSH
60784: LD_VAR 0 4
60788: PUSH
60789: LD_INT 1
60791: PLUS
60792: ARRAY
60793: ST_TO_ADDR
60794: GO 61279
60796: LD_INT 16
60798: DOUBLE
60799: EQUAL
60800: IFTRUE 60858
60802: LD_INT 17
60804: DOUBLE
60805: EQUAL
60806: IFTRUE 60858
60808: LD_INT 18
60810: DOUBLE
60811: EQUAL
60812: IFTRUE 60858
60814: LD_INT 19
60816: DOUBLE
60817: EQUAL
60818: IFTRUE 60858
60820: LD_INT 22
60822: DOUBLE
60823: EQUAL
60824: IFTRUE 60858
60826: LD_INT 20
60828: DOUBLE
60829: EQUAL
60830: IFTRUE 60858
60832: LD_INT 21
60834: DOUBLE
60835: EQUAL
60836: IFTRUE 60858
60838: LD_INT 23
60840: DOUBLE
60841: EQUAL
60842: IFTRUE 60858
60844: LD_INT 24
60846: DOUBLE
60847: EQUAL
60848: IFTRUE 60858
60850: LD_INT 25
60852: DOUBLE
60853: EQUAL
60854: IFTRUE 60858
60856: GO 60914
60858: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60859: LD_ADDR_VAR 0 9
60863: PUSH
60864: LD_VAR 0 35
60868: PUSH
60869: LD_VAR 0 36
60873: PUSH
60874: LD_VAR 0 37
60878: PUSH
60879: LD_VAR 0 38
60883: PUSH
60884: LD_VAR 0 39
60888: PUSH
60889: LD_VAR 0 40
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: PUSH
60902: LD_VAR 0 4
60906: PUSH
60907: LD_INT 1
60909: PLUS
60910: ARRAY
60911: ST_TO_ADDR
60912: GO 61279
60914: LD_INT 6
60916: DOUBLE
60917: EQUAL
60918: IFTRUE 60970
60920: LD_INT 7
60922: DOUBLE
60923: EQUAL
60924: IFTRUE 60970
60926: LD_INT 8
60928: DOUBLE
60929: EQUAL
60930: IFTRUE 60970
60932: LD_INT 13
60934: DOUBLE
60935: EQUAL
60936: IFTRUE 60970
60938: LD_INT 12
60940: DOUBLE
60941: EQUAL
60942: IFTRUE 60970
60944: LD_INT 15
60946: DOUBLE
60947: EQUAL
60948: IFTRUE 60970
60950: LD_INT 11
60952: DOUBLE
60953: EQUAL
60954: IFTRUE 60970
60956: LD_INT 14
60958: DOUBLE
60959: EQUAL
60960: IFTRUE 60970
60962: LD_INT 10
60964: DOUBLE
60965: EQUAL
60966: IFTRUE 60970
60968: GO 61026
60970: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60971: LD_ADDR_VAR 0 9
60975: PUSH
60976: LD_VAR 0 41
60980: PUSH
60981: LD_VAR 0 42
60985: PUSH
60986: LD_VAR 0 43
60990: PUSH
60991: LD_VAR 0 44
60995: PUSH
60996: LD_VAR 0 45
61000: PUSH
61001: LD_VAR 0 46
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: PUSH
61014: LD_VAR 0 4
61018: PUSH
61019: LD_INT 1
61021: PLUS
61022: ARRAY
61023: ST_TO_ADDR
61024: GO 61279
61026: LD_INT 36
61028: DOUBLE
61029: EQUAL
61030: IFTRUE 61034
61032: GO 61090
61034: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61035: LD_ADDR_VAR 0 9
61039: PUSH
61040: LD_VAR 0 47
61044: PUSH
61045: LD_VAR 0 48
61049: PUSH
61050: LD_VAR 0 49
61054: PUSH
61055: LD_VAR 0 50
61059: PUSH
61060: LD_VAR 0 51
61064: PUSH
61065: LD_VAR 0 52
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: PUSH
61078: LD_VAR 0 4
61082: PUSH
61083: LD_INT 1
61085: PLUS
61086: ARRAY
61087: ST_TO_ADDR
61088: GO 61279
61090: LD_INT 4
61092: DOUBLE
61093: EQUAL
61094: IFTRUE 61116
61096: LD_INT 5
61098: DOUBLE
61099: EQUAL
61100: IFTRUE 61116
61102: LD_INT 34
61104: DOUBLE
61105: EQUAL
61106: IFTRUE 61116
61108: LD_INT 37
61110: DOUBLE
61111: EQUAL
61112: IFTRUE 61116
61114: GO 61172
61116: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61117: LD_ADDR_VAR 0 9
61121: PUSH
61122: LD_VAR 0 53
61126: PUSH
61127: LD_VAR 0 54
61131: PUSH
61132: LD_VAR 0 55
61136: PUSH
61137: LD_VAR 0 56
61141: PUSH
61142: LD_VAR 0 57
61146: PUSH
61147: LD_VAR 0 58
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: PUSH
61160: LD_VAR 0 4
61164: PUSH
61165: LD_INT 1
61167: PLUS
61168: ARRAY
61169: ST_TO_ADDR
61170: GO 61279
61172: LD_INT 31
61174: DOUBLE
61175: EQUAL
61176: IFTRUE 61222
61178: LD_INT 32
61180: DOUBLE
61181: EQUAL
61182: IFTRUE 61222
61184: LD_INT 33
61186: DOUBLE
61187: EQUAL
61188: IFTRUE 61222
61190: LD_INT 27
61192: DOUBLE
61193: EQUAL
61194: IFTRUE 61222
61196: LD_INT 26
61198: DOUBLE
61199: EQUAL
61200: IFTRUE 61222
61202: LD_INT 28
61204: DOUBLE
61205: EQUAL
61206: IFTRUE 61222
61208: LD_INT 29
61210: DOUBLE
61211: EQUAL
61212: IFTRUE 61222
61214: LD_INT 30
61216: DOUBLE
61217: EQUAL
61218: IFTRUE 61222
61220: GO 61278
61222: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61223: LD_ADDR_VAR 0 9
61227: PUSH
61228: LD_VAR 0 59
61232: PUSH
61233: LD_VAR 0 60
61237: PUSH
61238: LD_VAR 0 61
61242: PUSH
61243: LD_VAR 0 62
61247: PUSH
61248: LD_VAR 0 63
61252: PUSH
61253: LD_VAR 0 64
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: PUSH
61266: LD_VAR 0 4
61270: PUSH
61271: LD_INT 1
61273: PLUS
61274: ARRAY
61275: ST_TO_ADDR
61276: GO 61279
61278: POP
// temp_list2 = [ ] ;
61279: LD_ADDR_VAR 0 10
61283: PUSH
61284: EMPTY
61285: ST_TO_ADDR
// for i in temp_list do
61286: LD_ADDR_VAR 0 8
61290: PUSH
61291: LD_VAR 0 9
61295: PUSH
61296: FOR_IN
61297: IFFALSE 61349
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61299: LD_ADDR_VAR 0 10
61303: PUSH
61304: LD_VAR 0 10
61308: PUSH
61309: LD_VAR 0 8
61313: PUSH
61314: LD_INT 1
61316: ARRAY
61317: PUSH
61318: LD_VAR 0 2
61322: PLUS
61323: PUSH
61324: LD_VAR 0 8
61328: PUSH
61329: LD_INT 2
61331: ARRAY
61332: PUSH
61333: LD_VAR 0 3
61337: PLUS
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: EMPTY
61344: LIST
61345: ADD
61346: ST_TO_ADDR
61347: GO 61296
61349: POP
61350: POP
// result = temp_list2 ;
61351: LD_ADDR_VAR 0 7
61355: PUSH
61356: LD_VAR 0 10
61360: ST_TO_ADDR
// end ;
61361: LD_VAR 0 7
61365: RET
// export function EnemyInRange ( unit , dist ) ; begin
61366: LD_INT 0
61368: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61369: LD_ADDR_VAR 0 3
61373: PUSH
61374: LD_VAR 0 1
61378: PPUSH
61379: CALL_OW 255
61383: PPUSH
61384: LD_VAR 0 1
61388: PPUSH
61389: CALL_OW 250
61393: PPUSH
61394: LD_VAR 0 1
61398: PPUSH
61399: CALL_OW 251
61403: PPUSH
61404: LD_VAR 0 2
61408: PPUSH
61409: CALL 34762 0 4
61413: PUSH
61414: LD_INT 4
61416: ARRAY
61417: ST_TO_ADDR
// end ;
61418: LD_VAR 0 3
61422: RET
// export function PlayerSeeMe ( unit ) ; begin
61423: LD_INT 0
61425: PPUSH
// result := See ( your_side , unit ) ;
61426: LD_ADDR_VAR 0 2
61430: PUSH
61431: LD_OWVAR 2
61435: PPUSH
61436: LD_VAR 0 1
61440: PPUSH
61441: CALL_OW 292
61445: ST_TO_ADDR
// end ;
61446: LD_VAR 0 2
61450: RET
// export function ReverseDir ( unit ) ; begin
61451: LD_INT 0
61453: PPUSH
// if not unit then
61454: LD_VAR 0 1
61458: NOT
61459: IFFALSE 61463
// exit ;
61461: GO 61486
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61463: LD_ADDR_VAR 0 2
61467: PUSH
61468: LD_VAR 0 1
61472: PPUSH
61473: CALL_OW 254
61477: PUSH
61478: LD_INT 3
61480: PLUS
61481: PUSH
61482: LD_INT 6
61484: MOD
61485: ST_TO_ADDR
// end ;
61486: LD_VAR 0 2
61490: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61491: LD_INT 0
61493: PPUSH
61494: PPUSH
61495: PPUSH
61496: PPUSH
61497: PPUSH
// if not hexes then
61498: LD_VAR 0 2
61502: NOT
61503: IFFALSE 61507
// exit ;
61505: GO 61655
// dist := 9999 ;
61507: LD_ADDR_VAR 0 5
61511: PUSH
61512: LD_INT 9999
61514: ST_TO_ADDR
// for i = 1 to hexes do
61515: LD_ADDR_VAR 0 4
61519: PUSH
61520: DOUBLE
61521: LD_INT 1
61523: DEC
61524: ST_TO_ADDR
61525: LD_VAR 0 2
61529: PUSH
61530: FOR_TO
61531: IFFALSE 61643
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61533: LD_VAR 0 1
61537: PPUSH
61538: LD_VAR 0 2
61542: PUSH
61543: LD_VAR 0 4
61547: ARRAY
61548: PUSH
61549: LD_INT 1
61551: ARRAY
61552: PPUSH
61553: LD_VAR 0 2
61557: PUSH
61558: LD_VAR 0 4
61562: ARRAY
61563: PUSH
61564: LD_INT 2
61566: ARRAY
61567: PPUSH
61568: CALL_OW 297
61572: PUSH
61573: LD_VAR 0 5
61577: LESS
61578: IFFALSE 61641
// begin hex := hexes [ i ] ;
61580: LD_ADDR_VAR 0 7
61584: PUSH
61585: LD_VAR 0 2
61589: PUSH
61590: LD_VAR 0 4
61594: ARRAY
61595: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61596: LD_ADDR_VAR 0 5
61600: PUSH
61601: LD_VAR 0 1
61605: PPUSH
61606: LD_VAR 0 2
61610: PUSH
61611: LD_VAR 0 4
61615: ARRAY
61616: PUSH
61617: LD_INT 1
61619: ARRAY
61620: PPUSH
61621: LD_VAR 0 2
61625: PUSH
61626: LD_VAR 0 4
61630: ARRAY
61631: PUSH
61632: LD_INT 2
61634: ARRAY
61635: PPUSH
61636: CALL_OW 297
61640: ST_TO_ADDR
// end ; end ;
61641: GO 61530
61643: POP
61644: POP
// result := hex ;
61645: LD_ADDR_VAR 0 3
61649: PUSH
61650: LD_VAR 0 7
61654: ST_TO_ADDR
// end ;
61655: LD_VAR 0 3
61659: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61660: LD_INT 0
61662: PPUSH
61663: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61664: LD_VAR 0 1
61668: NOT
61669: PUSH
61670: LD_VAR 0 1
61674: PUSH
61675: LD_INT 21
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 23
61687: PUSH
61688: LD_INT 2
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PPUSH
61699: CALL_OW 69
61703: IN
61704: NOT
61705: OR
61706: IFFALSE 61710
// exit ;
61708: GO 61757
// for i = 1 to 3 do
61710: LD_ADDR_VAR 0 3
61714: PUSH
61715: DOUBLE
61716: LD_INT 1
61718: DEC
61719: ST_TO_ADDR
61720: LD_INT 3
61722: PUSH
61723: FOR_TO
61724: IFFALSE 61755
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61726: LD_VAR 0 1
61730: PPUSH
61731: CALL_OW 250
61735: PPUSH
61736: LD_VAR 0 1
61740: PPUSH
61741: CALL_OW 251
61745: PPUSH
61746: LD_INT 1
61748: PPUSH
61749: CALL_OW 453
61753: GO 61723
61755: POP
61756: POP
// end ;
61757: LD_VAR 0 2
61761: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61762: LD_INT 0
61764: PPUSH
61765: PPUSH
61766: PPUSH
61767: PPUSH
61768: PPUSH
61769: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61770: LD_VAR 0 1
61774: NOT
61775: PUSH
61776: LD_VAR 0 2
61780: NOT
61781: OR
61782: PUSH
61783: LD_VAR 0 1
61787: PPUSH
61788: CALL_OW 314
61792: OR
61793: IFFALSE 61797
// exit ;
61795: GO 62238
// x := GetX ( enemy_unit ) ;
61797: LD_ADDR_VAR 0 7
61801: PUSH
61802: LD_VAR 0 2
61806: PPUSH
61807: CALL_OW 250
61811: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61812: LD_ADDR_VAR 0 8
61816: PUSH
61817: LD_VAR 0 2
61821: PPUSH
61822: CALL_OW 251
61826: ST_TO_ADDR
// if not x or not y then
61827: LD_VAR 0 7
61831: NOT
61832: PUSH
61833: LD_VAR 0 8
61837: NOT
61838: OR
61839: IFFALSE 61843
// exit ;
61841: GO 62238
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61843: LD_ADDR_VAR 0 6
61847: PUSH
61848: LD_VAR 0 7
61852: PPUSH
61853: LD_INT 0
61855: PPUSH
61856: LD_INT 4
61858: PPUSH
61859: CALL_OW 272
61863: PUSH
61864: LD_VAR 0 8
61868: PPUSH
61869: LD_INT 0
61871: PPUSH
61872: LD_INT 4
61874: PPUSH
61875: CALL_OW 273
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_VAR 0 7
61888: PPUSH
61889: LD_INT 1
61891: PPUSH
61892: LD_INT 4
61894: PPUSH
61895: CALL_OW 272
61899: PUSH
61900: LD_VAR 0 8
61904: PPUSH
61905: LD_INT 1
61907: PPUSH
61908: LD_INT 4
61910: PPUSH
61911: CALL_OW 273
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_VAR 0 7
61924: PPUSH
61925: LD_INT 2
61927: PPUSH
61928: LD_INT 4
61930: PPUSH
61931: CALL_OW 272
61935: PUSH
61936: LD_VAR 0 8
61940: PPUSH
61941: LD_INT 2
61943: PPUSH
61944: LD_INT 4
61946: PPUSH
61947: CALL_OW 273
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_VAR 0 7
61960: PPUSH
61961: LD_INT 3
61963: PPUSH
61964: LD_INT 4
61966: PPUSH
61967: CALL_OW 272
61971: PUSH
61972: LD_VAR 0 8
61976: PPUSH
61977: LD_INT 3
61979: PPUSH
61980: LD_INT 4
61982: PPUSH
61983: CALL_OW 273
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_VAR 0 7
61996: PPUSH
61997: LD_INT 4
61999: PPUSH
62000: LD_INT 4
62002: PPUSH
62003: CALL_OW 272
62007: PUSH
62008: LD_VAR 0 8
62012: PPUSH
62013: LD_INT 4
62015: PPUSH
62016: LD_INT 4
62018: PPUSH
62019: CALL_OW 273
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_VAR 0 7
62032: PPUSH
62033: LD_INT 5
62035: PPUSH
62036: LD_INT 4
62038: PPUSH
62039: CALL_OW 272
62043: PUSH
62044: LD_VAR 0 8
62048: PPUSH
62049: LD_INT 5
62051: PPUSH
62052: LD_INT 4
62054: PPUSH
62055: CALL_OW 273
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: ST_TO_ADDR
// for i = tmp downto 1 do
62072: LD_ADDR_VAR 0 4
62076: PUSH
62077: DOUBLE
62078: LD_VAR 0 6
62082: INC
62083: ST_TO_ADDR
62084: LD_INT 1
62086: PUSH
62087: FOR_DOWNTO
62088: IFFALSE 62189
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62090: LD_VAR 0 6
62094: PUSH
62095: LD_VAR 0 4
62099: ARRAY
62100: PUSH
62101: LD_INT 1
62103: ARRAY
62104: PPUSH
62105: LD_VAR 0 6
62109: PUSH
62110: LD_VAR 0 4
62114: ARRAY
62115: PUSH
62116: LD_INT 2
62118: ARRAY
62119: PPUSH
62120: CALL_OW 488
62124: NOT
62125: PUSH
62126: LD_VAR 0 6
62130: PUSH
62131: LD_VAR 0 4
62135: ARRAY
62136: PUSH
62137: LD_INT 1
62139: ARRAY
62140: PPUSH
62141: LD_VAR 0 6
62145: PUSH
62146: LD_VAR 0 4
62150: ARRAY
62151: PUSH
62152: LD_INT 2
62154: ARRAY
62155: PPUSH
62156: CALL_OW 428
62160: PUSH
62161: LD_INT 0
62163: NONEQUAL
62164: OR
62165: IFFALSE 62187
// tmp := Delete ( tmp , i ) ;
62167: LD_ADDR_VAR 0 6
62171: PUSH
62172: LD_VAR 0 6
62176: PPUSH
62177: LD_VAR 0 4
62181: PPUSH
62182: CALL_OW 3
62186: ST_TO_ADDR
62187: GO 62087
62189: POP
62190: POP
// j := GetClosestHex ( unit , tmp ) ;
62191: LD_ADDR_VAR 0 5
62195: PUSH
62196: LD_VAR 0 1
62200: PPUSH
62201: LD_VAR 0 6
62205: PPUSH
62206: CALL 61491 0 2
62210: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62211: LD_VAR 0 1
62215: PPUSH
62216: LD_VAR 0 5
62220: PUSH
62221: LD_INT 1
62223: ARRAY
62224: PPUSH
62225: LD_VAR 0 5
62229: PUSH
62230: LD_INT 2
62232: ARRAY
62233: PPUSH
62234: CALL_OW 111
// end ;
62238: LD_VAR 0 3
62242: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62243: LD_INT 0
62245: PPUSH
62246: PPUSH
62247: PPUSH
// uc_side = 0 ;
62248: LD_ADDR_OWVAR 20
62252: PUSH
62253: LD_INT 0
62255: ST_TO_ADDR
// uc_nation = 0 ;
62256: LD_ADDR_OWVAR 21
62260: PUSH
62261: LD_INT 0
62263: ST_TO_ADDR
// InitHc_All ( ) ;
62264: CALL_OW 584
// InitVc ;
62268: CALL_OW 20
// if mastodonts then
62272: LD_VAR 0 6
62276: IFFALSE 62343
// for i = 1 to mastodonts do
62278: LD_ADDR_VAR 0 11
62282: PUSH
62283: DOUBLE
62284: LD_INT 1
62286: DEC
62287: ST_TO_ADDR
62288: LD_VAR 0 6
62292: PUSH
62293: FOR_TO
62294: IFFALSE 62341
// begin vc_chassis := 31 ;
62296: LD_ADDR_OWVAR 37
62300: PUSH
62301: LD_INT 31
62303: ST_TO_ADDR
// vc_control := control_rider ;
62304: LD_ADDR_OWVAR 38
62308: PUSH
62309: LD_INT 4
62311: ST_TO_ADDR
// animal := CreateVehicle ;
62312: LD_ADDR_VAR 0 12
62316: PUSH
62317: CALL_OW 45
62321: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62322: LD_VAR 0 12
62326: PPUSH
62327: LD_VAR 0 8
62331: PPUSH
62332: LD_INT 0
62334: PPUSH
62335: CALL 64531 0 3
// end ;
62339: GO 62293
62341: POP
62342: POP
// if horses then
62343: LD_VAR 0 5
62347: IFFALSE 62414
// for i = 1 to horses do
62349: LD_ADDR_VAR 0 11
62353: PUSH
62354: DOUBLE
62355: LD_INT 1
62357: DEC
62358: ST_TO_ADDR
62359: LD_VAR 0 5
62363: PUSH
62364: FOR_TO
62365: IFFALSE 62412
// begin hc_class := 21 ;
62367: LD_ADDR_OWVAR 28
62371: PUSH
62372: LD_INT 21
62374: ST_TO_ADDR
// hc_gallery :=  ;
62375: LD_ADDR_OWVAR 33
62379: PUSH
62380: LD_STRING 
62382: ST_TO_ADDR
// animal := CreateHuman ;
62383: LD_ADDR_VAR 0 12
62387: PUSH
62388: CALL_OW 44
62392: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62393: LD_VAR 0 12
62397: PPUSH
62398: LD_VAR 0 8
62402: PPUSH
62403: LD_INT 0
62405: PPUSH
62406: CALL 64531 0 3
// end ;
62410: GO 62364
62412: POP
62413: POP
// if birds then
62414: LD_VAR 0 1
62418: IFFALSE 62485
// for i = 1 to birds do
62420: LD_ADDR_VAR 0 11
62424: PUSH
62425: DOUBLE
62426: LD_INT 1
62428: DEC
62429: ST_TO_ADDR
62430: LD_VAR 0 1
62434: PUSH
62435: FOR_TO
62436: IFFALSE 62483
// begin hc_class = 18 ;
62438: LD_ADDR_OWVAR 28
62442: PUSH
62443: LD_INT 18
62445: ST_TO_ADDR
// hc_gallery =  ;
62446: LD_ADDR_OWVAR 33
62450: PUSH
62451: LD_STRING 
62453: ST_TO_ADDR
// animal := CreateHuman ;
62454: LD_ADDR_VAR 0 12
62458: PUSH
62459: CALL_OW 44
62463: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62464: LD_VAR 0 12
62468: PPUSH
62469: LD_VAR 0 8
62473: PPUSH
62474: LD_INT 0
62476: PPUSH
62477: CALL 64531 0 3
// end ;
62481: GO 62435
62483: POP
62484: POP
// if tigers then
62485: LD_VAR 0 2
62489: IFFALSE 62573
// for i = 1 to tigers do
62491: LD_ADDR_VAR 0 11
62495: PUSH
62496: DOUBLE
62497: LD_INT 1
62499: DEC
62500: ST_TO_ADDR
62501: LD_VAR 0 2
62505: PUSH
62506: FOR_TO
62507: IFFALSE 62571
// begin hc_class = class_tiger ;
62509: LD_ADDR_OWVAR 28
62513: PUSH
62514: LD_INT 14
62516: ST_TO_ADDR
// hc_gallery =  ;
62517: LD_ADDR_OWVAR 33
62521: PUSH
62522: LD_STRING 
62524: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62525: LD_ADDR_OWVAR 35
62529: PUSH
62530: LD_INT 7
62532: NEG
62533: PPUSH
62534: LD_INT 7
62536: PPUSH
62537: CALL_OW 12
62541: ST_TO_ADDR
// animal := CreateHuman ;
62542: LD_ADDR_VAR 0 12
62546: PUSH
62547: CALL_OW 44
62551: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62552: LD_VAR 0 12
62556: PPUSH
62557: LD_VAR 0 8
62561: PPUSH
62562: LD_INT 0
62564: PPUSH
62565: CALL 64531 0 3
// end ;
62569: GO 62506
62571: POP
62572: POP
// if apemans then
62573: LD_VAR 0 3
62577: IFFALSE 62700
// for i = 1 to apemans do
62579: LD_ADDR_VAR 0 11
62583: PUSH
62584: DOUBLE
62585: LD_INT 1
62587: DEC
62588: ST_TO_ADDR
62589: LD_VAR 0 3
62593: PUSH
62594: FOR_TO
62595: IFFALSE 62698
// begin hc_class = class_apeman ;
62597: LD_ADDR_OWVAR 28
62601: PUSH
62602: LD_INT 12
62604: ST_TO_ADDR
// hc_gallery =  ;
62605: LD_ADDR_OWVAR 33
62609: PUSH
62610: LD_STRING 
62612: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62613: LD_ADDR_OWVAR 35
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PPUSH
62622: LD_INT 2
62624: PPUSH
62625: CALL_OW 12
62629: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62630: LD_ADDR_OWVAR 31
62634: PUSH
62635: LD_INT 1
62637: PPUSH
62638: LD_INT 3
62640: PPUSH
62641: CALL_OW 12
62645: PUSH
62646: LD_INT 1
62648: PPUSH
62649: LD_INT 3
62651: PPUSH
62652: CALL_OW 12
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: ST_TO_ADDR
// animal := CreateHuman ;
62669: LD_ADDR_VAR 0 12
62673: PUSH
62674: CALL_OW 44
62678: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62679: LD_VAR 0 12
62683: PPUSH
62684: LD_VAR 0 8
62688: PPUSH
62689: LD_INT 0
62691: PPUSH
62692: CALL 64531 0 3
// end ;
62696: GO 62594
62698: POP
62699: POP
// if enchidnas then
62700: LD_VAR 0 4
62704: IFFALSE 62771
// for i = 1 to enchidnas do
62706: LD_ADDR_VAR 0 11
62710: PUSH
62711: DOUBLE
62712: LD_INT 1
62714: DEC
62715: ST_TO_ADDR
62716: LD_VAR 0 4
62720: PUSH
62721: FOR_TO
62722: IFFALSE 62769
// begin hc_class = 13 ;
62724: LD_ADDR_OWVAR 28
62728: PUSH
62729: LD_INT 13
62731: ST_TO_ADDR
// hc_gallery =  ;
62732: LD_ADDR_OWVAR 33
62736: PUSH
62737: LD_STRING 
62739: ST_TO_ADDR
// animal := CreateHuman ;
62740: LD_ADDR_VAR 0 12
62744: PUSH
62745: CALL_OW 44
62749: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62750: LD_VAR 0 12
62754: PPUSH
62755: LD_VAR 0 8
62759: PPUSH
62760: LD_INT 0
62762: PPUSH
62763: CALL 64531 0 3
// end ;
62767: GO 62721
62769: POP
62770: POP
// if fishes then
62771: LD_VAR 0 7
62775: IFFALSE 62842
// for i = 1 to fishes do
62777: LD_ADDR_VAR 0 11
62781: PUSH
62782: DOUBLE
62783: LD_INT 1
62785: DEC
62786: ST_TO_ADDR
62787: LD_VAR 0 7
62791: PUSH
62792: FOR_TO
62793: IFFALSE 62840
// begin hc_class = 20 ;
62795: LD_ADDR_OWVAR 28
62799: PUSH
62800: LD_INT 20
62802: ST_TO_ADDR
// hc_gallery =  ;
62803: LD_ADDR_OWVAR 33
62807: PUSH
62808: LD_STRING 
62810: ST_TO_ADDR
// animal := CreateHuman ;
62811: LD_ADDR_VAR 0 12
62815: PUSH
62816: CALL_OW 44
62820: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62821: LD_VAR 0 12
62825: PPUSH
62826: LD_VAR 0 9
62830: PPUSH
62831: LD_INT 0
62833: PPUSH
62834: CALL 64531 0 3
// end ;
62838: GO 62792
62840: POP
62841: POP
// end ;
62842: LD_VAR 0 10
62846: RET
// export function WantHeal ( sci , unit ) ; begin
62847: LD_INT 0
62849: PPUSH
// if GetTaskList ( sci ) > 0 then
62850: LD_VAR 0 1
62854: PPUSH
62855: CALL_OW 437
62859: PUSH
62860: LD_INT 0
62862: GREATER
62863: IFFALSE 62933
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62865: LD_VAR 0 1
62869: PPUSH
62870: CALL_OW 437
62874: PUSH
62875: LD_INT 1
62877: ARRAY
62878: PUSH
62879: LD_INT 1
62881: ARRAY
62882: PUSH
62883: LD_STRING l
62885: EQUAL
62886: PUSH
62887: LD_VAR 0 1
62891: PPUSH
62892: CALL_OW 437
62896: PUSH
62897: LD_INT 1
62899: ARRAY
62900: PUSH
62901: LD_INT 4
62903: ARRAY
62904: PUSH
62905: LD_VAR 0 2
62909: EQUAL
62910: AND
62911: IFFALSE 62923
// result := true else
62913: LD_ADDR_VAR 0 3
62917: PUSH
62918: LD_INT 1
62920: ST_TO_ADDR
62921: GO 62931
// result := false ;
62923: LD_ADDR_VAR 0 3
62927: PUSH
62928: LD_INT 0
62930: ST_TO_ADDR
// end else
62931: GO 62941
// result := false ;
62933: LD_ADDR_VAR 0 3
62937: PUSH
62938: LD_INT 0
62940: ST_TO_ADDR
// end ;
62941: LD_VAR 0 3
62945: RET
// export function HealTarget ( sci ) ; begin
62946: LD_INT 0
62948: PPUSH
// if not sci then
62949: LD_VAR 0 1
62953: NOT
62954: IFFALSE 62958
// exit ;
62956: GO 63023
// result := 0 ;
62958: LD_ADDR_VAR 0 2
62962: PUSH
62963: LD_INT 0
62965: ST_TO_ADDR
// if GetTaskList ( sci ) then
62966: LD_VAR 0 1
62970: PPUSH
62971: CALL_OW 437
62975: IFFALSE 63023
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62977: LD_VAR 0 1
62981: PPUSH
62982: CALL_OW 437
62986: PUSH
62987: LD_INT 1
62989: ARRAY
62990: PUSH
62991: LD_INT 1
62993: ARRAY
62994: PUSH
62995: LD_STRING l
62997: EQUAL
62998: IFFALSE 63023
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63000: LD_ADDR_VAR 0 2
63004: PUSH
63005: LD_VAR 0 1
63009: PPUSH
63010: CALL_OW 437
63014: PUSH
63015: LD_INT 1
63017: ARRAY
63018: PUSH
63019: LD_INT 4
63021: ARRAY
63022: ST_TO_ADDR
// end ;
63023: LD_VAR 0 2
63027: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63028: LD_INT 0
63030: PPUSH
63031: PPUSH
63032: PPUSH
63033: PPUSH
// if not base_units then
63034: LD_VAR 0 1
63038: NOT
63039: IFFALSE 63043
// exit ;
63041: GO 63130
// result := false ;
63043: LD_ADDR_VAR 0 2
63047: PUSH
63048: LD_INT 0
63050: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63051: LD_ADDR_VAR 0 5
63055: PUSH
63056: LD_VAR 0 1
63060: PPUSH
63061: LD_INT 21
63063: PUSH
63064: LD_INT 3
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PPUSH
63071: CALL_OW 72
63075: ST_TO_ADDR
// if not tmp then
63076: LD_VAR 0 5
63080: NOT
63081: IFFALSE 63085
// exit ;
63083: GO 63130
// for i in tmp do
63085: LD_ADDR_VAR 0 3
63089: PUSH
63090: LD_VAR 0 5
63094: PUSH
63095: FOR_IN
63096: IFFALSE 63128
// begin result := EnemyInRange ( i , 22 ) ;
63098: LD_ADDR_VAR 0 2
63102: PUSH
63103: LD_VAR 0 3
63107: PPUSH
63108: LD_INT 22
63110: PPUSH
63111: CALL 61366 0 2
63115: ST_TO_ADDR
// if result then
63116: LD_VAR 0 2
63120: IFFALSE 63126
// exit ;
63122: POP
63123: POP
63124: GO 63130
// end ;
63126: GO 63095
63128: POP
63129: POP
// end ;
63130: LD_VAR 0 2
63134: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63135: LD_INT 0
63137: PPUSH
63138: PPUSH
// if not units then
63139: LD_VAR 0 1
63143: NOT
63144: IFFALSE 63148
// exit ;
63146: GO 63218
// result := [ ] ;
63148: LD_ADDR_VAR 0 3
63152: PUSH
63153: EMPTY
63154: ST_TO_ADDR
// for i in units do
63155: LD_ADDR_VAR 0 4
63159: PUSH
63160: LD_VAR 0 1
63164: PUSH
63165: FOR_IN
63166: IFFALSE 63216
// if GetTag ( i ) = tag then
63168: LD_VAR 0 4
63172: PPUSH
63173: CALL_OW 110
63177: PUSH
63178: LD_VAR 0 2
63182: EQUAL
63183: IFFALSE 63214
// result := Replace ( result , result + 1 , i ) ;
63185: LD_ADDR_VAR 0 3
63189: PUSH
63190: LD_VAR 0 3
63194: PPUSH
63195: LD_VAR 0 3
63199: PUSH
63200: LD_INT 1
63202: PLUS
63203: PPUSH
63204: LD_VAR 0 4
63208: PPUSH
63209: CALL_OW 1
63213: ST_TO_ADDR
63214: GO 63165
63216: POP
63217: POP
// end ;
63218: LD_VAR 0 3
63222: RET
// export function IsDriver ( un ) ; begin
63223: LD_INT 0
63225: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63226: LD_ADDR_VAR 0 2
63230: PUSH
63231: LD_VAR 0 1
63235: PUSH
63236: LD_INT 55
63238: PUSH
63239: EMPTY
63240: LIST
63241: PPUSH
63242: CALL_OW 69
63246: IN
63247: ST_TO_ADDR
// end ;
63248: LD_VAR 0 2
63252: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63253: LD_INT 0
63255: PPUSH
63256: PPUSH
// list := [ ] ;
63257: LD_ADDR_VAR 0 5
63261: PUSH
63262: EMPTY
63263: ST_TO_ADDR
// case d of 0 :
63264: LD_VAR 0 3
63268: PUSH
63269: LD_INT 0
63271: DOUBLE
63272: EQUAL
63273: IFTRUE 63277
63275: GO 63410
63277: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63278: LD_ADDR_VAR 0 5
63282: PUSH
63283: LD_VAR 0 1
63287: PUSH
63288: LD_INT 4
63290: MINUS
63291: PUSH
63292: LD_VAR 0 2
63296: PUSH
63297: LD_INT 4
63299: MINUS
63300: PUSH
63301: LD_INT 2
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: LIST
63308: PUSH
63309: LD_VAR 0 1
63313: PUSH
63314: LD_INT 3
63316: MINUS
63317: PUSH
63318: LD_VAR 0 2
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: LIST
63330: PUSH
63331: LD_VAR 0 1
63335: PUSH
63336: LD_INT 4
63338: PLUS
63339: PUSH
63340: LD_VAR 0 2
63344: PUSH
63345: LD_INT 4
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: LIST
63352: PUSH
63353: LD_VAR 0 1
63357: PUSH
63358: LD_INT 3
63360: PLUS
63361: PUSH
63362: LD_VAR 0 2
63366: PUSH
63367: LD_INT 3
63369: PLUS
63370: PUSH
63371: LD_INT 5
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: LIST
63378: PUSH
63379: LD_VAR 0 1
63383: PUSH
63384: LD_VAR 0 2
63388: PUSH
63389: LD_INT 4
63391: PLUS
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: LIST
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: ST_TO_ADDR
// end ; 1 :
63408: GO 64108
63410: LD_INT 1
63412: DOUBLE
63413: EQUAL
63414: IFTRUE 63418
63416: GO 63551
63418: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63419: LD_ADDR_VAR 0 5
63423: PUSH
63424: LD_VAR 0 1
63428: PUSH
63429: LD_VAR 0 2
63433: PUSH
63434: LD_INT 4
63436: MINUS
63437: PUSH
63438: LD_INT 3
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: LIST
63445: PUSH
63446: LD_VAR 0 1
63450: PUSH
63451: LD_INT 3
63453: MINUS
63454: PUSH
63455: LD_VAR 0 2
63459: PUSH
63460: LD_INT 3
63462: MINUS
63463: PUSH
63464: LD_INT 2
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: LIST
63471: PUSH
63472: LD_VAR 0 1
63476: PUSH
63477: LD_INT 4
63479: MINUS
63480: PUSH
63481: LD_VAR 0 2
63485: PUSH
63486: LD_INT 1
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: LIST
63493: PUSH
63494: LD_VAR 0 1
63498: PUSH
63499: LD_VAR 0 2
63503: PUSH
63504: LD_INT 3
63506: PLUS
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: LIST
63515: PUSH
63516: LD_VAR 0 1
63520: PUSH
63521: LD_INT 4
63523: PLUS
63524: PUSH
63525: LD_VAR 0 2
63529: PUSH
63530: LD_INT 4
63532: PLUS
63533: PUSH
63534: LD_INT 5
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: LIST
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: ST_TO_ADDR
// end ; 2 :
63549: GO 64108
63551: LD_INT 2
63553: DOUBLE
63554: EQUAL
63555: IFTRUE 63559
63557: GO 63688
63559: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63560: LD_ADDR_VAR 0 5
63564: PUSH
63565: LD_VAR 0 1
63569: PUSH
63570: LD_VAR 0 2
63574: PUSH
63575: LD_INT 3
63577: MINUS
63578: PUSH
63579: LD_INT 3
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: LIST
63586: PUSH
63587: LD_VAR 0 1
63591: PUSH
63592: LD_INT 4
63594: PLUS
63595: PUSH
63596: LD_VAR 0 2
63600: PUSH
63601: LD_INT 4
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: LIST
63608: PUSH
63609: LD_VAR 0 1
63613: PUSH
63614: LD_VAR 0 2
63618: PUSH
63619: LD_INT 4
63621: PLUS
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: LIST
63630: PUSH
63631: LD_VAR 0 1
63635: PUSH
63636: LD_INT 3
63638: MINUS
63639: PUSH
63640: LD_VAR 0 2
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: LIST
63652: PUSH
63653: LD_VAR 0 1
63657: PUSH
63658: LD_INT 4
63660: MINUS
63661: PUSH
63662: LD_VAR 0 2
63666: PUSH
63667: LD_INT 4
63669: MINUS
63670: PUSH
63671: LD_INT 2
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: ST_TO_ADDR
// end ; 3 :
63686: GO 64108
63688: LD_INT 3
63690: DOUBLE
63691: EQUAL
63692: IFTRUE 63696
63694: GO 63829
63696: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63697: LD_ADDR_VAR 0 5
63701: PUSH
63702: LD_VAR 0 1
63706: PUSH
63707: LD_INT 3
63709: PLUS
63710: PUSH
63711: LD_VAR 0 2
63715: PUSH
63716: LD_INT 4
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: LIST
63723: PUSH
63724: LD_VAR 0 1
63728: PUSH
63729: LD_INT 4
63731: PLUS
63732: PUSH
63733: LD_VAR 0 2
63737: PUSH
63738: LD_INT 4
63740: PLUS
63741: PUSH
63742: LD_INT 5
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: LIST
63749: PUSH
63750: LD_VAR 0 1
63754: PUSH
63755: LD_INT 4
63757: MINUS
63758: PUSH
63759: LD_VAR 0 2
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: LIST
63771: PUSH
63772: LD_VAR 0 1
63776: PUSH
63777: LD_VAR 0 2
63781: PUSH
63782: LD_INT 4
63784: MINUS
63785: PUSH
63786: LD_INT 3
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: LIST
63793: PUSH
63794: LD_VAR 0 1
63798: PUSH
63799: LD_INT 3
63801: MINUS
63802: PUSH
63803: LD_VAR 0 2
63807: PUSH
63808: LD_INT 3
63810: MINUS
63811: PUSH
63812: LD_INT 2
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: LIST
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: ST_TO_ADDR
// end ; 4 :
63827: GO 64108
63829: LD_INT 4
63831: DOUBLE
63832: EQUAL
63833: IFTRUE 63837
63835: GO 63970
63837: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63838: LD_ADDR_VAR 0 5
63842: PUSH
63843: LD_VAR 0 1
63847: PUSH
63848: LD_VAR 0 2
63852: PUSH
63853: LD_INT 4
63855: PLUS
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: LIST
63864: PUSH
63865: LD_VAR 0 1
63869: PUSH
63870: LD_INT 3
63872: PLUS
63873: PUSH
63874: LD_VAR 0 2
63878: PUSH
63879: LD_INT 3
63881: PLUS
63882: PUSH
63883: LD_INT 5
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: LIST
63890: PUSH
63891: LD_VAR 0 1
63895: PUSH
63896: LD_INT 4
63898: PLUS
63899: PUSH
63900: LD_VAR 0 2
63904: PUSH
63905: LD_INT 4
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: LIST
63912: PUSH
63913: LD_VAR 0 1
63917: PUSH
63918: LD_VAR 0 2
63922: PUSH
63923: LD_INT 3
63925: MINUS
63926: PUSH
63927: LD_INT 3
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: LIST
63934: PUSH
63935: LD_VAR 0 1
63939: PUSH
63940: LD_INT 4
63942: MINUS
63943: PUSH
63944: LD_VAR 0 2
63948: PUSH
63949: LD_INT 4
63951: MINUS
63952: PUSH
63953: LD_INT 2
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: LIST
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: ST_TO_ADDR
// end ; 5 :
63968: GO 64108
63970: LD_INT 5
63972: DOUBLE
63973: EQUAL
63974: IFTRUE 63978
63976: GO 64107
63978: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63979: LD_ADDR_VAR 0 5
63983: PUSH
63984: LD_VAR 0 1
63988: PUSH
63989: LD_INT 4
63991: MINUS
63992: PUSH
63993: LD_VAR 0 2
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: LIST
64005: PUSH
64006: LD_VAR 0 1
64010: PUSH
64011: LD_VAR 0 2
64015: PUSH
64016: LD_INT 4
64018: MINUS
64019: PUSH
64020: LD_INT 3
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: LIST
64027: PUSH
64028: LD_VAR 0 1
64032: PUSH
64033: LD_INT 4
64035: PLUS
64036: PUSH
64037: LD_VAR 0 2
64041: PUSH
64042: LD_INT 4
64044: PLUS
64045: PUSH
64046: LD_INT 5
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: LIST
64053: PUSH
64054: LD_VAR 0 1
64058: PUSH
64059: LD_INT 3
64061: PLUS
64062: PUSH
64063: LD_VAR 0 2
64067: PUSH
64068: LD_INT 4
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: LIST
64075: PUSH
64076: LD_VAR 0 1
64080: PUSH
64081: LD_VAR 0 2
64085: PUSH
64086: LD_INT 3
64088: PLUS
64089: PUSH
64090: LD_INT 0
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: LIST
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: ST_TO_ADDR
// end ; end ;
64105: GO 64108
64107: POP
// result := list ;
64108: LD_ADDR_VAR 0 4
64112: PUSH
64113: LD_VAR 0 5
64117: ST_TO_ADDR
// end ;
64118: LD_VAR 0 4
64122: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64123: LD_INT 0
64125: PPUSH
64126: PPUSH
64127: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64128: LD_VAR 0 1
64132: NOT
64133: PUSH
64134: LD_VAR 0 2
64138: PUSH
64139: LD_INT 1
64141: PUSH
64142: LD_INT 2
64144: PUSH
64145: LD_INT 3
64147: PUSH
64148: LD_INT 4
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: IN
64157: NOT
64158: OR
64159: IFFALSE 64163
// exit ;
64161: GO 64255
// tmp := [ ] ;
64163: LD_ADDR_VAR 0 5
64167: PUSH
64168: EMPTY
64169: ST_TO_ADDR
// for i in units do
64170: LD_ADDR_VAR 0 4
64174: PUSH
64175: LD_VAR 0 1
64179: PUSH
64180: FOR_IN
64181: IFFALSE 64224
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64183: LD_ADDR_VAR 0 5
64187: PUSH
64188: LD_VAR 0 5
64192: PPUSH
64193: LD_VAR 0 5
64197: PUSH
64198: LD_INT 1
64200: PLUS
64201: PPUSH
64202: LD_VAR 0 4
64206: PPUSH
64207: LD_VAR 0 2
64211: PPUSH
64212: CALL_OW 259
64216: PPUSH
64217: CALL_OW 2
64221: ST_TO_ADDR
64222: GO 64180
64224: POP
64225: POP
// if not tmp then
64226: LD_VAR 0 5
64230: NOT
64231: IFFALSE 64235
// exit ;
64233: GO 64255
// result := SortListByListDesc ( units , tmp ) ;
64235: LD_ADDR_VAR 0 3
64239: PUSH
64240: LD_VAR 0 1
64244: PPUSH
64245: LD_VAR 0 5
64249: PPUSH
64250: CALL_OW 77
64254: ST_TO_ADDR
// end ;
64255: LD_VAR 0 3
64259: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64260: LD_INT 0
64262: PPUSH
64263: PPUSH
64264: PPUSH
// result := false ;
64265: LD_ADDR_VAR 0 3
64269: PUSH
64270: LD_INT 0
64272: ST_TO_ADDR
// x := GetX ( building ) ;
64273: LD_ADDR_VAR 0 4
64277: PUSH
64278: LD_VAR 0 2
64282: PPUSH
64283: CALL_OW 250
64287: ST_TO_ADDR
// y := GetY ( building ) ;
64288: LD_ADDR_VAR 0 5
64292: PUSH
64293: LD_VAR 0 2
64297: PPUSH
64298: CALL_OW 251
64302: ST_TO_ADDR
// if not building or not x or not y then
64303: LD_VAR 0 2
64307: NOT
64308: PUSH
64309: LD_VAR 0 4
64313: NOT
64314: OR
64315: PUSH
64316: LD_VAR 0 5
64320: NOT
64321: OR
64322: IFFALSE 64326
// exit ;
64324: GO 64418
// if GetTaskList ( unit ) then
64326: LD_VAR 0 1
64330: PPUSH
64331: CALL_OW 437
64335: IFFALSE 64418
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64337: LD_STRING e
64339: PUSH
64340: LD_VAR 0 1
64344: PPUSH
64345: CALL_OW 437
64349: PUSH
64350: LD_INT 1
64352: ARRAY
64353: PUSH
64354: LD_INT 1
64356: ARRAY
64357: EQUAL
64358: PUSH
64359: LD_VAR 0 4
64363: PUSH
64364: LD_VAR 0 1
64368: PPUSH
64369: CALL_OW 437
64373: PUSH
64374: LD_INT 1
64376: ARRAY
64377: PUSH
64378: LD_INT 2
64380: ARRAY
64381: EQUAL
64382: AND
64383: PUSH
64384: LD_VAR 0 5
64388: PUSH
64389: LD_VAR 0 1
64393: PPUSH
64394: CALL_OW 437
64398: PUSH
64399: LD_INT 1
64401: ARRAY
64402: PUSH
64403: LD_INT 3
64405: ARRAY
64406: EQUAL
64407: AND
64408: IFFALSE 64418
// result := true end ;
64410: LD_ADDR_VAR 0 3
64414: PUSH
64415: LD_INT 1
64417: ST_TO_ADDR
// end ;
64418: LD_VAR 0 3
64422: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64423: LD_INT 0
64425: PPUSH
// result := false ;
64426: LD_ADDR_VAR 0 4
64430: PUSH
64431: LD_INT 0
64433: ST_TO_ADDR
// if GetTaskList ( unit ) then
64434: LD_VAR 0 1
64438: PPUSH
64439: CALL_OW 437
64443: IFFALSE 64526
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64445: LD_STRING M
64447: PUSH
64448: LD_VAR 0 1
64452: PPUSH
64453: CALL_OW 437
64457: PUSH
64458: LD_INT 1
64460: ARRAY
64461: PUSH
64462: LD_INT 1
64464: ARRAY
64465: EQUAL
64466: PUSH
64467: LD_VAR 0 2
64471: PUSH
64472: LD_VAR 0 1
64476: PPUSH
64477: CALL_OW 437
64481: PUSH
64482: LD_INT 1
64484: ARRAY
64485: PUSH
64486: LD_INT 2
64488: ARRAY
64489: EQUAL
64490: AND
64491: PUSH
64492: LD_VAR 0 3
64496: PUSH
64497: LD_VAR 0 1
64501: PPUSH
64502: CALL_OW 437
64506: PUSH
64507: LD_INT 1
64509: ARRAY
64510: PUSH
64511: LD_INT 3
64513: ARRAY
64514: EQUAL
64515: AND
64516: IFFALSE 64526
// result := true ;
64518: LD_ADDR_VAR 0 4
64522: PUSH
64523: LD_INT 1
64525: ST_TO_ADDR
// end ; end ;
64526: LD_VAR 0 4
64530: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64531: LD_INT 0
64533: PPUSH
64534: PPUSH
64535: PPUSH
64536: PPUSH
// if not unit or not area then
64537: LD_VAR 0 1
64541: NOT
64542: PUSH
64543: LD_VAR 0 2
64547: NOT
64548: OR
64549: IFFALSE 64553
// exit ;
64551: GO 64717
// tmp := AreaToList ( area , i ) ;
64553: LD_ADDR_VAR 0 6
64557: PUSH
64558: LD_VAR 0 2
64562: PPUSH
64563: LD_VAR 0 5
64567: PPUSH
64568: CALL_OW 517
64572: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64573: LD_ADDR_VAR 0 5
64577: PUSH
64578: DOUBLE
64579: LD_INT 1
64581: DEC
64582: ST_TO_ADDR
64583: LD_VAR 0 6
64587: PUSH
64588: LD_INT 1
64590: ARRAY
64591: PUSH
64592: FOR_TO
64593: IFFALSE 64715
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64595: LD_ADDR_VAR 0 7
64599: PUSH
64600: LD_VAR 0 6
64604: PUSH
64605: LD_INT 1
64607: ARRAY
64608: PUSH
64609: LD_VAR 0 5
64613: ARRAY
64614: PUSH
64615: LD_VAR 0 6
64619: PUSH
64620: LD_INT 2
64622: ARRAY
64623: PUSH
64624: LD_VAR 0 5
64628: ARRAY
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64634: LD_VAR 0 7
64638: PUSH
64639: LD_INT 1
64641: ARRAY
64642: PPUSH
64643: LD_VAR 0 7
64647: PUSH
64648: LD_INT 2
64650: ARRAY
64651: PPUSH
64652: CALL_OW 428
64656: PUSH
64657: LD_INT 0
64659: EQUAL
64660: IFFALSE 64713
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64662: LD_VAR 0 1
64666: PPUSH
64667: LD_VAR 0 7
64671: PUSH
64672: LD_INT 1
64674: ARRAY
64675: PPUSH
64676: LD_VAR 0 7
64680: PUSH
64681: LD_INT 2
64683: ARRAY
64684: PPUSH
64685: LD_VAR 0 3
64689: PPUSH
64690: CALL_OW 48
// result := IsPlaced ( unit ) ;
64694: LD_ADDR_VAR 0 4
64698: PUSH
64699: LD_VAR 0 1
64703: PPUSH
64704: CALL_OW 305
64708: ST_TO_ADDR
// exit ;
64709: POP
64710: POP
64711: GO 64717
// end ; end ;
64713: GO 64592
64715: POP
64716: POP
// end ;
64717: LD_VAR 0 4
64721: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64722: LD_INT 0
64724: PPUSH
64725: PPUSH
64726: PPUSH
// if not side or side > 8 then
64727: LD_VAR 0 1
64731: NOT
64732: PUSH
64733: LD_VAR 0 1
64737: PUSH
64738: LD_INT 8
64740: GREATER
64741: OR
64742: IFFALSE 64746
// exit ;
64744: GO 64933
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64746: LD_ADDR_VAR 0 4
64750: PUSH
64751: LD_INT 22
64753: PUSH
64754: LD_VAR 0 1
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 21
64765: PUSH
64766: LD_INT 3
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PPUSH
64777: CALL_OW 69
64781: ST_TO_ADDR
// if not tmp then
64782: LD_VAR 0 4
64786: NOT
64787: IFFALSE 64791
// exit ;
64789: GO 64933
// enable_addtolog := true ;
64791: LD_ADDR_OWVAR 81
64795: PUSH
64796: LD_INT 1
64798: ST_TO_ADDR
// AddToLog ( [ ) ;
64799: LD_STRING [
64801: PPUSH
64802: CALL_OW 561
// for i in tmp do
64806: LD_ADDR_VAR 0 3
64810: PUSH
64811: LD_VAR 0 4
64815: PUSH
64816: FOR_IN
64817: IFFALSE 64924
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64819: LD_STRING [
64821: PUSH
64822: LD_VAR 0 3
64826: PPUSH
64827: CALL_OW 266
64831: STR
64832: PUSH
64833: LD_STRING , 
64835: STR
64836: PUSH
64837: LD_VAR 0 3
64841: PPUSH
64842: CALL_OW 250
64846: STR
64847: PUSH
64848: LD_STRING , 
64850: STR
64851: PUSH
64852: LD_VAR 0 3
64856: PPUSH
64857: CALL_OW 251
64861: STR
64862: PUSH
64863: LD_STRING , 
64865: STR
64866: PUSH
64867: LD_VAR 0 3
64871: PPUSH
64872: CALL_OW 254
64876: STR
64877: PUSH
64878: LD_STRING , 
64880: STR
64881: PUSH
64882: LD_VAR 0 3
64886: PPUSH
64887: LD_INT 1
64889: PPUSH
64890: CALL_OW 268
64894: STR
64895: PUSH
64896: LD_STRING , 
64898: STR
64899: PUSH
64900: LD_VAR 0 3
64904: PPUSH
64905: LD_INT 2
64907: PPUSH
64908: CALL_OW 268
64912: STR
64913: PUSH
64914: LD_STRING ],
64916: STR
64917: PPUSH
64918: CALL_OW 561
// end ;
64922: GO 64816
64924: POP
64925: POP
// AddToLog ( ]; ) ;
64926: LD_STRING ];
64928: PPUSH
64929: CALL_OW 561
// end ;
64933: LD_VAR 0 2
64937: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64938: LD_INT 0
64940: PPUSH
64941: PPUSH
64942: PPUSH
64943: PPUSH
64944: PPUSH
// if not area or not rate or not max then
64945: LD_VAR 0 1
64949: NOT
64950: PUSH
64951: LD_VAR 0 2
64955: NOT
64956: OR
64957: PUSH
64958: LD_VAR 0 4
64962: NOT
64963: OR
64964: IFFALSE 64968
// exit ;
64966: GO 65160
// while 1 do
64968: LD_INT 1
64970: IFFALSE 65160
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64972: LD_ADDR_VAR 0 9
64976: PUSH
64977: LD_VAR 0 1
64981: PPUSH
64982: LD_INT 1
64984: PPUSH
64985: CALL_OW 287
64989: PUSH
64990: LD_INT 10
64992: MUL
64993: ST_TO_ADDR
// r := rate / 10 ;
64994: LD_ADDR_VAR 0 7
64998: PUSH
64999: LD_VAR 0 2
65003: PUSH
65004: LD_INT 10
65006: DIVREAL
65007: ST_TO_ADDR
// time := 1 1$00 ;
65008: LD_ADDR_VAR 0 8
65012: PUSH
65013: LD_INT 2100
65015: ST_TO_ADDR
// if amount < min then
65016: LD_VAR 0 9
65020: PUSH
65021: LD_VAR 0 3
65025: LESS
65026: IFFALSE 65044
// r := r * 2 else
65028: LD_ADDR_VAR 0 7
65032: PUSH
65033: LD_VAR 0 7
65037: PUSH
65038: LD_INT 2
65040: MUL
65041: ST_TO_ADDR
65042: GO 65070
// if amount > max then
65044: LD_VAR 0 9
65048: PUSH
65049: LD_VAR 0 4
65053: GREATER
65054: IFFALSE 65070
// r := r / 2 ;
65056: LD_ADDR_VAR 0 7
65060: PUSH
65061: LD_VAR 0 7
65065: PUSH
65066: LD_INT 2
65068: DIVREAL
65069: ST_TO_ADDR
// time := time / r ;
65070: LD_ADDR_VAR 0 8
65074: PUSH
65075: LD_VAR 0 8
65079: PUSH
65080: LD_VAR 0 7
65084: DIVREAL
65085: ST_TO_ADDR
// if time < 0 then
65086: LD_VAR 0 8
65090: PUSH
65091: LD_INT 0
65093: LESS
65094: IFFALSE 65111
// time := time * - 1 ;
65096: LD_ADDR_VAR 0 8
65100: PUSH
65101: LD_VAR 0 8
65105: PUSH
65106: LD_INT 1
65108: NEG
65109: MUL
65110: ST_TO_ADDR
// wait ( time ) ;
65111: LD_VAR 0 8
65115: PPUSH
65116: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65120: LD_INT 35
65122: PPUSH
65123: LD_INT 875
65125: PPUSH
65126: CALL_OW 12
65130: PPUSH
65131: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65135: LD_INT 1
65137: PPUSH
65138: LD_INT 5
65140: PPUSH
65141: CALL_OW 12
65145: PPUSH
65146: LD_VAR 0 1
65150: PPUSH
65151: LD_INT 1
65153: PPUSH
65154: CALL_OW 55
// end ;
65158: GO 64968
// end ;
65160: LD_VAR 0 5
65164: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65165: LD_INT 0
65167: PPUSH
65168: PPUSH
65169: PPUSH
65170: PPUSH
65171: PPUSH
65172: PPUSH
65173: PPUSH
65174: PPUSH
// if not turrets or not factories then
65175: LD_VAR 0 1
65179: NOT
65180: PUSH
65181: LD_VAR 0 2
65185: NOT
65186: OR
65187: IFFALSE 65191
// exit ;
65189: GO 65498
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65191: LD_ADDR_VAR 0 10
65195: PUSH
65196: LD_INT 5
65198: PUSH
65199: LD_INT 6
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 2
65208: PUSH
65209: LD_INT 4
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 3
65218: PUSH
65219: LD_INT 5
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 24
65233: PUSH
65234: LD_INT 25
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 23
65243: PUSH
65244: LD_INT 27
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 42
65257: PUSH
65258: LD_INT 43
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 44
65267: PUSH
65268: LD_INT 46
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 45
65277: PUSH
65278: LD_INT 47
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: LIST
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: LIST
65294: ST_TO_ADDR
// result := [ ] ;
65295: LD_ADDR_VAR 0 3
65299: PUSH
65300: EMPTY
65301: ST_TO_ADDR
// for i in turrets do
65302: LD_ADDR_VAR 0 4
65306: PUSH
65307: LD_VAR 0 1
65311: PUSH
65312: FOR_IN
65313: IFFALSE 65496
// begin nat := GetNation ( i ) ;
65315: LD_ADDR_VAR 0 7
65319: PUSH
65320: LD_VAR 0 4
65324: PPUSH
65325: CALL_OW 248
65329: ST_TO_ADDR
// weapon := 0 ;
65330: LD_ADDR_VAR 0 8
65334: PUSH
65335: LD_INT 0
65337: ST_TO_ADDR
// if not nat then
65338: LD_VAR 0 7
65342: NOT
65343: IFFALSE 65347
// continue ;
65345: GO 65312
// for j in list [ nat ] do
65347: LD_ADDR_VAR 0 5
65351: PUSH
65352: LD_VAR 0 10
65356: PUSH
65357: LD_VAR 0 7
65361: ARRAY
65362: PUSH
65363: FOR_IN
65364: IFFALSE 65405
// if GetBWeapon ( i ) = j [ 1 ] then
65366: LD_VAR 0 4
65370: PPUSH
65371: CALL_OW 269
65375: PUSH
65376: LD_VAR 0 5
65380: PUSH
65381: LD_INT 1
65383: ARRAY
65384: EQUAL
65385: IFFALSE 65403
// begin weapon := j [ 2 ] ;
65387: LD_ADDR_VAR 0 8
65391: PUSH
65392: LD_VAR 0 5
65396: PUSH
65397: LD_INT 2
65399: ARRAY
65400: ST_TO_ADDR
// break ;
65401: GO 65405
// end ;
65403: GO 65363
65405: POP
65406: POP
// if not weapon then
65407: LD_VAR 0 8
65411: NOT
65412: IFFALSE 65416
// continue ;
65414: GO 65312
// for k in factories do
65416: LD_ADDR_VAR 0 6
65420: PUSH
65421: LD_VAR 0 2
65425: PUSH
65426: FOR_IN
65427: IFFALSE 65492
// begin weapons := AvailableWeaponList ( k ) ;
65429: LD_ADDR_VAR 0 9
65433: PUSH
65434: LD_VAR 0 6
65438: PPUSH
65439: CALL_OW 478
65443: ST_TO_ADDR
// if not weapons then
65444: LD_VAR 0 9
65448: NOT
65449: IFFALSE 65453
// continue ;
65451: GO 65426
// if weapon in weapons then
65453: LD_VAR 0 8
65457: PUSH
65458: LD_VAR 0 9
65462: IN
65463: IFFALSE 65490
// begin result := [ i , weapon ] ;
65465: LD_ADDR_VAR 0 3
65469: PUSH
65470: LD_VAR 0 4
65474: PUSH
65475: LD_VAR 0 8
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: ST_TO_ADDR
// exit ;
65484: POP
65485: POP
65486: POP
65487: POP
65488: GO 65498
// end ; end ;
65490: GO 65426
65492: POP
65493: POP
// end ;
65494: GO 65312
65496: POP
65497: POP
// end ;
65498: LD_VAR 0 3
65502: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65503: LD_INT 0
65505: PPUSH
// if not side or side > 8 then
65506: LD_VAR 0 3
65510: NOT
65511: PUSH
65512: LD_VAR 0 3
65516: PUSH
65517: LD_INT 8
65519: GREATER
65520: OR
65521: IFFALSE 65525
// exit ;
65523: GO 65584
// if not range then
65525: LD_VAR 0 4
65529: NOT
65530: IFFALSE 65541
// range := - 12 ;
65532: LD_ADDR_VAR 0 4
65536: PUSH
65537: LD_INT 12
65539: NEG
65540: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65541: LD_VAR 0 1
65545: PPUSH
65546: LD_VAR 0 2
65550: PPUSH
65551: LD_VAR 0 3
65555: PPUSH
65556: LD_VAR 0 4
65560: PPUSH
65561: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65565: LD_VAR 0 1
65569: PPUSH
65570: LD_VAR 0 2
65574: PPUSH
65575: LD_VAR 0 3
65579: PPUSH
65580: CALL_OW 331
// end ;
65584: LD_VAR 0 5
65588: RET
// export function Video ( mode ) ; begin
65589: LD_INT 0
65591: PPUSH
// ingame_video = mode ;
65592: LD_ADDR_OWVAR 52
65596: PUSH
65597: LD_VAR 0 1
65601: ST_TO_ADDR
// interface_hidden = mode ;
65602: LD_ADDR_OWVAR 54
65606: PUSH
65607: LD_VAR 0 1
65611: ST_TO_ADDR
// end ;
65612: LD_VAR 0 2
65616: RET
// export function Join ( array , element ) ; begin
65617: LD_INT 0
65619: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65620: LD_ADDR_VAR 0 3
65624: PUSH
65625: LD_VAR 0 1
65629: PPUSH
65630: LD_VAR 0 1
65634: PUSH
65635: LD_INT 1
65637: PLUS
65638: PPUSH
65639: LD_VAR 0 2
65643: PPUSH
65644: CALL_OW 1
65648: ST_TO_ADDR
// end ;
65649: LD_VAR 0 3
65653: RET
// export function JoinUnion ( array , element ) ; begin
65654: LD_INT 0
65656: PPUSH
// result := array union element ;
65657: LD_ADDR_VAR 0 3
65661: PUSH
65662: LD_VAR 0 1
65666: PUSH
65667: LD_VAR 0 2
65671: UNION
65672: ST_TO_ADDR
// end ;
65673: LD_VAR 0 3
65677: RET
// export function GetBehemoths ( side ) ; begin
65678: LD_INT 0
65680: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65681: LD_ADDR_VAR 0 2
65685: PUSH
65686: LD_INT 22
65688: PUSH
65689: LD_VAR 0 1
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 31
65700: PUSH
65701: LD_INT 25
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PPUSH
65712: CALL_OW 69
65716: ST_TO_ADDR
// end ;
65717: LD_VAR 0 2
65721: RET
// export function Shuffle ( array ) ; var i , index ; begin
65722: LD_INT 0
65724: PPUSH
65725: PPUSH
65726: PPUSH
// result := [ ] ;
65727: LD_ADDR_VAR 0 2
65731: PUSH
65732: EMPTY
65733: ST_TO_ADDR
// if not array then
65734: LD_VAR 0 1
65738: NOT
65739: IFFALSE 65743
// exit ;
65741: GO 65842
// Randomize ;
65743: CALL_OW 10
// for i = array downto 1 do
65747: LD_ADDR_VAR 0 3
65751: PUSH
65752: DOUBLE
65753: LD_VAR 0 1
65757: INC
65758: ST_TO_ADDR
65759: LD_INT 1
65761: PUSH
65762: FOR_DOWNTO
65763: IFFALSE 65840
// begin index := rand ( 1 , array ) ;
65765: LD_ADDR_VAR 0 4
65769: PUSH
65770: LD_INT 1
65772: PPUSH
65773: LD_VAR 0 1
65777: PPUSH
65778: CALL_OW 12
65782: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65783: LD_ADDR_VAR 0 2
65787: PUSH
65788: LD_VAR 0 2
65792: PPUSH
65793: LD_VAR 0 2
65797: PUSH
65798: LD_INT 1
65800: PLUS
65801: PPUSH
65802: LD_VAR 0 1
65806: PUSH
65807: LD_VAR 0 4
65811: ARRAY
65812: PPUSH
65813: CALL_OW 2
65817: ST_TO_ADDR
// array := Delete ( array , index ) ;
65818: LD_ADDR_VAR 0 1
65822: PUSH
65823: LD_VAR 0 1
65827: PPUSH
65828: LD_VAR 0 4
65832: PPUSH
65833: CALL_OW 3
65837: ST_TO_ADDR
// end ;
65838: GO 65762
65840: POP
65841: POP
// end ;
65842: LD_VAR 0 2
65846: RET
// export function GetBaseMaterials ( base ) ; begin
65847: LD_INT 0
65849: PPUSH
// result := [ 0 , 0 , 0 ] ;
65850: LD_ADDR_VAR 0 2
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: LIST
65868: ST_TO_ADDR
// if not base then
65869: LD_VAR 0 1
65873: NOT
65874: IFFALSE 65878
// exit ;
65876: GO 65927
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65878: LD_ADDR_VAR 0 2
65882: PUSH
65883: LD_VAR 0 1
65887: PPUSH
65888: LD_INT 1
65890: PPUSH
65891: CALL_OW 275
65895: PUSH
65896: LD_VAR 0 1
65900: PPUSH
65901: LD_INT 2
65903: PPUSH
65904: CALL_OW 275
65908: PUSH
65909: LD_VAR 0 1
65913: PPUSH
65914: LD_INT 3
65916: PPUSH
65917: CALL_OW 275
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: LIST
65926: ST_TO_ADDR
// end ;
65927: LD_VAR 0 2
65931: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65932: LD_INT 0
65934: PPUSH
65935: PPUSH
// result := array ;
65936: LD_ADDR_VAR 0 3
65940: PUSH
65941: LD_VAR 0 1
65945: ST_TO_ADDR
// if size > 0 then
65946: LD_VAR 0 2
65950: PUSH
65951: LD_INT 0
65953: GREATER
65954: IFFALSE 66000
// for i := array downto size do
65956: LD_ADDR_VAR 0 4
65960: PUSH
65961: DOUBLE
65962: LD_VAR 0 1
65966: INC
65967: ST_TO_ADDR
65968: LD_VAR 0 2
65972: PUSH
65973: FOR_DOWNTO
65974: IFFALSE 65998
// result := Delete ( result , result ) ;
65976: LD_ADDR_VAR 0 3
65980: PUSH
65981: LD_VAR 0 3
65985: PPUSH
65986: LD_VAR 0 3
65990: PPUSH
65991: CALL_OW 3
65995: ST_TO_ADDR
65996: GO 65973
65998: POP
65999: POP
// end ;
66000: LD_VAR 0 3
66004: RET
// export function ComExit ( unit ) ; var tmp ; begin
66005: LD_INT 0
66007: PPUSH
66008: PPUSH
// if not IsInUnit ( unit ) then
66009: LD_VAR 0 1
66013: PPUSH
66014: CALL_OW 310
66018: NOT
66019: IFFALSE 66023
// exit ;
66021: GO 66083
// tmp := IsInUnit ( unit ) ;
66023: LD_ADDR_VAR 0 3
66027: PUSH
66028: LD_VAR 0 1
66032: PPUSH
66033: CALL_OW 310
66037: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66038: LD_VAR 0 3
66042: PPUSH
66043: CALL_OW 247
66047: PUSH
66048: LD_INT 2
66050: EQUAL
66051: IFFALSE 66064
// ComExitVehicle ( unit ) else
66053: LD_VAR 0 1
66057: PPUSH
66058: CALL_OW 121
66062: GO 66073
// ComExitBuilding ( unit ) ;
66064: LD_VAR 0 1
66068: PPUSH
66069: CALL_OW 122
// result := tmp ;
66073: LD_ADDR_VAR 0 2
66077: PUSH
66078: LD_VAR 0 3
66082: ST_TO_ADDR
// end ;
66083: LD_VAR 0 2
66087: RET
// export function ComExitAll ( units ) ; var i ; begin
66088: LD_INT 0
66090: PPUSH
66091: PPUSH
// if not units then
66092: LD_VAR 0 1
66096: NOT
66097: IFFALSE 66101
// exit ;
66099: GO 66127
// for i in units do
66101: LD_ADDR_VAR 0 3
66105: PUSH
66106: LD_VAR 0 1
66110: PUSH
66111: FOR_IN
66112: IFFALSE 66125
// ComExit ( i ) ;
66114: LD_VAR 0 3
66118: PPUSH
66119: CALL 66005 0 1
66123: GO 66111
66125: POP
66126: POP
// end ;
66127: LD_VAR 0 2
66131: RET
// export function ResetHc ; begin
66132: LD_INT 0
66134: PPUSH
// InitHc ;
66135: CALL_OW 19
// hc_importance := 0 ;
66139: LD_ADDR_OWVAR 32
66143: PUSH
66144: LD_INT 0
66146: ST_TO_ADDR
// end ;
66147: LD_VAR 0 1
66151: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66152: LD_INT 0
66154: PPUSH
66155: PPUSH
66156: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66157: LD_ADDR_VAR 0 6
66161: PUSH
66162: LD_VAR 0 1
66166: PUSH
66167: LD_VAR 0 3
66171: PLUS
66172: PUSH
66173: LD_INT 2
66175: DIV
66176: ST_TO_ADDR
// if _x < 0 then
66177: LD_VAR 0 6
66181: PUSH
66182: LD_INT 0
66184: LESS
66185: IFFALSE 66202
// _x := _x * - 1 ;
66187: LD_ADDR_VAR 0 6
66191: PUSH
66192: LD_VAR 0 6
66196: PUSH
66197: LD_INT 1
66199: NEG
66200: MUL
66201: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66202: LD_ADDR_VAR 0 7
66206: PUSH
66207: LD_VAR 0 2
66211: PUSH
66212: LD_VAR 0 4
66216: PLUS
66217: PUSH
66218: LD_INT 2
66220: DIV
66221: ST_TO_ADDR
// if _y < 0 then
66222: LD_VAR 0 7
66226: PUSH
66227: LD_INT 0
66229: LESS
66230: IFFALSE 66247
// _y := _y * - 1 ;
66232: LD_ADDR_VAR 0 7
66236: PUSH
66237: LD_VAR 0 7
66241: PUSH
66242: LD_INT 1
66244: NEG
66245: MUL
66246: ST_TO_ADDR
// result := [ _x , _y ] ;
66247: LD_ADDR_VAR 0 5
66251: PUSH
66252: LD_VAR 0 6
66256: PUSH
66257: LD_VAR 0 7
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: ST_TO_ADDR
// end ;
66266: LD_VAR 0 5
66270: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66271: LD_INT 0
66273: PPUSH
66274: PPUSH
66275: PPUSH
66276: PPUSH
// task := GetTaskList ( unit ) ;
66277: LD_ADDR_VAR 0 7
66281: PUSH
66282: LD_VAR 0 1
66286: PPUSH
66287: CALL_OW 437
66291: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66292: LD_VAR 0 7
66296: NOT
66297: PUSH
66298: LD_VAR 0 1
66302: PPUSH
66303: LD_VAR 0 2
66307: PPUSH
66308: CALL_OW 308
66312: NOT
66313: AND
66314: IFFALSE 66318
// exit ;
66316: GO 66436
// if IsInArea ( unit , area ) then
66318: LD_VAR 0 1
66322: PPUSH
66323: LD_VAR 0 2
66327: PPUSH
66328: CALL_OW 308
66332: IFFALSE 66350
// begin ComMoveToArea ( unit , goAway ) ;
66334: LD_VAR 0 1
66338: PPUSH
66339: LD_VAR 0 3
66343: PPUSH
66344: CALL_OW 113
// exit ;
66348: GO 66436
// end ; if task [ 1 ] [ 1 ] <> M then
66350: LD_VAR 0 7
66354: PUSH
66355: LD_INT 1
66357: ARRAY
66358: PUSH
66359: LD_INT 1
66361: ARRAY
66362: PUSH
66363: LD_STRING M
66365: NONEQUAL
66366: IFFALSE 66370
// exit ;
66368: GO 66436
// x := task [ 1 ] [ 2 ] ;
66370: LD_ADDR_VAR 0 5
66374: PUSH
66375: LD_VAR 0 7
66379: PUSH
66380: LD_INT 1
66382: ARRAY
66383: PUSH
66384: LD_INT 2
66386: ARRAY
66387: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66388: LD_ADDR_VAR 0 6
66392: PUSH
66393: LD_VAR 0 7
66397: PUSH
66398: LD_INT 1
66400: ARRAY
66401: PUSH
66402: LD_INT 3
66404: ARRAY
66405: ST_TO_ADDR
// if InArea ( x , y , area ) then
66406: LD_VAR 0 5
66410: PPUSH
66411: LD_VAR 0 6
66415: PPUSH
66416: LD_VAR 0 2
66420: PPUSH
66421: CALL_OW 309
66425: IFFALSE 66436
// ComStop ( unit ) ;
66427: LD_VAR 0 1
66431: PPUSH
66432: CALL_OW 141
// end ;
66436: LD_VAR 0 4
66440: RET
// export function Abs ( value ) ; begin
66441: LD_INT 0
66443: PPUSH
// result := value ;
66444: LD_ADDR_VAR 0 2
66448: PUSH
66449: LD_VAR 0 1
66453: ST_TO_ADDR
// if value < 0 then
66454: LD_VAR 0 1
66458: PUSH
66459: LD_INT 0
66461: LESS
66462: IFFALSE 66479
// result := value * - 1 ;
66464: LD_ADDR_VAR 0 2
66468: PUSH
66469: LD_VAR 0 1
66473: PUSH
66474: LD_INT 1
66476: NEG
66477: MUL
66478: ST_TO_ADDR
// end ;
66479: LD_VAR 0 2
66483: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66484: LD_INT 0
66486: PPUSH
66487: PPUSH
66488: PPUSH
66489: PPUSH
66490: PPUSH
66491: PPUSH
66492: PPUSH
66493: PPUSH
// if not unit or not building then
66494: LD_VAR 0 1
66498: NOT
66499: PUSH
66500: LD_VAR 0 2
66504: NOT
66505: OR
66506: IFFALSE 66510
// exit ;
66508: GO 66736
// x := GetX ( building ) ;
66510: LD_ADDR_VAR 0 4
66514: PUSH
66515: LD_VAR 0 2
66519: PPUSH
66520: CALL_OW 250
66524: ST_TO_ADDR
// y := GetY ( building ) ;
66525: LD_ADDR_VAR 0 6
66529: PUSH
66530: LD_VAR 0 2
66534: PPUSH
66535: CALL_OW 251
66539: ST_TO_ADDR
// d := GetDir ( building ) ;
66540: LD_ADDR_VAR 0 8
66544: PUSH
66545: LD_VAR 0 2
66549: PPUSH
66550: CALL_OW 254
66554: ST_TO_ADDR
// r := 4 ;
66555: LD_ADDR_VAR 0 9
66559: PUSH
66560: LD_INT 4
66562: ST_TO_ADDR
// for i := 1 to 5 do
66563: LD_ADDR_VAR 0 10
66567: PUSH
66568: DOUBLE
66569: LD_INT 1
66571: DEC
66572: ST_TO_ADDR
66573: LD_INT 5
66575: PUSH
66576: FOR_TO
66577: IFFALSE 66734
// begin _x := ShiftX ( x , d , r + i ) ;
66579: LD_ADDR_VAR 0 5
66583: PUSH
66584: LD_VAR 0 4
66588: PPUSH
66589: LD_VAR 0 8
66593: PPUSH
66594: LD_VAR 0 9
66598: PUSH
66599: LD_VAR 0 10
66603: PLUS
66604: PPUSH
66605: CALL_OW 272
66609: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66610: LD_ADDR_VAR 0 7
66614: PUSH
66615: LD_VAR 0 6
66619: PPUSH
66620: LD_VAR 0 8
66624: PPUSH
66625: LD_VAR 0 9
66629: PUSH
66630: LD_VAR 0 10
66634: PLUS
66635: PPUSH
66636: CALL_OW 273
66640: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66641: LD_VAR 0 5
66645: PPUSH
66646: LD_VAR 0 7
66650: PPUSH
66651: CALL_OW 488
66655: PUSH
66656: LD_VAR 0 5
66660: PPUSH
66661: LD_VAR 0 7
66665: PPUSH
66666: CALL_OW 428
66670: PPUSH
66671: CALL_OW 247
66675: PUSH
66676: LD_INT 3
66678: PUSH
66679: LD_INT 2
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: IN
66686: NOT
66687: AND
66688: IFFALSE 66732
// begin ComMoveXY ( unit , _x , _y ) ;
66690: LD_VAR 0 1
66694: PPUSH
66695: LD_VAR 0 5
66699: PPUSH
66700: LD_VAR 0 7
66704: PPUSH
66705: CALL_OW 111
// result := [ _x , _y ] ;
66709: LD_ADDR_VAR 0 3
66713: PUSH
66714: LD_VAR 0 5
66718: PUSH
66719: LD_VAR 0 7
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: ST_TO_ADDR
// exit ;
66728: POP
66729: POP
66730: GO 66736
// end ; end ;
66732: GO 66576
66734: POP
66735: POP
// end ;
66736: LD_VAR 0 3
66740: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66741: LD_INT 0
66743: PPUSH
66744: PPUSH
66745: PPUSH
// result := 0 ;
66746: LD_ADDR_VAR 0 3
66750: PUSH
66751: LD_INT 0
66753: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66754: LD_VAR 0 1
66758: PUSH
66759: LD_INT 0
66761: LESS
66762: PUSH
66763: LD_VAR 0 1
66767: PUSH
66768: LD_INT 8
66770: GREATER
66771: OR
66772: PUSH
66773: LD_VAR 0 2
66777: PUSH
66778: LD_INT 0
66780: LESS
66781: OR
66782: PUSH
66783: LD_VAR 0 2
66787: PUSH
66788: LD_INT 8
66790: GREATER
66791: OR
66792: IFFALSE 66796
// exit ;
66794: GO 66871
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66796: LD_ADDR_VAR 0 4
66800: PUSH
66801: LD_INT 22
66803: PUSH
66804: LD_VAR 0 2
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PPUSH
66813: CALL_OW 69
66817: PUSH
66818: FOR_IN
66819: IFFALSE 66869
// begin un := UnitShoot ( i ) ;
66821: LD_ADDR_VAR 0 5
66825: PUSH
66826: LD_VAR 0 4
66830: PPUSH
66831: CALL_OW 504
66835: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66836: LD_VAR 0 5
66840: PPUSH
66841: CALL_OW 255
66845: PUSH
66846: LD_VAR 0 1
66850: EQUAL
66851: IFFALSE 66867
// begin result := un ;
66853: LD_ADDR_VAR 0 3
66857: PUSH
66858: LD_VAR 0 5
66862: ST_TO_ADDR
// exit ;
66863: POP
66864: POP
66865: GO 66871
// end ; end ;
66867: GO 66818
66869: POP
66870: POP
// end ;
66871: LD_VAR 0 3
66875: RET
// export function GetCargoBay ( units ) ; begin
66876: LD_INT 0
66878: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66879: LD_ADDR_VAR 0 2
66883: PUSH
66884: LD_VAR 0 1
66888: PPUSH
66889: LD_INT 2
66891: PUSH
66892: LD_INT 34
66894: PUSH
66895: LD_INT 12
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 34
66904: PUSH
66905: LD_INT 51
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 34
66914: PUSH
66915: LD_INT 32
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 34
66924: PUSH
66925: LD_EXP 113
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: PPUSH
66941: CALL_OW 72
66945: ST_TO_ADDR
// end ;
66946: LD_VAR 0 2
66950: RET
// export function Negate ( value ) ; begin
66951: LD_INT 0
66953: PPUSH
// result := not value ;
66954: LD_ADDR_VAR 0 2
66958: PUSH
66959: LD_VAR 0 1
66963: NOT
66964: ST_TO_ADDR
// end ;
66965: LD_VAR 0 2
66969: RET
// export function Inc ( value ) ; begin
66970: LD_INT 0
66972: PPUSH
// result := value + 1 ;
66973: LD_ADDR_VAR 0 2
66977: PUSH
66978: LD_VAR 0 1
66982: PUSH
66983: LD_INT 1
66985: PLUS
66986: ST_TO_ADDR
// end ;
66987: LD_VAR 0 2
66991: RET
// export function Dec ( value ) ; begin
66992: LD_INT 0
66994: PPUSH
// result := value - 1 ;
66995: LD_ADDR_VAR 0 2
66999: PUSH
67000: LD_VAR 0 1
67004: PUSH
67005: LD_INT 1
67007: MINUS
67008: ST_TO_ADDR
// end ;
67009: LD_VAR 0 2
67013: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67014: LD_INT 0
67016: PPUSH
67017: PPUSH
67018: PPUSH
67019: PPUSH
67020: PPUSH
67021: PPUSH
67022: PPUSH
67023: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67024: LD_VAR 0 1
67028: PPUSH
67029: LD_VAR 0 2
67033: PPUSH
67034: CALL_OW 488
67038: NOT
67039: PUSH
67040: LD_VAR 0 3
67044: PPUSH
67045: LD_VAR 0 4
67049: PPUSH
67050: CALL_OW 488
67054: NOT
67055: OR
67056: IFFALSE 67069
// begin result := - 1 ;
67058: LD_ADDR_VAR 0 5
67062: PUSH
67063: LD_INT 1
67065: NEG
67066: ST_TO_ADDR
// exit ;
67067: GO 67304
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67069: LD_ADDR_VAR 0 12
67073: PUSH
67074: LD_VAR 0 1
67078: PPUSH
67079: LD_VAR 0 2
67083: PPUSH
67084: LD_VAR 0 3
67088: PPUSH
67089: LD_VAR 0 4
67093: PPUSH
67094: CALL 66152 0 4
67098: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67099: LD_ADDR_VAR 0 11
67103: PUSH
67104: LD_VAR 0 1
67108: PPUSH
67109: LD_VAR 0 2
67113: PPUSH
67114: LD_VAR 0 12
67118: PUSH
67119: LD_INT 1
67121: ARRAY
67122: PPUSH
67123: LD_VAR 0 12
67127: PUSH
67128: LD_INT 2
67130: ARRAY
67131: PPUSH
67132: CALL_OW 298
67136: ST_TO_ADDR
// distance := 9999 ;
67137: LD_ADDR_VAR 0 10
67141: PUSH
67142: LD_INT 9999
67144: ST_TO_ADDR
// for i := 0 to 5 do
67145: LD_ADDR_VAR 0 6
67149: PUSH
67150: DOUBLE
67151: LD_INT 0
67153: DEC
67154: ST_TO_ADDR
67155: LD_INT 5
67157: PUSH
67158: FOR_TO
67159: IFFALSE 67302
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67161: LD_ADDR_VAR 0 7
67165: PUSH
67166: LD_VAR 0 1
67170: PPUSH
67171: LD_VAR 0 6
67175: PPUSH
67176: LD_VAR 0 11
67180: PPUSH
67181: CALL_OW 272
67185: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67186: LD_ADDR_VAR 0 8
67190: PUSH
67191: LD_VAR 0 2
67195: PPUSH
67196: LD_VAR 0 6
67200: PPUSH
67201: LD_VAR 0 11
67205: PPUSH
67206: CALL_OW 273
67210: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67211: LD_VAR 0 7
67215: PPUSH
67216: LD_VAR 0 8
67220: PPUSH
67221: CALL_OW 488
67225: NOT
67226: IFFALSE 67230
// continue ;
67228: GO 67158
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67230: LD_ADDR_VAR 0 9
67234: PUSH
67235: LD_VAR 0 12
67239: PUSH
67240: LD_INT 1
67242: ARRAY
67243: PPUSH
67244: LD_VAR 0 12
67248: PUSH
67249: LD_INT 2
67251: ARRAY
67252: PPUSH
67253: LD_VAR 0 7
67257: PPUSH
67258: LD_VAR 0 8
67262: PPUSH
67263: CALL_OW 298
67267: ST_TO_ADDR
// if tmp < distance then
67268: LD_VAR 0 9
67272: PUSH
67273: LD_VAR 0 10
67277: LESS
67278: IFFALSE 67300
// begin result := i ;
67280: LD_ADDR_VAR 0 5
67284: PUSH
67285: LD_VAR 0 6
67289: ST_TO_ADDR
// distance := tmp ;
67290: LD_ADDR_VAR 0 10
67294: PUSH
67295: LD_VAR 0 9
67299: ST_TO_ADDR
// end ; end ;
67300: GO 67158
67302: POP
67303: POP
// end ;
67304: LD_VAR 0 5
67308: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67309: LD_INT 0
67311: PPUSH
67312: PPUSH
// if not driver or not IsInUnit ( driver ) then
67313: LD_VAR 0 1
67317: NOT
67318: PUSH
67319: LD_VAR 0 1
67323: PPUSH
67324: CALL_OW 310
67328: NOT
67329: OR
67330: IFFALSE 67334
// exit ;
67332: GO 67424
// vehicle := IsInUnit ( driver ) ;
67334: LD_ADDR_VAR 0 3
67338: PUSH
67339: LD_VAR 0 1
67343: PPUSH
67344: CALL_OW 310
67348: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67349: LD_VAR 0 1
67353: PPUSH
67354: LD_STRING \
67356: PUSH
67357: LD_INT 0
67359: PUSH
67360: LD_INT 0
67362: PUSH
67363: LD_INT 0
67365: PUSH
67366: LD_INT 0
67368: PUSH
67369: LD_INT 0
67371: PUSH
67372: LD_INT 0
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: PUSH
67384: LD_STRING E
67386: PUSH
67387: LD_INT 0
67389: PUSH
67390: LD_INT 0
67392: PUSH
67393: LD_VAR 0 3
67397: PUSH
67398: LD_INT 0
67400: PUSH
67401: LD_INT 0
67403: PUSH
67404: LD_INT 0
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PPUSH
67420: CALL_OW 446
// end ;
67424: LD_VAR 0 2
67428: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67429: LD_INT 0
67431: PPUSH
67432: PPUSH
// if not driver or not IsInUnit ( driver ) then
67433: LD_VAR 0 1
67437: NOT
67438: PUSH
67439: LD_VAR 0 1
67443: PPUSH
67444: CALL_OW 310
67448: NOT
67449: OR
67450: IFFALSE 67454
// exit ;
67452: GO 67544
// vehicle := IsInUnit ( driver ) ;
67454: LD_ADDR_VAR 0 3
67458: PUSH
67459: LD_VAR 0 1
67463: PPUSH
67464: CALL_OW 310
67468: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67469: LD_VAR 0 1
67473: PPUSH
67474: LD_STRING \
67476: PUSH
67477: LD_INT 0
67479: PUSH
67480: LD_INT 0
67482: PUSH
67483: LD_INT 0
67485: PUSH
67486: LD_INT 0
67488: PUSH
67489: LD_INT 0
67491: PUSH
67492: LD_INT 0
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: PUSH
67504: LD_STRING E
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: LD_INT 0
67512: PUSH
67513: LD_VAR 0 3
67517: PUSH
67518: LD_INT 0
67520: PUSH
67521: LD_INT 0
67523: PUSH
67524: LD_INT 0
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PPUSH
67540: CALL_OW 447
// end ;
67544: LD_VAR 0 2
67548: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67549: LD_INT 0
67551: PPUSH
67552: PPUSH
67553: PPUSH
// tmp := [ ] ;
67554: LD_ADDR_VAR 0 5
67558: PUSH
67559: EMPTY
67560: ST_TO_ADDR
// for i in units do
67561: LD_ADDR_VAR 0 4
67565: PUSH
67566: LD_VAR 0 1
67570: PUSH
67571: FOR_IN
67572: IFFALSE 67610
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67574: LD_ADDR_VAR 0 5
67578: PUSH
67579: LD_VAR 0 5
67583: PPUSH
67584: LD_VAR 0 5
67588: PUSH
67589: LD_INT 1
67591: PLUS
67592: PPUSH
67593: LD_VAR 0 4
67597: PPUSH
67598: CALL_OW 256
67602: PPUSH
67603: CALL_OW 2
67607: ST_TO_ADDR
67608: GO 67571
67610: POP
67611: POP
// if not tmp then
67612: LD_VAR 0 5
67616: NOT
67617: IFFALSE 67621
// exit ;
67619: GO 67669
// if asc then
67621: LD_VAR 0 2
67625: IFFALSE 67649
// result := SortListByListAsc ( units , tmp ) else
67627: LD_ADDR_VAR 0 3
67631: PUSH
67632: LD_VAR 0 1
67636: PPUSH
67637: LD_VAR 0 5
67641: PPUSH
67642: CALL_OW 76
67646: ST_TO_ADDR
67647: GO 67669
// result := SortListByListDesc ( units , tmp ) ;
67649: LD_ADDR_VAR 0 3
67653: PUSH
67654: LD_VAR 0 1
67658: PPUSH
67659: LD_VAR 0 5
67663: PPUSH
67664: CALL_OW 77
67668: ST_TO_ADDR
// end ;
67669: LD_VAR 0 3
67673: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67674: LD_INT 0
67676: PPUSH
67677: PPUSH
// task := GetTaskList ( mech ) ;
67678: LD_ADDR_VAR 0 4
67682: PUSH
67683: LD_VAR 0 1
67687: PPUSH
67688: CALL_OW 437
67692: ST_TO_ADDR
// if not task then
67693: LD_VAR 0 4
67697: NOT
67698: IFFALSE 67702
// exit ;
67700: GO 67744
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67702: LD_ADDR_VAR 0 3
67706: PUSH
67707: LD_VAR 0 4
67711: PUSH
67712: LD_INT 1
67714: ARRAY
67715: PUSH
67716: LD_INT 1
67718: ARRAY
67719: PUSH
67720: LD_STRING r
67722: EQUAL
67723: PUSH
67724: LD_VAR 0 4
67728: PUSH
67729: LD_INT 1
67731: ARRAY
67732: PUSH
67733: LD_INT 4
67735: ARRAY
67736: PUSH
67737: LD_VAR 0 2
67741: EQUAL
67742: AND
67743: ST_TO_ADDR
// end ;
67744: LD_VAR 0 3
67748: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67749: LD_INT 0
67751: PPUSH
// SetDir ( unit , d ) ;
67752: LD_VAR 0 1
67756: PPUSH
67757: LD_VAR 0 4
67761: PPUSH
67762: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67766: LD_VAR 0 1
67770: PPUSH
67771: LD_VAR 0 2
67775: PPUSH
67776: LD_VAR 0 3
67780: PPUSH
67781: LD_VAR 0 5
67785: PPUSH
67786: CALL_OW 48
// end ;
67790: LD_VAR 0 6
67794: RET
// export function ToNaturalNumber ( number ) ; begin
67795: LD_INT 0
67797: PPUSH
// result := number div 1 ;
67798: LD_ADDR_VAR 0 2
67802: PUSH
67803: LD_VAR 0 1
67807: PUSH
67808: LD_INT 1
67810: DIV
67811: ST_TO_ADDR
// if number < 0 then
67812: LD_VAR 0 1
67816: PUSH
67817: LD_INT 0
67819: LESS
67820: IFFALSE 67830
// result := 0 ;
67822: LD_ADDR_VAR 0 2
67826: PUSH
67827: LD_INT 0
67829: ST_TO_ADDR
// end ;
67830: LD_VAR 0 2
67834: RET
// export function SortByClass ( units , class ) ; var un ; begin
67835: LD_INT 0
67837: PPUSH
67838: PPUSH
// if not units or not class then
67839: LD_VAR 0 1
67843: NOT
67844: PUSH
67845: LD_VAR 0 2
67849: NOT
67850: OR
67851: IFFALSE 67855
// exit ;
67853: GO 67950
// result := [ ] ;
67855: LD_ADDR_VAR 0 3
67859: PUSH
67860: EMPTY
67861: ST_TO_ADDR
// for un in units do
67862: LD_ADDR_VAR 0 4
67866: PUSH
67867: LD_VAR 0 1
67871: PUSH
67872: FOR_IN
67873: IFFALSE 67948
// if GetClass ( un ) = class then
67875: LD_VAR 0 4
67879: PPUSH
67880: CALL_OW 257
67884: PUSH
67885: LD_VAR 0 2
67889: EQUAL
67890: IFFALSE 67917
// result := Insert ( result , 1 , un ) else
67892: LD_ADDR_VAR 0 3
67896: PUSH
67897: LD_VAR 0 3
67901: PPUSH
67902: LD_INT 1
67904: PPUSH
67905: LD_VAR 0 4
67909: PPUSH
67910: CALL_OW 2
67914: ST_TO_ADDR
67915: GO 67946
// result := Replace ( result , result + 1 , un ) ;
67917: LD_ADDR_VAR 0 3
67921: PUSH
67922: LD_VAR 0 3
67926: PPUSH
67927: LD_VAR 0 3
67931: PUSH
67932: LD_INT 1
67934: PLUS
67935: PPUSH
67936: LD_VAR 0 4
67940: PPUSH
67941: CALL_OW 1
67945: ST_TO_ADDR
67946: GO 67872
67948: POP
67949: POP
// end ;
67950: LD_VAR 0 3
67954: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67955: LD_INT 0
67957: PPUSH
67958: PPUSH
67959: PPUSH
67960: PPUSH
67961: PPUSH
67962: PPUSH
67963: PPUSH
// result := [ ] ;
67964: LD_ADDR_VAR 0 4
67968: PUSH
67969: EMPTY
67970: ST_TO_ADDR
// if x - r < 0 then
67971: LD_VAR 0 1
67975: PUSH
67976: LD_VAR 0 3
67980: MINUS
67981: PUSH
67982: LD_INT 0
67984: LESS
67985: IFFALSE 67997
// min_x := 0 else
67987: LD_ADDR_VAR 0 8
67991: PUSH
67992: LD_INT 0
67994: ST_TO_ADDR
67995: GO 68013
// min_x := x - r ;
67997: LD_ADDR_VAR 0 8
68001: PUSH
68002: LD_VAR 0 1
68006: PUSH
68007: LD_VAR 0 3
68011: MINUS
68012: ST_TO_ADDR
// if y - r < 0 then
68013: LD_VAR 0 2
68017: PUSH
68018: LD_VAR 0 3
68022: MINUS
68023: PUSH
68024: LD_INT 0
68026: LESS
68027: IFFALSE 68039
// min_y := 0 else
68029: LD_ADDR_VAR 0 7
68033: PUSH
68034: LD_INT 0
68036: ST_TO_ADDR
68037: GO 68055
// min_y := y - r ;
68039: LD_ADDR_VAR 0 7
68043: PUSH
68044: LD_VAR 0 2
68048: PUSH
68049: LD_VAR 0 3
68053: MINUS
68054: ST_TO_ADDR
// max_x := x + r ;
68055: LD_ADDR_VAR 0 9
68059: PUSH
68060: LD_VAR 0 1
68064: PUSH
68065: LD_VAR 0 3
68069: PLUS
68070: ST_TO_ADDR
// max_y := y + r ;
68071: LD_ADDR_VAR 0 10
68075: PUSH
68076: LD_VAR 0 2
68080: PUSH
68081: LD_VAR 0 3
68085: PLUS
68086: ST_TO_ADDR
// for _x = min_x to max_x do
68087: LD_ADDR_VAR 0 5
68091: PUSH
68092: DOUBLE
68093: LD_VAR 0 8
68097: DEC
68098: ST_TO_ADDR
68099: LD_VAR 0 9
68103: PUSH
68104: FOR_TO
68105: IFFALSE 68206
// for _y = min_y to max_y do
68107: LD_ADDR_VAR 0 6
68111: PUSH
68112: DOUBLE
68113: LD_VAR 0 7
68117: DEC
68118: ST_TO_ADDR
68119: LD_VAR 0 10
68123: PUSH
68124: FOR_TO
68125: IFFALSE 68202
// begin if not ValidHex ( _x , _y ) then
68127: LD_VAR 0 5
68131: PPUSH
68132: LD_VAR 0 6
68136: PPUSH
68137: CALL_OW 488
68141: NOT
68142: IFFALSE 68146
// continue ;
68144: GO 68124
// if GetResourceTypeXY ( _x , _y ) then
68146: LD_VAR 0 5
68150: PPUSH
68151: LD_VAR 0 6
68155: PPUSH
68156: CALL_OW 283
68160: IFFALSE 68200
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68162: LD_ADDR_VAR 0 4
68166: PUSH
68167: LD_VAR 0 4
68171: PPUSH
68172: LD_VAR 0 4
68176: PUSH
68177: LD_INT 1
68179: PLUS
68180: PPUSH
68181: LD_VAR 0 5
68185: PUSH
68186: LD_VAR 0 6
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PPUSH
68195: CALL_OW 1
68199: ST_TO_ADDR
// end ;
68200: GO 68124
68202: POP
68203: POP
68204: GO 68104
68206: POP
68207: POP
// end ;
68208: LD_VAR 0 4
68212: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68213: LD_INT 0
68215: PPUSH
68216: PPUSH
68217: PPUSH
68218: PPUSH
68219: PPUSH
68220: PPUSH
68221: PPUSH
68222: PPUSH
// if not units then
68223: LD_VAR 0 1
68227: NOT
68228: IFFALSE 68232
// exit ;
68230: GO 68657
// result := UnitFilter ( units , [ f_ok ] ) ;
68232: LD_ADDR_VAR 0 3
68236: PUSH
68237: LD_VAR 0 1
68241: PPUSH
68242: LD_INT 50
68244: PUSH
68245: EMPTY
68246: LIST
68247: PPUSH
68248: CALL_OW 72
68252: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68253: LD_ADDR_VAR 0 8
68257: PUSH
68258: LD_VAR 0 1
68262: PUSH
68263: LD_INT 1
68265: ARRAY
68266: PPUSH
68267: CALL_OW 255
68271: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
68272: LD_ADDR_VAR 0 10
68276: PUSH
68277: LD_INT 29
68279: PUSH
68280: LD_EXP 116
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: ST_TO_ADDR
// if not result then
68289: LD_VAR 0 3
68293: NOT
68294: IFFALSE 68298
// exit ;
68296: GO 68657
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68298: LD_ADDR_VAR 0 5
68302: PUSH
68303: LD_INT 81
68305: PUSH
68306: LD_VAR 0 8
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PPUSH
68315: CALL_OW 69
68319: ST_TO_ADDR
// for i in result do
68320: LD_ADDR_VAR 0 4
68324: PUSH
68325: LD_VAR 0 3
68329: PUSH
68330: FOR_IN
68331: IFFALSE 68655
// begin tag := GetTag ( i ) + 1 ;
68333: LD_ADDR_VAR 0 9
68337: PUSH
68338: LD_VAR 0 4
68342: PPUSH
68343: CALL_OW 110
68347: PUSH
68348: LD_INT 1
68350: PLUS
68351: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68352: LD_ADDR_VAR 0 7
68356: PUSH
68357: LD_VAR 0 4
68361: PPUSH
68362: CALL_OW 250
68366: PPUSH
68367: LD_VAR 0 4
68371: PPUSH
68372: CALL_OW 251
68376: PPUSH
68377: LD_INT 6
68379: PPUSH
68380: CALL 67955 0 3
68384: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68385: LD_VAR 0 7
68389: PUSH
68390: LD_VAR 0 4
68394: PPUSH
68395: CALL_OW 264
68399: PUSH
68400: LD_VAR 0 10
68404: IN
68405: NOT
68406: AND
68407: IFFALSE 68446
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68409: LD_VAR 0 4
68413: PPUSH
68414: LD_VAR 0 7
68418: PUSH
68419: LD_INT 1
68421: ARRAY
68422: PUSH
68423: LD_INT 1
68425: ARRAY
68426: PPUSH
68427: LD_VAR 0 7
68431: PUSH
68432: LD_INT 1
68434: ARRAY
68435: PUSH
68436: LD_INT 2
68438: ARRAY
68439: PPUSH
68440: CALL_OW 116
68444: GO 68653
// if path > tag then
68446: LD_VAR 0 2
68450: PUSH
68451: LD_VAR 0 9
68455: GREATER
68456: IFFALSE 68623
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
68458: LD_ADDR_VAR 0 6
68462: PUSH
68463: LD_VAR 0 5
68467: PPUSH
68468: LD_INT 91
68470: PUSH
68471: LD_VAR 0 4
68475: PUSH
68476: LD_INT 12
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: LIST
68483: PPUSH
68484: CALL_OW 72
68488: ST_TO_ADDR
// if nearEnemy then
68489: LD_VAR 0 6
68493: IFFALSE 68521
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68495: LD_VAR 0 4
68499: PPUSH
68500: LD_VAR 0 6
68504: PPUSH
68505: LD_VAR 0 4
68509: PPUSH
68510: CALL_OW 74
68514: PPUSH
68515: CALL_OW 115
68519: GO 68621
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68521: LD_VAR 0 4
68525: PPUSH
68526: LD_VAR 0 2
68530: PUSH
68531: LD_VAR 0 9
68535: ARRAY
68536: PUSH
68537: LD_INT 1
68539: ARRAY
68540: PPUSH
68541: LD_VAR 0 2
68545: PUSH
68546: LD_VAR 0 9
68550: ARRAY
68551: PUSH
68552: LD_INT 2
68554: ARRAY
68555: PPUSH
68556: CALL_OW 297
68560: PUSH
68561: LD_INT 6
68563: GREATER
68564: IFFALSE 68607
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68566: LD_VAR 0 4
68570: PPUSH
68571: LD_VAR 0 2
68575: PUSH
68576: LD_VAR 0 9
68580: ARRAY
68581: PUSH
68582: LD_INT 1
68584: ARRAY
68585: PPUSH
68586: LD_VAR 0 2
68590: PUSH
68591: LD_VAR 0 9
68595: ARRAY
68596: PUSH
68597: LD_INT 2
68599: ARRAY
68600: PPUSH
68601: CALL_OW 114
68605: GO 68621
// SetTag ( i , tag ) ;
68607: LD_VAR 0 4
68611: PPUSH
68612: LD_VAR 0 9
68616: PPUSH
68617: CALL_OW 109
// end else
68621: GO 68653
// if enemy then
68623: LD_VAR 0 5
68627: IFFALSE 68653
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68629: LD_VAR 0 4
68633: PPUSH
68634: LD_VAR 0 5
68638: PPUSH
68639: LD_VAR 0 4
68643: PPUSH
68644: CALL_OW 74
68648: PPUSH
68649: CALL_OW 115
// end ;
68653: GO 68330
68655: POP
68656: POP
// end ;
68657: LD_VAR 0 3
68661: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68662: LD_INT 0
68664: PPUSH
68665: PPUSH
68666: PPUSH
// if not unit or IsInUnit ( unit ) then
68667: LD_VAR 0 1
68671: NOT
68672: PUSH
68673: LD_VAR 0 1
68677: PPUSH
68678: CALL_OW 310
68682: OR
68683: IFFALSE 68687
// exit ;
68685: GO 68778
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68687: LD_ADDR_VAR 0 4
68691: PUSH
68692: LD_VAR 0 1
68696: PPUSH
68697: CALL_OW 250
68701: PPUSH
68702: LD_VAR 0 2
68706: PPUSH
68707: LD_INT 1
68709: PPUSH
68710: CALL_OW 272
68714: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68715: LD_ADDR_VAR 0 5
68719: PUSH
68720: LD_VAR 0 1
68724: PPUSH
68725: CALL_OW 251
68729: PPUSH
68730: LD_VAR 0 2
68734: PPUSH
68735: LD_INT 1
68737: PPUSH
68738: CALL_OW 273
68742: ST_TO_ADDR
// if ValidHex ( x , y ) then
68743: LD_VAR 0 4
68747: PPUSH
68748: LD_VAR 0 5
68752: PPUSH
68753: CALL_OW 488
68757: IFFALSE 68778
// ComTurnXY ( unit , x , y ) ;
68759: LD_VAR 0 1
68763: PPUSH
68764: LD_VAR 0 4
68768: PPUSH
68769: LD_VAR 0 5
68773: PPUSH
68774: CALL_OW 118
// end ;
68778: LD_VAR 0 3
68782: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68783: LD_INT 0
68785: PPUSH
68786: PPUSH
// result := false ;
68787: LD_ADDR_VAR 0 3
68791: PUSH
68792: LD_INT 0
68794: ST_TO_ADDR
// if not units then
68795: LD_VAR 0 2
68799: NOT
68800: IFFALSE 68804
// exit ;
68802: GO 68849
// for i in units do
68804: LD_ADDR_VAR 0 4
68808: PUSH
68809: LD_VAR 0 2
68813: PUSH
68814: FOR_IN
68815: IFFALSE 68847
// if See ( side , i ) then
68817: LD_VAR 0 1
68821: PPUSH
68822: LD_VAR 0 4
68826: PPUSH
68827: CALL_OW 292
68831: IFFALSE 68845
// begin result := true ;
68833: LD_ADDR_VAR 0 3
68837: PUSH
68838: LD_INT 1
68840: ST_TO_ADDR
// exit ;
68841: POP
68842: POP
68843: GO 68849
// end ;
68845: GO 68814
68847: POP
68848: POP
// end ;
68849: LD_VAR 0 3
68853: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68854: LD_INT 0
68856: PPUSH
68857: PPUSH
68858: PPUSH
68859: PPUSH
// if not unit or not points then
68860: LD_VAR 0 1
68864: NOT
68865: PUSH
68866: LD_VAR 0 2
68870: NOT
68871: OR
68872: IFFALSE 68876
// exit ;
68874: GO 68966
// dist := 99999 ;
68876: LD_ADDR_VAR 0 5
68880: PUSH
68881: LD_INT 99999
68883: ST_TO_ADDR
// for i in points do
68884: LD_ADDR_VAR 0 4
68888: PUSH
68889: LD_VAR 0 2
68893: PUSH
68894: FOR_IN
68895: IFFALSE 68964
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68897: LD_ADDR_VAR 0 6
68901: PUSH
68902: LD_VAR 0 1
68906: PPUSH
68907: LD_VAR 0 4
68911: PUSH
68912: LD_INT 1
68914: ARRAY
68915: PPUSH
68916: LD_VAR 0 4
68920: PUSH
68921: LD_INT 2
68923: ARRAY
68924: PPUSH
68925: CALL_OW 297
68929: ST_TO_ADDR
// if tmpDist < dist then
68930: LD_VAR 0 6
68934: PUSH
68935: LD_VAR 0 5
68939: LESS
68940: IFFALSE 68962
// begin result := i ;
68942: LD_ADDR_VAR 0 3
68946: PUSH
68947: LD_VAR 0 4
68951: ST_TO_ADDR
// dist := tmpDist ;
68952: LD_ADDR_VAR 0 5
68956: PUSH
68957: LD_VAR 0 6
68961: ST_TO_ADDR
// end ; end ;
68962: GO 68894
68964: POP
68965: POP
// end ; end_of_file
68966: LD_VAR 0 3
68970: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
68971: LD_INT 0
68973: PPUSH
// ar_miner := 81 ;
68974: LD_ADDR_EXP 119
68978: PUSH
68979: LD_INT 81
68981: ST_TO_ADDR
// ar_crane := 88 ;
68982: LD_ADDR_EXP 118
68986: PUSH
68987: LD_INT 88
68989: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
68990: LD_ADDR_EXP 113
68994: PUSH
68995: LD_INT 89
68997: ST_TO_ADDR
// us_hack := 99 ;
68998: LD_ADDR_EXP 114
69002: PUSH
69003: LD_INT 99
69005: ST_TO_ADDR
// us_artillery := 97 ;
69006: LD_ADDR_EXP 115
69010: PUSH
69011: LD_INT 97
69013: ST_TO_ADDR
// ar_bio_bomb := 91 ;
69014: LD_ADDR_EXP 116
69018: PUSH
69019: LD_INT 91
69021: ST_TO_ADDR
// ar_mortar := 92 ;
69022: LD_ADDR_EXP 117
69026: PUSH
69027: LD_INT 92
69029: ST_TO_ADDR
// ru_radar := 98 ;
69030: LD_ADDR_EXP 112
69034: PUSH
69035: LD_INT 98
69037: ST_TO_ADDR
// tech_Artillery := 80 ;
69038: LD_ADDR_EXP 120
69042: PUSH
69043: LD_INT 80
69045: ST_TO_ADDR
// tech_RadMat := 81 ;
69046: LD_ADDR_EXP 121
69050: PUSH
69051: LD_INT 81
69053: ST_TO_ADDR
// tech_BasicTools := 82 ;
69054: LD_ADDR_EXP 122
69058: PUSH
69059: LD_INT 82
69061: ST_TO_ADDR
// tech_Cargo := 83 ;
69062: LD_ADDR_EXP 123
69066: PUSH
69067: LD_INT 83
69069: ST_TO_ADDR
// tech_Track := 84 ;
69070: LD_ADDR_EXP 124
69074: PUSH
69075: LD_INT 84
69077: ST_TO_ADDR
// tech_Crane := 85 ;
69078: LD_ADDR_EXP 125
69082: PUSH
69083: LD_INT 85
69085: ST_TO_ADDR
// tech_Bulldozer := 86 ;
69086: LD_ADDR_EXP 126
69090: PUSH
69091: LD_INT 86
69093: ST_TO_ADDR
// tech_Hovercraft := 87 ;
69094: LD_ADDR_EXP 127
69098: PUSH
69099: LD_INT 87
69101: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
69102: LD_ADDR_EXP 128
69106: PUSH
69107: LD_INT 88
69109: ST_TO_ADDR
// class_mastodont := 31 ;
69110: LD_ADDR_EXP 129
69114: PUSH
69115: LD_INT 31
69117: ST_TO_ADDR
// class_horse := 21 ;
69118: LD_ADDR_EXP 130
69122: PUSH
69123: LD_INT 21
69125: ST_TO_ADDR
// end ;
69126: LD_VAR 0 1
69130: RET
// every 1 do
69131: GO 69133
69133: DISABLE
// InitGlobalVariables ; end_of_file
69134: CALL 68971 0 0
69138: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69139: LD_VAR 0 1
69143: PPUSH
69144: LD_VAR 0 2
69148: PPUSH
69149: LD_VAR 0 3
69153: PPUSH
69154: LD_VAR 0 4
69158: PPUSH
69159: LD_VAR 0 5
69163: PPUSH
69164: LD_VAR 0 6
69168: PPUSH
69169: CALL 9790 0 6
// end ;
69173: PPOPN 6
69175: END
