// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 1990 0 0
// PrepareArabian ;
  23: CALL 1230 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5582 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: PUSH
 664: LD_OWVAR 67
 668: ARRAY
 669: PPUSH
 670: CALL 504 0 2
// for i := 1 to 2 do
 674: LD_ADDR_VAR 0 3
 678: PUSH
 679: DOUBLE
 680: LD_INT 1
 682: DEC
 683: ST_TO_ADDR
 684: LD_INT 2
 686: PUSH
 687: FOR_TO
 688: IFFALSE 725
// begin hc_class := 21 ;
 690: LD_ADDR_OWVAR 28
 694: PUSH
 695: LD_INT 21
 697: ST_TO_ADDR
// hc_gallery :=  ;
 698: LD_ADDR_OWVAR 33
 702: PUSH
 703: LD_STRING 
 705: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 706: CALL_OW 44
 710: PPUSH
 711: LD_VAR 0 1
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end ;
 723: GO 687
 725: POP
 726: POP
// for i := 1 to 2 do
 727: LD_ADDR_VAR 0 3
 731: PUSH
 732: DOUBLE
 733: LD_INT 1
 735: DEC
 736: ST_TO_ADDR
 737: LD_INT 2
 739: PUSH
 740: FOR_TO
 741: IFFALSE 778
// begin hc_class := 18 ;
 743: LD_ADDR_OWVAR 28
 747: PUSH
 748: LD_INT 18
 750: ST_TO_ADDR
// hc_gallery :=  ;
 751: LD_ADDR_OWVAR 33
 755: PUSH
 756: LD_STRING 
 758: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 759: CALL_OW 44
 763: PPUSH
 764: LD_VAR 0 1
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 49
// end ;
 776: GO 740
 778: POP
 779: POP
// for i := 1 to 2 do
 780: LD_ADDR_VAR 0 3
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 2
 792: PUSH
 793: FOR_TO
 794: IFFALSE 831
// begin hc_class := 13 ;
 796: LD_ADDR_OWVAR 28
 800: PUSH
 801: LD_INT 13
 803: ST_TO_ADDR
// hc_gallery :=  ;
 804: LD_ADDR_OWVAR 33
 808: PUSH
 809: LD_STRING 
 811: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 812: CALL_OW 44
 816: PPUSH
 817: LD_VAR 0 1
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// end ;
 829: GO 793
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 2
 837: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
// if not observer or not unit then
 843: LD_VAR 0 1
 847: NOT
 848: PUSH
 849: LD_VAR 0 2
 853: NOT
 854: OR
 855: IFFALSE 859
// exit ;
 857: GO 907
// if not See ( GetSide ( observer ) , unit ) then
 859: LD_VAR 0 1
 863: PPUSH
 864: CALL_OW 255
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: CALL_OW 292
 878: NOT
 879: IFFALSE 883
// exit ;
 881: GO 907
// result := GetDistUnits ( observer , unit ) < 12 ;
 883: LD_ADDR_VAR 0 3
 887: PUSH
 888: LD_VAR 0 1
 892: PPUSH
 893: LD_VAR 0 2
 897: PPUSH
 898: CALL_OW 296
 902: PUSH
 903: LD_INT 12
 905: LESS
 906: ST_TO_ADDR
// end ;
 907: LD_VAR 0 3
 911: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 912: LD_INT 0
 914: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 1
 922: ARRAY
 923: PPUSH
 924: LD_VAR 0 2
 928: PUSH
 929: LD_INT 2
 931: ARRAY
 932: PPUSH
 933: CALL_OW 488
 937: PUSH
 938: LD_VAR 0 2
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: LD_VAR 0 2
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: PPUSH
 956: CALL_OW 428
 960: PUSH
 961: LD_INT 0
 963: EQUAL
 964: AND
 965: IFFALSE 999
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 967: LD_VAR 0 1
 971: PPUSH
 972: LD_VAR 0 2
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: ARRAY
 989: PPUSH
 990: LD_VAR 0 3
 994: PPUSH
 995: CALL_OW 48
// end ;
 999: LD_VAR 0 4
1003: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1004: LD_INT 0
1006: PPUSH
1007: PPUSH
1008: PPUSH
1009: PPUSH
1010: PPUSH
// if not unit then
1011: LD_VAR 0 1
1015: NOT
1016: IFFALSE 1020
// exit ;
1018: GO 1225
// side := GetSide ( unit ) ;
1020: LD_ADDR_VAR 0 4
1024: PUSH
1025: LD_VAR 0 1
1029: PPUSH
1030: CALL_OW 255
1034: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1035: LD_ADDR_VAR 0 5
1039: PUSH
1040: LD_INT 22
1042: PUSH
1043: LD_VAR 0 4
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PUSH
1052: LD_INT 30
1054: PUSH
1055: LD_VAR 0 2
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PPUSH
1068: CALL_OW 69
1072: ST_TO_ADDR
// if not tmp then
1073: LD_VAR 0 5
1077: NOT
1078: IFFALSE 1082
// exit ;
1080: GO 1225
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1082: LD_ADDR_VAR 0 5
1086: PUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: LD_VAR 0 5
1096: PPUSH
1097: LD_INT 1
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 32491 0 4
1107: ST_TO_ADDR
// places := 1 ;
1108: LD_ADDR_VAR 0 7
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1116: LD_VAR 0 2
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 4
1129: PUSH
1130: LD_INT 5
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: LD_INT 3
1138: PUSH
1139: LD_INT 6
1141: PUSH
1142: LD_INT 7
1144: PUSH
1145: LD_INT 8
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: IN
1159: IFFALSE 1169
// places := 6 ;
1161: LD_ADDR_VAR 0 7
1165: PUSH
1166: LD_INT 6
1168: ST_TO_ADDR
// for i in tmp do
1169: LD_ADDR_VAR 0 6
1173: PUSH
1174: LD_VAR 0 5
1178: PUSH
1179: FOR_IN
1180: IFFALSE 1223
// begin if UnitsInside ( i ) - places <= 0 then
1182: LD_VAR 0 6
1186: PPUSH
1187: CALL_OW 313
1191: PUSH
1192: LD_VAR 0 7
1196: MINUS
1197: PUSH
1198: LD_INT 0
1200: LESSEQUAL
1201: IFFALSE 1207
// continue else
1203: GO 1179
1205: GO 1221
// begin result := i ;
1207: LD_ADDR_VAR 0 3
1211: PUSH
1212: LD_VAR 0 6
1216: ST_TO_ADDR
// exit ;
1217: POP
1218: POP
1219: GO 1225
// end ; end ;
1221: GO 1179
1223: POP
1224: POP
// end ; end_of_file
1225: LD_VAR 0 3
1229: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1230: LD_INT 0
1232: PPUSH
1233: PPUSH
// uc_side := 2 ;
1234: LD_ADDR_OWVAR 20
1238: PUSH
1239: LD_INT 2
1241: ST_TO_ADDR
// uc_nation := 2 ;
1242: LD_ADDR_OWVAR 21
1246: PUSH
1247: LD_INT 2
1249: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1250: LD_ADDR_EXP 18
1254: PUSH
1255: LD_STRING Heike
1257: PPUSH
1258: LD_EXP 1
1262: NOT
1263: PPUSH
1264: LD_EXP 2
1268: PPUSH
1269: CALL 27070 0 3
1273: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1274: LD_ADDR_EXP 21
1278: PUSH
1279: LD_STRING Ibrahim
1281: PPUSH
1282: LD_EXP 1
1286: NOT
1287: PPUSH
1288: LD_EXP 2
1292: PPUSH
1293: CALL 27070 0 3
1297: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1298: LD_ADDR_EXP 19
1302: PUSH
1303: LD_STRING Givi
1305: PPUSH
1306: LD_EXP 1
1310: NOT
1311: PPUSH
1312: LD_EXP 2
1316: PPUSH
1317: CALL 27070 0 3
1321: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1322: LD_ADDR_EXP 22
1326: PUSH
1327: LD_STRING Kamil
1329: PPUSH
1330: LD_EXP 1
1334: NOT
1335: PPUSH
1336: LD_EXP 2
1340: PPUSH
1341: CALL 27070 0 3
1345: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1346: LD_ADDR_EXP 23
1350: PUSH
1351: LD_STRING Kaia
1353: PPUSH
1354: LD_EXP 1
1358: NOT
1359: PPUSH
1360: LD_EXP 2
1364: PPUSH
1365: CALL 27070 0 3
1369: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1370: LD_ADDR_EXP 24
1374: PUSH
1375: LD_STRING Sophia
1377: PPUSH
1378: LD_EXP 1
1382: NOT
1383: PPUSH
1384: LD_EXP 2
1388: PPUSH
1389: CALL 27070 0 3
1393: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1394: LD_ADDR_EXP 25
1398: PUSH
1399: LD_STRING Markov
1401: PPUSH
1402: LD_EXP 1
1406: NOT
1407: PPUSH
1408: LD_EXP 2
1412: PPUSH
1413: CALL 27070 0 3
1417: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1418: LD_ADDR_EXP 28
1422: PUSH
1423: LD_STRING Aviradze
1425: PPUSH
1426: LD_EXP 1
1430: NOT
1431: PPUSH
1432: LD_EXP 2
1436: PPUSH
1437: CALL 27070 0 3
1441: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1442: LD_ADDR_EXP 27
1446: PUSH
1447: LD_STRING Kurt
1449: PPUSH
1450: LD_EXP 1
1454: NOT
1455: PPUSH
1456: LD_EXP 2
1460: PPUSH
1461: CALL 27070 0 3
1465: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1466: LD_ADDR_EXP 20
1470: PUSH
1471: LD_STRING Mike
1473: PPUSH
1474: LD_EXP 1
1478: NOT
1479: PPUSH
1480: LD_EXP 2
1484: PPUSH
1485: CALL 27070 0 3
1489: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1490: LD_ADDR_EXP 29
1494: PUSH
1495: LD_STRING 04_1_others
1497: PPUSH
1498: CALL_OW 31
1502: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1503: LD_ADDR_EXP 31
1507: PUSH
1508: LD_STRING 04_1_apes
1510: PPUSH
1511: CALL_OW 31
1515: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1516: LD_ADDR_EXP 30
1520: PUSH
1521: LD_STRING 04_1_Vehicles
1523: PPUSH
1524: EMPTY
1525: PPUSH
1526: CALL_OW 30
1530: ST_TO_ADDR
// uc_side := 5 ;
1531: LD_ADDR_OWVAR 20
1535: PUSH
1536: LD_INT 5
1538: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1539: LD_ADDR_EXP 26
1543: PUSH
1544: LD_STRING Abdul
1546: PPUSH
1547: LD_INT 0
1549: PPUSH
1550: LD_STRING 
1552: PPUSH
1553: CALL 27070 0 3
1557: ST_TO_ADDR
// end ;
1558: LD_VAR 0 1
1562: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1563: LD_STRING 04_1_KaganCaptured
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 30
1573: PUSH
1574: LD_INT 22
1576: PUSH
1577: LD_INT 5
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PPUSH
1584: CALL_OW 69
1588: NOT
1589: AND
1590: PUSH
1591: LD_INT 124
1593: PPUSH
1594: LD_INT 26
1596: PPUSH
1597: CALL_OW 428
1601: PUSH
1602: LD_INT 0
1604: EQUAL
1605: PUSH
1606: LD_INT 124
1608: PPUSH
1609: LD_INT 26
1611: PPUSH
1612: CALL_OW 428
1616: PPUSH
1617: CALL_OW 255
1621: PUSH
1622: LD_INT 2
1624: EQUAL
1625: XOR
1626: AND
1627: IFFALSE 1987
1629: GO 1631
1631: DISABLE
1632: LD_INT 0
1634: PPUSH
1635: PPUSH
// begin enable ;
1636: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1637: LD_EXP 33
1641: NOT
1642: PUSH
1643: LD_EXP 33
1647: PUSH
1648: LD_INT 4
1650: GREATER
1651: OR
1652: IFFALSE 1662
// cargoCounter := 1 ;
1654: LD_ADDR_EXP 33
1658: PUSH
1659: LD_INT 1
1661: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1662: LD_ADDR_VAR 0 2
1666: PUSH
1667: LD_INT 142
1669: PUSH
1670: LD_INT 15
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 129
1679: PUSH
1680: LD_INT 11
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 138
1689: PUSH
1690: LD_INT 9
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 133
1699: PUSH
1700: LD_INT 10
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: ST_TO_ADDR
// uc_side := 5 ;
1713: LD_ADDR_OWVAR 20
1717: PUSH
1718: LD_INT 5
1720: ST_TO_ADDR
// uc_nation := 2 ;
1721: LD_ADDR_OWVAR 21
1725: PUSH
1726: LD_INT 2
1728: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1729: LD_INT 5
1731: PPUSH
1732: LD_INT 2
1734: PPUSH
1735: LD_INT 13
1737: PPUSH
1738: LD_INT 2
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 32
1746: PPUSH
1747: LD_INT 70
1749: PPUSH
1750: CALL 336 0 7
// veh := CreateVehicle ;
1754: LD_ADDR_VAR 0 1
1758: PUSH
1759: CALL_OW 45
1763: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1764: LD_VAR 0 1
1768: PPUSH
1769: LD_INT 3
1771: PPUSH
1772: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
1776: LD_VAR 0 1
1780: PPUSH
1781: LD_INT 8
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL_OW 49
// if not cargoDriver then
1791: LD_EXP 32
1795: NOT
1796: IFFALSE 1821
// begin PrepareHuman ( false , 1 , 3 ) ;
1798: LD_INT 0
1800: PPUSH
1801: LD_INT 1
1803: PPUSH
1804: LD_INT 3
1806: PPUSH
1807: CALL_OW 380
// cargoDriver := CreateHuman ;
1811: LD_ADDR_EXP 32
1815: PUSH
1816: CALL_OW 44
1820: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
1821: LD_EXP 32
1825: PPUSH
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
1835: LD_VAR 0 1
1839: PPUSH
1840: LD_INT 2
1842: PPUSH
1843: LD_INT 100
1845: PPUSH
1846: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
1850: LD_VAR 0 1
1854: PPUSH
1855: LD_VAR 0 2
1859: PUSH
1860: LD_EXP 33
1864: ARRAY
1865: PUSH
1866: LD_INT 1
1868: ARRAY
1869: PPUSH
1870: LD_VAR 0 2
1874: PUSH
1875: LD_EXP 33
1879: ARRAY
1880: PUSH
1881: LD_INT 2
1883: ARRAY
1884: PPUSH
1885: CALL_OW 111
// AddComUnload ( veh ) ;
1889: LD_VAR 0 1
1893: PPUSH
1894: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
1898: LD_VAR 0 1
1902: PPUSH
1903: LD_INT 133
1905: PPUSH
1906: LD_INT 2
1908: PPUSH
1909: CALL_OW 171
// wait ( 0 0$5 ) ;
1913: LD_INT 175
1915: PPUSH
1916: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1920: LD_INT 35
1922: PPUSH
1923: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
1927: LD_VAR 0 1
1931: PPUSH
1932: LD_INT 133
1934: PPUSH
1935: LD_INT 2
1937: PPUSH
1938: CALL_OW 307
1942: PUSH
1943: LD_VAR 0 1
1947: PPUSH
1948: LD_INT 8
1950: PPUSH
1951: CALL_OW 308
1955: OR
1956: IFFALSE 1920
// RemoveUnit ( cargoDriver ) ;
1958: LD_EXP 32
1962: PPUSH
1963: CALL_OW 64
// RemoveUnit ( veh ) ;
1967: LD_VAR 0 1
1971: PPUSH
1972: CALL_OW 64
// if tick >= 20 20$00 then
1976: LD_OWVAR 1
1980: PUSH
1981: LD_INT 42000
1983: GREATEREQUAL
1984: IFFALSE 1987
// disable ;
1986: DISABLE
// end ; end_of_file
1987: PPOPN 2
1989: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
1990: LD_INT 0
1992: PPUSH
1993: PPUSH
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
// uc_side := 3 ;
2001: LD_ADDR_OWVAR 20
2005: PUSH
2006: LD_INT 3
2008: ST_TO_ADDR
// uc_nation := 3 ;
2009: LD_ADDR_OWVAR 21
2013: PUSH
2014: LD_INT 3
2016: ST_TO_ADDR
// ruForce := [ ] ;
2017: LD_ADDR_EXP 37
2021: PUSH
2022: EMPTY
2023: ST_TO_ADDR
// ruMech := [ ] ;
2024: LD_ADDR_EXP 39
2028: PUSH
2029: EMPTY
2030: ST_TO_ADDR
// ruEng := [ ] ;
2031: LD_ADDR_EXP 38
2035: PUSH
2036: EMPTY
2037: ST_TO_ADDR
// ruSci := [ ] ;
2038: LD_ADDR_EXP 40
2042: PUSH
2043: EMPTY
2044: ST_TO_ADDR
// ruMobile := [ ] ;
2045: LD_ADDR_EXP 41
2049: PUSH
2050: EMPTY
2051: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2052: LD_ADDR_EXP 34
2056: PUSH
2057: LD_STRING Burlak
2059: PPUSH
2060: LD_INT 0
2062: PPUSH
2063: LD_STRING 
2065: PPUSH
2066: CALL 27070 0 3
2070: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2071: LD_ADDR_EXP 35
2075: PUSH
2076: LD_STRING Gaydar
2078: PPUSH
2079: LD_INT 0
2081: PPUSH
2082: LD_STRING 
2084: PPUSH
2085: CALL 27070 0 3
2089: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2090: LD_ADDR_EXP 36
2094: PUSH
2095: LD_STRING Kuzmov
2097: PPUSH
2098: LD_INT 0
2100: PPUSH
2101: LD_STRING 
2103: PPUSH
2104: CALL 27070 0 3
2108: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2109: LD_EXP 36
2113: PPUSH
2114: LD_INT 200
2116: PPUSH
2117: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2121: LD_INT 200
2123: PPUSH
2124: LD_STRING chuikov
2126: PPUSH
2127: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 ] [ Difficulty ] ) ;
2131: LD_INT 200
2133: PPUSH
2134: CALL_OW 274
2138: PPUSH
2139: LD_INT 1
2141: PPUSH
2142: LD_INT 800
2144: PUSH
2145: LD_INT 1000
2147: PUSH
2148: LD_INT 1250
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: PUSH
2156: LD_OWVAR 67
2160: ARRAY
2161: PPUSH
2162: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2166: LD_INT 200
2168: PPUSH
2169: CALL_OW 274
2173: PPUSH
2174: LD_INT 2
2176: PPUSH
2177: LD_INT 160
2179: PPUSH
2180: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2184: LD_INT 225
2186: PPUSH
2187: CALL_OW 274
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_INT 200
2197: PPUSH
2198: CALL_OW 277
// oil := 150 ;
2202: LD_ADDR_VAR 0 9
2206: PUSH
2207: LD_INT 150
2209: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 ] [ Difficulty ] then
2210: LD_EXP 5
2214: PUSH
2215: LD_INT 94500
2217: PUSH
2218: LD_INT 84000
2220: PUSH
2221: LD_INT 73500
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: LIST
2228: PUSH
2229: LD_OWVAR 67
2233: ARRAY
2234: GREATEREQUAL
2235: IFFALSE 2390
// begin oil := 450 ;
2237: LD_ADDR_VAR 0 9
2241: PUSH
2242: LD_INT 450
2244: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2245: LD_ADDR_VAR 0 7
2249: PUSH
2250: LD_INT 123
2252: PUSH
2253: LD_INT 17
2255: PUSH
2256: LD_INT 3
2258: PUSH
2259: LD_INT 31
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: PUSH
2268: LD_INT 152
2270: PUSH
2271: LD_INT 38
2273: PUSH
2274: LD_INT 3
2276: PUSH
2277: LD_INT 31
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 81
2288: PUSH
2289: LD_INT 6
2291: PUSH
2292: LD_INT 4
2294: PUSH
2295: LD_INT 31
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 113
2306: PUSH
2307: LD_INT 67
2309: PUSH
2310: LD_INT 4
2312: PUSH
2313: LD_INT 32
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: ST_TO_ADDR
// for i in tmp do
2328: LD_ADDR_VAR 0 4
2332: PUSH
2333: LD_VAR 0 7
2337: PUSH
2338: FOR_IN
2339: IFFALSE 2388
// begin bc_type := i [ 4 ] ;
2341: LD_ADDR_OWVAR 42
2345: PUSH
2346: LD_VAR 0 4
2350: PUSH
2351: LD_INT 4
2353: ARRAY
2354: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2355: LD_VAR 0 4
2359: PUSH
2360: LD_INT 1
2362: ARRAY
2363: PPUSH
2364: LD_VAR 0 4
2368: PUSH
2369: LD_INT 2
2371: ARRAY
2372: PPUSH
2373: LD_VAR 0 4
2377: PUSH
2378: LD_INT 3
2380: ARRAY
2381: PPUSH
2382: CALL_OW 47
// end ;
2386: GO 2338
2388: POP
2389: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2390: LD_INT 225
2392: PPUSH
2393: CALL_OW 274
2397: PPUSH
2398: LD_INT 2
2400: PPUSH
2401: LD_VAR 0 9
2405: PPUSH
2406: CALL_OW 277
// if Difficulty > 1 then
2410: LD_OWVAR 67
2414: PUSH
2415: LD_INT 1
2417: GREATER
2418: IFFALSE 2513
// begin bc_type := b_bunker ;
2420: LD_ADDR_OWVAR 42
2424: PUSH
2425: LD_INT 32
2427: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2428: LD_ADDR_VAR 0 7
2432: PUSH
2433: LD_INT 121
2435: PUSH
2436: LD_INT 85
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: PUSH
2447: LD_INT 93
2449: PUSH
2450: LD_INT 72
2452: PUSH
2453: LD_INT 1
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: ST_TO_ADDR
// for i in tmp do
2465: LD_ADDR_VAR 0 4
2469: PUSH
2470: LD_VAR 0 7
2474: PUSH
2475: FOR_IN
2476: IFFALSE 2511
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2478: LD_VAR 0 4
2482: PUSH
2483: LD_INT 1
2485: ARRAY
2486: PPUSH
2487: LD_VAR 0 4
2491: PUSH
2492: LD_INT 2
2494: ARRAY
2495: PPUSH
2496: LD_VAR 0 4
2500: PUSH
2501: LD_INT 3
2503: ARRAY
2504: PPUSH
2505: CALL_OW 47
2509: GO 2475
2511: POP
2512: POP
// end ; base := GetBase ( ruMainBase ) ;
2513: LD_ADDR_VAR 0 2
2517: PUSH
2518: LD_INT 200
2520: PPUSH
2521: CALL_OW 274
2525: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2526: LD_ADDR_VAR 0 3
2530: PUSH
2531: LD_VAR 0 2
2535: PPUSH
2536: CALL_OW 417
2540: ST_TO_ADDR
// for b in blist do
2541: LD_ADDR_VAR 0 5
2545: PUSH
2546: LD_VAR 0 3
2550: PUSH
2551: FOR_IN
2552: IFFALSE 3003
// begin if b [ 1 ] = b_factory then
2554: LD_VAR 0 5
2558: PUSH
2559: LD_INT 1
2561: ARRAY
2562: PUSH
2563: LD_INT 3
2565: EQUAL
2566: IFFALSE 2717
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2568: LD_ADDR_VAR 0 8
2572: PUSH
2573: LD_VAR 0 5
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: LD_VAR 0 5
2586: PUSH
2587: LD_INT 3
2589: ARRAY
2590: PPUSH
2591: CALL_OW 428
2595: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2596: LD_ADDR_VAR 0 4
2600: PUSH
2601: DOUBLE
2602: LD_INT 1
2604: DEC
2605: ST_TO_ADDR
2606: LD_INT 2
2608: PUSH
2609: LD_INT 2
2611: PUSH
2612: LD_OWVAR 67
2616: PLUS
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: PUSH
2622: LD_EXP 10
2626: PUSH
2627: LD_INT 3
2629: GREATER
2630: PUSH
2631: LD_INT 1
2633: PLUS
2634: ARRAY
2635: PUSH
2636: FOR_TO
2637: IFFALSE 2713
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2639: LD_INT 0
2641: PPUSH
2642: LD_INT 3
2644: PPUSH
2645: LD_INT 1
2647: PUSH
2648: LD_OWVAR 67
2652: PLUS
2653: PPUSH
2654: CALL_OW 380
// un := CreateHuman ;
2658: LD_ADDR_VAR 0 6
2662: PUSH
2663: CALL_OW 44
2667: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2668: LD_ADDR_EXP 39
2672: PUSH
2673: LD_EXP 39
2677: PPUSH
2678: LD_EXP 39
2682: PUSH
2683: LD_INT 1
2685: PLUS
2686: PPUSH
2687: LD_VAR 0 6
2691: PPUSH
2692: CALL_OW 1
2696: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2697: LD_VAR 0 6
2701: PPUSH
2702: LD_VAR 0 8
2706: PPUSH
2707: CALL_OW 52
// end ;
2711: GO 2636
2713: POP
2714: POP
// end else
2715: GO 3001
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2717: LD_VAR 0 5
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: PUSH
2726: LD_INT 6
2728: PUSH
2729: LD_INT 7
2731: PUSH
2732: LD_INT 8
2734: PUSH
2735: LD_INT 10
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: IN
2744: IFFALSE 2854
// begin for i := 1 to 2 do
2746: LD_ADDR_VAR 0 4
2750: PUSH
2751: DOUBLE
2752: LD_INT 1
2754: DEC
2755: ST_TO_ADDR
2756: LD_INT 2
2758: PUSH
2759: FOR_TO
2760: IFFALSE 2850
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2762: LD_INT 0
2764: PPUSH
2765: LD_INT 4
2767: PPUSH
2768: LD_OWVAR 67
2772: PPUSH
2773: CALL_OW 380
// un := CreateHuman ;
2777: LD_ADDR_VAR 0 6
2781: PUSH
2782: CALL_OW 44
2786: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
2787: LD_ADDR_EXP 40
2791: PUSH
2792: LD_EXP 40
2796: PPUSH
2797: LD_EXP 40
2801: PUSH
2802: LD_INT 1
2804: PLUS
2805: PPUSH
2806: LD_VAR 0 6
2810: PPUSH
2811: CALL_OW 1
2815: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2816: LD_VAR 0 6
2820: PPUSH
2821: LD_VAR 0 5
2825: PUSH
2826: LD_INT 2
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 5
2834: PUSH
2835: LD_INT 3
2837: ARRAY
2838: PPUSH
2839: CALL_OW 428
2843: PPUSH
2844: CALL_OW 52
// end ;
2848: GO 2759
2850: POP
2851: POP
// end else
2852: GO 3001
// if b [ 1 ] = b_warehouse then
2854: LD_VAR 0 5
2858: PUSH
2859: LD_INT 1
2861: ARRAY
2862: PUSH
2863: LD_INT 1
2865: EQUAL
2866: IFFALSE 3001
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2868: LD_ADDR_VAR 0 4
2872: PUSH
2873: DOUBLE
2874: LD_INT 1
2876: DEC
2877: ST_TO_ADDR
2878: LD_INT 1
2880: PUSH
2881: LD_INT 1
2883: PUSH
2884: LD_OWVAR 67
2888: PLUS
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PUSH
2894: LD_EXP 10
2898: PUSH
2899: LD_INT 3
2901: GREATER
2902: PUSH
2903: LD_INT 1
2905: PLUS
2906: ARRAY
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2999
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 2
2916: PPUSH
2917: LD_OWVAR 67
2921: PPUSH
2922: CALL_OW 380
// un := CreateHuman ;
2926: LD_ADDR_VAR 0 6
2930: PUSH
2931: CALL_OW 44
2935: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
2936: LD_ADDR_EXP 38
2940: PUSH
2941: LD_EXP 38
2945: PPUSH
2946: LD_EXP 38
2950: PUSH
2951: LD_INT 1
2953: PLUS
2954: PPUSH
2955: LD_VAR 0 6
2959: PPUSH
2960: CALL_OW 1
2964: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2965: LD_VAR 0 6
2969: PPUSH
2970: LD_VAR 0 5
2974: PUSH
2975: LD_INT 2
2977: ARRAY
2978: PPUSH
2979: LD_VAR 0 5
2983: PUSH
2984: LD_INT 3
2986: ARRAY
2987: PPUSH
2988: CALL_OW 428
2992: PPUSH
2993: CALL_OW 52
// end ;
2997: GO 2908
2999: POP
3000: POP
// end ; end ;
3001: GO 2551
3003: POP
3004: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3005: LD_ADDR_VAR 0 3
3009: PUSH
3010: LD_INT 22
3012: PUSH
3013: LD_INT 3
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: LD_INT 21
3022: PUSH
3023: LD_INT 3
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PPUSH
3034: CALL_OW 69
3038: ST_TO_ADDR
// for b in blist do
3039: LD_ADDR_VAR 0 5
3043: PUSH
3044: LD_VAR 0 3
3048: PUSH
3049: FOR_IN
3050: IFFALSE 3072
// SetBLevel ( b , 3 + Difficulty ) ;
3052: LD_VAR 0 5
3056: PPUSH
3057: LD_INT 3
3059: PUSH
3060: LD_OWVAR 67
3064: PLUS
3065: PPUSH
3066: CALL_OW 241
3070: GO 3049
3072: POP
3073: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3074: LD_ADDR_VAR 0 3
3078: PUSH
3079: LD_INT 22
3081: PUSH
3082: LD_INT 3
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 30
3091: PUSH
3092: LD_INT 32
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PPUSH
3103: CALL_OW 69
3107: ST_TO_ADDR
// for b in blist do
3108: LD_ADDR_VAR 0 5
3112: PUSH
3113: LD_VAR 0 3
3117: PUSH
3118: FOR_IN
3119: IFFALSE 3228
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3121: LD_INT 0
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 1
3129: PUSH
3130: LD_OWVAR 67
3134: PLUS
3135: PPUSH
3136: CALL_OW 380
// un := CreateHuman ;
3140: LD_ADDR_VAR 0 6
3144: PUSH
3145: CALL_OW 44
3149: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3150: LD_ADDR_EXP 37
3154: PUSH
3155: LD_EXP 37
3159: PPUSH
3160: LD_EXP 37
3164: PUSH
3165: LD_INT 1
3167: PLUS
3168: PPUSH
3169: LD_VAR 0 6
3173: PPUSH
3174: CALL_OW 1
3178: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3179: LD_VAR 0 6
3183: PPUSH
3184: LD_VAR 0 5
3188: PPUSH
3189: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3193: LD_VAR 0 5
3197: PPUSH
3198: LD_INT 44
3200: PUSH
3201: LD_INT 43
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: PUSH
3208: LD_VAR 0 5
3212: PUSH
3213: LD_INT 2
3215: MOD
3216: PUSH
3217: LD_INT 1
3219: PLUS
3220: ARRAY
3221: PPUSH
3222: CALL_OW 431
// end ;
3226: GO 3118
3228: POP
3229: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3230: LD_ADDR_VAR 0 3
3234: PUSH
3235: LD_INT 22
3237: PUSH
3238: LD_INT 3
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: PUSH
3245: LD_INT 30
3247: PUSH
3248: LD_INT 31
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: ST_TO_ADDR
// for b in blist do
3264: LD_ADDR_VAR 0 5
3268: PUSH
3269: LD_VAR 0 3
3273: PUSH
3274: FOR_IN
3275: IFFALSE 3374
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3277: LD_INT 0
3279: PPUSH
3280: LD_INT 1
3282: PPUSH
3283: LD_INT 1
3285: PUSH
3286: LD_OWVAR 67
3290: PLUS
3291: PPUSH
3292: CALL_OW 380
// un := CreateHuman ;
3296: LD_ADDR_VAR 0 6
3300: PUSH
3301: CALL_OW 44
3305: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3306: LD_ADDR_EXP 37
3310: PUSH
3311: LD_EXP 37
3315: PPUSH
3316: LD_EXP 37
3320: PUSH
3321: LD_INT 1
3323: PLUS
3324: PPUSH
3325: LD_VAR 0 6
3329: PPUSH
3330: CALL_OW 1
3334: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3335: LD_VAR 0 6
3339: PPUSH
3340: LD_VAR 0 5
3344: PPUSH
3345: CALL_OW 254
3349: PUSH
3350: LD_INT 3
3352: PLUS
3353: PPUSH
3354: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3358: LD_VAR 0 6
3362: PPUSH
3363: LD_VAR 0 5
3367: PPUSH
3368: CALL_OW 52
// end ;
3372: GO 3274
3374: POP
3375: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3376: LD_ADDR_VAR 0 3
3380: PUSH
3381: LD_INT 22
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: LD_INT 2
3393: PUSH
3394: LD_INT 30
3396: PUSH
3397: LD_INT 4
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_INT 30
3406: PUSH
3407: LD_INT 5
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PPUSH
3423: CALL_OW 69
3427: ST_TO_ADDR
// for b in blist do
3428: LD_ADDR_VAR 0 5
3432: PUSH
3433: LD_VAR 0 3
3437: PUSH
3438: FOR_IN
3439: IFFALSE 3535
// begin for i := 1 to 2 do
3441: LD_ADDR_VAR 0 4
3445: PUSH
3446: DOUBLE
3447: LD_INT 1
3449: DEC
3450: ST_TO_ADDR
3451: LD_INT 2
3453: PUSH
3454: FOR_TO
3455: IFFALSE 3531
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3457: LD_INT 0
3459: PPUSH
3460: LD_INT 1
3462: PPUSH
3463: LD_INT 1
3465: PUSH
3466: LD_OWVAR 67
3470: PLUS
3471: PPUSH
3472: CALL_OW 380
// un := CreateHuman ;
3476: LD_ADDR_VAR 0 6
3480: PUSH
3481: CALL_OW 44
3485: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3486: LD_ADDR_EXP 37
3490: PUSH
3491: LD_EXP 37
3495: PPUSH
3496: LD_EXP 37
3500: PUSH
3501: LD_INT 1
3503: PLUS
3504: PPUSH
3505: LD_VAR 0 6
3509: PPUSH
3510: CALL_OW 1
3514: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3515: LD_VAR 0 6
3519: PPUSH
3520: LD_VAR 0 5
3524: PPUSH
3525: CALL_OW 52
// end ;
3529: GO 3454
3531: POP
3532: POP
// end ;
3533: GO 3438
3535: POP
3536: POP
// if ibrahimOnRuSide then
3537: LD_EXP 3
3541: IFFALSE 3639
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3543: LD_ADDR_EXP 21
3547: PUSH
3548: LD_STRING IbrahimRu
3550: PPUSH
3551: LD_INT 0
3553: PPUSH
3554: LD_STRING 
3556: PPUSH
3557: CALL 27070 0 3
3561: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3562: LD_EXP 21
3566: PPUSH
3567: LD_INT 121
3569: PPUSH
3570: LD_INT 78
3572: PPUSH
3573: LD_INT 0
3575: PPUSH
3576: CALL_OW 48
// ComHold ( Ibrahim ) ;
3580: LD_EXP 21
3584: PPUSH
3585: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3589: LD_INT 1
3591: PPUSH
3592: LD_INT 1
3594: PPUSH
3595: LD_INT 2
3597: PPUSH
3598: CALL_OW 380
// ruSol := CreateHuman ;
3602: LD_ADDR_EXP 42
3606: PUSH
3607: CALL_OW 44
3611: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3612: LD_EXP 42
3616: PPUSH
3617: LD_INT 121
3619: PPUSH
3620: LD_INT 75
3622: PPUSH
3623: LD_INT 0
3625: PPUSH
3626: CALL_OW 48
// ComHold ( ruSol ) ;
3630: LD_EXP 42
3634: PPUSH
3635: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3639: LD_ADDR_VAR 0 4
3643: PUSH
3644: DOUBLE
3645: LD_INT 1
3647: DEC
3648: ST_TO_ADDR
3649: LD_INT 2
3651: PUSH
3652: LD_INT 2
3654: PUSH
3655: LD_OWVAR 67
3659: PLUS
3660: PUSH
3661: EMPTY
3662: LIST
3663: LIST
3664: PUSH
3665: LD_EXP 10
3669: PUSH
3670: LD_INT 3
3672: GREATER
3673: PUSH
3674: LD_INT 1
3676: PLUS
3677: ARRAY
3678: PUSH
3679: FOR_TO
3680: IFFALSE 3749
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3682: LD_VAR 0 8
3686: PPUSH
3687: LD_INT 21
3689: PUSH
3690: LD_INT 23
3692: PUSH
3693: LD_INT 24
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: LIST
3700: PUSH
3701: LD_VAR 0 4
3705: PUSH
3706: LD_INT 3
3708: MOD
3709: PUSH
3710: LD_INT 1
3712: PLUS
3713: ARRAY
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 1
3720: PPUSH
3721: LD_INT 43
3723: PUSH
3724: LD_INT 44
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_INT 2
3736: PPUSH
3737: CALL_OW 12
3741: ARRAY
3742: PPUSH
3743: CALL_OW 185
3747: GO 3679
3749: POP
3750: POP
// end ;
3751: LD_VAR 0 1
3755: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3756: LD_EXP 41
3760: PUSH
3761: LD_EXP 4
3765: NOT
3766: AND
3767: IFFALSE 4254
3769: GO 3771
3771: DISABLE
3772: LD_INT 0
3774: PPUSH
3775: PPUSH
3776: PPUSH
3777: PPUSH
3778: PPUSH
// begin enable ;
3779: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: LD_EXP 41
3789: PPUSH
3790: LD_INT 21
3792: PUSH
3793: LD_INT 2
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PPUSH
3800: CALL_OW 72
3804: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
3805: LD_ADDR_VAR 0 4
3809: PUSH
3810: LD_INT 81
3812: PUSH
3813: LD_INT 3
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 2
3822: PUSH
3823: LD_INT 95
3825: PUSH
3826: LD_INT 4
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 95
3835: PUSH
3836: LD_INT 5
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 95
3845: PUSH
3846: LD_INT 6
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: LD_INT 95
3855: PUSH
3856: LD_INT 7
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PPUSH
3874: CALL_OW 69
3878: ST_TO_ADDR
// for i in filter do
3879: LD_ADDR_VAR 0 1
3883: PUSH
3884: LD_VAR 0 2
3888: PUSH
3889: FOR_IN
3890: IFFALSE 4252
// begin tmp := IsDrivenBy ( i ) ;
3892: LD_ADDR_VAR 0 3
3896: PUSH
3897: LD_VAR 0 1
3901: PPUSH
3902: CALL_OW 311
3906: ST_TO_ADDR
// if not tmp then
3907: LD_VAR 0 3
3911: NOT
3912: IFFALSE 3916
// continue ;
3914: GO 3889
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
3916: LD_VAR 0 1
3920: PPUSH
3921: CALL_OW 261
3925: PUSH
3926: LD_INT 90
3928: GREATER
3929: PUSH
3930: LD_VAR 0 1
3934: PPUSH
3935: CALL_OW 110
3939: PUSH
3940: LD_INT 2
3942: EQUAL
3943: AND
3944: IFFALSE 3960
// SetTag ( i , 0 ) else
3946: LD_VAR 0 1
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 109
3958: GO 4003
// if GetTag ( i ) = 2 then
3960: LD_VAR 0 1
3964: PPUSH
3965: CALL_OW 110
3969: PUSH
3970: LD_INT 2
3972: EQUAL
3973: IFFALSE 4003
// begin x := rand ( 1 , 2 ) ;
3975: LD_ADDR_VAR 0 5
3979: PUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_INT 2
3985: PPUSH
3986: CALL_OW 12
3990: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
3991: LD_VAR 0 1
3995: PPUSH
3996: LD_INT 200
3998: PPUSH
3999: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4003: LD_VAR 0 1
4007: PPUSH
4008: CALL_OW 256
4012: PUSH
4013: LD_INT 600
4015: GREATEREQUAL
4016: PUSH
4017: LD_VAR 0 1
4021: PPUSH
4022: CALL_OW 110
4026: NOT
4027: AND
4028: IFFALSE 4054
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4030: LD_VAR 0 1
4034: PPUSH
4035: LD_VAR 0 4
4039: PPUSH
4040: LD_VAR 0 1
4044: PPUSH
4045: CALL_OW 74
4049: PPUSH
4050: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4054: LD_VAR 0 1
4058: PPUSH
4059: CALL_OW 256
4063: PUSH
4064: LD_INT 600
4066: LESS
4067: PUSH
4068: LD_VAR 0 1
4072: PPUSH
4073: CALL_OW 110
4077: NOT
4078: AND
4079: IFFALSE 4108
// begin SetTag ( i , 1 ) ;
4081: LD_VAR 0 1
4085: PPUSH
4086: LD_INT 1
4088: PPUSH
4089: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4093: LD_VAR 0 1
4097: PPUSH
4098: LD_INT 112
4100: PPUSH
4101: LD_INT 119
4103: PPUSH
4104: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4108: LD_VAR 0 1
4112: PPUSH
4113: CALL_OW 110
4117: PUSH
4118: LD_INT 1
4120: EQUAL
4121: PUSH
4122: LD_VAR 0 1
4126: PPUSH
4127: LD_INT 112
4129: PPUSH
4130: LD_INT 119
4132: PPUSH
4133: CALL_OW 297
4137: PUSH
4138: LD_INT 9
4140: LESS
4141: AND
4142: PUSH
4143: LD_VAR 0 3
4147: AND
4148: IFFALSE 4250
// begin ComExitVehicle ( tmp ) ;
4150: LD_VAR 0 3
4154: PPUSH
4155: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4159: LD_VAR 0 3
4163: PPUSH
4164: LD_VAR 0 1
4168: PPUSH
4169: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4173: LD_INT 35
4175: PPUSH
4176: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4180: LD_VAR 0 1
4184: PPUSH
4185: CALL_OW 256
4189: PUSH
4190: LD_INT 1000
4192: EQUAL
4193: IFFALSE 4173
// ComEnterUnit ( tmp , i ) ;
4195: LD_VAR 0 3
4199: PPUSH
4200: LD_VAR 0 1
4204: PPUSH
4205: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 261
4218: PUSH
4219: LD_INT 50
4221: LESSEQUAL
4222: IFFALSE 4238
// SetTag ( i , 2 ) else
4224: LD_VAR 0 1
4228: PPUSH
4229: LD_INT 2
4231: PPUSH
4232: CALL_OW 109
4236: GO 4250
// SetTag ( i , 0 ) ;
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_INT 0
4245: PPUSH
4246: CALL_OW 109
// end ; end ;
4250: GO 3889
4252: POP
4253: POP
// end ;
4254: PPOPN 5
4256: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4257: LD_EXP 4
4261: NOT
4262: PUSH
4263: LD_EXP 38
4267: AND
4268: IFFALSE 4529
4270: GO 4272
4272: DISABLE
4273: LD_INT 0
4275: PPUSH
4276: PPUSH
4277: PPUSH
4278: PPUSH
// begin enable ;
4279: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: LD_INT 3
4287: PPUSH
4288: LD_INT 22
4290: PUSH
4291: LD_INT 3
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 21
4300: PUSH
4301: LD_INT 3
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 3
4310: PUSH
4311: LD_INT 24
4313: PUSH
4314: LD_INT 1000
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 70
4334: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4335: LD_ADDR_VAR 0 3
4339: PUSH
4340: LD_EXP 38
4344: PPUSH
4345: LD_INT 50
4347: PUSH
4348: EMPTY
4349: LIST
4350: PPUSH
4351: CALL_OW 72
4355: ST_TO_ADDR
// if filter and tmp then
4356: LD_VAR 0 2
4360: PUSH
4361: LD_VAR 0 3
4365: AND
4366: IFFALSE 4458
// begin for i in tmp do
4368: LD_ADDR_VAR 0 1
4372: PUSH
4373: LD_VAR 0 3
4377: PUSH
4378: FOR_IN
4379: IFFALSE 4454
// begin if GetTag ( i ) = tEscape then
4381: LD_VAR 0 1
4385: PPUSH
4386: CALL_OW 110
4390: PUSH
4391: LD_EXP 17
4395: EQUAL
4396: IFFALSE 4400
// continue ;
4398: GO 4378
// if IsInUnit ( i ) then
4400: LD_VAR 0 1
4404: PPUSH
4405: CALL_OW 310
4409: IFFALSE 4422
// ComExitBuilding ( i ) else
4411: LD_VAR 0 1
4415: PPUSH
4416: CALL_OW 122
4420: GO 4452
// if not HasTask ( i ) then
4422: LD_VAR 0 1
4426: PPUSH
4427: CALL_OW 314
4431: NOT
4432: IFFALSE 4452
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4434: LD_VAR 0 1
4438: PPUSH
4439: LD_VAR 0 2
4443: PUSH
4444: LD_INT 1
4446: ARRAY
4447: PPUSH
4448: CALL_OW 130
// end ;
4452: GO 4378
4454: POP
4455: POP
// end else
4456: GO 4529
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4458: LD_VAR 0 3
4462: PPUSH
4463: LD_INT 3
4465: PUSH
4466: LD_INT 54
4468: PUSH
4469: EMPTY
4470: LIST
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PPUSH
4476: CALL_OW 72
4480: IFFALSE 4529
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4482: LD_ADDR_VAR 0 1
4486: PUSH
4487: LD_VAR 0 3
4491: PPUSH
4492: LD_INT 3
4494: PUSH
4495: LD_INT 54
4497: PUSH
4498: EMPTY
4499: LIST
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PPUSH
4505: CALL_OW 72
4509: PUSH
4510: FOR_IN
4511: IFFALSE 4527
// ComEnterUnit ( i , ruMainBase ) ;
4513: LD_VAR 0 1
4517: PPUSH
4518: LD_INT 200
4520: PPUSH
4521: CALL_OW 120
4525: GO 4510
4527: POP
4528: POP
// end ; end ;
4529: PPOPN 4
4531: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4532: LD_EXP 4
4536: NOT
4537: PUSH
4538: LD_EXP 40
4542: AND
4543: IFFALSE 4822
4545: GO 4547
4547: DISABLE
4548: LD_INT 0
4550: PPUSH
4551: PPUSH
4552: PPUSH
4553: PPUSH
// begin enable ;
4554: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4555: LD_ADDR_VAR 0 2
4559: PUSH
4560: LD_INT 3
4562: PPUSH
4563: LD_INT 22
4565: PUSH
4566: LD_INT 3
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 21
4575: PUSH
4576: LD_INT 1
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_INT 3
4585: PUSH
4586: LD_INT 24
4588: PUSH
4589: LD_INT 1000
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: PPUSH
4605: CALL_OW 70
4609: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4610: LD_ADDR_VAR 0 3
4614: PUSH
4615: LD_EXP 40
4619: PPUSH
4620: LD_INT 50
4622: PUSH
4623: EMPTY
4624: LIST
4625: PPUSH
4626: CALL_OW 72
4630: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4631: LD_ADDR_VAR 0 4
4635: PUSH
4636: LD_INT 118
4638: PPUSH
4639: LD_INT 121
4641: PPUSH
4642: CALL_OW 428
4646: ST_TO_ADDR
// if filter and tmp then
4647: LD_VAR 0 2
4651: PUSH
4652: LD_VAR 0 3
4656: AND
4657: IFFALSE 4749
// begin for i in tmp do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: LD_VAR 0 3
4668: PUSH
4669: FOR_IN
4670: IFFALSE 4745
// begin if GetTag ( i ) = tEscape then
4672: LD_VAR 0 1
4676: PPUSH
4677: CALL_OW 110
4681: PUSH
4682: LD_EXP 17
4686: EQUAL
4687: IFFALSE 4691
// continue ;
4689: GO 4669
// if IsInUnit ( i ) then
4691: LD_VAR 0 1
4695: PPUSH
4696: CALL_OW 310
4700: IFFALSE 4713
// ComExitBuilding ( i ) else
4702: LD_VAR 0 1
4706: PPUSH
4707: CALL_OW 122
4711: GO 4743
// if not HasTask ( i ) then
4713: LD_VAR 0 1
4717: PPUSH
4718: CALL_OW 314
4722: NOT
4723: IFFALSE 4743
// ComHeal ( i , filter [ 1 ] ) ;
4725: LD_VAR 0 1
4729: PPUSH
4730: LD_VAR 0 2
4734: PUSH
4735: LD_INT 1
4737: ARRAY
4738: PPUSH
4739: CALL_OW 128
// end ;
4743: GO 4669
4745: POP
4746: POP
// end else
4747: GO 4822
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4749: LD_VAR 0 3
4753: PPUSH
4754: LD_INT 3
4756: PUSH
4757: LD_INT 54
4759: PUSH
4760: EMPTY
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PPUSH
4767: CALL_OW 72
4771: IFFALSE 4822
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4773: LD_ADDR_VAR 0 1
4777: PUSH
4778: LD_VAR 0 3
4782: PPUSH
4783: LD_INT 3
4785: PUSH
4786: LD_INT 54
4788: PUSH
4789: EMPTY
4790: LIST
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PPUSH
4796: CALL_OW 72
4800: PUSH
4801: FOR_IN
4802: IFFALSE 4820
// ComEnterUnit ( i , lab ) ;
4804: LD_VAR 0 1
4808: PPUSH
4809: LD_VAR 0 4
4813: PPUSH
4814: CALL_OW 120
4818: GO 4801
4820: POP
4821: POP
// end ; end ; end_of_file
4822: PPOPN 4
4824: END
// on UnitDestroyed ( un ) do begin if un = Heike then
4825: LD_VAR 0 1
4829: PUSH
4830: LD_EXP 18
4834: EQUAL
4835: IFFALSE 4844
// YouLost ( Heike ) ;
4837: LD_STRING Heike
4839: PPUSH
4840: CALL_OW 104
// if un in ruEng then
4844: LD_VAR 0 1
4848: PUSH
4849: LD_EXP 38
4853: IN
4854: IFFALSE 4872
// ruEng := ruEng diff un ;
4856: LD_ADDR_EXP 38
4860: PUSH
4861: LD_EXP 38
4865: PUSH
4866: LD_VAR 0 1
4870: DIFF
4871: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
4872: LD_VAR 0 1
4876: PUSH
4877: LD_INT 22
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: LD_INT 21
4889: PUSH
4890: LD_INT 1
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: PUSH
4897: LD_INT 23
4899: PUSH
4900: LD_INT 2
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: LIST
4911: PPUSH
4912: CALL_OW 69
4916: IN
4917: IFFALSE 4933
// loseCounter := loseCounter + 1 ;
4919: LD_ADDR_EXP 6
4923: PUSH
4924: LD_EXP 6
4928: PUSH
4929: LD_INT 1
4931: PLUS
4932: ST_TO_ADDR
// end ;
4933: PPOPN 1
4935: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
4936: LD_INT 0
4938: PPUSH
4939: PPUSH
// begin if un in ruMobile then
4940: LD_VAR 0 2
4944: PUSH
4945: LD_EXP 41
4949: IN
4950: IFFALSE 5109
// begin ruMobile := ruMobile diff un ;
4952: LD_ADDR_EXP 41
4956: PUSH
4957: LD_EXP 41
4961: PUSH
4962: LD_VAR 0 2
4966: DIFF
4967: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
4968: LD_ADDR_VAR 0 5
4972: PUSH
4973: LD_VAR 0 2
4977: PPUSH
4978: CALL_OW 264
4982: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
4983: LD_ADDR_VAR 0 6
4987: PUSH
4988: LD_INT 110
4990: PPUSH
4991: LD_INT 126
4993: PPUSH
4994: CALL_OW 428
4998: ST_TO_ADDR
// if not driver or not fac then
4999: LD_VAR 0 1
5003: NOT
5004: PUSH
5005: LD_VAR 0 6
5009: NOT
5010: OR
5011: IFFALSE 5015
// exit ;
5013: GO 5109
// AddComMoveXY ( driver , 111 , 121 ) ;
5015: LD_VAR 0 1
5019: PPUSH
5020: LD_INT 111
5022: PPUSH
5023: LD_INT 121
5025: PPUSH
5026: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5030: LD_VAR 0 1
5034: PPUSH
5035: LD_VAR 0 6
5039: PPUSH
5040: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5044: LD_INT 35
5046: PPUSH
5047: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5051: LD_VAR 0 1
5055: PPUSH
5056: CALL_OW 301
5060: PUSH
5061: LD_VAR 0 1
5065: PPUSH
5066: CALL_OW 310
5070: OR
5071: IFFALSE 5044
// if IsDead ( driver ) then
5073: LD_VAR 0 1
5077: PPUSH
5078: CALL_OW 301
5082: IFFALSE 5086
// exit ;
5084: GO 5109
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5086: LD_VAR 0 6
5090: PPUSH
5091: LD_INT 21
5093: PPUSH
5094: LD_INT 1
5096: PPUSH
5097: LD_INT 1
5099: PPUSH
5100: LD_VAR 0 5
5104: PPUSH
5105: CALL_OW 185
// end ; end ;
5109: PPOPN 6
5111: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( fac ) = 3 then
5112: LD_VAR 0 2
5116: PPUSH
5117: CALL_OW 255
5121: PUSH
5122: LD_INT 3
5124: EQUAL
5125: IFFALSE 5171
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5127: LD_ADDR_EXP 41
5131: PUSH
5132: LD_EXP 41
5136: PPUSH
5137: LD_EXP 41
5141: PUSH
5142: LD_INT 1
5144: PLUS
5145: PPUSH
5146: LD_VAR 0 1
5150: PPUSH
5151: CALL_OW 1
5155: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5156: LD_VAR 0 1
5160: PPUSH
5161: LD_INT 110
5163: PPUSH
5164: LD_INT 117
5166: PPUSH
5167: CALL_OW 171
// end ; end ;
5171: PPOPN 2
5173: END
// on LeaveBuilding ( b , un ) do var barracks ;
5174: LD_INT 0
5176: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5177: LD_VAR 0 1
5181: PUSH
5182: LD_INT 130
5184: PPUSH
5185: LD_INT 17
5187: PPUSH
5188: CALL_OW 428
5192: PUSH
5193: LD_INT 138
5195: PPUSH
5196: LD_INT 22
5198: PPUSH
5199: CALL_OW 428
5203: PUSH
5204: LD_INT 123
5206: PPUSH
5207: LD_INT 17
5209: PPUSH
5210: CALL_OW 428
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: IN
5220: IFFALSE 5244
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_INT 135
5229: PPUSH
5230: LD_INT 31
5232: PPUSH
5233: CALL_OW 428
5237: PPUSH
5238: CALL_OW 180
// exit ;
5242: GO 5518
// end ; if b = HexInfo ( 135 , 31 ) then
5244: LD_VAR 0 1
5248: PUSH
5249: LD_INT 135
5251: PPUSH
5252: LD_INT 31
5254: PPUSH
5255: CALL_OW 428
5259: EQUAL
5260: IFFALSE 5332
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5262: LD_VAR 0 2
5266: PPUSH
5267: LD_INT 106
5269: PPUSH
5270: LD_INT 51
5272: PPUSH
5273: CALL_OW 428
5277: PPUSH
5278: CALL_OW 180
// if not explodeFirstDepot then
5282: LD_EXP 12
5286: NOT
5287: IFFALSE 5330
// begin explodeFirstDepot := true ;
5289: LD_ADDR_EXP 12
5293: PUSH
5294: LD_INT 1
5296: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5297: LD_INT 525
5299: PPUSH
5300: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5304: LD_INT 127
5306: PPUSH
5307: LD_INT 27
5309: PPUSH
5310: LD_INT 1
5312: PPUSH
5313: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5317: LD_INT 125
5319: PPUSH
5320: LD_INT 29
5322: PPUSH
5323: LD_INT 1
5325: PPUSH
5326: CALL_OW 453
// end ; exit ;
5330: GO 5518
// end ; if b = HexInfo ( 106 , 51 ) then
5332: LD_VAR 0 1
5336: PUSH
5337: LD_INT 106
5339: PPUSH
5340: LD_INT 51
5342: PPUSH
5343: CALL_OW 428
5347: EQUAL
5348: IFFALSE 5448
// begin AddComMoveXY ( un , 106 , 93 ) ;
5350: LD_VAR 0 2
5354: PPUSH
5355: LD_INT 106
5357: PPUSH
5358: LD_INT 93
5360: PPUSH
5361: CALL_OW 171
// if not explodeSecondDepot then
5365: LD_EXP 13
5369: NOT
5370: IFFALSE 5446
// begin explodeSecondDepot := true ;
5372: LD_ADDR_EXP 13
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5380: LD_INT 420
5382: PPUSH
5383: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5387: LD_INT 111
5389: PPUSH
5390: LD_INT 75
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5400: LD_INT 111
5402: PPUSH
5403: LD_INT 75
5405: PPUSH
5406: LD_INT 1
5408: PPUSH
5409: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5413: LD_INT 108
5415: PPUSH
5416: LD_INT 69
5418: PPUSH
5419: LD_INT 1
5421: PPUSH
5422: CALL_OW 453
// wait ( 0 0$2 ) ;
5426: LD_INT 70
5428: PPUSH
5429: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5433: LD_INT 94
5435: PPUSH
5436: LD_INT 65
5438: PPUSH
5439: LD_INT 1
5441: PPUSH
5442: CALL_OW 453
// end ; exit ;
5446: GO 5518
// end ; if GetBType ( b ) = b_bunker then
5448: LD_VAR 0 1
5452: PPUSH
5453: CALL_OW 266
5457: PUSH
5458: LD_INT 32
5460: EQUAL
5461: IFFALSE 5518
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5463: LD_ADDR_VAR 0 3
5467: PUSH
5468: LD_VAR 0 2
5472: PPUSH
5473: LD_INT 5
5475: PPUSH
5476: CALL 1004 0 2
5480: ST_TO_ADDR
// if barracks then
5481: LD_VAR 0 3
5485: IFFALSE 5503
// AddComEnterUnit ( un , barracks ) else
5487: LD_VAR 0 2
5491: PPUSH
5492: LD_VAR 0 3
5496: PPUSH
5497: CALL_OW 180
5501: GO 5518
// AddComMoveXY ( un , 116 , 110 ) ;
5503: LD_VAR 0 2
5507: PPUSH
5508: LD_INT 116
5510: PPUSH
5511: LD_INT 110
5513: PPUSH
5514: CALL_OW 171
// end ; end ;
5518: PPOPN 3
5520: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5521: LD_VAR 0 1
5525: PUSH
5526: LD_EXP 23
5530: EQUAL
5531: PUSH
5532: LD_VAR 0 2
5536: PUSH
5537: LD_INT 3
5539: PUSH
5540: LD_INT 6
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: IN
5547: AND
5548: IFFALSE 5579
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5550: LD_ADDR_EXP 8
5554: PUSH
5555: LD_VAR 0 1
5559: PPUSH
5560: CALL_OW 250
5564: PUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: CALL_OW 251
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: ST_TO_ADDR
// end ; end_of_file
5579: PPOPN 3
5581: END
// export function Action ; var i , un , veh , tmp , rutmp ; begin
5582: LD_INT 0
5584: PPUSH
5585: PPUSH
5586: PPUSH
5587: PPUSH
5588: PPUSH
5589: PPUSH
// InGameOn ;
5590: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5594: LD_INT 5
5596: PPUSH
5597: LD_INT 2
5599: PPUSH
5600: CALL_OW 343
// music_nat := 4 ;
5604: LD_ADDR_OWVAR 71
5608: PUSH
5609: LD_INT 4
5611: ST_TO_ADDR
// music_class := music_combat ;
5612: LD_ADDR_OWVAR 72
5616: PUSH
5617: LD_INT 1
5619: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5620: LD_INT 133
5622: PPUSH
5623: LD_INT 2
5625: PPUSH
5626: LD_INT 2
5628: PPUSH
5629: LD_INT 10
5631: PPUSH
5632: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5636: LD_INT 133
5638: PPUSH
5639: LD_INT 2
5641: PPUSH
5642: CALL_OW 86
// wait ( 0 0$1 ) ;
5646: LD_INT 35
5648: PPUSH
5649: CALL_OW 67
// uc_side := 6 ;
5653: LD_ADDR_OWVAR 20
5657: PUSH
5658: LD_INT 6
5660: ST_TO_ADDR
// uc_nation := 3 ;
5661: LD_ADDR_OWVAR 21
5665: PUSH
5666: LD_INT 3
5668: ST_TO_ADDR
// rutmp := [ ] ;
5669: LD_ADDR_VAR 0 6
5673: PUSH
5674: EMPTY
5675: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5676: LD_INT 6
5678: PPUSH
5679: LD_INT 3
5681: PPUSH
5682: LD_INT 21
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: LD_INT 1
5690: PPUSH
5691: LD_INT 44
5693: PPUSH
5694: LD_INT 66
5696: PPUSH
5697: CALL 336 0 7
// veh := CreateVehicle ;
5701: LD_ADDR_VAR 0 4
5705: PUSH
5706: CALL_OW 45
5710: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5711: LD_VAR 0 4
5715: PPUSH
5716: LD_INT 3
5718: PPUSH
5719: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5723: LD_VAR 0 4
5727: PPUSH
5728: LD_INT 8
5730: PPUSH
5731: LD_INT 0
5733: PPUSH
5734: CALL_OW 49
// SetLives ( veh , 500 ) ;
5738: LD_VAR 0 4
5742: PPUSH
5743: LD_INT 500
5745: PPUSH
5746: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
5750: LD_INT 0
5752: PPUSH
5753: LD_INT 3
5755: PPUSH
5756: LD_INT 3
5758: PPUSH
5759: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5763: CALL_OW 44
5767: PPUSH
5768: LD_VAR 0 4
5772: PPUSH
5773: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
5777: LD_VAR 0 4
5781: PPUSH
5782: LD_INT 133
5784: PPUSH
5785: LD_INT 11
5787: PPUSH
5788: CALL_OW 111
// rutmp := [ veh ] ;
5792: LD_ADDR_VAR 0 6
5796: PUSH
5797: LD_VAR 0 4
5801: PUSH
5802: EMPTY
5803: LIST
5804: ST_TO_ADDR
// for i := 1 to 4 do
5805: LD_ADDR_VAR 0 2
5809: PUSH
5810: DOUBLE
5811: LD_INT 1
5813: DEC
5814: ST_TO_ADDR
5815: LD_INT 4
5817: PUSH
5818: FOR_TO
5819: IFFALSE 5926
// begin PrepareHuman ( false , i , 2 ) ;
5821: LD_INT 0
5823: PPUSH
5824: LD_VAR 0 2
5828: PPUSH
5829: LD_INT 2
5831: PPUSH
5832: CALL_OW 380
// un := CreateHuman ;
5836: LD_ADDR_VAR 0 3
5840: PUSH
5841: CALL_OW 44
5845: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5846: LD_VAR 0 3
5850: PPUSH
5851: LD_INT 3
5853: PPUSH
5854: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
5858: LD_VAR 0 3
5862: PPUSH
5863: LD_INT 8
5865: PPUSH
5866: LD_INT 0
5868: PPUSH
5869: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
5873: LD_ADDR_VAR 0 6
5877: PUSH
5878: LD_VAR 0 6
5882: PPUSH
5883: LD_VAR 0 6
5887: PUSH
5888: LD_INT 1
5890: PLUS
5891: PPUSH
5892: LD_VAR 0 3
5896: PPUSH
5897: CALL_OW 1
5901: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
5902: LD_VAR 0 3
5906: PPUSH
5907: LD_INT 133
5909: PPUSH
5910: LD_INT 11
5912: PPUSH
5913: CALL_OW 111
// wait ( 0 0$0.5 ) ;
5917: LD_INT 18
5919: PPUSH
5920: CALL_OW 67
// end ;
5924: GO 5818
5926: POP
5927: POP
// for i in rutmp do
5928: LD_ADDR_VAR 0 2
5932: PUSH
5933: LD_VAR 0 6
5937: PUSH
5938: FOR_IN
5939: IFFALSE 5988
// begin AddComMoveXY ( i , 99 , 65 ) ;
5941: LD_VAR 0 2
5945: PPUSH
5946: LD_INT 99
5948: PPUSH
5949: LD_INT 65
5951: PPUSH
5952: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
5956: LD_VAR 0 2
5960: PPUSH
5961: LD_INT 76
5963: PPUSH
5964: LD_INT 108
5966: PPUSH
5967: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
5971: LD_VAR 0 2
5975: PPUSH
5976: LD_INT 92
5978: PPUSH
5979: LD_INT 176
5981: PPUSH
5982: CALL_OW 171
// end ;
5986: GO 5938
5988: POP
5989: POP
// wait ( 0 0$10 ) ;
5990: LD_INT 350
5992: PPUSH
5993: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
5997: LD_ADDR_VAR 0 5
6001: PUSH
6002: LD_EXP 18
6006: PUSH
6007: LD_EXP 19
6011: PUSH
6012: LD_EXP 20
6016: PUSH
6017: LD_EXP 21
6021: PUSH
6022: LD_EXP 22
6026: PUSH
6027: LD_EXP 23
6031: PUSH
6032: LD_EXP 24
6036: PUSH
6037: LD_EXP 25
6041: PUSH
6042: LD_EXP 27
6046: PUSH
6047: LD_EXP 28
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: PUSH
6064: LD_EXP 29
6068: UNION
6069: ST_TO_ADDR
// tmp := tmp diff 0 ;
6070: LD_ADDR_VAR 0 5
6074: PUSH
6075: LD_VAR 0 5
6079: PUSH
6080: LD_INT 0
6082: DIFF
6083: ST_TO_ADDR
// for i in heikeVehicles do
6084: LD_ADDR_VAR 0 2
6088: PUSH
6089: LD_EXP 30
6093: PUSH
6094: FOR_IN
6095: IFFALSE 6361
// begin if not tmp then
6097: LD_VAR 0 5
6101: NOT
6102: IFFALSE 6106
// continue ;
6104: GO 6094
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6106: LD_INT 2
6108: PPUSH
6109: LD_VAR 0 2
6113: PUSH
6114: LD_INT 5
6116: ARRAY
6117: PPUSH
6118: LD_VAR 0 2
6122: PUSH
6123: LD_INT 1
6125: ARRAY
6126: PPUSH
6127: LD_VAR 0 2
6131: PUSH
6132: LD_INT 2
6134: ARRAY
6135: PPUSH
6136: LD_VAR 0 2
6140: PUSH
6141: LD_INT 3
6143: ARRAY
6144: PPUSH
6145: LD_VAR 0 2
6149: PUSH
6150: LD_INT 4
6152: ARRAY
6153: PPUSH
6154: LD_INT 34
6156: PPUSH
6157: CALL 336 0 7
// veh := CreateVehicle ;
6161: LD_ADDR_VAR 0 4
6165: PUSH
6166: CALL_OW 45
6170: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6171: LD_VAR 0 2
6175: PUSH
6176: LD_INT 4
6178: ARRAY
6179: PUSH
6180: LD_INT 51
6182: PUSH
6183: LD_INT 32
6185: PUSH
6186: LD_INT 12
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: IN
6194: IFFALSE 6274
// begin if i [ 7 ] [ 1 ] then
6196: LD_VAR 0 2
6200: PUSH
6201: LD_INT 7
6203: ARRAY
6204: PUSH
6205: LD_INT 1
6207: ARRAY
6208: IFFALSE 6235
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6210: LD_VAR 0 4
6214: PPUSH
6215: LD_INT 1
6217: PPUSH
6218: LD_VAR 0 2
6222: PUSH
6223: LD_INT 7
6225: ARRAY
6226: PUSH
6227: LD_INT 1
6229: ARRAY
6230: PPUSH
6231: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6235: LD_VAR 0 2
6239: PUSH
6240: LD_INT 7
6242: ARRAY
6243: PUSH
6244: LD_INT 2
6246: ARRAY
6247: IFFALSE 6274
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6249: LD_VAR 0 4
6253: PPUSH
6254: LD_INT 2
6256: PPUSH
6257: LD_VAR 0 2
6261: PUSH
6262: LD_INT 7
6264: ARRAY
6265: PUSH
6266: LD_INT 2
6268: ARRAY
6269: PPUSH
6270: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6274: LD_VAR 0 4
6278: PPUSH
6279: LD_INT 3
6281: PPUSH
6282: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6286: LD_VAR 0 4
6290: PPUSH
6291: LD_INT 8
6293: PPUSH
6294: LD_INT 0
6296: PPUSH
6297: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6301: LD_VAR 0 5
6305: PUSH
6306: LD_INT 1
6308: ARRAY
6309: PPUSH
6310: LD_VAR 0 4
6314: PPUSH
6315: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6319: LD_ADDR_VAR 0 5
6323: PUSH
6324: LD_VAR 0 5
6328: PPUSH
6329: LD_INT 1
6331: PPUSH
6332: CALL_OW 3
6336: ST_TO_ADDR
// ComAgressiveMove ( veh , 133 , 7 ) ;
6337: LD_VAR 0 4
6341: PPUSH
6342: LD_INT 133
6344: PPUSH
6345: LD_INT 7
6347: PPUSH
6348: CALL_OW 114
// wait ( 0 0$1 ) ;
6352: LD_INT 35
6354: PPUSH
6355: CALL_OW 67
// end ;
6359: GO 6094
6361: POP
6362: POP
// if tmp then
6363: LD_VAR 0 5
6367: IFFALSE 6423
// for i in tmp do
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: LD_VAR 0 5
6378: PUSH
6379: FOR_IN
6380: IFFALSE 6421
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6382: LD_VAR 0 2
6386: PPUSH
6387: LD_INT 10
6389: PPUSH
6390: LD_INT 0
6392: PPUSH
6393: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6397: LD_VAR 0 2
6401: PPUSH
6402: LD_INT 146
6404: PPUSH
6405: LD_INT 7
6407: PPUSH
6408: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6412: LD_INT 18
6414: PPUSH
6415: CALL_OW 67
// end ;
6419: GO 6379
6421: POP
6422: POP
// if heikeApes then
6423: LD_EXP 31
6427: IFFALSE 6483
// for i in heikeApes do
6429: LD_ADDR_VAR 0 2
6433: PUSH
6434: LD_EXP 31
6438: PUSH
6439: FOR_IN
6440: IFFALSE 6481
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6442: LD_VAR 0 2
6446: PPUSH
6447: LD_INT 10
6449: PPUSH
6450: LD_INT 0
6452: PPUSH
6453: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6457: LD_VAR 0 2
6461: PPUSH
6462: LD_INT 146
6464: PPUSH
6465: LD_INT 7
6467: PPUSH
6468: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6472: LD_INT 18
6474: PPUSH
6475: CALL_OW 67
// end ;
6479: GO 6439
6481: POP
6482: POP
// DialogueOn ;
6483: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6487: LD_EXP 18
6491: PPUSH
6492: LD_STRING DH-outpost-a-1
6494: PPUSH
6495: CALL_OW 88
// DialogueOff ;
6499: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6503: LD_INT 133
6505: PPUSH
6506: LD_INT 2
6508: PPUSH
6509: LD_INT 2
6511: PPUSH
6512: CALL_OW 331
// InGameOff ;
6516: CALL_OW 9
// music_nat := 0 ;
6520: LD_ADDR_OWVAR 71
6524: PUSH
6525: LD_INT 0
6527: ST_TO_ADDR
// music_class := 0 ;
6528: LD_ADDR_OWVAR 72
6532: PUSH
6533: LD_INT 0
6535: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6536: LD_STRING Outposts
6538: PPUSH
6539: CALL_OW 337
// SaveForQuickRestart ;
6543: CALL_OW 22
// end ;
6547: LD_VAR 0 1
6551: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6552: LD_INT 22
6554: PUSH
6555: LD_INT 2
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 91
6564: PUSH
6565: LD_EXP 21
6569: PUSH
6570: LD_INT 20
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 69
6586: PUSH
6587: LD_EXP 3
6591: AND
6592: PUSH
6593: LD_EXP 21
6597: PPUSH
6598: CALL_OW 302
6602: AND
6603: IFFALSE 6850
6605: GO 6607
6607: DISABLE
6608: LD_INT 0
6610: PPUSH
6611: PPUSH
6612: PPUSH
6613: PPUSH
// begin IbrahimBetrayal ;
6614: CALL 6853 0 0
// repeat wait ( 0 0$1 ) ;
6618: LD_INT 35
6620: PPUSH
6621: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6625: LD_EXP 21
6629: PPUSH
6630: CALL_OW 301
6634: PUSH
6635: LD_INT 22
6637: PUSH
6638: LD_INT 2
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 91
6647: PUSH
6648: LD_EXP 21
6652: PUSH
6653: LD_INT 6
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: PPUSH
6665: CALL_OW 69
6669: PUSH
6670: LD_EXP 21
6674: PPUSH
6675: CALL_OW 302
6679: AND
6680: OR
6681: IFFALSE 6618
// if IsDead ( Ibrahim ) then
6683: LD_EXP 21
6687: PPUSH
6688: CALL_OW 301
6692: IFFALSE 6696
// exit ;
6694: GO 6850
// x := GetX ( Ibrahim ) ;
6696: LD_ADDR_VAR 0 1
6700: PUSH
6701: LD_EXP 21
6705: PPUSH
6706: CALL_OW 250
6710: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
6711: LD_ADDR_VAR 0 2
6715: PUSH
6716: LD_EXP 21
6720: PPUSH
6721: CALL_OW 251
6725: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
6726: LD_ADDR_VAR 0 3
6730: PUSH
6731: LD_EXP 21
6735: PPUSH
6736: CALL_OW 254
6740: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
6741: LD_ADDR_VAR 0 4
6745: PUSH
6746: LD_EXP 21
6750: PPUSH
6751: CALL_OW 256
6755: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
6756: LD_EXP 21
6760: PPUSH
6761: CALL_OW 64
// uc_side := 2 ;
6765: LD_ADDR_OWVAR 20
6769: PUSH
6770: LD_INT 2
6772: ST_TO_ADDR
// uc_nation := 2 ;
6773: LD_ADDR_OWVAR 21
6777: PUSH
6778: LD_INT 2
6780: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
6781: LD_ADDR_EXP 21
6785: PUSH
6786: LD_STRING Ibrahim
6788: PPUSH
6789: LD_INT 0
6791: PPUSH
6792: LD_STRING 
6794: PPUSH
6795: CALL 27070 0 3
6799: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
6800: LD_EXP 21
6804: PPUSH
6805: LD_VAR 0 3
6809: PPUSH
6810: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
6814: LD_EXP 21
6818: PPUSH
6819: LD_VAR 0 1
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: LD_INT 0
6831: PPUSH
6832: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
6836: LD_EXP 21
6840: PPUSH
6841: LD_VAR 0 4
6845: PPUSH
6846: CALL_OW 234
// end ;
6850: PPOPN 4
6852: END
// export function IbrahimBetrayal ; var i , tmp ; begin
6853: LD_INT 0
6855: PPUSH
6856: PPUSH
6857: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
6858: LD_INT 122
6860: PPUSH
6861: LD_INT 77
6863: PPUSH
6864: LD_INT 2
6866: PPUSH
6867: LD_INT 6
6869: NEG
6870: PPUSH
6871: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
6875: LD_EXP 21
6879: PPUSH
6880: LD_INT 123
6882: PPUSH
6883: LD_INT 79
6885: PPUSH
6886: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
6890: LD_EXP 21
6894: PPUSH
6895: LD_INT 125
6897: PPUSH
6898: LD_INT 82
6900: PPUSH
6901: CALL_OW 178
// wait ( 0 0$2 ) ;
6905: LD_INT 70
6907: PPUSH
6908: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
6912: LD_EXP 42
6916: PPUSH
6917: LD_EXP 21
6921: PPUSH
6922: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
6926: LD_EXP 42
6930: PPUSH
6931: LD_STRING DRum-outpost-b-3
6933: PPUSH
6934: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: LD_INT 125
6945: PPUSH
6946: LD_INT 76
6948: PPUSH
6949: CALL_OW 428
6953: PUSH
6954: LD_INT 125
6956: PPUSH
6957: LD_INT 79
6959: PPUSH
6960: CALL_OW 428
6964: PUSH
6965: LD_INT 125
6967: PPUSH
6968: LD_INT 82
6970: PPUSH
6971: CALL_OW 428
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// for i in tmp do
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: LD_VAR 0 3
6990: PUSH
6991: FOR_IN
6992: IFFALSE 7008
// SetLives ( i , 200 ) ;
6994: LD_VAR 0 2
6998: PPUSH
6999: LD_INT 200
7001: PPUSH
7002: CALL_OW 234
7006: GO 6991
7008: POP
7009: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7010: LD_EXP 21
7014: PPUSH
7015: LD_STRING DI-outpost-b-4
7017: PPUSH
7018: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7022: LD_EXP 21
7026: PPUSH
7027: LD_INT 5
7029: PPUSH
7030: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7034: LD_EXP 21
7038: PUSH
7039: LD_EXP 42
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PPUSH
7048: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7052: LD_INT 122
7054: PPUSH
7055: LD_INT 77
7057: PPUSH
7058: LD_INT 2
7060: PPUSH
7061: CALL_OW 331
// if Givi then
7065: LD_EXP 19
7069: IFFALSE 7085
// Say ( Givi , DG-1-outpost-b-5 ) else
7071: LD_EXP 19
7075: PPUSH
7076: LD_STRING DG-1-outpost-b-5
7078: PPUSH
7079: CALL_OW 88
7083: GO 7150
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7085: LD_EXP 29
7089: PPUSH
7090: LD_INT 26
7092: PUSH
7093: LD_INT 2
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 72
7104: PUSH
7105: LD_INT 1
7107: ARRAY
7108: PPUSH
7109: LD_STRING DArf-outpost-b-a-5
7111: PPUSH
7112: CALL_OW 88
7116: NOT
7117: IFFALSE 7150
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7119: LD_EXP 29
7123: PPUSH
7124: LD_INT 26
7126: PUSH
7127: LD_INT 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PPUSH
7134: CALL_OW 72
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: PPUSH
7143: LD_STRING DArm-outpost-b-a-5
7145: PPUSH
7146: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7150: LD_INT 35
7152: PPUSH
7153: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7157: LD_EXP 21
7161: PPUSH
7162: CALL_OW 301
7166: PUSH
7167: LD_EXP 18
7171: PPUSH
7172: LD_EXP 21
7176: PPUSH
7177: CALL_OW 296
7181: PUSH
7182: LD_INT 6
7184: LESS
7185: PUSH
7186: LD_EXP 21
7190: PPUSH
7191: CALL_OW 302
7195: AND
7196: OR
7197: IFFALSE 7150
// if IsDead ( Ibrahim ) then
7199: LD_EXP 21
7203: PPUSH
7204: CALL_OW 301
7208: IFFALSE 7224
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7210: LD_EXP 18
7214: PPUSH
7215: LD_STRING DH-ibrahimdead-1
7217: PPUSH
7218: CALL_OW 88
// exit ;
7222: GO 7265
// end ; CenterNowOnUnits ( Ibrahim ) ;
7224: LD_EXP 21
7228: PPUSH
7229: CALL_OW 87
// DialogueOn ;
7233: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7237: LD_EXP 21
7241: PPUSH
7242: LD_STRING DI-ibrahimlives-1
7244: PPUSH
7245: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7249: LD_EXP 18
7253: PPUSH
7254: LD_STRING DH-Ibrahimlives-2
7256: PPUSH
7257: CALL_OW 88
// DialogueOff ;
7261: CALL_OW 7
// end ;
7265: LD_VAR 0 1
7269: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 ] [ Difficulty ] do
7270: LD_INT 11
7272: PPUSH
7273: LD_INT 22
7275: PUSH
7276: LD_INT 2
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PPUSH
7283: CALL_OW 70
7287: PUSH
7288: LD_OWVAR 1
7292: PUSH
7293: LD_INT 18900
7295: PUSH
7296: LD_INT 16800
7298: PUSH
7299: LD_INT 16800
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: LIST
7306: PUSH
7307: LD_OWVAR 67
7311: ARRAY
7312: GREATEREQUAL
7313: OR
7314: IFFALSE 7775
7316: GO 7318
7318: DISABLE
// begin outerAreaAchived := true ;
7319: LD_ADDR_EXP 15
7323: PUSH
7324: LD_INT 1
7326: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7327: LD_INT 700
7329: PPUSH
7330: CALL_OW 67
// DialogueOn ;
7334: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7338: LD_EXP 26
7342: PPUSH
7343: LD_STRING DShar-radio-1
7345: PPUSH
7346: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7350: LD_EXP 26
7354: PPUSH
7355: LD_STRING DShar-radio-2
7357: PPUSH
7358: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7362: LD_EXP 18
7366: PPUSH
7367: LD_STRING DH-radio-2
7369: PPUSH
7370: CALL_OW 88
// DialogueOff ;
7374: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7378: LD_STRING Gaidar
7380: PPUSH
7381: CALL_OW 337
// if Difficulty < 3 then
7385: LD_OWVAR 67
7389: PUSH
7390: LD_INT 3
7392: LESS
7393: IFFALSE 7459
// begin DialogueOn ;
7395: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7399: LD_INT 11
7401: PPUSH
7402: LD_INT 14
7404: PPUSH
7405: LD_INT 2
7407: PPUSH
7408: LD_INT 6
7410: NEG
7411: PPUSH
7412: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7416: LD_INT 11
7418: PPUSH
7419: LD_INT 14
7421: PPUSH
7422: LD_INT 2
7424: PPUSH
7425: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7429: LD_INT 11
7431: PPUSH
7432: LD_INT 14
7434: PPUSH
7435: CALL_OW 84
// dwait ( 0 0$1 ) ;
7439: LD_INT 35
7441: PPUSH
7442: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7446: LD_EXP 18
7450: PPUSH
7451: CALL_OW 87
// DialogueOff ;
7455: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7459: LD_INT 1050
7461: PUSH
7462: LD_INT 350
7464: PPUSH
7465: LD_INT 525
7467: PPUSH
7468: CALL_OW 12
7472: PUSH
7473: LD_OWVAR 67
7477: MUL
7478: PLUS
7479: PPUSH
7480: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7484: LD_INT 35
7486: PPUSH
7487: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7491: LD_INT 2
7493: PPUSH
7494: LD_INT 1
7496: PPUSH
7497: CALL_OW 428
7501: PUSH
7502: LD_INT 0
7504: EQUAL
7505: IFFALSE 7484
// SetDir ( Gaidar , 2 ) ;
7507: LD_EXP 35
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7519: LD_EXP 35
7523: PPUSH
7524: LD_INT 2
7526: PPUSH
7527: LD_INT 1
7529: PPUSH
7530: LD_INT 0
7532: PPUSH
7533: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7537: LD_EXP 35
7541: PPUSH
7542: LD_INT 19
7544: PPUSH
7545: LD_INT 24
7547: PPUSH
7548: CALL_OW 111
// AddComWait ( Gaidar , 0 0$6 ) ;
7552: LD_EXP 35
7556: PPUSH
7557: LD_INT 210
7559: PPUSH
7560: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7564: LD_EXP 35
7568: PPUSH
7569: LD_INT 38
7571: PPUSH
7572: LD_INT 47
7574: PPUSH
7575: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7579: LD_EXP 35
7583: PPUSH
7584: LD_INT 32
7586: PPUSH
7587: LD_INT 59
7589: PPUSH
7590: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
7594: LD_EXP 35
7598: PPUSH
7599: LD_INT 350
7601: PPUSH
7602: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
7606: LD_EXP 35
7610: PPUSH
7611: LD_INT 62
7613: PPUSH
7614: LD_INT 116
7616: PPUSH
7617: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
7621: LD_EXP 35
7625: PPUSH
7626: LD_INT 92
7628: PPUSH
7629: LD_INT 177
7631: PPUSH
7632: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7636: LD_INT 35
7638: PPUSH
7639: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
7643: LD_EXP 35
7647: PPUSH
7648: CALL_OW 301
7652: PUSH
7653: LD_EXP 35
7657: PPUSH
7658: LD_INT 92
7660: PPUSH
7661: LD_INT 177
7663: PPUSH
7664: CALL_OW 307
7668: OR
7669: IFFALSE 7636
// if IsAt ( Gaidar , 92 , 177 ) then
7671: LD_EXP 35
7675: PPUSH
7676: LD_INT 92
7678: PPUSH
7679: LD_INT 177
7681: PPUSH
7682: CALL_OW 307
7686: IFFALSE 7753
// begin DialogueOn ;
7688: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
7692: LD_INT 92
7694: PPUSH
7695: LD_INT 177
7697: PPUSH
7698: LD_INT 2
7700: PPUSH
7701: LD_INT 3
7703: NEG
7704: PPUSH
7705: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
7709: LD_EXP 35
7713: PPUSH
7714: CALL_OW 87
// dwait ( 0 0$2 ) ;
7718: LD_INT 70
7720: PPUSH
7721: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
7725: LD_INT 92
7727: PPUSH
7728: LD_INT 177
7730: PPUSH
7731: LD_INT 2
7733: PPUSH
7734: CALL_OW 331
// DialogueOff ;
7738: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
7742: LD_EXP 35
7746: PPUSH
7747: CALL_OW 64
// exit ;
7751: GO 7775
// end ; gaidarKilled := true ;
7753: LD_ADDR_EXP 14
7757: PUSH
7758: LD_INT 1
7760: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
7761: LD_STRING GaidarKilled
7763: PPUSH
7764: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
7768: LD_STRING ACH_COMMISAR
7770: PPUSH
7771: CALL_OW 543
// end ;
7775: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
7776: LD_INT 2
7778: PPUSH
7779: LD_EXP 35
7783: PPUSH
7784: CALL_OW 292
7788: IFFALSE 7805
7790: GO 7792
7792: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
7793: LD_EXP 35
7797: PPUSH
7798: LD_STRING DT-objective-1
7800: PPUSH
7801: CALL_OW 88
7805: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
7806: LD_INT 22
7808: PUSH
7809: LD_INT 2
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 2
7818: PUSH
7819: LD_INT 95
7821: PUSH
7822: LD_INT 5
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 95
7831: PUSH
7832: LD_INT 6
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 95
7841: PUSH
7842: LD_INT 7
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 69
7863: IFFALSE 7900
7865: GO 7867
7867: DISABLE
// begin DialogueOn ;
7868: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
7872: LD_EXP 18
7876: PPUSH
7877: LD_STRING DH-outpost-last-1
7879: PPUSH
7880: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
7884: LD_EXP 34
7888: PPUSH
7889: LD_STRING DB-outpost-last-2
7891: PPUSH
7892: CALL_OW 94
// DialogueOff ;
7896: CALL_OW 7
// end ;
7900: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
7901: LD_INT 200
7903: PPUSH
7904: CALL_OW 256
7908: PUSH
7909: LD_INT 999
7911: LESS
7912: PUSH
7913: LD_INT 200
7915: PPUSH
7916: CALL_OW 255
7920: PUSH
7921: LD_INT 2
7923: EQUAL
7924: OR
7925: IFFALSE 8098
7927: GO 7929
7929: DISABLE
7930: LD_INT 0
7932: PPUSH
7933: PPUSH
// begin if not earlyEscape then
7934: LD_EXP 16
7938: NOT
7939: IFFALSE 7965
// begin SayRadio ( Burlak , DB-end-1 ) ;
7941: LD_EXP 34
7945: PPUSH
7946: LD_STRING DB-end-1
7948: PPUSH
7949: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
7953: LD_EXP 18
7957: PPUSH
7958: LD_STRING DH-end-2
7960: PPUSH
7961: CALL_OW 88
// end ; if tick <= 15 15$00 then
7965: LD_OWVAR 1
7969: PUSH
7970: LD_INT 31500
7972: LESSEQUAL
7973: IFFALSE 7982
// SetAchievement ( ACH_FIST ) ;
7975: LD_STRING ACH_FIST
7977: PPUSH
7978: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7982: LD_ADDR_VAR 0 2
7986: PUSH
7987: LD_INT 22
7989: PUSH
7990: LD_INT 3
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 3
7999: PUSH
8000: LD_INT 21
8002: PUSH
8003: LD_INT 3
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PPUSH
8018: CALL_OW 69
8022: ST_TO_ADDR
// if not tmp then
8023: LD_VAR 0 2
8027: NOT
8028: IFFALSE 8032
// exit ;
8030: GO 8098
// for i in tmp do
8032: LD_ADDR_VAR 0 1
8036: PUSH
8037: LD_VAR 0 2
8041: PUSH
8042: FOR_IN
8043: IFFALSE 8096
// begin SetTag ( i , tEscape ) ;
8045: LD_VAR 0 1
8049: PPUSH
8050: LD_EXP 17
8054: PPUSH
8055: CALL_OW 109
// if IsInUnit ( i ) then
8059: LD_VAR 0 1
8063: PPUSH
8064: CALL_OW 310
8068: IFFALSE 8079
// ComExitBuilding ( i ) ;
8070: LD_VAR 0 1
8074: PPUSH
8075: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8079: LD_VAR 0 1
8083: PPUSH
8084: LD_INT 92
8086: PPUSH
8087: LD_INT 177
8089: PPUSH
8090: CALL_OW 171
// end ;
8094: GO 8042
8096: POP
8097: POP
// end ;
8098: PPOPN 2
8100: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8101: LD_INT 4
8103: PPUSH
8104: LD_INT 22
8106: PUSH
8107: LD_INT 2
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PPUSH
8114: CALL_OW 70
8118: PUSH
8119: LD_EXP 15
8123: NOT
8124: AND
8125: PUSH
8126: LD_EXP 27
8130: PPUSH
8131: CALL_OW 302
8135: AND
8136: IFFALSE 8376
8138: GO 8140
8140: DISABLE
// begin DialogueOn ;
8141: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8145: LD_INT 111
8147: PPUSH
8148: LD_INT 54
8150: PPUSH
8151: LD_INT 2
8153: PPUSH
8154: LD_INT 16
8156: NEG
8157: PPUSH
8158: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8162: LD_INT 111
8164: PPUSH
8165: LD_INT 53
8167: PPUSH
8168: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8172: LD_INT 10
8174: PPUSH
8175: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8179: LD_EXP 27
8183: PPUSH
8184: LD_STRING DKs-Hannibal-1
8186: PPUSH
8187: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8191: LD_EXP 27
8195: PPUSH
8196: LD_STRING DKs-Hannibal-2
8198: PPUSH
8199: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8203: LD_EXP 27
8207: PPUSH
8208: LD_STRING DKs-Hannibal-3
8210: PPUSH
8211: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8215: LD_EXP 27
8219: PPUSH
8220: LD_STRING DKs-Hannibal-4
8222: PPUSH
8223: CALL_OW 88
// dwait ( 0 0$1 ) ;
8227: LD_INT 35
8229: PPUSH
8230: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8234: LD_INT 111
8236: PPUSH
8237: LD_INT 54
8239: PPUSH
8240: LD_INT 2
8242: PPUSH
8243: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8247: LD_INT 173
8249: PPUSH
8250: LD_INT 76
8252: PPUSH
8253: LD_INT 2
8255: PPUSH
8256: LD_INT 12
8258: NEG
8259: PPUSH
8260: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8264: LD_INT 173
8266: PPUSH
8267: LD_INT 76
8269: PPUSH
8270: LD_INT 2
8272: PPUSH
8273: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8277: LD_INT 173
8279: PPUSH
8280: LD_INT 76
8282: PPUSH
8283: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8287: LD_EXP 27
8291: PPUSH
8292: LD_STRING DKs-Hannibal-5
8294: PPUSH
8295: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8299: LD_EXP 22
8303: PUSH
8304: LD_INT 22
8306: PUSH
8307: LD_INT 2
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PUSH
8314: LD_INT 34
8316: PUSH
8317: LD_INT 26
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PPUSH
8328: CALL_OW 69
8332: NOT
8333: AND
8334: IFFALSE 8372
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8336: LD_EXP 22
8340: PPUSH
8341: LD_STRING DKam-Hannibal-a-6
8343: PPUSH
8344: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8348: LD_EXP 22
8352: PPUSH
8353: LD_STRING DKam-Hannibal-a-7
8355: PPUSH
8356: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8360: LD_EXP 19
8364: PPUSH
8365: LD_STRING DG-Hannibal-a-8
8367: PPUSH
8368: CALL_OW 88
// end ; DialogueOff ;
8372: CALL_OW 7
// end ;
8376: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8377: LD_INT 225
8379: PPUSH
8380: CALL_OW 302
8384: PUSH
8385: LD_INT 200
8387: PPUSH
8388: CALL_OW 302
8392: AND
8393: PUSH
8394: LD_INT 12
8396: PPUSH
8397: LD_INT 21
8399: PUSH
8400: LD_INT 3
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PPUSH
8407: CALL_OW 70
8411: PUSH
8412: LD_INT 2
8414: GREATER
8415: AND
8416: PUSH
8417: LD_INT 13
8419: PPUSH
8420: LD_INT 22
8422: PUSH
8423: LD_INT 2
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PPUSH
8430: CALL_OW 70
8434: PUSH
8435: LD_INT 3
8437: GREATER
8438: AND
8439: IFFALSE 8452
8441: GO 8443
8443: DISABLE
// hannibalPath := true ;
8444: LD_ADDR_EXP 9
8448: PUSH
8449: LD_INT 1
8451: ST_TO_ADDR
8452: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8453: LD_EXP 9
8457: PUSH
8458: LD_INT 6
8460: PPUSH
8461: LD_INT 22
8463: PUSH
8464: LD_INT 2
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PPUSH
8471: CALL_OW 70
8475: AND
8476: IFFALSE 8821
8478: GO 8480
8480: DISABLE
8481: LD_INT 0
8483: PPUSH
8484: PPUSH
8485: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8486: LD_ADDR_VAR 0 2
8490: PUSH
8491: LD_INT 6
8493: PPUSH
8494: LD_INT 22
8496: PUSH
8497: LD_INT 2
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PPUSH
8504: CALL_OW 70
8508: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8509: LD_ADDR_VAR 0 3
8513: PUSH
8514: LD_VAR 0 2
8518: PPUSH
8519: LD_INT 34
8521: PUSH
8522: LD_INT 26
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: PPUSH
8529: CALL_OW 72
8533: PUSH
8534: LD_INT 0
8536: GREATER
8537: ST_TO_ADDR
// DialogueOn ;
8538: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8542: LD_EXP 18
8546: PPUSH
8547: LD_STRING DH-Cleverattack-1
8549: PPUSH
8550: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8554: LD_EXP 18
8558: PPUSH
8559: LD_STRING DH-Cleverattack-2
8561: PPUSH
8562: CALL_OW 88
// if hasFlameThrower then
8566: LD_VAR 0 3
8570: IFFALSE 8598
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8572: LD_EXP 34
8576: PPUSH
8577: LD_STRING DB-Cleverattack-3
8579: PPUSH
8580: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8584: LD_EXP 18
8588: PPUSH
8589: LD_STRING DH-Cleverattack-4
8591: PPUSH
8592: CALL_OW 88
// end else
8596: GO 8622
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
8598: LD_EXP 34
8602: PPUSH
8603: LD_STRING DB-Cleverattack-a-3
8605: PPUSH
8606: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
8610: LD_EXP 18
8614: PPUSH
8615: LD_STRING DH-Cleverattack-a-4
8617: PPUSH
8618: CALL_OW 88
// end ; DialogueOff ;
8622: CALL_OW 7
// if not hasFlameThrower then
8626: LD_VAR 0 3
8630: NOT
8631: IFFALSE 8635
// exit ;
8633: GO 8821
// earlyEscape := true ;
8635: LD_ADDR_EXP 16
8639: PUSH
8640: LD_INT 1
8642: ST_TO_ADDR
// wait ( 0 0$4 ) ;
8643: LD_INT 140
8645: PPUSH
8646: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
8650: LD_ADDR_VAR 0 2
8654: PUSH
8655: LD_INT 22
8657: PUSH
8658: LD_INT 3
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: PUSH
8665: LD_INT 2
8667: PUSH
8668: LD_INT 25
8670: PUSH
8671: LD_INT 1
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 25
8680: PUSH
8681: LD_INT 2
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 25
8690: PUSH
8691: LD_INT 4
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PPUSH
8708: CALL_OW 69
8712: PUSH
8713: LD_EXP 21
8717: PUSH
8718: LD_EXP 36
8722: PUSH
8723: LD_EXP 35
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: LIST
8732: DIFF
8733: ST_TO_ADDR
// for i in tmp do
8734: LD_ADDR_VAR 0 1
8738: PUSH
8739: LD_VAR 0 2
8743: PUSH
8744: FOR_IN
8745: IFFALSE 8819
// begin if Prob ( 40 + 10 * Difficulty ) then
8747: LD_INT 40
8749: PUSH
8750: LD_INT 10
8752: PUSH
8753: LD_OWVAR 67
8757: MUL
8758: PLUS
8759: PPUSH
8760: CALL_OW 13
8764: IFFALSE 8768
// continue ;
8766: GO 8744
// SetTag ( i , tEscape ) ;
8768: LD_VAR 0 1
8772: PPUSH
8773: LD_EXP 17
8777: PPUSH
8778: CALL_OW 109
// if IsInUnit ( i ) then
8782: LD_VAR 0 1
8786: PPUSH
8787: CALL_OW 310
8791: IFFALSE 8802
// ComExitBuilding ( i ) ;
8793: LD_VAR 0 1
8797: PPUSH
8798: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8802: LD_VAR 0 1
8806: PPUSH
8807: LD_INT 92
8809: PPUSH
8810: LD_INT 177
8812: PPUSH
8813: CALL_OW 171
// end ;
8817: GO 8744
8819: POP
8820: POP
// end ;
8821: PPOPN 3
8823: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
8824: LD_INT 9
8826: PPUSH
8827: LD_INT 2
8829: PUSH
8830: LD_INT 22
8832: PUSH
8833: LD_INT 3
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: LD_INT 22
8842: PUSH
8843: LD_INT 6
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: LIST
8854: PPUSH
8855: CALL_OW 70
8859: IFFALSE 8957
8861: GO 8863
8863: DISABLE
8864: LD_INT 0
8866: PPUSH
// begin enable ;
8867: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
8868: LD_ADDR_VAR 0 1
8872: PUSH
8873: LD_INT 9
8875: PPUSH
8876: LD_INT 2
8878: PUSH
8879: LD_INT 22
8881: PUSH
8882: LD_INT 3
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 22
8891: PUSH
8892: LD_INT 6
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: PPUSH
8904: CALL_OW 70
8908: PUSH
8909: FOR_IN
8910: IFFALSE 8955
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
8912: LD_VAR 0 1
8916: PPUSH
8917: CALL_OW 110
8921: PUSH
8922: LD_EXP 17
8926: EQUAL
8927: PUSH
8928: LD_VAR 0 1
8932: PPUSH
8933: CALL_OW 255
8937: PUSH
8938: LD_INT 6
8940: EQUAL
8941: OR
8942: IFFALSE 8953
// RemoveUnit ( i ) ;
8944: LD_VAR 0 1
8948: PPUSH
8949: CALL_OW 64
8953: GO 8909
8955: POP
8956: POP
// end ;
8957: PPOPN 1
8959: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
8960: LD_EXP 23
8964: PUSH
8965: LD_EXP 23
8969: PPUSH
8970: CALL_OW 256
8974: PUSH
8975: LD_INT 3
8977: LESS
8978: AND
8979: IFFALSE 9025
8981: GO 8983
8983: DISABLE
// begin DialogueOn ;
8984: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
8988: LD_EXP 23
8992: PPUSH
8993: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
8997: LD_EXP 23
9001: PPUSH
9002: LD_STRING DK-Kkilled-1
9004: PPUSH
9005: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9009: LD_EXP 18
9013: PPUSH
9014: LD_STRING DH-Kkilled-2
9016: PPUSH
9017: CALL_OW 88
// DialogueOff ;
9021: CALL_OW 7
// end ;
9025: END
// every 0 0$1 trigger kaiaKilledByRussian do
9026: LD_EXP 8
9030: IFFALSE 9047
9032: GO 9034
9034: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9035: LD_EXP 18
9039: PPUSH
9040: LD_STRING DH-Kkilled-3
9042: PPUSH
9043: CALL_OW 88
9047: END
// every 0 0$1 trigger tick >= 24 24$00 do
9048: LD_OWVAR 1
9052: PUSH
9053: LD_INT 50400
9055: GREATEREQUAL
9056: IFFALSE 9093
9058: GO 9060
9060: DISABLE
// begin DialogueOn ;
9061: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9065: LD_EXP 26
9069: PPUSH
9070: LD_STRING DShar-slow-1
9072: PPUSH
9073: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9077: LD_EXP 26
9081: PPUSH
9082: LD_STRING DShar-slow-2
9084: PPUSH
9085: CALL_OW 94
// DialogueOff ;
9089: CALL_OW 7
// end ;
9093: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 ] [ Difficulty ] do
9094: LD_OWVAR 1
9098: PUSH
9099: LD_INT 84000
9101: PUSH
9102: LD_INT 75600
9104: PUSH
9105: LD_INT 67200
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: PUSH
9113: LD_OWVAR 67
9117: ARRAY
9118: GREATEREQUAL
9119: IFFALSE 9163
9121: GO 9123
9123: DISABLE
// begin DialogueOn ;
9124: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9128: LD_EXP 26
9132: PPUSH
9133: LD_STRING DShar-fail-1
9135: PPUSH
9136: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9140: LD_EXP 26
9144: PPUSH
9145: LD_STRING DShar-fail-2
9147: PPUSH
9148: CALL_OW 94
// DialogueOff ;
9152: CALL_OW 7
// YouLost ( Time ) ;
9156: LD_STRING Time
9158: PPUSH
9159: CALL_OW 104
// end ;
9163: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9164: LD_INT 22
9166: PUSH
9167: LD_INT 3
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PUSH
9174: LD_INT 2
9176: PUSH
9177: LD_INT 30
9179: PUSH
9180: LD_INT 1
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PUSH
9187: LD_INT 30
9189: PUSH
9190: LD_INT 0
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: LIST
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PPUSH
9206: CALL_OW 69
9210: PUSH
9211: LD_INT 0
9213: EQUAL
9214: IFFALSE 9717
9216: GO 9218
9218: DISABLE
9219: LD_INT 0
9221: PPUSH
// begin if ( tick + gameTime ) <= [ 75 75$00 , 70 70$00 , 65 65$00 ] [ Difficulty ] then
9222: LD_OWVAR 1
9226: PUSH
9227: LD_EXP 5
9231: PLUS
9232: PUSH
9233: LD_INT 157500
9235: PUSH
9236: LD_INT 147000
9238: PUSH
9239: LD_INT 136500
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: LIST
9246: PUSH
9247: LD_OWVAR 67
9251: ARRAY
9252: LESSEQUAL
9253: IFFALSE 9267
// AddMedal ( med1 , 1 ) else
9255: LD_STRING med1
9257: PPUSH
9258: LD_INT 1
9260: PPUSH
9261: CALL_OW 101
9265: GO 9278
// AddMedal ( med1 , - 1 ) ;
9267: LD_STRING med1
9269: PPUSH
9270: LD_INT 1
9272: NEG
9273: PPUSH
9274: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 ] [ Difficulty ] ) then
9278: LD_EXP 7
9282: PUSH
9283: LD_INT 3
9285: GREATEREQUAL
9286: PUSH
9287: LD_EXP 11
9291: MUL
9292: PUSH
9293: LD_EXP 9
9297: MUL
9298: PUSH
9299: LD_EXP 6
9303: PUSH
9304: LD_INT 6
9306: PUSH
9307: LD_INT 5
9309: PUSH
9310: LD_INT 4
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: LIST
9317: PUSH
9318: LD_OWVAR 67
9322: ARRAY
9323: LESS
9324: MUL
9325: IFFALSE 9339
// AddMedal ( med2 , 1 ) else
9327: LD_STRING med2
9329: PPUSH
9330: LD_INT 1
9332: PPUSH
9333: CALL_OW 101
9337: GO 9350
// AddMedal ( med2 , - 1 ) ;
9339: LD_STRING med2
9341: PPUSH
9342: LD_INT 1
9344: NEG
9345: PPUSH
9346: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9350: LD_EXP 14
9354: PPUSH
9355: LD_STRING 04_2_GaidarKilled
9357: PPUSH
9358: CALL_OW 39
// if gaidarKilled then
9362: LD_EXP 14
9366: IFFALSE 9380
// AddMedal ( med3 , 1 ) else
9368: LD_STRING med3
9370: PPUSH
9371: LD_INT 1
9373: PPUSH
9374: CALL_OW 101
9378: GO 9391
// AddMedal ( med3 , - 1 ) ;
9380: LD_STRING med3
9382: PPUSH
9383: LD_INT 1
9385: NEG
9386: PPUSH
9387: CALL_OW 101
// GiveMedals ( MAIN ) ;
9391: LD_STRING MAIN
9393: PPUSH
9394: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9398: LD_INT 22
9400: PUSH
9401: LD_INT 2
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: LD_INT 23
9413: PUSH
9414: LD_INT 0
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PPUSH
9429: CALL_OW 69
9433: PPUSH
9434: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9438: LD_EXP 18
9442: PPUSH
9443: LD_STRING 04_2_Heike
9445: PPUSH
9446: CALL_OW 38
// if Aviradze then
9450: LD_EXP 28
9454: IFFALSE 9468
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9456: LD_EXP 28
9460: PPUSH
9461: LD_STRING 04_2_Aviradze
9463: PPUSH
9464: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9468: LD_EXP 21
9472: PUSH
9473: LD_EXP 21
9477: PPUSH
9478: CALL_OW 255
9482: PUSH
9483: LD_INT 2
9485: EQUAL
9486: AND
9487: IFFALSE 9517
// begin if ibrahimOnRuSide then
9489: LD_EXP 3
9493: IFFALSE 9505
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9495: LD_INT 1
9497: PPUSH
9498: LD_STRING 04_2_IbrahimJoined
9500: PPUSH
9501: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9505: LD_EXP 21
9509: PPUSH
9510: LD_STRING 04_2_Ibrahim
9512: PPUSH
9513: CALL_OW 38
// end ; if Kamil then
9517: LD_EXP 22
9521: IFFALSE 9535
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
9523: LD_EXP 22
9527: PPUSH
9528: LD_STRING 04_2_Kamil
9530: PPUSH
9531: CALL_OW 38
// if Sophia then
9535: LD_EXP 24
9539: IFFALSE 9553
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
9541: LD_EXP 24
9545: PPUSH
9546: LD_STRING 04_2_Sophia
9548: PPUSH
9549: CALL_OW 38
// if Kaia then
9553: LD_EXP 23
9557: IFFALSE 9571
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
9559: LD_EXP 23
9563: PPUSH
9564: LD_STRING 04_2_Kaia
9566: PPUSH
9567: CALL_OW 38
// if Givi then
9571: LD_EXP 19
9575: IFFALSE 9589
// SaveCharacters ( Givi , 04_2_Givi ) ;
9577: LD_EXP 19
9581: PPUSH
9582: LD_STRING 04_2_Givi
9584: PPUSH
9585: CALL_OW 38
// if Mike then
9589: LD_EXP 20
9593: IFFALSE 9607
// SaveCharacters ( Mike , 04_2_Mike ) ;
9595: LD_EXP 20
9599: PPUSH
9600: LD_STRING 04_2_Mike
9602: PPUSH
9603: CALL_OW 38
// if Markov then
9607: LD_EXP 25
9611: IFFALSE 9625
// SaveCharacters ( Markov , 04_2_Markov ) ;
9613: LD_EXP 25
9617: PPUSH
9618: LD_STRING 04_2_Markov
9620: PPUSH
9621: CALL_OW 38
// if Kurt then
9625: LD_EXP 27
9629: IFFALSE 9643
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
9631: LD_EXP 27
9635: PPUSH
9636: LD_STRING 04_2_Kurt
9638: PPUSH
9639: CALL_OW 38
// if heikeSecondSquad then
9643: LD_EXP 29
9647: IFFALSE 9661
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
9649: LD_EXP 29
9653: PPUSH
9654: LD_STRING 04_2_others
9656: PPUSH
9657: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
9661: LD_ADDR_VAR 0 1
9665: PUSH
9666: LD_INT 22
9668: PUSH
9669: LD_INT 2
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PUSH
9676: LD_INT 23
9678: PUSH
9679: LD_INT 0
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PPUSH
9690: CALL_OW 69
9694: ST_TO_ADDR
// if tmp then
9695: LD_VAR 0 1
9699: IFFALSE 9713
// SaveCharacters ( tmp , 04_2_apes ) ;
9701: LD_VAR 0 1
9705: PPUSH
9706: LD_STRING 04_2_apes
9708: PPUSH
9709: CALL_OW 38
// YouWin ;
9713: CALL_OW 103
// end ; end_of_file
9717: PPOPN 1
9719: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9720: LD_INT 0
9722: PPUSH
// if p2 = 100 then
9723: LD_VAR 0 2
9727: PUSH
9728: LD_INT 100
9730: EQUAL
9731: IFFALSE 10680
// begin if not StreamModeActive then
9733: LD_EXP 43
9737: NOT
9738: IFFALSE 9748
// StreamModeActive := true ;
9740: LD_ADDR_EXP 43
9744: PUSH
9745: LD_INT 1
9747: ST_TO_ADDR
// if p3 = 0 then
9748: LD_VAR 0 3
9752: PUSH
9753: LD_INT 0
9755: EQUAL
9756: IFFALSE 9762
// InitStreamMode ;
9758: CALL 10840 0 0
// if p3 = 1 then
9762: LD_VAR 0 3
9766: PUSH
9767: LD_INT 1
9769: EQUAL
9770: IFFALSE 9780
// sRocket := true ;
9772: LD_ADDR_EXP 48
9776: PUSH
9777: LD_INT 1
9779: ST_TO_ADDR
// if p3 = 2 then
9780: LD_VAR 0 3
9784: PUSH
9785: LD_INT 2
9787: EQUAL
9788: IFFALSE 9798
// sSpeed := true ;
9790: LD_ADDR_EXP 47
9794: PUSH
9795: LD_INT 1
9797: ST_TO_ADDR
// if p3 = 3 then
9798: LD_VAR 0 3
9802: PUSH
9803: LD_INT 3
9805: EQUAL
9806: IFFALSE 9816
// sEngine := true ;
9808: LD_ADDR_EXP 49
9812: PUSH
9813: LD_INT 1
9815: ST_TO_ADDR
// if p3 = 4 then
9816: LD_VAR 0 3
9820: PUSH
9821: LD_INT 4
9823: EQUAL
9824: IFFALSE 9834
// sSpec := true ;
9826: LD_ADDR_EXP 46
9830: PUSH
9831: LD_INT 1
9833: ST_TO_ADDR
// if p3 = 5 then
9834: LD_VAR 0 3
9838: PUSH
9839: LD_INT 5
9841: EQUAL
9842: IFFALSE 9852
// sLevel := true ;
9844: LD_ADDR_EXP 50
9848: PUSH
9849: LD_INT 1
9851: ST_TO_ADDR
// if p3 = 6 then
9852: LD_VAR 0 3
9856: PUSH
9857: LD_INT 6
9859: EQUAL
9860: IFFALSE 9870
// sArmoury := true ;
9862: LD_ADDR_EXP 51
9866: PUSH
9867: LD_INT 1
9869: ST_TO_ADDR
// if p3 = 7 then
9870: LD_VAR 0 3
9874: PUSH
9875: LD_INT 7
9877: EQUAL
9878: IFFALSE 9888
// sRadar := true ;
9880: LD_ADDR_EXP 52
9884: PUSH
9885: LD_INT 1
9887: ST_TO_ADDR
// if p3 = 8 then
9888: LD_VAR 0 3
9892: PUSH
9893: LD_INT 8
9895: EQUAL
9896: IFFALSE 9906
// sBunker := true ;
9898: LD_ADDR_EXP 53
9902: PUSH
9903: LD_INT 1
9905: ST_TO_ADDR
// if p3 = 9 then
9906: LD_VAR 0 3
9910: PUSH
9911: LD_INT 9
9913: EQUAL
9914: IFFALSE 9924
// sHack := true ;
9916: LD_ADDR_EXP 54
9920: PUSH
9921: LD_INT 1
9923: ST_TO_ADDR
// if p3 = 10 then
9924: LD_VAR 0 3
9928: PUSH
9929: LD_INT 10
9931: EQUAL
9932: IFFALSE 9942
// sFire := true ;
9934: LD_ADDR_EXP 55
9938: PUSH
9939: LD_INT 1
9941: ST_TO_ADDR
// if p3 = 11 then
9942: LD_VAR 0 3
9946: PUSH
9947: LD_INT 11
9949: EQUAL
9950: IFFALSE 9960
// sRefresh := true ;
9952: LD_ADDR_EXP 56
9956: PUSH
9957: LD_INT 1
9959: ST_TO_ADDR
// if p3 = 12 then
9960: LD_VAR 0 3
9964: PUSH
9965: LD_INT 12
9967: EQUAL
9968: IFFALSE 9978
// sExp := true ;
9970: LD_ADDR_EXP 57
9974: PUSH
9975: LD_INT 1
9977: ST_TO_ADDR
// if p3 = 13 then
9978: LD_VAR 0 3
9982: PUSH
9983: LD_INT 13
9985: EQUAL
9986: IFFALSE 9996
// sDepot := true ;
9988: LD_ADDR_EXP 58
9992: PUSH
9993: LD_INT 1
9995: ST_TO_ADDR
// if p3 = 14 then
9996: LD_VAR 0 3
10000: PUSH
10001: LD_INT 14
10003: EQUAL
10004: IFFALSE 10014
// sFlag := true ;
10006: LD_ADDR_EXP 59
10010: PUSH
10011: LD_INT 1
10013: ST_TO_ADDR
// if p3 = 15 then
10014: LD_VAR 0 3
10018: PUSH
10019: LD_INT 15
10021: EQUAL
10022: IFFALSE 10032
// sKamikadze := true ;
10024: LD_ADDR_EXP 67
10028: PUSH
10029: LD_INT 1
10031: ST_TO_ADDR
// if p3 = 16 then
10032: LD_VAR 0 3
10036: PUSH
10037: LD_INT 16
10039: EQUAL
10040: IFFALSE 10050
// sTroll := true ;
10042: LD_ADDR_EXP 68
10046: PUSH
10047: LD_INT 1
10049: ST_TO_ADDR
// if p3 = 17 then
10050: LD_VAR 0 3
10054: PUSH
10055: LD_INT 17
10057: EQUAL
10058: IFFALSE 10068
// sSlow := true ;
10060: LD_ADDR_EXP 69
10064: PUSH
10065: LD_INT 1
10067: ST_TO_ADDR
// if p3 = 18 then
10068: LD_VAR 0 3
10072: PUSH
10073: LD_INT 18
10075: EQUAL
10076: IFFALSE 10086
// sLack := true ;
10078: LD_ADDR_EXP 70
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// if p3 = 19 then
10086: LD_VAR 0 3
10090: PUSH
10091: LD_INT 19
10093: EQUAL
10094: IFFALSE 10104
// sTank := true ;
10096: LD_ADDR_EXP 72
10100: PUSH
10101: LD_INT 1
10103: ST_TO_ADDR
// if p3 = 20 then
10104: LD_VAR 0 3
10108: PUSH
10109: LD_INT 20
10111: EQUAL
10112: IFFALSE 10122
// sRemote := true ;
10114: LD_ADDR_EXP 73
10118: PUSH
10119: LD_INT 1
10121: ST_TO_ADDR
// if p3 = 21 then
10122: LD_VAR 0 3
10126: PUSH
10127: LD_INT 21
10129: EQUAL
10130: IFFALSE 10140
// sPowell := true ;
10132: LD_ADDR_EXP 74
10136: PUSH
10137: LD_INT 1
10139: ST_TO_ADDR
// if p3 = 22 then
10140: LD_VAR 0 3
10144: PUSH
10145: LD_INT 22
10147: EQUAL
10148: IFFALSE 10158
// sTeleport := true ;
10150: LD_ADDR_EXP 77
10154: PUSH
10155: LD_INT 1
10157: ST_TO_ADDR
// if p3 = 23 then
10158: LD_VAR 0 3
10162: PUSH
10163: LD_INT 23
10165: EQUAL
10166: IFFALSE 10176
// sOilTower := true ;
10168: LD_ADDR_EXP 79
10172: PUSH
10173: LD_INT 1
10175: ST_TO_ADDR
// if p3 = 24 then
10176: LD_VAR 0 3
10180: PUSH
10181: LD_INT 24
10183: EQUAL
10184: IFFALSE 10194
// sShovel := true ;
10186: LD_ADDR_EXP 80
10190: PUSH
10191: LD_INT 1
10193: ST_TO_ADDR
// if p3 = 25 then
10194: LD_VAR 0 3
10198: PUSH
10199: LD_INT 25
10201: EQUAL
10202: IFFALSE 10212
// sSheik := true ;
10204: LD_ADDR_EXP 81
10208: PUSH
10209: LD_INT 1
10211: ST_TO_ADDR
// if p3 = 26 then
10212: LD_VAR 0 3
10216: PUSH
10217: LD_INT 26
10219: EQUAL
10220: IFFALSE 10230
// sEarthquake := true ;
10222: LD_ADDR_EXP 83
10226: PUSH
10227: LD_INT 1
10229: ST_TO_ADDR
// if p3 = 27 then
10230: LD_VAR 0 3
10234: PUSH
10235: LD_INT 27
10237: EQUAL
10238: IFFALSE 10248
// sAI := true ;
10240: LD_ADDR_EXP 84
10244: PUSH
10245: LD_INT 1
10247: ST_TO_ADDR
// if p3 = 28 then
10248: LD_VAR 0 3
10252: PUSH
10253: LD_INT 28
10255: EQUAL
10256: IFFALSE 10266
// sCargo := true ;
10258: LD_ADDR_EXP 87
10262: PUSH
10263: LD_INT 1
10265: ST_TO_ADDR
// if p3 = 29 then
10266: LD_VAR 0 3
10270: PUSH
10271: LD_INT 29
10273: EQUAL
10274: IFFALSE 10284
// sDLaser := true ;
10276: LD_ADDR_EXP 88
10280: PUSH
10281: LD_INT 1
10283: ST_TO_ADDR
// if p3 = 30 then
10284: LD_VAR 0 3
10288: PUSH
10289: LD_INT 30
10291: EQUAL
10292: IFFALSE 10302
// sExchange := true ;
10294: LD_ADDR_EXP 89
10298: PUSH
10299: LD_INT 1
10301: ST_TO_ADDR
// if p3 = 31 then
10302: LD_VAR 0 3
10306: PUSH
10307: LD_INT 31
10309: EQUAL
10310: IFFALSE 10320
// sFac := true ;
10312: LD_ADDR_EXP 90
10316: PUSH
10317: LD_INT 1
10319: ST_TO_ADDR
// if p3 = 32 then
10320: LD_VAR 0 3
10324: PUSH
10325: LD_INT 32
10327: EQUAL
10328: IFFALSE 10338
// sPower := true ;
10330: LD_ADDR_EXP 91
10334: PUSH
10335: LD_INT 1
10337: ST_TO_ADDR
// if p3 = 33 then
10338: LD_VAR 0 3
10342: PUSH
10343: LD_INT 33
10345: EQUAL
10346: IFFALSE 10356
// sRandom := true ;
10348: LD_ADDR_EXP 92
10352: PUSH
10353: LD_INT 1
10355: ST_TO_ADDR
// if p3 = 34 then
10356: LD_VAR 0 3
10360: PUSH
10361: LD_INT 34
10363: EQUAL
10364: IFFALSE 10374
// sShield := true ;
10366: LD_ADDR_EXP 93
10370: PUSH
10371: LD_INT 1
10373: ST_TO_ADDR
// if p3 = 35 then
10374: LD_VAR 0 3
10378: PUSH
10379: LD_INT 35
10381: EQUAL
10382: IFFALSE 10392
// sTime := true ;
10384: LD_ADDR_EXP 94
10388: PUSH
10389: LD_INT 1
10391: ST_TO_ADDR
// if p3 = 36 then
10392: LD_VAR 0 3
10396: PUSH
10397: LD_INT 36
10399: EQUAL
10400: IFFALSE 10410
// sTools := true ;
10402: LD_ADDR_EXP 95
10406: PUSH
10407: LD_INT 1
10409: ST_TO_ADDR
// if p3 = 101 then
10410: LD_VAR 0 3
10414: PUSH
10415: LD_INT 101
10417: EQUAL
10418: IFFALSE 10428
// sSold := true ;
10420: LD_ADDR_EXP 60
10424: PUSH
10425: LD_INT 1
10427: ST_TO_ADDR
// if p3 = 102 then
10428: LD_VAR 0 3
10432: PUSH
10433: LD_INT 102
10435: EQUAL
10436: IFFALSE 10446
// sDiff := true ;
10438: LD_ADDR_EXP 61
10442: PUSH
10443: LD_INT 1
10445: ST_TO_ADDR
// if p3 = 103 then
10446: LD_VAR 0 3
10450: PUSH
10451: LD_INT 103
10453: EQUAL
10454: IFFALSE 10464
// sFog := true ;
10456: LD_ADDR_EXP 64
10460: PUSH
10461: LD_INT 1
10463: ST_TO_ADDR
// if p3 = 104 then
10464: LD_VAR 0 3
10468: PUSH
10469: LD_INT 104
10471: EQUAL
10472: IFFALSE 10482
// sReset := true ;
10474: LD_ADDR_EXP 65
10478: PUSH
10479: LD_INT 1
10481: ST_TO_ADDR
// if p3 = 105 then
10482: LD_VAR 0 3
10486: PUSH
10487: LD_INT 105
10489: EQUAL
10490: IFFALSE 10500
// sSun := true ;
10492: LD_ADDR_EXP 66
10496: PUSH
10497: LD_INT 1
10499: ST_TO_ADDR
// if p3 = 106 then
10500: LD_VAR 0 3
10504: PUSH
10505: LD_INT 106
10507: EQUAL
10508: IFFALSE 10518
// sTiger := true ;
10510: LD_ADDR_EXP 62
10514: PUSH
10515: LD_INT 1
10517: ST_TO_ADDR
// if p3 = 107 then
10518: LD_VAR 0 3
10522: PUSH
10523: LD_INT 107
10525: EQUAL
10526: IFFALSE 10536
// sBomb := true ;
10528: LD_ADDR_EXP 63
10532: PUSH
10533: LD_INT 1
10535: ST_TO_ADDR
// if p3 = 108 then
10536: LD_VAR 0 3
10540: PUSH
10541: LD_INT 108
10543: EQUAL
10544: IFFALSE 10554
// sWound := true ;
10546: LD_ADDR_EXP 71
10550: PUSH
10551: LD_INT 1
10553: ST_TO_ADDR
// if p3 = 109 then
10554: LD_VAR 0 3
10558: PUSH
10559: LD_INT 109
10561: EQUAL
10562: IFFALSE 10572
// sBetray := true ;
10564: LD_ADDR_EXP 75
10568: PUSH
10569: LD_INT 1
10571: ST_TO_ADDR
// if p3 = 110 then
10572: LD_VAR 0 3
10576: PUSH
10577: LD_INT 110
10579: EQUAL
10580: IFFALSE 10590
// sContamin := true ;
10582: LD_ADDR_EXP 76
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// if p3 = 111 then
10590: LD_VAR 0 3
10594: PUSH
10595: LD_INT 111
10597: EQUAL
10598: IFFALSE 10608
// sOil := true ;
10600: LD_ADDR_EXP 78
10604: PUSH
10605: LD_INT 1
10607: ST_TO_ADDR
// if p3 = 112 then
10608: LD_VAR 0 3
10612: PUSH
10613: LD_INT 112
10615: EQUAL
10616: IFFALSE 10626
// sStu := true ;
10618: LD_ADDR_EXP 82
10622: PUSH
10623: LD_INT 1
10625: ST_TO_ADDR
// if p3 = 113 then
10626: LD_VAR 0 3
10630: PUSH
10631: LD_INT 113
10633: EQUAL
10634: IFFALSE 10644
// sBazooka := true ;
10636: LD_ADDR_EXP 85
10640: PUSH
10641: LD_INT 1
10643: ST_TO_ADDR
// if p3 = 114 then
10644: LD_VAR 0 3
10648: PUSH
10649: LD_INT 114
10651: EQUAL
10652: IFFALSE 10662
// sMortar := true ;
10654: LD_ADDR_EXP 86
10658: PUSH
10659: LD_INT 1
10661: ST_TO_ADDR
// if p3 = 115 then
10662: LD_VAR 0 3
10666: PUSH
10667: LD_INT 115
10669: EQUAL
10670: IFFALSE 10680
// sRanger := true ;
10672: LD_ADDR_EXP 96
10676: PUSH
10677: LD_INT 1
10679: ST_TO_ADDR
// end ; if p2 = 101 then
10680: LD_VAR 0 2
10684: PUSH
10685: LD_INT 101
10687: EQUAL
10688: IFFALSE 10816
// begin case p3 of 1 :
10690: LD_VAR 0 3
10694: PUSH
10695: LD_INT 1
10697: DOUBLE
10698: EQUAL
10699: IFTRUE 10703
10701: GO 10710
10703: POP
// hHackUnlimitedResources ; 2 :
10704: CALL 21853 0 0
10708: GO 10816
10710: LD_INT 2
10712: DOUBLE
10713: EQUAL
10714: IFTRUE 10718
10716: GO 10725
10718: POP
// hHackSetLevel10 ; 3 :
10719: CALL 21986 0 0
10723: GO 10816
10725: LD_INT 3
10727: DOUBLE
10728: EQUAL
10729: IFTRUE 10733
10731: GO 10740
10733: POP
// hHackSetLevel10YourUnits ; 4 :
10734: CALL 22071 0 0
10738: GO 10816
10740: LD_INT 4
10742: DOUBLE
10743: EQUAL
10744: IFTRUE 10748
10746: GO 10755
10748: POP
// hHackInvincible ; 5 :
10749: CALL 22519 0 0
10753: GO 10816
10755: LD_INT 5
10757: DOUBLE
10758: EQUAL
10759: IFTRUE 10763
10761: GO 10770
10763: POP
// hHackInvisible ; 6 :
10764: CALL 22630 0 0
10768: GO 10816
10770: LD_INT 6
10772: DOUBLE
10773: EQUAL
10774: IFTRUE 10778
10776: GO 10785
10778: POP
// hHackChangeYourSide ; 7 :
10779: CALL 22687 0 0
10783: GO 10816
10785: LD_INT 7
10787: DOUBLE
10788: EQUAL
10789: IFTRUE 10793
10791: GO 10800
10793: POP
// hHackChangeUnitSide ; 8 :
10794: CALL 22729 0 0
10798: GO 10816
10800: LD_INT 8
10802: DOUBLE
10803: EQUAL
10804: IFTRUE 10808
10806: GO 10815
10808: POP
// hHackFog ; end ;
10809: CALL 22830 0 0
10813: GO 10816
10815: POP
// end ; end ;
10816: LD_VAR 0 7
10820: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
10821: GO 10823
10823: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10824: LD_STRING initStreamRollete();
10826: PPUSH
10827: CALL_OW 559
// InitStreamMode ;
10831: CALL 10840 0 0
// DefineStreamItems ( ) ;
10835: CALL 11280 0 0
// end ;
10839: END
// function InitStreamMode ; begin
10840: LD_INT 0
10842: PPUSH
// streamModeActive := false ;
10843: LD_ADDR_EXP 43
10847: PUSH
10848: LD_INT 0
10850: ST_TO_ADDR
// normalCounter := 36 ;
10851: LD_ADDR_EXP 44
10855: PUSH
10856: LD_INT 36
10858: ST_TO_ADDR
// hardcoreCounter := 16 ;
10859: LD_ADDR_EXP 45
10863: PUSH
10864: LD_INT 16
10866: ST_TO_ADDR
// sRocket := false ;
10867: LD_ADDR_EXP 48
10871: PUSH
10872: LD_INT 0
10874: ST_TO_ADDR
// sSpeed := false ;
10875: LD_ADDR_EXP 47
10879: PUSH
10880: LD_INT 0
10882: ST_TO_ADDR
// sEngine := false ;
10883: LD_ADDR_EXP 49
10887: PUSH
10888: LD_INT 0
10890: ST_TO_ADDR
// sSpec := false ;
10891: LD_ADDR_EXP 46
10895: PUSH
10896: LD_INT 0
10898: ST_TO_ADDR
// sLevel := false ;
10899: LD_ADDR_EXP 50
10903: PUSH
10904: LD_INT 0
10906: ST_TO_ADDR
// sArmoury := false ;
10907: LD_ADDR_EXP 51
10911: PUSH
10912: LD_INT 0
10914: ST_TO_ADDR
// sRadar := false ;
10915: LD_ADDR_EXP 52
10919: PUSH
10920: LD_INT 0
10922: ST_TO_ADDR
// sBunker := false ;
10923: LD_ADDR_EXP 53
10927: PUSH
10928: LD_INT 0
10930: ST_TO_ADDR
// sHack := false ;
10931: LD_ADDR_EXP 54
10935: PUSH
10936: LD_INT 0
10938: ST_TO_ADDR
// sFire := false ;
10939: LD_ADDR_EXP 55
10943: PUSH
10944: LD_INT 0
10946: ST_TO_ADDR
// sRefresh := false ;
10947: LD_ADDR_EXP 56
10951: PUSH
10952: LD_INT 0
10954: ST_TO_ADDR
// sExp := false ;
10955: LD_ADDR_EXP 57
10959: PUSH
10960: LD_INT 0
10962: ST_TO_ADDR
// sDepot := false ;
10963: LD_ADDR_EXP 58
10967: PUSH
10968: LD_INT 0
10970: ST_TO_ADDR
// sFlag := false ;
10971: LD_ADDR_EXP 59
10975: PUSH
10976: LD_INT 0
10978: ST_TO_ADDR
// sKamikadze := false ;
10979: LD_ADDR_EXP 67
10983: PUSH
10984: LD_INT 0
10986: ST_TO_ADDR
// sTroll := false ;
10987: LD_ADDR_EXP 68
10991: PUSH
10992: LD_INT 0
10994: ST_TO_ADDR
// sSlow := false ;
10995: LD_ADDR_EXP 69
10999: PUSH
11000: LD_INT 0
11002: ST_TO_ADDR
// sLack := false ;
11003: LD_ADDR_EXP 70
11007: PUSH
11008: LD_INT 0
11010: ST_TO_ADDR
// sTank := false ;
11011: LD_ADDR_EXP 72
11015: PUSH
11016: LD_INT 0
11018: ST_TO_ADDR
// sRemote := false ;
11019: LD_ADDR_EXP 73
11023: PUSH
11024: LD_INT 0
11026: ST_TO_ADDR
// sPowell := false ;
11027: LD_ADDR_EXP 74
11031: PUSH
11032: LD_INT 0
11034: ST_TO_ADDR
// sTeleport := false ;
11035: LD_ADDR_EXP 77
11039: PUSH
11040: LD_INT 0
11042: ST_TO_ADDR
// sOilTower := false ;
11043: LD_ADDR_EXP 79
11047: PUSH
11048: LD_INT 0
11050: ST_TO_ADDR
// sShovel := false ;
11051: LD_ADDR_EXP 80
11055: PUSH
11056: LD_INT 0
11058: ST_TO_ADDR
// sSheik := false ;
11059: LD_ADDR_EXP 81
11063: PUSH
11064: LD_INT 0
11066: ST_TO_ADDR
// sEarthquake := false ;
11067: LD_ADDR_EXP 83
11071: PUSH
11072: LD_INT 0
11074: ST_TO_ADDR
// sAI := false ;
11075: LD_ADDR_EXP 84
11079: PUSH
11080: LD_INT 0
11082: ST_TO_ADDR
// sCargo := false ;
11083: LD_ADDR_EXP 87
11087: PUSH
11088: LD_INT 0
11090: ST_TO_ADDR
// sDLaser := false ;
11091: LD_ADDR_EXP 88
11095: PUSH
11096: LD_INT 0
11098: ST_TO_ADDR
// sExchange := false ;
11099: LD_ADDR_EXP 89
11103: PUSH
11104: LD_INT 0
11106: ST_TO_ADDR
// sFac := false ;
11107: LD_ADDR_EXP 90
11111: PUSH
11112: LD_INT 0
11114: ST_TO_ADDR
// sPower := false ;
11115: LD_ADDR_EXP 91
11119: PUSH
11120: LD_INT 0
11122: ST_TO_ADDR
// sRandom := false ;
11123: LD_ADDR_EXP 92
11127: PUSH
11128: LD_INT 0
11130: ST_TO_ADDR
// sShield := false ;
11131: LD_ADDR_EXP 93
11135: PUSH
11136: LD_INT 0
11138: ST_TO_ADDR
// sTime := false ;
11139: LD_ADDR_EXP 94
11143: PUSH
11144: LD_INT 0
11146: ST_TO_ADDR
// sTools := false ;
11147: LD_ADDR_EXP 95
11151: PUSH
11152: LD_INT 0
11154: ST_TO_ADDR
// sSold := false ;
11155: LD_ADDR_EXP 60
11159: PUSH
11160: LD_INT 0
11162: ST_TO_ADDR
// sDiff := false ;
11163: LD_ADDR_EXP 61
11167: PUSH
11168: LD_INT 0
11170: ST_TO_ADDR
// sFog := false ;
11171: LD_ADDR_EXP 64
11175: PUSH
11176: LD_INT 0
11178: ST_TO_ADDR
// sReset := false ;
11179: LD_ADDR_EXP 65
11183: PUSH
11184: LD_INT 0
11186: ST_TO_ADDR
// sSun := false ;
11187: LD_ADDR_EXP 66
11191: PUSH
11192: LD_INT 0
11194: ST_TO_ADDR
// sTiger := false ;
11195: LD_ADDR_EXP 62
11199: PUSH
11200: LD_INT 0
11202: ST_TO_ADDR
// sBomb := false ;
11203: LD_ADDR_EXP 63
11207: PUSH
11208: LD_INT 0
11210: ST_TO_ADDR
// sWound := false ;
11211: LD_ADDR_EXP 71
11215: PUSH
11216: LD_INT 0
11218: ST_TO_ADDR
// sBetray := false ;
11219: LD_ADDR_EXP 75
11223: PUSH
11224: LD_INT 0
11226: ST_TO_ADDR
// sContamin := false ;
11227: LD_ADDR_EXP 76
11231: PUSH
11232: LD_INT 0
11234: ST_TO_ADDR
// sOil := false ;
11235: LD_ADDR_EXP 78
11239: PUSH
11240: LD_INT 0
11242: ST_TO_ADDR
// sStu := false ;
11243: LD_ADDR_EXP 82
11247: PUSH
11248: LD_INT 0
11250: ST_TO_ADDR
// sBazooka := false ;
11251: LD_ADDR_EXP 85
11255: PUSH
11256: LD_INT 0
11258: ST_TO_ADDR
// sMortar := false ;
11259: LD_ADDR_EXP 86
11263: PUSH
11264: LD_INT 0
11266: ST_TO_ADDR
// sRanger := false ;
11267: LD_ADDR_EXP 96
11271: PUSH
11272: LD_INT 0
11274: ST_TO_ADDR
// end ;
11275: LD_VAR 0 1
11279: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11280: LD_INT 0
11282: PPUSH
11283: PPUSH
11284: PPUSH
11285: PPUSH
11286: PPUSH
// result := [ ] ;
11287: LD_ADDR_VAR 0 1
11291: PUSH
11292: EMPTY
11293: ST_TO_ADDR
// if campaign_id = 1 then
11294: LD_OWVAR 69
11298: PUSH
11299: LD_INT 1
11301: EQUAL
11302: IFFALSE 14240
// begin case mission_number of 1 :
11304: LD_OWVAR 70
11308: PUSH
11309: LD_INT 1
11311: DOUBLE
11312: EQUAL
11313: IFTRUE 11317
11315: GO 11381
11317: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11318: LD_ADDR_VAR 0 1
11322: PUSH
11323: LD_INT 2
11325: PUSH
11326: LD_INT 4
11328: PUSH
11329: LD_INT 11
11331: PUSH
11332: LD_INT 12
11334: PUSH
11335: LD_INT 15
11337: PUSH
11338: LD_INT 16
11340: PUSH
11341: LD_INT 22
11343: PUSH
11344: LD_INT 23
11346: PUSH
11347: LD_INT 26
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 101
11363: PUSH
11364: LD_INT 102
11366: PUSH
11367: LD_INT 106
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: ST_TO_ADDR
11379: GO 14238
11381: LD_INT 2
11383: DOUBLE
11384: EQUAL
11385: IFTRUE 11389
11387: GO 11461
11389: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11390: LD_ADDR_VAR 0 1
11394: PUSH
11395: LD_INT 2
11397: PUSH
11398: LD_INT 4
11400: PUSH
11401: LD_INT 11
11403: PUSH
11404: LD_INT 12
11406: PUSH
11407: LD_INT 15
11409: PUSH
11410: LD_INT 16
11412: PUSH
11413: LD_INT 22
11415: PUSH
11416: LD_INT 23
11418: PUSH
11419: LD_INT 26
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 101
11435: PUSH
11436: LD_INT 102
11438: PUSH
11439: LD_INT 105
11441: PUSH
11442: LD_INT 106
11444: PUSH
11445: LD_INT 108
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: ST_TO_ADDR
11459: GO 14238
11461: LD_INT 3
11463: DOUBLE
11464: EQUAL
11465: IFTRUE 11469
11467: GO 11545
11469: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11470: LD_ADDR_VAR 0 1
11474: PUSH
11475: LD_INT 2
11477: PUSH
11478: LD_INT 4
11480: PUSH
11481: LD_INT 5
11483: PUSH
11484: LD_INT 11
11486: PUSH
11487: LD_INT 12
11489: PUSH
11490: LD_INT 15
11492: PUSH
11493: LD_INT 16
11495: PUSH
11496: LD_INT 22
11498: PUSH
11499: LD_INT 26
11501: PUSH
11502: LD_INT 36
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: PUSH
11517: LD_INT 101
11519: PUSH
11520: LD_INT 102
11522: PUSH
11523: LD_INT 105
11525: PUSH
11526: LD_INT 106
11528: PUSH
11529: LD_INT 108
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: ST_TO_ADDR
11543: GO 14238
11545: LD_INT 4
11547: DOUBLE
11548: EQUAL
11549: IFTRUE 11553
11551: GO 11637
11553: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11554: LD_ADDR_VAR 0 1
11558: PUSH
11559: LD_INT 2
11561: PUSH
11562: LD_INT 4
11564: PUSH
11565: LD_INT 5
11567: PUSH
11568: LD_INT 8
11570: PUSH
11571: LD_INT 11
11573: PUSH
11574: LD_INT 12
11576: PUSH
11577: LD_INT 15
11579: PUSH
11580: LD_INT 16
11582: PUSH
11583: LD_INT 22
11585: PUSH
11586: LD_INT 23
11588: PUSH
11589: LD_INT 26
11591: PUSH
11592: LD_INT 36
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 101
11611: PUSH
11612: LD_INT 102
11614: PUSH
11615: LD_INT 105
11617: PUSH
11618: LD_INT 106
11620: PUSH
11621: LD_INT 108
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: ST_TO_ADDR
11635: GO 14238
11637: LD_INT 5
11639: DOUBLE
11640: EQUAL
11641: IFTRUE 11645
11643: GO 11745
11645: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
11646: LD_ADDR_VAR 0 1
11650: PUSH
11651: LD_INT 2
11653: PUSH
11654: LD_INT 4
11656: PUSH
11657: LD_INT 5
11659: PUSH
11660: LD_INT 6
11662: PUSH
11663: LD_INT 8
11665: PUSH
11666: LD_INT 11
11668: PUSH
11669: LD_INT 12
11671: PUSH
11672: LD_INT 15
11674: PUSH
11675: LD_INT 16
11677: PUSH
11678: LD_INT 22
11680: PUSH
11681: LD_INT 23
11683: PUSH
11684: LD_INT 25
11686: PUSH
11687: LD_INT 26
11689: PUSH
11690: LD_INT 36
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: PUSH
11709: LD_INT 101
11711: PUSH
11712: LD_INT 102
11714: PUSH
11715: LD_INT 105
11717: PUSH
11718: LD_INT 106
11720: PUSH
11721: LD_INT 108
11723: PUSH
11724: LD_INT 109
11726: PUSH
11727: LD_INT 112
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: ST_TO_ADDR
11743: GO 14238
11745: LD_INT 6
11747: DOUBLE
11748: EQUAL
11749: IFTRUE 11753
11751: GO 11873
11753: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
11754: LD_ADDR_VAR 0 1
11758: PUSH
11759: LD_INT 2
11761: PUSH
11762: LD_INT 4
11764: PUSH
11765: LD_INT 5
11767: PUSH
11768: LD_INT 6
11770: PUSH
11771: LD_INT 8
11773: PUSH
11774: LD_INT 11
11776: PUSH
11777: LD_INT 12
11779: PUSH
11780: LD_INT 15
11782: PUSH
11783: LD_INT 16
11785: PUSH
11786: LD_INT 20
11788: PUSH
11789: LD_INT 21
11791: PUSH
11792: LD_INT 22
11794: PUSH
11795: LD_INT 23
11797: PUSH
11798: LD_INT 25
11800: PUSH
11801: LD_INT 26
11803: PUSH
11804: LD_INT 30
11806: PUSH
11807: LD_INT 31
11809: PUSH
11810: LD_INT 32
11812: PUSH
11813: LD_INT 36
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 101
11839: PUSH
11840: LD_INT 102
11842: PUSH
11843: LD_INT 105
11845: PUSH
11846: LD_INT 106
11848: PUSH
11849: LD_INT 108
11851: PUSH
11852: LD_INT 109
11854: PUSH
11855: LD_INT 112
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: ST_TO_ADDR
11871: GO 14238
11873: LD_INT 7
11875: DOUBLE
11876: EQUAL
11877: IFTRUE 11881
11879: GO 11981
11881: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
11882: LD_ADDR_VAR 0 1
11886: PUSH
11887: LD_INT 2
11889: PUSH
11890: LD_INT 4
11892: PUSH
11893: LD_INT 5
11895: PUSH
11896: LD_INT 7
11898: PUSH
11899: LD_INT 11
11901: PUSH
11902: LD_INT 12
11904: PUSH
11905: LD_INT 15
11907: PUSH
11908: LD_INT 16
11910: PUSH
11911: LD_INT 20
11913: PUSH
11914: LD_INT 21
11916: PUSH
11917: LD_INT 22
11919: PUSH
11920: LD_INT 23
11922: PUSH
11923: LD_INT 25
11925: PUSH
11926: LD_INT 26
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 101
11947: PUSH
11948: LD_INT 102
11950: PUSH
11951: LD_INT 103
11953: PUSH
11954: LD_INT 105
11956: PUSH
11957: LD_INT 106
11959: PUSH
11960: LD_INT 108
11962: PUSH
11963: LD_INT 112
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: ST_TO_ADDR
11979: GO 14238
11981: LD_INT 8
11983: DOUBLE
11984: EQUAL
11985: IFTRUE 11989
11987: GO 12117
11989: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
11990: LD_ADDR_VAR 0 1
11994: PUSH
11995: LD_INT 2
11997: PUSH
11998: LD_INT 4
12000: PUSH
12001: LD_INT 5
12003: PUSH
12004: LD_INT 6
12006: PUSH
12007: LD_INT 7
12009: PUSH
12010: LD_INT 8
12012: PUSH
12013: LD_INT 11
12015: PUSH
12016: LD_INT 12
12018: PUSH
12019: LD_INT 15
12021: PUSH
12022: LD_INT 16
12024: PUSH
12025: LD_INT 20
12027: PUSH
12028: LD_INT 21
12030: PUSH
12031: LD_INT 22
12033: PUSH
12034: LD_INT 23
12036: PUSH
12037: LD_INT 25
12039: PUSH
12040: LD_INT 26
12042: PUSH
12043: LD_INT 30
12045: PUSH
12046: LD_INT 31
12048: PUSH
12049: LD_INT 32
12051: PUSH
12052: LD_INT 36
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: PUSH
12077: LD_INT 101
12079: PUSH
12080: LD_INT 102
12082: PUSH
12083: LD_INT 103
12085: PUSH
12086: LD_INT 105
12088: PUSH
12089: LD_INT 106
12091: PUSH
12092: LD_INT 108
12094: PUSH
12095: LD_INT 109
12097: PUSH
12098: LD_INT 112
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: ST_TO_ADDR
12115: GO 14238
12117: LD_INT 9
12119: DOUBLE
12120: EQUAL
12121: IFTRUE 12125
12123: GO 12261
12125: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12126: LD_ADDR_VAR 0 1
12130: PUSH
12131: LD_INT 2
12133: PUSH
12134: LD_INT 4
12136: PUSH
12137: LD_INT 5
12139: PUSH
12140: LD_INT 6
12142: PUSH
12143: LD_INT 7
12145: PUSH
12146: LD_INT 8
12148: PUSH
12149: LD_INT 11
12151: PUSH
12152: LD_INT 12
12154: PUSH
12155: LD_INT 15
12157: PUSH
12158: LD_INT 16
12160: PUSH
12161: LD_INT 20
12163: PUSH
12164: LD_INT 21
12166: PUSH
12167: LD_INT 22
12169: PUSH
12170: LD_INT 23
12172: PUSH
12173: LD_INT 25
12175: PUSH
12176: LD_INT 26
12178: PUSH
12179: LD_INT 28
12181: PUSH
12182: LD_INT 30
12184: PUSH
12185: LD_INT 31
12187: PUSH
12188: LD_INT 32
12190: PUSH
12191: LD_INT 36
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: PUSH
12217: LD_INT 101
12219: PUSH
12220: LD_INT 102
12222: PUSH
12223: LD_INT 103
12225: PUSH
12226: LD_INT 105
12228: PUSH
12229: LD_INT 106
12231: PUSH
12232: LD_INT 108
12234: PUSH
12235: LD_INT 109
12237: PUSH
12238: LD_INT 112
12240: PUSH
12241: LD_INT 114
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: ST_TO_ADDR
12259: GO 14238
12261: LD_INT 10
12263: DOUBLE
12264: EQUAL
12265: IFTRUE 12269
12267: GO 12453
12269: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12270: LD_ADDR_VAR 0 1
12274: PUSH
12275: LD_INT 2
12277: PUSH
12278: LD_INT 4
12280: PUSH
12281: LD_INT 5
12283: PUSH
12284: LD_INT 6
12286: PUSH
12287: LD_INT 7
12289: PUSH
12290: LD_INT 8
12292: PUSH
12293: LD_INT 9
12295: PUSH
12296: LD_INT 10
12298: PUSH
12299: LD_INT 11
12301: PUSH
12302: LD_INT 12
12304: PUSH
12305: LD_INT 13
12307: PUSH
12308: LD_INT 14
12310: PUSH
12311: LD_INT 15
12313: PUSH
12314: LD_INT 16
12316: PUSH
12317: LD_INT 17
12319: PUSH
12320: LD_INT 18
12322: PUSH
12323: LD_INT 19
12325: PUSH
12326: LD_INT 20
12328: PUSH
12329: LD_INT 21
12331: PUSH
12332: LD_INT 22
12334: PUSH
12335: LD_INT 23
12337: PUSH
12338: LD_INT 24
12340: PUSH
12341: LD_INT 25
12343: PUSH
12344: LD_INT 26
12346: PUSH
12347: LD_INT 28
12349: PUSH
12350: LD_INT 30
12352: PUSH
12353: LD_INT 31
12355: PUSH
12356: LD_INT 32
12358: PUSH
12359: LD_INT 36
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 101
12395: PUSH
12396: LD_INT 102
12398: PUSH
12399: LD_INT 103
12401: PUSH
12402: LD_INT 104
12404: PUSH
12405: LD_INT 105
12407: PUSH
12408: LD_INT 106
12410: PUSH
12411: LD_INT 107
12413: PUSH
12414: LD_INT 108
12416: PUSH
12417: LD_INT 109
12419: PUSH
12420: LD_INT 110
12422: PUSH
12423: LD_INT 111
12425: PUSH
12426: LD_INT 112
12428: PUSH
12429: LD_INT 114
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: ST_TO_ADDR
12451: GO 14238
12453: LD_INT 11
12455: DOUBLE
12456: EQUAL
12457: IFTRUE 12461
12459: GO 12653
12461: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12462: LD_ADDR_VAR 0 1
12466: PUSH
12467: LD_INT 2
12469: PUSH
12470: LD_INT 3
12472: PUSH
12473: LD_INT 4
12475: PUSH
12476: LD_INT 5
12478: PUSH
12479: LD_INT 6
12481: PUSH
12482: LD_INT 7
12484: PUSH
12485: LD_INT 8
12487: PUSH
12488: LD_INT 9
12490: PUSH
12491: LD_INT 10
12493: PUSH
12494: LD_INT 11
12496: PUSH
12497: LD_INT 12
12499: PUSH
12500: LD_INT 13
12502: PUSH
12503: LD_INT 14
12505: PUSH
12506: LD_INT 15
12508: PUSH
12509: LD_INT 16
12511: PUSH
12512: LD_INT 17
12514: PUSH
12515: LD_INT 18
12517: PUSH
12518: LD_INT 19
12520: PUSH
12521: LD_INT 20
12523: PUSH
12524: LD_INT 21
12526: PUSH
12527: LD_INT 22
12529: PUSH
12530: LD_INT 23
12532: PUSH
12533: LD_INT 24
12535: PUSH
12536: LD_INT 25
12538: PUSH
12539: LD_INT 26
12541: PUSH
12542: LD_INT 28
12544: PUSH
12545: LD_INT 30
12547: PUSH
12548: LD_INT 31
12550: PUSH
12551: LD_INT 32
12553: PUSH
12554: LD_INT 34
12556: PUSH
12557: LD_INT 36
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: PUSH
12593: LD_INT 101
12595: PUSH
12596: LD_INT 102
12598: PUSH
12599: LD_INT 103
12601: PUSH
12602: LD_INT 104
12604: PUSH
12605: LD_INT 105
12607: PUSH
12608: LD_INT 106
12610: PUSH
12611: LD_INT 107
12613: PUSH
12614: LD_INT 108
12616: PUSH
12617: LD_INT 109
12619: PUSH
12620: LD_INT 110
12622: PUSH
12623: LD_INT 111
12625: PUSH
12626: LD_INT 112
12628: PUSH
12629: LD_INT 114
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: ST_TO_ADDR
12651: GO 14238
12653: LD_INT 12
12655: DOUBLE
12656: EQUAL
12657: IFTRUE 12661
12659: GO 12869
12661: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
12662: LD_ADDR_VAR 0 1
12666: PUSH
12667: LD_INT 1
12669: PUSH
12670: LD_INT 2
12672: PUSH
12673: LD_INT 3
12675: PUSH
12676: LD_INT 4
12678: PUSH
12679: LD_INT 5
12681: PUSH
12682: LD_INT 6
12684: PUSH
12685: LD_INT 7
12687: PUSH
12688: LD_INT 8
12690: PUSH
12691: LD_INT 9
12693: PUSH
12694: LD_INT 10
12696: PUSH
12697: LD_INT 11
12699: PUSH
12700: LD_INT 12
12702: PUSH
12703: LD_INT 13
12705: PUSH
12706: LD_INT 14
12708: PUSH
12709: LD_INT 15
12711: PUSH
12712: LD_INT 16
12714: PUSH
12715: LD_INT 17
12717: PUSH
12718: LD_INT 18
12720: PUSH
12721: LD_INT 19
12723: PUSH
12724: LD_INT 20
12726: PUSH
12727: LD_INT 21
12729: PUSH
12730: LD_INT 22
12732: PUSH
12733: LD_INT 23
12735: PUSH
12736: LD_INT 24
12738: PUSH
12739: LD_INT 25
12741: PUSH
12742: LD_INT 26
12744: PUSH
12745: LD_INT 27
12747: PUSH
12748: LD_INT 28
12750: PUSH
12751: LD_INT 30
12753: PUSH
12754: LD_INT 31
12756: PUSH
12757: LD_INT 32
12759: PUSH
12760: LD_INT 33
12762: PUSH
12763: LD_INT 34
12765: PUSH
12766: LD_INT 36
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: PUSH
12805: LD_INT 101
12807: PUSH
12808: LD_INT 102
12810: PUSH
12811: LD_INT 103
12813: PUSH
12814: LD_INT 104
12816: PUSH
12817: LD_INT 105
12819: PUSH
12820: LD_INT 106
12822: PUSH
12823: LD_INT 107
12825: PUSH
12826: LD_INT 108
12828: PUSH
12829: LD_INT 109
12831: PUSH
12832: LD_INT 110
12834: PUSH
12835: LD_INT 111
12837: PUSH
12838: LD_INT 112
12840: PUSH
12841: LD_INT 113
12843: PUSH
12844: LD_INT 114
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: ST_TO_ADDR
12867: GO 14238
12869: LD_INT 13
12871: DOUBLE
12872: EQUAL
12873: IFTRUE 12877
12875: GO 13073
12877: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
12878: LD_ADDR_VAR 0 1
12882: PUSH
12883: LD_INT 1
12885: PUSH
12886: LD_INT 2
12888: PUSH
12889: LD_INT 3
12891: PUSH
12892: LD_INT 4
12894: PUSH
12895: LD_INT 5
12897: PUSH
12898: LD_INT 8
12900: PUSH
12901: LD_INT 9
12903: PUSH
12904: LD_INT 10
12906: PUSH
12907: LD_INT 11
12909: PUSH
12910: LD_INT 12
12912: PUSH
12913: LD_INT 14
12915: PUSH
12916: LD_INT 15
12918: PUSH
12919: LD_INT 16
12921: PUSH
12922: LD_INT 17
12924: PUSH
12925: LD_INT 18
12927: PUSH
12928: LD_INT 19
12930: PUSH
12931: LD_INT 20
12933: PUSH
12934: LD_INT 21
12936: PUSH
12937: LD_INT 22
12939: PUSH
12940: LD_INT 23
12942: PUSH
12943: LD_INT 24
12945: PUSH
12946: LD_INT 25
12948: PUSH
12949: LD_INT 26
12951: PUSH
12952: LD_INT 27
12954: PUSH
12955: LD_INT 28
12957: PUSH
12958: LD_INT 30
12960: PUSH
12961: LD_INT 31
12963: PUSH
12964: LD_INT 32
12966: PUSH
12967: LD_INT 33
12969: PUSH
12970: LD_INT 34
12972: PUSH
12973: LD_INT 36
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: PUSH
13009: LD_INT 101
13011: PUSH
13012: LD_INT 102
13014: PUSH
13015: LD_INT 103
13017: PUSH
13018: LD_INT 104
13020: PUSH
13021: LD_INT 105
13023: PUSH
13024: LD_INT 106
13026: PUSH
13027: LD_INT 107
13029: PUSH
13030: LD_INT 108
13032: PUSH
13033: LD_INT 109
13035: PUSH
13036: LD_INT 110
13038: PUSH
13039: LD_INT 111
13041: PUSH
13042: LD_INT 112
13044: PUSH
13045: LD_INT 113
13047: PUSH
13048: LD_INT 114
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: ST_TO_ADDR
13071: GO 14238
13073: LD_INT 14
13075: DOUBLE
13076: EQUAL
13077: IFTRUE 13081
13079: GO 13293
13081: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13082: LD_ADDR_VAR 0 1
13086: PUSH
13087: LD_INT 1
13089: PUSH
13090: LD_INT 2
13092: PUSH
13093: LD_INT 3
13095: PUSH
13096: LD_INT 4
13098: PUSH
13099: LD_INT 5
13101: PUSH
13102: LD_INT 6
13104: PUSH
13105: LD_INT 7
13107: PUSH
13108: LD_INT 8
13110: PUSH
13111: LD_INT 9
13113: PUSH
13114: LD_INT 10
13116: PUSH
13117: LD_INT 11
13119: PUSH
13120: LD_INT 12
13122: PUSH
13123: LD_INT 13
13125: PUSH
13126: LD_INT 14
13128: PUSH
13129: LD_INT 15
13131: PUSH
13132: LD_INT 16
13134: PUSH
13135: LD_INT 17
13137: PUSH
13138: LD_INT 18
13140: PUSH
13141: LD_INT 19
13143: PUSH
13144: LD_INT 20
13146: PUSH
13147: LD_INT 21
13149: PUSH
13150: LD_INT 22
13152: PUSH
13153: LD_INT 23
13155: PUSH
13156: LD_INT 24
13158: PUSH
13159: LD_INT 25
13161: PUSH
13162: LD_INT 26
13164: PUSH
13165: LD_INT 27
13167: PUSH
13168: LD_INT 28
13170: PUSH
13171: LD_INT 29
13173: PUSH
13174: LD_INT 30
13176: PUSH
13177: LD_INT 31
13179: PUSH
13180: LD_INT 32
13182: PUSH
13183: LD_INT 33
13185: PUSH
13186: LD_INT 34
13188: PUSH
13189: LD_INT 36
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: PUSH
13229: LD_INT 101
13231: PUSH
13232: LD_INT 102
13234: PUSH
13235: LD_INT 103
13237: PUSH
13238: LD_INT 104
13240: PUSH
13241: LD_INT 105
13243: PUSH
13244: LD_INT 106
13246: PUSH
13247: LD_INT 107
13249: PUSH
13250: LD_INT 108
13252: PUSH
13253: LD_INT 109
13255: PUSH
13256: LD_INT 110
13258: PUSH
13259: LD_INT 111
13261: PUSH
13262: LD_INT 112
13264: PUSH
13265: LD_INT 113
13267: PUSH
13268: LD_INT 114
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: ST_TO_ADDR
13291: GO 14238
13293: LD_INT 15
13295: DOUBLE
13296: EQUAL
13297: IFTRUE 13301
13299: GO 13513
13301: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13302: LD_ADDR_VAR 0 1
13306: PUSH
13307: LD_INT 1
13309: PUSH
13310: LD_INT 2
13312: PUSH
13313: LD_INT 3
13315: PUSH
13316: LD_INT 4
13318: PUSH
13319: LD_INT 5
13321: PUSH
13322: LD_INT 6
13324: PUSH
13325: LD_INT 7
13327: PUSH
13328: LD_INT 8
13330: PUSH
13331: LD_INT 9
13333: PUSH
13334: LD_INT 10
13336: PUSH
13337: LD_INT 11
13339: PUSH
13340: LD_INT 12
13342: PUSH
13343: LD_INT 13
13345: PUSH
13346: LD_INT 14
13348: PUSH
13349: LD_INT 15
13351: PUSH
13352: LD_INT 16
13354: PUSH
13355: LD_INT 17
13357: PUSH
13358: LD_INT 18
13360: PUSH
13361: LD_INT 19
13363: PUSH
13364: LD_INT 20
13366: PUSH
13367: LD_INT 21
13369: PUSH
13370: LD_INT 22
13372: PUSH
13373: LD_INT 23
13375: PUSH
13376: LD_INT 24
13378: PUSH
13379: LD_INT 25
13381: PUSH
13382: LD_INT 26
13384: PUSH
13385: LD_INT 27
13387: PUSH
13388: LD_INT 28
13390: PUSH
13391: LD_INT 29
13393: PUSH
13394: LD_INT 30
13396: PUSH
13397: LD_INT 31
13399: PUSH
13400: LD_INT 32
13402: PUSH
13403: LD_INT 33
13405: PUSH
13406: LD_INT 34
13408: PUSH
13409: LD_INT 36
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 101
13451: PUSH
13452: LD_INT 102
13454: PUSH
13455: LD_INT 103
13457: PUSH
13458: LD_INT 104
13460: PUSH
13461: LD_INT 105
13463: PUSH
13464: LD_INT 106
13466: PUSH
13467: LD_INT 107
13469: PUSH
13470: LD_INT 108
13472: PUSH
13473: LD_INT 109
13475: PUSH
13476: LD_INT 110
13478: PUSH
13479: LD_INT 111
13481: PUSH
13482: LD_INT 112
13484: PUSH
13485: LD_INT 113
13487: PUSH
13488: LD_INT 114
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: ST_TO_ADDR
13511: GO 14238
13513: LD_INT 16
13515: DOUBLE
13516: EQUAL
13517: IFTRUE 13521
13519: GO 13645
13521: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13522: LD_ADDR_VAR 0 1
13526: PUSH
13527: LD_INT 2
13529: PUSH
13530: LD_INT 4
13532: PUSH
13533: LD_INT 5
13535: PUSH
13536: LD_INT 7
13538: PUSH
13539: LD_INT 11
13541: PUSH
13542: LD_INT 12
13544: PUSH
13545: LD_INT 15
13547: PUSH
13548: LD_INT 16
13550: PUSH
13551: LD_INT 20
13553: PUSH
13554: LD_INT 21
13556: PUSH
13557: LD_INT 22
13559: PUSH
13560: LD_INT 23
13562: PUSH
13563: LD_INT 25
13565: PUSH
13566: LD_INT 26
13568: PUSH
13569: LD_INT 30
13571: PUSH
13572: LD_INT 31
13574: PUSH
13575: LD_INT 32
13577: PUSH
13578: LD_INT 33
13580: PUSH
13581: LD_INT 34
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: PUSH
13605: LD_INT 101
13607: PUSH
13608: LD_INT 102
13610: PUSH
13611: LD_INT 103
13613: PUSH
13614: LD_INT 106
13616: PUSH
13617: LD_INT 108
13619: PUSH
13620: LD_INT 112
13622: PUSH
13623: LD_INT 113
13625: PUSH
13626: LD_INT 114
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: ST_TO_ADDR
13643: GO 14238
13645: LD_INT 17
13647: DOUBLE
13648: EQUAL
13649: IFTRUE 13653
13651: GO 13865
13653: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
13654: LD_ADDR_VAR 0 1
13658: PUSH
13659: LD_INT 1
13661: PUSH
13662: LD_INT 2
13664: PUSH
13665: LD_INT 3
13667: PUSH
13668: LD_INT 4
13670: PUSH
13671: LD_INT 5
13673: PUSH
13674: LD_INT 6
13676: PUSH
13677: LD_INT 7
13679: PUSH
13680: LD_INT 8
13682: PUSH
13683: LD_INT 9
13685: PUSH
13686: LD_INT 10
13688: PUSH
13689: LD_INT 11
13691: PUSH
13692: LD_INT 12
13694: PUSH
13695: LD_INT 13
13697: PUSH
13698: LD_INT 14
13700: PUSH
13701: LD_INT 15
13703: PUSH
13704: LD_INT 16
13706: PUSH
13707: LD_INT 17
13709: PUSH
13710: LD_INT 18
13712: PUSH
13713: LD_INT 19
13715: PUSH
13716: LD_INT 20
13718: PUSH
13719: LD_INT 21
13721: PUSH
13722: LD_INT 22
13724: PUSH
13725: LD_INT 23
13727: PUSH
13728: LD_INT 24
13730: PUSH
13731: LD_INT 25
13733: PUSH
13734: LD_INT 26
13736: PUSH
13737: LD_INT 27
13739: PUSH
13740: LD_INT 28
13742: PUSH
13743: LD_INT 29
13745: PUSH
13746: LD_INT 30
13748: PUSH
13749: LD_INT 31
13751: PUSH
13752: LD_INT 32
13754: PUSH
13755: LD_INT 33
13757: PUSH
13758: LD_INT 34
13760: PUSH
13761: LD_INT 36
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 101
13803: PUSH
13804: LD_INT 102
13806: PUSH
13807: LD_INT 103
13809: PUSH
13810: LD_INT 104
13812: PUSH
13813: LD_INT 105
13815: PUSH
13816: LD_INT 106
13818: PUSH
13819: LD_INT 107
13821: PUSH
13822: LD_INT 108
13824: PUSH
13825: LD_INT 109
13827: PUSH
13828: LD_INT 110
13830: PUSH
13831: LD_INT 111
13833: PUSH
13834: LD_INT 112
13836: PUSH
13837: LD_INT 113
13839: PUSH
13840: LD_INT 114
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: ST_TO_ADDR
13863: GO 14238
13865: LD_INT 18
13867: DOUBLE
13868: EQUAL
13869: IFTRUE 13873
13871: GO 14009
13873: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
13874: LD_ADDR_VAR 0 1
13878: PUSH
13879: LD_INT 2
13881: PUSH
13882: LD_INT 4
13884: PUSH
13885: LD_INT 5
13887: PUSH
13888: LD_INT 7
13890: PUSH
13891: LD_INT 11
13893: PUSH
13894: LD_INT 12
13896: PUSH
13897: LD_INT 15
13899: PUSH
13900: LD_INT 16
13902: PUSH
13903: LD_INT 20
13905: PUSH
13906: LD_INT 21
13908: PUSH
13909: LD_INT 22
13911: PUSH
13912: LD_INT 23
13914: PUSH
13915: LD_INT 25
13917: PUSH
13918: LD_INT 26
13920: PUSH
13921: LD_INT 30
13923: PUSH
13924: LD_INT 31
13926: PUSH
13927: LD_INT 32
13929: PUSH
13930: LD_INT 33
13932: PUSH
13933: LD_INT 34
13935: PUSH
13936: LD_INT 35
13938: PUSH
13939: LD_INT 36
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: PUSH
13965: LD_INT 101
13967: PUSH
13968: LD_INT 102
13970: PUSH
13971: LD_INT 103
13973: PUSH
13974: LD_INT 106
13976: PUSH
13977: LD_INT 108
13979: PUSH
13980: LD_INT 112
13982: PUSH
13983: LD_INT 113
13985: PUSH
13986: LD_INT 114
13988: PUSH
13989: LD_INT 115
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: ST_TO_ADDR
14007: GO 14238
14009: LD_INT 19
14011: DOUBLE
14012: EQUAL
14013: IFTRUE 14017
14015: GO 14237
14017: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14018: LD_ADDR_VAR 0 1
14022: PUSH
14023: LD_INT 1
14025: PUSH
14026: LD_INT 2
14028: PUSH
14029: LD_INT 3
14031: PUSH
14032: LD_INT 4
14034: PUSH
14035: LD_INT 5
14037: PUSH
14038: LD_INT 6
14040: PUSH
14041: LD_INT 7
14043: PUSH
14044: LD_INT 8
14046: PUSH
14047: LD_INT 9
14049: PUSH
14050: LD_INT 10
14052: PUSH
14053: LD_INT 11
14055: PUSH
14056: LD_INT 12
14058: PUSH
14059: LD_INT 13
14061: PUSH
14062: LD_INT 14
14064: PUSH
14065: LD_INT 15
14067: PUSH
14068: LD_INT 16
14070: PUSH
14071: LD_INT 17
14073: PUSH
14074: LD_INT 18
14076: PUSH
14077: LD_INT 19
14079: PUSH
14080: LD_INT 20
14082: PUSH
14083: LD_INT 21
14085: PUSH
14086: LD_INT 22
14088: PUSH
14089: LD_INT 23
14091: PUSH
14092: LD_INT 24
14094: PUSH
14095: LD_INT 25
14097: PUSH
14098: LD_INT 26
14100: PUSH
14101: LD_INT 27
14103: PUSH
14104: LD_INT 28
14106: PUSH
14107: LD_INT 29
14109: PUSH
14110: LD_INT 30
14112: PUSH
14113: LD_INT 31
14115: PUSH
14116: LD_INT 32
14118: PUSH
14119: LD_INT 33
14121: PUSH
14122: LD_INT 34
14124: PUSH
14125: LD_INT 35
14127: PUSH
14128: LD_INT 36
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 101
14171: PUSH
14172: LD_INT 102
14174: PUSH
14175: LD_INT 103
14177: PUSH
14178: LD_INT 104
14180: PUSH
14181: LD_INT 105
14183: PUSH
14184: LD_INT 106
14186: PUSH
14187: LD_INT 107
14189: PUSH
14190: LD_INT 108
14192: PUSH
14193: LD_INT 109
14195: PUSH
14196: LD_INT 110
14198: PUSH
14199: LD_INT 111
14201: PUSH
14202: LD_INT 112
14204: PUSH
14205: LD_INT 113
14207: PUSH
14208: LD_INT 114
14210: PUSH
14211: LD_INT 115
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: ST_TO_ADDR
14235: GO 14238
14237: POP
// end else
14238: GO 14457
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14240: LD_ADDR_VAR 0 1
14244: PUSH
14245: LD_INT 1
14247: PUSH
14248: LD_INT 2
14250: PUSH
14251: LD_INT 3
14253: PUSH
14254: LD_INT 4
14256: PUSH
14257: LD_INT 5
14259: PUSH
14260: LD_INT 6
14262: PUSH
14263: LD_INT 7
14265: PUSH
14266: LD_INT 8
14268: PUSH
14269: LD_INT 9
14271: PUSH
14272: LD_INT 10
14274: PUSH
14275: LD_INT 11
14277: PUSH
14278: LD_INT 12
14280: PUSH
14281: LD_INT 13
14283: PUSH
14284: LD_INT 14
14286: PUSH
14287: LD_INT 15
14289: PUSH
14290: LD_INT 16
14292: PUSH
14293: LD_INT 17
14295: PUSH
14296: LD_INT 18
14298: PUSH
14299: LD_INT 19
14301: PUSH
14302: LD_INT 20
14304: PUSH
14305: LD_INT 21
14307: PUSH
14308: LD_INT 22
14310: PUSH
14311: LD_INT 23
14313: PUSH
14314: LD_INT 24
14316: PUSH
14317: LD_INT 25
14319: PUSH
14320: LD_INT 26
14322: PUSH
14323: LD_INT 27
14325: PUSH
14326: LD_INT 28
14328: PUSH
14329: LD_INT 29
14331: PUSH
14332: LD_INT 30
14334: PUSH
14335: LD_INT 31
14337: PUSH
14338: LD_INT 32
14340: PUSH
14341: LD_INT 33
14343: PUSH
14344: LD_INT 34
14346: PUSH
14347: LD_INT 35
14349: PUSH
14350: LD_INT 36
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: PUSH
14391: LD_INT 101
14393: PUSH
14394: LD_INT 102
14396: PUSH
14397: LD_INT 103
14399: PUSH
14400: LD_INT 104
14402: PUSH
14403: LD_INT 105
14405: PUSH
14406: LD_INT 106
14408: PUSH
14409: LD_INT 107
14411: PUSH
14412: LD_INT 108
14414: PUSH
14415: LD_INT 109
14417: PUSH
14418: LD_INT 110
14420: PUSH
14421: LD_INT 111
14423: PUSH
14424: LD_INT 112
14426: PUSH
14427: LD_INT 113
14429: PUSH
14430: LD_INT 114
14432: PUSH
14433: LD_INT 115
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: ST_TO_ADDR
// if result then
14457: LD_VAR 0 1
14461: IFFALSE 14750
// begin normal :=  ;
14463: LD_ADDR_VAR 0 3
14467: PUSH
14468: LD_STRING 
14470: ST_TO_ADDR
// hardcore :=  ;
14471: LD_ADDR_VAR 0 4
14475: PUSH
14476: LD_STRING 
14478: ST_TO_ADDR
// for i = 1 to normalCounter do
14479: LD_ADDR_VAR 0 5
14483: PUSH
14484: DOUBLE
14485: LD_INT 1
14487: DEC
14488: ST_TO_ADDR
14489: LD_EXP 44
14493: PUSH
14494: FOR_TO
14495: IFFALSE 14596
// begin tmp := 0 ;
14497: LD_ADDR_VAR 0 2
14501: PUSH
14502: LD_STRING 0
14504: ST_TO_ADDR
// if result [ 1 ] then
14505: LD_VAR 0 1
14509: PUSH
14510: LD_INT 1
14512: ARRAY
14513: IFFALSE 14578
// if result [ 1 ] [ 1 ] = i then
14515: LD_VAR 0 1
14519: PUSH
14520: LD_INT 1
14522: ARRAY
14523: PUSH
14524: LD_INT 1
14526: ARRAY
14527: PUSH
14528: LD_VAR 0 5
14532: EQUAL
14533: IFFALSE 14578
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14535: LD_ADDR_VAR 0 1
14539: PUSH
14540: LD_VAR 0 1
14544: PPUSH
14545: LD_INT 1
14547: PPUSH
14548: LD_VAR 0 1
14552: PUSH
14553: LD_INT 1
14555: ARRAY
14556: PPUSH
14557: LD_INT 1
14559: PPUSH
14560: CALL_OW 3
14564: PPUSH
14565: CALL_OW 1
14569: ST_TO_ADDR
// tmp := 1 ;
14570: LD_ADDR_VAR 0 2
14574: PUSH
14575: LD_STRING 1
14577: ST_TO_ADDR
// end ; normal := normal & tmp ;
14578: LD_ADDR_VAR 0 3
14582: PUSH
14583: LD_VAR 0 3
14587: PUSH
14588: LD_VAR 0 2
14592: STR
14593: ST_TO_ADDR
// end ;
14594: GO 14494
14596: POP
14597: POP
// for i = 1 to hardcoreCounter do
14598: LD_ADDR_VAR 0 5
14602: PUSH
14603: DOUBLE
14604: LD_INT 1
14606: DEC
14607: ST_TO_ADDR
14608: LD_EXP 45
14612: PUSH
14613: FOR_TO
14614: IFFALSE 14719
// begin tmp := 0 ;
14616: LD_ADDR_VAR 0 2
14620: PUSH
14621: LD_STRING 0
14623: ST_TO_ADDR
// if result [ 2 ] then
14624: LD_VAR 0 1
14628: PUSH
14629: LD_INT 2
14631: ARRAY
14632: IFFALSE 14701
// if result [ 2 ] [ 1 ] = 100 + i then
14634: LD_VAR 0 1
14638: PUSH
14639: LD_INT 2
14641: ARRAY
14642: PUSH
14643: LD_INT 1
14645: ARRAY
14646: PUSH
14647: LD_INT 100
14649: PUSH
14650: LD_VAR 0 5
14654: PLUS
14655: EQUAL
14656: IFFALSE 14701
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14658: LD_ADDR_VAR 0 1
14662: PUSH
14663: LD_VAR 0 1
14667: PPUSH
14668: LD_INT 2
14670: PPUSH
14671: LD_VAR 0 1
14675: PUSH
14676: LD_INT 2
14678: ARRAY
14679: PPUSH
14680: LD_INT 1
14682: PPUSH
14683: CALL_OW 3
14687: PPUSH
14688: CALL_OW 1
14692: ST_TO_ADDR
// tmp := 1 ;
14693: LD_ADDR_VAR 0 2
14697: PUSH
14698: LD_STRING 1
14700: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14701: LD_ADDR_VAR 0 4
14705: PUSH
14706: LD_VAR 0 4
14710: PUSH
14711: LD_VAR 0 2
14715: STR
14716: ST_TO_ADDR
// end ;
14717: GO 14613
14719: POP
14720: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
14721: LD_STRING getStreamItemsFromMission("
14723: PUSH
14724: LD_VAR 0 3
14728: STR
14729: PUSH
14730: LD_STRING ","
14732: STR
14733: PUSH
14734: LD_VAR 0 4
14738: STR
14739: PUSH
14740: LD_STRING ")
14742: STR
14743: PPUSH
14744: CALL_OW 559
// end else
14748: GO 14757
// ToLua ( getStreamItemsFromMission("","") ) ;
14750: LD_STRING getStreamItemsFromMission("","")
14752: PPUSH
14753: CALL_OW 559
// end ;
14757: LD_VAR 0 1
14761: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14762: LD_EXP 43
14766: PUSH
14767: LD_EXP 48
14771: AND
14772: IFFALSE 14896
14774: GO 14776
14776: DISABLE
14777: LD_INT 0
14779: PPUSH
14780: PPUSH
// begin enable ;
14781: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14782: LD_ADDR_VAR 0 2
14786: PUSH
14787: LD_INT 22
14789: PUSH
14790: LD_OWVAR 2
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 2
14801: PUSH
14802: LD_INT 34
14804: PUSH
14805: LD_INT 7
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 34
14814: PUSH
14815: LD_INT 45
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 34
14824: PUSH
14825: LD_INT 28
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 34
14834: PUSH
14835: LD_INT 47
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PPUSH
14853: CALL_OW 69
14857: ST_TO_ADDR
// if not tmp then
14858: LD_VAR 0 2
14862: NOT
14863: IFFALSE 14867
// exit ;
14865: GO 14896
// for i in tmp do
14867: LD_ADDR_VAR 0 1
14871: PUSH
14872: LD_VAR 0 2
14876: PUSH
14877: FOR_IN
14878: IFFALSE 14894
// begin SetLives ( i , 0 ) ;
14880: LD_VAR 0 1
14884: PPUSH
14885: LD_INT 0
14887: PPUSH
14888: CALL_OW 234
// end ;
14892: GO 14877
14894: POP
14895: POP
// end ;
14896: PPOPN 2
14898: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14899: LD_EXP 43
14903: PUSH
14904: LD_EXP 49
14908: AND
14909: IFFALSE 14993
14911: GO 14913
14913: DISABLE
14914: LD_INT 0
14916: PPUSH
14917: PPUSH
// begin enable ;
14918: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14919: LD_ADDR_VAR 0 2
14923: PUSH
14924: LD_INT 22
14926: PUSH
14927: LD_OWVAR 2
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: LD_INT 32
14938: PUSH
14939: LD_INT 3
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PPUSH
14950: CALL_OW 69
14954: ST_TO_ADDR
// if not tmp then
14955: LD_VAR 0 2
14959: NOT
14960: IFFALSE 14964
// exit ;
14962: GO 14993
// for i in tmp do
14964: LD_ADDR_VAR 0 1
14968: PUSH
14969: LD_VAR 0 2
14973: PUSH
14974: FOR_IN
14975: IFFALSE 14991
// begin SetLives ( i , 0 ) ;
14977: LD_VAR 0 1
14981: PPUSH
14982: LD_INT 0
14984: PPUSH
14985: CALL_OW 234
// end ;
14989: GO 14974
14991: POP
14992: POP
// end ;
14993: PPOPN 2
14995: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14996: LD_EXP 43
15000: PUSH
15001: LD_EXP 46
15005: AND
15006: IFFALSE 15099
15008: GO 15010
15010: DISABLE
15011: LD_INT 0
15013: PPUSH
// begin enable ;
15014: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15015: LD_ADDR_VAR 0 1
15019: PUSH
15020: LD_INT 22
15022: PUSH
15023: LD_OWVAR 2
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 2
15034: PUSH
15035: LD_INT 25
15037: PUSH
15038: LD_INT 5
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PUSH
15045: LD_INT 25
15047: PUSH
15048: LD_INT 9
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 25
15057: PUSH
15058: LD_INT 8
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PPUSH
15075: CALL_OW 69
15079: PUSH
15080: FOR_IN
15081: IFFALSE 15097
// begin SetClass ( i , 1 ) ;
15083: LD_VAR 0 1
15087: PPUSH
15088: LD_INT 1
15090: PPUSH
15091: CALL_OW 336
// end ;
15095: GO 15080
15097: POP
15098: POP
// end ;
15099: PPOPN 1
15101: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15102: LD_EXP 43
15106: PUSH
15107: LD_EXP 47
15111: AND
15112: PUSH
15113: LD_OWVAR 65
15117: PUSH
15118: LD_INT 7
15120: LESS
15121: AND
15122: IFFALSE 15136
15124: GO 15126
15126: DISABLE
// begin enable ;
15127: ENABLE
// game_speed := 7 ;
15128: LD_ADDR_OWVAR 65
15132: PUSH
15133: LD_INT 7
15135: ST_TO_ADDR
// end ;
15136: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15137: LD_EXP 43
15141: PUSH
15142: LD_EXP 50
15146: AND
15147: IFFALSE 15349
15149: GO 15151
15151: DISABLE
15152: LD_INT 0
15154: PPUSH
15155: PPUSH
15156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15157: LD_ADDR_VAR 0 3
15161: PUSH
15162: LD_INT 81
15164: PUSH
15165: LD_OWVAR 2
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 21
15176: PUSH
15177: LD_INT 1
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PPUSH
15188: CALL_OW 69
15192: ST_TO_ADDR
// if not tmp then
15193: LD_VAR 0 3
15197: NOT
15198: IFFALSE 15202
// exit ;
15200: GO 15349
// if tmp > 5 then
15202: LD_VAR 0 3
15206: PUSH
15207: LD_INT 5
15209: GREATER
15210: IFFALSE 15222
// k := 5 else
15212: LD_ADDR_VAR 0 2
15216: PUSH
15217: LD_INT 5
15219: ST_TO_ADDR
15220: GO 15232
// k := tmp ;
15222: LD_ADDR_VAR 0 2
15226: PUSH
15227: LD_VAR 0 3
15231: ST_TO_ADDR
// for i := 1 to k do
15232: LD_ADDR_VAR 0 1
15236: PUSH
15237: DOUBLE
15238: LD_INT 1
15240: DEC
15241: ST_TO_ADDR
15242: LD_VAR 0 2
15246: PUSH
15247: FOR_TO
15248: IFFALSE 15347
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15250: LD_VAR 0 3
15254: PUSH
15255: LD_VAR 0 1
15259: ARRAY
15260: PPUSH
15261: LD_VAR 0 1
15265: PUSH
15266: LD_INT 4
15268: MOD
15269: PUSH
15270: LD_INT 1
15272: PLUS
15273: PPUSH
15274: CALL_OW 259
15278: PUSH
15279: LD_INT 10
15281: LESS
15282: IFFALSE 15345
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15284: LD_VAR 0 3
15288: PUSH
15289: LD_VAR 0 1
15293: ARRAY
15294: PPUSH
15295: LD_VAR 0 1
15299: PUSH
15300: LD_INT 4
15302: MOD
15303: PUSH
15304: LD_INT 1
15306: PLUS
15307: PPUSH
15308: LD_VAR 0 3
15312: PUSH
15313: LD_VAR 0 1
15317: ARRAY
15318: PPUSH
15319: LD_VAR 0 1
15323: PUSH
15324: LD_INT 4
15326: MOD
15327: PUSH
15328: LD_INT 1
15330: PLUS
15331: PPUSH
15332: CALL_OW 259
15336: PUSH
15337: LD_INT 1
15339: PLUS
15340: PPUSH
15341: CALL_OW 237
15345: GO 15247
15347: POP
15348: POP
// end ;
15349: PPOPN 3
15351: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15352: LD_EXP 43
15356: PUSH
15357: LD_EXP 51
15361: AND
15362: IFFALSE 15382
15364: GO 15366
15366: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15367: LD_INT 4
15369: PPUSH
15370: LD_OWVAR 2
15374: PPUSH
15375: LD_INT 0
15377: PPUSH
15378: CALL_OW 324
15382: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15383: LD_EXP 43
15387: PUSH
15388: LD_EXP 80
15392: AND
15393: IFFALSE 15413
15395: GO 15397
15397: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15398: LD_INT 19
15400: PPUSH
15401: LD_OWVAR 2
15405: PPUSH
15406: LD_INT 0
15408: PPUSH
15409: CALL_OW 324
15413: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15414: LD_EXP 43
15418: PUSH
15419: LD_EXP 52
15423: AND
15424: IFFALSE 15526
15426: GO 15428
15428: DISABLE
15429: LD_INT 0
15431: PPUSH
15432: PPUSH
// begin enable ;
15433: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15434: LD_ADDR_VAR 0 2
15438: PUSH
15439: LD_INT 22
15441: PUSH
15442: LD_OWVAR 2
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 2
15453: PUSH
15454: LD_INT 34
15456: PUSH
15457: LD_INT 11
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 34
15466: PUSH
15467: LD_INT 30
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: LIST
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PPUSH
15483: CALL_OW 69
15487: ST_TO_ADDR
// if not tmp then
15488: LD_VAR 0 2
15492: NOT
15493: IFFALSE 15497
// exit ;
15495: GO 15526
// for i in tmp do
15497: LD_ADDR_VAR 0 1
15501: PUSH
15502: LD_VAR 0 2
15506: PUSH
15507: FOR_IN
15508: IFFALSE 15524
// begin SetLives ( i , 0 ) ;
15510: LD_VAR 0 1
15514: PPUSH
15515: LD_INT 0
15517: PPUSH
15518: CALL_OW 234
// end ;
15522: GO 15507
15524: POP
15525: POP
// end ;
15526: PPOPN 2
15528: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15529: LD_EXP 43
15533: PUSH
15534: LD_EXP 53
15538: AND
15539: IFFALSE 15559
15541: GO 15543
15543: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15544: LD_INT 32
15546: PPUSH
15547: LD_OWVAR 2
15551: PPUSH
15552: LD_INT 0
15554: PPUSH
15555: CALL_OW 324
15559: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15560: LD_EXP 43
15564: PUSH
15565: LD_EXP 54
15569: AND
15570: IFFALSE 15751
15572: GO 15574
15574: DISABLE
15575: LD_INT 0
15577: PPUSH
15578: PPUSH
15579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15580: LD_ADDR_VAR 0 2
15584: PUSH
15585: LD_INT 22
15587: PUSH
15588: LD_OWVAR 2
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 33
15599: PUSH
15600: LD_INT 3
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PPUSH
15611: CALL_OW 69
15615: ST_TO_ADDR
// if not tmp then
15616: LD_VAR 0 2
15620: NOT
15621: IFFALSE 15625
// exit ;
15623: GO 15751
// side := 0 ;
15625: LD_ADDR_VAR 0 3
15629: PUSH
15630: LD_INT 0
15632: ST_TO_ADDR
// for i := 1 to 8 do
15633: LD_ADDR_VAR 0 1
15637: PUSH
15638: DOUBLE
15639: LD_INT 1
15641: DEC
15642: ST_TO_ADDR
15643: LD_INT 8
15645: PUSH
15646: FOR_TO
15647: IFFALSE 15695
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15649: LD_OWVAR 2
15653: PUSH
15654: LD_VAR 0 1
15658: NONEQUAL
15659: PUSH
15660: LD_OWVAR 2
15664: PPUSH
15665: LD_VAR 0 1
15669: PPUSH
15670: CALL_OW 81
15674: PUSH
15675: LD_INT 2
15677: EQUAL
15678: AND
15679: IFFALSE 15693
// begin side := i ;
15681: LD_ADDR_VAR 0 3
15685: PUSH
15686: LD_VAR 0 1
15690: ST_TO_ADDR
// break ;
15691: GO 15695
// end ;
15693: GO 15646
15695: POP
15696: POP
// if not side then
15697: LD_VAR 0 3
15701: NOT
15702: IFFALSE 15706
// exit ;
15704: GO 15751
// for i := 1 to tmp do
15706: LD_ADDR_VAR 0 1
15710: PUSH
15711: DOUBLE
15712: LD_INT 1
15714: DEC
15715: ST_TO_ADDR
15716: LD_VAR 0 2
15720: PUSH
15721: FOR_TO
15722: IFFALSE 15749
// if Prob ( 60 ) then
15724: LD_INT 60
15726: PPUSH
15727: CALL_OW 13
15731: IFFALSE 15747
// SetSide ( i , side ) ;
15733: LD_VAR 0 1
15737: PPUSH
15738: LD_VAR 0 3
15742: PPUSH
15743: CALL_OW 235
15747: GO 15721
15749: POP
15750: POP
// end ;
15751: PPOPN 3
15753: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15754: LD_EXP 43
15758: PUSH
15759: LD_EXP 56
15763: AND
15764: IFFALSE 15883
15766: GO 15768
15768: DISABLE
15769: LD_INT 0
15771: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15772: LD_ADDR_VAR 0 1
15776: PUSH
15777: LD_INT 22
15779: PUSH
15780: LD_OWVAR 2
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 21
15791: PUSH
15792: LD_INT 1
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 3
15801: PUSH
15802: LD_INT 23
15804: PUSH
15805: LD_INT 0
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: LIST
15820: PPUSH
15821: CALL_OW 69
15825: PUSH
15826: FOR_IN
15827: IFFALSE 15881
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15829: LD_VAR 0 1
15833: PPUSH
15834: CALL_OW 257
15838: PUSH
15839: LD_INT 1
15841: PUSH
15842: LD_INT 2
15844: PUSH
15845: LD_INT 3
15847: PUSH
15848: LD_INT 4
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: IN
15857: IFFALSE 15879
// SetClass ( un , rand ( 1 , 4 ) ) ;
15859: LD_VAR 0 1
15863: PPUSH
15864: LD_INT 1
15866: PPUSH
15867: LD_INT 4
15869: PPUSH
15870: CALL_OW 12
15874: PPUSH
15875: CALL_OW 336
15879: GO 15826
15881: POP
15882: POP
// end ;
15883: PPOPN 1
15885: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15886: LD_EXP 43
15890: PUSH
15891: LD_EXP 55
15895: AND
15896: IFFALSE 15975
15898: GO 15900
15900: DISABLE
15901: LD_INT 0
15903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15904: LD_ADDR_VAR 0 1
15908: PUSH
15909: LD_INT 22
15911: PUSH
15912: LD_OWVAR 2
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PUSH
15921: LD_INT 21
15923: PUSH
15924: LD_INT 3
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PPUSH
15935: CALL_OW 69
15939: ST_TO_ADDR
// if not tmp then
15940: LD_VAR 0 1
15944: NOT
15945: IFFALSE 15949
// exit ;
15947: GO 15975
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15949: LD_VAR 0 1
15953: PUSH
15954: LD_INT 1
15956: PPUSH
15957: LD_VAR 0 1
15961: PPUSH
15962: CALL_OW 12
15966: ARRAY
15967: PPUSH
15968: LD_INT 100
15970: PPUSH
15971: CALL_OW 234
// end ;
15975: PPOPN 1
15977: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15978: LD_EXP 43
15982: PUSH
15983: LD_EXP 57
15987: AND
15988: IFFALSE 16086
15990: GO 15992
15992: DISABLE
15993: LD_INT 0
15995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15996: LD_ADDR_VAR 0 1
16000: PUSH
16001: LD_INT 22
16003: PUSH
16004: LD_OWVAR 2
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 21
16015: PUSH
16016: LD_INT 1
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PPUSH
16027: CALL_OW 69
16031: ST_TO_ADDR
// if not tmp then
16032: LD_VAR 0 1
16036: NOT
16037: IFFALSE 16041
// exit ;
16039: GO 16086
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16041: LD_VAR 0 1
16045: PUSH
16046: LD_INT 1
16048: PPUSH
16049: LD_VAR 0 1
16053: PPUSH
16054: CALL_OW 12
16058: ARRAY
16059: PPUSH
16060: LD_INT 1
16062: PPUSH
16063: LD_INT 4
16065: PPUSH
16066: CALL_OW 12
16070: PPUSH
16071: LD_INT 3000
16073: PPUSH
16074: LD_INT 9000
16076: PPUSH
16077: CALL_OW 12
16081: PPUSH
16082: CALL_OW 492
// end ;
16086: PPOPN 1
16088: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16089: LD_EXP 43
16093: PUSH
16094: LD_EXP 58
16098: AND
16099: IFFALSE 16119
16101: GO 16103
16103: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16104: LD_INT 1
16106: PPUSH
16107: LD_OWVAR 2
16111: PPUSH
16112: LD_INT 0
16114: PPUSH
16115: CALL_OW 324
16119: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16120: LD_EXP 43
16124: PUSH
16125: LD_EXP 59
16129: AND
16130: IFFALSE 16213
16132: GO 16134
16134: DISABLE
16135: LD_INT 0
16137: PPUSH
16138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16139: LD_ADDR_VAR 0 2
16143: PUSH
16144: LD_INT 22
16146: PUSH
16147: LD_OWVAR 2
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 21
16158: PUSH
16159: LD_INT 3
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PPUSH
16170: CALL_OW 69
16174: ST_TO_ADDR
// if not tmp then
16175: LD_VAR 0 2
16179: NOT
16180: IFFALSE 16184
// exit ;
16182: GO 16213
// for i in tmp do
16184: LD_ADDR_VAR 0 1
16188: PUSH
16189: LD_VAR 0 2
16193: PUSH
16194: FOR_IN
16195: IFFALSE 16211
// SetBLevel ( i , 10 ) ;
16197: LD_VAR 0 1
16201: PPUSH
16202: LD_INT 10
16204: PPUSH
16205: CALL_OW 241
16209: GO 16194
16211: POP
16212: POP
// end ;
16213: PPOPN 2
16215: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16216: LD_EXP 43
16220: PUSH
16221: LD_EXP 60
16225: AND
16226: IFFALSE 16337
16228: GO 16230
16230: DISABLE
16231: LD_INT 0
16233: PPUSH
16234: PPUSH
16235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16236: LD_ADDR_VAR 0 3
16240: PUSH
16241: LD_INT 22
16243: PUSH
16244: LD_OWVAR 2
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PUSH
16253: LD_INT 25
16255: PUSH
16256: LD_INT 1
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PPUSH
16267: CALL_OW 69
16271: ST_TO_ADDR
// if not tmp then
16272: LD_VAR 0 3
16276: NOT
16277: IFFALSE 16281
// exit ;
16279: GO 16337
// un := tmp [ rand ( 1 , tmp ) ] ;
16281: LD_ADDR_VAR 0 2
16285: PUSH
16286: LD_VAR 0 3
16290: PUSH
16291: LD_INT 1
16293: PPUSH
16294: LD_VAR 0 3
16298: PPUSH
16299: CALL_OW 12
16303: ARRAY
16304: ST_TO_ADDR
// if Crawls ( un ) then
16305: LD_VAR 0 2
16309: PPUSH
16310: CALL_OW 318
16314: IFFALSE 16325
// ComWalk ( un ) ;
16316: LD_VAR 0 2
16320: PPUSH
16321: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16325: LD_VAR 0 2
16329: PPUSH
16330: LD_INT 5
16332: PPUSH
16333: CALL_OW 336
// end ;
16337: PPOPN 3
16339: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
16340: LD_EXP 43
16344: PUSH
16345: LD_EXP 61
16349: AND
16350: PUSH
16351: LD_OWVAR 67
16355: PUSH
16356: LD_INT 3
16358: LESS
16359: AND
16360: IFFALSE 16379
16362: GO 16364
16364: DISABLE
// Difficulty := Difficulty + 1 ;
16365: LD_ADDR_OWVAR 67
16369: PUSH
16370: LD_OWVAR 67
16374: PUSH
16375: LD_INT 1
16377: PLUS
16378: ST_TO_ADDR
16379: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16380: LD_EXP 43
16384: PUSH
16385: LD_EXP 62
16389: AND
16390: IFFALSE 16493
16392: GO 16394
16394: DISABLE
16395: LD_INT 0
16397: PPUSH
// begin for i := 1 to 5 do
16398: LD_ADDR_VAR 0 1
16402: PUSH
16403: DOUBLE
16404: LD_INT 1
16406: DEC
16407: ST_TO_ADDR
16408: LD_INT 5
16410: PUSH
16411: FOR_TO
16412: IFFALSE 16491
// begin uc_nation := nation_nature ;
16414: LD_ADDR_OWVAR 21
16418: PUSH
16419: LD_INT 0
16421: ST_TO_ADDR
// uc_side := 0 ;
16422: LD_ADDR_OWVAR 20
16426: PUSH
16427: LD_INT 0
16429: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16430: LD_ADDR_OWVAR 29
16434: PUSH
16435: LD_INT 12
16437: PUSH
16438: LD_INT 12
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: ST_TO_ADDR
// hc_agressivity := 20 ;
16445: LD_ADDR_OWVAR 35
16449: PUSH
16450: LD_INT 20
16452: ST_TO_ADDR
// hc_class := class_tiger ;
16453: LD_ADDR_OWVAR 28
16457: PUSH
16458: LD_INT 14
16460: ST_TO_ADDR
// hc_gallery :=  ;
16461: LD_ADDR_OWVAR 33
16465: PUSH
16466: LD_STRING 
16468: ST_TO_ADDR
// hc_name :=  ;
16469: LD_ADDR_OWVAR 26
16473: PUSH
16474: LD_STRING 
16476: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16477: CALL_OW 44
16481: PPUSH
16482: LD_INT 0
16484: PPUSH
16485: CALL_OW 51
// end ;
16489: GO 16411
16491: POP
16492: POP
// end ;
16493: PPOPN 1
16495: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16496: LD_EXP 43
16500: PUSH
16501: LD_EXP 63
16505: AND
16506: IFFALSE 16515
16508: GO 16510
16510: DISABLE
// StreamSibBomb ;
16511: CALL 16516 0 0
16515: END
// export function StreamSibBomb ; var i , x , y ; begin
16516: LD_INT 0
16518: PPUSH
16519: PPUSH
16520: PPUSH
16521: PPUSH
// result := false ;
16522: LD_ADDR_VAR 0 1
16526: PUSH
16527: LD_INT 0
16529: ST_TO_ADDR
// for i := 1 to 16 do
16530: LD_ADDR_VAR 0 2
16534: PUSH
16535: DOUBLE
16536: LD_INT 1
16538: DEC
16539: ST_TO_ADDR
16540: LD_INT 16
16542: PUSH
16543: FOR_TO
16544: IFFALSE 16743
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16546: LD_ADDR_VAR 0 3
16550: PUSH
16551: LD_INT 10
16553: PUSH
16554: LD_INT 20
16556: PUSH
16557: LD_INT 30
16559: PUSH
16560: LD_INT 40
16562: PUSH
16563: LD_INT 50
16565: PUSH
16566: LD_INT 60
16568: PUSH
16569: LD_INT 70
16571: PUSH
16572: LD_INT 80
16574: PUSH
16575: LD_INT 90
16577: PUSH
16578: LD_INT 100
16580: PUSH
16581: LD_INT 110
16583: PUSH
16584: LD_INT 120
16586: PUSH
16587: LD_INT 130
16589: PUSH
16590: LD_INT 140
16592: PUSH
16593: LD_INT 150
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 1
16615: PPUSH
16616: LD_INT 15
16618: PPUSH
16619: CALL_OW 12
16623: ARRAY
16624: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16625: LD_ADDR_VAR 0 4
16629: PUSH
16630: LD_INT 10
16632: PUSH
16633: LD_INT 20
16635: PUSH
16636: LD_INT 30
16638: PUSH
16639: LD_INT 40
16641: PUSH
16642: LD_INT 50
16644: PUSH
16645: LD_INT 60
16647: PUSH
16648: LD_INT 70
16650: PUSH
16651: LD_INT 80
16653: PUSH
16654: LD_INT 90
16656: PUSH
16657: LD_INT 100
16659: PUSH
16660: LD_INT 110
16662: PUSH
16663: LD_INT 120
16665: PUSH
16666: LD_INT 130
16668: PUSH
16669: LD_INT 140
16671: PUSH
16672: LD_INT 150
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: PUSH
16692: LD_INT 1
16694: PPUSH
16695: LD_INT 15
16697: PPUSH
16698: CALL_OW 12
16702: ARRAY
16703: ST_TO_ADDR
// if ValidHex ( x , y ) then
16704: LD_VAR 0 3
16708: PPUSH
16709: LD_VAR 0 4
16713: PPUSH
16714: CALL_OW 488
16718: IFFALSE 16741
// begin result := [ x , y ] ;
16720: LD_ADDR_VAR 0 1
16724: PUSH
16725: LD_VAR 0 3
16729: PUSH
16730: LD_VAR 0 4
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: ST_TO_ADDR
// break ;
16739: GO 16743
// end ; end ;
16741: GO 16543
16743: POP
16744: POP
// if result then
16745: LD_VAR 0 1
16749: IFFALSE 16809
// begin ToLua ( playSibBomb() ) ;
16751: LD_STRING playSibBomb()
16753: PPUSH
16754: CALL_OW 559
// wait ( 0 0$14 ) ;
16758: LD_INT 490
16760: PPUSH
16761: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16765: LD_VAR 0 1
16769: PUSH
16770: LD_INT 1
16772: ARRAY
16773: PPUSH
16774: LD_VAR 0 1
16778: PUSH
16779: LD_INT 2
16781: ARRAY
16782: PPUSH
16783: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16787: LD_VAR 0 1
16791: PUSH
16792: LD_INT 1
16794: ARRAY
16795: PPUSH
16796: LD_VAR 0 1
16800: PUSH
16801: LD_INT 2
16803: ARRAY
16804: PPUSH
16805: CALL_OW 429
// end ; end ;
16809: LD_VAR 0 1
16813: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16814: LD_EXP 43
16818: PUSH
16819: LD_EXP 65
16823: AND
16824: IFFALSE 16836
16826: GO 16828
16828: DISABLE
// YouLost (  ) ;
16829: LD_STRING 
16831: PPUSH
16832: CALL_OW 104
16836: END
// every 0 0$1 trigger StreamModeActive and sFog do
16837: LD_EXP 43
16841: PUSH
16842: LD_EXP 64
16846: AND
16847: IFFALSE 16861
16849: GO 16851
16851: DISABLE
// FogOff ( your_side ) ;
16852: LD_OWVAR 2
16856: PPUSH
16857: CALL_OW 344
16861: END
// every 0 0$1 trigger StreamModeActive and sSun do
16862: LD_EXP 43
16866: PUSH
16867: LD_EXP 66
16871: AND
16872: IFFALSE 16900
16874: GO 16876
16876: DISABLE
// begin solar_recharge_percent := 0 ;
16877: LD_ADDR_OWVAR 79
16881: PUSH
16882: LD_INT 0
16884: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16885: LD_INT 10500
16887: PPUSH
16888: CALL_OW 67
// solar_recharge_percent := 100 ;
16892: LD_ADDR_OWVAR 79
16896: PUSH
16897: LD_INT 100
16899: ST_TO_ADDR
// end ;
16900: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16901: LD_EXP 43
16905: PUSH
16906: LD_EXP 67
16910: AND
16911: IFFALSE 17150
16913: GO 16915
16915: DISABLE
16916: LD_INT 0
16918: PPUSH
16919: PPUSH
16920: PPUSH
// begin tmp := [ ] ;
16921: LD_ADDR_VAR 0 3
16925: PUSH
16926: EMPTY
16927: ST_TO_ADDR
// for i := 1 to 6 do
16928: LD_ADDR_VAR 0 1
16932: PUSH
16933: DOUBLE
16934: LD_INT 1
16936: DEC
16937: ST_TO_ADDR
16938: LD_INT 6
16940: PUSH
16941: FOR_TO
16942: IFFALSE 17047
// begin uc_nation := nation_nature ;
16944: LD_ADDR_OWVAR 21
16948: PUSH
16949: LD_INT 0
16951: ST_TO_ADDR
// uc_side := 0 ;
16952: LD_ADDR_OWVAR 20
16956: PUSH
16957: LD_INT 0
16959: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16960: LD_ADDR_OWVAR 29
16964: PUSH
16965: LD_INT 12
16967: PUSH
16968: LD_INT 12
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: ST_TO_ADDR
// hc_agressivity := 20 ;
16975: LD_ADDR_OWVAR 35
16979: PUSH
16980: LD_INT 20
16982: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16983: LD_ADDR_OWVAR 28
16987: PUSH
16988: LD_INT 17
16990: ST_TO_ADDR
// hc_gallery :=  ;
16991: LD_ADDR_OWVAR 33
16995: PUSH
16996: LD_STRING 
16998: ST_TO_ADDR
// hc_name :=  ;
16999: LD_ADDR_OWVAR 26
17003: PUSH
17004: LD_STRING 
17006: ST_TO_ADDR
// un := CreateHuman ;
17007: LD_ADDR_VAR 0 2
17011: PUSH
17012: CALL_OW 44
17016: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17017: LD_VAR 0 2
17021: PPUSH
17022: LD_INT 1
17024: PPUSH
17025: CALL_OW 51
// tmp := tmp ^ un ;
17029: LD_ADDR_VAR 0 3
17033: PUSH
17034: LD_VAR 0 3
17038: PUSH
17039: LD_VAR 0 2
17043: ADD
17044: ST_TO_ADDR
// end ;
17045: GO 16941
17047: POP
17048: POP
// repeat wait ( 0 0$1 ) ;
17049: LD_INT 35
17051: PPUSH
17052: CALL_OW 67
// for un in tmp do
17056: LD_ADDR_VAR 0 2
17060: PUSH
17061: LD_VAR 0 3
17065: PUSH
17066: FOR_IN
17067: IFFALSE 17141
// begin if IsDead ( un ) then
17069: LD_VAR 0 2
17073: PPUSH
17074: CALL_OW 301
17078: IFFALSE 17098
// begin tmp := tmp diff un ;
17080: LD_ADDR_VAR 0 3
17084: PUSH
17085: LD_VAR 0 3
17089: PUSH
17090: LD_VAR 0 2
17094: DIFF
17095: ST_TO_ADDR
// continue ;
17096: GO 17066
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17098: LD_VAR 0 2
17102: PPUSH
17103: LD_INT 3
17105: PUSH
17106: LD_INT 22
17108: PUSH
17109: LD_INT 0
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PPUSH
17120: CALL_OW 69
17124: PPUSH
17125: LD_VAR 0 2
17129: PPUSH
17130: CALL_OW 74
17134: PPUSH
17135: CALL_OW 115
// end ;
17139: GO 17066
17141: POP
17142: POP
// until not tmp ;
17143: LD_VAR 0 3
17147: NOT
17148: IFFALSE 17049
// end ;
17150: PPOPN 3
17152: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17153: LD_EXP 43
17157: PUSH
17158: LD_EXP 68
17162: AND
17163: IFFALSE 17217
17165: GO 17167
17167: DISABLE
// begin ToLua ( displayTroll(); ) ;
17168: LD_STRING displayTroll();
17170: PPUSH
17171: CALL_OW 559
// wait ( 3 3$00 ) ;
17175: LD_INT 6300
17177: PPUSH
17178: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17182: LD_STRING hideTroll();
17184: PPUSH
17185: CALL_OW 559
// wait ( 1 1$00 ) ;
17189: LD_INT 2100
17191: PPUSH
17192: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17196: LD_STRING displayTroll();
17198: PPUSH
17199: CALL_OW 559
// wait ( 1 1$00 ) ;
17203: LD_INT 2100
17205: PPUSH
17206: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17210: LD_STRING hideTroll();
17212: PPUSH
17213: CALL_OW 559
// end ;
17217: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17218: LD_EXP 43
17222: PUSH
17223: LD_EXP 69
17227: AND
17228: IFFALSE 17291
17230: GO 17232
17232: DISABLE
17233: LD_INT 0
17235: PPUSH
// begin p := 0 ;
17236: LD_ADDR_VAR 0 1
17240: PUSH
17241: LD_INT 0
17243: ST_TO_ADDR
// repeat game_speed := 1 ;
17244: LD_ADDR_OWVAR 65
17248: PUSH
17249: LD_INT 1
17251: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17252: LD_INT 35
17254: PPUSH
17255: CALL_OW 67
// p := p + 1 ;
17259: LD_ADDR_VAR 0 1
17263: PUSH
17264: LD_VAR 0 1
17268: PUSH
17269: LD_INT 1
17271: PLUS
17272: ST_TO_ADDR
// until p >= 60 ;
17273: LD_VAR 0 1
17277: PUSH
17278: LD_INT 60
17280: GREATEREQUAL
17281: IFFALSE 17244
// game_speed := 4 ;
17283: LD_ADDR_OWVAR 65
17287: PUSH
17288: LD_INT 4
17290: ST_TO_ADDR
// end ;
17291: PPOPN 1
17293: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17294: LD_EXP 43
17298: PUSH
17299: LD_EXP 70
17303: AND
17304: IFFALSE 17450
17306: GO 17308
17308: DISABLE
17309: LD_INT 0
17311: PPUSH
17312: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17313: LD_ADDR_VAR 0 1
17317: PUSH
17318: LD_INT 22
17320: PUSH
17321: LD_OWVAR 2
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: LD_INT 2
17332: PUSH
17333: LD_INT 30
17335: PUSH
17336: LD_INT 0
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 30
17345: PUSH
17346: LD_INT 1
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: LIST
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PPUSH
17362: CALL_OW 69
17366: ST_TO_ADDR
// if not depot then
17367: LD_VAR 0 1
17371: NOT
17372: IFFALSE 17376
// exit ;
17374: GO 17450
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17376: LD_ADDR_VAR 0 2
17380: PUSH
17381: LD_VAR 0 1
17385: PUSH
17386: LD_INT 1
17388: PPUSH
17389: LD_VAR 0 1
17393: PPUSH
17394: CALL_OW 12
17398: ARRAY
17399: PPUSH
17400: CALL_OW 274
17404: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17405: LD_VAR 0 2
17409: PPUSH
17410: LD_INT 1
17412: PPUSH
17413: LD_INT 0
17415: PPUSH
17416: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17420: LD_VAR 0 2
17424: PPUSH
17425: LD_INT 2
17427: PPUSH
17428: LD_INT 0
17430: PPUSH
17431: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17435: LD_VAR 0 2
17439: PPUSH
17440: LD_INT 3
17442: PPUSH
17443: LD_INT 0
17445: PPUSH
17446: CALL_OW 277
// end ;
17450: PPOPN 2
17452: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17453: LD_EXP 43
17457: PUSH
17458: LD_EXP 71
17462: AND
17463: IFFALSE 17560
17465: GO 17467
17467: DISABLE
17468: LD_INT 0
17470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17471: LD_ADDR_VAR 0 1
17475: PUSH
17476: LD_INT 22
17478: PUSH
17479: LD_OWVAR 2
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 21
17490: PUSH
17491: LD_INT 1
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 3
17500: PUSH
17501: LD_INT 23
17503: PUSH
17504: LD_INT 0
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: LIST
17519: PPUSH
17520: CALL_OW 69
17524: ST_TO_ADDR
// if not tmp then
17525: LD_VAR 0 1
17529: NOT
17530: IFFALSE 17534
// exit ;
17532: GO 17560
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17534: LD_VAR 0 1
17538: PUSH
17539: LD_INT 1
17541: PPUSH
17542: LD_VAR 0 1
17546: PPUSH
17547: CALL_OW 12
17551: ARRAY
17552: PPUSH
17553: LD_INT 200
17555: PPUSH
17556: CALL_OW 234
// end ;
17560: PPOPN 1
17562: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17563: LD_EXP 43
17567: PUSH
17568: LD_EXP 72
17572: AND
17573: IFFALSE 17652
17575: GO 17577
17577: DISABLE
17578: LD_INT 0
17580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17581: LD_ADDR_VAR 0 1
17585: PUSH
17586: LD_INT 22
17588: PUSH
17589: LD_OWVAR 2
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 21
17600: PUSH
17601: LD_INT 2
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PPUSH
17612: CALL_OW 69
17616: ST_TO_ADDR
// if not tmp then
17617: LD_VAR 0 1
17621: NOT
17622: IFFALSE 17626
// exit ;
17624: GO 17652
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17626: LD_VAR 0 1
17630: PUSH
17631: LD_INT 1
17633: PPUSH
17634: LD_VAR 0 1
17638: PPUSH
17639: CALL_OW 12
17643: ARRAY
17644: PPUSH
17645: LD_INT 60
17647: PPUSH
17648: CALL_OW 234
// end ;
17652: PPOPN 1
17654: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17655: LD_EXP 43
17659: PUSH
17660: LD_EXP 73
17664: AND
17665: IFFALSE 17764
17667: GO 17669
17669: DISABLE
17670: LD_INT 0
17672: PPUSH
17673: PPUSH
// begin enable ;
17674: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17675: LD_ADDR_VAR 0 1
17679: PUSH
17680: LD_INT 22
17682: PUSH
17683: LD_OWVAR 2
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 61
17694: PUSH
17695: EMPTY
17696: LIST
17697: PUSH
17698: LD_INT 33
17700: PUSH
17701: LD_INT 2
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: LIST
17712: PPUSH
17713: CALL_OW 69
17717: ST_TO_ADDR
// if not tmp then
17718: LD_VAR 0 1
17722: NOT
17723: IFFALSE 17727
// exit ;
17725: GO 17764
// for i in tmp do
17727: LD_ADDR_VAR 0 2
17731: PUSH
17732: LD_VAR 0 1
17736: PUSH
17737: FOR_IN
17738: IFFALSE 17762
// if IsControledBy ( i ) then
17740: LD_VAR 0 2
17744: PPUSH
17745: CALL_OW 312
17749: IFFALSE 17760
// ComUnlink ( i ) ;
17751: LD_VAR 0 2
17755: PPUSH
17756: CALL_OW 136
17760: GO 17737
17762: POP
17763: POP
// end ;
17764: PPOPN 2
17766: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17767: LD_EXP 43
17771: PUSH
17772: LD_EXP 74
17776: AND
17777: IFFALSE 17917
17779: GO 17781
17781: DISABLE
17782: LD_INT 0
17784: PPUSH
17785: PPUSH
// begin ToLua ( displayPowell(); ) ;
17786: LD_STRING displayPowell();
17788: PPUSH
17789: CALL_OW 559
// uc_side := 0 ;
17793: LD_ADDR_OWVAR 20
17797: PUSH
17798: LD_INT 0
17800: ST_TO_ADDR
// uc_nation := 2 ;
17801: LD_ADDR_OWVAR 21
17805: PUSH
17806: LD_INT 2
17808: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17809: LD_ADDR_OWVAR 37
17813: PUSH
17814: LD_INT 14
17816: ST_TO_ADDR
// vc_engine := engine_siberite ;
17817: LD_ADDR_OWVAR 39
17821: PUSH
17822: LD_INT 3
17824: ST_TO_ADDR
// vc_control := control_apeman ;
17825: LD_ADDR_OWVAR 38
17829: PUSH
17830: LD_INT 5
17832: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17833: LD_ADDR_OWVAR 40
17837: PUSH
17838: LD_INT 29
17840: ST_TO_ADDR
// un := CreateVehicle ;
17841: LD_ADDR_VAR 0 2
17845: PUSH
17846: CALL_OW 45
17850: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17851: LD_VAR 0 2
17855: PPUSH
17856: LD_INT 1
17858: PPUSH
17859: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17863: LD_INT 35
17865: PPUSH
17866: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17870: LD_VAR 0 2
17874: PPUSH
17875: LD_INT 22
17877: PUSH
17878: LD_OWVAR 2
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PPUSH
17887: CALL_OW 69
17891: PPUSH
17892: LD_VAR 0 2
17896: PPUSH
17897: CALL_OW 74
17901: PPUSH
17902: CALL_OW 115
// until IsDead ( un ) ;
17906: LD_VAR 0 2
17910: PPUSH
17911: CALL_OW 301
17915: IFFALSE 17863
// end ;
17917: PPOPN 2
17919: END
// every 0 0$1 trigger StreamModeActive and sStu do
17920: LD_EXP 43
17924: PUSH
17925: LD_EXP 82
17929: AND
17930: IFFALSE 17946
17932: GO 17934
17934: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17935: LD_STRING displayStucuk();
17937: PPUSH
17938: CALL_OW 559
// ResetFog ;
17942: CALL_OW 335
// end ;
17946: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17947: LD_EXP 43
17951: PUSH
17952: LD_EXP 75
17956: AND
17957: IFFALSE 18098
17959: GO 17961
17961: DISABLE
17962: LD_INT 0
17964: PPUSH
17965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17966: LD_ADDR_VAR 0 2
17970: PUSH
17971: LD_INT 22
17973: PUSH
17974: LD_OWVAR 2
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 21
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PPUSH
17997: CALL_OW 69
18001: ST_TO_ADDR
// if not tmp then
18002: LD_VAR 0 2
18006: NOT
18007: IFFALSE 18011
// exit ;
18009: GO 18098
// un := tmp [ rand ( 1 , tmp ) ] ;
18011: LD_ADDR_VAR 0 1
18015: PUSH
18016: LD_VAR 0 2
18020: PUSH
18021: LD_INT 1
18023: PPUSH
18024: LD_VAR 0 2
18028: PPUSH
18029: CALL_OW 12
18033: ARRAY
18034: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18035: LD_VAR 0 1
18039: PPUSH
18040: LD_INT 0
18042: PPUSH
18043: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18047: LD_VAR 0 1
18051: PPUSH
18052: LD_OWVAR 3
18056: PUSH
18057: LD_VAR 0 1
18061: DIFF
18062: PPUSH
18063: LD_VAR 0 1
18067: PPUSH
18068: CALL_OW 74
18072: PPUSH
18073: CALL_OW 115
// wait ( 0 0$20 ) ;
18077: LD_INT 700
18079: PPUSH
18080: CALL_OW 67
// SetSide ( un , your_side ) ;
18084: LD_VAR 0 1
18088: PPUSH
18089: LD_OWVAR 2
18093: PPUSH
18094: CALL_OW 235
// end ;
18098: PPOPN 2
18100: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18101: LD_EXP 43
18105: PUSH
18106: LD_EXP 76
18110: AND
18111: IFFALSE 18217
18113: GO 18115
18115: DISABLE
18116: LD_INT 0
18118: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18119: LD_ADDR_VAR 0 1
18123: PUSH
18124: LD_INT 22
18126: PUSH
18127: LD_OWVAR 2
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 2
18138: PUSH
18139: LD_INT 30
18141: PUSH
18142: LD_INT 0
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 30
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: LIST
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PPUSH
18168: CALL_OW 69
18172: ST_TO_ADDR
// if not depot then
18173: LD_VAR 0 1
18177: NOT
18178: IFFALSE 18182
// exit ;
18180: GO 18217
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18182: LD_VAR 0 1
18186: PUSH
18187: LD_INT 1
18189: ARRAY
18190: PPUSH
18191: CALL_OW 250
18195: PPUSH
18196: LD_VAR 0 1
18200: PUSH
18201: LD_INT 1
18203: ARRAY
18204: PPUSH
18205: CALL_OW 251
18209: PPUSH
18210: LD_INT 70
18212: PPUSH
18213: CALL_OW 495
// end ;
18217: PPOPN 1
18219: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18220: LD_EXP 43
18224: PUSH
18225: LD_EXP 77
18229: AND
18230: IFFALSE 18441
18232: GO 18234
18234: DISABLE
18235: LD_INT 0
18237: PPUSH
18238: PPUSH
18239: PPUSH
18240: PPUSH
18241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18242: LD_ADDR_VAR 0 5
18246: PUSH
18247: LD_INT 22
18249: PUSH
18250: LD_OWVAR 2
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 21
18261: PUSH
18262: LD_INT 1
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PPUSH
18273: CALL_OW 69
18277: ST_TO_ADDR
// if not tmp then
18278: LD_VAR 0 5
18282: NOT
18283: IFFALSE 18287
// exit ;
18285: GO 18441
// for i in tmp do
18287: LD_ADDR_VAR 0 1
18291: PUSH
18292: LD_VAR 0 5
18296: PUSH
18297: FOR_IN
18298: IFFALSE 18439
// begin d := rand ( 0 , 5 ) ;
18300: LD_ADDR_VAR 0 4
18304: PUSH
18305: LD_INT 0
18307: PPUSH
18308: LD_INT 5
18310: PPUSH
18311: CALL_OW 12
18315: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18316: LD_ADDR_VAR 0 2
18320: PUSH
18321: LD_VAR 0 1
18325: PPUSH
18326: CALL_OW 250
18330: PPUSH
18331: LD_VAR 0 4
18335: PPUSH
18336: LD_INT 3
18338: PPUSH
18339: LD_INT 12
18341: PPUSH
18342: CALL_OW 12
18346: PPUSH
18347: CALL_OW 272
18351: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18352: LD_ADDR_VAR 0 3
18356: PUSH
18357: LD_VAR 0 1
18361: PPUSH
18362: CALL_OW 251
18366: PPUSH
18367: LD_VAR 0 4
18371: PPUSH
18372: LD_INT 3
18374: PPUSH
18375: LD_INT 12
18377: PPUSH
18378: CALL_OW 12
18382: PPUSH
18383: CALL_OW 273
18387: ST_TO_ADDR
// if ValidHex ( x , y ) then
18388: LD_VAR 0 2
18392: PPUSH
18393: LD_VAR 0 3
18397: PPUSH
18398: CALL_OW 488
18402: IFFALSE 18437
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18404: LD_VAR 0 1
18408: PPUSH
18409: LD_VAR 0 2
18413: PPUSH
18414: LD_VAR 0 3
18418: PPUSH
18419: LD_INT 3
18421: PPUSH
18422: LD_INT 6
18424: PPUSH
18425: CALL_OW 12
18429: PPUSH
18430: LD_INT 1
18432: PPUSH
18433: CALL_OW 483
// end ;
18437: GO 18297
18439: POP
18440: POP
// end ;
18441: PPOPN 5
18443: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18444: LD_EXP 43
18448: PUSH
18449: LD_EXP 78
18453: AND
18454: IFFALSE 18548
18456: GO 18458
18458: DISABLE
18459: LD_INT 0
18461: PPUSH
18462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18463: LD_ADDR_VAR 0 2
18467: PUSH
18468: LD_INT 22
18470: PUSH
18471: LD_OWVAR 2
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 32
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 21
18492: PUSH
18493: LD_INT 2
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: LIST
18504: PPUSH
18505: CALL_OW 69
18509: ST_TO_ADDR
// if not tmp then
18510: LD_VAR 0 2
18514: NOT
18515: IFFALSE 18519
// exit ;
18517: GO 18548
// for i in tmp do
18519: LD_ADDR_VAR 0 1
18523: PUSH
18524: LD_VAR 0 2
18528: PUSH
18529: FOR_IN
18530: IFFALSE 18546
// SetFuel ( i , 0 ) ;
18532: LD_VAR 0 1
18536: PPUSH
18537: LD_INT 0
18539: PPUSH
18540: CALL_OW 240
18544: GO 18529
18546: POP
18547: POP
// end ;
18548: PPOPN 2
18550: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18551: LD_EXP 43
18555: PUSH
18556: LD_EXP 79
18560: AND
18561: IFFALSE 18627
18563: GO 18565
18565: DISABLE
18566: LD_INT 0
18568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18569: LD_ADDR_VAR 0 1
18573: PUSH
18574: LD_INT 22
18576: PUSH
18577: LD_OWVAR 2
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 30
18588: PUSH
18589: LD_INT 29
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PPUSH
18600: CALL_OW 69
18604: ST_TO_ADDR
// if not tmp then
18605: LD_VAR 0 1
18609: NOT
18610: IFFALSE 18614
// exit ;
18612: GO 18627
// DestroyUnit ( tmp [ 1 ] ) ;
18614: LD_VAR 0 1
18618: PUSH
18619: LD_INT 1
18621: ARRAY
18622: PPUSH
18623: CALL_OW 65
// end ;
18627: PPOPN 1
18629: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18630: LD_EXP 43
18634: PUSH
18635: LD_EXP 81
18639: AND
18640: IFFALSE 18769
18642: GO 18644
18644: DISABLE
18645: LD_INT 0
18647: PPUSH
// begin uc_side := 0 ;
18648: LD_ADDR_OWVAR 20
18652: PUSH
18653: LD_INT 0
18655: ST_TO_ADDR
// uc_nation := nation_arabian ;
18656: LD_ADDR_OWVAR 21
18660: PUSH
18661: LD_INT 2
18663: ST_TO_ADDR
// hc_gallery :=  ;
18664: LD_ADDR_OWVAR 33
18668: PUSH
18669: LD_STRING 
18671: ST_TO_ADDR
// hc_name :=  ;
18672: LD_ADDR_OWVAR 26
18676: PUSH
18677: LD_STRING 
18679: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18680: LD_INT 1
18682: PPUSH
18683: LD_INT 11
18685: PPUSH
18686: LD_INT 10
18688: PPUSH
18689: CALL_OW 380
// un := CreateHuman ;
18693: LD_ADDR_VAR 0 1
18697: PUSH
18698: CALL_OW 44
18702: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18703: LD_VAR 0 1
18707: PPUSH
18708: LD_INT 1
18710: PPUSH
18711: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18715: LD_INT 35
18717: PPUSH
18718: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18722: LD_VAR 0 1
18726: PPUSH
18727: LD_INT 22
18729: PUSH
18730: LD_OWVAR 2
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PPUSH
18739: CALL_OW 69
18743: PPUSH
18744: LD_VAR 0 1
18748: PPUSH
18749: CALL_OW 74
18753: PPUSH
18754: CALL_OW 115
// until IsDead ( un ) ;
18758: LD_VAR 0 1
18762: PPUSH
18763: CALL_OW 301
18767: IFFALSE 18715
// end ;
18769: PPOPN 1
18771: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18772: LD_EXP 43
18776: PUSH
18777: LD_EXP 83
18781: AND
18782: IFFALSE 18794
18784: GO 18786
18786: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18787: LD_STRING earthquake(getX(game), 0, 32)
18789: PPUSH
18790: CALL_OW 559
18794: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18795: LD_EXP 43
18799: PUSH
18800: LD_EXP 84
18804: AND
18805: IFFALSE 18896
18807: GO 18809
18809: DISABLE
18810: LD_INT 0
18812: PPUSH
// begin enable ;
18813: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18814: LD_ADDR_VAR 0 1
18818: PUSH
18819: LD_INT 22
18821: PUSH
18822: LD_OWVAR 2
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 21
18833: PUSH
18834: LD_INT 2
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 33
18843: PUSH
18844: LD_INT 3
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: LIST
18855: PPUSH
18856: CALL_OW 69
18860: ST_TO_ADDR
// if not tmp then
18861: LD_VAR 0 1
18865: NOT
18866: IFFALSE 18870
// exit ;
18868: GO 18896
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18870: LD_VAR 0 1
18874: PUSH
18875: LD_INT 1
18877: PPUSH
18878: LD_VAR 0 1
18882: PPUSH
18883: CALL_OW 12
18887: ARRAY
18888: PPUSH
18889: LD_INT 1
18891: PPUSH
18892: CALL_OW 234
// end ;
18896: PPOPN 1
18898: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18899: LD_EXP 43
18903: PUSH
18904: LD_EXP 85
18908: AND
18909: IFFALSE 19050
18911: GO 18913
18913: DISABLE
18914: LD_INT 0
18916: PPUSH
18917: PPUSH
18918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18919: LD_ADDR_VAR 0 3
18923: PUSH
18924: LD_INT 22
18926: PUSH
18927: LD_OWVAR 2
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 25
18938: PUSH
18939: LD_INT 1
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PPUSH
18950: CALL_OW 69
18954: ST_TO_ADDR
// if not tmp then
18955: LD_VAR 0 3
18959: NOT
18960: IFFALSE 18964
// exit ;
18962: GO 19050
// un := tmp [ rand ( 1 , tmp ) ] ;
18964: LD_ADDR_VAR 0 2
18968: PUSH
18969: LD_VAR 0 3
18973: PUSH
18974: LD_INT 1
18976: PPUSH
18977: LD_VAR 0 3
18981: PPUSH
18982: CALL_OW 12
18986: ARRAY
18987: ST_TO_ADDR
// if Crawls ( un ) then
18988: LD_VAR 0 2
18992: PPUSH
18993: CALL_OW 318
18997: IFFALSE 19008
// ComWalk ( un ) ;
18999: LD_VAR 0 2
19003: PPUSH
19004: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19008: LD_VAR 0 2
19012: PPUSH
19013: LD_INT 9
19015: PPUSH
19016: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19020: LD_INT 28
19022: PPUSH
19023: LD_OWVAR 2
19027: PPUSH
19028: LD_INT 2
19030: PPUSH
19031: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19035: LD_INT 29
19037: PPUSH
19038: LD_OWVAR 2
19042: PPUSH
19043: LD_INT 2
19045: PPUSH
19046: CALL_OW 322
// end ;
19050: PPOPN 3
19052: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19053: LD_EXP 43
19057: PUSH
19058: LD_EXP 86
19062: AND
19063: IFFALSE 19174
19065: GO 19067
19067: DISABLE
19068: LD_INT 0
19070: PPUSH
19071: PPUSH
19072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19073: LD_ADDR_VAR 0 3
19077: PUSH
19078: LD_INT 22
19080: PUSH
19081: LD_OWVAR 2
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 25
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PPUSH
19104: CALL_OW 69
19108: ST_TO_ADDR
// if not tmp then
19109: LD_VAR 0 3
19113: NOT
19114: IFFALSE 19118
// exit ;
19116: GO 19174
// un := tmp [ rand ( 1 , tmp ) ] ;
19118: LD_ADDR_VAR 0 2
19122: PUSH
19123: LD_VAR 0 3
19127: PUSH
19128: LD_INT 1
19130: PPUSH
19131: LD_VAR 0 3
19135: PPUSH
19136: CALL_OW 12
19140: ARRAY
19141: ST_TO_ADDR
// if Crawls ( un ) then
19142: LD_VAR 0 2
19146: PPUSH
19147: CALL_OW 318
19151: IFFALSE 19162
// ComWalk ( un ) ;
19153: LD_VAR 0 2
19157: PPUSH
19158: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19162: LD_VAR 0 2
19166: PPUSH
19167: LD_INT 8
19169: PPUSH
19170: CALL_OW 336
// end ;
19174: PPOPN 3
19176: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19177: LD_EXP 43
19181: PUSH
19182: LD_EXP 87
19186: AND
19187: IFFALSE 19331
19189: GO 19191
19191: DISABLE
19192: LD_INT 0
19194: PPUSH
19195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19196: LD_ADDR_VAR 0 2
19200: PUSH
19201: LD_INT 22
19203: PUSH
19204: LD_OWVAR 2
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 21
19215: PUSH
19216: LD_INT 2
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 2
19225: PUSH
19226: LD_INT 34
19228: PUSH
19229: LD_INT 12
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 34
19238: PUSH
19239: LD_INT 51
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 34
19248: PUSH
19249: LD_INT 32
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: LIST
19266: PPUSH
19267: CALL_OW 69
19271: ST_TO_ADDR
// if not tmp then
19272: LD_VAR 0 2
19276: NOT
19277: IFFALSE 19281
// exit ;
19279: GO 19331
// for i in tmp do
19281: LD_ADDR_VAR 0 1
19285: PUSH
19286: LD_VAR 0 2
19290: PUSH
19291: FOR_IN
19292: IFFALSE 19329
// if GetCargo ( i , mat_artifact ) = 0 then
19294: LD_VAR 0 1
19298: PPUSH
19299: LD_INT 4
19301: PPUSH
19302: CALL_OW 289
19306: PUSH
19307: LD_INT 0
19309: EQUAL
19310: IFFALSE 19327
// SetCargo ( i , mat_siberit , 100 ) ;
19312: LD_VAR 0 1
19316: PPUSH
19317: LD_INT 3
19319: PPUSH
19320: LD_INT 100
19322: PPUSH
19323: CALL_OW 290
19327: GO 19291
19329: POP
19330: POP
// end ;
19331: PPOPN 2
19333: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19334: LD_EXP 43
19338: PUSH
19339: LD_EXP 88
19343: AND
19344: IFFALSE 19527
19346: GO 19348
19348: DISABLE
19349: LD_INT 0
19351: PPUSH
19352: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19353: LD_ADDR_VAR 0 2
19357: PUSH
19358: LD_INT 22
19360: PUSH
19361: LD_OWVAR 2
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PPUSH
19370: CALL_OW 69
19374: ST_TO_ADDR
// if not tmp then
19375: LD_VAR 0 2
19379: NOT
19380: IFFALSE 19384
// exit ;
19382: GO 19527
// for i := 1 to 2 do
19384: LD_ADDR_VAR 0 1
19388: PUSH
19389: DOUBLE
19390: LD_INT 1
19392: DEC
19393: ST_TO_ADDR
19394: LD_INT 2
19396: PUSH
19397: FOR_TO
19398: IFFALSE 19525
// begin uc_side := your_side ;
19400: LD_ADDR_OWVAR 20
19404: PUSH
19405: LD_OWVAR 2
19409: ST_TO_ADDR
// uc_nation := nation_american ;
19410: LD_ADDR_OWVAR 21
19414: PUSH
19415: LD_INT 1
19417: ST_TO_ADDR
// vc_chassis := us_morphling ;
19418: LD_ADDR_OWVAR 37
19422: PUSH
19423: LD_INT 5
19425: ST_TO_ADDR
// vc_engine := engine_siberite ;
19426: LD_ADDR_OWVAR 39
19430: PUSH
19431: LD_INT 3
19433: ST_TO_ADDR
// vc_control := control_computer ;
19434: LD_ADDR_OWVAR 38
19438: PUSH
19439: LD_INT 3
19441: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19442: LD_ADDR_OWVAR 40
19446: PUSH
19447: LD_INT 10
19449: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19450: LD_VAR 0 2
19454: PUSH
19455: LD_INT 1
19457: ARRAY
19458: PPUSH
19459: CALL_OW 310
19463: NOT
19464: IFFALSE 19511
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19466: CALL_OW 45
19470: PPUSH
19471: LD_VAR 0 2
19475: PUSH
19476: LD_INT 1
19478: ARRAY
19479: PPUSH
19480: CALL_OW 250
19484: PPUSH
19485: LD_VAR 0 2
19489: PUSH
19490: LD_INT 1
19492: ARRAY
19493: PPUSH
19494: CALL_OW 251
19498: PPUSH
19499: LD_INT 12
19501: PPUSH
19502: LD_INT 1
19504: PPUSH
19505: CALL_OW 50
19509: GO 19523
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19511: CALL_OW 45
19515: PPUSH
19516: LD_INT 1
19518: PPUSH
19519: CALL_OW 51
// end ;
19523: GO 19397
19525: POP
19526: POP
// end ;
19527: PPOPN 2
19529: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19530: LD_EXP 43
19534: PUSH
19535: LD_EXP 89
19539: AND
19540: IFFALSE 19762
19542: GO 19544
19544: DISABLE
19545: LD_INT 0
19547: PPUSH
19548: PPUSH
19549: PPUSH
19550: PPUSH
19551: PPUSH
19552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19553: LD_ADDR_VAR 0 6
19557: PUSH
19558: LD_INT 22
19560: PUSH
19561: LD_OWVAR 2
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 21
19572: PUSH
19573: LD_INT 1
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 3
19582: PUSH
19583: LD_INT 23
19585: PUSH
19586: LD_INT 0
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: LIST
19601: PPUSH
19602: CALL_OW 69
19606: ST_TO_ADDR
// if not tmp then
19607: LD_VAR 0 6
19611: NOT
19612: IFFALSE 19616
// exit ;
19614: GO 19762
// s1 := rand ( 1 , 4 ) ;
19616: LD_ADDR_VAR 0 2
19620: PUSH
19621: LD_INT 1
19623: PPUSH
19624: LD_INT 4
19626: PPUSH
19627: CALL_OW 12
19631: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19632: LD_ADDR_VAR 0 4
19636: PUSH
19637: LD_VAR 0 6
19641: PUSH
19642: LD_INT 1
19644: ARRAY
19645: PPUSH
19646: LD_VAR 0 2
19650: PPUSH
19651: CALL_OW 259
19655: ST_TO_ADDR
// if s1 = 1 then
19656: LD_VAR 0 2
19660: PUSH
19661: LD_INT 1
19663: EQUAL
19664: IFFALSE 19684
// s2 := rand ( 2 , 4 ) else
19666: LD_ADDR_VAR 0 3
19670: PUSH
19671: LD_INT 2
19673: PPUSH
19674: LD_INT 4
19676: PPUSH
19677: CALL_OW 12
19681: ST_TO_ADDR
19682: GO 19692
// s2 := 1 ;
19684: LD_ADDR_VAR 0 3
19688: PUSH
19689: LD_INT 1
19691: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19692: LD_ADDR_VAR 0 5
19696: PUSH
19697: LD_VAR 0 6
19701: PUSH
19702: LD_INT 1
19704: ARRAY
19705: PPUSH
19706: LD_VAR 0 3
19710: PPUSH
19711: CALL_OW 259
19715: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19716: LD_VAR 0 6
19720: PUSH
19721: LD_INT 1
19723: ARRAY
19724: PPUSH
19725: LD_VAR 0 2
19729: PPUSH
19730: LD_VAR 0 5
19734: PPUSH
19735: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19739: LD_VAR 0 6
19743: PUSH
19744: LD_INT 1
19746: ARRAY
19747: PPUSH
19748: LD_VAR 0 3
19752: PPUSH
19753: LD_VAR 0 4
19757: PPUSH
19758: CALL_OW 237
// end ;
19762: PPOPN 6
19764: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19765: LD_EXP 43
19769: PUSH
19770: LD_EXP 90
19774: AND
19775: IFFALSE 19854
19777: GO 19779
19779: DISABLE
19780: LD_INT 0
19782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19783: LD_ADDR_VAR 0 1
19787: PUSH
19788: LD_INT 22
19790: PUSH
19791: LD_OWVAR 2
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 30
19802: PUSH
19803: LD_INT 3
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PPUSH
19814: CALL_OW 69
19818: ST_TO_ADDR
// if not tmp then
19819: LD_VAR 0 1
19823: NOT
19824: IFFALSE 19828
// exit ;
19826: GO 19854
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19828: LD_VAR 0 1
19832: PUSH
19833: LD_INT 1
19835: PPUSH
19836: LD_VAR 0 1
19840: PPUSH
19841: CALL_OW 12
19845: ARRAY
19846: PPUSH
19847: LD_INT 1
19849: PPUSH
19850: CALL_OW 234
// end ;
19854: PPOPN 1
19856: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19857: LD_EXP 43
19861: PUSH
19862: LD_EXP 91
19866: AND
19867: IFFALSE 19979
19869: GO 19871
19871: DISABLE
19872: LD_INT 0
19874: PPUSH
19875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19876: LD_ADDR_VAR 0 2
19880: PUSH
19881: LD_INT 22
19883: PUSH
19884: LD_OWVAR 2
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 2
19895: PUSH
19896: LD_INT 30
19898: PUSH
19899: LD_INT 27
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 30
19908: PUSH
19909: LD_INT 26
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 30
19918: PUSH
19919: LD_INT 28
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PPUSH
19936: CALL_OW 69
19940: ST_TO_ADDR
// if not tmp then
19941: LD_VAR 0 2
19945: NOT
19946: IFFALSE 19950
// exit ;
19948: GO 19979
// for i in tmp do
19950: LD_ADDR_VAR 0 1
19954: PUSH
19955: LD_VAR 0 2
19959: PUSH
19960: FOR_IN
19961: IFFALSE 19977
// SetLives ( i , 1 ) ;
19963: LD_VAR 0 1
19967: PPUSH
19968: LD_INT 1
19970: PPUSH
19971: CALL_OW 234
19975: GO 19960
19977: POP
19978: POP
// end ;
19979: PPOPN 2
19981: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19982: LD_EXP 43
19986: PUSH
19987: LD_EXP 92
19991: AND
19992: IFFALSE 20266
19994: GO 19996
19996: DISABLE
19997: LD_INT 0
19999: PPUSH
20000: PPUSH
20001: PPUSH
// begin i := rand ( 1 , 7 ) ;
20002: LD_ADDR_VAR 0 1
20006: PUSH
20007: LD_INT 1
20009: PPUSH
20010: LD_INT 7
20012: PPUSH
20013: CALL_OW 12
20017: ST_TO_ADDR
// case i of 1 :
20018: LD_VAR 0 1
20022: PUSH
20023: LD_INT 1
20025: DOUBLE
20026: EQUAL
20027: IFTRUE 20031
20029: GO 20041
20031: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20032: LD_STRING earthquake(getX(game), 0, 32)
20034: PPUSH
20035: CALL_OW 559
20039: GO 20266
20041: LD_INT 2
20043: DOUBLE
20044: EQUAL
20045: IFTRUE 20049
20047: GO 20063
20049: POP
// begin ToLua ( displayStucuk(); ) ;
20050: LD_STRING displayStucuk();
20052: PPUSH
20053: CALL_OW 559
// ResetFog ;
20057: CALL_OW 335
// end ; 3 :
20061: GO 20266
20063: LD_INT 3
20065: DOUBLE
20066: EQUAL
20067: IFTRUE 20071
20069: GO 20175
20071: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20072: LD_ADDR_VAR 0 2
20076: PUSH
20077: LD_INT 22
20079: PUSH
20080: LD_OWVAR 2
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 25
20091: PUSH
20092: LD_INT 1
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PPUSH
20103: CALL_OW 69
20107: ST_TO_ADDR
// if not tmp then
20108: LD_VAR 0 2
20112: NOT
20113: IFFALSE 20117
// exit ;
20115: GO 20266
// un := tmp [ rand ( 1 , tmp ) ] ;
20117: LD_ADDR_VAR 0 3
20121: PUSH
20122: LD_VAR 0 2
20126: PUSH
20127: LD_INT 1
20129: PPUSH
20130: LD_VAR 0 2
20134: PPUSH
20135: CALL_OW 12
20139: ARRAY
20140: ST_TO_ADDR
// if Crawls ( un ) then
20141: LD_VAR 0 3
20145: PPUSH
20146: CALL_OW 318
20150: IFFALSE 20161
// ComWalk ( un ) ;
20152: LD_VAR 0 3
20156: PPUSH
20157: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20161: LD_VAR 0 3
20165: PPUSH
20166: LD_INT 8
20168: PPUSH
20169: CALL_OW 336
// end ; 4 :
20173: GO 20266
20175: LD_INT 4
20177: DOUBLE
20178: EQUAL
20179: IFTRUE 20183
20181: GO 20244
20183: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20184: LD_ADDR_VAR 0 2
20188: PUSH
20189: LD_INT 22
20191: PUSH
20192: LD_OWVAR 2
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 30
20203: PUSH
20204: LD_INT 29
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PPUSH
20215: CALL_OW 69
20219: ST_TO_ADDR
// if not tmp then
20220: LD_VAR 0 2
20224: NOT
20225: IFFALSE 20229
// exit ;
20227: GO 20266
// DestroyUnit ( tmp [ 1 ] ) ;
20229: LD_VAR 0 2
20233: PUSH
20234: LD_INT 1
20236: ARRAY
20237: PPUSH
20238: CALL_OW 65
// end ; 5 .. 7 :
20242: GO 20266
20244: LD_INT 5
20246: DOUBLE
20247: GREATEREQUAL
20248: IFFALSE 20256
20250: LD_INT 7
20252: DOUBLE
20253: LESSEQUAL
20254: IFTRUE 20258
20256: GO 20265
20258: POP
// StreamSibBomb ; end ;
20259: CALL 16516 0 0
20263: GO 20266
20265: POP
// end ;
20266: PPOPN 3
20268: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20269: LD_EXP 43
20273: PUSH
20274: LD_EXP 93
20278: AND
20279: IFFALSE 20435
20281: GO 20283
20283: DISABLE
20284: LD_INT 0
20286: PPUSH
20287: PPUSH
20288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20289: LD_ADDR_VAR 0 2
20293: PUSH
20294: LD_INT 81
20296: PUSH
20297: LD_OWVAR 2
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: LD_INT 21
20311: PUSH
20312: LD_INT 1
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 21
20321: PUSH
20322: LD_INT 2
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PPUSH
20338: CALL_OW 69
20342: ST_TO_ADDR
// if not tmp then
20343: LD_VAR 0 2
20347: NOT
20348: IFFALSE 20352
// exit ;
20350: GO 20435
// p := 0 ;
20352: LD_ADDR_VAR 0 3
20356: PUSH
20357: LD_INT 0
20359: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20360: LD_INT 35
20362: PPUSH
20363: CALL_OW 67
// p := p + 1 ;
20367: LD_ADDR_VAR 0 3
20371: PUSH
20372: LD_VAR 0 3
20376: PUSH
20377: LD_INT 1
20379: PLUS
20380: ST_TO_ADDR
// for i in tmp do
20381: LD_ADDR_VAR 0 1
20385: PUSH
20386: LD_VAR 0 2
20390: PUSH
20391: FOR_IN
20392: IFFALSE 20423
// if GetLives ( i ) < 1000 then
20394: LD_VAR 0 1
20398: PPUSH
20399: CALL_OW 256
20403: PUSH
20404: LD_INT 1000
20406: LESS
20407: IFFALSE 20421
// SetLives ( i , 1000 ) ;
20409: LD_VAR 0 1
20413: PPUSH
20414: LD_INT 1000
20416: PPUSH
20417: CALL_OW 234
20421: GO 20391
20423: POP
20424: POP
// until p > 20 ;
20425: LD_VAR 0 3
20429: PUSH
20430: LD_INT 20
20432: GREATER
20433: IFFALSE 20360
// end ;
20435: PPOPN 3
20437: END
// every 0 0$1 trigger StreamModeActive and sTime do
20438: LD_EXP 43
20442: PUSH
20443: LD_EXP 94
20447: AND
20448: IFFALSE 20483
20450: GO 20452
20452: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20453: LD_INT 28
20455: PPUSH
20456: LD_OWVAR 2
20460: PPUSH
20461: LD_INT 2
20463: PPUSH
20464: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20468: LD_INT 30
20470: PPUSH
20471: LD_OWVAR 2
20475: PPUSH
20476: LD_INT 2
20478: PPUSH
20479: CALL_OW 322
// end ;
20483: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20484: LD_EXP 43
20488: PUSH
20489: LD_EXP 95
20493: AND
20494: IFFALSE 20615
20496: GO 20498
20498: DISABLE
20499: LD_INT 0
20501: PPUSH
20502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20503: LD_ADDR_VAR 0 2
20507: PUSH
20508: LD_INT 22
20510: PUSH
20511: LD_OWVAR 2
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 21
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 3
20532: PUSH
20533: LD_INT 23
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: LIST
20551: PPUSH
20552: CALL_OW 69
20556: ST_TO_ADDR
// if not tmp then
20557: LD_VAR 0 2
20561: NOT
20562: IFFALSE 20566
// exit ;
20564: GO 20615
// for i in tmp do
20566: LD_ADDR_VAR 0 1
20570: PUSH
20571: LD_VAR 0 2
20575: PUSH
20576: FOR_IN
20577: IFFALSE 20613
// begin if Crawls ( i ) then
20579: LD_VAR 0 1
20583: PPUSH
20584: CALL_OW 318
20588: IFFALSE 20599
// ComWalk ( i ) ;
20590: LD_VAR 0 1
20594: PPUSH
20595: CALL_OW 138
// SetClass ( i , 2 ) ;
20599: LD_VAR 0 1
20603: PPUSH
20604: LD_INT 2
20606: PPUSH
20607: CALL_OW 336
// end ;
20611: GO 20576
20613: POP
20614: POP
// end ;
20615: PPOPN 2
20617: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20618: LD_EXP 43
20622: PUSH
20623: LD_EXP 96
20627: AND
20628: IFFALSE 20909
20630: GO 20632
20632: DISABLE
20633: LD_INT 0
20635: PPUSH
20636: PPUSH
20637: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20638: LD_OWVAR 2
20642: PPUSH
20643: LD_INT 9
20645: PPUSH
20646: LD_INT 1
20648: PPUSH
20649: LD_INT 1
20651: PPUSH
20652: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20656: LD_INT 9
20658: PPUSH
20659: LD_OWVAR 2
20663: PPUSH
20664: CALL_OW 343
// uc_side := 9 ;
20668: LD_ADDR_OWVAR 20
20672: PUSH
20673: LD_INT 9
20675: ST_TO_ADDR
// uc_nation := 2 ;
20676: LD_ADDR_OWVAR 21
20680: PUSH
20681: LD_INT 2
20683: ST_TO_ADDR
// hc_name := Dark Warrior ;
20684: LD_ADDR_OWVAR 26
20688: PUSH
20689: LD_STRING Dark Warrior
20691: ST_TO_ADDR
// hc_gallery :=  ;
20692: LD_ADDR_OWVAR 33
20696: PUSH
20697: LD_STRING 
20699: ST_TO_ADDR
// hc_noskilllimit := true ;
20700: LD_ADDR_OWVAR 76
20704: PUSH
20705: LD_INT 1
20707: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20708: LD_ADDR_OWVAR 31
20712: PUSH
20713: LD_INT 30
20715: PUSH
20716: LD_INT 30
20718: PUSH
20719: LD_INT 30
20721: PUSH
20722: LD_INT 30
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: ST_TO_ADDR
// un := CreateHuman ;
20731: LD_ADDR_VAR 0 3
20735: PUSH
20736: CALL_OW 44
20740: ST_TO_ADDR
// hc_noskilllimit := false ;
20741: LD_ADDR_OWVAR 76
20745: PUSH
20746: LD_INT 0
20748: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20749: LD_VAR 0 3
20753: PPUSH
20754: LD_INT 1
20756: PPUSH
20757: CALL_OW 51
// p := 0 ;
20761: LD_ADDR_VAR 0 2
20765: PUSH
20766: LD_INT 0
20768: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20769: LD_INT 35
20771: PPUSH
20772: CALL_OW 67
// p := p + 1 ;
20776: LD_ADDR_VAR 0 2
20780: PUSH
20781: LD_VAR 0 2
20785: PUSH
20786: LD_INT 1
20788: PLUS
20789: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20790: LD_VAR 0 3
20794: PPUSH
20795: CALL_OW 256
20799: PUSH
20800: LD_INT 1000
20802: LESS
20803: IFFALSE 20817
// SetLives ( un , 1000 ) ;
20805: LD_VAR 0 3
20809: PPUSH
20810: LD_INT 1000
20812: PPUSH
20813: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20817: LD_VAR 0 3
20821: PPUSH
20822: LD_INT 81
20824: PUSH
20825: LD_OWVAR 2
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 91
20836: PUSH
20837: LD_VAR 0 3
20841: PUSH
20842: LD_INT 30
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: LIST
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PPUSH
20854: CALL_OW 69
20858: PPUSH
20859: LD_VAR 0 3
20863: PPUSH
20864: CALL_OW 74
20868: PPUSH
20869: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
20873: LD_VAR 0 2
20877: PUSH
20878: LD_INT 60
20880: GREATER
20881: PUSH
20882: LD_VAR 0 3
20886: PPUSH
20887: CALL_OW 301
20891: OR
20892: IFFALSE 20769
// if un then
20894: LD_VAR 0 3
20898: IFFALSE 20909
// RemoveUnit ( un ) ;
20900: LD_VAR 0 3
20904: PPUSH
20905: CALL_OW 64
// end ;
20909: PPOPN 3
20911: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20912: LD_INT 0
20914: PPUSH
// case cmd of 301 :
20915: LD_VAR 0 1
20919: PUSH
20920: LD_INT 301
20922: DOUBLE
20923: EQUAL
20924: IFTRUE 20928
20926: GO 20960
20928: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20929: LD_VAR 0 6
20933: PPUSH
20934: LD_VAR 0 7
20938: PPUSH
20939: LD_VAR 0 8
20943: PPUSH
20944: LD_VAR 0 4
20948: PPUSH
20949: LD_VAR 0 5
20953: PPUSH
20954: CALL 22161 0 5
20958: GO 21081
20960: LD_INT 302
20962: DOUBLE
20963: EQUAL
20964: IFTRUE 20968
20966: GO 21005
20968: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20969: LD_VAR 0 6
20973: PPUSH
20974: LD_VAR 0 7
20978: PPUSH
20979: LD_VAR 0 8
20983: PPUSH
20984: LD_VAR 0 9
20988: PPUSH
20989: LD_VAR 0 4
20993: PPUSH
20994: LD_VAR 0 5
20998: PPUSH
20999: CALL 22252 0 6
21003: GO 21081
21005: LD_INT 303
21007: DOUBLE
21008: EQUAL
21009: IFTRUE 21013
21011: GO 21050
21013: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21014: LD_VAR 0 6
21018: PPUSH
21019: LD_VAR 0 7
21023: PPUSH
21024: LD_VAR 0 8
21028: PPUSH
21029: LD_VAR 0 9
21033: PPUSH
21034: LD_VAR 0 4
21038: PPUSH
21039: LD_VAR 0 5
21043: PPUSH
21044: CALL 21086 0 6
21048: GO 21081
21050: LD_INT 304
21052: DOUBLE
21053: EQUAL
21054: IFTRUE 21058
21056: GO 21080
21058: POP
// hHackTeleport ( unit , x , y ) ; end ;
21059: LD_VAR 0 2
21063: PPUSH
21064: LD_VAR 0 4
21068: PPUSH
21069: LD_VAR 0 5
21073: PPUSH
21074: CALL 22845 0 3
21078: GO 21081
21080: POP
// end ;
21081: LD_VAR 0 12
21085: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21086: LD_INT 0
21088: PPUSH
21089: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21090: LD_VAR 0 1
21094: PUSH
21095: LD_INT 1
21097: LESS
21098: PUSH
21099: LD_VAR 0 1
21103: PUSH
21104: LD_INT 3
21106: GREATER
21107: OR
21108: PUSH
21109: LD_VAR 0 5
21113: PPUSH
21114: LD_VAR 0 6
21118: PPUSH
21119: CALL_OW 428
21123: OR
21124: IFFALSE 21128
// exit ;
21126: GO 21848
// uc_side := your_side ;
21128: LD_ADDR_OWVAR 20
21132: PUSH
21133: LD_OWVAR 2
21137: ST_TO_ADDR
// uc_nation := nation ;
21138: LD_ADDR_OWVAR 21
21142: PUSH
21143: LD_VAR 0 1
21147: ST_TO_ADDR
// bc_level = 1 ;
21148: LD_ADDR_OWVAR 43
21152: PUSH
21153: LD_INT 1
21155: ST_TO_ADDR
// case btype of 1 :
21156: LD_VAR 0 2
21160: PUSH
21161: LD_INT 1
21163: DOUBLE
21164: EQUAL
21165: IFTRUE 21169
21167: GO 21180
21169: POP
// bc_type := b_depot ; 2 :
21170: LD_ADDR_OWVAR 42
21174: PUSH
21175: LD_INT 0
21177: ST_TO_ADDR
21178: GO 21792
21180: LD_INT 2
21182: DOUBLE
21183: EQUAL
21184: IFTRUE 21188
21186: GO 21199
21188: POP
// bc_type := b_warehouse ; 3 :
21189: LD_ADDR_OWVAR 42
21193: PUSH
21194: LD_INT 1
21196: ST_TO_ADDR
21197: GO 21792
21199: LD_INT 3
21201: DOUBLE
21202: EQUAL
21203: IFTRUE 21207
21205: GO 21218
21207: POP
// bc_type := b_lab ; 4 .. 9 :
21208: LD_ADDR_OWVAR 42
21212: PUSH
21213: LD_INT 6
21215: ST_TO_ADDR
21216: GO 21792
21218: LD_INT 4
21220: DOUBLE
21221: GREATEREQUAL
21222: IFFALSE 21230
21224: LD_INT 9
21226: DOUBLE
21227: LESSEQUAL
21228: IFTRUE 21232
21230: GO 21284
21232: POP
// begin bc_type := b_lab_half ;
21233: LD_ADDR_OWVAR 42
21237: PUSH
21238: LD_INT 7
21240: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21241: LD_ADDR_OWVAR 44
21245: PUSH
21246: LD_INT 10
21248: PUSH
21249: LD_INT 11
21251: PUSH
21252: LD_INT 12
21254: PUSH
21255: LD_INT 15
21257: PUSH
21258: LD_INT 14
21260: PUSH
21261: LD_INT 13
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: PUSH
21272: LD_VAR 0 2
21276: PUSH
21277: LD_INT 3
21279: MINUS
21280: ARRAY
21281: ST_TO_ADDR
// end ; 10 .. 13 :
21282: GO 21792
21284: LD_INT 10
21286: DOUBLE
21287: GREATEREQUAL
21288: IFFALSE 21296
21290: LD_INT 13
21292: DOUBLE
21293: LESSEQUAL
21294: IFTRUE 21298
21296: GO 21375
21298: POP
// begin bc_type := b_lab_full ;
21299: LD_ADDR_OWVAR 42
21303: PUSH
21304: LD_INT 8
21306: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21307: LD_ADDR_OWVAR 44
21311: PUSH
21312: LD_INT 10
21314: PUSH
21315: LD_INT 12
21317: PUSH
21318: LD_INT 14
21320: PUSH
21321: LD_INT 13
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: PUSH
21330: LD_VAR 0 2
21334: PUSH
21335: LD_INT 9
21337: MINUS
21338: ARRAY
21339: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21340: LD_ADDR_OWVAR 45
21344: PUSH
21345: LD_INT 11
21347: PUSH
21348: LD_INT 15
21350: PUSH
21351: LD_INT 12
21353: PUSH
21354: LD_INT 15
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: PUSH
21363: LD_VAR 0 2
21367: PUSH
21368: LD_INT 9
21370: MINUS
21371: ARRAY
21372: ST_TO_ADDR
// end ; 14 :
21373: GO 21792
21375: LD_INT 14
21377: DOUBLE
21378: EQUAL
21379: IFTRUE 21383
21381: GO 21394
21383: POP
// bc_type := b_workshop ; 15 :
21384: LD_ADDR_OWVAR 42
21388: PUSH
21389: LD_INT 2
21391: ST_TO_ADDR
21392: GO 21792
21394: LD_INT 15
21396: DOUBLE
21397: EQUAL
21398: IFTRUE 21402
21400: GO 21413
21402: POP
// bc_type := b_factory ; 16 :
21403: LD_ADDR_OWVAR 42
21407: PUSH
21408: LD_INT 3
21410: ST_TO_ADDR
21411: GO 21792
21413: LD_INT 16
21415: DOUBLE
21416: EQUAL
21417: IFTRUE 21421
21419: GO 21432
21421: POP
// bc_type := b_ext_gun ; 17 :
21422: LD_ADDR_OWVAR 42
21426: PUSH
21427: LD_INT 17
21429: ST_TO_ADDR
21430: GO 21792
21432: LD_INT 17
21434: DOUBLE
21435: EQUAL
21436: IFTRUE 21440
21438: GO 21468
21440: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21441: LD_ADDR_OWVAR 42
21445: PUSH
21446: LD_INT 19
21448: PUSH
21449: LD_INT 23
21451: PUSH
21452: LD_INT 19
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: LIST
21459: PUSH
21460: LD_VAR 0 1
21464: ARRAY
21465: ST_TO_ADDR
21466: GO 21792
21468: LD_INT 18
21470: DOUBLE
21471: EQUAL
21472: IFTRUE 21476
21474: GO 21487
21476: POP
// bc_type := b_ext_radar ; 19 :
21477: LD_ADDR_OWVAR 42
21481: PUSH
21482: LD_INT 20
21484: ST_TO_ADDR
21485: GO 21792
21487: LD_INT 19
21489: DOUBLE
21490: EQUAL
21491: IFTRUE 21495
21493: GO 21506
21495: POP
// bc_type := b_ext_radio ; 20 :
21496: LD_ADDR_OWVAR 42
21500: PUSH
21501: LD_INT 22
21503: ST_TO_ADDR
21504: GO 21792
21506: LD_INT 20
21508: DOUBLE
21509: EQUAL
21510: IFTRUE 21514
21512: GO 21525
21514: POP
// bc_type := b_ext_siberium ; 21 :
21515: LD_ADDR_OWVAR 42
21519: PUSH
21520: LD_INT 21
21522: ST_TO_ADDR
21523: GO 21792
21525: LD_INT 21
21527: DOUBLE
21528: EQUAL
21529: IFTRUE 21533
21531: GO 21544
21533: POP
// bc_type := b_ext_computer ; 22 :
21534: LD_ADDR_OWVAR 42
21538: PUSH
21539: LD_INT 24
21541: ST_TO_ADDR
21542: GO 21792
21544: LD_INT 22
21546: DOUBLE
21547: EQUAL
21548: IFTRUE 21552
21550: GO 21563
21552: POP
// bc_type := b_ext_track ; 23 :
21553: LD_ADDR_OWVAR 42
21557: PUSH
21558: LD_INT 16
21560: ST_TO_ADDR
21561: GO 21792
21563: LD_INT 23
21565: DOUBLE
21566: EQUAL
21567: IFTRUE 21571
21569: GO 21582
21571: POP
// bc_type := b_ext_laser ; 24 :
21572: LD_ADDR_OWVAR 42
21576: PUSH
21577: LD_INT 25
21579: ST_TO_ADDR
21580: GO 21792
21582: LD_INT 24
21584: DOUBLE
21585: EQUAL
21586: IFTRUE 21590
21588: GO 21601
21590: POP
// bc_type := b_control_tower ; 25 :
21591: LD_ADDR_OWVAR 42
21595: PUSH
21596: LD_INT 36
21598: ST_TO_ADDR
21599: GO 21792
21601: LD_INT 25
21603: DOUBLE
21604: EQUAL
21605: IFTRUE 21609
21607: GO 21620
21609: POP
// bc_type := b_breastwork ; 26 :
21610: LD_ADDR_OWVAR 42
21614: PUSH
21615: LD_INT 31
21617: ST_TO_ADDR
21618: GO 21792
21620: LD_INT 26
21622: DOUBLE
21623: EQUAL
21624: IFTRUE 21628
21626: GO 21639
21628: POP
// bc_type := b_bunker ; 27 :
21629: LD_ADDR_OWVAR 42
21633: PUSH
21634: LD_INT 32
21636: ST_TO_ADDR
21637: GO 21792
21639: LD_INT 27
21641: DOUBLE
21642: EQUAL
21643: IFTRUE 21647
21645: GO 21658
21647: POP
// bc_type := b_turret ; 28 :
21648: LD_ADDR_OWVAR 42
21652: PUSH
21653: LD_INT 33
21655: ST_TO_ADDR
21656: GO 21792
21658: LD_INT 28
21660: DOUBLE
21661: EQUAL
21662: IFTRUE 21666
21664: GO 21677
21666: POP
// bc_type := b_armoury ; 29 :
21667: LD_ADDR_OWVAR 42
21671: PUSH
21672: LD_INT 4
21674: ST_TO_ADDR
21675: GO 21792
21677: LD_INT 29
21679: DOUBLE
21680: EQUAL
21681: IFTRUE 21685
21683: GO 21696
21685: POP
// bc_type := b_barracks ; 30 :
21686: LD_ADDR_OWVAR 42
21690: PUSH
21691: LD_INT 5
21693: ST_TO_ADDR
21694: GO 21792
21696: LD_INT 30
21698: DOUBLE
21699: EQUAL
21700: IFTRUE 21704
21702: GO 21715
21704: POP
// bc_type := b_solar_power ; 31 :
21705: LD_ADDR_OWVAR 42
21709: PUSH
21710: LD_INT 27
21712: ST_TO_ADDR
21713: GO 21792
21715: LD_INT 31
21717: DOUBLE
21718: EQUAL
21719: IFTRUE 21723
21721: GO 21734
21723: POP
// bc_type := b_oil_power ; 32 :
21724: LD_ADDR_OWVAR 42
21728: PUSH
21729: LD_INT 26
21731: ST_TO_ADDR
21732: GO 21792
21734: LD_INT 32
21736: DOUBLE
21737: EQUAL
21738: IFTRUE 21742
21740: GO 21753
21742: POP
// bc_type := b_siberite_power ; 33 :
21743: LD_ADDR_OWVAR 42
21747: PUSH
21748: LD_INT 28
21750: ST_TO_ADDR
21751: GO 21792
21753: LD_INT 33
21755: DOUBLE
21756: EQUAL
21757: IFTRUE 21761
21759: GO 21772
21761: POP
// bc_type := b_oil_mine ; 34 :
21762: LD_ADDR_OWVAR 42
21766: PUSH
21767: LD_INT 29
21769: ST_TO_ADDR
21770: GO 21792
21772: LD_INT 34
21774: DOUBLE
21775: EQUAL
21776: IFTRUE 21780
21778: GO 21791
21780: POP
// bc_type := b_siberite_mine ; end ;
21781: LD_ADDR_OWVAR 42
21785: PUSH
21786: LD_INT 30
21788: ST_TO_ADDR
21789: GO 21792
21791: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21792: LD_ADDR_VAR 0 8
21796: PUSH
21797: LD_VAR 0 5
21801: PPUSH
21802: LD_VAR 0 6
21806: PPUSH
21807: LD_VAR 0 3
21811: PPUSH
21812: CALL_OW 47
21816: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21817: LD_OWVAR 42
21821: PUSH
21822: LD_INT 32
21824: PUSH
21825: LD_INT 33
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: IN
21832: IFFALSE 21848
// PlaceWeaponTurret ( b , weapon ) ;
21834: LD_VAR 0 8
21838: PPUSH
21839: LD_VAR 0 4
21843: PPUSH
21844: CALL_OW 431
// end ;
21848: LD_VAR 0 7
21852: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21853: LD_INT 0
21855: PPUSH
21856: PPUSH
21857: PPUSH
21858: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21859: LD_ADDR_VAR 0 4
21863: PUSH
21864: LD_INT 22
21866: PUSH
21867: LD_OWVAR 2
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 2
21878: PUSH
21879: LD_INT 30
21881: PUSH
21882: LD_INT 0
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 30
21891: PUSH
21892: LD_INT 1
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: LIST
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PPUSH
21908: CALL_OW 69
21912: ST_TO_ADDR
// if not tmp then
21913: LD_VAR 0 4
21917: NOT
21918: IFFALSE 21922
// exit ;
21920: GO 21981
// for i in tmp do
21922: LD_ADDR_VAR 0 2
21926: PUSH
21927: LD_VAR 0 4
21931: PUSH
21932: FOR_IN
21933: IFFALSE 21979
// for j = 1 to 3 do
21935: LD_ADDR_VAR 0 3
21939: PUSH
21940: DOUBLE
21941: LD_INT 1
21943: DEC
21944: ST_TO_ADDR
21945: LD_INT 3
21947: PUSH
21948: FOR_TO
21949: IFFALSE 21975
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21951: LD_VAR 0 2
21955: PPUSH
21956: CALL_OW 274
21960: PPUSH
21961: LD_VAR 0 3
21965: PPUSH
21966: LD_INT 99999
21968: PPUSH
21969: CALL_OW 277
21973: GO 21948
21975: POP
21976: POP
21977: GO 21932
21979: POP
21980: POP
// end ;
21981: LD_VAR 0 1
21985: RET
// export function hHackSetLevel10 ; var i , j ; begin
21986: LD_INT 0
21988: PPUSH
21989: PPUSH
21990: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21991: LD_ADDR_VAR 0 2
21995: PUSH
21996: LD_INT 21
21998: PUSH
21999: LD_INT 1
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PPUSH
22006: CALL_OW 69
22010: PUSH
22011: FOR_IN
22012: IFFALSE 22064
// if IsSelected ( i ) then
22014: LD_VAR 0 2
22018: PPUSH
22019: CALL_OW 306
22023: IFFALSE 22062
// begin for j := 1 to 4 do
22025: LD_ADDR_VAR 0 3
22029: PUSH
22030: DOUBLE
22031: LD_INT 1
22033: DEC
22034: ST_TO_ADDR
22035: LD_INT 4
22037: PUSH
22038: FOR_TO
22039: IFFALSE 22060
// SetSkill ( i , j , 10 ) ;
22041: LD_VAR 0 2
22045: PPUSH
22046: LD_VAR 0 3
22050: PPUSH
22051: LD_INT 10
22053: PPUSH
22054: CALL_OW 237
22058: GO 22038
22060: POP
22061: POP
// end ;
22062: GO 22011
22064: POP
22065: POP
// end ;
22066: LD_VAR 0 1
22070: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22071: LD_INT 0
22073: PPUSH
22074: PPUSH
22075: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: LD_INT 22
22083: PUSH
22084: LD_OWVAR 2
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 21
22095: PUSH
22096: LD_INT 1
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PPUSH
22107: CALL_OW 69
22111: PUSH
22112: FOR_IN
22113: IFFALSE 22154
// begin for j := 1 to 4 do
22115: LD_ADDR_VAR 0 3
22119: PUSH
22120: DOUBLE
22121: LD_INT 1
22123: DEC
22124: ST_TO_ADDR
22125: LD_INT 4
22127: PUSH
22128: FOR_TO
22129: IFFALSE 22150
// SetSkill ( i , j , 10 ) ;
22131: LD_VAR 0 2
22135: PPUSH
22136: LD_VAR 0 3
22140: PPUSH
22141: LD_INT 10
22143: PPUSH
22144: CALL_OW 237
22148: GO 22128
22150: POP
22151: POP
// end ;
22152: GO 22112
22154: POP
22155: POP
// end ;
22156: LD_VAR 0 1
22160: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22161: LD_INT 0
22163: PPUSH
// uc_side := your_side ;
22164: LD_ADDR_OWVAR 20
22168: PUSH
22169: LD_OWVAR 2
22173: ST_TO_ADDR
// uc_nation := nation ;
22174: LD_ADDR_OWVAR 21
22178: PUSH
22179: LD_VAR 0 1
22183: ST_TO_ADDR
// InitHc ;
22184: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22188: LD_INT 0
22190: PPUSH
22191: LD_VAR 0 2
22195: PPUSH
22196: LD_VAR 0 3
22200: PPUSH
22201: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22205: LD_VAR 0 4
22209: PPUSH
22210: LD_VAR 0 5
22214: PPUSH
22215: CALL_OW 428
22219: PUSH
22220: LD_INT 0
22222: EQUAL
22223: IFFALSE 22247
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22225: CALL_OW 44
22229: PPUSH
22230: LD_VAR 0 4
22234: PPUSH
22235: LD_VAR 0 5
22239: PPUSH
22240: LD_INT 1
22242: PPUSH
22243: CALL_OW 48
// end ;
22247: LD_VAR 0 6
22251: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22252: LD_INT 0
22254: PPUSH
22255: PPUSH
// uc_side := your_side ;
22256: LD_ADDR_OWVAR 20
22260: PUSH
22261: LD_OWVAR 2
22265: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22266: LD_VAR 0 1
22270: PUSH
22271: LD_INT 1
22273: PUSH
22274: LD_INT 2
22276: PUSH
22277: LD_INT 3
22279: PUSH
22280: LD_INT 4
22282: PUSH
22283: LD_INT 5
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: IN
22293: IFFALSE 22305
// uc_nation := nation_american else
22295: LD_ADDR_OWVAR 21
22299: PUSH
22300: LD_INT 1
22302: ST_TO_ADDR
22303: GO 22348
// if chassis in [ 11 , 12 , 13 , 14 ] then
22305: LD_VAR 0 1
22309: PUSH
22310: LD_INT 11
22312: PUSH
22313: LD_INT 12
22315: PUSH
22316: LD_INT 13
22318: PUSH
22319: LD_INT 14
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: IN
22328: IFFALSE 22340
// uc_nation := nation_arabian else
22330: LD_ADDR_OWVAR 21
22334: PUSH
22335: LD_INT 2
22337: ST_TO_ADDR
22338: GO 22348
// uc_nation := nation_russian ;
22340: LD_ADDR_OWVAR 21
22344: PUSH
22345: LD_INT 3
22347: ST_TO_ADDR
// vc_chassis := chassis ;
22348: LD_ADDR_OWVAR 37
22352: PUSH
22353: LD_VAR 0 1
22357: ST_TO_ADDR
// vc_engine := engine ;
22358: LD_ADDR_OWVAR 39
22362: PUSH
22363: LD_VAR 0 2
22367: ST_TO_ADDR
// vc_control := control ;
22368: LD_ADDR_OWVAR 38
22372: PUSH
22373: LD_VAR 0 3
22377: ST_TO_ADDR
// vc_weapon := weapon ;
22378: LD_ADDR_OWVAR 40
22382: PUSH
22383: LD_VAR 0 4
22387: ST_TO_ADDR
// un := CreateVehicle ;
22388: LD_ADDR_VAR 0 8
22392: PUSH
22393: CALL_OW 45
22397: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22398: LD_VAR 0 8
22402: PPUSH
22403: LD_INT 0
22405: PPUSH
22406: LD_INT 5
22408: PPUSH
22409: CALL_OW 12
22413: PPUSH
22414: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22418: LD_VAR 0 8
22422: PPUSH
22423: LD_VAR 0 5
22427: PPUSH
22428: LD_VAR 0 6
22432: PPUSH
22433: LD_INT 1
22435: PPUSH
22436: CALL_OW 48
// end ;
22440: LD_VAR 0 7
22444: RET
// export hInvincible ; every 1 do
22445: GO 22447
22447: DISABLE
// hInvincible := [ ] ;
22448: LD_ADDR_EXP 97
22452: PUSH
22453: EMPTY
22454: ST_TO_ADDR
22455: END
// every 10 do var i ;
22456: GO 22458
22458: DISABLE
22459: LD_INT 0
22461: PPUSH
// begin enable ;
22462: ENABLE
// if not hInvincible then
22463: LD_EXP 97
22467: NOT
22468: IFFALSE 22472
// exit ;
22470: GO 22516
// for i in hInvincible do
22472: LD_ADDR_VAR 0 1
22476: PUSH
22477: LD_EXP 97
22481: PUSH
22482: FOR_IN
22483: IFFALSE 22514
// if GetLives ( i ) < 1000 then
22485: LD_VAR 0 1
22489: PPUSH
22490: CALL_OW 256
22494: PUSH
22495: LD_INT 1000
22497: LESS
22498: IFFALSE 22512
// SetLives ( i , 1000 ) ;
22500: LD_VAR 0 1
22504: PPUSH
22505: LD_INT 1000
22507: PPUSH
22508: CALL_OW 234
22512: GO 22482
22514: POP
22515: POP
// end ;
22516: PPOPN 1
22518: END
// export function hHackInvincible ; var i ; begin
22519: LD_INT 0
22521: PPUSH
22522: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22523: LD_ADDR_VAR 0 2
22527: PUSH
22528: LD_INT 2
22530: PUSH
22531: LD_INT 21
22533: PUSH
22534: LD_INT 1
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 21
22543: PUSH
22544: LD_INT 2
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: PPUSH
22556: CALL_OW 69
22560: PUSH
22561: FOR_IN
22562: IFFALSE 22623
// if IsSelected ( i ) then
22564: LD_VAR 0 2
22568: PPUSH
22569: CALL_OW 306
22573: IFFALSE 22621
// begin if i in hInvincible then
22575: LD_VAR 0 2
22579: PUSH
22580: LD_EXP 97
22584: IN
22585: IFFALSE 22605
// hInvincible := hInvincible diff i else
22587: LD_ADDR_EXP 97
22591: PUSH
22592: LD_EXP 97
22596: PUSH
22597: LD_VAR 0 2
22601: DIFF
22602: ST_TO_ADDR
22603: GO 22621
// hInvincible := hInvincible union i ;
22605: LD_ADDR_EXP 97
22609: PUSH
22610: LD_EXP 97
22614: PUSH
22615: LD_VAR 0 2
22619: UNION
22620: ST_TO_ADDR
// end ;
22621: GO 22561
22623: POP
22624: POP
// end ;
22625: LD_VAR 0 1
22629: RET
// export function hHackInvisible ; var i , j ; begin
22630: LD_INT 0
22632: PPUSH
22633: PPUSH
22634: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22635: LD_ADDR_VAR 0 2
22639: PUSH
22640: LD_INT 21
22642: PUSH
22643: LD_INT 1
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PPUSH
22650: CALL_OW 69
22654: PUSH
22655: FOR_IN
22656: IFFALSE 22680
// if IsSelected ( i ) then
22658: LD_VAR 0 2
22662: PPUSH
22663: CALL_OW 306
22667: IFFALSE 22678
// ComForceInvisible ( i ) ;
22669: LD_VAR 0 2
22673: PPUSH
22674: CALL_OW 496
22678: GO 22655
22680: POP
22681: POP
// end ;
22682: LD_VAR 0 1
22686: RET
// export function hHackChangeYourSide ; begin
22687: LD_INT 0
22689: PPUSH
// if your_side = 8 then
22690: LD_OWVAR 2
22694: PUSH
22695: LD_INT 8
22697: EQUAL
22698: IFFALSE 22710
// your_side := 0 else
22700: LD_ADDR_OWVAR 2
22704: PUSH
22705: LD_INT 0
22707: ST_TO_ADDR
22708: GO 22724
// your_side := your_side + 1 ;
22710: LD_ADDR_OWVAR 2
22714: PUSH
22715: LD_OWVAR 2
22719: PUSH
22720: LD_INT 1
22722: PLUS
22723: ST_TO_ADDR
// end ;
22724: LD_VAR 0 1
22728: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22729: LD_INT 0
22731: PPUSH
22732: PPUSH
22733: PPUSH
// for i in all_units do
22734: LD_ADDR_VAR 0 2
22738: PUSH
22739: LD_OWVAR 3
22743: PUSH
22744: FOR_IN
22745: IFFALSE 22823
// if IsSelected ( i ) then
22747: LD_VAR 0 2
22751: PPUSH
22752: CALL_OW 306
22756: IFFALSE 22821
// begin j := GetSide ( i ) ;
22758: LD_ADDR_VAR 0 3
22762: PUSH
22763: LD_VAR 0 2
22767: PPUSH
22768: CALL_OW 255
22772: ST_TO_ADDR
// if j = 8 then
22773: LD_VAR 0 3
22777: PUSH
22778: LD_INT 8
22780: EQUAL
22781: IFFALSE 22793
// j := 0 else
22783: LD_ADDR_VAR 0 3
22787: PUSH
22788: LD_INT 0
22790: ST_TO_ADDR
22791: GO 22807
// j := j + 1 ;
22793: LD_ADDR_VAR 0 3
22797: PUSH
22798: LD_VAR 0 3
22802: PUSH
22803: LD_INT 1
22805: PLUS
22806: ST_TO_ADDR
// SetSide ( i , j ) ;
22807: LD_VAR 0 2
22811: PPUSH
22812: LD_VAR 0 3
22816: PPUSH
22817: CALL_OW 235
// end ;
22821: GO 22744
22823: POP
22824: POP
// end ;
22825: LD_VAR 0 1
22829: RET
// export function hHackFog ; begin
22830: LD_INT 0
22832: PPUSH
// FogOff ( true ) ;
22833: LD_INT 1
22835: PPUSH
22836: CALL_OW 344
// end ;
22840: LD_VAR 0 1
22844: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22845: LD_INT 0
22847: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22848: LD_VAR 0 1
22852: PPUSH
22853: LD_VAR 0 2
22857: PPUSH
22858: LD_VAR 0 3
22862: PPUSH
22863: LD_INT 1
22865: PPUSH
22866: LD_INT 1
22868: PPUSH
22869: CALL_OW 483
// CenterOnXY ( x , y ) ;
22873: LD_VAR 0 2
22877: PPUSH
22878: LD_VAR 0 3
22882: PPUSH
22883: CALL_OW 84
// end ; end_of_file
22887: LD_VAR 0 4
22891: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22892: LD_VAR 0 1
22896: PUSH
22897: LD_INT 200
22899: DOUBLE
22900: GREATEREQUAL
22901: IFFALSE 22909
22903: LD_INT 299
22905: DOUBLE
22906: LESSEQUAL
22907: IFTRUE 22911
22909: GO 22943
22911: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22912: LD_VAR 0 1
22916: PPUSH
22917: LD_VAR 0 2
22921: PPUSH
22922: LD_VAR 0 3
22926: PPUSH
22927: LD_VAR 0 4
22931: PPUSH
22932: LD_VAR 0 5
22936: PPUSH
22937: CALL 23187 0 5
22941: GO 23020
22943: LD_INT 300
22945: DOUBLE
22946: GREATEREQUAL
22947: IFFALSE 22955
22949: LD_INT 399
22951: DOUBLE
22952: LESSEQUAL
22953: IFTRUE 22957
22955: GO 23019
22957: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22958: LD_VAR 0 1
22962: PPUSH
22963: LD_VAR 0 2
22967: PPUSH
22968: LD_VAR 0 3
22972: PPUSH
22973: LD_VAR 0 4
22977: PPUSH
22978: LD_VAR 0 5
22982: PPUSH
22983: LD_VAR 0 6
22987: PPUSH
22988: LD_VAR 0 7
22992: PPUSH
22993: LD_VAR 0 8
22997: PPUSH
22998: LD_VAR 0 9
23002: PPUSH
23003: LD_VAR 0 10
23007: PPUSH
23008: LD_VAR 0 11
23012: PPUSH
23013: CALL 20912 0 11
23017: GO 23020
23019: POP
// end ;
23020: PPOPN 11
23022: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
23023: LD_VAR 0 1
23027: PPUSH
23028: LD_VAR 0 2
23032: PPUSH
23033: LD_VAR 0 3
23037: PPUSH
23038: LD_VAR 0 4
23042: PPUSH
23043: LD_VAR 0 5
23047: PPUSH
23048: CALL 23169 0 5
// end ; end_of_file
23052: PPOPN 5
23054: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23055: LD_INT 0
23057: PPUSH
23058: PPUSH
23059: PPUSH
23060: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23061: LD_VAR 0 1
23065: PPUSH
23066: CALL_OW 264
23070: PUSH
23071: LD_EXP 114
23075: EQUAL
23076: IFFALSE 23148
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23078: LD_INT 68
23080: PPUSH
23081: LD_VAR 0 1
23085: PPUSH
23086: CALL_OW 255
23090: PPUSH
23091: CALL_OW 321
23095: PUSH
23096: LD_INT 2
23098: EQUAL
23099: IFFALSE 23111
// eff := 70 else
23101: LD_ADDR_VAR 0 4
23105: PUSH
23106: LD_INT 70
23108: ST_TO_ADDR
23109: GO 23119
// eff := 30 ;
23111: LD_ADDR_VAR 0 4
23115: PUSH
23116: LD_INT 30
23118: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23119: LD_VAR 0 1
23123: PPUSH
23124: CALL_OW 250
23128: PPUSH
23129: LD_VAR 0 1
23133: PPUSH
23134: CALL_OW 251
23138: PPUSH
23139: LD_VAR 0 4
23143: PPUSH
23144: CALL_OW 495
// end ; end ;
23148: LD_VAR 0 2
23152: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23153: LD_INT 0
23155: PPUSH
// end ;
23156: LD_VAR 0 4
23160: RET
// export function SOS_Command ( cmd ) ; begin
23161: LD_INT 0
23163: PPUSH
// end ;
23164: LD_VAR 0 2
23168: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23169: LD_INT 0
23171: PPUSH
// if cmd = 121 then
23172: LD_VAR 0 1
23176: PUSH
23177: LD_INT 121
23179: EQUAL
23180: IFFALSE 23182
// end ;
23182: LD_VAR 0 6
23186: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23187: LD_INT 0
23189: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23190: LD_VAR 0 1
23194: PUSH
23195: LD_INT 250
23197: EQUAL
23198: PUSH
23199: LD_VAR 0 2
23203: PPUSH
23204: CALL_OW 264
23208: PUSH
23209: LD_EXP 117
23213: EQUAL
23214: AND
23215: IFFALSE 23236
// MinerPlaceMine ( unit , x , y ) ;
23217: LD_VAR 0 2
23221: PPUSH
23222: LD_VAR 0 4
23226: PPUSH
23227: LD_VAR 0 5
23231: PPUSH
23232: CALL 25585 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23236: LD_VAR 0 1
23240: PUSH
23241: LD_INT 251
23243: EQUAL
23244: PUSH
23245: LD_VAR 0 2
23249: PPUSH
23250: CALL_OW 264
23254: PUSH
23255: LD_EXP 117
23259: EQUAL
23260: AND
23261: IFFALSE 23282
// MinerDetonateMine ( unit , x , y ) ;
23263: LD_VAR 0 2
23267: PPUSH
23268: LD_VAR 0 4
23272: PPUSH
23273: LD_VAR 0 5
23277: PPUSH
23278: CALL 25862 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23282: LD_VAR 0 1
23286: PUSH
23287: LD_INT 252
23289: EQUAL
23290: PUSH
23291: LD_VAR 0 2
23295: PPUSH
23296: CALL_OW 264
23300: PUSH
23301: LD_EXP 117
23305: EQUAL
23306: AND
23307: IFFALSE 23328
// MinerCreateMinefield ( unit , x , y ) ;
23309: LD_VAR 0 2
23313: PPUSH
23314: LD_VAR 0 4
23318: PPUSH
23319: LD_VAR 0 5
23323: PPUSH
23324: CALL 26279 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23328: LD_VAR 0 1
23332: PUSH
23333: LD_INT 253
23335: EQUAL
23336: PUSH
23337: LD_VAR 0 2
23341: PPUSH
23342: CALL_OW 257
23346: PUSH
23347: LD_INT 5
23349: EQUAL
23350: AND
23351: IFFALSE 23372
// ComBinocular ( unit , x , y ) ;
23353: LD_VAR 0 2
23357: PPUSH
23358: LD_VAR 0 4
23362: PPUSH
23363: LD_VAR 0 5
23367: PPUSH
23368: CALL 26650 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23372: LD_VAR 0 1
23376: PUSH
23377: LD_INT 254
23379: EQUAL
23380: PUSH
23381: LD_VAR 0 2
23385: PPUSH
23386: CALL_OW 264
23390: PUSH
23391: LD_EXP 112
23395: EQUAL
23396: AND
23397: PUSH
23398: LD_VAR 0 3
23402: PPUSH
23403: CALL_OW 263
23407: PUSH
23408: LD_INT 3
23410: EQUAL
23411: AND
23412: IFFALSE 23428
// HackDestroyVehicle ( unit , selectedUnit ) ;
23414: LD_VAR 0 2
23418: PPUSH
23419: LD_VAR 0 3
23423: PPUSH
23424: CALL 24945 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23428: LD_VAR 0 1
23432: PUSH
23433: LD_INT 255
23435: EQUAL
23436: PUSH
23437: LD_VAR 0 2
23441: PPUSH
23442: CALL_OW 264
23446: PUSH
23447: LD_INT 14
23449: PUSH
23450: LD_INT 53
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: IN
23457: AND
23458: PUSH
23459: LD_VAR 0 4
23463: PPUSH
23464: LD_VAR 0 5
23468: PPUSH
23469: CALL_OW 488
23473: AND
23474: IFFALSE 23498
// CutTreeXYR ( unit , x , y , 12 ) ;
23476: LD_VAR 0 2
23480: PPUSH
23481: LD_VAR 0 4
23485: PPUSH
23486: LD_VAR 0 5
23490: PPUSH
23491: LD_INT 12
23493: PPUSH
23494: CALL 23511 0 4
// end ;
23498: LD_VAR 0 6
23502: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
23503: LD_INT 0
23505: PPUSH
// end ;
23506: LD_VAR 0 4
23510: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23511: LD_INT 0
23513: PPUSH
23514: PPUSH
23515: PPUSH
23516: PPUSH
23517: PPUSH
23518: PPUSH
23519: PPUSH
23520: PPUSH
23521: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23522: LD_VAR 0 1
23526: NOT
23527: PUSH
23528: LD_VAR 0 2
23532: PPUSH
23533: LD_VAR 0 3
23537: PPUSH
23538: CALL_OW 488
23542: NOT
23543: OR
23544: PUSH
23545: LD_VAR 0 4
23549: NOT
23550: OR
23551: IFFALSE 23555
// exit ;
23553: GO 23895
// list := [ ] ;
23555: LD_ADDR_VAR 0 13
23559: PUSH
23560: EMPTY
23561: ST_TO_ADDR
// if x - r < 0 then
23562: LD_VAR 0 2
23566: PUSH
23567: LD_VAR 0 4
23571: MINUS
23572: PUSH
23573: LD_INT 0
23575: LESS
23576: IFFALSE 23588
// min_x := 0 else
23578: LD_ADDR_VAR 0 7
23582: PUSH
23583: LD_INT 0
23585: ST_TO_ADDR
23586: GO 23604
// min_x := x - r ;
23588: LD_ADDR_VAR 0 7
23592: PUSH
23593: LD_VAR 0 2
23597: PUSH
23598: LD_VAR 0 4
23602: MINUS
23603: ST_TO_ADDR
// if y - r < 0 then
23604: LD_VAR 0 3
23608: PUSH
23609: LD_VAR 0 4
23613: MINUS
23614: PUSH
23615: LD_INT 0
23617: LESS
23618: IFFALSE 23630
// min_y := 0 else
23620: LD_ADDR_VAR 0 8
23624: PUSH
23625: LD_INT 0
23627: ST_TO_ADDR
23628: GO 23646
// min_y := y - r ;
23630: LD_ADDR_VAR 0 8
23634: PUSH
23635: LD_VAR 0 3
23639: PUSH
23640: LD_VAR 0 4
23644: MINUS
23645: ST_TO_ADDR
// max_x := x + r ;
23646: LD_ADDR_VAR 0 9
23650: PUSH
23651: LD_VAR 0 2
23655: PUSH
23656: LD_VAR 0 4
23660: PLUS
23661: ST_TO_ADDR
// max_y := y + r ;
23662: LD_ADDR_VAR 0 10
23666: PUSH
23667: LD_VAR 0 3
23671: PUSH
23672: LD_VAR 0 4
23676: PLUS
23677: ST_TO_ADDR
// for _x = min_x to max_x do
23678: LD_ADDR_VAR 0 11
23682: PUSH
23683: DOUBLE
23684: LD_VAR 0 7
23688: DEC
23689: ST_TO_ADDR
23690: LD_VAR 0 9
23694: PUSH
23695: FOR_TO
23696: IFFALSE 23813
// for _y = min_y to max_y do
23698: LD_ADDR_VAR 0 12
23702: PUSH
23703: DOUBLE
23704: LD_VAR 0 8
23708: DEC
23709: ST_TO_ADDR
23710: LD_VAR 0 10
23714: PUSH
23715: FOR_TO
23716: IFFALSE 23809
// begin if not ValidHex ( _x , _y ) then
23718: LD_VAR 0 11
23722: PPUSH
23723: LD_VAR 0 12
23727: PPUSH
23728: CALL_OW 488
23732: NOT
23733: IFFALSE 23737
// continue ;
23735: GO 23715
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23737: LD_VAR 0 11
23741: PPUSH
23742: LD_VAR 0 12
23746: PPUSH
23747: CALL_OW 351
23751: PUSH
23752: LD_VAR 0 11
23756: PPUSH
23757: LD_VAR 0 12
23761: PPUSH
23762: CALL_OW 554
23766: AND
23767: IFFALSE 23807
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23769: LD_ADDR_VAR 0 13
23773: PUSH
23774: LD_VAR 0 13
23778: PPUSH
23779: LD_VAR 0 13
23783: PUSH
23784: LD_INT 1
23786: PLUS
23787: PPUSH
23788: LD_VAR 0 11
23792: PUSH
23793: LD_VAR 0 12
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PPUSH
23802: CALL_OW 2
23806: ST_TO_ADDR
// end ;
23807: GO 23715
23809: POP
23810: POP
23811: GO 23695
23813: POP
23814: POP
// if not list then
23815: LD_VAR 0 13
23819: NOT
23820: IFFALSE 23824
// exit ;
23822: GO 23895
// for i in list do
23824: LD_ADDR_VAR 0 6
23828: PUSH
23829: LD_VAR 0 13
23833: PUSH
23834: FOR_IN
23835: IFFALSE 23893
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23837: LD_VAR 0 1
23841: PPUSH
23842: LD_STRING M
23844: PUSH
23845: LD_VAR 0 6
23849: PUSH
23850: LD_INT 1
23852: ARRAY
23853: PUSH
23854: LD_VAR 0 6
23858: PUSH
23859: LD_INT 2
23861: ARRAY
23862: PUSH
23863: LD_INT 0
23865: PUSH
23866: LD_INT 0
23868: PUSH
23869: LD_INT 0
23871: PUSH
23872: LD_INT 0
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: PUSH
23884: EMPTY
23885: LIST
23886: PPUSH
23887: CALL_OW 447
23891: GO 23834
23893: POP
23894: POP
// end ;
23895: LD_VAR 0 5
23899: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23900: LD_EXP 100
23904: NOT
23905: IFFALSE 23955
23907: GO 23909
23909: DISABLE
// begin initHack := true ;
23910: LD_ADDR_EXP 100
23914: PUSH
23915: LD_INT 1
23917: ST_TO_ADDR
// hackTanks := [ ] ;
23918: LD_ADDR_EXP 101
23922: PUSH
23923: EMPTY
23924: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23925: LD_ADDR_EXP 102
23929: PUSH
23930: EMPTY
23931: ST_TO_ADDR
// hackLimit := 3 ;
23932: LD_ADDR_EXP 103
23936: PUSH
23937: LD_INT 3
23939: ST_TO_ADDR
// hackDist := 12 ;
23940: LD_ADDR_EXP 104
23944: PUSH
23945: LD_INT 12
23947: ST_TO_ADDR
// hackCounter := [ ] ;
23948: LD_ADDR_EXP 105
23952: PUSH
23953: EMPTY
23954: ST_TO_ADDR
// end ;
23955: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23956: LD_EXP 100
23960: PUSH
23961: LD_INT 34
23963: PUSH
23964: LD_EXP 112
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PPUSH
23973: CALL_OW 69
23977: AND
23978: IFFALSE 24233
23980: GO 23982
23982: DISABLE
23983: LD_INT 0
23985: PPUSH
23986: PPUSH
// begin enable ;
23987: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23988: LD_ADDR_VAR 0 1
23992: PUSH
23993: LD_INT 34
23995: PUSH
23996: LD_EXP 112
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PPUSH
24005: CALL_OW 69
24009: PUSH
24010: FOR_IN
24011: IFFALSE 24231
// begin if not i in hackTanks then
24013: LD_VAR 0 1
24017: PUSH
24018: LD_EXP 101
24022: IN
24023: NOT
24024: IFFALSE 24107
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24026: LD_ADDR_EXP 101
24030: PUSH
24031: LD_EXP 101
24035: PPUSH
24036: LD_EXP 101
24040: PUSH
24041: LD_INT 1
24043: PLUS
24044: PPUSH
24045: LD_VAR 0 1
24049: PPUSH
24050: CALL_OW 1
24054: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24055: LD_ADDR_EXP 102
24059: PUSH
24060: LD_EXP 102
24064: PPUSH
24065: LD_EXP 102
24069: PUSH
24070: LD_INT 1
24072: PLUS
24073: PPUSH
24074: EMPTY
24075: PPUSH
24076: CALL_OW 1
24080: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24081: LD_ADDR_EXP 105
24085: PUSH
24086: LD_EXP 105
24090: PPUSH
24091: LD_EXP 105
24095: PUSH
24096: LD_INT 1
24098: PLUS
24099: PPUSH
24100: EMPTY
24101: PPUSH
24102: CALL_OW 1
24106: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24107: LD_VAR 0 1
24111: PPUSH
24112: CALL_OW 302
24116: NOT
24117: IFFALSE 24130
// begin HackUnlinkAll ( i ) ;
24119: LD_VAR 0 1
24123: PPUSH
24124: CALL 24236 0 1
// continue ;
24128: GO 24010
// end ; HackCheckCapturedStatus ( i ) ;
24130: LD_VAR 0 1
24134: PPUSH
24135: CALL 24679 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24139: LD_ADDR_VAR 0 2
24143: PUSH
24144: LD_INT 81
24146: PUSH
24147: LD_VAR 0 1
24151: PPUSH
24152: CALL_OW 255
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 33
24163: PUSH
24164: LD_INT 3
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 91
24173: PUSH
24174: LD_VAR 0 1
24178: PUSH
24179: LD_EXP 104
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 50
24191: PUSH
24192: EMPTY
24193: LIST
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: PPUSH
24201: CALL_OW 69
24205: ST_TO_ADDR
// if not tmp then
24206: LD_VAR 0 2
24210: NOT
24211: IFFALSE 24215
// continue ;
24213: GO 24010
// HackLink ( i , tmp ) ;
24215: LD_VAR 0 1
24219: PPUSH
24220: LD_VAR 0 2
24224: PPUSH
24225: CALL 24372 0 2
// end ;
24229: GO 24010
24231: POP
24232: POP
// end ;
24233: PPOPN 2
24235: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24236: LD_INT 0
24238: PPUSH
24239: PPUSH
24240: PPUSH
// if not hack in hackTanks then
24241: LD_VAR 0 1
24245: PUSH
24246: LD_EXP 101
24250: IN
24251: NOT
24252: IFFALSE 24256
// exit ;
24254: GO 24367
// index := GetElementIndex ( hackTanks , hack ) ;
24256: LD_ADDR_VAR 0 4
24260: PUSH
24261: LD_EXP 101
24265: PPUSH
24266: LD_VAR 0 1
24270: PPUSH
24271: CALL 31841 0 2
24275: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24276: LD_EXP 102
24280: PUSH
24281: LD_VAR 0 4
24285: ARRAY
24286: IFFALSE 24367
// begin for i in hackTanksCaptured [ index ] do
24288: LD_ADDR_VAR 0 3
24292: PUSH
24293: LD_EXP 102
24297: PUSH
24298: LD_VAR 0 4
24302: ARRAY
24303: PUSH
24304: FOR_IN
24305: IFFALSE 24331
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24307: LD_VAR 0 3
24311: PUSH
24312: LD_INT 1
24314: ARRAY
24315: PPUSH
24316: LD_VAR 0 3
24320: PUSH
24321: LD_INT 2
24323: ARRAY
24324: PPUSH
24325: CALL_OW 235
24329: GO 24304
24331: POP
24332: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24333: LD_ADDR_EXP 102
24337: PUSH
24338: LD_EXP 102
24342: PPUSH
24343: LD_VAR 0 4
24347: PPUSH
24348: EMPTY
24349: PPUSH
24350: CALL_OW 1
24354: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24355: LD_VAR 0 1
24359: PPUSH
24360: LD_INT 0
24362: PPUSH
24363: CALL_OW 505
// end ; end ;
24367: LD_VAR 0 2
24371: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24372: LD_INT 0
24374: PPUSH
24375: PPUSH
24376: PPUSH
// if not hack in hackTanks or not vehicles then
24377: LD_VAR 0 1
24381: PUSH
24382: LD_EXP 101
24386: IN
24387: NOT
24388: PUSH
24389: LD_VAR 0 2
24393: NOT
24394: OR
24395: IFFALSE 24399
// exit ;
24397: GO 24674
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24399: LD_ADDR_VAR 0 2
24403: PUSH
24404: LD_VAR 0 1
24408: PPUSH
24409: LD_VAR 0 2
24413: PPUSH
24414: LD_INT 1
24416: PPUSH
24417: LD_INT 1
24419: PPUSH
24420: CALL 32491 0 4
24424: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24425: LD_ADDR_VAR 0 5
24429: PUSH
24430: LD_EXP 101
24434: PPUSH
24435: LD_VAR 0 1
24439: PPUSH
24440: CALL 31841 0 2
24444: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24445: LD_EXP 102
24449: PUSH
24450: LD_VAR 0 5
24454: ARRAY
24455: PUSH
24456: LD_EXP 103
24460: LESS
24461: IFFALSE 24650
// begin for i := 1 to vehicles do
24463: LD_ADDR_VAR 0 4
24467: PUSH
24468: DOUBLE
24469: LD_INT 1
24471: DEC
24472: ST_TO_ADDR
24473: LD_VAR 0 2
24477: PUSH
24478: FOR_TO
24479: IFFALSE 24648
// begin if hackTanksCaptured [ index ] = hackLimit then
24481: LD_EXP 102
24485: PUSH
24486: LD_VAR 0 5
24490: ARRAY
24491: PUSH
24492: LD_EXP 103
24496: EQUAL
24497: IFFALSE 24501
// break ;
24499: GO 24648
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24501: LD_ADDR_EXP 105
24505: PUSH
24506: LD_EXP 105
24510: PPUSH
24511: LD_VAR 0 5
24515: PPUSH
24516: LD_EXP 105
24520: PUSH
24521: LD_VAR 0 5
24525: ARRAY
24526: PUSH
24527: LD_INT 1
24529: PLUS
24530: PPUSH
24531: CALL_OW 1
24535: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24536: LD_ADDR_EXP 102
24540: PUSH
24541: LD_EXP 102
24545: PPUSH
24546: LD_VAR 0 5
24550: PUSH
24551: LD_EXP 102
24555: PUSH
24556: LD_VAR 0 5
24560: ARRAY
24561: PUSH
24562: LD_INT 1
24564: PLUS
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PPUSH
24570: LD_VAR 0 2
24574: PUSH
24575: LD_VAR 0 4
24579: ARRAY
24580: PUSH
24581: LD_VAR 0 2
24585: PUSH
24586: LD_VAR 0 4
24590: ARRAY
24591: PPUSH
24592: CALL_OW 255
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PPUSH
24601: CALL 32056 0 3
24605: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24606: LD_VAR 0 2
24610: PUSH
24611: LD_VAR 0 4
24615: ARRAY
24616: PPUSH
24617: LD_VAR 0 1
24621: PPUSH
24622: CALL_OW 255
24626: PPUSH
24627: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24631: LD_VAR 0 2
24635: PUSH
24636: LD_VAR 0 4
24640: ARRAY
24641: PPUSH
24642: CALL_OW 141
// end ;
24646: GO 24478
24648: POP
24649: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24650: LD_VAR 0 1
24654: PPUSH
24655: LD_EXP 102
24659: PUSH
24660: LD_VAR 0 5
24664: ARRAY
24665: PUSH
24666: LD_INT 0
24668: PLUS
24669: PPUSH
24670: CALL_OW 505
// end ;
24674: LD_VAR 0 3
24678: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24679: LD_INT 0
24681: PPUSH
24682: PPUSH
24683: PPUSH
24684: PPUSH
// if not hack in hackTanks then
24685: LD_VAR 0 1
24689: PUSH
24690: LD_EXP 101
24694: IN
24695: NOT
24696: IFFALSE 24700
// exit ;
24698: GO 24940
// index := GetElementIndex ( hackTanks , hack ) ;
24700: LD_ADDR_VAR 0 4
24704: PUSH
24705: LD_EXP 101
24709: PPUSH
24710: LD_VAR 0 1
24714: PPUSH
24715: CALL 31841 0 2
24719: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24720: LD_ADDR_VAR 0 3
24724: PUSH
24725: DOUBLE
24726: LD_EXP 102
24730: PUSH
24731: LD_VAR 0 4
24735: ARRAY
24736: INC
24737: ST_TO_ADDR
24738: LD_INT 1
24740: PUSH
24741: FOR_DOWNTO
24742: IFFALSE 24914
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24744: LD_ADDR_VAR 0 5
24748: PUSH
24749: LD_EXP 102
24753: PUSH
24754: LD_VAR 0 4
24758: ARRAY
24759: PUSH
24760: LD_VAR 0 3
24764: ARRAY
24765: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24766: LD_VAR 0 5
24770: PUSH
24771: LD_INT 1
24773: ARRAY
24774: PPUSH
24775: CALL_OW 302
24779: NOT
24780: PUSH
24781: LD_VAR 0 5
24785: PUSH
24786: LD_INT 1
24788: ARRAY
24789: PPUSH
24790: CALL_OW 255
24794: PUSH
24795: LD_VAR 0 1
24799: PPUSH
24800: CALL_OW 255
24804: NONEQUAL
24805: OR
24806: IFFALSE 24912
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24808: LD_VAR 0 5
24812: PUSH
24813: LD_INT 1
24815: ARRAY
24816: PPUSH
24817: CALL_OW 305
24821: PUSH
24822: LD_VAR 0 5
24826: PUSH
24827: LD_INT 1
24829: ARRAY
24830: PPUSH
24831: CALL_OW 255
24835: PUSH
24836: LD_VAR 0 1
24840: PPUSH
24841: CALL_OW 255
24845: EQUAL
24846: AND
24847: IFFALSE 24871
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24849: LD_VAR 0 5
24853: PUSH
24854: LD_INT 1
24856: ARRAY
24857: PPUSH
24858: LD_VAR 0 5
24862: PUSH
24863: LD_INT 2
24865: ARRAY
24866: PPUSH
24867: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24871: LD_ADDR_EXP 102
24875: PUSH
24876: LD_EXP 102
24880: PPUSH
24881: LD_VAR 0 4
24885: PPUSH
24886: LD_EXP 102
24890: PUSH
24891: LD_VAR 0 4
24895: ARRAY
24896: PPUSH
24897: LD_VAR 0 3
24901: PPUSH
24902: CALL_OW 3
24906: PPUSH
24907: CALL_OW 1
24911: ST_TO_ADDR
// end ; end ;
24912: GO 24741
24914: POP
24915: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24916: LD_VAR 0 1
24920: PPUSH
24921: LD_EXP 102
24925: PUSH
24926: LD_VAR 0 4
24930: ARRAY
24931: PUSH
24932: LD_INT 0
24934: PLUS
24935: PPUSH
24936: CALL_OW 505
// end ;
24940: LD_VAR 0 2
24944: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24945: LD_INT 0
24947: PPUSH
24948: PPUSH
24949: PPUSH
24950: PPUSH
// if not hack in hackTanks then
24951: LD_VAR 0 1
24955: PUSH
24956: LD_EXP 101
24960: IN
24961: NOT
24962: IFFALSE 24966
// exit ;
24964: GO 25051
// index := GetElementIndex ( hackTanks , hack ) ;
24966: LD_ADDR_VAR 0 5
24970: PUSH
24971: LD_EXP 101
24975: PPUSH
24976: LD_VAR 0 1
24980: PPUSH
24981: CALL 31841 0 2
24985: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24986: LD_ADDR_VAR 0 4
24990: PUSH
24991: DOUBLE
24992: LD_INT 1
24994: DEC
24995: ST_TO_ADDR
24996: LD_EXP 102
25000: PUSH
25001: LD_VAR 0 5
25005: ARRAY
25006: PUSH
25007: FOR_TO
25008: IFFALSE 25049
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25010: LD_EXP 102
25014: PUSH
25015: LD_VAR 0 5
25019: ARRAY
25020: PUSH
25021: LD_VAR 0 4
25025: ARRAY
25026: PUSH
25027: LD_INT 1
25029: ARRAY
25030: PUSH
25031: LD_VAR 0 2
25035: EQUAL
25036: IFFALSE 25047
// KillUnit ( vehicle ) ;
25038: LD_VAR 0 2
25042: PPUSH
25043: CALL_OW 66
25047: GO 25007
25049: POP
25050: POP
// end ;
25051: LD_VAR 0 3
25055: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25056: LD_EXP 106
25060: NOT
25061: IFFALSE 25096
25063: GO 25065
25065: DISABLE
// begin initMiner := true ;
25066: LD_ADDR_EXP 106
25070: PUSH
25071: LD_INT 1
25073: ST_TO_ADDR
// minersList := [ ] ;
25074: LD_ADDR_EXP 107
25078: PUSH
25079: EMPTY
25080: ST_TO_ADDR
// minerMinesList := [ ] ;
25081: LD_ADDR_EXP 108
25085: PUSH
25086: EMPTY
25087: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25088: LD_ADDR_EXP 109
25092: PUSH
25093: LD_INT 5
25095: ST_TO_ADDR
// end ;
25096: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25097: LD_EXP 106
25101: PUSH
25102: LD_INT 34
25104: PUSH
25105: LD_EXP 117
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PPUSH
25114: CALL_OW 69
25118: AND
25119: IFFALSE 25582
25121: GO 25123
25123: DISABLE
25124: LD_INT 0
25126: PPUSH
25127: PPUSH
25128: PPUSH
25129: PPUSH
// begin enable ;
25130: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25131: LD_ADDR_VAR 0 1
25135: PUSH
25136: LD_INT 34
25138: PUSH
25139: LD_EXP 117
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PPUSH
25148: CALL_OW 69
25152: PUSH
25153: FOR_IN
25154: IFFALSE 25226
// begin if not i in minersList then
25156: LD_VAR 0 1
25160: PUSH
25161: LD_EXP 107
25165: IN
25166: NOT
25167: IFFALSE 25224
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25169: LD_ADDR_EXP 107
25173: PUSH
25174: LD_EXP 107
25178: PPUSH
25179: LD_EXP 107
25183: PUSH
25184: LD_INT 1
25186: PLUS
25187: PPUSH
25188: LD_VAR 0 1
25192: PPUSH
25193: CALL_OW 1
25197: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25198: LD_ADDR_EXP 108
25202: PUSH
25203: LD_EXP 108
25207: PPUSH
25208: LD_EXP 108
25212: PUSH
25213: LD_INT 1
25215: PLUS
25216: PPUSH
25217: EMPTY
25218: PPUSH
25219: CALL_OW 1
25223: ST_TO_ADDR
// end end ;
25224: GO 25153
25226: POP
25227: POP
// for i := minerMinesList downto 1 do
25228: LD_ADDR_VAR 0 1
25232: PUSH
25233: DOUBLE
25234: LD_EXP 108
25238: INC
25239: ST_TO_ADDR
25240: LD_INT 1
25242: PUSH
25243: FOR_DOWNTO
25244: IFFALSE 25580
// begin if IsLive ( minersList [ i ] ) then
25246: LD_EXP 107
25250: PUSH
25251: LD_VAR 0 1
25255: ARRAY
25256: PPUSH
25257: CALL_OW 300
25261: IFFALSE 25289
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25263: LD_EXP 107
25267: PUSH
25268: LD_VAR 0 1
25272: ARRAY
25273: PPUSH
25274: LD_EXP 108
25278: PUSH
25279: LD_VAR 0 1
25283: ARRAY
25284: PPUSH
25285: CALL_OW 505
// if not minerMinesList [ i ] then
25289: LD_EXP 108
25293: PUSH
25294: LD_VAR 0 1
25298: ARRAY
25299: NOT
25300: IFFALSE 25304
// continue ;
25302: GO 25243
// for j := minerMinesList [ i ] downto 1 do
25304: LD_ADDR_VAR 0 2
25308: PUSH
25309: DOUBLE
25310: LD_EXP 108
25314: PUSH
25315: LD_VAR 0 1
25319: ARRAY
25320: INC
25321: ST_TO_ADDR
25322: LD_INT 1
25324: PUSH
25325: FOR_DOWNTO
25326: IFFALSE 25576
// begin side := GetSide ( minersList [ i ] ) ;
25328: LD_ADDR_VAR 0 3
25332: PUSH
25333: LD_EXP 107
25337: PUSH
25338: LD_VAR 0 1
25342: ARRAY
25343: PPUSH
25344: CALL_OW 255
25348: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25349: LD_ADDR_VAR 0 4
25353: PUSH
25354: LD_EXP 108
25358: PUSH
25359: LD_VAR 0 1
25363: ARRAY
25364: PUSH
25365: LD_VAR 0 2
25369: ARRAY
25370: PUSH
25371: LD_INT 1
25373: ARRAY
25374: PPUSH
25375: LD_EXP 108
25379: PUSH
25380: LD_VAR 0 1
25384: ARRAY
25385: PUSH
25386: LD_VAR 0 2
25390: ARRAY
25391: PUSH
25392: LD_INT 2
25394: ARRAY
25395: PPUSH
25396: CALL_OW 428
25400: ST_TO_ADDR
// if not tmp then
25401: LD_VAR 0 4
25405: NOT
25406: IFFALSE 25410
// continue ;
25408: GO 25325
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25410: LD_VAR 0 4
25414: PUSH
25415: LD_INT 81
25417: PUSH
25418: LD_VAR 0 3
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PPUSH
25427: CALL_OW 69
25431: IN
25432: PUSH
25433: LD_EXP 108
25437: PUSH
25438: LD_VAR 0 1
25442: ARRAY
25443: PUSH
25444: LD_VAR 0 2
25448: ARRAY
25449: PUSH
25450: LD_INT 1
25452: ARRAY
25453: PPUSH
25454: LD_EXP 108
25458: PUSH
25459: LD_VAR 0 1
25463: ARRAY
25464: PUSH
25465: LD_VAR 0 2
25469: ARRAY
25470: PUSH
25471: LD_INT 2
25473: ARRAY
25474: PPUSH
25475: CALL_OW 458
25479: AND
25480: IFFALSE 25574
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25482: LD_EXP 108
25486: PUSH
25487: LD_VAR 0 1
25491: ARRAY
25492: PUSH
25493: LD_VAR 0 2
25497: ARRAY
25498: PUSH
25499: LD_INT 1
25501: ARRAY
25502: PPUSH
25503: LD_EXP 108
25507: PUSH
25508: LD_VAR 0 1
25512: ARRAY
25513: PUSH
25514: LD_VAR 0 2
25518: ARRAY
25519: PUSH
25520: LD_INT 2
25522: ARRAY
25523: PPUSH
25524: LD_VAR 0 3
25528: PPUSH
25529: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25533: LD_ADDR_EXP 108
25537: PUSH
25538: LD_EXP 108
25542: PPUSH
25543: LD_VAR 0 1
25547: PPUSH
25548: LD_EXP 108
25552: PUSH
25553: LD_VAR 0 1
25557: ARRAY
25558: PPUSH
25559: LD_VAR 0 2
25563: PPUSH
25564: CALL_OW 3
25568: PPUSH
25569: CALL_OW 1
25573: ST_TO_ADDR
// end ; end ;
25574: GO 25325
25576: POP
25577: POP
// end ;
25578: GO 25243
25580: POP
25581: POP
// end ;
25582: PPOPN 4
25584: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25585: LD_INT 0
25587: PPUSH
25588: PPUSH
// result := false ;
25589: LD_ADDR_VAR 0 4
25593: PUSH
25594: LD_INT 0
25596: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25597: LD_VAR 0 1
25601: PPUSH
25602: CALL_OW 264
25606: PUSH
25607: LD_EXP 117
25611: EQUAL
25612: NOT
25613: IFFALSE 25617
// exit ;
25615: GO 25857
// index := GetElementIndex ( minersList , unit ) ;
25617: LD_ADDR_VAR 0 5
25621: PUSH
25622: LD_EXP 107
25626: PPUSH
25627: LD_VAR 0 1
25631: PPUSH
25632: CALL 31841 0 2
25636: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25637: LD_EXP 108
25641: PUSH
25642: LD_VAR 0 5
25646: ARRAY
25647: PUSH
25648: LD_EXP 109
25652: GREATEREQUAL
25653: IFFALSE 25657
// exit ;
25655: GO 25857
// ComMoveXY ( unit , x , y ) ;
25657: LD_VAR 0 1
25661: PPUSH
25662: LD_VAR 0 2
25666: PPUSH
25667: LD_VAR 0 3
25671: PPUSH
25672: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25676: LD_INT 35
25678: PPUSH
25679: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25683: LD_VAR 0 1
25687: PPUSH
25688: LD_VAR 0 2
25692: PPUSH
25693: LD_VAR 0 3
25697: PPUSH
25698: CALL 62614 0 3
25702: NOT
25703: PUSH
25704: LD_VAR 0 1
25708: PPUSH
25709: CALL_OW 314
25713: AND
25714: IFFALSE 25718
// exit ;
25716: GO 25857
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25718: LD_VAR 0 2
25722: PPUSH
25723: LD_VAR 0 3
25727: PPUSH
25728: CALL_OW 428
25732: PUSH
25733: LD_VAR 0 1
25737: EQUAL
25738: PUSH
25739: LD_VAR 0 1
25743: PPUSH
25744: CALL_OW 314
25748: NOT
25749: AND
25750: IFFALSE 25676
// PlaySoundXY ( x , y , PlantMine ) ;
25752: LD_VAR 0 2
25756: PPUSH
25757: LD_VAR 0 3
25761: PPUSH
25762: LD_STRING PlantMine
25764: PPUSH
25765: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25769: LD_VAR 0 2
25773: PPUSH
25774: LD_VAR 0 3
25778: PPUSH
25779: LD_VAR 0 1
25783: PPUSH
25784: CALL_OW 255
25788: PPUSH
25789: LD_INT 0
25791: PPUSH
25792: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25796: LD_ADDR_EXP 108
25800: PUSH
25801: LD_EXP 108
25805: PPUSH
25806: LD_VAR 0 5
25810: PUSH
25811: LD_EXP 108
25815: PUSH
25816: LD_VAR 0 5
25820: ARRAY
25821: PUSH
25822: LD_INT 1
25824: PLUS
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PPUSH
25830: LD_VAR 0 2
25834: PUSH
25835: LD_VAR 0 3
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PPUSH
25844: CALL 32056 0 3
25848: ST_TO_ADDR
// result := true ;
25849: LD_ADDR_VAR 0 4
25853: PUSH
25854: LD_INT 1
25856: ST_TO_ADDR
// end ;
25857: LD_VAR 0 4
25861: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25862: LD_INT 0
25864: PPUSH
25865: PPUSH
25866: PPUSH
// if not unit in minersList then
25867: LD_VAR 0 1
25871: PUSH
25872: LD_EXP 107
25876: IN
25877: NOT
25878: IFFALSE 25882
// exit ;
25880: GO 26274
// index := GetElementIndex ( minersList , unit ) ;
25882: LD_ADDR_VAR 0 6
25886: PUSH
25887: LD_EXP 107
25891: PPUSH
25892: LD_VAR 0 1
25896: PPUSH
25897: CALL 31841 0 2
25901: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25902: LD_ADDR_VAR 0 5
25906: PUSH
25907: DOUBLE
25908: LD_EXP 108
25912: PUSH
25913: LD_VAR 0 6
25917: ARRAY
25918: INC
25919: ST_TO_ADDR
25920: LD_INT 1
25922: PUSH
25923: FOR_DOWNTO
25924: IFFALSE 26085
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25926: LD_EXP 108
25930: PUSH
25931: LD_VAR 0 6
25935: ARRAY
25936: PUSH
25937: LD_VAR 0 5
25941: ARRAY
25942: PUSH
25943: LD_INT 1
25945: ARRAY
25946: PUSH
25947: LD_VAR 0 2
25951: EQUAL
25952: PUSH
25953: LD_EXP 108
25957: PUSH
25958: LD_VAR 0 6
25962: ARRAY
25963: PUSH
25964: LD_VAR 0 5
25968: ARRAY
25969: PUSH
25970: LD_INT 2
25972: ARRAY
25973: PUSH
25974: LD_VAR 0 3
25978: EQUAL
25979: AND
25980: IFFALSE 26083
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25982: LD_EXP 108
25986: PUSH
25987: LD_VAR 0 6
25991: ARRAY
25992: PUSH
25993: LD_VAR 0 5
25997: ARRAY
25998: PUSH
25999: LD_INT 1
26001: ARRAY
26002: PPUSH
26003: LD_EXP 108
26007: PUSH
26008: LD_VAR 0 6
26012: ARRAY
26013: PUSH
26014: LD_VAR 0 5
26018: ARRAY
26019: PUSH
26020: LD_INT 2
26022: ARRAY
26023: PPUSH
26024: LD_VAR 0 1
26028: PPUSH
26029: CALL_OW 255
26033: PPUSH
26034: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26038: LD_ADDR_EXP 108
26042: PUSH
26043: LD_EXP 108
26047: PPUSH
26048: LD_VAR 0 6
26052: PPUSH
26053: LD_EXP 108
26057: PUSH
26058: LD_VAR 0 6
26062: ARRAY
26063: PPUSH
26064: LD_VAR 0 5
26068: PPUSH
26069: CALL_OW 3
26073: PPUSH
26074: CALL_OW 1
26078: ST_TO_ADDR
// exit ;
26079: POP
26080: POP
26081: GO 26274
// end ; end ;
26083: GO 25923
26085: POP
26086: POP
// for i := minerMinesList [ index ] downto 1 do
26087: LD_ADDR_VAR 0 5
26091: PUSH
26092: DOUBLE
26093: LD_EXP 108
26097: PUSH
26098: LD_VAR 0 6
26102: ARRAY
26103: INC
26104: ST_TO_ADDR
26105: LD_INT 1
26107: PUSH
26108: FOR_DOWNTO
26109: IFFALSE 26272
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26111: LD_EXP 108
26115: PUSH
26116: LD_VAR 0 6
26120: ARRAY
26121: PUSH
26122: LD_VAR 0 5
26126: ARRAY
26127: PUSH
26128: LD_INT 1
26130: ARRAY
26131: PPUSH
26132: LD_EXP 108
26136: PUSH
26137: LD_VAR 0 6
26141: ARRAY
26142: PUSH
26143: LD_VAR 0 5
26147: ARRAY
26148: PUSH
26149: LD_INT 2
26151: ARRAY
26152: PPUSH
26153: LD_VAR 0 2
26157: PPUSH
26158: LD_VAR 0 3
26162: PPUSH
26163: CALL_OW 298
26167: PUSH
26168: LD_INT 6
26170: LESS
26171: IFFALSE 26270
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26173: LD_EXP 108
26177: PUSH
26178: LD_VAR 0 6
26182: ARRAY
26183: PUSH
26184: LD_VAR 0 5
26188: ARRAY
26189: PUSH
26190: LD_INT 1
26192: ARRAY
26193: PPUSH
26194: LD_EXP 108
26198: PUSH
26199: LD_VAR 0 6
26203: ARRAY
26204: PUSH
26205: LD_VAR 0 5
26209: ARRAY
26210: PUSH
26211: LD_INT 2
26213: ARRAY
26214: PPUSH
26215: LD_VAR 0 1
26219: PPUSH
26220: CALL_OW 255
26224: PPUSH
26225: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26229: LD_ADDR_EXP 108
26233: PUSH
26234: LD_EXP 108
26238: PPUSH
26239: LD_VAR 0 6
26243: PPUSH
26244: LD_EXP 108
26248: PUSH
26249: LD_VAR 0 6
26253: ARRAY
26254: PPUSH
26255: LD_VAR 0 5
26259: PPUSH
26260: CALL_OW 3
26264: PPUSH
26265: CALL_OW 1
26269: ST_TO_ADDR
// end ; end ;
26270: GO 26108
26272: POP
26273: POP
// end ;
26274: LD_VAR 0 4
26278: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26279: LD_INT 0
26281: PPUSH
26282: PPUSH
26283: PPUSH
26284: PPUSH
26285: PPUSH
26286: PPUSH
26287: PPUSH
26288: PPUSH
26289: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26290: LD_VAR 0 1
26294: PPUSH
26295: CALL_OW 264
26299: PUSH
26300: LD_EXP 117
26304: EQUAL
26305: NOT
26306: PUSH
26307: LD_VAR 0 1
26311: PUSH
26312: LD_EXP 107
26316: IN
26317: NOT
26318: OR
26319: IFFALSE 26323
// exit ;
26321: GO 26645
// index := GetElementIndex ( minersList , unit ) ;
26323: LD_ADDR_VAR 0 6
26327: PUSH
26328: LD_EXP 107
26332: PPUSH
26333: LD_VAR 0 1
26337: PPUSH
26338: CALL 31841 0 2
26342: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26343: LD_ADDR_VAR 0 8
26347: PUSH
26348: LD_EXP 109
26352: PUSH
26353: LD_EXP 108
26357: PUSH
26358: LD_VAR 0 6
26362: ARRAY
26363: MINUS
26364: ST_TO_ADDR
// if not minesFreeAmount then
26365: LD_VAR 0 8
26369: NOT
26370: IFFALSE 26374
// exit ;
26372: GO 26645
// tmp := [ ] ;
26374: LD_ADDR_VAR 0 7
26378: PUSH
26379: EMPTY
26380: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26381: LD_ADDR_VAR 0 5
26385: PUSH
26386: DOUBLE
26387: LD_INT 1
26389: DEC
26390: ST_TO_ADDR
26391: LD_VAR 0 8
26395: PUSH
26396: FOR_TO
26397: IFFALSE 26592
// begin _d := rand ( 0 , 5 ) ;
26399: LD_ADDR_VAR 0 11
26403: PUSH
26404: LD_INT 0
26406: PPUSH
26407: LD_INT 5
26409: PPUSH
26410: CALL_OW 12
26414: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26415: LD_ADDR_VAR 0 12
26419: PUSH
26420: LD_INT 2
26422: PPUSH
26423: LD_INT 6
26425: PPUSH
26426: CALL_OW 12
26430: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26431: LD_ADDR_VAR 0 9
26435: PUSH
26436: LD_VAR 0 2
26440: PPUSH
26441: LD_VAR 0 11
26445: PPUSH
26446: LD_VAR 0 12
26450: PPUSH
26451: CALL_OW 272
26455: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26456: LD_ADDR_VAR 0 10
26460: PUSH
26461: LD_VAR 0 3
26465: PPUSH
26466: LD_VAR 0 11
26470: PPUSH
26471: LD_VAR 0 12
26475: PPUSH
26476: CALL_OW 273
26480: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26481: LD_VAR 0 9
26485: PPUSH
26486: LD_VAR 0 10
26490: PPUSH
26491: CALL_OW 488
26495: PUSH
26496: LD_VAR 0 9
26500: PUSH
26501: LD_VAR 0 10
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_VAR 0 7
26514: IN
26515: NOT
26516: AND
26517: PUSH
26518: LD_VAR 0 9
26522: PPUSH
26523: LD_VAR 0 10
26527: PPUSH
26528: CALL_OW 458
26532: NOT
26533: AND
26534: IFFALSE 26576
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26536: LD_ADDR_VAR 0 7
26540: PUSH
26541: LD_VAR 0 7
26545: PPUSH
26546: LD_VAR 0 7
26550: PUSH
26551: LD_INT 1
26553: PLUS
26554: PPUSH
26555: LD_VAR 0 9
26559: PUSH
26560: LD_VAR 0 10
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PPUSH
26569: CALL_OW 1
26573: ST_TO_ADDR
26574: GO 26590
// i := i - 1 ;
26576: LD_ADDR_VAR 0 5
26580: PUSH
26581: LD_VAR 0 5
26585: PUSH
26586: LD_INT 1
26588: MINUS
26589: ST_TO_ADDR
// end ;
26590: GO 26396
26592: POP
26593: POP
// for i in tmp do
26594: LD_ADDR_VAR 0 5
26598: PUSH
26599: LD_VAR 0 7
26603: PUSH
26604: FOR_IN
26605: IFFALSE 26643
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26607: LD_VAR 0 1
26611: PPUSH
26612: LD_VAR 0 5
26616: PUSH
26617: LD_INT 1
26619: ARRAY
26620: PPUSH
26621: LD_VAR 0 5
26625: PUSH
26626: LD_INT 2
26628: ARRAY
26629: PPUSH
26630: CALL 25585 0 3
26634: NOT
26635: IFFALSE 26641
// exit ;
26637: POP
26638: POP
26639: GO 26645
26641: GO 26604
26643: POP
26644: POP
// end ;
26645: LD_VAR 0 4
26649: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26650: LD_INT 0
26652: PPUSH
26653: PPUSH
26654: PPUSH
26655: PPUSH
26656: PPUSH
26657: PPUSH
26658: PPUSH
// if not GetClass ( unit ) = class_sniper then
26659: LD_VAR 0 1
26663: PPUSH
26664: CALL_OW 257
26668: PUSH
26669: LD_INT 5
26671: EQUAL
26672: NOT
26673: IFFALSE 26677
// exit ;
26675: GO 27065
// dist := 8 ;
26677: LD_ADDR_VAR 0 5
26681: PUSH
26682: LD_INT 8
26684: ST_TO_ADDR
// viewRange := 12 ;
26685: LD_ADDR_VAR 0 7
26689: PUSH
26690: LD_INT 12
26692: ST_TO_ADDR
// side := GetSide ( unit ) ;
26693: LD_ADDR_VAR 0 6
26697: PUSH
26698: LD_VAR 0 1
26702: PPUSH
26703: CALL_OW 255
26707: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26708: LD_INT 61
26710: PPUSH
26711: LD_VAR 0 6
26715: PPUSH
26716: CALL_OW 321
26720: PUSH
26721: LD_INT 2
26723: EQUAL
26724: IFFALSE 26734
// viewRange := 16 ;
26726: LD_ADDR_VAR 0 7
26730: PUSH
26731: LD_INT 16
26733: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26734: LD_VAR 0 1
26738: PPUSH
26739: LD_VAR 0 2
26743: PPUSH
26744: LD_VAR 0 3
26748: PPUSH
26749: CALL_OW 297
26753: PUSH
26754: LD_VAR 0 5
26758: GREATER
26759: IFFALSE 26838
// begin ComMoveXY ( unit , x , y ) ;
26761: LD_VAR 0 1
26765: PPUSH
26766: LD_VAR 0 2
26770: PPUSH
26771: LD_VAR 0 3
26775: PPUSH
26776: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26780: LD_INT 35
26782: PPUSH
26783: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26787: LD_VAR 0 1
26791: PPUSH
26792: LD_VAR 0 2
26796: PPUSH
26797: LD_VAR 0 3
26801: PPUSH
26802: CALL 62614 0 3
26806: NOT
26807: IFFALSE 26811
// exit ;
26809: GO 27065
// until GetDistUnitXY ( unit , x , y ) < dist ;
26811: LD_VAR 0 1
26815: PPUSH
26816: LD_VAR 0 2
26820: PPUSH
26821: LD_VAR 0 3
26825: PPUSH
26826: CALL_OW 297
26830: PUSH
26831: LD_VAR 0 5
26835: LESS
26836: IFFALSE 26780
// end ; ComTurnXY ( unit , x , y ) ;
26838: LD_VAR 0 1
26842: PPUSH
26843: LD_VAR 0 2
26847: PPUSH
26848: LD_VAR 0 3
26852: PPUSH
26853: CALL_OW 118
// wait ( 5 ) ;
26857: LD_INT 5
26859: PPUSH
26860: CALL_OW 67
// _d := GetDir ( unit ) ;
26864: LD_ADDR_VAR 0 10
26868: PUSH
26869: LD_VAR 0 1
26873: PPUSH
26874: CALL_OW 254
26878: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26879: LD_ADDR_VAR 0 8
26883: PUSH
26884: LD_VAR 0 1
26888: PPUSH
26889: CALL_OW 250
26893: PPUSH
26894: LD_VAR 0 10
26898: PPUSH
26899: LD_VAR 0 5
26903: PPUSH
26904: CALL_OW 272
26908: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26909: LD_ADDR_VAR 0 9
26913: PUSH
26914: LD_VAR 0 1
26918: PPUSH
26919: CALL_OW 251
26923: PPUSH
26924: LD_VAR 0 10
26928: PPUSH
26929: LD_VAR 0 5
26933: PPUSH
26934: CALL_OW 273
26938: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26939: LD_VAR 0 8
26943: PPUSH
26944: LD_VAR 0 9
26948: PPUSH
26949: CALL_OW 488
26953: NOT
26954: IFFALSE 26958
// exit ;
26956: GO 27065
// ComAnimCustom ( unit , 1 ) ;
26958: LD_VAR 0 1
26962: PPUSH
26963: LD_INT 1
26965: PPUSH
26966: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26970: LD_VAR 0 8
26974: PPUSH
26975: LD_VAR 0 9
26979: PPUSH
26980: LD_VAR 0 6
26984: PPUSH
26985: LD_VAR 0 7
26989: PPUSH
26990: CALL_OW 330
// repeat wait ( 1 ) ;
26994: LD_INT 1
26996: PPUSH
26997: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27001: LD_VAR 0 1
27005: PPUSH
27006: CALL_OW 316
27010: PUSH
27011: LD_VAR 0 1
27015: PPUSH
27016: CALL_OW 314
27020: OR
27021: PUSH
27022: LD_VAR 0 1
27026: PPUSH
27027: CALL_OW 302
27031: NOT
27032: OR
27033: PUSH
27034: LD_VAR 0 1
27038: PPUSH
27039: CALL_OW 301
27043: OR
27044: IFFALSE 26994
// RemoveSeeing ( _x , _y , side ) ;
27046: LD_VAR 0 8
27050: PPUSH
27051: LD_VAR 0 9
27055: PPUSH
27056: LD_VAR 0 6
27060: PPUSH
27061: CALL_OW 331
// end ; end_of_file
27065: LD_VAR 0 4
27069: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27070: LD_INT 0
27072: PPUSH
27073: PPUSH
// if exist_mode then
27074: LD_VAR 0 2
27078: IFFALSE 27103
// unit := CreateCharacter ( prefix & ident ) else
27080: LD_ADDR_VAR 0 5
27084: PUSH
27085: LD_VAR 0 3
27089: PUSH
27090: LD_VAR 0 1
27094: STR
27095: PPUSH
27096: CALL_OW 34
27100: ST_TO_ADDR
27101: GO 27118
// unit := NewCharacter ( ident ) ;
27103: LD_ADDR_VAR 0 5
27107: PUSH
27108: LD_VAR 0 1
27112: PPUSH
27113: CALL_OW 25
27117: ST_TO_ADDR
// result := unit ;
27118: LD_ADDR_VAR 0 4
27122: PUSH
27123: LD_VAR 0 5
27127: ST_TO_ADDR
// end ;
27128: LD_VAR 0 4
27132: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27133: LD_INT 0
27135: PPUSH
27136: PPUSH
// if not side or not nation then
27137: LD_VAR 0 1
27141: NOT
27142: PUSH
27143: LD_VAR 0 2
27147: NOT
27148: OR
27149: IFFALSE 27153
// exit ;
27151: GO 27921
// case nation of nation_american :
27153: LD_VAR 0 2
27157: PUSH
27158: LD_INT 1
27160: DOUBLE
27161: EQUAL
27162: IFTRUE 27166
27164: GO 27380
27166: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27167: LD_ADDR_VAR 0 4
27171: PUSH
27172: LD_INT 35
27174: PUSH
27175: LD_INT 45
27177: PUSH
27178: LD_INT 46
27180: PUSH
27181: LD_INT 47
27183: PUSH
27184: LD_INT 82
27186: PUSH
27187: LD_INT 83
27189: PUSH
27190: LD_INT 84
27192: PUSH
27193: LD_INT 85
27195: PUSH
27196: LD_INT 86
27198: PUSH
27199: LD_INT 1
27201: PUSH
27202: LD_INT 2
27204: PUSH
27205: LD_INT 6
27207: PUSH
27208: LD_INT 15
27210: PUSH
27211: LD_INT 16
27213: PUSH
27214: LD_INT 7
27216: PUSH
27217: LD_INT 12
27219: PUSH
27220: LD_INT 13
27222: PUSH
27223: LD_INT 10
27225: PUSH
27226: LD_INT 14
27228: PUSH
27229: LD_INT 20
27231: PUSH
27232: LD_INT 21
27234: PUSH
27235: LD_INT 22
27237: PUSH
27238: LD_INT 25
27240: PUSH
27241: LD_INT 32
27243: PUSH
27244: LD_INT 27
27246: PUSH
27247: LD_INT 36
27249: PUSH
27250: LD_INT 69
27252: PUSH
27253: LD_INT 39
27255: PUSH
27256: LD_INT 34
27258: PUSH
27259: LD_INT 40
27261: PUSH
27262: LD_INT 48
27264: PUSH
27265: LD_INT 49
27267: PUSH
27268: LD_INT 50
27270: PUSH
27271: LD_INT 51
27273: PUSH
27274: LD_INT 52
27276: PUSH
27277: LD_INT 53
27279: PUSH
27280: LD_INT 54
27282: PUSH
27283: LD_INT 55
27285: PUSH
27286: LD_INT 56
27288: PUSH
27289: LD_INT 57
27291: PUSH
27292: LD_INT 58
27294: PUSH
27295: LD_INT 59
27297: PUSH
27298: LD_INT 60
27300: PUSH
27301: LD_INT 61
27303: PUSH
27304: LD_INT 62
27306: PUSH
27307: LD_INT 80
27309: PUSH
27310: LD_INT 82
27312: PUSH
27313: LD_INT 83
27315: PUSH
27316: LD_INT 84
27318: PUSH
27319: LD_INT 85
27321: PUSH
27322: LD_INT 86
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: ST_TO_ADDR
27378: GO 27845
27380: LD_INT 2
27382: DOUBLE
27383: EQUAL
27384: IFTRUE 27388
27386: GO 27614
27388: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27389: LD_ADDR_VAR 0 4
27393: PUSH
27394: LD_INT 35
27396: PUSH
27397: LD_INT 45
27399: PUSH
27400: LD_INT 46
27402: PUSH
27403: LD_INT 47
27405: PUSH
27406: LD_INT 82
27408: PUSH
27409: LD_INT 83
27411: PUSH
27412: LD_INT 84
27414: PUSH
27415: LD_INT 85
27417: PUSH
27418: LD_INT 87
27420: PUSH
27421: LD_INT 70
27423: PUSH
27424: LD_INT 1
27426: PUSH
27427: LD_INT 11
27429: PUSH
27430: LD_INT 3
27432: PUSH
27433: LD_INT 4
27435: PUSH
27436: LD_INT 5
27438: PUSH
27439: LD_INT 6
27441: PUSH
27442: LD_INT 15
27444: PUSH
27445: LD_INT 18
27447: PUSH
27448: LD_INT 7
27450: PUSH
27451: LD_INT 17
27453: PUSH
27454: LD_INT 8
27456: PUSH
27457: LD_INT 20
27459: PUSH
27460: LD_INT 21
27462: PUSH
27463: LD_INT 22
27465: PUSH
27466: LD_INT 72
27468: PUSH
27469: LD_INT 26
27471: PUSH
27472: LD_INT 69
27474: PUSH
27475: LD_INT 39
27477: PUSH
27478: LD_INT 40
27480: PUSH
27481: LD_INT 41
27483: PUSH
27484: LD_INT 42
27486: PUSH
27487: LD_INT 43
27489: PUSH
27490: LD_INT 48
27492: PUSH
27493: LD_INT 49
27495: PUSH
27496: LD_INT 50
27498: PUSH
27499: LD_INT 51
27501: PUSH
27502: LD_INT 52
27504: PUSH
27505: LD_INT 53
27507: PUSH
27508: LD_INT 54
27510: PUSH
27511: LD_INT 55
27513: PUSH
27514: LD_INT 56
27516: PUSH
27517: LD_INT 60
27519: PUSH
27520: LD_INT 61
27522: PUSH
27523: LD_INT 62
27525: PUSH
27526: LD_INT 66
27528: PUSH
27529: LD_INT 67
27531: PUSH
27532: LD_INT 68
27534: PUSH
27535: LD_INT 81
27537: PUSH
27538: LD_INT 82
27540: PUSH
27541: LD_INT 83
27543: PUSH
27544: LD_INT 84
27546: PUSH
27547: LD_INT 85
27549: PUSH
27550: LD_INT 87
27552: PUSH
27553: LD_INT 88
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: ST_TO_ADDR
27612: GO 27845
27614: LD_INT 3
27616: DOUBLE
27617: EQUAL
27618: IFTRUE 27622
27620: GO 27844
27622: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27623: LD_ADDR_VAR 0 4
27627: PUSH
27628: LD_INT 46
27630: PUSH
27631: LD_INT 47
27633: PUSH
27634: LD_INT 1
27636: PUSH
27637: LD_INT 2
27639: PUSH
27640: LD_INT 82
27642: PUSH
27643: LD_INT 83
27645: PUSH
27646: LD_INT 84
27648: PUSH
27649: LD_INT 85
27651: PUSH
27652: LD_INT 86
27654: PUSH
27655: LD_INT 11
27657: PUSH
27658: LD_INT 9
27660: PUSH
27661: LD_INT 20
27663: PUSH
27664: LD_INT 19
27666: PUSH
27667: LD_INT 21
27669: PUSH
27670: LD_INT 24
27672: PUSH
27673: LD_INT 22
27675: PUSH
27676: LD_INT 25
27678: PUSH
27679: LD_INT 28
27681: PUSH
27682: LD_INT 29
27684: PUSH
27685: LD_INT 30
27687: PUSH
27688: LD_INT 31
27690: PUSH
27691: LD_INT 37
27693: PUSH
27694: LD_INT 38
27696: PUSH
27697: LD_INT 32
27699: PUSH
27700: LD_INT 27
27702: PUSH
27703: LD_INT 33
27705: PUSH
27706: LD_INT 69
27708: PUSH
27709: LD_INT 39
27711: PUSH
27712: LD_INT 34
27714: PUSH
27715: LD_INT 40
27717: PUSH
27718: LD_INT 71
27720: PUSH
27721: LD_INT 23
27723: PUSH
27724: LD_INT 44
27726: PUSH
27727: LD_INT 48
27729: PUSH
27730: LD_INT 49
27732: PUSH
27733: LD_INT 50
27735: PUSH
27736: LD_INT 51
27738: PUSH
27739: LD_INT 52
27741: PUSH
27742: LD_INT 53
27744: PUSH
27745: LD_INT 54
27747: PUSH
27748: LD_INT 55
27750: PUSH
27751: LD_INT 56
27753: PUSH
27754: LD_INT 57
27756: PUSH
27757: LD_INT 58
27759: PUSH
27760: LD_INT 59
27762: PUSH
27763: LD_INT 63
27765: PUSH
27766: LD_INT 64
27768: PUSH
27769: LD_INT 65
27771: PUSH
27772: LD_INT 82
27774: PUSH
27775: LD_INT 83
27777: PUSH
27778: LD_INT 84
27780: PUSH
27781: LD_INT 85
27783: PUSH
27784: LD_INT 86
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: ST_TO_ADDR
27842: GO 27845
27844: POP
// if state > - 1 and state < 3 then
27845: LD_VAR 0 3
27849: PUSH
27850: LD_INT 1
27852: NEG
27853: GREATER
27854: PUSH
27855: LD_VAR 0 3
27859: PUSH
27860: LD_INT 3
27862: LESS
27863: AND
27864: IFFALSE 27921
// for i in result do
27866: LD_ADDR_VAR 0 5
27870: PUSH
27871: LD_VAR 0 4
27875: PUSH
27876: FOR_IN
27877: IFFALSE 27919
// if GetTech ( i , side ) <> state then
27879: LD_VAR 0 5
27883: PPUSH
27884: LD_VAR 0 1
27888: PPUSH
27889: CALL_OW 321
27893: PUSH
27894: LD_VAR 0 3
27898: NONEQUAL
27899: IFFALSE 27917
// result := result diff i ;
27901: LD_ADDR_VAR 0 4
27905: PUSH
27906: LD_VAR 0 4
27910: PUSH
27911: LD_VAR 0 5
27915: DIFF
27916: ST_TO_ADDR
27917: GO 27876
27919: POP
27920: POP
// end ;
27921: LD_VAR 0 4
27925: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27926: LD_INT 0
27928: PPUSH
27929: PPUSH
27930: PPUSH
// result := true ;
27931: LD_ADDR_VAR 0 3
27935: PUSH
27936: LD_INT 1
27938: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27939: LD_ADDR_VAR 0 5
27943: PUSH
27944: LD_VAR 0 2
27948: PPUSH
27949: CALL_OW 480
27953: ST_TO_ADDR
// if not tmp then
27954: LD_VAR 0 5
27958: NOT
27959: IFFALSE 27963
// exit ;
27961: GO 28012
// for i in tmp do
27963: LD_ADDR_VAR 0 4
27967: PUSH
27968: LD_VAR 0 5
27972: PUSH
27973: FOR_IN
27974: IFFALSE 28010
// if GetTech ( i , side ) <> state_researched then
27976: LD_VAR 0 4
27980: PPUSH
27981: LD_VAR 0 1
27985: PPUSH
27986: CALL_OW 321
27990: PUSH
27991: LD_INT 2
27993: NONEQUAL
27994: IFFALSE 28008
// begin result := false ;
27996: LD_ADDR_VAR 0 3
28000: PUSH
28001: LD_INT 0
28003: ST_TO_ADDR
// exit ;
28004: POP
28005: POP
28006: GO 28012
// end ;
28008: GO 27973
28010: POP
28011: POP
// end ;
28012: LD_VAR 0 3
28016: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28017: LD_INT 0
28019: PPUSH
28020: PPUSH
28021: PPUSH
28022: PPUSH
28023: PPUSH
28024: PPUSH
28025: PPUSH
28026: PPUSH
28027: PPUSH
28028: PPUSH
28029: PPUSH
28030: PPUSH
28031: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28032: LD_VAR 0 1
28036: NOT
28037: PUSH
28038: LD_VAR 0 1
28042: PPUSH
28043: CALL_OW 257
28047: PUSH
28048: LD_INT 9
28050: NONEQUAL
28051: OR
28052: IFFALSE 28056
// exit ;
28054: GO 28629
// side := GetSide ( unit ) ;
28056: LD_ADDR_VAR 0 9
28060: PUSH
28061: LD_VAR 0 1
28065: PPUSH
28066: CALL_OW 255
28070: ST_TO_ADDR
// tech_space := tech_spacanom ;
28071: LD_ADDR_VAR 0 12
28075: PUSH
28076: LD_INT 29
28078: ST_TO_ADDR
// tech_time := tech_taurad ;
28079: LD_ADDR_VAR 0 13
28083: PUSH
28084: LD_INT 28
28086: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28087: LD_ADDR_VAR 0 11
28091: PUSH
28092: LD_VAR 0 1
28096: PPUSH
28097: CALL_OW 310
28101: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28102: LD_VAR 0 11
28106: PPUSH
28107: CALL_OW 247
28111: PUSH
28112: LD_INT 2
28114: EQUAL
28115: IFFALSE 28119
// exit ;
28117: GO 28629
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28119: LD_ADDR_VAR 0 8
28123: PUSH
28124: LD_INT 81
28126: PUSH
28127: LD_VAR 0 9
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 3
28138: PUSH
28139: LD_INT 21
28141: PUSH
28142: LD_INT 3
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PPUSH
28157: CALL_OW 69
28161: ST_TO_ADDR
// if not tmp then
28162: LD_VAR 0 8
28166: NOT
28167: IFFALSE 28171
// exit ;
28169: GO 28629
// if in_unit then
28171: LD_VAR 0 11
28175: IFFALSE 28199
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28177: LD_ADDR_VAR 0 10
28181: PUSH
28182: LD_VAR 0 8
28186: PPUSH
28187: LD_VAR 0 11
28191: PPUSH
28192: CALL_OW 74
28196: ST_TO_ADDR
28197: GO 28219
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28199: LD_ADDR_VAR 0 10
28203: PUSH
28204: LD_VAR 0 8
28208: PPUSH
28209: LD_VAR 0 1
28213: PPUSH
28214: CALL_OW 74
28218: ST_TO_ADDR
// if not enemy then
28219: LD_VAR 0 10
28223: NOT
28224: IFFALSE 28228
// exit ;
28226: GO 28629
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28228: LD_VAR 0 11
28232: PUSH
28233: LD_VAR 0 11
28237: PPUSH
28238: LD_VAR 0 10
28242: PPUSH
28243: CALL_OW 296
28247: PUSH
28248: LD_INT 13
28250: GREATER
28251: AND
28252: PUSH
28253: LD_VAR 0 1
28257: PPUSH
28258: LD_VAR 0 10
28262: PPUSH
28263: CALL_OW 296
28267: PUSH
28268: LD_INT 12
28270: GREATER
28271: OR
28272: IFFALSE 28276
// exit ;
28274: GO 28629
// missile := [ 1 ] ;
28276: LD_ADDR_VAR 0 14
28280: PUSH
28281: LD_INT 1
28283: PUSH
28284: EMPTY
28285: LIST
28286: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28287: LD_VAR 0 9
28291: PPUSH
28292: LD_VAR 0 12
28296: PPUSH
28297: CALL_OW 325
28301: IFFALSE 28330
// missile := Insert ( missile , missile + 1 , 2 ) ;
28303: LD_ADDR_VAR 0 14
28307: PUSH
28308: LD_VAR 0 14
28312: PPUSH
28313: LD_VAR 0 14
28317: PUSH
28318: LD_INT 1
28320: PLUS
28321: PPUSH
28322: LD_INT 2
28324: PPUSH
28325: CALL_OW 2
28329: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28330: LD_VAR 0 9
28334: PPUSH
28335: LD_VAR 0 13
28339: PPUSH
28340: CALL_OW 325
28344: PUSH
28345: LD_VAR 0 10
28349: PPUSH
28350: CALL_OW 255
28354: PPUSH
28355: LD_VAR 0 13
28359: PPUSH
28360: CALL_OW 325
28364: NOT
28365: AND
28366: IFFALSE 28395
// missile := Insert ( missile , missile + 1 , 3 ) ;
28368: LD_ADDR_VAR 0 14
28372: PUSH
28373: LD_VAR 0 14
28377: PPUSH
28378: LD_VAR 0 14
28382: PUSH
28383: LD_INT 1
28385: PLUS
28386: PPUSH
28387: LD_INT 3
28389: PPUSH
28390: CALL_OW 2
28394: ST_TO_ADDR
// if missile < 2 then
28395: LD_VAR 0 14
28399: PUSH
28400: LD_INT 2
28402: LESS
28403: IFFALSE 28407
// exit ;
28405: GO 28629
// x := GetX ( enemy ) ;
28407: LD_ADDR_VAR 0 4
28411: PUSH
28412: LD_VAR 0 10
28416: PPUSH
28417: CALL_OW 250
28421: ST_TO_ADDR
// y := GetY ( enemy ) ;
28422: LD_ADDR_VAR 0 5
28426: PUSH
28427: LD_VAR 0 10
28431: PPUSH
28432: CALL_OW 251
28436: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28437: LD_ADDR_VAR 0 6
28441: PUSH
28442: LD_VAR 0 4
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PPUSH
28451: LD_INT 1
28453: PPUSH
28454: CALL_OW 12
28458: PLUS
28459: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28460: LD_ADDR_VAR 0 7
28464: PUSH
28465: LD_VAR 0 5
28469: PUSH
28470: LD_INT 1
28472: NEG
28473: PPUSH
28474: LD_INT 1
28476: PPUSH
28477: CALL_OW 12
28481: PLUS
28482: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28483: LD_VAR 0 6
28487: PPUSH
28488: LD_VAR 0 7
28492: PPUSH
28493: CALL_OW 488
28497: NOT
28498: IFFALSE 28520
// begin _x := x ;
28500: LD_ADDR_VAR 0 6
28504: PUSH
28505: LD_VAR 0 4
28509: ST_TO_ADDR
// _y := y ;
28510: LD_ADDR_VAR 0 7
28514: PUSH
28515: LD_VAR 0 5
28519: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28520: LD_ADDR_VAR 0 3
28524: PUSH
28525: LD_INT 1
28527: PPUSH
28528: LD_VAR 0 14
28532: PPUSH
28533: CALL_OW 12
28537: ST_TO_ADDR
// case i of 1 :
28538: LD_VAR 0 3
28542: PUSH
28543: LD_INT 1
28545: DOUBLE
28546: EQUAL
28547: IFTRUE 28551
28549: GO 28568
28551: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28552: LD_VAR 0 1
28556: PPUSH
28557: LD_VAR 0 10
28561: PPUSH
28562: CALL_OW 115
28566: GO 28629
28568: LD_INT 2
28570: DOUBLE
28571: EQUAL
28572: IFTRUE 28576
28574: GO 28598
28576: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28577: LD_VAR 0 1
28581: PPUSH
28582: LD_VAR 0 6
28586: PPUSH
28587: LD_VAR 0 7
28591: PPUSH
28592: CALL_OW 153
28596: GO 28629
28598: LD_INT 3
28600: DOUBLE
28601: EQUAL
28602: IFTRUE 28606
28604: GO 28628
28606: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28607: LD_VAR 0 1
28611: PPUSH
28612: LD_VAR 0 6
28616: PPUSH
28617: LD_VAR 0 7
28621: PPUSH
28622: CALL_OW 154
28626: GO 28629
28628: POP
// end ;
28629: LD_VAR 0 2
28633: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28634: LD_INT 0
28636: PPUSH
28637: PPUSH
28638: PPUSH
28639: PPUSH
28640: PPUSH
28641: PPUSH
// if not unit or not building then
28642: LD_VAR 0 1
28646: NOT
28647: PUSH
28648: LD_VAR 0 2
28652: NOT
28653: OR
28654: IFFALSE 28658
// exit ;
28656: GO 28816
// x := GetX ( building ) ;
28658: LD_ADDR_VAR 0 5
28662: PUSH
28663: LD_VAR 0 2
28667: PPUSH
28668: CALL_OW 250
28672: ST_TO_ADDR
// y := GetY ( building ) ;
28673: LD_ADDR_VAR 0 6
28677: PUSH
28678: LD_VAR 0 2
28682: PPUSH
28683: CALL_OW 251
28687: ST_TO_ADDR
// for i = 0 to 5 do
28688: LD_ADDR_VAR 0 4
28692: PUSH
28693: DOUBLE
28694: LD_INT 0
28696: DEC
28697: ST_TO_ADDR
28698: LD_INT 5
28700: PUSH
28701: FOR_TO
28702: IFFALSE 28814
// begin _x := ShiftX ( x , i , 3 ) ;
28704: LD_ADDR_VAR 0 7
28708: PUSH
28709: LD_VAR 0 5
28713: PPUSH
28714: LD_VAR 0 4
28718: PPUSH
28719: LD_INT 3
28721: PPUSH
28722: CALL_OW 272
28726: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28727: LD_ADDR_VAR 0 8
28731: PUSH
28732: LD_VAR 0 6
28736: PPUSH
28737: LD_VAR 0 4
28741: PPUSH
28742: LD_INT 3
28744: PPUSH
28745: CALL_OW 273
28749: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28750: LD_VAR 0 7
28754: PPUSH
28755: LD_VAR 0 8
28759: PPUSH
28760: CALL_OW 488
28764: NOT
28765: IFFALSE 28769
// continue ;
28767: GO 28701
// if HexInfo ( _x , _y ) = 0 then
28769: LD_VAR 0 7
28773: PPUSH
28774: LD_VAR 0 8
28778: PPUSH
28779: CALL_OW 428
28783: PUSH
28784: LD_INT 0
28786: EQUAL
28787: IFFALSE 28812
// begin ComMoveXY ( unit , _x , _y ) ;
28789: LD_VAR 0 1
28793: PPUSH
28794: LD_VAR 0 7
28798: PPUSH
28799: LD_VAR 0 8
28803: PPUSH
28804: CALL_OW 111
// exit ;
28808: POP
28809: POP
28810: GO 28816
// end ; end ;
28812: GO 28701
28814: POP
28815: POP
// end ;
28816: LD_VAR 0 3
28820: RET
// export function ScanBase ( side , base_area ) ; begin
28821: LD_INT 0
28823: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28824: LD_ADDR_VAR 0 3
28828: PUSH
28829: LD_VAR 0 2
28833: PPUSH
28834: LD_INT 81
28836: PUSH
28837: LD_VAR 0 1
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PPUSH
28846: CALL_OW 70
28850: ST_TO_ADDR
// end ;
28851: LD_VAR 0 3
28855: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28856: LD_INT 0
28858: PPUSH
28859: PPUSH
28860: PPUSH
28861: PPUSH
// result := false ;
28862: LD_ADDR_VAR 0 2
28866: PUSH
28867: LD_INT 0
28869: ST_TO_ADDR
// side := GetSide ( unit ) ;
28870: LD_ADDR_VAR 0 3
28874: PUSH
28875: LD_VAR 0 1
28879: PPUSH
28880: CALL_OW 255
28884: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28885: LD_ADDR_VAR 0 4
28889: PUSH
28890: LD_VAR 0 1
28894: PPUSH
28895: CALL_OW 248
28899: ST_TO_ADDR
// case nat of 1 :
28900: LD_VAR 0 4
28904: PUSH
28905: LD_INT 1
28907: DOUBLE
28908: EQUAL
28909: IFTRUE 28913
28911: GO 28924
28913: POP
// tech := tech_lassight ; 2 :
28914: LD_ADDR_VAR 0 5
28918: PUSH
28919: LD_INT 12
28921: ST_TO_ADDR
28922: GO 28963
28924: LD_INT 2
28926: DOUBLE
28927: EQUAL
28928: IFTRUE 28932
28930: GO 28943
28932: POP
// tech := tech_mortar ; 3 :
28933: LD_ADDR_VAR 0 5
28937: PUSH
28938: LD_INT 41
28940: ST_TO_ADDR
28941: GO 28963
28943: LD_INT 3
28945: DOUBLE
28946: EQUAL
28947: IFTRUE 28951
28949: GO 28962
28951: POP
// tech := tech_bazooka ; end ;
28952: LD_ADDR_VAR 0 5
28956: PUSH
28957: LD_INT 44
28959: ST_TO_ADDR
28960: GO 28963
28962: POP
// if Researched ( side , tech ) then
28963: LD_VAR 0 3
28967: PPUSH
28968: LD_VAR 0 5
28972: PPUSH
28973: CALL_OW 325
28977: IFFALSE 29004
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28979: LD_ADDR_VAR 0 2
28983: PUSH
28984: LD_INT 5
28986: PUSH
28987: LD_INT 8
28989: PUSH
28990: LD_INT 9
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: LIST
28997: PUSH
28998: LD_VAR 0 4
29002: ARRAY
29003: ST_TO_ADDR
// end ;
29004: LD_VAR 0 2
29008: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29009: LD_INT 0
29011: PPUSH
29012: PPUSH
29013: PPUSH
// if not mines then
29014: LD_VAR 0 2
29018: NOT
29019: IFFALSE 29023
// exit ;
29021: GO 29167
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29023: LD_ADDR_VAR 0 5
29027: PUSH
29028: LD_INT 81
29030: PUSH
29031: LD_VAR 0 1
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 3
29042: PUSH
29043: LD_INT 21
29045: PUSH
29046: LD_INT 3
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PPUSH
29061: CALL_OW 69
29065: ST_TO_ADDR
// for i in mines do
29066: LD_ADDR_VAR 0 4
29070: PUSH
29071: LD_VAR 0 2
29075: PUSH
29076: FOR_IN
29077: IFFALSE 29165
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29079: LD_VAR 0 4
29083: PUSH
29084: LD_INT 1
29086: ARRAY
29087: PPUSH
29088: LD_VAR 0 4
29092: PUSH
29093: LD_INT 2
29095: ARRAY
29096: PPUSH
29097: CALL_OW 458
29101: NOT
29102: IFFALSE 29106
// continue ;
29104: GO 29076
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29106: LD_VAR 0 4
29110: PUSH
29111: LD_INT 1
29113: ARRAY
29114: PPUSH
29115: LD_VAR 0 4
29119: PUSH
29120: LD_INT 2
29122: ARRAY
29123: PPUSH
29124: CALL_OW 428
29128: PUSH
29129: LD_VAR 0 5
29133: IN
29134: IFFALSE 29163
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29136: LD_VAR 0 4
29140: PUSH
29141: LD_INT 1
29143: ARRAY
29144: PPUSH
29145: LD_VAR 0 4
29149: PUSH
29150: LD_INT 2
29152: ARRAY
29153: PPUSH
29154: LD_VAR 0 1
29158: PPUSH
29159: CALL_OW 456
// end ;
29163: GO 29076
29165: POP
29166: POP
// end ;
29167: LD_VAR 0 3
29171: RET
// export function Count ( array ) ; var i ; begin
29172: LD_INT 0
29174: PPUSH
29175: PPUSH
// result := 0 ;
29176: LD_ADDR_VAR 0 2
29180: PUSH
29181: LD_INT 0
29183: ST_TO_ADDR
// for i in array do
29184: LD_ADDR_VAR 0 3
29188: PUSH
29189: LD_VAR 0 1
29193: PUSH
29194: FOR_IN
29195: IFFALSE 29219
// if i then
29197: LD_VAR 0 3
29201: IFFALSE 29217
// result := result + 1 ;
29203: LD_ADDR_VAR 0 2
29207: PUSH
29208: LD_VAR 0 2
29212: PUSH
29213: LD_INT 1
29215: PLUS
29216: ST_TO_ADDR
29217: GO 29194
29219: POP
29220: POP
// end ;
29221: LD_VAR 0 2
29225: RET
// export function IsEmpty ( building ) ; begin
29226: LD_INT 0
29228: PPUSH
// if not building then
29229: LD_VAR 0 1
29233: NOT
29234: IFFALSE 29238
// exit ;
29236: GO 29281
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29238: LD_ADDR_VAR 0 2
29242: PUSH
29243: LD_VAR 0 1
29247: PUSH
29248: LD_INT 22
29250: PUSH
29251: LD_VAR 0 1
29255: PPUSH
29256: CALL_OW 255
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 58
29267: PUSH
29268: EMPTY
29269: LIST
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PPUSH
29275: CALL_OW 69
29279: IN
29280: ST_TO_ADDR
// end ;
29281: LD_VAR 0 2
29285: RET
// export function IsNotFull ( building ) ; begin
29286: LD_INT 0
29288: PPUSH
// if not building then
29289: LD_VAR 0 1
29293: NOT
29294: IFFALSE 29298
// exit ;
29296: GO 29317
// result := UnitsInside ( building ) < 6 ;
29298: LD_ADDR_VAR 0 2
29302: PUSH
29303: LD_VAR 0 1
29307: PPUSH
29308: CALL_OW 313
29312: PUSH
29313: LD_INT 6
29315: LESS
29316: ST_TO_ADDR
// end ;
29317: LD_VAR 0 2
29321: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29322: LD_INT 0
29324: PPUSH
29325: PPUSH
29326: PPUSH
29327: PPUSH
// tmp := [ ] ;
29328: LD_ADDR_VAR 0 3
29332: PUSH
29333: EMPTY
29334: ST_TO_ADDR
// list := [ ] ;
29335: LD_ADDR_VAR 0 5
29339: PUSH
29340: EMPTY
29341: ST_TO_ADDR
// for i = 16 to 25 do
29342: LD_ADDR_VAR 0 4
29346: PUSH
29347: DOUBLE
29348: LD_INT 16
29350: DEC
29351: ST_TO_ADDR
29352: LD_INT 25
29354: PUSH
29355: FOR_TO
29356: IFFALSE 29429
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29358: LD_ADDR_VAR 0 3
29362: PUSH
29363: LD_VAR 0 3
29367: PUSH
29368: LD_INT 22
29370: PUSH
29371: LD_VAR 0 1
29375: PPUSH
29376: CALL_OW 255
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 91
29387: PUSH
29388: LD_VAR 0 1
29392: PUSH
29393: LD_INT 6
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 30
29403: PUSH
29404: LD_VAR 0 4
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: LIST
29417: PUSH
29418: EMPTY
29419: LIST
29420: PPUSH
29421: CALL_OW 69
29425: ADD
29426: ST_TO_ADDR
29427: GO 29355
29429: POP
29430: POP
// for i = 1 to tmp do
29431: LD_ADDR_VAR 0 4
29435: PUSH
29436: DOUBLE
29437: LD_INT 1
29439: DEC
29440: ST_TO_ADDR
29441: LD_VAR 0 3
29445: PUSH
29446: FOR_TO
29447: IFFALSE 29535
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29449: LD_ADDR_VAR 0 5
29453: PUSH
29454: LD_VAR 0 5
29458: PUSH
29459: LD_VAR 0 3
29463: PUSH
29464: LD_VAR 0 4
29468: ARRAY
29469: PPUSH
29470: CALL_OW 266
29474: PUSH
29475: LD_VAR 0 3
29479: PUSH
29480: LD_VAR 0 4
29484: ARRAY
29485: PPUSH
29486: CALL_OW 250
29490: PUSH
29491: LD_VAR 0 3
29495: PUSH
29496: LD_VAR 0 4
29500: ARRAY
29501: PPUSH
29502: CALL_OW 251
29506: PUSH
29507: LD_VAR 0 3
29511: PUSH
29512: LD_VAR 0 4
29516: ARRAY
29517: PPUSH
29518: CALL_OW 254
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: PUSH
29529: EMPTY
29530: LIST
29531: ADD
29532: ST_TO_ADDR
29533: GO 29446
29535: POP
29536: POP
// result := list ;
29537: LD_ADDR_VAR 0 2
29541: PUSH
29542: LD_VAR 0 5
29546: ST_TO_ADDR
// end ;
29547: LD_VAR 0 2
29551: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29552: LD_INT 0
29554: PPUSH
29555: PPUSH
29556: PPUSH
29557: PPUSH
29558: PPUSH
29559: PPUSH
29560: PPUSH
// if not factory then
29561: LD_VAR 0 1
29565: NOT
29566: IFFALSE 29570
// exit ;
29568: GO 30163
// if control = control_apeman then
29570: LD_VAR 0 4
29574: PUSH
29575: LD_INT 5
29577: EQUAL
29578: IFFALSE 29687
// begin tmp := UnitsInside ( factory ) ;
29580: LD_ADDR_VAR 0 8
29584: PUSH
29585: LD_VAR 0 1
29589: PPUSH
29590: CALL_OW 313
29594: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29595: LD_VAR 0 8
29599: PPUSH
29600: LD_INT 25
29602: PUSH
29603: LD_INT 12
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PPUSH
29610: CALL_OW 72
29614: NOT
29615: IFFALSE 29625
// control := control_manual ;
29617: LD_ADDR_VAR 0 4
29621: PUSH
29622: LD_INT 1
29624: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29625: LD_ADDR_VAR 0 8
29629: PUSH
29630: LD_VAR 0 1
29634: PPUSH
29635: CALL 29322 0 1
29639: ST_TO_ADDR
// if tmp then
29640: LD_VAR 0 8
29644: IFFALSE 29687
// begin for i in tmp do
29646: LD_ADDR_VAR 0 7
29650: PUSH
29651: LD_VAR 0 8
29655: PUSH
29656: FOR_IN
29657: IFFALSE 29685
// if i [ 1 ] = b_ext_radio then
29659: LD_VAR 0 7
29663: PUSH
29664: LD_INT 1
29666: ARRAY
29667: PUSH
29668: LD_INT 22
29670: EQUAL
29671: IFFALSE 29683
// begin control := control_remote ;
29673: LD_ADDR_VAR 0 4
29677: PUSH
29678: LD_INT 2
29680: ST_TO_ADDR
// break ;
29681: GO 29685
// end ;
29683: GO 29656
29685: POP
29686: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29687: LD_VAR 0 1
29691: PPUSH
29692: LD_VAR 0 2
29696: PPUSH
29697: LD_VAR 0 3
29701: PPUSH
29702: LD_VAR 0 4
29706: PPUSH
29707: LD_VAR 0 5
29711: PPUSH
29712: CALL_OW 448
29716: IFFALSE 29751
// begin result := [ chassis , engine , control , weapon ] ;
29718: LD_ADDR_VAR 0 6
29722: PUSH
29723: LD_VAR 0 2
29727: PUSH
29728: LD_VAR 0 3
29732: PUSH
29733: LD_VAR 0 4
29737: PUSH
29738: LD_VAR 0 5
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: ST_TO_ADDR
// exit ;
29749: GO 30163
// end ; _chassis := AvailableChassisList ( factory ) ;
29751: LD_ADDR_VAR 0 9
29755: PUSH
29756: LD_VAR 0 1
29760: PPUSH
29761: CALL_OW 475
29765: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29766: LD_ADDR_VAR 0 11
29770: PUSH
29771: LD_VAR 0 1
29775: PPUSH
29776: CALL_OW 476
29780: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29781: LD_ADDR_VAR 0 12
29785: PUSH
29786: LD_VAR 0 1
29790: PPUSH
29791: CALL_OW 477
29795: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29796: LD_ADDR_VAR 0 10
29800: PUSH
29801: LD_VAR 0 1
29805: PPUSH
29806: CALL_OW 478
29810: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29811: LD_VAR 0 9
29815: NOT
29816: PUSH
29817: LD_VAR 0 11
29821: NOT
29822: OR
29823: PUSH
29824: LD_VAR 0 12
29828: NOT
29829: OR
29830: PUSH
29831: LD_VAR 0 10
29835: NOT
29836: OR
29837: IFFALSE 29872
// begin result := [ chassis , engine , control , weapon ] ;
29839: LD_ADDR_VAR 0 6
29843: PUSH
29844: LD_VAR 0 2
29848: PUSH
29849: LD_VAR 0 3
29853: PUSH
29854: LD_VAR 0 4
29858: PUSH
29859: LD_VAR 0 5
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: ST_TO_ADDR
// exit ;
29870: GO 30163
// end ; if not chassis in _chassis then
29872: LD_VAR 0 2
29876: PUSH
29877: LD_VAR 0 9
29881: IN
29882: NOT
29883: IFFALSE 29909
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29885: LD_ADDR_VAR 0 2
29889: PUSH
29890: LD_VAR 0 9
29894: PUSH
29895: LD_INT 1
29897: PPUSH
29898: LD_VAR 0 9
29902: PPUSH
29903: CALL_OW 12
29907: ARRAY
29908: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29909: LD_VAR 0 2
29913: PPUSH
29914: LD_VAR 0 3
29918: PPUSH
29919: CALL 30168 0 2
29923: NOT
29924: IFFALSE 29983
// repeat engine := _engine [ 1 ] ;
29926: LD_ADDR_VAR 0 3
29930: PUSH
29931: LD_VAR 0 11
29935: PUSH
29936: LD_INT 1
29938: ARRAY
29939: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29940: LD_ADDR_VAR 0 11
29944: PUSH
29945: LD_VAR 0 11
29949: PPUSH
29950: LD_INT 1
29952: PPUSH
29953: CALL_OW 3
29957: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29958: LD_VAR 0 2
29962: PPUSH
29963: LD_VAR 0 3
29967: PPUSH
29968: CALL 30168 0 2
29972: PUSH
29973: LD_VAR 0 11
29977: PUSH
29978: EMPTY
29979: EQUAL
29980: OR
29981: IFFALSE 29926
// if not control in _control then
29983: LD_VAR 0 4
29987: PUSH
29988: LD_VAR 0 12
29992: IN
29993: NOT
29994: IFFALSE 30020
// control := _control [ rand ( 1 , _control ) ] ;
29996: LD_ADDR_VAR 0 4
30000: PUSH
30001: LD_VAR 0 12
30005: PUSH
30006: LD_INT 1
30008: PPUSH
30009: LD_VAR 0 12
30013: PPUSH
30014: CALL_OW 12
30018: ARRAY
30019: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30020: LD_VAR 0 2
30024: PPUSH
30025: LD_VAR 0 5
30029: PPUSH
30030: CALL 30388 0 2
30034: NOT
30035: IFFALSE 30094
// repeat weapon := _weapon [ 1 ] ;
30037: LD_ADDR_VAR 0 5
30041: PUSH
30042: LD_VAR 0 10
30046: PUSH
30047: LD_INT 1
30049: ARRAY
30050: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30051: LD_ADDR_VAR 0 10
30055: PUSH
30056: LD_VAR 0 10
30060: PPUSH
30061: LD_INT 1
30063: PPUSH
30064: CALL_OW 3
30068: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30069: LD_VAR 0 2
30073: PPUSH
30074: LD_VAR 0 5
30078: PPUSH
30079: CALL 30388 0 2
30083: PUSH
30084: LD_VAR 0 10
30088: PUSH
30089: EMPTY
30090: EQUAL
30091: OR
30092: IFFALSE 30037
// result := [ ] ;
30094: LD_ADDR_VAR 0 6
30098: PUSH
30099: EMPTY
30100: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30101: LD_VAR 0 1
30105: PPUSH
30106: LD_VAR 0 2
30110: PPUSH
30111: LD_VAR 0 3
30115: PPUSH
30116: LD_VAR 0 4
30120: PPUSH
30121: LD_VAR 0 5
30125: PPUSH
30126: CALL_OW 448
30130: IFFALSE 30163
// result := [ chassis , engine , control , weapon ] ;
30132: LD_ADDR_VAR 0 6
30136: PUSH
30137: LD_VAR 0 2
30141: PUSH
30142: LD_VAR 0 3
30146: PUSH
30147: LD_VAR 0 4
30151: PUSH
30152: LD_VAR 0 5
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: ST_TO_ADDR
// end ;
30163: LD_VAR 0 6
30167: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30168: LD_INT 0
30170: PPUSH
// if not chassis or not engine then
30171: LD_VAR 0 1
30175: NOT
30176: PUSH
30177: LD_VAR 0 2
30181: NOT
30182: OR
30183: IFFALSE 30187
// exit ;
30185: GO 30383
// case engine of engine_solar :
30187: LD_VAR 0 2
30191: PUSH
30192: LD_INT 2
30194: DOUBLE
30195: EQUAL
30196: IFTRUE 30200
30198: GO 30238
30200: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30201: LD_ADDR_VAR 0 3
30205: PUSH
30206: LD_INT 11
30208: PUSH
30209: LD_INT 12
30211: PUSH
30212: LD_INT 13
30214: PUSH
30215: LD_INT 14
30217: PUSH
30218: LD_INT 1
30220: PUSH
30221: LD_INT 2
30223: PUSH
30224: LD_INT 3
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: ST_TO_ADDR
30236: GO 30367
30238: LD_INT 1
30240: DOUBLE
30241: EQUAL
30242: IFTRUE 30246
30244: GO 30308
30246: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30247: LD_ADDR_VAR 0 3
30251: PUSH
30252: LD_INT 11
30254: PUSH
30255: LD_INT 12
30257: PUSH
30258: LD_INT 13
30260: PUSH
30261: LD_INT 14
30263: PUSH
30264: LD_INT 1
30266: PUSH
30267: LD_INT 2
30269: PUSH
30270: LD_INT 3
30272: PUSH
30273: LD_INT 4
30275: PUSH
30276: LD_INT 5
30278: PUSH
30279: LD_INT 21
30281: PUSH
30282: LD_INT 23
30284: PUSH
30285: LD_INT 22
30287: PUSH
30288: LD_INT 24
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: ST_TO_ADDR
30306: GO 30367
30308: LD_INT 3
30310: DOUBLE
30311: EQUAL
30312: IFTRUE 30316
30314: GO 30366
30316: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30317: LD_ADDR_VAR 0 3
30321: PUSH
30322: LD_INT 13
30324: PUSH
30325: LD_INT 14
30327: PUSH
30328: LD_INT 2
30330: PUSH
30331: LD_INT 3
30333: PUSH
30334: LD_INT 4
30336: PUSH
30337: LD_INT 5
30339: PUSH
30340: LD_INT 21
30342: PUSH
30343: LD_INT 22
30345: PUSH
30346: LD_INT 23
30348: PUSH
30349: LD_INT 24
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: ST_TO_ADDR
30364: GO 30367
30366: POP
// result := ( chassis in result ) ;
30367: LD_ADDR_VAR 0 3
30371: PUSH
30372: LD_VAR 0 1
30376: PUSH
30377: LD_VAR 0 3
30381: IN
30382: ST_TO_ADDR
// end ;
30383: LD_VAR 0 3
30387: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30388: LD_INT 0
30390: PPUSH
// if not chassis or not weapon then
30391: LD_VAR 0 1
30395: NOT
30396: PUSH
30397: LD_VAR 0 2
30401: NOT
30402: OR
30403: IFFALSE 30407
// exit ;
30405: GO 31469
// case weapon of us_machine_gun :
30407: LD_VAR 0 2
30411: PUSH
30412: LD_INT 2
30414: DOUBLE
30415: EQUAL
30416: IFTRUE 30420
30418: GO 30450
30420: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30421: LD_ADDR_VAR 0 3
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: LD_INT 2
30431: PUSH
30432: LD_INT 3
30434: PUSH
30435: LD_INT 4
30437: PUSH
30438: LD_INT 5
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: ST_TO_ADDR
30448: GO 31453
30450: LD_INT 3
30452: DOUBLE
30453: EQUAL
30454: IFTRUE 30458
30456: GO 30488
30458: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30459: LD_ADDR_VAR 0 3
30463: PUSH
30464: LD_INT 1
30466: PUSH
30467: LD_INT 2
30469: PUSH
30470: LD_INT 3
30472: PUSH
30473: LD_INT 4
30475: PUSH
30476: LD_INT 5
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: ST_TO_ADDR
30486: GO 31453
30488: LD_INT 11
30490: DOUBLE
30491: EQUAL
30492: IFTRUE 30496
30494: GO 30526
30496: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30497: LD_ADDR_VAR 0 3
30501: PUSH
30502: LD_INT 1
30504: PUSH
30505: LD_INT 2
30507: PUSH
30508: LD_INT 3
30510: PUSH
30511: LD_INT 4
30513: PUSH
30514: LD_INT 5
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: ST_TO_ADDR
30524: GO 31453
30526: LD_INT 4
30528: DOUBLE
30529: EQUAL
30530: IFTRUE 30534
30532: GO 30560
30534: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30535: LD_ADDR_VAR 0 3
30539: PUSH
30540: LD_INT 2
30542: PUSH
30543: LD_INT 3
30545: PUSH
30546: LD_INT 4
30548: PUSH
30549: LD_INT 5
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: ST_TO_ADDR
30558: GO 31453
30560: LD_INT 5
30562: DOUBLE
30563: EQUAL
30564: IFTRUE 30568
30566: GO 30594
30568: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30569: LD_ADDR_VAR 0 3
30573: PUSH
30574: LD_INT 2
30576: PUSH
30577: LD_INT 3
30579: PUSH
30580: LD_INT 4
30582: PUSH
30583: LD_INT 5
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: ST_TO_ADDR
30592: GO 31453
30594: LD_INT 9
30596: DOUBLE
30597: EQUAL
30598: IFTRUE 30602
30600: GO 30628
30602: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30603: LD_ADDR_VAR 0 3
30607: PUSH
30608: LD_INT 2
30610: PUSH
30611: LD_INT 3
30613: PUSH
30614: LD_INT 4
30616: PUSH
30617: LD_INT 5
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: ST_TO_ADDR
30626: GO 31453
30628: LD_INT 7
30630: DOUBLE
30631: EQUAL
30632: IFTRUE 30636
30634: GO 30662
30636: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30637: LD_ADDR_VAR 0 3
30641: PUSH
30642: LD_INT 2
30644: PUSH
30645: LD_INT 3
30647: PUSH
30648: LD_INT 4
30650: PUSH
30651: LD_INT 5
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: ST_TO_ADDR
30660: GO 31453
30662: LD_INT 12
30664: DOUBLE
30665: EQUAL
30666: IFTRUE 30670
30668: GO 30696
30670: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30671: LD_ADDR_VAR 0 3
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: LD_INT 3
30681: PUSH
30682: LD_INT 4
30684: PUSH
30685: LD_INT 5
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: ST_TO_ADDR
30694: GO 31453
30696: LD_INT 13
30698: DOUBLE
30699: EQUAL
30700: IFTRUE 30704
30702: GO 30730
30704: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30705: LD_ADDR_VAR 0 3
30709: PUSH
30710: LD_INT 2
30712: PUSH
30713: LD_INT 3
30715: PUSH
30716: LD_INT 4
30718: PUSH
30719: LD_INT 5
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: ST_TO_ADDR
30728: GO 31453
30730: LD_INT 14
30732: DOUBLE
30733: EQUAL
30734: IFTRUE 30738
30736: GO 30756
30738: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30739: LD_ADDR_VAR 0 3
30743: PUSH
30744: LD_INT 4
30746: PUSH
30747: LD_INT 5
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: ST_TO_ADDR
30754: GO 31453
30756: LD_INT 6
30758: DOUBLE
30759: EQUAL
30760: IFTRUE 30764
30762: GO 30782
30764: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30765: LD_ADDR_VAR 0 3
30769: PUSH
30770: LD_INT 4
30772: PUSH
30773: LD_INT 5
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: ST_TO_ADDR
30780: GO 31453
30782: LD_INT 10
30784: DOUBLE
30785: EQUAL
30786: IFTRUE 30790
30788: GO 30808
30790: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30791: LD_ADDR_VAR 0 3
30795: PUSH
30796: LD_INT 4
30798: PUSH
30799: LD_INT 5
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: ST_TO_ADDR
30806: GO 31453
30808: LD_INT 22
30810: DOUBLE
30811: EQUAL
30812: IFTRUE 30816
30814: GO 30842
30816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30817: LD_ADDR_VAR 0 3
30821: PUSH
30822: LD_INT 11
30824: PUSH
30825: LD_INT 12
30827: PUSH
30828: LD_INT 13
30830: PUSH
30831: LD_INT 14
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: ST_TO_ADDR
30840: GO 31453
30842: LD_INT 23
30844: DOUBLE
30845: EQUAL
30846: IFTRUE 30850
30848: GO 30876
30850: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30851: LD_ADDR_VAR 0 3
30855: PUSH
30856: LD_INT 11
30858: PUSH
30859: LD_INT 12
30861: PUSH
30862: LD_INT 13
30864: PUSH
30865: LD_INT 14
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: ST_TO_ADDR
30874: GO 31453
30876: LD_INT 24
30878: DOUBLE
30879: EQUAL
30880: IFTRUE 30884
30882: GO 30910
30884: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30885: LD_ADDR_VAR 0 3
30889: PUSH
30890: LD_INT 11
30892: PUSH
30893: LD_INT 12
30895: PUSH
30896: LD_INT 13
30898: PUSH
30899: LD_INT 14
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: ST_TO_ADDR
30908: GO 31453
30910: LD_INT 30
30912: DOUBLE
30913: EQUAL
30914: IFTRUE 30918
30916: GO 30944
30918: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30919: LD_ADDR_VAR 0 3
30923: PUSH
30924: LD_INT 11
30926: PUSH
30927: LD_INT 12
30929: PUSH
30930: LD_INT 13
30932: PUSH
30933: LD_INT 14
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: ST_TO_ADDR
30942: GO 31453
30944: LD_INT 25
30946: DOUBLE
30947: EQUAL
30948: IFTRUE 30952
30950: GO 30970
30952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30953: LD_ADDR_VAR 0 3
30957: PUSH
30958: LD_INT 13
30960: PUSH
30961: LD_INT 14
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: ST_TO_ADDR
30968: GO 31453
30970: LD_INT 27
30972: DOUBLE
30973: EQUAL
30974: IFTRUE 30978
30976: GO 30996
30978: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30979: LD_ADDR_VAR 0 3
30983: PUSH
30984: LD_INT 13
30986: PUSH
30987: LD_INT 14
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: ST_TO_ADDR
30994: GO 31453
30996: LD_EXP 115
31000: DOUBLE
31001: EQUAL
31002: IFTRUE 31006
31004: GO 31032
31006: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31007: LD_ADDR_VAR 0 3
31011: PUSH
31012: LD_INT 11
31014: PUSH
31015: LD_INT 12
31017: PUSH
31018: LD_INT 13
31020: PUSH
31021: LD_INT 14
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: ST_TO_ADDR
31030: GO 31453
31032: LD_INT 28
31034: DOUBLE
31035: EQUAL
31036: IFTRUE 31040
31038: GO 31058
31040: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31041: LD_ADDR_VAR 0 3
31045: PUSH
31046: LD_INT 13
31048: PUSH
31049: LD_INT 14
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: ST_TO_ADDR
31056: GO 31453
31058: LD_INT 29
31060: DOUBLE
31061: EQUAL
31062: IFTRUE 31066
31064: GO 31084
31066: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31067: LD_ADDR_VAR 0 3
31071: PUSH
31072: LD_INT 13
31074: PUSH
31075: LD_INT 14
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: ST_TO_ADDR
31082: GO 31453
31084: LD_INT 31
31086: DOUBLE
31087: EQUAL
31088: IFTRUE 31092
31090: GO 31110
31092: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31093: LD_ADDR_VAR 0 3
31097: PUSH
31098: LD_INT 13
31100: PUSH
31101: LD_INT 14
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: ST_TO_ADDR
31108: GO 31453
31110: LD_INT 26
31112: DOUBLE
31113: EQUAL
31114: IFTRUE 31118
31116: GO 31136
31118: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31119: LD_ADDR_VAR 0 3
31123: PUSH
31124: LD_INT 13
31126: PUSH
31127: LD_INT 14
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: ST_TO_ADDR
31134: GO 31453
31136: LD_INT 42
31138: DOUBLE
31139: EQUAL
31140: IFTRUE 31144
31142: GO 31170
31144: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31145: LD_ADDR_VAR 0 3
31149: PUSH
31150: LD_INT 21
31152: PUSH
31153: LD_INT 22
31155: PUSH
31156: LD_INT 23
31158: PUSH
31159: LD_INT 24
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: ST_TO_ADDR
31168: GO 31453
31170: LD_INT 43
31172: DOUBLE
31173: EQUAL
31174: IFTRUE 31178
31176: GO 31204
31178: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31179: LD_ADDR_VAR 0 3
31183: PUSH
31184: LD_INT 21
31186: PUSH
31187: LD_INT 22
31189: PUSH
31190: LD_INT 23
31192: PUSH
31193: LD_INT 24
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: ST_TO_ADDR
31202: GO 31453
31204: LD_INT 44
31206: DOUBLE
31207: EQUAL
31208: IFTRUE 31212
31210: GO 31238
31212: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31213: LD_ADDR_VAR 0 3
31217: PUSH
31218: LD_INT 21
31220: PUSH
31221: LD_INT 22
31223: PUSH
31224: LD_INT 23
31226: PUSH
31227: LD_INT 24
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: ST_TO_ADDR
31236: GO 31453
31238: LD_INT 45
31240: DOUBLE
31241: EQUAL
31242: IFTRUE 31246
31244: GO 31272
31246: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31247: LD_ADDR_VAR 0 3
31251: PUSH
31252: LD_INT 21
31254: PUSH
31255: LD_INT 22
31257: PUSH
31258: LD_INT 23
31260: PUSH
31261: LD_INT 24
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: ST_TO_ADDR
31270: GO 31453
31272: LD_INT 49
31274: DOUBLE
31275: EQUAL
31276: IFTRUE 31280
31278: GO 31306
31280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31281: LD_ADDR_VAR 0 3
31285: PUSH
31286: LD_INT 21
31288: PUSH
31289: LD_INT 22
31291: PUSH
31292: LD_INT 23
31294: PUSH
31295: LD_INT 24
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: ST_TO_ADDR
31304: GO 31453
31306: LD_INT 51
31308: DOUBLE
31309: EQUAL
31310: IFTRUE 31314
31312: GO 31340
31314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31315: LD_ADDR_VAR 0 3
31319: PUSH
31320: LD_INT 21
31322: PUSH
31323: LD_INT 22
31325: PUSH
31326: LD_INT 23
31328: PUSH
31329: LD_INT 24
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: ST_TO_ADDR
31338: GO 31453
31340: LD_INT 52
31342: DOUBLE
31343: EQUAL
31344: IFTRUE 31348
31346: GO 31374
31348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31349: LD_ADDR_VAR 0 3
31353: PUSH
31354: LD_INT 21
31356: PUSH
31357: LD_INT 22
31359: PUSH
31360: LD_INT 23
31362: PUSH
31363: LD_INT 24
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: ST_TO_ADDR
31372: GO 31453
31374: LD_INT 53
31376: DOUBLE
31377: EQUAL
31378: IFTRUE 31382
31380: GO 31400
31382: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31383: LD_ADDR_VAR 0 3
31387: PUSH
31388: LD_INT 23
31390: PUSH
31391: LD_INT 24
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: ST_TO_ADDR
31398: GO 31453
31400: LD_INT 46
31402: DOUBLE
31403: EQUAL
31404: IFTRUE 31408
31406: GO 31426
31408: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31409: LD_ADDR_VAR 0 3
31413: PUSH
31414: LD_INT 23
31416: PUSH
31417: LD_INT 24
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: ST_TO_ADDR
31424: GO 31453
31426: LD_INT 47
31428: DOUBLE
31429: EQUAL
31430: IFTRUE 31434
31432: GO 31452
31434: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31435: LD_ADDR_VAR 0 3
31439: PUSH
31440: LD_INT 23
31442: PUSH
31443: LD_INT 24
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: ST_TO_ADDR
31450: GO 31453
31452: POP
// result := ( chassis in result ) ;
31453: LD_ADDR_VAR 0 3
31457: PUSH
31458: LD_VAR 0 1
31462: PUSH
31463: LD_VAR 0 3
31467: IN
31468: ST_TO_ADDR
// end ;
31469: LD_VAR 0 3
31473: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31474: LD_INT 0
31476: PPUSH
31477: PPUSH
31478: PPUSH
31479: PPUSH
31480: PPUSH
31481: PPUSH
31482: PPUSH
// result := array ;
31483: LD_ADDR_VAR 0 5
31487: PUSH
31488: LD_VAR 0 1
31492: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31493: LD_VAR 0 1
31497: NOT
31498: PUSH
31499: LD_VAR 0 2
31503: NOT
31504: OR
31505: PUSH
31506: LD_VAR 0 3
31510: NOT
31511: OR
31512: PUSH
31513: LD_VAR 0 2
31517: PUSH
31518: LD_VAR 0 1
31522: GREATER
31523: OR
31524: PUSH
31525: LD_VAR 0 3
31529: PUSH
31530: LD_VAR 0 1
31534: GREATER
31535: OR
31536: IFFALSE 31540
// exit ;
31538: GO 31836
// if direction then
31540: LD_VAR 0 4
31544: IFFALSE 31608
// begin d := 1 ;
31546: LD_ADDR_VAR 0 9
31550: PUSH
31551: LD_INT 1
31553: ST_TO_ADDR
// if i_from > i_to then
31554: LD_VAR 0 2
31558: PUSH
31559: LD_VAR 0 3
31563: GREATER
31564: IFFALSE 31590
// length := ( array - i_from ) + i_to else
31566: LD_ADDR_VAR 0 11
31570: PUSH
31571: LD_VAR 0 1
31575: PUSH
31576: LD_VAR 0 2
31580: MINUS
31581: PUSH
31582: LD_VAR 0 3
31586: PLUS
31587: ST_TO_ADDR
31588: GO 31606
// length := i_to - i_from ;
31590: LD_ADDR_VAR 0 11
31594: PUSH
31595: LD_VAR 0 3
31599: PUSH
31600: LD_VAR 0 2
31604: MINUS
31605: ST_TO_ADDR
// end else
31606: GO 31669
// begin d := - 1 ;
31608: LD_ADDR_VAR 0 9
31612: PUSH
31613: LD_INT 1
31615: NEG
31616: ST_TO_ADDR
// if i_from > i_to then
31617: LD_VAR 0 2
31621: PUSH
31622: LD_VAR 0 3
31626: GREATER
31627: IFFALSE 31647
// length := i_from - i_to else
31629: LD_ADDR_VAR 0 11
31633: PUSH
31634: LD_VAR 0 2
31638: PUSH
31639: LD_VAR 0 3
31643: MINUS
31644: ST_TO_ADDR
31645: GO 31669
// length := ( array - i_to ) + i_from ;
31647: LD_ADDR_VAR 0 11
31651: PUSH
31652: LD_VAR 0 1
31656: PUSH
31657: LD_VAR 0 3
31661: MINUS
31662: PUSH
31663: LD_VAR 0 2
31667: PLUS
31668: ST_TO_ADDR
// end ; if not length then
31669: LD_VAR 0 11
31673: NOT
31674: IFFALSE 31678
// exit ;
31676: GO 31836
// tmp := array ;
31678: LD_ADDR_VAR 0 10
31682: PUSH
31683: LD_VAR 0 1
31687: ST_TO_ADDR
// for i = 1 to length do
31688: LD_ADDR_VAR 0 6
31692: PUSH
31693: DOUBLE
31694: LD_INT 1
31696: DEC
31697: ST_TO_ADDR
31698: LD_VAR 0 11
31702: PUSH
31703: FOR_TO
31704: IFFALSE 31824
// begin for j = 1 to array do
31706: LD_ADDR_VAR 0 7
31710: PUSH
31711: DOUBLE
31712: LD_INT 1
31714: DEC
31715: ST_TO_ADDR
31716: LD_VAR 0 1
31720: PUSH
31721: FOR_TO
31722: IFFALSE 31810
// begin k := j + d ;
31724: LD_ADDR_VAR 0 8
31728: PUSH
31729: LD_VAR 0 7
31733: PUSH
31734: LD_VAR 0 9
31738: PLUS
31739: ST_TO_ADDR
// if k > array then
31740: LD_VAR 0 8
31744: PUSH
31745: LD_VAR 0 1
31749: GREATER
31750: IFFALSE 31760
// k := 1 ;
31752: LD_ADDR_VAR 0 8
31756: PUSH
31757: LD_INT 1
31759: ST_TO_ADDR
// if not k then
31760: LD_VAR 0 8
31764: NOT
31765: IFFALSE 31777
// k := array ;
31767: LD_ADDR_VAR 0 8
31771: PUSH
31772: LD_VAR 0 1
31776: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31777: LD_ADDR_VAR 0 10
31781: PUSH
31782: LD_VAR 0 10
31786: PPUSH
31787: LD_VAR 0 8
31791: PPUSH
31792: LD_VAR 0 1
31796: PUSH
31797: LD_VAR 0 7
31801: ARRAY
31802: PPUSH
31803: CALL_OW 1
31807: ST_TO_ADDR
// end ;
31808: GO 31721
31810: POP
31811: POP
// array := tmp ;
31812: LD_ADDR_VAR 0 1
31816: PUSH
31817: LD_VAR 0 10
31821: ST_TO_ADDR
// end ;
31822: GO 31703
31824: POP
31825: POP
// result := array ;
31826: LD_ADDR_VAR 0 5
31830: PUSH
31831: LD_VAR 0 1
31835: ST_TO_ADDR
// end ;
31836: LD_VAR 0 5
31840: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31841: LD_INT 0
31843: PPUSH
31844: PPUSH
// result := 0 ;
31845: LD_ADDR_VAR 0 3
31849: PUSH
31850: LD_INT 0
31852: ST_TO_ADDR
// if not array or not value in array then
31853: LD_VAR 0 1
31857: NOT
31858: PUSH
31859: LD_VAR 0 2
31863: PUSH
31864: LD_VAR 0 1
31868: IN
31869: NOT
31870: OR
31871: IFFALSE 31875
// exit ;
31873: GO 31929
// for i = 1 to array do
31875: LD_ADDR_VAR 0 4
31879: PUSH
31880: DOUBLE
31881: LD_INT 1
31883: DEC
31884: ST_TO_ADDR
31885: LD_VAR 0 1
31889: PUSH
31890: FOR_TO
31891: IFFALSE 31927
// if value = array [ i ] then
31893: LD_VAR 0 2
31897: PUSH
31898: LD_VAR 0 1
31902: PUSH
31903: LD_VAR 0 4
31907: ARRAY
31908: EQUAL
31909: IFFALSE 31925
// begin result := i ;
31911: LD_ADDR_VAR 0 3
31915: PUSH
31916: LD_VAR 0 4
31920: ST_TO_ADDR
// exit ;
31921: POP
31922: POP
31923: GO 31929
// end ;
31925: GO 31890
31927: POP
31928: POP
// end ;
31929: LD_VAR 0 3
31933: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31934: LD_INT 0
31936: PPUSH
// vc_chassis := chassis ;
31937: LD_ADDR_OWVAR 37
31941: PUSH
31942: LD_VAR 0 1
31946: ST_TO_ADDR
// vc_engine := engine ;
31947: LD_ADDR_OWVAR 39
31951: PUSH
31952: LD_VAR 0 2
31956: ST_TO_ADDR
// vc_control := control ;
31957: LD_ADDR_OWVAR 38
31961: PUSH
31962: LD_VAR 0 3
31966: ST_TO_ADDR
// vc_weapon := weapon ;
31967: LD_ADDR_OWVAR 40
31971: PUSH
31972: LD_VAR 0 4
31976: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31977: LD_ADDR_OWVAR 41
31981: PUSH
31982: LD_VAR 0 5
31986: ST_TO_ADDR
// end ;
31987: LD_VAR 0 6
31991: RET
// export function WantPlant ( unit ) ; var task ; begin
31992: LD_INT 0
31994: PPUSH
31995: PPUSH
// result := false ;
31996: LD_ADDR_VAR 0 2
32000: PUSH
32001: LD_INT 0
32003: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32004: LD_ADDR_VAR 0 3
32008: PUSH
32009: LD_VAR 0 1
32013: PPUSH
32014: CALL_OW 437
32018: ST_TO_ADDR
// if task then
32019: LD_VAR 0 3
32023: IFFALSE 32051
// if task [ 1 ] [ 1 ] = p then
32025: LD_VAR 0 3
32029: PUSH
32030: LD_INT 1
32032: ARRAY
32033: PUSH
32034: LD_INT 1
32036: ARRAY
32037: PUSH
32038: LD_STRING p
32040: EQUAL
32041: IFFALSE 32051
// result := true ;
32043: LD_ADDR_VAR 0 2
32047: PUSH
32048: LD_INT 1
32050: ST_TO_ADDR
// end ;
32051: LD_VAR 0 2
32055: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32056: LD_INT 0
32058: PPUSH
32059: PPUSH
32060: PPUSH
32061: PPUSH
// if pos < 1 then
32062: LD_VAR 0 2
32066: PUSH
32067: LD_INT 1
32069: LESS
32070: IFFALSE 32074
// exit ;
32072: GO 32377
// if pos = 1 then
32074: LD_VAR 0 2
32078: PUSH
32079: LD_INT 1
32081: EQUAL
32082: IFFALSE 32115
// result := Replace ( arr , pos [ 1 ] , value ) else
32084: LD_ADDR_VAR 0 4
32088: PUSH
32089: LD_VAR 0 1
32093: PPUSH
32094: LD_VAR 0 2
32098: PUSH
32099: LD_INT 1
32101: ARRAY
32102: PPUSH
32103: LD_VAR 0 3
32107: PPUSH
32108: CALL_OW 1
32112: ST_TO_ADDR
32113: GO 32377
// begin tmp := arr ;
32115: LD_ADDR_VAR 0 6
32119: PUSH
32120: LD_VAR 0 1
32124: ST_TO_ADDR
// s_arr := [ tmp ] ;
32125: LD_ADDR_VAR 0 7
32129: PUSH
32130: LD_VAR 0 6
32134: PUSH
32135: EMPTY
32136: LIST
32137: ST_TO_ADDR
// for i = 1 to pos - 1 do
32138: LD_ADDR_VAR 0 5
32142: PUSH
32143: DOUBLE
32144: LD_INT 1
32146: DEC
32147: ST_TO_ADDR
32148: LD_VAR 0 2
32152: PUSH
32153: LD_INT 1
32155: MINUS
32156: PUSH
32157: FOR_TO
32158: IFFALSE 32203
// begin tmp := tmp [ pos [ i ] ] ;
32160: LD_ADDR_VAR 0 6
32164: PUSH
32165: LD_VAR 0 6
32169: PUSH
32170: LD_VAR 0 2
32174: PUSH
32175: LD_VAR 0 5
32179: ARRAY
32180: ARRAY
32181: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32182: LD_ADDR_VAR 0 7
32186: PUSH
32187: LD_VAR 0 7
32191: PUSH
32192: LD_VAR 0 6
32196: PUSH
32197: EMPTY
32198: LIST
32199: ADD
32200: ST_TO_ADDR
// end ;
32201: GO 32157
32203: POP
32204: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32205: LD_ADDR_VAR 0 6
32209: PUSH
32210: LD_VAR 0 6
32214: PPUSH
32215: LD_VAR 0 2
32219: PUSH
32220: LD_VAR 0 2
32224: ARRAY
32225: PPUSH
32226: LD_VAR 0 3
32230: PPUSH
32231: CALL_OW 1
32235: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32236: LD_ADDR_VAR 0 7
32240: PUSH
32241: LD_VAR 0 7
32245: PPUSH
32246: LD_VAR 0 7
32250: PPUSH
32251: LD_VAR 0 6
32255: PPUSH
32256: CALL_OW 1
32260: ST_TO_ADDR
// for i = s_arr downto 2 do
32261: LD_ADDR_VAR 0 5
32265: PUSH
32266: DOUBLE
32267: LD_VAR 0 7
32271: INC
32272: ST_TO_ADDR
32273: LD_INT 2
32275: PUSH
32276: FOR_DOWNTO
32277: IFFALSE 32361
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32279: LD_ADDR_VAR 0 6
32283: PUSH
32284: LD_VAR 0 7
32288: PUSH
32289: LD_VAR 0 5
32293: PUSH
32294: LD_INT 1
32296: MINUS
32297: ARRAY
32298: PPUSH
32299: LD_VAR 0 2
32303: PUSH
32304: LD_VAR 0 5
32308: PUSH
32309: LD_INT 1
32311: MINUS
32312: ARRAY
32313: PPUSH
32314: LD_VAR 0 7
32318: PUSH
32319: LD_VAR 0 5
32323: ARRAY
32324: PPUSH
32325: CALL_OW 1
32329: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32330: LD_ADDR_VAR 0 7
32334: PUSH
32335: LD_VAR 0 7
32339: PPUSH
32340: LD_VAR 0 5
32344: PUSH
32345: LD_INT 1
32347: MINUS
32348: PPUSH
32349: LD_VAR 0 6
32353: PPUSH
32354: CALL_OW 1
32358: ST_TO_ADDR
// end ;
32359: GO 32276
32361: POP
32362: POP
// result := s_arr [ 1 ] ;
32363: LD_ADDR_VAR 0 4
32367: PUSH
32368: LD_VAR 0 7
32372: PUSH
32373: LD_INT 1
32375: ARRAY
32376: ST_TO_ADDR
// end ; end ;
32377: LD_VAR 0 4
32381: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32382: LD_INT 0
32384: PPUSH
32385: PPUSH
// if not list then
32386: LD_VAR 0 1
32390: NOT
32391: IFFALSE 32395
// exit ;
32393: GO 32486
// i := list [ pos1 ] ;
32395: LD_ADDR_VAR 0 5
32399: PUSH
32400: LD_VAR 0 1
32404: PUSH
32405: LD_VAR 0 2
32409: ARRAY
32410: ST_TO_ADDR
// if not i then
32411: LD_VAR 0 5
32415: NOT
32416: IFFALSE 32420
// exit ;
32418: GO 32486
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32420: LD_ADDR_VAR 0 1
32424: PUSH
32425: LD_VAR 0 1
32429: PPUSH
32430: LD_VAR 0 2
32434: PPUSH
32435: LD_VAR 0 1
32439: PUSH
32440: LD_VAR 0 3
32444: ARRAY
32445: PPUSH
32446: CALL_OW 1
32450: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32451: LD_ADDR_VAR 0 1
32455: PUSH
32456: LD_VAR 0 1
32460: PPUSH
32461: LD_VAR 0 3
32465: PPUSH
32466: LD_VAR 0 5
32470: PPUSH
32471: CALL_OW 1
32475: ST_TO_ADDR
// result := list ;
32476: LD_ADDR_VAR 0 4
32480: PUSH
32481: LD_VAR 0 1
32485: ST_TO_ADDR
// end ;
32486: LD_VAR 0 4
32490: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32491: LD_INT 0
32493: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32494: LD_ADDR_VAR 0 5
32498: PUSH
32499: LD_VAR 0 1
32503: PPUSH
32504: CALL_OW 250
32508: PPUSH
32509: LD_VAR 0 1
32513: PPUSH
32514: CALL_OW 251
32518: PPUSH
32519: LD_VAR 0 2
32523: PPUSH
32524: LD_VAR 0 3
32528: PPUSH
32529: LD_VAR 0 4
32533: PPUSH
32534: CALL 32544 0 5
32538: ST_TO_ADDR
// end ;
32539: LD_VAR 0 5
32543: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32544: LD_INT 0
32546: PPUSH
32547: PPUSH
32548: PPUSH
32549: PPUSH
// if not list then
32550: LD_VAR 0 3
32554: NOT
32555: IFFALSE 32559
// exit ;
32557: GO 32947
// result := [ ] ;
32559: LD_ADDR_VAR 0 6
32563: PUSH
32564: EMPTY
32565: ST_TO_ADDR
// for i in list do
32566: LD_ADDR_VAR 0 7
32570: PUSH
32571: LD_VAR 0 3
32575: PUSH
32576: FOR_IN
32577: IFFALSE 32779
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32579: LD_ADDR_VAR 0 9
32583: PUSH
32584: LD_VAR 0 7
32588: PPUSH
32589: LD_VAR 0 1
32593: PPUSH
32594: LD_VAR 0 2
32598: PPUSH
32599: CALL_OW 297
32603: ST_TO_ADDR
// if not result then
32604: LD_VAR 0 6
32608: NOT
32609: IFFALSE 32635
// result := [ [ i , tmp ] ] else
32611: LD_ADDR_VAR 0 6
32615: PUSH
32616: LD_VAR 0 7
32620: PUSH
32621: LD_VAR 0 9
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: EMPTY
32631: LIST
32632: ST_TO_ADDR
32633: GO 32777
// begin if result [ result ] [ 2 ] < tmp then
32635: LD_VAR 0 6
32639: PUSH
32640: LD_VAR 0 6
32644: ARRAY
32645: PUSH
32646: LD_INT 2
32648: ARRAY
32649: PUSH
32650: LD_VAR 0 9
32654: LESS
32655: IFFALSE 32697
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32657: LD_ADDR_VAR 0 6
32661: PUSH
32662: LD_VAR 0 6
32666: PPUSH
32667: LD_VAR 0 6
32671: PUSH
32672: LD_INT 1
32674: PLUS
32675: PPUSH
32676: LD_VAR 0 7
32680: PUSH
32681: LD_VAR 0 9
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PPUSH
32690: CALL_OW 2
32694: ST_TO_ADDR
32695: GO 32777
// for j = 1 to result do
32697: LD_ADDR_VAR 0 8
32701: PUSH
32702: DOUBLE
32703: LD_INT 1
32705: DEC
32706: ST_TO_ADDR
32707: LD_VAR 0 6
32711: PUSH
32712: FOR_TO
32713: IFFALSE 32775
// begin if tmp < result [ j ] [ 2 ] then
32715: LD_VAR 0 9
32719: PUSH
32720: LD_VAR 0 6
32724: PUSH
32725: LD_VAR 0 8
32729: ARRAY
32730: PUSH
32731: LD_INT 2
32733: ARRAY
32734: LESS
32735: IFFALSE 32773
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32737: LD_ADDR_VAR 0 6
32741: PUSH
32742: LD_VAR 0 6
32746: PPUSH
32747: LD_VAR 0 8
32751: PPUSH
32752: LD_VAR 0 7
32756: PUSH
32757: LD_VAR 0 9
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PPUSH
32766: CALL_OW 2
32770: ST_TO_ADDR
// break ;
32771: GO 32775
// end ; end ;
32773: GO 32712
32775: POP
32776: POP
// end ; end ;
32777: GO 32576
32779: POP
32780: POP
// if result and not asc then
32781: LD_VAR 0 6
32785: PUSH
32786: LD_VAR 0 4
32790: NOT
32791: AND
32792: IFFALSE 32867
// begin tmp := result ;
32794: LD_ADDR_VAR 0 9
32798: PUSH
32799: LD_VAR 0 6
32803: ST_TO_ADDR
// for i = tmp downto 1 do
32804: LD_ADDR_VAR 0 7
32808: PUSH
32809: DOUBLE
32810: LD_VAR 0 9
32814: INC
32815: ST_TO_ADDR
32816: LD_INT 1
32818: PUSH
32819: FOR_DOWNTO
32820: IFFALSE 32865
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32822: LD_ADDR_VAR 0 6
32826: PUSH
32827: LD_VAR 0 6
32831: PPUSH
32832: LD_VAR 0 9
32836: PUSH
32837: LD_VAR 0 7
32841: MINUS
32842: PUSH
32843: LD_INT 1
32845: PLUS
32846: PPUSH
32847: LD_VAR 0 9
32851: PUSH
32852: LD_VAR 0 7
32856: ARRAY
32857: PPUSH
32858: CALL_OW 1
32862: ST_TO_ADDR
32863: GO 32819
32865: POP
32866: POP
// end ; tmp := [ ] ;
32867: LD_ADDR_VAR 0 9
32871: PUSH
32872: EMPTY
32873: ST_TO_ADDR
// if mode then
32874: LD_VAR 0 5
32878: IFFALSE 32947
// begin for i = 1 to result do
32880: LD_ADDR_VAR 0 7
32884: PUSH
32885: DOUBLE
32886: LD_INT 1
32888: DEC
32889: ST_TO_ADDR
32890: LD_VAR 0 6
32894: PUSH
32895: FOR_TO
32896: IFFALSE 32935
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32898: LD_ADDR_VAR 0 9
32902: PUSH
32903: LD_VAR 0 9
32907: PPUSH
32908: LD_VAR 0 7
32912: PPUSH
32913: LD_VAR 0 6
32917: PUSH
32918: LD_VAR 0 7
32922: ARRAY
32923: PUSH
32924: LD_INT 1
32926: ARRAY
32927: PPUSH
32928: CALL_OW 1
32932: ST_TO_ADDR
32933: GO 32895
32935: POP
32936: POP
// result := tmp ;
32937: LD_ADDR_VAR 0 6
32941: PUSH
32942: LD_VAR 0 9
32946: ST_TO_ADDR
// end ; end ;
32947: LD_VAR 0 6
32951: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32952: LD_INT 0
32954: PPUSH
32955: PPUSH
32956: PPUSH
32957: PPUSH
32958: PPUSH
32959: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32960: LD_ADDR_VAR 0 5
32964: PUSH
32965: LD_INT 0
32967: PUSH
32968: LD_INT 0
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: EMPTY
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: ST_TO_ADDR
// if not x or not y then
32982: LD_VAR 0 2
32986: NOT
32987: PUSH
32988: LD_VAR 0 3
32992: NOT
32993: OR
32994: IFFALSE 32998
// exit ;
32996: GO 34650
// if not range then
32998: LD_VAR 0 4
33002: NOT
33003: IFFALSE 33013
// range := 10 ;
33005: LD_ADDR_VAR 0 4
33009: PUSH
33010: LD_INT 10
33012: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33013: LD_ADDR_VAR 0 8
33017: PUSH
33018: LD_INT 81
33020: PUSH
33021: LD_VAR 0 1
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 92
33032: PUSH
33033: LD_VAR 0 2
33037: PUSH
33038: LD_VAR 0 3
33042: PUSH
33043: LD_VAR 0 4
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 3
33056: PUSH
33057: LD_INT 21
33059: PUSH
33060: LD_INT 3
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: LIST
33075: PPUSH
33076: CALL_OW 69
33080: ST_TO_ADDR
// if not tmp then
33081: LD_VAR 0 8
33085: NOT
33086: IFFALSE 33090
// exit ;
33088: GO 34650
// for i in tmp do
33090: LD_ADDR_VAR 0 6
33094: PUSH
33095: LD_VAR 0 8
33099: PUSH
33100: FOR_IN
33101: IFFALSE 34625
// begin points := [ 0 , 0 , 0 ] ;
33103: LD_ADDR_VAR 0 9
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: LD_INT 0
33113: PUSH
33114: LD_INT 0
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: LIST
33121: ST_TO_ADDR
// bpoints := 1 ;
33122: LD_ADDR_VAR 0 10
33126: PUSH
33127: LD_INT 1
33129: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33130: LD_VAR 0 6
33134: PPUSH
33135: CALL_OW 247
33139: PUSH
33140: LD_INT 1
33142: DOUBLE
33143: EQUAL
33144: IFTRUE 33148
33146: GO 33726
33148: POP
// begin if GetClass ( i ) = 1 then
33149: LD_VAR 0 6
33153: PPUSH
33154: CALL_OW 257
33158: PUSH
33159: LD_INT 1
33161: EQUAL
33162: IFFALSE 33183
// points := [ 10 , 5 , 3 ] ;
33164: LD_ADDR_VAR 0 9
33168: PUSH
33169: LD_INT 10
33171: PUSH
33172: LD_INT 5
33174: PUSH
33175: LD_INT 3
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: LIST
33182: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33183: LD_VAR 0 6
33187: PPUSH
33188: CALL_OW 257
33192: PUSH
33193: LD_INT 2
33195: PUSH
33196: LD_INT 3
33198: PUSH
33199: LD_INT 4
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: LIST
33206: IN
33207: IFFALSE 33228
// points := [ 3 , 2 , 1 ] ;
33209: LD_ADDR_VAR 0 9
33213: PUSH
33214: LD_INT 3
33216: PUSH
33217: LD_INT 2
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33228: LD_VAR 0 6
33232: PPUSH
33233: CALL_OW 257
33237: PUSH
33238: LD_INT 5
33240: EQUAL
33241: IFFALSE 33262
// points := [ 130 , 5 , 2 ] ;
33243: LD_ADDR_VAR 0 9
33247: PUSH
33248: LD_INT 130
33250: PUSH
33251: LD_INT 5
33253: PUSH
33254: LD_INT 2
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: LIST
33261: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33262: LD_VAR 0 6
33266: PPUSH
33267: CALL_OW 257
33271: PUSH
33272: LD_INT 8
33274: EQUAL
33275: IFFALSE 33296
// points := [ 35 , 35 , 30 ] ;
33277: LD_ADDR_VAR 0 9
33281: PUSH
33282: LD_INT 35
33284: PUSH
33285: LD_INT 35
33287: PUSH
33288: LD_INT 30
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: LIST
33295: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33296: LD_VAR 0 6
33300: PPUSH
33301: CALL_OW 257
33305: PUSH
33306: LD_INT 9
33308: EQUAL
33309: IFFALSE 33330
// points := [ 20 , 55 , 40 ] ;
33311: LD_ADDR_VAR 0 9
33315: PUSH
33316: LD_INT 20
33318: PUSH
33319: LD_INT 55
33321: PUSH
33322: LD_INT 40
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: LIST
33329: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33330: LD_VAR 0 6
33334: PPUSH
33335: CALL_OW 257
33339: PUSH
33340: LD_INT 12
33342: PUSH
33343: LD_INT 16
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: IN
33350: IFFALSE 33371
// points := [ 5 , 3 , 2 ] ;
33352: LD_ADDR_VAR 0 9
33356: PUSH
33357: LD_INT 5
33359: PUSH
33360: LD_INT 3
33362: PUSH
33363: LD_INT 2
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: LIST
33370: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33371: LD_VAR 0 6
33375: PPUSH
33376: CALL_OW 257
33380: PUSH
33381: LD_INT 17
33383: EQUAL
33384: IFFALSE 33405
// points := [ 100 , 50 , 75 ] ;
33386: LD_ADDR_VAR 0 9
33390: PUSH
33391: LD_INT 100
33393: PUSH
33394: LD_INT 50
33396: PUSH
33397: LD_INT 75
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33405: LD_VAR 0 6
33409: PPUSH
33410: CALL_OW 257
33414: PUSH
33415: LD_INT 15
33417: EQUAL
33418: IFFALSE 33439
// points := [ 10 , 5 , 3 ] ;
33420: LD_ADDR_VAR 0 9
33424: PUSH
33425: LD_INT 10
33427: PUSH
33428: LD_INT 5
33430: PUSH
33431: LD_INT 3
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33439: LD_VAR 0 6
33443: PPUSH
33444: CALL_OW 257
33448: PUSH
33449: LD_INT 14
33451: EQUAL
33452: IFFALSE 33473
// points := [ 10 , 0 , 0 ] ;
33454: LD_ADDR_VAR 0 9
33458: PUSH
33459: LD_INT 10
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: LD_INT 0
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: LIST
33472: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33473: LD_VAR 0 6
33477: PPUSH
33478: CALL_OW 257
33482: PUSH
33483: LD_INT 11
33485: EQUAL
33486: IFFALSE 33507
// points := [ 30 , 10 , 5 ] ;
33488: LD_ADDR_VAR 0 9
33492: PUSH
33493: LD_INT 30
33495: PUSH
33496: LD_INT 10
33498: PUSH
33499: LD_INT 5
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: LIST
33506: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33507: LD_VAR 0 1
33511: PPUSH
33512: LD_INT 5
33514: PPUSH
33515: CALL_OW 321
33519: PUSH
33520: LD_INT 2
33522: EQUAL
33523: IFFALSE 33540
// bpoints := bpoints * 1.8 ;
33525: LD_ADDR_VAR 0 10
33529: PUSH
33530: LD_VAR 0 10
33534: PUSH
33535: LD_REAL  1.80000000000000E+0000
33538: MUL
33539: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33540: LD_VAR 0 6
33544: PPUSH
33545: CALL_OW 257
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: LD_INT 2
33555: PUSH
33556: LD_INT 3
33558: PUSH
33559: LD_INT 4
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: IN
33568: PUSH
33569: LD_VAR 0 1
33573: PPUSH
33574: LD_INT 51
33576: PPUSH
33577: CALL_OW 321
33581: PUSH
33582: LD_INT 2
33584: EQUAL
33585: AND
33586: IFFALSE 33603
// bpoints := bpoints * 1.2 ;
33588: LD_ADDR_VAR 0 10
33592: PUSH
33593: LD_VAR 0 10
33597: PUSH
33598: LD_REAL  1.20000000000000E+0000
33601: MUL
33602: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33603: LD_VAR 0 6
33607: PPUSH
33608: CALL_OW 257
33612: PUSH
33613: LD_INT 5
33615: PUSH
33616: LD_INT 7
33618: PUSH
33619: LD_INT 9
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: LIST
33626: IN
33627: PUSH
33628: LD_VAR 0 1
33632: PPUSH
33633: LD_INT 52
33635: PPUSH
33636: CALL_OW 321
33640: PUSH
33641: LD_INT 2
33643: EQUAL
33644: AND
33645: IFFALSE 33662
// bpoints := bpoints * 1.5 ;
33647: LD_ADDR_VAR 0 10
33651: PUSH
33652: LD_VAR 0 10
33656: PUSH
33657: LD_REAL  1.50000000000000E+0000
33660: MUL
33661: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33662: LD_VAR 0 1
33666: PPUSH
33667: LD_INT 66
33669: PPUSH
33670: CALL_OW 321
33674: PUSH
33675: LD_INT 2
33677: EQUAL
33678: IFFALSE 33695
// bpoints := bpoints * 1.1 ;
33680: LD_ADDR_VAR 0 10
33684: PUSH
33685: LD_VAR 0 10
33689: PUSH
33690: LD_REAL  1.10000000000000E+0000
33693: MUL
33694: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33695: LD_ADDR_VAR 0 10
33699: PUSH
33700: LD_VAR 0 10
33704: PUSH
33705: LD_VAR 0 6
33709: PPUSH
33710: LD_INT 1
33712: PPUSH
33713: CALL_OW 259
33717: PUSH
33718: LD_REAL  1.15000000000000E+0000
33721: MUL
33722: MUL
33723: ST_TO_ADDR
// end ; unit_vehicle :
33724: GO 34554
33726: LD_INT 2
33728: DOUBLE
33729: EQUAL
33730: IFTRUE 33734
33732: GO 34542
33734: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33735: LD_VAR 0 6
33739: PPUSH
33740: CALL_OW 264
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: LD_INT 42
33750: PUSH
33751: LD_INT 24
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: LIST
33758: IN
33759: IFFALSE 33780
// points := [ 25 , 5 , 3 ] ;
33761: LD_ADDR_VAR 0 9
33765: PUSH
33766: LD_INT 25
33768: PUSH
33769: LD_INT 5
33771: PUSH
33772: LD_INT 3
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33780: LD_VAR 0 6
33784: PPUSH
33785: CALL_OW 264
33789: PUSH
33790: LD_INT 4
33792: PUSH
33793: LD_INT 43
33795: PUSH
33796: LD_INT 25
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: IN
33804: IFFALSE 33825
// points := [ 40 , 15 , 5 ] ;
33806: LD_ADDR_VAR 0 9
33810: PUSH
33811: LD_INT 40
33813: PUSH
33814: LD_INT 15
33816: PUSH
33817: LD_INT 5
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: LIST
33824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33825: LD_VAR 0 6
33829: PPUSH
33830: CALL_OW 264
33834: PUSH
33835: LD_INT 3
33837: PUSH
33838: LD_INT 23
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: IN
33845: IFFALSE 33866
// points := [ 7 , 25 , 8 ] ;
33847: LD_ADDR_VAR 0 9
33851: PUSH
33852: LD_INT 7
33854: PUSH
33855: LD_INT 25
33857: PUSH
33858: LD_INT 8
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: LIST
33865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33866: LD_VAR 0 6
33870: PPUSH
33871: CALL_OW 264
33875: PUSH
33876: LD_INT 5
33878: PUSH
33879: LD_INT 27
33881: PUSH
33882: LD_INT 44
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: IN
33890: IFFALSE 33911
// points := [ 14 , 50 , 16 ] ;
33892: LD_ADDR_VAR 0 9
33896: PUSH
33897: LD_INT 14
33899: PUSH
33900: LD_INT 50
33902: PUSH
33903: LD_INT 16
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: LIST
33910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33911: LD_VAR 0 6
33915: PPUSH
33916: CALL_OW 264
33920: PUSH
33921: LD_INT 6
33923: PUSH
33924: LD_INT 46
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: IN
33931: IFFALSE 33952
// points := [ 32 , 120 , 70 ] ;
33933: LD_ADDR_VAR 0 9
33937: PUSH
33938: LD_INT 32
33940: PUSH
33941: LD_INT 120
33943: PUSH
33944: LD_INT 70
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: LIST
33951: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33952: LD_VAR 0 6
33956: PPUSH
33957: CALL_OW 264
33961: PUSH
33962: LD_INT 7
33964: PUSH
33965: LD_INT 28
33967: PUSH
33968: LD_INT 45
33970: PUSH
33971: LD_EXP 115
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: IN
33982: IFFALSE 34003
// points := [ 35 , 20 , 45 ] ;
33984: LD_ADDR_VAR 0 9
33988: PUSH
33989: LD_INT 35
33991: PUSH
33992: LD_INT 20
33994: PUSH
33995: LD_INT 45
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: LIST
34002: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34003: LD_VAR 0 6
34007: PPUSH
34008: CALL_OW 264
34012: PUSH
34013: LD_INT 47
34015: PUSH
34016: EMPTY
34017: LIST
34018: IN
34019: IFFALSE 34040
// points := [ 67 , 45 , 75 ] ;
34021: LD_ADDR_VAR 0 9
34025: PUSH
34026: LD_INT 67
34028: PUSH
34029: LD_INT 45
34031: PUSH
34032: LD_INT 75
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: LIST
34039: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34040: LD_VAR 0 6
34044: PPUSH
34045: CALL_OW 264
34049: PUSH
34050: LD_INT 26
34052: PUSH
34053: EMPTY
34054: LIST
34055: IN
34056: IFFALSE 34077
// points := [ 120 , 30 , 80 ] ;
34058: LD_ADDR_VAR 0 9
34062: PUSH
34063: LD_INT 120
34065: PUSH
34066: LD_INT 30
34068: PUSH
34069: LD_INT 80
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: LIST
34076: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34077: LD_VAR 0 6
34081: PPUSH
34082: CALL_OW 264
34086: PUSH
34087: LD_INT 22
34089: PUSH
34090: EMPTY
34091: LIST
34092: IN
34093: IFFALSE 34114
// points := [ 40 , 1 , 1 ] ;
34095: LD_ADDR_VAR 0 9
34099: PUSH
34100: LD_INT 40
34102: PUSH
34103: LD_INT 1
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: LIST
34113: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34114: LD_VAR 0 6
34118: PPUSH
34119: CALL_OW 264
34123: PUSH
34124: LD_INT 29
34126: PUSH
34127: EMPTY
34128: LIST
34129: IN
34130: IFFALSE 34151
// points := [ 70 , 200 , 400 ] ;
34132: LD_ADDR_VAR 0 9
34136: PUSH
34137: LD_INT 70
34139: PUSH
34140: LD_INT 200
34142: PUSH
34143: LD_INT 400
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: LIST
34150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34151: LD_VAR 0 6
34155: PPUSH
34156: CALL_OW 264
34160: PUSH
34161: LD_INT 14
34163: PUSH
34164: LD_INT 53
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: IN
34171: IFFALSE 34192
// points := [ 40 , 10 , 20 ] ;
34173: LD_ADDR_VAR 0 9
34177: PUSH
34178: LD_INT 40
34180: PUSH
34181: LD_INT 10
34183: PUSH
34184: LD_INT 20
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: LIST
34191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34192: LD_VAR 0 6
34196: PPUSH
34197: CALL_OW 264
34201: PUSH
34202: LD_INT 9
34204: PUSH
34205: EMPTY
34206: LIST
34207: IN
34208: IFFALSE 34229
// points := [ 5 , 70 , 20 ] ;
34210: LD_ADDR_VAR 0 9
34214: PUSH
34215: LD_INT 5
34217: PUSH
34218: LD_INT 70
34220: PUSH
34221: LD_INT 20
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34229: LD_VAR 0 6
34233: PPUSH
34234: CALL_OW 264
34238: PUSH
34239: LD_INT 10
34241: PUSH
34242: EMPTY
34243: LIST
34244: IN
34245: IFFALSE 34266
// points := [ 35 , 110 , 70 ] ;
34247: LD_ADDR_VAR 0 9
34251: PUSH
34252: LD_INT 35
34254: PUSH
34255: LD_INT 110
34257: PUSH
34258: LD_INT 70
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: LIST
34265: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34266: LD_VAR 0 6
34270: PPUSH
34271: CALL_OW 265
34275: PUSH
34276: LD_INT 25
34278: EQUAL
34279: IFFALSE 34300
// points := [ 80 , 65 , 100 ] ;
34281: LD_ADDR_VAR 0 9
34285: PUSH
34286: LD_INT 80
34288: PUSH
34289: LD_INT 65
34291: PUSH
34292: LD_INT 100
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: LIST
34299: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34300: LD_VAR 0 6
34304: PPUSH
34305: CALL_OW 263
34309: PUSH
34310: LD_INT 1
34312: EQUAL
34313: IFFALSE 34348
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34315: LD_ADDR_VAR 0 10
34319: PUSH
34320: LD_VAR 0 10
34324: PUSH
34325: LD_VAR 0 6
34329: PPUSH
34330: CALL_OW 311
34334: PPUSH
34335: LD_INT 3
34337: PPUSH
34338: CALL_OW 259
34342: PUSH
34343: LD_INT 4
34345: MUL
34346: MUL
34347: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34348: LD_VAR 0 6
34352: PPUSH
34353: CALL_OW 263
34357: PUSH
34358: LD_INT 2
34360: EQUAL
34361: IFFALSE 34412
// begin j := IsControledBy ( i ) ;
34363: LD_ADDR_VAR 0 7
34367: PUSH
34368: LD_VAR 0 6
34372: PPUSH
34373: CALL_OW 312
34377: ST_TO_ADDR
// if j then
34378: LD_VAR 0 7
34382: IFFALSE 34412
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34384: LD_ADDR_VAR 0 10
34388: PUSH
34389: LD_VAR 0 10
34393: PUSH
34394: LD_VAR 0 7
34398: PPUSH
34399: LD_INT 3
34401: PPUSH
34402: CALL_OW 259
34406: PUSH
34407: LD_INT 3
34409: MUL
34410: MUL
34411: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34412: LD_VAR 0 6
34416: PPUSH
34417: CALL_OW 264
34421: PUSH
34422: LD_INT 5
34424: PUSH
34425: LD_INT 6
34427: PUSH
34428: LD_INT 46
34430: PUSH
34431: LD_INT 44
34433: PUSH
34434: LD_INT 47
34436: PUSH
34437: LD_INT 45
34439: PUSH
34440: LD_INT 28
34442: PUSH
34443: LD_INT 7
34445: PUSH
34446: LD_INT 27
34448: PUSH
34449: LD_INT 29
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: IN
34464: PUSH
34465: LD_VAR 0 1
34469: PPUSH
34470: LD_INT 52
34472: PPUSH
34473: CALL_OW 321
34477: PUSH
34478: LD_INT 2
34480: EQUAL
34481: AND
34482: IFFALSE 34499
// bpoints := bpoints * 1.2 ;
34484: LD_ADDR_VAR 0 10
34488: PUSH
34489: LD_VAR 0 10
34493: PUSH
34494: LD_REAL  1.20000000000000E+0000
34497: MUL
34498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34499: LD_VAR 0 6
34503: PPUSH
34504: CALL_OW 264
34508: PUSH
34509: LD_INT 6
34511: PUSH
34512: LD_INT 46
34514: PUSH
34515: LD_INT 47
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: LIST
34522: IN
34523: IFFALSE 34540
// bpoints := bpoints * 1.2 ;
34525: LD_ADDR_VAR 0 10
34529: PUSH
34530: LD_VAR 0 10
34534: PUSH
34535: LD_REAL  1.20000000000000E+0000
34538: MUL
34539: ST_TO_ADDR
// end ; unit_building :
34540: GO 34554
34542: LD_INT 3
34544: DOUBLE
34545: EQUAL
34546: IFTRUE 34550
34548: GO 34553
34550: POP
// ; end ;
34551: GO 34554
34553: POP
// for j = 1 to 3 do
34554: LD_ADDR_VAR 0 7
34558: PUSH
34559: DOUBLE
34560: LD_INT 1
34562: DEC
34563: ST_TO_ADDR
34564: LD_INT 3
34566: PUSH
34567: FOR_TO
34568: IFFALSE 34621
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34570: LD_ADDR_VAR 0 5
34574: PUSH
34575: LD_VAR 0 5
34579: PPUSH
34580: LD_VAR 0 7
34584: PPUSH
34585: LD_VAR 0 5
34589: PUSH
34590: LD_VAR 0 7
34594: ARRAY
34595: PUSH
34596: LD_VAR 0 9
34600: PUSH
34601: LD_VAR 0 7
34605: ARRAY
34606: PUSH
34607: LD_VAR 0 10
34611: MUL
34612: PLUS
34613: PPUSH
34614: CALL_OW 1
34618: ST_TO_ADDR
34619: GO 34567
34621: POP
34622: POP
// end ;
34623: GO 33100
34625: POP
34626: POP
// result := Replace ( result , 4 , tmp ) ;
34627: LD_ADDR_VAR 0 5
34631: PUSH
34632: LD_VAR 0 5
34636: PPUSH
34637: LD_INT 4
34639: PPUSH
34640: LD_VAR 0 8
34644: PPUSH
34645: CALL_OW 1
34649: ST_TO_ADDR
// end ;
34650: LD_VAR 0 5
34654: RET
// export function DangerAtRange ( unit , range ) ; begin
34655: LD_INT 0
34657: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34658: LD_ADDR_VAR 0 3
34662: PUSH
34663: LD_VAR 0 1
34667: PPUSH
34668: CALL_OW 255
34672: PPUSH
34673: LD_VAR 0 1
34677: PPUSH
34678: CALL_OW 250
34682: PPUSH
34683: LD_VAR 0 1
34687: PPUSH
34688: CALL_OW 251
34692: PPUSH
34693: LD_VAR 0 2
34697: PPUSH
34698: CALL 32952 0 4
34702: ST_TO_ADDR
// end ;
34703: LD_VAR 0 3
34707: RET
// export function DangerInArea ( side , area ) ; begin
34708: LD_INT 0
34710: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34711: LD_ADDR_VAR 0 3
34715: PUSH
34716: LD_VAR 0 2
34720: PPUSH
34721: LD_INT 81
34723: PUSH
34724: LD_VAR 0 1
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PPUSH
34733: CALL_OW 70
34737: ST_TO_ADDR
// end ;
34738: LD_VAR 0 3
34742: RET
// export function IsExtension ( b ) ; begin
34743: LD_INT 0
34745: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34746: LD_ADDR_VAR 0 2
34750: PUSH
34751: LD_VAR 0 1
34755: PUSH
34756: LD_INT 23
34758: PUSH
34759: LD_INT 20
34761: PUSH
34762: LD_INT 22
34764: PUSH
34765: LD_INT 17
34767: PUSH
34768: LD_INT 24
34770: PUSH
34771: LD_INT 21
34773: PUSH
34774: LD_INT 19
34776: PUSH
34777: LD_INT 16
34779: PUSH
34780: LD_INT 25
34782: PUSH
34783: LD_INT 18
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: IN
34798: ST_TO_ADDR
// end ;
34799: LD_VAR 0 2
34803: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34804: LD_INT 0
34806: PPUSH
34807: PPUSH
34808: PPUSH
// result := [ ] ;
34809: LD_ADDR_VAR 0 4
34813: PUSH
34814: EMPTY
34815: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34816: LD_ADDR_VAR 0 5
34820: PUSH
34821: LD_VAR 0 2
34825: PPUSH
34826: LD_INT 21
34828: PUSH
34829: LD_INT 3
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PPUSH
34836: CALL_OW 70
34840: ST_TO_ADDR
// if not tmp then
34841: LD_VAR 0 5
34845: NOT
34846: IFFALSE 34850
// exit ;
34848: GO 34914
// if checkLink then
34850: LD_VAR 0 3
34854: IFFALSE 34904
// begin for i in tmp do
34856: LD_ADDR_VAR 0 6
34860: PUSH
34861: LD_VAR 0 5
34865: PUSH
34866: FOR_IN
34867: IFFALSE 34902
// if GetBase ( i ) <> base then
34869: LD_VAR 0 6
34873: PPUSH
34874: CALL_OW 274
34878: PUSH
34879: LD_VAR 0 1
34883: NONEQUAL
34884: IFFALSE 34900
// ComLinkToBase ( base , i ) ;
34886: LD_VAR 0 1
34890: PPUSH
34891: LD_VAR 0 6
34895: PPUSH
34896: CALL_OW 169
34900: GO 34866
34902: POP
34903: POP
// end ; result := tmp ;
34904: LD_ADDR_VAR 0 4
34908: PUSH
34909: LD_VAR 0 5
34913: ST_TO_ADDR
// end ;
34914: LD_VAR 0 4
34918: RET
// export function ComComplete ( units , b ) ; var i ; begin
34919: LD_INT 0
34921: PPUSH
34922: PPUSH
// if not units then
34923: LD_VAR 0 1
34927: NOT
34928: IFFALSE 34932
// exit ;
34930: GO 35022
// for i in units do
34932: LD_ADDR_VAR 0 4
34936: PUSH
34937: LD_VAR 0 1
34941: PUSH
34942: FOR_IN
34943: IFFALSE 35020
// if BuildingStatus ( b ) = bs_build then
34945: LD_VAR 0 2
34949: PPUSH
34950: CALL_OW 461
34954: PUSH
34955: LD_INT 1
34957: EQUAL
34958: IFFALSE 35018
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34960: LD_VAR 0 4
34964: PPUSH
34965: LD_STRING h
34967: PUSH
34968: LD_VAR 0 2
34972: PPUSH
34973: CALL_OW 250
34977: PUSH
34978: LD_VAR 0 2
34982: PPUSH
34983: CALL_OW 251
34987: PUSH
34988: LD_VAR 0 2
34992: PUSH
34993: LD_INT 0
34995: PUSH
34996: LD_INT 0
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: PUSH
35011: EMPTY
35012: LIST
35013: PPUSH
35014: CALL_OW 446
35018: GO 34942
35020: POP
35021: POP
// end ;
35022: LD_VAR 0 3
35026: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35027: LD_INT 0
35029: PPUSH
35030: PPUSH
35031: PPUSH
35032: PPUSH
35033: PPUSH
35034: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
35035: LD_VAR 0 1
35039: NOT
35040: PUSH
35041: LD_VAR 0 1
35045: PPUSH
35046: CALL_OW 263
35050: PUSH
35051: LD_INT 2
35053: EQUAL
35054: NOT
35055: OR
35056: IFFALSE 35060
// exit ;
35058: GO 35376
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35060: LD_ADDR_VAR 0 6
35064: PUSH
35065: LD_INT 22
35067: PUSH
35068: LD_VAR 0 1
35072: PPUSH
35073: CALL_OW 255
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: LD_INT 30
35087: PUSH
35088: LD_INT 36
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 34
35097: PUSH
35098: LD_INT 31
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PPUSH
35114: CALL_OW 69
35118: ST_TO_ADDR
// if not tmp then
35119: LD_VAR 0 6
35123: NOT
35124: IFFALSE 35128
// exit ;
35126: GO 35376
// result := [ ] ;
35128: LD_ADDR_VAR 0 2
35132: PUSH
35133: EMPTY
35134: ST_TO_ADDR
// for i in tmp do
35135: LD_ADDR_VAR 0 3
35139: PUSH
35140: LD_VAR 0 6
35144: PUSH
35145: FOR_IN
35146: IFFALSE 35217
// begin t := UnitsInside ( i ) ;
35148: LD_ADDR_VAR 0 4
35152: PUSH
35153: LD_VAR 0 3
35157: PPUSH
35158: CALL_OW 313
35162: ST_TO_ADDR
// if t then
35163: LD_VAR 0 4
35167: IFFALSE 35215
// for j in t do
35169: LD_ADDR_VAR 0 7
35173: PUSH
35174: LD_VAR 0 4
35178: PUSH
35179: FOR_IN
35180: IFFALSE 35213
// result := Insert ( result , result + 1 , j ) ;
35182: LD_ADDR_VAR 0 2
35186: PUSH
35187: LD_VAR 0 2
35191: PPUSH
35192: LD_VAR 0 2
35196: PUSH
35197: LD_INT 1
35199: PLUS
35200: PPUSH
35201: LD_VAR 0 7
35205: PPUSH
35206: CALL_OW 2
35210: ST_TO_ADDR
35211: GO 35179
35213: POP
35214: POP
// end ;
35215: GO 35145
35217: POP
35218: POP
// if not result then
35219: LD_VAR 0 2
35223: NOT
35224: IFFALSE 35228
// exit ;
35226: GO 35376
// mech := result [ 1 ] ;
35228: LD_ADDR_VAR 0 5
35232: PUSH
35233: LD_VAR 0 2
35237: PUSH
35238: LD_INT 1
35240: ARRAY
35241: ST_TO_ADDR
// if result > 1 then
35242: LD_VAR 0 2
35246: PUSH
35247: LD_INT 1
35249: GREATER
35250: IFFALSE 35362
// for i = 2 to result do
35252: LD_ADDR_VAR 0 3
35256: PUSH
35257: DOUBLE
35258: LD_INT 2
35260: DEC
35261: ST_TO_ADDR
35262: LD_VAR 0 2
35266: PUSH
35267: FOR_TO
35268: IFFALSE 35360
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35270: LD_ADDR_VAR 0 4
35274: PUSH
35275: LD_VAR 0 2
35279: PUSH
35280: LD_VAR 0 3
35284: ARRAY
35285: PPUSH
35286: LD_INT 3
35288: PPUSH
35289: CALL_OW 259
35293: PUSH
35294: LD_VAR 0 2
35298: PUSH
35299: LD_VAR 0 3
35303: ARRAY
35304: PPUSH
35305: CALL_OW 432
35309: MINUS
35310: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35311: LD_VAR 0 4
35315: PUSH
35316: LD_VAR 0 5
35320: PPUSH
35321: LD_INT 3
35323: PPUSH
35324: CALL_OW 259
35328: PUSH
35329: LD_VAR 0 5
35333: PPUSH
35334: CALL_OW 432
35338: MINUS
35339: GREATEREQUAL
35340: IFFALSE 35358
// mech := result [ i ] ;
35342: LD_ADDR_VAR 0 5
35346: PUSH
35347: LD_VAR 0 2
35351: PUSH
35352: LD_VAR 0 3
35356: ARRAY
35357: ST_TO_ADDR
// end ;
35358: GO 35267
35360: POP
35361: POP
// ComLinkTo ( vehicle , mech ) ;
35362: LD_VAR 0 1
35366: PPUSH
35367: LD_VAR 0 5
35371: PPUSH
35372: CALL_OW 135
// end ;
35376: LD_VAR 0 2
35380: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35381: LD_INT 0
35383: PPUSH
35384: PPUSH
35385: PPUSH
35386: PPUSH
35387: PPUSH
35388: PPUSH
35389: PPUSH
35390: PPUSH
35391: PPUSH
35392: PPUSH
35393: PPUSH
35394: PPUSH
35395: PPUSH
// result := [ ] ;
35396: LD_ADDR_VAR 0 7
35400: PUSH
35401: EMPTY
35402: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35403: LD_VAR 0 1
35407: PPUSH
35408: CALL_OW 266
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: IN
35423: NOT
35424: IFFALSE 35428
// exit ;
35426: GO 37062
// if name then
35428: LD_VAR 0 3
35432: IFFALSE 35448
// SetBName ( base_dep , name ) ;
35434: LD_VAR 0 1
35438: PPUSH
35439: LD_VAR 0 3
35443: PPUSH
35444: CALL_OW 500
// base := GetBase ( base_dep ) ;
35448: LD_ADDR_VAR 0 15
35452: PUSH
35453: LD_VAR 0 1
35457: PPUSH
35458: CALL_OW 274
35462: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35463: LD_ADDR_VAR 0 16
35467: PUSH
35468: LD_VAR 0 1
35472: PPUSH
35473: CALL_OW 255
35477: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35478: LD_ADDR_VAR 0 17
35482: PUSH
35483: LD_VAR 0 1
35487: PPUSH
35488: CALL_OW 248
35492: ST_TO_ADDR
// if sources then
35493: LD_VAR 0 5
35497: IFFALSE 35544
// for i = 1 to 3 do
35499: LD_ADDR_VAR 0 8
35503: PUSH
35504: DOUBLE
35505: LD_INT 1
35507: DEC
35508: ST_TO_ADDR
35509: LD_INT 3
35511: PUSH
35512: FOR_TO
35513: IFFALSE 35542
// AddResourceType ( base , i , sources [ i ] ) ;
35515: LD_VAR 0 15
35519: PPUSH
35520: LD_VAR 0 8
35524: PPUSH
35525: LD_VAR 0 5
35529: PUSH
35530: LD_VAR 0 8
35534: ARRAY
35535: PPUSH
35536: CALL_OW 276
35540: GO 35512
35542: POP
35543: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35544: LD_ADDR_VAR 0 18
35548: PUSH
35549: LD_VAR 0 15
35553: PPUSH
35554: LD_VAR 0 2
35558: PPUSH
35559: LD_INT 1
35561: PPUSH
35562: CALL 34804 0 3
35566: ST_TO_ADDR
// InitHc ;
35567: CALL_OW 19
// InitUc ;
35571: CALL_OW 18
// uc_side := side ;
35575: LD_ADDR_OWVAR 20
35579: PUSH
35580: LD_VAR 0 16
35584: ST_TO_ADDR
// uc_nation := nation ;
35585: LD_ADDR_OWVAR 21
35589: PUSH
35590: LD_VAR 0 17
35594: ST_TO_ADDR
// if buildings then
35595: LD_VAR 0 18
35599: IFFALSE 36921
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35601: LD_ADDR_VAR 0 19
35605: PUSH
35606: LD_VAR 0 18
35610: PPUSH
35611: LD_INT 2
35613: PUSH
35614: LD_INT 30
35616: PUSH
35617: LD_INT 29
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 30
35626: PUSH
35627: LD_INT 30
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: LIST
35638: PPUSH
35639: CALL_OW 72
35643: ST_TO_ADDR
// if tmp then
35644: LD_VAR 0 19
35648: IFFALSE 35696
// for i in tmp do
35650: LD_ADDR_VAR 0 8
35654: PUSH
35655: LD_VAR 0 19
35659: PUSH
35660: FOR_IN
35661: IFFALSE 35694
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35663: LD_VAR 0 8
35667: PPUSH
35668: CALL_OW 250
35672: PPUSH
35673: LD_VAR 0 8
35677: PPUSH
35678: CALL_OW 251
35682: PPUSH
35683: LD_VAR 0 16
35687: PPUSH
35688: CALL_OW 441
35692: GO 35660
35694: POP
35695: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35696: LD_VAR 0 18
35700: PPUSH
35701: LD_INT 2
35703: PUSH
35704: LD_INT 30
35706: PUSH
35707: LD_INT 32
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 30
35716: PUSH
35717: LD_INT 33
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: LIST
35728: PPUSH
35729: CALL_OW 72
35733: IFFALSE 35821
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35735: LD_ADDR_VAR 0 8
35739: PUSH
35740: LD_VAR 0 18
35744: PPUSH
35745: LD_INT 2
35747: PUSH
35748: LD_INT 30
35750: PUSH
35751: LD_INT 32
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 30
35760: PUSH
35761: LD_INT 33
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: LIST
35772: PPUSH
35773: CALL_OW 72
35777: PUSH
35778: FOR_IN
35779: IFFALSE 35819
// begin if not GetBWeapon ( i ) then
35781: LD_VAR 0 8
35785: PPUSH
35786: CALL_OW 269
35790: NOT
35791: IFFALSE 35817
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35793: LD_VAR 0 8
35797: PPUSH
35798: LD_VAR 0 8
35802: PPUSH
35803: LD_VAR 0 2
35807: PPUSH
35808: CALL 37067 0 2
35812: PPUSH
35813: CALL_OW 431
// end ;
35817: GO 35778
35819: POP
35820: POP
// end ; for i = 1 to personel do
35821: LD_ADDR_VAR 0 8
35825: PUSH
35826: DOUBLE
35827: LD_INT 1
35829: DEC
35830: ST_TO_ADDR
35831: LD_VAR 0 6
35835: PUSH
35836: FOR_TO
35837: IFFALSE 36901
// begin if i > 4 then
35839: LD_VAR 0 8
35843: PUSH
35844: LD_INT 4
35846: GREATER
35847: IFFALSE 35851
// break ;
35849: GO 36901
// case i of 1 :
35851: LD_VAR 0 8
35855: PUSH
35856: LD_INT 1
35858: DOUBLE
35859: EQUAL
35860: IFTRUE 35864
35862: GO 35944
35864: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35865: LD_ADDR_VAR 0 12
35869: PUSH
35870: LD_VAR 0 18
35874: PPUSH
35875: LD_INT 22
35877: PUSH
35878: LD_VAR 0 16
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 58
35889: PUSH
35890: EMPTY
35891: LIST
35892: PUSH
35893: LD_INT 2
35895: PUSH
35896: LD_INT 30
35898: PUSH
35899: LD_INT 32
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 30
35908: PUSH
35909: LD_INT 4
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 30
35918: PUSH
35919: LD_INT 5
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: LIST
35936: PPUSH
35937: CALL_OW 72
35941: ST_TO_ADDR
35942: GO 36166
35944: LD_INT 2
35946: DOUBLE
35947: EQUAL
35948: IFTRUE 35952
35950: GO 36014
35952: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35953: LD_ADDR_VAR 0 12
35957: PUSH
35958: LD_VAR 0 18
35962: PPUSH
35963: LD_INT 22
35965: PUSH
35966: LD_VAR 0 16
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 2
35977: PUSH
35978: LD_INT 30
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 30
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: LIST
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PPUSH
36007: CALL_OW 72
36011: ST_TO_ADDR
36012: GO 36166
36014: LD_INT 3
36016: DOUBLE
36017: EQUAL
36018: IFTRUE 36022
36020: GO 36084
36022: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36023: LD_ADDR_VAR 0 12
36027: PUSH
36028: LD_VAR 0 18
36032: PPUSH
36033: LD_INT 22
36035: PUSH
36036: LD_VAR 0 16
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 2
36047: PUSH
36048: LD_INT 30
36050: PUSH
36051: LD_INT 2
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 30
36060: PUSH
36061: LD_INT 3
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: LIST
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PPUSH
36077: CALL_OW 72
36081: ST_TO_ADDR
36082: GO 36166
36084: LD_INT 4
36086: DOUBLE
36087: EQUAL
36088: IFTRUE 36092
36090: GO 36165
36092: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36093: LD_ADDR_VAR 0 12
36097: PUSH
36098: LD_VAR 0 18
36102: PPUSH
36103: LD_INT 22
36105: PUSH
36106: LD_VAR 0 16
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 2
36117: PUSH
36118: LD_INT 30
36120: PUSH
36121: LD_INT 6
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 30
36130: PUSH
36131: LD_INT 7
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 30
36140: PUSH
36141: LD_INT 8
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PPUSH
36158: CALL_OW 72
36162: ST_TO_ADDR
36163: GO 36166
36165: POP
// if i = 1 then
36166: LD_VAR 0 8
36170: PUSH
36171: LD_INT 1
36173: EQUAL
36174: IFFALSE 36285
// begin tmp := [ ] ;
36176: LD_ADDR_VAR 0 19
36180: PUSH
36181: EMPTY
36182: ST_TO_ADDR
// for j in f do
36183: LD_ADDR_VAR 0 9
36187: PUSH
36188: LD_VAR 0 12
36192: PUSH
36193: FOR_IN
36194: IFFALSE 36267
// if GetBType ( j ) = b_bunker then
36196: LD_VAR 0 9
36200: PPUSH
36201: CALL_OW 266
36205: PUSH
36206: LD_INT 32
36208: EQUAL
36209: IFFALSE 36236
// tmp := Insert ( tmp , 1 , j ) else
36211: LD_ADDR_VAR 0 19
36215: PUSH
36216: LD_VAR 0 19
36220: PPUSH
36221: LD_INT 1
36223: PPUSH
36224: LD_VAR 0 9
36228: PPUSH
36229: CALL_OW 2
36233: ST_TO_ADDR
36234: GO 36265
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36236: LD_ADDR_VAR 0 19
36240: PUSH
36241: LD_VAR 0 19
36245: PPUSH
36246: LD_VAR 0 19
36250: PUSH
36251: LD_INT 1
36253: PLUS
36254: PPUSH
36255: LD_VAR 0 9
36259: PPUSH
36260: CALL_OW 2
36264: ST_TO_ADDR
36265: GO 36193
36267: POP
36268: POP
// if tmp then
36269: LD_VAR 0 19
36273: IFFALSE 36285
// f := tmp ;
36275: LD_ADDR_VAR 0 12
36279: PUSH
36280: LD_VAR 0 19
36284: ST_TO_ADDR
// end ; x := personel [ i ] ;
36285: LD_ADDR_VAR 0 13
36289: PUSH
36290: LD_VAR 0 6
36294: PUSH
36295: LD_VAR 0 8
36299: ARRAY
36300: ST_TO_ADDR
// if x = - 1 then
36301: LD_VAR 0 13
36305: PUSH
36306: LD_INT 1
36308: NEG
36309: EQUAL
36310: IFFALSE 36519
// begin for j in f do
36312: LD_ADDR_VAR 0 9
36316: PUSH
36317: LD_VAR 0 12
36321: PUSH
36322: FOR_IN
36323: IFFALSE 36515
// repeat InitHc ;
36325: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36329: LD_VAR 0 9
36333: PPUSH
36334: CALL_OW 266
36338: PUSH
36339: LD_INT 5
36341: EQUAL
36342: IFFALSE 36412
// begin if UnitsInside ( j ) < 3 then
36344: LD_VAR 0 9
36348: PPUSH
36349: CALL_OW 313
36353: PUSH
36354: LD_INT 3
36356: LESS
36357: IFFALSE 36393
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36359: LD_INT 0
36361: PPUSH
36362: LD_INT 5
36364: PUSH
36365: LD_INT 8
36367: PUSH
36368: LD_INT 9
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: PUSH
36376: LD_VAR 0 17
36380: ARRAY
36381: PPUSH
36382: LD_VAR 0 4
36386: PPUSH
36387: CALL_OW 380
36391: GO 36410
// PrepareHuman ( false , i , skill ) ;
36393: LD_INT 0
36395: PPUSH
36396: LD_VAR 0 8
36400: PPUSH
36401: LD_VAR 0 4
36405: PPUSH
36406: CALL_OW 380
// end else
36410: GO 36429
// PrepareHuman ( false , i , skill ) ;
36412: LD_INT 0
36414: PPUSH
36415: LD_VAR 0 8
36419: PPUSH
36420: LD_VAR 0 4
36424: PPUSH
36425: CALL_OW 380
// un := CreateHuman ;
36429: LD_ADDR_VAR 0 14
36433: PUSH
36434: CALL_OW 44
36438: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36439: LD_ADDR_VAR 0 7
36443: PUSH
36444: LD_VAR 0 7
36448: PPUSH
36449: LD_INT 1
36451: PPUSH
36452: LD_VAR 0 14
36456: PPUSH
36457: CALL_OW 2
36461: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36462: LD_VAR 0 14
36466: PPUSH
36467: LD_VAR 0 9
36471: PPUSH
36472: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36476: LD_VAR 0 9
36480: PPUSH
36481: CALL_OW 313
36485: PUSH
36486: LD_INT 6
36488: EQUAL
36489: PUSH
36490: LD_VAR 0 9
36494: PPUSH
36495: CALL_OW 266
36499: PUSH
36500: LD_INT 32
36502: PUSH
36503: LD_INT 31
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: IN
36510: OR
36511: IFFALSE 36325
36513: GO 36322
36515: POP
36516: POP
// end else
36517: GO 36899
// for j = 1 to x do
36519: LD_ADDR_VAR 0 9
36523: PUSH
36524: DOUBLE
36525: LD_INT 1
36527: DEC
36528: ST_TO_ADDR
36529: LD_VAR 0 13
36533: PUSH
36534: FOR_TO
36535: IFFALSE 36897
// begin InitHc ;
36537: CALL_OW 19
// if not f then
36541: LD_VAR 0 12
36545: NOT
36546: IFFALSE 36635
// begin PrepareHuman ( false , i , skill ) ;
36548: LD_INT 0
36550: PPUSH
36551: LD_VAR 0 8
36555: PPUSH
36556: LD_VAR 0 4
36560: PPUSH
36561: CALL_OW 380
// un := CreateHuman ;
36565: LD_ADDR_VAR 0 14
36569: PUSH
36570: CALL_OW 44
36574: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36575: LD_ADDR_VAR 0 7
36579: PUSH
36580: LD_VAR 0 7
36584: PPUSH
36585: LD_INT 1
36587: PPUSH
36588: LD_VAR 0 14
36592: PPUSH
36593: CALL_OW 2
36597: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36598: LD_VAR 0 14
36602: PPUSH
36603: LD_VAR 0 1
36607: PPUSH
36608: CALL_OW 250
36612: PPUSH
36613: LD_VAR 0 1
36617: PPUSH
36618: CALL_OW 251
36622: PPUSH
36623: LD_INT 10
36625: PPUSH
36626: LD_INT 0
36628: PPUSH
36629: CALL_OW 50
// continue ;
36633: GO 36534
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36635: LD_VAR 0 12
36639: PUSH
36640: LD_INT 1
36642: ARRAY
36643: PPUSH
36644: CALL_OW 313
36648: PUSH
36649: LD_VAR 0 12
36653: PUSH
36654: LD_INT 1
36656: ARRAY
36657: PPUSH
36658: CALL_OW 266
36662: PUSH
36663: LD_INT 32
36665: PUSH
36666: LD_INT 31
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: IN
36673: AND
36674: PUSH
36675: LD_VAR 0 12
36679: PUSH
36680: LD_INT 1
36682: ARRAY
36683: PPUSH
36684: CALL_OW 313
36688: PUSH
36689: LD_INT 6
36691: EQUAL
36692: OR
36693: IFFALSE 36713
// f := Delete ( f , 1 ) ;
36695: LD_ADDR_VAR 0 12
36699: PUSH
36700: LD_VAR 0 12
36704: PPUSH
36705: LD_INT 1
36707: PPUSH
36708: CALL_OW 3
36712: ST_TO_ADDR
// if not f then
36713: LD_VAR 0 12
36717: NOT
36718: IFFALSE 36736
// begin x := x + 2 ;
36720: LD_ADDR_VAR 0 13
36724: PUSH
36725: LD_VAR 0 13
36729: PUSH
36730: LD_INT 2
36732: PLUS
36733: ST_TO_ADDR
// continue ;
36734: GO 36534
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36736: LD_VAR 0 12
36740: PUSH
36741: LD_INT 1
36743: ARRAY
36744: PPUSH
36745: CALL_OW 266
36749: PUSH
36750: LD_INT 5
36752: EQUAL
36753: IFFALSE 36827
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36755: LD_VAR 0 12
36759: PUSH
36760: LD_INT 1
36762: ARRAY
36763: PPUSH
36764: CALL_OW 313
36768: PUSH
36769: LD_INT 3
36771: LESS
36772: IFFALSE 36808
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36774: LD_INT 0
36776: PPUSH
36777: LD_INT 5
36779: PUSH
36780: LD_INT 8
36782: PUSH
36783: LD_INT 9
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: LIST
36790: PUSH
36791: LD_VAR 0 17
36795: ARRAY
36796: PPUSH
36797: LD_VAR 0 4
36801: PPUSH
36802: CALL_OW 380
36806: GO 36825
// PrepareHuman ( false , i , skill ) ;
36808: LD_INT 0
36810: PPUSH
36811: LD_VAR 0 8
36815: PPUSH
36816: LD_VAR 0 4
36820: PPUSH
36821: CALL_OW 380
// end else
36825: GO 36844
// PrepareHuman ( false , i , skill ) ;
36827: LD_INT 0
36829: PPUSH
36830: LD_VAR 0 8
36834: PPUSH
36835: LD_VAR 0 4
36839: PPUSH
36840: CALL_OW 380
// un := CreateHuman ;
36844: LD_ADDR_VAR 0 14
36848: PUSH
36849: CALL_OW 44
36853: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36854: LD_ADDR_VAR 0 7
36858: PUSH
36859: LD_VAR 0 7
36863: PPUSH
36864: LD_INT 1
36866: PPUSH
36867: LD_VAR 0 14
36871: PPUSH
36872: CALL_OW 2
36876: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36877: LD_VAR 0 14
36881: PPUSH
36882: LD_VAR 0 12
36886: PUSH
36887: LD_INT 1
36889: ARRAY
36890: PPUSH
36891: CALL_OW 52
// end ;
36895: GO 36534
36897: POP
36898: POP
// end ;
36899: GO 35836
36901: POP
36902: POP
// result := result ^ buildings ;
36903: LD_ADDR_VAR 0 7
36907: PUSH
36908: LD_VAR 0 7
36912: PUSH
36913: LD_VAR 0 18
36917: ADD
36918: ST_TO_ADDR
// end else
36919: GO 37062
// begin for i = 1 to personel do
36921: LD_ADDR_VAR 0 8
36925: PUSH
36926: DOUBLE
36927: LD_INT 1
36929: DEC
36930: ST_TO_ADDR
36931: LD_VAR 0 6
36935: PUSH
36936: FOR_TO
36937: IFFALSE 37060
// begin if i > 4 then
36939: LD_VAR 0 8
36943: PUSH
36944: LD_INT 4
36946: GREATER
36947: IFFALSE 36951
// break ;
36949: GO 37060
// x := personel [ i ] ;
36951: LD_ADDR_VAR 0 13
36955: PUSH
36956: LD_VAR 0 6
36960: PUSH
36961: LD_VAR 0 8
36965: ARRAY
36966: ST_TO_ADDR
// if x = - 1 then
36967: LD_VAR 0 13
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: EQUAL
36976: IFFALSE 36980
// continue ;
36978: GO 36936
// PrepareHuman ( false , i , skill ) ;
36980: LD_INT 0
36982: PPUSH
36983: LD_VAR 0 8
36987: PPUSH
36988: LD_VAR 0 4
36992: PPUSH
36993: CALL_OW 380
// un := CreateHuman ;
36997: LD_ADDR_VAR 0 14
37001: PUSH
37002: CALL_OW 44
37006: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37007: LD_VAR 0 14
37011: PPUSH
37012: LD_VAR 0 1
37016: PPUSH
37017: CALL_OW 250
37021: PPUSH
37022: LD_VAR 0 1
37026: PPUSH
37027: CALL_OW 251
37031: PPUSH
37032: LD_INT 10
37034: PPUSH
37035: LD_INT 0
37037: PPUSH
37038: CALL_OW 50
// result := result ^ un ;
37042: LD_ADDR_VAR 0 7
37046: PUSH
37047: LD_VAR 0 7
37051: PUSH
37052: LD_VAR 0 14
37056: ADD
37057: ST_TO_ADDR
// end ;
37058: GO 36936
37060: POP
37061: POP
// end ; end ;
37062: LD_VAR 0 7
37066: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37067: LD_INT 0
37069: PPUSH
37070: PPUSH
37071: PPUSH
37072: PPUSH
37073: PPUSH
37074: PPUSH
37075: PPUSH
37076: PPUSH
37077: PPUSH
37078: PPUSH
37079: PPUSH
37080: PPUSH
37081: PPUSH
37082: PPUSH
37083: PPUSH
37084: PPUSH
// result := false ;
37085: LD_ADDR_VAR 0 3
37089: PUSH
37090: LD_INT 0
37092: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37093: LD_VAR 0 1
37097: NOT
37098: PUSH
37099: LD_VAR 0 1
37103: PPUSH
37104: CALL_OW 266
37108: PUSH
37109: LD_INT 32
37111: PUSH
37112: LD_INT 33
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: IN
37119: NOT
37120: OR
37121: IFFALSE 37125
// exit ;
37123: GO 38234
// nat := GetNation ( tower ) ;
37125: LD_ADDR_VAR 0 12
37129: PUSH
37130: LD_VAR 0 1
37134: PPUSH
37135: CALL_OW 248
37139: ST_TO_ADDR
// side := GetSide ( tower ) ;
37140: LD_ADDR_VAR 0 16
37144: PUSH
37145: LD_VAR 0 1
37149: PPUSH
37150: CALL_OW 255
37154: ST_TO_ADDR
// x := GetX ( tower ) ;
37155: LD_ADDR_VAR 0 10
37159: PUSH
37160: LD_VAR 0 1
37164: PPUSH
37165: CALL_OW 250
37169: ST_TO_ADDR
// y := GetY ( tower ) ;
37170: LD_ADDR_VAR 0 11
37174: PUSH
37175: LD_VAR 0 1
37179: PPUSH
37180: CALL_OW 251
37184: ST_TO_ADDR
// if not x or not y then
37185: LD_VAR 0 10
37189: NOT
37190: PUSH
37191: LD_VAR 0 11
37195: NOT
37196: OR
37197: IFFALSE 37201
// exit ;
37199: GO 38234
// weapon := 0 ;
37201: LD_ADDR_VAR 0 18
37205: PUSH
37206: LD_INT 0
37208: ST_TO_ADDR
// fac_list := [ ] ;
37209: LD_ADDR_VAR 0 17
37213: PUSH
37214: EMPTY
37215: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37216: LD_ADDR_VAR 0 6
37220: PUSH
37221: LD_VAR 0 1
37225: PPUSH
37226: CALL_OW 274
37230: PPUSH
37231: LD_VAR 0 2
37235: PPUSH
37236: LD_INT 0
37238: PPUSH
37239: CALL 34804 0 3
37243: PPUSH
37244: LD_INT 30
37246: PUSH
37247: LD_INT 3
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PPUSH
37254: CALL_OW 72
37258: ST_TO_ADDR
// if not factories then
37259: LD_VAR 0 6
37263: NOT
37264: IFFALSE 37268
// exit ;
37266: GO 38234
// for i in factories do
37268: LD_ADDR_VAR 0 8
37272: PUSH
37273: LD_VAR 0 6
37277: PUSH
37278: FOR_IN
37279: IFFALSE 37304
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37281: LD_ADDR_VAR 0 17
37285: PUSH
37286: LD_VAR 0 17
37290: PUSH
37291: LD_VAR 0 8
37295: PPUSH
37296: CALL_OW 478
37300: UNION
37301: ST_TO_ADDR
37302: GO 37278
37304: POP
37305: POP
// if not fac_list then
37306: LD_VAR 0 17
37310: NOT
37311: IFFALSE 37315
// exit ;
37313: GO 38234
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37315: LD_ADDR_VAR 0 5
37319: PUSH
37320: LD_INT 4
37322: PUSH
37323: LD_INT 5
37325: PUSH
37326: LD_INT 9
37328: PUSH
37329: LD_INT 10
37331: PUSH
37332: LD_INT 6
37334: PUSH
37335: LD_INT 7
37337: PUSH
37338: LD_INT 11
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 27
37352: PUSH
37353: LD_INT 28
37355: PUSH
37356: LD_INT 26
37358: PUSH
37359: LD_INT 30
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 43
37370: PUSH
37371: LD_INT 44
37373: PUSH
37374: LD_INT 46
37376: PUSH
37377: LD_INT 45
37379: PUSH
37380: LD_INT 47
37382: PUSH
37383: LD_INT 49
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: LIST
37398: PUSH
37399: LD_VAR 0 12
37403: ARRAY
37404: ST_TO_ADDR
// list := list isect fac_list ;
37405: LD_ADDR_VAR 0 5
37409: PUSH
37410: LD_VAR 0 5
37414: PUSH
37415: LD_VAR 0 17
37419: ISECT
37420: ST_TO_ADDR
// if not list then
37421: LD_VAR 0 5
37425: NOT
37426: IFFALSE 37430
// exit ;
37428: GO 38234
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37430: LD_VAR 0 12
37434: PUSH
37435: LD_INT 3
37437: EQUAL
37438: PUSH
37439: LD_INT 49
37441: PUSH
37442: LD_VAR 0 5
37446: IN
37447: AND
37448: PUSH
37449: LD_INT 31
37451: PPUSH
37452: LD_VAR 0 16
37456: PPUSH
37457: CALL_OW 321
37461: PUSH
37462: LD_INT 2
37464: EQUAL
37465: AND
37466: IFFALSE 37526
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37468: LD_INT 22
37470: PUSH
37471: LD_VAR 0 16
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 35
37482: PUSH
37483: LD_INT 49
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 91
37492: PUSH
37493: LD_VAR 0 1
37497: PUSH
37498: LD_INT 10
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: LIST
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: LIST
37510: PPUSH
37511: CALL_OW 69
37515: NOT
37516: IFFALSE 37526
// weapon := ru_time_lapser ;
37518: LD_ADDR_VAR 0 18
37522: PUSH
37523: LD_INT 49
37525: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37526: LD_VAR 0 12
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: LD_INT 2
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: IN
37541: PUSH
37542: LD_INT 11
37544: PUSH
37545: LD_VAR 0 5
37549: IN
37550: PUSH
37551: LD_INT 30
37553: PUSH
37554: LD_VAR 0 5
37558: IN
37559: OR
37560: AND
37561: PUSH
37562: LD_INT 6
37564: PPUSH
37565: LD_VAR 0 16
37569: PPUSH
37570: CALL_OW 321
37574: PUSH
37575: LD_INT 2
37577: EQUAL
37578: AND
37579: IFFALSE 37744
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37581: LD_INT 22
37583: PUSH
37584: LD_VAR 0 16
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 2
37595: PUSH
37596: LD_INT 35
37598: PUSH
37599: LD_INT 11
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 35
37608: PUSH
37609: LD_INT 30
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 91
37623: PUSH
37624: LD_VAR 0 1
37628: PUSH
37629: LD_INT 18
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: LIST
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: LIST
37641: PPUSH
37642: CALL_OW 69
37646: NOT
37647: PUSH
37648: LD_INT 22
37650: PUSH
37651: LD_VAR 0 16
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 2
37662: PUSH
37663: LD_INT 30
37665: PUSH
37666: LD_INT 32
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 30
37675: PUSH
37676: LD_INT 33
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 91
37690: PUSH
37691: LD_VAR 0 1
37695: PUSH
37696: LD_INT 12
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: LIST
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: LIST
37708: PUSH
37709: EMPTY
37710: LIST
37711: PPUSH
37712: CALL_OW 69
37716: PUSH
37717: LD_INT 2
37719: GREATER
37720: AND
37721: IFFALSE 37744
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37723: LD_ADDR_VAR 0 18
37727: PUSH
37728: LD_INT 11
37730: PUSH
37731: LD_INT 30
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_VAR 0 12
37742: ARRAY
37743: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37744: LD_VAR 0 18
37748: NOT
37749: PUSH
37750: LD_INT 40
37752: PPUSH
37753: LD_VAR 0 16
37757: PPUSH
37758: CALL_OW 321
37762: PUSH
37763: LD_INT 2
37765: EQUAL
37766: AND
37767: PUSH
37768: LD_INT 7
37770: PUSH
37771: LD_VAR 0 5
37775: IN
37776: PUSH
37777: LD_INT 28
37779: PUSH
37780: LD_VAR 0 5
37784: IN
37785: OR
37786: PUSH
37787: LD_INT 45
37789: PUSH
37790: LD_VAR 0 5
37794: IN
37795: OR
37796: AND
37797: IFFALSE 38051
// begin hex := GetHexInfo ( x , y ) ;
37799: LD_ADDR_VAR 0 4
37803: PUSH
37804: LD_VAR 0 10
37808: PPUSH
37809: LD_VAR 0 11
37813: PPUSH
37814: CALL_OW 546
37818: ST_TO_ADDR
// if hex [ 1 ] then
37819: LD_VAR 0 4
37823: PUSH
37824: LD_INT 1
37826: ARRAY
37827: IFFALSE 37831
// exit ;
37829: GO 38234
// height := hex [ 2 ] ;
37831: LD_ADDR_VAR 0 15
37835: PUSH
37836: LD_VAR 0 4
37840: PUSH
37841: LD_INT 2
37843: ARRAY
37844: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37845: LD_ADDR_VAR 0 14
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: LD_INT 3
37858: PUSH
37859: LD_INT 5
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: ST_TO_ADDR
// for i in tmp do
37868: LD_ADDR_VAR 0 8
37872: PUSH
37873: LD_VAR 0 14
37877: PUSH
37878: FOR_IN
37879: IFFALSE 38049
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37881: LD_ADDR_VAR 0 9
37885: PUSH
37886: LD_VAR 0 10
37890: PPUSH
37891: LD_VAR 0 8
37895: PPUSH
37896: LD_INT 5
37898: PPUSH
37899: CALL_OW 272
37903: PUSH
37904: LD_VAR 0 11
37908: PPUSH
37909: LD_VAR 0 8
37913: PPUSH
37914: LD_INT 5
37916: PPUSH
37917: CALL_OW 273
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37926: LD_VAR 0 9
37930: PUSH
37931: LD_INT 1
37933: ARRAY
37934: PPUSH
37935: LD_VAR 0 9
37939: PUSH
37940: LD_INT 2
37942: ARRAY
37943: PPUSH
37944: CALL_OW 488
37948: IFFALSE 38047
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37950: LD_ADDR_VAR 0 4
37954: PUSH
37955: LD_VAR 0 9
37959: PUSH
37960: LD_INT 1
37962: ARRAY
37963: PPUSH
37964: LD_VAR 0 9
37968: PUSH
37969: LD_INT 2
37971: ARRAY
37972: PPUSH
37973: CALL_OW 546
37977: ST_TO_ADDR
// if hex [ 1 ] then
37978: LD_VAR 0 4
37982: PUSH
37983: LD_INT 1
37985: ARRAY
37986: IFFALSE 37990
// continue ;
37988: GO 37878
// h := hex [ 2 ] ;
37990: LD_ADDR_VAR 0 13
37994: PUSH
37995: LD_VAR 0 4
37999: PUSH
38000: LD_INT 2
38002: ARRAY
38003: ST_TO_ADDR
// if h + 7 < height then
38004: LD_VAR 0 13
38008: PUSH
38009: LD_INT 7
38011: PLUS
38012: PUSH
38013: LD_VAR 0 15
38017: LESS
38018: IFFALSE 38047
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38020: LD_ADDR_VAR 0 18
38024: PUSH
38025: LD_INT 7
38027: PUSH
38028: LD_INT 28
38030: PUSH
38031: LD_INT 45
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: LIST
38038: PUSH
38039: LD_VAR 0 12
38043: ARRAY
38044: ST_TO_ADDR
// break ;
38045: GO 38049
// end ; end ; end ;
38047: GO 37878
38049: POP
38050: POP
// end ; if not weapon then
38051: LD_VAR 0 18
38055: NOT
38056: IFFALSE 38116
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38058: LD_ADDR_VAR 0 5
38062: PUSH
38063: LD_VAR 0 5
38067: PUSH
38068: LD_INT 11
38070: PUSH
38071: LD_INT 30
38073: PUSH
38074: LD_INT 49
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: LIST
38081: DIFF
38082: ST_TO_ADDR
// if not list then
38083: LD_VAR 0 5
38087: NOT
38088: IFFALSE 38092
// exit ;
38090: GO 38234
// weapon := list [ rand ( 1 , list ) ] ;
38092: LD_ADDR_VAR 0 18
38096: PUSH
38097: LD_VAR 0 5
38101: PUSH
38102: LD_INT 1
38104: PPUSH
38105: LD_VAR 0 5
38109: PPUSH
38110: CALL_OW 12
38114: ARRAY
38115: ST_TO_ADDR
// end ; if weapon then
38116: LD_VAR 0 18
38120: IFFALSE 38234
// begin tmp := CostOfWeapon ( weapon ) ;
38122: LD_ADDR_VAR 0 14
38126: PUSH
38127: LD_VAR 0 18
38131: PPUSH
38132: CALL_OW 451
38136: ST_TO_ADDR
// j := GetBase ( tower ) ;
38137: LD_ADDR_VAR 0 9
38141: PUSH
38142: LD_VAR 0 1
38146: PPUSH
38147: CALL_OW 274
38151: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38152: LD_VAR 0 9
38156: PPUSH
38157: LD_INT 1
38159: PPUSH
38160: CALL_OW 275
38164: PUSH
38165: LD_VAR 0 14
38169: PUSH
38170: LD_INT 1
38172: ARRAY
38173: GREATEREQUAL
38174: PUSH
38175: LD_VAR 0 9
38179: PPUSH
38180: LD_INT 2
38182: PPUSH
38183: CALL_OW 275
38187: PUSH
38188: LD_VAR 0 14
38192: PUSH
38193: LD_INT 2
38195: ARRAY
38196: GREATEREQUAL
38197: AND
38198: PUSH
38199: LD_VAR 0 9
38203: PPUSH
38204: LD_INT 3
38206: PPUSH
38207: CALL_OW 275
38211: PUSH
38212: LD_VAR 0 14
38216: PUSH
38217: LD_INT 3
38219: ARRAY
38220: GREATEREQUAL
38221: AND
38222: IFFALSE 38234
// result := weapon ;
38224: LD_ADDR_VAR 0 3
38228: PUSH
38229: LD_VAR 0 18
38233: ST_TO_ADDR
// end ; end ;
38234: LD_VAR 0 3
38238: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38239: LD_INT 0
38241: PPUSH
38242: PPUSH
// result := true ;
38243: LD_ADDR_VAR 0 3
38247: PUSH
38248: LD_INT 1
38250: ST_TO_ADDR
// if array1 = array2 then
38251: LD_VAR 0 1
38255: PUSH
38256: LD_VAR 0 2
38260: EQUAL
38261: IFFALSE 38321
// begin for i = 1 to array1 do
38263: LD_ADDR_VAR 0 4
38267: PUSH
38268: DOUBLE
38269: LD_INT 1
38271: DEC
38272: ST_TO_ADDR
38273: LD_VAR 0 1
38277: PUSH
38278: FOR_TO
38279: IFFALSE 38317
// if array1 [ i ] <> array2 [ i ] then
38281: LD_VAR 0 1
38285: PUSH
38286: LD_VAR 0 4
38290: ARRAY
38291: PUSH
38292: LD_VAR 0 2
38296: PUSH
38297: LD_VAR 0 4
38301: ARRAY
38302: NONEQUAL
38303: IFFALSE 38315
// begin result := false ;
38305: LD_ADDR_VAR 0 3
38309: PUSH
38310: LD_INT 0
38312: ST_TO_ADDR
// break ;
38313: GO 38317
// end ;
38315: GO 38278
38317: POP
38318: POP
// end else
38319: GO 38329
// result := false ;
38321: LD_ADDR_VAR 0 3
38325: PUSH
38326: LD_INT 0
38328: ST_TO_ADDR
// end ;
38329: LD_VAR 0 3
38333: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38334: LD_INT 0
38336: PPUSH
38337: PPUSH
// if not array1 or not array2 then
38338: LD_VAR 0 1
38342: NOT
38343: PUSH
38344: LD_VAR 0 2
38348: NOT
38349: OR
38350: IFFALSE 38354
// exit ;
38352: GO 38418
// result := true ;
38354: LD_ADDR_VAR 0 3
38358: PUSH
38359: LD_INT 1
38361: ST_TO_ADDR
// for i = 1 to array1 do
38362: LD_ADDR_VAR 0 4
38366: PUSH
38367: DOUBLE
38368: LD_INT 1
38370: DEC
38371: ST_TO_ADDR
38372: LD_VAR 0 1
38376: PUSH
38377: FOR_TO
38378: IFFALSE 38416
// if array1 [ i ] <> array2 [ i ] then
38380: LD_VAR 0 1
38384: PUSH
38385: LD_VAR 0 4
38389: ARRAY
38390: PUSH
38391: LD_VAR 0 2
38395: PUSH
38396: LD_VAR 0 4
38400: ARRAY
38401: NONEQUAL
38402: IFFALSE 38414
// begin result := false ;
38404: LD_ADDR_VAR 0 3
38408: PUSH
38409: LD_INT 0
38411: ST_TO_ADDR
// break ;
38412: GO 38416
// end ;
38414: GO 38377
38416: POP
38417: POP
// end ;
38418: LD_VAR 0 3
38422: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38423: LD_INT 0
38425: PPUSH
38426: PPUSH
38427: PPUSH
// pom := GetBase ( fac ) ;
38428: LD_ADDR_VAR 0 5
38432: PUSH
38433: LD_VAR 0 1
38437: PPUSH
38438: CALL_OW 274
38442: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38443: LD_ADDR_VAR 0 4
38447: PUSH
38448: LD_VAR 0 2
38452: PUSH
38453: LD_INT 1
38455: ARRAY
38456: PPUSH
38457: LD_VAR 0 2
38461: PUSH
38462: LD_INT 2
38464: ARRAY
38465: PPUSH
38466: LD_VAR 0 2
38470: PUSH
38471: LD_INT 3
38473: ARRAY
38474: PPUSH
38475: LD_VAR 0 2
38479: PUSH
38480: LD_INT 4
38482: ARRAY
38483: PPUSH
38484: CALL_OW 449
38488: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38489: LD_ADDR_VAR 0 3
38493: PUSH
38494: LD_VAR 0 5
38498: PPUSH
38499: LD_INT 1
38501: PPUSH
38502: CALL_OW 275
38506: PUSH
38507: LD_VAR 0 4
38511: PUSH
38512: LD_INT 1
38514: ARRAY
38515: GREATEREQUAL
38516: PUSH
38517: LD_VAR 0 5
38521: PPUSH
38522: LD_INT 2
38524: PPUSH
38525: CALL_OW 275
38529: PUSH
38530: LD_VAR 0 4
38534: PUSH
38535: LD_INT 2
38537: ARRAY
38538: GREATEREQUAL
38539: AND
38540: PUSH
38541: LD_VAR 0 5
38545: PPUSH
38546: LD_INT 3
38548: PPUSH
38549: CALL_OW 275
38553: PUSH
38554: LD_VAR 0 4
38558: PUSH
38559: LD_INT 3
38561: ARRAY
38562: GREATEREQUAL
38563: AND
38564: ST_TO_ADDR
// end ;
38565: LD_VAR 0 3
38569: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38570: LD_INT 0
38572: PPUSH
38573: PPUSH
38574: PPUSH
38575: PPUSH
// pom := GetBase ( building ) ;
38576: LD_ADDR_VAR 0 3
38580: PUSH
38581: LD_VAR 0 1
38585: PPUSH
38586: CALL_OW 274
38590: ST_TO_ADDR
// if not pom then
38591: LD_VAR 0 3
38595: NOT
38596: IFFALSE 38600
// exit ;
38598: GO 38770
// btype := GetBType ( building ) ;
38600: LD_ADDR_VAR 0 5
38604: PUSH
38605: LD_VAR 0 1
38609: PPUSH
38610: CALL_OW 266
38614: ST_TO_ADDR
// if btype = b_armoury then
38615: LD_VAR 0 5
38619: PUSH
38620: LD_INT 4
38622: EQUAL
38623: IFFALSE 38633
// btype := b_barracks ;
38625: LD_ADDR_VAR 0 5
38629: PUSH
38630: LD_INT 5
38632: ST_TO_ADDR
// if btype = b_depot then
38633: LD_VAR 0 5
38637: PUSH
38638: LD_INT 0
38640: EQUAL
38641: IFFALSE 38651
// btype := b_warehouse ;
38643: LD_ADDR_VAR 0 5
38647: PUSH
38648: LD_INT 1
38650: ST_TO_ADDR
// if btype = b_workshop then
38651: LD_VAR 0 5
38655: PUSH
38656: LD_INT 2
38658: EQUAL
38659: IFFALSE 38669
// btype := b_factory ;
38661: LD_ADDR_VAR 0 5
38665: PUSH
38666: LD_INT 3
38668: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38669: LD_ADDR_VAR 0 4
38673: PUSH
38674: LD_VAR 0 5
38678: PPUSH
38679: LD_VAR 0 1
38683: PPUSH
38684: CALL_OW 248
38688: PPUSH
38689: CALL_OW 450
38693: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38694: LD_ADDR_VAR 0 2
38698: PUSH
38699: LD_VAR 0 3
38703: PPUSH
38704: LD_INT 1
38706: PPUSH
38707: CALL_OW 275
38711: PUSH
38712: LD_VAR 0 4
38716: PUSH
38717: LD_INT 1
38719: ARRAY
38720: GREATEREQUAL
38721: PUSH
38722: LD_VAR 0 3
38726: PPUSH
38727: LD_INT 2
38729: PPUSH
38730: CALL_OW 275
38734: PUSH
38735: LD_VAR 0 4
38739: PUSH
38740: LD_INT 2
38742: ARRAY
38743: GREATEREQUAL
38744: AND
38745: PUSH
38746: LD_VAR 0 3
38750: PPUSH
38751: LD_INT 3
38753: PPUSH
38754: CALL_OW 275
38758: PUSH
38759: LD_VAR 0 4
38763: PUSH
38764: LD_INT 3
38766: ARRAY
38767: GREATEREQUAL
38768: AND
38769: ST_TO_ADDR
// end ;
38770: LD_VAR 0 2
38774: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38775: LD_INT 0
38777: PPUSH
38778: PPUSH
38779: PPUSH
// pom := GetBase ( building ) ;
38780: LD_ADDR_VAR 0 4
38784: PUSH
38785: LD_VAR 0 1
38789: PPUSH
38790: CALL_OW 274
38794: ST_TO_ADDR
// if not pom then
38795: LD_VAR 0 4
38799: NOT
38800: IFFALSE 38804
// exit ;
38802: GO 38905
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38804: LD_ADDR_VAR 0 5
38808: PUSH
38809: LD_VAR 0 2
38813: PPUSH
38814: LD_VAR 0 1
38818: PPUSH
38819: CALL_OW 248
38823: PPUSH
38824: CALL_OW 450
38828: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38829: LD_ADDR_VAR 0 3
38833: PUSH
38834: LD_VAR 0 4
38838: PPUSH
38839: LD_INT 1
38841: PPUSH
38842: CALL_OW 275
38846: PUSH
38847: LD_VAR 0 5
38851: PUSH
38852: LD_INT 1
38854: ARRAY
38855: GREATEREQUAL
38856: PUSH
38857: LD_VAR 0 4
38861: PPUSH
38862: LD_INT 2
38864: PPUSH
38865: CALL_OW 275
38869: PUSH
38870: LD_VAR 0 5
38874: PUSH
38875: LD_INT 2
38877: ARRAY
38878: GREATEREQUAL
38879: AND
38880: PUSH
38881: LD_VAR 0 4
38885: PPUSH
38886: LD_INT 3
38888: PPUSH
38889: CALL_OW 275
38893: PUSH
38894: LD_VAR 0 5
38898: PUSH
38899: LD_INT 3
38901: ARRAY
38902: GREATEREQUAL
38903: AND
38904: ST_TO_ADDR
// end ;
38905: LD_VAR 0 3
38909: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38910: LD_INT 0
38912: PPUSH
38913: PPUSH
38914: PPUSH
38915: PPUSH
38916: PPUSH
38917: PPUSH
38918: PPUSH
38919: PPUSH
38920: PPUSH
38921: PPUSH
38922: PPUSH
// result := false ;
38923: LD_ADDR_VAR 0 8
38927: PUSH
38928: LD_INT 0
38930: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38931: LD_VAR 0 5
38935: NOT
38936: PUSH
38937: LD_VAR 0 1
38941: NOT
38942: OR
38943: PUSH
38944: LD_VAR 0 2
38948: NOT
38949: OR
38950: PUSH
38951: LD_VAR 0 3
38955: NOT
38956: OR
38957: IFFALSE 38961
// exit ;
38959: GO 39775
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38961: LD_ADDR_VAR 0 14
38965: PUSH
38966: LD_VAR 0 1
38970: PPUSH
38971: LD_VAR 0 2
38975: PPUSH
38976: LD_VAR 0 3
38980: PPUSH
38981: LD_VAR 0 4
38985: PPUSH
38986: LD_VAR 0 5
38990: PUSH
38991: LD_INT 1
38993: ARRAY
38994: PPUSH
38995: CALL_OW 248
38999: PPUSH
39000: LD_INT 0
39002: PPUSH
39003: CALL 41012 0 6
39007: ST_TO_ADDR
// if not hexes then
39008: LD_VAR 0 14
39012: NOT
39013: IFFALSE 39017
// exit ;
39015: GO 39775
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39017: LD_ADDR_VAR 0 17
39021: PUSH
39022: LD_VAR 0 5
39026: PPUSH
39027: LD_INT 22
39029: PUSH
39030: LD_VAR 0 13
39034: PPUSH
39035: CALL_OW 255
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 2
39046: PUSH
39047: LD_INT 30
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 30
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: LIST
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PPUSH
39076: CALL_OW 72
39080: ST_TO_ADDR
// for i = 1 to hexes do
39081: LD_ADDR_VAR 0 9
39085: PUSH
39086: DOUBLE
39087: LD_INT 1
39089: DEC
39090: ST_TO_ADDR
39091: LD_VAR 0 14
39095: PUSH
39096: FOR_TO
39097: IFFALSE 39773
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39099: LD_ADDR_VAR 0 13
39103: PUSH
39104: LD_VAR 0 14
39108: PUSH
39109: LD_VAR 0 9
39113: ARRAY
39114: PUSH
39115: LD_INT 1
39117: ARRAY
39118: PPUSH
39119: LD_VAR 0 14
39123: PUSH
39124: LD_VAR 0 9
39128: ARRAY
39129: PUSH
39130: LD_INT 2
39132: ARRAY
39133: PPUSH
39134: CALL_OW 428
39138: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39139: LD_VAR 0 14
39143: PUSH
39144: LD_VAR 0 9
39148: ARRAY
39149: PUSH
39150: LD_INT 1
39152: ARRAY
39153: PPUSH
39154: LD_VAR 0 14
39158: PUSH
39159: LD_VAR 0 9
39163: ARRAY
39164: PUSH
39165: LD_INT 2
39167: ARRAY
39168: PPUSH
39169: CALL_OW 351
39173: PUSH
39174: LD_VAR 0 14
39178: PUSH
39179: LD_VAR 0 9
39183: ARRAY
39184: PUSH
39185: LD_INT 1
39187: ARRAY
39188: PPUSH
39189: LD_VAR 0 14
39193: PUSH
39194: LD_VAR 0 9
39198: ARRAY
39199: PUSH
39200: LD_INT 2
39202: ARRAY
39203: PPUSH
39204: CALL_OW 488
39208: NOT
39209: OR
39210: PUSH
39211: LD_VAR 0 13
39215: PPUSH
39216: CALL_OW 247
39220: PUSH
39221: LD_INT 3
39223: EQUAL
39224: OR
39225: IFFALSE 39231
// exit ;
39227: POP
39228: POP
39229: GO 39775
// if not tmp then
39231: LD_VAR 0 13
39235: NOT
39236: IFFALSE 39240
// continue ;
39238: GO 39096
// result := true ;
39240: LD_ADDR_VAR 0 8
39244: PUSH
39245: LD_INT 1
39247: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39248: LD_VAR 0 6
39252: PUSH
39253: LD_VAR 0 13
39257: PPUSH
39258: CALL_OW 247
39262: PUSH
39263: LD_INT 2
39265: EQUAL
39266: AND
39267: PUSH
39268: LD_VAR 0 13
39272: PPUSH
39273: CALL_OW 263
39277: PUSH
39278: LD_INT 1
39280: EQUAL
39281: AND
39282: IFFALSE 39446
// begin if IsDrivenBy ( tmp ) then
39284: LD_VAR 0 13
39288: PPUSH
39289: CALL_OW 311
39293: IFFALSE 39297
// continue ;
39295: GO 39096
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39297: LD_VAR 0 6
39301: PPUSH
39302: LD_INT 3
39304: PUSH
39305: LD_INT 60
39307: PUSH
39308: EMPTY
39309: LIST
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 3
39317: PUSH
39318: LD_INT 55
39320: PUSH
39321: EMPTY
39322: LIST
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PPUSH
39332: CALL_OW 72
39336: IFFALSE 39444
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39338: LD_ADDR_VAR 0 18
39342: PUSH
39343: LD_VAR 0 6
39347: PPUSH
39348: LD_INT 3
39350: PUSH
39351: LD_INT 60
39353: PUSH
39354: EMPTY
39355: LIST
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 3
39363: PUSH
39364: LD_INT 55
39366: PUSH
39367: EMPTY
39368: LIST
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PPUSH
39378: CALL_OW 72
39382: PUSH
39383: LD_INT 1
39385: ARRAY
39386: ST_TO_ADDR
// if IsInUnit ( driver ) then
39387: LD_VAR 0 18
39391: PPUSH
39392: CALL_OW 310
39396: IFFALSE 39407
// ComExit ( driver ) ;
39398: LD_VAR 0 18
39402: PPUSH
39403: CALL 64196 0 1
// AddComEnterUnit ( driver , tmp ) ;
39407: LD_VAR 0 18
39411: PPUSH
39412: LD_VAR 0 13
39416: PPUSH
39417: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39421: LD_VAR 0 18
39425: PPUSH
39426: LD_VAR 0 7
39430: PPUSH
39431: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39435: LD_VAR 0 18
39439: PPUSH
39440: CALL_OW 181
// end ; continue ;
39444: GO 39096
// end ; if not cleaners or not tmp in cleaners then
39446: LD_VAR 0 6
39450: NOT
39451: PUSH
39452: LD_VAR 0 13
39456: PUSH
39457: LD_VAR 0 6
39461: IN
39462: NOT
39463: OR
39464: IFFALSE 39771
// begin if dep then
39466: LD_VAR 0 17
39470: IFFALSE 39606
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39472: LD_ADDR_VAR 0 16
39476: PUSH
39477: LD_VAR 0 17
39481: PUSH
39482: LD_INT 1
39484: ARRAY
39485: PPUSH
39486: CALL_OW 250
39490: PPUSH
39491: LD_VAR 0 17
39495: PUSH
39496: LD_INT 1
39498: ARRAY
39499: PPUSH
39500: CALL_OW 254
39504: PPUSH
39505: LD_INT 5
39507: PPUSH
39508: CALL_OW 272
39512: PUSH
39513: LD_VAR 0 17
39517: PUSH
39518: LD_INT 1
39520: ARRAY
39521: PPUSH
39522: CALL_OW 251
39526: PPUSH
39527: LD_VAR 0 17
39531: PUSH
39532: LD_INT 1
39534: ARRAY
39535: PPUSH
39536: CALL_OW 254
39540: PPUSH
39541: LD_INT 5
39543: PPUSH
39544: CALL_OW 273
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39553: LD_VAR 0 16
39557: PUSH
39558: LD_INT 1
39560: ARRAY
39561: PPUSH
39562: LD_VAR 0 16
39566: PUSH
39567: LD_INT 2
39569: ARRAY
39570: PPUSH
39571: CALL_OW 488
39575: IFFALSE 39606
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39577: LD_VAR 0 13
39581: PPUSH
39582: LD_VAR 0 16
39586: PUSH
39587: LD_INT 1
39589: ARRAY
39590: PPUSH
39591: LD_VAR 0 16
39595: PUSH
39596: LD_INT 2
39598: ARRAY
39599: PPUSH
39600: CALL_OW 111
// continue ;
39604: GO 39096
// end ; end ; r := GetDir ( tmp ) ;
39606: LD_ADDR_VAR 0 15
39610: PUSH
39611: LD_VAR 0 13
39615: PPUSH
39616: CALL_OW 254
39620: ST_TO_ADDR
// if r = 5 then
39621: LD_VAR 0 15
39625: PUSH
39626: LD_INT 5
39628: EQUAL
39629: IFFALSE 39639
// r := 0 ;
39631: LD_ADDR_VAR 0 15
39635: PUSH
39636: LD_INT 0
39638: ST_TO_ADDR
// for j = r to 5 do
39639: LD_ADDR_VAR 0 10
39643: PUSH
39644: DOUBLE
39645: LD_VAR 0 15
39649: DEC
39650: ST_TO_ADDR
39651: LD_INT 5
39653: PUSH
39654: FOR_TO
39655: IFFALSE 39769
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39657: LD_ADDR_VAR 0 11
39661: PUSH
39662: LD_VAR 0 13
39666: PPUSH
39667: CALL_OW 250
39671: PPUSH
39672: LD_VAR 0 10
39676: PPUSH
39677: LD_INT 2
39679: PPUSH
39680: CALL_OW 272
39684: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39685: LD_ADDR_VAR 0 12
39689: PUSH
39690: LD_VAR 0 13
39694: PPUSH
39695: CALL_OW 251
39699: PPUSH
39700: LD_VAR 0 10
39704: PPUSH
39705: LD_INT 2
39707: PPUSH
39708: CALL_OW 273
39712: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39713: LD_VAR 0 11
39717: PPUSH
39718: LD_VAR 0 12
39722: PPUSH
39723: CALL_OW 488
39727: PUSH
39728: LD_VAR 0 11
39732: PPUSH
39733: LD_VAR 0 12
39737: PPUSH
39738: CALL_OW 428
39742: NOT
39743: AND
39744: IFFALSE 39767
// begin ComMoveXY ( tmp , _x , _y ) ;
39746: LD_VAR 0 13
39750: PPUSH
39751: LD_VAR 0 11
39755: PPUSH
39756: LD_VAR 0 12
39760: PPUSH
39761: CALL_OW 111
// break ;
39765: GO 39769
// end ; end ;
39767: GO 39654
39769: POP
39770: POP
// end ; end ;
39771: GO 39096
39773: POP
39774: POP
// end ;
39775: LD_VAR 0 8
39779: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39780: LD_INT 0
39782: PPUSH
// result := true ;
39783: LD_ADDR_VAR 0 3
39787: PUSH
39788: LD_INT 1
39790: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39791: LD_VAR 0 2
39795: PUSH
39796: LD_INT 24
39798: DOUBLE
39799: EQUAL
39800: IFTRUE 39810
39802: LD_INT 33
39804: DOUBLE
39805: EQUAL
39806: IFTRUE 39810
39808: GO 39835
39810: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39811: LD_ADDR_VAR 0 3
39815: PUSH
39816: LD_INT 32
39818: PPUSH
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 321
39828: PUSH
39829: LD_INT 2
39831: EQUAL
39832: ST_TO_ADDR
39833: GO 40155
39835: LD_INT 20
39837: DOUBLE
39838: EQUAL
39839: IFTRUE 39843
39841: GO 39868
39843: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39844: LD_ADDR_VAR 0 3
39848: PUSH
39849: LD_INT 6
39851: PPUSH
39852: LD_VAR 0 1
39856: PPUSH
39857: CALL_OW 321
39861: PUSH
39862: LD_INT 2
39864: EQUAL
39865: ST_TO_ADDR
39866: GO 40155
39868: LD_INT 22
39870: DOUBLE
39871: EQUAL
39872: IFTRUE 39882
39874: LD_INT 36
39876: DOUBLE
39877: EQUAL
39878: IFTRUE 39882
39880: GO 39907
39882: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39883: LD_ADDR_VAR 0 3
39887: PUSH
39888: LD_INT 15
39890: PPUSH
39891: LD_VAR 0 1
39895: PPUSH
39896: CALL_OW 321
39900: PUSH
39901: LD_INT 2
39903: EQUAL
39904: ST_TO_ADDR
39905: GO 40155
39907: LD_INT 30
39909: DOUBLE
39910: EQUAL
39911: IFTRUE 39915
39913: GO 39940
39915: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39916: LD_ADDR_VAR 0 3
39920: PUSH
39921: LD_INT 20
39923: PPUSH
39924: LD_VAR 0 1
39928: PPUSH
39929: CALL_OW 321
39933: PUSH
39934: LD_INT 2
39936: EQUAL
39937: ST_TO_ADDR
39938: GO 40155
39940: LD_INT 28
39942: DOUBLE
39943: EQUAL
39944: IFTRUE 39954
39946: LD_INT 21
39948: DOUBLE
39949: EQUAL
39950: IFTRUE 39954
39952: GO 39979
39954: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39955: LD_ADDR_VAR 0 3
39959: PUSH
39960: LD_INT 21
39962: PPUSH
39963: LD_VAR 0 1
39967: PPUSH
39968: CALL_OW 321
39972: PUSH
39973: LD_INT 2
39975: EQUAL
39976: ST_TO_ADDR
39977: GO 40155
39979: LD_INT 16
39981: DOUBLE
39982: EQUAL
39983: IFTRUE 39987
39985: GO 40014
39987: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39988: LD_ADDR_VAR 0 3
39992: PUSH
39993: LD_EXP 122
39997: PPUSH
39998: LD_VAR 0 1
40002: PPUSH
40003: CALL_OW 321
40007: PUSH
40008: LD_INT 2
40010: EQUAL
40011: ST_TO_ADDR
40012: GO 40155
40014: LD_INT 19
40016: DOUBLE
40017: EQUAL
40018: IFTRUE 40028
40020: LD_INT 23
40022: DOUBLE
40023: EQUAL
40024: IFTRUE 40028
40026: GO 40055
40028: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40029: LD_ADDR_VAR 0 3
40033: PUSH
40034: LD_EXP 121
40038: PPUSH
40039: LD_VAR 0 1
40043: PPUSH
40044: CALL_OW 321
40048: PUSH
40049: LD_INT 2
40051: EQUAL
40052: ST_TO_ADDR
40053: GO 40155
40055: LD_INT 17
40057: DOUBLE
40058: EQUAL
40059: IFTRUE 40063
40061: GO 40088
40063: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40064: LD_ADDR_VAR 0 3
40068: PUSH
40069: LD_INT 39
40071: PPUSH
40072: LD_VAR 0 1
40076: PPUSH
40077: CALL_OW 321
40081: PUSH
40082: LD_INT 2
40084: EQUAL
40085: ST_TO_ADDR
40086: GO 40155
40088: LD_INT 18
40090: DOUBLE
40091: EQUAL
40092: IFTRUE 40096
40094: GO 40121
40096: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40097: LD_ADDR_VAR 0 3
40101: PUSH
40102: LD_INT 40
40104: PPUSH
40105: LD_VAR 0 1
40109: PPUSH
40110: CALL_OW 321
40114: PUSH
40115: LD_INT 2
40117: EQUAL
40118: ST_TO_ADDR
40119: GO 40155
40121: LD_INT 27
40123: DOUBLE
40124: EQUAL
40125: IFTRUE 40129
40127: GO 40154
40129: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40130: LD_ADDR_VAR 0 3
40134: PUSH
40135: LD_INT 35
40137: PPUSH
40138: LD_VAR 0 1
40142: PPUSH
40143: CALL_OW 321
40147: PUSH
40148: LD_INT 2
40150: EQUAL
40151: ST_TO_ADDR
40152: GO 40155
40154: POP
// end ;
40155: LD_VAR 0 3
40159: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40160: LD_INT 0
40162: PPUSH
40163: PPUSH
40164: PPUSH
40165: PPUSH
40166: PPUSH
40167: PPUSH
40168: PPUSH
40169: PPUSH
40170: PPUSH
40171: PPUSH
40172: PPUSH
// result := false ;
40173: LD_ADDR_VAR 0 6
40177: PUSH
40178: LD_INT 0
40180: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40181: LD_VAR 0 1
40185: NOT
40186: PUSH
40187: LD_VAR 0 1
40191: PPUSH
40192: CALL_OW 266
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: IN
40207: NOT
40208: OR
40209: PUSH
40210: LD_VAR 0 2
40214: NOT
40215: OR
40216: PUSH
40217: LD_VAR 0 5
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: LD_INT 1
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: LD_INT 3
40233: PUSH
40234: LD_INT 4
40236: PUSH
40237: LD_INT 5
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: IN
40248: NOT
40249: OR
40250: PUSH
40251: LD_VAR 0 3
40255: PPUSH
40256: LD_VAR 0 4
40260: PPUSH
40261: CALL_OW 488
40265: NOT
40266: OR
40267: IFFALSE 40271
// exit ;
40269: GO 41007
// side := GetSide ( depot ) ;
40271: LD_ADDR_VAR 0 9
40275: PUSH
40276: LD_VAR 0 1
40280: PPUSH
40281: CALL_OW 255
40285: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40286: LD_VAR 0 9
40290: PPUSH
40291: LD_VAR 0 2
40295: PPUSH
40296: CALL 39780 0 2
40300: NOT
40301: IFFALSE 40305
// exit ;
40303: GO 41007
// pom := GetBase ( depot ) ;
40305: LD_ADDR_VAR 0 10
40309: PUSH
40310: LD_VAR 0 1
40314: PPUSH
40315: CALL_OW 274
40319: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40320: LD_ADDR_VAR 0 11
40324: PUSH
40325: LD_VAR 0 2
40329: PPUSH
40330: LD_VAR 0 1
40334: PPUSH
40335: CALL_OW 248
40339: PPUSH
40340: CALL_OW 450
40344: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40345: LD_VAR 0 10
40349: PPUSH
40350: LD_INT 1
40352: PPUSH
40353: CALL_OW 275
40357: PUSH
40358: LD_VAR 0 11
40362: PUSH
40363: LD_INT 1
40365: ARRAY
40366: GREATEREQUAL
40367: PUSH
40368: LD_VAR 0 10
40372: PPUSH
40373: LD_INT 2
40375: PPUSH
40376: CALL_OW 275
40380: PUSH
40381: LD_VAR 0 11
40385: PUSH
40386: LD_INT 2
40388: ARRAY
40389: GREATEREQUAL
40390: AND
40391: PUSH
40392: LD_VAR 0 10
40396: PPUSH
40397: LD_INT 3
40399: PPUSH
40400: CALL_OW 275
40404: PUSH
40405: LD_VAR 0 11
40409: PUSH
40410: LD_INT 3
40412: ARRAY
40413: GREATEREQUAL
40414: AND
40415: NOT
40416: IFFALSE 40420
// exit ;
40418: GO 41007
// if GetBType ( depot ) = b_depot then
40420: LD_VAR 0 1
40424: PPUSH
40425: CALL_OW 266
40429: PUSH
40430: LD_INT 0
40432: EQUAL
40433: IFFALSE 40445
// dist := 28 else
40435: LD_ADDR_VAR 0 14
40439: PUSH
40440: LD_INT 28
40442: ST_TO_ADDR
40443: GO 40453
// dist := 36 ;
40445: LD_ADDR_VAR 0 14
40449: PUSH
40450: LD_INT 36
40452: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40453: LD_VAR 0 1
40457: PPUSH
40458: LD_VAR 0 3
40462: PPUSH
40463: LD_VAR 0 4
40467: PPUSH
40468: CALL_OW 297
40472: PUSH
40473: LD_VAR 0 14
40477: GREATER
40478: IFFALSE 40482
// exit ;
40480: GO 41007
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40482: LD_ADDR_VAR 0 12
40486: PUSH
40487: LD_VAR 0 2
40491: PPUSH
40492: LD_VAR 0 3
40496: PPUSH
40497: LD_VAR 0 4
40501: PPUSH
40502: LD_VAR 0 5
40506: PPUSH
40507: LD_VAR 0 1
40511: PPUSH
40512: CALL_OW 248
40516: PPUSH
40517: LD_INT 0
40519: PPUSH
40520: CALL 41012 0 6
40524: ST_TO_ADDR
// if not hexes then
40525: LD_VAR 0 12
40529: NOT
40530: IFFALSE 40534
// exit ;
40532: GO 41007
// hex := GetHexInfo ( x , y ) ;
40534: LD_ADDR_VAR 0 15
40538: PUSH
40539: LD_VAR 0 3
40543: PPUSH
40544: LD_VAR 0 4
40548: PPUSH
40549: CALL_OW 546
40553: ST_TO_ADDR
// if hex [ 1 ] then
40554: LD_VAR 0 15
40558: PUSH
40559: LD_INT 1
40561: ARRAY
40562: IFFALSE 40566
// exit ;
40564: GO 41007
// height := hex [ 2 ] ;
40566: LD_ADDR_VAR 0 13
40570: PUSH
40571: LD_VAR 0 15
40575: PUSH
40576: LD_INT 2
40578: ARRAY
40579: ST_TO_ADDR
// for i = 1 to hexes do
40580: LD_ADDR_VAR 0 7
40584: PUSH
40585: DOUBLE
40586: LD_INT 1
40588: DEC
40589: ST_TO_ADDR
40590: LD_VAR 0 12
40594: PUSH
40595: FOR_TO
40596: IFFALSE 40926
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40598: LD_VAR 0 12
40602: PUSH
40603: LD_VAR 0 7
40607: ARRAY
40608: PUSH
40609: LD_INT 1
40611: ARRAY
40612: PPUSH
40613: LD_VAR 0 12
40617: PUSH
40618: LD_VAR 0 7
40622: ARRAY
40623: PUSH
40624: LD_INT 2
40626: ARRAY
40627: PPUSH
40628: CALL_OW 488
40632: NOT
40633: PUSH
40634: LD_VAR 0 12
40638: PUSH
40639: LD_VAR 0 7
40643: ARRAY
40644: PUSH
40645: LD_INT 1
40647: ARRAY
40648: PPUSH
40649: LD_VAR 0 12
40653: PUSH
40654: LD_VAR 0 7
40658: ARRAY
40659: PUSH
40660: LD_INT 2
40662: ARRAY
40663: PPUSH
40664: CALL_OW 428
40668: PUSH
40669: LD_INT 0
40671: GREATER
40672: OR
40673: PUSH
40674: LD_VAR 0 12
40678: PUSH
40679: LD_VAR 0 7
40683: ARRAY
40684: PUSH
40685: LD_INT 1
40687: ARRAY
40688: PPUSH
40689: LD_VAR 0 12
40693: PUSH
40694: LD_VAR 0 7
40698: ARRAY
40699: PUSH
40700: LD_INT 2
40702: ARRAY
40703: PPUSH
40704: CALL_OW 351
40708: OR
40709: IFFALSE 40715
// exit ;
40711: POP
40712: POP
40713: GO 41007
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40715: LD_ADDR_VAR 0 8
40719: PUSH
40720: LD_VAR 0 12
40724: PUSH
40725: LD_VAR 0 7
40729: ARRAY
40730: PUSH
40731: LD_INT 1
40733: ARRAY
40734: PPUSH
40735: LD_VAR 0 12
40739: PUSH
40740: LD_VAR 0 7
40744: ARRAY
40745: PUSH
40746: LD_INT 2
40748: ARRAY
40749: PPUSH
40750: CALL_OW 546
40754: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40755: LD_VAR 0 8
40759: PUSH
40760: LD_INT 1
40762: ARRAY
40763: PUSH
40764: LD_VAR 0 8
40768: PUSH
40769: LD_INT 2
40771: ARRAY
40772: PUSH
40773: LD_VAR 0 13
40777: PUSH
40778: LD_INT 2
40780: PLUS
40781: GREATER
40782: OR
40783: PUSH
40784: LD_VAR 0 8
40788: PUSH
40789: LD_INT 2
40791: ARRAY
40792: PUSH
40793: LD_VAR 0 13
40797: PUSH
40798: LD_INT 2
40800: MINUS
40801: LESS
40802: OR
40803: PUSH
40804: LD_VAR 0 8
40808: PUSH
40809: LD_INT 3
40811: ARRAY
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: LD_INT 8
40818: PUSH
40819: LD_INT 9
40821: PUSH
40822: LD_INT 10
40824: PUSH
40825: LD_INT 11
40827: PUSH
40828: LD_INT 12
40830: PUSH
40831: LD_INT 13
40833: PUSH
40834: LD_INT 16
40836: PUSH
40837: LD_INT 17
40839: PUSH
40840: LD_INT 18
40842: PUSH
40843: LD_INT 19
40845: PUSH
40846: LD_INT 20
40848: PUSH
40849: LD_INT 21
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: IN
40867: NOT
40868: OR
40869: PUSH
40870: LD_VAR 0 8
40874: PUSH
40875: LD_INT 5
40877: ARRAY
40878: NOT
40879: OR
40880: PUSH
40881: LD_VAR 0 8
40885: PUSH
40886: LD_INT 6
40888: ARRAY
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: LD_INT 2
40895: PUSH
40896: LD_INT 7
40898: PUSH
40899: LD_INT 9
40901: PUSH
40902: LD_INT 10
40904: PUSH
40905: LD_INT 11
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: IN
40916: NOT
40917: OR
40918: IFFALSE 40924
// exit ;
40920: POP
40921: POP
40922: GO 41007
// end ;
40924: GO 40595
40926: POP
40927: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40928: LD_VAR 0 9
40932: PPUSH
40933: LD_VAR 0 3
40937: PPUSH
40938: LD_VAR 0 4
40942: PPUSH
40943: LD_INT 20
40945: PPUSH
40946: CALL 32952 0 4
40950: PUSH
40951: LD_INT 4
40953: ARRAY
40954: IFFALSE 40958
// exit ;
40956: GO 41007
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40958: LD_VAR 0 2
40962: PUSH
40963: LD_INT 29
40965: PUSH
40966: LD_INT 30
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: IN
40973: PUSH
40974: LD_VAR 0 3
40978: PPUSH
40979: LD_VAR 0 4
40983: PPUSH
40984: LD_VAR 0 9
40988: PPUSH
40989: CALL_OW 440
40993: NOT
40994: AND
40995: IFFALSE 40999
// exit ;
40997: GO 41007
// result := true ;
40999: LD_ADDR_VAR 0 6
41003: PUSH
41004: LD_INT 1
41006: ST_TO_ADDR
// end ;
41007: LD_VAR 0 6
41011: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41012: LD_INT 0
41014: PPUSH
41015: PPUSH
41016: PPUSH
41017: PPUSH
41018: PPUSH
41019: PPUSH
41020: PPUSH
41021: PPUSH
41022: PPUSH
41023: PPUSH
41024: PPUSH
41025: PPUSH
41026: PPUSH
41027: PPUSH
41028: PPUSH
41029: PPUSH
41030: PPUSH
41031: PPUSH
41032: PPUSH
41033: PPUSH
41034: PPUSH
41035: PPUSH
41036: PPUSH
41037: PPUSH
41038: PPUSH
41039: PPUSH
41040: PPUSH
41041: PPUSH
41042: PPUSH
41043: PPUSH
41044: PPUSH
41045: PPUSH
41046: PPUSH
41047: PPUSH
41048: PPUSH
41049: PPUSH
41050: PPUSH
41051: PPUSH
41052: PPUSH
41053: PPUSH
41054: PPUSH
41055: PPUSH
41056: PPUSH
41057: PPUSH
41058: PPUSH
41059: PPUSH
41060: PPUSH
41061: PPUSH
41062: PPUSH
41063: PPUSH
41064: PPUSH
41065: PPUSH
41066: PPUSH
41067: PPUSH
41068: PPUSH
41069: PPUSH
41070: PPUSH
41071: PPUSH
// result = [ ] ;
41072: LD_ADDR_VAR 0 7
41076: PUSH
41077: EMPTY
41078: ST_TO_ADDR
// temp_list = [ ] ;
41079: LD_ADDR_VAR 0 9
41083: PUSH
41084: EMPTY
41085: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41086: LD_VAR 0 4
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: LD_INT 2
41099: PUSH
41100: LD_INT 3
41102: PUSH
41103: LD_INT 4
41105: PUSH
41106: LD_INT 5
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: IN
41117: NOT
41118: PUSH
41119: LD_VAR 0 1
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: IN
41134: PUSH
41135: LD_VAR 0 5
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: LD_INT 2
41145: PUSH
41146: LD_INT 3
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: LIST
41153: IN
41154: NOT
41155: AND
41156: OR
41157: IFFALSE 41161
// exit ;
41159: GO 59552
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41161: LD_VAR 0 1
41165: PUSH
41166: LD_INT 6
41168: PUSH
41169: LD_INT 7
41171: PUSH
41172: LD_INT 8
41174: PUSH
41175: LD_INT 13
41177: PUSH
41178: LD_INT 12
41180: PUSH
41181: LD_INT 15
41183: PUSH
41184: LD_INT 11
41186: PUSH
41187: LD_INT 14
41189: PUSH
41190: LD_INT 10
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: IN
41204: IFFALSE 41214
// btype = b_lab ;
41206: LD_ADDR_VAR 0 1
41210: PUSH
41211: LD_INT 6
41213: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41214: LD_VAR 0 6
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: LD_INT 2
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: LIST
41232: IN
41233: NOT
41234: PUSH
41235: LD_VAR 0 1
41239: PUSH
41240: LD_INT 0
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: LD_INT 3
41251: PUSH
41252: LD_INT 6
41254: PUSH
41255: LD_INT 36
41257: PUSH
41258: LD_INT 4
41260: PUSH
41261: LD_INT 5
41263: PUSH
41264: LD_INT 31
41266: PUSH
41267: LD_INT 32
41269: PUSH
41270: LD_INT 33
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: IN
41286: NOT
41287: PUSH
41288: LD_VAR 0 6
41292: PUSH
41293: LD_INT 1
41295: EQUAL
41296: AND
41297: OR
41298: PUSH
41299: LD_VAR 0 1
41303: PUSH
41304: LD_INT 2
41306: PUSH
41307: LD_INT 3
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: IN
41314: NOT
41315: PUSH
41316: LD_VAR 0 6
41320: PUSH
41321: LD_INT 2
41323: EQUAL
41324: AND
41325: OR
41326: IFFALSE 41336
// mode = 0 ;
41328: LD_ADDR_VAR 0 6
41332: PUSH
41333: LD_INT 0
41335: ST_TO_ADDR
// case mode of 0 :
41336: LD_VAR 0 6
41340: PUSH
41341: LD_INT 0
41343: DOUBLE
41344: EQUAL
41345: IFTRUE 41349
41347: GO 52802
41349: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41350: LD_ADDR_VAR 0 11
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: LD_INT 0
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: LD_INT 2
41435: NEG
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: LD_INT 2
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: LD_INT 3
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: LD_INT 3
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: PUSH
41518: LD_INT 2
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41543: LD_ADDR_VAR 0 12
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: LD_INT 1
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 1
41612: NEG
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 2
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 2
41666: NEG
41667: PUSH
41668: LD_INT 0
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 2
41677: NEG
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 2
41689: NEG
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 3
41700: NEG
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 3
41711: NEG
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41739: LD_ADDR_VAR 0 13
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: LD_INT 0
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: NEG
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 2
41842: PUSH
41843: LD_INT 2
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: LD_INT 2
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 2
41862: NEG
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 2
41874: NEG
41875: PUSH
41876: LD_INT 2
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 2
41886: NEG
41887: PUSH
41888: LD_INT 3
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 3
41898: NEG
41899: PUSH
41900: LD_INT 2
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 3
41910: NEG
41911: PUSH
41912: LD_INT 3
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41938: LD_ADDR_VAR 0 14
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 2
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 2
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 2
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: LD_INT 3
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 3
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: LD_INT 2
42110: NEG
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42134: LD_ADDR_VAR 0 15
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 1
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 2
42257: NEG
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 2
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 3
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 3
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42327: LD_ADDR_VAR 0 16
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: NEG
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: LD_INT 1
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 2
42450: NEG
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: NEG
42463: PUSH
42464: LD_INT 2
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 3
42474: PUSH
42475: LD_INT 2
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 3
42484: PUSH
42485: LD_INT 3
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 2
42494: PUSH
42495: LD_INT 3
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42520: LD_ADDR_VAR 0 17
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: LD_INT 2
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 2
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 2
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 2
42655: PUSH
42656: LD_INT 2
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: LD_INT 2
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 2
42696: NEG
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 2
42707: NEG
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: LD_INT 2
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42750: LD_ADDR_VAR 0 18
42754: PUSH
42755: LD_INT 0
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 2
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 2
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: LD_INT 2
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: LD_INT 2
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: LD_INT 2
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 2
42937: NEG
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 2
42949: NEG
42950: PUSH
42951: LD_INT 2
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42980: LD_ADDR_VAR 0 19
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: LD_INT 1
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: LD_INT 2
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: LD_INT 2
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 2
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 2
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: LD_INT 2
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: LD_INT 2
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 2
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 2
43156: NEG
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 2
43167: NEG
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 2
43179: NEG
43180: PUSH
43181: LD_INT 2
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43210: LD_ADDR_VAR 0 20
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: LD_INT 2
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: LD_INT 2
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 2
43386: NEG
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 2
43397: NEG
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: NEG
43410: PUSH
43411: LD_INT 2
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43440: LD_ADDR_VAR 0 21
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: LD_INT 2
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: LD_INT 2
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 2
43565: PUSH
43566: LD_INT 1
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: LD_INT 2
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 1
43585: PUSH
43586: LD_INT 2
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: LD_INT 2
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 2
43616: NEG
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: NEG
43640: PUSH
43641: LD_INT 2
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43670: LD_ADDR_VAR 0 22
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: LD_INT 2
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 2
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: LD_INT 1
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 2
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 2
43846: NEG
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43900: LD_ADDR_VAR 0 23
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: LD_INT 1
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 2
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: LD_INT 2
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: NEG
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: NEG
44100: PUSH
44101: LD_INT 2
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 2
44111: NEG
44112: PUSH
44113: LD_INT 3
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: LD_INT 3
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 2
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44180: LD_ADDR_VAR 0 24
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 1
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: LD_INT 2
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: LD_INT 2
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 2
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: LD_INT 2
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: LD_INT 2
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 2
44356: NEG
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 2
44379: NEG
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 3
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 3
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44456: LD_ADDR_VAR 0 25
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: LD_INT 1
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 2
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 2
44643: NEG
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 3
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 3
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: LD_INT 3
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: LD_INT 3
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44730: LD_ADDR_VAR 0 26
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: NEG
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 2
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 2
44917: NEG
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 2
44929: NEG
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: LD_INT 3
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 3
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45006: LD_ADDR_VAR 0 27
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: LD_INT 1
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: LD_INT 1
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: LD_INT 2
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: LD_INT 2
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 3
45239: NEG
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 3
45251: NEG
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45286: LD_ADDR_VAR 0 28
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: LD_INT 2
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: LD_INT 1
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: LD_INT 2
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: NEG
45498: PUSH
45499: LD_INT 3
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: LD_INT 3
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 3
45521: NEG
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 3
45533: NEG
45534: PUSH
45535: LD_INT 2
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45568: LD_ADDR_VAR 0 29
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 2
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 2
45734: NEG
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: NEG
45747: PUSH
45748: LD_INT 2
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 2
45758: NEG
45759: PUSH
45760: LD_INT 3
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 3
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: LD_INT 3
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 2
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 3
45812: NEG
45813: PUSH
45814: LD_INT 2
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45847: LD_ADDR_VAR 0 30
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 2
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 2
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: NEG
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: LD_INT 3
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 2
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 3
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: PUSH
46070: LD_INT 3
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 3
46090: NEG
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46125: LD_ADDR_VAR 0 31
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: LD_INT 2
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 2
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 2
46302: NEG
46303: PUSH
46304: LD_INT 2
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: LD_INT 3
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 3
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 3
46368: NEG
46369: PUSH
46370: LD_INT 2
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46403: LD_ADDR_VAR 0 32
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: LD_INT 2
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 2
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: LD_INT 2
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: LD_INT 2
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: NEG
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: LD_INT 3
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 3
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: LD_INT 3
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 3
46646: NEG
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46681: LD_ADDR_VAR 0 33
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: NEG
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: NEG
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: LD_INT 3
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 3
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: LD_INT 3
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 3
46925: NEG
46926: PUSH
46927: LD_INT 2
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46960: LD_ADDR_VAR 0 34
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: LD_INT 1
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: LD_INT 2
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: LD_INT 2
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: LD_INT 3
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 3
47174: PUSH
47175: LD_INT 2
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 2
47184: PUSH
47185: LD_INT 3
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 3
47205: NEG
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47240: LD_ADDR_VAR 0 35
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 2
47331: NEG
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47352: LD_ADDR_VAR 0 36
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 2
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47464: LD_ADDR_VAR 0 37
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47576: LD_ADDR_VAR 0 38
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 2
47667: NEG
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47688: LD_ADDR_VAR 0 39
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: LD_INT 1
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47800: LD_ADDR_VAR 0 40
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47912: LD_ADDR_VAR 0 41
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 2
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: LD_INT 2
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 2
48067: NEG
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: NEG
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: NEG
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: LD_INT 3
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 3
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 3
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 3
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 3
48155: PUSH
48156: LD_INT 3
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: LD_INT 3
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 3
48186: NEG
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 3
48197: NEG
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 3
48209: NEG
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 3
48221: NEG
48222: PUSH
48223: LD_INT 3
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48262: LD_ADDR_VAR 0 42
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 2
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 2
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: LD_INT 3
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 3
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 3
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 3
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 3
48508: PUSH
48509: LD_INT 3
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: LD_INT 3
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 3
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: LD_INT 3
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 3
48559: NEG
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 3
48571: NEG
48572: PUSH
48573: LD_INT 3
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48612: LD_ADDR_VAR 0 43
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 2
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 2
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 2
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 3
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: LD_INT 3
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 3
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 3
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: LD_INT 3
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 3
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: NEG
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 3
48908: NEG
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 3
48919: NEG
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48960: LD_ADDR_VAR 0 44
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: LD_INT 2
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 2
49126: NEG
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 2
49138: NEG
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: LD_INT 3
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 3
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 3
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 3
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 3
49203: PUSH
49204: LD_INT 3
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: LD_INT 3
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: NEG
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 3
49234: NEG
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 3
49245: NEG
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 3
49257: NEG
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 3
49269: NEG
49270: PUSH
49271: LD_INT 3
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49310: LD_ADDR_VAR 0 45
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: LD_INT 2
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: LD_INT 2
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: LD_INT 2
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: LD_INT 3
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 3
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 3
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 3
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: LD_INT 3
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: LD_INT 3
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: LD_INT 3
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 3
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 3
49607: NEG
49608: PUSH
49609: LD_INT 2
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 3
49619: NEG
49620: PUSH
49621: LD_INT 3
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49660: LD_ADDR_VAR 0 46
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: LD_INT 2
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: LD_INT 2
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 2
49837: NEG
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 3
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: LD_INT 3
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 3
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 3
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: LD_INT 3
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 3
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 3
49956: NEG
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 3
49967: NEG
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50008: LD_ADDR_VAR 0 47
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: LD_INT 2
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: LD_INT 2
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50159: LD_ADDR_VAR 0 48
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 2
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50306: LD_ADDR_VAR 0 49
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: LD_INT 1
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 2
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 2
50418: PUSH
50419: LD_INT 2
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50450: LD_ADDR_VAR 0 50
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 2
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 2
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 2
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50594: LD_ADDR_VAR 0 51
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50741: LD_ADDR_VAR 0 52
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: NEG
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: LD_INT 2
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: LD_INT 2
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50892: LD_ADDR_VAR 0 53
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 2
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 2
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 2
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: NEG
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: LD_INT 2
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51122: LD_ADDR_VAR 0 54
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: LD_INT 2
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: LD_INT 2
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: LD_INT 1
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 2
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 2
51298: NEG
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 2
51321: NEG
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51352: LD_ADDR_VAR 0 55
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: LD_INT 2
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 2
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: LD_INT 2
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 2
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: NEG
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: LD_INT 2
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51582: LD_ADDR_VAR 0 56
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 2
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 2
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: LD_INT 1
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 2
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 2
51758: NEG
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: NEG
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51812: LD_ADDR_VAR 0 57
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: LD_INT 2
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 2
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: LD_INT 2
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: NEG
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: NEG
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52042: LD_ADDR_VAR 0 58
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: LD_INT 2
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: LD_INT 2
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 2
52218: NEG
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 2
52229: NEG
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 2
52241: NEG
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52272: LD_ADDR_VAR 0 59
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52360: LD_ADDR_VAR 0 60
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52448: LD_ADDR_VAR 0 61
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: NEG
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52536: LD_ADDR_VAR 0 62
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52624: LD_ADDR_VAR 0 63
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52712: LD_ADDR_VAR 0 64
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: NEG
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: ST_TO_ADDR
// end ; 1 :
52800: GO 58697
52802: LD_INT 1
52804: DOUBLE
52805: EQUAL
52806: IFTRUE 52810
52808: GO 55433
52810: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52811: LD_ADDR_VAR 0 11
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 3
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: LD_INT 3
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: LIST
52854: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52855: LD_ADDR_VAR 0 12
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 3
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 3
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: LIST
52895: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52896: LD_ADDR_VAR 0 13
52900: PUSH
52901: LD_INT 3
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 3
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 2
52923: PUSH
52924: LD_INT 3
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: LIST
52935: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52936: LD_ADDR_VAR 0 14
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: LD_INT 3
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: LD_INT 3
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: LIST
52976: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52977: LD_ADDR_VAR 0 15
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 3
52995: NEG
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 3
53006: NEG
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: LIST
53020: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53021: LD_ADDR_VAR 0 16
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: LD_INT 3
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 3
53040: NEG
53041: PUSH
53042: LD_INT 2
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 3
53052: NEG
53053: PUSH
53054: LD_INT 3
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: LIST
53066: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53067: LD_ADDR_VAR 0 17
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: LD_INT 3
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: LD_INT 3
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: LD_INT 2
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: LIST
53110: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53111: LD_ADDR_VAR 0 18
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 3
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 3
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: LIST
53151: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53152: LD_ADDR_VAR 0 19
53156: PUSH
53157: LD_INT 3
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 3
53169: PUSH
53170: LD_INT 3
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: LD_INT 3
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: LIST
53191: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53192: LD_ADDR_VAR 0 20
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: LD_INT 3
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: LD_INT 3
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: LIST
53232: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53233: LD_ADDR_VAR 0 21
53237: PUSH
53238: LD_INT 2
53240: NEG
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 3
53251: NEG
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 3
53262: NEG
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: LIST
53276: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53277: LD_ADDR_VAR 0 22
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: LD_INT 3
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 3
53296: NEG
53297: PUSH
53298: LD_INT 2
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 3
53308: NEG
53309: PUSH
53310: LD_INT 3
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: LIST
53322: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53323: LD_ADDR_VAR 0 23
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 3
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: LD_INT 4
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: LD_INT 3
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: LIST
53366: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53367: LD_ADDR_VAR 0 24
53371: PUSH
53372: LD_INT 3
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 4
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: LIST
53407: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53408: LD_ADDR_VAR 0 25
53412: PUSH
53413: LD_INT 3
53415: PUSH
53416: LD_INT 3
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 4
53425: PUSH
53426: LD_INT 3
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 3
53435: PUSH
53436: LD_INT 4
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: LIST
53447: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53448: LD_ADDR_VAR 0 26
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: LD_INT 3
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: LD_INT 4
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: LD_INT 3
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: LIST
53488: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53489: LD_ADDR_VAR 0 27
53493: PUSH
53494: LD_INT 3
53496: NEG
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 3
53507: NEG
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 4
53518: NEG
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: LIST
53532: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53533: LD_ADDR_VAR 0 28
53537: PUSH
53538: LD_INT 3
53540: NEG
53541: PUSH
53542: LD_INT 3
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 3
53552: NEG
53553: PUSH
53554: LD_INT 4
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 4
53564: NEG
53565: PUSH
53566: LD_INT 3
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: LIST
53578: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53579: LD_ADDR_VAR 0 29
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 3
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 3
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: LD_INT 4
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: LD_INT 4
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: LD_INT 3
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: LD_INT 5
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: LD_INT 5
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: LD_INT 4
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: LD_INT 6
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 6
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: LD_INT 5
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53734: LD_ADDR_VAR 0 30
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 3
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 3
53762: PUSH
53763: LD_INT 1
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 3
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 4
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 4
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 4
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 5
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 5
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 5
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 6
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 6
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53877: LD_ADDR_VAR 0 31
53881: PUSH
53882: LD_INT 3
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 3
53894: PUSH
53895: LD_INT 3
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: LD_INT 3
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 4
53914: PUSH
53915: LD_INT 3
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 4
53924: PUSH
53925: LD_INT 4
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 3
53934: PUSH
53935: LD_INT 4
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 5
53944: PUSH
53945: LD_INT 4
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 5
53954: PUSH
53955: LD_INT 5
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 4
53964: PUSH
53965: LD_INT 5
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 6
53974: PUSH
53975: LD_INT 5
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 6
53984: PUSH
53985: LD_INT 6
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 5
53994: PUSH
53995: LD_INT 6
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54016: LD_ADDR_VAR 0 32
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 3
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 3
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: LD_INT 2
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: LD_INT 4
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: LD_INT 4
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 3
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: LD_INT 5
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 5
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: LD_INT 4
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 6
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: LD_INT 6
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: LD_INT 5
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54159: LD_ADDR_VAR 0 33
54163: PUSH
54164: LD_INT 2
54166: NEG
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 3
54177: NEG
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 3
54188: NEG
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 3
54200: NEG
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 4
54211: NEG
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 4
54222: NEG
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 4
54234: NEG
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 5
54245: NEG
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 5
54256: NEG
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 5
54268: NEG
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 6
54279: NEG
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 6
54290: NEG
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54314: LD_ADDR_VAR 0 34
54318: PUSH
54319: LD_INT 2
54321: NEG
54322: PUSH
54323: LD_INT 3
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 3
54333: NEG
54334: PUSH
54335: LD_INT 2
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 3
54345: NEG
54346: PUSH
54347: LD_INT 3
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 3
54357: NEG
54358: PUSH
54359: LD_INT 4
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 4
54369: NEG
54370: PUSH
54371: LD_INT 3
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 4
54381: NEG
54382: PUSH
54383: LD_INT 4
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 4
54393: NEG
54394: PUSH
54395: LD_INT 5
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 5
54405: NEG
54406: PUSH
54407: LD_INT 4
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 5
54417: NEG
54418: PUSH
54419: LD_INT 5
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 5
54429: NEG
54430: PUSH
54431: LD_INT 6
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 6
54441: NEG
54442: PUSH
54443: LD_INT 5
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 6
54453: NEG
54454: PUSH
54455: LD_INT 6
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54477: LD_ADDR_VAR 0 41
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: LD_INT 3
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: LD_INT 2
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: LIST
54520: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54521: LD_ADDR_VAR 0 42
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 3
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: LIST
54561: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54562: LD_ADDR_VAR 0 43
54566: PUSH
54567: LD_INT 2
54569: PUSH
54570: LD_INT 2
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 3
54579: PUSH
54580: LD_INT 2
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 2
54589: PUSH
54590: LD_INT 3
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: LIST
54601: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54602: LD_ADDR_VAR 0 44
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_INT 2
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 3
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 2
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: LIST
54642: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54643: LD_ADDR_VAR 0 45
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 2
54661: NEG
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 3
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: LIST
54686: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54687: LD_ADDR_VAR 0 46
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 3
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 3
54718: NEG
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: LIST
54732: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54733: LD_ADDR_VAR 0 47
54737: PUSH
54738: LD_INT 2
54740: NEG
54741: PUSH
54742: LD_INT 3
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: LD_INT 3
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54766: LD_ADDR_VAR 0 48
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54797: LD_ADDR_VAR 0 49
54801: PUSH
54802: LD_INT 3
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 3
54814: PUSH
54815: LD_INT 2
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54826: LD_ADDR_VAR 0 50
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: LD_INT 3
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: LD_INT 3
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54855: LD_ADDR_VAR 0 51
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: LD_INT 2
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54886: LD_ADDR_VAR 0 52
54890: PUSH
54891: LD_INT 3
54893: NEG
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 3
54905: NEG
54906: PUSH
54907: LD_INT 2
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54919: LD_ADDR_VAR 0 53
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: LD_INT 3
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 3
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: LIST
54962: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54963: LD_ADDR_VAR 0 54
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: LD_INT 1
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 3
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 3
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: LIST
55003: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55004: LD_ADDR_VAR 0 55
55008: PUSH
55009: LD_INT 3
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: LD_INT 3
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: LD_INT 3
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: LIST
55043: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55044: LD_ADDR_VAR 0 56
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: LD_INT 3
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 3
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: LIST
55084: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55085: LD_ADDR_VAR 0 57
55089: PUSH
55090: LD_INT 2
55092: NEG
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 3
55103: NEG
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 3
55114: NEG
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: LIST
55128: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55129: LD_ADDR_VAR 0 58
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: LD_INT 3
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 3
55148: NEG
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 3
55160: NEG
55161: PUSH
55162: LD_INT 3
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: LIST
55174: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55175: LD_ADDR_VAR 0 59
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: LD_INT 2
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: LIST
55218: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55219: LD_ADDR_VAR 0 60
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: LIST
55259: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55260: LD_ADDR_VAR 0 61
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: LIST
55299: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55300: LD_ADDR_VAR 0 62
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 2
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: LIST
55340: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55341: LD_ADDR_VAR 0 63
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: LIST
55384: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55385: LD_ADDR_VAR 0 64
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 2
55404: NEG
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: NEG
55417: PUSH
55418: LD_INT 2
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: LIST
55430: ST_TO_ADDR
// end ; 2 :
55431: GO 58697
55433: LD_INT 2
55435: DOUBLE
55436: EQUAL
55437: IFTRUE 55441
55439: GO 58696
55441: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55442: LD_ADDR_VAR 0 29
55446: PUSH
55447: LD_INT 4
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 4
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 5
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 5
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 4
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 3
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 3
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 3
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 5
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 3
55542: PUSH
55543: LD_INT 3
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 3
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 4
55562: PUSH
55563: LD_INT 3
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 4
55572: PUSH
55573: LD_INT 4
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 3
55582: PUSH
55583: LD_INT 4
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: LD_INT 3
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: PUSH
55603: LD_INT 2
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 4
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: LD_INT 4
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 4
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: LD_INT 3
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 4
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: LD_INT 5
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 5
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 4
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: LD_INT 3
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: LD_INT 5
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: LD_INT 3
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 3
55725: NEG
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 3
55736: NEG
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 3
55770: NEG
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 4
55781: NEG
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 4
55792: NEG
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 4
55804: NEG
55805: PUSH
55806: LD_INT 2
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 4
55827: NEG
55828: PUSH
55829: LD_INT 4
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 4
55839: NEG
55840: PUSH
55841: LD_INT 5
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 3
55851: NEG
55852: PUSH
55853: LD_INT 4
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 3
55863: NEG
55864: PUSH
55865: LD_INT 3
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 4
55875: NEG
55876: PUSH
55877: LD_INT 3
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 5
55887: NEG
55888: PUSH
55889: LD_INT 4
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 5
55899: NEG
55900: PUSH
55901: LD_INT 5
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: LD_INT 5
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 5
55923: NEG
55924: PUSH
55925: LD_INT 3
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55980: LD_ADDR_VAR 0 30
55984: PUSH
55985: LD_INT 4
55987: PUSH
55988: LD_INT 4
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 4
55997: PUSH
55998: LD_INT 3
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 5
56007: PUSH
56008: LD_INT 4
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 5
56017: PUSH
56018: LD_INT 5
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 4
56027: PUSH
56028: LD_INT 5
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 3
56037: PUSH
56038: LD_INT 4
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 3
56047: PUSH
56048: LD_INT 3
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 5
56057: PUSH
56058: LD_INT 3
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 3
56067: PUSH
56068: LD_INT 5
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: LD_INT 3
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 3
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: LD_INT 4
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 4
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: LD_INT 3
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: LD_INT 4
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 2
56159: NEG
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 4
56170: NEG
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 4
56181: NEG
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 3
56193: NEG
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 3
56204: NEG
56205: PUSH
56206: LD_INT 1
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 4
56215: NEG
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 5
56226: NEG
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 5
56237: NEG
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 5
56249: NEG
56250: PUSH
56251: LD_INT 2
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 3
56261: NEG
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: LD_INT 3
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 3
56284: NEG
56285: PUSH
56286: LD_INT 4
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: LD_INT 3
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 2
56308: NEG
56309: PUSH
56310: LD_INT 2
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 3
56320: NEG
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 4
56332: NEG
56333: PUSH
56334: LD_INT 3
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 4
56344: NEG
56345: PUSH
56346: LD_INT 4
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: LD_INT 4
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 4
56368: NEG
56369: PUSH
56370: LD_INT 2
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: LD_INT 4
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 5
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: LD_INT 4
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: LD_INT 3
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: LD_INT 3
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: LD_INT 4
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: LD_INT 5
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 2
56459: PUSH
56460: LD_INT 3
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: LD_INT 5
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56527: LD_ADDR_VAR 0 31
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: LD_INT 4
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: LD_INT 3
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: LD_INT 4
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: LD_INT 5
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: LD_INT 5
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: LD_INT 4
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: LD_INT 3
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: LD_INT 5
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: LD_INT 3
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 3
56627: NEG
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 3
56638: NEG
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 3
56672: NEG
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 4
56683: NEG
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 4
56694: NEG
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 4
56706: NEG
56707: PUSH
56708: LD_INT 2
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 4
56729: NEG
56730: PUSH
56731: LD_INT 4
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 4
56741: NEG
56742: PUSH
56743: LD_INT 5
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 3
56753: NEG
56754: PUSH
56755: LD_INT 4
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 3
56765: NEG
56766: PUSH
56767: LD_INT 3
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 4
56777: NEG
56778: PUSH
56779: LD_INT 3
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 5
56789: NEG
56790: PUSH
56791: LD_INT 4
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 5
56801: NEG
56802: PUSH
56803: LD_INT 5
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 3
56813: NEG
56814: PUSH
56815: LD_INT 5
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 5
56825: NEG
56826: PUSH
56827: LD_INT 3
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: LD_INT 3
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: LD_INT 4
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 3
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: LD_INT 3
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: LD_INT 4
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: LD_INT 2
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: LD_INT 4
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 4
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 4
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 5
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 5
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 4
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 3
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 3
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 3
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 5
57022: PUSH
57023: LD_INT 2
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57077: LD_ADDR_VAR 0 32
57081: PUSH
57082: LD_INT 4
57084: NEG
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 4
57095: NEG
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 3
57107: NEG
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 3
57118: NEG
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 4
57129: NEG
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 5
57140: NEG
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 5
57151: NEG
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 5
57163: NEG
57164: PUSH
57165: LD_INT 2
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 3
57175: NEG
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 3
57186: NEG
57187: PUSH
57188: LD_INT 3
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 3
57198: NEG
57199: PUSH
57200: LD_INT 4
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: NEG
57211: PUSH
57212: LD_INT 3
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 3
57234: NEG
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 4
57246: NEG
57247: PUSH
57248: LD_INT 3
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 4
57258: NEG
57259: PUSH
57260: LD_INT 4
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 2
57270: NEG
57271: PUSH
57272: LD_INT 4
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 4
57282: NEG
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: LD_INT 4
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 5
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 4
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: LD_INT 3
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: LD_INT 3
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: LD_INT 4
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: LD_INT 5
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: LD_INT 3
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: LD_INT 5
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 3
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 3
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 4
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 4
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 3
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 2
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 2
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 4
57479: PUSH
57480: LD_INT 2
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 4
57489: PUSH
57490: LD_INT 4
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 4
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 5
57509: PUSH
57510: LD_INT 4
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 5
57519: PUSH
57520: LD_INT 5
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 4
57529: PUSH
57530: LD_INT 5
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 3
57539: PUSH
57540: LD_INT 4
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 3
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 5
57559: PUSH
57560: LD_INT 3
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 3
57569: PUSH
57570: LD_INT 5
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57624: LD_ADDR_VAR 0 33
57628: PUSH
57629: LD_INT 4
57631: NEG
57632: PUSH
57633: LD_INT 4
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 4
57643: NEG
57644: PUSH
57645: LD_INT 5
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 3
57655: NEG
57656: PUSH
57657: LD_INT 4
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 3
57667: NEG
57668: PUSH
57669: LD_INT 3
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 4
57679: NEG
57680: PUSH
57681: LD_INT 3
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 5
57691: NEG
57692: PUSH
57693: LD_INT 4
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 5
57703: NEG
57704: PUSH
57705: LD_INT 5
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 3
57715: NEG
57716: PUSH
57717: LD_INT 5
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 5
57727: NEG
57728: PUSH
57729: LD_INT 3
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: LD_INT 3
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: LD_INT 4
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: LD_INT 3
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 2
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: LD_INT 2
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: LD_INT 3
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: LD_INT 4
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 2
57818: PUSH
57819: LD_INT 2
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 2
57829: NEG
57830: PUSH
57831: LD_INT 4
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 4
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 4
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 5
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 5
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 4
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 3
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 3
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 3
57913: PUSH
57914: LD_INT 2
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 5
57924: PUSH
57925: LD_INT 2
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 3
57934: PUSH
57935: LD_INT 3
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 3
57944: PUSH
57945: LD_INT 2
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 4
57954: PUSH
57955: LD_INT 3
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 4
57964: PUSH
57965: LD_INT 4
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 3
57974: PUSH
57975: LD_INT 4
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 2
57984: PUSH
57985: LD_INT 3
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 2
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 4
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: LD_INT 4
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: LD_INT 4
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: LD_INT 3
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: LD_INT 4
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: LD_INT 5
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: LD_INT 5
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: LD_INT 4
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: NEG
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: LD_INT 5
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 2
58106: NEG
58107: PUSH
58108: LD_INT 3
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58162: LD_ADDR_VAR 0 34
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 4
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: LD_INT 5
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: LD_INT 4
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: LD_INT 3
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: LD_INT 3
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: LD_INT 4
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 5
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: LD_INT 3
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 2
58259: NEG
58260: PUSH
58261: LD_INT 5
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 3
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 3
58281: PUSH
58282: LD_INT 1
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 4
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 4
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 2
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: LD_INT 2
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 4
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 4
58364: PUSH
58365: LD_INT 4
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 4
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 5
58384: PUSH
58385: LD_INT 4
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 5
58394: PUSH
58395: LD_INT 5
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 4
58404: PUSH
58405: LD_INT 5
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 3
58414: PUSH
58415: LD_INT 4
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 3
58424: PUSH
58425: LD_INT 3
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 5
58434: PUSH
58435: LD_INT 3
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: LD_INT 5
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: LD_INT 3
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: LD_INT 2
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: LD_INT 3
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: LD_INT 4
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: LD_INT 4
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 3
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: LD_INT 2
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: LD_INT 4
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: LD_INT 2
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 4
58547: NEG
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 4
58558: NEG
58559: PUSH
58560: LD_INT 1
58562: NEG
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 3
58570: NEG
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 3
58581: NEG
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 4
58592: NEG
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 5
58603: NEG
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 5
58614: NEG
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 5
58626: NEG
58627: PUSH
58628: LD_INT 2
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 3
58638: NEG
58639: PUSH
58640: LD_INT 2
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: ST_TO_ADDR
// end ; end ;
58694: GO 58697
58696: POP
// case btype of b_depot , b_warehouse :
58697: LD_VAR 0 1
58701: PUSH
58702: LD_INT 0
58704: DOUBLE
58705: EQUAL
58706: IFTRUE 58716
58708: LD_INT 1
58710: DOUBLE
58711: EQUAL
58712: IFTRUE 58716
58714: GO 58917
58716: POP
// case nation of nation_american :
58717: LD_VAR 0 5
58721: PUSH
58722: LD_INT 1
58724: DOUBLE
58725: EQUAL
58726: IFTRUE 58730
58728: GO 58786
58730: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58731: LD_ADDR_VAR 0 9
58735: PUSH
58736: LD_VAR 0 11
58740: PUSH
58741: LD_VAR 0 12
58745: PUSH
58746: LD_VAR 0 13
58750: PUSH
58751: LD_VAR 0 14
58755: PUSH
58756: LD_VAR 0 15
58760: PUSH
58761: LD_VAR 0 16
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: PUSH
58774: LD_VAR 0 4
58778: PUSH
58779: LD_INT 1
58781: PLUS
58782: ARRAY
58783: ST_TO_ADDR
58784: GO 58915
58786: LD_INT 2
58788: DOUBLE
58789: EQUAL
58790: IFTRUE 58794
58792: GO 58850
58794: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58795: LD_ADDR_VAR 0 9
58799: PUSH
58800: LD_VAR 0 17
58804: PUSH
58805: LD_VAR 0 18
58809: PUSH
58810: LD_VAR 0 19
58814: PUSH
58815: LD_VAR 0 20
58819: PUSH
58820: LD_VAR 0 21
58824: PUSH
58825: LD_VAR 0 22
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: PUSH
58838: LD_VAR 0 4
58842: PUSH
58843: LD_INT 1
58845: PLUS
58846: ARRAY
58847: ST_TO_ADDR
58848: GO 58915
58850: LD_INT 3
58852: DOUBLE
58853: EQUAL
58854: IFTRUE 58858
58856: GO 58914
58858: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58859: LD_ADDR_VAR 0 9
58863: PUSH
58864: LD_VAR 0 23
58868: PUSH
58869: LD_VAR 0 24
58873: PUSH
58874: LD_VAR 0 25
58878: PUSH
58879: LD_VAR 0 26
58883: PUSH
58884: LD_VAR 0 27
58888: PUSH
58889: LD_VAR 0 28
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: PUSH
58902: LD_VAR 0 4
58906: PUSH
58907: LD_INT 1
58909: PLUS
58910: ARRAY
58911: ST_TO_ADDR
58912: GO 58915
58914: POP
58915: GO 59470
58917: LD_INT 2
58919: DOUBLE
58920: EQUAL
58921: IFTRUE 58931
58923: LD_INT 3
58925: DOUBLE
58926: EQUAL
58927: IFTRUE 58931
58929: GO 58987
58931: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58932: LD_ADDR_VAR 0 9
58936: PUSH
58937: LD_VAR 0 29
58941: PUSH
58942: LD_VAR 0 30
58946: PUSH
58947: LD_VAR 0 31
58951: PUSH
58952: LD_VAR 0 32
58956: PUSH
58957: LD_VAR 0 33
58961: PUSH
58962: LD_VAR 0 34
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: PUSH
58975: LD_VAR 0 4
58979: PUSH
58980: LD_INT 1
58982: PLUS
58983: ARRAY
58984: ST_TO_ADDR
58985: GO 59470
58987: LD_INT 16
58989: DOUBLE
58990: EQUAL
58991: IFTRUE 59049
58993: LD_INT 17
58995: DOUBLE
58996: EQUAL
58997: IFTRUE 59049
58999: LD_INT 18
59001: DOUBLE
59002: EQUAL
59003: IFTRUE 59049
59005: LD_INT 19
59007: DOUBLE
59008: EQUAL
59009: IFTRUE 59049
59011: LD_INT 22
59013: DOUBLE
59014: EQUAL
59015: IFTRUE 59049
59017: LD_INT 20
59019: DOUBLE
59020: EQUAL
59021: IFTRUE 59049
59023: LD_INT 21
59025: DOUBLE
59026: EQUAL
59027: IFTRUE 59049
59029: LD_INT 23
59031: DOUBLE
59032: EQUAL
59033: IFTRUE 59049
59035: LD_INT 24
59037: DOUBLE
59038: EQUAL
59039: IFTRUE 59049
59041: LD_INT 25
59043: DOUBLE
59044: EQUAL
59045: IFTRUE 59049
59047: GO 59105
59049: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59050: LD_ADDR_VAR 0 9
59054: PUSH
59055: LD_VAR 0 35
59059: PUSH
59060: LD_VAR 0 36
59064: PUSH
59065: LD_VAR 0 37
59069: PUSH
59070: LD_VAR 0 38
59074: PUSH
59075: LD_VAR 0 39
59079: PUSH
59080: LD_VAR 0 40
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: PUSH
59093: LD_VAR 0 4
59097: PUSH
59098: LD_INT 1
59100: PLUS
59101: ARRAY
59102: ST_TO_ADDR
59103: GO 59470
59105: LD_INT 6
59107: DOUBLE
59108: EQUAL
59109: IFTRUE 59161
59111: LD_INT 7
59113: DOUBLE
59114: EQUAL
59115: IFTRUE 59161
59117: LD_INT 8
59119: DOUBLE
59120: EQUAL
59121: IFTRUE 59161
59123: LD_INT 13
59125: DOUBLE
59126: EQUAL
59127: IFTRUE 59161
59129: LD_INT 12
59131: DOUBLE
59132: EQUAL
59133: IFTRUE 59161
59135: LD_INT 15
59137: DOUBLE
59138: EQUAL
59139: IFTRUE 59161
59141: LD_INT 11
59143: DOUBLE
59144: EQUAL
59145: IFTRUE 59161
59147: LD_INT 14
59149: DOUBLE
59150: EQUAL
59151: IFTRUE 59161
59153: LD_INT 10
59155: DOUBLE
59156: EQUAL
59157: IFTRUE 59161
59159: GO 59217
59161: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59162: LD_ADDR_VAR 0 9
59166: PUSH
59167: LD_VAR 0 41
59171: PUSH
59172: LD_VAR 0 42
59176: PUSH
59177: LD_VAR 0 43
59181: PUSH
59182: LD_VAR 0 44
59186: PUSH
59187: LD_VAR 0 45
59191: PUSH
59192: LD_VAR 0 46
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: PUSH
59205: LD_VAR 0 4
59209: PUSH
59210: LD_INT 1
59212: PLUS
59213: ARRAY
59214: ST_TO_ADDR
59215: GO 59470
59217: LD_INT 36
59219: DOUBLE
59220: EQUAL
59221: IFTRUE 59225
59223: GO 59281
59225: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59226: LD_ADDR_VAR 0 9
59230: PUSH
59231: LD_VAR 0 47
59235: PUSH
59236: LD_VAR 0 48
59240: PUSH
59241: LD_VAR 0 49
59245: PUSH
59246: LD_VAR 0 50
59250: PUSH
59251: LD_VAR 0 51
59255: PUSH
59256: LD_VAR 0 52
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: PUSH
59269: LD_VAR 0 4
59273: PUSH
59274: LD_INT 1
59276: PLUS
59277: ARRAY
59278: ST_TO_ADDR
59279: GO 59470
59281: LD_INT 4
59283: DOUBLE
59284: EQUAL
59285: IFTRUE 59307
59287: LD_INT 5
59289: DOUBLE
59290: EQUAL
59291: IFTRUE 59307
59293: LD_INT 34
59295: DOUBLE
59296: EQUAL
59297: IFTRUE 59307
59299: LD_INT 37
59301: DOUBLE
59302: EQUAL
59303: IFTRUE 59307
59305: GO 59363
59307: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59308: LD_ADDR_VAR 0 9
59312: PUSH
59313: LD_VAR 0 53
59317: PUSH
59318: LD_VAR 0 54
59322: PUSH
59323: LD_VAR 0 55
59327: PUSH
59328: LD_VAR 0 56
59332: PUSH
59333: LD_VAR 0 57
59337: PUSH
59338: LD_VAR 0 58
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: PUSH
59351: LD_VAR 0 4
59355: PUSH
59356: LD_INT 1
59358: PLUS
59359: ARRAY
59360: ST_TO_ADDR
59361: GO 59470
59363: LD_INT 31
59365: DOUBLE
59366: EQUAL
59367: IFTRUE 59413
59369: LD_INT 32
59371: DOUBLE
59372: EQUAL
59373: IFTRUE 59413
59375: LD_INT 33
59377: DOUBLE
59378: EQUAL
59379: IFTRUE 59413
59381: LD_INT 27
59383: DOUBLE
59384: EQUAL
59385: IFTRUE 59413
59387: LD_INT 26
59389: DOUBLE
59390: EQUAL
59391: IFTRUE 59413
59393: LD_INT 28
59395: DOUBLE
59396: EQUAL
59397: IFTRUE 59413
59399: LD_INT 29
59401: DOUBLE
59402: EQUAL
59403: IFTRUE 59413
59405: LD_INT 30
59407: DOUBLE
59408: EQUAL
59409: IFTRUE 59413
59411: GO 59469
59413: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59414: LD_ADDR_VAR 0 9
59418: PUSH
59419: LD_VAR 0 59
59423: PUSH
59424: LD_VAR 0 60
59428: PUSH
59429: LD_VAR 0 61
59433: PUSH
59434: LD_VAR 0 62
59438: PUSH
59439: LD_VAR 0 63
59443: PUSH
59444: LD_VAR 0 64
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: PUSH
59457: LD_VAR 0 4
59461: PUSH
59462: LD_INT 1
59464: PLUS
59465: ARRAY
59466: ST_TO_ADDR
59467: GO 59470
59469: POP
// temp_list2 = [ ] ;
59470: LD_ADDR_VAR 0 10
59474: PUSH
59475: EMPTY
59476: ST_TO_ADDR
// for i in temp_list do
59477: LD_ADDR_VAR 0 8
59481: PUSH
59482: LD_VAR 0 9
59486: PUSH
59487: FOR_IN
59488: IFFALSE 59540
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59490: LD_ADDR_VAR 0 10
59494: PUSH
59495: LD_VAR 0 10
59499: PUSH
59500: LD_VAR 0 8
59504: PUSH
59505: LD_INT 1
59507: ARRAY
59508: PUSH
59509: LD_VAR 0 2
59513: PLUS
59514: PUSH
59515: LD_VAR 0 8
59519: PUSH
59520: LD_INT 2
59522: ARRAY
59523: PUSH
59524: LD_VAR 0 3
59528: PLUS
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: EMPTY
59535: LIST
59536: ADD
59537: ST_TO_ADDR
59538: GO 59487
59540: POP
59541: POP
// result = temp_list2 ;
59542: LD_ADDR_VAR 0 7
59546: PUSH
59547: LD_VAR 0 10
59551: ST_TO_ADDR
// end ;
59552: LD_VAR 0 7
59556: RET
// export function EnemyInRange ( unit , dist ) ; begin
59557: LD_INT 0
59559: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59560: LD_ADDR_VAR 0 3
59564: PUSH
59565: LD_VAR 0 1
59569: PPUSH
59570: CALL_OW 255
59574: PPUSH
59575: LD_VAR 0 1
59579: PPUSH
59580: CALL_OW 250
59584: PPUSH
59585: LD_VAR 0 1
59589: PPUSH
59590: CALL_OW 251
59594: PPUSH
59595: LD_VAR 0 2
59599: PPUSH
59600: CALL 32952 0 4
59604: PUSH
59605: LD_INT 4
59607: ARRAY
59608: ST_TO_ADDR
// end ;
59609: LD_VAR 0 3
59613: RET
// export function PlayerSeeMe ( unit ) ; begin
59614: LD_INT 0
59616: PPUSH
// result := See ( your_side , unit ) ;
59617: LD_ADDR_VAR 0 2
59621: PUSH
59622: LD_OWVAR 2
59626: PPUSH
59627: LD_VAR 0 1
59631: PPUSH
59632: CALL_OW 292
59636: ST_TO_ADDR
// end ;
59637: LD_VAR 0 2
59641: RET
// export function ReverseDir ( unit ) ; begin
59642: LD_INT 0
59644: PPUSH
// if not unit then
59645: LD_VAR 0 1
59649: NOT
59650: IFFALSE 59654
// exit ;
59652: GO 59677
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59654: LD_ADDR_VAR 0 2
59658: PUSH
59659: LD_VAR 0 1
59663: PPUSH
59664: CALL_OW 254
59668: PUSH
59669: LD_INT 3
59671: PLUS
59672: PUSH
59673: LD_INT 6
59675: MOD
59676: ST_TO_ADDR
// end ;
59677: LD_VAR 0 2
59681: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59682: LD_INT 0
59684: PPUSH
59685: PPUSH
59686: PPUSH
59687: PPUSH
59688: PPUSH
// if not hexes then
59689: LD_VAR 0 2
59693: NOT
59694: IFFALSE 59698
// exit ;
59696: GO 59846
// dist := 9999 ;
59698: LD_ADDR_VAR 0 5
59702: PUSH
59703: LD_INT 9999
59705: ST_TO_ADDR
// for i = 1 to hexes do
59706: LD_ADDR_VAR 0 4
59710: PUSH
59711: DOUBLE
59712: LD_INT 1
59714: DEC
59715: ST_TO_ADDR
59716: LD_VAR 0 2
59720: PUSH
59721: FOR_TO
59722: IFFALSE 59834
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59724: LD_VAR 0 1
59728: PPUSH
59729: LD_VAR 0 2
59733: PUSH
59734: LD_VAR 0 4
59738: ARRAY
59739: PUSH
59740: LD_INT 1
59742: ARRAY
59743: PPUSH
59744: LD_VAR 0 2
59748: PUSH
59749: LD_VAR 0 4
59753: ARRAY
59754: PUSH
59755: LD_INT 2
59757: ARRAY
59758: PPUSH
59759: CALL_OW 297
59763: PUSH
59764: LD_VAR 0 5
59768: LESS
59769: IFFALSE 59832
// begin hex := hexes [ i ] ;
59771: LD_ADDR_VAR 0 7
59775: PUSH
59776: LD_VAR 0 2
59780: PUSH
59781: LD_VAR 0 4
59785: ARRAY
59786: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59787: LD_ADDR_VAR 0 5
59791: PUSH
59792: LD_VAR 0 1
59796: PPUSH
59797: LD_VAR 0 2
59801: PUSH
59802: LD_VAR 0 4
59806: ARRAY
59807: PUSH
59808: LD_INT 1
59810: ARRAY
59811: PPUSH
59812: LD_VAR 0 2
59816: PUSH
59817: LD_VAR 0 4
59821: ARRAY
59822: PUSH
59823: LD_INT 2
59825: ARRAY
59826: PPUSH
59827: CALL_OW 297
59831: ST_TO_ADDR
// end ; end ;
59832: GO 59721
59834: POP
59835: POP
// result := hex ;
59836: LD_ADDR_VAR 0 3
59840: PUSH
59841: LD_VAR 0 7
59845: ST_TO_ADDR
// end ;
59846: LD_VAR 0 3
59850: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59851: LD_INT 0
59853: PPUSH
59854: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59855: LD_VAR 0 1
59859: NOT
59860: PUSH
59861: LD_VAR 0 1
59865: PUSH
59866: LD_INT 21
59868: PUSH
59869: LD_INT 2
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 23
59878: PUSH
59879: LD_INT 2
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PPUSH
59890: CALL_OW 69
59894: IN
59895: NOT
59896: OR
59897: IFFALSE 59901
// exit ;
59899: GO 59948
// for i = 1 to 3 do
59901: LD_ADDR_VAR 0 3
59905: PUSH
59906: DOUBLE
59907: LD_INT 1
59909: DEC
59910: ST_TO_ADDR
59911: LD_INT 3
59913: PUSH
59914: FOR_TO
59915: IFFALSE 59946
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59917: LD_VAR 0 1
59921: PPUSH
59922: CALL_OW 250
59926: PPUSH
59927: LD_VAR 0 1
59931: PPUSH
59932: CALL_OW 251
59936: PPUSH
59937: LD_INT 1
59939: PPUSH
59940: CALL_OW 453
59944: GO 59914
59946: POP
59947: POP
// end ;
59948: LD_VAR 0 2
59952: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59953: LD_INT 0
59955: PPUSH
59956: PPUSH
59957: PPUSH
59958: PPUSH
59959: PPUSH
59960: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59961: LD_VAR 0 1
59965: NOT
59966: PUSH
59967: LD_VAR 0 2
59971: NOT
59972: OR
59973: PUSH
59974: LD_VAR 0 1
59978: PPUSH
59979: CALL_OW 314
59983: OR
59984: IFFALSE 59988
// exit ;
59986: GO 60429
// x := GetX ( enemy_unit ) ;
59988: LD_ADDR_VAR 0 7
59992: PUSH
59993: LD_VAR 0 2
59997: PPUSH
59998: CALL_OW 250
60002: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60003: LD_ADDR_VAR 0 8
60007: PUSH
60008: LD_VAR 0 2
60012: PPUSH
60013: CALL_OW 251
60017: ST_TO_ADDR
// if not x or not y then
60018: LD_VAR 0 7
60022: NOT
60023: PUSH
60024: LD_VAR 0 8
60028: NOT
60029: OR
60030: IFFALSE 60034
// exit ;
60032: GO 60429
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60034: LD_ADDR_VAR 0 6
60038: PUSH
60039: LD_VAR 0 7
60043: PPUSH
60044: LD_INT 0
60046: PPUSH
60047: LD_INT 4
60049: PPUSH
60050: CALL_OW 272
60054: PUSH
60055: LD_VAR 0 8
60059: PPUSH
60060: LD_INT 0
60062: PPUSH
60063: LD_INT 4
60065: PPUSH
60066: CALL_OW 273
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_VAR 0 7
60079: PPUSH
60080: LD_INT 1
60082: PPUSH
60083: LD_INT 4
60085: PPUSH
60086: CALL_OW 272
60090: PUSH
60091: LD_VAR 0 8
60095: PPUSH
60096: LD_INT 1
60098: PPUSH
60099: LD_INT 4
60101: PPUSH
60102: CALL_OW 273
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_VAR 0 7
60115: PPUSH
60116: LD_INT 2
60118: PPUSH
60119: LD_INT 4
60121: PPUSH
60122: CALL_OW 272
60126: PUSH
60127: LD_VAR 0 8
60131: PPUSH
60132: LD_INT 2
60134: PPUSH
60135: LD_INT 4
60137: PPUSH
60138: CALL_OW 273
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_VAR 0 7
60151: PPUSH
60152: LD_INT 3
60154: PPUSH
60155: LD_INT 4
60157: PPUSH
60158: CALL_OW 272
60162: PUSH
60163: LD_VAR 0 8
60167: PPUSH
60168: LD_INT 3
60170: PPUSH
60171: LD_INT 4
60173: PPUSH
60174: CALL_OW 273
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_VAR 0 7
60187: PPUSH
60188: LD_INT 4
60190: PPUSH
60191: LD_INT 4
60193: PPUSH
60194: CALL_OW 272
60198: PUSH
60199: LD_VAR 0 8
60203: PPUSH
60204: LD_INT 4
60206: PPUSH
60207: LD_INT 4
60209: PPUSH
60210: CALL_OW 273
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_VAR 0 7
60223: PPUSH
60224: LD_INT 5
60226: PPUSH
60227: LD_INT 4
60229: PPUSH
60230: CALL_OW 272
60234: PUSH
60235: LD_VAR 0 8
60239: PPUSH
60240: LD_INT 5
60242: PPUSH
60243: LD_INT 4
60245: PPUSH
60246: CALL_OW 273
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: ST_TO_ADDR
// for i = tmp downto 1 do
60263: LD_ADDR_VAR 0 4
60267: PUSH
60268: DOUBLE
60269: LD_VAR 0 6
60273: INC
60274: ST_TO_ADDR
60275: LD_INT 1
60277: PUSH
60278: FOR_DOWNTO
60279: IFFALSE 60380
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60281: LD_VAR 0 6
60285: PUSH
60286: LD_VAR 0 4
60290: ARRAY
60291: PUSH
60292: LD_INT 1
60294: ARRAY
60295: PPUSH
60296: LD_VAR 0 6
60300: PUSH
60301: LD_VAR 0 4
60305: ARRAY
60306: PUSH
60307: LD_INT 2
60309: ARRAY
60310: PPUSH
60311: CALL_OW 488
60315: NOT
60316: PUSH
60317: LD_VAR 0 6
60321: PUSH
60322: LD_VAR 0 4
60326: ARRAY
60327: PUSH
60328: LD_INT 1
60330: ARRAY
60331: PPUSH
60332: LD_VAR 0 6
60336: PUSH
60337: LD_VAR 0 4
60341: ARRAY
60342: PUSH
60343: LD_INT 2
60345: ARRAY
60346: PPUSH
60347: CALL_OW 428
60351: PUSH
60352: LD_INT 0
60354: NONEQUAL
60355: OR
60356: IFFALSE 60378
// tmp := Delete ( tmp , i ) ;
60358: LD_ADDR_VAR 0 6
60362: PUSH
60363: LD_VAR 0 6
60367: PPUSH
60368: LD_VAR 0 4
60372: PPUSH
60373: CALL_OW 3
60377: ST_TO_ADDR
60378: GO 60278
60380: POP
60381: POP
// j := GetClosestHex ( unit , tmp ) ;
60382: LD_ADDR_VAR 0 5
60386: PUSH
60387: LD_VAR 0 1
60391: PPUSH
60392: LD_VAR 0 6
60396: PPUSH
60397: CALL 59682 0 2
60401: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60402: LD_VAR 0 1
60406: PPUSH
60407: LD_VAR 0 5
60411: PUSH
60412: LD_INT 1
60414: ARRAY
60415: PPUSH
60416: LD_VAR 0 5
60420: PUSH
60421: LD_INT 2
60423: ARRAY
60424: PPUSH
60425: CALL_OW 111
// end ;
60429: LD_VAR 0 3
60433: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60434: LD_INT 0
60436: PPUSH
60437: PPUSH
60438: PPUSH
// uc_side = 0 ;
60439: LD_ADDR_OWVAR 20
60443: PUSH
60444: LD_INT 0
60446: ST_TO_ADDR
// uc_nation = 0 ;
60447: LD_ADDR_OWVAR 21
60451: PUSH
60452: LD_INT 0
60454: ST_TO_ADDR
// InitHc_All ( ) ;
60455: CALL_OW 584
// InitVc ;
60459: CALL_OW 20
// if mastodonts then
60463: LD_VAR 0 6
60467: IFFALSE 60534
// for i = 1 to mastodonts do
60469: LD_ADDR_VAR 0 11
60473: PUSH
60474: DOUBLE
60475: LD_INT 1
60477: DEC
60478: ST_TO_ADDR
60479: LD_VAR 0 6
60483: PUSH
60484: FOR_TO
60485: IFFALSE 60532
// begin vc_chassis := 31 ;
60487: LD_ADDR_OWVAR 37
60491: PUSH
60492: LD_INT 31
60494: ST_TO_ADDR
// vc_control := control_rider ;
60495: LD_ADDR_OWVAR 38
60499: PUSH
60500: LD_INT 4
60502: ST_TO_ADDR
// animal := CreateVehicle ;
60503: LD_ADDR_VAR 0 12
60507: PUSH
60508: CALL_OW 45
60512: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60513: LD_VAR 0 12
60517: PPUSH
60518: LD_VAR 0 8
60522: PPUSH
60523: LD_INT 0
60525: PPUSH
60526: CALL 62722 0 3
// end ;
60530: GO 60484
60532: POP
60533: POP
// if horses then
60534: LD_VAR 0 5
60538: IFFALSE 60605
// for i = 1 to horses do
60540: LD_ADDR_VAR 0 11
60544: PUSH
60545: DOUBLE
60546: LD_INT 1
60548: DEC
60549: ST_TO_ADDR
60550: LD_VAR 0 5
60554: PUSH
60555: FOR_TO
60556: IFFALSE 60603
// begin hc_class := 21 ;
60558: LD_ADDR_OWVAR 28
60562: PUSH
60563: LD_INT 21
60565: ST_TO_ADDR
// hc_gallery :=  ;
60566: LD_ADDR_OWVAR 33
60570: PUSH
60571: LD_STRING 
60573: ST_TO_ADDR
// animal := CreateHuman ;
60574: LD_ADDR_VAR 0 12
60578: PUSH
60579: CALL_OW 44
60583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60584: LD_VAR 0 12
60588: PPUSH
60589: LD_VAR 0 8
60593: PPUSH
60594: LD_INT 0
60596: PPUSH
60597: CALL 62722 0 3
// end ;
60601: GO 60555
60603: POP
60604: POP
// if birds then
60605: LD_VAR 0 1
60609: IFFALSE 60676
// for i = 1 to birds do
60611: LD_ADDR_VAR 0 11
60615: PUSH
60616: DOUBLE
60617: LD_INT 1
60619: DEC
60620: ST_TO_ADDR
60621: LD_VAR 0 1
60625: PUSH
60626: FOR_TO
60627: IFFALSE 60674
// begin hc_class = 18 ;
60629: LD_ADDR_OWVAR 28
60633: PUSH
60634: LD_INT 18
60636: ST_TO_ADDR
// hc_gallery =  ;
60637: LD_ADDR_OWVAR 33
60641: PUSH
60642: LD_STRING 
60644: ST_TO_ADDR
// animal := CreateHuman ;
60645: LD_ADDR_VAR 0 12
60649: PUSH
60650: CALL_OW 44
60654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60655: LD_VAR 0 12
60659: PPUSH
60660: LD_VAR 0 8
60664: PPUSH
60665: LD_INT 0
60667: PPUSH
60668: CALL 62722 0 3
// end ;
60672: GO 60626
60674: POP
60675: POP
// if tigers then
60676: LD_VAR 0 2
60680: IFFALSE 60764
// for i = 1 to tigers do
60682: LD_ADDR_VAR 0 11
60686: PUSH
60687: DOUBLE
60688: LD_INT 1
60690: DEC
60691: ST_TO_ADDR
60692: LD_VAR 0 2
60696: PUSH
60697: FOR_TO
60698: IFFALSE 60762
// begin hc_class = class_tiger ;
60700: LD_ADDR_OWVAR 28
60704: PUSH
60705: LD_INT 14
60707: ST_TO_ADDR
// hc_gallery =  ;
60708: LD_ADDR_OWVAR 33
60712: PUSH
60713: LD_STRING 
60715: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60716: LD_ADDR_OWVAR 35
60720: PUSH
60721: LD_INT 7
60723: NEG
60724: PPUSH
60725: LD_INT 7
60727: PPUSH
60728: CALL_OW 12
60732: ST_TO_ADDR
// animal := CreateHuman ;
60733: LD_ADDR_VAR 0 12
60737: PUSH
60738: CALL_OW 44
60742: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60743: LD_VAR 0 12
60747: PPUSH
60748: LD_VAR 0 8
60752: PPUSH
60753: LD_INT 0
60755: PPUSH
60756: CALL 62722 0 3
// end ;
60760: GO 60697
60762: POP
60763: POP
// if apemans then
60764: LD_VAR 0 3
60768: IFFALSE 60891
// for i = 1 to apemans do
60770: LD_ADDR_VAR 0 11
60774: PUSH
60775: DOUBLE
60776: LD_INT 1
60778: DEC
60779: ST_TO_ADDR
60780: LD_VAR 0 3
60784: PUSH
60785: FOR_TO
60786: IFFALSE 60889
// begin hc_class = class_apeman ;
60788: LD_ADDR_OWVAR 28
60792: PUSH
60793: LD_INT 12
60795: ST_TO_ADDR
// hc_gallery =  ;
60796: LD_ADDR_OWVAR 33
60800: PUSH
60801: LD_STRING 
60803: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60804: LD_ADDR_OWVAR 35
60808: PUSH
60809: LD_INT 2
60811: NEG
60812: PPUSH
60813: LD_INT 2
60815: PPUSH
60816: CALL_OW 12
60820: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60821: LD_ADDR_OWVAR 31
60825: PUSH
60826: LD_INT 1
60828: PPUSH
60829: LD_INT 3
60831: PPUSH
60832: CALL_OW 12
60836: PUSH
60837: LD_INT 1
60839: PPUSH
60840: LD_INT 3
60842: PPUSH
60843: CALL_OW 12
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: ST_TO_ADDR
// animal := CreateHuman ;
60860: LD_ADDR_VAR 0 12
60864: PUSH
60865: CALL_OW 44
60869: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60870: LD_VAR 0 12
60874: PPUSH
60875: LD_VAR 0 8
60879: PPUSH
60880: LD_INT 0
60882: PPUSH
60883: CALL 62722 0 3
// end ;
60887: GO 60785
60889: POP
60890: POP
// if enchidnas then
60891: LD_VAR 0 4
60895: IFFALSE 60962
// for i = 1 to enchidnas do
60897: LD_ADDR_VAR 0 11
60901: PUSH
60902: DOUBLE
60903: LD_INT 1
60905: DEC
60906: ST_TO_ADDR
60907: LD_VAR 0 4
60911: PUSH
60912: FOR_TO
60913: IFFALSE 60960
// begin hc_class = 13 ;
60915: LD_ADDR_OWVAR 28
60919: PUSH
60920: LD_INT 13
60922: ST_TO_ADDR
// hc_gallery =  ;
60923: LD_ADDR_OWVAR 33
60927: PUSH
60928: LD_STRING 
60930: ST_TO_ADDR
// animal := CreateHuman ;
60931: LD_ADDR_VAR 0 12
60935: PUSH
60936: CALL_OW 44
60940: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60941: LD_VAR 0 12
60945: PPUSH
60946: LD_VAR 0 8
60950: PPUSH
60951: LD_INT 0
60953: PPUSH
60954: CALL 62722 0 3
// end ;
60958: GO 60912
60960: POP
60961: POP
// if fishes then
60962: LD_VAR 0 7
60966: IFFALSE 61033
// for i = 1 to fishes do
60968: LD_ADDR_VAR 0 11
60972: PUSH
60973: DOUBLE
60974: LD_INT 1
60976: DEC
60977: ST_TO_ADDR
60978: LD_VAR 0 7
60982: PUSH
60983: FOR_TO
60984: IFFALSE 61031
// begin hc_class = 20 ;
60986: LD_ADDR_OWVAR 28
60990: PUSH
60991: LD_INT 20
60993: ST_TO_ADDR
// hc_gallery =  ;
60994: LD_ADDR_OWVAR 33
60998: PUSH
60999: LD_STRING 
61001: ST_TO_ADDR
// animal := CreateHuman ;
61002: LD_ADDR_VAR 0 12
61006: PUSH
61007: CALL_OW 44
61011: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61012: LD_VAR 0 12
61016: PPUSH
61017: LD_VAR 0 9
61021: PPUSH
61022: LD_INT 0
61024: PPUSH
61025: CALL 62722 0 3
// end ;
61029: GO 60983
61031: POP
61032: POP
// end ;
61033: LD_VAR 0 10
61037: RET
// export function WantHeal ( sci , unit ) ; begin
61038: LD_INT 0
61040: PPUSH
// if GetTaskList ( sci ) > 0 then
61041: LD_VAR 0 1
61045: PPUSH
61046: CALL_OW 437
61050: PUSH
61051: LD_INT 0
61053: GREATER
61054: IFFALSE 61124
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61056: LD_VAR 0 1
61060: PPUSH
61061: CALL_OW 437
61065: PUSH
61066: LD_INT 1
61068: ARRAY
61069: PUSH
61070: LD_INT 1
61072: ARRAY
61073: PUSH
61074: LD_STRING l
61076: EQUAL
61077: PUSH
61078: LD_VAR 0 1
61082: PPUSH
61083: CALL_OW 437
61087: PUSH
61088: LD_INT 1
61090: ARRAY
61091: PUSH
61092: LD_INT 4
61094: ARRAY
61095: PUSH
61096: LD_VAR 0 2
61100: EQUAL
61101: AND
61102: IFFALSE 61114
// result := true else
61104: LD_ADDR_VAR 0 3
61108: PUSH
61109: LD_INT 1
61111: ST_TO_ADDR
61112: GO 61122
// result := false ;
61114: LD_ADDR_VAR 0 3
61118: PUSH
61119: LD_INT 0
61121: ST_TO_ADDR
// end else
61122: GO 61132
// result := false ;
61124: LD_ADDR_VAR 0 3
61128: PUSH
61129: LD_INT 0
61131: ST_TO_ADDR
// end ;
61132: LD_VAR 0 3
61136: RET
// export function HealTarget ( sci ) ; begin
61137: LD_INT 0
61139: PPUSH
// if not sci then
61140: LD_VAR 0 1
61144: NOT
61145: IFFALSE 61149
// exit ;
61147: GO 61214
// result := 0 ;
61149: LD_ADDR_VAR 0 2
61153: PUSH
61154: LD_INT 0
61156: ST_TO_ADDR
// if GetTaskList ( sci ) then
61157: LD_VAR 0 1
61161: PPUSH
61162: CALL_OW 437
61166: IFFALSE 61214
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61168: LD_VAR 0 1
61172: PPUSH
61173: CALL_OW 437
61177: PUSH
61178: LD_INT 1
61180: ARRAY
61181: PUSH
61182: LD_INT 1
61184: ARRAY
61185: PUSH
61186: LD_STRING l
61188: EQUAL
61189: IFFALSE 61214
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61191: LD_ADDR_VAR 0 2
61195: PUSH
61196: LD_VAR 0 1
61200: PPUSH
61201: CALL_OW 437
61205: PUSH
61206: LD_INT 1
61208: ARRAY
61209: PUSH
61210: LD_INT 4
61212: ARRAY
61213: ST_TO_ADDR
// end ;
61214: LD_VAR 0 2
61218: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61219: LD_INT 0
61221: PPUSH
61222: PPUSH
61223: PPUSH
61224: PPUSH
// if not base_units then
61225: LD_VAR 0 1
61229: NOT
61230: IFFALSE 61234
// exit ;
61232: GO 61321
// result := false ;
61234: LD_ADDR_VAR 0 2
61238: PUSH
61239: LD_INT 0
61241: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61242: LD_ADDR_VAR 0 5
61246: PUSH
61247: LD_VAR 0 1
61251: PPUSH
61252: LD_INT 21
61254: PUSH
61255: LD_INT 3
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PPUSH
61262: CALL_OW 72
61266: ST_TO_ADDR
// if not tmp then
61267: LD_VAR 0 5
61271: NOT
61272: IFFALSE 61276
// exit ;
61274: GO 61321
// for i in tmp do
61276: LD_ADDR_VAR 0 3
61280: PUSH
61281: LD_VAR 0 5
61285: PUSH
61286: FOR_IN
61287: IFFALSE 61319
// begin result := EnemyInRange ( i , 22 ) ;
61289: LD_ADDR_VAR 0 2
61293: PUSH
61294: LD_VAR 0 3
61298: PPUSH
61299: LD_INT 22
61301: PPUSH
61302: CALL 59557 0 2
61306: ST_TO_ADDR
// if result then
61307: LD_VAR 0 2
61311: IFFALSE 61317
// exit ;
61313: POP
61314: POP
61315: GO 61321
// end ;
61317: GO 61286
61319: POP
61320: POP
// end ;
61321: LD_VAR 0 2
61325: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61326: LD_INT 0
61328: PPUSH
61329: PPUSH
// if not units then
61330: LD_VAR 0 1
61334: NOT
61335: IFFALSE 61339
// exit ;
61337: GO 61409
// result := [ ] ;
61339: LD_ADDR_VAR 0 3
61343: PUSH
61344: EMPTY
61345: ST_TO_ADDR
// for i in units do
61346: LD_ADDR_VAR 0 4
61350: PUSH
61351: LD_VAR 0 1
61355: PUSH
61356: FOR_IN
61357: IFFALSE 61407
// if GetTag ( i ) = tag then
61359: LD_VAR 0 4
61363: PPUSH
61364: CALL_OW 110
61368: PUSH
61369: LD_VAR 0 2
61373: EQUAL
61374: IFFALSE 61405
// result := Insert ( result , result + 1 , i ) ;
61376: LD_ADDR_VAR 0 3
61380: PUSH
61381: LD_VAR 0 3
61385: PPUSH
61386: LD_VAR 0 3
61390: PUSH
61391: LD_INT 1
61393: PLUS
61394: PPUSH
61395: LD_VAR 0 4
61399: PPUSH
61400: CALL_OW 2
61404: ST_TO_ADDR
61405: GO 61356
61407: POP
61408: POP
// end ;
61409: LD_VAR 0 3
61413: RET
// export function IsDriver ( un ) ; begin
61414: LD_INT 0
61416: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61417: LD_ADDR_VAR 0 2
61421: PUSH
61422: LD_VAR 0 1
61426: PUSH
61427: LD_INT 55
61429: PUSH
61430: EMPTY
61431: LIST
61432: PPUSH
61433: CALL_OW 69
61437: IN
61438: ST_TO_ADDR
// end ;
61439: LD_VAR 0 2
61443: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61444: LD_INT 0
61446: PPUSH
61447: PPUSH
// list := [ ] ;
61448: LD_ADDR_VAR 0 5
61452: PUSH
61453: EMPTY
61454: ST_TO_ADDR
// case d of 0 :
61455: LD_VAR 0 3
61459: PUSH
61460: LD_INT 0
61462: DOUBLE
61463: EQUAL
61464: IFTRUE 61468
61466: GO 61601
61468: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61469: LD_ADDR_VAR 0 5
61473: PUSH
61474: LD_VAR 0 1
61478: PUSH
61479: LD_INT 4
61481: MINUS
61482: PUSH
61483: LD_VAR 0 2
61487: PUSH
61488: LD_INT 4
61490: MINUS
61491: PUSH
61492: LD_INT 2
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: LIST
61499: PUSH
61500: LD_VAR 0 1
61504: PUSH
61505: LD_INT 3
61507: MINUS
61508: PUSH
61509: LD_VAR 0 2
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: LIST
61521: PUSH
61522: LD_VAR 0 1
61526: PUSH
61527: LD_INT 4
61529: PLUS
61530: PUSH
61531: LD_VAR 0 2
61535: PUSH
61536: LD_INT 4
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: LIST
61543: PUSH
61544: LD_VAR 0 1
61548: PUSH
61549: LD_INT 3
61551: PLUS
61552: PUSH
61553: LD_VAR 0 2
61557: PUSH
61558: LD_INT 3
61560: PLUS
61561: PUSH
61562: LD_INT 5
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: LIST
61569: PUSH
61570: LD_VAR 0 1
61574: PUSH
61575: LD_VAR 0 2
61579: PUSH
61580: LD_INT 4
61582: PLUS
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: LIST
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: ST_TO_ADDR
// end ; 1 :
61599: GO 62299
61601: LD_INT 1
61603: DOUBLE
61604: EQUAL
61605: IFTRUE 61609
61607: GO 61742
61609: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61610: LD_ADDR_VAR 0 5
61614: PUSH
61615: LD_VAR 0 1
61619: PUSH
61620: LD_VAR 0 2
61624: PUSH
61625: LD_INT 4
61627: MINUS
61628: PUSH
61629: LD_INT 3
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: LIST
61636: PUSH
61637: LD_VAR 0 1
61641: PUSH
61642: LD_INT 3
61644: MINUS
61645: PUSH
61646: LD_VAR 0 2
61650: PUSH
61651: LD_INT 3
61653: MINUS
61654: PUSH
61655: LD_INT 2
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: LIST
61662: PUSH
61663: LD_VAR 0 1
61667: PUSH
61668: LD_INT 4
61670: MINUS
61671: PUSH
61672: LD_VAR 0 2
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: LIST
61684: PUSH
61685: LD_VAR 0 1
61689: PUSH
61690: LD_VAR 0 2
61694: PUSH
61695: LD_INT 3
61697: PLUS
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: LIST
61706: PUSH
61707: LD_VAR 0 1
61711: PUSH
61712: LD_INT 4
61714: PLUS
61715: PUSH
61716: LD_VAR 0 2
61720: PUSH
61721: LD_INT 4
61723: PLUS
61724: PUSH
61725: LD_INT 5
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: LIST
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: ST_TO_ADDR
// end ; 2 :
61740: GO 62299
61742: LD_INT 2
61744: DOUBLE
61745: EQUAL
61746: IFTRUE 61750
61748: GO 61879
61750: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61751: LD_ADDR_VAR 0 5
61755: PUSH
61756: LD_VAR 0 1
61760: PUSH
61761: LD_VAR 0 2
61765: PUSH
61766: LD_INT 3
61768: MINUS
61769: PUSH
61770: LD_INT 3
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: LIST
61777: PUSH
61778: LD_VAR 0 1
61782: PUSH
61783: LD_INT 4
61785: PLUS
61786: PUSH
61787: LD_VAR 0 2
61791: PUSH
61792: LD_INT 4
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: LIST
61799: PUSH
61800: LD_VAR 0 1
61804: PUSH
61805: LD_VAR 0 2
61809: PUSH
61810: LD_INT 4
61812: PLUS
61813: PUSH
61814: LD_INT 0
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: LIST
61821: PUSH
61822: LD_VAR 0 1
61826: PUSH
61827: LD_INT 3
61829: MINUS
61830: PUSH
61831: LD_VAR 0 2
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: LIST
61843: PUSH
61844: LD_VAR 0 1
61848: PUSH
61849: LD_INT 4
61851: MINUS
61852: PUSH
61853: LD_VAR 0 2
61857: PUSH
61858: LD_INT 4
61860: MINUS
61861: PUSH
61862: LD_INT 2
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: LIST
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: ST_TO_ADDR
// end ; 3 :
61877: GO 62299
61879: LD_INT 3
61881: DOUBLE
61882: EQUAL
61883: IFTRUE 61887
61885: GO 62020
61887: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61888: LD_ADDR_VAR 0 5
61892: PUSH
61893: LD_VAR 0 1
61897: PUSH
61898: LD_INT 3
61900: PLUS
61901: PUSH
61902: LD_VAR 0 2
61906: PUSH
61907: LD_INT 4
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: LIST
61914: PUSH
61915: LD_VAR 0 1
61919: PUSH
61920: LD_INT 4
61922: PLUS
61923: PUSH
61924: LD_VAR 0 2
61928: PUSH
61929: LD_INT 4
61931: PLUS
61932: PUSH
61933: LD_INT 5
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: LIST
61940: PUSH
61941: LD_VAR 0 1
61945: PUSH
61946: LD_INT 4
61948: MINUS
61949: PUSH
61950: LD_VAR 0 2
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: LIST
61962: PUSH
61963: LD_VAR 0 1
61967: PUSH
61968: LD_VAR 0 2
61972: PUSH
61973: LD_INT 4
61975: MINUS
61976: PUSH
61977: LD_INT 3
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: LIST
61984: PUSH
61985: LD_VAR 0 1
61989: PUSH
61990: LD_INT 3
61992: MINUS
61993: PUSH
61994: LD_VAR 0 2
61998: PUSH
61999: LD_INT 3
62001: MINUS
62002: PUSH
62003: LD_INT 2
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: LIST
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: ST_TO_ADDR
// end ; 4 :
62018: GO 62299
62020: LD_INT 4
62022: DOUBLE
62023: EQUAL
62024: IFTRUE 62028
62026: GO 62161
62028: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62029: LD_ADDR_VAR 0 5
62033: PUSH
62034: LD_VAR 0 1
62038: PUSH
62039: LD_VAR 0 2
62043: PUSH
62044: LD_INT 4
62046: PLUS
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: LIST
62055: PUSH
62056: LD_VAR 0 1
62060: PUSH
62061: LD_INT 3
62063: PLUS
62064: PUSH
62065: LD_VAR 0 2
62069: PUSH
62070: LD_INT 3
62072: PLUS
62073: PUSH
62074: LD_INT 5
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: LIST
62081: PUSH
62082: LD_VAR 0 1
62086: PUSH
62087: LD_INT 4
62089: PLUS
62090: PUSH
62091: LD_VAR 0 2
62095: PUSH
62096: LD_INT 4
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: LIST
62103: PUSH
62104: LD_VAR 0 1
62108: PUSH
62109: LD_VAR 0 2
62113: PUSH
62114: LD_INT 3
62116: MINUS
62117: PUSH
62118: LD_INT 3
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: LIST
62125: PUSH
62126: LD_VAR 0 1
62130: PUSH
62131: LD_INT 4
62133: MINUS
62134: PUSH
62135: LD_VAR 0 2
62139: PUSH
62140: LD_INT 4
62142: MINUS
62143: PUSH
62144: LD_INT 2
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: LIST
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: ST_TO_ADDR
// end ; 5 :
62159: GO 62299
62161: LD_INT 5
62163: DOUBLE
62164: EQUAL
62165: IFTRUE 62169
62167: GO 62298
62169: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62170: LD_ADDR_VAR 0 5
62174: PUSH
62175: LD_VAR 0 1
62179: PUSH
62180: LD_INT 4
62182: MINUS
62183: PUSH
62184: LD_VAR 0 2
62188: PUSH
62189: LD_INT 1
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: LIST
62196: PUSH
62197: LD_VAR 0 1
62201: PUSH
62202: LD_VAR 0 2
62206: PUSH
62207: LD_INT 4
62209: MINUS
62210: PUSH
62211: LD_INT 3
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: LIST
62218: PUSH
62219: LD_VAR 0 1
62223: PUSH
62224: LD_INT 4
62226: PLUS
62227: PUSH
62228: LD_VAR 0 2
62232: PUSH
62233: LD_INT 4
62235: PLUS
62236: PUSH
62237: LD_INT 5
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: LIST
62244: PUSH
62245: LD_VAR 0 1
62249: PUSH
62250: LD_INT 3
62252: PLUS
62253: PUSH
62254: LD_VAR 0 2
62258: PUSH
62259: LD_INT 4
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: LIST
62266: PUSH
62267: LD_VAR 0 1
62271: PUSH
62272: LD_VAR 0 2
62276: PUSH
62277: LD_INT 3
62279: PLUS
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: LIST
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: ST_TO_ADDR
// end ; end ;
62296: GO 62299
62298: POP
// result := list ;
62299: LD_ADDR_VAR 0 4
62303: PUSH
62304: LD_VAR 0 5
62308: ST_TO_ADDR
// end ;
62309: LD_VAR 0 4
62313: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62314: LD_INT 0
62316: PPUSH
62317: PPUSH
62318: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62319: LD_VAR 0 1
62323: NOT
62324: PUSH
62325: LD_VAR 0 2
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: LD_INT 3
62338: PUSH
62339: LD_INT 4
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: IN
62348: NOT
62349: OR
62350: IFFALSE 62354
// exit ;
62352: GO 62446
// tmp := [ ] ;
62354: LD_ADDR_VAR 0 5
62358: PUSH
62359: EMPTY
62360: ST_TO_ADDR
// for i in units do
62361: LD_ADDR_VAR 0 4
62365: PUSH
62366: LD_VAR 0 1
62370: PUSH
62371: FOR_IN
62372: IFFALSE 62415
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62374: LD_ADDR_VAR 0 5
62378: PUSH
62379: LD_VAR 0 5
62383: PPUSH
62384: LD_VAR 0 5
62388: PUSH
62389: LD_INT 1
62391: PLUS
62392: PPUSH
62393: LD_VAR 0 4
62397: PPUSH
62398: LD_VAR 0 2
62402: PPUSH
62403: CALL_OW 259
62407: PPUSH
62408: CALL_OW 2
62412: ST_TO_ADDR
62413: GO 62371
62415: POP
62416: POP
// if not tmp then
62417: LD_VAR 0 5
62421: NOT
62422: IFFALSE 62426
// exit ;
62424: GO 62446
// result := SortListByListDesc ( units , tmp ) ;
62426: LD_ADDR_VAR 0 3
62430: PUSH
62431: LD_VAR 0 1
62435: PPUSH
62436: LD_VAR 0 5
62440: PPUSH
62441: CALL_OW 77
62445: ST_TO_ADDR
// end ;
62446: LD_VAR 0 3
62450: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62451: LD_INT 0
62453: PPUSH
62454: PPUSH
62455: PPUSH
// result := false ;
62456: LD_ADDR_VAR 0 3
62460: PUSH
62461: LD_INT 0
62463: ST_TO_ADDR
// x := GetX ( building ) ;
62464: LD_ADDR_VAR 0 4
62468: PUSH
62469: LD_VAR 0 2
62473: PPUSH
62474: CALL_OW 250
62478: ST_TO_ADDR
// y := GetY ( building ) ;
62479: LD_ADDR_VAR 0 5
62483: PUSH
62484: LD_VAR 0 2
62488: PPUSH
62489: CALL_OW 251
62493: ST_TO_ADDR
// if not building or not x or not y then
62494: LD_VAR 0 2
62498: NOT
62499: PUSH
62500: LD_VAR 0 4
62504: NOT
62505: OR
62506: PUSH
62507: LD_VAR 0 5
62511: NOT
62512: OR
62513: IFFALSE 62517
// exit ;
62515: GO 62609
// if GetTaskList ( unit ) then
62517: LD_VAR 0 1
62521: PPUSH
62522: CALL_OW 437
62526: IFFALSE 62609
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62528: LD_STRING e
62530: PUSH
62531: LD_VAR 0 1
62535: PPUSH
62536: CALL_OW 437
62540: PUSH
62541: LD_INT 1
62543: ARRAY
62544: PUSH
62545: LD_INT 1
62547: ARRAY
62548: EQUAL
62549: PUSH
62550: LD_VAR 0 4
62554: PUSH
62555: LD_VAR 0 1
62559: PPUSH
62560: CALL_OW 437
62564: PUSH
62565: LD_INT 1
62567: ARRAY
62568: PUSH
62569: LD_INT 2
62571: ARRAY
62572: EQUAL
62573: AND
62574: PUSH
62575: LD_VAR 0 5
62579: PUSH
62580: LD_VAR 0 1
62584: PPUSH
62585: CALL_OW 437
62589: PUSH
62590: LD_INT 1
62592: ARRAY
62593: PUSH
62594: LD_INT 3
62596: ARRAY
62597: EQUAL
62598: AND
62599: IFFALSE 62609
// result := true end ;
62601: LD_ADDR_VAR 0 3
62605: PUSH
62606: LD_INT 1
62608: ST_TO_ADDR
// end ;
62609: LD_VAR 0 3
62613: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62614: LD_INT 0
62616: PPUSH
// result := false ;
62617: LD_ADDR_VAR 0 4
62621: PUSH
62622: LD_INT 0
62624: ST_TO_ADDR
// if GetTaskList ( unit ) then
62625: LD_VAR 0 1
62629: PPUSH
62630: CALL_OW 437
62634: IFFALSE 62717
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62636: LD_STRING M
62638: PUSH
62639: LD_VAR 0 1
62643: PPUSH
62644: CALL_OW 437
62648: PUSH
62649: LD_INT 1
62651: ARRAY
62652: PUSH
62653: LD_INT 1
62655: ARRAY
62656: EQUAL
62657: PUSH
62658: LD_VAR 0 2
62662: PUSH
62663: LD_VAR 0 1
62667: PPUSH
62668: CALL_OW 437
62672: PUSH
62673: LD_INT 1
62675: ARRAY
62676: PUSH
62677: LD_INT 2
62679: ARRAY
62680: EQUAL
62681: AND
62682: PUSH
62683: LD_VAR 0 3
62687: PUSH
62688: LD_VAR 0 1
62692: PPUSH
62693: CALL_OW 437
62697: PUSH
62698: LD_INT 1
62700: ARRAY
62701: PUSH
62702: LD_INT 3
62704: ARRAY
62705: EQUAL
62706: AND
62707: IFFALSE 62717
// result := true ;
62709: LD_ADDR_VAR 0 4
62713: PUSH
62714: LD_INT 1
62716: ST_TO_ADDR
// end ; end ;
62717: LD_VAR 0 4
62721: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62722: LD_INT 0
62724: PPUSH
62725: PPUSH
62726: PPUSH
62727: PPUSH
// if not unit or not area then
62728: LD_VAR 0 1
62732: NOT
62733: PUSH
62734: LD_VAR 0 2
62738: NOT
62739: OR
62740: IFFALSE 62744
// exit ;
62742: GO 62908
// tmp := AreaToList ( area , i ) ;
62744: LD_ADDR_VAR 0 6
62748: PUSH
62749: LD_VAR 0 2
62753: PPUSH
62754: LD_VAR 0 5
62758: PPUSH
62759: CALL_OW 517
62763: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62764: LD_ADDR_VAR 0 5
62768: PUSH
62769: DOUBLE
62770: LD_INT 1
62772: DEC
62773: ST_TO_ADDR
62774: LD_VAR 0 6
62778: PUSH
62779: LD_INT 1
62781: ARRAY
62782: PUSH
62783: FOR_TO
62784: IFFALSE 62906
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62786: LD_ADDR_VAR 0 7
62790: PUSH
62791: LD_VAR 0 6
62795: PUSH
62796: LD_INT 1
62798: ARRAY
62799: PUSH
62800: LD_VAR 0 5
62804: ARRAY
62805: PUSH
62806: LD_VAR 0 6
62810: PUSH
62811: LD_INT 2
62813: ARRAY
62814: PUSH
62815: LD_VAR 0 5
62819: ARRAY
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62825: LD_VAR 0 7
62829: PUSH
62830: LD_INT 1
62832: ARRAY
62833: PPUSH
62834: LD_VAR 0 7
62838: PUSH
62839: LD_INT 2
62841: ARRAY
62842: PPUSH
62843: CALL_OW 428
62847: PUSH
62848: LD_INT 0
62850: EQUAL
62851: IFFALSE 62904
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62853: LD_VAR 0 1
62857: PPUSH
62858: LD_VAR 0 7
62862: PUSH
62863: LD_INT 1
62865: ARRAY
62866: PPUSH
62867: LD_VAR 0 7
62871: PUSH
62872: LD_INT 2
62874: ARRAY
62875: PPUSH
62876: LD_VAR 0 3
62880: PPUSH
62881: CALL_OW 48
// result := IsPlaced ( unit ) ;
62885: LD_ADDR_VAR 0 4
62889: PUSH
62890: LD_VAR 0 1
62894: PPUSH
62895: CALL_OW 305
62899: ST_TO_ADDR
// exit ;
62900: POP
62901: POP
62902: GO 62908
// end ; end ;
62904: GO 62783
62906: POP
62907: POP
// end ;
62908: LD_VAR 0 4
62912: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62913: LD_INT 0
62915: PPUSH
62916: PPUSH
62917: PPUSH
// if not side or side > 8 then
62918: LD_VAR 0 1
62922: NOT
62923: PUSH
62924: LD_VAR 0 1
62928: PUSH
62929: LD_INT 8
62931: GREATER
62932: OR
62933: IFFALSE 62937
// exit ;
62935: GO 63124
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62937: LD_ADDR_VAR 0 4
62941: PUSH
62942: LD_INT 22
62944: PUSH
62945: LD_VAR 0 1
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 21
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PPUSH
62968: CALL_OW 69
62972: ST_TO_ADDR
// if not tmp then
62973: LD_VAR 0 4
62977: NOT
62978: IFFALSE 62982
// exit ;
62980: GO 63124
// enable_addtolog := true ;
62982: LD_ADDR_OWVAR 81
62986: PUSH
62987: LD_INT 1
62989: ST_TO_ADDR
// AddToLog ( [ ) ;
62990: LD_STRING [
62992: PPUSH
62993: CALL_OW 561
// for i in tmp do
62997: LD_ADDR_VAR 0 3
63001: PUSH
63002: LD_VAR 0 4
63006: PUSH
63007: FOR_IN
63008: IFFALSE 63115
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63010: LD_STRING [
63012: PUSH
63013: LD_VAR 0 3
63017: PPUSH
63018: CALL_OW 266
63022: STR
63023: PUSH
63024: LD_STRING , 
63026: STR
63027: PUSH
63028: LD_VAR 0 3
63032: PPUSH
63033: CALL_OW 250
63037: STR
63038: PUSH
63039: LD_STRING , 
63041: STR
63042: PUSH
63043: LD_VAR 0 3
63047: PPUSH
63048: CALL_OW 251
63052: STR
63053: PUSH
63054: LD_STRING , 
63056: STR
63057: PUSH
63058: LD_VAR 0 3
63062: PPUSH
63063: CALL_OW 254
63067: STR
63068: PUSH
63069: LD_STRING , 
63071: STR
63072: PUSH
63073: LD_VAR 0 3
63077: PPUSH
63078: LD_INT 1
63080: PPUSH
63081: CALL_OW 268
63085: STR
63086: PUSH
63087: LD_STRING , 
63089: STR
63090: PUSH
63091: LD_VAR 0 3
63095: PPUSH
63096: LD_INT 2
63098: PPUSH
63099: CALL_OW 268
63103: STR
63104: PUSH
63105: LD_STRING ],
63107: STR
63108: PPUSH
63109: CALL_OW 561
// end ;
63113: GO 63007
63115: POP
63116: POP
// AddToLog ( ]; ) ;
63117: LD_STRING ];
63119: PPUSH
63120: CALL_OW 561
// end ;
63124: LD_VAR 0 2
63128: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63129: LD_INT 0
63131: PPUSH
63132: PPUSH
63133: PPUSH
63134: PPUSH
63135: PPUSH
// if not area or not rate or not max then
63136: LD_VAR 0 1
63140: NOT
63141: PUSH
63142: LD_VAR 0 2
63146: NOT
63147: OR
63148: PUSH
63149: LD_VAR 0 4
63153: NOT
63154: OR
63155: IFFALSE 63159
// exit ;
63157: GO 63351
// while 1 do
63159: LD_INT 1
63161: IFFALSE 63351
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63163: LD_ADDR_VAR 0 9
63167: PUSH
63168: LD_VAR 0 1
63172: PPUSH
63173: LD_INT 1
63175: PPUSH
63176: CALL_OW 287
63180: PUSH
63181: LD_INT 10
63183: MUL
63184: ST_TO_ADDR
// r := rate / 10 ;
63185: LD_ADDR_VAR 0 7
63189: PUSH
63190: LD_VAR 0 2
63194: PUSH
63195: LD_INT 10
63197: DIVREAL
63198: ST_TO_ADDR
// time := 1 1$00 ;
63199: LD_ADDR_VAR 0 8
63203: PUSH
63204: LD_INT 2100
63206: ST_TO_ADDR
// if amount < min then
63207: LD_VAR 0 9
63211: PUSH
63212: LD_VAR 0 3
63216: LESS
63217: IFFALSE 63235
// r := r * 2 else
63219: LD_ADDR_VAR 0 7
63223: PUSH
63224: LD_VAR 0 7
63228: PUSH
63229: LD_INT 2
63231: MUL
63232: ST_TO_ADDR
63233: GO 63261
// if amount > max then
63235: LD_VAR 0 9
63239: PUSH
63240: LD_VAR 0 4
63244: GREATER
63245: IFFALSE 63261
// r := r / 2 ;
63247: LD_ADDR_VAR 0 7
63251: PUSH
63252: LD_VAR 0 7
63256: PUSH
63257: LD_INT 2
63259: DIVREAL
63260: ST_TO_ADDR
// time := time / r ;
63261: LD_ADDR_VAR 0 8
63265: PUSH
63266: LD_VAR 0 8
63270: PUSH
63271: LD_VAR 0 7
63275: DIVREAL
63276: ST_TO_ADDR
// if time < 0 then
63277: LD_VAR 0 8
63281: PUSH
63282: LD_INT 0
63284: LESS
63285: IFFALSE 63302
// time := time * - 1 ;
63287: LD_ADDR_VAR 0 8
63291: PUSH
63292: LD_VAR 0 8
63296: PUSH
63297: LD_INT 1
63299: NEG
63300: MUL
63301: ST_TO_ADDR
// wait ( time ) ;
63302: LD_VAR 0 8
63306: PPUSH
63307: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63311: LD_INT 35
63313: PPUSH
63314: LD_INT 875
63316: PPUSH
63317: CALL_OW 12
63321: PPUSH
63322: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63326: LD_INT 1
63328: PPUSH
63329: LD_INT 5
63331: PPUSH
63332: CALL_OW 12
63336: PPUSH
63337: LD_VAR 0 1
63341: PPUSH
63342: LD_INT 1
63344: PPUSH
63345: CALL_OW 55
// end ;
63349: GO 63159
// end ;
63351: LD_VAR 0 5
63355: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63356: LD_INT 0
63358: PPUSH
63359: PPUSH
63360: PPUSH
63361: PPUSH
63362: PPUSH
63363: PPUSH
63364: PPUSH
63365: PPUSH
// if not turrets or not factories then
63366: LD_VAR 0 1
63370: NOT
63371: PUSH
63372: LD_VAR 0 2
63376: NOT
63377: OR
63378: IFFALSE 63382
// exit ;
63380: GO 63689
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63382: LD_ADDR_VAR 0 10
63386: PUSH
63387: LD_INT 5
63389: PUSH
63390: LD_INT 6
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: LD_INT 4
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 3
63409: PUSH
63410: LD_INT 5
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 24
63424: PUSH
63425: LD_INT 25
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 23
63434: PUSH
63435: LD_INT 27
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 42
63448: PUSH
63449: LD_INT 43
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 44
63458: PUSH
63459: LD_INT 46
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 45
63468: PUSH
63469: LD_INT 47
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: LIST
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: LIST
63485: ST_TO_ADDR
// result := [ ] ;
63486: LD_ADDR_VAR 0 3
63490: PUSH
63491: EMPTY
63492: ST_TO_ADDR
// for i in turrets do
63493: LD_ADDR_VAR 0 4
63497: PUSH
63498: LD_VAR 0 1
63502: PUSH
63503: FOR_IN
63504: IFFALSE 63687
// begin nat := GetNation ( i ) ;
63506: LD_ADDR_VAR 0 7
63510: PUSH
63511: LD_VAR 0 4
63515: PPUSH
63516: CALL_OW 248
63520: ST_TO_ADDR
// weapon := 0 ;
63521: LD_ADDR_VAR 0 8
63525: PUSH
63526: LD_INT 0
63528: ST_TO_ADDR
// if not nat then
63529: LD_VAR 0 7
63533: NOT
63534: IFFALSE 63538
// continue ;
63536: GO 63503
// for j in list [ nat ] do
63538: LD_ADDR_VAR 0 5
63542: PUSH
63543: LD_VAR 0 10
63547: PUSH
63548: LD_VAR 0 7
63552: ARRAY
63553: PUSH
63554: FOR_IN
63555: IFFALSE 63596
// if GetBWeapon ( i ) = j [ 1 ] then
63557: LD_VAR 0 4
63561: PPUSH
63562: CALL_OW 269
63566: PUSH
63567: LD_VAR 0 5
63571: PUSH
63572: LD_INT 1
63574: ARRAY
63575: EQUAL
63576: IFFALSE 63594
// begin weapon := j [ 2 ] ;
63578: LD_ADDR_VAR 0 8
63582: PUSH
63583: LD_VAR 0 5
63587: PUSH
63588: LD_INT 2
63590: ARRAY
63591: ST_TO_ADDR
// break ;
63592: GO 63596
// end ;
63594: GO 63554
63596: POP
63597: POP
// if not weapon then
63598: LD_VAR 0 8
63602: NOT
63603: IFFALSE 63607
// continue ;
63605: GO 63503
// for k in factories do
63607: LD_ADDR_VAR 0 6
63611: PUSH
63612: LD_VAR 0 2
63616: PUSH
63617: FOR_IN
63618: IFFALSE 63683
// begin weapons := AvailableWeaponList ( k ) ;
63620: LD_ADDR_VAR 0 9
63624: PUSH
63625: LD_VAR 0 6
63629: PPUSH
63630: CALL_OW 478
63634: ST_TO_ADDR
// if not weapons then
63635: LD_VAR 0 9
63639: NOT
63640: IFFALSE 63644
// continue ;
63642: GO 63617
// if weapon in weapons then
63644: LD_VAR 0 8
63648: PUSH
63649: LD_VAR 0 9
63653: IN
63654: IFFALSE 63681
// begin result := [ i , weapon ] ;
63656: LD_ADDR_VAR 0 3
63660: PUSH
63661: LD_VAR 0 4
63665: PUSH
63666: LD_VAR 0 8
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: ST_TO_ADDR
// exit ;
63675: POP
63676: POP
63677: POP
63678: POP
63679: GO 63689
// end ; end ;
63681: GO 63617
63683: POP
63684: POP
// end ;
63685: GO 63503
63687: POP
63688: POP
// end ;
63689: LD_VAR 0 3
63693: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63694: LD_INT 0
63696: PPUSH
// if not side or side > 8 then
63697: LD_VAR 0 3
63701: NOT
63702: PUSH
63703: LD_VAR 0 3
63707: PUSH
63708: LD_INT 8
63710: GREATER
63711: OR
63712: IFFALSE 63716
// exit ;
63714: GO 63775
// if not range then
63716: LD_VAR 0 4
63720: NOT
63721: IFFALSE 63732
// range := - 12 ;
63723: LD_ADDR_VAR 0 4
63727: PUSH
63728: LD_INT 12
63730: NEG
63731: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63732: LD_VAR 0 1
63736: PPUSH
63737: LD_VAR 0 2
63741: PPUSH
63742: LD_VAR 0 3
63746: PPUSH
63747: LD_VAR 0 4
63751: PPUSH
63752: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63756: LD_VAR 0 1
63760: PPUSH
63761: LD_VAR 0 2
63765: PPUSH
63766: LD_VAR 0 3
63770: PPUSH
63771: CALL_OW 331
// end ;
63775: LD_VAR 0 5
63779: RET
// export function Video ( mode ) ; begin
63780: LD_INT 0
63782: PPUSH
// ingame_video = mode ;
63783: LD_ADDR_OWVAR 52
63787: PUSH
63788: LD_VAR 0 1
63792: ST_TO_ADDR
// interface_hidden = mode ;
63793: LD_ADDR_OWVAR 54
63797: PUSH
63798: LD_VAR 0 1
63802: ST_TO_ADDR
// end ;
63803: LD_VAR 0 2
63807: RET
// export function Join ( array , element ) ; begin
63808: LD_INT 0
63810: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63811: LD_ADDR_VAR 0 3
63815: PUSH
63816: LD_VAR 0 1
63820: PPUSH
63821: LD_VAR 0 1
63825: PUSH
63826: LD_INT 1
63828: PLUS
63829: PPUSH
63830: LD_VAR 0 2
63834: PPUSH
63835: CALL_OW 1
63839: ST_TO_ADDR
// end ;
63840: LD_VAR 0 3
63844: RET
// export function JoinUnion ( array , element ) ; begin
63845: LD_INT 0
63847: PPUSH
// result := array union element ;
63848: LD_ADDR_VAR 0 3
63852: PUSH
63853: LD_VAR 0 1
63857: PUSH
63858: LD_VAR 0 2
63862: UNION
63863: ST_TO_ADDR
// end ;
63864: LD_VAR 0 3
63868: RET
// export function GetBehemoths ( side ) ; begin
63869: LD_INT 0
63871: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63872: LD_ADDR_VAR 0 2
63876: PUSH
63877: LD_INT 22
63879: PUSH
63880: LD_VAR 0 1
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 31
63891: PUSH
63892: LD_INT 25
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PPUSH
63903: CALL_OW 69
63907: ST_TO_ADDR
// end ;
63908: LD_VAR 0 2
63912: RET
// export function Shuffle ( array ) ; var i , index ; begin
63913: LD_INT 0
63915: PPUSH
63916: PPUSH
63917: PPUSH
// result := [ ] ;
63918: LD_ADDR_VAR 0 2
63922: PUSH
63923: EMPTY
63924: ST_TO_ADDR
// if not array then
63925: LD_VAR 0 1
63929: NOT
63930: IFFALSE 63934
// exit ;
63932: GO 64033
// Randomize ;
63934: CALL_OW 10
// for i = array downto 1 do
63938: LD_ADDR_VAR 0 3
63942: PUSH
63943: DOUBLE
63944: LD_VAR 0 1
63948: INC
63949: ST_TO_ADDR
63950: LD_INT 1
63952: PUSH
63953: FOR_DOWNTO
63954: IFFALSE 64031
// begin index := rand ( 1 , array ) ;
63956: LD_ADDR_VAR 0 4
63960: PUSH
63961: LD_INT 1
63963: PPUSH
63964: LD_VAR 0 1
63968: PPUSH
63969: CALL_OW 12
63973: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63974: LD_ADDR_VAR 0 2
63978: PUSH
63979: LD_VAR 0 2
63983: PPUSH
63984: LD_VAR 0 2
63988: PUSH
63989: LD_INT 1
63991: PLUS
63992: PPUSH
63993: LD_VAR 0 1
63997: PUSH
63998: LD_VAR 0 4
64002: ARRAY
64003: PPUSH
64004: CALL_OW 2
64008: ST_TO_ADDR
// array := Delete ( array , index ) ;
64009: LD_ADDR_VAR 0 1
64013: PUSH
64014: LD_VAR 0 1
64018: PPUSH
64019: LD_VAR 0 4
64023: PPUSH
64024: CALL_OW 3
64028: ST_TO_ADDR
// end ;
64029: GO 63953
64031: POP
64032: POP
// end ;
64033: LD_VAR 0 2
64037: RET
// export function GetBaseMaterials ( base ) ; begin
64038: LD_INT 0
64040: PPUSH
// result := [ 0 , 0 , 0 ] ;
64041: LD_ADDR_VAR 0 2
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: LIST
64059: ST_TO_ADDR
// if not base then
64060: LD_VAR 0 1
64064: NOT
64065: IFFALSE 64069
// exit ;
64067: GO 64118
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64069: LD_ADDR_VAR 0 2
64073: PUSH
64074: LD_VAR 0 1
64078: PPUSH
64079: LD_INT 1
64081: PPUSH
64082: CALL_OW 275
64086: PUSH
64087: LD_VAR 0 1
64091: PPUSH
64092: LD_INT 2
64094: PPUSH
64095: CALL_OW 275
64099: PUSH
64100: LD_VAR 0 1
64104: PPUSH
64105: LD_INT 3
64107: PPUSH
64108: CALL_OW 275
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: LIST
64117: ST_TO_ADDR
// end ;
64118: LD_VAR 0 2
64122: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64123: LD_INT 0
64125: PPUSH
64126: PPUSH
// result := array ;
64127: LD_ADDR_VAR 0 3
64131: PUSH
64132: LD_VAR 0 1
64136: ST_TO_ADDR
// if size > 0 then
64137: LD_VAR 0 2
64141: PUSH
64142: LD_INT 0
64144: GREATER
64145: IFFALSE 64191
// for i := array downto size do
64147: LD_ADDR_VAR 0 4
64151: PUSH
64152: DOUBLE
64153: LD_VAR 0 1
64157: INC
64158: ST_TO_ADDR
64159: LD_VAR 0 2
64163: PUSH
64164: FOR_DOWNTO
64165: IFFALSE 64189
// result := Delete ( result , result ) ;
64167: LD_ADDR_VAR 0 3
64171: PUSH
64172: LD_VAR 0 3
64176: PPUSH
64177: LD_VAR 0 3
64181: PPUSH
64182: CALL_OW 3
64186: ST_TO_ADDR
64187: GO 64164
64189: POP
64190: POP
// end ;
64191: LD_VAR 0 3
64195: RET
// export function ComExit ( unit ) ; var tmp ; begin
64196: LD_INT 0
64198: PPUSH
64199: PPUSH
// if not IsInUnit ( unit ) then
64200: LD_VAR 0 1
64204: PPUSH
64205: CALL_OW 310
64209: NOT
64210: IFFALSE 64214
// exit ;
64212: GO 64274
// tmp := IsInUnit ( unit ) ;
64214: LD_ADDR_VAR 0 3
64218: PUSH
64219: LD_VAR 0 1
64223: PPUSH
64224: CALL_OW 310
64228: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64229: LD_VAR 0 3
64233: PPUSH
64234: CALL_OW 247
64238: PUSH
64239: LD_INT 2
64241: EQUAL
64242: IFFALSE 64255
// ComExitVehicle ( unit ) else
64244: LD_VAR 0 1
64248: PPUSH
64249: CALL_OW 121
64253: GO 64264
// ComExitBuilding ( unit ) ;
64255: LD_VAR 0 1
64259: PPUSH
64260: CALL_OW 122
// result := tmp ;
64264: LD_ADDR_VAR 0 2
64268: PUSH
64269: LD_VAR 0 3
64273: ST_TO_ADDR
// end ;
64274: LD_VAR 0 2
64278: RET
// export function ComExitAll ( units ) ; var i ; begin
64279: LD_INT 0
64281: PPUSH
64282: PPUSH
// if not units then
64283: LD_VAR 0 1
64287: NOT
64288: IFFALSE 64292
// exit ;
64290: GO 64318
// for i in units do
64292: LD_ADDR_VAR 0 3
64296: PUSH
64297: LD_VAR 0 1
64301: PUSH
64302: FOR_IN
64303: IFFALSE 64316
// ComExit ( i ) ;
64305: LD_VAR 0 3
64309: PPUSH
64310: CALL 64196 0 1
64314: GO 64302
64316: POP
64317: POP
// end ;
64318: LD_VAR 0 2
64322: RET
// export function ResetHc ; begin
64323: LD_INT 0
64325: PPUSH
// InitHc ;
64326: CALL_OW 19
// hc_importance := 0 ;
64330: LD_ADDR_OWVAR 32
64334: PUSH
64335: LD_INT 0
64337: ST_TO_ADDR
// end ;
64338: LD_VAR 0 1
64342: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64343: LD_INT 0
64345: PPUSH
64346: PPUSH
64347: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64348: LD_ADDR_VAR 0 6
64352: PUSH
64353: LD_VAR 0 1
64357: PUSH
64358: LD_VAR 0 3
64362: PLUS
64363: PUSH
64364: LD_INT 2
64366: DIV
64367: ST_TO_ADDR
// if _x < 0 then
64368: LD_VAR 0 6
64372: PUSH
64373: LD_INT 0
64375: LESS
64376: IFFALSE 64393
// _x := _x * - 1 ;
64378: LD_ADDR_VAR 0 6
64382: PUSH
64383: LD_VAR 0 6
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: MUL
64392: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64393: LD_ADDR_VAR 0 7
64397: PUSH
64398: LD_VAR 0 2
64402: PUSH
64403: LD_VAR 0 4
64407: PLUS
64408: PUSH
64409: LD_INT 2
64411: DIV
64412: ST_TO_ADDR
// if _y < 0 then
64413: LD_VAR 0 7
64417: PUSH
64418: LD_INT 0
64420: LESS
64421: IFFALSE 64438
// _y := _y * - 1 ;
64423: LD_ADDR_VAR 0 7
64427: PUSH
64428: LD_VAR 0 7
64432: PUSH
64433: LD_INT 1
64435: NEG
64436: MUL
64437: ST_TO_ADDR
// result := [ _x , _y ] ;
64438: LD_ADDR_VAR 0 5
64442: PUSH
64443: LD_VAR 0 6
64447: PUSH
64448: LD_VAR 0 7
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: ST_TO_ADDR
// end ;
64457: LD_VAR 0 5
64461: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64462: LD_INT 0
64464: PPUSH
64465: PPUSH
64466: PPUSH
64467: PPUSH
// task := GetTaskList ( unit ) ;
64468: LD_ADDR_VAR 0 7
64472: PUSH
64473: LD_VAR 0 1
64477: PPUSH
64478: CALL_OW 437
64482: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64483: LD_VAR 0 7
64487: NOT
64488: PUSH
64489: LD_VAR 0 1
64493: PPUSH
64494: LD_VAR 0 2
64498: PPUSH
64499: CALL_OW 308
64503: NOT
64504: AND
64505: IFFALSE 64509
// exit ;
64507: GO 64627
// if IsInArea ( unit , area ) then
64509: LD_VAR 0 1
64513: PPUSH
64514: LD_VAR 0 2
64518: PPUSH
64519: CALL_OW 308
64523: IFFALSE 64541
// begin ComMoveToArea ( unit , goAway ) ;
64525: LD_VAR 0 1
64529: PPUSH
64530: LD_VAR 0 3
64534: PPUSH
64535: CALL_OW 113
// exit ;
64539: GO 64627
// end ; if task [ 1 ] [ 1 ] <> M then
64541: LD_VAR 0 7
64545: PUSH
64546: LD_INT 1
64548: ARRAY
64549: PUSH
64550: LD_INT 1
64552: ARRAY
64553: PUSH
64554: LD_STRING M
64556: NONEQUAL
64557: IFFALSE 64561
// exit ;
64559: GO 64627
// x := task [ 1 ] [ 2 ] ;
64561: LD_ADDR_VAR 0 5
64565: PUSH
64566: LD_VAR 0 7
64570: PUSH
64571: LD_INT 1
64573: ARRAY
64574: PUSH
64575: LD_INT 2
64577: ARRAY
64578: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64579: LD_ADDR_VAR 0 6
64583: PUSH
64584: LD_VAR 0 7
64588: PUSH
64589: LD_INT 1
64591: ARRAY
64592: PUSH
64593: LD_INT 3
64595: ARRAY
64596: ST_TO_ADDR
// if InArea ( x , y , area ) then
64597: LD_VAR 0 5
64601: PPUSH
64602: LD_VAR 0 6
64606: PPUSH
64607: LD_VAR 0 2
64611: PPUSH
64612: CALL_OW 309
64616: IFFALSE 64627
// ComStop ( unit ) ;
64618: LD_VAR 0 1
64622: PPUSH
64623: CALL_OW 141
// end ;
64627: LD_VAR 0 4
64631: RET
// export function Abs ( value ) ; begin
64632: LD_INT 0
64634: PPUSH
// result := value ;
64635: LD_ADDR_VAR 0 2
64639: PUSH
64640: LD_VAR 0 1
64644: ST_TO_ADDR
// if value < 0 then
64645: LD_VAR 0 1
64649: PUSH
64650: LD_INT 0
64652: LESS
64653: IFFALSE 64670
// result := value * - 1 ;
64655: LD_ADDR_VAR 0 2
64659: PUSH
64660: LD_VAR 0 1
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: MUL
64669: ST_TO_ADDR
// end ;
64670: LD_VAR 0 2
64674: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64675: LD_INT 0
64677: PPUSH
64678: PPUSH
64679: PPUSH
64680: PPUSH
64681: PPUSH
64682: PPUSH
64683: PPUSH
64684: PPUSH
// if not unit or not building then
64685: LD_VAR 0 1
64689: NOT
64690: PUSH
64691: LD_VAR 0 2
64695: NOT
64696: OR
64697: IFFALSE 64701
// exit ;
64699: GO 64927
// x := GetX ( building ) ;
64701: LD_ADDR_VAR 0 4
64705: PUSH
64706: LD_VAR 0 2
64710: PPUSH
64711: CALL_OW 250
64715: ST_TO_ADDR
// y := GetY ( building ) ;
64716: LD_ADDR_VAR 0 6
64720: PUSH
64721: LD_VAR 0 2
64725: PPUSH
64726: CALL_OW 251
64730: ST_TO_ADDR
// d := GetDir ( building ) ;
64731: LD_ADDR_VAR 0 8
64735: PUSH
64736: LD_VAR 0 2
64740: PPUSH
64741: CALL_OW 254
64745: ST_TO_ADDR
// r := 4 ;
64746: LD_ADDR_VAR 0 9
64750: PUSH
64751: LD_INT 4
64753: ST_TO_ADDR
// for i := 1 to 5 do
64754: LD_ADDR_VAR 0 10
64758: PUSH
64759: DOUBLE
64760: LD_INT 1
64762: DEC
64763: ST_TO_ADDR
64764: LD_INT 5
64766: PUSH
64767: FOR_TO
64768: IFFALSE 64925
// begin _x := ShiftX ( x , d , r + i ) ;
64770: LD_ADDR_VAR 0 5
64774: PUSH
64775: LD_VAR 0 4
64779: PPUSH
64780: LD_VAR 0 8
64784: PPUSH
64785: LD_VAR 0 9
64789: PUSH
64790: LD_VAR 0 10
64794: PLUS
64795: PPUSH
64796: CALL_OW 272
64800: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64801: LD_ADDR_VAR 0 7
64805: PUSH
64806: LD_VAR 0 6
64810: PPUSH
64811: LD_VAR 0 8
64815: PPUSH
64816: LD_VAR 0 9
64820: PUSH
64821: LD_VAR 0 10
64825: PLUS
64826: PPUSH
64827: CALL_OW 273
64831: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64832: LD_VAR 0 5
64836: PPUSH
64837: LD_VAR 0 7
64841: PPUSH
64842: CALL_OW 488
64846: PUSH
64847: LD_VAR 0 5
64851: PPUSH
64852: LD_VAR 0 7
64856: PPUSH
64857: CALL_OW 428
64861: PPUSH
64862: CALL_OW 247
64866: PUSH
64867: LD_INT 3
64869: PUSH
64870: LD_INT 2
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: IN
64877: NOT
64878: AND
64879: IFFALSE 64923
// begin ComMoveXY ( unit , _x , _y ) ;
64881: LD_VAR 0 1
64885: PPUSH
64886: LD_VAR 0 5
64890: PPUSH
64891: LD_VAR 0 7
64895: PPUSH
64896: CALL_OW 111
// result := [ _x , _y ] ;
64900: LD_ADDR_VAR 0 3
64904: PUSH
64905: LD_VAR 0 5
64909: PUSH
64910: LD_VAR 0 7
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: ST_TO_ADDR
// exit ;
64919: POP
64920: POP
64921: GO 64927
// end ; end ;
64923: GO 64767
64925: POP
64926: POP
// end ;
64927: LD_VAR 0 3
64931: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64932: LD_INT 0
64934: PPUSH
64935: PPUSH
64936: PPUSH
// result := 0 ;
64937: LD_ADDR_VAR 0 3
64941: PUSH
64942: LD_INT 0
64944: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64945: LD_VAR 0 1
64949: PUSH
64950: LD_INT 0
64952: LESS
64953: PUSH
64954: LD_VAR 0 1
64958: PUSH
64959: LD_INT 8
64961: GREATER
64962: OR
64963: PUSH
64964: LD_VAR 0 2
64968: PUSH
64969: LD_INT 0
64971: LESS
64972: OR
64973: PUSH
64974: LD_VAR 0 2
64978: PUSH
64979: LD_INT 8
64981: GREATER
64982: OR
64983: IFFALSE 64987
// exit ;
64985: GO 65062
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64987: LD_ADDR_VAR 0 4
64991: PUSH
64992: LD_INT 22
64994: PUSH
64995: LD_VAR 0 2
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PPUSH
65004: CALL_OW 69
65008: PUSH
65009: FOR_IN
65010: IFFALSE 65060
// begin un := UnitShoot ( i ) ;
65012: LD_ADDR_VAR 0 5
65016: PUSH
65017: LD_VAR 0 4
65021: PPUSH
65022: CALL_OW 504
65026: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65027: LD_VAR 0 5
65031: PPUSH
65032: CALL_OW 255
65036: PUSH
65037: LD_VAR 0 1
65041: EQUAL
65042: IFFALSE 65058
// begin result := un ;
65044: LD_ADDR_VAR 0 3
65048: PUSH
65049: LD_VAR 0 5
65053: ST_TO_ADDR
// exit ;
65054: POP
65055: POP
65056: GO 65062
// end ; end ;
65058: GO 65009
65060: POP
65061: POP
// end ;
65062: LD_VAR 0 3
65066: RET
// export function GetCargoBay ( units ) ; begin
65067: LD_INT 0
65069: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65070: LD_ADDR_VAR 0 2
65074: PUSH
65075: LD_VAR 0 1
65079: PPUSH
65080: LD_INT 2
65082: PUSH
65083: LD_INT 34
65085: PUSH
65086: LD_INT 12
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 34
65095: PUSH
65096: LD_INT 51
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 34
65105: PUSH
65106: LD_INT 32
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 34
65115: PUSH
65116: LD_EXP 111
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: PPUSH
65132: CALL_OW 72
65136: ST_TO_ADDR
// end ;
65137: LD_VAR 0 2
65141: RET
// export function Negate ( value ) ; begin
65142: LD_INT 0
65144: PPUSH
// result := not value ;
65145: LD_ADDR_VAR 0 2
65149: PUSH
65150: LD_VAR 0 1
65154: NOT
65155: ST_TO_ADDR
// end ;
65156: LD_VAR 0 2
65160: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
65161: LD_INT 0
65163: PPUSH
// if x1 = x2 then
65164: LD_VAR 0 1
65168: PUSH
65169: LD_VAR 0 3
65173: EQUAL
65174: IFFALSE 65208
// begin if y1 > y2 then
65176: LD_VAR 0 2
65180: PUSH
65181: LD_VAR 0 4
65185: GREATER
65186: IFFALSE 65198
// result := 0 else
65188: LD_ADDR_VAR 0 5
65192: PUSH
65193: LD_INT 0
65195: ST_TO_ADDR
65196: GO 65206
// result := 3 ;
65198: LD_ADDR_VAR 0 5
65202: PUSH
65203: LD_INT 3
65205: ST_TO_ADDR
// exit ;
65206: GO 65294
// end ; if y1 = y2 then
65208: LD_VAR 0 2
65212: PUSH
65213: LD_VAR 0 4
65217: EQUAL
65218: IFFALSE 65252
// begin if x1 > x2 then
65220: LD_VAR 0 1
65224: PUSH
65225: LD_VAR 0 3
65229: GREATER
65230: IFFALSE 65242
// result := 1 else
65232: LD_ADDR_VAR 0 5
65236: PUSH
65237: LD_INT 1
65239: ST_TO_ADDR
65240: GO 65250
// result := 4 ;
65242: LD_ADDR_VAR 0 5
65246: PUSH
65247: LD_INT 4
65249: ST_TO_ADDR
// exit ;
65250: GO 65294
// end ; if x1 > x2 and y1 > y2 then
65252: LD_VAR 0 1
65256: PUSH
65257: LD_VAR 0 3
65261: GREATER
65262: PUSH
65263: LD_VAR 0 2
65267: PUSH
65268: LD_VAR 0 4
65272: GREATER
65273: AND
65274: IFFALSE 65286
// result := 2 else
65276: LD_ADDR_VAR 0 5
65280: PUSH
65281: LD_INT 2
65283: ST_TO_ADDR
65284: GO 65294
// result := 5 ;
65286: LD_ADDR_VAR 0 5
65290: PUSH
65291: LD_INT 5
65293: ST_TO_ADDR
// end ;
65294: LD_VAR 0 5
65298: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65299: LD_INT 0
65301: PPUSH
65302: PPUSH
// if not driver or not IsInUnit ( driver ) then
65303: LD_VAR 0 1
65307: NOT
65308: PUSH
65309: LD_VAR 0 1
65313: PPUSH
65314: CALL_OW 310
65318: NOT
65319: OR
65320: IFFALSE 65324
// exit ;
65322: GO 65414
// vehicle := IsInUnit ( driver ) ;
65324: LD_ADDR_VAR 0 3
65328: PUSH
65329: LD_VAR 0 1
65333: PPUSH
65334: CALL_OW 310
65338: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65339: LD_VAR 0 1
65343: PPUSH
65344: LD_STRING \
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: LD_INT 0
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: PUSH
65374: LD_STRING E
65376: PUSH
65377: LD_INT 0
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: LD_VAR 0 3
65387: PUSH
65388: LD_INT 0
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: LD_INT 0
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PPUSH
65410: CALL_OW 446
// end ;
65414: LD_VAR 0 2
65418: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65419: LD_INT 0
65421: PPUSH
65422: PPUSH
// if not driver or not IsInUnit ( driver ) then
65423: LD_VAR 0 1
65427: NOT
65428: PUSH
65429: LD_VAR 0 1
65433: PPUSH
65434: CALL_OW 310
65438: NOT
65439: OR
65440: IFFALSE 65444
// exit ;
65442: GO 65534
// vehicle := IsInUnit ( driver ) ;
65444: LD_ADDR_VAR 0 3
65448: PUSH
65449: LD_VAR 0 1
65453: PPUSH
65454: CALL_OW 310
65458: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65459: LD_VAR 0 1
65463: PPUSH
65464: LD_STRING \
65466: PUSH
65467: LD_INT 0
65469: PUSH
65470: LD_INT 0
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: LD_INT 0
65481: PUSH
65482: LD_INT 0
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: PUSH
65494: LD_STRING E
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: LD_INT 0
65502: PUSH
65503: LD_VAR 0 3
65507: PUSH
65508: LD_INT 0
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PPUSH
65530: CALL_OW 447
// end ;
65534: LD_VAR 0 2
65538: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65539: LD_INT 0
65541: PPUSH
65542: PPUSH
65543: PPUSH
// tmp := [ ] ;
65544: LD_ADDR_VAR 0 5
65548: PUSH
65549: EMPTY
65550: ST_TO_ADDR
// for i in units do
65551: LD_ADDR_VAR 0 4
65555: PUSH
65556: LD_VAR 0 1
65560: PUSH
65561: FOR_IN
65562: IFFALSE 65600
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65564: LD_ADDR_VAR 0 5
65568: PUSH
65569: LD_VAR 0 5
65573: PPUSH
65574: LD_VAR 0 5
65578: PUSH
65579: LD_INT 1
65581: PLUS
65582: PPUSH
65583: LD_VAR 0 4
65587: PPUSH
65588: CALL_OW 256
65592: PPUSH
65593: CALL_OW 2
65597: ST_TO_ADDR
65598: GO 65561
65600: POP
65601: POP
// if not tmp then
65602: LD_VAR 0 5
65606: NOT
65607: IFFALSE 65611
// exit ;
65609: GO 65659
// if asc then
65611: LD_VAR 0 2
65615: IFFALSE 65639
// result := SortListByListAsc ( units , tmp ) else
65617: LD_ADDR_VAR 0 3
65621: PUSH
65622: LD_VAR 0 1
65626: PPUSH
65627: LD_VAR 0 5
65631: PPUSH
65632: CALL_OW 76
65636: ST_TO_ADDR
65637: GO 65659
// result := SortListByListDesc ( units , tmp ) ;
65639: LD_ADDR_VAR 0 3
65643: PUSH
65644: LD_VAR 0 1
65648: PPUSH
65649: LD_VAR 0 5
65653: PPUSH
65654: CALL_OW 77
65658: ST_TO_ADDR
// end ;
65659: LD_VAR 0 3
65663: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65664: LD_INT 0
65666: PPUSH
65667: PPUSH
// task := GetTaskList ( mech ) ;
65668: LD_ADDR_VAR 0 4
65672: PUSH
65673: LD_VAR 0 1
65677: PPUSH
65678: CALL_OW 437
65682: ST_TO_ADDR
// if not task then
65683: LD_VAR 0 4
65687: NOT
65688: IFFALSE 65692
// exit ;
65690: GO 65734
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65692: LD_ADDR_VAR 0 3
65696: PUSH
65697: LD_VAR 0 4
65701: PUSH
65702: LD_INT 1
65704: ARRAY
65705: PUSH
65706: LD_INT 1
65708: ARRAY
65709: PUSH
65710: LD_STRING r
65712: EQUAL
65713: PUSH
65714: LD_VAR 0 4
65718: PUSH
65719: LD_INT 1
65721: ARRAY
65722: PUSH
65723: LD_INT 4
65725: ARRAY
65726: PUSH
65727: LD_VAR 0 2
65731: EQUAL
65732: AND
65733: ST_TO_ADDR
// end ;
65734: LD_VAR 0 3
65738: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65739: LD_INT 0
65741: PPUSH
// SetDir ( unit , d ) ;
65742: LD_VAR 0 1
65746: PPUSH
65747: LD_VAR 0 4
65751: PPUSH
65752: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65756: LD_VAR 0 1
65760: PPUSH
65761: LD_VAR 0 2
65765: PPUSH
65766: LD_VAR 0 3
65770: PPUSH
65771: LD_VAR 0 5
65775: PPUSH
65776: CALL_OW 48
// end ;
65780: LD_VAR 0 6
65784: RET
// export function ToNaturalNumber ( number ) ; begin
65785: LD_INT 0
65787: PPUSH
// result := number div 1 ;
65788: LD_ADDR_VAR 0 2
65792: PUSH
65793: LD_VAR 0 1
65797: PUSH
65798: LD_INT 1
65800: DIV
65801: ST_TO_ADDR
// if number < 0 then
65802: LD_VAR 0 1
65806: PUSH
65807: LD_INT 0
65809: LESS
65810: IFFALSE 65820
// result := 0 ;
65812: LD_ADDR_VAR 0 2
65816: PUSH
65817: LD_INT 0
65819: ST_TO_ADDR
// end ; end_of_file
65820: LD_VAR 0 2
65824: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
65825: LD_INT 0
65827: PPUSH
// ar_miner := 81 ;
65828: LD_ADDR_EXP 117
65832: PUSH
65833: LD_INT 81
65835: ST_TO_ADDR
// ar_crane := 88 ;
65836: LD_ADDR_EXP 116
65840: PUSH
65841: LD_INT 88
65843: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
65844: LD_ADDR_EXP 111
65848: PUSH
65849: LD_INT 89
65851: ST_TO_ADDR
// us_hack := 99 ;
65852: LD_ADDR_EXP 112
65856: PUSH
65857: LD_INT 99
65859: ST_TO_ADDR
// us_artillery := 97 ;
65860: LD_ADDR_EXP 113
65864: PUSH
65865: LD_INT 97
65867: ST_TO_ADDR
// ar_bio_bomb := 91 ;
65868: LD_ADDR_EXP 114
65872: PUSH
65873: LD_INT 91
65875: ST_TO_ADDR
// ar_mortar := 92 ;
65876: LD_ADDR_EXP 115
65880: PUSH
65881: LD_INT 92
65883: ST_TO_ADDR
// ru_radar := 98 ;
65884: LD_ADDR_EXP 110
65888: PUSH
65889: LD_INT 98
65891: ST_TO_ADDR
// tech_Artillery := 80 ;
65892: LD_ADDR_EXP 118
65896: PUSH
65897: LD_INT 80
65899: ST_TO_ADDR
// tech_RadMat := 81 ;
65900: LD_ADDR_EXP 119
65904: PUSH
65905: LD_INT 81
65907: ST_TO_ADDR
// tech_BasicTools := 82 ;
65908: LD_ADDR_EXP 120
65912: PUSH
65913: LD_INT 82
65915: ST_TO_ADDR
// tech_Cargo := 83 ;
65916: LD_ADDR_EXP 121
65920: PUSH
65921: LD_INT 83
65923: ST_TO_ADDR
// tech_Track := 84 ;
65924: LD_ADDR_EXP 122
65928: PUSH
65929: LD_INT 84
65931: ST_TO_ADDR
// tech_Crane := 85 ;
65932: LD_ADDR_EXP 123
65936: PUSH
65937: LD_INT 85
65939: ST_TO_ADDR
// tech_Bulldozer := 86 ;
65940: LD_ADDR_EXP 124
65944: PUSH
65945: LD_INT 86
65947: ST_TO_ADDR
// tech_Hovercraft := 87 ;
65948: LD_ADDR_EXP 125
65952: PUSH
65953: LD_INT 87
65955: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
65956: LD_ADDR_EXP 126
65960: PUSH
65961: LD_INT 88
65963: ST_TO_ADDR
// class_mastodont := 31 ;
65964: LD_ADDR_EXP 127
65968: PUSH
65969: LD_INT 31
65971: ST_TO_ADDR
// class_horse := 21 ;
65972: LD_ADDR_EXP 128
65976: PUSH
65977: LD_INT 21
65979: ST_TO_ADDR
// end ;
65980: LD_VAR 0 1
65984: RET
// every 1 do
65985: GO 65987
65987: DISABLE
// InitGlobalVariables ; end_of_file
65988: CALL 65825 0 0
65992: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65993: LD_VAR 0 1
65997: PPUSH
65998: LD_VAR 0 2
66002: PPUSH
66003: LD_VAR 0 3
66007: PPUSH
66008: LD_VAR 0 4
66012: PPUSH
66013: LD_VAR 0 5
66017: PPUSH
66018: LD_VAR 0 6
66022: PPUSH
66023: CALL 9720 0 6
// end ;
66027: PPOPN 6
66029: END
