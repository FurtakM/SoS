// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 2217 0 0
// PrepareArabian ;
  23: CALL 1234 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5840 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_OWVAR 67
 672: ARRAY
 673: PPUSH
 674: CALL 504 0 2
// for i := 1 to 2 do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_INT 2
 690: PUSH
 691: FOR_TO
 692: IFFALSE 729
// begin hc_class := 21 ;
 694: LD_ADDR_OWVAR 28
 698: PUSH
 699: LD_INT 21
 701: ST_TO_ADDR
// hc_gallery :=  ;
 702: LD_ADDR_OWVAR 33
 706: PUSH
 707: LD_STRING 
 709: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 691
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 782
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end ;
 780: GO 744
 782: POP
 783: POP
// for i := 1 to 2 do
 784: LD_ADDR_VAR 0 3
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 2
 796: PUSH
 797: FOR_TO
 798: IFFALSE 835
// begin hc_class := 13 ;
 800: LD_ADDR_OWVAR 28
 804: PUSH
 805: LD_INT 13
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 816: CALL_OW 44
 820: PPUSH
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 49
// end ;
 833: GO 797
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 2
 841: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
// if not observer or not unit then
 847: LD_VAR 0 1
 851: NOT
 852: PUSH
 853: LD_VAR 0 2
 857: NOT
 858: OR
 859: IFFALSE 863
// exit ;
 861: GO 911
// if not See ( GetSide ( observer ) , unit ) then
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 292
 882: NOT
 883: IFFALSE 887
// exit ;
 885: GO 911
// result := GetDistUnits ( observer , unit ) < 12 ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 296
 906: PUSH
 907: LD_INT 12
 909: LESS
 910: ST_TO_ADDR
// end ;
 911: LD_VAR 0 3
 915: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 916: LD_INT 0
 918: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: CALL_OW 488
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ;
1003: LD_VAR 0 4
1007: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
1014: PPUSH
// if not unit then
1015: LD_VAR 0 1
1019: NOT
1020: IFFALSE 1024
// exit ;
1022: GO 1229
// side := GetSide ( unit ) ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 255
1038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_VAR 0 4
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_VAR 0 2
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 69
1076: ST_TO_ADDR
// if not tmp then
1077: LD_VAR 0 5
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1229
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 5
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 36025 0 4
1111: ST_TO_ADDR
// places := 1 ;
1112: LD_ADDR_VAR 0 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 7
1148: PUSH
1149: LD_INT 8
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1173
// places := 6 ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// for i in tmp do
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: LD_VAR 0 5
1182: PUSH
1183: FOR_IN
1184: IFFALSE 1227
// begin if UnitsInside ( i ) - places <= 0 then
1186: LD_VAR 0 6
1190: PPUSH
1191: CALL_OW 313
1195: PUSH
1196: LD_VAR 0 7
1200: MINUS
1201: PUSH
1202: LD_INT 0
1204: LESSEQUAL
1205: IFFALSE 1211
// continue else
1207: GO 1183
1209: GO 1225
// begin result := i ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_VAR 0 6
1220: ST_TO_ADDR
// exit ;
1221: POP
1222: POP
1223: GO 1229
// end ; end ;
1225: GO 1183
1227: POP
1228: POP
// end ; end_of_file
1229: LD_VAR 0 3
1233: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1234: LD_INT 0
1236: PPUSH
1237: PPUSH
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// uc_nation := 2 ;
1246: LD_ADDR_OWVAR 21
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1254: LD_ADDR_EXP 18
1258: PUSH
1259: LD_STRING Heike
1261: PPUSH
1262: LD_EXP 1
1266: NOT
1267: PPUSH
1268: LD_EXP 2
1272: PPUSH
1273: CALL 30453 0 3
1277: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1278: LD_ADDR_EXP 21
1282: PUSH
1283: LD_STRING Ibrahim
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL 30453 0 3
1301: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1302: LD_ADDR_EXP 19
1306: PUSH
1307: LD_STRING Givi
1309: PPUSH
1310: LD_EXP 1
1314: NOT
1315: PPUSH
1316: LD_EXP 2
1320: PPUSH
1321: CALL 30453 0 3
1325: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1326: LD_ADDR_EXP 22
1330: PUSH
1331: LD_STRING Kamil
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 2
1344: PPUSH
1345: CALL 30453 0 3
1349: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1350: LD_ADDR_EXP 23
1354: PUSH
1355: LD_STRING Kaia
1357: PPUSH
1358: LD_EXP 1
1362: NOT
1363: PPUSH
1364: LD_EXP 2
1368: PPUSH
1369: CALL 30453 0 3
1373: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1374: LD_ADDR_EXP 24
1378: PUSH
1379: LD_STRING Sophia
1381: PPUSH
1382: LD_EXP 1
1386: NOT
1387: PPUSH
1388: LD_EXP 2
1392: PPUSH
1393: CALL 30453 0 3
1397: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1398: LD_ADDR_EXP 25
1402: PUSH
1403: LD_STRING Markov
1405: PPUSH
1406: LD_EXP 1
1410: NOT
1411: PPUSH
1412: LD_EXP 2
1416: PPUSH
1417: CALL 30453 0 3
1421: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1422: LD_ADDR_EXP 28
1426: PUSH
1427: LD_STRING Aviradze
1429: PPUSH
1430: LD_EXP 1
1434: NOT
1435: PPUSH
1436: LD_EXP 2
1440: PPUSH
1441: CALL 30453 0 3
1445: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1446: LD_ADDR_EXP 27
1450: PUSH
1451: LD_STRING Kurt
1453: PPUSH
1454: LD_EXP 1
1458: NOT
1459: PPUSH
1460: LD_EXP 2
1464: PPUSH
1465: CALL 30453 0 3
1469: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1470: LD_ADDR_EXP 20
1474: PUSH
1475: LD_STRING Mike
1477: PPUSH
1478: LD_EXP 1
1482: NOT
1483: PPUSH
1484: LD_EXP 2
1488: PPUSH
1489: CALL 30453 0 3
1493: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1494: LD_ADDR_EXP 29
1498: PUSH
1499: LD_STRING 04_1_others
1501: PPUSH
1502: CALL_OW 31
1506: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1507: LD_ADDR_EXP 31
1511: PUSH
1512: LD_STRING 04_1_apes
1514: PPUSH
1515: CALL_OW 31
1519: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_STRING 04_1_Vehicles
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// if debug then
1535: LD_EXP 1
1539: IFFALSE 1758
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 40 , 40 ] , 1 ] ] ;
1541: LD_ADDR_EXP 30
1545: PUSH
1546: LD_INT 13
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 27
1557: PUSH
1558: LD_INT 2
1560: PUSH
1561: LD_INT 1000
1563: PUSH
1564: LD_INT 0
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PUSH
1574: LD_INT 3
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 13
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: LD_INT 25
1598: PUSH
1599: LD_INT 2
1601: PUSH
1602: LD_INT 1000
1604: PUSH
1605: LD_INT 0
1607: PUSH
1608: LD_INT 0
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 3
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 13
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: LD_INT 1
1636: PUSH
1637: LD_INT 27
1639: PUSH
1640: LD_INT 2
1642: PUSH
1643: LD_INT 1000
1645: PUSH
1646: LD_INT 0
1648: PUSH
1649: LD_INT 0
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 13
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 27
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 0
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 13
1712: PUSH
1713: LD_INT 1
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 32
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: LD_INT 1000
1727: PUSH
1728: LD_INT 40
1730: PUSH
1731: LD_INT 40
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// uc_side := 5 ;
1758: LD_ADDR_OWVAR 20
1762: PUSH
1763: LD_INT 5
1765: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1766: LD_ADDR_EXP 26
1770: PUSH
1771: LD_STRING Abdul
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: LD_STRING 
1779: PPUSH
1780: CALL 30453 0 3
1784: ST_TO_ADDR
// end ;
1785: LD_VAR 0 1
1789: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1790: LD_STRING 04_1_KaganCaptured
1792: PPUSH
1793: LD_INT 0
1795: PPUSH
1796: CALL_OW 30
1800: PUSH
1801: LD_INT 22
1803: PUSH
1804: LD_INT 5
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PPUSH
1811: CALL_OW 69
1815: NOT
1816: AND
1817: PUSH
1818: LD_INT 124
1820: PPUSH
1821: LD_INT 26
1823: PPUSH
1824: CALL_OW 428
1828: PUSH
1829: LD_INT 0
1831: EQUAL
1832: PUSH
1833: LD_INT 124
1835: PPUSH
1836: LD_INT 26
1838: PPUSH
1839: CALL_OW 428
1843: PPUSH
1844: CALL_OW 255
1848: PUSH
1849: LD_INT 2
1851: EQUAL
1852: XOR
1853: AND
1854: IFFALSE 2214
1856: GO 1858
1858: DISABLE
1859: LD_INT 0
1861: PPUSH
1862: PPUSH
// begin enable ;
1863: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1864: LD_EXP 33
1868: NOT
1869: PUSH
1870: LD_EXP 33
1874: PUSH
1875: LD_INT 4
1877: GREATER
1878: OR
1879: IFFALSE 1889
// cargoCounter := 1 ;
1881: LD_ADDR_EXP 33
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1889: LD_ADDR_VAR 0 2
1893: PUSH
1894: LD_INT 142
1896: PUSH
1897: LD_INT 15
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 129
1906: PUSH
1907: LD_INT 11
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 138
1916: PUSH
1917: LD_INT 9
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 133
1926: PUSH
1927: LD_INT 10
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: ST_TO_ADDR
// uc_side := 5 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 5
1947: ST_TO_ADDR
// uc_nation := 2 ;
1948: LD_ADDR_OWVAR 21
1952: PUSH
1953: LD_INT 2
1955: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1956: LD_INT 5
1958: PPUSH
1959: LD_INT 2
1961: PPUSH
1962: LD_INT 13
1964: PPUSH
1965: LD_INT 2
1967: PPUSH
1968: LD_INT 1
1970: PPUSH
1971: LD_INT 32
1973: PPUSH
1974: LD_INT 70
1976: PPUSH
1977: CALL 336 0 7
// veh := CreateVehicle ;
1981: LD_ADDR_VAR 0 1
1985: PUSH
1986: CALL_OW 45
1990: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1991: LD_VAR 0 1
1995: PPUSH
1996: LD_INT 3
1998: PPUSH
1999: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
2003: LD_VAR 0 1
2007: PPUSH
2008: LD_INT 8
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: CALL_OW 49
// if not cargoDriver then
2018: LD_EXP 32
2022: NOT
2023: IFFALSE 2048
// begin PrepareHuman ( false , 1 , 3 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 3
2033: PPUSH
2034: CALL_OW 380
// cargoDriver := CreateHuman ;
2038: LD_ADDR_EXP 32
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
2048: LD_EXP 32
2052: PPUSH
2053: LD_VAR 0 1
2057: PPUSH
2058: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
2062: LD_VAR 0 1
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 100
2072: PPUSH
2073: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
2077: LD_VAR 0 1
2081: PPUSH
2082: LD_VAR 0 2
2086: PUSH
2087: LD_EXP 33
2091: ARRAY
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: PPUSH
2097: LD_VAR 0 2
2101: PUSH
2102: LD_EXP 33
2106: ARRAY
2107: PUSH
2108: LD_INT 2
2110: ARRAY
2111: PPUSH
2112: CALL_OW 111
// AddComUnload ( veh ) ;
2116: LD_VAR 0 1
2120: PPUSH
2121: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
2125: LD_VAR 0 1
2129: PPUSH
2130: LD_INT 133
2132: PPUSH
2133: LD_INT 2
2135: PPUSH
2136: CALL_OW 171
// wait ( 0 0$5 ) ;
2140: LD_INT 175
2142: PPUSH
2143: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2147: LD_INT 35
2149: PPUSH
2150: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
2154: LD_VAR 0 1
2158: PPUSH
2159: LD_INT 133
2161: PPUSH
2162: LD_INT 2
2164: PPUSH
2165: CALL_OW 307
2169: PUSH
2170: LD_VAR 0 1
2174: PPUSH
2175: LD_INT 8
2177: PPUSH
2178: CALL_OW 308
2182: OR
2183: IFFALSE 2147
// RemoveUnit ( cargoDriver ) ;
2185: LD_EXP 32
2189: PPUSH
2190: CALL_OW 64
// RemoveUnit ( veh ) ;
2194: LD_VAR 0 1
2198: PPUSH
2199: CALL_OW 64
// if tick >= 20 20$00 then
2203: LD_OWVAR 1
2207: PUSH
2208: LD_INT 42000
2210: GREATEREQUAL
2211: IFFALSE 2214
// disable ;
2213: DISABLE
// end ; end_of_file
2214: PPOPN 2
2216: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
2227: PPUSH
// uc_side := 3 ;
2228: LD_ADDR_OWVAR 20
2232: PUSH
2233: LD_INT 3
2235: ST_TO_ADDR
// uc_nation := 3 ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 3
2243: ST_TO_ADDR
// ruForce := [ ] ;
2244: LD_ADDR_EXP 37
2248: PUSH
2249: EMPTY
2250: ST_TO_ADDR
// ruMech := [ ] ;
2251: LD_ADDR_EXP 39
2255: PUSH
2256: EMPTY
2257: ST_TO_ADDR
// ruEng := [ ] ;
2258: LD_ADDR_EXP 38
2262: PUSH
2263: EMPTY
2264: ST_TO_ADDR
// ruSci := [ ] ;
2265: LD_ADDR_EXP 40
2269: PUSH
2270: EMPTY
2271: ST_TO_ADDR
// ruMobile := [ ] ;
2272: LD_ADDR_EXP 41
2276: PUSH
2277: EMPTY
2278: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2279: LD_ADDR_EXP 34
2283: PUSH
2284: LD_STRING Burlak
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: LD_STRING 
2292: PPUSH
2293: CALL 30453 0 3
2297: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2298: LD_ADDR_EXP 35
2302: PUSH
2303: LD_STRING Gaydar
2305: PPUSH
2306: LD_INT 0
2308: PPUSH
2309: LD_STRING 
2311: PPUSH
2312: CALL 30453 0 3
2316: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2317: LD_ADDR_EXP 36
2321: PUSH
2322: LD_STRING Kuzmov
2324: PPUSH
2325: LD_INT 0
2327: PPUSH
2328: LD_STRING 
2330: PPUSH
2331: CALL 30453 0 3
2335: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2336: LD_EXP 36
2340: PPUSH
2341: LD_INT 200
2343: PPUSH
2344: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2348: LD_INT 200
2350: PPUSH
2351: LD_STRING chuikov
2353: PPUSH
2354: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2358: LD_INT 200
2360: PPUSH
2361: CALL_OW 274
2365: PPUSH
2366: LD_INT 1
2368: PPUSH
2369: LD_INT 800
2371: PUSH
2372: LD_INT 1000
2374: PUSH
2375: LD_INT 1250
2377: PUSH
2378: LD_INT 1300
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: PUSH
2387: LD_OWVAR 67
2391: ARRAY
2392: PPUSH
2393: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2397: LD_INT 200
2399: PPUSH
2400: CALL_OW 274
2404: PPUSH
2405: LD_INT 2
2407: PPUSH
2408: LD_INT 160
2410: PPUSH
2411: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2415: LD_INT 225
2417: PPUSH
2418: CALL_OW 274
2422: PPUSH
2423: LD_INT 1
2425: PPUSH
2426: LD_INT 200
2428: PPUSH
2429: CALL_OW 277
// oil := 150 ;
2433: LD_ADDR_VAR 0 9
2437: PUSH
2438: LD_INT 150
2440: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2441: LD_EXP 5
2445: PUSH
2446: LD_INT 94500
2448: PUSH
2449: LD_INT 84000
2451: PUSH
2452: LD_INT 73500
2454: PUSH
2455: LD_INT 67200
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: PUSH
2464: LD_OWVAR 67
2468: ARRAY
2469: GREATEREQUAL
2470: IFFALSE 2625
// begin oil := 450 ;
2472: LD_ADDR_VAR 0 9
2476: PUSH
2477: LD_INT 450
2479: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2480: LD_ADDR_VAR 0 7
2484: PUSH
2485: LD_INT 123
2487: PUSH
2488: LD_INT 17
2490: PUSH
2491: LD_INT 3
2493: PUSH
2494: LD_INT 31
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: PUSH
2503: LD_INT 152
2505: PUSH
2506: LD_INT 38
2508: PUSH
2509: LD_INT 3
2511: PUSH
2512: LD_INT 31
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 81
2523: PUSH
2524: LD_INT 6
2526: PUSH
2527: LD_INT 4
2529: PUSH
2530: LD_INT 31
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 113
2541: PUSH
2542: LD_INT 67
2544: PUSH
2545: LD_INT 4
2547: PUSH
2548: LD_INT 32
2550: PUSH
2551: EMPTY
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: ST_TO_ADDR
// for i in tmp do
2563: LD_ADDR_VAR 0 4
2567: PUSH
2568: LD_VAR 0 7
2572: PUSH
2573: FOR_IN
2574: IFFALSE 2623
// begin bc_type := i [ 4 ] ;
2576: LD_ADDR_OWVAR 42
2580: PUSH
2581: LD_VAR 0 4
2585: PUSH
2586: LD_INT 4
2588: ARRAY
2589: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 1
2597: ARRAY
2598: PPUSH
2599: LD_VAR 0 4
2603: PUSH
2604: LD_INT 2
2606: ARRAY
2607: PPUSH
2608: LD_VAR 0 4
2612: PUSH
2613: LD_INT 3
2615: ARRAY
2616: PPUSH
2617: CALL_OW 47
// end ;
2621: GO 2573
2623: POP
2624: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2625: LD_INT 225
2627: PPUSH
2628: CALL_OW 274
2632: PPUSH
2633: LD_INT 2
2635: PPUSH
2636: LD_VAR 0 9
2640: PPUSH
2641: CALL_OW 277
// if Difficulty > 1 then
2645: LD_OWVAR 67
2649: PUSH
2650: LD_INT 1
2652: GREATER
2653: IFFALSE 2748
// begin bc_type := b_bunker ;
2655: LD_ADDR_OWVAR 42
2659: PUSH
2660: LD_INT 32
2662: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2663: LD_ADDR_VAR 0 7
2667: PUSH
2668: LD_INT 121
2670: PUSH
2671: LD_INT 85
2673: PUSH
2674: LD_INT 5
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: LIST
2681: PUSH
2682: LD_INT 93
2684: PUSH
2685: LD_INT 72
2687: PUSH
2688: LD_INT 1
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: LIST
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: ST_TO_ADDR
// for i in tmp do
2700: LD_ADDR_VAR 0 4
2704: PUSH
2705: LD_VAR 0 7
2709: PUSH
2710: FOR_IN
2711: IFFALSE 2746
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2713: LD_VAR 0 4
2717: PUSH
2718: LD_INT 1
2720: ARRAY
2721: PPUSH
2722: LD_VAR 0 4
2726: PUSH
2727: LD_INT 2
2729: ARRAY
2730: PPUSH
2731: LD_VAR 0 4
2735: PUSH
2736: LD_INT 3
2738: ARRAY
2739: PPUSH
2740: CALL_OW 47
2744: GO 2710
2746: POP
2747: POP
// end ; base := GetBase ( ruMainBase ) ;
2748: LD_ADDR_VAR 0 2
2752: PUSH
2753: LD_INT 200
2755: PPUSH
2756: CALL_OW 274
2760: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2761: LD_ADDR_VAR 0 3
2765: PUSH
2766: LD_VAR 0 2
2770: PPUSH
2771: CALL_OW 417
2775: ST_TO_ADDR
// for b in blist do
2776: LD_ADDR_VAR 0 5
2780: PUSH
2781: LD_VAR 0 3
2785: PUSH
2786: FOR_IN
2787: IFFALSE 3238
// begin if b [ 1 ] = b_factory then
2789: LD_VAR 0 5
2793: PUSH
2794: LD_INT 1
2796: ARRAY
2797: PUSH
2798: LD_INT 3
2800: EQUAL
2801: IFFALSE 2952
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2803: LD_ADDR_VAR 0 8
2807: PUSH
2808: LD_VAR 0 5
2812: PUSH
2813: LD_INT 2
2815: ARRAY
2816: PPUSH
2817: LD_VAR 0 5
2821: PUSH
2822: LD_INT 3
2824: ARRAY
2825: PPUSH
2826: CALL_OW 428
2830: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2831: LD_ADDR_VAR 0 4
2835: PUSH
2836: DOUBLE
2837: LD_INT 1
2839: DEC
2840: ST_TO_ADDR
2841: LD_INT 2
2843: PUSH
2844: LD_INT 2
2846: PUSH
2847: LD_OWVAR 67
2851: PLUS
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_EXP 10
2861: PUSH
2862: LD_INT 3
2864: GREATER
2865: PUSH
2866: LD_INT 1
2868: PLUS
2869: ARRAY
2870: PUSH
2871: FOR_TO
2872: IFFALSE 2948
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2874: LD_INT 0
2876: PPUSH
2877: LD_INT 3
2879: PPUSH
2880: LD_INT 1
2882: PUSH
2883: LD_OWVAR 67
2887: PLUS
2888: PPUSH
2889: CALL_OW 380
// un := CreateHuman ;
2893: LD_ADDR_VAR 0 6
2897: PUSH
2898: CALL_OW 44
2902: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2903: LD_ADDR_EXP 39
2907: PUSH
2908: LD_EXP 39
2912: PPUSH
2913: LD_EXP 39
2917: PUSH
2918: LD_INT 1
2920: PLUS
2921: PPUSH
2922: LD_VAR 0 6
2926: PPUSH
2927: CALL_OW 1
2931: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2932: LD_VAR 0 6
2936: PPUSH
2937: LD_VAR 0 8
2941: PPUSH
2942: CALL_OW 52
// end ;
2946: GO 2871
2948: POP
2949: POP
// end else
2950: GO 3236
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2952: LD_VAR 0 5
2956: PUSH
2957: LD_INT 1
2959: ARRAY
2960: PUSH
2961: LD_INT 6
2963: PUSH
2964: LD_INT 7
2966: PUSH
2967: LD_INT 8
2969: PUSH
2970: LD_INT 10
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: IN
2979: IFFALSE 3089
// begin for i := 1 to 2 do
2981: LD_ADDR_VAR 0 4
2985: PUSH
2986: DOUBLE
2987: LD_INT 1
2989: DEC
2990: ST_TO_ADDR
2991: LD_INT 2
2993: PUSH
2994: FOR_TO
2995: IFFALSE 3085
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2997: LD_INT 0
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: LD_OWVAR 67
3007: PPUSH
3008: CALL_OW 380
// un := CreateHuman ;
3012: LD_ADDR_VAR 0 6
3016: PUSH
3017: CALL_OW 44
3021: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
3022: LD_ADDR_EXP 40
3026: PUSH
3027: LD_EXP 40
3031: PPUSH
3032: LD_EXP 40
3036: PUSH
3037: LD_INT 1
3039: PLUS
3040: PPUSH
3041: LD_VAR 0 6
3045: PPUSH
3046: CALL_OW 1
3050: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3051: LD_VAR 0 6
3055: PPUSH
3056: LD_VAR 0 5
3060: PUSH
3061: LD_INT 2
3063: ARRAY
3064: PPUSH
3065: LD_VAR 0 5
3069: PUSH
3070: LD_INT 3
3072: ARRAY
3073: PPUSH
3074: CALL_OW 428
3078: PPUSH
3079: CALL_OW 52
// end ;
3083: GO 2994
3085: POP
3086: POP
// end else
3087: GO 3236
// if b [ 1 ] = b_warehouse then
3089: LD_VAR 0 5
3093: PUSH
3094: LD_INT 1
3096: ARRAY
3097: PUSH
3098: LD_INT 1
3100: EQUAL
3101: IFFALSE 3236
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3103: LD_ADDR_VAR 0 4
3107: PUSH
3108: DOUBLE
3109: LD_INT 1
3111: DEC
3112: ST_TO_ADDR
3113: LD_INT 1
3115: PUSH
3116: LD_INT 1
3118: PUSH
3119: LD_OWVAR 67
3123: PLUS
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PUSH
3129: LD_EXP 10
3133: PUSH
3134: LD_INT 3
3136: GREATER
3137: PUSH
3138: LD_INT 1
3140: PLUS
3141: ARRAY
3142: PUSH
3143: FOR_TO
3144: IFFALSE 3234
// begin PrepareHuman ( false , 2 , Difficulty ) ;
3146: LD_INT 0
3148: PPUSH
3149: LD_INT 2
3151: PPUSH
3152: LD_OWVAR 67
3156: PPUSH
3157: CALL_OW 380
// un := CreateHuman ;
3161: LD_ADDR_VAR 0 6
3165: PUSH
3166: CALL_OW 44
3170: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
3171: LD_ADDR_EXP 38
3175: PUSH
3176: LD_EXP 38
3180: PPUSH
3181: LD_EXP 38
3185: PUSH
3186: LD_INT 1
3188: PLUS
3189: PPUSH
3190: LD_VAR 0 6
3194: PPUSH
3195: CALL_OW 1
3199: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3200: LD_VAR 0 6
3204: PPUSH
3205: LD_VAR 0 5
3209: PUSH
3210: LD_INT 2
3212: ARRAY
3213: PPUSH
3214: LD_VAR 0 5
3218: PUSH
3219: LD_INT 3
3221: ARRAY
3222: PPUSH
3223: CALL_OW 428
3227: PPUSH
3228: CALL_OW 52
// end ;
3232: GO 3143
3234: POP
3235: POP
// end ; end ;
3236: GO 2786
3238: POP
3239: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3240: LD_ADDR_VAR 0 3
3244: PUSH
3245: LD_INT 22
3247: PUSH
3248: LD_INT 3
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 21
3257: PUSH
3258: LD_INT 3
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 69
3273: ST_TO_ADDR
// for b in blist do
3274: LD_ADDR_VAR 0 5
3278: PUSH
3279: LD_VAR 0 3
3283: PUSH
3284: FOR_IN
3285: IFFALSE 3307
// SetBLevel ( b , 3 + Difficulty ) ;
3287: LD_VAR 0 5
3291: PPUSH
3292: LD_INT 3
3294: PUSH
3295: LD_OWVAR 67
3299: PLUS
3300: PPUSH
3301: CALL_OW 241
3305: GO 3284
3307: POP
3308: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3309: LD_ADDR_VAR 0 3
3313: PUSH
3314: LD_INT 22
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: LD_INT 30
3326: PUSH
3327: LD_INT 32
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: PPUSH
3338: CALL_OW 69
3342: ST_TO_ADDR
// for b in blist do
3343: LD_ADDR_VAR 0 5
3347: PUSH
3348: LD_VAR 0 3
3352: PUSH
3353: FOR_IN
3354: IFFALSE 3463
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3356: LD_INT 0
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: LD_INT 1
3364: PUSH
3365: LD_OWVAR 67
3369: PLUS
3370: PPUSH
3371: CALL_OW 380
// un := CreateHuman ;
3375: LD_ADDR_VAR 0 6
3379: PUSH
3380: CALL_OW 44
3384: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3385: LD_ADDR_EXP 37
3389: PUSH
3390: LD_EXP 37
3394: PPUSH
3395: LD_EXP 37
3399: PUSH
3400: LD_INT 1
3402: PLUS
3403: PPUSH
3404: LD_VAR 0 6
3408: PPUSH
3409: CALL_OW 1
3413: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3414: LD_VAR 0 6
3418: PPUSH
3419: LD_VAR 0 5
3423: PPUSH
3424: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3428: LD_VAR 0 5
3432: PPUSH
3433: LD_INT 44
3435: PUSH
3436: LD_INT 43
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PUSH
3443: LD_VAR 0 5
3447: PUSH
3448: LD_INT 2
3450: MOD
3451: PUSH
3452: LD_INT 1
3454: PLUS
3455: ARRAY
3456: PPUSH
3457: CALL_OW 431
// end ;
3461: GO 3353
3463: POP
3464: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3465: LD_ADDR_VAR 0 3
3469: PUSH
3470: LD_INT 22
3472: PUSH
3473: LD_INT 3
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: LD_INT 30
3482: PUSH
3483: LD_INT 31
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PPUSH
3494: CALL_OW 69
3498: ST_TO_ADDR
// for b in blist do
3499: LD_ADDR_VAR 0 5
3503: PUSH
3504: LD_VAR 0 3
3508: PUSH
3509: FOR_IN
3510: IFFALSE 3609
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3512: LD_INT 0
3514: PPUSH
3515: LD_INT 1
3517: PPUSH
3518: LD_INT 1
3520: PUSH
3521: LD_OWVAR 67
3525: PLUS
3526: PPUSH
3527: CALL_OW 380
// un := CreateHuman ;
3531: LD_ADDR_VAR 0 6
3535: PUSH
3536: CALL_OW 44
3540: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3541: LD_ADDR_EXP 37
3545: PUSH
3546: LD_EXP 37
3550: PPUSH
3551: LD_EXP 37
3555: PUSH
3556: LD_INT 1
3558: PLUS
3559: PPUSH
3560: LD_VAR 0 6
3564: PPUSH
3565: CALL_OW 1
3569: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3570: LD_VAR 0 6
3574: PPUSH
3575: LD_VAR 0 5
3579: PPUSH
3580: CALL_OW 254
3584: PUSH
3585: LD_INT 3
3587: PLUS
3588: PPUSH
3589: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3593: LD_VAR 0 6
3597: PPUSH
3598: LD_VAR 0 5
3602: PPUSH
3603: CALL_OW 52
// end ;
3607: GO 3509
3609: POP
3610: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3611: LD_ADDR_VAR 0 3
3615: PUSH
3616: LD_INT 22
3618: PUSH
3619: LD_INT 3
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: LD_INT 30
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 30
3641: PUSH
3642: LD_INT 5
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: LIST
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PPUSH
3658: CALL_OW 69
3662: ST_TO_ADDR
// for b in blist do
3663: LD_ADDR_VAR 0 5
3667: PUSH
3668: LD_VAR 0 3
3672: PUSH
3673: FOR_IN
3674: IFFALSE 3770
// begin for i := 1 to 2 do
3676: LD_ADDR_VAR 0 4
3680: PUSH
3681: DOUBLE
3682: LD_INT 1
3684: DEC
3685: ST_TO_ADDR
3686: LD_INT 2
3688: PUSH
3689: FOR_TO
3690: IFFALSE 3766
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3692: LD_INT 0
3694: PPUSH
3695: LD_INT 1
3697: PPUSH
3698: LD_INT 1
3700: PUSH
3701: LD_OWVAR 67
3705: PLUS
3706: PPUSH
3707: CALL_OW 380
// un := CreateHuman ;
3711: LD_ADDR_VAR 0 6
3715: PUSH
3716: CALL_OW 44
3720: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3721: LD_ADDR_EXP 37
3725: PUSH
3726: LD_EXP 37
3730: PPUSH
3731: LD_EXP 37
3735: PUSH
3736: LD_INT 1
3738: PLUS
3739: PPUSH
3740: LD_VAR 0 6
3744: PPUSH
3745: CALL_OW 1
3749: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3750: LD_VAR 0 6
3754: PPUSH
3755: LD_VAR 0 5
3759: PPUSH
3760: CALL_OW 52
// end ;
3764: GO 3689
3766: POP
3767: POP
// end ;
3768: GO 3673
3770: POP
3771: POP
// if ibrahimOnRuSide then
3772: LD_EXP 3
3776: IFFALSE 3874
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3778: LD_ADDR_EXP 21
3782: PUSH
3783: LD_STRING IbrahimRu
3785: PPUSH
3786: LD_INT 0
3788: PPUSH
3789: LD_STRING 
3791: PPUSH
3792: CALL 30453 0 3
3796: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3797: LD_EXP 21
3801: PPUSH
3802: LD_INT 121
3804: PPUSH
3805: LD_INT 78
3807: PPUSH
3808: LD_INT 0
3810: PPUSH
3811: CALL_OW 48
// ComHold ( Ibrahim ) ;
3815: LD_EXP 21
3819: PPUSH
3820: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3824: LD_INT 1
3826: PPUSH
3827: LD_INT 1
3829: PPUSH
3830: LD_INT 2
3832: PPUSH
3833: CALL_OW 380
// ruSol := CreateHuman ;
3837: LD_ADDR_EXP 42
3841: PUSH
3842: CALL_OW 44
3846: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3847: LD_EXP 42
3851: PPUSH
3852: LD_INT 121
3854: PPUSH
3855: LD_INT 75
3857: PPUSH
3858: LD_INT 0
3860: PPUSH
3861: CALL_OW 48
// ComHold ( ruSol ) ;
3865: LD_EXP 42
3869: PPUSH
3870: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3874: LD_ADDR_VAR 0 4
3878: PUSH
3879: DOUBLE
3880: LD_INT 1
3882: DEC
3883: ST_TO_ADDR
3884: LD_INT 2
3886: PUSH
3887: LD_INT 2
3889: PUSH
3890: LD_OWVAR 67
3894: PLUS
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: PUSH
3900: LD_EXP 10
3904: PUSH
3905: LD_INT 3
3907: GREATER
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: ARRAY
3913: PUSH
3914: FOR_TO
3915: IFFALSE 3984
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3917: LD_VAR 0 8
3921: PPUSH
3922: LD_INT 21
3924: PUSH
3925: LD_INT 23
3927: PUSH
3928: LD_INT 24
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: LIST
3935: PUSH
3936: LD_VAR 0 4
3940: PUSH
3941: LD_INT 3
3943: MOD
3944: PUSH
3945: LD_INT 1
3947: PLUS
3948: ARRAY
3949: PPUSH
3950: LD_INT 1
3952: PPUSH
3953: LD_INT 1
3955: PPUSH
3956: LD_INT 43
3958: PUSH
3959: LD_INT 44
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: CALL_OW 185
3982: GO 3914
3984: POP
3985: POP
// end ;
3986: LD_VAR 0 1
3990: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3991: LD_EXP 41
3995: PUSH
3996: LD_EXP 4
4000: NOT
4001: AND
4002: IFFALSE 4489
4004: GO 4006
4006: DISABLE
4007: LD_INT 0
4009: PPUSH
4010: PPUSH
4011: PPUSH
4012: PPUSH
4013: PPUSH
// begin enable ;
4014: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
4015: LD_ADDR_VAR 0 2
4019: PUSH
4020: LD_EXP 41
4024: PPUSH
4025: LD_INT 21
4027: PUSH
4028: LD_INT 2
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: PPUSH
4035: CALL_OW 72
4039: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
4040: LD_ADDR_VAR 0 4
4044: PUSH
4045: LD_INT 81
4047: PUSH
4048: LD_INT 3
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 2
4057: PUSH
4058: LD_INT 95
4060: PUSH
4061: LD_INT 4
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 95
4070: PUSH
4071: LD_INT 5
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: LD_INT 95
4080: PUSH
4081: LD_INT 6
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 95
4090: PUSH
4091: LD_INT 7
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PPUSH
4109: CALL_OW 69
4113: ST_TO_ADDR
// for i in filter do
4114: LD_ADDR_VAR 0 1
4118: PUSH
4119: LD_VAR 0 2
4123: PUSH
4124: FOR_IN
4125: IFFALSE 4487
// begin tmp := IsDrivenBy ( i ) ;
4127: LD_ADDR_VAR 0 3
4131: PUSH
4132: LD_VAR 0 1
4136: PPUSH
4137: CALL_OW 311
4141: ST_TO_ADDR
// if not tmp then
4142: LD_VAR 0 3
4146: NOT
4147: IFFALSE 4151
// continue ;
4149: GO 4124
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4151: LD_VAR 0 1
4155: PPUSH
4156: CALL_OW 261
4160: PUSH
4161: LD_INT 90
4163: GREATER
4164: PUSH
4165: LD_VAR 0 1
4169: PPUSH
4170: CALL_OW 110
4174: PUSH
4175: LD_INT 2
4177: EQUAL
4178: AND
4179: IFFALSE 4195
// SetTag ( i , 0 ) else
4181: LD_VAR 0 1
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 109
4193: GO 4238
// if GetTag ( i ) = 2 then
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL_OW 110
4204: PUSH
4205: LD_INT 2
4207: EQUAL
4208: IFFALSE 4238
// begin x := rand ( 1 , 2 ) ;
4210: LD_ADDR_VAR 0 5
4214: PUSH
4215: LD_INT 1
4217: PPUSH
4218: LD_INT 2
4220: PPUSH
4221: CALL_OW 12
4225: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 200
4233: PPUSH
4234: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4238: LD_VAR 0 1
4242: PPUSH
4243: CALL_OW 256
4247: PUSH
4248: LD_INT 600
4250: GREATEREQUAL
4251: PUSH
4252: LD_VAR 0 1
4256: PPUSH
4257: CALL_OW 110
4261: NOT
4262: AND
4263: IFFALSE 4289
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4265: LD_VAR 0 1
4269: PPUSH
4270: LD_VAR 0 4
4274: PPUSH
4275: LD_VAR 0 1
4279: PPUSH
4280: CALL_OW 74
4284: PPUSH
4285: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4289: LD_VAR 0 1
4293: PPUSH
4294: CALL_OW 256
4298: PUSH
4299: LD_INT 600
4301: LESS
4302: PUSH
4303: LD_VAR 0 1
4307: PPUSH
4308: CALL_OW 110
4312: NOT
4313: AND
4314: IFFALSE 4343
// begin SetTag ( i , 1 ) ;
4316: LD_VAR 0 1
4320: PPUSH
4321: LD_INT 1
4323: PPUSH
4324: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4328: LD_VAR 0 1
4332: PPUSH
4333: LD_INT 112
4335: PPUSH
4336: LD_INT 119
4338: PPUSH
4339: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 110
4352: PUSH
4353: LD_INT 1
4355: EQUAL
4356: PUSH
4357: LD_VAR 0 1
4361: PPUSH
4362: LD_INT 112
4364: PPUSH
4365: LD_INT 119
4367: PPUSH
4368: CALL_OW 297
4372: PUSH
4373: LD_INT 9
4375: LESS
4376: AND
4377: PUSH
4378: LD_VAR 0 3
4382: AND
4383: IFFALSE 4485
// begin ComExitVehicle ( tmp ) ;
4385: LD_VAR 0 3
4389: PPUSH
4390: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_VAR 0 1
4403: PPUSH
4404: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4408: LD_INT 35
4410: PPUSH
4411: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4415: LD_VAR 0 1
4419: PPUSH
4420: CALL_OW 256
4424: PUSH
4425: LD_INT 1000
4427: EQUAL
4428: IFFALSE 4408
// ComEnterUnit ( tmp , i ) ;
4430: LD_VAR 0 3
4434: PPUSH
4435: LD_VAR 0 1
4439: PPUSH
4440: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4444: LD_VAR 0 1
4448: PPUSH
4449: CALL_OW 261
4453: PUSH
4454: LD_INT 50
4456: LESSEQUAL
4457: IFFALSE 4473
// SetTag ( i , 2 ) else
4459: LD_VAR 0 1
4463: PPUSH
4464: LD_INT 2
4466: PPUSH
4467: CALL_OW 109
4471: GO 4485
// SetTag ( i , 0 ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 0
4480: PPUSH
4481: CALL_OW 109
// end ; end ;
4485: GO 4124
4487: POP
4488: POP
// end ;
4489: PPOPN 5
4491: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4492: LD_EXP 4
4496: NOT
4497: PUSH
4498: LD_EXP 38
4502: AND
4503: IFFALSE 4764
4505: GO 4507
4507: DISABLE
4508: LD_INT 0
4510: PPUSH
4511: PPUSH
4512: PPUSH
4513: PPUSH
// begin enable ;
4514: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: LD_INT 3
4522: PPUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 3
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PUSH
4533: LD_INT 21
4535: PUSH
4536: LD_INT 3
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 3
4545: PUSH
4546: LD_INT 24
4548: PUSH
4549: LD_INT 1000
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: PPUSH
4565: CALL_OW 70
4569: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: LD_EXP 38
4579: PPUSH
4580: LD_INT 50
4582: PUSH
4583: EMPTY
4584: LIST
4585: PPUSH
4586: CALL_OW 72
4590: ST_TO_ADDR
// if filter and tmp then
4591: LD_VAR 0 2
4595: PUSH
4596: LD_VAR 0 3
4600: AND
4601: IFFALSE 4693
// begin for i in tmp do
4603: LD_ADDR_VAR 0 1
4607: PUSH
4608: LD_VAR 0 3
4612: PUSH
4613: FOR_IN
4614: IFFALSE 4689
// begin if GetTag ( i ) = tEscape then
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 110
4625: PUSH
4626: LD_EXP 17
4630: EQUAL
4631: IFFALSE 4635
// continue ;
4633: GO 4613
// if IsInUnit ( i ) then
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 310
4644: IFFALSE 4657
// ComExitBuilding ( i ) else
4646: LD_VAR 0 1
4650: PPUSH
4651: CALL_OW 122
4655: GO 4687
// if not HasTask ( i ) then
4657: LD_VAR 0 1
4661: PPUSH
4662: CALL_OW 314
4666: NOT
4667: IFFALSE 4687
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4669: LD_VAR 0 1
4673: PPUSH
4674: LD_VAR 0 2
4678: PUSH
4679: LD_INT 1
4681: ARRAY
4682: PPUSH
4683: CALL_OW 130
// end ;
4687: GO 4613
4689: POP
4690: POP
// end else
4691: GO 4764
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4693: LD_VAR 0 3
4697: PPUSH
4698: LD_INT 3
4700: PUSH
4701: LD_INT 54
4703: PUSH
4704: EMPTY
4705: LIST
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: PPUSH
4711: CALL_OW 72
4715: IFFALSE 4764
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4717: LD_ADDR_VAR 0 1
4721: PUSH
4722: LD_VAR 0 3
4726: PPUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 54
4732: PUSH
4733: EMPTY
4734: LIST
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PPUSH
4740: CALL_OW 72
4744: PUSH
4745: FOR_IN
4746: IFFALSE 4762
// ComEnterUnit ( i , ruMainBase ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 200
4755: PPUSH
4756: CALL_OW 120
4760: GO 4745
4762: POP
4763: POP
// end ; end ;
4764: PPOPN 4
4766: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4767: LD_EXP 4
4771: NOT
4772: PUSH
4773: LD_EXP 40
4777: AND
4778: IFFALSE 5057
4780: GO 4782
4782: DISABLE
4783: LD_INT 0
4785: PPUSH
4786: PPUSH
4787: PPUSH
4788: PPUSH
// begin enable ;
4789: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4790: LD_ADDR_VAR 0 2
4794: PUSH
4795: LD_INT 3
4797: PPUSH
4798: LD_INT 22
4800: PUSH
4801: LD_INT 3
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PUSH
4808: LD_INT 21
4810: PUSH
4811: LD_INT 1
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 3
4820: PUSH
4821: LD_INT 24
4823: PUSH
4824: LD_INT 1000
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: PPUSH
4840: CALL_OW 70
4844: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4845: LD_ADDR_VAR 0 3
4849: PUSH
4850: LD_EXP 40
4854: PPUSH
4855: LD_INT 50
4857: PUSH
4858: EMPTY
4859: LIST
4860: PPUSH
4861: CALL_OW 72
4865: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4866: LD_ADDR_VAR 0 4
4870: PUSH
4871: LD_INT 118
4873: PPUSH
4874: LD_INT 121
4876: PPUSH
4877: CALL_OW 428
4881: ST_TO_ADDR
// if filter and tmp then
4882: LD_VAR 0 2
4886: PUSH
4887: LD_VAR 0 3
4891: AND
4892: IFFALSE 4984
// begin for i in tmp do
4894: LD_ADDR_VAR 0 1
4898: PUSH
4899: LD_VAR 0 3
4903: PUSH
4904: FOR_IN
4905: IFFALSE 4980
// begin if GetTag ( i ) = tEscape then
4907: LD_VAR 0 1
4911: PPUSH
4912: CALL_OW 110
4916: PUSH
4917: LD_EXP 17
4921: EQUAL
4922: IFFALSE 4926
// continue ;
4924: GO 4904
// if IsInUnit ( i ) then
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 310
4935: IFFALSE 4948
// ComExitBuilding ( i ) else
4937: LD_VAR 0 1
4941: PPUSH
4942: CALL_OW 122
4946: GO 4978
// if not HasTask ( i ) then
4948: LD_VAR 0 1
4952: PPUSH
4953: CALL_OW 314
4957: NOT
4958: IFFALSE 4978
// ComHeal ( i , filter [ 1 ] ) ;
4960: LD_VAR 0 1
4964: PPUSH
4965: LD_VAR 0 2
4969: PUSH
4970: LD_INT 1
4972: ARRAY
4973: PPUSH
4974: CALL_OW 128
// end ;
4978: GO 4904
4980: POP
4981: POP
// end else
4982: GO 5057
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4984: LD_VAR 0 3
4988: PPUSH
4989: LD_INT 3
4991: PUSH
4992: LD_INT 54
4994: PUSH
4995: EMPTY
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 72
5006: IFFALSE 5057
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
5008: LD_ADDR_VAR 0 1
5012: PUSH
5013: LD_VAR 0 3
5017: PPUSH
5018: LD_INT 3
5020: PUSH
5021: LD_INT 54
5023: PUSH
5024: EMPTY
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PPUSH
5031: CALL_OW 72
5035: PUSH
5036: FOR_IN
5037: IFFALSE 5055
// ComEnterUnit ( i , lab ) ;
5039: LD_VAR 0 1
5043: PPUSH
5044: LD_VAR 0 4
5048: PPUSH
5049: CALL_OW 120
5053: GO 5036
5055: POP
5056: POP
// end ; end ; end_of_file
5057: PPOPN 4
5059: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5060: LD_VAR 0 1
5064: PPUSH
5065: CALL 26164 0 1
// if un = Heike then
5069: LD_VAR 0 1
5073: PUSH
5074: LD_EXP 18
5078: EQUAL
5079: IFFALSE 5088
// YouLost ( Heike ) ;
5081: LD_STRING Heike
5083: PPUSH
5084: CALL_OW 104
// if un in ruEng then
5088: LD_VAR 0 1
5092: PUSH
5093: LD_EXP 38
5097: IN
5098: IFFALSE 5116
// ruEng := ruEng diff un ;
5100: LD_ADDR_EXP 38
5104: PUSH
5105: LD_EXP 38
5109: PUSH
5110: LD_VAR 0 1
5114: DIFF
5115: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
5116: LD_VAR 0 1
5120: PUSH
5121: LD_INT 22
5123: PUSH
5124: LD_INT 2
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: LD_INT 21
5133: PUSH
5134: LD_INT 1
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PUSH
5141: LD_INT 23
5143: PUSH
5144: LD_INT 2
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: LIST
5155: PPUSH
5156: CALL_OW 69
5160: IN
5161: IFFALSE 5177
// loseCounter := loseCounter + 1 ;
5163: LD_ADDR_EXP 6
5167: PUSH
5168: LD_EXP 6
5172: PUSH
5173: LD_INT 1
5175: PLUS
5176: ST_TO_ADDR
// end ;
5177: PPOPN 1
5179: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
5180: LD_INT 0
5182: PPUSH
5183: PPUSH
// begin if un in ruMobile then
5184: LD_VAR 0 2
5188: PUSH
5189: LD_EXP 41
5193: IN
5194: IFFALSE 5353
// begin ruMobile := ruMobile diff un ;
5196: LD_ADDR_EXP 41
5200: PUSH
5201: LD_EXP 41
5205: PUSH
5206: LD_VAR 0 2
5210: DIFF
5211: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
5212: LD_ADDR_VAR 0 5
5216: PUSH
5217: LD_VAR 0 2
5221: PPUSH
5222: CALL_OW 264
5226: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5227: LD_ADDR_VAR 0 6
5231: PUSH
5232: LD_INT 110
5234: PPUSH
5235: LD_INT 126
5237: PPUSH
5238: CALL_OW 428
5242: ST_TO_ADDR
// if not driver or not fac then
5243: LD_VAR 0 1
5247: NOT
5248: PUSH
5249: LD_VAR 0 6
5253: NOT
5254: OR
5255: IFFALSE 5259
// exit ;
5257: GO 5353
// AddComMoveXY ( driver , 111 , 121 ) ;
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_INT 111
5266: PPUSH
5267: LD_INT 121
5269: PPUSH
5270: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5274: LD_VAR 0 1
5278: PPUSH
5279: LD_VAR 0 6
5283: PPUSH
5284: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5288: LD_INT 35
5290: PPUSH
5291: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5295: LD_VAR 0 1
5299: PPUSH
5300: CALL_OW 301
5304: PUSH
5305: LD_VAR 0 1
5309: PPUSH
5310: CALL_OW 310
5314: OR
5315: IFFALSE 5288
// if IsDead ( driver ) then
5317: LD_VAR 0 1
5321: PPUSH
5322: CALL_OW 301
5326: IFFALSE 5330
// exit ;
5328: GO 5353
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5330: LD_VAR 0 6
5334: PPUSH
5335: LD_INT 21
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_INT 1
5343: PPUSH
5344: LD_VAR 0 5
5348: PPUSH
5349: CALL_OW 185
// end ; end ;
5353: PPOPN 6
5355: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5356: LD_VAR 0 1
5360: PPUSH
5361: LD_VAR 0 2
5365: PPUSH
5366: CALL 26284 0 2
// if GetSide ( fac ) = 3 then
5370: LD_VAR 0 2
5374: PPUSH
5375: CALL_OW 255
5379: PUSH
5380: LD_INT 3
5382: EQUAL
5383: IFFALSE 5429
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5385: LD_ADDR_EXP 41
5389: PUSH
5390: LD_EXP 41
5394: PPUSH
5395: LD_EXP 41
5399: PUSH
5400: LD_INT 1
5402: PLUS
5403: PPUSH
5404: LD_VAR 0 1
5408: PPUSH
5409: CALL_OW 1
5413: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5414: LD_VAR 0 1
5418: PPUSH
5419: LD_INT 110
5421: PPUSH
5422: LD_INT 117
5424: PPUSH
5425: CALL_OW 171
// end ; end ;
5429: PPOPN 2
5431: END
// on LeaveBuilding ( b , un ) do var barracks ;
5432: LD_INT 0
5434: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5435: LD_VAR 0 1
5439: PUSH
5440: LD_INT 130
5442: PPUSH
5443: LD_INT 17
5445: PPUSH
5446: CALL_OW 428
5450: PUSH
5451: LD_INT 138
5453: PPUSH
5454: LD_INT 22
5456: PPUSH
5457: CALL_OW 428
5461: PUSH
5462: LD_INT 123
5464: PPUSH
5465: LD_INT 17
5467: PPUSH
5468: CALL_OW 428
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: LIST
5477: IN
5478: IFFALSE 5502
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5480: LD_VAR 0 2
5484: PPUSH
5485: LD_INT 135
5487: PPUSH
5488: LD_INT 31
5490: PPUSH
5491: CALL_OW 428
5495: PPUSH
5496: CALL_OW 180
// exit ;
5500: GO 5776
// end ; if b = HexInfo ( 135 , 31 ) then
5502: LD_VAR 0 1
5506: PUSH
5507: LD_INT 135
5509: PPUSH
5510: LD_INT 31
5512: PPUSH
5513: CALL_OW 428
5517: EQUAL
5518: IFFALSE 5590
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_INT 106
5527: PPUSH
5528: LD_INT 51
5530: PPUSH
5531: CALL_OW 428
5535: PPUSH
5536: CALL_OW 180
// if not explodeFirstDepot then
5540: LD_EXP 12
5544: NOT
5545: IFFALSE 5588
// begin explodeFirstDepot := true ;
5547: LD_ADDR_EXP 12
5551: PUSH
5552: LD_INT 1
5554: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5555: LD_INT 525
5557: PPUSH
5558: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5562: LD_INT 127
5564: PPUSH
5565: LD_INT 27
5567: PPUSH
5568: LD_INT 1
5570: PPUSH
5571: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5575: LD_INT 125
5577: PPUSH
5578: LD_INT 29
5580: PPUSH
5581: LD_INT 1
5583: PPUSH
5584: CALL_OW 453
// end ; exit ;
5588: GO 5776
// end ; if b = HexInfo ( 106 , 51 ) then
5590: LD_VAR 0 1
5594: PUSH
5595: LD_INT 106
5597: PPUSH
5598: LD_INT 51
5600: PPUSH
5601: CALL_OW 428
5605: EQUAL
5606: IFFALSE 5706
// begin AddComMoveXY ( un , 106 , 93 ) ;
5608: LD_VAR 0 2
5612: PPUSH
5613: LD_INT 106
5615: PPUSH
5616: LD_INT 93
5618: PPUSH
5619: CALL_OW 171
// if not explodeSecondDepot then
5623: LD_EXP 13
5627: NOT
5628: IFFALSE 5704
// begin explodeSecondDepot := true ;
5630: LD_ADDR_EXP 13
5634: PUSH
5635: LD_INT 1
5637: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5638: LD_INT 420
5640: PPUSH
5641: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5645: LD_INT 111
5647: PPUSH
5648: LD_INT 75
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5658: LD_INT 111
5660: PPUSH
5661: LD_INT 75
5663: PPUSH
5664: LD_INT 1
5666: PPUSH
5667: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5671: LD_INT 108
5673: PPUSH
5674: LD_INT 69
5676: PPUSH
5677: LD_INT 1
5679: PPUSH
5680: CALL_OW 453
// wait ( 0 0$2 ) ;
5684: LD_INT 70
5686: PPUSH
5687: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5691: LD_INT 94
5693: PPUSH
5694: LD_INT 65
5696: PPUSH
5697: LD_INT 1
5699: PPUSH
5700: CALL_OW 453
// end ; exit ;
5704: GO 5776
// end ; if GetBType ( b ) = b_bunker then
5706: LD_VAR 0 1
5710: PPUSH
5711: CALL_OW 266
5715: PUSH
5716: LD_INT 32
5718: EQUAL
5719: IFFALSE 5776
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5721: LD_ADDR_VAR 0 3
5725: PUSH
5726: LD_VAR 0 2
5730: PPUSH
5731: LD_INT 5
5733: PPUSH
5734: CALL 1008 0 2
5738: ST_TO_ADDR
// if barracks then
5739: LD_VAR 0 3
5743: IFFALSE 5761
// AddComEnterUnit ( un , barracks ) else
5745: LD_VAR 0 2
5749: PPUSH
5750: LD_VAR 0 3
5754: PPUSH
5755: CALL_OW 180
5759: GO 5776
// AddComMoveXY ( un , 116 , 110 ) ;
5761: LD_VAR 0 2
5765: PPUSH
5766: LD_INT 116
5768: PPUSH
5769: LD_INT 110
5771: PPUSH
5772: CALL_OW 171
// end ; end ;
5776: PPOPN 3
5778: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5779: LD_VAR 0 1
5783: PUSH
5784: LD_EXP 23
5788: EQUAL
5789: PUSH
5790: LD_VAR 0 2
5794: PUSH
5795: LD_INT 3
5797: PUSH
5798: LD_INT 6
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: IN
5805: AND
5806: IFFALSE 5837
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5808: LD_ADDR_EXP 8
5812: PUSH
5813: LD_VAR 0 1
5817: PPUSH
5818: CALL_OW 250
5822: PUSH
5823: LD_VAR 0 1
5827: PPUSH
5828: CALL_OW 251
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: ST_TO_ADDR
// end ; end_of_file
5837: PPOPN 3
5839: END
// export function Action ; var i , j , un , veh , tmp , rutmp ; begin
5840: LD_INT 0
5842: PPUSH
5843: PPUSH
5844: PPUSH
5845: PPUSH
5846: PPUSH
5847: PPUSH
5848: PPUSH
// InGameOn ;
5849: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5853: LD_INT 5
5855: PPUSH
5856: LD_INT 2
5858: PPUSH
5859: CALL_OW 343
// music_nat := 4 ;
5863: LD_ADDR_OWVAR 71
5867: PUSH
5868: LD_INT 4
5870: ST_TO_ADDR
// music_class := music_combat ;
5871: LD_ADDR_OWVAR 72
5875: PUSH
5876: LD_INT 1
5878: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5879: LD_INT 133
5881: PPUSH
5882: LD_INT 2
5884: PPUSH
5885: LD_INT 2
5887: PPUSH
5888: LD_INT 10
5890: PPUSH
5891: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5895: LD_INT 133
5897: PPUSH
5898: LD_INT 2
5900: PPUSH
5901: CALL_OW 86
// wait ( 0 0$1 ) ;
5905: LD_INT 35
5907: PPUSH
5908: CALL_OW 67
// uc_side := 6 ;
5912: LD_ADDR_OWVAR 20
5916: PUSH
5917: LD_INT 6
5919: ST_TO_ADDR
// uc_nation := 3 ;
5920: LD_ADDR_OWVAR 21
5924: PUSH
5925: LD_INT 3
5927: ST_TO_ADDR
// rutmp := [ ] ;
5928: LD_ADDR_VAR 0 7
5932: PUSH
5933: EMPTY
5934: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5935: LD_INT 6
5937: PPUSH
5938: LD_INT 3
5940: PPUSH
5941: LD_INT 21
5943: PPUSH
5944: LD_INT 1
5946: PPUSH
5947: LD_INT 1
5949: PPUSH
5950: LD_INT 44
5952: PPUSH
5953: LD_INT 66
5955: PPUSH
5956: CALL 336 0 7
// veh := CreateVehicle ;
5960: LD_ADDR_VAR 0 5
5964: PUSH
5965: CALL_OW 45
5969: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5970: LD_VAR 0 5
5974: PPUSH
5975: LD_INT 3
5977: PPUSH
5978: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5982: LD_VAR 0 5
5986: PPUSH
5987: LD_INT 8
5989: PPUSH
5990: LD_INT 0
5992: PPUSH
5993: CALL_OW 49
// SetLives ( veh , 500 ) ;
5997: LD_VAR 0 5
6001: PPUSH
6002: LD_INT 500
6004: PPUSH
6005: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
6009: LD_INT 0
6011: PPUSH
6012: LD_INT 3
6014: PPUSH
6015: LD_INT 3
6017: PPUSH
6018: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6022: CALL_OW 44
6026: PPUSH
6027: LD_VAR 0 5
6031: PPUSH
6032: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
6036: LD_VAR 0 5
6040: PPUSH
6041: LD_INT 133
6043: PPUSH
6044: LD_INT 11
6046: PPUSH
6047: CALL_OW 111
// rutmp := [ veh ] ;
6051: LD_ADDR_VAR 0 7
6055: PUSH
6056: LD_VAR 0 5
6060: PUSH
6061: EMPTY
6062: LIST
6063: ST_TO_ADDR
// for i := 1 to 4 do
6064: LD_ADDR_VAR 0 2
6068: PUSH
6069: DOUBLE
6070: LD_INT 1
6072: DEC
6073: ST_TO_ADDR
6074: LD_INT 4
6076: PUSH
6077: FOR_TO
6078: IFFALSE 6185
// begin PrepareHuman ( false , i , 2 ) ;
6080: LD_INT 0
6082: PPUSH
6083: LD_VAR 0 2
6087: PPUSH
6088: LD_INT 2
6090: PPUSH
6091: CALL_OW 380
// un := CreateHuman ;
6095: LD_ADDR_VAR 0 4
6099: PUSH
6100: CALL_OW 44
6104: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6105: LD_VAR 0 4
6109: PPUSH
6110: LD_INT 3
6112: PPUSH
6113: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6117: LD_VAR 0 4
6121: PPUSH
6122: LD_INT 8
6124: PPUSH
6125: LD_INT 0
6127: PPUSH
6128: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
6132: LD_ADDR_VAR 0 7
6136: PUSH
6137: LD_VAR 0 7
6141: PPUSH
6142: LD_VAR 0 7
6146: PUSH
6147: LD_INT 1
6149: PLUS
6150: PPUSH
6151: LD_VAR 0 4
6155: PPUSH
6156: CALL_OW 1
6160: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
6161: LD_VAR 0 4
6165: PPUSH
6166: LD_INT 133
6168: PPUSH
6169: LD_INT 11
6171: PPUSH
6172: CALL_OW 111
// wait ( 0 0$0.5 ) ;
6176: LD_INT 18
6178: PPUSH
6179: CALL_OW 67
// end ;
6183: GO 6077
6185: POP
6186: POP
// for i in rutmp do
6187: LD_ADDR_VAR 0 2
6191: PUSH
6192: LD_VAR 0 7
6196: PUSH
6197: FOR_IN
6198: IFFALSE 6247
// begin AddComMoveXY ( i , 99 , 65 ) ;
6200: LD_VAR 0 2
6204: PPUSH
6205: LD_INT 99
6207: PPUSH
6208: LD_INT 65
6210: PPUSH
6211: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
6215: LD_VAR 0 2
6219: PPUSH
6220: LD_INT 76
6222: PPUSH
6223: LD_INT 108
6225: PPUSH
6226: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6230: LD_VAR 0 2
6234: PPUSH
6235: LD_INT 92
6237: PPUSH
6238: LD_INT 176
6240: PPUSH
6241: CALL_OW 171
// end ;
6245: GO 6197
6247: POP
6248: POP
// wait ( 0 0$10 ) ;
6249: LD_INT 350
6251: PPUSH
6252: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6256: LD_ADDR_VAR 0 6
6260: PUSH
6261: LD_EXP 18
6265: PUSH
6266: LD_EXP 19
6270: PUSH
6271: LD_EXP 20
6275: PUSH
6276: LD_EXP 21
6280: PUSH
6281: LD_EXP 22
6285: PUSH
6286: LD_EXP 23
6290: PUSH
6291: LD_EXP 24
6295: PUSH
6296: LD_EXP 25
6300: PUSH
6301: LD_EXP 27
6305: PUSH
6306: LD_EXP 28
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: PUSH
6323: LD_EXP 29
6327: UNION
6328: ST_TO_ADDR
// tmp := tmp diff 0 ;
6329: LD_ADDR_VAR 0 6
6333: PUSH
6334: LD_VAR 0 6
6338: PUSH
6339: LD_INT 0
6341: DIFF
6342: ST_TO_ADDR
// for i in heikeVehicles do
6343: LD_ADDR_VAR 0 2
6347: PUSH
6348: LD_EXP 30
6352: PUSH
6353: FOR_IN
6354: IFFALSE 6722
// begin if not tmp then
6356: LD_VAR 0 6
6360: NOT
6361: IFFALSE 6365
// continue ;
6363: GO 6353
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6365: LD_INT 2
6367: PPUSH
6368: LD_VAR 0 2
6372: PUSH
6373: LD_INT 5
6375: ARRAY
6376: PPUSH
6377: LD_VAR 0 2
6381: PUSH
6382: LD_INT 1
6384: ARRAY
6385: PPUSH
6386: LD_VAR 0 2
6390: PUSH
6391: LD_INT 2
6393: ARRAY
6394: PPUSH
6395: LD_VAR 0 2
6399: PUSH
6400: LD_INT 3
6402: ARRAY
6403: PPUSH
6404: LD_VAR 0 2
6408: PUSH
6409: LD_INT 4
6411: ARRAY
6412: PPUSH
6413: LD_INT 34
6415: PPUSH
6416: CALL 336 0 7
// veh := CreateVehicle ;
6420: LD_ADDR_VAR 0 5
6424: PUSH
6425: CALL_OW 45
6429: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6430: LD_VAR 0 2
6434: PUSH
6435: LD_INT 4
6437: ARRAY
6438: PUSH
6439: LD_INT 51
6441: PUSH
6442: LD_INT 32
6444: PUSH
6445: LD_INT 12
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: IN
6453: IFFALSE 6533
// begin if i [ 7 ] [ 1 ] then
6455: LD_VAR 0 2
6459: PUSH
6460: LD_INT 7
6462: ARRAY
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: IFFALSE 6494
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6469: LD_VAR 0 5
6473: PPUSH
6474: LD_INT 1
6476: PPUSH
6477: LD_VAR 0 2
6481: PUSH
6482: LD_INT 7
6484: ARRAY
6485: PUSH
6486: LD_INT 1
6488: ARRAY
6489: PPUSH
6490: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6494: LD_VAR 0 2
6498: PUSH
6499: LD_INT 7
6501: ARRAY
6502: PUSH
6503: LD_INT 2
6505: ARRAY
6506: IFFALSE 6533
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6508: LD_VAR 0 5
6512: PPUSH
6513: LD_INT 2
6515: PPUSH
6516: LD_VAR 0 2
6520: PUSH
6521: LD_INT 7
6523: ARRAY
6524: PUSH
6525: LD_INT 2
6527: ARRAY
6528: PPUSH
6529: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6533: LD_VAR 0 5
6537: PPUSH
6538: LD_INT 3
6540: PPUSH
6541: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6545: LD_VAR 0 5
6549: PPUSH
6550: LD_INT 8
6552: PPUSH
6553: LD_INT 0
6555: PPUSH
6556: CALL_OW 49
// for j := 1 to tmp do
6560: LD_ADDR_VAR 0 3
6564: PUSH
6565: DOUBLE
6566: LD_INT 1
6568: DEC
6569: ST_TO_ADDR
6570: LD_VAR 0 6
6574: PUSH
6575: FOR_TO
6576: IFFALSE 6649
// begin if i [ 8 ] = GetClass ( tmp [ j ] ) then
6578: LD_VAR 0 2
6582: PUSH
6583: LD_INT 8
6585: ARRAY
6586: PUSH
6587: LD_VAR 0 6
6591: PUSH
6592: LD_VAR 0 3
6596: ARRAY
6597: PPUSH
6598: CALL_OW 257
6602: EQUAL
6603: IFFALSE 6647
// begin PlaceHumanInUnit ( tmp [ j ] , veh ) ;
6605: LD_VAR 0 6
6609: PUSH
6610: LD_VAR 0 3
6614: ARRAY
6615: PPUSH
6616: LD_VAR 0 5
6620: PPUSH
6621: CALL_OW 52
// tmp := Delete ( tmp , j ) ;
6625: LD_ADDR_VAR 0 6
6629: PUSH
6630: LD_VAR 0 6
6634: PPUSH
6635: LD_VAR 0 3
6639: PPUSH
6640: CALL_OW 3
6644: ST_TO_ADDR
// break ;
6645: GO 6649
// end ; end ;
6647: GO 6575
6649: POP
6650: POP
// if IsEmpty ( veh ) then
6651: LD_VAR 0 5
6655: PPUSH
6656: CALL 32609 0 1
6660: IFFALSE 6698
// begin PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6662: LD_VAR 0 6
6666: PUSH
6667: LD_INT 1
6669: ARRAY
6670: PPUSH
6671: LD_VAR 0 5
6675: PPUSH
6676: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6680: LD_ADDR_VAR 0 6
6684: PUSH
6685: LD_VAR 0 6
6689: PPUSH
6690: LD_INT 1
6692: PPUSH
6693: CALL_OW 3
6697: ST_TO_ADDR
// end ; ComAgressiveMove ( veh , 133 , 7 ) ;
6698: LD_VAR 0 5
6702: PPUSH
6703: LD_INT 133
6705: PPUSH
6706: LD_INT 7
6708: PPUSH
6709: CALL_OW 114
// wait ( 0 0$3 ) ;
6713: LD_INT 105
6715: PPUSH
6716: CALL_OW 67
// end ;
6720: GO 6353
6722: POP
6723: POP
// if tmp then
6724: LD_VAR 0 6
6728: IFFALSE 6784
// for i in tmp do
6730: LD_ADDR_VAR 0 2
6734: PUSH
6735: LD_VAR 0 6
6739: PUSH
6740: FOR_IN
6741: IFFALSE 6782
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6743: LD_VAR 0 2
6747: PPUSH
6748: LD_INT 10
6750: PPUSH
6751: LD_INT 0
6753: PPUSH
6754: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6758: LD_VAR 0 2
6762: PPUSH
6763: LD_INT 146
6765: PPUSH
6766: LD_INT 7
6768: PPUSH
6769: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6773: LD_INT 18
6775: PPUSH
6776: CALL_OW 67
// end ;
6780: GO 6740
6782: POP
6783: POP
// if heikeApes then
6784: LD_EXP 31
6788: IFFALSE 6844
// for i in heikeApes do
6790: LD_ADDR_VAR 0 2
6794: PUSH
6795: LD_EXP 31
6799: PUSH
6800: FOR_IN
6801: IFFALSE 6842
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6803: LD_VAR 0 2
6807: PPUSH
6808: LD_INT 10
6810: PPUSH
6811: LD_INT 0
6813: PPUSH
6814: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6818: LD_VAR 0 2
6822: PPUSH
6823: LD_INT 146
6825: PPUSH
6826: LD_INT 7
6828: PPUSH
6829: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6833: LD_INT 18
6835: PPUSH
6836: CALL_OW 67
// end ;
6840: GO 6800
6842: POP
6843: POP
// DialogueOn ;
6844: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6848: LD_EXP 18
6852: PPUSH
6853: LD_STRING DH-outpost-a-1
6855: PPUSH
6856: CALL_OW 88
// DialogueOff ;
6860: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6864: LD_INT 133
6866: PPUSH
6867: LD_INT 2
6869: PPUSH
6870: LD_INT 2
6872: PPUSH
6873: CALL_OW 331
// InGameOff ;
6877: CALL_OW 9
// music_nat := 0 ;
6881: LD_ADDR_OWVAR 71
6885: PUSH
6886: LD_INT 0
6888: ST_TO_ADDR
// music_class := 0 ;
6889: LD_ADDR_OWVAR 72
6893: PUSH
6894: LD_INT 0
6896: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6897: LD_STRING Outposts
6899: PPUSH
6900: CALL_OW 337
// SaveForQuickRestart ;
6904: CALL_OW 22
// end ;
6908: LD_VAR 0 1
6912: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6913: LD_INT 22
6915: PUSH
6916: LD_INT 2
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: LD_INT 91
6925: PUSH
6926: LD_EXP 21
6930: PUSH
6931: LD_INT 20
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 69
6947: PUSH
6948: LD_EXP 3
6952: AND
6953: PUSH
6954: LD_EXP 21
6958: PPUSH
6959: CALL_OW 302
6963: AND
6964: IFFALSE 7211
6966: GO 6968
6968: DISABLE
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
6973: PPUSH
6974: PPUSH
// begin IbrahimBetrayal ;
6975: CALL 7214 0 0
// repeat wait ( 0 0$1 ) ;
6979: LD_INT 35
6981: PPUSH
6982: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6986: LD_EXP 21
6990: PPUSH
6991: CALL_OW 301
6995: PUSH
6996: LD_INT 22
6998: PUSH
6999: LD_INT 2
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 91
7008: PUSH
7009: LD_EXP 21
7013: PUSH
7014: LD_INT 6
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PPUSH
7026: CALL_OW 69
7030: PUSH
7031: LD_EXP 21
7035: PPUSH
7036: CALL_OW 302
7040: AND
7041: OR
7042: IFFALSE 6979
// if IsDead ( Ibrahim ) then
7044: LD_EXP 21
7048: PPUSH
7049: CALL_OW 301
7053: IFFALSE 7057
// exit ;
7055: GO 7211
// x := GetX ( Ibrahim ) ;
7057: LD_ADDR_VAR 0 1
7061: PUSH
7062: LD_EXP 21
7066: PPUSH
7067: CALL_OW 250
7071: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
7072: LD_ADDR_VAR 0 2
7076: PUSH
7077: LD_EXP 21
7081: PPUSH
7082: CALL_OW 251
7086: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
7087: LD_ADDR_VAR 0 3
7091: PUSH
7092: LD_EXP 21
7096: PPUSH
7097: CALL_OW 254
7101: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
7102: LD_ADDR_VAR 0 4
7106: PUSH
7107: LD_EXP 21
7111: PPUSH
7112: CALL_OW 256
7116: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
7117: LD_EXP 21
7121: PPUSH
7122: CALL_OW 64
// uc_side := 2 ;
7126: LD_ADDR_OWVAR 20
7130: PUSH
7131: LD_INT 2
7133: ST_TO_ADDR
// uc_nation := 2 ;
7134: LD_ADDR_OWVAR 21
7138: PUSH
7139: LD_INT 2
7141: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
7142: LD_ADDR_EXP 21
7146: PUSH
7147: LD_STRING Ibrahim
7149: PPUSH
7150: LD_INT 0
7152: PPUSH
7153: LD_STRING 
7155: PPUSH
7156: CALL 30453 0 3
7160: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
7161: LD_EXP 21
7165: PPUSH
7166: LD_VAR 0 3
7170: PPUSH
7171: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
7175: LD_EXP 21
7179: PPUSH
7180: LD_VAR 0 1
7184: PPUSH
7185: LD_VAR 0 2
7189: PPUSH
7190: LD_INT 0
7192: PPUSH
7193: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
7197: LD_EXP 21
7201: PPUSH
7202: LD_VAR 0 4
7206: PPUSH
7207: CALL_OW 234
// end ;
7211: PPOPN 4
7213: END
// export function IbrahimBetrayal ; var i , tmp ; begin
7214: LD_INT 0
7216: PPUSH
7217: PPUSH
7218: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
7219: LD_INT 122
7221: PPUSH
7222: LD_INT 77
7224: PPUSH
7225: LD_INT 2
7227: PPUSH
7228: LD_INT 6
7230: NEG
7231: PPUSH
7232: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
7236: LD_EXP 21
7240: PPUSH
7241: LD_INT 123
7243: PPUSH
7244: LD_INT 79
7246: PPUSH
7247: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
7251: LD_EXP 21
7255: PPUSH
7256: LD_INT 125
7258: PPUSH
7259: LD_INT 82
7261: PPUSH
7262: CALL_OW 178
// wait ( 0 0$2 ) ;
7266: LD_INT 70
7268: PPUSH
7269: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
7273: LD_EXP 42
7277: PPUSH
7278: LD_EXP 21
7282: PPUSH
7283: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
7287: LD_EXP 42
7291: PPUSH
7292: LD_STRING DRum-outpost-b-3
7294: PPUSH
7295: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
7299: LD_ADDR_VAR 0 3
7303: PUSH
7304: LD_INT 125
7306: PPUSH
7307: LD_INT 76
7309: PPUSH
7310: CALL_OW 428
7314: PUSH
7315: LD_INT 125
7317: PPUSH
7318: LD_INT 79
7320: PPUSH
7321: CALL_OW 428
7325: PUSH
7326: LD_INT 125
7328: PPUSH
7329: LD_INT 82
7331: PPUSH
7332: CALL_OW 428
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: ST_TO_ADDR
// for i in tmp do
7342: LD_ADDR_VAR 0 2
7346: PUSH
7347: LD_VAR 0 3
7351: PUSH
7352: FOR_IN
7353: IFFALSE 7369
// SetLives ( i , 200 ) ;
7355: LD_VAR 0 2
7359: PPUSH
7360: LD_INT 200
7362: PPUSH
7363: CALL_OW 234
7367: GO 7352
7369: POP
7370: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7371: LD_EXP 21
7375: PPUSH
7376: LD_STRING DI-outpost-b-4
7378: PPUSH
7379: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7383: LD_EXP 21
7387: PPUSH
7388: LD_INT 5
7390: PPUSH
7391: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7395: LD_EXP 21
7399: PUSH
7400: LD_EXP 42
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PPUSH
7409: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7413: LD_INT 122
7415: PPUSH
7416: LD_INT 77
7418: PPUSH
7419: LD_INT 2
7421: PPUSH
7422: CALL_OW 331
// if Givi then
7426: LD_EXP 19
7430: IFFALSE 7446
// Say ( Givi , DG-1-outpost-b-5 ) else
7432: LD_EXP 19
7436: PPUSH
7437: LD_STRING DG-1-outpost-b-5
7439: PPUSH
7440: CALL_OW 88
7444: GO 7511
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7446: LD_EXP 29
7450: PPUSH
7451: LD_INT 26
7453: PUSH
7454: LD_INT 2
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PPUSH
7461: CALL_OW 72
7465: PUSH
7466: LD_INT 1
7468: ARRAY
7469: PPUSH
7470: LD_STRING DArf-outpost-b-a-5
7472: PPUSH
7473: CALL_OW 88
7477: NOT
7478: IFFALSE 7511
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7480: LD_EXP 29
7484: PPUSH
7485: LD_INT 26
7487: PUSH
7488: LD_INT 1
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PPUSH
7495: CALL_OW 72
7499: PUSH
7500: LD_INT 1
7502: ARRAY
7503: PPUSH
7504: LD_STRING DArm-outpost-b-a-5
7506: PPUSH
7507: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7511: LD_INT 35
7513: PPUSH
7514: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7518: LD_EXP 21
7522: PPUSH
7523: CALL_OW 301
7527: PUSH
7528: LD_EXP 18
7532: PPUSH
7533: LD_EXP 21
7537: PPUSH
7538: CALL_OW 296
7542: PUSH
7543: LD_INT 6
7545: LESS
7546: PUSH
7547: LD_EXP 21
7551: PPUSH
7552: CALL_OW 302
7556: AND
7557: OR
7558: IFFALSE 7511
// if IsDead ( Ibrahim ) then
7560: LD_EXP 21
7564: PPUSH
7565: CALL_OW 301
7569: IFFALSE 7585
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7571: LD_EXP 18
7575: PPUSH
7576: LD_STRING DH-ibrahimdead-1
7578: PPUSH
7579: CALL_OW 88
// exit ;
7583: GO 7626
// end ; CenterNowOnUnits ( Ibrahim ) ;
7585: LD_EXP 21
7589: PPUSH
7590: CALL_OW 87
// DialogueOn ;
7594: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7598: LD_EXP 21
7602: PPUSH
7603: LD_STRING DI-ibrahimlives-1
7605: PPUSH
7606: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7610: LD_EXP 18
7614: PPUSH
7615: LD_STRING DH-Ibrahimlives-2
7617: PPUSH
7618: CALL_OW 88
// DialogueOff ;
7622: CALL_OW 7
// end ;
7626: LD_VAR 0 1
7630: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7631: LD_INT 11
7633: PPUSH
7634: LD_INT 22
7636: PUSH
7637: LD_INT 2
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PPUSH
7644: CALL_OW 70
7648: PUSH
7649: LD_OWVAR 1
7653: PUSH
7654: LD_INT 18900
7656: PUSH
7657: LD_INT 16800
7659: PUSH
7660: LD_INT 16800
7662: PUSH
7663: LD_INT 15750
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: PUSH
7672: LD_OWVAR 67
7676: ARRAY
7677: GREATEREQUAL
7678: OR
7679: IFFALSE 8187
7681: GO 7683
7683: DISABLE
// begin outerAreaAchived := true ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 1
7691: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7692: LD_INT 700
7694: PPUSH
7695: CALL_OW 67
// DialogueOn ;
7699: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7703: LD_EXP 26
7707: PPUSH
7708: LD_STRING DShar-radio-1
7710: PPUSH
7711: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7715: LD_EXP 26
7719: PPUSH
7720: LD_STRING DShar-radio-2
7722: PPUSH
7723: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7727: LD_EXP 18
7731: PPUSH
7732: LD_STRING DH-radio-2
7734: PPUSH
7735: CALL_OW 88
// DialogueOff ;
7739: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7743: LD_STRING Gaidar
7745: PPUSH
7746: CALL_OW 337
// if Difficulty < 3 then
7750: LD_OWVAR 67
7754: PUSH
7755: LD_INT 3
7757: LESS
7758: IFFALSE 7824
// begin DialogueOn ;
7760: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7764: LD_INT 11
7766: PPUSH
7767: LD_INT 14
7769: PPUSH
7770: LD_INT 2
7772: PPUSH
7773: LD_INT 6
7775: NEG
7776: PPUSH
7777: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7781: LD_INT 11
7783: PPUSH
7784: LD_INT 14
7786: PPUSH
7787: LD_INT 2
7789: PPUSH
7790: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7794: LD_INT 11
7796: PPUSH
7797: LD_INT 14
7799: PPUSH
7800: CALL_OW 84
// dwait ( 0 0$1 ) ;
7804: LD_INT 35
7806: PPUSH
7807: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7811: LD_EXP 18
7815: PPUSH
7816: CALL_OW 87
// DialogueOff ;
7820: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7824: LD_INT 1050
7826: PUSH
7827: LD_INT 350
7829: PPUSH
7830: LD_INT 525
7832: PPUSH
7833: CALL_OW 12
7837: PUSH
7838: LD_OWVAR 67
7842: MUL
7843: PLUS
7844: PPUSH
7845: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7849: LD_INT 35
7851: PPUSH
7852: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7856: LD_INT 2
7858: PPUSH
7859: LD_INT 1
7861: PPUSH
7862: CALL_OW 428
7866: PUSH
7867: LD_INT 0
7869: EQUAL
7870: IFFALSE 7849
// SetDir ( Gaidar , 2 ) ;
7872: LD_EXP 35
7876: PPUSH
7877: LD_INT 2
7879: PPUSH
7880: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7884: LD_EXP 35
7888: PPUSH
7889: LD_INT 2
7891: PPUSH
7892: LD_INT 1
7894: PPUSH
7895: LD_INT 0
7897: PPUSH
7898: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7902: LD_EXP 35
7906: PPUSH
7907: LD_INT 19
7909: PPUSH
7910: LD_INT 24
7912: PPUSH
7913: CALL_OW 111
// if Difficulty < 3 then
7917: LD_OWVAR 67
7921: PUSH
7922: LD_INT 3
7924: LESS
7925: IFFALSE 7964
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7927: LD_INT 11
7929: PPUSH
7930: LD_INT 14
7932: PPUSH
7933: LD_INT 2
7935: PPUSH
7936: LD_INT 6
7938: NEG
7939: PPUSH
7940: CALL_OW 330
// wait ( 0 0$2 ) ;
7944: LD_INT 70
7946: PPUSH
7947: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
7951: LD_INT 11
7953: PPUSH
7954: LD_INT 14
7956: PPUSH
7957: LD_INT 2
7959: PPUSH
7960: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
7964: LD_EXP 35
7968: PPUSH
7969: LD_INT 210
7971: PPUSH
7972: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7976: LD_EXP 35
7980: PPUSH
7981: LD_INT 38
7983: PPUSH
7984: LD_INT 47
7986: PPUSH
7987: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7991: LD_EXP 35
7995: PPUSH
7996: LD_INT 32
7998: PPUSH
7999: LD_INT 59
8001: PPUSH
8002: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
8006: LD_EXP 35
8010: PPUSH
8011: LD_INT 350
8013: PPUSH
8014: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
8018: LD_EXP 35
8022: PPUSH
8023: LD_INT 62
8025: PPUSH
8026: LD_INT 116
8028: PPUSH
8029: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
8033: LD_EXP 35
8037: PPUSH
8038: LD_INT 92
8040: PPUSH
8041: LD_INT 177
8043: PPUSH
8044: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8048: LD_INT 35
8050: PPUSH
8051: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
8055: LD_EXP 35
8059: PPUSH
8060: CALL_OW 301
8064: PUSH
8065: LD_EXP 35
8069: PPUSH
8070: LD_INT 92
8072: PPUSH
8073: LD_INT 177
8075: PPUSH
8076: CALL_OW 307
8080: OR
8081: IFFALSE 8048
// if IsAt ( Gaidar , 92 , 177 ) then
8083: LD_EXP 35
8087: PPUSH
8088: LD_INT 92
8090: PPUSH
8091: LD_INT 177
8093: PPUSH
8094: CALL_OW 307
8098: IFFALSE 8165
// begin DialogueOn ;
8100: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
8104: LD_INT 92
8106: PPUSH
8107: LD_INT 177
8109: PPUSH
8110: LD_INT 2
8112: PPUSH
8113: LD_INT 3
8115: NEG
8116: PPUSH
8117: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
8121: LD_EXP 35
8125: PPUSH
8126: CALL_OW 87
// dwait ( 0 0$2 ) ;
8130: LD_INT 70
8132: PPUSH
8133: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
8137: LD_INT 92
8139: PPUSH
8140: LD_INT 177
8142: PPUSH
8143: LD_INT 2
8145: PPUSH
8146: CALL_OW 331
// DialogueOff ;
8150: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
8154: LD_EXP 35
8158: PPUSH
8159: CALL_OW 64
// exit ;
8163: GO 8187
// end ; gaidarKilled := true ;
8165: LD_ADDR_EXP 14
8169: PUSH
8170: LD_INT 1
8172: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
8173: LD_STRING GaidarKilled
8175: PPUSH
8176: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
8180: LD_STRING ACH_COMMISAR
8182: PPUSH
8183: CALL_OW 543
// end ;
8187: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
8188: LD_INT 2
8190: PPUSH
8191: LD_EXP 35
8195: PPUSH
8196: CALL_OW 292
8200: IFFALSE 8217
8202: GO 8204
8204: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
8205: LD_EXP 35
8209: PPUSH
8210: LD_STRING DT-objective-1
8212: PPUSH
8213: CALL_OW 88
8217: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
8218: LD_INT 22
8220: PUSH
8221: LD_INT 2
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PUSH
8228: LD_INT 2
8230: PUSH
8231: LD_INT 95
8233: PUSH
8234: LD_INT 5
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: LD_INT 95
8243: PUSH
8244: LD_INT 6
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: PUSH
8251: LD_INT 95
8253: PUSH
8254: LD_INT 7
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PPUSH
8271: CALL_OW 69
8275: IFFALSE 8312
8277: GO 8279
8279: DISABLE
// begin DialogueOn ;
8280: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
8284: LD_EXP 18
8288: PPUSH
8289: LD_STRING DH-outpost-last-1
8291: PPUSH
8292: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
8296: LD_EXP 34
8300: PPUSH
8301: LD_STRING DB-outpost-last-2
8303: PPUSH
8304: CALL_OW 94
// DialogueOff ;
8308: CALL_OW 7
// end ;
8312: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
8313: LD_INT 200
8315: PPUSH
8316: CALL_OW 256
8320: PUSH
8321: LD_INT 999
8323: LESS
8324: PUSH
8325: LD_INT 200
8327: PPUSH
8328: CALL_OW 255
8332: PUSH
8333: LD_INT 2
8335: EQUAL
8336: OR
8337: IFFALSE 8510
8339: GO 8341
8341: DISABLE
8342: LD_INT 0
8344: PPUSH
8345: PPUSH
// begin if not earlyEscape then
8346: LD_EXP 16
8350: NOT
8351: IFFALSE 8377
// begin SayRadio ( Burlak , DB-end-1 ) ;
8353: LD_EXP 34
8357: PPUSH
8358: LD_STRING DB-end-1
8360: PPUSH
8361: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8365: LD_EXP 18
8369: PPUSH
8370: LD_STRING DH-end-2
8372: PPUSH
8373: CALL_OW 88
// end ; if tick <= 15 15$00 then
8377: LD_OWVAR 1
8381: PUSH
8382: LD_INT 31500
8384: LESSEQUAL
8385: IFFALSE 8394
// SetAchievement ( ACH_FIST ) ;
8387: LD_STRING ACH_FIST
8389: PPUSH
8390: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8394: LD_ADDR_VAR 0 2
8398: PUSH
8399: LD_INT 22
8401: PUSH
8402: LD_INT 3
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 3
8411: PUSH
8412: LD_INT 21
8414: PUSH
8415: LD_INT 3
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PPUSH
8430: CALL_OW 69
8434: ST_TO_ADDR
// if not tmp then
8435: LD_VAR 0 2
8439: NOT
8440: IFFALSE 8444
// exit ;
8442: GO 8510
// for i in tmp do
8444: LD_ADDR_VAR 0 1
8448: PUSH
8449: LD_VAR 0 2
8453: PUSH
8454: FOR_IN
8455: IFFALSE 8508
// begin SetTag ( i , tEscape ) ;
8457: LD_VAR 0 1
8461: PPUSH
8462: LD_EXP 17
8466: PPUSH
8467: CALL_OW 109
// if IsInUnit ( i ) then
8471: LD_VAR 0 1
8475: PPUSH
8476: CALL_OW 310
8480: IFFALSE 8491
// ComExitBuilding ( i ) ;
8482: LD_VAR 0 1
8486: PPUSH
8487: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8491: LD_VAR 0 1
8495: PPUSH
8496: LD_INT 92
8498: PPUSH
8499: LD_INT 177
8501: PPUSH
8502: CALL_OW 171
// end ;
8506: GO 8454
8508: POP
8509: POP
// end ;
8510: PPOPN 2
8512: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8513: LD_INT 4
8515: PPUSH
8516: LD_INT 22
8518: PUSH
8519: LD_INT 2
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PPUSH
8526: CALL_OW 70
8530: PUSH
8531: LD_EXP 15
8535: NOT
8536: AND
8537: PUSH
8538: LD_EXP 27
8542: PPUSH
8543: CALL_OW 302
8547: AND
8548: IFFALSE 8788
8550: GO 8552
8552: DISABLE
// begin DialogueOn ;
8553: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8557: LD_INT 111
8559: PPUSH
8560: LD_INT 54
8562: PPUSH
8563: LD_INT 2
8565: PPUSH
8566: LD_INT 16
8568: NEG
8569: PPUSH
8570: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8574: LD_INT 111
8576: PPUSH
8577: LD_INT 53
8579: PPUSH
8580: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8584: LD_INT 10
8586: PPUSH
8587: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8591: LD_EXP 27
8595: PPUSH
8596: LD_STRING DKs-Hannibal-1
8598: PPUSH
8599: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8603: LD_EXP 27
8607: PPUSH
8608: LD_STRING DKs-Hannibal-2
8610: PPUSH
8611: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8615: LD_EXP 27
8619: PPUSH
8620: LD_STRING DKs-Hannibal-3
8622: PPUSH
8623: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8627: LD_EXP 27
8631: PPUSH
8632: LD_STRING DKs-Hannibal-4
8634: PPUSH
8635: CALL_OW 88
// dwait ( 0 0$1 ) ;
8639: LD_INT 35
8641: PPUSH
8642: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8646: LD_INT 111
8648: PPUSH
8649: LD_INT 54
8651: PPUSH
8652: LD_INT 2
8654: PPUSH
8655: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8659: LD_INT 173
8661: PPUSH
8662: LD_INT 76
8664: PPUSH
8665: LD_INT 2
8667: PPUSH
8668: LD_INT 12
8670: NEG
8671: PPUSH
8672: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8676: LD_INT 173
8678: PPUSH
8679: LD_INT 76
8681: PPUSH
8682: LD_INT 2
8684: PPUSH
8685: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8689: LD_INT 173
8691: PPUSH
8692: LD_INT 76
8694: PPUSH
8695: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8699: LD_EXP 27
8703: PPUSH
8704: LD_STRING DKs-Hannibal-5
8706: PPUSH
8707: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8711: LD_EXP 22
8715: PUSH
8716: LD_INT 22
8718: PUSH
8719: LD_INT 2
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 34
8728: PUSH
8729: LD_INT 26
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PPUSH
8740: CALL_OW 69
8744: NOT
8745: AND
8746: IFFALSE 8784
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8748: LD_EXP 22
8752: PPUSH
8753: LD_STRING DKam-Hannibal-a-6
8755: PPUSH
8756: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8760: LD_EXP 22
8764: PPUSH
8765: LD_STRING DKam-Hannibal-a-7
8767: PPUSH
8768: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8772: LD_EXP 19
8776: PPUSH
8777: LD_STRING DG-Hannibal-a-8
8779: PPUSH
8780: CALL_OW 88
// end ; DialogueOff ;
8784: CALL_OW 7
// end ;
8788: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8789: LD_INT 225
8791: PPUSH
8792: CALL_OW 302
8796: PUSH
8797: LD_INT 200
8799: PPUSH
8800: CALL_OW 302
8804: AND
8805: PUSH
8806: LD_INT 12
8808: PPUSH
8809: LD_INT 21
8811: PUSH
8812: LD_INT 3
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PPUSH
8819: CALL_OW 70
8823: PUSH
8824: LD_INT 2
8826: GREATER
8827: AND
8828: PUSH
8829: LD_INT 13
8831: PPUSH
8832: LD_INT 22
8834: PUSH
8835: LD_INT 2
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PPUSH
8842: CALL_OW 70
8846: PUSH
8847: LD_INT 3
8849: GREATER
8850: AND
8851: IFFALSE 8864
8853: GO 8855
8855: DISABLE
// hannibalPath := true ;
8856: LD_ADDR_EXP 9
8860: PUSH
8861: LD_INT 1
8863: ST_TO_ADDR
8864: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8865: LD_EXP 9
8869: PUSH
8870: LD_INT 6
8872: PPUSH
8873: LD_INT 22
8875: PUSH
8876: LD_INT 2
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PPUSH
8883: CALL_OW 70
8887: AND
8888: IFFALSE 9233
8890: GO 8892
8892: DISABLE
8893: LD_INT 0
8895: PPUSH
8896: PPUSH
8897: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8898: LD_ADDR_VAR 0 2
8902: PUSH
8903: LD_INT 6
8905: PPUSH
8906: LD_INT 22
8908: PUSH
8909: LD_INT 2
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PPUSH
8916: CALL_OW 70
8920: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8921: LD_ADDR_VAR 0 3
8925: PUSH
8926: LD_VAR 0 2
8930: PPUSH
8931: LD_INT 34
8933: PUSH
8934: LD_INT 26
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 72
8945: PUSH
8946: LD_INT 0
8948: GREATER
8949: ST_TO_ADDR
// DialogueOn ;
8950: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8954: LD_EXP 18
8958: PPUSH
8959: LD_STRING DH-Cleverattack-1
8961: PPUSH
8962: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8966: LD_EXP 18
8970: PPUSH
8971: LD_STRING DH-Cleverattack-2
8973: PPUSH
8974: CALL_OW 88
// if hasFlameThrower then
8978: LD_VAR 0 3
8982: IFFALSE 9010
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8984: LD_EXP 34
8988: PPUSH
8989: LD_STRING DB-Cleverattack-3
8991: PPUSH
8992: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8996: LD_EXP 18
9000: PPUSH
9001: LD_STRING DH-Cleverattack-4
9003: PPUSH
9004: CALL_OW 88
// end else
9008: GO 9034
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
9010: LD_EXP 34
9014: PPUSH
9015: LD_STRING DB-Cleverattack-a-3
9017: PPUSH
9018: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
9022: LD_EXP 18
9026: PPUSH
9027: LD_STRING DH-Cleverattack-a-4
9029: PPUSH
9030: CALL_OW 88
// end ; DialogueOff ;
9034: CALL_OW 7
// if not hasFlameThrower then
9038: LD_VAR 0 3
9042: NOT
9043: IFFALSE 9047
// exit ;
9045: GO 9233
// earlyEscape := true ;
9047: LD_ADDR_EXP 16
9051: PUSH
9052: LD_INT 1
9054: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9055: LD_INT 140
9057: PPUSH
9058: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
9062: LD_ADDR_VAR 0 2
9066: PUSH
9067: LD_INT 22
9069: PUSH
9070: LD_INT 3
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PUSH
9077: LD_INT 2
9079: PUSH
9080: LD_INT 25
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 25
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 25
9102: PUSH
9103: LD_INT 4
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 69
9124: PUSH
9125: LD_EXP 21
9129: PUSH
9130: LD_EXP 36
9134: PUSH
9135: LD_EXP 35
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: LIST
9144: DIFF
9145: ST_TO_ADDR
// for i in tmp do
9146: LD_ADDR_VAR 0 1
9150: PUSH
9151: LD_VAR 0 2
9155: PUSH
9156: FOR_IN
9157: IFFALSE 9231
// begin if Prob ( 40 + 10 * Difficulty ) then
9159: LD_INT 40
9161: PUSH
9162: LD_INT 10
9164: PUSH
9165: LD_OWVAR 67
9169: MUL
9170: PLUS
9171: PPUSH
9172: CALL_OW 13
9176: IFFALSE 9180
// continue ;
9178: GO 9156
// SetTag ( i , tEscape ) ;
9180: LD_VAR 0 1
9184: PPUSH
9185: LD_EXP 17
9189: PPUSH
9190: CALL_OW 109
// if IsInUnit ( i ) then
9194: LD_VAR 0 1
9198: PPUSH
9199: CALL_OW 310
9203: IFFALSE 9214
// ComExitBuilding ( i ) ;
9205: LD_VAR 0 1
9209: PPUSH
9210: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
9214: LD_VAR 0 1
9218: PPUSH
9219: LD_INT 92
9221: PPUSH
9222: LD_INT 177
9224: PPUSH
9225: CALL_OW 171
// end ;
9229: GO 9156
9231: POP
9232: POP
// end ;
9233: PPOPN 3
9235: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
9236: LD_INT 9
9238: PPUSH
9239: LD_INT 2
9241: PUSH
9242: LD_INT 22
9244: PUSH
9245: LD_INT 3
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 22
9254: PUSH
9255: LD_INT 6
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: LIST
9266: PPUSH
9267: CALL_OW 70
9271: IFFALSE 9369
9273: GO 9275
9275: DISABLE
9276: LD_INT 0
9278: PPUSH
// begin enable ;
9279: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
9280: LD_ADDR_VAR 0 1
9284: PUSH
9285: LD_INT 9
9287: PPUSH
9288: LD_INT 2
9290: PUSH
9291: LD_INT 22
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: PUSH
9301: LD_INT 22
9303: PUSH
9304: LD_INT 6
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PPUSH
9316: CALL_OW 70
9320: PUSH
9321: FOR_IN
9322: IFFALSE 9367
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
9324: LD_VAR 0 1
9328: PPUSH
9329: CALL_OW 110
9333: PUSH
9334: LD_EXP 17
9338: EQUAL
9339: PUSH
9340: LD_VAR 0 1
9344: PPUSH
9345: CALL_OW 255
9349: PUSH
9350: LD_INT 6
9352: EQUAL
9353: OR
9354: IFFALSE 9365
// RemoveUnit ( i ) ;
9356: LD_VAR 0 1
9360: PPUSH
9361: CALL_OW 64
9365: GO 9321
9367: POP
9368: POP
// end ;
9369: PPOPN 1
9371: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9372: LD_EXP 23
9376: PUSH
9377: LD_EXP 23
9381: PPUSH
9382: CALL_OW 256
9386: PUSH
9387: LD_INT 3
9389: LESS
9390: AND
9391: IFFALSE 9437
9393: GO 9395
9395: DISABLE
// begin DialogueOn ;
9396: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9400: LD_EXP 23
9404: PPUSH
9405: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9409: LD_EXP 23
9413: PPUSH
9414: LD_STRING DK-Kkilled-1
9416: PPUSH
9417: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9421: LD_EXP 18
9425: PPUSH
9426: LD_STRING DH-Kkilled-2
9428: PPUSH
9429: CALL_OW 88
// DialogueOff ;
9433: CALL_OW 7
// end ;
9437: END
// every 0 0$1 trigger kaiaKilledByRussian do
9438: LD_EXP 8
9442: IFFALSE 9459
9444: GO 9446
9446: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9447: LD_EXP 18
9451: PPUSH
9452: LD_STRING DH-Kkilled-3
9454: PPUSH
9455: CALL_OW 88
9459: END
// every 0 0$1 trigger tick >= 24 24$00 do
9460: LD_OWVAR 1
9464: PUSH
9465: LD_INT 50400
9467: GREATEREQUAL
9468: IFFALSE 9505
9470: GO 9472
9472: DISABLE
// begin DialogueOn ;
9473: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9477: LD_EXP 26
9481: PPUSH
9482: LD_STRING DShar-slow-1
9484: PPUSH
9485: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9489: LD_EXP 26
9493: PPUSH
9494: LD_STRING DShar-slow-2
9496: PPUSH
9497: CALL_OW 94
// DialogueOff ;
9501: CALL_OW 7
// end ;
9505: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9506: LD_OWVAR 1
9510: PUSH
9511: LD_INT 84000
9513: PUSH
9514: LD_INT 75600
9516: PUSH
9517: LD_INT 67200
9519: PUSH
9520: LD_INT 63000
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: PUSH
9529: LD_OWVAR 67
9533: ARRAY
9534: GREATEREQUAL
9535: IFFALSE 9579
9537: GO 9539
9539: DISABLE
// begin DialogueOn ;
9540: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9544: LD_EXP 26
9548: PPUSH
9549: LD_STRING DShar-fail-1
9551: PPUSH
9552: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9556: LD_EXP 26
9560: PPUSH
9561: LD_STRING DShar-fail-2
9563: PPUSH
9564: CALL_OW 94
// DialogueOff ;
9568: CALL_OW 7
// YouLost ( Time ) ;
9572: LD_STRING Time
9574: PPUSH
9575: CALL_OW 104
// end ;
9579: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9580: LD_INT 22
9582: PUSH
9583: LD_INT 3
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PUSH
9590: LD_INT 2
9592: PUSH
9593: LD_INT 30
9595: PUSH
9596: LD_INT 1
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: LD_INT 30
9605: PUSH
9606: LD_INT 0
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: LIST
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PPUSH
9622: CALL_OW 69
9626: PUSH
9627: LD_INT 0
9629: EQUAL
9630: IFFALSE 10204
9632: GO 9634
9634: DISABLE
9635: LD_INT 0
9637: PPUSH
// begin if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9638: LD_OWVAR 1
9642: PUSH
9643: LD_EXP 5
9647: PLUS
9648: PUSH
9649: LD_INT 178500
9651: PUSH
9652: LD_INT 157500
9654: PUSH
9655: LD_INT 136500
9657: PUSH
9658: LD_INT 126000
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: PUSH
9667: LD_OWVAR 67
9671: ARRAY
9672: LESSEQUAL
9673: IFFALSE 9687
// AddMedal ( med1 , 1 ) else
9675: LD_STRING med1
9677: PPUSH
9678: LD_INT 1
9680: PPUSH
9681: CALL_OW 101
9685: GO 9698
// AddMedal ( med1 , - 1 ) ;
9687: LD_STRING med1
9689: PPUSH
9690: LD_INT 1
9692: NEG
9693: PPUSH
9694: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9698: LD_EXP 7
9702: PUSH
9703: LD_INT 3
9705: GREATEREQUAL
9706: PUSH
9707: LD_EXP 11
9711: MUL
9712: PUSH
9713: LD_EXP 9
9717: MUL
9718: PUSH
9719: LD_EXP 6
9723: PUSH
9724: LD_INT 6
9726: PUSH
9727: LD_INT 5
9729: PUSH
9730: LD_INT 4
9732: PUSH
9733: LD_INT 3
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: PUSH
9742: LD_OWVAR 67
9746: ARRAY
9747: LESS
9748: MUL
9749: IFFALSE 9763
// AddMedal ( med2 , 1 ) else
9751: LD_STRING med2
9753: PPUSH
9754: LD_INT 1
9756: PPUSH
9757: CALL_OW 101
9761: GO 9837
// if flamethrowers < 3 then
9763: LD_EXP 7
9767: PUSH
9768: LD_INT 3
9770: LESS
9771: IFFALSE 9786
// AddMedal ( med2 , - 1 ) else
9773: LD_STRING med2
9775: PPUSH
9776: LD_INT 1
9778: NEG
9779: PPUSH
9780: CALL_OW 101
9784: GO 9837
// if not baseHill then
9786: LD_EXP 11
9790: NOT
9791: IFFALSE 9806
// AddMedal ( med2 , - 2 ) else
9793: LD_STRING med2
9795: PPUSH
9796: LD_INT 2
9798: NEG
9799: PPUSH
9800: CALL_OW 101
9804: GO 9837
// if not hannibalPath then
9806: LD_EXP 9
9810: NOT
9811: IFFALSE 9826
// AddMedal ( med2 , - 3 ) else
9813: LD_STRING med2
9815: PPUSH
9816: LD_INT 3
9818: NEG
9819: PPUSH
9820: CALL_OW 101
9824: GO 9837
// AddMedal ( med3 , - 2 ) ;
9826: LD_STRING med3
9828: PPUSH
9829: LD_INT 2
9831: NEG
9832: PPUSH
9833: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9837: LD_EXP 14
9841: PPUSH
9842: LD_STRING 04_2_GaidarKilled
9844: PPUSH
9845: CALL_OW 39
// if gaidarKilled then
9849: LD_EXP 14
9853: IFFALSE 9867
// AddMedal ( med3 , 1 ) else
9855: LD_STRING med3
9857: PPUSH
9858: LD_INT 1
9860: PPUSH
9861: CALL_OW 101
9865: GO 9878
// AddMedal ( med3 , - 1 ) ;
9867: LD_STRING med3
9869: PPUSH
9870: LD_INT 1
9872: NEG
9873: PPUSH
9874: CALL_OW 101
// GiveMedals ( MAIN ) ;
9878: LD_STRING MAIN
9880: PPUSH
9881: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9885: LD_INT 22
9887: PUSH
9888: LD_INT 2
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 3
9897: PUSH
9898: LD_INT 23
9900: PUSH
9901: LD_INT 0
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PPUSH
9916: CALL_OW 69
9920: PPUSH
9921: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9925: LD_EXP 18
9929: PPUSH
9930: LD_STRING 04_2_Heike
9932: PPUSH
9933: CALL_OW 38
// if Aviradze then
9937: LD_EXP 28
9941: IFFALSE 9955
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9943: LD_EXP 28
9947: PPUSH
9948: LD_STRING 04_2_Aviradze
9950: PPUSH
9951: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9955: LD_EXP 21
9959: PUSH
9960: LD_EXP 21
9964: PPUSH
9965: CALL_OW 255
9969: PUSH
9970: LD_INT 2
9972: EQUAL
9973: AND
9974: IFFALSE 10004
// begin if ibrahimOnRuSide then
9976: LD_EXP 3
9980: IFFALSE 9992
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9982: LD_INT 1
9984: PPUSH
9985: LD_STRING 04_2_IbrahimJoined
9987: PPUSH
9988: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9992: LD_EXP 21
9996: PPUSH
9997: LD_STRING 04_2_Ibrahim
9999: PPUSH
10000: CALL_OW 38
// end ; if Kamil then
10004: LD_EXP 22
10008: IFFALSE 10022
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
10010: LD_EXP 22
10014: PPUSH
10015: LD_STRING 04_2_Kamil
10017: PPUSH
10018: CALL_OW 38
// if Sophia then
10022: LD_EXP 24
10026: IFFALSE 10040
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
10028: LD_EXP 24
10032: PPUSH
10033: LD_STRING 04_2_Sophia
10035: PPUSH
10036: CALL_OW 38
// if Kaia then
10040: LD_EXP 23
10044: IFFALSE 10058
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
10046: LD_EXP 23
10050: PPUSH
10051: LD_STRING 04_2_Kaia
10053: PPUSH
10054: CALL_OW 38
// if Givi then
10058: LD_EXP 19
10062: IFFALSE 10076
// SaveCharacters ( Givi , 04_2_Givi ) ;
10064: LD_EXP 19
10068: PPUSH
10069: LD_STRING 04_2_Givi
10071: PPUSH
10072: CALL_OW 38
// if Mike then
10076: LD_EXP 20
10080: IFFALSE 10094
// SaveCharacters ( Mike , 04_2_Mike ) ;
10082: LD_EXP 20
10086: PPUSH
10087: LD_STRING 04_2_Mike
10089: PPUSH
10090: CALL_OW 38
// if Markov then
10094: LD_EXP 25
10098: IFFALSE 10112
// SaveCharacters ( Markov , 04_2_Markov ) ;
10100: LD_EXP 25
10104: PPUSH
10105: LD_STRING 04_2_Markov
10107: PPUSH
10108: CALL_OW 38
// if Kurt then
10112: LD_EXP 27
10116: IFFALSE 10130
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
10118: LD_EXP 27
10122: PPUSH
10123: LD_STRING 04_2_Kurt
10125: PPUSH
10126: CALL_OW 38
// if heikeSecondSquad then
10130: LD_EXP 29
10134: IFFALSE 10148
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
10136: LD_EXP 29
10140: PPUSH
10141: LD_STRING 04_2_others
10143: PPUSH
10144: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10148: LD_ADDR_VAR 0 1
10152: PUSH
10153: LD_INT 22
10155: PUSH
10156: LD_INT 2
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 23
10165: PUSH
10166: LD_INT 0
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PPUSH
10177: CALL_OW 69
10181: ST_TO_ADDR
// if tmp then
10182: LD_VAR 0 1
10186: IFFALSE 10200
// SaveCharacters ( tmp , 04_2_apes ) ;
10188: LD_VAR 0 1
10192: PPUSH
10193: LD_STRING 04_2_apes
10195: PPUSH
10196: CALL_OW 38
// YouWin ;
10200: CALL_OW 103
// end ; end_of_file
10204: PPOPN 1
10206: END
// export globalGameSaveCounter ; every 0 0$1 do
10207: GO 10209
10209: DISABLE
// begin enable ;
10210: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10211: LD_STRING updateTimer(
10213: PUSH
10214: LD_OWVAR 1
10218: STR
10219: PUSH
10220: LD_STRING );
10222: STR
10223: PPUSH
10224: CALL_OW 559
// end ;
10228: END
// every 0 0$1 do
10229: GO 10231
10231: DISABLE
// begin globalGameSaveCounter := 0 ;
10232: LD_ADDR_EXP 43
10236: PUSH
10237: LD_INT 0
10239: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10240: LD_STRING setGameSaveCounter(0)
10242: PPUSH
10243: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10247: LD_STRING initStreamRollete();
10249: PPUSH
10250: CALL_OW 559
// InitStreamMode ;
10254: CALL 11580 0 0
// DefineStreamItems ( false ) ;
10258: LD_INT 0
10260: PPUSH
10261: CALL 12044 0 1
// end ;
10265: END
// export function SOS_MapStart ( ) ; begin
10266: LD_INT 0
10268: PPUSH
// if streamModeActive then
10269: LD_EXP 44
10273: IFFALSE 10282
// DefineStreamItems ( true ) ;
10275: LD_INT 1
10277: PPUSH
10278: CALL 12044 0 1
// UpdateLuaVariables ( ) ;
10282: CALL 10299 0 0
// UpdateFactoryWaypoints ( ) ;
10286: CALL 24905 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10290: CALL 25162 0 0
// end ;
10294: LD_VAR 0 1
10298: RET
// function UpdateLuaVariables ( ) ; begin
10299: LD_INT 0
10301: PPUSH
// if globalGameSaveCounter then
10302: LD_EXP 43
10306: IFFALSE 10340
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10308: LD_ADDR_EXP 43
10312: PUSH
10313: LD_EXP 43
10317: PPUSH
10318: CALL 69282 0 1
10322: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10323: LD_STRING setGameSaveCounter(
10325: PUSH
10326: LD_EXP 43
10330: STR
10331: PUSH
10332: LD_STRING )
10334: STR
10335: PPUSH
10336: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10340: LD_STRING setGameDifficulty(
10342: PUSH
10343: LD_OWVAR 67
10347: STR
10348: PUSH
10349: LD_STRING )
10351: STR
10352: PPUSH
10353: CALL_OW 559
// end ;
10357: LD_VAR 0 1
10361: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10362: LD_INT 0
10364: PPUSH
// if p2 = stream_mode then
10365: LD_VAR 0 2
10369: PUSH
10370: LD_INT 100
10372: EQUAL
10373: IFFALSE 11376
// begin if not StreamModeActive then
10375: LD_EXP 44
10379: NOT
10380: IFFALSE 10390
// StreamModeActive := true ;
10382: LD_ADDR_EXP 44
10386: PUSH
10387: LD_INT 1
10389: ST_TO_ADDR
// if p3 = 0 then
10390: LD_VAR 0 3
10394: PUSH
10395: LD_INT 0
10397: EQUAL
10398: IFFALSE 10404
// InitStreamMode ;
10400: CALL 11580 0 0
// if p3 = 1 then
10404: LD_VAR 0 3
10408: PUSH
10409: LD_INT 1
10411: EQUAL
10412: IFFALSE 10422
// sRocket := true ;
10414: LD_ADDR_EXP 49
10418: PUSH
10419: LD_INT 1
10421: ST_TO_ADDR
// if p3 = 2 then
10422: LD_VAR 0 3
10426: PUSH
10427: LD_INT 2
10429: EQUAL
10430: IFFALSE 10440
// sSpeed := true ;
10432: LD_ADDR_EXP 48
10436: PUSH
10437: LD_INT 1
10439: ST_TO_ADDR
// if p3 = 3 then
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 3
10447: EQUAL
10448: IFFALSE 10458
// sEngine := true ;
10450: LD_ADDR_EXP 50
10454: PUSH
10455: LD_INT 1
10457: ST_TO_ADDR
// if p3 = 4 then
10458: LD_VAR 0 3
10462: PUSH
10463: LD_INT 4
10465: EQUAL
10466: IFFALSE 10476
// sSpec := true ;
10468: LD_ADDR_EXP 47
10472: PUSH
10473: LD_INT 1
10475: ST_TO_ADDR
// if p3 = 5 then
10476: LD_VAR 0 3
10480: PUSH
10481: LD_INT 5
10483: EQUAL
10484: IFFALSE 10494
// sLevel := true ;
10486: LD_ADDR_EXP 51
10490: PUSH
10491: LD_INT 1
10493: ST_TO_ADDR
// if p3 = 6 then
10494: LD_VAR 0 3
10498: PUSH
10499: LD_INT 6
10501: EQUAL
10502: IFFALSE 10512
// sArmoury := true ;
10504: LD_ADDR_EXP 52
10508: PUSH
10509: LD_INT 1
10511: ST_TO_ADDR
// if p3 = 7 then
10512: LD_VAR 0 3
10516: PUSH
10517: LD_INT 7
10519: EQUAL
10520: IFFALSE 10530
// sRadar := true ;
10522: LD_ADDR_EXP 53
10526: PUSH
10527: LD_INT 1
10529: ST_TO_ADDR
// if p3 = 8 then
10530: LD_VAR 0 3
10534: PUSH
10535: LD_INT 8
10537: EQUAL
10538: IFFALSE 10548
// sBunker := true ;
10540: LD_ADDR_EXP 54
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// if p3 = 9 then
10548: LD_VAR 0 3
10552: PUSH
10553: LD_INT 9
10555: EQUAL
10556: IFFALSE 10566
// sHack := true ;
10558: LD_ADDR_EXP 55
10562: PUSH
10563: LD_INT 1
10565: ST_TO_ADDR
// if p3 = 10 then
10566: LD_VAR 0 3
10570: PUSH
10571: LD_INT 10
10573: EQUAL
10574: IFFALSE 10584
// sFire := true ;
10576: LD_ADDR_EXP 56
10580: PUSH
10581: LD_INT 1
10583: ST_TO_ADDR
// if p3 = 11 then
10584: LD_VAR 0 3
10588: PUSH
10589: LD_INT 11
10591: EQUAL
10592: IFFALSE 10602
// sRefresh := true ;
10594: LD_ADDR_EXP 57
10598: PUSH
10599: LD_INT 1
10601: ST_TO_ADDR
// if p3 = 12 then
10602: LD_VAR 0 3
10606: PUSH
10607: LD_INT 12
10609: EQUAL
10610: IFFALSE 10620
// sExp := true ;
10612: LD_ADDR_EXP 58
10616: PUSH
10617: LD_INT 1
10619: ST_TO_ADDR
// if p3 = 13 then
10620: LD_VAR 0 3
10624: PUSH
10625: LD_INT 13
10627: EQUAL
10628: IFFALSE 10638
// sDepot := true ;
10630: LD_ADDR_EXP 59
10634: PUSH
10635: LD_INT 1
10637: ST_TO_ADDR
// if p3 = 14 then
10638: LD_VAR 0 3
10642: PUSH
10643: LD_INT 14
10645: EQUAL
10646: IFFALSE 10656
// sFlag := true ;
10648: LD_ADDR_EXP 60
10652: PUSH
10653: LD_INT 1
10655: ST_TO_ADDR
// if p3 = 15 then
10656: LD_VAR 0 3
10660: PUSH
10661: LD_INT 15
10663: EQUAL
10664: IFFALSE 10674
// sKamikadze := true ;
10666: LD_ADDR_EXP 68
10670: PUSH
10671: LD_INT 1
10673: ST_TO_ADDR
// if p3 = 16 then
10674: LD_VAR 0 3
10678: PUSH
10679: LD_INT 16
10681: EQUAL
10682: IFFALSE 10692
// sTroll := true ;
10684: LD_ADDR_EXP 69
10688: PUSH
10689: LD_INT 1
10691: ST_TO_ADDR
// if p3 = 17 then
10692: LD_VAR 0 3
10696: PUSH
10697: LD_INT 17
10699: EQUAL
10700: IFFALSE 10710
// sSlow := true ;
10702: LD_ADDR_EXP 70
10706: PUSH
10707: LD_INT 1
10709: ST_TO_ADDR
// if p3 = 18 then
10710: LD_VAR 0 3
10714: PUSH
10715: LD_INT 18
10717: EQUAL
10718: IFFALSE 10728
// sLack := true ;
10720: LD_ADDR_EXP 71
10724: PUSH
10725: LD_INT 1
10727: ST_TO_ADDR
// if p3 = 19 then
10728: LD_VAR 0 3
10732: PUSH
10733: LD_INT 19
10735: EQUAL
10736: IFFALSE 10746
// sTank := true ;
10738: LD_ADDR_EXP 73
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// if p3 = 20 then
10746: LD_VAR 0 3
10750: PUSH
10751: LD_INT 20
10753: EQUAL
10754: IFFALSE 10764
// sRemote := true ;
10756: LD_ADDR_EXP 74
10760: PUSH
10761: LD_INT 1
10763: ST_TO_ADDR
// if p3 = 21 then
10764: LD_VAR 0 3
10768: PUSH
10769: LD_INT 21
10771: EQUAL
10772: IFFALSE 10782
// sPowell := true ;
10774: LD_ADDR_EXP 75
10778: PUSH
10779: LD_INT 1
10781: ST_TO_ADDR
// if p3 = 22 then
10782: LD_VAR 0 3
10786: PUSH
10787: LD_INT 22
10789: EQUAL
10790: IFFALSE 10800
// sTeleport := true ;
10792: LD_ADDR_EXP 78
10796: PUSH
10797: LD_INT 1
10799: ST_TO_ADDR
// if p3 = 23 then
10800: LD_VAR 0 3
10804: PUSH
10805: LD_INT 23
10807: EQUAL
10808: IFFALSE 10818
// sOilTower := true ;
10810: LD_ADDR_EXP 80
10814: PUSH
10815: LD_INT 1
10817: ST_TO_ADDR
// if p3 = 24 then
10818: LD_VAR 0 3
10822: PUSH
10823: LD_INT 24
10825: EQUAL
10826: IFFALSE 10836
// sShovel := true ;
10828: LD_ADDR_EXP 81
10832: PUSH
10833: LD_INT 1
10835: ST_TO_ADDR
// if p3 = 25 then
10836: LD_VAR 0 3
10840: PUSH
10841: LD_INT 25
10843: EQUAL
10844: IFFALSE 10854
// sSheik := true ;
10846: LD_ADDR_EXP 82
10850: PUSH
10851: LD_INT 1
10853: ST_TO_ADDR
// if p3 = 26 then
10854: LD_VAR 0 3
10858: PUSH
10859: LD_INT 26
10861: EQUAL
10862: IFFALSE 10872
// sEarthquake := true ;
10864: LD_ADDR_EXP 84
10868: PUSH
10869: LD_INT 1
10871: ST_TO_ADDR
// if p3 = 27 then
10872: LD_VAR 0 3
10876: PUSH
10877: LD_INT 27
10879: EQUAL
10880: IFFALSE 10890
// sAI := true ;
10882: LD_ADDR_EXP 85
10886: PUSH
10887: LD_INT 1
10889: ST_TO_ADDR
// if p3 = 28 then
10890: LD_VAR 0 3
10894: PUSH
10895: LD_INT 28
10897: EQUAL
10898: IFFALSE 10908
// sCargo := true ;
10900: LD_ADDR_EXP 88
10904: PUSH
10905: LD_INT 1
10907: ST_TO_ADDR
// if p3 = 29 then
10908: LD_VAR 0 3
10912: PUSH
10913: LD_INT 29
10915: EQUAL
10916: IFFALSE 10926
// sDLaser := true ;
10918: LD_ADDR_EXP 89
10922: PUSH
10923: LD_INT 1
10925: ST_TO_ADDR
// if p3 = 30 then
10926: LD_VAR 0 3
10930: PUSH
10931: LD_INT 30
10933: EQUAL
10934: IFFALSE 10944
// sExchange := true ;
10936: LD_ADDR_EXP 90
10940: PUSH
10941: LD_INT 1
10943: ST_TO_ADDR
// if p3 = 31 then
10944: LD_VAR 0 3
10948: PUSH
10949: LD_INT 31
10951: EQUAL
10952: IFFALSE 10962
// sFac := true ;
10954: LD_ADDR_EXP 91
10958: PUSH
10959: LD_INT 1
10961: ST_TO_ADDR
// if p3 = 32 then
10962: LD_VAR 0 3
10966: PUSH
10967: LD_INT 32
10969: EQUAL
10970: IFFALSE 10980
// sPower := true ;
10972: LD_ADDR_EXP 92
10976: PUSH
10977: LD_INT 1
10979: ST_TO_ADDR
// if p3 = 33 then
10980: LD_VAR 0 3
10984: PUSH
10985: LD_INT 33
10987: EQUAL
10988: IFFALSE 10998
// sRandom := true ;
10990: LD_ADDR_EXP 93
10994: PUSH
10995: LD_INT 1
10997: ST_TO_ADDR
// if p3 = 34 then
10998: LD_VAR 0 3
11002: PUSH
11003: LD_INT 34
11005: EQUAL
11006: IFFALSE 11016
// sShield := true ;
11008: LD_ADDR_EXP 94
11012: PUSH
11013: LD_INT 1
11015: ST_TO_ADDR
// if p3 = 35 then
11016: LD_VAR 0 3
11020: PUSH
11021: LD_INT 35
11023: EQUAL
11024: IFFALSE 11034
// sTime := true ;
11026: LD_ADDR_EXP 95
11030: PUSH
11031: LD_INT 1
11033: ST_TO_ADDR
// if p3 = 36 then
11034: LD_VAR 0 3
11038: PUSH
11039: LD_INT 36
11041: EQUAL
11042: IFFALSE 11052
// sTools := true ;
11044: LD_ADDR_EXP 96
11048: PUSH
11049: LD_INT 1
11051: ST_TO_ADDR
// if p3 = 101 then
11052: LD_VAR 0 3
11056: PUSH
11057: LD_INT 101
11059: EQUAL
11060: IFFALSE 11070
// sSold := true ;
11062: LD_ADDR_EXP 61
11066: PUSH
11067: LD_INT 1
11069: ST_TO_ADDR
// if p3 = 102 then
11070: LD_VAR 0 3
11074: PUSH
11075: LD_INT 102
11077: EQUAL
11078: IFFALSE 11088
// sDiff := true ;
11080: LD_ADDR_EXP 62
11084: PUSH
11085: LD_INT 1
11087: ST_TO_ADDR
// if p3 = 103 then
11088: LD_VAR 0 3
11092: PUSH
11093: LD_INT 103
11095: EQUAL
11096: IFFALSE 11106
// sFog := true ;
11098: LD_ADDR_EXP 65
11102: PUSH
11103: LD_INT 1
11105: ST_TO_ADDR
// if p3 = 104 then
11106: LD_VAR 0 3
11110: PUSH
11111: LD_INT 104
11113: EQUAL
11114: IFFALSE 11124
// sReset := true ;
11116: LD_ADDR_EXP 66
11120: PUSH
11121: LD_INT 1
11123: ST_TO_ADDR
// if p3 = 105 then
11124: LD_VAR 0 3
11128: PUSH
11129: LD_INT 105
11131: EQUAL
11132: IFFALSE 11142
// sSun := true ;
11134: LD_ADDR_EXP 67
11138: PUSH
11139: LD_INT 1
11141: ST_TO_ADDR
// if p3 = 106 then
11142: LD_VAR 0 3
11146: PUSH
11147: LD_INT 106
11149: EQUAL
11150: IFFALSE 11160
// sTiger := true ;
11152: LD_ADDR_EXP 63
11156: PUSH
11157: LD_INT 1
11159: ST_TO_ADDR
// if p3 = 107 then
11160: LD_VAR 0 3
11164: PUSH
11165: LD_INT 107
11167: EQUAL
11168: IFFALSE 11178
// sBomb := true ;
11170: LD_ADDR_EXP 64
11174: PUSH
11175: LD_INT 1
11177: ST_TO_ADDR
// if p3 = 108 then
11178: LD_VAR 0 3
11182: PUSH
11183: LD_INT 108
11185: EQUAL
11186: IFFALSE 11196
// sWound := true ;
11188: LD_ADDR_EXP 72
11192: PUSH
11193: LD_INT 1
11195: ST_TO_ADDR
// if p3 = 109 then
11196: LD_VAR 0 3
11200: PUSH
11201: LD_INT 109
11203: EQUAL
11204: IFFALSE 11214
// sBetray := true ;
11206: LD_ADDR_EXP 76
11210: PUSH
11211: LD_INT 1
11213: ST_TO_ADDR
// if p3 = 110 then
11214: LD_VAR 0 3
11218: PUSH
11219: LD_INT 110
11221: EQUAL
11222: IFFALSE 11232
// sContamin := true ;
11224: LD_ADDR_EXP 77
11228: PUSH
11229: LD_INT 1
11231: ST_TO_ADDR
// if p3 = 111 then
11232: LD_VAR 0 3
11236: PUSH
11237: LD_INT 111
11239: EQUAL
11240: IFFALSE 11250
// sOil := true ;
11242: LD_ADDR_EXP 79
11246: PUSH
11247: LD_INT 1
11249: ST_TO_ADDR
// if p3 = 112 then
11250: LD_VAR 0 3
11254: PUSH
11255: LD_INT 112
11257: EQUAL
11258: IFFALSE 11268
// sStu := true ;
11260: LD_ADDR_EXP 83
11264: PUSH
11265: LD_INT 1
11267: ST_TO_ADDR
// if p3 = 113 then
11268: LD_VAR 0 3
11272: PUSH
11273: LD_INT 113
11275: EQUAL
11276: IFFALSE 11286
// sBazooka := true ;
11278: LD_ADDR_EXP 86
11282: PUSH
11283: LD_INT 1
11285: ST_TO_ADDR
// if p3 = 114 then
11286: LD_VAR 0 3
11290: PUSH
11291: LD_INT 114
11293: EQUAL
11294: IFFALSE 11304
// sMortar := true ;
11296: LD_ADDR_EXP 87
11300: PUSH
11301: LD_INT 1
11303: ST_TO_ADDR
// if p3 = 115 then
11304: LD_VAR 0 3
11308: PUSH
11309: LD_INT 115
11311: EQUAL
11312: IFFALSE 11322
// sRanger := true ;
11314: LD_ADDR_EXP 97
11318: PUSH
11319: LD_INT 1
11321: ST_TO_ADDR
// if p3 = 116 then
11322: LD_VAR 0 3
11326: PUSH
11327: LD_INT 116
11329: EQUAL
11330: IFFALSE 11340
// sComputer := true ;
11332: LD_ADDR_EXP 98
11336: PUSH
11337: LD_INT 1
11339: ST_TO_ADDR
// if p3 = 117 then
11340: LD_VAR 0 3
11344: PUSH
11345: LD_INT 117
11347: EQUAL
11348: IFFALSE 11358
// s30 := true ;
11350: LD_ADDR_EXP 99
11354: PUSH
11355: LD_INT 1
11357: ST_TO_ADDR
// if p3 = 118 then
11358: LD_VAR 0 3
11362: PUSH
11363: LD_INT 118
11365: EQUAL
11366: IFFALSE 11376
// s60 := true ;
11368: LD_ADDR_EXP 100
11372: PUSH
11373: LD_INT 1
11375: ST_TO_ADDR
// end ; if p2 = hack_mode then
11376: LD_VAR 0 2
11380: PUSH
11381: LD_INT 101
11383: EQUAL
11384: IFFALSE 11512
// begin case p3 of 1 :
11386: LD_VAR 0 3
11390: PUSH
11391: LD_INT 1
11393: DOUBLE
11394: EQUAL
11395: IFTRUE 11399
11397: GO 11406
11399: POP
// hHackUnlimitedResources ; 2 :
11400: CALL 23651 0 0
11404: GO 11512
11406: LD_INT 2
11408: DOUBLE
11409: EQUAL
11410: IFTRUE 11414
11412: GO 11421
11414: POP
// hHackSetLevel10 ; 3 :
11415: CALL 23784 0 0
11419: GO 11512
11421: LD_INT 3
11423: DOUBLE
11424: EQUAL
11425: IFTRUE 11429
11427: GO 11436
11429: POP
// hHackSetLevel10YourUnits ; 4 :
11430: CALL 23869 0 0
11434: GO 11512
11436: LD_INT 4
11438: DOUBLE
11439: EQUAL
11440: IFTRUE 11444
11442: GO 11451
11444: POP
// hHackInvincible ; 5 :
11445: CALL 24317 0 0
11449: GO 11512
11451: LD_INT 5
11453: DOUBLE
11454: EQUAL
11455: IFTRUE 11459
11457: GO 11466
11459: POP
// hHackInvisible ; 6 :
11460: CALL 24428 0 0
11464: GO 11512
11466: LD_INT 6
11468: DOUBLE
11469: EQUAL
11470: IFTRUE 11474
11472: GO 11481
11474: POP
// hHackChangeYourSide ; 7 :
11475: CALL 24485 0 0
11479: GO 11512
11481: LD_INT 7
11483: DOUBLE
11484: EQUAL
11485: IFTRUE 11489
11487: GO 11496
11489: POP
// hHackChangeUnitSide ; 8 :
11490: CALL 24527 0 0
11494: GO 11512
11496: LD_INT 8
11498: DOUBLE
11499: EQUAL
11500: IFTRUE 11504
11502: GO 11511
11504: POP
// hHackFog ; end ;
11505: CALL 24628 0 0
11509: GO 11512
11511: POP
// end ; if p2 = game_save_mode then
11512: LD_VAR 0 2
11516: PUSH
11517: LD_INT 102
11519: EQUAL
11520: IFFALSE 11575
// begin if p3 = 1 then
11522: LD_VAR 0 3
11526: PUSH
11527: LD_INT 1
11529: EQUAL
11530: IFFALSE 11542
// globalGameSaveCounter := p4 ;
11532: LD_ADDR_EXP 43
11536: PUSH
11537: LD_VAR 0 4
11541: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11542: LD_VAR 0 3
11546: PUSH
11547: LD_INT 2
11549: EQUAL
11550: PUSH
11551: LD_EXP 43
11555: AND
11556: IFFALSE 11575
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11558: LD_STRING setGameSaveCounter(
11560: PUSH
11561: LD_EXP 43
11565: STR
11566: PUSH
11567: LD_STRING )
11569: STR
11570: PPUSH
11571: CALL_OW 559
// end ; end ;
11575: LD_VAR 0 7
11579: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11580: LD_INT 0
11582: PPUSH
// streamModeActive := false ;
11583: LD_ADDR_EXP 44
11587: PUSH
11588: LD_INT 0
11590: ST_TO_ADDR
// normalCounter := 36 ;
11591: LD_ADDR_EXP 45
11595: PUSH
11596: LD_INT 36
11598: ST_TO_ADDR
// hardcoreCounter := 18 ;
11599: LD_ADDR_EXP 46
11603: PUSH
11604: LD_INT 18
11606: ST_TO_ADDR
// sRocket := false ;
11607: LD_ADDR_EXP 49
11611: PUSH
11612: LD_INT 0
11614: ST_TO_ADDR
// sSpeed := false ;
11615: LD_ADDR_EXP 48
11619: PUSH
11620: LD_INT 0
11622: ST_TO_ADDR
// sEngine := false ;
11623: LD_ADDR_EXP 50
11627: PUSH
11628: LD_INT 0
11630: ST_TO_ADDR
// sSpec := false ;
11631: LD_ADDR_EXP 47
11635: PUSH
11636: LD_INT 0
11638: ST_TO_ADDR
// sLevel := false ;
11639: LD_ADDR_EXP 51
11643: PUSH
11644: LD_INT 0
11646: ST_TO_ADDR
// sArmoury := false ;
11647: LD_ADDR_EXP 52
11651: PUSH
11652: LD_INT 0
11654: ST_TO_ADDR
// sRadar := false ;
11655: LD_ADDR_EXP 53
11659: PUSH
11660: LD_INT 0
11662: ST_TO_ADDR
// sBunker := false ;
11663: LD_ADDR_EXP 54
11667: PUSH
11668: LD_INT 0
11670: ST_TO_ADDR
// sHack := false ;
11671: LD_ADDR_EXP 55
11675: PUSH
11676: LD_INT 0
11678: ST_TO_ADDR
// sFire := false ;
11679: LD_ADDR_EXP 56
11683: PUSH
11684: LD_INT 0
11686: ST_TO_ADDR
// sRefresh := false ;
11687: LD_ADDR_EXP 57
11691: PUSH
11692: LD_INT 0
11694: ST_TO_ADDR
// sExp := false ;
11695: LD_ADDR_EXP 58
11699: PUSH
11700: LD_INT 0
11702: ST_TO_ADDR
// sDepot := false ;
11703: LD_ADDR_EXP 59
11707: PUSH
11708: LD_INT 0
11710: ST_TO_ADDR
// sFlag := false ;
11711: LD_ADDR_EXP 60
11715: PUSH
11716: LD_INT 0
11718: ST_TO_ADDR
// sKamikadze := false ;
11719: LD_ADDR_EXP 68
11723: PUSH
11724: LD_INT 0
11726: ST_TO_ADDR
// sTroll := false ;
11727: LD_ADDR_EXP 69
11731: PUSH
11732: LD_INT 0
11734: ST_TO_ADDR
// sSlow := false ;
11735: LD_ADDR_EXP 70
11739: PUSH
11740: LD_INT 0
11742: ST_TO_ADDR
// sLack := false ;
11743: LD_ADDR_EXP 71
11747: PUSH
11748: LD_INT 0
11750: ST_TO_ADDR
// sTank := false ;
11751: LD_ADDR_EXP 73
11755: PUSH
11756: LD_INT 0
11758: ST_TO_ADDR
// sRemote := false ;
11759: LD_ADDR_EXP 74
11763: PUSH
11764: LD_INT 0
11766: ST_TO_ADDR
// sPowell := false ;
11767: LD_ADDR_EXP 75
11771: PUSH
11772: LD_INT 0
11774: ST_TO_ADDR
// sTeleport := false ;
11775: LD_ADDR_EXP 78
11779: PUSH
11780: LD_INT 0
11782: ST_TO_ADDR
// sOilTower := false ;
11783: LD_ADDR_EXP 80
11787: PUSH
11788: LD_INT 0
11790: ST_TO_ADDR
// sShovel := false ;
11791: LD_ADDR_EXP 81
11795: PUSH
11796: LD_INT 0
11798: ST_TO_ADDR
// sSheik := false ;
11799: LD_ADDR_EXP 82
11803: PUSH
11804: LD_INT 0
11806: ST_TO_ADDR
// sEarthquake := false ;
11807: LD_ADDR_EXP 84
11811: PUSH
11812: LD_INT 0
11814: ST_TO_ADDR
// sAI := false ;
11815: LD_ADDR_EXP 85
11819: PUSH
11820: LD_INT 0
11822: ST_TO_ADDR
// sCargo := false ;
11823: LD_ADDR_EXP 88
11827: PUSH
11828: LD_INT 0
11830: ST_TO_ADDR
// sDLaser := false ;
11831: LD_ADDR_EXP 89
11835: PUSH
11836: LD_INT 0
11838: ST_TO_ADDR
// sExchange := false ;
11839: LD_ADDR_EXP 90
11843: PUSH
11844: LD_INT 0
11846: ST_TO_ADDR
// sFac := false ;
11847: LD_ADDR_EXP 91
11851: PUSH
11852: LD_INT 0
11854: ST_TO_ADDR
// sPower := false ;
11855: LD_ADDR_EXP 92
11859: PUSH
11860: LD_INT 0
11862: ST_TO_ADDR
// sRandom := false ;
11863: LD_ADDR_EXP 93
11867: PUSH
11868: LD_INT 0
11870: ST_TO_ADDR
// sShield := false ;
11871: LD_ADDR_EXP 94
11875: PUSH
11876: LD_INT 0
11878: ST_TO_ADDR
// sTime := false ;
11879: LD_ADDR_EXP 95
11883: PUSH
11884: LD_INT 0
11886: ST_TO_ADDR
// sTools := false ;
11887: LD_ADDR_EXP 96
11891: PUSH
11892: LD_INT 0
11894: ST_TO_ADDR
// sSold := false ;
11895: LD_ADDR_EXP 61
11899: PUSH
11900: LD_INT 0
11902: ST_TO_ADDR
// sDiff := false ;
11903: LD_ADDR_EXP 62
11907: PUSH
11908: LD_INT 0
11910: ST_TO_ADDR
// sFog := false ;
11911: LD_ADDR_EXP 65
11915: PUSH
11916: LD_INT 0
11918: ST_TO_ADDR
// sReset := false ;
11919: LD_ADDR_EXP 66
11923: PUSH
11924: LD_INT 0
11926: ST_TO_ADDR
// sSun := false ;
11927: LD_ADDR_EXP 67
11931: PUSH
11932: LD_INT 0
11934: ST_TO_ADDR
// sTiger := false ;
11935: LD_ADDR_EXP 63
11939: PUSH
11940: LD_INT 0
11942: ST_TO_ADDR
// sBomb := false ;
11943: LD_ADDR_EXP 64
11947: PUSH
11948: LD_INT 0
11950: ST_TO_ADDR
// sWound := false ;
11951: LD_ADDR_EXP 72
11955: PUSH
11956: LD_INT 0
11958: ST_TO_ADDR
// sBetray := false ;
11959: LD_ADDR_EXP 76
11963: PUSH
11964: LD_INT 0
11966: ST_TO_ADDR
// sContamin := false ;
11967: LD_ADDR_EXP 77
11971: PUSH
11972: LD_INT 0
11974: ST_TO_ADDR
// sOil := false ;
11975: LD_ADDR_EXP 79
11979: PUSH
11980: LD_INT 0
11982: ST_TO_ADDR
// sStu := false ;
11983: LD_ADDR_EXP 83
11987: PUSH
11988: LD_INT 0
11990: ST_TO_ADDR
// sBazooka := false ;
11991: LD_ADDR_EXP 86
11995: PUSH
11996: LD_INT 0
11998: ST_TO_ADDR
// sMortar := false ;
11999: LD_ADDR_EXP 87
12003: PUSH
12004: LD_INT 0
12006: ST_TO_ADDR
// sRanger := false ;
12007: LD_ADDR_EXP 97
12011: PUSH
12012: LD_INT 0
12014: ST_TO_ADDR
// sComputer := false ;
12015: LD_ADDR_EXP 98
12019: PUSH
12020: LD_INT 0
12022: ST_TO_ADDR
// s30 := false ;
12023: LD_ADDR_EXP 99
12027: PUSH
12028: LD_INT 0
12030: ST_TO_ADDR
// s60 := false ;
12031: LD_ADDR_EXP 100
12035: PUSH
12036: LD_INT 0
12038: ST_TO_ADDR
// end ;
12039: LD_VAR 0 1
12043: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12044: LD_INT 0
12046: PPUSH
12047: PPUSH
12048: PPUSH
12049: PPUSH
12050: PPUSH
12051: PPUSH
12052: PPUSH
// result := [ ] ;
12053: LD_ADDR_VAR 0 2
12057: PUSH
12058: EMPTY
12059: ST_TO_ADDR
// if campaign_id = 1 then
12060: LD_OWVAR 69
12064: PUSH
12065: LD_INT 1
12067: EQUAL
12068: IFFALSE 15234
// begin case mission_number of 1 :
12070: LD_OWVAR 70
12074: PUSH
12075: LD_INT 1
12077: DOUBLE
12078: EQUAL
12079: IFTRUE 12083
12081: GO 12159
12083: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12084: LD_ADDR_VAR 0 2
12088: PUSH
12089: LD_INT 2
12091: PUSH
12092: LD_INT 4
12094: PUSH
12095: LD_INT 11
12097: PUSH
12098: LD_INT 12
12100: PUSH
12101: LD_INT 15
12103: PUSH
12104: LD_INT 16
12106: PUSH
12107: LD_INT 22
12109: PUSH
12110: LD_INT 23
12112: PUSH
12113: LD_INT 26
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 101
12129: PUSH
12130: LD_INT 102
12132: PUSH
12133: LD_INT 106
12135: PUSH
12136: LD_INT 116
12138: PUSH
12139: LD_INT 117
12141: PUSH
12142: LD_INT 118
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: ST_TO_ADDR
12157: GO 15232
12159: LD_INT 2
12161: DOUBLE
12162: EQUAL
12163: IFTRUE 12167
12165: GO 12251
12167: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12168: LD_ADDR_VAR 0 2
12172: PUSH
12173: LD_INT 2
12175: PUSH
12176: LD_INT 4
12178: PUSH
12179: LD_INT 11
12181: PUSH
12182: LD_INT 12
12184: PUSH
12185: LD_INT 15
12187: PUSH
12188: LD_INT 16
12190: PUSH
12191: LD_INT 22
12193: PUSH
12194: LD_INT 23
12196: PUSH
12197: LD_INT 26
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 101
12213: PUSH
12214: LD_INT 102
12216: PUSH
12217: LD_INT 105
12219: PUSH
12220: LD_INT 106
12222: PUSH
12223: LD_INT 108
12225: PUSH
12226: LD_INT 116
12228: PUSH
12229: LD_INT 117
12231: PUSH
12232: LD_INT 118
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: ST_TO_ADDR
12249: GO 15232
12251: LD_INT 3
12253: DOUBLE
12254: EQUAL
12255: IFTRUE 12259
12257: GO 12347
12259: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12260: LD_ADDR_VAR 0 2
12264: PUSH
12265: LD_INT 2
12267: PUSH
12268: LD_INT 4
12270: PUSH
12271: LD_INT 5
12273: PUSH
12274: LD_INT 11
12276: PUSH
12277: LD_INT 12
12279: PUSH
12280: LD_INT 15
12282: PUSH
12283: LD_INT 16
12285: PUSH
12286: LD_INT 22
12288: PUSH
12289: LD_INT 26
12291: PUSH
12292: LD_INT 36
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: PUSH
12307: LD_INT 101
12309: PUSH
12310: LD_INT 102
12312: PUSH
12313: LD_INT 105
12315: PUSH
12316: LD_INT 106
12318: PUSH
12319: LD_INT 108
12321: PUSH
12322: LD_INT 116
12324: PUSH
12325: LD_INT 117
12327: PUSH
12328: LD_INT 118
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: ST_TO_ADDR
12345: GO 15232
12347: LD_INT 4
12349: DOUBLE
12350: EQUAL
12351: IFTRUE 12355
12353: GO 12451
12355: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12356: LD_ADDR_VAR 0 2
12360: PUSH
12361: LD_INT 2
12363: PUSH
12364: LD_INT 4
12366: PUSH
12367: LD_INT 5
12369: PUSH
12370: LD_INT 8
12372: PUSH
12373: LD_INT 11
12375: PUSH
12376: LD_INT 12
12378: PUSH
12379: LD_INT 15
12381: PUSH
12382: LD_INT 16
12384: PUSH
12385: LD_INT 22
12387: PUSH
12388: LD_INT 23
12390: PUSH
12391: LD_INT 26
12393: PUSH
12394: LD_INT 36
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 101
12413: PUSH
12414: LD_INT 102
12416: PUSH
12417: LD_INT 105
12419: PUSH
12420: LD_INT 106
12422: PUSH
12423: LD_INT 108
12425: PUSH
12426: LD_INT 116
12428: PUSH
12429: LD_INT 117
12431: PUSH
12432: LD_INT 118
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: ST_TO_ADDR
12449: GO 15232
12451: LD_INT 5
12453: DOUBLE
12454: EQUAL
12455: IFTRUE 12459
12457: GO 12571
12459: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12460: LD_ADDR_VAR 0 2
12464: PUSH
12465: LD_INT 2
12467: PUSH
12468: LD_INT 4
12470: PUSH
12471: LD_INT 5
12473: PUSH
12474: LD_INT 6
12476: PUSH
12477: LD_INT 8
12479: PUSH
12480: LD_INT 11
12482: PUSH
12483: LD_INT 12
12485: PUSH
12486: LD_INT 15
12488: PUSH
12489: LD_INT 16
12491: PUSH
12492: LD_INT 22
12494: PUSH
12495: LD_INT 23
12497: PUSH
12498: LD_INT 25
12500: PUSH
12501: LD_INT 26
12503: PUSH
12504: LD_INT 36
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 101
12525: PUSH
12526: LD_INT 102
12528: PUSH
12529: LD_INT 105
12531: PUSH
12532: LD_INT 106
12534: PUSH
12535: LD_INT 108
12537: PUSH
12538: LD_INT 109
12540: PUSH
12541: LD_INT 112
12543: PUSH
12544: LD_INT 116
12546: PUSH
12547: LD_INT 117
12549: PUSH
12550: LD_INT 118
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: ST_TO_ADDR
12569: GO 15232
12571: LD_INT 6
12573: DOUBLE
12574: EQUAL
12575: IFTRUE 12579
12577: GO 12711
12579: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12580: LD_ADDR_VAR 0 2
12584: PUSH
12585: LD_INT 2
12587: PUSH
12588: LD_INT 4
12590: PUSH
12591: LD_INT 5
12593: PUSH
12594: LD_INT 6
12596: PUSH
12597: LD_INT 8
12599: PUSH
12600: LD_INT 11
12602: PUSH
12603: LD_INT 12
12605: PUSH
12606: LD_INT 15
12608: PUSH
12609: LD_INT 16
12611: PUSH
12612: LD_INT 20
12614: PUSH
12615: LD_INT 21
12617: PUSH
12618: LD_INT 22
12620: PUSH
12621: LD_INT 23
12623: PUSH
12624: LD_INT 25
12626: PUSH
12627: LD_INT 26
12629: PUSH
12630: LD_INT 30
12632: PUSH
12633: LD_INT 31
12635: PUSH
12636: LD_INT 32
12638: PUSH
12639: LD_INT 36
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: PUSH
12663: LD_INT 101
12665: PUSH
12666: LD_INT 102
12668: PUSH
12669: LD_INT 105
12671: PUSH
12672: LD_INT 106
12674: PUSH
12675: LD_INT 108
12677: PUSH
12678: LD_INT 109
12680: PUSH
12681: LD_INT 112
12683: PUSH
12684: LD_INT 116
12686: PUSH
12687: LD_INT 117
12689: PUSH
12690: LD_INT 118
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: ST_TO_ADDR
12709: GO 15232
12711: LD_INT 7
12713: DOUBLE
12714: EQUAL
12715: IFTRUE 12719
12717: GO 12831
12719: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12720: LD_ADDR_VAR 0 2
12724: PUSH
12725: LD_INT 2
12727: PUSH
12728: LD_INT 4
12730: PUSH
12731: LD_INT 5
12733: PUSH
12734: LD_INT 7
12736: PUSH
12737: LD_INT 11
12739: PUSH
12740: LD_INT 12
12742: PUSH
12743: LD_INT 15
12745: PUSH
12746: LD_INT 16
12748: PUSH
12749: LD_INT 20
12751: PUSH
12752: LD_INT 21
12754: PUSH
12755: LD_INT 22
12757: PUSH
12758: LD_INT 23
12760: PUSH
12761: LD_INT 25
12763: PUSH
12764: LD_INT 26
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: PUSH
12783: LD_INT 101
12785: PUSH
12786: LD_INT 102
12788: PUSH
12789: LD_INT 103
12791: PUSH
12792: LD_INT 105
12794: PUSH
12795: LD_INT 106
12797: PUSH
12798: LD_INT 108
12800: PUSH
12801: LD_INT 112
12803: PUSH
12804: LD_INT 116
12806: PUSH
12807: LD_INT 117
12809: PUSH
12810: LD_INT 118
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: ST_TO_ADDR
12829: GO 15232
12831: LD_INT 8
12833: DOUBLE
12834: EQUAL
12835: IFTRUE 12839
12837: GO 12979
12839: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12840: LD_ADDR_VAR 0 2
12844: PUSH
12845: LD_INT 2
12847: PUSH
12848: LD_INT 4
12850: PUSH
12851: LD_INT 5
12853: PUSH
12854: LD_INT 6
12856: PUSH
12857: LD_INT 7
12859: PUSH
12860: LD_INT 8
12862: PUSH
12863: LD_INT 11
12865: PUSH
12866: LD_INT 12
12868: PUSH
12869: LD_INT 15
12871: PUSH
12872: LD_INT 16
12874: PUSH
12875: LD_INT 20
12877: PUSH
12878: LD_INT 21
12880: PUSH
12881: LD_INT 22
12883: PUSH
12884: LD_INT 23
12886: PUSH
12887: LD_INT 25
12889: PUSH
12890: LD_INT 26
12892: PUSH
12893: LD_INT 30
12895: PUSH
12896: LD_INT 31
12898: PUSH
12899: LD_INT 32
12901: PUSH
12902: LD_INT 36
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 101
12929: PUSH
12930: LD_INT 102
12932: PUSH
12933: LD_INT 103
12935: PUSH
12936: LD_INT 105
12938: PUSH
12939: LD_INT 106
12941: PUSH
12942: LD_INT 108
12944: PUSH
12945: LD_INT 109
12947: PUSH
12948: LD_INT 112
12950: PUSH
12951: LD_INT 116
12953: PUSH
12954: LD_INT 117
12956: PUSH
12957: LD_INT 118
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: ST_TO_ADDR
12977: GO 15232
12979: LD_INT 9
12981: DOUBLE
12982: EQUAL
12983: IFTRUE 12987
12985: GO 13135
12987: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12988: LD_ADDR_VAR 0 2
12992: PUSH
12993: LD_INT 2
12995: PUSH
12996: LD_INT 4
12998: PUSH
12999: LD_INT 5
13001: PUSH
13002: LD_INT 6
13004: PUSH
13005: LD_INT 7
13007: PUSH
13008: LD_INT 8
13010: PUSH
13011: LD_INT 11
13013: PUSH
13014: LD_INT 12
13016: PUSH
13017: LD_INT 15
13019: PUSH
13020: LD_INT 16
13022: PUSH
13023: LD_INT 20
13025: PUSH
13026: LD_INT 21
13028: PUSH
13029: LD_INT 22
13031: PUSH
13032: LD_INT 23
13034: PUSH
13035: LD_INT 25
13037: PUSH
13038: LD_INT 26
13040: PUSH
13041: LD_INT 28
13043: PUSH
13044: LD_INT 30
13046: PUSH
13047: LD_INT 31
13049: PUSH
13050: LD_INT 32
13052: PUSH
13053: LD_INT 36
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: PUSH
13079: LD_INT 101
13081: PUSH
13082: LD_INT 102
13084: PUSH
13085: LD_INT 103
13087: PUSH
13088: LD_INT 105
13090: PUSH
13091: LD_INT 106
13093: PUSH
13094: LD_INT 108
13096: PUSH
13097: LD_INT 109
13099: PUSH
13100: LD_INT 112
13102: PUSH
13103: LD_INT 114
13105: PUSH
13106: LD_INT 116
13108: PUSH
13109: LD_INT 117
13111: PUSH
13112: LD_INT 118
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: ST_TO_ADDR
13133: GO 15232
13135: LD_INT 10
13137: DOUBLE
13138: EQUAL
13139: IFTRUE 13143
13141: GO 13339
13143: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13144: LD_ADDR_VAR 0 2
13148: PUSH
13149: LD_INT 2
13151: PUSH
13152: LD_INT 4
13154: PUSH
13155: LD_INT 5
13157: PUSH
13158: LD_INT 6
13160: PUSH
13161: LD_INT 7
13163: PUSH
13164: LD_INT 8
13166: PUSH
13167: LD_INT 9
13169: PUSH
13170: LD_INT 10
13172: PUSH
13173: LD_INT 11
13175: PUSH
13176: LD_INT 12
13178: PUSH
13179: LD_INT 13
13181: PUSH
13182: LD_INT 14
13184: PUSH
13185: LD_INT 15
13187: PUSH
13188: LD_INT 16
13190: PUSH
13191: LD_INT 17
13193: PUSH
13194: LD_INT 18
13196: PUSH
13197: LD_INT 19
13199: PUSH
13200: LD_INT 20
13202: PUSH
13203: LD_INT 21
13205: PUSH
13206: LD_INT 22
13208: PUSH
13209: LD_INT 23
13211: PUSH
13212: LD_INT 24
13214: PUSH
13215: LD_INT 25
13217: PUSH
13218: LD_INT 26
13220: PUSH
13221: LD_INT 28
13223: PUSH
13224: LD_INT 30
13226: PUSH
13227: LD_INT 31
13229: PUSH
13230: LD_INT 32
13232: PUSH
13233: LD_INT 36
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 101
13269: PUSH
13270: LD_INT 102
13272: PUSH
13273: LD_INT 103
13275: PUSH
13276: LD_INT 104
13278: PUSH
13279: LD_INT 105
13281: PUSH
13282: LD_INT 106
13284: PUSH
13285: LD_INT 107
13287: PUSH
13288: LD_INT 108
13290: PUSH
13291: LD_INT 109
13293: PUSH
13294: LD_INT 110
13296: PUSH
13297: LD_INT 111
13299: PUSH
13300: LD_INT 112
13302: PUSH
13303: LD_INT 114
13305: PUSH
13306: LD_INT 116
13308: PUSH
13309: LD_INT 117
13311: PUSH
13312: LD_INT 118
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: ST_TO_ADDR
13337: GO 15232
13339: LD_INT 11
13341: DOUBLE
13342: EQUAL
13343: IFTRUE 13347
13345: GO 13551
13347: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13348: LD_ADDR_VAR 0 2
13352: PUSH
13353: LD_INT 2
13355: PUSH
13356: LD_INT 3
13358: PUSH
13359: LD_INT 4
13361: PUSH
13362: LD_INT 5
13364: PUSH
13365: LD_INT 6
13367: PUSH
13368: LD_INT 7
13370: PUSH
13371: LD_INT 8
13373: PUSH
13374: LD_INT 9
13376: PUSH
13377: LD_INT 10
13379: PUSH
13380: LD_INT 11
13382: PUSH
13383: LD_INT 12
13385: PUSH
13386: LD_INT 13
13388: PUSH
13389: LD_INT 14
13391: PUSH
13392: LD_INT 15
13394: PUSH
13395: LD_INT 16
13397: PUSH
13398: LD_INT 17
13400: PUSH
13401: LD_INT 18
13403: PUSH
13404: LD_INT 19
13406: PUSH
13407: LD_INT 20
13409: PUSH
13410: LD_INT 21
13412: PUSH
13413: LD_INT 22
13415: PUSH
13416: LD_INT 23
13418: PUSH
13419: LD_INT 24
13421: PUSH
13422: LD_INT 25
13424: PUSH
13425: LD_INT 26
13427: PUSH
13428: LD_INT 28
13430: PUSH
13431: LD_INT 30
13433: PUSH
13434: LD_INT 31
13436: PUSH
13437: LD_INT 32
13439: PUSH
13440: LD_INT 34
13442: PUSH
13443: LD_INT 36
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: PUSH
13479: LD_INT 101
13481: PUSH
13482: LD_INT 102
13484: PUSH
13485: LD_INT 103
13487: PUSH
13488: LD_INT 104
13490: PUSH
13491: LD_INT 105
13493: PUSH
13494: LD_INT 106
13496: PUSH
13497: LD_INT 107
13499: PUSH
13500: LD_INT 108
13502: PUSH
13503: LD_INT 109
13505: PUSH
13506: LD_INT 110
13508: PUSH
13509: LD_INT 111
13511: PUSH
13512: LD_INT 112
13514: PUSH
13515: LD_INT 114
13517: PUSH
13518: LD_INT 116
13520: PUSH
13521: LD_INT 117
13523: PUSH
13524: LD_INT 118
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: ST_TO_ADDR
13549: GO 15232
13551: LD_INT 12
13553: DOUBLE
13554: EQUAL
13555: IFTRUE 13559
13557: GO 13779
13559: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13560: LD_ADDR_VAR 0 2
13564: PUSH
13565: LD_INT 1
13567: PUSH
13568: LD_INT 2
13570: PUSH
13571: LD_INT 3
13573: PUSH
13574: LD_INT 4
13576: PUSH
13577: LD_INT 5
13579: PUSH
13580: LD_INT 6
13582: PUSH
13583: LD_INT 7
13585: PUSH
13586: LD_INT 8
13588: PUSH
13589: LD_INT 9
13591: PUSH
13592: LD_INT 10
13594: PUSH
13595: LD_INT 11
13597: PUSH
13598: LD_INT 12
13600: PUSH
13601: LD_INT 13
13603: PUSH
13604: LD_INT 14
13606: PUSH
13607: LD_INT 15
13609: PUSH
13610: LD_INT 16
13612: PUSH
13613: LD_INT 17
13615: PUSH
13616: LD_INT 18
13618: PUSH
13619: LD_INT 19
13621: PUSH
13622: LD_INT 20
13624: PUSH
13625: LD_INT 21
13627: PUSH
13628: LD_INT 22
13630: PUSH
13631: LD_INT 23
13633: PUSH
13634: LD_INT 24
13636: PUSH
13637: LD_INT 25
13639: PUSH
13640: LD_INT 26
13642: PUSH
13643: LD_INT 27
13645: PUSH
13646: LD_INT 28
13648: PUSH
13649: LD_INT 30
13651: PUSH
13652: LD_INT 31
13654: PUSH
13655: LD_INT 32
13657: PUSH
13658: LD_INT 33
13660: PUSH
13661: LD_INT 34
13663: PUSH
13664: LD_INT 36
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 101
13705: PUSH
13706: LD_INT 102
13708: PUSH
13709: LD_INT 103
13711: PUSH
13712: LD_INT 104
13714: PUSH
13715: LD_INT 105
13717: PUSH
13718: LD_INT 106
13720: PUSH
13721: LD_INT 107
13723: PUSH
13724: LD_INT 108
13726: PUSH
13727: LD_INT 109
13729: PUSH
13730: LD_INT 110
13732: PUSH
13733: LD_INT 111
13735: PUSH
13736: LD_INT 112
13738: PUSH
13739: LD_INT 113
13741: PUSH
13742: LD_INT 114
13744: PUSH
13745: LD_INT 116
13747: PUSH
13748: LD_INT 117
13750: PUSH
13751: LD_INT 118
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: ST_TO_ADDR
13777: GO 15232
13779: LD_INT 13
13781: DOUBLE
13782: EQUAL
13783: IFTRUE 13787
13785: GO 13995
13787: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13788: LD_ADDR_VAR 0 2
13792: PUSH
13793: LD_INT 1
13795: PUSH
13796: LD_INT 2
13798: PUSH
13799: LD_INT 3
13801: PUSH
13802: LD_INT 4
13804: PUSH
13805: LD_INT 5
13807: PUSH
13808: LD_INT 8
13810: PUSH
13811: LD_INT 9
13813: PUSH
13814: LD_INT 10
13816: PUSH
13817: LD_INT 11
13819: PUSH
13820: LD_INT 12
13822: PUSH
13823: LD_INT 14
13825: PUSH
13826: LD_INT 15
13828: PUSH
13829: LD_INT 16
13831: PUSH
13832: LD_INT 17
13834: PUSH
13835: LD_INT 18
13837: PUSH
13838: LD_INT 19
13840: PUSH
13841: LD_INT 20
13843: PUSH
13844: LD_INT 21
13846: PUSH
13847: LD_INT 22
13849: PUSH
13850: LD_INT 23
13852: PUSH
13853: LD_INT 24
13855: PUSH
13856: LD_INT 25
13858: PUSH
13859: LD_INT 26
13861: PUSH
13862: LD_INT 27
13864: PUSH
13865: LD_INT 28
13867: PUSH
13868: LD_INT 30
13870: PUSH
13871: LD_INT 31
13873: PUSH
13874: LD_INT 32
13876: PUSH
13877: LD_INT 33
13879: PUSH
13880: LD_INT 34
13882: PUSH
13883: LD_INT 36
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: PUSH
13919: LD_INT 101
13921: PUSH
13922: LD_INT 102
13924: PUSH
13925: LD_INT 103
13927: PUSH
13928: LD_INT 104
13930: PUSH
13931: LD_INT 105
13933: PUSH
13934: LD_INT 106
13936: PUSH
13937: LD_INT 107
13939: PUSH
13940: LD_INT 108
13942: PUSH
13943: LD_INT 109
13945: PUSH
13946: LD_INT 110
13948: PUSH
13949: LD_INT 111
13951: PUSH
13952: LD_INT 112
13954: PUSH
13955: LD_INT 113
13957: PUSH
13958: LD_INT 114
13960: PUSH
13961: LD_INT 116
13963: PUSH
13964: LD_INT 117
13966: PUSH
13967: LD_INT 118
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: ST_TO_ADDR
13993: GO 15232
13995: LD_INT 14
13997: DOUBLE
13998: EQUAL
13999: IFTRUE 14003
14001: GO 14227
14003: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14004: LD_ADDR_VAR 0 2
14008: PUSH
14009: LD_INT 1
14011: PUSH
14012: LD_INT 2
14014: PUSH
14015: LD_INT 3
14017: PUSH
14018: LD_INT 4
14020: PUSH
14021: LD_INT 5
14023: PUSH
14024: LD_INT 6
14026: PUSH
14027: LD_INT 7
14029: PUSH
14030: LD_INT 8
14032: PUSH
14033: LD_INT 9
14035: PUSH
14036: LD_INT 10
14038: PUSH
14039: LD_INT 11
14041: PUSH
14042: LD_INT 12
14044: PUSH
14045: LD_INT 13
14047: PUSH
14048: LD_INT 14
14050: PUSH
14051: LD_INT 15
14053: PUSH
14054: LD_INT 16
14056: PUSH
14057: LD_INT 17
14059: PUSH
14060: LD_INT 18
14062: PUSH
14063: LD_INT 19
14065: PUSH
14066: LD_INT 20
14068: PUSH
14069: LD_INT 21
14071: PUSH
14072: LD_INT 22
14074: PUSH
14075: LD_INT 23
14077: PUSH
14078: LD_INT 24
14080: PUSH
14081: LD_INT 25
14083: PUSH
14084: LD_INT 26
14086: PUSH
14087: LD_INT 27
14089: PUSH
14090: LD_INT 28
14092: PUSH
14093: LD_INT 29
14095: PUSH
14096: LD_INT 30
14098: PUSH
14099: LD_INT 31
14101: PUSH
14102: LD_INT 32
14104: PUSH
14105: LD_INT 33
14107: PUSH
14108: LD_INT 34
14110: PUSH
14111: LD_INT 36
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: PUSH
14151: LD_INT 101
14153: PUSH
14154: LD_INT 102
14156: PUSH
14157: LD_INT 103
14159: PUSH
14160: LD_INT 104
14162: PUSH
14163: LD_INT 105
14165: PUSH
14166: LD_INT 106
14168: PUSH
14169: LD_INT 107
14171: PUSH
14172: LD_INT 108
14174: PUSH
14175: LD_INT 109
14177: PUSH
14178: LD_INT 110
14180: PUSH
14181: LD_INT 111
14183: PUSH
14184: LD_INT 112
14186: PUSH
14187: LD_INT 113
14189: PUSH
14190: LD_INT 114
14192: PUSH
14193: LD_INT 116
14195: PUSH
14196: LD_INT 117
14198: PUSH
14199: LD_INT 118
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: ST_TO_ADDR
14225: GO 15232
14227: LD_INT 15
14229: DOUBLE
14230: EQUAL
14231: IFTRUE 14235
14233: GO 14459
14235: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14236: LD_ADDR_VAR 0 2
14240: PUSH
14241: LD_INT 1
14243: PUSH
14244: LD_INT 2
14246: PUSH
14247: LD_INT 3
14249: PUSH
14250: LD_INT 4
14252: PUSH
14253: LD_INT 5
14255: PUSH
14256: LD_INT 6
14258: PUSH
14259: LD_INT 7
14261: PUSH
14262: LD_INT 8
14264: PUSH
14265: LD_INT 9
14267: PUSH
14268: LD_INT 10
14270: PUSH
14271: LD_INT 11
14273: PUSH
14274: LD_INT 12
14276: PUSH
14277: LD_INT 13
14279: PUSH
14280: LD_INT 14
14282: PUSH
14283: LD_INT 15
14285: PUSH
14286: LD_INT 16
14288: PUSH
14289: LD_INT 17
14291: PUSH
14292: LD_INT 18
14294: PUSH
14295: LD_INT 19
14297: PUSH
14298: LD_INT 20
14300: PUSH
14301: LD_INT 21
14303: PUSH
14304: LD_INT 22
14306: PUSH
14307: LD_INT 23
14309: PUSH
14310: LD_INT 24
14312: PUSH
14313: LD_INT 25
14315: PUSH
14316: LD_INT 26
14318: PUSH
14319: LD_INT 27
14321: PUSH
14322: LD_INT 28
14324: PUSH
14325: LD_INT 29
14327: PUSH
14328: LD_INT 30
14330: PUSH
14331: LD_INT 31
14333: PUSH
14334: LD_INT 32
14336: PUSH
14337: LD_INT 33
14339: PUSH
14340: LD_INT 34
14342: PUSH
14343: LD_INT 36
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: PUSH
14383: LD_INT 101
14385: PUSH
14386: LD_INT 102
14388: PUSH
14389: LD_INT 103
14391: PUSH
14392: LD_INT 104
14394: PUSH
14395: LD_INT 105
14397: PUSH
14398: LD_INT 106
14400: PUSH
14401: LD_INT 107
14403: PUSH
14404: LD_INT 108
14406: PUSH
14407: LD_INT 109
14409: PUSH
14410: LD_INT 110
14412: PUSH
14413: LD_INT 111
14415: PUSH
14416: LD_INT 112
14418: PUSH
14419: LD_INT 113
14421: PUSH
14422: LD_INT 114
14424: PUSH
14425: LD_INT 116
14427: PUSH
14428: LD_INT 117
14430: PUSH
14431: LD_INT 118
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: ST_TO_ADDR
14457: GO 15232
14459: LD_INT 16
14461: DOUBLE
14462: EQUAL
14463: IFTRUE 14467
14465: GO 14603
14467: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14468: LD_ADDR_VAR 0 2
14472: PUSH
14473: LD_INT 2
14475: PUSH
14476: LD_INT 4
14478: PUSH
14479: LD_INT 5
14481: PUSH
14482: LD_INT 7
14484: PUSH
14485: LD_INT 11
14487: PUSH
14488: LD_INT 12
14490: PUSH
14491: LD_INT 15
14493: PUSH
14494: LD_INT 16
14496: PUSH
14497: LD_INT 20
14499: PUSH
14500: LD_INT 21
14502: PUSH
14503: LD_INT 22
14505: PUSH
14506: LD_INT 23
14508: PUSH
14509: LD_INT 25
14511: PUSH
14512: LD_INT 26
14514: PUSH
14515: LD_INT 30
14517: PUSH
14518: LD_INT 31
14520: PUSH
14521: LD_INT 32
14523: PUSH
14524: LD_INT 33
14526: PUSH
14527: LD_INT 34
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 101
14553: PUSH
14554: LD_INT 102
14556: PUSH
14557: LD_INT 103
14559: PUSH
14560: LD_INT 106
14562: PUSH
14563: LD_INT 108
14565: PUSH
14566: LD_INT 112
14568: PUSH
14569: LD_INT 113
14571: PUSH
14572: LD_INT 114
14574: PUSH
14575: LD_INT 116
14577: PUSH
14578: LD_INT 117
14580: PUSH
14581: LD_INT 118
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: ST_TO_ADDR
14601: GO 15232
14603: LD_INT 17
14605: DOUBLE
14606: EQUAL
14607: IFTRUE 14611
14609: GO 14835
14611: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14612: LD_ADDR_VAR 0 2
14616: PUSH
14617: LD_INT 1
14619: PUSH
14620: LD_INT 2
14622: PUSH
14623: LD_INT 3
14625: PUSH
14626: LD_INT 4
14628: PUSH
14629: LD_INT 5
14631: PUSH
14632: LD_INT 6
14634: PUSH
14635: LD_INT 7
14637: PUSH
14638: LD_INT 8
14640: PUSH
14641: LD_INT 9
14643: PUSH
14644: LD_INT 10
14646: PUSH
14647: LD_INT 11
14649: PUSH
14650: LD_INT 12
14652: PUSH
14653: LD_INT 13
14655: PUSH
14656: LD_INT 14
14658: PUSH
14659: LD_INT 15
14661: PUSH
14662: LD_INT 16
14664: PUSH
14665: LD_INT 17
14667: PUSH
14668: LD_INT 18
14670: PUSH
14671: LD_INT 19
14673: PUSH
14674: LD_INT 20
14676: PUSH
14677: LD_INT 21
14679: PUSH
14680: LD_INT 22
14682: PUSH
14683: LD_INT 23
14685: PUSH
14686: LD_INT 24
14688: PUSH
14689: LD_INT 25
14691: PUSH
14692: LD_INT 26
14694: PUSH
14695: LD_INT 27
14697: PUSH
14698: LD_INT 28
14700: PUSH
14701: LD_INT 29
14703: PUSH
14704: LD_INT 30
14706: PUSH
14707: LD_INT 31
14709: PUSH
14710: LD_INT 32
14712: PUSH
14713: LD_INT 33
14715: PUSH
14716: LD_INT 34
14718: PUSH
14719: LD_INT 36
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 101
14761: PUSH
14762: LD_INT 102
14764: PUSH
14765: LD_INT 103
14767: PUSH
14768: LD_INT 104
14770: PUSH
14771: LD_INT 105
14773: PUSH
14774: LD_INT 106
14776: PUSH
14777: LD_INT 107
14779: PUSH
14780: LD_INT 108
14782: PUSH
14783: LD_INT 109
14785: PUSH
14786: LD_INT 110
14788: PUSH
14789: LD_INT 111
14791: PUSH
14792: LD_INT 112
14794: PUSH
14795: LD_INT 113
14797: PUSH
14798: LD_INT 114
14800: PUSH
14801: LD_INT 116
14803: PUSH
14804: LD_INT 117
14806: PUSH
14807: LD_INT 118
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: ST_TO_ADDR
14833: GO 15232
14835: LD_INT 18
14837: DOUBLE
14838: EQUAL
14839: IFTRUE 14843
14841: GO 14991
14843: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14844: LD_ADDR_VAR 0 2
14848: PUSH
14849: LD_INT 2
14851: PUSH
14852: LD_INT 4
14854: PUSH
14855: LD_INT 5
14857: PUSH
14858: LD_INT 7
14860: PUSH
14861: LD_INT 11
14863: PUSH
14864: LD_INT 12
14866: PUSH
14867: LD_INT 15
14869: PUSH
14870: LD_INT 16
14872: PUSH
14873: LD_INT 20
14875: PUSH
14876: LD_INT 21
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_INT 23
14884: PUSH
14885: LD_INT 25
14887: PUSH
14888: LD_INT 26
14890: PUSH
14891: LD_INT 30
14893: PUSH
14894: LD_INT 31
14896: PUSH
14897: LD_INT 32
14899: PUSH
14900: LD_INT 33
14902: PUSH
14903: LD_INT 34
14905: PUSH
14906: LD_INT 35
14908: PUSH
14909: LD_INT 36
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: PUSH
14935: LD_INT 101
14937: PUSH
14938: LD_INT 102
14940: PUSH
14941: LD_INT 103
14943: PUSH
14944: LD_INT 106
14946: PUSH
14947: LD_INT 108
14949: PUSH
14950: LD_INT 112
14952: PUSH
14953: LD_INT 113
14955: PUSH
14956: LD_INT 114
14958: PUSH
14959: LD_INT 115
14961: PUSH
14962: LD_INT 116
14964: PUSH
14965: LD_INT 117
14967: PUSH
14968: LD_INT 118
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: ST_TO_ADDR
14989: GO 15232
14991: LD_INT 19
14993: DOUBLE
14994: EQUAL
14995: IFTRUE 14999
14997: GO 15231
14999: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15000: LD_ADDR_VAR 0 2
15004: PUSH
15005: LD_INT 1
15007: PUSH
15008: LD_INT 2
15010: PUSH
15011: LD_INT 3
15013: PUSH
15014: LD_INT 4
15016: PUSH
15017: LD_INT 5
15019: PUSH
15020: LD_INT 6
15022: PUSH
15023: LD_INT 7
15025: PUSH
15026: LD_INT 8
15028: PUSH
15029: LD_INT 9
15031: PUSH
15032: LD_INT 10
15034: PUSH
15035: LD_INT 11
15037: PUSH
15038: LD_INT 12
15040: PUSH
15041: LD_INT 13
15043: PUSH
15044: LD_INT 14
15046: PUSH
15047: LD_INT 15
15049: PUSH
15050: LD_INT 16
15052: PUSH
15053: LD_INT 17
15055: PUSH
15056: LD_INT 18
15058: PUSH
15059: LD_INT 19
15061: PUSH
15062: LD_INT 20
15064: PUSH
15065: LD_INT 21
15067: PUSH
15068: LD_INT 22
15070: PUSH
15071: LD_INT 23
15073: PUSH
15074: LD_INT 24
15076: PUSH
15077: LD_INT 25
15079: PUSH
15080: LD_INT 26
15082: PUSH
15083: LD_INT 27
15085: PUSH
15086: LD_INT 28
15088: PUSH
15089: LD_INT 29
15091: PUSH
15092: LD_INT 30
15094: PUSH
15095: LD_INT 31
15097: PUSH
15098: LD_INT 32
15100: PUSH
15101: LD_INT 33
15103: PUSH
15104: LD_INT 34
15106: PUSH
15107: LD_INT 35
15109: PUSH
15110: LD_INT 36
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 101
15153: PUSH
15154: LD_INT 102
15156: PUSH
15157: LD_INT 103
15159: PUSH
15160: LD_INT 104
15162: PUSH
15163: LD_INT 105
15165: PUSH
15166: LD_INT 106
15168: PUSH
15169: LD_INT 107
15171: PUSH
15172: LD_INT 108
15174: PUSH
15175: LD_INT 109
15177: PUSH
15178: LD_INT 110
15180: PUSH
15181: LD_INT 111
15183: PUSH
15184: LD_INT 112
15186: PUSH
15187: LD_INT 113
15189: PUSH
15190: LD_INT 114
15192: PUSH
15193: LD_INT 115
15195: PUSH
15196: LD_INT 116
15198: PUSH
15199: LD_INT 117
15201: PUSH
15202: LD_INT 118
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: ST_TO_ADDR
15229: GO 15232
15231: POP
// end else
15232: GO 15463
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15234: LD_ADDR_VAR 0 2
15238: PUSH
15239: LD_INT 1
15241: PUSH
15242: LD_INT 2
15244: PUSH
15245: LD_INT 3
15247: PUSH
15248: LD_INT 4
15250: PUSH
15251: LD_INT 5
15253: PUSH
15254: LD_INT 6
15256: PUSH
15257: LD_INT 7
15259: PUSH
15260: LD_INT 8
15262: PUSH
15263: LD_INT 9
15265: PUSH
15266: LD_INT 10
15268: PUSH
15269: LD_INT 11
15271: PUSH
15272: LD_INT 12
15274: PUSH
15275: LD_INT 13
15277: PUSH
15278: LD_INT 14
15280: PUSH
15281: LD_INT 15
15283: PUSH
15284: LD_INT 16
15286: PUSH
15287: LD_INT 17
15289: PUSH
15290: LD_INT 18
15292: PUSH
15293: LD_INT 19
15295: PUSH
15296: LD_INT 20
15298: PUSH
15299: LD_INT 21
15301: PUSH
15302: LD_INT 22
15304: PUSH
15305: LD_INT 23
15307: PUSH
15308: LD_INT 24
15310: PUSH
15311: LD_INT 25
15313: PUSH
15314: LD_INT 26
15316: PUSH
15317: LD_INT 27
15319: PUSH
15320: LD_INT 28
15322: PUSH
15323: LD_INT 29
15325: PUSH
15326: LD_INT 30
15328: PUSH
15329: LD_INT 31
15331: PUSH
15332: LD_INT 32
15334: PUSH
15335: LD_INT 33
15337: PUSH
15338: LD_INT 34
15340: PUSH
15341: LD_INT 35
15343: PUSH
15344: LD_INT 36
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 101
15387: PUSH
15388: LD_INT 102
15390: PUSH
15391: LD_INT 103
15393: PUSH
15394: LD_INT 104
15396: PUSH
15397: LD_INT 105
15399: PUSH
15400: LD_INT 106
15402: PUSH
15403: LD_INT 107
15405: PUSH
15406: LD_INT 108
15408: PUSH
15409: LD_INT 109
15411: PUSH
15412: LD_INT 110
15414: PUSH
15415: LD_INT 111
15417: PUSH
15418: LD_INT 112
15420: PUSH
15421: LD_INT 113
15423: PUSH
15424: LD_INT 114
15426: PUSH
15427: LD_INT 115
15429: PUSH
15430: LD_INT 116
15432: PUSH
15433: LD_INT 117
15435: PUSH
15436: LD_INT 118
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: ST_TO_ADDR
// if result then
15463: LD_VAR 0 2
15467: IFFALSE 16253
// begin normal :=  ;
15469: LD_ADDR_VAR 0 5
15473: PUSH
15474: LD_STRING 
15476: ST_TO_ADDR
// hardcore :=  ;
15477: LD_ADDR_VAR 0 6
15481: PUSH
15482: LD_STRING 
15484: ST_TO_ADDR
// active :=  ;
15485: LD_ADDR_VAR 0 7
15489: PUSH
15490: LD_STRING 
15492: ST_TO_ADDR
// for i = 1 to normalCounter do
15493: LD_ADDR_VAR 0 8
15497: PUSH
15498: DOUBLE
15499: LD_INT 1
15501: DEC
15502: ST_TO_ADDR
15503: LD_EXP 45
15507: PUSH
15508: FOR_TO
15509: IFFALSE 15610
// begin tmp := 0 ;
15511: LD_ADDR_VAR 0 3
15515: PUSH
15516: LD_STRING 0
15518: ST_TO_ADDR
// if result [ 1 ] then
15519: LD_VAR 0 2
15523: PUSH
15524: LD_INT 1
15526: ARRAY
15527: IFFALSE 15592
// if result [ 1 ] [ 1 ] = i then
15529: LD_VAR 0 2
15533: PUSH
15534: LD_INT 1
15536: ARRAY
15537: PUSH
15538: LD_INT 1
15540: ARRAY
15541: PUSH
15542: LD_VAR 0 8
15546: EQUAL
15547: IFFALSE 15592
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15549: LD_ADDR_VAR 0 2
15553: PUSH
15554: LD_VAR 0 2
15558: PPUSH
15559: LD_INT 1
15561: PPUSH
15562: LD_VAR 0 2
15566: PUSH
15567: LD_INT 1
15569: ARRAY
15570: PPUSH
15571: LD_INT 1
15573: PPUSH
15574: CALL_OW 3
15578: PPUSH
15579: CALL_OW 1
15583: ST_TO_ADDR
// tmp := 1 ;
15584: LD_ADDR_VAR 0 3
15588: PUSH
15589: LD_STRING 1
15591: ST_TO_ADDR
// end ; normal := normal & tmp ;
15592: LD_ADDR_VAR 0 5
15596: PUSH
15597: LD_VAR 0 5
15601: PUSH
15602: LD_VAR 0 3
15606: STR
15607: ST_TO_ADDR
// end ;
15608: GO 15508
15610: POP
15611: POP
// for i = 1 to hardcoreCounter do
15612: LD_ADDR_VAR 0 8
15616: PUSH
15617: DOUBLE
15618: LD_INT 1
15620: DEC
15621: ST_TO_ADDR
15622: LD_EXP 46
15626: PUSH
15627: FOR_TO
15628: IFFALSE 15733
// begin tmp := 0 ;
15630: LD_ADDR_VAR 0 3
15634: PUSH
15635: LD_STRING 0
15637: ST_TO_ADDR
// if result [ 2 ] then
15638: LD_VAR 0 2
15642: PUSH
15643: LD_INT 2
15645: ARRAY
15646: IFFALSE 15715
// if result [ 2 ] [ 1 ] = 100 + i then
15648: LD_VAR 0 2
15652: PUSH
15653: LD_INT 2
15655: ARRAY
15656: PUSH
15657: LD_INT 1
15659: ARRAY
15660: PUSH
15661: LD_INT 100
15663: PUSH
15664: LD_VAR 0 8
15668: PLUS
15669: EQUAL
15670: IFFALSE 15715
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15672: LD_ADDR_VAR 0 2
15676: PUSH
15677: LD_VAR 0 2
15681: PPUSH
15682: LD_INT 2
15684: PPUSH
15685: LD_VAR 0 2
15689: PUSH
15690: LD_INT 2
15692: ARRAY
15693: PPUSH
15694: LD_INT 1
15696: PPUSH
15697: CALL_OW 3
15701: PPUSH
15702: CALL_OW 1
15706: ST_TO_ADDR
// tmp := 1 ;
15707: LD_ADDR_VAR 0 3
15711: PUSH
15712: LD_STRING 1
15714: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15715: LD_ADDR_VAR 0 6
15719: PUSH
15720: LD_VAR 0 6
15724: PUSH
15725: LD_VAR 0 3
15729: STR
15730: ST_TO_ADDR
// end ;
15731: GO 15627
15733: POP
15734: POP
// if isGameLoad then
15735: LD_VAR 0 1
15739: IFFALSE 16214
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15741: LD_ADDR_VAR 0 4
15745: PUSH
15746: LD_EXP 49
15750: PUSH
15751: LD_EXP 48
15755: PUSH
15756: LD_EXP 50
15760: PUSH
15761: LD_EXP 47
15765: PUSH
15766: LD_EXP 51
15770: PUSH
15771: LD_EXP 52
15775: PUSH
15776: LD_EXP 53
15780: PUSH
15781: LD_EXP 54
15785: PUSH
15786: LD_EXP 55
15790: PUSH
15791: LD_EXP 56
15795: PUSH
15796: LD_EXP 57
15800: PUSH
15801: LD_EXP 58
15805: PUSH
15806: LD_EXP 59
15810: PUSH
15811: LD_EXP 60
15815: PUSH
15816: LD_EXP 68
15820: PUSH
15821: LD_EXP 69
15825: PUSH
15826: LD_EXP 70
15830: PUSH
15831: LD_EXP 71
15835: PUSH
15836: LD_EXP 73
15840: PUSH
15841: LD_EXP 74
15845: PUSH
15846: LD_EXP 75
15850: PUSH
15851: LD_EXP 78
15855: PUSH
15856: LD_EXP 80
15860: PUSH
15861: LD_EXP 81
15865: PUSH
15866: LD_EXP 82
15870: PUSH
15871: LD_EXP 84
15875: PUSH
15876: LD_EXP 85
15880: PUSH
15881: LD_EXP 88
15885: PUSH
15886: LD_EXP 89
15890: PUSH
15891: LD_EXP 90
15895: PUSH
15896: LD_EXP 91
15900: PUSH
15901: LD_EXP 92
15905: PUSH
15906: LD_EXP 93
15910: PUSH
15911: LD_EXP 94
15915: PUSH
15916: LD_EXP 95
15920: PUSH
15921: LD_EXP 96
15925: PUSH
15926: LD_EXP 61
15930: PUSH
15931: LD_EXP 62
15935: PUSH
15936: LD_EXP 65
15940: PUSH
15941: LD_EXP 66
15945: PUSH
15946: LD_EXP 67
15950: PUSH
15951: LD_EXP 63
15955: PUSH
15956: LD_EXP 64
15960: PUSH
15961: LD_EXP 72
15965: PUSH
15966: LD_EXP 76
15970: PUSH
15971: LD_EXP 77
15975: PUSH
15976: LD_EXP 79
15980: PUSH
15981: LD_EXP 83
15985: PUSH
15986: LD_EXP 86
15990: PUSH
15991: LD_EXP 87
15995: PUSH
15996: LD_EXP 97
16000: PUSH
16001: LD_EXP 98
16005: PUSH
16006: LD_EXP 99
16010: PUSH
16011: LD_EXP 100
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: ST_TO_ADDR
// tmp :=  ;
16072: LD_ADDR_VAR 0 3
16076: PUSH
16077: LD_STRING 
16079: ST_TO_ADDR
// for i = 1 to normalCounter do
16080: LD_ADDR_VAR 0 8
16084: PUSH
16085: DOUBLE
16086: LD_INT 1
16088: DEC
16089: ST_TO_ADDR
16090: LD_EXP 45
16094: PUSH
16095: FOR_TO
16096: IFFALSE 16132
// begin if flags [ i ] then
16098: LD_VAR 0 4
16102: PUSH
16103: LD_VAR 0 8
16107: ARRAY
16108: IFFALSE 16130
// tmp := tmp & i & ; ;
16110: LD_ADDR_VAR 0 3
16114: PUSH
16115: LD_VAR 0 3
16119: PUSH
16120: LD_VAR 0 8
16124: STR
16125: PUSH
16126: LD_STRING ;
16128: STR
16129: ST_TO_ADDR
// end ;
16130: GO 16095
16132: POP
16133: POP
// for i = 1 to hardcoreCounter do
16134: LD_ADDR_VAR 0 8
16138: PUSH
16139: DOUBLE
16140: LD_INT 1
16142: DEC
16143: ST_TO_ADDR
16144: LD_EXP 46
16148: PUSH
16149: FOR_TO
16150: IFFALSE 16196
// begin if flags [ normalCounter + i ] then
16152: LD_VAR 0 4
16156: PUSH
16157: LD_EXP 45
16161: PUSH
16162: LD_VAR 0 8
16166: PLUS
16167: ARRAY
16168: IFFALSE 16194
// tmp := tmp & ( 100 + i ) & ; ;
16170: LD_ADDR_VAR 0 3
16174: PUSH
16175: LD_VAR 0 3
16179: PUSH
16180: LD_INT 100
16182: PUSH
16183: LD_VAR 0 8
16187: PLUS
16188: STR
16189: PUSH
16190: LD_STRING ;
16192: STR
16193: ST_TO_ADDR
// end ;
16194: GO 16149
16196: POP
16197: POP
// if tmp then
16198: LD_VAR 0 3
16202: IFFALSE 16214
// active := tmp ;
16204: LD_ADDR_VAR 0 7
16208: PUSH
16209: LD_VAR 0 3
16213: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16214: LD_STRING getStreamItemsFromMission("
16216: PUSH
16217: LD_VAR 0 5
16221: STR
16222: PUSH
16223: LD_STRING ","
16225: STR
16226: PUSH
16227: LD_VAR 0 6
16231: STR
16232: PUSH
16233: LD_STRING ","
16235: STR
16236: PUSH
16237: LD_VAR 0 7
16241: STR
16242: PUSH
16243: LD_STRING ")
16245: STR
16246: PPUSH
16247: CALL_OW 559
// end else
16251: GO 16260
// ToLua ( getStreamItemsFromMission("","","") ) ;
16253: LD_STRING getStreamItemsFromMission("","","")
16255: PPUSH
16256: CALL_OW 559
// end ;
16260: LD_VAR 0 2
16264: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16265: LD_EXP 44
16269: PUSH
16270: LD_EXP 49
16274: AND
16275: IFFALSE 16399
16277: GO 16279
16279: DISABLE
16280: LD_INT 0
16282: PPUSH
16283: PPUSH
// begin enable ;
16284: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16285: LD_ADDR_VAR 0 2
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_OWVAR 2
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 2
16304: PUSH
16305: LD_INT 34
16307: PUSH
16308: LD_INT 7
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 34
16317: PUSH
16318: LD_INT 45
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 34
16327: PUSH
16328: LD_INT 28
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 34
16337: PUSH
16338: LD_INT 47
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PPUSH
16356: CALL_OW 69
16360: ST_TO_ADDR
// if not tmp then
16361: LD_VAR 0 2
16365: NOT
16366: IFFALSE 16370
// exit ;
16368: GO 16399
// for i in tmp do
16370: LD_ADDR_VAR 0 1
16374: PUSH
16375: LD_VAR 0 2
16379: PUSH
16380: FOR_IN
16381: IFFALSE 16397
// begin SetLives ( i , 0 ) ;
16383: LD_VAR 0 1
16387: PPUSH
16388: LD_INT 0
16390: PPUSH
16391: CALL_OW 234
// end ;
16395: GO 16380
16397: POP
16398: POP
// end ;
16399: PPOPN 2
16401: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16402: LD_EXP 44
16406: PUSH
16407: LD_EXP 50
16411: AND
16412: IFFALSE 16496
16414: GO 16416
16416: DISABLE
16417: LD_INT 0
16419: PPUSH
16420: PPUSH
// begin enable ;
16421: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16422: LD_ADDR_VAR 0 2
16426: PUSH
16427: LD_INT 22
16429: PUSH
16430: LD_OWVAR 2
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 32
16441: PUSH
16442: LD_INT 3
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PPUSH
16453: CALL_OW 69
16457: ST_TO_ADDR
// if not tmp then
16458: LD_VAR 0 2
16462: NOT
16463: IFFALSE 16467
// exit ;
16465: GO 16496
// for i in tmp do
16467: LD_ADDR_VAR 0 1
16471: PUSH
16472: LD_VAR 0 2
16476: PUSH
16477: FOR_IN
16478: IFFALSE 16494
// begin SetLives ( i , 0 ) ;
16480: LD_VAR 0 1
16484: PPUSH
16485: LD_INT 0
16487: PPUSH
16488: CALL_OW 234
// end ;
16492: GO 16477
16494: POP
16495: POP
// end ;
16496: PPOPN 2
16498: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16499: LD_EXP 44
16503: PUSH
16504: LD_EXP 47
16508: AND
16509: IFFALSE 16602
16511: GO 16513
16513: DISABLE
16514: LD_INT 0
16516: PPUSH
// begin enable ;
16517: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16518: LD_ADDR_VAR 0 1
16522: PUSH
16523: LD_INT 22
16525: PUSH
16526: LD_OWVAR 2
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 2
16537: PUSH
16538: LD_INT 25
16540: PUSH
16541: LD_INT 5
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: LD_INT 25
16550: PUSH
16551: LD_INT 9
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PUSH
16558: LD_INT 25
16560: PUSH
16561: LD_INT 8
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PPUSH
16578: CALL_OW 69
16582: PUSH
16583: FOR_IN
16584: IFFALSE 16600
// begin SetClass ( i , 1 ) ;
16586: LD_VAR 0 1
16590: PPUSH
16591: LD_INT 1
16593: PPUSH
16594: CALL_OW 336
// end ;
16598: GO 16583
16600: POP
16601: POP
// end ;
16602: PPOPN 1
16604: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16605: LD_EXP 44
16609: PUSH
16610: LD_EXP 48
16614: AND
16615: PUSH
16616: LD_OWVAR 65
16620: PUSH
16621: LD_INT 7
16623: LESS
16624: AND
16625: IFFALSE 16639
16627: GO 16629
16629: DISABLE
// begin enable ;
16630: ENABLE
// game_speed := 7 ;
16631: LD_ADDR_OWVAR 65
16635: PUSH
16636: LD_INT 7
16638: ST_TO_ADDR
// end ;
16639: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16640: LD_EXP 44
16644: PUSH
16645: LD_EXP 51
16649: AND
16650: IFFALSE 16852
16652: GO 16654
16654: DISABLE
16655: LD_INT 0
16657: PPUSH
16658: PPUSH
16659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16660: LD_ADDR_VAR 0 3
16664: PUSH
16665: LD_INT 81
16667: PUSH
16668: LD_OWVAR 2
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 21
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PPUSH
16691: CALL_OW 69
16695: ST_TO_ADDR
// if not tmp then
16696: LD_VAR 0 3
16700: NOT
16701: IFFALSE 16705
// exit ;
16703: GO 16852
// if tmp > 5 then
16705: LD_VAR 0 3
16709: PUSH
16710: LD_INT 5
16712: GREATER
16713: IFFALSE 16725
// k := 5 else
16715: LD_ADDR_VAR 0 2
16719: PUSH
16720: LD_INT 5
16722: ST_TO_ADDR
16723: GO 16735
// k := tmp ;
16725: LD_ADDR_VAR 0 2
16729: PUSH
16730: LD_VAR 0 3
16734: ST_TO_ADDR
// for i := 1 to k do
16735: LD_ADDR_VAR 0 1
16739: PUSH
16740: DOUBLE
16741: LD_INT 1
16743: DEC
16744: ST_TO_ADDR
16745: LD_VAR 0 2
16749: PUSH
16750: FOR_TO
16751: IFFALSE 16850
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16753: LD_VAR 0 3
16757: PUSH
16758: LD_VAR 0 1
16762: ARRAY
16763: PPUSH
16764: LD_VAR 0 1
16768: PUSH
16769: LD_INT 4
16771: MOD
16772: PUSH
16773: LD_INT 1
16775: PLUS
16776: PPUSH
16777: CALL_OW 259
16781: PUSH
16782: LD_INT 10
16784: LESS
16785: IFFALSE 16848
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16787: LD_VAR 0 3
16791: PUSH
16792: LD_VAR 0 1
16796: ARRAY
16797: PPUSH
16798: LD_VAR 0 1
16802: PUSH
16803: LD_INT 4
16805: MOD
16806: PUSH
16807: LD_INT 1
16809: PLUS
16810: PPUSH
16811: LD_VAR 0 3
16815: PUSH
16816: LD_VAR 0 1
16820: ARRAY
16821: PPUSH
16822: LD_VAR 0 1
16826: PUSH
16827: LD_INT 4
16829: MOD
16830: PUSH
16831: LD_INT 1
16833: PLUS
16834: PPUSH
16835: CALL_OW 259
16839: PUSH
16840: LD_INT 1
16842: PLUS
16843: PPUSH
16844: CALL_OW 237
16848: GO 16750
16850: POP
16851: POP
// end ;
16852: PPOPN 3
16854: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16855: LD_EXP 44
16859: PUSH
16860: LD_EXP 52
16864: AND
16865: IFFALSE 16885
16867: GO 16869
16869: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16870: LD_INT 4
16872: PPUSH
16873: LD_OWVAR 2
16877: PPUSH
16878: LD_INT 0
16880: PPUSH
16881: CALL_OW 324
16885: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16886: LD_EXP 44
16890: PUSH
16891: LD_EXP 81
16895: AND
16896: IFFALSE 16916
16898: GO 16900
16900: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16901: LD_INT 19
16903: PPUSH
16904: LD_OWVAR 2
16908: PPUSH
16909: LD_INT 0
16911: PPUSH
16912: CALL_OW 324
16916: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16917: LD_EXP 44
16921: PUSH
16922: LD_EXP 53
16926: AND
16927: IFFALSE 17029
16929: GO 16931
16931: DISABLE
16932: LD_INT 0
16934: PPUSH
16935: PPUSH
// begin enable ;
16936: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16937: LD_ADDR_VAR 0 2
16941: PUSH
16942: LD_INT 22
16944: PUSH
16945: LD_OWVAR 2
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 2
16956: PUSH
16957: LD_INT 34
16959: PUSH
16960: LD_INT 11
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 34
16969: PUSH
16970: LD_INT 30
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: LIST
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PPUSH
16986: CALL_OW 69
16990: ST_TO_ADDR
// if not tmp then
16991: LD_VAR 0 2
16995: NOT
16996: IFFALSE 17000
// exit ;
16998: GO 17029
// for i in tmp do
17000: LD_ADDR_VAR 0 1
17004: PUSH
17005: LD_VAR 0 2
17009: PUSH
17010: FOR_IN
17011: IFFALSE 17027
// begin SetLives ( i , 0 ) ;
17013: LD_VAR 0 1
17017: PPUSH
17018: LD_INT 0
17020: PPUSH
17021: CALL_OW 234
// end ;
17025: GO 17010
17027: POP
17028: POP
// end ;
17029: PPOPN 2
17031: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17032: LD_EXP 44
17036: PUSH
17037: LD_EXP 54
17041: AND
17042: IFFALSE 17062
17044: GO 17046
17046: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17047: LD_INT 32
17049: PPUSH
17050: LD_OWVAR 2
17054: PPUSH
17055: LD_INT 0
17057: PPUSH
17058: CALL_OW 324
17062: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17063: LD_EXP 44
17067: PUSH
17068: LD_EXP 55
17072: AND
17073: IFFALSE 17254
17075: GO 17077
17077: DISABLE
17078: LD_INT 0
17080: PPUSH
17081: PPUSH
17082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17083: LD_ADDR_VAR 0 2
17087: PUSH
17088: LD_INT 22
17090: PUSH
17091: LD_OWVAR 2
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 33
17102: PUSH
17103: LD_INT 3
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PPUSH
17114: CALL_OW 69
17118: ST_TO_ADDR
// if not tmp then
17119: LD_VAR 0 2
17123: NOT
17124: IFFALSE 17128
// exit ;
17126: GO 17254
// side := 0 ;
17128: LD_ADDR_VAR 0 3
17132: PUSH
17133: LD_INT 0
17135: ST_TO_ADDR
// for i := 1 to 8 do
17136: LD_ADDR_VAR 0 1
17140: PUSH
17141: DOUBLE
17142: LD_INT 1
17144: DEC
17145: ST_TO_ADDR
17146: LD_INT 8
17148: PUSH
17149: FOR_TO
17150: IFFALSE 17198
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17152: LD_OWVAR 2
17156: PUSH
17157: LD_VAR 0 1
17161: NONEQUAL
17162: PUSH
17163: LD_OWVAR 2
17167: PPUSH
17168: LD_VAR 0 1
17172: PPUSH
17173: CALL_OW 81
17177: PUSH
17178: LD_INT 2
17180: EQUAL
17181: AND
17182: IFFALSE 17196
// begin side := i ;
17184: LD_ADDR_VAR 0 3
17188: PUSH
17189: LD_VAR 0 1
17193: ST_TO_ADDR
// break ;
17194: GO 17198
// end ;
17196: GO 17149
17198: POP
17199: POP
// if not side then
17200: LD_VAR 0 3
17204: NOT
17205: IFFALSE 17209
// exit ;
17207: GO 17254
// for i := 1 to tmp do
17209: LD_ADDR_VAR 0 1
17213: PUSH
17214: DOUBLE
17215: LD_INT 1
17217: DEC
17218: ST_TO_ADDR
17219: LD_VAR 0 2
17223: PUSH
17224: FOR_TO
17225: IFFALSE 17252
// if Prob ( 60 ) then
17227: LD_INT 60
17229: PPUSH
17230: CALL_OW 13
17234: IFFALSE 17250
// SetSide ( i , side ) ;
17236: LD_VAR 0 1
17240: PPUSH
17241: LD_VAR 0 3
17245: PPUSH
17246: CALL_OW 235
17250: GO 17224
17252: POP
17253: POP
// end ;
17254: PPOPN 3
17256: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17257: LD_EXP 44
17261: PUSH
17262: LD_EXP 57
17266: AND
17267: IFFALSE 17386
17269: GO 17271
17271: DISABLE
17272: LD_INT 0
17274: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17275: LD_ADDR_VAR 0 1
17279: PUSH
17280: LD_INT 22
17282: PUSH
17283: LD_OWVAR 2
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 21
17294: PUSH
17295: LD_INT 1
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 3
17304: PUSH
17305: LD_INT 23
17307: PUSH
17308: LD_INT 0
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: LIST
17323: PPUSH
17324: CALL_OW 69
17328: PUSH
17329: FOR_IN
17330: IFFALSE 17384
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17332: LD_VAR 0 1
17336: PPUSH
17337: CALL_OW 257
17341: PUSH
17342: LD_INT 1
17344: PUSH
17345: LD_INT 2
17347: PUSH
17348: LD_INT 3
17350: PUSH
17351: LD_INT 4
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: IN
17360: IFFALSE 17382
// SetClass ( un , rand ( 1 , 4 ) ) ;
17362: LD_VAR 0 1
17366: PPUSH
17367: LD_INT 1
17369: PPUSH
17370: LD_INT 4
17372: PPUSH
17373: CALL_OW 12
17377: PPUSH
17378: CALL_OW 336
17382: GO 17329
17384: POP
17385: POP
// end ;
17386: PPOPN 1
17388: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17389: LD_EXP 44
17393: PUSH
17394: LD_EXP 56
17398: AND
17399: IFFALSE 17478
17401: GO 17403
17403: DISABLE
17404: LD_INT 0
17406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17407: LD_ADDR_VAR 0 1
17411: PUSH
17412: LD_INT 22
17414: PUSH
17415: LD_OWVAR 2
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 21
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PPUSH
17438: CALL_OW 69
17442: ST_TO_ADDR
// if not tmp then
17443: LD_VAR 0 1
17447: NOT
17448: IFFALSE 17452
// exit ;
17450: GO 17478
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17452: LD_VAR 0 1
17456: PUSH
17457: LD_INT 1
17459: PPUSH
17460: LD_VAR 0 1
17464: PPUSH
17465: CALL_OW 12
17469: ARRAY
17470: PPUSH
17471: LD_INT 100
17473: PPUSH
17474: CALL_OW 234
// end ;
17478: PPOPN 1
17480: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17481: LD_EXP 44
17485: PUSH
17486: LD_EXP 58
17490: AND
17491: IFFALSE 17589
17493: GO 17495
17495: DISABLE
17496: LD_INT 0
17498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17499: LD_ADDR_VAR 0 1
17503: PUSH
17504: LD_INT 22
17506: PUSH
17507: LD_OWVAR 2
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 21
17518: PUSH
17519: LD_INT 1
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PPUSH
17530: CALL_OW 69
17534: ST_TO_ADDR
// if not tmp then
17535: LD_VAR 0 1
17539: NOT
17540: IFFALSE 17544
// exit ;
17542: GO 17589
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17544: LD_VAR 0 1
17548: PUSH
17549: LD_INT 1
17551: PPUSH
17552: LD_VAR 0 1
17556: PPUSH
17557: CALL_OW 12
17561: ARRAY
17562: PPUSH
17563: LD_INT 1
17565: PPUSH
17566: LD_INT 4
17568: PPUSH
17569: CALL_OW 12
17573: PPUSH
17574: LD_INT 3000
17576: PPUSH
17577: LD_INT 9000
17579: PPUSH
17580: CALL_OW 12
17584: PPUSH
17585: CALL_OW 492
// end ;
17589: PPOPN 1
17591: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17592: LD_EXP 44
17596: PUSH
17597: LD_EXP 59
17601: AND
17602: IFFALSE 17622
17604: GO 17606
17606: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17607: LD_INT 1
17609: PPUSH
17610: LD_OWVAR 2
17614: PPUSH
17615: LD_INT 0
17617: PPUSH
17618: CALL_OW 324
17622: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17623: LD_EXP 44
17627: PUSH
17628: LD_EXP 60
17632: AND
17633: IFFALSE 17716
17635: GO 17637
17637: DISABLE
17638: LD_INT 0
17640: PPUSH
17641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17642: LD_ADDR_VAR 0 2
17646: PUSH
17647: LD_INT 22
17649: PUSH
17650: LD_OWVAR 2
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 21
17661: PUSH
17662: LD_INT 3
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PPUSH
17673: CALL_OW 69
17677: ST_TO_ADDR
// if not tmp then
17678: LD_VAR 0 2
17682: NOT
17683: IFFALSE 17687
// exit ;
17685: GO 17716
// for i in tmp do
17687: LD_ADDR_VAR 0 1
17691: PUSH
17692: LD_VAR 0 2
17696: PUSH
17697: FOR_IN
17698: IFFALSE 17714
// SetBLevel ( i , 10 ) ;
17700: LD_VAR 0 1
17704: PPUSH
17705: LD_INT 10
17707: PPUSH
17708: CALL_OW 241
17712: GO 17697
17714: POP
17715: POP
// end ;
17716: PPOPN 2
17718: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17719: LD_EXP 44
17723: PUSH
17724: LD_EXP 61
17728: AND
17729: IFFALSE 17840
17731: GO 17733
17733: DISABLE
17734: LD_INT 0
17736: PPUSH
17737: PPUSH
17738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17739: LD_ADDR_VAR 0 3
17743: PUSH
17744: LD_INT 22
17746: PUSH
17747: LD_OWVAR 2
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 25
17758: PUSH
17759: LD_INT 1
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PPUSH
17770: CALL_OW 69
17774: ST_TO_ADDR
// if not tmp then
17775: LD_VAR 0 3
17779: NOT
17780: IFFALSE 17784
// exit ;
17782: GO 17840
// un := tmp [ rand ( 1 , tmp ) ] ;
17784: LD_ADDR_VAR 0 2
17788: PUSH
17789: LD_VAR 0 3
17793: PUSH
17794: LD_INT 1
17796: PPUSH
17797: LD_VAR 0 3
17801: PPUSH
17802: CALL_OW 12
17806: ARRAY
17807: ST_TO_ADDR
// if Crawls ( un ) then
17808: LD_VAR 0 2
17812: PPUSH
17813: CALL_OW 318
17817: IFFALSE 17828
// ComWalk ( un ) ;
17819: LD_VAR 0 2
17823: PPUSH
17824: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17828: LD_VAR 0 2
17832: PPUSH
17833: LD_INT 5
17835: PPUSH
17836: CALL_OW 336
// end ;
17840: PPOPN 3
17842: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17843: LD_EXP 44
17847: PUSH
17848: LD_EXP 62
17852: AND
17853: PUSH
17854: LD_OWVAR 67
17858: PUSH
17859: LD_INT 4
17861: LESS
17862: AND
17863: IFFALSE 17882
17865: GO 17867
17867: DISABLE
// begin Difficulty := Difficulty + 1 ;
17868: LD_ADDR_OWVAR 67
17872: PUSH
17873: LD_OWVAR 67
17877: PUSH
17878: LD_INT 1
17880: PLUS
17881: ST_TO_ADDR
// end ;
17882: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17883: LD_EXP 44
17887: PUSH
17888: LD_EXP 63
17892: AND
17893: IFFALSE 17996
17895: GO 17897
17897: DISABLE
17898: LD_INT 0
17900: PPUSH
// begin for i := 1 to 5 do
17901: LD_ADDR_VAR 0 1
17905: PUSH
17906: DOUBLE
17907: LD_INT 1
17909: DEC
17910: ST_TO_ADDR
17911: LD_INT 5
17913: PUSH
17914: FOR_TO
17915: IFFALSE 17994
// begin uc_nation := nation_nature ;
17917: LD_ADDR_OWVAR 21
17921: PUSH
17922: LD_INT 0
17924: ST_TO_ADDR
// uc_side := 0 ;
17925: LD_ADDR_OWVAR 20
17929: PUSH
17930: LD_INT 0
17932: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17933: LD_ADDR_OWVAR 29
17937: PUSH
17938: LD_INT 12
17940: PUSH
17941: LD_INT 12
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: ST_TO_ADDR
// hc_agressivity := 20 ;
17948: LD_ADDR_OWVAR 35
17952: PUSH
17953: LD_INT 20
17955: ST_TO_ADDR
// hc_class := class_tiger ;
17956: LD_ADDR_OWVAR 28
17960: PUSH
17961: LD_INT 14
17963: ST_TO_ADDR
// hc_gallery :=  ;
17964: LD_ADDR_OWVAR 33
17968: PUSH
17969: LD_STRING 
17971: ST_TO_ADDR
// hc_name :=  ;
17972: LD_ADDR_OWVAR 26
17976: PUSH
17977: LD_STRING 
17979: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17980: CALL_OW 44
17984: PPUSH
17985: LD_INT 0
17987: PPUSH
17988: CALL_OW 51
// end ;
17992: GO 17914
17994: POP
17995: POP
// end ;
17996: PPOPN 1
17998: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17999: LD_EXP 44
18003: PUSH
18004: LD_EXP 64
18008: AND
18009: IFFALSE 18018
18011: GO 18013
18013: DISABLE
// StreamSibBomb ;
18014: CALL 18019 0 0
18018: END
// export function StreamSibBomb ; var i , x , y ; begin
18019: LD_INT 0
18021: PPUSH
18022: PPUSH
18023: PPUSH
18024: PPUSH
// result := false ;
18025: LD_ADDR_VAR 0 1
18029: PUSH
18030: LD_INT 0
18032: ST_TO_ADDR
// for i := 1 to 16 do
18033: LD_ADDR_VAR 0 2
18037: PUSH
18038: DOUBLE
18039: LD_INT 1
18041: DEC
18042: ST_TO_ADDR
18043: LD_INT 16
18045: PUSH
18046: FOR_TO
18047: IFFALSE 18246
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18049: LD_ADDR_VAR 0 3
18053: PUSH
18054: LD_INT 10
18056: PUSH
18057: LD_INT 20
18059: PUSH
18060: LD_INT 30
18062: PUSH
18063: LD_INT 40
18065: PUSH
18066: LD_INT 50
18068: PUSH
18069: LD_INT 60
18071: PUSH
18072: LD_INT 70
18074: PUSH
18075: LD_INT 80
18077: PUSH
18078: LD_INT 90
18080: PUSH
18081: LD_INT 100
18083: PUSH
18084: LD_INT 110
18086: PUSH
18087: LD_INT 120
18089: PUSH
18090: LD_INT 130
18092: PUSH
18093: LD_INT 140
18095: PUSH
18096: LD_INT 150
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 1
18118: PPUSH
18119: LD_INT 15
18121: PPUSH
18122: CALL_OW 12
18126: ARRAY
18127: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18128: LD_ADDR_VAR 0 4
18132: PUSH
18133: LD_INT 10
18135: PUSH
18136: LD_INT 20
18138: PUSH
18139: LD_INT 30
18141: PUSH
18142: LD_INT 40
18144: PUSH
18145: LD_INT 50
18147: PUSH
18148: LD_INT 60
18150: PUSH
18151: LD_INT 70
18153: PUSH
18154: LD_INT 80
18156: PUSH
18157: LD_INT 90
18159: PUSH
18160: LD_INT 100
18162: PUSH
18163: LD_INT 110
18165: PUSH
18166: LD_INT 120
18168: PUSH
18169: LD_INT 130
18171: PUSH
18172: LD_INT 140
18174: PUSH
18175: LD_INT 150
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 1
18197: PPUSH
18198: LD_INT 15
18200: PPUSH
18201: CALL_OW 12
18205: ARRAY
18206: ST_TO_ADDR
// if ValidHex ( x , y ) then
18207: LD_VAR 0 3
18211: PPUSH
18212: LD_VAR 0 4
18216: PPUSH
18217: CALL_OW 488
18221: IFFALSE 18244
// begin result := [ x , y ] ;
18223: LD_ADDR_VAR 0 1
18227: PUSH
18228: LD_VAR 0 3
18232: PUSH
18233: LD_VAR 0 4
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: ST_TO_ADDR
// break ;
18242: GO 18246
// end ; end ;
18244: GO 18046
18246: POP
18247: POP
// if result then
18248: LD_VAR 0 1
18252: IFFALSE 18312
// begin ToLua ( playSibBomb() ) ;
18254: LD_STRING playSibBomb()
18256: PPUSH
18257: CALL_OW 559
// wait ( 0 0$14 ) ;
18261: LD_INT 490
18263: PPUSH
18264: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18268: LD_VAR 0 1
18272: PUSH
18273: LD_INT 1
18275: ARRAY
18276: PPUSH
18277: LD_VAR 0 1
18281: PUSH
18282: LD_INT 2
18284: ARRAY
18285: PPUSH
18286: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18290: LD_VAR 0 1
18294: PUSH
18295: LD_INT 1
18297: ARRAY
18298: PPUSH
18299: LD_VAR 0 1
18303: PUSH
18304: LD_INT 2
18306: ARRAY
18307: PPUSH
18308: CALL_OW 429
// end ; end ;
18312: LD_VAR 0 1
18316: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18317: LD_EXP 44
18321: PUSH
18322: LD_EXP 66
18326: AND
18327: IFFALSE 18339
18329: GO 18331
18331: DISABLE
// YouLost (  ) ;
18332: LD_STRING 
18334: PPUSH
18335: CALL_OW 104
18339: END
// every 0 0$1 trigger StreamModeActive and sFog do
18340: LD_EXP 44
18344: PUSH
18345: LD_EXP 65
18349: AND
18350: IFFALSE 18364
18352: GO 18354
18354: DISABLE
// FogOff ( your_side ) ;
18355: LD_OWVAR 2
18359: PPUSH
18360: CALL_OW 344
18364: END
// every 0 0$1 trigger StreamModeActive and sSun do
18365: LD_EXP 44
18369: PUSH
18370: LD_EXP 67
18374: AND
18375: IFFALSE 18403
18377: GO 18379
18379: DISABLE
// begin solar_recharge_percent := 0 ;
18380: LD_ADDR_OWVAR 79
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18388: LD_INT 10500
18390: PPUSH
18391: CALL_OW 67
// solar_recharge_percent := 100 ;
18395: LD_ADDR_OWVAR 79
18399: PUSH
18400: LD_INT 100
18402: ST_TO_ADDR
// end ;
18403: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18404: LD_EXP 44
18408: PUSH
18409: LD_EXP 68
18413: AND
18414: IFFALSE 18653
18416: GO 18418
18418: DISABLE
18419: LD_INT 0
18421: PPUSH
18422: PPUSH
18423: PPUSH
// begin tmp := [ ] ;
18424: LD_ADDR_VAR 0 3
18428: PUSH
18429: EMPTY
18430: ST_TO_ADDR
// for i := 1 to 6 do
18431: LD_ADDR_VAR 0 1
18435: PUSH
18436: DOUBLE
18437: LD_INT 1
18439: DEC
18440: ST_TO_ADDR
18441: LD_INT 6
18443: PUSH
18444: FOR_TO
18445: IFFALSE 18550
// begin uc_nation := nation_nature ;
18447: LD_ADDR_OWVAR 21
18451: PUSH
18452: LD_INT 0
18454: ST_TO_ADDR
// uc_side := 0 ;
18455: LD_ADDR_OWVAR 20
18459: PUSH
18460: LD_INT 0
18462: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18463: LD_ADDR_OWVAR 29
18467: PUSH
18468: LD_INT 12
18470: PUSH
18471: LD_INT 12
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: ST_TO_ADDR
// hc_agressivity := 20 ;
18478: LD_ADDR_OWVAR 35
18482: PUSH
18483: LD_INT 20
18485: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18486: LD_ADDR_OWVAR 28
18490: PUSH
18491: LD_INT 17
18493: ST_TO_ADDR
// hc_gallery :=  ;
18494: LD_ADDR_OWVAR 33
18498: PUSH
18499: LD_STRING 
18501: ST_TO_ADDR
// hc_name :=  ;
18502: LD_ADDR_OWVAR 26
18506: PUSH
18507: LD_STRING 
18509: ST_TO_ADDR
// un := CreateHuman ;
18510: LD_ADDR_VAR 0 2
18514: PUSH
18515: CALL_OW 44
18519: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18520: LD_VAR 0 2
18524: PPUSH
18525: LD_INT 1
18527: PPUSH
18528: CALL_OW 51
// tmp := tmp ^ un ;
18532: LD_ADDR_VAR 0 3
18536: PUSH
18537: LD_VAR 0 3
18541: PUSH
18542: LD_VAR 0 2
18546: ADD
18547: ST_TO_ADDR
// end ;
18548: GO 18444
18550: POP
18551: POP
// repeat wait ( 0 0$1 ) ;
18552: LD_INT 35
18554: PPUSH
18555: CALL_OW 67
// for un in tmp do
18559: LD_ADDR_VAR 0 2
18563: PUSH
18564: LD_VAR 0 3
18568: PUSH
18569: FOR_IN
18570: IFFALSE 18644
// begin if IsDead ( un ) then
18572: LD_VAR 0 2
18576: PPUSH
18577: CALL_OW 301
18581: IFFALSE 18601
// begin tmp := tmp diff un ;
18583: LD_ADDR_VAR 0 3
18587: PUSH
18588: LD_VAR 0 3
18592: PUSH
18593: LD_VAR 0 2
18597: DIFF
18598: ST_TO_ADDR
// continue ;
18599: GO 18569
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18601: LD_VAR 0 2
18605: PPUSH
18606: LD_INT 3
18608: PUSH
18609: LD_INT 22
18611: PUSH
18612: LD_INT 0
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PPUSH
18623: CALL_OW 69
18627: PPUSH
18628: LD_VAR 0 2
18632: PPUSH
18633: CALL_OW 74
18637: PPUSH
18638: CALL_OW 115
// end ;
18642: GO 18569
18644: POP
18645: POP
// until not tmp ;
18646: LD_VAR 0 3
18650: NOT
18651: IFFALSE 18552
// end ;
18653: PPOPN 3
18655: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18656: LD_EXP 44
18660: PUSH
18661: LD_EXP 69
18665: AND
18666: IFFALSE 18720
18668: GO 18670
18670: DISABLE
// begin ToLua ( displayTroll(); ) ;
18671: LD_STRING displayTroll();
18673: PPUSH
18674: CALL_OW 559
// wait ( 3 3$00 ) ;
18678: LD_INT 6300
18680: PPUSH
18681: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18685: LD_STRING hideTroll();
18687: PPUSH
18688: CALL_OW 559
// wait ( 1 1$00 ) ;
18692: LD_INT 2100
18694: PPUSH
18695: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18699: LD_STRING displayTroll();
18701: PPUSH
18702: CALL_OW 559
// wait ( 1 1$00 ) ;
18706: LD_INT 2100
18708: PPUSH
18709: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18713: LD_STRING hideTroll();
18715: PPUSH
18716: CALL_OW 559
// end ;
18720: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18721: LD_EXP 44
18725: PUSH
18726: LD_EXP 70
18730: AND
18731: IFFALSE 18794
18733: GO 18735
18735: DISABLE
18736: LD_INT 0
18738: PPUSH
// begin p := 0 ;
18739: LD_ADDR_VAR 0 1
18743: PUSH
18744: LD_INT 0
18746: ST_TO_ADDR
// repeat game_speed := 1 ;
18747: LD_ADDR_OWVAR 65
18751: PUSH
18752: LD_INT 1
18754: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18755: LD_INT 35
18757: PPUSH
18758: CALL_OW 67
// p := p + 1 ;
18762: LD_ADDR_VAR 0 1
18766: PUSH
18767: LD_VAR 0 1
18771: PUSH
18772: LD_INT 1
18774: PLUS
18775: ST_TO_ADDR
// until p >= 60 ;
18776: LD_VAR 0 1
18780: PUSH
18781: LD_INT 60
18783: GREATEREQUAL
18784: IFFALSE 18747
// game_speed := 4 ;
18786: LD_ADDR_OWVAR 65
18790: PUSH
18791: LD_INT 4
18793: ST_TO_ADDR
// end ;
18794: PPOPN 1
18796: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18797: LD_EXP 44
18801: PUSH
18802: LD_EXP 71
18806: AND
18807: IFFALSE 18953
18809: GO 18811
18811: DISABLE
18812: LD_INT 0
18814: PPUSH
18815: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18816: LD_ADDR_VAR 0 1
18820: PUSH
18821: LD_INT 22
18823: PUSH
18824: LD_OWVAR 2
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 2
18835: PUSH
18836: LD_INT 30
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 30
18848: PUSH
18849: LD_INT 1
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: LIST
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PPUSH
18865: CALL_OW 69
18869: ST_TO_ADDR
// if not depot then
18870: LD_VAR 0 1
18874: NOT
18875: IFFALSE 18879
// exit ;
18877: GO 18953
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18879: LD_ADDR_VAR 0 2
18883: PUSH
18884: LD_VAR 0 1
18888: PUSH
18889: LD_INT 1
18891: PPUSH
18892: LD_VAR 0 1
18896: PPUSH
18897: CALL_OW 12
18901: ARRAY
18902: PPUSH
18903: CALL_OW 274
18907: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18908: LD_VAR 0 2
18912: PPUSH
18913: LD_INT 1
18915: PPUSH
18916: LD_INT 0
18918: PPUSH
18919: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18923: LD_VAR 0 2
18927: PPUSH
18928: LD_INT 2
18930: PPUSH
18931: LD_INT 0
18933: PPUSH
18934: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18938: LD_VAR 0 2
18942: PPUSH
18943: LD_INT 3
18945: PPUSH
18946: LD_INT 0
18948: PPUSH
18949: CALL_OW 277
// end ;
18953: PPOPN 2
18955: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18956: LD_EXP 44
18960: PUSH
18961: LD_EXP 72
18965: AND
18966: IFFALSE 19063
18968: GO 18970
18970: DISABLE
18971: LD_INT 0
18973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18974: LD_ADDR_VAR 0 1
18978: PUSH
18979: LD_INT 22
18981: PUSH
18982: LD_OWVAR 2
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 21
18993: PUSH
18994: LD_INT 1
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 3
19003: PUSH
19004: LD_INT 23
19006: PUSH
19007: LD_INT 0
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: LIST
19022: PPUSH
19023: CALL_OW 69
19027: ST_TO_ADDR
// if not tmp then
19028: LD_VAR 0 1
19032: NOT
19033: IFFALSE 19037
// exit ;
19035: GO 19063
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19037: LD_VAR 0 1
19041: PUSH
19042: LD_INT 1
19044: PPUSH
19045: LD_VAR 0 1
19049: PPUSH
19050: CALL_OW 12
19054: ARRAY
19055: PPUSH
19056: LD_INT 200
19058: PPUSH
19059: CALL_OW 234
// end ;
19063: PPOPN 1
19065: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19066: LD_EXP 44
19070: PUSH
19071: LD_EXP 73
19075: AND
19076: IFFALSE 19155
19078: GO 19080
19080: DISABLE
19081: LD_INT 0
19083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19084: LD_ADDR_VAR 0 1
19088: PUSH
19089: LD_INT 22
19091: PUSH
19092: LD_OWVAR 2
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 21
19103: PUSH
19104: LD_INT 2
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PPUSH
19115: CALL_OW 69
19119: ST_TO_ADDR
// if not tmp then
19120: LD_VAR 0 1
19124: NOT
19125: IFFALSE 19129
// exit ;
19127: GO 19155
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19129: LD_VAR 0 1
19133: PUSH
19134: LD_INT 1
19136: PPUSH
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL_OW 12
19146: ARRAY
19147: PPUSH
19148: LD_INT 60
19150: PPUSH
19151: CALL_OW 234
// end ;
19155: PPOPN 1
19157: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19158: LD_EXP 44
19162: PUSH
19163: LD_EXP 74
19167: AND
19168: IFFALSE 19267
19170: GO 19172
19172: DISABLE
19173: LD_INT 0
19175: PPUSH
19176: PPUSH
// begin enable ;
19177: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19178: LD_ADDR_VAR 0 1
19182: PUSH
19183: LD_INT 22
19185: PUSH
19186: LD_OWVAR 2
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 61
19197: PUSH
19198: EMPTY
19199: LIST
19200: PUSH
19201: LD_INT 33
19203: PUSH
19204: LD_INT 2
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: LIST
19215: PPUSH
19216: CALL_OW 69
19220: ST_TO_ADDR
// if not tmp then
19221: LD_VAR 0 1
19225: NOT
19226: IFFALSE 19230
// exit ;
19228: GO 19267
// for i in tmp do
19230: LD_ADDR_VAR 0 2
19234: PUSH
19235: LD_VAR 0 1
19239: PUSH
19240: FOR_IN
19241: IFFALSE 19265
// if IsControledBy ( i ) then
19243: LD_VAR 0 2
19247: PPUSH
19248: CALL_OW 312
19252: IFFALSE 19263
// ComUnlink ( i ) ;
19254: LD_VAR 0 2
19258: PPUSH
19259: CALL_OW 136
19263: GO 19240
19265: POP
19266: POP
// end ;
19267: PPOPN 2
19269: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19270: LD_EXP 44
19274: PUSH
19275: LD_EXP 75
19279: AND
19280: IFFALSE 19420
19282: GO 19284
19284: DISABLE
19285: LD_INT 0
19287: PPUSH
19288: PPUSH
// begin ToLua ( displayPowell(); ) ;
19289: LD_STRING displayPowell();
19291: PPUSH
19292: CALL_OW 559
// uc_side := 0 ;
19296: LD_ADDR_OWVAR 20
19300: PUSH
19301: LD_INT 0
19303: ST_TO_ADDR
// uc_nation := 2 ;
19304: LD_ADDR_OWVAR 21
19308: PUSH
19309: LD_INT 2
19311: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19312: LD_ADDR_OWVAR 37
19316: PUSH
19317: LD_INT 14
19319: ST_TO_ADDR
// vc_engine := engine_siberite ;
19320: LD_ADDR_OWVAR 39
19324: PUSH
19325: LD_INT 3
19327: ST_TO_ADDR
// vc_control := control_apeman ;
19328: LD_ADDR_OWVAR 38
19332: PUSH
19333: LD_INT 5
19335: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19336: LD_ADDR_OWVAR 40
19340: PUSH
19341: LD_INT 29
19343: ST_TO_ADDR
// un := CreateVehicle ;
19344: LD_ADDR_VAR 0 2
19348: PUSH
19349: CALL_OW 45
19353: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19354: LD_VAR 0 2
19358: PPUSH
19359: LD_INT 1
19361: PPUSH
19362: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19366: LD_INT 35
19368: PPUSH
19369: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19373: LD_VAR 0 2
19377: PPUSH
19378: LD_INT 22
19380: PUSH
19381: LD_OWVAR 2
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PPUSH
19390: CALL_OW 69
19394: PPUSH
19395: LD_VAR 0 2
19399: PPUSH
19400: CALL_OW 74
19404: PPUSH
19405: CALL_OW 115
// until IsDead ( un ) ;
19409: LD_VAR 0 2
19413: PPUSH
19414: CALL_OW 301
19418: IFFALSE 19366
// end ;
19420: PPOPN 2
19422: END
// every 0 0$1 trigger StreamModeActive and sStu do
19423: LD_EXP 44
19427: PUSH
19428: LD_EXP 83
19432: AND
19433: IFFALSE 19449
19435: GO 19437
19437: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19438: LD_STRING displayStucuk();
19440: PPUSH
19441: CALL_OW 559
// ResetFog ;
19445: CALL_OW 335
// end ;
19449: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19450: LD_EXP 44
19454: PUSH
19455: LD_EXP 76
19459: AND
19460: IFFALSE 19601
19462: GO 19464
19464: DISABLE
19465: LD_INT 0
19467: PPUSH
19468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19469: LD_ADDR_VAR 0 2
19473: PUSH
19474: LD_INT 22
19476: PUSH
19477: LD_OWVAR 2
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 21
19488: PUSH
19489: LD_INT 1
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PPUSH
19500: CALL_OW 69
19504: ST_TO_ADDR
// if not tmp then
19505: LD_VAR 0 2
19509: NOT
19510: IFFALSE 19514
// exit ;
19512: GO 19601
// un := tmp [ rand ( 1 , tmp ) ] ;
19514: LD_ADDR_VAR 0 1
19518: PUSH
19519: LD_VAR 0 2
19523: PUSH
19524: LD_INT 1
19526: PPUSH
19527: LD_VAR 0 2
19531: PPUSH
19532: CALL_OW 12
19536: ARRAY
19537: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19538: LD_VAR 0 1
19542: PPUSH
19543: LD_INT 0
19545: PPUSH
19546: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19550: LD_VAR 0 1
19554: PPUSH
19555: LD_OWVAR 3
19559: PUSH
19560: LD_VAR 0 1
19564: DIFF
19565: PPUSH
19566: LD_VAR 0 1
19570: PPUSH
19571: CALL_OW 74
19575: PPUSH
19576: CALL_OW 115
// wait ( 0 0$20 ) ;
19580: LD_INT 700
19582: PPUSH
19583: CALL_OW 67
// SetSide ( un , your_side ) ;
19587: LD_VAR 0 1
19591: PPUSH
19592: LD_OWVAR 2
19596: PPUSH
19597: CALL_OW 235
// end ;
19601: PPOPN 2
19603: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19604: LD_EXP 44
19608: PUSH
19609: LD_EXP 77
19613: AND
19614: IFFALSE 19720
19616: GO 19618
19618: DISABLE
19619: LD_INT 0
19621: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19622: LD_ADDR_VAR 0 1
19626: PUSH
19627: LD_INT 22
19629: PUSH
19630: LD_OWVAR 2
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 2
19641: PUSH
19642: LD_INT 30
19644: PUSH
19645: LD_INT 0
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 30
19654: PUSH
19655: LD_INT 1
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: LIST
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PPUSH
19671: CALL_OW 69
19675: ST_TO_ADDR
// if not depot then
19676: LD_VAR 0 1
19680: NOT
19681: IFFALSE 19685
// exit ;
19683: GO 19720
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19685: LD_VAR 0 1
19689: PUSH
19690: LD_INT 1
19692: ARRAY
19693: PPUSH
19694: CALL_OW 250
19698: PPUSH
19699: LD_VAR 0 1
19703: PUSH
19704: LD_INT 1
19706: ARRAY
19707: PPUSH
19708: CALL_OW 251
19712: PPUSH
19713: LD_INT 70
19715: PPUSH
19716: CALL_OW 495
// end ;
19720: PPOPN 1
19722: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19723: LD_EXP 44
19727: PUSH
19728: LD_EXP 78
19732: AND
19733: IFFALSE 19944
19735: GO 19737
19737: DISABLE
19738: LD_INT 0
19740: PPUSH
19741: PPUSH
19742: PPUSH
19743: PPUSH
19744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19745: LD_ADDR_VAR 0 5
19749: PUSH
19750: LD_INT 22
19752: PUSH
19753: LD_OWVAR 2
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 21
19764: PUSH
19765: LD_INT 1
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PPUSH
19776: CALL_OW 69
19780: ST_TO_ADDR
// if not tmp then
19781: LD_VAR 0 5
19785: NOT
19786: IFFALSE 19790
// exit ;
19788: GO 19944
// for i in tmp do
19790: LD_ADDR_VAR 0 1
19794: PUSH
19795: LD_VAR 0 5
19799: PUSH
19800: FOR_IN
19801: IFFALSE 19942
// begin d := rand ( 0 , 5 ) ;
19803: LD_ADDR_VAR 0 4
19807: PUSH
19808: LD_INT 0
19810: PPUSH
19811: LD_INT 5
19813: PPUSH
19814: CALL_OW 12
19818: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19819: LD_ADDR_VAR 0 2
19823: PUSH
19824: LD_VAR 0 1
19828: PPUSH
19829: CALL_OW 250
19833: PPUSH
19834: LD_VAR 0 4
19838: PPUSH
19839: LD_INT 3
19841: PPUSH
19842: LD_INT 12
19844: PPUSH
19845: CALL_OW 12
19849: PPUSH
19850: CALL_OW 272
19854: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19855: LD_ADDR_VAR 0 3
19859: PUSH
19860: LD_VAR 0 1
19864: PPUSH
19865: CALL_OW 251
19869: PPUSH
19870: LD_VAR 0 4
19874: PPUSH
19875: LD_INT 3
19877: PPUSH
19878: LD_INT 12
19880: PPUSH
19881: CALL_OW 12
19885: PPUSH
19886: CALL_OW 273
19890: ST_TO_ADDR
// if ValidHex ( x , y ) then
19891: LD_VAR 0 2
19895: PPUSH
19896: LD_VAR 0 3
19900: PPUSH
19901: CALL_OW 488
19905: IFFALSE 19940
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19907: LD_VAR 0 1
19911: PPUSH
19912: LD_VAR 0 2
19916: PPUSH
19917: LD_VAR 0 3
19921: PPUSH
19922: LD_INT 3
19924: PPUSH
19925: LD_INT 6
19927: PPUSH
19928: CALL_OW 12
19932: PPUSH
19933: LD_INT 1
19935: PPUSH
19936: CALL_OW 483
// end ;
19940: GO 19800
19942: POP
19943: POP
// end ;
19944: PPOPN 5
19946: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19947: LD_EXP 44
19951: PUSH
19952: LD_EXP 79
19956: AND
19957: IFFALSE 20051
19959: GO 19961
19961: DISABLE
19962: LD_INT 0
19964: PPUSH
19965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19966: LD_ADDR_VAR 0 2
19970: PUSH
19971: LD_INT 22
19973: PUSH
19974: LD_OWVAR 2
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 32
19985: PUSH
19986: LD_INT 1
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 21
19995: PUSH
19996: LD_INT 2
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: LIST
20007: PPUSH
20008: CALL_OW 69
20012: ST_TO_ADDR
// if not tmp then
20013: LD_VAR 0 2
20017: NOT
20018: IFFALSE 20022
// exit ;
20020: GO 20051
// for i in tmp do
20022: LD_ADDR_VAR 0 1
20026: PUSH
20027: LD_VAR 0 2
20031: PUSH
20032: FOR_IN
20033: IFFALSE 20049
// SetFuel ( i , 0 ) ;
20035: LD_VAR 0 1
20039: PPUSH
20040: LD_INT 0
20042: PPUSH
20043: CALL_OW 240
20047: GO 20032
20049: POP
20050: POP
// end ;
20051: PPOPN 2
20053: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20054: LD_EXP 44
20058: PUSH
20059: LD_EXP 80
20063: AND
20064: IFFALSE 20130
20066: GO 20068
20068: DISABLE
20069: LD_INT 0
20071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20072: LD_ADDR_VAR 0 1
20076: PUSH
20077: LD_INT 22
20079: PUSH
20080: LD_OWVAR 2
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 30
20091: PUSH
20092: LD_INT 29
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PPUSH
20103: CALL_OW 69
20107: ST_TO_ADDR
// if not tmp then
20108: LD_VAR 0 1
20112: NOT
20113: IFFALSE 20117
// exit ;
20115: GO 20130
// DestroyUnit ( tmp [ 1 ] ) ;
20117: LD_VAR 0 1
20121: PUSH
20122: LD_INT 1
20124: ARRAY
20125: PPUSH
20126: CALL_OW 65
// end ;
20130: PPOPN 1
20132: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20133: LD_EXP 44
20137: PUSH
20138: LD_EXP 82
20142: AND
20143: IFFALSE 20272
20145: GO 20147
20147: DISABLE
20148: LD_INT 0
20150: PPUSH
// begin uc_side := 0 ;
20151: LD_ADDR_OWVAR 20
20155: PUSH
20156: LD_INT 0
20158: ST_TO_ADDR
// uc_nation := nation_arabian ;
20159: LD_ADDR_OWVAR 21
20163: PUSH
20164: LD_INT 2
20166: ST_TO_ADDR
// hc_gallery :=  ;
20167: LD_ADDR_OWVAR 33
20171: PUSH
20172: LD_STRING 
20174: ST_TO_ADDR
// hc_name :=  ;
20175: LD_ADDR_OWVAR 26
20179: PUSH
20180: LD_STRING 
20182: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20183: LD_INT 1
20185: PPUSH
20186: LD_INT 11
20188: PPUSH
20189: LD_INT 10
20191: PPUSH
20192: CALL_OW 380
// un := CreateHuman ;
20196: LD_ADDR_VAR 0 1
20200: PUSH
20201: CALL_OW 44
20205: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20206: LD_VAR 0 1
20210: PPUSH
20211: LD_INT 1
20213: PPUSH
20214: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20218: LD_INT 35
20220: PPUSH
20221: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20225: LD_VAR 0 1
20229: PPUSH
20230: LD_INT 22
20232: PUSH
20233: LD_OWVAR 2
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PPUSH
20242: CALL_OW 69
20246: PPUSH
20247: LD_VAR 0 1
20251: PPUSH
20252: CALL_OW 74
20256: PPUSH
20257: CALL_OW 115
// until IsDead ( un ) ;
20261: LD_VAR 0 1
20265: PPUSH
20266: CALL_OW 301
20270: IFFALSE 20218
// end ;
20272: PPOPN 1
20274: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20275: LD_EXP 44
20279: PUSH
20280: LD_EXP 84
20284: AND
20285: IFFALSE 20297
20287: GO 20289
20289: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20290: LD_STRING earthquake(getX(game), 0, 32)
20292: PPUSH
20293: CALL_OW 559
20297: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20298: LD_EXP 44
20302: PUSH
20303: LD_EXP 85
20307: AND
20308: IFFALSE 20399
20310: GO 20312
20312: DISABLE
20313: LD_INT 0
20315: PPUSH
// begin enable ;
20316: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20317: LD_ADDR_VAR 0 1
20321: PUSH
20322: LD_INT 22
20324: PUSH
20325: LD_OWVAR 2
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 21
20336: PUSH
20337: LD_INT 2
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 33
20346: PUSH
20347: LD_INT 3
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: LIST
20358: PPUSH
20359: CALL_OW 69
20363: ST_TO_ADDR
// if not tmp then
20364: LD_VAR 0 1
20368: NOT
20369: IFFALSE 20373
// exit ;
20371: GO 20399
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20373: LD_VAR 0 1
20377: PUSH
20378: LD_INT 1
20380: PPUSH
20381: LD_VAR 0 1
20385: PPUSH
20386: CALL_OW 12
20390: ARRAY
20391: PPUSH
20392: LD_INT 1
20394: PPUSH
20395: CALL_OW 234
// end ;
20399: PPOPN 1
20401: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20402: LD_EXP 44
20406: PUSH
20407: LD_EXP 86
20411: AND
20412: IFFALSE 20553
20414: GO 20416
20416: DISABLE
20417: LD_INT 0
20419: PPUSH
20420: PPUSH
20421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20422: LD_ADDR_VAR 0 3
20426: PUSH
20427: LD_INT 22
20429: PUSH
20430: LD_OWVAR 2
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 25
20441: PUSH
20442: LD_INT 1
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PPUSH
20453: CALL_OW 69
20457: ST_TO_ADDR
// if not tmp then
20458: LD_VAR 0 3
20462: NOT
20463: IFFALSE 20467
// exit ;
20465: GO 20553
// un := tmp [ rand ( 1 , tmp ) ] ;
20467: LD_ADDR_VAR 0 2
20471: PUSH
20472: LD_VAR 0 3
20476: PUSH
20477: LD_INT 1
20479: PPUSH
20480: LD_VAR 0 3
20484: PPUSH
20485: CALL_OW 12
20489: ARRAY
20490: ST_TO_ADDR
// if Crawls ( un ) then
20491: LD_VAR 0 2
20495: PPUSH
20496: CALL_OW 318
20500: IFFALSE 20511
// ComWalk ( un ) ;
20502: LD_VAR 0 2
20506: PPUSH
20507: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20511: LD_VAR 0 2
20515: PPUSH
20516: LD_INT 9
20518: PPUSH
20519: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20523: LD_INT 28
20525: PPUSH
20526: LD_OWVAR 2
20530: PPUSH
20531: LD_INT 2
20533: PPUSH
20534: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20538: LD_INT 29
20540: PPUSH
20541: LD_OWVAR 2
20545: PPUSH
20546: LD_INT 2
20548: PPUSH
20549: CALL_OW 322
// end ;
20553: PPOPN 3
20555: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20556: LD_EXP 44
20560: PUSH
20561: LD_EXP 87
20565: AND
20566: IFFALSE 20677
20568: GO 20570
20570: DISABLE
20571: LD_INT 0
20573: PPUSH
20574: PPUSH
20575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20576: LD_ADDR_VAR 0 3
20580: PUSH
20581: LD_INT 22
20583: PUSH
20584: LD_OWVAR 2
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 25
20595: PUSH
20596: LD_INT 1
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PPUSH
20607: CALL_OW 69
20611: ST_TO_ADDR
// if not tmp then
20612: LD_VAR 0 3
20616: NOT
20617: IFFALSE 20621
// exit ;
20619: GO 20677
// un := tmp [ rand ( 1 , tmp ) ] ;
20621: LD_ADDR_VAR 0 2
20625: PUSH
20626: LD_VAR 0 3
20630: PUSH
20631: LD_INT 1
20633: PPUSH
20634: LD_VAR 0 3
20638: PPUSH
20639: CALL_OW 12
20643: ARRAY
20644: ST_TO_ADDR
// if Crawls ( un ) then
20645: LD_VAR 0 2
20649: PPUSH
20650: CALL_OW 318
20654: IFFALSE 20665
// ComWalk ( un ) ;
20656: LD_VAR 0 2
20660: PPUSH
20661: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20665: LD_VAR 0 2
20669: PPUSH
20670: LD_INT 8
20672: PPUSH
20673: CALL_OW 336
// end ;
20677: PPOPN 3
20679: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20680: LD_EXP 44
20684: PUSH
20685: LD_EXP 88
20689: AND
20690: IFFALSE 20834
20692: GO 20694
20694: DISABLE
20695: LD_INT 0
20697: PPUSH
20698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20699: LD_ADDR_VAR 0 2
20703: PUSH
20704: LD_INT 22
20706: PUSH
20707: LD_OWVAR 2
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 21
20718: PUSH
20719: LD_INT 2
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 2
20728: PUSH
20729: LD_INT 34
20731: PUSH
20732: LD_INT 12
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 34
20741: PUSH
20742: LD_INT 51
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 34
20751: PUSH
20752: LD_INT 32
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: LIST
20769: PPUSH
20770: CALL_OW 69
20774: ST_TO_ADDR
// if not tmp then
20775: LD_VAR 0 2
20779: NOT
20780: IFFALSE 20784
// exit ;
20782: GO 20834
// for i in tmp do
20784: LD_ADDR_VAR 0 1
20788: PUSH
20789: LD_VAR 0 2
20793: PUSH
20794: FOR_IN
20795: IFFALSE 20832
// if GetCargo ( i , mat_artifact ) = 0 then
20797: LD_VAR 0 1
20801: PPUSH
20802: LD_INT 4
20804: PPUSH
20805: CALL_OW 289
20809: PUSH
20810: LD_INT 0
20812: EQUAL
20813: IFFALSE 20830
// SetCargo ( i , mat_siberit , 100 ) ;
20815: LD_VAR 0 1
20819: PPUSH
20820: LD_INT 3
20822: PPUSH
20823: LD_INT 100
20825: PPUSH
20826: CALL_OW 290
20830: GO 20794
20832: POP
20833: POP
// end ;
20834: PPOPN 2
20836: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20837: LD_EXP 44
20841: PUSH
20842: LD_EXP 89
20846: AND
20847: IFFALSE 21030
20849: GO 20851
20851: DISABLE
20852: LD_INT 0
20854: PPUSH
20855: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20856: LD_ADDR_VAR 0 2
20860: PUSH
20861: LD_INT 22
20863: PUSH
20864: LD_OWVAR 2
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PPUSH
20873: CALL_OW 69
20877: ST_TO_ADDR
// if not tmp then
20878: LD_VAR 0 2
20882: NOT
20883: IFFALSE 20887
// exit ;
20885: GO 21030
// for i := 1 to 2 do
20887: LD_ADDR_VAR 0 1
20891: PUSH
20892: DOUBLE
20893: LD_INT 1
20895: DEC
20896: ST_TO_ADDR
20897: LD_INT 2
20899: PUSH
20900: FOR_TO
20901: IFFALSE 21028
// begin uc_side := your_side ;
20903: LD_ADDR_OWVAR 20
20907: PUSH
20908: LD_OWVAR 2
20912: ST_TO_ADDR
// uc_nation := nation_american ;
20913: LD_ADDR_OWVAR 21
20917: PUSH
20918: LD_INT 1
20920: ST_TO_ADDR
// vc_chassis := us_morphling ;
20921: LD_ADDR_OWVAR 37
20925: PUSH
20926: LD_INT 5
20928: ST_TO_ADDR
// vc_engine := engine_siberite ;
20929: LD_ADDR_OWVAR 39
20933: PUSH
20934: LD_INT 3
20936: ST_TO_ADDR
// vc_control := control_computer ;
20937: LD_ADDR_OWVAR 38
20941: PUSH
20942: LD_INT 3
20944: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20945: LD_ADDR_OWVAR 40
20949: PUSH
20950: LD_INT 10
20952: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20953: LD_VAR 0 2
20957: PUSH
20958: LD_INT 1
20960: ARRAY
20961: PPUSH
20962: CALL_OW 310
20966: NOT
20967: IFFALSE 21014
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20969: CALL_OW 45
20973: PPUSH
20974: LD_VAR 0 2
20978: PUSH
20979: LD_INT 1
20981: ARRAY
20982: PPUSH
20983: CALL_OW 250
20987: PPUSH
20988: LD_VAR 0 2
20992: PUSH
20993: LD_INT 1
20995: ARRAY
20996: PPUSH
20997: CALL_OW 251
21001: PPUSH
21002: LD_INT 12
21004: PPUSH
21005: LD_INT 1
21007: PPUSH
21008: CALL_OW 50
21012: GO 21026
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21014: CALL_OW 45
21018: PPUSH
21019: LD_INT 1
21021: PPUSH
21022: CALL_OW 51
// end ;
21026: GO 20900
21028: POP
21029: POP
// end ;
21030: PPOPN 2
21032: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21033: LD_EXP 44
21037: PUSH
21038: LD_EXP 90
21042: AND
21043: IFFALSE 21265
21045: GO 21047
21047: DISABLE
21048: LD_INT 0
21050: PPUSH
21051: PPUSH
21052: PPUSH
21053: PPUSH
21054: PPUSH
21055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21056: LD_ADDR_VAR 0 6
21060: PUSH
21061: LD_INT 22
21063: PUSH
21064: LD_OWVAR 2
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 21
21075: PUSH
21076: LD_INT 1
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 3
21085: PUSH
21086: LD_INT 23
21088: PUSH
21089: LD_INT 0
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: LIST
21104: PPUSH
21105: CALL_OW 69
21109: ST_TO_ADDR
// if not tmp then
21110: LD_VAR 0 6
21114: NOT
21115: IFFALSE 21119
// exit ;
21117: GO 21265
// s1 := rand ( 1 , 4 ) ;
21119: LD_ADDR_VAR 0 2
21123: PUSH
21124: LD_INT 1
21126: PPUSH
21127: LD_INT 4
21129: PPUSH
21130: CALL_OW 12
21134: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21135: LD_ADDR_VAR 0 4
21139: PUSH
21140: LD_VAR 0 6
21144: PUSH
21145: LD_INT 1
21147: ARRAY
21148: PPUSH
21149: LD_VAR 0 2
21153: PPUSH
21154: CALL_OW 259
21158: ST_TO_ADDR
// if s1 = 1 then
21159: LD_VAR 0 2
21163: PUSH
21164: LD_INT 1
21166: EQUAL
21167: IFFALSE 21187
// s2 := rand ( 2 , 4 ) else
21169: LD_ADDR_VAR 0 3
21173: PUSH
21174: LD_INT 2
21176: PPUSH
21177: LD_INT 4
21179: PPUSH
21180: CALL_OW 12
21184: ST_TO_ADDR
21185: GO 21195
// s2 := 1 ;
21187: LD_ADDR_VAR 0 3
21191: PUSH
21192: LD_INT 1
21194: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21195: LD_ADDR_VAR 0 5
21199: PUSH
21200: LD_VAR 0 6
21204: PUSH
21205: LD_INT 1
21207: ARRAY
21208: PPUSH
21209: LD_VAR 0 3
21213: PPUSH
21214: CALL_OW 259
21218: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21219: LD_VAR 0 6
21223: PUSH
21224: LD_INT 1
21226: ARRAY
21227: PPUSH
21228: LD_VAR 0 2
21232: PPUSH
21233: LD_VAR 0 5
21237: PPUSH
21238: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21242: LD_VAR 0 6
21246: PUSH
21247: LD_INT 1
21249: ARRAY
21250: PPUSH
21251: LD_VAR 0 3
21255: PPUSH
21256: LD_VAR 0 4
21260: PPUSH
21261: CALL_OW 237
// end ;
21265: PPOPN 6
21267: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21268: LD_EXP 44
21272: PUSH
21273: LD_EXP 91
21277: AND
21278: IFFALSE 21357
21280: GO 21282
21282: DISABLE
21283: LD_INT 0
21285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21286: LD_ADDR_VAR 0 1
21290: PUSH
21291: LD_INT 22
21293: PUSH
21294: LD_OWVAR 2
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 30
21305: PUSH
21306: LD_INT 3
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PPUSH
21317: CALL_OW 69
21321: ST_TO_ADDR
// if not tmp then
21322: LD_VAR 0 1
21326: NOT
21327: IFFALSE 21331
// exit ;
21329: GO 21357
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21331: LD_VAR 0 1
21335: PUSH
21336: LD_INT 1
21338: PPUSH
21339: LD_VAR 0 1
21343: PPUSH
21344: CALL_OW 12
21348: ARRAY
21349: PPUSH
21350: LD_INT 1
21352: PPUSH
21353: CALL_OW 234
// end ;
21357: PPOPN 1
21359: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21360: LD_EXP 44
21364: PUSH
21365: LD_EXP 92
21369: AND
21370: IFFALSE 21482
21372: GO 21374
21374: DISABLE
21375: LD_INT 0
21377: PPUSH
21378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21379: LD_ADDR_VAR 0 2
21383: PUSH
21384: LD_INT 22
21386: PUSH
21387: LD_OWVAR 2
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 2
21398: PUSH
21399: LD_INT 30
21401: PUSH
21402: LD_INT 27
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 30
21411: PUSH
21412: LD_INT 26
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 30
21421: PUSH
21422: LD_INT 28
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PPUSH
21439: CALL_OW 69
21443: ST_TO_ADDR
// if not tmp then
21444: LD_VAR 0 2
21448: NOT
21449: IFFALSE 21453
// exit ;
21451: GO 21482
// for i in tmp do
21453: LD_ADDR_VAR 0 1
21457: PUSH
21458: LD_VAR 0 2
21462: PUSH
21463: FOR_IN
21464: IFFALSE 21480
// SetLives ( i , 1 ) ;
21466: LD_VAR 0 1
21470: PPUSH
21471: LD_INT 1
21473: PPUSH
21474: CALL_OW 234
21478: GO 21463
21480: POP
21481: POP
// end ;
21482: PPOPN 2
21484: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21485: LD_EXP 44
21489: PUSH
21490: LD_EXP 93
21494: AND
21495: IFFALSE 21782
21497: GO 21499
21499: DISABLE
21500: LD_INT 0
21502: PPUSH
21503: PPUSH
21504: PPUSH
// begin i := rand ( 1 , 7 ) ;
21505: LD_ADDR_VAR 0 1
21509: PUSH
21510: LD_INT 1
21512: PPUSH
21513: LD_INT 7
21515: PPUSH
21516: CALL_OW 12
21520: ST_TO_ADDR
// case i of 1 :
21521: LD_VAR 0 1
21525: PUSH
21526: LD_INT 1
21528: DOUBLE
21529: EQUAL
21530: IFTRUE 21534
21532: GO 21544
21534: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21535: LD_STRING earthquake(getX(game), 0, 32)
21537: PPUSH
21538: CALL_OW 559
21542: GO 21782
21544: LD_INT 2
21546: DOUBLE
21547: EQUAL
21548: IFTRUE 21552
21550: GO 21566
21552: POP
// begin ToLua ( displayStucuk(); ) ;
21553: LD_STRING displayStucuk();
21555: PPUSH
21556: CALL_OW 559
// ResetFog ;
21560: CALL_OW 335
// end ; 3 :
21564: GO 21782
21566: LD_INT 3
21568: DOUBLE
21569: EQUAL
21570: IFTRUE 21574
21572: GO 21678
21574: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21575: LD_ADDR_VAR 0 2
21579: PUSH
21580: LD_INT 22
21582: PUSH
21583: LD_OWVAR 2
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 25
21594: PUSH
21595: LD_INT 1
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PPUSH
21606: CALL_OW 69
21610: ST_TO_ADDR
// if not tmp then
21611: LD_VAR 0 2
21615: NOT
21616: IFFALSE 21620
// exit ;
21618: GO 21782
// un := tmp [ rand ( 1 , tmp ) ] ;
21620: LD_ADDR_VAR 0 3
21624: PUSH
21625: LD_VAR 0 2
21629: PUSH
21630: LD_INT 1
21632: PPUSH
21633: LD_VAR 0 2
21637: PPUSH
21638: CALL_OW 12
21642: ARRAY
21643: ST_TO_ADDR
// if Crawls ( un ) then
21644: LD_VAR 0 3
21648: PPUSH
21649: CALL_OW 318
21653: IFFALSE 21664
// ComWalk ( un ) ;
21655: LD_VAR 0 3
21659: PPUSH
21660: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21664: LD_VAR 0 3
21668: PPUSH
21669: LD_INT 8
21671: PPUSH
21672: CALL_OW 336
// end ; 4 :
21676: GO 21782
21678: LD_INT 4
21680: DOUBLE
21681: EQUAL
21682: IFTRUE 21686
21684: GO 21760
21686: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21687: LD_ADDR_VAR 0 2
21691: PUSH
21692: LD_INT 22
21694: PUSH
21695: LD_OWVAR 2
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 30
21706: PUSH
21707: LD_INT 29
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PPUSH
21718: CALL_OW 69
21722: ST_TO_ADDR
// if not tmp then
21723: LD_VAR 0 2
21727: NOT
21728: IFFALSE 21732
// exit ;
21730: GO 21782
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21732: LD_VAR 0 2
21736: PUSH
21737: LD_INT 1
21739: ARRAY
21740: PPUSH
21741: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21745: LD_VAR 0 2
21749: PUSH
21750: LD_INT 1
21752: ARRAY
21753: PPUSH
21754: CALL_OW 65
// end ; 5 .. 7 :
21758: GO 21782
21760: LD_INT 5
21762: DOUBLE
21763: GREATEREQUAL
21764: IFFALSE 21772
21766: LD_INT 7
21768: DOUBLE
21769: LESSEQUAL
21770: IFTRUE 21774
21772: GO 21781
21774: POP
// StreamSibBomb ; end ;
21775: CALL 18019 0 0
21779: GO 21782
21781: POP
// end ;
21782: PPOPN 3
21784: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21785: LD_EXP 44
21789: PUSH
21790: LD_EXP 94
21794: AND
21795: IFFALSE 21951
21797: GO 21799
21799: DISABLE
21800: LD_INT 0
21802: PPUSH
21803: PPUSH
21804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21805: LD_ADDR_VAR 0 2
21809: PUSH
21810: LD_INT 81
21812: PUSH
21813: LD_OWVAR 2
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 2
21824: PUSH
21825: LD_INT 21
21827: PUSH
21828: LD_INT 1
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 21
21837: PUSH
21838: LD_INT 2
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: LIST
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PPUSH
21854: CALL_OW 69
21858: ST_TO_ADDR
// if not tmp then
21859: LD_VAR 0 2
21863: NOT
21864: IFFALSE 21868
// exit ;
21866: GO 21951
// p := 0 ;
21868: LD_ADDR_VAR 0 3
21872: PUSH
21873: LD_INT 0
21875: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21876: LD_INT 35
21878: PPUSH
21879: CALL_OW 67
// p := p + 1 ;
21883: LD_ADDR_VAR 0 3
21887: PUSH
21888: LD_VAR 0 3
21892: PUSH
21893: LD_INT 1
21895: PLUS
21896: ST_TO_ADDR
// for i in tmp do
21897: LD_ADDR_VAR 0 1
21901: PUSH
21902: LD_VAR 0 2
21906: PUSH
21907: FOR_IN
21908: IFFALSE 21939
// if GetLives ( i ) < 1000 then
21910: LD_VAR 0 1
21914: PPUSH
21915: CALL_OW 256
21919: PUSH
21920: LD_INT 1000
21922: LESS
21923: IFFALSE 21937
// SetLives ( i , 1000 ) ;
21925: LD_VAR 0 1
21929: PPUSH
21930: LD_INT 1000
21932: PPUSH
21933: CALL_OW 234
21937: GO 21907
21939: POP
21940: POP
// until p > 20 ;
21941: LD_VAR 0 3
21945: PUSH
21946: LD_INT 20
21948: GREATER
21949: IFFALSE 21876
// end ;
21951: PPOPN 3
21953: END
// every 0 0$1 trigger StreamModeActive and sTime do
21954: LD_EXP 44
21958: PUSH
21959: LD_EXP 95
21963: AND
21964: IFFALSE 21999
21966: GO 21968
21968: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21969: LD_INT 28
21971: PPUSH
21972: LD_OWVAR 2
21976: PPUSH
21977: LD_INT 2
21979: PPUSH
21980: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21984: LD_INT 30
21986: PPUSH
21987: LD_OWVAR 2
21991: PPUSH
21992: LD_INT 2
21994: PPUSH
21995: CALL_OW 322
// end ;
21999: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22000: LD_EXP 44
22004: PUSH
22005: LD_EXP 96
22009: AND
22010: IFFALSE 22131
22012: GO 22014
22014: DISABLE
22015: LD_INT 0
22017: PPUSH
22018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22019: LD_ADDR_VAR 0 2
22023: PUSH
22024: LD_INT 22
22026: PUSH
22027: LD_OWVAR 2
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 21
22038: PUSH
22039: LD_INT 1
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 3
22048: PUSH
22049: LD_INT 23
22051: PUSH
22052: LD_INT 0
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: LIST
22067: PPUSH
22068: CALL_OW 69
22072: ST_TO_ADDR
// if not tmp then
22073: LD_VAR 0 2
22077: NOT
22078: IFFALSE 22082
// exit ;
22080: GO 22131
// for i in tmp do
22082: LD_ADDR_VAR 0 1
22086: PUSH
22087: LD_VAR 0 2
22091: PUSH
22092: FOR_IN
22093: IFFALSE 22129
// begin if Crawls ( i ) then
22095: LD_VAR 0 1
22099: PPUSH
22100: CALL_OW 318
22104: IFFALSE 22115
// ComWalk ( i ) ;
22106: LD_VAR 0 1
22110: PPUSH
22111: CALL_OW 138
// SetClass ( i , 2 ) ;
22115: LD_VAR 0 1
22119: PPUSH
22120: LD_INT 2
22122: PPUSH
22123: CALL_OW 336
// end ;
22127: GO 22092
22129: POP
22130: POP
// end ;
22131: PPOPN 2
22133: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22134: LD_EXP 44
22138: PUSH
22139: LD_EXP 97
22143: AND
22144: IFFALSE 22432
22146: GO 22148
22148: DISABLE
22149: LD_INT 0
22151: PPUSH
22152: PPUSH
22153: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22154: LD_OWVAR 2
22158: PPUSH
22159: LD_INT 9
22161: PPUSH
22162: LD_INT 1
22164: PPUSH
22165: LD_INT 1
22167: PPUSH
22168: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22172: LD_INT 9
22174: PPUSH
22175: LD_OWVAR 2
22179: PPUSH
22180: CALL_OW 343
// uc_side := 9 ;
22184: LD_ADDR_OWVAR 20
22188: PUSH
22189: LD_INT 9
22191: ST_TO_ADDR
// uc_nation := 2 ;
22192: LD_ADDR_OWVAR 21
22196: PUSH
22197: LD_INT 2
22199: ST_TO_ADDR
// hc_name := Dark Warrior ;
22200: LD_ADDR_OWVAR 26
22204: PUSH
22205: LD_STRING Dark Warrior
22207: ST_TO_ADDR
// hc_gallery :=  ;
22208: LD_ADDR_OWVAR 33
22212: PUSH
22213: LD_STRING 
22215: ST_TO_ADDR
// hc_noskilllimit := true ;
22216: LD_ADDR_OWVAR 76
22220: PUSH
22221: LD_INT 1
22223: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22224: LD_ADDR_OWVAR 31
22228: PUSH
22229: LD_INT 30
22231: PUSH
22232: LD_INT 30
22234: PUSH
22235: LD_INT 30
22237: PUSH
22238: LD_INT 30
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: ST_TO_ADDR
// un := CreateHuman ;
22247: LD_ADDR_VAR 0 3
22251: PUSH
22252: CALL_OW 44
22256: ST_TO_ADDR
// hc_noskilllimit := false ;
22257: LD_ADDR_OWVAR 76
22261: PUSH
22262: LD_INT 0
22264: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22265: LD_VAR 0 3
22269: PPUSH
22270: LD_INT 1
22272: PPUSH
22273: CALL_OW 51
// ToLua ( playRanger() ) ;
22277: LD_STRING playRanger()
22279: PPUSH
22280: CALL_OW 559
// p := 0 ;
22284: LD_ADDR_VAR 0 2
22288: PUSH
22289: LD_INT 0
22291: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22292: LD_INT 35
22294: PPUSH
22295: CALL_OW 67
// p := p + 1 ;
22299: LD_ADDR_VAR 0 2
22303: PUSH
22304: LD_VAR 0 2
22308: PUSH
22309: LD_INT 1
22311: PLUS
22312: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22313: LD_VAR 0 3
22317: PPUSH
22318: CALL_OW 256
22322: PUSH
22323: LD_INT 1000
22325: LESS
22326: IFFALSE 22340
// SetLives ( un , 1000 ) ;
22328: LD_VAR 0 3
22332: PPUSH
22333: LD_INT 1000
22335: PPUSH
22336: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22340: LD_VAR 0 3
22344: PPUSH
22345: LD_INT 81
22347: PUSH
22348: LD_OWVAR 2
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 91
22359: PUSH
22360: LD_VAR 0 3
22364: PUSH
22365: LD_INT 30
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: LIST
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PPUSH
22377: CALL_OW 69
22381: PPUSH
22382: LD_VAR 0 3
22386: PPUSH
22387: CALL_OW 74
22391: PPUSH
22392: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22396: LD_VAR 0 2
22400: PUSH
22401: LD_INT 80
22403: GREATER
22404: PUSH
22405: LD_VAR 0 3
22409: PPUSH
22410: CALL_OW 301
22414: OR
22415: IFFALSE 22292
// if un then
22417: LD_VAR 0 3
22421: IFFALSE 22432
// RemoveUnit ( un ) ;
22423: LD_VAR 0 3
22427: PPUSH
22428: CALL_OW 64
// end ;
22432: PPOPN 3
22434: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22435: LD_EXP 98
22439: IFFALSE 22555
22441: GO 22443
22443: DISABLE
22444: LD_INT 0
22446: PPUSH
22447: PPUSH
22448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22449: LD_ADDR_VAR 0 2
22453: PUSH
22454: LD_INT 81
22456: PUSH
22457: LD_OWVAR 2
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 21
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PPUSH
22480: CALL_OW 69
22484: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22485: LD_STRING playComputer()
22487: PPUSH
22488: CALL_OW 559
// if not tmp then
22492: LD_VAR 0 2
22496: NOT
22497: IFFALSE 22501
// exit ;
22499: GO 22555
// for i in tmp do
22501: LD_ADDR_VAR 0 1
22505: PUSH
22506: LD_VAR 0 2
22510: PUSH
22511: FOR_IN
22512: IFFALSE 22553
// for j := 1 to 4 do
22514: LD_ADDR_VAR 0 3
22518: PUSH
22519: DOUBLE
22520: LD_INT 1
22522: DEC
22523: ST_TO_ADDR
22524: LD_INT 4
22526: PUSH
22527: FOR_TO
22528: IFFALSE 22549
// SetSkill ( i , j , 10 ) ;
22530: LD_VAR 0 1
22534: PPUSH
22535: LD_VAR 0 3
22539: PPUSH
22540: LD_INT 10
22542: PPUSH
22543: CALL_OW 237
22547: GO 22527
22549: POP
22550: POP
22551: GO 22511
22553: POP
22554: POP
// end ;
22555: PPOPN 3
22557: END
// every 0 0$1 trigger s30 do var i , tmp ;
22558: LD_EXP 99
22562: IFFALSE 22631
22564: GO 22566
22566: DISABLE
22567: LD_INT 0
22569: PPUSH
22570: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22571: LD_ADDR_VAR 0 2
22575: PUSH
22576: LD_INT 22
22578: PUSH
22579: LD_OWVAR 2
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PPUSH
22588: CALL_OW 69
22592: ST_TO_ADDR
// if not tmp then
22593: LD_VAR 0 2
22597: NOT
22598: IFFALSE 22602
// exit ;
22600: GO 22631
// for i in tmp do
22602: LD_ADDR_VAR 0 1
22606: PUSH
22607: LD_VAR 0 2
22611: PUSH
22612: FOR_IN
22613: IFFALSE 22629
// SetLives ( i , 300 ) ;
22615: LD_VAR 0 1
22619: PPUSH
22620: LD_INT 300
22622: PPUSH
22623: CALL_OW 234
22627: GO 22612
22629: POP
22630: POP
// end ;
22631: PPOPN 2
22633: END
// every 0 0$1 trigger s60 do var i , tmp ;
22634: LD_EXP 100
22638: IFFALSE 22707
22640: GO 22642
22642: DISABLE
22643: LD_INT 0
22645: PPUSH
22646: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22647: LD_ADDR_VAR 0 2
22651: PUSH
22652: LD_INT 22
22654: PUSH
22655: LD_OWVAR 2
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PPUSH
22664: CALL_OW 69
22668: ST_TO_ADDR
// if not tmp then
22669: LD_VAR 0 2
22673: NOT
22674: IFFALSE 22678
// exit ;
22676: GO 22707
// for i in tmp do
22678: LD_ADDR_VAR 0 1
22682: PUSH
22683: LD_VAR 0 2
22687: PUSH
22688: FOR_IN
22689: IFFALSE 22705
// SetLives ( i , 600 ) ;
22691: LD_VAR 0 1
22695: PPUSH
22696: LD_INT 600
22698: PPUSH
22699: CALL_OW 234
22703: GO 22688
22705: POP
22706: POP
// end ;
22707: PPOPN 2
22709: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22710: LD_INT 0
22712: PPUSH
// case cmd of 301 :
22713: LD_VAR 0 1
22717: PUSH
22718: LD_INT 301
22720: DOUBLE
22721: EQUAL
22722: IFTRUE 22726
22724: GO 22758
22726: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22727: LD_VAR 0 6
22731: PPUSH
22732: LD_VAR 0 7
22736: PPUSH
22737: LD_VAR 0 8
22741: PPUSH
22742: LD_VAR 0 4
22746: PPUSH
22747: LD_VAR 0 5
22751: PPUSH
22752: CALL 23959 0 5
22756: GO 22879
22758: LD_INT 302
22760: DOUBLE
22761: EQUAL
22762: IFTRUE 22766
22764: GO 22803
22766: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22767: LD_VAR 0 6
22771: PPUSH
22772: LD_VAR 0 7
22776: PPUSH
22777: LD_VAR 0 8
22781: PPUSH
22782: LD_VAR 0 9
22786: PPUSH
22787: LD_VAR 0 4
22791: PPUSH
22792: LD_VAR 0 5
22796: PPUSH
22797: CALL 24050 0 6
22801: GO 22879
22803: LD_INT 303
22805: DOUBLE
22806: EQUAL
22807: IFTRUE 22811
22809: GO 22848
22811: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22812: LD_VAR 0 6
22816: PPUSH
22817: LD_VAR 0 7
22821: PPUSH
22822: LD_VAR 0 8
22826: PPUSH
22827: LD_VAR 0 9
22831: PPUSH
22832: LD_VAR 0 4
22836: PPUSH
22837: LD_VAR 0 5
22841: PPUSH
22842: CALL 22884 0 6
22846: GO 22879
22848: LD_INT 304
22850: DOUBLE
22851: EQUAL
22852: IFTRUE 22856
22854: GO 22878
22856: POP
// hHackTeleport ( unit , x , y ) ; end ;
22857: LD_VAR 0 2
22861: PPUSH
22862: LD_VAR 0 4
22866: PPUSH
22867: LD_VAR 0 5
22871: PPUSH
22872: CALL 24643 0 3
22876: GO 22879
22878: POP
// end ;
22879: LD_VAR 0 12
22883: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22884: LD_INT 0
22886: PPUSH
22887: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22888: LD_VAR 0 1
22892: PUSH
22893: LD_INT 1
22895: LESS
22896: PUSH
22897: LD_VAR 0 1
22901: PUSH
22902: LD_INT 3
22904: GREATER
22905: OR
22906: PUSH
22907: LD_VAR 0 5
22911: PPUSH
22912: LD_VAR 0 6
22916: PPUSH
22917: CALL_OW 428
22921: OR
22922: IFFALSE 22926
// exit ;
22924: GO 23646
// uc_side := your_side ;
22926: LD_ADDR_OWVAR 20
22930: PUSH
22931: LD_OWVAR 2
22935: ST_TO_ADDR
// uc_nation := nation ;
22936: LD_ADDR_OWVAR 21
22940: PUSH
22941: LD_VAR 0 1
22945: ST_TO_ADDR
// bc_level = 1 ;
22946: LD_ADDR_OWVAR 43
22950: PUSH
22951: LD_INT 1
22953: ST_TO_ADDR
// case btype of 1 :
22954: LD_VAR 0 2
22958: PUSH
22959: LD_INT 1
22961: DOUBLE
22962: EQUAL
22963: IFTRUE 22967
22965: GO 22978
22967: POP
// bc_type := b_depot ; 2 :
22968: LD_ADDR_OWVAR 42
22972: PUSH
22973: LD_INT 0
22975: ST_TO_ADDR
22976: GO 23590
22978: LD_INT 2
22980: DOUBLE
22981: EQUAL
22982: IFTRUE 22986
22984: GO 22997
22986: POP
// bc_type := b_warehouse ; 3 :
22987: LD_ADDR_OWVAR 42
22991: PUSH
22992: LD_INT 1
22994: ST_TO_ADDR
22995: GO 23590
22997: LD_INT 3
22999: DOUBLE
23000: EQUAL
23001: IFTRUE 23005
23003: GO 23016
23005: POP
// bc_type := b_lab ; 4 .. 9 :
23006: LD_ADDR_OWVAR 42
23010: PUSH
23011: LD_INT 6
23013: ST_TO_ADDR
23014: GO 23590
23016: LD_INT 4
23018: DOUBLE
23019: GREATEREQUAL
23020: IFFALSE 23028
23022: LD_INT 9
23024: DOUBLE
23025: LESSEQUAL
23026: IFTRUE 23030
23028: GO 23082
23030: POP
// begin bc_type := b_lab_half ;
23031: LD_ADDR_OWVAR 42
23035: PUSH
23036: LD_INT 7
23038: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23039: LD_ADDR_OWVAR 44
23043: PUSH
23044: LD_INT 10
23046: PUSH
23047: LD_INT 11
23049: PUSH
23050: LD_INT 12
23052: PUSH
23053: LD_INT 15
23055: PUSH
23056: LD_INT 14
23058: PUSH
23059: LD_INT 13
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: PUSH
23070: LD_VAR 0 2
23074: PUSH
23075: LD_INT 3
23077: MINUS
23078: ARRAY
23079: ST_TO_ADDR
// end ; 10 .. 13 :
23080: GO 23590
23082: LD_INT 10
23084: DOUBLE
23085: GREATEREQUAL
23086: IFFALSE 23094
23088: LD_INT 13
23090: DOUBLE
23091: LESSEQUAL
23092: IFTRUE 23096
23094: GO 23173
23096: POP
// begin bc_type := b_lab_full ;
23097: LD_ADDR_OWVAR 42
23101: PUSH
23102: LD_INT 8
23104: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23105: LD_ADDR_OWVAR 44
23109: PUSH
23110: LD_INT 10
23112: PUSH
23113: LD_INT 12
23115: PUSH
23116: LD_INT 14
23118: PUSH
23119: LD_INT 13
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: PUSH
23128: LD_VAR 0 2
23132: PUSH
23133: LD_INT 9
23135: MINUS
23136: ARRAY
23137: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23138: LD_ADDR_OWVAR 45
23142: PUSH
23143: LD_INT 11
23145: PUSH
23146: LD_INT 15
23148: PUSH
23149: LD_INT 12
23151: PUSH
23152: LD_INT 15
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: PUSH
23161: LD_VAR 0 2
23165: PUSH
23166: LD_INT 9
23168: MINUS
23169: ARRAY
23170: ST_TO_ADDR
// end ; 14 :
23171: GO 23590
23173: LD_INT 14
23175: DOUBLE
23176: EQUAL
23177: IFTRUE 23181
23179: GO 23192
23181: POP
// bc_type := b_workshop ; 15 :
23182: LD_ADDR_OWVAR 42
23186: PUSH
23187: LD_INT 2
23189: ST_TO_ADDR
23190: GO 23590
23192: LD_INT 15
23194: DOUBLE
23195: EQUAL
23196: IFTRUE 23200
23198: GO 23211
23200: POP
// bc_type := b_factory ; 16 :
23201: LD_ADDR_OWVAR 42
23205: PUSH
23206: LD_INT 3
23208: ST_TO_ADDR
23209: GO 23590
23211: LD_INT 16
23213: DOUBLE
23214: EQUAL
23215: IFTRUE 23219
23217: GO 23230
23219: POP
// bc_type := b_ext_gun ; 17 :
23220: LD_ADDR_OWVAR 42
23224: PUSH
23225: LD_INT 17
23227: ST_TO_ADDR
23228: GO 23590
23230: LD_INT 17
23232: DOUBLE
23233: EQUAL
23234: IFTRUE 23238
23236: GO 23266
23238: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23239: LD_ADDR_OWVAR 42
23243: PUSH
23244: LD_INT 19
23246: PUSH
23247: LD_INT 23
23249: PUSH
23250: LD_INT 19
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: LIST
23257: PUSH
23258: LD_VAR 0 1
23262: ARRAY
23263: ST_TO_ADDR
23264: GO 23590
23266: LD_INT 18
23268: DOUBLE
23269: EQUAL
23270: IFTRUE 23274
23272: GO 23285
23274: POP
// bc_type := b_ext_radar ; 19 :
23275: LD_ADDR_OWVAR 42
23279: PUSH
23280: LD_INT 20
23282: ST_TO_ADDR
23283: GO 23590
23285: LD_INT 19
23287: DOUBLE
23288: EQUAL
23289: IFTRUE 23293
23291: GO 23304
23293: POP
// bc_type := b_ext_radio ; 20 :
23294: LD_ADDR_OWVAR 42
23298: PUSH
23299: LD_INT 22
23301: ST_TO_ADDR
23302: GO 23590
23304: LD_INT 20
23306: DOUBLE
23307: EQUAL
23308: IFTRUE 23312
23310: GO 23323
23312: POP
// bc_type := b_ext_siberium ; 21 :
23313: LD_ADDR_OWVAR 42
23317: PUSH
23318: LD_INT 21
23320: ST_TO_ADDR
23321: GO 23590
23323: LD_INT 21
23325: DOUBLE
23326: EQUAL
23327: IFTRUE 23331
23329: GO 23342
23331: POP
// bc_type := b_ext_computer ; 22 :
23332: LD_ADDR_OWVAR 42
23336: PUSH
23337: LD_INT 24
23339: ST_TO_ADDR
23340: GO 23590
23342: LD_INT 22
23344: DOUBLE
23345: EQUAL
23346: IFTRUE 23350
23348: GO 23361
23350: POP
// bc_type := b_ext_track ; 23 :
23351: LD_ADDR_OWVAR 42
23355: PUSH
23356: LD_INT 16
23358: ST_TO_ADDR
23359: GO 23590
23361: LD_INT 23
23363: DOUBLE
23364: EQUAL
23365: IFTRUE 23369
23367: GO 23380
23369: POP
// bc_type := b_ext_laser ; 24 :
23370: LD_ADDR_OWVAR 42
23374: PUSH
23375: LD_INT 25
23377: ST_TO_ADDR
23378: GO 23590
23380: LD_INT 24
23382: DOUBLE
23383: EQUAL
23384: IFTRUE 23388
23386: GO 23399
23388: POP
// bc_type := b_control_tower ; 25 :
23389: LD_ADDR_OWVAR 42
23393: PUSH
23394: LD_INT 36
23396: ST_TO_ADDR
23397: GO 23590
23399: LD_INT 25
23401: DOUBLE
23402: EQUAL
23403: IFTRUE 23407
23405: GO 23418
23407: POP
// bc_type := b_breastwork ; 26 :
23408: LD_ADDR_OWVAR 42
23412: PUSH
23413: LD_INT 31
23415: ST_TO_ADDR
23416: GO 23590
23418: LD_INT 26
23420: DOUBLE
23421: EQUAL
23422: IFTRUE 23426
23424: GO 23437
23426: POP
// bc_type := b_bunker ; 27 :
23427: LD_ADDR_OWVAR 42
23431: PUSH
23432: LD_INT 32
23434: ST_TO_ADDR
23435: GO 23590
23437: LD_INT 27
23439: DOUBLE
23440: EQUAL
23441: IFTRUE 23445
23443: GO 23456
23445: POP
// bc_type := b_turret ; 28 :
23446: LD_ADDR_OWVAR 42
23450: PUSH
23451: LD_INT 33
23453: ST_TO_ADDR
23454: GO 23590
23456: LD_INT 28
23458: DOUBLE
23459: EQUAL
23460: IFTRUE 23464
23462: GO 23475
23464: POP
// bc_type := b_armoury ; 29 :
23465: LD_ADDR_OWVAR 42
23469: PUSH
23470: LD_INT 4
23472: ST_TO_ADDR
23473: GO 23590
23475: LD_INT 29
23477: DOUBLE
23478: EQUAL
23479: IFTRUE 23483
23481: GO 23494
23483: POP
// bc_type := b_barracks ; 30 :
23484: LD_ADDR_OWVAR 42
23488: PUSH
23489: LD_INT 5
23491: ST_TO_ADDR
23492: GO 23590
23494: LD_INT 30
23496: DOUBLE
23497: EQUAL
23498: IFTRUE 23502
23500: GO 23513
23502: POP
// bc_type := b_solar_power ; 31 :
23503: LD_ADDR_OWVAR 42
23507: PUSH
23508: LD_INT 27
23510: ST_TO_ADDR
23511: GO 23590
23513: LD_INT 31
23515: DOUBLE
23516: EQUAL
23517: IFTRUE 23521
23519: GO 23532
23521: POP
// bc_type := b_oil_power ; 32 :
23522: LD_ADDR_OWVAR 42
23526: PUSH
23527: LD_INT 26
23529: ST_TO_ADDR
23530: GO 23590
23532: LD_INT 32
23534: DOUBLE
23535: EQUAL
23536: IFTRUE 23540
23538: GO 23551
23540: POP
// bc_type := b_siberite_power ; 33 :
23541: LD_ADDR_OWVAR 42
23545: PUSH
23546: LD_INT 28
23548: ST_TO_ADDR
23549: GO 23590
23551: LD_INT 33
23553: DOUBLE
23554: EQUAL
23555: IFTRUE 23559
23557: GO 23570
23559: POP
// bc_type := b_oil_mine ; 34 :
23560: LD_ADDR_OWVAR 42
23564: PUSH
23565: LD_INT 29
23567: ST_TO_ADDR
23568: GO 23590
23570: LD_INT 34
23572: DOUBLE
23573: EQUAL
23574: IFTRUE 23578
23576: GO 23589
23578: POP
// bc_type := b_siberite_mine ; end ;
23579: LD_ADDR_OWVAR 42
23583: PUSH
23584: LD_INT 30
23586: ST_TO_ADDR
23587: GO 23590
23589: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23590: LD_ADDR_VAR 0 8
23594: PUSH
23595: LD_VAR 0 5
23599: PPUSH
23600: LD_VAR 0 6
23604: PPUSH
23605: LD_VAR 0 3
23609: PPUSH
23610: CALL_OW 47
23614: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23615: LD_OWVAR 42
23619: PUSH
23620: LD_INT 32
23622: PUSH
23623: LD_INT 33
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: IN
23630: IFFALSE 23646
// PlaceWeaponTurret ( b , weapon ) ;
23632: LD_VAR 0 8
23636: PPUSH
23637: LD_VAR 0 4
23641: PPUSH
23642: CALL_OW 431
// end ;
23646: LD_VAR 0 7
23650: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23651: LD_INT 0
23653: PPUSH
23654: PPUSH
23655: PPUSH
23656: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23657: LD_ADDR_VAR 0 4
23661: PUSH
23662: LD_INT 22
23664: PUSH
23665: LD_OWVAR 2
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 2
23676: PUSH
23677: LD_INT 30
23679: PUSH
23680: LD_INT 0
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 30
23689: PUSH
23690: LD_INT 1
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: LIST
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PPUSH
23706: CALL_OW 69
23710: ST_TO_ADDR
// if not tmp then
23711: LD_VAR 0 4
23715: NOT
23716: IFFALSE 23720
// exit ;
23718: GO 23779
// for i in tmp do
23720: LD_ADDR_VAR 0 2
23724: PUSH
23725: LD_VAR 0 4
23729: PUSH
23730: FOR_IN
23731: IFFALSE 23777
// for j = 1 to 3 do
23733: LD_ADDR_VAR 0 3
23737: PUSH
23738: DOUBLE
23739: LD_INT 1
23741: DEC
23742: ST_TO_ADDR
23743: LD_INT 3
23745: PUSH
23746: FOR_TO
23747: IFFALSE 23773
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23749: LD_VAR 0 2
23753: PPUSH
23754: CALL_OW 274
23758: PPUSH
23759: LD_VAR 0 3
23763: PPUSH
23764: LD_INT 99999
23766: PPUSH
23767: CALL_OW 277
23771: GO 23746
23773: POP
23774: POP
23775: GO 23730
23777: POP
23778: POP
// end ;
23779: LD_VAR 0 1
23783: RET
// export function hHackSetLevel10 ; var i , j ; begin
23784: LD_INT 0
23786: PPUSH
23787: PPUSH
23788: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23789: LD_ADDR_VAR 0 2
23793: PUSH
23794: LD_INT 21
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PPUSH
23804: CALL_OW 69
23808: PUSH
23809: FOR_IN
23810: IFFALSE 23862
// if IsSelected ( i ) then
23812: LD_VAR 0 2
23816: PPUSH
23817: CALL_OW 306
23821: IFFALSE 23860
// begin for j := 1 to 4 do
23823: LD_ADDR_VAR 0 3
23827: PUSH
23828: DOUBLE
23829: LD_INT 1
23831: DEC
23832: ST_TO_ADDR
23833: LD_INT 4
23835: PUSH
23836: FOR_TO
23837: IFFALSE 23858
// SetSkill ( i , j , 10 ) ;
23839: LD_VAR 0 2
23843: PPUSH
23844: LD_VAR 0 3
23848: PPUSH
23849: LD_INT 10
23851: PPUSH
23852: CALL_OW 237
23856: GO 23836
23858: POP
23859: POP
// end ;
23860: GO 23809
23862: POP
23863: POP
// end ;
23864: LD_VAR 0 1
23868: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23869: LD_INT 0
23871: PPUSH
23872: PPUSH
23873: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23874: LD_ADDR_VAR 0 2
23878: PUSH
23879: LD_INT 22
23881: PUSH
23882: LD_OWVAR 2
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 21
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PPUSH
23905: CALL_OW 69
23909: PUSH
23910: FOR_IN
23911: IFFALSE 23952
// begin for j := 1 to 4 do
23913: LD_ADDR_VAR 0 3
23917: PUSH
23918: DOUBLE
23919: LD_INT 1
23921: DEC
23922: ST_TO_ADDR
23923: LD_INT 4
23925: PUSH
23926: FOR_TO
23927: IFFALSE 23948
// SetSkill ( i , j , 10 ) ;
23929: LD_VAR 0 2
23933: PPUSH
23934: LD_VAR 0 3
23938: PPUSH
23939: LD_INT 10
23941: PPUSH
23942: CALL_OW 237
23946: GO 23926
23948: POP
23949: POP
// end ;
23950: GO 23910
23952: POP
23953: POP
// end ;
23954: LD_VAR 0 1
23958: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23959: LD_INT 0
23961: PPUSH
// uc_side := your_side ;
23962: LD_ADDR_OWVAR 20
23966: PUSH
23967: LD_OWVAR 2
23971: ST_TO_ADDR
// uc_nation := nation ;
23972: LD_ADDR_OWVAR 21
23976: PUSH
23977: LD_VAR 0 1
23981: ST_TO_ADDR
// InitHc ;
23982: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23986: LD_INT 0
23988: PPUSH
23989: LD_VAR 0 2
23993: PPUSH
23994: LD_VAR 0 3
23998: PPUSH
23999: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24003: LD_VAR 0 4
24007: PPUSH
24008: LD_VAR 0 5
24012: PPUSH
24013: CALL_OW 428
24017: PUSH
24018: LD_INT 0
24020: EQUAL
24021: IFFALSE 24045
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24023: CALL_OW 44
24027: PPUSH
24028: LD_VAR 0 4
24032: PPUSH
24033: LD_VAR 0 5
24037: PPUSH
24038: LD_INT 1
24040: PPUSH
24041: CALL_OW 48
// end ;
24045: LD_VAR 0 6
24049: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24050: LD_INT 0
24052: PPUSH
24053: PPUSH
// uc_side := your_side ;
24054: LD_ADDR_OWVAR 20
24058: PUSH
24059: LD_OWVAR 2
24063: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24064: LD_VAR 0 1
24068: PUSH
24069: LD_INT 1
24071: PUSH
24072: LD_INT 2
24074: PUSH
24075: LD_INT 3
24077: PUSH
24078: LD_INT 4
24080: PUSH
24081: LD_INT 5
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: IN
24091: IFFALSE 24103
// uc_nation := nation_american else
24093: LD_ADDR_OWVAR 21
24097: PUSH
24098: LD_INT 1
24100: ST_TO_ADDR
24101: GO 24146
// if chassis in [ 11 , 12 , 13 , 14 ] then
24103: LD_VAR 0 1
24107: PUSH
24108: LD_INT 11
24110: PUSH
24111: LD_INT 12
24113: PUSH
24114: LD_INT 13
24116: PUSH
24117: LD_INT 14
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: IN
24126: IFFALSE 24138
// uc_nation := nation_arabian else
24128: LD_ADDR_OWVAR 21
24132: PUSH
24133: LD_INT 2
24135: ST_TO_ADDR
24136: GO 24146
// uc_nation := nation_russian ;
24138: LD_ADDR_OWVAR 21
24142: PUSH
24143: LD_INT 3
24145: ST_TO_ADDR
// vc_chassis := chassis ;
24146: LD_ADDR_OWVAR 37
24150: PUSH
24151: LD_VAR 0 1
24155: ST_TO_ADDR
// vc_engine := engine ;
24156: LD_ADDR_OWVAR 39
24160: PUSH
24161: LD_VAR 0 2
24165: ST_TO_ADDR
// vc_control := control ;
24166: LD_ADDR_OWVAR 38
24170: PUSH
24171: LD_VAR 0 3
24175: ST_TO_ADDR
// vc_weapon := weapon ;
24176: LD_ADDR_OWVAR 40
24180: PUSH
24181: LD_VAR 0 4
24185: ST_TO_ADDR
// un := CreateVehicle ;
24186: LD_ADDR_VAR 0 8
24190: PUSH
24191: CALL_OW 45
24195: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24196: LD_VAR 0 8
24200: PPUSH
24201: LD_INT 0
24203: PPUSH
24204: LD_INT 5
24206: PPUSH
24207: CALL_OW 12
24211: PPUSH
24212: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24216: LD_VAR 0 8
24220: PPUSH
24221: LD_VAR 0 5
24225: PPUSH
24226: LD_VAR 0 6
24230: PPUSH
24231: LD_INT 1
24233: PPUSH
24234: CALL_OW 48
// end ;
24238: LD_VAR 0 7
24242: RET
// export hInvincible ; every 1 do
24243: GO 24245
24245: DISABLE
// hInvincible := [ ] ;
24246: LD_ADDR_EXP 101
24250: PUSH
24251: EMPTY
24252: ST_TO_ADDR
24253: END
// every 10 do var i ;
24254: GO 24256
24256: DISABLE
24257: LD_INT 0
24259: PPUSH
// begin enable ;
24260: ENABLE
// if not hInvincible then
24261: LD_EXP 101
24265: NOT
24266: IFFALSE 24270
// exit ;
24268: GO 24314
// for i in hInvincible do
24270: LD_ADDR_VAR 0 1
24274: PUSH
24275: LD_EXP 101
24279: PUSH
24280: FOR_IN
24281: IFFALSE 24312
// if GetLives ( i ) < 1000 then
24283: LD_VAR 0 1
24287: PPUSH
24288: CALL_OW 256
24292: PUSH
24293: LD_INT 1000
24295: LESS
24296: IFFALSE 24310
// SetLives ( i , 1000 ) ;
24298: LD_VAR 0 1
24302: PPUSH
24303: LD_INT 1000
24305: PPUSH
24306: CALL_OW 234
24310: GO 24280
24312: POP
24313: POP
// end ;
24314: PPOPN 1
24316: END
// export function hHackInvincible ; var i ; begin
24317: LD_INT 0
24319: PPUSH
24320: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24321: LD_ADDR_VAR 0 2
24325: PUSH
24326: LD_INT 2
24328: PUSH
24329: LD_INT 21
24331: PUSH
24332: LD_INT 1
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 21
24341: PUSH
24342: LD_INT 2
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: LIST
24353: PPUSH
24354: CALL_OW 69
24358: PUSH
24359: FOR_IN
24360: IFFALSE 24421
// if IsSelected ( i ) then
24362: LD_VAR 0 2
24366: PPUSH
24367: CALL_OW 306
24371: IFFALSE 24419
// begin if i in hInvincible then
24373: LD_VAR 0 2
24377: PUSH
24378: LD_EXP 101
24382: IN
24383: IFFALSE 24403
// hInvincible := hInvincible diff i else
24385: LD_ADDR_EXP 101
24389: PUSH
24390: LD_EXP 101
24394: PUSH
24395: LD_VAR 0 2
24399: DIFF
24400: ST_TO_ADDR
24401: GO 24419
// hInvincible := hInvincible union i ;
24403: LD_ADDR_EXP 101
24407: PUSH
24408: LD_EXP 101
24412: PUSH
24413: LD_VAR 0 2
24417: UNION
24418: ST_TO_ADDR
// end ;
24419: GO 24359
24421: POP
24422: POP
// end ;
24423: LD_VAR 0 1
24427: RET
// export function hHackInvisible ; var i , j ; begin
24428: LD_INT 0
24430: PPUSH
24431: PPUSH
24432: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24433: LD_ADDR_VAR 0 2
24437: PUSH
24438: LD_INT 21
24440: PUSH
24441: LD_INT 1
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PPUSH
24448: CALL_OW 69
24452: PUSH
24453: FOR_IN
24454: IFFALSE 24478
// if IsSelected ( i ) then
24456: LD_VAR 0 2
24460: PPUSH
24461: CALL_OW 306
24465: IFFALSE 24476
// ComForceInvisible ( i ) ;
24467: LD_VAR 0 2
24471: PPUSH
24472: CALL_OW 496
24476: GO 24453
24478: POP
24479: POP
// end ;
24480: LD_VAR 0 1
24484: RET
// export function hHackChangeYourSide ; begin
24485: LD_INT 0
24487: PPUSH
// if your_side = 8 then
24488: LD_OWVAR 2
24492: PUSH
24493: LD_INT 8
24495: EQUAL
24496: IFFALSE 24508
// your_side := 0 else
24498: LD_ADDR_OWVAR 2
24502: PUSH
24503: LD_INT 0
24505: ST_TO_ADDR
24506: GO 24522
// your_side := your_side + 1 ;
24508: LD_ADDR_OWVAR 2
24512: PUSH
24513: LD_OWVAR 2
24517: PUSH
24518: LD_INT 1
24520: PLUS
24521: ST_TO_ADDR
// end ;
24522: LD_VAR 0 1
24526: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24527: LD_INT 0
24529: PPUSH
24530: PPUSH
24531: PPUSH
// for i in all_units do
24532: LD_ADDR_VAR 0 2
24536: PUSH
24537: LD_OWVAR 3
24541: PUSH
24542: FOR_IN
24543: IFFALSE 24621
// if IsSelected ( i ) then
24545: LD_VAR 0 2
24549: PPUSH
24550: CALL_OW 306
24554: IFFALSE 24619
// begin j := GetSide ( i ) ;
24556: LD_ADDR_VAR 0 3
24560: PUSH
24561: LD_VAR 0 2
24565: PPUSH
24566: CALL_OW 255
24570: ST_TO_ADDR
// if j = 8 then
24571: LD_VAR 0 3
24575: PUSH
24576: LD_INT 8
24578: EQUAL
24579: IFFALSE 24591
// j := 0 else
24581: LD_ADDR_VAR 0 3
24585: PUSH
24586: LD_INT 0
24588: ST_TO_ADDR
24589: GO 24605
// j := j + 1 ;
24591: LD_ADDR_VAR 0 3
24595: PUSH
24596: LD_VAR 0 3
24600: PUSH
24601: LD_INT 1
24603: PLUS
24604: ST_TO_ADDR
// SetSide ( i , j ) ;
24605: LD_VAR 0 2
24609: PPUSH
24610: LD_VAR 0 3
24614: PPUSH
24615: CALL_OW 235
// end ;
24619: GO 24542
24621: POP
24622: POP
// end ;
24623: LD_VAR 0 1
24627: RET
// export function hHackFog ; begin
24628: LD_INT 0
24630: PPUSH
// FogOff ( true ) ;
24631: LD_INT 1
24633: PPUSH
24634: CALL_OW 344
// end ;
24638: LD_VAR 0 1
24642: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24643: LD_INT 0
24645: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24646: LD_VAR 0 1
24650: PPUSH
24651: LD_VAR 0 2
24655: PPUSH
24656: LD_VAR 0 3
24660: PPUSH
24661: LD_INT 1
24663: PPUSH
24664: LD_INT 1
24666: PPUSH
24667: CALL_OW 483
// CenterOnXY ( x , y ) ;
24671: LD_VAR 0 2
24675: PPUSH
24676: LD_VAR 0 3
24680: PPUSH
24681: CALL_OW 84
// end ;
24685: LD_VAR 0 4
24689: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24690: LD_INT 0
24692: PPUSH
24693: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24694: LD_VAR 0 1
24698: NOT
24699: PUSH
24700: LD_VAR 0 2
24704: PPUSH
24705: LD_VAR 0 3
24709: PPUSH
24710: CALL_OW 488
24714: NOT
24715: OR
24716: PUSH
24717: LD_VAR 0 1
24721: PPUSH
24722: CALL_OW 266
24726: PUSH
24727: LD_INT 3
24729: NONEQUAL
24730: PUSH
24731: LD_VAR 0 1
24735: PPUSH
24736: CALL_OW 247
24740: PUSH
24741: LD_INT 1
24743: EQUAL
24744: NOT
24745: AND
24746: OR
24747: IFFALSE 24751
// exit ;
24749: GO 24900
// if GetType ( factory ) = unit_human then
24751: LD_VAR 0 1
24755: PPUSH
24756: CALL_OW 247
24760: PUSH
24761: LD_INT 1
24763: EQUAL
24764: IFFALSE 24781
// factory := IsInUnit ( factory ) ;
24766: LD_ADDR_VAR 0 1
24770: PUSH
24771: LD_VAR 0 1
24775: PPUSH
24776: CALL_OW 310
24780: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24781: LD_VAR 0 1
24785: PPUSH
24786: CALL_OW 266
24790: PUSH
24791: LD_INT 3
24793: NONEQUAL
24794: IFFALSE 24798
// exit ;
24796: GO 24900
// if HexInfo ( x , y ) = factory then
24798: LD_VAR 0 2
24802: PPUSH
24803: LD_VAR 0 3
24807: PPUSH
24808: CALL_OW 428
24812: PUSH
24813: LD_VAR 0 1
24817: EQUAL
24818: IFFALSE 24845
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24820: LD_ADDR_EXP 102
24824: PUSH
24825: LD_EXP 102
24829: PPUSH
24830: LD_VAR 0 1
24834: PPUSH
24835: LD_INT 0
24837: PPUSH
24838: CALL_OW 1
24842: ST_TO_ADDR
24843: GO 24896
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24845: LD_ADDR_EXP 102
24849: PUSH
24850: LD_EXP 102
24854: PPUSH
24855: LD_VAR 0 1
24859: PPUSH
24860: LD_VAR 0 1
24864: PPUSH
24865: CALL_OW 255
24869: PUSH
24870: LD_VAR 0 1
24874: PUSH
24875: LD_VAR 0 2
24879: PUSH
24880: LD_VAR 0 3
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: PPUSH
24891: CALL_OW 1
24895: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24896: CALL 24905 0 0
// end ;
24900: LD_VAR 0 4
24904: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24905: LD_INT 0
24907: PPUSH
24908: PPUSH
24909: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24910: LD_STRING resetFactoryWaypoint();
24912: PPUSH
24913: CALL_OW 559
// if factoryWaypoints then
24917: LD_EXP 102
24921: IFFALSE 25047
// begin list := PrepareArray ( factoryWaypoints ) ;
24923: LD_ADDR_VAR 0 3
24927: PUSH
24928: LD_EXP 102
24932: PPUSH
24933: CALL 71679 0 1
24937: ST_TO_ADDR
// for i := 1 to list do
24938: LD_ADDR_VAR 0 2
24942: PUSH
24943: DOUBLE
24944: LD_INT 1
24946: DEC
24947: ST_TO_ADDR
24948: LD_VAR 0 3
24952: PUSH
24953: FOR_TO
24954: IFFALSE 25045
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24956: LD_STRING setFactoryWaypointXY(
24958: PUSH
24959: LD_VAR 0 3
24963: PUSH
24964: LD_VAR 0 2
24968: ARRAY
24969: PUSH
24970: LD_INT 1
24972: ARRAY
24973: STR
24974: PUSH
24975: LD_STRING ,
24977: STR
24978: PUSH
24979: LD_VAR 0 3
24983: PUSH
24984: LD_VAR 0 2
24988: ARRAY
24989: PUSH
24990: LD_INT 2
24992: ARRAY
24993: STR
24994: PUSH
24995: LD_STRING ,
24997: STR
24998: PUSH
24999: LD_VAR 0 3
25003: PUSH
25004: LD_VAR 0 2
25008: ARRAY
25009: PUSH
25010: LD_INT 3
25012: ARRAY
25013: STR
25014: PUSH
25015: LD_STRING ,
25017: STR
25018: PUSH
25019: LD_VAR 0 3
25023: PUSH
25024: LD_VAR 0 2
25028: ARRAY
25029: PUSH
25030: LD_INT 4
25032: ARRAY
25033: STR
25034: PUSH
25035: LD_STRING )
25037: STR
25038: PPUSH
25039: CALL_OW 559
25043: GO 24953
25045: POP
25046: POP
// end ; end ;
25047: LD_VAR 0 1
25051: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25052: LD_INT 0
25054: PPUSH
// if HexInfo ( x , y ) = warehouse then
25055: LD_VAR 0 2
25059: PPUSH
25060: LD_VAR 0 3
25064: PPUSH
25065: CALL_OW 428
25069: PUSH
25070: LD_VAR 0 1
25074: EQUAL
25075: IFFALSE 25102
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25077: LD_ADDR_EXP 103
25081: PUSH
25082: LD_EXP 103
25086: PPUSH
25087: LD_VAR 0 1
25091: PPUSH
25092: LD_INT 0
25094: PPUSH
25095: CALL_OW 1
25099: ST_TO_ADDR
25100: GO 25153
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25102: LD_ADDR_EXP 103
25106: PUSH
25107: LD_EXP 103
25111: PPUSH
25112: LD_VAR 0 1
25116: PPUSH
25117: LD_VAR 0 1
25121: PPUSH
25122: CALL_OW 255
25126: PUSH
25127: LD_VAR 0 1
25131: PUSH
25132: LD_VAR 0 2
25136: PUSH
25137: LD_VAR 0 3
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: PPUSH
25148: CALL_OW 1
25152: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25153: CALL 25162 0 0
// end ;
25157: LD_VAR 0 4
25161: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25162: LD_INT 0
25164: PPUSH
25165: PPUSH
25166: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25167: LD_STRING resetWarehouseGatheringPoints();
25169: PPUSH
25170: CALL_OW 559
// if warehouseGatheringPoints then
25174: LD_EXP 103
25178: IFFALSE 25304
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25180: LD_ADDR_VAR 0 3
25184: PUSH
25185: LD_EXP 103
25189: PPUSH
25190: CALL 71679 0 1
25194: ST_TO_ADDR
// for i := 1 to list do
25195: LD_ADDR_VAR 0 2
25199: PUSH
25200: DOUBLE
25201: LD_INT 1
25203: DEC
25204: ST_TO_ADDR
25205: LD_VAR 0 3
25209: PUSH
25210: FOR_TO
25211: IFFALSE 25302
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25213: LD_STRING setWarehouseGatheringPointXY(
25215: PUSH
25216: LD_VAR 0 3
25220: PUSH
25221: LD_VAR 0 2
25225: ARRAY
25226: PUSH
25227: LD_INT 1
25229: ARRAY
25230: STR
25231: PUSH
25232: LD_STRING ,
25234: STR
25235: PUSH
25236: LD_VAR 0 3
25240: PUSH
25241: LD_VAR 0 2
25245: ARRAY
25246: PUSH
25247: LD_INT 2
25249: ARRAY
25250: STR
25251: PUSH
25252: LD_STRING ,
25254: STR
25255: PUSH
25256: LD_VAR 0 3
25260: PUSH
25261: LD_VAR 0 2
25265: ARRAY
25266: PUSH
25267: LD_INT 3
25269: ARRAY
25270: STR
25271: PUSH
25272: LD_STRING ,
25274: STR
25275: PUSH
25276: LD_VAR 0 3
25280: PUSH
25281: LD_VAR 0 2
25285: ARRAY
25286: PUSH
25287: LD_INT 4
25289: ARRAY
25290: STR
25291: PUSH
25292: LD_STRING )
25294: STR
25295: PPUSH
25296: CALL_OW 559
25300: GO 25210
25302: POP
25303: POP
// end ; end ;
25304: LD_VAR 0 1
25308: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25309: LD_EXP 103
25313: IFFALSE 25998
25315: GO 25317
25317: DISABLE
25318: LD_INT 0
25320: PPUSH
25321: PPUSH
25322: PPUSH
25323: PPUSH
25324: PPUSH
25325: PPUSH
25326: PPUSH
25327: PPUSH
25328: PPUSH
// begin enable ;
25329: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25330: LD_ADDR_VAR 0 3
25334: PUSH
25335: LD_EXP 103
25339: PPUSH
25340: CALL 71679 0 1
25344: ST_TO_ADDR
// if not list then
25345: LD_VAR 0 3
25349: NOT
25350: IFFALSE 25354
// exit ;
25352: GO 25998
// for i := 1 to list do
25354: LD_ADDR_VAR 0 1
25358: PUSH
25359: DOUBLE
25360: LD_INT 1
25362: DEC
25363: ST_TO_ADDR
25364: LD_VAR 0 3
25368: PUSH
25369: FOR_TO
25370: IFFALSE 25996
// begin depot := list [ i ] [ 2 ] ;
25372: LD_ADDR_VAR 0 8
25376: PUSH
25377: LD_VAR 0 3
25381: PUSH
25382: LD_VAR 0 1
25386: ARRAY
25387: PUSH
25388: LD_INT 2
25390: ARRAY
25391: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25392: LD_ADDR_VAR 0 5
25396: PUSH
25397: LD_VAR 0 3
25401: PUSH
25402: LD_VAR 0 1
25406: ARRAY
25407: PUSH
25408: LD_INT 1
25410: ARRAY
25411: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25412: LD_VAR 0 8
25416: PPUSH
25417: CALL_OW 301
25421: PUSH
25422: LD_VAR 0 5
25426: PUSH
25427: LD_VAR 0 8
25431: PPUSH
25432: CALL_OW 255
25436: NONEQUAL
25437: OR
25438: IFFALSE 25467
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25440: LD_ADDR_EXP 103
25444: PUSH
25445: LD_EXP 103
25449: PPUSH
25450: LD_VAR 0 8
25454: PPUSH
25455: LD_INT 0
25457: PPUSH
25458: CALL_OW 1
25462: ST_TO_ADDR
// exit ;
25463: POP
25464: POP
25465: GO 25998
// end ; x := list [ i ] [ 3 ] ;
25467: LD_ADDR_VAR 0 6
25471: PUSH
25472: LD_VAR 0 3
25476: PUSH
25477: LD_VAR 0 1
25481: ARRAY
25482: PUSH
25483: LD_INT 3
25485: ARRAY
25486: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25487: LD_ADDR_VAR 0 7
25491: PUSH
25492: LD_VAR 0 3
25496: PUSH
25497: LD_VAR 0 1
25501: ARRAY
25502: PUSH
25503: LD_INT 4
25505: ARRAY
25506: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25507: LD_ADDR_VAR 0 9
25511: PUSH
25512: LD_VAR 0 6
25516: PPUSH
25517: LD_VAR 0 7
25521: PPUSH
25522: LD_INT 16
25524: PPUSH
25525: CALL 70267 0 3
25529: ST_TO_ADDR
// if not cratesNearbyPoint then
25530: LD_VAR 0 9
25534: NOT
25535: IFFALSE 25541
// exit ;
25537: POP
25538: POP
25539: GO 25998
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25541: LD_ADDR_VAR 0 4
25545: PUSH
25546: LD_INT 22
25548: PUSH
25549: LD_VAR 0 5
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 3
25560: PUSH
25561: LD_INT 60
25563: PUSH
25564: EMPTY
25565: LIST
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 91
25573: PUSH
25574: LD_VAR 0 8
25578: PUSH
25579: LD_INT 6
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 2
25589: PUSH
25590: LD_INT 25
25592: PUSH
25593: LD_INT 2
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 25
25602: PUSH
25603: LD_INT 16
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: LIST
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: PPUSH
25621: CALL_OW 69
25625: PUSH
25626: LD_VAR 0 8
25630: PPUSH
25631: CALL_OW 313
25635: PPUSH
25636: LD_INT 3
25638: PUSH
25639: LD_INT 60
25641: PUSH
25642: EMPTY
25643: LIST
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 2
25651: PUSH
25652: LD_INT 25
25654: PUSH
25655: LD_INT 2
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 25
25664: PUSH
25665: LD_INT 16
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: LIST
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PPUSH
25681: CALL_OW 72
25685: UNION
25686: ST_TO_ADDR
// if tmp then
25687: LD_VAR 0 4
25691: IFFALSE 25771
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25693: LD_ADDR_VAR 0 4
25697: PUSH
25698: LD_VAR 0 4
25702: PPUSH
25703: LD_INT 3
25705: PPUSH
25706: CALL 68236 0 2
25710: ST_TO_ADDR
// for j in tmp do
25711: LD_ADDR_VAR 0 2
25715: PUSH
25716: LD_VAR 0 4
25720: PUSH
25721: FOR_IN
25722: IFFALSE 25765
// begin if IsInUnit ( j ) then
25724: LD_VAR 0 2
25728: PPUSH
25729: CALL_OW 310
25733: IFFALSE 25744
// ComExit ( j ) ;
25735: LD_VAR 0 2
25739: PPUSH
25740: CALL 68319 0 1
// AddComCollect ( j , x , y ) ;
25744: LD_VAR 0 2
25748: PPUSH
25749: LD_VAR 0 6
25753: PPUSH
25754: LD_VAR 0 7
25758: PPUSH
25759: CALL_OW 177
// end ;
25763: GO 25721
25765: POP
25766: POP
// exit ;
25767: POP
25768: POP
25769: GO 25998
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25771: LD_ADDR_VAR 0 4
25775: PUSH
25776: LD_INT 22
25778: PUSH
25779: LD_VAR 0 5
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 91
25790: PUSH
25791: LD_VAR 0 8
25795: PUSH
25796: LD_INT 8
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 2
25806: PUSH
25807: LD_INT 34
25809: PUSH
25810: LD_INT 12
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 34
25819: PUSH
25820: LD_INT 51
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 34
25829: PUSH
25830: LD_INT 32
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 34
25839: PUSH
25840: LD_INT 89
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: LIST
25858: PPUSH
25859: CALL_OW 69
25863: ST_TO_ADDR
// if tmp then
25864: LD_VAR 0 4
25868: IFFALSE 25994
// begin for j in tmp do
25870: LD_ADDR_VAR 0 2
25874: PUSH
25875: LD_VAR 0 4
25879: PUSH
25880: FOR_IN
25881: IFFALSE 25992
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25883: LD_VAR 0 2
25887: PPUSH
25888: CALL_OW 262
25892: PUSH
25893: LD_INT 3
25895: EQUAL
25896: PUSH
25897: LD_VAR 0 2
25901: PPUSH
25902: CALL_OW 261
25906: PUSH
25907: LD_INT 20
25909: GREATER
25910: OR
25911: PUSH
25912: LD_VAR 0 2
25916: PPUSH
25917: CALL_OW 314
25921: NOT
25922: AND
25923: PUSH
25924: LD_VAR 0 2
25928: PPUSH
25929: CALL_OW 263
25933: PUSH
25934: LD_INT 1
25936: NONEQUAL
25937: PUSH
25938: LD_VAR 0 2
25942: PPUSH
25943: CALL_OW 311
25947: OR
25948: AND
25949: IFFALSE 25990
// begin ComCollect ( j , x , y ) ;
25951: LD_VAR 0 2
25955: PPUSH
25956: LD_VAR 0 6
25960: PPUSH
25961: LD_VAR 0 7
25965: PPUSH
25966: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25970: LD_VAR 0 2
25974: PPUSH
25975: LD_VAR 0 8
25979: PPUSH
25980: CALL_OW 172
// exit ;
25984: POP
25985: POP
25986: POP
25987: POP
25988: GO 25998
// end ;
25990: GO 25880
25992: POP
25993: POP
// end ; end ;
25994: GO 25369
25996: POP
25997: POP
// end ; end_of_file
25998: PPOPN 9
26000: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26001: LD_VAR 0 1
26005: PUSH
26006: LD_INT 200
26008: DOUBLE
26009: GREATEREQUAL
26010: IFFALSE 26018
26012: LD_INT 299
26014: DOUBLE
26015: LESSEQUAL
26016: IFTRUE 26020
26018: GO 26052
26020: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26021: LD_VAR 0 1
26025: PPUSH
26026: LD_VAR 0 2
26030: PPUSH
26031: LD_VAR 0 3
26035: PPUSH
26036: LD_VAR 0 4
26040: PPUSH
26041: LD_VAR 0 5
26045: PPUSH
26046: CALL 26540 0 5
26050: GO 26129
26052: LD_INT 300
26054: DOUBLE
26055: GREATEREQUAL
26056: IFFALSE 26064
26058: LD_INT 399
26060: DOUBLE
26061: LESSEQUAL
26062: IFTRUE 26066
26064: GO 26128
26066: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26067: LD_VAR 0 1
26071: PPUSH
26072: LD_VAR 0 2
26076: PPUSH
26077: LD_VAR 0 3
26081: PPUSH
26082: LD_VAR 0 4
26086: PPUSH
26087: LD_VAR 0 5
26091: PPUSH
26092: LD_VAR 0 6
26096: PPUSH
26097: LD_VAR 0 7
26101: PPUSH
26102: LD_VAR 0 8
26106: PPUSH
26107: LD_VAR 0 9
26111: PPUSH
26112: LD_VAR 0 10
26116: PPUSH
26117: LD_VAR 0 11
26121: PPUSH
26122: CALL 22710 0 11
26126: GO 26129
26128: POP
// end ;
26129: PPOPN 11
26131: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26132: LD_VAR 0 1
26136: PPUSH
26137: LD_VAR 0 2
26141: PPUSH
26142: LD_VAR 0 3
26146: PPUSH
26147: LD_VAR 0 4
26151: PPUSH
26152: LD_VAR 0 5
26156: PPUSH
26157: CALL 26276 0 5
// end ; end_of_file
26161: PPOPN 5
26163: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26164: LD_INT 0
26166: PPUSH
26167: PPUSH
26168: PPUSH
26169: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26170: LD_VAR 0 1
26174: PPUSH
26175: CALL_OW 264
26179: PUSH
26180: LD_INT 91
26182: EQUAL
26183: IFFALSE 26255
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26185: LD_INT 68
26187: PPUSH
26188: LD_VAR 0 1
26192: PPUSH
26193: CALL_OW 255
26197: PPUSH
26198: CALL_OW 321
26202: PUSH
26203: LD_INT 2
26205: EQUAL
26206: IFFALSE 26218
// eff := 70 else
26208: LD_ADDR_VAR 0 4
26212: PUSH
26213: LD_INT 70
26215: ST_TO_ADDR
26216: GO 26226
// eff := 30 ;
26218: LD_ADDR_VAR 0 4
26222: PUSH
26223: LD_INT 30
26225: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26226: LD_VAR 0 1
26230: PPUSH
26231: CALL_OW 250
26235: PPUSH
26236: LD_VAR 0 1
26240: PPUSH
26241: CALL_OW 251
26245: PPUSH
26246: LD_VAR 0 4
26250: PPUSH
26251: CALL_OW 495
// end ; end ;
26255: LD_VAR 0 2
26259: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26260: LD_INT 0
26262: PPUSH
// end ;
26263: LD_VAR 0 4
26267: RET
// export function SOS_Command ( cmd ) ; begin
26268: LD_INT 0
26270: PPUSH
// end ;
26271: LD_VAR 0 2
26275: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26276: LD_INT 0
26278: PPUSH
// end ;
26279: LD_VAR 0 6
26283: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26284: LD_INT 0
26286: PPUSH
26287: PPUSH
// if not vehicle or not factory then
26288: LD_VAR 0 1
26292: NOT
26293: PUSH
26294: LD_VAR 0 2
26298: NOT
26299: OR
26300: IFFALSE 26304
// exit ;
26302: GO 26535
// if factoryWaypoints >= factory then
26304: LD_EXP 102
26308: PUSH
26309: LD_VAR 0 2
26313: GREATEREQUAL
26314: IFFALSE 26535
// if factoryWaypoints [ factory ] then
26316: LD_EXP 102
26320: PUSH
26321: LD_VAR 0 2
26325: ARRAY
26326: IFFALSE 26535
// begin if GetControl ( vehicle ) = control_manual then
26328: LD_VAR 0 1
26332: PPUSH
26333: CALL_OW 263
26337: PUSH
26338: LD_INT 1
26340: EQUAL
26341: IFFALSE 26422
// begin driver := IsDrivenBy ( vehicle ) ;
26343: LD_ADDR_VAR 0 4
26347: PUSH
26348: LD_VAR 0 1
26352: PPUSH
26353: CALL_OW 311
26357: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26358: LD_VAR 0 4
26362: PPUSH
26363: LD_EXP 102
26367: PUSH
26368: LD_VAR 0 2
26372: ARRAY
26373: PUSH
26374: LD_INT 3
26376: ARRAY
26377: PPUSH
26378: LD_EXP 102
26382: PUSH
26383: LD_VAR 0 2
26387: ARRAY
26388: PUSH
26389: LD_INT 4
26391: ARRAY
26392: PPUSH
26393: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26397: LD_VAR 0 4
26401: PPUSH
26402: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26406: LD_VAR 0 4
26410: PPUSH
26411: LD_VAR 0 2
26415: PPUSH
26416: CALL_OW 180
// end else
26420: GO 26535
// if GetControl ( vehicle ) = control_remote then
26422: LD_VAR 0 1
26426: PPUSH
26427: CALL_OW 263
26431: PUSH
26432: LD_INT 2
26434: EQUAL
26435: IFFALSE 26496
// begin wait ( 0 0$2 ) ;
26437: LD_INT 70
26439: PPUSH
26440: CALL_OW 67
// if Connect ( vehicle ) then
26444: LD_VAR 0 1
26448: PPUSH
26449: CALL 38559 0 1
26453: IFFALSE 26494
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26455: LD_VAR 0 1
26459: PPUSH
26460: LD_EXP 102
26464: PUSH
26465: LD_VAR 0 2
26469: ARRAY
26470: PUSH
26471: LD_INT 3
26473: ARRAY
26474: PPUSH
26475: LD_EXP 102
26479: PUSH
26480: LD_VAR 0 2
26484: ARRAY
26485: PUSH
26486: LD_INT 4
26488: ARRAY
26489: PPUSH
26490: CALL_OW 171
// end else
26494: GO 26535
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26496: LD_VAR 0 1
26500: PPUSH
26501: LD_EXP 102
26505: PUSH
26506: LD_VAR 0 2
26510: ARRAY
26511: PUSH
26512: LD_INT 3
26514: ARRAY
26515: PPUSH
26516: LD_EXP 102
26520: PUSH
26521: LD_VAR 0 2
26525: ARRAY
26526: PUSH
26527: LD_INT 4
26529: ARRAY
26530: PPUSH
26531: CALL_OW 171
// end ; end ;
26535: LD_VAR 0 3
26539: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26540: LD_INT 0
26542: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26543: LD_VAR 0 1
26547: PUSH
26548: LD_INT 250
26550: EQUAL
26551: PUSH
26552: LD_VAR 0 2
26556: PPUSH
26557: CALL_OW 264
26561: PUSH
26562: LD_INT 81
26564: EQUAL
26565: AND
26566: IFFALSE 26587
// MinerPlaceMine ( unit , x , y ) ;
26568: LD_VAR 0 2
26572: PPUSH
26573: LD_VAR 0 4
26577: PPUSH
26578: LD_VAR 0 5
26582: PPUSH
26583: CALL 28972 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26587: LD_VAR 0 1
26591: PUSH
26592: LD_INT 251
26594: EQUAL
26595: PUSH
26596: LD_VAR 0 2
26600: PPUSH
26601: CALL_OW 264
26605: PUSH
26606: LD_INT 81
26608: EQUAL
26609: AND
26610: IFFALSE 26631
// MinerDetonateMine ( unit , x , y ) ;
26612: LD_VAR 0 2
26616: PPUSH
26617: LD_VAR 0 4
26621: PPUSH
26622: LD_VAR 0 5
26626: PPUSH
26627: CALL 29247 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26631: LD_VAR 0 1
26635: PUSH
26636: LD_INT 252
26638: EQUAL
26639: PUSH
26640: LD_VAR 0 2
26644: PPUSH
26645: CALL_OW 264
26649: PUSH
26650: LD_INT 81
26652: EQUAL
26653: AND
26654: IFFALSE 26675
// MinerCreateMinefield ( unit , x , y ) ;
26656: LD_VAR 0 2
26660: PPUSH
26661: LD_VAR 0 4
26665: PPUSH
26666: LD_VAR 0 5
26670: PPUSH
26671: CALL 29664 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26675: LD_VAR 0 1
26679: PUSH
26680: LD_INT 253
26682: EQUAL
26683: PUSH
26684: LD_VAR 0 2
26688: PPUSH
26689: CALL_OW 257
26693: PUSH
26694: LD_INT 5
26696: EQUAL
26697: AND
26698: IFFALSE 26719
// ComBinocular ( unit , x , y ) ;
26700: LD_VAR 0 2
26704: PPUSH
26705: LD_VAR 0 4
26709: PPUSH
26710: LD_VAR 0 5
26714: PPUSH
26715: CALL 30033 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26719: LD_VAR 0 1
26723: PUSH
26724: LD_INT 254
26726: EQUAL
26727: PUSH
26728: LD_VAR 0 2
26732: PPUSH
26733: CALL_OW 264
26737: PUSH
26738: LD_INT 99
26740: EQUAL
26741: AND
26742: PUSH
26743: LD_VAR 0 3
26747: PPUSH
26748: CALL_OW 263
26752: PUSH
26753: LD_INT 3
26755: EQUAL
26756: AND
26757: IFFALSE 26773
// HackDestroyVehicle ( unit , selectedUnit ) ;
26759: LD_VAR 0 2
26763: PPUSH
26764: LD_VAR 0 3
26768: PPUSH
26769: CALL 28336 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26773: LD_VAR 0 1
26777: PUSH
26778: LD_INT 255
26780: EQUAL
26781: PUSH
26782: LD_VAR 0 2
26786: PPUSH
26787: CALL_OW 264
26791: PUSH
26792: LD_INT 14
26794: PUSH
26795: LD_INT 53
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: IN
26802: AND
26803: PUSH
26804: LD_VAR 0 4
26808: PPUSH
26809: LD_VAR 0 5
26813: PPUSH
26814: CALL_OW 488
26818: AND
26819: IFFALSE 26843
// CutTreeXYR ( unit , x , y , 12 ) ;
26821: LD_VAR 0 2
26825: PPUSH
26826: LD_VAR 0 4
26830: PPUSH
26831: LD_VAR 0 5
26835: PPUSH
26836: LD_INT 12
26838: PPUSH
26839: CALL 26906 0 4
// if cmd = 256 then
26843: LD_VAR 0 1
26847: PUSH
26848: LD_INT 256
26850: EQUAL
26851: IFFALSE 26872
// SetFactoryWaypoint ( unit , x , y ) ;
26853: LD_VAR 0 2
26857: PPUSH
26858: LD_VAR 0 4
26862: PPUSH
26863: LD_VAR 0 5
26867: PPUSH
26868: CALL 24690 0 3
// if cmd = 257 then
26872: LD_VAR 0 1
26876: PUSH
26877: LD_INT 257
26879: EQUAL
26880: IFFALSE 26901
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26882: LD_VAR 0 2
26886: PPUSH
26887: LD_VAR 0 4
26891: PPUSH
26892: LD_VAR 0 5
26896: PPUSH
26897: CALL 25052 0 3
// end ;
26901: LD_VAR 0 6
26905: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26906: LD_INT 0
26908: PPUSH
26909: PPUSH
26910: PPUSH
26911: PPUSH
26912: PPUSH
26913: PPUSH
26914: PPUSH
26915: PPUSH
26916: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26917: LD_VAR 0 1
26921: NOT
26922: PUSH
26923: LD_VAR 0 2
26927: PPUSH
26928: LD_VAR 0 3
26932: PPUSH
26933: CALL_OW 488
26937: NOT
26938: OR
26939: PUSH
26940: LD_VAR 0 4
26944: NOT
26945: OR
26946: IFFALSE 26950
// exit ;
26948: GO 27290
// list := [ ] ;
26950: LD_ADDR_VAR 0 13
26954: PUSH
26955: EMPTY
26956: ST_TO_ADDR
// if x - r < 0 then
26957: LD_VAR 0 2
26961: PUSH
26962: LD_VAR 0 4
26966: MINUS
26967: PUSH
26968: LD_INT 0
26970: LESS
26971: IFFALSE 26983
// min_x := 0 else
26973: LD_ADDR_VAR 0 7
26977: PUSH
26978: LD_INT 0
26980: ST_TO_ADDR
26981: GO 26999
// min_x := x - r ;
26983: LD_ADDR_VAR 0 7
26987: PUSH
26988: LD_VAR 0 2
26992: PUSH
26993: LD_VAR 0 4
26997: MINUS
26998: ST_TO_ADDR
// if y - r < 0 then
26999: LD_VAR 0 3
27003: PUSH
27004: LD_VAR 0 4
27008: MINUS
27009: PUSH
27010: LD_INT 0
27012: LESS
27013: IFFALSE 27025
// min_y := 0 else
27015: LD_ADDR_VAR 0 8
27019: PUSH
27020: LD_INT 0
27022: ST_TO_ADDR
27023: GO 27041
// min_y := y - r ;
27025: LD_ADDR_VAR 0 8
27029: PUSH
27030: LD_VAR 0 3
27034: PUSH
27035: LD_VAR 0 4
27039: MINUS
27040: ST_TO_ADDR
// max_x := x + r ;
27041: LD_ADDR_VAR 0 9
27045: PUSH
27046: LD_VAR 0 2
27050: PUSH
27051: LD_VAR 0 4
27055: PLUS
27056: ST_TO_ADDR
// max_y := y + r ;
27057: LD_ADDR_VAR 0 10
27061: PUSH
27062: LD_VAR 0 3
27066: PUSH
27067: LD_VAR 0 4
27071: PLUS
27072: ST_TO_ADDR
// for _x = min_x to max_x do
27073: LD_ADDR_VAR 0 11
27077: PUSH
27078: DOUBLE
27079: LD_VAR 0 7
27083: DEC
27084: ST_TO_ADDR
27085: LD_VAR 0 9
27089: PUSH
27090: FOR_TO
27091: IFFALSE 27208
// for _y = min_y to max_y do
27093: LD_ADDR_VAR 0 12
27097: PUSH
27098: DOUBLE
27099: LD_VAR 0 8
27103: DEC
27104: ST_TO_ADDR
27105: LD_VAR 0 10
27109: PUSH
27110: FOR_TO
27111: IFFALSE 27204
// begin if not ValidHex ( _x , _y ) then
27113: LD_VAR 0 11
27117: PPUSH
27118: LD_VAR 0 12
27122: PPUSH
27123: CALL_OW 488
27127: NOT
27128: IFFALSE 27132
// continue ;
27130: GO 27110
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27132: LD_VAR 0 11
27136: PPUSH
27137: LD_VAR 0 12
27141: PPUSH
27142: CALL_OW 351
27146: PUSH
27147: LD_VAR 0 11
27151: PPUSH
27152: LD_VAR 0 12
27156: PPUSH
27157: CALL_OW 554
27161: AND
27162: IFFALSE 27202
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27164: LD_ADDR_VAR 0 13
27168: PUSH
27169: LD_VAR 0 13
27173: PPUSH
27174: LD_VAR 0 13
27178: PUSH
27179: LD_INT 1
27181: PLUS
27182: PPUSH
27183: LD_VAR 0 11
27187: PUSH
27188: LD_VAR 0 12
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PPUSH
27197: CALL_OW 2
27201: ST_TO_ADDR
// end ;
27202: GO 27110
27204: POP
27205: POP
27206: GO 27090
27208: POP
27209: POP
// if not list then
27210: LD_VAR 0 13
27214: NOT
27215: IFFALSE 27219
// exit ;
27217: GO 27290
// for i in list do
27219: LD_ADDR_VAR 0 6
27223: PUSH
27224: LD_VAR 0 13
27228: PUSH
27229: FOR_IN
27230: IFFALSE 27288
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27232: LD_VAR 0 1
27236: PPUSH
27237: LD_STRING M
27239: PUSH
27240: LD_VAR 0 6
27244: PUSH
27245: LD_INT 1
27247: ARRAY
27248: PUSH
27249: LD_VAR 0 6
27253: PUSH
27254: LD_INT 2
27256: ARRAY
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: LD_INT 0
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: PPUSH
27282: CALL_OW 447
27286: GO 27229
27288: POP
27289: POP
// end ;
27290: LD_VAR 0 5
27294: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27295: LD_EXP 105
27299: NOT
27300: IFFALSE 27350
27302: GO 27304
27304: DISABLE
// begin initHack := true ;
27305: LD_ADDR_EXP 105
27309: PUSH
27310: LD_INT 1
27312: ST_TO_ADDR
// hackTanks := [ ] ;
27313: LD_ADDR_EXP 106
27317: PUSH
27318: EMPTY
27319: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27320: LD_ADDR_EXP 107
27324: PUSH
27325: EMPTY
27326: ST_TO_ADDR
// hackLimit := 3 ;
27327: LD_ADDR_EXP 108
27331: PUSH
27332: LD_INT 3
27334: ST_TO_ADDR
// hackDist := 12 ;
27335: LD_ADDR_EXP 109
27339: PUSH
27340: LD_INT 12
27342: ST_TO_ADDR
// hackCounter := [ ] ;
27343: LD_ADDR_EXP 110
27347: PUSH
27348: EMPTY
27349: ST_TO_ADDR
// end ;
27350: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27351: LD_EXP 105
27355: PUSH
27356: LD_INT 34
27358: PUSH
27359: LD_INT 99
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PPUSH
27366: CALL_OW 69
27370: AND
27371: IFFALSE 27624
27373: GO 27375
27375: DISABLE
27376: LD_INT 0
27378: PPUSH
27379: PPUSH
// begin enable ;
27380: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27381: LD_ADDR_VAR 0 1
27385: PUSH
27386: LD_INT 34
27388: PUSH
27389: LD_INT 99
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PPUSH
27396: CALL_OW 69
27400: PUSH
27401: FOR_IN
27402: IFFALSE 27622
// begin if not i in hackTanks then
27404: LD_VAR 0 1
27408: PUSH
27409: LD_EXP 106
27413: IN
27414: NOT
27415: IFFALSE 27498
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27417: LD_ADDR_EXP 106
27421: PUSH
27422: LD_EXP 106
27426: PPUSH
27427: LD_EXP 106
27431: PUSH
27432: LD_INT 1
27434: PLUS
27435: PPUSH
27436: LD_VAR 0 1
27440: PPUSH
27441: CALL_OW 1
27445: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27446: LD_ADDR_EXP 107
27450: PUSH
27451: LD_EXP 107
27455: PPUSH
27456: LD_EXP 107
27460: PUSH
27461: LD_INT 1
27463: PLUS
27464: PPUSH
27465: EMPTY
27466: PPUSH
27467: CALL_OW 1
27471: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27472: LD_ADDR_EXP 110
27476: PUSH
27477: LD_EXP 110
27481: PPUSH
27482: LD_EXP 110
27486: PUSH
27487: LD_INT 1
27489: PLUS
27490: PPUSH
27491: EMPTY
27492: PPUSH
27493: CALL_OW 1
27497: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27498: LD_VAR 0 1
27502: PPUSH
27503: CALL_OW 302
27507: NOT
27508: IFFALSE 27521
// begin HackUnlinkAll ( i ) ;
27510: LD_VAR 0 1
27514: PPUSH
27515: CALL 27627 0 1
// continue ;
27519: GO 27401
// end ; HackCheckCapturedStatus ( i ) ;
27521: LD_VAR 0 1
27525: PPUSH
27526: CALL 28070 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27530: LD_ADDR_VAR 0 2
27534: PUSH
27535: LD_INT 81
27537: PUSH
27538: LD_VAR 0 1
27542: PPUSH
27543: CALL_OW 255
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 33
27554: PUSH
27555: LD_INT 3
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 91
27564: PUSH
27565: LD_VAR 0 1
27569: PUSH
27570: LD_EXP 109
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 50
27582: PUSH
27583: EMPTY
27584: LIST
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: PPUSH
27592: CALL_OW 69
27596: ST_TO_ADDR
// if not tmp then
27597: LD_VAR 0 2
27601: NOT
27602: IFFALSE 27606
// continue ;
27604: GO 27401
// HackLink ( i , tmp ) ;
27606: LD_VAR 0 1
27610: PPUSH
27611: LD_VAR 0 2
27615: PPUSH
27616: CALL 27763 0 2
// end ;
27620: GO 27401
27622: POP
27623: POP
// end ;
27624: PPOPN 2
27626: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27627: LD_INT 0
27629: PPUSH
27630: PPUSH
27631: PPUSH
// if not hack in hackTanks then
27632: LD_VAR 0 1
27636: PUSH
27637: LD_EXP 106
27641: IN
27642: NOT
27643: IFFALSE 27647
// exit ;
27645: GO 27758
// index := GetElementIndex ( hackTanks , hack ) ;
27647: LD_ADDR_VAR 0 4
27651: PUSH
27652: LD_EXP 106
27656: PPUSH
27657: LD_VAR 0 1
27661: PPUSH
27662: CALL 35375 0 2
27666: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27667: LD_EXP 107
27671: PUSH
27672: LD_VAR 0 4
27676: ARRAY
27677: IFFALSE 27758
// begin for i in hackTanksCaptured [ index ] do
27679: LD_ADDR_VAR 0 3
27683: PUSH
27684: LD_EXP 107
27688: PUSH
27689: LD_VAR 0 4
27693: ARRAY
27694: PUSH
27695: FOR_IN
27696: IFFALSE 27722
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27698: LD_VAR 0 3
27702: PUSH
27703: LD_INT 1
27705: ARRAY
27706: PPUSH
27707: LD_VAR 0 3
27711: PUSH
27712: LD_INT 2
27714: ARRAY
27715: PPUSH
27716: CALL_OW 235
27720: GO 27695
27722: POP
27723: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27724: LD_ADDR_EXP 107
27728: PUSH
27729: LD_EXP 107
27733: PPUSH
27734: LD_VAR 0 4
27738: PPUSH
27739: EMPTY
27740: PPUSH
27741: CALL_OW 1
27745: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27746: LD_VAR 0 1
27750: PPUSH
27751: LD_INT 0
27753: PPUSH
27754: CALL_OW 505
// end ; end ;
27758: LD_VAR 0 2
27762: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27763: LD_INT 0
27765: PPUSH
27766: PPUSH
27767: PPUSH
// if not hack in hackTanks or not vehicles then
27768: LD_VAR 0 1
27772: PUSH
27773: LD_EXP 106
27777: IN
27778: NOT
27779: PUSH
27780: LD_VAR 0 2
27784: NOT
27785: OR
27786: IFFALSE 27790
// exit ;
27788: GO 28065
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27790: LD_ADDR_VAR 0 2
27794: PUSH
27795: LD_VAR 0 1
27799: PPUSH
27800: LD_VAR 0 2
27804: PPUSH
27805: LD_INT 1
27807: PPUSH
27808: LD_INT 1
27810: PPUSH
27811: CALL 36025 0 4
27815: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27816: LD_ADDR_VAR 0 5
27820: PUSH
27821: LD_EXP 106
27825: PPUSH
27826: LD_VAR 0 1
27830: PPUSH
27831: CALL 35375 0 2
27835: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27836: LD_EXP 107
27840: PUSH
27841: LD_VAR 0 5
27845: ARRAY
27846: PUSH
27847: LD_EXP 108
27851: LESS
27852: IFFALSE 28041
// begin for i := 1 to vehicles do
27854: LD_ADDR_VAR 0 4
27858: PUSH
27859: DOUBLE
27860: LD_INT 1
27862: DEC
27863: ST_TO_ADDR
27864: LD_VAR 0 2
27868: PUSH
27869: FOR_TO
27870: IFFALSE 28039
// begin if hackTanksCaptured [ index ] = hackLimit then
27872: LD_EXP 107
27876: PUSH
27877: LD_VAR 0 5
27881: ARRAY
27882: PUSH
27883: LD_EXP 108
27887: EQUAL
27888: IFFALSE 27892
// break ;
27890: GO 28039
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27892: LD_ADDR_EXP 110
27896: PUSH
27897: LD_EXP 110
27901: PPUSH
27902: LD_VAR 0 5
27906: PPUSH
27907: LD_EXP 110
27911: PUSH
27912: LD_VAR 0 5
27916: ARRAY
27917: PUSH
27918: LD_INT 1
27920: PLUS
27921: PPUSH
27922: CALL_OW 1
27926: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27927: LD_ADDR_EXP 107
27931: PUSH
27932: LD_EXP 107
27936: PPUSH
27937: LD_VAR 0 5
27941: PUSH
27942: LD_EXP 107
27946: PUSH
27947: LD_VAR 0 5
27951: ARRAY
27952: PUSH
27953: LD_INT 1
27955: PLUS
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PPUSH
27961: LD_VAR 0 2
27965: PUSH
27966: LD_VAR 0 4
27970: ARRAY
27971: PUSH
27972: LD_VAR 0 2
27976: PUSH
27977: LD_VAR 0 4
27981: ARRAY
27982: PPUSH
27983: CALL_OW 255
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PPUSH
27992: CALL 35590 0 3
27996: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27997: LD_VAR 0 2
28001: PUSH
28002: LD_VAR 0 4
28006: ARRAY
28007: PPUSH
28008: LD_VAR 0 1
28012: PPUSH
28013: CALL_OW 255
28017: PPUSH
28018: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28022: LD_VAR 0 2
28026: PUSH
28027: LD_VAR 0 4
28031: ARRAY
28032: PPUSH
28033: CALL_OW 141
// end ;
28037: GO 27869
28039: POP
28040: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28041: LD_VAR 0 1
28045: PPUSH
28046: LD_EXP 107
28050: PUSH
28051: LD_VAR 0 5
28055: ARRAY
28056: PUSH
28057: LD_INT 0
28059: PLUS
28060: PPUSH
28061: CALL_OW 505
// end ;
28065: LD_VAR 0 3
28069: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28070: LD_INT 0
28072: PPUSH
28073: PPUSH
28074: PPUSH
28075: PPUSH
// if not hack in hackTanks then
28076: LD_VAR 0 1
28080: PUSH
28081: LD_EXP 106
28085: IN
28086: NOT
28087: IFFALSE 28091
// exit ;
28089: GO 28331
// index := GetElementIndex ( hackTanks , hack ) ;
28091: LD_ADDR_VAR 0 4
28095: PUSH
28096: LD_EXP 106
28100: PPUSH
28101: LD_VAR 0 1
28105: PPUSH
28106: CALL 35375 0 2
28110: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28111: LD_ADDR_VAR 0 3
28115: PUSH
28116: DOUBLE
28117: LD_EXP 107
28121: PUSH
28122: LD_VAR 0 4
28126: ARRAY
28127: INC
28128: ST_TO_ADDR
28129: LD_INT 1
28131: PUSH
28132: FOR_DOWNTO
28133: IFFALSE 28305
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28135: LD_ADDR_VAR 0 5
28139: PUSH
28140: LD_EXP 107
28144: PUSH
28145: LD_VAR 0 4
28149: ARRAY
28150: PUSH
28151: LD_VAR 0 3
28155: ARRAY
28156: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28157: LD_VAR 0 5
28161: PUSH
28162: LD_INT 1
28164: ARRAY
28165: PPUSH
28166: CALL_OW 302
28170: NOT
28171: PUSH
28172: LD_VAR 0 5
28176: PUSH
28177: LD_INT 1
28179: ARRAY
28180: PPUSH
28181: CALL_OW 255
28185: PUSH
28186: LD_VAR 0 1
28190: PPUSH
28191: CALL_OW 255
28195: NONEQUAL
28196: OR
28197: IFFALSE 28303
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28199: LD_VAR 0 5
28203: PUSH
28204: LD_INT 1
28206: ARRAY
28207: PPUSH
28208: CALL_OW 305
28212: PUSH
28213: LD_VAR 0 5
28217: PUSH
28218: LD_INT 1
28220: ARRAY
28221: PPUSH
28222: CALL_OW 255
28226: PUSH
28227: LD_VAR 0 1
28231: PPUSH
28232: CALL_OW 255
28236: EQUAL
28237: AND
28238: IFFALSE 28262
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28240: LD_VAR 0 5
28244: PUSH
28245: LD_INT 1
28247: ARRAY
28248: PPUSH
28249: LD_VAR 0 5
28253: PUSH
28254: LD_INT 2
28256: ARRAY
28257: PPUSH
28258: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28262: LD_ADDR_EXP 107
28266: PUSH
28267: LD_EXP 107
28271: PPUSH
28272: LD_VAR 0 4
28276: PPUSH
28277: LD_EXP 107
28281: PUSH
28282: LD_VAR 0 4
28286: ARRAY
28287: PPUSH
28288: LD_VAR 0 3
28292: PPUSH
28293: CALL_OW 3
28297: PPUSH
28298: CALL_OW 1
28302: ST_TO_ADDR
// end ; end ;
28303: GO 28132
28305: POP
28306: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28307: LD_VAR 0 1
28311: PPUSH
28312: LD_EXP 107
28316: PUSH
28317: LD_VAR 0 4
28321: ARRAY
28322: PUSH
28323: LD_INT 0
28325: PLUS
28326: PPUSH
28327: CALL_OW 505
// end ;
28331: LD_VAR 0 2
28335: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28336: LD_INT 0
28338: PPUSH
28339: PPUSH
28340: PPUSH
28341: PPUSH
// if not hack in hackTanks then
28342: LD_VAR 0 1
28346: PUSH
28347: LD_EXP 106
28351: IN
28352: NOT
28353: IFFALSE 28357
// exit ;
28355: GO 28442
// index := GetElementIndex ( hackTanks , hack ) ;
28357: LD_ADDR_VAR 0 5
28361: PUSH
28362: LD_EXP 106
28366: PPUSH
28367: LD_VAR 0 1
28371: PPUSH
28372: CALL 35375 0 2
28376: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28377: LD_ADDR_VAR 0 4
28381: PUSH
28382: DOUBLE
28383: LD_INT 1
28385: DEC
28386: ST_TO_ADDR
28387: LD_EXP 107
28391: PUSH
28392: LD_VAR 0 5
28396: ARRAY
28397: PUSH
28398: FOR_TO
28399: IFFALSE 28440
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28401: LD_EXP 107
28405: PUSH
28406: LD_VAR 0 5
28410: ARRAY
28411: PUSH
28412: LD_VAR 0 4
28416: ARRAY
28417: PUSH
28418: LD_INT 1
28420: ARRAY
28421: PUSH
28422: LD_VAR 0 2
28426: EQUAL
28427: IFFALSE 28438
// KillUnit ( vehicle ) ;
28429: LD_VAR 0 2
28433: PPUSH
28434: CALL_OW 66
28438: GO 28398
28440: POP
28441: POP
// end ;
28442: LD_VAR 0 3
28446: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28447: LD_EXP 111
28451: NOT
28452: IFFALSE 28487
28454: GO 28456
28456: DISABLE
// begin initMiner := true ;
28457: LD_ADDR_EXP 111
28461: PUSH
28462: LD_INT 1
28464: ST_TO_ADDR
// minersList := [ ] ;
28465: LD_ADDR_EXP 112
28469: PUSH
28470: EMPTY
28471: ST_TO_ADDR
// minerMinesList := [ ] ;
28472: LD_ADDR_EXP 113
28476: PUSH
28477: EMPTY
28478: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28479: LD_ADDR_EXP 114
28483: PUSH
28484: LD_INT 5
28486: ST_TO_ADDR
// end ;
28487: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28488: LD_EXP 111
28492: PUSH
28493: LD_INT 34
28495: PUSH
28496: LD_INT 81
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PPUSH
28503: CALL_OW 69
28507: AND
28508: IFFALSE 28969
28510: GO 28512
28512: DISABLE
28513: LD_INT 0
28515: PPUSH
28516: PPUSH
28517: PPUSH
28518: PPUSH
// begin enable ;
28519: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28520: LD_ADDR_VAR 0 1
28524: PUSH
28525: LD_INT 34
28527: PUSH
28528: LD_INT 81
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PPUSH
28535: CALL_OW 69
28539: PUSH
28540: FOR_IN
28541: IFFALSE 28613
// begin if not i in minersList then
28543: LD_VAR 0 1
28547: PUSH
28548: LD_EXP 112
28552: IN
28553: NOT
28554: IFFALSE 28611
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28556: LD_ADDR_EXP 112
28560: PUSH
28561: LD_EXP 112
28565: PPUSH
28566: LD_EXP 112
28570: PUSH
28571: LD_INT 1
28573: PLUS
28574: PPUSH
28575: LD_VAR 0 1
28579: PPUSH
28580: CALL_OW 1
28584: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28585: LD_ADDR_EXP 113
28589: PUSH
28590: LD_EXP 113
28594: PPUSH
28595: LD_EXP 113
28599: PUSH
28600: LD_INT 1
28602: PLUS
28603: PPUSH
28604: EMPTY
28605: PPUSH
28606: CALL_OW 1
28610: ST_TO_ADDR
// end end ;
28611: GO 28540
28613: POP
28614: POP
// for i := minerMinesList downto 1 do
28615: LD_ADDR_VAR 0 1
28619: PUSH
28620: DOUBLE
28621: LD_EXP 113
28625: INC
28626: ST_TO_ADDR
28627: LD_INT 1
28629: PUSH
28630: FOR_DOWNTO
28631: IFFALSE 28967
// begin if IsLive ( minersList [ i ] ) then
28633: LD_EXP 112
28637: PUSH
28638: LD_VAR 0 1
28642: ARRAY
28643: PPUSH
28644: CALL_OW 300
28648: IFFALSE 28676
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28650: LD_EXP 112
28654: PUSH
28655: LD_VAR 0 1
28659: ARRAY
28660: PPUSH
28661: LD_EXP 113
28665: PUSH
28666: LD_VAR 0 1
28670: ARRAY
28671: PPUSH
28672: CALL_OW 505
// if not minerMinesList [ i ] then
28676: LD_EXP 113
28680: PUSH
28681: LD_VAR 0 1
28685: ARRAY
28686: NOT
28687: IFFALSE 28691
// continue ;
28689: GO 28630
// for j := minerMinesList [ i ] downto 1 do
28691: LD_ADDR_VAR 0 2
28695: PUSH
28696: DOUBLE
28697: LD_EXP 113
28701: PUSH
28702: LD_VAR 0 1
28706: ARRAY
28707: INC
28708: ST_TO_ADDR
28709: LD_INT 1
28711: PUSH
28712: FOR_DOWNTO
28713: IFFALSE 28963
// begin side := GetSide ( minersList [ i ] ) ;
28715: LD_ADDR_VAR 0 3
28719: PUSH
28720: LD_EXP 112
28724: PUSH
28725: LD_VAR 0 1
28729: ARRAY
28730: PPUSH
28731: CALL_OW 255
28735: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28736: LD_ADDR_VAR 0 4
28740: PUSH
28741: LD_EXP 113
28745: PUSH
28746: LD_VAR 0 1
28750: ARRAY
28751: PUSH
28752: LD_VAR 0 2
28756: ARRAY
28757: PUSH
28758: LD_INT 1
28760: ARRAY
28761: PPUSH
28762: LD_EXP 113
28766: PUSH
28767: LD_VAR 0 1
28771: ARRAY
28772: PUSH
28773: LD_VAR 0 2
28777: ARRAY
28778: PUSH
28779: LD_INT 2
28781: ARRAY
28782: PPUSH
28783: CALL_OW 428
28787: ST_TO_ADDR
// if not tmp then
28788: LD_VAR 0 4
28792: NOT
28793: IFFALSE 28797
// continue ;
28795: GO 28712
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28797: LD_VAR 0 4
28801: PUSH
28802: LD_INT 81
28804: PUSH
28805: LD_VAR 0 3
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PPUSH
28814: CALL_OW 69
28818: IN
28819: PUSH
28820: LD_EXP 113
28824: PUSH
28825: LD_VAR 0 1
28829: ARRAY
28830: PUSH
28831: LD_VAR 0 2
28835: ARRAY
28836: PUSH
28837: LD_INT 1
28839: ARRAY
28840: PPUSH
28841: LD_EXP 113
28845: PUSH
28846: LD_VAR 0 1
28850: ARRAY
28851: PUSH
28852: LD_VAR 0 2
28856: ARRAY
28857: PUSH
28858: LD_INT 2
28860: ARRAY
28861: PPUSH
28862: CALL_OW 458
28866: AND
28867: IFFALSE 28961
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28869: LD_EXP 113
28873: PUSH
28874: LD_VAR 0 1
28878: ARRAY
28879: PUSH
28880: LD_VAR 0 2
28884: ARRAY
28885: PUSH
28886: LD_INT 1
28888: ARRAY
28889: PPUSH
28890: LD_EXP 113
28894: PUSH
28895: LD_VAR 0 1
28899: ARRAY
28900: PUSH
28901: LD_VAR 0 2
28905: ARRAY
28906: PUSH
28907: LD_INT 2
28909: ARRAY
28910: PPUSH
28911: LD_VAR 0 3
28915: PPUSH
28916: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28920: LD_ADDR_EXP 113
28924: PUSH
28925: LD_EXP 113
28929: PPUSH
28930: LD_VAR 0 1
28934: PPUSH
28935: LD_EXP 113
28939: PUSH
28940: LD_VAR 0 1
28944: ARRAY
28945: PPUSH
28946: LD_VAR 0 2
28950: PPUSH
28951: CALL_OW 3
28955: PPUSH
28956: CALL_OW 1
28960: ST_TO_ADDR
// end ; end ;
28961: GO 28712
28963: POP
28964: POP
// end ;
28965: GO 28630
28967: POP
28968: POP
// end ;
28969: PPOPN 4
28971: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28972: LD_INT 0
28974: PPUSH
28975: PPUSH
// result := false ;
28976: LD_ADDR_VAR 0 4
28980: PUSH
28981: LD_INT 0
28983: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28984: LD_VAR 0 1
28988: PPUSH
28989: CALL_OW 264
28993: PUSH
28994: LD_INT 81
28996: EQUAL
28997: NOT
28998: IFFALSE 29002
// exit ;
29000: GO 29242
// index := GetElementIndex ( minersList , unit ) ;
29002: LD_ADDR_VAR 0 5
29006: PUSH
29007: LD_EXP 112
29011: PPUSH
29012: LD_VAR 0 1
29016: PPUSH
29017: CALL 35375 0 2
29021: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29022: LD_EXP 113
29026: PUSH
29027: LD_VAR 0 5
29031: ARRAY
29032: PUSH
29033: LD_EXP 114
29037: GREATEREQUAL
29038: IFFALSE 29042
// exit ;
29040: GO 29242
// ComMoveXY ( unit , x , y ) ;
29042: LD_VAR 0 1
29046: PPUSH
29047: LD_VAR 0 2
29051: PPUSH
29052: LD_VAR 0 3
29056: PPUSH
29057: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29061: LD_INT 35
29063: PPUSH
29064: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29068: LD_VAR 0 1
29072: PPUSH
29073: LD_VAR 0 2
29077: PPUSH
29078: LD_VAR 0 3
29082: PPUSH
29083: CALL 66730 0 3
29087: NOT
29088: PUSH
29089: LD_VAR 0 1
29093: PPUSH
29094: CALL_OW 314
29098: AND
29099: IFFALSE 29103
// exit ;
29101: GO 29242
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29103: LD_VAR 0 2
29107: PPUSH
29108: LD_VAR 0 3
29112: PPUSH
29113: CALL_OW 428
29117: PUSH
29118: LD_VAR 0 1
29122: EQUAL
29123: PUSH
29124: LD_VAR 0 1
29128: PPUSH
29129: CALL_OW 314
29133: NOT
29134: AND
29135: IFFALSE 29061
// PlaySoundXY ( x , y , PlantMine ) ;
29137: LD_VAR 0 2
29141: PPUSH
29142: LD_VAR 0 3
29146: PPUSH
29147: LD_STRING PlantMine
29149: PPUSH
29150: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29154: LD_VAR 0 2
29158: PPUSH
29159: LD_VAR 0 3
29163: PPUSH
29164: LD_VAR 0 1
29168: PPUSH
29169: CALL_OW 255
29173: PPUSH
29174: LD_INT 0
29176: PPUSH
29177: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29181: LD_ADDR_EXP 113
29185: PUSH
29186: LD_EXP 113
29190: PPUSH
29191: LD_VAR 0 5
29195: PUSH
29196: LD_EXP 113
29200: PUSH
29201: LD_VAR 0 5
29205: ARRAY
29206: PUSH
29207: LD_INT 1
29209: PLUS
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PPUSH
29215: LD_VAR 0 2
29219: PUSH
29220: LD_VAR 0 3
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PPUSH
29229: CALL 35590 0 3
29233: ST_TO_ADDR
// result := true ;
29234: LD_ADDR_VAR 0 4
29238: PUSH
29239: LD_INT 1
29241: ST_TO_ADDR
// end ;
29242: LD_VAR 0 4
29246: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29247: LD_INT 0
29249: PPUSH
29250: PPUSH
29251: PPUSH
// if not unit in minersList then
29252: LD_VAR 0 1
29256: PUSH
29257: LD_EXP 112
29261: IN
29262: NOT
29263: IFFALSE 29267
// exit ;
29265: GO 29659
// index := GetElementIndex ( minersList , unit ) ;
29267: LD_ADDR_VAR 0 6
29271: PUSH
29272: LD_EXP 112
29276: PPUSH
29277: LD_VAR 0 1
29281: PPUSH
29282: CALL 35375 0 2
29286: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29287: LD_ADDR_VAR 0 5
29291: PUSH
29292: DOUBLE
29293: LD_EXP 113
29297: PUSH
29298: LD_VAR 0 6
29302: ARRAY
29303: INC
29304: ST_TO_ADDR
29305: LD_INT 1
29307: PUSH
29308: FOR_DOWNTO
29309: IFFALSE 29470
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29311: LD_EXP 113
29315: PUSH
29316: LD_VAR 0 6
29320: ARRAY
29321: PUSH
29322: LD_VAR 0 5
29326: ARRAY
29327: PUSH
29328: LD_INT 1
29330: ARRAY
29331: PUSH
29332: LD_VAR 0 2
29336: EQUAL
29337: PUSH
29338: LD_EXP 113
29342: PUSH
29343: LD_VAR 0 6
29347: ARRAY
29348: PUSH
29349: LD_VAR 0 5
29353: ARRAY
29354: PUSH
29355: LD_INT 2
29357: ARRAY
29358: PUSH
29359: LD_VAR 0 3
29363: EQUAL
29364: AND
29365: IFFALSE 29468
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29367: LD_EXP 113
29371: PUSH
29372: LD_VAR 0 6
29376: ARRAY
29377: PUSH
29378: LD_VAR 0 5
29382: ARRAY
29383: PUSH
29384: LD_INT 1
29386: ARRAY
29387: PPUSH
29388: LD_EXP 113
29392: PUSH
29393: LD_VAR 0 6
29397: ARRAY
29398: PUSH
29399: LD_VAR 0 5
29403: ARRAY
29404: PUSH
29405: LD_INT 2
29407: ARRAY
29408: PPUSH
29409: LD_VAR 0 1
29413: PPUSH
29414: CALL_OW 255
29418: PPUSH
29419: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29423: LD_ADDR_EXP 113
29427: PUSH
29428: LD_EXP 113
29432: PPUSH
29433: LD_VAR 0 6
29437: PPUSH
29438: LD_EXP 113
29442: PUSH
29443: LD_VAR 0 6
29447: ARRAY
29448: PPUSH
29449: LD_VAR 0 5
29453: PPUSH
29454: CALL_OW 3
29458: PPUSH
29459: CALL_OW 1
29463: ST_TO_ADDR
// exit ;
29464: POP
29465: POP
29466: GO 29659
// end ; end ;
29468: GO 29308
29470: POP
29471: POP
// for i := minerMinesList [ index ] downto 1 do
29472: LD_ADDR_VAR 0 5
29476: PUSH
29477: DOUBLE
29478: LD_EXP 113
29482: PUSH
29483: LD_VAR 0 6
29487: ARRAY
29488: INC
29489: ST_TO_ADDR
29490: LD_INT 1
29492: PUSH
29493: FOR_DOWNTO
29494: IFFALSE 29657
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29496: LD_EXP 113
29500: PUSH
29501: LD_VAR 0 6
29505: ARRAY
29506: PUSH
29507: LD_VAR 0 5
29511: ARRAY
29512: PUSH
29513: LD_INT 1
29515: ARRAY
29516: PPUSH
29517: LD_EXP 113
29521: PUSH
29522: LD_VAR 0 6
29526: ARRAY
29527: PUSH
29528: LD_VAR 0 5
29532: ARRAY
29533: PUSH
29534: LD_INT 2
29536: ARRAY
29537: PPUSH
29538: LD_VAR 0 2
29542: PPUSH
29543: LD_VAR 0 3
29547: PPUSH
29548: CALL_OW 298
29552: PUSH
29553: LD_INT 6
29555: LESS
29556: IFFALSE 29655
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29558: LD_EXP 113
29562: PUSH
29563: LD_VAR 0 6
29567: ARRAY
29568: PUSH
29569: LD_VAR 0 5
29573: ARRAY
29574: PUSH
29575: LD_INT 1
29577: ARRAY
29578: PPUSH
29579: LD_EXP 113
29583: PUSH
29584: LD_VAR 0 6
29588: ARRAY
29589: PUSH
29590: LD_VAR 0 5
29594: ARRAY
29595: PUSH
29596: LD_INT 2
29598: ARRAY
29599: PPUSH
29600: LD_VAR 0 1
29604: PPUSH
29605: CALL_OW 255
29609: PPUSH
29610: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29614: LD_ADDR_EXP 113
29618: PUSH
29619: LD_EXP 113
29623: PPUSH
29624: LD_VAR 0 6
29628: PPUSH
29629: LD_EXP 113
29633: PUSH
29634: LD_VAR 0 6
29638: ARRAY
29639: PPUSH
29640: LD_VAR 0 5
29644: PPUSH
29645: CALL_OW 3
29649: PPUSH
29650: CALL_OW 1
29654: ST_TO_ADDR
// end ; end ;
29655: GO 29493
29657: POP
29658: POP
// end ;
29659: LD_VAR 0 4
29663: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29664: LD_INT 0
29666: PPUSH
29667: PPUSH
29668: PPUSH
29669: PPUSH
29670: PPUSH
29671: PPUSH
29672: PPUSH
29673: PPUSH
29674: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29675: LD_VAR 0 1
29679: PPUSH
29680: CALL_OW 264
29684: PUSH
29685: LD_INT 81
29687: EQUAL
29688: NOT
29689: PUSH
29690: LD_VAR 0 1
29694: PUSH
29695: LD_EXP 112
29699: IN
29700: NOT
29701: OR
29702: IFFALSE 29706
// exit ;
29704: GO 30028
// index := GetElementIndex ( minersList , unit ) ;
29706: LD_ADDR_VAR 0 6
29710: PUSH
29711: LD_EXP 112
29715: PPUSH
29716: LD_VAR 0 1
29720: PPUSH
29721: CALL 35375 0 2
29725: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29726: LD_ADDR_VAR 0 8
29730: PUSH
29731: LD_EXP 114
29735: PUSH
29736: LD_EXP 113
29740: PUSH
29741: LD_VAR 0 6
29745: ARRAY
29746: MINUS
29747: ST_TO_ADDR
// if not minesFreeAmount then
29748: LD_VAR 0 8
29752: NOT
29753: IFFALSE 29757
// exit ;
29755: GO 30028
// tmp := [ ] ;
29757: LD_ADDR_VAR 0 7
29761: PUSH
29762: EMPTY
29763: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29764: LD_ADDR_VAR 0 5
29768: PUSH
29769: DOUBLE
29770: LD_INT 1
29772: DEC
29773: ST_TO_ADDR
29774: LD_VAR 0 8
29778: PUSH
29779: FOR_TO
29780: IFFALSE 29975
// begin _d := rand ( 0 , 5 ) ;
29782: LD_ADDR_VAR 0 11
29786: PUSH
29787: LD_INT 0
29789: PPUSH
29790: LD_INT 5
29792: PPUSH
29793: CALL_OW 12
29797: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29798: LD_ADDR_VAR 0 12
29802: PUSH
29803: LD_INT 2
29805: PPUSH
29806: LD_INT 6
29808: PPUSH
29809: CALL_OW 12
29813: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29814: LD_ADDR_VAR 0 9
29818: PUSH
29819: LD_VAR 0 2
29823: PPUSH
29824: LD_VAR 0 11
29828: PPUSH
29829: LD_VAR 0 12
29833: PPUSH
29834: CALL_OW 272
29838: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29839: LD_ADDR_VAR 0 10
29843: PUSH
29844: LD_VAR 0 3
29848: PPUSH
29849: LD_VAR 0 11
29853: PPUSH
29854: LD_VAR 0 12
29858: PPUSH
29859: CALL_OW 273
29863: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29864: LD_VAR 0 9
29868: PPUSH
29869: LD_VAR 0 10
29873: PPUSH
29874: CALL_OW 488
29878: PUSH
29879: LD_VAR 0 9
29883: PUSH
29884: LD_VAR 0 10
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_VAR 0 7
29897: IN
29898: NOT
29899: AND
29900: PUSH
29901: LD_VAR 0 9
29905: PPUSH
29906: LD_VAR 0 10
29910: PPUSH
29911: CALL_OW 458
29915: NOT
29916: AND
29917: IFFALSE 29959
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29919: LD_ADDR_VAR 0 7
29923: PUSH
29924: LD_VAR 0 7
29928: PPUSH
29929: LD_VAR 0 7
29933: PUSH
29934: LD_INT 1
29936: PLUS
29937: PPUSH
29938: LD_VAR 0 9
29942: PUSH
29943: LD_VAR 0 10
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PPUSH
29952: CALL_OW 1
29956: ST_TO_ADDR
29957: GO 29973
// i := i - 1 ;
29959: LD_ADDR_VAR 0 5
29963: PUSH
29964: LD_VAR 0 5
29968: PUSH
29969: LD_INT 1
29971: MINUS
29972: ST_TO_ADDR
// end ;
29973: GO 29779
29975: POP
29976: POP
// for i in tmp do
29977: LD_ADDR_VAR 0 5
29981: PUSH
29982: LD_VAR 0 7
29986: PUSH
29987: FOR_IN
29988: IFFALSE 30026
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29990: LD_VAR 0 1
29994: PPUSH
29995: LD_VAR 0 5
29999: PUSH
30000: LD_INT 1
30002: ARRAY
30003: PPUSH
30004: LD_VAR 0 5
30008: PUSH
30009: LD_INT 2
30011: ARRAY
30012: PPUSH
30013: CALL 28972 0 3
30017: NOT
30018: IFFALSE 30024
// exit ;
30020: POP
30021: POP
30022: GO 30028
30024: GO 29987
30026: POP
30027: POP
// end ;
30028: LD_VAR 0 4
30032: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30033: LD_INT 0
30035: PPUSH
30036: PPUSH
30037: PPUSH
30038: PPUSH
30039: PPUSH
30040: PPUSH
30041: PPUSH
// if not GetClass ( unit ) = class_sniper then
30042: LD_VAR 0 1
30046: PPUSH
30047: CALL_OW 257
30051: PUSH
30052: LD_INT 5
30054: EQUAL
30055: NOT
30056: IFFALSE 30060
// exit ;
30058: GO 30448
// dist := 8 ;
30060: LD_ADDR_VAR 0 5
30064: PUSH
30065: LD_INT 8
30067: ST_TO_ADDR
// viewRange := 12 ;
30068: LD_ADDR_VAR 0 7
30072: PUSH
30073: LD_INT 12
30075: ST_TO_ADDR
// side := GetSide ( unit ) ;
30076: LD_ADDR_VAR 0 6
30080: PUSH
30081: LD_VAR 0 1
30085: PPUSH
30086: CALL_OW 255
30090: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30091: LD_INT 61
30093: PPUSH
30094: LD_VAR 0 6
30098: PPUSH
30099: CALL_OW 321
30103: PUSH
30104: LD_INT 2
30106: EQUAL
30107: IFFALSE 30117
// viewRange := 16 ;
30109: LD_ADDR_VAR 0 7
30113: PUSH
30114: LD_INT 16
30116: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30117: LD_VAR 0 1
30121: PPUSH
30122: LD_VAR 0 2
30126: PPUSH
30127: LD_VAR 0 3
30131: PPUSH
30132: CALL_OW 297
30136: PUSH
30137: LD_VAR 0 5
30141: GREATER
30142: IFFALSE 30221
// begin ComMoveXY ( unit , x , y ) ;
30144: LD_VAR 0 1
30148: PPUSH
30149: LD_VAR 0 2
30153: PPUSH
30154: LD_VAR 0 3
30158: PPUSH
30159: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30163: LD_INT 35
30165: PPUSH
30166: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30170: LD_VAR 0 1
30174: PPUSH
30175: LD_VAR 0 2
30179: PPUSH
30180: LD_VAR 0 3
30184: PPUSH
30185: CALL 66730 0 3
30189: NOT
30190: IFFALSE 30194
// exit ;
30192: GO 30448
// until GetDistUnitXY ( unit , x , y ) < dist ;
30194: LD_VAR 0 1
30198: PPUSH
30199: LD_VAR 0 2
30203: PPUSH
30204: LD_VAR 0 3
30208: PPUSH
30209: CALL_OW 297
30213: PUSH
30214: LD_VAR 0 5
30218: LESS
30219: IFFALSE 30163
// end ; ComTurnXY ( unit , x , y ) ;
30221: LD_VAR 0 1
30225: PPUSH
30226: LD_VAR 0 2
30230: PPUSH
30231: LD_VAR 0 3
30235: PPUSH
30236: CALL_OW 118
// wait ( 5 ) ;
30240: LD_INT 5
30242: PPUSH
30243: CALL_OW 67
// _d := GetDir ( unit ) ;
30247: LD_ADDR_VAR 0 10
30251: PUSH
30252: LD_VAR 0 1
30256: PPUSH
30257: CALL_OW 254
30261: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30262: LD_ADDR_VAR 0 8
30266: PUSH
30267: LD_VAR 0 1
30271: PPUSH
30272: CALL_OW 250
30276: PPUSH
30277: LD_VAR 0 10
30281: PPUSH
30282: LD_VAR 0 5
30286: PPUSH
30287: CALL_OW 272
30291: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30292: LD_ADDR_VAR 0 9
30296: PUSH
30297: LD_VAR 0 1
30301: PPUSH
30302: CALL_OW 251
30306: PPUSH
30307: LD_VAR 0 10
30311: PPUSH
30312: LD_VAR 0 5
30316: PPUSH
30317: CALL_OW 273
30321: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30322: LD_VAR 0 8
30326: PPUSH
30327: LD_VAR 0 9
30331: PPUSH
30332: CALL_OW 488
30336: NOT
30337: IFFALSE 30341
// exit ;
30339: GO 30448
// ComAnimCustom ( unit , 1 ) ;
30341: LD_VAR 0 1
30345: PPUSH
30346: LD_INT 1
30348: PPUSH
30349: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30353: LD_VAR 0 8
30357: PPUSH
30358: LD_VAR 0 9
30362: PPUSH
30363: LD_VAR 0 6
30367: PPUSH
30368: LD_VAR 0 7
30372: PPUSH
30373: CALL_OW 330
// repeat wait ( 1 ) ;
30377: LD_INT 1
30379: PPUSH
30380: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30384: LD_VAR 0 1
30388: PPUSH
30389: CALL_OW 316
30393: PUSH
30394: LD_VAR 0 1
30398: PPUSH
30399: CALL_OW 314
30403: OR
30404: PUSH
30405: LD_VAR 0 1
30409: PPUSH
30410: CALL_OW 302
30414: NOT
30415: OR
30416: PUSH
30417: LD_VAR 0 1
30421: PPUSH
30422: CALL_OW 301
30426: OR
30427: IFFALSE 30377
// RemoveSeeing ( _x , _y , side ) ;
30429: LD_VAR 0 8
30433: PPUSH
30434: LD_VAR 0 9
30438: PPUSH
30439: LD_VAR 0 6
30443: PPUSH
30444: CALL_OW 331
// end ; end_of_file
30448: LD_VAR 0 4
30452: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30453: LD_INT 0
30455: PPUSH
30456: PPUSH
// if exist_mode then
30457: LD_VAR 0 2
30461: IFFALSE 30486
// unit := CreateCharacter ( prefix & ident ) else
30463: LD_ADDR_VAR 0 5
30467: PUSH
30468: LD_VAR 0 3
30472: PUSH
30473: LD_VAR 0 1
30477: STR
30478: PPUSH
30479: CALL_OW 34
30483: ST_TO_ADDR
30484: GO 30501
// unit := NewCharacter ( ident ) ;
30486: LD_ADDR_VAR 0 5
30490: PUSH
30491: LD_VAR 0 1
30495: PPUSH
30496: CALL_OW 25
30500: ST_TO_ADDR
// result := unit ;
30501: LD_ADDR_VAR 0 4
30505: PUSH
30506: LD_VAR 0 5
30510: ST_TO_ADDR
// end ;
30511: LD_VAR 0 4
30515: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30516: LD_INT 0
30518: PPUSH
30519: PPUSH
// if not side or not nation then
30520: LD_VAR 0 1
30524: NOT
30525: PUSH
30526: LD_VAR 0 2
30530: NOT
30531: OR
30532: IFFALSE 30536
// exit ;
30534: GO 31304
// case nation of nation_american :
30536: LD_VAR 0 2
30540: PUSH
30541: LD_INT 1
30543: DOUBLE
30544: EQUAL
30545: IFTRUE 30549
30547: GO 30763
30549: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30550: LD_ADDR_VAR 0 4
30554: PUSH
30555: LD_INT 35
30557: PUSH
30558: LD_INT 45
30560: PUSH
30561: LD_INT 46
30563: PUSH
30564: LD_INT 47
30566: PUSH
30567: LD_INT 82
30569: PUSH
30570: LD_INT 83
30572: PUSH
30573: LD_INT 84
30575: PUSH
30576: LD_INT 85
30578: PUSH
30579: LD_INT 86
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: LD_INT 2
30587: PUSH
30588: LD_INT 6
30590: PUSH
30591: LD_INT 15
30593: PUSH
30594: LD_INT 16
30596: PUSH
30597: LD_INT 7
30599: PUSH
30600: LD_INT 12
30602: PUSH
30603: LD_INT 13
30605: PUSH
30606: LD_INT 10
30608: PUSH
30609: LD_INT 14
30611: PUSH
30612: LD_INT 20
30614: PUSH
30615: LD_INT 21
30617: PUSH
30618: LD_INT 22
30620: PUSH
30621: LD_INT 25
30623: PUSH
30624: LD_INT 32
30626: PUSH
30627: LD_INT 27
30629: PUSH
30630: LD_INT 36
30632: PUSH
30633: LD_INT 69
30635: PUSH
30636: LD_INT 39
30638: PUSH
30639: LD_INT 34
30641: PUSH
30642: LD_INT 40
30644: PUSH
30645: LD_INT 48
30647: PUSH
30648: LD_INT 49
30650: PUSH
30651: LD_INT 50
30653: PUSH
30654: LD_INT 51
30656: PUSH
30657: LD_INT 52
30659: PUSH
30660: LD_INT 53
30662: PUSH
30663: LD_INT 54
30665: PUSH
30666: LD_INT 55
30668: PUSH
30669: LD_INT 56
30671: PUSH
30672: LD_INT 57
30674: PUSH
30675: LD_INT 58
30677: PUSH
30678: LD_INT 59
30680: PUSH
30681: LD_INT 60
30683: PUSH
30684: LD_INT 61
30686: PUSH
30687: LD_INT 62
30689: PUSH
30690: LD_INT 80
30692: PUSH
30693: LD_INT 82
30695: PUSH
30696: LD_INT 83
30698: PUSH
30699: LD_INT 84
30701: PUSH
30702: LD_INT 85
30704: PUSH
30705: LD_INT 86
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: ST_TO_ADDR
30761: GO 31228
30763: LD_INT 2
30765: DOUBLE
30766: EQUAL
30767: IFTRUE 30771
30769: GO 30997
30771: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30772: LD_ADDR_VAR 0 4
30776: PUSH
30777: LD_INT 35
30779: PUSH
30780: LD_INT 45
30782: PUSH
30783: LD_INT 46
30785: PUSH
30786: LD_INT 47
30788: PUSH
30789: LD_INT 82
30791: PUSH
30792: LD_INT 83
30794: PUSH
30795: LD_INT 84
30797: PUSH
30798: LD_INT 85
30800: PUSH
30801: LD_INT 87
30803: PUSH
30804: LD_INT 70
30806: PUSH
30807: LD_INT 1
30809: PUSH
30810: LD_INT 11
30812: PUSH
30813: LD_INT 3
30815: PUSH
30816: LD_INT 4
30818: PUSH
30819: LD_INT 5
30821: PUSH
30822: LD_INT 6
30824: PUSH
30825: LD_INT 15
30827: PUSH
30828: LD_INT 18
30830: PUSH
30831: LD_INT 7
30833: PUSH
30834: LD_INT 17
30836: PUSH
30837: LD_INT 8
30839: PUSH
30840: LD_INT 20
30842: PUSH
30843: LD_INT 21
30845: PUSH
30846: LD_INT 22
30848: PUSH
30849: LD_INT 72
30851: PUSH
30852: LD_INT 26
30854: PUSH
30855: LD_INT 69
30857: PUSH
30858: LD_INT 39
30860: PUSH
30861: LD_INT 40
30863: PUSH
30864: LD_INT 41
30866: PUSH
30867: LD_INT 42
30869: PUSH
30870: LD_INT 43
30872: PUSH
30873: LD_INT 48
30875: PUSH
30876: LD_INT 49
30878: PUSH
30879: LD_INT 50
30881: PUSH
30882: LD_INT 51
30884: PUSH
30885: LD_INT 52
30887: PUSH
30888: LD_INT 53
30890: PUSH
30891: LD_INT 54
30893: PUSH
30894: LD_INT 55
30896: PUSH
30897: LD_INT 56
30899: PUSH
30900: LD_INT 60
30902: PUSH
30903: LD_INT 61
30905: PUSH
30906: LD_INT 62
30908: PUSH
30909: LD_INT 66
30911: PUSH
30912: LD_INT 67
30914: PUSH
30915: LD_INT 68
30917: PUSH
30918: LD_INT 81
30920: PUSH
30921: LD_INT 82
30923: PUSH
30924: LD_INT 83
30926: PUSH
30927: LD_INT 84
30929: PUSH
30930: LD_INT 85
30932: PUSH
30933: LD_INT 87
30935: PUSH
30936: LD_INT 88
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: ST_TO_ADDR
30995: GO 31228
30997: LD_INT 3
30999: DOUBLE
31000: EQUAL
31001: IFTRUE 31005
31003: GO 31227
31005: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31006: LD_ADDR_VAR 0 4
31010: PUSH
31011: LD_INT 46
31013: PUSH
31014: LD_INT 47
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: LD_INT 2
31022: PUSH
31023: LD_INT 82
31025: PUSH
31026: LD_INT 83
31028: PUSH
31029: LD_INT 84
31031: PUSH
31032: LD_INT 85
31034: PUSH
31035: LD_INT 86
31037: PUSH
31038: LD_INT 11
31040: PUSH
31041: LD_INT 9
31043: PUSH
31044: LD_INT 20
31046: PUSH
31047: LD_INT 19
31049: PUSH
31050: LD_INT 21
31052: PUSH
31053: LD_INT 24
31055: PUSH
31056: LD_INT 22
31058: PUSH
31059: LD_INT 25
31061: PUSH
31062: LD_INT 28
31064: PUSH
31065: LD_INT 29
31067: PUSH
31068: LD_INT 30
31070: PUSH
31071: LD_INT 31
31073: PUSH
31074: LD_INT 37
31076: PUSH
31077: LD_INT 38
31079: PUSH
31080: LD_INT 32
31082: PUSH
31083: LD_INT 27
31085: PUSH
31086: LD_INT 33
31088: PUSH
31089: LD_INT 69
31091: PUSH
31092: LD_INT 39
31094: PUSH
31095: LD_INT 34
31097: PUSH
31098: LD_INT 40
31100: PUSH
31101: LD_INT 71
31103: PUSH
31104: LD_INT 23
31106: PUSH
31107: LD_INT 44
31109: PUSH
31110: LD_INT 48
31112: PUSH
31113: LD_INT 49
31115: PUSH
31116: LD_INT 50
31118: PUSH
31119: LD_INT 51
31121: PUSH
31122: LD_INT 52
31124: PUSH
31125: LD_INT 53
31127: PUSH
31128: LD_INT 54
31130: PUSH
31131: LD_INT 55
31133: PUSH
31134: LD_INT 56
31136: PUSH
31137: LD_INT 57
31139: PUSH
31140: LD_INT 58
31142: PUSH
31143: LD_INT 59
31145: PUSH
31146: LD_INT 63
31148: PUSH
31149: LD_INT 64
31151: PUSH
31152: LD_INT 65
31154: PUSH
31155: LD_INT 82
31157: PUSH
31158: LD_INT 83
31160: PUSH
31161: LD_INT 84
31163: PUSH
31164: LD_INT 85
31166: PUSH
31167: LD_INT 86
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: ST_TO_ADDR
31225: GO 31228
31227: POP
// if state > - 1 and state < 3 then
31228: LD_VAR 0 3
31232: PUSH
31233: LD_INT 1
31235: NEG
31236: GREATER
31237: PUSH
31238: LD_VAR 0 3
31242: PUSH
31243: LD_INT 3
31245: LESS
31246: AND
31247: IFFALSE 31304
// for i in result do
31249: LD_ADDR_VAR 0 5
31253: PUSH
31254: LD_VAR 0 4
31258: PUSH
31259: FOR_IN
31260: IFFALSE 31302
// if GetTech ( i , side ) <> state then
31262: LD_VAR 0 5
31266: PPUSH
31267: LD_VAR 0 1
31271: PPUSH
31272: CALL_OW 321
31276: PUSH
31277: LD_VAR 0 3
31281: NONEQUAL
31282: IFFALSE 31300
// result := result diff i ;
31284: LD_ADDR_VAR 0 4
31288: PUSH
31289: LD_VAR 0 4
31293: PUSH
31294: LD_VAR 0 5
31298: DIFF
31299: ST_TO_ADDR
31300: GO 31259
31302: POP
31303: POP
// end ;
31304: LD_VAR 0 4
31308: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31309: LD_INT 0
31311: PPUSH
31312: PPUSH
31313: PPUSH
// result := true ;
31314: LD_ADDR_VAR 0 3
31318: PUSH
31319: LD_INT 1
31321: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31322: LD_ADDR_VAR 0 5
31326: PUSH
31327: LD_VAR 0 2
31331: PPUSH
31332: CALL_OW 480
31336: ST_TO_ADDR
// if not tmp then
31337: LD_VAR 0 5
31341: NOT
31342: IFFALSE 31346
// exit ;
31344: GO 31395
// for i in tmp do
31346: LD_ADDR_VAR 0 4
31350: PUSH
31351: LD_VAR 0 5
31355: PUSH
31356: FOR_IN
31357: IFFALSE 31393
// if GetTech ( i , side ) <> state_researched then
31359: LD_VAR 0 4
31363: PPUSH
31364: LD_VAR 0 1
31368: PPUSH
31369: CALL_OW 321
31373: PUSH
31374: LD_INT 2
31376: NONEQUAL
31377: IFFALSE 31391
// begin result := false ;
31379: LD_ADDR_VAR 0 3
31383: PUSH
31384: LD_INT 0
31386: ST_TO_ADDR
// exit ;
31387: POP
31388: POP
31389: GO 31395
// end ;
31391: GO 31356
31393: POP
31394: POP
// end ;
31395: LD_VAR 0 3
31399: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31400: LD_INT 0
31402: PPUSH
31403: PPUSH
31404: PPUSH
31405: PPUSH
31406: PPUSH
31407: PPUSH
31408: PPUSH
31409: PPUSH
31410: PPUSH
31411: PPUSH
31412: PPUSH
31413: PPUSH
31414: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31415: LD_VAR 0 1
31419: NOT
31420: PUSH
31421: LD_VAR 0 1
31425: PPUSH
31426: CALL_OW 257
31430: PUSH
31431: LD_INT 9
31433: NONEQUAL
31434: OR
31435: IFFALSE 31439
// exit ;
31437: GO 32012
// side := GetSide ( unit ) ;
31439: LD_ADDR_VAR 0 9
31443: PUSH
31444: LD_VAR 0 1
31448: PPUSH
31449: CALL_OW 255
31453: ST_TO_ADDR
// tech_space := tech_spacanom ;
31454: LD_ADDR_VAR 0 12
31458: PUSH
31459: LD_INT 29
31461: ST_TO_ADDR
// tech_time := tech_taurad ;
31462: LD_ADDR_VAR 0 13
31466: PUSH
31467: LD_INT 28
31469: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31470: LD_ADDR_VAR 0 11
31474: PUSH
31475: LD_VAR 0 1
31479: PPUSH
31480: CALL_OW 310
31484: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31485: LD_VAR 0 11
31489: PPUSH
31490: CALL_OW 247
31494: PUSH
31495: LD_INT 2
31497: EQUAL
31498: IFFALSE 31502
// exit ;
31500: GO 32012
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31502: LD_ADDR_VAR 0 8
31506: PUSH
31507: LD_INT 81
31509: PUSH
31510: LD_VAR 0 9
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 3
31521: PUSH
31522: LD_INT 21
31524: PUSH
31525: LD_INT 3
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PPUSH
31540: CALL_OW 69
31544: ST_TO_ADDR
// if not tmp then
31545: LD_VAR 0 8
31549: NOT
31550: IFFALSE 31554
// exit ;
31552: GO 32012
// if in_unit then
31554: LD_VAR 0 11
31558: IFFALSE 31582
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31560: LD_ADDR_VAR 0 10
31564: PUSH
31565: LD_VAR 0 8
31569: PPUSH
31570: LD_VAR 0 11
31574: PPUSH
31575: CALL_OW 74
31579: ST_TO_ADDR
31580: GO 31602
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31582: LD_ADDR_VAR 0 10
31586: PUSH
31587: LD_VAR 0 8
31591: PPUSH
31592: LD_VAR 0 1
31596: PPUSH
31597: CALL_OW 74
31601: ST_TO_ADDR
// if not enemy then
31602: LD_VAR 0 10
31606: NOT
31607: IFFALSE 31611
// exit ;
31609: GO 32012
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31611: LD_VAR 0 11
31615: PUSH
31616: LD_VAR 0 11
31620: PPUSH
31621: LD_VAR 0 10
31625: PPUSH
31626: CALL_OW 296
31630: PUSH
31631: LD_INT 13
31633: GREATER
31634: AND
31635: PUSH
31636: LD_VAR 0 1
31640: PPUSH
31641: LD_VAR 0 10
31645: PPUSH
31646: CALL_OW 296
31650: PUSH
31651: LD_INT 12
31653: GREATER
31654: OR
31655: IFFALSE 31659
// exit ;
31657: GO 32012
// missile := [ 1 ] ;
31659: LD_ADDR_VAR 0 14
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: EMPTY
31668: LIST
31669: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31670: LD_VAR 0 9
31674: PPUSH
31675: LD_VAR 0 12
31679: PPUSH
31680: CALL_OW 325
31684: IFFALSE 31713
// missile := Replace ( missile , missile + 1 , 2 ) ;
31686: LD_ADDR_VAR 0 14
31690: PUSH
31691: LD_VAR 0 14
31695: PPUSH
31696: LD_VAR 0 14
31700: PUSH
31701: LD_INT 1
31703: PLUS
31704: PPUSH
31705: LD_INT 2
31707: PPUSH
31708: CALL_OW 1
31712: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31713: LD_VAR 0 9
31717: PPUSH
31718: LD_VAR 0 13
31722: PPUSH
31723: CALL_OW 325
31727: PUSH
31728: LD_VAR 0 10
31732: PPUSH
31733: CALL_OW 255
31737: PPUSH
31738: LD_VAR 0 13
31742: PPUSH
31743: CALL_OW 325
31747: NOT
31748: AND
31749: IFFALSE 31778
// missile := Replace ( missile , missile + 1 , 3 ) ;
31751: LD_ADDR_VAR 0 14
31755: PUSH
31756: LD_VAR 0 14
31760: PPUSH
31761: LD_VAR 0 14
31765: PUSH
31766: LD_INT 1
31768: PLUS
31769: PPUSH
31770: LD_INT 3
31772: PPUSH
31773: CALL_OW 1
31777: ST_TO_ADDR
// if missile < 2 then
31778: LD_VAR 0 14
31782: PUSH
31783: LD_INT 2
31785: LESS
31786: IFFALSE 31790
// exit ;
31788: GO 32012
// x := GetX ( enemy ) ;
31790: LD_ADDR_VAR 0 4
31794: PUSH
31795: LD_VAR 0 10
31799: PPUSH
31800: CALL_OW 250
31804: ST_TO_ADDR
// y := GetY ( enemy ) ;
31805: LD_ADDR_VAR 0 5
31809: PUSH
31810: LD_VAR 0 10
31814: PPUSH
31815: CALL_OW 251
31819: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31820: LD_ADDR_VAR 0 6
31824: PUSH
31825: LD_VAR 0 4
31829: PUSH
31830: LD_INT 1
31832: NEG
31833: PPUSH
31834: LD_INT 1
31836: PPUSH
31837: CALL_OW 12
31841: PLUS
31842: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31843: LD_ADDR_VAR 0 7
31847: PUSH
31848: LD_VAR 0 5
31852: PUSH
31853: LD_INT 1
31855: NEG
31856: PPUSH
31857: LD_INT 1
31859: PPUSH
31860: CALL_OW 12
31864: PLUS
31865: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31866: LD_VAR 0 6
31870: PPUSH
31871: LD_VAR 0 7
31875: PPUSH
31876: CALL_OW 488
31880: NOT
31881: IFFALSE 31903
// begin _x := x ;
31883: LD_ADDR_VAR 0 6
31887: PUSH
31888: LD_VAR 0 4
31892: ST_TO_ADDR
// _y := y ;
31893: LD_ADDR_VAR 0 7
31897: PUSH
31898: LD_VAR 0 5
31902: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31903: LD_ADDR_VAR 0 3
31907: PUSH
31908: LD_INT 1
31910: PPUSH
31911: LD_VAR 0 14
31915: PPUSH
31916: CALL_OW 12
31920: ST_TO_ADDR
// case i of 1 :
31921: LD_VAR 0 3
31925: PUSH
31926: LD_INT 1
31928: DOUBLE
31929: EQUAL
31930: IFTRUE 31934
31932: GO 31951
31934: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31935: LD_VAR 0 1
31939: PPUSH
31940: LD_VAR 0 10
31944: PPUSH
31945: CALL_OW 115
31949: GO 32012
31951: LD_INT 2
31953: DOUBLE
31954: EQUAL
31955: IFTRUE 31959
31957: GO 31981
31959: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31960: LD_VAR 0 1
31964: PPUSH
31965: LD_VAR 0 6
31969: PPUSH
31970: LD_VAR 0 7
31974: PPUSH
31975: CALL_OW 153
31979: GO 32012
31981: LD_INT 3
31983: DOUBLE
31984: EQUAL
31985: IFTRUE 31989
31987: GO 32011
31989: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31990: LD_VAR 0 1
31994: PPUSH
31995: LD_VAR 0 6
31999: PPUSH
32000: LD_VAR 0 7
32004: PPUSH
32005: CALL_OW 154
32009: GO 32012
32011: POP
// end ;
32012: LD_VAR 0 2
32016: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32017: LD_INT 0
32019: PPUSH
32020: PPUSH
32021: PPUSH
32022: PPUSH
32023: PPUSH
32024: PPUSH
// if not unit or not building then
32025: LD_VAR 0 1
32029: NOT
32030: PUSH
32031: LD_VAR 0 2
32035: NOT
32036: OR
32037: IFFALSE 32041
// exit ;
32039: GO 32199
// x := GetX ( building ) ;
32041: LD_ADDR_VAR 0 5
32045: PUSH
32046: LD_VAR 0 2
32050: PPUSH
32051: CALL_OW 250
32055: ST_TO_ADDR
// y := GetY ( building ) ;
32056: LD_ADDR_VAR 0 6
32060: PUSH
32061: LD_VAR 0 2
32065: PPUSH
32066: CALL_OW 251
32070: ST_TO_ADDR
// for i = 0 to 5 do
32071: LD_ADDR_VAR 0 4
32075: PUSH
32076: DOUBLE
32077: LD_INT 0
32079: DEC
32080: ST_TO_ADDR
32081: LD_INT 5
32083: PUSH
32084: FOR_TO
32085: IFFALSE 32197
// begin _x := ShiftX ( x , i , 3 ) ;
32087: LD_ADDR_VAR 0 7
32091: PUSH
32092: LD_VAR 0 5
32096: PPUSH
32097: LD_VAR 0 4
32101: PPUSH
32102: LD_INT 3
32104: PPUSH
32105: CALL_OW 272
32109: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32110: LD_ADDR_VAR 0 8
32114: PUSH
32115: LD_VAR 0 6
32119: PPUSH
32120: LD_VAR 0 4
32124: PPUSH
32125: LD_INT 3
32127: PPUSH
32128: CALL_OW 273
32132: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32133: LD_VAR 0 7
32137: PPUSH
32138: LD_VAR 0 8
32142: PPUSH
32143: CALL_OW 488
32147: NOT
32148: IFFALSE 32152
// continue ;
32150: GO 32084
// if HexInfo ( _x , _y ) = 0 then
32152: LD_VAR 0 7
32156: PPUSH
32157: LD_VAR 0 8
32161: PPUSH
32162: CALL_OW 428
32166: PUSH
32167: LD_INT 0
32169: EQUAL
32170: IFFALSE 32195
// begin ComMoveXY ( unit , _x , _y ) ;
32172: LD_VAR 0 1
32176: PPUSH
32177: LD_VAR 0 7
32181: PPUSH
32182: LD_VAR 0 8
32186: PPUSH
32187: CALL_OW 111
// exit ;
32191: POP
32192: POP
32193: GO 32199
// end ; end ;
32195: GO 32084
32197: POP
32198: POP
// end ;
32199: LD_VAR 0 3
32203: RET
// export function ScanBase ( side , base_area ) ; begin
32204: LD_INT 0
32206: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32207: LD_ADDR_VAR 0 3
32211: PUSH
32212: LD_VAR 0 2
32216: PPUSH
32217: LD_INT 81
32219: PUSH
32220: LD_VAR 0 1
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PPUSH
32229: CALL_OW 70
32233: ST_TO_ADDR
// end ;
32234: LD_VAR 0 3
32238: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32239: LD_INT 0
32241: PPUSH
32242: PPUSH
32243: PPUSH
32244: PPUSH
// result := false ;
32245: LD_ADDR_VAR 0 2
32249: PUSH
32250: LD_INT 0
32252: ST_TO_ADDR
// side := GetSide ( unit ) ;
32253: LD_ADDR_VAR 0 3
32257: PUSH
32258: LD_VAR 0 1
32262: PPUSH
32263: CALL_OW 255
32267: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32268: LD_ADDR_VAR 0 4
32272: PUSH
32273: LD_VAR 0 1
32277: PPUSH
32278: CALL_OW 248
32282: ST_TO_ADDR
// case nat of 1 :
32283: LD_VAR 0 4
32287: PUSH
32288: LD_INT 1
32290: DOUBLE
32291: EQUAL
32292: IFTRUE 32296
32294: GO 32307
32296: POP
// tech := tech_lassight ; 2 :
32297: LD_ADDR_VAR 0 5
32301: PUSH
32302: LD_INT 12
32304: ST_TO_ADDR
32305: GO 32346
32307: LD_INT 2
32309: DOUBLE
32310: EQUAL
32311: IFTRUE 32315
32313: GO 32326
32315: POP
// tech := tech_mortar ; 3 :
32316: LD_ADDR_VAR 0 5
32320: PUSH
32321: LD_INT 41
32323: ST_TO_ADDR
32324: GO 32346
32326: LD_INT 3
32328: DOUBLE
32329: EQUAL
32330: IFTRUE 32334
32332: GO 32345
32334: POP
// tech := tech_bazooka ; end ;
32335: LD_ADDR_VAR 0 5
32339: PUSH
32340: LD_INT 44
32342: ST_TO_ADDR
32343: GO 32346
32345: POP
// if Researched ( side , tech ) then
32346: LD_VAR 0 3
32350: PPUSH
32351: LD_VAR 0 5
32355: PPUSH
32356: CALL_OW 325
32360: IFFALSE 32387
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32362: LD_ADDR_VAR 0 2
32366: PUSH
32367: LD_INT 5
32369: PUSH
32370: LD_INT 8
32372: PUSH
32373: LD_INT 9
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: LIST
32380: PUSH
32381: LD_VAR 0 4
32385: ARRAY
32386: ST_TO_ADDR
// end ;
32387: LD_VAR 0 2
32391: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32392: LD_INT 0
32394: PPUSH
32395: PPUSH
32396: PPUSH
// if not mines then
32397: LD_VAR 0 2
32401: NOT
32402: IFFALSE 32406
// exit ;
32404: GO 32550
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32406: LD_ADDR_VAR 0 5
32410: PUSH
32411: LD_INT 81
32413: PUSH
32414: LD_VAR 0 1
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 3
32425: PUSH
32426: LD_INT 21
32428: PUSH
32429: LD_INT 3
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PPUSH
32444: CALL_OW 69
32448: ST_TO_ADDR
// for i in mines do
32449: LD_ADDR_VAR 0 4
32453: PUSH
32454: LD_VAR 0 2
32458: PUSH
32459: FOR_IN
32460: IFFALSE 32548
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32462: LD_VAR 0 4
32466: PUSH
32467: LD_INT 1
32469: ARRAY
32470: PPUSH
32471: LD_VAR 0 4
32475: PUSH
32476: LD_INT 2
32478: ARRAY
32479: PPUSH
32480: CALL_OW 458
32484: NOT
32485: IFFALSE 32489
// continue ;
32487: GO 32459
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32489: LD_VAR 0 4
32493: PUSH
32494: LD_INT 1
32496: ARRAY
32497: PPUSH
32498: LD_VAR 0 4
32502: PUSH
32503: LD_INT 2
32505: ARRAY
32506: PPUSH
32507: CALL_OW 428
32511: PUSH
32512: LD_VAR 0 5
32516: IN
32517: IFFALSE 32546
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32519: LD_VAR 0 4
32523: PUSH
32524: LD_INT 1
32526: ARRAY
32527: PPUSH
32528: LD_VAR 0 4
32532: PUSH
32533: LD_INT 2
32535: ARRAY
32536: PPUSH
32537: LD_VAR 0 1
32541: PPUSH
32542: CALL_OW 456
// end ;
32546: GO 32459
32548: POP
32549: POP
// end ;
32550: LD_VAR 0 3
32554: RET
// export function Count ( array ) ; var i ; begin
32555: LD_INT 0
32557: PPUSH
32558: PPUSH
// result := 0 ;
32559: LD_ADDR_VAR 0 2
32563: PUSH
32564: LD_INT 0
32566: ST_TO_ADDR
// for i in array do
32567: LD_ADDR_VAR 0 3
32571: PUSH
32572: LD_VAR 0 1
32576: PUSH
32577: FOR_IN
32578: IFFALSE 32602
// if i then
32580: LD_VAR 0 3
32584: IFFALSE 32600
// result := result + 1 ;
32586: LD_ADDR_VAR 0 2
32590: PUSH
32591: LD_VAR 0 2
32595: PUSH
32596: LD_INT 1
32598: PLUS
32599: ST_TO_ADDR
32600: GO 32577
32602: POP
32603: POP
// end ;
32604: LD_VAR 0 2
32608: RET
// export function IsEmpty ( building ) ; begin
32609: LD_INT 0
32611: PPUSH
// if not building then
32612: LD_VAR 0 1
32616: NOT
32617: IFFALSE 32621
// exit ;
32619: GO 32664
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32621: LD_ADDR_VAR 0 2
32625: PUSH
32626: LD_VAR 0 1
32630: PUSH
32631: LD_INT 22
32633: PUSH
32634: LD_VAR 0 1
32638: PPUSH
32639: CALL_OW 255
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 58
32650: PUSH
32651: EMPTY
32652: LIST
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PPUSH
32658: CALL_OW 69
32662: IN
32663: ST_TO_ADDR
// end ;
32664: LD_VAR 0 2
32668: RET
// export function IsNotFull ( building ) ; var places ; begin
32669: LD_INT 0
32671: PPUSH
32672: PPUSH
// if not building then
32673: LD_VAR 0 1
32677: NOT
32678: IFFALSE 32682
// exit ;
32680: GO 32853
// result := false ;
32682: LD_ADDR_VAR 0 2
32686: PUSH
32687: LD_INT 0
32689: ST_TO_ADDR
// places := 0 ;
32690: LD_ADDR_VAR 0 3
32694: PUSH
32695: LD_INT 0
32697: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32698: LD_VAR 0 1
32702: PPUSH
32703: CALL_OW 266
32707: PUSH
32708: LD_INT 0
32710: DOUBLE
32711: EQUAL
32712: IFTRUE 32770
32714: LD_INT 1
32716: DOUBLE
32717: EQUAL
32718: IFTRUE 32770
32720: LD_INT 6
32722: DOUBLE
32723: EQUAL
32724: IFTRUE 32770
32726: LD_INT 7
32728: DOUBLE
32729: EQUAL
32730: IFTRUE 32770
32732: LD_INT 8
32734: DOUBLE
32735: EQUAL
32736: IFTRUE 32770
32738: LD_INT 4
32740: DOUBLE
32741: EQUAL
32742: IFTRUE 32770
32744: LD_INT 5
32746: DOUBLE
32747: EQUAL
32748: IFTRUE 32770
32750: LD_INT 2
32752: DOUBLE
32753: EQUAL
32754: IFTRUE 32770
32756: LD_INT 3
32758: DOUBLE
32759: EQUAL
32760: IFTRUE 32770
32762: LD_INT 35
32764: DOUBLE
32765: EQUAL
32766: IFTRUE 32770
32768: GO 32781
32770: POP
// places := 6 ; b_bunker , b_breastwork :
32771: LD_ADDR_VAR 0 3
32775: PUSH
32776: LD_INT 6
32778: ST_TO_ADDR
32779: GO 32826
32781: LD_INT 32
32783: DOUBLE
32784: EQUAL
32785: IFTRUE 32795
32787: LD_INT 31
32789: DOUBLE
32790: EQUAL
32791: IFTRUE 32795
32793: GO 32806
32795: POP
// places := 1 ; b_control_tower :
32796: LD_ADDR_VAR 0 3
32800: PUSH
32801: LD_INT 1
32803: ST_TO_ADDR
32804: GO 32826
32806: LD_INT 36
32808: DOUBLE
32809: EQUAL
32810: IFTRUE 32814
32812: GO 32825
32814: POP
// places := 3 ; end ;
32815: LD_ADDR_VAR 0 3
32819: PUSH
32820: LD_INT 3
32822: ST_TO_ADDR
32823: GO 32826
32825: POP
// if places then
32826: LD_VAR 0 3
32830: IFFALSE 32853
// result := UnitsInside ( building ) < places ;
32832: LD_ADDR_VAR 0 2
32836: PUSH
32837: LD_VAR 0 1
32841: PPUSH
32842: CALL_OW 313
32846: PUSH
32847: LD_VAR 0 3
32851: LESS
32852: ST_TO_ADDR
// end ;
32853: LD_VAR 0 2
32857: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32858: LD_INT 0
32860: PPUSH
32861: PPUSH
32862: PPUSH
32863: PPUSH
// tmp := [ ] ;
32864: LD_ADDR_VAR 0 3
32868: PUSH
32869: EMPTY
32870: ST_TO_ADDR
// list := [ ] ;
32871: LD_ADDR_VAR 0 5
32875: PUSH
32876: EMPTY
32877: ST_TO_ADDR
// for i = 16 to 25 do
32878: LD_ADDR_VAR 0 4
32882: PUSH
32883: DOUBLE
32884: LD_INT 16
32886: DEC
32887: ST_TO_ADDR
32888: LD_INT 25
32890: PUSH
32891: FOR_TO
32892: IFFALSE 32965
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32894: LD_ADDR_VAR 0 3
32898: PUSH
32899: LD_VAR 0 3
32903: PUSH
32904: LD_INT 22
32906: PUSH
32907: LD_VAR 0 1
32911: PPUSH
32912: CALL_OW 255
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 91
32923: PUSH
32924: LD_VAR 0 1
32928: PUSH
32929: LD_INT 6
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 30
32939: PUSH
32940: LD_VAR 0 4
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: LIST
32953: PUSH
32954: EMPTY
32955: LIST
32956: PPUSH
32957: CALL_OW 69
32961: ADD
32962: ST_TO_ADDR
32963: GO 32891
32965: POP
32966: POP
// for i = 1 to tmp do
32967: LD_ADDR_VAR 0 4
32971: PUSH
32972: DOUBLE
32973: LD_INT 1
32975: DEC
32976: ST_TO_ADDR
32977: LD_VAR 0 3
32981: PUSH
32982: FOR_TO
32983: IFFALSE 33071
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32985: LD_ADDR_VAR 0 5
32989: PUSH
32990: LD_VAR 0 5
32994: PUSH
32995: LD_VAR 0 3
32999: PUSH
33000: LD_VAR 0 4
33004: ARRAY
33005: PPUSH
33006: CALL_OW 266
33010: PUSH
33011: LD_VAR 0 3
33015: PUSH
33016: LD_VAR 0 4
33020: ARRAY
33021: PPUSH
33022: CALL_OW 250
33026: PUSH
33027: LD_VAR 0 3
33031: PUSH
33032: LD_VAR 0 4
33036: ARRAY
33037: PPUSH
33038: CALL_OW 251
33042: PUSH
33043: LD_VAR 0 3
33047: PUSH
33048: LD_VAR 0 4
33052: ARRAY
33053: PPUSH
33054: CALL_OW 254
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: PUSH
33065: EMPTY
33066: LIST
33067: ADD
33068: ST_TO_ADDR
33069: GO 32982
33071: POP
33072: POP
// result := list ;
33073: LD_ADDR_VAR 0 2
33077: PUSH
33078: LD_VAR 0 5
33082: ST_TO_ADDR
// end ;
33083: LD_VAR 0 2
33087: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33088: LD_INT 0
33090: PPUSH
33091: PPUSH
33092: PPUSH
33093: PPUSH
33094: PPUSH
33095: PPUSH
33096: PPUSH
// if not factory then
33097: LD_VAR 0 1
33101: NOT
33102: IFFALSE 33106
// exit ;
33104: GO 33699
// if control = control_apeman then
33106: LD_VAR 0 4
33110: PUSH
33111: LD_INT 5
33113: EQUAL
33114: IFFALSE 33223
// begin tmp := UnitsInside ( factory ) ;
33116: LD_ADDR_VAR 0 8
33120: PUSH
33121: LD_VAR 0 1
33125: PPUSH
33126: CALL_OW 313
33130: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33131: LD_VAR 0 8
33135: PPUSH
33136: LD_INT 25
33138: PUSH
33139: LD_INT 12
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PPUSH
33146: CALL_OW 72
33150: NOT
33151: IFFALSE 33161
// control := control_manual ;
33153: LD_ADDR_VAR 0 4
33157: PUSH
33158: LD_INT 1
33160: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33161: LD_ADDR_VAR 0 8
33165: PUSH
33166: LD_VAR 0 1
33170: PPUSH
33171: CALL 32858 0 1
33175: ST_TO_ADDR
// if tmp then
33176: LD_VAR 0 8
33180: IFFALSE 33223
// begin for i in tmp do
33182: LD_ADDR_VAR 0 7
33186: PUSH
33187: LD_VAR 0 8
33191: PUSH
33192: FOR_IN
33193: IFFALSE 33221
// if i [ 1 ] = b_ext_radio then
33195: LD_VAR 0 7
33199: PUSH
33200: LD_INT 1
33202: ARRAY
33203: PUSH
33204: LD_INT 22
33206: EQUAL
33207: IFFALSE 33219
// begin control := control_remote ;
33209: LD_ADDR_VAR 0 4
33213: PUSH
33214: LD_INT 2
33216: ST_TO_ADDR
// break ;
33217: GO 33221
// end ;
33219: GO 33192
33221: POP
33222: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33223: LD_VAR 0 1
33227: PPUSH
33228: LD_VAR 0 2
33232: PPUSH
33233: LD_VAR 0 3
33237: PPUSH
33238: LD_VAR 0 4
33242: PPUSH
33243: LD_VAR 0 5
33247: PPUSH
33248: CALL_OW 448
33252: IFFALSE 33287
// begin result := [ chassis , engine , control , weapon ] ;
33254: LD_ADDR_VAR 0 6
33258: PUSH
33259: LD_VAR 0 2
33263: PUSH
33264: LD_VAR 0 3
33268: PUSH
33269: LD_VAR 0 4
33273: PUSH
33274: LD_VAR 0 5
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: ST_TO_ADDR
// exit ;
33285: GO 33699
// end ; _chassis := AvailableChassisList ( factory ) ;
33287: LD_ADDR_VAR 0 9
33291: PUSH
33292: LD_VAR 0 1
33296: PPUSH
33297: CALL_OW 475
33301: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33302: LD_ADDR_VAR 0 11
33306: PUSH
33307: LD_VAR 0 1
33311: PPUSH
33312: CALL_OW 476
33316: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33317: LD_ADDR_VAR 0 12
33321: PUSH
33322: LD_VAR 0 1
33326: PPUSH
33327: CALL_OW 477
33331: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33332: LD_ADDR_VAR 0 10
33336: PUSH
33337: LD_VAR 0 1
33341: PPUSH
33342: CALL_OW 478
33346: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33347: LD_VAR 0 9
33351: NOT
33352: PUSH
33353: LD_VAR 0 11
33357: NOT
33358: OR
33359: PUSH
33360: LD_VAR 0 12
33364: NOT
33365: OR
33366: PUSH
33367: LD_VAR 0 10
33371: NOT
33372: OR
33373: IFFALSE 33408
// begin result := [ chassis , engine , control , weapon ] ;
33375: LD_ADDR_VAR 0 6
33379: PUSH
33380: LD_VAR 0 2
33384: PUSH
33385: LD_VAR 0 3
33389: PUSH
33390: LD_VAR 0 4
33394: PUSH
33395: LD_VAR 0 5
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: ST_TO_ADDR
// exit ;
33406: GO 33699
// end ; if not chassis in _chassis then
33408: LD_VAR 0 2
33412: PUSH
33413: LD_VAR 0 9
33417: IN
33418: NOT
33419: IFFALSE 33445
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33421: LD_ADDR_VAR 0 2
33425: PUSH
33426: LD_VAR 0 9
33430: PUSH
33431: LD_INT 1
33433: PPUSH
33434: LD_VAR 0 9
33438: PPUSH
33439: CALL_OW 12
33443: ARRAY
33444: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33445: LD_VAR 0 2
33449: PPUSH
33450: LD_VAR 0 3
33454: PPUSH
33455: CALL 33704 0 2
33459: NOT
33460: IFFALSE 33519
// repeat engine := _engine [ 1 ] ;
33462: LD_ADDR_VAR 0 3
33466: PUSH
33467: LD_VAR 0 11
33471: PUSH
33472: LD_INT 1
33474: ARRAY
33475: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33476: LD_ADDR_VAR 0 11
33480: PUSH
33481: LD_VAR 0 11
33485: PPUSH
33486: LD_INT 1
33488: PPUSH
33489: CALL_OW 3
33493: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33494: LD_VAR 0 2
33498: PPUSH
33499: LD_VAR 0 3
33503: PPUSH
33504: CALL 33704 0 2
33508: PUSH
33509: LD_VAR 0 11
33513: PUSH
33514: EMPTY
33515: EQUAL
33516: OR
33517: IFFALSE 33462
// if not control in _control then
33519: LD_VAR 0 4
33523: PUSH
33524: LD_VAR 0 12
33528: IN
33529: NOT
33530: IFFALSE 33556
// control := _control [ rand ( 1 , _control ) ] ;
33532: LD_ADDR_VAR 0 4
33536: PUSH
33537: LD_VAR 0 12
33541: PUSH
33542: LD_INT 1
33544: PPUSH
33545: LD_VAR 0 12
33549: PPUSH
33550: CALL_OW 12
33554: ARRAY
33555: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33556: LD_VAR 0 2
33560: PPUSH
33561: LD_VAR 0 5
33565: PPUSH
33566: CALL 33924 0 2
33570: NOT
33571: IFFALSE 33630
// repeat weapon := _weapon [ 1 ] ;
33573: LD_ADDR_VAR 0 5
33577: PUSH
33578: LD_VAR 0 10
33582: PUSH
33583: LD_INT 1
33585: ARRAY
33586: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33587: LD_ADDR_VAR 0 10
33591: PUSH
33592: LD_VAR 0 10
33596: PPUSH
33597: LD_INT 1
33599: PPUSH
33600: CALL_OW 3
33604: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33605: LD_VAR 0 2
33609: PPUSH
33610: LD_VAR 0 5
33614: PPUSH
33615: CALL 33924 0 2
33619: PUSH
33620: LD_VAR 0 10
33624: PUSH
33625: EMPTY
33626: EQUAL
33627: OR
33628: IFFALSE 33573
// result := [ ] ;
33630: LD_ADDR_VAR 0 6
33634: PUSH
33635: EMPTY
33636: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33637: LD_VAR 0 1
33641: PPUSH
33642: LD_VAR 0 2
33646: PPUSH
33647: LD_VAR 0 3
33651: PPUSH
33652: LD_VAR 0 4
33656: PPUSH
33657: LD_VAR 0 5
33661: PPUSH
33662: CALL_OW 448
33666: IFFALSE 33699
// result := [ chassis , engine , control , weapon ] ;
33668: LD_ADDR_VAR 0 6
33672: PUSH
33673: LD_VAR 0 2
33677: PUSH
33678: LD_VAR 0 3
33682: PUSH
33683: LD_VAR 0 4
33687: PUSH
33688: LD_VAR 0 5
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: ST_TO_ADDR
// end ;
33699: LD_VAR 0 6
33703: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33704: LD_INT 0
33706: PPUSH
// if not chassis or not engine then
33707: LD_VAR 0 1
33711: NOT
33712: PUSH
33713: LD_VAR 0 2
33717: NOT
33718: OR
33719: IFFALSE 33723
// exit ;
33721: GO 33919
// case engine of engine_solar :
33723: LD_VAR 0 2
33727: PUSH
33728: LD_INT 2
33730: DOUBLE
33731: EQUAL
33732: IFTRUE 33736
33734: GO 33774
33736: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33737: LD_ADDR_VAR 0 3
33741: PUSH
33742: LD_INT 11
33744: PUSH
33745: LD_INT 12
33747: PUSH
33748: LD_INT 13
33750: PUSH
33751: LD_INT 14
33753: PUSH
33754: LD_INT 1
33756: PUSH
33757: LD_INT 2
33759: PUSH
33760: LD_INT 3
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: ST_TO_ADDR
33772: GO 33903
33774: LD_INT 1
33776: DOUBLE
33777: EQUAL
33778: IFTRUE 33782
33780: GO 33844
33782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33783: LD_ADDR_VAR 0 3
33787: PUSH
33788: LD_INT 11
33790: PUSH
33791: LD_INT 12
33793: PUSH
33794: LD_INT 13
33796: PUSH
33797: LD_INT 14
33799: PUSH
33800: LD_INT 1
33802: PUSH
33803: LD_INT 2
33805: PUSH
33806: LD_INT 3
33808: PUSH
33809: LD_INT 4
33811: PUSH
33812: LD_INT 5
33814: PUSH
33815: LD_INT 21
33817: PUSH
33818: LD_INT 23
33820: PUSH
33821: LD_INT 22
33823: PUSH
33824: LD_INT 24
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: ST_TO_ADDR
33842: GO 33903
33844: LD_INT 3
33846: DOUBLE
33847: EQUAL
33848: IFTRUE 33852
33850: GO 33902
33852: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33853: LD_ADDR_VAR 0 3
33857: PUSH
33858: LD_INT 13
33860: PUSH
33861: LD_INT 14
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: LD_INT 3
33869: PUSH
33870: LD_INT 4
33872: PUSH
33873: LD_INT 5
33875: PUSH
33876: LD_INT 21
33878: PUSH
33879: LD_INT 22
33881: PUSH
33882: LD_INT 23
33884: PUSH
33885: LD_INT 24
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: ST_TO_ADDR
33900: GO 33903
33902: POP
// result := ( chassis in result ) ;
33903: LD_ADDR_VAR 0 3
33907: PUSH
33908: LD_VAR 0 1
33912: PUSH
33913: LD_VAR 0 3
33917: IN
33918: ST_TO_ADDR
// end ;
33919: LD_VAR 0 3
33923: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33924: LD_INT 0
33926: PPUSH
// if not chassis or not weapon then
33927: LD_VAR 0 1
33931: NOT
33932: PUSH
33933: LD_VAR 0 2
33937: NOT
33938: OR
33939: IFFALSE 33943
// exit ;
33941: GO 35003
// case weapon of us_machine_gun :
33943: LD_VAR 0 2
33947: PUSH
33948: LD_INT 2
33950: DOUBLE
33951: EQUAL
33952: IFTRUE 33956
33954: GO 33986
33956: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33957: LD_ADDR_VAR 0 3
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: LD_INT 2
33967: PUSH
33968: LD_INT 3
33970: PUSH
33971: LD_INT 4
33973: PUSH
33974: LD_INT 5
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: ST_TO_ADDR
33984: GO 34987
33986: LD_INT 3
33988: DOUBLE
33989: EQUAL
33990: IFTRUE 33994
33992: GO 34024
33994: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33995: LD_ADDR_VAR 0 3
33999: PUSH
34000: LD_INT 1
34002: PUSH
34003: LD_INT 2
34005: PUSH
34006: LD_INT 3
34008: PUSH
34009: LD_INT 4
34011: PUSH
34012: LD_INT 5
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: ST_TO_ADDR
34022: GO 34987
34024: LD_INT 11
34026: DOUBLE
34027: EQUAL
34028: IFTRUE 34032
34030: GO 34062
34032: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34033: LD_ADDR_VAR 0 3
34037: PUSH
34038: LD_INT 1
34040: PUSH
34041: LD_INT 2
34043: PUSH
34044: LD_INT 3
34046: PUSH
34047: LD_INT 4
34049: PUSH
34050: LD_INT 5
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: ST_TO_ADDR
34060: GO 34987
34062: LD_INT 4
34064: DOUBLE
34065: EQUAL
34066: IFTRUE 34070
34068: GO 34096
34070: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34071: LD_ADDR_VAR 0 3
34075: PUSH
34076: LD_INT 2
34078: PUSH
34079: LD_INT 3
34081: PUSH
34082: LD_INT 4
34084: PUSH
34085: LD_INT 5
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: ST_TO_ADDR
34094: GO 34987
34096: LD_INT 5
34098: DOUBLE
34099: EQUAL
34100: IFTRUE 34104
34102: GO 34130
34104: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34105: LD_ADDR_VAR 0 3
34109: PUSH
34110: LD_INT 2
34112: PUSH
34113: LD_INT 3
34115: PUSH
34116: LD_INT 4
34118: PUSH
34119: LD_INT 5
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: ST_TO_ADDR
34128: GO 34987
34130: LD_INT 9
34132: DOUBLE
34133: EQUAL
34134: IFTRUE 34138
34136: GO 34164
34138: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34139: LD_ADDR_VAR 0 3
34143: PUSH
34144: LD_INT 2
34146: PUSH
34147: LD_INT 3
34149: PUSH
34150: LD_INT 4
34152: PUSH
34153: LD_INT 5
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: ST_TO_ADDR
34162: GO 34987
34164: LD_INT 7
34166: DOUBLE
34167: EQUAL
34168: IFTRUE 34172
34170: GO 34198
34172: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34173: LD_ADDR_VAR 0 3
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: LD_INT 3
34183: PUSH
34184: LD_INT 4
34186: PUSH
34187: LD_INT 5
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: ST_TO_ADDR
34196: GO 34987
34198: LD_INT 12
34200: DOUBLE
34201: EQUAL
34202: IFTRUE 34206
34204: GO 34232
34206: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34207: LD_ADDR_VAR 0 3
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: LD_INT 3
34217: PUSH
34218: LD_INT 4
34220: PUSH
34221: LD_INT 5
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: ST_TO_ADDR
34230: GO 34987
34232: LD_INT 13
34234: DOUBLE
34235: EQUAL
34236: IFTRUE 34240
34238: GO 34266
34240: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34241: LD_ADDR_VAR 0 3
34245: PUSH
34246: LD_INT 2
34248: PUSH
34249: LD_INT 3
34251: PUSH
34252: LD_INT 4
34254: PUSH
34255: LD_INT 5
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: ST_TO_ADDR
34264: GO 34987
34266: LD_INT 14
34268: DOUBLE
34269: EQUAL
34270: IFTRUE 34274
34272: GO 34292
34274: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34275: LD_ADDR_VAR 0 3
34279: PUSH
34280: LD_INT 4
34282: PUSH
34283: LD_INT 5
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: ST_TO_ADDR
34290: GO 34987
34292: LD_INT 6
34294: DOUBLE
34295: EQUAL
34296: IFTRUE 34300
34298: GO 34318
34300: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34301: LD_ADDR_VAR 0 3
34305: PUSH
34306: LD_INT 4
34308: PUSH
34309: LD_INT 5
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: ST_TO_ADDR
34316: GO 34987
34318: LD_INT 10
34320: DOUBLE
34321: EQUAL
34322: IFTRUE 34326
34324: GO 34344
34326: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34327: LD_ADDR_VAR 0 3
34331: PUSH
34332: LD_INT 4
34334: PUSH
34335: LD_INT 5
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: ST_TO_ADDR
34342: GO 34987
34344: LD_INT 22
34346: DOUBLE
34347: EQUAL
34348: IFTRUE 34352
34350: GO 34378
34352: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34353: LD_ADDR_VAR 0 3
34357: PUSH
34358: LD_INT 11
34360: PUSH
34361: LD_INT 12
34363: PUSH
34364: LD_INT 13
34366: PUSH
34367: LD_INT 14
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: ST_TO_ADDR
34376: GO 34987
34378: LD_INT 23
34380: DOUBLE
34381: EQUAL
34382: IFTRUE 34386
34384: GO 34412
34386: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34387: LD_ADDR_VAR 0 3
34391: PUSH
34392: LD_INT 11
34394: PUSH
34395: LD_INT 12
34397: PUSH
34398: LD_INT 13
34400: PUSH
34401: LD_INT 14
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: ST_TO_ADDR
34410: GO 34987
34412: LD_INT 24
34414: DOUBLE
34415: EQUAL
34416: IFTRUE 34420
34418: GO 34446
34420: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34421: LD_ADDR_VAR 0 3
34425: PUSH
34426: LD_INT 11
34428: PUSH
34429: LD_INT 12
34431: PUSH
34432: LD_INT 13
34434: PUSH
34435: LD_INT 14
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: ST_TO_ADDR
34444: GO 34987
34446: LD_INT 30
34448: DOUBLE
34449: EQUAL
34450: IFTRUE 34454
34452: GO 34480
34454: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34455: LD_ADDR_VAR 0 3
34459: PUSH
34460: LD_INT 11
34462: PUSH
34463: LD_INT 12
34465: PUSH
34466: LD_INT 13
34468: PUSH
34469: LD_INT 14
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: ST_TO_ADDR
34478: GO 34987
34480: LD_INT 25
34482: DOUBLE
34483: EQUAL
34484: IFTRUE 34488
34486: GO 34506
34488: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34489: LD_ADDR_VAR 0 3
34493: PUSH
34494: LD_INT 13
34496: PUSH
34497: LD_INT 14
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: ST_TO_ADDR
34504: GO 34987
34506: LD_INT 27
34508: DOUBLE
34509: EQUAL
34510: IFTRUE 34514
34512: GO 34532
34514: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34515: LD_ADDR_VAR 0 3
34519: PUSH
34520: LD_INT 13
34522: PUSH
34523: LD_INT 14
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: ST_TO_ADDR
34530: GO 34987
34532: LD_INT 92
34534: DOUBLE
34535: EQUAL
34536: IFTRUE 34540
34538: GO 34566
34540: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34541: LD_ADDR_VAR 0 3
34545: PUSH
34546: LD_INT 11
34548: PUSH
34549: LD_INT 12
34551: PUSH
34552: LD_INT 13
34554: PUSH
34555: LD_INT 14
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: ST_TO_ADDR
34564: GO 34987
34566: LD_INT 28
34568: DOUBLE
34569: EQUAL
34570: IFTRUE 34574
34572: GO 34592
34574: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34575: LD_ADDR_VAR 0 3
34579: PUSH
34580: LD_INT 13
34582: PUSH
34583: LD_INT 14
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: ST_TO_ADDR
34590: GO 34987
34592: LD_INT 29
34594: DOUBLE
34595: EQUAL
34596: IFTRUE 34600
34598: GO 34618
34600: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34601: LD_ADDR_VAR 0 3
34605: PUSH
34606: LD_INT 13
34608: PUSH
34609: LD_INT 14
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: ST_TO_ADDR
34616: GO 34987
34618: LD_INT 31
34620: DOUBLE
34621: EQUAL
34622: IFTRUE 34626
34624: GO 34644
34626: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34627: LD_ADDR_VAR 0 3
34631: PUSH
34632: LD_INT 13
34634: PUSH
34635: LD_INT 14
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: ST_TO_ADDR
34642: GO 34987
34644: LD_INT 26
34646: DOUBLE
34647: EQUAL
34648: IFTRUE 34652
34650: GO 34670
34652: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34653: LD_ADDR_VAR 0 3
34657: PUSH
34658: LD_INT 13
34660: PUSH
34661: LD_INT 14
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: ST_TO_ADDR
34668: GO 34987
34670: LD_INT 42
34672: DOUBLE
34673: EQUAL
34674: IFTRUE 34678
34676: GO 34704
34678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34679: LD_ADDR_VAR 0 3
34683: PUSH
34684: LD_INT 21
34686: PUSH
34687: LD_INT 22
34689: PUSH
34690: LD_INT 23
34692: PUSH
34693: LD_INT 24
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: ST_TO_ADDR
34702: GO 34987
34704: LD_INT 43
34706: DOUBLE
34707: EQUAL
34708: IFTRUE 34712
34710: GO 34738
34712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34713: LD_ADDR_VAR 0 3
34717: PUSH
34718: LD_INT 21
34720: PUSH
34721: LD_INT 22
34723: PUSH
34724: LD_INT 23
34726: PUSH
34727: LD_INT 24
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: ST_TO_ADDR
34736: GO 34987
34738: LD_INT 44
34740: DOUBLE
34741: EQUAL
34742: IFTRUE 34746
34744: GO 34772
34746: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34747: LD_ADDR_VAR 0 3
34751: PUSH
34752: LD_INT 21
34754: PUSH
34755: LD_INT 22
34757: PUSH
34758: LD_INT 23
34760: PUSH
34761: LD_INT 24
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: ST_TO_ADDR
34770: GO 34987
34772: LD_INT 45
34774: DOUBLE
34775: EQUAL
34776: IFTRUE 34780
34778: GO 34806
34780: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34781: LD_ADDR_VAR 0 3
34785: PUSH
34786: LD_INT 21
34788: PUSH
34789: LD_INT 22
34791: PUSH
34792: LD_INT 23
34794: PUSH
34795: LD_INT 24
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: ST_TO_ADDR
34804: GO 34987
34806: LD_INT 49
34808: DOUBLE
34809: EQUAL
34810: IFTRUE 34814
34812: GO 34840
34814: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34815: LD_ADDR_VAR 0 3
34819: PUSH
34820: LD_INT 21
34822: PUSH
34823: LD_INT 22
34825: PUSH
34826: LD_INT 23
34828: PUSH
34829: LD_INT 24
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: ST_TO_ADDR
34838: GO 34987
34840: LD_INT 51
34842: DOUBLE
34843: EQUAL
34844: IFTRUE 34848
34846: GO 34874
34848: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34849: LD_ADDR_VAR 0 3
34853: PUSH
34854: LD_INT 21
34856: PUSH
34857: LD_INT 22
34859: PUSH
34860: LD_INT 23
34862: PUSH
34863: LD_INT 24
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: ST_TO_ADDR
34872: GO 34987
34874: LD_INT 52
34876: DOUBLE
34877: EQUAL
34878: IFTRUE 34882
34880: GO 34908
34882: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34883: LD_ADDR_VAR 0 3
34887: PUSH
34888: LD_INT 21
34890: PUSH
34891: LD_INT 22
34893: PUSH
34894: LD_INT 23
34896: PUSH
34897: LD_INT 24
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: ST_TO_ADDR
34906: GO 34987
34908: LD_INT 53
34910: DOUBLE
34911: EQUAL
34912: IFTRUE 34916
34914: GO 34934
34916: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34917: LD_ADDR_VAR 0 3
34921: PUSH
34922: LD_INT 23
34924: PUSH
34925: LD_INT 24
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: ST_TO_ADDR
34932: GO 34987
34934: LD_INT 46
34936: DOUBLE
34937: EQUAL
34938: IFTRUE 34942
34940: GO 34960
34942: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34943: LD_ADDR_VAR 0 3
34947: PUSH
34948: LD_INT 23
34950: PUSH
34951: LD_INT 24
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: ST_TO_ADDR
34958: GO 34987
34960: LD_INT 47
34962: DOUBLE
34963: EQUAL
34964: IFTRUE 34968
34966: GO 34986
34968: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34969: LD_ADDR_VAR 0 3
34973: PUSH
34974: LD_INT 23
34976: PUSH
34977: LD_INT 24
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: ST_TO_ADDR
34984: GO 34987
34986: POP
// result := ( chassis in result ) ;
34987: LD_ADDR_VAR 0 3
34991: PUSH
34992: LD_VAR 0 1
34996: PUSH
34997: LD_VAR 0 3
35001: IN
35002: ST_TO_ADDR
// end ;
35003: LD_VAR 0 3
35007: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35008: LD_INT 0
35010: PPUSH
35011: PPUSH
35012: PPUSH
35013: PPUSH
35014: PPUSH
35015: PPUSH
35016: PPUSH
// result := array ;
35017: LD_ADDR_VAR 0 5
35021: PUSH
35022: LD_VAR 0 1
35026: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35027: LD_VAR 0 1
35031: NOT
35032: PUSH
35033: LD_VAR 0 2
35037: NOT
35038: OR
35039: PUSH
35040: LD_VAR 0 3
35044: NOT
35045: OR
35046: PUSH
35047: LD_VAR 0 2
35051: PUSH
35052: LD_VAR 0 1
35056: GREATER
35057: OR
35058: PUSH
35059: LD_VAR 0 3
35063: PUSH
35064: LD_VAR 0 1
35068: GREATER
35069: OR
35070: IFFALSE 35074
// exit ;
35072: GO 35370
// if direction then
35074: LD_VAR 0 4
35078: IFFALSE 35142
// begin d := 1 ;
35080: LD_ADDR_VAR 0 9
35084: PUSH
35085: LD_INT 1
35087: ST_TO_ADDR
// if i_from > i_to then
35088: LD_VAR 0 2
35092: PUSH
35093: LD_VAR 0 3
35097: GREATER
35098: IFFALSE 35124
// length := ( array - i_from ) + i_to else
35100: LD_ADDR_VAR 0 11
35104: PUSH
35105: LD_VAR 0 1
35109: PUSH
35110: LD_VAR 0 2
35114: MINUS
35115: PUSH
35116: LD_VAR 0 3
35120: PLUS
35121: ST_TO_ADDR
35122: GO 35140
// length := i_to - i_from ;
35124: LD_ADDR_VAR 0 11
35128: PUSH
35129: LD_VAR 0 3
35133: PUSH
35134: LD_VAR 0 2
35138: MINUS
35139: ST_TO_ADDR
// end else
35140: GO 35203
// begin d := - 1 ;
35142: LD_ADDR_VAR 0 9
35146: PUSH
35147: LD_INT 1
35149: NEG
35150: ST_TO_ADDR
// if i_from > i_to then
35151: LD_VAR 0 2
35155: PUSH
35156: LD_VAR 0 3
35160: GREATER
35161: IFFALSE 35181
// length := i_from - i_to else
35163: LD_ADDR_VAR 0 11
35167: PUSH
35168: LD_VAR 0 2
35172: PUSH
35173: LD_VAR 0 3
35177: MINUS
35178: ST_TO_ADDR
35179: GO 35203
// length := ( array - i_to ) + i_from ;
35181: LD_ADDR_VAR 0 11
35185: PUSH
35186: LD_VAR 0 1
35190: PUSH
35191: LD_VAR 0 3
35195: MINUS
35196: PUSH
35197: LD_VAR 0 2
35201: PLUS
35202: ST_TO_ADDR
// end ; if not length then
35203: LD_VAR 0 11
35207: NOT
35208: IFFALSE 35212
// exit ;
35210: GO 35370
// tmp := array ;
35212: LD_ADDR_VAR 0 10
35216: PUSH
35217: LD_VAR 0 1
35221: ST_TO_ADDR
// for i = 1 to length do
35222: LD_ADDR_VAR 0 6
35226: PUSH
35227: DOUBLE
35228: LD_INT 1
35230: DEC
35231: ST_TO_ADDR
35232: LD_VAR 0 11
35236: PUSH
35237: FOR_TO
35238: IFFALSE 35358
// begin for j = 1 to array do
35240: LD_ADDR_VAR 0 7
35244: PUSH
35245: DOUBLE
35246: LD_INT 1
35248: DEC
35249: ST_TO_ADDR
35250: LD_VAR 0 1
35254: PUSH
35255: FOR_TO
35256: IFFALSE 35344
// begin k := j + d ;
35258: LD_ADDR_VAR 0 8
35262: PUSH
35263: LD_VAR 0 7
35267: PUSH
35268: LD_VAR 0 9
35272: PLUS
35273: ST_TO_ADDR
// if k > array then
35274: LD_VAR 0 8
35278: PUSH
35279: LD_VAR 0 1
35283: GREATER
35284: IFFALSE 35294
// k := 1 ;
35286: LD_ADDR_VAR 0 8
35290: PUSH
35291: LD_INT 1
35293: ST_TO_ADDR
// if not k then
35294: LD_VAR 0 8
35298: NOT
35299: IFFALSE 35311
// k := array ;
35301: LD_ADDR_VAR 0 8
35305: PUSH
35306: LD_VAR 0 1
35310: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35311: LD_ADDR_VAR 0 10
35315: PUSH
35316: LD_VAR 0 10
35320: PPUSH
35321: LD_VAR 0 8
35325: PPUSH
35326: LD_VAR 0 1
35330: PUSH
35331: LD_VAR 0 7
35335: ARRAY
35336: PPUSH
35337: CALL_OW 1
35341: ST_TO_ADDR
// end ;
35342: GO 35255
35344: POP
35345: POP
// array := tmp ;
35346: LD_ADDR_VAR 0 1
35350: PUSH
35351: LD_VAR 0 10
35355: ST_TO_ADDR
// end ;
35356: GO 35237
35358: POP
35359: POP
// result := array ;
35360: LD_ADDR_VAR 0 5
35364: PUSH
35365: LD_VAR 0 1
35369: ST_TO_ADDR
// end ;
35370: LD_VAR 0 5
35374: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35375: LD_INT 0
35377: PPUSH
35378: PPUSH
// result := 0 ;
35379: LD_ADDR_VAR 0 3
35383: PUSH
35384: LD_INT 0
35386: ST_TO_ADDR
// if not array or not value in array then
35387: LD_VAR 0 1
35391: NOT
35392: PUSH
35393: LD_VAR 0 2
35397: PUSH
35398: LD_VAR 0 1
35402: IN
35403: NOT
35404: OR
35405: IFFALSE 35409
// exit ;
35407: GO 35463
// for i = 1 to array do
35409: LD_ADDR_VAR 0 4
35413: PUSH
35414: DOUBLE
35415: LD_INT 1
35417: DEC
35418: ST_TO_ADDR
35419: LD_VAR 0 1
35423: PUSH
35424: FOR_TO
35425: IFFALSE 35461
// if value = array [ i ] then
35427: LD_VAR 0 2
35431: PUSH
35432: LD_VAR 0 1
35436: PUSH
35437: LD_VAR 0 4
35441: ARRAY
35442: EQUAL
35443: IFFALSE 35459
// begin result := i ;
35445: LD_ADDR_VAR 0 3
35449: PUSH
35450: LD_VAR 0 4
35454: ST_TO_ADDR
// exit ;
35455: POP
35456: POP
35457: GO 35463
// end ;
35459: GO 35424
35461: POP
35462: POP
// end ;
35463: LD_VAR 0 3
35467: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35468: LD_INT 0
35470: PPUSH
// vc_chassis := chassis ;
35471: LD_ADDR_OWVAR 37
35475: PUSH
35476: LD_VAR 0 1
35480: ST_TO_ADDR
// vc_engine := engine ;
35481: LD_ADDR_OWVAR 39
35485: PUSH
35486: LD_VAR 0 2
35490: ST_TO_ADDR
// vc_control := control ;
35491: LD_ADDR_OWVAR 38
35495: PUSH
35496: LD_VAR 0 3
35500: ST_TO_ADDR
// vc_weapon := weapon ;
35501: LD_ADDR_OWVAR 40
35505: PUSH
35506: LD_VAR 0 4
35510: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35511: LD_ADDR_OWVAR 41
35515: PUSH
35516: LD_VAR 0 5
35520: ST_TO_ADDR
// end ;
35521: LD_VAR 0 6
35525: RET
// export function WantPlant ( unit ) ; var task ; begin
35526: LD_INT 0
35528: PPUSH
35529: PPUSH
// result := false ;
35530: LD_ADDR_VAR 0 2
35534: PUSH
35535: LD_INT 0
35537: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35538: LD_ADDR_VAR 0 3
35542: PUSH
35543: LD_VAR 0 1
35547: PPUSH
35548: CALL_OW 437
35552: ST_TO_ADDR
// if task then
35553: LD_VAR 0 3
35557: IFFALSE 35585
// if task [ 1 ] [ 1 ] = p then
35559: LD_VAR 0 3
35563: PUSH
35564: LD_INT 1
35566: ARRAY
35567: PUSH
35568: LD_INT 1
35570: ARRAY
35571: PUSH
35572: LD_STRING p
35574: EQUAL
35575: IFFALSE 35585
// result := true ;
35577: LD_ADDR_VAR 0 2
35581: PUSH
35582: LD_INT 1
35584: ST_TO_ADDR
// end ;
35585: LD_VAR 0 2
35589: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35590: LD_INT 0
35592: PPUSH
35593: PPUSH
35594: PPUSH
35595: PPUSH
// if pos < 1 then
35596: LD_VAR 0 2
35600: PUSH
35601: LD_INT 1
35603: LESS
35604: IFFALSE 35608
// exit ;
35606: GO 35911
// if pos = 1 then
35608: LD_VAR 0 2
35612: PUSH
35613: LD_INT 1
35615: EQUAL
35616: IFFALSE 35649
// result := Replace ( arr , pos [ 1 ] , value ) else
35618: LD_ADDR_VAR 0 4
35622: PUSH
35623: LD_VAR 0 1
35627: PPUSH
35628: LD_VAR 0 2
35632: PUSH
35633: LD_INT 1
35635: ARRAY
35636: PPUSH
35637: LD_VAR 0 3
35641: PPUSH
35642: CALL_OW 1
35646: ST_TO_ADDR
35647: GO 35911
// begin tmp := arr ;
35649: LD_ADDR_VAR 0 6
35653: PUSH
35654: LD_VAR 0 1
35658: ST_TO_ADDR
// s_arr := [ tmp ] ;
35659: LD_ADDR_VAR 0 7
35663: PUSH
35664: LD_VAR 0 6
35668: PUSH
35669: EMPTY
35670: LIST
35671: ST_TO_ADDR
// for i = 1 to pos - 1 do
35672: LD_ADDR_VAR 0 5
35676: PUSH
35677: DOUBLE
35678: LD_INT 1
35680: DEC
35681: ST_TO_ADDR
35682: LD_VAR 0 2
35686: PUSH
35687: LD_INT 1
35689: MINUS
35690: PUSH
35691: FOR_TO
35692: IFFALSE 35737
// begin tmp := tmp [ pos [ i ] ] ;
35694: LD_ADDR_VAR 0 6
35698: PUSH
35699: LD_VAR 0 6
35703: PUSH
35704: LD_VAR 0 2
35708: PUSH
35709: LD_VAR 0 5
35713: ARRAY
35714: ARRAY
35715: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35716: LD_ADDR_VAR 0 7
35720: PUSH
35721: LD_VAR 0 7
35725: PUSH
35726: LD_VAR 0 6
35730: PUSH
35731: EMPTY
35732: LIST
35733: ADD
35734: ST_TO_ADDR
// end ;
35735: GO 35691
35737: POP
35738: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35739: LD_ADDR_VAR 0 6
35743: PUSH
35744: LD_VAR 0 6
35748: PPUSH
35749: LD_VAR 0 2
35753: PUSH
35754: LD_VAR 0 2
35758: ARRAY
35759: PPUSH
35760: LD_VAR 0 3
35764: PPUSH
35765: CALL_OW 1
35769: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35770: LD_ADDR_VAR 0 7
35774: PUSH
35775: LD_VAR 0 7
35779: PPUSH
35780: LD_VAR 0 7
35784: PPUSH
35785: LD_VAR 0 6
35789: PPUSH
35790: CALL_OW 1
35794: ST_TO_ADDR
// for i = s_arr downto 2 do
35795: LD_ADDR_VAR 0 5
35799: PUSH
35800: DOUBLE
35801: LD_VAR 0 7
35805: INC
35806: ST_TO_ADDR
35807: LD_INT 2
35809: PUSH
35810: FOR_DOWNTO
35811: IFFALSE 35895
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35813: LD_ADDR_VAR 0 6
35817: PUSH
35818: LD_VAR 0 7
35822: PUSH
35823: LD_VAR 0 5
35827: PUSH
35828: LD_INT 1
35830: MINUS
35831: ARRAY
35832: PPUSH
35833: LD_VAR 0 2
35837: PUSH
35838: LD_VAR 0 5
35842: PUSH
35843: LD_INT 1
35845: MINUS
35846: ARRAY
35847: PPUSH
35848: LD_VAR 0 7
35852: PUSH
35853: LD_VAR 0 5
35857: ARRAY
35858: PPUSH
35859: CALL_OW 1
35863: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35864: LD_ADDR_VAR 0 7
35868: PUSH
35869: LD_VAR 0 7
35873: PPUSH
35874: LD_VAR 0 5
35878: PUSH
35879: LD_INT 1
35881: MINUS
35882: PPUSH
35883: LD_VAR 0 6
35887: PPUSH
35888: CALL_OW 1
35892: ST_TO_ADDR
// end ;
35893: GO 35810
35895: POP
35896: POP
// result := s_arr [ 1 ] ;
35897: LD_ADDR_VAR 0 4
35901: PUSH
35902: LD_VAR 0 7
35906: PUSH
35907: LD_INT 1
35909: ARRAY
35910: ST_TO_ADDR
// end ; end ;
35911: LD_VAR 0 4
35915: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35916: LD_INT 0
35918: PPUSH
35919: PPUSH
// if not list then
35920: LD_VAR 0 1
35924: NOT
35925: IFFALSE 35929
// exit ;
35927: GO 36020
// i := list [ pos1 ] ;
35929: LD_ADDR_VAR 0 5
35933: PUSH
35934: LD_VAR 0 1
35938: PUSH
35939: LD_VAR 0 2
35943: ARRAY
35944: ST_TO_ADDR
// if not i then
35945: LD_VAR 0 5
35949: NOT
35950: IFFALSE 35954
// exit ;
35952: GO 36020
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35954: LD_ADDR_VAR 0 1
35958: PUSH
35959: LD_VAR 0 1
35963: PPUSH
35964: LD_VAR 0 2
35968: PPUSH
35969: LD_VAR 0 1
35973: PUSH
35974: LD_VAR 0 3
35978: ARRAY
35979: PPUSH
35980: CALL_OW 1
35984: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35985: LD_ADDR_VAR 0 1
35989: PUSH
35990: LD_VAR 0 1
35994: PPUSH
35995: LD_VAR 0 3
35999: PPUSH
36000: LD_VAR 0 5
36004: PPUSH
36005: CALL_OW 1
36009: ST_TO_ADDR
// result := list ;
36010: LD_ADDR_VAR 0 4
36014: PUSH
36015: LD_VAR 0 1
36019: ST_TO_ADDR
// end ;
36020: LD_VAR 0 4
36024: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36025: LD_INT 0
36027: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36028: LD_ADDR_VAR 0 5
36032: PUSH
36033: LD_VAR 0 1
36037: PPUSH
36038: CALL_OW 250
36042: PPUSH
36043: LD_VAR 0 1
36047: PPUSH
36048: CALL_OW 251
36052: PPUSH
36053: LD_VAR 0 2
36057: PPUSH
36058: LD_VAR 0 3
36062: PPUSH
36063: LD_VAR 0 4
36067: PPUSH
36068: CALL 36078 0 5
36072: ST_TO_ADDR
// end ;
36073: LD_VAR 0 5
36077: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36078: LD_INT 0
36080: PPUSH
36081: PPUSH
36082: PPUSH
36083: PPUSH
// if not list then
36084: LD_VAR 0 3
36088: NOT
36089: IFFALSE 36093
// exit ;
36091: GO 36481
// result := [ ] ;
36093: LD_ADDR_VAR 0 6
36097: PUSH
36098: EMPTY
36099: ST_TO_ADDR
// for i in list do
36100: LD_ADDR_VAR 0 7
36104: PUSH
36105: LD_VAR 0 3
36109: PUSH
36110: FOR_IN
36111: IFFALSE 36313
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36113: LD_ADDR_VAR 0 9
36117: PUSH
36118: LD_VAR 0 7
36122: PPUSH
36123: LD_VAR 0 1
36127: PPUSH
36128: LD_VAR 0 2
36132: PPUSH
36133: CALL_OW 297
36137: ST_TO_ADDR
// if not result then
36138: LD_VAR 0 6
36142: NOT
36143: IFFALSE 36169
// result := [ [ i , tmp ] ] else
36145: LD_ADDR_VAR 0 6
36149: PUSH
36150: LD_VAR 0 7
36154: PUSH
36155: LD_VAR 0 9
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: EMPTY
36165: LIST
36166: ST_TO_ADDR
36167: GO 36311
// begin if result [ result ] [ 2 ] < tmp then
36169: LD_VAR 0 6
36173: PUSH
36174: LD_VAR 0 6
36178: ARRAY
36179: PUSH
36180: LD_INT 2
36182: ARRAY
36183: PUSH
36184: LD_VAR 0 9
36188: LESS
36189: IFFALSE 36231
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36191: LD_ADDR_VAR 0 6
36195: PUSH
36196: LD_VAR 0 6
36200: PPUSH
36201: LD_VAR 0 6
36205: PUSH
36206: LD_INT 1
36208: PLUS
36209: PPUSH
36210: LD_VAR 0 7
36214: PUSH
36215: LD_VAR 0 9
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PPUSH
36224: CALL_OW 2
36228: ST_TO_ADDR
36229: GO 36311
// for j = 1 to result do
36231: LD_ADDR_VAR 0 8
36235: PUSH
36236: DOUBLE
36237: LD_INT 1
36239: DEC
36240: ST_TO_ADDR
36241: LD_VAR 0 6
36245: PUSH
36246: FOR_TO
36247: IFFALSE 36309
// begin if tmp < result [ j ] [ 2 ] then
36249: LD_VAR 0 9
36253: PUSH
36254: LD_VAR 0 6
36258: PUSH
36259: LD_VAR 0 8
36263: ARRAY
36264: PUSH
36265: LD_INT 2
36267: ARRAY
36268: LESS
36269: IFFALSE 36307
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36271: LD_ADDR_VAR 0 6
36275: PUSH
36276: LD_VAR 0 6
36280: PPUSH
36281: LD_VAR 0 8
36285: PPUSH
36286: LD_VAR 0 7
36290: PUSH
36291: LD_VAR 0 9
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PPUSH
36300: CALL_OW 2
36304: ST_TO_ADDR
// break ;
36305: GO 36309
// end ; end ;
36307: GO 36246
36309: POP
36310: POP
// end ; end ;
36311: GO 36110
36313: POP
36314: POP
// if result and not asc then
36315: LD_VAR 0 6
36319: PUSH
36320: LD_VAR 0 4
36324: NOT
36325: AND
36326: IFFALSE 36401
// begin tmp := result ;
36328: LD_ADDR_VAR 0 9
36332: PUSH
36333: LD_VAR 0 6
36337: ST_TO_ADDR
// for i = tmp downto 1 do
36338: LD_ADDR_VAR 0 7
36342: PUSH
36343: DOUBLE
36344: LD_VAR 0 9
36348: INC
36349: ST_TO_ADDR
36350: LD_INT 1
36352: PUSH
36353: FOR_DOWNTO
36354: IFFALSE 36399
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36356: LD_ADDR_VAR 0 6
36360: PUSH
36361: LD_VAR 0 6
36365: PPUSH
36366: LD_VAR 0 9
36370: PUSH
36371: LD_VAR 0 7
36375: MINUS
36376: PUSH
36377: LD_INT 1
36379: PLUS
36380: PPUSH
36381: LD_VAR 0 9
36385: PUSH
36386: LD_VAR 0 7
36390: ARRAY
36391: PPUSH
36392: CALL_OW 1
36396: ST_TO_ADDR
36397: GO 36353
36399: POP
36400: POP
// end ; tmp := [ ] ;
36401: LD_ADDR_VAR 0 9
36405: PUSH
36406: EMPTY
36407: ST_TO_ADDR
// if mode then
36408: LD_VAR 0 5
36412: IFFALSE 36481
// begin for i = 1 to result do
36414: LD_ADDR_VAR 0 7
36418: PUSH
36419: DOUBLE
36420: LD_INT 1
36422: DEC
36423: ST_TO_ADDR
36424: LD_VAR 0 6
36428: PUSH
36429: FOR_TO
36430: IFFALSE 36469
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36432: LD_ADDR_VAR 0 9
36436: PUSH
36437: LD_VAR 0 9
36441: PPUSH
36442: LD_VAR 0 7
36446: PPUSH
36447: LD_VAR 0 6
36451: PUSH
36452: LD_VAR 0 7
36456: ARRAY
36457: PUSH
36458: LD_INT 1
36460: ARRAY
36461: PPUSH
36462: CALL_OW 1
36466: ST_TO_ADDR
36467: GO 36429
36469: POP
36470: POP
// result := tmp ;
36471: LD_ADDR_VAR 0 6
36475: PUSH
36476: LD_VAR 0 9
36480: ST_TO_ADDR
// end ; end ;
36481: LD_VAR 0 6
36485: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36486: LD_INT 0
36488: PPUSH
36489: PPUSH
36490: PPUSH
36491: PPUSH
36492: PPUSH
36493: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36494: LD_ADDR_VAR 0 5
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: LD_INT 0
36507: PUSH
36508: EMPTY
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: ST_TO_ADDR
// if not x or not y then
36516: LD_VAR 0 2
36520: NOT
36521: PUSH
36522: LD_VAR 0 3
36526: NOT
36527: OR
36528: IFFALSE 36532
// exit ;
36530: GO 38182
// if not range then
36532: LD_VAR 0 4
36536: NOT
36537: IFFALSE 36547
// range := 10 ;
36539: LD_ADDR_VAR 0 4
36543: PUSH
36544: LD_INT 10
36546: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36547: LD_ADDR_VAR 0 8
36551: PUSH
36552: LD_INT 81
36554: PUSH
36555: LD_VAR 0 1
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 92
36566: PUSH
36567: LD_VAR 0 2
36571: PUSH
36572: LD_VAR 0 3
36576: PUSH
36577: LD_VAR 0 4
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 3
36590: PUSH
36591: LD_INT 21
36593: PUSH
36594: LD_INT 3
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: LIST
36609: PPUSH
36610: CALL_OW 69
36614: ST_TO_ADDR
// if not tmp then
36615: LD_VAR 0 8
36619: NOT
36620: IFFALSE 36624
// exit ;
36622: GO 38182
// for i in tmp do
36624: LD_ADDR_VAR 0 6
36628: PUSH
36629: LD_VAR 0 8
36633: PUSH
36634: FOR_IN
36635: IFFALSE 38157
// begin points := [ 0 , 0 , 0 ] ;
36637: LD_ADDR_VAR 0 9
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// bpoints := 1 ;
36656: LD_ADDR_VAR 0 10
36660: PUSH
36661: LD_INT 1
36663: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36664: LD_VAR 0 6
36668: PPUSH
36669: CALL_OW 247
36673: PUSH
36674: LD_INT 1
36676: DOUBLE
36677: EQUAL
36678: IFTRUE 36682
36680: GO 37260
36682: POP
// begin if GetClass ( i ) = 1 then
36683: LD_VAR 0 6
36687: PPUSH
36688: CALL_OW 257
36692: PUSH
36693: LD_INT 1
36695: EQUAL
36696: IFFALSE 36717
// points := [ 10 , 5 , 3 ] ;
36698: LD_ADDR_VAR 0 9
36702: PUSH
36703: LD_INT 10
36705: PUSH
36706: LD_INT 5
36708: PUSH
36709: LD_INT 3
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: LIST
36716: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36717: LD_VAR 0 6
36721: PPUSH
36722: CALL_OW 257
36726: PUSH
36727: LD_INT 2
36729: PUSH
36730: LD_INT 3
36732: PUSH
36733: LD_INT 4
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: LIST
36740: IN
36741: IFFALSE 36762
// points := [ 3 , 2 , 1 ] ;
36743: LD_ADDR_VAR 0 9
36747: PUSH
36748: LD_INT 3
36750: PUSH
36751: LD_INT 2
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: LIST
36761: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36762: LD_VAR 0 6
36766: PPUSH
36767: CALL_OW 257
36771: PUSH
36772: LD_INT 5
36774: EQUAL
36775: IFFALSE 36796
// points := [ 130 , 5 , 2 ] ;
36777: LD_ADDR_VAR 0 9
36781: PUSH
36782: LD_INT 130
36784: PUSH
36785: LD_INT 5
36787: PUSH
36788: LD_INT 2
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: LIST
36795: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36796: LD_VAR 0 6
36800: PPUSH
36801: CALL_OW 257
36805: PUSH
36806: LD_INT 8
36808: EQUAL
36809: IFFALSE 36830
// points := [ 35 , 35 , 30 ] ;
36811: LD_ADDR_VAR 0 9
36815: PUSH
36816: LD_INT 35
36818: PUSH
36819: LD_INT 35
36821: PUSH
36822: LD_INT 30
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: LIST
36829: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36830: LD_VAR 0 6
36834: PPUSH
36835: CALL_OW 257
36839: PUSH
36840: LD_INT 9
36842: EQUAL
36843: IFFALSE 36864
// points := [ 20 , 55 , 40 ] ;
36845: LD_ADDR_VAR 0 9
36849: PUSH
36850: LD_INT 20
36852: PUSH
36853: LD_INT 55
36855: PUSH
36856: LD_INT 40
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: LIST
36863: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36864: LD_VAR 0 6
36868: PPUSH
36869: CALL_OW 257
36873: PUSH
36874: LD_INT 12
36876: PUSH
36877: LD_INT 16
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: IN
36884: IFFALSE 36905
// points := [ 5 , 3 , 2 ] ;
36886: LD_ADDR_VAR 0 9
36890: PUSH
36891: LD_INT 5
36893: PUSH
36894: LD_INT 3
36896: PUSH
36897: LD_INT 2
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: LIST
36904: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36905: LD_VAR 0 6
36909: PPUSH
36910: CALL_OW 257
36914: PUSH
36915: LD_INT 17
36917: EQUAL
36918: IFFALSE 36939
// points := [ 100 , 50 , 75 ] ;
36920: LD_ADDR_VAR 0 9
36924: PUSH
36925: LD_INT 100
36927: PUSH
36928: LD_INT 50
36930: PUSH
36931: LD_INT 75
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: LIST
36938: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36939: LD_VAR 0 6
36943: PPUSH
36944: CALL_OW 257
36948: PUSH
36949: LD_INT 15
36951: EQUAL
36952: IFFALSE 36973
// points := [ 10 , 5 , 3 ] ;
36954: LD_ADDR_VAR 0 9
36958: PUSH
36959: LD_INT 10
36961: PUSH
36962: LD_INT 5
36964: PUSH
36965: LD_INT 3
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: LIST
36972: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36973: LD_VAR 0 6
36977: PPUSH
36978: CALL_OW 257
36982: PUSH
36983: LD_INT 14
36985: EQUAL
36986: IFFALSE 37007
// points := [ 10 , 0 , 0 ] ;
36988: LD_ADDR_VAR 0 9
36992: PUSH
36993: LD_INT 10
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37007: LD_VAR 0 6
37011: PPUSH
37012: CALL_OW 257
37016: PUSH
37017: LD_INT 11
37019: EQUAL
37020: IFFALSE 37041
// points := [ 30 , 10 , 5 ] ;
37022: LD_ADDR_VAR 0 9
37026: PUSH
37027: LD_INT 30
37029: PUSH
37030: LD_INT 10
37032: PUSH
37033: LD_INT 5
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: LIST
37040: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37041: LD_VAR 0 1
37045: PPUSH
37046: LD_INT 5
37048: PPUSH
37049: CALL_OW 321
37053: PUSH
37054: LD_INT 2
37056: EQUAL
37057: IFFALSE 37074
// bpoints := bpoints * 1.8 ;
37059: LD_ADDR_VAR 0 10
37063: PUSH
37064: LD_VAR 0 10
37068: PUSH
37069: LD_REAL  1.80000000000000E+0000
37072: MUL
37073: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37074: LD_VAR 0 6
37078: PPUSH
37079: CALL_OW 257
37083: PUSH
37084: LD_INT 1
37086: PUSH
37087: LD_INT 2
37089: PUSH
37090: LD_INT 3
37092: PUSH
37093: LD_INT 4
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: IN
37102: PUSH
37103: LD_VAR 0 1
37107: PPUSH
37108: LD_INT 51
37110: PPUSH
37111: CALL_OW 321
37115: PUSH
37116: LD_INT 2
37118: EQUAL
37119: AND
37120: IFFALSE 37137
// bpoints := bpoints * 1.2 ;
37122: LD_ADDR_VAR 0 10
37126: PUSH
37127: LD_VAR 0 10
37131: PUSH
37132: LD_REAL  1.20000000000000E+0000
37135: MUL
37136: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37137: LD_VAR 0 6
37141: PPUSH
37142: CALL_OW 257
37146: PUSH
37147: LD_INT 5
37149: PUSH
37150: LD_INT 7
37152: PUSH
37153: LD_INT 9
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: LIST
37160: IN
37161: PUSH
37162: LD_VAR 0 1
37166: PPUSH
37167: LD_INT 52
37169: PPUSH
37170: CALL_OW 321
37174: PUSH
37175: LD_INT 2
37177: EQUAL
37178: AND
37179: IFFALSE 37196
// bpoints := bpoints * 1.5 ;
37181: LD_ADDR_VAR 0 10
37185: PUSH
37186: LD_VAR 0 10
37190: PUSH
37191: LD_REAL  1.50000000000000E+0000
37194: MUL
37195: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37196: LD_VAR 0 1
37200: PPUSH
37201: LD_INT 66
37203: PPUSH
37204: CALL_OW 321
37208: PUSH
37209: LD_INT 2
37211: EQUAL
37212: IFFALSE 37229
// bpoints := bpoints * 1.1 ;
37214: LD_ADDR_VAR 0 10
37218: PUSH
37219: LD_VAR 0 10
37223: PUSH
37224: LD_REAL  1.10000000000000E+0000
37227: MUL
37228: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37229: LD_ADDR_VAR 0 10
37233: PUSH
37234: LD_VAR 0 10
37238: PUSH
37239: LD_VAR 0 6
37243: PPUSH
37244: LD_INT 1
37246: PPUSH
37247: CALL_OW 259
37251: PUSH
37252: LD_REAL  1.15000000000000E+0000
37255: MUL
37256: MUL
37257: ST_TO_ADDR
// end ; unit_vehicle :
37258: GO 38086
37260: LD_INT 2
37262: DOUBLE
37263: EQUAL
37264: IFTRUE 37268
37266: GO 38074
37268: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37269: LD_VAR 0 6
37273: PPUSH
37274: CALL_OW 264
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: LD_INT 42
37284: PUSH
37285: LD_INT 24
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: LIST
37292: IN
37293: IFFALSE 37314
// points := [ 25 , 5 , 3 ] ;
37295: LD_ADDR_VAR 0 9
37299: PUSH
37300: LD_INT 25
37302: PUSH
37303: LD_INT 5
37305: PUSH
37306: LD_INT 3
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: LIST
37313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37314: LD_VAR 0 6
37318: PPUSH
37319: CALL_OW 264
37323: PUSH
37324: LD_INT 4
37326: PUSH
37327: LD_INT 43
37329: PUSH
37330: LD_INT 25
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: LIST
37337: IN
37338: IFFALSE 37359
// points := [ 40 , 15 , 5 ] ;
37340: LD_ADDR_VAR 0 9
37344: PUSH
37345: LD_INT 40
37347: PUSH
37348: LD_INT 15
37350: PUSH
37351: LD_INT 5
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: LIST
37358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37359: LD_VAR 0 6
37363: PPUSH
37364: CALL_OW 264
37368: PUSH
37369: LD_INT 3
37371: PUSH
37372: LD_INT 23
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: IN
37379: IFFALSE 37400
// points := [ 7 , 25 , 8 ] ;
37381: LD_ADDR_VAR 0 9
37385: PUSH
37386: LD_INT 7
37388: PUSH
37389: LD_INT 25
37391: PUSH
37392: LD_INT 8
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: LIST
37399: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37400: LD_VAR 0 6
37404: PPUSH
37405: CALL_OW 264
37409: PUSH
37410: LD_INT 5
37412: PUSH
37413: LD_INT 27
37415: PUSH
37416: LD_INT 44
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: LIST
37423: IN
37424: IFFALSE 37445
// points := [ 14 , 50 , 16 ] ;
37426: LD_ADDR_VAR 0 9
37430: PUSH
37431: LD_INT 14
37433: PUSH
37434: LD_INT 50
37436: PUSH
37437: LD_INT 16
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: LIST
37444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37445: LD_VAR 0 6
37449: PPUSH
37450: CALL_OW 264
37454: PUSH
37455: LD_INT 6
37457: PUSH
37458: LD_INT 46
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: IN
37465: IFFALSE 37486
// points := [ 32 , 120 , 70 ] ;
37467: LD_ADDR_VAR 0 9
37471: PUSH
37472: LD_INT 32
37474: PUSH
37475: LD_INT 120
37477: PUSH
37478: LD_INT 70
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: LIST
37485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37486: LD_VAR 0 6
37490: PPUSH
37491: CALL_OW 264
37495: PUSH
37496: LD_INT 7
37498: PUSH
37499: LD_INT 28
37501: PUSH
37502: LD_INT 45
37504: PUSH
37505: LD_INT 92
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: IN
37514: IFFALSE 37535
// points := [ 35 , 20 , 45 ] ;
37516: LD_ADDR_VAR 0 9
37520: PUSH
37521: LD_INT 35
37523: PUSH
37524: LD_INT 20
37526: PUSH
37527: LD_INT 45
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: LIST
37534: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37535: LD_VAR 0 6
37539: PPUSH
37540: CALL_OW 264
37544: PUSH
37545: LD_INT 47
37547: PUSH
37548: EMPTY
37549: LIST
37550: IN
37551: IFFALSE 37572
// points := [ 67 , 45 , 75 ] ;
37553: LD_ADDR_VAR 0 9
37557: PUSH
37558: LD_INT 67
37560: PUSH
37561: LD_INT 45
37563: PUSH
37564: LD_INT 75
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: LIST
37571: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37572: LD_VAR 0 6
37576: PPUSH
37577: CALL_OW 264
37581: PUSH
37582: LD_INT 26
37584: PUSH
37585: EMPTY
37586: LIST
37587: IN
37588: IFFALSE 37609
// points := [ 120 , 30 , 80 ] ;
37590: LD_ADDR_VAR 0 9
37594: PUSH
37595: LD_INT 120
37597: PUSH
37598: LD_INT 30
37600: PUSH
37601: LD_INT 80
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: LIST
37608: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37609: LD_VAR 0 6
37613: PPUSH
37614: CALL_OW 264
37618: PUSH
37619: LD_INT 22
37621: PUSH
37622: EMPTY
37623: LIST
37624: IN
37625: IFFALSE 37646
// points := [ 40 , 1 , 1 ] ;
37627: LD_ADDR_VAR 0 9
37631: PUSH
37632: LD_INT 40
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: LIST
37645: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37646: LD_VAR 0 6
37650: PPUSH
37651: CALL_OW 264
37655: PUSH
37656: LD_INT 29
37658: PUSH
37659: EMPTY
37660: LIST
37661: IN
37662: IFFALSE 37683
// points := [ 70 , 200 , 400 ] ;
37664: LD_ADDR_VAR 0 9
37668: PUSH
37669: LD_INT 70
37671: PUSH
37672: LD_INT 200
37674: PUSH
37675: LD_INT 400
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: LIST
37682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37683: LD_VAR 0 6
37687: PPUSH
37688: CALL_OW 264
37692: PUSH
37693: LD_INT 14
37695: PUSH
37696: LD_INT 53
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: IN
37703: IFFALSE 37724
// points := [ 40 , 10 , 20 ] ;
37705: LD_ADDR_VAR 0 9
37709: PUSH
37710: LD_INT 40
37712: PUSH
37713: LD_INT 10
37715: PUSH
37716: LD_INT 20
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: LIST
37723: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37724: LD_VAR 0 6
37728: PPUSH
37729: CALL_OW 264
37733: PUSH
37734: LD_INT 9
37736: PUSH
37737: EMPTY
37738: LIST
37739: IN
37740: IFFALSE 37761
// points := [ 5 , 70 , 20 ] ;
37742: LD_ADDR_VAR 0 9
37746: PUSH
37747: LD_INT 5
37749: PUSH
37750: LD_INT 70
37752: PUSH
37753: LD_INT 20
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: LIST
37760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37761: LD_VAR 0 6
37765: PPUSH
37766: CALL_OW 264
37770: PUSH
37771: LD_INT 10
37773: PUSH
37774: EMPTY
37775: LIST
37776: IN
37777: IFFALSE 37798
// points := [ 35 , 110 , 70 ] ;
37779: LD_ADDR_VAR 0 9
37783: PUSH
37784: LD_INT 35
37786: PUSH
37787: LD_INT 110
37789: PUSH
37790: LD_INT 70
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: LIST
37797: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37798: LD_VAR 0 6
37802: PPUSH
37803: CALL_OW 265
37807: PUSH
37808: LD_INT 25
37810: EQUAL
37811: IFFALSE 37832
// points := [ 80 , 65 , 100 ] ;
37813: LD_ADDR_VAR 0 9
37817: PUSH
37818: LD_INT 80
37820: PUSH
37821: LD_INT 65
37823: PUSH
37824: LD_INT 100
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: LIST
37831: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37832: LD_VAR 0 6
37836: PPUSH
37837: CALL_OW 263
37841: PUSH
37842: LD_INT 1
37844: EQUAL
37845: IFFALSE 37880
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37847: LD_ADDR_VAR 0 10
37851: PUSH
37852: LD_VAR 0 10
37856: PUSH
37857: LD_VAR 0 6
37861: PPUSH
37862: CALL_OW 311
37866: PPUSH
37867: LD_INT 3
37869: PPUSH
37870: CALL_OW 259
37874: PUSH
37875: LD_INT 4
37877: MUL
37878: MUL
37879: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37880: LD_VAR 0 6
37884: PPUSH
37885: CALL_OW 263
37889: PUSH
37890: LD_INT 2
37892: EQUAL
37893: IFFALSE 37944
// begin j := IsControledBy ( i ) ;
37895: LD_ADDR_VAR 0 7
37899: PUSH
37900: LD_VAR 0 6
37904: PPUSH
37905: CALL_OW 312
37909: ST_TO_ADDR
// if j then
37910: LD_VAR 0 7
37914: IFFALSE 37944
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37916: LD_ADDR_VAR 0 10
37920: PUSH
37921: LD_VAR 0 10
37925: PUSH
37926: LD_VAR 0 7
37930: PPUSH
37931: LD_INT 3
37933: PPUSH
37934: CALL_OW 259
37938: PUSH
37939: LD_INT 3
37941: MUL
37942: MUL
37943: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37944: LD_VAR 0 6
37948: PPUSH
37949: CALL_OW 264
37953: PUSH
37954: LD_INT 5
37956: PUSH
37957: LD_INT 6
37959: PUSH
37960: LD_INT 46
37962: PUSH
37963: LD_INT 44
37965: PUSH
37966: LD_INT 47
37968: PUSH
37969: LD_INT 45
37971: PUSH
37972: LD_INT 28
37974: PUSH
37975: LD_INT 7
37977: PUSH
37978: LD_INT 27
37980: PUSH
37981: LD_INT 29
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: IN
37996: PUSH
37997: LD_VAR 0 1
38001: PPUSH
38002: LD_INT 52
38004: PPUSH
38005: CALL_OW 321
38009: PUSH
38010: LD_INT 2
38012: EQUAL
38013: AND
38014: IFFALSE 38031
// bpoints := bpoints * 1.2 ;
38016: LD_ADDR_VAR 0 10
38020: PUSH
38021: LD_VAR 0 10
38025: PUSH
38026: LD_REAL  1.20000000000000E+0000
38029: MUL
38030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38031: LD_VAR 0 6
38035: PPUSH
38036: CALL_OW 264
38040: PUSH
38041: LD_INT 6
38043: PUSH
38044: LD_INT 46
38046: PUSH
38047: LD_INT 47
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: LIST
38054: IN
38055: IFFALSE 38072
// bpoints := bpoints * 1.2 ;
38057: LD_ADDR_VAR 0 10
38061: PUSH
38062: LD_VAR 0 10
38066: PUSH
38067: LD_REAL  1.20000000000000E+0000
38070: MUL
38071: ST_TO_ADDR
// end ; unit_building :
38072: GO 38086
38074: LD_INT 3
38076: DOUBLE
38077: EQUAL
38078: IFTRUE 38082
38080: GO 38085
38082: POP
// ; end ;
38083: GO 38086
38085: POP
// for j = 1 to 3 do
38086: LD_ADDR_VAR 0 7
38090: PUSH
38091: DOUBLE
38092: LD_INT 1
38094: DEC
38095: ST_TO_ADDR
38096: LD_INT 3
38098: PUSH
38099: FOR_TO
38100: IFFALSE 38153
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38102: LD_ADDR_VAR 0 5
38106: PUSH
38107: LD_VAR 0 5
38111: PPUSH
38112: LD_VAR 0 7
38116: PPUSH
38117: LD_VAR 0 5
38121: PUSH
38122: LD_VAR 0 7
38126: ARRAY
38127: PUSH
38128: LD_VAR 0 9
38132: PUSH
38133: LD_VAR 0 7
38137: ARRAY
38138: PUSH
38139: LD_VAR 0 10
38143: MUL
38144: PLUS
38145: PPUSH
38146: CALL_OW 1
38150: ST_TO_ADDR
38151: GO 38099
38153: POP
38154: POP
// end ;
38155: GO 36634
38157: POP
38158: POP
// result := Replace ( result , 4 , tmp ) ;
38159: LD_ADDR_VAR 0 5
38163: PUSH
38164: LD_VAR 0 5
38168: PPUSH
38169: LD_INT 4
38171: PPUSH
38172: LD_VAR 0 8
38176: PPUSH
38177: CALL_OW 1
38181: ST_TO_ADDR
// end ;
38182: LD_VAR 0 5
38186: RET
// export function DangerAtRange ( unit , range ) ; begin
38187: LD_INT 0
38189: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38190: LD_ADDR_VAR 0 3
38194: PUSH
38195: LD_VAR 0 1
38199: PPUSH
38200: CALL_OW 255
38204: PPUSH
38205: LD_VAR 0 1
38209: PPUSH
38210: CALL_OW 250
38214: PPUSH
38215: LD_VAR 0 1
38219: PPUSH
38220: CALL_OW 251
38224: PPUSH
38225: LD_VAR 0 2
38229: PPUSH
38230: CALL 36486 0 4
38234: ST_TO_ADDR
// end ;
38235: LD_VAR 0 3
38239: RET
// export function DangerInArea ( side , area ) ; begin
38240: LD_INT 0
38242: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38243: LD_ADDR_VAR 0 3
38247: PUSH
38248: LD_VAR 0 2
38252: PPUSH
38253: LD_INT 81
38255: PUSH
38256: LD_VAR 0 1
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PPUSH
38265: CALL_OW 70
38269: ST_TO_ADDR
// end ;
38270: LD_VAR 0 3
38274: RET
// export function IsExtension ( b ) ; begin
38275: LD_INT 0
38277: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38278: LD_ADDR_VAR 0 2
38282: PUSH
38283: LD_VAR 0 1
38287: PUSH
38288: LD_INT 23
38290: PUSH
38291: LD_INT 20
38293: PUSH
38294: LD_INT 22
38296: PUSH
38297: LD_INT 17
38299: PUSH
38300: LD_INT 24
38302: PUSH
38303: LD_INT 21
38305: PUSH
38306: LD_INT 19
38308: PUSH
38309: LD_INT 16
38311: PUSH
38312: LD_INT 25
38314: PUSH
38315: LD_INT 18
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: IN
38330: ST_TO_ADDR
// end ;
38331: LD_VAR 0 2
38335: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38336: LD_INT 0
38338: PPUSH
38339: PPUSH
38340: PPUSH
// result := [ ] ;
38341: LD_ADDR_VAR 0 4
38345: PUSH
38346: EMPTY
38347: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38348: LD_ADDR_VAR 0 5
38352: PUSH
38353: LD_VAR 0 2
38357: PPUSH
38358: LD_INT 21
38360: PUSH
38361: LD_INT 3
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PPUSH
38368: CALL_OW 70
38372: ST_TO_ADDR
// if not tmp then
38373: LD_VAR 0 5
38377: NOT
38378: IFFALSE 38382
// exit ;
38380: GO 38446
// if checkLink then
38382: LD_VAR 0 3
38386: IFFALSE 38436
// begin for i in tmp do
38388: LD_ADDR_VAR 0 6
38392: PUSH
38393: LD_VAR 0 5
38397: PUSH
38398: FOR_IN
38399: IFFALSE 38434
// if GetBase ( i ) <> base then
38401: LD_VAR 0 6
38405: PPUSH
38406: CALL_OW 274
38410: PUSH
38411: LD_VAR 0 1
38415: NONEQUAL
38416: IFFALSE 38432
// ComLinkToBase ( base , i ) ;
38418: LD_VAR 0 1
38422: PPUSH
38423: LD_VAR 0 6
38427: PPUSH
38428: CALL_OW 169
38432: GO 38398
38434: POP
38435: POP
// end ; result := tmp ;
38436: LD_ADDR_VAR 0 4
38440: PUSH
38441: LD_VAR 0 5
38445: ST_TO_ADDR
// end ;
38446: LD_VAR 0 4
38450: RET
// export function ComComplete ( units , b ) ; var i ; begin
38451: LD_INT 0
38453: PPUSH
38454: PPUSH
// if not units then
38455: LD_VAR 0 1
38459: NOT
38460: IFFALSE 38464
// exit ;
38462: GO 38554
// for i in units do
38464: LD_ADDR_VAR 0 4
38468: PUSH
38469: LD_VAR 0 1
38473: PUSH
38474: FOR_IN
38475: IFFALSE 38552
// if BuildingStatus ( b ) = bs_build then
38477: LD_VAR 0 2
38481: PPUSH
38482: CALL_OW 461
38486: PUSH
38487: LD_INT 1
38489: EQUAL
38490: IFFALSE 38550
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38492: LD_VAR 0 4
38496: PPUSH
38497: LD_STRING h
38499: PUSH
38500: LD_VAR 0 2
38504: PPUSH
38505: CALL_OW 250
38509: PUSH
38510: LD_VAR 0 2
38514: PPUSH
38515: CALL_OW 251
38519: PUSH
38520: LD_VAR 0 2
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: PUSH
38543: EMPTY
38544: LIST
38545: PPUSH
38546: CALL_OW 446
38550: GO 38474
38552: POP
38553: POP
// end ;
38554: LD_VAR 0 3
38558: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38559: LD_INT 0
38561: PPUSH
38562: PPUSH
38563: PPUSH
38564: PPUSH
38565: PPUSH
38566: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38567: LD_VAR 0 1
38571: NOT
38572: PUSH
38573: LD_VAR 0 1
38577: PPUSH
38578: CALL_OW 263
38582: PUSH
38583: LD_INT 2
38585: NONEQUAL
38586: OR
38587: IFFALSE 38591
// exit ;
38589: GO 38907
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38591: LD_ADDR_VAR 0 6
38595: PUSH
38596: LD_INT 22
38598: PUSH
38599: LD_VAR 0 1
38603: PPUSH
38604: CALL_OW 255
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: LD_INT 30
38618: PUSH
38619: LD_INT 36
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 34
38628: PUSH
38629: LD_INT 31
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: LIST
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PPUSH
38645: CALL_OW 69
38649: ST_TO_ADDR
// if not tmp then
38650: LD_VAR 0 6
38654: NOT
38655: IFFALSE 38659
// exit ;
38657: GO 38907
// result := [ ] ;
38659: LD_ADDR_VAR 0 2
38663: PUSH
38664: EMPTY
38665: ST_TO_ADDR
// for i in tmp do
38666: LD_ADDR_VAR 0 3
38670: PUSH
38671: LD_VAR 0 6
38675: PUSH
38676: FOR_IN
38677: IFFALSE 38748
// begin t := UnitsInside ( i ) ;
38679: LD_ADDR_VAR 0 4
38683: PUSH
38684: LD_VAR 0 3
38688: PPUSH
38689: CALL_OW 313
38693: ST_TO_ADDR
// if t then
38694: LD_VAR 0 4
38698: IFFALSE 38746
// for j in t do
38700: LD_ADDR_VAR 0 7
38704: PUSH
38705: LD_VAR 0 4
38709: PUSH
38710: FOR_IN
38711: IFFALSE 38744
// result := Replace ( result , result + 1 , j ) ;
38713: LD_ADDR_VAR 0 2
38717: PUSH
38718: LD_VAR 0 2
38722: PPUSH
38723: LD_VAR 0 2
38727: PUSH
38728: LD_INT 1
38730: PLUS
38731: PPUSH
38732: LD_VAR 0 7
38736: PPUSH
38737: CALL_OW 1
38741: ST_TO_ADDR
38742: GO 38710
38744: POP
38745: POP
// end ;
38746: GO 38676
38748: POP
38749: POP
// if not result then
38750: LD_VAR 0 2
38754: NOT
38755: IFFALSE 38759
// exit ;
38757: GO 38907
// mech := result [ 1 ] ;
38759: LD_ADDR_VAR 0 5
38763: PUSH
38764: LD_VAR 0 2
38768: PUSH
38769: LD_INT 1
38771: ARRAY
38772: ST_TO_ADDR
// if result > 1 then
38773: LD_VAR 0 2
38777: PUSH
38778: LD_INT 1
38780: GREATER
38781: IFFALSE 38893
// begin for i = 2 to result do
38783: LD_ADDR_VAR 0 3
38787: PUSH
38788: DOUBLE
38789: LD_INT 2
38791: DEC
38792: ST_TO_ADDR
38793: LD_VAR 0 2
38797: PUSH
38798: FOR_TO
38799: IFFALSE 38891
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38801: LD_ADDR_VAR 0 4
38805: PUSH
38806: LD_VAR 0 2
38810: PUSH
38811: LD_VAR 0 3
38815: ARRAY
38816: PPUSH
38817: LD_INT 3
38819: PPUSH
38820: CALL_OW 259
38824: PUSH
38825: LD_VAR 0 2
38829: PUSH
38830: LD_VAR 0 3
38834: ARRAY
38835: PPUSH
38836: CALL_OW 432
38840: MINUS
38841: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38842: LD_VAR 0 4
38846: PUSH
38847: LD_VAR 0 5
38851: PPUSH
38852: LD_INT 3
38854: PPUSH
38855: CALL_OW 259
38859: PUSH
38860: LD_VAR 0 5
38864: PPUSH
38865: CALL_OW 432
38869: MINUS
38870: GREATEREQUAL
38871: IFFALSE 38889
// mech := result [ i ] ;
38873: LD_ADDR_VAR 0 5
38877: PUSH
38878: LD_VAR 0 2
38882: PUSH
38883: LD_VAR 0 3
38887: ARRAY
38888: ST_TO_ADDR
// end ;
38889: GO 38798
38891: POP
38892: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38893: LD_VAR 0 1
38897: PPUSH
38898: LD_VAR 0 5
38902: PPUSH
38903: CALL_OW 135
// end ;
38907: LD_VAR 0 2
38911: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38912: LD_INT 0
38914: PPUSH
38915: PPUSH
38916: PPUSH
38917: PPUSH
38918: PPUSH
38919: PPUSH
38920: PPUSH
38921: PPUSH
38922: PPUSH
38923: PPUSH
38924: PPUSH
38925: PPUSH
38926: PPUSH
// result := [ ] ;
38927: LD_ADDR_VAR 0 7
38931: PUSH
38932: EMPTY
38933: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38934: LD_VAR 0 1
38938: PPUSH
38939: CALL_OW 266
38943: PUSH
38944: LD_INT 0
38946: PUSH
38947: LD_INT 1
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: IN
38954: NOT
38955: IFFALSE 38959
// exit ;
38957: GO 40593
// if name then
38959: LD_VAR 0 3
38963: IFFALSE 38979
// SetBName ( base_dep , name ) ;
38965: LD_VAR 0 1
38969: PPUSH
38970: LD_VAR 0 3
38974: PPUSH
38975: CALL_OW 500
// base := GetBase ( base_dep ) ;
38979: LD_ADDR_VAR 0 15
38983: PUSH
38984: LD_VAR 0 1
38988: PPUSH
38989: CALL_OW 274
38993: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38994: LD_ADDR_VAR 0 16
38998: PUSH
38999: LD_VAR 0 1
39003: PPUSH
39004: CALL_OW 255
39008: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39009: LD_ADDR_VAR 0 17
39013: PUSH
39014: LD_VAR 0 1
39018: PPUSH
39019: CALL_OW 248
39023: ST_TO_ADDR
// if sources then
39024: LD_VAR 0 5
39028: IFFALSE 39075
// for i = 1 to 3 do
39030: LD_ADDR_VAR 0 8
39034: PUSH
39035: DOUBLE
39036: LD_INT 1
39038: DEC
39039: ST_TO_ADDR
39040: LD_INT 3
39042: PUSH
39043: FOR_TO
39044: IFFALSE 39073
// AddResourceType ( base , i , sources [ i ] ) ;
39046: LD_VAR 0 15
39050: PPUSH
39051: LD_VAR 0 8
39055: PPUSH
39056: LD_VAR 0 5
39060: PUSH
39061: LD_VAR 0 8
39065: ARRAY
39066: PPUSH
39067: CALL_OW 276
39071: GO 39043
39073: POP
39074: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39075: LD_ADDR_VAR 0 18
39079: PUSH
39080: LD_VAR 0 15
39084: PPUSH
39085: LD_VAR 0 2
39089: PPUSH
39090: LD_INT 1
39092: PPUSH
39093: CALL 38336 0 3
39097: ST_TO_ADDR
// InitHc ;
39098: CALL_OW 19
// InitUc ;
39102: CALL_OW 18
// uc_side := side ;
39106: LD_ADDR_OWVAR 20
39110: PUSH
39111: LD_VAR 0 16
39115: ST_TO_ADDR
// uc_nation := nation ;
39116: LD_ADDR_OWVAR 21
39120: PUSH
39121: LD_VAR 0 17
39125: ST_TO_ADDR
// if buildings then
39126: LD_VAR 0 18
39130: IFFALSE 40452
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39132: LD_ADDR_VAR 0 19
39136: PUSH
39137: LD_VAR 0 18
39141: PPUSH
39142: LD_INT 2
39144: PUSH
39145: LD_INT 30
39147: PUSH
39148: LD_INT 29
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 30
39157: PUSH
39158: LD_INT 30
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: LIST
39169: PPUSH
39170: CALL_OW 72
39174: ST_TO_ADDR
// if tmp then
39175: LD_VAR 0 19
39179: IFFALSE 39227
// for i in tmp do
39181: LD_ADDR_VAR 0 8
39185: PUSH
39186: LD_VAR 0 19
39190: PUSH
39191: FOR_IN
39192: IFFALSE 39225
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39194: LD_VAR 0 8
39198: PPUSH
39199: CALL_OW 250
39203: PPUSH
39204: LD_VAR 0 8
39208: PPUSH
39209: CALL_OW 251
39213: PPUSH
39214: LD_VAR 0 16
39218: PPUSH
39219: CALL_OW 441
39223: GO 39191
39225: POP
39226: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39227: LD_VAR 0 18
39231: PPUSH
39232: LD_INT 2
39234: PUSH
39235: LD_INT 30
39237: PUSH
39238: LD_INT 32
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 30
39247: PUSH
39248: LD_INT 33
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: PPUSH
39260: CALL_OW 72
39264: IFFALSE 39352
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39266: LD_ADDR_VAR 0 8
39270: PUSH
39271: LD_VAR 0 18
39275: PPUSH
39276: LD_INT 2
39278: PUSH
39279: LD_INT 30
39281: PUSH
39282: LD_INT 32
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 30
39291: PUSH
39292: LD_INT 33
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: LIST
39303: PPUSH
39304: CALL_OW 72
39308: PUSH
39309: FOR_IN
39310: IFFALSE 39350
// begin if not GetBWeapon ( i ) then
39312: LD_VAR 0 8
39316: PPUSH
39317: CALL_OW 269
39321: NOT
39322: IFFALSE 39348
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39324: LD_VAR 0 8
39328: PPUSH
39329: LD_VAR 0 8
39333: PPUSH
39334: LD_VAR 0 2
39338: PPUSH
39339: CALL 40598 0 2
39343: PPUSH
39344: CALL_OW 431
// end ;
39348: GO 39309
39350: POP
39351: POP
// end ; for i = 1 to personel do
39352: LD_ADDR_VAR 0 8
39356: PUSH
39357: DOUBLE
39358: LD_INT 1
39360: DEC
39361: ST_TO_ADDR
39362: LD_VAR 0 6
39366: PUSH
39367: FOR_TO
39368: IFFALSE 40432
// begin if i > 4 then
39370: LD_VAR 0 8
39374: PUSH
39375: LD_INT 4
39377: GREATER
39378: IFFALSE 39382
// break ;
39380: GO 40432
// case i of 1 :
39382: LD_VAR 0 8
39386: PUSH
39387: LD_INT 1
39389: DOUBLE
39390: EQUAL
39391: IFTRUE 39395
39393: GO 39475
39395: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39396: LD_ADDR_VAR 0 12
39400: PUSH
39401: LD_VAR 0 18
39405: PPUSH
39406: LD_INT 22
39408: PUSH
39409: LD_VAR 0 16
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 58
39420: PUSH
39421: EMPTY
39422: LIST
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: LD_INT 30
39429: PUSH
39430: LD_INT 32
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 30
39439: PUSH
39440: LD_INT 4
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 30
39449: PUSH
39450: LD_INT 5
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: PPUSH
39468: CALL_OW 72
39472: ST_TO_ADDR
39473: GO 39697
39475: LD_INT 2
39477: DOUBLE
39478: EQUAL
39479: IFTRUE 39483
39481: GO 39545
39483: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39484: LD_ADDR_VAR 0 12
39488: PUSH
39489: LD_VAR 0 18
39493: PPUSH
39494: LD_INT 22
39496: PUSH
39497: LD_VAR 0 16
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 30
39511: PUSH
39512: LD_INT 0
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 30
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: LIST
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PPUSH
39538: CALL_OW 72
39542: ST_TO_ADDR
39543: GO 39697
39545: LD_INT 3
39547: DOUBLE
39548: EQUAL
39549: IFTRUE 39553
39551: GO 39615
39553: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39554: LD_ADDR_VAR 0 12
39558: PUSH
39559: LD_VAR 0 18
39563: PPUSH
39564: LD_INT 22
39566: PUSH
39567: LD_VAR 0 16
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: LD_INT 30
39581: PUSH
39582: LD_INT 2
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 30
39591: PUSH
39592: LD_INT 3
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: LIST
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PPUSH
39608: CALL_OW 72
39612: ST_TO_ADDR
39613: GO 39697
39615: LD_INT 4
39617: DOUBLE
39618: EQUAL
39619: IFTRUE 39623
39621: GO 39696
39623: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39624: LD_ADDR_VAR 0 12
39628: PUSH
39629: LD_VAR 0 18
39633: PPUSH
39634: LD_INT 22
39636: PUSH
39637: LD_VAR 0 16
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: LD_INT 30
39651: PUSH
39652: LD_INT 6
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 30
39661: PUSH
39662: LD_INT 7
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 30
39671: PUSH
39672: LD_INT 8
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PPUSH
39689: CALL_OW 72
39693: ST_TO_ADDR
39694: GO 39697
39696: POP
// if i = 1 then
39697: LD_VAR 0 8
39701: PUSH
39702: LD_INT 1
39704: EQUAL
39705: IFFALSE 39816
// begin tmp := [ ] ;
39707: LD_ADDR_VAR 0 19
39711: PUSH
39712: EMPTY
39713: ST_TO_ADDR
// for j in f do
39714: LD_ADDR_VAR 0 9
39718: PUSH
39719: LD_VAR 0 12
39723: PUSH
39724: FOR_IN
39725: IFFALSE 39798
// if GetBType ( j ) = b_bunker then
39727: LD_VAR 0 9
39731: PPUSH
39732: CALL_OW 266
39736: PUSH
39737: LD_INT 32
39739: EQUAL
39740: IFFALSE 39767
// tmp := Insert ( tmp , 1 , j ) else
39742: LD_ADDR_VAR 0 19
39746: PUSH
39747: LD_VAR 0 19
39751: PPUSH
39752: LD_INT 1
39754: PPUSH
39755: LD_VAR 0 9
39759: PPUSH
39760: CALL_OW 2
39764: ST_TO_ADDR
39765: GO 39796
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39767: LD_ADDR_VAR 0 19
39771: PUSH
39772: LD_VAR 0 19
39776: PPUSH
39777: LD_VAR 0 19
39781: PUSH
39782: LD_INT 1
39784: PLUS
39785: PPUSH
39786: LD_VAR 0 9
39790: PPUSH
39791: CALL_OW 2
39795: ST_TO_ADDR
39796: GO 39724
39798: POP
39799: POP
// if tmp then
39800: LD_VAR 0 19
39804: IFFALSE 39816
// f := tmp ;
39806: LD_ADDR_VAR 0 12
39810: PUSH
39811: LD_VAR 0 19
39815: ST_TO_ADDR
// end ; x := personel [ i ] ;
39816: LD_ADDR_VAR 0 13
39820: PUSH
39821: LD_VAR 0 6
39825: PUSH
39826: LD_VAR 0 8
39830: ARRAY
39831: ST_TO_ADDR
// if x = - 1 then
39832: LD_VAR 0 13
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: EQUAL
39841: IFFALSE 40050
// begin for j in f do
39843: LD_ADDR_VAR 0 9
39847: PUSH
39848: LD_VAR 0 12
39852: PUSH
39853: FOR_IN
39854: IFFALSE 40046
// repeat InitHc ;
39856: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39860: LD_VAR 0 9
39864: PPUSH
39865: CALL_OW 266
39869: PUSH
39870: LD_INT 5
39872: EQUAL
39873: IFFALSE 39943
// begin if UnitsInside ( j ) < 3 then
39875: LD_VAR 0 9
39879: PPUSH
39880: CALL_OW 313
39884: PUSH
39885: LD_INT 3
39887: LESS
39888: IFFALSE 39924
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39890: LD_INT 0
39892: PPUSH
39893: LD_INT 5
39895: PUSH
39896: LD_INT 8
39898: PUSH
39899: LD_INT 9
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: LIST
39906: PUSH
39907: LD_VAR 0 17
39911: ARRAY
39912: PPUSH
39913: LD_VAR 0 4
39917: PPUSH
39918: CALL_OW 380
39922: GO 39941
// PrepareHuman ( false , i , skill ) ;
39924: LD_INT 0
39926: PPUSH
39927: LD_VAR 0 8
39931: PPUSH
39932: LD_VAR 0 4
39936: PPUSH
39937: CALL_OW 380
// end else
39941: GO 39960
// PrepareHuman ( false , i , skill ) ;
39943: LD_INT 0
39945: PPUSH
39946: LD_VAR 0 8
39950: PPUSH
39951: LD_VAR 0 4
39955: PPUSH
39956: CALL_OW 380
// un := CreateHuman ;
39960: LD_ADDR_VAR 0 14
39964: PUSH
39965: CALL_OW 44
39969: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39970: LD_ADDR_VAR 0 7
39974: PUSH
39975: LD_VAR 0 7
39979: PPUSH
39980: LD_INT 1
39982: PPUSH
39983: LD_VAR 0 14
39987: PPUSH
39988: CALL_OW 2
39992: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39993: LD_VAR 0 14
39997: PPUSH
39998: LD_VAR 0 9
40002: PPUSH
40003: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40007: LD_VAR 0 9
40011: PPUSH
40012: CALL_OW 313
40016: PUSH
40017: LD_INT 6
40019: EQUAL
40020: PUSH
40021: LD_VAR 0 9
40025: PPUSH
40026: CALL_OW 266
40030: PUSH
40031: LD_INT 32
40033: PUSH
40034: LD_INT 31
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: IN
40041: OR
40042: IFFALSE 39856
40044: GO 39853
40046: POP
40047: POP
// end else
40048: GO 40430
// for j = 1 to x do
40050: LD_ADDR_VAR 0 9
40054: PUSH
40055: DOUBLE
40056: LD_INT 1
40058: DEC
40059: ST_TO_ADDR
40060: LD_VAR 0 13
40064: PUSH
40065: FOR_TO
40066: IFFALSE 40428
// begin InitHc ;
40068: CALL_OW 19
// if not f then
40072: LD_VAR 0 12
40076: NOT
40077: IFFALSE 40166
// begin PrepareHuman ( false , i , skill ) ;
40079: LD_INT 0
40081: PPUSH
40082: LD_VAR 0 8
40086: PPUSH
40087: LD_VAR 0 4
40091: PPUSH
40092: CALL_OW 380
// un := CreateHuman ;
40096: LD_ADDR_VAR 0 14
40100: PUSH
40101: CALL_OW 44
40105: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40106: LD_ADDR_VAR 0 7
40110: PUSH
40111: LD_VAR 0 7
40115: PPUSH
40116: LD_INT 1
40118: PPUSH
40119: LD_VAR 0 14
40123: PPUSH
40124: CALL_OW 2
40128: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40129: LD_VAR 0 14
40133: PPUSH
40134: LD_VAR 0 1
40138: PPUSH
40139: CALL_OW 250
40143: PPUSH
40144: LD_VAR 0 1
40148: PPUSH
40149: CALL_OW 251
40153: PPUSH
40154: LD_INT 10
40156: PPUSH
40157: LD_INT 0
40159: PPUSH
40160: CALL_OW 50
// continue ;
40164: GO 40065
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40166: LD_VAR 0 12
40170: PUSH
40171: LD_INT 1
40173: ARRAY
40174: PPUSH
40175: CALL_OW 313
40179: PUSH
40180: LD_VAR 0 12
40184: PUSH
40185: LD_INT 1
40187: ARRAY
40188: PPUSH
40189: CALL_OW 266
40193: PUSH
40194: LD_INT 32
40196: PUSH
40197: LD_INT 31
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: IN
40204: AND
40205: PUSH
40206: LD_VAR 0 12
40210: PUSH
40211: LD_INT 1
40213: ARRAY
40214: PPUSH
40215: CALL_OW 313
40219: PUSH
40220: LD_INT 6
40222: EQUAL
40223: OR
40224: IFFALSE 40244
// f := Delete ( f , 1 ) ;
40226: LD_ADDR_VAR 0 12
40230: PUSH
40231: LD_VAR 0 12
40235: PPUSH
40236: LD_INT 1
40238: PPUSH
40239: CALL_OW 3
40243: ST_TO_ADDR
// if not f then
40244: LD_VAR 0 12
40248: NOT
40249: IFFALSE 40267
// begin x := x + 2 ;
40251: LD_ADDR_VAR 0 13
40255: PUSH
40256: LD_VAR 0 13
40260: PUSH
40261: LD_INT 2
40263: PLUS
40264: ST_TO_ADDR
// continue ;
40265: GO 40065
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40267: LD_VAR 0 12
40271: PUSH
40272: LD_INT 1
40274: ARRAY
40275: PPUSH
40276: CALL_OW 266
40280: PUSH
40281: LD_INT 5
40283: EQUAL
40284: IFFALSE 40358
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40286: LD_VAR 0 12
40290: PUSH
40291: LD_INT 1
40293: ARRAY
40294: PPUSH
40295: CALL_OW 313
40299: PUSH
40300: LD_INT 3
40302: LESS
40303: IFFALSE 40339
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40305: LD_INT 0
40307: PPUSH
40308: LD_INT 5
40310: PUSH
40311: LD_INT 8
40313: PUSH
40314: LD_INT 9
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: LIST
40321: PUSH
40322: LD_VAR 0 17
40326: ARRAY
40327: PPUSH
40328: LD_VAR 0 4
40332: PPUSH
40333: CALL_OW 380
40337: GO 40356
// PrepareHuman ( false , i , skill ) ;
40339: LD_INT 0
40341: PPUSH
40342: LD_VAR 0 8
40346: PPUSH
40347: LD_VAR 0 4
40351: PPUSH
40352: CALL_OW 380
// end else
40356: GO 40375
// PrepareHuman ( false , i , skill ) ;
40358: LD_INT 0
40360: PPUSH
40361: LD_VAR 0 8
40365: PPUSH
40366: LD_VAR 0 4
40370: PPUSH
40371: CALL_OW 380
// un := CreateHuman ;
40375: LD_ADDR_VAR 0 14
40379: PUSH
40380: CALL_OW 44
40384: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40385: LD_ADDR_VAR 0 7
40389: PUSH
40390: LD_VAR 0 7
40394: PPUSH
40395: LD_INT 1
40397: PPUSH
40398: LD_VAR 0 14
40402: PPUSH
40403: CALL_OW 2
40407: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40408: LD_VAR 0 14
40412: PPUSH
40413: LD_VAR 0 12
40417: PUSH
40418: LD_INT 1
40420: ARRAY
40421: PPUSH
40422: CALL_OW 52
// end ;
40426: GO 40065
40428: POP
40429: POP
// end ;
40430: GO 39367
40432: POP
40433: POP
// result := result ^ buildings ;
40434: LD_ADDR_VAR 0 7
40438: PUSH
40439: LD_VAR 0 7
40443: PUSH
40444: LD_VAR 0 18
40448: ADD
40449: ST_TO_ADDR
// end else
40450: GO 40593
// begin for i = 1 to personel do
40452: LD_ADDR_VAR 0 8
40456: PUSH
40457: DOUBLE
40458: LD_INT 1
40460: DEC
40461: ST_TO_ADDR
40462: LD_VAR 0 6
40466: PUSH
40467: FOR_TO
40468: IFFALSE 40591
// begin if i > 4 then
40470: LD_VAR 0 8
40474: PUSH
40475: LD_INT 4
40477: GREATER
40478: IFFALSE 40482
// break ;
40480: GO 40591
// x := personel [ i ] ;
40482: LD_ADDR_VAR 0 13
40486: PUSH
40487: LD_VAR 0 6
40491: PUSH
40492: LD_VAR 0 8
40496: ARRAY
40497: ST_TO_ADDR
// if x = - 1 then
40498: LD_VAR 0 13
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: EQUAL
40507: IFFALSE 40511
// continue ;
40509: GO 40467
// PrepareHuman ( false , i , skill ) ;
40511: LD_INT 0
40513: PPUSH
40514: LD_VAR 0 8
40518: PPUSH
40519: LD_VAR 0 4
40523: PPUSH
40524: CALL_OW 380
// un := CreateHuman ;
40528: LD_ADDR_VAR 0 14
40532: PUSH
40533: CALL_OW 44
40537: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40538: LD_VAR 0 14
40542: PPUSH
40543: LD_VAR 0 1
40547: PPUSH
40548: CALL_OW 250
40552: PPUSH
40553: LD_VAR 0 1
40557: PPUSH
40558: CALL_OW 251
40562: PPUSH
40563: LD_INT 10
40565: PPUSH
40566: LD_INT 0
40568: PPUSH
40569: CALL_OW 50
// result := result ^ un ;
40573: LD_ADDR_VAR 0 7
40577: PUSH
40578: LD_VAR 0 7
40582: PUSH
40583: LD_VAR 0 14
40587: ADD
40588: ST_TO_ADDR
// end ;
40589: GO 40467
40591: POP
40592: POP
// end ; end ;
40593: LD_VAR 0 7
40597: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40598: LD_INT 0
40600: PPUSH
40601: PPUSH
40602: PPUSH
40603: PPUSH
40604: PPUSH
40605: PPUSH
40606: PPUSH
40607: PPUSH
40608: PPUSH
40609: PPUSH
40610: PPUSH
40611: PPUSH
40612: PPUSH
40613: PPUSH
40614: PPUSH
40615: PPUSH
// result := false ;
40616: LD_ADDR_VAR 0 3
40620: PUSH
40621: LD_INT 0
40623: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40624: LD_VAR 0 1
40628: NOT
40629: PUSH
40630: LD_VAR 0 1
40634: PPUSH
40635: CALL_OW 266
40639: PUSH
40640: LD_INT 32
40642: PUSH
40643: LD_INT 33
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: IN
40650: NOT
40651: OR
40652: IFFALSE 40656
// exit ;
40654: GO 41765
// nat := GetNation ( tower ) ;
40656: LD_ADDR_VAR 0 12
40660: PUSH
40661: LD_VAR 0 1
40665: PPUSH
40666: CALL_OW 248
40670: ST_TO_ADDR
// side := GetSide ( tower ) ;
40671: LD_ADDR_VAR 0 16
40675: PUSH
40676: LD_VAR 0 1
40680: PPUSH
40681: CALL_OW 255
40685: ST_TO_ADDR
// x := GetX ( tower ) ;
40686: LD_ADDR_VAR 0 10
40690: PUSH
40691: LD_VAR 0 1
40695: PPUSH
40696: CALL_OW 250
40700: ST_TO_ADDR
// y := GetY ( tower ) ;
40701: LD_ADDR_VAR 0 11
40705: PUSH
40706: LD_VAR 0 1
40710: PPUSH
40711: CALL_OW 251
40715: ST_TO_ADDR
// if not x or not y then
40716: LD_VAR 0 10
40720: NOT
40721: PUSH
40722: LD_VAR 0 11
40726: NOT
40727: OR
40728: IFFALSE 40732
// exit ;
40730: GO 41765
// weapon := 0 ;
40732: LD_ADDR_VAR 0 18
40736: PUSH
40737: LD_INT 0
40739: ST_TO_ADDR
// fac_list := [ ] ;
40740: LD_ADDR_VAR 0 17
40744: PUSH
40745: EMPTY
40746: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40747: LD_ADDR_VAR 0 6
40751: PUSH
40752: LD_VAR 0 1
40756: PPUSH
40757: CALL_OW 274
40761: PPUSH
40762: LD_VAR 0 2
40766: PPUSH
40767: LD_INT 0
40769: PPUSH
40770: CALL 38336 0 3
40774: PPUSH
40775: LD_INT 30
40777: PUSH
40778: LD_INT 3
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PPUSH
40785: CALL_OW 72
40789: ST_TO_ADDR
// if not factories then
40790: LD_VAR 0 6
40794: NOT
40795: IFFALSE 40799
// exit ;
40797: GO 41765
// for i in factories do
40799: LD_ADDR_VAR 0 8
40803: PUSH
40804: LD_VAR 0 6
40808: PUSH
40809: FOR_IN
40810: IFFALSE 40835
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40812: LD_ADDR_VAR 0 17
40816: PUSH
40817: LD_VAR 0 17
40821: PUSH
40822: LD_VAR 0 8
40826: PPUSH
40827: CALL_OW 478
40831: UNION
40832: ST_TO_ADDR
40833: GO 40809
40835: POP
40836: POP
// if not fac_list then
40837: LD_VAR 0 17
40841: NOT
40842: IFFALSE 40846
// exit ;
40844: GO 41765
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40846: LD_ADDR_VAR 0 5
40850: PUSH
40851: LD_INT 4
40853: PUSH
40854: LD_INT 5
40856: PUSH
40857: LD_INT 9
40859: PUSH
40860: LD_INT 10
40862: PUSH
40863: LD_INT 6
40865: PUSH
40866: LD_INT 7
40868: PUSH
40869: LD_INT 11
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 27
40883: PUSH
40884: LD_INT 28
40886: PUSH
40887: LD_INT 26
40889: PUSH
40890: LD_INT 30
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 43
40901: PUSH
40902: LD_INT 44
40904: PUSH
40905: LD_INT 46
40907: PUSH
40908: LD_INT 45
40910: PUSH
40911: LD_INT 47
40913: PUSH
40914: LD_INT 49
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: LIST
40929: PUSH
40930: LD_VAR 0 12
40934: ARRAY
40935: ST_TO_ADDR
// list := list isect fac_list ;
40936: LD_ADDR_VAR 0 5
40940: PUSH
40941: LD_VAR 0 5
40945: PUSH
40946: LD_VAR 0 17
40950: ISECT
40951: ST_TO_ADDR
// if not list then
40952: LD_VAR 0 5
40956: NOT
40957: IFFALSE 40961
// exit ;
40959: GO 41765
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40961: LD_VAR 0 12
40965: PUSH
40966: LD_INT 3
40968: EQUAL
40969: PUSH
40970: LD_INT 49
40972: PUSH
40973: LD_VAR 0 5
40977: IN
40978: AND
40979: PUSH
40980: LD_INT 31
40982: PPUSH
40983: LD_VAR 0 16
40987: PPUSH
40988: CALL_OW 321
40992: PUSH
40993: LD_INT 2
40995: EQUAL
40996: AND
40997: IFFALSE 41057
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40999: LD_INT 22
41001: PUSH
41002: LD_VAR 0 16
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 35
41013: PUSH
41014: LD_INT 49
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 91
41023: PUSH
41024: LD_VAR 0 1
41028: PUSH
41029: LD_INT 10
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: LIST
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: LIST
41041: PPUSH
41042: CALL_OW 69
41046: NOT
41047: IFFALSE 41057
// weapon := ru_time_lapser ;
41049: LD_ADDR_VAR 0 18
41053: PUSH
41054: LD_INT 49
41056: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41057: LD_VAR 0 12
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: LD_INT 2
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: IN
41072: PUSH
41073: LD_INT 11
41075: PUSH
41076: LD_VAR 0 5
41080: IN
41081: PUSH
41082: LD_INT 30
41084: PUSH
41085: LD_VAR 0 5
41089: IN
41090: OR
41091: AND
41092: PUSH
41093: LD_INT 6
41095: PPUSH
41096: LD_VAR 0 16
41100: PPUSH
41101: CALL_OW 321
41105: PUSH
41106: LD_INT 2
41108: EQUAL
41109: AND
41110: IFFALSE 41275
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41112: LD_INT 22
41114: PUSH
41115: LD_VAR 0 16
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: LD_INT 35
41129: PUSH
41130: LD_INT 11
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 35
41139: PUSH
41140: LD_INT 30
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 91
41154: PUSH
41155: LD_VAR 0 1
41159: PUSH
41160: LD_INT 18
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: LIST
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: LIST
41172: PPUSH
41173: CALL_OW 69
41177: NOT
41178: PUSH
41179: LD_INT 22
41181: PUSH
41182: LD_VAR 0 16
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: LD_INT 30
41196: PUSH
41197: LD_INT 32
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 30
41206: PUSH
41207: LD_INT 33
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 91
41221: PUSH
41222: LD_VAR 0 1
41226: PUSH
41227: LD_INT 12
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: LIST
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: LIST
41239: PUSH
41240: EMPTY
41241: LIST
41242: PPUSH
41243: CALL_OW 69
41247: PUSH
41248: LD_INT 2
41250: GREATER
41251: AND
41252: IFFALSE 41275
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41254: LD_ADDR_VAR 0 18
41258: PUSH
41259: LD_INT 11
41261: PUSH
41262: LD_INT 30
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_VAR 0 12
41273: ARRAY
41274: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41275: LD_VAR 0 18
41279: NOT
41280: PUSH
41281: LD_INT 40
41283: PPUSH
41284: LD_VAR 0 16
41288: PPUSH
41289: CALL_OW 321
41293: PUSH
41294: LD_INT 2
41296: EQUAL
41297: AND
41298: PUSH
41299: LD_INT 7
41301: PUSH
41302: LD_VAR 0 5
41306: IN
41307: PUSH
41308: LD_INT 28
41310: PUSH
41311: LD_VAR 0 5
41315: IN
41316: OR
41317: PUSH
41318: LD_INT 45
41320: PUSH
41321: LD_VAR 0 5
41325: IN
41326: OR
41327: AND
41328: IFFALSE 41582
// begin hex := GetHexInfo ( x , y ) ;
41330: LD_ADDR_VAR 0 4
41334: PUSH
41335: LD_VAR 0 10
41339: PPUSH
41340: LD_VAR 0 11
41344: PPUSH
41345: CALL_OW 546
41349: ST_TO_ADDR
// if hex [ 1 ] then
41350: LD_VAR 0 4
41354: PUSH
41355: LD_INT 1
41357: ARRAY
41358: IFFALSE 41362
// exit ;
41360: GO 41765
// height := hex [ 2 ] ;
41362: LD_ADDR_VAR 0 15
41366: PUSH
41367: LD_VAR 0 4
41371: PUSH
41372: LD_INT 2
41374: ARRAY
41375: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41376: LD_ADDR_VAR 0 14
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: LD_INT 2
41386: PUSH
41387: LD_INT 3
41389: PUSH
41390: LD_INT 5
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: ST_TO_ADDR
// for i in tmp do
41399: LD_ADDR_VAR 0 8
41403: PUSH
41404: LD_VAR 0 14
41408: PUSH
41409: FOR_IN
41410: IFFALSE 41580
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41412: LD_ADDR_VAR 0 9
41416: PUSH
41417: LD_VAR 0 10
41421: PPUSH
41422: LD_VAR 0 8
41426: PPUSH
41427: LD_INT 5
41429: PPUSH
41430: CALL_OW 272
41434: PUSH
41435: LD_VAR 0 11
41439: PPUSH
41440: LD_VAR 0 8
41444: PPUSH
41445: LD_INT 5
41447: PPUSH
41448: CALL_OW 273
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41457: LD_VAR 0 9
41461: PUSH
41462: LD_INT 1
41464: ARRAY
41465: PPUSH
41466: LD_VAR 0 9
41470: PUSH
41471: LD_INT 2
41473: ARRAY
41474: PPUSH
41475: CALL_OW 488
41479: IFFALSE 41578
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41481: LD_ADDR_VAR 0 4
41485: PUSH
41486: LD_VAR 0 9
41490: PUSH
41491: LD_INT 1
41493: ARRAY
41494: PPUSH
41495: LD_VAR 0 9
41499: PUSH
41500: LD_INT 2
41502: ARRAY
41503: PPUSH
41504: CALL_OW 546
41508: ST_TO_ADDR
// if hex [ 1 ] then
41509: LD_VAR 0 4
41513: PUSH
41514: LD_INT 1
41516: ARRAY
41517: IFFALSE 41521
// continue ;
41519: GO 41409
// h := hex [ 2 ] ;
41521: LD_ADDR_VAR 0 13
41525: PUSH
41526: LD_VAR 0 4
41530: PUSH
41531: LD_INT 2
41533: ARRAY
41534: ST_TO_ADDR
// if h + 7 < height then
41535: LD_VAR 0 13
41539: PUSH
41540: LD_INT 7
41542: PLUS
41543: PUSH
41544: LD_VAR 0 15
41548: LESS
41549: IFFALSE 41578
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41551: LD_ADDR_VAR 0 18
41555: PUSH
41556: LD_INT 7
41558: PUSH
41559: LD_INT 28
41561: PUSH
41562: LD_INT 45
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: LIST
41569: PUSH
41570: LD_VAR 0 12
41574: ARRAY
41575: ST_TO_ADDR
// break ;
41576: GO 41580
// end ; end ; end ;
41578: GO 41409
41580: POP
41581: POP
// end ; if not weapon then
41582: LD_VAR 0 18
41586: NOT
41587: IFFALSE 41647
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41589: LD_ADDR_VAR 0 5
41593: PUSH
41594: LD_VAR 0 5
41598: PUSH
41599: LD_INT 11
41601: PUSH
41602: LD_INT 30
41604: PUSH
41605: LD_INT 49
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: LIST
41612: DIFF
41613: ST_TO_ADDR
// if not list then
41614: LD_VAR 0 5
41618: NOT
41619: IFFALSE 41623
// exit ;
41621: GO 41765
// weapon := list [ rand ( 1 , list ) ] ;
41623: LD_ADDR_VAR 0 18
41627: PUSH
41628: LD_VAR 0 5
41632: PUSH
41633: LD_INT 1
41635: PPUSH
41636: LD_VAR 0 5
41640: PPUSH
41641: CALL_OW 12
41645: ARRAY
41646: ST_TO_ADDR
// end ; if weapon then
41647: LD_VAR 0 18
41651: IFFALSE 41765
// begin tmp := CostOfWeapon ( weapon ) ;
41653: LD_ADDR_VAR 0 14
41657: PUSH
41658: LD_VAR 0 18
41662: PPUSH
41663: CALL_OW 451
41667: ST_TO_ADDR
// j := GetBase ( tower ) ;
41668: LD_ADDR_VAR 0 9
41672: PUSH
41673: LD_VAR 0 1
41677: PPUSH
41678: CALL_OW 274
41682: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41683: LD_VAR 0 9
41687: PPUSH
41688: LD_INT 1
41690: PPUSH
41691: CALL_OW 275
41695: PUSH
41696: LD_VAR 0 14
41700: PUSH
41701: LD_INT 1
41703: ARRAY
41704: GREATEREQUAL
41705: PUSH
41706: LD_VAR 0 9
41710: PPUSH
41711: LD_INT 2
41713: PPUSH
41714: CALL_OW 275
41718: PUSH
41719: LD_VAR 0 14
41723: PUSH
41724: LD_INT 2
41726: ARRAY
41727: GREATEREQUAL
41728: AND
41729: PUSH
41730: LD_VAR 0 9
41734: PPUSH
41735: LD_INT 3
41737: PPUSH
41738: CALL_OW 275
41742: PUSH
41743: LD_VAR 0 14
41747: PUSH
41748: LD_INT 3
41750: ARRAY
41751: GREATEREQUAL
41752: AND
41753: IFFALSE 41765
// result := weapon ;
41755: LD_ADDR_VAR 0 3
41759: PUSH
41760: LD_VAR 0 18
41764: ST_TO_ADDR
// end ; end ;
41765: LD_VAR 0 3
41769: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41770: LD_INT 0
41772: PPUSH
41773: PPUSH
// result := true ;
41774: LD_ADDR_VAR 0 3
41778: PUSH
41779: LD_INT 1
41781: ST_TO_ADDR
// if array1 = array2 then
41782: LD_VAR 0 1
41786: PUSH
41787: LD_VAR 0 2
41791: EQUAL
41792: IFFALSE 41852
// begin for i = 1 to array1 do
41794: LD_ADDR_VAR 0 4
41798: PUSH
41799: DOUBLE
41800: LD_INT 1
41802: DEC
41803: ST_TO_ADDR
41804: LD_VAR 0 1
41808: PUSH
41809: FOR_TO
41810: IFFALSE 41848
// if array1 [ i ] <> array2 [ i ] then
41812: LD_VAR 0 1
41816: PUSH
41817: LD_VAR 0 4
41821: ARRAY
41822: PUSH
41823: LD_VAR 0 2
41827: PUSH
41828: LD_VAR 0 4
41832: ARRAY
41833: NONEQUAL
41834: IFFALSE 41846
// begin result := false ;
41836: LD_ADDR_VAR 0 3
41840: PUSH
41841: LD_INT 0
41843: ST_TO_ADDR
// break ;
41844: GO 41848
// end ;
41846: GO 41809
41848: POP
41849: POP
// end else
41850: GO 41860
// result := false ;
41852: LD_ADDR_VAR 0 3
41856: PUSH
41857: LD_INT 0
41859: ST_TO_ADDR
// end ;
41860: LD_VAR 0 3
41864: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41865: LD_INT 0
41867: PPUSH
41868: PPUSH
// if not array1 or not array2 then
41869: LD_VAR 0 1
41873: NOT
41874: PUSH
41875: LD_VAR 0 2
41879: NOT
41880: OR
41881: IFFALSE 41885
// exit ;
41883: GO 41949
// result := true ;
41885: LD_ADDR_VAR 0 3
41889: PUSH
41890: LD_INT 1
41892: ST_TO_ADDR
// for i = 1 to array1 do
41893: LD_ADDR_VAR 0 4
41897: PUSH
41898: DOUBLE
41899: LD_INT 1
41901: DEC
41902: ST_TO_ADDR
41903: LD_VAR 0 1
41907: PUSH
41908: FOR_TO
41909: IFFALSE 41947
// if array1 [ i ] <> array2 [ i ] then
41911: LD_VAR 0 1
41915: PUSH
41916: LD_VAR 0 4
41920: ARRAY
41921: PUSH
41922: LD_VAR 0 2
41926: PUSH
41927: LD_VAR 0 4
41931: ARRAY
41932: NONEQUAL
41933: IFFALSE 41945
// begin result := false ;
41935: LD_ADDR_VAR 0 3
41939: PUSH
41940: LD_INT 0
41942: ST_TO_ADDR
// break ;
41943: GO 41947
// end ;
41945: GO 41908
41947: POP
41948: POP
// end ;
41949: LD_VAR 0 3
41953: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41954: LD_INT 0
41956: PPUSH
41957: PPUSH
41958: PPUSH
// pom := GetBase ( fac ) ;
41959: LD_ADDR_VAR 0 5
41963: PUSH
41964: LD_VAR 0 1
41968: PPUSH
41969: CALL_OW 274
41973: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41974: LD_ADDR_VAR 0 4
41978: PUSH
41979: LD_VAR 0 2
41983: PUSH
41984: LD_INT 1
41986: ARRAY
41987: PPUSH
41988: LD_VAR 0 2
41992: PUSH
41993: LD_INT 2
41995: ARRAY
41996: PPUSH
41997: LD_VAR 0 2
42001: PUSH
42002: LD_INT 3
42004: ARRAY
42005: PPUSH
42006: LD_VAR 0 2
42010: PUSH
42011: LD_INT 4
42013: ARRAY
42014: PPUSH
42015: CALL_OW 449
42019: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42020: LD_ADDR_VAR 0 3
42024: PUSH
42025: LD_VAR 0 5
42029: PPUSH
42030: LD_INT 1
42032: PPUSH
42033: CALL_OW 275
42037: PUSH
42038: LD_VAR 0 4
42042: PUSH
42043: LD_INT 1
42045: ARRAY
42046: GREATEREQUAL
42047: PUSH
42048: LD_VAR 0 5
42052: PPUSH
42053: LD_INT 2
42055: PPUSH
42056: CALL_OW 275
42060: PUSH
42061: LD_VAR 0 4
42065: PUSH
42066: LD_INT 2
42068: ARRAY
42069: GREATEREQUAL
42070: AND
42071: PUSH
42072: LD_VAR 0 5
42076: PPUSH
42077: LD_INT 3
42079: PPUSH
42080: CALL_OW 275
42084: PUSH
42085: LD_VAR 0 4
42089: PUSH
42090: LD_INT 3
42092: ARRAY
42093: GREATEREQUAL
42094: AND
42095: ST_TO_ADDR
// end ;
42096: LD_VAR 0 3
42100: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42101: LD_INT 0
42103: PPUSH
42104: PPUSH
42105: PPUSH
42106: PPUSH
// pom := GetBase ( building ) ;
42107: LD_ADDR_VAR 0 3
42111: PUSH
42112: LD_VAR 0 1
42116: PPUSH
42117: CALL_OW 274
42121: ST_TO_ADDR
// if not pom then
42122: LD_VAR 0 3
42126: NOT
42127: IFFALSE 42131
// exit ;
42129: GO 42301
// btype := GetBType ( building ) ;
42131: LD_ADDR_VAR 0 5
42135: PUSH
42136: LD_VAR 0 1
42140: PPUSH
42141: CALL_OW 266
42145: ST_TO_ADDR
// if btype = b_armoury then
42146: LD_VAR 0 5
42150: PUSH
42151: LD_INT 4
42153: EQUAL
42154: IFFALSE 42164
// btype := b_barracks ;
42156: LD_ADDR_VAR 0 5
42160: PUSH
42161: LD_INT 5
42163: ST_TO_ADDR
// if btype = b_depot then
42164: LD_VAR 0 5
42168: PUSH
42169: LD_INT 0
42171: EQUAL
42172: IFFALSE 42182
// btype := b_warehouse ;
42174: LD_ADDR_VAR 0 5
42178: PUSH
42179: LD_INT 1
42181: ST_TO_ADDR
// if btype = b_workshop then
42182: LD_VAR 0 5
42186: PUSH
42187: LD_INT 2
42189: EQUAL
42190: IFFALSE 42200
// btype := b_factory ;
42192: LD_ADDR_VAR 0 5
42196: PUSH
42197: LD_INT 3
42199: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42200: LD_ADDR_VAR 0 4
42204: PUSH
42205: LD_VAR 0 5
42209: PPUSH
42210: LD_VAR 0 1
42214: PPUSH
42215: CALL_OW 248
42219: PPUSH
42220: CALL_OW 450
42224: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42225: LD_ADDR_VAR 0 2
42229: PUSH
42230: LD_VAR 0 3
42234: PPUSH
42235: LD_INT 1
42237: PPUSH
42238: CALL_OW 275
42242: PUSH
42243: LD_VAR 0 4
42247: PUSH
42248: LD_INT 1
42250: ARRAY
42251: GREATEREQUAL
42252: PUSH
42253: LD_VAR 0 3
42257: PPUSH
42258: LD_INT 2
42260: PPUSH
42261: CALL_OW 275
42265: PUSH
42266: LD_VAR 0 4
42270: PUSH
42271: LD_INT 2
42273: ARRAY
42274: GREATEREQUAL
42275: AND
42276: PUSH
42277: LD_VAR 0 3
42281: PPUSH
42282: LD_INT 3
42284: PPUSH
42285: CALL_OW 275
42289: PUSH
42290: LD_VAR 0 4
42294: PUSH
42295: LD_INT 3
42297: ARRAY
42298: GREATEREQUAL
42299: AND
42300: ST_TO_ADDR
// end ;
42301: LD_VAR 0 2
42305: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42306: LD_INT 0
42308: PPUSH
42309: PPUSH
42310: PPUSH
// pom := GetBase ( building ) ;
42311: LD_ADDR_VAR 0 4
42315: PUSH
42316: LD_VAR 0 1
42320: PPUSH
42321: CALL_OW 274
42325: ST_TO_ADDR
// if not pom then
42326: LD_VAR 0 4
42330: NOT
42331: IFFALSE 42335
// exit ;
42333: GO 42436
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42335: LD_ADDR_VAR 0 5
42339: PUSH
42340: LD_VAR 0 2
42344: PPUSH
42345: LD_VAR 0 1
42349: PPUSH
42350: CALL_OW 248
42354: PPUSH
42355: CALL_OW 450
42359: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42360: LD_ADDR_VAR 0 3
42364: PUSH
42365: LD_VAR 0 4
42369: PPUSH
42370: LD_INT 1
42372: PPUSH
42373: CALL_OW 275
42377: PUSH
42378: LD_VAR 0 5
42382: PUSH
42383: LD_INT 1
42385: ARRAY
42386: GREATEREQUAL
42387: PUSH
42388: LD_VAR 0 4
42392: PPUSH
42393: LD_INT 2
42395: PPUSH
42396: CALL_OW 275
42400: PUSH
42401: LD_VAR 0 5
42405: PUSH
42406: LD_INT 2
42408: ARRAY
42409: GREATEREQUAL
42410: AND
42411: PUSH
42412: LD_VAR 0 4
42416: PPUSH
42417: LD_INT 3
42419: PPUSH
42420: CALL_OW 275
42424: PUSH
42425: LD_VAR 0 5
42429: PUSH
42430: LD_INT 3
42432: ARRAY
42433: GREATEREQUAL
42434: AND
42435: ST_TO_ADDR
// end ;
42436: LD_VAR 0 3
42440: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42441: LD_INT 0
42443: PPUSH
42444: PPUSH
42445: PPUSH
42446: PPUSH
42447: PPUSH
42448: PPUSH
42449: PPUSH
42450: PPUSH
42451: PPUSH
42452: PPUSH
42453: PPUSH
// result := false ;
42454: LD_ADDR_VAR 0 8
42458: PUSH
42459: LD_INT 0
42461: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42462: LD_VAR 0 5
42466: NOT
42467: PUSH
42468: LD_VAR 0 1
42472: NOT
42473: OR
42474: PUSH
42475: LD_VAR 0 2
42479: NOT
42480: OR
42481: PUSH
42482: LD_VAR 0 3
42486: NOT
42487: OR
42488: IFFALSE 42492
// exit ;
42490: GO 43306
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42492: LD_ADDR_VAR 0 14
42496: PUSH
42497: LD_VAR 0 1
42501: PPUSH
42502: LD_VAR 0 2
42506: PPUSH
42507: LD_VAR 0 3
42511: PPUSH
42512: LD_VAR 0 4
42516: PPUSH
42517: LD_VAR 0 5
42521: PUSH
42522: LD_INT 1
42524: ARRAY
42525: PPUSH
42526: CALL_OW 248
42530: PPUSH
42531: LD_INT 0
42533: PPUSH
42534: CALL 44539 0 6
42538: ST_TO_ADDR
// if not hexes then
42539: LD_VAR 0 14
42543: NOT
42544: IFFALSE 42548
// exit ;
42546: GO 43306
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42548: LD_ADDR_VAR 0 17
42552: PUSH
42553: LD_VAR 0 5
42557: PPUSH
42558: LD_INT 22
42560: PUSH
42561: LD_VAR 0 13
42565: PPUSH
42566: CALL_OW 255
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: LD_INT 30
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 30
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: LIST
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PPUSH
42607: CALL_OW 72
42611: ST_TO_ADDR
// for i = 1 to hexes do
42612: LD_ADDR_VAR 0 9
42616: PUSH
42617: DOUBLE
42618: LD_INT 1
42620: DEC
42621: ST_TO_ADDR
42622: LD_VAR 0 14
42626: PUSH
42627: FOR_TO
42628: IFFALSE 43304
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42630: LD_ADDR_VAR 0 13
42634: PUSH
42635: LD_VAR 0 14
42639: PUSH
42640: LD_VAR 0 9
42644: ARRAY
42645: PUSH
42646: LD_INT 1
42648: ARRAY
42649: PPUSH
42650: LD_VAR 0 14
42654: PUSH
42655: LD_VAR 0 9
42659: ARRAY
42660: PUSH
42661: LD_INT 2
42663: ARRAY
42664: PPUSH
42665: CALL_OW 428
42669: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42670: LD_VAR 0 14
42674: PUSH
42675: LD_VAR 0 9
42679: ARRAY
42680: PUSH
42681: LD_INT 1
42683: ARRAY
42684: PPUSH
42685: LD_VAR 0 14
42689: PUSH
42690: LD_VAR 0 9
42694: ARRAY
42695: PUSH
42696: LD_INT 2
42698: ARRAY
42699: PPUSH
42700: CALL_OW 351
42704: PUSH
42705: LD_VAR 0 14
42709: PUSH
42710: LD_VAR 0 9
42714: ARRAY
42715: PUSH
42716: LD_INT 1
42718: ARRAY
42719: PPUSH
42720: LD_VAR 0 14
42724: PUSH
42725: LD_VAR 0 9
42729: ARRAY
42730: PUSH
42731: LD_INT 2
42733: ARRAY
42734: PPUSH
42735: CALL_OW 488
42739: NOT
42740: OR
42741: PUSH
42742: LD_VAR 0 13
42746: PPUSH
42747: CALL_OW 247
42751: PUSH
42752: LD_INT 3
42754: EQUAL
42755: OR
42756: IFFALSE 42762
// exit ;
42758: POP
42759: POP
42760: GO 43306
// if not tmp then
42762: LD_VAR 0 13
42766: NOT
42767: IFFALSE 42771
// continue ;
42769: GO 42627
// result := true ;
42771: LD_ADDR_VAR 0 8
42775: PUSH
42776: LD_INT 1
42778: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42779: LD_VAR 0 6
42783: PUSH
42784: LD_VAR 0 13
42788: PPUSH
42789: CALL_OW 247
42793: PUSH
42794: LD_INT 2
42796: EQUAL
42797: AND
42798: PUSH
42799: LD_VAR 0 13
42803: PPUSH
42804: CALL_OW 263
42808: PUSH
42809: LD_INT 1
42811: EQUAL
42812: AND
42813: IFFALSE 42977
// begin if IsDrivenBy ( tmp ) then
42815: LD_VAR 0 13
42819: PPUSH
42820: CALL_OW 311
42824: IFFALSE 42828
// continue ;
42826: GO 42627
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42828: LD_VAR 0 6
42832: PPUSH
42833: LD_INT 3
42835: PUSH
42836: LD_INT 60
42838: PUSH
42839: EMPTY
42840: LIST
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 3
42848: PUSH
42849: LD_INT 55
42851: PUSH
42852: EMPTY
42853: LIST
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PPUSH
42863: CALL_OW 72
42867: IFFALSE 42975
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42869: LD_ADDR_VAR 0 18
42873: PUSH
42874: LD_VAR 0 6
42878: PPUSH
42879: LD_INT 3
42881: PUSH
42882: LD_INT 60
42884: PUSH
42885: EMPTY
42886: LIST
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 3
42894: PUSH
42895: LD_INT 55
42897: PUSH
42898: EMPTY
42899: LIST
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PPUSH
42909: CALL_OW 72
42913: PUSH
42914: LD_INT 1
42916: ARRAY
42917: ST_TO_ADDR
// if IsInUnit ( driver ) then
42918: LD_VAR 0 18
42922: PPUSH
42923: CALL_OW 310
42927: IFFALSE 42938
// ComExit ( driver ) ;
42929: LD_VAR 0 18
42933: PPUSH
42934: CALL 68319 0 1
// AddComEnterUnit ( driver , tmp ) ;
42938: LD_VAR 0 18
42942: PPUSH
42943: LD_VAR 0 13
42947: PPUSH
42948: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42952: LD_VAR 0 18
42956: PPUSH
42957: LD_VAR 0 7
42961: PPUSH
42962: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42966: LD_VAR 0 18
42970: PPUSH
42971: CALL_OW 181
// end ; continue ;
42975: GO 42627
// end ; if not cleaners or not tmp in cleaners then
42977: LD_VAR 0 6
42981: NOT
42982: PUSH
42983: LD_VAR 0 13
42987: PUSH
42988: LD_VAR 0 6
42992: IN
42993: NOT
42994: OR
42995: IFFALSE 43302
// begin if dep then
42997: LD_VAR 0 17
43001: IFFALSE 43137
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43003: LD_ADDR_VAR 0 16
43007: PUSH
43008: LD_VAR 0 17
43012: PUSH
43013: LD_INT 1
43015: ARRAY
43016: PPUSH
43017: CALL_OW 250
43021: PPUSH
43022: LD_VAR 0 17
43026: PUSH
43027: LD_INT 1
43029: ARRAY
43030: PPUSH
43031: CALL_OW 254
43035: PPUSH
43036: LD_INT 5
43038: PPUSH
43039: CALL_OW 272
43043: PUSH
43044: LD_VAR 0 17
43048: PUSH
43049: LD_INT 1
43051: ARRAY
43052: PPUSH
43053: CALL_OW 251
43057: PPUSH
43058: LD_VAR 0 17
43062: PUSH
43063: LD_INT 1
43065: ARRAY
43066: PPUSH
43067: CALL_OW 254
43071: PPUSH
43072: LD_INT 5
43074: PPUSH
43075: CALL_OW 273
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43084: LD_VAR 0 16
43088: PUSH
43089: LD_INT 1
43091: ARRAY
43092: PPUSH
43093: LD_VAR 0 16
43097: PUSH
43098: LD_INT 2
43100: ARRAY
43101: PPUSH
43102: CALL_OW 488
43106: IFFALSE 43137
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43108: LD_VAR 0 13
43112: PPUSH
43113: LD_VAR 0 16
43117: PUSH
43118: LD_INT 1
43120: ARRAY
43121: PPUSH
43122: LD_VAR 0 16
43126: PUSH
43127: LD_INT 2
43129: ARRAY
43130: PPUSH
43131: CALL_OW 111
// continue ;
43135: GO 42627
// end ; end ; r := GetDir ( tmp ) ;
43137: LD_ADDR_VAR 0 15
43141: PUSH
43142: LD_VAR 0 13
43146: PPUSH
43147: CALL_OW 254
43151: ST_TO_ADDR
// if r = 5 then
43152: LD_VAR 0 15
43156: PUSH
43157: LD_INT 5
43159: EQUAL
43160: IFFALSE 43170
// r := 0 ;
43162: LD_ADDR_VAR 0 15
43166: PUSH
43167: LD_INT 0
43169: ST_TO_ADDR
// for j = r to 5 do
43170: LD_ADDR_VAR 0 10
43174: PUSH
43175: DOUBLE
43176: LD_VAR 0 15
43180: DEC
43181: ST_TO_ADDR
43182: LD_INT 5
43184: PUSH
43185: FOR_TO
43186: IFFALSE 43300
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43188: LD_ADDR_VAR 0 11
43192: PUSH
43193: LD_VAR 0 13
43197: PPUSH
43198: CALL_OW 250
43202: PPUSH
43203: LD_VAR 0 10
43207: PPUSH
43208: LD_INT 2
43210: PPUSH
43211: CALL_OW 272
43215: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43216: LD_ADDR_VAR 0 12
43220: PUSH
43221: LD_VAR 0 13
43225: PPUSH
43226: CALL_OW 251
43230: PPUSH
43231: LD_VAR 0 10
43235: PPUSH
43236: LD_INT 2
43238: PPUSH
43239: CALL_OW 273
43243: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43244: LD_VAR 0 11
43248: PPUSH
43249: LD_VAR 0 12
43253: PPUSH
43254: CALL_OW 488
43258: PUSH
43259: LD_VAR 0 11
43263: PPUSH
43264: LD_VAR 0 12
43268: PPUSH
43269: CALL_OW 428
43273: NOT
43274: AND
43275: IFFALSE 43298
// begin ComMoveXY ( tmp , _x , _y ) ;
43277: LD_VAR 0 13
43281: PPUSH
43282: LD_VAR 0 11
43286: PPUSH
43287: LD_VAR 0 12
43291: PPUSH
43292: CALL_OW 111
// break ;
43296: GO 43300
// end ; end ;
43298: GO 43185
43300: POP
43301: POP
// end ; end ;
43302: GO 42627
43304: POP
43305: POP
// end ;
43306: LD_VAR 0 8
43310: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43311: LD_INT 0
43313: PPUSH
// result := true ;
43314: LD_ADDR_VAR 0 3
43318: PUSH
43319: LD_INT 1
43321: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43322: LD_VAR 0 2
43326: PUSH
43327: LD_INT 24
43329: DOUBLE
43330: EQUAL
43331: IFTRUE 43341
43333: LD_INT 33
43335: DOUBLE
43336: EQUAL
43337: IFTRUE 43341
43339: GO 43366
43341: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43342: LD_ADDR_VAR 0 3
43346: PUSH
43347: LD_INT 32
43349: PPUSH
43350: LD_VAR 0 1
43354: PPUSH
43355: CALL_OW 321
43359: PUSH
43360: LD_INT 2
43362: EQUAL
43363: ST_TO_ADDR
43364: GO 43682
43366: LD_INT 20
43368: DOUBLE
43369: EQUAL
43370: IFTRUE 43374
43372: GO 43399
43374: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43375: LD_ADDR_VAR 0 3
43379: PUSH
43380: LD_INT 6
43382: PPUSH
43383: LD_VAR 0 1
43387: PPUSH
43388: CALL_OW 321
43392: PUSH
43393: LD_INT 2
43395: EQUAL
43396: ST_TO_ADDR
43397: GO 43682
43399: LD_INT 22
43401: DOUBLE
43402: EQUAL
43403: IFTRUE 43413
43405: LD_INT 36
43407: DOUBLE
43408: EQUAL
43409: IFTRUE 43413
43411: GO 43438
43413: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43414: LD_ADDR_VAR 0 3
43418: PUSH
43419: LD_INT 15
43421: PPUSH
43422: LD_VAR 0 1
43426: PPUSH
43427: CALL_OW 321
43431: PUSH
43432: LD_INT 2
43434: EQUAL
43435: ST_TO_ADDR
43436: GO 43682
43438: LD_INT 30
43440: DOUBLE
43441: EQUAL
43442: IFTRUE 43446
43444: GO 43471
43446: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43447: LD_ADDR_VAR 0 3
43451: PUSH
43452: LD_INT 20
43454: PPUSH
43455: LD_VAR 0 1
43459: PPUSH
43460: CALL_OW 321
43464: PUSH
43465: LD_INT 2
43467: EQUAL
43468: ST_TO_ADDR
43469: GO 43682
43471: LD_INT 28
43473: DOUBLE
43474: EQUAL
43475: IFTRUE 43485
43477: LD_INT 21
43479: DOUBLE
43480: EQUAL
43481: IFTRUE 43485
43483: GO 43510
43485: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43486: LD_ADDR_VAR 0 3
43490: PUSH
43491: LD_INT 21
43493: PPUSH
43494: LD_VAR 0 1
43498: PPUSH
43499: CALL_OW 321
43503: PUSH
43504: LD_INT 2
43506: EQUAL
43507: ST_TO_ADDR
43508: GO 43682
43510: LD_INT 16
43512: DOUBLE
43513: EQUAL
43514: IFTRUE 43518
43516: GO 43543
43518: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43519: LD_ADDR_VAR 0 3
43523: PUSH
43524: LD_INT 84
43526: PPUSH
43527: LD_VAR 0 1
43531: PPUSH
43532: CALL_OW 321
43536: PUSH
43537: LD_INT 2
43539: EQUAL
43540: ST_TO_ADDR
43541: GO 43682
43543: LD_INT 19
43545: DOUBLE
43546: EQUAL
43547: IFTRUE 43557
43549: LD_INT 23
43551: DOUBLE
43552: EQUAL
43553: IFTRUE 43557
43555: GO 43582
43557: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43558: LD_ADDR_VAR 0 3
43562: PUSH
43563: LD_INT 83
43565: PPUSH
43566: LD_VAR 0 1
43570: PPUSH
43571: CALL_OW 321
43575: PUSH
43576: LD_INT 2
43578: EQUAL
43579: ST_TO_ADDR
43580: GO 43682
43582: LD_INT 17
43584: DOUBLE
43585: EQUAL
43586: IFTRUE 43590
43588: GO 43615
43590: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43591: LD_ADDR_VAR 0 3
43595: PUSH
43596: LD_INT 39
43598: PPUSH
43599: LD_VAR 0 1
43603: PPUSH
43604: CALL_OW 321
43608: PUSH
43609: LD_INT 2
43611: EQUAL
43612: ST_TO_ADDR
43613: GO 43682
43615: LD_INT 18
43617: DOUBLE
43618: EQUAL
43619: IFTRUE 43623
43621: GO 43648
43623: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43624: LD_ADDR_VAR 0 3
43628: PUSH
43629: LD_INT 40
43631: PPUSH
43632: LD_VAR 0 1
43636: PPUSH
43637: CALL_OW 321
43641: PUSH
43642: LD_INT 2
43644: EQUAL
43645: ST_TO_ADDR
43646: GO 43682
43648: LD_INT 27
43650: DOUBLE
43651: EQUAL
43652: IFTRUE 43656
43654: GO 43681
43656: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43657: LD_ADDR_VAR 0 3
43661: PUSH
43662: LD_INT 35
43664: PPUSH
43665: LD_VAR 0 1
43669: PPUSH
43670: CALL_OW 321
43674: PUSH
43675: LD_INT 2
43677: EQUAL
43678: ST_TO_ADDR
43679: GO 43682
43681: POP
// end ;
43682: LD_VAR 0 3
43686: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43687: LD_INT 0
43689: PPUSH
43690: PPUSH
43691: PPUSH
43692: PPUSH
43693: PPUSH
43694: PPUSH
43695: PPUSH
43696: PPUSH
43697: PPUSH
43698: PPUSH
43699: PPUSH
// result := false ;
43700: LD_ADDR_VAR 0 6
43704: PUSH
43705: LD_INT 0
43707: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43708: LD_VAR 0 1
43712: NOT
43713: PUSH
43714: LD_VAR 0 1
43718: PPUSH
43719: CALL_OW 266
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: IN
43734: NOT
43735: OR
43736: PUSH
43737: LD_VAR 0 2
43741: NOT
43742: OR
43743: PUSH
43744: LD_VAR 0 5
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: LD_INT 3
43760: PUSH
43761: LD_INT 4
43763: PUSH
43764: LD_INT 5
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: IN
43775: NOT
43776: OR
43777: PUSH
43778: LD_VAR 0 3
43782: PPUSH
43783: LD_VAR 0 4
43787: PPUSH
43788: CALL_OW 488
43792: NOT
43793: OR
43794: IFFALSE 43798
// exit ;
43796: GO 44534
// side := GetSide ( depot ) ;
43798: LD_ADDR_VAR 0 9
43802: PUSH
43803: LD_VAR 0 1
43807: PPUSH
43808: CALL_OW 255
43812: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43813: LD_VAR 0 9
43817: PPUSH
43818: LD_VAR 0 2
43822: PPUSH
43823: CALL 43311 0 2
43827: NOT
43828: IFFALSE 43832
// exit ;
43830: GO 44534
// pom := GetBase ( depot ) ;
43832: LD_ADDR_VAR 0 10
43836: PUSH
43837: LD_VAR 0 1
43841: PPUSH
43842: CALL_OW 274
43846: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43847: LD_ADDR_VAR 0 11
43851: PUSH
43852: LD_VAR 0 2
43856: PPUSH
43857: LD_VAR 0 1
43861: PPUSH
43862: CALL_OW 248
43866: PPUSH
43867: CALL_OW 450
43871: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43872: LD_VAR 0 10
43876: PPUSH
43877: LD_INT 1
43879: PPUSH
43880: CALL_OW 275
43884: PUSH
43885: LD_VAR 0 11
43889: PUSH
43890: LD_INT 1
43892: ARRAY
43893: GREATEREQUAL
43894: PUSH
43895: LD_VAR 0 10
43899: PPUSH
43900: LD_INT 2
43902: PPUSH
43903: CALL_OW 275
43907: PUSH
43908: LD_VAR 0 11
43912: PUSH
43913: LD_INT 2
43915: ARRAY
43916: GREATEREQUAL
43917: AND
43918: PUSH
43919: LD_VAR 0 10
43923: PPUSH
43924: LD_INT 3
43926: PPUSH
43927: CALL_OW 275
43931: PUSH
43932: LD_VAR 0 11
43936: PUSH
43937: LD_INT 3
43939: ARRAY
43940: GREATEREQUAL
43941: AND
43942: NOT
43943: IFFALSE 43947
// exit ;
43945: GO 44534
// if GetBType ( depot ) = b_depot then
43947: LD_VAR 0 1
43951: PPUSH
43952: CALL_OW 266
43956: PUSH
43957: LD_INT 0
43959: EQUAL
43960: IFFALSE 43972
// dist := 28 else
43962: LD_ADDR_VAR 0 14
43966: PUSH
43967: LD_INT 28
43969: ST_TO_ADDR
43970: GO 43980
// dist := 36 ;
43972: LD_ADDR_VAR 0 14
43976: PUSH
43977: LD_INT 36
43979: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43980: LD_VAR 0 1
43984: PPUSH
43985: LD_VAR 0 3
43989: PPUSH
43990: LD_VAR 0 4
43994: PPUSH
43995: CALL_OW 297
43999: PUSH
44000: LD_VAR 0 14
44004: GREATER
44005: IFFALSE 44009
// exit ;
44007: GO 44534
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44009: LD_ADDR_VAR 0 12
44013: PUSH
44014: LD_VAR 0 2
44018: PPUSH
44019: LD_VAR 0 3
44023: PPUSH
44024: LD_VAR 0 4
44028: PPUSH
44029: LD_VAR 0 5
44033: PPUSH
44034: LD_VAR 0 1
44038: PPUSH
44039: CALL_OW 248
44043: PPUSH
44044: LD_INT 0
44046: PPUSH
44047: CALL 44539 0 6
44051: ST_TO_ADDR
// if not hexes then
44052: LD_VAR 0 12
44056: NOT
44057: IFFALSE 44061
// exit ;
44059: GO 44534
// hex := GetHexInfo ( x , y ) ;
44061: LD_ADDR_VAR 0 15
44065: PUSH
44066: LD_VAR 0 3
44070: PPUSH
44071: LD_VAR 0 4
44075: PPUSH
44076: CALL_OW 546
44080: ST_TO_ADDR
// if hex [ 1 ] then
44081: LD_VAR 0 15
44085: PUSH
44086: LD_INT 1
44088: ARRAY
44089: IFFALSE 44093
// exit ;
44091: GO 44534
// height := hex [ 2 ] ;
44093: LD_ADDR_VAR 0 13
44097: PUSH
44098: LD_VAR 0 15
44102: PUSH
44103: LD_INT 2
44105: ARRAY
44106: ST_TO_ADDR
// for i = 1 to hexes do
44107: LD_ADDR_VAR 0 7
44111: PUSH
44112: DOUBLE
44113: LD_INT 1
44115: DEC
44116: ST_TO_ADDR
44117: LD_VAR 0 12
44121: PUSH
44122: FOR_TO
44123: IFFALSE 44453
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44125: LD_VAR 0 12
44129: PUSH
44130: LD_VAR 0 7
44134: ARRAY
44135: PUSH
44136: LD_INT 1
44138: ARRAY
44139: PPUSH
44140: LD_VAR 0 12
44144: PUSH
44145: LD_VAR 0 7
44149: ARRAY
44150: PUSH
44151: LD_INT 2
44153: ARRAY
44154: PPUSH
44155: CALL_OW 488
44159: NOT
44160: PUSH
44161: LD_VAR 0 12
44165: PUSH
44166: LD_VAR 0 7
44170: ARRAY
44171: PUSH
44172: LD_INT 1
44174: ARRAY
44175: PPUSH
44176: LD_VAR 0 12
44180: PUSH
44181: LD_VAR 0 7
44185: ARRAY
44186: PUSH
44187: LD_INT 2
44189: ARRAY
44190: PPUSH
44191: CALL_OW 428
44195: PUSH
44196: LD_INT 0
44198: GREATER
44199: OR
44200: PUSH
44201: LD_VAR 0 12
44205: PUSH
44206: LD_VAR 0 7
44210: ARRAY
44211: PUSH
44212: LD_INT 1
44214: ARRAY
44215: PPUSH
44216: LD_VAR 0 12
44220: PUSH
44221: LD_VAR 0 7
44225: ARRAY
44226: PUSH
44227: LD_INT 2
44229: ARRAY
44230: PPUSH
44231: CALL_OW 351
44235: OR
44236: IFFALSE 44242
// exit ;
44238: POP
44239: POP
44240: GO 44534
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44242: LD_ADDR_VAR 0 8
44246: PUSH
44247: LD_VAR 0 12
44251: PUSH
44252: LD_VAR 0 7
44256: ARRAY
44257: PUSH
44258: LD_INT 1
44260: ARRAY
44261: PPUSH
44262: LD_VAR 0 12
44266: PUSH
44267: LD_VAR 0 7
44271: ARRAY
44272: PUSH
44273: LD_INT 2
44275: ARRAY
44276: PPUSH
44277: CALL_OW 546
44281: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44282: LD_VAR 0 8
44286: PUSH
44287: LD_INT 1
44289: ARRAY
44290: PUSH
44291: LD_VAR 0 8
44295: PUSH
44296: LD_INT 2
44298: ARRAY
44299: PUSH
44300: LD_VAR 0 13
44304: PUSH
44305: LD_INT 2
44307: PLUS
44308: GREATER
44309: OR
44310: PUSH
44311: LD_VAR 0 8
44315: PUSH
44316: LD_INT 2
44318: ARRAY
44319: PUSH
44320: LD_VAR 0 13
44324: PUSH
44325: LD_INT 2
44327: MINUS
44328: LESS
44329: OR
44330: PUSH
44331: LD_VAR 0 8
44335: PUSH
44336: LD_INT 3
44338: ARRAY
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: LD_INT 8
44345: PUSH
44346: LD_INT 9
44348: PUSH
44349: LD_INT 10
44351: PUSH
44352: LD_INT 11
44354: PUSH
44355: LD_INT 12
44357: PUSH
44358: LD_INT 13
44360: PUSH
44361: LD_INT 16
44363: PUSH
44364: LD_INT 17
44366: PUSH
44367: LD_INT 18
44369: PUSH
44370: LD_INT 19
44372: PUSH
44373: LD_INT 20
44375: PUSH
44376: LD_INT 21
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: IN
44394: NOT
44395: OR
44396: PUSH
44397: LD_VAR 0 8
44401: PUSH
44402: LD_INT 5
44404: ARRAY
44405: NOT
44406: OR
44407: PUSH
44408: LD_VAR 0 8
44412: PUSH
44413: LD_INT 6
44415: ARRAY
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: LD_INT 7
44425: PUSH
44426: LD_INT 9
44428: PUSH
44429: LD_INT 10
44431: PUSH
44432: LD_INT 11
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: IN
44443: NOT
44444: OR
44445: IFFALSE 44451
// exit ;
44447: POP
44448: POP
44449: GO 44534
// end ;
44451: GO 44122
44453: POP
44454: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44455: LD_VAR 0 9
44459: PPUSH
44460: LD_VAR 0 3
44464: PPUSH
44465: LD_VAR 0 4
44469: PPUSH
44470: LD_INT 20
44472: PPUSH
44473: CALL 36486 0 4
44477: PUSH
44478: LD_INT 4
44480: ARRAY
44481: IFFALSE 44485
// exit ;
44483: GO 44534
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44485: LD_VAR 0 2
44489: PUSH
44490: LD_INT 29
44492: PUSH
44493: LD_INT 30
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: IN
44500: PUSH
44501: LD_VAR 0 3
44505: PPUSH
44506: LD_VAR 0 4
44510: PPUSH
44511: LD_VAR 0 9
44515: PPUSH
44516: CALL_OW 440
44520: NOT
44521: AND
44522: IFFALSE 44526
// exit ;
44524: GO 44534
// result := true ;
44526: LD_ADDR_VAR 0 6
44530: PUSH
44531: LD_INT 1
44533: ST_TO_ADDR
// end ;
44534: LD_VAR 0 6
44538: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44539: LD_INT 0
44541: PPUSH
44542: PPUSH
44543: PPUSH
44544: PPUSH
44545: PPUSH
44546: PPUSH
44547: PPUSH
44548: PPUSH
44549: PPUSH
44550: PPUSH
44551: PPUSH
44552: PPUSH
44553: PPUSH
44554: PPUSH
44555: PPUSH
44556: PPUSH
44557: PPUSH
44558: PPUSH
44559: PPUSH
44560: PPUSH
44561: PPUSH
44562: PPUSH
44563: PPUSH
44564: PPUSH
44565: PPUSH
44566: PPUSH
44567: PPUSH
44568: PPUSH
44569: PPUSH
44570: PPUSH
44571: PPUSH
44572: PPUSH
44573: PPUSH
44574: PPUSH
44575: PPUSH
44576: PPUSH
44577: PPUSH
44578: PPUSH
44579: PPUSH
44580: PPUSH
44581: PPUSH
44582: PPUSH
44583: PPUSH
44584: PPUSH
44585: PPUSH
44586: PPUSH
44587: PPUSH
44588: PPUSH
44589: PPUSH
44590: PPUSH
44591: PPUSH
44592: PPUSH
44593: PPUSH
44594: PPUSH
44595: PPUSH
44596: PPUSH
44597: PPUSH
44598: PPUSH
// result = [ ] ;
44599: LD_ADDR_VAR 0 7
44603: PUSH
44604: EMPTY
44605: ST_TO_ADDR
// temp_list = [ ] ;
44606: LD_ADDR_VAR 0 9
44610: PUSH
44611: EMPTY
44612: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44613: LD_VAR 0 4
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: LD_INT 2
44626: PUSH
44627: LD_INT 3
44629: PUSH
44630: LD_INT 4
44632: PUSH
44633: LD_INT 5
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: IN
44644: NOT
44645: PUSH
44646: LD_VAR 0 1
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: IN
44661: PUSH
44662: LD_VAR 0 5
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: LD_INT 2
44672: PUSH
44673: LD_INT 3
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: LIST
44680: IN
44681: NOT
44682: AND
44683: OR
44684: IFFALSE 44688
// exit ;
44686: GO 63079
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44688: LD_VAR 0 1
44692: PUSH
44693: LD_INT 6
44695: PUSH
44696: LD_INT 7
44698: PUSH
44699: LD_INT 8
44701: PUSH
44702: LD_INT 13
44704: PUSH
44705: LD_INT 12
44707: PUSH
44708: LD_INT 15
44710: PUSH
44711: LD_INT 11
44713: PUSH
44714: LD_INT 14
44716: PUSH
44717: LD_INT 10
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: IN
44731: IFFALSE 44741
// btype = b_lab ;
44733: LD_ADDR_VAR 0 1
44737: PUSH
44738: LD_INT 6
44740: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44741: LD_VAR 0 6
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: LIST
44759: IN
44760: NOT
44761: PUSH
44762: LD_VAR 0 1
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: LD_INT 3
44778: PUSH
44779: LD_INT 6
44781: PUSH
44782: LD_INT 36
44784: PUSH
44785: LD_INT 4
44787: PUSH
44788: LD_INT 5
44790: PUSH
44791: LD_INT 31
44793: PUSH
44794: LD_INT 32
44796: PUSH
44797: LD_INT 33
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: IN
44813: NOT
44814: PUSH
44815: LD_VAR 0 6
44819: PUSH
44820: LD_INT 1
44822: EQUAL
44823: AND
44824: OR
44825: PUSH
44826: LD_VAR 0 1
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: LD_INT 3
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: IN
44841: NOT
44842: PUSH
44843: LD_VAR 0 6
44847: PUSH
44848: LD_INT 2
44850: EQUAL
44851: AND
44852: OR
44853: IFFALSE 44863
// mode = 0 ;
44855: LD_ADDR_VAR 0 6
44859: PUSH
44860: LD_INT 0
44862: ST_TO_ADDR
// case mode of 0 :
44863: LD_VAR 0 6
44867: PUSH
44868: LD_INT 0
44870: DOUBLE
44871: EQUAL
44872: IFTRUE 44876
44874: GO 56329
44876: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44877: LD_ADDR_VAR 0 11
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: LD_INT 2
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: LD_INT 2
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: LD_INT 3
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 3
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: LD_INT 2
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45070: LD_ADDR_VAR 0 12
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: NEG
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 3
45227: NEG
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 3
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45266: LD_ADDR_VAR 0 13
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: LD_INT 2
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 2
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: LD_INT 2
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: LD_INT 2
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 2
45389: NEG
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: LD_INT 3
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 3
45425: NEG
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 3
45437: NEG
45438: PUSH
45439: LD_INT 3
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45465: LD_ADDR_VAR 0 14
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: LD_INT 2
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: LD_INT 2
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: LD_INT 3
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: LD_INT 3
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45661: LD_ADDR_VAR 0 15
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 2
45784: NEG
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 2
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 3
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 3
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45854: LD_ADDR_VAR 0 16
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 2
45977: NEG
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 3
46001: PUSH
46002: LD_INT 2
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 3
46011: PUSH
46012: LD_INT 3
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: LD_INT 3
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46047: LD_ADDR_VAR 0 17
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: LD_INT 2
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 2
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 2
46182: PUSH
46183: LD_INT 2
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: LD_INT 2
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 2
46246: NEG
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46277: LD_ADDR_VAR 0 18
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: LD_INT 2
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 2
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 2
46453: NEG
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: NEG
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 2
46476: NEG
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46507: LD_ADDR_VAR 0 19
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: LD_INT 1
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: NEG
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 2
46706: NEG
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46737: LD_ADDR_VAR 0 20
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: LD_INT 1
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: NEG
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 2
46936: NEG
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46967: LD_ADDR_VAR 0 21
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 2
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 2
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47197: LD_ADDR_VAR 0 22
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: LD_INT 2
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 2
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 2
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 2
47373: NEG
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 2
47384: NEG
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: LD_INT 2
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47427: LD_ADDR_VAR 0 23
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: LD_INT 2
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: LD_INT 3
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: LD_INT 3
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47707: LD_ADDR_VAR 0 24
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 2
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: LD_INT 2
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 2
47883: NEG
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 3
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 3
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47983: LD_ADDR_VAR 0 25
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: LD_INT 2
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 2
48170: NEG
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 2
48182: NEG
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 3
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 3
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: LD_INT 3
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: LD_INT 3
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48257: LD_ADDR_VAR 0 26
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: LD_INT 2
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 3
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 3
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48533: LD_ADDR_VAR 0 27
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: NEG
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 2
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 2
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 2
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 2
48709: NEG
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: LD_INT 1
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 3
48766: NEG
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 3
48778: NEG
48779: PUSH
48780: LD_INT 2
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48813: LD_ADDR_VAR 0 28
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 2
49024: NEG
49025: PUSH
49026: LD_INT 3
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 3
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 3
49048: NEG
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 3
49060: NEG
49061: PUSH
49062: LD_INT 2
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49095: LD_ADDR_VAR 0 29
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: LD_INT 2
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 2
49273: NEG
49274: PUSH
49275: LD_INT 2
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: LD_INT 3
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 3
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 3
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 3
49339: NEG
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49374: LD_ADDR_VAR 0 30
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: LD_INT 2
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 2
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: LD_INT 2
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: LD_INT 2
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: NEG
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: LD_INT 3
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 3
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: LD_INT 3
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 3
49617: NEG
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49652: LD_ADDR_VAR 0 31
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: LD_INT 2
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 2
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: NEG
49830: PUSH
49831: LD_INT 2
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: LD_INT 3
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 3
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: LD_INT 3
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 3
49895: NEG
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49930: LD_ADDR_VAR 0 32
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: LD_INT 2
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 2
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 2
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 3
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 3
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: LD_INT 3
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 3
50173: NEG
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50208: LD_ADDR_VAR 0 33
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: LD_INT 2
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: LD_INT 3
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 3
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 3
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: LD_INT 2
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 3
50452: NEG
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50487: LD_ADDR_VAR 0 34
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 2
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 2
50643: NEG
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: LD_INT 3
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 2
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 3
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: LD_INT 3
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 3
50732: NEG
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50767: LD_ADDR_VAR 0 35
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 2
50858: NEG
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50879: LD_ADDR_VAR 0 36
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: LD_INT 2
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50991: LD_ADDR_VAR 0 37
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51103: LD_ADDR_VAR 0 38
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 2
51194: NEG
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51215: LD_ADDR_VAR 0 39
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 2
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: LD_INT 2
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51327: LD_ADDR_VAR 0 40
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51439: LD_ADDR_VAR 0 41
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 2
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 2
51629: NEG
51630: PUSH
51631: LD_INT 3
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 3
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 3
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 3
51682: PUSH
51683: LD_INT 3
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 3
51713: NEG
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 3
51724: NEG
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 3
51736: NEG
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 3
51748: NEG
51749: PUSH
51750: LD_INT 3
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51789: LD_ADDR_VAR 0 42
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: LD_INT 3
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 3
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 3
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 3
52025: PUSH
52026: LD_INT 2
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: PUSH
52036: LD_INT 3
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: LD_INT 3
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: LD_INT 3
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 3
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 3
52086: NEG
52087: PUSH
52088: LD_INT 2
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 3
52098: NEG
52099: PUSH
52100: LD_INT 3
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52139: LD_ADDR_VAR 0 43
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: LD_INT 2
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: LD_INT 2
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 3
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 3
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 3
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 3
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 3
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 3
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 3
52435: NEG
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 3
52446: NEG
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52487: LD_ADDR_VAR 0 44
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: LD_INT 2
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 2
52677: NEG
52678: PUSH
52679: LD_INT 3
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 2
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 3
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 3
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: LD_INT 3
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: LD_INT 3
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: NEG
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 3
52761: NEG
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 3
52772: NEG
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 3
52784: NEG
52785: PUSH
52786: LD_INT 2
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 3
52796: NEG
52797: PUSH
52798: LD_INT 3
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52837: LD_ADDR_VAR 0 45
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 0
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 2
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: LD_INT 2
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 2
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: LD_INT 2
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: LD_INT 2
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: LD_INT 3
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: LD_INT 3
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 3
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 3
53073: PUSH
53074: LD_INT 2
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 3
53083: PUSH
53084: LD_INT 3
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: LD_INT 3
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 3
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 3
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 3
53134: NEG
53135: PUSH
53136: LD_INT 2
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 3
53146: NEG
53147: PUSH
53148: LD_INT 3
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53187: LD_ADDR_VAR 0 46
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: LD_INT 2
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: LD_INT 2
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 2
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: LD_INT 2
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: LD_INT 3
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: LD_INT 3
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: LD_INT 2
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 3
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 3
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 3
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 3
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 3
53483: NEG
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53535: LD_ADDR_VAR 0 47
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: LD_INT 2
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53686: LD_ADDR_VAR 0 48
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: LD_INT 2
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53833: LD_ADDR_VAR 0 49
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 2
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: LD_INT 2
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53977: LD_ADDR_VAR 0 50
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 0
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 2
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 2
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: LD_INT 2
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54121: LD_ADDR_VAR 0 51
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: LD_INT 2
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54268: LD_ADDR_VAR 0 52
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: LD_INT 1
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54419: LD_ADDR_VAR 0 53
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 2
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: LD_INT 2
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 2
54618: NEG
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54649: LD_ADDR_VAR 0 54
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: LD_INT 2
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 2
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 2
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: LD_INT 2
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 2
54836: NEG
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54879: LD_ADDR_VAR 0 55
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: LD_INT 2
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55109: LD_ADDR_VAR 0 56
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 2
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 2
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 2
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55339: LD_ADDR_VAR 0 57
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 2
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 2
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 2
55526: NEG
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 2
55538: NEG
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55569: LD_ADDR_VAR 0 58
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: LD_INT 1
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 2
55756: NEG
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55799: LD_ADDR_VAR 0 59
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55887: LD_ADDR_VAR 0 60
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: NEG
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55975: LD_ADDR_VAR 0 61
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56063: LD_ADDR_VAR 0 62
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 1
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56151: LD_ADDR_VAR 0 63
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56239: LD_ADDR_VAR 0 64
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: ST_TO_ADDR
// end ; 1 :
56327: GO 62224
56329: LD_INT 1
56331: DOUBLE
56332: EQUAL
56333: IFTRUE 56337
56335: GO 58960
56337: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56338: LD_ADDR_VAR 0 11
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: LD_INT 3
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 3
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: LIST
56381: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56382: LD_ADDR_VAR 0 12
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 3
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 3
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: LIST
56422: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56423: LD_ADDR_VAR 0 13
56427: PUSH
56428: LD_INT 3
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 3
56440: PUSH
56441: LD_INT 3
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: LD_INT 3
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: LIST
56462: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56463: LD_ADDR_VAR 0 14
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: LD_INT 3
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: LD_INT 3
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 2
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: LIST
56503: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56504: LD_ADDR_VAR 0 15
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 3
56533: NEG
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: LIST
56547: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56548: LD_ADDR_VAR 0 16
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: LD_INT 3
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 3
56567: NEG
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 3
56579: NEG
56580: PUSH
56581: LD_INT 3
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: LIST
56593: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56594: LD_ADDR_VAR 0 17
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: LD_INT 3
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 3
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: LIST
56637: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56638: LD_ADDR_VAR 0 18
56642: PUSH
56643: LD_INT 2
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 3
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 3
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: LIST
56678: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56679: LD_ADDR_VAR 0 19
56683: PUSH
56684: LD_INT 3
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 3
56696: PUSH
56697: LD_INT 3
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: LD_INT 3
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: LIST
56718: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56719: LD_ADDR_VAR 0 20
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: LD_INT 3
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: LD_INT 3
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: LIST
56759: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56760: LD_ADDR_VAR 0 21
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 3
56778: NEG
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 3
56789: NEG
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: LIST
56803: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56804: LD_ADDR_VAR 0 22
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: LD_INT 3
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: NEG
56824: PUSH
56825: LD_INT 2
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 3
56835: NEG
56836: PUSH
56837: LD_INT 3
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: LIST
56849: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56850: LD_ADDR_VAR 0 23
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: LD_INT 3
56860: NEG
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: LD_INT 4
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: LD_INT 3
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: LIST
56893: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56894: LD_ADDR_VAR 0 24
56898: PUSH
56899: LD_INT 3
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 3
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 4
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56935: LD_ADDR_VAR 0 25
56939: PUSH
56940: LD_INT 3
56942: PUSH
56943: LD_INT 3
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 4
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 3
56962: PUSH
56963: LD_INT 4
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: LIST
56974: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56975: LD_ADDR_VAR 0 26
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: LD_INT 3
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: PUSH
56993: LD_INT 4
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 3
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: LIST
57015: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57016: LD_ADDR_VAR 0 27
57020: PUSH
57021: LD_INT 3
57023: NEG
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 3
57034: NEG
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 4
57045: NEG
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: LIST
57059: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57060: LD_ADDR_VAR 0 28
57064: PUSH
57065: LD_INT 3
57067: NEG
57068: PUSH
57069: LD_INT 3
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 3
57079: NEG
57080: PUSH
57081: LD_INT 4
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 4
57091: NEG
57092: PUSH
57093: LD_INT 3
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: LIST
57105: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57106: LD_ADDR_VAR 0 29
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: LD_INT 3
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: LD_INT 3
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: LD_INT 4
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: LD_INT 4
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: LD_INT 3
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: LD_INT 5
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: LD_INT 5
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: PUSH
57205: LD_INT 4
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: LD_INT 6
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: LD_INT 6
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: LD_INT 5
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57261: LD_ADDR_VAR 0 30
57265: PUSH
57266: LD_INT 2
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 3
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 3
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 3
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 4
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 4
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 4
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 5
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 5
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 5
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 6
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 6
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57404: LD_ADDR_VAR 0 31
57408: PUSH
57409: LD_INT 3
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 3
57421: PUSH
57422: LD_INT 3
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 3
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 4
57441: PUSH
57442: LD_INT 3
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 4
57451: PUSH
57452: LD_INT 4
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 3
57461: PUSH
57462: LD_INT 4
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 5
57471: PUSH
57472: LD_INT 4
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 5
57481: PUSH
57482: LD_INT 5
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 4
57491: PUSH
57492: LD_INT 5
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 6
57501: PUSH
57502: LD_INT 5
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 6
57511: PUSH
57512: LD_INT 6
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 5
57521: PUSH
57522: LD_INT 6
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57543: LD_ADDR_VAR 0 32
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: LD_INT 3
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: LD_INT 3
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: LD_INT 2
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: LD_INT 4
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 4
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: LD_INT 3
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: LD_INT 5
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: LD_INT 5
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: LD_INT 4
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: LD_INT 6
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: LD_INT 6
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: LD_INT 5
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57686: LD_ADDR_VAR 0 33
57690: PUSH
57691: LD_INT 2
57693: NEG
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 3
57715: NEG
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 3
57727: NEG
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 4
57738: NEG
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 4
57749: NEG
57750: PUSH
57751: LD_INT 1
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 4
57761: NEG
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 5
57772: NEG
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 5
57783: NEG
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 5
57795: NEG
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 6
57806: NEG
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 6
57817: NEG
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57841: LD_ADDR_VAR 0 34
57845: PUSH
57846: LD_INT 2
57848: NEG
57849: PUSH
57850: LD_INT 3
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 3
57860: NEG
57861: PUSH
57862: LD_INT 2
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 3
57872: NEG
57873: PUSH
57874: LD_INT 3
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 3
57884: NEG
57885: PUSH
57886: LD_INT 4
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 4
57896: NEG
57897: PUSH
57898: LD_INT 3
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 4
57908: NEG
57909: PUSH
57910: LD_INT 4
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 4
57920: NEG
57921: PUSH
57922: LD_INT 5
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 5
57932: NEG
57933: PUSH
57934: LD_INT 4
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 5
57944: NEG
57945: PUSH
57946: LD_INT 5
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 5
57956: NEG
57957: PUSH
57958: LD_INT 6
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 6
57968: NEG
57969: PUSH
57970: LD_INT 5
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 6
57980: NEG
57981: PUSH
57982: LD_INT 6
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58004: LD_ADDR_VAR 0 41
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: LD_INT 3
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: LD_INT 2
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: LIST
58047: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58048: LD_ADDR_VAR 0 42
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 3
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: LIST
58088: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58089: LD_ADDR_VAR 0 43
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 3
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: LIST
58128: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58129: LD_ADDR_VAR 0 44
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: LD_INT 2
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: LD_INT 3
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: LIST
58169: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58170: LD_ADDR_VAR 0 45
58174: PUSH
58175: LD_INT 2
58177: NEG
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 2
58188: NEG
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 3
58199: NEG
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: LIST
58213: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58214: LD_ADDR_VAR 0 46
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: LD_INT 2
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: LD_INT 3
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 3
58245: NEG
58246: PUSH
58247: LD_INT 2
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: LIST
58259: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58260: LD_ADDR_VAR 0 47
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: LD_INT 3
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: LD_INT 3
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58293: LD_ADDR_VAR 0 48
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 2
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58324: LD_ADDR_VAR 0 49
58328: PUSH
58329: LD_INT 3
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 3
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58353: LD_ADDR_VAR 0 50
58357: PUSH
58358: LD_INT 2
58360: PUSH
58361: LD_INT 3
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58382: LD_ADDR_VAR 0 51
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 2
58400: NEG
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58413: LD_ADDR_VAR 0 52
58417: PUSH
58418: LD_INT 3
58420: NEG
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 3
58432: NEG
58433: PUSH
58434: LD_INT 2
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58446: LD_ADDR_VAR 0 53
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: LD_INT 3
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: LD_INT 3
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: LD_INT 2
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: LIST
58489: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58490: LD_ADDR_VAR 0 54
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 3
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 3
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: LIST
58530: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58531: LD_ADDR_VAR 0 55
58535: PUSH
58536: LD_INT 3
58538: PUSH
58539: LD_INT 2
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 3
58548: PUSH
58549: LD_INT 3
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 2
58558: PUSH
58559: LD_INT 3
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: LIST
58570: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58571: LD_ADDR_VAR 0 56
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: LD_INT 3
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: LD_INT 3
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: LD_INT 2
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: LIST
58611: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58612: LD_ADDR_VAR 0 57
58616: PUSH
58617: LD_INT 2
58619: NEG
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 3
58630: NEG
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 3
58641: NEG
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: LIST
58655: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58656: LD_ADDR_VAR 0 58
58660: PUSH
58661: LD_INT 2
58663: NEG
58664: PUSH
58665: LD_INT 3
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 3
58675: NEG
58676: PUSH
58677: LD_INT 2
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 3
58687: NEG
58688: PUSH
58689: LD_INT 3
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: LIST
58701: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58702: LD_ADDR_VAR 0 59
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: LD_INT 2
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: LD_INT 2
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: LIST
58745: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58746: LD_ADDR_VAR 0 60
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: LIST
58786: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58787: LD_ADDR_VAR 0 61
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: LD_INT 2
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: LIST
58826: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58827: LD_ADDR_VAR 0 62
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: LD_INT 2
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: LIST
58867: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58868: LD_ADDR_VAR 0 63
58872: PUSH
58873: LD_INT 1
58875: NEG
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: LIST
58911: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58912: LD_ADDR_VAR 0 64
58916: PUSH
58917: LD_INT 1
58919: NEG
58920: PUSH
58921: LD_INT 2
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 2
58943: NEG
58944: PUSH
58945: LD_INT 2
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: LIST
58957: ST_TO_ADDR
// end ; 2 :
58958: GO 62224
58960: LD_INT 2
58962: DOUBLE
58963: EQUAL
58964: IFTRUE 58968
58966: GO 62223
58968: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58969: LD_ADDR_VAR 0 29
58973: PUSH
58974: LD_INT 4
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 4
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 5
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 5
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 4
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 3
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 3
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 3
59048: PUSH
59049: LD_INT 2
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 5
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 3
59069: PUSH
59070: LD_INT 3
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 3
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 4
59089: PUSH
59090: LD_INT 3
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 4
59099: PUSH
59100: LD_INT 4
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 3
59109: PUSH
59110: LD_INT 4
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: LD_INT 3
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 4
59139: PUSH
59140: LD_INT 2
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: LD_INT 4
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: LD_INT 4
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: LD_INT 3
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: PUSH
59180: LD_INT 4
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: LD_INT 5
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: LD_INT 5
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: LD_INT 4
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: PUSH
59232: LD_INT 5
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: NEG
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 3
59252: NEG
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: NEG
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 2
59286: NEG
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 3
59297: NEG
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 4
59308: NEG
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 4
59319: NEG
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 4
59331: NEG
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: LD_INT 2
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 4
59354: NEG
59355: PUSH
59356: LD_INT 4
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 4
59366: NEG
59367: PUSH
59368: LD_INT 5
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 3
59378: NEG
59379: PUSH
59380: LD_INT 4
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 3
59390: NEG
59391: PUSH
59392: LD_INT 3
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 4
59402: NEG
59403: PUSH
59404: LD_INT 3
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 5
59414: NEG
59415: PUSH
59416: LD_INT 4
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 5
59426: NEG
59427: PUSH
59428: LD_INT 5
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 3
59438: NEG
59439: PUSH
59440: LD_INT 5
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 5
59450: NEG
59451: PUSH
59452: LD_INT 3
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59507: LD_ADDR_VAR 0 30
59511: PUSH
59512: LD_INT 4
59514: PUSH
59515: LD_INT 4
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 4
59524: PUSH
59525: LD_INT 3
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 5
59534: PUSH
59535: LD_INT 4
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 5
59544: PUSH
59545: LD_INT 5
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 4
59554: PUSH
59555: LD_INT 5
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 3
59564: PUSH
59565: LD_INT 4
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 3
59574: PUSH
59575: LD_INT 3
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 5
59584: PUSH
59585: LD_INT 3
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 3
59594: PUSH
59595: LD_INT 5
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: LD_INT 3
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: LD_INT 2
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: LD_INT 3
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: LD_INT 4
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: LD_INT 4
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: LD_INT 3
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: LD_INT 4
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 4
59697: NEG
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 4
59708: NEG
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 3
59720: NEG
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 3
59731: NEG
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 4
59742: NEG
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 5
59753: NEG
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 5
59764: NEG
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 5
59776: NEG
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 3
59788: NEG
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 3
59799: NEG
59800: PUSH
59801: LD_INT 3
59803: NEG
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 3
59811: NEG
59812: PUSH
59813: LD_INT 4
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 2
59823: NEG
59824: PUSH
59825: LD_INT 3
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 2
59835: NEG
59836: PUSH
59837: LD_INT 2
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 3
59847: NEG
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 4
59859: NEG
59860: PUSH
59861: LD_INT 3
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 4
59871: NEG
59872: PUSH
59873: LD_INT 4
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 2
59883: NEG
59884: PUSH
59885: LD_INT 4
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 4
59895: NEG
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: LD_INT 4
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: LD_INT 5
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: LD_INT 4
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: LD_INT 3
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: LD_INT 3
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: LD_INT 4
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: LD_INT 5
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 2
59986: PUSH
59987: LD_INT 3
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 2
59997: NEG
59998: PUSH
59999: LD_INT 5
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60054: LD_ADDR_VAR 0 31
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: LD_INT 4
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: LD_INT 3
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: LD_INT 4
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: LD_INT 5
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: LD_INT 5
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: LD_INT 4
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: LD_INT 3
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: LD_INT 5
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 2
60143: NEG
60144: PUSH
60145: LD_INT 3
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 3
60154: NEG
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 3
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 2
60177: NEG
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 3
60199: NEG
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 4
60210: NEG
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 4
60221: NEG
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 4
60233: NEG
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 2
60245: NEG
60246: PUSH
60247: LD_INT 2
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 4
60256: NEG
60257: PUSH
60258: LD_INT 4
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 4
60268: NEG
60269: PUSH
60270: LD_INT 5
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 3
60280: NEG
60281: PUSH
60282: LD_INT 4
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 3
60292: NEG
60293: PUSH
60294: LD_INT 3
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 4
60304: NEG
60305: PUSH
60306: LD_INT 3
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 5
60316: NEG
60317: PUSH
60318: LD_INT 4
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 5
60328: NEG
60329: PUSH
60330: LD_INT 5
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 3
60340: NEG
60341: PUSH
60342: LD_INT 5
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 5
60352: NEG
60353: PUSH
60354: LD_INT 3
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: LD_INT 3
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 4
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: LD_INT 3
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 2
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: LD_INT 3
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: LD_INT 4
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: LD_INT 2
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: LD_INT 4
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 4
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 4
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 5
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 5
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 4
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 3
60538: PUSH
60539: LD_INT 2
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 5
60549: PUSH
60550: LD_INT 2
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60604: LD_ADDR_VAR 0 32
60608: PUSH
60609: LD_INT 4
60611: NEG
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 4
60622: NEG
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 3
60634: NEG
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 3
60645: NEG
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 4
60656: NEG
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 5
60667: NEG
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 5
60678: NEG
60679: PUSH
60680: LD_INT 1
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 5
60690: NEG
60691: PUSH
60692: LD_INT 2
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 3
60702: NEG
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 3
60713: NEG
60714: PUSH
60715: LD_INT 3
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 3
60725: NEG
60726: PUSH
60727: LD_INT 4
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 2
60737: NEG
60738: PUSH
60739: LD_INT 3
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 3
60761: NEG
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 4
60773: NEG
60774: PUSH
60775: LD_INT 3
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 4
60785: NEG
60786: PUSH
60787: LD_INT 4
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: LD_INT 4
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 4
60809: NEG
60810: PUSH
60811: LD_INT 2
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: LD_INT 4
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: LD_INT 5
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: LD_INT 4
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: LD_INT 3
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 0
60865: PUSH
60866: LD_INT 3
60868: NEG
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: LD_INT 4
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: LD_INT 5
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 2
60911: NEG
60912: PUSH
60913: LD_INT 5
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 3
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 3
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 4
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 4
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 3
60964: PUSH
60965: LD_INT 1
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 2
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 2
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 2
60995: PUSH
60996: LD_INT 2
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 4
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 4
61016: PUSH
61017: LD_INT 4
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 4
61026: PUSH
61027: LD_INT 3
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 5
61036: PUSH
61037: LD_INT 4
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 5
61046: PUSH
61047: LD_INT 5
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 4
61056: PUSH
61057: LD_INT 5
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 3
61066: PUSH
61067: LD_INT 4
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 3
61076: PUSH
61077: LD_INT 3
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 5
61086: PUSH
61087: LD_INT 3
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 3
61096: PUSH
61097: LD_INT 5
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61151: LD_ADDR_VAR 0 33
61155: PUSH
61156: LD_INT 4
61158: NEG
61159: PUSH
61160: LD_INT 4
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 4
61170: NEG
61171: PUSH
61172: LD_INT 5
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 3
61182: NEG
61183: PUSH
61184: LD_INT 4
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 3
61194: NEG
61195: PUSH
61196: LD_INT 3
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 4
61206: NEG
61207: PUSH
61208: LD_INT 3
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 5
61218: NEG
61219: PUSH
61220: LD_INT 4
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 5
61230: NEG
61231: PUSH
61232: LD_INT 5
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 3
61242: NEG
61243: PUSH
61244: LD_INT 5
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 5
61254: NEG
61255: PUSH
61256: LD_INT 3
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: LD_INT 3
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: LD_INT 4
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: LD_INT 3
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: PUSH
61300: LD_INT 2
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: LD_INT 2
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: NEG
61334: PUSH
61335: LD_INT 4
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 2
61345: PUSH
61346: LD_INT 2
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: NEG
61357: PUSH
61358: LD_INT 4
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 4
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 4
61378: PUSH
61379: LD_INT 1
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 5
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 5
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 4
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 3
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 3
61429: PUSH
61430: LD_INT 1
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 3
61440: PUSH
61441: LD_INT 2
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 5
61451: PUSH
61452: LD_INT 2
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 3
61461: PUSH
61462: LD_INT 3
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 3
61471: PUSH
61472: LD_INT 2
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 4
61481: PUSH
61482: LD_INT 3
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 4
61491: PUSH
61492: LD_INT 4
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 3
61501: PUSH
61502: LD_INT 4
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 2
61511: PUSH
61512: LD_INT 3
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 2
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 4
61531: PUSH
61532: LD_INT 2
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 2
61541: PUSH
61542: LD_INT 4
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 0
61551: PUSH
61552: LD_INT 4
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: LD_INT 3
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: PUSH
61572: LD_INT 4
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 1
61581: PUSH
61582: LD_INT 5
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: LD_INT 5
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 1
61601: NEG
61602: PUSH
61603: LD_INT 4
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: LD_INT 3
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 2
61623: PUSH
61624: LD_INT 5
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 2
61633: NEG
61634: PUSH
61635: LD_INT 3
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61689: LD_ADDR_VAR 0 34
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: LD_INT 4
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: LD_INT 5
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: LD_INT 4
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: LD_INT 3
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: LD_INT 3
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: NEG
61752: PUSH
61753: LD_INT 4
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: LD_INT 5
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 2
61775: PUSH
61776: LD_INT 3
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 2
61786: NEG
61787: PUSH
61788: LD_INT 5
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 3
61798: PUSH
61799: LD_INT 0
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 3
61808: PUSH
61809: LD_INT 1
61811: NEG
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 4
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 4
61829: PUSH
61830: LD_INT 1
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 3
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 2
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 2
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 2
61870: PUSH
61871: LD_INT 2
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 4
61881: PUSH
61882: LD_INT 2
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 4
61891: PUSH
61892: LD_INT 4
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 4
61901: PUSH
61902: LD_INT 3
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 5
61911: PUSH
61912: LD_INT 4
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 5
61921: PUSH
61922: LD_INT 5
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 4
61931: PUSH
61932: LD_INT 5
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 3
61941: PUSH
61942: LD_INT 4
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 3
61951: PUSH
61952: LD_INT 3
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 5
61961: PUSH
61962: LD_INT 3
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 3
61971: PUSH
61972: LD_INT 5
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 3
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: LD_INT 2
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: PUSH
62002: LD_INT 3
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: LD_INT 4
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: LD_INT 4
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 1
62031: NEG
62032: PUSH
62033: LD_INT 3
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 1
62042: NEG
62043: PUSH
62044: LD_INT 2
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 2
62053: PUSH
62054: LD_INT 4
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 2
62063: NEG
62064: PUSH
62065: LD_INT 2
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 4
62074: NEG
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 4
62085: NEG
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 3
62097: NEG
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 3
62108: NEG
62109: PUSH
62110: LD_INT 1
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 4
62119: NEG
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 5
62130: NEG
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 5
62141: NEG
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 5
62153: NEG
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 3
62165: NEG
62166: PUSH
62167: LD_INT 2
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: ST_TO_ADDR
// end ; end ;
62221: GO 62224
62223: POP
// case btype of b_depot , b_warehouse :
62224: LD_VAR 0 1
62228: PUSH
62229: LD_INT 0
62231: DOUBLE
62232: EQUAL
62233: IFTRUE 62243
62235: LD_INT 1
62237: DOUBLE
62238: EQUAL
62239: IFTRUE 62243
62241: GO 62444
62243: POP
// case nation of nation_american :
62244: LD_VAR 0 5
62248: PUSH
62249: LD_INT 1
62251: DOUBLE
62252: EQUAL
62253: IFTRUE 62257
62255: GO 62313
62257: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62258: LD_ADDR_VAR 0 9
62262: PUSH
62263: LD_VAR 0 11
62267: PUSH
62268: LD_VAR 0 12
62272: PUSH
62273: LD_VAR 0 13
62277: PUSH
62278: LD_VAR 0 14
62282: PUSH
62283: LD_VAR 0 15
62287: PUSH
62288: LD_VAR 0 16
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: PUSH
62301: LD_VAR 0 4
62305: PUSH
62306: LD_INT 1
62308: PLUS
62309: ARRAY
62310: ST_TO_ADDR
62311: GO 62442
62313: LD_INT 2
62315: DOUBLE
62316: EQUAL
62317: IFTRUE 62321
62319: GO 62377
62321: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62322: LD_ADDR_VAR 0 9
62326: PUSH
62327: LD_VAR 0 17
62331: PUSH
62332: LD_VAR 0 18
62336: PUSH
62337: LD_VAR 0 19
62341: PUSH
62342: LD_VAR 0 20
62346: PUSH
62347: LD_VAR 0 21
62351: PUSH
62352: LD_VAR 0 22
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: PUSH
62365: LD_VAR 0 4
62369: PUSH
62370: LD_INT 1
62372: PLUS
62373: ARRAY
62374: ST_TO_ADDR
62375: GO 62442
62377: LD_INT 3
62379: DOUBLE
62380: EQUAL
62381: IFTRUE 62385
62383: GO 62441
62385: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62386: LD_ADDR_VAR 0 9
62390: PUSH
62391: LD_VAR 0 23
62395: PUSH
62396: LD_VAR 0 24
62400: PUSH
62401: LD_VAR 0 25
62405: PUSH
62406: LD_VAR 0 26
62410: PUSH
62411: LD_VAR 0 27
62415: PUSH
62416: LD_VAR 0 28
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: PUSH
62429: LD_VAR 0 4
62433: PUSH
62434: LD_INT 1
62436: PLUS
62437: ARRAY
62438: ST_TO_ADDR
62439: GO 62442
62441: POP
62442: GO 62997
62444: LD_INT 2
62446: DOUBLE
62447: EQUAL
62448: IFTRUE 62458
62450: LD_INT 3
62452: DOUBLE
62453: EQUAL
62454: IFTRUE 62458
62456: GO 62514
62458: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62459: LD_ADDR_VAR 0 9
62463: PUSH
62464: LD_VAR 0 29
62468: PUSH
62469: LD_VAR 0 30
62473: PUSH
62474: LD_VAR 0 31
62478: PUSH
62479: LD_VAR 0 32
62483: PUSH
62484: LD_VAR 0 33
62488: PUSH
62489: LD_VAR 0 34
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: PUSH
62502: LD_VAR 0 4
62506: PUSH
62507: LD_INT 1
62509: PLUS
62510: ARRAY
62511: ST_TO_ADDR
62512: GO 62997
62514: LD_INT 16
62516: DOUBLE
62517: EQUAL
62518: IFTRUE 62576
62520: LD_INT 17
62522: DOUBLE
62523: EQUAL
62524: IFTRUE 62576
62526: LD_INT 18
62528: DOUBLE
62529: EQUAL
62530: IFTRUE 62576
62532: LD_INT 19
62534: DOUBLE
62535: EQUAL
62536: IFTRUE 62576
62538: LD_INT 22
62540: DOUBLE
62541: EQUAL
62542: IFTRUE 62576
62544: LD_INT 20
62546: DOUBLE
62547: EQUAL
62548: IFTRUE 62576
62550: LD_INT 21
62552: DOUBLE
62553: EQUAL
62554: IFTRUE 62576
62556: LD_INT 23
62558: DOUBLE
62559: EQUAL
62560: IFTRUE 62576
62562: LD_INT 24
62564: DOUBLE
62565: EQUAL
62566: IFTRUE 62576
62568: LD_INT 25
62570: DOUBLE
62571: EQUAL
62572: IFTRUE 62576
62574: GO 62632
62576: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62577: LD_ADDR_VAR 0 9
62581: PUSH
62582: LD_VAR 0 35
62586: PUSH
62587: LD_VAR 0 36
62591: PUSH
62592: LD_VAR 0 37
62596: PUSH
62597: LD_VAR 0 38
62601: PUSH
62602: LD_VAR 0 39
62606: PUSH
62607: LD_VAR 0 40
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: PUSH
62620: LD_VAR 0 4
62624: PUSH
62625: LD_INT 1
62627: PLUS
62628: ARRAY
62629: ST_TO_ADDR
62630: GO 62997
62632: LD_INT 6
62634: DOUBLE
62635: EQUAL
62636: IFTRUE 62688
62638: LD_INT 7
62640: DOUBLE
62641: EQUAL
62642: IFTRUE 62688
62644: LD_INT 8
62646: DOUBLE
62647: EQUAL
62648: IFTRUE 62688
62650: LD_INT 13
62652: DOUBLE
62653: EQUAL
62654: IFTRUE 62688
62656: LD_INT 12
62658: DOUBLE
62659: EQUAL
62660: IFTRUE 62688
62662: LD_INT 15
62664: DOUBLE
62665: EQUAL
62666: IFTRUE 62688
62668: LD_INT 11
62670: DOUBLE
62671: EQUAL
62672: IFTRUE 62688
62674: LD_INT 14
62676: DOUBLE
62677: EQUAL
62678: IFTRUE 62688
62680: LD_INT 10
62682: DOUBLE
62683: EQUAL
62684: IFTRUE 62688
62686: GO 62744
62688: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62689: LD_ADDR_VAR 0 9
62693: PUSH
62694: LD_VAR 0 41
62698: PUSH
62699: LD_VAR 0 42
62703: PUSH
62704: LD_VAR 0 43
62708: PUSH
62709: LD_VAR 0 44
62713: PUSH
62714: LD_VAR 0 45
62718: PUSH
62719: LD_VAR 0 46
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: PUSH
62732: LD_VAR 0 4
62736: PUSH
62737: LD_INT 1
62739: PLUS
62740: ARRAY
62741: ST_TO_ADDR
62742: GO 62997
62744: LD_INT 36
62746: DOUBLE
62747: EQUAL
62748: IFTRUE 62752
62750: GO 62808
62752: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62753: LD_ADDR_VAR 0 9
62757: PUSH
62758: LD_VAR 0 47
62762: PUSH
62763: LD_VAR 0 48
62767: PUSH
62768: LD_VAR 0 49
62772: PUSH
62773: LD_VAR 0 50
62777: PUSH
62778: LD_VAR 0 51
62782: PUSH
62783: LD_VAR 0 52
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: PUSH
62796: LD_VAR 0 4
62800: PUSH
62801: LD_INT 1
62803: PLUS
62804: ARRAY
62805: ST_TO_ADDR
62806: GO 62997
62808: LD_INT 4
62810: DOUBLE
62811: EQUAL
62812: IFTRUE 62834
62814: LD_INT 5
62816: DOUBLE
62817: EQUAL
62818: IFTRUE 62834
62820: LD_INT 34
62822: DOUBLE
62823: EQUAL
62824: IFTRUE 62834
62826: LD_INT 37
62828: DOUBLE
62829: EQUAL
62830: IFTRUE 62834
62832: GO 62890
62834: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62835: LD_ADDR_VAR 0 9
62839: PUSH
62840: LD_VAR 0 53
62844: PUSH
62845: LD_VAR 0 54
62849: PUSH
62850: LD_VAR 0 55
62854: PUSH
62855: LD_VAR 0 56
62859: PUSH
62860: LD_VAR 0 57
62864: PUSH
62865: LD_VAR 0 58
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: PUSH
62878: LD_VAR 0 4
62882: PUSH
62883: LD_INT 1
62885: PLUS
62886: ARRAY
62887: ST_TO_ADDR
62888: GO 62997
62890: LD_INT 31
62892: DOUBLE
62893: EQUAL
62894: IFTRUE 62940
62896: LD_INT 32
62898: DOUBLE
62899: EQUAL
62900: IFTRUE 62940
62902: LD_INT 33
62904: DOUBLE
62905: EQUAL
62906: IFTRUE 62940
62908: LD_INT 27
62910: DOUBLE
62911: EQUAL
62912: IFTRUE 62940
62914: LD_INT 26
62916: DOUBLE
62917: EQUAL
62918: IFTRUE 62940
62920: LD_INT 28
62922: DOUBLE
62923: EQUAL
62924: IFTRUE 62940
62926: LD_INT 29
62928: DOUBLE
62929: EQUAL
62930: IFTRUE 62940
62932: LD_INT 30
62934: DOUBLE
62935: EQUAL
62936: IFTRUE 62940
62938: GO 62996
62940: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62941: LD_ADDR_VAR 0 9
62945: PUSH
62946: LD_VAR 0 59
62950: PUSH
62951: LD_VAR 0 60
62955: PUSH
62956: LD_VAR 0 61
62960: PUSH
62961: LD_VAR 0 62
62965: PUSH
62966: LD_VAR 0 63
62970: PUSH
62971: LD_VAR 0 64
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: PUSH
62984: LD_VAR 0 4
62988: PUSH
62989: LD_INT 1
62991: PLUS
62992: ARRAY
62993: ST_TO_ADDR
62994: GO 62997
62996: POP
// temp_list2 = [ ] ;
62997: LD_ADDR_VAR 0 10
63001: PUSH
63002: EMPTY
63003: ST_TO_ADDR
// for i in temp_list do
63004: LD_ADDR_VAR 0 8
63008: PUSH
63009: LD_VAR 0 9
63013: PUSH
63014: FOR_IN
63015: IFFALSE 63067
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63017: LD_ADDR_VAR 0 10
63021: PUSH
63022: LD_VAR 0 10
63026: PUSH
63027: LD_VAR 0 8
63031: PUSH
63032: LD_INT 1
63034: ARRAY
63035: PUSH
63036: LD_VAR 0 2
63040: PLUS
63041: PUSH
63042: LD_VAR 0 8
63046: PUSH
63047: LD_INT 2
63049: ARRAY
63050: PUSH
63051: LD_VAR 0 3
63055: PLUS
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: EMPTY
63062: LIST
63063: ADD
63064: ST_TO_ADDR
63065: GO 63014
63067: POP
63068: POP
// result = temp_list2 ;
63069: LD_ADDR_VAR 0 7
63073: PUSH
63074: LD_VAR 0 10
63078: ST_TO_ADDR
// end ;
63079: LD_VAR 0 7
63083: RET
// export function EnemyInRange ( unit , dist ) ; begin
63084: LD_INT 0
63086: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63087: LD_ADDR_VAR 0 3
63091: PUSH
63092: LD_VAR 0 1
63096: PPUSH
63097: CALL_OW 255
63101: PPUSH
63102: LD_VAR 0 1
63106: PPUSH
63107: CALL_OW 250
63111: PPUSH
63112: LD_VAR 0 1
63116: PPUSH
63117: CALL_OW 251
63121: PPUSH
63122: LD_VAR 0 2
63126: PPUSH
63127: CALL 36486 0 4
63131: PUSH
63132: LD_INT 4
63134: ARRAY
63135: ST_TO_ADDR
// end ;
63136: LD_VAR 0 3
63140: RET
// export function PlayerSeeMe ( unit ) ; begin
63141: LD_INT 0
63143: PPUSH
// result := See ( your_side , unit ) ;
63144: LD_ADDR_VAR 0 2
63148: PUSH
63149: LD_OWVAR 2
63153: PPUSH
63154: LD_VAR 0 1
63158: PPUSH
63159: CALL_OW 292
63163: ST_TO_ADDR
// end ;
63164: LD_VAR 0 2
63168: RET
// export function ReverseDir ( unit ) ; begin
63169: LD_INT 0
63171: PPUSH
// if not unit then
63172: LD_VAR 0 1
63176: NOT
63177: IFFALSE 63181
// exit ;
63179: GO 63204
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63181: LD_ADDR_VAR 0 2
63185: PUSH
63186: LD_VAR 0 1
63190: PPUSH
63191: CALL_OW 254
63195: PUSH
63196: LD_INT 3
63198: PLUS
63199: PUSH
63200: LD_INT 6
63202: MOD
63203: ST_TO_ADDR
// end ;
63204: LD_VAR 0 2
63208: RET
// export function ReverseArray ( array ) ; var i ; begin
63209: LD_INT 0
63211: PPUSH
63212: PPUSH
// if not array then
63213: LD_VAR 0 1
63217: NOT
63218: IFFALSE 63222
// exit ;
63220: GO 63277
// result := [ ] ;
63222: LD_ADDR_VAR 0 2
63226: PUSH
63227: EMPTY
63228: ST_TO_ADDR
// for i := array downto 1 do
63229: LD_ADDR_VAR 0 3
63233: PUSH
63234: DOUBLE
63235: LD_VAR 0 1
63239: INC
63240: ST_TO_ADDR
63241: LD_INT 1
63243: PUSH
63244: FOR_DOWNTO
63245: IFFALSE 63275
// result := Join ( result , array [ i ] ) ;
63247: LD_ADDR_VAR 0 2
63251: PUSH
63252: LD_VAR 0 2
63256: PPUSH
63257: LD_VAR 0 1
63261: PUSH
63262: LD_VAR 0 3
63266: ARRAY
63267: PPUSH
63268: CALL 67921 0 2
63272: ST_TO_ADDR
63273: GO 63244
63275: POP
63276: POP
// end ;
63277: LD_VAR 0 2
63281: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63282: LD_INT 0
63284: PPUSH
63285: PPUSH
63286: PPUSH
63287: PPUSH
63288: PPUSH
63289: PPUSH
// if not unit or not hexes then
63290: LD_VAR 0 1
63294: NOT
63295: PUSH
63296: LD_VAR 0 2
63300: NOT
63301: OR
63302: IFFALSE 63306
// exit ;
63304: GO 63429
// dist := 9999 ;
63306: LD_ADDR_VAR 0 5
63310: PUSH
63311: LD_INT 9999
63313: ST_TO_ADDR
// for i = 1 to hexes do
63314: LD_ADDR_VAR 0 4
63318: PUSH
63319: DOUBLE
63320: LD_INT 1
63322: DEC
63323: ST_TO_ADDR
63324: LD_VAR 0 2
63328: PUSH
63329: FOR_TO
63330: IFFALSE 63417
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63332: LD_ADDR_VAR 0 6
63336: PUSH
63337: LD_VAR 0 1
63341: PPUSH
63342: LD_VAR 0 2
63346: PUSH
63347: LD_VAR 0 4
63351: ARRAY
63352: PUSH
63353: LD_INT 1
63355: ARRAY
63356: PPUSH
63357: LD_VAR 0 2
63361: PUSH
63362: LD_VAR 0 4
63366: ARRAY
63367: PUSH
63368: LD_INT 2
63370: ARRAY
63371: PPUSH
63372: CALL_OW 297
63376: ST_TO_ADDR
// if tdist < dist then
63377: LD_VAR 0 6
63381: PUSH
63382: LD_VAR 0 5
63386: LESS
63387: IFFALSE 63415
// begin hex := hexes [ i ] ;
63389: LD_ADDR_VAR 0 8
63393: PUSH
63394: LD_VAR 0 2
63398: PUSH
63399: LD_VAR 0 4
63403: ARRAY
63404: ST_TO_ADDR
// dist := tdist ;
63405: LD_ADDR_VAR 0 5
63409: PUSH
63410: LD_VAR 0 6
63414: ST_TO_ADDR
// end ; end ;
63415: GO 63329
63417: POP
63418: POP
// result := hex ;
63419: LD_ADDR_VAR 0 3
63423: PUSH
63424: LD_VAR 0 8
63428: ST_TO_ADDR
// end ;
63429: LD_VAR 0 3
63433: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63434: LD_INT 0
63436: PPUSH
63437: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63438: LD_VAR 0 1
63442: NOT
63443: PUSH
63444: LD_VAR 0 1
63448: PUSH
63449: LD_INT 21
63451: PUSH
63452: LD_INT 2
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 23
63461: PUSH
63462: LD_INT 2
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PPUSH
63473: CALL_OW 69
63477: IN
63478: NOT
63479: OR
63480: IFFALSE 63484
// exit ;
63482: GO 63531
// for i = 1 to 3 do
63484: LD_ADDR_VAR 0 3
63488: PUSH
63489: DOUBLE
63490: LD_INT 1
63492: DEC
63493: ST_TO_ADDR
63494: LD_INT 3
63496: PUSH
63497: FOR_TO
63498: IFFALSE 63529
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63500: LD_VAR 0 1
63504: PPUSH
63505: CALL_OW 250
63509: PPUSH
63510: LD_VAR 0 1
63514: PPUSH
63515: CALL_OW 251
63519: PPUSH
63520: LD_INT 1
63522: PPUSH
63523: CALL_OW 453
63527: GO 63497
63529: POP
63530: POP
// end ;
63531: LD_VAR 0 2
63535: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63536: LD_INT 0
63538: PPUSH
63539: PPUSH
63540: PPUSH
63541: PPUSH
63542: PPUSH
63543: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63544: LD_VAR 0 1
63548: NOT
63549: PUSH
63550: LD_VAR 0 2
63554: NOT
63555: OR
63556: PUSH
63557: LD_VAR 0 1
63561: PPUSH
63562: CALL_OW 314
63566: OR
63567: IFFALSE 63571
// exit ;
63569: GO 64038
// if GetLives ( i ) < 250 then
63571: LD_VAR 0 4
63575: PPUSH
63576: CALL_OW 256
63580: PUSH
63581: LD_INT 250
63583: LESS
63584: IFFALSE 63597
// begin ComAutodestruct ( i ) ;
63586: LD_VAR 0 4
63590: PPUSH
63591: CALL 63434 0 1
// exit ;
63595: GO 64038
// end ; x := GetX ( enemy_unit ) ;
63597: LD_ADDR_VAR 0 7
63601: PUSH
63602: LD_VAR 0 2
63606: PPUSH
63607: CALL_OW 250
63611: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63612: LD_ADDR_VAR 0 8
63616: PUSH
63617: LD_VAR 0 2
63621: PPUSH
63622: CALL_OW 251
63626: ST_TO_ADDR
// if not x or not y then
63627: LD_VAR 0 7
63631: NOT
63632: PUSH
63633: LD_VAR 0 8
63637: NOT
63638: OR
63639: IFFALSE 63643
// exit ;
63641: GO 64038
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63643: LD_ADDR_VAR 0 6
63647: PUSH
63648: LD_VAR 0 7
63652: PPUSH
63653: LD_INT 0
63655: PPUSH
63656: LD_INT 4
63658: PPUSH
63659: CALL_OW 272
63663: PUSH
63664: LD_VAR 0 8
63668: PPUSH
63669: LD_INT 0
63671: PPUSH
63672: LD_INT 4
63674: PPUSH
63675: CALL_OW 273
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_VAR 0 7
63688: PPUSH
63689: LD_INT 1
63691: PPUSH
63692: LD_INT 4
63694: PPUSH
63695: CALL_OW 272
63699: PUSH
63700: LD_VAR 0 8
63704: PPUSH
63705: LD_INT 1
63707: PPUSH
63708: LD_INT 4
63710: PPUSH
63711: CALL_OW 273
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_VAR 0 7
63724: PPUSH
63725: LD_INT 2
63727: PPUSH
63728: LD_INT 4
63730: PPUSH
63731: CALL_OW 272
63735: PUSH
63736: LD_VAR 0 8
63740: PPUSH
63741: LD_INT 2
63743: PPUSH
63744: LD_INT 4
63746: PPUSH
63747: CALL_OW 273
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_VAR 0 7
63760: PPUSH
63761: LD_INT 3
63763: PPUSH
63764: LD_INT 4
63766: PPUSH
63767: CALL_OW 272
63771: PUSH
63772: LD_VAR 0 8
63776: PPUSH
63777: LD_INT 3
63779: PPUSH
63780: LD_INT 4
63782: PPUSH
63783: CALL_OW 273
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_VAR 0 7
63796: PPUSH
63797: LD_INT 4
63799: PPUSH
63800: LD_INT 4
63802: PPUSH
63803: CALL_OW 272
63807: PUSH
63808: LD_VAR 0 8
63812: PPUSH
63813: LD_INT 4
63815: PPUSH
63816: LD_INT 4
63818: PPUSH
63819: CALL_OW 273
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_VAR 0 7
63832: PPUSH
63833: LD_INT 5
63835: PPUSH
63836: LD_INT 4
63838: PPUSH
63839: CALL_OW 272
63843: PUSH
63844: LD_VAR 0 8
63848: PPUSH
63849: LD_INT 5
63851: PPUSH
63852: LD_INT 4
63854: PPUSH
63855: CALL_OW 273
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: ST_TO_ADDR
// for i = tmp downto 1 do
63872: LD_ADDR_VAR 0 4
63876: PUSH
63877: DOUBLE
63878: LD_VAR 0 6
63882: INC
63883: ST_TO_ADDR
63884: LD_INT 1
63886: PUSH
63887: FOR_DOWNTO
63888: IFFALSE 63989
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63890: LD_VAR 0 6
63894: PUSH
63895: LD_VAR 0 4
63899: ARRAY
63900: PUSH
63901: LD_INT 1
63903: ARRAY
63904: PPUSH
63905: LD_VAR 0 6
63909: PUSH
63910: LD_VAR 0 4
63914: ARRAY
63915: PUSH
63916: LD_INT 2
63918: ARRAY
63919: PPUSH
63920: CALL_OW 488
63924: NOT
63925: PUSH
63926: LD_VAR 0 6
63930: PUSH
63931: LD_VAR 0 4
63935: ARRAY
63936: PUSH
63937: LD_INT 1
63939: ARRAY
63940: PPUSH
63941: LD_VAR 0 6
63945: PUSH
63946: LD_VAR 0 4
63950: ARRAY
63951: PUSH
63952: LD_INT 2
63954: ARRAY
63955: PPUSH
63956: CALL_OW 428
63960: PUSH
63961: LD_INT 0
63963: NONEQUAL
63964: OR
63965: IFFALSE 63987
// tmp := Delete ( tmp , i ) ;
63967: LD_ADDR_VAR 0 6
63971: PUSH
63972: LD_VAR 0 6
63976: PPUSH
63977: LD_VAR 0 4
63981: PPUSH
63982: CALL_OW 3
63986: ST_TO_ADDR
63987: GO 63887
63989: POP
63990: POP
// j := GetClosestHex ( unit , tmp ) ;
63991: LD_ADDR_VAR 0 5
63995: PUSH
63996: LD_VAR 0 1
64000: PPUSH
64001: LD_VAR 0 6
64005: PPUSH
64006: CALL 63282 0 2
64010: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64011: LD_VAR 0 1
64015: PPUSH
64016: LD_VAR 0 5
64020: PUSH
64021: LD_INT 1
64023: ARRAY
64024: PPUSH
64025: LD_VAR 0 5
64029: PUSH
64030: LD_INT 2
64032: ARRAY
64033: PPUSH
64034: CALL_OW 111
// end ;
64038: LD_VAR 0 3
64042: RET
// export function PrepareApemanSoldier ( ) ; begin
64043: LD_INT 0
64045: PPUSH
// uc_nation := 0 ;
64046: LD_ADDR_OWVAR 21
64050: PUSH
64051: LD_INT 0
64053: ST_TO_ADDR
// hc_sex := sex_male ;
64054: LD_ADDR_OWVAR 27
64058: PUSH
64059: LD_INT 1
64061: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64062: LD_ADDR_OWVAR 28
64066: PUSH
64067: LD_INT 15
64069: ST_TO_ADDR
// hc_gallery :=  ;
64070: LD_ADDR_OWVAR 33
64074: PUSH
64075: LD_STRING 
64077: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64078: LD_ADDR_OWVAR 31
64082: PUSH
64083: LD_INT 0
64085: PPUSH
64086: LD_INT 3
64088: PPUSH
64089: CALL_OW 12
64093: PUSH
64094: LD_INT 0
64096: PPUSH
64097: LD_INT 3
64099: PPUSH
64100: CALL_OW 12
64104: PUSH
64105: LD_INT 0
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: ST_TO_ADDR
// end ;
64117: LD_VAR 0 1
64121: RET
// export function PrepareApemanEngineer ( ) ; begin
64122: LD_INT 0
64124: PPUSH
// uc_nation := 0 ;
64125: LD_ADDR_OWVAR 21
64129: PUSH
64130: LD_INT 0
64132: ST_TO_ADDR
// hc_sex := sex_male ;
64133: LD_ADDR_OWVAR 27
64137: PUSH
64138: LD_INT 1
64140: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64141: LD_ADDR_OWVAR 28
64145: PUSH
64146: LD_INT 16
64148: ST_TO_ADDR
// hc_gallery :=  ;
64149: LD_ADDR_OWVAR 33
64153: PUSH
64154: LD_STRING 
64156: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64157: LD_ADDR_OWVAR 31
64161: PUSH
64162: LD_INT 0
64164: PPUSH
64165: LD_INT 3
64167: PPUSH
64168: CALL_OW 12
64172: PUSH
64173: LD_INT 0
64175: PPUSH
64176: LD_INT 3
64178: PPUSH
64179: CALL_OW 12
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: ST_TO_ADDR
// end ;
64196: LD_VAR 0 1
64200: RET
// export function PrepareApeman ( agressivity ) ; begin
64201: LD_INT 0
64203: PPUSH
// uc_side := 0 ;
64204: LD_ADDR_OWVAR 20
64208: PUSH
64209: LD_INT 0
64211: ST_TO_ADDR
// uc_nation := 0 ;
64212: LD_ADDR_OWVAR 21
64216: PUSH
64217: LD_INT 0
64219: ST_TO_ADDR
// hc_sex := sex_male ;
64220: LD_ADDR_OWVAR 27
64224: PUSH
64225: LD_INT 1
64227: ST_TO_ADDR
// hc_class := class_apeman ;
64228: LD_ADDR_OWVAR 28
64232: PUSH
64233: LD_INT 12
64235: ST_TO_ADDR
// hc_gallery :=  ;
64236: LD_ADDR_OWVAR 33
64240: PUSH
64241: LD_STRING 
64243: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64244: LD_ADDR_OWVAR 35
64248: PUSH
64249: LD_VAR 0 1
64253: NEG
64254: PPUSH
64255: LD_VAR 0 1
64259: PPUSH
64260: CALL_OW 12
64264: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64265: LD_ADDR_OWVAR 31
64269: PUSH
64270: LD_INT 0
64272: PPUSH
64273: LD_INT 3
64275: PPUSH
64276: CALL_OW 12
64280: PUSH
64281: LD_INT 0
64283: PPUSH
64284: LD_INT 3
64286: PPUSH
64287: CALL_OW 12
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: ST_TO_ADDR
// end ;
64304: LD_VAR 0 2
64308: RET
// export function PrepareTiger ( agressivity ) ; begin
64309: LD_INT 0
64311: PPUSH
// uc_side := 0 ;
64312: LD_ADDR_OWVAR 20
64316: PUSH
64317: LD_INT 0
64319: ST_TO_ADDR
// uc_nation := 0 ;
64320: LD_ADDR_OWVAR 21
64324: PUSH
64325: LD_INT 0
64327: ST_TO_ADDR
// hc_class := class_tiger ;
64328: LD_ADDR_OWVAR 28
64332: PUSH
64333: LD_INT 14
64335: ST_TO_ADDR
// hc_gallery :=  ;
64336: LD_ADDR_OWVAR 33
64340: PUSH
64341: LD_STRING 
64343: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64344: LD_ADDR_OWVAR 35
64348: PUSH
64349: LD_VAR 0 1
64353: NEG
64354: PPUSH
64355: LD_VAR 0 1
64359: PPUSH
64360: CALL_OW 12
64364: ST_TO_ADDR
// end ;
64365: LD_VAR 0 2
64369: RET
// export function PrepareEnchidna ( ) ; begin
64370: LD_INT 0
64372: PPUSH
// uc_side := 0 ;
64373: LD_ADDR_OWVAR 20
64377: PUSH
64378: LD_INT 0
64380: ST_TO_ADDR
// uc_nation := 0 ;
64381: LD_ADDR_OWVAR 21
64385: PUSH
64386: LD_INT 0
64388: ST_TO_ADDR
// hc_class := class_baggie ;
64389: LD_ADDR_OWVAR 28
64393: PUSH
64394: LD_INT 13
64396: ST_TO_ADDR
// hc_gallery :=  ;
64397: LD_ADDR_OWVAR 33
64401: PUSH
64402: LD_STRING 
64404: ST_TO_ADDR
// end ;
64405: LD_VAR 0 1
64409: RET
// export function PrepareFrog ( ) ; begin
64410: LD_INT 0
64412: PPUSH
// uc_side := 0 ;
64413: LD_ADDR_OWVAR 20
64417: PUSH
64418: LD_INT 0
64420: ST_TO_ADDR
// uc_nation := 0 ;
64421: LD_ADDR_OWVAR 21
64425: PUSH
64426: LD_INT 0
64428: ST_TO_ADDR
// hc_class := class_frog ;
64429: LD_ADDR_OWVAR 28
64433: PUSH
64434: LD_INT 19
64436: ST_TO_ADDR
// hc_gallery :=  ;
64437: LD_ADDR_OWVAR 33
64441: PUSH
64442: LD_STRING 
64444: ST_TO_ADDR
// end ;
64445: LD_VAR 0 1
64449: RET
// export function PrepareFish ( ) ; begin
64450: LD_INT 0
64452: PPUSH
// uc_side := 0 ;
64453: LD_ADDR_OWVAR 20
64457: PUSH
64458: LD_INT 0
64460: ST_TO_ADDR
// uc_nation := 0 ;
64461: LD_ADDR_OWVAR 21
64465: PUSH
64466: LD_INT 0
64468: ST_TO_ADDR
// hc_class := class_fish ;
64469: LD_ADDR_OWVAR 28
64473: PUSH
64474: LD_INT 20
64476: ST_TO_ADDR
// hc_gallery :=  ;
64477: LD_ADDR_OWVAR 33
64481: PUSH
64482: LD_STRING 
64484: ST_TO_ADDR
// end ;
64485: LD_VAR 0 1
64489: RET
// export function PrepareBird ( ) ; begin
64490: LD_INT 0
64492: PPUSH
// uc_side := 0 ;
64493: LD_ADDR_OWVAR 20
64497: PUSH
64498: LD_INT 0
64500: ST_TO_ADDR
// uc_nation := 0 ;
64501: LD_ADDR_OWVAR 21
64505: PUSH
64506: LD_INT 0
64508: ST_TO_ADDR
// hc_class := class_phororhacos ;
64509: LD_ADDR_OWVAR 28
64513: PUSH
64514: LD_INT 18
64516: ST_TO_ADDR
// hc_gallery :=  ;
64517: LD_ADDR_OWVAR 33
64521: PUSH
64522: LD_STRING 
64524: ST_TO_ADDR
// end ;
64525: LD_VAR 0 1
64529: RET
// export function PrepareHorse ( ) ; begin
64530: LD_INT 0
64532: PPUSH
// uc_side := 0 ;
64533: LD_ADDR_OWVAR 20
64537: PUSH
64538: LD_INT 0
64540: ST_TO_ADDR
// uc_nation := 0 ;
64541: LD_ADDR_OWVAR 21
64545: PUSH
64546: LD_INT 0
64548: ST_TO_ADDR
// hc_class := class_horse ;
64549: LD_ADDR_OWVAR 28
64553: PUSH
64554: LD_INT 21
64556: ST_TO_ADDR
// hc_gallery :=  ;
64557: LD_ADDR_OWVAR 33
64561: PUSH
64562: LD_STRING 
64564: ST_TO_ADDR
// end ;
64565: LD_VAR 0 1
64569: RET
// export function PrepareMastodont ( ) ; begin
64570: LD_INT 0
64572: PPUSH
// uc_side := 0 ;
64573: LD_ADDR_OWVAR 20
64577: PUSH
64578: LD_INT 0
64580: ST_TO_ADDR
// uc_nation := 0 ;
64581: LD_ADDR_OWVAR 21
64585: PUSH
64586: LD_INT 0
64588: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64589: LD_ADDR_OWVAR 37
64593: PUSH
64594: LD_INT 31
64596: ST_TO_ADDR
// vc_control := control_rider ;
64597: LD_ADDR_OWVAR 38
64601: PUSH
64602: LD_INT 4
64604: ST_TO_ADDR
// end ;
64605: LD_VAR 0 1
64609: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64610: LD_INT 0
64612: PPUSH
64613: PPUSH
64614: PPUSH
// uc_side = 0 ;
64615: LD_ADDR_OWVAR 20
64619: PUSH
64620: LD_INT 0
64622: ST_TO_ADDR
// uc_nation = 0 ;
64623: LD_ADDR_OWVAR 21
64627: PUSH
64628: LD_INT 0
64630: ST_TO_ADDR
// InitHc_All ( ) ;
64631: CALL_OW 584
// InitVc ;
64635: CALL_OW 20
// if mastodonts then
64639: LD_VAR 0 6
64643: IFFALSE 64710
// for i = 1 to mastodonts do
64645: LD_ADDR_VAR 0 11
64649: PUSH
64650: DOUBLE
64651: LD_INT 1
64653: DEC
64654: ST_TO_ADDR
64655: LD_VAR 0 6
64659: PUSH
64660: FOR_TO
64661: IFFALSE 64708
// begin vc_chassis := 31 ;
64663: LD_ADDR_OWVAR 37
64667: PUSH
64668: LD_INT 31
64670: ST_TO_ADDR
// vc_control := control_rider ;
64671: LD_ADDR_OWVAR 38
64675: PUSH
64676: LD_INT 4
64678: ST_TO_ADDR
// animal := CreateVehicle ;
64679: LD_ADDR_VAR 0 12
64683: PUSH
64684: CALL_OW 45
64688: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64689: LD_VAR 0 12
64693: PPUSH
64694: LD_VAR 0 8
64698: PPUSH
64699: LD_INT 0
64701: PPUSH
64702: CALL 66838 0 3
// end ;
64706: GO 64660
64708: POP
64709: POP
// if horses then
64710: LD_VAR 0 5
64714: IFFALSE 64781
// for i = 1 to horses do
64716: LD_ADDR_VAR 0 11
64720: PUSH
64721: DOUBLE
64722: LD_INT 1
64724: DEC
64725: ST_TO_ADDR
64726: LD_VAR 0 5
64730: PUSH
64731: FOR_TO
64732: IFFALSE 64779
// begin hc_class := 21 ;
64734: LD_ADDR_OWVAR 28
64738: PUSH
64739: LD_INT 21
64741: ST_TO_ADDR
// hc_gallery :=  ;
64742: LD_ADDR_OWVAR 33
64746: PUSH
64747: LD_STRING 
64749: ST_TO_ADDR
// animal := CreateHuman ;
64750: LD_ADDR_VAR 0 12
64754: PUSH
64755: CALL_OW 44
64759: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64760: LD_VAR 0 12
64764: PPUSH
64765: LD_VAR 0 8
64769: PPUSH
64770: LD_INT 0
64772: PPUSH
64773: CALL 66838 0 3
// end ;
64777: GO 64731
64779: POP
64780: POP
// if birds then
64781: LD_VAR 0 1
64785: IFFALSE 64852
// for i = 1 to birds do
64787: LD_ADDR_VAR 0 11
64791: PUSH
64792: DOUBLE
64793: LD_INT 1
64795: DEC
64796: ST_TO_ADDR
64797: LD_VAR 0 1
64801: PUSH
64802: FOR_TO
64803: IFFALSE 64850
// begin hc_class = 18 ;
64805: LD_ADDR_OWVAR 28
64809: PUSH
64810: LD_INT 18
64812: ST_TO_ADDR
// hc_gallery =  ;
64813: LD_ADDR_OWVAR 33
64817: PUSH
64818: LD_STRING 
64820: ST_TO_ADDR
// animal := CreateHuman ;
64821: LD_ADDR_VAR 0 12
64825: PUSH
64826: CALL_OW 44
64830: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64831: LD_VAR 0 12
64835: PPUSH
64836: LD_VAR 0 8
64840: PPUSH
64841: LD_INT 0
64843: PPUSH
64844: CALL 66838 0 3
// end ;
64848: GO 64802
64850: POP
64851: POP
// if tigers then
64852: LD_VAR 0 2
64856: IFFALSE 64940
// for i = 1 to tigers do
64858: LD_ADDR_VAR 0 11
64862: PUSH
64863: DOUBLE
64864: LD_INT 1
64866: DEC
64867: ST_TO_ADDR
64868: LD_VAR 0 2
64872: PUSH
64873: FOR_TO
64874: IFFALSE 64938
// begin hc_class = class_tiger ;
64876: LD_ADDR_OWVAR 28
64880: PUSH
64881: LD_INT 14
64883: ST_TO_ADDR
// hc_gallery =  ;
64884: LD_ADDR_OWVAR 33
64888: PUSH
64889: LD_STRING 
64891: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64892: LD_ADDR_OWVAR 35
64896: PUSH
64897: LD_INT 7
64899: NEG
64900: PPUSH
64901: LD_INT 7
64903: PPUSH
64904: CALL_OW 12
64908: ST_TO_ADDR
// animal := CreateHuman ;
64909: LD_ADDR_VAR 0 12
64913: PUSH
64914: CALL_OW 44
64918: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64919: LD_VAR 0 12
64923: PPUSH
64924: LD_VAR 0 8
64928: PPUSH
64929: LD_INT 0
64931: PPUSH
64932: CALL 66838 0 3
// end ;
64936: GO 64873
64938: POP
64939: POP
// if apemans then
64940: LD_VAR 0 3
64944: IFFALSE 65067
// for i = 1 to apemans do
64946: LD_ADDR_VAR 0 11
64950: PUSH
64951: DOUBLE
64952: LD_INT 1
64954: DEC
64955: ST_TO_ADDR
64956: LD_VAR 0 3
64960: PUSH
64961: FOR_TO
64962: IFFALSE 65065
// begin hc_class = class_apeman ;
64964: LD_ADDR_OWVAR 28
64968: PUSH
64969: LD_INT 12
64971: ST_TO_ADDR
// hc_gallery =  ;
64972: LD_ADDR_OWVAR 33
64976: PUSH
64977: LD_STRING 
64979: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64980: LD_ADDR_OWVAR 35
64984: PUSH
64985: LD_INT 2
64987: NEG
64988: PPUSH
64989: LD_INT 2
64991: PPUSH
64992: CALL_OW 12
64996: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64997: LD_ADDR_OWVAR 31
65001: PUSH
65002: LD_INT 1
65004: PPUSH
65005: LD_INT 3
65007: PPUSH
65008: CALL_OW 12
65012: PUSH
65013: LD_INT 1
65015: PPUSH
65016: LD_INT 3
65018: PPUSH
65019: CALL_OW 12
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: ST_TO_ADDR
// animal := CreateHuman ;
65036: LD_ADDR_VAR 0 12
65040: PUSH
65041: CALL_OW 44
65045: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65046: LD_VAR 0 12
65050: PPUSH
65051: LD_VAR 0 8
65055: PPUSH
65056: LD_INT 0
65058: PPUSH
65059: CALL 66838 0 3
// end ;
65063: GO 64961
65065: POP
65066: POP
// if enchidnas then
65067: LD_VAR 0 4
65071: IFFALSE 65138
// for i = 1 to enchidnas do
65073: LD_ADDR_VAR 0 11
65077: PUSH
65078: DOUBLE
65079: LD_INT 1
65081: DEC
65082: ST_TO_ADDR
65083: LD_VAR 0 4
65087: PUSH
65088: FOR_TO
65089: IFFALSE 65136
// begin hc_class = 13 ;
65091: LD_ADDR_OWVAR 28
65095: PUSH
65096: LD_INT 13
65098: ST_TO_ADDR
// hc_gallery =  ;
65099: LD_ADDR_OWVAR 33
65103: PUSH
65104: LD_STRING 
65106: ST_TO_ADDR
// animal := CreateHuman ;
65107: LD_ADDR_VAR 0 12
65111: PUSH
65112: CALL_OW 44
65116: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65117: LD_VAR 0 12
65121: PPUSH
65122: LD_VAR 0 8
65126: PPUSH
65127: LD_INT 0
65129: PPUSH
65130: CALL 66838 0 3
// end ;
65134: GO 65088
65136: POP
65137: POP
// if fishes then
65138: LD_VAR 0 7
65142: IFFALSE 65209
// for i = 1 to fishes do
65144: LD_ADDR_VAR 0 11
65148: PUSH
65149: DOUBLE
65150: LD_INT 1
65152: DEC
65153: ST_TO_ADDR
65154: LD_VAR 0 7
65158: PUSH
65159: FOR_TO
65160: IFFALSE 65207
// begin hc_class = 20 ;
65162: LD_ADDR_OWVAR 28
65166: PUSH
65167: LD_INT 20
65169: ST_TO_ADDR
// hc_gallery =  ;
65170: LD_ADDR_OWVAR 33
65174: PUSH
65175: LD_STRING 
65177: ST_TO_ADDR
// animal := CreateHuman ;
65178: LD_ADDR_VAR 0 12
65182: PUSH
65183: CALL_OW 44
65187: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65188: LD_VAR 0 12
65192: PPUSH
65193: LD_VAR 0 9
65197: PPUSH
65198: LD_INT 0
65200: PPUSH
65201: CALL 66838 0 3
// end ;
65205: GO 65159
65207: POP
65208: POP
// end ;
65209: LD_VAR 0 10
65213: RET
// export function WantHeal ( sci , unit ) ; begin
65214: LD_INT 0
65216: PPUSH
// if GetTaskList ( sci ) > 0 then
65217: LD_VAR 0 1
65221: PPUSH
65222: CALL_OW 437
65226: PUSH
65227: LD_INT 0
65229: GREATER
65230: IFFALSE 65300
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65232: LD_VAR 0 1
65236: PPUSH
65237: CALL_OW 437
65241: PUSH
65242: LD_INT 1
65244: ARRAY
65245: PUSH
65246: LD_INT 1
65248: ARRAY
65249: PUSH
65250: LD_STRING l
65252: EQUAL
65253: PUSH
65254: LD_VAR 0 1
65258: PPUSH
65259: CALL_OW 437
65263: PUSH
65264: LD_INT 1
65266: ARRAY
65267: PUSH
65268: LD_INT 4
65270: ARRAY
65271: PUSH
65272: LD_VAR 0 2
65276: EQUAL
65277: AND
65278: IFFALSE 65290
// result := true else
65280: LD_ADDR_VAR 0 3
65284: PUSH
65285: LD_INT 1
65287: ST_TO_ADDR
65288: GO 65298
// result := false ;
65290: LD_ADDR_VAR 0 3
65294: PUSH
65295: LD_INT 0
65297: ST_TO_ADDR
// end else
65298: GO 65308
// result := false ;
65300: LD_ADDR_VAR 0 3
65304: PUSH
65305: LD_INT 0
65307: ST_TO_ADDR
// end ;
65308: LD_VAR 0 3
65312: RET
// export function HealTarget ( sci ) ; begin
65313: LD_INT 0
65315: PPUSH
// if not sci then
65316: LD_VAR 0 1
65320: NOT
65321: IFFALSE 65325
// exit ;
65323: GO 65390
// result := 0 ;
65325: LD_ADDR_VAR 0 2
65329: PUSH
65330: LD_INT 0
65332: ST_TO_ADDR
// if GetTaskList ( sci ) then
65333: LD_VAR 0 1
65337: PPUSH
65338: CALL_OW 437
65342: IFFALSE 65390
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65344: LD_VAR 0 1
65348: PPUSH
65349: CALL_OW 437
65353: PUSH
65354: LD_INT 1
65356: ARRAY
65357: PUSH
65358: LD_INT 1
65360: ARRAY
65361: PUSH
65362: LD_STRING l
65364: EQUAL
65365: IFFALSE 65390
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65367: LD_ADDR_VAR 0 2
65371: PUSH
65372: LD_VAR 0 1
65376: PPUSH
65377: CALL_OW 437
65381: PUSH
65382: LD_INT 1
65384: ARRAY
65385: PUSH
65386: LD_INT 4
65388: ARRAY
65389: ST_TO_ADDR
// end ;
65390: LD_VAR 0 2
65394: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65395: LD_INT 0
65397: PPUSH
65398: PPUSH
65399: PPUSH
65400: PPUSH
// if not base_units then
65401: LD_VAR 0 1
65405: NOT
65406: IFFALSE 65410
// exit ;
65408: GO 65497
// result := false ;
65410: LD_ADDR_VAR 0 2
65414: PUSH
65415: LD_INT 0
65417: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65418: LD_ADDR_VAR 0 5
65422: PUSH
65423: LD_VAR 0 1
65427: PPUSH
65428: LD_INT 21
65430: PUSH
65431: LD_INT 3
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PPUSH
65438: CALL_OW 72
65442: ST_TO_ADDR
// if not tmp then
65443: LD_VAR 0 5
65447: NOT
65448: IFFALSE 65452
// exit ;
65450: GO 65497
// for i in tmp do
65452: LD_ADDR_VAR 0 3
65456: PUSH
65457: LD_VAR 0 5
65461: PUSH
65462: FOR_IN
65463: IFFALSE 65495
// begin result := EnemyInRange ( i , 22 ) ;
65465: LD_ADDR_VAR 0 2
65469: PUSH
65470: LD_VAR 0 3
65474: PPUSH
65475: LD_INT 22
65477: PPUSH
65478: CALL 63084 0 2
65482: ST_TO_ADDR
// if result then
65483: LD_VAR 0 2
65487: IFFALSE 65493
// exit ;
65489: POP
65490: POP
65491: GO 65497
// end ;
65493: GO 65462
65495: POP
65496: POP
// end ;
65497: LD_VAR 0 2
65501: RET
// export function FilterByTag ( units , tag ) ; begin
65502: LD_INT 0
65504: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65505: LD_ADDR_VAR 0 3
65509: PUSH
65510: LD_VAR 0 1
65514: PPUSH
65515: LD_INT 120
65517: PUSH
65518: LD_VAR 0 2
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PPUSH
65527: CALL_OW 72
65531: ST_TO_ADDR
// end ;
65532: LD_VAR 0 3
65536: RET
// export function IsDriver ( un ) ; begin
65537: LD_INT 0
65539: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65540: LD_ADDR_VAR 0 2
65544: PUSH
65545: LD_VAR 0 1
65549: PUSH
65550: LD_INT 55
65552: PUSH
65553: EMPTY
65554: LIST
65555: PPUSH
65556: CALL_OW 69
65560: IN
65561: ST_TO_ADDR
// end ;
65562: LD_VAR 0 2
65566: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65567: LD_INT 0
65569: PPUSH
65570: PPUSH
// list := [ ] ;
65571: LD_ADDR_VAR 0 5
65575: PUSH
65576: EMPTY
65577: ST_TO_ADDR
// case d of 0 :
65578: LD_VAR 0 3
65582: PUSH
65583: LD_INT 0
65585: DOUBLE
65586: EQUAL
65587: IFTRUE 65591
65589: GO 65724
65591: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65592: LD_ADDR_VAR 0 5
65596: PUSH
65597: LD_VAR 0 1
65601: PUSH
65602: LD_INT 4
65604: MINUS
65605: PUSH
65606: LD_VAR 0 2
65610: PUSH
65611: LD_INT 4
65613: MINUS
65614: PUSH
65615: LD_INT 2
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: LIST
65622: PUSH
65623: LD_VAR 0 1
65627: PUSH
65628: LD_INT 3
65630: MINUS
65631: PUSH
65632: LD_VAR 0 2
65636: PUSH
65637: LD_INT 1
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: LIST
65644: PUSH
65645: LD_VAR 0 1
65649: PUSH
65650: LD_INT 4
65652: PLUS
65653: PUSH
65654: LD_VAR 0 2
65658: PUSH
65659: LD_INT 4
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: LIST
65666: PUSH
65667: LD_VAR 0 1
65671: PUSH
65672: LD_INT 3
65674: PLUS
65675: PUSH
65676: LD_VAR 0 2
65680: PUSH
65681: LD_INT 3
65683: PLUS
65684: PUSH
65685: LD_INT 5
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: LIST
65692: PUSH
65693: LD_VAR 0 1
65697: PUSH
65698: LD_VAR 0 2
65702: PUSH
65703: LD_INT 4
65705: PLUS
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: LIST
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: ST_TO_ADDR
// end ; 1 :
65722: GO 66422
65724: LD_INT 1
65726: DOUBLE
65727: EQUAL
65728: IFTRUE 65732
65730: GO 65865
65732: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65733: LD_ADDR_VAR 0 5
65737: PUSH
65738: LD_VAR 0 1
65742: PUSH
65743: LD_VAR 0 2
65747: PUSH
65748: LD_INT 4
65750: MINUS
65751: PUSH
65752: LD_INT 3
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: LIST
65759: PUSH
65760: LD_VAR 0 1
65764: PUSH
65765: LD_INT 3
65767: MINUS
65768: PUSH
65769: LD_VAR 0 2
65773: PUSH
65774: LD_INT 3
65776: MINUS
65777: PUSH
65778: LD_INT 2
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: LIST
65785: PUSH
65786: LD_VAR 0 1
65790: PUSH
65791: LD_INT 4
65793: MINUS
65794: PUSH
65795: LD_VAR 0 2
65799: PUSH
65800: LD_INT 1
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: LIST
65807: PUSH
65808: LD_VAR 0 1
65812: PUSH
65813: LD_VAR 0 2
65817: PUSH
65818: LD_INT 3
65820: PLUS
65821: PUSH
65822: LD_INT 0
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: LIST
65829: PUSH
65830: LD_VAR 0 1
65834: PUSH
65835: LD_INT 4
65837: PLUS
65838: PUSH
65839: LD_VAR 0 2
65843: PUSH
65844: LD_INT 4
65846: PLUS
65847: PUSH
65848: LD_INT 5
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: LIST
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: ST_TO_ADDR
// end ; 2 :
65863: GO 66422
65865: LD_INT 2
65867: DOUBLE
65868: EQUAL
65869: IFTRUE 65873
65871: GO 66002
65873: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65874: LD_ADDR_VAR 0 5
65878: PUSH
65879: LD_VAR 0 1
65883: PUSH
65884: LD_VAR 0 2
65888: PUSH
65889: LD_INT 3
65891: MINUS
65892: PUSH
65893: LD_INT 3
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: LIST
65900: PUSH
65901: LD_VAR 0 1
65905: PUSH
65906: LD_INT 4
65908: PLUS
65909: PUSH
65910: LD_VAR 0 2
65914: PUSH
65915: LD_INT 4
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: LIST
65922: PUSH
65923: LD_VAR 0 1
65927: PUSH
65928: LD_VAR 0 2
65932: PUSH
65933: LD_INT 4
65935: PLUS
65936: PUSH
65937: LD_INT 0
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: LIST
65944: PUSH
65945: LD_VAR 0 1
65949: PUSH
65950: LD_INT 3
65952: MINUS
65953: PUSH
65954: LD_VAR 0 2
65958: PUSH
65959: LD_INT 1
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: PUSH
65967: LD_VAR 0 1
65971: PUSH
65972: LD_INT 4
65974: MINUS
65975: PUSH
65976: LD_VAR 0 2
65980: PUSH
65981: LD_INT 4
65983: MINUS
65984: PUSH
65985: LD_INT 2
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: LIST
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: ST_TO_ADDR
// end ; 3 :
66000: GO 66422
66002: LD_INT 3
66004: DOUBLE
66005: EQUAL
66006: IFTRUE 66010
66008: GO 66143
66010: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66011: LD_ADDR_VAR 0 5
66015: PUSH
66016: LD_VAR 0 1
66020: PUSH
66021: LD_INT 3
66023: PLUS
66024: PUSH
66025: LD_VAR 0 2
66029: PUSH
66030: LD_INT 4
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: LIST
66037: PUSH
66038: LD_VAR 0 1
66042: PUSH
66043: LD_INT 4
66045: PLUS
66046: PUSH
66047: LD_VAR 0 2
66051: PUSH
66052: LD_INT 4
66054: PLUS
66055: PUSH
66056: LD_INT 5
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: LIST
66063: PUSH
66064: LD_VAR 0 1
66068: PUSH
66069: LD_INT 4
66071: MINUS
66072: PUSH
66073: LD_VAR 0 2
66077: PUSH
66078: LD_INT 1
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: LIST
66085: PUSH
66086: LD_VAR 0 1
66090: PUSH
66091: LD_VAR 0 2
66095: PUSH
66096: LD_INT 4
66098: MINUS
66099: PUSH
66100: LD_INT 3
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: LIST
66107: PUSH
66108: LD_VAR 0 1
66112: PUSH
66113: LD_INT 3
66115: MINUS
66116: PUSH
66117: LD_VAR 0 2
66121: PUSH
66122: LD_INT 3
66124: MINUS
66125: PUSH
66126: LD_INT 2
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: LIST
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: ST_TO_ADDR
// end ; 4 :
66141: GO 66422
66143: LD_INT 4
66145: DOUBLE
66146: EQUAL
66147: IFTRUE 66151
66149: GO 66284
66151: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66152: LD_ADDR_VAR 0 5
66156: PUSH
66157: LD_VAR 0 1
66161: PUSH
66162: LD_VAR 0 2
66166: PUSH
66167: LD_INT 4
66169: PLUS
66170: PUSH
66171: LD_INT 0
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: LIST
66178: PUSH
66179: LD_VAR 0 1
66183: PUSH
66184: LD_INT 3
66186: PLUS
66187: PUSH
66188: LD_VAR 0 2
66192: PUSH
66193: LD_INT 3
66195: PLUS
66196: PUSH
66197: LD_INT 5
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: LIST
66204: PUSH
66205: LD_VAR 0 1
66209: PUSH
66210: LD_INT 4
66212: PLUS
66213: PUSH
66214: LD_VAR 0 2
66218: PUSH
66219: LD_INT 4
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: LIST
66226: PUSH
66227: LD_VAR 0 1
66231: PUSH
66232: LD_VAR 0 2
66236: PUSH
66237: LD_INT 3
66239: MINUS
66240: PUSH
66241: LD_INT 3
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: PUSH
66249: LD_VAR 0 1
66253: PUSH
66254: LD_INT 4
66256: MINUS
66257: PUSH
66258: LD_VAR 0 2
66262: PUSH
66263: LD_INT 4
66265: MINUS
66266: PUSH
66267: LD_INT 2
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: LIST
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: ST_TO_ADDR
// end ; 5 :
66282: GO 66422
66284: LD_INT 5
66286: DOUBLE
66287: EQUAL
66288: IFTRUE 66292
66290: GO 66421
66292: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66293: LD_ADDR_VAR 0 5
66297: PUSH
66298: LD_VAR 0 1
66302: PUSH
66303: LD_INT 4
66305: MINUS
66306: PUSH
66307: LD_VAR 0 2
66311: PUSH
66312: LD_INT 1
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: LIST
66319: PUSH
66320: LD_VAR 0 1
66324: PUSH
66325: LD_VAR 0 2
66329: PUSH
66330: LD_INT 4
66332: MINUS
66333: PUSH
66334: LD_INT 3
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: LIST
66341: PUSH
66342: LD_VAR 0 1
66346: PUSH
66347: LD_INT 4
66349: PLUS
66350: PUSH
66351: LD_VAR 0 2
66355: PUSH
66356: LD_INT 4
66358: PLUS
66359: PUSH
66360: LD_INT 5
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: LIST
66367: PUSH
66368: LD_VAR 0 1
66372: PUSH
66373: LD_INT 3
66375: PLUS
66376: PUSH
66377: LD_VAR 0 2
66381: PUSH
66382: LD_INT 4
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: LIST
66389: PUSH
66390: LD_VAR 0 1
66394: PUSH
66395: LD_VAR 0 2
66399: PUSH
66400: LD_INT 3
66402: PLUS
66403: PUSH
66404: LD_INT 0
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: LIST
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: ST_TO_ADDR
// end ; end ;
66419: GO 66422
66421: POP
// result := list ;
66422: LD_ADDR_VAR 0 4
66426: PUSH
66427: LD_VAR 0 5
66431: ST_TO_ADDR
// end ;
66432: LD_VAR 0 4
66436: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66437: LD_INT 0
66439: PPUSH
66440: PPUSH
66441: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66442: LD_VAR 0 1
66446: NOT
66447: PUSH
66448: LD_VAR 0 2
66452: PUSH
66453: LD_INT 1
66455: PUSH
66456: LD_INT 2
66458: PUSH
66459: LD_INT 3
66461: PUSH
66462: LD_INT 4
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: IN
66471: NOT
66472: OR
66473: IFFALSE 66477
// exit ;
66475: GO 66560
// tmp := [ ] ;
66477: LD_ADDR_VAR 0 5
66481: PUSH
66482: EMPTY
66483: ST_TO_ADDR
// for i in units do
66484: LD_ADDR_VAR 0 4
66488: PUSH
66489: LD_VAR 0 1
66493: PUSH
66494: FOR_IN
66495: IFFALSE 66529
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66497: LD_ADDR_VAR 0 5
66501: PUSH
66502: LD_VAR 0 5
66506: PPUSH
66507: LD_VAR 0 4
66511: PPUSH
66512: LD_VAR 0 2
66516: PPUSH
66517: CALL_OW 259
66521: PPUSH
66522: CALL 67921 0 2
66526: ST_TO_ADDR
66527: GO 66494
66529: POP
66530: POP
// if not tmp then
66531: LD_VAR 0 5
66535: NOT
66536: IFFALSE 66540
// exit ;
66538: GO 66560
// result := SortListByListDesc ( units , tmp ) ;
66540: LD_ADDR_VAR 0 3
66544: PUSH
66545: LD_VAR 0 1
66549: PPUSH
66550: LD_VAR 0 5
66554: PPUSH
66555: CALL_OW 77
66559: ST_TO_ADDR
// end ;
66560: LD_VAR 0 3
66564: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66565: LD_INT 0
66567: PPUSH
66568: PPUSH
66569: PPUSH
// result := false ;
66570: LD_ADDR_VAR 0 3
66574: PUSH
66575: LD_INT 0
66577: ST_TO_ADDR
// if not building then
66578: LD_VAR 0 2
66582: NOT
66583: IFFALSE 66587
// exit ;
66585: GO 66725
// x := GetX ( building ) ;
66587: LD_ADDR_VAR 0 4
66591: PUSH
66592: LD_VAR 0 2
66596: PPUSH
66597: CALL_OW 250
66601: ST_TO_ADDR
// y := GetY ( building ) ;
66602: LD_ADDR_VAR 0 5
66606: PUSH
66607: LD_VAR 0 2
66611: PPUSH
66612: CALL_OW 251
66616: ST_TO_ADDR
// if not x or not y then
66617: LD_VAR 0 4
66621: NOT
66622: PUSH
66623: LD_VAR 0 5
66627: NOT
66628: OR
66629: IFFALSE 66633
// exit ;
66631: GO 66725
// if GetTaskList ( unit ) then
66633: LD_VAR 0 1
66637: PPUSH
66638: CALL_OW 437
66642: IFFALSE 66725
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66644: LD_STRING e
66646: PUSH
66647: LD_VAR 0 1
66651: PPUSH
66652: CALL_OW 437
66656: PUSH
66657: LD_INT 1
66659: ARRAY
66660: PUSH
66661: LD_INT 1
66663: ARRAY
66664: EQUAL
66665: PUSH
66666: LD_VAR 0 4
66670: PUSH
66671: LD_VAR 0 1
66675: PPUSH
66676: CALL_OW 437
66680: PUSH
66681: LD_INT 1
66683: ARRAY
66684: PUSH
66685: LD_INT 2
66687: ARRAY
66688: EQUAL
66689: AND
66690: PUSH
66691: LD_VAR 0 5
66695: PUSH
66696: LD_VAR 0 1
66700: PPUSH
66701: CALL_OW 437
66705: PUSH
66706: LD_INT 1
66708: ARRAY
66709: PUSH
66710: LD_INT 3
66712: ARRAY
66713: EQUAL
66714: AND
66715: IFFALSE 66725
// result := true end ;
66717: LD_ADDR_VAR 0 3
66721: PUSH
66722: LD_INT 1
66724: ST_TO_ADDR
// end ;
66725: LD_VAR 0 3
66729: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66730: LD_INT 0
66732: PPUSH
// result := false ;
66733: LD_ADDR_VAR 0 4
66737: PUSH
66738: LD_INT 0
66740: ST_TO_ADDR
// if GetTaskList ( unit ) then
66741: LD_VAR 0 1
66745: PPUSH
66746: CALL_OW 437
66750: IFFALSE 66833
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66752: LD_STRING M
66754: PUSH
66755: LD_VAR 0 1
66759: PPUSH
66760: CALL_OW 437
66764: PUSH
66765: LD_INT 1
66767: ARRAY
66768: PUSH
66769: LD_INT 1
66771: ARRAY
66772: EQUAL
66773: PUSH
66774: LD_VAR 0 2
66778: PUSH
66779: LD_VAR 0 1
66783: PPUSH
66784: CALL_OW 437
66788: PUSH
66789: LD_INT 1
66791: ARRAY
66792: PUSH
66793: LD_INT 2
66795: ARRAY
66796: EQUAL
66797: AND
66798: PUSH
66799: LD_VAR 0 3
66803: PUSH
66804: LD_VAR 0 1
66808: PPUSH
66809: CALL_OW 437
66813: PUSH
66814: LD_INT 1
66816: ARRAY
66817: PUSH
66818: LD_INT 3
66820: ARRAY
66821: EQUAL
66822: AND
66823: IFFALSE 66833
// result := true ;
66825: LD_ADDR_VAR 0 4
66829: PUSH
66830: LD_INT 1
66832: ST_TO_ADDR
// end ; end ;
66833: LD_VAR 0 4
66837: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66838: LD_INT 0
66840: PPUSH
66841: PPUSH
66842: PPUSH
66843: PPUSH
// if not unit or not area then
66844: LD_VAR 0 1
66848: NOT
66849: PUSH
66850: LD_VAR 0 2
66854: NOT
66855: OR
66856: IFFALSE 66860
// exit ;
66858: GO 67024
// tmp := AreaToList ( area , i ) ;
66860: LD_ADDR_VAR 0 6
66864: PUSH
66865: LD_VAR 0 2
66869: PPUSH
66870: LD_VAR 0 5
66874: PPUSH
66875: CALL_OW 517
66879: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66880: LD_ADDR_VAR 0 5
66884: PUSH
66885: DOUBLE
66886: LD_INT 1
66888: DEC
66889: ST_TO_ADDR
66890: LD_VAR 0 6
66894: PUSH
66895: LD_INT 1
66897: ARRAY
66898: PUSH
66899: FOR_TO
66900: IFFALSE 67022
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66902: LD_ADDR_VAR 0 7
66906: PUSH
66907: LD_VAR 0 6
66911: PUSH
66912: LD_INT 1
66914: ARRAY
66915: PUSH
66916: LD_VAR 0 5
66920: ARRAY
66921: PUSH
66922: LD_VAR 0 6
66926: PUSH
66927: LD_INT 2
66929: ARRAY
66930: PUSH
66931: LD_VAR 0 5
66935: ARRAY
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66941: LD_VAR 0 7
66945: PUSH
66946: LD_INT 1
66948: ARRAY
66949: PPUSH
66950: LD_VAR 0 7
66954: PUSH
66955: LD_INT 2
66957: ARRAY
66958: PPUSH
66959: CALL_OW 428
66963: PUSH
66964: LD_INT 0
66966: EQUAL
66967: IFFALSE 67020
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66969: LD_VAR 0 1
66973: PPUSH
66974: LD_VAR 0 7
66978: PUSH
66979: LD_INT 1
66981: ARRAY
66982: PPUSH
66983: LD_VAR 0 7
66987: PUSH
66988: LD_INT 2
66990: ARRAY
66991: PPUSH
66992: LD_VAR 0 3
66996: PPUSH
66997: CALL_OW 48
// result := IsPlaced ( unit ) ;
67001: LD_ADDR_VAR 0 4
67005: PUSH
67006: LD_VAR 0 1
67010: PPUSH
67011: CALL_OW 305
67015: ST_TO_ADDR
// exit ;
67016: POP
67017: POP
67018: GO 67024
// end ; end ;
67020: GO 66899
67022: POP
67023: POP
// end ;
67024: LD_VAR 0 4
67028: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67029: LD_INT 0
67031: PPUSH
67032: PPUSH
67033: PPUSH
// if not side or side > 8 then
67034: LD_VAR 0 1
67038: NOT
67039: PUSH
67040: LD_VAR 0 1
67044: PUSH
67045: LD_INT 8
67047: GREATER
67048: OR
67049: IFFALSE 67053
// exit ;
67051: GO 67240
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67053: LD_ADDR_VAR 0 4
67057: PUSH
67058: LD_INT 22
67060: PUSH
67061: LD_VAR 0 1
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 21
67072: PUSH
67073: LD_INT 3
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PPUSH
67084: CALL_OW 69
67088: ST_TO_ADDR
// if not tmp then
67089: LD_VAR 0 4
67093: NOT
67094: IFFALSE 67098
// exit ;
67096: GO 67240
// enable_addtolog := true ;
67098: LD_ADDR_OWVAR 81
67102: PUSH
67103: LD_INT 1
67105: ST_TO_ADDR
// AddToLog ( [ ) ;
67106: LD_STRING [
67108: PPUSH
67109: CALL_OW 561
// for i in tmp do
67113: LD_ADDR_VAR 0 3
67117: PUSH
67118: LD_VAR 0 4
67122: PUSH
67123: FOR_IN
67124: IFFALSE 67231
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67126: LD_STRING [
67128: PUSH
67129: LD_VAR 0 3
67133: PPUSH
67134: CALL_OW 266
67138: STR
67139: PUSH
67140: LD_STRING , 
67142: STR
67143: PUSH
67144: LD_VAR 0 3
67148: PPUSH
67149: CALL_OW 250
67153: STR
67154: PUSH
67155: LD_STRING , 
67157: STR
67158: PUSH
67159: LD_VAR 0 3
67163: PPUSH
67164: CALL_OW 251
67168: STR
67169: PUSH
67170: LD_STRING , 
67172: STR
67173: PUSH
67174: LD_VAR 0 3
67178: PPUSH
67179: CALL_OW 254
67183: STR
67184: PUSH
67185: LD_STRING , 
67187: STR
67188: PUSH
67189: LD_VAR 0 3
67193: PPUSH
67194: LD_INT 1
67196: PPUSH
67197: CALL_OW 268
67201: STR
67202: PUSH
67203: LD_STRING , 
67205: STR
67206: PUSH
67207: LD_VAR 0 3
67211: PPUSH
67212: LD_INT 2
67214: PPUSH
67215: CALL_OW 268
67219: STR
67220: PUSH
67221: LD_STRING ],
67223: STR
67224: PPUSH
67225: CALL_OW 561
// end ;
67229: GO 67123
67231: POP
67232: POP
// AddToLog ( ]; ) ;
67233: LD_STRING ];
67235: PPUSH
67236: CALL_OW 561
// end ;
67240: LD_VAR 0 2
67244: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67245: LD_INT 0
67247: PPUSH
67248: PPUSH
67249: PPUSH
67250: PPUSH
67251: PPUSH
// if not area or not rate or not max then
67252: LD_VAR 0 1
67256: NOT
67257: PUSH
67258: LD_VAR 0 2
67262: NOT
67263: OR
67264: PUSH
67265: LD_VAR 0 4
67269: NOT
67270: OR
67271: IFFALSE 67275
// exit ;
67273: GO 67464
// while 1 do
67275: LD_INT 1
67277: IFFALSE 67464
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67279: LD_ADDR_VAR 0 9
67283: PUSH
67284: LD_VAR 0 1
67288: PPUSH
67289: LD_INT 1
67291: PPUSH
67292: CALL_OW 287
67296: PUSH
67297: LD_INT 10
67299: MUL
67300: ST_TO_ADDR
// r := rate / 10 ;
67301: LD_ADDR_VAR 0 7
67305: PUSH
67306: LD_VAR 0 2
67310: PUSH
67311: LD_INT 10
67313: DIVREAL
67314: ST_TO_ADDR
// time := 1 1$00 ;
67315: LD_ADDR_VAR 0 8
67319: PUSH
67320: LD_INT 2100
67322: ST_TO_ADDR
// if amount < min then
67323: LD_VAR 0 9
67327: PUSH
67328: LD_VAR 0 3
67332: LESS
67333: IFFALSE 67351
// r := r * 2 else
67335: LD_ADDR_VAR 0 7
67339: PUSH
67340: LD_VAR 0 7
67344: PUSH
67345: LD_INT 2
67347: MUL
67348: ST_TO_ADDR
67349: GO 67377
// if amount > max then
67351: LD_VAR 0 9
67355: PUSH
67356: LD_VAR 0 4
67360: GREATER
67361: IFFALSE 67377
// r := r / 2 ;
67363: LD_ADDR_VAR 0 7
67367: PUSH
67368: LD_VAR 0 7
67372: PUSH
67373: LD_INT 2
67375: DIVREAL
67376: ST_TO_ADDR
// time := time / r ;
67377: LD_ADDR_VAR 0 8
67381: PUSH
67382: LD_VAR 0 8
67386: PUSH
67387: LD_VAR 0 7
67391: DIVREAL
67392: ST_TO_ADDR
// if time < 0 then
67393: LD_VAR 0 8
67397: PUSH
67398: LD_INT 0
67400: LESS
67401: IFFALSE 67418
// time := time * - 1 ;
67403: LD_ADDR_VAR 0 8
67407: PUSH
67408: LD_VAR 0 8
67412: PUSH
67413: LD_INT 1
67415: NEG
67416: MUL
67417: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67418: LD_VAR 0 8
67422: PUSH
67423: LD_INT 35
67425: PPUSH
67426: LD_INT 875
67428: PPUSH
67429: CALL_OW 12
67433: PLUS
67434: PPUSH
67435: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67439: LD_INT 1
67441: PPUSH
67442: LD_INT 5
67444: PPUSH
67445: CALL_OW 12
67449: PPUSH
67450: LD_VAR 0 1
67454: PPUSH
67455: LD_INT 1
67457: PPUSH
67458: CALL_OW 55
// end ;
67462: GO 67275
// end ;
67464: LD_VAR 0 5
67468: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67469: LD_INT 0
67471: PPUSH
67472: PPUSH
67473: PPUSH
67474: PPUSH
67475: PPUSH
67476: PPUSH
67477: PPUSH
67478: PPUSH
// if not turrets or not factories then
67479: LD_VAR 0 1
67483: NOT
67484: PUSH
67485: LD_VAR 0 2
67489: NOT
67490: OR
67491: IFFALSE 67495
// exit ;
67493: GO 67802
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67495: LD_ADDR_VAR 0 10
67499: PUSH
67500: LD_INT 5
67502: PUSH
67503: LD_INT 6
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 2
67512: PUSH
67513: LD_INT 4
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 3
67522: PUSH
67523: LD_INT 5
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 24
67537: PUSH
67538: LD_INT 25
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 23
67547: PUSH
67548: LD_INT 27
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 42
67561: PUSH
67562: LD_INT 43
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 44
67571: PUSH
67572: LD_INT 46
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 45
67581: PUSH
67582: LD_INT 47
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: LIST
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: LIST
67598: ST_TO_ADDR
// result := [ ] ;
67599: LD_ADDR_VAR 0 3
67603: PUSH
67604: EMPTY
67605: ST_TO_ADDR
// for i in turrets do
67606: LD_ADDR_VAR 0 4
67610: PUSH
67611: LD_VAR 0 1
67615: PUSH
67616: FOR_IN
67617: IFFALSE 67800
// begin nat := GetNation ( i ) ;
67619: LD_ADDR_VAR 0 7
67623: PUSH
67624: LD_VAR 0 4
67628: PPUSH
67629: CALL_OW 248
67633: ST_TO_ADDR
// weapon := 0 ;
67634: LD_ADDR_VAR 0 8
67638: PUSH
67639: LD_INT 0
67641: ST_TO_ADDR
// if not nat then
67642: LD_VAR 0 7
67646: NOT
67647: IFFALSE 67651
// continue ;
67649: GO 67616
// for j in list [ nat ] do
67651: LD_ADDR_VAR 0 5
67655: PUSH
67656: LD_VAR 0 10
67660: PUSH
67661: LD_VAR 0 7
67665: ARRAY
67666: PUSH
67667: FOR_IN
67668: IFFALSE 67709
// if GetBWeapon ( i ) = j [ 1 ] then
67670: LD_VAR 0 4
67674: PPUSH
67675: CALL_OW 269
67679: PUSH
67680: LD_VAR 0 5
67684: PUSH
67685: LD_INT 1
67687: ARRAY
67688: EQUAL
67689: IFFALSE 67707
// begin weapon := j [ 2 ] ;
67691: LD_ADDR_VAR 0 8
67695: PUSH
67696: LD_VAR 0 5
67700: PUSH
67701: LD_INT 2
67703: ARRAY
67704: ST_TO_ADDR
// break ;
67705: GO 67709
// end ;
67707: GO 67667
67709: POP
67710: POP
// if not weapon then
67711: LD_VAR 0 8
67715: NOT
67716: IFFALSE 67720
// continue ;
67718: GO 67616
// for k in factories do
67720: LD_ADDR_VAR 0 6
67724: PUSH
67725: LD_VAR 0 2
67729: PUSH
67730: FOR_IN
67731: IFFALSE 67796
// begin weapons := AvailableWeaponList ( k ) ;
67733: LD_ADDR_VAR 0 9
67737: PUSH
67738: LD_VAR 0 6
67742: PPUSH
67743: CALL_OW 478
67747: ST_TO_ADDR
// if not weapons then
67748: LD_VAR 0 9
67752: NOT
67753: IFFALSE 67757
// continue ;
67755: GO 67730
// if weapon in weapons then
67757: LD_VAR 0 8
67761: PUSH
67762: LD_VAR 0 9
67766: IN
67767: IFFALSE 67794
// begin result := [ i , weapon ] ;
67769: LD_ADDR_VAR 0 3
67773: PUSH
67774: LD_VAR 0 4
67778: PUSH
67779: LD_VAR 0 8
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: ST_TO_ADDR
// exit ;
67788: POP
67789: POP
67790: POP
67791: POP
67792: GO 67802
// end ; end ;
67794: GO 67730
67796: POP
67797: POP
// end ;
67798: GO 67616
67800: POP
67801: POP
// end ;
67802: LD_VAR 0 3
67806: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67807: LD_INT 0
67809: PPUSH
// if not side or side > 8 then
67810: LD_VAR 0 3
67814: NOT
67815: PUSH
67816: LD_VAR 0 3
67820: PUSH
67821: LD_INT 8
67823: GREATER
67824: OR
67825: IFFALSE 67829
// exit ;
67827: GO 67888
// if not range then
67829: LD_VAR 0 4
67833: NOT
67834: IFFALSE 67845
// range := - 12 ;
67836: LD_ADDR_VAR 0 4
67840: PUSH
67841: LD_INT 12
67843: NEG
67844: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67845: LD_VAR 0 1
67849: PPUSH
67850: LD_VAR 0 2
67854: PPUSH
67855: LD_VAR 0 3
67859: PPUSH
67860: LD_VAR 0 4
67864: PPUSH
67865: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67869: LD_VAR 0 1
67873: PPUSH
67874: LD_VAR 0 2
67878: PPUSH
67879: LD_VAR 0 3
67883: PPUSH
67884: CALL_OW 331
// end ;
67888: LD_VAR 0 5
67892: RET
// export function Video ( mode ) ; begin
67893: LD_INT 0
67895: PPUSH
// ingame_video = mode ;
67896: LD_ADDR_OWVAR 52
67900: PUSH
67901: LD_VAR 0 1
67905: ST_TO_ADDR
// interface_hidden = mode ;
67906: LD_ADDR_OWVAR 54
67910: PUSH
67911: LD_VAR 0 1
67915: ST_TO_ADDR
// end ;
67916: LD_VAR 0 2
67920: RET
// export function Join ( array , element ) ; begin
67921: LD_INT 0
67923: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67924: LD_ADDR_VAR 0 3
67928: PUSH
67929: LD_VAR 0 1
67933: PPUSH
67934: LD_VAR 0 1
67938: PUSH
67939: LD_INT 1
67941: PLUS
67942: PPUSH
67943: LD_VAR 0 2
67947: PPUSH
67948: CALL_OW 1
67952: ST_TO_ADDR
// end ;
67953: LD_VAR 0 3
67957: RET
// export function JoinUnion ( array , element ) ; begin
67958: LD_INT 0
67960: PPUSH
// result := array union element ;
67961: LD_ADDR_VAR 0 3
67965: PUSH
67966: LD_VAR 0 1
67970: PUSH
67971: LD_VAR 0 2
67975: UNION
67976: ST_TO_ADDR
// end ;
67977: LD_VAR 0 3
67981: RET
// export function GetBehemoths ( side ) ; begin
67982: LD_INT 0
67984: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67985: LD_ADDR_VAR 0 2
67989: PUSH
67990: LD_INT 22
67992: PUSH
67993: LD_VAR 0 1
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 31
68004: PUSH
68005: LD_INT 25
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PPUSH
68016: CALL_OW 69
68020: ST_TO_ADDR
// end ;
68021: LD_VAR 0 2
68025: RET
// export function Shuffle ( array ) ; var i , index ; begin
68026: LD_INT 0
68028: PPUSH
68029: PPUSH
68030: PPUSH
// result := [ ] ;
68031: LD_ADDR_VAR 0 2
68035: PUSH
68036: EMPTY
68037: ST_TO_ADDR
// if not array then
68038: LD_VAR 0 1
68042: NOT
68043: IFFALSE 68047
// exit ;
68045: GO 68146
// Randomize ;
68047: CALL_OW 10
// for i = array downto 1 do
68051: LD_ADDR_VAR 0 3
68055: PUSH
68056: DOUBLE
68057: LD_VAR 0 1
68061: INC
68062: ST_TO_ADDR
68063: LD_INT 1
68065: PUSH
68066: FOR_DOWNTO
68067: IFFALSE 68144
// begin index := rand ( 1 , array ) ;
68069: LD_ADDR_VAR 0 4
68073: PUSH
68074: LD_INT 1
68076: PPUSH
68077: LD_VAR 0 1
68081: PPUSH
68082: CALL_OW 12
68086: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68087: LD_ADDR_VAR 0 2
68091: PUSH
68092: LD_VAR 0 2
68096: PPUSH
68097: LD_VAR 0 2
68101: PUSH
68102: LD_INT 1
68104: PLUS
68105: PPUSH
68106: LD_VAR 0 1
68110: PUSH
68111: LD_VAR 0 4
68115: ARRAY
68116: PPUSH
68117: CALL_OW 2
68121: ST_TO_ADDR
// array := Delete ( array , index ) ;
68122: LD_ADDR_VAR 0 1
68126: PUSH
68127: LD_VAR 0 1
68131: PPUSH
68132: LD_VAR 0 4
68136: PPUSH
68137: CALL_OW 3
68141: ST_TO_ADDR
// end ;
68142: GO 68066
68144: POP
68145: POP
// end ;
68146: LD_VAR 0 2
68150: RET
// export function GetBaseMaterials ( base ) ; begin
68151: LD_INT 0
68153: PPUSH
// result := [ 0 , 0 , 0 ] ;
68154: LD_ADDR_VAR 0 2
68158: PUSH
68159: LD_INT 0
68161: PUSH
68162: LD_INT 0
68164: PUSH
68165: LD_INT 0
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: LIST
68172: ST_TO_ADDR
// if not base then
68173: LD_VAR 0 1
68177: NOT
68178: IFFALSE 68182
// exit ;
68180: GO 68231
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68182: LD_ADDR_VAR 0 2
68186: PUSH
68187: LD_VAR 0 1
68191: PPUSH
68192: LD_INT 1
68194: PPUSH
68195: CALL_OW 275
68199: PUSH
68200: LD_VAR 0 1
68204: PPUSH
68205: LD_INT 2
68207: PPUSH
68208: CALL_OW 275
68212: PUSH
68213: LD_VAR 0 1
68217: PPUSH
68218: LD_INT 3
68220: PPUSH
68221: CALL_OW 275
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: LIST
68230: ST_TO_ADDR
// end ;
68231: LD_VAR 0 2
68235: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68236: LD_INT 0
68238: PPUSH
68239: PPUSH
// result := array ;
68240: LD_ADDR_VAR 0 3
68244: PUSH
68245: LD_VAR 0 1
68249: ST_TO_ADDR
// if size >= result then
68250: LD_VAR 0 2
68254: PUSH
68255: LD_VAR 0 3
68259: GREATEREQUAL
68260: IFFALSE 68264
// exit ;
68262: GO 68314
// if size then
68264: LD_VAR 0 2
68268: IFFALSE 68314
// for i := array downto size do
68270: LD_ADDR_VAR 0 4
68274: PUSH
68275: DOUBLE
68276: LD_VAR 0 1
68280: INC
68281: ST_TO_ADDR
68282: LD_VAR 0 2
68286: PUSH
68287: FOR_DOWNTO
68288: IFFALSE 68312
// result := Delete ( result , result ) ;
68290: LD_ADDR_VAR 0 3
68294: PUSH
68295: LD_VAR 0 3
68299: PPUSH
68300: LD_VAR 0 3
68304: PPUSH
68305: CALL_OW 3
68309: ST_TO_ADDR
68310: GO 68287
68312: POP
68313: POP
// end ;
68314: LD_VAR 0 3
68318: RET
// export function ComExit ( unit ) ; var tmp ; begin
68319: LD_INT 0
68321: PPUSH
68322: PPUSH
// if not IsInUnit ( unit ) then
68323: LD_VAR 0 1
68327: PPUSH
68328: CALL_OW 310
68332: NOT
68333: IFFALSE 68337
// exit ;
68335: GO 68397
// tmp := IsInUnit ( unit ) ;
68337: LD_ADDR_VAR 0 3
68341: PUSH
68342: LD_VAR 0 1
68346: PPUSH
68347: CALL_OW 310
68351: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68352: LD_VAR 0 3
68356: PPUSH
68357: CALL_OW 247
68361: PUSH
68362: LD_INT 2
68364: EQUAL
68365: IFFALSE 68378
// ComExitVehicle ( unit ) else
68367: LD_VAR 0 1
68371: PPUSH
68372: CALL_OW 121
68376: GO 68387
// ComExitBuilding ( unit ) ;
68378: LD_VAR 0 1
68382: PPUSH
68383: CALL_OW 122
// result := tmp ;
68387: LD_ADDR_VAR 0 2
68391: PUSH
68392: LD_VAR 0 3
68396: ST_TO_ADDR
// end ;
68397: LD_VAR 0 2
68401: RET
// export function ComExitAll ( units ) ; var i ; begin
68402: LD_INT 0
68404: PPUSH
68405: PPUSH
// if not units then
68406: LD_VAR 0 1
68410: NOT
68411: IFFALSE 68415
// exit ;
68413: GO 68441
// for i in units do
68415: LD_ADDR_VAR 0 3
68419: PUSH
68420: LD_VAR 0 1
68424: PUSH
68425: FOR_IN
68426: IFFALSE 68439
// ComExit ( i ) ;
68428: LD_VAR 0 3
68432: PPUSH
68433: CALL 68319 0 1
68437: GO 68425
68439: POP
68440: POP
// end ;
68441: LD_VAR 0 2
68445: RET
// export function ResetHc ; begin
68446: LD_INT 0
68448: PPUSH
// InitHc ;
68449: CALL_OW 19
// hc_importance := 0 ;
68453: LD_ADDR_OWVAR 32
68457: PUSH
68458: LD_INT 0
68460: ST_TO_ADDR
// end ;
68461: LD_VAR 0 1
68465: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68466: LD_INT 0
68468: PPUSH
68469: PPUSH
68470: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68471: LD_ADDR_VAR 0 6
68475: PUSH
68476: LD_VAR 0 1
68480: PUSH
68481: LD_VAR 0 3
68485: PLUS
68486: PUSH
68487: LD_INT 2
68489: DIV
68490: ST_TO_ADDR
// if _x < 0 then
68491: LD_VAR 0 6
68495: PUSH
68496: LD_INT 0
68498: LESS
68499: IFFALSE 68516
// _x := _x * - 1 ;
68501: LD_ADDR_VAR 0 6
68505: PUSH
68506: LD_VAR 0 6
68510: PUSH
68511: LD_INT 1
68513: NEG
68514: MUL
68515: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68516: LD_ADDR_VAR 0 7
68520: PUSH
68521: LD_VAR 0 2
68525: PUSH
68526: LD_VAR 0 4
68530: PLUS
68531: PUSH
68532: LD_INT 2
68534: DIV
68535: ST_TO_ADDR
// if _y < 0 then
68536: LD_VAR 0 7
68540: PUSH
68541: LD_INT 0
68543: LESS
68544: IFFALSE 68561
// _y := _y * - 1 ;
68546: LD_ADDR_VAR 0 7
68550: PUSH
68551: LD_VAR 0 7
68555: PUSH
68556: LD_INT 1
68558: NEG
68559: MUL
68560: ST_TO_ADDR
// result := [ _x , _y ] ;
68561: LD_ADDR_VAR 0 5
68565: PUSH
68566: LD_VAR 0 6
68570: PUSH
68571: LD_VAR 0 7
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: ST_TO_ADDR
// end ;
68580: LD_VAR 0 5
68584: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68585: LD_INT 0
68587: PPUSH
68588: PPUSH
68589: PPUSH
68590: PPUSH
// task := GetTaskList ( unit ) ;
68591: LD_ADDR_VAR 0 7
68595: PUSH
68596: LD_VAR 0 1
68600: PPUSH
68601: CALL_OW 437
68605: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68606: LD_VAR 0 7
68610: NOT
68611: PUSH
68612: LD_VAR 0 1
68616: PPUSH
68617: LD_VAR 0 2
68621: PPUSH
68622: CALL_OW 308
68626: NOT
68627: AND
68628: IFFALSE 68632
// exit ;
68630: GO 68750
// if IsInArea ( unit , area ) then
68632: LD_VAR 0 1
68636: PPUSH
68637: LD_VAR 0 2
68641: PPUSH
68642: CALL_OW 308
68646: IFFALSE 68664
// begin ComMoveToArea ( unit , goAway ) ;
68648: LD_VAR 0 1
68652: PPUSH
68653: LD_VAR 0 3
68657: PPUSH
68658: CALL_OW 113
// exit ;
68662: GO 68750
// end ; if task [ 1 ] [ 1 ] <> M then
68664: LD_VAR 0 7
68668: PUSH
68669: LD_INT 1
68671: ARRAY
68672: PUSH
68673: LD_INT 1
68675: ARRAY
68676: PUSH
68677: LD_STRING M
68679: NONEQUAL
68680: IFFALSE 68684
// exit ;
68682: GO 68750
// x := task [ 1 ] [ 2 ] ;
68684: LD_ADDR_VAR 0 5
68688: PUSH
68689: LD_VAR 0 7
68693: PUSH
68694: LD_INT 1
68696: ARRAY
68697: PUSH
68698: LD_INT 2
68700: ARRAY
68701: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68702: LD_ADDR_VAR 0 6
68706: PUSH
68707: LD_VAR 0 7
68711: PUSH
68712: LD_INT 1
68714: ARRAY
68715: PUSH
68716: LD_INT 3
68718: ARRAY
68719: ST_TO_ADDR
// if InArea ( x , y , area ) then
68720: LD_VAR 0 5
68724: PPUSH
68725: LD_VAR 0 6
68729: PPUSH
68730: LD_VAR 0 2
68734: PPUSH
68735: CALL_OW 309
68739: IFFALSE 68750
// ComStop ( unit ) ;
68741: LD_VAR 0 1
68745: PPUSH
68746: CALL_OW 141
// end ;
68750: LD_VAR 0 4
68754: RET
// export function Abs ( value ) ; begin
68755: LD_INT 0
68757: PPUSH
// result := value ;
68758: LD_ADDR_VAR 0 2
68762: PUSH
68763: LD_VAR 0 1
68767: ST_TO_ADDR
// if value < 0 then
68768: LD_VAR 0 1
68772: PUSH
68773: LD_INT 0
68775: LESS
68776: IFFALSE 68793
// result := value * - 1 ;
68778: LD_ADDR_VAR 0 2
68782: PUSH
68783: LD_VAR 0 1
68787: PUSH
68788: LD_INT 1
68790: NEG
68791: MUL
68792: ST_TO_ADDR
// end ;
68793: LD_VAR 0 2
68797: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68798: LD_INT 0
68800: PPUSH
68801: PPUSH
68802: PPUSH
68803: PPUSH
68804: PPUSH
68805: PPUSH
68806: PPUSH
68807: PPUSH
// if not unit or not building then
68808: LD_VAR 0 1
68812: NOT
68813: PUSH
68814: LD_VAR 0 2
68818: NOT
68819: OR
68820: IFFALSE 68824
// exit ;
68822: GO 69050
// x := GetX ( building ) ;
68824: LD_ADDR_VAR 0 4
68828: PUSH
68829: LD_VAR 0 2
68833: PPUSH
68834: CALL_OW 250
68838: ST_TO_ADDR
// y := GetY ( building ) ;
68839: LD_ADDR_VAR 0 6
68843: PUSH
68844: LD_VAR 0 2
68848: PPUSH
68849: CALL_OW 251
68853: ST_TO_ADDR
// d := GetDir ( building ) ;
68854: LD_ADDR_VAR 0 8
68858: PUSH
68859: LD_VAR 0 2
68863: PPUSH
68864: CALL_OW 254
68868: ST_TO_ADDR
// r := 4 ;
68869: LD_ADDR_VAR 0 9
68873: PUSH
68874: LD_INT 4
68876: ST_TO_ADDR
// for i := 1 to 5 do
68877: LD_ADDR_VAR 0 10
68881: PUSH
68882: DOUBLE
68883: LD_INT 1
68885: DEC
68886: ST_TO_ADDR
68887: LD_INT 5
68889: PUSH
68890: FOR_TO
68891: IFFALSE 69048
// begin _x := ShiftX ( x , d , r + i ) ;
68893: LD_ADDR_VAR 0 5
68897: PUSH
68898: LD_VAR 0 4
68902: PPUSH
68903: LD_VAR 0 8
68907: PPUSH
68908: LD_VAR 0 9
68912: PUSH
68913: LD_VAR 0 10
68917: PLUS
68918: PPUSH
68919: CALL_OW 272
68923: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68924: LD_ADDR_VAR 0 7
68928: PUSH
68929: LD_VAR 0 6
68933: PPUSH
68934: LD_VAR 0 8
68938: PPUSH
68939: LD_VAR 0 9
68943: PUSH
68944: LD_VAR 0 10
68948: PLUS
68949: PPUSH
68950: CALL_OW 273
68954: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68955: LD_VAR 0 5
68959: PPUSH
68960: LD_VAR 0 7
68964: PPUSH
68965: CALL_OW 488
68969: PUSH
68970: LD_VAR 0 5
68974: PPUSH
68975: LD_VAR 0 7
68979: PPUSH
68980: CALL_OW 428
68984: PPUSH
68985: CALL_OW 247
68989: PUSH
68990: LD_INT 3
68992: PUSH
68993: LD_INT 2
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: IN
69000: NOT
69001: AND
69002: IFFALSE 69046
// begin ComMoveXY ( unit , _x , _y ) ;
69004: LD_VAR 0 1
69008: PPUSH
69009: LD_VAR 0 5
69013: PPUSH
69014: LD_VAR 0 7
69018: PPUSH
69019: CALL_OW 111
// result := [ _x , _y ] ;
69023: LD_ADDR_VAR 0 3
69027: PUSH
69028: LD_VAR 0 5
69032: PUSH
69033: LD_VAR 0 7
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: ST_TO_ADDR
// exit ;
69042: POP
69043: POP
69044: GO 69050
// end ; end ;
69046: GO 68890
69048: POP
69049: POP
// end ;
69050: LD_VAR 0 3
69054: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69055: LD_INT 0
69057: PPUSH
69058: PPUSH
69059: PPUSH
// result := 0 ;
69060: LD_ADDR_VAR 0 3
69064: PUSH
69065: LD_INT 0
69067: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69068: LD_VAR 0 1
69072: PUSH
69073: LD_INT 0
69075: LESS
69076: PUSH
69077: LD_VAR 0 1
69081: PUSH
69082: LD_INT 8
69084: GREATER
69085: OR
69086: PUSH
69087: LD_VAR 0 2
69091: PUSH
69092: LD_INT 0
69094: LESS
69095: OR
69096: PUSH
69097: LD_VAR 0 2
69101: PUSH
69102: LD_INT 8
69104: GREATER
69105: OR
69106: IFFALSE 69110
// exit ;
69108: GO 69185
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69110: LD_ADDR_VAR 0 4
69114: PUSH
69115: LD_INT 22
69117: PUSH
69118: LD_VAR 0 2
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PPUSH
69127: CALL_OW 69
69131: PUSH
69132: FOR_IN
69133: IFFALSE 69183
// begin un := UnitShoot ( i ) ;
69135: LD_ADDR_VAR 0 5
69139: PUSH
69140: LD_VAR 0 4
69144: PPUSH
69145: CALL_OW 504
69149: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69150: LD_VAR 0 5
69154: PPUSH
69155: CALL_OW 255
69159: PUSH
69160: LD_VAR 0 1
69164: EQUAL
69165: IFFALSE 69181
// begin result := un ;
69167: LD_ADDR_VAR 0 3
69171: PUSH
69172: LD_VAR 0 5
69176: ST_TO_ADDR
// exit ;
69177: POP
69178: POP
69179: GO 69185
// end ; end ;
69181: GO 69132
69183: POP
69184: POP
// end ;
69185: LD_VAR 0 3
69189: RET
// export function GetCargoBay ( units ) ; begin
69190: LD_INT 0
69192: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69193: LD_ADDR_VAR 0 2
69197: PUSH
69198: LD_VAR 0 1
69202: PPUSH
69203: LD_INT 2
69205: PUSH
69206: LD_INT 34
69208: PUSH
69209: LD_INT 12
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 34
69218: PUSH
69219: LD_INT 51
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 34
69228: PUSH
69229: LD_INT 32
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 34
69238: PUSH
69239: LD_INT 89
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: PPUSH
69253: CALL_OW 72
69257: ST_TO_ADDR
// end ;
69258: LD_VAR 0 2
69262: RET
// export function Negate ( value ) ; begin
69263: LD_INT 0
69265: PPUSH
// result := not value ;
69266: LD_ADDR_VAR 0 2
69270: PUSH
69271: LD_VAR 0 1
69275: NOT
69276: ST_TO_ADDR
// end ;
69277: LD_VAR 0 2
69281: RET
// export function Inc ( value ) ; begin
69282: LD_INT 0
69284: PPUSH
// result := value + 1 ;
69285: LD_ADDR_VAR 0 2
69289: PUSH
69290: LD_VAR 0 1
69294: PUSH
69295: LD_INT 1
69297: PLUS
69298: ST_TO_ADDR
// end ;
69299: LD_VAR 0 2
69303: RET
// export function Dec ( value ) ; begin
69304: LD_INT 0
69306: PPUSH
// result := value - 1 ;
69307: LD_ADDR_VAR 0 2
69311: PUSH
69312: LD_VAR 0 1
69316: PUSH
69317: LD_INT 1
69319: MINUS
69320: ST_TO_ADDR
// end ;
69321: LD_VAR 0 2
69325: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69326: LD_INT 0
69328: PPUSH
69329: PPUSH
69330: PPUSH
69331: PPUSH
69332: PPUSH
69333: PPUSH
69334: PPUSH
69335: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69336: LD_VAR 0 1
69340: PPUSH
69341: LD_VAR 0 2
69345: PPUSH
69346: CALL_OW 488
69350: NOT
69351: PUSH
69352: LD_VAR 0 3
69356: PPUSH
69357: LD_VAR 0 4
69361: PPUSH
69362: CALL_OW 488
69366: NOT
69367: OR
69368: IFFALSE 69381
// begin result := - 1 ;
69370: LD_ADDR_VAR 0 5
69374: PUSH
69375: LD_INT 1
69377: NEG
69378: ST_TO_ADDR
// exit ;
69379: GO 69616
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69381: LD_ADDR_VAR 0 12
69385: PUSH
69386: LD_VAR 0 1
69390: PPUSH
69391: LD_VAR 0 2
69395: PPUSH
69396: LD_VAR 0 3
69400: PPUSH
69401: LD_VAR 0 4
69405: PPUSH
69406: CALL 68466 0 4
69410: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69411: LD_ADDR_VAR 0 11
69415: PUSH
69416: LD_VAR 0 1
69420: PPUSH
69421: LD_VAR 0 2
69425: PPUSH
69426: LD_VAR 0 12
69430: PUSH
69431: LD_INT 1
69433: ARRAY
69434: PPUSH
69435: LD_VAR 0 12
69439: PUSH
69440: LD_INT 2
69442: ARRAY
69443: PPUSH
69444: CALL_OW 298
69448: ST_TO_ADDR
// distance := 9999 ;
69449: LD_ADDR_VAR 0 10
69453: PUSH
69454: LD_INT 9999
69456: ST_TO_ADDR
// for i := 0 to 5 do
69457: LD_ADDR_VAR 0 6
69461: PUSH
69462: DOUBLE
69463: LD_INT 0
69465: DEC
69466: ST_TO_ADDR
69467: LD_INT 5
69469: PUSH
69470: FOR_TO
69471: IFFALSE 69614
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69473: LD_ADDR_VAR 0 7
69477: PUSH
69478: LD_VAR 0 1
69482: PPUSH
69483: LD_VAR 0 6
69487: PPUSH
69488: LD_VAR 0 11
69492: PPUSH
69493: CALL_OW 272
69497: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69498: LD_ADDR_VAR 0 8
69502: PUSH
69503: LD_VAR 0 2
69507: PPUSH
69508: LD_VAR 0 6
69512: PPUSH
69513: LD_VAR 0 11
69517: PPUSH
69518: CALL_OW 273
69522: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69523: LD_VAR 0 7
69527: PPUSH
69528: LD_VAR 0 8
69532: PPUSH
69533: CALL_OW 488
69537: NOT
69538: IFFALSE 69542
// continue ;
69540: GO 69470
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69542: LD_ADDR_VAR 0 9
69546: PUSH
69547: LD_VAR 0 12
69551: PUSH
69552: LD_INT 1
69554: ARRAY
69555: PPUSH
69556: LD_VAR 0 12
69560: PUSH
69561: LD_INT 2
69563: ARRAY
69564: PPUSH
69565: LD_VAR 0 7
69569: PPUSH
69570: LD_VAR 0 8
69574: PPUSH
69575: CALL_OW 298
69579: ST_TO_ADDR
// if tmp < distance then
69580: LD_VAR 0 9
69584: PUSH
69585: LD_VAR 0 10
69589: LESS
69590: IFFALSE 69612
// begin result := i ;
69592: LD_ADDR_VAR 0 5
69596: PUSH
69597: LD_VAR 0 6
69601: ST_TO_ADDR
// distance := tmp ;
69602: LD_ADDR_VAR 0 10
69606: PUSH
69607: LD_VAR 0 9
69611: ST_TO_ADDR
// end ; end ;
69612: GO 69470
69614: POP
69615: POP
// end ;
69616: LD_VAR 0 5
69620: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69621: LD_INT 0
69623: PPUSH
69624: PPUSH
// if not driver or not IsInUnit ( driver ) then
69625: LD_VAR 0 1
69629: NOT
69630: PUSH
69631: LD_VAR 0 1
69635: PPUSH
69636: CALL_OW 310
69640: NOT
69641: OR
69642: IFFALSE 69646
// exit ;
69644: GO 69736
// vehicle := IsInUnit ( driver ) ;
69646: LD_ADDR_VAR 0 3
69650: PUSH
69651: LD_VAR 0 1
69655: PPUSH
69656: CALL_OW 310
69660: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69661: LD_VAR 0 1
69665: PPUSH
69666: LD_STRING \
69668: PUSH
69669: LD_INT 0
69671: PUSH
69672: LD_INT 0
69674: PUSH
69675: LD_INT 0
69677: PUSH
69678: LD_INT 0
69680: PUSH
69681: LD_INT 0
69683: PUSH
69684: LD_INT 0
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: PUSH
69696: LD_STRING E
69698: PUSH
69699: LD_INT 0
69701: PUSH
69702: LD_INT 0
69704: PUSH
69705: LD_VAR 0 3
69709: PUSH
69710: LD_INT 0
69712: PUSH
69713: LD_INT 0
69715: PUSH
69716: LD_INT 0
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PPUSH
69732: CALL_OW 446
// end ;
69736: LD_VAR 0 2
69740: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69741: LD_INT 0
69743: PPUSH
69744: PPUSH
// if not driver or not IsInUnit ( driver ) then
69745: LD_VAR 0 1
69749: NOT
69750: PUSH
69751: LD_VAR 0 1
69755: PPUSH
69756: CALL_OW 310
69760: NOT
69761: OR
69762: IFFALSE 69766
// exit ;
69764: GO 69856
// vehicle := IsInUnit ( driver ) ;
69766: LD_ADDR_VAR 0 3
69770: PUSH
69771: LD_VAR 0 1
69775: PPUSH
69776: CALL_OW 310
69780: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69781: LD_VAR 0 1
69785: PPUSH
69786: LD_STRING \
69788: PUSH
69789: LD_INT 0
69791: PUSH
69792: LD_INT 0
69794: PUSH
69795: LD_INT 0
69797: PUSH
69798: LD_INT 0
69800: PUSH
69801: LD_INT 0
69803: PUSH
69804: LD_INT 0
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: PUSH
69816: LD_STRING E
69818: PUSH
69819: LD_INT 0
69821: PUSH
69822: LD_INT 0
69824: PUSH
69825: LD_VAR 0 3
69829: PUSH
69830: LD_INT 0
69832: PUSH
69833: LD_INT 0
69835: PUSH
69836: LD_INT 0
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PPUSH
69852: CALL_OW 447
// end ;
69856: LD_VAR 0 2
69860: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69861: LD_INT 0
69863: PPUSH
69864: PPUSH
69865: PPUSH
// tmp := [ ] ;
69866: LD_ADDR_VAR 0 5
69870: PUSH
69871: EMPTY
69872: ST_TO_ADDR
// for i in units do
69873: LD_ADDR_VAR 0 4
69877: PUSH
69878: LD_VAR 0 1
69882: PUSH
69883: FOR_IN
69884: IFFALSE 69922
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69886: LD_ADDR_VAR 0 5
69890: PUSH
69891: LD_VAR 0 5
69895: PPUSH
69896: LD_VAR 0 5
69900: PUSH
69901: LD_INT 1
69903: PLUS
69904: PPUSH
69905: LD_VAR 0 4
69909: PPUSH
69910: CALL_OW 256
69914: PPUSH
69915: CALL_OW 2
69919: ST_TO_ADDR
69920: GO 69883
69922: POP
69923: POP
// if not tmp then
69924: LD_VAR 0 5
69928: NOT
69929: IFFALSE 69933
// exit ;
69931: GO 69981
// if asc then
69933: LD_VAR 0 2
69937: IFFALSE 69961
// result := SortListByListAsc ( units , tmp ) else
69939: LD_ADDR_VAR 0 3
69943: PUSH
69944: LD_VAR 0 1
69948: PPUSH
69949: LD_VAR 0 5
69953: PPUSH
69954: CALL_OW 76
69958: ST_TO_ADDR
69959: GO 69981
// result := SortListByListDesc ( units , tmp ) ;
69961: LD_ADDR_VAR 0 3
69965: PUSH
69966: LD_VAR 0 1
69970: PPUSH
69971: LD_VAR 0 5
69975: PPUSH
69976: CALL_OW 77
69980: ST_TO_ADDR
// end ;
69981: LD_VAR 0 3
69985: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69986: LD_INT 0
69988: PPUSH
69989: PPUSH
// task := GetTaskList ( mech ) ;
69990: LD_ADDR_VAR 0 4
69994: PUSH
69995: LD_VAR 0 1
69999: PPUSH
70000: CALL_OW 437
70004: ST_TO_ADDR
// if not task then
70005: LD_VAR 0 4
70009: NOT
70010: IFFALSE 70014
// exit ;
70012: GO 70056
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70014: LD_ADDR_VAR 0 3
70018: PUSH
70019: LD_VAR 0 4
70023: PUSH
70024: LD_INT 1
70026: ARRAY
70027: PUSH
70028: LD_INT 1
70030: ARRAY
70031: PUSH
70032: LD_STRING r
70034: EQUAL
70035: PUSH
70036: LD_VAR 0 4
70040: PUSH
70041: LD_INT 1
70043: ARRAY
70044: PUSH
70045: LD_INT 4
70047: ARRAY
70048: PUSH
70049: LD_VAR 0 2
70053: EQUAL
70054: AND
70055: ST_TO_ADDR
// end ;
70056: LD_VAR 0 3
70060: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70061: LD_INT 0
70063: PPUSH
// SetDir ( unit , d ) ;
70064: LD_VAR 0 1
70068: PPUSH
70069: LD_VAR 0 4
70073: PPUSH
70074: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70078: LD_VAR 0 1
70082: PPUSH
70083: LD_VAR 0 2
70087: PPUSH
70088: LD_VAR 0 3
70092: PPUSH
70093: LD_VAR 0 5
70097: PPUSH
70098: CALL_OW 48
// end ;
70102: LD_VAR 0 6
70106: RET
// export function ToNaturalNumber ( number ) ; begin
70107: LD_INT 0
70109: PPUSH
// result := number div 1 ;
70110: LD_ADDR_VAR 0 2
70114: PUSH
70115: LD_VAR 0 1
70119: PUSH
70120: LD_INT 1
70122: DIV
70123: ST_TO_ADDR
// if number < 0 then
70124: LD_VAR 0 1
70128: PUSH
70129: LD_INT 0
70131: LESS
70132: IFFALSE 70142
// result := 0 ;
70134: LD_ADDR_VAR 0 2
70138: PUSH
70139: LD_INT 0
70141: ST_TO_ADDR
// end ;
70142: LD_VAR 0 2
70146: RET
// export function SortByClass ( units , class ) ; var un ; begin
70147: LD_INT 0
70149: PPUSH
70150: PPUSH
// if not units or not class then
70151: LD_VAR 0 1
70155: NOT
70156: PUSH
70157: LD_VAR 0 2
70161: NOT
70162: OR
70163: IFFALSE 70167
// exit ;
70165: GO 70262
// result := [ ] ;
70167: LD_ADDR_VAR 0 3
70171: PUSH
70172: EMPTY
70173: ST_TO_ADDR
// for un in units do
70174: LD_ADDR_VAR 0 4
70178: PUSH
70179: LD_VAR 0 1
70183: PUSH
70184: FOR_IN
70185: IFFALSE 70260
// if GetClass ( un ) = class then
70187: LD_VAR 0 4
70191: PPUSH
70192: CALL_OW 257
70196: PUSH
70197: LD_VAR 0 2
70201: EQUAL
70202: IFFALSE 70229
// result := Insert ( result , 1 , un ) else
70204: LD_ADDR_VAR 0 3
70208: PUSH
70209: LD_VAR 0 3
70213: PPUSH
70214: LD_INT 1
70216: PPUSH
70217: LD_VAR 0 4
70221: PPUSH
70222: CALL_OW 2
70226: ST_TO_ADDR
70227: GO 70258
// result := Replace ( result , result + 1 , un ) ;
70229: LD_ADDR_VAR 0 3
70233: PUSH
70234: LD_VAR 0 3
70238: PPUSH
70239: LD_VAR 0 3
70243: PUSH
70244: LD_INT 1
70246: PLUS
70247: PPUSH
70248: LD_VAR 0 4
70252: PPUSH
70253: CALL_OW 1
70257: ST_TO_ADDR
70258: GO 70184
70260: POP
70261: POP
// end ;
70262: LD_VAR 0 3
70266: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70267: LD_INT 0
70269: PPUSH
70270: PPUSH
70271: PPUSH
70272: PPUSH
70273: PPUSH
70274: PPUSH
70275: PPUSH
// result := [ ] ;
70276: LD_ADDR_VAR 0 4
70280: PUSH
70281: EMPTY
70282: ST_TO_ADDR
// if x - r < 0 then
70283: LD_VAR 0 1
70287: PUSH
70288: LD_VAR 0 3
70292: MINUS
70293: PUSH
70294: LD_INT 0
70296: LESS
70297: IFFALSE 70309
// min_x := 0 else
70299: LD_ADDR_VAR 0 8
70303: PUSH
70304: LD_INT 0
70306: ST_TO_ADDR
70307: GO 70325
// min_x := x - r ;
70309: LD_ADDR_VAR 0 8
70313: PUSH
70314: LD_VAR 0 1
70318: PUSH
70319: LD_VAR 0 3
70323: MINUS
70324: ST_TO_ADDR
// if y - r < 0 then
70325: LD_VAR 0 2
70329: PUSH
70330: LD_VAR 0 3
70334: MINUS
70335: PUSH
70336: LD_INT 0
70338: LESS
70339: IFFALSE 70351
// min_y := 0 else
70341: LD_ADDR_VAR 0 7
70345: PUSH
70346: LD_INT 0
70348: ST_TO_ADDR
70349: GO 70367
// min_y := y - r ;
70351: LD_ADDR_VAR 0 7
70355: PUSH
70356: LD_VAR 0 2
70360: PUSH
70361: LD_VAR 0 3
70365: MINUS
70366: ST_TO_ADDR
// max_x := x + r ;
70367: LD_ADDR_VAR 0 9
70371: PUSH
70372: LD_VAR 0 1
70376: PUSH
70377: LD_VAR 0 3
70381: PLUS
70382: ST_TO_ADDR
// max_y := y + r ;
70383: LD_ADDR_VAR 0 10
70387: PUSH
70388: LD_VAR 0 2
70392: PUSH
70393: LD_VAR 0 3
70397: PLUS
70398: ST_TO_ADDR
// for _x = min_x to max_x do
70399: LD_ADDR_VAR 0 5
70403: PUSH
70404: DOUBLE
70405: LD_VAR 0 8
70409: DEC
70410: ST_TO_ADDR
70411: LD_VAR 0 9
70415: PUSH
70416: FOR_TO
70417: IFFALSE 70518
// for _y = min_y to max_y do
70419: LD_ADDR_VAR 0 6
70423: PUSH
70424: DOUBLE
70425: LD_VAR 0 7
70429: DEC
70430: ST_TO_ADDR
70431: LD_VAR 0 10
70435: PUSH
70436: FOR_TO
70437: IFFALSE 70514
// begin if not ValidHex ( _x , _y ) then
70439: LD_VAR 0 5
70443: PPUSH
70444: LD_VAR 0 6
70448: PPUSH
70449: CALL_OW 488
70453: NOT
70454: IFFALSE 70458
// continue ;
70456: GO 70436
// if GetResourceTypeXY ( _x , _y ) then
70458: LD_VAR 0 5
70462: PPUSH
70463: LD_VAR 0 6
70467: PPUSH
70468: CALL_OW 283
70472: IFFALSE 70512
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70474: LD_ADDR_VAR 0 4
70478: PUSH
70479: LD_VAR 0 4
70483: PPUSH
70484: LD_VAR 0 4
70488: PUSH
70489: LD_INT 1
70491: PLUS
70492: PPUSH
70493: LD_VAR 0 5
70497: PUSH
70498: LD_VAR 0 6
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PPUSH
70507: CALL_OW 1
70511: ST_TO_ADDR
// end ;
70512: GO 70436
70514: POP
70515: POP
70516: GO 70416
70518: POP
70519: POP
// end ;
70520: LD_VAR 0 4
70524: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70525: LD_INT 0
70527: PPUSH
70528: PPUSH
70529: PPUSH
70530: PPUSH
70531: PPUSH
70532: PPUSH
70533: PPUSH
70534: PPUSH
// if not units then
70535: LD_VAR 0 1
70539: NOT
70540: IFFALSE 70544
// exit ;
70542: GO 71068
// result := UnitFilter ( units , [ f_ok ] ) ;
70544: LD_ADDR_VAR 0 3
70548: PUSH
70549: LD_VAR 0 1
70553: PPUSH
70554: LD_INT 50
70556: PUSH
70557: EMPTY
70558: LIST
70559: PPUSH
70560: CALL_OW 72
70564: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70565: LD_ADDR_VAR 0 8
70569: PUSH
70570: LD_VAR 0 1
70574: PUSH
70575: LD_INT 1
70577: ARRAY
70578: PPUSH
70579: CALL_OW 255
70583: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70584: LD_ADDR_VAR 0 10
70588: PUSH
70589: LD_INT 29
70591: PUSH
70592: LD_INT 91
70594: PUSH
70595: LD_INT 49
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: LIST
70602: ST_TO_ADDR
// if not result then
70603: LD_VAR 0 3
70607: NOT
70608: IFFALSE 70612
// exit ;
70610: GO 71068
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70612: LD_ADDR_VAR 0 5
70616: PUSH
70617: LD_INT 81
70619: PUSH
70620: LD_VAR 0 8
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: PPUSH
70629: CALL_OW 69
70633: ST_TO_ADDR
// for i in result do
70634: LD_ADDR_VAR 0 4
70638: PUSH
70639: LD_VAR 0 3
70643: PUSH
70644: FOR_IN
70645: IFFALSE 71066
// begin tag := GetTag ( i ) + 1 ;
70647: LD_ADDR_VAR 0 9
70651: PUSH
70652: LD_VAR 0 4
70656: PPUSH
70657: CALL_OW 110
70661: PUSH
70662: LD_INT 1
70664: PLUS
70665: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70666: LD_ADDR_VAR 0 7
70670: PUSH
70671: LD_VAR 0 4
70675: PPUSH
70676: CALL_OW 250
70680: PPUSH
70681: LD_VAR 0 4
70685: PPUSH
70686: CALL_OW 251
70690: PPUSH
70691: LD_INT 6
70693: PPUSH
70694: CALL 70267 0 3
70698: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70699: LD_VAR 0 4
70703: PPUSH
70704: CALL_OW 247
70708: PUSH
70709: LD_INT 2
70711: EQUAL
70712: PUSH
70713: LD_VAR 0 7
70717: AND
70718: PUSH
70719: LD_VAR 0 4
70723: PPUSH
70724: CALL_OW 264
70728: PUSH
70729: LD_VAR 0 10
70733: IN
70734: NOT
70735: AND
70736: IFFALSE 70775
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70738: LD_VAR 0 4
70742: PPUSH
70743: LD_VAR 0 7
70747: PUSH
70748: LD_INT 1
70750: ARRAY
70751: PUSH
70752: LD_INT 1
70754: ARRAY
70755: PPUSH
70756: LD_VAR 0 7
70760: PUSH
70761: LD_INT 1
70763: ARRAY
70764: PUSH
70765: LD_INT 2
70767: ARRAY
70768: PPUSH
70769: CALL_OW 116
70773: GO 71064
// if path > tag then
70775: LD_VAR 0 2
70779: PUSH
70780: LD_VAR 0 9
70784: GREATER
70785: IFFALSE 70993
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70787: LD_ADDR_VAR 0 6
70791: PUSH
70792: LD_VAR 0 5
70796: PPUSH
70797: LD_INT 91
70799: PUSH
70800: LD_VAR 0 4
70804: PUSH
70805: LD_INT 8
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: LIST
70812: PPUSH
70813: CALL_OW 72
70817: ST_TO_ADDR
// if nearEnemy then
70818: LD_VAR 0 6
70822: IFFALSE 70891
// begin if GetWeapon ( i ) = ru_time_lapser then
70824: LD_VAR 0 4
70828: PPUSH
70829: CALL_OW 264
70833: PUSH
70834: LD_INT 49
70836: EQUAL
70837: IFFALSE 70865
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70839: LD_VAR 0 4
70843: PPUSH
70844: LD_VAR 0 6
70848: PPUSH
70849: LD_VAR 0 4
70853: PPUSH
70854: CALL_OW 74
70858: PPUSH
70859: CALL_OW 112
70863: GO 70889
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70865: LD_VAR 0 4
70869: PPUSH
70870: LD_VAR 0 6
70874: PPUSH
70875: LD_VAR 0 4
70879: PPUSH
70880: CALL_OW 74
70884: PPUSH
70885: CALL_OW 115
// end else
70889: GO 70991
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70891: LD_VAR 0 4
70895: PPUSH
70896: LD_VAR 0 2
70900: PUSH
70901: LD_VAR 0 9
70905: ARRAY
70906: PUSH
70907: LD_INT 1
70909: ARRAY
70910: PPUSH
70911: LD_VAR 0 2
70915: PUSH
70916: LD_VAR 0 9
70920: ARRAY
70921: PUSH
70922: LD_INT 2
70924: ARRAY
70925: PPUSH
70926: CALL_OW 297
70930: PUSH
70931: LD_INT 6
70933: GREATER
70934: IFFALSE 70977
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70936: LD_VAR 0 4
70940: PPUSH
70941: LD_VAR 0 2
70945: PUSH
70946: LD_VAR 0 9
70950: ARRAY
70951: PUSH
70952: LD_INT 1
70954: ARRAY
70955: PPUSH
70956: LD_VAR 0 2
70960: PUSH
70961: LD_VAR 0 9
70965: ARRAY
70966: PUSH
70967: LD_INT 2
70969: ARRAY
70970: PPUSH
70971: CALL_OW 114
70975: GO 70991
// SetTag ( i , tag ) ;
70977: LD_VAR 0 4
70981: PPUSH
70982: LD_VAR 0 9
70986: PPUSH
70987: CALL_OW 109
// end else
70991: GO 71064
// if enemy then
70993: LD_VAR 0 5
70997: IFFALSE 71064
// begin if GetWeapon ( i ) = ru_time_lapser then
70999: LD_VAR 0 4
71003: PPUSH
71004: CALL_OW 264
71008: PUSH
71009: LD_INT 49
71011: EQUAL
71012: IFFALSE 71040
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71014: LD_VAR 0 4
71018: PPUSH
71019: LD_VAR 0 5
71023: PPUSH
71024: LD_VAR 0 4
71028: PPUSH
71029: CALL_OW 74
71033: PPUSH
71034: CALL_OW 112
71038: GO 71064
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71040: LD_VAR 0 4
71044: PPUSH
71045: LD_VAR 0 5
71049: PPUSH
71050: LD_VAR 0 4
71054: PPUSH
71055: CALL_OW 74
71059: PPUSH
71060: CALL_OW 115
// end ; end ;
71064: GO 70644
71066: POP
71067: POP
// end ;
71068: LD_VAR 0 3
71072: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71073: LD_INT 0
71075: PPUSH
71076: PPUSH
71077: PPUSH
// if not unit or IsInUnit ( unit ) then
71078: LD_VAR 0 1
71082: NOT
71083: PUSH
71084: LD_VAR 0 1
71088: PPUSH
71089: CALL_OW 310
71093: OR
71094: IFFALSE 71098
// exit ;
71096: GO 71189
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71098: LD_ADDR_VAR 0 4
71102: PUSH
71103: LD_VAR 0 1
71107: PPUSH
71108: CALL_OW 250
71112: PPUSH
71113: LD_VAR 0 2
71117: PPUSH
71118: LD_INT 1
71120: PPUSH
71121: CALL_OW 272
71125: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71126: LD_ADDR_VAR 0 5
71130: PUSH
71131: LD_VAR 0 1
71135: PPUSH
71136: CALL_OW 251
71140: PPUSH
71141: LD_VAR 0 2
71145: PPUSH
71146: LD_INT 1
71148: PPUSH
71149: CALL_OW 273
71153: ST_TO_ADDR
// if ValidHex ( x , y ) then
71154: LD_VAR 0 4
71158: PPUSH
71159: LD_VAR 0 5
71163: PPUSH
71164: CALL_OW 488
71168: IFFALSE 71189
// ComTurnXY ( unit , x , y ) ;
71170: LD_VAR 0 1
71174: PPUSH
71175: LD_VAR 0 4
71179: PPUSH
71180: LD_VAR 0 5
71184: PPUSH
71185: CALL_OW 118
// end ;
71189: LD_VAR 0 3
71193: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71194: LD_INT 0
71196: PPUSH
71197: PPUSH
// result := false ;
71198: LD_ADDR_VAR 0 3
71202: PUSH
71203: LD_INT 0
71205: ST_TO_ADDR
// if not units then
71206: LD_VAR 0 2
71210: NOT
71211: IFFALSE 71215
// exit ;
71213: GO 71260
// for i in units do
71215: LD_ADDR_VAR 0 4
71219: PUSH
71220: LD_VAR 0 2
71224: PUSH
71225: FOR_IN
71226: IFFALSE 71258
// if See ( side , i ) then
71228: LD_VAR 0 1
71232: PPUSH
71233: LD_VAR 0 4
71237: PPUSH
71238: CALL_OW 292
71242: IFFALSE 71256
// begin result := true ;
71244: LD_ADDR_VAR 0 3
71248: PUSH
71249: LD_INT 1
71251: ST_TO_ADDR
// exit ;
71252: POP
71253: POP
71254: GO 71260
// end ;
71256: GO 71225
71258: POP
71259: POP
// end ;
71260: LD_VAR 0 3
71264: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71265: LD_INT 0
71267: PPUSH
71268: PPUSH
71269: PPUSH
71270: PPUSH
// if not unit or not points then
71271: LD_VAR 0 1
71275: NOT
71276: PUSH
71277: LD_VAR 0 2
71281: NOT
71282: OR
71283: IFFALSE 71287
// exit ;
71285: GO 71377
// dist := 99999 ;
71287: LD_ADDR_VAR 0 5
71291: PUSH
71292: LD_INT 99999
71294: ST_TO_ADDR
// for i in points do
71295: LD_ADDR_VAR 0 4
71299: PUSH
71300: LD_VAR 0 2
71304: PUSH
71305: FOR_IN
71306: IFFALSE 71375
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71308: LD_ADDR_VAR 0 6
71312: PUSH
71313: LD_VAR 0 1
71317: PPUSH
71318: LD_VAR 0 4
71322: PUSH
71323: LD_INT 1
71325: ARRAY
71326: PPUSH
71327: LD_VAR 0 4
71331: PUSH
71332: LD_INT 2
71334: ARRAY
71335: PPUSH
71336: CALL_OW 297
71340: ST_TO_ADDR
// if tmpDist < dist then
71341: LD_VAR 0 6
71345: PUSH
71346: LD_VAR 0 5
71350: LESS
71351: IFFALSE 71373
// begin result := i ;
71353: LD_ADDR_VAR 0 3
71357: PUSH
71358: LD_VAR 0 4
71362: ST_TO_ADDR
// dist := tmpDist ;
71363: LD_ADDR_VAR 0 5
71367: PUSH
71368: LD_VAR 0 6
71372: ST_TO_ADDR
// end ; end ;
71373: GO 71305
71375: POP
71376: POP
// end ;
71377: LD_VAR 0 3
71381: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71382: LD_INT 0
71384: PPUSH
// uc_side := side ;
71385: LD_ADDR_OWVAR 20
71389: PUSH
71390: LD_VAR 0 1
71394: ST_TO_ADDR
// uc_nation := 3 ;
71395: LD_ADDR_OWVAR 21
71399: PUSH
71400: LD_INT 3
71402: ST_TO_ADDR
// vc_chassis := 25 ;
71403: LD_ADDR_OWVAR 37
71407: PUSH
71408: LD_INT 25
71410: ST_TO_ADDR
// vc_engine := engine_siberite ;
71411: LD_ADDR_OWVAR 39
71415: PUSH
71416: LD_INT 3
71418: ST_TO_ADDR
// vc_control := control_computer ;
71419: LD_ADDR_OWVAR 38
71423: PUSH
71424: LD_INT 3
71426: ST_TO_ADDR
// vc_weapon := 59 ;
71427: LD_ADDR_OWVAR 40
71431: PUSH
71432: LD_INT 59
71434: ST_TO_ADDR
// result := CreateVehicle ;
71435: LD_ADDR_VAR 0 5
71439: PUSH
71440: CALL_OW 45
71444: ST_TO_ADDR
// SetDir ( result , d ) ;
71445: LD_VAR 0 5
71449: PPUSH
71450: LD_VAR 0 4
71454: PPUSH
71455: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71459: LD_VAR 0 5
71463: PPUSH
71464: LD_VAR 0 2
71468: PPUSH
71469: LD_VAR 0 3
71473: PPUSH
71474: LD_INT 0
71476: PPUSH
71477: CALL_OW 48
// end ;
71481: LD_VAR 0 5
71485: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71486: LD_INT 0
71488: PPUSH
71489: PPUSH
71490: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71491: LD_ADDR_VAR 0 2
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: LD_INT 0
71501: PUSH
71502: LD_INT 0
71504: PUSH
71505: LD_INT 0
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71514: LD_VAR 0 1
71518: NOT
71519: PUSH
71520: LD_VAR 0 1
71524: PPUSH
71525: CALL_OW 264
71529: PUSH
71530: LD_INT 12
71532: PUSH
71533: LD_INT 51
71535: PUSH
71536: LD_INT 32
71538: PUSH
71539: LD_INT 89
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: IN
71548: NOT
71549: OR
71550: IFFALSE 71554
// exit ;
71552: GO 71652
// for i := 1 to 3 do
71554: LD_ADDR_VAR 0 3
71558: PUSH
71559: DOUBLE
71560: LD_INT 1
71562: DEC
71563: ST_TO_ADDR
71564: LD_INT 3
71566: PUSH
71567: FOR_TO
71568: IFFALSE 71650
// begin tmp := GetCargo ( cargo , i ) ;
71570: LD_ADDR_VAR 0 4
71574: PUSH
71575: LD_VAR 0 1
71579: PPUSH
71580: LD_VAR 0 3
71584: PPUSH
71585: CALL_OW 289
71589: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71590: LD_ADDR_VAR 0 2
71594: PUSH
71595: LD_VAR 0 2
71599: PPUSH
71600: LD_VAR 0 3
71604: PPUSH
71605: LD_VAR 0 4
71609: PPUSH
71610: CALL_OW 1
71614: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71615: LD_ADDR_VAR 0 2
71619: PUSH
71620: LD_VAR 0 2
71624: PPUSH
71625: LD_INT 4
71627: PPUSH
71628: LD_VAR 0 2
71632: PUSH
71633: LD_INT 4
71635: ARRAY
71636: PUSH
71637: LD_VAR 0 4
71641: PLUS
71642: PPUSH
71643: CALL_OW 1
71647: ST_TO_ADDR
// end ;
71648: GO 71567
71650: POP
71651: POP
// end ;
71652: LD_VAR 0 2
71656: RET
// export function Length ( array ) ; begin
71657: LD_INT 0
71659: PPUSH
// result := array + 0 ;
71660: LD_ADDR_VAR 0 2
71664: PUSH
71665: LD_VAR 0 1
71669: PUSH
71670: LD_INT 0
71672: PLUS
71673: ST_TO_ADDR
// end ;
71674: LD_VAR 0 2
71678: RET
// export function PrepareArray ( array ) ; begin
71679: LD_INT 0
71681: PPUSH
// result := array diff 0 ;
71682: LD_ADDR_VAR 0 2
71686: PUSH
71687: LD_VAR 0 1
71691: PUSH
71692: LD_INT 0
71694: DIFF
71695: ST_TO_ADDR
// if not result [ 1 ] then
71696: LD_VAR 0 2
71700: PUSH
71701: LD_INT 1
71703: ARRAY
71704: NOT
71705: IFFALSE 71725
// result := Delete ( result , 1 ) ;
71707: LD_ADDR_VAR 0 2
71711: PUSH
71712: LD_VAR 0 2
71716: PPUSH
71717: LD_INT 1
71719: PPUSH
71720: CALL_OW 3
71724: ST_TO_ADDR
// end ;
71725: LD_VAR 0 2
71729: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71730: LD_INT 0
71732: PPUSH
71733: PPUSH
71734: PPUSH
71735: PPUSH
// sibRocketRange := 25 ;
71736: LD_ADDR_VAR 0 6
71740: PUSH
71741: LD_INT 25
71743: ST_TO_ADDR
// result := false ;
71744: LD_ADDR_VAR 0 4
71748: PUSH
71749: LD_INT 0
71751: ST_TO_ADDR
// for i := 0 to 5 do
71752: LD_ADDR_VAR 0 5
71756: PUSH
71757: DOUBLE
71758: LD_INT 0
71760: DEC
71761: ST_TO_ADDR
71762: LD_INT 5
71764: PUSH
71765: FOR_TO
71766: IFFALSE 71833
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71768: LD_VAR 0 1
71772: PPUSH
71773: LD_VAR 0 5
71777: PPUSH
71778: LD_VAR 0 6
71782: PPUSH
71783: CALL_OW 272
71787: PPUSH
71788: LD_VAR 0 2
71792: PPUSH
71793: LD_VAR 0 5
71797: PPUSH
71798: LD_VAR 0 6
71802: PPUSH
71803: CALL_OW 273
71807: PPUSH
71808: LD_VAR 0 3
71812: PPUSH
71813: CALL_OW 309
71817: IFFALSE 71831
// begin result := true ;
71819: LD_ADDR_VAR 0 4
71823: PUSH
71824: LD_INT 1
71826: ST_TO_ADDR
// exit ;
71827: POP
71828: POP
71829: GO 71835
// end ;
71831: GO 71765
71833: POP
71834: POP
// end ;
71835: LD_VAR 0 4
71839: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71840: LD_INT 0
71842: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71843: LD_VAR 0 1
71847: PPUSH
71848: LD_VAR 0 2
71852: PPUSH
71853: LD_INT 0
71855: PPUSH
71856: LD_INT 0
71858: PPUSH
71859: LD_INT 1
71861: PPUSH
71862: LD_INT 0
71864: PPUSH
71865: CALL_OW 587
// end ; end_of_file
71869: LD_VAR 0 3
71873: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71874: LD_VAR 0 1
71878: PPUSH
71879: LD_VAR 0 2
71883: PPUSH
71884: LD_VAR 0 3
71888: PPUSH
71889: LD_VAR 0 4
71893: PPUSH
71894: LD_VAR 0 5
71898: PPUSH
71899: LD_VAR 0 6
71903: PPUSH
71904: CALL 10362 0 6
// end ;
71908: PPOPN 6
71910: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71911: LD_INT 0
71913: PPUSH
// begin if not units then
71914: LD_VAR 0 1
71918: NOT
71919: IFFALSE 71923
// exit ;
71921: GO 71923
// end ;
71923: PPOPN 7
71925: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71926: CALL 10266 0 0
// end ;
71930: PPOPN 1
71932: END
