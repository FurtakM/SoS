// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 9 0 0
// end ;
   8: END
// export debug , prefix ; function Init ; begin
   9: LD_INT 0
  11: PPUSH
// debug := true ;
  12: LD_ADDR_EXP 1
  16: PUSH
  17: LD_INT 1
  19: ST_TO_ADDR
// prefix := 04_1_ ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_STRING 04_1_
  27: ST_TO_ADDR
// end ; end_of_file
  28: LD_VAR 0 1
  32: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
  33: LD_INT 0
  35: PPUSH
  36: PPUSH
// if exist_mode then
  37: LD_VAR 0 2
  41: IFFALSE 66
// unit := CreateCharacter ( prefix & ident ) else
  43: LD_ADDR_VAR 0 5
  47: PUSH
  48: LD_VAR 0 3
  52: PUSH
  53: LD_VAR 0 1
  57: STR
  58: PPUSH
  59: CALL_OW 34
  63: ST_TO_ADDR
  64: GO 81
// unit := NewCharacter ( ident ) ;
  66: LD_ADDR_VAR 0 5
  70: PUSH
  71: LD_VAR 0 1
  75: PPUSH
  76: CALL_OW 25
  80: ST_TO_ADDR
// result := unit ;
  81: LD_ADDR_VAR 0 4
  85: PUSH
  86: LD_VAR 0 5
  90: ST_TO_ADDR
// end ;
  91: LD_VAR 0 4
  95: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
  96: LD_INT 0
  98: PPUSH
// uc_side := side ;
  99: LD_ADDR_OWVAR 20
 103: PUSH
 104: LD_VAR 0 1
 108: ST_TO_ADDR
// uc_nation := nation ;
 109: LD_ADDR_OWVAR 21
 113: PUSH
 114: LD_VAR 0 2
 118: ST_TO_ADDR
// vc_chassis := chassis ;
 119: LD_ADDR_OWVAR 37
 123: PUSH
 124: LD_VAR 0 3
 128: ST_TO_ADDR
// vc_engine := engine ;
 129: LD_ADDR_OWVAR 39
 133: PUSH
 134: LD_VAR 0 4
 138: ST_TO_ADDR
// vc_control := control ;
 139: LD_ADDR_OWVAR 38
 143: PUSH
 144: LD_VAR 0 5
 148: ST_TO_ADDR
// vc_weapon := weapon ;
 149: LD_ADDR_OWVAR 40
 153: PUSH
 154: LD_VAR 0 6
 158: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 159: LD_ADDR_OWVAR 41
 163: PUSH
 164: LD_VAR 0 7
 168: ST_TO_ADDR
// result := CreateVehicle ;
 169: LD_ADDR_VAR 0 8
 173: PUSH
 174: CALL_OW 45
 178: ST_TO_ADDR
// end ;
 179: LD_VAR 0 8
 183: RET
// export function SayX ( units , ident ) ; var i ; begin
 184: LD_INT 0
 186: PPUSH
 187: PPUSH
// result := false ;
 188: LD_ADDR_VAR 0 3
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// if not units then
 196: LD_VAR 0 1
 200: NOT
 201: IFFALSE 205
// exit ;
 203: GO 259
// for i in units do
 205: LD_ADDR_VAR 0 4
 209: PUSH
 210: LD_VAR 0 1
 214: PUSH
 215: FOR_IN
 216: IFFALSE 257
// if IsOk ( i ) then
 218: LD_VAR 0 4
 222: PPUSH
 223: CALL_OW 302
 227: IFFALSE 255
// begin Say ( i , ident ) ;
 229: LD_VAR 0 4
 233: PPUSH
 234: LD_VAR 0 2
 238: PPUSH
 239: CALL_OW 88
// result := i ;
 243: LD_ADDR_VAR 0 3
 247: PUSH
 248: LD_VAR 0 4
 252: ST_TO_ADDR
// break ;
 253: GO 257
// end ;
 255: GO 215
 257: POP
 258: POP
// end ;
 259: LD_VAR 0 3
 263: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 264: LD_INT 0
 266: PPUSH
 267: PPUSH
// InitUc ;
 268: CALL_OW 18
// InitHc ;
 272: CALL_OW 19
// uc_side := 0 ;
 276: LD_ADDR_OWVAR 20
 280: PUSH
 281: LD_INT 0
 283: ST_TO_ADDR
// uc_nation := 0 ;
 284: LD_ADDR_OWVAR 21
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// for i = 1 to amount do
 292: LD_ADDR_VAR 0 4
 296: PUSH
 297: DOUBLE
 298: LD_INT 1
 300: DEC
 301: ST_TO_ADDR
 302: LD_VAR 0 2
 306: PUSH
 307: FOR_TO
 308: IFFALSE 390
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 310: LD_ADDR_OWVAR 29
 314: PUSH
 315: LD_INT 9
 317: PPUSH
 318: LD_INT 12
 320: PPUSH
 321: CALL_OW 12
 325: PUSH
 326: LD_INT 9
 328: PPUSH
 329: LD_INT 12
 331: PPUSH
 332: CALL_OW 12
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 341: LD_ADDR_OWVAR 35
 345: PUSH
 346: LD_INT 1
 348: NEG
 349: PPUSH
 350: LD_INT 1
 352: PPUSH
 353: CALL_OW 12
 357: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 358: LD_INT 0
 360: PPUSH
 361: LD_INT 12
 363: PPUSH
 364: LD_INT 1
 366: PPUSH
 367: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 371: CALL_OW 44
 375: PPUSH
 376: LD_VAR 0 1
 380: PPUSH
 381: LD_INT 0
 383: PPUSH
 384: CALL_OW 49
// end ;
 388: GO 307
 390: POP
 391: POP
// InitHc ;
 392: CALL_OW 19
// end ;
 396: LD_VAR 0 3
 400: RET
// export function PrepareNature ( forest ) ; var i ; begin
 401: LD_INT 0
 403: PPUSH
 404: PPUSH
// SpawnApeman ( forest , [ 6 , 5 , 4 ] [ Difficulty ] ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 6
 412: PUSH
 413: LD_INT 5
 415: PUSH
 416: LD_INT 4
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: LIST
 423: PUSH
 424: LD_OWVAR 67
 428: ARRAY
 429: PPUSH
 430: CALL 264 0 2
// for i := 1 to 3 do
 434: LD_ADDR_VAR 0 3
 438: PUSH
 439: DOUBLE
 440: LD_INT 1
 442: DEC
 443: ST_TO_ADDR
 444: LD_INT 3
 446: PUSH
 447: FOR_TO
 448: IFFALSE 485
// begin hc_class := 21 ;
 450: LD_ADDR_OWVAR 28
 454: PUSH
 455: LD_INT 21
 457: ST_TO_ADDR
// hc_gallery :=  ;
 458: LD_ADDR_OWVAR 33
 462: PUSH
 463: LD_STRING 
 465: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 466: CALL_OW 44
 470: PPUSH
 471: LD_VAR 0 1
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL_OW 49
// end ;
 483: GO 447
 485: POP
 486: POP
// for i := 1 to 2 do
 487: LD_ADDR_VAR 0 3
 491: PUSH
 492: DOUBLE
 493: LD_INT 1
 495: DEC
 496: ST_TO_ADDR
 497: LD_INT 2
 499: PUSH
 500: FOR_TO
 501: IFFALSE 538
// begin hc_class := 18 ;
 503: LD_ADDR_OWVAR 28
 507: PUSH
 508: LD_INT 18
 510: ST_TO_ADDR
// hc_gallery :=  ;
 511: LD_ADDR_OWVAR 33
 515: PUSH
 516: LD_STRING 
 518: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 519: CALL_OW 44
 523: PPUSH
 524: LD_VAR 0 1
 528: PPUSH
 529: LD_INT 0
 531: PPUSH
 532: CALL_OW 49
// end ;
 536: GO 500
 538: POP
 539: POP
// for i := 1 to 2 do
 540: LD_ADDR_VAR 0 3
 544: PUSH
 545: DOUBLE
 546: LD_INT 1
 548: DEC
 549: ST_TO_ADDR
 550: LD_INT 2
 552: PUSH
 553: FOR_TO
 554: IFFALSE 591
// begin hc_class := 13 ;
 556: LD_ADDR_OWVAR 28
 560: PUSH
 561: LD_INT 13
 563: ST_TO_ADDR
// hc_gallery :=  ;
 564: LD_ADDR_OWVAR 33
 568: PUSH
 569: LD_STRING 
 571: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 572: CALL_OW 44
 576: PPUSH
 577: LD_VAR 0 1
 581: PPUSH
 582: LD_INT 0
 584: PPUSH
 585: CALL_OW 49
// end ;
 589: GO 553
 591: POP
 592: POP
// end ;
 593: LD_VAR 0 2
 597: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 598: LD_INT 0
 600: PPUSH
 601: PPUSH
 602: PPUSH
// if not observer or not unit then
 603: LD_VAR 0 1
 607: NOT
 608: PUSH
 609: LD_VAR 0 2
 613: NOT
 614: OR
 615: IFFALSE 619
// exit ;
 617: GO 667
// if not See ( GetSide ( observer ) , unit ) then
 619: LD_VAR 0 1
 623: PPUSH
 624: CALL_OW 255
 628: PPUSH
 629: LD_VAR 0 2
 633: PPUSH
 634: CALL_OW 292
 638: NOT
 639: IFFALSE 643
// exit ;
 641: GO 667
// result := GetDistUnits ( observer , unit ) < 12 ;
 643: LD_ADDR_VAR 0 3
 647: PUSH
 648: LD_VAR 0 1
 652: PPUSH
 653: LD_VAR 0 2
 657: PPUSH
 658: CALL_OW 296
 662: PUSH
 663: LD_INT 12
 665: LESS
 666: ST_TO_ADDR
// end ;
 667: LD_VAR 0 3
 671: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 672: LD_INT 0
 674: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 675: LD_VAR 0 2
 679: PUSH
 680: LD_INT 1
 682: ARRAY
 683: PPUSH
 684: LD_VAR 0 2
 688: PUSH
 689: LD_INT 2
 691: ARRAY
 692: PPUSH
 693: CALL_OW 488
 697: PUSH
 698: LD_VAR 0 2
 702: PUSH
 703: LD_INT 1
 705: ARRAY
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 2
 714: ARRAY
 715: PPUSH
 716: CALL_OW 428
 720: PUSH
 721: LD_INT 0
 723: EQUAL
 724: AND
 725: IFFALSE 759
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 727: LD_VAR 0 1
 731: PPUSH
 732: LD_VAR 0 2
 736: PUSH
 737: LD_INT 1
 739: ARRAY
 740: PPUSH
 741: LD_VAR 0 2
 745: PUSH
 746: LD_INT 2
 748: ARRAY
 749: PPUSH
 750: LD_VAR 0 3
 754: PPUSH
 755: CALL_OW 48
// end ;
 759: LD_VAR 0 4
 763: RET
// export function Video ( mode ) ; begin
 764: LD_INT 0
 766: PPUSH
// ingame_video = mode ;
 767: LD_ADDR_OWVAR 52
 771: PUSH
 772: LD_VAR 0 1
 776: ST_TO_ADDR
// interface_hidden = mode ;
 777: LD_ADDR_OWVAR 54
 781: PUSH
 782: LD_VAR 0 1
 786: ST_TO_ADDR
// end ;
 787: LD_VAR 0 2
 791: RET
// export function ReverseArray ( array ) ; var i ; begin
 792: LD_INT 0
 794: PPUSH
 795: PPUSH
// if not array then
 796: LD_VAR 0 1
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 863
// result := [ ] ;
 805: LD_ADDR_VAR 0 2
 809: PUSH
 810: EMPTY
 811: ST_TO_ADDR
// for i := 1 to array do
 812: LD_ADDR_VAR 0 3
 816: PUSH
 817: DOUBLE
 818: LD_INT 1
 820: DEC
 821: ST_TO_ADDR
 822: LD_VAR 0 1
 826: PUSH
 827: FOR_TO
 828: IFFALSE 861
// result := Insert ( result , 1 , array [ i ] ) ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_VAR 0 2
 839: PPUSH
 840: LD_INT 1
 842: PPUSH
 843: LD_VAR 0 1
 847: PUSH
 848: LD_VAR 0 3
 852: ARRAY
 853: PPUSH
 854: CALL_OW 2
 858: ST_TO_ADDR
 859: GO 827
 861: POP
 862: POP
// end ;
 863: LD_VAR 0 2
 867: RET
// export function ComExit ( unit ) ; begin
 868: LD_INT 0
 870: PPUSH
// result := IsInUnit ( unit ) ;
 871: LD_ADDR_VAR 0 2
 875: PUSH
 876: LD_VAR 0 1
 880: PPUSH
 881: CALL_OW 310
 885: ST_TO_ADDR
// if not result then
 886: LD_VAR 0 2
 890: NOT
 891: IFFALSE 895
// exit ;
 893: GO 930
// if GetType ( result ) = unit_vehicle then
 895: LD_VAR 0 2
 899: PPUSH
 900: CALL_OW 247
 904: PUSH
 905: LD_INT 2
 907: EQUAL
 908: IFFALSE 921
// ComExitVehicle ( unit ) else
 910: LD_VAR 0 1
 914: PPUSH
 915: CALL_OW 121
 919: GO 930
// ComExitBuilding ( unit ) ;
 921: LD_VAR 0 1
 925: PPUSH
 926: CALL_OW 122
// end ;
 930: LD_VAR 0 2
 934: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 935: LD_INT 0
 937: PPUSH
 938: PPUSH
// if not side or not nation then
 939: LD_VAR 0 1
 943: NOT
 944: PUSH
 945: LD_VAR 0 2
 949: NOT
 950: OR
 951: IFFALSE 955
// exit ;
 953: GO 1719
// case nation of nation_american :
 955: LD_VAR 0 2
 959: PUSH
 960: LD_INT 1
 962: DOUBLE
 963: EQUAL
 964: IFTRUE 968
 966: GO 1182
 968: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 969: LD_ADDR_VAR 0 4
 973: PUSH
 974: LD_INT 35
 976: PUSH
 977: LD_INT 45
 979: PUSH
 980: LD_INT 46
 982: PUSH
 983: LD_INT 47
 985: PUSH
 986: LD_INT 82
 988: PUSH
 989: LD_INT 83
 991: PUSH
 992: LD_INT 84
 994: PUSH
 995: LD_INT 85
 997: PUSH
 998: LD_INT 86
1000: PUSH
1001: LD_INT 1
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: LD_INT 6
1009: PUSH
1010: LD_INT 15
1012: PUSH
1013: LD_INT 16
1015: PUSH
1016: LD_INT 7
1018: PUSH
1019: LD_INT 12
1021: PUSH
1022: LD_INT 13
1024: PUSH
1025: LD_INT 10
1027: PUSH
1028: LD_INT 14
1030: PUSH
1031: LD_INT 20
1033: PUSH
1034: LD_INT 21
1036: PUSH
1037: LD_INT 22
1039: PUSH
1040: LD_INT 25
1042: PUSH
1043: LD_INT 32
1045: PUSH
1046: LD_INT 27
1048: PUSH
1049: LD_INT 36
1051: PUSH
1052: LD_INT 69
1054: PUSH
1055: LD_INT 39
1057: PUSH
1058: LD_INT 34
1060: PUSH
1061: LD_INT 40
1063: PUSH
1064: LD_INT 48
1066: PUSH
1067: LD_INT 49
1069: PUSH
1070: LD_INT 50
1072: PUSH
1073: LD_INT 51
1075: PUSH
1076: LD_INT 52
1078: PUSH
1079: LD_INT 53
1081: PUSH
1082: LD_INT 54
1084: PUSH
1085: LD_INT 55
1087: PUSH
1088: LD_INT 56
1090: PUSH
1091: LD_INT 57
1093: PUSH
1094: LD_INT 58
1096: PUSH
1097: LD_INT 59
1099: PUSH
1100: LD_INT 60
1102: PUSH
1103: LD_INT 61
1105: PUSH
1106: LD_INT 62
1108: PUSH
1109: LD_INT 80
1111: PUSH
1112: LD_INT 82
1114: PUSH
1115: LD_INT 83
1117: PUSH
1118: LD_INT 84
1120: PUSH
1121: LD_INT 85
1123: PUSH
1124: LD_INT 86
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: ST_TO_ADDR
1180: GO 1643
1182: LD_INT 2
1184: DOUBLE
1185: EQUAL
1186: IFTRUE 1190
1188: GO 1412
1190: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1191: LD_ADDR_VAR 0 4
1195: PUSH
1196: LD_INT 35
1198: PUSH
1199: LD_INT 45
1201: PUSH
1202: LD_INT 46
1204: PUSH
1205: LD_INT 47
1207: PUSH
1208: LD_INT 82
1210: PUSH
1211: LD_INT 83
1213: PUSH
1214: LD_INT 84
1216: PUSH
1217: LD_INT 85
1219: PUSH
1220: LD_INT 87
1222: PUSH
1223: LD_INT 70
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: LD_INT 11
1231: PUSH
1232: LD_INT 3
1234: PUSH
1235: LD_INT 4
1237: PUSH
1238: LD_INT 5
1240: PUSH
1241: LD_INT 6
1243: PUSH
1244: LD_INT 15
1246: PUSH
1247: LD_INT 18
1249: PUSH
1250: LD_INT 7
1252: PUSH
1253: LD_INT 17
1255: PUSH
1256: LD_INT 8
1258: PUSH
1259: LD_INT 20
1261: PUSH
1262: LD_INT 21
1264: PUSH
1265: LD_INT 22
1267: PUSH
1268: LD_INT 72
1270: PUSH
1271: LD_INT 26
1273: PUSH
1274: LD_INT 69
1276: PUSH
1277: LD_INT 39
1279: PUSH
1280: LD_INT 40
1282: PUSH
1283: LD_INT 41
1285: PUSH
1286: LD_INT 42
1288: PUSH
1289: LD_INT 43
1291: PUSH
1292: LD_INT 48
1294: PUSH
1295: LD_INT 49
1297: PUSH
1298: LD_INT 50
1300: PUSH
1301: LD_INT 51
1303: PUSH
1304: LD_INT 52
1306: PUSH
1307: LD_INT 53
1309: PUSH
1310: LD_INT 54
1312: PUSH
1313: LD_INT 55
1315: PUSH
1316: LD_INT 56
1318: PUSH
1319: LD_INT 60
1321: PUSH
1322: LD_INT 61
1324: PUSH
1325: LD_INT 62
1327: PUSH
1328: LD_INT 66
1330: PUSH
1331: LD_INT 67
1333: PUSH
1334: LD_INT 68
1336: PUSH
1337: LD_INT 81
1339: PUSH
1340: LD_INT 82
1342: PUSH
1343: LD_INT 83
1345: PUSH
1346: LD_INT 84
1348: PUSH
1349: LD_INT 85
1351: PUSH
1352: LD_INT 87
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: ST_TO_ADDR
1410: GO 1643
1412: LD_INT 3
1414: DOUBLE
1415: EQUAL
1416: IFTRUE 1420
1418: GO 1642
1420: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1421: LD_ADDR_VAR 0 4
1425: PUSH
1426: LD_INT 46
1428: PUSH
1429: LD_INT 47
1431: PUSH
1432: LD_INT 1
1434: PUSH
1435: LD_INT 2
1437: PUSH
1438: LD_INT 82
1440: PUSH
1441: LD_INT 83
1443: PUSH
1444: LD_INT 84
1446: PUSH
1447: LD_INT 85
1449: PUSH
1450: LD_INT 86
1452: PUSH
1453: LD_INT 11
1455: PUSH
1456: LD_INT 9
1458: PUSH
1459: LD_INT 20
1461: PUSH
1462: LD_INT 19
1464: PUSH
1465: LD_INT 21
1467: PUSH
1468: LD_INT 24
1470: PUSH
1471: LD_INT 22
1473: PUSH
1474: LD_INT 25
1476: PUSH
1477: LD_INT 28
1479: PUSH
1480: LD_INT 29
1482: PUSH
1483: LD_INT 30
1485: PUSH
1486: LD_INT 31
1488: PUSH
1489: LD_INT 37
1491: PUSH
1492: LD_INT 38
1494: PUSH
1495: LD_INT 32
1497: PUSH
1498: LD_INT 27
1500: PUSH
1501: LD_INT 33
1503: PUSH
1504: LD_INT 69
1506: PUSH
1507: LD_INT 39
1509: PUSH
1510: LD_INT 34
1512: PUSH
1513: LD_INT 40
1515: PUSH
1516: LD_INT 71
1518: PUSH
1519: LD_INT 23
1521: PUSH
1522: LD_INT 44
1524: PUSH
1525: LD_INT 48
1527: PUSH
1528: LD_INT 49
1530: PUSH
1531: LD_INT 50
1533: PUSH
1534: LD_INT 51
1536: PUSH
1537: LD_INT 52
1539: PUSH
1540: LD_INT 53
1542: PUSH
1543: LD_INT 54
1545: PUSH
1546: LD_INT 55
1548: PUSH
1549: LD_INT 56
1551: PUSH
1552: LD_INT 57
1554: PUSH
1555: LD_INT 58
1557: PUSH
1558: LD_INT 59
1560: PUSH
1561: LD_INT 63
1563: PUSH
1564: LD_INT 64
1566: PUSH
1567: LD_INT 65
1569: PUSH
1570: LD_INT 82
1572: PUSH
1573: LD_INT 83
1575: PUSH
1576: LD_INT 84
1578: PUSH
1579: LD_INT 85
1581: PUSH
1582: LD_INT 86
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: ST_TO_ADDR
1640: GO 1643
1642: POP
// if state > - 1 and state < 3 then
1643: LD_VAR 0 3
1647: PUSH
1648: LD_INT 1
1650: NEG
1651: GREATER
1652: PUSH
1653: LD_VAR 0 3
1657: PUSH
1658: LD_INT 3
1660: LESS
1661: AND
1662: IFFALSE 1719
// for i in result do
1664: LD_ADDR_VAR 0 5
1668: PUSH
1669: LD_VAR 0 4
1673: PUSH
1674: FOR_IN
1675: IFFALSE 1717
// if GetTech ( i , side ) <> state then
1677: LD_VAR 0 5
1681: PPUSH
1682: LD_VAR 0 1
1686: PPUSH
1687: CALL_OW 321
1691: PUSH
1692: LD_VAR 0 3
1696: NONEQUAL
1697: IFFALSE 1715
// result := result diff i ;
1699: LD_ADDR_VAR 0 4
1703: PUSH
1704: LD_VAR 0 4
1708: PUSH
1709: LD_VAR 0 5
1713: DIFF
1714: ST_TO_ADDR
1715: GO 1674
1717: POP
1718: POP
// end ; end_of_file
1719: LD_VAR 0 4
1723: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , heikeSecondSquad ; export function PrepareArabian ; var i ; begin
1724: LD_INT 0
1726: PPUSH
1727: PPUSH
// uc_side := 2 ;
1728: LD_ADDR_OWVAR 20
1732: PUSH
1733: LD_INT 2
1735: ST_TO_ADDR
// uc_nation := 2 ;
1736: LD_ADDR_OWVAR 21
1740: PUSH
1741: LD_INT 2
1743: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1744: LD_ADDR_EXP 3
1748: PUSH
1749: LD_STRING Heike
1751: PPUSH
1752: LD_EXP 1
1756: NOT
1757: PPUSH
1758: LD_EXP 2
1762: PPUSH
1763: CALL 33 0 3
1767: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1768: LD_ADDR_EXP 6
1772: PUSH
1773: LD_STRING Ibrahim
1775: PPUSH
1776: LD_EXP 1
1780: NOT
1781: PPUSH
1782: LD_EXP 2
1786: PPUSH
1787: CALL 33 0 3
1791: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1792: LD_ADDR_EXP 4
1796: PUSH
1797: LD_STRING Givi
1799: PPUSH
1800: LD_EXP 1
1804: NOT
1805: PPUSH
1806: LD_EXP 2
1810: PPUSH
1811: CALL 33 0 3
1815: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1816: LD_ADDR_EXP 7
1820: PUSH
1821: LD_STRING Kamil
1823: PPUSH
1824: LD_EXP 1
1828: NOT
1829: PPUSH
1830: LD_EXP 2
1834: PPUSH
1835: CALL 33 0 3
1839: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1840: LD_ADDR_EXP 8
1844: PUSH
1845: LD_STRING Kaia
1847: PPUSH
1848: LD_EXP 1
1852: NOT
1853: PPUSH
1854: LD_EXP 2
1858: PPUSH
1859: CALL 33 0 3
1863: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1864: LD_ADDR_EXP 9
1868: PUSH
1869: LD_STRING Sophia
1871: PPUSH
1872: LD_EXP 1
1876: NOT
1877: PPUSH
1878: LD_EXP 2
1882: PPUSH
1883: CALL 33 0 3
1887: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1888: LD_ADDR_EXP 10
1892: PUSH
1893: LD_STRING Markov
1895: PPUSH
1896: LD_EXP 1
1900: NOT
1901: PPUSH
1902: LD_EXP 2
1906: PPUSH
1907: CALL 33 0 3
1911: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1912: LD_ADDR_EXP 13
1916: PUSH
1917: LD_STRING Aviradze
1919: PPUSH
1920: LD_EXP 1
1924: NOT
1925: PPUSH
1926: LD_EXP 2
1930: PPUSH
1931: CALL 33 0 3
1935: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1936: LD_ADDR_EXP 12
1940: PUSH
1941: LD_STRING Kurt
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: LD_STRING 
1949: PPUSH
1950: CALL 33 0 3
1954: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1955: LD_ADDR_EXP 5
1959: PUSH
1960: LD_STRING Mike
1962: PPUSH
1963: LD_EXP 1
1967: NOT
1968: PPUSH
1969: LD_EXP 2
1973: PPUSH
1974: CALL 33 0 3
1978: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1979: LD_ADDR_EXP 14
1983: PUSH
1984: LD_STRING 04_1_others
1986: PPUSH
1987: CALL_OW 31
1991: ST_TO_ADDR
// end ;
1992: LD_VAR 0 1
1996: RET
