// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 2217 0 0
// PrepareArabian ;
  23: CALL 1234 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5840 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_OWVAR 67
 672: ARRAY
 673: PPUSH
 674: CALL 504 0 2
// for i := 1 to 2 do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_INT 2
 690: PUSH
 691: FOR_TO
 692: IFFALSE 729
// begin hc_class := 21 ;
 694: LD_ADDR_OWVAR 28
 698: PUSH
 699: LD_INT 21
 701: ST_TO_ADDR
// hc_gallery :=  ;
 702: LD_ADDR_OWVAR 33
 706: PUSH
 707: LD_STRING 
 709: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 691
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 782
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end ;
 780: GO 744
 782: POP
 783: POP
// for i := 1 to 2 do
 784: LD_ADDR_VAR 0 3
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 2
 796: PUSH
 797: FOR_TO
 798: IFFALSE 835
// begin hc_class := 13 ;
 800: LD_ADDR_OWVAR 28
 804: PUSH
 805: LD_INT 13
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 816: CALL_OW 44
 820: PPUSH
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 49
// end ;
 833: GO 797
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 2
 841: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
// if not observer or not unit then
 847: LD_VAR 0 1
 851: NOT
 852: PUSH
 853: LD_VAR 0 2
 857: NOT
 858: OR
 859: IFFALSE 863
// exit ;
 861: GO 911
// if not See ( GetSide ( observer ) , unit ) then
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 292
 882: NOT
 883: IFFALSE 887
// exit ;
 885: GO 911
// result := GetDistUnits ( observer , unit ) < 12 ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 296
 906: PUSH
 907: LD_INT 12
 909: LESS
 910: ST_TO_ADDR
// end ;
 911: LD_VAR 0 3
 915: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 916: LD_INT 0
 918: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: CALL_OW 488
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ;
1003: LD_VAR 0 4
1007: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
1014: PPUSH
// if not unit then
1015: LD_VAR 0 1
1019: NOT
1020: IFFALSE 1024
// exit ;
1022: GO 1229
// side := GetSide ( unit ) ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 255
1038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_VAR 0 4
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_VAR 0 2
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 69
1076: ST_TO_ADDR
// if not tmp then
1077: LD_VAR 0 5
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1229
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 5
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 36052 0 4
1111: ST_TO_ADDR
// places := 1 ;
1112: LD_ADDR_VAR 0 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 7
1148: PUSH
1149: LD_INT 8
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1173
// places := 6 ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// for i in tmp do
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: LD_VAR 0 5
1182: PUSH
1183: FOR_IN
1184: IFFALSE 1227
// begin if UnitsInside ( i ) - places <= 0 then
1186: LD_VAR 0 6
1190: PPUSH
1191: CALL_OW 313
1195: PUSH
1196: LD_VAR 0 7
1200: MINUS
1201: PUSH
1202: LD_INT 0
1204: LESSEQUAL
1205: IFFALSE 1211
// continue else
1207: GO 1183
1209: GO 1225
// begin result := i ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_VAR 0 6
1220: ST_TO_ADDR
// exit ;
1221: POP
1222: POP
1223: GO 1229
// end ; end ;
1225: GO 1183
1227: POP
1228: POP
// end ; end_of_file
1229: LD_VAR 0 3
1233: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1234: LD_INT 0
1236: PPUSH
1237: PPUSH
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// uc_nation := 2 ;
1246: LD_ADDR_OWVAR 21
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1254: LD_ADDR_EXP 18
1258: PUSH
1259: LD_STRING Heike
1261: PPUSH
1262: LD_EXP 1
1266: NOT
1267: PPUSH
1268: LD_EXP 2
1272: PPUSH
1273: CALL 30480 0 3
1277: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1278: LD_ADDR_EXP 21
1282: PUSH
1283: LD_STRING Ibrahim
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL 30480 0 3
1301: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1302: LD_ADDR_EXP 19
1306: PUSH
1307: LD_STRING Givi
1309: PPUSH
1310: LD_EXP 1
1314: NOT
1315: PPUSH
1316: LD_EXP 2
1320: PPUSH
1321: CALL 30480 0 3
1325: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1326: LD_ADDR_EXP 22
1330: PUSH
1331: LD_STRING Kamil
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 2
1344: PPUSH
1345: CALL 30480 0 3
1349: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1350: LD_ADDR_EXP 23
1354: PUSH
1355: LD_STRING Kaia
1357: PPUSH
1358: LD_EXP 1
1362: NOT
1363: PPUSH
1364: LD_EXP 2
1368: PPUSH
1369: CALL 30480 0 3
1373: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1374: LD_ADDR_EXP 24
1378: PUSH
1379: LD_STRING Sophia
1381: PPUSH
1382: LD_EXP 1
1386: NOT
1387: PPUSH
1388: LD_EXP 2
1392: PPUSH
1393: CALL 30480 0 3
1397: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1398: LD_ADDR_EXP 25
1402: PUSH
1403: LD_STRING Markov
1405: PPUSH
1406: LD_EXP 1
1410: NOT
1411: PPUSH
1412: LD_EXP 2
1416: PPUSH
1417: CALL 30480 0 3
1421: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1422: LD_ADDR_EXP 28
1426: PUSH
1427: LD_STRING Aviradze
1429: PPUSH
1430: LD_EXP 1
1434: NOT
1435: PPUSH
1436: LD_EXP 2
1440: PPUSH
1441: CALL 30480 0 3
1445: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1446: LD_ADDR_EXP 27
1450: PUSH
1451: LD_STRING Kurt
1453: PPUSH
1454: LD_EXP 1
1458: NOT
1459: PPUSH
1460: LD_EXP 2
1464: PPUSH
1465: CALL 30480 0 3
1469: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1470: LD_ADDR_EXP 20
1474: PUSH
1475: LD_STRING Mike
1477: PPUSH
1478: LD_EXP 1
1482: NOT
1483: PPUSH
1484: LD_EXP 2
1488: PPUSH
1489: CALL 30480 0 3
1493: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1494: LD_ADDR_EXP 29
1498: PUSH
1499: LD_STRING 04_1_others
1501: PPUSH
1502: CALL_OW 31
1506: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1507: LD_ADDR_EXP 31
1511: PUSH
1512: LD_STRING 04_1_apes
1514: PPUSH
1515: CALL_OW 31
1519: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_STRING 04_1_Vehicles
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// if debug then
1535: LD_EXP 1
1539: IFFALSE 1758
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 40 , 40 ] , 1 ] ] ;
1541: LD_ADDR_EXP 30
1545: PUSH
1546: LD_INT 13
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 27
1557: PUSH
1558: LD_INT 2
1560: PUSH
1561: LD_INT 1000
1563: PUSH
1564: LD_INT 0
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PUSH
1574: LD_INT 3
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 13
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: LD_INT 25
1598: PUSH
1599: LD_INT 2
1601: PUSH
1602: LD_INT 1000
1604: PUSH
1605: LD_INT 0
1607: PUSH
1608: LD_INT 0
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 3
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 13
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: LD_INT 1
1636: PUSH
1637: LD_INT 27
1639: PUSH
1640: LD_INT 2
1642: PUSH
1643: LD_INT 1000
1645: PUSH
1646: LD_INT 0
1648: PUSH
1649: LD_INT 0
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 13
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 27
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 0
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 13
1712: PUSH
1713: LD_INT 1
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 32
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: LD_INT 1000
1727: PUSH
1728: LD_INT 40
1730: PUSH
1731: LD_INT 40
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// uc_side := 5 ;
1758: LD_ADDR_OWVAR 20
1762: PUSH
1763: LD_INT 5
1765: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1766: LD_ADDR_EXP 26
1770: PUSH
1771: LD_STRING Abdul
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: LD_STRING 
1779: PPUSH
1780: CALL 30480 0 3
1784: ST_TO_ADDR
// end ;
1785: LD_VAR 0 1
1789: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1790: LD_STRING 04_1_KaganCaptured
1792: PPUSH
1793: LD_INT 0
1795: PPUSH
1796: CALL_OW 30
1800: PUSH
1801: LD_INT 22
1803: PUSH
1804: LD_INT 5
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PPUSH
1811: CALL_OW 69
1815: NOT
1816: AND
1817: PUSH
1818: LD_INT 124
1820: PPUSH
1821: LD_INT 26
1823: PPUSH
1824: CALL_OW 428
1828: PUSH
1829: LD_INT 0
1831: EQUAL
1832: PUSH
1833: LD_INT 124
1835: PPUSH
1836: LD_INT 26
1838: PPUSH
1839: CALL_OW 428
1843: PPUSH
1844: CALL_OW 255
1848: PUSH
1849: LD_INT 2
1851: EQUAL
1852: XOR
1853: AND
1854: IFFALSE 2214
1856: GO 1858
1858: DISABLE
1859: LD_INT 0
1861: PPUSH
1862: PPUSH
// begin enable ;
1863: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1864: LD_EXP 33
1868: NOT
1869: PUSH
1870: LD_EXP 33
1874: PUSH
1875: LD_INT 4
1877: GREATER
1878: OR
1879: IFFALSE 1889
// cargoCounter := 1 ;
1881: LD_ADDR_EXP 33
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1889: LD_ADDR_VAR 0 2
1893: PUSH
1894: LD_INT 142
1896: PUSH
1897: LD_INT 15
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 129
1906: PUSH
1907: LD_INT 11
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 138
1916: PUSH
1917: LD_INT 9
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 133
1926: PUSH
1927: LD_INT 10
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: ST_TO_ADDR
// uc_side := 5 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 5
1947: ST_TO_ADDR
// uc_nation := 2 ;
1948: LD_ADDR_OWVAR 21
1952: PUSH
1953: LD_INT 2
1955: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1956: LD_INT 5
1958: PPUSH
1959: LD_INT 2
1961: PPUSH
1962: LD_INT 13
1964: PPUSH
1965: LD_INT 2
1967: PPUSH
1968: LD_INT 1
1970: PPUSH
1971: LD_INT 32
1973: PPUSH
1974: LD_INT 70
1976: PPUSH
1977: CALL 336 0 7
// veh := CreateVehicle ;
1981: LD_ADDR_VAR 0 1
1985: PUSH
1986: CALL_OW 45
1990: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1991: LD_VAR 0 1
1995: PPUSH
1996: LD_INT 3
1998: PPUSH
1999: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
2003: LD_VAR 0 1
2007: PPUSH
2008: LD_INT 8
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: CALL_OW 49
// if not cargoDriver then
2018: LD_EXP 32
2022: NOT
2023: IFFALSE 2048
// begin PrepareHuman ( false , 1 , 3 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 3
2033: PPUSH
2034: CALL_OW 380
// cargoDriver := CreateHuman ;
2038: LD_ADDR_EXP 32
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
2048: LD_EXP 32
2052: PPUSH
2053: LD_VAR 0 1
2057: PPUSH
2058: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
2062: LD_VAR 0 1
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 100
2072: PPUSH
2073: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
2077: LD_VAR 0 1
2081: PPUSH
2082: LD_VAR 0 2
2086: PUSH
2087: LD_EXP 33
2091: ARRAY
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: PPUSH
2097: LD_VAR 0 2
2101: PUSH
2102: LD_EXP 33
2106: ARRAY
2107: PUSH
2108: LD_INT 2
2110: ARRAY
2111: PPUSH
2112: CALL_OW 111
// AddComUnload ( veh ) ;
2116: LD_VAR 0 1
2120: PPUSH
2121: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
2125: LD_VAR 0 1
2129: PPUSH
2130: LD_INT 133
2132: PPUSH
2133: LD_INT 2
2135: PPUSH
2136: CALL_OW 171
// wait ( 0 0$5 ) ;
2140: LD_INT 175
2142: PPUSH
2143: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2147: LD_INT 35
2149: PPUSH
2150: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
2154: LD_VAR 0 1
2158: PPUSH
2159: LD_INT 133
2161: PPUSH
2162: LD_INT 2
2164: PPUSH
2165: CALL_OW 307
2169: PUSH
2170: LD_VAR 0 1
2174: PPUSH
2175: LD_INT 8
2177: PPUSH
2178: CALL_OW 308
2182: OR
2183: IFFALSE 2147
// RemoveUnit ( cargoDriver ) ;
2185: LD_EXP 32
2189: PPUSH
2190: CALL_OW 64
// RemoveUnit ( veh ) ;
2194: LD_VAR 0 1
2198: PPUSH
2199: CALL_OW 64
// if tick >= 20 20$00 then
2203: LD_OWVAR 1
2207: PUSH
2208: LD_INT 42000
2210: GREATEREQUAL
2211: IFFALSE 2214
// disable ;
2213: DISABLE
// end ; end_of_file
2214: PPOPN 2
2216: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
2227: PPUSH
// uc_side := 3 ;
2228: LD_ADDR_OWVAR 20
2232: PUSH
2233: LD_INT 3
2235: ST_TO_ADDR
// uc_nation := 3 ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 3
2243: ST_TO_ADDR
// ruForce := [ ] ;
2244: LD_ADDR_EXP 37
2248: PUSH
2249: EMPTY
2250: ST_TO_ADDR
// ruMech := [ ] ;
2251: LD_ADDR_EXP 39
2255: PUSH
2256: EMPTY
2257: ST_TO_ADDR
// ruEng := [ ] ;
2258: LD_ADDR_EXP 38
2262: PUSH
2263: EMPTY
2264: ST_TO_ADDR
// ruSci := [ ] ;
2265: LD_ADDR_EXP 40
2269: PUSH
2270: EMPTY
2271: ST_TO_ADDR
// ruMobile := [ ] ;
2272: LD_ADDR_EXP 41
2276: PUSH
2277: EMPTY
2278: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2279: LD_ADDR_EXP 34
2283: PUSH
2284: LD_STRING Burlak
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: LD_STRING 
2292: PPUSH
2293: CALL 30480 0 3
2297: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2298: LD_ADDR_EXP 35
2302: PUSH
2303: LD_STRING Gaydar
2305: PPUSH
2306: LD_INT 0
2308: PPUSH
2309: LD_STRING 
2311: PPUSH
2312: CALL 30480 0 3
2316: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2317: LD_ADDR_EXP 36
2321: PUSH
2322: LD_STRING Kuzmov
2324: PPUSH
2325: LD_INT 0
2327: PPUSH
2328: LD_STRING 
2330: PPUSH
2331: CALL 30480 0 3
2335: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2336: LD_EXP 36
2340: PPUSH
2341: LD_INT 200
2343: PPUSH
2344: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2348: LD_INT 200
2350: PPUSH
2351: LD_STRING chuikov
2353: PPUSH
2354: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2358: LD_INT 200
2360: PPUSH
2361: CALL_OW 274
2365: PPUSH
2366: LD_INT 1
2368: PPUSH
2369: LD_INT 800
2371: PUSH
2372: LD_INT 1000
2374: PUSH
2375: LD_INT 1250
2377: PUSH
2378: LD_INT 1300
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: PUSH
2387: LD_OWVAR 67
2391: ARRAY
2392: PPUSH
2393: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2397: LD_INT 200
2399: PPUSH
2400: CALL_OW 274
2404: PPUSH
2405: LD_INT 2
2407: PPUSH
2408: LD_INT 160
2410: PPUSH
2411: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2415: LD_INT 225
2417: PPUSH
2418: CALL_OW 274
2422: PPUSH
2423: LD_INT 1
2425: PPUSH
2426: LD_INT 200
2428: PPUSH
2429: CALL_OW 277
// oil := 150 ;
2433: LD_ADDR_VAR 0 9
2437: PUSH
2438: LD_INT 150
2440: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2441: LD_EXP 5
2445: PUSH
2446: LD_INT 94500
2448: PUSH
2449: LD_INT 84000
2451: PUSH
2452: LD_INT 73500
2454: PUSH
2455: LD_INT 67200
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: PUSH
2464: LD_OWVAR 67
2468: ARRAY
2469: GREATEREQUAL
2470: IFFALSE 2625
// begin oil := 450 ;
2472: LD_ADDR_VAR 0 9
2476: PUSH
2477: LD_INT 450
2479: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2480: LD_ADDR_VAR 0 7
2484: PUSH
2485: LD_INT 123
2487: PUSH
2488: LD_INT 17
2490: PUSH
2491: LD_INT 3
2493: PUSH
2494: LD_INT 31
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: PUSH
2503: LD_INT 152
2505: PUSH
2506: LD_INT 38
2508: PUSH
2509: LD_INT 3
2511: PUSH
2512: LD_INT 31
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 81
2523: PUSH
2524: LD_INT 6
2526: PUSH
2527: LD_INT 4
2529: PUSH
2530: LD_INT 31
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 113
2541: PUSH
2542: LD_INT 67
2544: PUSH
2545: LD_INT 4
2547: PUSH
2548: LD_INT 32
2550: PUSH
2551: EMPTY
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: ST_TO_ADDR
// for i in tmp do
2563: LD_ADDR_VAR 0 4
2567: PUSH
2568: LD_VAR 0 7
2572: PUSH
2573: FOR_IN
2574: IFFALSE 2623
// begin bc_type := i [ 4 ] ;
2576: LD_ADDR_OWVAR 42
2580: PUSH
2581: LD_VAR 0 4
2585: PUSH
2586: LD_INT 4
2588: ARRAY
2589: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 1
2597: ARRAY
2598: PPUSH
2599: LD_VAR 0 4
2603: PUSH
2604: LD_INT 2
2606: ARRAY
2607: PPUSH
2608: LD_VAR 0 4
2612: PUSH
2613: LD_INT 3
2615: ARRAY
2616: PPUSH
2617: CALL_OW 47
// end ;
2621: GO 2573
2623: POP
2624: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2625: LD_INT 225
2627: PPUSH
2628: CALL_OW 274
2632: PPUSH
2633: LD_INT 2
2635: PPUSH
2636: LD_VAR 0 9
2640: PPUSH
2641: CALL_OW 277
// if Difficulty > 1 then
2645: LD_OWVAR 67
2649: PUSH
2650: LD_INT 1
2652: GREATER
2653: IFFALSE 2748
// begin bc_type := b_bunker ;
2655: LD_ADDR_OWVAR 42
2659: PUSH
2660: LD_INT 32
2662: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2663: LD_ADDR_VAR 0 7
2667: PUSH
2668: LD_INT 121
2670: PUSH
2671: LD_INT 85
2673: PUSH
2674: LD_INT 5
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: LIST
2681: PUSH
2682: LD_INT 93
2684: PUSH
2685: LD_INT 72
2687: PUSH
2688: LD_INT 1
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: LIST
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: ST_TO_ADDR
// for i in tmp do
2700: LD_ADDR_VAR 0 4
2704: PUSH
2705: LD_VAR 0 7
2709: PUSH
2710: FOR_IN
2711: IFFALSE 2746
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2713: LD_VAR 0 4
2717: PUSH
2718: LD_INT 1
2720: ARRAY
2721: PPUSH
2722: LD_VAR 0 4
2726: PUSH
2727: LD_INT 2
2729: ARRAY
2730: PPUSH
2731: LD_VAR 0 4
2735: PUSH
2736: LD_INT 3
2738: ARRAY
2739: PPUSH
2740: CALL_OW 47
2744: GO 2710
2746: POP
2747: POP
// end ; base := GetBase ( ruMainBase ) ;
2748: LD_ADDR_VAR 0 2
2752: PUSH
2753: LD_INT 200
2755: PPUSH
2756: CALL_OW 274
2760: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2761: LD_ADDR_VAR 0 3
2765: PUSH
2766: LD_VAR 0 2
2770: PPUSH
2771: CALL_OW 417
2775: ST_TO_ADDR
// for b in blist do
2776: LD_ADDR_VAR 0 5
2780: PUSH
2781: LD_VAR 0 3
2785: PUSH
2786: FOR_IN
2787: IFFALSE 3238
// begin if b [ 1 ] = b_factory then
2789: LD_VAR 0 5
2793: PUSH
2794: LD_INT 1
2796: ARRAY
2797: PUSH
2798: LD_INT 3
2800: EQUAL
2801: IFFALSE 2952
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2803: LD_ADDR_VAR 0 8
2807: PUSH
2808: LD_VAR 0 5
2812: PUSH
2813: LD_INT 2
2815: ARRAY
2816: PPUSH
2817: LD_VAR 0 5
2821: PUSH
2822: LD_INT 3
2824: ARRAY
2825: PPUSH
2826: CALL_OW 428
2830: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2831: LD_ADDR_VAR 0 4
2835: PUSH
2836: DOUBLE
2837: LD_INT 1
2839: DEC
2840: ST_TO_ADDR
2841: LD_INT 2
2843: PUSH
2844: LD_INT 2
2846: PUSH
2847: LD_OWVAR 67
2851: PLUS
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_EXP 10
2861: PUSH
2862: LD_INT 3
2864: GREATER
2865: PUSH
2866: LD_INT 1
2868: PLUS
2869: ARRAY
2870: PUSH
2871: FOR_TO
2872: IFFALSE 2948
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2874: LD_INT 0
2876: PPUSH
2877: LD_INT 3
2879: PPUSH
2880: LD_INT 1
2882: PUSH
2883: LD_OWVAR 67
2887: PLUS
2888: PPUSH
2889: CALL_OW 380
// un := CreateHuman ;
2893: LD_ADDR_VAR 0 6
2897: PUSH
2898: CALL_OW 44
2902: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2903: LD_ADDR_EXP 39
2907: PUSH
2908: LD_EXP 39
2912: PPUSH
2913: LD_EXP 39
2917: PUSH
2918: LD_INT 1
2920: PLUS
2921: PPUSH
2922: LD_VAR 0 6
2926: PPUSH
2927: CALL_OW 1
2931: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2932: LD_VAR 0 6
2936: PPUSH
2937: LD_VAR 0 8
2941: PPUSH
2942: CALL_OW 52
// end ;
2946: GO 2871
2948: POP
2949: POP
// end else
2950: GO 3236
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2952: LD_VAR 0 5
2956: PUSH
2957: LD_INT 1
2959: ARRAY
2960: PUSH
2961: LD_INT 6
2963: PUSH
2964: LD_INT 7
2966: PUSH
2967: LD_INT 8
2969: PUSH
2970: LD_INT 10
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: IN
2979: IFFALSE 3089
// begin for i := 1 to 2 do
2981: LD_ADDR_VAR 0 4
2985: PUSH
2986: DOUBLE
2987: LD_INT 1
2989: DEC
2990: ST_TO_ADDR
2991: LD_INT 2
2993: PUSH
2994: FOR_TO
2995: IFFALSE 3085
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2997: LD_INT 0
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: LD_OWVAR 67
3007: PPUSH
3008: CALL_OW 380
// un := CreateHuman ;
3012: LD_ADDR_VAR 0 6
3016: PUSH
3017: CALL_OW 44
3021: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
3022: LD_ADDR_EXP 40
3026: PUSH
3027: LD_EXP 40
3031: PPUSH
3032: LD_EXP 40
3036: PUSH
3037: LD_INT 1
3039: PLUS
3040: PPUSH
3041: LD_VAR 0 6
3045: PPUSH
3046: CALL_OW 1
3050: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3051: LD_VAR 0 6
3055: PPUSH
3056: LD_VAR 0 5
3060: PUSH
3061: LD_INT 2
3063: ARRAY
3064: PPUSH
3065: LD_VAR 0 5
3069: PUSH
3070: LD_INT 3
3072: ARRAY
3073: PPUSH
3074: CALL_OW 428
3078: PPUSH
3079: CALL_OW 52
// end ;
3083: GO 2994
3085: POP
3086: POP
// end else
3087: GO 3236
// if b [ 1 ] = b_warehouse then
3089: LD_VAR 0 5
3093: PUSH
3094: LD_INT 1
3096: ARRAY
3097: PUSH
3098: LD_INT 1
3100: EQUAL
3101: IFFALSE 3236
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3103: LD_ADDR_VAR 0 4
3107: PUSH
3108: DOUBLE
3109: LD_INT 1
3111: DEC
3112: ST_TO_ADDR
3113: LD_INT 1
3115: PUSH
3116: LD_INT 1
3118: PUSH
3119: LD_OWVAR 67
3123: PLUS
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PUSH
3129: LD_EXP 10
3133: PUSH
3134: LD_INT 3
3136: GREATER
3137: PUSH
3138: LD_INT 1
3140: PLUS
3141: ARRAY
3142: PUSH
3143: FOR_TO
3144: IFFALSE 3234
// begin PrepareHuman ( false , 2 , Difficulty ) ;
3146: LD_INT 0
3148: PPUSH
3149: LD_INT 2
3151: PPUSH
3152: LD_OWVAR 67
3156: PPUSH
3157: CALL_OW 380
// un := CreateHuman ;
3161: LD_ADDR_VAR 0 6
3165: PUSH
3166: CALL_OW 44
3170: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
3171: LD_ADDR_EXP 38
3175: PUSH
3176: LD_EXP 38
3180: PPUSH
3181: LD_EXP 38
3185: PUSH
3186: LD_INT 1
3188: PLUS
3189: PPUSH
3190: LD_VAR 0 6
3194: PPUSH
3195: CALL_OW 1
3199: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3200: LD_VAR 0 6
3204: PPUSH
3205: LD_VAR 0 5
3209: PUSH
3210: LD_INT 2
3212: ARRAY
3213: PPUSH
3214: LD_VAR 0 5
3218: PUSH
3219: LD_INT 3
3221: ARRAY
3222: PPUSH
3223: CALL_OW 428
3227: PPUSH
3228: CALL_OW 52
// end ;
3232: GO 3143
3234: POP
3235: POP
// end ; end ;
3236: GO 2786
3238: POP
3239: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3240: LD_ADDR_VAR 0 3
3244: PUSH
3245: LD_INT 22
3247: PUSH
3248: LD_INT 3
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 21
3257: PUSH
3258: LD_INT 3
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 69
3273: ST_TO_ADDR
// for b in blist do
3274: LD_ADDR_VAR 0 5
3278: PUSH
3279: LD_VAR 0 3
3283: PUSH
3284: FOR_IN
3285: IFFALSE 3307
// SetBLevel ( b , 3 + Difficulty ) ;
3287: LD_VAR 0 5
3291: PPUSH
3292: LD_INT 3
3294: PUSH
3295: LD_OWVAR 67
3299: PLUS
3300: PPUSH
3301: CALL_OW 241
3305: GO 3284
3307: POP
3308: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3309: LD_ADDR_VAR 0 3
3313: PUSH
3314: LD_INT 22
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: LD_INT 30
3326: PUSH
3327: LD_INT 32
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: PPUSH
3338: CALL_OW 69
3342: ST_TO_ADDR
// for b in blist do
3343: LD_ADDR_VAR 0 5
3347: PUSH
3348: LD_VAR 0 3
3352: PUSH
3353: FOR_IN
3354: IFFALSE 3463
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3356: LD_INT 0
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: LD_INT 1
3364: PUSH
3365: LD_OWVAR 67
3369: PLUS
3370: PPUSH
3371: CALL_OW 380
// un := CreateHuman ;
3375: LD_ADDR_VAR 0 6
3379: PUSH
3380: CALL_OW 44
3384: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3385: LD_ADDR_EXP 37
3389: PUSH
3390: LD_EXP 37
3394: PPUSH
3395: LD_EXP 37
3399: PUSH
3400: LD_INT 1
3402: PLUS
3403: PPUSH
3404: LD_VAR 0 6
3408: PPUSH
3409: CALL_OW 1
3413: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3414: LD_VAR 0 6
3418: PPUSH
3419: LD_VAR 0 5
3423: PPUSH
3424: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3428: LD_VAR 0 5
3432: PPUSH
3433: LD_INT 44
3435: PUSH
3436: LD_INT 43
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PUSH
3443: LD_VAR 0 5
3447: PUSH
3448: LD_INT 2
3450: MOD
3451: PUSH
3452: LD_INT 1
3454: PLUS
3455: ARRAY
3456: PPUSH
3457: CALL_OW 431
// end ;
3461: GO 3353
3463: POP
3464: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3465: LD_ADDR_VAR 0 3
3469: PUSH
3470: LD_INT 22
3472: PUSH
3473: LD_INT 3
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: LD_INT 30
3482: PUSH
3483: LD_INT 31
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PPUSH
3494: CALL_OW 69
3498: ST_TO_ADDR
// for b in blist do
3499: LD_ADDR_VAR 0 5
3503: PUSH
3504: LD_VAR 0 3
3508: PUSH
3509: FOR_IN
3510: IFFALSE 3609
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3512: LD_INT 0
3514: PPUSH
3515: LD_INT 1
3517: PPUSH
3518: LD_INT 1
3520: PUSH
3521: LD_OWVAR 67
3525: PLUS
3526: PPUSH
3527: CALL_OW 380
// un := CreateHuman ;
3531: LD_ADDR_VAR 0 6
3535: PUSH
3536: CALL_OW 44
3540: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3541: LD_ADDR_EXP 37
3545: PUSH
3546: LD_EXP 37
3550: PPUSH
3551: LD_EXP 37
3555: PUSH
3556: LD_INT 1
3558: PLUS
3559: PPUSH
3560: LD_VAR 0 6
3564: PPUSH
3565: CALL_OW 1
3569: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3570: LD_VAR 0 6
3574: PPUSH
3575: LD_VAR 0 5
3579: PPUSH
3580: CALL_OW 254
3584: PUSH
3585: LD_INT 3
3587: PLUS
3588: PPUSH
3589: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3593: LD_VAR 0 6
3597: PPUSH
3598: LD_VAR 0 5
3602: PPUSH
3603: CALL_OW 52
// end ;
3607: GO 3509
3609: POP
3610: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3611: LD_ADDR_VAR 0 3
3615: PUSH
3616: LD_INT 22
3618: PUSH
3619: LD_INT 3
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: LD_INT 30
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 30
3641: PUSH
3642: LD_INT 5
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: LIST
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PPUSH
3658: CALL_OW 69
3662: ST_TO_ADDR
// for b in blist do
3663: LD_ADDR_VAR 0 5
3667: PUSH
3668: LD_VAR 0 3
3672: PUSH
3673: FOR_IN
3674: IFFALSE 3770
// begin for i := 1 to 2 do
3676: LD_ADDR_VAR 0 4
3680: PUSH
3681: DOUBLE
3682: LD_INT 1
3684: DEC
3685: ST_TO_ADDR
3686: LD_INT 2
3688: PUSH
3689: FOR_TO
3690: IFFALSE 3766
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3692: LD_INT 0
3694: PPUSH
3695: LD_INT 1
3697: PPUSH
3698: LD_INT 1
3700: PUSH
3701: LD_OWVAR 67
3705: PLUS
3706: PPUSH
3707: CALL_OW 380
// un := CreateHuman ;
3711: LD_ADDR_VAR 0 6
3715: PUSH
3716: CALL_OW 44
3720: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3721: LD_ADDR_EXP 37
3725: PUSH
3726: LD_EXP 37
3730: PPUSH
3731: LD_EXP 37
3735: PUSH
3736: LD_INT 1
3738: PLUS
3739: PPUSH
3740: LD_VAR 0 6
3744: PPUSH
3745: CALL_OW 1
3749: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3750: LD_VAR 0 6
3754: PPUSH
3755: LD_VAR 0 5
3759: PPUSH
3760: CALL_OW 52
// end ;
3764: GO 3689
3766: POP
3767: POP
// end ;
3768: GO 3673
3770: POP
3771: POP
// if ibrahimOnRuSide then
3772: LD_EXP 3
3776: IFFALSE 3874
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3778: LD_ADDR_EXP 21
3782: PUSH
3783: LD_STRING IbrahimRu
3785: PPUSH
3786: LD_INT 0
3788: PPUSH
3789: LD_STRING 
3791: PPUSH
3792: CALL 30480 0 3
3796: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3797: LD_EXP 21
3801: PPUSH
3802: LD_INT 121
3804: PPUSH
3805: LD_INT 78
3807: PPUSH
3808: LD_INT 0
3810: PPUSH
3811: CALL_OW 48
// ComHold ( Ibrahim ) ;
3815: LD_EXP 21
3819: PPUSH
3820: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3824: LD_INT 1
3826: PPUSH
3827: LD_INT 1
3829: PPUSH
3830: LD_INT 2
3832: PPUSH
3833: CALL_OW 380
// ruSol := CreateHuman ;
3837: LD_ADDR_EXP 42
3841: PUSH
3842: CALL_OW 44
3846: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3847: LD_EXP 42
3851: PPUSH
3852: LD_INT 121
3854: PPUSH
3855: LD_INT 75
3857: PPUSH
3858: LD_INT 0
3860: PPUSH
3861: CALL_OW 48
// ComHold ( ruSol ) ;
3865: LD_EXP 42
3869: PPUSH
3870: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3874: LD_ADDR_VAR 0 4
3878: PUSH
3879: DOUBLE
3880: LD_INT 1
3882: DEC
3883: ST_TO_ADDR
3884: LD_INT 2
3886: PUSH
3887: LD_INT 2
3889: PUSH
3890: LD_OWVAR 67
3894: PLUS
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: PUSH
3900: LD_EXP 10
3904: PUSH
3905: LD_INT 3
3907: GREATER
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: ARRAY
3913: PUSH
3914: FOR_TO
3915: IFFALSE 3984
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3917: LD_VAR 0 8
3921: PPUSH
3922: LD_INT 21
3924: PUSH
3925: LD_INT 23
3927: PUSH
3928: LD_INT 24
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: LIST
3935: PUSH
3936: LD_VAR 0 4
3940: PUSH
3941: LD_INT 3
3943: MOD
3944: PUSH
3945: LD_INT 1
3947: PLUS
3948: ARRAY
3949: PPUSH
3950: LD_INT 1
3952: PPUSH
3953: LD_INT 1
3955: PPUSH
3956: LD_INT 43
3958: PUSH
3959: LD_INT 44
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: CALL_OW 185
3982: GO 3914
3984: POP
3985: POP
// end ;
3986: LD_VAR 0 1
3990: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3991: LD_EXP 41
3995: PUSH
3996: LD_EXP 4
4000: NOT
4001: AND
4002: IFFALSE 4489
4004: GO 4006
4006: DISABLE
4007: LD_INT 0
4009: PPUSH
4010: PPUSH
4011: PPUSH
4012: PPUSH
4013: PPUSH
// begin enable ;
4014: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
4015: LD_ADDR_VAR 0 2
4019: PUSH
4020: LD_EXP 41
4024: PPUSH
4025: LD_INT 21
4027: PUSH
4028: LD_INT 2
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: PPUSH
4035: CALL_OW 72
4039: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
4040: LD_ADDR_VAR 0 4
4044: PUSH
4045: LD_INT 81
4047: PUSH
4048: LD_INT 3
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 2
4057: PUSH
4058: LD_INT 95
4060: PUSH
4061: LD_INT 4
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 95
4070: PUSH
4071: LD_INT 5
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: LD_INT 95
4080: PUSH
4081: LD_INT 6
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 95
4090: PUSH
4091: LD_INT 7
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PPUSH
4109: CALL_OW 69
4113: ST_TO_ADDR
// for i in filter do
4114: LD_ADDR_VAR 0 1
4118: PUSH
4119: LD_VAR 0 2
4123: PUSH
4124: FOR_IN
4125: IFFALSE 4487
// begin tmp := IsDrivenBy ( i ) ;
4127: LD_ADDR_VAR 0 3
4131: PUSH
4132: LD_VAR 0 1
4136: PPUSH
4137: CALL_OW 311
4141: ST_TO_ADDR
// if not tmp then
4142: LD_VAR 0 3
4146: NOT
4147: IFFALSE 4151
// continue ;
4149: GO 4124
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4151: LD_VAR 0 1
4155: PPUSH
4156: CALL_OW 261
4160: PUSH
4161: LD_INT 90
4163: GREATER
4164: PUSH
4165: LD_VAR 0 1
4169: PPUSH
4170: CALL_OW 110
4174: PUSH
4175: LD_INT 2
4177: EQUAL
4178: AND
4179: IFFALSE 4195
// SetTag ( i , 0 ) else
4181: LD_VAR 0 1
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 109
4193: GO 4238
// if GetTag ( i ) = 2 then
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL_OW 110
4204: PUSH
4205: LD_INT 2
4207: EQUAL
4208: IFFALSE 4238
// begin x := rand ( 1 , 2 ) ;
4210: LD_ADDR_VAR 0 5
4214: PUSH
4215: LD_INT 1
4217: PPUSH
4218: LD_INT 2
4220: PPUSH
4221: CALL_OW 12
4225: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 200
4233: PPUSH
4234: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4238: LD_VAR 0 1
4242: PPUSH
4243: CALL_OW 256
4247: PUSH
4248: LD_INT 600
4250: GREATEREQUAL
4251: PUSH
4252: LD_VAR 0 1
4256: PPUSH
4257: CALL_OW 110
4261: NOT
4262: AND
4263: IFFALSE 4289
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4265: LD_VAR 0 1
4269: PPUSH
4270: LD_VAR 0 4
4274: PPUSH
4275: LD_VAR 0 1
4279: PPUSH
4280: CALL_OW 74
4284: PPUSH
4285: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4289: LD_VAR 0 1
4293: PPUSH
4294: CALL_OW 256
4298: PUSH
4299: LD_INT 600
4301: LESS
4302: PUSH
4303: LD_VAR 0 1
4307: PPUSH
4308: CALL_OW 110
4312: NOT
4313: AND
4314: IFFALSE 4343
// begin SetTag ( i , 1 ) ;
4316: LD_VAR 0 1
4320: PPUSH
4321: LD_INT 1
4323: PPUSH
4324: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4328: LD_VAR 0 1
4332: PPUSH
4333: LD_INT 112
4335: PPUSH
4336: LD_INT 119
4338: PPUSH
4339: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 110
4352: PUSH
4353: LD_INT 1
4355: EQUAL
4356: PUSH
4357: LD_VAR 0 1
4361: PPUSH
4362: LD_INT 112
4364: PPUSH
4365: LD_INT 119
4367: PPUSH
4368: CALL_OW 297
4372: PUSH
4373: LD_INT 9
4375: LESS
4376: AND
4377: PUSH
4378: LD_VAR 0 3
4382: AND
4383: IFFALSE 4485
// begin ComExitVehicle ( tmp ) ;
4385: LD_VAR 0 3
4389: PPUSH
4390: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_VAR 0 1
4403: PPUSH
4404: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4408: LD_INT 35
4410: PPUSH
4411: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4415: LD_VAR 0 1
4419: PPUSH
4420: CALL_OW 256
4424: PUSH
4425: LD_INT 1000
4427: EQUAL
4428: IFFALSE 4408
// ComEnterUnit ( tmp , i ) ;
4430: LD_VAR 0 3
4434: PPUSH
4435: LD_VAR 0 1
4439: PPUSH
4440: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4444: LD_VAR 0 1
4448: PPUSH
4449: CALL_OW 261
4453: PUSH
4454: LD_INT 50
4456: LESSEQUAL
4457: IFFALSE 4473
// SetTag ( i , 2 ) else
4459: LD_VAR 0 1
4463: PPUSH
4464: LD_INT 2
4466: PPUSH
4467: CALL_OW 109
4471: GO 4485
// SetTag ( i , 0 ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 0
4480: PPUSH
4481: CALL_OW 109
// end ; end ;
4485: GO 4124
4487: POP
4488: POP
// end ;
4489: PPOPN 5
4491: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4492: LD_EXP 4
4496: NOT
4497: PUSH
4498: LD_EXP 38
4502: AND
4503: IFFALSE 4764
4505: GO 4507
4507: DISABLE
4508: LD_INT 0
4510: PPUSH
4511: PPUSH
4512: PPUSH
4513: PPUSH
// begin enable ;
4514: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: LD_INT 3
4522: PPUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 3
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PUSH
4533: LD_INT 21
4535: PUSH
4536: LD_INT 3
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 3
4545: PUSH
4546: LD_INT 24
4548: PUSH
4549: LD_INT 1000
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: PPUSH
4565: CALL_OW 70
4569: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: LD_EXP 38
4579: PPUSH
4580: LD_INT 50
4582: PUSH
4583: EMPTY
4584: LIST
4585: PPUSH
4586: CALL_OW 72
4590: ST_TO_ADDR
// if filter and tmp then
4591: LD_VAR 0 2
4595: PUSH
4596: LD_VAR 0 3
4600: AND
4601: IFFALSE 4693
// begin for i in tmp do
4603: LD_ADDR_VAR 0 1
4607: PUSH
4608: LD_VAR 0 3
4612: PUSH
4613: FOR_IN
4614: IFFALSE 4689
// begin if GetTag ( i ) = tEscape then
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 110
4625: PUSH
4626: LD_EXP 17
4630: EQUAL
4631: IFFALSE 4635
// continue ;
4633: GO 4613
// if IsInUnit ( i ) then
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 310
4644: IFFALSE 4657
// ComExitBuilding ( i ) else
4646: LD_VAR 0 1
4650: PPUSH
4651: CALL_OW 122
4655: GO 4687
// if not HasTask ( i ) then
4657: LD_VAR 0 1
4661: PPUSH
4662: CALL_OW 314
4666: NOT
4667: IFFALSE 4687
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4669: LD_VAR 0 1
4673: PPUSH
4674: LD_VAR 0 2
4678: PUSH
4679: LD_INT 1
4681: ARRAY
4682: PPUSH
4683: CALL_OW 130
// end ;
4687: GO 4613
4689: POP
4690: POP
// end else
4691: GO 4764
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4693: LD_VAR 0 3
4697: PPUSH
4698: LD_INT 3
4700: PUSH
4701: LD_INT 54
4703: PUSH
4704: EMPTY
4705: LIST
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: PPUSH
4711: CALL_OW 72
4715: IFFALSE 4764
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4717: LD_ADDR_VAR 0 1
4721: PUSH
4722: LD_VAR 0 3
4726: PPUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 54
4732: PUSH
4733: EMPTY
4734: LIST
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PPUSH
4740: CALL_OW 72
4744: PUSH
4745: FOR_IN
4746: IFFALSE 4762
// ComEnterUnit ( i , ruMainBase ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 200
4755: PPUSH
4756: CALL_OW 120
4760: GO 4745
4762: POP
4763: POP
// end ; end ;
4764: PPOPN 4
4766: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4767: LD_EXP 4
4771: NOT
4772: PUSH
4773: LD_EXP 40
4777: AND
4778: IFFALSE 5057
4780: GO 4782
4782: DISABLE
4783: LD_INT 0
4785: PPUSH
4786: PPUSH
4787: PPUSH
4788: PPUSH
// begin enable ;
4789: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4790: LD_ADDR_VAR 0 2
4794: PUSH
4795: LD_INT 3
4797: PPUSH
4798: LD_INT 22
4800: PUSH
4801: LD_INT 3
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PUSH
4808: LD_INT 21
4810: PUSH
4811: LD_INT 1
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 3
4820: PUSH
4821: LD_INT 24
4823: PUSH
4824: LD_INT 1000
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: PPUSH
4840: CALL_OW 70
4844: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4845: LD_ADDR_VAR 0 3
4849: PUSH
4850: LD_EXP 40
4854: PPUSH
4855: LD_INT 50
4857: PUSH
4858: EMPTY
4859: LIST
4860: PPUSH
4861: CALL_OW 72
4865: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4866: LD_ADDR_VAR 0 4
4870: PUSH
4871: LD_INT 118
4873: PPUSH
4874: LD_INT 121
4876: PPUSH
4877: CALL_OW 428
4881: ST_TO_ADDR
// if filter and tmp then
4882: LD_VAR 0 2
4886: PUSH
4887: LD_VAR 0 3
4891: AND
4892: IFFALSE 4984
// begin for i in tmp do
4894: LD_ADDR_VAR 0 1
4898: PUSH
4899: LD_VAR 0 3
4903: PUSH
4904: FOR_IN
4905: IFFALSE 4980
// begin if GetTag ( i ) = tEscape then
4907: LD_VAR 0 1
4911: PPUSH
4912: CALL_OW 110
4916: PUSH
4917: LD_EXP 17
4921: EQUAL
4922: IFFALSE 4926
// continue ;
4924: GO 4904
// if IsInUnit ( i ) then
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 310
4935: IFFALSE 4948
// ComExitBuilding ( i ) else
4937: LD_VAR 0 1
4941: PPUSH
4942: CALL_OW 122
4946: GO 4978
// if not HasTask ( i ) then
4948: LD_VAR 0 1
4952: PPUSH
4953: CALL_OW 314
4957: NOT
4958: IFFALSE 4978
// ComHeal ( i , filter [ 1 ] ) ;
4960: LD_VAR 0 1
4964: PPUSH
4965: LD_VAR 0 2
4969: PUSH
4970: LD_INT 1
4972: ARRAY
4973: PPUSH
4974: CALL_OW 128
// end ;
4978: GO 4904
4980: POP
4981: POP
// end else
4982: GO 5057
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4984: LD_VAR 0 3
4988: PPUSH
4989: LD_INT 3
4991: PUSH
4992: LD_INT 54
4994: PUSH
4995: EMPTY
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 72
5006: IFFALSE 5057
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
5008: LD_ADDR_VAR 0 1
5012: PUSH
5013: LD_VAR 0 3
5017: PPUSH
5018: LD_INT 3
5020: PUSH
5021: LD_INT 54
5023: PUSH
5024: EMPTY
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PPUSH
5031: CALL_OW 72
5035: PUSH
5036: FOR_IN
5037: IFFALSE 5055
// ComEnterUnit ( i , lab ) ;
5039: LD_VAR 0 1
5043: PPUSH
5044: LD_VAR 0 4
5048: PPUSH
5049: CALL_OW 120
5053: GO 5036
5055: POP
5056: POP
// end ; end ; end_of_file
5057: PPOPN 4
5059: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5060: LD_VAR 0 1
5064: PPUSH
5065: CALL 26191 0 1
// if un = Heike then
5069: LD_VAR 0 1
5073: PUSH
5074: LD_EXP 18
5078: EQUAL
5079: IFFALSE 5088
// YouLost ( Heike ) ;
5081: LD_STRING Heike
5083: PPUSH
5084: CALL_OW 104
// if un in ruEng then
5088: LD_VAR 0 1
5092: PUSH
5093: LD_EXP 38
5097: IN
5098: IFFALSE 5116
// ruEng := ruEng diff un ;
5100: LD_ADDR_EXP 38
5104: PUSH
5105: LD_EXP 38
5109: PUSH
5110: LD_VAR 0 1
5114: DIFF
5115: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
5116: LD_VAR 0 1
5120: PUSH
5121: LD_INT 22
5123: PUSH
5124: LD_INT 2
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: LD_INT 21
5133: PUSH
5134: LD_INT 1
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PUSH
5141: LD_INT 23
5143: PUSH
5144: LD_INT 2
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: LIST
5155: PPUSH
5156: CALL_OW 69
5160: IN
5161: IFFALSE 5177
// loseCounter := loseCounter + 1 ;
5163: LD_ADDR_EXP 6
5167: PUSH
5168: LD_EXP 6
5172: PUSH
5173: LD_INT 1
5175: PLUS
5176: ST_TO_ADDR
// end ;
5177: PPOPN 1
5179: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
5180: LD_INT 0
5182: PPUSH
5183: PPUSH
// begin if un in ruMobile then
5184: LD_VAR 0 2
5188: PUSH
5189: LD_EXP 41
5193: IN
5194: IFFALSE 5353
// begin ruMobile := ruMobile diff un ;
5196: LD_ADDR_EXP 41
5200: PUSH
5201: LD_EXP 41
5205: PUSH
5206: LD_VAR 0 2
5210: DIFF
5211: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
5212: LD_ADDR_VAR 0 5
5216: PUSH
5217: LD_VAR 0 2
5221: PPUSH
5222: CALL_OW 264
5226: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5227: LD_ADDR_VAR 0 6
5231: PUSH
5232: LD_INT 110
5234: PPUSH
5235: LD_INT 126
5237: PPUSH
5238: CALL_OW 428
5242: ST_TO_ADDR
// if not driver or not fac then
5243: LD_VAR 0 1
5247: NOT
5248: PUSH
5249: LD_VAR 0 6
5253: NOT
5254: OR
5255: IFFALSE 5259
// exit ;
5257: GO 5353
// AddComMoveXY ( driver , 111 , 121 ) ;
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_INT 111
5266: PPUSH
5267: LD_INT 121
5269: PPUSH
5270: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5274: LD_VAR 0 1
5278: PPUSH
5279: LD_VAR 0 6
5283: PPUSH
5284: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5288: LD_INT 35
5290: PPUSH
5291: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5295: LD_VAR 0 1
5299: PPUSH
5300: CALL_OW 301
5304: PUSH
5305: LD_VAR 0 1
5309: PPUSH
5310: CALL_OW 310
5314: OR
5315: IFFALSE 5288
// if IsDead ( driver ) then
5317: LD_VAR 0 1
5321: PPUSH
5322: CALL_OW 301
5326: IFFALSE 5330
// exit ;
5328: GO 5353
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5330: LD_VAR 0 6
5334: PPUSH
5335: LD_INT 21
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_INT 1
5343: PPUSH
5344: LD_VAR 0 5
5348: PPUSH
5349: CALL_OW 185
// end ; end ;
5353: PPOPN 6
5355: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5356: LD_VAR 0 1
5360: PPUSH
5361: LD_VAR 0 2
5365: PPUSH
5366: CALL 26311 0 2
// if GetSide ( fac ) = 3 then
5370: LD_VAR 0 2
5374: PPUSH
5375: CALL_OW 255
5379: PUSH
5380: LD_INT 3
5382: EQUAL
5383: IFFALSE 5429
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5385: LD_ADDR_EXP 41
5389: PUSH
5390: LD_EXP 41
5394: PPUSH
5395: LD_EXP 41
5399: PUSH
5400: LD_INT 1
5402: PLUS
5403: PPUSH
5404: LD_VAR 0 1
5408: PPUSH
5409: CALL_OW 1
5413: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5414: LD_VAR 0 1
5418: PPUSH
5419: LD_INT 110
5421: PPUSH
5422: LD_INT 117
5424: PPUSH
5425: CALL_OW 171
// end ; end ;
5429: PPOPN 2
5431: END
// on LeaveBuilding ( b , un ) do var barracks ;
5432: LD_INT 0
5434: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5435: LD_VAR 0 1
5439: PUSH
5440: LD_INT 130
5442: PPUSH
5443: LD_INT 17
5445: PPUSH
5446: CALL_OW 428
5450: PUSH
5451: LD_INT 138
5453: PPUSH
5454: LD_INT 22
5456: PPUSH
5457: CALL_OW 428
5461: PUSH
5462: LD_INT 123
5464: PPUSH
5465: LD_INT 17
5467: PPUSH
5468: CALL_OW 428
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: LIST
5477: IN
5478: IFFALSE 5502
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5480: LD_VAR 0 2
5484: PPUSH
5485: LD_INT 135
5487: PPUSH
5488: LD_INT 31
5490: PPUSH
5491: CALL_OW 428
5495: PPUSH
5496: CALL_OW 180
// exit ;
5500: GO 5776
// end ; if b = HexInfo ( 135 , 31 ) then
5502: LD_VAR 0 1
5506: PUSH
5507: LD_INT 135
5509: PPUSH
5510: LD_INT 31
5512: PPUSH
5513: CALL_OW 428
5517: EQUAL
5518: IFFALSE 5590
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_INT 106
5527: PPUSH
5528: LD_INT 51
5530: PPUSH
5531: CALL_OW 428
5535: PPUSH
5536: CALL_OW 180
// if not explodeFirstDepot then
5540: LD_EXP 12
5544: NOT
5545: IFFALSE 5588
// begin explodeFirstDepot := true ;
5547: LD_ADDR_EXP 12
5551: PUSH
5552: LD_INT 1
5554: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5555: LD_INT 525
5557: PPUSH
5558: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5562: LD_INT 127
5564: PPUSH
5565: LD_INT 27
5567: PPUSH
5568: LD_INT 1
5570: PPUSH
5571: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5575: LD_INT 125
5577: PPUSH
5578: LD_INT 29
5580: PPUSH
5581: LD_INT 1
5583: PPUSH
5584: CALL_OW 453
// end ; exit ;
5588: GO 5776
// end ; if b = HexInfo ( 106 , 51 ) then
5590: LD_VAR 0 1
5594: PUSH
5595: LD_INT 106
5597: PPUSH
5598: LD_INT 51
5600: PPUSH
5601: CALL_OW 428
5605: EQUAL
5606: IFFALSE 5706
// begin AddComMoveXY ( un , 106 , 93 ) ;
5608: LD_VAR 0 2
5612: PPUSH
5613: LD_INT 106
5615: PPUSH
5616: LD_INT 93
5618: PPUSH
5619: CALL_OW 171
// if not explodeSecondDepot then
5623: LD_EXP 13
5627: NOT
5628: IFFALSE 5704
// begin explodeSecondDepot := true ;
5630: LD_ADDR_EXP 13
5634: PUSH
5635: LD_INT 1
5637: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5638: LD_INT 420
5640: PPUSH
5641: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5645: LD_INT 111
5647: PPUSH
5648: LD_INT 75
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5658: LD_INT 111
5660: PPUSH
5661: LD_INT 75
5663: PPUSH
5664: LD_INT 1
5666: PPUSH
5667: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5671: LD_INT 108
5673: PPUSH
5674: LD_INT 69
5676: PPUSH
5677: LD_INT 1
5679: PPUSH
5680: CALL_OW 453
// wait ( 0 0$2 ) ;
5684: LD_INT 70
5686: PPUSH
5687: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5691: LD_INT 94
5693: PPUSH
5694: LD_INT 65
5696: PPUSH
5697: LD_INT 1
5699: PPUSH
5700: CALL_OW 453
// end ; exit ;
5704: GO 5776
// end ; if GetBType ( b ) = b_bunker then
5706: LD_VAR 0 1
5710: PPUSH
5711: CALL_OW 266
5715: PUSH
5716: LD_INT 32
5718: EQUAL
5719: IFFALSE 5776
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5721: LD_ADDR_VAR 0 3
5725: PUSH
5726: LD_VAR 0 2
5730: PPUSH
5731: LD_INT 5
5733: PPUSH
5734: CALL 1008 0 2
5738: ST_TO_ADDR
// if barracks then
5739: LD_VAR 0 3
5743: IFFALSE 5761
// AddComEnterUnit ( un , barracks ) else
5745: LD_VAR 0 2
5749: PPUSH
5750: LD_VAR 0 3
5754: PPUSH
5755: CALL_OW 180
5759: GO 5776
// AddComMoveXY ( un , 116 , 110 ) ;
5761: LD_VAR 0 2
5765: PPUSH
5766: LD_INT 116
5768: PPUSH
5769: LD_INT 110
5771: PPUSH
5772: CALL_OW 171
// end ; end ;
5776: PPOPN 3
5778: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5779: LD_VAR 0 1
5783: PUSH
5784: LD_EXP 23
5788: EQUAL
5789: PUSH
5790: LD_VAR 0 2
5794: PUSH
5795: LD_INT 3
5797: PUSH
5798: LD_INT 6
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: IN
5805: AND
5806: IFFALSE 5837
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5808: LD_ADDR_EXP 8
5812: PUSH
5813: LD_VAR 0 1
5817: PPUSH
5818: CALL_OW 250
5822: PUSH
5823: LD_VAR 0 1
5827: PPUSH
5828: CALL_OW 251
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: ST_TO_ADDR
// end ; end_of_file
5837: PPOPN 3
5839: END
// export function Action ; var i , j , un , veh , tmp , rutmp ; begin
5840: LD_INT 0
5842: PPUSH
5843: PPUSH
5844: PPUSH
5845: PPUSH
5846: PPUSH
5847: PPUSH
5848: PPUSH
// InGameOn ;
5849: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5853: LD_INT 5
5855: PPUSH
5856: LD_INT 2
5858: PPUSH
5859: CALL_OW 343
// music_nat := 4 ;
5863: LD_ADDR_OWVAR 71
5867: PUSH
5868: LD_INT 4
5870: ST_TO_ADDR
// music_class := music_combat ;
5871: LD_ADDR_OWVAR 72
5875: PUSH
5876: LD_INT 1
5878: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5879: LD_INT 133
5881: PPUSH
5882: LD_INT 2
5884: PPUSH
5885: LD_INT 2
5887: PPUSH
5888: LD_INT 10
5890: PPUSH
5891: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5895: LD_INT 133
5897: PPUSH
5898: LD_INT 2
5900: PPUSH
5901: CALL_OW 86
// wait ( 0 0$1 ) ;
5905: LD_INT 35
5907: PPUSH
5908: CALL_OW 67
// uc_side := 6 ;
5912: LD_ADDR_OWVAR 20
5916: PUSH
5917: LD_INT 6
5919: ST_TO_ADDR
// uc_nation := 3 ;
5920: LD_ADDR_OWVAR 21
5924: PUSH
5925: LD_INT 3
5927: ST_TO_ADDR
// rutmp := [ ] ;
5928: LD_ADDR_VAR 0 7
5932: PUSH
5933: EMPTY
5934: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5935: LD_INT 6
5937: PPUSH
5938: LD_INT 3
5940: PPUSH
5941: LD_INT 21
5943: PPUSH
5944: LD_INT 1
5946: PPUSH
5947: LD_INT 1
5949: PPUSH
5950: LD_INT 44
5952: PPUSH
5953: LD_INT 66
5955: PPUSH
5956: CALL 336 0 7
// veh := CreateVehicle ;
5960: LD_ADDR_VAR 0 5
5964: PUSH
5965: CALL_OW 45
5969: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5970: LD_VAR 0 5
5974: PPUSH
5975: LD_INT 3
5977: PPUSH
5978: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5982: LD_VAR 0 5
5986: PPUSH
5987: LD_INT 8
5989: PPUSH
5990: LD_INT 0
5992: PPUSH
5993: CALL_OW 49
// SetLives ( veh , 500 ) ;
5997: LD_VAR 0 5
6001: PPUSH
6002: LD_INT 500
6004: PPUSH
6005: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
6009: LD_INT 0
6011: PPUSH
6012: LD_INT 3
6014: PPUSH
6015: LD_INT 3
6017: PPUSH
6018: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6022: CALL_OW 44
6026: PPUSH
6027: LD_VAR 0 5
6031: PPUSH
6032: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
6036: LD_VAR 0 5
6040: PPUSH
6041: LD_INT 133
6043: PPUSH
6044: LD_INT 11
6046: PPUSH
6047: CALL_OW 111
// rutmp := [ veh ] ;
6051: LD_ADDR_VAR 0 7
6055: PUSH
6056: LD_VAR 0 5
6060: PUSH
6061: EMPTY
6062: LIST
6063: ST_TO_ADDR
// for i := 1 to 4 do
6064: LD_ADDR_VAR 0 2
6068: PUSH
6069: DOUBLE
6070: LD_INT 1
6072: DEC
6073: ST_TO_ADDR
6074: LD_INT 4
6076: PUSH
6077: FOR_TO
6078: IFFALSE 6185
// begin PrepareHuman ( false , i , 2 ) ;
6080: LD_INT 0
6082: PPUSH
6083: LD_VAR 0 2
6087: PPUSH
6088: LD_INT 2
6090: PPUSH
6091: CALL_OW 380
// un := CreateHuman ;
6095: LD_ADDR_VAR 0 4
6099: PUSH
6100: CALL_OW 44
6104: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6105: LD_VAR 0 4
6109: PPUSH
6110: LD_INT 3
6112: PPUSH
6113: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6117: LD_VAR 0 4
6121: PPUSH
6122: LD_INT 8
6124: PPUSH
6125: LD_INT 0
6127: PPUSH
6128: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
6132: LD_ADDR_VAR 0 7
6136: PUSH
6137: LD_VAR 0 7
6141: PPUSH
6142: LD_VAR 0 7
6146: PUSH
6147: LD_INT 1
6149: PLUS
6150: PPUSH
6151: LD_VAR 0 4
6155: PPUSH
6156: CALL_OW 1
6160: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
6161: LD_VAR 0 4
6165: PPUSH
6166: LD_INT 133
6168: PPUSH
6169: LD_INT 11
6171: PPUSH
6172: CALL_OW 111
// wait ( 0 0$0.5 ) ;
6176: LD_INT 18
6178: PPUSH
6179: CALL_OW 67
// end ;
6183: GO 6077
6185: POP
6186: POP
// for i in rutmp do
6187: LD_ADDR_VAR 0 2
6191: PUSH
6192: LD_VAR 0 7
6196: PUSH
6197: FOR_IN
6198: IFFALSE 6247
// begin AddComMoveXY ( i , 99 , 65 ) ;
6200: LD_VAR 0 2
6204: PPUSH
6205: LD_INT 99
6207: PPUSH
6208: LD_INT 65
6210: PPUSH
6211: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
6215: LD_VAR 0 2
6219: PPUSH
6220: LD_INT 76
6222: PPUSH
6223: LD_INT 108
6225: PPUSH
6226: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6230: LD_VAR 0 2
6234: PPUSH
6235: LD_INT 92
6237: PPUSH
6238: LD_INT 176
6240: PPUSH
6241: CALL_OW 171
// end ;
6245: GO 6197
6247: POP
6248: POP
// wait ( 0 0$10 ) ;
6249: LD_INT 350
6251: PPUSH
6252: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6256: LD_ADDR_VAR 0 6
6260: PUSH
6261: LD_EXP 18
6265: PUSH
6266: LD_EXP 19
6270: PUSH
6271: LD_EXP 20
6275: PUSH
6276: LD_EXP 21
6280: PUSH
6281: LD_EXP 22
6285: PUSH
6286: LD_EXP 23
6290: PUSH
6291: LD_EXP 24
6295: PUSH
6296: LD_EXP 25
6300: PUSH
6301: LD_EXP 27
6305: PUSH
6306: LD_EXP 28
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: PUSH
6323: LD_EXP 29
6327: UNION
6328: ST_TO_ADDR
// tmp := tmp diff 0 ;
6329: LD_ADDR_VAR 0 6
6333: PUSH
6334: LD_VAR 0 6
6338: PUSH
6339: LD_INT 0
6341: DIFF
6342: ST_TO_ADDR
// for i in heikeVehicles do
6343: LD_ADDR_VAR 0 2
6347: PUSH
6348: LD_EXP 30
6352: PUSH
6353: FOR_IN
6354: IFFALSE 6726
// begin if not tmp then
6356: LD_VAR 0 6
6360: NOT
6361: IFFALSE 6365
// continue ;
6363: GO 6353
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6365: LD_INT 2
6367: PPUSH
6368: LD_VAR 0 2
6372: PUSH
6373: LD_INT 5
6375: ARRAY
6376: PPUSH
6377: LD_VAR 0 2
6381: PUSH
6382: LD_INT 1
6384: ARRAY
6385: PPUSH
6386: LD_VAR 0 2
6390: PUSH
6391: LD_INT 2
6393: ARRAY
6394: PPUSH
6395: LD_VAR 0 2
6399: PUSH
6400: LD_INT 3
6402: ARRAY
6403: PPUSH
6404: LD_VAR 0 2
6408: PUSH
6409: LD_INT 4
6411: ARRAY
6412: PPUSH
6413: LD_INT 34
6415: PPUSH
6416: CALL 336 0 7
// veh := CreateVehicle ;
6420: LD_ADDR_VAR 0 5
6424: PUSH
6425: CALL_OW 45
6429: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6430: LD_VAR 0 2
6434: PUSH
6435: LD_INT 4
6437: ARRAY
6438: PUSH
6439: LD_INT 51
6441: PUSH
6442: LD_INT 32
6444: PUSH
6445: LD_INT 12
6447: PUSH
6448: LD_INT 89
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: IN
6457: IFFALSE 6537
// begin if i [ 7 ] [ 1 ] then
6459: LD_VAR 0 2
6463: PUSH
6464: LD_INT 7
6466: ARRAY
6467: PUSH
6468: LD_INT 1
6470: ARRAY
6471: IFFALSE 6498
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6473: LD_VAR 0 5
6477: PPUSH
6478: LD_INT 1
6480: PPUSH
6481: LD_VAR 0 2
6485: PUSH
6486: LD_INT 7
6488: ARRAY
6489: PUSH
6490: LD_INT 1
6492: ARRAY
6493: PPUSH
6494: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6498: LD_VAR 0 2
6502: PUSH
6503: LD_INT 7
6505: ARRAY
6506: PUSH
6507: LD_INT 2
6509: ARRAY
6510: IFFALSE 6537
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6512: LD_VAR 0 5
6516: PPUSH
6517: LD_INT 2
6519: PPUSH
6520: LD_VAR 0 2
6524: PUSH
6525: LD_INT 7
6527: ARRAY
6528: PUSH
6529: LD_INT 2
6531: ARRAY
6532: PPUSH
6533: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6537: LD_VAR 0 5
6541: PPUSH
6542: LD_INT 3
6544: PPUSH
6545: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6549: LD_VAR 0 5
6553: PPUSH
6554: LD_INT 8
6556: PPUSH
6557: LD_INT 0
6559: PPUSH
6560: CALL_OW 49
// for j := 1 to tmp do
6564: LD_ADDR_VAR 0 3
6568: PUSH
6569: DOUBLE
6570: LD_INT 1
6572: DEC
6573: ST_TO_ADDR
6574: LD_VAR 0 6
6578: PUSH
6579: FOR_TO
6580: IFFALSE 6653
// begin if i [ 8 ] = GetClass ( tmp [ j ] ) then
6582: LD_VAR 0 2
6586: PUSH
6587: LD_INT 8
6589: ARRAY
6590: PUSH
6591: LD_VAR 0 6
6595: PUSH
6596: LD_VAR 0 3
6600: ARRAY
6601: PPUSH
6602: CALL_OW 257
6606: EQUAL
6607: IFFALSE 6651
// begin PlaceHumanInUnit ( tmp [ j ] , veh ) ;
6609: LD_VAR 0 6
6613: PUSH
6614: LD_VAR 0 3
6618: ARRAY
6619: PPUSH
6620: LD_VAR 0 5
6624: PPUSH
6625: CALL_OW 52
// tmp := Delete ( tmp , j ) ;
6629: LD_ADDR_VAR 0 6
6633: PUSH
6634: LD_VAR 0 6
6638: PPUSH
6639: LD_VAR 0 3
6643: PPUSH
6644: CALL_OW 3
6648: ST_TO_ADDR
// break ;
6649: GO 6653
// end ; end ;
6651: GO 6579
6653: POP
6654: POP
// if IsEmpty ( veh ) then
6655: LD_VAR 0 5
6659: PPUSH
6660: CALL 32636 0 1
6664: IFFALSE 6702
// begin PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6666: LD_VAR 0 6
6670: PUSH
6671: LD_INT 1
6673: ARRAY
6674: PPUSH
6675: LD_VAR 0 5
6679: PPUSH
6680: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6684: LD_ADDR_VAR 0 6
6688: PUSH
6689: LD_VAR 0 6
6693: PPUSH
6694: LD_INT 1
6696: PPUSH
6697: CALL_OW 3
6701: ST_TO_ADDR
// end ; ComAgressiveMove ( veh , 133 , 7 ) ;
6702: LD_VAR 0 5
6706: PPUSH
6707: LD_INT 133
6709: PPUSH
6710: LD_INT 7
6712: PPUSH
6713: CALL_OW 114
// wait ( 0 0$3 ) ;
6717: LD_INT 105
6719: PPUSH
6720: CALL_OW 67
// end ;
6724: GO 6353
6726: POP
6727: POP
// if tmp then
6728: LD_VAR 0 6
6732: IFFALSE 6788
// for i in tmp do
6734: LD_ADDR_VAR 0 2
6738: PUSH
6739: LD_VAR 0 6
6743: PUSH
6744: FOR_IN
6745: IFFALSE 6786
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6747: LD_VAR 0 2
6751: PPUSH
6752: LD_INT 10
6754: PPUSH
6755: LD_INT 0
6757: PPUSH
6758: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6762: LD_VAR 0 2
6766: PPUSH
6767: LD_INT 146
6769: PPUSH
6770: LD_INT 7
6772: PPUSH
6773: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6777: LD_INT 18
6779: PPUSH
6780: CALL_OW 67
// end ;
6784: GO 6744
6786: POP
6787: POP
// if heikeApes then
6788: LD_EXP 31
6792: IFFALSE 6848
// for i in heikeApes do
6794: LD_ADDR_VAR 0 2
6798: PUSH
6799: LD_EXP 31
6803: PUSH
6804: FOR_IN
6805: IFFALSE 6846
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6807: LD_VAR 0 2
6811: PPUSH
6812: LD_INT 10
6814: PPUSH
6815: LD_INT 0
6817: PPUSH
6818: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6822: LD_VAR 0 2
6826: PPUSH
6827: LD_INT 146
6829: PPUSH
6830: LD_INT 7
6832: PPUSH
6833: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6837: LD_INT 18
6839: PPUSH
6840: CALL_OW 67
// end ;
6844: GO 6804
6846: POP
6847: POP
// DialogueOn ;
6848: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6852: LD_EXP 18
6856: PPUSH
6857: LD_STRING DH-outpost-a-1
6859: PPUSH
6860: CALL_OW 88
// DialogueOff ;
6864: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6868: LD_INT 133
6870: PPUSH
6871: LD_INT 2
6873: PPUSH
6874: LD_INT 2
6876: PPUSH
6877: CALL_OW 331
// InGameOff ;
6881: CALL_OW 9
// music_nat := 0 ;
6885: LD_ADDR_OWVAR 71
6889: PUSH
6890: LD_INT 0
6892: ST_TO_ADDR
// music_class := 0 ;
6893: LD_ADDR_OWVAR 72
6897: PUSH
6898: LD_INT 0
6900: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6901: LD_STRING Outposts
6903: PPUSH
6904: CALL_OW 337
// SaveForQuickRestart ;
6908: CALL_OW 22
// end ;
6912: LD_VAR 0 1
6916: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6917: LD_INT 22
6919: PUSH
6920: LD_INT 2
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 91
6929: PUSH
6930: LD_EXP 21
6934: PUSH
6935: LD_INT 20
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: LIST
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PPUSH
6947: CALL_OW 69
6951: PUSH
6952: LD_EXP 3
6956: AND
6957: PUSH
6958: LD_EXP 21
6962: PPUSH
6963: CALL_OW 302
6967: AND
6968: IFFALSE 7215
6970: GO 6972
6972: DISABLE
6973: LD_INT 0
6975: PPUSH
6976: PPUSH
6977: PPUSH
6978: PPUSH
// begin IbrahimBetrayal ;
6979: CALL 7218 0 0
// repeat wait ( 0 0$1 ) ;
6983: LD_INT 35
6985: PPUSH
6986: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6990: LD_EXP 21
6994: PPUSH
6995: CALL_OW 301
6999: PUSH
7000: LD_INT 22
7002: PUSH
7003: LD_INT 2
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 91
7012: PUSH
7013: LD_EXP 21
7017: PUSH
7018: LD_INT 6
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PPUSH
7030: CALL_OW 69
7034: PUSH
7035: LD_EXP 21
7039: PPUSH
7040: CALL_OW 302
7044: AND
7045: OR
7046: IFFALSE 6983
// if IsDead ( Ibrahim ) then
7048: LD_EXP 21
7052: PPUSH
7053: CALL_OW 301
7057: IFFALSE 7061
// exit ;
7059: GO 7215
// x := GetX ( Ibrahim ) ;
7061: LD_ADDR_VAR 0 1
7065: PUSH
7066: LD_EXP 21
7070: PPUSH
7071: CALL_OW 250
7075: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
7076: LD_ADDR_VAR 0 2
7080: PUSH
7081: LD_EXP 21
7085: PPUSH
7086: CALL_OW 251
7090: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
7091: LD_ADDR_VAR 0 3
7095: PUSH
7096: LD_EXP 21
7100: PPUSH
7101: CALL_OW 254
7105: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
7106: LD_ADDR_VAR 0 4
7110: PUSH
7111: LD_EXP 21
7115: PPUSH
7116: CALL_OW 256
7120: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
7121: LD_EXP 21
7125: PPUSH
7126: CALL_OW 64
// uc_side := 2 ;
7130: LD_ADDR_OWVAR 20
7134: PUSH
7135: LD_INT 2
7137: ST_TO_ADDR
// uc_nation := 2 ;
7138: LD_ADDR_OWVAR 21
7142: PUSH
7143: LD_INT 2
7145: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
7146: LD_ADDR_EXP 21
7150: PUSH
7151: LD_STRING Ibrahim
7153: PPUSH
7154: LD_INT 0
7156: PPUSH
7157: LD_STRING 
7159: PPUSH
7160: CALL 30480 0 3
7164: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
7165: LD_EXP 21
7169: PPUSH
7170: LD_VAR 0 3
7174: PPUSH
7175: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
7179: LD_EXP 21
7183: PPUSH
7184: LD_VAR 0 1
7188: PPUSH
7189: LD_VAR 0 2
7193: PPUSH
7194: LD_INT 0
7196: PPUSH
7197: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
7201: LD_EXP 21
7205: PPUSH
7206: LD_VAR 0 4
7210: PPUSH
7211: CALL_OW 234
// end ;
7215: PPOPN 4
7217: END
// export function IbrahimBetrayal ; var i , tmp ; begin
7218: LD_INT 0
7220: PPUSH
7221: PPUSH
7222: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
7223: LD_INT 122
7225: PPUSH
7226: LD_INT 77
7228: PPUSH
7229: LD_INT 2
7231: PPUSH
7232: LD_INT 6
7234: NEG
7235: PPUSH
7236: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
7240: LD_EXP 21
7244: PPUSH
7245: LD_INT 123
7247: PPUSH
7248: LD_INT 79
7250: PPUSH
7251: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
7255: LD_EXP 21
7259: PPUSH
7260: LD_INT 125
7262: PPUSH
7263: LD_INT 82
7265: PPUSH
7266: CALL_OW 178
// wait ( 0 0$2 ) ;
7270: LD_INT 70
7272: PPUSH
7273: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
7277: LD_EXP 42
7281: PPUSH
7282: LD_EXP 21
7286: PPUSH
7287: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
7291: LD_EXP 42
7295: PPUSH
7296: LD_STRING DRum-outpost-b-3
7298: PPUSH
7299: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
7303: LD_ADDR_VAR 0 3
7307: PUSH
7308: LD_INT 125
7310: PPUSH
7311: LD_INT 76
7313: PPUSH
7314: CALL_OW 428
7318: PUSH
7319: LD_INT 125
7321: PPUSH
7322: LD_INT 79
7324: PPUSH
7325: CALL_OW 428
7329: PUSH
7330: LD_INT 125
7332: PPUSH
7333: LD_INT 82
7335: PPUSH
7336: CALL_OW 428
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: LIST
7345: ST_TO_ADDR
// for i in tmp do
7346: LD_ADDR_VAR 0 2
7350: PUSH
7351: LD_VAR 0 3
7355: PUSH
7356: FOR_IN
7357: IFFALSE 7373
// SetLives ( i , 200 ) ;
7359: LD_VAR 0 2
7363: PPUSH
7364: LD_INT 200
7366: PPUSH
7367: CALL_OW 234
7371: GO 7356
7373: POP
7374: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7375: LD_EXP 21
7379: PPUSH
7380: LD_STRING DI-outpost-b-4
7382: PPUSH
7383: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7387: LD_EXP 21
7391: PPUSH
7392: LD_INT 5
7394: PPUSH
7395: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7399: LD_EXP 21
7403: PUSH
7404: LD_EXP 42
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PPUSH
7413: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7417: LD_INT 122
7419: PPUSH
7420: LD_INT 77
7422: PPUSH
7423: LD_INT 2
7425: PPUSH
7426: CALL_OW 331
// if Givi then
7430: LD_EXP 19
7434: IFFALSE 7450
// Say ( Givi , DG-1-outpost-b-5 ) else
7436: LD_EXP 19
7440: PPUSH
7441: LD_STRING DG-1-outpost-b-5
7443: PPUSH
7444: CALL_OW 88
7448: GO 7515
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7450: LD_EXP 29
7454: PPUSH
7455: LD_INT 26
7457: PUSH
7458: LD_INT 2
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PPUSH
7465: CALL_OW 72
7469: PUSH
7470: LD_INT 1
7472: ARRAY
7473: PPUSH
7474: LD_STRING DArf-outpost-b-a-5
7476: PPUSH
7477: CALL_OW 88
7481: NOT
7482: IFFALSE 7515
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7484: LD_EXP 29
7488: PPUSH
7489: LD_INT 26
7491: PUSH
7492: LD_INT 1
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PPUSH
7499: CALL_OW 72
7503: PUSH
7504: LD_INT 1
7506: ARRAY
7507: PPUSH
7508: LD_STRING DArm-outpost-b-a-5
7510: PPUSH
7511: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7515: LD_INT 35
7517: PPUSH
7518: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7522: LD_EXP 21
7526: PPUSH
7527: CALL_OW 301
7531: PUSH
7532: LD_EXP 18
7536: PPUSH
7537: LD_EXP 21
7541: PPUSH
7542: CALL_OW 296
7546: PUSH
7547: LD_INT 6
7549: LESS
7550: PUSH
7551: LD_EXP 21
7555: PPUSH
7556: CALL_OW 302
7560: AND
7561: OR
7562: IFFALSE 7515
// if IsDead ( Ibrahim ) then
7564: LD_EXP 21
7568: PPUSH
7569: CALL_OW 301
7573: IFFALSE 7589
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7575: LD_EXP 18
7579: PPUSH
7580: LD_STRING DH-ibrahimdead-1
7582: PPUSH
7583: CALL_OW 88
// exit ;
7587: GO 7630
// end ; CenterNowOnUnits ( Ibrahim ) ;
7589: LD_EXP 21
7593: PPUSH
7594: CALL_OW 87
// DialogueOn ;
7598: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7602: LD_EXP 21
7606: PPUSH
7607: LD_STRING DI-ibrahimlives-1
7609: PPUSH
7610: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7614: LD_EXP 18
7618: PPUSH
7619: LD_STRING DH-Ibrahimlives-2
7621: PPUSH
7622: CALL_OW 88
// DialogueOff ;
7626: CALL_OW 7
// end ;
7630: LD_VAR 0 1
7634: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7635: LD_INT 11
7637: PPUSH
7638: LD_INT 22
7640: PUSH
7641: LD_INT 2
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PPUSH
7648: CALL_OW 70
7652: PUSH
7653: LD_OWVAR 1
7657: PUSH
7658: LD_INT 18900
7660: PUSH
7661: LD_INT 16800
7663: PUSH
7664: LD_INT 16800
7666: PUSH
7667: LD_INT 15750
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: PUSH
7676: LD_OWVAR 67
7680: ARRAY
7681: GREATEREQUAL
7682: OR
7683: IFFALSE 8191
7685: GO 7687
7687: DISABLE
// begin outerAreaAchived := true ;
7688: LD_ADDR_EXP 15
7692: PUSH
7693: LD_INT 1
7695: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7696: LD_INT 700
7698: PPUSH
7699: CALL_OW 67
// DialogueOn ;
7703: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7707: LD_EXP 26
7711: PPUSH
7712: LD_STRING DShar-radio-1
7714: PPUSH
7715: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7719: LD_EXP 26
7723: PPUSH
7724: LD_STRING DShar-radio-2
7726: PPUSH
7727: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7731: LD_EXP 18
7735: PPUSH
7736: LD_STRING DH-radio-2
7738: PPUSH
7739: CALL_OW 88
// DialogueOff ;
7743: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7747: LD_STRING Gaidar
7749: PPUSH
7750: CALL_OW 337
// if Difficulty < 3 then
7754: LD_OWVAR 67
7758: PUSH
7759: LD_INT 3
7761: LESS
7762: IFFALSE 7828
// begin DialogueOn ;
7764: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7768: LD_INT 11
7770: PPUSH
7771: LD_INT 14
7773: PPUSH
7774: LD_INT 2
7776: PPUSH
7777: LD_INT 6
7779: NEG
7780: PPUSH
7781: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7785: LD_INT 11
7787: PPUSH
7788: LD_INT 14
7790: PPUSH
7791: LD_INT 2
7793: PPUSH
7794: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7798: LD_INT 11
7800: PPUSH
7801: LD_INT 14
7803: PPUSH
7804: CALL_OW 84
// dwait ( 0 0$1 ) ;
7808: LD_INT 35
7810: PPUSH
7811: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7815: LD_EXP 18
7819: PPUSH
7820: CALL_OW 87
// DialogueOff ;
7824: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7828: LD_INT 1050
7830: PUSH
7831: LD_INT 350
7833: PPUSH
7834: LD_INT 525
7836: PPUSH
7837: CALL_OW 12
7841: PUSH
7842: LD_OWVAR 67
7846: MUL
7847: PLUS
7848: PPUSH
7849: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7853: LD_INT 35
7855: PPUSH
7856: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7860: LD_INT 2
7862: PPUSH
7863: LD_INT 1
7865: PPUSH
7866: CALL_OW 428
7870: PUSH
7871: LD_INT 0
7873: EQUAL
7874: IFFALSE 7853
// SetDir ( Gaidar , 2 ) ;
7876: LD_EXP 35
7880: PPUSH
7881: LD_INT 2
7883: PPUSH
7884: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7888: LD_EXP 35
7892: PPUSH
7893: LD_INT 2
7895: PPUSH
7896: LD_INT 1
7898: PPUSH
7899: LD_INT 0
7901: PPUSH
7902: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7906: LD_EXP 35
7910: PPUSH
7911: LD_INT 19
7913: PPUSH
7914: LD_INT 24
7916: PPUSH
7917: CALL_OW 111
// if Difficulty < 3 then
7921: LD_OWVAR 67
7925: PUSH
7926: LD_INT 3
7928: LESS
7929: IFFALSE 7968
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7931: LD_INT 11
7933: PPUSH
7934: LD_INT 14
7936: PPUSH
7937: LD_INT 2
7939: PPUSH
7940: LD_INT 6
7942: NEG
7943: PPUSH
7944: CALL_OW 330
// wait ( 0 0$2 ) ;
7948: LD_INT 70
7950: PPUSH
7951: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
7955: LD_INT 11
7957: PPUSH
7958: LD_INT 14
7960: PPUSH
7961: LD_INT 2
7963: PPUSH
7964: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
7968: LD_EXP 35
7972: PPUSH
7973: LD_INT 210
7975: PPUSH
7976: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7980: LD_EXP 35
7984: PPUSH
7985: LD_INT 38
7987: PPUSH
7988: LD_INT 47
7990: PPUSH
7991: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7995: LD_EXP 35
7999: PPUSH
8000: LD_INT 32
8002: PPUSH
8003: LD_INT 59
8005: PPUSH
8006: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
8010: LD_EXP 35
8014: PPUSH
8015: LD_INT 350
8017: PPUSH
8018: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
8022: LD_EXP 35
8026: PPUSH
8027: LD_INT 62
8029: PPUSH
8030: LD_INT 116
8032: PPUSH
8033: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
8037: LD_EXP 35
8041: PPUSH
8042: LD_INT 92
8044: PPUSH
8045: LD_INT 177
8047: PPUSH
8048: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8052: LD_INT 35
8054: PPUSH
8055: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
8059: LD_EXP 35
8063: PPUSH
8064: CALL_OW 301
8068: PUSH
8069: LD_EXP 35
8073: PPUSH
8074: LD_INT 92
8076: PPUSH
8077: LD_INT 177
8079: PPUSH
8080: CALL_OW 307
8084: OR
8085: IFFALSE 8052
// if IsAt ( Gaidar , 92 , 177 ) then
8087: LD_EXP 35
8091: PPUSH
8092: LD_INT 92
8094: PPUSH
8095: LD_INT 177
8097: PPUSH
8098: CALL_OW 307
8102: IFFALSE 8169
// begin DialogueOn ;
8104: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
8108: LD_INT 92
8110: PPUSH
8111: LD_INT 177
8113: PPUSH
8114: LD_INT 2
8116: PPUSH
8117: LD_INT 3
8119: NEG
8120: PPUSH
8121: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
8125: LD_EXP 35
8129: PPUSH
8130: CALL_OW 87
// dwait ( 0 0$2 ) ;
8134: LD_INT 70
8136: PPUSH
8137: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
8141: LD_INT 92
8143: PPUSH
8144: LD_INT 177
8146: PPUSH
8147: LD_INT 2
8149: PPUSH
8150: CALL_OW 331
// DialogueOff ;
8154: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
8158: LD_EXP 35
8162: PPUSH
8163: CALL_OW 64
// exit ;
8167: GO 8191
// end ; gaidarKilled := true ;
8169: LD_ADDR_EXP 14
8173: PUSH
8174: LD_INT 1
8176: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
8177: LD_STRING GaidarKilled
8179: PPUSH
8180: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
8184: LD_STRING ACH_COMMISAR
8186: PPUSH
8187: CALL_OW 543
// end ;
8191: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
8192: LD_INT 2
8194: PPUSH
8195: LD_EXP 35
8199: PPUSH
8200: CALL_OW 292
8204: IFFALSE 8221
8206: GO 8208
8208: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
8209: LD_EXP 35
8213: PPUSH
8214: LD_STRING DT-objective-1
8216: PPUSH
8217: CALL_OW 88
8221: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
8222: LD_INT 22
8224: PUSH
8225: LD_INT 2
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 2
8234: PUSH
8235: LD_INT 95
8237: PUSH
8238: LD_INT 5
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: LD_INT 95
8247: PUSH
8248: LD_INT 6
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: PUSH
8255: LD_INT 95
8257: PUSH
8258: LD_INT 7
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PPUSH
8275: CALL_OW 69
8279: IFFALSE 8316
8281: GO 8283
8283: DISABLE
// begin DialogueOn ;
8284: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
8288: LD_EXP 18
8292: PPUSH
8293: LD_STRING DH-outpost-last-1
8295: PPUSH
8296: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
8300: LD_EXP 34
8304: PPUSH
8305: LD_STRING DB-outpost-last-2
8307: PPUSH
8308: CALL_OW 94
// DialogueOff ;
8312: CALL_OW 7
// end ;
8316: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
8317: LD_INT 200
8319: PPUSH
8320: CALL_OW 256
8324: PUSH
8325: LD_INT 999
8327: LESS
8328: PUSH
8329: LD_INT 200
8331: PPUSH
8332: CALL_OW 255
8336: PUSH
8337: LD_INT 2
8339: EQUAL
8340: OR
8341: IFFALSE 8514
8343: GO 8345
8345: DISABLE
8346: LD_INT 0
8348: PPUSH
8349: PPUSH
// begin if not earlyEscape then
8350: LD_EXP 16
8354: NOT
8355: IFFALSE 8381
// begin SayRadio ( Burlak , DB-end-1 ) ;
8357: LD_EXP 34
8361: PPUSH
8362: LD_STRING DB-end-1
8364: PPUSH
8365: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8369: LD_EXP 18
8373: PPUSH
8374: LD_STRING DH-end-2
8376: PPUSH
8377: CALL_OW 88
// end ; if tick <= 15 15$00 then
8381: LD_OWVAR 1
8385: PUSH
8386: LD_INT 31500
8388: LESSEQUAL
8389: IFFALSE 8398
// SetAchievement ( ACH_FIST ) ;
8391: LD_STRING ACH_FIST
8393: PPUSH
8394: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8398: LD_ADDR_VAR 0 2
8402: PUSH
8403: LD_INT 22
8405: PUSH
8406: LD_INT 3
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PUSH
8413: LD_INT 3
8415: PUSH
8416: LD_INT 21
8418: PUSH
8419: LD_INT 3
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: PPUSH
8434: CALL_OW 69
8438: ST_TO_ADDR
// if not tmp then
8439: LD_VAR 0 2
8443: NOT
8444: IFFALSE 8448
// exit ;
8446: GO 8514
// for i in tmp do
8448: LD_ADDR_VAR 0 1
8452: PUSH
8453: LD_VAR 0 2
8457: PUSH
8458: FOR_IN
8459: IFFALSE 8512
// begin SetTag ( i , tEscape ) ;
8461: LD_VAR 0 1
8465: PPUSH
8466: LD_EXP 17
8470: PPUSH
8471: CALL_OW 109
// if IsInUnit ( i ) then
8475: LD_VAR 0 1
8479: PPUSH
8480: CALL_OW 310
8484: IFFALSE 8495
// ComExitBuilding ( i ) ;
8486: LD_VAR 0 1
8490: PPUSH
8491: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8495: LD_VAR 0 1
8499: PPUSH
8500: LD_INT 92
8502: PPUSH
8503: LD_INT 177
8505: PPUSH
8506: CALL_OW 171
// end ;
8510: GO 8458
8512: POP
8513: POP
// end ;
8514: PPOPN 2
8516: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8517: LD_INT 4
8519: PPUSH
8520: LD_INT 22
8522: PUSH
8523: LD_INT 2
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PPUSH
8530: CALL_OW 70
8534: PUSH
8535: LD_EXP 15
8539: NOT
8540: AND
8541: PUSH
8542: LD_EXP 27
8546: PPUSH
8547: CALL_OW 302
8551: AND
8552: IFFALSE 8792
8554: GO 8556
8556: DISABLE
// begin DialogueOn ;
8557: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8561: LD_INT 111
8563: PPUSH
8564: LD_INT 54
8566: PPUSH
8567: LD_INT 2
8569: PPUSH
8570: LD_INT 16
8572: NEG
8573: PPUSH
8574: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8578: LD_INT 111
8580: PPUSH
8581: LD_INT 53
8583: PPUSH
8584: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8588: LD_INT 10
8590: PPUSH
8591: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8595: LD_EXP 27
8599: PPUSH
8600: LD_STRING DKs-Hannibal-1
8602: PPUSH
8603: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8607: LD_EXP 27
8611: PPUSH
8612: LD_STRING DKs-Hannibal-2
8614: PPUSH
8615: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8619: LD_EXP 27
8623: PPUSH
8624: LD_STRING DKs-Hannibal-3
8626: PPUSH
8627: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8631: LD_EXP 27
8635: PPUSH
8636: LD_STRING DKs-Hannibal-4
8638: PPUSH
8639: CALL_OW 88
// dwait ( 0 0$1 ) ;
8643: LD_INT 35
8645: PPUSH
8646: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8650: LD_INT 111
8652: PPUSH
8653: LD_INT 54
8655: PPUSH
8656: LD_INT 2
8658: PPUSH
8659: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8663: LD_INT 173
8665: PPUSH
8666: LD_INT 76
8668: PPUSH
8669: LD_INT 2
8671: PPUSH
8672: LD_INT 12
8674: NEG
8675: PPUSH
8676: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8680: LD_INT 173
8682: PPUSH
8683: LD_INT 76
8685: PPUSH
8686: LD_INT 2
8688: PPUSH
8689: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8693: LD_INT 173
8695: PPUSH
8696: LD_INT 76
8698: PPUSH
8699: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8703: LD_EXP 27
8707: PPUSH
8708: LD_STRING DKs-Hannibal-5
8710: PPUSH
8711: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8715: LD_EXP 22
8719: PUSH
8720: LD_INT 22
8722: PUSH
8723: LD_INT 2
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PUSH
8730: LD_INT 34
8732: PUSH
8733: LD_INT 26
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 69
8748: NOT
8749: AND
8750: IFFALSE 8788
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8752: LD_EXP 22
8756: PPUSH
8757: LD_STRING DKam-Hannibal-a-6
8759: PPUSH
8760: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8764: LD_EXP 22
8768: PPUSH
8769: LD_STRING DKam-Hannibal-a-7
8771: PPUSH
8772: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8776: LD_EXP 19
8780: PPUSH
8781: LD_STRING DG-Hannibal-a-8
8783: PPUSH
8784: CALL_OW 88
// end ; DialogueOff ;
8788: CALL_OW 7
// end ;
8792: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8793: LD_INT 225
8795: PPUSH
8796: CALL_OW 302
8800: PUSH
8801: LD_INT 200
8803: PPUSH
8804: CALL_OW 302
8808: AND
8809: PUSH
8810: LD_INT 12
8812: PPUSH
8813: LD_INT 21
8815: PUSH
8816: LD_INT 3
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PPUSH
8823: CALL_OW 70
8827: PUSH
8828: LD_INT 2
8830: GREATER
8831: AND
8832: PUSH
8833: LD_INT 13
8835: PPUSH
8836: LD_INT 22
8838: PUSH
8839: LD_INT 2
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PPUSH
8846: CALL_OW 70
8850: PUSH
8851: LD_INT 3
8853: GREATER
8854: AND
8855: IFFALSE 8868
8857: GO 8859
8859: DISABLE
// hannibalPath := true ;
8860: LD_ADDR_EXP 9
8864: PUSH
8865: LD_INT 1
8867: ST_TO_ADDR
8868: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8869: LD_EXP 9
8873: PUSH
8874: LD_INT 6
8876: PPUSH
8877: LD_INT 22
8879: PUSH
8880: LD_INT 2
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PPUSH
8887: CALL_OW 70
8891: AND
8892: IFFALSE 9237
8894: GO 8896
8896: DISABLE
8897: LD_INT 0
8899: PPUSH
8900: PPUSH
8901: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8902: LD_ADDR_VAR 0 2
8906: PUSH
8907: LD_INT 6
8909: PPUSH
8910: LD_INT 22
8912: PUSH
8913: LD_INT 2
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PPUSH
8920: CALL_OW 70
8924: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8925: LD_ADDR_VAR 0 3
8929: PUSH
8930: LD_VAR 0 2
8934: PPUSH
8935: LD_INT 34
8937: PUSH
8938: LD_INT 26
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PPUSH
8945: CALL_OW 72
8949: PUSH
8950: LD_INT 0
8952: GREATER
8953: ST_TO_ADDR
// DialogueOn ;
8954: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8958: LD_EXP 18
8962: PPUSH
8963: LD_STRING DH-Cleverattack-1
8965: PPUSH
8966: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8970: LD_EXP 18
8974: PPUSH
8975: LD_STRING DH-Cleverattack-2
8977: PPUSH
8978: CALL_OW 88
// if hasFlameThrower then
8982: LD_VAR 0 3
8986: IFFALSE 9014
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8988: LD_EXP 34
8992: PPUSH
8993: LD_STRING DB-Cleverattack-3
8995: PPUSH
8996: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
9000: LD_EXP 18
9004: PPUSH
9005: LD_STRING DH-Cleverattack-4
9007: PPUSH
9008: CALL_OW 88
// end else
9012: GO 9038
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
9014: LD_EXP 34
9018: PPUSH
9019: LD_STRING DB-Cleverattack-a-3
9021: PPUSH
9022: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
9026: LD_EXP 18
9030: PPUSH
9031: LD_STRING DH-Cleverattack-a-4
9033: PPUSH
9034: CALL_OW 88
// end ; DialogueOff ;
9038: CALL_OW 7
// if not hasFlameThrower then
9042: LD_VAR 0 3
9046: NOT
9047: IFFALSE 9051
// exit ;
9049: GO 9237
// earlyEscape := true ;
9051: LD_ADDR_EXP 16
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9059: LD_INT 140
9061: PPUSH
9062: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
9066: LD_ADDR_VAR 0 2
9070: PUSH
9071: LD_INT 22
9073: PUSH
9074: LD_INT 3
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PUSH
9081: LD_INT 2
9083: PUSH
9084: LD_INT 25
9086: PUSH
9087: LD_INT 1
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: LD_INT 25
9096: PUSH
9097: LD_INT 2
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PUSH
9104: LD_INT 25
9106: PUSH
9107: LD_INT 4
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PPUSH
9124: CALL_OW 69
9128: PUSH
9129: LD_EXP 21
9133: PUSH
9134: LD_EXP 36
9138: PUSH
9139: LD_EXP 35
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: DIFF
9149: ST_TO_ADDR
// for i in tmp do
9150: LD_ADDR_VAR 0 1
9154: PUSH
9155: LD_VAR 0 2
9159: PUSH
9160: FOR_IN
9161: IFFALSE 9235
// begin if Prob ( 40 + 10 * Difficulty ) then
9163: LD_INT 40
9165: PUSH
9166: LD_INT 10
9168: PUSH
9169: LD_OWVAR 67
9173: MUL
9174: PLUS
9175: PPUSH
9176: CALL_OW 13
9180: IFFALSE 9184
// continue ;
9182: GO 9160
// SetTag ( i , tEscape ) ;
9184: LD_VAR 0 1
9188: PPUSH
9189: LD_EXP 17
9193: PPUSH
9194: CALL_OW 109
// if IsInUnit ( i ) then
9198: LD_VAR 0 1
9202: PPUSH
9203: CALL_OW 310
9207: IFFALSE 9218
// ComExitBuilding ( i ) ;
9209: LD_VAR 0 1
9213: PPUSH
9214: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
9218: LD_VAR 0 1
9222: PPUSH
9223: LD_INT 92
9225: PPUSH
9226: LD_INT 177
9228: PPUSH
9229: CALL_OW 171
// end ;
9233: GO 9160
9235: POP
9236: POP
// end ;
9237: PPOPN 3
9239: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
9240: LD_INT 9
9242: PPUSH
9243: LD_INT 2
9245: PUSH
9246: LD_INT 22
9248: PUSH
9249: LD_INT 3
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 22
9258: PUSH
9259: LD_INT 6
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: LIST
9270: PPUSH
9271: CALL_OW 70
9275: IFFALSE 9373
9277: GO 9279
9279: DISABLE
9280: LD_INT 0
9282: PPUSH
// begin enable ;
9283: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
9284: LD_ADDR_VAR 0 1
9288: PUSH
9289: LD_INT 9
9291: PPUSH
9292: LD_INT 2
9294: PUSH
9295: LD_INT 22
9297: PUSH
9298: LD_INT 3
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: PUSH
9305: LD_INT 22
9307: PUSH
9308: LD_INT 6
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: LIST
9319: PPUSH
9320: CALL_OW 70
9324: PUSH
9325: FOR_IN
9326: IFFALSE 9371
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
9328: LD_VAR 0 1
9332: PPUSH
9333: CALL_OW 110
9337: PUSH
9338: LD_EXP 17
9342: EQUAL
9343: PUSH
9344: LD_VAR 0 1
9348: PPUSH
9349: CALL_OW 255
9353: PUSH
9354: LD_INT 6
9356: EQUAL
9357: OR
9358: IFFALSE 9369
// RemoveUnit ( i ) ;
9360: LD_VAR 0 1
9364: PPUSH
9365: CALL_OW 64
9369: GO 9325
9371: POP
9372: POP
// end ;
9373: PPOPN 1
9375: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9376: LD_EXP 23
9380: PUSH
9381: LD_EXP 23
9385: PPUSH
9386: CALL_OW 256
9390: PUSH
9391: LD_INT 3
9393: LESS
9394: AND
9395: IFFALSE 9441
9397: GO 9399
9399: DISABLE
// begin DialogueOn ;
9400: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9404: LD_EXP 23
9408: PPUSH
9409: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9413: LD_EXP 23
9417: PPUSH
9418: LD_STRING DK-Kkilled-1
9420: PPUSH
9421: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9425: LD_EXP 18
9429: PPUSH
9430: LD_STRING DH-Kkilled-2
9432: PPUSH
9433: CALL_OW 88
// DialogueOff ;
9437: CALL_OW 7
// end ;
9441: END
// every 0 0$1 trigger kaiaKilledByRussian do
9442: LD_EXP 8
9446: IFFALSE 9463
9448: GO 9450
9450: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9451: LD_EXP 18
9455: PPUSH
9456: LD_STRING DH-Kkilled-3
9458: PPUSH
9459: CALL_OW 88
9463: END
// every 0 0$1 trigger tick >= 24 24$00 do
9464: LD_OWVAR 1
9468: PUSH
9469: LD_INT 50400
9471: GREATEREQUAL
9472: IFFALSE 9509
9474: GO 9476
9476: DISABLE
// begin DialogueOn ;
9477: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9481: LD_EXP 26
9485: PPUSH
9486: LD_STRING DShar-slow-1
9488: PPUSH
9489: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9493: LD_EXP 26
9497: PPUSH
9498: LD_STRING DShar-slow-2
9500: PPUSH
9501: CALL_OW 94
// DialogueOff ;
9505: CALL_OW 7
// end ;
9509: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9510: LD_OWVAR 1
9514: PUSH
9515: LD_INT 84000
9517: PUSH
9518: LD_INT 75600
9520: PUSH
9521: LD_INT 67200
9523: PUSH
9524: LD_INT 63000
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: PUSH
9533: LD_OWVAR 67
9537: ARRAY
9538: GREATEREQUAL
9539: IFFALSE 9583
9541: GO 9543
9543: DISABLE
// begin DialogueOn ;
9544: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9548: LD_EXP 26
9552: PPUSH
9553: LD_STRING DShar-fail-1
9555: PPUSH
9556: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9560: LD_EXP 26
9564: PPUSH
9565: LD_STRING DShar-fail-2
9567: PPUSH
9568: CALL_OW 94
// DialogueOff ;
9572: CALL_OW 7
// YouLost ( Time ) ;
9576: LD_STRING Time
9578: PPUSH
9579: CALL_OW 104
// end ;
9583: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9584: LD_INT 22
9586: PUSH
9587: LD_INT 3
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: LD_INT 2
9596: PUSH
9597: LD_INT 30
9599: PUSH
9600: LD_INT 1
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 30
9609: PUSH
9610: LD_INT 0
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: LIST
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PPUSH
9626: CALL_OW 69
9630: PUSH
9631: LD_INT 0
9633: EQUAL
9634: IFFALSE 10231
9636: GO 9638
9638: DISABLE
9639: LD_INT 0
9641: PPUSH
// begin if ( tick + gameTime ) <= 55 55$00 then
9642: LD_OWVAR 1
9646: PUSH
9647: LD_EXP 5
9651: PLUS
9652: PUSH
9653: LD_INT 115500
9655: LESSEQUAL
9656: IFFALSE 9665
// SetAchievement ( ACH_HSPEED_4 ) ;
9658: LD_STRING ACH_HSPEED_4
9660: PPUSH
9661: CALL_OW 543
// if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9665: LD_OWVAR 1
9669: PUSH
9670: LD_EXP 5
9674: PLUS
9675: PUSH
9676: LD_INT 178500
9678: PUSH
9679: LD_INT 157500
9681: PUSH
9682: LD_INT 136500
9684: PUSH
9685: LD_INT 126000
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: PUSH
9694: LD_OWVAR 67
9698: ARRAY
9699: LESSEQUAL
9700: IFFALSE 9714
// AddMedal ( med1 , 1 ) else
9702: LD_STRING med1
9704: PPUSH
9705: LD_INT 1
9707: PPUSH
9708: CALL_OW 101
9712: GO 9725
// AddMedal ( med1 , - 1 ) ;
9714: LD_STRING med1
9716: PPUSH
9717: LD_INT 1
9719: NEG
9720: PPUSH
9721: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9725: LD_EXP 7
9729: PUSH
9730: LD_INT 3
9732: GREATEREQUAL
9733: PUSH
9734: LD_EXP 11
9738: MUL
9739: PUSH
9740: LD_EXP 9
9744: MUL
9745: PUSH
9746: LD_EXP 6
9750: PUSH
9751: LD_INT 6
9753: PUSH
9754: LD_INT 5
9756: PUSH
9757: LD_INT 4
9759: PUSH
9760: LD_INT 3
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: PUSH
9769: LD_OWVAR 67
9773: ARRAY
9774: LESS
9775: MUL
9776: IFFALSE 9790
// AddMedal ( med2 , 1 ) else
9778: LD_STRING med2
9780: PPUSH
9781: LD_INT 1
9783: PPUSH
9784: CALL_OW 101
9788: GO 9864
// if flamethrowers < 3 then
9790: LD_EXP 7
9794: PUSH
9795: LD_INT 3
9797: LESS
9798: IFFALSE 9813
// AddMedal ( med2 , - 1 ) else
9800: LD_STRING med2
9802: PPUSH
9803: LD_INT 1
9805: NEG
9806: PPUSH
9807: CALL_OW 101
9811: GO 9864
// if not baseHill then
9813: LD_EXP 11
9817: NOT
9818: IFFALSE 9833
// AddMedal ( med2 , - 2 ) else
9820: LD_STRING med2
9822: PPUSH
9823: LD_INT 2
9825: NEG
9826: PPUSH
9827: CALL_OW 101
9831: GO 9864
// if not hannibalPath then
9833: LD_EXP 9
9837: NOT
9838: IFFALSE 9853
// AddMedal ( med2 , - 3 ) else
9840: LD_STRING med2
9842: PPUSH
9843: LD_INT 3
9845: NEG
9846: PPUSH
9847: CALL_OW 101
9851: GO 9864
// AddMedal ( med3 , - 2 ) ;
9853: LD_STRING med3
9855: PPUSH
9856: LD_INT 2
9858: NEG
9859: PPUSH
9860: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9864: LD_EXP 14
9868: PPUSH
9869: LD_STRING 04_2_GaidarKilled
9871: PPUSH
9872: CALL_OW 39
// if gaidarKilled then
9876: LD_EXP 14
9880: IFFALSE 9894
// AddMedal ( med3 , 1 ) else
9882: LD_STRING med3
9884: PPUSH
9885: LD_INT 1
9887: PPUSH
9888: CALL_OW 101
9892: GO 9905
// AddMedal ( med3 , - 1 ) ;
9894: LD_STRING med3
9896: PPUSH
9897: LD_INT 1
9899: NEG
9900: PPUSH
9901: CALL_OW 101
// GiveMedals ( MAIN ) ;
9905: LD_STRING MAIN
9907: PPUSH
9908: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9912: LD_INT 22
9914: PUSH
9915: LD_INT 2
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: LD_INT 3
9924: PUSH
9925: LD_INT 23
9927: PUSH
9928: LD_INT 0
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PPUSH
9943: CALL_OW 69
9947: PPUSH
9948: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9952: LD_EXP 18
9956: PPUSH
9957: LD_STRING 04_2_Heike
9959: PPUSH
9960: CALL_OW 38
// if Aviradze then
9964: LD_EXP 28
9968: IFFALSE 9982
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9970: LD_EXP 28
9974: PPUSH
9975: LD_STRING 04_2_Aviradze
9977: PPUSH
9978: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9982: LD_EXP 21
9986: PUSH
9987: LD_EXP 21
9991: PPUSH
9992: CALL_OW 255
9996: PUSH
9997: LD_INT 2
9999: EQUAL
10000: AND
10001: IFFALSE 10031
// begin if ibrahimOnRuSide then
10003: LD_EXP 3
10007: IFFALSE 10019
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
10009: LD_INT 1
10011: PPUSH
10012: LD_STRING 04_2_IbrahimJoined
10014: PPUSH
10015: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
10019: LD_EXP 21
10023: PPUSH
10024: LD_STRING 04_2_Ibrahim
10026: PPUSH
10027: CALL_OW 38
// end ; if Kamil then
10031: LD_EXP 22
10035: IFFALSE 10049
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
10037: LD_EXP 22
10041: PPUSH
10042: LD_STRING 04_2_Kamil
10044: PPUSH
10045: CALL_OW 38
// if Sophia then
10049: LD_EXP 24
10053: IFFALSE 10067
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
10055: LD_EXP 24
10059: PPUSH
10060: LD_STRING 04_2_Sophia
10062: PPUSH
10063: CALL_OW 38
// if Kaia then
10067: LD_EXP 23
10071: IFFALSE 10085
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
10073: LD_EXP 23
10077: PPUSH
10078: LD_STRING 04_2_Kaia
10080: PPUSH
10081: CALL_OW 38
// if Givi then
10085: LD_EXP 19
10089: IFFALSE 10103
// SaveCharacters ( Givi , 04_2_Givi ) ;
10091: LD_EXP 19
10095: PPUSH
10096: LD_STRING 04_2_Givi
10098: PPUSH
10099: CALL_OW 38
// if Mike then
10103: LD_EXP 20
10107: IFFALSE 10121
// SaveCharacters ( Mike , 04_2_Mike ) ;
10109: LD_EXP 20
10113: PPUSH
10114: LD_STRING 04_2_Mike
10116: PPUSH
10117: CALL_OW 38
// if Markov then
10121: LD_EXP 25
10125: IFFALSE 10139
// SaveCharacters ( Markov , 04_2_Markov ) ;
10127: LD_EXP 25
10131: PPUSH
10132: LD_STRING 04_2_Markov
10134: PPUSH
10135: CALL_OW 38
// if Kurt then
10139: LD_EXP 27
10143: IFFALSE 10157
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
10145: LD_EXP 27
10149: PPUSH
10150: LD_STRING 04_2_Kurt
10152: PPUSH
10153: CALL_OW 38
// if heikeSecondSquad then
10157: LD_EXP 29
10161: IFFALSE 10175
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
10163: LD_EXP 29
10167: PPUSH
10168: LD_STRING 04_2_others
10170: PPUSH
10171: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10175: LD_ADDR_VAR 0 1
10179: PUSH
10180: LD_INT 22
10182: PUSH
10183: LD_INT 2
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: LD_INT 23
10192: PUSH
10193: LD_INT 0
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PPUSH
10204: CALL_OW 69
10208: ST_TO_ADDR
// if tmp then
10209: LD_VAR 0 1
10213: IFFALSE 10227
// SaveCharacters ( tmp , 04_2_apes ) ;
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_STRING 04_2_apes
10222: PPUSH
10223: CALL_OW 38
// YouWin ;
10227: CALL_OW 103
// end ; end_of_file
10231: PPOPN 1
10233: END
// export globalGameSaveCounter ; every 0 0$1 do
10234: GO 10236
10236: DISABLE
// begin enable ;
10237: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10238: LD_STRING updateTimer(
10240: PUSH
10241: LD_OWVAR 1
10245: STR
10246: PUSH
10247: LD_STRING );
10249: STR
10250: PPUSH
10251: CALL_OW 559
// end ;
10255: END
// every 0 0$1 do
10256: GO 10258
10258: DISABLE
// begin globalGameSaveCounter := 0 ;
10259: LD_ADDR_EXP 43
10263: PUSH
10264: LD_INT 0
10266: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10267: LD_STRING setGameSaveCounter(0)
10269: PPUSH
10270: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10274: LD_STRING initStreamRollete();
10276: PPUSH
10277: CALL_OW 559
// InitStreamMode ;
10281: CALL 11607 0 0
// DefineStreamItems ( false ) ;
10285: LD_INT 0
10287: PPUSH
10288: CALL 12071 0 1
// end ;
10292: END
// export function SOS_MapStart ( ) ; begin
10293: LD_INT 0
10295: PPUSH
// if streamModeActive then
10296: LD_EXP 44
10300: IFFALSE 10309
// DefineStreamItems ( true ) ;
10302: LD_INT 1
10304: PPUSH
10305: CALL 12071 0 1
// UpdateLuaVariables ( ) ;
10309: CALL 10326 0 0
// UpdateFactoryWaypoints ( ) ;
10313: CALL 24932 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10317: CALL 25189 0 0
// end ;
10321: LD_VAR 0 1
10325: RET
// function UpdateLuaVariables ( ) ; begin
10326: LD_INT 0
10328: PPUSH
// if globalGameSaveCounter then
10329: LD_EXP 43
10333: IFFALSE 10367
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10335: LD_ADDR_EXP 43
10339: PUSH
10340: LD_EXP 43
10344: PPUSH
10345: CALL 69309 0 1
10349: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10350: LD_STRING setGameSaveCounter(
10352: PUSH
10353: LD_EXP 43
10357: STR
10358: PUSH
10359: LD_STRING )
10361: STR
10362: PPUSH
10363: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10367: LD_STRING setGameDifficulty(
10369: PUSH
10370: LD_OWVAR 67
10374: STR
10375: PUSH
10376: LD_STRING )
10378: STR
10379: PPUSH
10380: CALL_OW 559
// end ;
10384: LD_VAR 0 1
10388: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10389: LD_INT 0
10391: PPUSH
// if p2 = stream_mode then
10392: LD_VAR 0 2
10396: PUSH
10397: LD_INT 100
10399: EQUAL
10400: IFFALSE 11403
// begin if not StreamModeActive then
10402: LD_EXP 44
10406: NOT
10407: IFFALSE 10417
// StreamModeActive := true ;
10409: LD_ADDR_EXP 44
10413: PUSH
10414: LD_INT 1
10416: ST_TO_ADDR
// if p3 = 0 then
10417: LD_VAR 0 3
10421: PUSH
10422: LD_INT 0
10424: EQUAL
10425: IFFALSE 10431
// InitStreamMode ;
10427: CALL 11607 0 0
// if p3 = 1 then
10431: LD_VAR 0 3
10435: PUSH
10436: LD_INT 1
10438: EQUAL
10439: IFFALSE 10449
// sRocket := true ;
10441: LD_ADDR_EXP 49
10445: PUSH
10446: LD_INT 1
10448: ST_TO_ADDR
// if p3 = 2 then
10449: LD_VAR 0 3
10453: PUSH
10454: LD_INT 2
10456: EQUAL
10457: IFFALSE 10467
// sSpeed := true ;
10459: LD_ADDR_EXP 48
10463: PUSH
10464: LD_INT 1
10466: ST_TO_ADDR
// if p3 = 3 then
10467: LD_VAR 0 3
10471: PUSH
10472: LD_INT 3
10474: EQUAL
10475: IFFALSE 10485
// sEngine := true ;
10477: LD_ADDR_EXP 50
10481: PUSH
10482: LD_INT 1
10484: ST_TO_ADDR
// if p3 = 4 then
10485: LD_VAR 0 3
10489: PUSH
10490: LD_INT 4
10492: EQUAL
10493: IFFALSE 10503
// sSpec := true ;
10495: LD_ADDR_EXP 47
10499: PUSH
10500: LD_INT 1
10502: ST_TO_ADDR
// if p3 = 5 then
10503: LD_VAR 0 3
10507: PUSH
10508: LD_INT 5
10510: EQUAL
10511: IFFALSE 10521
// sLevel := true ;
10513: LD_ADDR_EXP 51
10517: PUSH
10518: LD_INT 1
10520: ST_TO_ADDR
// if p3 = 6 then
10521: LD_VAR 0 3
10525: PUSH
10526: LD_INT 6
10528: EQUAL
10529: IFFALSE 10539
// sArmoury := true ;
10531: LD_ADDR_EXP 52
10535: PUSH
10536: LD_INT 1
10538: ST_TO_ADDR
// if p3 = 7 then
10539: LD_VAR 0 3
10543: PUSH
10544: LD_INT 7
10546: EQUAL
10547: IFFALSE 10557
// sRadar := true ;
10549: LD_ADDR_EXP 53
10553: PUSH
10554: LD_INT 1
10556: ST_TO_ADDR
// if p3 = 8 then
10557: LD_VAR 0 3
10561: PUSH
10562: LD_INT 8
10564: EQUAL
10565: IFFALSE 10575
// sBunker := true ;
10567: LD_ADDR_EXP 54
10571: PUSH
10572: LD_INT 1
10574: ST_TO_ADDR
// if p3 = 9 then
10575: LD_VAR 0 3
10579: PUSH
10580: LD_INT 9
10582: EQUAL
10583: IFFALSE 10593
// sHack := true ;
10585: LD_ADDR_EXP 55
10589: PUSH
10590: LD_INT 1
10592: ST_TO_ADDR
// if p3 = 10 then
10593: LD_VAR 0 3
10597: PUSH
10598: LD_INT 10
10600: EQUAL
10601: IFFALSE 10611
// sFire := true ;
10603: LD_ADDR_EXP 56
10607: PUSH
10608: LD_INT 1
10610: ST_TO_ADDR
// if p3 = 11 then
10611: LD_VAR 0 3
10615: PUSH
10616: LD_INT 11
10618: EQUAL
10619: IFFALSE 10629
// sRefresh := true ;
10621: LD_ADDR_EXP 57
10625: PUSH
10626: LD_INT 1
10628: ST_TO_ADDR
// if p3 = 12 then
10629: LD_VAR 0 3
10633: PUSH
10634: LD_INT 12
10636: EQUAL
10637: IFFALSE 10647
// sExp := true ;
10639: LD_ADDR_EXP 58
10643: PUSH
10644: LD_INT 1
10646: ST_TO_ADDR
// if p3 = 13 then
10647: LD_VAR 0 3
10651: PUSH
10652: LD_INT 13
10654: EQUAL
10655: IFFALSE 10665
// sDepot := true ;
10657: LD_ADDR_EXP 59
10661: PUSH
10662: LD_INT 1
10664: ST_TO_ADDR
// if p3 = 14 then
10665: LD_VAR 0 3
10669: PUSH
10670: LD_INT 14
10672: EQUAL
10673: IFFALSE 10683
// sFlag := true ;
10675: LD_ADDR_EXP 60
10679: PUSH
10680: LD_INT 1
10682: ST_TO_ADDR
// if p3 = 15 then
10683: LD_VAR 0 3
10687: PUSH
10688: LD_INT 15
10690: EQUAL
10691: IFFALSE 10701
// sKamikadze := true ;
10693: LD_ADDR_EXP 68
10697: PUSH
10698: LD_INT 1
10700: ST_TO_ADDR
// if p3 = 16 then
10701: LD_VAR 0 3
10705: PUSH
10706: LD_INT 16
10708: EQUAL
10709: IFFALSE 10719
// sTroll := true ;
10711: LD_ADDR_EXP 69
10715: PUSH
10716: LD_INT 1
10718: ST_TO_ADDR
// if p3 = 17 then
10719: LD_VAR 0 3
10723: PUSH
10724: LD_INT 17
10726: EQUAL
10727: IFFALSE 10737
// sSlow := true ;
10729: LD_ADDR_EXP 70
10733: PUSH
10734: LD_INT 1
10736: ST_TO_ADDR
// if p3 = 18 then
10737: LD_VAR 0 3
10741: PUSH
10742: LD_INT 18
10744: EQUAL
10745: IFFALSE 10755
// sLack := true ;
10747: LD_ADDR_EXP 71
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// if p3 = 19 then
10755: LD_VAR 0 3
10759: PUSH
10760: LD_INT 19
10762: EQUAL
10763: IFFALSE 10773
// sTank := true ;
10765: LD_ADDR_EXP 73
10769: PUSH
10770: LD_INT 1
10772: ST_TO_ADDR
// if p3 = 20 then
10773: LD_VAR 0 3
10777: PUSH
10778: LD_INT 20
10780: EQUAL
10781: IFFALSE 10791
// sRemote := true ;
10783: LD_ADDR_EXP 74
10787: PUSH
10788: LD_INT 1
10790: ST_TO_ADDR
// if p3 = 21 then
10791: LD_VAR 0 3
10795: PUSH
10796: LD_INT 21
10798: EQUAL
10799: IFFALSE 10809
// sPowell := true ;
10801: LD_ADDR_EXP 75
10805: PUSH
10806: LD_INT 1
10808: ST_TO_ADDR
// if p3 = 22 then
10809: LD_VAR 0 3
10813: PUSH
10814: LD_INT 22
10816: EQUAL
10817: IFFALSE 10827
// sTeleport := true ;
10819: LD_ADDR_EXP 78
10823: PUSH
10824: LD_INT 1
10826: ST_TO_ADDR
// if p3 = 23 then
10827: LD_VAR 0 3
10831: PUSH
10832: LD_INT 23
10834: EQUAL
10835: IFFALSE 10845
// sOilTower := true ;
10837: LD_ADDR_EXP 80
10841: PUSH
10842: LD_INT 1
10844: ST_TO_ADDR
// if p3 = 24 then
10845: LD_VAR 0 3
10849: PUSH
10850: LD_INT 24
10852: EQUAL
10853: IFFALSE 10863
// sShovel := true ;
10855: LD_ADDR_EXP 81
10859: PUSH
10860: LD_INT 1
10862: ST_TO_ADDR
// if p3 = 25 then
10863: LD_VAR 0 3
10867: PUSH
10868: LD_INT 25
10870: EQUAL
10871: IFFALSE 10881
// sSheik := true ;
10873: LD_ADDR_EXP 82
10877: PUSH
10878: LD_INT 1
10880: ST_TO_ADDR
// if p3 = 26 then
10881: LD_VAR 0 3
10885: PUSH
10886: LD_INT 26
10888: EQUAL
10889: IFFALSE 10899
// sEarthquake := true ;
10891: LD_ADDR_EXP 84
10895: PUSH
10896: LD_INT 1
10898: ST_TO_ADDR
// if p3 = 27 then
10899: LD_VAR 0 3
10903: PUSH
10904: LD_INT 27
10906: EQUAL
10907: IFFALSE 10917
// sAI := true ;
10909: LD_ADDR_EXP 85
10913: PUSH
10914: LD_INT 1
10916: ST_TO_ADDR
// if p3 = 28 then
10917: LD_VAR 0 3
10921: PUSH
10922: LD_INT 28
10924: EQUAL
10925: IFFALSE 10935
// sCargo := true ;
10927: LD_ADDR_EXP 88
10931: PUSH
10932: LD_INT 1
10934: ST_TO_ADDR
// if p3 = 29 then
10935: LD_VAR 0 3
10939: PUSH
10940: LD_INT 29
10942: EQUAL
10943: IFFALSE 10953
// sDLaser := true ;
10945: LD_ADDR_EXP 89
10949: PUSH
10950: LD_INT 1
10952: ST_TO_ADDR
// if p3 = 30 then
10953: LD_VAR 0 3
10957: PUSH
10958: LD_INT 30
10960: EQUAL
10961: IFFALSE 10971
// sExchange := true ;
10963: LD_ADDR_EXP 90
10967: PUSH
10968: LD_INT 1
10970: ST_TO_ADDR
// if p3 = 31 then
10971: LD_VAR 0 3
10975: PUSH
10976: LD_INT 31
10978: EQUAL
10979: IFFALSE 10989
// sFac := true ;
10981: LD_ADDR_EXP 91
10985: PUSH
10986: LD_INT 1
10988: ST_TO_ADDR
// if p3 = 32 then
10989: LD_VAR 0 3
10993: PUSH
10994: LD_INT 32
10996: EQUAL
10997: IFFALSE 11007
// sPower := true ;
10999: LD_ADDR_EXP 92
11003: PUSH
11004: LD_INT 1
11006: ST_TO_ADDR
// if p3 = 33 then
11007: LD_VAR 0 3
11011: PUSH
11012: LD_INT 33
11014: EQUAL
11015: IFFALSE 11025
// sRandom := true ;
11017: LD_ADDR_EXP 93
11021: PUSH
11022: LD_INT 1
11024: ST_TO_ADDR
// if p3 = 34 then
11025: LD_VAR 0 3
11029: PUSH
11030: LD_INT 34
11032: EQUAL
11033: IFFALSE 11043
// sShield := true ;
11035: LD_ADDR_EXP 94
11039: PUSH
11040: LD_INT 1
11042: ST_TO_ADDR
// if p3 = 35 then
11043: LD_VAR 0 3
11047: PUSH
11048: LD_INT 35
11050: EQUAL
11051: IFFALSE 11061
// sTime := true ;
11053: LD_ADDR_EXP 95
11057: PUSH
11058: LD_INT 1
11060: ST_TO_ADDR
// if p3 = 36 then
11061: LD_VAR 0 3
11065: PUSH
11066: LD_INT 36
11068: EQUAL
11069: IFFALSE 11079
// sTools := true ;
11071: LD_ADDR_EXP 96
11075: PUSH
11076: LD_INT 1
11078: ST_TO_ADDR
// if p3 = 101 then
11079: LD_VAR 0 3
11083: PUSH
11084: LD_INT 101
11086: EQUAL
11087: IFFALSE 11097
// sSold := true ;
11089: LD_ADDR_EXP 61
11093: PUSH
11094: LD_INT 1
11096: ST_TO_ADDR
// if p3 = 102 then
11097: LD_VAR 0 3
11101: PUSH
11102: LD_INT 102
11104: EQUAL
11105: IFFALSE 11115
// sDiff := true ;
11107: LD_ADDR_EXP 62
11111: PUSH
11112: LD_INT 1
11114: ST_TO_ADDR
// if p3 = 103 then
11115: LD_VAR 0 3
11119: PUSH
11120: LD_INT 103
11122: EQUAL
11123: IFFALSE 11133
// sFog := true ;
11125: LD_ADDR_EXP 65
11129: PUSH
11130: LD_INT 1
11132: ST_TO_ADDR
// if p3 = 104 then
11133: LD_VAR 0 3
11137: PUSH
11138: LD_INT 104
11140: EQUAL
11141: IFFALSE 11151
// sReset := true ;
11143: LD_ADDR_EXP 66
11147: PUSH
11148: LD_INT 1
11150: ST_TO_ADDR
// if p3 = 105 then
11151: LD_VAR 0 3
11155: PUSH
11156: LD_INT 105
11158: EQUAL
11159: IFFALSE 11169
// sSun := true ;
11161: LD_ADDR_EXP 67
11165: PUSH
11166: LD_INT 1
11168: ST_TO_ADDR
// if p3 = 106 then
11169: LD_VAR 0 3
11173: PUSH
11174: LD_INT 106
11176: EQUAL
11177: IFFALSE 11187
// sTiger := true ;
11179: LD_ADDR_EXP 63
11183: PUSH
11184: LD_INT 1
11186: ST_TO_ADDR
// if p3 = 107 then
11187: LD_VAR 0 3
11191: PUSH
11192: LD_INT 107
11194: EQUAL
11195: IFFALSE 11205
// sBomb := true ;
11197: LD_ADDR_EXP 64
11201: PUSH
11202: LD_INT 1
11204: ST_TO_ADDR
// if p3 = 108 then
11205: LD_VAR 0 3
11209: PUSH
11210: LD_INT 108
11212: EQUAL
11213: IFFALSE 11223
// sWound := true ;
11215: LD_ADDR_EXP 72
11219: PUSH
11220: LD_INT 1
11222: ST_TO_ADDR
// if p3 = 109 then
11223: LD_VAR 0 3
11227: PUSH
11228: LD_INT 109
11230: EQUAL
11231: IFFALSE 11241
// sBetray := true ;
11233: LD_ADDR_EXP 76
11237: PUSH
11238: LD_INT 1
11240: ST_TO_ADDR
// if p3 = 110 then
11241: LD_VAR 0 3
11245: PUSH
11246: LD_INT 110
11248: EQUAL
11249: IFFALSE 11259
// sContamin := true ;
11251: LD_ADDR_EXP 77
11255: PUSH
11256: LD_INT 1
11258: ST_TO_ADDR
// if p3 = 111 then
11259: LD_VAR 0 3
11263: PUSH
11264: LD_INT 111
11266: EQUAL
11267: IFFALSE 11277
// sOil := true ;
11269: LD_ADDR_EXP 79
11273: PUSH
11274: LD_INT 1
11276: ST_TO_ADDR
// if p3 = 112 then
11277: LD_VAR 0 3
11281: PUSH
11282: LD_INT 112
11284: EQUAL
11285: IFFALSE 11295
// sStu := true ;
11287: LD_ADDR_EXP 83
11291: PUSH
11292: LD_INT 1
11294: ST_TO_ADDR
// if p3 = 113 then
11295: LD_VAR 0 3
11299: PUSH
11300: LD_INT 113
11302: EQUAL
11303: IFFALSE 11313
// sBazooka := true ;
11305: LD_ADDR_EXP 86
11309: PUSH
11310: LD_INT 1
11312: ST_TO_ADDR
// if p3 = 114 then
11313: LD_VAR 0 3
11317: PUSH
11318: LD_INT 114
11320: EQUAL
11321: IFFALSE 11331
// sMortar := true ;
11323: LD_ADDR_EXP 87
11327: PUSH
11328: LD_INT 1
11330: ST_TO_ADDR
// if p3 = 115 then
11331: LD_VAR 0 3
11335: PUSH
11336: LD_INT 115
11338: EQUAL
11339: IFFALSE 11349
// sRanger := true ;
11341: LD_ADDR_EXP 97
11345: PUSH
11346: LD_INT 1
11348: ST_TO_ADDR
// if p3 = 116 then
11349: LD_VAR 0 3
11353: PUSH
11354: LD_INT 116
11356: EQUAL
11357: IFFALSE 11367
// sComputer := true ;
11359: LD_ADDR_EXP 98
11363: PUSH
11364: LD_INT 1
11366: ST_TO_ADDR
// if p3 = 117 then
11367: LD_VAR 0 3
11371: PUSH
11372: LD_INT 117
11374: EQUAL
11375: IFFALSE 11385
// s30 := true ;
11377: LD_ADDR_EXP 99
11381: PUSH
11382: LD_INT 1
11384: ST_TO_ADDR
// if p3 = 118 then
11385: LD_VAR 0 3
11389: PUSH
11390: LD_INT 118
11392: EQUAL
11393: IFFALSE 11403
// s60 := true ;
11395: LD_ADDR_EXP 100
11399: PUSH
11400: LD_INT 1
11402: ST_TO_ADDR
// end ; if p2 = hack_mode then
11403: LD_VAR 0 2
11407: PUSH
11408: LD_INT 101
11410: EQUAL
11411: IFFALSE 11539
// begin case p3 of 1 :
11413: LD_VAR 0 3
11417: PUSH
11418: LD_INT 1
11420: DOUBLE
11421: EQUAL
11422: IFTRUE 11426
11424: GO 11433
11426: POP
// hHackUnlimitedResources ; 2 :
11427: CALL 23678 0 0
11431: GO 11539
11433: LD_INT 2
11435: DOUBLE
11436: EQUAL
11437: IFTRUE 11441
11439: GO 11448
11441: POP
// hHackSetLevel10 ; 3 :
11442: CALL 23811 0 0
11446: GO 11539
11448: LD_INT 3
11450: DOUBLE
11451: EQUAL
11452: IFTRUE 11456
11454: GO 11463
11456: POP
// hHackSetLevel10YourUnits ; 4 :
11457: CALL 23896 0 0
11461: GO 11539
11463: LD_INT 4
11465: DOUBLE
11466: EQUAL
11467: IFTRUE 11471
11469: GO 11478
11471: POP
// hHackInvincible ; 5 :
11472: CALL 24344 0 0
11476: GO 11539
11478: LD_INT 5
11480: DOUBLE
11481: EQUAL
11482: IFTRUE 11486
11484: GO 11493
11486: POP
// hHackInvisible ; 6 :
11487: CALL 24455 0 0
11491: GO 11539
11493: LD_INT 6
11495: DOUBLE
11496: EQUAL
11497: IFTRUE 11501
11499: GO 11508
11501: POP
// hHackChangeYourSide ; 7 :
11502: CALL 24512 0 0
11506: GO 11539
11508: LD_INT 7
11510: DOUBLE
11511: EQUAL
11512: IFTRUE 11516
11514: GO 11523
11516: POP
// hHackChangeUnitSide ; 8 :
11517: CALL 24554 0 0
11521: GO 11539
11523: LD_INT 8
11525: DOUBLE
11526: EQUAL
11527: IFTRUE 11531
11529: GO 11538
11531: POP
// hHackFog ; end ;
11532: CALL 24655 0 0
11536: GO 11539
11538: POP
// end ; if p2 = game_save_mode then
11539: LD_VAR 0 2
11543: PUSH
11544: LD_INT 102
11546: EQUAL
11547: IFFALSE 11602
// begin if p3 = 1 then
11549: LD_VAR 0 3
11553: PUSH
11554: LD_INT 1
11556: EQUAL
11557: IFFALSE 11569
// globalGameSaveCounter := p4 ;
11559: LD_ADDR_EXP 43
11563: PUSH
11564: LD_VAR 0 4
11568: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11569: LD_VAR 0 3
11573: PUSH
11574: LD_INT 2
11576: EQUAL
11577: PUSH
11578: LD_EXP 43
11582: AND
11583: IFFALSE 11602
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11585: LD_STRING setGameSaveCounter(
11587: PUSH
11588: LD_EXP 43
11592: STR
11593: PUSH
11594: LD_STRING )
11596: STR
11597: PPUSH
11598: CALL_OW 559
// end ; end ;
11602: LD_VAR 0 7
11606: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11607: LD_INT 0
11609: PPUSH
// streamModeActive := false ;
11610: LD_ADDR_EXP 44
11614: PUSH
11615: LD_INT 0
11617: ST_TO_ADDR
// normalCounter := 36 ;
11618: LD_ADDR_EXP 45
11622: PUSH
11623: LD_INT 36
11625: ST_TO_ADDR
// hardcoreCounter := 18 ;
11626: LD_ADDR_EXP 46
11630: PUSH
11631: LD_INT 18
11633: ST_TO_ADDR
// sRocket := false ;
11634: LD_ADDR_EXP 49
11638: PUSH
11639: LD_INT 0
11641: ST_TO_ADDR
// sSpeed := false ;
11642: LD_ADDR_EXP 48
11646: PUSH
11647: LD_INT 0
11649: ST_TO_ADDR
// sEngine := false ;
11650: LD_ADDR_EXP 50
11654: PUSH
11655: LD_INT 0
11657: ST_TO_ADDR
// sSpec := false ;
11658: LD_ADDR_EXP 47
11662: PUSH
11663: LD_INT 0
11665: ST_TO_ADDR
// sLevel := false ;
11666: LD_ADDR_EXP 51
11670: PUSH
11671: LD_INT 0
11673: ST_TO_ADDR
// sArmoury := false ;
11674: LD_ADDR_EXP 52
11678: PUSH
11679: LD_INT 0
11681: ST_TO_ADDR
// sRadar := false ;
11682: LD_ADDR_EXP 53
11686: PUSH
11687: LD_INT 0
11689: ST_TO_ADDR
// sBunker := false ;
11690: LD_ADDR_EXP 54
11694: PUSH
11695: LD_INT 0
11697: ST_TO_ADDR
// sHack := false ;
11698: LD_ADDR_EXP 55
11702: PUSH
11703: LD_INT 0
11705: ST_TO_ADDR
// sFire := false ;
11706: LD_ADDR_EXP 56
11710: PUSH
11711: LD_INT 0
11713: ST_TO_ADDR
// sRefresh := false ;
11714: LD_ADDR_EXP 57
11718: PUSH
11719: LD_INT 0
11721: ST_TO_ADDR
// sExp := false ;
11722: LD_ADDR_EXP 58
11726: PUSH
11727: LD_INT 0
11729: ST_TO_ADDR
// sDepot := false ;
11730: LD_ADDR_EXP 59
11734: PUSH
11735: LD_INT 0
11737: ST_TO_ADDR
// sFlag := false ;
11738: LD_ADDR_EXP 60
11742: PUSH
11743: LD_INT 0
11745: ST_TO_ADDR
// sKamikadze := false ;
11746: LD_ADDR_EXP 68
11750: PUSH
11751: LD_INT 0
11753: ST_TO_ADDR
// sTroll := false ;
11754: LD_ADDR_EXP 69
11758: PUSH
11759: LD_INT 0
11761: ST_TO_ADDR
// sSlow := false ;
11762: LD_ADDR_EXP 70
11766: PUSH
11767: LD_INT 0
11769: ST_TO_ADDR
// sLack := false ;
11770: LD_ADDR_EXP 71
11774: PUSH
11775: LD_INT 0
11777: ST_TO_ADDR
// sTank := false ;
11778: LD_ADDR_EXP 73
11782: PUSH
11783: LD_INT 0
11785: ST_TO_ADDR
// sRemote := false ;
11786: LD_ADDR_EXP 74
11790: PUSH
11791: LD_INT 0
11793: ST_TO_ADDR
// sPowell := false ;
11794: LD_ADDR_EXP 75
11798: PUSH
11799: LD_INT 0
11801: ST_TO_ADDR
// sTeleport := false ;
11802: LD_ADDR_EXP 78
11806: PUSH
11807: LD_INT 0
11809: ST_TO_ADDR
// sOilTower := false ;
11810: LD_ADDR_EXP 80
11814: PUSH
11815: LD_INT 0
11817: ST_TO_ADDR
// sShovel := false ;
11818: LD_ADDR_EXP 81
11822: PUSH
11823: LD_INT 0
11825: ST_TO_ADDR
// sSheik := false ;
11826: LD_ADDR_EXP 82
11830: PUSH
11831: LD_INT 0
11833: ST_TO_ADDR
// sEarthquake := false ;
11834: LD_ADDR_EXP 84
11838: PUSH
11839: LD_INT 0
11841: ST_TO_ADDR
// sAI := false ;
11842: LD_ADDR_EXP 85
11846: PUSH
11847: LD_INT 0
11849: ST_TO_ADDR
// sCargo := false ;
11850: LD_ADDR_EXP 88
11854: PUSH
11855: LD_INT 0
11857: ST_TO_ADDR
// sDLaser := false ;
11858: LD_ADDR_EXP 89
11862: PUSH
11863: LD_INT 0
11865: ST_TO_ADDR
// sExchange := false ;
11866: LD_ADDR_EXP 90
11870: PUSH
11871: LD_INT 0
11873: ST_TO_ADDR
// sFac := false ;
11874: LD_ADDR_EXP 91
11878: PUSH
11879: LD_INT 0
11881: ST_TO_ADDR
// sPower := false ;
11882: LD_ADDR_EXP 92
11886: PUSH
11887: LD_INT 0
11889: ST_TO_ADDR
// sRandom := false ;
11890: LD_ADDR_EXP 93
11894: PUSH
11895: LD_INT 0
11897: ST_TO_ADDR
// sShield := false ;
11898: LD_ADDR_EXP 94
11902: PUSH
11903: LD_INT 0
11905: ST_TO_ADDR
// sTime := false ;
11906: LD_ADDR_EXP 95
11910: PUSH
11911: LD_INT 0
11913: ST_TO_ADDR
// sTools := false ;
11914: LD_ADDR_EXP 96
11918: PUSH
11919: LD_INT 0
11921: ST_TO_ADDR
// sSold := false ;
11922: LD_ADDR_EXP 61
11926: PUSH
11927: LD_INT 0
11929: ST_TO_ADDR
// sDiff := false ;
11930: LD_ADDR_EXP 62
11934: PUSH
11935: LD_INT 0
11937: ST_TO_ADDR
// sFog := false ;
11938: LD_ADDR_EXP 65
11942: PUSH
11943: LD_INT 0
11945: ST_TO_ADDR
// sReset := false ;
11946: LD_ADDR_EXP 66
11950: PUSH
11951: LD_INT 0
11953: ST_TO_ADDR
// sSun := false ;
11954: LD_ADDR_EXP 67
11958: PUSH
11959: LD_INT 0
11961: ST_TO_ADDR
// sTiger := false ;
11962: LD_ADDR_EXP 63
11966: PUSH
11967: LD_INT 0
11969: ST_TO_ADDR
// sBomb := false ;
11970: LD_ADDR_EXP 64
11974: PUSH
11975: LD_INT 0
11977: ST_TO_ADDR
// sWound := false ;
11978: LD_ADDR_EXP 72
11982: PUSH
11983: LD_INT 0
11985: ST_TO_ADDR
// sBetray := false ;
11986: LD_ADDR_EXP 76
11990: PUSH
11991: LD_INT 0
11993: ST_TO_ADDR
// sContamin := false ;
11994: LD_ADDR_EXP 77
11998: PUSH
11999: LD_INT 0
12001: ST_TO_ADDR
// sOil := false ;
12002: LD_ADDR_EXP 79
12006: PUSH
12007: LD_INT 0
12009: ST_TO_ADDR
// sStu := false ;
12010: LD_ADDR_EXP 83
12014: PUSH
12015: LD_INT 0
12017: ST_TO_ADDR
// sBazooka := false ;
12018: LD_ADDR_EXP 86
12022: PUSH
12023: LD_INT 0
12025: ST_TO_ADDR
// sMortar := false ;
12026: LD_ADDR_EXP 87
12030: PUSH
12031: LD_INT 0
12033: ST_TO_ADDR
// sRanger := false ;
12034: LD_ADDR_EXP 97
12038: PUSH
12039: LD_INT 0
12041: ST_TO_ADDR
// sComputer := false ;
12042: LD_ADDR_EXP 98
12046: PUSH
12047: LD_INT 0
12049: ST_TO_ADDR
// s30 := false ;
12050: LD_ADDR_EXP 99
12054: PUSH
12055: LD_INT 0
12057: ST_TO_ADDR
// s60 := false ;
12058: LD_ADDR_EXP 100
12062: PUSH
12063: LD_INT 0
12065: ST_TO_ADDR
// end ;
12066: LD_VAR 0 1
12070: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12071: LD_INT 0
12073: PPUSH
12074: PPUSH
12075: PPUSH
12076: PPUSH
12077: PPUSH
12078: PPUSH
12079: PPUSH
// result := [ ] ;
12080: LD_ADDR_VAR 0 2
12084: PUSH
12085: EMPTY
12086: ST_TO_ADDR
// if campaign_id = 1 then
12087: LD_OWVAR 69
12091: PUSH
12092: LD_INT 1
12094: EQUAL
12095: IFFALSE 15261
// begin case mission_number of 1 :
12097: LD_OWVAR 70
12101: PUSH
12102: LD_INT 1
12104: DOUBLE
12105: EQUAL
12106: IFTRUE 12110
12108: GO 12186
12110: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12111: LD_ADDR_VAR 0 2
12115: PUSH
12116: LD_INT 2
12118: PUSH
12119: LD_INT 4
12121: PUSH
12122: LD_INT 11
12124: PUSH
12125: LD_INT 12
12127: PUSH
12128: LD_INT 15
12130: PUSH
12131: LD_INT 16
12133: PUSH
12134: LD_INT 22
12136: PUSH
12137: LD_INT 23
12139: PUSH
12140: LD_INT 26
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 101
12156: PUSH
12157: LD_INT 102
12159: PUSH
12160: LD_INT 106
12162: PUSH
12163: LD_INT 116
12165: PUSH
12166: LD_INT 117
12168: PUSH
12169: LD_INT 118
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: ST_TO_ADDR
12184: GO 15259
12186: LD_INT 2
12188: DOUBLE
12189: EQUAL
12190: IFTRUE 12194
12192: GO 12278
12194: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12195: LD_ADDR_VAR 0 2
12199: PUSH
12200: LD_INT 2
12202: PUSH
12203: LD_INT 4
12205: PUSH
12206: LD_INT 11
12208: PUSH
12209: LD_INT 12
12211: PUSH
12212: LD_INT 15
12214: PUSH
12215: LD_INT 16
12217: PUSH
12218: LD_INT 22
12220: PUSH
12221: LD_INT 23
12223: PUSH
12224: LD_INT 26
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: PUSH
12238: LD_INT 101
12240: PUSH
12241: LD_INT 102
12243: PUSH
12244: LD_INT 105
12246: PUSH
12247: LD_INT 106
12249: PUSH
12250: LD_INT 108
12252: PUSH
12253: LD_INT 116
12255: PUSH
12256: LD_INT 117
12258: PUSH
12259: LD_INT 118
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: ST_TO_ADDR
12276: GO 15259
12278: LD_INT 3
12280: DOUBLE
12281: EQUAL
12282: IFTRUE 12286
12284: GO 12374
12286: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12287: LD_ADDR_VAR 0 2
12291: PUSH
12292: LD_INT 2
12294: PUSH
12295: LD_INT 4
12297: PUSH
12298: LD_INT 5
12300: PUSH
12301: LD_INT 11
12303: PUSH
12304: LD_INT 12
12306: PUSH
12307: LD_INT 15
12309: PUSH
12310: LD_INT 16
12312: PUSH
12313: LD_INT 22
12315: PUSH
12316: LD_INT 26
12318: PUSH
12319: LD_INT 36
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 101
12336: PUSH
12337: LD_INT 102
12339: PUSH
12340: LD_INT 105
12342: PUSH
12343: LD_INT 106
12345: PUSH
12346: LD_INT 108
12348: PUSH
12349: LD_INT 116
12351: PUSH
12352: LD_INT 117
12354: PUSH
12355: LD_INT 118
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: ST_TO_ADDR
12372: GO 15259
12374: LD_INT 4
12376: DOUBLE
12377: EQUAL
12378: IFTRUE 12382
12380: GO 12478
12382: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12383: LD_ADDR_VAR 0 2
12387: PUSH
12388: LD_INT 2
12390: PUSH
12391: LD_INT 4
12393: PUSH
12394: LD_INT 5
12396: PUSH
12397: LD_INT 8
12399: PUSH
12400: LD_INT 11
12402: PUSH
12403: LD_INT 12
12405: PUSH
12406: LD_INT 15
12408: PUSH
12409: LD_INT 16
12411: PUSH
12412: LD_INT 22
12414: PUSH
12415: LD_INT 23
12417: PUSH
12418: LD_INT 26
12420: PUSH
12421: LD_INT 36
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 101
12440: PUSH
12441: LD_INT 102
12443: PUSH
12444: LD_INT 105
12446: PUSH
12447: LD_INT 106
12449: PUSH
12450: LD_INT 108
12452: PUSH
12453: LD_INT 116
12455: PUSH
12456: LD_INT 117
12458: PUSH
12459: LD_INT 118
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: ST_TO_ADDR
12476: GO 15259
12478: LD_INT 5
12480: DOUBLE
12481: EQUAL
12482: IFTRUE 12486
12484: GO 12598
12486: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12487: LD_ADDR_VAR 0 2
12491: PUSH
12492: LD_INT 2
12494: PUSH
12495: LD_INT 4
12497: PUSH
12498: LD_INT 5
12500: PUSH
12501: LD_INT 6
12503: PUSH
12504: LD_INT 8
12506: PUSH
12507: LD_INT 11
12509: PUSH
12510: LD_INT 12
12512: PUSH
12513: LD_INT 15
12515: PUSH
12516: LD_INT 16
12518: PUSH
12519: LD_INT 22
12521: PUSH
12522: LD_INT 23
12524: PUSH
12525: LD_INT 25
12527: PUSH
12528: LD_INT 26
12530: PUSH
12531: LD_INT 36
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: PUSH
12550: LD_INT 101
12552: PUSH
12553: LD_INT 102
12555: PUSH
12556: LD_INT 105
12558: PUSH
12559: LD_INT 106
12561: PUSH
12562: LD_INT 108
12564: PUSH
12565: LD_INT 109
12567: PUSH
12568: LD_INT 112
12570: PUSH
12571: LD_INT 116
12573: PUSH
12574: LD_INT 117
12576: PUSH
12577: LD_INT 118
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: ST_TO_ADDR
12596: GO 15259
12598: LD_INT 6
12600: DOUBLE
12601: EQUAL
12602: IFTRUE 12606
12604: GO 12738
12606: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12607: LD_ADDR_VAR 0 2
12611: PUSH
12612: LD_INT 2
12614: PUSH
12615: LD_INT 4
12617: PUSH
12618: LD_INT 5
12620: PUSH
12621: LD_INT 6
12623: PUSH
12624: LD_INT 8
12626: PUSH
12627: LD_INT 11
12629: PUSH
12630: LD_INT 12
12632: PUSH
12633: LD_INT 15
12635: PUSH
12636: LD_INT 16
12638: PUSH
12639: LD_INT 20
12641: PUSH
12642: LD_INT 21
12644: PUSH
12645: LD_INT 22
12647: PUSH
12648: LD_INT 23
12650: PUSH
12651: LD_INT 25
12653: PUSH
12654: LD_INT 26
12656: PUSH
12657: LD_INT 30
12659: PUSH
12660: LD_INT 31
12662: PUSH
12663: LD_INT 32
12665: PUSH
12666: LD_INT 36
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 101
12692: PUSH
12693: LD_INT 102
12695: PUSH
12696: LD_INT 105
12698: PUSH
12699: LD_INT 106
12701: PUSH
12702: LD_INT 108
12704: PUSH
12705: LD_INT 109
12707: PUSH
12708: LD_INT 112
12710: PUSH
12711: LD_INT 116
12713: PUSH
12714: LD_INT 117
12716: PUSH
12717: LD_INT 118
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: ST_TO_ADDR
12736: GO 15259
12738: LD_INT 7
12740: DOUBLE
12741: EQUAL
12742: IFTRUE 12746
12744: GO 12858
12746: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12747: LD_ADDR_VAR 0 2
12751: PUSH
12752: LD_INT 2
12754: PUSH
12755: LD_INT 4
12757: PUSH
12758: LD_INT 5
12760: PUSH
12761: LD_INT 7
12763: PUSH
12764: LD_INT 11
12766: PUSH
12767: LD_INT 12
12769: PUSH
12770: LD_INT 15
12772: PUSH
12773: LD_INT 16
12775: PUSH
12776: LD_INT 20
12778: PUSH
12779: LD_INT 21
12781: PUSH
12782: LD_INT 22
12784: PUSH
12785: LD_INT 23
12787: PUSH
12788: LD_INT 25
12790: PUSH
12791: LD_INT 26
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 101
12812: PUSH
12813: LD_INT 102
12815: PUSH
12816: LD_INT 103
12818: PUSH
12819: LD_INT 105
12821: PUSH
12822: LD_INT 106
12824: PUSH
12825: LD_INT 108
12827: PUSH
12828: LD_INT 112
12830: PUSH
12831: LD_INT 116
12833: PUSH
12834: LD_INT 117
12836: PUSH
12837: LD_INT 118
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: ST_TO_ADDR
12856: GO 15259
12858: LD_INT 8
12860: DOUBLE
12861: EQUAL
12862: IFTRUE 12866
12864: GO 13006
12866: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12867: LD_ADDR_VAR 0 2
12871: PUSH
12872: LD_INT 2
12874: PUSH
12875: LD_INT 4
12877: PUSH
12878: LD_INT 5
12880: PUSH
12881: LD_INT 6
12883: PUSH
12884: LD_INT 7
12886: PUSH
12887: LD_INT 8
12889: PUSH
12890: LD_INT 11
12892: PUSH
12893: LD_INT 12
12895: PUSH
12896: LD_INT 15
12898: PUSH
12899: LD_INT 16
12901: PUSH
12902: LD_INT 20
12904: PUSH
12905: LD_INT 21
12907: PUSH
12908: LD_INT 22
12910: PUSH
12911: LD_INT 23
12913: PUSH
12914: LD_INT 25
12916: PUSH
12917: LD_INT 26
12919: PUSH
12920: LD_INT 30
12922: PUSH
12923: LD_INT 31
12925: PUSH
12926: LD_INT 32
12928: PUSH
12929: LD_INT 36
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 101
12956: PUSH
12957: LD_INT 102
12959: PUSH
12960: LD_INT 103
12962: PUSH
12963: LD_INT 105
12965: PUSH
12966: LD_INT 106
12968: PUSH
12969: LD_INT 108
12971: PUSH
12972: LD_INT 109
12974: PUSH
12975: LD_INT 112
12977: PUSH
12978: LD_INT 116
12980: PUSH
12981: LD_INT 117
12983: PUSH
12984: LD_INT 118
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: ST_TO_ADDR
13004: GO 15259
13006: LD_INT 9
13008: DOUBLE
13009: EQUAL
13010: IFTRUE 13014
13012: GO 13162
13014: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13015: LD_ADDR_VAR 0 2
13019: PUSH
13020: LD_INT 2
13022: PUSH
13023: LD_INT 4
13025: PUSH
13026: LD_INT 5
13028: PUSH
13029: LD_INT 6
13031: PUSH
13032: LD_INT 7
13034: PUSH
13035: LD_INT 8
13037: PUSH
13038: LD_INT 11
13040: PUSH
13041: LD_INT 12
13043: PUSH
13044: LD_INT 15
13046: PUSH
13047: LD_INT 16
13049: PUSH
13050: LD_INT 20
13052: PUSH
13053: LD_INT 21
13055: PUSH
13056: LD_INT 22
13058: PUSH
13059: LD_INT 23
13061: PUSH
13062: LD_INT 25
13064: PUSH
13065: LD_INT 26
13067: PUSH
13068: LD_INT 28
13070: PUSH
13071: LD_INT 30
13073: PUSH
13074: LD_INT 31
13076: PUSH
13077: LD_INT 32
13079: PUSH
13080: LD_INT 36
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 101
13108: PUSH
13109: LD_INT 102
13111: PUSH
13112: LD_INT 103
13114: PUSH
13115: LD_INT 105
13117: PUSH
13118: LD_INT 106
13120: PUSH
13121: LD_INT 108
13123: PUSH
13124: LD_INT 109
13126: PUSH
13127: LD_INT 112
13129: PUSH
13130: LD_INT 114
13132: PUSH
13133: LD_INT 116
13135: PUSH
13136: LD_INT 117
13138: PUSH
13139: LD_INT 118
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: ST_TO_ADDR
13160: GO 15259
13162: LD_INT 10
13164: DOUBLE
13165: EQUAL
13166: IFTRUE 13170
13168: GO 13366
13170: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13171: LD_ADDR_VAR 0 2
13175: PUSH
13176: LD_INT 2
13178: PUSH
13179: LD_INT 4
13181: PUSH
13182: LD_INT 5
13184: PUSH
13185: LD_INT 6
13187: PUSH
13188: LD_INT 7
13190: PUSH
13191: LD_INT 8
13193: PUSH
13194: LD_INT 9
13196: PUSH
13197: LD_INT 10
13199: PUSH
13200: LD_INT 11
13202: PUSH
13203: LD_INT 12
13205: PUSH
13206: LD_INT 13
13208: PUSH
13209: LD_INT 14
13211: PUSH
13212: LD_INT 15
13214: PUSH
13215: LD_INT 16
13217: PUSH
13218: LD_INT 17
13220: PUSH
13221: LD_INT 18
13223: PUSH
13224: LD_INT 19
13226: PUSH
13227: LD_INT 20
13229: PUSH
13230: LD_INT 21
13232: PUSH
13233: LD_INT 22
13235: PUSH
13236: LD_INT 23
13238: PUSH
13239: LD_INT 24
13241: PUSH
13242: LD_INT 25
13244: PUSH
13245: LD_INT 26
13247: PUSH
13248: LD_INT 28
13250: PUSH
13251: LD_INT 30
13253: PUSH
13254: LD_INT 31
13256: PUSH
13257: LD_INT 32
13259: PUSH
13260: LD_INT 36
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: PUSH
13294: LD_INT 101
13296: PUSH
13297: LD_INT 102
13299: PUSH
13300: LD_INT 103
13302: PUSH
13303: LD_INT 104
13305: PUSH
13306: LD_INT 105
13308: PUSH
13309: LD_INT 106
13311: PUSH
13312: LD_INT 107
13314: PUSH
13315: LD_INT 108
13317: PUSH
13318: LD_INT 109
13320: PUSH
13321: LD_INT 110
13323: PUSH
13324: LD_INT 111
13326: PUSH
13327: LD_INT 112
13329: PUSH
13330: LD_INT 114
13332: PUSH
13333: LD_INT 116
13335: PUSH
13336: LD_INT 117
13338: PUSH
13339: LD_INT 118
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: ST_TO_ADDR
13364: GO 15259
13366: LD_INT 11
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13374
13372: GO 13578
13374: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13375: LD_ADDR_VAR 0 2
13379: PUSH
13380: LD_INT 2
13382: PUSH
13383: LD_INT 3
13385: PUSH
13386: LD_INT 4
13388: PUSH
13389: LD_INT 5
13391: PUSH
13392: LD_INT 6
13394: PUSH
13395: LD_INT 7
13397: PUSH
13398: LD_INT 8
13400: PUSH
13401: LD_INT 9
13403: PUSH
13404: LD_INT 10
13406: PUSH
13407: LD_INT 11
13409: PUSH
13410: LD_INT 12
13412: PUSH
13413: LD_INT 13
13415: PUSH
13416: LD_INT 14
13418: PUSH
13419: LD_INT 15
13421: PUSH
13422: LD_INT 16
13424: PUSH
13425: LD_INT 17
13427: PUSH
13428: LD_INT 18
13430: PUSH
13431: LD_INT 19
13433: PUSH
13434: LD_INT 20
13436: PUSH
13437: LD_INT 21
13439: PUSH
13440: LD_INT 22
13442: PUSH
13443: LD_INT 23
13445: PUSH
13446: LD_INT 24
13448: PUSH
13449: LD_INT 25
13451: PUSH
13452: LD_INT 26
13454: PUSH
13455: LD_INT 28
13457: PUSH
13458: LD_INT 30
13460: PUSH
13461: LD_INT 31
13463: PUSH
13464: LD_INT 32
13466: PUSH
13467: LD_INT 34
13469: PUSH
13470: LD_INT 36
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: PUSH
13506: LD_INT 101
13508: PUSH
13509: LD_INT 102
13511: PUSH
13512: LD_INT 103
13514: PUSH
13515: LD_INT 104
13517: PUSH
13518: LD_INT 105
13520: PUSH
13521: LD_INT 106
13523: PUSH
13524: LD_INT 107
13526: PUSH
13527: LD_INT 108
13529: PUSH
13530: LD_INT 109
13532: PUSH
13533: LD_INT 110
13535: PUSH
13536: LD_INT 111
13538: PUSH
13539: LD_INT 112
13541: PUSH
13542: LD_INT 114
13544: PUSH
13545: LD_INT 116
13547: PUSH
13548: LD_INT 117
13550: PUSH
13551: LD_INT 118
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: ST_TO_ADDR
13576: GO 15259
13578: LD_INT 12
13580: DOUBLE
13581: EQUAL
13582: IFTRUE 13586
13584: GO 13806
13586: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13587: LD_ADDR_VAR 0 2
13591: PUSH
13592: LD_INT 1
13594: PUSH
13595: LD_INT 2
13597: PUSH
13598: LD_INT 3
13600: PUSH
13601: LD_INT 4
13603: PUSH
13604: LD_INT 5
13606: PUSH
13607: LD_INT 6
13609: PUSH
13610: LD_INT 7
13612: PUSH
13613: LD_INT 8
13615: PUSH
13616: LD_INT 9
13618: PUSH
13619: LD_INT 10
13621: PUSH
13622: LD_INT 11
13624: PUSH
13625: LD_INT 12
13627: PUSH
13628: LD_INT 13
13630: PUSH
13631: LD_INT 14
13633: PUSH
13634: LD_INT 15
13636: PUSH
13637: LD_INT 16
13639: PUSH
13640: LD_INT 17
13642: PUSH
13643: LD_INT 18
13645: PUSH
13646: LD_INT 19
13648: PUSH
13649: LD_INT 20
13651: PUSH
13652: LD_INT 21
13654: PUSH
13655: LD_INT 22
13657: PUSH
13658: LD_INT 23
13660: PUSH
13661: LD_INT 24
13663: PUSH
13664: LD_INT 25
13666: PUSH
13667: LD_INT 26
13669: PUSH
13670: LD_INT 27
13672: PUSH
13673: LD_INT 28
13675: PUSH
13676: LD_INT 30
13678: PUSH
13679: LD_INT 31
13681: PUSH
13682: LD_INT 32
13684: PUSH
13685: LD_INT 33
13687: PUSH
13688: LD_INT 34
13690: PUSH
13691: LD_INT 36
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 101
13732: PUSH
13733: LD_INT 102
13735: PUSH
13736: LD_INT 103
13738: PUSH
13739: LD_INT 104
13741: PUSH
13742: LD_INT 105
13744: PUSH
13745: LD_INT 106
13747: PUSH
13748: LD_INT 107
13750: PUSH
13751: LD_INT 108
13753: PUSH
13754: LD_INT 109
13756: PUSH
13757: LD_INT 110
13759: PUSH
13760: LD_INT 111
13762: PUSH
13763: LD_INT 112
13765: PUSH
13766: LD_INT 113
13768: PUSH
13769: LD_INT 114
13771: PUSH
13772: LD_INT 116
13774: PUSH
13775: LD_INT 117
13777: PUSH
13778: LD_INT 118
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: ST_TO_ADDR
13804: GO 15259
13806: LD_INT 13
13808: DOUBLE
13809: EQUAL
13810: IFTRUE 13814
13812: GO 14022
13814: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13815: LD_ADDR_VAR 0 2
13819: PUSH
13820: LD_INT 1
13822: PUSH
13823: LD_INT 2
13825: PUSH
13826: LD_INT 3
13828: PUSH
13829: LD_INT 4
13831: PUSH
13832: LD_INT 5
13834: PUSH
13835: LD_INT 8
13837: PUSH
13838: LD_INT 9
13840: PUSH
13841: LD_INT 10
13843: PUSH
13844: LD_INT 11
13846: PUSH
13847: LD_INT 12
13849: PUSH
13850: LD_INT 14
13852: PUSH
13853: LD_INT 15
13855: PUSH
13856: LD_INT 16
13858: PUSH
13859: LD_INT 17
13861: PUSH
13862: LD_INT 18
13864: PUSH
13865: LD_INT 19
13867: PUSH
13868: LD_INT 20
13870: PUSH
13871: LD_INT 21
13873: PUSH
13874: LD_INT 22
13876: PUSH
13877: LD_INT 23
13879: PUSH
13880: LD_INT 24
13882: PUSH
13883: LD_INT 25
13885: PUSH
13886: LD_INT 26
13888: PUSH
13889: LD_INT 27
13891: PUSH
13892: LD_INT 28
13894: PUSH
13895: LD_INT 30
13897: PUSH
13898: LD_INT 31
13900: PUSH
13901: LD_INT 32
13903: PUSH
13904: LD_INT 33
13906: PUSH
13907: LD_INT 34
13909: PUSH
13910: LD_INT 36
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: PUSH
13946: LD_INT 101
13948: PUSH
13949: LD_INT 102
13951: PUSH
13952: LD_INT 103
13954: PUSH
13955: LD_INT 104
13957: PUSH
13958: LD_INT 105
13960: PUSH
13961: LD_INT 106
13963: PUSH
13964: LD_INT 107
13966: PUSH
13967: LD_INT 108
13969: PUSH
13970: LD_INT 109
13972: PUSH
13973: LD_INT 110
13975: PUSH
13976: LD_INT 111
13978: PUSH
13979: LD_INT 112
13981: PUSH
13982: LD_INT 113
13984: PUSH
13985: LD_INT 114
13987: PUSH
13988: LD_INT 116
13990: PUSH
13991: LD_INT 117
13993: PUSH
13994: LD_INT 118
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: ST_TO_ADDR
14020: GO 15259
14022: LD_INT 14
14024: DOUBLE
14025: EQUAL
14026: IFTRUE 14030
14028: GO 14254
14030: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14031: LD_ADDR_VAR 0 2
14035: PUSH
14036: LD_INT 1
14038: PUSH
14039: LD_INT 2
14041: PUSH
14042: LD_INT 3
14044: PUSH
14045: LD_INT 4
14047: PUSH
14048: LD_INT 5
14050: PUSH
14051: LD_INT 6
14053: PUSH
14054: LD_INT 7
14056: PUSH
14057: LD_INT 8
14059: PUSH
14060: LD_INT 9
14062: PUSH
14063: LD_INT 10
14065: PUSH
14066: LD_INT 11
14068: PUSH
14069: LD_INT 12
14071: PUSH
14072: LD_INT 13
14074: PUSH
14075: LD_INT 14
14077: PUSH
14078: LD_INT 15
14080: PUSH
14081: LD_INT 16
14083: PUSH
14084: LD_INT 17
14086: PUSH
14087: LD_INT 18
14089: PUSH
14090: LD_INT 19
14092: PUSH
14093: LD_INT 20
14095: PUSH
14096: LD_INT 21
14098: PUSH
14099: LD_INT 22
14101: PUSH
14102: LD_INT 23
14104: PUSH
14105: LD_INT 24
14107: PUSH
14108: LD_INT 25
14110: PUSH
14111: LD_INT 26
14113: PUSH
14114: LD_INT 27
14116: PUSH
14117: LD_INT 28
14119: PUSH
14120: LD_INT 29
14122: PUSH
14123: LD_INT 30
14125: PUSH
14126: LD_INT 31
14128: PUSH
14129: LD_INT 32
14131: PUSH
14132: LD_INT 33
14134: PUSH
14135: LD_INT 34
14137: PUSH
14138: LD_INT 36
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: PUSH
14178: LD_INT 101
14180: PUSH
14181: LD_INT 102
14183: PUSH
14184: LD_INT 103
14186: PUSH
14187: LD_INT 104
14189: PUSH
14190: LD_INT 105
14192: PUSH
14193: LD_INT 106
14195: PUSH
14196: LD_INT 107
14198: PUSH
14199: LD_INT 108
14201: PUSH
14202: LD_INT 109
14204: PUSH
14205: LD_INT 110
14207: PUSH
14208: LD_INT 111
14210: PUSH
14211: LD_INT 112
14213: PUSH
14214: LD_INT 113
14216: PUSH
14217: LD_INT 114
14219: PUSH
14220: LD_INT 116
14222: PUSH
14223: LD_INT 117
14225: PUSH
14226: LD_INT 118
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: ST_TO_ADDR
14252: GO 15259
14254: LD_INT 15
14256: DOUBLE
14257: EQUAL
14258: IFTRUE 14262
14260: GO 14486
14262: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14263: LD_ADDR_VAR 0 2
14267: PUSH
14268: LD_INT 1
14270: PUSH
14271: LD_INT 2
14273: PUSH
14274: LD_INT 3
14276: PUSH
14277: LD_INT 4
14279: PUSH
14280: LD_INT 5
14282: PUSH
14283: LD_INT 6
14285: PUSH
14286: LD_INT 7
14288: PUSH
14289: LD_INT 8
14291: PUSH
14292: LD_INT 9
14294: PUSH
14295: LD_INT 10
14297: PUSH
14298: LD_INT 11
14300: PUSH
14301: LD_INT 12
14303: PUSH
14304: LD_INT 13
14306: PUSH
14307: LD_INT 14
14309: PUSH
14310: LD_INT 15
14312: PUSH
14313: LD_INT 16
14315: PUSH
14316: LD_INT 17
14318: PUSH
14319: LD_INT 18
14321: PUSH
14322: LD_INT 19
14324: PUSH
14325: LD_INT 20
14327: PUSH
14328: LD_INT 21
14330: PUSH
14331: LD_INT 22
14333: PUSH
14334: LD_INT 23
14336: PUSH
14337: LD_INT 24
14339: PUSH
14340: LD_INT 25
14342: PUSH
14343: LD_INT 26
14345: PUSH
14346: LD_INT 27
14348: PUSH
14349: LD_INT 28
14351: PUSH
14352: LD_INT 29
14354: PUSH
14355: LD_INT 30
14357: PUSH
14358: LD_INT 31
14360: PUSH
14361: LD_INT 32
14363: PUSH
14364: LD_INT 33
14366: PUSH
14367: LD_INT 34
14369: PUSH
14370: LD_INT 36
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: PUSH
14410: LD_INT 101
14412: PUSH
14413: LD_INT 102
14415: PUSH
14416: LD_INT 103
14418: PUSH
14419: LD_INT 104
14421: PUSH
14422: LD_INT 105
14424: PUSH
14425: LD_INT 106
14427: PUSH
14428: LD_INT 107
14430: PUSH
14431: LD_INT 108
14433: PUSH
14434: LD_INT 109
14436: PUSH
14437: LD_INT 110
14439: PUSH
14440: LD_INT 111
14442: PUSH
14443: LD_INT 112
14445: PUSH
14446: LD_INT 113
14448: PUSH
14449: LD_INT 114
14451: PUSH
14452: LD_INT 116
14454: PUSH
14455: LD_INT 117
14457: PUSH
14458: LD_INT 118
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: ST_TO_ADDR
14484: GO 15259
14486: LD_INT 16
14488: DOUBLE
14489: EQUAL
14490: IFTRUE 14494
14492: GO 14630
14494: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14495: LD_ADDR_VAR 0 2
14499: PUSH
14500: LD_INT 2
14502: PUSH
14503: LD_INT 4
14505: PUSH
14506: LD_INT 5
14508: PUSH
14509: LD_INT 7
14511: PUSH
14512: LD_INT 11
14514: PUSH
14515: LD_INT 12
14517: PUSH
14518: LD_INT 15
14520: PUSH
14521: LD_INT 16
14523: PUSH
14524: LD_INT 20
14526: PUSH
14527: LD_INT 21
14529: PUSH
14530: LD_INT 22
14532: PUSH
14533: LD_INT 23
14535: PUSH
14536: LD_INT 25
14538: PUSH
14539: LD_INT 26
14541: PUSH
14542: LD_INT 30
14544: PUSH
14545: LD_INT 31
14547: PUSH
14548: LD_INT 32
14550: PUSH
14551: LD_INT 33
14553: PUSH
14554: LD_INT 34
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: PUSH
14578: LD_INT 101
14580: PUSH
14581: LD_INT 102
14583: PUSH
14584: LD_INT 103
14586: PUSH
14587: LD_INT 106
14589: PUSH
14590: LD_INT 108
14592: PUSH
14593: LD_INT 112
14595: PUSH
14596: LD_INT 113
14598: PUSH
14599: LD_INT 114
14601: PUSH
14602: LD_INT 116
14604: PUSH
14605: LD_INT 117
14607: PUSH
14608: LD_INT 118
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: ST_TO_ADDR
14628: GO 15259
14630: LD_INT 17
14632: DOUBLE
14633: EQUAL
14634: IFTRUE 14638
14636: GO 14862
14638: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14639: LD_ADDR_VAR 0 2
14643: PUSH
14644: LD_INT 1
14646: PUSH
14647: LD_INT 2
14649: PUSH
14650: LD_INT 3
14652: PUSH
14653: LD_INT 4
14655: PUSH
14656: LD_INT 5
14658: PUSH
14659: LD_INT 6
14661: PUSH
14662: LD_INT 7
14664: PUSH
14665: LD_INT 8
14667: PUSH
14668: LD_INT 9
14670: PUSH
14671: LD_INT 10
14673: PUSH
14674: LD_INT 11
14676: PUSH
14677: LD_INT 12
14679: PUSH
14680: LD_INT 13
14682: PUSH
14683: LD_INT 14
14685: PUSH
14686: LD_INT 15
14688: PUSH
14689: LD_INT 16
14691: PUSH
14692: LD_INT 17
14694: PUSH
14695: LD_INT 18
14697: PUSH
14698: LD_INT 19
14700: PUSH
14701: LD_INT 20
14703: PUSH
14704: LD_INT 21
14706: PUSH
14707: LD_INT 22
14709: PUSH
14710: LD_INT 23
14712: PUSH
14713: LD_INT 24
14715: PUSH
14716: LD_INT 25
14718: PUSH
14719: LD_INT 26
14721: PUSH
14722: LD_INT 27
14724: PUSH
14725: LD_INT 28
14727: PUSH
14728: LD_INT 29
14730: PUSH
14731: LD_INT 30
14733: PUSH
14734: LD_INT 31
14736: PUSH
14737: LD_INT 32
14739: PUSH
14740: LD_INT 33
14742: PUSH
14743: LD_INT 34
14745: PUSH
14746: LD_INT 36
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 101
14788: PUSH
14789: LD_INT 102
14791: PUSH
14792: LD_INT 103
14794: PUSH
14795: LD_INT 104
14797: PUSH
14798: LD_INT 105
14800: PUSH
14801: LD_INT 106
14803: PUSH
14804: LD_INT 107
14806: PUSH
14807: LD_INT 108
14809: PUSH
14810: LD_INT 109
14812: PUSH
14813: LD_INT 110
14815: PUSH
14816: LD_INT 111
14818: PUSH
14819: LD_INT 112
14821: PUSH
14822: LD_INT 113
14824: PUSH
14825: LD_INT 114
14827: PUSH
14828: LD_INT 116
14830: PUSH
14831: LD_INT 117
14833: PUSH
14834: LD_INT 118
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: ST_TO_ADDR
14860: GO 15259
14862: LD_INT 18
14864: DOUBLE
14865: EQUAL
14866: IFTRUE 14870
14868: GO 15018
14870: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14871: LD_ADDR_VAR 0 2
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: LD_INT 4
14881: PUSH
14882: LD_INT 5
14884: PUSH
14885: LD_INT 7
14887: PUSH
14888: LD_INT 11
14890: PUSH
14891: LD_INT 12
14893: PUSH
14894: LD_INT 15
14896: PUSH
14897: LD_INT 16
14899: PUSH
14900: LD_INT 20
14902: PUSH
14903: LD_INT 21
14905: PUSH
14906: LD_INT 22
14908: PUSH
14909: LD_INT 23
14911: PUSH
14912: LD_INT 25
14914: PUSH
14915: LD_INT 26
14917: PUSH
14918: LD_INT 30
14920: PUSH
14921: LD_INT 31
14923: PUSH
14924: LD_INT 32
14926: PUSH
14927: LD_INT 33
14929: PUSH
14930: LD_INT 34
14932: PUSH
14933: LD_INT 35
14935: PUSH
14936: LD_INT 36
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: PUSH
14962: LD_INT 101
14964: PUSH
14965: LD_INT 102
14967: PUSH
14968: LD_INT 103
14970: PUSH
14971: LD_INT 106
14973: PUSH
14974: LD_INT 108
14976: PUSH
14977: LD_INT 112
14979: PUSH
14980: LD_INT 113
14982: PUSH
14983: LD_INT 114
14985: PUSH
14986: LD_INT 115
14988: PUSH
14989: LD_INT 116
14991: PUSH
14992: LD_INT 117
14994: PUSH
14995: LD_INT 118
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: ST_TO_ADDR
15016: GO 15259
15018: LD_INT 19
15020: DOUBLE
15021: EQUAL
15022: IFTRUE 15026
15024: GO 15258
15026: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15027: LD_ADDR_VAR 0 2
15031: PUSH
15032: LD_INT 1
15034: PUSH
15035: LD_INT 2
15037: PUSH
15038: LD_INT 3
15040: PUSH
15041: LD_INT 4
15043: PUSH
15044: LD_INT 5
15046: PUSH
15047: LD_INT 6
15049: PUSH
15050: LD_INT 7
15052: PUSH
15053: LD_INT 8
15055: PUSH
15056: LD_INT 9
15058: PUSH
15059: LD_INT 10
15061: PUSH
15062: LD_INT 11
15064: PUSH
15065: LD_INT 12
15067: PUSH
15068: LD_INT 13
15070: PUSH
15071: LD_INT 14
15073: PUSH
15074: LD_INT 15
15076: PUSH
15077: LD_INT 16
15079: PUSH
15080: LD_INT 17
15082: PUSH
15083: LD_INT 18
15085: PUSH
15086: LD_INT 19
15088: PUSH
15089: LD_INT 20
15091: PUSH
15092: LD_INT 21
15094: PUSH
15095: LD_INT 22
15097: PUSH
15098: LD_INT 23
15100: PUSH
15101: LD_INT 24
15103: PUSH
15104: LD_INT 25
15106: PUSH
15107: LD_INT 26
15109: PUSH
15110: LD_INT 27
15112: PUSH
15113: LD_INT 28
15115: PUSH
15116: LD_INT 29
15118: PUSH
15119: LD_INT 30
15121: PUSH
15122: LD_INT 31
15124: PUSH
15125: LD_INT 32
15127: PUSH
15128: LD_INT 33
15130: PUSH
15131: LD_INT 34
15133: PUSH
15134: LD_INT 35
15136: PUSH
15137: LD_INT 36
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: PUSH
15178: LD_INT 101
15180: PUSH
15181: LD_INT 102
15183: PUSH
15184: LD_INT 103
15186: PUSH
15187: LD_INT 104
15189: PUSH
15190: LD_INT 105
15192: PUSH
15193: LD_INT 106
15195: PUSH
15196: LD_INT 107
15198: PUSH
15199: LD_INT 108
15201: PUSH
15202: LD_INT 109
15204: PUSH
15205: LD_INT 110
15207: PUSH
15208: LD_INT 111
15210: PUSH
15211: LD_INT 112
15213: PUSH
15214: LD_INT 113
15216: PUSH
15217: LD_INT 114
15219: PUSH
15220: LD_INT 115
15222: PUSH
15223: LD_INT 116
15225: PUSH
15226: LD_INT 117
15228: PUSH
15229: LD_INT 118
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: ST_TO_ADDR
15256: GO 15259
15258: POP
// end else
15259: GO 15490
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15261: LD_ADDR_VAR 0 2
15265: PUSH
15266: LD_INT 1
15268: PUSH
15269: LD_INT 2
15271: PUSH
15272: LD_INT 3
15274: PUSH
15275: LD_INT 4
15277: PUSH
15278: LD_INT 5
15280: PUSH
15281: LD_INT 6
15283: PUSH
15284: LD_INT 7
15286: PUSH
15287: LD_INT 8
15289: PUSH
15290: LD_INT 9
15292: PUSH
15293: LD_INT 10
15295: PUSH
15296: LD_INT 11
15298: PUSH
15299: LD_INT 12
15301: PUSH
15302: LD_INT 13
15304: PUSH
15305: LD_INT 14
15307: PUSH
15308: LD_INT 15
15310: PUSH
15311: LD_INT 16
15313: PUSH
15314: LD_INT 17
15316: PUSH
15317: LD_INT 18
15319: PUSH
15320: LD_INT 19
15322: PUSH
15323: LD_INT 20
15325: PUSH
15326: LD_INT 21
15328: PUSH
15329: LD_INT 22
15331: PUSH
15332: LD_INT 23
15334: PUSH
15335: LD_INT 24
15337: PUSH
15338: LD_INT 25
15340: PUSH
15341: LD_INT 26
15343: PUSH
15344: LD_INT 27
15346: PUSH
15347: LD_INT 28
15349: PUSH
15350: LD_INT 29
15352: PUSH
15353: LD_INT 30
15355: PUSH
15356: LD_INT 31
15358: PUSH
15359: LD_INT 32
15361: PUSH
15362: LD_INT 33
15364: PUSH
15365: LD_INT 34
15367: PUSH
15368: LD_INT 35
15370: PUSH
15371: LD_INT 36
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 101
15414: PUSH
15415: LD_INT 102
15417: PUSH
15418: LD_INT 103
15420: PUSH
15421: LD_INT 104
15423: PUSH
15424: LD_INT 105
15426: PUSH
15427: LD_INT 106
15429: PUSH
15430: LD_INT 107
15432: PUSH
15433: LD_INT 108
15435: PUSH
15436: LD_INT 109
15438: PUSH
15439: LD_INT 110
15441: PUSH
15442: LD_INT 111
15444: PUSH
15445: LD_INT 112
15447: PUSH
15448: LD_INT 113
15450: PUSH
15451: LD_INT 114
15453: PUSH
15454: LD_INT 115
15456: PUSH
15457: LD_INT 116
15459: PUSH
15460: LD_INT 117
15462: PUSH
15463: LD_INT 118
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: ST_TO_ADDR
// if result then
15490: LD_VAR 0 2
15494: IFFALSE 16280
// begin normal :=  ;
15496: LD_ADDR_VAR 0 5
15500: PUSH
15501: LD_STRING 
15503: ST_TO_ADDR
// hardcore :=  ;
15504: LD_ADDR_VAR 0 6
15508: PUSH
15509: LD_STRING 
15511: ST_TO_ADDR
// active :=  ;
15512: LD_ADDR_VAR 0 7
15516: PUSH
15517: LD_STRING 
15519: ST_TO_ADDR
// for i = 1 to normalCounter do
15520: LD_ADDR_VAR 0 8
15524: PUSH
15525: DOUBLE
15526: LD_INT 1
15528: DEC
15529: ST_TO_ADDR
15530: LD_EXP 45
15534: PUSH
15535: FOR_TO
15536: IFFALSE 15637
// begin tmp := 0 ;
15538: LD_ADDR_VAR 0 3
15542: PUSH
15543: LD_STRING 0
15545: ST_TO_ADDR
// if result [ 1 ] then
15546: LD_VAR 0 2
15550: PUSH
15551: LD_INT 1
15553: ARRAY
15554: IFFALSE 15619
// if result [ 1 ] [ 1 ] = i then
15556: LD_VAR 0 2
15560: PUSH
15561: LD_INT 1
15563: ARRAY
15564: PUSH
15565: LD_INT 1
15567: ARRAY
15568: PUSH
15569: LD_VAR 0 8
15573: EQUAL
15574: IFFALSE 15619
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15576: LD_ADDR_VAR 0 2
15580: PUSH
15581: LD_VAR 0 2
15585: PPUSH
15586: LD_INT 1
15588: PPUSH
15589: LD_VAR 0 2
15593: PUSH
15594: LD_INT 1
15596: ARRAY
15597: PPUSH
15598: LD_INT 1
15600: PPUSH
15601: CALL_OW 3
15605: PPUSH
15606: CALL_OW 1
15610: ST_TO_ADDR
// tmp := 1 ;
15611: LD_ADDR_VAR 0 3
15615: PUSH
15616: LD_STRING 1
15618: ST_TO_ADDR
// end ; normal := normal & tmp ;
15619: LD_ADDR_VAR 0 5
15623: PUSH
15624: LD_VAR 0 5
15628: PUSH
15629: LD_VAR 0 3
15633: STR
15634: ST_TO_ADDR
// end ;
15635: GO 15535
15637: POP
15638: POP
// for i = 1 to hardcoreCounter do
15639: LD_ADDR_VAR 0 8
15643: PUSH
15644: DOUBLE
15645: LD_INT 1
15647: DEC
15648: ST_TO_ADDR
15649: LD_EXP 46
15653: PUSH
15654: FOR_TO
15655: IFFALSE 15760
// begin tmp := 0 ;
15657: LD_ADDR_VAR 0 3
15661: PUSH
15662: LD_STRING 0
15664: ST_TO_ADDR
// if result [ 2 ] then
15665: LD_VAR 0 2
15669: PUSH
15670: LD_INT 2
15672: ARRAY
15673: IFFALSE 15742
// if result [ 2 ] [ 1 ] = 100 + i then
15675: LD_VAR 0 2
15679: PUSH
15680: LD_INT 2
15682: ARRAY
15683: PUSH
15684: LD_INT 1
15686: ARRAY
15687: PUSH
15688: LD_INT 100
15690: PUSH
15691: LD_VAR 0 8
15695: PLUS
15696: EQUAL
15697: IFFALSE 15742
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15699: LD_ADDR_VAR 0 2
15703: PUSH
15704: LD_VAR 0 2
15708: PPUSH
15709: LD_INT 2
15711: PPUSH
15712: LD_VAR 0 2
15716: PUSH
15717: LD_INT 2
15719: ARRAY
15720: PPUSH
15721: LD_INT 1
15723: PPUSH
15724: CALL_OW 3
15728: PPUSH
15729: CALL_OW 1
15733: ST_TO_ADDR
// tmp := 1 ;
15734: LD_ADDR_VAR 0 3
15738: PUSH
15739: LD_STRING 1
15741: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15742: LD_ADDR_VAR 0 6
15746: PUSH
15747: LD_VAR 0 6
15751: PUSH
15752: LD_VAR 0 3
15756: STR
15757: ST_TO_ADDR
// end ;
15758: GO 15654
15760: POP
15761: POP
// if isGameLoad then
15762: LD_VAR 0 1
15766: IFFALSE 16241
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15768: LD_ADDR_VAR 0 4
15772: PUSH
15773: LD_EXP 49
15777: PUSH
15778: LD_EXP 48
15782: PUSH
15783: LD_EXP 50
15787: PUSH
15788: LD_EXP 47
15792: PUSH
15793: LD_EXP 51
15797: PUSH
15798: LD_EXP 52
15802: PUSH
15803: LD_EXP 53
15807: PUSH
15808: LD_EXP 54
15812: PUSH
15813: LD_EXP 55
15817: PUSH
15818: LD_EXP 56
15822: PUSH
15823: LD_EXP 57
15827: PUSH
15828: LD_EXP 58
15832: PUSH
15833: LD_EXP 59
15837: PUSH
15838: LD_EXP 60
15842: PUSH
15843: LD_EXP 68
15847: PUSH
15848: LD_EXP 69
15852: PUSH
15853: LD_EXP 70
15857: PUSH
15858: LD_EXP 71
15862: PUSH
15863: LD_EXP 73
15867: PUSH
15868: LD_EXP 74
15872: PUSH
15873: LD_EXP 75
15877: PUSH
15878: LD_EXP 78
15882: PUSH
15883: LD_EXP 80
15887: PUSH
15888: LD_EXP 81
15892: PUSH
15893: LD_EXP 82
15897: PUSH
15898: LD_EXP 84
15902: PUSH
15903: LD_EXP 85
15907: PUSH
15908: LD_EXP 88
15912: PUSH
15913: LD_EXP 89
15917: PUSH
15918: LD_EXP 90
15922: PUSH
15923: LD_EXP 91
15927: PUSH
15928: LD_EXP 92
15932: PUSH
15933: LD_EXP 93
15937: PUSH
15938: LD_EXP 94
15942: PUSH
15943: LD_EXP 95
15947: PUSH
15948: LD_EXP 96
15952: PUSH
15953: LD_EXP 61
15957: PUSH
15958: LD_EXP 62
15962: PUSH
15963: LD_EXP 65
15967: PUSH
15968: LD_EXP 66
15972: PUSH
15973: LD_EXP 67
15977: PUSH
15978: LD_EXP 63
15982: PUSH
15983: LD_EXP 64
15987: PUSH
15988: LD_EXP 72
15992: PUSH
15993: LD_EXP 76
15997: PUSH
15998: LD_EXP 77
16002: PUSH
16003: LD_EXP 79
16007: PUSH
16008: LD_EXP 83
16012: PUSH
16013: LD_EXP 86
16017: PUSH
16018: LD_EXP 87
16022: PUSH
16023: LD_EXP 97
16027: PUSH
16028: LD_EXP 98
16032: PUSH
16033: LD_EXP 99
16037: PUSH
16038: LD_EXP 100
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: ST_TO_ADDR
// tmp :=  ;
16099: LD_ADDR_VAR 0 3
16103: PUSH
16104: LD_STRING 
16106: ST_TO_ADDR
// for i = 1 to normalCounter do
16107: LD_ADDR_VAR 0 8
16111: PUSH
16112: DOUBLE
16113: LD_INT 1
16115: DEC
16116: ST_TO_ADDR
16117: LD_EXP 45
16121: PUSH
16122: FOR_TO
16123: IFFALSE 16159
// begin if flags [ i ] then
16125: LD_VAR 0 4
16129: PUSH
16130: LD_VAR 0 8
16134: ARRAY
16135: IFFALSE 16157
// tmp := tmp & i & ; ;
16137: LD_ADDR_VAR 0 3
16141: PUSH
16142: LD_VAR 0 3
16146: PUSH
16147: LD_VAR 0 8
16151: STR
16152: PUSH
16153: LD_STRING ;
16155: STR
16156: ST_TO_ADDR
// end ;
16157: GO 16122
16159: POP
16160: POP
// for i = 1 to hardcoreCounter do
16161: LD_ADDR_VAR 0 8
16165: PUSH
16166: DOUBLE
16167: LD_INT 1
16169: DEC
16170: ST_TO_ADDR
16171: LD_EXP 46
16175: PUSH
16176: FOR_TO
16177: IFFALSE 16223
// begin if flags [ normalCounter + i ] then
16179: LD_VAR 0 4
16183: PUSH
16184: LD_EXP 45
16188: PUSH
16189: LD_VAR 0 8
16193: PLUS
16194: ARRAY
16195: IFFALSE 16221
// tmp := tmp & ( 100 + i ) & ; ;
16197: LD_ADDR_VAR 0 3
16201: PUSH
16202: LD_VAR 0 3
16206: PUSH
16207: LD_INT 100
16209: PUSH
16210: LD_VAR 0 8
16214: PLUS
16215: STR
16216: PUSH
16217: LD_STRING ;
16219: STR
16220: ST_TO_ADDR
// end ;
16221: GO 16176
16223: POP
16224: POP
// if tmp then
16225: LD_VAR 0 3
16229: IFFALSE 16241
// active := tmp ;
16231: LD_ADDR_VAR 0 7
16235: PUSH
16236: LD_VAR 0 3
16240: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16241: LD_STRING getStreamItemsFromMission("
16243: PUSH
16244: LD_VAR 0 5
16248: STR
16249: PUSH
16250: LD_STRING ","
16252: STR
16253: PUSH
16254: LD_VAR 0 6
16258: STR
16259: PUSH
16260: LD_STRING ","
16262: STR
16263: PUSH
16264: LD_VAR 0 7
16268: STR
16269: PUSH
16270: LD_STRING ")
16272: STR
16273: PPUSH
16274: CALL_OW 559
// end else
16278: GO 16287
// ToLua ( getStreamItemsFromMission("","","") ) ;
16280: LD_STRING getStreamItemsFromMission("","","")
16282: PPUSH
16283: CALL_OW 559
// end ;
16287: LD_VAR 0 2
16291: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16292: LD_EXP 44
16296: PUSH
16297: LD_EXP 49
16301: AND
16302: IFFALSE 16426
16304: GO 16306
16306: DISABLE
16307: LD_INT 0
16309: PPUSH
16310: PPUSH
// begin enable ;
16311: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16312: LD_ADDR_VAR 0 2
16316: PUSH
16317: LD_INT 22
16319: PUSH
16320: LD_OWVAR 2
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: LD_INT 2
16331: PUSH
16332: LD_INT 34
16334: PUSH
16335: LD_INT 7
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: LD_INT 34
16344: PUSH
16345: LD_INT 45
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: LD_INT 34
16354: PUSH
16355: LD_INT 28
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 34
16364: PUSH
16365: LD_INT 47
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PPUSH
16383: CALL_OW 69
16387: ST_TO_ADDR
// if not tmp then
16388: LD_VAR 0 2
16392: NOT
16393: IFFALSE 16397
// exit ;
16395: GO 16426
// for i in tmp do
16397: LD_ADDR_VAR 0 1
16401: PUSH
16402: LD_VAR 0 2
16406: PUSH
16407: FOR_IN
16408: IFFALSE 16424
// begin SetLives ( i , 0 ) ;
16410: LD_VAR 0 1
16414: PPUSH
16415: LD_INT 0
16417: PPUSH
16418: CALL_OW 234
// end ;
16422: GO 16407
16424: POP
16425: POP
// end ;
16426: PPOPN 2
16428: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16429: LD_EXP 44
16433: PUSH
16434: LD_EXP 50
16438: AND
16439: IFFALSE 16523
16441: GO 16443
16443: DISABLE
16444: LD_INT 0
16446: PPUSH
16447: PPUSH
// begin enable ;
16448: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16449: LD_ADDR_VAR 0 2
16453: PUSH
16454: LD_INT 22
16456: PUSH
16457: LD_OWVAR 2
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 32
16468: PUSH
16469: LD_INT 3
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PPUSH
16480: CALL_OW 69
16484: ST_TO_ADDR
// if not tmp then
16485: LD_VAR 0 2
16489: NOT
16490: IFFALSE 16494
// exit ;
16492: GO 16523
// for i in tmp do
16494: LD_ADDR_VAR 0 1
16498: PUSH
16499: LD_VAR 0 2
16503: PUSH
16504: FOR_IN
16505: IFFALSE 16521
// begin SetLives ( i , 0 ) ;
16507: LD_VAR 0 1
16511: PPUSH
16512: LD_INT 0
16514: PPUSH
16515: CALL_OW 234
// end ;
16519: GO 16504
16521: POP
16522: POP
// end ;
16523: PPOPN 2
16525: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16526: LD_EXP 44
16530: PUSH
16531: LD_EXP 47
16535: AND
16536: IFFALSE 16629
16538: GO 16540
16540: DISABLE
16541: LD_INT 0
16543: PPUSH
// begin enable ;
16544: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16545: LD_ADDR_VAR 0 1
16549: PUSH
16550: LD_INT 22
16552: PUSH
16553: LD_OWVAR 2
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: LD_INT 2
16564: PUSH
16565: LD_INT 25
16567: PUSH
16568: LD_INT 5
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: LD_INT 25
16577: PUSH
16578: LD_INT 9
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: LD_INT 25
16587: PUSH
16588: LD_INT 8
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PPUSH
16605: CALL_OW 69
16609: PUSH
16610: FOR_IN
16611: IFFALSE 16627
// begin SetClass ( i , 1 ) ;
16613: LD_VAR 0 1
16617: PPUSH
16618: LD_INT 1
16620: PPUSH
16621: CALL_OW 336
// end ;
16625: GO 16610
16627: POP
16628: POP
// end ;
16629: PPOPN 1
16631: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16632: LD_EXP 44
16636: PUSH
16637: LD_EXP 48
16641: AND
16642: PUSH
16643: LD_OWVAR 65
16647: PUSH
16648: LD_INT 7
16650: LESS
16651: AND
16652: IFFALSE 16666
16654: GO 16656
16656: DISABLE
// begin enable ;
16657: ENABLE
// game_speed := 7 ;
16658: LD_ADDR_OWVAR 65
16662: PUSH
16663: LD_INT 7
16665: ST_TO_ADDR
// end ;
16666: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16667: LD_EXP 44
16671: PUSH
16672: LD_EXP 51
16676: AND
16677: IFFALSE 16879
16679: GO 16681
16681: DISABLE
16682: LD_INT 0
16684: PPUSH
16685: PPUSH
16686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16687: LD_ADDR_VAR 0 3
16691: PUSH
16692: LD_INT 81
16694: PUSH
16695: LD_OWVAR 2
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 21
16706: PUSH
16707: LD_INT 1
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PPUSH
16718: CALL_OW 69
16722: ST_TO_ADDR
// if not tmp then
16723: LD_VAR 0 3
16727: NOT
16728: IFFALSE 16732
// exit ;
16730: GO 16879
// if tmp > 5 then
16732: LD_VAR 0 3
16736: PUSH
16737: LD_INT 5
16739: GREATER
16740: IFFALSE 16752
// k := 5 else
16742: LD_ADDR_VAR 0 2
16746: PUSH
16747: LD_INT 5
16749: ST_TO_ADDR
16750: GO 16762
// k := tmp ;
16752: LD_ADDR_VAR 0 2
16756: PUSH
16757: LD_VAR 0 3
16761: ST_TO_ADDR
// for i := 1 to k do
16762: LD_ADDR_VAR 0 1
16766: PUSH
16767: DOUBLE
16768: LD_INT 1
16770: DEC
16771: ST_TO_ADDR
16772: LD_VAR 0 2
16776: PUSH
16777: FOR_TO
16778: IFFALSE 16877
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16780: LD_VAR 0 3
16784: PUSH
16785: LD_VAR 0 1
16789: ARRAY
16790: PPUSH
16791: LD_VAR 0 1
16795: PUSH
16796: LD_INT 4
16798: MOD
16799: PUSH
16800: LD_INT 1
16802: PLUS
16803: PPUSH
16804: CALL_OW 259
16808: PUSH
16809: LD_INT 10
16811: LESS
16812: IFFALSE 16875
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16814: LD_VAR 0 3
16818: PUSH
16819: LD_VAR 0 1
16823: ARRAY
16824: PPUSH
16825: LD_VAR 0 1
16829: PUSH
16830: LD_INT 4
16832: MOD
16833: PUSH
16834: LD_INT 1
16836: PLUS
16837: PPUSH
16838: LD_VAR 0 3
16842: PUSH
16843: LD_VAR 0 1
16847: ARRAY
16848: PPUSH
16849: LD_VAR 0 1
16853: PUSH
16854: LD_INT 4
16856: MOD
16857: PUSH
16858: LD_INT 1
16860: PLUS
16861: PPUSH
16862: CALL_OW 259
16866: PUSH
16867: LD_INT 1
16869: PLUS
16870: PPUSH
16871: CALL_OW 237
16875: GO 16777
16877: POP
16878: POP
// end ;
16879: PPOPN 3
16881: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16882: LD_EXP 44
16886: PUSH
16887: LD_EXP 52
16891: AND
16892: IFFALSE 16912
16894: GO 16896
16896: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16897: LD_INT 4
16899: PPUSH
16900: LD_OWVAR 2
16904: PPUSH
16905: LD_INT 0
16907: PPUSH
16908: CALL_OW 324
16912: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16913: LD_EXP 44
16917: PUSH
16918: LD_EXP 81
16922: AND
16923: IFFALSE 16943
16925: GO 16927
16927: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16928: LD_INT 19
16930: PPUSH
16931: LD_OWVAR 2
16935: PPUSH
16936: LD_INT 0
16938: PPUSH
16939: CALL_OW 324
16943: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16944: LD_EXP 44
16948: PUSH
16949: LD_EXP 53
16953: AND
16954: IFFALSE 17056
16956: GO 16958
16958: DISABLE
16959: LD_INT 0
16961: PPUSH
16962: PPUSH
// begin enable ;
16963: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16964: LD_ADDR_VAR 0 2
16968: PUSH
16969: LD_INT 22
16971: PUSH
16972: LD_OWVAR 2
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 2
16983: PUSH
16984: LD_INT 34
16986: PUSH
16987: LD_INT 11
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 34
16996: PUSH
16997: LD_INT 30
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: LIST
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PPUSH
17013: CALL_OW 69
17017: ST_TO_ADDR
// if not tmp then
17018: LD_VAR 0 2
17022: NOT
17023: IFFALSE 17027
// exit ;
17025: GO 17056
// for i in tmp do
17027: LD_ADDR_VAR 0 1
17031: PUSH
17032: LD_VAR 0 2
17036: PUSH
17037: FOR_IN
17038: IFFALSE 17054
// begin SetLives ( i , 0 ) ;
17040: LD_VAR 0 1
17044: PPUSH
17045: LD_INT 0
17047: PPUSH
17048: CALL_OW 234
// end ;
17052: GO 17037
17054: POP
17055: POP
// end ;
17056: PPOPN 2
17058: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17059: LD_EXP 44
17063: PUSH
17064: LD_EXP 54
17068: AND
17069: IFFALSE 17089
17071: GO 17073
17073: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17074: LD_INT 32
17076: PPUSH
17077: LD_OWVAR 2
17081: PPUSH
17082: LD_INT 0
17084: PPUSH
17085: CALL_OW 324
17089: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17090: LD_EXP 44
17094: PUSH
17095: LD_EXP 55
17099: AND
17100: IFFALSE 17281
17102: GO 17104
17104: DISABLE
17105: LD_INT 0
17107: PPUSH
17108: PPUSH
17109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17110: LD_ADDR_VAR 0 2
17114: PUSH
17115: LD_INT 22
17117: PUSH
17118: LD_OWVAR 2
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 33
17129: PUSH
17130: LD_INT 3
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PPUSH
17141: CALL_OW 69
17145: ST_TO_ADDR
// if not tmp then
17146: LD_VAR 0 2
17150: NOT
17151: IFFALSE 17155
// exit ;
17153: GO 17281
// side := 0 ;
17155: LD_ADDR_VAR 0 3
17159: PUSH
17160: LD_INT 0
17162: ST_TO_ADDR
// for i := 1 to 8 do
17163: LD_ADDR_VAR 0 1
17167: PUSH
17168: DOUBLE
17169: LD_INT 1
17171: DEC
17172: ST_TO_ADDR
17173: LD_INT 8
17175: PUSH
17176: FOR_TO
17177: IFFALSE 17225
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17179: LD_OWVAR 2
17183: PUSH
17184: LD_VAR 0 1
17188: NONEQUAL
17189: PUSH
17190: LD_OWVAR 2
17194: PPUSH
17195: LD_VAR 0 1
17199: PPUSH
17200: CALL_OW 81
17204: PUSH
17205: LD_INT 2
17207: EQUAL
17208: AND
17209: IFFALSE 17223
// begin side := i ;
17211: LD_ADDR_VAR 0 3
17215: PUSH
17216: LD_VAR 0 1
17220: ST_TO_ADDR
// break ;
17221: GO 17225
// end ;
17223: GO 17176
17225: POP
17226: POP
// if not side then
17227: LD_VAR 0 3
17231: NOT
17232: IFFALSE 17236
// exit ;
17234: GO 17281
// for i := 1 to tmp do
17236: LD_ADDR_VAR 0 1
17240: PUSH
17241: DOUBLE
17242: LD_INT 1
17244: DEC
17245: ST_TO_ADDR
17246: LD_VAR 0 2
17250: PUSH
17251: FOR_TO
17252: IFFALSE 17279
// if Prob ( 60 ) then
17254: LD_INT 60
17256: PPUSH
17257: CALL_OW 13
17261: IFFALSE 17277
// SetSide ( i , side ) ;
17263: LD_VAR 0 1
17267: PPUSH
17268: LD_VAR 0 3
17272: PPUSH
17273: CALL_OW 235
17277: GO 17251
17279: POP
17280: POP
// end ;
17281: PPOPN 3
17283: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17284: LD_EXP 44
17288: PUSH
17289: LD_EXP 57
17293: AND
17294: IFFALSE 17413
17296: GO 17298
17298: DISABLE
17299: LD_INT 0
17301: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17302: LD_ADDR_VAR 0 1
17306: PUSH
17307: LD_INT 22
17309: PUSH
17310: LD_OWVAR 2
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 21
17321: PUSH
17322: LD_INT 1
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 3
17331: PUSH
17332: LD_INT 23
17334: PUSH
17335: LD_INT 0
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: LIST
17350: PPUSH
17351: CALL_OW 69
17355: PUSH
17356: FOR_IN
17357: IFFALSE 17411
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17359: LD_VAR 0 1
17363: PPUSH
17364: CALL_OW 257
17368: PUSH
17369: LD_INT 1
17371: PUSH
17372: LD_INT 2
17374: PUSH
17375: LD_INT 3
17377: PUSH
17378: LD_INT 4
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: IN
17387: IFFALSE 17409
// SetClass ( un , rand ( 1 , 4 ) ) ;
17389: LD_VAR 0 1
17393: PPUSH
17394: LD_INT 1
17396: PPUSH
17397: LD_INT 4
17399: PPUSH
17400: CALL_OW 12
17404: PPUSH
17405: CALL_OW 336
17409: GO 17356
17411: POP
17412: POP
// end ;
17413: PPOPN 1
17415: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17416: LD_EXP 44
17420: PUSH
17421: LD_EXP 56
17425: AND
17426: IFFALSE 17505
17428: GO 17430
17430: DISABLE
17431: LD_INT 0
17433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17434: LD_ADDR_VAR 0 1
17438: PUSH
17439: LD_INT 22
17441: PUSH
17442: LD_OWVAR 2
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 21
17453: PUSH
17454: LD_INT 3
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PPUSH
17465: CALL_OW 69
17469: ST_TO_ADDR
// if not tmp then
17470: LD_VAR 0 1
17474: NOT
17475: IFFALSE 17479
// exit ;
17477: GO 17505
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17479: LD_VAR 0 1
17483: PUSH
17484: LD_INT 1
17486: PPUSH
17487: LD_VAR 0 1
17491: PPUSH
17492: CALL_OW 12
17496: ARRAY
17497: PPUSH
17498: LD_INT 100
17500: PPUSH
17501: CALL_OW 234
// end ;
17505: PPOPN 1
17507: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17508: LD_EXP 44
17512: PUSH
17513: LD_EXP 58
17517: AND
17518: IFFALSE 17616
17520: GO 17522
17522: DISABLE
17523: LD_INT 0
17525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17526: LD_ADDR_VAR 0 1
17530: PUSH
17531: LD_INT 22
17533: PUSH
17534: LD_OWVAR 2
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 21
17545: PUSH
17546: LD_INT 1
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PPUSH
17557: CALL_OW 69
17561: ST_TO_ADDR
// if not tmp then
17562: LD_VAR 0 1
17566: NOT
17567: IFFALSE 17571
// exit ;
17569: GO 17616
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17571: LD_VAR 0 1
17575: PUSH
17576: LD_INT 1
17578: PPUSH
17579: LD_VAR 0 1
17583: PPUSH
17584: CALL_OW 12
17588: ARRAY
17589: PPUSH
17590: LD_INT 1
17592: PPUSH
17593: LD_INT 4
17595: PPUSH
17596: CALL_OW 12
17600: PPUSH
17601: LD_INT 3000
17603: PPUSH
17604: LD_INT 9000
17606: PPUSH
17607: CALL_OW 12
17611: PPUSH
17612: CALL_OW 492
// end ;
17616: PPOPN 1
17618: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17619: LD_EXP 44
17623: PUSH
17624: LD_EXP 59
17628: AND
17629: IFFALSE 17649
17631: GO 17633
17633: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17634: LD_INT 1
17636: PPUSH
17637: LD_OWVAR 2
17641: PPUSH
17642: LD_INT 0
17644: PPUSH
17645: CALL_OW 324
17649: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17650: LD_EXP 44
17654: PUSH
17655: LD_EXP 60
17659: AND
17660: IFFALSE 17743
17662: GO 17664
17664: DISABLE
17665: LD_INT 0
17667: PPUSH
17668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17669: LD_ADDR_VAR 0 2
17673: PUSH
17674: LD_INT 22
17676: PUSH
17677: LD_OWVAR 2
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 21
17688: PUSH
17689: LD_INT 3
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PPUSH
17700: CALL_OW 69
17704: ST_TO_ADDR
// if not tmp then
17705: LD_VAR 0 2
17709: NOT
17710: IFFALSE 17714
// exit ;
17712: GO 17743
// for i in tmp do
17714: LD_ADDR_VAR 0 1
17718: PUSH
17719: LD_VAR 0 2
17723: PUSH
17724: FOR_IN
17725: IFFALSE 17741
// SetBLevel ( i , 10 ) ;
17727: LD_VAR 0 1
17731: PPUSH
17732: LD_INT 10
17734: PPUSH
17735: CALL_OW 241
17739: GO 17724
17741: POP
17742: POP
// end ;
17743: PPOPN 2
17745: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17746: LD_EXP 44
17750: PUSH
17751: LD_EXP 61
17755: AND
17756: IFFALSE 17867
17758: GO 17760
17760: DISABLE
17761: LD_INT 0
17763: PPUSH
17764: PPUSH
17765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17766: LD_ADDR_VAR 0 3
17770: PUSH
17771: LD_INT 22
17773: PUSH
17774: LD_OWVAR 2
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 25
17785: PUSH
17786: LD_INT 1
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PPUSH
17797: CALL_OW 69
17801: ST_TO_ADDR
// if not tmp then
17802: LD_VAR 0 3
17806: NOT
17807: IFFALSE 17811
// exit ;
17809: GO 17867
// un := tmp [ rand ( 1 , tmp ) ] ;
17811: LD_ADDR_VAR 0 2
17815: PUSH
17816: LD_VAR 0 3
17820: PUSH
17821: LD_INT 1
17823: PPUSH
17824: LD_VAR 0 3
17828: PPUSH
17829: CALL_OW 12
17833: ARRAY
17834: ST_TO_ADDR
// if Crawls ( un ) then
17835: LD_VAR 0 2
17839: PPUSH
17840: CALL_OW 318
17844: IFFALSE 17855
// ComWalk ( un ) ;
17846: LD_VAR 0 2
17850: PPUSH
17851: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17855: LD_VAR 0 2
17859: PPUSH
17860: LD_INT 5
17862: PPUSH
17863: CALL_OW 336
// end ;
17867: PPOPN 3
17869: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17870: LD_EXP 44
17874: PUSH
17875: LD_EXP 62
17879: AND
17880: PUSH
17881: LD_OWVAR 67
17885: PUSH
17886: LD_INT 4
17888: LESS
17889: AND
17890: IFFALSE 17909
17892: GO 17894
17894: DISABLE
// begin Difficulty := Difficulty + 1 ;
17895: LD_ADDR_OWVAR 67
17899: PUSH
17900: LD_OWVAR 67
17904: PUSH
17905: LD_INT 1
17907: PLUS
17908: ST_TO_ADDR
// end ;
17909: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17910: LD_EXP 44
17914: PUSH
17915: LD_EXP 63
17919: AND
17920: IFFALSE 18023
17922: GO 17924
17924: DISABLE
17925: LD_INT 0
17927: PPUSH
// begin for i := 1 to 5 do
17928: LD_ADDR_VAR 0 1
17932: PUSH
17933: DOUBLE
17934: LD_INT 1
17936: DEC
17937: ST_TO_ADDR
17938: LD_INT 5
17940: PUSH
17941: FOR_TO
17942: IFFALSE 18021
// begin uc_nation := nation_nature ;
17944: LD_ADDR_OWVAR 21
17948: PUSH
17949: LD_INT 0
17951: ST_TO_ADDR
// uc_side := 0 ;
17952: LD_ADDR_OWVAR 20
17956: PUSH
17957: LD_INT 0
17959: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17960: LD_ADDR_OWVAR 29
17964: PUSH
17965: LD_INT 12
17967: PUSH
17968: LD_INT 12
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: ST_TO_ADDR
// hc_agressivity := 20 ;
17975: LD_ADDR_OWVAR 35
17979: PUSH
17980: LD_INT 20
17982: ST_TO_ADDR
// hc_class := class_tiger ;
17983: LD_ADDR_OWVAR 28
17987: PUSH
17988: LD_INT 14
17990: ST_TO_ADDR
// hc_gallery :=  ;
17991: LD_ADDR_OWVAR 33
17995: PUSH
17996: LD_STRING 
17998: ST_TO_ADDR
// hc_name :=  ;
17999: LD_ADDR_OWVAR 26
18003: PUSH
18004: LD_STRING 
18006: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18007: CALL_OW 44
18011: PPUSH
18012: LD_INT 0
18014: PPUSH
18015: CALL_OW 51
// end ;
18019: GO 17941
18021: POP
18022: POP
// end ;
18023: PPOPN 1
18025: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18026: LD_EXP 44
18030: PUSH
18031: LD_EXP 64
18035: AND
18036: IFFALSE 18045
18038: GO 18040
18040: DISABLE
// StreamSibBomb ;
18041: CALL 18046 0 0
18045: END
// export function StreamSibBomb ; var i , x , y ; begin
18046: LD_INT 0
18048: PPUSH
18049: PPUSH
18050: PPUSH
18051: PPUSH
// result := false ;
18052: LD_ADDR_VAR 0 1
18056: PUSH
18057: LD_INT 0
18059: ST_TO_ADDR
// for i := 1 to 16 do
18060: LD_ADDR_VAR 0 2
18064: PUSH
18065: DOUBLE
18066: LD_INT 1
18068: DEC
18069: ST_TO_ADDR
18070: LD_INT 16
18072: PUSH
18073: FOR_TO
18074: IFFALSE 18273
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18076: LD_ADDR_VAR 0 3
18080: PUSH
18081: LD_INT 10
18083: PUSH
18084: LD_INT 20
18086: PUSH
18087: LD_INT 30
18089: PUSH
18090: LD_INT 40
18092: PUSH
18093: LD_INT 50
18095: PUSH
18096: LD_INT 60
18098: PUSH
18099: LD_INT 70
18101: PUSH
18102: LD_INT 80
18104: PUSH
18105: LD_INT 90
18107: PUSH
18108: LD_INT 100
18110: PUSH
18111: LD_INT 110
18113: PUSH
18114: LD_INT 120
18116: PUSH
18117: LD_INT 130
18119: PUSH
18120: LD_INT 140
18122: PUSH
18123: LD_INT 150
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 1
18145: PPUSH
18146: LD_INT 15
18148: PPUSH
18149: CALL_OW 12
18153: ARRAY
18154: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18155: LD_ADDR_VAR 0 4
18159: PUSH
18160: LD_INT 10
18162: PUSH
18163: LD_INT 20
18165: PUSH
18166: LD_INT 30
18168: PUSH
18169: LD_INT 40
18171: PUSH
18172: LD_INT 50
18174: PUSH
18175: LD_INT 60
18177: PUSH
18178: LD_INT 70
18180: PUSH
18181: LD_INT 80
18183: PUSH
18184: LD_INT 90
18186: PUSH
18187: LD_INT 100
18189: PUSH
18190: LD_INT 110
18192: PUSH
18193: LD_INT 120
18195: PUSH
18196: LD_INT 130
18198: PUSH
18199: LD_INT 140
18201: PUSH
18202: LD_INT 150
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 1
18224: PPUSH
18225: LD_INT 15
18227: PPUSH
18228: CALL_OW 12
18232: ARRAY
18233: ST_TO_ADDR
// if ValidHex ( x , y ) then
18234: LD_VAR 0 3
18238: PPUSH
18239: LD_VAR 0 4
18243: PPUSH
18244: CALL_OW 488
18248: IFFALSE 18271
// begin result := [ x , y ] ;
18250: LD_ADDR_VAR 0 1
18254: PUSH
18255: LD_VAR 0 3
18259: PUSH
18260: LD_VAR 0 4
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: ST_TO_ADDR
// break ;
18269: GO 18273
// end ; end ;
18271: GO 18073
18273: POP
18274: POP
// if result then
18275: LD_VAR 0 1
18279: IFFALSE 18339
// begin ToLua ( playSibBomb() ) ;
18281: LD_STRING playSibBomb()
18283: PPUSH
18284: CALL_OW 559
// wait ( 0 0$14 ) ;
18288: LD_INT 490
18290: PPUSH
18291: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18295: LD_VAR 0 1
18299: PUSH
18300: LD_INT 1
18302: ARRAY
18303: PPUSH
18304: LD_VAR 0 1
18308: PUSH
18309: LD_INT 2
18311: ARRAY
18312: PPUSH
18313: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18317: LD_VAR 0 1
18321: PUSH
18322: LD_INT 1
18324: ARRAY
18325: PPUSH
18326: LD_VAR 0 1
18330: PUSH
18331: LD_INT 2
18333: ARRAY
18334: PPUSH
18335: CALL_OW 429
// end ; end ;
18339: LD_VAR 0 1
18343: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18344: LD_EXP 44
18348: PUSH
18349: LD_EXP 66
18353: AND
18354: IFFALSE 18366
18356: GO 18358
18358: DISABLE
// YouLost (  ) ;
18359: LD_STRING 
18361: PPUSH
18362: CALL_OW 104
18366: END
// every 0 0$1 trigger StreamModeActive and sFog do
18367: LD_EXP 44
18371: PUSH
18372: LD_EXP 65
18376: AND
18377: IFFALSE 18391
18379: GO 18381
18381: DISABLE
// FogOff ( your_side ) ;
18382: LD_OWVAR 2
18386: PPUSH
18387: CALL_OW 344
18391: END
// every 0 0$1 trigger StreamModeActive and sSun do
18392: LD_EXP 44
18396: PUSH
18397: LD_EXP 67
18401: AND
18402: IFFALSE 18430
18404: GO 18406
18406: DISABLE
// begin solar_recharge_percent := 0 ;
18407: LD_ADDR_OWVAR 79
18411: PUSH
18412: LD_INT 0
18414: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18415: LD_INT 10500
18417: PPUSH
18418: CALL_OW 67
// solar_recharge_percent := 100 ;
18422: LD_ADDR_OWVAR 79
18426: PUSH
18427: LD_INT 100
18429: ST_TO_ADDR
// end ;
18430: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18431: LD_EXP 44
18435: PUSH
18436: LD_EXP 68
18440: AND
18441: IFFALSE 18680
18443: GO 18445
18445: DISABLE
18446: LD_INT 0
18448: PPUSH
18449: PPUSH
18450: PPUSH
// begin tmp := [ ] ;
18451: LD_ADDR_VAR 0 3
18455: PUSH
18456: EMPTY
18457: ST_TO_ADDR
// for i := 1 to 6 do
18458: LD_ADDR_VAR 0 1
18462: PUSH
18463: DOUBLE
18464: LD_INT 1
18466: DEC
18467: ST_TO_ADDR
18468: LD_INT 6
18470: PUSH
18471: FOR_TO
18472: IFFALSE 18577
// begin uc_nation := nation_nature ;
18474: LD_ADDR_OWVAR 21
18478: PUSH
18479: LD_INT 0
18481: ST_TO_ADDR
// uc_side := 0 ;
18482: LD_ADDR_OWVAR 20
18486: PUSH
18487: LD_INT 0
18489: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18490: LD_ADDR_OWVAR 29
18494: PUSH
18495: LD_INT 12
18497: PUSH
18498: LD_INT 12
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: ST_TO_ADDR
// hc_agressivity := 20 ;
18505: LD_ADDR_OWVAR 35
18509: PUSH
18510: LD_INT 20
18512: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18513: LD_ADDR_OWVAR 28
18517: PUSH
18518: LD_INT 17
18520: ST_TO_ADDR
// hc_gallery :=  ;
18521: LD_ADDR_OWVAR 33
18525: PUSH
18526: LD_STRING 
18528: ST_TO_ADDR
// hc_name :=  ;
18529: LD_ADDR_OWVAR 26
18533: PUSH
18534: LD_STRING 
18536: ST_TO_ADDR
// un := CreateHuman ;
18537: LD_ADDR_VAR 0 2
18541: PUSH
18542: CALL_OW 44
18546: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18547: LD_VAR 0 2
18551: PPUSH
18552: LD_INT 1
18554: PPUSH
18555: CALL_OW 51
// tmp := tmp ^ un ;
18559: LD_ADDR_VAR 0 3
18563: PUSH
18564: LD_VAR 0 3
18568: PUSH
18569: LD_VAR 0 2
18573: ADD
18574: ST_TO_ADDR
// end ;
18575: GO 18471
18577: POP
18578: POP
// repeat wait ( 0 0$1 ) ;
18579: LD_INT 35
18581: PPUSH
18582: CALL_OW 67
// for un in tmp do
18586: LD_ADDR_VAR 0 2
18590: PUSH
18591: LD_VAR 0 3
18595: PUSH
18596: FOR_IN
18597: IFFALSE 18671
// begin if IsDead ( un ) then
18599: LD_VAR 0 2
18603: PPUSH
18604: CALL_OW 301
18608: IFFALSE 18628
// begin tmp := tmp diff un ;
18610: LD_ADDR_VAR 0 3
18614: PUSH
18615: LD_VAR 0 3
18619: PUSH
18620: LD_VAR 0 2
18624: DIFF
18625: ST_TO_ADDR
// continue ;
18626: GO 18596
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18628: LD_VAR 0 2
18632: PPUSH
18633: LD_INT 3
18635: PUSH
18636: LD_INT 22
18638: PUSH
18639: LD_INT 0
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PPUSH
18650: CALL_OW 69
18654: PPUSH
18655: LD_VAR 0 2
18659: PPUSH
18660: CALL_OW 74
18664: PPUSH
18665: CALL_OW 115
// end ;
18669: GO 18596
18671: POP
18672: POP
// until not tmp ;
18673: LD_VAR 0 3
18677: NOT
18678: IFFALSE 18579
// end ;
18680: PPOPN 3
18682: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18683: LD_EXP 44
18687: PUSH
18688: LD_EXP 69
18692: AND
18693: IFFALSE 18747
18695: GO 18697
18697: DISABLE
// begin ToLua ( displayTroll(); ) ;
18698: LD_STRING displayTroll();
18700: PPUSH
18701: CALL_OW 559
// wait ( 3 3$00 ) ;
18705: LD_INT 6300
18707: PPUSH
18708: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18712: LD_STRING hideTroll();
18714: PPUSH
18715: CALL_OW 559
// wait ( 1 1$00 ) ;
18719: LD_INT 2100
18721: PPUSH
18722: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18726: LD_STRING displayTroll();
18728: PPUSH
18729: CALL_OW 559
// wait ( 1 1$00 ) ;
18733: LD_INT 2100
18735: PPUSH
18736: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18740: LD_STRING hideTroll();
18742: PPUSH
18743: CALL_OW 559
// end ;
18747: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18748: LD_EXP 44
18752: PUSH
18753: LD_EXP 70
18757: AND
18758: IFFALSE 18821
18760: GO 18762
18762: DISABLE
18763: LD_INT 0
18765: PPUSH
// begin p := 0 ;
18766: LD_ADDR_VAR 0 1
18770: PUSH
18771: LD_INT 0
18773: ST_TO_ADDR
// repeat game_speed := 1 ;
18774: LD_ADDR_OWVAR 65
18778: PUSH
18779: LD_INT 1
18781: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18782: LD_INT 35
18784: PPUSH
18785: CALL_OW 67
// p := p + 1 ;
18789: LD_ADDR_VAR 0 1
18793: PUSH
18794: LD_VAR 0 1
18798: PUSH
18799: LD_INT 1
18801: PLUS
18802: ST_TO_ADDR
// until p >= 60 ;
18803: LD_VAR 0 1
18807: PUSH
18808: LD_INT 60
18810: GREATEREQUAL
18811: IFFALSE 18774
// game_speed := 4 ;
18813: LD_ADDR_OWVAR 65
18817: PUSH
18818: LD_INT 4
18820: ST_TO_ADDR
// end ;
18821: PPOPN 1
18823: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18824: LD_EXP 44
18828: PUSH
18829: LD_EXP 71
18833: AND
18834: IFFALSE 18980
18836: GO 18838
18838: DISABLE
18839: LD_INT 0
18841: PPUSH
18842: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18843: LD_ADDR_VAR 0 1
18847: PUSH
18848: LD_INT 22
18850: PUSH
18851: LD_OWVAR 2
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 2
18862: PUSH
18863: LD_INT 30
18865: PUSH
18866: LD_INT 0
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 30
18875: PUSH
18876: LD_INT 1
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: LIST
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PPUSH
18892: CALL_OW 69
18896: ST_TO_ADDR
// if not depot then
18897: LD_VAR 0 1
18901: NOT
18902: IFFALSE 18906
// exit ;
18904: GO 18980
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18906: LD_ADDR_VAR 0 2
18910: PUSH
18911: LD_VAR 0 1
18915: PUSH
18916: LD_INT 1
18918: PPUSH
18919: LD_VAR 0 1
18923: PPUSH
18924: CALL_OW 12
18928: ARRAY
18929: PPUSH
18930: CALL_OW 274
18934: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18935: LD_VAR 0 2
18939: PPUSH
18940: LD_INT 1
18942: PPUSH
18943: LD_INT 0
18945: PPUSH
18946: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18950: LD_VAR 0 2
18954: PPUSH
18955: LD_INT 2
18957: PPUSH
18958: LD_INT 0
18960: PPUSH
18961: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18965: LD_VAR 0 2
18969: PPUSH
18970: LD_INT 3
18972: PPUSH
18973: LD_INT 0
18975: PPUSH
18976: CALL_OW 277
// end ;
18980: PPOPN 2
18982: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18983: LD_EXP 44
18987: PUSH
18988: LD_EXP 72
18992: AND
18993: IFFALSE 19090
18995: GO 18997
18997: DISABLE
18998: LD_INT 0
19000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19001: LD_ADDR_VAR 0 1
19005: PUSH
19006: LD_INT 22
19008: PUSH
19009: LD_OWVAR 2
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 21
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 3
19030: PUSH
19031: LD_INT 23
19033: PUSH
19034: LD_INT 0
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: LIST
19049: PPUSH
19050: CALL_OW 69
19054: ST_TO_ADDR
// if not tmp then
19055: LD_VAR 0 1
19059: NOT
19060: IFFALSE 19064
// exit ;
19062: GO 19090
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19064: LD_VAR 0 1
19068: PUSH
19069: LD_INT 1
19071: PPUSH
19072: LD_VAR 0 1
19076: PPUSH
19077: CALL_OW 12
19081: ARRAY
19082: PPUSH
19083: LD_INT 200
19085: PPUSH
19086: CALL_OW 234
// end ;
19090: PPOPN 1
19092: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19093: LD_EXP 44
19097: PUSH
19098: LD_EXP 73
19102: AND
19103: IFFALSE 19182
19105: GO 19107
19107: DISABLE
19108: LD_INT 0
19110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19111: LD_ADDR_VAR 0 1
19115: PUSH
19116: LD_INT 22
19118: PUSH
19119: LD_OWVAR 2
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 21
19130: PUSH
19131: LD_INT 2
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PPUSH
19142: CALL_OW 69
19146: ST_TO_ADDR
// if not tmp then
19147: LD_VAR 0 1
19151: NOT
19152: IFFALSE 19156
// exit ;
19154: GO 19182
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19156: LD_VAR 0 1
19160: PUSH
19161: LD_INT 1
19163: PPUSH
19164: LD_VAR 0 1
19168: PPUSH
19169: CALL_OW 12
19173: ARRAY
19174: PPUSH
19175: LD_INT 60
19177: PPUSH
19178: CALL_OW 234
// end ;
19182: PPOPN 1
19184: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19185: LD_EXP 44
19189: PUSH
19190: LD_EXP 74
19194: AND
19195: IFFALSE 19294
19197: GO 19199
19199: DISABLE
19200: LD_INT 0
19202: PPUSH
19203: PPUSH
// begin enable ;
19204: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19205: LD_ADDR_VAR 0 1
19209: PUSH
19210: LD_INT 22
19212: PUSH
19213: LD_OWVAR 2
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 61
19224: PUSH
19225: EMPTY
19226: LIST
19227: PUSH
19228: LD_INT 33
19230: PUSH
19231: LD_INT 2
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: LIST
19242: PPUSH
19243: CALL_OW 69
19247: ST_TO_ADDR
// if not tmp then
19248: LD_VAR 0 1
19252: NOT
19253: IFFALSE 19257
// exit ;
19255: GO 19294
// for i in tmp do
19257: LD_ADDR_VAR 0 2
19261: PUSH
19262: LD_VAR 0 1
19266: PUSH
19267: FOR_IN
19268: IFFALSE 19292
// if IsControledBy ( i ) then
19270: LD_VAR 0 2
19274: PPUSH
19275: CALL_OW 312
19279: IFFALSE 19290
// ComUnlink ( i ) ;
19281: LD_VAR 0 2
19285: PPUSH
19286: CALL_OW 136
19290: GO 19267
19292: POP
19293: POP
// end ;
19294: PPOPN 2
19296: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19297: LD_EXP 44
19301: PUSH
19302: LD_EXP 75
19306: AND
19307: IFFALSE 19447
19309: GO 19311
19311: DISABLE
19312: LD_INT 0
19314: PPUSH
19315: PPUSH
// begin ToLua ( displayPowell(); ) ;
19316: LD_STRING displayPowell();
19318: PPUSH
19319: CALL_OW 559
// uc_side := 0 ;
19323: LD_ADDR_OWVAR 20
19327: PUSH
19328: LD_INT 0
19330: ST_TO_ADDR
// uc_nation := 2 ;
19331: LD_ADDR_OWVAR 21
19335: PUSH
19336: LD_INT 2
19338: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19339: LD_ADDR_OWVAR 37
19343: PUSH
19344: LD_INT 14
19346: ST_TO_ADDR
// vc_engine := engine_siberite ;
19347: LD_ADDR_OWVAR 39
19351: PUSH
19352: LD_INT 3
19354: ST_TO_ADDR
// vc_control := control_apeman ;
19355: LD_ADDR_OWVAR 38
19359: PUSH
19360: LD_INT 5
19362: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19363: LD_ADDR_OWVAR 40
19367: PUSH
19368: LD_INT 29
19370: ST_TO_ADDR
// un := CreateVehicle ;
19371: LD_ADDR_VAR 0 2
19375: PUSH
19376: CALL_OW 45
19380: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19381: LD_VAR 0 2
19385: PPUSH
19386: LD_INT 1
19388: PPUSH
19389: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19393: LD_INT 35
19395: PPUSH
19396: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19400: LD_VAR 0 2
19404: PPUSH
19405: LD_INT 22
19407: PUSH
19408: LD_OWVAR 2
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PPUSH
19417: CALL_OW 69
19421: PPUSH
19422: LD_VAR 0 2
19426: PPUSH
19427: CALL_OW 74
19431: PPUSH
19432: CALL_OW 115
// until IsDead ( un ) ;
19436: LD_VAR 0 2
19440: PPUSH
19441: CALL_OW 301
19445: IFFALSE 19393
// end ;
19447: PPOPN 2
19449: END
// every 0 0$1 trigger StreamModeActive and sStu do
19450: LD_EXP 44
19454: PUSH
19455: LD_EXP 83
19459: AND
19460: IFFALSE 19476
19462: GO 19464
19464: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19465: LD_STRING displayStucuk();
19467: PPUSH
19468: CALL_OW 559
// ResetFog ;
19472: CALL_OW 335
// end ;
19476: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19477: LD_EXP 44
19481: PUSH
19482: LD_EXP 76
19486: AND
19487: IFFALSE 19628
19489: GO 19491
19491: DISABLE
19492: LD_INT 0
19494: PPUSH
19495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19496: LD_ADDR_VAR 0 2
19500: PUSH
19501: LD_INT 22
19503: PUSH
19504: LD_OWVAR 2
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 21
19515: PUSH
19516: LD_INT 1
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PPUSH
19527: CALL_OW 69
19531: ST_TO_ADDR
// if not tmp then
19532: LD_VAR 0 2
19536: NOT
19537: IFFALSE 19541
// exit ;
19539: GO 19628
// un := tmp [ rand ( 1 , tmp ) ] ;
19541: LD_ADDR_VAR 0 1
19545: PUSH
19546: LD_VAR 0 2
19550: PUSH
19551: LD_INT 1
19553: PPUSH
19554: LD_VAR 0 2
19558: PPUSH
19559: CALL_OW 12
19563: ARRAY
19564: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19565: LD_VAR 0 1
19569: PPUSH
19570: LD_INT 0
19572: PPUSH
19573: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19577: LD_VAR 0 1
19581: PPUSH
19582: LD_OWVAR 3
19586: PUSH
19587: LD_VAR 0 1
19591: DIFF
19592: PPUSH
19593: LD_VAR 0 1
19597: PPUSH
19598: CALL_OW 74
19602: PPUSH
19603: CALL_OW 115
// wait ( 0 0$20 ) ;
19607: LD_INT 700
19609: PPUSH
19610: CALL_OW 67
// SetSide ( un , your_side ) ;
19614: LD_VAR 0 1
19618: PPUSH
19619: LD_OWVAR 2
19623: PPUSH
19624: CALL_OW 235
// end ;
19628: PPOPN 2
19630: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19631: LD_EXP 44
19635: PUSH
19636: LD_EXP 77
19640: AND
19641: IFFALSE 19747
19643: GO 19645
19645: DISABLE
19646: LD_INT 0
19648: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19649: LD_ADDR_VAR 0 1
19653: PUSH
19654: LD_INT 22
19656: PUSH
19657: LD_OWVAR 2
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 2
19668: PUSH
19669: LD_INT 30
19671: PUSH
19672: LD_INT 0
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 30
19681: PUSH
19682: LD_INT 1
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: LIST
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PPUSH
19698: CALL_OW 69
19702: ST_TO_ADDR
// if not depot then
19703: LD_VAR 0 1
19707: NOT
19708: IFFALSE 19712
// exit ;
19710: GO 19747
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19712: LD_VAR 0 1
19716: PUSH
19717: LD_INT 1
19719: ARRAY
19720: PPUSH
19721: CALL_OW 250
19725: PPUSH
19726: LD_VAR 0 1
19730: PUSH
19731: LD_INT 1
19733: ARRAY
19734: PPUSH
19735: CALL_OW 251
19739: PPUSH
19740: LD_INT 70
19742: PPUSH
19743: CALL_OW 495
// end ;
19747: PPOPN 1
19749: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19750: LD_EXP 44
19754: PUSH
19755: LD_EXP 78
19759: AND
19760: IFFALSE 19971
19762: GO 19764
19764: DISABLE
19765: LD_INT 0
19767: PPUSH
19768: PPUSH
19769: PPUSH
19770: PPUSH
19771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19772: LD_ADDR_VAR 0 5
19776: PUSH
19777: LD_INT 22
19779: PUSH
19780: LD_OWVAR 2
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 21
19791: PUSH
19792: LD_INT 1
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PPUSH
19803: CALL_OW 69
19807: ST_TO_ADDR
// if not tmp then
19808: LD_VAR 0 5
19812: NOT
19813: IFFALSE 19817
// exit ;
19815: GO 19971
// for i in tmp do
19817: LD_ADDR_VAR 0 1
19821: PUSH
19822: LD_VAR 0 5
19826: PUSH
19827: FOR_IN
19828: IFFALSE 19969
// begin d := rand ( 0 , 5 ) ;
19830: LD_ADDR_VAR 0 4
19834: PUSH
19835: LD_INT 0
19837: PPUSH
19838: LD_INT 5
19840: PPUSH
19841: CALL_OW 12
19845: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19846: LD_ADDR_VAR 0 2
19850: PUSH
19851: LD_VAR 0 1
19855: PPUSH
19856: CALL_OW 250
19860: PPUSH
19861: LD_VAR 0 4
19865: PPUSH
19866: LD_INT 3
19868: PPUSH
19869: LD_INT 12
19871: PPUSH
19872: CALL_OW 12
19876: PPUSH
19877: CALL_OW 272
19881: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19882: LD_ADDR_VAR 0 3
19886: PUSH
19887: LD_VAR 0 1
19891: PPUSH
19892: CALL_OW 251
19896: PPUSH
19897: LD_VAR 0 4
19901: PPUSH
19902: LD_INT 3
19904: PPUSH
19905: LD_INT 12
19907: PPUSH
19908: CALL_OW 12
19912: PPUSH
19913: CALL_OW 273
19917: ST_TO_ADDR
// if ValidHex ( x , y ) then
19918: LD_VAR 0 2
19922: PPUSH
19923: LD_VAR 0 3
19927: PPUSH
19928: CALL_OW 488
19932: IFFALSE 19967
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19934: LD_VAR 0 1
19938: PPUSH
19939: LD_VAR 0 2
19943: PPUSH
19944: LD_VAR 0 3
19948: PPUSH
19949: LD_INT 3
19951: PPUSH
19952: LD_INT 6
19954: PPUSH
19955: CALL_OW 12
19959: PPUSH
19960: LD_INT 1
19962: PPUSH
19963: CALL_OW 483
// end ;
19967: GO 19827
19969: POP
19970: POP
// end ;
19971: PPOPN 5
19973: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19974: LD_EXP 44
19978: PUSH
19979: LD_EXP 79
19983: AND
19984: IFFALSE 20078
19986: GO 19988
19988: DISABLE
19989: LD_INT 0
19991: PPUSH
19992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19993: LD_ADDR_VAR 0 2
19997: PUSH
19998: LD_INT 22
20000: PUSH
20001: LD_OWVAR 2
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 32
20012: PUSH
20013: LD_INT 1
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 21
20022: PUSH
20023: LD_INT 2
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: LIST
20034: PPUSH
20035: CALL_OW 69
20039: ST_TO_ADDR
// if not tmp then
20040: LD_VAR 0 2
20044: NOT
20045: IFFALSE 20049
// exit ;
20047: GO 20078
// for i in tmp do
20049: LD_ADDR_VAR 0 1
20053: PUSH
20054: LD_VAR 0 2
20058: PUSH
20059: FOR_IN
20060: IFFALSE 20076
// SetFuel ( i , 0 ) ;
20062: LD_VAR 0 1
20066: PPUSH
20067: LD_INT 0
20069: PPUSH
20070: CALL_OW 240
20074: GO 20059
20076: POP
20077: POP
// end ;
20078: PPOPN 2
20080: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20081: LD_EXP 44
20085: PUSH
20086: LD_EXP 80
20090: AND
20091: IFFALSE 20157
20093: GO 20095
20095: DISABLE
20096: LD_INT 0
20098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20099: LD_ADDR_VAR 0 1
20103: PUSH
20104: LD_INT 22
20106: PUSH
20107: LD_OWVAR 2
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 30
20118: PUSH
20119: LD_INT 29
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PPUSH
20130: CALL_OW 69
20134: ST_TO_ADDR
// if not tmp then
20135: LD_VAR 0 1
20139: NOT
20140: IFFALSE 20144
// exit ;
20142: GO 20157
// DestroyUnit ( tmp [ 1 ] ) ;
20144: LD_VAR 0 1
20148: PUSH
20149: LD_INT 1
20151: ARRAY
20152: PPUSH
20153: CALL_OW 65
// end ;
20157: PPOPN 1
20159: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20160: LD_EXP 44
20164: PUSH
20165: LD_EXP 82
20169: AND
20170: IFFALSE 20299
20172: GO 20174
20174: DISABLE
20175: LD_INT 0
20177: PPUSH
// begin uc_side := 0 ;
20178: LD_ADDR_OWVAR 20
20182: PUSH
20183: LD_INT 0
20185: ST_TO_ADDR
// uc_nation := nation_arabian ;
20186: LD_ADDR_OWVAR 21
20190: PUSH
20191: LD_INT 2
20193: ST_TO_ADDR
// hc_gallery :=  ;
20194: LD_ADDR_OWVAR 33
20198: PUSH
20199: LD_STRING 
20201: ST_TO_ADDR
// hc_name :=  ;
20202: LD_ADDR_OWVAR 26
20206: PUSH
20207: LD_STRING 
20209: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20210: LD_INT 1
20212: PPUSH
20213: LD_INT 11
20215: PPUSH
20216: LD_INT 10
20218: PPUSH
20219: CALL_OW 380
// un := CreateHuman ;
20223: LD_ADDR_VAR 0 1
20227: PUSH
20228: CALL_OW 44
20232: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20233: LD_VAR 0 1
20237: PPUSH
20238: LD_INT 1
20240: PPUSH
20241: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20245: LD_INT 35
20247: PPUSH
20248: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20252: LD_VAR 0 1
20256: PPUSH
20257: LD_INT 22
20259: PUSH
20260: LD_OWVAR 2
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PPUSH
20269: CALL_OW 69
20273: PPUSH
20274: LD_VAR 0 1
20278: PPUSH
20279: CALL_OW 74
20283: PPUSH
20284: CALL_OW 115
// until IsDead ( un ) ;
20288: LD_VAR 0 1
20292: PPUSH
20293: CALL_OW 301
20297: IFFALSE 20245
// end ;
20299: PPOPN 1
20301: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20302: LD_EXP 44
20306: PUSH
20307: LD_EXP 84
20311: AND
20312: IFFALSE 20324
20314: GO 20316
20316: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20317: LD_STRING earthquake(getX(game), 0, 32)
20319: PPUSH
20320: CALL_OW 559
20324: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20325: LD_EXP 44
20329: PUSH
20330: LD_EXP 85
20334: AND
20335: IFFALSE 20426
20337: GO 20339
20339: DISABLE
20340: LD_INT 0
20342: PPUSH
// begin enable ;
20343: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20344: LD_ADDR_VAR 0 1
20348: PUSH
20349: LD_INT 22
20351: PUSH
20352: LD_OWVAR 2
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 21
20363: PUSH
20364: LD_INT 2
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 33
20373: PUSH
20374: LD_INT 3
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: LIST
20385: PPUSH
20386: CALL_OW 69
20390: ST_TO_ADDR
// if not tmp then
20391: LD_VAR 0 1
20395: NOT
20396: IFFALSE 20400
// exit ;
20398: GO 20426
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20400: LD_VAR 0 1
20404: PUSH
20405: LD_INT 1
20407: PPUSH
20408: LD_VAR 0 1
20412: PPUSH
20413: CALL_OW 12
20417: ARRAY
20418: PPUSH
20419: LD_INT 1
20421: PPUSH
20422: CALL_OW 234
// end ;
20426: PPOPN 1
20428: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20429: LD_EXP 44
20433: PUSH
20434: LD_EXP 86
20438: AND
20439: IFFALSE 20580
20441: GO 20443
20443: DISABLE
20444: LD_INT 0
20446: PPUSH
20447: PPUSH
20448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20449: LD_ADDR_VAR 0 3
20453: PUSH
20454: LD_INT 22
20456: PUSH
20457: LD_OWVAR 2
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 25
20468: PUSH
20469: LD_INT 1
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PPUSH
20480: CALL_OW 69
20484: ST_TO_ADDR
// if not tmp then
20485: LD_VAR 0 3
20489: NOT
20490: IFFALSE 20494
// exit ;
20492: GO 20580
// un := tmp [ rand ( 1 , tmp ) ] ;
20494: LD_ADDR_VAR 0 2
20498: PUSH
20499: LD_VAR 0 3
20503: PUSH
20504: LD_INT 1
20506: PPUSH
20507: LD_VAR 0 3
20511: PPUSH
20512: CALL_OW 12
20516: ARRAY
20517: ST_TO_ADDR
// if Crawls ( un ) then
20518: LD_VAR 0 2
20522: PPUSH
20523: CALL_OW 318
20527: IFFALSE 20538
// ComWalk ( un ) ;
20529: LD_VAR 0 2
20533: PPUSH
20534: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20538: LD_VAR 0 2
20542: PPUSH
20543: LD_INT 9
20545: PPUSH
20546: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20550: LD_INT 28
20552: PPUSH
20553: LD_OWVAR 2
20557: PPUSH
20558: LD_INT 2
20560: PPUSH
20561: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20565: LD_INT 29
20567: PPUSH
20568: LD_OWVAR 2
20572: PPUSH
20573: LD_INT 2
20575: PPUSH
20576: CALL_OW 322
// end ;
20580: PPOPN 3
20582: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20583: LD_EXP 44
20587: PUSH
20588: LD_EXP 87
20592: AND
20593: IFFALSE 20704
20595: GO 20597
20597: DISABLE
20598: LD_INT 0
20600: PPUSH
20601: PPUSH
20602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20603: LD_ADDR_VAR 0 3
20607: PUSH
20608: LD_INT 22
20610: PUSH
20611: LD_OWVAR 2
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 25
20622: PUSH
20623: LD_INT 1
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PPUSH
20634: CALL_OW 69
20638: ST_TO_ADDR
// if not tmp then
20639: LD_VAR 0 3
20643: NOT
20644: IFFALSE 20648
// exit ;
20646: GO 20704
// un := tmp [ rand ( 1 , tmp ) ] ;
20648: LD_ADDR_VAR 0 2
20652: PUSH
20653: LD_VAR 0 3
20657: PUSH
20658: LD_INT 1
20660: PPUSH
20661: LD_VAR 0 3
20665: PPUSH
20666: CALL_OW 12
20670: ARRAY
20671: ST_TO_ADDR
// if Crawls ( un ) then
20672: LD_VAR 0 2
20676: PPUSH
20677: CALL_OW 318
20681: IFFALSE 20692
// ComWalk ( un ) ;
20683: LD_VAR 0 2
20687: PPUSH
20688: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20692: LD_VAR 0 2
20696: PPUSH
20697: LD_INT 8
20699: PPUSH
20700: CALL_OW 336
// end ;
20704: PPOPN 3
20706: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20707: LD_EXP 44
20711: PUSH
20712: LD_EXP 88
20716: AND
20717: IFFALSE 20861
20719: GO 20721
20721: DISABLE
20722: LD_INT 0
20724: PPUSH
20725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20726: LD_ADDR_VAR 0 2
20730: PUSH
20731: LD_INT 22
20733: PUSH
20734: LD_OWVAR 2
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 21
20745: PUSH
20746: LD_INT 2
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 2
20755: PUSH
20756: LD_INT 34
20758: PUSH
20759: LD_INT 12
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 34
20768: PUSH
20769: LD_INT 51
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 34
20778: PUSH
20779: LD_INT 32
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: LIST
20796: PPUSH
20797: CALL_OW 69
20801: ST_TO_ADDR
// if not tmp then
20802: LD_VAR 0 2
20806: NOT
20807: IFFALSE 20811
// exit ;
20809: GO 20861
// for i in tmp do
20811: LD_ADDR_VAR 0 1
20815: PUSH
20816: LD_VAR 0 2
20820: PUSH
20821: FOR_IN
20822: IFFALSE 20859
// if GetCargo ( i , mat_artifact ) = 0 then
20824: LD_VAR 0 1
20828: PPUSH
20829: LD_INT 4
20831: PPUSH
20832: CALL_OW 289
20836: PUSH
20837: LD_INT 0
20839: EQUAL
20840: IFFALSE 20857
// SetCargo ( i , mat_siberit , 100 ) ;
20842: LD_VAR 0 1
20846: PPUSH
20847: LD_INT 3
20849: PPUSH
20850: LD_INT 100
20852: PPUSH
20853: CALL_OW 290
20857: GO 20821
20859: POP
20860: POP
// end ;
20861: PPOPN 2
20863: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20864: LD_EXP 44
20868: PUSH
20869: LD_EXP 89
20873: AND
20874: IFFALSE 21057
20876: GO 20878
20878: DISABLE
20879: LD_INT 0
20881: PPUSH
20882: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20883: LD_ADDR_VAR 0 2
20887: PUSH
20888: LD_INT 22
20890: PUSH
20891: LD_OWVAR 2
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PPUSH
20900: CALL_OW 69
20904: ST_TO_ADDR
// if not tmp then
20905: LD_VAR 0 2
20909: NOT
20910: IFFALSE 20914
// exit ;
20912: GO 21057
// for i := 1 to 2 do
20914: LD_ADDR_VAR 0 1
20918: PUSH
20919: DOUBLE
20920: LD_INT 1
20922: DEC
20923: ST_TO_ADDR
20924: LD_INT 2
20926: PUSH
20927: FOR_TO
20928: IFFALSE 21055
// begin uc_side := your_side ;
20930: LD_ADDR_OWVAR 20
20934: PUSH
20935: LD_OWVAR 2
20939: ST_TO_ADDR
// uc_nation := nation_american ;
20940: LD_ADDR_OWVAR 21
20944: PUSH
20945: LD_INT 1
20947: ST_TO_ADDR
// vc_chassis := us_morphling ;
20948: LD_ADDR_OWVAR 37
20952: PUSH
20953: LD_INT 5
20955: ST_TO_ADDR
// vc_engine := engine_siberite ;
20956: LD_ADDR_OWVAR 39
20960: PUSH
20961: LD_INT 3
20963: ST_TO_ADDR
// vc_control := control_computer ;
20964: LD_ADDR_OWVAR 38
20968: PUSH
20969: LD_INT 3
20971: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20972: LD_ADDR_OWVAR 40
20976: PUSH
20977: LD_INT 10
20979: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20980: LD_VAR 0 2
20984: PUSH
20985: LD_INT 1
20987: ARRAY
20988: PPUSH
20989: CALL_OW 310
20993: NOT
20994: IFFALSE 21041
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20996: CALL_OW 45
21000: PPUSH
21001: LD_VAR 0 2
21005: PUSH
21006: LD_INT 1
21008: ARRAY
21009: PPUSH
21010: CALL_OW 250
21014: PPUSH
21015: LD_VAR 0 2
21019: PUSH
21020: LD_INT 1
21022: ARRAY
21023: PPUSH
21024: CALL_OW 251
21028: PPUSH
21029: LD_INT 12
21031: PPUSH
21032: LD_INT 1
21034: PPUSH
21035: CALL_OW 50
21039: GO 21053
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21041: CALL_OW 45
21045: PPUSH
21046: LD_INT 1
21048: PPUSH
21049: CALL_OW 51
// end ;
21053: GO 20927
21055: POP
21056: POP
// end ;
21057: PPOPN 2
21059: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21060: LD_EXP 44
21064: PUSH
21065: LD_EXP 90
21069: AND
21070: IFFALSE 21292
21072: GO 21074
21074: DISABLE
21075: LD_INT 0
21077: PPUSH
21078: PPUSH
21079: PPUSH
21080: PPUSH
21081: PPUSH
21082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21083: LD_ADDR_VAR 0 6
21087: PUSH
21088: LD_INT 22
21090: PUSH
21091: LD_OWVAR 2
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 21
21102: PUSH
21103: LD_INT 1
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 3
21112: PUSH
21113: LD_INT 23
21115: PUSH
21116: LD_INT 0
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: LIST
21131: PPUSH
21132: CALL_OW 69
21136: ST_TO_ADDR
// if not tmp then
21137: LD_VAR 0 6
21141: NOT
21142: IFFALSE 21146
// exit ;
21144: GO 21292
// s1 := rand ( 1 , 4 ) ;
21146: LD_ADDR_VAR 0 2
21150: PUSH
21151: LD_INT 1
21153: PPUSH
21154: LD_INT 4
21156: PPUSH
21157: CALL_OW 12
21161: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21162: LD_ADDR_VAR 0 4
21166: PUSH
21167: LD_VAR 0 6
21171: PUSH
21172: LD_INT 1
21174: ARRAY
21175: PPUSH
21176: LD_VAR 0 2
21180: PPUSH
21181: CALL_OW 259
21185: ST_TO_ADDR
// if s1 = 1 then
21186: LD_VAR 0 2
21190: PUSH
21191: LD_INT 1
21193: EQUAL
21194: IFFALSE 21214
// s2 := rand ( 2 , 4 ) else
21196: LD_ADDR_VAR 0 3
21200: PUSH
21201: LD_INT 2
21203: PPUSH
21204: LD_INT 4
21206: PPUSH
21207: CALL_OW 12
21211: ST_TO_ADDR
21212: GO 21222
// s2 := 1 ;
21214: LD_ADDR_VAR 0 3
21218: PUSH
21219: LD_INT 1
21221: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21222: LD_ADDR_VAR 0 5
21226: PUSH
21227: LD_VAR 0 6
21231: PUSH
21232: LD_INT 1
21234: ARRAY
21235: PPUSH
21236: LD_VAR 0 3
21240: PPUSH
21241: CALL_OW 259
21245: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21246: LD_VAR 0 6
21250: PUSH
21251: LD_INT 1
21253: ARRAY
21254: PPUSH
21255: LD_VAR 0 2
21259: PPUSH
21260: LD_VAR 0 5
21264: PPUSH
21265: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21269: LD_VAR 0 6
21273: PUSH
21274: LD_INT 1
21276: ARRAY
21277: PPUSH
21278: LD_VAR 0 3
21282: PPUSH
21283: LD_VAR 0 4
21287: PPUSH
21288: CALL_OW 237
// end ;
21292: PPOPN 6
21294: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21295: LD_EXP 44
21299: PUSH
21300: LD_EXP 91
21304: AND
21305: IFFALSE 21384
21307: GO 21309
21309: DISABLE
21310: LD_INT 0
21312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21313: LD_ADDR_VAR 0 1
21317: PUSH
21318: LD_INT 22
21320: PUSH
21321: LD_OWVAR 2
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 30
21332: PUSH
21333: LD_INT 3
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PPUSH
21344: CALL_OW 69
21348: ST_TO_ADDR
// if not tmp then
21349: LD_VAR 0 1
21353: NOT
21354: IFFALSE 21358
// exit ;
21356: GO 21384
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21358: LD_VAR 0 1
21362: PUSH
21363: LD_INT 1
21365: PPUSH
21366: LD_VAR 0 1
21370: PPUSH
21371: CALL_OW 12
21375: ARRAY
21376: PPUSH
21377: LD_INT 1
21379: PPUSH
21380: CALL_OW 234
// end ;
21384: PPOPN 1
21386: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21387: LD_EXP 44
21391: PUSH
21392: LD_EXP 92
21396: AND
21397: IFFALSE 21509
21399: GO 21401
21401: DISABLE
21402: LD_INT 0
21404: PPUSH
21405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21406: LD_ADDR_VAR 0 2
21410: PUSH
21411: LD_INT 22
21413: PUSH
21414: LD_OWVAR 2
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 2
21425: PUSH
21426: LD_INT 30
21428: PUSH
21429: LD_INT 27
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 30
21438: PUSH
21439: LD_INT 26
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 30
21448: PUSH
21449: LD_INT 28
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PPUSH
21466: CALL_OW 69
21470: ST_TO_ADDR
// if not tmp then
21471: LD_VAR 0 2
21475: NOT
21476: IFFALSE 21480
// exit ;
21478: GO 21509
// for i in tmp do
21480: LD_ADDR_VAR 0 1
21484: PUSH
21485: LD_VAR 0 2
21489: PUSH
21490: FOR_IN
21491: IFFALSE 21507
// SetLives ( i , 1 ) ;
21493: LD_VAR 0 1
21497: PPUSH
21498: LD_INT 1
21500: PPUSH
21501: CALL_OW 234
21505: GO 21490
21507: POP
21508: POP
// end ;
21509: PPOPN 2
21511: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21512: LD_EXP 44
21516: PUSH
21517: LD_EXP 93
21521: AND
21522: IFFALSE 21809
21524: GO 21526
21526: DISABLE
21527: LD_INT 0
21529: PPUSH
21530: PPUSH
21531: PPUSH
// begin i := rand ( 1 , 7 ) ;
21532: LD_ADDR_VAR 0 1
21536: PUSH
21537: LD_INT 1
21539: PPUSH
21540: LD_INT 7
21542: PPUSH
21543: CALL_OW 12
21547: ST_TO_ADDR
// case i of 1 :
21548: LD_VAR 0 1
21552: PUSH
21553: LD_INT 1
21555: DOUBLE
21556: EQUAL
21557: IFTRUE 21561
21559: GO 21571
21561: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21562: LD_STRING earthquake(getX(game), 0, 32)
21564: PPUSH
21565: CALL_OW 559
21569: GO 21809
21571: LD_INT 2
21573: DOUBLE
21574: EQUAL
21575: IFTRUE 21579
21577: GO 21593
21579: POP
// begin ToLua ( displayStucuk(); ) ;
21580: LD_STRING displayStucuk();
21582: PPUSH
21583: CALL_OW 559
// ResetFog ;
21587: CALL_OW 335
// end ; 3 :
21591: GO 21809
21593: LD_INT 3
21595: DOUBLE
21596: EQUAL
21597: IFTRUE 21601
21599: GO 21705
21601: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21602: LD_ADDR_VAR 0 2
21606: PUSH
21607: LD_INT 22
21609: PUSH
21610: LD_OWVAR 2
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 25
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PPUSH
21633: CALL_OW 69
21637: ST_TO_ADDR
// if not tmp then
21638: LD_VAR 0 2
21642: NOT
21643: IFFALSE 21647
// exit ;
21645: GO 21809
// un := tmp [ rand ( 1 , tmp ) ] ;
21647: LD_ADDR_VAR 0 3
21651: PUSH
21652: LD_VAR 0 2
21656: PUSH
21657: LD_INT 1
21659: PPUSH
21660: LD_VAR 0 2
21664: PPUSH
21665: CALL_OW 12
21669: ARRAY
21670: ST_TO_ADDR
// if Crawls ( un ) then
21671: LD_VAR 0 3
21675: PPUSH
21676: CALL_OW 318
21680: IFFALSE 21691
// ComWalk ( un ) ;
21682: LD_VAR 0 3
21686: PPUSH
21687: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21691: LD_VAR 0 3
21695: PPUSH
21696: LD_INT 8
21698: PPUSH
21699: CALL_OW 336
// end ; 4 :
21703: GO 21809
21705: LD_INT 4
21707: DOUBLE
21708: EQUAL
21709: IFTRUE 21713
21711: GO 21787
21713: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21714: LD_ADDR_VAR 0 2
21718: PUSH
21719: LD_INT 22
21721: PUSH
21722: LD_OWVAR 2
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 30
21733: PUSH
21734: LD_INT 29
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PPUSH
21745: CALL_OW 69
21749: ST_TO_ADDR
// if not tmp then
21750: LD_VAR 0 2
21754: NOT
21755: IFFALSE 21759
// exit ;
21757: GO 21809
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21759: LD_VAR 0 2
21763: PUSH
21764: LD_INT 1
21766: ARRAY
21767: PPUSH
21768: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21772: LD_VAR 0 2
21776: PUSH
21777: LD_INT 1
21779: ARRAY
21780: PPUSH
21781: CALL_OW 65
// end ; 5 .. 7 :
21785: GO 21809
21787: LD_INT 5
21789: DOUBLE
21790: GREATEREQUAL
21791: IFFALSE 21799
21793: LD_INT 7
21795: DOUBLE
21796: LESSEQUAL
21797: IFTRUE 21801
21799: GO 21808
21801: POP
// StreamSibBomb ; end ;
21802: CALL 18046 0 0
21806: GO 21809
21808: POP
// end ;
21809: PPOPN 3
21811: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21812: LD_EXP 44
21816: PUSH
21817: LD_EXP 94
21821: AND
21822: IFFALSE 21978
21824: GO 21826
21826: DISABLE
21827: LD_INT 0
21829: PPUSH
21830: PPUSH
21831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21832: LD_ADDR_VAR 0 2
21836: PUSH
21837: LD_INT 81
21839: PUSH
21840: LD_OWVAR 2
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 2
21851: PUSH
21852: LD_INT 21
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 21
21864: PUSH
21865: LD_INT 2
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: LIST
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PPUSH
21881: CALL_OW 69
21885: ST_TO_ADDR
// if not tmp then
21886: LD_VAR 0 2
21890: NOT
21891: IFFALSE 21895
// exit ;
21893: GO 21978
// p := 0 ;
21895: LD_ADDR_VAR 0 3
21899: PUSH
21900: LD_INT 0
21902: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21903: LD_INT 35
21905: PPUSH
21906: CALL_OW 67
// p := p + 1 ;
21910: LD_ADDR_VAR 0 3
21914: PUSH
21915: LD_VAR 0 3
21919: PUSH
21920: LD_INT 1
21922: PLUS
21923: ST_TO_ADDR
// for i in tmp do
21924: LD_ADDR_VAR 0 1
21928: PUSH
21929: LD_VAR 0 2
21933: PUSH
21934: FOR_IN
21935: IFFALSE 21966
// if GetLives ( i ) < 1000 then
21937: LD_VAR 0 1
21941: PPUSH
21942: CALL_OW 256
21946: PUSH
21947: LD_INT 1000
21949: LESS
21950: IFFALSE 21964
// SetLives ( i , 1000 ) ;
21952: LD_VAR 0 1
21956: PPUSH
21957: LD_INT 1000
21959: PPUSH
21960: CALL_OW 234
21964: GO 21934
21966: POP
21967: POP
// until p > 20 ;
21968: LD_VAR 0 3
21972: PUSH
21973: LD_INT 20
21975: GREATER
21976: IFFALSE 21903
// end ;
21978: PPOPN 3
21980: END
// every 0 0$1 trigger StreamModeActive and sTime do
21981: LD_EXP 44
21985: PUSH
21986: LD_EXP 95
21990: AND
21991: IFFALSE 22026
21993: GO 21995
21995: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21996: LD_INT 28
21998: PPUSH
21999: LD_OWVAR 2
22003: PPUSH
22004: LD_INT 2
22006: PPUSH
22007: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22011: LD_INT 30
22013: PPUSH
22014: LD_OWVAR 2
22018: PPUSH
22019: LD_INT 2
22021: PPUSH
22022: CALL_OW 322
// end ;
22026: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22027: LD_EXP 44
22031: PUSH
22032: LD_EXP 96
22036: AND
22037: IFFALSE 22158
22039: GO 22041
22041: DISABLE
22042: LD_INT 0
22044: PPUSH
22045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22046: LD_ADDR_VAR 0 2
22050: PUSH
22051: LD_INT 22
22053: PUSH
22054: LD_OWVAR 2
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 21
22065: PUSH
22066: LD_INT 1
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 3
22075: PUSH
22076: LD_INT 23
22078: PUSH
22079: LD_INT 0
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: LIST
22094: PPUSH
22095: CALL_OW 69
22099: ST_TO_ADDR
// if not tmp then
22100: LD_VAR 0 2
22104: NOT
22105: IFFALSE 22109
// exit ;
22107: GO 22158
// for i in tmp do
22109: LD_ADDR_VAR 0 1
22113: PUSH
22114: LD_VAR 0 2
22118: PUSH
22119: FOR_IN
22120: IFFALSE 22156
// begin if Crawls ( i ) then
22122: LD_VAR 0 1
22126: PPUSH
22127: CALL_OW 318
22131: IFFALSE 22142
// ComWalk ( i ) ;
22133: LD_VAR 0 1
22137: PPUSH
22138: CALL_OW 138
// SetClass ( i , 2 ) ;
22142: LD_VAR 0 1
22146: PPUSH
22147: LD_INT 2
22149: PPUSH
22150: CALL_OW 336
// end ;
22154: GO 22119
22156: POP
22157: POP
// end ;
22158: PPOPN 2
22160: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22161: LD_EXP 44
22165: PUSH
22166: LD_EXP 97
22170: AND
22171: IFFALSE 22459
22173: GO 22175
22175: DISABLE
22176: LD_INT 0
22178: PPUSH
22179: PPUSH
22180: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22181: LD_OWVAR 2
22185: PPUSH
22186: LD_INT 9
22188: PPUSH
22189: LD_INT 1
22191: PPUSH
22192: LD_INT 1
22194: PPUSH
22195: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22199: LD_INT 9
22201: PPUSH
22202: LD_OWVAR 2
22206: PPUSH
22207: CALL_OW 343
// uc_side := 9 ;
22211: LD_ADDR_OWVAR 20
22215: PUSH
22216: LD_INT 9
22218: ST_TO_ADDR
// uc_nation := 2 ;
22219: LD_ADDR_OWVAR 21
22223: PUSH
22224: LD_INT 2
22226: ST_TO_ADDR
// hc_name := Dark Warrior ;
22227: LD_ADDR_OWVAR 26
22231: PUSH
22232: LD_STRING Dark Warrior
22234: ST_TO_ADDR
// hc_gallery :=  ;
22235: LD_ADDR_OWVAR 33
22239: PUSH
22240: LD_STRING 
22242: ST_TO_ADDR
// hc_noskilllimit := true ;
22243: LD_ADDR_OWVAR 76
22247: PUSH
22248: LD_INT 1
22250: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22251: LD_ADDR_OWVAR 31
22255: PUSH
22256: LD_INT 30
22258: PUSH
22259: LD_INT 30
22261: PUSH
22262: LD_INT 30
22264: PUSH
22265: LD_INT 30
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: ST_TO_ADDR
// un := CreateHuman ;
22274: LD_ADDR_VAR 0 3
22278: PUSH
22279: CALL_OW 44
22283: ST_TO_ADDR
// hc_noskilllimit := false ;
22284: LD_ADDR_OWVAR 76
22288: PUSH
22289: LD_INT 0
22291: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22292: LD_VAR 0 3
22296: PPUSH
22297: LD_INT 1
22299: PPUSH
22300: CALL_OW 51
// ToLua ( playRanger() ) ;
22304: LD_STRING playRanger()
22306: PPUSH
22307: CALL_OW 559
// p := 0 ;
22311: LD_ADDR_VAR 0 2
22315: PUSH
22316: LD_INT 0
22318: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22319: LD_INT 35
22321: PPUSH
22322: CALL_OW 67
// p := p + 1 ;
22326: LD_ADDR_VAR 0 2
22330: PUSH
22331: LD_VAR 0 2
22335: PUSH
22336: LD_INT 1
22338: PLUS
22339: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22340: LD_VAR 0 3
22344: PPUSH
22345: CALL_OW 256
22349: PUSH
22350: LD_INT 1000
22352: LESS
22353: IFFALSE 22367
// SetLives ( un , 1000 ) ;
22355: LD_VAR 0 3
22359: PPUSH
22360: LD_INT 1000
22362: PPUSH
22363: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22367: LD_VAR 0 3
22371: PPUSH
22372: LD_INT 81
22374: PUSH
22375: LD_OWVAR 2
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 91
22386: PUSH
22387: LD_VAR 0 3
22391: PUSH
22392: LD_INT 30
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: LIST
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PPUSH
22404: CALL_OW 69
22408: PPUSH
22409: LD_VAR 0 3
22413: PPUSH
22414: CALL_OW 74
22418: PPUSH
22419: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22423: LD_VAR 0 2
22427: PUSH
22428: LD_INT 80
22430: GREATER
22431: PUSH
22432: LD_VAR 0 3
22436: PPUSH
22437: CALL_OW 301
22441: OR
22442: IFFALSE 22319
// if un then
22444: LD_VAR 0 3
22448: IFFALSE 22459
// RemoveUnit ( un ) ;
22450: LD_VAR 0 3
22454: PPUSH
22455: CALL_OW 64
// end ;
22459: PPOPN 3
22461: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22462: LD_EXP 98
22466: IFFALSE 22582
22468: GO 22470
22470: DISABLE
22471: LD_INT 0
22473: PPUSH
22474: PPUSH
22475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22476: LD_ADDR_VAR 0 2
22480: PUSH
22481: LD_INT 81
22483: PUSH
22484: LD_OWVAR 2
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 21
22495: PUSH
22496: LD_INT 1
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PPUSH
22507: CALL_OW 69
22511: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22512: LD_STRING playComputer()
22514: PPUSH
22515: CALL_OW 559
// if not tmp then
22519: LD_VAR 0 2
22523: NOT
22524: IFFALSE 22528
// exit ;
22526: GO 22582
// for i in tmp do
22528: LD_ADDR_VAR 0 1
22532: PUSH
22533: LD_VAR 0 2
22537: PUSH
22538: FOR_IN
22539: IFFALSE 22580
// for j := 1 to 4 do
22541: LD_ADDR_VAR 0 3
22545: PUSH
22546: DOUBLE
22547: LD_INT 1
22549: DEC
22550: ST_TO_ADDR
22551: LD_INT 4
22553: PUSH
22554: FOR_TO
22555: IFFALSE 22576
// SetSkill ( i , j , 10 ) ;
22557: LD_VAR 0 1
22561: PPUSH
22562: LD_VAR 0 3
22566: PPUSH
22567: LD_INT 10
22569: PPUSH
22570: CALL_OW 237
22574: GO 22554
22576: POP
22577: POP
22578: GO 22538
22580: POP
22581: POP
// end ;
22582: PPOPN 3
22584: END
// every 0 0$1 trigger s30 do var i , tmp ;
22585: LD_EXP 99
22589: IFFALSE 22658
22591: GO 22593
22593: DISABLE
22594: LD_INT 0
22596: PPUSH
22597: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22598: LD_ADDR_VAR 0 2
22602: PUSH
22603: LD_INT 22
22605: PUSH
22606: LD_OWVAR 2
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PPUSH
22615: CALL_OW 69
22619: ST_TO_ADDR
// if not tmp then
22620: LD_VAR 0 2
22624: NOT
22625: IFFALSE 22629
// exit ;
22627: GO 22658
// for i in tmp do
22629: LD_ADDR_VAR 0 1
22633: PUSH
22634: LD_VAR 0 2
22638: PUSH
22639: FOR_IN
22640: IFFALSE 22656
// SetLives ( i , 300 ) ;
22642: LD_VAR 0 1
22646: PPUSH
22647: LD_INT 300
22649: PPUSH
22650: CALL_OW 234
22654: GO 22639
22656: POP
22657: POP
// end ;
22658: PPOPN 2
22660: END
// every 0 0$1 trigger s60 do var i , tmp ;
22661: LD_EXP 100
22665: IFFALSE 22734
22667: GO 22669
22669: DISABLE
22670: LD_INT 0
22672: PPUSH
22673: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22674: LD_ADDR_VAR 0 2
22678: PUSH
22679: LD_INT 22
22681: PUSH
22682: LD_OWVAR 2
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PPUSH
22691: CALL_OW 69
22695: ST_TO_ADDR
// if not tmp then
22696: LD_VAR 0 2
22700: NOT
22701: IFFALSE 22705
// exit ;
22703: GO 22734
// for i in tmp do
22705: LD_ADDR_VAR 0 1
22709: PUSH
22710: LD_VAR 0 2
22714: PUSH
22715: FOR_IN
22716: IFFALSE 22732
// SetLives ( i , 600 ) ;
22718: LD_VAR 0 1
22722: PPUSH
22723: LD_INT 600
22725: PPUSH
22726: CALL_OW 234
22730: GO 22715
22732: POP
22733: POP
// end ;
22734: PPOPN 2
22736: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22737: LD_INT 0
22739: PPUSH
// case cmd of 301 :
22740: LD_VAR 0 1
22744: PUSH
22745: LD_INT 301
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 22785
22753: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22754: LD_VAR 0 6
22758: PPUSH
22759: LD_VAR 0 7
22763: PPUSH
22764: LD_VAR 0 8
22768: PPUSH
22769: LD_VAR 0 4
22773: PPUSH
22774: LD_VAR 0 5
22778: PPUSH
22779: CALL 23986 0 5
22783: GO 22906
22785: LD_INT 302
22787: DOUBLE
22788: EQUAL
22789: IFTRUE 22793
22791: GO 22830
22793: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22794: LD_VAR 0 6
22798: PPUSH
22799: LD_VAR 0 7
22803: PPUSH
22804: LD_VAR 0 8
22808: PPUSH
22809: LD_VAR 0 9
22813: PPUSH
22814: LD_VAR 0 4
22818: PPUSH
22819: LD_VAR 0 5
22823: PPUSH
22824: CALL 24077 0 6
22828: GO 22906
22830: LD_INT 303
22832: DOUBLE
22833: EQUAL
22834: IFTRUE 22838
22836: GO 22875
22838: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22839: LD_VAR 0 6
22843: PPUSH
22844: LD_VAR 0 7
22848: PPUSH
22849: LD_VAR 0 8
22853: PPUSH
22854: LD_VAR 0 9
22858: PPUSH
22859: LD_VAR 0 4
22863: PPUSH
22864: LD_VAR 0 5
22868: PPUSH
22869: CALL 22911 0 6
22873: GO 22906
22875: LD_INT 304
22877: DOUBLE
22878: EQUAL
22879: IFTRUE 22883
22881: GO 22905
22883: POP
// hHackTeleport ( unit , x , y ) ; end ;
22884: LD_VAR 0 2
22888: PPUSH
22889: LD_VAR 0 4
22893: PPUSH
22894: LD_VAR 0 5
22898: PPUSH
22899: CALL 24670 0 3
22903: GO 22906
22905: POP
// end ;
22906: LD_VAR 0 12
22910: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22911: LD_INT 0
22913: PPUSH
22914: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22915: LD_VAR 0 1
22919: PUSH
22920: LD_INT 1
22922: LESS
22923: PUSH
22924: LD_VAR 0 1
22928: PUSH
22929: LD_INT 3
22931: GREATER
22932: OR
22933: PUSH
22934: LD_VAR 0 5
22938: PPUSH
22939: LD_VAR 0 6
22943: PPUSH
22944: CALL_OW 428
22948: OR
22949: IFFALSE 22953
// exit ;
22951: GO 23673
// uc_side := your_side ;
22953: LD_ADDR_OWVAR 20
22957: PUSH
22958: LD_OWVAR 2
22962: ST_TO_ADDR
// uc_nation := nation ;
22963: LD_ADDR_OWVAR 21
22967: PUSH
22968: LD_VAR 0 1
22972: ST_TO_ADDR
// bc_level = 1 ;
22973: LD_ADDR_OWVAR 43
22977: PUSH
22978: LD_INT 1
22980: ST_TO_ADDR
// case btype of 1 :
22981: LD_VAR 0 2
22985: PUSH
22986: LD_INT 1
22988: DOUBLE
22989: EQUAL
22990: IFTRUE 22994
22992: GO 23005
22994: POP
// bc_type := b_depot ; 2 :
22995: LD_ADDR_OWVAR 42
22999: PUSH
23000: LD_INT 0
23002: ST_TO_ADDR
23003: GO 23617
23005: LD_INT 2
23007: DOUBLE
23008: EQUAL
23009: IFTRUE 23013
23011: GO 23024
23013: POP
// bc_type := b_warehouse ; 3 :
23014: LD_ADDR_OWVAR 42
23018: PUSH
23019: LD_INT 1
23021: ST_TO_ADDR
23022: GO 23617
23024: LD_INT 3
23026: DOUBLE
23027: EQUAL
23028: IFTRUE 23032
23030: GO 23043
23032: POP
// bc_type := b_lab ; 4 .. 9 :
23033: LD_ADDR_OWVAR 42
23037: PUSH
23038: LD_INT 6
23040: ST_TO_ADDR
23041: GO 23617
23043: LD_INT 4
23045: DOUBLE
23046: GREATEREQUAL
23047: IFFALSE 23055
23049: LD_INT 9
23051: DOUBLE
23052: LESSEQUAL
23053: IFTRUE 23057
23055: GO 23109
23057: POP
// begin bc_type := b_lab_half ;
23058: LD_ADDR_OWVAR 42
23062: PUSH
23063: LD_INT 7
23065: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23066: LD_ADDR_OWVAR 44
23070: PUSH
23071: LD_INT 10
23073: PUSH
23074: LD_INT 11
23076: PUSH
23077: LD_INT 12
23079: PUSH
23080: LD_INT 15
23082: PUSH
23083: LD_INT 14
23085: PUSH
23086: LD_INT 13
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: PUSH
23097: LD_VAR 0 2
23101: PUSH
23102: LD_INT 3
23104: MINUS
23105: ARRAY
23106: ST_TO_ADDR
// end ; 10 .. 13 :
23107: GO 23617
23109: LD_INT 10
23111: DOUBLE
23112: GREATEREQUAL
23113: IFFALSE 23121
23115: LD_INT 13
23117: DOUBLE
23118: LESSEQUAL
23119: IFTRUE 23123
23121: GO 23200
23123: POP
// begin bc_type := b_lab_full ;
23124: LD_ADDR_OWVAR 42
23128: PUSH
23129: LD_INT 8
23131: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23132: LD_ADDR_OWVAR 44
23136: PUSH
23137: LD_INT 10
23139: PUSH
23140: LD_INT 12
23142: PUSH
23143: LD_INT 14
23145: PUSH
23146: LD_INT 13
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: PUSH
23155: LD_VAR 0 2
23159: PUSH
23160: LD_INT 9
23162: MINUS
23163: ARRAY
23164: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23165: LD_ADDR_OWVAR 45
23169: PUSH
23170: LD_INT 11
23172: PUSH
23173: LD_INT 15
23175: PUSH
23176: LD_INT 12
23178: PUSH
23179: LD_INT 15
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: PUSH
23188: LD_VAR 0 2
23192: PUSH
23193: LD_INT 9
23195: MINUS
23196: ARRAY
23197: ST_TO_ADDR
// end ; 14 :
23198: GO 23617
23200: LD_INT 14
23202: DOUBLE
23203: EQUAL
23204: IFTRUE 23208
23206: GO 23219
23208: POP
// bc_type := b_workshop ; 15 :
23209: LD_ADDR_OWVAR 42
23213: PUSH
23214: LD_INT 2
23216: ST_TO_ADDR
23217: GO 23617
23219: LD_INT 15
23221: DOUBLE
23222: EQUAL
23223: IFTRUE 23227
23225: GO 23238
23227: POP
// bc_type := b_factory ; 16 :
23228: LD_ADDR_OWVAR 42
23232: PUSH
23233: LD_INT 3
23235: ST_TO_ADDR
23236: GO 23617
23238: LD_INT 16
23240: DOUBLE
23241: EQUAL
23242: IFTRUE 23246
23244: GO 23257
23246: POP
// bc_type := b_ext_gun ; 17 :
23247: LD_ADDR_OWVAR 42
23251: PUSH
23252: LD_INT 17
23254: ST_TO_ADDR
23255: GO 23617
23257: LD_INT 17
23259: DOUBLE
23260: EQUAL
23261: IFTRUE 23265
23263: GO 23293
23265: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23266: LD_ADDR_OWVAR 42
23270: PUSH
23271: LD_INT 19
23273: PUSH
23274: LD_INT 23
23276: PUSH
23277: LD_INT 19
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: LIST
23284: PUSH
23285: LD_VAR 0 1
23289: ARRAY
23290: ST_TO_ADDR
23291: GO 23617
23293: LD_INT 18
23295: DOUBLE
23296: EQUAL
23297: IFTRUE 23301
23299: GO 23312
23301: POP
// bc_type := b_ext_radar ; 19 :
23302: LD_ADDR_OWVAR 42
23306: PUSH
23307: LD_INT 20
23309: ST_TO_ADDR
23310: GO 23617
23312: LD_INT 19
23314: DOUBLE
23315: EQUAL
23316: IFTRUE 23320
23318: GO 23331
23320: POP
// bc_type := b_ext_radio ; 20 :
23321: LD_ADDR_OWVAR 42
23325: PUSH
23326: LD_INT 22
23328: ST_TO_ADDR
23329: GO 23617
23331: LD_INT 20
23333: DOUBLE
23334: EQUAL
23335: IFTRUE 23339
23337: GO 23350
23339: POP
// bc_type := b_ext_siberium ; 21 :
23340: LD_ADDR_OWVAR 42
23344: PUSH
23345: LD_INT 21
23347: ST_TO_ADDR
23348: GO 23617
23350: LD_INT 21
23352: DOUBLE
23353: EQUAL
23354: IFTRUE 23358
23356: GO 23369
23358: POP
// bc_type := b_ext_computer ; 22 :
23359: LD_ADDR_OWVAR 42
23363: PUSH
23364: LD_INT 24
23366: ST_TO_ADDR
23367: GO 23617
23369: LD_INT 22
23371: DOUBLE
23372: EQUAL
23373: IFTRUE 23377
23375: GO 23388
23377: POP
// bc_type := b_ext_track ; 23 :
23378: LD_ADDR_OWVAR 42
23382: PUSH
23383: LD_INT 16
23385: ST_TO_ADDR
23386: GO 23617
23388: LD_INT 23
23390: DOUBLE
23391: EQUAL
23392: IFTRUE 23396
23394: GO 23407
23396: POP
// bc_type := b_ext_laser ; 24 :
23397: LD_ADDR_OWVAR 42
23401: PUSH
23402: LD_INT 25
23404: ST_TO_ADDR
23405: GO 23617
23407: LD_INT 24
23409: DOUBLE
23410: EQUAL
23411: IFTRUE 23415
23413: GO 23426
23415: POP
// bc_type := b_control_tower ; 25 :
23416: LD_ADDR_OWVAR 42
23420: PUSH
23421: LD_INT 36
23423: ST_TO_ADDR
23424: GO 23617
23426: LD_INT 25
23428: DOUBLE
23429: EQUAL
23430: IFTRUE 23434
23432: GO 23445
23434: POP
// bc_type := b_breastwork ; 26 :
23435: LD_ADDR_OWVAR 42
23439: PUSH
23440: LD_INT 31
23442: ST_TO_ADDR
23443: GO 23617
23445: LD_INT 26
23447: DOUBLE
23448: EQUAL
23449: IFTRUE 23453
23451: GO 23464
23453: POP
// bc_type := b_bunker ; 27 :
23454: LD_ADDR_OWVAR 42
23458: PUSH
23459: LD_INT 32
23461: ST_TO_ADDR
23462: GO 23617
23464: LD_INT 27
23466: DOUBLE
23467: EQUAL
23468: IFTRUE 23472
23470: GO 23483
23472: POP
// bc_type := b_turret ; 28 :
23473: LD_ADDR_OWVAR 42
23477: PUSH
23478: LD_INT 33
23480: ST_TO_ADDR
23481: GO 23617
23483: LD_INT 28
23485: DOUBLE
23486: EQUAL
23487: IFTRUE 23491
23489: GO 23502
23491: POP
// bc_type := b_armoury ; 29 :
23492: LD_ADDR_OWVAR 42
23496: PUSH
23497: LD_INT 4
23499: ST_TO_ADDR
23500: GO 23617
23502: LD_INT 29
23504: DOUBLE
23505: EQUAL
23506: IFTRUE 23510
23508: GO 23521
23510: POP
// bc_type := b_barracks ; 30 :
23511: LD_ADDR_OWVAR 42
23515: PUSH
23516: LD_INT 5
23518: ST_TO_ADDR
23519: GO 23617
23521: LD_INT 30
23523: DOUBLE
23524: EQUAL
23525: IFTRUE 23529
23527: GO 23540
23529: POP
// bc_type := b_solar_power ; 31 :
23530: LD_ADDR_OWVAR 42
23534: PUSH
23535: LD_INT 27
23537: ST_TO_ADDR
23538: GO 23617
23540: LD_INT 31
23542: DOUBLE
23543: EQUAL
23544: IFTRUE 23548
23546: GO 23559
23548: POP
// bc_type := b_oil_power ; 32 :
23549: LD_ADDR_OWVAR 42
23553: PUSH
23554: LD_INT 26
23556: ST_TO_ADDR
23557: GO 23617
23559: LD_INT 32
23561: DOUBLE
23562: EQUAL
23563: IFTRUE 23567
23565: GO 23578
23567: POP
// bc_type := b_siberite_power ; 33 :
23568: LD_ADDR_OWVAR 42
23572: PUSH
23573: LD_INT 28
23575: ST_TO_ADDR
23576: GO 23617
23578: LD_INT 33
23580: DOUBLE
23581: EQUAL
23582: IFTRUE 23586
23584: GO 23597
23586: POP
// bc_type := b_oil_mine ; 34 :
23587: LD_ADDR_OWVAR 42
23591: PUSH
23592: LD_INT 29
23594: ST_TO_ADDR
23595: GO 23617
23597: LD_INT 34
23599: DOUBLE
23600: EQUAL
23601: IFTRUE 23605
23603: GO 23616
23605: POP
// bc_type := b_siberite_mine ; end ;
23606: LD_ADDR_OWVAR 42
23610: PUSH
23611: LD_INT 30
23613: ST_TO_ADDR
23614: GO 23617
23616: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23617: LD_ADDR_VAR 0 8
23621: PUSH
23622: LD_VAR 0 5
23626: PPUSH
23627: LD_VAR 0 6
23631: PPUSH
23632: LD_VAR 0 3
23636: PPUSH
23637: CALL_OW 47
23641: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23642: LD_OWVAR 42
23646: PUSH
23647: LD_INT 32
23649: PUSH
23650: LD_INT 33
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: IN
23657: IFFALSE 23673
// PlaceWeaponTurret ( b , weapon ) ;
23659: LD_VAR 0 8
23663: PPUSH
23664: LD_VAR 0 4
23668: PPUSH
23669: CALL_OW 431
// end ;
23673: LD_VAR 0 7
23677: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23678: LD_INT 0
23680: PPUSH
23681: PPUSH
23682: PPUSH
23683: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23684: LD_ADDR_VAR 0 4
23688: PUSH
23689: LD_INT 22
23691: PUSH
23692: LD_OWVAR 2
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 2
23703: PUSH
23704: LD_INT 30
23706: PUSH
23707: LD_INT 0
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 30
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: LIST
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PPUSH
23733: CALL_OW 69
23737: ST_TO_ADDR
// if not tmp then
23738: LD_VAR 0 4
23742: NOT
23743: IFFALSE 23747
// exit ;
23745: GO 23806
// for i in tmp do
23747: LD_ADDR_VAR 0 2
23751: PUSH
23752: LD_VAR 0 4
23756: PUSH
23757: FOR_IN
23758: IFFALSE 23804
// for j = 1 to 3 do
23760: LD_ADDR_VAR 0 3
23764: PUSH
23765: DOUBLE
23766: LD_INT 1
23768: DEC
23769: ST_TO_ADDR
23770: LD_INT 3
23772: PUSH
23773: FOR_TO
23774: IFFALSE 23800
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23776: LD_VAR 0 2
23780: PPUSH
23781: CALL_OW 274
23785: PPUSH
23786: LD_VAR 0 3
23790: PPUSH
23791: LD_INT 99999
23793: PPUSH
23794: CALL_OW 277
23798: GO 23773
23800: POP
23801: POP
23802: GO 23757
23804: POP
23805: POP
// end ;
23806: LD_VAR 0 1
23810: RET
// export function hHackSetLevel10 ; var i , j ; begin
23811: LD_INT 0
23813: PPUSH
23814: PPUSH
23815: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23816: LD_ADDR_VAR 0 2
23820: PUSH
23821: LD_INT 21
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PPUSH
23831: CALL_OW 69
23835: PUSH
23836: FOR_IN
23837: IFFALSE 23889
// if IsSelected ( i ) then
23839: LD_VAR 0 2
23843: PPUSH
23844: CALL_OW 306
23848: IFFALSE 23887
// begin for j := 1 to 4 do
23850: LD_ADDR_VAR 0 3
23854: PUSH
23855: DOUBLE
23856: LD_INT 1
23858: DEC
23859: ST_TO_ADDR
23860: LD_INT 4
23862: PUSH
23863: FOR_TO
23864: IFFALSE 23885
// SetSkill ( i , j , 10 ) ;
23866: LD_VAR 0 2
23870: PPUSH
23871: LD_VAR 0 3
23875: PPUSH
23876: LD_INT 10
23878: PPUSH
23879: CALL_OW 237
23883: GO 23863
23885: POP
23886: POP
// end ;
23887: GO 23836
23889: POP
23890: POP
// end ;
23891: LD_VAR 0 1
23895: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23896: LD_INT 0
23898: PPUSH
23899: PPUSH
23900: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23901: LD_ADDR_VAR 0 2
23905: PUSH
23906: LD_INT 22
23908: PUSH
23909: LD_OWVAR 2
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 21
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PPUSH
23932: CALL_OW 69
23936: PUSH
23937: FOR_IN
23938: IFFALSE 23979
// begin for j := 1 to 4 do
23940: LD_ADDR_VAR 0 3
23944: PUSH
23945: DOUBLE
23946: LD_INT 1
23948: DEC
23949: ST_TO_ADDR
23950: LD_INT 4
23952: PUSH
23953: FOR_TO
23954: IFFALSE 23975
// SetSkill ( i , j , 10 ) ;
23956: LD_VAR 0 2
23960: PPUSH
23961: LD_VAR 0 3
23965: PPUSH
23966: LD_INT 10
23968: PPUSH
23969: CALL_OW 237
23973: GO 23953
23975: POP
23976: POP
// end ;
23977: GO 23937
23979: POP
23980: POP
// end ;
23981: LD_VAR 0 1
23985: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23986: LD_INT 0
23988: PPUSH
// uc_side := your_side ;
23989: LD_ADDR_OWVAR 20
23993: PUSH
23994: LD_OWVAR 2
23998: ST_TO_ADDR
// uc_nation := nation ;
23999: LD_ADDR_OWVAR 21
24003: PUSH
24004: LD_VAR 0 1
24008: ST_TO_ADDR
// InitHc ;
24009: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24013: LD_INT 0
24015: PPUSH
24016: LD_VAR 0 2
24020: PPUSH
24021: LD_VAR 0 3
24025: PPUSH
24026: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24030: LD_VAR 0 4
24034: PPUSH
24035: LD_VAR 0 5
24039: PPUSH
24040: CALL_OW 428
24044: PUSH
24045: LD_INT 0
24047: EQUAL
24048: IFFALSE 24072
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24050: CALL_OW 44
24054: PPUSH
24055: LD_VAR 0 4
24059: PPUSH
24060: LD_VAR 0 5
24064: PPUSH
24065: LD_INT 1
24067: PPUSH
24068: CALL_OW 48
// end ;
24072: LD_VAR 0 6
24076: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24077: LD_INT 0
24079: PPUSH
24080: PPUSH
// uc_side := your_side ;
24081: LD_ADDR_OWVAR 20
24085: PUSH
24086: LD_OWVAR 2
24090: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24091: LD_VAR 0 1
24095: PUSH
24096: LD_INT 1
24098: PUSH
24099: LD_INT 2
24101: PUSH
24102: LD_INT 3
24104: PUSH
24105: LD_INT 4
24107: PUSH
24108: LD_INT 5
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: IN
24118: IFFALSE 24130
// uc_nation := nation_american else
24120: LD_ADDR_OWVAR 21
24124: PUSH
24125: LD_INT 1
24127: ST_TO_ADDR
24128: GO 24173
// if chassis in [ 11 , 12 , 13 , 14 ] then
24130: LD_VAR 0 1
24134: PUSH
24135: LD_INT 11
24137: PUSH
24138: LD_INT 12
24140: PUSH
24141: LD_INT 13
24143: PUSH
24144: LD_INT 14
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: IN
24153: IFFALSE 24165
// uc_nation := nation_arabian else
24155: LD_ADDR_OWVAR 21
24159: PUSH
24160: LD_INT 2
24162: ST_TO_ADDR
24163: GO 24173
// uc_nation := nation_russian ;
24165: LD_ADDR_OWVAR 21
24169: PUSH
24170: LD_INT 3
24172: ST_TO_ADDR
// vc_chassis := chassis ;
24173: LD_ADDR_OWVAR 37
24177: PUSH
24178: LD_VAR 0 1
24182: ST_TO_ADDR
// vc_engine := engine ;
24183: LD_ADDR_OWVAR 39
24187: PUSH
24188: LD_VAR 0 2
24192: ST_TO_ADDR
// vc_control := control ;
24193: LD_ADDR_OWVAR 38
24197: PUSH
24198: LD_VAR 0 3
24202: ST_TO_ADDR
// vc_weapon := weapon ;
24203: LD_ADDR_OWVAR 40
24207: PUSH
24208: LD_VAR 0 4
24212: ST_TO_ADDR
// un := CreateVehicle ;
24213: LD_ADDR_VAR 0 8
24217: PUSH
24218: CALL_OW 45
24222: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24223: LD_VAR 0 8
24227: PPUSH
24228: LD_INT 0
24230: PPUSH
24231: LD_INT 5
24233: PPUSH
24234: CALL_OW 12
24238: PPUSH
24239: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24243: LD_VAR 0 8
24247: PPUSH
24248: LD_VAR 0 5
24252: PPUSH
24253: LD_VAR 0 6
24257: PPUSH
24258: LD_INT 1
24260: PPUSH
24261: CALL_OW 48
// end ;
24265: LD_VAR 0 7
24269: RET
// export hInvincible ; every 1 do
24270: GO 24272
24272: DISABLE
// hInvincible := [ ] ;
24273: LD_ADDR_EXP 101
24277: PUSH
24278: EMPTY
24279: ST_TO_ADDR
24280: END
// every 10 do var i ;
24281: GO 24283
24283: DISABLE
24284: LD_INT 0
24286: PPUSH
// begin enable ;
24287: ENABLE
// if not hInvincible then
24288: LD_EXP 101
24292: NOT
24293: IFFALSE 24297
// exit ;
24295: GO 24341
// for i in hInvincible do
24297: LD_ADDR_VAR 0 1
24301: PUSH
24302: LD_EXP 101
24306: PUSH
24307: FOR_IN
24308: IFFALSE 24339
// if GetLives ( i ) < 1000 then
24310: LD_VAR 0 1
24314: PPUSH
24315: CALL_OW 256
24319: PUSH
24320: LD_INT 1000
24322: LESS
24323: IFFALSE 24337
// SetLives ( i , 1000 ) ;
24325: LD_VAR 0 1
24329: PPUSH
24330: LD_INT 1000
24332: PPUSH
24333: CALL_OW 234
24337: GO 24307
24339: POP
24340: POP
// end ;
24341: PPOPN 1
24343: END
// export function hHackInvincible ; var i ; begin
24344: LD_INT 0
24346: PPUSH
24347: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24348: LD_ADDR_VAR 0 2
24352: PUSH
24353: LD_INT 2
24355: PUSH
24356: LD_INT 21
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 21
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: PPUSH
24381: CALL_OW 69
24385: PUSH
24386: FOR_IN
24387: IFFALSE 24448
// if IsSelected ( i ) then
24389: LD_VAR 0 2
24393: PPUSH
24394: CALL_OW 306
24398: IFFALSE 24446
// begin if i in hInvincible then
24400: LD_VAR 0 2
24404: PUSH
24405: LD_EXP 101
24409: IN
24410: IFFALSE 24430
// hInvincible := hInvincible diff i else
24412: LD_ADDR_EXP 101
24416: PUSH
24417: LD_EXP 101
24421: PUSH
24422: LD_VAR 0 2
24426: DIFF
24427: ST_TO_ADDR
24428: GO 24446
// hInvincible := hInvincible union i ;
24430: LD_ADDR_EXP 101
24434: PUSH
24435: LD_EXP 101
24439: PUSH
24440: LD_VAR 0 2
24444: UNION
24445: ST_TO_ADDR
// end ;
24446: GO 24386
24448: POP
24449: POP
// end ;
24450: LD_VAR 0 1
24454: RET
// export function hHackInvisible ; var i , j ; begin
24455: LD_INT 0
24457: PPUSH
24458: PPUSH
24459: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24460: LD_ADDR_VAR 0 2
24464: PUSH
24465: LD_INT 21
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PPUSH
24475: CALL_OW 69
24479: PUSH
24480: FOR_IN
24481: IFFALSE 24505
// if IsSelected ( i ) then
24483: LD_VAR 0 2
24487: PPUSH
24488: CALL_OW 306
24492: IFFALSE 24503
// ComForceInvisible ( i ) ;
24494: LD_VAR 0 2
24498: PPUSH
24499: CALL_OW 496
24503: GO 24480
24505: POP
24506: POP
// end ;
24507: LD_VAR 0 1
24511: RET
// export function hHackChangeYourSide ; begin
24512: LD_INT 0
24514: PPUSH
// if your_side = 8 then
24515: LD_OWVAR 2
24519: PUSH
24520: LD_INT 8
24522: EQUAL
24523: IFFALSE 24535
// your_side := 0 else
24525: LD_ADDR_OWVAR 2
24529: PUSH
24530: LD_INT 0
24532: ST_TO_ADDR
24533: GO 24549
// your_side := your_side + 1 ;
24535: LD_ADDR_OWVAR 2
24539: PUSH
24540: LD_OWVAR 2
24544: PUSH
24545: LD_INT 1
24547: PLUS
24548: ST_TO_ADDR
// end ;
24549: LD_VAR 0 1
24553: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24554: LD_INT 0
24556: PPUSH
24557: PPUSH
24558: PPUSH
// for i in all_units do
24559: LD_ADDR_VAR 0 2
24563: PUSH
24564: LD_OWVAR 3
24568: PUSH
24569: FOR_IN
24570: IFFALSE 24648
// if IsSelected ( i ) then
24572: LD_VAR 0 2
24576: PPUSH
24577: CALL_OW 306
24581: IFFALSE 24646
// begin j := GetSide ( i ) ;
24583: LD_ADDR_VAR 0 3
24587: PUSH
24588: LD_VAR 0 2
24592: PPUSH
24593: CALL_OW 255
24597: ST_TO_ADDR
// if j = 8 then
24598: LD_VAR 0 3
24602: PUSH
24603: LD_INT 8
24605: EQUAL
24606: IFFALSE 24618
// j := 0 else
24608: LD_ADDR_VAR 0 3
24612: PUSH
24613: LD_INT 0
24615: ST_TO_ADDR
24616: GO 24632
// j := j + 1 ;
24618: LD_ADDR_VAR 0 3
24622: PUSH
24623: LD_VAR 0 3
24627: PUSH
24628: LD_INT 1
24630: PLUS
24631: ST_TO_ADDR
// SetSide ( i , j ) ;
24632: LD_VAR 0 2
24636: PPUSH
24637: LD_VAR 0 3
24641: PPUSH
24642: CALL_OW 235
// end ;
24646: GO 24569
24648: POP
24649: POP
// end ;
24650: LD_VAR 0 1
24654: RET
// export function hHackFog ; begin
24655: LD_INT 0
24657: PPUSH
// FogOff ( true ) ;
24658: LD_INT 1
24660: PPUSH
24661: CALL_OW 344
// end ;
24665: LD_VAR 0 1
24669: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24670: LD_INT 0
24672: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24673: LD_VAR 0 1
24677: PPUSH
24678: LD_VAR 0 2
24682: PPUSH
24683: LD_VAR 0 3
24687: PPUSH
24688: LD_INT 1
24690: PPUSH
24691: LD_INT 1
24693: PPUSH
24694: CALL_OW 483
// CenterOnXY ( x , y ) ;
24698: LD_VAR 0 2
24702: PPUSH
24703: LD_VAR 0 3
24707: PPUSH
24708: CALL_OW 84
// end ;
24712: LD_VAR 0 4
24716: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24717: LD_INT 0
24719: PPUSH
24720: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24721: LD_VAR 0 1
24725: NOT
24726: PUSH
24727: LD_VAR 0 2
24731: PPUSH
24732: LD_VAR 0 3
24736: PPUSH
24737: CALL_OW 488
24741: NOT
24742: OR
24743: PUSH
24744: LD_VAR 0 1
24748: PPUSH
24749: CALL_OW 266
24753: PUSH
24754: LD_INT 3
24756: NONEQUAL
24757: PUSH
24758: LD_VAR 0 1
24762: PPUSH
24763: CALL_OW 247
24767: PUSH
24768: LD_INT 1
24770: EQUAL
24771: NOT
24772: AND
24773: OR
24774: IFFALSE 24778
// exit ;
24776: GO 24927
// if GetType ( factory ) = unit_human then
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL_OW 247
24787: PUSH
24788: LD_INT 1
24790: EQUAL
24791: IFFALSE 24808
// factory := IsInUnit ( factory ) ;
24793: LD_ADDR_VAR 0 1
24797: PUSH
24798: LD_VAR 0 1
24802: PPUSH
24803: CALL_OW 310
24807: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24808: LD_VAR 0 1
24812: PPUSH
24813: CALL_OW 266
24817: PUSH
24818: LD_INT 3
24820: NONEQUAL
24821: IFFALSE 24825
// exit ;
24823: GO 24927
// if HexInfo ( x , y ) = factory then
24825: LD_VAR 0 2
24829: PPUSH
24830: LD_VAR 0 3
24834: PPUSH
24835: CALL_OW 428
24839: PUSH
24840: LD_VAR 0 1
24844: EQUAL
24845: IFFALSE 24872
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24847: LD_ADDR_EXP 102
24851: PUSH
24852: LD_EXP 102
24856: PPUSH
24857: LD_VAR 0 1
24861: PPUSH
24862: LD_INT 0
24864: PPUSH
24865: CALL_OW 1
24869: ST_TO_ADDR
24870: GO 24923
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24872: LD_ADDR_EXP 102
24876: PUSH
24877: LD_EXP 102
24881: PPUSH
24882: LD_VAR 0 1
24886: PPUSH
24887: LD_VAR 0 1
24891: PPUSH
24892: CALL_OW 255
24896: PUSH
24897: LD_VAR 0 1
24901: PUSH
24902: LD_VAR 0 2
24906: PUSH
24907: LD_VAR 0 3
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: PPUSH
24918: CALL_OW 1
24922: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24923: CALL 24932 0 0
// end ;
24927: LD_VAR 0 4
24931: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24932: LD_INT 0
24934: PPUSH
24935: PPUSH
24936: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24937: LD_STRING resetFactoryWaypoint();
24939: PPUSH
24940: CALL_OW 559
// if factoryWaypoints then
24944: LD_EXP 102
24948: IFFALSE 25074
// begin list := PrepareArray ( factoryWaypoints ) ;
24950: LD_ADDR_VAR 0 3
24954: PUSH
24955: LD_EXP 102
24959: PPUSH
24960: CALL 71706 0 1
24964: ST_TO_ADDR
// for i := 1 to list do
24965: LD_ADDR_VAR 0 2
24969: PUSH
24970: DOUBLE
24971: LD_INT 1
24973: DEC
24974: ST_TO_ADDR
24975: LD_VAR 0 3
24979: PUSH
24980: FOR_TO
24981: IFFALSE 25072
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24983: LD_STRING setFactoryWaypointXY(
24985: PUSH
24986: LD_VAR 0 3
24990: PUSH
24991: LD_VAR 0 2
24995: ARRAY
24996: PUSH
24997: LD_INT 1
24999: ARRAY
25000: STR
25001: PUSH
25002: LD_STRING ,
25004: STR
25005: PUSH
25006: LD_VAR 0 3
25010: PUSH
25011: LD_VAR 0 2
25015: ARRAY
25016: PUSH
25017: LD_INT 2
25019: ARRAY
25020: STR
25021: PUSH
25022: LD_STRING ,
25024: STR
25025: PUSH
25026: LD_VAR 0 3
25030: PUSH
25031: LD_VAR 0 2
25035: ARRAY
25036: PUSH
25037: LD_INT 3
25039: ARRAY
25040: STR
25041: PUSH
25042: LD_STRING ,
25044: STR
25045: PUSH
25046: LD_VAR 0 3
25050: PUSH
25051: LD_VAR 0 2
25055: ARRAY
25056: PUSH
25057: LD_INT 4
25059: ARRAY
25060: STR
25061: PUSH
25062: LD_STRING )
25064: STR
25065: PPUSH
25066: CALL_OW 559
25070: GO 24980
25072: POP
25073: POP
// end ; end ;
25074: LD_VAR 0 1
25078: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25079: LD_INT 0
25081: PPUSH
// if HexInfo ( x , y ) = warehouse then
25082: LD_VAR 0 2
25086: PPUSH
25087: LD_VAR 0 3
25091: PPUSH
25092: CALL_OW 428
25096: PUSH
25097: LD_VAR 0 1
25101: EQUAL
25102: IFFALSE 25129
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25104: LD_ADDR_EXP 103
25108: PUSH
25109: LD_EXP 103
25113: PPUSH
25114: LD_VAR 0 1
25118: PPUSH
25119: LD_INT 0
25121: PPUSH
25122: CALL_OW 1
25126: ST_TO_ADDR
25127: GO 25180
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25129: LD_ADDR_EXP 103
25133: PUSH
25134: LD_EXP 103
25138: PPUSH
25139: LD_VAR 0 1
25143: PPUSH
25144: LD_VAR 0 1
25148: PPUSH
25149: CALL_OW 255
25153: PUSH
25154: LD_VAR 0 1
25158: PUSH
25159: LD_VAR 0 2
25163: PUSH
25164: LD_VAR 0 3
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: PPUSH
25175: CALL_OW 1
25179: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25180: CALL 25189 0 0
// end ;
25184: LD_VAR 0 4
25188: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25189: LD_INT 0
25191: PPUSH
25192: PPUSH
25193: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25194: LD_STRING resetWarehouseGatheringPoints();
25196: PPUSH
25197: CALL_OW 559
// if warehouseGatheringPoints then
25201: LD_EXP 103
25205: IFFALSE 25331
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25207: LD_ADDR_VAR 0 3
25211: PUSH
25212: LD_EXP 103
25216: PPUSH
25217: CALL 71706 0 1
25221: ST_TO_ADDR
// for i := 1 to list do
25222: LD_ADDR_VAR 0 2
25226: PUSH
25227: DOUBLE
25228: LD_INT 1
25230: DEC
25231: ST_TO_ADDR
25232: LD_VAR 0 3
25236: PUSH
25237: FOR_TO
25238: IFFALSE 25329
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25240: LD_STRING setWarehouseGatheringPointXY(
25242: PUSH
25243: LD_VAR 0 3
25247: PUSH
25248: LD_VAR 0 2
25252: ARRAY
25253: PUSH
25254: LD_INT 1
25256: ARRAY
25257: STR
25258: PUSH
25259: LD_STRING ,
25261: STR
25262: PUSH
25263: LD_VAR 0 3
25267: PUSH
25268: LD_VAR 0 2
25272: ARRAY
25273: PUSH
25274: LD_INT 2
25276: ARRAY
25277: STR
25278: PUSH
25279: LD_STRING ,
25281: STR
25282: PUSH
25283: LD_VAR 0 3
25287: PUSH
25288: LD_VAR 0 2
25292: ARRAY
25293: PUSH
25294: LD_INT 3
25296: ARRAY
25297: STR
25298: PUSH
25299: LD_STRING ,
25301: STR
25302: PUSH
25303: LD_VAR 0 3
25307: PUSH
25308: LD_VAR 0 2
25312: ARRAY
25313: PUSH
25314: LD_INT 4
25316: ARRAY
25317: STR
25318: PUSH
25319: LD_STRING )
25321: STR
25322: PPUSH
25323: CALL_OW 559
25327: GO 25237
25329: POP
25330: POP
// end ; end ;
25331: LD_VAR 0 1
25335: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25336: LD_EXP 103
25340: IFFALSE 26025
25342: GO 25344
25344: DISABLE
25345: LD_INT 0
25347: PPUSH
25348: PPUSH
25349: PPUSH
25350: PPUSH
25351: PPUSH
25352: PPUSH
25353: PPUSH
25354: PPUSH
25355: PPUSH
// begin enable ;
25356: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25357: LD_ADDR_VAR 0 3
25361: PUSH
25362: LD_EXP 103
25366: PPUSH
25367: CALL 71706 0 1
25371: ST_TO_ADDR
// if not list then
25372: LD_VAR 0 3
25376: NOT
25377: IFFALSE 25381
// exit ;
25379: GO 26025
// for i := 1 to list do
25381: LD_ADDR_VAR 0 1
25385: PUSH
25386: DOUBLE
25387: LD_INT 1
25389: DEC
25390: ST_TO_ADDR
25391: LD_VAR 0 3
25395: PUSH
25396: FOR_TO
25397: IFFALSE 26023
// begin depot := list [ i ] [ 2 ] ;
25399: LD_ADDR_VAR 0 8
25403: PUSH
25404: LD_VAR 0 3
25408: PUSH
25409: LD_VAR 0 1
25413: ARRAY
25414: PUSH
25415: LD_INT 2
25417: ARRAY
25418: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25419: LD_ADDR_VAR 0 5
25423: PUSH
25424: LD_VAR 0 3
25428: PUSH
25429: LD_VAR 0 1
25433: ARRAY
25434: PUSH
25435: LD_INT 1
25437: ARRAY
25438: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25439: LD_VAR 0 8
25443: PPUSH
25444: CALL_OW 301
25448: PUSH
25449: LD_VAR 0 5
25453: PUSH
25454: LD_VAR 0 8
25458: PPUSH
25459: CALL_OW 255
25463: NONEQUAL
25464: OR
25465: IFFALSE 25494
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25467: LD_ADDR_EXP 103
25471: PUSH
25472: LD_EXP 103
25476: PPUSH
25477: LD_VAR 0 8
25481: PPUSH
25482: LD_INT 0
25484: PPUSH
25485: CALL_OW 1
25489: ST_TO_ADDR
// exit ;
25490: POP
25491: POP
25492: GO 26025
// end ; x := list [ i ] [ 3 ] ;
25494: LD_ADDR_VAR 0 6
25498: PUSH
25499: LD_VAR 0 3
25503: PUSH
25504: LD_VAR 0 1
25508: ARRAY
25509: PUSH
25510: LD_INT 3
25512: ARRAY
25513: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25514: LD_ADDR_VAR 0 7
25518: PUSH
25519: LD_VAR 0 3
25523: PUSH
25524: LD_VAR 0 1
25528: ARRAY
25529: PUSH
25530: LD_INT 4
25532: ARRAY
25533: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25534: LD_ADDR_VAR 0 9
25538: PUSH
25539: LD_VAR 0 6
25543: PPUSH
25544: LD_VAR 0 7
25548: PPUSH
25549: LD_INT 16
25551: PPUSH
25552: CALL 70294 0 3
25556: ST_TO_ADDR
// if not cratesNearbyPoint then
25557: LD_VAR 0 9
25561: NOT
25562: IFFALSE 25568
// exit ;
25564: POP
25565: POP
25566: GO 26025
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25568: LD_ADDR_VAR 0 4
25572: PUSH
25573: LD_INT 22
25575: PUSH
25576: LD_VAR 0 5
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 3
25587: PUSH
25588: LD_INT 60
25590: PUSH
25591: EMPTY
25592: LIST
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 91
25600: PUSH
25601: LD_VAR 0 8
25605: PUSH
25606: LD_INT 6
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 2
25616: PUSH
25617: LD_INT 25
25619: PUSH
25620: LD_INT 2
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 25
25629: PUSH
25630: LD_INT 16
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: LIST
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: PPUSH
25648: CALL_OW 69
25652: PUSH
25653: LD_VAR 0 8
25657: PPUSH
25658: CALL_OW 313
25662: PPUSH
25663: LD_INT 3
25665: PUSH
25666: LD_INT 60
25668: PUSH
25669: EMPTY
25670: LIST
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 2
25678: PUSH
25679: LD_INT 25
25681: PUSH
25682: LD_INT 2
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 25
25691: PUSH
25692: LD_INT 16
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: LIST
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PPUSH
25708: CALL_OW 72
25712: UNION
25713: ST_TO_ADDR
// if tmp then
25714: LD_VAR 0 4
25718: IFFALSE 25798
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25720: LD_ADDR_VAR 0 4
25724: PUSH
25725: LD_VAR 0 4
25729: PPUSH
25730: LD_INT 3
25732: PPUSH
25733: CALL 68263 0 2
25737: ST_TO_ADDR
// for j in tmp do
25738: LD_ADDR_VAR 0 2
25742: PUSH
25743: LD_VAR 0 4
25747: PUSH
25748: FOR_IN
25749: IFFALSE 25792
// begin if IsInUnit ( j ) then
25751: LD_VAR 0 2
25755: PPUSH
25756: CALL_OW 310
25760: IFFALSE 25771
// ComExit ( j ) ;
25762: LD_VAR 0 2
25766: PPUSH
25767: CALL 68346 0 1
// AddComCollect ( j , x , y ) ;
25771: LD_VAR 0 2
25775: PPUSH
25776: LD_VAR 0 6
25780: PPUSH
25781: LD_VAR 0 7
25785: PPUSH
25786: CALL_OW 177
// end ;
25790: GO 25748
25792: POP
25793: POP
// exit ;
25794: POP
25795: POP
25796: GO 26025
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25798: LD_ADDR_VAR 0 4
25802: PUSH
25803: LD_INT 22
25805: PUSH
25806: LD_VAR 0 5
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 91
25817: PUSH
25818: LD_VAR 0 8
25822: PUSH
25823: LD_INT 8
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 2
25833: PUSH
25834: LD_INT 34
25836: PUSH
25837: LD_INT 12
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 34
25846: PUSH
25847: LD_INT 51
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 34
25856: PUSH
25857: LD_INT 32
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 34
25866: PUSH
25867: LD_INT 89
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: LIST
25885: PPUSH
25886: CALL_OW 69
25890: ST_TO_ADDR
// if tmp then
25891: LD_VAR 0 4
25895: IFFALSE 26021
// begin for j in tmp do
25897: LD_ADDR_VAR 0 2
25901: PUSH
25902: LD_VAR 0 4
25906: PUSH
25907: FOR_IN
25908: IFFALSE 26019
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25910: LD_VAR 0 2
25914: PPUSH
25915: CALL_OW 262
25919: PUSH
25920: LD_INT 3
25922: EQUAL
25923: PUSH
25924: LD_VAR 0 2
25928: PPUSH
25929: CALL_OW 261
25933: PUSH
25934: LD_INT 20
25936: GREATER
25937: OR
25938: PUSH
25939: LD_VAR 0 2
25943: PPUSH
25944: CALL_OW 314
25948: NOT
25949: AND
25950: PUSH
25951: LD_VAR 0 2
25955: PPUSH
25956: CALL_OW 263
25960: PUSH
25961: LD_INT 1
25963: NONEQUAL
25964: PUSH
25965: LD_VAR 0 2
25969: PPUSH
25970: CALL_OW 311
25974: OR
25975: AND
25976: IFFALSE 26017
// begin ComCollect ( j , x , y ) ;
25978: LD_VAR 0 2
25982: PPUSH
25983: LD_VAR 0 6
25987: PPUSH
25988: LD_VAR 0 7
25992: PPUSH
25993: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25997: LD_VAR 0 2
26001: PPUSH
26002: LD_VAR 0 8
26006: PPUSH
26007: CALL_OW 172
// exit ;
26011: POP
26012: POP
26013: POP
26014: POP
26015: GO 26025
// end ;
26017: GO 25907
26019: POP
26020: POP
// end ; end ;
26021: GO 25396
26023: POP
26024: POP
// end ; end_of_file
26025: PPOPN 9
26027: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26028: LD_VAR 0 1
26032: PUSH
26033: LD_INT 200
26035: DOUBLE
26036: GREATEREQUAL
26037: IFFALSE 26045
26039: LD_INT 299
26041: DOUBLE
26042: LESSEQUAL
26043: IFTRUE 26047
26045: GO 26079
26047: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26048: LD_VAR 0 1
26052: PPUSH
26053: LD_VAR 0 2
26057: PPUSH
26058: LD_VAR 0 3
26062: PPUSH
26063: LD_VAR 0 4
26067: PPUSH
26068: LD_VAR 0 5
26072: PPUSH
26073: CALL 26567 0 5
26077: GO 26156
26079: LD_INT 300
26081: DOUBLE
26082: GREATEREQUAL
26083: IFFALSE 26091
26085: LD_INT 399
26087: DOUBLE
26088: LESSEQUAL
26089: IFTRUE 26093
26091: GO 26155
26093: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26094: LD_VAR 0 1
26098: PPUSH
26099: LD_VAR 0 2
26103: PPUSH
26104: LD_VAR 0 3
26108: PPUSH
26109: LD_VAR 0 4
26113: PPUSH
26114: LD_VAR 0 5
26118: PPUSH
26119: LD_VAR 0 6
26123: PPUSH
26124: LD_VAR 0 7
26128: PPUSH
26129: LD_VAR 0 8
26133: PPUSH
26134: LD_VAR 0 9
26138: PPUSH
26139: LD_VAR 0 10
26143: PPUSH
26144: LD_VAR 0 11
26148: PPUSH
26149: CALL 22737 0 11
26153: GO 26156
26155: POP
// end ;
26156: PPOPN 11
26158: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26159: LD_VAR 0 1
26163: PPUSH
26164: LD_VAR 0 2
26168: PPUSH
26169: LD_VAR 0 3
26173: PPUSH
26174: LD_VAR 0 4
26178: PPUSH
26179: LD_VAR 0 5
26183: PPUSH
26184: CALL 26303 0 5
// end ; end_of_file
26188: PPOPN 5
26190: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26191: LD_INT 0
26193: PPUSH
26194: PPUSH
26195: PPUSH
26196: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26197: LD_VAR 0 1
26201: PPUSH
26202: CALL_OW 264
26206: PUSH
26207: LD_INT 91
26209: EQUAL
26210: IFFALSE 26282
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26212: LD_INT 68
26214: PPUSH
26215: LD_VAR 0 1
26219: PPUSH
26220: CALL_OW 255
26224: PPUSH
26225: CALL_OW 321
26229: PUSH
26230: LD_INT 2
26232: EQUAL
26233: IFFALSE 26245
// eff := 70 else
26235: LD_ADDR_VAR 0 4
26239: PUSH
26240: LD_INT 70
26242: ST_TO_ADDR
26243: GO 26253
// eff := 30 ;
26245: LD_ADDR_VAR 0 4
26249: PUSH
26250: LD_INT 30
26252: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26253: LD_VAR 0 1
26257: PPUSH
26258: CALL_OW 250
26262: PPUSH
26263: LD_VAR 0 1
26267: PPUSH
26268: CALL_OW 251
26272: PPUSH
26273: LD_VAR 0 4
26277: PPUSH
26278: CALL_OW 495
// end ; end ;
26282: LD_VAR 0 2
26286: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26287: LD_INT 0
26289: PPUSH
// end ;
26290: LD_VAR 0 4
26294: RET
// export function SOS_Command ( cmd ) ; begin
26295: LD_INT 0
26297: PPUSH
// end ;
26298: LD_VAR 0 2
26302: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26303: LD_INT 0
26305: PPUSH
// end ;
26306: LD_VAR 0 6
26310: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26311: LD_INT 0
26313: PPUSH
26314: PPUSH
// if not vehicle or not factory then
26315: LD_VAR 0 1
26319: NOT
26320: PUSH
26321: LD_VAR 0 2
26325: NOT
26326: OR
26327: IFFALSE 26331
// exit ;
26329: GO 26562
// if factoryWaypoints >= factory then
26331: LD_EXP 102
26335: PUSH
26336: LD_VAR 0 2
26340: GREATEREQUAL
26341: IFFALSE 26562
// if factoryWaypoints [ factory ] then
26343: LD_EXP 102
26347: PUSH
26348: LD_VAR 0 2
26352: ARRAY
26353: IFFALSE 26562
// begin if GetControl ( vehicle ) = control_manual then
26355: LD_VAR 0 1
26359: PPUSH
26360: CALL_OW 263
26364: PUSH
26365: LD_INT 1
26367: EQUAL
26368: IFFALSE 26449
// begin driver := IsDrivenBy ( vehicle ) ;
26370: LD_ADDR_VAR 0 4
26374: PUSH
26375: LD_VAR 0 1
26379: PPUSH
26380: CALL_OW 311
26384: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26385: LD_VAR 0 4
26389: PPUSH
26390: LD_EXP 102
26394: PUSH
26395: LD_VAR 0 2
26399: ARRAY
26400: PUSH
26401: LD_INT 3
26403: ARRAY
26404: PPUSH
26405: LD_EXP 102
26409: PUSH
26410: LD_VAR 0 2
26414: ARRAY
26415: PUSH
26416: LD_INT 4
26418: ARRAY
26419: PPUSH
26420: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26424: LD_VAR 0 4
26428: PPUSH
26429: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26433: LD_VAR 0 4
26437: PPUSH
26438: LD_VAR 0 2
26442: PPUSH
26443: CALL_OW 180
// end else
26447: GO 26562
// if GetControl ( vehicle ) = control_remote then
26449: LD_VAR 0 1
26453: PPUSH
26454: CALL_OW 263
26458: PUSH
26459: LD_INT 2
26461: EQUAL
26462: IFFALSE 26523
// begin wait ( 0 0$2 ) ;
26464: LD_INT 70
26466: PPUSH
26467: CALL_OW 67
// if Connect ( vehicle ) then
26471: LD_VAR 0 1
26475: PPUSH
26476: CALL 38586 0 1
26480: IFFALSE 26521
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26482: LD_VAR 0 1
26486: PPUSH
26487: LD_EXP 102
26491: PUSH
26492: LD_VAR 0 2
26496: ARRAY
26497: PUSH
26498: LD_INT 3
26500: ARRAY
26501: PPUSH
26502: LD_EXP 102
26506: PUSH
26507: LD_VAR 0 2
26511: ARRAY
26512: PUSH
26513: LD_INT 4
26515: ARRAY
26516: PPUSH
26517: CALL_OW 171
// end else
26521: GO 26562
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26523: LD_VAR 0 1
26527: PPUSH
26528: LD_EXP 102
26532: PUSH
26533: LD_VAR 0 2
26537: ARRAY
26538: PUSH
26539: LD_INT 3
26541: ARRAY
26542: PPUSH
26543: LD_EXP 102
26547: PUSH
26548: LD_VAR 0 2
26552: ARRAY
26553: PUSH
26554: LD_INT 4
26556: ARRAY
26557: PPUSH
26558: CALL_OW 171
// end ; end ;
26562: LD_VAR 0 3
26566: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26567: LD_INT 0
26569: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26570: LD_VAR 0 1
26574: PUSH
26575: LD_INT 250
26577: EQUAL
26578: PUSH
26579: LD_VAR 0 2
26583: PPUSH
26584: CALL_OW 264
26588: PUSH
26589: LD_INT 81
26591: EQUAL
26592: AND
26593: IFFALSE 26614
// MinerPlaceMine ( unit , x , y ) ;
26595: LD_VAR 0 2
26599: PPUSH
26600: LD_VAR 0 4
26604: PPUSH
26605: LD_VAR 0 5
26609: PPUSH
26610: CALL 28999 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26614: LD_VAR 0 1
26618: PUSH
26619: LD_INT 251
26621: EQUAL
26622: PUSH
26623: LD_VAR 0 2
26627: PPUSH
26628: CALL_OW 264
26632: PUSH
26633: LD_INT 81
26635: EQUAL
26636: AND
26637: IFFALSE 26658
// MinerDetonateMine ( unit , x , y ) ;
26639: LD_VAR 0 2
26643: PPUSH
26644: LD_VAR 0 4
26648: PPUSH
26649: LD_VAR 0 5
26653: PPUSH
26654: CALL 29274 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26658: LD_VAR 0 1
26662: PUSH
26663: LD_INT 252
26665: EQUAL
26666: PUSH
26667: LD_VAR 0 2
26671: PPUSH
26672: CALL_OW 264
26676: PUSH
26677: LD_INT 81
26679: EQUAL
26680: AND
26681: IFFALSE 26702
// MinerCreateMinefield ( unit , x , y ) ;
26683: LD_VAR 0 2
26687: PPUSH
26688: LD_VAR 0 4
26692: PPUSH
26693: LD_VAR 0 5
26697: PPUSH
26698: CALL 29691 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26702: LD_VAR 0 1
26706: PUSH
26707: LD_INT 253
26709: EQUAL
26710: PUSH
26711: LD_VAR 0 2
26715: PPUSH
26716: CALL_OW 257
26720: PUSH
26721: LD_INT 5
26723: EQUAL
26724: AND
26725: IFFALSE 26746
// ComBinocular ( unit , x , y ) ;
26727: LD_VAR 0 2
26731: PPUSH
26732: LD_VAR 0 4
26736: PPUSH
26737: LD_VAR 0 5
26741: PPUSH
26742: CALL 30060 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26746: LD_VAR 0 1
26750: PUSH
26751: LD_INT 254
26753: EQUAL
26754: PUSH
26755: LD_VAR 0 2
26759: PPUSH
26760: CALL_OW 264
26764: PUSH
26765: LD_INT 99
26767: EQUAL
26768: AND
26769: PUSH
26770: LD_VAR 0 3
26774: PPUSH
26775: CALL_OW 263
26779: PUSH
26780: LD_INT 3
26782: EQUAL
26783: AND
26784: IFFALSE 26800
// HackDestroyVehicle ( unit , selectedUnit ) ;
26786: LD_VAR 0 2
26790: PPUSH
26791: LD_VAR 0 3
26795: PPUSH
26796: CALL 28363 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26800: LD_VAR 0 1
26804: PUSH
26805: LD_INT 255
26807: EQUAL
26808: PUSH
26809: LD_VAR 0 2
26813: PPUSH
26814: CALL_OW 264
26818: PUSH
26819: LD_INT 14
26821: PUSH
26822: LD_INT 53
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: IN
26829: AND
26830: PUSH
26831: LD_VAR 0 4
26835: PPUSH
26836: LD_VAR 0 5
26840: PPUSH
26841: CALL_OW 488
26845: AND
26846: IFFALSE 26870
// CutTreeXYR ( unit , x , y , 12 ) ;
26848: LD_VAR 0 2
26852: PPUSH
26853: LD_VAR 0 4
26857: PPUSH
26858: LD_VAR 0 5
26862: PPUSH
26863: LD_INT 12
26865: PPUSH
26866: CALL 26933 0 4
// if cmd = 256 then
26870: LD_VAR 0 1
26874: PUSH
26875: LD_INT 256
26877: EQUAL
26878: IFFALSE 26899
// SetFactoryWaypoint ( unit , x , y ) ;
26880: LD_VAR 0 2
26884: PPUSH
26885: LD_VAR 0 4
26889: PPUSH
26890: LD_VAR 0 5
26894: PPUSH
26895: CALL 24717 0 3
// if cmd = 257 then
26899: LD_VAR 0 1
26903: PUSH
26904: LD_INT 257
26906: EQUAL
26907: IFFALSE 26928
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26909: LD_VAR 0 2
26913: PPUSH
26914: LD_VAR 0 4
26918: PPUSH
26919: LD_VAR 0 5
26923: PPUSH
26924: CALL 25079 0 3
// end ;
26928: LD_VAR 0 6
26932: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26933: LD_INT 0
26935: PPUSH
26936: PPUSH
26937: PPUSH
26938: PPUSH
26939: PPUSH
26940: PPUSH
26941: PPUSH
26942: PPUSH
26943: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26944: LD_VAR 0 1
26948: NOT
26949: PUSH
26950: LD_VAR 0 2
26954: PPUSH
26955: LD_VAR 0 3
26959: PPUSH
26960: CALL_OW 488
26964: NOT
26965: OR
26966: PUSH
26967: LD_VAR 0 4
26971: NOT
26972: OR
26973: IFFALSE 26977
// exit ;
26975: GO 27317
// list := [ ] ;
26977: LD_ADDR_VAR 0 13
26981: PUSH
26982: EMPTY
26983: ST_TO_ADDR
// if x - r < 0 then
26984: LD_VAR 0 2
26988: PUSH
26989: LD_VAR 0 4
26993: MINUS
26994: PUSH
26995: LD_INT 0
26997: LESS
26998: IFFALSE 27010
// min_x := 0 else
27000: LD_ADDR_VAR 0 7
27004: PUSH
27005: LD_INT 0
27007: ST_TO_ADDR
27008: GO 27026
// min_x := x - r ;
27010: LD_ADDR_VAR 0 7
27014: PUSH
27015: LD_VAR 0 2
27019: PUSH
27020: LD_VAR 0 4
27024: MINUS
27025: ST_TO_ADDR
// if y - r < 0 then
27026: LD_VAR 0 3
27030: PUSH
27031: LD_VAR 0 4
27035: MINUS
27036: PUSH
27037: LD_INT 0
27039: LESS
27040: IFFALSE 27052
// min_y := 0 else
27042: LD_ADDR_VAR 0 8
27046: PUSH
27047: LD_INT 0
27049: ST_TO_ADDR
27050: GO 27068
// min_y := y - r ;
27052: LD_ADDR_VAR 0 8
27056: PUSH
27057: LD_VAR 0 3
27061: PUSH
27062: LD_VAR 0 4
27066: MINUS
27067: ST_TO_ADDR
// max_x := x + r ;
27068: LD_ADDR_VAR 0 9
27072: PUSH
27073: LD_VAR 0 2
27077: PUSH
27078: LD_VAR 0 4
27082: PLUS
27083: ST_TO_ADDR
// max_y := y + r ;
27084: LD_ADDR_VAR 0 10
27088: PUSH
27089: LD_VAR 0 3
27093: PUSH
27094: LD_VAR 0 4
27098: PLUS
27099: ST_TO_ADDR
// for _x = min_x to max_x do
27100: LD_ADDR_VAR 0 11
27104: PUSH
27105: DOUBLE
27106: LD_VAR 0 7
27110: DEC
27111: ST_TO_ADDR
27112: LD_VAR 0 9
27116: PUSH
27117: FOR_TO
27118: IFFALSE 27235
// for _y = min_y to max_y do
27120: LD_ADDR_VAR 0 12
27124: PUSH
27125: DOUBLE
27126: LD_VAR 0 8
27130: DEC
27131: ST_TO_ADDR
27132: LD_VAR 0 10
27136: PUSH
27137: FOR_TO
27138: IFFALSE 27231
// begin if not ValidHex ( _x , _y ) then
27140: LD_VAR 0 11
27144: PPUSH
27145: LD_VAR 0 12
27149: PPUSH
27150: CALL_OW 488
27154: NOT
27155: IFFALSE 27159
// continue ;
27157: GO 27137
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27159: LD_VAR 0 11
27163: PPUSH
27164: LD_VAR 0 12
27168: PPUSH
27169: CALL_OW 351
27173: PUSH
27174: LD_VAR 0 11
27178: PPUSH
27179: LD_VAR 0 12
27183: PPUSH
27184: CALL_OW 554
27188: AND
27189: IFFALSE 27229
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27191: LD_ADDR_VAR 0 13
27195: PUSH
27196: LD_VAR 0 13
27200: PPUSH
27201: LD_VAR 0 13
27205: PUSH
27206: LD_INT 1
27208: PLUS
27209: PPUSH
27210: LD_VAR 0 11
27214: PUSH
27215: LD_VAR 0 12
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PPUSH
27224: CALL_OW 2
27228: ST_TO_ADDR
// end ;
27229: GO 27137
27231: POP
27232: POP
27233: GO 27117
27235: POP
27236: POP
// if not list then
27237: LD_VAR 0 13
27241: NOT
27242: IFFALSE 27246
// exit ;
27244: GO 27317
// for i in list do
27246: LD_ADDR_VAR 0 6
27250: PUSH
27251: LD_VAR 0 13
27255: PUSH
27256: FOR_IN
27257: IFFALSE 27315
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27259: LD_VAR 0 1
27263: PPUSH
27264: LD_STRING M
27266: PUSH
27267: LD_VAR 0 6
27271: PUSH
27272: LD_INT 1
27274: ARRAY
27275: PUSH
27276: LD_VAR 0 6
27280: PUSH
27281: LD_INT 2
27283: ARRAY
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: LD_INT 0
27293: PUSH
27294: LD_INT 0
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: PUSH
27306: EMPTY
27307: LIST
27308: PPUSH
27309: CALL_OW 447
27313: GO 27256
27315: POP
27316: POP
// end ;
27317: LD_VAR 0 5
27321: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27322: LD_EXP 105
27326: NOT
27327: IFFALSE 27377
27329: GO 27331
27331: DISABLE
// begin initHack := true ;
27332: LD_ADDR_EXP 105
27336: PUSH
27337: LD_INT 1
27339: ST_TO_ADDR
// hackTanks := [ ] ;
27340: LD_ADDR_EXP 106
27344: PUSH
27345: EMPTY
27346: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27347: LD_ADDR_EXP 107
27351: PUSH
27352: EMPTY
27353: ST_TO_ADDR
// hackLimit := 3 ;
27354: LD_ADDR_EXP 108
27358: PUSH
27359: LD_INT 3
27361: ST_TO_ADDR
// hackDist := 12 ;
27362: LD_ADDR_EXP 109
27366: PUSH
27367: LD_INT 12
27369: ST_TO_ADDR
// hackCounter := [ ] ;
27370: LD_ADDR_EXP 110
27374: PUSH
27375: EMPTY
27376: ST_TO_ADDR
// end ;
27377: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27378: LD_EXP 105
27382: PUSH
27383: LD_INT 34
27385: PUSH
27386: LD_INT 99
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PPUSH
27393: CALL_OW 69
27397: AND
27398: IFFALSE 27651
27400: GO 27402
27402: DISABLE
27403: LD_INT 0
27405: PPUSH
27406: PPUSH
// begin enable ;
27407: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27408: LD_ADDR_VAR 0 1
27412: PUSH
27413: LD_INT 34
27415: PUSH
27416: LD_INT 99
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PPUSH
27423: CALL_OW 69
27427: PUSH
27428: FOR_IN
27429: IFFALSE 27649
// begin if not i in hackTanks then
27431: LD_VAR 0 1
27435: PUSH
27436: LD_EXP 106
27440: IN
27441: NOT
27442: IFFALSE 27525
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27444: LD_ADDR_EXP 106
27448: PUSH
27449: LD_EXP 106
27453: PPUSH
27454: LD_EXP 106
27458: PUSH
27459: LD_INT 1
27461: PLUS
27462: PPUSH
27463: LD_VAR 0 1
27467: PPUSH
27468: CALL_OW 1
27472: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27473: LD_ADDR_EXP 107
27477: PUSH
27478: LD_EXP 107
27482: PPUSH
27483: LD_EXP 107
27487: PUSH
27488: LD_INT 1
27490: PLUS
27491: PPUSH
27492: EMPTY
27493: PPUSH
27494: CALL_OW 1
27498: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27499: LD_ADDR_EXP 110
27503: PUSH
27504: LD_EXP 110
27508: PPUSH
27509: LD_EXP 110
27513: PUSH
27514: LD_INT 1
27516: PLUS
27517: PPUSH
27518: EMPTY
27519: PPUSH
27520: CALL_OW 1
27524: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27525: LD_VAR 0 1
27529: PPUSH
27530: CALL_OW 302
27534: NOT
27535: IFFALSE 27548
// begin HackUnlinkAll ( i ) ;
27537: LD_VAR 0 1
27541: PPUSH
27542: CALL 27654 0 1
// continue ;
27546: GO 27428
// end ; HackCheckCapturedStatus ( i ) ;
27548: LD_VAR 0 1
27552: PPUSH
27553: CALL 28097 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27557: LD_ADDR_VAR 0 2
27561: PUSH
27562: LD_INT 81
27564: PUSH
27565: LD_VAR 0 1
27569: PPUSH
27570: CALL_OW 255
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 33
27581: PUSH
27582: LD_INT 3
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 91
27591: PUSH
27592: LD_VAR 0 1
27596: PUSH
27597: LD_EXP 109
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 50
27609: PUSH
27610: EMPTY
27611: LIST
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: PPUSH
27619: CALL_OW 69
27623: ST_TO_ADDR
// if not tmp then
27624: LD_VAR 0 2
27628: NOT
27629: IFFALSE 27633
// continue ;
27631: GO 27428
// HackLink ( i , tmp ) ;
27633: LD_VAR 0 1
27637: PPUSH
27638: LD_VAR 0 2
27642: PPUSH
27643: CALL 27790 0 2
// end ;
27647: GO 27428
27649: POP
27650: POP
// end ;
27651: PPOPN 2
27653: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27654: LD_INT 0
27656: PPUSH
27657: PPUSH
27658: PPUSH
// if not hack in hackTanks then
27659: LD_VAR 0 1
27663: PUSH
27664: LD_EXP 106
27668: IN
27669: NOT
27670: IFFALSE 27674
// exit ;
27672: GO 27785
// index := GetElementIndex ( hackTanks , hack ) ;
27674: LD_ADDR_VAR 0 4
27678: PUSH
27679: LD_EXP 106
27683: PPUSH
27684: LD_VAR 0 1
27688: PPUSH
27689: CALL 35402 0 2
27693: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27694: LD_EXP 107
27698: PUSH
27699: LD_VAR 0 4
27703: ARRAY
27704: IFFALSE 27785
// begin for i in hackTanksCaptured [ index ] do
27706: LD_ADDR_VAR 0 3
27710: PUSH
27711: LD_EXP 107
27715: PUSH
27716: LD_VAR 0 4
27720: ARRAY
27721: PUSH
27722: FOR_IN
27723: IFFALSE 27749
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27725: LD_VAR 0 3
27729: PUSH
27730: LD_INT 1
27732: ARRAY
27733: PPUSH
27734: LD_VAR 0 3
27738: PUSH
27739: LD_INT 2
27741: ARRAY
27742: PPUSH
27743: CALL_OW 235
27747: GO 27722
27749: POP
27750: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27751: LD_ADDR_EXP 107
27755: PUSH
27756: LD_EXP 107
27760: PPUSH
27761: LD_VAR 0 4
27765: PPUSH
27766: EMPTY
27767: PPUSH
27768: CALL_OW 1
27772: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27773: LD_VAR 0 1
27777: PPUSH
27778: LD_INT 0
27780: PPUSH
27781: CALL_OW 505
// end ; end ;
27785: LD_VAR 0 2
27789: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27790: LD_INT 0
27792: PPUSH
27793: PPUSH
27794: PPUSH
// if not hack in hackTanks or not vehicles then
27795: LD_VAR 0 1
27799: PUSH
27800: LD_EXP 106
27804: IN
27805: NOT
27806: PUSH
27807: LD_VAR 0 2
27811: NOT
27812: OR
27813: IFFALSE 27817
// exit ;
27815: GO 28092
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27817: LD_ADDR_VAR 0 2
27821: PUSH
27822: LD_VAR 0 1
27826: PPUSH
27827: LD_VAR 0 2
27831: PPUSH
27832: LD_INT 1
27834: PPUSH
27835: LD_INT 1
27837: PPUSH
27838: CALL 36052 0 4
27842: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27843: LD_ADDR_VAR 0 5
27847: PUSH
27848: LD_EXP 106
27852: PPUSH
27853: LD_VAR 0 1
27857: PPUSH
27858: CALL 35402 0 2
27862: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27863: LD_EXP 107
27867: PUSH
27868: LD_VAR 0 5
27872: ARRAY
27873: PUSH
27874: LD_EXP 108
27878: LESS
27879: IFFALSE 28068
// begin for i := 1 to vehicles do
27881: LD_ADDR_VAR 0 4
27885: PUSH
27886: DOUBLE
27887: LD_INT 1
27889: DEC
27890: ST_TO_ADDR
27891: LD_VAR 0 2
27895: PUSH
27896: FOR_TO
27897: IFFALSE 28066
// begin if hackTanksCaptured [ index ] = hackLimit then
27899: LD_EXP 107
27903: PUSH
27904: LD_VAR 0 5
27908: ARRAY
27909: PUSH
27910: LD_EXP 108
27914: EQUAL
27915: IFFALSE 27919
// break ;
27917: GO 28066
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27919: LD_ADDR_EXP 110
27923: PUSH
27924: LD_EXP 110
27928: PPUSH
27929: LD_VAR 0 5
27933: PPUSH
27934: LD_EXP 110
27938: PUSH
27939: LD_VAR 0 5
27943: ARRAY
27944: PUSH
27945: LD_INT 1
27947: PLUS
27948: PPUSH
27949: CALL_OW 1
27953: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27954: LD_ADDR_EXP 107
27958: PUSH
27959: LD_EXP 107
27963: PPUSH
27964: LD_VAR 0 5
27968: PUSH
27969: LD_EXP 107
27973: PUSH
27974: LD_VAR 0 5
27978: ARRAY
27979: PUSH
27980: LD_INT 1
27982: PLUS
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PPUSH
27988: LD_VAR 0 2
27992: PUSH
27993: LD_VAR 0 4
27997: ARRAY
27998: PUSH
27999: LD_VAR 0 2
28003: PUSH
28004: LD_VAR 0 4
28008: ARRAY
28009: PPUSH
28010: CALL_OW 255
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PPUSH
28019: CALL 35617 0 3
28023: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28024: LD_VAR 0 2
28028: PUSH
28029: LD_VAR 0 4
28033: ARRAY
28034: PPUSH
28035: LD_VAR 0 1
28039: PPUSH
28040: CALL_OW 255
28044: PPUSH
28045: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28049: LD_VAR 0 2
28053: PUSH
28054: LD_VAR 0 4
28058: ARRAY
28059: PPUSH
28060: CALL_OW 141
// end ;
28064: GO 27896
28066: POP
28067: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28068: LD_VAR 0 1
28072: PPUSH
28073: LD_EXP 107
28077: PUSH
28078: LD_VAR 0 5
28082: ARRAY
28083: PUSH
28084: LD_INT 0
28086: PLUS
28087: PPUSH
28088: CALL_OW 505
// end ;
28092: LD_VAR 0 3
28096: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28097: LD_INT 0
28099: PPUSH
28100: PPUSH
28101: PPUSH
28102: PPUSH
// if not hack in hackTanks then
28103: LD_VAR 0 1
28107: PUSH
28108: LD_EXP 106
28112: IN
28113: NOT
28114: IFFALSE 28118
// exit ;
28116: GO 28358
// index := GetElementIndex ( hackTanks , hack ) ;
28118: LD_ADDR_VAR 0 4
28122: PUSH
28123: LD_EXP 106
28127: PPUSH
28128: LD_VAR 0 1
28132: PPUSH
28133: CALL 35402 0 2
28137: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28138: LD_ADDR_VAR 0 3
28142: PUSH
28143: DOUBLE
28144: LD_EXP 107
28148: PUSH
28149: LD_VAR 0 4
28153: ARRAY
28154: INC
28155: ST_TO_ADDR
28156: LD_INT 1
28158: PUSH
28159: FOR_DOWNTO
28160: IFFALSE 28332
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28162: LD_ADDR_VAR 0 5
28166: PUSH
28167: LD_EXP 107
28171: PUSH
28172: LD_VAR 0 4
28176: ARRAY
28177: PUSH
28178: LD_VAR 0 3
28182: ARRAY
28183: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28184: LD_VAR 0 5
28188: PUSH
28189: LD_INT 1
28191: ARRAY
28192: PPUSH
28193: CALL_OW 302
28197: NOT
28198: PUSH
28199: LD_VAR 0 5
28203: PUSH
28204: LD_INT 1
28206: ARRAY
28207: PPUSH
28208: CALL_OW 255
28212: PUSH
28213: LD_VAR 0 1
28217: PPUSH
28218: CALL_OW 255
28222: NONEQUAL
28223: OR
28224: IFFALSE 28330
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28226: LD_VAR 0 5
28230: PUSH
28231: LD_INT 1
28233: ARRAY
28234: PPUSH
28235: CALL_OW 305
28239: PUSH
28240: LD_VAR 0 5
28244: PUSH
28245: LD_INT 1
28247: ARRAY
28248: PPUSH
28249: CALL_OW 255
28253: PUSH
28254: LD_VAR 0 1
28258: PPUSH
28259: CALL_OW 255
28263: EQUAL
28264: AND
28265: IFFALSE 28289
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28267: LD_VAR 0 5
28271: PUSH
28272: LD_INT 1
28274: ARRAY
28275: PPUSH
28276: LD_VAR 0 5
28280: PUSH
28281: LD_INT 2
28283: ARRAY
28284: PPUSH
28285: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28289: LD_ADDR_EXP 107
28293: PUSH
28294: LD_EXP 107
28298: PPUSH
28299: LD_VAR 0 4
28303: PPUSH
28304: LD_EXP 107
28308: PUSH
28309: LD_VAR 0 4
28313: ARRAY
28314: PPUSH
28315: LD_VAR 0 3
28319: PPUSH
28320: CALL_OW 3
28324: PPUSH
28325: CALL_OW 1
28329: ST_TO_ADDR
// end ; end ;
28330: GO 28159
28332: POP
28333: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28334: LD_VAR 0 1
28338: PPUSH
28339: LD_EXP 107
28343: PUSH
28344: LD_VAR 0 4
28348: ARRAY
28349: PUSH
28350: LD_INT 0
28352: PLUS
28353: PPUSH
28354: CALL_OW 505
// end ;
28358: LD_VAR 0 2
28362: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28363: LD_INT 0
28365: PPUSH
28366: PPUSH
28367: PPUSH
28368: PPUSH
// if not hack in hackTanks then
28369: LD_VAR 0 1
28373: PUSH
28374: LD_EXP 106
28378: IN
28379: NOT
28380: IFFALSE 28384
// exit ;
28382: GO 28469
// index := GetElementIndex ( hackTanks , hack ) ;
28384: LD_ADDR_VAR 0 5
28388: PUSH
28389: LD_EXP 106
28393: PPUSH
28394: LD_VAR 0 1
28398: PPUSH
28399: CALL 35402 0 2
28403: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28404: LD_ADDR_VAR 0 4
28408: PUSH
28409: DOUBLE
28410: LD_INT 1
28412: DEC
28413: ST_TO_ADDR
28414: LD_EXP 107
28418: PUSH
28419: LD_VAR 0 5
28423: ARRAY
28424: PUSH
28425: FOR_TO
28426: IFFALSE 28467
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28428: LD_EXP 107
28432: PUSH
28433: LD_VAR 0 5
28437: ARRAY
28438: PUSH
28439: LD_VAR 0 4
28443: ARRAY
28444: PUSH
28445: LD_INT 1
28447: ARRAY
28448: PUSH
28449: LD_VAR 0 2
28453: EQUAL
28454: IFFALSE 28465
// KillUnit ( vehicle ) ;
28456: LD_VAR 0 2
28460: PPUSH
28461: CALL_OW 66
28465: GO 28425
28467: POP
28468: POP
// end ;
28469: LD_VAR 0 3
28473: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28474: LD_EXP 111
28478: NOT
28479: IFFALSE 28514
28481: GO 28483
28483: DISABLE
// begin initMiner := true ;
28484: LD_ADDR_EXP 111
28488: PUSH
28489: LD_INT 1
28491: ST_TO_ADDR
// minersList := [ ] ;
28492: LD_ADDR_EXP 112
28496: PUSH
28497: EMPTY
28498: ST_TO_ADDR
// minerMinesList := [ ] ;
28499: LD_ADDR_EXP 113
28503: PUSH
28504: EMPTY
28505: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28506: LD_ADDR_EXP 114
28510: PUSH
28511: LD_INT 5
28513: ST_TO_ADDR
// end ;
28514: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28515: LD_EXP 111
28519: PUSH
28520: LD_INT 34
28522: PUSH
28523: LD_INT 81
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PPUSH
28530: CALL_OW 69
28534: AND
28535: IFFALSE 28996
28537: GO 28539
28539: DISABLE
28540: LD_INT 0
28542: PPUSH
28543: PPUSH
28544: PPUSH
28545: PPUSH
// begin enable ;
28546: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28547: LD_ADDR_VAR 0 1
28551: PUSH
28552: LD_INT 34
28554: PUSH
28555: LD_INT 81
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PPUSH
28562: CALL_OW 69
28566: PUSH
28567: FOR_IN
28568: IFFALSE 28640
// begin if not i in minersList then
28570: LD_VAR 0 1
28574: PUSH
28575: LD_EXP 112
28579: IN
28580: NOT
28581: IFFALSE 28638
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28583: LD_ADDR_EXP 112
28587: PUSH
28588: LD_EXP 112
28592: PPUSH
28593: LD_EXP 112
28597: PUSH
28598: LD_INT 1
28600: PLUS
28601: PPUSH
28602: LD_VAR 0 1
28606: PPUSH
28607: CALL_OW 1
28611: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28612: LD_ADDR_EXP 113
28616: PUSH
28617: LD_EXP 113
28621: PPUSH
28622: LD_EXP 113
28626: PUSH
28627: LD_INT 1
28629: PLUS
28630: PPUSH
28631: EMPTY
28632: PPUSH
28633: CALL_OW 1
28637: ST_TO_ADDR
// end end ;
28638: GO 28567
28640: POP
28641: POP
// for i := minerMinesList downto 1 do
28642: LD_ADDR_VAR 0 1
28646: PUSH
28647: DOUBLE
28648: LD_EXP 113
28652: INC
28653: ST_TO_ADDR
28654: LD_INT 1
28656: PUSH
28657: FOR_DOWNTO
28658: IFFALSE 28994
// begin if IsLive ( minersList [ i ] ) then
28660: LD_EXP 112
28664: PUSH
28665: LD_VAR 0 1
28669: ARRAY
28670: PPUSH
28671: CALL_OW 300
28675: IFFALSE 28703
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28677: LD_EXP 112
28681: PUSH
28682: LD_VAR 0 1
28686: ARRAY
28687: PPUSH
28688: LD_EXP 113
28692: PUSH
28693: LD_VAR 0 1
28697: ARRAY
28698: PPUSH
28699: CALL_OW 505
// if not minerMinesList [ i ] then
28703: LD_EXP 113
28707: PUSH
28708: LD_VAR 0 1
28712: ARRAY
28713: NOT
28714: IFFALSE 28718
// continue ;
28716: GO 28657
// for j := minerMinesList [ i ] downto 1 do
28718: LD_ADDR_VAR 0 2
28722: PUSH
28723: DOUBLE
28724: LD_EXP 113
28728: PUSH
28729: LD_VAR 0 1
28733: ARRAY
28734: INC
28735: ST_TO_ADDR
28736: LD_INT 1
28738: PUSH
28739: FOR_DOWNTO
28740: IFFALSE 28990
// begin side := GetSide ( minersList [ i ] ) ;
28742: LD_ADDR_VAR 0 3
28746: PUSH
28747: LD_EXP 112
28751: PUSH
28752: LD_VAR 0 1
28756: ARRAY
28757: PPUSH
28758: CALL_OW 255
28762: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28763: LD_ADDR_VAR 0 4
28767: PUSH
28768: LD_EXP 113
28772: PUSH
28773: LD_VAR 0 1
28777: ARRAY
28778: PUSH
28779: LD_VAR 0 2
28783: ARRAY
28784: PUSH
28785: LD_INT 1
28787: ARRAY
28788: PPUSH
28789: LD_EXP 113
28793: PUSH
28794: LD_VAR 0 1
28798: ARRAY
28799: PUSH
28800: LD_VAR 0 2
28804: ARRAY
28805: PUSH
28806: LD_INT 2
28808: ARRAY
28809: PPUSH
28810: CALL_OW 428
28814: ST_TO_ADDR
// if not tmp then
28815: LD_VAR 0 4
28819: NOT
28820: IFFALSE 28824
// continue ;
28822: GO 28739
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28824: LD_VAR 0 4
28828: PUSH
28829: LD_INT 81
28831: PUSH
28832: LD_VAR 0 3
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PPUSH
28841: CALL_OW 69
28845: IN
28846: PUSH
28847: LD_EXP 113
28851: PUSH
28852: LD_VAR 0 1
28856: ARRAY
28857: PUSH
28858: LD_VAR 0 2
28862: ARRAY
28863: PUSH
28864: LD_INT 1
28866: ARRAY
28867: PPUSH
28868: LD_EXP 113
28872: PUSH
28873: LD_VAR 0 1
28877: ARRAY
28878: PUSH
28879: LD_VAR 0 2
28883: ARRAY
28884: PUSH
28885: LD_INT 2
28887: ARRAY
28888: PPUSH
28889: CALL_OW 458
28893: AND
28894: IFFALSE 28988
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28896: LD_EXP 113
28900: PUSH
28901: LD_VAR 0 1
28905: ARRAY
28906: PUSH
28907: LD_VAR 0 2
28911: ARRAY
28912: PUSH
28913: LD_INT 1
28915: ARRAY
28916: PPUSH
28917: LD_EXP 113
28921: PUSH
28922: LD_VAR 0 1
28926: ARRAY
28927: PUSH
28928: LD_VAR 0 2
28932: ARRAY
28933: PUSH
28934: LD_INT 2
28936: ARRAY
28937: PPUSH
28938: LD_VAR 0 3
28942: PPUSH
28943: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28947: LD_ADDR_EXP 113
28951: PUSH
28952: LD_EXP 113
28956: PPUSH
28957: LD_VAR 0 1
28961: PPUSH
28962: LD_EXP 113
28966: PUSH
28967: LD_VAR 0 1
28971: ARRAY
28972: PPUSH
28973: LD_VAR 0 2
28977: PPUSH
28978: CALL_OW 3
28982: PPUSH
28983: CALL_OW 1
28987: ST_TO_ADDR
// end ; end ;
28988: GO 28739
28990: POP
28991: POP
// end ;
28992: GO 28657
28994: POP
28995: POP
// end ;
28996: PPOPN 4
28998: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28999: LD_INT 0
29001: PPUSH
29002: PPUSH
// result := false ;
29003: LD_ADDR_VAR 0 4
29007: PUSH
29008: LD_INT 0
29010: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29011: LD_VAR 0 1
29015: PPUSH
29016: CALL_OW 264
29020: PUSH
29021: LD_INT 81
29023: EQUAL
29024: NOT
29025: IFFALSE 29029
// exit ;
29027: GO 29269
// index := GetElementIndex ( minersList , unit ) ;
29029: LD_ADDR_VAR 0 5
29033: PUSH
29034: LD_EXP 112
29038: PPUSH
29039: LD_VAR 0 1
29043: PPUSH
29044: CALL 35402 0 2
29048: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29049: LD_EXP 113
29053: PUSH
29054: LD_VAR 0 5
29058: ARRAY
29059: PUSH
29060: LD_EXP 114
29064: GREATEREQUAL
29065: IFFALSE 29069
// exit ;
29067: GO 29269
// ComMoveXY ( unit , x , y ) ;
29069: LD_VAR 0 1
29073: PPUSH
29074: LD_VAR 0 2
29078: PPUSH
29079: LD_VAR 0 3
29083: PPUSH
29084: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29088: LD_INT 35
29090: PPUSH
29091: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29095: LD_VAR 0 1
29099: PPUSH
29100: LD_VAR 0 2
29104: PPUSH
29105: LD_VAR 0 3
29109: PPUSH
29110: CALL 66757 0 3
29114: NOT
29115: PUSH
29116: LD_VAR 0 1
29120: PPUSH
29121: CALL_OW 314
29125: AND
29126: IFFALSE 29130
// exit ;
29128: GO 29269
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29130: LD_VAR 0 2
29134: PPUSH
29135: LD_VAR 0 3
29139: PPUSH
29140: CALL_OW 428
29144: PUSH
29145: LD_VAR 0 1
29149: EQUAL
29150: PUSH
29151: LD_VAR 0 1
29155: PPUSH
29156: CALL_OW 314
29160: NOT
29161: AND
29162: IFFALSE 29088
// PlaySoundXY ( x , y , PlantMine ) ;
29164: LD_VAR 0 2
29168: PPUSH
29169: LD_VAR 0 3
29173: PPUSH
29174: LD_STRING PlantMine
29176: PPUSH
29177: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29181: LD_VAR 0 2
29185: PPUSH
29186: LD_VAR 0 3
29190: PPUSH
29191: LD_VAR 0 1
29195: PPUSH
29196: CALL_OW 255
29200: PPUSH
29201: LD_INT 0
29203: PPUSH
29204: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29208: LD_ADDR_EXP 113
29212: PUSH
29213: LD_EXP 113
29217: PPUSH
29218: LD_VAR 0 5
29222: PUSH
29223: LD_EXP 113
29227: PUSH
29228: LD_VAR 0 5
29232: ARRAY
29233: PUSH
29234: LD_INT 1
29236: PLUS
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PPUSH
29242: LD_VAR 0 2
29246: PUSH
29247: LD_VAR 0 3
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PPUSH
29256: CALL 35617 0 3
29260: ST_TO_ADDR
// result := true ;
29261: LD_ADDR_VAR 0 4
29265: PUSH
29266: LD_INT 1
29268: ST_TO_ADDR
// end ;
29269: LD_VAR 0 4
29273: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29274: LD_INT 0
29276: PPUSH
29277: PPUSH
29278: PPUSH
// if not unit in minersList then
29279: LD_VAR 0 1
29283: PUSH
29284: LD_EXP 112
29288: IN
29289: NOT
29290: IFFALSE 29294
// exit ;
29292: GO 29686
// index := GetElementIndex ( minersList , unit ) ;
29294: LD_ADDR_VAR 0 6
29298: PUSH
29299: LD_EXP 112
29303: PPUSH
29304: LD_VAR 0 1
29308: PPUSH
29309: CALL 35402 0 2
29313: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29314: LD_ADDR_VAR 0 5
29318: PUSH
29319: DOUBLE
29320: LD_EXP 113
29324: PUSH
29325: LD_VAR 0 6
29329: ARRAY
29330: INC
29331: ST_TO_ADDR
29332: LD_INT 1
29334: PUSH
29335: FOR_DOWNTO
29336: IFFALSE 29497
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29338: LD_EXP 113
29342: PUSH
29343: LD_VAR 0 6
29347: ARRAY
29348: PUSH
29349: LD_VAR 0 5
29353: ARRAY
29354: PUSH
29355: LD_INT 1
29357: ARRAY
29358: PUSH
29359: LD_VAR 0 2
29363: EQUAL
29364: PUSH
29365: LD_EXP 113
29369: PUSH
29370: LD_VAR 0 6
29374: ARRAY
29375: PUSH
29376: LD_VAR 0 5
29380: ARRAY
29381: PUSH
29382: LD_INT 2
29384: ARRAY
29385: PUSH
29386: LD_VAR 0 3
29390: EQUAL
29391: AND
29392: IFFALSE 29495
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29394: LD_EXP 113
29398: PUSH
29399: LD_VAR 0 6
29403: ARRAY
29404: PUSH
29405: LD_VAR 0 5
29409: ARRAY
29410: PUSH
29411: LD_INT 1
29413: ARRAY
29414: PPUSH
29415: LD_EXP 113
29419: PUSH
29420: LD_VAR 0 6
29424: ARRAY
29425: PUSH
29426: LD_VAR 0 5
29430: ARRAY
29431: PUSH
29432: LD_INT 2
29434: ARRAY
29435: PPUSH
29436: LD_VAR 0 1
29440: PPUSH
29441: CALL_OW 255
29445: PPUSH
29446: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29450: LD_ADDR_EXP 113
29454: PUSH
29455: LD_EXP 113
29459: PPUSH
29460: LD_VAR 0 6
29464: PPUSH
29465: LD_EXP 113
29469: PUSH
29470: LD_VAR 0 6
29474: ARRAY
29475: PPUSH
29476: LD_VAR 0 5
29480: PPUSH
29481: CALL_OW 3
29485: PPUSH
29486: CALL_OW 1
29490: ST_TO_ADDR
// exit ;
29491: POP
29492: POP
29493: GO 29686
// end ; end ;
29495: GO 29335
29497: POP
29498: POP
// for i := minerMinesList [ index ] downto 1 do
29499: LD_ADDR_VAR 0 5
29503: PUSH
29504: DOUBLE
29505: LD_EXP 113
29509: PUSH
29510: LD_VAR 0 6
29514: ARRAY
29515: INC
29516: ST_TO_ADDR
29517: LD_INT 1
29519: PUSH
29520: FOR_DOWNTO
29521: IFFALSE 29684
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29523: LD_EXP 113
29527: PUSH
29528: LD_VAR 0 6
29532: ARRAY
29533: PUSH
29534: LD_VAR 0 5
29538: ARRAY
29539: PUSH
29540: LD_INT 1
29542: ARRAY
29543: PPUSH
29544: LD_EXP 113
29548: PUSH
29549: LD_VAR 0 6
29553: ARRAY
29554: PUSH
29555: LD_VAR 0 5
29559: ARRAY
29560: PUSH
29561: LD_INT 2
29563: ARRAY
29564: PPUSH
29565: LD_VAR 0 2
29569: PPUSH
29570: LD_VAR 0 3
29574: PPUSH
29575: CALL_OW 298
29579: PUSH
29580: LD_INT 6
29582: LESS
29583: IFFALSE 29682
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29585: LD_EXP 113
29589: PUSH
29590: LD_VAR 0 6
29594: ARRAY
29595: PUSH
29596: LD_VAR 0 5
29600: ARRAY
29601: PUSH
29602: LD_INT 1
29604: ARRAY
29605: PPUSH
29606: LD_EXP 113
29610: PUSH
29611: LD_VAR 0 6
29615: ARRAY
29616: PUSH
29617: LD_VAR 0 5
29621: ARRAY
29622: PUSH
29623: LD_INT 2
29625: ARRAY
29626: PPUSH
29627: LD_VAR 0 1
29631: PPUSH
29632: CALL_OW 255
29636: PPUSH
29637: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29641: LD_ADDR_EXP 113
29645: PUSH
29646: LD_EXP 113
29650: PPUSH
29651: LD_VAR 0 6
29655: PPUSH
29656: LD_EXP 113
29660: PUSH
29661: LD_VAR 0 6
29665: ARRAY
29666: PPUSH
29667: LD_VAR 0 5
29671: PPUSH
29672: CALL_OW 3
29676: PPUSH
29677: CALL_OW 1
29681: ST_TO_ADDR
// end ; end ;
29682: GO 29520
29684: POP
29685: POP
// end ;
29686: LD_VAR 0 4
29690: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29691: LD_INT 0
29693: PPUSH
29694: PPUSH
29695: PPUSH
29696: PPUSH
29697: PPUSH
29698: PPUSH
29699: PPUSH
29700: PPUSH
29701: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29702: LD_VAR 0 1
29706: PPUSH
29707: CALL_OW 264
29711: PUSH
29712: LD_INT 81
29714: EQUAL
29715: NOT
29716: PUSH
29717: LD_VAR 0 1
29721: PUSH
29722: LD_EXP 112
29726: IN
29727: NOT
29728: OR
29729: IFFALSE 29733
// exit ;
29731: GO 30055
// index := GetElementIndex ( minersList , unit ) ;
29733: LD_ADDR_VAR 0 6
29737: PUSH
29738: LD_EXP 112
29742: PPUSH
29743: LD_VAR 0 1
29747: PPUSH
29748: CALL 35402 0 2
29752: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29753: LD_ADDR_VAR 0 8
29757: PUSH
29758: LD_EXP 114
29762: PUSH
29763: LD_EXP 113
29767: PUSH
29768: LD_VAR 0 6
29772: ARRAY
29773: MINUS
29774: ST_TO_ADDR
// if not minesFreeAmount then
29775: LD_VAR 0 8
29779: NOT
29780: IFFALSE 29784
// exit ;
29782: GO 30055
// tmp := [ ] ;
29784: LD_ADDR_VAR 0 7
29788: PUSH
29789: EMPTY
29790: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29791: LD_ADDR_VAR 0 5
29795: PUSH
29796: DOUBLE
29797: LD_INT 1
29799: DEC
29800: ST_TO_ADDR
29801: LD_VAR 0 8
29805: PUSH
29806: FOR_TO
29807: IFFALSE 30002
// begin _d := rand ( 0 , 5 ) ;
29809: LD_ADDR_VAR 0 11
29813: PUSH
29814: LD_INT 0
29816: PPUSH
29817: LD_INT 5
29819: PPUSH
29820: CALL_OW 12
29824: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29825: LD_ADDR_VAR 0 12
29829: PUSH
29830: LD_INT 2
29832: PPUSH
29833: LD_INT 6
29835: PPUSH
29836: CALL_OW 12
29840: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29841: LD_ADDR_VAR 0 9
29845: PUSH
29846: LD_VAR 0 2
29850: PPUSH
29851: LD_VAR 0 11
29855: PPUSH
29856: LD_VAR 0 12
29860: PPUSH
29861: CALL_OW 272
29865: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29866: LD_ADDR_VAR 0 10
29870: PUSH
29871: LD_VAR 0 3
29875: PPUSH
29876: LD_VAR 0 11
29880: PPUSH
29881: LD_VAR 0 12
29885: PPUSH
29886: CALL_OW 273
29890: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29891: LD_VAR 0 9
29895: PPUSH
29896: LD_VAR 0 10
29900: PPUSH
29901: CALL_OW 488
29905: PUSH
29906: LD_VAR 0 9
29910: PUSH
29911: LD_VAR 0 10
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_VAR 0 7
29924: IN
29925: NOT
29926: AND
29927: PUSH
29928: LD_VAR 0 9
29932: PPUSH
29933: LD_VAR 0 10
29937: PPUSH
29938: CALL_OW 458
29942: NOT
29943: AND
29944: IFFALSE 29986
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29946: LD_ADDR_VAR 0 7
29950: PUSH
29951: LD_VAR 0 7
29955: PPUSH
29956: LD_VAR 0 7
29960: PUSH
29961: LD_INT 1
29963: PLUS
29964: PPUSH
29965: LD_VAR 0 9
29969: PUSH
29970: LD_VAR 0 10
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PPUSH
29979: CALL_OW 1
29983: ST_TO_ADDR
29984: GO 30000
// i := i - 1 ;
29986: LD_ADDR_VAR 0 5
29990: PUSH
29991: LD_VAR 0 5
29995: PUSH
29996: LD_INT 1
29998: MINUS
29999: ST_TO_ADDR
// end ;
30000: GO 29806
30002: POP
30003: POP
// for i in tmp do
30004: LD_ADDR_VAR 0 5
30008: PUSH
30009: LD_VAR 0 7
30013: PUSH
30014: FOR_IN
30015: IFFALSE 30053
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30017: LD_VAR 0 1
30021: PPUSH
30022: LD_VAR 0 5
30026: PUSH
30027: LD_INT 1
30029: ARRAY
30030: PPUSH
30031: LD_VAR 0 5
30035: PUSH
30036: LD_INT 2
30038: ARRAY
30039: PPUSH
30040: CALL 28999 0 3
30044: NOT
30045: IFFALSE 30051
// exit ;
30047: POP
30048: POP
30049: GO 30055
30051: GO 30014
30053: POP
30054: POP
// end ;
30055: LD_VAR 0 4
30059: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30060: LD_INT 0
30062: PPUSH
30063: PPUSH
30064: PPUSH
30065: PPUSH
30066: PPUSH
30067: PPUSH
30068: PPUSH
// if not GetClass ( unit ) = class_sniper then
30069: LD_VAR 0 1
30073: PPUSH
30074: CALL_OW 257
30078: PUSH
30079: LD_INT 5
30081: EQUAL
30082: NOT
30083: IFFALSE 30087
// exit ;
30085: GO 30475
// dist := 8 ;
30087: LD_ADDR_VAR 0 5
30091: PUSH
30092: LD_INT 8
30094: ST_TO_ADDR
// viewRange := 12 ;
30095: LD_ADDR_VAR 0 7
30099: PUSH
30100: LD_INT 12
30102: ST_TO_ADDR
// side := GetSide ( unit ) ;
30103: LD_ADDR_VAR 0 6
30107: PUSH
30108: LD_VAR 0 1
30112: PPUSH
30113: CALL_OW 255
30117: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30118: LD_INT 61
30120: PPUSH
30121: LD_VAR 0 6
30125: PPUSH
30126: CALL_OW 321
30130: PUSH
30131: LD_INT 2
30133: EQUAL
30134: IFFALSE 30144
// viewRange := 16 ;
30136: LD_ADDR_VAR 0 7
30140: PUSH
30141: LD_INT 16
30143: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30144: LD_VAR 0 1
30148: PPUSH
30149: LD_VAR 0 2
30153: PPUSH
30154: LD_VAR 0 3
30158: PPUSH
30159: CALL_OW 297
30163: PUSH
30164: LD_VAR 0 5
30168: GREATER
30169: IFFALSE 30248
// begin ComMoveXY ( unit , x , y ) ;
30171: LD_VAR 0 1
30175: PPUSH
30176: LD_VAR 0 2
30180: PPUSH
30181: LD_VAR 0 3
30185: PPUSH
30186: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30190: LD_INT 35
30192: PPUSH
30193: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30197: LD_VAR 0 1
30201: PPUSH
30202: LD_VAR 0 2
30206: PPUSH
30207: LD_VAR 0 3
30211: PPUSH
30212: CALL 66757 0 3
30216: NOT
30217: IFFALSE 30221
// exit ;
30219: GO 30475
// until GetDistUnitXY ( unit , x , y ) < dist ;
30221: LD_VAR 0 1
30225: PPUSH
30226: LD_VAR 0 2
30230: PPUSH
30231: LD_VAR 0 3
30235: PPUSH
30236: CALL_OW 297
30240: PUSH
30241: LD_VAR 0 5
30245: LESS
30246: IFFALSE 30190
// end ; ComTurnXY ( unit , x , y ) ;
30248: LD_VAR 0 1
30252: PPUSH
30253: LD_VAR 0 2
30257: PPUSH
30258: LD_VAR 0 3
30262: PPUSH
30263: CALL_OW 118
// wait ( 5 ) ;
30267: LD_INT 5
30269: PPUSH
30270: CALL_OW 67
// _d := GetDir ( unit ) ;
30274: LD_ADDR_VAR 0 10
30278: PUSH
30279: LD_VAR 0 1
30283: PPUSH
30284: CALL_OW 254
30288: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30289: LD_ADDR_VAR 0 8
30293: PUSH
30294: LD_VAR 0 1
30298: PPUSH
30299: CALL_OW 250
30303: PPUSH
30304: LD_VAR 0 10
30308: PPUSH
30309: LD_VAR 0 5
30313: PPUSH
30314: CALL_OW 272
30318: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30319: LD_ADDR_VAR 0 9
30323: PUSH
30324: LD_VAR 0 1
30328: PPUSH
30329: CALL_OW 251
30333: PPUSH
30334: LD_VAR 0 10
30338: PPUSH
30339: LD_VAR 0 5
30343: PPUSH
30344: CALL_OW 273
30348: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30349: LD_VAR 0 8
30353: PPUSH
30354: LD_VAR 0 9
30358: PPUSH
30359: CALL_OW 488
30363: NOT
30364: IFFALSE 30368
// exit ;
30366: GO 30475
// ComAnimCustom ( unit , 1 ) ;
30368: LD_VAR 0 1
30372: PPUSH
30373: LD_INT 1
30375: PPUSH
30376: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30380: LD_VAR 0 8
30384: PPUSH
30385: LD_VAR 0 9
30389: PPUSH
30390: LD_VAR 0 6
30394: PPUSH
30395: LD_VAR 0 7
30399: PPUSH
30400: CALL_OW 330
// repeat wait ( 1 ) ;
30404: LD_INT 1
30406: PPUSH
30407: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30411: LD_VAR 0 1
30415: PPUSH
30416: CALL_OW 316
30420: PUSH
30421: LD_VAR 0 1
30425: PPUSH
30426: CALL_OW 314
30430: OR
30431: PUSH
30432: LD_VAR 0 1
30436: PPUSH
30437: CALL_OW 302
30441: NOT
30442: OR
30443: PUSH
30444: LD_VAR 0 1
30448: PPUSH
30449: CALL_OW 301
30453: OR
30454: IFFALSE 30404
// RemoveSeeing ( _x , _y , side ) ;
30456: LD_VAR 0 8
30460: PPUSH
30461: LD_VAR 0 9
30465: PPUSH
30466: LD_VAR 0 6
30470: PPUSH
30471: CALL_OW 331
// end ; end_of_file
30475: LD_VAR 0 4
30479: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30480: LD_INT 0
30482: PPUSH
30483: PPUSH
// if exist_mode then
30484: LD_VAR 0 2
30488: IFFALSE 30513
// unit := CreateCharacter ( prefix & ident ) else
30490: LD_ADDR_VAR 0 5
30494: PUSH
30495: LD_VAR 0 3
30499: PUSH
30500: LD_VAR 0 1
30504: STR
30505: PPUSH
30506: CALL_OW 34
30510: ST_TO_ADDR
30511: GO 30528
// unit := NewCharacter ( ident ) ;
30513: LD_ADDR_VAR 0 5
30517: PUSH
30518: LD_VAR 0 1
30522: PPUSH
30523: CALL_OW 25
30527: ST_TO_ADDR
// result := unit ;
30528: LD_ADDR_VAR 0 4
30532: PUSH
30533: LD_VAR 0 5
30537: ST_TO_ADDR
// end ;
30538: LD_VAR 0 4
30542: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30543: LD_INT 0
30545: PPUSH
30546: PPUSH
// if not side or not nation then
30547: LD_VAR 0 1
30551: NOT
30552: PUSH
30553: LD_VAR 0 2
30557: NOT
30558: OR
30559: IFFALSE 30563
// exit ;
30561: GO 31331
// case nation of nation_american :
30563: LD_VAR 0 2
30567: PUSH
30568: LD_INT 1
30570: DOUBLE
30571: EQUAL
30572: IFTRUE 30576
30574: GO 30790
30576: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30577: LD_ADDR_VAR 0 4
30581: PUSH
30582: LD_INT 35
30584: PUSH
30585: LD_INT 45
30587: PUSH
30588: LD_INT 46
30590: PUSH
30591: LD_INT 47
30593: PUSH
30594: LD_INT 82
30596: PUSH
30597: LD_INT 83
30599: PUSH
30600: LD_INT 84
30602: PUSH
30603: LD_INT 85
30605: PUSH
30606: LD_INT 86
30608: PUSH
30609: LD_INT 1
30611: PUSH
30612: LD_INT 2
30614: PUSH
30615: LD_INT 6
30617: PUSH
30618: LD_INT 15
30620: PUSH
30621: LD_INT 16
30623: PUSH
30624: LD_INT 7
30626: PUSH
30627: LD_INT 12
30629: PUSH
30630: LD_INT 13
30632: PUSH
30633: LD_INT 10
30635: PUSH
30636: LD_INT 14
30638: PUSH
30639: LD_INT 20
30641: PUSH
30642: LD_INT 21
30644: PUSH
30645: LD_INT 22
30647: PUSH
30648: LD_INT 25
30650: PUSH
30651: LD_INT 32
30653: PUSH
30654: LD_INT 27
30656: PUSH
30657: LD_INT 36
30659: PUSH
30660: LD_INT 69
30662: PUSH
30663: LD_INT 39
30665: PUSH
30666: LD_INT 34
30668: PUSH
30669: LD_INT 40
30671: PUSH
30672: LD_INT 48
30674: PUSH
30675: LD_INT 49
30677: PUSH
30678: LD_INT 50
30680: PUSH
30681: LD_INT 51
30683: PUSH
30684: LD_INT 52
30686: PUSH
30687: LD_INT 53
30689: PUSH
30690: LD_INT 54
30692: PUSH
30693: LD_INT 55
30695: PUSH
30696: LD_INT 56
30698: PUSH
30699: LD_INT 57
30701: PUSH
30702: LD_INT 58
30704: PUSH
30705: LD_INT 59
30707: PUSH
30708: LD_INT 60
30710: PUSH
30711: LD_INT 61
30713: PUSH
30714: LD_INT 62
30716: PUSH
30717: LD_INT 80
30719: PUSH
30720: LD_INT 82
30722: PUSH
30723: LD_INT 83
30725: PUSH
30726: LD_INT 84
30728: PUSH
30729: LD_INT 85
30731: PUSH
30732: LD_INT 86
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: ST_TO_ADDR
30788: GO 31255
30790: LD_INT 2
30792: DOUBLE
30793: EQUAL
30794: IFTRUE 30798
30796: GO 31024
30798: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30799: LD_ADDR_VAR 0 4
30803: PUSH
30804: LD_INT 35
30806: PUSH
30807: LD_INT 45
30809: PUSH
30810: LD_INT 46
30812: PUSH
30813: LD_INT 47
30815: PUSH
30816: LD_INT 82
30818: PUSH
30819: LD_INT 83
30821: PUSH
30822: LD_INT 84
30824: PUSH
30825: LD_INT 85
30827: PUSH
30828: LD_INT 87
30830: PUSH
30831: LD_INT 70
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: LD_INT 11
30839: PUSH
30840: LD_INT 3
30842: PUSH
30843: LD_INT 4
30845: PUSH
30846: LD_INT 5
30848: PUSH
30849: LD_INT 6
30851: PUSH
30852: LD_INT 15
30854: PUSH
30855: LD_INT 18
30857: PUSH
30858: LD_INT 7
30860: PUSH
30861: LD_INT 17
30863: PUSH
30864: LD_INT 8
30866: PUSH
30867: LD_INT 20
30869: PUSH
30870: LD_INT 21
30872: PUSH
30873: LD_INT 22
30875: PUSH
30876: LD_INT 72
30878: PUSH
30879: LD_INT 26
30881: PUSH
30882: LD_INT 69
30884: PUSH
30885: LD_INT 39
30887: PUSH
30888: LD_INT 40
30890: PUSH
30891: LD_INT 41
30893: PUSH
30894: LD_INT 42
30896: PUSH
30897: LD_INT 43
30899: PUSH
30900: LD_INT 48
30902: PUSH
30903: LD_INT 49
30905: PUSH
30906: LD_INT 50
30908: PUSH
30909: LD_INT 51
30911: PUSH
30912: LD_INT 52
30914: PUSH
30915: LD_INT 53
30917: PUSH
30918: LD_INT 54
30920: PUSH
30921: LD_INT 55
30923: PUSH
30924: LD_INT 56
30926: PUSH
30927: LD_INT 60
30929: PUSH
30930: LD_INT 61
30932: PUSH
30933: LD_INT 62
30935: PUSH
30936: LD_INT 66
30938: PUSH
30939: LD_INT 67
30941: PUSH
30942: LD_INT 68
30944: PUSH
30945: LD_INT 81
30947: PUSH
30948: LD_INT 82
30950: PUSH
30951: LD_INT 83
30953: PUSH
30954: LD_INT 84
30956: PUSH
30957: LD_INT 85
30959: PUSH
30960: LD_INT 87
30962: PUSH
30963: LD_INT 88
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: ST_TO_ADDR
31022: GO 31255
31024: LD_INT 3
31026: DOUBLE
31027: EQUAL
31028: IFTRUE 31032
31030: GO 31254
31032: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31033: LD_ADDR_VAR 0 4
31037: PUSH
31038: LD_INT 46
31040: PUSH
31041: LD_INT 47
31043: PUSH
31044: LD_INT 1
31046: PUSH
31047: LD_INT 2
31049: PUSH
31050: LD_INT 82
31052: PUSH
31053: LD_INT 83
31055: PUSH
31056: LD_INT 84
31058: PUSH
31059: LD_INT 85
31061: PUSH
31062: LD_INT 86
31064: PUSH
31065: LD_INT 11
31067: PUSH
31068: LD_INT 9
31070: PUSH
31071: LD_INT 20
31073: PUSH
31074: LD_INT 19
31076: PUSH
31077: LD_INT 21
31079: PUSH
31080: LD_INT 24
31082: PUSH
31083: LD_INT 22
31085: PUSH
31086: LD_INT 25
31088: PUSH
31089: LD_INT 28
31091: PUSH
31092: LD_INT 29
31094: PUSH
31095: LD_INT 30
31097: PUSH
31098: LD_INT 31
31100: PUSH
31101: LD_INT 37
31103: PUSH
31104: LD_INT 38
31106: PUSH
31107: LD_INT 32
31109: PUSH
31110: LD_INT 27
31112: PUSH
31113: LD_INT 33
31115: PUSH
31116: LD_INT 69
31118: PUSH
31119: LD_INT 39
31121: PUSH
31122: LD_INT 34
31124: PUSH
31125: LD_INT 40
31127: PUSH
31128: LD_INT 71
31130: PUSH
31131: LD_INT 23
31133: PUSH
31134: LD_INT 44
31136: PUSH
31137: LD_INT 48
31139: PUSH
31140: LD_INT 49
31142: PUSH
31143: LD_INT 50
31145: PUSH
31146: LD_INT 51
31148: PUSH
31149: LD_INT 52
31151: PUSH
31152: LD_INT 53
31154: PUSH
31155: LD_INT 54
31157: PUSH
31158: LD_INT 55
31160: PUSH
31161: LD_INT 56
31163: PUSH
31164: LD_INT 57
31166: PUSH
31167: LD_INT 58
31169: PUSH
31170: LD_INT 59
31172: PUSH
31173: LD_INT 63
31175: PUSH
31176: LD_INT 64
31178: PUSH
31179: LD_INT 65
31181: PUSH
31182: LD_INT 82
31184: PUSH
31185: LD_INT 83
31187: PUSH
31188: LD_INT 84
31190: PUSH
31191: LD_INT 85
31193: PUSH
31194: LD_INT 86
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: ST_TO_ADDR
31252: GO 31255
31254: POP
// if state > - 1 and state < 3 then
31255: LD_VAR 0 3
31259: PUSH
31260: LD_INT 1
31262: NEG
31263: GREATER
31264: PUSH
31265: LD_VAR 0 3
31269: PUSH
31270: LD_INT 3
31272: LESS
31273: AND
31274: IFFALSE 31331
// for i in result do
31276: LD_ADDR_VAR 0 5
31280: PUSH
31281: LD_VAR 0 4
31285: PUSH
31286: FOR_IN
31287: IFFALSE 31329
// if GetTech ( i , side ) <> state then
31289: LD_VAR 0 5
31293: PPUSH
31294: LD_VAR 0 1
31298: PPUSH
31299: CALL_OW 321
31303: PUSH
31304: LD_VAR 0 3
31308: NONEQUAL
31309: IFFALSE 31327
// result := result diff i ;
31311: LD_ADDR_VAR 0 4
31315: PUSH
31316: LD_VAR 0 4
31320: PUSH
31321: LD_VAR 0 5
31325: DIFF
31326: ST_TO_ADDR
31327: GO 31286
31329: POP
31330: POP
// end ;
31331: LD_VAR 0 4
31335: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31336: LD_INT 0
31338: PPUSH
31339: PPUSH
31340: PPUSH
// result := true ;
31341: LD_ADDR_VAR 0 3
31345: PUSH
31346: LD_INT 1
31348: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31349: LD_ADDR_VAR 0 5
31353: PUSH
31354: LD_VAR 0 2
31358: PPUSH
31359: CALL_OW 480
31363: ST_TO_ADDR
// if not tmp then
31364: LD_VAR 0 5
31368: NOT
31369: IFFALSE 31373
// exit ;
31371: GO 31422
// for i in tmp do
31373: LD_ADDR_VAR 0 4
31377: PUSH
31378: LD_VAR 0 5
31382: PUSH
31383: FOR_IN
31384: IFFALSE 31420
// if GetTech ( i , side ) <> state_researched then
31386: LD_VAR 0 4
31390: PPUSH
31391: LD_VAR 0 1
31395: PPUSH
31396: CALL_OW 321
31400: PUSH
31401: LD_INT 2
31403: NONEQUAL
31404: IFFALSE 31418
// begin result := false ;
31406: LD_ADDR_VAR 0 3
31410: PUSH
31411: LD_INT 0
31413: ST_TO_ADDR
// exit ;
31414: POP
31415: POP
31416: GO 31422
// end ;
31418: GO 31383
31420: POP
31421: POP
// end ;
31422: LD_VAR 0 3
31426: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31427: LD_INT 0
31429: PPUSH
31430: PPUSH
31431: PPUSH
31432: PPUSH
31433: PPUSH
31434: PPUSH
31435: PPUSH
31436: PPUSH
31437: PPUSH
31438: PPUSH
31439: PPUSH
31440: PPUSH
31441: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31442: LD_VAR 0 1
31446: NOT
31447: PUSH
31448: LD_VAR 0 1
31452: PPUSH
31453: CALL_OW 257
31457: PUSH
31458: LD_INT 9
31460: NONEQUAL
31461: OR
31462: IFFALSE 31466
// exit ;
31464: GO 32039
// side := GetSide ( unit ) ;
31466: LD_ADDR_VAR 0 9
31470: PUSH
31471: LD_VAR 0 1
31475: PPUSH
31476: CALL_OW 255
31480: ST_TO_ADDR
// tech_space := tech_spacanom ;
31481: LD_ADDR_VAR 0 12
31485: PUSH
31486: LD_INT 29
31488: ST_TO_ADDR
// tech_time := tech_taurad ;
31489: LD_ADDR_VAR 0 13
31493: PUSH
31494: LD_INT 28
31496: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31497: LD_ADDR_VAR 0 11
31501: PUSH
31502: LD_VAR 0 1
31506: PPUSH
31507: CALL_OW 310
31511: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31512: LD_VAR 0 11
31516: PPUSH
31517: CALL_OW 247
31521: PUSH
31522: LD_INT 2
31524: EQUAL
31525: IFFALSE 31529
// exit ;
31527: GO 32039
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31529: LD_ADDR_VAR 0 8
31533: PUSH
31534: LD_INT 81
31536: PUSH
31537: LD_VAR 0 9
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 3
31548: PUSH
31549: LD_INT 21
31551: PUSH
31552: LD_INT 3
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PPUSH
31567: CALL_OW 69
31571: ST_TO_ADDR
// if not tmp then
31572: LD_VAR 0 8
31576: NOT
31577: IFFALSE 31581
// exit ;
31579: GO 32039
// if in_unit then
31581: LD_VAR 0 11
31585: IFFALSE 31609
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31587: LD_ADDR_VAR 0 10
31591: PUSH
31592: LD_VAR 0 8
31596: PPUSH
31597: LD_VAR 0 11
31601: PPUSH
31602: CALL_OW 74
31606: ST_TO_ADDR
31607: GO 31629
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31609: LD_ADDR_VAR 0 10
31613: PUSH
31614: LD_VAR 0 8
31618: PPUSH
31619: LD_VAR 0 1
31623: PPUSH
31624: CALL_OW 74
31628: ST_TO_ADDR
// if not enemy then
31629: LD_VAR 0 10
31633: NOT
31634: IFFALSE 31638
// exit ;
31636: GO 32039
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31638: LD_VAR 0 11
31642: PUSH
31643: LD_VAR 0 11
31647: PPUSH
31648: LD_VAR 0 10
31652: PPUSH
31653: CALL_OW 296
31657: PUSH
31658: LD_INT 13
31660: GREATER
31661: AND
31662: PUSH
31663: LD_VAR 0 1
31667: PPUSH
31668: LD_VAR 0 10
31672: PPUSH
31673: CALL_OW 296
31677: PUSH
31678: LD_INT 12
31680: GREATER
31681: OR
31682: IFFALSE 31686
// exit ;
31684: GO 32039
// missile := [ 1 ] ;
31686: LD_ADDR_VAR 0 14
31690: PUSH
31691: LD_INT 1
31693: PUSH
31694: EMPTY
31695: LIST
31696: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31697: LD_VAR 0 9
31701: PPUSH
31702: LD_VAR 0 12
31706: PPUSH
31707: CALL_OW 325
31711: IFFALSE 31740
// missile := Replace ( missile , missile + 1 , 2 ) ;
31713: LD_ADDR_VAR 0 14
31717: PUSH
31718: LD_VAR 0 14
31722: PPUSH
31723: LD_VAR 0 14
31727: PUSH
31728: LD_INT 1
31730: PLUS
31731: PPUSH
31732: LD_INT 2
31734: PPUSH
31735: CALL_OW 1
31739: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31740: LD_VAR 0 9
31744: PPUSH
31745: LD_VAR 0 13
31749: PPUSH
31750: CALL_OW 325
31754: PUSH
31755: LD_VAR 0 10
31759: PPUSH
31760: CALL_OW 255
31764: PPUSH
31765: LD_VAR 0 13
31769: PPUSH
31770: CALL_OW 325
31774: NOT
31775: AND
31776: IFFALSE 31805
// missile := Replace ( missile , missile + 1 , 3 ) ;
31778: LD_ADDR_VAR 0 14
31782: PUSH
31783: LD_VAR 0 14
31787: PPUSH
31788: LD_VAR 0 14
31792: PUSH
31793: LD_INT 1
31795: PLUS
31796: PPUSH
31797: LD_INT 3
31799: PPUSH
31800: CALL_OW 1
31804: ST_TO_ADDR
// if missile < 2 then
31805: LD_VAR 0 14
31809: PUSH
31810: LD_INT 2
31812: LESS
31813: IFFALSE 31817
// exit ;
31815: GO 32039
// x := GetX ( enemy ) ;
31817: LD_ADDR_VAR 0 4
31821: PUSH
31822: LD_VAR 0 10
31826: PPUSH
31827: CALL_OW 250
31831: ST_TO_ADDR
// y := GetY ( enemy ) ;
31832: LD_ADDR_VAR 0 5
31836: PUSH
31837: LD_VAR 0 10
31841: PPUSH
31842: CALL_OW 251
31846: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31847: LD_ADDR_VAR 0 6
31851: PUSH
31852: LD_VAR 0 4
31856: PUSH
31857: LD_INT 1
31859: NEG
31860: PPUSH
31861: LD_INT 1
31863: PPUSH
31864: CALL_OW 12
31868: PLUS
31869: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31870: LD_ADDR_VAR 0 7
31874: PUSH
31875: LD_VAR 0 5
31879: PUSH
31880: LD_INT 1
31882: NEG
31883: PPUSH
31884: LD_INT 1
31886: PPUSH
31887: CALL_OW 12
31891: PLUS
31892: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31893: LD_VAR 0 6
31897: PPUSH
31898: LD_VAR 0 7
31902: PPUSH
31903: CALL_OW 488
31907: NOT
31908: IFFALSE 31930
// begin _x := x ;
31910: LD_ADDR_VAR 0 6
31914: PUSH
31915: LD_VAR 0 4
31919: ST_TO_ADDR
// _y := y ;
31920: LD_ADDR_VAR 0 7
31924: PUSH
31925: LD_VAR 0 5
31929: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31930: LD_ADDR_VAR 0 3
31934: PUSH
31935: LD_INT 1
31937: PPUSH
31938: LD_VAR 0 14
31942: PPUSH
31943: CALL_OW 12
31947: ST_TO_ADDR
// case i of 1 :
31948: LD_VAR 0 3
31952: PUSH
31953: LD_INT 1
31955: DOUBLE
31956: EQUAL
31957: IFTRUE 31961
31959: GO 31978
31961: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31962: LD_VAR 0 1
31966: PPUSH
31967: LD_VAR 0 10
31971: PPUSH
31972: CALL_OW 115
31976: GO 32039
31978: LD_INT 2
31980: DOUBLE
31981: EQUAL
31982: IFTRUE 31986
31984: GO 32008
31986: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31987: LD_VAR 0 1
31991: PPUSH
31992: LD_VAR 0 6
31996: PPUSH
31997: LD_VAR 0 7
32001: PPUSH
32002: CALL_OW 153
32006: GO 32039
32008: LD_INT 3
32010: DOUBLE
32011: EQUAL
32012: IFTRUE 32016
32014: GO 32038
32016: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32017: LD_VAR 0 1
32021: PPUSH
32022: LD_VAR 0 6
32026: PPUSH
32027: LD_VAR 0 7
32031: PPUSH
32032: CALL_OW 154
32036: GO 32039
32038: POP
// end ;
32039: LD_VAR 0 2
32043: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32044: LD_INT 0
32046: PPUSH
32047: PPUSH
32048: PPUSH
32049: PPUSH
32050: PPUSH
32051: PPUSH
// if not unit or not building then
32052: LD_VAR 0 1
32056: NOT
32057: PUSH
32058: LD_VAR 0 2
32062: NOT
32063: OR
32064: IFFALSE 32068
// exit ;
32066: GO 32226
// x := GetX ( building ) ;
32068: LD_ADDR_VAR 0 5
32072: PUSH
32073: LD_VAR 0 2
32077: PPUSH
32078: CALL_OW 250
32082: ST_TO_ADDR
// y := GetY ( building ) ;
32083: LD_ADDR_VAR 0 6
32087: PUSH
32088: LD_VAR 0 2
32092: PPUSH
32093: CALL_OW 251
32097: ST_TO_ADDR
// for i = 0 to 5 do
32098: LD_ADDR_VAR 0 4
32102: PUSH
32103: DOUBLE
32104: LD_INT 0
32106: DEC
32107: ST_TO_ADDR
32108: LD_INT 5
32110: PUSH
32111: FOR_TO
32112: IFFALSE 32224
// begin _x := ShiftX ( x , i , 3 ) ;
32114: LD_ADDR_VAR 0 7
32118: PUSH
32119: LD_VAR 0 5
32123: PPUSH
32124: LD_VAR 0 4
32128: PPUSH
32129: LD_INT 3
32131: PPUSH
32132: CALL_OW 272
32136: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32137: LD_ADDR_VAR 0 8
32141: PUSH
32142: LD_VAR 0 6
32146: PPUSH
32147: LD_VAR 0 4
32151: PPUSH
32152: LD_INT 3
32154: PPUSH
32155: CALL_OW 273
32159: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32160: LD_VAR 0 7
32164: PPUSH
32165: LD_VAR 0 8
32169: PPUSH
32170: CALL_OW 488
32174: NOT
32175: IFFALSE 32179
// continue ;
32177: GO 32111
// if HexInfo ( _x , _y ) = 0 then
32179: LD_VAR 0 7
32183: PPUSH
32184: LD_VAR 0 8
32188: PPUSH
32189: CALL_OW 428
32193: PUSH
32194: LD_INT 0
32196: EQUAL
32197: IFFALSE 32222
// begin ComMoveXY ( unit , _x , _y ) ;
32199: LD_VAR 0 1
32203: PPUSH
32204: LD_VAR 0 7
32208: PPUSH
32209: LD_VAR 0 8
32213: PPUSH
32214: CALL_OW 111
// exit ;
32218: POP
32219: POP
32220: GO 32226
// end ; end ;
32222: GO 32111
32224: POP
32225: POP
// end ;
32226: LD_VAR 0 3
32230: RET
// export function ScanBase ( side , base_area ) ; begin
32231: LD_INT 0
32233: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32234: LD_ADDR_VAR 0 3
32238: PUSH
32239: LD_VAR 0 2
32243: PPUSH
32244: LD_INT 81
32246: PUSH
32247: LD_VAR 0 1
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PPUSH
32256: CALL_OW 70
32260: ST_TO_ADDR
// end ;
32261: LD_VAR 0 3
32265: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32266: LD_INT 0
32268: PPUSH
32269: PPUSH
32270: PPUSH
32271: PPUSH
// result := false ;
32272: LD_ADDR_VAR 0 2
32276: PUSH
32277: LD_INT 0
32279: ST_TO_ADDR
// side := GetSide ( unit ) ;
32280: LD_ADDR_VAR 0 3
32284: PUSH
32285: LD_VAR 0 1
32289: PPUSH
32290: CALL_OW 255
32294: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32295: LD_ADDR_VAR 0 4
32299: PUSH
32300: LD_VAR 0 1
32304: PPUSH
32305: CALL_OW 248
32309: ST_TO_ADDR
// case nat of 1 :
32310: LD_VAR 0 4
32314: PUSH
32315: LD_INT 1
32317: DOUBLE
32318: EQUAL
32319: IFTRUE 32323
32321: GO 32334
32323: POP
// tech := tech_lassight ; 2 :
32324: LD_ADDR_VAR 0 5
32328: PUSH
32329: LD_INT 12
32331: ST_TO_ADDR
32332: GO 32373
32334: LD_INT 2
32336: DOUBLE
32337: EQUAL
32338: IFTRUE 32342
32340: GO 32353
32342: POP
// tech := tech_mortar ; 3 :
32343: LD_ADDR_VAR 0 5
32347: PUSH
32348: LD_INT 41
32350: ST_TO_ADDR
32351: GO 32373
32353: LD_INT 3
32355: DOUBLE
32356: EQUAL
32357: IFTRUE 32361
32359: GO 32372
32361: POP
// tech := tech_bazooka ; end ;
32362: LD_ADDR_VAR 0 5
32366: PUSH
32367: LD_INT 44
32369: ST_TO_ADDR
32370: GO 32373
32372: POP
// if Researched ( side , tech ) then
32373: LD_VAR 0 3
32377: PPUSH
32378: LD_VAR 0 5
32382: PPUSH
32383: CALL_OW 325
32387: IFFALSE 32414
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32389: LD_ADDR_VAR 0 2
32393: PUSH
32394: LD_INT 5
32396: PUSH
32397: LD_INT 8
32399: PUSH
32400: LD_INT 9
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: LIST
32407: PUSH
32408: LD_VAR 0 4
32412: ARRAY
32413: ST_TO_ADDR
// end ;
32414: LD_VAR 0 2
32418: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32419: LD_INT 0
32421: PPUSH
32422: PPUSH
32423: PPUSH
// if not mines then
32424: LD_VAR 0 2
32428: NOT
32429: IFFALSE 32433
// exit ;
32431: GO 32577
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32433: LD_ADDR_VAR 0 5
32437: PUSH
32438: LD_INT 81
32440: PUSH
32441: LD_VAR 0 1
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 3
32452: PUSH
32453: LD_INT 21
32455: PUSH
32456: LD_INT 3
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PPUSH
32471: CALL_OW 69
32475: ST_TO_ADDR
// for i in mines do
32476: LD_ADDR_VAR 0 4
32480: PUSH
32481: LD_VAR 0 2
32485: PUSH
32486: FOR_IN
32487: IFFALSE 32575
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32489: LD_VAR 0 4
32493: PUSH
32494: LD_INT 1
32496: ARRAY
32497: PPUSH
32498: LD_VAR 0 4
32502: PUSH
32503: LD_INT 2
32505: ARRAY
32506: PPUSH
32507: CALL_OW 458
32511: NOT
32512: IFFALSE 32516
// continue ;
32514: GO 32486
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32516: LD_VAR 0 4
32520: PUSH
32521: LD_INT 1
32523: ARRAY
32524: PPUSH
32525: LD_VAR 0 4
32529: PUSH
32530: LD_INT 2
32532: ARRAY
32533: PPUSH
32534: CALL_OW 428
32538: PUSH
32539: LD_VAR 0 5
32543: IN
32544: IFFALSE 32573
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32546: LD_VAR 0 4
32550: PUSH
32551: LD_INT 1
32553: ARRAY
32554: PPUSH
32555: LD_VAR 0 4
32559: PUSH
32560: LD_INT 2
32562: ARRAY
32563: PPUSH
32564: LD_VAR 0 1
32568: PPUSH
32569: CALL_OW 456
// end ;
32573: GO 32486
32575: POP
32576: POP
// end ;
32577: LD_VAR 0 3
32581: RET
// export function Count ( array ) ; var i ; begin
32582: LD_INT 0
32584: PPUSH
32585: PPUSH
// result := 0 ;
32586: LD_ADDR_VAR 0 2
32590: PUSH
32591: LD_INT 0
32593: ST_TO_ADDR
// for i in array do
32594: LD_ADDR_VAR 0 3
32598: PUSH
32599: LD_VAR 0 1
32603: PUSH
32604: FOR_IN
32605: IFFALSE 32629
// if i then
32607: LD_VAR 0 3
32611: IFFALSE 32627
// result := result + 1 ;
32613: LD_ADDR_VAR 0 2
32617: PUSH
32618: LD_VAR 0 2
32622: PUSH
32623: LD_INT 1
32625: PLUS
32626: ST_TO_ADDR
32627: GO 32604
32629: POP
32630: POP
// end ;
32631: LD_VAR 0 2
32635: RET
// export function IsEmpty ( building ) ; begin
32636: LD_INT 0
32638: PPUSH
// if not building then
32639: LD_VAR 0 1
32643: NOT
32644: IFFALSE 32648
// exit ;
32646: GO 32691
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32648: LD_ADDR_VAR 0 2
32652: PUSH
32653: LD_VAR 0 1
32657: PUSH
32658: LD_INT 22
32660: PUSH
32661: LD_VAR 0 1
32665: PPUSH
32666: CALL_OW 255
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 58
32677: PUSH
32678: EMPTY
32679: LIST
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PPUSH
32685: CALL_OW 69
32689: IN
32690: ST_TO_ADDR
// end ;
32691: LD_VAR 0 2
32695: RET
// export function IsNotFull ( building ) ; var places ; begin
32696: LD_INT 0
32698: PPUSH
32699: PPUSH
// if not building then
32700: LD_VAR 0 1
32704: NOT
32705: IFFALSE 32709
// exit ;
32707: GO 32880
// result := false ;
32709: LD_ADDR_VAR 0 2
32713: PUSH
32714: LD_INT 0
32716: ST_TO_ADDR
// places := 0 ;
32717: LD_ADDR_VAR 0 3
32721: PUSH
32722: LD_INT 0
32724: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32725: LD_VAR 0 1
32729: PPUSH
32730: CALL_OW 266
32734: PUSH
32735: LD_INT 0
32737: DOUBLE
32738: EQUAL
32739: IFTRUE 32797
32741: LD_INT 1
32743: DOUBLE
32744: EQUAL
32745: IFTRUE 32797
32747: LD_INT 6
32749: DOUBLE
32750: EQUAL
32751: IFTRUE 32797
32753: LD_INT 7
32755: DOUBLE
32756: EQUAL
32757: IFTRUE 32797
32759: LD_INT 8
32761: DOUBLE
32762: EQUAL
32763: IFTRUE 32797
32765: LD_INT 4
32767: DOUBLE
32768: EQUAL
32769: IFTRUE 32797
32771: LD_INT 5
32773: DOUBLE
32774: EQUAL
32775: IFTRUE 32797
32777: LD_INT 2
32779: DOUBLE
32780: EQUAL
32781: IFTRUE 32797
32783: LD_INT 3
32785: DOUBLE
32786: EQUAL
32787: IFTRUE 32797
32789: LD_INT 35
32791: DOUBLE
32792: EQUAL
32793: IFTRUE 32797
32795: GO 32808
32797: POP
// places := 6 ; b_bunker , b_breastwork :
32798: LD_ADDR_VAR 0 3
32802: PUSH
32803: LD_INT 6
32805: ST_TO_ADDR
32806: GO 32853
32808: LD_INT 32
32810: DOUBLE
32811: EQUAL
32812: IFTRUE 32822
32814: LD_INT 31
32816: DOUBLE
32817: EQUAL
32818: IFTRUE 32822
32820: GO 32833
32822: POP
// places := 1 ; b_control_tower :
32823: LD_ADDR_VAR 0 3
32827: PUSH
32828: LD_INT 1
32830: ST_TO_ADDR
32831: GO 32853
32833: LD_INT 36
32835: DOUBLE
32836: EQUAL
32837: IFTRUE 32841
32839: GO 32852
32841: POP
// places := 3 ; end ;
32842: LD_ADDR_VAR 0 3
32846: PUSH
32847: LD_INT 3
32849: ST_TO_ADDR
32850: GO 32853
32852: POP
// if places then
32853: LD_VAR 0 3
32857: IFFALSE 32880
// result := UnitsInside ( building ) < places ;
32859: LD_ADDR_VAR 0 2
32863: PUSH
32864: LD_VAR 0 1
32868: PPUSH
32869: CALL_OW 313
32873: PUSH
32874: LD_VAR 0 3
32878: LESS
32879: ST_TO_ADDR
// end ;
32880: LD_VAR 0 2
32884: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32885: LD_INT 0
32887: PPUSH
32888: PPUSH
32889: PPUSH
32890: PPUSH
// tmp := [ ] ;
32891: LD_ADDR_VAR 0 3
32895: PUSH
32896: EMPTY
32897: ST_TO_ADDR
// list := [ ] ;
32898: LD_ADDR_VAR 0 5
32902: PUSH
32903: EMPTY
32904: ST_TO_ADDR
// for i = 16 to 25 do
32905: LD_ADDR_VAR 0 4
32909: PUSH
32910: DOUBLE
32911: LD_INT 16
32913: DEC
32914: ST_TO_ADDR
32915: LD_INT 25
32917: PUSH
32918: FOR_TO
32919: IFFALSE 32992
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32921: LD_ADDR_VAR 0 3
32925: PUSH
32926: LD_VAR 0 3
32930: PUSH
32931: LD_INT 22
32933: PUSH
32934: LD_VAR 0 1
32938: PPUSH
32939: CALL_OW 255
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 91
32950: PUSH
32951: LD_VAR 0 1
32955: PUSH
32956: LD_INT 6
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 30
32966: PUSH
32967: LD_VAR 0 4
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: PUSH
32981: EMPTY
32982: LIST
32983: PPUSH
32984: CALL_OW 69
32988: ADD
32989: ST_TO_ADDR
32990: GO 32918
32992: POP
32993: POP
// for i = 1 to tmp do
32994: LD_ADDR_VAR 0 4
32998: PUSH
32999: DOUBLE
33000: LD_INT 1
33002: DEC
33003: ST_TO_ADDR
33004: LD_VAR 0 3
33008: PUSH
33009: FOR_TO
33010: IFFALSE 33098
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33012: LD_ADDR_VAR 0 5
33016: PUSH
33017: LD_VAR 0 5
33021: PUSH
33022: LD_VAR 0 3
33026: PUSH
33027: LD_VAR 0 4
33031: ARRAY
33032: PPUSH
33033: CALL_OW 266
33037: PUSH
33038: LD_VAR 0 3
33042: PUSH
33043: LD_VAR 0 4
33047: ARRAY
33048: PPUSH
33049: CALL_OW 250
33053: PUSH
33054: LD_VAR 0 3
33058: PUSH
33059: LD_VAR 0 4
33063: ARRAY
33064: PPUSH
33065: CALL_OW 251
33069: PUSH
33070: LD_VAR 0 3
33074: PUSH
33075: LD_VAR 0 4
33079: ARRAY
33080: PPUSH
33081: CALL_OW 254
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: PUSH
33092: EMPTY
33093: LIST
33094: ADD
33095: ST_TO_ADDR
33096: GO 33009
33098: POP
33099: POP
// result := list ;
33100: LD_ADDR_VAR 0 2
33104: PUSH
33105: LD_VAR 0 5
33109: ST_TO_ADDR
// end ;
33110: LD_VAR 0 2
33114: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33115: LD_INT 0
33117: PPUSH
33118: PPUSH
33119: PPUSH
33120: PPUSH
33121: PPUSH
33122: PPUSH
33123: PPUSH
// if not factory then
33124: LD_VAR 0 1
33128: NOT
33129: IFFALSE 33133
// exit ;
33131: GO 33726
// if control = control_apeman then
33133: LD_VAR 0 4
33137: PUSH
33138: LD_INT 5
33140: EQUAL
33141: IFFALSE 33250
// begin tmp := UnitsInside ( factory ) ;
33143: LD_ADDR_VAR 0 8
33147: PUSH
33148: LD_VAR 0 1
33152: PPUSH
33153: CALL_OW 313
33157: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33158: LD_VAR 0 8
33162: PPUSH
33163: LD_INT 25
33165: PUSH
33166: LD_INT 12
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PPUSH
33173: CALL_OW 72
33177: NOT
33178: IFFALSE 33188
// control := control_manual ;
33180: LD_ADDR_VAR 0 4
33184: PUSH
33185: LD_INT 1
33187: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33188: LD_ADDR_VAR 0 8
33192: PUSH
33193: LD_VAR 0 1
33197: PPUSH
33198: CALL 32885 0 1
33202: ST_TO_ADDR
// if tmp then
33203: LD_VAR 0 8
33207: IFFALSE 33250
// begin for i in tmp do
33209: LD_ADDR_VAR 0 7
33213: PUSH
33214: LD_VAR 0 8
33218: PUSH
33219: FOR_IN
33220: IFFALSE 33248
// if i [ 1 ] = b_ext_radio then
33222: LD_VAR 0 7
33226: PUSH
33227: LD_INT 1
33229: ARRAY
33230: PUSH
33231: LD_INT 22
33233: EQUAL
33234: IFFALSE 33246
// begin control := control_remote ;
33236: LD_ADDR_VAR 0 4
33240: PUSH
33241: LD_INT 2
33243: ST_TO_ADDR
// break ;
33244: GO 33248
// end ;
33246: GO 33219
33248: POP
33249: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33250: LD_VAR 0 1
33254: PPUSH
33255: LD_VAR 0 2
33259: PPUSH
33260: LD_VAR 0 3
33264: PPUSH
33265: LD_VAR 0 4
33269: PPUSH
33270: LD_VAR 0 5
33274: PPUSH
33275: CALL_OW 448
33279: IFFALSE 33314
// begin result := [ chassis , engine , control , weapon ] ;
33281: LD_ADDR_VAR 0 6
33285: PUSH
33286: LD_VAR 0 2
33290: PUSH
33291: LD_VAR 0 3
33295: PUSH
33296: LD_VAR 0 4
33300: PUSH
33301: LD_VAR 0 5
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: ST_TO_ADDR
// exit ;
33312: GO 33726
// end ; _chassis := AvailableChassisList ( factory ) ;
33314: LD_ADDR_VAR 0 9
33318: PUSH
33319: LD_VAR 0 1
33323: PPUSH
33324: CALL_OW 475
33328: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33329: LD_ADDR_VAR 0 11
33333: PUSH
33334: LD_VAR 0 1
33338: PPUSH
33339: CALL_OW 476
33343: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33344: LD_ADDR_VAR 0 12
33348: PUSH
33349: LD_VAR 0 1
33353: PPUSH
33354: CALL_OW 477
33358: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33359: LD_ADDR_VAR 0 10
33363: PUSH
33364: LD_VAR 0 1
33368: PPUSH
33369: CALL_OW 478
33373: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33374: LD_VAR 0 9
33378: NOT
33379: PUSH
33380: LD_VAR 0 11
33384: NOT
33385: OR
33386: PUSH
33387: LD_VAR 0 12
33391: NOT
33392: OR
33393: PUSH
33394: LD_VAR 0 10
33398: NOT
33399: OR
33400: IFFALSE 33435
// begin result := [ chassis , engine , control , weapon ] ;
33402: LD_ADDR_VAR 0 6
33406: PUSH
33407: LD_VAR 0 2
33411: PUSH
33412: LD_VAR 0 3
33416: PUSH
33417: LD_VAR 0 4
33421: PUSH
33422: LD_VAR 0 5
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: ST_TO_ADDR
// exit ;
33433: GO 33726
// end ; if not chassis in _chassis then
33435: LD_VAR 0 2
33439: PUSH
33440: LD_VAR 0 9
33444: IN
33445: NOT
33446: IFFALSE 33472
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33448: LD_ADDR_VAR 0 2
33452: PUSH
33453: LD_VAR 0 9
33457: PUSH
33458: LD_INT 1
33460: PPUSH
33461: LD_VAR 0 9
33465: PPUSH
33466: CALL_OW 12
33470: ARRAY
33471: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33472: LD_VAR 0 2
33476: PPUSH
33477: LD_VAR 0 3
33481: PPUSH
33482: CALL 33731 0 2
33486: NOT
33487: IFFALSE 33546
// repeat engine := _engine [ 1 ] ;
33489: LD_ADDR_VAR 0 3
33493: PUSH
33494: LD_VAR 0 11
33498: PUSH
33499: LD_INT 1
33501: ARRAY
33502: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33503: LD_ADDR_VAR 0 11
33507: PUSH
33508: LD_VAR 0 11
33512: PPUSH
33513: LD_INT 1
33515: PPUSH
33516: CALL_OW 3
33520: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33521: LD_VAR 0 2
33525: PPUSH
33526: LD_VAR 0 3
33530: PPUSH
33531: CALL 33731 0 2
33535: PUSH
33536: LD_VAR 0 11
33540: PUSH
33541: EMPTY
33542: EQUAL
33543: OR
33544: IFFALSE 33489
// if not control in _control then
33546: LD_VAR 0 4
33550: PUSH
33551: LD_VAR 0 12
33555: IN
33556: NOT
33557: IFFALSE 33583
// control := _control [ rand ( 1 , _control ) ] ;
33559: LD_ADDR_VAR 0 4
33563: PUSH
33564: LD_VAR 0 12
33568: PUSH
33569: LD_INT 1
33571: PPUSH
33572: LD_VAR 0 12
33576: PPUSH
33577: CALL_OW 12
33581: ARRAY
33582: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33583: LD_VAR 0 2
33587: PPUSH
33588: LD_VAR 0 5
33592: PPUSH
33593: CALL 33951 0 2
33597: NOT
33598: IFFALSE 33657
// repeat weapon := _weapon [ 1 ] ;
33600: LD_ADDR_VAR 0 5
33604: PUSH
33605: LD_VAR 0 10
33609: PUSH
33610: LD_INT 1
33612: ARRAY
33613: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33614: LD_ADDR_VAR 0 10
33618: PUSH
33619: LD_VAR 0 10
33623: PPUSH
33624: LD_INT 1
33626: PPUSH
33627: CALL_OW 3
33631: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33632: LD_VAR 0 2
33636: PPUSH
33637: LD_VAR 0 5
33641: PPUSH
33642: CALL 33951 0 2
33646: PUSH
33647: LD_VAR 0 10
33651: PUSH
33652: EMPTY
33653: EQUAL
33654: OR
33655: IFFALSE 33600
// result := [ ] ;
33657: LD_ADDR_VAR 0 6
33661: PUSH
33662: EMPTY
33663: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33664: LD_VAR 0 1
33668: PPUSH
33669: LD_VAR 0 2
33673: PPUSH
33674: LD_VAR 0 3
33678: PPUSH
33679: LD_VAR 0 4
33683: PPUSH
33684: LD_VAR 0 5
33688: PPUSH
33689: CALL_OW 448
33693: IFFALSE 33726
// result := [ chassis , engine , control , weapon ] ;
33695: LD_ADDR_VAR 0 6
33699: PUSH
33700: LD_VAR 0 2
33704: PUSH
33705: LD_VAR 0 3
33709: PUSH
33710: LD_VAR 0 4
33714: PUSH
33715: LD_VAR 0 5
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: ST_TO_ADDR
// end ;
33726: LD_VAR 0 6
33730: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33731: LD_INT 0
33733: PPUSH
// if not chassis or not engine then
33734: LD_VAR 0 1
33738: NOT
33739: PUSH
33740: LD_VAR 0 2
33744: NOT
33745: OR
33746: IFFALSE 33750
// exit ;
33748: GO 33946
// case engine of engine_solar :
33750: LD_VAR 0 2
33754: PUSH
33755: LD_INT 2
33757: DOUBLE
33758: EQUAL
33759: IFTRUE 33763
33761: GO 33801
33763: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33764: LD_ADDR_VAR 0 3
33768: PUSH
33769: LD_INT 11
33771: PUSH
33772: LD_INT 12
33774: PUSH
33775: LD_INT 13
33777: PUSH
33778: LD_INT 14
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: LD_INT 2
33786: PUSH
33787: LD_INT 3
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: ST_TO_ADDR
33799: GO 33930
33801: LD_INT 1
33803: DOUBLE
33804: EQUAL
33805: IFTRUE 33809
33807: GO 33871
33809: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33810: LD_ADDR_VAR 0 3
33814: PUSH
33815: LD_INT 11
33817: PUSH
33818: LD_INT 12
33820: PUSH
33821: LD_INT 13
33823: PUSH
33824: LD_INT 14
33826: PUSH
33827: LD_INT 1
33829: PUSH
33830: LD_INT 2
33832: PUSH
33833: LD_INT 3
33835: PUSH
33836: LD_INT 4
33838: PUSH
33839: LD_INT 5
33841: PUSH
33842: LD_INT 21
33844: PUSH
33845: LD_INT 23
33847: PUSH
33848: LD_INT 22
33850: PUSH
33851: LD_INT 24
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: ST_TO_ADDR
33869: GO 33930
33871: LD_INT 3
33873: DOUBLE
33874: EQUAL
33875: IFTRUE 33879
33877: GO 33929
33879: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33880: LD_ADDR_VAR 0 3
33884: PUSH
33885: LD_INT 13
33887: PUSH
33888: LD_INT 14
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: LD_INT 3
33896: PUSH
33897: LD_INT 4
33899: PUSH
33900: LD_INT 5
33902: PUSH
33903: LD_INT 21
33905: PUSH
33906: LD_INT 22
33908: PUSH
33909: LD_INT 23
33911: PUSH
33912: LD_INT 24
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: ST_TO_ADDR
33927: GO 33930
33929: POP
// result := ( chassis in result ) ;
33930: LD_ADDR_VAR 0 3
33934: PUSH
33935: LD_VAR 0 1
33939: PUSH
33940: LD_VAR 0 3
33944: IN
33945: ST_TO_ADDR
// end ;
33946: LD_VAR 0 3
33950: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33951: LD_INT 0
33953: PPUSH
// if not chassis or not weapon then
33954: LD_VAR 0 1
33958: NOT
33959: PUSH
33960: LD_VAR 0 2
33964: NOT
33965: OR
33966: IFFALSE 33970
// exit ;
33968: GO 35030
// case weapon of us_machine_gun :
33970: LD_VAR 0 2
33974: PUSH
33975: LD_INT 2
33977: DOUBLE
33978: EQUAL
33979: IFTRUE 33983
33981: GO 34013
33983: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33984: LD_ADDR_VAR 0 3
33988: PUSH
33989: LD_INT 1
33991: PUSH
33992: LD_INT 2
33994: PUSH
33995: LD_INT 3
33997: PUSH
33998: LD_INT 4
34000: PUSH
34001: LD_INT 5
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: ST_TO_ADDR
34011: GO 35014
34013: LD_INT 3
34015: DOUBLE
34016: EQUAL
34017: IFTRUE 34021
34019: GO 34051
34021: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34022: LD_ADDR_VAR 0 3
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 3
34035: PUSH
34036: LD_INT 4
34038: PUSH
34039: LD_INT 5
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: ST_TO_ADDR
34049: GO 35014
34051: LD_INT 11
34053: DOUBLE
34054: EQUAL
34055: IFTRUE 34059
34057: GO 34089
34059: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34060: LD_ADDR_VAR 0 3
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: LD_INT 2
34070: PUSH
34071: LD_INT 3
34073: PUSH
34074: LD_INT 4
34076: PUSH
34077: LD_INT 5
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: ST_TO_ADDR
34087: GO 35014
34089: LD_INT 4
34091: DOUBLE
34092: EQUAL
34093: IFTRUE 34097
34095: GO 34123
34097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34098: LD_ADDR_VAR 0 3
34102: PUSH
34103: LD_INT 2
34105: PUSH
34106: LD_INT 3
34108: PUSH
34109: LD_INT 4
34111: PUSH
34112: LD_INT 5
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: ST_TO_ADDR
34121: GO 35014
34123: LD_INT 5
34125: DOUBLE
34126: EQUAL
34127: IFTRUE 34131
34129: GO 34157
34131: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34132: LD_ADDR_VAR 0 3
34136: PUSH
34137: LD_INT 2
34139: PUSH
34140: LD_INT 3
34142: PUSH
34143: LD_INT 4
34145: PUSH
34146: LD_INT 5
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: ST_TO_ADDR
34155: GO 35014
34157: LD_INT 9
34159: DOUBLE
34160: EQUAL
34161: IFTRUE 34165
34163: GO 34191
34165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34166: LD_ADDR_VAR 0 3
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: LD_INT 3
34176: PUSH
34177: LD_INT 4
34179: PUSH
34180: LD_INT 5
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: ST_TO_ADDR
34189: GO 35014
34191: LD_INT 7
34193: DOUBLE
34194: EQUAL
34195: IFTRUE 34199
34197: GO 34225
34199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34200: LD_ADDR_VAR 0 3
34204: PUSH
34205: LD_INT 2
34207: PUSH
34208: LD_INT 3
34210: PUSH
34211: LD_INT 4
34213: PUSH
34214: LD_INT 5
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: ST_TO_ADDR
34223: GO 35014
34225: LD_INT 12
34227: DOUBLE
34228: EQUAL
34229: IFTRUE 34233
34231: GO 34259
34233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34234: LD_ADDR_VAR 0 3
34238: PUSH
34239: LD_INT 2
34241: PUSH
34242: LD_INT 3
34244: PUSH
34245: LD_INT 4
34247: PUSH
34248: LD_INT 5
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: ST_TO_ADDR
34257: GO 35014
34259: LD_INT 13
34261: DOUBLE
34262: EQUAL
34263: IFTRUE 34267
34265: GO 34293
34267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34268: LD_ADDR_VAR 0 3
34272: PUSH
34273: LD_INT 2
34275: PUSH
34276: LD_INT 3
34278: PUSH
34279: LD_INT 4
34281: PUSH
34282: LD_INT 5
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: ST_TO_ADDR
34291: GO 35014
34293: LD_INT 14
34295: DOUBLE
34296: EQUAL
34297: IFTRUE 34301
34299: GO 34319
34301: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34302: LD_ADDR_VAR 0 3
34306: PUSH
34307: LD_INT 4
34309: PUSH
34310: LD_INT 5
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: ST_TO_ADDR
34317: GO 35014
34319: LD_INT 6
34321: DOUBLE
34322: EQUAL
34323: IFTRUE 34327
34325: GO 34345
34327: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34328: LD_ADDR_VAR 0 3
34332: PUSH
34333: LD_INT 4
34335: PUSH
34336: LD_INT 5
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: ST_TO_ADDR
34343: GO 35014
34345: LD_INT 10
34347: DOUBLE
34348: EQUAL
34349: IFTRUE 34353
34351: GO 34371
34353: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34354: LD_ADDR_VAR 0 3
34358: PUSH
34359: LD_INT 4
34361: PUSH
34362: LD_INT 5
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: ST_TO_ADDR
34369: GO 35014
34371: LD_INT 22
34373: DOUBLE
34374: EQUAL
34375: IFTRUE 34379
34377: GO 34405
34379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34380: LD_ADDR_VAR 0 3
34384: PUSH
34385: LD_INT 11
34387: PUSH
34388: LD_INT 12
34390: PUSH
34391: LD_INT 13
34393: PUSH
34394: LD_INT 14
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: ST_TO_ADDR
34403: GO 35014
34405: LD_INT 23
34407: DOUBLE
34408: EQUAL
34409: IFTRUE 34413
34411: GO 34439
34413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34414: LD_ADDR_VAR 0 3
34418: PUSH
34419: LD_INT 11
34421: PUSH
34422: LD_INT 12
34424: PUSH
34425: LD_INT 13
34427: PUSH
34428: LD_INT 14
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: ST_TO_ADDR
34437: GO 35014
34439: LD_INT 24
34441: DOUBLE
34442: EQUAL
34443: IFTRUE 34447
34445: GO 34473
34447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34448: LD_ADDR_VAR 0 3
34452: PUSH
34453: LD_INT 11
34455: PUSH
34456: LD_INT 12
34458: PUSH
34459: LD_INT 13
34461: PUSH
34462: LD_INT 14
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: ST_TO_ADDR
34471: GO 35014
34473: LD_INT 30
34475: DOUBLE
34476: EQUAL
34477: IFTRUE 34481
34479: GO 34507
34481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34482: LD_ADDR_VAR 0 3
34486: PUSH
34487: LD_INT 11
34489: PUSH
34490: LD_INT 12
34492: PUSH
34493: LD_INT 13
34495: PUSH
34496: LD_INT 14
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: ST_TO_ADDR
34505: GO 35014
34507: LD_INT 25
34509: DOUBLE
34510: EQUAL
34511: IFTRUE 34515
34513: GO 34533
34515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34516: LD_ADDR_VAR 0 3
34520: PUSH
34521: LD_INT 13
34523: PUSH
34524: LD_INT 14
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: ST_TO_ADDR
34531: GO 35014
34533: LD_INT 27
34535: DOUBLE
34536: EQUAL
34537: IFTRUE 34541
34539: GO 34559
34541: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34542: LD_ADDR_VAR 0 3
34546: PUSH
34547: LD_INT 13
34549: PUSH
34550: LD_INT 14
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: ST_TO_ADDR
34557: GO 35014
34559: LD_INT 92
34561: DOUBLE
34562: EQUAL
34563: IFTRUE 34567
34565: GO 34593
34567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34568: LD_ADDR_VAR 0 3
34572: PUSH
34573: LD_INT 11
34575: PUSH
34576: LD_INT 12
34578: PUSH
34579: LD_INT 13
34581: PUSH
34582: LD_INT 14
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: ST_TO_ADDR
34591: GO 35014
34593: LD_INT 28
34595: DOUBLE
34596: EQUAL
34597: IFTRUE 34601
34599: GO 34619
34601: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34602: LD_ADDR_VAR 0 3
34606: PUSH
34607: LD_INT 13
34609: PUSH
34610: LD_INT 14
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: ST_TO_ADDR
34617: GO 35014
34619: LD_INT 29
34621: DOUBLE
34622: EQUAL
34623: IFTRUE 34627
34625: GO 34645
34627: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34628: LD_ADDR_VAR 0 3
34632: PUSH
34633: LD_INT 13
34635: PUSH
34636: LD_INT 14
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: ST_TO_ADDR
34643: GO 35014
34645: LD_INT 31
34647: DOUBLE
34648: EQUAL
34649: IFTRUE 34653
34651: GO 34671
34653: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34654: LD_ADDR_VAR 0 3
34658: PUSH
34659: LD_INT 13
34661: PUSH
34662: LD_INT 14
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: ST_TO_ADDR
34669: GO 35014
34671: LD_INT 26
34673: DOUBLE
34674: EQUAL
34675: IFTRUE 34679
34677: GO 34697
34679: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34680: LD_ADDR_VAR 0 3
34684: PUSH
34685: LD_INT 13
34687: PUSH
34688: LD_INT 14
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: ST_TO_ADDR
34695: GO 35014
34697: LD_INT 42
34699: DOUBLE
34700: EQUAL
34701: IFTRUE 34705
34703: GO 34731
34705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34706: LD_ADDR_VAR 0 3
34710: PUSH
34711: LD_INT 21
34713: PUSH
34714: LD_INT 22
34716: PUSH
34717: LD_INT 23
34719: PUSH
34720: LD_INT 24
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: ST_TO_ADDR
34729: GO 35014
34731: LD_INT 43
34733: DOUBLE
34734: EQUAL
34735: IFTRUE 34739
34737: GO 34765
34739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34740: LD_ADDR_VAR 0 3
34744: PUSH
34745: LD_INT 21
34747: PUSH
34748: LD_INT 22
34750: PUSH
34751: LD_INT 23
34753: PUSH
34754: LD_INT 24
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: ST_TO_ADDR
34763: GO 35014
34765: LD_INT 44
34767: DOUBLE
34768: EQUAL
34769: IFTRUE 34773
34771: GO 34799
34773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34774: LD_ADDR_VAR 0 3
34778: PUSH
34779: LD_INT 21
34781: PUSH
34782: LD_INT 22
34784: PUSH
34785: LD_INT 23
34787: PUSH
34788: LD_INT 24
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: ST_TO_ADDR
34797: GO 35014
34799: LD_INT 45
34801: DOUBLE
34802: EQUAL
34803: IFTRUE 34807
34805: GO 34833
34807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34808: LD_ADDR_VAR 0 3
34812: PUSH
34813: LD_INT 21
34815: PUSH
34816: LD_INT 22
34818: PUSH
34819: LD_INT 23
34821: PUSH
34822: LD_INT 24
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: ST_TO_ADDR
34831: GO 35014
34833: LD_INT 49
34835: DOUBLE
34836: EQUAL
34837: IFTRUE 34841
34839: GO 34867
34841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34842: LD_ADDR_VAR 0 3
34846: PUSH
34847: LD_INT 21
34849: PUSH
34850: LD_INT 22
34852: PUSH
34853: LD_INT 23
34855: PUSH
34856: LD_INT 24
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: ST_TO_ADDR
34865: GO 35014
34867: LD_INT 51
34869: DOUBLE
34870: EQUAL
34871: IFTRUE 34875
34873: GO 34901
34875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34876: LD_ADDR_VAR 0 3
34880: PUSH
34881: LD_INT 21
34883: PUSH
34884: LD_INT 22
34886: PUSH
34887: LD_INT 23
34889: PUSH
34890: LD_INT 24
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: ST_TO_ADDR
34899: GO 35014
34901: LD_INT 52
34903: DOUBLE
34904: EQUAL
34905: IFTRUE 34909
34907: GO 34935
34909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34910: LD_ADDR_VAR 0 3
34914: PUSH
34915: LD_INT 21
34917: PUSH
34918: LD_INT 22
34920: PUSH
34921: LD_INT 23
34923: PUSH
34924: LD_INT 24
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: ST_TO_ADDR
34933: GO 35014
34935: LD_INT 53
34937: DOUBLE
34938: EQUAL
34939: IFTRUE 34943
34941: GO 34961
34943: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34944: LD_ADDR_VAR 0 3
34948: PUSH
34949: LD_INT 23
34951: PUSH
34952: LD_INT 24
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: ST_TO_ADDR
34959: GO 35014
34961: LD_INT 46
34963: DOUBLE
34964: EQUAL
34965: IFTRUE 34969
34967: GO 34987
34969: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34970: LD_ADDR_VAR 0 3
34974: PUSH
34975: LD_INT 23
34977: PUSH
34978: LD_INT 24
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: ST_TO_ADDR
34985: GO 35014
34987: LD_INT 47
34989: DOUBLE
34990: EQUAL
34991: IFTRUE 34995
34993: GO 35013
34995: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34996: LD_ADDR_VAR 0 3
35000: PUSH
35001: LD_INT 23
35003: PUSH
35004: LD_INT 24
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: ST_TO_ADDR
35011: GO 35014
35013: POP
// result := ( chassis in result ) ;
35014: LD_ADDR_VAR 0 3
35018: PUSH
35019: LD_VAR 0 1
35023: PUSH
35024: LD_VAR 0 3
35028: IN
35029: ST_TO_ADDR
// end ;
35030: LD_VAR 0 3
35034: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35035: LD_INT 0
35037: PPUSH
35038: PPUSH
35039: PPUSH
35040: PPUSH
35041: PPUSH
35042: PPUSH
35043: PPUSH
// result := array ;
35044: LD_ADDR_VAR 0 5
35048: PUSH
35049: LD_VAR 0 1
35053: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35054: LD_VAR 0 1
35058: NOT
35059: PUSH
35060: LD_VAR 0 2
35064: NOT
35065: OR
35066: PUSH
35067: LD_VAR 0 3
35071: NOT
35072: OR
35073: PUSH
35074: LD_VAR 0 2
35078: PUSH
35079: LD_VAR 0 1
35083: GREATER
35084: OR
35085: PUSH
35086: LD_VAR 0 3
35090: PUSH
35091: LD_VAR 0 1
35095: GREATER
35096: OR
35097: IFFALSE 35101
// exit ;
35099: GO 35397
// if direction then
35101: LD_VAR 0 4
35105: IFFALSE 35169
// begin d := 1 ;
35107: LD_ADDR_VAR 0 9
35111: PUSH
35112: LD_INT 1
35114: ST_TO_ADDR
// if i_from > i_to then
35115: LD_VAR 0 2
35119: PUSH
35120: LD_VAR 0 3
35124: GREATER
35125: IFFALSE 35151
// length := ( array - i_from ) + i_to else
35127: LD_ADDR_VAR 0 11
35131: PUSH
35132: LD_VAR 0 1
35136: PUSH
35137: LD_VAR 0 2
35141: MINUS
35142: PUSH
35143: LD_VAR 0 3
35147: PLUS
35148: ST_TO_ADDR
35149: GO 35167
// length := i_to - i_from ;
35151: LD_ADDR_VAR 0 11
35155: PUSH
35156: LD_VAR 0 3
35160: PUSH
35161: LD_VAR 0 2
35165: MINUS
35166: ST_TO_ADDR
// end else
35167: GO 35230
// begin d := - 1 ;
35169: LD_ADDR_VAR 0 9
35173: PUSH
35174: LD_INT 1
35176: NEG
35177: ST_TO_ADDR
// if i_from > i_to then
35178: LD_VAR 0 2
35182: PUSH
35183: LD_VAR 0 3
35187: GREATER
35188: IFFALSE 35208
// length := i_from - i_to else
35190: LD_ADDR_VAR 0 11
35194: PUSH
35195: LD_VAR 0 2
35199: PUSH
35200: LD_VAR 0 3
35204: MINUS
35205: ST_TO_ADDR
35206: GO 35230
// length := ( array - i_to ) + i_from ;
35208: LD_ADDR_VAR 0 11
35212: PUSH
35213: LD_VAR 0 1
35217: PUSH
35218: LD_VAR 0 3
35222: MINUS
35223: PUSH
35224: LD_VAR 0 2
35228: PLUS
35229: ST_TO_ADDR
// end ; if not length then
35230: LD_VAR 0 11
35234: NOT
35235: IFFALSE 35239
// exit ;
35237: GO 35397
// tmp := array ;
35239: LD_ADDR_VAR 0 10
35243: PUSH
35244: LD_VAR 0 1
35248: ST_TO_ADDR
// for i = 1 to length do
35249: LD_ADDR_VAR 0 6
35253: PUSH
35254: DOUBLE
35255: LD_INT 1
35257: DEC
35258: ST_TO_ADDR
35259: LD_VAR 0 11
35263: PUSH
35264: FOR_TO
35265: IFFALSE 35385
// begin for j = 1 to array do
35267: LD_ADDR_VAR 0 7
35271: PUSH
35272: DOUBLE
35273: LD_INT 1
35275: DEC
35276: ST_TO_ADDR
35277: LD_VAR 0 1
35281: PUSH
35282: FOR_TO
35283: IFFALSE 35371
// begin k := j + d ;
35285: LD_ADDR_VAR 0 8
35289: PUSH
35290: LD_VAR 0 7
35294: PUSH
35295: LD_VAR 0 9
35299: PLUS
35300: ST_TO_ADDR
// if k > array then
35301: LD_VAR 0 8
35305: PUSH
35306: LD_VAR 0 1
35310: GREATER
35311: IFFALSE 35321
// k := 1 ;
35313: LD_ADDR_VAR 0 8
35317: PUSH
35318: LD_INT 1
35320: ST_TO_ADDR
// if not k then
35321: LD_VAR 0 8
35325: NOT
35326: IFFALSE 35338
// k := array ;
35328: LD_ADDR_VAR 0 8
35332: PUSH
35333: LD_VAR 0 1
35337: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35338: LD_ADDR_VAR 0 10
35342: PUSH
35343: LD_VAR 0 10
35347: PPUSH
35348: LD_VAR 0 8
35352: PPUSH
35353: LD_VAR 0 1
35357: PUSH
35358: LD_VAR 0 7
35362: ARRAY
35363: PPUSH
35364: CALL_OW 1
35368: ST_TO_ADDR
// end ;
35369: GO 35282
35371: POP
35372: POP
// array := tmp ;
35373: LD_ADDR_VAR 0 1
35377: PUSH
35378: LD_VAR 0 10
35382: ST_TO_ADDR
// end ;
35383: GO 35264
35385: POP
35386: POP
// result := array ;
35387: LD_ADDR_VAR 0 5
35391: PUSH
35392: LD_VAR 0 1
35396: ST_TO_ADDR
// end ;
35397: LD_VAR 0 5
35401: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35402: LD_INT 0
35404: PPUSH
35405: PPUSH
// result := 0 ;
35406: LD_ADDR_VAR 0 3
35410: PUSH
35411: LD_INT 0
35413: ST_TO_ADDR
// if not array or not value in array then
35414: LD_VAR 0 1
35418: NOT
35419: PUSH
35420: LD_VAR 0 2
35424: PUSH
35425: LD_VAR 0 1
35429: IN
35430: NOT
35431: OR
35432: IFFALSE 35436
// exit ;
35434: GO 35490
// for i = 1 to array do
35436: LD_ADDR_VAR 0 4
35440: PUSH
35441: DOUBLE
35442: LD_INT 1
35444: DEC
35445: ST_TO_ADDR
35446: LD_VAR 0 1
35450: PUSH
35451: FOR_TO
35452: IFFALSE 35488
// if value = array [ i ] then
35454: LD_VAR 0 2
35458: PUSH
35459: LD_VAR 0 1
35463: PUSH
35464: LD_VAR 0 4
35468: ARRAY
35469: EQUAL
35470: IFFALSE 35486
// begin result := i ;
35472: LD_ADDR_VAR 0 3
35476: PUSH
35477: LD_VAR 0 4
35481: ST_TO_ADDR
// exit ;
35482: POP
35483: POP
35484: GO 35490
// end ;
35486: GO 35451
35488: POP
35489: POP
// end ;
35490: LD_VAR 0 3
35494: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35495: LD_INT 0
35497: PPUSH
// vc_chassis := chassis ;
35498: LD_ADDR_OWVAR 37
35502: PUSH
35503: LD_VAR 0 1
35507: ST_TO_ADDR
// vc_engine := engine ;
35508: LD_ADDR_OWVAR 39
35512: PUSH
35513: LD_VAR 0 2
35517: ST_TO_ADDR
// vc_control := control ;
35518: LD_ADDR_OWVAR 38
35522: PUSH
35523: LD_VAR 0 3
35527: ST_TO_ADDR
// vc_weapon := weapon ;
35528: LD_ADDR_OWVAR 40
35532: PUSH
35533: LD_VAR 0 4
35537: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35538: LD_ADDR_OWVAR 41
35542: PUSH
35543: LD_VAR 0 5
35547: ST_TO_ADDR
// end ;
35548: LD_VAR 0 6
35552: RET
// export function WantPlant ( unit ) ; var task ; begin
35553: LD_INT 0
35555: PPUSH
35556: PPUSH
// result := false ;
35557: LD_ADDR_VAR 0 2
35561: PUSH
35562: LD_INT 0
35564: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35565: LD_ADDR_VAR 0 3
35569: PUSH
35570: LD_VAR 0 1
35574: PPUSH
35575: CALL_OW 437
35579: ST_TO_ADDR
// if task then
35580: LD_VAR 0 3
35584: IFFALSE 35612
// if task [ 1 ] [ 1 ] = p then
35586: LD_VAR 0 3
35590: PUSH
35591: LD_INT 1
35593: ARRAY
35594: PUSH
35595: LD_INT 1
35597: ARRAY
35598: PUSH
35599: LD_STRING p
35601: EQUAL
35602: IFFALSE 35612
// result := true ;
35604: LD_ADDR_VAR 0 2
35608: PUSH
35609: LD_INT 1
35611: ST_TO_ADDR
// end ;
35612: LD_VAR 0 2
35616: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35617: LD_INT 0
35619: PPUSH
35620: PPUSH
35621: PPUSH
35622: PPUSH
// if pos < 1 then
35623: LD_VAR 0 2
35627: PUSH
35628: LD_INT 1
35630: LESS
35631: IFFALSE 35635
// exit ;
35633: GO 35938
// if pos = 1 then
35635: LD_VAR 0 2
35639: PUSH
35640: LD_INT 1
35642: EQUAL
35643: IFFALSE 35676
// result := Replace ( arr , pos [ 1 ] , value ) else
35645: LD_ADDR_VAR 0 4
35649: PUSH
35650: LD_VAR 0 1
35654: PPUSH
35655: LD_VAR 0 2
35659: PUSH
35660: LD_INT 1
35662: ARRAY
35663: PPUSH
35664: LD_VAR 0 3
35668: PPUSH
35669: CALL_OW 1
35673: ST_TO_ADDR
35674: GO 35938
// begin tmp := arr ;
35676: LD_ADDR_VAR 0 6
35680: PUSH
35681: LD_VAR 0 1
35685: ST_TO_ADDR
// s_arr := [ tmp ] ;
35686: LD_ADDR_VAR 0 7
35690: PUSH
35691: LD_VAR 0 6
35695: PUSH
35696: EMPTY
35697: LIST
35698: ST_TO_ADDR
// for i = 1 to pos - 1 do
35699: LD_ADDR_VAR 0 5
35703: PUSH
35704: DOUBLE
35705: LD_INT 1
35707: DEC
35708: ST_TO_ADDR
35709: LD_VAR 0 2
35713: PUSH
35714: LD_INT 1
35716: MINUS
35717: PUSH
35718: FOR_TO
35719: IFFALSE 35764
// begin tmp := tmp [ pos [ i ] ] ;
35721: LD_ADDR_VAR 0 6
35725: PUSH
35726: LD_VAR 0 6
35730: PUSH
35731: LD_VAR 0 2
35735: PUSH
35736: LD_VAR 0 5
35740: ARRAY
35741: ARRAY
35742: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35743: LD_ADDR_VAR 0 7
35747: PUSH
35748: LD_VAR 0 7
35752: PUSH
35753: LD_VAR 0 6
35757: PUSH
35758: EMPTY
35759: LIST
35760: ADD
35761: ST_TO_ADDR
// end ;
35762: GO 35718
35764: POP
35765: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35766: LD_ADDR_VAR 0 6
35770: PUSH
35771: LD_VAR 0 6
35775: PPUSH
35776: LD_VAR 0 2
35780: PUSH
35781: LD_VAR 0 2
35785: ARRAY
35786: PPUSH
35787: LD_VAR 0 3
35791: PPUSH
35792: CALL_OW 1
35796: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35797: LD_ADDR_VAR 0 7
35801: PUSH
35802: LD_VAR 0 7
35806: PPUSH
35807: LD_VAR 0 7
35811: PPUSH
35812: LD_VAR 0 6
35816: PPUSH
35817: CALL_OW 1
35821: ST_TO_ADDR
// for i = s_arr downto 2 do
35822: LD_ADDR_VAR 0 5
35826: PUSH
35827: DOUBLE
35828: LD_VAR 0 7
35832: INC
35833: ST_TO_ADDR
35834: LD_INT 2
35836: PUSH
35837: FOR_DOWNTO
35838: IFFALSE 35922
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35840: LD_ADDR_VAR 0 6
35844: PUSH
35845: LD_VAR 0 7
35849: PUSH
35850: LD_VAR 0 5
35854: PUSH
35855: LD_INT 1
35857: MINUS
35858: ARRAY
35859: PPUSH
35860: LD_VAR 0 2
35864: PUSH
35865: LD_VAR 0 5
35869: PUSH
35870: LD_INT 1
35872: MINUS
35873: ARRAY
35874: PPUSH
35875: LD_VAR 0 7
35879: PUSH
35880: LD_VAR 0 5
35884: ARRAY
35885: PPUSH
35886: CALL_OW 1
35890: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35891: LD_ADDR_VAR 0 7
35895: PUSH
35896: LD_VAR 0 7
35900: PPUSH
35901: LD_VAR 0 5
35905: PUSH
35906: LD_INT 1
35908: MINUS
35909: PPUSH
35910: LD_VAR 0 6
35914: PPUSH
35915: CALL_OW 1
35919: ST_TO_ADDR
// end ;
35920: GO 35837
35922: POP
35923: POP
// result := s_arr [ 1 ] ;
35924: LD_ADDR_VAR 0 4
35928: PUSH
35929: LD_VAR 0 7
35933: PUSH
35934: LD_INT 1
35936: ARRAY
35937: ST_TO_ADDR
// end ; end ;
35938: LD_VAR 0 4
35942: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35943: LD_INT 0
35945: PPUSH
35946: PPUSH
// if not list then
35947: LD_VAR 0 1
35951: NOT
35952: IFFALSE 35956
// exit ;
35954: GO 36047
// i := list [ pos1 ] ;
35956: LD_ADDR_VAR 0 5
35960: PUSH
35961: LD_VAR 0 1
35965: PUSH
35966: LD_VAR 0 2
35970: ARRAY
35971: ST_TO_ADDR
// if not i then
35972: LD_VAR 0 5
35976: NOT
35977: IFFALSE 35981
// exit ;
35979: GO 36047
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35981: LD_ADDR_VAR 0 1
35985: PUSH
35986: LD_VAR 0 1
35990: PPUSH
35991: LD_VAR 0 2
35995: PPUSH
35996: LD_VAR 0 1
36000: PUSH
36001: LD_VAR 0 3
36005: ARRAY
36006: PPUSH
36007: CALL_OW 1
36011: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36012: LD_ADDR_VAR 0 1
36016: PUSH
36017: LD_VAR 0 1
36021: PPUSH
36022: LD_VAR 0 3
36026: PPUSH
36027: LD_VAR 0 5
36031: PPUSH
36032: CALL_OW 1
36036: ST_TO_ADDR
// result := list ;
36037: LD_ADDR_VAR 0 4
36041: PUSH
36042: LD_VAR 0 1
36046: ST_TO_ADDR
// end ;
36047: LD_VAR 0 4
36051: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36052: LD_INT 0
36054: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36055: LD_ADDR_VAR 0 5
36059: PUSH
36060: LD_VAR 0 1
36064: PPUSH
36065: CALL_OW 250
36069: PPUSH
36070: LD_VAR 0 1
36074: PPUSH
36075: CALL_OW 251
36079: PPUSH
36080: LD_VAR 0 2
36084: PPUSH
36085: LD_VAR 0 3
36089: PPUSH
36090: LD_VAR 0 4
36094: PPUSH
36095: CALL 36105 0 5
36099: ST_TO_ADDR
// end ;
36100: LD_VAR 0 5
36104: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36105: LD_INT 0
36107: PPUSH
36108: PPUSH
36109: PPUSH
36110: PPUSH
// if not list then
36111: LD_VAR 0 3
36115: NOT
36116: IFFALSE 36120
// exit ;
36118: GO 36508
// result := [ ] ;
36120: LD_ADDR_VAR 0 6
36124: PUSH
36125: EMPTY
36126: ST_TO_ADDR
// for i in list do
36127: LD_ADDR_VAR 0 7
36131: PUSH
36132: LD_VAR 0 3
36136: PUSH
36137: FOR_IN
36138: IFFALSE 36340
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36140: LD_ADDR_VAR 0 9
36144: PUSH
36145: LD_VAR 0 7
36149: PPUSH
36150: LD_VAR 0 1
36154: PPUSH
36155: LD_VAR 0 2
36159: PPUSH
36160: CALL_OW 297
36164: ST_TO_ADDR
// if not result then
36165: LD_VAR 0 6
36169: NOT
36170: IFFALSE 36196
// result := [ [ i , tmp ] ] else
36172: LD_ADDR_VAR 0 6
36176: PUSH
36177: LD_VAR 0 7
36181: PUSH
36182: LD_VAR 0 9
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: EMPTY
36192: LIST
36193: ST_TO_ADDR
36194: GO 36338
// begin if result [ result ] [ 2 ] < tmp then
36196: LD_VAR 0 6
36200: PUSH
36201: LD_VAR 0 6
36205: ARRAY
36206: PUSH
36207: LD_INT 2
36209: ARRAY
36210: PUSH
36211: LD_VAR 0 9
36215: LESS
36216: IFFALSE 36258
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36218: LD_ADDR_VAR 0 6
36222: PUSH
36223: LD_VAR 0 6
36227: PPUSH
36228: LD_VAR 0 6
36232: PUSH
36233: LD_INT 1
36235: PLUS
36236: PPUSH
36237: LD_VAR 0 7
36241: PUSH
36242: LD_VAR 0 9
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PPUSH
36251: CALL_OW 2
36255: ST_TO_ADDR
36256: GO 36338
// for j = 1 to result do
36258: LD_ADDR_VAR 0 8
36262: PUSH
36263: DOUBLE
36264: LD_INT 1
36266: DEC
36267: ST_TO_ADDR
36268: LD_VAR 0 6
36272: PUSH
36273: FOR_TO
36274: IFFALSE 36336
// begin if tmp < result [ j ] [ 2 ] then
36276: LD_VAR 0 9
36280: PUSH
36281: LD_VAR 0 6
36285: PUSH
36286: LD_VAR 0 8
36290: ARRAY
36291: PUSH
36292: LD_INT 2
36294: ARRAY
36295: LESS
36296: IFFALSE 36334
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36298: LD_ADDR_VAR 0 6
36302: PUSH
36303: LD_VAR 0 6
36307: PPUSH
36308: LD_VAR 0 8
36312: PPUSH
36313: LD_VAR 0 7
36317: PUSH
36318: LD_VAR 0 9
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PPUSH
36327: CALL_OW 2
36331: ST_TO_ADDR
// break ;
36332: GO 36336
// end ; end ;
36334: GO 36273
36336: POP
36337: POP
// end ; end ;
36338: GO 36137
36340: POP
36341: POP
// if result and not asc then
36342: LD_VAR 0 6
36346: PUSH
36347: LD_VAR 0 4
36351: NOT
36352: AND
36353: IFFALSE 36428
// begin tmp := result ;
36355: LD_ADDR_VAR 0 9
36359: PUSH
36360: LD_VAR 0 6
36364: ST_TO_ADDR
// for i = tmp downto 1 do
36365: LD_ADDR_VAR 0 7
36369: PUSH
36370: DOUBLE
36371: LD_VAR 0 9
36375: INC
36376: ST_TO_ADDR
36377: LD_INT 1
36379: PUSH
36380: FOR_DOWNTO
36381: IFFALSE 36426
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36383: LD_ADDR_VAR 0 6
36387: PUSH
36388: LD_VAR 0 6
36392: PPUSH
36393: LD_VAR 0 9
36397: PUSH
36398: LD_VAR 0 7
36402: MINUS
36403: PUSH
36404: LD_INT 1
36406: PLUS
36407: PPUSH
36408: LD_VAR 0 9
36412: PUSH
36413: LD_VAR 0 7
36417: ARRAY
36418: PPUSH
36419: CALL_OW 1
36423: ST_TO_ADDR
36424: GO 36380
36426: POP
36427: POP
// end ; tmp := [ ] ;
36428: LD_ADDR_VAR 0 9
36432: PUSH
36433: EMPTY
36434: ST_TO_ADDR
// if mode then
36435: LD_VAR 0 5
36439: IFFALSE 36508
// begin for i = 1 to result do
36441: LD_ADDR_VAR 0 7
36445: PUSH
36446: DOUBLE
36447: LD_INT 1
36449: DEC
36450: ST_TO_ADDR
36451: LD_VAR 0 6
36455: PUSH
36456: FOR_TO
36457: IFFALSE 36496
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36459: LD_ADDR_VAR 0 9
36463: PUSH
36464: LD_VAR 0 9
36468: PPUSH
36469: LD_VAR 0 7
36473: PPUSH
36474: LD_VAR 0 6
36478: PUSH
36479: LD_VAR 0 7
36483: ARRAY
36484: PUSH
36485: LD_INT 1
36487: ARRAY
36488: PPUSH
36489: CALL_OW 1
36493: ST_TO_ADDR
36494: GO 36456
36496: POP
36497: POP
// result := tmp ;
36498: LD_ADDR_VAR 0 6
36502: PUSH
36503: LD_VAR 0 9
36507: ST_TO_ADDR
// end ; end ;
36508: LD_VAR 0 6
36512: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36513: LD_INT 0
36515: PPUSH
36516: PPUSH
36517: PPUSH
36518: PPUSH
36519: PPUSH
36520: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36521: LD_ADDR_VAR 0 5
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: LD_INT 0
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: EMPTY
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: ST_TO_ADDR
// if not x or not y then
36543: LD_VAR 0 2
36547: NOT
36548: PUSH
36549: LD_VAR 0 3
36553: NOT
36554: OR
36555: IFFALSE 36559
// exit ;
36557: GO 38209
// if not range then
36559: LD_VAR 0 4
36563: NOT
36564: IFFALSE 36574
// range := 10 ;
36566: LD_ADDR_VAR 0 4
36570: PUSH
36571: LD_INT 10
36573: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36574: LD_ADDR_VAR 0 8
36578: PUSH
36579: LD_INT 81
36581: PUSH
36582: LD_VAR 0 1
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 92
36593: PUSH
36594: LD_VAR 0 2
36598: PUSH
36599: LD_VAR 0 3
36603: PUSH
36604: LD_VAR 0 4
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 3
36617: PUSH
36618: LD_INT 21
36620: PUSH
36621: LD_INT 3
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: LIST
36636: PPUSH
36637: CALL_OW 69
36641: ST_TO_ADDR
// if not tmp then
36642: LD_VAR 0 8
36646: NOT
36647: IFFALSE 36651
// exit ;
36649: GO 38209
// for i in tmp do
36651: LD_ADDR_VAR 0 6
36655: PUSH
36656: LD_VAR 0 8
36660: PUSH
36661: FOR_IN
36662: IFFALSE 38184
// begin points := [ 0 , 0 , 0 ] ;
36664: LD_ADDR_VAR 0 9
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: LIST
36682: ST_TO_ADDR
// bpoints := 1 ;
36683: LD_ADDR_VAR 0 10
36687: PUSH
36688: LD_INT 1
36690: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36691: LD_VAR 0 6
36695: PPUSH
36696: CALL_OW 247
36700: PUSH
36701: LD_INT 1
36703: DOUBLE
36704: EQUAL
36705: IFTRUE 36709
36707: GO 37287
36709: POP
// begin if GetClass ( i ) = 1 then
36710: LD_VAR 0 6
36714: PPUSH
36715: CALL_OW 257
36719: PUSH
36720: LD_INT 1
36722: EQUAL
36723: IFFALSE 36744
// points := [ 10 , 5 , 3 ] ;
36725: LD_ADDR_VAR 0 9
36729: PUSH
36730: LD_INT 10
36732: PUSH
36733: LD_INT 5
36735: PUSH
36736: LD_INT 3
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: LIST
36743: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36744: LD_VAR 0 6
36748: PPUSH
36749: CALL_OW 257
36753: PUSH
36754: LD_INT 2
36756: PUSH
36757: LD_INT 3
36759: PUSH
36760: LD_INT 4
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: LIST
36767: IN
36768: IFFALSE 36789
// points := [ 3 , 2 , 1 ] ;
36770: LD_ADDR_VAR 0 9
36774: PUSH
36775: LD_INT 3
36777: PUSH
36778: LD_INT 2
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: LIST
36788: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36789: LD_VAR 0 6
36793: PPUSH
36794: CALL_OW 257
36798: PUSH
36799: LD_INT 5
36801: EQUAL
36802: IFFALSE 36823
// points := [ 130 , 5 , 2 ] ;
36804: LD_ADDR_VAR 0 9
36808: PUSH
36809: LD_INT 130
36811: PUSH
36812: LD_INT 5
36814: PUSH
36815: LD_INT 2
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: LIST
36822: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36823: LD_VAR 0 6
36827: PPUSH
36828: CALL_OW 257
36832: PUSH
36833: LD_INT 8
36835: EQUAL
36836: IFFALSE 36857
// points := [ 35 , 35 , 30 ] ;
36838: LD_ADDR_VAR 0 9
36842: PUSH
36843: LD_INT 35
36845: PUSH
36846: LD_INT 35
36848: PUSH
36849: LD_INT 30
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: LIST
36856: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36857: LD_VAR 0 6
36861: PPUSH
36862: CALL_OW 257
36866: PUSH
36867: LD_INT 9
36869: EQUAL
36870: IFFALSE 36891
// points := [ 20 , 55 , 40 ] ;
36872: LD_ADDR_VAR 0 9
36876: PUSH
36877: LD_INT 20
36879: PUSH
36880: LD_INT 55
36882: PUSH
36883: LD_INT 40
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36891: LD_VAR 0 6
36895: PPUSH
36896: CALL_OW 257
36900: PUSH
36901: LD_INT 12
36903: PUSH
36904: LD_INT 16
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: IN
36911: IFFALSE 36932
// points := [ 5 , 3 , 2 ] ;
36913: LD_ADDR_VAR 0 9
36917: PUSH
36918: LD_INT 5
36920: PUSH
36921: LD_INT 3
36923: PUSH
36924: LD_INT 2
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: LIST
36931: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36932: LD_VAR 0 6
36936: PPUSH
36937: CALL_OW 257
36941: PUSH
36942: LD_INT 17
36944: EQUAL
36945: IFFALSE 36966
// points := [ 100 , 50 , 75 ] ;
36947: LD_ADDR_VAR 0 9
36951: PUSH
36952: LD_INT 100
36954: PUSH
36955: LD_INT 50
36957: PUSH
36958: LD_INT 75
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: LIST
36965: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36966: LD_VAR 0 6
36970: PPUSH
36971: CALL_OW 257
36975: PUSH
36976: LD_INT 15
36978: EQUAL
36979: IFFALSE 37000
// points := [ 10 , 5 , 3 ] ;
36981: LD_ADDR_VAR 0 9
36985: PUSH
36986: LD_INT 10
36988: PUSH
36989: LD_INT 5
36991: PUSH
36992: LD_INT 3
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: LIST
36999: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37000: LD_VAR 0 6
37004: PPUSH
37005: CALL_OW 257
37009: PUSH
37010: LD_INT 14
37012: EQUAL
37013: IFFALSE 37034
// points := [ 10 , 0 , 0 ] ;
37015: LD_ADDR_VAR 0 9
37019: PUSH
37020: LD_INT 10
37022: PUSH
37023: LD_INT 0
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: LIST
37033: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37034: LD_VAR 0 6
37038: PPUSH
37039: CALL_OW 257
37043: PUSH
37044: LD_INT 11
37046: EQUAL
37047: IFFALSE 37068
// points := [ 30 , 10 , 5 ] ;
37049: LD_ADDR_VAR 0 9
37053: PUSH
37054: LD_INT 30
37056: PUSH
37057: LD_INT 10
37059: PUSH
37060: LD_INT 5
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: LIST
37067: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37068: LD_VAR 0 1
37072: PPUSH
37073: LD_INT 5
37075: PPUSH
37076: CALL_OW 321
37080: PUSH
37081: LD_INT 2
37083: EQUAL
37084: IFFALSE 37101
// bpoints := bpoints * 1.8 ;
37086: LD_ADDR_VAR 0 10
37090: PUSH
37091: LD_VAR 0 10
37095: PUSH
37096: LD_REAL  1.80000000000000E+0000
37099: MUL
37100: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37101: LD_VAR 0 6
37105: PPUSH
37106: CALL_OW 257
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: LD_INT 2
37116: PUSH
37117: LD_INT 3
37119: PUSH
37120: LD_INT 4
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: IN
37129: PUSH
37130: LD_VAR 0 1
37134: PPUSH
37135: LD_INT 51
37137: PPUSH
37138: CALL_OW 321
37142: PUSH
37143: LD_INT 2
37145: EQUAL
37146: AND
37147: IFFALSE 37164
// bpoints := bpoints * 1.2 ;
37149: LD_ADDR_VAR 0 10
37153: PUSH
37154: LD_VAR 0 10
37158: PUSH
37159: LD_REAL  1.20000000000000E+0000
37162: MUL
37163: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37164: LD_VAR 0 6
37168: PPUSH
37169: CALL_OW 257
37173: PUSH
37174: LD_INT 5
37176: PUSH
37177: LD_INT 7
37179: PUSH
37180: LD_INT 9
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: LIST
37187: IN
37188: PUSH
37189: LD_VAR 0 1
37193: PPUSH
37194: LD_INT 52
37196: PPUSH
37197: CALL_OW 321
37201: PUSH
37202: LD_INT 2
37204: EQUAL
37205: AND
37206: IFFALSE 37223
// bpoints := bpoints * 1.5 ;
37208: LD_ADDR_VAR 0 10
37212: PUSH
37213: LD_VAR 0 10
37217: PUSH
37218: LD_REAL  1.50000000000000E+0000
37221: MUL
37222: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37223: LD_VAR 0 1
37227: PPUSH
37228: LD_INT 66
37230: PPUSH
37231: CALL_OW 321
37235: PUSH
37236: LD_INT 2
37238: EQUAL
37239: IFFALSE 37256
// bpoints := bpoints * 1.1 ;
37241: LD_ADDR_VAR 0 10
37245: PUSH
37246: LD_VAR 0 10
37250: PUSH
37251: LD_REAL  1.10000000000000E+0000
37254: MUL
37255: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37256: LD_ADDR_VAR 0 10
37260: PUSH
37261: LD_VAR 0 10
37265: PUSH
37266: LD_VAR 0 6
37270: PPUSH
37271: LD_INT 1
37273: PPUSH
37274: CALL_OW 259
37278: PUSH
37279: LD_REAL  1.15000000000000E+0000
37282: MUL
37283: MUL
37284: ST_TO_ADDR
// end ; unit_vehicle :
37285: GO 38113
37287: LD_INT 2
37289: DOUBLE
37290: EQUAL
37291: IFTRUE 37295
37293: GO 38101
37295: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37296: LD_VAR 0 6
37300: PPUSH
37301: CALL_OW 264
37305: PUSH
37306: LD_INT 2
37308: PUSH
37309: LD_INT 42
37311: PUSH
37312: LD_INT 24
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: LIST
37319: IN
37320: IFFALSE 37341
// points := [ 25 , 5 , 3 ] ;
37322: LD_ADDR_VAR 0 9
37326: PUSH
37327: LD_INT 25
37329: PUSH
37330: LD_INT 5
37332: PUSH
37333: LD_INT 3
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: LIST
37340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37341: LD_VAR 0 6
37345: PPUSH
37346: CALL_OW 264
37350: PUSH
37351: LD_INT 4
37353: PUSH
37354: LD_INT 43
37356: PUSH
37357: LD_INT 25
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: LIST
37364: IN
37365: IFFALSE 37386
// points := [ 40 , 15 , 5 ] ;
37367: LD_ADDR_VAR 0 9
37371: PUSH
37372: LD_INT 40
37374: PUSH
37375: LD_INT 15
37377: PUSH
37378: LD_INT 5
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: LIST
37385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37386: LD_VAR 0 6
37390: PPUSH
37391: CALL_OW 264
37395: PUSH
37396: LD_INT 3
37398: PUSH
37399: LD_INT 23
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: IN
37406: IFFALSE 37427
// points := [ 7 , 25 , 8 ] ;
37408: LD_ADDR_VAR 0 9
37412: PUSH
37413: LD_INT 7
37415: PUSH
37416: LD_INT 25
37418: PUSH
37419: LD_INT 8
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: LIST
37426: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37427: LD_VAR 0 6
37431: PPUSH
37432: CALL_OW 264
37436: PUSH
37437: LD_INT 5
37439: PUSH
37440: LD_INT 27
37442: PUSH
37443: LD_INT 44
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: IN
37451: IFFALSE 37472
// points := [ 14 , 50 , 16 ] ;
37453: LD_ADDR_VAR 0 9
37457: PUSH
37458: LD_INT 14
37460: PUSH
37461: LD_INT 50
37463: PUSH
37464: LD_INT 16
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: LIST
37471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37472: LD_VAR 0 6
37476: PPUSH
37477: CALL_OW 264
37481: PUSH
37482: LD_INT 6
37484: PUSH
37485: LD_INT 46
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: IN
37492: IFFALSE 37513
// points := [ 32 , 120 , 70 ] ;
37494: LD_ADDR_VAR 0 9
37498: PUSH
37499: LD_INT 32
37501: PUSH
37502: LD_INT 120
37504: PUSH
37505: LD_INT 70
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: LIST
37512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37513: LD_VAR 0 6
37517: PPUSH
37518: CALL_OW 264
37522: PUSH
37523: LD_INT 7
37525: PUSH
37526: LD_INT 28
37528: PUSH
37529: LD_INT 45
37531: PUSH
37532: LD_INT 92
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: IN
37541: IFFALSE 37562
// points := [ 35 , 20 , 45 ] ;
37543: LD_ADDR_VAR 0 9
37547: PUSH
37548: LD_INT 35
37550: PUSH
37551: LD_INT 20
37553: PUSH
37554: LD_INT 45
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: LIST
37561: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37562: LD_VAR 0 6
37566: PPUSH
37567: CALL_OW 264
37571: PUSH
37572: LD_INT 47
37574: PUSH
37575: EMPTY
37576: LIST
37577: IN
37578: IFFALSE 37599
// points := [ 67 , 45 , 75 ] ;
37580: LD_ADDR_VAR 0 9
37584: PUSH
37585: LD_INT 67
37587: PUSH
37588: LD_INT 45
37590: PUSH
37591: LD_INT 75
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: LIST
37598: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37599: LD_VAR 0 6
37603: PPUSH
37604: CALL_OW 264
37608: PUSH
37609: LD_INT 26
37611: PUSH
37612: EMPTY
37613: LIST
37614: IN
37615: IFFALSE 37636
// points := [ 120 , 30 , 80 ] ;
37617: LD_ADDR_VAR 0 9
37621: PUSH
37622: LD_INT 120
37624: PUSH
37625: LD_INT 30
37627: PUSH
37628: LD_INT 80
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: LIST
37635: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37636: LD_VAR 0 6
37640: PPUSH
37641: CALL_OW 264
37645: PUSH
37646: LD_INT 22
37648: PUSH
37649: EMPTY
37650: LIST
37651: IN
37652: IFFALSE 37673
// points := [ 40 , 1 , 1 ] ;
37654: LD_ADDR_VAR 0 9
37658: PUSH
37659: LD_INT 40
37661: PUSH
37662: LD_INT 1
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: LIST
37672: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37673: LD_VAR 0 6
37677: PPUSH
37678: CALL_OW 264
37682: PUSH
37683: LD_INT 29
37685: PUSH
37686: EMPTY
37687: LIST
37688: IN
37689: IFFALSE 37710
// points := [ 70 , 200 , 400 ] ;
37691: LD_ADDR_VAR 0 9
37695: PUSH
37696: LD_INT 70
37698: PUSH
37699: LD_INT 200
37701: PUSH
37702: LD_INT 400
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37710: LD_VAR 0 6
37714: PPUSH
37715: CALL_OW 264
37719: PUSH
37720: LD_INT 14
37722: PUSH
37723: LD_INT 53
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: IN
37730: IFFALSE 37751
// points := [ 40 , 10 , 20 ] ;
37732: LD_ADDR_VAR 0 9
37736: PUSH
37737: LD_INT 40
37739: PUSH
37740: LD_INT 10
37742: PUSH
37743: LD_INT 20
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: LIST
37750: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37751: LD_VAR 0 6
37755: PPUSH
37756: CALL_OW 264
37760: PUSH
37761: LD_INT 9
37763: PUSH
37764: EMPTY
37765: LIST
37766: IN
37767: IFFALSE 37788
// points := [ 5 , 70 , 20 ] ;
37769: LD_ADDR_VAR 0 9
37773: PUSH
37774: LD_INT 5
37776: PUSH
37777: LD_INT 70
37779: PUSH
37780: LD_INT 20
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: LIST
37787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37788: LD_VAR 0 6
37792: PPUSH
37793: CALL_OW 264
37797: PUSH
37798: LD_INT 10
37800: PUSH
37801: EMPTY
37802: LIST
37803: IN
37804: IFFALSE 37825
// points := [ 35 , 110 , 70 ] ;
37806: LD_ADDR_VAR 0 9
37810: PUSH
37811: LD_INT 35
37813: PUSH
37814: LD_INT 110
37816: PUSH
37817: LD_INT 70
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: LIST
37824: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37825: LD_VAR 0 6
37829: PPUSH
37830: CALL_OW 265
37834: PUSH
37835: LD_INT 25
37837: EQUAL
37838: IFFALSE 37859
// points := [ 80 , 65 , 100 ] ;
37840: LD_ADDR_VAR 0 9
37844: PUSH
37845: LD_INT 80
37847: PUSH
37848: LD_INT 65
37850: PUSH
37851: LD_INT 100
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: LIST
37858: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37859: LD_VAR 0 6
37863: PPUSH
37864: CALL_OW 263
37868: PUSH
37869: LD_INT 1
37871: EQUAL
37872: IFFALSE 37907
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37874: LD_ADDR_VAR 0 10
37878: PUSH
37879: LD_VAR 0 10
37883: PUSH
37884: LD_VAR 0 6
37888: PPUSH
37889: CALL_OW 311
37893: PPUSH
37894: LD_INT 3
37896: PPUSH
37897: CALL_OW 259
37901: PUSH
37902: LD_INT 4
37904: MUL
37905: MUL
37906: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37907: LD_VAR 0 6
37911: PPUSH
37912: CALL_OW 263
37916: PUSH
37917: LD_INT 2
37919: EQUAL
37920: IFFALSE 37971
// begin j := IsControledBy ( i ) ;
37922: LD_ADDR_VAR 0 7
37926: PUSH
37927: LD_VAR 0 6
37931: PPUSH
37932: CALL_OW 312
37936: ST_TO_ADDR
// if j then
37937: LD_VAR 0 7
37941: IFFALSE 37971
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37943: LD_ADDR_VAR 0 10
37947: PUSH
37948: LD_VAR 0 10
37952: PUSH
37953: LD_VAR 0 7
37957: PPUSH
37958: LD_INT 3
37960: PPUSH
37961: CALL_OW 259
37965: PUSH
37966: LD_INT 3
37968: MUL
37969: MUL
37970: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37971: LD_VAR 0 6
37975: PPUSH
37976: CALL_OW 264
37980: PUSH
37981: LD_INT 5
37983: PUSH
37984: LD_INT 6
37986: PUSH
37987: LD_INT 46
37989: PUSH
37990: LD_INT 44
37992: PUSH
37993: LD_INT 47
37995: PUSH
37996: LD_INT 45
37998: PUSH
37999: LD_INT 28
38001: PUSH
38002: LD_INT 7
38004: PUSH
38005: LD_INT 27
38007: PUSH
38008: LD_INT 29
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: IN
38023: PUSH
38024: LD_VAR 0 1
38028: PPUSH
38029: LD_INT 52
38031: PPUSH
38032: CALL_OW 321
38036: PUSH
38037: LD_INT 2
38039: EQUAL
38040: AND
38041: IFFALSE 38058
// bpoints := bpoints * 1.2 ;
38043: LD_ADDR_VAR 0 10
38047: PUSH
38048: LD_VAR 0 10
38052: PUSH
38053: LD_REAL  1.20000000000000E+0000
38056: MUL
38057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38058: LD_VAR 0 6
38062: PPUSH
38063: CALL_OW 264
38067: PUSH
38068: LD_INT 6
38070: PUSH
38071: LD_INT 46
38073: PUSH
38074: LD_INT 47
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: LIST
38081: IN
38082: IFFALSE 38099
// bpoints := bpoints * 1.2 ;
38084: LD_ADDR_VAR 0 10
38088: PUSH
38089: LD_VAR 0 10
38093: PUSH
38094: LD_REAL  1.20000000000000E+0000
38097: MUL
38098: ST_TO_ADDR
// end ; unit_building :
38099: GO 38113
38101: LD_INT 3
38103: DOUBLE
38104: EQUAL
38105: IFTRUE 38109
38107: GO 38112
38109: POP
// ; end ;
38110: GO 38113
38112: POP
// for j = 1 to 3 do
38113: LD_ADDR_VAR 0 7
38117: PUSH
38118: DOUBLE
38119: LD_INT 1
38121: DEC
38122: ST_TO_ADDR
38123: LD_INT 3
38125: PUSH
38126: FOR_TO
38127: IFFALSE 38180
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38129: LD_ADDR_VAR 0 5
38133: PUSH
38134: LD_VAR 0 5
38138: PPUSH
38139: LD_VAR 0 7
38143: PPUSH
38144: LD_VAR 0 5
38148: PUSH
38149: LD_VAR 0 7
38153: ARRAY
38154: PUSH
38155: LD_VAR 0 9
38159: PUSH
38160: LD_VAR 0 7
38164: ARRAY
38165: PUSH
38166: LD_VAR 0 10
38170: MUL
38171: PLUS
38172: PPUSH
38173: CALL_OW 1
38177: ST_TO_ADDR
38178: GO 38126
38180: POP
38181: POP
// end ;
38182: GO 36661
38184: POP
38185: POP
// result := Replace ( result , 4 , tmp ) ;
38186: LD_ADDR_VAR 0 5
38190: PUSH
38191: LD_VAR 0 5
38195: PPUSH
38196: LD_INT 4
38198: PPUSH
38199: LD_VAR 0 8
38203: PPUSH
38204: CALL_OW 1
38208: ST_TO_ADDR
// end ;
38209: LD_VAR 0 5
38213: RET
// export function DangerAtRange ( unit , range ) ; begin
38214: LD_INT 0
38216: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38217: LD_ADDR_VAR 0 3
38221: PUSH
38222: LD_VAR 0 1
38226: PPUSH
38227: CALL_OW 255
38231: PPUSH
38232: LD_VAR 0 1
38236: PPUSH
38237: CALL_OW 250
38241: PPUSH
38242: LD_VAR 0 1
38246: PPUSH
38247: CALL_OW 251
38251: PPUSH
38252: LD_VAR 0 2
38256: PPUSH
38257: CALL 36513 0 4
38261: ST_TO_ADDR
// end ;
38262: LD_VAR 0 3
38266: RET
// export function DangerInArea ( side , area ) ; begin
38267: LD_INT 0
38269: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38270: LD_ADDR_VAR 0 3
38274: PUSH
38275: LD_VAR 0 2
38279: PPUSH
38280: LD_INT 81
38282: PUSH
38283: LD_VAR 0 1
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PPUSH
38292: CALL_OW 70
38296: ST_TO_ADDR
// end ;
38297: LD_VAR 0 3
38301: RET
// export function IsExtension ( b ) ; begin
38302: LD_INT 0
38304: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38305: LD_ADDR_VAR 0 2
38309: PUSH
38310: LD_VAR 0 1
38314: PUSH
38315: LD_INT 23
38317: PUSH
38318: LD_INT 20
38320: PUSH
38321: LD_INT 22
38323: PUSH
38324: LD_INT 17
38326: PUSH
38327: LD_INT 24
38329: PUSH
38330: LD_INT 21
38332: PUSH
38333: LD_INT 19
38335: PUSH
38336: LD_INT 16
38338: PUSH
38339: LD_INT 25
38341: PUSH
38342: LD_INT 18
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: IN
38357: ST_TO_ADDR
// end ;
38358: LD_VAR 0 2
38362: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38363: LD_INT 0
38365: PPUSH
38366: PPUSH
38367: PPUSH
// result := [ ] ;
38368: LD_ADDR_VAR 0 4
38372: PUSH
38373: EMPTY
38374: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38375: LD_ADDR_VAR 0 5
38379: PUSH
38380: LD_VAR 0 2
38384: PPUSH
38385: LD_INT 21
38387: PUSH
38388: LD_INT 3
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PPUSH
38395: CALL_OW 70
38399: ST_TO_ADDR
// if not tmp then
38400: LD_VAR 0 5
38404: NOT
38405: IFFALSE 38409
// exit ;
38407: GO 38473
// if checkLink then
38409: LD_VAR 0 3
38413: IFFALSE 38463
// begin for i in tmp do
38415: LD_ADDR_VAR 0 6
38419: PUSH
38420: LD_VAR 0 5
38424: PUSH
38425: FOR_IN
38426: IFFALSE 38461
// if GetBase ( i ) <> base then
38428: LD_VAR 0 6
38432: PPUSH
38433: CALL_OW 274
38437: PUSH
38438: LD_VAR 0 1
38442: NONEQUAL
38443: IFFALSE 38459
// ComLinkToBase ( base , i ) ;
38445: LD_VAR 0 1
38449: PPUSH
38450: LD_VAR 0 6
38454: PPUSH
38455: CALL_OW 169
38459: GO 38425
38461: POP
38462: POP
// end ; result := tmp ;
38463: LD_ADDR_VAR 0 4
38467: PUSH
38468: LD_VAR 0 5
38472: ST_TO_ADDR
// end ;
38473: LD_VAR 0 4
38477: RET
// export function ComComplete ( units , b ) ; var i ; begin
38478: LD_INT 0
38480: PPUSH
38481: PPUSH
// if not units then
38482: LD_VAR 0 1
38486: NOT
38487: IFFALSE 38491
// exit ;
38489: GO 38581
// for i in units do
38491: LD_ADDR_VAR 0 4
38495: PUSH
38496: LD_VAR 0 1
38500: PUSH
38501: FOR_IN
38502: IFFALSE 38579
// if BuildingStatus ( b ) = bs_build then
38504: LD_VAR 0 2
38508: PPUSH
38509: CALL_OW 461
38513: PUSH
38514: LD_INT 1
38516: EQUAL
38517: IFFALSE 38577
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38519: LD_VAR 0 4
38523: PPUSH
38524: LD_STRING h
38526: PUSH
38527: LD_VAR 0 2
38531: PPUSH
38532: CALL_OW 250
38536: PUSH
38537: LD_VAR 0 2
38541: PPUSH
38542: CALL_OW 251
38546: PUSH
38547: LD_VAR 0 2
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: LD_INT 0
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: PUSH
38570: EMPTY
38571: LIST
38572: PPUSH
38573: CALL_OW 446
38577: GO 38501
38579: POP
38580: POP
// end ;
38581: LD_VAR 0 3
38585: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38586: LD_INT 0
38588: PPUSH
38589: PPUSH
38590: PPUSH
38591: PPUSH
38592: PPUSH
38593: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38594: LD_VAR 0 1
38598: NOT
38599: PUSH
38600: LD_VAR 0 1
38604: PPUSH
38605: CALL_OW 263
38609: PUSH
38610: LD_INT 2
38612: NONEQUAL
38613: OR
38614: IFFALSE 38618
// exit ;
38616: GO 38934
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38618: LD_ADDR_VAR 0 6
38622: PUSH
38623: LD_INT 22
38625: PUSH
38626: LD_VAR 0 1
38630: PPUSH
38631: CALL_OW 255
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 2
38642: PUSH
38643: LD_INT 30
38645: PUSH
38646: LD_INT 36
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 34
38655: PUSH
38656: LD_INT 31
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: LIST
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PPUSH
38672: CALL_OW 69
38676: ST_TO_ADDR
// if not tmp then
38677: LD_VAR 0 6
38681: NOT
38682: IFFALSE 38686
// exit ;
38684: GO 38934
// result := [ ] ;
38686: LD_ADDR_VAR 0 2
38690: PUSH
38691: EMPTY
38692: ST_TO_ADDR
// for i in tmp do
38693: LD_ADDR_VAR 0 3
38697: PUSH
38698: LD_VAR 0 6
38702: PUSH
38703: FOR_IN
38704: IFFALSE 38775
// begin t := UnitsInside ( i ) ;
38706: LD_ADDR_VAR 0 4
38710: PUSH
38711: LD_VAR 0 3
38715: PPUSH
38716: CALL_OW 313
38720: ST_TO_ADDR
// if t then
38721: LD_VAR 0 4
38725: IFFALSE 38773
// for j in t do
38727: LD_ADDR_VAR 0 7
38731: PUSH
38732: LD_VAR 0 4
38736: PUSH
38737: FOR_IN
38738: IFFALSE 38771
// result := Replace ( result , result + 1 , j ) ;
38740: LD_ADDR_VAR 0 2
38744: PUSH
38745: LD_VAR 0 2
38749: PPUSH
38750: LD_VAR 0 2
38754: PUSH
38755: LD_INT 1
38757: PLUS
38758: PPUSH
38759: LD_VAR 0 7
38763: PPUSH
38764: CALL_OW 1
38768: ST_TO_ADDR
38769: GO 38737
38771: POP
38772: POP
// end ;
38773: GO 38703
38775: POP
38776: POP
// if not result then
38777: LD_VAR 0 2
38781: NOT
38782: IFFALSE 38786
// exit ;
38784: GO 38934
// mech := result [ 1 ] ;
38786: LD_ADDR_VAR 0 5
38790: PUSH
38791: LD_VAR 0 2
38795: PUSH
38796: LD_INT 1
38798: ARRAY
38799: ST_TO_ADDR
// if result > 1 then
38800: LD_VAR 0 2
38804: PUSH
38805: LD_INT 1
38807: GREATER
38808: IFFALSE 38920
// begin for i = 2 to result do
38810: LD_ADDR_VAR 0 3
38814: PUSH
38815: DOUBLE
38816: LD_INT 2
38818: DEC
38819: ST_TO_ADDR
38820: LD_VAR 0 2
38824: PUSH
38825: FOR_TO
38826: IFFALSE 38918
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38828: LD_ADDR_VAR 0 4
38832: PUSH
38833: LD_VAR 0 2
38837: PUSH
38838: LD_VAR 0 3
38842: ARRAY
38843: PPUSH
38844: LD_INT 3
38846: PPUSH
38847: CALL_OW 259
38851: PUSH
38852: LD_VAR 0 2
38856: PUSH
38857: LD_VAR 0 3
38861: ARRAY
38862: PPUSH
38863: CALL_OW 432
38867: MINUS
38868: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38869: LD_VAR 0 4
38873: PUSH
38874: LD_VAR 0 5
38878: PPUSH
38879: LD_INT 3
38881: PPUSH
38882: CALL_OW 259
38886: PUSH
38887: LD_VAR 0 5
38891: PPUSH
38892: CALL_OW 432
38896: MINUS
38897: GREATEREQUAL
38898: IFFALSE 38916
// mech := result [ i ] ;
38900: LD_ADDR_VAR 0 5
38904: PUSH
38905: LD_VAR 0 2
38909: PUSH
38910: LD_VAR 0 3
38914: ARRAY
38915: ST_TO_ADDR
// end ;
38916: GO 38825
38918: POP
38919: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38920: LD_VAR 0 1
38924: PPUSH
38925: LD_VAR 0 5
38929: PPUSH
38930: CALL_OW 135
// end ;
38934: LD_VAR 0 2
38938: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38939: LD_INT 0
38941: PPUSH
38942: PPUSH
38943: PPUSH
38944: PPUSH
38945: PPUSH
38946: PPUSH
38947: PPUSH
38948: PPUSH
38949: PPUSH
38950: PPUSH
38951: PPUSH
38952: PPUSH
38953: PPUSH
// result := [ ] ;
38954: LD_ADDR_VAR 0 7
38958: PUSH
38959: EMPTY
38960: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38961: LD_VAR 0 1
38965: PPUSH
38966: CALL_OW 266
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: LD_INT 1
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: IN
38981: NOT
38982: IFFALSE 38986
// exit ;
38984: GO 40620
// if name then
38986: LD_VAR 0 3
38990: IFFALSE 39006
// SetBName ( base_dep , name ) ;
38992: LD_VAR 0 1
38996: PPUSH
38997: LD_VAR 0 3
39001: PPUSH
39002: CALL_OW 500
// base := GetBase ( base_dep ) ;
39006: LD_ADDR_VAR 0 15
39010: PUSH
39011: LD_VAR 0 1
39015: PPUSH
39016: CALL_OW 274
39020: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39021: LD_ADDR_VAR 0 16
39025: PUSH
39026: LD_VAR 0 1
39030: PPUSH
39031: CALL_OW 255
39035: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39036: LD_ADDR_VAR 0 17
39040: PUSH
39041: LD_VAR 0 1
39045: PPUSH
39046: CALL_OW 248
39050: ST_TO_ADDR
// if sources then
39051: LD_VAR 0 5
39055: IFFALSE 39102
// for i = 1 to 3 do
39057: LD_ADDR_VAR 0 8
39061: PUSH
39062: DOUBLE
39063: LD_INT 1
39065: DEC
39066: ST_TO_ADDR
39067: LD_INT 3
39069: PUSH
39070: FOR_TO
39071: IFFALSE 39100
// AddResourceType ( base , i , sources [ i ] ) ;
39073: LD_VAR 0 15
39077: PPUSH
39078: LD_VAR 0 8
39082: PPUSH
39083: LD_VAR 0 5
39087: PUSH
39088: LD_VAR 0 8
39092: ARRAY
39093: PPUSH
39094: CALL_OW 276
39098: GO 39070
39100: POP
39101: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39102: LD_ADDR_VAR 0 18
39106: PUSH
39107: LD_VAR 0 15
39111: PPUSH
39112: LD_VAR 0 2
39116: PPUSH
39117: LD_INT 1
39119: PPUSH
39120: CALL 38363 0 3
39124: ST_TO_ADDR
// InitHc ;
39125: CALL_OW 19
// InitUc ;
39129: CALL_OW 18
// uc_side := side ;
39133: LD_ADDR_OWVAR 20
39137: PUSH
39138: LD_VAR 0 16
39142: ST_TO_ADDR
// uc_nation := nation ;
39143: LD_ADDR_OWVAR 21
39147: PUSH
39148: LD_VAR 0 17
39152: ST_TO_ADDR
// if buildings then
39153: LD_VAR 0 18
39157: IFFALSE 40479
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39159: LD_ADDR_VAR 0 19
39163: PUSH
39164: LD_VAR 0 18
39168: PPUSH
39169: LD_INT 2
39171: PUSH
39172: LD_INT 30
39174: PUSH
39175: LD_INT 29
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 30
39184: PUSH
39185: LD_INT 30
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: PPUSH
39197: CALL_OW 72
39201: ST_TO_ADDR
// if tmp then
39202: LD_VAR 0 19
39206: IFFALSE 39254
// for i in tmp do
39208: LD_ADDR_VAR 0 8
39212: PUSH
39213: LD_VAR 0 19
39217: PUSH
39218: FOR_IN
39219: IFFALSE 39252
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39221: LD_VAR 0 8
39225: PPUSH
39226: CALL_OW 250
39230: PPUSH
39231: LD_VAR 0 8
39235: PPUSH
39236: CALL_OW 251
39240: PPUSH
39241: LD_VAR 0 16
39245: PPUSH
39246: CALL_OW 441
39250: GO 39218
39252: POP
39253: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39254: LD_VAR 0 18
39258: PPUSH
39259: LD_INT 2
39261: PUSH
39262: LD_INT 30
39264: PUSH
39265: LD_INT 32
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 30
39274: PUSH
39275: LD_INT 33
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: LIST
39286: PPUSH
39287: CALL_OW 72
39291: IFFALSE 39379
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39293: LD_ADDR_VAR 0 8
39297: PUSH
39298: LD_VAR 0 18
39302: PPUSH
39303: LD_INT 2
39305: PUSH
39306: LD_INT 30
39308: PUSH
39309: LD_INT 32
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 30
39318: PUSH
39319: LD_INT 33
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: PPUSH
39331: CALL_OW 72
39335: PUSH
39336: FOR_IN
39337: IFFALSE 39377
// begin if not GetBWeapon ( i ) then
39339: LD_VAR 0 8
39343: PPUSH
39344: CALL_OW 269
39348: NOT
39349: IFFALSE 39375
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39351: LD_VAR 0 8
39355: PPUSH
39356: LD_VAR 0 8
39360: PPUSH
39361: LD_VAR 0 2
39365: PPUSH
39366: CALL 40625 0 2
39370: PPUSH
39371: CALL_OW 431
// end ;
39375: GO 39336
39377: POP
39378: POP
// end ; for i = 1 to personel do
39379: LD_ADDR_VAR 0 8
39383: PUSH
39384: DOUBLE
39385: LD_INT 1
39387: DEC
39388: ST_TO_ADDR
39389: LD_VAR 0 6
39393: PUSH
39394: FOR_TO
39395: IFFALSE 40459
// begin if i > 4 then
39397: LD_VAR 0 8
39401: PUSH
39402: LD_INT 4
39404: GREATER
39405: IFFALSE 39409
// break ;
39407: GO 40459
// case i of 1 :
39409: LD_VAR 0 8
39413: PUSH
39414: LD_INT 1
39416: DOUBLE
39417: EQUAL
39418: IFTRUE 39422
39420: GO 39502
39422: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39423: LD_ADDR_VAR 0 12
39427: PUSH
39428: LD_VAR 0 18
39432: PPUSH
39433: LD_INT 22
39435: PUSH
39436: LD_VAR 0 16
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 58
39447: PUSH
39448: EMPTY
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: LD_INT 30
39456: PUSH
39457: LD_INT 32
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 30
39466: PUSH
39467: LD_INT 4
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 30
39476: PUSH
39477: LD_INT 5
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: PPUSH
39495: CALL_OW 72
39499: ST_TO_ADDR
39500: GO 39724
39502: LD_INT 2
39504: DOUBLE
39505: EQUAL
39506: IFTRUE 39510
39508: GO 39572
39510: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39511: LD_ADDR_VAR 0 12
39515: PUSH
39516: LD_VAR 0 18
39520: PPUSH
39521: LD_INT 22
39523: PUSH
39524: LD_VAR 0 16
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: LD_INT 30
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 30
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: LIST
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PPUSH
39565: CALL_OW 72
39569: ST_TO_ADDR
39570: GO 39724
39572: LD_INT 3
39574: DOUBLE
39575: EQUAL
39576: IFTRUE 39580
39578: GO 39642
39580: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39581: LD_ADDR_VAR 0 12
39585: PUSH
39586: LD_VAR 0 18
39590: PPUSH
39591: LD_INT 22
39593: PUSH
39594: LD_VAR 0 16
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 2
39605: PUSH
39606: LD_INT 30
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 30
39618: PUSH
39619: LD_INT 3
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: LIST
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PPUSH
39635: CALL_OW 72
39639: ST_TO_ADDR
39640: GO 39724
39642: LD_INT 4
39644: DOUBLE
39645: EQUAL
39646: IFTRUE 39650
39648: GO 39723
39650: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39651: LD_ADDR_VAR 0 12
39655: PUSH
39656: LD_VAR 0 18
39660: PPUSH
39661: LD_INT 22
39663: PUSH
39664: LD_VAR 0 16
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 2
39675: PUSH
39676: LD_INT 30
39678: PUSH
39679: LD_INT 6
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 30
39688: PUSH
39689: LD_INT 7
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 30
39698: PUSH
39699: LD_INT 8
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PPUSH
39716: CALL_OW 72
39720: ST_TO_ADDR
39721: GO 39724
39723: POP
// if i = 1 then
39724: LD_VAR 0 8
39728: PUSH
39729: LD_INT 1
39731: EQUAL
39732: IFFALSE 39843
// begin tmp := [ ] ;
39734: LD_ADDR_VAR 0 19
39738: PUSH
39739: EMPTY
39740: ST_TO_ADDR
// for j in f do
39741: LD_ADDR_VAR 0 9
39745: PUSH
39746: LD_VAR 0 12
39750: PUSH
39751: FOR_IN
39752: IFFALSE 39825
// if GetBType ( j ) = b_bunker then
39754: LD_VAR 0 9
39758: PPUSH
39759: CALL_OW 266
39763: PUSH
39764: LD_INT 32
39766: EQUAL
39767: IFFALSE 39794
// tmp := Insert ( tmp , 1 , j ) else
39769: LD_ADDR_VAR 0 19
39773: PUSH
39774: LD_VAR 0 19
39778: PPUSH
39779: LD_INT 1
39781: PPUSH
39782: LD_VAR 0 9
39786: PPUSH
39787: CALL_OW 2
39791: ST_TO_ADDR
39792: GO 39823
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39794: LD_ADDR_VAR 0 19
39798: PUSH
39799: LD_VAR 0 19
39803: PPUSH
39804: LD_VAR 0 19
39808: PUSH
39809: LD_INT 1
39811: PLUS
39812: PPUSH
39813: LD_VAR 0 9
39817: PPUSH
39818: CALL_OW 2
39822: ST_TO_ADDR
39823: GO 39751
39825: POP
39826: POP
// if tmp then
39827: LD_VAR 0 19
39831: IFFALSE 39843
// f := tmp ;
39833: LD_ADDR_VAR 0 12
39837: PUSH
39838: LD_VAR 0 19
39842: ST_TO_ADDR
// end ; x := personel [ i ] ;
39843: LD_ADDR_VAR 0 13
39847: PUSH
39848: LD_VAR 0 6
39852: PUSH
39853: LD_VAR 0 8
39857: ARRAY
39858: ST_TO_ADDR
// if x = - 1 then
39859: LD_VAR 0 13
39863: PUSH
39864: LD_INT 1
39866: NEG
39867: EQUAL
39868: IFFALSE 40077
// begin for j in f do
39870: LD_ADDR_VAR 0 9
39874: PUSH
39875: LD_VAR 0 12
39879: PUSH
39880: FOR_IN
39881: IFFALSE 40073
// repeat InitHc ;
39883: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39887: LD_VAR 0 9
39891: PPUSH
39892: CALL_OW 266
39896: PUSH
39897: LD_INT 5
39899: EQUAL
39900: IFFALSE 39970
// begin if UnitsInside ( j ) < 3 then
39902: LD_VAR 0 9
39906: PPUSH
39907: CALL_OW 313
39911: PUSH
39912: LD_INT 3
39914: LESS
39915: IFFALSE 39951
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39917: LD_INT 0
39919: PPUSH
39920: LD_INT 5
39922: PUSH
39923: LD_INT 8
39925: PUSH
39926: LD_INT 9
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: LIST
39933: PUSH
39934: LD_VAR 0 17
39938: ARRAY
39939: PPUSH
39940: LD_VAR 0 4
39944: PPUSH
39945: CALL_OW 380
39949: GO 39968
// PrepareHuman ( false , i , skill ) ;
39951: LD_INT 0
39953: PPUSH
39954: LD_VAR 0 8
39958: PPUSH
39959: LD_VAR 0 4
39963: PPUSH
39964: CALL_OW 380
// end else
39968: GO 39987
// PrepareHuman ( false , i , skill ) ;
39970: LD_INT 0
39972: PPUSH
39973: LD_VAR 0 8
39977: PPUSH
39978: LD_VAR 0 4
39982: PPUSH
39983: CALL_OW 380
// un := CreateHuman ;
39987: LD_ADDR_VAR 0 14
39991: PUSH
39992: CALL_OW 44
39996: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39997: LD_ADDR_VAR 0 7
40001: PUSH
40002: LD_VAR 0 7
40006: PPUSH
40007: LD_INT 1
40009: PPUSH
40010: LD_VAR 0 14
40014: PPUSH
40015: CALL_OW 2
40019: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40020: LD_VAR 0 14
40024: PPUSH
40025: LD_VAR 0 9
40029: PPUSH
40030: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40034: LD_VAR 0 9
40038: PPUSH
40039: CALL_OW 313
40043: PUSH
40044: LD_INT 6
40046: EQUAL
40047: PUSH
40048: LD_VAR 0 9
40052: PPUSH
40053: CALL_OW 266
40057: PUSH
40058: LD_INT 32
40060: PUSH
40061: LD_INT 31
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: IN
40068: OR
40069: IFFALSE 39883
40071: GO 39880
40073: POP
40074: POP
// end else
40075: GO 40457
// for j = 1 to x do
40077: LD_ADDR_VAR 0 9
40081: PUSH
40082: DOUBLE
40083: LD_INT 1
40085: DEC
40086: ST_TO_ADDR
40087: LD_VAR 0 13
40091: PUSH
40092: FOR_TO
40093: IFFALSE 40455
// begin InitHc ;
40095: CALL_OW 19
// if not f then
40099: LD_VAR 0 12
40103: NOT
40104: IFFALSE 40193
// begin PrepareHuman ( false , i , skill ) ;
40106: LD_INT 0
40108: PPUSH
40109: LD_VAR 0 8
40113: PPUSH
40114: LD_VAR 0 4
40118: PPUSH
40119: CALL_OW 380
// un := CreateHuman ;
40123: LD_ADDR_VAR 0 14
40127: PUSH
40128: CALL_OW 44
40132: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40133: LD_ADDR_VAR 0 7
40137: PUSH
40138: LD_VAR 0 7
40142: PPUSH
40143: LD_INT 1
40145: PPUSH
40146: LD_VAR 0 14
40150: PPUSH
40151: CALL_OW 2
40155: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40156: LD_VAR 0 14
40160: PPUSH
40161: LD_VAR 0 1
40165: PPUSH
40166: CALL_OW 250
40170: PPUSH
40171: LD_VAR 0 1
40175: PPUSH
40176: CALL_OW 251
40180: PPUSH
40181: LD_INT 10
40183: PPUSH
40184: LD_INT 0
40186: PPUSH
40187: CALL_OW 50
// continue ;
40191: GO 40092
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40193: LD_VAR 0 12
40197: PUSH
40198: LD_INT 1
40200: ARRAY
40201: PPUSH
40202: CALL_OW 313
40206: PUSH
40207: LD_VAR 0 12
40211: PUSH
40212: LD_INT 1
40214: ARRAY
40215: PPUSH
40216: CALL_OW 266
40220: PUSH
40221: LD_INT 32
40223: PUSH
40224: LD_INT 31
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: IN
40231: AND
40232: PUSH
40233: LD_VAR 0 12
40237: PUSH
40238: LD_INT 1
40240: ARRAY
40241: PPUSH
40242: CALL_OW 313
40246: PUSH
40247: LD_INT 6
40249: EQUAL
40250: OR
40251: IFFALSE 40271
// f := Delete ( f , 1 ) ;
40253: LD_ADDR_VAR 0 12
40257: PUSH
40258: LD_VAR 0 12
40262: PPUSH
40263: LD_INT 1
40265: PPUSH
40266: CALL_OW 3
40270: ST_TO_ADDR
// if not f then
40271: LD_VAR 0 12
40275: NOT
40276: IFFALSE 40294
// begin x := x + 2 ;
40278: LD_ADDR_VAR 0 13
40282: PUSH
40283: LD_VAR 0 13
40287: PUSH
40288: LD_INT 2
40290: PLUS
40291: ST_TO_ADDR
// continue ;
40292: GO 40092
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40294: LD_VAR 0 12
40298: PUSH
40299: LD_INT 1
40301: ARRAY
40302: PPUSH
40303: CALL_OW 266
40307: PUSH
40308: LD_INT 5
40310: EQUAL
40311: IFFALSE 40385
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40313: LD_VAR 0 12
40317: PUSH
40318: LD_INT 1
40320: ARRAY
40321: PPUSH
40322: CALL_OW 313
40326: PUSH
40327: LD_INT 3
40329: LESS
40330: IFFALSE 40366
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40332: LD_INT 0
40334: PPUSH
40335: LD_INT 5
40337: PUSH
40338: LD_INT 8
40340: PUSH
40341: LD_INT 9
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: LIST
40348: PUSH
40349: LD_VAR 0 17
40353: ARRAY
40354: PPUSH
40355: LD_VAR 0 4
40359: PPUSH
40360: CALL_OW 380
40364: GO 40383
// PrepareHuman ( false , i , skill ) ;
40366: LD_INT 0
40368: PPUSH
40369: LD_VAR 0 8
40373: PPUSH
40374: LD_VAR 0 4
40378: PPUSH
40379: CALL_OW 380
// end else
40383: GO 40402
// PrepareHuman ( false , i , skill ) ;
40385: LD_INT 0
40387: PPUSH
40388: LD_VAR 0 8
40392: PPUSH
40393: LD_VAR 0 4
40397: PPUSH
40398: CALL_OW 380
// un := CreateHuman ;
40402: LD_ADDR_VAR 0 14
40406: PUSH
40407: CALL_OW 44
40411: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40412: LD_ADDR_VAR 0 7
40416: PUSH
40417: LD_VAR 0 7
40421: PPUSH
40422: LD_INT 1
40424: PPUSH
40425: LD_VAR 0 14
40429: PPUSH
40430: CALL_OW 2
40434: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40435: LD_VAR 0 14
40439: PPUSH
40440: LD_VAR 0 12
40444: PUSH
40445: LD_INT 1
40447: ARRAY
40448: PPUSH
40449: CALL_OW 52
// end ;
40453: GO 40092
40455: POP
40456: POP
// end ;
40457: GO 39394
40459: POP
40460: POP
// result := result ^ buildings ;
40461: LD_ADDR_VAR 0 7
40465: PUSH
40466: LD_VAR 0 7
40470: PUSH
40471: LD_VAR 0 18
40475: ADD
40476: ST_TO_ADDR
// end else
40477: GO 40620
// begin for i = 1 to personel do
40479: LD_ADDR_VAR 0 8
40483: PUSH
40484: DOUBLE
40485: LD_INT 1
40487: DEC
40488: ST_TO_ADDR
40489: LD_VAR 0 6
40493: PUSH
40494: FOR_TO
40495: IFFALSE 40618
// begin if i > 4 then
40497: LD_VAR 0 8
40501: PUSH
40502: LD_INT 4
40504: GREATER
40505: IFFALSE 40509
// break ;
40507: GO 40618
// x := personel [ i ] ;
40509: LD_ADDR_VAR 0 13
40513: PUSH
40514: LD_VAR 0 6
40518: PUSH
40519: LD_VAR 0 8
40523: ARRAY
40524: ST_TO_ADDR
// if x = - 1 then
40525: LD_VAR 0 13
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: EQUAL
40534: IFFALSE 40538
// continue ;
40536: GO 40494
// PrepareHuman ( false , i , skill ) ;
40538: LD_INT 0
40540: PPUSH
40541: LD_VAR 0 8
40545: PPUSH
40546: LD_VAR 0 4
40550: PPUSH
40551: CALL_OW 380
// un := CreateHuman ;
40555: LD_ADDR_VAR 0 14
40559: PUSH
40560: CALL_OW 44
40564: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40565: LD_VAR 0 14
40569: PPUSH
40570: LD_VAR 0 1
40574: PPUSH
40575: CALL_OW 250
40579: PPUSH
40580: LD_VAR 0 1
40584: PPUSH
40585: CALL_OW 251
40589: PPUSH
40590: LD_INT 10
40592: PPUSH
40593: LD_INT 0
40595: PPUSH
40596: CALL_OW 50
// result := result ^ un ;
40600: LD_ADDR_VAR 0 7
40604: PUSH
40605: LD_VAR 0 7
40609: PUSH
40610: LD_VAR 0 14
40614: ADD
40615: ST_TO_ADDR
// end ;
40616: GO 40494
40618: POP
40619: POP
// end ; end ;
40620: LD_VAR 0 7
40624: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40625: LD_INT 0
40627: PPUSH
40628: PPUSH
40629: PPUSH
40630: PPUSH
40631: PPUSH
40632: PPUSH
40633: PPUSH
40634: PPUSH
40635: PPUSH
40636: PPUSH
40637: PPUSH
40638: PPUSH
40639: PPUSH
40640: PPUSH
40641: PPUSH
40642: PPUSH
// result := false ;
40643: LD_ADDR_VAR 0 3
40647: PUSH
40648: LD_INT 0
40650: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40651: LD_VAR 0 1
40655: NOT
40656: PUSH
40657: LD_VAR 0 1
40661: PPUSH
40662: CALL_OW 266
40666: PUSH
40667: LD_INT 32
40669: PUSH
40670: LD_INT 33
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: IN
40677: NOT
40678: OR
40679: IFFALSE 40683
// exit ;
40681: GO 41792
// nat := GetNation ( tower ) ;
40683: LD_ADDR_VAR 0 12
40687: PUSH
40688: LD_VAR 0 1
40692: PPUSH
40693: CALL_OW 248
40697: ST_TO_ADDR
// side := GetSide ( tower ) ;
40698: LD_ADDR_VAR 0 16
40702: PUSH
40703: LD_VAR 0 1
40707: PPUSH
40708: CALL_OW 255
40712: ST_TO_ADDR
// x := GetX ( tower ) ;
40713: LD_ADDR_VAR 0 10
40717: PUSH
40718: LD_VAR 0 1
40722: PPUSH
40723: CALL_OW 250
40727: ST_TO_ADDR
// y := GetY ( tower ) ;
40728: LD_ADDR_VAR 0 11
40732: PUSH
40733: LD_VAR 0 1
40737: PPUSH
40738: CALL_OW 251
40742: ST_TO_ADDR
// if not x or not y then
40743: LD_VAR 0 10
40747: NOT
40748: PUSH
40749: LD_VAR 0 11
40753: NOT
40754: OR
40755: IFFALSE 40759
// exit ;
40757: GO 41792
// weapon := 0 ;
40759: LD_ADDR_VAR 0 18
40763: PUSH
40764: LD_INT 0
40766: ST_TO_ADDR
// fac_list := [ ] ;
40767: LD_ADDR_VAR 0 17
40771: PUSH
40772: EMPTY
40773: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40774: LD_ADDR_VAR 0 6
40778: PUSH
40779: LD_VAR 0 1
40783: PPUSH
40784: CALL_OW 274
40788: PPUSH
40789: LD_VAR 0 2
40793: PPUSH
40794: LD_INT 0
40796: PPUSH
40797: CALL 38363 0 3
40801: PPUSH
40802: LD_INT 30
40804: PUSH
40805: LD_INT 3
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PPUSH
40812: CALL_OW 72
40816: ST_TO_ADDR
// if not factories then
40817: LD_VAR 0 6
40821: NOT
40822: IFFALSE 40826
// exit ;
40824: GO 41792
// for i in factories do
40826: LD_ADDR_VAR 0 8
40830: PUSH
40831: LD_VAR 0 6
40835: PUSH
40836: FOR_IN
40837: IFFALSE 40862
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40839: LD_ADDR_VAR 0 17
40843: PUSH
40844: LD_VAR 0 17
40848: PUSH
40849: LD_VAR 0 8
40853: PPUSH
40854: CALL_OW 478
40858: UNION
40859: ST_TO_ADDR
40860: GO 40836
40862: POP
40863: POP
// if not fac_list then
40864: LD_VAR 0 17
40868: NOT
40869: IFFALSE 40873
// exit ;
40871: GO 41792
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40873: LD_ADDR_VAR 0 5
40877: PUSH
40878: LD_INT 4
40880: PUSH
40881: LD_INT 5
40883: PUSH
40884: LD_INT 9
40886: PUSH
40887: LD_INT 10
40889: PUSH
40890: LD_INT 6
40892: PUSH
40893: LD_INT 7
40895: PUSH
40896: LD_INT 11
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 27
40910: PUSH
40911: LD_INT 28
40913: PUSH
40914: LD_INT 26
40916: PUSH
40917: LD_INT 30
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 43
40928: PUSH
40929: LD_INT 44
40931: PUSH
40932: LD_INT 46
40934: PUSH
40935: LD_INT 45
40937: PUSH
40938: LD_INT 47
40940: PUSH
40941: LD_INT 49
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: LIST
40956: PUSH
40957: LD_VAR 0 12
40961: ARRAY
40962: ST_TO_ADDR
// list := list isect fac_list ;
40963: LD_ADDR_VAR 0 5
40967: PUSH
40968: LD_VAR 0 5
40972: PUSH
40973: LD_VAR 0 17
40977: ISECT
40978: ST_TO_ADDR
// if not list then
40979: LD_VAR 0 5
40983: NOT
40984: IFFALSE 40988
// exit ;
40986: GO 41792
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40988: LD_VAR 0 12
40992: PUSH
40993: LD_INT 3
40995: EQUAL
40996: PUSH
40997: LD_INT 49
40999: PUSH
41000: LD_VAR 0 5
41004: IN
41005: AND
41006: PUSH
41007: LD_INT 31
41009: PPUSH
41010: LD_VAR 0 16
41014: PPUSH
41015: CALL_OW 321
41019: PUSH
41020: LD_INT 2
41022: EQUAL
41023: AND
41024: IFFALSE 41084
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41026: LD_INT 22
41028: PUSH
41029: LD_VAR 0 16
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 35
41040: PUSH
41041: LD_INT 49
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 91
41050: PUSH
41051: LD_VAR 0 1
41055: PUSH
41056: LD_INT 10
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: LIST
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: LIST
41068: PPUSH
41069: CALL_OW 69
41073: NOT
41074: IFFALSE 41084
// weapon := ru_time_lapser ;
41076: LD_ADDR_VAR 0 18
41080: PUSH
41081: LD_INT 49
41083: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41084: LD_VAR 0 12
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: LD_INT 2
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: IN
41099: PUSH
41100: LD_INT 11
41102: PUSH
41103: LD_VAR 0 5
41107: IN
41108: PUSH
41109: LD_INT 30
41111: PUSH
41112: LD_VAR 0 5
41116: IN
41117: OR
41118: AND
41119: PUSH
41120: LD_INT 6
41122: PPUSH
41123: LD_VAR 0 16
41127: PPUSH
41128: CALL_OW 321
41132: PUSH
41133: LD_INT 2
41135: EQUAL
41136: AND
41137: IFFALSE 41302
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41139: LD_INT 22
41141: PUSH
41142: LD_VAR 0 16
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 2
41153: PUSH
41154: LD_INT 35
41156: PUSH
41157: LD_INT 11
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 35
41166: PUSH
41167: LD_INT 30
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 91
41181: PUSH
41182: LD_VAR 0 1
41186: PUSH
41187: LD_INT 18
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: LIST
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: LIST
41199: PPUSH
41200: CALL_OW 69
41204: NOT
41205: PUSH
41206: LD_INT 22
41208: PUSH
41209: LD_VAR 0 16
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 30
41223: PUSH
41224: LD_INT 32
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 30
41233: PUSH
41234: LD_INT 33
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 91
41248: PUSH
41249: LD_VAR 0 1
41253: PUSH
41254: LD_INT 12
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: LIST
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: LIST
41266: PUSH
41267: EMPTY
41268: LIST
41269: PPUSH
41270: CALL_OW 69
41274: PUSH
41275: LD_INT 2
41277: GREATER
41278: AND
41279: IFFALSE 41302
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41281: LD_ADDR_VAR 0 18
41285: PUSH
41286: LD_INT 11
41288: PUSH
41289: LD_INT 30
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_VAR 0 12
41300: ARRAY
41301: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41302: LD_VAR 0 18
41306: NOT
41307: PUSH
41308: LD_INT 40
41310: PPUSH
41311: LD_VAR 0 16
41315: PPUSH
41316: CALL_OW 321
41320: PUSH
41321: LD_INT 2
41323: EQUAL
41324: AND
41325: PUSH
41326: LD_INT 7
41328: PUSH
41329: LD_VAR 0 5
41333: IN
41334: PUSH
41335: LD_INT 28
41337: PUSH
41338: LD_VAR 0 5
41342: IN
41343: OR
41344: PUSH
41345: LD_INT 45
41347: PUSH
41348: LD_VAR 0 5
41352: IN
41353: OR
41354: AND
41355: IFFALSE 41609
// begin hex := GetHexInfo ( x , y ) ;
41357: LD_ADDR_VAR 0 4
41361: PUSH
41362: LD_VAR 0 10
41366: PPUSH
41367: LD_VAR 0 11
41371: PPUSH
41372: CALL_OW 546
41376: ST_TO_ADDR
// if hex [ 1 ] then
41377: LD_VAR 0 4
41381: PUSH
41382: LD_INT 1
41384: ARRAY
41385: IFFALSE 41389
// exit ;
41387: GO 41792
// height := hex [ 2 ] ;
41389: LD_ADDR_VAR 0 15
41393: PUSH
41394: LD_VAR 0 4
41398: PUSH
41399: LD_INT 2
41401: ARRAY
41402: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41403: LD_ADDR_VAR 0 14
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: LD_INT 2
41413: PUSH
41414: LD_INT 3
41416: PUSH
41417: LD_INT 5
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: ST_TO_ADDR
// for i in tmp do
41426: LD_ADDR_VAR 0 8
41430: PUSH
41431: LD_VAR 0 14
41435: PUSH
41436: FOR_IN
41437: IFFALSE 41607
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41439: LD_ADDR_VAR 0 9
41443: PUSH
41444: LD_VAR 0 10
41448: PPUSH
41449: LD_VAR 0 8
41453: PPUSH
41454: LD_INT 5
41456: PPUSH
41457: CALL_OW 272
41461: PUSH
41462: LD_VAR 0 11
41466: PPUSH
41467: LD_VAR 0 8
41471: PPUSH
41472: LD_INT 5
41474: PPUSH
41475: CALL_OW 273
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41484: LD_VAR 0 9
41488: PUSH
41489: LD_INT 1
41491: ARRAY
41492: PPUSH
41493: LD_VAR 0 9
41497: PUSH
41498: LD_INT 2
41500: ARRAY
41501: PPUSH
41502: CALL_OW 488
41506: IFFALSE 41605
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41508: LD_ADDR_VAR 0 4
41512: PUSH
41513: LD_VAR 0 9
41517: PUSH
41518: LD_INT 1
41520: ARRAY
41521: PPUSH
41522: LD_VAR 0 9
41526: PUSH
41527: LD_INT 2
41529: ARRAY
41530: PPUSH
41531: CALL_OW 546
41535: ST_TO_ADDR
// if hex [ 1 ] then
41536: LD_VAR 0 4
41540: PUSH
41541: LD_INT 1
41543: ARRAY
41544: IFFALSE 41548
// continue ;
41546: GO 41436
// h := hex [ 2 ] ;
41548: LD_ADDR_VAR 0 13
41552: PUSH
41553: LD_VAR 0 4
41557: PUSH
41558: LD_INT 2
41560: ARRAY
41561: ST_TO_ADDR
// if h + 7 < height then
41562: LD_VAR 0 13
41566: PUSH
41567: LD_INT 7
41569: PLUS
41570: PUSH
41571: LD_VAR 0 15
41575: LESS
41576: IFFALSE 41605
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41578: LD_ADDR_VAR 0 18
41582: PUSH
41583: LD_INT 7
41585: PUSH
41586: LD_INT 28
41588: PUSH
41589: LD_INT 45
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: LIST
41596: PUSH
41597: LD_VAR 0 12
41601: ARRAY
41602: ST_TO_ADDR
// break ;
41603: GO 41607
// end ; end ; end ;
41605: GO 41436
41607: POP
41608: POP
// end ; if not weapon then
41609: LD_VAR 0 18
41613: NOT
41614: IFFALSE 41674
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41616: LD_ADDR_VAR 0 5
41620: PUSH
41621: LD_VAR 0 5
41625: PUSH
41626: LD_INT 11
41628: PUSH
41629: LD_INT 30
41631: PUSH
41632: LD_INT 49
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: LIST
41639: DIFF
41640: ST_TO_ADDR
// if not list then
41641: LD_VAR 0 5
41645: NOT
41646: IFFALSE 41650
// exit ;
41648: GO 41792
// weapon := list [ rand ( 1 , list ) ] ;
41650: LD_ADDR_VAR 0 18
41654: PUSH
41655: LD_VAR 0 5
41659: PUSH
41660: LD_INT 1
41662: PPUSH
41663: LD_VAR 0 5
41667: PPUSH
41668: CALL_OW 12
41672: ARRAY
41673: ST_TO_ADDR
// end ; if weapon then
41674: LD_VAR 0 18
41678: IFFALSE 41792
// begin tmp := CostOfWeapon ( weapon ) ;
41680: LD_ADDR_VAR 0 14
41684: PUSH
41685: LD_VAR 0 18
41689: PPUSH
41690: CALL_OW 451
41694: ST_TO_ADDR
// j := GetBase ( tower ) ;
41695: LD_ADDR_VAR 0 9
41699: PUSH
41700: LD_VAR 0 1
41704: PPUSH
41705: CALL_OW 274
41709: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41710: LD_VAR 0 9
41714: PPUSH
41715: LD_INT 1
41717: PPUSH
41718: CALL_OW 275
41722: PUSH
41723: LD_VAR 0 14
41727: PUSH
41728: LD_INT 1
41730: ARRAY
41731: GREATEREQUAL
41732: PUSH
41733: LD_VAR 0 9
41737: PPUSH
41738: LD_INT 2
41740: PPUSH
41741: CALL_OW 275
41745: PUSH
41746: LD_VAR 0 14
41750: PUSH
41751: LD_INT 2
41753: ARRAY
41754: GREATEREQUAL
41755: AND
41756: PUSH
41757: LD_VAR 0 9
41761: PPUSH
41762: LD_INT 3
41764: PPUSH
41765: CALL_OW 275
41769: PUSH
41770: LD_VAR 0 14
41774: PUSH
41775: LD_INT 3
41777: ARRAY
41778: GREATEREQUAL
41779: AND
41780: IFFALSE 41792
// result := weapon ;
41782: LD_ADDR_VAR 0 3
41786: PUSH
41787: LD_VAR 0 18
41791: ST_TO_ADDR
// end ; end ;
41792: LD_VAR 0 3
41796: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41797: LD_INT 0
41799: PPUSH
41800: PPUSH
// result := true ;
41801: LD_ADDR_VAR 0 3
41805: PUSH
41806: LD_INT 1
41808: ST_TO_ADDR
// if array1 = array2 then
41809: LD_VAR 0 1
41813: PUSH
41814: LD_VAR 0 2
41818: EQUAL
41819: IFFALSE 41879
// begin for i = 1 to array1 do
41821: LD_ADDR_VAR 0 4
41825: PUSH
41826: DOUBLE
41827: LD_INT 1
41829: DEC
41830: ST_TO_ADDR
41831: LD_VAR 0 1
41835: PUSH
41836: FOR_TO
41837: IFFALSE 41875
// if array1 [ i ] <> array2 [ i ] then
41839: LD_VAR 0 1
41843: PUSH
41844: LD_VAR 0 4
41848: ARRAY
41849: PUSH
41850: LD_VAR 0 2
41854: PUSH
41855: LD_VAR 0 4
41859: ARRAY
41860: NONEQUAL
41861: IFFALSE 41873
// begin result := false ;
41863: LD_ADDR_VAR 0 3
41867: PUSH
41868: LD_INT 0
41870: ST_TO_ADDR
// break ;
41871: GO 41875
// end ;
41873: GO 41836
41875: POP
41876: POP
// end else
41877: GO 41887
// result := false ;
41879: LD_ADDR_VAR 0 3
41883: PUSH
41884: LD_INT 0
41886: ST_TO_ADDR
// end ;
41887: LD_VAR 0 3
41891: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41892: LD_INT 0
41894: PPUSH
41895: PPUSH
// if not array1 or not array2 then
41896: LD_VAR 0 1
41900: NOT
41901: PUSH
41902: LD_VAR 0 2
41906: NOT
41907: OR
41908: IFFALSE 41912
// exit ;
41910: GO 41976
// result := true ;
41912: LD_ADDR_VAR 0 3
41916: PUSH
41917: LD_INT 1
41919: ST_TO_ADDR
// for i = 1 to array1 do
41920: LD_ADDR_VAR 0 4
41924: PUSH
41925: DOUBLE
41926: LD_INT 1
41928: DEC
41929: ST_TO_ADDR
41930: LD_VAR 0 1
41934: PUSH
41935: FOR_TO
41936: IFFALSE 41974
// if array1 [ i ] <> array2 [ i ] then
41938: LD_VAR 0 1
41942: PUSH
41943: LD_VAR 0 4
41947: ARRAY
41948: PUSH
41949: LD_VAR 0 2
41953: PUSH
41954: LD_VAR 0 4
41958: ARRAY
41959: NONEQUAL
41960: IFFALSE 41972
// begin result := false ;
41962: LD_ADDR_VAR 0 3
41966: PUSH
41967: LD_INT 0
41969: ST_TO_ADDR
// break ;
41970: GO 41974
// end ;
41972: GO 41935
41974: POP
41975: POP
// end ;
41976: LD_VAR 0 3
41980: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41981: LD_INT 0
41983: PPUSH
41984: PPUSH
41985: PPUSH
// pom := GetBase ( fac ) ;
41986: LD_ADDR_VAR 0 5
41990: PUSH
41991: LD_VAR 0 1
41995: PPUSH
41996: CALL_OW 274
42000: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42001: LD_ADDR_VAR 0 4
42005: PUSH
42006: LD_VAR 0 2
42010: PUSH
42011: LD_INT 1
42013: ARRAY
42014: PPUSH
42015: LD_VAR 0 2
42019: PUSH
42020: LD_INT 2
42022: ARRAY
42023: PPUSH
42024: LD_VAR 0 2
42028: PUSH
42029: LD_INT 3
42031: ARRAY
42032: PPUSH
42033: LD_VAR 0 2
42037: PUSH
42038: LD_INT 4
42040: ARRAY
42041: PPUSH
42042: CALL_OW 449
42046: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42047: LD_ADDR_VAR 0 3
42051: PUSH
42052: LD_VAR 0 5
42056: PPUSH
42057: LD_INT 1
42059: PPUSH
42060: CALL_OW 275
42064: PUSH
42065: LD_VAR 0 4
42069: PUSH
42070: LD_INT 1
42072: ARRAY
42073: GREATEREQUAL
42074: PUSH
42075: LD_VAR 0 5
42079: PPUSH
42080: LD_INT 2
42082: PPUSH
42083: CALL_OW 275
42087: PUSH
42088: LD_VAR 0 4
42092: PUSH
42093: LD_INT 2
42095: ARRAY
42096: GREATEREQUAL
42097: AND
42098: PUSH
42099: LD_VAR 0 5
42103: PPUSH
42104: LD_INT 3
42106: PPUSH
42107: CALL_OW 275
42111: PUSH
42112: LD_VAR 0 4
42116: PUSH
42117: LD_INT 3
42119: ARRAY
42120: GREATEREQUAL
42121: AND
42122: ST_TO_ADDR
// end ;
42123: LD_VAR 0 3
42127: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42128: LD_INT 0
42130: PPUSH
42131: PPUSH
42132: PPUSH
42133: PPUSH
// pom := GetBase ( building ) ;
42134: LD_ADDR_VAR 0 3
42138: PUSH
42139: LD_VAR 0 1
42143: PPUSH
42144: CALL_OW 274
42148: ST_TO_ADDR
// if not pom then
42149: LD_VAR 0 3
42153: NOT
42154: IFFALSE 42158
// exit ;
42156: GO 42328
// btype := GetBType ( building ) ;
42158: LD_ADDR_VAR 0 5
42162: PUSH
42163: LD_VAR 0 1
42167: PPUSH
42168: CALL_OW 266
42172: ST_TO_ADDR
// if btype = b_armoury then
42173: LD_VAR 0 5
42177: PUSH
42178: LD_INT 4
42180: EQUAL
42181: IFFALSE 42191
// btype := b_barracks ;
42183: LD_ADDR_VAR 0 5
42187: PUSH
42188: LD_INT 5
42190: ST_TO_ADDR
// if btype = b_depot then
42191: LD_VAR 0 5
42195: PUSH
42196: LD_INT 0
42198: EQUAL
42199: IFFALSE 42209
// btype := b_warehouse ;
42201: LD_ADDR_VAR 0 5
42205: PUSH
42206: LD_INT 1
42208: ST_TO_ADDR
// if btype = b_workshop then
42209: LD_VAR 0 5
42213: PUSH
42214: LD_INT 2
42216: EQUAL
42217: IFFALSE 42227
// btype := b_factory ;
42219: LD_ADDR_VAR 0 5
42223: PUSH
42224: LD_INT 3
42226: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42227: LD_ADDR_VAR 0 4
42231: PUSH
42232: LD_VAR 0 5
42236: PPUSH
42237: LD_VAR 0 1
42241: PPUSH
42242: CALL_OW 248
42246: PPUSH
42247: CALL_OW 450
42251: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42252: LD_ADDR_VAR 0 2
42256: PUSH
42257: LD_VAR 0 3
42261: PPUSH
42262: LD_INT 1
42264: PPUSH
42265: CALL_OW 275
42269: PUSH
42270: LD_VAR 0 4
42274: PUSH
42275: LD_INT 1
42277: ARRAY
42278: GREATEREQUAL
42279: PUSH
42280: LD_VAR 0 3
42284: PPUSH
42285: LD_INT 2
42287: PPUSH
42288: CALL_OW 275
42292: PUSH
42293: LD_VAR 0 4
42297: PUSH
42298: LD_INT 2
42300: ARRAY
42301: GREATEREQUAL
42302: AND
42303: PUSH
42304: LD_VAR 0 3
42308: PPUSH
42309: LD_INT 3
42311: PPUSH
42312: CALL_OW 275
42316: PUSH
42317: LD_VAR 0 4
42321: PUSH
42322: LD_INT 3
42324: ARRAY
42325: GREATEREQUAL
42326: AND
42327: ST_TO_ADDR
// end ;
42328: LD_VAR 0 2
42332: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42333: LD_INT 0
42335: PPUSH
42336: PPUSH
42337: PPUSH
// pom := GetBase ( building ) ;
42338: LD_ADDR_VAR 0 4
42342: PUSH
42343: LD_VAR 0 1
42347: PPUSH
42348: CALL_OW 274
42352: ST_TO_ADDR
// if not pom then
42353: LD_VAR 0 4
42357: NOT
42358: IFFALSE 42362
// exit ;
42360: GO 42463
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42362: LD_ADDR_VAR 0 5
42366: PUSH
42367: LD_VAR 0 2
42371: PPUSH
42372: LD_VAR 0 1
42376: PPUSH
42377: CALL_OW 248
42381: PPUSH
42382: CALL_OW 450
42386: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42387: LD_ADDR_VAR 0 3
42391: PUSH
42392: LD_VAR 0 4
42396: PPUSH
42397: LD_INT 1
42399: PPUSH
42400: CALL_OW 275
42404: PUSH
42405: LD_VAR 0 5
42409: PUSH
42410: LD_INT 1
42412: ARRAY
42413: GREATEREQUAL
42414: PUSH
42415: LD_VAR 0 4
42419: PPUSH
42420: LD_INT 2
42422: PPUSH
42423: CALL_OW 275
42427: PUSH
42428: LD_VAR 0 5
42432: PUSH
42433: LD_INT 2
42435: ARRAY
42436: GREATEREQUAL
42437: AND
42438: PUSH
42439: LD_VAR 0 4
42443: PPUSH
42444: LD_INT 3
42446: PPUSH
42447: CALL_OW 275
42451: PUSH
42452: LD_VAR 0 5
42456: PUSH
42457: LD_INT 3
42459: ARRAY
42460: GREATEREQUAL
42461: AND
42462: ST_TO_ADDR
// end ;
42463: LD_VAR 0 3
42467: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42468: LD_INT 0
42470: PPUSH
42471: PPUSH
42472: PPUSH
42473: PPUSH
42474: PPUSH
42475: PPUSH
42476: PPUSH
42477: PPUSH
42478: PPUSH
42479: PPUSH
42480: PPUSH
// result := false ;
42481: LD_ADDR_VAR 0 8
42485: PUSH
42486: LD_INT 0
42488: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42489: LD_VAR 0 5
42493: NOT
42494: PUSH
42495: LD_VAR 0 1
42499: NOT
42500: OR
42501: PUSH
42502: LD_VAR 0 2
42506: NOT
42507: OR
42508: PUSH
42509: LD_VAR 0 3
42513: NOT
42514: OR
42515: IFFALSE 42519
// exit ;
42517: GO 43333
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42519: LD_ADDR_VAR 0 14
42523: PUSH
42524: LD_VAR 0 1
42528: PPUSH
42529: LD_VAR 0 2
42533: PPUSH
42534: LD_VAR 0 3
42538: PPUSH
42539: LD_VAR 0 4
42543: PPUSH
42544: LD_VAR 0 5
42548: PUSH
42549: LD_INT 1
42551: ARRAY
42552: PPUSH
42553: CALL_OW 248
42557: PPUSH
42558: LD_INT 0
42560: PPUSH
42561: CALL 44566 0 6
42565: ST_TO_ADDR
// if not hexes then
42566: LD_VAR 0 14
42570: NOT
42571: IFFALSE 42575
// exit ;
42573: GO 43333
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42575: LD_ADDR_VAR 0 17
42579: PUSH
42580: LD_VAR 0 5
42584: PPUSH
42585: LD_INT 22
42587: PUSH
42588: LD_VAR 0 13
42592: PPUSH
42593: CALL_OW 255
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 2
42604: PUSH
42605: LD_INT 30
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 30
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: LIST
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PPUSH
42634: CALL_OW 72
42638: ST_TO_ADDR
// for i = 1 to hexes do
42639: LD_ADDR_VAR 0 9
42643: PUSH
42644: DOUBLE
42645: LD_INT 1
42647: DEC
42648: ST_TO_ADDR
42649: LD_VAR 0 14
42653: PUSH
42654: FOR_TO
42655: IFFALSE 43331
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42657: LD_ADDR_VAR 0 13
42661: PUSH
42662: LD_VAR 0 14
42666: PUSH
42667: LD_VAR 0 9
42671: ARRAY
42672: PUSH
42673: LD_INT 1
42675: ARRAY
42676: PPUSH
42677: LD_VAR 0 14
42681: PUSH
42682: LD_VAR 0 9
42686: ARRAY
42687: PUSH
42688: LD_INT 2
42690: ARRAY
42691: PPUSH
42692: CALL_OW 428
42696: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42697: LD_VAR 0 14
42701: PUSH
42702: LD_VAR 0 9
42706: ARRAY
42707: PUSH
42708: LD_INT 1
42710: ARRAY
42711: PPUSH
42712: LD_VAR 0 14
42716: PUSH
42717: LD_VAR 0 9
42721: ARRAY
42722: PUSH
42723: LD_INT 2
42725: ARRAY
42726: PPUSH
42727: CALL_OW 351
42731: PUSH
42732: LD_VAR 0 14
42736: PUSH
42737: LD_VAR 0 9
42741: ARRAY
42742: PUSH
42743: LD_INT 1
42745: ARRAY
42746: PPUSH
42747: LD_VAR 0 14
42751: PUSH
42752: LD_VAR 0 9
42756: ARRAY
42757: PUSH
42758: LD_INT 2
42760: ARRAY
42761: PPUSH
42762: CALL_OW 488
42766: NOT
42767: OR
42768: PUSH
42769: LD_VAR 0 13
42773: PPUSH
42774: CALL_OW 247
42778: PUSH
42779: LD_INT 3
42781: EQUAL
42782: OR
42783: IFFALSE 42789
// exit ;
42785: POP
42786: POP
42787: GO 43333
// if not tmp then
42789: LD_VAR 0 13
42793: NOT
42794: IFFALSE 42798
// continue ;
42796: GO 42654
// result := true ;
42798: LD_ADDR_VAR 0 8
42802: PUSH
42803: LD_INT 1
42805: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42806: LD_VAR 0 6
42810: PUSH
42811: LD_VAR 0 13
42815: PPUSH
42816: CALL_OW 247
42820: PUSH
42821: LD_INT 2
42823: EQUAL
42824: AND
42825: PUSH
42826: LD_VAR 0 13
42830: PPUSH
42831: CALL_OW 263
42835: PUSH
42836: LD_INT 1
42838: EQUAL
42839: AND
42840: IFFALSE 43004
// begin if IsDrivenBy ( tmp ) then
42842: LD_VAR 0 13
42846: PPUSH
42847: CALL_OW 311
42851: IFFALSE 42855
// continue ;
42853: GO 42654
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42855: LD_VAR 0 6
42859: PPUSH
42860: LD_INT 3
42862: PUSH
42863: LD_INT 60
42865: PUSH
42866: EMPTY
42867: LIST
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 3
42875: PUSH
42876: LD_INT 55
42878: PUSH
42879: EMPTY
42880: LIST
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PPUSH
42890: CALL_OW 72
42894: IFFALSE 43002
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42896: LD_ADDR_VAR 0 18
42900: PUSH
42901: LD_VAR 0 6
42905: PPUSH
42906: LD_INT 3
42908: PUSH
42909: LD_INT 60
42911: PUSH
42912: EMPTY
42913: LIST
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 3
42921: PUSH
42922: LD_INT 55
42924: PUSH
42925: EMPTY
42926: LIST
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PPUSH
42936: CALL_OW 72
42940: PUSH
42941: LD_INT 1
42943: ARRAY
42944: ST_TO_ADDR
// if IsInUnit ( driver ) then
42945: LD_VAR 0 18
42949: PPUSH
42950: CALL_OW 310
42954: IFFALSE 42965
// ComExit ( driver ) ;
42956: LD_VAR 0 18
42960: PPUSH
42961: CALL 68346 0 1
// AddComEnterUnit ( driver , tmp ) ;
42965: LD_VAR 0 18
42969: PPUSH
42970: LD_VAR 0 13
42974: PPUSH
42975: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42979: LD_VAR 0 18
42983: PPUSH
42984: LD_VAR 0 7
42988: PPUSH
42989: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42993: LD_VAR 0 18
42997: PPUSH
42998: CALL_OW 181
// end ; continue ;
43002: GO 42654
// end ; if not cleaners or not tmp in cleaners then
43004: LD_VAR 0 6
43008: NOT
43009: PUSH
43010: LD_VAR 0 13
43014: PUSH
43015: LD_VAR 0 6
43019: IN
43020: NOT
43021: OR
43022: IFFALSE 43329
// begin if dep then
43024: LD_VAR 0 17
43028: IFFALSE 43164
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43030: LD_ADDR_VAR 0 16
43034: PUSH
43035: LD_VAR 0 17
43039: PUSH
43040: LD_INT 1
43042: ARRAY
43043: PPUSH
43044: CALL_OW 250
43048: PPUSH
43049: LD_VAR 0 17
43053: PUSH
43054: LD_INT 1
43056: ARRAY
43057: PPUSH
43058: CALL_OW 254
43062: PPUSH
43063: LD_INT 5
43065: PPUSH
43066: CALL_OW 272
43070: PUSH
43071: LD_VAR 0 17
43075: PUSH
43076: LD_INT 1
43078: ARRAY
43079: PPUSH
43080: CALL_OW 251
43084: PPUSH
43085: LD_VAR 0 17
43089: PUSH
43090: LD_INT 1
43092: ARRAY
43093: PPUSH
43094: CALL_OW 254
43098: PPUSH
43099: LD_INT 5
43101: PPUSH
43102: CALL_OW 273
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43111: LD_VAR 0 16
43115: PUSH
43116: LD_INT 1
43118: ARRAY
43119: PPUSH
43120: LD_VAR 0 16
43124: PUSH
43125: LD_INT 2
43127: ARRAY
43128: PPUSH
43129: CALL_OW 488
43133: IFFALSE 43164
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43135: LD_VAR 0 13
43139: PPUSH
43140: LD_VAR 0 16
43144: PUSH
43145: LD_INT 1
43147: ARRAY
43148: PPUSH
43149: LD_VAR 0 16
43153: PUSH
43154: LD_INT 2
43156: ARRAY
43157: PPUSH
43158: CALL_OW 111
// continue ;
43162: GO 42654
// end ; end ; r := GetDir ( tmp ) ;
43164: LD_ADDR_VAR 0 15
43168: PUSH
43169: LD_VAR 0 13
43173: PPUSH
43174: CALL_OW 254
43178: ST_TO_ADDR
// if r = 5 then
43179: LD_VAR 0 15
43183: PUSH
43184: LD_INT 5
43186: EQUAL
43187: IFFALSE 43197
// r := 0 ;
43189: LD_ADDR_VAR 0 15
43193: PUSH
43194: LD_INT 0
43196: ST_TO_ADDR
// for j = r to 5 do
43197: LD_ADDR_VAR 0 10
43201: PUSH
43202: DOUBLE
43203: LD_VAR 0 15
43207: DEC
43208: ST_TO_ADDR
43209: LD_INT 5
43211: PUSH
43212: FOR_TO
43213: IFFALSE 43327
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43215: LD_ADDR_VAR 0 11
43219: PUSH
43220: LD_VAR 0 13
43224: PPUSH
43225: CALL_OW 250
43229: PPUSH
43230: LD_VAR 0 10
43234: PPUSH
43235: LD_INT 2
43237: PPUSH
43238: CALL_OW 272
43242: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43243: LD_ADDR_VAR 0 12
43247: PUSH
43248: LD_VAR 0 13
43252: PPUSH
43253: CALL_OW 251
43257: PPUSH
43258: LD_VAR 0 10
43262: PPUSH
43263: LD_INT 2
43265: PPUSH
43266: CALL_OW 273
43270: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43271: LD_VAR 0 11
43275: PPUSH
43276: LD_VAR 0 12
43280: PPUSH
43281: CALL_OW 488
43285: PUSH
43286: LD_VAR 0 11
43290: PPUSH
43291: LD_VAR 0 12
43295: PPUSH
43296: CALL_OW 428
43300: NOT
43301: AND
43302: IFFALSE 43325
// begin ComMoveXY ( tmp , _x , _y ) ;
43304: LD_VAR 0 13
43308: PPUSH
43309: LD_VAR 0 11
43313: PPUSH
43314: LD_VAR 0 12
43318: PPUSH
43319: CALL_OW 111
// break ;
43323: GO 43327
// end ; end ;
43325: GO 43212
43327: POP
43328: POP
// end ; end ;
43329: GO 42654
43331: POP
43332: POP
// end ;
43333: LD_VAR 0 8
43337: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43338: LD_INT 0
43340: PPUSH
// result := true ;
43341: LD_ADDR_VAR 0 3
43345: PUSH
43346: LD_INT 1
43348: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43349: LD_VAR 0 2
43353: PUSH
43354: LD_INT 24
43356: DOUBLE
43357: EQUAL
43358: IFTRUE 43368
43360: LD_INT 33
43362: DOUBLE
43363: EQUAL
43364: IFTRUE 43368
43366: GO 43393
43368: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43369: LD_ADDR_VAR 0 3
43373: PUSH
43374: LD_INT 32
43376: PPUSH
43377: LD_VAR 0 1
43381: PPUSH
43382: CALL_OW 321
43386: PUSH
43387: LD_INT 2
43389: EQUAL
43390: ST_TO_ADDR
43391: GO 43709
43393: LD_INT 20
43395: DOUBLE
43396: EQUAL
43397: IFTRUE 43401
43399: GO 43426
43401: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43402: LD_ADDR_VAR 0 3
43406: PUSH
43407: LD_INT 6
43409: PPUSH
43410: LD_VAR 0 1
43414: PPUSH
43415: CALL_OW 321
43419: PUSH
43420: LD_INT 2
43422: EQUAL
43423: ST_TO_ADDR
43424: GO 43709
43426: LD_INT 22
43428: DOUBLE
43429: EQUAL
43430: IFTRUE 43440
43432: LD_INT 36
43434: DOUBLE
43435: EQUAL
43436: IFTRUE 43440
43438: GO 43465
43440: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43441: LD_ADDR_VAR 0 3
43445: PUSH
43446: LD_INT 15
43448: PPUSH
43449: LD_VAR 0 1
43453: PPUSH
43454: CALL_OW 321
43458: PUSH
43459: LD_INT 2
43461: EQUAL
43462: ST_TO_ADDR
43463: GO 43709
43465: LD_INT 30
43467: DOUBLE
43468: EQUAL
43469: IFTRUE 43473
43471: GO 43498
43473: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43474: LD_ADDR_VAR 0 3
43478: PUSH
43479: LD_INT 20
43481: PPUSH
43482: LD_VAR 0 1
43486: PPUSH
43487: CALL_OW 321
43491: PUSH
43492: LD_INT 2
43494: EQUAL
43495: ST_TO_ADDR
43496: GO 43709
43498: LD_INT 28
43500: DOUBLE
43501: EQUAL
43502: IFTRUE 43512
43504: LD_INT 21
43506: DOUBLE
43507: EQUAL
43508: IFTRUE 43512
43510: GO 43537
43512: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43513: LD_ADDR_VAR 0 3
43517: PUSH
43518: LD_INT 21
43520: PPUSH
43521: LD_VAR 0 1
43525: PPUSH
43526: CALL_OW 321
43530: PUSH
43531: LD_INT 2
43533: EQUAL
43534: ST_TO_ADDR
43535: GO 43709
43537: LD_INT 16
43539: DOUBLE
43540: EQUAL
43541: IFTRUE 43545
43543: GO 43570
43545: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43546: LD_ADDR_VAR 0 3
43550: PUSH
43551: LD_INT 84
43553: PPUSH
43554: LD_VAR 0 1
43558: PPUSH
43559: CALL_OW 321
43563: PUSH
43564: LD_INT 2
43566: EQUAL
43567: ST_TO_ADDR
43568: GO 43709
43570: LD_INT 19
43572: DOUBLE
43573: EQUAL
43574: IFTRUE 43584
43576: LD_INT 23
43578: DOUBLE
43579: EQUAL
43580: IFTRUE 43584
43582: GO 43609
43584: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43585: LD_ADDR_VAR 0 3
43589: PUSH
43590: LD_INT 83
43592: PPUSH
43593: LD_VAR 0 1
43597: PPUSH
43598: CALL_OW 321
43602: PUSH
43603: LD_INT 2
43605: EQUAL
43606: ST_TO_ADDR
43607: GO 43709
43609: LD_INT 17
43611: DOUBLE
43612: EQUAL
43613: IFTRUE 43617
43615: GO 43642
43617: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43618: LD_ADDR_VAR 0 3
43622: PUSH
43623: LD_INT 39
43625: PPUSH
43626: LD_VAR 0 1
43630: PPUSH
43631: CALL_OW 321
43635: PUSH
43636: LD_INT 2
43638: EQUAL
43639: ST_TO_ADDR
43640: GO 43709
43642: LD_INT 18
43644: DOUBLE
43645: EQUAL
43646: IFTRUE 43650
43648: GO 43675
43650: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43651: LD_ADDR_VAR 0 3
43655: PUSH
43656: LD_INT 40
43658: PPUSH
43659: LD_VAR 0 1
43663: PPUSH
43664: CALL_OW 321
43668: PUSH
43669: LD_INT 2
43671: EQUAL
43672: ST_TO_ADDR
43673: GO 43709
43675: LD_INT 27
43677: DOUBLE
43678: EQUAL
43679: IFTRUE 43683
43681: GO 43708
43683: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43684: LD_ADDR_VAR 0 3
43688: PUSH
43689: LD_INT 35
43691: PPUSH
43692: LD_VAR 0 1
43696: PPUSH
43697: CALL_OW 321
43701: PUSH
43702: LD_INT 2
43704: EQUAL
43705: ST_TO_ADDR
43706: GO 43709
43708: POP
// end ;
43709: LD_VAR 0 3
43713: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43714: LD_INT 0
43716: PPUSH
43717: PPUSH
43718: PPUSH
43719: PPUSH
43720: PPUSH
43721: PPUSH
43722: PPUSH
43723: PPUSH
43724: PPUSH
43725: PPUSH
43726: PPUSH
// result := false ;
43727: LD_ADDR_VAR 0 6
43731: PUSH
43732: LD_INT 0
43734: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43735: LD_VAR 0 1
43739: NOT
43740: PUSH
43741: LD_VAR 0 1
43745: PPUSH
43746: CALL_OW 266
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: IN
43761: NOT
43762: OR
43763: PUSH
43764: LD_VAR 0 2
43768: NOT
43769: OR
43770: PUSH
43771: LD_VAR 0 5
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: LD_INT 2
43784: PUSH
43785: LD_INT 3
43787: PUSH
43788: LD_INT 4
43790: PUSH
43791: LD_INT 5
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: IN
43802: NOT
43803: OR
43804: PUSH
43805: LD_VAR 0 3
43809: PPUSH
43810: LD_VAR 0 4
43814: PPUSH
43815: CALL_OW 488
43819: NOT
43820: OR
43821: IFFALSE 43825
// exit ;
43823: GO 44561
// side := GetSide ( depot ) ;
43825: LD_ADDR_VAR 0 9
43829: PUSH
43830: LD_VAR 0 1
43834: PPUSH
43835: CALL_OW 255
43839: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43840: LD_VAR 0 9
43844: PPUSH
43845: LD_VAR 0 2
43849: PPUSH
43850: CALL 43338 0 2
43854: NOT
43855: IFFALSE 43859
// exit ;
43857: GO 44561
// pom := GetBase ( depot ) ;
43859: LD_ADDR_VAR 0 10
43863: PUSH
43864: LD_VAR 0 1
43868: PPUSH
43869: CALL_OW 274
43873: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43874: LD_ADDR_VAR 0 11
43878: PUSH
43879: LD_VAR 0 2
43883: PPUSH
43884: LD_VAR 0 1
43888: PPUSH
43889: CALL_OW 248
43893: PPUSH
43894: CALL_OW 450
43898: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43899: LD_VAR 0 10
43903: PPUSH
43904: LD_INT 1
43906: PPUSH
43907: CALL_OW 275
43911: PUSH
43912: LD_VAR 0 11
43916: PUSH
43917: LD_INT 1
43919: ARRAY
43920: GREATEREQUAL
43921: PUSH
43922: LD_VAR 0 10
43926: PPUSH
43927: LD_INT 2
43929: PPUSH
43930: CALL_OW 275
43934: PUSH
43935: LD_VAR 0 11
43939: PUSH
43940: LD_INT 2
43942: ARRAY
43943: GREATEREQUAL
43944: AND
43945: PUSH
43946: LD_VAR 0 10
43950: PPUSH
43951: LD_INT 3
43953: PPUSH
43954: CALL_OW 275
43958: PUSH
43959: LD_VAR 0 11
43963: PUSH
43964: LD_INT 3
43966: ARRAY
43967: GREATEREQUAL
43968: AND
43969: NOT
43970: IFFALSE 43974
// exit ;
43972: GO 44561
// if GetBType ( depot ) = b_depot then
43974: LD_VAR 0 1
43978: PPUSH
43979: CALL_OW 266
43983: PUSH
43984: LD_INT 0
43986: EQUAL
43987: IFFALSE 43999
// dist := 28 else
43989: LD_ADDR_VAR 0 14
43993: PUSH
43994: LD_INT 28
43996: ST_TO_ADDR
43997: GO 44007
// dist := 36 ;
43999: LD_ADDR_VAR 0 14
44003: PUSH
44004: LD_INT 36
44006: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44007: LD_VAR 0 1
44011: PPUSH
44012: LD_VAR 0 3
44016: PPUSH
44017: LD_VAR 0 4
44021: PPUSH
44022: CALL_OW 297
44026: PUSH
44027: LD_VAR 0 14
44031: GREATER
44032: IFFALSE 44036
// exit ;
44034: GO 44561
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44036: LD_ADDR_VAR 0 12
44040: PUSH
44041: LD_VAR 0 2
44045: PPUSH
44046: LD_VAR 0 3
44050: PPUSH
44051: LD_VAR 0 4
44055: PPUSH
44056: LD_VAR 0 5
44060: PPUSH
44061: LD_VAR 0 1
44065: PPUSH
44066: CALL_OW 248
44070: PPUSH
44071: LD_INT 0
44073: PPUSH
44074: CALL 44566 0 6
44078: ST_TO_ADDR
// if not hexes then
44079: LD_VAR 0 12
44083: NOT
44084: IFFALSE 44088
// exit ;
44086: GO 44561
// hex := GetHexInfo ( x , y ) ;
44088: LD_ADDR_VAR 0 15
44092: PUSH
44093: LD_VAR 0 3
44097: PPUSH
44098: LD_VAR 0 4
44102: PPUSH
44103: CALL_OW 546
44107: ST_TO_ADDR
// if hex [ 1 ] then
44108: LD_VAR 0 15
44112: PUSH
44113: LD_INT 1
44115: ARRAY
44116: IFFALSE 44120
// exit ;
44118: GO 44561
// height := hex [ 2 ] ;
44120: LD_ADDR_VAR 0 13
44124: PUSH
44125: LD_VAR 0 15
44129: PUSH
44130: LD_INT 2
44132: ARRAY
44133: ST_TO_ADDR
// for i = 1 to hexes do
44134: LD_ADDR_VAR 0 7
44138: PUSH
44139: DOUBLE
44140: LD_INT 1
44142: DEC
44143: ST_TO_ADDR
44144: LD_VAR 0 12
44148: PUSH
44149: FOR_TO
44150: IFFALSE 44480
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44152: LD_VAR 0 12
44156: PUSH
44157: LD_VAR 0 7
44161: ARRAY
44162: PUSH
44163: LD_INT 1
44165: ARRAY
44166: PPUSH
44167: LD_VAR 0 12
44171: PUSH
44172: LD_VAR 0 7
44176: ARRAY
44177: PUSH
44178: LD_INT 2
44180: ARRAY
44181: PPUSH
44182: CALL_OW 488
44186: NOT
44187: PUSH
44188: LD_VAR 0 12
44192: PUSH
44193: LD_VAR 0 7
44197: ARRAY
44198: PUSH
44199: LD_INT 1
44201: ARRAY
44202: PPUSH
44203: LD_VAR 0 12
44207: PUSH
44208: LD_VAR 0 7
44212: ARRAY
44213: PUSH
44214: LD_INT 2
44216: ARRAY
44217: PPUSH
44218: CALL_OW 428
44222: PUSH
44223: LD_INT 0
44225: GREATER
44226: OR
44227: PUSH
44228: LD_VAR 0 12
44232: PUSH
44233: LD_VAR 0 7
44237: ARRAY
44238: PUSH
44239: LD_INT 1
44241: ARRAY
44242: PPUSH
44243: LD_VAR 0 12
44247: PUSH
44248: LD_VAR 0 7
44252: ARRAY
44253: PUSH
44254: LD_INT 2
44256: ARRAY
44257: PPUSH
44258: CALL_OW 351
44262: OR
44263: IFFALSE 44269
// exit ;
44265: POP
44266: POP
44267: GO 44561
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44269: LD_ADDR_VAR 0 8
44273: PUSH
44274: LD_VAR 0 12
44278: PUSH
44279: LD_VAR 0 7
44283: ARRAY
44284: PUSH
44285: LD_INT 1
44287: ARRAY
44288: PPUSH
44289: LD_VAR 0 12
44293: PUSH
44294: LD_VAR 0 7
44298: ARRAY
44299: PUSH
44300: LD_INT 2
44302: ARRAY
44303: PPUSH
44304: CALL_OW 546
44308: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44309: LD_VAR 0 8
44313: PUSH
44314: LD_INT 1
44316: ARRAY
44317: PUSH
44318: LD_VAR 0 8
44322: PUSH
44323: LD_INT 2
44325: ARRAY
44326: PUSH
44327: LD_VAR 0 13
44331: PUSH
44332: LD_INT 2
44334: PLUS
44335: GREATER
44336: OR
44337: PUSH
44338: LD_VAR 0 8
44342: PUSH
44343: LD_INT 2
44345: ARRAY
44346: PUSH
44347: LD_VAR 0 13
44351: PUSH
44352: LD_INT 2
44354: MINUS
44355: LESS
44356: OR
44357: PUSH
44358: LD_VAR 0 8
44362: PUSH
44363: LD_INT 3
44365: ARRAY
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 8
44372: PUSH
44373: LD_INT 9
44375: PUSH
44376: LD_INT 10
44378: PUSH
44379: LD_INT 11
44381: PUSH
44382: LD_INT 12
44384: PUSH
44385: LD_INT 13
44387: PUSH
44388: LD_INT 16
44390: PUSH
44391: LD_INT 17
44393: PUSH
44394: LD_INT 18
44396: PUSH
44397: LD_INT 19
44399: PUSH
44400: LD_INT 20
44402: PUSH
44403: LD_INT 21
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: IN
44421: NOT
44422: OR
44423: PUSH
44424: LD_VAR 0 8
44428: PUSH
44429: LD_INT 5
44431: ARRAY
44432: NOT
44433: OR
44434: PUSH
44435: LD_VAR 0 8
44439: PUSH
44440: LD_INT 6
44442: ARRAY
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: LD_INT 7
44452: PUSH
44453: LD_INT 9
44455: PUSH
44456: LD_INT 10
44458: PUSH
44459: LD_INT 11
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: IN
44470: NOT
44471: OR
44472: IFFALSE 44478
// exit ;
44474: POP
44475: POP
44476: GO 44561
// end ;
44478: GO 44149
44480: POP
44481: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44482: LD_VAR 0 9
44486: PPUSH
44487: LD_VAR 0 3
44491: PPUSH
44492: LD_VAR 0 4
44496: PPUSH
44497: LD_INT 20
44499: PPUSH
44500: CALL 36513 0 4
44504: PUSH
44505: LD_INT 4
44507: ARRAY
44508: IFFALSE 44512
// exit ;
44510: GO 44561
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44512: LD_VAR 0 2
44516: PUSH
44517: LD_INT 29
44519: PUSH
44520: LD_INT 30
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: IN
44527: PUSH
44528: LD_VAR 0 3
44532: PPUSH
44533: LD_VAR 0 4
44537: PPUSH
44538: LD_VAR 0 9
44542: PPUSH
44543: CALL_OW 440
44547: NOT
44548: AND
44549: IFFALSE 44553
// exit ;
44551: GO 44561
// result := true ;
44553: LD_ADDR_VAR 0 6
44557: PUSH
44558: LD_INT 1
44560: ST_TO_ADDR
// end ;
44561: LD_VAR 0 6
44565: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44566: LD_INT 0
44568: PPUSH
44569: PPUSH
44570: PPUSH
44571: PPUSH
44572: PPUSH
44573: PPUSH
44574: PPUSH
44575: PPUSH
44576: PPUSH
44577: PPUSH
44578: PPUSH
44579: PPUSH
44580: PPUSH
44581: PPUSH
44582: PPUSH
44583: PPUSH
44584: PPUSH
44585: PPUSH
44586: PPUSH
44587: PPUSH
44588: PPUSH
44589: PPUSH
44590: PPUSH
44591: PPUSH
44592: PPUSH
44593: PPUSH
44594: PPUSH
44595: PPUSH
44596: PPUSH
44597: PPUSH
44598: PPUSH
44599: PPUSH
44600: PPUSH
44601: PPUSH
44602: PPUSH
44603: PPUSH
44604: PPUSH
44605: PPUSH
44606: PPUSH
44607: PPUSH
44608: PPUSH
44609: PPUSH
44610: PPUSH
44611: PPUSH
44612: PPUSH
44613: PPUSH
44614: PPUSH
44615: PPUSH
44616: PPUSH
44617: PPUSH
44618: PPUSH
44619: PPUSH
44620: PPUSH
44621: PPUSH
44622: PPUSH
44623: PPUSH
44624: PPUSH
44625: PPUSH
// result = [ ] ;
44626: LD_ADDR_VAR 0 7
44630: PUSH
44631: EMPTY
44632: ST_TO_ADDR
// temp_list = [ ] ;
44633: LD_ADDR_VAR 0 9
44637: PUSH
44638: EMPTY
44639: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44640: LD_VAR 0 4
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: LD_INT 3
44656: PUSH
44657: LD_INT 4
44659: PUSH
44660: LD_INT 5
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: IN
44671: NOT
44672: PUSH
44673: LD_VAR 0 1
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: IN
44688: PUSH
44689: LD_VAR 0 5
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 2
44699: PUSH
44700: LD_INT 3
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: LIST
44707: IN
44708: NOT
44709: AND
44710: OR
44711: IFFALSE 44715
// exit ;
44713: GO 63106
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44715: LD_VAR 0 1
44719: PUSH
44720: LD_INT 6
44722: PUSH
44723: LD_INT 7
44725: PUSH
44726: LD_INT 8
44728: PUSH
44729: LD_INT 13
44731: PUSH
44732: LD_INT 12
44734: PUSH
44735: LD_INT 15
44737: PUSH
44738: LD_INT 11
44740: PUSH
44741: LD_INT 14
44743: PUSH
44744: LD_INT 10
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: IN
44758: IFFALSE 44768
// btype = b_lab ;
44760: LD_ADDR_VAR 0 1
44764: PUSH
44765: LD_INT 6
44767: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44768: LD_VAR 0 6
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: LD_INT 2
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: IN
44787: NOT
44788: PUSH
44789: LD_VAR 0 1
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: LD_INT 3
44805: PUSH
44806: LD_INT 6
44808: PUSH
44809: LD_INT 36
44811: PUSH
44812: LD_INT 4
44814: PUSH
44815: LD_INT 5
44817: PUSH
44818: LD_INT 31
44820: PUSH
44821: LD_INT 32
44823: PUSH
44824: LD_INT 33
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: IN
44840: NOT
44841: PUSH
44842: LD_VAR 0 6
44846: PUSH
44847: LD_INT 1
44849: EQUAL
44850: AND
44851: OR
44852: PUSH
44853: LD_VAR 0 1
44857: PUSH
44858: LD_INT 2
44860: PUSH
44861: LD_INT 3
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: IN
44868: NOT
44869: PUSH
44870: LD_VAR 0 6
44874: PUSH
44875: LD_INT 2
44877: EQUAL
44878: AND
44879: OR
44880: IFFALSE 44890
// mode = 0 ;
44882: LD_ADDR_VAR 0 6
44886: PUSH
44887: LD_INT 0
44889: ST_TO_ADDR
// case mode of 0 :
44890: LD_VAR 0 6
44894: PUSH
44895: LD_INT 0
44897: DOUBLE
44898: EQUAL
44899: IFTRUE 44903
44901: GO 56356
44903: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44904: LD_ADDR_VAR 0 11
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 2
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 3
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 3
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45097: LD_ADDR_VAR 0 12
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 2
45220: NEG
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 2
45231: NEG
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 2
45243: NEG
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 3
45254: NEG
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 3
45265: NEG
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45293: LD_ADDR_VAR 0 13
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: LD_INT 2
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 2
45416: NEG
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: NEG
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: LD_INT 3
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 3
45452: NEG
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 3
45464: NEG
45465: PUSH
45466: LD_INT 3
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45492: LD_ADDR_VAR 0 14
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: LD_INT 2
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 2
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: LD_INT 2
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: LD_INT 3
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 3
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45688: LD_ADDR_VAR 0 15
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 2
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 2
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: NEG
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 3
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45881: LD_ADDR_VAR 0 16
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 2
46016: NEG
46017: PUSH
46018: LD_INT 2
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 3
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 3
46038: PUSH
46039: LD_INT 3
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 2
46048: PUSH
46049: LD_INT 3
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46074: LD_ADDR_VAR 0 17
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: LD_INT 2
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: LD_INT 2
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46304: LD_ADDR_VAR 0 18
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: LD_INT 2
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 2
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 2
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: NEG
46504: PUSH
46505: LD_INT 2
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46534: LD_ADDR_VAR 0 19
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 2
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: LD_INT 2
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46764: LD_ADDR_VAR 0 20
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: LD_INT 2
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 2
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: LD_INT 2
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46994: LD_ADDR_VAR 0 21
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: LD_INT 2
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: LD_INT 2
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: LD_INT 2
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: NEG
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 2
47193: NEG
47194: PUSH
47195: LD_INT 2
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47224: LD_ADDR_VAR 0 22
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: LD_INT 2
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: LD_INT 2
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 2
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 2
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: LD_INT 2
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 2
47400: NEG
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 2
47411: NEG
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 2
47423: NEG
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47454: LD_ADDR_VAR 0 23
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: LD_INT 2
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 2
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 2
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 2
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: LD_INT 2
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: NEG
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: LD_INT 3
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: LD_INT 3
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47734: LD_ADDR_VAR 0 24
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 2
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 2
47933: NEG
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 3
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 3
47977: PUSH
47978: LD_INT 2
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48010: LD_ADDR_VAR 0 25
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 3
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: LD_INT 3
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48284: LD_ADDR_VAR 0 26
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 2
48471: NEG
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: LD_INT 3
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: LD_INT 3
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48560: LD_ADDR_VAR 0 27
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 2
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 2
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: LD_INT 2
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: LD_INT 2
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: NEG
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 3
48793: NEG
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 3
48805: NEG
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48840: LD_ADDR_VAR 0 28
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: LD_INT 3
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: LD_INT 3
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 3
49075: NEG
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 3
49087: NEG
49088: PUSH
49089: LD_INT 2
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49122: LD_ADDR_VAR 0 29
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: LD_INT 2
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: LD_INT 2
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: LD_INT 2
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: LD_INT 2
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 2
49312: NEG
49313: PUSH
49314: LD_INT 3
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 3
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: LD_INT 3
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 3
49366: NEG
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49401: LD_ADDR_VAR 0 30
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: LD_INT 3
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 3
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: LD_INT 3
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 3
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49679: LD_ADDR_VAR 0 31
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: LD_INT 2
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 2
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 2
49803: PUSH
49804: LD_INT 2
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 2
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: LD_INT 3
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 3
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 3
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 3
49922: NEG
49923: PUSH
49924: LD_INT 2
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49957: LD_ADDR_VAR 0 32
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 2
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 2
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: LD_INT 3
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 2
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 3
50169: PUSH
50170: LD_INT 2
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: LD_INT 3
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 3
50200: NEG
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50235: LD_ADDR_VAR 0 33
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 2
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 2
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: LD_INT 2
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: NEG
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 2
50401: NEG
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: NEG
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: LD_INT 3
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 2
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 3
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: LD_INT 3
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 3
50479: NEG
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50514: LD_ADDR_VAR 0 34
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 2
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 2
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: LD_INT 2
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: NEG
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: NEG
50694: PUSH
50695: LD_INT 2
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 3
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 3
50728: PUSH
50729: LD_INT 2
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: LD_INT 3
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 2
50748: NEG
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 3
50759: NEG
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50794: LD_ADDR_VAR 0 35
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50906: LD_ADDR_VAR 0 36
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51018: LD_ADDR_VAR 0 37
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: LD_INT 1
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51130: LD_ADDR_VAR 0 38
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51242: LD_ADDR_VAR 0 39
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: LD_INT 2
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 2
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51354: LD_ADDR_VAR 0 40
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51466: LD_ADDR_VAR 0 41
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: LD_INT 1
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 2
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 2
51590: PUSH
51591: LD_INT 2
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: LD_INT 3
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 3
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 3
51699: PUSH
51700: LD_INT 2
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 3
51709: PUSH
51710: LD_INT 3
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 3
51740: NEG
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 3
51751: NEG
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 3
51763: NEG
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 3
51775: NEG
51776: PUSH
51777: LD_INT 3
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51816: LD_ADDR_VAR 0 42
51820: PUSH
51821: LD_INT 0
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: LD_INT 2
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 2
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: LD_INT 2
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: LD_INT 3
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: LD_INT 3
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 3
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: LD_INT 2
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 3
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 3
52062: PUSH
52063: LD_INT 3
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: LD_INT 3
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: LD_INT 3
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: LD_INT 3
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 3
52113: NEG
52114: PUSH
52115: LD_INT 2
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 3
52125: NEG
52126: PUSH
52127: LD_INT 3
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52166: LD_ADDR_VAR 0 43
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: LD_INT 2
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 2
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: LD_INT 2
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 2
52332: NEG
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 2
52343: NEG
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 3
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 3
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 2
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 3
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 3
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 3
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 3
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 3
52462: NEG
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 3
52473: NEG
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52514: LD_ADDR_VAR 0 44
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: LD_INT 2
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 2
52704: NEG
52705: PUSH
52706: LD_INT 3
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 3
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 3
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 3
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 3
52757: PUSH
52758: LD_INT 3
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: LD_INT 3
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 3
52788: NEG
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 3
52799: NEG
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 3
52811: NEG
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 3
52823: NEG
52824: PUSH
52825: LD_INT 3
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52864: LD_ADDR_VAR 0 45
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: LD_INT 2
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: LD_INT 2
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 2
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 2
52989: PUSH
52990: LD_INT 2
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 2
53030: NEG
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: LD_INT 3
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: LD_INT 3
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: LD_INT 3
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 3
53100: PUSH
53101: LD_INT 2
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 3
53110: PUSH
53111: LD_INT 3
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 2
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 3
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 3
53161: NEG
53162: PUSH
53163: LD_INT 2
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 3
53173: NEG
53174: PUSH
53175: LD_INT 3
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53214: LD_ADDR_VAR 0 46
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 2
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 2
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 2
53380: NEG
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: NEG
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: LD_INT 3
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 3
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 3
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 3
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: LD_INT 3
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: LD_INT 3
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: LD_INT 2
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 3
53510: NEG
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 3
53521: NEG
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53562: LD_ADDR_VAR 0 47
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 2
53677: NEG
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53713: LD_ADDR_VAR 0 48
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: LD_INT 2
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: LD_INT 2
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 2
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53860: LD_ADDR_VAR 0 49
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: LD_INT 2
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54004: LD_ADDR_VAR 0 50
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: LD_INT 1
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: LD_INT 2
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54148: LD_ADDR_VAR 0 51
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 2
54260: NEG
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54295: LD_ADDR_VAR 0 52
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 2
54422: NEG
54423: PUSH
54424: LD_INT 2
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54446: LD_ADDR_VAR 0 53
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: LD_INT 2
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 2
54633: NEG
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: NEG
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54676: LD_ADDR_VAR 0 54
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 2
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54906: LD_ADDR_VAR 0 55
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 2
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: LD_INT 2
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55136: LD_ADDR_VAR 0 56
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 2
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: LD_INT 2
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 2
55323: NEG
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: LD_INT 2
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55366: LD_ADDR_VAR 0 57
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 1
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: NEG
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55596: LD_ADDR_VAR 0 58
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 2
55795: NEG
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55826: LD_ADDR_VAR 0 59
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55914: LD_ADDR_VAR 0 60
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56002: LD_ADDR_VAR 0 61
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56090: LD_ADDR_VAR 0 62
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56178: LD_ADDR_VAR 0 63
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: LD_INT 0
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56266: LD_ADDR_VAR 0 64
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: ST_TO_ADDR
// end ; 1 :
56354: GO 62251
56356: LD_INT 1
56358: DOUBLE
56359: EQUAL
56360: IFTRUE 56364
56362: GO 58987
56364: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56365: LD_ADDR_VAR 0 11
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: LD_INT 3
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: LD_INT 3
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 2
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: LIST
56408: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56409: LD_ADDR_VAR 0 12
56413: PUSH
56414: LD_INT 2
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 3
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 3
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: LIST
56449: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56450: LD_ADDR_VAR 0 13
56454: PUSH
56455: LD_INT 3
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 3
56467: PUSH
56468: LD_INT 3
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: PUSH
56478: LD_INT 3
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: LIST
56489: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56490: LD_ADDR_VAR 0 14
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 3
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: LD_INT 3
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: LIST
56530: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56531: LD_ADDR_VAR 0 15
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 3
56549: NEG
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 3
56560: NEG
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: LIST
56574: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56575: LD_ADDR_VAR 0 16
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: LD_INT 3
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 3
56594: NEG
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 3
56606: NEG
56607: PUSH
56608: LD_INT 3
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: LIST
56620: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56621: LD_ADDR_VAR 0 17
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: LD_INT 3
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: LD_INT 3
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: LIST
56664: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56665: LD_ADDR_VAR 0 18
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 3
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 3
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: LIST
56705: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56706: LD_ADDR_VAR 0 19
56710: PUSH
56711: LD_INT 3
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 3
56723: PUSH
56724: LD_INT 3
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: LD_INT 3
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: LIST
56745: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56746: LD_ADDR_VAR 0 20
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: LD_INT 3
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: LIST
56786: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56787: LD_ADDR_VAR 0 21
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 3
56805: NEG
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 3
56816: NEG
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: LIST
56830: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56831: LD_ADDR_VAR 0 22
56835: PUSH
56836: LD_INT 2
56838: NEG
56839: PUSH
56840: LD_INT 3
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 3
56850: NEG
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 3
56862: NEG
56863: PUSH
56864: LD_INT 3
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: LIST
56876: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56877: LD_ADDR_VAR 0 23
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: LD_INT 4
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 3
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: LIST
56920: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56921: LD_ADDR_VAR 0 24
56925: PUSH
56926: LD_INT 3
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 3
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 4
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: LIST
56961: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56962: LD_ADDR_VAR 0 25
56966: PUSH
56967: LD_INT 3
56969: PUSH
56970: LD_INT 3
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 4
56979: PUSH
56980: LD_INT 3
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 3
56989: PUSH
56990: LD_INT 4
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: LIST
57001: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57002: LD_ADDR_VAR 0 26
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: LD_INT 3
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: LD_INT 4
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: LD_INT 3
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: LIST
57042: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57043: LD_ADDR_VAR 0 27
57047: PUSH
57048: LD_INT 3
57050: NEG
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 3
57061: NEG
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 4
57072: NEG
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57087: LD_ADDR_VAR 0 28
57091: PUSH
57092: LD_INT 3
57094: NEG
57095: PUSH
57096: LD_INT 3
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 3
57106: NEG
57107: PUSH
57108: LD_INT 4
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 4
57118: NEG
57119: PUSH
57120: LD_INT 3
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: LIST
57132: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57133: LD_ADDR_VAR 0 29
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: LD_INT 3
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: LD_INT 3
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: LD_INT 4
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 4
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: LD_INT 3
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: NEG
57209: PUSH
57210: LD_INT 5
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 5
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 4
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: LD_INT 6
57246: NEG
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: LD_INT 6
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: LD_INT 5
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57288: LD_ADDR_VAR 0 30
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 3
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 3
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 3
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 4
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 4
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 4
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 5
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 5
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 5
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 6
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 6
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57431: LD_ADDR_VAR 0 31
57435: PUSH
57436: LD_INT 3
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 3
57448: PUSH
57449: LD_INT 3
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 2
57458: PUSH
57459: LD_INT 3
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 4
57468: PUSH
57469: LD_INT 3
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 4
57478: PUSH
57479: LD_INT 4
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 3
57488: PUSH
57489: LD_INT 4
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 5
57498: PUSH
57499: LD_INT 4
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 5
57508: PUSH
57509: LD_INT 5
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 4
57518: PUSH
57519: LD_INT 5
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 6
57528: PUSH
57529: LD_INT 5
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 6
57538: PUSH
57539: LD_INT 6
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 5
57548: PUSH
57549: LD_INT 6
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57570: LD_ADDR_VAR 0 32
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 3
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: LD_INT 4
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: LD_INT 4
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: LD_INT 3
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: LD_INT 5
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: LD_INT 5
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: LD_INT 4
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: PUSH
57671: LD_INT 6
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: LD_INT 6
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: NEG
57691: PUSH
57692: LD_INT 5
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57713: LD_ADDR_VAR 0 33
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 3
57731: NEG
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 3
57742: NEG
57743: PUSH
57744: LD_INT 1
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 3
57754: NEG
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 4
57765: NEG
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 4
57776: NEG
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 4
57788: NEG
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 5
57799: NEG
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 5
57810: NEG
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 5
57822: NEG
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 6
57833: NEG
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 6
57844: NEG
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57868: LD_ADDR_VAR 0 34
57872: PUSH
57873: LD_INT 2
57875: NEG
57876: PUSH
57877: LD_INT 3
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 3
57887: NEG
57888: PUSH
57889: LD_INT 2
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 3
57899: NEG
57900: PUSH
57901: LD_INT 3
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 3
57911: NEG
57912: PUSH
57913: LD_INT 4
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 4
57923: NEG
57924: PUSH
57925: LD_INT 3
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 4
57935: NEG
57936: PUSH
57937: LD_INT 4
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 4
57947: NEG
57948: PUSH
57949: LD_INT 5
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 5
57959: NEG
57960: PUSH
57961: LD_INT 4
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 5
57971: NEG
57972: PUSH
57973: LD_INT 5
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 5
57983: NEG
57984: PUSH
57985: LD_INT 6
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 6
57995: NEG
57996: PUSH
57997: LD_INT 5
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 6
58007: NEG
58008: PUSH
58009: LD_INT 6
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58031: LD_ADDR_VAR 0 41
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: LD_INT 2
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: LD_INT 3
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: LD_INT 2
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: LIST
58074: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58075: LD_ADDR_VAR 0 42
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 2
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 3
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: LIST
58115: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58116: LD_ADDR_VAR 0 43
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: LD_INT 2
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 3
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: LIST
58155: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58156: LD_ADDR_VAR 0 44
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: LD_INT 3
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: LD_INT 2
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: LIST
58196: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58197: LD_ADDR_VAR 0 45
58201: PUSH
58202: LD_INT 2
58204: NEG
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: NEG
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 3
58226: NEG
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: LIST
58240: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58241: LD_ADDR_VAR 0 46
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: LD_INT 2
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: LD_INT 3
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 3
58272: NEG
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: LIST
58286: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58287: LD_ADDR_VAR 0 47
58291: PUSH
58292: LD_INT 2
58294: NEG
58295: PUSH
58296: LD_INT 3
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 3
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58320: LD_ADDR_VAR 0 48
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58351: LD_ADDR_VAR 0 49
58355: PUSH
58356: LD_INT 3
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 3
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58380: LD_ADDR_VAR 0 50
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: LD_INT 3
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: LD_INT 3
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58409: LD_ADDR_VAR 0 51
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 2
58427: NEG
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58440: LD_ADDR_VAR 0 52
58444: PUSH
58445: LD_INT 3
58447: NEG
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 3
58459: NEG
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58473: LD_ADDR_VAR 0 53
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: LD_INT 3
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: LD_INT 3
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: LD_INT 2
58506: NEG
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: LIST
58516: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58517: LD_ADDR_VAR 0 54
58521: PUSH
58522: LD_INT 2
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 3
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: LIST
58557: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58558: LD_ADDR_VAR 0 55
58562: PUSH
58563: LD_INT 3
58565: PUSH
58566: LD_INT 2
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 3
58575: PUSH
58576: LD_INT 3
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: LIST
58597: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58598: LD_ADDR_VAR 0 56
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: LD_INT 3
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: LD_INT 3
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: NEG
58626: PUSH
58627: LD_INT 2
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: LIST
58638: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58639: LD_ADDR_VAR 0 57
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 3
58657: NEG
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 3
58668: NEG
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: LIST
58682: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58683: LD_ADDR_VAR 0 58
58687: PUSH
58688: LD_INT 2
58690: NEG
58691: PUSH
58692: LD_INT 3
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 3
58702: NEG
58703: PUSH
58704: LD_INT 2
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 3
58714: NEG
58715: PUSH
58716: LD_INT 3
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: LIST
58728: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58729: LD_ADDR_VAR 0 59
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: LD_INT 2
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: LIST
58772: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58773: LD_ADDR_VAR 0 60
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 2
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: LIST
58813: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58814: LD_ADDR_VAR 0 61
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: LD_INT 1
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: LD_INT 2
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: LIST
58853: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58854: LD_ADDR_VAR 0 62
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 2
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: LIST
58894: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58895: LD_ADDR_VAR 0 63
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: LIST
58938: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58939: LD_ADDR_VAR 0 64
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: LD_INT 2
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: NEG
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 2
58970: NEG
58971: PUSH
58972: LD_INT 2
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: LIST
58984: ST_TO_ADDR
// end ; 2 :
58985: GO 62251
58987: LD_INT 2
58989: DOUBLE
58990: EQUAL
58991: IFTRUE 58995
58993: GO 62250
58995: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58996: LD_ADDR_VAR 0 29
59000: PUSH
59001: LD_INT 4
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 4
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 5
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 5
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 4
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 3
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 3
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 3
59075: PUSH
59076: LD_INT 2
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 5
59086: PUSH
59087: LD_INT 2
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 3
59096: PUSH
59097: LD_INT 3
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: LD_INT 2
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 4
59116: PUSH
59117: LD_INT 3
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 4
59126: PUSH
59127: LD_INT 4
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 3
59136: PUSH
59137: LD_INT 4
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: LD_INT 3
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: LD_INT 2
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 4
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: LD_INT 4
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: LD_INT 4
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: LD_INT 3
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: LD_INT 4
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: LD_INT 5
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: LD_INT 5
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: LD_INT 4
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: LD_INT 3
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 5
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 2
59268: NEG
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 3
59279: NEG
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 3
59290: NEG
59291: PUSH
59292: LD_INT 1
59294: NEG
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 2
59302: NEG
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 2
59313: NEG
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 3
59324: NEG
59325: PUSH
59326: LD_INT 1
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 4
59335: NEG
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 4
59346: NEG
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 4
59358: NEG
59359: PUSH
59360: LD_INT 2
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 2
59370: NEG
59371: PUSH
59372: LD_INT 2
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 4
59381: NEG
59382: PUSH
59383: LD_INT 4
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 4
59393: NEG
59394: PUSH
59395: LD_INT 5
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 3
59405: NEG
59406: PUSH
59407: LD_INT 4
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 3
59417: NEG
59418: PUSH
59419: LD_INT 3
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 4
59429: NEG
59430: PUSH
59431: LD_INT 3
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 5
59441: NEG
59442: PUSH
59443: LD_INT 4
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 5
59453: NEG
59454: PUSH
59455: LD_INT 5
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 3
59465: NEG
59466: PUSH
59467: LD_INT 5
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 5
59477: NEG
59478: PUSH
59479: LD_INT 3
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59534: LD_ADDR_VAR 0 30
59538: PUSH
59539: LD_INT 4
59541: PUSH
59542: LD_INT 4
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 4
59551: PUSH
59552: LD_INT 3
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 5
59561: PUSH
59562: LD_INT 4
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 5
59571: PUSH
59572: LD_INT 5
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 4
59581: PUSH
59582: LD_INT 5
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 3
59591: PUSH
59592: LD_INT 4
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 3
59601: PUSH
59602: LD_INT 3
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 5
59611: PUSH
59612: LD_INT 3
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 3
59621: PUSH
59622: LD_INT 5
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: LD_INT 3
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: LD_INT 2
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: LD_INT 3
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: LD_INT 4
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: LD_INT 4
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: LD_INT 3
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: LD_INT 2
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 2
59703: PUSH
59704: LD_INT 4
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 2
59713: NEG
59714: PUSH
59715: LD_INT 2
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 4
59724: NEG
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 4
59735: NEG
59736: PUSH
59737: LD_INT 1
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 3
59747: NEG
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 3
59758: NEG
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 4
59769: NEG
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 5
59780: NEG
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 5
59791: NEG
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 5
59803: NEG
59804: PUSH
59805: LD_INT 2
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 3
59815: NEG
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 3
59826: NEG
59827: PUSH
59828: LD_INT 3
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 3
59838: NEG
59839: PUSH
59840: LD_INT 4
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 2
59850: NEG
59851: PUSH
59852: LD_INT 3
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: NEG
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 3
59874: NEG
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 4
59886: NEG
59887: PUSH
59888: LD_INT 3
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 4
59898: NEG
59899: PUSH
59900: LD_INT 4
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 2
59910: NEG
59911: PUSH
59912: LD_INT 4
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 4
59922: NEG
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 0
59934: PUSH
59935: LD_INT 4
59937: NEG
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: LD_INT 5
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: LD_INT 4
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: LD_INT 3
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: LD_INT 3
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: LD_INT 4
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: LD_INT 5
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: PUSH
60014: LD_INT 3
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: NEG
60025: PUSH
60026: LD_INT 5
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60081: LD_ADDR_VAR 0 31
60085: PUSH
60086: LD_INT 0
60088: PUSH
60089: LD_INT 4
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: LD_INT 3
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: LD_INT 4
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: LD_INT 5
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: LD_INT 5
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 1
60138: NEG
60139: PUSH
60140: LD_INT 4
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 1
60149: NEG
60150: PUSH
60151: LD_INT 3
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 2
60160: PUSH
60161: LD_INT 5
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 2
60170: NEG
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 3
60181: NEG
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 3
60192: NEG
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 2
60204: NEG
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 2
60215: NEG
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 3
60226: NEG
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 4
60237: NEG
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 4
60248: NEG
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 4
60260: NEG
60261: PUSH
60262: LD_INT 2
60264: NEG
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 2
60272: NEG
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 4
60283: NEG
60284: PUSH
60285: LD_INT 4
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 4
60295: NEG
60296: PUSH
60297: LD_INT 5
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 3
60307: NEG
60308: PUSH
60309: LD_INT 4
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 3
60319: NEG
60320: PUSH
60321: LD_INT 3
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 4
60331: NEG
60332: PUSH
60333: LD_INT 3
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 5
60343: NEG
60344: PUSH
60345: LD_INT 4
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 5
60355: NEG
60356: PUSH
60357: LD_INT 5
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 3
60367: NEG
60368: PUSH
60369: LD_INT 5
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 5
60379: NEG
60380: PUSH
60381: LD_INT 3
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: LD_INT 3
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 4
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: PUSH
60414: LD_INT 3
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: LD_INT 2
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 0
60435: PUSH
60436: LD_INT 2
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: LD_INT 3
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: LD_INT 4
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 2
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 2
60481: NEG
60482: PUSH
60483: LD_INT 4
60485: NEG
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 4
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 4
60503: PUSH
60504: LD_INT 1
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 5
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 5
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 4
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 3
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 3
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 3
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 5
60576: PUSH
60577: LD_INT 2
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60631: LD_ADDR_VAR 0 32
60635: PUSH
60636: LD_INT 4
60638: NEG
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 4
60649: NEG
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 3
60661: NEG
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 3
60672: NEG
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 4
60683: NEG
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 5
60694: NEG
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 5
60705: NEG
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 5
60717: NEG
60718: PUSH
60719: LD_INT 2
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 3
60729: NEG
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 3
60740: NEG
60741: PUSH
60742: LD_INT 3
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 3
60752: NEG
60753: PUSH
60754: LD_INT 4
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: LD_INT 3
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 2
60776: NEG
60777: PUSH
60778: LD_INT 2
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 3
60788: NEG
60789: PUSH
60790: LD_INT 2
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 4
60800: NEG
60801: PUSH
60802: LD_INT 3
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 4
60812: NEG
60813: PUSH
60814: LD_INT 4
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 2
60824: NEG
60825: PUSH
60826: LD_INT 4
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 4
60836: NEG
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: LD_INT 4
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: LD_INT 5
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: LD_INT 4
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: LD_INT 3
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: LD_INT 3
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: LD_INT 4
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: LD_INT 5
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 2
60927: PUSH
60928: LD_INT 3
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 2
60938: NEG
60939: PUSH
60940: LD_INT 5
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 3
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 3
60960: PUSH
60961: LD_INT 1
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 4
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 4
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 3
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 2
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 2
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 2
61022: PUSH
61023: LD_INT 2
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 4
61033: PUSH
61034: LD_INT 2
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 4
61043: PUSH
61044: LD_INT 4
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 4
61053: PUSH
61054: LD_INT 3
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 5
61063: PUSH
61064: LD_INT 4
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 5
61073: PUSH
61074: LD_INT 5
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 4
61083: PUSH
61084: LD_INT 5
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 3
61093: PUSH
61094: LD_INT 4
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 3
61103: PUSH
61104: LD_INT 3
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 5
61113: PUSH
61114: LD_INT 3
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 3
61123: PUSH
61124: LD_INT 5
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61178: LD_ADDR_VAR 0 33
61182: PUSH
61183: LD_INT 4
61185: NEG
61186: PUSH
61187: LD_INT 4
61189: NEG
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 4
61197: NEG
61198: PUSH
61199: LD_INT 5
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 3
61209: NEG
61210: PUSH
61211: LD_INT 4
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 3
61221: NEG
61222: PUSH
61223: LD_INT 3
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 4
61233: NEG
61234: PUSH
61235: LD_INT 3
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 5
61245: NEG
61246: PUSH
61247: LD_INT 4
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 5
61257: NEG
61258: PUSH
61259: LD_INT 5
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 3
61269: NEG
61270: PUSH
61271: LD_INT 5
61273: NEG
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 5
61281: NEG
61282: PUSH
61283: LD_INT 3
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: LD_INT 3
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: LD_INT 4
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 1
61315: PUSH
61316: LD_INT 3
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: LD_INT 2
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: LD_INT 2
61340: NEG
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: LD_INT 3
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: NEG
61361: PUSH
61362: LD_INT 4
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 2
61372: PUSH
61373: LD_INT 2
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 2
61383: NEG
61384: PUSH
61385: LD_INT 4
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 4
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 4
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 5
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 5
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 4
61436: PUSH
61437: LD_INT 1
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 3
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 3
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 3
61467: PUSH
61468: LD_INT 2
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 5
61478: PUSH
61479: LD_INT 2
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 3
61488: PUSH
61489: LD_INT 3
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 3
61498: PUSH
61499: LD_INT 2
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 4
61508: PUSH
61509: LD_INT 3
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 4
61518: PUSH
61519: LD_INT 4
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 3
61528: PUSH
61529: LD_INT 4
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: LD_INT 3
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 2
61548: PUSH
61549: LD_INT 2
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 4
61558: PUSH
61559: LD_INT 2
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: LD_INT 4
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: LD_INT 4
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: LD_INT 3
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: LD_INT 4
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: LD_INT 5
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: LD_INT 5
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: LD_INT 4
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: LD_INT 5
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 2
61660: NEG
61661: PUSH
61662: LD_INT 3
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61716: LD_ADDR_VAR 0 34
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: LD_INT 4
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: LD_INT 5
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 1
61745: PUSH
61746: LD_INT 4
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: LD_INT 3
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: LD_INT 3
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: LD_INT 4
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: NEG
61791: PUSH
61792: LD_INT 5
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 2
61802: PUSH
61803: LD_INT 3
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 2
61813: NEG
61814: PUSH
61815: LD_INT 5
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 3
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 3
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 4
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 4
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 3
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 2
61886: PUSH
61887: LD_INT 1
61889: NEG
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 2
61897: PUSH
61898: LD_INT 2
61900: NEG
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 4
61908: PUSH
61909: LD_INT 2
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 4
61918: PUSH
61919: LD_INT 4
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 4
61928: PUSH
61929: LD_INT 3
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 5
61938: PUSH
61939: LD_INT 4
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 5
61948: PUSH
61949: LD_INT 5
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 4
61958: PUSH
61959: LD_INT 5
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 3
61968: PUSH
61969: LD_INT 4
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 3
61978: PUSH
61979: LD_INT 3
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 5
61988: PUSH
61989: LD_INT 3
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 3
61998: PUSH
61999: LD_INT 5
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 0
62008: PUSH
62009: LD_INT 3
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 0
62018: PUSH
62019: LD_INT 2
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 1
62028: PUSH
62029: LD_INT 3
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: PUSH
62039: LD_INT 4
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: LD_INT 4
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: LD_INT 3
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: LD_INT 2
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 2
62080: PUSH
62081: LD_INT 4
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 2
62090: NEG
62091: PUSH
62092: LD_INT 2
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 4
62101: NEG
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 4
62112: NEG
62113: PUSH
62114: LD_INT 1
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 3
62124: NEG
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 3
62135: NEG
62136: PUSH
62137: LD_INT 1
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 4
62146: NEG
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 5
62157: NEG
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 5
62168: NEG
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 5
62180: NEG
62181: PUSH
62182: LD_INT 2
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 3
62192: NEG
62193: PUSH
62194: LD_INT 2
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: ST_TO_ADDR
// end ; end ;
62248: GO 62251
62250: POP
// case btype of b_depot , b_warehouse :
62251: LD_VAR 0 1
62255: PUSH
62256: LD_INT 0
62258: DOUBLE
62259: EQUAL
62260: IFTRUE 62270
62262: LD_INT 1
62264: DOUBLE
62265: EQUAL
62266: IFTRUE 62270
62268: GO 62471
62270: POP
// case nation of nation_american :
62271: LD_VAR 0 5
62275: PUSH
62276: LD_INT 1
62278: DOUBLE
62279: EQUAL
62280: IFTRUE 62284
62282: GO 62340
62284: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62285: LD_ADDR_VAR 0 9
62289: PUSH
62290: LD_VAR 0 11
62294: PUSH
62295: LD_VAR 0 12
62299: PUSH
62300: LD_VAR 0 13
62304: PUSH
62305: LD_VAR 0 14
62309: PUSH
62310: LD_VAR 0 15
62314: PUSH
62315: LD_VAR 0 16
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: PUSH
62328: LD_VAR 0 4
62332: PUSH
62333: LD_INT 1
62335: PLUS
62336: ARRAY
62337: ST_TO_ADDR
62338: GO 62469
62340: LD_INT 2
62342: DOUBLE
62343: EQUAL
62344: IFTRUE 62348
62346: GO 62404
62348: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62349: LD_ADDR_VAR 0 9
62353: PUSH
62354: LD_VAR 0 17
62358: PUSH
62359: LD_VAR 0 18
62363: PUSH
62364: LD_VAR 0 19
62368: PUSH
62369: LD_VAR 0 20
62373: PUSH
62374: LD_VAR 0 21
62378: PUSH
62379: LD_VAR 0 22
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: PUSH
62392: LD_VAR 0 4
62396: PUSH
62397: LD_INT 1
62399: PLUS
62400: ARRAY
62401: ST_TO_ADDR
62402: GO 62469
62404: LD_INT 3
62406: DOUBLE
62407: EQUAL
62408: IFTRUE 62412
62410: GO 62468
62412: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62413: LD_ADDR_VAR 0 9
62417: PUSH
62418: LD_VAR 0 23
62422: PUSH
62423: LD_VAR 0 24
62427: PUSH
62428: LD_VAR 0 25
62432: PUSH
62433: LD_VAR 0 26
62437: PUSH
62438: LD_VAR 0 27
62442: PUSH
62443: LD_VAR 0 28
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: PUSH
62456: LD_VAR 0 4
62460: PUSH
62461: LD_INT 1
62463: PLUS
62464: ARRAY
62465: ST_TO_ADDR
62466: GO 62469
62468: POP
62469: GO 63024
62471: LD_INT 2
62473: DOUBLE
62474: EQUAL
62475: IFTRUE 62485
62477: LD_INT 3
62479: DOUBLE
62480: EQUAL
62481: IFTRUE 62485
62483: GO 62541
62485: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62486: LD_ADDR_VAR 0 9
62490: PUSH
62491: LD_VAR 0 29
62495: PUSH
62496: LD_VAR 0 30
62500: PUSH
62501: LD_VAR 0 31
62505: PUSH
62506: LD_VAR 0 32
62510: PUSH
62511: LD_VAR 0 33
62515: PUSH
62516: LD_VAR 0 34
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: PUSH
62529: LD_VAR 0 4
62533: PUSH
62534: LD_INT 1
62536: PLUS
62537: ARRAY
62538: ST_TO_ADDR
62539: GO 63024
62541: LD_INT 16
62543: DOUBLE
62544: EQUAL
62545: IFTRUE 62603
62547: LD_INT 17
62549: DOUBLE
62550: EQUAL
62551: IFTRUE 62603
62553: LD_INT 18
62555: DOUBLE
62556: EQUAL
62557: IFTRUE 62603
62559: LD_INT 19
62561: DOUBLE
62562: EQUAL
62563: IFTRUE 62603
62565: LD_INT 22
62567: DOUBLE
62568: EQUAL
62569: IFTRUE 62603
62571: LD_INT 20
62573: DOUBLE
62574: EQUAL
62575: IFTRUE 62603
62577: LD_INT 21
62579: DOUBLE
62580: EQUAL
62581: IFTRUE 62603
62583: LD_INT 23
62585: DOUBLE
62586: EQUAL
62587: IFTRUE 62603
62589: LD_INT 24
62591: DOUBLE
62592: EQUAL
62593: IFTRUE 62603
62595: LD_INT 25
62597: DOUBLE
62598: EQUAL
62599: IFTRUE 62603
62601: GO 62659
62603: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62604: LD_ADDR_VAR 0 9
62608: PUSH
62609: LD_VAR 0 35
62613: PUSH
62614: LD_VAR 0 36
62618: PUSH
62619: LD_VAR 0 37
62623: PUSH
62624: LD_VAR 0 38
62628: PUSH
62629: LD_VAR 0 39
62633: PUSH
62634: LD_VAR 0 40
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: PUSH
62647: LD_VAR 0 4
62651: PUSH
62652: LD_INT 1
62654: PLUS
62655: ARRAY
62656: ST_TO_ADDR
62657: GO 63024
62659: LD_INT 6
62661: DOUBLE
62662: EQUAL
62663: IFTRUE 62715
62665: LD_INT 7
62667: DOUBLE
62668: EQUAL
62669: IFTRUE 62715
62671: LD_INT 8
62673: DOUBLE
62674: EQUAL
62675: IFTRUE 62715
62677: LD_INT 13
62679: DOUBLE
62680: EQUAL
62681: IFTRUE 62715
62683: LD_INT 12
62685: DOUBLE
62686: EQUAL
62687: IFTRUE 62715
62689: LD_INT 15
62691: DOUBLE
62692: EQUAL
62693: IFTRUE 62715
62695: LD_INT 11
62697: DOUBLE
62698: EQUAL
62699: IFTRUE 62715
62701: LD_INT 14
62703: DOUBLE
62704: EQUAL
62705: IFTRUE 62715
62707: LD_INT 10
62709: DOUBLE
62710: EQUAL
62711: IFTRUE 62715
62713: GO 62771
62715: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62716: LD_ADDR_VAR 0 9
62720: PUSH
62721: LD_VAR 0 41
62725: PUSH
62726: LD_VAR 0 42
62730: PUSH
62731: LD_VAR 0 43
62735: PUSH
62736: LD_VAR 0 44
62740: PUSH
62741: LD_VAR 0 45
62745: PUSH
62746: LD_VAR 0 46
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: PUSH
62759: LD_VAR 0 4
62763: PUSH
62764: LD_INT 1
62766: PLUS
62767: ARRAY
62768: ST_TO_ADDR
62769: GO 63024
62771: LD_INT 36
62773: DOUBLE
62774: EQUAL
62775: IFTRUE 62779
62777: GO 62835
62779: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62780: LD_ADDR_VAR 0 9
62784: PUSH
62785: LD_VAR 0 47
62789: PUSH
62790: LD_VAR 0 48
62794: PUSH
62795: LD_VAR 0 49
62799: PUSH
62800: LD_VAR 0 50
62804: PUSH
62805: LD_VAR 0 51
62809: PUSH
62810: LD_VAR 0 52
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: PUSH
62823: LD_VAR 0 4
62827: PUSH
62828: LD_INT 1
62830: PLUS
62831: ARRAY
62832: ST_TO_ADDR
62833: GO 63024
62835: LD_INT 4
62837: DOUBLE
62838: EQUAL
62839: IFTRUE 62861
62841: LD_INT 5
62843: DOUBLE
62844: EQUAL
62845: IFTRUE 62861
62847: LD_INT 34
62849: DOUBLE
62850: EQUAL
62851: IFTRUE 62861
62853: LD_INT 37
62855: DOUBLE
62856: EQUAL
62857: IFTRUE 62861
62859: GO 62917
62861: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62862: LD_ADDR_VAR 0 9
62866: PUSH
62867: LD_VAR 0 53
62871: PUSH
62872: LD_VAR 0 54
62876: PUSH
62877: LD_VAR 0 55
62881: PUSH
62882: LD_VAR 0 56
62886: PUSH
62887: LD_VAR 0 57
62891: PUSH
62892: LD_VAR 0 58
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: PUSH
62905: LD_VAR 0 4
62909: PUSH
62910: LD_INT 1
62912: PLUS
62913: ARRAY
62914: ST_TO_ADDR
62915: GO 63024
62917: LD_INT 31
62919: DOUBLE
62920: EQUAL
62921: IFTRUE 62967
62923: LD_INT 32
62925: DOUBLE
62926: EQUAL
62927: IFTRUE 62967
62929: LD_INT 33
62931: DOUBLE
62932: EQUAL
62933: IFTRUE 62967
62935: LD_INT 27
62937: DOUBLE
62938: EQUAL
62939: IFTRUE 62967
62941: LD_INT 26
62943: DOUBLE
62944: EQUAL
62945: IFTRUE 62967
62947: LD_INT 28
62949: DOUBLE
62950: EQUAL
62951: IFTRUE 62967
62953: LD_INT 29
62955: DOUBLE
62956: EQUAL
62957: IFTRUE 62967
62959: LD_INT 30
62961: DOUBLE
62962: EQUAL
62963: IFTRUE 62967
62965: GO 63023
62967: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62968: LD_ADDR_VAR 0 9
62972: PUSH
62973: LD_VAR 0 59
62977: PUSH
62978: LD_VAR 0 60
62982: PUSH
62983: LD_VAR 0 61
62987: PUSH
62988: LD_VAR 0 62
62992: PUSH
62993: LD_VAR 0 63
62997: PUSH
62998: LD_VAR 0 64
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: PUSH
63011: LD_VAR 0 4
63015: PUSH
63016: LD_INT 1
63018: PLUS
63019: ARRAY
63020: ST_TO_ADDR
63021: GO 63024
63023: POP
// temp_list2 = [ ] ;
63024: LD_ADDR_VAR 0 10
63028: PUSH
63029: EMPTY
63030: ST_TO_ADDR
// for i in temp_list do
63031: LD_ADDR_VAR 0 8
63035: PUSH
63036: LD_VAR 0 9
63040: PUSH
63041: FOR_IN
63042: IFFALSE 63094
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63044: LD_ADDR_VAR 0 10
63048: PUSH
63049: LD_VAR 0 10
63053: PUSH
63054: LD_VAR 0 8
63058: PUSH
63059: LD_INT 1
63061: ARRAY
63062: PUSH
63063: LD_VAR 0 2
63067: PLUS
63068: PUSH
63069: LD_VAR 0 8
63073: PUSH
63074: LD_INT 2
63076: ARRAY
63077: PUSH
63078: LD_VAR 0 3
63082: PLUS
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: EMPTY
63089: LIST
63090: ADD
63091: ST_TO_ADDR
63092: GO 63041
63094: POP
63095: POP
// result = temp_list2 ;
63096: LD_ADDR_VAR 0 7
63100: PUSH
63101: LD_VAR 0 10
63105: ST_TO_ADDR
// end ;
63106: LD_VAR 0 7
63110: RET
// export function EnemyInRange ( unit , dist ) ; begin
63111: LD_INT 0
63113: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63114: LD_ADDR_VAR 0 3
63118: PUSH
63119: LD_VAR 0 1
63123: PPUSH
63124: CALL_OW 255
63128: PPUSH
63129: LD_VAR 0 1
63133: PPUSH
63134: CALL_OW 250
63138: PPUSH
63139: LD_VAR 0 1
63143: PPUSH
63144: CALL_OW 251
63148: PPUSH
63149: LD_VAR 0 2
63153: PPUSH
63154: CALL 36513 0 4
63158: PUSH
63159: LD_INT 4
63161: ARRAY
63162: ST_TO_ADDR
// end ;
63163: LD_VAR 0 3
63167: RET
// export function PlayerSeeMe ( unit ) ; begin
63168: LD_INT 0
63170: PPUSH
// result := See ( your_side , unit ) ;
63171: LD_ADDR_VAR 0 2
63175: PUSH
63176: LD_OWVAR 2
63180: PPUSH
63181: LD_VAR 0 1
63185: PPUSH
63186: CALL_OW 292
63190: ST_TO_ADDR
// end ;
63191: LD_VAR 0 2
63195: RET
// export function ReverseDir ( unit ) ; begin
63196: LD_INT 0
63198: PPUSH
// if not unit then
63199: LD_VAR 0 1
63203: NOT
63204: IFFALSE 63208
// exit ;
63206: GO 63231
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63208: LD_ADDR_VAR 0 2
63212: PUSH
63213: LD_VAR 0 1
63217: PPUSH
63218: CALL_OW 254
63222: PUSH
63223: LD_INT 3
63225: PLUS
63226: PUSH
63227: LD_INT 6
63229: MOD
63230: ST_TO_ADDR
// end ;
63231: LD_VAR 0 2
63235: RET
// export function ReverseArray ( array ) ; var i ; begin
63236: LD_INT 0
63238: PPUSH
63239: PPUSH
// if not array then
63240: LD_VAR 0 1
63244: NOT
63245: IFFALSE 63249
// exit ;
63247: GO 63304
// result := [ ] ;
63249: LD_ADDR_VAR 0 2
63253: PUSH
63254: EMPTY
63255: ST_TO_ADDR
// for i := array downto 1 do
63256: LD_ADDR_VAR 0 3
63260: PUSH
63261: DOUBLE
63262: LD_VAR 0 1
63266: INC
63267: ST_TO_ADDR
63268: LD_INT 1
63270: PUSH
63271: FOR_DOWNTO
63272: IFFALSE 63302
// result := Join ( result , array [ i ] ) ;
63274: LD_ADDR_VAR 0 2
63278: PUSH
63279: LD_VAR 0 2
63283: PPUSH
63284: LD_VAR 0 1
63288: PUSH
63289: LD_VAR 0 3
63293: ARRAY
63294: PPUSH
63295: CALL 67948 0 2
63299: ST_TO_ADDR
63300: GO 63271
63302: POP
63303: POP
// end ;
63304: LD_VAR 0 2
63308: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63309: LD_INT 0
63311: PPUSH
63312: PPUSH
63313: PPUSH
63314: PPUSH
63315: PPUSH
63316: PPUSH
// if not unit or not hexes then
63317: LD_VAR 0 1
63321: NOT
63322: PUSH
63323: LD_VAR 0 2
63327: NOT
63328: OR
63329: IFFALSE 63333
// exit ;
63331: GO 63456
// dist := 9999 ;
63333: LD_ADDR_VAR 0 5
63337: PUSH
63338: LD_INT 9999
63340: ST_TO_ADDR
// for i = 1 to hexes do
63341: LD_ADDR_VAR 0 4
63345: PUSH
63346: DOUBLE
63347: LD_INT 1
63349: DEC
63350: ST_TO_ADDR
63351: LD_VAR 0 2
63355: PUSH
63356: FOR_TO
63357: IFFALSE 63444
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63359: LD_ADDR_VAR 0 6
63363: PUSH
63364: LD_VAR 0 1
63368: PPUSH
63369: LD_VAR 0 2
63373: PUSH
63374: LD_VAR 0 4
63378: ARRAY
63379: PUSH
63380: LD_INT 1
63382: ARRAY
63383: PPUSH
63384: LD_VAR 0 2
63388: PUSH
63389: LD_VAR 0 4
63393: ARRAY
63394: PUSH
63395: LD_INT 2
63397: ARRAY
63398: PPUSH
63399: CALL_OW 297
63403: ST_TO_ADDR
// if tdist < dist then
63404: LD_VAR 0 6
63408: PUSH
63409: LD_VAR 0 5
63413: LESS
63414: IFFALSE 63442
// begin hex := hexes [ i ] ;
63416: LD_ADDR_VAR 0 8
63420: PUSH
63421: LD_VAR 0 2
63425: PUSH
63426: LD_VAR 0 4
63430: ARRAY
63431: ST_TO_ADDR
// dist := tdist ;
63432: LD_ADDR_VAR 0 5
63436: PUSH
63437: LD_VAR 0 6
63441: ST_TO_ADDR
// end ; end ;
63442: GO 63356
63444: POP
63445: POP
// result := hex ;
63446: LD_ADDR_VAR 0 3
63450: PUSH
63451: LD_VAR 0 8
63455: ST_TO_ADDR
// end ;
63456: LD_VAR 0 3
63460: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63461: LD_INT 0
63463: PPUSH
63464: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63465: LD_VAR 0 1
63469: NOT
63470: PUSH
63471: LD_VAR 0 1
63475: PUSH
63476: LD_INT 21
63478: PUSH
63479: LD_INT 2
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 23
63488: PUSH
63489: LD_INT 2
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PPUSH
63500: CALL_OW 69
63504: IN
63505: NOT
63506: OR
63507: IFFALSE 63511
// exit ;
63509: GO 63558
// for i = 1 to 3 do
63511: LD_ADDR_VAR 0 3
63515: PUSH
63516: DOUBLE
63517: LD_INT 1
63519: DEC
63520: ST_TO_ADDR
63521: LD_INT 3
63523: PUSH
63524: FOR_TO
63525: IFFALSE 63556
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63527: LD_VAR 0 1
63531: PPUSH
63532: CALL_OW 250
63536: PPUSH
63537: LD_VAR 0 1
63541: PPUSH
63542: CALL_OW 251
63546: PPUSH
63547: LD_INT 1
63549: PPUSH
63550: CALL_OW 453
63554: GO 63524
63556: POP
63557: POP
// end ;
63558: LD_VAR 0 2
63562: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63563: LD_INT 0
63565: PPUSH
63566: PPUSH
63567: PPUSH
63568: PPUSH
63569: PPUSH
63570: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63571: LD_VAR 0 1
63575: NOT
63576: PUSH
63577: LD_VAR 0 2
63581: NOT
63582: OR
63583: PUSH
63584: LD_VAR 0 1
63588: PPUSH
63589: CALL_OW 314
63593: OR
63594: IFFALSE 63598
// exit ;
63596: GO 64065
// if GetLives ( i ) < 250 then
63598: LD_VAR 0 4
63602: PPUSH
63603: CALL_OW 256
63607: PUSH
63608: LD_INT 250
63610: LESS
63611: IFFALSE 63624
// begin ComAutodestruct ( i ) ;
63613: LD_VAR 0 4
63617: PPUSH
63618: CALL 63461 0 1
// exit ;
63622: GO 64065
// end ; x := GetX ( enemy_unit ) ;
63624: LD_ADDR_VAR 0 7
63628: PUSH
63629: LD_VAR 0 2
63633: PPUSH
63634: CALL_OW 250
63638: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63639: LD_ADDR_VAR 0 8
63643: PUSH
63644: LD_VAR 0 2
63648: PPUSH
63649: CALL_OW 251
63653: ST_TO_ADDR
// if not x or not y then
63654: LD_VAR 0 7
63658: NOT
63659: PUSH
63660: LD_VAR 0 8
63664: NOT
63665: OR
63666: IFFALSE 63670
// exit ;
63668: GO 64065
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63670: LD_ADDR_VAR 0 6
63674: PUSH
63675: LD_VAR 0 7
63679: PPUSH
63680: LD_INT 0
63682: PPUSH
63683: LD_INT 4
63685: PPUSH
63686: CALL_OW 272
63690: PUSH
63691: LD_VAR 0 8
63695: PPUSH
63696: LD_INT 0
63698: PPUSH
63699: LD_INT 4
63701: PPUSH
63702: CALL_OW 273
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_VAR 0 7
63715: PPUSH
63716: LD_INT 1
63718: PPUSH
63719: LD_INT 4
63721: PPUSH
63722: CALL_OW 272
63726: PUSH
63727: LD_VAR 0 8
63731: PPUSH
63732: LD_INT 1
63734: PPUSH
63735: LD_INT 4
63737: PPUSH
63738: CALL_OW 273
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_VAR 0 7
63751: PPUSH
63752: LD_INT 2
63754: PPUSH
63755: LD_INT 4
63757: PPUSH
63758: CALL_OW 272
63762: PUSH
63763: LD_VAR 0 8
63767: PPUSH
63768: LD_INT 2
63770: PPUSH
63771: LD_INT 4
63773: PPUSH
63774: CALL_OW 273
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_VAR 0 7
63787: PPUSH
63788: LD_INT 3
63790: PPUSH
63791: LD_INT 4
63793: PPUSH
63794: CALL_OW 272
63798: PUSH
63799: LD_VAR 0 8
63803: PPUSH
63804: LD_INT 3
63806: PPUSH
63807: LD_INT 4
63809: PPUSH
63810: CALL_OW 273
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_VAR 0 7
63823: PPUSH
63824: LD_INT 4
63826: PPUSH
63827: LD_INT 4
63829: PPUSH
63830: CALL_OW 272
63834: PUSH
63835: LD_VAR 0 8
63839: PPUSH
63840: LD_INT 4
63842: PPUSH
63843: LD_INT 4
63845: PPUSH
63846: CALL_OW 273
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_VAR 0 7
63859: PPUSH
63860: LD_INT 5
63862: PPUSH
63863: LD_INT 4
63865: PPUSH
63866: CALL_OW 272
63870: PUSH
63871: LD_VAR 0 8
63875: PPUSH
63876: LD_INT 5
63878: PPUSH
63879: LD_INT 4
63881: PPUSH
63882: CALL_OW 273
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: ST_TO_ADDR
// for i = tmp downto 1 do
63899: LD_ADDR_VAR 0 4
63903: PUSH
63904: DOUBLE
63905: LD_VAR 0 6
63909: INC
63910: ST_TO_ADDR
63911: LD_INT 1
63913: PUSH
63914: FOR_DOWNTO
63915: IFFALSE 64016
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63917: LD_VAR 0 6
63921: PUSH
63922: LD_VAR 0 4
63926: ARRAY
63927: PUSH
63928: LD_INT 1
63930: ARRAY
63931: PPUSH
63932: LD_VAR 0 6
63936: PUSH
63937: LD_VAR 0 4
63941: ARRAY
63942: PUSH
63943: LD_INT 2
63945: ARRAY
63946: PPUSH
63947: CALL_OW 488
63951: NOT
63952: PUSH
63953: LD_VAR 0 6
63957: PUSH
63958: LD_VAR 0 4
63962: ARRAY
63963: PUSH
63964: LD_INT 1
63966: ARRAY
63967: PPUSH
63968: LD_VAR 0 6
63972: PUSH
63973: LD_VAR 0 4
63977: ARRAY
63978: PUSH
63979: LD_INT 2
63981: ARRAY
63982: PPUSH
63983: CALL_OW 428
63987: PUSH
63988: LD_INT 0
63990: NONEQUAL
63991: OR
63992: IFFALSE 64014
// tmp := Delete ( tmp , i ) ;
63994: LD_ADDR_VAR 0 6
63998: PUSH
63999: LD_VAR 0 6
64003: PPUSH
64004: LD_VAR 0 4
64008: PPUSH
64009: CALL_OW 3
64013: ST_TO_ADDR
64014: GO 63914
64016: POP
64017: POP
// j := GetClosestHex ( unit , tmp ) ;
64018: LD_ADDR_VAR 0 5
64022: PUSH
64023: LD_VAR 0 1
64027: PPUSH
64028: LD_VAR 0 6
64032: PPUSH
64033: CALL 63309 0 2
64037: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64038: LD_VAR 0 1
64042: PPUSH
64043: LD_VAR 0 5
64047: PUSH
64048: LD_INT 1
64050: ARRAY
64051: PPUSH
64052: LD_VAR 0 5
64056: PUSH
64057: LD_INT 2
64059: ARRAY
64060: PPUSH
64061: CALL_OW 111
// end ;
64065: LD_VAR 0 3
64069: RET
// export function PrepareApemanSoldier ( ) ; begin
64070: LD_INT 0
64072: PPUSH
// uc_nation := 0 ;
64073: LD_ADDR_OWVAR 21
64077: PUSH
64078: LD_INT 0
64080: ST_TO_ADDR
// hc_sex := sex_male ;
64081: LD_ADDR_OWVAR 27
64085: PUSH
64086: LD_INT 1
64088: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64089: LD_ADDR_OWVAR 28
64093: PUSH
64094: LD_INT 15
64096: ST_TO_ADDR
// hc_gallery :=  ;
64097: LD_ADDR_OWVAR 33
64101: PUSH
64102: LD_STRING 
64104: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64105: LD_ADDR_OWVAR 31
64109: PUSH
64110: LD_INT 0
64112: PPUSH
64113: LD_INT 3
64115: PPUSH
64116: CALL_OW 12
64120: PUSH
64121: LD_INT 0
64123: PPUSH
64124: LD_INT 3
64126: PPUSH
64127: CALL_OW 12
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: LD_INT 0
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: ST_TO_ADDR
// end ;
64144: LD_VAR 0 1
64148: RET
// export function PrepareApemanEngineer ( ) ; begin
64149: LD_INT 0
64151: PPUSH
// uc_nation := 0 ;
64152: LD_ADDR_OWVAR 21
64156: PUSH
64157: LD_INT 0
64159: ST_TO_ADDR
// hc_sex := sex_male ;
64160: LD_ADDR_OWVAR 27
64164: PUSH
64165: LD_INT 1
64167: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64168: LD_ADDR_OWVAR 28
64172: PUSH
64173: LD_INT 16
64175: ST_TO_ADDR
// hc_gallery :=  ;
64176: LD_ADDR_OWVAR 33
64180: PUSH
64181: LD_STRING 
64183: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64184: LD_ADDR_OWVAR 31
64188: PUSH
64189: LD_INT 0
64191: PPUSH
64192: LD_INT 3
64194: PPUSH
64195: CALL_OW 12
64199: PUSH
64200: LD_INT 0
64202: PPUSH
64203: LD_INT 3
64205: PPUSH
64206: CALL_OW 12
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: LD_INT 0
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: ST_TO_ADDR
// end ;
64223: LD_VAR 0 1
64227: RET
// export function PrepareApeman ( agressivity ) ; begin
64228: LD_INT 0
64230: PPUSH
// uc_side := 0 ;
64231: LD_ADDR_OWVAR 20
64235: PUSH
64236: LD_INT 0
64238: ST_TO_ADDR
// uc_nation := 0 ;
64239: LD_ADDR_OWVAR 21
64243: PUSH
64244: LD_INT 0
64246: ST_TO_ADDR
// hc_sex := sex_male ;
64247: LD_ADDR_OWVAR 27
64251: PUSH
64252: LD_INT 1
64254: ST_TO_ADDR
// hc_class := class_apeman ;
64255: LD_ADDR_OWVAR 28
64259: PUSH
64260: LD_INT 12
64262: ST_TO_ADDR
// hc_gallery :=  ;
64263: LD_ADDR_OWVAR 33
64267: PUSH
64268: LD_STRING 
64270: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64271: LD_ADDR_OWVAR 35
64275: PUSH
64276: LD_VAR 0 1
64280: NEG
64281: PPUSH
64282: LD_VAR 0 1
64286: PPUSH
64287: CALL_OW 12
64291: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64292: LD_ADDR_OWVAR 31
64296: PUSH
64297: LD_INT 0
64299: PPUSH
64300: LD_INT 3
64302: PPUSH
64303: CALL_OW 12
64307: PUSH
64308: LD_INT 0
64310: PPUSH
64311: LD_INT 3
64313: PPUSH
64314: CALL_OW 12
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: ST_TO_ADDR
// end ;
64331: LD_VAR 0 2
64335: RET
// export function PrepareTiger ( agressivity ) ; begin
64336: LD_INT 0
64338: PPUSH
// uc_side := 0 ;
64339: LD_ADDR_OWVAR 20
64343: PUSH
64344: LD_INT 0
64346: ST_TO_ADDR
// uc_nation := 0 ;
64347: LD_ADDR_OWVAR 21
64351: PUSH
64352: LD_INT 0
64354: ST_TO_ADDR
// hc_class := class_tiger ;
64355: LD_ADDR_OWVAR 28
64359: PUSH
64360: LD_INT 14
64362: ST_TO_ADDR
// hc_gallery :=  ;
64363: LD_ADDR_OWVAR 33
64367: PUSH
64368: LD_STRING 
64370: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64371: LD_ADDR_OWVAR 35
64375: PUSH
64376: LD_VAR 0 1
64380: NEG
64381: PPUSH
64382: LD_VAR 0 1
64386: PPUSH
64387: CALL_OW 12
64391: ST_TO_ADDR
// end ;
64392: LD_VAR 0 2
64396: RET
// export function PrepareEnchidna ( ) ; begin
64397: LD_INT 0
64399: PPUSH
// uc_side := 0 ;
64400: LD_ADDR_OWVAR 20
64404: PUSH
64405: LD_INT 0
64407: ST_TO_ADDR
// uc_nation := 0 ;
64408: LD_ADDR_OWVAR 21
64412: PUSH
64413: LD_INT 0
64415: ST_TO_ADDR
// hc_class := class_baggie ;
64416: LD_ADDR_OWVAR 28
64420: PUSH
64421: LD_INT 13
64423: ST_TO_ADDR
// hc_gallery :=  ;
64424: LD_ADDR_OWVAR 33
64428: PUSH
64429: LD_STRING 
64431: ST_TO_ADDR
// end ;
64432: LD_VAR 0 1
64436: RET
// export function PrepareFrog ( ) ; begin
64437: LD_INT 0
64439: PPUSH
// uc_side := 0 ;
64440: LD_ADDR_OWVAR 20
64444: PUSH
64445: LD_INT 0
64447: ST_TO_ADDR
// uc_nation := 0 ;
64448: LD_ADDR_OWVAR 21
64452: PUSH
64453: LD_INT 0
64455: ST_TO_ADDR
// hc_class := class_frog ;
64456: LD_ADDR_OWVAR 28
64460: PUSH
64461: LD_INT 19
64463: ST_TO_ADDR
// hc_gallery :=  ;
64464: LD_ADDR_OWVAR 33
64468: PUSH
64469: LD_STRING 
64471: ST_TO_ADDR
// end ;
64472: LD_VAR 0 1
64476: RET
// export function PrepareFish ( ) ; begin
64477: LD_INT 0
64479: PPUSH
// uc_side := 0 ;
64480: LD_ADDR_OWVAR 20
64484: PUSH
64485: LD_INT 0
64487: ST_TO_ADDR
// uc_nation := 0 ;
64488: LD_ADDR_OWVAR 21
64492: PUSH
64493: LD_INT 0
64495: ST_TO_ADDR
// hc_class := class_fish ;
64496: LD_ADDR_OWVAR 28
64500: PUSH
64501: LD_INT 20
64503: ST_TO_ADDR
// hc_gallery :=  ;
64504: LD_ADDR_OWVAR 33
64508: PUSH
64509: LD_STRING 
64511: ST_TO_ADDR
// end ;
64512: LD_VAR 0 1
64516: RET
// export function PrepareBird ( ) ; begin
64517: LD_INT 0
64519: PPUSH
// uc_side := 0 ;
64520: LD_ADDR_OWVAR 20
64524: PUSH
64525: LD_INT 0
64527: ST_TO_ADDR
// uc_nation := 0 ;
64528: LD_ADDR_OWVAR 21
64532: PUSH
64533: LD_INT 0
64535: ST_TO_ADDR
// hc_class := class_phororhacos ;
64536: LD_ADDR_OWVAR 28
64540: PUSH
64541: LD_INT 18
64543: ST_TO_ADDR
// hc_gallery :=  ;
64544: LD_ADDR_OWVAR 33
64548: PUSH
64549: LD_STRING 
64551: ST_TO_ADDR
// end ;
64552: LD_VAR 0 1
64556: RET
// export function PrepareHorse ( ) ; begin
64557: LD_INT 0
64559: PPUSH
// uc_side := 0 ;
64560: LD_ADDR_OWVAR 20
64564: PUSH
64565: LD_INT 0
64567: ST_TO_ADDR
// uc_nation := 0 ;
64568: LD_ADDR_OWVAR 21
64572: PUSH
64573: LD_INT 0
64575: ST_TO_ADDR
// hc_class := class_horse ;
64576: LD_ADDR_OWVAR 28
64580: PUSH
64581: LD_INT 21
64583: ST_TO_ADDR
// hc_gallery :=  ;
64584: LD_ADDR_OWVAR 33
64588: PUSH
64589: LD_STRING 
64591: ST_TO_ADDR
// end ;
64592: LD_VAR 0 1
64596: RET
// export function PrepareMastodont ( ) ; begin
64597: LD_INT 0
64599: PPUSH
// uc_side := 0 ;
64600: LD_ADDR_OWVAR 20
64604: PUSH
64605: LD_INT 0
64607: ST_TO_ADDR
// uc_nation := 0 ;
64608: LD_ADDR_OWVAR 21
64612: PUSH
64613: LD_INT 0
64615: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64616: LD_ADDR_OWVAR 37
64620: PUSH
64621: LD_INT 31
64623: ST_TO_ADDR
// vc_control := control_rider ;
64624: LD_ADDR_OWVAR 38
64628: PUSH
64629: LD_INT 4
64631: ST_TO_ADDR
// end ;
64632: LD_VAR 0 1
64636: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64637: LD_INT 0
64639: PPUSH
64640: PPUSH
64641: PPUSH
// uc_side = 0 ;
64642: LD_ADDR_OWVAR 20
64646: PUSH
64647: LD_INT 0
64649: ST_TO_ADDR
// uc_nation = 0 ;
64650: LD_ADDR_OWVAR 21
64654: PUSH
64655: LD_INT 0
64657: ST_TO_ADDR
// InitHc_All ( ) ;
64658: CALL_OW 584
// InitVc ;
64662: CALL_OW 20
// if mastodonts then
64666: LD_VAR 0 6
64670: IFFALSE 64737
// for i = 1 to mastodonts do
64672: LD_ADDR_VAR 0 11
64676: PUSH
64677: DOUBLE
64678: LD_INT 1
64680: DEC
64681: ST_TO_ADDR
64682: LD_VAR 0 6
64686: PUSH
64687: FOR_TO
64688: IFFALSE 64735
// begin vc_chassis := 31 ;
64690: LD_ADDR_OWVAR 37
64694: PUSH
64695: LD_INT 31
64697: ST_TO_ADDR
// vc_control := control_rider ;
64698: LD_ADDR_OWVAR 38
64702: PUSH
64703: LD_INT 4
64705: ST_TO_ADDR
// animal := CreateVehicle ;
64706: LD_ADDR_VAR 0 12
64710: PUSH
64711: CALL_OW 45
64715: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64716: LD_VAR 0 12
64720: PPUSH
64721: LD_VAR 0 8
64725: PPUSH
64726: LD_INT 0
64728: PPUSH
64729: CALL 66865 0 3
// end ;
64733: GO 64687
64735: POP
64736: POP
// if horses then
64737: LD_VAR 0 5
64741: IFFALSE 64808
// for i = 1 to horses do
64743: LD_ADDR_VAR 0 11
64747: PUSH
64748: DOUBLE
64749: LD_INT 1
64751: DEC
64752: ST_TO_ADDR
64753: LD_VAR 0 5
64757: PUSH
64758: FOR_TO
64759: IFFALSE 64806
// begin hc_class := 21 ;
64761: LD_ADDR_OWVAR 28
64765: PUSH
64766: LD_INT 21
64768: ST_TO_ADDR
// hc_gallery :=  ;
64769: LD_ADDR_OWVAR 33
64773: PUSH
64774: LD_STRING 
64776: ST_TO_ADDR
// animal := CreateHuman ;
64777: LD_ADDR_VAR 0 12
64781: PUSH
64782: CALL_OW 44
64786: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64787: LD_VAR 0 12
64791: PPUSH
64792: LD_VAR 0 8
64796: PPUSH
64797: LD_INT 0
64799: PPUSH
64800: CALL 66865 0 3
// end ;
64804: GO 64758
64806: POP
64807: POP
// if birds then
64808: LD_VAR 0 1
64812: IFFALSE 64879
// for i = 1 to birds do
64814: LD_ADDR_VAR 0 11
64818: PUSH
64819: DOUBLE
64820: LD_INT 1
64822: DEC
64823: ST_TO_ADDR
64824: LD_VAR 0 1
64828: PUSH
64829: FOR_TO
64830: IFFALSE 64877
// begin hc_class = 18 ;
64832: LD_ADDR_OWVAR 28
64836: PUSH
64837: LD_INT 18
64839: ST_TO_ADDR
// hc_gallery =  ;
64840: LD_ADDR_OWVAR 33
64844: PUSH
64845: LD_STRING 
64847: ST_TO_ADDR
// animal := CreateHuman ;
64848: LD_ADDR_VAR 0 12
64852: PUSH
64853: CALL_OW 44
64857: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64858: LD_VAR 0 12
64862: PPUSH
64863: LD_VAR 0 8
64867: PPUSH
64868: LD_INT 0
64870: PPUSH
64871: CALL 66865 0 3
// end ;
64875: GO 64829
64877: POP
64878: POP
// if tigers then
64879: LD_VAR 0 2
64883: IFFALSE 64967
// for i = 1 to tigers do
64885: LD_ADDR_VAR 0 11
64889: PUSH
64890: DOUBLE
64891: LD_INT 1
64893: DEC
64894: ST_TO_ADDR
64895: LD_VAR 0 2
64899: PUSH
64900: FOR_TO
64901: IFFALSE 64965
// begin hc_class = class_tiger ;
64903: LD_ADDR_OWVAR 28
64907: PUSH
64908: LD_INT 14
64910: ST_TO_ADDR
// hc_gallery =  ;
64911: LD_ADDR_OWVAR 33
64915: PUSH
64916: LD_STRING 
64918: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64919: LD_ADDR_OWVAR 35
64923: PUSH
64924: LD_INT 7
64926: NEG
64927: PPUSH
64928: LD_INT 7
64930: PPUSH
64931: CALL_OW 12
64935: ST_TO_ADDR
// animal := CreateHuman ;
64936: LD_ADDR_VAR 0 12
64940: PUSH
64941: CALL_OW 44
64945: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64946: LD_VAR 0 12
64950: PPUSH
64951: LD_VAR 0 8
64955: PPUSH
64956: LD_INT 0
64958: PPUSH
64959: CALL 66865 0 3
// end ;
64963: GO 64900
64965: POP
64966: POP
// if apemans then
64967: LD_VAR 0 3
64971: IFFALSE 65094
// for i = 1 to apemans do
64973: LD_ADDR_VAR 0 11
64977: PUSH
64978: DOUBLE
64979: LD_INT 1
64981: DEC
64982: ST_TO_ADDR
64983: LD_VAR 0 3
64987: PUSH
64988: FOR_TO
64989: IFFALSE 65092
// begin hc_class = class_apeman ;
64991: LD_ADDR_OWVAR 28
64995: PUSH
64996: LD_INT 12
64998: ST_TO_ADDR
// hc_gallery =  ;
64999: LD_ADDR_OWVAR 33
65003: PUSH
65004: LD_STRING 
65006: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65007: LD_ADDR_OWVAR 35
65011: PUSH
65012: LD_INT 2
65014: NEG
65015: PPUSH
65016: LD_INT 2
65018: PPUSH
65019: CALL_OW 12
65023: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65024: LD_ADDR_OWVAR 31
65028: PUSH
65029: LD_INT 1
65031: PPUSH
65032: LD_INT 3
65034: PPUSH
65035: CALL_OW 12
65039: PUSH
65040: LD_INT 1
65042: PPUSH
65043: LD_INT 3
65045: PPUSH
65046: CALL_OW 12
65050: PUSH
65051: LD_INT 0
65053: PUSH
65054: LD_INT 0
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: ST_TO_ADDR
// animal := CreateHuman ;
65063: LD_ADDR_VAR 0 12
65067: PUSH
65068: CALL_OW 44
65072: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65073: LD_VAR 0 12
65077: PPUSH
65078: LD_VAR 0 8
65082: PPUSH
65083: LD_INT 0
65085: PPUSH
65086: CALL 66865 0 3
// end ;
65090: GO 64988
65092: POP
65093: POP
// if enchidnas then
65094: LD_VAR 0 4
65098: IFFALSE 65165
// for i = 1 to enchidnas do
65100: LD_ADDR_VAR 0 11
65104: PUSH
65105: DOUBLE
65106: LD_INT 1
65108: DEC
65109: ST_TO_ADDR
65110: LD_VAR 0 4
65114: PUSH
65115: FOR_TO
65116: IFFALSE 65163
// begin hc_class = 13 ;
65118: LD_ADDR_OWVAR 28
65122: PUSH
65123: LD_INT 13
65125: ST_TO_ADDR
// hc_gallery =  ;
65126: LD_ADDR_OWVAR 33
65130: PUSH
65131: LD_STRING 
65133: ST_TO_ADDR
// animal := CreateHuman ;
65134: LD_ADDR_VAR 0 12
65138: PUSH
65139: CALL_OW 44
65143: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65144: LD_VAR 0 12
65148: PPUSH
65149: LD_VAR 0 8
65153: PPUSH
65154: LD_INT 0
65156: PPUSH
65157: CALL 66865 0 3
// end ;
65161: GO 65115
65163: POP
65164: POP
// if fishes then
65165: LD_VAR 0 7
65169: IFFALSE 65236
// for i = 1 to fishes do
65171: LD_ADDR_VAR 0 11
65175: PUSH
65176: DOUBLE
65177: LD_INT 1
65179: DEC
65180: ST_TO_ADDR
65181: LD_VAR 0 7
65185: PUSH
65186: FOR_TO
65187: IFFALSE 65234
// begin hc_class = 20 ;
65189: LD_ADDR_OWVAR 28
65193: PUSH
65194: LD_INT 20
65196: ST_TO_ADDR
// hc_gallery =  ;
65197: LD_ADDR_OWVAR 33
65201: PUSH
65202: LD_STRING 
65204: ST_TO_ADDR
// animal := CreateHuman ;
65205: LD_ADDR_VAR 0 12
65209: PUSH
65210: CALL_OW 44
65214: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65215: LD_VAR 0 12
65219: PPUSH
65220: LD_VAR 0 9
65224: PPUSH
65225: LD_INT 0
65227: PPUSH
65228: CALL 66865 0 3
// end ;
65232: GO 65186
65234: POP
65235: POP
// end ;
65236: LD_VAR 0 10
65240: RET
// export function WantHeal ( sci , unit ) ; begin
65241: LD_INT 0
65243: PPUSH
// if GetTaskList ( sci ) > 0 then
65244: LD_VAR 0 1
65248: PPUSH
65249: CALL_OW 437
65253: PUSH
65254: LD_INT 0
65256: GREATER
65257: IFFALSE 65327
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65259: LD_VAR 0 1
65263: PPUSH
65264: CALL_OW 437
65268: PUSH
65269: LD_INT 1
65271: ARRAY
65272: PUSH
65273: LD_INT 1
65275: ARRAY
65276: PUSH
65277: LD_STRING l
65279: EQUAL
65280: PUSH
65281: LD_VAR 0 1
65285: PPUSH
65286: CALL_OW 437
65290: PUSH
65291: LD_INT 1
65293: ARRAY
65294: PUSH
65295: LD_INT 4
65297: ARRAY
65298: PUSH
65299: LD_VAR 0 2
65303: EQUAL
65304: AND
65305: IFFALSE 65317
// result := true else
65307: LD_ADDR_VAR 0 3
65311: PUSH
65312: LD_INT 1
65314: ST_TO_ADDR
65315: GO 65325
// result := false ;
65317: LD_ADDR_VAR 0 3
65321: PUSH
65322: LD_INT 0
65324: ST_TO_ADDR
// end else
65325: GO 65335
// result := false ;
65327: LD_ADDR_VAR 0 3
65331: PUSH
65332: LD_INT 0
65334: ST_TO_ADDR
// end ;
65335: LD_VAR 0 3
65339: RET
// export function HealTarget ( sci ) ; begin
65340: LD_INT 0
65342: PPUSH
// if not sci then
65343: LD_VAR 0 1
65347: NOT
65348: IFFALSE 65352
// exit ;
65350: GO 65417
// result := 0 ;
65352: LD_ADDR_VAR 0 2
65356: PUSH
65357: LD_INT 0
65359: ST_TO_ADDR
// if GetTaskList ( sci ) then
65360: LD_VAR 0 1
65364: PPUSH
65365: CALL_OW 437
65369: IFFALSE 65417
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65371: LD_VAR 0 1
65375: PPUSH
65376: CALL_OW 437
65380: PUSH
65381: LD_INT 1
65383: ARRAY
65384: PUSH
65385: LD_INT 1
65387: ARRAY
65388: PUSH
65389: LD_STRING l
65391: EQUAL
65392: IFFALSE 65417
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65394: LD_ADDR_VAR 0 2
65398: PUSH
65399: LD_VAR 0 1
65403: PPUSH
65404: CALL_OW 437
65408: PUSH
65409: LD_INT 1
65411: ARRAY
65412: PUSH
65413: LD_INT 4
65415: ARRAY
65416: ST_TO_ADDR
// end ;
65417: LD_VAR 0 2
65421: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65422: LD_INT 0
65424: PPUSH
65425: PPUSH
65426: PPUSH
65427: PPUSH
// if not base_units then
65428: LD_VAR 0 1
65432: NOT
65433: IFFALSE 65437
// exit ;
65435: GO 65524
// result := false ;
65437: LD_ADDR_VAR 0 2
65441: PUSH
65442: LD_INT 0
65444: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65445: LD_ADDR_VAR 0 5
65449: PUSH
65450: LD_VAR 0 1
65454: PPUSH
65455: LD_INT 21
65457: PUSH
65458: LD_INT 3
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PPUSH
65465: CALL_OW 72
65469: ST_TO_ADDR
// if not tmp then
65470: LD_VAR 0 5
65474: NOT
65475: IFFALSE 65479
// exit ;
65477: GO 65524
// for i in tmp do
65479: LD_ADDR_VAR 0 3
65483: PUSH
65484: LD_VAR 0 5
65488: PUSH
65489: FOR_IN
65490: IFFALSE 65522
// begin result := EnemyInRange ( i , 22 ) ;
65492: LD_ADDR_VAR 0 2
65496: PUSH
65497: LD_VAR 0 3
65501: PPUSH
65502: LD_INT 22
65504: PPUSH
65505: CALL 63111 0 2
65509: ST_TO_ADDR
// if result then
65510: LD_VAR 0 2
65514: IFFALSE 65520
// exit ;
65516: POP
65517: POP
65518: GO 65524
// end ;
65520: GO 65489
65522: POP
65523: POP
// end ;
65524: LD_VAR 0 2
65528: RET
// export function FilterByTag ( units , tag ) ; begin
65529: LD_INT 0
65531: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65532: LD_ADDR_VAR 0 3
65536: PUSH
65537: LD_VAR 0 1
65541: PPUSH
65542: LD_INT 120
65544: PUSH
65545: LD_VAR 0 2
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PPUSH
65554: CALL_OW 72
65558: ST_TO_ADDR
// end ;
65559: LD_VAR 0 3
65563: RET
// export function IsDriver ( un ) ; begin
65564: LD_INT 0
65566: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65567: LD_ADDR_VAR 0 2
65571: PUSH
65572: LD_VAR 0 1
65576: PUSH
65577: LD_INT 55
65579: PUSH
65580: EMPTY
65581: LIST
65582: PPUSH
65583: CALL_OW 69
65587: IN
65588: ST_TO_ADDR
// end ;
65589: LD_VAR 0 2
65593: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65594: LD_INT 0
65596: PPUSH
65597: PPUSH
// list := [ ] ;
65598: LD_ADDR_VAR 0 5
65602: PUSH
65603: EMPTY
65604: ST_TO_ADDR
// case d of 0 :
65605: LD_VAR 0 3
65609: PUSH
65610: LD_INT 0
65612: DOUBLE
65613: EQUAL
65614: IFTRUE 65618
65616: GO 65751
65618: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65619: LD_ADDR_VAR 0 5
65623: PUSH
65624: LD_VAR 0 1
65628: PUSH
65629: LD_INT 4
65631: MINUS
65632: PUSH
65633: LD_VAR 0 2
65637: PUSH
65638: LD_INT 4
65640: MINUS
65641: PUSH
65642: LD_INT 2
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: LIST
65649: PUSH
65650: LD_VAR 0 1
65654: PUSH
65655: LD_INT 3
65657: MINUS
65658: PUSH
65659: LD_VAR 0 2
65663: PUSH
65664: LD_INT 1
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: LIST
65671: PUSH
65672: LD_VAR 0 1
65676: PUSH
65677: LD_INT 4
65679: PLUS
65680: PUSH
65681: LD_VAR 0 2
65685: PUSH
65686: LD_INT 4
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: LIST
65693: PUSH
65694: LD_VAR 0 1
65698: PUSH
65699: LD_INT 3
65701: PLUS
65702: PUSH
65703: LD_VAR 0 2
65707: PUSH
65708: LD_INT 3
65710: PLUS
65711: PUSH
65712: LD_INT 5
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: LIST
65719: PUSH
65720: LD_VAR 0 1
65724: PUSH
65725: LD_VAR 0 2
65729: PUSH
65730: LD_INT 4
65732: PLUS
65733: PUSH
65734: LD_INT 0
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: LIST
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: ST_TO_ADDR
// end ; 1 :
65749: GO 66449
65751: LD_INT 1
65753: DOUBLE
65754: EQUAL
65755: IFTRUE 65759
65757: GO 65892
65759: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65760: LD_ADDR_VAR 0 5
65764: PUSH
65765: LD_VAR 0 1
65769: PUSH
65770: LD_VAR 0 2
65774: PUSH
65775: LD_INT 4
65777: MINUS
65778: PUSH
65779: LD_INT 3
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: LIST
65786: PUSH
65787: LD_VAR 0 1
65791: PUSH
65792: LD_INT 3
65794: MINUS
65795: PUSH
65796: LD_VAR 0 2
65800: PUSH
65801: LD_INT 3
65803: MINUS
65804: PUSH
65805: LD_INT 2
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: LIST
65812: PUSH
65813: LD_VAR 0 1
65817: PUSH
65818: LD_INT 4
65820: MINUS
65821: PUSH
65822: LD_VAR 0 2
65826: PUSH
65827: LD_INT 1
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: LIST
65834: PUSH
65835: LD_VAR 0 1
65839: PUSH
65840: LD_VAR 0 2
65844: PUSH
65845: LD_INT 3
65847: PLUS
65848: PUSH
65849: LD_INT 0
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: LIST
65856: PUSH
65857: LD_VAR 0 1
65861: PUSH
65862: LD_INT 4
65864: PLUS
65865: PUSH
65866: LD_VAR 0 2
65870: PUSH
65871: LD_INT 4
65873: PLUS
65874: PUSH
65875: LD_INT 5
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: LIST
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: ST_TO_ADDR
// end ; 2 :
65890: GO 66449
65892: LD_INT 2
65894: DOUBLE
65895: EQUAL
65896: IFTRUE 65900
65898: GO 66029
65900: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65901: LD_ADDR_VAR 0 5
65905: PUSH
65906: LD_VAR 0 1
65910: PUSH
65911: LD_VAR 0 2
65915: PUSH
65916: LD_INT 3
65918: MINUS
65919: PUSH
65920: LD_INT 3
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: LIST
65927: PUSH
65928: LD_VAR 0 1
65932: PUSH
65933: LD_INT 4
65935: PLUS
65936: PUSH
65937: LD_VAR 0 2
65941: PUSH
65942: LD_INT 4
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: LIST
65949: PUSH
65950: LD_VAR 0 1
65954: PUSH
65955: LD_VAR 0 2
65959: PUSH
65960: LD_INT 4
65962: PLUS
65963: PUSH
65964: LD_INT 0
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: LIST
65971: PUSH
65972: LD_VAR 0 1
65976: PUSH
65977: LD_INT 3
65979: MINUS
65980: PUSH
65981: LD_VAR 0 2
65985: PUSH
65986: LD_INT 1
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: LIST
65993: PUSH
65994: LD_VAR 0 1
65998: PUSH
65999: LD_INT 4
66001: MINUS
66002: PUSH
66003: LD_VAR 0 2
66007: PUSH
66008: LD_INT 4
66010: MINUS
66011: PUSH
66012: LD_INT 2
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: LIST
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: ST_TO_ADDR
// end ; 3 :
66027: GO 66449
66029: LD_INT 3
66031: DOUBLE
66032: EQUAL
66033: IFTRUE 66037
66035: GO 66170
66037: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66038: LD_ADDR_VAR 0 5
66042: PUSH
66043: LD_VAR 0 1
66047: PUSH
66048: LD_INT 3
66050: PLUS
66051: PUSH
66052: LD_VAR 0 2
66056: PUSH
66057: LD_INT 4
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: LIST
66064: PUSH
66065: LD_VAR 0 1
66069: PUSH
66070: LD_INT 4
66072: PLUS
66073: PUSH
66074: LD_VAR 0 2
66078: PUSH
66079: LD_INT 4
66081: PLUS
66082: PUSH
66083: LD_INT 5
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: LIST
66090: PUSH
66091: LD_VAR 0 1
66095: PUSH
66096: LD_INT 4
66098: MINUS
66099: PUSH
66100: LD_VAR 0 2
66104: PUSH
66105: LD_INT 1
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: PUSH
66113: LD_VAR 0 1
66117: PUSH
66118: LD_VAR 0 2
66122: PUSH
66123: LD_INT 4
66125: MINUS
66126: PUSH
66127: LD_INT 3
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: LIST
66134: PUSH
66135: LD_VAR 0 1
66139: PUSH
66140: LD_INT 3
66142: MINUS
66143: PUSH
66144: LD_VAR 0 2
66148: PUSH
66149: LD_INT 3
66151: MINUS
66152: PUSH
66153: LD_INT 2
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: LIST
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: ST_TO_ADDR
// end ; 4 :
66168: GO 66449
66170: LD_INT 4
66172: DOUBLE
66173: EQUAL
66174: IFTRUE 66178
66176: GO 66311
66178: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66179: LD_ADDR_VAR 0 5
66183: PUSH
66184: LD_VAR 0 1
66188: PUSH
66189: LD_VAR 0 2
66193: PUSH
66194: LD_INT 4
66196: PLUS
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: LIST
66205: PUSH
66206: LD_VAR 0 1
66210: PUSH
66211: LD_INT 3
66213: PLUS
66214: PUSH
66215: LD_VAR 0 2
66219: PUSH
66220: LD_INT 3
66222: PLUS
66223: PUSH
66224: LD_INT 5
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: LIST
66231: PUSH
66232: LD_VAR 0 1
66236: PUSH
66237: LD_INT 4
66239: PLUS
66240: PUSH
66241: LD_VAR 0 2
66245: PUSH
66246: LD_INT 4
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: LIST
66253: PUSH
66254: LD_VAR 0 1
66258: PUSH
66259: LD_VAR 0 2
66263: PUSH
66264: LD_INT 3
66266: MINUS
66267: PUSH
66268: LD_INT 3
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: PUSH
66276: LD_VAR 0 1
66280: PUSH
66281: LD_INT 4
66283: MINUS
66284: PUSH
66285: LD_VAR 0 2
66289: PUSH
66290: LD_INT 4
66292: MINUS
66293: PUSH
66294: LD_INT 2
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: LIST
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: ST_TO_ADDR
// end ; 5 :
66309: GO 66449
66311: LD_INT 5
66313: DOUBLE
66314: EQUAL
66315: IFTRUE 66319
66317: GO 66448
66319: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66320: LD_ADDR_VAR 0 5
66324: PUSH
66325: LD_VAR 0 1
66329: PUSH
66330: LD_INT 4
66332: MINUS
66333: PUSH
66334: LD_VAR 0 2
66338: PUSH
66339: LD_INT 1
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: LIST
66346: PUSH
66347: LD_VAR 0 1
66351: PUSH
66352: LD_VAR 0 2
66356: PUSH
66357: LD_INT 4
66359: MINUS
66360: PUSH
66361: LD_INT 3
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: LIST
66368: PUSH
66369: LD_VAR 0 1
66373: PUSH
66374: LD_INT 4
66376: PLUS
66377: PUSH
66378: LD_VAR 0 2
66382: PUSH
66383: LD_INT 4
66385: PLUS
66386: PUSH
66387: LD_INT 5
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: LIST
66394: PUSH
66395: LD_VAR 0 1
66399: PUSH
66400: LD_INT 3
66402: PLUS
66403: PUSH
66404: LD_VAR 0 2
66408: PUSH
66409: LD_INT 4
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: LIST
66416: PUSH
66417: LD_VAR 0 1
66421: PUSH
66422: LD_VAR 0 2
66426: PUSH
66427: LD_INT 3
66429: PLUS
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: LIST
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: ST_TO_ADDR
// end ; end ;
66446: GO 66449
66448: POP
// result := list ;
66449: LD_ADDR_VAR 0 4
66453: PUSH
66454: LD_VAR 0 5
66458: ST_TO_ADDR
// end ;
66459: LD_VAR 0 4
66463: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66464: LD_INT 0
66466: PPUSH
66467: PPUSH
66468: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66469: LD_VAR 0 1
66473: NOT
66474: PUSH
66475: LD_VAR 0 2
66479: PUSH
66480: LD_INT 1
66482: PUSH
66483: LD_INT 2
66485: PUSH
66486: LD_INT 3
66488: PUSH
66489: LD_INT 4
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: IN
66498: NOT
66499: OR
66500: IFFALSE 66504
// exit ;
66502: GO 66587
// tmp := [ ] ;
66504: LD_ADDR_VAR 0 5
66508: PUSH
66509: EMPTY
66510: ST_TO_ADDR
// for i in units do
66511: LD_ADDR_VAR 0 4
66515: PUSH
66516: LD_VAR 0 1
66520: PUSH
66521: FOR_IN
66522: IFFALSE 66556
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66524: LD_ADDR_VAR 0 5
66528: PUSH
66529: LD_VAR 0 5
66533: PPUSH
66534: LD_VAR 0 4
66538: PPUSH
66539: LD_VAR 0 2
66543: PPUSH
66544: CALL_OW 259
66548: PPUSH
66549: CALL 67948 0 2
66553: ST_TO_ADDR
66554: GO 66521
66556: POP
66557: POP
// if not tmp then
66558: LD_VAR 0 5
66562: NOT
66563: IFFALSE 66567
// exit ;
66565: GO 66587
// result := SortListByListDesc ( units , tmp ) ;
66567: LD_ADDR_VAR 0 3
66571: PUSH
66572: LD_VAR 0 1
66576: PPUSH
66577: LD_VAR 0 5
66581: PPUSH
66582: CALL_OW 77
66586: ST_TO_ADDR
// end ;
66587: LD_VAR 0 3
66591: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66592: LD_INT 0
66594: PPUSH
66595: PPUSH
66596: PPUSH
// result := false ;
66597: LD_ADDR_VAR 0 3
66601: PUSH
66602: LD_INT 0
66604: ST_TO_ADDR
// if not building then
66605: LD_VAR 0 2
66609: NOT
66610: IFFALSE 66614
// exit ;
66612: GO 66752
// x := GetX ( building ) ;
66614: LD_ADDR_VAR 0 4
66618: PUSH
66619: LD_VAR 0 2
66623: PPUSH
66624: CALL_OW 250
66628: ST_TO_ADDR
// y := GetY ( building ) ;
66629: LD_ADDR_VAR 0 5
66633: PUSH
66634: LD_VAR 0 2
66638: PPUSH
66639: CALL_OW 251
66643: ST_TO_ADDR
// if not x or not y then
66644: LD_VAR 0 4
66648: NOT
66649: PUSH
66650: LD_VAR 0 5
66654: NOT
66655: OR
66656: IFFALSE 66660
// exit ;
66658: GO 66752
// if GetTaskList ( unit ) then
66660: LD_VAR 0 1
66664: PPUSH
66665: CALL_OW 437
66669: IFFALSE 66752
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66671: LD_STRING e
66673: PUSH
66674: LD_VAR 0 1
66678: PPUSH
66679: CALL_OW 437
66683: PUSH
66684: LD_INT 1
66686: ARRAY
66687: PUSH
66688: LD_INT 1
66690: ARRAY
66691: EQUAL
66692: PUSH
66693: LD_VAR 0 4
66697: PUSH
66698: LD_VAR 0 1
66702: PPUSH
66703: CALL_OW 437
66707: PUSH
66708: LD_INT 1
66710: ARRAY
66711: PUSH
66712: LD_INT 2
66714: ARRAY
66715: EQUAL
66716: AND
66717: PUSH
66718: LD_VAR 0 5
66722: PUSH
66723: LD_VAR 0 1
66727: PPUSH
66728: CALL_OW 437
66732: PUSH
66733: LD_INT 1
66735: ARRAY
66736: PUSH
66737: LD_INT 3
66739: ARRAY
66740: EQUAL
66741: AND
66742: IFFALSE 66752
// result := true end ;
66744: LD_ADDR_VAR 0 3
66748: PUSH
66749: LD_INT 1
66751: ST_TO_ADDR
// end ;
66752: LD_VAR 0 3
66756: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66757: LD_INT 0
66759: PPUSH
// result := false ;
66760: LD_ADDR_VAR 0 4
66764: PUSH
66765: LD_INT 0
66767: ST_TO_ADDR
// if GetTaskList ( unit ) then
66768: LD_VAR 0 1
66772: PPUSH
66773: CALL_OW 437
66777: IFFALSE 66860
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66779: LD_STRING M
66781: PUSH
66782: LD_VAR 0 1
66786: PPUSH
66787: CALL_OW 437
66791: PUSH
66792: LD_INT 1
66794: ARRAY
66795: PUSH
66796: LD_INT 1
66798: ARRAY
66799: EQUAL
66800: PUSH
66801: LD_VAR 0 2
66805: PUSH
66806: LD_VAR 0 1
66810: PPUSH
66811: CALL_OW 437
66815: PUSH
66816: LD_INT 1
66818: ARRAY
66819: PUSH
66820: LD_INT 2
66822: ARRAY
66823: EQUAL
66824: AND
66825: PUSH
66826: LD_VAR 0 3
66830: PUSH
66831: LD_VAR 0 1
66835: PPUSH
66836: CALL_OW 437
66840: PUSH
66841: LD_INT 1
66843: ARRAY
66844: PUSH
66845: LD_INT 3
66847: ARRAY
66848: EQUAL
66849: AND
66850: IFFALSE 66860
// result := true ;
66852: LD_ADDR_VAR 0 4
66856: PUSH
66857: LD_INT 1
66859: ST_TO_ADDR
// end ; end ;
66860: LD_VAR 0 4
66864: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66865: LD_INT 0
66867: PPUSH
66868: PPUSH
66869: PPUSH
66870: PPUSH
// if not unit or not area then
66871: LD_VAR 0 1
66875: NOT
66876: PUSH
66877: LD_VAR 0 2
66881: NOT
66882: OR
66883: IFFALSE 66887
// exit ;
66885: GO 67051
// tmp := AreaToList ( area , i ) ;
66887: LD_ADDR_VAR 0 6
66891: PUSH
66892: LD_VAR 0 2
66896: PPUSH
66897: LD_VAR 0 5
66901: PPUSH
66902: CALL_OW 517
66906: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66907: LD_ADDR_VAR 0 5
66911: PUSH
66912: DOUBLE
66913: LD_INT 1
66915: DEC
66916: ST_TO_ADDR
66917: LD_VAR 0 6
66921: PUSH
66922: LD_INT 1
66924: ARRAY
66925: PUSH
66926: FOR_TO
66927: IFFALSE 67049
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66929: LD_ADDR_VAR 0 7
66933: PUSH
66934: LD_VAR 0 6
66938: PUSH
66939: LD_INT 1
66941: ARRAY
66942: PUSH
66943: LD_VAR 0 5
66947: ARRAY
66948: PUSH
66949: LD_VAR 0 6
66953: PUSH
66954: LD_INT 2
66956: ARRAY
66957: PUSH
66958: LD_VAR 0 5
66962: ARRAY
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66968: LD_VAR 0 7
66972: PUSH
66973: LD_INT 1
66975: ARRAY
66976: PPUSH
66977: LD_VAR 0 7
66981: PUSH
66982: LD_INT 2
66984: ARRAY
66985: PPUSH
66986: CALL_OW 428
66990: PUSH
66991: LD_INT 0
66993: EQUAL
66994: IFFALSE 67047
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66996: LD_VAR 0 1
67000: PPUSH
67001: LD_VAR 0 7
67005: PUSH
67006: LD_INT 1
67008: ARRAY
67009: PPUSH
67010: LD_VAR 0 7
67014: PUSH
67015: LD_INT 2
67017: ARRAY
67018: PPUSH
67019: LD_VAR 0 3
67023: PPUSH
67024: CALL_OW 48
// result := IsPlaced ( unit ) ;
67028: LD_ADDR_VAR 0 4
67032: PUSH
67033: LD_VAR 0 1
67037: PPUSH
67038: CALL_OW 305
67042: ST_TO_ADDR
// exit ;
67043: POP
67044: POP
67045: GO 67051
// end ; end ;
67047: GO 66926
67049: POP
67050: POP
// end ;
67051: LD_VAR 0 4
67055: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67056: LD_INT 0
67058: PPUSH
67059: PPUSH
67060: PPUSH
// if not side or side > 8 then
67061: LD_VAR 0 1
67065: NOT
67066: PUSH
67067: LD_VAR 0 1
67071: PUSH
67072: LD_INT 8
67074: GREATER
67075: OR
67076: IFFALSE 67080
// exit ;
67078: GO 67267
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67080: LD_ADDR_VAR 0 4
67084: PUSH
67085: LD_INT 22
67087: PUSH
67088: LD_VAR 0 1
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 21
67099: PUSH
67100: LD_INT 3
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PPUSH
67111: CALL_OW 69
67115: ST_TO_ADDR
// if not tmp then
67116: LD_VAR 0 4
67120: NOT
67121: IFFALSE 67125
// exit ;
67123: GO 67267
// enable_addtolog := true ;
67125: LD_ADDR_OWVAR 81
67129: PUSH
67130: LD_INT 1
67132: ST_TO_ADDR
// AddToLog ( [ ) ;
67133: LD_STRING [
67135: PPUSH
67136: CALL_OW 561
// for i in tmp do
67140: LD_ADDR_VAR 0 3
67144: PUSH
67145: LD_VAR 0 4
67149: PUSH
67150: FOR_IN
67151: IFFALSE 67258
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67153: LD_STRING [
67155: PUSH
67156: LD_VAR 0 3
67160: PPUSH
67161: CALL_OW 266
67165: STR
67166: PUSH
67167: LD_STRING , 
67169: STR
67170: PUSH
67171: LD_VAR 0 3
67175: PPUSH
67176: CALL_OW 250
67180: STR
67181: PUSH
67182: LD_STRING , 
67184: STR
67185: PUSH
67186: LD_VAR 0 3
67190: PPUSH
67191: CALL_OW 251
67195: STR
67196: PUSH
67197: LD_STRING , 
67199: STR
67200: PUSH
67201: LD_VAR 0 3
67205: PPUSH
67206: CALL_OW 254
67210: STR
67211: PUSH
67212: LD_STRING , 
67214: STR
67215: PUSH
67216: LD_VAR 0 3
67220: PPUSH
67221: LD_INT 1
67223: PPUSH
67224: CALL_OW 268
67228: STR
67229: PUSH
67230: LD_STRING , 
67232: STR
67233: PUSH
67234: LD_VAR 0 3
67238: PPUSH
67239: LD_INT 2
67241: PPUSH
67242: CALL_OW 268
67246: STR
67247: PUSH
67248: LD_STRING ],
67250: STR
67251: PPUSH
67252: CALL_OW 561
// end ;
67256: GO 67150
67258: POP
67259: POP
// AddToLog ( ]; ) ;
67260: LD_STRING ];
67262: PPUSH
67263: CALL_OW 561
// end ;
67267: LD_VAR 0 2
67271: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67272: LD_INT 0
67274: PPUSH
67275: PPUSH
67276: PPUSH
67277: PPUSH
67278: PPUSH
// if not area or not rate or not max then
67279: LD_VAR 0 1
67283: NOT
67284: PUSH
67285: LD_VAR 0 2
67289: NOT
67290: OR
67291: PUSH
67292: LD_VAR 0 4
67296: NOT
67297: OR
67298: IFFALSE 67302
// exit ;
67300: GO 67491
// while 1 do
67302: LD_INT 1
67304: IFFALSE 67491
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67306: LD_ADDR_VAR 0 9
67310: PUSH
67311: LD_VAR 0 1
67315: PPUSH
67316: LD_INT 1
67318: PPUSH
67319: CALL_OW 287
67323: PUSH
67324: LD_INT 10
67326: MUL
67327: ST_TO_ADDR
// r := rate / 10 ;
67328: LD_ADDR_VAR 0 7
67332: PUSH
67333: LD_VAR 0 2
67337: PUSH
67338: LD_INT 10
67340: DIVREAL
67341: ST_TO_ADDR
// time := 1 1$00 ;
67342: LD_ADDR_VAR 0 8
67346: PUSH
67347: LD_INT 2100
67349: ST_TO_ADDR
// if amount < min then
67350: LD_VAR 0 9
67354: PUSH
67355: LD_VAR 0 3
67359: LESS
67360: IFFALSE 67378
// r := r * 2 else
67362: LD_ADDR_VAR 0 7
67366: PUSH
67367: LD_VAR 0 7
67371: PUSH
67372: LD_INT 2
67374: MUL
67375: ST_TO_ADDR
67376: GO 67404
// if amount > max then
67378: LD_VAR 0 9
67382: PUSH
67383: LD_VAR 0 4
67387: GREATER
67388: IFFALSE 67404
// r := r / 2 ;
67390: LD_ADDR_VAR 0 7
67394: PUSH
67395: LD_VAR 0 7
67399: PUSH
67400: LD_INT 2
67402: DIVREAL
67403: ST_TO_ADDR
// time := time / r ;
67404: LD_ADDR_VAR 0 8
67408: PUSH
67409: LD_VAR 0 8
67413: PUSH
67414: LD_VAR 0 7
67418: DIVREAL
67419: ST_TO_ADDR
// if time < 0 then
67420: LD_VAR 0 8
67424: PUSH
67425: LD_INT 0
67427: LESS
67428: IFFALSE 67445
// time := time * - 1 ;
67430: LD_ADDR_VAR 0 8
67434: PUSH
67435: LD_VAR 0 8
67439: PUSH
67440: LD_INT 1
67442: NEG
67443: MUL
67444: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67445: LD_VAR 0 8
67449: PUSH
67450: LD_INT 35
67452: PPUSH
67453: LD_INT 875
67455: PPUSH
67456: CALL_OW 12
67460: PLUS
67461: PPUSH
67462: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67466: LD_INT 1
67468: PPUSH
67469: LD_INT 5
67471: PPUSH
67472: CALL_OW 12
67476: PPUSH
67477: LD_VAR 0 1
67481: PPUSH
67482: LD_INT 1
67484: PPUSH
67485: CALL_OW 55
// end ;
67489: GO 67302
// end ;
67491: LD_VAR 0 5
67495: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67496: LD_INT 0
67498: PPUSH
67499: PPUSH
67500: PPUSH
67501: PPUSH
67502: PPUSH
67503: PPUSH
67504: PPUSH
67505: PPUSH
// if not turrets or not factories then
67506: LD_VAR 0 1
67510: NOT
67511: PUSH
67512: LD_VAR 0 2
67516: NOT
67517: OR
67518: IFFALSE 67522
// exit ;
67520: GO 67829
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67522: LD_ADDR_VAR 0 10
67526: PUSH
67527: LD_INT 5
67529: PUSH
67530: LD_INT 6
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 2
67539: PUSH
67540: LD_INT 4
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 3
67549: PUSH
67550: LD_INT 5
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 24
67564: PUSH
67565: LD_INT 25
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 23
67574: PUSH
67575: LD_INT 27
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 42
67588: PUSH
67589: LD_INT 43
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 44
67598: PUSH
67599: LD_INT 46
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 45
67608: PUSH
67609: LD_INT 47
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: LIST
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: LIST
67625: ST_TO_ADDR
// result := [ ] ;
67626: LD_ADDR_VAR 0 3
67630: PUSH
67631: EMPTY
67632: ST_TO_ADDR
// for i in turrets do
67633: LD_ADDR_VAR 0 4
67637: PUSH
67638: LD_VAR 0 1
67642: PUSH
67643: FOR_IN
67644: IFFALSE 67827
// begin nat := GetNation ( i ) ;
67646: LD_ADDR_VAR 0 7
67650: PUSH
67651: LD_VAR 0 4
67655: PPUSH
67656: CALL_OW 248
67660: ST_TO_ADDR
// weapon := 0 ;
67661: LD_ADDR_VAR 0 8
67665: PUSH
67666: LD_INT 0
67668: ST_TO_ADDR
// if not nat then
67669: LD_VAR 0 7
67673: NOT
67674: IFFALSE 67678
// continue ;
67676: GO 67643
// for j in list [ nat ] do
67678: LD_ADDR_VAR 0 5
67682: PUSH
67683: LD_VAR 0 10
67687: PUSH
67688: LD_VAR 0 7
67692: ARRAY
67693: PUSH
67694: FOR_IN
67695: IFFALSE 67736
// if GetBWeapon ( i ) = j [ 1 ] then
67697: LD_VAR 0 4
67701: PPUSH
67702: CALL_OW 269
67706: PUSH
67707: LD_VAR 0 5
67711: PUSH
67712: LD_INT 1
67714: ARRAY
67715: EQUAL
67716: IFFALSE 67734
// begin weapon := j [ 2 ] ;
67718: LD_ADDR_VAR 0 8
67722: PUSH
67723: LD_VAR 0 5
67727: PUSH
67728: LD_INT 2
67730: ARRAY
67731: ST_TO_ADDR
// break ;
67732: GO 67736
// end ;
67734: GO 67694
67736: POP
67737: POP
// if not weapon then
67738: LD_VAR 0 8
67742: NOT
67743: IFFALSE 67747
// continue ;
67745: GO 67643
// for k in factories do
67747: LD_ADDR_VAR 0 6
67751: PUSH
67752: LD_VAR 0 2
67756: PUSH
67757: FOR_IN
67758: IFFALSE 67823
// begin weapons := AvailableWeaponList ( k ) ;
67760: LD_ADDR_VAR 0 9
67764: PUSH
67765: LD_VAR 0 6
67769: PPUSH
67770: CALL_OW 478
67774: ST_TO_ADDR
// if not weapons then
67775: LD_VAR 0 9
67779: NOT
67780: IFFALSE 67784
// continue ;
67782: GO 67757
// if weapon in weapons then
67784: LD_VAR 0 8
67788: PUSH
67789: LD_VAR 0 9
67793: IN
67794: IFFALSE 67821
// begin result := [ i , weapon ] ;
67796: LD_ADDR_VAR 0 3
67800: PUSH
67801: LD_VAR 0 4
67805: PUSH
67806: LD_VAR 0 8
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: ST_TO_ADDR
// exit ;
67815: POP
67816: POP
67817: POP
67818: POP
67819: GO 67829
// end ; end ;
67821: GO 67757
67823: POP
67824: POP
// end ;
67825: GO 67643
67827: POP
67828: POP
// end ;
67829: LD_VAR 0 3
67833: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67834: LD_INT 0
67836: PPUSH
// if not side or side > 8 then
67837: LD_VAR 0 3
67841: NOT
67842: PUSH
67843: LD_VAR 0 3
67847: PUSH
67848: LD_INT 8
67850: GREATER
67851: OR
67852: IFFALSE 67856
// exit ;
67854: GO 67915
// if not range then
67856: LD_VAR 0 4
67860: NOT
67861: IFFALSE 67872
// range := - 12 ;
67863: LD_ADDR_VAR 0 4
67867: PUSH
67868: LD_INT 12
67870: NEG
67871: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67872: LD_VAR 0 1
67876: PPUSH
67877: LD_VAR 0 2
67881: PPUSH
67882: LD_VAR 0 3
67886: PPUSH
67887: LD_VAR 0 4
67891: PPUSH
67892: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67896: LD_VAR 0 1
67900: PPUSH
67901: LD_VAR 0 2
67905: PPUSH
67906: LD_VAR 0 3
67910: PPUSH
67911: CALL_OW 331
// end ;
67915: LD_VAR 0 5
67919: RET
// export function Video ( mode ) ; begin
67920: LD_INT 0
67922: PPUSH
// ingame_video = mode ;
67923: LD_ADDR_OWVAR 52
67927: PUSH
67928: LD_VAR 0 1
67932: ST_TO_ADDR
// interface_hidden = mode ;
67933: LD_ADDR_OWVAR 54
67937: PUSH
67938: LD_VAR 0 1
67942: ST_TO_ADDR
// end ;
67943: LD_VAR 0 2
67947: RET
// export function Join ( array , element ) ; begin
67948: LD_INT 0
67950: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67951: LD_ADDR_VAR 0 3
67955: PUSH
67956: LD_VAR 0 1
67960: PPUSH
67961: LD_VAR 0 1
67965: PUSH
67966: LD_INT 1
67968: PLUS
67969: PPUSH
67970: LD_VAR 0 2
67974: PPUSH
67975: CALL_OW 1
67979: ST_TO_ADDR
// end ;
67980: LD_VAR 0 3
67984: RET
// export function JoinUnion ( array , element ) ; begin
67985: LD_INT 0
67987: PPUSH
// result := array union element ;
67988: LD_ADDR_VAR 0 3
67992: PUSH
67993: LD_VAR 0 1
67997: PUSH
67998: LD_VAR 0 2
68002: UNION
68003: ST_TO_ADDR
// end ;
68004: LD_VAR 0 3
68008: RET
// export function GetBehemoths ( side ) ; begin
68009: LD_INT 0
68011: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68012: LD_ADDR_VAR 0 2
68016: PUSH
68017: LD_INT 22
68019: PUSH
68020: LD_VAR 0 1
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 31
68031: PUSH
68032: LD_INT 25
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PPUSH
68043: CALL_OW 69
68047: ST_TO_ADDR
// end ;
68048: LD_VAR 0 2
68052: RET
// export function Shuffle ( array ) ; var i , index ; begin
68053: LD_INT 0
68055: PPUSH
68056: PPUSH
68057: PPUSH
// result := [ ] ;
68058: LD_ADDR_VAR 0 2
68062: PUSH
68063: EMPTY
68064: ST_TO_ADDR
// if not array then
68065: LD_VAR 0 1
68069: NOT
68070: IFFALSE 68074
// exit ;
68072: GO 68173
// Randomize ;
68074: CALL_OW 10
// for i = array downto 1 do
68078: LD_ADDR_VAR 0 3
68082: PUSH
68083: DOUBLE
68084: LD_VAR 0 1
68088: INC
68089: ST_TO_ADDR
68090: LD_INT 1
68092: PUSH
68093: FOR_DOWNTO
68094: IFFALSE 68171
// begin index := rand ( 1 , array ) ;
68096: LD_ADDR_VAR 0 4
68100: PUSH
68101: LD_INT 1
68103: PPUSH
68104: LD_VAR 0 1
68108: PPUSH
68109: CALL_OW 12
68113: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68114: LD_ADDR_VAR 0 2
68118: PUSH
68119: LD_VAR 0 2
68123: PPUSH
68124: LD_VAR 0 2
68128: PUSH
68129: LD_INT 1
68131: PLUS
68132: PPUSH
68133: LD_VAR 0 1
68137: PUSH
68138: LD_VAR 0 4
68142: ARRAY
68143: PPUSH
68144: CALL_OW 2
68148: ST_TO_ADDR
// array := Delete ( array , index ) ;
68149: LD_ADDR_VAR 0 1
68153: PUSH
68154: LD_VAR 0 1
68158: PPUSH
68159: LD_VAR 0 4
68163: PPUSH
68164: CALL_OW 3
68168: ST_TO_ADDR
// end ;
68169: GO 68093
68171: POP
68172: POP
// end ;
68173: LD_VAR 0 2
68177: RET
// export function GetBaseMaterials ( base ) ; begin
68178: LD_INT 0
68180: PPUSH
// result := [ 0 , 0 , 0 ] ;
68181: LD_ADDR_VAR 0 2
68185: PUSH
68186: LD_INT 0
68188: PUSH
68189: LD_INT 0
68191: PUSH
68192: LD_INT 0
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: LIST
68199: ST_TO_ADDR
// if not base then
68200: LD_VAR 0 1
68204: NOT
68205: IFFALSE 68209
// exit ;
68207: GO 68258
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68209: LD_ADDR_VAR 0 2
68213: PUSH
68214: LD_VAR 0 1
68218: PPUSH
68219: LD_INT 1
68221: PPUSH
68222: CALL_OW 275
68226: PUSH
68227: LD_VAR 0 1
68231: PPUSH
68232: LD_INT 2
68234: PPUSH
68235: CALL_OW 275
68239: PUSH
68240: LD_VAR 0 1
68244: PPUSH
68245: LD_INT 3
68247: PPUSH
68248: CALL_OW 275
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: LIST
68257: ST_TO_ADDR
// end ;
68258: LD_VAR 0 2
68262: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68263: LD_INT 0
68265: PPUSH
68266: PPUSH
// result := array ;
68267: LD_ADDR_VAR 0 3
68271: PUSH
68272: LD_VAR 0 1
68276: ST_TO_ADDR
// if size >= result then
68277: LD_VAR 0 2
68281: PUSH
68282: LD_VAR 0 3
68286: GREATEREQUAL
68287: IFFALSE 68291
// exit ;
68289: GO 68341
// if size then
68291: LD_VAR 0 2
68295: IFFALSE 68341
// for i := array downto size do
68297: LD_ADDR_VAR 0 4
68301: PUSH
68302: DOUBLE
68303: LD_VAR 0 1
68307: INC
68308: ST_TO_ADDR
68309: LD_VAR 0 2
68313: PUSH
68314: FOR_DOWNTO
68315: IFFALSE 68339
// result := Delete ( result , result ) ;
68317: LD_ADDR_VAR 0 3
68321: PUSH
68322: LD_VAR 0 3
68326: PPUSH
68327: LD_VAR 0 3
68331: PPUSH
68332: CALL_OW 3
68336: ST_TO_ADDR
68337: GO 68314
68339: POP
68340: POP
// end ;
68341: LD_VAR 0 3
68345: RET
// export function ComExit ( unit ) ; var tmp ; begin
68346: LD_INT 0
68348: PPUSH
68349: PPUSH
// if not IsInUnit ( unit ) then
68350: LD_VAR 0 1
68354: PPUSH
68355: CALL_OW 310
68359: NOT
68360: IFFALSE 68364
// exit ;
68362: GO 68424
// tmp := IsInUnit ( unit ) ;
68364: LD_ADDR_VAR 0 3
68368: PUSH
68369: LD_VAR 0 1
68373: PPUSH
68374: CALL_OW 310
68378: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68379: LD_VAR 0 3
68383: PPUSH
68384: CALL_OW 247
68388: PUSH
68389: LD_INT 2
68391: EQUAL
68392: IFFALSE 68405
// ComExitVehicle ( unit ) else
68394: LD_VAR 0 1
68398: PPUSH
68399: CALL_OW 121
68403: GO 68414
// ComExitBuilding ( unit ) ;
68405: LD_VAR 0 1
68409: PPUSH
68410: CALL_OW 122
// result := tmp ;
68414: LD_ADDR_VAR 0 2
68418: PUSH
68419: LD_VAR 0 3
68423: ST_TO_ADDR
// end ;
68424: LD_VAR 0 2
68428: RET
// export function ComExitAll ( units ) ; var i ; begin
68429: LD_INT 0
68431: PPUSH
68432: PPUSH
// if not units then
68433: LD_VAR 0 1
68437: NOT
68438: IFFALSE 68442
// exit ;
68440: GO 68468
// for i in units do
68442: LD_ADDR_VAR 0 3
68446: PUSH
68447: LD_VAR 0 1
68451: PUSH
68452: FOR_IN
68453: IFFALSE 68466
// ComExit ( i ) ;
68455: LD_VAR 0 3
68459: PPUSH
68460: CALL 68346 0 1
68464: GO 68452
68466: POP
68467: POP
// end ;
68468: LD_VAR 0 2
68472: RET
// export function ResetHc ; begin
68473: LD_INT 0
68475: PPUSH
// InitHc ;
68476: CALL_OW 19
// hc_importance := 0 ;
68480: LD_ADDR_OWVAR 32
68484: PUSH
68485: LD_INT 0
68487: ST_TO_ADDR
// end ;
68488: LD_VAR 0 1
68492: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68493: LD_INT 0
68495: PPUSH
68496: PPUSH
68497: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68498: LD_ADDR_VAR 0 6
68502: PUSH
68503: LD_VAR 0 1
68507: PUSH
68508: LD_VAR 0 3
68512: PLUS
68513: PUSH
68514: LD_INT 2
68516: DIV
68517: ST_TO_ADDR
// if _x < 0 then
68518: LD_VAR 0 6
68522: PUSH
68523: LD_INT 0
68525: LESS
68526: IFFALSE 68543
// _x := _x * - 1 ;
68528: LD_ADDR_VAR 0 6
68532: PUSH
68533: LD_VAR 0 6
68537: PUSH
68538: LD_INT 1
68540: NEG
68541: MUL
68542: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68543: LD_ADDR_VAR 0 7
68547: PUSH
68548: LD_VAR 0 2
68552: PUSH
68553: LD_VAR 0 4
68557: PLUS
68558: PUSH
68559: LD_INT 2
68561: DIV
68562: ST_TO_ADDR
// if _y < 0 then
68563: LD_VAR 0 7
68567: PUSH
68568: LD_INT 0
68570: LESS
68571: IFFALSE 68588
// _y := _y * - 1 ;
68573: LD_ADDR_VAR 0 7
68577: PUSH
68578: LD_VAR 0 7
68582: PUSH
68583: LD_INT 1
68585: NEG
68586: MUL
68587: ST_TO_ADDR
// result := [ _x , _y ] ;
68588: LD_ADDR_VAR 0 5
68592: PUSH
68593: LD_VAR 0 6
68597: PUSH
68598: LD_VAR 0 7
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: ST_TO_ADDR
// end ;
68607: LD_VAR 0 5
68611: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68612: LD_INT 0
68614: PPUSH
68615: PPUSH
68616: PPUSH
68617: PPUSH
// task := GetTaskList ( unit ) ;
68618: LD_ADDR_VAR 0 7
68622: PUSH
68623: LD_VAR 0 1
68627: PPUSH
68628: CALL_OW 437
68632: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68633: LD_VAR 0 7
68637: NOT
68638: PUSH
68639: LD_VAR 0 1
68643: PPUSH
68644: LD_VAR 0 2
68648: PPUSH
68649: CALL_OW 308
68653: NOT
68654: AND
68655: IFFALSE 68659
// exit ;
68657: GO 68777
// if IsInArea ( unit , area ) then
68659: LD_VAR 0 1
68663: PPUSH
68664: LD_VAR 0 2
68668: PPUSH
68669: CALL_OW 308
68673: IFFALSE 68691
// begin ComMoveToArea ( unit , goAway ) ;
68675: LD_VAR 0 1
68679: PPUSH
68680: LD_VAR 0 3
68684: PPUSH
68685: CALL_OW 113
// exit ;
68689: GO 68777
// end ; if task [ 1 ] [ 1 ] <> M then
68691: LD_VAR 0 7
68695: PUSH
68696: LD_INT 1
68698: ARRAY
68699: PUSH
68700: LD_INT 1
68702: ARRAY
68703: PUSH
68704: LD_STRING M
68706: NONEQUAL
68707: IFFALSE 68711
// exit ;
68709: GO 68777
// x := task [ 1 ] [ 2 ] ;
68711: LD_ADDR_VAR 0 5
68715: PUSH
68716: LD_VAR 0 7
68720: PUSH
68721: LD_INT 1
68723: ARRAY
68724: PUSH
68725: LD_INT 2
68727: ARRAY
68728: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68729: LD_ADDR_VAR 0 6
68733: PUSH
68734: LD_VAR 0 7
68738: PUSH
68739: LD_INT 1
68741: ARRAY
68742: PUSH
68743: LD_INT 3
68745: ARRAY
68746: ST_TO_ADDR
// if InArea ( x , y , area ) then
68747: LD_VAR 0 5
68751: PPUSH
68752: LD_VAR 0 6
68756: PPUSH
68757: LD_VAR 0 2
68761: PPUSH
68762: CALL_OW 309
68766: IFFALSE 68777
// ComStop ( unit ) ;
68768: LD_VAR 0 1
68772: PPUSH
68773: CALL_OW 141
// end ;
68777: LD_VAR 0 4
68781: RET
// export function Abs ( value ) ; begin
68782: LD_INT 0
68784: PPUSH
// result := value ;
68785: LD_ADDR_VAR 0 2
68789: PUSH
68790: LD_VAR 0 1
68794: ST_TO_ADDR
// if value < 0 then
68795: LD_VAR 0 1
68799: PUSH
68800: LD_INT 0
68802: LESS
68803: IFFALSE 68820
// result := value * - 1 ;
68805: LD_ADDR_VAR 0 2
68809: PUSH
68810: LD_VAR 0 1
68814: PUSH
68815: LD_INT 1
68817: NEG
68818: MUL
68819: ST_TO_ADDR
// end ;
68820: LD_VAR 0 2
68824: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68825: LD_INT 0
68827: PPUSH
68828: PPUSH
68829: PPUSH
68830: PPUSH
68831: PPUSH
68832: PPUSH
68833: PPUSH
68834: PPUSH
// if not unit or not building then
68835: LD_VAR 0 1
68839: NOT
68840: PUSH
68841: LD_VAR 0 2
68845: NOT
68846: OR
68847: IFFALSE 68851
// exit ;
68849: GO 69077
// x := GetX ( building ) ;
68851: LD_ADDR_VAR 0 4
68855: PUSH
68856: LD_VAR 0 2
68860: PPUSH
68861: CALL_OW 250
68865: ST_TO_ADDR
// y := GetY ( building ) ;
68866: LD_ADDR_VAR 0 6
68870: PUSH
68871: LD_VAR 0 2
68875: PPUSH
68876: CALL_OW 251
68880: ST_TO_ADDR
// d := GetDir ( building ) ;
68881: LD_ADDR_VAR 0 8
68885: PUSH
68886: LD_VAR 0 2
68890: PPUSH
68891: CALL_OW 254
68895: ST_TO_ADDR
// r := 4 ;
68896: LD_ADDR_VAR 0 9
68900: PUSH
68901: LD_INT 4
68903: ST_TO_ADDR
// for i := 1 to 5 do
68904: LD_ADDR_VAR 0 10
68908: PUSH
68909: DOUBLE
68910: LD_INT 1
68912: DEC
68913: ST_TO_ADDR
68914: LD_INT 5
68916: PUSH
68917: FOR_TO
68918: IFFALSE 69075
// begin _x := ShiftX ( x , d , r + i ) ;
68920: LD_ADDR_VAR 0 5
68924: PUSH
68925: LD_VAR 0 4
68929: PPUSH
68930: LD_VAR 0 8
68934: PPUSH
68935: LD_VAR 0 9
68939: PUSH
68940: LD_VAR 0 10
68944: PLUS
68945: PPUSH
68946: CALL_OW 272
68950: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68951: LD_ADDR_VAR 0 7
68955: PUSH
68956: LD_VAR 0 6
68960: PPUSH
68961: LD_VAR 0 8
68965: PPUSH
68966: LD_VAR 0 9
68970: PUSH
68971: LD_VAR 0 10
68975: PLUS
68976: PPUSH
68977: CALL_OW 273
68981: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68982: LD_VAR 0 5
68986: PPUSH
68987: LD_VAR 0 7
68991: PPUSH
68992: CALL_OW 488
68996: PUSH
68997: LD_VAR 0 5
69001: PPUSH
69002: LD_VAR 0 7
69006: PPUSH
69007: CALL_OW 428
69011: PPUSH
69012: CALL_OW 247
69016: PUSH
69017: LD_INT 3
69019: PUSH
69020: LD_INT 2
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: IN
69027: NOT
69028: AND
69029: IFFALSE 69073
// begin ComMoveXY ( unit , _x , _y ) ;
69031: LD_VAR 0 1
69035: PPUSH
69036: LD_VAR 0 5
69040: PPUSH
69041: LD_VAR 0 7
69045: PPUSH
69046: CALL_OW 111
// result := [ _x , _y ] ;
69050: LD_ADDR_VAR 0 3
69054: PUSH
69055: LD_VAR 0 5
69059: PUSH
69060: LD_VAR 0 7
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: ST_TO_ADDR
// exit ;
69069: POP
69070: POP
69071: GO 69077
// end ; end ;
69073: GO 68917
69075: POP
69076: POP
// end ;
69077: LD_VAR 0 3
69081: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69082: LD_INT 0
69084: PPUSH
69085: PPUSH
69086: PPUSH
// result := 0 ;
69087: LD_ADDR_VAR 0 3
69091: PUSH
69092: LD_INT 0
69094: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69095: LD_VAR 0 1
69099: PUSH
69100: LD_INT 0
69102: LESS
69103: PUSH
69104: LD_VAR 0 1
69108: PUSH
69109: LD_INT 8
69111: GREATER
69112: OR
69113: PUSH
69114: LD_VAR 0 2
69118: PUSH
69119: LD_INT 0
69121: LESS
69122: OR
69123: PUSH
69124: LD_VAR 0 2
69128: PUSH
69129: LD_INT 8
69131: GREATER
69132: OR
69133: IFFALSE 69137
// exit ;
69135: GO 69212
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69137: LD_ADDR_VAR 0 4
69141: PUSH
69142: LD_INT 22
69144: PUSH
69145: LD_VAR 0 2
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PPUSH
69154: CALL_OW 69
69158: PUSH
69159: FOR_IN
69160: IFFALSE 69210
// begin un := UnitShoot ( i ) ;
69162: LD_ADDR_VAR 0 5
69166: PUSH
69167: LD_VAR 0 4
69171: PPUSH
69172: CALL_OW 504
69176: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69177: LD_VAR 0 5
69181: PPUSH
69182: CALL_OW 255
69186: PUSH
69187: LD_VAR 0 1
69191: EQUAL
69192: IFFALSE 69208
// begin result := un ;
69194: LD_ADDR_VAR 0 3
69198: PUSH
69199: LD_VAR 0 5
69203: ST_TO_ADDR
// exit ;
69204: POP
69205: POP
69206: GO 69212
// end ; end ;
69208: GO 69159
69210: POP
69211: POP
// end ;
69212: LD_VAR 0 3
69216: RET
// export function GetCargoBay ( units ) ; begin
69217: LD_INT 0
69219: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69220: LD_ADDR_VAR 0 2
69224: PUSH
69225: LD_VAR 0 1
69229: PPUSH
69230: LD_INT 2
69232: PUSH
69233: LD_INT 34
69235: PUSH
69236: LD_INT 12
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 34
69245: PUSH
69246: LD_INT 51
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 34
69255: PUSH
69256: LD_INT 32
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 34
69265: PUSH
69266: LD_INT 89
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: PPUSH
69280: CALL_OW 72
69284: ST_TO_ADDR
// end ;
69285: LD_VAR 0 2
69289: RET
// export function Negate ( value ) ; begin
69290: LD_INT 0
69292: PPUSH
// result := not value ;
69293: LD_ADDR_VAR 0 2
69297: PUSH
69298: LD_VAR 0 1
69302: NOT
69303: ST_TO_ADDR
// end ;
69304: LD_VAR 0 2
69308: RET
// export function Inc ( value ) ; begin
69309: LD_INT 0
69311: PPUSH
// result := value + 1 ;
69312: LD_ADDR_VAR 0 2
69316: PUSH
69317: LD_VAR 0 1
69321: PUSH
69322: LD_INT 1
69324: PLUS
69325: ST_TO_ADDR
// end ;
69326: LD_VAR 0 2
69330: RET
// export function Dec ( value ) ; begin
69331: LD_INT 0
69333: PPUSH
// result := value - 1 ;
69334: LD_ADDR_VAR 0 2
69338: PUSH
69339: LD_VAR 0 1
69343: PUSH
69344: LD_INT 1
69346: MINUS
69347: ST_TO_ADDR
// end ;
69348: LD_VAR 0 2
69352: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69353: LD_INT 0
69355: PPUSH
69356: PPUSH
69357: PPUSH
69358: PPUSH
69359: PPUSH
69360: PPUSH
69361: PPUSH
69362: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69363: LD_VAR 0 1
69367: PPUSH
69368: LD_VAR 0 2
69372: PPUSH
69373: CALL_OW 488
69377: NOT
69378: PUSH
69379: LD_VAR 0 3
69383: PPUSH
69384: LD_VAR 0 4
69388: PPUSH
69389: CALL_OW 488
69393: NOT
69394: OR
69395: IFFALSE 69408
// begin result := - 1 ;
69397: LD_ADDR_VAR 0 5
69401: PUSH
69402: LD_INT 1
69404: NEG
69405: ST_TO_ADDR
// exit ;
69406: GO 69643
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69408: LD_ADDR_VAR 0 12
69412: PUSH
69413: LD_VAR 0 1
69417: PPUSH
69418: LD_VAR 0 2
69422: PPUSH
69423: LD_VAR 0 3
69427: PPUSH
69428: LD_VAR 0 4
69432: PPUSH
69433: CALL 68493 0 4
69437: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69438: LD_ADDR_VAR 0 11
69442: PUSH
69443: LD_VAR 0 1
69447: PPUSH
69448: LD_VAR 0 2
69452: PPUSH
69453: LD_VAR 0 12
69457: PUSH
69458: LD_INT 1
69460: ARRAY
69461: PPUSH
69462: LD_VAR 0 12
69466: PUSH
69467: LD_INT 2
69469: ARRAY
69470: PPUSH
69471: CALL_OW 298
69475: ST_TO_ADDR
// distance := 9999 ;
69476: LD_ADDR_VAR 0 10
69480: PUSH
69481: LD_INT 9999
69483: ST_TO_ADDR
// for i := 0 to 5 do
69484: LD_ADDR_VAR 0 6
69488: PUSH
69489: DOUBLE
69490: LD_INT 0
69492: DEC
69493: ST_TO_ADDR
69494: LD_INT 5
69496: PUSH
69497: FOR_TO
69498: IFFALSE 69641
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69500: LD_ADDR_VAR 0 7
69504: PUSH
69505: LD_VAR 0 1
69509: PPUSH
69510: LD_VAR 0 6
69514: PPUSH
69515: LD_VAR 0 11
69519: PPUSH
69520: CALL_OW 272
69524: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69525: LD_ADDR_VAR 0 8
69529: PUSH
69530: LD_VAR 0 2
69534: PPUSH
69535: LD_VAR 0 6
69539: PPUSH
69540: LD_VAR 0 11
69544: PPUSH
69545: CALL_OW 273
69549: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69550: LD_VAR 0 7
69554: PPUSH
69555: LD_VAR 0 8
69559: PPUSH
69560: CALL_OW 488
69564: NOT
69565: IFFALSE 69569
// continue ;
69567: GO 69497
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69569: LD_ADDR_VAR 0 9
69573: PUSH
69574: LD_VAR 0 12
69578: PUSH
69579: LD_INT 1
69581: ARRAY
69582: PPUSH
69583: LD_VAR 0 12
69587: PUSH
69588: LD_INT 2
69590: ARRAY
69591: PPUSH
69592: LD_VAR 0 7
69596: PPUSH
69597: LD_VAR 0 8
69601: PPUSH
69602: CALL_OW 298
69606: ST_TO_ADDR
// if tmp < distance then
69607: LD_VAR 0 9
69611: PUSH
69612: LD_VAR 0 10
69616: LESS
69617: IFFALSE 69639
// begin result := i ;
69619: LD_ADDR_VAR 0 5
69623: PUSH
69624: LD_VAR 0 6
69628: ST_TO_ADDR
// distance := tmp ;
69629: LD_ADDR_VAR 0 10
69633: PUSH
69634: LD_VAR 0 9
69638: ST_TO_ADDR
// end ; end ;
69639: GO 69497
69641: POP
69642: POP
// end ;
69643: LD_VAR 0 5
69647: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69648: LD_INT 0
69650: PPUSH
69651: PPUSH
// if not driver or not IsInUnit ( driver ) then
69652: LD_VAR 0 1
69656: NOT
69657: PUSH
69658: LD_VAR 0 1
69662: PPUSH
69663: CALL_OW 310
69667: NOT
69668: OR
69669: IFFALSE 69673
// exit ;
69671: GO 69763
// vehicle := IsInUnit ( driver ) ;
69673: LD_ADDR_VAR 0 3
69677: PUSH
69678: LD_VAR 0 1
69682: PPUSH
69683: CALL_OW 310
69687: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69688: LD_VAR 0 1
69692: PPUSH
69693: LD_STRING \
69695: PUSH
69696: LD_INT 0
69698: PUSH
69699: LD_INT 0
69701: PUSH
69702: LD_INT 0
69704: PUSH
69705: LD_INT 0
69707: PUSH
69708: LD_INT 0
69710: PUSH
69711: LD_INT 0
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: PUSH
69723: LD_STRING E
69725: PUSH
69726: LD_INT 0
69728: PUSH
69729: LD_INT 0
69731: PUSH
69732: LD_VAR 0 3
69736: PUSH
69737: LD_INT 0
69739: PUSH
69740: LD_INT 0
69742: PUSH
69743: LD_INT 0
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PPUSH
69759: CALL_OW 446
// end ;
69763: LD_VAR 0 2
69767: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69768: LD_INT 0
69770: PPUSH
69771: PPUSH
// if not driver or not IsInUnit ( driver ) then
69772: LD_VAR 0 1
69776: NOT
69777: PUSH
69778: LD_VAR 0 1
69782: PPUSH
69783: CALL_OW 310
69787: NOT
69788: OR
69789: IFFALSE 69793
// exit ;
69791: GO 69883
// vehicle := IsInUnit ( driver ) ;
69793: LD_ADDR_VAR 0 3
69797: PUSH
69798: LD_VAR 0 1
69802: PPUSH
69803: CALL_OW 310
69807: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69808: LD_VAR 0 1
69812: PPUSH
69813: LD_STRING \
69815: PUSH
69816: LD_INT 0
69818: PUSH
69819: LD_INT 0
69821: PUSH
69822: LD_INT 0
69824: PUSH
69825: LD_INT 0
69827: PUSH
69828: LD_INT 0
69830: PUSH
69831: LD_INT 0
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: PUSH
69843: LD_STRING E
69845: PUSH
69846: LD_INT 0
69848: PUSH
69849: LD_INT 0
69851: PUSH
69852: LD_VAR 0 3
69856: PUSH
69857: LD_INT 0
69859: PUSH
69860: LD_INT 0
69862: PUSH
69863: LD_INT 0
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PPUSH
69879: CALL_OW 447
// end ;
69883: LD_VAR 0 2
69887: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69888: LD_INT 0
69890: PPUSH
69891: PPUSH
69892: PPUSH
// tmp := [ ] ;
69893: LD_ADDR_VAR 0 5
69897: PUSH
69898: EMPTY
69899: ST_TO_ADDR
// for i in units do
69900: LD_ADDR_VAR 0 4
69904: PUSH
69905: LD_VAR 0 1
69909: PUSH
69910: FOR_IN
69911: IFFALSE 69949
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69913: LD_ADDR_VAR 0 5
69917: PUSH
69918: LD_VAR 0 5
69922: PPUSH
69923: LD_VAR 0 5
69927: PUSH
69928: LD_INT 1
69930: PLUS
69931: PPUSH
69932: LD_VAR 0 4
69936: PPUSH
69937: CALL_OW 256
69941: PPUSH
69942: CALL_OW 2
69946: ST_TO_ADDR
69947: GO 69910
69949: POP
69950: POP
// if not tmp then
69951: LD_VAR 0 5
69955: NOT
69956: IFFALSE 69960
// exit ;
69958: GO 70008
// if asc then
69960: LD_VAR 0 2
69964: IFFALSE 69988
// result := SortListByListAsc ( units , tmp ) else
69966: LD_ADDR_VAR 0 3
69970: PUSH
69971: LD_VAR 0 1
69975: PPUSH
69976: LD_VAR 0 5
69980: PPUSH
69981: CALL_OW 76
69985: ST_TO_ADDR
69986: GO 70008
// result := SortListByListDesc ( units , tmp ) ;
69988: LD_ADDR_VAR 0 3
69992: PUSH
69993: LD_VAR 0 1
69997: PPUSH
69998: LD_VAR 0 5
70002: PPUSH
70003: CALL_OW 77
70007: ST_TO_ADDR
// end ;
70008: LD_VAR 0 3
70012: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70013: LD_INT 0
70015: PPUSH
70016: PPUSH
// task := GetTaskList ( mech ) ;
70017: LD_ADDR_VAR 0 4
70021: PUSH
70022: LD_VAR 0 1
70026: PPUSH
70027: CALL_OW 437
70031: ST_TO_ADDR
// if not task then
70032: LD_VAR 0 4
70036: NOT
70037: IFFALSE 70041
// exit ;
70039: GO 70083
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70041: LD_ADDR_VAR 0 3
70045: PUSH
70046: LD_VAR 0 4
70050: PUSH
70051: LD_INT 1
70053: ARRAY
70054: PUSH
70055: LD_INT 1
70057: ARRAY
70058: PUSH
70059: LD_STRING r
70061: EQUAL
70062: PUSH
70063: LD_VAR 0 4
70067: PUSH
70068: LD_INT 1
70070: ARRAY
70071: PUSH
70072: LD_INT 4
70074: ARRAY
70075: PUSH
70076: LD_VAR 0 2
70080: EQUAL
70081: AND
70082: ST_TO_ADDR
// end ;
70083: LD_VAR 0 3
70087: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70088: LD_INT 0
70090: PPUSH
// SetDir ( unit , d ) ;
70091: LD_VAR 0 1
70095: PPUSH
70096: LD_VAR 0 4
70100: PPUSH
70101: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70105: LD_VAR 0 1
70109: PPUSH
70110: LD_VAR 0 2
70114: PPUSH
70115: LD_VAR 0 3
70119: PPUSH
70120: LD_VAR 0 5
70124: PPUSH
70125: CALL_OW 48
// end ;
70129: LD_VAR 0 6
70133: RET
// export function ToNaturalNumber ( number ) ; begin
70134: LD_INT 0
70136: PPUSH
// result := number div 1 ;
70137: LD_ADDR_VAR 0 2
70141: PUSH
70142: LD_VAR 0 1
70146: PUSH
70147: LD_INT 1
70149: DIV
70150: ST_TO_ADDR
// if number < 0 then
70151: LD_VAR 0 1
70155: PUSH
70156: LD_INT 0
70158: LESS
70159: IFFALSE 70169
// result := 0 ;
70161: LD_ADDR_VAR 0 2
70165: PUSH
70166: LD_INT 0
70168: ST_TO_ADDR
// end ;
70169: LD_VAR 0 2
70173: RET
// export function SortByClass ( units , class ) ; var un ; begin
70174: LD_INT 0
70176: PPUSH
70177: PPUSH
// if not units or not class then
70178: LD_VAR 0 1
70182: NOT
70183: PUSH
70184: LD_VAR 0 2
70188: NOT
70189: OR
70190: IFFALSE 70194
// exit ;
70192: GO 70289
// result := [ ] ;
70194: LD_ADDR_VAR 0 3
70198: PUSH
70199: EMPTY
70200: ST_TO_ADDR
// for un in units do
70201: LD_ADDR_VAR 0 4
70205: PUSH
70206: LD_VAR 0 1
70210: PUSH
70211: FOR_IN
70212: IFFALSE 70287
// if GetClass ( un ) = class then
70214: LD_VAR 0 4
70218: PPUSH
70219: CALL_OW 257
70223: PUSH
70224: LD_VAR 0 2
70228: EQUAL
70229: IFFALSE 70256
// result := Insert ( result , 1 , un ) else
70231: LD_ADDR_VAR 0 3
70235: PUSH
70236: LD_VAR 0 3
70240: PPUSH
70241: LD_INT 1
70243: PPUSH
70244: LD_VAR 0 4
70248: PPUSH
70249: CALL_OW 2
70253: ST_TO_ADDR
70254: GO 70285
// result := Replace ( result , result + 1 , un ) ;
70256: LD_ADDR_VAR 0 3
70260: PUSH
70261: LD_VAR 0 3
70265: PPUSH
70266: LD_VAR 0 3
70270: PUSH
70271: LD_INT 1
70273: PLUS
70274: PPUSH
70275: LD_VAR 0 4
70279: PPUSH
70280: CALL_OW 1
70284: ST_TO_ADDR
70285: GO 70211
70287: POP
70288: POP
// end ;
70289: LD_VAR 0 3
70293: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70294: LD_INT 0
70296: PPUSH
70297: PPUSH
70298: PPUSH
70299: PPUSH
70300: PPUSH
70301: PPUSH
70302: PPUSH
// result := [ ] ;
70303: LD_ADDR_VAR 0 4
70307: PUSH
70308: EMPTY
70309: ST_TO_ADDR
// if x - r < 0 then
70310: LD_VAR 0 1
70314: PUSH
70315: LD_VAR 0 3
70319: MINUS
70320: PUSH
70321: LD_INT 0
70323: LESS
70324: IFFALSE 70336
// min_x := 0 else
70326: LD_ADDR_VAR 0 8
70330: PUSH
70331: LD_INT 0
70333: ST_TO_ADDR
70334: GO 70352
// min_x := x - r ;
70336: LD_ADDR_VAR 0 8
70340: PUSH
70341: LD_VAR 0 1
70345: PUSH
70346: LD_VAR 0 3
70350: MINUS
70351: ST_TO_ADDR
// if y - r < 0 then
70352: LD_VAR 0 2
70356: PUSH
70357: LD_VAR 0 3
70361: MINUS
70362: PUSH
70363: LD_INT 0
70365: LESS
70366: IFFALSE 70378
// min_y := 0 else
70368: LD_ADDR_VAR 0 7
70372: PUSH
70373: LD_INT 0
70375: ST_TO_ADDR
70376: GO 70394
// min_y := y - r ;
70378: LD_ADDR_VAR 0 7
70382: PUSH
70383: LD_VAR 0 2
70387: PUSH
70388: LD_VAR 0 3
70392: MINUS
70393: ST_TO_ADDR
// max_x := x + r ;
70394: LD_ADDR_VAR 0 9
70398: PUSH
70399: LD_VAR 0 1
70403: PUSH
70404: LD_VAR 0 3
70408: PLUS
70409: ST_TO_ADDR
// max_y := y + r ;
70410: LD_ADDR_VAR 0 10
70414: PUSH
70415: LD_VAR 0 2
70419: PUSH
70420: LD_VAR 0 3
70424: PLUS
70425: ST_TO_ADDR
// for _x = min_x to max_x do
70426: LD_ADDR_VAR 0 5
70430: PUSH
70431: DOUBLE
70432: LD_VAR 0 8
70436: DEC
70437: ST_TO_ADDR
70438: LD_VAR 0 9
70442: PUSH
70443: FOR_TO
70444: IFFALSE 70545
// for _y = min_y to max_y do
70446: LD_ADDR_VAR 0 6
70450: PUSH
70451: DOUBLE
70452: LD_VAR 0 7
70456: DEC
70457: ST_TO_ADDR
70458: LD_VAR 0 10
70462: PUSH
70463: FOR_TO
70464: IFFALSE 70541
// begin if not ValidHex ( _x , _y ) then
70466: LD_VAR 0 5
70470: PPUSH
70471: LD_VAR 0 6
70475: PPUSH
70476: CALL_OW 488
70480: NOT
70481: IFFALSE 70485
// continue ;
70483: GO 70463
// if GetResourceTypeXY ( _x , _y ) then
70485: LD_VAR 0 5
70489: PPUSH
70490: LD_VAR 0 6
70494: PPUSH
70495: CALL_OW 283
70499: IFFALSE 70539
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70501: LD_ADDR_VAR 0 4
70505: PUSH
70506: LD_VAR 0 4
70510: PPUSH
70511: LD_VAR 0 4
70515: PUSH
70516: LD_INT 1
70518: PLUS
70519: PPUSH
70520: LD_VAR 0 5
70524: PUSH
70525: LD_VAR 0 6
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PPUSH
70534: CALL_OW 1
70538: ST_TO_ADDR
// end ;
70539: GO 70463
70541: POP
70542: POP
70543: GO 70443
70545: POP
70546: POP
// end ;
70547: LD_VAR 0 4
70551: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70552: LD_INT 0
70554: PPUSH
70555: PPUSH
70556: PPUSH
70557: PPUSH
70558: PPUSH
70559: PPUSH
70560: PPUSH
70561: PPUSH
// if not units then
70562: LD_VAR 0 1
70566: NOT
70567: IFFALSE 70571
// exit ;
70569: GO 71095
// result := UnitFilter ( units , [ f_ok ] ) ;
70571: LD_ADDR_VAR 0 3
70575: PUSH
70576: LD_VAR 0 1
70580: PPUSH
70581: LD_INT 50
70583: PUSH
70584: EMPTY
70585: LIST
70586: PPUSH
70587: CALL_OW 72
70591: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70592: LD_ADDR_VAR 0 8
70596: PUSH
70597: LD_VAR 0 1
70601: PUSH
70602: LD_INT 1
70604: ARRAY
70605: PPUSH
70606: CALL_OW 255
70610: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70611: LD_ADDR_VAR 0 10
70615: PUSH
70616: LD_INT 29
70618: PUSH
70619: LD_INT 91
70621: PUSH
70622: LD_INT 49
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: LIST
70629: ST_TO_ADDR
// if not result then
70630: LD_VAR 0 3
70634: NOT
70635: IFFALSE 70639
// exit ;
70637: GO 71095
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70639: LD_ADDR_VAR 0 5
70643: PUSH
70644: LD_INT 81
70646: PUSH
70647: LD_VAR 0 8
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PPUSH
70656: CALL_OW 69
70660: ST_TO_ADDR
// for i in result do
70661: LD_ADDR_VAR 0 4
70665: PUSH
70666: LD_VAR 0 3
70670: PUSH
70671: FOR_IN
70672: IFFALSE 71093
// begin tag := GetTag ( i ) + 1 ;
70674: LD_ADDR_VAR 0 9
70678: PUSH
70679: LD_VAR 0 4
70683: PPUSH
70684: CALL_OW 110
70688: PUSH
70689: LD_INT 1
70691: PLUS
70692: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70693: LD_ADDR_VAR 0 7
70697: PUSH
70698: LD_VAR 0 4
70702: PPUSH
70703: CALL_OW 250
70707: PPUSH
70708: LD_VAR 0 4
70712: PPUSH
70713: CALL_OW 251
70717: PPUSH
70718: LD_INT 6
70720: PPUSH
70721: CALL 70294 0 3
70725: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70726: LD_VAR 0 4
70730: PPUSH
70731: CALL_OW 247
70735: PUSH
70736: LD_INT 2
70738: EQUAL
70739: PUSH
70740: LD_VAR 0 7
70744: AND
70745: PUSH
70746: LD_VAR 0 4
70750: PPUSH
70751: CALL_OW 264
70755: PUSH
70756: LD_VAR 0 10
70760: IN
70761: NOT
70762: AND
70763: IFFALSE 70802
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70765: LD_VAR 0 4
70769: PPUSH
70770: LD_VAR 0 7
70774: PUSH
70775: LD_INT 1
70777: ARRAY
70778: PUSH
70779: LD_INT 1
70781: ARRAY
70782: PPUSH
70783: LD_VAR 0 7
70787: PUSH
70788: LD_INT 1
70790: ARRAY
70791: PUSH
70792: LD_INT 2
70794: ARRAY
70795: PPUSH
70796: CALL_OW 116
70800: GO 71091
// if path > tag then
70802: LD_VAR 0 2
70806: PUSH
70807: LD_VAR 0 9
70811: GREATER
70812: IFFALSE 71020
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70814: LD_ADDR_VAR 0 6
70818: PUSH
70819: LD_VAR 0 5
70823: PPUSH
70824: LD_INT 91
70826: PUSH
70827: LD_VAR 0 4
70831: PUSH
70832: LD_INT 8
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: LIST
70839: PPUSH
70840: CALL_OW 72
70844: ST_TO_ADDR
// if nearEnemy then
70845: LD_VAR 0 6
70849: IFFALSE 70918
// begin if GetWeapon ( i ) = ru_time_lapser then
70851: LD_VAR 0 4
70855: PPUSH
70856: CALL_OW 264
70860: PUSH
70861: LD_INT 49
70863: EQUAL
70864: IFFALSE 70892
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70866: LD_VAR 0 4
70870: PPUSH
70871: LD_VAR 0 6
70875: PPUSH
70876: LD_VAR 0 4
70880: PPUSH
70881: CALL_OW 74
70885: PPUSH
70886: CALL_OW 112
70890: GO 70916
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70892: LD_VAR 0 4
70896: PPUSH
70897: LD_VAR 0 6
70901: PPUSH
70902: LD_VAR 0 4
70906: PPUSH
70907: CALL_OW 74
70911: PPUSH
70912: CALL_OW 115
// end else
70916: GO 71018
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70918: LD_VAR 0 4
70922: PPUSH
70923: LD_VAR 0 2
70927: PUSH
70928: LD_VAR 0 9
70932: ARRAY
70933: PUSH
70934: LD_INT 1
70936: ARRAY
70937: PPUSH
70938: LD_VAR 0 2
70942: PUSH
70943: LD_VAR 0 9
70947: ARRAY
70948: PUSH
70949: LD_INT 2
70951: ARRAY
70952: PPUSH
70953: CALL_OW 297
70957: PUSH
70958: LD_INT 6
70960: GREATER
70961: IFFALSE 71004
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70963: LD_VAR 0 4
70967: PPUSH
70968: LD_VAR 0 2
70972: PUSH
70973: LD_VAR 0 9
70977: ARRAY
70978: PUSH
70979: LD_INT 1
70981: ARRAY
70982: PPUSH
70983: LD_VAR 0 2
70987: PUSH
70988: LD_VAR 0 9
70992: ARRAY
70993: PUSH
70994: LD_INT 2
70996: ARRAY
70997: PPUSH
70998: CALL_OW 114
71002: GO 71018
// SetTag ( i , tag ) ;
71004: LD_VAR 0 4
71008: PPUSH
71009: LD_VAR 0 9
71013: PPUSH
71014: CALL_OW 109
// end else
71018: GO 71091
// if enemy then
71020: LD_VAR 0 5
71024: IFFALSE 71091
// begin if GetWeapon ( i ) = ru_time_lapser then
71026: LD_VAR 0 4
71030: PPUSH
71031: CALL_OW 264
71035: PUSH
71036: LD_INT 49
71038: EQUAL
71039: IFFALSE 71067
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71041: LD_VAR 0 4
71045: PPUSH
71046: LD_VAR 0 5
71050: PPUSH
71051: LD_VAR 0 4
71055: PPUSH
71056: CALL_OW 74
71060: PPUSH
71061: CALL_OW 112
71065: GO 71091
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71067: LD_VAR 0 4
71071: PPUSH
71072: LD_VAR 0 5
71076: PPUSH
71077: LD_VAR 0 4
71081: PPUSH
71082: CALL_OW 74
71086: PPUSH
71087: CALL_OW 115
// end ; end ;
71091: GO 70671
71093: POP
71094: POP
// end ;
71095: LD_VAR 0 3
71099: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71100: LD_INT 0
71102: PPUSH
71103: PPUSH
71104: PPUSH
// if not unit or IsInUnit ( unit ) then
71105: LD_VAR 0 1
71109: NOT
71110: PUSH
71111: LD_VAR 0 1
71115: PPUSH
71116: CALL_OW 310
71120: OR
71121: IFFALSE 71125
// exit ;
71123: GO 71216
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71125: LD_ADDR_VAR 0 4
71129: PUSH
71130: LD_VAR 0 1
71134: PPUSH
71135: CALL_OW 250
71139: PPUSH
71140: LD_VAR 0 2
71144: PPUSH
71145: LD_INT 1
71147: PPUSH
71148: CALL_OW 272
71152: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71153: LD_ADDR_VAR 0 5
71157: PUSH
71158: LD_VAR 0 1
71162: PPUSH
71163: CALL_OW 251
71167: PPUSH
71168: LD_VAR 0 2
71172: PPUSH
71173: LD_INT 1
71175: PPUSH
71176: CALL_OW 273
71180: ST_TO_ADDR
// if ValidHex ( x , y ) then
71181: LD_VAR 0 4
71185: PPUSH
71186: LD_VAR 0 5
71190: PPUSH
71191: CALL_OW 488
71195: IFFALSE 71216
// ComTurnXY ( unit , x , y ) ;
71197: LD_VAR 0 1
71201: PPUSH
71202: LD_VAR 0 4
71206: PPUSH
71207: LD_VAR 0 5
71211: PPUSH
71212: CALL_OW 118
// end ;
71216: LD_VAR 0 3
71220: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71221: LD_INT 0
71223: PPUSH
71224: PPUSH
// result := false ;
71225: LD_ADDR_VAR 0 3
71229: PUSH
71230: LD_INT 0
71232: ST_TO_ADDR
// if not units then
71233: LD_VAR 0 2
71237: NOT
71238: IFFALSE 71242
// exit ;
71240: GO 71287
// for i in units do
71242: LD_ADDR_VAR 0 4
71246: PUSH
71247: LD_VAR 0 2
71251: PUSH
71252: FOR_IN
71253: IFFALSE 71285
// if See ( side , i ) then
71255: LD_VAR 0 1
71259: PPUSH
71260: LD_VAR 0 4
71264: PPUSH
71265: CALL_OW 292
71269: IFFALSE 71283
// begin result := true ;
71271: LD_ADDR_VAR 0 3
71275: PUSH
71276: LD_INT 1
71278: ST_TO_ADDR
// exit ;
71279: POP
71280: POP
71281: GO 71287
// end ;
71283: GO 71252
71285: POP
71286: POP
// end ;
71287: LD_VAR 0 3
71291: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71292: LD_INT 0
71294: PPUSH
71295: PPUSH
71296: PPUSH
71297: PPUSH
// if not unit or not points then
71298: LD_VAR 0 1
71302: NOT
71303: PUSH
71304: LD_VAR 0 2
71308: NOT
71309: OR
71310: IFFALSE 71314
// exit ;
71312: GO 71404
// dist := 99999 ;
71314: LD_ADDR_VAR 0 5
71318: PUSH
71319: LD_INT 99999
71321: ST_TO_ADDR
// for i in points do
71322: LD_ADDR_VAR 0 4
71326: PUSH
71327: LD_VAR 0 2
71331: PUSH
71332: FOR_IN
71333: IFFALSE 71402
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71335: LD_ADDR_VAR 0 6
71339: PUSH
71340: LD_VAR 0 1
71344: PPUSH
71345: LD_VAR 0 4
71349: PUSH
71350: LD_INT 1
71352: ARRAY
71353: PPUSH
71354: LD_VAR 0 4
71358: PUSH
71359: LD_INT 2
71361: ARRAY
71362: PPUSH
71363: CALL_OW 297
71367: ST_TO_ADDR
// if tmpDist < dist then
71368: LD_VAR 0 6
71372: PUSH
71373: LD_VAR 0 5
71377: LESS
71378: IFFALSE 71400
// begin result := i ;
71380: LD_ADDR_VAR 0 3
71384: PUSH
71385: LD_VAR 0 4
71389: ST_TO_ADDR
// dist := tmpDist ;
71390: LD_ADDR_VAR 0 5
71394: PUSH
71395: LD_VAR 0 6
71399: ST_TO_ADDR
// end ; end ;
71400: GO 71332
71402: POP
71403: POP
// end ;
71404: LD_VAR 0 3
71408: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71409: LD_INT 0
71411: PPUSH
// uc_side := side ;
71412: LD_ADDR_OWVAR 20
71416: PUSH
71417: LD_VAR 0 1
71421: ST_TO_ADDR
// uc_nation := 3 ;
71422: LD_ADDR_OWVAR 21
71426: PUSH
71427: LD_INT 3
71429: ST_TO_ADDR
// vc_chassis := 25 ;
71430: LD_ADDR_OWVAR 37
71434: PUSH
71435: LD_INT 25
71437: ST_TO_ADDR
// vc_engine := engine_siberite ;
71438: LD_ADDR_OWVAR 39
71442: PUSH
71443: LD_INT 3
71445: ST_TO_ADDR
// vc_control := control_computer ;
71446: LD_ADDR_OWVAR 38
71450: PUSH
71451: LD_INT 3
71453: ST_TO_ADDR
// vc_weapon := 59 ;
71454: LD_ADDR_OWVAR 40
71458: PUSH
71459: LD_INT 59
71461: ST_TO_ADDR
// result := CreateVehicle ;
71462: LD_ADDR_VAR 0 5
71466: PUSH
71467: CALL_OW 45
71471: ST_TO_ADDR
// SetDir ( result , d ) ;
71472: LD_VAR 0 5
71476: PPUSH
71477: LD_VAR 0 4
71481: PPUSH
71482: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71486: LD_VAR 0 5
71490: PPUSH
71491: LD_VAR 0 2
71495: PPUSH
71496: LD_VAR 0 3
71500: PPUSH
71501: LD_INT 0
71503: PPUSH
71504: CALL_OW 48
// end ;
71508: LD_VAR 0 5
71512: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71513: LD_INT 0
71515: PPUSH
71516: PPUSH
71517: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71518: LD_ADDR_VAR 0 2
71522: PUSH
71523: LD_INT 0
71525: PUSH
71526: LD_INT 0
71528: PUSH
71529: LD_INT 0
71531: PUSH
71532: LD_INT 0
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71541: LD_VAR 0 1
71545: NOT
71546: PUSH
71547: LD_VAR 0 1
71551: PPUSH
71552: CALL_OW 264
71556: PUSH
71557: LD_INT 12
71559: PUSH
71560: LD_INT 51
71562: PUSH
71563: LD_INT 32
71565: PUSH
71566: LD_INT 89
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: IN
71575: NOT
71576: OR
71577: IFFALSE 71581
// exit ;
71579: GO 71679
// for i := 1 to 3 do
71581: LD_ADDR_VAR 0 3
71585: PUSH
71586: DOUBLE
71587: LD_INT 1
71589: DEC
71590: ST_TO_ADDR
71591: LD_INT 3
71593: PUSH
71594: FOR_TO
71595: IFFALSE 71677
// begin tmp := GetCargo ( cargo , i ) ;
71597: LD_ADDR_VAR 0 4
71601: PUSH
71602: LD_VAR 0 1
71606: PPUSH
71607: LD_VAR 0 3
71611: PPUSH
71612: CALL_OW 289
71616: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71617: LD_ADDR_VAR 0 2
71621: PUSH
71622: LD_VAR 0 2
71626: PPUSH
71627: LD_VAR 0 3
71631: PPUSH
71632: LD_VAR 0 4
71636: PPUSH
71637: CALL_OW 1
71641: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71642: LD_ADDR_VAR 0 2
71646: PUSH
71647: LD_VAR 0 2
71651: PPUSH
71652: LD_INT 4
71654: PPUSH
71655: LD_VAR 0 2
71659: PUSH
71660: LD_INT 4
71662: ARRAY
71663: PUSH
71664: LD_VAR 0 4
71668: PLUS
71669: PPUSH
71670: CALL_OW 1
71674: ST_TO_ADDR
// end ;
71675: GO 71594
71677: POP
71678: POP
// end ;
71679: LD_VAR 0 2
71683: RET
// export function Length ( array ) ; begin
71684: LD_INT 0
71686: PPUSH
// result := array + 0 ;
71687: LD_ADDR_VAR 0 2
71691: PUSH
71692: LD_VAR 0 1
71696: PUSH
71697: LD_INT 0
71699: PLUS
71700: ST_TO_ADDR
// end ;
71701: LD_VAR 0 2
71705: RET
// export function PrepareArray ( array ) ; begin
71706: LD_INT 0
71708: PPUSH
// result := array diff 0 ;
71709: LD_ADDR_VAR 0 2
71713: PUSH
71714: LD_VAR 0 1
71718: PUSH
71719: LD_INT 0
71721: DIFF
71722: ST_TO_ADDR
// if not result [ 1 ] then
71723: LD_VAR 0 2
71727: PUSH
71728: LD_INT 1
71730: ARRAY
71731: NOT
71732: IFFALSE 71752
// result := Delete ( result , 1 ) ;
71734: LD_ADDR_VAR 0 2
71738: PUSH
71739: LD_VAR 0 2
71743: PPUSH
71744: LD_INT 1
71746: PPUSH
71747: CALL_OW 3
71751: ST_TO_ADDR
// end ;
71752: LD_VAR 0 2
71756: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71757: LD_INT 0
71759: PPUSH
71760: PPUSH
71761: PPUSH
71762: PPUSH
// sibRocketRange := 25 ;
71763: LD_ADDR_VAR 0 6
71767: PUSH
71768: LD_INT 25
71770: ST_TO_ADDR
// result := false ;
71771: LD_ADDR_VAR 0 4
71775: PUSH
71776: LD_INT 0
71778: ST_TO_ADDR
// for i := 0 to 5 do
71779: LD_ADDR_VAR 0 5
71783: PUSH
71784: DOUBLE
71785: LD_INT 0
71787: DEC
71788: ST_TO_ADDR
71789: LD_INT 5
71791: PUSH
71792: FOR_TO
71793: IFFALSE 71860
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71795: LD_VAR 0 1
71799: PPUSH
71800: LD_VAR 0 5
71804: PPUSH
71805: LD_VAR 0 6
71809: PPUSH
71810: CALL_OW 272
71814: PPUSH
71815: LD_VAR 0 2
71819: PPUSH
71820: LD_VAR 0 5
71824: PPUSH
71825: LD_VAR 0 6
71829: PPUSH
71830: CALL_OW 273
71834: PPUSH
71835: LD_VAR 0 3
71839: PPUSH
71840: CALL_OW 309
71844: IFFALSE 71858
// begin result := true ;
71846: LD_ADDR_VAR 0 4
71850: PUSH
71851: LD_INT 1
71853: ST_TO_ADDR
// exit ;
71854: POP
71855: POP
71856: GO 71862
// end ;
71858: GO 71792
71860: POP
71861: POP
// end ;
71862: LD_VAR 0 4
71866: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71867: LD_INT 0
71869: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71870: LD_VAR 0 1
71874: PPUSH
71875: LD_VAR 0 2
71879: PPUSH
71880: LD_INT 0
71882: PPUSH
71883: LD_INT 0
71885: PPUSH
71886: LD_INT 1
71888: PPUSH
71889: LD_INT 0
71891: PPUSH
71892: CALL_OW 587
// end ; end_of_file
71896: LD_VAR 0 3
71900: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71901: LD_VAR 0 1
71905: PPUSH
71906: LD_VAR 0 2
71910: PPUSH
71911: LD_VAR 0 3
71915: PPUSH
71916: LD_VAR 0 4
71920: PPUSH
71921: LD_VAR 0 5
71925: PPUSH
71926: LD_VAR 0 6
71930: PPUSH
71931: CALL 10389 0 6
// end ;
71935: PPOPN 6
71937: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71938: LD_INT 0
71940: PPUSH
// begin if not units then
71941: LD_VAR 0 1
71945: NOT
71946: IFFALSE 71950
// exit ;
71948: GO 71950
// end ;
71950: PPOPN 7
71952: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71953: CALL 10293 0 0
// end ;
71957: PPOPN 1
71959: END
