// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 1994 0 0
// PrepareArabian ;
  23: CALL 1234 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5617 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_OWVAR 67
 672: ARRAY
 673: PPUSH
 674: CALL 504 0 2
// for i := 1 to 2 do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_INT 2
 690: PUSH
 691: FOR_TO
 692: IFFALSE 729
// begin hc_class := 21 ;
 694: LD_ADDR_OWVAR 28
 698: PUSH
 699: LD_INT 21
 701: ST_TO_ADDR
// hc_gallery :=  ;
 702: LD_ADDR_OWVAR 33
 706: PUSH
 707: LD_STRING 
 709: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 691
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 782
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end ;
 780: GO 744
 782: POP
 783: POP
// for i := 1 to 2 do
 784: LD_ADDR_VAR 0 3
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 2
 796: PUSH
 797: FOR_TO
 798: IFFALSE 835
// begin hc_class := 13 ;
 800: LD_ADDR_OWVAR 28
 804: PUSH
 805: LD_INT 13
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 816: CALL_OW 44
 820: PPUSH
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 49
// end ;
 833: GO 797
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 2
 841: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
// if not observer or not unit then
 847: LD_VAR 0 1
 851: NOT
 852: PUSH
 853: LD_VAR 0 2
 857: NOT
 858: OR
 859: IFFALSE 863
// exit ;
 861: GO 911
// if not See ( GetSide ( observer ) , unit ) then
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 292
 882: NOT
 883: IFFALSE 887
// exit ;
 885: GO 911
// result := GetDistUnits ( observer , unit ) < 12 ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 296
 906: PUSH
 907: LD_INT 12
 909: LESS
 910: ST_TO_ADDR
// end ;
 911: LD_VAR 0 3
 915: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 916: LD_INT 0
 918: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: CALL_OW 488
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ;
1003: LD_VAR 0 4
1007: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
1014: PPUSH
// if not unit then
1015: LD_VAR 0 1
1019: NOT
1020: IFFALSE 1024
// exit ;
1022: GO 1229
// side := GetSide ( unit ) ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 255
1038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_VAR 0 4
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_VAR 0 2
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 69
1076: ST_TO_ADDR
// if not tmp then
1077: LD_VAR 0 5
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1229
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 5
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 34329 0 4
1111: ST_TO_ADDR
// places := 1 ;
1112: LD_ADDR_VAR 0 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 7
1148: PUSH
1149: LD_INT 8
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1173
// places := 6 ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// for i in tmp do
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: LD_VAR 0 5
1182: PUSH
1183: FOR_IN
1184: IFFALSE 1227
// begin if UnitsInside ( i ) - places <= 0 then
1186: LD_VAR 0 6
1190: PPUSH
1191: CALL_OW 313
1195: PUSH
1196: LD_VAR 0 7
1200: MINUS
1201: PUSH
1202: LD_INT 0
1204: LESSEQUAL
1205: IFFALSE 1211
// continue else
1207: GO 1183
1209: GO 1225
// begin result := i ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_VAR 0 6
1220: ST_TO_ADDR
// exit ;
1221: POP
1222: POP
1223: GO 1229
// end ; end ;
1225: GO 1183
1227: POP
1228: POP
// end ; end_of_file
1229: LD_VAR 0 3
1233: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1234: LD_INT 0
1236: PPUSH
1237: PPUSH
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// uc_nation := 2 ;
1246: LD_ADDR_OWVAR 21
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1254: LD_ADDR_EXP 18
1258: PUSH
1259: LD_STRING Heike
1261: PPUSH
1262: LD_EXP 1
1266: NOT
1267: PPUSH
1268: LD_EXP 2
1272: PPUSH
1273: CALL 28908 0 3
1277: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1278: LD_ADDR_EXP 21
1282: PUSH
1283: LD_STRING Ibrahim
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL 28908 0 3
1301: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1302: LD_ADDR_EXP 19
1306: PUSH
1307: LD_STRING Givi
1309: PPUSH
1310: LD_EXP 1
1314: NOT
1315: PPUSH
1316: LD_EXP 2
1320: PPUSH
1321: CALL 28908 0 3
1325: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1326: LD_ADDR_EXP 22
1330: PUSH
1331: LD_STRING Kamil
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 2
1344: PPUSH
1345: CALL 28908 0 3
1349: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1350: LD_ADDR_EXP 23
1354: PUSH
1355: LD_STRING Kaia
1357: PPUSH
1358: LD_EXP 1
1362: NOT
1363: PPUSH
1364: LD_EXP 2
1368: PPUSH
1369: CALL 28908 0 3
1373: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1374: LD_ADDR_EXP 24
1378: PUSH
1379: LD_STRING Sophia
1381: PPUSH
1382: LD_EXP 1
1386: NOT
1387: PPUSH
1388: LD_EXP 2
1392: PPUSH
1393: CALL 28908 0 3
1397: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1398: LD_ADDR_EXP 25
1402: PUSH
1403: LD_STRING Markov
1405: PPUSH
1406: LD_EXP 1
1410: NOT
1411: PPUSH
1412: LD_EXP 2
1416: PPUSH
1417: CALL 28908 0 3
1421: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1422: LD_ADDR_EXP 28
1426: PUSH
1427: LD_STRING Aviradze
1429: PPUSH
1430: LD_EXP 1
1434: NOT
1435: PPUSH
1436: LD_EXP 2
1440: PPUSH
1441: CALL 28908 0 3
1445: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1446: LD_ADDR_EXP 27
1450: PUSH
1451: LD_STRING Kurt
1453: PPUSH
1454: LD_EXP 1
1458: NOT
1459: PPUSH
1460: LD_EXP 2
1464: PPUSH
1465: CALL 28908 0 3
1469: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1470: LD_ADDR_EXP 20
1474: PUSH
1475: LD_STRING Mike
1477: PPUSH
1478: LD_EXP 1
1482: NOT
1483: PPUSH
1484: LD_EXP 2
1488: PPUSH
1489: CALL 28908 0 3
1493: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1494: LD_ADDR_EXP 29
1498: PUSH
1499: LD_STRING 04_1_others
1501: PPUSH
1502: CALL_OW 31
1506: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1507: LD_ADDR_EXP 31
1511: PUSH
1512: LD_STRING 04_1_apes
1514: PPUSH
1515: CALL_OW 31
1519: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_STRING 04_1_Vehicles
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// uc_side := 5 ;
1535: LD_ADDR_OWVAR 20
1539: PUSH
1540: LD_INT 5
1542: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1543: LD_ADDR_EXP 26
1547: PUSH
1548: LD_STRING Abdul
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: LD_STRING 
1556: PPUSH
1557: CALL 28908 0 3
1561: ST_TO_ADDR
// end ;
1562: LD_VAR 0 1
1566: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1567: LD_STRING 04_1_KaganCaptured
1569: PPUSH
1570: LD_INT 0
1572: PPUSH
1573: CALL_OW 30
1577: PUSH
1578: LD_INT 22
1580: PUSH
1581: LD_INT 5
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PPUSH
1588: CALL_OW 69
1592: NOT
1593: AND
1594: PUSH
1595: LD_INT 124
1597: PPUSH
1598: LD_INT 26
1600: PPUSH
1601: CALL_OW 428
1605: PUSH
1606: LD_INT 0
1608: EQUAL
1609: PUSH
1610: LD_INT 124
1612: PPUSH
1613: LD_INT 26
1615: PPUSH
1616: CALL_OW 428
1620: PPUSH
1621: CALL_OW 255
1625: PUSH
1626: LD_INT 2
1628: EQUAL
1629: XOR
1630: AND
1631: IFFALSE 1991
1633: GO 1635
1635: DISABLE
1636: LD_INT 0
1638: PPUSH
1639: PPUSH
// begin enable ;
1640: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1641: LD_EXP 33
1645: NOT
1646: PUSH
1647: LD_EXP 33
1651: PUSH
1652: LD_INT 4
1654: GREATER
1655: OR
1656: IFFALSE 1666
// cargoCounter := 1 ;
1658: LD_ADDR_EXP 33
1662: PUSH
1663: LD_INT 1
1665: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1666: LD_ADDR_VAR 0 2
1670: PUSH
1671: LD_INT 142
1673: PUSH
1674: LD_INT 15
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 129
1683: PUSH
1684: LD_INT 11
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 138
1693: PUSH
1694: LD_INT 9
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 133
1703: PUSH
1704: LD_INT 10
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: ST_TO_ADDR
// uc_side := 5 ;
1717: LD_ADDR_OWVAR 20
1721: PUSH
1722: LD_INT 5
1724: ST_TO_ADDR
// uc_nation := 2 ;
1725: LD_ADDR_OWVAR 21
1729: PUSH
1730: LD_INT 2
1732: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1733: LD_INT 5
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: LD_INT 13
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 32
1750: PPUSH
1751: LD_INT 70
1753: PPUSH
1754: CALL 336 0 7
// veh := CreateVehicle ;
1758: LD_ADDR_VAR 0 1
1762: PUSH
1763: CALL_OW 45
1767: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1768: LD_VAR 0 1
1772: PPUSH
1773: LD_INT 3
1775: PPUSH
1776: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
1780: LD_VAR 0 1
1784: PPUSH
1785: LD_INT 8
1787: PPUSH
1788: LD_INT 0
1790: PPUSH
1791: CALL_OW 49
// if not cargoDriver then
1795: LD_EXP 32
1799: NOT
1800: IFFALSE 1825
// begin PrepareHuman ( false , 1 , 3 ) ;
1802: LD_INT 0
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_INT 3
1810: PPUSH
1811: CALL_OW 380
// cargoDriver := CreateHuman ;
1815: LD_ADDR_EXP 32
1819: PUSH
1820: CALL_OW 44
1824: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
1825: LD_EXP 32
1829: PPUSH
1830: LD_VAR 0 1
1834: PPUSH
1835: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
1839: LD_VAR 0 1
1843: PPUSH
1844: LD_INT 2
1846: PPUSH
1847: LD_INT 100
1849: PPUSH
1850: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
1854: LD_VAR 0 1
1858: PPUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 33
1868: ARRAY
1869: PUSH
1870: LD_INT 1
1872: ARRAY
1873: PPUSH
1874: LD_VAR 0 2
1878: PUSH
1879: LD_EXP 33
1883: ARRAY
1884: PUSH
1885: LD_INT 2
1887: ARRAY
1888: PPUSH
1889: CALL_OW 111
// AddComUnload ( veh ) ;
1893: LD_VAR 0 1
1897: PPUSH
1898: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
1902: LD_VAR 0 1
1906: PPUSH
1907: LD_INT 133
1909: PPUSH
1910: LD_INT 2
1912: PPUSH
1913: CALL_OW 171
// wait ( 0 0$5 ) ;
1917: LD_INT 175
1919: PPUSH
1920: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1924: LD_INT 35
1926: PPUSH
1927: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
1931: LD_VAR 0 1
1935: PPUSH
1936: LD_INT 133
1938: PPUSH
1939: LD_INT 2
1941: PPUSH
1942: CALL_OW 307
1946: PUSH
1947: LD_VAR 0 1
1951: PPUSH
1952: LD_INT 8
1954: PPUSH
1955: CALL_OW 308
1959: OR
1960: IFFALSE 1924
// RemoveUnit ( cargoDriver ) ;
1962: LD_EXP 32
1966: PPUSH
1967: CALL_OW 64
// RemoveUnit ( veh ) ;
1971: LD_VAR 0 1
1975: PPUSH
1976: CALL_OW 64
// if tick >= 20 20$00 then
1980: LD_OWVAR 1
1984: PUSH
1985: LD_INT 42000
1987: GREATEREQUAL
1988: IFFALSE 1991
// disable ;
1990: DISABLE
// end ; end_of_file
1991: PPOPN 2
1993: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
1994: LD_INT 0
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
2001: PPUSH
2002: PPUSH
2003: PPUSH
2004: PPUSH
// uc_side := 3 ;
2005: LD_ADDR_OWVAR 20
2009: PUSH
2010: LD_INT 3
2012: ST_TO_ADDR
// uc_nation := 3 ;
2013: LD_ADDR_OWVAR 21
2017: PUSH
2018: LD_INT 3
2020: ST_TO_ADDR
// ruForce := [ ] ;
2021: LD_ADDR_EXP 37
2025: PUSH
2026: EMPTY
2027: ST_TO_ADDR
// ruMech := [ ] ;
2028: LD_ADDR_EXP 39
2032: PUSH
2033: EMPTY
2034: ST_TO_ADDR
// ruEng := [ ] ;
2035: LD_ADDR_EXP 38
2039: PUSH
2040: EMPTY
2041: ST_TO_ADDR
// ruSci := [ ] ;
2042: LD_ADDR_EXP 40
2046: PUSH
2047: EMPTY
2048: ST_TO_ADDR
// ruMobile := [ ] ;
2049: LD_ADDR_EXP 41
2053: PUSH
2054: EMPTY
2055: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2056: LD_ADDR_EXP 34
2060: PUSH
2061: LD_STRING Burlak
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: LD_STRING 
2069: PPUSH
2070: CALL 28908 0 3
2074: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2075: LD_ADDR_EXP 35
2079: PUSH
2080: LD_STRING Gaydar
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: LD_STRING 
2088: PPUSH
2089: CALL 28908 0 3
2093: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2094: LD_ADDR_EXP 36
2098: PUSH
2099: LD_STRING Kuzmov
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: LD_STRING 
2107: PPUSH
2108: CALL 28908 0 3
2112: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2113: LD_EXP 36
2117: PPUSH
2118: LD_INT 200
2120: PPUSH
2121: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2125: LD_INT 200
2127: PPUSH
2128: LD_STRING chuikov
2130: PPUSH
2131: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2135: LD_INT 200
2137: PPUSH
2138: CALL_OW 274
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 800
2148: PUSH
2149: LD_INT 1000
2151: PUSH
2152: LD_INT 1250
2154: PUSH
2155: LD_INT 1300
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: PUSH
2164: LD_OWVAR 67
2168: ARRAY
2169: PPUSH
2170: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2174: LD_INT 200
2176: PPUSH
2177: CALL_OW 274
2181: PPUSH
2182: LD_INT 2
2184: PPUSH
2185: LD_INT 160
2187: PPUSH
2188: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2192: LD_INT 225
2194: PPUSH
2195: CALL_OW 274
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 200
2205: PPUSH
2206: CALL_OW 277
// oil := 150 ;
2210: LD_ADDR_VAR 0 9
2214: PUSH
2215: LD_INT 150
2217: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2218: LD_EXP 5
2222: PUSH
2223: LD_INT 94500
2225: PUSH
2226: LD_INT 84000
2228: PUSH
2229: LD_INT 73500
2231: PUSH
2232: LD_INT 67200
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: PUSH
2241: LD_OWVAR 67
2245: ARRAY
2246: GREATEREQUAL
2247: IFFALSE 2402
// begin oil := 450 ;
2249: LD_ADDR_VAR 0 9
2253: PUSH
2254: LD_INT 450
2256: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2257: LD_ADDR_VAR 0 7
2261: PUSH
2262: LD_INT 123
2264: PUSH
2265: LD_INT 17
2267: PUSH
2268: LD_INT 3
2270: PUSH
2271: LD_INT 31
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 152
2282: PUSH
2283: LD_INT 38
2285: PUSH
2286: LD_INT 3
2288: PUSH
2289: LD_INT 31
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 81
2300: PUSH
2301: LD_INT 6
2303: PUSH
2304: LD_INT 4
2306: PUSH
2307: LD_INT 31
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 113
2318: PUSH
2319: LD_INT 67
2321: PUSH
2322: LD_INT 4
2324: PUSH
2325: LD_INT 32
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: ST_TO_ADDR
// for i in tmp do
2340: LD_ADDR_VAR 0 4
2344: PUSH
2345: LD_VAR 0 7
2349: PUSH
2350: FOR_IN
2351: IFFALSE 2400
// begin bc_type := i [ 4 ] ;
2353: LD_ADDR_OWVAR 42
2357: PUSH
2358: LD_VAR 0 4
2362: PUSH
2363: LD_INT 4
2365: ARRAY
2366: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: LD_VAR 0 4
2380: PUSH
2381: LD_INT 2
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 4
2389: PUSH
2390: LD_INT 3
2392: ARRAY
2393: PPUSH
2394: CALL_OW 47
// end ;
2398: GO 2350
2400: POP
2401: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2402: LD_INT 225
2404: PPUSH
2405: CALL_OW 274
2409: PPUSH
2410: LD_INT 2
2412: PPUSH
2413: LD_VAR 0 9
2417: PPUSH
2418: CALL_OW 277
// if Difficulty > 1 then
2422: LD_OWVAR 67
2426: PUSH
2427: LD_INT 1
2429: GREATER
2430: IFFALSE 2525
// begin bc_type := b_bunker ;
2432: LD_ADDR_OWVAR 42
2436: PUSH
2437: LD_INT 32
2439: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2440: LD_ADDR_VAR 0 7
2444: PUSH
2445: LD_INT 121
2447: PUSH
2448: LD_INT 85
2450: PUSH
2451: LD_INT 5
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 93
2461: PUSH
2462: LD_INT 72
2464: PUSH
2465: LD_INT 1
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: LIST
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: ST_TO_ADDR
// for i in tmp do
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: LD_VAR 0 7
2486: PUSH
2487: FOR_IN
2488: IFFALSE 2523
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2490: LD_VAR 0 4
2494: PUSH
2495: LD_INT 1
2497: ARRAY
2498: PPUSH
2499: LD_VAR 0 4
2503: PUSH
2504: LD_INT 2
2506: ARRAY
2507: PPUSH
2508: LD_VAR 0 4
2512: PUSH
2513: LD_INT 3
2515: ARRAY
2516: PPUSH
2517: CALL_OW 47
2521: GO 2487
2523: POP
2524: POP
// end ; base := GetBase ( ruMainBase ) ;
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: LD_INT 200
2532: PPUSH
2533: CALL_OW 274
2537: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2538: LD_ADDR_VAR 0 3
2542: PUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: CALL_OW 417
2552: ST_TO_ADDR
// for b in blist do
2553: LD_ADDR_VAR 0 5
2557: PUSH
2558: LD_VAR 0 3
2562: PUSH
2563: FOR_IN
2564: IFFALSE 3015
// begin if b [ 1 ] = b_factory then
2566: LD_VAR 0 5
2570: PUSH
2571: LD_INT 1
2573: ARRAY
2574: PUSH
2575: LD_INT 3
2577: EQUAL
2578: IFFALSE 2729
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2580: LD_ADDR_VAR 0 8
2584: PUSH
2585: LD_VAR 0 5
2589: PUSH
2590: LD_INT 2
2592: ARRAY
2593: PPUSH
2594: LD_VAR 0 5
2598: PUSH
2599: LD_INT 3
2601: ARRAY
2602: PPUSH
2603: CALL_OW 428
2607: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2608: LD_ADDR_VAR 0 4
2612: PUSH
2613: DOUBLE
2614: LD_INT 1
2616: DEC
2617: ST_TO_ADDR
2618: LD_INT 2
2620: PUSH
2621: LD_INT 2
2623: PUSH
2624: LD_OWVAR 67
2628: PLUS
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: LD_EXP 10
2638: PUSH
2639: LD_INT 3
2641: GREATER
2642: PUSH
2643: LD_INT 1
2645: PLUS
2646: ARRAY
2647: PUSH
2648: FOR_TO
2649: IFFALSE 2725
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2651: LD_INT 0
2653: PPUSH
2654: LD_INT 3
2656: PPUSH
2657: LD_INT 1
2659: PUSH
2660: LD_OWVAR 67
2664: PLUS
2665: PPUSH
2666: CALL_OW 380
// un := CreateHuman ;
2670: LD_ADDR_VAR 0 6
2674: PUSH
2675: CALL_OW 44
2679: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2680: LD_ADDR_EXP 39
2684: PUSH
2685: LD_EXP 39
2689: PPUSH
2690: LD_EXP 39
2694: PUSH
2695: LD_INT 1
2697: PLUS
2698: PPUSH
2699: LD_VAR 0 6
2703: PPUSH
2704: CALL_OW 1
2708: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2709: LD_VAR 0 6
2713: PPUSH
2714: LD_VAR 0 8
2718: PPUSH
2719: CALL_OW 52
// end ;
2723: GO 2648
2725: POP
2726: POP
// end else
2727: GO 3013
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2729: LD_VAR 0 5
2733: PUSH
2734: LD_INT 1
2736: ARRAY
2737: PUSH
2738: LD_INT 6
2740: PUSH
2741: LD_INT 7
2743: PUSH
2744: LD_INT 8
2746: PUSH
2747: LD_INT 10
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: IN
2756: IFFALSE 2866
// begin for i := 1 to 2 do
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: DOUBLE
2764: LD_INT 1
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 2
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2862
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2774: LD_INT 0
2776: PPUSH
2777: LD_INT 4
2779: PPUSH
2780: LD_OWVAR 67
2784: PPUSH
2785: CALL_OW 380
// un := CreateHuman ;
2789: LD_ADDR_VAR 0 6
2793: PUSH
2794: CALL_OW 44
2798: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
2799: LD_ADDR_EXP 40
2803: PUSH
2804: LD_EXP 40
2808: PPUSH
2809: LD_EXP 40
2813: PUSH
2814: LD_INT 1
2816: PLUS
2817: PPUSH
2818: LD_VAR 0 6
2822: PPUSH
2823: CALL_OW 1
2827: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2828: LD_VAR 0 6
2832: PPUSH
2833: LD_VAR 0 5
2837: PUSH
2838: LD_INT 2
2840: ARRAY
2841: PPUSH
2842: LD_VAR 0 5
2846: PUSH
2847: LD_INT 3
2849: ARRAY
2850: PPUSH
2851: CALL_OW 428
2855: PPUSH
2856: CALL_OW 52
// end ;
2860: GO 2771
2862: POP
2863: POP
// end else
2864: GO 3013
// if b [ 1 ] = b_warehouse then
2866: LD_VAR 0 5
2870: PUSH
2871: LD_INT 1
2873: ARRAY
2874: PUSH
2875: LD_INT 1
2877: EQUAL
2878: IFFALSE 3013
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 1
2892: PUSH
2893: LD_INT 1
2895: PUSH
2896: LD_OWVAR 67
2900: PLUS
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_EXP 10
2910: PUSH
2911: LD_INT 3
2913: GREATER
2914: PUSH
2915: LD_INT 1
2917: PLUS
2918: ARRAY
2919: PUSH
2920: FOR_TO
2921: IFFALSE 3011
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2923: LD_INT 0
2925: PPUSH
2926: LD_INT 2
2928: PPUSH
2929: LD_OWVAR 67
2933: PPUSH
2934: CALL_OW 380
// un := CreateHuman ;
2938: LD_ADDR_VAR 0 6
2942: PUSH
2943: CALL_OW 44
2947: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
2948: LD_ADDR_EXP 38
2952: PUSH
2953: LD_EXP 38
2957: PPUSH
2958: LD_EXP 38
2962: PUSH
2963: LD_INT 1
2965: PLUS
2966: PPUSH
2967: LD_VAR 0 6
2971: PPUSH
2972: CALL_OW 1
2976: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
2977: LD_VAR 0 6
2981: PPUSH
2982: LD_VAR 0 5
2986: PUSH
2987: LD_INT 2
2989: ARRAY
2990: PPUSH
2991: LD_VAR 0 5
2995: PUSH
2996: LD_INT 3
2998: ARRAY
2999: PPUSH
3000: CALL_OW 428
3004: PPUSH
3005: CALL_OW 52
// end ;
3009: GO 2920
3011: POP
3012: POP
// end ; end ;
3013: GO 2563
3015: POP
3016: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: LD_INT 22
3024: PUSH
3025: LD_INT 3
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 21
3034: PUSH
3035: LD_INT 3
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PPUSH
3046: CALL_OW 69
3050: ST_TO_ADDR
// for b in blist do
3051: LD_ADDR_VAR 0 5
3055: PUSH
3056: LD_VAR 0 3
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3084
// SetBLevel ( b , 3 + Difficulty ) ;
3064: LD_VAR 0 5
3068: PPUSH
3069: LD_INT 3
3071: PUSH
3072: LD_OWVAR 67
3076: PLUS
3077: PPUSH
3078: CALL_OW 241
3082: GO 3061
3084: POP
3085: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3086: LD_ADDR_VAR 0 3
3090: PUSH
3091: LD_INT 22
3093: PUSH
3094: LD_INT 3
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 30
3103: PUSH
3104: LD_INT 32
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: PPUSH
3115: CALL_OW 69
3119: ST_TO_ADDR
// for b in blist do
3120: LD_ADDR_VAR 0 5
3124: PUSH
3125: LD_VAR 0 3
3129: PUSH
3130: FOR_IN
3131: IFFALSE 3240
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3133: LD_INT 0
3135: PPUSH
3136: LD_INT 1
3138: PPUSH
3139: LD_INT 1
3141: PUSH
3142: LD_OWVAR 67
3146: PLUS
3147: PPUSH
3148: CALL_OW 380
// un := CreateHuman ;
3152: LD_ADDR_VAR 0 6
3156: PUSH
3157: CALL_OW 44
3161: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3162: LD_ADDR_EXP 37
3166: PUSH
3167: LD_EXP 37
3171: PPUSH
3172: LD_EXP 37
3176: PUSH
3177: LD_INT 1
3179: PLUS
3180: PPUSH
3181: LD_VAR 0 6
3185: PPUSH
3186: CALL_OW 1
3190: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3191: LD_VAR 0 6
3195: PPUSH
3196: LD_VAR 0 5
3200: PPUSH
3201: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3205: LD_VAR 0 5
3209: PPUSH
3210: LD_INT 44
3212: PUSH
3213: LD_INT 43
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PUSH
3220: LD_VAR 0 5
3224: PUSH
3225: LD_INT 2
3227: MOD
3228: PUSH
3229: LD_INT 1
3231: PLUS
3232: ARRAY
3233: PPUSH
3234: CALL_OW 431
// end ;
3238: GO 3130
3240: POP
3241: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3242: LD_ADDR_VAR 0 3
3246: PUSH
3247: LD_INT 22
3249: PUSH
3250: LD_INT 3
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 30
3259: PUSH
3260: LD_INT 31
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PPUSH
3271: CALL_OW 69
3275: ST_TO_ADDR
// for b in blist do
3276: LD_ADDR_VAR 0 5
3280: PUSH
3281: LD_VAR 0 3
3285: PUSH
3286: FOR_IN
3287: IFFALSE 3386
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3289: LD_INT 0
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 1
3297: PUSH
3298: LD_OWVAR 67
3302: PLUS
3303: PPUSH
3304: CALL_OW 380
// un := CreateHuman ;
3308: LD_ADDR_VAR 0 6
3312: PUSH
3313: CALL_OW 44
3317: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3318: LD_ADDR_EXP 37
3322: PUSH
3323: LD_EXP 37
3327: PPUSH
3328: LD_EXP 37
3332: PUSH
3333: LD_INT 1
3335: PLUS
3336: PPUSH
3337: LD_VAR 0 6
3341: PPUSH
3342: CALL_OW 1
3346: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3347: LD_VAR 0 6
3351: PPUSH
3352: LD_VAR 0 5
3356: PPUSH
3357: CALL_OW 254
3361: PUSH
3362: LD_INT 3
3364: PLUS
3365: PPUSH
3366: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3370: LD_VAR 0 6
3374: PPUSH
3375: LD_VAR 0 5
3379: PPUSH
3380: CALL_OW 52
// end ;
3384: GO 3286
3386: POP
3387: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 2
3405: PUSH
3406: LD_INT 30
3408: PUSH
3409: LD_INT 4
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: LD_INT 30
3418: PUSH
3419: LD_INT 5
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PPUSH
3435: CALL_OW 69
3439: ST_TO_ADDR
// for b in blist do
3440: LD_ADDR_VAR 0 5
3444: PUSH
3445: LD_VAR 0 3
3449: PUSH
3450: FOR_IN
3451: IFFALSE 3547
// begin for i := 1 to 2 do
3453: LD_ADDR_VAR 0 4
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 2
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3543
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_OWVAR 67
3482: PLUS
3483: PPUSH
3484: CALL_OW 380
// un := CreateHuman ;
3488: LD_ADDR_VAR 0 6
3492: PUSH
3493: CALL_OW 44
3497: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3498: LD_ADDR_EXP 37
3502: PUSH
3503: LD_EXP 37
3507: PPUSH
3508: LD_EXP 37
3512: PUSH
3513: LD_INT 1
3515: PLUS
3516: PPUSH
3517: LD_VAR 0 6
3521: PPUSH
3522: CALL_OW 1
3526: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3527: LD_VAR 0 6
3531: PPUSH
3532: LD_VAR 0 5
3536: PPUSH
3537: CALL_OW 52
// end ;
3541: GO 3466
3543: POP
3544: POP
// end ;
3545: GO 3450
3547: POP
3548: POP
// if ibrahimOnRuSide then
3549: LD_EXP 3
3553: IFFALSE 3651
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3555: LD_ADDR_EXP 21
3559: PUSH
3560: LD_STRING IbrahimRu
3562: PPUSH
3563: LD_INT 0
3565: PPUSH
3566: LD_STRING 
3568: PPUSH
3569: CALL 28908 0 3
3573: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3574: LD_EXP 21
3578: PPUSH
3579: LD_INT 121
3581: PPUSH
3582: LD_INT 78
3584: PPUSH
3585: LD_INT 0
3587: PPUSH
3588: CALL_OW 48
// ComHold ( Ibrahim ) ;
3592: LD_EXP 21
3596: PPUSH
3597: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_INT 2
3609: PPUSH
3610: CALL_OW 380
// ruSol := CreateHuman ;
3614: LD_ADDR_EXP 42
3618: PUSH
3619: CALL_OW 44
3623: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3624: LD_EXP 42
3628: PPUSH
3629: LD_INT 121
3631: PPUSH
3632: LD_INT 75
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: CALL_OW 48
// ComHold ( ruSol ) ;
3642: LD_EXP 42
3646: PPUSH
3647: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3651: LD_ADDR_VAR 0 4
3655: PUSH
3656: DOUBLE
3657: LD_INT 1
3659: DEC
3660: ST_TO_ADDR
3661: LD_INT 2
3663: PUSH
3664: LD_INT 2
3666: PUSH
3667: LD_OWVAR 67
3671: PLUS
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_EXP 10
3681: PUSH
3682: LD_INT 3
3684: GREATER
3685: PUSH
3686: LD_INT 1
3688: PLUS
3689: ARRAY
3690: PUSH
3691: FOR_TO
3692: IFFALSE 3761
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3694: LD_VAR 0 8
3698: PPUSH
3699: LD_INT 21
3701: PUSH
3702: LD_INT 23
3704: PUSH
3705: LD_INT 24
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PUSH
3713: LD_VAR 0 4
3717: PUSH
3718: LD_INT 3
3720: MOD
3721: PUSH
3722: LD_INT 1
3724: PLUS
3725: ARRAY
3726: PPUSH
3727: LD_INT 1
3729: PPUSH
3730: LD_INT 1
3732: PPUSH
3733: LD_INT 43
3735: PUSH
3736: LD_INT 44
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 1
3745: PPUSH
3746: LD_INT 2
3748: PPUSH
3749: CALL_OW 12
3753: ARRAY
3754: PPUSH
3755: CALL_OW 185
3759: GO 3691
3761: POP
3762: POP
// end ;
3763: LD_VAR 0 1
3767: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3768: LD_EXP 41
3772: PUSH
3773: LD_EXP 4
3777: NOT
3778: AND
3779: IFFALSE 4266
3781: GO 3783
3783: DISABLE
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
// begin enable ;
3791: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
3792: LD_ADDR_VAR 0 2
3796: PUSH
3797: LD_EXP 41
3801: PPUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PPUSH
3812: CALL_OW 72
3816: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
3817: LD_ADDR_VAR 0 4
3821: PUSH
3822: LD_INT 81
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: LD_INT 2
3834: PUSH
3835: LD_INT 95
3837: PUSH
3838: LD_INT 4
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 95
3847: PUSH
3848: LD_INT 5
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 95
3857: PUSH
3858: LD_INT 6
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: PUSH
3865: LD_INT 95
3867: PUSH
3868: LD_INT 7
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PPUSH
3886: CALL_OW 69
3890: ST_TO_ADDR
// for i in filter do
3891: LD_ADDR_VAR 0 1
3895: PUSH
3896: LD_VAR 0 2
3900: PUSH
3901: FOR_IN
3902: IFFALSE 4264
// begin tmp := IsDrivenBy ( i ) ;
3904: LD_ADDR_VAR 0 3
3908: PUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 311
3918: ST_TO_ADDR
// if not tmp then
3919: LD_VAR 0 3
3923: NOT
3924: IFFALSE 3928
// continue ;
3926: GO 3901
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
3928: LD_VAR 0 1
3932: PPUSH
3933: CALL_OW 261
3937: PUSH
3938: LD_INT 90
3940: GREATER
3941: PUSH
3942: LD_VAR 0 1
3946: PPUSH
3947: CALL_OW 110
3951: PUSH
3952: LD_INT 2
3954: EQUAL
3955: AND
3956: IFFALSE 3972
// SetTag ( i , 0 ) else
3958: LD_VAR 0 1
3962: PPUSH
3963: LD_INT 0
3965: PPUSH
3966: CALL_OW 109
3970: GO 4015
// if GetTag ( i ) = 2 then
3972: LD_VAR 0 1
3976: PPUSH
3977: CALL_OW 110
3981: PUSH
3982: LD_INT 2
3984: EQUAL
3985: IFFALSE 4015
// begin x := rand ( 1 , 2 ) ;
3987: LD_ADDR_VAR 0 5
3991: PUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 2
3997: PPUSH
3998: CALL_OW 12
4002: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4003: LD_VAR 0 1
4007: PPUSH
4008: LD_INT 200
4010: PPUSH
4011: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4015: LD_VAR 0 1
4019: PPUSH
4020: CALL_OW 256
4024: PUSH
4025: LD_INT 600
4027: GREATEREQUAL
4028: PUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: CALL_OW 110
4038: NOT
4039: AND
4040: IFFALSE 4066
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4042: LD_VAR 0 1
4046: PPUSH
4047: LD_VAR 0 4
4051: PPUSH
4052: LD_VAR 0 1
4056: PPUSH
4057: CALL_OW 74
4061: PPUSH
4062: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4066: LD_VAR 0 1
4070: PPUSH
4071: CALL_OW 256
4075: PUSH
4076: LD_INT 600
4078: LESS
4079: PUSH
4080: LD_VAR 0 1
4084: PPUSH
4085: CALL_OW 110
4089: NOT
4090: AND
4091: IFFALSE 4120
// begin SetTag ( i , 1 ) ;
4093: LD_VAR 0 1
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4105: LD_VAR 0 1
4109: PPUSH
4110: LD_INT 112
4112: PPUSH
4113: LD_INT 119
4115: PPUSH
4116: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4120: LD_VAR 0 1
4124: PPUSH
4125: CALL_OW 110
4129: PUSH
4130: LD_INT 1
4132: EQUAL
4133: PUSH
4134: LD_VAR 0 1
4138: PPUSH
4139: LD_INT 112
4141: PPUSH
4142: LD_INT 119
4144: PPUSH
4145: CALL_OW 297
4149: PUSH
4150: LD_INT 9
4152: LESS
4153: AND
4154: PUSH
4155: LD_VAR 0 3
4159: AND
4160: IFFALSE 4262
// begin ComExitVehicle ( tmp ) ;
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4171: LD_VAR 0 3
4175: PPUSH
4176: LD_VAR 0 1
4180: PPUSH
4181: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4185: LD_INT 35
4187: PPUSH
4188: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4192: LD_VAR 0 1
4196: PPUSH
4197: CALL_OW 256
4201: PUSH
4202: LD_INT 1000
4204: EQUAL
4205: IFFALSE 4185
// ComEnterUnit ( tmp , i ) ;
4207: LD_VAR 0 3
4211: PPUSH
4212: LD_VAR 0 1
4216: PPUSH
4217: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4221: LD_VAR 0 1
4225: PPUSH
4226: CALL_OW 261
4230: PUSH
4231: LD_INT 50
4233: LESSEQUAL
4234: IFFALSE 4250
// SetTag ( i , 2 ) else
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 2
4243: PPUSH
4244: CALL_OW 109
4248: GO 4262
// SetTag ( i , 0 ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_INT 0
4257: PPUSH
4258: CALL_OW 109
// end ; end ;
4262: GO 3901
4264: POP
4265: POP
// end ;
4266: PPOPN 5
4268: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4269: LD_EXP 4
4273: NOT
4274: PUSH
4275: LD_EXP 38
4279: AND
4280: IFFALSE 4541
4282: GO 4284
4284: DISABLE
4285: LD_INT 0
4287: PPUSH
4288: PPUSH
4289: PPUSH
4290: PPUSH
// begin enable ;
4291: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4292: LD_ADDR_VAR 0 2
4296: PUSH
4297: LD_INT 3
4299: PPUSH
4300: LD_INT 22
4302: PUSH
4303: LD_INT 3
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: LD_INT 21
4312: PUSH
4313: LD_INT 3
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: PUSH
4320: LD_INT 3
4322: PUSH
4323: LD_INT 24
4325: PUSH
4326: LD_INT 1000
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: PPUSH
4342: CALL_OW 70
4346: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4347: LD_ADDR_VAR 0 3
4351: PUSH
4352: LD_EXP 38
4356: PPUSH
4357: LD_INT 50
4359: PUSH
4360: EMPTY
4361: LIST
4362: PPUSH
4363: CALL_OW 72
4367: ST_TO_ADDR
// if filter and tmp then
4368: LD_VAR 0 2
4372: PUSH
4373: LD_VAR 0 3
4377: AND
4378: IFFALSE 4470
// begin for i in tmp do
4380: LD_ADDR_VAR 0 1
4384: PUSH
4385: LD_VAR 0 3
4389: PUSH
4390: FOR_IN
4391: IFFALSE 4466
// begin if GetTag ( i ) = tEscape then
4393: LD_VAR 0 1
4397: PPUSH
4398: CALL_OW 110
4402: PUSH
4403: LD_EXP 17
4407: EQUAL
4408: IFFALSE 4412
// continue ;
4410: GO 4390
// if IsInUnit ( i ) then
4412: LD_VAR 0 1
4416: PPUSH
4417: CALL_OW 310
4421: IFFALSE 4434
// ComExitBuilding ( i ) else
4423: LD_VAR 0 1
4427: PPUSH
4428: CALL_OW 122
4432: GO 4464
// if not HasTask ( i ) then
4434: LD_VAR 0 1
4438: PPUSH
4439: CALL_OW 314
4443: NOT
4444: IFFALSE 4464
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 2
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: CALL_OW 130
// end ;
4464: GO 4390
4466: POP
4467: POP
// end else
4468: GO 4541
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4470: LD_VAR 0 3
4474: PPUSH
4475: LD_INT 3
4477: PUSH
4478: LD_INT 54
4480: PUSH
4481: EMPTY
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 72
4492: IFFALSE 4541
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4494: LD_ADDR_VAR 0 1
4498: PUSH
4499: LD_VAR 0 3
4503: PPUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 54
4509: PUSH
4510: EMPTY
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 72
4521: PUSH
4522: FOR_IN
4523: IFFALSE 4539
// ComEnterUnit ( i , ruMainBase ) ;
4525: LD_VAR 0 1
4529: PPUSH
4530: LD_INT 200
4532: PPUSH
4533: CALL_OW 120
4537: GO 4522
4539: POP
4540: POP
// end ; end ;
4541: PPOPN 4
4543: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4544: LD_EXP 4
4548: NOT
4549: PUSH
4550: LD_EXP 40
4554: AND
4555: IFFALSE 4834
4557: GO 4559
4559: DISABLE
4560: LD_INT 0
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
// begin enable ;
4566: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4567: LD_ADDR_VAR 0 2
4571: PUSH
4572: LD_INT 3
4574: PPUSH
4575: LD_INT 22
4577: PUSH
4578: LD_INT 3
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 21
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 3
4597: PUSH
4598: LD_INT 24
4600: PUSH
4601: LD_INT 1000
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL_OW 70
4621: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4622: LD_ADDR_VAR 0 3
4626: PUSH
4627: LD_EXP 40
4631: PPUSH
4632: LD_INT 50
4634: PUSH
4635: EMPTY
4636: LIST
4637: PPUSH
4638: CALL_OW 72
4642: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4643: LD_ADDR_VAR 0 4
4647: PUSH
4648: LD_INT 118
4650: PPUSH
4651: LD_INT 121
4653: PPUSH
4654: CALL_OW 428
4658: ST_TO_ADDR
// if filter and tmp then
4659: LD_VAR 0 2
4663: PUSH
4664: LD_VAR 0 3
4668: AND
4669: IFFALSE 4761
// begin for i in tmp do
4671: LD_ADDR_VAR 0 1
4675: PUSH
4676: LD_VAR 0 3
4680: PUSH
4681: FOR_IN
4682: IFFALSE 4757
// begin if GetTag ( i ) = tEscape then
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 110
4693: PUSH
4694: LD_EXP 17
4698: EQUAL
4699: IFFALSE 4703
// continue ;
4701: GO 4681
// if IsInUnit ( i ) then
4703: LD_VAR 0 1
4707: PPUSH
4708: CALL_OW 310
4712: IFFALSE 4725
// ComExitBuilding ( i ) else
4714: LD_VAR 0 1
4718: PPUSH
4719: CALL_OW 122
4723: GO 4755
// if not HasTask ( i ) then
4725: LD_VAR 0 1
4729: PPUSH
4730: CALL_OW 314
4734: NOT
4735: IFFALSE 4755
// ComHeal ( i , filter [ 1 ] ) ;
4737: LD_VAR 0 1
4741: PPUSH
4742: LD_VAR 0 2
4746: PUSH
4747: LD_INT 1
4749: ARRAY
4750: PPUSH
4751: CALL_OW 128
// end ;
4755: GO 4681
4757: POP
4758: POP
// end else
4759: GO 4834
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4761: LD_VAR 0 3
4765: PPUSH
4766: LD_INT 3
4768: PUSH
4769: LD_INT 54
4771: PUSH
4772: EMPTY
4773: LIST
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 72
4783: IFFALSE 4834
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4785: LD_ADDR_VAR 0 1
4789: PUSH
4790: LD_VAR 0 3
4794: PPUSH
4795: LD_INT 3
4797: PUSH
4798: LD_INT 54
4800: PUSH
4801: EMPTY
4802: LIST
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PPUSH
4808: CALL_OW 72
4812: PUSH
4813: FOR_IN
4814: IFFALSE 4832
// ComEnterUnit ( i , lab ) ;
4816: LD_VAR 0 1
4820: PPUSH
4821: LD_VAR 0 4
4825: PPUSH
4826: CALL_OW 120
4830: GO 4813
4832: POP
4833: POP
// end ; end ; end_of_file
4834: PPOPN 4
4836: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4837: LD_VAR 0 1
4841: PPUSH
4842: CALL 24268 0 1
// if un = Heike then
4846: LD_VAR 0 1
4850: PUSH
4851: LD_EXP 18
4855: EQUAL
4856: IFFALSE 4865
// YouLost ( Heike ) ;
4858: LD_STRING Heike
4860: PPUSH
4861: CALL_OW 104
// if un in ruEng then
4865: LD_VAR 0 1
4869: PUSH
4870: LD_EXP 38
4874: IN
4875: IFFALSE 4893
// ruEng := ruEng diff un ;
4877: LD_ADDR_EXP 38
4881: PUSH
4882: LD_EXP 38
4886: PUSH
4887: LD_VAR 0 1
4891: DIFF
4892: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
4893: LD_VAR 0 1
4897: PUSH
4898: LD_INT 22
4900: PUSH
4901: LD_INT 2
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 21
4910: PUSH
4911: LD_INT 1
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 23
4920: PUSH
4921: LD_INT 2
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: PPUSH
4933: CALL_OW 69
4937: IN
4938: IFFALSE 4954
// loseCounter := loseCounter + 1 ;
4940: LD_ADDR_EXP 6
4944: PUSH
4945: LD_EXP 6
4949: PUSH
4950: LD_INT 1
4952: PLUS
4953: ST_TO_ADDR
// end ;
4954: PPOPN 1
4956: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
4957: LD_INT 0
4959: PPUSH
4960: PPUSH
// begin if un in ruMobile then
4961: LD_VAR 0 2
4965: PUSH
4966: LD_EXP 41
4970: IN
4971: IFFALSE 5130
// begin ruMobile := ruMobile diff un ;
4973: LD_ADDR_EXP 41
4977: PUSH
4978: LD_EXP 41
4982: PUSH
4983: LD_VAR 0 2
4987: DIFF
4988: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
4989: LD_ADDR_VAR 0 5
4993: PUSH
4994: LD_VAR 0 2
4998: PPUSH
4999: CALL_OW 264
5003: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5004: LD_ADDR_VAR 0 6
5008: PUSH
5009: LD_INT 110
5011: PPUSH
5012: LD_INT 126
5014: PPUSH
5015: CALL_OW 428
5019: ST_TO_ADDR
// if not driver or not fac then
5020: LD_VAR 0 1
5024: NOT
5025: PUSH
5026: LD_VAR 0 6
5030: NOT
5031: OR
5032: IFFALSE 5036
// exit ;
5034: GO 5130
// AddComMoveXY ( driver , 111 , 121 ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: LD_INT 111
5043: PPUSH
5044: LD_INT 121
5046: PPUSH
5047: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5051: LD_VAR 0 1
5055: PPUSH
5056: LD_VAR 0 6
5060: PPUSH
5061: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5065: LD_INT 35
5067: PPUSH
5068: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5072: LD_VAR 0 1
5076: PPUSH
5077: CALL_OW 301
5081: PUSH
5082: LD_VAR 0 1
5086: PPUSH
5087: CALL_OW 310
5091: OR
5092: IFFALSE 5065
// if IsDead ( driver ) then
5094: LD_VAR 0 1
5098: PPUSH
5099: CALL_OW 301
5103: IFFALSE 5107
// exit ;
5105: GO 5130
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5107: LD_VAR 0 6
5111: PPUSH
5112: LD_INT 21
5114: PPUSH
5115: LD_INT 1
5117: PPUSH
5118: LD_INT 1
5120: PPUSH
5121: LD_VAR 0 5
5125: PPUSH
5126: CALL_OW 185
// end ; end ;
5130: PPOPN 6
5132: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5133: LD_VAR 0 1
5137: PPUSH
5138: LD_VAR 0 2
5142: PPUSH
5143: CALL 24390 0 2
// if GetSide ( fac ) = 3 then
5147: LD_VAR 0 2
5151: PPUSH
5152: CALL_OW 255
5156: PUSH
5157: LD_INT 3
5159: EQUAL
5160: IFFALSE 5206
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5162: LD_ADDR_EXP 41
5166: PUSH
5167: LD_EXP 41
5171: PPUSH
5172: LD_EXP 41
5176: PUSH
5177: LD_INT 1
5179: PLUS
5180: PPUSH
5181: LD_VAR 0 1
5185: PPUSH
5186: CALL_OW 1
5190: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5191: LD_VAR 0 1
5195: PPUSH
5196: LD_INT 110
5198: PPUSH
5199: LD_INT 117
5201: PPUSH
5202: CALL_OW 171
// end ; end ;
5206: PPOPN 2
5208: END
// on LeaveBuilding ( b , un ) do var barracks ;
5209: LD_INT 0
5211: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5212: LD_VAR 0 1
5216: PUSH
5217: LD_INT 130
5219: PPUSH
5220: LD_INT 17
5222: PPUSH
5223: CALL_OW 428
5227: PUSH
5228: LD_INT 138
5230: PPUSH
5231: LD_INT 22
5233: PPUSH
5234: CALL_OW 428
5238: PUSH
5239: LD_INT 123
5241: PPUSH
5242: LD_INT 17
5244: PPUSH
5245: CALL_OW 428
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: LIST
5254: IN
5255: IFFALSE 5279
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5257: LD_VAR 0 2
5261: PPUSH
5262: LD_INT 135
5264: PPUSH
5265: LD_INT 31
5267: PPUSH
5268: CALL_OW 428
5272: PPUSH
5273: CALL_OW 180
// exit ;
5277: GO 5553
// end ; if b = HexInfo ( 135 , 31 ) then
5279: LD_VAR 0 1
5283: PUSH
5284: LD_INT 135
5286: PPUSH
5287: LD_INT 31
5289: PPUSH
5290: CALL_OW 428
5294: EQUAL
5295: IFFALSE 5367
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5297: LD_VAR 0 2
5301: PPUSH
5302: LD_INT 106
5304: PPUSH
5305: LD_INT 51
5307: PPUSH
5308: CALL_OW 428
5312: PPUSH
5313: CALL_OW 180
// if not explodeFirstDepot then
5317: LD_EXP 12
5321: NOT
5322: IFFALSE 5365
// begin explodeFirstDepot := true ;
5324: LD_ADDR_EXP 12
5328: PUSH
5329: LD_INT 1
5331: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5332: LD_INT 525
5334: PPUSH
5335: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5339: LD_INT 127
5341: PPUSH
5342: LD_INT 27
5344: PPUSH
5345: LD_INT 1
5347: PPUSH
5348: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5352: LD_INT 125
5354: PPUSH
5355: LD_INT 29
5357: PPUSH
5358: LD_INT 1
5360: PPUSH
5361: CALL_OW 453
// end ; exit ;
5365: GO 5553
// end ; if b = HexInfo ( 106 , 51 ) then
5367: LD_VAR 0 1
5371: PUSH
5372: LD_INT 106
5374: PPUSH
5375: LD_INT 51
5377: PPUSH
5378: CALL_OW 428
5382: EQUAL
5383: IFFALSE 5483
// begin AddComMoveXY ( un , 106 , 93 ) ;
5385: LD_VAR 0 2
5389: PPUSH
5390: LD_INT 106
5392: PPUSH
5393: LD_INT 93
5395: PPUSH
5396: CALL_OW 171
// if not explodeSecondDepot then
5400: LD_EXP 13
5404: NOT
5405: IFFALSE 5481
// begin explodeSecondDepot := true ;
5407: LD_ADDR_EXP 13
5411: PUSH
5412: LD_INT 1
5414: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5415: LD_INT 420
5417: PPUSH
5418: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5422: LD_INT 111
5424: PPUSH
5425: LD_INT 75
5427: PPUSH
5428: LD_INT 1
5430: PPUSH
5431: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5435: LD_INT 111
5437: PPUSH
5438: LD_INT 75
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5448: LD_INT 108
5450: PPUSH
5451: LD_INT 69
5453: PPUSH
5454: LD_INT 1
5456: PPUSH
5457: CALL_OW 453
// wait ( 0 0$2 ) ;
5461: LD_INT 70
5463: PPUSH
5464: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5468: LD_INT 94
5470: PPUSH
5471: LD_INT 65
5473: PPUSH
5474: LD_INT 1
5476: PPUSH
5477: CALL_OW 453
// end ; exit ;
5481: GO 5553
// end ; if GetBType ( b ) = b_bunker then
5483: LD_VAR 0 1
5487: PPUSH
5488: CALL_OW 266
5492: PUSH
5493: LD_INT 32
5495: EQUAL
5496: IFFALSE 5553
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5498: LD_ADDR_VAR 0 3
5502: PUSH
5503: LD_VAR 0 2
5507: PPUSH
5508: LD_INT 5
5510: PPUSH
5511: CALL 1008 0 2
5515: ST_TO_ADDR
// if barracks then
5516: LD_VAR 0 3
5520: IFFALSE 5538
// AddComEnterUnit ( un , barracks ) else
5522: LD_VAR 0 2
5526: PPUSH
5527: LD_VAR 0 3
5531: PPUSH
5532: CALL_OW 180
5536: GO 5553
// AddComMoveXY ( un , 116 , 110 ) ;
5538: LD_VAR 0 2
5542: PPUSH
5543: LD_INT 116
5545: PPUSH
5546: LD_INT 110
5548: PPUSH
5549: CALL_OW 171
// end ; end ;
5553: PPOPN 3
5555: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5556: LD_VAR 0 1
5560: PUSH
5561: LD_EXP 23
5565: EQUAL
5566: PUSH
5567: LD_VAR 0 2
5571: PUSH
5572: LD_INT 3
5574: PUSH
5575: LD_INT 6
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: IN
5582: AND
5583: IFFALSE 5614
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5585: LD_ADDR_EXP 8
5589: PUSH
5590: LD_VAR 0 1
5594: PPUSH
5595: CALL_OW 250
5599: PUSH
5600: LD_VAR 0 1
5604: PPUSH
5605: CALL_OW 251
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: ST_TO_ADDR
// end ; end_of_file
5614: PPOPN 3
5616: END
// export function Action ; var i , un , veh , tmp , rutmp ; begin
5617: LD_INT 0
5619: PPUSH
5620: PPUSH
5621: PPUSH
5622: PPUSH
5623: PPUSH
5624: PPUSH
// InGameOn ;
5625: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5629: LD_INT 5
5631: PPUSH
5632: LD_INT 2
5634: PPUSH
5635: CALL_OW 343
// music_nat := 4 ;
5639: LD_ADDR_OWVAR 71
5643: PUSH
5644: LD_INT 4
5646: ST_TO_ADDR
// music_class := music_combat ;
5647: LD_ADDR_OWVAR 72
5651: PUSH
5652: LD_INT 1
5654: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5655: LD_INT 133
5657: PPUSH
5658: LD_INT 2
5660: PPUSH
5661: LD_INT 2
5663: PPUSH
5664: LD_INT 10
5666: PPUSH
5667: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5671: LD_INT 133
5673: PPUSH
5674: LD_INT 2
5676: PPUSH
5677: CALL_OW 86
// wait ( 0 0$1 ) ;
5681: LD_INT 35
5683: PPUSH
5684: CALL_OW 67
// uc_side := 6 ;
5688: LD_ADDR_OWVAR 20
5692: PUSH
5693: LD_INT 6
5695: ST_TO_ADDR
// uc_nation := 3 ;
5696: LD_ADDR_OWVAR 21
5700: PUSH
5701: LD_INT 3
5703: ST_TO_ADDR
// rutmp := [ ] ;
5704: LD_ADDR_VAR 0 6
5708: PUSH
5709: EMPTY
5710: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5711: LD_INT 6
5713: PPUSH
5714: LD_INT 3
5716: PPUSH
5717: LD_INT 21
5719: PPUSH
5720: LD_INT 1
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: LD_INT 44
5728: PPUSH
5729: LD_INT 66
5731: PPUSH
5732: CALL 336 0 7
// veh := CreateVehicle ;
5736: LD_ADDR_VAR 0 4
5740: PUSH
5741: CALL_OW 45
5745: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5746: LD_VAR 0 4
5750: PPUSH
5751: LD_INT 3
5753: PPUSH
5754: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5758: LD_VAR 0 4
5762: PPUSH
5763: LD_INT 8
5765: PPUSH
5766: LD_INT 0
5768: PPUSH
5769: CALL_OW 49
// SetLives ( veh , 500 ) ;
5773: LD_VAR 0 4
5777: PPUSH
5778: LD_INT 500
5780: PPUSH
5781: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
5785: LD_INT 0
5787: PPUSH
5788: LD_INT 3
5790: PPUSH
5791: LD_INT 3
5793: PPUSH
5794: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
5798: CALL_OW 44
5802: PPUSH
5803: LD_VAR 0 4
5807: PPUSH
5808: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
5812: LD_VAR 0 4
5816: PPUSH
5817: LD_INT 133
5819: PPUSH
5820: LD_INT 11
5822: PPUSH
5823: CALL_OW 111
// rutmp := [ veh ] ;
5827: LD_ADDR_VAR 0 6
5831: PUSH
5832: LD_VAR 0 4
5836: PUSH
5837: EMPTY
5838: LIST
5839: ST_TO_ADDR
// for i := 1 to 4 do
5840: LD_ADDR_VAR 0 2
5844: PUSH
5845: DOUBLE
5846: LD_INT 1
5848: DEC
5849: ST_TO_ADDR
5850: LD_INT 4
5852: PUSH
5853: FOR_TO
5854: IFFALSE 5961
// begin PrepareHuman ( false , i , 2 ) ;
5856: LD_INT 0
5858: PPUSH
5859: LD_VAR 0 2
5863: PPUSH
5864: LD_INT 2
5866: PPUSH
5867: CALL_OW 380
// un := CreateHuman ;
5871: LD_ADDR_VAR 0 3
5875: PUSH
5876: CALL_OW 44
5880: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5881: LD_VAR 0 3
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
5893: LD_VAR 0 3
5897: PPUSH
5898: LD_INT 8
5900: PPUSH
5901: LD_INT 0
5903: PPUSH
5904: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
5908: LD_ADDR_VAR 0 6
5912: PUSH
5913: LD_VAR 0 6
5917: PPUSH
5918: LD_VAR 0 6
5922: PUSH
5923: LD_INT 1
5925: PLUS
5926: PPUSH
5927: LD_VAR 0 3
5931: PPUSH
5932: CALL_OW 1
5936: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
5937: LD_VAR 0 3
5941: PPUSH
5942: LD_INT 133
5944: PPUSH
5945: LD_INT 11
5947: PPUSH
5948: CALL_OW 111
// wait ( 0 0$0.5 ) ;
5952: LD_INT 18
5954: PPUSH
5955: CALL_OW 67
// end ;
5959: GO 5853
5961: POP
5962: POP
// for i in rutmp do
5963: LD_ADDR_VAR 0 2
5967: PUSH
5968: LD_VAR 0 6
5972: PUSH
5973: FOR_IN
5974: IFFALSE 6023
// begin AddComMoveXY ( i , 99 , 65 ) ;
5976: LD_VAR 0 2
5980: PPUSH
5981: LD_INT 99
5983: PPUSH
5984: LD_INT 65
5986: PPUSH
5987: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
5991: LD_VAR 0 2
5995: PPUSH
5996: LD_INT 76
5998: PPUSH
5999: LD_INT 108
6001: PPUSH
6002: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_INT 92
6013: PPUSH
6014: LD_INT 176
6016: PPUSH
6017: CALL_OW 171
// end ;
6021: GO 5973
6023: POP
6024: POP
// wait ( 0 0$10 ) ;
6025: LD_INT 350
6027: PPUSH
6028: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6032: LD_ADDR_VAR 0 5
6036: PUSH
6037: LD_EXP 18
6041: PUSH
6042: LD_EXP 19
6046: PUSH
6047: LD_EXP 20
6051: PUSH
6052: LD_EXP 21
6056: PUSH
6057: LD_EXP 22
6061: PUSH
6062: LD_EXP 23
6066: PUSH
6067: LD_EXP 24
6071: PUSH
6072: LD_EXP 25
6076: PUSH
6077: LD_EXP 27
6081: PUSH
6082: LD_EXP 28
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: LD_EXP 29
6103: UNION
6104: ST_TO_ADDR
// tmp := tmp diff 0 ;
6105: LD_ADDR_VAR 0 5
6109: PUSH
6110: LD_VAR 0 5
6114: PUSH
6115: LD_INT 0
6117: DIFF
6118: ST_TO_ADDR
// for i in heikeVehicles do
6119: LD_ADDR_VAR 0 2
6123: PUSH
6124: LD_EXP 30
6128: PUSH
6129: FOR_IN
6130: IFFALSE 6396
// begin if not tmp then
6132: LD_VAR 0 5
6136: NOT
6137: IFFALSE 6141
// continue ;
6139: GO 6129
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6141: LD_INT 2
6143: PPUSH
6144: LD_VAR 0 2
6148: PUSH
6149: LD_INT 5
6151: ARRAY
6152: PPUSH
6153: LD_VAR 0 2
6157: PUSH
6158: LD_INT 1
6160: ARRAY
6161: PPUSH
6162: LD_VAR 0 2
6166: PUSH
6167: LD_INT 2
6169: ARRAY
6170: PPUSH
6171: LD_VAR 0 2
6175: PUSH
6176: LD_INT 3
6178: ARRAY
6179: PPUSH
6180: LD_VAR 0 2
6184: PUSH
6185: LD_INT 4
6187: ARRAY
6188: PPUSH
6189: LD_INT 34
6191: PPUSH
6192: CALL 336 0 7
// veh := CreateVehicle ;
6196: LD_ADDR_VAR 0 4
6200: PUSH
6201: CALL_OW 45
6205: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6206: LD_VAR 0 2
6210: PUSH
6211: LD_INT 4
6213: ARRAY
6214: PUSH
6215: LD_INT 51
6217: PUSH
6218: LD_INT 32
6220: PUSH
6221: LD_INT 12
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: LIST
6228: IN
6229: IFFALSE 6309
// begin if i [ 7 ] [ 1 ] then
6231: LD_VAR 0 2
6235: PUSH
6236: LD_INT 7
6238: ARRAY
6239: PUSH
6240: LD_INT 1
6242: ARRAY
6243: IFFALSE 6270
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6245: LD_VAR 0 4
6249: PPUSH
6250: LD_INT 1
6252: PPUSH
6253: LD_VAR 0 2
6257: PUSH
6258: LD_INT 7
6260: ARRAY
6261: PUSH
6262: LD_INT 1
6264: ARRAY
6265: PPUSH
6266: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6270: LD_VAR 0 2
6274: PUSH
6275: LD_INT 7
6277: ARRAY
6278: PUSH
6279: LD_INT 2
6281: ARRAY
6282: IFFALSE 6309
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6284: LD_VAR 0 4
6288: PPUSH
6289: LD_INT 2
6291: PPUSH
6292: LD_VAR 0 2
6296: PUSH
6297: LD_INT 7
6299: ARRAY
6300: PUSH
6301: LD_INT 2
6303: ARRAY
6304: PPUSH
6305: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6309: LD_VAR 0 4
6313: PPUSH
6314: LD_INT 3
6316: PPUSH
6317: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6321: LD_VAR 0 4
6325: PPUSH
6326: LD_INT 8
6328: PPUSH
6329: LD_INT 0
6331: PPUSH
6332: CALL_OW 49
// PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6336: LD_VAR 0 5
6340: PUSH
6341: LD_INT 1
6343: ARRAY
6344: PPUSH
6345: LD_VAR 0 4
6349: PPUSH
6350: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6354: LD_ADDR_VAR 0 5
6358: PUSH
6359: LD_VAR 0 5
6363: PPUSH
6364: LD_INT 1
6366: PPUSH
6367: CALL_OW 3
6371: ST_TO_ADDR
// ComAgressiveMove ( veh , 133 , 7 ) ;
6372: LD_VAR 0 4
6376: PPUSH
6377: LD_INT 133
6379: PPUSH
6380: LD_INT 7
6382: PPUSH
6383: CALL_OW 114
// wait ( 0 0$1 ) ;
6387: LD_INT 35
6389: PPUSH
6390: CALL_OW 67
// end ;
6394: GO 6129
6396: POP
6397: POP
// if tmp then
6398: LD_VAR 0 5
6402: IFFALSE 6458
// for i in tmp do
6404: LD_ADDR_VAR 0 2
6408: PUSH
6409: LD_VAR 0 5
6413: PUSH
6414: FOR_IN
6415: IFFALSE 6456
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6417: LD_VAR 0 2
6421: PPUSH
6422: LD_INT 10
6424: PPUSH
6425: LD_INT 0
6427: PPUSH
6428: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6432: LD_VAR 0 2
6436: PPUSH
6437: LD_INT 146
6439: PPUSH
6440: LD_INT 7
6442: PPUSH
6443: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6447: LD_INT 18
6449: PPUSH
6450: CALL_OW 67
// end ;
6454: GO 6414
6456: POP
6457: POP
// if heikeApes then
6458: LD_EXP 31
6462: IFFALSE 6518
// for i in heikeApes do
6464: LD_ADDR_VAR 0 2
6468: PUSH
6469: LD_EXP 31
6473: PUSH
6474: FOR_IN
6475: IFFALSE 6516
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6477: LD_VAR 0 2
6481: PPUSH
6482: LD_INT 10
6484: PPUSH
6485: LD_INT 0
6487: PPUSH
6488: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6492: LD_VAR 0 2
6496: PPUSH
6497: LD_INT 146
6499: PPUSH
6500: LD_INT 7
6502: PPUSH
6503: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6507: LD_INT 18
6509: PPUSH
6510: CALL_OW 67
// end ;
6514: GO 6474
6516: POP
6517: POP
// DialogueOn ;
6518: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6522: LD_EXP 18
6526: PPUSH
6527: LD_STRING DH-outpost-a-1
6529: PPUSH
6530: CALL_OW 88
// DialogueOff ;
6534: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6538: LD_INT 133
6540: PPUSH
6541: LD_INT 2
6543: PPUSH
6544: LD_INT 2
6546: PPUSH
6547: CALL_OW 331
// InGameOff ;
6551: CALL_OW 9
// music_nat := 0 ;
6555: LD_ADDR_OWVAR 71
6559: PUSH
6560: LD_INT 0
6562: ST_TO_ADDR
// music_class := 0 ;
6563: LD_ADDR_OWVAR 72
6567: PUSH
6568: LD_INT 0
6570: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6571: LD_STRING Outposts
6573: PPUSH
6574: CALL_OW 337
// SaveForQuickRestart ;
6578: CALL_OW 22
// end ;
6582: LD_VAR 0 1
6586: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6587: LD_INT 22
6589: PUSH
6590: LD_INT 2
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: LD_INT 91
6599: PUSH
6600: LD_EXP 21
6604: PUSH
6605: LD_INT 20
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PPUSH
6617: CALL_OW 69
6621: PUSH
6622: LD_EXP 3
6626: AND
6627: PUSH
6628: LD_EXP 21
6632: PPUSH
6633: CALL_OW 302
6637: AND
6638: IFFALSE 6885
6640: GO 6642
6642: DISABLE
6643: LD_INT 0
6645: PPUSH
6646: PPUSH
6647: PPUSH
6648: PPUSH
// begin IbrahimBetrayal ;
6649: CALL 6888 0 0
// repeat wait ( 0 0$1 ) ;
6653: LD_INT 35
6655: PPUSH
6656: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6660: LD_EXP 21
6664: PPUSH
6665: CALL_OW 301
6669: PUSH
6670: LD_INT 22
6672: PUSH
6673: LD_INT 2
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: LD_INT 91
6682: PUSH
6683: LD_EXP 21
6687: PUSH
6688: LD_INT 6
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PPUSH
6700: CALL_OW 69
6704: PUSH
6705: LD_EXP 21
6709: PPUSH
6710: CALL_OW 302
6714: AND
6715: OR
6716: IFFALSE 6653
// if IsDead ( Ibrahim ) then
6718: LD_EXP 21
6722: PPUSH
6723: CALL_OW 301
6727: IFFALSE 6731
// exit ;
6729: GO 6885
// x := GetX ( Ibrahim ) ;
6731: LD_ADDR_VAR 0 1
6735: PUSH
6736: LD_EXP 21
6740: PPUSH
6741: CALL_OW 250
6745: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
6746: LD_ADDR_VAR 0 2
6750: PUSH
6751: LD_EXP 21
6755: PPUSH
6756: CALL_OW 251
6760: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
6761: LD_ADDR_VAR 0 3
6765: PUSH
6766: LD_EXP 21
6770: PPUSH
6771: CALL_OW 254
6775: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
6776: LD_ADDR_VAR 0 4
6780: PUSH
6781: LD_EXP 21
6785: PPUSH
6786: CALL_OW 256
6790: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
6791: LD_EXP 21
6795: PPUSH
6796: CALL_OW 64
// uc_side := 2 ;
6800: LD_ADDR_OWVAR 20
6804: PUSH
6805: LD_INT 2
6807: ST_TO_ADDR
// uc_nation := 2 ;
6808: LD_ADDR_OWVAR 21
6812: PUSH
6813: LD_INT 2
6815: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
6816: LD_ADDR_EXP 21
6820: PUSH
6821: LD_STRING Ibrahim
6823: PPUSH
6824: LD_INT 0
6826: PPUSH
6827: LD_STRING 
6829: PPUSH
6830: CALL 28908 0 3
6834: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
6835: LD_EXP 21
6839: PPUSH
6840: LD_VAR 0 3
6844: PPUSH
6845: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
6849: LD_EXP 21
6853: PPUSH
6854: LD_VAR 0 1
6858: PPUSH
6859: LD_VAR 0 2
6863: PPUSH
6864: LD_INT 0
6866: PPUSH
6867: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
6871: LD_EXP 21
6875: PPUSH
6876: LD_VAR 0 4
6880: PPUSH
6881: CALL_OW 234
// end ;
6885: PPOPN 4
6887: END
// export function IbrahimBetrayal ; var i , tmp ; begin
6888: LD_INT 0
6890: PPUSH
6891: PPUSH
6892: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
6893: LD_INT 122
6895: PPUSH
6896: LD_INT 77
6898: PPUSH
6899: LD_INT 2
6901: PPUSH
6902: LD_INT 6
6904: NEG
6905: PPUSH
6906: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
6910: LD_EXP 21
6914: PPUSH
6915: LD_INT 123
6917: PPUSH
6918: LD_INT 79
6920: PPUSH
6921: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
6925: LD_EXP 21
6929: PPUSH
6930: LD_INT 125
6932: PPUSH
6933: LD_INT 82
6935: PPUSH
6936: CALL_OW 178
// wait ( 0 0$2 ) ;
6940: LD_INT 70
6942: PPUSH
6943: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
6947: LD_EXP 42
6951: PPUSH
6952: LD_EXP 21
6956: PPUSH
6957: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
6961: LD_EXP 42
6965: PPUSH
6966: LD_STRING DRum-outpost-b-3
6968: PPUSH
6969: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
6973: LD_ADDR_VAR 0 3
6977: PUSH
6978: LD_INT 125
6980: PPUSH
6981: LD_INT 76
6983: PPUSH
6984: CALL_OW 428
6988: PUSH
6989: LD_INT 125
6991: PPUSH
6992: LD_INT 79
6994: PPUSH
6995: CALL_OW 428
6999: PUSH
7000: LD_INT 125
7002: PPUSH
7003: LD_INT 82
7005: PPUSH
7006: CALL_OW 428
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: LIST
7015: ST_TO_ADDR
// for i in tmp do
7016: LD_ADDR_VAR 0 2
7020: PUSH
7021: LD_VAR 0 3
7025: PUSH
7026: FOR_IN
7027: IFFALSE 7043
// SetLives ( i , 200 ) ;
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_INT 200
7036: PPUSH
7037: CALL_OW 234
7041: GO 7026
7043: POP
7044: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7045: LD_EXP 21
7049: PPUSH
7050: LD_STRING DI-outpost-b-4
7052: PPUSH
7053: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7057: LD_EXP 21
7061: PPUSH
7062: LD_INT 5
7064: PPUSH
7065: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7069: LD_EXP 21
7073: PUSH
7074: LD_EXP 42
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PPUSH
7083: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7087: LD_INT 122
7089: PPUSH
7090: LD_INT 77
7092: PPUSH
7093: LD_INT 2
7095: PPUSH
7096: CALL_OW 331
// if Givi then
7100: LD_EXP 19
7104: IFFALSE 7120
// Say ( Givi , DG-1-outpost-b-5 ) else
7106: LD_EXP 19
7110: PPUSH
7111: LD_STRING DG-1-outpost-b-5
7113: PPUSH
7114: CALL_OW 88
7118: GO 7185
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7120: LD_EXP 29
7124: PPUSH
7125: LD_INT 26
7127: PUSH
7128: LD_INT 2
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PPUSH
7135: CALL_OW 72
7139: PUSH
7140: LD_INT 1
7142: ARRAY
7143: PPUSH
7144: LD_STRING DArf-outpost-b-a-5
7146: PPUSH
7147: CALL_OW 88
7151: NOT
7152: IFFALSE 7185
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7154: LD_EXP 29
7158: PPUSH
7159: LD_INT 26
7161: PUSH
7162: LD_INT 1
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PPUSH
7169: CALL_OW 72
7173: PUSH
7174: LD_INT 1
7176: ARRAY
7177: PPUSH
7178: LD_STRING DArm-outpost-b-a-5
7180: PPUSH
7181: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7185: LD_INT 35
7187: PPUSH
7188: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7192: LD_EXP 21
7196: PPUSH
7197: CALL_OW 301
7201: PUSH
7202: LD_EXP 18
7206: PPUSH
7207: LD_EXP 21
7211: PPUSH
7212: CALL_OW 296
7216: PUSH
7217: LD_INT 6
7219: LESS
7220: PUSH
7221: LD_EXP 21
7225: PPUSH
7226: CALL_OW 302
7230: AND
7231: OR
7232: IFFALSE 7185
// if IsDead ( Ibrahim ) then
7234: LD_EXP 21
7238: PPUSH
7239: CALL_OW 301
7243: IFFALSE 7259
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7245: LD_EXP 18
7249: PPUSH
7250: LD_STRING DH-ibrahimdead-1
7252: PPUSH
7253: CALL_OW 88
// exit ;
7257: GO 7300
// end ; CenterNowOnUnits ( Ibrahim ) ;
7259: LD_EXP 21
7263: PPUSH
7264: CALL_OW 87
// DialogueOn ;
7268: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7272: LD_EXP 21
7276: PPUSH
7277: LD_STRING DI-ibrahimlives-1
7279: PPUSH
7280: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7284: LD_EXP 18
7288: PPUSH
7289: LD_STRING DH-Ibrahimlives-2
7291: PPUSH
7292: CALL_OW 88
// DialogueOff ;
7296: CALL_OW 7
// end ;
7300: LD_VAR 0 1
7304: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7305: LD_INT 11
7307: PPUSH
7308: LD_INT 22
7310: PUSH
7311: LD_INT 2
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PPUSH
7318: CALL_OW 70
7322: PUSH
7323: LD_OWVAR 1
7327: PUSH
7328: LD_INT 18900
7330: PUSH
7331: LD_INT 16800
7333: PUSH
7334: LD_INT 16800
7336: PUSH
7337: LD_INT 15750
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: PUSH
7346: LD_OWVAR 67
7350: ARRAY
7351: GREATEREQUAL
7352: OR
7353: IFFALSE 7814
7355: GO 7357
7357: DISABLE
// begin outerAreaAchived := true ;
7358: LD_ADDR_EXP 15
7362: PUSH
7363: LD_INT 1
7365: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7366: LD_INT 700
7368: PPUSH
7369: CALL_OW 67
// DialogueOn ;
7373: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7377: LD_EXP 26
7381: PPUSH
7382: LD_STRING DShar-radio-1
7384: PPUSH
7385: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7389: LD_EXP 26
7393: PPUSH
7394: LD_STRING DShar-radio-2
7396: PPUSH
7397: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7401: LD_EXP 18
7405: PPUSH
7406: LD_STRING DH-radio-2
7408: PPUSH
7409: CALL_OW 88
// DialogueOff ;
7413: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7417: LD_STRING Gaidar
7419: PPUSH
7420: CALL_OW 337
// if Difficulty < 3 then
7424: LD_OWVAR 67
7428: PUSH
7429: LD_INT 3
7431: LESS
7432: IFFALSE 7498
// begin DialogueOn ;
7434: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7438: LD_INT 11
7440: PPUSH
7441: LD_INT 14
7443: PPUSH
7444: LD_INT 2
7446: PPUSH
7447: LD_INT 6
7449: NEG
7450: PPUSH
7451: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7455: LD_INT 11
7457: PPUSH
7458: LD_INT 14
7460: PPUSH
7461: LD_INT 2
7463: PPUSH
7464: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7468: LD_INT 11
7470: PPUSH
7471: LD_INT 14
7473: PPUSH
7474: CALL_OW 84
// dwait ( 0 0$1 ) ;
7478: LD_INT 35
7480: PPUSH
7481: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7485: LD_EXP 18
7489: PPUSH
7490: CALL_OW 87
// DialogueOff ;
7494: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7498: LD_INT 1050
7500: PUSH
7501: LD_INT 350
7503: PPUSH
7504: LD_INT 525
7506: PPUSH
7507: CALL_OW 12
7511: PUSH
7512: LD_OWVAR 67
7516: MUL
7517: PLUS
7518: PPUSH
7519: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7523: LD_INT 35
7525: PPUSH
7526: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7530: LD_INT 2
7532: PPUSH
7533: LD_INT 1
7535: PPUSH
7536: CALL_OW 428
7540: PUSH
7541: LD_INT 0
7543: EQUAL
7544: IFFALSE 7523
// SetDir ( Gaidar , 2 ) ;
7546: LD_EXP 35
7550: PPUSH
7551: LD_INT 2
7553: PPUSH
7554: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7558: LD_EXP 35
7562: PPUSH
7563: LD_INT 2
7565: PPUSH
7566: LD_INT 1
7568: PPUSH
7569: LD_INT 0
7571: PPUSH
7572: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7576: LD_EXP 35
7580: PPUSH
7581: LD_INT 19
7583: PPUSH
7584: LD_INT 24
7586: PPUSH
7587: CALL_OW 111
// AddComWait ( Gaidar , 0 0$6 ) ;
7591: LD_EXP 35
7595: PPUSH
7596: LD_INT 210
7598: PPUSH
7599: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7603: LD_EXP 35
7607: PPUSH
7608: LD_INT 38
7610: PPUSH
7611: LD_INT 47
7613: PPUSH
7614: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7618: LD_EXP 35
7622: PPUSH
7623: LD_INT 32
7625: PPUSH
7626: LD_INT 59
7628: PPUSH
7629: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
7633: LD_EXP 35
7637: PPUSH
7638: LD_INT 350
7640: PPUSH
7641: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
7645: LD_EXP 35
7649: PPUSH
7650: LD_INT 62
7652: PPUSH
7653: LD_INT 116
7655: PPUSH
7656: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
7660: LD_EXP 35
7664: PPUSH
7665: LD_INT 92
7667: PPUSH
7668: LD_INT 177
7670: PPUSH
7671: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7675: LD_INT 35
7677: PPUSH
7678: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
7682: LD_EXP 35
7686: PPUSH
7687: CALL_OW 301
7691: PUSH
7692: LD_EXP 35
7696: PPUSH
7697: LD_INT 92
7699: PPUSH
7700: LD_INT 177
7702: PPUSH
7703: CALL_OW 307
7707: OR
7708: IFFALSE 7675
// if IsAt ( Gaidar , 92 , 177 ) then
7710: LD_EXP 35
7714: PPUSH
7715: LD_INT 92
7717: PPUSH
7718: LD_INT 177
7720: PPUSH
7721: CALL_OW 307
7725: IFFALSE 7792
// begin DialogueOn ;
7727: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
7731: LD_INT 92
7733: PPUSH
7734: LD_INT 177
7736: PPUSH
7737: LD_INT 2
7739: PPUSH
7740: LD_INT 3
7742: NEG
7743: PPUSH
7744: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
7748: LD_EXP 35
7752: PPUSH
7753: CALL_OW 87
// dwait ( 0 0$2 ) ;
7757: LD_INT 70
7759: PPUSH
7760: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
7764: LD_INT 92
7766: PPUSH
7767: LD_INT 177
7769: PPUSH
7770: LD_INT 2
7772: PPUSH
7773: CALL_OW 331
// DialogueOff ;
7777: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
7781: LD_EXP 35
7785: PPUSH
7786: CALL_OW 64
// exit ;
7790: GO 7814
// end ; gaidarKilled := true ;
7792: LD_ADDR_EXP 14
7796: PUSH
7797: LD_INT 1
7799: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
7800: LD_STRING GaidarKilled
7802: PPUSH
7803: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
7807: LD_STRING ACH_COMMISAR
7809: PPUSH
7810: CALL_OW 543
// end ;
7814: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
7815: LD_INT 2
7817: PPUSH
7818: LD_EXP 35
7822: PPUSH
7823: CALL_OW 292
7827: IFFALSE 7844
7829: GO 7831
7831: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
7832: LD_EXP 35
7836: PPUSH
7837: LD_STRING DT-objective-1
7839: PPUSH
7840: CALL_OW 88
7844: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
7845: LD_INT 22
7847: PUSH
7848: LD_INT 2
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 2
7857: PUSH
7858: LD_INT 95
7860: PUSH
7861: LD_INT 5
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: LD_INT 95
7870: PUSH
7871: LD_INT 6
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PUSH
7878: LD_INT 95
7880: PUSH
7881: LD_INT 7
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PPUSH
7898: CALL_OW 69
7902: IFFALSE 7939
7904: GO 7906
7906: DISABLE
// begin DialogueOn ;
7907: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
7911: LD_EXP 18
7915: PPUSH
7916: LD_STRING DH-outpost-last-1
7918: PPUSH
7919: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
7923: LD_EXP 34
7927: PPUSH
7928: LD_STRING DB-outpost-last-2
7930: PPUSH
7931: CALL_OW 94
// DialogueOff ;
7935: CALL_OW 7
// end ;
7939: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
7940: LD_INT 200
7942: PPUSH
7943: CALL_OW 256
7947: PUSH
7948: LD_INT 999
7950: LESS
7951: PUSH
7952: LD_INT 200
7954: PPUSH
7955: CALL_OW 255
7959: PUSH
7960: LD_INT 2
7962: EQUAL
7963: OR
7964: IFFALSE 8137
7966: GO 7968
7968: DISABLE
7969: LD_INT 0
7971: PPUSH
7972: PPUSH
// begin if not earlyEscape then
7973: LD_EXP 16
7977: NOT
7978: IFFALSE 8004
// begin SayRadio ( Burlak , DB-end-1 ) ;
7980: LD_EXP 34
7984: PPUSH
7985: LD_STRING DB-end-1
7987: PPUSH
7988: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
7992: LD_EXP 18
7996: PPUSH
7997: LD_STRING DH-end-2
7999: PPUSH
8000: CALL_OW 88
// end ; if tick <= 15 15$00 then
8004: LD_OWVAR 1
8008: PUSH
8009: LD_INT 31500
8011: LESSEQUAL
8012: IFFALSE 8021
// SetAchievement ( ACH_FIST ) ;
8014: LD_STRING ACH_FIST
8016: PPUSH
8017: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8021: LD_ADDR_VAR 0 2
8025: PUSH
8026: LD_INT 22
8028: PUSH
8029: LD_INT 3
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 3
8038: PUSH
8039: LD_INT 21
8041: PUSH
8042: LD_INT 3
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: PPUSH
8057: CALL_OW 69
8061: ST_TO_ADDR
// if not tmp then
8062: LD_VAR 0 2
8066: NOT
8067: IFFALSE 8071
// exit ;
8069: GO 8137
// for i in tmp do
8071: LD_ADDR_VAR 0 1
8075: PUSH
8076: LD_VAR 0 2
8080: PUSH
8081: FOR_IN
8082: IFFALSE 8135
// begin SetTag ( i , tEscape ) ;
8084: LD_VAR 0 1
8088: PPUSH
8089: LD_EXP 17
8093: PPUSH
8094: CALL_OW 109
// if IsInUnit ( i ) then
8098: LD_VAR 0 1
8102: PPUSH
8103: CALL_OW 310
8107: IFFALSE 8118
// ComExitBuilding ( i ) ;
8109: LD_VAR 0 1
8113: PPUSH
8114: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8118: LD_VAR 0 1
8122: PPUSH
8123: LD_INT 92
8125: PPUSH
8126: LD_INT 177
8128: PPUSH
8129: CALL_OW 171
// end ;
8133: GO 8081
8135: POP
8136: POP
// end ;
8137: PPOPN 2
8139: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8140: LD_INT 4
8142: PPUSH
8143: LD_INT 22
8145: PUSH
8146: LD_INT 2
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PPUSH
8153: CALL_OW 70
8157: PUSH
8158: LD_EXP 15
8162: NOT
8163: AND
8164: PUSH
8165: LD_EXP 27
8169: PPUSH
8170: CALL_OW 302
8174: AND
8175: IFFALSE 8415
8177: GO 8179
8179: DISABLE
// begin DialogueOn ;
8180: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8184: LD_INT 111
8186: PPUSH
8187: LD_INT 54
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: LD_INT 16
8195: NEG
8196: PPUSH
8197: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8201: LD_INT 111
8203: PPUSH
8204: LD_INT 53
8206: PPUSH
8207: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8211: LD_INT 10
8213: PPUSH
8214: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8218: LD_EXP 27
8222: PPUSH
8223: LD_STRING DKs-Hannibal-1
8225: PPUSH
8226: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8230: LD_EXP 27
8234: PPUSH
8235: LD_STRING DKs-Hannibal-2
8237: PPUSH
8238: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8242: LD_EXP 27
8246: PPUSH
8247: LD_STRING DKs-Hannibal-3
8249: PPUSH
8250: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8254: LD_EXP 27
8258: PPUSH
8259: LD_STRING DKs-Hannibal-4
8261: PPUSH
8262: CALL_OW 88
// dwait ( 0 0$1 ) ;
8266: LD_INT 35
8268: PPUSH
8269: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8273: LD_INT 111
8275: PPUSH
8276: LD_INT 54
8278: PPUSH
8279: LD_INT 2
8281: PPUSH
8282: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8286: LD_INT 173
8288: PPUSH
8289: LD_INT 76
8291: PPUSH
8292: LD_INT 2
8294: PPUSH
8295: LD_INT 12
8297: NEG
8298: PPUSH
8299: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8303: LD_INT 173
8305: PPUSH
8306: LD_INT 76
8308: PPUSH
8309: LD_INT 2
8311: PPUSH
8312: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8316: LD_INT 173
8318: PPUSH
8319: LD_INT 76
8321: PPUSH
8322: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8326: LD_EXP 27
8330: PPUSH
8331: LD_STRING DKs-Hannibal-5
8333: PPUSH
8334: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8338: LD_EXP 22
8342: PUSH
8343: LD_INT 22
8345: PUSH
8346: LD_INT 2
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 34
8355: PUSH
8356: LD_INT 26
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PPUSH
8367: CALL_OW 69
8371: NOT
8372: AND
8373: IFFALSE 8411
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8375: LD_EXP 22
8379: PPUSH
8380: LD_STRING DKam-Hannibal-a-6
8382: PPUSH
8383: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8387: LD_EXP 22
8391: PPUSH
8392: LD_STRING DKam-Hannibal-a-7
8394: PPUSH
8395: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8399: LD_EXP 19
8403: PPUSH
8404: LD_STRING DG-Hannibal-a-8
8406: PPUSH
8407: CALL_OW 88
// end ; DialogueOff ;
8411: CALL_OW 7
// end ;
8415: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8416: LD_INT 225
8418: PPUSH
8419: CALL_OW 302
8423: PUSH
8424: LD_INT 200
8426: PPUSH
8427: CALL_OW 302
8431: AND
8432: PUSH
8433: LD_INT 12
8435: PPUSH
8436: LD_INT 21
8438: PUSH
8439: LD_INT 3
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 70
8450: PUSH
8451: LD_INT 2
8453: GREATER
8454: AND
8455: PUSH
8456: LD_INT 13
8458: PPUSH
8459: LD_INT 22
8461: PUSH
8462: LD_INT 2
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PPUSH
8469: CALL_OW 70
8473: PUSH
8474: LD_INT 3
8476: GREATER
8477: AND
8478: IFFALSE 8491
8480: GO 8482
8482: DISABLE
// hannibalPath := true ;
8483: LD_ADDR_EXP 9
8487: PUSH
8488: LD_INT 1
8490: ST_TO_ADDR
8491: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8492: LD_EXP 9
8496: PUSH
8497: LD_INT 6
8499: PPUSH
8500: LD_INT 22
8502: PUSH
8503: LD_INT 2
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PPUSH
8510: CALL_OW 70
8514: AND
8515: IFFALSE 8860
8517: GO 8519
8519: DISABLE
8520: LD_INT 0
8522: PPUSH
8523: PPUSH
8524: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8525: LD_ADDR_VAR 0 2
8529: PUSH
8530: LD_INT 6
8532: PPUSH
8533: LD_INT 22
8535: PUSH
8536: LD_INT 2
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PPUSH
8543: CALL_OW 70
8547: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8548: LD_ADDR_VAR 0 3
8552: PUSH
8553: LD_VAR 0 2
8557: PPUSH
8558: LD_INT 34
8560: PUSH
8561: LD_INT 26
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PPUSH
8568: CALL_OW 72
8572: PUSH
8573: LD_INT 0
8575: GREATER
8576: ST_TO_ADDR
// DialogueOn ;
8577: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8581: LD_EXP 18
8585: PPUSH
8586: LD_STRING DH-Cleverattack-1
8588: PPUSH
8589: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8593: LD_EXP 18
8597: PPUSH
8598: LD_STRING DH-Cleverattack-2
8600: PPUSH
8601: CALL_OW 88
// if hasFlameThrower then
8605: LD_VAR 0 3
8609: IFFALSE 8637
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8611: LD_EXP 34
8615: PPUSH
8616: LD_STRING DB-Cleverattack-3
8618: PPUSH
8619: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8623: LD_EXP 18
8627: PPUSH
8628: LD_STRING DH-Cleverattack-4
8630: PPUSH
8631: CALL_OW 88
// end else
8635: GO 8661
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
8637: LD_EXP 34
8641: PPUSH
8642: LD_STRING DB-Cleverattack-a-3
8644: PPUSH
8645: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
8649: LD_EXP 18
8653: PPUSH
8654: LD_STRING DH-Cleverattack-a-4
8656: PPUSH
8657: CALL_OW 88
// end ; DialogueOff ;
8661: CALL_OW 7
// if not hasFlameThrower then
8665: LD_VAR 0 3
8669: NOT
8670: IFFALSE 8674
// exit ;
8672: GO 8860
// earlyEscape := true ;
8674: LD_ADDR_EXP 16
8678: PUSH
8679: LD_INT 1
8681: ST_TO_ADDR
// wait ( 0 0$4 ) ;
8682: LD_INT 140
8684: PPUSH
8685: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
8689: LD_ADDR_VAR 0 2
8693: PUSH
8694: LD_INT 22
8696: PUSH
8697: LD_INT 3
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: LD_INT 2
8706: PUSH
8707: LD_INT 25
8709: PUSH
8710: LD_INT 1
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 25
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 25
8729: PUSH
8730: LD_INT 4
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PPUSH
8747: CALL_OW 69
8751: PUSH
8752: LD_EXP 21
8756: PUSH
8757: LD_EXP 36
8761: PUSH
8762: LD_EXP 35
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: LIST
8771: DIFF
8772: ST_TO_ADDR
// for i in tmp do
8773: LD_ADDR_VAR 0 1
8777: PUSH
8778: LD_VAR 0 2
8782: PUSH
8783: FOR_IN
8784: IFFALSE 8858
// begin if Prob ( 40 + 10 * Difficulty ) then
8786: LD_INT 40
8788: PUSH
8789: LD_INT 10
8791: PUSH
8792: LD_OWVAR 67
8796: MUL
8797: PLUS
8798: PPUSH
8799: CALL_OW 13
8803: IFFALSE 8807
// continue ;
8805: GO 8783
// SetTag ( i , tEscape ) ;
8807: LD_VAR 0 1
8811: PPUSH
8812: LD_EXP 17
8816: PPUSH
8817: CALL_OW 109
// if IsInUnit ( i ) then
8821: LD_VAR 0 1
8825: PPUSH
8826: CALL_OW 310
8830: IFFALSE 8841
// ComExitBuilding ( i ) ;
8832: LD_VAR 0 1
8836: PPUSH
8837: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8841: LD_VAR 0 1
8845: PPUSH
8846: LD_INT 92
8848: PPUSH
8849: LD_INT 177
8851: PPUSH
8852: CALL_OW 171
// end ;
8856: GO 8783
8858: POP
8859: POP
// end ;
8860: PPOPN 3
8862: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
8863: LD_INT 9
8865: PPUSH
8866: LD_INT 2
8868: PUSH
8869: LD_INT 22
8871: PUSH
8872: LD_INT 3
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 22
8881: PUSH
8882: LD_INT 6
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: LIST
8893: PPUSH
8894: CALL_OW 70
8898: IFFALSE 8996
8900: GO 8902
8902: DISABLE
8903: LD_INT 0
8905: PPUSH
// begin enable ;
8906: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
8907: LD_ADDR_VAR 0 1
8911: PUSH
8912: LD_INT 9
8914: PPUSH
8915: LD_INT 2
8917: PUSH
8918: LD_INT 22
8920: PUSH
8921: LD_INT 3
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 22
8930: PUSH
8931: LD_INT 6
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 70
8947: PUSH
8948: FOR_IN
8949: IFFALSE 8994
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
8951: LD_VAR 0 1
8955: PPUSH
8956: CALL_OW 110
8960: PUSH
8961: LD_EXP 17
8965: EQUAL
8966: PUSH
8967: LD_VAR 0 1
8971: PPUSH
8972: CALL_OW 255
8976: PUSH
8977: LD_INT 6
8979: EQUAL
8980: OR
8981: IFFALSE 8992
// RemoveUnit ( i ) ;
8983: LD_VAR 0 1
8987: PPUSH
8988: CALL_OW 64
8992: GO 8948
8994: POP
8995: POP
// end ;
8996: PPOPN 1
8998: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
8999: LD_EXP 23
9003: PUSH
9004: LD_EXP 23
9008: PPUSH
9009: CALL_OW 256
9013: PUSH
9014: LD_INT 3
9016: LESS
9017: AND
9018: IFFALSE 9064
9020: GO 9022
9022: DISABLE
// begin DialogueOn ;
9023: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9027: LD_EXP 23
9031: PPUSH
9032: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9036: LD_EXP 23
9040: PPUSH
9041: LD_STRING DK-Kkilled-1
9043: PPUSH
9044: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9048: LD_EXP 18
9052: PPUSH
9053: LD_STRING DH-Kkilled-2
9055: PPUSH
9056: CALL_OW 88
// DialogueOff ;
9060: CALL_OW 7
// end ;
9064: END
// every 0 0$1 trigger kaiaKilledByRussian do
9065: LD_EXP 8
9069: IFFALSE 9086
9071: GO 9073
9073: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9074: LD_EXP 18
9078: PPUSH
9079: LD_STRING DH-Kkilled-3
9081: PPUSH
9082: CALL_OW 88
9086: END
// every 0 0$1 trigger tick >= 24 24$00 do
9087: LD_OWVAR 1
9091: PUSH
9092: LD_INT 50400
9094: GREATEREQUAL
9095: IFFALSE 9132
9097: GO 9099
9099: DISABLE
// begin DialogueOn ;
9100: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9104: LD_EXP 26
9108: PPUSH
9109: LD_STRING DShar-slow-1
9111: PPUSH
9112: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9116: LD_EXP 26
9120: PPUSH
9121: LD_STRING DShar-slow-2
9123: PPUSH
9124: CALL_OW 94
// DialogueOff ;
9128: CALL_OW 7
// end ;
9132: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9133: LD_OWVAR 1
9137: PUSH
9138: LD_INT 84000
9140: PUSH
9141: LD_INT 75600
9143: PUSH
9144: LD_INT 67200
9146: PUSH
9147: LD_INT 63000
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: PUSH
9156: LD_OWVAR 67
9160: ARRAY
9161: GREATEREQUAL
9162: IFFALSE 9206
9164: GO 9166
9166: DISABLE
// begin DialogueOn ;
9167: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9171: LD_EXP 26
9175: PPUSH
9176: LD_STRING DShar-fail-1
9178: PPUSH
9179: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9183: LD_EXP 26
9187: PPUSH
9188: LD_STRING DShar-fail-2
9190: PPUSH
9191: CALL_OW 94
// DialogueOff ;
9195: CALL_OW 7
// YouLost ( Time ) ;
9199: LD_STRING Time
9201: PPUSH
9202: CALL_OW 104
// end ;
9206: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9207: LD_INT 22
9209: PUSH
9210: LD_INT 3
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: LD_INT 2
9219: PUSH
9220: LD_INT 30
9222: PUSH
9223: LD_INT 1
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: LD_INT 30
9232: PUSH
9233: LD_INT 0
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: PPUSH
9249: CALL_OW 69
9253: PUSH
9254: LD_INT 0
9256: EQUAL
9257: IFFALSE 9768
9259: GO 9261
9261: DISABLE
9262: LD_INT 0
9264: PPUSH
// begin if ( tick + gameTime ) <= [ 75 75$00 , 70 70$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9265: LD_OWVAR 1
9269: PUSH
9270: LD_EXP 5
9274: PLUS
9275: PUSH
9276: LD_INT 157500
9278: PUSH
9279: LD_INT 147000
9281: PUSH
9282: LD_INT 136500
9284: PUSH
9285: LD_INT 126000
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: PUSH
9294: LD_OWVAR 67
9298: ARRAY
9299: LESSEQUAL
9300: IFFALSE 9314
// AddMedal ( med1 , 1 ) else
9302: LD_STRING med1
9304: PPUSH
9305: LD_INT 1
9307: PPUSH
9308: CALL_OW 101
9312: GO 9325
// AddMedal ( med1 , - 1 ) ;
9314: LD_STRING med1
9316: PPUSH
9317: LD_INT 1
9319: NEG
9320: PPUSH
9321: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9325: LD_EXP 7
9329: PUSH
9330: LD_INT 3
9332: GREATEREQUAL
9333: PUSH
9334: LD_EXP 11
9338: MUL
9339: PUSH
9340: LD_EXP 9
9344: MUL
9345: PUSH
9346: LD_EXP 6
9350: PUSH
9351: LD_INT 6
9353: PUSH
9354: LD_INT 5
9356: PUSH
9357: LD_INT 4
9359: PUSH
9360: LD_INT 3
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: PUSH
9369: LD_OWVAR 67
9373: ARRAY
9374: LESS
9375: MUL
9376: IFFALSE 9390
// AddMedal ( med2 , 1 ) else
9378: LD_STRING med2
9380: PPUSH
9381: LD_INT 1
9383: PPUSH
9384: CALL_OW 101
9388: GO 9401
// AddMedal ( med2 , - 1 ) ;
9390: LD_STRING med2
9392: PPUSH
9393: LD_INT 1
9395: NEG
9396: PPUSH
9397: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9401: LD_EXP 14
9405: PPUSH
9406: LD_STRING 04_2_GaidarKilled
9408: PPUSH
9409: CALL_OW 39
// if gaidarKilled then
9413: LD_EXP 14
9417: IFFALSE 9431
// AddMedal ( med3 , 1 ) else
9419: LD_STRING med3
9421: PPUSH
9422: LD_INT 1
9424: PPUSH
9425: CALL_OW 101
9429: GO 9442
// AddMedal ( med3 , - 1 ) ;
9431: LD_STRING med3
9433: PPUSH
9434: LD_INT 1
9436: NEG
9437: PPUSH
9438: CALL_OW 101
// GiveMedals ( MAIN ) ;
9442: LD_STRING MAIN
9444: PPUSH
9445: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9449: LD_INT 22
9451: PUSH
9452: LD_INT 2
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 3
9461: PUSH
9462: LD_INT 23
9464: PUSH
9465: LD_INT 0
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PPUSH
9480: CALL_OW 69
9484: PPUSH
9485: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9489: LD_EXP 18
9493: PPUSH
9494: LD_STRING 04_2_Heike
9496: PPUSH
9497: CALL_OW 38
// if Aviradze then
9501: LD_EXP 28
9505: IFFALSE 9519
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9507: LD_EXP 28
9511: PPUSH
9512: LD_STRING 04_2_Aviradze
9514: PPUSH
9515: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9519: LD_EXP 21
9523: PUSH
9524: LD_EXP 21
9528: PPUSH
9529: CALL_OW 255
9533: PUSH
9534: LD_INT 2
9536: EQUAL
9537: AND
9538: IFFALSE 9568
// begin if ibrahimOnRuSide then
9540: LD_EXP 3
9544: IFFALSE 9556
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9546: LD_INT 1
9548: PPUSH
9549: LD_STRING 04_2_IbrahimJoined
9551: PPUSH
9552: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9556: LD_EXP 21
9560: PPUSH
9561: LD_STRING 04_2_Ibrahim
9563: PPUSH
9564: CALL_OW 38
// end ; if Kamil then
9568: LD_EXP 22
9572: IFFALSE 9586
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
9574: LD_EXP 22
9578: PPUSH
9579: LD_STRING 04_2_Kamil
9581: PPUSH
9582: CALL_OW 38
// if Sophia then
9586: LD_EXP 24
9590: IFFALSE 9604
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
9592: LD_EXP 24
9596: PPUSH
9597: LD_STRING 04_2_Sophia
9599: PPUSH
9600: CALL_OW 38
// if Kaia then
9604: LD_EXP 23
9608: IFFALSE 9622
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
9610: LD_EXP 23
9614: PPUSH
9615: LD_STRING 04_2_Kaia
9617: PPUSH
9618: CALL_OW 38
// if Givi then
9622: LD_EXP 19
9626: IFFALSE 9640
// SaveCharacters ( Givi , 04_2_Givi ) ;
9628: LD_EXP 19
9632: PPUSH
9633: LD_STRING 04_2_Givi
9635: PPUSH
9636: CALL_OW 38
// if Mike then
9640: LD_EXP 20
9644: IFFALSE 9658
// SaveCharacters ( Mike , 04_2_Mike ) ;
9646: LD_EXP 20
9650: PPUSH
9651: LD_STRING 04_2_Mike
9653: PPUSH
9654: CALL_OW 38
// if Markov then
9658: LD_EXP 25
9662: IFFALSE 9676
// SaveCharacters ( Markov , 04_2_Markov ) ;
9664: LD_EXP 25
9668: PPUSH
9669: LD_STRING 04_2_Markov
9671: PPUSH
9672: CALL_OW 38
// if Kurt then
9676: LD_EXP 27
9680: IFFALSE 9694
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
9682: LD_EXP 27
9686: PPUSH
9687: LD_STRING 04_2_Kurt
9689: PPUSH
9690: CALL_OW 38
// if heikeSecondSquad then
9694: LD_EXP 29
9698: IFFALSE 9712
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
9700: LD_EXP 29
9704: PPUSH
9705: LD_STRING 04_2_others
9707: PPUSH
9708: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
9712: LD_ADDR_VAR 0 1
9716: PUSH
9717: LD_INT 22
9719: PUSH
9720: LD_INT 2
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 23
9729: PUSH
9730: LD_INT 0
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PPUSH
9741: CALL_OW 69
9745: ST_TO_ADDR
// if tmp then
9746: LD_VAR 0 1
9750: IFFALSE 9764
// SaveCharacters ( tmp , 04_2_apes ) ;
9752: LD_VAR 0 1
9756: PPUSH
9757: LD_STRING 04_2_apes
9759: PPUSH
9760: CALL_OW 38
// YouWin ;
9764: CALL_OW 103
// end ; end_of_file
9768: PPOPN 1
9770: END
// every 0 0$1 do
9771: GO 9773
9773: DISABLE
// begin enable ;
9774: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9775: LD_STRING updateTimer(
9777: PUSH
9778: LD_OWVAR 1
9782: STR
9783: PUSH
9784: LD_STRING );
9786: STR
9787: PPUSH
9788: CALL_OW 559
// end ;
9792: END
// export function SOS_MapStart ( ) ; begin
9793: LD_INT 0
9795: PPUSH
// if streamModeActive then
9796: LD_EXP 43
9800: IFFALSE 9809
// DefineStreamItems ( true ) ;
9802: LD_INT 1
9804: PPUSH
9805: CALL 11459 0 1
// UpdateFactoryWaypoints ( ) ;
9809: CALL 25206 0 0
// end ;
9813: LD_VAR 0 1
9817: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9818: LD_INT 0
9820: PPUSH
// if p2 = 100 then
9821: LD_VAR 0 2
9825: PUSH
9826: LD_INT 100
9828: EQUAL
9829: IFFALSE 10832
// begin if not StreamModeActive then
9831: LD_EXP 43
9835: NOT
9836: IFFALSE 9846
// StreamModeActive := true ;
9838: LD_ADDR_EXP 43
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// if p3 = 0 then
9846: LD_VAR 0 3
9850: PUSH
9851: LD_INT 0
9853: EQUAL
9854: IFFALSE 9860
// InitStreamMode ;
9856: CALL 10995 0 0
// if p3 = 1 then
9860: LD_VAR 0 3
9864: PUSH
9865: LD_INT 1
9867: EQUAL
9868: IFFALSE 9878
// sRocket := true ;
9870: LD_ADDR_EXP 48
9874: PUSH
9875: LD_INT 1
9877: ST_TO_ADDR
// if p3 = 2 then
9878: LD_VAR 0 3
9882: PUSH
9883: LD_INT 2
9885: EQUAL
9886: IFFALSE 9896
// sSpeed := true ;
9888: LD_ADDR_EXP 47
9892: PUSH
9893: LD_INT 1
9895: ST_TO_ADDR
// if p3 = 3 then
9896: LD_VAR 0 3
9900: PUSH
9901: LD_INT 3
9903: EQUAL
9904: IFFALSE 9914
// sEngine := true ;
9906: LD_ADDR_EXP 49
9910: PUSH
9911: LD_INT 1
9913: ST_TO_ADDR
// if p3 = 4 then
9914: LD_VAR 0 3
9918: PUSH
9919: LD_INT 4
9921: EQUAL
9922: IFFALSE 9932
// sSpec := true ;
9924: LD_ADDR_EXP 46
9928: PUSH
9929: LD_INT 1
9931: ST_TO_ADDR
// if p3 = 5 then
9932: LD_VAR 0 3
9936: PUSH
9937: LD_INT 5
9939: EQUAL
9940: IFFALSE 9950
// sLevel := true ;
9942: LD_ADDR_EXP 50
9946: PUSH
9947: LD_INT 1
9949: ST_TO_ADDR
// if p3 = 6 then
9950: LD_VAR 0 3
9954: PUSH
9955: LD_INT 6
9957: EQUAL
9958: IFFALSE 9968
// sArmoury := true ;
9960: LD_ADDR_EXP 51
9964: PUSH
9965: LD_INT 1
9967: ST_TO_ADDR
// if p3 = 7 then
9968: LD_VAR 0 3
9972: PUSH
9973: LD_INT 7
9975: EQUAL
9976: IFFALSE 9986
// sRadar := true ;
9978: LD_ADDR_EXP 52
9982: PUSH
9983: LD_INT 1
9985: ST_TO_ADDR
// if p3 = 8 then
9986: LD_VAR 0 3
9990: PUSH
9991: LD_INT 8
9993: EQUAL
9994: IFFALSE 10004
// sBunker := true ;
9996: LD_ADDR_EXP 53
10000: PUSH
10001: LD_INT 1
10003: ST_TO_ADDR
// if p3 = 9 then
10004: LD_VAR 0 3
10008: PUSH
10009: LD_INT 9
10011: EQUAL
10012: IFFALSE 10022
// sHack := true ;
10014: LD_ADDR_EXP 54
10018: PUSH
10019: LD_INT 1
10021: ST_TO_ADDR
// if p3 = 10 then
10022: LD_VAR 0 3
10026: PUSH
10027: LD_INT 10
10029: EQUAL
10030: IFFALSE 10040
// sFire := true ;
10032: LD_ADDR_EXP 55
10036: PUSH
10037: LD_INT 1
10039: ST_TO_ADDR
// if p3 = 11 then
10040: LD_VAR 0 3
10044: PUSH
10045: LD_INT 11
10047: EQUAL
10048: IFFALSE 10058
// sRefresh := true ;
10050: LD_ADDR_EXP 56
10054: PUSH
10055: LD_INT 1
10057: ST_TO_ADDR
// if p3 = 12 then
10058: LD_VAR 0 3
10062: PUSH
10063: LD_INT 12
10065: EQUAL
10066: IFFALSE 10076
// sExp := true ;
10068: LD_ADDR_EXP 57
10072: PUSH
10073: LD_INT 1
10075: ST_TO_ADDR
// if p3 = 13 then
10076: LD_VAR 0 3
10080: PUSH
10081: LD_INT 13
10083: EQUAL
10084: IFFALSE 10094
// sDepot := true ;
10086: LD_ADDR_EXP 58
10090: PUSH
10091: LD_INT 1
10093: ST_TO_ADDR
// if p3 = 14 then
10094: LD_VAR 0 3
10098: PUSH
10099: LD_INT 14
10101: EQUAL
10102: IFFALSE 10112
// sFlag := true ;
10104: LD_ADDR_EXP 59
10108: PUSH
10109: LD_INT 1
10111: ST_TO_ADDR
// if p3 = 15 then
10112: LD_VAR 0 3
10116: PUSH
10117: LD_INT 15
10119: EQUAL
10120: IFFALSE 10130
// sKamikadze := true ;
10122: LD_ADDR_EXP 67
10126: PUSH
10127: LD_INT 1
10129: ST_TO_ADDR
// if p3 = 16 then
10130: LD_VAR 0 3
10134: PUSH
10135: LD_INT 16
10137: EQUAL
10138: IFFALSE 10148
// sTroll := true ;
10140: LD_ADDR_EXP 68
10144: PUSH
10145: LD_INT 1
10147: ST_TO_ADDR
// if p3 = 17 then
10148: LD_VAR 0 3
10152: PUSH
10153: LD_INT 17
10155: EQUAL
10156: IFFALSE 10166
// sSlow := true ;
10158: LD_ADDR_EXP 69
10162: PUSH
10163: LD_INT 1
10165: ST_TO_ADDR
// if p3 = 18 then
10166: LD_VAR 0 3
10170: PUSH
10171: LD_INT 18
10173: EQUAL
10174: IFFALSE 10184
// sLack := true ;
10176: LD_ADDR_EXP 70
10180: PUSH
10181: LD_INT 1
10183: ST_TO_ADDR
// if p3 = 19 then
10184: LD_VAR 0 3
10188: PUSH
10189: LD_INT 19
10191: EQUAL
10192: IFFALSE 10202
// sTank := true ;
10194: LD_ADDR_EXP 72
10198: PUSH
10199: LD_INT 1
10201: ST_TO_ADDR
// if p3 = 20 then
10202: LD_VAR 0 3
10206: PUSH
10207: LD_INT 20
10209: EQUAL
10210: IFFALSE 10220
// sRemote := true ;
10212: LD_ADDR_EXP 73
10216: PUSH
10217: LD_INT 1
10219: ST_TO_ADDR
// if p3 = 21 then
10220: LD_VAR 0 3
10224: PUSH
10225: LD_INT 21
10227: EQUAL
10228: IFFALSE 10238
// sPowell := true ;
10230: LD_ADDR_EXP 74
10234: PUSH
10235: LD_INT 1
10237: ST_TO_ADDR
// if p3 = 22 then
10238: LD_VAR 0 3
10242: PUSH
10243: LD_INT 22
10245: EQUAL
10246: IFFALSE 10256
// sTeleport := true ;
10248: LD_ADDR_EXP 77
10252: PUSH
10253: LD_INT 1
10255: ST_TO_ADDR
// if p3 = 23 then
10256: LD_VAR 0 3
10260: PUSH
10261: LD_INT 23
10263: EQUAL
10264: IFFALSE 10274
// sOilTower := true ;
10266: LD_ADDR_EXP 79
10270: PUSH
10271: LD_INT 1
10273: ST_TO_ADDR
// if p3 = 24 then
10274: LD_VAR 0 3
10278: PUSH
10279: LD_INT 24
10281: EQUAL
10282: IFFALSE 10292
// sShovel := true ;
10284: LD_ADDR_EXP 80
10288: PUSH
10289: LD_INT 1
10291: ST_TO_ADDR
// if p3 = 25 then
10292: LD_VAR 0 3
10296: PUSH
10297: LD_INT 25
10299: EQUAL
10300: IFFALSE 10310
// sSheik := true ;
10302: LD_ADDR_EXP 81
10306: PUSH
10307: LD_INT 1
10309: ST_TO_ADDR
// if p3 = 26 then
10310: LD_VAR 0 3
10314: PUSH
10315: LD_INT 26
10317: EQUAL
10318: IFFALSE 10328
// sEarthquake := true ;
10320: LD_ADDR_EXP 83
10324: PUSH
10325: LD_INT 1
10327: ST_TO_ADDR
// if p3 = 27 then
10328: LD_VAR 0 3
10332: PUSH
10333: LD_INT 27
10335: EQUAL
10336: IFFALSE 10346
// sAI := true ;
10338: LD_ADDR_EXP 84
10342: PUSH
10343: LD_INT 1
10345: ST_TO_ADDR
// if p3 = 28 then
10346: LD_VAR 0 3
10350: PUSH
10351: LD_INT 28
10353: EQUAL
10354: IFFALSE 10364
// sCargo := true ;
10356: LD_ADDR_EXP 87
10360: PUSH
10361: LD_INT 1
10363: ST_TO_ADDR
// if p3 = 29 then
10364: LD_VAR 0 3
10368: PUSH
10369: LD_INT 29
10371: EQUAL
10372: IFFALSE 10382
// sDLaser := true ;
10374: LD_ADDR_EXP 88
10378: PUSH
10379: LD_INT 1
10381: ST_TO_ADDR
// if p3 = 30 then
10382: LD_VAR 0 3
10386: PUSH
10387: LD_INT 30
10389: EQUAL
10390: IFFALSE 10400
// sExchange := true ;
10392: LD_ADDR_EXP 89
10396: PUSH
10397: LD_INT 1
10399: ST_TO_ADDR
// if p3 = 31 then
10400: LD_VAR 0 3
10404: PUSH
10405: LD_INT 31
10407: EQUAL
10408: IFFALSE 10418
// sFac := true ;
10410: LD_ADDR_EXP 90
10414: PUSH
10415: LD_INT 1
10417: ST_TO_ADDR
// if p3 = 32 then
10418: LD_VAR 0 3
10422: PUSH
10423: LD_INT 32
10425: EQUAL
10426: IFFALSE 10436
// sPower := true ;
10428: LD_ADDR_EXP 91
10432: PUSH
10433: LD_INT 1
10435: ST_TO_ADDR
// if p3 = 33 then
10436: LD_VAR 0 3
10440: PUSH
10441: LD_INT 33
10443: EQUAL
10444: IFFALSE 10454
// sRandom := true ;
10446: LD_ADDR_EXP 92
10450: PUSH
10451: LD_INT 1
10453: ST_TO_ADDR
// if p3 = 34 then
10454: LD_VAR 0 3
10458: PUSH
10459: LD_INT 34
10461: EQUAL
10462: IFFALSE 10472
// sShield := true ;
10464: LD_ADDR_EXP 93
10468: PUSH
10469: LD_INT 1
10471: ST_TO_ADDR
// if p3 = 35 then
10472: LD_VAR 0 3
10476: PUSH
10477: LD_INT 35
10479: EQUAL
10480: IFFALSE 10490
// sTime := true ;
10482: LD_ADDR_EXP 94
10486: PUSH
10487: LD_INT 1
10489: ST_TO_ADDR
// if p3 = 36 then
10490: LD_VAR 0 3
10494: PUSH
10495: LD_INT 36
10497: EQUAL
10498: IFFALSE 10508
// sTools := true ;
10500: LD_ADDR_EXP 95
10504: PUSH
10505: LD_INT 1
10507: ST_TO_ADDR
// if p3 = 101 then
10508: LD_VAR 0 3
10512: PUSH
10513: LD_INT 101
10515: EQUAL
10516: IFFALSE 10526
// sSold := true ;
10518: LD_ADDR_EXP 60
10522: PUSH
10523: LD_INT 1
10525: ST_TO_ADDR
// if p3 = 102 then
10526: LD_VAR 0 3
10530: PUSH
10531: LD_INT 102
10533: EQUAL
10534: IFFALSE 10544
// sDiff := true ;
10536: LD_ADDR_EXP 61
10540: PUSH
10541: LD_INT 1
10543: ST_TO_ADDR
// if p3 = 103 then
10544: LD_VAR 0 3
10548: PUSH
10549: LD_INT 103
10551: EQUAL
10552: IFFALSE 10562
// sFog := true ;
10554: LD_ADDR_EXP 64
10558: PUSH
10559: LD_INT 1
10561: ST_TO_ADDR
// if p3 = 104 then
10562: LD_VAR 0 3
10566: PUSH
10567: LD_INT 104
10569: EQUAL
10570: IFFALSE 10580
// sReset := true ;
10572: LD_ADDR_EXP 65
10576: PUSH
10577: LD_INT 1
10579: ST_TO_ADDR
// if p3 = 105 then
10580: LD_VAR 0 3
10584: PUSH
10585: LD_INT 105
10587: EQUAL
10588: IFFALSE 10598
// sSun := true ;
10590: LD_ADDR_EXP 66
10594: PUSH
10595: LD_INT 1
10597: ST_TO_ADDR
// if p3 = 106 then
10598: LD_VAR 0 3
10602: PUSH
10603: LD_INT 106
10605: EQUAL
10606: IFFALSE 10616
// sTiger := true ;
10608: LD_ADDR_EXP 62
10612: PUSH
10613: LD_INT 1
10615: ST_TO_ADDR
// if p3 = 107 then
10616: LD_VAR 0 3
10620: PUSH
10621: LD_INT 107
10623: EQUAL
10624: IFFALSE 10634
// sBomb := true ;
10626: LD_ADDR_EXP 63
10630: PUSH
10631: LD_INT 1
10633: ST_TO_ADDR
// if p3 = 108 then
10634: LD_VAR 0 3
10638: PUSH
10639: LD_INT 108
10641: EQUAL
10642: IFFALSE 10652
// sWound := true ;
10644: LD_ADDR_EXP 71
10648: PUSH
10649: LD_INT 1
10651: ST_TO_ADDR
// if p3 = 109 then
10652: LD_VAR 0 3
10656: PUSH
10657: LD_INT 109
10659: EQUAL
10660: IFFALSE 10670
// sBetray := true ;
10662: LD_ADDR_EXP 75
10666: PUSH
10667: LD_INT 1
10669: ST_TO_ADDR
// if p3 = 110 then
10670: LD_VAR 0 3
10674: PUSH
10675: LD_INT 110
10677: EQUAL
10678: IFFALSE 10688
// sContamin := true ;
10680: LD_ADDR_EXP 76
10684: PUSH
10685: LD_INT 1
10687: ST_TO_ADDR
// if p3 = 111 then
10688: LD_VAR 0 3
10692: PUSH
10693: LD_INT 111
10695: EQUAL
10696: IFFALSE 10706
// sOil := true ;
10698: LD_ADDR_EXP 78
10702: PUSH
10703: LD_INT 1
10705: ST_TO_ADDR
// if p3 = 112 then
10706: LD_VAR 0 3
10710: PUSH
10711: LD_INT 112
10713: EQUAL
10714: IFFALSE 10724
// sStu := true ;
10716: LD_ADDR_EXP 82
10720: PUSH
10721: LD_INT 1
10723: ST_TO_ADDR
// if p3 = 113 then
10724: LD_VAR 0 3
10728: PUSH
10729: LD_INT 113
10731: EQUAL
10732: IFFALSE 10742
// sBazooka := true ;
10734: LD_ADDR_EXP 85
10738: PUSH
10739: LD_INT 1
10741: ST_TO_ADDR
// if p3 = 114 then
10742: LD_VAR 0 3
10746: PUSH
10747: LD_INT 114
10749: EQUAL
10750: IFFALSE 10760
// sMortar := true ;
10752: LD_ADDR_EXP 86
10756: PUSH
10757: LD_INT 1
10759: ST_TO_ADDR
// if p3 = 115 then
10760: LD_VAR 0 3
10764: PUSH
10765: LD_INT 115
10767: EQUAL
10768: IFFALSE 10778
// sRanger := true ;
10770: LD_ADDR_EXP 96
10774: PUSH
10775: LD_INT 1
10777: ST_TO_ADDR
// if p3 = 116 then
10778: LD_VAR 0 3
10782: PUSH
10783: LD_INT 116
10785: EQUAL
10786: IFFALSE 10796
// sComputer := true ;
10788: LD_ADDR_EXP 97
10792: PUSH
10793: LD_INT 1
10795: ST_TO_ADDR
// if p3 = 117 then
10796: LD_VAR 0 3
10800: PUSH
10801: LD_INT 117
10803: EQUAL
10804: IFFALSE 10814
// s30 := true ;
10806: LD_ADDR_EXP 98
10810: PUSH
10811: LD_INT 1
10813: ST_TO_ADDR
// if p3 = 118 then
10814: LD_VAR 0 3
10818: PUSH
10819: LD_INT 118
10821: EQUAL
10822: IFFALSE 10832
// s60 := true ;
10824: LD_ADDR_EXP 99
10828: PUSH
10829: LD_INT 1
10831: ST_TO_ADDR
// end ; if p2 = 101 then
10832: LD_VAR 0 2
10836: PUSH
10837: LD_INT 101
10839: EQUAL
10840: IFFALSE 10968
// begin case p3 of 1 :
10842: LD_VAR 0 3
10846: PUSH
10847: LD_INT 1
10849: DOUBLE
10850: EQUAL
10851: IFTRUE 10855
10853: GO 10862
10855: POP
// hHackUnlimitedResources ; 2 :
10856: CALL 23066 0 0
10860: GO 10968
10862: LD_INT 2
10864: DOUBLE
10865: EQUAL
10866: IFTRUE 10870
10868: GO 10877
10870: POP
// hHackSetLevel10 ; 3 :
10871: CALL 23199 0 0
10875: GO 10968
10877: LD_INT 3
10879: DOUBLE
10880: EQUAL
10881: IFTRUE 10885
10883: GO 10892
10885: POP
// hHackSetLevel10YourUnits ; 4 :
10886: CALL 23284 0 0
10890: GO 10968
10892: LD_INT 4
10894: DOUBLE
10895: EQUAL
10896: IFTRUE 10900
10898: GO 10907
10900: POP
// hHackInvincible ; 5 :
10901: CALL 23732 0 0
10905: GO 10968
10907: LD_INT 5
10909: DOUBLE
10910: EQUAL
10911: IFTRUE 10915
10913: GO 10922
10915: POP
// hHackInvisible ; 6 :
10916: CALL 23843 0 0
10920: GO 10968
10922: LD_INT 6
10924: DOUBLE
10925: EQUAL
10926: IFTRUE 10930
10928: GO 10937
10930: POP
// hHackChangeYourSide ; 7 :
10931: CALL 23900 0 0
10935: GO 10968
10937: LD_INT 7
10939: DOUBLE
10940: EQUAL
10941: IFTRUE 10945
10943: GO 10952
10945: POP
// hHackChangeUnitSide ; 8 :
10946: CALL 23942 0 0
10950: GO 10968
10952: LD_INT 8
10954: DOUBLE
10955: EQUAL
10956: IFTRUE 10960
10958: GO 10967
10960: POP
// hHackFog ; end ;
10961: CALL 24043 0 0
10965: GO 10968
10967: POP
// end ; end ;
10968: LD_VAR 0 7
10972: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
10973: GO 10975
10975: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
10976: LD_STRING initStreamRollete();
10978: PPUSH
10979: CALL_OW 559
// InitStreamMode ;
10983: CALL 10995 0 0
// DefineStreamItems ( false ) ;
10987: LD_INT 0
10989: PPUSH
10990: CALL 11459 0 1
// end ;
10994: END
// function InitStreamMode ; begin
10995: LD_INT 0
10997: PPUSH
// streamModeActive := false ;
10998: LD_ADDR_EXP 43
11002: PUSH
11003: LD_INT 0
11005: ST_TO_ADDR
// normalCounter := 36 ;
11006: LD_ADDR_EXP 44
11010: PUSH
11011: LD_INT 36
11013: ST_TO_ADDR
// hardcoreCounter := 18 ;
11014: LD_ADDR_EXP 45
11018: PUSH
11019: LD_INT 18
11021: ST_TO_ADDR
// sRocket := false ;
11022: LD_ADDR_EXP 48
11026: PUSH
11027: LD_INT 0
11029: ST_TO_ADDR
// sSpeed := false ;
11030: LD_ADDR_EXP 47
11034: PUSH
11035: LD_INT 0
11037: ST_TO_ADDR
// sEngine := false ;
11038: LD_ADDR_EXP 49
11042: PUSH
11043: LD_INT 0
11045: ST_TO_ADDR
// sSpec := false ;
11046: LD_ADDR_EXP 46
11050: PUSH
11051: LD_INT 0
11053: ST_TO_ADDR
// sLevel := false ;
11054: LD_ADDR_EXP 50
11058: PUSH
11059: LD_INT 0
11061: ST_TO_ADDR
// sArmoury := false ;
11062: LD_ADDR_EXP 51
11066: PUSH
11067: LD_INT 0
11069: ST_TO_ADDR
// sRadar := false ;
11070: LD_ADDR_EXP 52
11074: PUSH
11075: LD_INT 0
11077: ST_TO_ADDR
// sBunker := false ;
11078: LD_ADDR_EXP 53
11082: PUSH
11083: LD_INT 0
11085: ST_TO_ADDR
// sHack := false ;
11086: LD_ADDR_EXP 54
11090: PUSH
11091: LD_INT 0
11093: ST_TO_ADDR
// sFire := false ;
11094: LD_ADDR_EXP 55
11098: PUSH
11099: LD_INT 0
11101: ST_TO_ADDR
// sRefresh := false ;
11102: LD_ADDR_EXP 56
11106: PUSH
11107: LD_INT 0
11109: ST_TO_ADDR
// sExp := false ;
11110: LD_ADDR_EXP 57
11114: PUSH
11115: LD_INT 0
11117: ST_TO_ADDR
// sDepot := false ;
11118: LD_ADDR_EXP 58
11122: PUSH
11123: LD_INT 0
11125: ST_TO_ADDR
// sFlag := false ;
11126: LD_ADDR_EXP 59
11130: PUSH
11131: LD_INT 0
11133: ST_TO_ADDR
// sKamikadze := false ;
11134: LD_ADDR_EXP 67
11138: PUSH
11139: LD_INT 0
11141: ST_TO_ADDR
// sTroll := false ;
11142: LD_ADDR_EXP 68
11146: PUSH
11147: LD_INT 0
11149: ST_TO_ADDR
// sSlow := false ;
11150: LD_ADDR_EXP 69
11154: PUSH
11155: LD_INT 0
11157: ST_TO_ADDR
// sLack := false ;
11158: LD_ADDR_EXP 70
11162: PUSH
11163: LD_INT 0
11165: ST_TO_ADDR
// sTank := false ;
11166: LD_ADDR_EXP 72
11170: PUSH
11171: LD_INT 0
11173: ST_TO_ADDR
// sRemote := false ;
11174: LD_ADDR_EXP 73
11178: PUSH
11179: LD_INT 0
11181: ST_TO_ADDR
// sPowell := false ;
11182: LD_ADDR_EXP 74
11186: PUSH
11187: LD_INT 0
11189: ST_TO_ADDR
// sTeleport := false ;
11190: LD_ADDR_EXP 77
11194: PUSH
11195: LD_INT 0
11197: ST_TO_ADDR
// sOilTower := false ;
11198: LD_ADDR_EXP 79
11202: PUSH
11203: LD_INT 0
11205: ST_TO_ADDR
// sShovel := false ;
11206: LD_ADDR_EXP 80
11210: PUSH
11211: LD_INT 0
11213: ST_TO_ADDR
// sSheik := false ;
11214: LD_ADDR_EXP 81
11218: PUSH
11219: LD_INT 0
11221: ST_TO_ADDR
// sEarthquake := false ;
11222: LD_ADDR_EXP 83
11226: PUSH
11227: LD_INT 0
11229: ST_TO_ADDR
// sAI := false ;
11230: LD_ADDR_EXP 84
11234: PUSH
11235: LD_INT 0
11237: ST_TO_ADDR
// sCargo := false ;
11238: LD_ADDR_EXP 87
11242: PUSH
11243: LD_INT 0
11245: ST_TO_ADDR
// sDLaser := false ;
11246: LD_ADDR_EXP 88
11250: PUSH
11251: LD_INT 0
11253: ST_TO_ADDR
// sExchange := false ;
11254: LD_ADDR_EXP 89
11258: PUSH
11259: LD_INT 0
11261: ST_TO_ADDR
// sFac := false ;
11262: LD_ADDR_EXP 90
11266: PUSH
11267: LD_INT 0
11269: ST_TO_ADDR
// sPower := false ;
11270: LD_ADDR_EXP 91
11274: PUSH
11275: LD_INT 0
11277: ST_TO_ADDR
// sRandom := false ;
11278: LD_ADDR_EXP 92
11282: PUSH
11283: LD_INT 0
11285: ST_TO_ADDR
// sShield := false ;
11286: LD_ADDR_EXP 93
11290: PUSH
11291: LD_INT 0
11293: ST_TO_ADDR
// sTime := false ;
11294: LD_ADDR_EXP 94
11298: PUSH
11299: LD_INT 0
11301: ST_TO_ADDR
// sTools := false ;
11302: LD_ADDR_EXP 95
11306: PUSH
11307: LD_INT 0
11309: ST_TO_ADDR
// sSold := false ;
11310: LD_ADDR_EXP 60
11314: PUSH
11315: LD_INT 0
11317: ST_TO_ADDR
// sDiff := false ;
11318: LD_ADDR_EXP 61
11322: PUSH
11323: LD_INT 0
11325: ST_TO_ADDR
// sFog := false ;
11326: LD_ADDR_EXP 64
11330: PUSH
11331: LD_INT 0
11333: ST_TO_ADDR
// sReset := false ;
11334: LD_ADDR_EXP 65
11338: PUSH
11339: LD_INT 0
11341: ST_TO_ADDR
// sSun := false ;
11342: LD_ADDR_EXP 66
11346: PUSH
11347: LD_INT 0
11349: ST_TO_ADDR
// sTiger := false ;
11350: LD_ADDR_EXP 62
11354: PUSH
11355: LD_INT 0
11357: ST_TO_ADDR
// sBomb := false ;
11358: LD_ADDR_EXP 63
11362: PUSH
11363: LD_INT 0
11365: ST_TO_ADDR
// sWound := false ;
11366: LD_ADDR_EXP 71
11370: PUSH
11371: LD_INT 0
11373: ST_TO_ADDR
// sBetray := false ;
11374: LD_ADDR_EXP 75
11378: PUSH
11379: LD_INT 0
11381: ST_TO_ADDR
// sContamin := false ;
11382: LD_ADDR_EXP 76
11386: PUSH
11387: LD_INT 0
11389: ST_TO_ADDR
// sOil := false ;
11390: LD_ADDR_EXP 78
11394: PUSH
11395: LD_INT 0
11397: ST_TO_ADDR
// sStu := false ;
11398: LD_ADDR_EXP 82
11402: PUSH
11403: LD_INT 0
11405: ST_TO_ADDR
// sBazooka := false ;
11406: LD_ADDR_EXP 85
11410: PUSH
11411: LD_INT 0
11413: ST_TO_ADDR
// sMortar := false ;
11414: LD_ADDR_EXP 86
11418: PUSH
11419: LD_INT 0
11421: ST_TO_ADDR
// sRanger := false ;
11422: LD_ADDR_EXP 96
11426: PUSH
11427: LD_INT 0
11429: ST_TO_ADDR
// sComputer := false ;
11430: LD_ADDR_EXP 97
11434: PUSH
11435: LD_INT 0
11437: ST_TO_ADDR
// s30 := false ;
11438: LD_ADDR_EXP 98
11442: PUSH
11443: LD_INT 0
11445: ST_TO_ADDR
// s60 := false ;
11446: LD_ADDR_EXP 99
11450: PUSH
11451: LD_INT 0
11453: ST_TO_ADDR
// end ;
11454: LD_VAR 0 1
11458: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11459: LD_INT 0
11461: PPUSH
11462: PPUSH
11463: PPUSH
11464: PPUSH
11465: PPUSH
11466: PPUSH
11467: PPUSH
// result := [ ] ;
11468: LD_ADDR_VAR 0 2
11472: PUSH
11473: EMPTY
11474: ST_TO_ADDR
// if campaign_id = 1 then
11475: LD_OWVAR 69
11479: PUSH
11480: LD_INT 1
11482: EQUAL
11483: IFFALSE 14649
// begin case mission_number of 1 :
11485: LD_OWVAR 70
11489: PUSH
11490: LD_INT 1
11492: DOUBLE
11493: EQUAL
11494: IFTRUE 11498
11496: GO 11574
11498: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11499: LD_ADDR_VAR 0 2
11503: PUSH
11504: LD_INT 2
11506: PUSH
11507: LD_INT 4
11509: PUSH
11510: LD_INT 11
11512: PUSH
11513: LD_INT 12
11515: PUSH
11516: LD_INT 15
11518: PUSH
11519: LD_INT 16
11521: PUSH
11522: LD_INT 22
11524: PUSH
11525: LD_INT 23
11527: PUSH
11528: LD_INT 26
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: PUSH
11542: LD_INT 101
11544: PUSH
11545: LD_INT 102
11547: PUSH
11548: LD_INT 106
11550: PUSH
11551: LD_INT 116
11553: PUSH
11554: LD_INT 117
11556: PUSH
11557: LD_INT 118
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: ST_TO_ADDR
11572: GO 14647
11574: LD_INT 2
11576: DOUBLE
11577: EQUAL
11578: IFTRUE 11582
11580: GO 11666
11582: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11583: LD_ADDR_VAR 0 2
11587: PUSH
11588: LD_INT 2
11590: PUSH
11591: LD_INT 4
11593: PUSH
11594: LD_INT 11
11596: PUSH
11597: LD_INT 12
11599: PUSH
11600: LD_INT 15
11602: PUSH
11603: LD_INT 16
11605: PUSH
11606: LD_INT 22
11608: PUSH
11609: LD_INT 23
11611: PUSH
11612: LD_INT 26
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 101
11628: PUSH
11629: LD_INT 102
11631: PUSH
11632: LD_INT 105
11634: PUSH
11635: LD_INT 106
11637: PUSH
11638: LD_INT 108
11640: PUSH
11641: LD_INT 116
11643: PUSH
11644: LD_INT 117
11646: PUSH
11647: LD_INT 118
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: ST_TO_ADDR
11664: GO 14647
11666: LD_INT 3
11668: DOUBLE
11669: EQUAL
11670: IFTRUE 11674
11672: GO 11762
11674: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11675: LD_ADDR_VAR 0 2
11679: PUSH
11680: LD_INT 2
11682: PUSH
11683: LD_INT 4
11685: PUSH
11686: LD_INT 5
11688: PUSH
11689: LD_INT 11
11691: PUSH
11692: LD_INT 12
11694: PUSH
11695: LD_INT 15
11697: PUSH
11698: LD_INT 16
11700: PUSH
11701: LD_INT 22
11703: PUSH
11704: LD_INT 26
11706: PUSH
11707: LD_INT 36
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: PUSH
11722: LD_INT 101
11724: PUSH
11725: LD_INT 102
11727: PUSH
11728: LD_INT 105
11730: PUSH
11731: LD_INT 106
11733: PUSH
11734: LD_INT 108
11736: PUSH
11737: LD_INT 116
11739: PUSH
11740: LD_INT 117
11742: PUSH
11743: LD_INT 118
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: ST_TO_ADDR
11760: GO 14647
11762: LD_INT 4
11764: DOUBLE
11765: EQUAL
11766: IFTRUE 11770
11768: GO 11866
11770: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11771: LD_ADDR_VAR 0 2
11775: PUSH
11776: LD_INT 2
11778: PUSH
11779: LD_INT 4
11781: PUSH
11782: LD_INT 5
11784: PUSH
11785: LD_INT 8
11787: PUSH
11788: LD_INT 11
11790: PUSH
11791: LD_INT 12
11793: PUSH
11794: LD_INT 15
11796: PUSH
11797: LD_INT 16
11799: PUSH
11800: LD_INT 22
11802: PUSH
11803: LD_INT 23
11805: PUSH
11806: LD_INT 26
11808: PUSH
11809: LD_INT 36
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 101
11828: PUSH
11829: LD_INT 102
11831: PUSH
11832: LD_INT 105
11834: PUSH
11835: LD_INT 106
11837: PUSH
11838: LD_INT 108
11840: PUSH
11841: LD_INT 116
11843: PUSH
11844: LD_INT 117
11846: PUSH
11847: LD_INT 118
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: ST_TO_ADDR
11864: GO 14647
11866: LD_INT 5
11868: DOUBLE
11869: EQUAL
11870: IFTRUE 11874
11872: GO 11986
11874: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11875: LD_ADDR_VAR 0 2
11879: PUSH
11880: LD_INT 2
11882: PUSH
11883: LD_INT 4
11885: PUSH
11886: LD_INT 5
11888: PUSH
11889: LD_INT 6
11891: PUSH
11892: LD_INT 8
11894: PUSH
11895: LD_INT 11
11897: PUSH
11898: LD_INT 12
11900: PUSH
11901: LD_INT 15
11903: PUSH
11904: LD_INT 16
11906: PUSH
11907: LD_INT 22
11909: PUSH
11910: LD_INT 23
11912: PUSH
11913: LD_INT 25
11915: PUSH
11916: LD_INT 26
11918: PUSH
11919: LD_INT 36
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 101
11940: PUSH
11941: LD_INT 102
11943: PUSH
11944: LD_INT 105
11946: PUSH
11947: LD_INT 106
11949: PUSH
11950: LD_INT 108
11952: PUSH
11953: LD_INT 109
11955: PUSH
11956: LD_INT 112
11958: PUSH
11959: LD_INT 116
11961: PUSH
11962: LD_INT 117
11964: PUSH
11965: LD_INT 118
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: ST_TO_ADDR
11984: GO 14647
11986: LD_INT 6
11988: DOUBLE
11989: EQUAL
11990: IFTRUE 11994
11992: GO 12126
11994: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11995: LD_ADDR_VAR 0 2
11999: PUSH
12000: LD_INT 2
12002: PUSH
12003: LD_INT 4
12005: PUSH
12006: LD_INT 5
12008: PUSH
12009: LD_INT 6
12011: PUSH
12012: LD_INT 8
12014: PUSH
12015: LD_INT 11
12017: PUSH
12018: LD_INT 12
12020: PUSH
12021: LD_INT 15
12023: PUSH
12024: LD_INT 16
12026: PUSH
12027: LD_INT 20
12029: PUSH
12030: LD_INT 21
12032: PUSH
12033: LD_INT 22
12035: PUSH
12036: LD_INT 23
12038: PUSH
12039: LD_INT 25
12041: PUSH
12042: LD_INT 26
12044: PUSH
12045: LD_INT 30
12047: PUSH
12048: LD_INT 31
12050: PUSH
12051: LD_INT 32
12053: PUSH
12054: LD_INT 36
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 101
12080: PUSH
12081: LD_INT 102
12083: PUSH
12084: LD_INT 105
12086: PUSH
12087: LD_INT 106
12089: PUSH
12090: LD_INT 108
12092: PUSH
12093: LD_INT 109
12095: PUSH
12096: LD_INT 112
12098: PUSH
12099: LD_INT 116
12101: PUSH
12102: LD_INT 117
12104: PUSH
12105: LD_INT 118
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: ST_TO_ADDR
12124: GO 14647
12126: LD_INT 7
12128: DOUBLE
12129: EQUAL
12130: IFTRUE 12134
12132: GO 12246
12134: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12135: LD_ADDR_VAR 0 2
12139: PUSH
12140: LD_INT 2
12142: PUSH
12143: LD_INT 4
12145: PUSH
12146: LD_INT 5
12148: PUSH
12149: LD_INT 7
12151: PUSH
12152: LD_INT 11
12154: PUSH
12155: LD_INT 12
12157: PUSH
12158: LD_INT 15
12160: PUSH
12161: LD_INT 16
12163: PUSH
12164: LD_INT 20
12166: PUSH
12167: LD_INT 21
12169: PUSH
12170: LD_INT 22
12172: PUSH
12173: LD_INT 23
12175: PUSH
12176: LD_INT 25
12178: PUSH
12179: LD_INT 26
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: PUSH
12198: LD_INT 101
12200: PUSH
12201: LD_INT 102
12203: PUSH
12204: LD_INT 103
12206: PUSH
12207: LD_INT 105
12209: PUSH
12210: LD_INT 106
12212: PUSH
12213: LD_INT 108
12215: PUSH
12216: LD_INT 112
12218: PUSH
12219: LD_INT 116
12221: PUSH
12222: LD_INT 117
12224: PUSH
12225: LD_INT 118
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: ST_TO_ADDR
12244: GO 14647
12246: LD_INT 8
12248: DOUBLE
12249: EQUAL
12250: IFTRUE 12254
12252: GO 12394
12254: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12255: LD_ADDR_VAR 0 2
12259: PUSH
12260: LD_INT 2
12262: PUSH
12263: LD_INT 4
12265: PUSH
12266: LD_INT 5
12268: PUSH
12269: LD_INT 6
12271: PUSH
12272: LD_INT 7
12274: PUSH
12275: LD_INT 8
12277: PUSH
12278: LD_INT 11
12280: PUSH
12281: LD_INT 12
12283: PUSH
12284: LD_INT 15
12286: PUSH
12287: LD_INT 16
12289: PUSH
12290: LD_INT 20
12292: PUSH
12293: LD_INT 21
12295: PUSH
12296: LD_INT 22
12298: PUSH
12299: LD_INT 23
12301: PUSH
12302: LD_INT 25
12304: PUSH
12305: LD_INT 26
12307: PUSH
12308: LD_INT 30
12310: PUSH
12311: LD_INT 31
12313: PUSH
12314: LD_INT 32
12316: PUSH
12317: LD_INT 36
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 101
12344: PUSH
12345: LD_INT 102
12347: PUSH
12348: LD_INT 103
12350: PUSH
12351: LD_INT 105
12353: PUSH
12354: LD_INT 106
12356: PUSH
12357: LD_INT 108
12359: PUSH
12360: LD_INT 109
12362: PUSH
12363: LD_INT 112
12365: PUSH
12366: LD_INT 116
12368: PUSH
12369: LD_INT 117
12371: PUSH
12372: LD_INT 118
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: ST_TO_ADDR
12392: GO 14647
12394: LD_INT 9
12396: DOUBLE
12397: EQUAL
12398: IFTRUE 12402
12400: GO 12550
12402: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12403: LD_ADDR_VAR 0 2
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: LD_INT 4
12413: PUSH
12414: LD_INT 5
12416: PUSH
12417: LD_INT 6
12419: PUSH
12420: LD_INT 7
12422: PUSH
12423: LD_INT 8
12425: PUSH
12426: LD_INT 11
12428: PUSH
12429: LD_INT 12
12431: PUSH
12432: LD_INT 15
12434: PUSH
12435: LD_INT 16
12437: PUSH
12438: LD_INT 20
12440: PUSH
12441: LD_INT 21
12443: PUSH
12444: LD_INT 22
12446: PUSH
12447: LD_INT 23
12449: PUSH
12450: LD_INT 25
12452: PUSH
12453: LD_INT 26
12455: PUSH
12456: LD_INT 28
12458: PUSH
12459: LD_INT 30
12461: PUSH
12462: LD_INT 31
12464: PUSH
12465: LD_INT 32
12467: PUSH
12468: LD_INT 36
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 101
12496: PUSH
12497: LD_INT 102
12499: PUSH
12500: LD_INT 103
12502: PUSH
12503: LD_INT 105
12505: PUSH
12506: LD_INT 106
12508: PUSH
12509: LD_INT 108
12511: PUSH
12512: LD_INT 109
12514: PUSH
12515: LD_INT 112
12517: PUSH
12518: LD_INT 114
12520: PUSH
12521: LD_INT 116
12523: PUSH
12524: LD_INT 117
12526: PUSH
12527: LD_INT 118
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: ST_TO_ADDR
12548: GO 14647
12550: LD_INT 10
12552: DOUBLE
12553: EQUAL
12554: IFTRUE 12558
12556: GO 12754
12558: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12559: LD_ADDR_VAR 0 2
12563: PUSH
12564: LD_INT 2
12566: PUSH
12567: LD_INT 4
12569: PUSH
12570: LD_INT 5
12572: PUSH
12573: LD_INT 6
12575: PUSH
12576: LD_INT 7
12578: PUSH
12579: LD_INT 8
12581: PUSH
12582: LD_INT 9
12584: PUSH
12585: LD_INT 10
12587: PUSH
12588: LD_INT 11
12590: PUSH
12591: LD_INT 12
12593: PUSH
12594: LD_INT 13
12596: PUSH
12597: LD_INT 14
12599: PUSH
12600: LD_INT 15
12602: PUSH
12603: LD_INT 16
12605: PUSH
12606: LD_INT 17
12608: PUSH
12609: LD_INT 18
12611: PUSH
12612: LD_INT 19
12614: PUSH
12615: LD_INT 20
12617: PUSH
12618: LD_INT 21
12620: PUSH
12621: LD_INT 22
12623: PUSH
12624: LD_INT 23
12626: PUSH
12627: LD_INT 24
12629: PUSH
12630: LD_INT 25
12632: PUSH
12633: LD_INT 26
12635: PUSH
12636: LD_INT 28
12638: PUSH
12639: LD_INT 30
12641: PUSH
12642: LD_INT 31
12644: PUSH
12645: LD_INT 32
12647: PUSH
12648: LD_INT 36
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: PUSH
12682: LD_INT 101
12684: PUSH
12685: LD_INT 102
12687: PUSH
12688: LD_INT 103
12690: PUSH
12691: LD_INT 104
12693: PUSH
12694: LD_INT 105
12696: PUSH
12697: LD_INT 106
12699: PUSH
12700: LD_INT 107
12702: PUSH
12703: LD_INT 108
12705: PUSH
12706: LD_INT 109
12708: PUSH
12709: LD_INT 110
12711: PUSH
12712: LD_INT 111
12714: PUSH
12715: LD_INT 112
12717: PUSH
12718: LD_INT 114
12720: PUSH
12721: LD_INT 116
12723: PUSH
12724: LD_INT 117
12726: PUSH
12727: LD_INT 118
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: ST_TO_ADDR
12752: GO 14647
12754: LD_INT 11
12756: DOUBLE
12757: EQUAL
12758: IFTRUE 12762
12760: GO 12966
12762: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12763: LD_ADDR_VAR 0 2
12767: PUSH
12768: LD_INT 2
12770: PUSH
12771: LD_INT 3
12773: PUSH
12774: LD_INT 4
12776: PUSH
12777: LD_INT 5
12779: PUSH
12780: LD_INT 6
12782: PUSH
12783: LD_INT 7
12785: PUSH
12786: LD_INT 8
12788: PUSH
12789: LD_INT 9
12791: PUSH
12792: LD_INT 10
12794: PUSH
12795: LD_INT 11
12797: PUSH
12798: LD_INT 12
12800: PUSH
12801: LD_INT 13
12803: PUSH
12804: LD_INT 14
12806: PUSH
12807: LD_INT 15
12809: PUSH
12810: LD_INT 16
12812: PUSH
12813: LD_INT 17
12815: PUSH
12816: LD_INT 18
12818: PUSH
12819: LD_INT 19
12821: PUSH
12822: LD_INT 20
12824: PUSH
12825: LD_INT 21
12827: PUSH
12828: LD_INT 22
12830: PUSH
12831: LD_INT 23
12833: PUSH
12834: LD_INT 24
12836: PUSH
12837: LD_INT 25
12839: PUSH
12840: LD_INT 26
12842: PUSH
12843: LD_INT 28
12845: PUSH
12846: LD_INT 30
12848: PUSH
12849: LD_INT 31
12851: PUSH
12852: LD_INT 32
12854: PUSH
12855: LD_INT 34
12857: PUSH
12858: LD_INT 36
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: PUSH
12894: LD_INT 101
12896: PUSH
12897: LD_INT 102
12899: PUSH
12900: LD_INT 103
12902: PUSH
12903: LD_INT 104
12905: PUSH
12906: LD_INT 105
12908: PUSH
12909: LD_INT 106
12911: PUSH
12912: LD_INT 107
12914: PUSH
12915: LD_INT 108
12917: PUSH
12918: LD_INT 109
12920: PUSH
12921: LD_INT 110
12923: PUSH
12924: LD_INT 111
12926: PUSH
12927: LD_INT 112
12929: PUSH
12930: LD_INT 114
12932: PUSH
12933: LD_INT 116
12935: PUSH
12936: LD_INT 117
12938: PUSH
12939: LD_INT 118
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: ST_TO_ADDR
12964: GO 14647
12966: LD_INT 12
12968: DOUBLE
12969: EQUAL
12970: IFTRUE 12974
12972: GO 13194
12974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12975: LD_ADDR_VAR 0 2
12979: PUSH
12980: LD_INT 1
12982: PUSH
12983: LD_INT 2
12985: PUSH
12986: LD_INT 3
12988: PUSH
12989: LD_INT 4
12991: PUSH
12992: LD_INT 5
12994: PUSH
12995: LD_INT 6
12997: PUSH
12998: LD_INT 7
13000: PUSH
13001: LD_INT 8
13003: PUSH
13004: LD_INT 9
13006: PUSH
13007: LD_INT 10
13009: PUSH
13010: LD_INT 11
13012: PUSH
13013: LD_INT 12
13015: PUSH
13016: LD_INT 13
13018: PUSH
13019: LD_INT 14
13021: PUSH
13022: LD_INT 15
13024: PUSH
13025: LD_INT 16
13027: PUSH
13028: LD_INT 17
13030: PUSH
13031: LD_INT 18
13033: PUSH
13034: LD_INT 19
13036: PUSH
13037: LD_INT 20
13039: PUSH
13040: LD_INT 21
13042: PUSH
13043: LD_INT 22
13045: PUSH
13046: LD_INT 23
13048: PUSH
13049: LD_INT 24
13051: PUSH
13052: LD_INT 25
13054: PUSH
13055: LD_INT 26
13057: PUSH
13058: LD_INT 27
13060: PUSH
13061: LD_INT 28
13063: PUSH
13064: LD_INT 30
13066: PUSH
13067: LD_INT 31
13069: PUSH
13070: LD_INT 32
13072: PUSH
13073: LD_INT 33
13075: PUSH
13076: LD_INT 34
13078: PUSH
13079: LD_INT 36
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: PUSH
13118: LD_INT 101
13120: PUSH
13121: LD_INT 102
13123: PUSH
13124: LD_INT 103
13126: PUSH
13127: LD_INT 104
13129: PUSH
13130: LD_INT 105
13132: PUSH
13133: LD_INT 106
13135: PUSH
13136: LD_INT 107
13138: PUSH
13139: LD_INT 108
13141: PUSH
13142: LD_INT 109
13144: PUSH
13145: LD_INT 110
13147: PUSH
13148: LD_INT 111
13150: PUSH
13151: LD_INT 112
13153: PUSH
13154: LD_INT 113
13156: PUSH
13157: LD_INT 114
13159: PUSH
13160: LD_INT 116
13162: PUSH
13163: LD_INT 117
13165: PUSH
13166: LD_INT 118
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: ST_TO_ADDR
13192: GO 14647
13194: LD_INT 13
13196: DOUBLE
13197: EQUAL
13198: IFTRUE 13202
13200: GO 13410
13202: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13203: LD_ADDR_VAR 0 2
13207: PUSH
13208: LD_INT 1
13210: PUSH
13211: LD_INT 2
13213: PUSH
13214: LD_INT 3
13216: PUSH
13217: LD_INT 4
13219: PUSH
13220: LD_INT 5
13222: PUSH
13223: LD_INT 8
13225: PUSH
13226: LD_INT 9
13228: PUSH
13229: LD_INT 10
13231: PUSH
13232: LD_INT 11
13234: PUSH
13235: LD_INT 12
13237: PUSH
13238: LD_INT 14
13240: PUSH
13241: LD_INT 15
13243: PUSH
13244: LD_INT 16
13246: PUSH
13247: LD_INT 17
13249: PUSH
13250: LD_INT 18
13252: PUSH
13253: LD_INT 19
13255: PUSH
13256: LD_INT 20
13258: PUSH
13259: LD_INT 21
13261: PUSH
13262: LD_INT 22
13264: PUSH
13265: LD_INT 23
13267: PUSH
13268: LD_INT 24
13270: PUSH
13271: LD_INT 25
13273: PUSH
13274: LD_INT 26
13276: PUSH
13277: LD_INT 27
13279: PUSH
13280: LD_INT 28
13282: PUSH
13283: LD_INT 30
13285: PUSH
13286: LD_INT 31
13288: PUSH
13289: LD_INT 32
13291: PUSH
13292: LD_INT 33
13294: PUSH
13295: LD_INT 34
13297: PUSH
13298: LD_INT 36
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: PUSH
13334: LD_INT 101
13336: PUSH
13337: LD_INT 102
13339: PUSH
13340: LD_INT 103
13342: PUSH
13343: LD_INT 104
13345: PUSH
13346: LD_INT 105
13348: PUSH
13349: LD_INT 106
13351: PUSH
13352: LD_INT 107
13354: PUSH
13355: LD_INT 108
13357: PUSH
13358: LD_INT 109
13360: PUSH
13361: LD_INT 110
13363: PUSH
13364: LD_INT 111
13366: PUSH
13367: LD_INT 112
13369: PUSH
13370: LD_INT 113
13372: PUSH
13373: LD_INT 114
13375: PUSH
13376: LD_INT 116
13378: PUSH
13379: LD_INT 117
13381: PUSH
13382: LD_INT 118
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: ST_TO_ADDR
13408: GO 14647
13410: LD_INT 14
13412: DOUBLE
13413: EQUAL
13414: IFTRUE 13418
13416: GO 13642
13418: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13419: LD_ADDR_VAR 0 2
13423: PUSH
13424: LD_INT 1
13426: PUSH
13427: LD_INT 2
13429: PUSH
13430: LD_INT 3
13432: PUSH
13433: LD_INT 4
13435: PUSH
13436: LD_INT 5
13438: PUSH
13439: LD_INT 6
13441: PUSH
13442: LD_INT 7
13444: PUSH
13445: LD_INT 8
13447: PUSH
13448: LD_INT 9
13450: PUSH
13451: LD_INT 10
13453: PUSH
13454: LD_INT 11
13456: PUSH
13457: LD_INT 12
13459: PUSH
13460: LD_INT 13
13462: PUSH
13463: LD_INT 14
13465: PUSH
13466: LD_INT 15
13468: PUSH
13469: LD_INT 16
13471: PUSH
13472: LD_INT 17
13474: PUSH
13475: LD_INT 18
13477: PUSH
13478: LD_INT 19
13480: PUSH
13481: LD_INT 20
13483: PUSH
13484: LD_INT 21
13486: PUSH
13487: LD_INT 22
13489: PUSH
13490: LD_INT 23
13492: PUSH
13493: LD_INT 24
13495: PUSH
13496: LD_INT 25
13498: PUSH
13499: LD_INT 26
13501: PUSH
13502: LD_INT 27
13504: PUSH
13505: LD_INT 28
13507: PUSH
13508: LD_INT 29
13510: PUSH
13511: LD_INT 30
13513: PUSH
13514: LD_INT 31
13516: PUSH
13517: LD_INT 32
13519: PUSH
13520: LD_INT 33
13522: PUSH
13523: LD_INT 34
13525: PUSH
13526: LD_INT 36
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: PUSH
13566: LD_INT 101
13568: PUSH
13569: LD_INT 102
13571: PUSH
13572: LD_INT 103
13574: PUSH
13575: LD_INT 104
13577: PUSH
13578: LD_INT 105
13580: PUSH
13581: LD_INT 106
13583: PUSH
13584: LD_INT 107
13586: PUSH
13587: LD_INT 108
13589: PUSH
13590: LD_INT 109
13592: PUSH
13593: LD_INT 110
13595: PUSH
13596: LD_INT 111
13598: PUSH
13599: LD_INT 112
13601: PUSH
13602: LD_INT 113
13604: PUSH
13605: LD_INT 114
13607: PUSH
13608: LD_INT 116
13610: PUSH
13611: LD_INT 117
13613: PUSH
13614: LD_INT 118
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: ST_TO_ADDR
13640: GO 14647
13642: LD_INT 15
13644: DOUBLE
13645: EQUAL
13646: IFTRUE 13650
13648: GO 13874
13650: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13651: LD_ADDR_VAR 0 2
13655: PUSH
13656: LD_INT 1
13658: PUSH
13659: LD_INT 2
13661: PUSH
13662: LD_INT 3
13664: PUSH
13665: LD_INT 4
13667: PUSH
13668: LD_INT 5
13670: PUSH
13671: LD_INT 6
13673: PUSH
13674: LD_INT 7
13676: PUSH
13677: LD_INT 8
13679: PUSH
13680: LD_INT 9
13682: PUSH
13683: LD_INT 10
13685: PUSH
13686: LD_INT 11
13688: PUSH
13689: LD_INT 12
13691: PUSH
13692: LD_INT 13
13694: PUSH
13695: LD_INT 14
13697: PUSH
13698: LD_INT 15
13700: PUSH
13701: LD_INT 16
13703: PUSH
13704: LD_INT 17
13706: PUSH
13707: LD_INT 18
13709: PUSH
13710: LD_INT 19
13712: PUSH
13713: LD_INT 20
13715: PUSH
13716: LD_INT 21
13718: PUSH
13719: LD_INT 22
13721: PUSH
13722: LD_INT 23
13724: PUSH
13725: LD_INT 24
13727: PUSH
13728: LD_INT 25
13730: PUSH
13731: LD_INT 26
13733: PUSH
13734: LD_INT 27
13736: PUSH
13737: LD_INT 28
13739: PUSH
13740: LD_INT 29
13742: PUSH
13743: LD_INT 30
13745: PUSH
13746: LD_INT 31
13748: PUSH
13749: LD_INT 32
13751: PUSH
13752: LD_INT 33
13754: PUSH
13755: LD_INT 34
13757: PUSH
13758: LD_INT 36
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: PUSH
13798: LD_INT 101
13800: PUSH
13801: LD_INT 102
13803: PUSH
13804: LD_INT 103
13806: PUSH
13807: LD_INT 104
13809: PUSH
13810: LD_INT 105
13812: PUSH
13813: LD_INT 106
13815: PUSH
13816: LD_INT 107
13818: PUSH
13819: LD_INT 108
13821: PUSH
13822: LD_INT 109
13824: PUSH
13825: LD_INT 110
13827: PUSH
13828: LD_INT 111
13830: PUSH
13831: LD_INT 112
13833: PUSH
13834: LD_INT 113
13836: PUSH
13837: LD_INT 114
13839: PUSH
13840: LD_INT 116
13842: PUSH
13843: LD_INT 117
13845: PUSH
13846: LD_INT 118
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: ST_TO_ADDR
13872: GO 14647
13874: LD_INT 16
13876: DOUBLE
13877: EQUAL
13878: IFTRUE 13882
13880: GO 14018
13882: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13883: LD_ADDR_VAR 0 2
13887: PUSH
13888: LD_INT 2
13890: PUSH
13891: LD_INT 4
13893: PUSH
13894: LD_INT 5
13896: PUSH
13897: LD_INT 7
13899: PUSH
13900: LD_INT 11
13902: PUSH
13903: LD_INT 12
13905: PUSH
13906: LD_INT 15
13908: PUSH
13909: LD_INT 16
13911: PUSH
13912: LD_INT 20
13914: PUSH
13915: LD_INT 21
13917: PUSH
13918: LD_INT 22
13920: PUSH
13921: LD_INT 23
13923: PUSH
13924: LD_INT 25
13926: PUSH
13927: LD_INT 26
13929: PUSH
13930: LD_INT 30
13932: PUSH
13933: LD_INT 31
13935: PUSH
13936: LD_INT 32
13938: PUSH
13939: LD_INT 33
13941: PUSH
13942: LD_INT 34
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: PUSH
13966: LD_INT 101
13968: PUSH
13969: LD_INT 102
13971: PUSH
13972: LD_INT 103
13974: PUSH
13975: LD_INT 106
13977: PUSH
13978: LD_INT 108
13980: PUSH
13981: LD_INT 112
13983: PUSH
13984: LD_INT 113
13986: PUSH
13987: LD_INT 114
13989: PUSH
13990: LD_INT 116
13992: PUSH
13993: LD_INT 117
13995: PUSH
13996: LD_INT 118
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: ST_TO_ADDR
14016: GO 14647
14018: LD_INT 17
14020: DOUBLE
14021: EQUAL
14022: IFTRUE 14026
14024: GO 14250
14026: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14027: LD_ADDR_VAR 0 2
14031: PUSH
14032: LD_INT 1
14034: PUSH
14035: LD_INT 2
14037: PUSH
14038: LD_INT 3
14040: PUSH
14041: LD_INT 4
14043: PUSH
14044: LD_INT 5
14046: PUSH
14047: LD_INT 6
14049: PUSH
14050: LD_INT 7
14052: PUSH
14053: LD_INT 8
14055: PUSH
14056: LD_INT 9
14058: PUSH
14059: LD_INT 10
14061: PUSH
14062: LD_INT 11
14064: PUSH
14065: LD_INT 12
14067: PUSH
14068: LD_INT 13
14070: PUSH
14071: LD_INT 14
14073: PUSH
14074: LD_INT 15
14076: PUSH
14077: LD_INT 16
14079: PUSH
14080: LD_INT 17
14082: PUSH
14083: LD_INT 18
14085: PUSH
14086: LD_INT 19
14088: PUSH
14089: LD_INT 20
14091: PUSH
14092: LD_INT 21
14094: PUSH
14095: LD_INT 22
14097: PUSH
14098: LD_INT 23
14100: PUSH
14101: LD_INT 24
14103: PUSH
14104: LD_INT 25
14106: PUSH
14107: LD_INT 26
14109: PUSH
14110: LD_INT 27
14112: PUSH
14113: LD_INT 28
14115: PUSH
14116: LD_INT 29
14118: PUSH
14119: LD_INT 30
14121: PUSH
14122: LD_INT 31
14124: PUSH
14125: LD_INT 32
14127: PUSH
14128: LD_INT 33
14130: PUSH
14131: LD_INT 34
14133: PUSH
14134: LD_INT 36
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 101
14176: PUSH
14177: LD_INT 102
14179: PUSH
14180: LD_INT 103
14182: PUSH
14183: LD_INT 104
14185: PUSH
14186: LD_INT 105
14188: PUSH
14189: LD_INT 106
14191: PUSH
14192: LD_INT 107
14194: PUSH
14195: LD_INT 108
14197: PUSH
14198: LD_INT 109
14200: PUSH
14201: LD_INT 110
14203: PUSH
14204: LD_INT 111
14206: PUSH
14207: LD_INT 112
14209: PUSH
14210: LD_INT 113
14212: PUSH
14213: LD_INT 114
14215: PUSH
14216: LD_INT 116
14218: PUSH
14219: LD_INT 117
14221: PUSH
14222: LD_INT 118
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: ST_TO_ADDR
14248: GO 14647
14250: LD_INT 18
14252: DOUBLE
14253: EQUAL
14254: IFTRUE 14258
14256: GO 14406
14258: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14259: LD_ADDR_VAR 0 2
14263: PUSH
14264: LD_INT 2
14266: PUSH
14267: LD_INT 4
14269: PUSH
14270: LD_INT 5
14272: PUSH
14273: LD_INT 7
14275: PUSH
14276: LD_INT 11
14278: PUSH
14279: LD_INT 12
14281: PUSH
14282: LD_INT 15
14284: PUSH
14285: LD_INT 16
14287: PUSH
14288: LD_INT 20
14290: PUSH
14291: LD_INT 21
14293: PUSH
14294: LD_INT 22
14296: PUSH
14297: LD_INT 23
14299: PUSH
14300: LD_INT 25
14302: PUSH
14303: LD_INT 26
14305: PUSH
14306: LD_INT 30
14308: PUSH
14309: LD_INT 31
14311: PUSH
14312: LD_INT 32
14314: PUSH
14315: LD_INT 33
14317: PUSH
14318: LD_INT 34
14320: PUSH
14321: LD_INT 35
14323: PUSH
14324: LD_INT 36
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 101
14352: PUSH
14353: LD_INT 102
14355: PUSH
14356: LD_INT 103
14358: PUSH
14359: LD_INT 106
14361: PUSH
14362: LD_INT 108
14364: PUSH
14365: LD_INT 112
14367: PUSH
14368: LD_INT 113
14370: PUSH
14371: LD_INT 114
14373: PUSH
14374: LD_INT 115
14376: PUSH
14377: LD_INT 116
14379: PUSH
14380: LD_INT 117
14382: PUSH
14383: LD_INT 118
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: ST_TO_ADDR
14404: GO 14647
14406: LD_INT 19
14408: DOUBLE
14409: EQUAL
14410: IFTRUE 14414
14412: GO 14646
14414: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14415: LD_ADDR_VAR 0 2
14419: PUSH
14420: LD_INT 1
14422: PUSH
14423: LD_INT 2
14425: PUSH
14426: LD_INT 3
14428: PUSH
14429: LD_INT 4
14431: PUSH
14432: LD_INT 5
14434: PUSH
14435: LD_INT 6
14437: PUSH
14438: LD_INT 7
14440: PUSH
14441: LD_INT 8
14443: PUSH
14444: LD_INT 9
14446: PUSH
14447: LD_INT 10
14449: PUSH
14450: LD_INT 11
14452: PUSH
14453: LD_INT 12
14455: PUSH
14456: LD_INT 13
14458: PUSH
14459: LD_INT 14
14461: PUSH
14462: LD_INT 15
14464: PUSH
14465: LD_INT 16
14467: PUSH
14468: LD_INT 17
14470: PUSH
14471: LD_INT 18
14473: PUSH
14474: LD_INT 19
14476: PUSH
14477: LD_INT 20
14479: PUSH
14480: LD_INT 21
14482: PUSH
14483: LD_INT 22
14485: PUSH
14486: LD_INT 23
14488: PUSH
14489: LD_INT 24
14491: PUSH
14492: LD_INT 25
14494: PUSH
14495: LD_INT 26
14497: PUSH
14498: LD_INT 27
14500: PUSH
14501: LD_INT 28
14503: PUSH
14504: LD_INT 29
14506: PUSH
14507: LD_INT 30
14509: PUSH
14510: LD_INT 31
14512: PUSH
14513: LD_INT 32
14515: PUSH
14516: LD_INT 33
14518: PUSH
14519: LD_INT 34
14521: PUSH
14522: LD_INT 35
14524: PUSH
14525: LD_INT 36
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 101
14568: PUSH
14569: LD_INT 102
14571: PUSH
14572: LD_INT 103
14574: PUSH
14575: LD_INT 104
14577: PUSH
14578: LD_INT 105
14580: PUSH
14581: LD_INT 106
14583: PUSH
14584: LD_INT 107
14586: PUSH
14587: LD_INT 108
14589: PUSH
14590: LD_INT 109
14592: PUSH
14593: LD_INT 110
14595: PUSH
14596: LD_INT 111
14598: PUSH
14599: LD_INT 112
14601: PUSH
14602: LD_INT 113
14604: PUSH
14605: LD_INT 114
14607: PUSH
14608: LD_INT 115
14610: PUSH
14611: LD_INT 116
14613: PUSH
14614: LD_INT 117
14616: PUSH
14617: LD_INT 118
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: ST_TO_ADDR
14644: GO 14647
14646: POP
// end else
14647: GO 14878
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14649: LD_ADDR_VAR 0 2
14653: PUSH
14654: LD_INT 1
14656: PUSH
14657: LD_INT 2
14659: PUSH
14660: LD_INT 3
14662: PUSH
14663: LD_INT 4
14665: PUSH
14666: LD_INT 5
14668: PUSH
14669: LD_INT 6
14671: PUSH
14672: LD_INT 7
14674: PUSH
14675: LD_INT 8
14677: PUSH
14678: LD_INT 9
14680: PUSH
14681: LD_INT 10
14683: PUSH
14684: LD_INT 11
14686: PUSH
14687: LD_INT 12
14689: PUSH
14690: LD_INT 13
14692: PUSH
14693: LD_INT 14
14695: PUSH
14696: LD_INT 15
14698: PUSH
14699: LD_INT 16
14701: PUSH
14702: LD_INT 17
14704: PUSH
14705: LD_INT 18
14707: PUSH
14708: LD_INT 19
14710: PUSH
14711: LD_INT 20
14713: PUSH
14714: LD_INT 21
14716: PUSH
14717: LD_INT 22
14719: PUSH
14720: LD_INT 23
14722: PUSH
14723: LD_INT 24
14725: PUSH
14726: LD_INT 25
14728: PUSH
14729: LD_INT 26
14731: PUSH
14732: LD_INT 27
14734: PUSH
14735: LD_INT 28
14737: PUSH
14738: LD_INT 29
14740: PUSH
14741: LD_INT 30
14743: PUSH
14744: LD_INT 31
14746: PUSH
14747: LD_INT 32
14749: PUSH
14750: LD_INT 33
14752: PUSH
14753: LD_INT 34
14755: PUSH
14756: LD_INT 35
14758: PUSH
14759: LD_INT 36
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 101
14802: PUSH
14803: LD_INT 102
14805: PUSH
14806: LD_INT 103
14808: PUSH
14809: LD_INT 104
14811: PUSH
14812: LD_INT 105
14814: PUSH
14815: LD_INT 106
14817: PUSH
14818: LD_INT 107
14820: PUSH
14821: LD_INT 108
14823: PUSH
14824: LD_INT 109
14826: PUSH
14827: LD_INT 110
14829: PUSH
14830: LD_INT 111
14832: PUSH
14833: LD_INT 112
14835: PUSH
14836: LD_INT 113
14838: PUSH
14839: LD_INT 114
14841: PUSH
14842: LD_INT 115
14844: PUSH
14845: LD_INT 116
14847: PUSH
14848: LD_INT 117
14850: PUSH
14851: LD_INT 118
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: ST_TO_ADDR
// if result then
14878: LD_VAR 0 2
14882: IFFALSE 15668
// begin normal :=  ;
14884: LD_ADDR_VAR 0 5
14888: PUSH
14889: LD_STRING 
14891: ST_TO_ADDR
// hardcore :=  ;
14892: LD_ADDR_VAR 0 6
14896: PUSH
14897: LD_STRING 
14899: ST_TO_ADDR
// active :=  ;
14900: LD_ADDR_VAR 0 7
14904: PUSH
14905: LD_STRING 
14907: ST_TO_ADDR
// for i = 1 to normalCounter do
14908: LD_ADDR_VAR 0 8
14912: PUSH
14913: DOUBLE
14914: LD_INT 1
14916: DEC
14917: ST_TO_ADDR
14918: LD_EXP 44
14922: PUSH
14923: FOR_TO
14924: IFFALSE 15025
// begin tmp := 0 ;
14926: LD_ADDR_VAR 0 3
14930: PUSH
14931: LD_STRING 0
14933: ST_TO_ADDR
// if result [ 1 ] then
14934: LD_VAR 0 2
14938: PUSH
14939: LD_INT 1
14941: ARRAY
14942: IFFALSE 15007
// if result [ 1 ] [ 1 ] = i then
14944: LD_VAR 0 2
14948: PUSH
14949: LD_INT 1
14951: ARRAY
14952: PUSH
14953: LD_INT 1
14955: ARRAY
14956: PUSH
14957: LD_VAR 0 8
14961: EQUAL
14962: IFFALSE 15007
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14964: LD_ADDR_VAR 0 2
14968: PUSH
14969: LD_VAR 0 2
14973: PPUSH
14974: LD_INT 1
14976: PPUSH
14977: LD_VAR 0 2
14981: PUSH
14982: LD_INT 1
14984: ARRAY
14985: PPUSH
14986: LD_INT 1
14988: PPUSH
14989: CALL_OW 3
14993: PPUSH
14994: CALL_OW 1
14998: ST_TO_ADDR
// tmp := 1 ;
14999: LD_ADDR_VAR 0 3
15003: PUSH
15004: LD_STRING 1
15006: ST_TO_ADDR
// end ; normal := normal & tmp ;
15007: LD_ADDR_VAR 0 5
15011: PUSH
15012: LD_VAR 0 5
15016: PUSH
15017: LD_VAR 0 3
15021: STR
15022: ST_TO_ADDR
// end ;
15023: GO 14923
15025: POP
15026: POP
// for i = 1 to hardcoreCounter do
15027: LD_ADDR_VAR 0 8
15031: PUSH
15032: DOUBLE
15033: LD_INT 1
15035: DEC
15036: ST_TO_ADDR
15037: LD_EXP 45
15041: PUSH
15042: FOR_TO
15043: IFFALSE 15148
// begin tmp := 0 ;
15045: LD_ADDR_VAR 0 3
15049: PUSH
15050: LD_STRING 0
15052: ST_TO_ADDR
// if result [ 2 ] then
15053: LD_VAR 0 2
15057: PUSH
15058: LD_INT 2
15060: ARRAY
15061: IFFALSE 15130
// if result [ 2 ] [ 1 ] = 100 + i then
15063: LD_VAR 0 2
15067: PUSH
15068: LD_INT 2
15070: ARRAY
15071: PUSH
15072: LD_INT 1
15074: ARRAY
15075: PUSH
15076: LD_INT 100
15078: PUSH
15079: LD_VAR 0 8
15083: PLUS
15084: EQUAL
15085: IFFALSE 15130
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15087: LD_ADDR_VAR 0 2
15091: PUSH
15092: LD_VAR 0 2
15096: PPUSH
15097: LD_INT 2
15099: PPUSH
15100: LD_VAR 0 2
15104: PUSH
15105: LD_INT 2
15107: ARRAY
15108: PPUSH
15109: LD_INT 1
15111: PPUSH
15112: CALL_OW 3
15116: PPUSH
15117: CALL_OW 1
15121: ST_TO_ADDR
// tmp := 1 ;
15122: LD_ADDR_VAR 0 3
15126: PUSH
15127: LD_STRING 1
15129: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15130: LD_ADDR_VAR 0 6
15134: PUSH
15135: LD_VAR 0 6
15139: PUSH
15140: LD_VAR 0 3
15144: STR
15145: ST_TO_ADDR
// end ;
15146: GO 15042
15148: POP
15149: POP
// if isGameLoad then
15150: LD_VAR 0 1
15154: IFFALSE 15629
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15156: LD_ADDR_VAR 0 4
15160: PUSH
15161: LD_EXP 48
15165: PUSH
15166: LD_EXP 47
15170: PUSH
15171: LD_EXP 49
15175: PUSH
15176: LD_EXP 46
15180: PUSH
15181: LD_EXP 50
15185: PUSH
15186: LD_EXP 51
15190: PUSH
15191: LD_EXP 52
15195: PUSH
15196: LD_EXP 53
15200: PUSH
15201: LD_EXP 54
15205: PUSH
15206: LD_EXP 55
15210: PUSH
15211: LD_EXP 56
15215: PUSH
15216: LD_EXP 57
15220: PUSH
15221: LD_EXP 58
15225: PUSH
15226: LD_EXP 59
15230: PUSH
15231: LD_EXP 67
15235: PUSH
15236: LD_EXP 68
15240: PUSH
15241: LD_EXP 69
15245: PUSH
15246: LD_EXP 70
15250: PUSH
15251: LD_EXP 72
15255: PUSH
15256: LD_EXP 73
15260: PUSH
15261: LD_EXP 74
15265: PUSH
15266: LD_EXP 77
15270: PUSH
15271: LD_EXP 79
15275: PUSH
15276: LD_EXP 80
15280: PUSH
15281: LD_EXP 81
15285: PUSH
15286: LD_EXP 83
15290: PUSH
15291: LD_EXP 84
15295: PUSH
15296: LD_EXP 87
15300: PUSH
15301: LD_EXP 88
15305: PUSH
15306: LD_EXP 89
15310: PUSH
15311: LD_EXP 90
15315: PUSH
15316: LD_EXP 91
15320: PUSH
15321: LD_EXP 92
15325: PUSH
15326: LD_EXP 93
15330: PUSH
15331: LD_EXP 94
15335: PUSH
15336: LD_EXP 95
15340: PUSH
15341: LD_EXP 60
15345: PUSH
15346: LD_EXP 61
15350: PUSH
15351: LD_EXP 64
15355: PUSH
15356: LD_EXP 65
15360: PUSH
15361: LD_EXP 66
15365: PUSH
15366: LD_EXP 62
15370: PUSH
15371: LD_EXP 63
15375: PUSH
15376: LD_EXP 71
15380: PUSH
15381: LD_EXP 75
15385: PUSH
15386: LD_EXP 76
15390: PUSH
15391: LD_EXP 78
15395: PUSH
15396: LD_EXP 82
15400: PUSH
15401: LD_EXP 85
15405: PUSH
15406: LD_EXP 86
15410: PUSH
15411: LD_EXP 96
15415: PUSH
15416: LD_EXP 97
15420: PUSH
15421: LD_EXP 98
15425: PUSH
15426: LD_EXP 99
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: ST_TO_ADDR
// tmp :=  ;
15487: LD_ADDR_VAR 0 3
15491: PUSH
15492: LD_STRING 
15494: ST_TO_ADDR
// for i = 1 to normalCounter do
15495: LD_ADDR_VAR 0 8
15499: PUSH
15500: DOUBLE
15501: LD_INT 1
15503: DEC
15504: ST_TO_ADDR
15505: LD_EXP 44
15509: PUSH
15510: FOR_TO
15511: IFFALSE 15547
// begin if flags [ i ] then
15513: LD_VAR 0 4
15517: PUSH
15518: LD_VAR 0 8
15522: ARRAY
15523: IFFALSE 15545
// tmp := tmp & i & ; ;
15525: LD_ADDR_VAR 0 3
15529: PUSH
15530: LD_VAR 0 3
15534: PUSH
15535: LD_VAR 0 8
15539: STR
15540: PUSH
15541: LD_STRING ;
15543: STR
15544: ST_TO_ADDR
// end ;
15545: GO 15510
15547: POP
15548: POP
// for i = 1 to hardcoreCounter do
15549: LD_ADDR_VAR 0 8
15553: PUSH
15554: DOUBLE
15555: LD_INT 1
15557: DEC
15558: ST_TO_ADDR
15559: LD_EXP 45
15563: PUSH
15564: FOR_TO
15565: IFFALSE 15611
// begin if flags [ normalCounter + i ] then
15567: LD_VAR 0 4
15571: PUSH
15572: LD_EXP 44
15576: PUSH
15577: LD_VAR 0 8
15581: PLUS
15582: ARRAY
15583: IFFALSE 15609
// tmp := tmp & ( 100 + i ) & ; ;
15585: LD_ADDR_VAR 0 3
15589: PUSH
15590: LD_VAR 0 3
15594: PUSH
15595: LD_INT 100
15597: PUSH
15598: LD_VAR 0 8
15602: PLUS
15603: STR
15604: PUSH
15605: LD_STRING ;
15607: STR
15608: ST_TO_ADDR
// end ;
15609: GO 15564
15611: POP
15612: POP
// if tmp then
15613: LD_VAR 0 3
15617: IFFALSE 15629
// active := tmp ;
15619: LD_ADDR_VAR 0 7
15623: PUSH
15624: LD_VAR 0 3
15628: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15629: LD_STRING getStreamItemsFromMission("
15631: PUSH
15632: LD_VAR 0 5
15636: STR
15637: PUSH
15638: LD_STRING ","
15640: STR
15641: PUSH
15642: LD_VAR 0 6
15646: STR
15647: PUSH
15648: LD_STRING ","
15650: STR
15651: PUSH
15652: LD_VAR 0 7
15656: STR
15657: PUSH
15658: LD_STRING ")
15660: STR
15661: PPUSH
15662: CALL_OW 559
// end else
15666: GO 15675
// ToLua ( getStreamItemsFromMission("","","") ) ;
15668: LD_STRING getStreamItemsFromMission("","","")
15670: PPUSH
15671: CALL_OW 559
// end ;
15675: LD_VAR 0 2
15679: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15680: LD_EXP 43
15684: PUSH
15685: LD_EXP 48
15689: AND
15690: IFFALSE 15814
15692: GO 15694
15694: DISABLE
15695: LD_INT 0
15697: PPUSH
15698: PPUSH
// begin enable ;
15699: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15700: LD_ADDR_VAR 0 2
15704: PUSH
15705: LD_INT 22
15707: PUSH
15708: LD_OWVAR 2
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 2
15719: PUSH
15720: LD_INT 34
15722: PUSH
15723: LD_INT 7
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 34
15732: PUSH
15733: LD_INT 45
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: LD_INT 34
15742: PUSH
15743: LD_INT 28
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 34
15752: PUSH
15753: LD_INT 47
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PPUSH
15771: CALL_OW 69
15775: ST_TO_ADDR
// if not tmp then
15776: LD_VAR 0 2
15780: NOT
15781: IFFALSE 15785
// exit ;
15783: GO 15814
// for i in tmp do
15785: LD_ADDR_VAR 0 1
15789: PUSH
15790: LD_VAR 0 2
15794: PUSH
15795: FOR_IN
15796: IFFALSE 15812
// begin SetLives ( i , 0 ) ;
15798: LD_VAR 0 1
15802: PPUSH
15803: LD_INT 0
15805: PPUSH
15806: CALL_OW 234
// end ;
15810: GO 15795
15812: POP
15813: POP
// end ;
15814: PPOPN 2
15816: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15817: LD_EXP 43
15821: PUSH
15822: LD_EXP 49
15826: AND
15827: IFFALSE 15911
15829: GO 15831
15831: DISABLE
15832: LD_INT 0
15834: PPUSH
15835: PPUSH
// begin enable ;
15836: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15837: LD_ADDR_VAR 0 2
15841: PUSH
15842: LD_INT 22
15844: PUSH
15845: LD_OWVAR 2
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 32
15856: PUSH
15857: LD_INT 3
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PPUSH
15868: CALL_OW 69
15872: ST_TO_ADDR
// if not tmp then
15873: LD_VAR 0 2
15877: NOT
15878: IFFALSE 15882
// exit ;
15880: GO 15911
// for i in tmp do
15882: LD_ADDR_VAR 0 1
15886: PUSH
15887: LD_VAR 0 2
15891: PUSH
15892: FOR_IN
15893: IFFALSE 15909
// begin SetLives ( i , 0 ) ;
15895: LD_VAR 0 1
15899: PPUSH
15900: LD_INT 0
15902: PPUSH
15903: CALL_OW 234
// end ;
15907: GO 15892
15909: POP
15910: POP
// end ;
15911: PPOPN 2
15913: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15914: LD_EXP 43
15918: PUSH
15919: LD_EXP 46
15923: AND
15924: IFFALSE 16017
15926: GO 15928
15928: DISABLE
15929: LD_INT 0
15931: PPUSH
// begin enable ;
15932: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15933: LD_ADDR_VAR 0 1
15937: PUSH
15938: LD_INT 22
15940: PUSH
15941: LD_OWVAR 2
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 2
15952: PUSH
15953: LD_INT 25
15955: PUSH
15956: LD_INT 5
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 25
15965: PUSH
15966: LD_INT 9
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 25
15975: PUSH
15976: LD_INT 8
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PPUSH
15993: CALL_OW 69
15997: PUSH
15998: FOR_IN
15999: IFFALSE 16015
// begin SetClass ( i , 1 ) ;
16001: LD_VAR 0 1
16005: PPUSH
16006: LD_INT 1
16008: PPUSH
16009: CALL_OW 336
// end ;
16013: GO 15998
16015: POP
16016: POP
// end ;
16017: PPOPN 1
16019: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16020: LD_EXP 43
16024: PUSH
16025: LD_EXP 47
16029: AND
16030: PUSH
16031: LD_OWVAR 65
16035: PUSH
16036: LD_INT 7
16038: LESS
16039: AND
16040: IFFALSE 16054
16042: GO 16044
16044: DISABLE
// begin enable ;
16045: ENABLE
// game_speed := 7 ;
16046: LD_ADDR_OWVAR 65
16050: PUSH
16051: LD_INT 7
16053: ST_TO_ADDR
// end ;
16054: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16055: LD_EXP 43
16059: PUSH
16060: LD_EXP 50
16064: AND
16065: IFFALSE 16267
16067: GO 16069
16069: DISABLE
16070: LD_INT 0
16072: PPUSH
16073: PPUSH
16074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16075: LD_ADDR_VAR 0 3
16079: PUSH
16080: LD_INT 81
16082: PUSH
16083: LD_OWVAR 2
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 21
16094: PUSH
16095: LD_INT 1
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PPUSH
16106: CALL_OW 69
16110: ST_TO_ADDR
// if not tmp then
16111: LD_VAR 0 3
16115: NOT
16116: IFFALSE 16120
// exit ;
16118: GO 16267
// if tmp > 5 then
16120: LD_VAR 0 3
16124: PUSH
16125: LD_INT 5
16127: GREATER
16128: IFFALSE 16140
// k := 5 else
16130: LD_ADDR_VAR 0 2
16134: PUSH
16135: LD_INT 5
16137: ST_TO_ADDR
16138: GO 16150
// k := tmp ;
16140: LD_ADDR_VAR 0 2
16144: PUSH
16145: LD_VAR 0 3
16149: ST_TO_ADDR
// for i := 1 to k do
16150: LD_ADDR_VAR 0 1
16154: PUSH
16155: DOUBLE
16156: LD_INT 1
16158: DEC
16159: ST_TO_ADDR
16160: LD_VAR 0 2
16164: PUSH
16165: FOR_TO
16166: IFFALSE 16265
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16168: LD_VAR 0 3
16172: PUSH
16173: LD_VAR 0 1
16177: ARRAY
16178: PPUSH
16179: LD_VAR 0 1
16183: PUSH
16184: LD_INT 4
16186: MOD
16187: PUSH
16188: LD_INT 1
16190: PLUS
16191: PPUSH
16192: CALL_OW 259
16196: PUSH
16197: LD_INT 10
16199: LESS
16200: IFFALSE 16263
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16202: LD_VAR 0 3
16206: PUSH
16207: LD_VAR 0 1
16211: ARRAY
16212: PPUSH
16213: LD_VAR 0 1
16217: PUSH
16218: LD_INT 4
16220: MOD
16221: PUSH
16222: LD_INT 1
16224: PLUS
16225: PPUSH
16226: LD_VAR 0 3
16230: PUSH
16231: LD_VAR 0 1
16235: ARRAY
16236: PPUSH
16237: LD_VAR 0 1
16241: PUSH
16242: LD_INT 4
16244: MOD
16245: PUSH
16246: LD_INT 1
16248: PLUS
16249: PPUSH
16250: CALL_OW 259
16254: PUSH
16255: LD_INT 1
16257: PLUS
16258: PPUSH
16259: CALL_OW 237
16263: GO 16165
16265: POP
16266: POP
// end ;
16267: PPOPN 3
16269: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16270: LD_EXP 43
16274: PUSH
16275: LD_EXP 51
16279: AND
16280: IFFALSE 16300
16282: GO 16284
16284: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16285: LD_INT 4
16287: PPUSH
16288: LD_OWVAR 2
16292: PPUSH
16293: LD_INT 0
16295: PPUSH
16296: CALL_OW 324
16300: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16301: LD_EXP 43
16305: PUSH
16306: LD_EXP 80
16310: AND
16311: IFFALSE 16331
16313: GO 16315
16315: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16316: LD_INT 19
16318: PPUSH
16319: LD_OWVAR 2
16323: PPUSH
16324: LD_INT 0
16326: PPUSH
16327: CALL_OW 324
16331: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16332: LD_EXP 43
16336: PUSH
16337: LD_EXP 52
16341: AND
16342: IFFALSE 16444
16344: GO 16346
16346: DISABLE
16347: LD_INT 0
16349: PPUSH
16350: PPUSH
// begin enable ;
16351: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16352: LD_ADDR_VAR 0 2
16356: PUSH
16357: LD_INT 22
16359: PUSH
16360: LD_OWVAR 2
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: LD_INT 34
16374: PUSH
16375: LD_INT 11
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PUSH
16382: LD_INT 34
16384: PUSH
16385: LD_INT 30
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: LIST
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PPUSH
16401: CALL_OW 69
16405: ST_TO_ADDR
// if not tmp then
16406: LD_VAR 0 2
16410: NOT
16411: IFFALSE 16415
// exit ;
16413: GO 16444
// for i in tmp do
16415: LD_ADDR_VAR 0 1
16419: PUSH
16420: LD_VAR 0 2
16424: PUSH
16425: FOR_IN
16426: IFFALSE 16442
// begin SetLives ( i , 0 ) ;
16428: LD_VAR 0 1
16432: PPUSH
16433: LD_INT 0
16435: PPUSH
16436: CALL_OW 234
// end ;
16440: GO 16425
16442: POP
16443: POP
// end ;
16444: PPOPN 2
16446: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16447: LD_EXP 43
16451: PUSH
16452: LD_EXP 53
16456: AND
16457: IFFALSE 16477
16459: GO 16461
16461: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16462: LD_INT 32
16464: PPUSH
16465: LD_OWVAR 2
16469: PPUSH
16470: LD_INT 0
16472: PPUSH
16473: CALL_OW 324
16477: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16478: LD_EXP 43
16482: PUSH
16483: LD_EXP 54
16487: AND
16488: IFFALSE 16669
16490: GO 16492
16492: DISABLE
16493: LD_INT 0
16495: PPUSH
16496: PPUSH
16497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16498: LD_ADDR_VAR 0 2
16502: PUSH
16503: LD_INT 22
16505: PUSH
16506: LD_OWVAR 2
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 33
16517: PUSH
16518: LD_INT 3
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PPUSH
16529: CALL_OW 69
16533: ST_TO_ADDR
// if not tmp then
16534: LD_VAR 0 2
16538: NOT
16539: IFFALSE 16543
// exit ;
16541: GO 16669
// side := 0 ;
16543: LD_ADDR_VAR 0 3
16547: PUSH
16548: LD_INT 0
16550: ST_TO_ADDR
// for i := 1 to 8 do
16551: LD_ADDR_VAR 0 1
16555: PUSH
16556: DOUBLE
16557: LD_INT 1
16559: DEC
16560: ST_TO_ADDR
16561: LD_INT 8
16563: PUSH
16564: FOR_TO
16565: IFFALSE 16613
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16567: LD_OWVAR 2
16571: PUSH
16572: LD_VAR 0 1
16576: NONEQUAL
16577: PUSH
16578: LD_OWVAR 2
16582: PPUSH
16583: LD_VAR 0 1
16587: PPUSH
16588: CALL_OW 81
16592: PUSH
16593: LD_INT 2
16595: EQUAL
16596: AND
16597: IFFALSE 16611
// begin side := i ;
16599: LD_ADDR_VAR 0 3
16603: PUSH
16604: LD_VAR 0 1
16608: ST_TO_ADDR
// break ;
16609: GO 16613
// end ;
16611: GO 16564
16613: POP
16614: POP
// if not side then
16615: LD_VAR 0 3
16619: NOT
16620: IFFALSE 16624
// exit ;
16622: GO 16669
// for i := 1 to tmp do
16624: LD_ADDR_VAR 0 1
16628: PUSH
16629: DOUBLE
16630: LD_INT 1
16632: DEC
16633: ST_TO_ADDR
16634: LD_VAR 0 2
16638: PUSH
16639: FOR_TO
16640: IFFALSE 16667
// if Prob ( 60 ) then
16642: LD_INT 60
16644: PPUSH
16645: CALL_OW 13
16649: IFFALSE 16665
// SetSide ( i , side ) ;
16651: LD_VAR 0 1
16655: PPUSH
16656: LD_VAR 0 3
16660: PPUSH
16661: CALL_OW 235
16665: GO 16639
16667: POP
16668: POP
// end ;
16669: PPOPN 3
16671: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16672: LD_EXP 43
16676: PUSH
16677: LD_EXP 56
16681: AND
16682: IFFALSE 16801
16684: GO 16686
16686: DISABLE
16687: LD_INT 0
16689: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16690: LD_ADDR_VAR 0 1
16694: PUSH
16695: LD_INT 22
16697: PUSH
16698: LD_OWVAR 2
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 21
16709: PUSH
16710: LD_INT 1
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 3
16719: PUSH
16720: LD_INT 23
16722: PUSH
16723: LD_INT 0
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: LIST
16738: PPUSH
16739: CALL_OW 69
16743: PUSH
16744: FOR_IN
16745: IFFALSE 16799
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16747: LD_VAR 0 1
16751: PPUSH
16752: CALL_OW 257
16756: PUSH
16757: LD_INT 1
16759: PUSH
16760: LD_INT 2
16762: PUSH
16763: LD_INT 3
16765: PUSH
16766: LD_INT 4
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: IN
16775: IFFALSE 16797
// SetClass ( un , rand ( 1 , 4 ) ) ;
16777: LD_VAR 0 1
16781: PPUSH
16782: LD_INT 1
16784: PPUSH
16785: LD_INT 4
16787: PPUSH
16788: CALL_OW 12
16792: PPUSH
16793: CALL_OW 336
16797: GO 16744
16799: POP
16800: POP
// end ;
16801: PPOPN 1
16803: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16804: LD_EXP 43
16808: PUSH
16809: LD_EXP 55
16813: AND
16814: IFFALSE 16893
16816: GO 16818
16818: DISABLE
16819: LD_INT 0
16821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16822: LD_ADDR_VAR 0 1
16826: PUSH
16827: LD_INT 22
16829: PUSH
16830: LD_OWVAR 2
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 21
16841: PUSH
16842: LD_INT 3
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PPUSH
16853: CALL_OW 69
16857: ST_TO_ADDR
// if not tmp then
16858: LD_VAR 0 1
16862: NOT
16863: IFFALSE 16867
// exit ;
16865: GO 16893
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16867: LD_VAR 0 1
16871: PUSH
16872: LD_INT 1
16874: PPUSH
16875: LD_VAR 0 1
16879: PPUSH
16880: CALL_OW 12
16884: ARRAY
16885: PPUSH
16886: LD_INT 100
16888: PPUSH
16889: CALL_OW 234
// end ;
16893: PPOPN 1
16895: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16896: LD_EXP 43
16900: PUSH
16901: LD_EXP 57
16905: AND
16906: IFFALSE 17004
16908: GO 16910
16910: DISABLE
16911: LD_INT 0
16913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16914: LD_ADDR_VAR 0 1
16918: PUSH
16919: LD_INT 22
16921: PUSH
16922: LD_OWVAR 2
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 21
16933: PUSH
16934: LD_INT 1
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PPUSH
16945: CALL_OW 69
16949: ST_TO_ADDR
// if not tmp then
16950: LD_VAR 0 1
16954: NOT
16955: IFFALSE 16959
// exit ;
16957: GO 17004
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16959: LD_VAR 0 1
16963: PUSH
16964: LD_INT 1
16966: PPUSH
16967: LD_VAR 0 1
16971: PPUSH
16972: CALL_OW 12
16976: ARRAY
16977: PPUSH
16978: LD_INT 1
16980: PPUSH
16981: LD_INT 4
16983: PPUSH
16984: CALL_OW 12
16988: PPUSH
16989: LD_INT 3000
16991: PPUSH
16992: LD_INT 9000
16994: PPUSH
16995: CALL_OW 12
16999: PPUSH
17000: CALL_OW 492
// end ;
17004: PPOPN 1
17006: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17007: LD_EXP 43
17011: PUSH
17012: LD_EXP 58
17016: AND
17017: IFFALSE 17037
17019: GO 17021
17021: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17022: LD_INT 1
17024: PPUSH
17025: LD_OWVAR 2
17029: PPUSH
17030: LD_INT 0
17032: PPUSH
17033: CALL_OW 324
17037: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17038: LD_EXP 43
17042: PUSH
17043: LD_EXP 59
17047: AND
17048: IFFALSE 17131
17050: GO 17052
17052: DISABLE
17053: LD_INT 0
17055: PPUSH
17056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17057: LD_ADDR_VAR 0 2
17061: PUSH
17062: LD_INT 22
17064: PUSH
17065: LD_OWVAR 2
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 21
17076: PUSH
17077: LD_INT 3
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PPUSH
17088: CALL_OW 69
17092: ST_TO_ADDR
// if not tmp then
17093: LD_VAR 0 2
17097: NOT
17098: IFFALSE 17102
// exit ;
17100: GO 17131
// for i in tmp do
17102: LD_ADDR_VAR 0 1
17106: PUSH
17107: LD_VAR 0 2
17111: PUSH
17112: FOR_IN
17113: IFFALSE 17129
// SetBLevel ( i , 10 ) ;
17115: LD_VAR 0 1
17119: PPUSH
17120: LD_INT 10
17122: PPUSH
17123: CALL_OW 241
17127: GO 17112
17129: POP
17130: POP
// end ;
17131: PPOPN 2
17133: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17134: LD_EXP 43
17138: PUSH
17139: LD_EXP 60
17143: AND
17144: IFFALSE 17255
17146: GO 17148
17148: DISABLE
17149: LD_INT 0
17151: PPUSH
17152: PPUSH
17153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17154: LD_ADDR_VAR 0 3
17158: PUSH
17159: LD_INT 22
17161: PUSH
17162: LD_OWVAR 2
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 25
17173: PUSH
17174: LD_INT 1
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PPUSH
17185: CALL_OW 69
17189: ST_TO_ADDR
// if not tmp then
17190: LD_VAR 0 3
17194: NOT
17195: IFFALSE 17199
// exit ;
17197: GO 17255
// un := tmp [ rand ( 1 , tmp ) ] ;
17199: LD_ADDR_VAR 0 2
17203: PUSH
17204: LD_VAR 0 3
17208: PUSH
17209: LD_INT 1
17211: PPUSH
17212: LD_VAR 0 3
17216: PPUSH
17217: CALL_OW 12
17221: ARRAY
17222: ST_TO_ADDR
// if Crawls ( un ) then
17223: LD_VAR 0 2
17227: PPUSH
17228: CALL_OW 318
17232: IFFALSE 17243
// ComWalk ( un ) ;
17234: LD_VAR 0 2
17238: PPUSH
17239: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17243: LD_VAR 0 2
17247: PPUSH
17248: LD_INT 5
17250: PPUSH
17251: CALL_OW 336
// end ;
17255: PPOPN 3
17257: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17258: LD_EXP 43
17262: PUSH
17263: LD_EXP 61
17267: AND
17268: PUSH
17269: LD_OWVAR 67
17273: PUSH
17274: LD_INT 4
17276: LESS
17277: AND
17278: IFFALSE 17297
17280: GO 17282
17282: DISABLE
// begin Difficulty := Difficulty + 1 ;
17283: LD_ADDR_OWVAR 67
17287: PUSH
17288: LD_OWVAR 67
17292: PUSH
17293: LD_INT 1
17295: PLUS
17296: ST_TO_ADDR
// end ;
17297: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17298: LD_EXP 43
17302: PUSH
17303: LD_EXP 62
17307: AND
17308: IFFALSE 17411
17310: GO 17312
17312: DISABLE
17313: LD_INT 0
17315: PPUSH
// begin for i := 1 to 5 do
17316: LD_ADDR_VAR 0 1
17320: PUSH
17321: DOUBLE
17322: LD_INT 1
17324: DEC
17325: ST_TO_ADDR
17326: LD_INT 5
17328: PUSH
17329: FOR_TO
17330: IFFALSE 17409
// begin uc_nation := nation_nature ;
17332: LD_ADDR_OWVAR 21
17336: PUSH
17337: LD_INT 0
17339: ST_TO_ADDR
// uc_side := 0 ;
17340: LD_ADDR_OWVAR 20
17344: PUSH
17345: LD_INT 0
17347: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17348: LD_ADDR_OWVAR 29
17352: PUSH
17353: LD_INT 12
17355: PUSH
17356: LD_INT 12
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: ST_TO_ADDR
// hc_agressivity := 20 ;
17363: LD_ADDR_OWVAR 35
17367: PUSH
17368: LD_INT 20
17370: ST_TO_ADDR
// hc_class := class_tiger ;
17371: LD_ADDR_OWVAR 28
17375: PUSH
17376: LD_INT 14
17378: ST_TO_ADDR
// hc_gallery :=  ;
17379: LD_ADDR_OWVAR 33
17383: PUSH
17384: LD_STRING 
17386: ST_TO_ADDR
// hc_name :=  ;
17387: LD_ADDR_OWVAR 26
17391: PUSH
17392: LD_STRING 
17394: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17395: CALL_OW 44
17399: PPUSH
17400: LD_INT 0
17402: PPUSH
17403: CALL_OW 51
// end ;
17407: GO 17329
17409: POP
17410: POP
// end ;
17411: PPOPN 1
17413: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17414: LD_EXP 43
17418: PUSH
17419: LD_EXP 63
17423: AND
17424: IFFALSE 17433
17426: GO 17428
17428: DISABLE
// StreamSibBomb ;
17429: CALL 17434 0 0
17433: END
// export function StreamSibBomb ; var i , x , y ; begin
17434: LD_INT 0
17436: PPUSH
17437: PPUSH
17438: PPUSH
17439: PPUSH
// result := false ;
17440: LD_ADDR_VAR 0 1
17444: PUSH
17445: LD_INT 0
17447: ST_TO_ADDR
// for i := 1 to 16 do
17448: LD_ADDR_VAR 0 2
17452: PUSH
17453: DOUBLE
17454: LD_INT 1
17456: DEC
17457: ST_TO_ADDR
17458: LD_INT 16
17460: PUSH
17461: FOR_TO
17462: IFFALSE 17661
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17464: LD_ADDR_VAR 0 3
17468: PUSH
17469: LD_INT 10
17471: PUSH
17472: LD_INT 20
17474: PUSH
17475: LD_INT 30
17477: PUSH
17478: LD_INT 40
17480: PUSH
17481: LD_INT 50
17483: PUSH
17484: LD_INT 60
17486: PUSH
17487: LD_INT 70
17489: PUSH
17490: LD_INT 80
17492: PUSH
17493: LD_INT 90
17495: PUSH
17496: LD_INT 100
17498: PUSH
17499: LD_INT 110
17501: PUSH
17502: LD_INT 120
17504: PUSH
17505: LD_INT 130
17507: PUSH
17508: LD_INT 140
17510: PUSH
17511: LD_INT 150
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 1
17533: PPUSH
17534: LD_INT 15
17536: PPUSH
17537: CALL_OW 12
17541: ARRAY
17542: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17543: LD_ADDR_VAR 0 4
17547: PUSH
17548: LD_INT 10
17550: PUSH
17551: LD_INT 20
17553: PUSH
17554: LD_INT 30
17556: PUSH
17557: LD_INT 40
17559: PUSH
17560: LD_INT 50
17562: PUSH
17563: LD_INT 60
17565: PUSH
17566: LD_INT 70
17568: PUSH
17569: LD_INT 80
17571: PUSH
17572: LD_INT 90
17574: PUSH
17575: LD_INT 100
17577: PUSH
17578: LD_INT 110
17580: PUSH
17581: LD_INT 120
17583: PUSH
17584: LD_INT 130
17586: PUSH
17587: LD_INT 140
17589: PUSH
17590: LD_INT 150
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 1
17612: PPUSH
17613: LD_INT 15
17615: PPUSH
17616: CALL_OW 12
17620: ARRAY
17621: ST_TO_ADDR
// if ValidHex ( x , y ) then
17622: LD_VAR 0 3
17626: PPUSH
17627: LD_VAR 0 4
17631: PPUSH
17632: CALL_OW 488
17636: IFFALSE 17659
// begin result := [ x , y ] ;
17638: LD_ADDR_VAR 0 1
17642: PUSH
17643: LD_VAR 0 3
17647: PUSH
17648: LD_VAR 0 4
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: ST_TO_ADDR
// break ;
17657: GO 17661
// end ; end ;
17659: GO 17461
17661: POP
17662: POP
// if result then
17663: LD_VAR 0 1
17667: IFFALSE 17727
// begin ToLua ( playSibBomb() ) ;
17669: LD_STRING playSibBomb()
17671: PPUSH
17672: CALL_OW 559
// wait ( 0 0$14 ) ;
17676: LD_INT 490
17678: PPUSH
17679: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17683: LD_VAR 0 1
17687: PUSH
17688: LD_INT 1
17690: ARRAY
17691: PPUSH
17692: LD_VAR 0 1
17696: PUSH
17697: LD_INT 2
17699: ARRAY
17700: PPUSH
17701: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17705: LD_VAR 0 1
17709: PUSH
17710: LD_INT 1
17712: ARRAY
17713: PPUSH
17714: LD_VAR 0 1
17718: PUSH
17719: LD_INT 2
17721: ARRAY
17722: PPUSH
17723: CALL_OW 429
// end ; end ;
17727: LD_VAR 0 1
17731: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17732: LD_EXP 43
17736: PUSH
17737: LD_EXP 65
17741: AND
17742: IFFALSE 17754
17744: GO 17746
17746: DISABLE
// YouLost (  ) ;
17747: LD_STRING 
17749: PPUSH
17750: CALL_OW 104
17754: END
// every 0 0$1 trigger StreamModeActive and sFog do
17755: LD_EXP 43
17759: PUSH
17760: LD_EXP 64
17764: AND
17765: IFFALSE 17779
17767: GO 17769
17769: DISABLE
// FogOff ( your_side ) ;
17770: LD_OWVAR 2
17774: PPUSH
17775: CALL_OW 344
17779: END
// every 0 0$1 trigger StreamModeActive and sSun do
17780: LD_EXP 43
17784: PUSH
17785: LD_EXP 66
17789: AND
17790: IFFALSE 17818
17792: GO 17794
17794: DISABLE
// begin solar_recharge_percent := 0 ;
17795: LD_ADDR_OWVAR 79
17799: PUSH
17800: LD_INT 0
17802: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17803: LD_INT 10500
17805: PPUSH
17806: CALL_OW 67
// solar_recharge_percent := 100 ;
17810: LD_ADDR_OWVAR 79
17814: PUSH
17815: LD_INT 100
17817: ST_TO_ADDR
// end ;
17818: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17819: LD_EXP 43
17823: PUSH
17824: LD_EXP 67
17828: AND
17829: IFFALSE 18068
17831: GO 17833
17833: DISABLE
17834: LD_INT 0
17836: PPUSH
17837: PPUSH
17838: PPUSH
// begin tmp := [ ] ;
17839: LD_ADDR_VAR 0 3
17843: PUSH
17844: EMPTY
17845: ST_TO_ADDR
// for i := 1 to 6 do
17846: LD_ADDR_VAR 0 1
17850: PUSH
17851: DOUBLE
17852: LD_INT 1
17854: DEC
17855: ST_TO_ADDR
17856: LD_INT 6
17858: PUSH
17859: FOR_TO
17860: IFFALSE 17965
// begin uc_nation := nation_nature ;
17862: LD_ADDR_OWVAR 21
17866: PUSH
17867: LD_INT 0
17869: ST_TO_ADDR
// uc_side := 0 ;
17870: LD_ADDR_OWVAR 20
17874: PUSH
17875: LD_INT 0
17877: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17878: LD_ADDR_OWVAR 29
17882: PUSH
17883: LD_INT 12
17885: PUSH
17886: LD_INT 12
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: ST_TO_ADDR
// hc_agressivity := 20 ;
17893: LD_ADDR_OWVAR 35
17897: PUSH
17898: LD_INT 20
17900: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17901: LD_ADDR_OWVAR 28
17905: PUSH
17906: LD_INT 17
17908: ST_TO_ADDR
// hc_gallery :=  ;
17909: LD_ADDR_OWVAR 33
17913: PUSH
17914: LD_STRING 
17916: ST_TO_ADDR
// hc_name :=  ;
17917: LD_ADDR_OWVAR 26
17921: PUSH
17922: LD_STRING 
17924: ST_TO_ADDR
// un := CreateHuman ;
17925: LD_ADDR_VAR 0 2
17929: PUSH
17930: CALL_OW 44
17934: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17935: LD_VAR 0 2
17939: PPUSH
17940: LD_INT 1
17942: PPUSH
17943: CALL_OW 51
// tmp := tmp ^ un ;
17947: LD_ADDR_VAR 0 3
17951: PUSH
17952: LD_VAR 0 3
17956: PUSH
17957: LD_VAR 0 2
17961: ADD
17962: ST_TO_ADDR
// end ;
17963: GO 17859
17965: POP
17966: POP
// repeat wait ( 0 0$1 ) ;
17967: LD_INT 35
17969: PPUSH
17970: CALL_OW 67
// for un in tmp do
17974: LD_ADDR_VAR 0 2
17978: PUSH
17979: LD_VAR 0 3
17983: PUSH
17984: FOR_IN
17985: IFFALSE 18059
// begin if IsDead ( un ) then
17987: LD_VAR 0 2
17991: PPUSH
17992: CALL_OW 301
17996: IFFALSE 18016
// begin tmp := tmp diff un ;
17998: LD_ADDR_VAR 0 3
18002: PUSH
18003: LD_VAR 0 3
18007: PUSH
18008: LD_VAR 0 2
18012: DIFF
18013: ST_TO_ADDR
// continue ;
18014: GO 17984
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18016: LD_VAR 0 2
18020: PPUSH
18021: LD_INT 3
18023: PUSH
18024: LD_INT 22
18026: PUSH
18027: LD_INT 0
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PPUSH
18038: CALL_OW 69
18042: PPUSH
18043: LD_VAR 0 2
18047: PPUSH
18048: CALL_OW 74
18052: PPUSH
18053: CALL_OW 115
// end ;
18057: GO 17984
18059: POP
18060: POP
// until not tmp ;
18061: LD_VAR 0 3
18065: NOT
18066: IFFALSE 17967
// end ;
18068: PPOPN 3
18070: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18071: LD_EXP 43
18075: PUSH
18076: LD_EXP 68
18080: AND
18081: IFFALSE 18135
18083: GO 18085
18085: DISABLE
// begin ToLua ( displayTroll(); ) ;
18086: LD_STRING displayTroll();
18088: PPUSH
18089: CALL_OW 559
// wait ( 3 3$00 ) ;
18093: LD_INT 6300
18095: PPUSH
18096: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18100: LD_STRING hideTroll();
18102: PPUSH
18103: CALL_OW 559
// wait ( 1 1$00 ) ;
18107: LD_INT 2100
18109: PPUSH
18110: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18114: LD_STRING displayTroll();
18116: PPUSH
18117: CALL_OW 559
// wait ( 1 1$00 ) ;
18121: LD_INT 2100
18123: PPUSH
18124: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18128: LD_STRING hideTroll();
18130: PPUSH
18131: CALL_OW 559
// end ;
18135: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18136: LD_EXP 43
18140: PUSH
18141: LD_EXP 69
18145: AND
18146: IFFALSE 18209
18148: GO 18150
18150: DISABLE
18151: LD_INT 0
18153: PPUSH
// begin p := 0 ;
18154: LD_ADDR_VAR 0 1
18158: PUSH
18159: LD_INT 0
18161: ST_TO_ADDR
// repeat game_speed := 1 ;
18162: LD_ADDR_OWVAR 65
18166: PUSH
18167: LD_INT 1
18169: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18170: LD_INT 35
18172: PPUSH
18173: CALL_OW 67
// p := p + 1 ;
18177: LD_ADDR_VAR 0 1
18181: PUSH
18182: LD_VAR 0 1
18186: PUSH
18187: LD_INT 1
18189: PLUS
18190: ST_TO_ADDR
// until p >= 60 ;
18191: LD_VAR 0 1
18195: PUSH
18196: LD_INT 60
18198: GREATEREQUAL
18199: IFFALSE 18162
// game_speed := 4 ;
18201: LD_ADDR_OWVAR 65
18205: PUSH
18206: LD_INT 4
18208: ST_TO_ADDR
// end ;
18209: PPOPN 1
18211: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18212: LD_EXP 43
18216: PUSH
18217: LD_EXP 70
18221: AND
18222: IFFALSE 18368
18224: GO 18226
18226: DISABLE
18227: LD_INT 0
18229: PPUSH
18230: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18231: LD_ADDR_VAR 0 1
18235: PUSH
18236: LD_INT 22
18238: PUSH
18239: LD_OWVAR 2
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 2
18250: PUSH
18251: LD_INT 30
18253: PUSH
18254: LD_INT 0
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 30
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: LIST
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PPUSH
18280: CALL_OW 69
18284: ST_TO_ADDR
// if not depot then
18285: LD_VAR 0 1
18289: NOT
18290: IFFALSE 18294
// exit ;
18292: GO 18368
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18294: LD_ADDR_VAR 0 2
18298: PUSH
18299: LD_VAR 0 1
18303: PUSH
18304: LD_INT 1
18306: PPUSH
18307: LD_VAR 0 1
18311: PPUSH
18312: CALL_OW 12
18316: ARRAY
18317: PPUSH
18318: CALL_OW 274
18322: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18323: LD_VAR 0 2
18327: PPUSH
18328: LD_INT 1
18330: PPUSH
18331: LD_INT 0
18333: PPUSH
18334: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18338: LD_VAR 0 2
18342: PPUSH
18343: LD_INT 2
18345: PPUSH
18346: LD_INT 0
18348: PPUSH
18349: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18353: LD_VAR 0 2
18357: PPUSH
18358: LD_INT 3
18360: PPUSH
18361: LD_INT 0
18363: PPUSH
18364: CALL_OW 277
// end ;
18368: PPOPN 2
18370: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18371: LD_EXP 43
18375: PUSH
18376: LD_EXP 71
18380: AND
18381: IFFALSE 18478
18383: GO 18385
18385: DISABLE
18386: LD_INT 0
18388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18389: LD_ADDR_VAR 0 1
18393: PUSH
18394: LD_INT 22
18396: PUSH
18397: LD_OWVAR 2
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 21
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 3
18418: PUSH
18419: LD_INT 23
18421: PUSH
18422: LD_INT 0
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: LIST
18437: PPUSH
18438: CALL_OW 69
18442: ST_TO_ADDR
// if not tmp then
18443: LD_VAR 0 1
18447: NOT
18448: IFFALSE 18452
// exit ;
18450: GO 18478
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18452: LD_VAR 0 1
18456: PUSH
18457: LD_INT 1
18459: PPUSH
18460: LD_VAR 0 1
18464: PPUSH
18465: CALL_OW 12
18469: ARRAY
18470: PPUSH
18471: LD_INT 200
18473: PPUSH
18474: CALL_OW 234
// end ;
18478: PPOPN 1
18480: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18481: LD_EXP 43
18485: PUSH
18486: LD_EXP 72
18490: AND
18491: IFFALSE 18570
18493: GO 18495
18495: DISABLE
18496: LD_INT 0
18498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18499: LD_ADDR_VAR 0 1
18503: PUSH
18504: LD_INT 22
18506: PUSH
18507: LD_OWVAR 2
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 21
18518: PUSH
18519: LD_INT 2
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PPUSH
18530: CALL_OW 69
18534: ST_TO_ADDR
// if not tmp then
18535: LD_VAR 0 1
18539: NOT
18540: IFFALSE 18544
// exit ;
18542: GO 18570
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18544: LD_VAR 0 1
18548: PUSH
18549: LD_INT 1
18551: PPUSH
18552: LD_VAR 0 1
18556: PPUSH
18557: CALL_OW 12
18561: ARRAY
18562: PPUSH
18563: LD_INT 60
18565: PPUSH
18566: CALL_OW 234
// end ;
18570: PPOPN 1
18572: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18573: LD_EXP 43
18577: PUSH
18578: LD_EXP 73
18582: AND
18583: IFFALSE 18682
18585: GO 18587
18587: DISABLE
18588: LD_INT 0
18590: PPUSH
18591: PPUSH
// begin enable ;
18592: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18593: LD_ADDR_VAR 0 1
18597: PUSH
18598: LD_INT 22
18600: PUSH
18601: LD_OWVAR 2
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 61
18612: PUSH
18613: EMPTY
18614: LIST
18615: PUSH
18616: LD_INT 33
18618: PUSH
18619: LD_INT 2
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: LIST
18630: PPUSH
18631: CALL_OW 69
18635: ST_TO_ADDR
// if not tmp then
18636: LD_VAR 0 1
18640: NOT
18641: IFFALSE 18645
// exit ;
18643: GO 18682
// for i in tmp do
18645: LD_ADDR_VAR 0 2
18649: PUSH
18650: LD_VAR 0 1
18654: PUSH
18655: FOR_IN
18656: IFFALSE 18680
// if IsControledBy ( i ) then
18658: LD_VAR 0 2
18662: PPUSH
18663: CALL_OW 312
18667: IFFALSE 18678
// ComUnlink ( i ) ;
18669: LD_VAR 0 2
18673: PPUSH
18674: CALL_OW 136
18678: GO 18655
18680: POP
18681: POP
// end ;
18682: PPOPN 2
18684: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18685: LD_EXP 43
18689: PUSH
18690: LD_EXP 74
18694: AND
18695: IFFALSE 18835
18697: GO 18699
18699: DISABLE
18700: LD_INT 0
18702: PPUSH
18703: PPUSH
// begin ToLua ( displayPowell(); ) ;
18704: LD_STRING displayPowell();
18706: PPUSH
18707: CALL_OW 559
// uc_side := 0 ;
18711: LD_ADDR_OWVAR 20
18715: PUSH
18716: LD_INT 0
18718: ST_TO_ADDR
// uc_nation := 2 ;
18719: LD_ADDR_OWVAR 21
18723: PUSH
18724: LD_INT 2
18726: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18727: LD_ADDR_OWVAR 37
18731: PUSH
18732: LD_INT 14
18734: ST_TO_ADDR
// vc_engine := engine_siberite ;
18735: LD_ADDR_OWVAR 39
18739: PUSH
18740: LD_INT 3
18742: ST_TO_ADDR
// vc_control := control_apeman ;
18743: LD_ADDR_OWVAR 38
18747: PUSH
18748: LD_INT 5
18750: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18751: LD_ADDR_OWVAR 40
18755: PUSH
18756: LD_INT 29
18758: ST_TO_ADDR
// un := CreateVehicle ;
18759: LD_ADDR_VAR 0 2
18763: PUSH
18764: CALL_OW 45
18768: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18769: LD_VAR 0 2
18773: PPUSH
18774: LD_INT 1
18776: PPUSH
18777: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18781: LD_INT 35
18783: PPUSH
18784: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18788: LD_VAR 0 2
18792: PPUSH
18793: LD_INT 22
18795: PUSH
18796: LD_OWVAR 2
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PPUSH
18805: CALL_OW 69
18809: PPUSH
18810: LD_VAR 0 2
18814: PPUSH
18815: CALL_OW 74
18819: PPUSH
18820: CALL_OW 115
// until IsDead ( un ) ;
18824: LD_VAR 0 2
18828: PPUSH
18829: CALL_OW 301
18833: IFFALSE 18781
// end ;
18835: PPOPN 2
18837: END
// every 0 0$1 trigger StreamModeActive and sStu do
18838: LD_EXP 43
18842: PUSH
18843: LD_EXP 82
18847: AND
18848: IFFALSE 18864
18850: GO 18852
18852: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18853: LD_STRING displayStucuk();
18855: PPUSH
18856: CALL_OW 559
// ResetFog ;
18860: CALL_OW 335
// end ;
18864: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18865: LD_EXP 43
18869: PUSH
18870: LD_EXP 75
18874: AND
18875: IFFALSE 19016
18877: GO 18879
18879: DISABLE
18880: LD_INT 0
18882: PPUSH
18883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18884: LD_ADDR_VAR 0 2
18888: PUSH
18889: LD_INT 22
18891: PUSH
18892: LD_OWVAR 2
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 21
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PPUSH
18915: CALL_OW 69
18919: ST_TO_ADDR
// if not tmp then
18920: LD_VAR 0 2
18924: NOT
18925: IFFALSE 18929
// exit ;
18927: GO 19016
// un := tmp [ rand ( 1 , tmp ) ] ;
18929: LD_ADDR_VAR 0 1
18933: PUSH
18934: LD_VAR 0 2
18938: PUSH
18939: LD_INT 1
18941: PPUSH
18942: LD_VAR 0 2
18946: PPUSH
18947: CALL_OW 12
18951: ARRAY
18952: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18953: LD_VAR 0 1
18957: PPUSH
18958: LD_INT 0
18960: PPUSH
18961: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18965: LD_VAR 0 1
18969: PPUSH
18970: LD_OWVAR 3
18974: PUSH
18975: LD_VAR 0 1
18979: DIFF
18980: PPUSH
18981: LD_VAR 0 1
18985: PPUSH
18986: CALL_OW 74
18990: PPUSH
18991: CALL_OW 115
// wait ( 0 0$20 ) ;
18995: LD_INT 700
18997: PPUSH
18998: CALL_OW 67
// SetSide ( un , your_side ) ;
19002: LD_VAR 0 1
19006: PPUSH
19007: LD_OWVAR 2
19011: PPUSH
19012: CALL_OW 235
// end ;
19016: PPOPN 2
19018: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19019: LD_EXP 43
19023: PUSH
19024: LD_EXP 76
19028: AND
19029: IFFALSE 19135
19031: GO 19033
19033: DISABLE
19034: LD_INT 0
19036: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19037: LD_ADDR_VAR 0 1
19041: PUSH
19042: LD_INT 22
19044: PUSH
19045: LD_OWVAR 2
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 2
19056: PUSH
19057: LD_INT 30
19059: PUSH
19060: LD_INT 0
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 30
19069: PUSH
19070: LD_INT 1
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: LIST
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PPUSH
19086: CALL_OW 69
19090: ST_TO_ADDR
// if not depot then
19091: LD_VAR 0 1
19095: NOT
19096: IFFALSE 19100
// exit ;
19098: GO 19135
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19100: LD_VAR 0 1
19104: PUSH
19105: LD_INT 1
19107: ARRAY
19108: PPUSH
19109: CALL_OW 250
19113: PPUSH
19114: LD_VAR 0 1
19118: PUSH
19119: LD_INT 1
19121: ARRAY
19122: PPUSH
19123: CALL_OW 251
19127: PPUSH
19128: LD_INT 70
19130: PPUSH
19131: CALL_OW 495
// end ;
19135: PPOPN 1
19137: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19138: LD_EXP 43
19142: PUSH
19143: LD_EXP 77
19147: AND
19148: IFFALSE 19359
19150: GO 19152
19152: DISABLE
19153: LD_INT 0
19155: PPUSH
19156: PPUSH
19157: PPUSH
19158: PPUSH
19159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19160: LD_ADDR_VAR 0 5
19164: PUSH
19165: LD_INT 22
19167: PUSH
19168: LD_OWVAR 2
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 21
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PPUSH
19191: CALL_OW 69
19195: ST_TO_ADDR
// if not tmp then
19196: LD_VAR 0 5
19200: NOT
19201: IFFALSE 19205
// exit ;
19203: GO 19359
// for i in tmp do
19205: LD_ADDR_VAR 0 1
19209: PUSH
19210: LD_VAR 0 5
19214: PUSH
19215: FOR_IN
19216: IFFALSE 19357
// begin d := rand ( 0 , 5 ) ;
19218: LD_ADDR_VAR 0 4
19222: PUSH
19223: LD_INT 0
19225: PPUSH
19226: LD_INT 5
19228: PPUSH
19229: CALL_OW 12
19233: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19234: LD_ADDR_VAR 0 2
19238: PUSH
19239: LD_VAR 0 1
19243: PPUSH
19244: CALL_OW 250
19248: PPUSH
19249: LD_VAR 0 4
19253: PPUSH
19254: LD_INT 3
19256: PPUSH
19257: LD_INT 12
19259: PPUSH
19260: CALL_OW 12
19264: PPUSH
19265: CALL_OW 272
19269: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19270: LD_ADDR_VAR 0 3
19274: PUSH
19275: LD_VAR 0 1
19279: PPUSH
19280: CALL_OW 251
19284: PPUSH
19285: LD_VAR 0 4
19289: PPUSH
19290: LD_INT 3
19292: PPUSH
19293: LD_INT 12
19295: PPUSH
19296: CALL_OW 12
19300: PPUSH
19301: CALL_OW 273
19305: ST_TO_ADDR
// if ValidHex ( x , y ) then
19306: LD_VAR 0 2
19310: PPUSH
19311: LD_VAR 0 3
19315: PPUSH
19316: CALL_OW 488
19320: IFFALSE 19355
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19322: LD_VAR 0 1
19326: PPUSH
19327: LD_VAR 0 2
19331: PPUSH
19332: LD_VAR 0 3
19336: PPUSH
19337: LD_INT 3
19339: PPUSH
19340: LD_INT 6
19342: PPUSH
19343: CALL_OW 12
19347: PPUSH
19348: LD_INT 1
19350: PPUSH
19351: CALL_OW 483
// end ;
19355: GO 19215
19357: POP
19358: POP
// end ;
19359: PPOPN 5
19361: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19362: LD_EXP 43
19366: PUSH
19367: LD_EXP 78
19371: AND
19372: IFFALSE 19466
19374: GO 19376
19376: DISABLE
19377: LD_INT 0
19379: PPUSH
19380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19381: LD_ADDR_VAR 0 2
19385: PUSH
19386: LD_INT 22
19388: PUSH
19389: LD_OWVAR 2
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 32
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 21
19410: PUSH
19411: LD_INT 2
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: PPUSH
19423: CALL_OW 69
19427: ST_TO_ADDR
// if not tmp then
19428: LD_VAR 0 2
19432: NOT
19433: IFFALSE 19437
// exit ;
19435: GO 19466
// for i in tmp do
19437: LD_ADDR_VAR 0 1
19441: PUSH
19442: LD_VAR 0 2
19446: PUSH
19447: FOR_IN
19448: IFFALSE 19464
// SetFuel ( i , 0 ) ;
19450: LD_VAR 0 1
19454: PPUSH
19455: LD_INT 0
19457: PPUSH
19458: CALL_OW 240
19462: GO 19447
19464: POP
19465: POP
// end ;
19466: PPOPN 2
19468: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19469: LD_EXP 43
19473: PUSH
19474: LD_EXP 79
19478: AND
19479: IFFALSE 19545
19481: GO 19483
19483: DISABLE
19484: LD_INT 0
19486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19487: LD_ADDR_VAR 0 1
19491: PUSH
19492: LD_INT 22
19494: PUSH
19495: LD_OWVAR 2
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 30
19506: PUSH
19507: LD_INT 29
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PPUSH
19518: CALL_OW 69
19522: ST_TO_ADDR
// if not tmp then
19523: LD_VAR 0 1
19527: NOT
19528: IFFALSE 19532
// exit ;
19530: GO 19545
// DestroyUnit ( tmp [ 1 ] ) ;
19532: LD_VAR 0 1
19536: PUSH
19537: LD_INT 1
19539: ARRAY
19540: PPUSH
19541: CALL_OW 65
// end ;
19545: PPOPN 1
19547: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19548: LD_EXP 43
19552: PUSH
19553: LD_EXP 81
19557: AND
19558: IFFALSE 19687
19560: GO 19562
19562: DISABLE
19563: LD_INT 0
19565: PPUSH
// begin uc_side := 0 ;
19566: LD_ADDR_OWVAR 20
19570: PUSH
19571: LD_INT 0
19573: ST_TO_ADDR
// uc_nation := nation_arabian ;
19574: LD_ADDR_OWVAR 21
19578: PUSH
19579: LD_INT 2
19581: ST_TO_ADDR
// hc_gallery :=  ;
19582: LD_ADDR_OWVAR 33
19586: PUSH
19587: LD_STRING 
19589: ST_TO_ADDR
// hc_name :=  ;
19590: LD_ADDR_OWVAR 26
19594: PUSH
19595: LD_STRING 
19597: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19598: LD_INT 1
19600: PPUSH
19601: LD_INT 11
19603: PPUSH
19604: LD_INT 10
19606: PPUSH
19607: CALL_OW 380
// un := CreateHuman ;
19611: LD_ADDR_VAR 0 1
19615: PUSH
19616: CALL_OW 44
19620: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19621: LD_VAR 0 1
19625: PPUSH
19626: LD_INT 1
19628: PPUSH
19629: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19633: LD_INT 35
19635: PPUSH
19636: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19640: LD_VAR 0 1
19644: PPUSH
19645: LD_INT 22
19647: PUSH
19648: LD_OWVAR 2
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PPUSH
19657: CALL_OW 69
19661: PPUSH
19662: LD_VAR 0 1
19666: PPUSH
19667: CALL_OW 74
19671: PPUSH
19672: CALL_OW 115
// until IsDead ( un ) ;
19676: LD_VAR 0 1
19680: PPUSH
19681: CALL_OW 301
19685: IFFALSE 19633
// end ;
19687: PPOPN 1
19689: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19690: LD_EXP 43
19694: PUSH
19695: LD_EXP 83
19699: AND
19700: IFFALSE 19712
19702: GO 19704
19704: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19705: LD_STRING earthquake(getX(game), 0, 32)
19707: PPUSH
19708: CALL_OW 559
19712: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19713: LD_EXP 43
19717: PUSH
19718: LD_EXP 84
19722: AND
19723: IFFALSE 19814
19725: GO 19727
19727: DISABLE
19728: LD_INT 0
19730: PPUSH
// begin enable ;
19731: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19732: LD_ADDR_VAR 0 1
19736: PUSH
19737: LD_INT 22
19739: PUSH
19740: LD_OWVAR 2
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 21
19751: PUSH
19752: LD_INT 2
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 33
19761: PUSH
19762: LD_INT 3
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: LIST
19773: PPUSH
19774: CALL_OW 69
19778: ST_TO_ADDR
// if not tmp then
19779: LD_VAR 0 1
19783: NOT
19784: IFFALSE 19788
// exit ;
19786: GO 19814
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19788: LD_VAR 0 1
19792: PUSH
19793: LD_INT 1
19795: PPUSH
19796: LD_VAR 0 1
19800: PPUSH
19801: CALL_OW 12
19805: ARRAY
19806: PPUSH
19807: LD_INT 1
19809: PPUSH
19810: CALL_OW 234
// end ;
19814: PPOPN 1
19816: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19817: LD_EXP 43
19821: PUSH
19822: LD_EXP 85
19826: AND
19827: IFFALSE 19968
19829: GO 19831
19831: DISABLE
19832: LD_INT 0
19834: PPUSH
19835: PPUSH
19836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19837: LD_ADDR_VAR 0 3
19841: PUSH
19842: LD_INT 22
19844: PUSH
19845: LD_OWVAR 2
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 25
19856: PUSH
19857: LD_INT 1
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PPUSH
19868: CALL_OW 69
19872: ST_TO_ADDR
// if not tmp then
19873: LD_VAR 0 3
19877: NOT
19878: IFFALSE 19882
// exit ;
19880: GO 19968
// un := tmp [ rand ( 1 , tmp ) ] ;
19882: LD_ADDR_VAR 0 2
19886: PUSH
19887: LD_VAR 0 3
19891: PUSH
19892: LD_INT 1
19894: PPUSH
19895: LD_VAR 0 3
19899: PPUSH
19900: CALL_OW 12
19904: ARRAY
19905: ST_TO_ADDR
// if Crawls ( un ) then
19906: LD_VAR 0 2
19910: PPUSH
19911: CALL_OW 318
19915: IFFALSE 19926
// ComWalk ( un ) ;
19917: LD_VAR 0 2
19921: PPUSH
19922: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19926: LD_VAR 0 2
19930: PPUSH
19931: LD_INT 9
19933: PPUSH
19934: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19938: LD_INT 28
19940: PPUSH
19941: LD_OWVAR 2
19945: PPUSH
19946: LD_INT 2
19948: PPUSH
19949: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19953: LD_INT 29
19955: PPUSH
19956: LD_OWVAR 2
19960: PPUSH
19961: LD_INT 2
19963: PPUSH
19964: CALL_OW 322
// end ;
19968: PPOPN 3
19970: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19971: LD_EXP 43
19975: PUSH
19976: LD_EXP 86
19980: AND
19981: IFFALSE 20092
19983: GO 19985
19985: DISABLE
19986: LD_INT 0
19988: PPUSH
19989: PPUSH
19990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19991: LD_ADDR_VAR 0 3
19995: PUSH
19996: LD_INT 22
19998: PUSH
19999: LD_OWVAR 2
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 25
20010: PUSH
20011: LD_INT 1
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PPUSH
20022: CALL_OW 69
20026: ST_TO_ADDR
// if not tmp then
20027: LD_VAR 0 3
20031: NOT
20032: IFFALSE 20036
// exit ;
20034: GO 20092
// un := tmp [ rand ( 1 , tmp ) ] ;
20036: LD_ADDR_VAR 0 2
20040: PUSH
20041: LD_VAR 0 3
20045: PUSH
20046: LD_INT 1
20048: PPUSH
20049: LD_VAR 0 3
20053: PPUSH
20054: CALL_OW 12
20058: ARRAY
20059: ST_TO_ADDR
// if Crawls ( un ) then
20060: LD_VAR 0 2
20064: PPUSH
20065: CALL_OW 318
20069: IFFALSE 20080
// ComWalk ( un ) ;
20071: LD_VAR 0 2
20075: PPUSH
20076: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20080: LD_VAR 0 2
20084: PPUSH
20085: LD_INT 8
20087: PPUSH
20088: CALL_OW 336
// end ;
20092: PPOPN 3
20094: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20095: LD_EXP 43
20099: PUSH
20100: LD_EXP 87
20104: AND
20105: IFFALSE 20249
20107: GO 20109
20109: DISABLE
20110: LD_INT 0
20112: PPUSH
20113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20114: LD_ADDR_VAR 0 2
20118: PUSH
20119: LD_INT 22
20121: PUSH
20122: LD_OWVAR 2
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 21
20133: PUSH
20134: LD_INT 2
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 2
20143: PUSH
20144: LD_INT 34
20146: PUSH
20147: LD_INT 12
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 34
20156: PUSH
20157: LD_INT 51
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 34
20166: PUSH
20167: LD_INT 32
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: LIST
20184: PPUSH
20185: CALL_OW 69
20189: ST_TO_ADDR
// if not tmp then
20190: LD_VAR 0 2
20194: NOT
20195: IFFALSE 20199
// exit ;
20197: GO 20249
// for i in tmp do
20199: LD_ADDR_VAR 0 1
20203: PUSH
20204: LD_VAR 0 2
20208: PUSH
20209: FOR_IN
20210: IFFALSE 20247
// if GetCargo ( i , mat_artifact ) = 0 then
20212: LD_VAR 0 1
20216: PPUSH
20217: LD_INT 4
20219: PPUSH
20220: CALL_OW 289
20224: PUSH
20225: LD_INT 0
20227: EQUAL
20228: IFFALSE 20245
// SetCargo ( i , mat_siberit , 100 ) ;
20230: LD_VAR 0 1
20234: PPUSH
20235: LD_INT 3
20237: PPUSH
20238: LD_INT 100
20240: PPUSH
20241: CALL_OW 290
20245: GO 20209
20247: POP
20248: POP
// end ;
20249: PPOPN 2
20251: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20252: LD_EXP 43
20256: PUSH
20257: LD_EXP 88
20261: AND
20262: IFFALSE 20445
20264: GO 20266
20266: DISABLE
20267: LD_INT 0
20269: PPUSH
20270: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20271: LD_ADDR_VAR 0 2
20275: PUSH
20276: LD_INT 22
20278: PUSH
20279: LD_OWVAR 2
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PPUSH
20288: CALL_OW 69
20292: ST_TO_ADDR
// if not tmp then
20293: LD_VAR 0 2
20297: NOT
20298: IFFALSE 20302
// exit ;
20300: GO 20445
// for i := 1 to 2 do
20302: LD_ADDR_VAR 0 1
20306: PUSH
20307: DOUBLE
20308: LD_INT 1
20310: DEC
20311: ST_TO_ADDR
20312: LD_INT 2
20314: PUSH
20315: FOR_TO
20316: IFFALSE 20443
// begin uc_side := your_side ;
20318: LD_ADDR_OWVAR 20
20322: PUSH
20323: LD_OWVAR 2
20327: ST_TO_ADDR
// uc_nation := nation_american ;
20328: LD_ADDR_OWVAR 21
20332: PUSH
20333: LD_INT 1
20335: ST_TO_ADDR
// vc_chassis := us_morphling ;
20336: LD_ADDR_OWVAR 37
20340: PUSH
20341: LD_INT 5
20343: ST_TO_ADDR
// vc_engine := engine_siberite ;
20344: LD_ADDR_OWVAR 39
20348: PUSH
20349: LD_INT 3
20351: ST_TO_ADDR
// vc_control := control_computer ;
20352: LD_ADDR_OWVAR 38
20356: PUSH
20357: LD_INT 3
20359: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20360: LD_ADDR_OWVAR 40
20364: PUSH
20365: LD_INT 10
20367: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20368: LD_VAR 0 2
20372: PUSH
20373: LD_INT 1
20375: ARRAY
20376: PPUSH
20377: CALL_OW 310
20381: NOT
20382: IFFALSE 20429
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20384: CALL_OW 45
20388: PPUSH
20389: LD_VAR 0 2
20393: PUSH
20394: LD_INT 1
20396: ARRAY
20397: PPUSH
20398: CALL_OW 250
20402: PPUSH
20403: LD_VAR 0 2
20407: PUSH
20408: LD_INT 1
20410: ARRAY
20411: PPUSH
20412: CALL_OW 251
20416: PPUSH
20417: LD_INT 12
20419: PPUSH
20420: LD_INT 1
20422: PPUSH
20423: CALL_OW 50
20427: GO 20441
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20429: CALL_OW 45
20433: PPUSH
20434: LD_INT 1
20436: PPUSH
20437: CALL_OW 51
// end ;
20441: GO 20315
20443: POP
20444: POP
// end ;
20445: PPOPN 2
20447: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20448: LD_EXP 43
20452: PUSH
20453: LD_EXP 89
20457: AND
20458: IFFALSE 20680
20460: GO 20462
20462: DISABLE
20463: LD_INT 0
20465: PPUSH
20466: PPUSH
20467: PPUSH
20468: PPUSH
20469: PPUSH
20470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20471: LD_ADDR_VAR 0 6
20475: PUSH
20476: LD_INT 22
20478: PUSH
20479: LD_OWVAR 2
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 21
20490: PUSH
20491: LD_INT 1
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 3
20500: PUSH
20501: LD_INT 23
20503: PUSH
20504: LD_INT 0
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: LIST
20519: PPUSH
20520: CALL_OW 69
20524: ST_TO_ADDR
// if not tmp then
20525: LD_VAR 0 6
20529: NOT
20530: IFFALSE 20534
// exit ;
20532: GO 20680
// s1 := rand ( 1 , 4 ) ;
20534: LD_ADDR_VAR 0 2
20538: PUSH
20539: LD_INT 1
20541: PPUSH
20542: LD_INT 4
20544: PPUSH
20545: CALL_OW 12
20549: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20550: LD_ADDR_VAR 0 4
20554: PUSH
20555: LD_VAR 0 6
20559: PUSH
20560: LD_INT 1
20562: ARRAY
20563: PPUSH
20564: LD_VAR 0 2
20568: PPUSH
20569: CALL_OW 259
20573: ST_TO_ADDR
// if s1 = 1 then
20574: LD_VAR 0 2
20578: PUSH
20579: LD_INT 1
20581: EQUAL
20582: IFFALSE 20602
// s2 := rand ( 2 , 4 ) else
20584: LD_ADDR_VAR 0 3
20588: PUSH
20589: LD_INT 2
20591: PPUSH
20592: LD_INT 4
20594: PPUSH
20595: CALL_OW 12
20599: ST_TO_ADDR
20600: GO 20610
// s2 := 1 ;
20602: LD_ADDR_VAR 0 3
20606: PUSH
20607: LD_INT 1
20609: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20610: LD_ADDR_VAR 0 5
20614: PUSH
20615: LD_VAR 0 6
20619: PUSH
20620: LD_INT 1
20622: ARRAY
20623: PPUSH
20624: LD_VAR 0 3
20628: PPUSH
20629: CALL_OW 259
20633: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20634: LD_VAR 0 6
20638: PUSH
20639: LD_INT 1
20641: ARRAY
20642: PPUSH
20643: LD_VAR 0 2
20647: PPUSH
20648: LD_VAR 0 5
20652: PPUSH
20653: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20657: LD_VAR 0 6
20661: PUSH
20662: LD_INT 1
20664: ARRAY
20665: PPUSH
20666: LD_VAR 0 3
20670: PPUSH
20671: LD_VAR 0 4
20675: PPUSH
20676: CALL_OW 237
// end ;
20680: PPOPN 6
20682: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20683: LD_EXP 43
20687: PUSH
20688: LD_EXP 90
20692: AND
20693: IFFALSE 20772
20695: GO 20697
20697: DISABLE
20698: LD_INT 0
20700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20701: LD_ADDR_VAR 0 1
20705: PUSH
20706: LD_INT 22
20708: PUSH
20709: LD_OWVAR 2
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 30
20720: PUSH
20721: LD_INT 3
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PPUSH
20732: CALL_OW 69
20736: ST_TO_ADDR
// if not tmp then
20737: LD_VAR 0 1
20741: NOT
20742: IFFALSE 20746
// exit ;
20744: GO 20772
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20746: LD_VAR 0 1
20750: PUSH
20751: LD_INT 1
20753: PPUSH
20754: LD_VAR 0 1
20758: PPUSH
20759: CALL_OW 12
20763: ARRAY
20764: PPUSH
20765: LD_INT 1
20767: PPUSH
20768: CALL_OW 234
// end ;
20772: PPOPN 1
20774: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20775: LD_EXP 43
20779: PUSH
20780: LD_EXP 91
20784: AND
20785: IFFALSE 20897
20787: GO 20789
20789: DISABLE
20790: LD_INT 0
20792: PPUSH
20793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20794: LD_ADDR_VAR 0 2
20798: PUSH
20799: LD_INT 22
20801: PUSH
20802: LD_OWVAR 2
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 2
20813: PUSH
20814: LD_INT 30
20816: PUSH
20817: LD_INT 27
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 30
20826: PUSH
20827: LD_INT 26
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 30
20836: PUSH
20837: LD_INT 28
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PPUSH
20854: CALL_OW 69
20858: ST_TO_ADDR
// if not tmp then
20859: LD_VAR 0 2
20863: NOT
20864: IFFALSE 20868
// exit ;
20866: GO 20897
// for i in tmp do
20868: LD_ADDR_VAR 0 1
20872: PUSH
20873: LD_VAR 0 2
20877: PUSH
20878: FOR_IN
20879: IFFALSE 20895
// SetLives ( i , 1 ) ;
20881: LD_VAR 0 1
20885: PPUSH
20886: LD_INT 1
20888: PPUSH
20889: CALL_OW 234
20893: GO 20878
20895: POP
20896: POP
// end ;
20897: PPOPN 2
20899: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20900: LD_EXP 43
20904: PUSH
20905: LD_EXP 92
20909: AND
20910: IFFALSE 21197
20912: GO 20914
20914: DISABLE
20915: LD_INT 0
20917: PPUSH
20918: PPUSH
20919: PPUSH
// begin i := rand ( 1 , 7 ) ;
20920: LD_ADDR_VAR 0 1
20924: PUSH
20925: LD_INT 1
20927: PPUSH
20928: LD_INT 7
20930: PPUSH
20931: CALL_OW 12
20935: ST_TO_ADDR
// case i of 1 :
20936: LD_VAR 0 1
20940: PUSH
20941: LD_INT 1
20943: DOUBLE
20944: EQUAL
20945: IFTRUE 20949
20947: GO 20959
20949: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20950: LD_STRING earthquake(getX(game), 0, 32)
20952: PPUSH
20953: CALL_OW 559
20957: GO 21197
20959: LD_INT 2
20961: DOUBLE
20962: EQUAL
20963: IFTRUE 20967
20965: GO 20981
20967: POP
// begin ToLua ( displayStucuk(); ) ;
20968: LD_STRING displayStucuk();
20970: PPUSH
20971: CALL_OW 559
// ResetFog ;
20975: CALL_OW 335
// end ; 3 :
20979: GO 21197
20981: LD_INT 3
20983: DOUBLE
20984: EQUAL
20985: IFTRUE 20989
20987: GO 21093
20989: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20990: LD_ADDR_VAR 0 2
20994: PUSH
20995: LD_INT 22
20997: PUSH
20998: LD_OWVAR 2
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 25
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PPUSH
21021: CALL_OW 69
21025: ST_TO_ADDR
// if not tmp then
21026: LD_VAR 0 2
21030: NOT
21031: IFFALSE 21035
// exit ;
21033: GO 21197
// un := tmp [ rand ( 1 , tmp ) ] ;
21035: LD_ADDR_VAR 0 3
21039: PUSH
21040: LD_VAR 0 2
21044: PUSH
21045: LD_INT 1
21047: PPUSH
21048: LD_VAR 0 2
21052: PPUSH
21053: CALL_OW 12
21057: ARRAY
21058: ST_TO_ADDR
// if Crawls ( un ) then
21059: LD_VAR 0 3
21063: PPUSH
21064: CALL_OW 318
21068: IFFALSE 21079
// ComWalk ( un ) ;
21070: LD_VAR 0 3
21074: PPUSH
21075: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21079: LD_VAR 0 3
21083: PPUSH
21084: LD_INT 8
21086: PPUSH
21087: CALL_OW 336
// end ; 4 :
21091: GO 21197
21093: LD_INT 4
21095: DOUBLE
21096: EQUAL
21097: IFTRUE 21101
21099: GO 21175
21101: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21102: LD_ADDR_VAR 0 2
21106: PUSH
21107: LD_INT 22
21109: PUSH
21110: LD_OWVAR 2
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 30
21121: PUSH
21122: LD_INT 29
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PPUSH
21133: CALL_OW 69
21137: ST_TO_ADDR
// if not tmp then
21138: LD_VAR 0 2
21142: NOT
21143: IFFALSE 21147
// exit ;
21145: GO 21197
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21147: LD_VAR 0 2
21151: PUSH
21152: LD_INT 1
21154: ARRAY
21155: PPUSH
21156: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21160: LD_VAR 0 2
21164: PUSH
21165: LD_INT 1
21167: ARRAY
21168: PPUSH
21169: CALL_OW 65
// end ; 5 .. 7 :
21173: GO 21197
21175: LD_INT 5
21177: DOUBLE
21178: GREATEREQUAL
21179: IFFALSE 21187
21181: LD_INT 7
21183: DOUBLE
21184: LESSEQUAL
21185: IFTRUE 21189
21187: GO 21196
21189: POP
// StreamSibBomb ; end ;
21190: CALL 17434 0 0
21194: GO 21197
21196: POP
// end ;
21197: PPOPN 3
21199: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21200: LD_EXP 43
21204: PUSH
21205: LD_EXP 93
21209: AND
21210: IFFALSE 21366
21212: GO 21214
21214: DISABLE
21215: LD_INT 0
21217: PPUSH
21218: PPUSH
21219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21220: LD_ADDR_VAR 0 2
21224: PUSH
21225: LD_INT 81
21227: PUSH
21228: LD_OWVAR 2
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 2
21239: PUSH
21240: LD_INT 21
21242: PUSH
21243: LD_INT 1
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 21
21252: PUSH
21253: LD_INT 2
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: LIST
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PPUSH
21269: CALL_OW 69
21273: ST_TO_ADDR
// if not tmp then
21274: LD_VAR 0 2
21278: NOT
21279: IFFALSE 21283
// exit ;
21281: GO 21366
// p := 0 ;
21283: LD_ADDR_VAR 0 3
21287: PUSH
21288: LD_INT 0
21290: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21291: LD_INT 35
21293: PPUSH
21294: CALL_OW 67
// p := p + 1 ;
21298: LD_ADDR_VAR 0 3
21302: PUSH
21303: LD_VAR 0 3
21307: PUSH
21308: LD_INT 1
21310: PLUS
21311: ST_TO_ADDR
// for i in tmp do
21312: LD_ADDR_VAR 0 1
21316: PUSH
21317: LD_VAR 0 2
21321: PUSH
21322: FOR_IN
21323: IFFALSE 21354
// if GetLives ( i ) < 1000 then
21325: LD_VAR 0 1
21329: PPUSH
21330: CALL_OW 256
21334: PUSH
21335: LD_INT 1000
21337: LESS
21338: IFFALSE 21352
// SetLives ( i , 1000 ) ;
21340: LD_VAR 0 1
21344: PPUSH
21345: LD_INT 1000
21347: PPUSH
21348: CALL_OW 234
21352: GO 21322
21354: POP
21355: POP
// until p > 20 ;
21356: LD_VAR 0 3
21360: PUSH
21361: LD_INT 20
21363: GREATER
21364: IFFALSE 21291
// end ;
21366: PPOPN 3
21368: END
// every 0 0$1 trigger StreamModeActive and sTime do
21369: LD_EXP 43
21373: PUSH
21374: LD_EXP 94
21378: AND
21379: IFFALSE 21414
21381: GO 21383
21383: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21384: LD_INT 28
21386: PPUSH
21387: LD_OWVAR 2
21391: PPUSH
21392: LD_INT 2
21394: PPUSH
21395: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21399: LD_INT 30
21401: PPUSH
21402: LD_OWVAR 2
21406: PPUSH
21407: LD_INT 2
21409: PPUSH
21410: CALL_OW 322
// end ;
21414: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21415: LD_EXP 43
21419: PUSH
21420: LD_EXP 95
21424: AND
21425: IFFALSE 21546
21427: GO 21429
21429: DISABLE
21430: LD_INT 0
21432: PPUSH
21433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21434: LD_ADDR_VAR 0 2
21438: PUSH
21439: LD_INT 22
21441: PUSH
21442: LD_OWVAR 2
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 21
21453: PUSH
21454: LD_INT 1
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 3
21463: PUSH
21464: LD_INT 23
21466: PUSH
21467: LD_INT 0
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: LIST
21482: PPUSH
21483: CALL_OW 69
21487: ST_TO_ADDR
// if not tmp then
21488: LD_VAR 0 2
21492: NOT
21493: IFFALSE 21497
// exit ;
21495: GO 21546
// for i in tmp do
21497: LD_ADDR_VAR 0 1
21501: PUSH
21502: LD_VAR 0 2
21506: PUSH
21507: FOR_IN
21508: IFFALSE 21544
// begin if Crawls ( i ) then
21510: LD_VAR 0 1
21514: PPUSH
21515: CALL_OW 318
21519: IFFALSE 21530
// ComWalk ( i ) ;
21521: LD_VAR 0 1
21525: PPUSH
21526: CALL_OW 138
// SetClass ( i , 2 ) ;
21530: LD_VAR 0 1
21534: PPUSH
21535: LD_INT 2
21537: PPUSH
21538: CALL_OW 336
// end ;
21542: GO 21507
21544: POP
21545: POP
// end ;
21546: PPOPN 2
21548: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21549: LD_EXP 43
21553: PUSH
21554: LD_EXP 96
21558: AND
21559: IFFALSE 21847
21561: GO 21563
21563: DISABLE
21564: LD_INT 0
21566: PPUSH
21567: PPUSH
21568: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21569: LD_OWVAR 2
21573: PPUSH
21574: LD_INT 9
21576: PPUSH
21577: LD_INT 1
21579: PPUSH
21580: LD_INT 1
21582: PPUSH
21583: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21587: LD_INT 9
21589: PPUSH
21590: LD_OWVAR 2
21594: PPUSH
21595: CALL_OW 343
// uc_side := 9 ;
21599: LD_ADDR_OWVAR 20
21603: PUSH
21604: LD_INT 9
21606: ST_TO_ADDR
// uc_nation := 2 ;
21607: LD_ADDR_OWVAR 21
21611: PUSH
21612: LD_INT 2
21614: ST_TO_ADDR
// hc_name := Dark Warrior ;
21615: LD_ADDR_OWVAR 26
21619: PUSH
21620: LD_STRING Dark Warrior
21622: ST_TO_ADDR
// hc_gallery :=  ;
21623: LD_ADDR_OWVAR 33
21627: PUSH
21628: LD_STRING 
21630: ST_TO_ADDR
// hc_noskilllimit := true ;
21631: LD_ADDR_OWVAR 76
21635: PUSH
21636: LD_INT 1
21638: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21639: LD_ADDR_OWVAR 31
21643: PUSH
21644: LD_INT 30
21646: PUSH
21647: LD_INT 30
21649: PUSH
21650: LD_INT 30
21652: PUSH
21653: LD_INT 30
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: ST_TO_ADDR
// un := CreateHuman ;
21662: LD_ADDR_VAR 0 3
21666: PUSH
21667: CALL_OW 44
21671: ST_TO_ADDR
// hc_noskilllimit := false ;
21672: LD_ADDR_OWVAR 76
21676: PUSH
21677: LD_INT 0
21679: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21680: LD_VAR 0 3
21684: PPUSH
21685: LD_INT 1
21687: PPUSH
21688: CALL_OW 51
// ToLua ( playRanger() ) ;
21692: LD_STRING playRanger()
21694: PPUSH
21695: CALL_OW 559
// p := 0 ;
21699: LD_ADDR_VAR 0 2
21703: PUSH
21704: LD_INT 0
21706: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21707: LD_INT 35
21709: PPUSH
21710: CALL_OW 67
// p := p + 1 ;
21714: LD_ADDR_VAR 0 2
21718: PUSH
21719: LD_VAR 0 2
21723: PUSH
21724: LD_INT 1
21726: PLUS
21727: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21728: LD_VAR 0 3
21732: PPUSH
21733: CALL_OW 256
21737: PUSH
21738: LD_INT 1000
21740: LESS
21741: IFFALSE 21755
// SetLives ( un , 1000 ) ;
21743: LD_VAR 0 3
21747: PPUSH
21748: LD_INT 1000
21750: PPUSH
21751: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21755: LD_VAR 0 3
21759: PPUSH
21760: LD_INT 81
21762: PUSH
21763: LD_OWVAR 2
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 91
21774: PUSH
21775: LD_VAR 0 3
21779: PUSH
21780: LD_INT 30
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: LIST
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PPUSH
21792: CALL_OW 69
21796: PPUSH
21797: LD_VAR 0 3
21801: PPUSH
21802: CALL_OW 74
21806: PPUSH
21807: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21811: LD_VAR 0 2
21815: PUSH
21816: LD_INT 80
21818: GREATER
21819: PUSH
21820: LD_VAR 0 3
21824: PPUSH
21825: CALL_OW 301
21829: OR
21830: IFFALSE 21707
// if un then
21832: LD_VAR 0 3
21836: IFFALSE 21847
// RemoveUnit ( un ) ;
21838: LD_VAR 0 3
21842: PPUSH
21843: CALL_OW 64
// end ;
21847: PPOPN 3
21849: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21850: LD_EXP 97
21854: IFFALSE 21970
21856: GO 21858
21858: DISABLE
21859: LD_INT 0
21861: PPUSH
21862: PPUSH
21863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21864: LD_ADDR_VAR 0 2
21868: PUSH
21869: LD_INT 81
21871: PUSH
21872: LD_OWVAR 2
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 21
21883: PUSH
21884: LD_INT 1
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PPUSH
21895: CALL_OW 69
21899: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21900: LD_STRING playComputer()
21902: PPUSH
21903: CALL_OW 559
// if not tmp then
21907: LD_VAR 0 2
21911: NOT
21912: IFFALSE 21916
// exit ;
21914: GO 21970
// for i in tmp do
21916: LD_ADDR_VAR 0 1
21920: PUSH
21921: LD_VAR 0 2
21925: PUSH
21926: FOR_IN
21927: IFFALSE 21968
// for j := 1 to 4 do
21929: LD_ADDR_VAR 0 3
21933: PUSH
21934: DOUBLE
21935: LD_INT 1
21937: DEC
21938: ST_TO_ADDR
21939: LD_INT 4
21941: PUSH
21942: FOR_TO
21943: IFFALSE 21964
// SetSkill ( i , j , 10 ) ;
21945: LD_VAR 0 1
21949: PPUSH
21950: LD_VAR 0 3
21954: PPUSH
21955: LD_INT 10
21957: PPUSH
21958: CALL_OW 237
21962: GO 21942
21964: POP
21965: POP
21966: GO 21926
21968: POP
21969: POP
// end ;
21970: PPOPN 3
21972: END
// every 0 0$1 trigger s30 do var i , tmp ;
21973: LD_EXP 98
21977: IFFALSE 22046
21979: GO 21981
21981: DISABLE
21982: LD_INT 0
21984: PPUSH
21985: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21986: LD_ADDR_VAR 0 2
21990: PUSH
21991: LD_INT 22
21993: PUSH
21994: LD_OWVAR 2
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PPUSH
22003: CALL_OW 69
22007: ST_TO_ADDR
// if not tmp then
22008: LD_VAR 0 2
22012: NOT
22013: IFFALSE 22017
// exit ;
22015: GO 22046
// for i in tmp do
22017: LD_ADDR_VAR 0 1
22021: PUSH
22022: LD_VAR 0 2
22026: PUSH
22027: FOR_IN
22028: IFFALSE 22044
// SetLives ( i , 300 ) ;
22030: LD_VAR 0 1
22034: PPUSH
22035: LD_INT 300
22037: PPUSH
22038: CALL_OW 234
22042: GO 22027
22044: POP
22045: POP
// end ;
22046: PPOPN 2
22048: END
// every 0 0$1 trigger s60 do var i , tmp ;
22049: LD_EXP 99
22053: IFFALSE 22122
22055: GO 22057
22057: DISABLE
22058: LD_INT 0
22060: PPUSH
22061: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22062: LD_ADDR_VAR 0 2
22066: PUSH
22067: LD_INT 22
22069: PUSH
22070: LD_OWVAR 2
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PPUSH
22079: CALL_OW 69
22083: ST_TO_ADDR
// if not tmp then
22084: LD_VAR 0 2
22088: NOT
22089: IFFALSE 22093
// exit ;
22091: GO 22122
// for i in tmp do
22093: LD_ADDR_VAR 0 1
22097: PUSH
22098: LD_VAR 0 2
22102: PUSH
22103: FOR_IN
22104: IFFALSE 22120
// SetLives ( i , 600 ) ;
22106: LD_VAR 0 1
22110: PPUSH
22111: LD_INT 600
22113: PPUSH
22114: CALL_OW 234
22118: GO 22103
22120: POP
22121: POP
// end ;
22122: PPOPN 2
22124: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22125: LD_INT 0
22127: PPUSH
// case cmd of 301 :
22128: LD_VAR 0 1
22132: PUSH
22133: LD_INT 301
22135: DOUBLE
22136: EQUAL
22137: IFTRUE 22141
22139: GO 22173
22141: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22142: LD_VAR 0 6
22146: PPUSH
22147: LD_VAR 0 7
22151: PPUSH
22152: LD_VAR 0 8
22156: PPUSH
22157: LD_VAR 0 4
22161: PPUSH
22162: LD_VAR 0 5
22166: PPUSH
22167: CALL 23374 0 5
22171: GO 22294
22173: LD_INT 302
22175: DOUBLE
22176: EQUAL
22177: IFTRUE 22181
22179: GO 22218
22181: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22182: LD_VAR 0 6
22186: PPUSH
22187: LD_VAR 0 7
22191: PPUSH
22192: LD_VAR 0 8
22196: PPUSH
22197: LD_VAR 0 9
22201: PPUSH
22202: LD_VAR 0 4
22206: PPUSH
22207: LD_VAR 0 5
22211: PPUSH
22212: CALL 23465 0 6
22216: GO 22294
22218: LD_INT 303
22220: DOUBLE
22221: EQUAL
22222: IFTRUE 22226
22224: GO 22263
22226: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22227: LD_VAR 0 6
22231: PPUSH
22232: LD_VAR 0 7
22236: PPUSH
22237: LD_VAR 0 8
22241: PPUSH
22242: LD_VAR 0 9
22246: PPUSH
22247: LD_VAR 0 4
22251: PPUSH
22252: LD_VAR 0 5
22256: PPUSH
22257: CALL 22299 0 6
22261: GO 22294
22263: LD_INT 304
22265: DOUBLE
22266: EQUAL
22267: IFTRUE 22271
22269: GO 22293
22271: POP
// hHackTeleport ( unit , x , y ) ; end ;
22272: LD_VAR 0 2
22276: PPUSH
22277: LD_VAR 0 4
22281: PPUSH
22282: LD_VAR 0 5
22286: PPUSH
22287: CALL 24058 0 3
22291: GO 22294
22293: POP
// end ;
22294: LD_VAR 0 12
22298: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22299: LD_INT 0
22301: PPUSH
22302: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22303: LD_VAR 0 1
22307: PUSH
22308: LD_INT 1
22310: LESS
22311: PUSH
22312: LD_VAR 0 1
22316: PUSH
22317: LD_INT 3
22319: GREATER
22320: OR
22321: PUSH
22322: LD_VAR 0 5
22326: PPUSH
22327: LD_VAR 0 6
22331: PPUSH
22332: CALL_OW 428
22336: OR
22337: IFFALSE 22341
// exit ;
22339: GO 23061
// uc_side := your_side ;
22341: LD_ADDR_OWVAR 20
22345: PUSH
22346: LD_OWVAR 2
22350: ST_TO_ADDR
// uc_nation := nation ;
22351: LD_ADDR_OWVAR 21
22355: PUSH
22356: LD_VAR 0 1
22360: ST_TO_ADDR
// bc_level = 1 ;
22361: LD_ADDR_OWVAR 43
22365: PUSH
22366: LD_INT 1
22368: ST_TO_ADDR
// case btype of 1 :
22369: LD_VAR 0 2
22373: PUSH
22374: LD_INT 1
22376: DOUBLE
22377: EQUAL
22378: IFTRUE 22382
22380: GO 22393
22382: POP
// bc_type := b_depot ; 2 :
22383: LD_ADDR_OWVAR 42
22387: PUSH
22388: LD_INT 0
22390: ST_TO_ADDR
22391: GO 23005
22393: LD_INT 2
22395: DOUBLE
22396: EQUAL
22397: IFTRUE 22401
22399: GO 22412
22401: POP
// bc_type := b_warehouse ; 3 :
22402: LD_ADDR_OWVAR 42
22406: PUSH
22407: LD_INT 1
22409: ST_TO_ADDR
22410: GO 23005
22412: LD_INT 3
22414: DOUBLE
22415: EQUAL
22416: IFTRUE 22420
22418: GO 22431
22420: POP
// bc_type := b_lab ; 4 .. 9 :
22421: LD_ADDR_OWVAR 42
22425: PUSH
22426: LD_INT 6
22428: ST_TO_ADDR
22429: GO 23005
22431: LD_INT 4
22433: DOUBLE
22434: GREATEREQUAL
22435: IFFALSE 22443
22437: LD_INT 9
22439: DOUBLE
22440: LESSEQUAL
22441: IFTRUE 22445
22443: GO 22497
22445: POP
// begin bc_type := b_lab_half ;
22446: LD_ADDR_OWVAR 42
22450: PUSH
22451: LD_INT 7
22453: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22454: LD_ADDR_OWVAR 44
22458: PUSH
22459: LD_INT 10
22461: PUSH
22462: LD_INT 11
22464: PUSH
22465: LD_INT 12
22467: PUSH
22468: LD_INT 15
22470: PUSH
22471: LD_INT 14
22473: PUSH
22474: LD_INT 13
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: PUSH
22485: LD_VAR 0 2
22489: PUSH
22490: LD_INT 3
22492: MINUS
22493: ARRAY
22494: ST_TO_ADDR
// end ; 10 .. 13 :
22495: GO 23005
22497: LD_INT 10
22499: DOUBLE
22500: GREATEREQUAL
22501: IFFALSE 22509
22503: LD_INT 13
22505: DOUBLE
22506: LESSEQUAL
22507: IFTRUE 22511
22509: GO 22588
22511: POP
// begin bc_type := b_lab_full ;
22512: LD_ADDR_OWVAR 42
22516: PUSH
22517: LD_INT 8
22519: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22520: LD_ADDR_OWVAR 44
22524: PUSH
22525: LD_INT 10
22527: PUSH
22528: LD_INT 12
22530: PUSH
22531: LD_INT 14
22533: PUSH
22534: LD_INT 13
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: PUSH
22543: LD_VAR 0 2
22547: PUSH
22548: LD_INT 9
22550: MINUS
22551: ARRAY
22552: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22553: LD_ADDR_OWVAR 45
22557: PUSH
22558: LD_INT 11
22560: PUSH
22561: LD_INT 15
22563: PUSH
22564: LD_INT 12
22566: PUSH
22567: LD_INT 15
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: PUSH
22576: LD_VAR 0 2
22580: PUSH
22581: LD_INT 9
22583: MINUS
22584: ARRAY
22585: ST_TO_ADDR
// end ; 14 :
22586: GO 23005
22588: LD_INT 14
22590: DOUBLE
22591: EQUAL
22592: IFTRUE 22596
22594: GO 22607
22596: POP
// bc_type := b_workshop ; 15 :
22597: LD_ADDR_OWVAR 42
22601: PUSH
22602: LD_INT 2
22604: ST_TO_ADDR
22605: GO 23005
22607: LD_INT 15
22609: DOUBLE
22610: EQUAL
22611: IFTRUE 22615
22613: GO 22626
22615: POP
// bc_type := b_factory ; 16 :
22616: LD_ADDR_OWVAR 42
22620: PUSH
22621: LD_INT 3
22623: ST_TO_ADDR
22624: GO 23005
22626: LD_INT 16
22628: DOUBLE
22629: EQUAL
22630: IFTRUE 22634
22632: GO 22645
22634: POP
// bc_type := b_ext_gun ; 17 :
22635: LD_ADDR_OWVAR 42
22639: PUSH
22640: LD_INT 17
22642: ST_TO_ADDR
22643: GO 23005
22645: LD_INT 17
22647: DOUBLE
22648: EQUAL
22649: IFTRUE 22653
22651: GO 22681
22653: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22654: LD_ADDR_OWVAR 42
22658: PUSH
22659: LD_INT 19
22661: PUSH
22662: LD_INT 23
22664: PUSH
22665: LD_INT 19
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: PUSH
22673: LD_VAR 0 1
22677: ARRAY
22678: ST_TO_ADDR
22679: GO 23005
22681: LD_INT 18
22683: DOUBLE
22684: EQUAL
22685: IFTRUE 22689
22687: GO 22700
22689: POP
// bc_type := b_ext_radar ; 19 :
22690: LD_ADDR_OWVAR 42
22694: PUSH
22695: LD_INT 20
22697: ST_TO_ADDR
22698: GO 23005
22700: LD_INT 19
22702: DOUBLE
22703: EQUAL
22704: IFTRUE 22708
22706: GO 22719
22708: POP
// bc_type := b_ext_radio ; 20 :
22709: LD_ADDR_OWVAR 42
22713: PUSH
22714: LD_INT 22
22716: ST_TO_ADDR
22717: GO 23005
22719: LD_INT 20
22721: DOUBLE
22722: EQUAL
22723: IFTRUE 22727
22725: GO 22738
22727: POP
// bc_type := b_ext_siberium ; 21 :
22728: LD_ADDR_OWVAR 42
22732: PUSH
22733: LD_INT 21
22735: ST_TO_ADDR
22736: GO 23005
22738: LD_INT 21
22740: DOUBLE
22741: EQUAL
22742: IFTRUE 22746
22744: GO 22757
22746: POP
// bc_type := b_ext_computer ; 22 :
22747: LD_ADDR_OWVAR 42
22751: PUSH
22752: LD_INT 24
22754: ST_TO_ADDR
22755: GO 23005
22757: LD_INT 22
22759: DOUBLE
22760: EQUAL
22761: IFTRUE 22765
22763: GO 22776
22765: POP
// bc_type := b_ext_track ; 23 :
22766: LD_ADDR_OWVAR 42
22770: PUSH
22771: LD_INT 16
22773: ST_TO_ADDR
22774: GO 23005
22776: LD_INT 23
22778: DOUBLE
22779: EQUAL
22780: IFTRUE 22784
22782: GO 22795
22784: POP
// bc_type := b_ext_laser ; 24 :
22785: LD_ADDR_OWVAR 42
22789: PUSH
22790: LD_INT 25
22792: ST_TO_ADDR
22793: GO 23005
22795: LD_INT 24
22797: DOUBLE
22798: EQUAL
22799: IFTRUE 22803
22801: GO 22814
22803: POP
// bc_type := b_control_tower ; 25 :
22804: LD_ADDR_OWVAR 42
22808: PUSH
22809: LD_INT 36
22811: ST_TO_ADDR
22812: GO 23005
22814: LD_INT 25
22816: DOUBLE
22817: EQUAL
22818: IFTRUE 22822
22820: GO 22833
22822: POP
// bc_type := b_breastwork ; 26 :
22823: LD_ADDR_OWVAR 42
22827: PUSH
22828: LD_INT 31
22830: ST_TO_ADDR
22831: GO 23005
22833: LD_INT 26
22835: DOUBLE
22836: EQUAL
22837: IFTRUE 22841
22839: GO 22852
22841: POP
// bc_type := b_bunker ; 27 :
22842: LD_ADDR_OWVAR 42
22846: PUSH
22847: LD_INT 32
22849: ST_TO_ADDR
22850: GO 23005
22852: LD_INT 27
22854: DOUBLE
22855: EQUAL
22856: IFTRUE 22860
22858: GO 22871
22860: POP
// bc_type := b_turret ; 28 :
22861: LD_ADDR_OWVAR 42
22865: PUSH
22866: LD_INT 33
22868: ST_TO_ADDR
22869: GO 23005
22871: LD_INT 28
22873: DOUBLE
22874: EQUAL
22875: IFTRUE 22879
22877: GO 22890
22879: POP
// bc_type := b_armoury ; 29 :
22880: LD_ADDR_OWVAR 42
22884: PUSH
22885: LD_INT 4
22887: ST_TO_ADDR
22888: GO 23005
22890: LD_INT 29
22892: DOUBLE
22893: EQUAL
22894: IFTRUE 22898
22896: GO 22909
22898: POP
// bc_type := b_barracks ; 30 :
22899: LD_ADDR_OWVAR 42
22903: PUSH
22904: LD_INT 5
22906: ST_TO_ADDR
22907: GO 23005
22909: LD_INT 30
22911: DOUBLE
22912: EQUAL
22913: IFTRUE 22917
22915: GO 22928
22917: POP
// bc_type := b_solar_power ; 31 :
22918: LD_ADDR_OWVAR 42
22922: PUSH
22923: LD_INT 27
22925: ST_TO_ADDR
22926: GO 23005
22928: LD_INT 31
22930: DOUBLE
22931: EQUAL
22932: IFTRUE 22936
22934: GO 22947
22936: POP
// bc_type := b_oil_power ; 32 :
22937: LD_ADDR_OWVAR 42
22941: PUSH
22942: LD_INT 26
22944: ST_TO_ADDR
22945: GO 23005
22947: LD_INT 32
22949: DOUBLE
22950: EQUAL
22951: IFTRUE 22955
22953: GO 22966
22955: POP
// bc_type := b_siberite_power ; 33 :
22956: LD_ADDR_OWVAR 42
22960: PUSH
22961: LD_INT 28
22963: ST_TO_ADDR
22964: GO 23005
22966: LD_INT 33
22968: DOUBLE
22969: EQUAL
22970: IFTRUE 22974
22972: GO 22985
22974: POP
// bc_type := b_oil_mine ; 34 :
22975: LD_ADDR_OWVAR 42
22979: PUSH
22980: LD_INT 29
22982: ST_TO_ADDR
22983: GO 23005
22985: LD_INT 34
22987: DOUBLE
22988: EQUAL
22989: IFTRUE 22993
22991: GO 23004
22993: POP
// bc_type := b_siberite_mine ; end ;
22994: LD_ADDR_OWVAR 42
22998: PUSH
22999: LD_INT 30
23001: ST_TO_ADDR
23002: GO 23005
23004: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23005: LD_ADDR_VAR 0 8
23009: PUSH
23010: LD_VAR 0 5
23014: PPUSH
23015: LD_VAR 0 6
23019: PPUSH
23020: LD_VAR 0 3
23024: PPUSH
23025: CALL_OW 47
23029: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23030: LD_OWVAR 42
23034: PUSH
23035: LD_INT 32
23037: PUSH
23038: LD_INT 33
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: IN
23045: IFFALSE 23061
// PlaceWeaponTurret ( b , weapon ) ;
23047: LD_VAR 0 8
23051: PPUSH
23052: LD_VAR 0 4
23056: PPUSH
23057: CALL_OW 431
// end ;
23061: LD_VAR 0 7
23065: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23066: LD_INT 0
23068: PPUSH
23069: PPUSH
23070: PPUSH
23071: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23072: LD_ADDR_VAR 0 4
23076: PUSH
23077: LD_INT 22
23079: PUSH
23080: LD_OWVAR 2
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 2
23091: PUSH
23092: LD_INT 30
23094: PUSH
23095: LD_INT 0
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 30
23104: PUSH
23105: LD_INT 1
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PPUSH
23121: CALL_OW 69
23125: ST_TO_ADDR
// if not tmp then
23126: LD_VAR 0 4
23130: NOT
23131: IFFALSE 23135
// exit ;
23133: GO 23194
// for i in tmp do
23135: LD_ADDR_VAR 0 2
23139: PUSH
23140: LD_VAR 0 4
23144: PUSH
23145: FOR_IN
23146: IFFALSE 23192
// for j = 1 to 3 do
23148: LD_ADDR_VAR 0 3
23152: PUSH
23153: DOUBLE
23154: LD_INT 1
23156: DEC
23157: ST_TO_ADDR
23158: LD_INT 3
23160: PUSH
23161: FOR_TO
23162: IFFALSE 23188
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23164: LD_VAR 0 2
23168: PPUSH
23169: CALL_OW 274
23173: PPUSH
23174: LD_VAR 0 3
23178: PPUSH
23179: LD_INT 99999
23181: PPUSH
23182: CALL_OW 277
23186: GO 23161
23188: POP
23189: POP
23190: GO 23145
23192: POP
23193: POP
// end ;
23194: LD_VAR 0 1
23198: RET
// export function hHackSetLevel10 ; var i , j ; begin
23199: LD_INT 0
23201: PPUSH
23202: PPUSH
23203: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23204: LD_ADDR_VAR 0 2
23208: PUSH
23209: LD_INT 21
23211: PUSH
23212: LD_INT 1
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PPUSH
23219: CALL_OW 69
23223: PUSH
23224: FOR_IN
23225: IFFALSE 23277
// if IsSelected ( i ) then
23227: LD_VAR 0 2
23231: PPUSH
23232: CALL_OW 306
23236: IFFALSE 23275
// begin for j := 1 to 4 do
23238: LD_ADDR_VAR 0 3
23242: PUSH
23243: DOUBLE
23244: LD_INT 1
23246: DEC
23247: ST_TO_ADDR
23248: LD_INT 4
23250: PUSH
23251: FOR_TO
23252: IFFALSE 23273
// SetSkill ( i , j , 10 ) ;
23254: LD_VAR 0 2
23258: PPUSH
23259: LD_VAR 0 3
23263: PPUSH
23264: LD_INT 10
23266: PPUSH
23267: CALL_OW 237
23271: GO 23251
23273: POP
23274: POP
// end ;
23275: GO 23224
23277: POP
23278: POP
// end ;
23279: LD_VAR 0 1
23283: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23284: LD_INT 0
23286: PPUSH
23287: PPUSH
23288: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23289: LD_ADDR_VAR 0 2
23293: PUSH
23294: LD_INT 22
23296: PUSH
23297: LD_OWVAR 2
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 21
23308: PUSH
23309: LD_INT 1
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PPUSH
23320: CALL_OW 69
23324: PUSH
23325: FOR_IN
23326: IFFALSE 23367
// begin for j := 1 to 4 do
23328: LD_ADDR_VAR 0 3
23332: PUSH
23333: DOUBLE
23334: LD_INT 1
23336: DEC
23337: ST_TO_ADDR
23338: LD_INT 4
23340: PUSH
23341: FOR_TO
23342: IFFALSE 23363
// SetSkill ( i , j , 10 ) ;
23344: LD_VAR 0 2
23348: PPUSH
23349: LD_VAR 0 3
23353: PPUSH
23354: LD_INT 10
23356: PPUSH
23357: CALL_OW 237
23361: GO 23341
23363: POP
23364: POP
// end ;
23365: GO 23325
23367: POP
23368: POP
// end ;
23369: LD_VAR 0 1
23373: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23374: LD_INT 0
23376: PPUSH
// uc_side := your_side ;
23377: LD_ADDR_OWVAR 20
23381: PUSH
23382: LD_OWVAR 2
23386: ST_TO_ADDR
// uc_nation := nation ;
23387: LD_ADDR_OWVAR 21
23391: PUSH
23392: LD_VAR 0 1
23396: ST_TO_ADDR
// InitHc ;
23397: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23401: LD_INT 0
23403: PPUSH
23404: LD_VAR 0 2
23408: PPUSH
23409: LD_VAR 0 3
23413: PPUSH
23414: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23418: LD_VAR 0 4
23422: PPUSH
23423: LD_VAR 0 5
23427: PPUSH
23428: CALL_OW 428
23432: PUSH
23433: LD_INT 0
23435: EQUAL
23436: IFFALSE 23460
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23438: CALL_OW 44
23442: PPUSH
23443: LD_VAR 0 4
23447: PPUSH
23448: LD_VAR 0 5
23452: PPUSH
23453: LD_INT 1
23455: PPUSH
23456: CALL_OW 48
// end ;
23460: LD_VAR 0 6
23464: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23465: LD_INT 0
23467: PPUSH
23468: PPUSH
// uc_side := your_side ;
23469: LD_ADDR_OWVAR 20
23473: PUSH
23474: LD_OWVAR 2
23478: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23479: LD_VAR 0 1
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: LD_INT 2
23489: PUSH
23490: LD_INT 3
23492: PUSH
23493: LD_INT 4
23495: PUSH
23496: LD_INT 5
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: IN
23506: IFFALSE 23518
// uc_nation := nation_american else
23508: LD_ADDR_OWVAR 21
23512: PUSH
23513: LD_INT 1
23515: ST_TO_ADDR
23516: GO 23561
// if chassis in [ 11 , 12 , 13 , 14 ] then
23518: LD_VAR 0 1
23522: PUSH
23523: LD_INT 11
23525: PUSH
23526: LD_INT 12
23528: PUSH
23529: LD_INT 13
23531: PUSH
23532: LD_INT 14
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: IN
23541: IFFALSE 23553
// uc_nation := nation_arabian else
23543: LD_ADDR_OWVAR 21
23547: PUSH
23548: LD_INT 2
23550: ST_TO_ADDR
23551: GO 23561
// uc_nation := nation_russian ;
23553: LD_ADDR_OWVAR 21
23557: PUSH
23558: LD_INT 3
23560: ST_TO_ADDR
// vc_chassis := chassis ;
23561: LD_ADDR_OWVAR 37
23565: PUSH
23566: LD_VAR 0 1
23570: ST_TO_ADDR
// vc_engine := engine ;
23571: LD_ADDR_OWVAR 39
23575: PUSH
23576: LD_VAR 0 2
23580: ST_TO_ADDR
// vc_control := control ;
23581: LD_ADDR_OWVAR 38
23585: PUSH
23586: LD_VAR 0 3
23590: ST_TO_ADDR
// vc_weapon := weapon ;
23591: LD_ADDR_OWVAR 40
23595: PUSH
23596: LD_VAR 0 4
23600: ST_TO_ADDR
// un := CreateVehicle ;
23601: LD_ADDR_VAR 0 8
23605: PUSH
23606: CALL_OW 45
23610: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23611: LD_VAR 0 8
23615: PPUSH
23616: LD_INT 0
23618: PPUSH
23619: LD_INT 5
23621: PPUSH
23622: CALL_OW 12
23626: PPUSH
23627: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23631: LD_VAR 0 8
23635: PPUSH
23636: LD_VAR 0 5
23640: PPUSH
23641: LD_VAR 0 6
23645: PPUSH
23646: LD_INT 1
23648: PPUSH
23649: CALL_OW 48
// end ;
23653: LD_VAR 0 7
23657: RET
// export hInvincible ; every 1 do
23658: GO 23660
23660: DISABLE
// hInvincible := [ ] ;
23661: LD_ADDR_EXP 100
23665: PUSH
23666: EMPTY
23667: ST_TO_ADDR
23668: END
// every 10 do var i ;
23669: GO 23671
23671: DISABLE
23672: LD_INT 0
23674: PPUSH
// begin enable ;
23675: ENABLE
// if not hInvincible then
23676: LD_EXP 100
23680: NOT
23681: IFFALSE 23685
// exit ;
23683: GO 23729
// for i in hInvincible do
23685: LD_ADDR_VAR 0 1
23689: PUSH
23690: LD_EXP 100
23694: PUSH
23695: FOR_IN
23696: IFFALSE 23727
// if GetLives ( i ) < 1000 then
23698: LD_VAR 0 1
23702: PPUSH
23703: CALL_OW 256
23707: PUSH
23708: LD_INT 1000
23710: LESS
23711: IFFALSE 23725
// SetLives ( i , 1000 ) ;
23713: LD_VAR 0 1
23717: PPUSH
23718: LD_INT 1000
23720: PPUSH
23721: CALL_OW 234
23725: GO 23695
23727: POP
23728: POP
// end ;
23729: PPOPN 1
23731: END
// export function hHackInvincible ; var i ; begin
23732: LD_INT 0
23734: PPUSH
23735: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23736: LD_ADDR_VAR 0 2
23740: PUSH
23741: LD_INT 2
23743: PUSH
23744: LD_INT 21
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 21
23756: PUSH
23757: LD_INT 2
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: LIST
23768: PPUSH
23769: CALL_OW 69
23773: PUSH
23774: FOR_IN
23775: IFFALSE 23836
// if IsSelected ( i ) then
23777: LD_VAR 0 2
23781: PPUSH
23782: CALL_OW 306
23786: IFFALSE 23834
// begin if i in hInvincible then
23788: LD_VAR 0 2
23792: PUSH
23793: LD_EXP 100
23797: IN
23798: IFFALSE 23818
// hInvincible := hInvincible diff i else
23800: LD_ADDR_EXP 100
23804: PUSH
23805: LD_EXP 100
23809: PUSH
23810: LD_VAR 0 2
23814: DIFF
23815: ST_TO_ADDR
23816: GO 23834
// hInvincible := hInvincible union i ;
23818: LD_ADDR_EXP 100
23822: PUSH
23823: LD_EXP 100
23827: PUSH
23828: LD_VAR 0 2
23832: UNION
23833: ST_TO_ADDR
// end ;
23834: GO 23774
23836: POP
23837: POP
// end ;
23838: LD_VAR 0 1
23842: RET
// export function hHackInvisible ; var i , j ; begin
23843: LD_INT 0
23845: PPUSH
23846: PPUSH
23847: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23848: LD_ADDR_VAR 0 2
23852: PUSH
23853: LD_INT 21
23855: PUSH
23856: LD_INT 1
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PPUSH
23863: CALL_OW 69
23867: PUSH
23868: FOR_IN
23869: IFFALSE 23893
// if IsSelected ( i ) then
23871: LD_VAR 0 2
23875: PPUSH
23876: CALL_OW 306
23880: IFFALSE 23891
// ComForceInvisible ( i ) ;
23882: LD_VAR 0 2
23886: PPUSH
23887: CALL_OW 496
23891: GO 23868
23893: POP
23894: POP
// end ;
23895: LD_VAR 0 1
23899: RET
// export function hHackChangeYourSide ; begin
23900: LD_INT 0
23902: PPUSH
// if your_side = 8 then
23903: LD_OWVAR 2
23907: PUSH
23908: LD_INT 8
23910: EQUAL
23911: IFFALSE 23923
// your_side := 0 else
23913: LD_ADDR_OWVAR 2
23917: PUSH
23918: LD_INT 0
23920: ST_TO_ADDR
23921: GO 23937
// your_side := your_side + 1 ;
23923: LD_ADDR_OWVAR 2
23927: PUSH
23928: LD_OWVAR 2
23932: PUSH
23933: LD_INT 1
23935: PLUS
23936: ST_TO_ADDR
// end ;
23937: LD_VAR 0 1
23941: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23942: LD_INT 0
23944: PPUSH
23945: PPUSH
23946: PPUSH
// for i in all_units do
23947: LD_ADDR_VAR 0 2
23951: PUSH
23952: LD_OWVAR 3
23956: PUSH
23957: FOR_IN
23958: IFFALSE 24036
// if IsSelected ( i ) then
23960: LD_VAR 0 2
23964: PPUSH
23965: CALL_OW 306
23969: IFFALSE 24034
// begin j := GetSide ( i ) ;
23971: LD_ADDR_VAR 0 3
23975: PUSH
23976: LD_VAR 0 2
23980: PPUSH
23981: CALL_OW 255
23985: ST_TO_ADDR
// if j = 8 then
23986: LD_VAR 0 3
23990: PUSH
23991: LD_INT 8
23993: EQUAL
23994: IFFALSE 24006
// j := 0 else
23996: LD_ADDR_VAR 0 3
24000: PUSH
24001: LD_INT 0
24003: ST_TO_ADDR
24004: GO 24020
// j := j + 1 ;
24006: LD_ADDR_VAR 0 3
24010: PUSH
24011: LD_VAR 0 3
24015: PUSH
24016: LD_INT 1
24018: PLUS
24019: ST_TO_ADDR
// SetSide ( i , j ) ;
24020: LD_VAR 0 2
24024: PPUSH
24025: LD_VAR 0 3
24029: PPUSH
24030: CALL_OW 235
// end ;
24034: GO 23957
24036: POP
24037: POP
// end ;
24038: LD_VAR 0 1
24042: RET
// export function hHackFog ; begin
24043: LD_INT 0
24045: PPUSH
// FogOff ( true ) ;
24046: LD_INT 1
24048: PPUSH
24049: CALL_OW 344
// end ;
24053: LD_VAR 0 1
24057: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24058: LD_INT 0
24060: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24061: LD_VAR 0 1
24065: PPUSH
24066: LD_VAR 0 2
24070: PPUSH
24071: LD_VAR 0 3
24075: PPUSH
24076: LD_INT 1
24078: PPUSH
24079: LD_INT 1
24081: PPUSH
24082: CALL_OW 483
// CenterOnXY ( x , y ) ;
24086: LD_VAR 0 2
24090: PPUSH
24091: LD_VAR 0 3
24095: PPUSH
24096: CALL_OW 84
// end ; end_of_file
24100: LD_VAR 0 4
24104: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
24105: LD_VAR 0 1
24109: PUSH
24110: LD_INT 200
24112: DOUBLE
24113: GREATEREQUAL
24114: IFFALSE 24122
24116: LD_INT 299
24118: DOUBLE
24119: LESSEQUAL
24120: IFTRUE 24124
24122: GO 24156
24124: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
24125: LD_VAR 0 1
24129: PPUSH
24130: LD_VAR 0 2
24134: PPUSH
24135: LD_VAR 0 3
24139: PPUSH
24140: LD_VAR 0 4
24144: PPUSH
24145: LD_VAR 0 5
24149: PPUSH
24150: CALL 24646 0 5
24154: GO 24233
24156: LD_INT 300
24158: DOUBLE
24159: GREATEREQUAL
24160: IFFALSE 24168
24162: LD_INT 399
24164: DOUBLE
24165: LESSEQUAL
24166: IFTRUE 24170
24168: GO 24232
24170: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
24171: LD_VAR 0 1
24175: PPUSH
24176: LD_VAR 0 2
24180: PPUSH
24181: LD_VAR 0 3
24185: PPUSH
24186: LD_VAR 0 4
24190: PPUSH
24191: LD_VAR 0 5
24195: PPUSH
24196: LD_VAR 0 6
24200: PPUSH
24201: LD_VAR 0 7
24205: PPUSH
24206: LD_VAR 0 8
24210: PPUSH
24211: LD_VAR 0 9
24215: PPUSH
24216: LD_VAR 0 10
24220: PPUSH
24221: LD_VAR 0 11
24225: PPUSH
24226: CALL 22125 0 11
24230: GO 24233
24232: POP
// end ;
24233: PPOPN 11
24235: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
24236: LD_VAR 0 1
24240: PPUSH
24241: LD_VAR 0 2
24245: PPUSH
24246: LD_VAR 0 3
24250: PPUSH
24251: LD_VAR 0 4
24255: PPUSH
24256: LD_VAR 0 5
24260: PPUSH
24261: CALL 24382 0 5
// end ; end_of_file
24265: PPOPN 5
24267: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24268: LD_INT 0
24270: PPUSH
24271: PPUSH
24272: PPUSH
24273: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24274: LD_VAR 0 1
24278: PPUSH
24279: CALL_OW 264
24283: PUSH
24284: LD_EXP 116
24288: EQUAL
24289: IFFALSE 24361
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24291: LD_INT 68
24293: PPUSH
24294: LD_VAR 0 1
24298: PPUSH
24299: CALL_OW 255
24303: PPUSH
24304: CALL_OW 321
24308: PUSH
24309: LD_INT 2
24311: EQUAL
24312: IFFALSE 24324
// eff := 70 else
24314: LD_ADDR_VAR 0 4
24318: PUSH
24319: LD_INT 70
24321: ST_TO_ADDR
24322: GO 24332
// eff := 30 ;
24324: LD_ADDR_VAR 0 4
24328: PUSH
24329: LD_INT 30
24331: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24332: LD_VAR 0 1
24336: PPUSH
24337: CALL_OW 250
24341: PPUSH
24342: LD_VAR 0 1
24346: PPUSH
24347: CALL_OW 251
24351: PPUSH
24352: LD_VAR 0 4
24356: PPUSH
24357: CALL_OW 495
// end ; end ;
24361: LD_VAR 0 2
24365: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24366: LD_INT 0
24368: PPUSH
// end ;
24369: LD_VAR 0 4
24373: RET
// export function SOS_Command ( cmd ) ; begin
24374: LD_INT 0
24376: PPUSH
// end ;
24377: LD_VAR 0 2
24381: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24382: LD_INT 0
24384: PPUSH
// end ;
24385: LD_VAR 0 6
24389: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24390: LD_INT 0
24392: PPUSH
24393: PPUSH
// if not vehicle or not factory then
24394: LD_VAR 0 1
24398: NOT
24399: PUSH
24400: LD_VAR 0 2
24404: NOT
24405: OR
24406: IFFALSE 24410
// exit ;
24408: GO 24641
// if factoryWaypoints >= factory then
24410: LD_EXP 101
24414: PUSH
24415: LD_VAR 0 2
24419: GREATEREQUAL
24420: IFFALSE 24641
// if factoryWaypoints [ factory ] then
24422: LD_EXP 101
24426: PUSH
24427: LD_VAR 0 2
24431: ARRAY
24432: IFFALSE 24641
// begin if GetControl ( vehicle ) = control_manual then
24434: LD_VAR 0 1
24438: PPUSH
24439: CALL_OW 263
24443: PUSH
24444: LD_INT 1
24446: EQUAL
24447: IFFALSE 24528
// begin driver := IsDrivenBy ( vehicle ) ;
24449: LD_ADDR_VAR 0 4
24453: PUSH
24454: LD_VAR 0 1
24458: PPUSH
24459: CALL_OW 311
24463: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24464: LD_VAR 0 4
24468: PPUSH
24469: LD_EXP 101
24473: PUSH
24474: LD_VAR 0 2
24478: ARRAY
24479: PUSH
24480: LD_INT 3
24482: ARRAY
24483: PPUSH
24484: LD_EXP 101
24488: PUSH
24489: LD_VAR 0 2
24493: ARRAY
24494: PUSH
24495: LD_INT 4
24497: ARRAY
24498: PPUSH
24499: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24503: LD_VAR 0 4
24507: PPUSH
24508: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24512: LD_VAR 0 4
24516: PPUSH
24517: LD_VAR 0 2
24521: PPUSH
24522: CALL_OW 180
// end else
24526: GO 24641
// if GetControl ( vehicle ) = control_remote then
24528: LD_VAR 0 1
24532: PPUSH
24533: CALL_OW 263
24537: PUSH
24538: LD_INT 2
24540: EQUAL
24541: IFFALSE 24602
// begin wait ( 0 0$2 ) ;
24543: LD_INT 70
24545: PPUSH
24546: CALL_OW 67
// if Connect ( vehicle ) then
24550: LD_VAR 0 1
24554: PPUSH
24555: CALL 36865 0 1
24559: IFFALSE 24600
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24561: LD_VAR 0 1
24565: PPUSH
24566: LD_EXP 101
24570: PUSH
24571: LD_VAR 0 2
24575: ARRAY
24576: PUSH
24577: LD_INT 3
24579: ARRAY
24580: PPUSH
24581: LD_EXP 101
24585: PUSH
24586: LD_VAR 0 2
24590: ARRAY
24591: PUSH
24592: LD_INT 4
24594: ARRAY
24595: PPUSH
24596: CALL_OW 171
// end else
24600: GO 24641
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24602: LD_VAR 0 1
24606: PPUSH
24607: LD_EXP 101
24611: PUSH
24612: LD_VAR 0 2
24616: ARRAY
24617: PUSH
24618: LD_INT 3
24620: ARRAY
24621: PPUSH
24622: LD_EXP 101
24626: PUSH
24627: LD_VAR 0 2
24631: ARRAY
24632: PUSH
24633: LD_INT 4
24635: ARRAY
24636: PPUSH
24637: CALL_OW 171
// end ; end ;
24641: LD_VAR 0 3
24645: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24646: LD_INT 0
24648: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24649: LD_VAR 0 1
24653: PUSH
24654: LD_INT 250
24656: EQUAL
24657: PUSH
24658: LD_VAR 0 2
24662: PPUSH
24663: CALL_OW 264
24667: PUSH
24668: LD_EXP 119
24672: EQUAL
24673: AND
24674: IFFALSE 24695
// MinerPlaceMine ( unit , x , y ) ;
24676: LD_VAR 0 2
24680: PPUSH
24681: LD_VAR 0 4
24685: PPUSH
24686: LD_VAR 0 5
24690: PPUSH
24691: CALL 27423 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24695: LD_VAR 0 1
24699: PUSH
24700: LD_INT 251
24702: EQUAL
24703: PUSH
24704: LD_VAR 0 2
24708: PPUSH
24709: CALL_OW 264
24713: PUSH
24714: LD_EXP 119
24718: EQUAL
24719: AND
24720: IFFALSE 24741
// MinerDetonateMine ( unit , x , y ) ;
24722: LD_VAR 0 2
24726: PPUSH
24727: LD_VAR 0 4
24731: PPUSH
24732: LD_VAR 0 5
24736: PPUSH
24737: CALL 27700 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24741: LD_VAR 0 1
24745: PUSH
24746: LD_INT 252
24748: EQUAL
24749: PUSH
24750: LD_VAR 0 2
24754: PPUSH
24755: CALL_OW 264
24759: PUSH
24760: LD_EXP 119
24764: EQUAL
24765: AND
24766: IFFALSE 24787
// MinerCreateMinefield ( unit , x , y ) ;
24768: LD_VAR 0 2
24772: PPUSH
24773: LD_VAR 0 4
24777: PPUSH
24778: LD_VAR 0 5
24782: PPUSH
24783: CALL 28117 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24787: LD_VAR 0 1
24791: PUSH
24792: LD_INT 253
24794: EQUAL
24795: PUSH
24796: LD_VAR 0 2
24800: PPUSH
24801: CALL_OW 257
24805: PUSH
24806: LD_INT 5
24808: EQUAL
24809: AND
24810: IFFALSE 24831
// ComBinocular ( unit , x , y ) ;
24812: LD_VAR 0 2
24816: PPUSH
24817: LD_VAR 0 4
24821: PPUSH
24822: LD_VAR 0 5
24826: PPUSH
24827: CALL 28488 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24831: LD_VAR 0 1
24835: PUSH
24836: LD_INT 254
24838: EQUAL
24839: PUSH
24840: LD_VAR 0 2
24844: PPUSH
24845: CALL_OW 264
24849: PUSH
24850: LD_EXP 114
24854: EQUAL
24855: AND
24856: PUSH
24857: LD_VAR 0 3
24861: PPUSH
24862: CALL_OW 263
24866: PUSH
24867: LD_INT 3
24869: EQUAL
24870: AND
24871: IFFALSE 24887
// HackDestroyVehicle ( unit , selectedUnit ) ;
24873: LD_VAR 0 2
24877: PPUSH
24878: LD_VAR 0 3
24882: PPUSH
24883: CALL 26783 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24887: LD_VAR 0 1
24891: PUSH
24892: LD_INT 255
24894: EQUAL
24895: PUSH
24896: LD_VAR 0 2
24900: PPUSH
24901: CALL_OW 264
24905: PUSH
24906: LD_INT 14
24908: PUSH
24909: LD_INT 53
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: IN
24916: AND
24917: PUSH
24918: LD_VAR 0 4
24922: PPUSH
24923: LD_VAR 0 5
24927: PPUSH
24928: CALL_OW 488
24932: AND
24933: IFFALSE 24957
// CutTreeXYR ( unit , x , y , 12 ) ;
24935: LD_VAR 0 2
24939: PPUSH
24940: LD_VAR 0 4
24944: PPUSH
24945: LD_VAR 0 5
24949: PPUSH
24950: LD_INT 12
24952: PPUSH
24953: CALL 25349 0 4
// if cmd = 256 then
24957: LD_VAR 0 1
24961: PUSH
24962: LD_INT 256
24964: EQUAL
24965: IFFALSE 24986
// SetFactoryWaypoint ( unit , x , y ) ;
24967: LD_VAR 0 2
24971: PPUSH
24972: LD_VAR 0 4
24976: PPUSH
24977: LD_VAR 0 5
24981: PPUSH
24982: CALL 24991 0 3
// end ;
24986: LD_VAR 0 6
24990: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24991: LD_INT 0
24993: PPUSH
24994: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24995: LD_VAR 0 1
24999: NOT
25000: PUSH
25001: LD_VAR 0 2
25005: PPUSH
25006: LD_VAR 0 3
25010: PPUSH
25011: CALL_OW 488
25015: NOT
25016: OR
25017: PUSH
25018: LD_VAR 0 1
25022: PPUSH
25023: CALL_OW 266
25027: PUSH
25028: LD_INT 3
25030: NONEQUAL
25031: PUSH
25032: LD_VAR 0 1
25036: PPUSH
25037: CALL_OW 247
25041: PUSH
25042: LD_INT 1
25044: EQUAL
25045: NOT
25046: AND
25047: OR
25048: IFFALSE 25052
// exit ;
25050: GO 25201
// if GetType ( factory ) = unit_human then
25052: LD_VAR 0 1
25056: PPUSH
25057: CALL_OW 247
25061: PUSH
25062: LD_INT 1
25064: EQUAL
25065: IFFALSE 25082
// factory := IsInUnit ( factory ) ;
25067: LD_ADDR_VAR 0 1
25071: PUSH
25072: LD_VAR 0 1
25076: PPUSH
25077: CALL_OW 310
25081: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25082: LD_VAR 0 1
25086: PPUSH
25087: CALL_OW 266
25091: PUSH
25092: LD_INT 3
25094: NONEQUAL
25095: IFFALSE 25099
// exit ;
25097: GO 25201
// if HexInfo ( x , y ) = factory then
25099: LD_VAR 0 2
25103: PPUSH
25104: LD_VAR 0 3
25108: PPUSH
25109: CALL_OW 428
25113: PUSH
25114: LD_VAR 0 1
25118: EQUAL
25119: IFFALSE 25146
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25121: LD_ADDR_EXP 101
25125: PUSH
25126: LD_EXP 101
25130: PPUSH
25131: LD_VAR 0 1
25135: PPUSH
25136: LD_INT 0
25138: PPUSH
25139: CALL_OW 1
25143: ST_TO_ADDR
25144: GO 25197
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25146: LD_ADDR_EXP 101
25150: PUSH
25151: LD_EXP 101
25155: PPUSH
25156: LD_VAR 0 1
25160: PPUSH
25161: LD_VAR 0 1
25165: PPUSH
25166: CALL_OW 255
25170: PUSH
25171: LD_VAR 0 1
25175: PUSH
25176: LD_VAR 0 2
25180: PUSH
25181: LD_VAR 0 3
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: PPUSH
25192: CALL_OW 1
25196: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25197: CALL 25206 0 0
// end ;
25201: LD_VAR 0 4
25205: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
25206: LD_INT 0
25208: PPUSH
25209: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25210: LD_STRING resetFactoryWaypoint();
25212: PPUSH
25213: CALL_OW 559
// if factoryWaypoints then
25217: LD_EXP 101
25221: IFFALSE 25344
// begin for i := 1 to factoryWaypoints do
25223: LD_ADDR_VAR 0 2
25227: PUSH
25228: DOUBLE
25229: LD_INT 1
25231: DEC
25232: ST_TO_ADDR
25233: LD_EXP 101
25237: PUSH
25238: FOR_TO
25239: IFFALSE 25342
// if factoryWaypoints [ i ] then
25241: LD_EXP 101
25245: PUSH
25246: LD_VAR 0 2
25250: ARRAY
25251: IFFALSE 25340
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
25253: LD_STRING setFactoryWaypointXY(
25255: PUSH
25256: LD_EXP 101
25260: PUSH
25261: LD_VAR 0 2
25265: ARRAY
25266: PUSH
25267: LD_INT 1
25269: ARRAY
25270: STR
25271: PUSH
25272: LD_STRING ,
25274: STR
25275: PUSH
25276: LD_EXP 101
25280: PUSH
25281: LD_VAR 0 2
25285: ARRAY
25286: PUSH
25287: LD_INT 2
25289: ARRAY
25290: STR
25291: PUSH
25292: LD_STRING ,
25294: STR
25295: PUSH
25296: LD_EXP 101
25300: PUSH
25301: LD_VAR 0 2
25305: ARRAY
25306: PUSH
25307: LD_INT 3
25309: ARRAY
25310: STR
25311: PUSH
25312: LD_STRING ,
25314: STR
25315: PUSH
25316: LD_EXP 101
25320: PUSH
25321: LD_VAR 0 2
25325: ARRAY
25326: PUSH
25327: LD_INT 4
25329: ARRAY
25330: STR
25331: PUSH
25332: LD_STRING )
25334: STR
25335: PPUSH
25336: CALL_OW 559
25340: GO 25238
25342: POP
25343: POP
// end ; end ;
25344: LD_VAR 0 1
25348: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25349: LD_INT 0
25351: PPUSH
25352: PPUSH
25353: PPUSH
25354: PPUSH
25355: PPUSH
25356: PPUSH
25357: PPUSH
25358: PPUSH
25359: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25360: LD_VAR 0 1
25364: NOT
25365: PUSH
25366: LD_VAR 0 2
25370: PPUSH
25371: LD_VAR 0 3
25375: PPUSH
25376: CALL_OW 488
25380: NOT
25381: OR
25382: PUSH
25383: LD_VAR 0 4
25387: NOT
25388: OR
25389: IFFALSE 25393
// exit ;
25391: GO 25733
// list := [ ] ;
25393: LD_ADDR_VAR 0 13
25397: PUSH
25398: EMPTY
25399: ST_TO_ADDR
// if x - r < 0 then
25400: LD_VAR 0 2
25404: PUSH
25405: LD_VAR 0 4
25409: MINUS
25410: PUSH
25411: LD_INT 0
25413: LESS
25414: IFFALSE 25426
// min_x := 0 else
25416: LD_ADDR_VAR 0 7
25420: PUSH
25421: LD_INT 0
25423: ST_TO_ADDR
25424: GO 25442
// min_x := x - r ;
25426: LD_ADDR_VAR 0 7
25430: PUSH
25431: LD_VAR 0 2
25435: PUSH
25436: LD_VAR 0 4
25440: MINUS
25441: ST_TO_ADDR
// if y - r < 0 then
25442: LD_VAR 0 3
25446: PUSH
25447: LD_VAR 0 4
25451: MINUS
25452: PUSH
25453: LD_INT 0
25455: LESS
25456: IFFALSE 25468
// min_y := 0 else
25458: LD_ADDR_VAR 0 8
25462: PUSH
25463: LD_INT 0
25465: ST_TO_ADDR
25466: GO 25484
// min_y := y - r ;
25468: LD_ADDR_VAR 0 8
25472: PUSH
25473: LD_VAR 0 3
25477: PUSH
25478: LD_VAR 0 4
25482: MINUS
25483: ST_TO_ADDR
// max_x := x + r ;
25484: LD_ADDR_VAR 0 9
25488: PUSH
25489: LD_VAR 0 2
25493: PUSH
25494: LD_VAR 0 4
25498: PLUS
25499: ST_TO_ADDR
// max_y := y + r ;
25500: LD_ADDR_VAR 0 10
25504: PUSH
25505: LD_VAR 0 3
25509: PUSH
25510: LD_VAR 0 4
25514: PLUS
25515: ST_TO_ADDR
// for _x = min_x to max_x do
25516: LD_ADDR_VAR 0 11
25520: PUSH
25521: DOUBLE
25522: LD_VAR 0 7
25526: DEC
25527: ST_TO_ADDR
25528: LD_VAR 0 9
25532: PUSH
25533: FOR_TO
25534: IFFALSE 25651
// for _y = min_y to max_y do
25536: LD_ADDR_VAR 0 12
25540: PUSH
25541: DOUBLE
25542: LD_VAR 0 8
25546: DEC
25547: ST_TO_ADDR
25548: LD_VAR 0 10
25552: PUSH
25553: FOR_TO
25554: IFFALSE 25647
// begin if not ValidHex ( _x , _y ) then
25556: LD_VAR 0 11
25560: PPUSH
25561: LD_VAR 0 12
25565: PPUSH
25566: CALL_OW 488
25570: NOT
25571: IFFALSE 25575
// continue ;
25573: GO 25553
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25575: LD_VAR 0 11
25579: PPUSH
25580: LD_VAR 0 12
25584: PPUSH
25585: CALL_OW 351
25589: PUSH
25590: LD_VAR 0 11
25594: PPUSH
25595: LD_VAR 0 12
25599: PPUSH
25600: CALL_OW 554
25604: AND
25605: IFFALSE 25645
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25607: LD_ADDR_VAR 0 13
25611: PUSH
25612: LD_VAR 0 13
25616: PPUSH
25617: LD_VAR 0 13
25621: PUSH
25622: LD_INT 1
25624: PLUS
25625: PPUSH
25626: LD_VAR 0 11
25630: PUSH
25631: LD_VAR 0 12
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PPUSH
25640: CALL_OW 2
25644: ST_TO_ADDR
// end ;
25645: GO 25553
25647: POP
25648: POP
25649: GO 25533
25651: POP
25652: POP
// if not list then
25653: LD_VAR 0 13
25657: NOT
25658: IFFALSE 25662
// exit ;
25660: GO 25733
// for i in list do
25662: LD_ADDR_VAR 0 6
25666: PUSH
25667: LD_VAR 0 13
25671: PUSH
25672: FOR_IN
25673: IFFALSE 25731
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25675: LD_VAR 0 1
25679: PPUSH
25680: LD_STRING M
25682: PUSH
25683: LD_VAR 0 6
25687: PUSH
25688: LD_INT 1
25690: ARRAY
25691: PUSH
25692: LD_VAR 0 6
25696: PUSH
25697: LD_INT 2
25699: ARRAY
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: LD_INT 0
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: PUSH
25722: EMPTY
25723: LIST
25724: PPUSH
25725: CALL_OW 447
25729: GO 25672
25731: POP
25732: POP
// end ;
25733: LD_VAR 0 5
25737: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25738: LD_EXP 102
25742: NOT
25743: IFFALSE 25793
25745: GO 25747
25747: DISABLE
// begin initHack := true ;
25748: LD_ADDR_EXP 102
25752: PUSH
25753: LD_INT 1
25755: ST_TO_ADDR
// hackTanks := [ ] ;
25756: LD_ADDR_EXP 103
25760: PUSH
25761: EMPTY
25762: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25763: LD_ADDR_EXP 104
25767: PUSH
25768: EMPTY
25769: ST_TO_ADDR
// hackLimit := 3 ;
25770: LD_ADDR_EXP 105
25774: PUSH
25775: LD_INT 3
25777: ST_TO_ADDR
// hackDist := 12 ;
25778: LD_ADDR_EXP 106
25782: PUSH
25783: LD_INT 12
25785: ST_TO_ADDR
// hackCounter := [ ] ;
25786: LD_ADDR_EXP 107
25790: PUSH
25791: EMPTY
25792: ST_TO_ADDR
// end ;
25793: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25794: LD_EXP 102
25798: PUSH
25799: LD_INT 34
25801: PUSH
25802: LD_EXP 114
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PPUSH
25811: CALL_OW 69
25815: AND
25816: IFFALSE 26071
25818: GO 25820
25820: DISABLE
25821: LD_INT 0
25823: PPUSH
25824: PPUSH
// begin enable ;
25825: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25826: LD_ADDR_VAR 0 1
25830: PUSH
25831: LD_INT 34
25833: PUSH
25834: LD_EXP 114
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PPUSH
25843: CALL_OW 69
25847: PUSH
25848: FOR_IN
25849: IFFALSE 26069
// begin if not i in hackTanks then
25851: LD_VAR 0 1
25855: PUSH
25856: LD_EXP 103
25860: IN
25861: NOT
25862: IFFALSE 25945
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25864: LD_ADDR_EXP 103
25868: PUSH
25869: LD_EXP 103
25873: PPUSH
25874: LD_EXP 103
25878: PUSH
25879: LD_INT 1
25881: PLUS
25882: PPUSH
25883: LD_VAR 0 1
25887: PPUSH
25888: CALL_OW 1
25892: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25893: LD_ADDR_EXP 104
25897: PUSH
25898: LD_EXP 104
25902: PPUSH
25903: LD_EXP 104
25907: PUSH
25908: LD_INT 1
25910: PLUS
25911: PPUSH
25912: EMPTY
25913: PPUSH
25914: CALL_OW 1
25918: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25919: LD_ADDR_EXP 107
25923: PUSH
25924: LD_EXP 107
25928: PPUSH
25929: LD_EXP 107
25933: PUSH
25934: LD_INT 1
25936: PLUS
25937: PPUSH
25938: EMPTY
25939: PPUSH
25940: CALL_OW 1
25944: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25945: LD_VAR 0 1
25949: PPUSH
25950: CALL_OW 302
25954: NOT
25955: IFFALSE 25968
// begin HackUnlinkAll ( i ) ;
25957: LD_VAR 0 1
25961: PPUSH
25962: CALL 26074 0 1
// continue ;
25966: GO 25848
// end ; HackCheckCapturedStatus ( i ) ;
25968: LD_VAR 0 1
25972: PPUSH
25973: CALL 26517 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25977: LD_ADDR_VAR 0 2
25981: PUSH
25982: LD_INT 81
25984: PUSH
25985: LD_VAR 0 1
25989: PPUSH
25990: CALL_OW 255
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 33
26001: PUSH
26002: LD_INT 3
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 91
26011: PUSH
26012: LD_VAR 0 1
26016: PUSH
26017: LD_EXP 106
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 50
26029: PUSH
26030: EMPTY
26031: LIST
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: PPUSH
26039: CALL_OW 69
26043: ST_TO_ADDR
// if not tmp then
26044: LD_VAR 0 2
26048: NOT
26049: IFFALSE 26053
// continue ;
26051: GO 25848
// HackLink ( i , tmp ) ;
26053: LD_VAR 0 1
26057: PPUSH
26058: LD_VAR 0 2
26062: PPUSH
26063: CALL 26210 0 2
// end ;
26067: GO 25848
26069: POP
26070: POP
// end ;
26071: PPOPN 2
26073: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26074: LD_INT 0
26076: PPUSH
26077: PPUSH
26078: PPUSH
// if not hack in hackTanks then
26079: LD_VAR 0 1
26083: PUSH
26084: LD_EXP 103
26088: IN
26089: NOT
26090: IFFALSE 26094
// exit ;
26092: GO 26205
// index := GetElementIndex ( hackTanks , hack ) ;
26094: LD_ADDR_VAR 0 4
26098: PUSH
26099: LD_EXP 103
26103: PPUSH
26104: LD_VAR 0 1
26108: PPUSH
26109: CALL 33679 0 2
26113: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26114: LD_EXP 104
26118: PUSH
26119: LD_VAR 0 4
26123: ARRAY
26124: IFFALSE 26205
// begin for i in hackTanksCaptured [ index ] do
26126: LD_ADDR_VAR 0 3
26130: PUSH
26131: LD_EXP 104
26135: PUSH
26136: LD_VAR 0 4
26140: ARRAY
26141: PUSH
26142: FOR_IN
26143: IFFALSE 26169
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26145: LD_VAR 0 3
26149: PUSH
26150: LD_INT 1
26152: ARRAY
26153: PPUSH
26154: LD_VAR 0 3
26158: PUSH
26159: LD_INT 2
26161: ARRAY
26162: PPUSH
26163: CALL_OW 235
26167: GO 26142
26169: POP
26170: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26171: LD_ADDR_EXP 104
26175: PUSH
26176: LD_EXP 104
26180: PPUSH
26181: LD_VAR 0 4
26185: PPUSH
26186: EMPTY
26187: PPUSH
26188: CALL_OW 1
26192: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26193: LD_VAR 0 1
26197: PPUSH
26198: LD_INT 0
26200: PPUSH
26201: CALL_OW 505
// end ; end ;
26205: LD_VAR 0 2
26209: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26210: LD_INT 0
26212: PPUSH
26213: PPUSH
26214: PPUSH
// if not hack in hackTanks or not vehicles then
26215: LD_VAR 0 1
26219: PUSH
26220: LD_EXP 103
26224: IN
26225: NOT
26226: PUSH
26227: LD_VAR 0 2
26231: NOT
26232: OR
26233: IFFALSE 26237
// exit ;
26235: GO 26512
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26237: LD_ADDR_VAR 0 2
26241: PUSH
26242: LD_VAR 0 1
26246: PPUSH
26247: LD_VAR 0 2
26251: PPUSH
26252: LD_INT 1
26254: PPUSH
26255: LD_INT 1
26257: PPUSH
26258: CALL 34329 0 4
26262: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26263: LD_ADDR_VAR 0 5
26267: PUSH
26268: LD_EXP 103
26272: PPUSH
26273: LD_VAR 0 1
26277: PPUSH
26278: CALL 33679 0 2
26282: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26283: LD_EXP 104
26287: PUSH
26288: LD_VAR 0 5
26292: ARRAY
26293: PUSH
26294: LD_EXP 105
26298: LESS
26299: IFFALSE 26488
// begin for i := 1 to vehicles do
26301: LD_ADDR_VAR 0 4
26305: PUSH
26306: DOUBLE
26307: LD_INT 1
26309: DEC
26310: ST_TO_ADDR
26311: LD_VAR 0 2
26315: PUSH
26316: FOR_TO
26317: IFFALSE 26486
// begin if hackTanksCaptured [ index ] = hackLimit then
26319: LD_EXP 104
26323: PUSH
26324: LD_VAR 0 5
26328: ARRAY
26329: PUSH
26330: LD_EXP 105
26334: EQUAL
26335: IFFALSE 26339
// break ;
26337: GO 26486
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26339: LD_ADDR_EXP 107
26343: PUSH
26344: LD_EXP 107
26348: PPUSH
26349: LD_VAR 0 5
26353: PPUSH
26354: LD_EXP 107
26358: PUSH
26359: LD_VAR 0 5
26363: ARRAY
26364: PUSH
26365: LD_INT 1
26367: PLUS
26368: PPUSH
26369: CALL_OW 1
26373: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26374: LD_ADDR_EXP 104
26378: PUSH
26379: LD_EXP 104
26383: PPUSH
26384: LD_VAR 0 5
26388: PUSH
26389: LD_EXP 104
26393: PUSH
26394: LD_VAR 0 5
26398: ARRAY
26399: PUSH
26400: LD_INT 1
26402: PLUS
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PPUSH
26408: LD_VAR 0 2
26412: PUSH
26413: LD_VAR 0 4
26417: ARRAY
26418: PUSH
26419: LD_VAR 0 2
26423: PUSH
26424: LD_VAR 0 4
26428: ARRAY
26429: PPUSH
26430: CALL_OW 255
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PPUSH
26439: CALL 33894 0 3
26443: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26444: LD_VAR 0 2
26448: PUSH
26449: LD_VAR 0 4
26453: ARRAY
26454: PPUSH
26455: LD_VAR 0 1
26459: PPUSH
26460: CALL_OW 255
26464: PPUSH
26465: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26469: LD_VAR 0 2
26473: PUSH
26474: LD_VAR 0 4
26478: ARRAY
26479: PPUSH
26480: CALL_OW 141
// end ;
26484: GO 26316
26486: POP
26487: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26488: LD_VAR 0 1
26492: PPUSH
26493: LD_EXP 104
26497: PUSH
26498: LD_VAR 0 5
26502: ARRAY
26503: PUSH
26504: LD_INT 0
26506: PLUS
26507: PPUSH
26508: CALL_OW 505
// end ;
26512: LD_VAR 0 3
26516: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26517: LD_INT 0
26519: PPUSH
26520: PPUSH
26521: PPUSH
26522: PPUSH
// if not hack in hackTanks then
26523: LD_VAR 0 1
26527: PUSH
26528: LD_EXP 103
26532: IN
26533: NOT
26534: IFFALSE 26538
// exit ;
26536: GO 26778
// index := GetElementIndex ( hackTanks , hack ) ;
26538: LD_ADDR_VAR 0 4
26542: PUSH
26543: LD_EXP 103
26547: PPUSH
26548: LD_VAR 0 1
26552: PPUSH
26553: CALL 33679 0 2
26557: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26558: LD_ADDR_VAR 0 3
26562: PUSH
26563: DOUBLE
26564: LD_EXP 104
26568: PUSH
26569: LD_VAR 0 4
26573: ARRAY
26574: INC
26575: ST_TO_ADDR
26576: LD_INT 1
26578: PUSH
26579: FOR_DOWNTO
26580: IFFALSE 26752
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26582: LD_ADDR_VAR 0 5
26586: PUSH
26587: LD_EXP 104
26591: PUSH
26592: LD_VAR 0 4
26596: ARRAY
26597: PUSH
26598: LD_VAR 0 3
26602: ARRAY
26603: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26604: LD_VAR 0 5
26608: PUSH
26609: LD_INT 1
26611: ARRAY
26612: PPUSH
26613: CALL_OW 302
26617: NOT
26618: PUSH
26619: LD_VAR 0 5
26623: PUSH
26624: LD_INT 1
26626: ARRAY
26627: PPUSH
26628: CALL_OW 255
26632: PUSH
26633: LD_VAR 0 1
26637: PPUSH
26638: CALL_OW 255
26642: NONEQUAL
26643: OR
26644: IFFALSE 26750
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26646: LD_VAR 0 5
26650: PUSH
26651: LD_INT 1
26653: ARRAY
26654: PPUSH
26655: CALL_OW 305
26659: PUSH
26660: LD_VAR 0 5
26664: PUSH
26665: LD_INT 1
26667: ARRAY
26668: PPUSH
26669: CALL_OW 255
26673: PUSH
26674: LD_VAR 0 1
26678: PPUSH
26679: CALL_OW 255
26683: EQUAL
26684: AND
26685: IFFALSE 26709
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26687: LD_VAR 0 5
26691: PUSH
26692: LD_INT 1
26694: ARRAY
26695: PPUSH
26696: LD_VAR 0 5
26700: PUSH
26701: LD_INT 2
26703: ARRAY
26704: PPUSH
26705: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26709: LD_ADDR_EXP 104
26713: PUSH
26714: LD_EXP 104
26718: PPUSH
26719: LD_VAR 0 4
26723: PPUSH
26724: LD_EXP 104
26728: PUSH
26729: LD_VAR 0 4
26733: ARRAY
26734: PPUSH
26735: LD_VAR 0 3
26739: PPUSH
26740: CALL_OW 3
26744: PPUSH
26745: CALL_OW 1
26749: ST_TO_ADDR
// end ; end ;
26750: GO 26579
26752: POP
26753: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26754: LD_VAR 0 1
26758: PPUSH
26759: LD_EXP 104
26763: PUSH
26764: LD_VAR 0 4
26768: ARRAY
26769: PUSH
26770: LD_INT 0
26772: PLUS
26773: PPUSH
26774: CALL_OW 505
// end ;
26778: LD_VAR 0 2
26782: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26783: LD_INT 0
26785: PPUSH
26786: PPUSH
26787: PPUSH
26788: PPUSH
// if not hack in hackTanks then
26789: LD_VAR 0 1
26793: PUSH
26794: LD_EXP 103
26798: IN
26799: NOT
26800: IFFALSE 26804
// exit ;
26802: GO 26889
// index := GetElementIndex ( hackTanks , hack ) ;
26804: LD_ADDR_VAR 0 5
26808: PUSH
26809: LD_EXP 103
26813: PPUSH
26814: LD_VAR 0 1
26818: PPUSH
26819: CALL 33679 0 2
26823: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26824: LD_ADDR_VAR 0 4
26828: PUSH
26829: DOUBLE
26830: LD_INT 1
26832: DEC
26833: ST_TO_ADDR
26834: LD_EXP 104
26838: PUSH
26839: LD_VAR 0 5
26843: ARRAY
26844: PUSH
26845: FOR_TO
26846: IFFALSE 26887
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26848: LD_EXP 104
26852: PUSH
26853: LD_VAR 0 5
26857: ARRAY
26858: PUSH
26859: LD_VAR 0 4
26863: ARRAY
26864: PUSH
26865: LD_INT 1
26867: ARRAY
26868: PUSH
26869: LD_VAR 0 2
26873: EQUAL
26874: IFFALSE 26885
// KillUnit ( vehicle ) ;
26876: LD_VAR 0 2
26880: PPUSH
26881: CALL_OW 66
26885: GO 26845
26887: POP
26888: POP
// end ;
26889: LD_VAR 0 3
26893: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26894: LD_EXP 108
26898: NOT
26899: IFFALSE 26934
26901: GO 26903
26903: DISABLE
// begin initMiner := true ;
26904: LD_ADDR_EXP 108
26908: PUSH
26909: LD_INT 1
26911: ST_TO_ADDR
// minersList := [ ] ;
26912: LD_ADDR_EXP 109
26916: PUSH
26917: EMPTY
26918: ST_TO_ADDR
// minerMinesList := [ ] ;
26919: LD_ADDR_EXP 110
26923: PUSH
26924: EMPTY
26925: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26926: LD_ADDR_EXP 111
26930: PUSH
26931: LD_INT 5
26933: ST_TO_ADDR
// end ;
26934: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26935: LD_EXP 108
26939: PUSH
26940: LD_INT 34
26942: PUSH
26943: LD_EXP 119
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PPUSH
26952: CALL_OW 69
26956: AND
26957: IFFALSE 27420
26959: GO 26961
26961: DISABLE
26962: LD_INT 0
26964: PPUSH
26965: PPUSH
26966: PPUSH
26967: PPUSH
// begin enable ;
26968: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26969: LD_ADDR_VAR 0 1
26973: PUSH
26974: LD_INT 34
26976: PUSH
26977: LD_EXP 119
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PPUSH
26986: CALL_OW 69
26990: PUSH
26991: FOR_IN
26992: IFFALSE 27064
// begin if not i in minersList then
26994: LD_VAR 0 1
26998: PUSH
26999: LD_EXP 109
27003: IN
27004: NOT
27005: IFFALSE 27062
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27007: LD_ADDR_EXP 109
27011: PUSH
27012: LD_EXP 109
27016: PPUSH
27017: LD_EXP 109
27021: PUSH
27022: LD_INT 1
27024: PLUS
27025: PPUSH
27026: LD_VAR 0 1
27030: PPUSH
27031: CALL_OW 1
27035: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27036: LD_ADDR_EXP 110
27040: PUSH
27041: LD_EXP 110
27045: PPUSH
27046: LD_EXP 110
27050: PUSH
27051: LD_INT 1
27053: PLUS
27054: PPUSH
27055: EMPTY
27056: PPUSH
27057: CALL_OW 1
27061: ST_TO_ADDR
// end end ;
27062: GO 26991
27064: POP
27065: POP
// for i := minerMinesList downto 1 do
27066: LD_ADDR_VAR 0 1
27070: PUSH
27071: DOUBLE
27072: LD_EXP 110
27076: INC
27077: ST_TO_ADDR
27078: LD_INT 1
27080: PUSH
27081: FOR_DOWNTO
27082: IFFALSE 27418
// begin if IsLive ( minersList [ i ] ) then
27084: LD_EXP 109
27088: PUSH
27089: LD_VAR 0 1
27093: ARRAY
27094: PPUSH
27095: CALL_OW 300
27099: IFFALSE 27127
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27101: LD_EXP 109
27105: PUSH
27106: LD_VAR 0 1
27110: ARRAY
27111: PPUSH
27112: LD_EXP 110
27116: PUSH
27117: LD_VAR 0 1
27121: ARRAY
27122: PPUSH
27123: CALL_OW 505
// if not minerMinesList [ i ] then
27127: LD_EXP 110
27131: PUSH
27132: LD_VAR 0 1
27136: ARRAY
27137: NOT
27138: IFFALSE 27142
// continue ;
27140: GO 27081
// for j := minerMinesList [ i ] downto 1 do
27142: LD_ADDR_VAR 0 2
27146: PUSH
27147: DOUBLE
27148: LD_EXP 110
27152: PUSH
27153: LD_VAR 0 1
27157: ARRAY
27158: INC
27159: ST_TO_ADDR
27160: LD_INT 1
27162: PUSH
27163: FOR_DOWNTO
27164: IFFALSE 27414
// begin side := GetSide ( minersList [ i ] ) ;
27166: LD_ADDR_VAR 0 3
27170: PUSH
27171: LD_EXP 109
27175: PUSH
27176: LD_VAR 0 1
27180: ARRAY
27181: PPUSH
27182: CALL_OW 255
27186: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27187: LD_ADDR_VAR 0 4
27191: PUSH
27192: LD_EXP 110
27196: PUSH
27197: LD_VAR 0 1
27201: ARRAY
27202: PUSH
27203: LD_VAR 0 2
27207: ARRAY
27208: PUSH
27209: LD_INT 1
27211: ARRAY
27212: PPUSH
27213: LD_EXP 110
27217: PUSH
27218: LD_VAR 0 1
27222: ARRAY
27223: PUSH
27224: LD_VAR 0 2
27228: ARRAY
27229: PUSH
27230: LD_INT 2
27232: ARRAY
27233: PPUSH
27234: CALL_OW 428
27238: ST_TO_ADDR
// if not tmp then
27239: LD_VAR 0 4
27243: NOT
27244: IFFALSE 27248
// continue ;
27246: GO 27163
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27248: LD_VAR 0 4
27252: PUSH
27253: LD_INT 81
27255: PUSH
27256: LD_VAR 0 3
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PPUSH
27265: CALL_OW 69
27269: IN
27270: PUSH
27271: LD_EXP 110
27275: PUSH
27276: LD_VAR 0 1
27280: ARRAY
27281: PUSH
27282: LD_VAR 0 2
27286: ARRAY
27287: PUSH
27288: LD_INT 1
27290: ARRAY
27291: PPUSH
27292: LD_EXP 110
27296: PUSH
27297: LD_VAR 0 1
27301: ARRAY
27302: PUSH
27303: LD_VAR 0 2
27307: ARRAY
27308: PUSH
27309: LD_INT 2
27311: ARRAY
27312: PPUSH
27313: CALL_OW 458
27317: AND
27318: IFFALSE 27412
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27320: LD_EXP 110
27324: PUSH
27325: LD_VAR 0 1
27329: ARRAY
27330: PUSH
27331: LD_VAR 0 2
27335: ARRAY
27336: PUSH
27337: LD_INT 1
27339: ARRAY
27340: PPUSH
27341: LD_EXP 110
27345: PUSH
27346: LD_VAR 0 1
27350: ARRAY
27351: PUSH
27352: LD_VAR 0 2
27356: ARRAY
27357: PUSH
27358: LD_INT 2
27360: ARRAY
27361: PPUSH
27362: LD_VAR 0 3
27366: PPUSH
27367: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27371: LD_ADDR_EXP 110
27375: PUSH
27376: LD_EXP 110
27380: PPUSH
27381: LD_VAR 0 1
27385: PPUSH
27386: LD_EXP 110
27390: PUSH
27391: LD_VAR 0 1
27395: ARRAY
27396: PPUSH
27397: LD_VAR 0 2
27401: PPUSH
27402: CALL_OW 3
27406: PPUSH
27407: CALL_OW 1
27411: ST_TO_ADDR
// end ; end ;
27412: GO 27163
27414: POP
27415: POP
// end ;
27416: GO 27081
27418: POP
27419: POP
// end ;
27420: PPOPN 4
27422: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27423: LD_INT 0
27425: PPUSH
27426: PPUSH
// result := false ;
27427: LD_ADDR_VAR 0 4
27431: PUSH
27432: LD_INT 0
27434: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27435: LD_VAR 0 1
27439: PPUSH
27440: CALL_OW 264
27444: PUSH
27445: LD_EXP 119
27449: EQUAL
27450: NOT
27451: IFFALSE 27455
// exit ;
27453: GO 27695
// index := GetElementIndex ( minersList , unit ) ;
27455: LD_ADDR_VAR 0 5
27459: PUSH
27460: LD_EXP 109
27464: PPUSH
27465: LD_VAR 0 1
27469: PPUSH
27470: CALL 33679 0 2
27474: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27475: LD_EXP 110
27479: PUSH
27480: LD_VAR 0 5
27484: ARRAY
27485: PUSH
27486: LD_EXP 111
27490: GREATEREQUAL
27491: IFFALSE 27495
// exit ;
27493: GO 27695
// ComMoveXY ( unit , x , y ) ;
27495: LD_VAR 0 1
27499: PPUSH
27500: LD_VAR 0 2
27504: PPUSH
27505: LD_VAR 0 3
27509: PPUSH
27510: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27514: LD_INT 35
27516: PPUSH
27517: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27521: LD_VAR 0 1
27525: PPUSH
27526: LD_VAR 0 2
27530: PPUSH
27531: LD_VAR 0 3
27535: PPUSH
27536: CALL 64398 0 3
27540: NOT
27541: PUSH
27542: LD_VAR 0 1
27546: PPUSH
27547: CALL_OW 314
27551: AND
27552: IFFALSE 27556
// exit ;
27554: GO 27695
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27556: LD_VAR 0 2
27560: PPUSH
27561: LD_VAR 0 3
27565: PPUSH
27566: CALL_OW 428
27570: PUSH
27571: LD_VAR 0 1
27575: EQUAL
27576: PUSH
27577: LD_VAR 0 1
27581: PPUSH
27582: CALL_OW 314
27586: NOT
27587: AND
27588: IFFALSE 27514
// PlaySoundXY ( x , y , PlantMine ) ;
27590: LD_VAR 0 2
27594: PPUSH
27595: LD_VAR 0 3
27599: PPUSH
27600: LD_STRING PlantMine
27602: PPUSH
27603: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27607: LD_VAR 0 2
27611: PPUSH
27612: LD_VAR 0 3
27616: PPUSH
27617: LD_VAR 0 1
27621: PPUSH
27622: CALL_OW 255
27626: PPUSH
27627: LD_INT 0
27629: PPUSH
27630: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27634: LD_ADDR_EXP 110
27638: PUSH
27639: LD_EXP 110
27643: PPUSH
27644: LD_VAR 0 5
27648: PUSH
27649: LD_EXP 110
27653: PUSH
27654: LD_VAR 0 5
27658: ARRAY
27659: PUSH
27660: LD_INT 1
27662: PLUS
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PPUSH
27668: LD_VAR 0 2
27672: PUSH
27673: LD_VAR 0 3
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PPUSH
27682: CALL 33894 0 3
27686: ST_TO_ADDR
// result := true ;
27687: LD_ADDR_VAR 0 4
27691: PUSH
27692: LD_INT 1
27694: ST_TO_ADDR
// end ;
27695: LD_VAR 0 4
27699: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27700: LD_INT 0
27702: PPUSH
27703: PPUSH
27704: PPUSH
// if not unit in minersList then
27705: LD_VAR 0 1
27709: PUSH
27710: LD_EXP 109
27714: IN
27715: NOT
27716: IFFALSE 27720
// exit ;
27718: GO 28112
// index := GetElementIndex ( minersList , unit ) ;
27720: LD_ADDR_VAR 0 6
27724: PUSH
27725: LD_EXP 109
27729: PPUSH
27730: LD_VAR 0 1
27734: PPUSH
27735: CALL 33679 0 2
27739: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27740: LD_ADDR_VAR 0 5
27744: PUSH
27745: DOUBLE
27746: LD_EXP 110
27750: PUSH
27751: LD_VAR 0 6
27755: ARRAY
27756: INC
27757: ST_TO_ADDR
27758: LD_INT 1
27760: PUSH
27761: FOR_DOWNTO
27762: IFFALSE 27923
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27764: LD_EXP 110
27768: PUSH
27769: LD_VAR 0 6
27773: ARRAY
27774: PUSH
27775: LD_VAR 0 5
27779: ARRAY
27780: PUSH
27781: LD_INT 1
27783: ARRAY
27784: PUSH
27785: LD_VAR 0 2
27789: EQUAL
27790: PUSH
27791: LD_EXP 110
27795: PUSH
27796: LD_VAR 0 6
27800: ARRAY
27801: PUSH
27802: LD_VAR 0 5
27806: ARRAY
27807: PUSH
27808: LD_INT 2
27810: ARRAY
27811: PUSH
27812: LD_VAR 0 3
27816: EQUAL
27817: AND
27818: IFFALSE 27921
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27820: LD_EXP 110
27824: PUSH
27825: LD_VAR 0 6
27829: ARRAY
27830: PUSH
27831: LD_VAR 0 5
27835: ARRAY
27836: PUSH
27837: LD_INT 1
27839: ARRAY
27840: PPUSH
27841: LD_EXP 110
27845: PUSH
27846: LD_VAR 0 6
27850: ARRAY
27851: PUSH
27852: LD_VAR 0 5
27856: ARRAY
27857: PUSH
27858: LD_INT 2
27860: ARRAY
27861: PPUSH
27862: LD_VAR 0 1
27866: PPUSH
27867: CALL_OW 255
27871: PPUSH
27872: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27876: LD_ADDR_EXP 110
27880: PUSH
27881: LD_EXP 110
27885: PPUSH
27886: LD_VAR 0 6
27890: PPUSH
27891: LD_EXP 110
27895: PUSH
27896: LD_VAR 0 6
27900: ARRAY
27901: PPUSH
27902: LD_VAR 0 5
27906: PPUSH
27907: CALL_OW 3
27911: PPUSH
27912: CALL_OW 1
27916: ST_TO_ADDR
// exit ;
27917: POP
27918: POP
27919: GO 28112
// end ; end ;
27921: GO 27761
27923: POP
27924: POP
// for i := minerMinesList [ index ] downto 1 do
27925: LD_ADDR_VAR 0 5
27929: PUSH
27930: DOUBLE
27931: LD_EXP 110
27935: PUSH
27936: LD_VAR 0 6
27940: ARRAY
27941: INC
27942: ST_TO_ADDR
27943: LD_INT 1
27945: PUSH
27946: FOR_DOWNTO
27947: IFFALSE 28110
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27949: LD_EXP 110
27953: PUSH
27954: LD_VAR 0 6
27958: ARRAY
27959: PUSH
27960: LD_VAR 0 5
27964: ARRAY
27965: PUSH
27966: LD_INT 1
27968: ARRAY
27969: PPUSH
27970: LD_EXP 110
27974: PUSH
27975: LD_VAR 0 6
27979: ARRAY
27980: PUSH
27981: LD_VAR 0 5
27985: ARRAY
27986: PUSH
27987: LD_INT 2
27989: ARRAY
27990: PPUSH
27991: LD_VAR 0 2
27995: PPUSH
27996: LD_VAR 0 3
28000: PPUSH
28001: CALL_OW 298
28005: PUSH
28006: LD_INT 6
28008: LESS
28009: IFFALSE 28108
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28011: LD_EXP 110
28015: PUSH
28016: LD_VAR 0 6
28020: ARRAY
28021: PUSH
28022: LD_VAR 0 5
28026: ARRAY
28027: PUSH
28028: LD_INT 1
28030: ARRAY
28031: PPUSH
28032: LD_EXP 110
28036: PUSH
28037: LD_VAR 0 6
28041: ARRAY
28042: PUSH
28043: LD_VAR 0 5
28047: ARRAY
28048: PUSH
28049: LD_INT 2
28051: ARRAY
28052: PPUSH
28053: LD_VAR 0 1
28057: PPUSH
28058: CALL_OW 255
28062: PPUSH
28063: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28067: LD_ADDR_EXP 110
28071: PUSH
28072: LD_EXP 110
28076: PPUSH
28077: LD_VAR 0 6
28081: PPUSH
28082: LD_EXP 110
28086: PUSH
28087: LD_VAR 0 6
28091: ARRAY
28092: PPUSH
28093: LD_VAR 0 5
28097: PPUSH
28098: CALL_OW 3
28102: PPUSH
28103: CALL_OW 1
28107: ST_TO_ADDR
// end ; end ;
28108: GO 27946
28110: POP
28111: POP
// end ;
28112: LD_VAR 0 4
28116: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28117: LD_INT 0
28119: PPUSH
28120: PPUSH
28121: PPUSH
28122: PPUSH
28123: PPUSH
28124: PPUSH
28125: PPUSH
28126: PPUSH
28127: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28128: LD_VAR 0 1
28132: PPUSH
28133: CALL_OW 264
28137: PUSH
28138: LD_EXP 119
28142: EQUAL
28143: NOT
28144: PUSH
28145: LD_VAR 0 1
28149: PUSH
28150: LD_EXP 109
28154: IN
28155: NOT
28156: OR
28157: IFFALSE 28161
// exit ;
28159: GO 28483
// index := GetElementIndex ( minersList , unit ) ;
28161: LD_ADDR_VAR 0 6
28165: PUSH
28166: LD_EXP 109
28170: PPUSH
28171: LD_VAR 0 1
28175: PPUSH
28176: CALL 33679 0 2
28180: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28181: LD_ADDR_VAR 0 8
28185: PUSH
28186: LD_EXP 111
28190: PUSH
28191: LD_EXP 110
28195: PUSH
28196: LD_VAR 0 6
28200: ARRAY
28201: MINUS
28202: ST_TO_ADDR
// if not minesFreeAmount then
28203: LD_VAR 0 8
28207: NOT
28208: IFFALSE 28212
// exit ;
28210: GO 28483
// tmp := [ ] ;
28212: LD_ADDR_VAR 0 7
28216: PUSH
28217: EMPTY
28218: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28219: LD_ADDR_VAR 0 5
28223: PUSH
28224: DOUBLE
28225: LD_INT 1
28227: DEC
28228: ST_TO_ADDR
28229: LD_VAR 0 8
28233: PUSH
28234: FOR_TO
28235: IFFALSE 28430
// begin _d := rand ( 0 , 5 ) ;
28237: LD_ADDR_VAR 0 11
28241: PUSH
28242: LD_INT 0
28244: PPUSH
28245: LD_INT 5
28247: PPUSH
28248: CALL_OW 12
28252: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28253: LD_ADDR_VAR 0 12
28257: PUSH
28258: LD_INT 2
28260: PPUSH
28261: LD_INT 6
28263: PPUSH
28264: CALL_OW 12
28268: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28269: LD_ADDR_VAR 0 9
28273: PUSH
28274: LD_VAR 0 2
28278: PPUSH
28279: LD_VAR 0 11
28283: PPUSH
28284: LD_VAR 0 12
28288: PPUSH
28289: CALL_OW 272
28293: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28294: LD_ADDR_VAR 0 10
28298: PUSH
28299: LD_VAR 0 3
28303: PPUSH
28304: LD_VAR 0 11
28308: PPUSH
28309: LD_VAR 0 12
28313: PPUSH
28314: CALL_OW 273
28318: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28319: LD_VAR 0 9
28323: PPUSH
28324: LD_VAR 0 10
28328: PPUSH
28329: CALL_OW 488
28333: PUSH
28334: LD_VAR 0 9
28338: PUSH
28339: LD_VAR 0 10
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_VAR 0 7
28352: IN
28353: NOT
28354: AND
28355: PUSH
28356: LD_VAR 0 9
28360: PPUSH
28361: LD_VAR 0 10
28365: PPUSH
28366: CALL_OW 458
28370: NOT
28371: AND
28372: IFFALSE 28414
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28374: LD_ADDR_VAR 0 7
28378: PUSH
28379: LD_VAR 0 7
28383: PPUSH
28384: LD_VAR 0 7
28388: PUSH
28389: LD_INT 1
28391: PLUS
28392: PPUSH
28393: LD_VAR 0 9
28397: PUSH
28398: LD_VAR 0 10
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PPUSH
28407: CALL_OW 1
28411: ST_TO_ADDR
28412: GO 28428
// i := i - 1 ;
28414: LD_ADDR_VAR 0 5
28418: PUSH
28419: LD_VAR 0 5
28423: PUSH
28424: LD_INT 1
28426: MINUS
28427: ST_TO_ADDR
// end ;
28428: GO 28234
28430: POP
28431: POP
// for i in tmp do
28432: LD_ADDR_VAR 0 5
28436: PUSH
28437: LD_VAR 0 7
28441: PUSH
28442: FOR_IN
28443: IFFALSE 28481
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28445: LD_VAR 0 1
28449: PPUSH
28450: LD_VAR 0 5
28454: PUSH
28455: LD_INT 1
28457: ARRAY
28458: PPUSH
28459: LD_VAR 0 5
28463: PUSH
28464: LD_INT 2
28466: ARRAY
28467: PPUSH
28468: CALL 27423 0 3
28472: NOT
28473: IFFALSE 28479
// exit ;
28475: POP
28476: POP
28477: GO 28483
28479: GO 28442
28481: POP
28482: POP
// end ;
28483: LD_VAR 0 4
28487: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28488: LD_INT 0
28490: PPUSH
28491: PPUSH
28492: PPUSH
28493: PPUSH
28494: PPUSH
28495: PPUSH
28496: PPUSH
// if not GetClass ( unit ) = class_sniper then
28497: LD_VAR 0 1
28501: PPUSH
28502: CALL_OW 257
28506: PUSH
28507: LD_INT 5
28509: EQUAL
28510: NOT
28511: IFFALSE 28515
// exit ;
28513: GO 28903
// dist := 8 ;
28515: LD_ADDR_VAR 0 5
28519: PUSH
28520: LD_INT 8
28522: ST_TO_ADDR
// viewRange := 12 ;
28523: LD_ADDR_VAR 0 7
28527: PUSH
28528: LD_INT 12
28530: ST_TO_ADDR
// side := GetSide ( unit ) ;
28531: LD_ADDR_VAR 0 6
28535: PUSH
28536: LD_VAR 0 1
28540: PPUSH
28541: CALL_OW 255
28545: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28546: LD_INT 61
28548: PPUSH
28549: LD_VAR 0 6
28553: PPUSH
28554: CALL_OW 321
28558: PUSH
28559: LD_INT 2
28561: EQUAL
28562: IFFALSE 28572
// viewRange := 16 ;
28564: LD_ADDR_VAR 0 7
28568: PUSH
28569: LD_INT 16
28571: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28572: LD_VAR 0 1
28576: PPUSH
28577: LD_VAR 0 2
28581: PPUSH
28582: LD_VAR 0 3
28586: PPUSH
28587: CALL_OW 297
28591: PUSH
28592: LD_VAR 0 5
28596: GREATER
28597: IFFALSE 28676
// begin ComMoveXY ( unit , x , y ) ;
28599: LD_VAR 0 1
28603: PPUSH
28604: LD_VAR 0 2
28608: PPUSH
28609: LD_VAR 0 3
28613: PPUSH
28614: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28618: LD_INT 35
28620: PPUSH
28621: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28625: LD_VAR 0 1
28629: PPUSH
28630: LD_VAR 0 2
28634: PPUSH
28635: LD_VAR 0 3
28639: PPUSH
28640: CALL 64398 0 3
28644: NOT
28645: IFFALSE 28649
// exit ;
28647: GO 28903
// until GetDistUnitXY ( unit , x , y ) < dist ;
28649: LD_VAR 0 1
28653: PPUSH
28654: LD_VAR 0 2
28658: PPUSH
28659: LD_VAR 0 3
28663: PPUSH
28664: CALL_OW 297
28668: PUSH
28669: LD_VAR 0 5
28673: LESS
28674: IFFALSE 28618
// end ; ComTurnXY ( unit , x , y ) ;
28676: LD_VAR 0 1
28680: PPUSH
28681: LD_VAR 0 2
28685: PPUSH
28686: LD_VAR 0 3
28690: PPUSH
28691: CALL_OW 118
// wait ( 5 ) ;
28695: LD_INT 5
28697: PPUSH
28698: CALL_OW 67
// _d := GetDir ( unit ) ;
28702: LD_ADDR_VAR 0 10
28706: PUSH
28707: LD_VAR 0 1
28711: PPUSH
28712: CALL_OW 254
28716: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28717: LD_ADDR_VAR 0 8
28721: PUSH
28722: LD_VAR 0 1
28726: PPUSH
28727: CALL_OW 250
28731: PPUSH
28732: LD_VAR 0 10
28736: PPUSH
28737: LD_VAR 0 5
28741: PPUSH
28742: CALL_OW 272
28746: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28747: LD_ADDR_VAR 0 9
28751: PUSH
28752: LD_VAR 0 1
28756: PPUSH
28757: CALL_OW 251
28761: PPUSH
28762: LD_VAR 0 10
28766: PPUSH
28767: LD_VAR 0 5
28771: PPUSH
28772: CALL_OW 273
28776: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28777: LD_VAR 0 8
28781: PPUSH
28782: LD_VAR 0 9
28786: PPUSH
28787: CALL_OW 488
28791: NOT
28792: IFFALSE 28796
// exit ;
28794: GO 28903
// ComAnimCustom ( unit , 1 ) ;
28796: LD_VAR 0 1
28800: PPUSH
28801: LD_INT 1
28803: PPUSH
28804: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28808: LD_VAR 0 8
28812: PPUSH
28813: LD_VAR 0 9
28817: PPUSH
28818: LD_VAR 0 6
28822: PPUSH
28823: LD_VAR 0 7
28827: PPUSH
28828: CALL_OW 330
// repeat wait ( 1 ) ;
28832: LD_INT 1
28834: PPUSH
28835: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28839: LD_VAR 0 1
28843: PPUSH
28844: CALL_OW 316
28848: PUSH
28849: LD_VAR 0 1
28853: PPUSH
28854: CALL_OW 314
28858: OR
28859: PUSH
28860: LD_VAR 0 1
28864: PPUSH
28865: CALL_OW 302
28869: NOT
28870: OR
28871: PUSH
28872: LD_VAR 0 1
28876: PPUSH
28877: CALL_OW 301
28881: OR
28882: IFFALSE 28832
// RemoveSeeing ( _x , _y , side ) ;
28884: LD_VAR 0 8
28888: PPUSH
28889: LD_VAR 0 9
28893: PPUSH
28894: LD_VAR 0 6
28898: PPUSH
28899: CALL_OW 331
// end ; end_of_file
28903: LD_VAR 0 4
28907: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28908: LD_INT 0
28910: PPUSH
28911: PPUSH
// if exist_mode then
28912: LD_VAR 0 2
28916: IFFALSE 28941
// unit := CreateCharacter ( prefix & ident ) else
28918: LD_ADDR_VAR 0 5
28922: PUSH
28923: LD_VAR 0 3
28927: PUSH
28928: LD_VAR 0 1
28932: STR
28933: PPUSH
28934: CALL_OW 34
28938: ST_TO_ADDR
28939: GO 28956
// unit := NewCharacter ( ident ) ;
28941: LD_ADDR_VAR 0 5
28945: PUSH
28946: LD_VAR 0 1
28950: PPUSH
28951: CALL_OW 25
28955: ST_TO_ADDR
// result := unit ;
28956: LD_ADDR_VAR 0 4
28960: PUSH
28961: LD_VAR 0 5
28965: ST_TO_ADDR
// end ;
28966: LD_VAR 0 4
28970: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28971: LD_INT 0
28973: PPUSH
28974: PPUSH
// if not side or not nation then
28975: LD_VAR 0 1
28979: NOT
28980: PUSH
28981: LD_VAR 0 2
28985: NOT
28986: OR
28987: IFFALSE 28991
// exit ;
28989: GO 29759
// case nation of nation_american :
28991: LD_VAR 0 2
28995: PUSH
28996: LD_INT 1
28998: DOUBLE
28999: EQUAL
29000: IFTRUE 29004
29002: GO 29218
29004: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29005: LD_ADDR_VAR 0 4
29009: PUSH
29010: LD_INT 35
29012: PUSH
29013: LD_INT 45
29015: PUSH
29016: LD_INT 46
29018: PUSH
29019: LD_INT 47
29021: PUSH
29022: LD_INT 82
29024: PUSH
29025: LD_INT 83
29027: PUSH
29028: LD_INT 84
29030: PUSH
29031: LD_INT 85
29033: PUSH
29034: LD_INT 86
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: LD_INT 2
29042: PUSH
29043: LD_INT 6
29045: PUSH
29046: LD_INT 15
29048: PUSH
29049: LD_INT 16
29051: PUSH
29052: LD_INT 7
29054: PUSH
29055: LD_INT 12
29057: PUSH
29058: LD_INT 13
29060: PUSH
29061: LD_INT 10
29063: PUSH
29064: LD_INT 14
29066: PUSH
29067: LD_INT 20
29069: PUSH
29070: LD_INT 21
29072: PUSH
29073: LD_INT 22
29075: PUSH
29076: LD_INT 25
29078: PUSH
29079: LD_INT 32
29081: PUSH
29082: LD_INT 27
29084: PUSH
29085: LD_INT 36
29087: PUSH
29088: LD_INT 69
29090: PUSH
29091: LD_INT 39
29093: PUSH
29094: LD_INT 34
29096: PUSH
29097: LD_INT 40
29099: PUSH
29100: LD_INT 48
29102: PUSH
29103: LD_INT 49
29105: PUSH
29106: LD_INT 50
29108: PUSH
29109: LD_INT 51
29111: PUSH
29112: LD_INT 52
29114: PUSH
29115: LD_INT 53
29117: PUSH
29118: LD_INT 54
29120: PUSH
29121: LD_INT 55
29123: PUSH
29124: LD_INT 56
29126: PUSH
29127: LD_INT 57
29129: PUSH
29130: LD_INT 58
29132: PUSH
29133: LD_INT 59
29135: PUSH
29136: LD_INT 60
29138: PUSH
29139: LD_INT 61
29141: PUSH
29142: LD_INT 62
29144: PUSH
29145: LD_INT 80
29147: PUSH
29148: LD_INT 82
29150: PUSH
29151: LD_INT 83
29153: PUSH
29154: LD_INT 84
29156: PUSH
29157: LD_INT 85
29159: PUSH
29160: LD_INT 86
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: ST_TO_ADDR
29216: GO 29683
29218: LD_INT 2
29220: DOUBLE
29221: EQUAL
29222: IFTRUE 29226
29224: GO 29452
29226: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29227: LD_ADDR_VAR 0 4
29231: PUSH
29232: LD_INT 35
29234: PUSH
29235: LD_INT 45
29237: PUSH
29238: LD_INT 46
29240: PUSH
29241: LD_INT 47
29243: PUSH
29244: LD_INT 82
29246: PUSH
29247: LD_INT 83
29249: PUSH
29250: LD_INT 84
29252: PUSH
29253: LD_INT 85
29255: PUSH
29256: LD_INT 87
29258: PUSH
29259: LD_INT 70
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: LD_INT 11
29267: PUSH
29268: LD_INT 3
29270: PUSH
29271: LD_INT 4
29273: PUSH
29274: LD_INT 5
29276: PUSH
29277: LD_INT 6
29279: PUSH
29280: LD_INT 15
29282: PUSH
29283: LD_INT 18
29285: PUSH
29286: LD_INT 7
29288: PUSH
29289: LD_INT 17
29291: PUSH
29292: LD_INT 8
29294: PUSH
29295: LD_INT 20
29297: PUSH
29298: LD_INT 21
29300: PUSH
29301: LD_INT 22
29303: PUSH
29304: LD_INT 72
29306: PUSH
29307: LD_INT 26
29309: PUSH
29310: LD_INT 69
29312: PUSH
29313: LD_INT 39
29315: PUSH
29316: LD_INT 40
29318: PUSH
29319: LD_INT 41
29321: PUSH
29322: LD_INT 42
29324: PUSH
29325: LD_INT 43
29327: PUSH
29328: LD_INT 48
29330: PUSH
29331: LD_INT 49
29333: PUSH
29334: LD_INT 50
29336: PUSH
29337: LD_INT 51
29339: PUSH
29340: LD_INT 52
29342: PUSH
29343: LD_INT 53
29345: PUSH
29346: LD_INT 54
29348: PUSH
29349: LD_INT 55
29351: PUSH
29352: LD_INT 56
29354: PUSH
29355: LD_INT 60
29357: PUSH
29358: LD_INT 61
29360: PUSH
29361: LD_INT 62
29363: PUSH
29364: LD_INT 66
29366: PUSH
29367: LD_INT 67
29369: PUSH
29370: LD_INT 68
29372: PUSH
29373: LD_INT 81
29375: PUSH
29376: LD_INT 82
29378: PUSH
29379: LD_INT 83
29381: PUSH
29382: LD_INT 84
29384: PUSH
29385: LD_INT 85
29387: PUSH
29388: LD_INT 87
29390: PUSH
29391: LD_INT 88
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: ST_TO_ADDR
29450: GO 29683
29452: LD_INT 3
29454: DOUBLE
29455: EQUAL
29456: IFTRUE 29460
29458: GO 29682
29460: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29461: LD_ADDR_VAR 0 4
29465: PUSH
29466: LD_INT 46
29468: PUSH
29469: LD_INT 47
29471: PUSH
29472: LD_INT 1
29474: PUSH
29475: LD_INT 2
29477: PUSH
29478: LD_INT 82
29480: PUSH
29481: LD_INT 83
29483: PUSH
29484: LD_INT 84
29486: PUSH
29487: LD_INT 85
29489: PUSH
29490: LD_INT 86
29492: PUSH
29493: LD_INT 11
29495: PUSH
29496: LD_INT 9
29498: PUSH
29499: LD_INT 20
29501: PUSH
29502: LD_INT 19
29504: PUSH
29505: LD_INT 21
29507: PUSH
29508: LD_INT 24
29510: PUSH
29511: LD_INT 22
29513: PUSH
29514: LD_INT 25
29516: PUSH
29517: LD_INT 28
29519: PUSH
29520: LD_INT 29
29522: PUSH
29523: LD_INT 30
29525: PUSH
29526: LD_INT 31
29528: PUSH
29529: LD_INT 37
29531: PUSH
29532: LD_INT 38
29534: PUSH
29535: LD_INT 32
29537: PUSH
29538: LD_INT 27
29540: PUSH
29541: LD_INT 33
29543: PUSH
29544: LD_INT 69
29546: PUSH
29547: LD_INT 39
29549: PUSH
29550: LD_INT 34
29552: PUSH
29553: LD_INT 40
29555: PUSH
29556: LD_INT 71
29558: PUSH
29559: LD_INT 23
29561: PUSH
29562: LD_INT 44
29564: PUSH
29565: LD_INT 48
29567: PUSH
29568: LD_INT 49
29570: PUSH
29571: LD_INT 50
29573: PUSH
29574: LD_INT 51
29576: PUSH
29577: LD_INT 52
29579: PUSH
29580: LD_INT 53
29582: PUSH
29583: LD_INT 54
29585: PUSH
29586: LD_INT 55
29588: PUSH
29589: LD_INT 56
29591: PUSH
29592: LD_INT 57
29594: PUSH
29595: LD_INT 58
29597: PUSH
29598: LD_INT 59
29600: PUSH
29601: LD_INT 63
29603: PUSH
29604: LD_INT 64
29606: PUSH
29607: LD_INT 65
29609: PUSH
29610: LD_INT 82
29612: PUSH
29613: LD_INT 83
29615: PUSH
29616: LD_INT 84
29618: PUSH
29619: LD_INT 85
29621: PUSH
29622: LD_INT 86
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: ST_TO_ADDR
29680: GO 29683
29682: POP
// if state > - 1 and state < 3 then
29683: LD_VAR 0 3
29687: PUSH
29688: LD_INT 1
29690: NEG
29691: GREATER
29692: PUSH
29693: LD_VAR 0 3
29697: PUSH
29698: LD_INT 3
29700: LESS
29701: AND
29702: IFFALSE 29759
// for i in result do
29704: LD_ADDR_VAR 0 5
29708: PUSH
29709: LD_VAR 0 4
29713: PUSH
29714: FOR_IN
29715: IFFALSE 29757
// if GetTech ( i , side ) <> state then
29717: LD_VAR 0 5
29721: PPUSH
29722: LD_VAR 0 1
29726: PPUSH
29727: CALL_OW 321
29731: PUSH
29732: LD_VAR 0 3
29736: NONEQUAL
29737: IFFALSE 29755
// result := result diff i ;
29739: LD_ADDR_VAR 0 4
29743: PUSH
29744: LD_VAR 0 4
29748: PUSH
29749: LD_VAR 0 5
29753: DIFF
29754: ST_TO_ADDR
29755: GO 29714
29757: POP
29758: POP
// end ;
29759: LD_VAR 0 4
29763: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29764: LD_INT 0
29766: PPUSH
29767: PPUSH
29768: PPUSH
// result := true ;
29769: LD_ADDR_VAR 0 3
29773: PUSH
29774: LD_INT 1
29776: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29777: LD_ADDR_VAR 0 5
29781: PUSH
29782: LD_VAR 0 2
29786: PPUSH
29787: CALL_OW 480
29791: ST_TO_ADDR
// if not tmp then
29792: LD_VAR 0 5
29796: NOT
29797: IFFALSE 29801
// exit ;
29799: GO 29850
// for i in tmp do
29801: LD_ADDR_VAR 0 4
29805: PUSH
29806: LD_VAR 0 5
29810: PUSH
29811: FOR_IN
29812: IFFALSE 29848
// if GetTech ( i , side ) <> state_researched then
29814: LD_VAR 0 4
29818: PPUSH
29819: LD_VAR 0 1
29823: PPUSH
29824: CALL_OW 321
29828: PUSH
29829: LD_INT 2
29831: NONEQUAL
29832: IFFALSE 29846
// begin result := false ;
29834: LD_ADDR_VAR 0 3
29838: PUSH
29839: LD_INT 0
29841: ST_TO_ADDR
// exit ;
29842: POP
29843: POP
29844: GO 29850
// end ;
29846: GO 29811
29848: POP
29849: POP
// end ;
29850: LD_VAR 0 3
29854: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29855: LD_INT 0
29857: PPUSH
29858: PPUSH
29859: PPUSH
29860: PPUSH
29861: PPUSH
29862: PPUSH
29863: PPUSH
29864: PPUSH
29865: PPUSH
29866: PPUSH
29867: PPUSH
29868: PPUSH
29869: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29870: LD_VAR 0 1
29874: NOT
29875: PUSH
29876: LD_VAR 0 1
29880: PPUSH
29881: CALL_OW 257
29885: PUSH
29886: LD_INT 9
29888: NONEQUAL
29889: OR
29890: IFFALSE 29894
// exit ;
29892: GO 30467
// side := GetSide ( unit ) ;
29894: LD_ADDR_VAR 0 9
29898: PUSH
29899: LD_VAR 0 1
29903: PPUSH
29904: CALL_OW 255
29908: ST_TO_ADDR
// tech_space := tech_spacanom ;
29909: LD_ADDR_VAR 0 12
29913: PUSH
29914: LD_INT 29
29916: ST_TO_ADDR
// tech_time := tech_taurad ;
29917: LD_ADDR_VAR 0 13
29921: PUSH
29922: LD_INT 28
29924: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29925: LD_ADDR_VAR 0 11
29929: PUSH
29930: LD_VAR 0 1
29934: PPUSH
29935: CALL_OW 310
29939: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29940: LD_VAR 0 11
29944: PPUSH
29945: CALL_OW 247
29949: PUSH
29950: LD_INT 2
29952: EQUAL
29953: IFFALSE 29957
// exit ;
29955: GO 30467
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29957: LD_ADDR_VAR 0 8
29961: PUSH
29962: LD_INT 81
29964: PUSH
29965: LD_VAR 0 9
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 3
29976: PUSH
29977: LD_INT 21
29979: PUSH
29980: LD_INT 3
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PPUSH
29995: CALL_OW 69
29999: ST_TO_ADDR
// if not tmp then
30000: LD_VAR 0 8
30004: NOT
30005: IFFALSE 30009
// exit ;
30007: GO 30467
// if in_unit then
30009: LD_VAR 0 11
30013: IFFALSE 30037
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30015: LD_ADDR_VAR 0 10
30019: PUSH
30020: LD_VAR 0 8
30024: PPUSH
30025: LD_VAR 0 11
30029: PPUSH
30030: CALL_OW 74
30034: ST_TO_ADDR
30035: GO 30057
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30037: LD_ADDR_VAR 0 10
30041: PUSH
30042: LD_VAR 0 8
30046: PPUSH
30047: LD_VAR 0 1
30051: PPUSH
30052: CALL_OW 74
30056: ST_TO_ADDR
// if not enemy then
30057: LD_VAR 0 10
30061: NOT
30062: IFFALSE 30066
// exit ;
30064: GO 30467
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30066: LD_VAR 0 11
30070: PUSH
30071: LD_VAR 0 11
30075: PPUSH
30076: LD_VAR 0 10
30080: PPUSH
30081: CALL_OW 296
30085: PUSH
30086: LD_INT 13
30088: GREATER
30089: AND
30090: PUSH
30091: LD_VAR 0 1
30095: PPUSH
30096: LD_VAR 0 10
30100: PPUSH
30101: CALL_OW 296
30105: PUSH
30106: LD_INT 12
30108: GREATER
30109: OR
30110: IFFALSE 30114
// exit ;
30112: GO 30467
// missile := [ 1 ] ;
30114: LD_ADDR_VAR 0 14
30118: PUSH
30119: LD_INT 1
30121: PUSH
30122: EMPTY
30123: LIST
30124: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30125: LD_VAR 0 9
30129: PPUSH
30130: LD_VAR 0 12
30134: PPUSH
30135: CALL_OW 325
30139: IFFALSE 30168
// missile := Replace ( missile , missile + 1 , 2 ) ;
30141: LD_ADDR_VAR 0 14
30145: PUSH
30146: LD_VAR 0 14
30150: PPUSH
30151: LD_VAR 0 14
30155: PUSH
30156: LD_INT 1
30158: PLUS
30159: PPUSH
30160: LD_INT 2
30162: PPUSH
30163: CALL_OW 1
30167: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30168: LD_VAR 0 9
30172: PPUSH
30173: LD_VAR 0 13
30177: PPUSH
30178: CALL_OW 325
30182: PUSH
30183: LD_VAR 0 10
30187: PPUSH
30188: CALL_OW 255
30192: PPUSH
30193: LD_VAR 0 13
30197: PPUSH
30198: CALL_OW 325
30202: NOT
30203: AND
30204: IFFALSE 30233
// missile := Replace ( missile , missile + 1 , 3 ) ;
30206: LD_ADDR_VAR 0 14
30210: PUSH
30211: LD_VAR 0 14
30215: PPUSH
30216: LD_VAR 0 14
30220: PUSH
30221: LD_INT 1
30223: PLUS
30224: PPUSH
30225: LD_INT 3
30227: PPUSH
30228: CALL_OW 1
30232: ST_TO_ADDR
// if missile < 2 then
30233: LD_VAR 0 14
30237: PUSH
30238: LD_INT 2
30240: LESS
30241: IFFALSE 30245
// exit ;
30243: GO 30467
// x := GetX ( enemy ) ;
30245: LD_ADDR_VAR 0 4
30249: PUSH
30250: LD_VAR 0 10
30254: PPUSH
30255: CALL_OW 250
30259: ST_TO_ADDR
// y := GetY ( enemy ) ;
30260: LD_ADDR_VAR 0 5
30264: PUSH
30265: LD_VAR 0 10
30269: PPUSH
30270: CALL_OW 251
30274: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30275: LD_ADDR_VAR 0 6
30279: PUSH
30280: LD_VAR 0 4
30284: PUSH
30285: LD_INT 1
30287: NEG
30288: PPUSH
30289: LD_INT 1
30291: PPUSH
30292: CALL_OW 12
30296: PLUS
30297: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30298: LD_ADDR_VAR 0 7
30302: PUSH
30303: LD_VAR 0 5
30307: PUSH
30308: LD_INT 1
30310: NEG
30311: PPUSH
30312: LD_INT 1
30314: PPUSH
30315: CALL_OW 12
30319: PLUS
30320: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30321: LD_VAR 0 6
30325: PPUSH
30326: LD_VAR 0 7
30330: PPUSH
30331: CALL_OW 488
30335: NOT
30336: IFFALSE 30358
// begin _x := x ;
30338: LD_ADDR_VAR 0 6
30342: PUSH
30343: LD_VAR 0 4
30347: ST_TO_ADDR
// _y := y ;
30348: LD_ADDR_VAR 0 7
30352: PUSH
30353: LD_VAR 0 5
30357: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30358: LD_ADDR_VAR 0 3
30362: PUSH
30363: LD_INT 1
30365: PPUSH
30366: LD_VAR 0 14
30370: PPUSH
30371: CALL_OW 12
30375: ST_TO_ADDR
// case i of 1 :
30376: LD_VAR 0 3
30380: PUSH
30381: LD_INT 1
30383: DOUBLE
30384: EQUAL
30385: IFTRUE 30389
30387: GO 30406
30389: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30390: LD_VAR 0 1
30394: PPUSH
30395: LD_VAR 0 10
30399: PPUSH
30400: CALL_OW 115
30404: GO 30467
30406: LD_INT 2
30408: DOUBLE
30409: EQUAL
30410: IFTRUE 30414
30412: GO 30436
30414: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30415: LD_VAR 0 1
30419: PPUSH
30420: LD_VAR 0 6
30424: PPUSH
30425: LD_VAR 0 7
30429: PPUSH
30430: CALL_OW 153
30434: GO 30467
30436: LD_INT 3
30438: DOUBLE
30439: EQUAL
30440: IFTRUE 30444
30442: GO 30466
30444: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30445: LD_VAR 0 1
30449: PPUSH
30450: LD_VAR 0 6
30454: PPUSH
30455: LD_VAR 0 7
30459: PPUSH
30460: CALL_OW 154
30464: GO 30467
30466: POP
// end ;
30467: LD_VAR 0 2
30471: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30472: LD_INT 0
30474: PPUSH
30475: PPUSH
30476: PPUSH
30477: PPUSH
30478: PPUSH
30479: PPUSH
// if not unit or not building then
30480: LD_VAR 0 1
30484: NOT
30485: PUSH
30486: LD_VAR 0 2
30490: NOT
30491: OR
30492: IFFALSE 30496
// exit ;
30494: GO 30654
// x := GetX ( building ) ;
30496: LD_ADDR_VAR 0 5
30500: PUSH
30501: LD_VAR 0 2
30505: PPUSH
30506: CALL_OW 250
30510: ST_TO_ADDR
// y := GetY ( building ) ;
30511: LD_ADDR_VAR 0 6
30515: PUSH
30516: LD_VAR 0 2
30520: PPUSH
30521: CALL_OW 251
30525: ST_TO_ADDR
// for i = 0 to 5 do
30526: LD_ADDR_VAR 0 4
30530: PUSH
30531: DOUBLE
30532: LD_INT 0
30534: DEC
30535: ST_TO_ADDR
30536: LD_INT 5
30538: PUSH
30539: FOR_TO
30540: IFFALSE 30652
// begin _x := ShiftX ( x , i , 3 ) ;
30542: LD_ADDR_VAR 0 7
30546: PUSH
30547: LD_VAR 0 5
30551: PPUSH
30552: LD_VAR 0 4
30556: PPUSH
30557: LD_INT 3
30559: PPUSH
30560: CALL_OW 272
30564: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30565: LD_ADDR_VAR 0 8
30569: PUSH
30570: LD_VAR 0 6
30574: PPUSH
30575: LD_VAR 0 4
30579: PPUSH
30580: LD_INT 3
30582: PPUSH
30583: CALL_OW 273
30587: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30588: LD_VAR 0 7
30592: PPUSH
30593: LD_VAR 0 8
30597: PPUSH
30598: CALL_OW 488
30602: NOT
30603: IFFALSE 30607
// continue ;
30605: GO 30539
// if HexInfo ( _x , _y ) = 0 then
30607: LD_VAR 0 7
30611: PPUSH
30612: LD_VAR 0 8
30616: PPUSH
30617: CALL_OW 428
30621: PUSH
30622: LD_INT 0
30624: EQUAL
30625: IFFALSE 30650
// begin ComMoveXY ( unit , _x , _y ) ;
30627: LD_VAR 0 1
30631: PPUSH
30632: LD_VAR 0 7
30636: PPUSH
30637: LD_VAR 0 8
30641: PPUSH
30642: CALL_OW 111
// exit ;
30646: POP
30647: POP
30648: GO 30654
// end ; end ;
30650: GO 30539
30652: POP
30653: POP
// end ;
30654: LD_VAR 0 3
30658: RET
// export function ScanBase ( side , base_area ) ; begin
30659: LD_INT 0
30661: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30662: LD_ADDR_VAR 0 3
30666: PUSH
30667: LD_VAR 0 2
30671: PPUSH
30672: LD_INT 81
30674: PUSH
30675: LD_VAR 0 1
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PPUSH
30684: CALL_OW 70
30688: ST_TO_ADDR
// end ;
30689: LD_VAR 0 3
30693: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30694: LD_INT 0
30696: PPUSH
30697: PPUSH
30698: PPUSH
30699: PPUSH
// result := false ;
30700: LD_ADDR_VAR 0 2
30704: PUSH
30705: LD_INT 0
30707: ST_TO_ADDR
// side := GetSide ( unit ) ;
30708: LD_ADDR_VAR 0 3
30712: PUSH
30713: LD_VAR 0 1
30717: PPUSH
30718: CALL_OW 255
30722: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30723: LD_ADDR_VAR 0 4
30727: PUSH
30728: LD_VAR 0 1
30732: PPUSH
30733: CALL_OW 248
30737: ST_TO_ADDR
// case nat of 1 :
30738: LD_VAR 0 4
30742: PUSH
30743: LD_INT 1
30745: DOUBLE
30746: EQUAL
30747: IFTRUE 30751
30749: GO 30762
30751: POP
// tech := tech_lassight ; 2 :
30752: LD_ADDR_VAR 0 5
30756: PUSH
30757: LD_INT 12
30759: ST_TO_ADDR
30760: GO 30801
30762: LD_INT 2
30764: DOUBLE
30765: EQUAL
30766: IFTRUE 30770
30768: GO 30781
30770: POP
// tech := tech_mortar ; 3 :
30771: LD_ADDR_VAR 0 5
30775: PUSH
30776: LD_INT 41
30778: ST_TO_ADDR
30779: GO 30801
30781: LD_INT 3
30783: DOUBLE
30784: EQUAL
30785: IFTRUE 30789
30787: GO 30800
30789: POP
// tech := tech_bazooka ; end ;
30790: LD_ADDR_VAR 0 5
30794: PUSH
30795: LD_INT 44
30797: ST_TO_ADDR
30798: GO 30801
30800: POP
// if Researched ( side , tech ) then
30801: LD_VAR 0 3
30805: PPUSH
30806: LD_VAR 0 5
30810: PPUSH
30811: CALL_OW 325
30815: IFFALSE 30842
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30817: LD_ADDR_VAR 0 2
30821: PUSH
30822: LD_INT 5
30824: PUSH
30825: LD_INT 8
30827: PUSH
30828: LD_INT 9
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: LIST
30835: PUSH
30836: LD_VAR 0 4
30840: ARRAY
30841: ST_TO_ADDR
// end ;
30842: LD_VAR 0 2
30846: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30847: LD_INT 0
30849: PPUSH
30850: PPUSH
30851: PPUSH
// if not mines then
30852: LD_VAR 0 2
30856: NOT
30857: IFFALSE 30861
// exit ;
30859: GO 31005
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30861: LD_ADDR_VAR 0 5
30865: PUSH
30866: LD_INT 81
30868: PUSH
30869: LD_VAR 0 1
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 3
30880: PUSH
30881: LD_INT 21
30883: PUSH
30884: LD_INT 3
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PPUSH
30899: CALL_OW 69
30903: ST_TO_ADDR
// for i in mines do
30904: LD_ADDR_VAR 0 4
30908: PUSH
30909: LD_VAR 0 2
30913: PUSH
30914: FOR_IN
30915: IFFALSE 31003
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30917: LD_VAR 0 4
30921: PUSH
30922: LD_INT 1
30924: ARRAY
30925: PPUSH
30926: LD_VAR 0 4
30930: PUSH
30931: LD_INT 2
30933: ARRAY
30934: PPUSH
30935: CALL_OW 458
30939: NOT
30940: IFFALSE 30944
// continue ;
30942: GO 30914
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30944: LD_VAR 0 4
30948: PUSH
30949: LD_INT 1
30951: ARRAY
30952: PPUSH
30953: LD_VAR 0 4
30957: PUSH
30958: LD_INT 2
30960: ARRAY
30961: PPUSH
30962: CALL_OW 428
30966: PUSH
30967: LD_VAR 0 5
30971: IN
30972: IFFALSE 31001
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30974: LD_VAR 0 4
30978: PUSH
30979: LD_INT 1
30981: ARRAY
30982: PPUSH
30983: LD_VAR 0 4
30987: PUSH
30988: LD_INT 2
30990: ARRAY
30991: PPUSH
30992: LD_VAR 0 1
30996: PPUSH
30997: CALL_OW 456
// end ;
31001: GO 30914
31003: POP
31004: POP
// end ;
31005: LD_VAR 0 3
31009: RET
// export function Count ( array ) ; var i ; begin
31010: LD_INT 0
31012: PPUSH
31013: PPUSH
// result := 0 ;
31014: LD_ADDR_VAR 0 2
31018: PUSH
31019: LD_INT 0
31021: ST_TO_ADDR
// for i in array do
31022: LD_ADDR_VAR 0 3
31026: PUSH
31027: LD_VAR 0 1
31031: PUSH
31032: FOR_IN
31033: IFFALSE 31057
// if i then
31035: LD_VAR 0 3
31039: IFFALSE 31055
// result := result + 1 ;
31041: LD_ADDR_VAR 0 2
31045: PUSH
31046: LD_VAR 0 2
31050: PUSH
31051: LD_INT 1
31053: PLUS
31054: ST_TO_ADDR
31055: GO 31032
31057: POP
31058: POP
// end ;
31059: LD_VAR 0 2
31063: RET
// export function IsEmpty ( building ) ; begin
31064: LD_INT 0
31066: PPUSH
// if not building then
31067: LD_VAR 0 1
31071: NOT
31072: IFFALSE 31076
// exit ;
31074: GO 31119
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31076: LD_ADDR_VAR 0 2
31080: PUSH
31081: LD_VAR 0 1
31085: PUSH
31086: LD_INT 22
31088: PUSH
31089: LD_VAR 0 1
31093: PPUSH
31094: CALL_OW 255
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 58
31105: PUSH
31106: EMPTY
31107: LIST
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PPUSH
31113: CALL_OW 69
31117: IN
31118: ST_TO_ADDR
// end ;
31119: LD_VAR 0 2
31123: RET
// export function IsNotFull ( building ) ; begin
31124: LD_INT 0
31126: PPUSH
// if not building then
31127: LD_VAR 0 1
31131: NOT
31132: IFFALSE 31136
// exit ;
31134: GO 31155
// result := UnitsInside ( building ) < 6 ;
31136: LD_ADDR_VAR 0 2
31140: PUSH
31141: LD_VAR 0 1
31145: PPUSH
31146: CALL_OW 313
31150: PUSH
31151: LD_INT 6
31153: LESS
31154: ST_TO_ADDR
// end ;
31155: LD_VAR 0 2
31159: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31160: LD_INT 0
31162: PPUSH
31163: PPUSH
31164: PPUSH
31165: PPUSH
// tmp := [ ] ;
31166: LD_ADDR_VAR 0 3
31170: PUSH
31171: EMPTY
31172: ST_TO_ADDR
// list := [ ] ;
31173: LD_ADDR_VAR 0 5
31177: PUSH
31178: EMPTY
31179: ST_TO_ADDR
// for i = 16 to 25 do
31180: LD_ADDR_VAR 0 4
31184: PUSH
31185: DOUBLE
31186: LD_INT 16
31188: DEC
31189: ST_TO_ADDR
31190: LD_INT 25
31192: PUSH
31193: FOR_TO
31194: IFFALSE 31267
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31196: LD_ADDR_VAR 0 3
31200: PUSH
31201: LD_VAR 0 3
31205: PUSH
31206: LD_INT 22
31208: PUSH
31209: LD_VAR 0 1
31213: PPUSH
31214: CALL_OW 255
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 91
31225: PUSH
31226: LD_VAR 0 1
31230: PUSH
31231: LD_INT 6
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 30
31241: PUSH
31242: LD_VAR 0 4
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: LIST
31255: PUSH
31256: EMPTY
31257: LIST
31258: PPUSH
31259: CALL_OW 69
31263: ADD
31264: ST_TO_ADDR
31265: GO 31193
31267: POP
31268: POP
// for i = 1 to tmp do
31269: LD_ADDR_VAR 0 4
31273: PUSH
31274: DOUBLE
31275: LD_INT 1
31277: DEC
31278: ST_TO_ADDR
31279: LD_VAR 0 3
31283: PUSH
31284: FOR_TO
31285: IFFALSE 31373
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31287: LD_ADDR_VAR 0 5
31291: PUSH
31292: LD_VAR 0 5
31296: PUSH
31297: LD_VAR 0 3
31301: PUSH
31302: LD_VAR 0 4
31306: ARRAY
31307: PPUSH
31308: CALL_OW 266
31312: PUSH
31313: LD_VAR 0 3
31317: PUSH
31318: LD_VAR 0 4
31322: ARRAY
31323: PPUSH
31324: CALL_OW 250
31328: PUSH
31329: LD_VAR 0 3
31333: PUSH
31334: LD_VAR 0 4
31338: ARRAY
31339: PPUSH
31340: CALL_OW 251
31344: PUSH
31345: LD_VAR 0 3
31349: PUSH
31350: LD_VAR 0 4
31354: ARRAY
31355: PPUSH
31356: CALL_OW 254
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: PUSH
31367: EMPTY
31368: LIST
31369: ADD
31370: ST_TO_ADDR
31371: GO 31284
31373: POP
31374: POP
// result := list ;
31375: LD_ADDR_VAR 0 2
31379: PUSH
31380: LD_VAR 0 5
31384: ST_TO_ADDR
// end ;
31385: LD_VAR 0 2
31389: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31390: LD_INT 0
31392: PPUSH
31393: PPUSH
31394: PPUSH
31395: PPUSH
31396: PPUSH
31397: PPUSH
31398: PPUSH
// if not factory then
31399: LD_VAR 0 1
31403: NOT
31404: IFFALSE 31408
// exit ;
31406: GO 32001
// if control = control_apeman then
31408: LD_VAR 0 4
31412: PUSH
31413: LD_INT 5
31415: EQUAL
31416: IFFALSE 31525
// begin tmp := UnitsInside ( factory ) ;
31418: LD_ADDR_VAR 0 8
31422: PUSH
31423: LD_VAR 0 1
31427: PPUSH
31428: CALL_OW 313
31432: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31433: LD_VAR 0 8
31437: PPUSH
31438: LD_INT 25
31440: PUSH
31441: LD_INT 12
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PPUSH
31448: CALL_OW 72
31452: NOT
31453: IFFALSE 31463
// control := control_manual ;
31455: LD_ADDR_VAR 0 4
31459: PUSH
31460: LD_INT 1
31462: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31463: LD_ADDR_VAR 0 8
31467: PUSH
31468: LD_VAR 0 1
31472: PPUSH
31473: CALL 31160 0 1
31477: ST_TO_ADDR
// if tmp then
31478: LD_VAR 0 8
31482: IFFALSE 31525
// begin for i in tmp do
31484: LD_ADDR_VAR 0 7
31488: PUSH
31489: LD_VAR 0 8
31493: PUSH
31494: FOR_IN
31495: IFFALSE 31523
// if i [ 1 ] = b_ext_radio then
31497: LD_VAR 0 7
31501: PUSH
31502: LD_INT 1
31504: ARRAY
31505: PUSH
31506: LD_INT 22
31508: EQUAL
31509: IFFALSE 31521
// begin control := control_remote ;
31511: LD_ADDR_VAR 0 4
31515: PUSH
31516: LD_INT 2
31518: ST_TO_ADDR
// break ;
31519: GO 31523
// end ;
31521: GO 31494
31523: POP
31524: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31525: LD_VAR 0 1
31529: PPUSH
31530: LD_VAR 0 2
31534: PPUSH
31535: LD_VAR 0 3
31539: PPUSH
31540: LD_VAR 0 4
31544: PPUSH
31545: LD_VAR 0 5
31549: PPUSH
31550: CALL_OW 448
31554: IFFALSE 31589
// begin result := [ chassis , engine , control , weapon ] ;
31556: LD_ADDR_VAR 0 6
31560: PUSH
31561: LD_VAR 0 2
31565: PUSH
31566: LD_VAR 0 3
31570: PUSH
31571: LD_VAR 0 4
31575: PUSH
31576: LD_VAR 0 5
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: ST_TO_ADDR
// exit ;
31587: GO 32001
// end ; _chassis := AvailableChassisList ( factory ) ;
31589: LD_ADDR_VAR 0 9
31593: PUSH
31594: LD_VAR 0 1
31598: PPUSH
31599: CALL_OW 475
31603: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31604: LD_ADDR_VAR 0 11
31608: PUSH
31609: LD_VAR 0 1
31613: PPUSH
31614: CALL_OW 476
31618: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31619: LD_ADDR_VAR 0 12
31623: PUSH
31624: LD_VAR 0 1
31628: PPUSH
31629: CALL_OW 477
31633: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31634: LD_ADDR_VAR 0 10
31638: PUSH
31639: LD_VAR 0 1
31643: PPUSH
31644: CALL_OW 478
31648: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31649: LD_VAR 0 9
31653: NOT
31654: PUSH
31655: LD_VAR 0 11
31659: NOT
31660: OR
31661: PUSH
31662: LD_VAR 0 12
31666: NOT
31667: OR
31668: PUSH
31669: LD_VAR 0 10
31673: NOT
31674: OR
31675: IFFALSE 31710
// begin result := [ chassis , engine , control , weapon ] ;
31677: LD_ADDR_VAR 0 6
31681: PUSH
31682: LD_VAR 0 2
31686: PUSH
31687: LD_VAR 0 3
31691: PUSH
31692: LD_VAR 0 4
31696: PUSH
31697: LD_VAR 0 5
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: ST_TO_ADDR
// exit ;
31708: GO 32001
// end ; if not chassis in _chassis then
31710: LD_VAR 0 2
31714: PUSH
31715: LD_VAR 0 9
31719: IN
31720: NOT
31721: IFFALSE 31747
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31723: LD_ADDR_VAR 0 2
31727: PUSH
31728: LD_VAR 0 9
31732: PUSH
31733: LD_INT 1
31735: PPUSH
31736: LD_VAR 0 9
31740: PPUSH
31741: CALL_OW 12
31745: ARRAY
31746: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31747: LD_VAR 0 2
31751: PPUSH
31752: LD_VAR 0 3
31756: PPUSH
31757: CALL 32006 0 2
31761: NOT
31762: IFFALSE 31821
// repeat engine := _engine [ 1 ] ;
31764: LD_ADDR_VAR 0 3
31768: PUSH
31769: LD_VAR 0 11
31773: PUSH
31774: LD_INT 1
31776: ARRAY
31777: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31778: LD_ADDR_VAR 0 11
31782: PUSH
31783: LD_VAR 0 11
31787: PPUSH
31788: LD_INT 1
31790: PPUSH
31791: CALL_OW 3
31795: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31796: LD_VAR 0 2
31800: PPUSH
31801: LD_VAR 0 3
31805: PPUSH
31806: CALL 32006 0 2
31810: PUSH
31811: LD_VAR 0 11
31815: PUSH
31816: EMPTY
31817: EQUAL
31818: OR
31819: IFFALSE 31764
// if not control in _control then
31821: LD_VAR 0 4
31825: PUSH
31826: LD_VAR 0 12
31830: IN
31831: NOT
31832: IFFALSE 31858
// control := _control [ rand ( 1 , _control ) ] ;
31834: LD_ADDR_VAR 0 4
31838: PUSH
31839: LD_VAR 0 12
31843: PUSH
31844: LD_INT 1
31846: PPUSH
31847: LD_VAR 0 12
31851: PPUSH
31852: CALL_OW 12
31856: ARRAY
31857: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31858: LD_VAR 0 2
31862: PPUSH
31863: LD_VAR 0 5
31867: PPUSH
31868: CALL 32226 0 2
31872: NOT
31873: IFFALSE 31932
// repeat weapon := _weapon [ 1 ] ;
31875: LD_ADDR_VAR 0 5
31879: PUSH
31880: LD_VAR 0 10
31884: PUSH
31885: LD_INT 1
31887: ARRAY
31888: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31889: LD_ADDR_VAR 0 10
31893: PUSH
31894: LD_VAR 0 10
31898: PPUSH
31899: LD_INT 1
31901: PPUSH
31902: CALL_OW 3
31906: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31907: LD_VAR 0 2
31911: PPUSH
31912: LD_VAR 0 5
31916: PPUSH
31917: CALL 32226 0 2
31921: PUSH
31922: LD_VAR 0 10
31926: PUSH
31927: EMPTY
31928: EQUAL
31929: OR
31930: IFFALSE 31875
// result := [ ] ;
31932: LD_ADDR_VAR 0 6
31936: PUSH
31937: EMPTY
31938: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31939: LD_VAR 0 1
31943: PPUSH
31944: LD_VAR 0 2
31948: PPUSH
31949: LD_VAR 0 3
31953: PPUSH
31954: LD_VAR 0 4
31958: PPUSH
31959: LD_VAR 0 5
31963: PPUSH
31964: CALL_OW 448
31968: IFFALSE 32001
// result := [ chassis , engine , control , weapon ] ;
31970: LD_ADDR_VAR 0 6
31974: PUSH
31975: LD_VAR 0 2
31979: PUSH
31980: LD_VAR 0 3
31984: PUSH
31985: LD_VAR 0 4
31989: PUSH
31990: LD_VAR 0 5
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: ST_TO_ADDR
// end ;
32001: LD_VAR 0 6
32005: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32006: LD_INT 0
32008: PPUSH
// if not chassis or not engine then
32009: LD_VAR 0 1
32013: NOT
32014: PUSH
32015: LD_VAR 0 2
32019: NOT
32020: OR
32021: IFFALSE 32025
// exit ;
32023: GO 32221
// case engine of engine_solar :
32025: LD_VAR 0 2
32029: PUSH
32030: LD_INT 2
32032: DOUBLE
32033: EQUAL
32034: IFTRUE 32038
32036: GO 32076
32038: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32039: LD_ADDR_VAR 0 3
32043: PUSH
32044: LD_INT 11
32046: PUSH
32047: LD_INT 12
32049: PUSH
32050: LD_INT 13
32052: PUSH
32053: LD_INT 14
32055: PUSH
32056: LD_INT 1
32058: PUSH
32059: LD_INT 2
32061: PUSH
32062: LD_INT 3
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: ST_TO_ADDR
32074: GO 32205
32076: LD_INT 1
32078: DOUBLE
32079: EQUAL
32080: IFTRUE 32084
32082: GO 32146
32084: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32085: LD_ADDR_VAR 0 3
32089: PUSH
32090: LD_INT 11
32092: PUSH
32093: LD_INT 12
32095: PUSH
32096: LD_INT 13
32098: PUSH
32099: LD_INT 14
32101: PUSH
32102: LD_INT 1
32104: PUSH
32105: LD_INT 2
32107: PUSH
32108: LD_INT 3
32110: PUSH
32111: LD_INT 4
32113: PUSH
32114: LD_INT 5
32116: PUSH
32117: LD_INT 21
32119: PUSH
32120: LD_INT 23
32122: PUSH
32123: LD_INT 22
32125: PUSH
32126: LD_INT 24
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: ST_TO_ADDR
32144: GO 32205
32146: LD_INT 3
32148: DOUBLE
32149: EQUAL
32150: IFTRUE 32154
32152: GO 32204
32154: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32155: LD_ADDR_VAR 0 3
32159: PUSH
32160: LD_INT 13
32162: PUSH
32163: LD_INT 14
32165: PUSH
32166: LD_INT 2
32168: PUSH
32169: LD_INT 3
32171: PUSH
32172: LD_INT 4
32174: PUSH
32175: LD_INT 5
32177: PUSH
32178: LD_INT 21
32180: PUSH
32181: LD_INT 22
32183: PUSH
32184: LD_INT 23
32186: PUSH
32187: LD_INT 24
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: ST_TO_ADDR
32202: GO 32205
32204: POP
// result := ( chassis in result ) ;
32205: LD_ADDR_VAR 0 3
32209: PUSH
32210: LD_VAR 0 1
32214: PUSH
32215: LD_VAR 0 3
32219: IN
32220: ST_TO_ADDR
// end ;
32221: LD_VAR 0 3
32225: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32226: LD_INT 0
32228: PPUSH
// if not chassis or not weapon then
32229: LD_VAR 0 1
32233: NOT
32234: PUSH
32235: LD_VAR 0 2
32239: NOT
32240: OR
32241: IFFALSE 32245
// exit ;
32243: GO 33307
// case weapon of us_machine_gun :
32245: LD_VAR 0 2
32249: PUSH
32250: LD_INT 2
32252: DOUBLE
32253: EQUAL
32254: IFTRUE 32258
32256: GO 32288
32258: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32259: LD_ADDR_VAR 0 3
32263: PUSH
32264: LD_INT 1
32266: PUSH
32267: LD_INT 2
32269: PUSH
32270: LD_INT 3
32272: PUSH
32273: LD_INT 4
32275: PUSH
32276: LD_INT 5
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: ST_TO_ADDR
32286: GO 33291
32288: LD_INT 3
32290: DOUBLE
32291: EQUAL
32292: IFTRUE 32296
32294: GO 32326
32296: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32297: LD_ADDR_VAR 0 3
32301: PUSH
32302: LD_INT 1
32304: PUSH
32305: LD_INT 2
32307: PUSH
32308: LD_INT 3
32310: PUSH
32311: LD_INT 4
32313: PUSH
32314: LD_INT 5
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: ST_TO_ADDR
32324: GO 33291
32326: LD_INT 11
32328: DOUBLE
32329: EQUAL
32330: IFTRUE 32334
32332: GO 32364
32334: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32335: LD_ADDR_VAR 0 3
32339: PUSH
32340: LD_INT 1
32342: PUSH
32343: LD_INT 2
32345: PUSH
32346: LD_INT 3
32348: PUSH
32349: LD_INT 4
32351: PUSH
32352: LD_INT 5
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: ST_TO_ADDR
32362: GO 33291
32364: LD_INT 4
32366: DOUBLE
32367: EQUAL
32368: IFTRUE 32372
32370: GO 32398
32372: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32373: LD_ADDR_VAR 0 3
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: LD_INT 3
32383: PUSH
32384: LD_INT 4
32386: PUSH
32387: LD_INT 5
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: ST_TO_ADDR
32396: GO 33291
32398: LD_INT 5
32400: DOUBLE
32401: EQUAL
32402: IFTRUE 32406
32404: GO 32432
32406: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32407: LD_ADDR_VAR 0 3
32411: PUSH
32412: LD_INT 2
32414: PUSH
32415: LD_INT 3
32417: PUSH
32418: LD_INT 4
32420: PUSH
32421: LD_INT 5
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: ST_TO_ADDR
32430: GO 33291
32432: LD_INT 9
32434: DOUBLE
32435: EQUAL
32436: IFTRUE 32440
32438: GO 32466
32440: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32441: LD_ADDR_VAR 0 3
32445: PUSH
32446: LD_INT 2
32448: PUSH
32449: LD_INT 3
32451: PUSH
32452: LD_INT 4
32454: PUSH
32455: LD_INT 5
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: ST_TO_ADDR
32464: GO 33291
32466: LD_INT 7
32468: DOUBLE
32469: EQUAL
32470: IFTRUE 32474
32472: GO 32500
32474: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32475: LD_ADDR_VAR 0 3
32479: PUSH
32480: LD_INT 2
32482: PUSH
32483: LD_INT 3
32485: PUSH
32486: LD_INT 4
32488: PUSH
32489: LD_INT 5
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: ST_TO_ADDR
32498: GO 33291
32500: LD_INT 12
32502: DOUBLE
32503: EQUAL
32504: IFTRUE 32508
32506: GO 32534
32508: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32509: LD_ADDR_VAR 0 3
32513: PUSH
32514: LD_INT 2
32516: PUSH
32517: LD_INT 3
32519: PUSH
32520: LD_INT 4
32522: PUSH
32523: LD_INT 5
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: ST_TO_ADDR
32532: GO 33291
32534: LD_INT 13
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32542
32540: GO 32568
32542: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32543: LD_ADDR_VAR 0 3
32547: PUSH
32548: LD_INT 2
32550: PUSH
32551: LD_INT 3
32553: PUSH
32554: LD_INT 4
32556: PUSH
32557: LD_INT 5
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: ST_TO_ADDR
32566: GO 33291
32568: LD_INT 14
32570: DOUBLE
32571: EQUAL
32572: IFTRUE 32576
32574: GO 32594
32576: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32577: LD_ADDR_VAR 0 3
32581: PUSH
32582: LD_INT 4
32584: PUSH
32585: LD_INT 5
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: ST_TO_ADDR
32592: GO 33291
32594: LD_INT 6
32596: DOUBLE
32597: EQUAL
32598: IFTRUE 32602
32600: GO 32620
32602: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32603: LD_ADDR_VAR 0 3
32607: PUSH
32608: LD_INT 4
32610: PUSH
32611: LD_INT 5
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: ST_TO_ADDR
32618: GO 33291
32620: LD_INT 10
32622: DOUBLE
32623: EQUAL
32624: IFTRUE 32628
32626: GO 32646
32628: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32629: LD_ADDR_VAR 0 3
32633: PUSH
32634: LD_INT 4
32636: PUSH
32637: LD_INT 5
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: ST_TO_ADDR
32644: GO 33291
32646: LD_INT 22
32648: DOUBLE
32649: EQUAL
32650: IFTRUE 32654
32652: GO 32680
32654: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32655: LD_ADDR_VAR 0 3
32659: PUSH
32660: LD_INT 11
32662: PUSH
32663: LD_INT 12
32665: PUSH
32666: LD_INT 13
32668: PUSH
32669: LD_INT 14
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: ST_TO_ADDR
32678: GO 33291
32680: LD_INT 23
32682: DOUBLE
32683: EQUAL
32684: IFTRUE 32688
32686: GO 32714
32688: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32689: LD_ADDR_VAR 0 3
32693: PUSH
32694: LD_INT 11
32696: PUSH
32697: LD_INT 12
32699: PUSH
32700: LD_INT 13
32702: PUSH
32703: LD_INT 14
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: ST_TO_ADDR
32712: GO 33291
32714: LD_INT 24
32716: DOUBLE
32717: EQUAL
32718: IFTRUE 32722
32720: GO 32748
32722: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32723: LD_ADDR_VAR 0 3
32727: PUSH
32728: LD_INT 11
32730: PUSH
32731: LD_INT 12
32733: PUSH
32734: LD_INT 13
32736: PUSH
32737: LD_INT 14
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: ST_TO_ADDR
32746: GO 33291
32748: LD_INT 30
32750: DOUBLE
32751: EQUAL
32752: IFTRUE 32756
32754: GO 32782
32756: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32757: LD_ADDR_VAR 0 3
32761: PUSH
32762: LD_INT 11
32764: PUSH
32765: LD_INT 12
32767: PUSH
32768: LD_INT 13
32770: PUSH
32771: LD_INT 14
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: ST_TO_ADDR
32780: GO 33291
32782: LD_INT 25
32784: DOUBLE
32785: EQUAL
32786: IFTRUE 32790
32788: GO 32808
32790: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32791: LD_ADDR_VAR 0 3
32795: PUSH
32796: LD_INT 13
32798: PUSH
32799: LD_INT 14
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: ST_TO_ADDR
32806: GO 33291
32808: LD_INT 27
32810: DOUBLE
32811: EQUAL
32812: IFTRUE 32816
32814: GO 32834
32816: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32817: LD_ADDR_VAR 0 3
32821: PUSH
32822: LD_INT 13
32824: PUSH
32825: LD_INT 14
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: ST_TO_ADDR
32832: GO 33291
32834: LD_EXP 117
32838: DOUBLE
32839: EQUAL
32840: IFTRUE 32844
32842: GO 32870
32844: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32845: LD_ADDR_VAR 0 3
32849: PUSH
32850: LD_INT 11
32852: PUSH
32853: LD_INT 12
32855: PUSH
32856: LD_INT 13
32858: PUSH
32859: LD_INT 14
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: ST_TO_ADDR
32868: GO 33291
32870: LD_INT 28
32872: DOUBLE
32873: EQUAL
32874: IFTRUE 32878
32876: GO 32896
32878: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32879: LD_ADDR_VAR 0 3
32883: PUSH
32884: LD_INT 13
32886: PUSH
32887: LD_INT 14
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: ST_TO_ADDR
32894: GO 33291
32896: LD_INT 29
32898: DOUBLE
32899: EQUAL
32900: IFTRUE 32904
32902: GO 32922
32904: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32905: LD_ADDR_VAR 0 3
32909: PUSH
32910: LD_INT 13
32912: PUSH
32913: LD_INT 14
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: ST_TO_ADDR
32920: GO 33291
32922: LD_INT 31
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32930
32928: GO 32948
32930: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32931: LD_ADDR_VAR 0 3
32935: PUSH
32936: LD_INT 13
32938: PUSH
32939: LD_INT 14
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: ST_TO_ADDR
32946: GO 33291
32948: LD_INT 26
32950: DOUBLE
32951: EQUAL
32952: IFTRUE 32956
32954: GO 32974
32956: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32957: LD_ADDR_VAR 0 3
32961: PUSH
32962: LD_INT 13
32964: PUSH
32965: LD_INT 14
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: ST_TO_ADDR
32972: GO 33291
32974: LD_INT 42
32976: DOUBLE
32977: EQUAL
32978: IFTRUE 32982
32980: GO 33008
32982: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32983: LD_ADDR_VAR 0 3
32987: PUSH
32988: LD_INT 21
32990: PUSH
32991: LD_INT 22
32993: PUSH
32994: LD_INT 23
32996: PUSH
32997: LD_INT 24
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: ST_TO_ADDR
33006: GO 33291
33008: LD_INT 43
33010: DOUBLE
33011: EQUAL
33012: IFTRUE 33016
33014: GO 33042
33016: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33017: LD_ADDR_VAR 0 3
33021: PUSH
33022: LD_INT 21
33024: PUSH
33025: LD_INT 22
33027: PUSH
33028: LD_INT 23
33030: PUSH
33031: LD_INT 24
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: ST_TO_ADDR
33040: GO 33291
33042: LD_INT 44
33044: DOUBLE
33045: EQUAL
33046: IFTRUE 33050
33048: GO 33076
33050: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33051: LD_ADDR_VAR 0 3
33055: PUSH
33056: LD_INT 21
33058: PUSH
33059: LD_INT 22
33061: PUSH
33062: LD_INT 23
33064: PUSH
33065: LD_INT 24
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: ST_TO_ADDR
33074: GO 33291
33076: LD_INT 45
33078: DOUBLE
33079: EQUAL
33080: IFTRUE 33084
33082: GO 33110
33084: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33085: LD_ADDR_VAR 0 3
33089: PUSH
33090: LD_INT 21
33092: PUSH
33093: LD_INT 22
33095: PUSH
33096: LD_INT 23
33098: PUSH
33099: LD_INT 24
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: ST_TO_ADDR
33108: GO 33291
33110: LD_INT 49
33112: DOUBLE
33113: EQUAL
33114: IFTRUE 33118
33116: GO 33144
33118: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33119: LD_ADDR_VAR 0 3
33123: PUSH
33124: LD_INT 21
33126: PUSH
33127: LD_INT 22
33129: PUSH
33130: LD_INT 23
33132: PUSH
33133: LD_INT 24
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: ST_TO_ADDR
33142: GO 33291
33144: LD_INT 51
33146: DOUBLE
33147: EQUAL
33148: IFTRUE 33152
33150: GO 33178
33152: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33153: LD_ADDR_VAR 0 3
33157: PUSH
33158: LD_INT 21
33160: PUSH
33161: LD_INT 22
33163: PUSH
33164: LD_INT 23
33166: PUSH
33167: LD_INT 24
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: ST_TO_ADDR
33176: GO 33291
33178: LD_INT 52
33180: DOUBLE
33181: EQUAL
33182: IFTRUE 33186
33184: GO 33212
33186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33187: LD_ADDR_VAR 0 3
33191: PUSH
33192: LD_INT 21
33194: PUSH
33195: LD_INT 22
33197: PUSH
33198: LD_INT 23
33200: PUSH
33201: LD_INT 24
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: ST_TO_ADDR
33210: GO 33291
33212: LD_INT 53
33214: DOUBLE
33215: EQUAL
33216: IFTRUE 33220
33218: GO 33238
33220: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33221: LD_ADDR_VAR 0 3
33225: PUSH
33226: LD_INT 23
33228: PUSH
33229: LD_INT 24
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: ST_TO_ADDR
33236: GO 33291
33238: LD_INT 46
33240: DOUBLE
33241: EQUAL
33242: IFTRUE 33246
33244: GO 33264
33246: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33247: LD_ADDR_VAR 0 3
33251: PUSH
33252: LD_INT 23
33254: PUSH
33255: LD_INT 24
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: ST_TO_ADDR
33262: GO 33291
33264: LD_INT 47
33266: DOUBLE
33267: EQUAL
33268: IFTRUE 33272
33270: GO 33290
33272: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33273: LD_ADDR_VAR 0 3
33277: PUSH
33278: LD_INT 23
33280: PUSH
33281: LD_INT 24
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: ST_TO_ADDR
33288: GO 33291
33290: POP
// result := ( chassis in result ) ;
33291: LD_ADDR_VAR 0 3
33295: PUSH
33296: LD_VAR 0 1
33300: PUSH
33301: LD_VAR 0 3
33305: IN
33306: ST_TO_ADDR
// end ;
33307: LD_VAR 0 3
33311: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33312: LD_INT 0
33314: PPUSH
33315: PPUSH
33316: PPUSH
33317: PPUSH
33318: PPUSH
33319: PPUSH
33320: PPUSH
// result := array ;
33321: LD_ADDR_VAR 0 5
33325: PUSH
33326: LD_VAR 0 1
33330: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33331: LD_VAR 0 1
33335: NOT
33336: PUSH
33337: LD_VAR 0 2
33341: NOT
33342: OR
33343: PUSH
33344: LD_VAR 0 3
33348: NOT
33349: OR
33350: PUSH
33351: LD_VAR 0 2
33355: PUSH
33356: LD_VAR 0 1
33360: GREATER
33361: OR
33362: PUSH
33363: LD_VAR 0 3
33367: PUSH
33368: LD_VAR 0 1
33372: GREATER
33373: OR
33374: IFFALSE 33378
// exit ;
33376: GO 33674
// if direction then
33378: LD_VAR 0 4
33382: IFFALSE 33446
// begin d := 1 ;
33384: LD_ADDR_VAR 0 9
33388: PUSH
33389: LD_INT 1
33391: ST_TO_ADDR
// if i_from > i_to then
33392: LD_VAR 0 2
33396: PUSH
33397: LD_VAR 0 3
33401: GREATER
33402: IFFALSE 33428
// length := ( array - i_from ) + i_to else
33404: LD_ADDR_VAR 0 11
33408: PUSH
33409: LD_VAR 0 1
33413: PUSH
33414: LD_VAR 0 2
33418: MINUS
33419: PUSH
33420: LD_VAR 0 3
33424: PLUS
33425: ST_TO_ADDR
33426: GO 33444
// length := i_to - i_from ;
33428: LD_ADDR_VAR 0 11
33432: PUSH
33433: LD_VAR 0 3
33437: PUSH
33438: LD_VAR 0 2
33442: MINUS
33443: ST_TO_ADDR
// end else
33444: GO 33507
// begin d := - 1 ;
33446: LD_ADDR_VAR 0 9
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: ST_TO_ADDR
// if i_from > i_to then
33455: LD_VAR 0 2
33459: PUSH
33460: LD_VAR 0 3
33464: GREATER
33465: IFFALSE 33485
// length := i_from - i_to else
33467: LD_ADDR_VAR 0 11
33471: PUSH
33472: LD_VAR 0 2
33476: PUSH
33477: LD_VAR 0 3
33481: MINUS
33482: ST_TO_ADDR
33483: GO 33507
// length := ( array - i_to ) + i_from ;
33485: LD_ADDR_VAR 0 11
33489: PUSH
33490: LD_VAR 0 1
33494: PUSH
33495: LD_VAR 0 3
33499: MINUS
33500: PUSH
33501: LD_VAR 0 2
33505: PLUS
33506: ST_TO_ADDR
// end ; if not length then
33507: LD_VAR 0 11
33511: NOT
33512: IFFALSE 33516
// exit ;
33514: GO 33674
// tmp := array ;
33516: LD_ADDR_VAR 0 10
33520: PUSH
33521: LD_VAR 0 1
33525: ST_TO_ADDR
// for i = 1 to length do
33526: LD_ADDR_VAR 0 6
33530: PUSH
33531: DOUBLE
33532: LD_INT 1
33534: DEC
33535: ST_TO_ADDR
33536: LD_VAR 0 11
33540: PUSH
33541: FOR_TO
33542: IFFALSE 33662
// begin for j = 1 to array do
33544: LD_ADDR_VAR 0 7
33548: PUSH
33549: DOUBLE
33550: LD_INT 1
33552: DEC
33553: ST_TO_ADDR
33554: LD_VAR 0 1
33558: PUSH
33559: FOR_TO
33560: IFFALSE 33648
// begin k := j + d ;
33562: LD_ADDR_VAR 0 8
33566: PUSH
33567: LD_VAR 0 7
33571: PUSH
33572: LD_VAR 0 9
33576: PLUS
33577: ST_TO_ADDR
// if k > array then
33578: LD_VAR 0 8
33582: PUSH
33583: LD_VAR 0 1
33587: GREATER
33588: IFFALSE 33598
// k := 1 ;
33590: LD_ADDR_VAR 0 8
33594: PUSH
33595: LD_INT 1
33597: ST_TO_ADDR
// if not k then
33598: LD_VAR 0 8
33602: NOT
33603: IFFALSE 33615
// k := array ;
33605: LD_ADDR_VAR 0 8
33609: PUSH
33610: LD_VAR 0 1
33614: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33615: LD_ADDR_VAR 0 10
33619: PUSH
33620: LD_VAR 0 10
33624: PPUSH
33625: LD_VAR 0 8
33629: PPUSH
33630: LD_VAR 0 1
33634: PUSH
33635: LD_VAR 0 7
33639: ARRAY
33640: PPUSH
33641: CALL_OW 1
33645: ST_TO_ADDR
// end ;
33646: GO 33559
33648: POP
33649: POP
// array := tmp ;
33650: LD_ADDR_VAR 0 1
33654: PUSH
33655: LD_VAR 0 10
33659: ST_TO_ADDR
// end ;
33660: GO 33541
33662: POP
33663: POP
// result := array ;
33664: LD_ADDR_VAR 0 5
33668: PUSH
33669: LD_VAR 0 1
33673: ST_TO_ADDR
// end ;
33674: LD_VAR 0 5
33678: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33679: LD_INT 0
33681: PPUSH
33682: PPUSH
// result := 0 ;
33683: LD_ADDR_VAR 0 3
33687: PUSH
33688: LD_INT 0
33690: ST_TO_ADDR
// if not array or not value in array then
33691: LD_VAR 0 1
33695: NOT
33696: PUSH
33697: LD_VAR 0 2
33701: PUSH
33702: LD_VAR 0 1
33706: IN
33707: NOT
33708: OR
33709: IFFALSE 33713
// exit ;
33711: GO 33767
// for i = 1 to array do
33713: LD_ADDR_VAR 0 4
33717: PUSH
33718: DOUBLE
33719: LD_INT 1
33721: DEC
33722: ST_TO_ADDR
33723: LD_VAR 0 1
33727: PUSH
33728: FOR_TO
33729: IFFALSE 33765
// if value = array [ i ] then
33731: LD_VAR 0 2
33735: PUSH
33736: LD_VAR 0 1
33740: PUSH
33741: LD_VAR 0 4
33745: ARRAY
33746: EQUAL
33747: IFFALSE 33763
// begin result := i ;
33749: LD_ADDR_VAR 0 3
33753: PUSH
33754: LD_VAR 0 4
33758: ST_TO_ADDR
// exit ;
33759: POP
33760: POP
33761: GO 33767
// end ;
33763: GO 33728
33765: POP
33766: POP
// end ;
33767: LD_VAR 0 3
33771: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33772: LD_INT 0
33774: PPUSH
// vc_chassis := chassis ;
33775: LD_ADDR_OWVAR 37
33779: PUSH
33780: LD_VAR 0 1
33784: ST_TO_ADDR
// vc_engine := engine ;
33785: LD_ADDR_OWVAR 39
33789: PUSH
33790: LD_VAR 0 2
33794: ST_TO_ADDR
// vc_control := control ;
33795: LD_ADDR_OWVAR 38
33799: PUSH
33800: LD_VAR 0 3
33804: ST_TO_ADDR
// vc_weapon := weapon ;
33805: LD_ADDR_OWVAR 40
33809: PUSH
33810: LD_VAR 0 4
33814: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33815: LD_ADDR_OWVAR 41
33819: PUSH
33820: LD_VAR 0 5
33824: ST_TO_ADDR
// end ;
33825: LD_VAR 0 6
33829: RET
// export function WantPlant ( unit ) ; var task ; begin
33830: LD_INT 0
33832: PPUSH
33833: PPUSH
// result := false ;
33834: LD_ADDR_VAR 0 2
33838: PUSH
33839: LD_INT 0
33841: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33842: LD_ADDR_VAR 0 3
33846: PUSH
33847: LD_VAR 0 1
33851: PPUSH
33852: CALL_OW 437
33856: ST_TO_ADDR
// if task then
33857: LD_VAR 0 3
33861: IFFALSE 33889
// if task [ 1 ] [ 1 ] = p then
33863: LD_VAR 0 3
33867: PUSH
33868: LD_INT 1
33870: ARRAY
33871: PUSH
33872: LD_INT 1
33874: ARRAY
33875: PUSH
33876: LD_STRING p
33878: EQUAL
33879: IFFALSE 33889
// result := true ;
33881: LD_ADDR_VAR 0 2
33885: PUSH
33886: LD_INT 1
33888: ST_TO_ADDR
// end ;
33889: LD_VAR 0 2
33893: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33894: LD_INT 0
33896: PPUSH
33897: PPUSH
33898: PPUSH
33899: PPUSH
// if pos < 1 then
33900: LD_VAR 0 2
33904: PUSH
33905: LD_INT 1
33907: LESS
33908: IFFALSE 33912
// exit ;
33910: GO 34215
// if pos = 1 then
33912: LD_VAR 0 2
33916: PUSH
33917: LD_INT 1
33919: EQUAL
33920: IFFALSE 33953
// result := Replace ( arr , pos [ 1 ] , value ) else
33922: LD_ADDR_VAR 0 4
33926: PUSH
33927: LD_VAR 0 1
33931: PPUSH
33932: LD_VAR 0 2
33936: PUSH
33937: LD_INT 1
33939: ARRAY
33940: PPUSH
33941: LD_VAR 0 3
33945: PPUSH
33946: CALL_OW 1
33950: ST_TO_ADDR
33951: GO 34215
// begin tmp := arr ;
33953: LD_ADDR_VAR 0 6
33957: PUSH
33958: LD_VAR 0 1
33962: ST_TO_ADDR
// s_arr := [ tmp ] ;
33963: LD_ADDR_VAR 0 7
33967: PUSH
33968: LD_VAR 0 6
33972: PUSH
33973: EMPTY
33974: LIST
33975: ST_TO_ADDR
// for i = 1 to pos - 1 do
33976: LD_ADDR_VAR 0 5
33980: PUSH
33981: DOUBLE
33982: LD_INT 1
33984: DEC
33985: ST_TO_ADDR
33986: LD_VAR 0 2
33990: PUSH
33991: LD_INT 1
33993: MINUS
33994: PUSH
33995: FOR_TO
33996: IFFALSE 34041
// begin tmp := tmp [ pos [ i ] ] ;
33998: LD_ADDR_VAR 0 6
34002: PUSH
34003: LD_VAR 0 6
34007: PUSH
34008: LD_VAR 0 2
34012: PUSH
34013: LD_VAR 0 5
34017: ARRAY
34018: ARRAY
34019: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34020: LD_ADDR_VAR 0 7
34024: PUSH
34025: LD_VAR 0 7
34029: PUSH
34030: LD_VAR 0 6
34034: PUSH
34035: EMPTY
34036: LIST
34037: ADD
34038: ST_TO_ADDR
// end ;
34039: GO 33995
34041: POP
34042: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34043: LD_ADDR_VAR 0 6
34047: PUSH
34048: LD_VAR 0 6
34052: PPUSH
34053: LD_VAR 0 2
34057: PUSH
34058: LD_VAR 0 2
34062: ARRAY
34063: PPUSH
34064: LD_VAR 0 3
34068: PPUSH
34069: CALL_OW 1
34073: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34074: LD_ADDR_VAR 0 7
34078: PUSH
34079: LD_VAR 0 7
34083: PPUSH
34084: LD_VAR 0 7
34088: PPUSH
34089: LD_VAR 0 6
34093: PPUSH
34094: CALL_OW 1
34098: ST_TO_ADDR
// for i = s_arr downto 2 do
34099: LD_ADDR_VAR 0 5
34103: PUSH
34104: DOUBLE
34105: LD_VAR 0 7
34109: INC
34110: ST_TO_ADDR
34111: LD_INT 2
34113: PUSH
34114: FOR_DOWNTO
34115: IFFALSE 34199
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34117: LD_ADDR_VAR 0 6
34121: PUSH
34122: LD_VAR 0 7
34126: PUSH
34127: LD_VAR 0 5
34131: PUSH
34132: LD_INT 1
34134: MINUS
34135: ARRAY
34136: PPUSH
34137: LD_VAR 0 2
34141: PUSH
34142: LD_VAR 0 5
34146: PUSH
34147: LD_INT 1
34149: MINUS
34150: ARRAY
34151: PPUSH
34152: LD_VAR 0 7
34156: PUSH
34157: LD_VAR 0 5
34161: ARRAY
34162: PPUSH
34163: CALL_OW 1
34167: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34168: LD_ADDR_VAR 0 7
34172: PUSH
34173: LD_VAR 0 7
34177: PPUSH
34178: LD_VAR 0 5
34182: PUSH
34183: LD_INT 1
34185: MINUS
34186: PPUSH
34187: LD_VAR 0 6
34191: PPUSH
34192: CALL_OW 1
34196: ST_TO_ADDR
// end ;
34197: GO 34114
34199: POP
34200: POP
// result := s_arr [ 1 ] ;
34201: LD_ADDR_VAR 0 4
34205: PUSH
34206: LD_VAR 0 7
34210: PUSH
34211: LD_INT 1
34213: ARRAY
34214: ST_TO_ADDR
// end ; end ;
34215: LD_VAR 0 4
34219: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34220: LD_INT 0
34222: PPUSH
34223: PPUSH
// if not list then
34224: LD_VAR 0 1
34228: NOT
34229: IFFALSE 34233
// exit ;
34231: GO 34324
// i := list [ pos1 ] ;
34233: LD_ADDR_VAR 0 5
34237: PUSH
34238: LD_VAR 0 1
34242: PUSH
34243: LD_VAR 0 2
34247: ARRAY
34248: ST_TO_ADDR
// if not i then
34249: LD_VAR 0 5
34253: NOT
34254: IFFALSE 34258
// exit ;
34256: GO 34324
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34258: LD_ADDR_VAR 0 1
34262: PUSH
34263: LD_VAR 0 1
34267: PPUSH
34268: LD_VAR 0 2
34272: PPUSH
34273: LD_VAR 0 1
34277: PUSH
34278: LD_VAR 0 3
34282: ARRAY
34283: PPUSH
34284: CALL_OW 1
34288: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34289: LD_ADDR_VAR 0 1
34293: PUSH
34294: LD_VAR 0 1
34298: PPUSH
34299: LD_VAR 0 3
34303: PPUSH
34304: LD_VAR 0 5
34308: PPUSH
34309: CALL_OW 1
34313: ST_TO_ADDR
// result := list ;
34314: LD_ADDR_VAR 0 4
34318: PUSH
34319: LD_VAR 0 1
34323: ST_TO_ADDR
// end ;
34324: LD_VAR 0 4
34328: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34329: LD_INT 0
34331: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34332: LD_ADDR_VAR 0 5
34336: PUSH
34337: LD_VAR 0 1
34341: PPUSH
34342: CALL_OW 250
34346: PPUSH
34347: LD_VAR 0 1
34351: PPUSH
34352: CALL_OW 251
34356: PPUSH
34357: LD_VAR 0 2
34361: PPUSH
34362: LD_VAR 0 3
34366: PPUSH
34367: LD_VAR 0 4
34371: PPUSH
34372: CALL 34382 0 5
34376: ST_TO_ADDR
// end ;
34377: LD_VAR 0 5
34381: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34382: LD_INT 0
34384: PPUSH
34385: PPUSH
34386: PPUSH
34387: PPUSH
// if not list then
34388: LD_VAR 0 3
34392: NOT
34393: IFFALSE 34397
// exit ;
34395: GO 34785
// result := [ ] ;
34397: LD_ADDR_VAR 0 6
34401: PUSH
34402: EMPTY
34403: ST_TO_ADDR
// for i in list do
34404: LD_ADDR_VAR 0 7
34408: PUSH
34409: LD_VAR 0 3
34413: PUSH
34414: FOR_IN
34415: IFFALSE 34617
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34417: LD_ADDR_VAR 0 9
34421: PUSH
34422: LD_VAR 0 7
34426: PPUSH
34427: LD_VAR 0 1
34431: PPUSH
34432: LD_VAR 0 2
34436: PPUSH
34437: CALL_OW 297
34441: ST_TO_ADDR
// if not result then
34442: LD_VAR 0 6
34446: NOT
34447: IFFALSE 34473
// result := [ [ i , tmp ] ] else
34449: LD_ADDR_VAR 0 6
34453: PUSH
34454: LD_VAR 0 7
34458: PUSH
34459: LD_VAR 0 9
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: EMPTY
34469: LIST
34470: ST_TO_ADDR
34471: GO 34615
// begin if result [ result ] [ 2 ] < tmp then
34473: LD_VAR 0 6
34477: PUSH
34478: LD_VAR 0 6
34482: ARRAY
34483: PUSH
34484: LD_INT 2
34486: ARRAY
34487: PUSH
34488: LD_VAR 0 9
34492: LESS
34493: IFFALSE 34535
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34495: LD_ADDR_VAR 0 6
34499: PUSH
34500: LD_VAR 0 6
34504: PPUSH
34505: LD_VAR 0 6
34509: PUSH
34510: LD_INT 1
34512: PLUS
34513: PPUSH
34514: LD_VAR 0 7
34518: PUSH
34519: LD_VAR 0 9
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PPUSH
34528: CALL_OW 2
34532: ST_TO_ADDR
34533: GO 34615
// for j = 1 to result do
34535: LD_ADDR_VAR 0 8
34539: PUSH
34540: DOUBLE
34541: LD_INT 1
34543: DEC
34544: ST_TO_ADDR
34545: LD_VAR 0 6
34549: PUSH
34550: FOR_TO
34551: IFFALSE 34613
// begin if tmp < result [ j ] [ 2 ] then
34553: LD_VAR 0 9
34557: PUSH
34558: LD_VAR 0 6
34562: PUSH
34563: LD_VAR 0 8
34567: ARRAY
34568: PUSH
34569: LD_INT 2
34571: ARRAY
34572: LESS
34573: IFFALSE 34611
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34575: LD_ADDR_VAR 0 6
34579: PUSH
34580: LD_VAR 0 6
34584: PPUSH
34585: LD_VAR 0 8
34589: PPUSH
34590: LD_VAR 0 7
34594: PUSH
34595: LD_VAR 0 9
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PPUSH
34604: CALL_OW 2
34608: ST_TO_ADDR
// break ;
34609: GO 34613
// end ; end ;
34611: GO 34550
34613: POP
34614: POP
// end ; end ;
34615: GO 34414
34617: POP
34618: POP
// if result and not asc then
34619: LD_VAR 0 6
34623: PUSH
34624: LD_VAR 0 4
34628: NOT
34629: AND
34630: IFFALSE 34705
// begin tmp := result ;
34632: LD_ADDR_VAR 0 9
34636: PUSH
34637: LD_VAR 0 6
34641: ST_TO_ADDR
// for i = tmp downto 1 do
34642: LD_ADDR_VAR 0 7
34646: PUSH
34647: DOUBLE
34648: LD_VAR 0 9
34652: INC
34653: ST_TO_ADDR
34654: LD_INT 1
34656: PUSH
34657: FOR_DOWNTO
34658: IFFALSE 34703
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34660: LD_ADDR_VAR 0 6
34664: PUSH
34665: LD_VAR 0 6
34669: PPUSH
34670: LD_VAR 0 9
34674: PUSH
34675: LD_VAR 0 7
34679: MINUS
34680: PUSH
34681: LD_INT 1
34683: PLUS
34684: PPUSH
34685: LD_VAR 0 9
34689: PUSH
34690: LD_VAR 0 7
34694: ARRAY
34695: PPUSH
34696: CALL_OW 1
34700: ST_TO_ADDR
34701: GO 34657
34703: POP
34704: POP
// end ; tmp := [ ] ;
34705: LD_ADDR_VAR 0 9
34709: PUSH
34710: EMPTY
34711: ST_TO_ADDR
// if mode then
34712: LD_VAR 0 5
34716: IFFALSE 34785
// begin for i = 1 to result do
34718: LD_ADDR_VAR 0 7
34722: PUSH
34723: DOUBLE
34724: LD_INT 1
34726: DEC
34727: ST_TO_ADDR
34728: LD_VAR 0 6
34732: PUSH
34733: FOR_TO
34734: IFFALSE 34773
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34736: LD_ADDR_VAR 0 9
34740: PUSH
34741: LD_VAR 0 9
34745: PPUSH
34746: LD_VAR 0 7
34750: PPUSH
34751: LD_VAR 0 6
34755: PUSH
34756: LD_VAR 0 7
34760: ARRAY
34761: PUSH
34762: LD_INT 1
34764: ARRAY
34765: PPUSH
34766: CALL_OW 1
34770: ST_TO_ADDR
34771: GO 34733
34773: POP
34774: POP
// result := tmp ;
34775: LD_ADDR_VAR 0 6
34779: PUSH
34780: LD_VAR 0 9
34784: ST_TO_ADDR
// end ; end ;
34785: LD_VAR 0 6
34789: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34790: LD_INT 0
34792: PPUSH
34793: PPUSH
34794: PPUSH
34795: PPUSH
34796: PPUSH
34797: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34798: LD_ADDR_VAR 0 5
34802: PUSH
34803: LD_INT 0
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: EMPTY
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: ST_TO_ADDR
// if not x or not y then
34820: LD_VAR 0 2
34824: NOT
34825: PUSH
34826: LD_VAR 0 3
34830: NOT
34831: OR
34832: IFFALSE 34836
// exit ;
34834: GO 36488
// if not range then
34836: LD_VAR 0 4
34840: NOT
34841: IFFALSE 34851
// range := 10 ;
34843: LD_ADDR_VAR 0 4
34847: PUSH
34848: LD_INT 10
34850: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34851: LD_ADDR_VAR 0 8
34855: PUSH
34856: LD_INT 81
34858: PUSH
34859: LD_VAR 0 1
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 92
34870: PUSH
34871: LD_VAR 0 2
34875: PUSH
34876: LD_VAR 0 3
34880: PUSH
34881: LD_VAR 0 4
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 3
34894: PUSH
34895: LD_INT 21
34897: PUSH
34898: LD_INT 3
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: LIST
34913: PPUSH
34914: CALL_OW 69
34918: ST_TO_ADDR
// if not tmp then
34919: LD_VAR 0 8
34923: NOT
34924: IFFALSE 34928
// exit ;
34926: GO 36488
// for i in tmp do
34928: LD_ADDR_VAR 0 6
34932: PUSH
34933: LD_VAR 0 8
34937: PUSH
34938: FOR_IN
34939: IFFALSE 36463
// begin points := [ 0 , 0 , 0 ] ;
34941: LD_ADDR_VAR 0 9
34945: PUSH
34946: LD_INT 0
34948: PUSH
34949: LD_INT 0
34951: PUSH
34952: LD_INT 0
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: ST_TO_ADDR
// bpoints := 1 ;
34960: LD_ADDR_VAR 0 10
34964: PUSH
34965: LD_INT 1
34967: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34968: LD_VAR 0 6
34972: PPUSH
34973: CALL_OW 247
34977: PUSH
34978: LD_INT 1
34980: DOUBLE
34981: EQUAL
34982: IFTRUE 34986
34984: GO 35564
34986: POP
// begin if GetClass ( i ) = 1 then
34987: LD_VAR 0 6
34991: PPUSH
34992: CALL_OW 257
34996: PUSH
34997: LD_INT 1
34999: EQUAL
35000: IFFALSE 35021
// points := [ 10 , 5 , 3 ] ;
35002: LD_ADDR_VAR 0 9
35006: PUSH
35007: LD_INT 10
35009: PUSH
35010: LD_INT 5
35012: PUSH
35013: LD_INT 3
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: LIST
35020: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35021: LD_VAR 0 6
35025: PPUSH
35026: CALL_OW 257
35030: PUSH
35031: LD_INT 2
35033: PUSH
35034: LD_INT 3
35036: PUSH
35037: LD_INT 4
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: LIST
35044: IN
35045: IFFALSE 35066
// points := [ 3 , 2 , 1 ] ;
35047: LD_ADDR_VAR 0 9
35051: PUSH
35052: LD_INT 3
35054: PUSH
35055: LD_INT 2
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: LIST
35065: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35066: LD_VAR 0 6
35070: PPUSH
35071: CALL_OW 257
35075: PUSH
35076: LD_INT 5
35078: EQUAL
35079: IFFALSE 35100
// points := [ 130 , 5 , 2 ] ;
35081: LD_ADDR_VAR 0 9
35085: PUSH
35086: LD_INT 130
35088: PUSH
35089: LD_INT 5
35091: PUSH
35092: LD_INT 2
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: LIST
35099: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35100: LD_VAR 0 6
35104: PPUSH
35105: CALL_OW 257
35109: PUSH
35110: LD_INT 8
35112: EQUAL
35113: IFFALSE 35134
// points := [ 35 , 35 , 30 ] ;
35115: LD_ADDR_VAR 0 9
35119: PUSH
35120: LD_INT 35
35122: PUSH
35123: LD_INT 35
35125: PUSH
35126: LD_INT 30
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: LIST
35133: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35134: LD_VAR 0 6
35138: PPUSH
35139: CALL_OW 257
35143: PUSH
35144: LD_INT 9
35146: EQUAL
35147: IFFALSE 35168
// points := [ 20 , 55 , 40 ] ;
35149: LD_ADDR_VAR 0 9
35153: PUSH
35154: LD_INT 20
35156: PUSH
35157: LD_INT 55
35159: PUSH
35160: LD_INT 40
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: LIST
35167: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35168: LD_VAR 0 6
35172: PPUSH
35173: CALL_OW 257
35177: PUSH
35178: LD_INT 12
35180: PUSH
35181: LD_INT 16
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: IN
35188: IFFALSE 35209
// points := [ 5 , 3 , 2 ] ;
35190: LD_ADDR_VAR 0 9
35194: PUSH
35195: LD_INT 5
35197: PUSH
35198: LD_INT 3
35200: PUSH
35201: LD_INT 2
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: LIST
35208: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35209: LD_VAR 0 6
35213: PPUSH
35214: CALL_OW 257
35218: PUSH
35219: LD_INT 17
35221: EQUAL
35222: IFFALSE 35243
// points := [ 100 , 50 , 75 ] ;
35224: LD_ADDR_VAR 0 9
35228: PUSH
35229: LD_INT 100
35231: PUSH
35232: LD_INT 50
35234: PUSH
35235: LD_INT 75
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: LIST
35242: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35243: LD_VAR 0 6
35247: PPUSH
35248: CALL_OW 257
35252: PUSH
35253: LD_INT 15
35255: EQUAL
35256: IFFALSE 35277
// points := [ 10 , 5 , 3 ] ;
35258: LD_ADDR_VAR 0 9
35262: PUSH
35263: LD_INT 10
35265: PUSH
35266: LD_INT 5
35268: PUSH
35269: LD_INT 3
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: LIST
35276: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35277: LD_VAR 0 6
35281: PPUSH
35282: CALL_OW 257
35286: PUSH
35287: LD_INT 14
35289: EQUAL
35290: IFFALSE 35311
// points := [ 10 , 0 , 0 ] ;
35292: LD_ADDR_VAR 0 9
35296: PUSH
35297: LD_INT 10
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: LD_INT 0
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: LIST
35310: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35311: LD_VAR 0 6
35315: PPUSH
35316: CALL_OW 257
35320: PUSH
35321: LD_INT 11
35323: EQUAL
35324: IFFALSE 35345
// points := [ 30 , 10 , 5 ] ;
35326: LD_ADDR_VAR 0 9
35330: PUSH
35331: LD_INT 30
35333: PUSH
35334: LD_INT 10
35336: PUSH
35337: LD_INT 5
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35345: LD_VAR 0 1
35349: PPUSH
35350: LD_INT 5
35352: PPUSH
35353: CALL_OW 321
35357: PUSH
35358: LD_INT 2
35360: EQUAL
35361: IFFALSE 35378
// bpoints := bpoints * 1.8 ;
35363: LD_ADDR_VAR 0 10
35367: PUSH
35368: LD_VAR 0 10
35372: PUSH
35373: LD_REAL  1.80000000000000E+0000
35376: MUL
35377: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35378: LD_VAR 0 6
35382: PPUSH
35383: CALL_OW 257
35387: PUSH
35388: LD_INT 1
35390: PUSH
35391: LD_INT 2
35393: PUSH
35394: LD_INT 3
35396: PUSH
35397: LD_INT 4
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: IN
35406: PUSH
35407: LD_VAR 0 1
35411: PPUSH
35412: LD_INT 51
35414: PPUSH
35415: CALL_OW 321
35419: PUSH
35420: LD_INT 2
35422: EQUAL
35423: AND
35424: IFFALSE 35441
// bpoints := bpoints * 1.2 ;
35426: LD_ADDR_VAR 0 10
35430: PUSH
35431: LD_VAR 0 10
35435: PUSH
35436: LD_REAL  1.20000000000000E+0000
35439: MUL
35440: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35441: LD_VAR 0 6
35445: PPUSH
35446: CALL_OW 257
35450: PUSH
35451: LD_INT 5
35453: PUSH
35454: LD_INT 7
35456: PUSH
35457: LD_INT 9
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: LIST
35464: IN
35465: PUSH
35466: LD_VAR 0 1
35470: PPUSH
35471: LD_INT 52
35473: PPUSH
35474: CALL_OW 321
35478: PUSH
35479: LD_INT 2
35481: EQUAL
35482: AND
35483: IFFALSE 35500
// bpoints := bpoints * 1.5 ;
35485: LD_ADDR_VAR 0 10
35489: PUSH
35490: LD_VAR 0 10
35494: PUSH
35495: LD_REAL  1.50000000000000E+0000
35498: MUL
35499: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35500: LD_VAR 0 1
35504: PPUSH
35505: LD_INT 66
35507: PPUSH
35508: CALL_OW 321
35512: PUSH
35513: LD_INT 2
35515: EQUAL
35516: IFFALSE 35533
// bpoints := bpoints * 1.1 ;
35518: LD_ADDR_VAR 0 10
35522: PUSH
35523: LD_VAR 0 10
35527: PUSH
35528: LD_REAL  1.10000000000000E+0000
35531: MUL
35532: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35533: LD_ADDR_VAR 0 10
35537: PUSH
35538: LD_VAR 0 10
35542: PUSH
35543: LD_VAR 0 6
35547: PPUSH
35548: LD_INT 1
35550: PPUSH
35551: CALL_OW 259
35555: PUSH
35556: LD_REAL  1.15000000000000E+0000
35559: MUL
35560: MUL
35561: ST_TO_ADDR
// end ; unit_vehicle :
35562: GO 36392
35564: LD_INT 2
35566: DOUBLE
35567: EQUAL
35568: IFTRUE 35572
35570: GO 36380
35572: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35573: LD_VAR 0 6
35577: PPUSH
35578: CALL_OW 264
35582: PUSH
35583: LD_INT 2
35585: PUSH
35586: LD_INT 42
35588: PUSH
35589: LD_INT 24
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: LIST
35596: IN
35597: IFFALSE 35618
// points := [ 25 , 5 , 3 ] ;
35599: LD_ADDR_VAR 0 9
35603: PUSH
35604: LD_INT 25
35606: PUSH
35607: LD_INT 5
35609: PUSH
35610: LD_INT 3
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: LIST
35617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35618: LD_VAR 0 6
35622: PPUSH
35623: CALL_OW 264
35627: PUSH
35628: LD_INT 4
35630: PUSH
35631: LD_INT 43
35633: PUSH
35634: LD_INT 25
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: LIST
35641: IN
35642: IFFALSE 35663
// points := [ 40 , 15 , 5 ] ;
35644: LD_ADDR_VAR 0 9
35648: PUSH
35649: LD_INT 40
35651: PUSH
35652: LD_INT 15
35654: PUSH
35655: LD_INT 5
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: LIST
35662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35663: LD_VAR 0 6
35667: PPUSH
35668: CALL_OW 264
35672: PUSH
35673: LD_INT 3
35675: PUSH
35676: LD_INT 23
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: IN
35683: IFFALSE 35704
// points := [ 7 , 25 , 8 ] ;
35685: LD_ADDR_VAR 0 9
35689: PUSH
35690: LD_INT 7
35692: PUSH
35693: LD_INT 25
35695: PUSH
35696: LD_INT 8
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: LIST
35703: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35704: LD_VAR 0 6
35708: PPUSH
35709: CALL_OW 264
35713: PUSH
35714: LD_INT 5
35716: PUSH
35717: LD_INT 27
35719: PUSH
35720: LD_INT 44
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: LIST
35727: IN
35728: IFFALSE 35749
// points := [ 14 , 50 , 16 ] ;
35730: LD_ADDR_VAR 0 9
35734: PUSH
35735: LD_INT 14
35737: PUSH
35738: LD_INT 50
35740: PUSH
35741: LD_INT 16
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: LIST
35748: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35749: LD_VAR 0 6
35753: PPUSH
35754: CALL_OW 264
35758: PUSH
35759: LD_INT 6
35761: PUSH
35762: LD_INT 46
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: IN
35769: IFFALSE 35790
// points := [ 32 , 120 , 70 ] ;
35771: LD_ADDR_VAR 0 9
35775: PUSH
35776: LD_INT 32
35778: PUSH
35779: LD_INT 120
35781: PUSH
35782: LD_INT 70
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: LIST
35789: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35790: LD_VAR 0 6
35794: PPUSH
35795: CALL_OW 264
35799: PUSH
35800: LD_INT 7
35802: PUSH
35803: LD_INT 28
35805: PUSH
35806: LD_INT 45
35808: PUSH
35809: LD_EXP 117
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: IN
35820: IFFALSE 35841
// points := [ 35 , 20 , 45 ] ;
35822: LD_ADDR_VAR 0 9
35826: PUSH
35827: LD_INT 35
35829: PUSH
35830: LD_INT 20
35832: PUSH
35833: LD_INT 45
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: LIST
35840: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35841: LD_VAR 0 6
35845: PPUSH
35846: CALL_OW 264
35850: PUSH
35851: LD_INT 47
35853: PUSH
35854: EMPTY
35855: LIST
35856: IN
35857: IFFALSE 35878
// points := [ 67 , 45 , 75 ] ;
35859: LD_ADDR_VAR 0 9
35863: PUSH
35864: LD_INT 67
35866: PUSH
35867: LD_INT 45
35869: PUSH
35870: LD_INT 75
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: LIST
35877: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35878: LD_VAR 0 6
35882: PPUSH
35883: CALL_OW 264
35887: PUSH
35888: LD_INT 26
35890: PUSH
35891: EMPTY
35892: LIST
35893: IN
35894: IFFALSE 35915
// points := [ 120 , 30 , 80 ] ;
35896: LD_ADDR_VAR 0 9
35900: PUSH
35901: LD_INT 120
35903: PUSH
35904: LD_INT 30
35906: PUSH
35907: LD_INT 80
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: LIST
35914: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35915: LD_VAR 0 6
35919: PPUSH
35920: CALL_OW 264
35924: PUSH
35925: LD_INT 22
35927: PUSH
35928: EMPTY
35929: LIST
35930: IN
35931: IFFALSE 35952
// points := [ 40 , 1 , 1 ] ;
35933: LD_ADDR_VAR 0 9
35937: PUSH
35938: LD_INT 40
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: LD_INT 1
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35952: LD_VAR 0 6
35956: PPUSH
35957: CALL_OW 264
35961: PUSH
35962: LD_INT 29
35964: PUSH
35965: EMPTY
35966: LIST
35967: IN
35968: IFFALSE 35989
// points := [ 70 , 200 , 400 ] ;
35970: LD_ADDR_VAR 0 9
35974: PUSH
35975: LD_INT 70
35977: PUSH
35978: LD_INT 200
35980: PUSH
35981: LD_INT 400
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35989: LD_VAR 0 6
35993: PPUSH
35994: CALL_OW 264
35998: PUSH
35999: LD_INT 14
36001: PUSH
36002: LD_INT 53
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: IN
36009: IFFALSE 36030
// points := [ 40 , 10 , 20 ] ;
36011: LD_ADDR_VAR 0 9
36015: PUSH
36016: LD_INT 40
36018: PUSH
36019: LD_INT 10
36021: PUSH
36022: LD_INT 20
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36030: LD_VAR 0 6
36034: PPUSH
36035: CALL_OW 264
36039: PUSH
36040: LD_INT 9
36042: PUSH
36043: EMPTY
36044: LIST
36045: IN
36046: IFFALSE 36067
// points := [ 5 , 70 , 20 ] ;
36048: LD_ADDR_VAR 0 9
36052: PUSH
36053: LD_INT 5
36055: PUSH
36056: LD_INT 70
36058: PUSH
36059: LD_INT 20
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: LIST
36066: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36067: LD_VAR 0 6
36071: PPUSH
36072: CALL_OW 264
36076: PUSH
36077: LD_INT 10
36079: PUSH
36080: EMPTY
36081: LIST
36082: IN
36083: IFFALSE 36104
// points := [ 35 , 110 , 70 ] ;
36085: LD_ADDR_VAR 0 9
36089: PUSH
36090: LD_INT 35
36092: PUSH
36093: LD_INT 110
36095: PUSH
36096: LD_INT 70
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: LIST
36103: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36104: LD_VAR 0 6
36108: PPUSH
36109: CALL_OW 265
36113: PUSH
36114: LD_INT 25
36116: EQUAL
36117: IFFALSE 36138
// points := [ 80 , 65 , 100 ] ;
36119: LD_ADDR_VAR 0 9
36123: PUSH
36124: LD_INT 80
36126: PUSH
36127: LD_INT 65
36129: PUSH
36130: LD_INT 100
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: LIST
36137: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36138: LD_VAR 0 6
36142: PPUSH
36143: CALL_OW 263
36147: PUSH
36148: LD_INT 1
36150: EQUAL
36151: IFFALSE 36186
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36153: LD_ADDR_VAR 0 10
36157: PUSH
36158: LD_VAR 0 10
36162: PUSH
36163: LD_VAR 0 6
36167: PPUSH
36168: CALL_OW 311
36172: PPUSH
36173: LD_INT 3
36175: PPUSH
36176: CALL_OW 259
36180: PUSH
36181: LD_INT 4
36183: MUL
36184: MUL
36185: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36186: LD_VAR 0 6
36190: PPUSH
36191: CALL_OW 263
36195: PUSH
36196: LD_INT 2
36198: EQUAL
36199: IFFALSE 36250
// begin j := IsControledBy ( i ) ;
36201: LD_ADDR_VAR 0 7
36205: PUSH
36206: LD_VAR 0 6
36210: PPUSH
36211: CALL_OW 312
36215: ST_TO_ADDR
// if j then
36216: LD_VAR 0 7
36220: IFFALSE 36250
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36222: LD_ADDR_VAR 0 10
36226: PUSH
36227: LD_VAR 0 10
36231: PUSH
36232: LD_VAR 0 7
36236: PPUSH
36237: LD_INT 3
36239: PPUSH
36240: CALL_OW 259
36244: PUSH
36245: LD_INT 3
36247: MUL
36248: MUL
36249: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36250: LD_VAR 0 6
36254: PPUSH
36255: CALL_OW 264
36259: PUSH
36260: LD_INT 5
36262: PUSH
36263: LD_INT 6
36265: PUSH
36266: LD_INT 46
36268: PUSH
36269: LD_INT 44
36271: PUSH
36272: LD_INT 47
36274: PUSH
36275: LD_INT 45
36277: PUSH
36278: LD_INT 28
36280: PUSH
36281: LD_INT 7
36283: PUSH
36284: LD_INT 27
36286: PUSH
36287: LD_INT 29
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: IN
36302: PUSH
36303: LD_VAR 0 1
36307: PPUSH
36308: LD_INT 52
36310: PPUSH
36311: CALL_OW 321
36315: PUSH
36316: LD_INT 2
36318: EQUAL
36319: AND
36320: IFFALSE 36337
// bpoints := bpoints * 1.2 ;
36322: LD_ADDR_VAR 0 10
36326: PUSH
36327: LD_VAR 0 10
36331: PUSH
36332: LD_REAL  1.20000000000000E+0000
36335: MUL
36336: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36337: LD_VAR 0 6
36341: PPUSH
36342: CALL_OW 264
36346: PUSH
36347: LD_INT 6
36349: PUSH
36350: LD_INT 46
36352: PUSH
36353: LD_INT 47
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: LIST
36360: IN
36361: IFFALSE 36378
// bpoints := bpoints * 1.2 ;
36363: LD_ADDR_VAR 0 10
36367: PUSH
36368: LD_VAR 0 10
36372: PUSH
36373: LD_REAL  1.20000000000000E+0000
36376: MUL
36377: ST_TO_ADDR
// end ; unit_building :
36378: GO 36392
36380: LD_INT 3
36382: DOUBLE
36383: EQUAL
36384: IFTRUE 36388
36386: GO 36391
36388: POP
// ; end ;
36389: GO 36392
36391: POP
// for j = 1 to 3 do
36392: LD_ADDR_VAR 0 7
36396: PUSH
36397: DOUBLE
36398: LD_INT 1
36400: DEC
36401: ST_TO_ADDR
36402: LD_INT 3
36404: PUSH
36405: FOR_TO
36406: IFFALSE 36459
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36408: LD_ADDR_VAR 0 5
36412: PUSH
36413: LD_VAR 0 5
36417: PPUSH
36418: LD_VAR 0 7
36422: PPUSH
36423: LD_VAR 0 5
36427: PUSH
36428: LD_VAR 0 7
36432: ARRAY
36433: PUSH
36434: LD_VAR 0 9
36438: PUSH
36439: LD_VAR 0 7
36443: ARRAY
36444: PUSH
36445: LD_VAR 0 10
36449: MUL
36450: PLUS
36451: PPUSH
36452: CALL_OW 1
36456: ST_TO_ADDR
36457: GO 36405
36459: POP
36460: POP
// end ;
36461: GO 34938
36463: POP
36464: POP
// result := Replace ( result , 4 , tmp ) ;
36465: LD_ADDR_VAR 0 5
36469: PUSH
36470: LD_VAR 0 5
36474: PPUSH
36475: LD_INT 4
36477: PPUSH
36478: LD_VAR 0 8
36482: PPUSH
36483: CALL_OW 1
36487: ST_TO_ADDR
// end ;
36488: LD_VAR 0 5
36492: RET
// export function DangerAtRange ( unit , range ) ; begin
36493: LD_INT 0
36495: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36496: LD_ADDR_VAR 0 3
36500: PUSH
36501: LD_VAR 0 1
36505: PPUSH
36506: CALL_OW 255
36510: PPUSH
36511: LD_VAR 0 1
36515: PPUSH
36516: CALL_OW 250
36520: PPUSH
36521: LD_VAR 0 1
36525: PPUSH
36526: CALL_OW 251
36530: PPUSH
36531: LD_VAR 0 2
36535: PPUSH
36536: CALL 34790 0 4
36540: ST_TO_ADDR
// end ;
36541: LD_VAR 0 3
36545: RET
// export function DangerInArea ( side , area ) ; begin
36546: LD_INT 0
36548: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36549: LD_ADDR_VAR 0 3
36553: PUSH
36554: LD_VAR 0 2
36558: PPUSH
36559: LD_INT 81
36561: PUSH
36562: LD_VAR 0 1
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PPUSH
36571: CALL_OW 70
36575: ST_TO_ADDR
// end ;
36576: LD_VAR 0 3
36580: RET
// export function IsExtension ( b ) ; begin
36581: LD_INT 0
36583: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36584: LD_ADDR_VAR 0 2
36588: PUSH
36589: LD_VAR 0 1
36593: PUSH
36594: LD_INT 23
36596: PUSH
36597: LD_INT 20
36599: PUSH
36600: LD_INT 22
36602: PUSH
36603: LD_INT 17
36605: PUSH
36606: LD_INT 24
36608: PUSH
36609: LD_INT 21
36611: PUSH
36612: LD_INT 19
36614: PUSH
36615: LD_INT 16
36617: PUSH
36618: LD_INT 25
36620: PUSH
36621: LD_INT 18
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: IN
36636: ST_TO_ADDR
// end ;
36637: LD_VAR 0 2
36641: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36642: LD_INT 0
36644: PPUSH
36645: PPUSH
36646: PPUSH
// result := [ ] ;
36647: LD_ADDR_VAR 0 4
36651: PUSH
36652: EMPTY
36653: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36654: LD_ADDR_VAR 0 5
36658: PUSH
36659: LD_VAR 0 2
36663: PPUSH
36664: LD_INT 21
36666: PUSH
36667: LD_INT 3
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PPUSH
36674: CALL_OW 70
36678: ST_TO_ADDR
// if not tmp then
36679: LD_VAR 0 5
36683: NOT
36684: IFFALSE 36688
// exit ;
36686: GO 36752
// if checkLink then
36688: LD_VAR 0 3
36692: IFFALSE 36742
// begin for i in tmp do
36694: LD_ADDR_VAR 0 6
36698: PUSH
36699: LD_VAR 0 5
36703: PUSH
36704: FOR_IN
36705: IFFALSE 36740
// if GetBase ( i ) <> base then
36707: LD_VAR 0 6
36711: PPUSH
36712: CALL_OW 274
36716: PUSH
36717: LD_VAR 0 1
36721: NONEQUAL
36722: IFFALSE 36738
// ComLinkToBase ( base , i ) ;
36724: LD_VAR 0 1
36728: PPUSH
36729: LD_VAR 0 6
36733: PPUSH
36734: CALL_OW 169
36738: GO 36704
36740: POP
36741: POP
// end ; result := tmp ;
36742: LD_ADDR_VAR 0 4
36746: PUSH
36747: LD_VAR 0 5
36751: ST_TO_ADDR
// end ;
36752: LD_VAR 0 4
36756: RET
// export function ComComplete ( units , b ) ; var i ; begin
36757: LD_INT 0
36759: PPUSH
36760: PPUSH
// if not units then
36761: LD_VAR 0 1
36765: NOT
36766: IFFALSE 36770
// exit ;
36768: GO 36860
// for i in units do
36770: LD_ADDR_VAR 0 4
36774: PUSH
36775: LD_VAR 0 1
36779: PUSH
36780: FOR_IN
36781: IFFALSE 36858
// if BuildingStatus ( b ) = bs_build then
36783: LD_VAR 0 2
36787: PPUSH
36788: CALL_OW 461
36792: PUSH
36793: LD_INT 1
36795: EQUAL
36796: IFFALSE 36856
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36798: LD_VAR 0 4
36802: PPUSH
36803: LD_STRING h
36805: PUSH
36806: LD_VAR 0 2
36810: PPUSH
36811: CALL_OW 250
36815: PUSH
36816: LD_VAR 0 2
36820: PPUSH
36821: CALL_OW 251
36825: PUSH
36826: LD_VAR 0 2
36830: PUSH
36831: LD_INT 0
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: PUSH
36849: EMPTY
36850: LIST
36851: PPUSH
36852: CALL_OW 446
36856: GO 36780
36858: POP
36859: POP
// end ;
36860: LD_VAR 0 3
36864: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36865: LD_INT 0
36867: PPUSH
36868: PPUSH
36869: PPUSH
36870: PPUSH
36871: PPUSH
36872: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36873: LD_VAR 0 1
36877: NOT
36878: PUSH
36879: LD_VAR 0 1
36883: PPUSH
36884: CALL_OW 263
36888: PUSH
36889: LD_INT 2
36891: NONEQUAL
36892: OR
36893: IFFALSE 36897
// exit ;
36895: GO 37213
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36897: LD_ADDR_VAR 0 6
36901: PUSH
36902: LD_INT 22
36904: PUSH
36905: LD_VAR 0 1
36909: PPUSH
36910: CALL_OW 255
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 2
36921: PUSH
36922: LD_INT 30
36924: PUSH
36925: LD_INT 36
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 34
36934: PUSH
36935: LD_INT 31
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: LIST
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PPUSH
36951: CALL_OW 69
36955: ST_TO_ADDR
// if not tmp then
36956: LD_VAR 0 6
36960: NOT
36961: IFFALSE 36965
// exit ;
36963: GO 37213
// result := [ ] ;
36965: LD_ADDR_VAR 0 2
36969: PUSH
36970: EMPTY
36971: ST_TO_ADDR
// for i in tmp do
36972: LD_ADDR_VAR 0 3
36976: PUSH
36977: LD_VAR 0 6
36981: PUSH
36982: FOR_IN
36983: IFFALSE 37054
// begin t := UnitsInside ( i ) ;
36985: LD_ADDR_VAR 0 4
36989: PUSH
36990: LD_VAR 0 3
36994: PPUSH
36995: CALL_OW 313
36999: ST_TO_ADDR
// if t then
37000: LD_VAR 0 4
37004: IFFALSE 37052
// for j in t do
37006: LD_ADDR_VAR 0 7
37010: PUSH
37011: LD_VAR 0 4
37015: PUSH
37016: FOR_IN
37017: IFFALSE 37050
// result := Replace ( result , result + 1 , j ) ;
37019: LD_ADDR_VAR 0 2
37023: PUSH
37024: LD_VAR 0 2
37028: PPUSH
37029: LD_VAR 0 2
37033: PUSH
37034: LD_INT 1
37036: PLUS
37037: PPUSH
37038: LD_VAR 0 7
37042: PPUSH
37043: CALL_OW 1
37047: ST_TO_ADDR
37048: GO 37016
37050: POP
37051: POP
// end ;
37052: GO 36982
37054: POP
37055: POP
// if not result then
37056: LD_VAR 0 2
37060: NOT
37061: IFFALSE 37065
// exit ;
37063: GO 37213
// mech := result [ 1 ] ;
37065: LD_ADDR_VAR 0 5
37069: PUSH
37070: LD_VAR 0 2
37074: PUSH
37075: LD_INT 1
37077: ARRAY
37078: ST_TO_ADDR
// if result > 1 then
37079: LD_VAR 0 2
37083: PUSH
37084: LD_INT 1
37086: GREATER
37087: IFFALSE 37199
// begin for i = 2 to result do
37089: LD_ADDR_VAR 0 3
37093: PUSH
37094: DOUBLE
37095: LD_INT 2
37097: DEC
37098: ST_TO_ADDR
37099: LD_VAR 0 2
37103: PUSH
37104: FOR_TO
37105: IFFALSE 37197
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37107: LD_ADDR_VAR 0 4
37111: PUSH
37112: LD_VAR 0 2
37116: PUSH
37117: LD_VAR 0 3
37121: ARRAY
37122: PPUSH
37123: LD_INT 3
37125: PPUSH
37126: CALL_OW 259
37130: PUSH
37131: LD_VAR 0 2
37135: PUSH
37136: LD_VAR 0 3
37140: ARRAY
37141: PPUSH
37142: CALL_OW 432
37146: MINUS
37147: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37148: LD_VAR 0 4
37152: PUSH
37153: LD_VAR 0 5
37157: PPUSH
37158: LD_INT 3
37160: PPUSH
37161: CALL_OW 259
37165: PUSH
37166: LD_VAR 0 5
37170: PPUSH
37171: CALL_OW 432
37175: MINUS
37176: GREATEREQUAL
37177: IFFALSE 37195
// mech := result [ i ] ;
37179: LD_ADDR_VAR 0 5
37183: PUSH
37184: LD_VAR 0 2
37188: PUSH
37189: LD_VAR 0 3
37193: ARRAY
37194: ST_TO_ADDR
// end ;
37195: GO 37104
37197: POP
37198: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37199: LD_VAR 0 1
37203: PPUSH
37204: LD_VAR 0 5
37208: PPUSH
37209: CALL_OW 135
// end ;
37213: LD_VAR 0 2
37217: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37218: LD_INT 0
37220: PPUSH
37221: PPUSH
37222: PPUSH
37223: PPUSH
37224: PPUSH
37225: PPUSH
37226: PPUSH
37227: PPUSH
37228: PPUSH
37229: PPUSH
37230: PPUSH
37231: PPUSH
37232: PPUSH
// result := [ ] ;
37233: LD_ADDR_VAR 0 7
37237: PUSH
37238: EMPTY
37239: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37240: LD_VAR 0 1
37244: PPUSH
37245: CALL_OW 266
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: LD_INT 1
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: IN
37260: NOT
37261: IFFALSE 37265
// exit ;
37263: GO 38899
// if name then
37265: LD_VAR 0 3
37269: IFFALSE 37285
// SetBName ( base_dep , name ) ;
37271: LD_VAR 0 1
37275: PPUSH
37276: LD_VAR 0 3
37280: PPUSH
37281: CALL_OW 500
// base := GetBase ( base_dep ) ;
37285: LD_ADDR_VAR 0 15
37289: PUSH
37290: LD_VAR 0 1
37294: PPUSH
37295: CALL_OW 274
37299: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37300: LD_ADDR_VAR 0 16
37304: PUSH
37305: LD_VAR 0 1
37309: PPUSH
37310: CALL_OW 255
37314: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37315: LD_ADDR_VAR 0 17
37319: PUSH
37320: LD_VAR 0 1
37324: PPUSH
37325: CALL_OW 248
37329: ST_TO_ADDR
// if sources then
37330: LD_VAR 0 5
37334: IFFALSE 37381
// for i = 1 to 3 do
37336: LD_ADDR_VAR 0 8
37340: PUSH
37341: DOUBLE
37342: LD_INT 1
37344: DEC
37345: ST_TO_ADDR
37346: LD_INT 3
37348: PUSH
37349: FOR_TO
37350: IFFALSE 37379
// AddResourceType ( base , i , sources [ i ] ) ;
37352: LD_VAR 0 15
37356: PPUSH
37357: LD_VAR 0 8
37361: PPUSH
37362: LD_VAR 0 5
37366: PUSH
37367: LD_VAR 0 8
37371: ARRAY
37372: PPUSH
37373: CALL_OW 276
37377: GO 37349
37379: POP
37380: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37381: LD_ADDR_VAR 0 18
37385: PUSH
37386: LD_VAR 0 15
37390: PPUSH
37391: LD_VAR 0 2
37395: PPUSH
37396: LD_INT 1
37398: PPUSH
37399: CALL 36642 0 3
37403: ST_TO_ADDR
// InitHc ;
37404: CALL_OW 19
// InitUc ;
37408: CALL_OW 18
// uc_side := side ;
37412: LD_ADDR_OWVAR 20
37416: PUSH
37417: LD_VAR 0 16
37421: ST_TO_ADDR
// uc_nation := nation ;
37422: LD_ADDR_OWVAR 21
37426: PUSH
37427: LD_VAR 0 17
37431: ST_TO_ADDR
// if buildings then
37432: LD_VAR 0 18
37436: IFFALSE 38758
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37438: LD_ADDR_VAR 0 19
37442: PUSH
37443: LD_VAR 0 18
37447: PPUSH
37448: LD_INT 2
37450: PUSH
37451: LD_INT 30
37453: PUSH
37454: LD_INT 29
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 30
37463: PUSH
37464: LD_INT 30
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: LIST
37475: PPUSH
37476: CALL_OW 72
37480: ST_TO_ADDR
// if tmp then
37481: LD_VAR 0 19
37485: IFFALSE 37533
// for i in tmp do
37487: LD_ADDR_VAR 0 8
37491: PUSH
37492: LD_VAR 0 19
37496: PUSH
37497: FOR_IN
37498: IFFALSE 37531
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37500: LD_VAR 0 8
37504: PPUSH
37505: CALL_OW 250
37509: PPUSH
37510: LD_VAR 0 8
37514: PPUSH
37515: CALL_OW 251
37519: PPUSH
37520: LD_VAR 0 16
37524: PPUSH
37525: CALL_OW 441
37529: GO 37497
37531: POP
37532: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37533: LD_VAR 0 18
37537: PPUSH
37538: LD_INT 2
37540: PUSH
37541: LD_INT 30
37543: PUSH
37544: LD_INT 32
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 30
37553: PUSH
37554: LD_INT 33
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: LIST
37565: PPUSH
37566: CALL_OW 72
37570: IFFALSE 37658
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37572: LD_ADDR_VAR 0 8
37576: PUSH
37577: LD_VAR 0 18
37581: PPUSH
37582: LD_INT 2
37584: PUSH
37585: LD_INT 30
37587: PUSH
37588: LD_INT 32
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 30
37597: PUSH
37598: LD_INT 33
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: LIST
37609: PPUSH
37610: CALL_OW 72
37614: PUSH
37615: FOR_IN
37616: IFFALSE 37656
// begin if not GetBWeapon ( i ) then
37618: LD_VAR 0 8
37622: PPUSH
37623: CALL_OW 269
37627: NOT
37628: IFFALSE 37654
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37630: LD_VAR 0 8
37634: PPUSH
37635: LD_VAR 0 8
37639: PPUSH
37640: LD_VAR 0 2
37644: PPUSH
37645: CALL 38904 0 2
37649: PPUSH
37650: CALL_OW 431
// end ;
37654: GO 37615
37656: POP
37657: POP
// end ; for i = 1 to personel do
37658: LD_ADDR_VAR 0 8
37662: PUSH
37663: DOUBLE
37664: LD_INT 1
37666: DEC
37667: ST_TO_ADDR
37668: LD_VAR 0 6
37672: PUSH
37673: FOR_TO
37674: IFFALSE 38738
// begin if i > 4 then
37676: LD_VAR 0 8
37680: PUSH
37681: LD_INT 4
37683: GREATER
37684: IFFALSE 37688
// break ;
37686: GO 38738
// case i of 1 :
37688: LD_VAR 0 8
37692: PUSH
37693: LD_INT 1
37695: DOUBLE
37696: EQUAL
37697: IFTRUE 37701
37699: GO 37781
37701: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37702: LD_ADDR_VAR 0 12
37706: PUSH
37707: LD_VAR 0 18
37711: PPUSH
37712: LD_INT 22
37714: PUSH
37715: LD_VAR 0 16
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 58
37726: PUSH
37727: EMPTY
37728: LIST
37729: PUSH
37730: LD_INT 2
37732: PUSH
37733: LD_INT 30
37735: PUSH
37736: LD_INT 32
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 30
37745: PUSH
37746: LD_INT 4
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 30
37755: PUSH
37756: LD_INT 5
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: LIST
37773: PPUSH
37774: CALL_OW 72
37778: ST_TO_ADDR
37779: GO 38003
37781: LD_INT 2
37783: DOUBLE
37784: EQUAL
37785: IFTRUE 37789
37787: GO 37851
37789: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37790: LD_ADDR_VAR 0 12
37794: PUSH
37795: LD_VAR 0 18
37799: PPUSH
37800: LD_INT 22
37802: PUSH
37803: LD_VAR 0 16
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 2
37814: PUSH
37815: LD_INT 30
37817: PUSH
37818: LD_INT 0
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 30
37827: PUSH
37828: LD_INT 1
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: LIST
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PPUSH
37844: CALL_OW 72
37848: ST_TO_ADDR
37849: GO 38003
37851: LD_INT 3
37853: DOUBLE
37854: EQUAL
37855: IFTRUE 37859
37857: GO 37921
37859: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37860: LD_ADDR_VAR 0 12
37864: PUSH
37865: LD_VAR 0 18
37869: PPUSH
37870: LD_INT 22
37872: PUSH
37873: LD_VAR 0 16
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: LD_INT 30
37887: PUSH
37888: LD_INT 2
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 30
37897: PUSH
37898: LD_INT 3
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PPUSH
37914: CALL_OW 72
37918: ST_TO_ADDR
37919: GO 38003
37921: LD_INT 4
37923: DOUBLE
37924: EQUAL
37925: IFTRUE 37929
37927: GO 38002
37929: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37930: LD_ADDR_VAR 0 12
37934: PUSH
37935: LD_VAR 0 18
37939: PPUSH
37940: LD_INT 22
37942: PUSH
37943: LD_VAR 0 16
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 2
37954: PUSH
37955: LD_INT 30
37957: PUSH
37958: LD_INT 6
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 30
37967: PUSH
37968: LD_INT 7
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 30
37977: PUSH
37978: LD_INT 8
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PPUSH
37995: CALL_OW 72
37999: ST_TO_ADDR
38000: GO 38003
38002: POP
// if i = 1 then
38003: LD_VAR 0 8
38007: PUSH
38008: LD_INT 1
38010: EQUAL
38011: IFFALSE 38122
// begin tmp := [ ] ;
38013: LD_ADDR_VAR 0 19
38017: PUSH
38018: EMPTY
38019: ST_TO_ADDR
// for j in f do
38020: LD_ADDR_VAR 0 9
38024: PUSH
38025: LD_VAR 0 12
38029: PUSH
38030: FOR_IN
38031: IFFALSE 38104
// if GetBType ( j ) = b_bunker then
38033: LD_VAR 0 9
38037: PPUSH
38038: CALL_OW 266
38042: PUSH
38043: LD_INT 32
38045: EQUAL
38046: IFFALSE 38073
// tmp := Insert ( tmp , 1 , j ) else
38048: LD_ADDR_VAR 0 19
38052: PUSH
38053: LD_VAR 0 19
38057: PPUSH
38058: LD_INT 1
38060: PPUSH
38061: LD_VAR 0 9
38065: PPUSH
38066: CALL_OW 2
38070: ST_TO_ADDR
38071: GO 38102
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38073: LD_ADDR_VAR 0 19
38077: PUSH
38078: LD_VAR 0 19
38082: PPUSH
38083: LD_VAR 0 19
38087: PUSH
38088: LD_INT 1
38090: PLUS
38091: PPUSH
38092: LD_VAR 0 9
38096: PPUSH
38097: CALL_OW 2
38101: ST_TO_ADDR
38102: GO 38030
38104: POP
38105: POP
// if tmp then
38106: LD_VAR 0 19
38110: IFFALSE 38122
// f := tmp ;
38112: LD_ADDR_VAR 0 12
38116: PUSH
38117: LD_VAR 0 19
38121: ST_TO_ADDR
// end ; x := personel [ i ] ;
38122: LD_ADDR_VAR 0 13
38126: PUSH
38127: LD_VAR 0 6
38131: PUSH
38132: LD_VAR 0 8
38136: ARRAY
38137: ST_TO_ADDR
// if x = - 1 then
38138: LD_VAR 0 13
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: EQUAL
38147: IFFALSE 38356
// begin for j in f do
38149: LD_ADDR_VAR 0 9
38153: PUSH
38154: LD_VAR 0 12
38158: PUSH
38159: FOR_IN
38160: IFFALSE 38352
// repeat InitHc ;
38162: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38166: LD_VAR 0 9
38170: PPUSH
38171: CALL_OW 266
38175: PUSH
38176: LD_INT 5
38178: EQUAL
38179: IFFALSE 38249
// begin if UnitsInside ( j ) < 3 then
38181: LD_VAR 0 9
38185: PPUSH
38186: CALL_OW 313
38190: PUSH
38191: LD_INT 3
38193: LESS
38194: IFFALSE 38230
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38196: LD_INT 0
38198: PPUSH
38199: LD_INT 5
38201: PUSH
38202: LD_INT 8
38204: PUSH
38205: LD_INT 9
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: LIST
38212: PUSH
38213: LD_VAR 0 17
38217: ARRAY
38218: PPUSH
38219: LD_VAR 0 4
38223: PPUSH
38224: CALL_OW 380
38228: GO 38247
// PrepareHuman ( false , i , skill ) ;
38230: LD_INT 0
38232: PPUSH
38233: LD_VAR 0 8
38237: PPUSH
38238: LD_VAR 0 4
38242: PPUSH
38243: CALL_OW 380
// end else
38247: GO 38266
// PrepareHuman ( false , i , skill ) ;
38249: LD_INT 0
38251: PPUSH
38252: LD_VAR 0 8
38256: PPUSH
38257: LD_VAR 0 4
38261: PPUSH
38262: CALL_OW 380
// un := CreateHuman ;
38266: LD_ADDR_VAR 0 14
38270: PUSH
38271: CALL_OW 44
38275: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38276: LD_ADDR_VAR 0 7
38280: PUSH
38281: LD_VAR 0 7
38285: PPUSH
38286: LD_INT 1
38288: PPUSH
38289: LD_VAR 0 14
38293: PPUSH
38294: CALL_OW 2
38298: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38299: LD_VAR 0 14
38303: PPUSH
38304: LD_VAR 0 9
38308: PPUSH
38309: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38313: LD_VAR 0 9
38317: PPUSH
38318: CALL_OW 313
38322: PUSH
38323: LD_INT 6
38325: EQUAL
38326: PUSH
38327: LD_VAR 0 9
38331: PPUSH
38332: CALL_OW 266
38336: PUSH
38337: LD_INT 32
38339: PUSH
38340: LD_INT 31
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: IN
38347: OR
38348: IFFALSE 38162
38350: GO 38159
38352: POP
38353: POP
// end else
38354: GO 38736
// for j = 1 to x do
38356: LD_ADDR_VAR 0 9
38360: PUSH
38361: DOUBLE
38362: LD_INT 1
38364: DEC
38365: ST_TO_ADDR
38366: LD_VAR 0 13
38370: PUSH
38371: FOR_TO
38372: IFFALSE 38734
// begin InitHc ;
38374: CALL_OW 19
// if not f then
38378: LD_VAR 0 12
38382: NOT
38383: IFFALSE 38472
// begin PrepareHuman ( false , i , skill ) ;
38385: LD_INT 0
38387: PPUSH
38388: LD_VAR 0 8
38392: PPUSH
38393: LD_VAR 0 4
38397: PPUSH
38398: CALL_OW 380
// un := CreateHuman ;
38402: LD_ADDR_VAR 0 14
38406: PUSH
38407: CALL_OW 44
38411: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38412: LD_ADDR_VAR 0 7
38416: PUSH
38417: LD_VAR 0 7
38421: PPUSH
38422: LD_INT 1
38424: PPUSH
38425: LD_VAR 0 14
38429: PPUSH
38430: CALL_OW 2
38434: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38435: LD_VAR 0 14
38439: PPUSH
38440: LD_VAR 0 1
38444: PPUSH
38445: CALL_OW 250
38449: PPUSH
38450: LD_VAR 0 1
38454: PPUSH
38455: CALL_OW 251
38459: PPUSH
38460: LD_INT 10
38462: PPUSH
38463: LD_INT 0
38465: PPUSH
38466: CALL_OW 50
// continue ;
38470: GO 38371
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38472: LD_VAR 0 12
38476: PUSH
38477: LD_INT 1
38479: ARRAY
38480: PPUSH
38481: CALL_OW 313
38485: PUSH
38486: LD_VAR 0 12
38490: PUSH
38491: LD_INT 1
38493: ARRAY
38494: PPUSH
38495: CALL_OW 266
38499: PUSH
38500: LD_INT 32
38502: PUSH
38503: LD_INT 31
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: IN
38510: AND
38511: PUSH
38512: LD_VAR 0 12
38516: PUSH
38517: LD_INT 1
38519: ARRAY
38520: PPUSH
38521: CALL_OW 313
38525: PUSH
38526: LD_INT 6
38528: EQUAL
38529: OR
38530: IFFALSE 38550
// f := Delete ( f , 1 ) ;
38532: LD_ADDR_VAR 0 12
38536: PUSH
38537: LD_VAR 0 12
38541: PPUSH
38542: LD_INT 1
38544: PPUSH
38545: CALL_OW 3
38549: ST_TO_ADDR
// if not f then
38550: LD_VAR 0 12
38554: NOT
38555: IFFALSE 38573
// begin x := x + 2 ;
38557: LD_ADDR_VAR 0 13
38561: PUSH
38562: LD_VAR 0 13
38566: PUSH
38567: LD_INT 2
38569: PLUS
38570: ST_TO_ADDR
// continue ;
38571: GO 38371
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38573: LD_VAR 0 12
38577: PUSH
38578: LD_INT 1
38580: ARRAY
38581: PPUSH
38582: CALL_OW 266
38586: PUSH
38587: LD_INT 5
38589: EQUAL
38590: IFFALSE 38664
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38592: LD_VAR 0 12
38596: PUSH
38597: LD_INT 1
38599: ARRAY
38600: PPUSH
38601: CALL_OW 313
38605: PUSH
38606: LD_INT 3
38608: LESS
38609: IFFALSE 38645
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38611: LD_INT 0
38613: PPUSH
38614: LD_INT 5
38616: PUSH
38617: LD_INT 8
38619: PUSH
38620: LD_INT 9
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: LIST
38627: PUSH
38628: LD_VAR 0 17
38632: ARRAY
38633: PPUSH
38634: LD_VAR 0 4
38638: PPUSH
38639: CALL_OW 380
38643: GO 38662
// PrepareHuman ( false , i , skill ) ;
38645: LD_INT 0
38647: PPUSH
38648: LD_VAR 0 8
38652: PPUSH
38653: LD_VAR 0 4
38657: PPUSH
38658: CALL_OW 380
// end else
38662: GO 38681
// PrepareHuman ( false , i , skill ) ;
38664: LD_INT 0
38666: PPUSH
38667: LD_VAR 0 8
38671: PPUSH
38672: LD_VAR 0 4
38676: PPUSH
38677: CALL_OW 380
// un := CreateHuman ;
38681: LD_ADDR_VAR 0 14
38685: PUSH
38686: CALL_OW 44
38690: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38691: LD_ADDR_VAR 0 7
38695: PUSH
38696: LD_VAR 0 7
38700: PPUSH
38701: LD_INT 1
38703: PPUSH
38704: LD_VAR 0 14
38708: PPUSH
38709: CALL_OW 2
38713: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38714: LD_VAR 0 14
38718: PPUSH
38719: LD_VAR 0 12
38723: PUSH
38724: LD_INT 1
38726: ARRAY
38727: PPUSH
38728: CALL_OW 52
// end ;
38732: GO 38371
38734: POP
38735: POP
// end ;
38736: GO 37673
38738: POP
38739: POP
// result := result ^ buildings ;
38740: LD_ADDR_VAR 0 7
38744: PUSH
38745: LD_VAR 0 7
38749: PUSH
38750: LD_VAR 0 18
38754: ADD
38755: ST_TO_ADDR
// end else
38756: GO 38899
// begin for i = 1 to personel do
38758: LD_ADDR_VAR 0 8
38762: PUSH
38763: DOUBLE
38764: LD_INT 1
38766: DEC
38767: ST_TO_ADDR
38768: LD_VAR 0 6
38772: PUSH
38773: FOR_TO
38774: IFFALSE 38897
// begin if i > 4 then
38776: LD_VAR 0 8
38780: PUSH
38781: LD_INT 4
38783: GREATER
38784: IFFALSE 38788
// break ;
38786: GO 38897
// x := personel [ i ] ;
38788: LD_ADDR_VAR 0 13
38792: PUSH
38793: LD_VAR 0 6
38797: PUSH
38798: LD_VAR 0 8
38802: ARRAY
38803: ST_TO_ADDR
// if x = - 1 then
38804: LD_VAR 0 13
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: EQUAL
38813: IFFALSE 38817
// continue ;
38815: GO 38773
// PrepareHuman ( false , i , skill ) ;
38817: LD_INT 0
38819: PPUSH
38820: LD_VAR 0 8
38824: PPUSH
38825: LD_VAR 0 4
38829: PPUSH
38830: CALL_OW 380
// un := CreateHuman ;
38834: LD_ADDR_VAR 0 14
38838: PUSH
38839: CALL_OW 44
38843: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38844: LD_VAR 0 14
38848: PPUSH
38849: LD_VAR 0 1
38853: PPUSH
38854: CALL_OW 250
38858: PPUSH
38859: LD_VAR 0 1
38863: PPUSH
38864: CALL_OW 251
38868: PPUSH
38869: LD_INT 10
38871: PPUSH
38872: LD_INT 0
38874: PPUSH
38875: CALL_OW 50
// result := result ^ un ;
38879: LD_ADDR_VAR 0 7
38883: PUSH
38884: LD_VAR 0 7
38888: PUSH
38889: LD_VAR 0 14
38893: ADD
38894: ST_TO_ADDR
// end ;
38895: GO 38773
38897: POP
38898: POP
// end ; end ;
38899: LD_VAR 0 7
38903: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38904: LD_INT 0
38906: PPUSH
38907: PPUSH
38908: PPUSH
38909: PPUSH
38910: PPUSH
38911: PPUSH
38912: PPUSH
38913: PPUSH
38914: PPUSH
38915: PPUSH
38916: PPUSH
38917: PPUSH
38918: PPUSH
38919: PPUSH
38920: PPUSH
38921: PPUSH
// result := false ;
38922: LD_ADDR_VAR 0 3
38926: PUSH
38927: LD_INT 0
38929: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38930: LD_VAR 0 1
38934: NOT
38935: PUSH
38936: LD_VAR 0 1
38940: PPUSH
38941: CALL_OW 266
38945: PUSH
38946: LD_INT 32
38948: PUSH
38949: LD_INT 33
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: IN
38956: NOT
38957: OR
38958: IFFALSE 38962
// exit ;
38960: GO 40071
// nat := GetNation ( tower ) ;
38962: LD_ADDR_VAR 0 12
38966: PUSH
38967: LD_VAR 0 1
38971: PPUSH
38972: CALL_OW 248
38976: ST_TO_ADDR
// side := GetSide ( tower ) ;
38977: LD_ADDR_VAR 0 16
38981: PUSH
38982: LD_VAR 0 1
38986: PPUSH
38987: CALL_OW 255
38991: ST_TO_ADDR
// x := GetX ( tower ) ;
38992: LD_ADDR_VAR 0 10
38996: PUSH
38997: LD_VAR 0 1
39001: PPUSH
39002: CALL_OW 250
39006: ST_TO_ADDR
// y := GetY ( tower ) ;
39007: LD_ADDR_VAR 0 11
39011: PUSH
39012: LD_VAR 0 1
39016: PPUSH
39017: CALL_OW 251
39021: ST_TO_ADDR
// if not x or not y then
39022: LD_VAR 0 10
39026: NOT
39027: PUSH
39028: LD_VAR 0 11
39032: NOT
39033: OR
39034: IFFALSE 39038
// exit ;
39036: GO 40071
// weapon := 0 ;
39038: LD_ADDR_VAR 0 18
39042: PUSH
39043: LD_INT 0
39045: ST_TO_ADDR
// fac_list := [ ] ;
39046: LD_ADDR_VAR 0 17
39050: PUSH
39051: EMPTY
39052: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39053: LD_ADDR_VAR 0 6
39057: PUSH
39058: LD_VAR 0 1
39062: PPUSH
39063: CALL_OW 274
39067: PPUSH
39068: LD_VAR 0 2
39072: PPUSH
39073: LD_INT 0
39075: PPUSH
39076: CALL 36642 0 3
39080: PPUSH
39081: LD_INT 30
39083: PUSH
39084: LD_INT 3
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PPUSH
39091: CALL_OW 72
39095: ST_TO_ADDR
// if not factories then
39096: LD_VAR 0 6
39100: NOT
39101: IFFALSE 39105
// exit ;
39103: GO 40071
// for i in factories do
39105: LD_ADDR_VAR 0 8
39109: PUSH
39110: LD_VAR 0 6
39114: PUSH
39115: FOR_IN
39116: IFFALSE 39141
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39118: LD_ADDR_VAR 0 17
39122: PUSH
39123: LD_VAR 0 17
39127: PUSH
39128: LD_VAR 0 8
39132: PPUSH
39133: CALL_OW 478
39137: UNION
39138: ST_TO_ADDR
39139: GO 39115
39141: POP
39142: POP
// if not fac_list then
39143: LD_VAR 0 17
39147: NOT
39148: IFFALSE 39152
// exit ;
39150: GO 40071
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39152: LD_ADDR_VAR 0 5
39156: PUSH
39157: LD_INT 4
39159: PUSH
39160: LD_INT 5
39162: PUSH
39163: LD_INT 9
39165: PUSH
39166: LD_INT 10
39168: PUSH
39169: LD_INT 6
39171: PUSH
39172: LD_INT 7
39174: PUSH
39175: LD_INT 11
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 27
39189: PUSH
39190: LD_INT 28
39192: PUSH
39193: LD_INT 26
39195: PUSH
39196: LD_INT 30
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 43
39207: PUSH
39208: LD_INT 44
39210: PUSH
39211: LD_INT 46
39213: PUSH
39214: LD_INT 45
39216: PUSH
39217: LD_INT 47
39219: PUSH
39220: LD_INT 49
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: LIST
39235: PUSH
39236: LD_VAR 0 12
39240: ARRAY
39241: ST_TO_ADDR
// list := list isect fac_list ;
39242: LD_ADDR_VAR 0 5
39246: PUSH
39247: LD_VAR 0 5
39251: PUSH
39252: LD_VAR 0 17
39256: ISECT
39257: ST_TO_ADDR
// if not list then
39258: LD_VAR 0 5
39262: NOT
39263: IFFALSE 39267
// exit ;
39265: GO 40071
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39267: LD_VAR 0 12
39271: PUSH
39272: LD_INT 3
39274: EQUAL
39275: PUSH
39276: LD_INT 49
39278: PUSH
39279: LD_VAR 0 5
39283: IN
39284: AND
39285: PUSH
39286: LD_INT 31
39288: PPUSH
39289: LD_VAR 0 16
39293: PPUSH
39294: CALL_OW 321
39298: PUSH
39299: LD_INT 2
39301: EQUAL
39302: AND
39303: IFFALSE 39363
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39305: LD_INT 22
39307: PUSH
39308: LD_VAR 0 16
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 35
39319: PUSH
39320: LD_INT 49
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 91
39329: PUSH
39330: LD_VAR 0 1
39334: PUSH
39335: LD_INT 10
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: LIST
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: LIST
39347: PPUSH
39348: CALL_OW 69
39352: NOT
39353: IFFALSE 39363
// weapon := ru_time_lapser ;
39355: LD_ADDR_VAR 0 18
39359: PUSH
39360: LD_INT 49
39362: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39363: LD_VAR 0 12
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: LD_INT 2
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: IN
39378: PUSH
39379: LD_INT 11
39381: PUSH
39382: LD_VAR 0 5
39386: IN
39387: PUSH
39388: LD_INT 30
39390: PUSH
39391: LD_VAR 0 5
39395: IN
39396: OR
39397: AND
39398: PUSH
39399: LD_INT 6
39401: PPUSH
39402: LD_VAR 0 16
39406: PPUSH
39407: CALL_OW 321
39411: PUSH
39412: LD_INT 2
39414: EQUAL
39415: AND
39416: IFFALSE 39581
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39418: LD_INT 22
39420: PUSH
39421: LD_VAR 0 16
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: LD_INT 35
39435: PUSH
39436: LD_INT 11
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 35
39445: PUSH
39446: LD_INT 30
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 91
39460: PUSH
39461: LD_VAR 0 1
39465: PUSH
39466: LD_INT 18
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: LIST
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: PPUSH
39479: CALL_OW 69
39483: NOT
39484: PUSH
39485: LD_INT 22
39487: PUSH
39488: LD_VAR 0 16
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: LD_INT 30
39502: PUSH
39503: LD_INT 32
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 30
39512: PUSH
39513: LD_INT 33
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 91
39527: PUSH
39528: LD_VAR 0 1
39532: PUSH
39533: LD_INT 12
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: LIST
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: LIST
39545: PUSH
39546: EMPTY
39547: LIST
39548: PPUSH
39549: CALL_OW 69
39553: PUSH
39554: LD_INT 2
39556: GREATER
39557: AND
39558: IFFALSE 39581
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39560: LD_ADDR_VAR 0 18
39564: PUSH
39565: LD_INT 11
39567: PUSH
39568: LD_INT 30
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_VAR 0 12
39579: ARRAY
39580: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39581: LD_VAR 0 18
39585: NOT
39586: PUSH
39587: LD_INT 40
39589: PPUSH
39590: LD_VAR 0 16
39594: PPUSH
39595: CALL_OW 321
39599: PUSH
39600: LD_INT 2
39602: EQUAL
39603: AND
39604: PUSH
39605: LD_INT 7
39607: PUSH
39608: LD_VAR 0 5
39612: IN
39613: PUSH
39614: LD_INT 28
39616: PUSH
39617: LD_VAR 0 5
39621: IN
39622: OR
39623: PUSH
39624: LD_INT 45
39626: PUSH
39627: LD_VAR 0 5
39631: IN
39632: OR
39633: AND
39634: IFFALSE 39888
// begin hex := GetHexInfo ( x , y ) ;
39636: LD_ADDR_VAR 0 4
39640: PUSH
39641: LD_VAR 0 10
39645: PPUSH
39646: LD_VAR 0 11
39650: PPUSH
39651: CALL_OW 546
39655: ST_TO_ADDR
// if hex [ 1 ] then
39656: LD_VAR 0 4
39660: PUSH
39661: LD_INT 1
39663: ARRAY
39664: IFFALSE 39668
// exit ;
39666: GO 40071
// height := hex [ 2 ] ;
39668: LD_ADDR_VAR 0 15
39672: PUSH
39673: LD_VAR 0 4
39677: PUSH
39678: LD_INT 2
39680: ARRAY
39681: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39682: LD_ADDR_VAR 0 14
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: LD_INT 3
39695: PUSH
39696: LD_INT 5
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: ST_TO_ADDR
// for i in tmp do
39705: LD_ADDR_VAR 0 8
39709: PUSH
39710: LD_VAR 0 14
39714: PUSH
39715: FOR_IN
39716: IFFALSE 39886
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39718: LD_ADDR_VAR 0 9
39722: PUSH
39723: LD_VAR 0 10
39727: PPUSH
39728: LD_VAR 0 8
39732: PPUSH
39733: LD_INT 5
39735: PPUSH
39736: CALL_OW 272
39740: PUSH
39741: LD_VAR 0 11
39745: PPUSH
39746: LD_VAR 0 8
39750: PPUSH
39751: LD_INT 5
39753: PPUSH
39754: CALL_OW 273
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39763: LD_VAR 0 9
39767: PUSH
39768: LD_INT 1
39770: ARRAY
39771: PPUSH
39772: LD_VAR 0 9
39776: PUSH
39777: LD_INT 2
39779: ARRAY
39780: PPUSH
39781: CALL_OW 488
39785: IFFALSE 39884
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39787: LD_ADDR_VAR 0 4
39791: PUSH
39792: LD_VAR 0 9
39796: PUSH
39797: LD_INT 1
39799: ARRAY
39800: PPUSH
39801: LD_VAR 0 9
39805: PUSH
39806: LD_INT 2
39808: ARRAY
39809: PPUSH
39810: CALL_OW 546
39814: ST_TO_ADDR
// if hex [ 1 ] then
39815: LD_VAR 0 4
39819: PUSH
39820: LD_INT 1
39822: ARRAY
39823: IFFALSE 39827
// continue ;
39825: GO 39715
// h := hex [ 2 ] ;
39827: LD_ADDR_VAR 0 13
39831: PUSH
39832: LD_VAR 0 4
39836: PUSH
39837: LD_INT 2
39839: ARRAY
39840: ST_TO_ADDR
// if h + 7 < height then
39841: LD_VAR 0 13
39845: PUSH
39846: LD_INT 7
39848: PLUS
39849: PUSH
39850: LD_VAR 0 15
39854: LESS
39855: IFFALSE 39884
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39857: LD_ADDR_VAR 0 18
39861: PUSH
39862: LD_INT 7
39864: PUSH
39865: LD_INT 28
39867: PUSH
39868: LD_INT 45
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: LIST
39875: PUSH
39876: LD_VAR 0 12
39880: ARRAY
39881: ST_TO_ADDR
// break ;
39882: GO 39886
// end ; end ; end ;
39884: GO 39715
39886: POP
39887: POP
// end ; if not weapon then
39888: LD_VAR 0 18
39892: NOT
39893: IFFALSE 39953
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39895: LD_ADDR_VAR 0 5
39899: PUSH
39900: LD_VAR 0 5
39904: PUSH
39905: LD_INT 11
39907: PUSH
39908: LD_INT 30
39910: PUSH
39911: LD_INT 49
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: LIST
39918: DIFF
39919: ST_TO_ADDR
// if not list then
39920: LD_VAR 0 5
39924: NOT
39925: IFFALSE 39929
// exit ;
39927: GO 40071
// weapon := list [ rand ( 1 , list ) ] ;
39929: LD_ADDR_VAR 0 18
39933: PUSH
39934: LD_VAR 0 5
39938: PUSH
39939: LD_INT 1
39941: PPUSH
39942: LD_VAR 0 5
39946: PPUSH
39947: CALL_OW 12
39951: ARRAY
39952: ST_TO_ADDR
// end ; if weapon then
39953: LD_VAR 0 18
39957: IFFALSE 40071
// begin tmp := CostOfWeapon ( weapon ) ;
39959: LD_ADDR_VAR 0 14
39963: PUSH
39964: LD_VAR 0 18
39968: PPUSH
39969: CALL_OW 451
39973: ST_TO_ADDR
// j := GetBase ( tower ) ;
39974: LD_ADDR_VAR 0 9
39978: PUSH
39979: LD_VAR 0 1
39983: PPUSH
39984: CALL_OW 274
39988: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39989: LD_VAR 0 9
39993: PPUSH
39994: LD_INT 1
39996: PPUSH
39997: CALL_OW 275
40001: PUSH
40002: LD_VAR 0 14
40006: PUSH
40007: LD_INT 1
40009: ARRAY
40010: GREATEREQUAL
40011: PUSH
40012: LD_VAR 0 9
40016: PPUSH
40017: LD_INT 2
40019: PPUSH
40020: CALL_OW 275
40024: PUSH
40025: LD_VAR 0 14
40029: PUSH
40030: LD_INT 2
40032: ARRAY
40033: GREATEREQUAL
40034: AND
40035: PUSH
40036: LD_VAR 0 9
40040: PPUSH
40041: LD_INT 3
40043: PPUSH
40044: CALL_OW 275
40048: PUSH
40049: LD_VAR 0 14
40053: PUSH
40054: LD_INT 3
40056: ARRAY
40057: GREATEREQUAL
40058: AND
40059: IFFALSE 40071
// result := weapon ;
40061: LD_ADDR_VAR 0 3
40065: PUSH
40066: LD_VAR 0 18
40070: ST_TO_ADDR
// end ; end ;
40071: LD_VAR 0 3
40075: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40076: LD_INT 0
40078: PPUSH
40079: PPUSH
// result := true ;
40080: LD_ADDR_VAR 0 3
40084: PUSH
40085: LD_INT 1
40087: ST_TO_ADDR
// if array1 = array2 then
40088: LD_VAR 0 1
40092: PUSH
40093: LD_VAR 0 2
40097: EQUAL
40098: IFFALSE 40158
// begin for i = 1 to array1 do
40100: LD_ADDR_VAR 0 4
40104: PUSH
40105: DOUBLE
40106: LD_INT 1
40108: DEC
40109: ST_TO_ADDR
40110: LD_VAR 0 1
40114: PUSH
40115: FOR_TO
40116: IFFALSE 40154
// if array1 [ i ] <> array2 [ i ] then
40118: LD_VAR 0 1
40122: PUSH
40123: LD_VAR 0 4
40127: ARRAY
40128: PUSH
40129: LD_VAR 0 2
40133: PUSH
40134: LD_VAR 0 4
40138: ARRAY
40139: NONEQUAL
40140: IFFALSE 40152
// begin result := false ;
40142: LD_ADDR_VAR 0 3
40146: PUSH
40147: LD_INT 0
40149: ST_TO_ADDR
// break ;
40150: GO 40154
// end ;
40152: GO 40115
40154: POP
40155: POP
// end else
40156: GO 40166
// result := false ;
40158: LD_ADDR_VAR 0 3
40162: PUSH
40163: LD_INT 0
40165: ST_TO_ADDR
// end ;
40166: LD_VAR 0 3
40170: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40171: LD_INT 0
40173: PPUSH
40174: PPUSH
// if not array1 or not array2 then
40175: LD_VAR 0 1
40179: NOT
40180: PUSH
40181: LD_VAR 0 2
40185: NOT
40186: OR
40187: IFFALSE 40191
// exit ;
40189: GO 40255
// result := true ;
40191: LD_ADDR_VAR 0 3
40195: PUSH
40196: LD_INT 1
40198: ST_TO_ADDR
// for i = 1 to array1 do
40199: LD_ADDR_VAR 0 4
40203: PUSH
40204: DOUBLE
40205: LD_INT 1
40207: DEC
40208: ST_TO_ADDR
40209: LD_VAR 0 1
40213: PUSH
40214: FOR_TO
40215: IFFALSE 40253
// if array1 [ i ] <> array2 [ i ] then
40217: LD_VAR 0 1
40221: PUSH
40222: LD_VAR 0 4
40226: ARRAY
40227: PUSH
40228: LD_VAR 0 2
40232: PUSH
40233: LD_VAR 0 4
40237: ARRAY
40238: NONEQUAL
40239: IFFALSE 40251
// begin result := false ;
40241: LD_ADDR_VAR 0 3
40245: PUSH
40246: LD_INT 0
40248: ST_TO_ADDR
// break ;
40249: GO 40253
// end ;
40251: GO 40214
40253: POP
40254: POP
// end ;
40255: LD_VAR 0 3
40259: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40260: LD_INT 0
40262: PPUSH
40263: PPUSH
40264: PPUSH
// pom := GetBase ( fac ) ;
40265: LD_ADDR_VAR 0 5
40269: PUSH
40270: LD_VAR 0 1
40274: PPUSH
40275: CALL_OW 274
40279: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40280: LD_ADDR_VAR 0 4
40284: PUSH
40285: LD_VAR 0 2
40289: PUSH
40290: LD_INT 1
40292: ARRAY
40293: PPUSH
40294: LD_VAR 0 2
40298: PUSH
40299: LD_INT 2
40301: ARRAY
40302: PPUSH
40303: LD_VAR 0 2
40307: PUSH
40308: LD_INT 3
40310: ARRAY
40311: PPUSH
40312: LD_VAR 0 2
40316: PUSH
40317: LD_INT 4
40319: ARRAY
40320: PPUSH
40321: CALL_OW 449
40325: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40326: LD_ADDR_VAR 0 3
40330: PUSH
40331: LD_VAR 0 5
40335: PPUSH
40336: LD_INT 1
40338: PPUSH
40339: CALL_OW 275
40343: PUSH
40344: LD_VAR 0 4
40348: PUSH
40349: LD_INT 1
40351: ARRAY
40352: GREATEREQUAL
40353: PUSH
40354: LD_VAR 0 5
40358: PPUSH
40359: LD_INT 2
40361: PPUSH
40362: CALL_OW 275
40366: PUSH
40367: LD_VAR 0 4
40371: PUSH
40372: LD_INT 2
40374: ARRAY
40375: GREATEREQUAL
40376: AND
40377: PUSH
40378: LD_VAR 0 5
40382: PPUSH
40383: LD_INT 3
40385: PPUSH
40386: CALL_OW 275
40390: PUSH
40391: LD_VAR 0 4
40395: PUSH
40396: LD_INT 3
40398: ARRAY
40399: GREATEREQUAL
40400: AND
40401: ST_TO_ADDR
// end ;
40402: LD_VAR 0 3
40406: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40407: LD_INT 0
40409: PPUSH
40410: PPUSH
40411: PPUSH
40412: PPUSH
// pom := GetBase ( building ) ;
40413: LD_ADDR_VAR 0 3
40417: PUSH
40418: LD_VAR 0 1
40422: PPUSH
40423: CALL_OW 274
40427: ST_TO_ADDR
// if not pom then
40428: LD_VAR 0 3
40432: NOT
40433: IFFALSE 40437
// exit ;
40435: GO 40607
// btype := GetBType ( building ) ;
40437: LD_ADDR_VAR 0 5
40441: PUSH
40442: LD_VAR 0 1
40446: PPUSH
40447: CALL_OW 266
40451: ST_TO_ADDR
// if btype = b_armoury then
40452: LD_VAR 0 5
40456: PUSH
40457: LD_INT 4
40459: EQUAL
40460: IFFALSE 40470
// btype := b_barracks ;
40462: LD_ADDR_VAR 0 5
40466: PUSH
40467: LD_INT 5
40469: ST_TO_ADDR
// if btype = b_depot then
40470: LD_VAR 0 5
40474: PUSH
40475: LD_INT 0
40477: EQUAL
40478: IFFALSE 40488
// btype := b_warehouse ;
40480: LD_ADDR_VAR 0 5
40484: PUSH
40485: LD_INT 1
40487: ST_TO_ADDR
// if btype = b_workshop then
40488: LD_VAR 0 5
40492: PUSH
40493: LD_INT 2
40495: EQUAL
40496: IFFALSE 40506
// btype := b_factory ;
40498: LD_ADDR_VAR 0 5
40502: PUSH
40503: LD_INT 3
40505: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40506: LD_ADDR_VAR 0 4
40510: PUSH
40511: LD_VAR 0 5
40515: PPUSH
40516: LD_VAR 0 1
40520: PPUSH
40521: CALL_OW 248
40525: PPUSH
40526: CALL_OW 450
40530: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40531: LD_ADDR_VAR 0 2
40535: PUSH
40536: LD_VAR 0 3
40540: PPUSH
40541: LD_INT 1
40543: PPUSH
40544: CALL_OW 275
40548: PUSH
40549: LD_VAR 0 4
40553: PUSH
40554: LD_INT 1
40556: ARRAY
40557: GREATEREQUAL
40558: PUSH
40559: LD_VAR 0 3
40563: PPUSH
40564: LD_INT 2
40566: PPUSH
40567: CALL_OW 275
40571: PUSH
40572: LD_VAR 0 4
40576: PUSH
40577: LD_INT 2
40579: ARRAY
40580: GREATEREQUAL
40581: AND
40582: PUSH
40583: LD_VAR 0 3
40587: PPUSH
40588: LD_INT 3
40590: PPUSH
40591: CALL_OW 275
40595: PUSH
40596: LD_VAR 0 4
40600: PUSH
40601: LD_INT 3
40603: ARRAY
40604: GREATEREQUAL
40605: AND
40606: ST_TO_ADDR
// end ;
40607: LD_VAR 0 2
40611: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40612: LD_INT 0
40614: PPUSH
40615: PPUSH
40616: PPUSH
// pom := GetBase ( building ) ;
40617: LD_ADDR_VAR 0 4
40621: PUSH
40622: LD_VAR 0 1
40626: PPUSH
40627: CALL_OW 274
40631: ST_TO_ADDR
// if not pom then
40632: LD_VAR 0 4
40636: NOT
40637: IFFALSE 40641
// exit ;
40639: GO 40742
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40641: LD_ADDR_VAR 0 5
40645: PUSH
40646: LD_VAR 0 2
40650: PPUSH
40651: LD_VAR 0 1
40655: PPUSH
40656: CALL_OW 248
40660: PPUSH
40661: CALL_OW 450
40665: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40666: LD_ADDR_VAR 0 3
40670: PUSH
40671: LD_VAR 0 4
40675: PPUSH
40676: LD_INT 1
40678: PPUSH
40679: CALL_OW 275
40683: PUSH
40684: LD_VAR 0 5
40688: PUSH
40689: LD_INT 1
40691: ARRAY
40692: GREATEREQUAL
40693: PUSH
40694: LD_VAR 0 4
40698: PPUSH
40699: LD_INT 2
40701: PPUSH
40702: CALL_OW 275
40706: PUSH
40707: LD_VAR 0 5
40711: PUSH
40712: LD_INT 2
40714: ARRAY
40715: GREATEREQUAL
40716: AND
40717: PUSH
40718: LD_VAR 0 4
40722: PPUSH
40723: LD_INT 3
40725: PPUSH
40726: CALL_OW 275
40730: PUSH
40731: LD_VAR 0 5
40735: PUSH
40736: LD_INT 3
40738: ARRAY
40739: GREATEREQUAL
40740: AND
40741: ST_TO_ADDR
// end ;
40742: LD_VAR 0 3
40746: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40747: LD_INT 0
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
40753: PPUSH
40754: PPUSH
40755: PPUSH
40756: PPUSH
40757: PPUSH
40758: PPUSH
40759: PPUSH
// result := false ;
40760: LD_ADDR_VAR 0 8
40764: PUSH
40765: LD_INT 0
40767: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40768: LD_VAR 0 5
40772: NOT
40773: PUSH
40774: LD_VAR 0 1
40778: NOT
40779: OR
40780: PUSH
40781: LD_VAR 0 2
40785: NOT
40786: OR
40787: PUSH
40788: LD_VAR 0 3
40792: NOT
40793: OR
40794: IFFALSE 40798
// exit ;
40796: GO 41612
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40798: LD_ADDR_VAR 0 14
40802: PUSH
40803: LD_VAR 0 1
40807: PPUSH
40808: LD_VAR 0 2
40812: PPUSH
40813: LD_VAR 0 3
40817: PPUSH
40818: LD_VAR 0 4
40822: PPUSH
40823: LD_VAR 0 5
40827: PUSH
40828: LD_INT 1
40830: ARRAY
40831: PPUSH
40832: CALL_OW 248
40836: PPUSH
40837: LD_INT 0
40839: PPUSH
40840: CALL 42849 0 6
40844: ST_TO_ADDR
// if not hexes then
40845: LD_VAR 0 14
40849: NOT
40850: IFFALSE 40854
// exit ;
40852: GO 41612
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40854: LD_ADDR_VAR 0 17
40858: PUSH
40859: LD_VAR 0 5
40863: PPUSH
40864: LD_INT 22
40866: PUSH
40867: LD_VAR 0 13
40871: PPUSH
40872: CALL_OW 255
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 30
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 30
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: LIST
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PPUSH
40913: CALL_OW 72
40917: ST_TO_ADDR
// for i = 1 to hexes do
40918: LD_ADDR_VAR 0 9
40922: PUSH
40923: DOUBLE
40924: LD_INT 1
40926: DEC
40927: ST_TO_ADDR
40928: LD_VAR 0 14
40932: PUSH
40933: FOR_TO
40934: IFFALSE 41610
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40936: LD_ADDR_VAR 0 13
40940: PUSH
40941: LD_VAR 0 14
40945: PUSH
40946: LD_VAR 0 9
40950: ARRAY
40951: PUSH
40952: LD_INT 1
40954: ARRAY
40955: PPUSH
40956: LD_VAR 0 14
40960: PUSH
40961: LD_VAR 0 9
40965: ARRAY
40966: PUSH
40967: LD_INT 2
40969: ARRAY
40970: PPUSH
40971: CALL_OW 428
40975: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40976: LD_VAR 0 14
40980: PUSH
40981: LD_VAR 0 9
40985: ARRAY
40986: PUSH
40987: LD_INT 1
40989: ARRAY
40990: PPUSH
40991: LD_VAR 0 14
40995: PUSH
40996: LD_VAR 0 9
41000: ARRAY
41001: PUSH
41002: LD_INT 2
41004: ARRAY
41005: PPUSH
41006: CALL_OW 351
41010: PUSH
41011: LD_VAR 0 14
41015: PUSH
41016: LD_VAR 0 9
41020: ARRAY
41021: PUSH
41022: LD_INT 1
41024: ARRAY
41025: PPUSH
41026: LD_VAR 0 14
41030: PUSH
41031: LD_VAR 0 9
41035: ARRAY
41036: PUSH
41037: LD_INT 2
41039: ARRAY
41040: PPUSH
41041: CALL_OW 488
41045: NOT
41046: OR
41047: PUSH
41048: LD_VAR 0 13
41052: PPUSH
41053: CALL_OW 247
41057: PUSH
41058: LD_INT 3
41060: EQUAL
41061: OR
41062: IFFALSE 41068
// exit ;
41064: POP
41065: POP
41066: GO 41612
// if not tmp then
41068: LD_VAR 0 13
41072: NOT
41073: IFFALSE 41077
// continue ;
41075: GO 40933
// result := true ;
41077: LD_ADDR_VAR 0 8
41081: PUSH
41082: LD_INT 1
41084: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41085: LD_VAR 0 6
41089: PUSH
41090: LD_VAR 0 13
41094: PPUSH
41095: CALL_OW 247
41099: PUSH
41100: LD_INT 2
41102: EQUAL
41103: AND
41104: PUSH
41105: LD_VAR 0 13
41109: PPUSH
41110: CALL_OW 263
41114: PUSH
41115: LD_INT 1
41117: EQUAL
41118: AND
41119: IFFALSE 41283
// begin if IsDrivenBy ( tmp ) then
41121: LD_VAR 0 13
41125: PPUSH
41126: CALL_OW 311
41130: IFFALSE 41134
// continue ;
41132: GO 40933
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41134: LD_VAR 0 6
41138: PPUSH
41139: LD_INT 3
41141: PUSH
41142: LD_INT 60
41144: PUSH
41145: EMPTY
41146: LIST
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 3
41154: PUSH
41155: LD_INT 55
41157: PUSH
41158: EMPTY
41159: LIST
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PPUSH
41169: CALL_OW 72
41173: IFFALSE 41281
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41175: LD_ADDR_VAR 0 18
41179: PUSH
41180: LD_VAR 0 6
41184: PPUSH
41185: LD_INT 3
41187: PUSH
41188: LD_INT 60
41190: PUSH
41191: EMPTY
41192: LIST
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 3
41200: PUSH
41201: LD_INT 55
41203: PUSH
41204: EMPTY
41205: LIST
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PPUSH
41215: CALL_OW 72
41219: PUSH
41220: LD_INT 1
41222: ARRAY
41223: ST_TO_ADDR
// if IsInUnit ( driver ) then
41224: LD_VAR 0 18
41228: PPUSH
41229: CALL_OW 310
41233: IFFALSE 41244
// ComExit ( driver ) ;
41235: LD_VAR 0 18
41239: PPUSH
41240: CALL 65977 0 1
// AddComEnterUnit ( driver , tmp ) ;
41244: LD_VAR 0 18
41248: PPUSH
41249: LD_VAR 0 13
41253: PPUSH
41254: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41258: LD_VAR 0 18
41262: PPUSH
41263: LD_VAR 0 7
41267: PPUSH
41268: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41272: LD_VAR 0 18
41276: PPUSH
41277: CALL_OW 181
// end ; continue ;
41281: GO 40933
// end ; if not cleaners or not tmp in cleaners then
41283: LD_VAR 0 6
41287: NOT
41288: PUSH
41289: LD_VAR 0 13
41293: PUSH
41294: LD_VAR 0 6
41298: IN
41299: NOT
41300: OR
41301: IFFALSE 41608
// begin if dep then
41303: LD_VAR 0 17
41307: IFFALSE 41443
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41309: LD_ADDR_VAR 0 16
41313: PUSH
41314: LD_VAR 0 17
41318: PUSH
41319: LD_INT 1
41321: ARRAY
41322: PPUSH
41323: CALL_OW 250
41327: PPUSH
41328: LD_VAR 0 17
41332: PUSH
41333: LD_INT 1
41335: ARRAY
41336: PPUSH
41337: CALL_OW 254
41341: PPUSH
41342: LD_INT 5
41344: PPUSH
41345: CALL_OW 272
41349: PUSH
41350: LD_VAR 0 17
41354: PUSH
41355: LD_INT 1
41357: ARRAY
41358: PPUSH
41359: CALL_OW 251
41363: PPUSH
41364: LD_VAR 0 17
41368: PUSH
41369: LD_INT 1
41371: ARRAY
41372: PPUSH
41373: CALL_OW 254
41377: PPUSH
41378: LD_INT 5
41380: PPUSH
41381: CALL_OW 273
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41390: LD_VAR 0 16
41394: PUSH
41395: LD_INT 1
41397: ARRAY
41398: PPUSH
41399: LD_VAR 0 16
41403: PUSH
41404: LD_INT 2
41406: ARRAY
41407: PPUSH
41408: CALL_OW 488
41412: IFFALSE 41443
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41414: LD_VAR 0 13
41418: PPUSH
41419: LD_VAR 0 16
41423: PUSH
41424: LD_INT 1
41426: ARRAY
41427: PPUSH
41428: LD_VAR 0 16
41432: PUSH
41433: LD_INT 2
41435: ARRAY
41436: PPUSH
41437: CALL_OW 111
// continue ;
41441: GO 40933
// end ; end ; r := GetDir ( tmp ) ;
41443: LD_ADDR_VAR 0 15
41447: PUSH
41448: LD_VAR 0 13
41452: PPUSH
41453: CALL_OW 254
41457: ST_TO_ADDR
// if r = 5 then
41458: LD_VAR 0 15
41462: PUSH
41463: LD_INT 5
41465: EQUAL
41466: IFFALSE 41476
// r := 0 ;
41468: LD_ADDR_VAR 0 15
41472: PUSH
41473: LD_INT 0
41475: ST_TO_ADDR
// for j = r to 5 do
41476: LD_ADDR_VAR 0 10
41480: PUSH
41481: DOUBLE
41482: LD_VAR 0 15
41486: DEC
41487: ST_TO_ADDR
41488: LD_INT 5
41490: PUSH
41491: FOR_TO
41492: IFFALSE 41606
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41494: LD_ADDR_VAR 0 11
41498: PUSH
41499: LD_VAR 0 13
41503: PPUSH
41504: CALL_OW 250
41508: PPUSH
41509: LD_VAR 0 10
41513: PPUSH
41514: LD_INT 2
41516: PPUSH
41517: CALL_OW 272
41521: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41522: LD_ADDR_VAR 0 12
41526: PUSH
41527: LD_VAR 0 13
41531: PPUSH
41532: CALL_OW 251
41536: PPUSH
41537: LD_VAR 0 10
41541: PPUSH
41542: LD_INT 2
41544: PPUSH
41545: CALL_OW 273
41549: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41550: LD_VAR 0 11
41554: PPUSH
41555: LD_VAR 0 12
41559: PPUSH
41560: CALL_OW 488
41564: PUSH
41565: LD_VAR 0 11
41569: PPUSH
41570: LD_VAR 0 12
41574: PPUSH
41575: CALL_OW 428
41579: NOT
41580: AND
41581: IFFALSE 41604
// begin ComMoveXY ( tmp , _x , _y ) ;
41583: LD_VAR 0 13
41587: PPUSH
41588: LD_VAR 0 11
41592: PPUSH
41593: LD_VAR 0 12
41597: PPUSH
41598: CALL_OW 111
// break ;
41602: GO 41606
// end ; end ;
41604: GO 41491
41606: POP
41607: POP
// end ; end ;
41608: GO 40933
41610: POP
41611: POP
// end ;
41612: LD_VAR 0 8
41616: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41617: LD_INT 0
41619: PPUSH
// result := true ;
41620: LD_ADDR_VAR 0 3
41624: PUSH
41625: LD_INT 1
41627: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41628: LD_VAR 0 2
41632: PUSH
41633: LD_INT 24
41635: DOUBLE
41636: EQUAL
41637: IFTRUE 41647
41639: LD_INT 33
41641: DOUBLE
41642: EQUAL
41643: IFTRUE 41647
41645: GO 41672
41647: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41648: LD_ADDR_VAR 0 3
41652: PUSH
41653: LD_INT 32
41655: PPUSH
41656: LD_VAR 0 1
41660: PPUSH
41661: CALL_OW 321
41665: PUSH
41666: LD_INT 2
41668: EQUAL
41669: ST_TO_ADDR
41670: GO 41992
41672: LD_INT 20
41674: DOUBLE
41675: EQUAL
41676: IFTRUE 41680
41678: GO 41705
41680: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41681: LD_ADDR_VAR 0 3
41685: PUSH
41686: LD_INT 6
41688: PPUSH
41689: LD_VAR 0 1
41693: PPUSH
41694: CALL_OW 321
41698: PUSH
41699: LD_INT 2
41701: EQUAL
41702: ST_TO_ADDR
41703: GO 41992
41705: LD_INT 22
41707: DOUBLE
41708: EQUAL
41709: IFTRUE 41719
41711: LD_INT 36
41713: DOUBLE
41714: EQUAL
41715: IFTRUE 41719
41717: GO 41744
41719: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41720: LD_ADDR_VAR 0 3
41724: PUSH
41725: LD_INT 15
41727: PPUSH
41728: LD_VAR 0 1
41732: PPUSH
41733: CALL_OW 321
41737: PUSH
41738: LD_INT 2
41740: EQUAL
41741: ST_TO_ADDR
41742: GO 41992
41744: LD_INT 30
41746: DOUBLE
41747: EQUAL
41748: IFTRUE 41752
41750: GO 41777
41752: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41753: LD_ADDR_VAR 0 3
41757: PUSH
41758: LD_INT 20
41760: PPUSH
41761: LD_VAR 0 1
41765: PPUSH
41766: CALL_OW 321
41770: PUSH
41771: LD_INT 2
41773: EQUAL
41774: ST_TO_ADDR
41775: GO 41992
41777: LD_INT 28
41779: DOUBLE
41780: EQUAL
41781: IFTRUE 41791
41783: LD_INT 21
41785: DOUBLE
41786: EQUAL
41787: IFTRUE 41791
41789: GO 41816
41791: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41792: LD_ADDR_VAR 0 3
41796: PUSH
41797: LD_INT 21
41799: PPUSH
41800: LD_VAR 0 1
41804: PPUSH
41805: CALL_OW 321
41809: PUSH
41810: LD_INT 2
41812: EQUAL
41813: ST_TO_ADDR
41814: GO 41992
41816: LD_INT 16
41818: DOUBLE
41819: EQUAL
41820: IFTRUE 41824
41822: GO 41851
41824: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41825: LD_ADDR_VAR 0 3
41829: PUSH
41830: LD_EXP 125
41834: PPUSH
41835: LD_VAR 0 1
41839: PPUSH
41840: CALL_OW 321
41844: PUSH
41845: LD_INT 2
41847: EQUAL
41848: ST_TO_ADDR
41849: GO 41992
41851: LD_INT 19
41853: DOUBLE
41854: EQUAL
41855: IFTRUE 41865
41857: LD_INT 23
41859: DOUBLE
41860: EQUAL
41861: IFTRUE 41865
41863: GO 41892
41865: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41866: LD_ADDR_VAR 0 3
41870: PUSH
41871: LD_EXP 124
41875: PPUSH
41876: LD_VAR 0 1
41880: PPUSH
41881: CALL_OW 321
41885: PUSH
41886: LD_INT 2
41888: EQUAL
41889: ST_TO_ADDR
41890: GO 41992
41892: LD_INT 17
41894: DOUBLE
41895: EQUAL
41896: IFTRUE 41900
41898: GO 41925
41900: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41901: LD_ADDR_VAR 0 3
41905: PUSH
41906: LD_INT 39
41908: PPUSH
41909: LD_VAR 0 1
41913: PPUSH
41914: CALL_OW 321
41918: PUSH
41919: LD_INT 2
41921: EQUAL
41922: ST_TO_ADDR
41923: GO 41992
41925: LD_INT 18
41927: DOUBLE
41928: EQUAL
41929: IFTRUE 41933
41931: GO 41958
41933: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41934: LD_ADDR_VAR 0 3
41938: PUSH
41939: LD_INT 40
41941: PPUSH
41942: LD_VAR 0 1
41946: PPUSH
41947: CALL_OW 321
41951: PUSH
41952: LD_INT 2
41954: EQUAL
41955: ST_TO_ADDR
41956: GO 41992
41958: LD_INT 27
41960: DOUBLE
41961: EQUAL
41962: IFTRUE 41966
41964: GO 41991
41966: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41967: LD_ADDR_VAR 0 3
41971: PUSH
41972: LD_INT 35
41974: PPUSH
41975: LD_VAR 0 1
41979: PPUSH
41980: CALL_OW 321
41984: PUSH
41985: LD_INT 2
41987: EQUAL
41988: ST_TO_ADDR
41989: GO 41992
41991: POP
// end ;
41992: LD_VAR 0 3
41996: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41997: LD_INT 0
41999: PPUSH
42000: PPUSH
42001: PPUSH
42002: PPUSH
42003: PPUSH
42004: PPUSH
42005: PPUSH
42006: PPUSH
42007: PPUSH
42008: PPUSH
42009: PPUSH
// result := false ;
42010: LD_ADDR_VAR 0 6
42014: PUSH
42015: LD_INT 0
42017: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42018: LD_VAR 0 1
42022: NOT
42023: PUSH
42024: LD_VAR 0 1
42028: PPUSH
42029: CALL_OW 266
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: IN
42044: NOT
42045: OR
42046: PUSH
42047: LD_VAR 0 2
42051: NOT
42052: OR
42053: PUSH
42054: LD_VAR 0 5
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: LD_INT 3
42070: PUSH
42071: LD_INT 4
42073: PUSH
42074: LD_INT 5
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: IN
42085: NOT
42086: OR
42087: PUSH
42088: LD_VAR 0 3
42092: PPUSH
42093: LD_VAR 0 4
42097: PPUSH
42098: CALL_OW 488
42102: NOT
42103: OR
42104: IFFALSE 42108
// exit ;
42106: GO 42844
// side := GetSide ( depot ) ;
42108: LD_ADDR_VAR 0 9
42112: PUSH
42113: LD_VAR 0 1
42117: PPUSH
42118: CALL_OW 255
42122: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42123: LD_VAR 0 9
42127: PPUSH
42128: LD_VAR 0 2
42132: PPUSH
42133: CALL 41617 0 2
42137: NOT
42138: IFFALSE 42142
// exit ;
42140: GO 42844
// pom := GetBase ( depot ) ;
42142: LD_ADDR_VAR 0 10
42146: PUSH
42147: LD_VAR 0 1
42151: PPUSH
42152: CALL_OW 274
42156: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42157: LD_ADDR_VAR 0 11
42161: PUSH
42162: LD_VAR 0 2
42166: PPUSH
42167: LD_VAR 0 1
42171: PPUSH
42172: CALL_OW 248
42176: PPUSH
42177: CALL_OW 450
42181: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42182: LD_VAR 0 10
42186: PPUSH
42187: LD_INT 1
42189: PPUSH
42190: CALL_OW 275
42194: PUSH
42195: LD_VAR 0 11
42199: PUSH
42200: LD_INT 1
42202: ARRAY
42203: GREATEREQUAL
42204: PUSH
42205: LD_VAR 0 10
42209: PPUSH
42210: LD_INT 2
42212: PPUSH
42213: CALL_OW 275
42217: PUSH
42218: LD_VAR 0 11
42222: PUSH
42223: LD_INT 2
42225: ARRAY
42226: GREATEREQUAL
42227: AND
42228: PUSH
42229: LD_VAR 0 10
42233: PPUSH
42234: LD_INT 3
42236: PPUSH
42237: CALL_OW 275
42241: PUSH
42242: LD_VAR 0 11
42246: PUSH
42247: LD_INT 3
42249: ARRAY
42250: GREATEREQUAL
42251: AND
42252: NOT
42253: IFFALSE 42257
// exit ;
42255: GO 42844
// if GetBType ( depot ) = b_depot then
42257: LD_VAR 0 1
42261: PPUSH
42262: CALL_OW 266
42266: PUSH
42267: LD_INT 0
42269: EQUAL
42270: IFFALSE 42282
// dist := 28 else
42272: LD_ADDR_VAR 0 14
42276: PUSH
42277: LD_INT 28
42279: ST_TO_ADDR
42280: GO 42290
// dist := 36 ;
42282: LD_ADDR_VAR 0 14
42286: PUSH
42287: LD_INT 36
42289: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42290: LD_VAR 0 1
42294: PPUSH
42295: LD_VAR 0 3
42299: PPUSH
42300: LD_VAR 0 4
42304: PPUSH
42305: CALL_OW 297
42309: PUSH
42310: LD_VAR 0 14
42314: GREATER
42315: IFFALSE 42319
// exit ;
42317: GO 42844
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42319: LD_ADDR_VAR 0 12
42323: PUSH
42324: LD_VAR 0 2
42328: PPUSH
42329: LD_VAR 0 3
42333: PPUSH
42334: LD_VAR 0 4
42338: PPUSH
42339: LD_VAR 0 5
42343: PPUSH
42344: LD_VAR 0 1
42348: PPUSH
42349: CALL_OW 248
42353: PPUSH
42354: LD_INT 0
42356: PPUSH
42357: CALL 42849 0 6
42361: ST_TO_ADDR
// if not hexes then
42362: LD_VAR 0 12
42366: NOT
42367: IFFALSE 42371
// exit ;
42369: GO 42844
// hex := GetHexInfo ( x , y ) ;
42371: LD_ADDR_VAR 0 15
42375: PUSH
42376: LD_VAR 0 3
42380: PPUSH
42381: LD_VAR 0 4
42385: PPUSH
42386: CALL_OW 546
42390: ST_TO_ADDR
// if hex [ 1 ] then
42391: LD_VAR 0 15
42395: PUSH
42396: LD_INT 1
42398: ARRAY
42399: IFFALSE 42403
// exit ;
42401: GO 42844
// height := hex [ 2 ] ;
42403: LD_ADDR_VAR 0 13
42407: PUSH
42408: LD_VAR 0 15
42412: PUSH
42413: LD_INT 2
42415: ARRAY
42416: ST_TO_ADDR
// for i = 1 to hexes do
42417: LD_ADDR_VAR 0 7
42421: PUSH
42422: DOUBLE
42423: LD_INT 1
42425: DEC
42426: ST_TO_ADDR
42427: LD_VAR 0 12
42431: PUSH
42432: FOR_TO
42433: IFFALSE 42763
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42435: LD_VAR 0 12
42439: PUSH
42440: LD_VAR 0 7
42444: ARRAY
42445: PUSH
42446: LD_INT 1
42448: ARRAY
42449: PPUSH
42450: LD_VAR 0 12
42454: PUSH
42455: LD_VAR 0 7
42459: ARRAY
42460: PUSH
42461: LD_INT 2
42463: ARRAY
42464: PPUSH
42465: CALL_OW 488
42469: NOT
42470: PUSH
42471: LD_VAR 0 12
42475: PUSH
42476: LD_VAR 0 7
42480: ARRAY
42481: PUSH
42482: LD_INT 1
42484: ARRAY
42485: PPUSH
42486: LD_VAR 0 12
42490: PUSH
42491: LD_VAR 0 7
42495: ARRAY
42496: PUSH
42497: LD_INT 2
42499: ARRAY
42500: PPUSH
42501: CALL_OW 428
42505: PUSH
42506: LD_INT 0
42508: GREATER
42509: OR
42510: PUSH
42511: LD_VAR 0 12
42515: PUSH
42516: LD_VAR 0 7
42520: ARRAY
42521: PUSH
42522: LD_INT 1
42524: ARRAY
42525: PPUSH
42526: LD_VAR 0 12
42530: PUSH
42531: LD_VAR 0 7
42535: ARRAY
42536: PUSH
42537: LD_INT 2
42539: ARRAY
42540: PPUSH
42541: CALL_OW 351
42545: OR
42546: IFFALSE 42552
// exit ;
42548: POP
42549: POP
42550: GO 42844
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42552: LD_ADDR_VAR 0 8
42556: PUSH
42557: LD_VAR 0 12
42561: PUSH
42562: LD_VAR 0 7
42566: ARRAY
42567: PUSH
42568: LD_INT 1
42570: ARRAY
42571: PPUSH
42572: LD_VAR 0 12
42576: PUSH
42577: LD_VAR 0 7
42581: ARRAY
42582: PUSH
42583: LD_INT 2
42585: ARRAY
42586: PPUSH
42587: CALL_OW 546
42591: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42592: LD_VAR 0 8
42596: PUSH
42597: LD_INT 1
42599: ARRAY
42600: PUSH
42601: LD_VAR 0 8
42605: PUSH
42606: LD_INT 2
42608: ARRAY
42609: PUSH
42610: LD_VAR 0 13
42614: PUSH
42615: LD_INT 2
42617: PLUS
42618: GREATER
42619: OR
42620: PUSH
42621: LD_VAR 0 8
42625: PUSH
42626: LD_INT 2
42628: ARRAY
42629: PUSH
42630: LD_VAR 0 13
42634: PUSH
42635: LD_INT 2
42637: MINUS
42638: LESS
42639: OR
42640: PUSH
42641: LD_VAR 0 8
42645: PUSH
42646: LD_INT 3
42648: ARRAY
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 8
42655: PUSH
42656: LD_INT 9
42658: PUSH
42659: LD_INT 10
42661: PUSH
42662: LD_INT 11
42664: PUSH
42665: LD_INT 12
42667: PUSH
42668: LD_INT 13
42670: PUSH
42671: LD_INT 16
42673: PUSH
42674: LD_INT 17
42676: PUSH
42677: LD_INT 18
42679: PUSH
42680: LD_INT 19
42682: PUSH
42683: LD_INT 20
42685: PUSH
42686: LD_INT 21
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: IN
42704: NOT
42705: OR
42706: PUSH
42707: LD_VAR 0 8
42711: PUSH
42712: LD_INT 5
42714: ARRAY
42715: NOT
42716: OR
42717: PUSH
42718: LD_VAR 0 8
42722: PUSH
42723: LD_INT 6
42725: ARRAY
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: LD_INT 2
42732: PUSH
42733: LD_INT 7
42735: PUSH
42736: LD_INT 9
42738: PUSH
42739: LD_INT 10
42741: PUSH
42742: LD_INT 11
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: IN
42753: NOT
42754: OR
42755: IFFALSE 42761
// exit ;
42757: POP
42758: POP
42759: GO 42844
// end ;
42761: GO 42432
42763: POP
42764: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42765: LD_VAR 0 9
42769: PPUSH
42770: LD_VAR 0 3
42774: PPUSH
42775: LD_VAR 0 4
42779: PPUSH
42780: LD_INT 20
42782: PPUSH
42783: CALL 34790 0 4
42787: PUSH
42788: LD_INT 4
42790: ARRAY
42791: IFFALSE 42795
// exit ;
42793: GO 42844
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42795: LD_VAR 0 2
42799: PUSH
42800: LD_INT 29
42802: PUSH
42803: LD_INT 30
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: IN
42810: PUSH
42811: LD_VAR 0 3
42815: PPUSH
42816: LD_VAR 0 4
42820: PPUSH
42821: LD_VAR 0 9
42825: PPUSH
42826: CALL_OW 440
42830: NOT
42831: AND
42832: IFFALSE 42836
// exit ;
42834: GO 42844
// result := true ;
42836: LD_ADDR_VAR 0 6
42840: PUSH
42841: LD_INT 1
42843: ST_TO_ADDR
// end ;
42844: LD_VAR 0 6
42848: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42849: LD_INT 0
42851: PPUSH
42852: PPUSH
42853: PPUSH
42854: PPUSH
42855: PPUSH
42856: PPUSH
42857: PPUSH
42858: PPUSH
42859: PPUSH
42860: PPUSH
42861: PPUSH
42862: PPUSH
42863: PPUSH
42864: PPUSH
42865: PPUSH
42866: PPUSH
42867: PPUSH
42868: PPUSH
42869: PPUSH
42870: PPUSH
42871: PPUSH
42872: PPUSH
42873: PPUSH
42874: PPUSH
42875: PPUSH
42876: PPUSH
42877: PPUSH
42878: PPUSH
42879: PPUSH
42880: PPUSH
42881: PPUSH
42882: PPUSH
42883: PPUSH
42884: PPUSH
42885: PPUSH
42886: PPUSH
42887: PPUSH
42888: PPUSH
42889: PPUSH
42890: PPUSH
42891: PPUSH
42892: PPUSH
42893: PPUSH
42894: PPUSH
42895: PPUSH
42896: PPUSH
42897: PPUSH
42898: PPUSH
42899: PPUSH
42900: PPUSH
42901: PPUSH
42902: PPUSH
42903: PPUSH
42904: PPUSH
42905: PPUSH
42906: PPUSH
42907: PPUSH
42908: PPUSH
// result = [ ] ;
42909: LD_ADDR_VAR 0 7
42913: PUSH
42914: EMPTY
42915: ST_TO_ADDR
// temp_list = [ ] ;
42916: LD_ADDR_VAR 0 9
42920: PUSH
42921: EMPTY
42922: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42923: LD_VAR 0 4
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: LD_INT 2
42936: PUSH
42937: LD_INT 3
42939: PUSH
42940: LD_INT 4
42942: PUSH
42943: LD_INT 5
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: IN
42954: NOT
42955: PUSH
42956: LD_VAR 0 1
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: IN
42971: PUSH
42972: LD_VAR 0 5
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: LD_INT 2
42982: PUSH
42983: LD_INT 3
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: LIST
42990: IN
42991: NOT
42992: AND
42993: OR
42994: IFFALSE 42998
// exit ;
42996: GO 61389
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42998: LD_VAR 0 1
43002: PUSH
43003: LD_INT 6
43005: PUSH
43006: LD_INT 7
43008: PUSH
43009: LD_INT 8
43011: PUSH
43012: LD_INT 13
43014: PUSH
43015: LD_INT 12
43017: PUSH
43018: LD_INT 15
43020: PUSH
43021: LD_INT 11
43023: PUSH
43024: LD_INT 14
43026: PUSH
43027: LD_INT 10
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: IN
43041: IFFALSE 43051
// btype = b_lab ;
43043: LD_ADDR_VAR 0 1
43047: PUSH
43048: LD_INT 6
43050: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43051: LD_VAR 0 6
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: LIST
43069: IN
43070: NOT
43071: PUSH
43072: LD_VAR 0 1
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: LD_INT 2
43085: PUSH
43086: LD_INT 3
43088: PUSH
43089: LD_INT 6
43091: PUSH
43092: LD_INT 36
43094: PUSH
43095: LD_INT 4
43097: PUSH
43098: LD_INT 5
43100: PUSH
43101: LD_INT 31
43103: PUSH
43104: LD_INT 32
43106: PUSH
43107: LD_INT 33
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: IN
43123: NOT
43124: PUSH
43125: LD_VAR 0 6
43129: PUSH
43130: LD_INT 1
43132: EQUAL
43133: AND
43134: OR
43135: PUSH
43136: LD_VAR 0 1
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: LD_INT 3
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: IN
43151: NOT
43152: PUSH
43153: LD_VAR 0 6
43157: PUSH
43158: LD_INT 2
43160: EQUAL
43161: AND
43162: OR
43163: IFFALSE 43173
// mode = 0 ;
43165: LD_ADDR_VAR 0 6
43169: PUSH
43170: LD_INT 0
43172: ST_TO_ADDR
// case mode of 0 :
43173: LD_VAR 0 6
43177: PUSH
43178: LD_INT 0
43180: DOUBLE
43181: EQUAL
43182: IFTRUE 43186
43184: GO 54639
43186: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43187: LD_ADDR_VAR 0 11
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 2
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: LD_INT 2
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: LD_INT 3
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 0
43343: PUSH
43344: LD_INT 3
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43380: LD_ADDR_VAR 0 12
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 2
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 2
43503: NEG
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 2
43514: NEG
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 2
43526: NEG
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 3
43537: NEG
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 3
43548: NEG
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43576: LD_ADDR_VAR 0 13
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 0
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: NEG
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: LD_INT 2
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 2
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 2
43679: PUSH
43680: LD_INT 2
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 2
43699: NEG
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 2
43711: NEG
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 2
43723: NEG
43724: PUSH
43725: LD_INT 3
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 3
43735: NEG
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 3
43747: NEG
43748: PUSH
43749: LD_INT 3
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43775: LD_ADDR_VAR 0 14
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: LD_INT 2
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: LD_INT 3
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: LD_INT 3
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43971: LD_ADDR_VAR 0 15
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 2
44094: NEG
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 2
44105: NEG
44106: PUSH
44107: LD_INT 1
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 2
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 3
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 3
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44164: LD_ADDR_VAR 0 16
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 2
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 2
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: LD_INT 2
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 2
44287: NEG
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: NEG
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 3
44311: PUSH
44312: LD_INT 2
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 3
44321: PUSH
44322: LD_INT 3
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 2
44331: PUSH
44332: LD_INT 3
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44357: LD_ADDR_VAR 0 17
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: LD_INT 1
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: LD_INT 2
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 2
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: LD_INT 2
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 2
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: LD_INT 2
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44587: LD_ADDR_VAR 0 18
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 1
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: NEG
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 2
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44817: LD_ADDR_VAR 0 19
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: LD_INT 2
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: LD_INT 2
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: NEG
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 2
45004: NEG
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45047: LD_ADDR_VAR 0 20
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: LD_INT 2
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 2
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: NEG
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 2
45234: NEG
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 2
45246: NEG
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45277: LD_ADDR_VAR 0 21
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 2
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 2
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: LD_INT 2
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 2
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: NEG
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 2
45464: NEG
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45507: LD_ADDR_VAR 0 22
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 2
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 2
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 2
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 2
45694: NEG
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45737: LD_ADDR_VAR 0 23
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 2
45913: NEG
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 2
45924: NEG
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 2
45936: NEG
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: NEG
45949: PUSH
45950: LD_INT 3
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: LD_INT 3
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: LD_INT 2
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 2
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46017: LD_ADDR_VAR 0 24
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 2
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: LD_INT 2
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 2
46193: NEG
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 3
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 3
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46293: LD_ADDR_VAR 0 25
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 2
46492: NEG
46493: PUSH
46494: LD_INT 2
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 3
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 3
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: LD_INT 3
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: LD_INT 3
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46567: LD_ADDR_VAR 0 26
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: LD_INT 2
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: LD_INT 2
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: LD_INT 2
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: LD_INT 2
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: LD_INT 3
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 3
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46843: LD_ADDR_VAR 0 27
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: LD_INT 2
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 2
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: LD_INT 2
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 2
47019: NEG
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: NEG
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 2
47042: NEG
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 3
47076: NEG
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 3
47088: NEG
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47123: LD_ADDR_VAR 0 28
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: LD_INT 2
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 2
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: LD_INT 2
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: LD_INT 2
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: LD_INT 3
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 3
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 3
47358: NEG
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 3
47370: NEG
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47405: LD_ADDR_VAR 0 29
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 2
47571: NEG
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: LD_INT 2
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: NEG
47596: PUSH
47597: LD_INT 3
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 3
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 3
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 3
47649: NEG
47650: PUSH
47651: LD_INT 2
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47684: LD_ADDR_VAR 0 30
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: LD_INT 2
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 2
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 2
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: LD_INT 3
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 2
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 3
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 3
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 3
47927: NEG
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47962: LD_ADDR_VAR 0 31
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: LD_INT 2
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: LD_INT 2
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 2
48139: NEG
48140: PUSH
48141: LD_INT 2
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: LD_INT 3
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 3
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: LD_INT 3
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 2
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 3
48205: NEG
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48240: LD_ADDR_VAR 0 32
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: LD_INT 2
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: NEG
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: LD_INT 3
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 3
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: LD_INT 3
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 2
48472: NEG
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 3
48483: NEG
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48518: LD_ADDR_VAR 0 33
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: LD_INT 2
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 1
48614: NEG
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: LD_INT 3
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 3
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: LD_INT 3
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 3
48762: NEG
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48797: LD_ADDR_VAR 0 34
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: LD_INT 2
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: LD_INT 2
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 3
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 2
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 3
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: LD_INT 3
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: NEG
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 3
49042: NEG
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49077: LD_ADDR_VAR 0 35
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 2
49168: NEG
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49189: LD_ADDR_VAR 0 36
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: LD_INT 2
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49301: LD_ADDR_VAR 0 37
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49413: LD_ADDR_VAR 0 38
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 2
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49525: LD_ADDR_VAR 0 39
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: LD_INT 2
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49637: LD_ADDR_VAR 0 40
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49749: LD_ADDR_VAR 0 41
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 2
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 2
49915: NEG
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 2
49939: NEG
49940: PUSH
49941: LD_INT 3
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 3
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 3
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 3
49982: PUSH
49983: LD_INT 2
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 3
49992: PUSH
49993: LD_INT 3
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 2
50002: PUSH
50003: LD_INT 3
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 3
50023: NEG
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 3
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 3
50046: NEG
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 3
50058: NEG
50059: PUSH
50060: LD_INT 3
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50099: LD_ADDR_VAR 0 42
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: NEG
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 2
50265: NEG
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: NEG
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: LD_INT 3
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: LD_INT 3
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 3
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 3
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 3
50345: PUSH
50346: LD_INT 3
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: LD_INT 3
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: LD_INT 3
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 3
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 2
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 3
50396: NEG
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 3
50408: NEG
50409: PUSH
50410: LD_INT 3
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50449: LD_ADDR_VAR 0 43
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 2
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: NEG
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: LD_INT 3
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 3
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: LD_INT 2
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 3
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 3
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: LD_INT 3
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 3
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: LD_INT 2
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 3
50745: NEG
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 3
50756: NEG
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50797: LD_ADDR_VAR 0 44
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: LD_INT 2
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: LD_INT 2
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: NEG
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: NEG
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: NEG
50976: PUSH
50977: LD_INT 2
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: NEG
50988: PUSH
50989: LD_INT 3
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 2
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 3
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 3
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 3
51040: PUSH
51041: LD_INT 3
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: LD_INT 3
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 2
51060: NEG
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 3
51071: NEG
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 3
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 3
51094: NEG
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 3
51106: NEG
51107: PUSH
51108: LD_INT 3
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51147: LD_ADDR_VAR 0 45
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: NEG
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: LD_INT 2
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: LD_INT 3
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: LD_INT 3
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: LD_INT 3
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 2
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: PUSH
51404: LD_INT 3
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: LD_INT 3
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: LD_INT 3
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 3
51444: NEG
51445: PUSH
51446: LD_INT 2
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 3
51456: NEG
51457: PUSH
51458: LD_INT 3
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51497: LD_ADDR_VAR 0 46
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: NEG
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: LD_INT 3
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: LD_INT 3
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 2
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 3
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: LD_INT 3
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: LD_INT 3
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: LD_INT 2
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 3
51793: NEG
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 3
51804: NEG
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51845: LD_ADDR_VAR 0 47
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: LD_INT 2
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 2
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: LD_INT 2
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51996: LD_ADDR_VAR 0 48
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 2
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52143: LD_ADDR_VAR 0 49
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 2
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52287: LD_ADDR_VAR 0 50
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 2
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52431: LD_ADDR_VAR 0 51
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52578: LD_ADDR_VAR 0 52
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 2
52693: NEG
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 2
52705: NEG
52706: PUSH
52707: LD_INT 2
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52729: LD_ADDR_VAR 0 53
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: LD_INT 2
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 2
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 2
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52959: LD_ADDR_VAR 0 54
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 1
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: NEG
53041: PUSH
53042: LD_INT 2
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53189: LD_ADDR_VAR 0 55
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 2
53324: PUSH
53325: LD_INT 2
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 2
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 2
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: NEG
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 2
53388: NEG
53389: PUSH
53390: LD_INT 2
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53419: LD_ADDR_VAR 0 56
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: LD_INT 2
53504: NEG
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: LD_INT 2
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 2
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 2
53606: NEG
53607: PUSH
53608: LD_INT 1
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53649: LD_ADDR_VAR 0 57
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: LD_INT 2
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: NEG
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53879: LD_ADDR_VAR 0 58
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: LD_INT 2
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 2
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 2
54078: NEG
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54109: LD_ADDR_VAR 0 59
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54197: LD_ADDR_VAR 0 60
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54285: LD_ADDR_VAR 0 61
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54373: LD_ADDR_VAR 0 62
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54461: LD_ADDR_VAR 0 63
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54549: LD_ADDR_VAR 0 64
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: ST_TO_ADDR
// end ; 1 :
54637: GO 60534
54639: LD_INT 1
54641: DOUBLE
54642: EQUAL
54643: IFTRUE 54647
54645: GO 57270
54647: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54648: LD_ADDR_VAR 0 11
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 3
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 3
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: LD_INT 2
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: LIST
54691: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54692: LD_ADDR_VAR 0 12
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 3
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 3
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: LIST
54732: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54733: LD_ADDR_VAR 0 13
54737: PUSH
54738: LD_INT 3
54740: PUSH
54741: LD_INT 2
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 3
54750: PUSH
54751: LD_INT 3
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: LD_INT 3
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: LIST
54772: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54773: LD_ADDR_VAR 0 14
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: LD_INT 3
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: LD_INT 3
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: LIST
54813: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54814: LD_ADDR_VAR 0 15
54818: PUSH
54819: LD_INT 2
54821: NEG
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 3
54832: NEG
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 3
54843: NEG
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: LIST
54857: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54858: LD_ADDR_VAR 0 16
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: LD_INT 3
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 3
54877: NEG
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 3
54889: NEG
54890: PUSH
54891: LD_INT 3
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: LIST
54903: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54904: LD_ADDR_VAR 0 17
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: LD_INT 3
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 2
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: LIST
54947: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54948: LD_ADDR_VAR 0 18
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 3
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 3
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: LIST
54988: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54989: LD_ADDR_VAR 0 19
54993: PUSH
54994: LD_INT 3
54996: PUSH
54997: LD_INT 2
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 3
55006: PUSH
55007: LD_INT 3
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 2
55016: PUSH
55017: LD_INT 3
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55029: LD_ADDR_VAR 0 20
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: LD_INT 3
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 3
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: LIST
55069: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55070: LD_ADDR_VAR 0 21
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 3
55088: NEG
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 3
55099: NEG
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: LIST
55113: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55114: LD_ADDR_VAR 0 22
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: LD_INT 3
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 3
55133: NEG
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 3
55145: NEG
55146: PUSH
55147: LD_INT 3
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: LIST
55159: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55160: LD_ADDR_VAR 0 23
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 3
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: LD_INT 4
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 3
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: LIST
55203: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55204: LD_ADDR_VAR 0 24
55208: PUSH
55209: LD_INT 3
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 3
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 4
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: LIST
55244: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55245: LD_ADDR_VAR 0 25
55249: PUSH
55250: LD_INT 3
55252: PUSH
55253: LD_INT 3
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 4
55262: PUSH
55263: LD_INT 3
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 3
55272: PUSH
55273: LD_INT 4
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: LIST
55284: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55285: LD_ADDR_VAR 0 26
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 3
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: LD_INT 4
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: LIST
55325: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55326: LD_ADDR_VAR 0 27
55330: PUSH
55331: LD_INT 3
55333: NEG
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 3
55344: NEG
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 4
55355: NEG
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: LIST
55369: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55370: LD_ADDR_VAR 0 28
55374: PUSH
55375: LD_INT 3
55377: NEG
55378: PUSH
55379: LD_INT 3
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 3
55389: NEG
55390: PUSH
55391: LD_INT 4
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 4
55401: NEG
55402: PUSH
55403: LD_INT 3
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: LIST
55415: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55416: LD_ADDR_VAR 0 29
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 3
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 3
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 2
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 4
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: LD_INT 4
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: LD_INT 3
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: LD_INT 5
55495: NEG
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 5
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 4
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 6
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 6
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 5
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55571: LD_ADDR_VAR 0 30
55575: PUSH
55576: LD_INT 2
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 3
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 3
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 3
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 4
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 4
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 4
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 5
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 5
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 5
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 6
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 6
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55714: LD_ADDR_VAR 0 31
55718: PUSH
55719: LD_INT 3
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 3
55731: PUSH
55732: LD_INT 3
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: LD_INT 3
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 4
55751: PUSH
55752: LD_INT 3
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 4
55761: PUSH
55762: LD_INT 4
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 3
55771: PUSH
55772: LD_INT 4
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 5
55781: PUSH
55782: LD_INT 4
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 5
55791: PUSH
55792: LD_INT 5
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 4
55801: PUSH
55802: LD_INT 5
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 6
55811: PUSH
55812: LD_INT 5
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 6
55821: PUSH
55822: LD_INT 6
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 5
55831: PUSH
55832: LD_INT 6
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55853: LD_ADDR_VAR 0 32
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: LD_INT 3
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 3
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: LD_INT 2
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: LD_INT 4
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: LD_INT 4
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: LD_INT 5
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 5
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: LD_INT 4
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: LD_INT 6
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 6
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: LD_INT 5
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55996: LD_ADDR_VAR 0 33
56000: PUSH
56001: LD_INT 2
56003: NEG
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 3
56014: NEG
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 3
56025: NEG
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 3
56037: NEG
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 4
56048: NEG
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 4
56059: NEG
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 4
56071: NEG
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 5
56082: NEG
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 5
56093: NEG
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 5
56105: NEG
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 6
56116: NEG
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 6
56127: NEG
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56151: LD_ADDR_VAR 0 34
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: LD_INT 3
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 3
56170: NEG
56171: PUSH
56172: LD_INT 2
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 3
56182: NEG
56183: PUSH
56184: LD_INT 3
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 3
56194: NEG
56195: PUSH
56196: LD_INT 4
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 4
56206: NEG
56207: PUSH
56208: LD_INT 3
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 4
56218: NEG
56219: PUSH
56220: LD_INT 4
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 4
56230: NEG
56231: PUSH
56232: LD_INT 5
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 5
56242: NEG
56243: PUSH
56244: LD_INT 4
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 5
56254: NEG
56255: PUSH
56256: LD_INT 5
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 5
56266: NEG
56267: PUSH
56268: LD_INT 6
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 6
56278: NEG
56279: PUSH
56280: LD_INT 5
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 6
56290: NEG
56291: PUSH
56292: LD_INT 6
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56314: LD_ADDR_VAR 0 41
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: LD_INT 3
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: LIST
56357: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56358: LD_ADDR_VAR 0 42
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: LIST
56398: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56399: LD_ADDR_VAR 0 43
56403: PUSH
56404: LD_INT 2
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 3
56416: PUSH
56417: LD_INT 2
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: LD_INT 3
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: LIST
56438: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56439: LD_ADDR_VAR 0 44
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: LD_INT 2
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: LD_INT 3
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: LIST
56479: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56480: LD_ADDR_VAR 0 45
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: NEG
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 3
56509: NEG
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: LIST
56523: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56524: LD_ADDR_VAR 0 46
56528: PUSH
56529: LD_INT 2
56531: NEG
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 2
56543: NEG
56544: PUSH
56545: LD_INT 3
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 3
56555: NEG
56556: PUSH
56557: LD_INT 2
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: LIST
56569: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56570: LD_ADDR_VAR 0 47
56574: PUSH
56575: LD_INT 2
56577: NEG
56578: PUSH
56579: LD_INT 3
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: LD_INT 3
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56603: LD_ADDR_VAR 0 48
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: LD_INT 2
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56634: LD_ADDR_VAR 0 49
56638: PUSH
56639: LD_INT 3
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56663: LD_ADDR_VAR 0 50
56667: PUSH
56668: LD_INT 2
56670: PUSH
56671: LD_INT 3
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 3
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56692: LD_ADDR_VAR 0 51
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 2
56710: NEG
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56723: LD_ADDR_VAR 0 52
56727: PUSH
56728: LD_INT 3
56730: NEG
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: LD_INT 2
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56756: LD_ADDR_VAR 0 53
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: LD_INT 3
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 3
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: LD_INT 2
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: LIST
56799: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56800: LD_ADDR_VAR 0 54
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 3
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 3
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: LIST
56840: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56841: LD_ADDR_VAR 0 55
56845: PUSH
56846: LD_INT 3
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 3
56858: PUSH
56859: LD_INT 3
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: LD_INT 3
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: LIST
56880: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56881: LD_ADDR_VAR 0 56
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: LD_INT 3
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: LD_INT 3
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56922: LD_ADDR_VAR 0 57
56926: PUSH
56927: LD_INT 2
56929: NEG
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 3
56940: NEG
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 3
56951: NEG
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: LIST
56965: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56966: LD_ADDR_VAR 0 58
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: LD_INT 3
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 3
56985: NEG
56986: PUSH
56987: LD_INT 2
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 3
56997: NEG
56998: PUSH
56999: LD_INT 3
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: LIST
57011: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57012: LD_ADDR_VAR 0 59
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: LD_INT 2
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: LD_INT 2
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: LIST
57055: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57056: LD_ADDR_VAR 0 60
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: LIST
57096: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57097: LD_ADDR_VAR 0 61
57101: PUSH
57102: LD_INT 2
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: LIST
57136: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57137: LD_ADDR_VAR 0 62
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: LD_INT 2
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: LIST
57177: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57178: LD_ADDR_VAR 0 63
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: NEG
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 2
57207: NEG
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: LIST
57221: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57222: LD_ADDR_VAR 0 64
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: LD_INT 2
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: LD_INT 2
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: LIST
57267: ST_TO_ADDR
// end ; 2 :
57268: GO 60534
57270: LD_INT 2
57272: DOUBLE
57273: EQUAL
57274: IFTRUE 57278
57276: GO 60533
57278: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57279: LD_ADDR_VAR 0 29
57283: PUSH
57284: LD_INT 4
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 4
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 5
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 5
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 4
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 3
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 3
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 3
57358: PUSH
57359: LD_INT 2
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 5
57369: PUSH
57370: LD_INT 2
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 3
57379: PUSH
57380: LD_INT 3
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 3
57389: PUSH
57390: LD_INT 2
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 4
57399: PUSH
57400: LD_INT 3
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 4
57409: PUSH
57410: LD_INT 4
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 3
57419: PUSH
57420: LD_INT 4
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: LD_INT 3
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 4
57449: PUSH
57450: LD_INT 2
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: LD_INT 4
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: LD_INT 4
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: LD_INT 3
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: LD_INT 4
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: LD_INT 5
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 5
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: LD_INT 4
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: LD_INT 3
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 2
57541: PUSH
57542: LD_INT 5
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: LD_INT 3
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 3
57562: NEG
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 3
57573: NEG
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 2
57585: NEG
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 2
57596: NEG
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 3
57607: NEG
57608: PUSH
57609: LD_INT 1
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 4
57618: NEG
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 4
57629: NEG
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 4
57641: NEG
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 4
57664: NEG
57665: PUSH
57666: LD_INT 4
57668: NEG
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 4
57676: NEG
57677: PUSH
57678: LD_INT 5
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 3
57688: NEG
57689: PUSH
57690: LD_INT 4
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 3
57700: NEG
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 4
57712: NEG
57713: PUSH
57714: LD_INT 3
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 5
57724: NEG
57725: PUSH
57726: LD_INT 4
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 5
57736: NEG
57737: PUSH
57738: LD_INT 5
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 3
57748: NEG
57749: PUSH
57750: LD_INT 5
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 5
57760: NEG
57761: PUSH
57762: LD_INT 3
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57817: LD_ADDR_VAR 0 30
57821: PUSH
57822: LD_INT 4
57824: PUSH
57825: LD_INT 4
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 4
57834: PUSH
57835: LD_INT 3
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 5
57844: PUSH
57845: LD_INT 4
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 5
57854: PUSH
57855: LD_INT 5
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 4
57864: PUSH
57865: LD_INT 5
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 3
57874: PUSH
57875: LD_INT 4
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 3
57884: PUSH
57885: LD_INT 3
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 5
57894: PUSH
57895: LD_INT 3
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 3
57904: PUSH
57905: LD_INT 5
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 3
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: LD_INT 2
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: LD_INT 3
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: LD_INT 4
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: LD_INT 4
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: LD_INT 3
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: PUSH
57987: LD_INT 4
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: NEG
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 4
58007: NEG
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 4
58018: NEG
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 3
58030: NEG
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 3
58041: NEG
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 4
58052: NEG
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 5
58063: NEG
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 5
58074: NEG
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 5
58086: NEG
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 3
58098: NEG
58099: PUSH
58100: LD_INT 2
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: NEG
58110: PUSH
58111: LD_INT 3
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 3
58121: NEG
58122: PUSH
58123: LD_INT 4
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: LD_INT 3
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 2
58145: NEG
58146: PUSH
58147: LD_INT 2
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 3
58157: NEG
58158: PUSH
58159: LD_INT 2
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 4
58169: NEG
58170: PUSH
58171: LD_INT 3
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 4
58181: NEG
58182: PUSH
58183: LD_INT 4
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: LD_INT 4
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 4
58205: NEG
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 4
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: LD_INT 5
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: LD_INT 4
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: LD_INT 3
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: LD_INT 3
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: LD_INT 4
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 1
58284: NEG
58285: PUSH
58286: LD_INT 5
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: LD_INT 3
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 2
58307: NEG
58308: PUSH
58309: LD_INT 5
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58364: LD_ADDR_VAR 0 31
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: LD_INT 4
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: LD_INT 3
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 4
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: LD_INT 5
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: LD_INT 5
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 4
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: LD_INT 3
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: LD_INT 5
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: LD_INT 3
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 3
58464: NEG
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 3
58475: NEG
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 2
58487: NEG
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: NEG
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 3
58509: NEG
58510: PUSH
58511: LD_INT 1
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 4
58520: NEG
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 4
58531: NEG
58532: PUSH
58533: LD_INT 1
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 4
58543: NEG
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: LD_INT 2
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 4
58566: NEG
58567: PUSH
58568: LD_INT 4
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 4
58578: NEG
58579: PUSH
58580: LD_INT 5
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 3
58590: NEG
58591: PUSH
58592: LD_INT 4
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 3
58602: NEG
58603: PUSH
58604: LD_INT 3
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 4
58614: NEG
58615: PUSH
58616: LD_INT 3
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 5
58626: NEG
58627: PUSH
58628: LD_INT 4
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 5
58638: NEG
58639: PUSH
58640: LD_INT 5
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 3
58650: NEG
58651: PUSH
58652: LD_INT 5
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 5
58662: NEG
58663: PUSH
58664: LD_INT 3
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: LD_INT 3
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: LD_INT 4
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: LD_INT 3
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: LD_INT 2
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: LD_INT 3
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: LD_INT 4
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: NEG
58765: PUSH
58766: LD_INT 4
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 4
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 4
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 5
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 5
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 4
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 3
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 3
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 3
58848: PUSH
58849: LD_INT 2
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 5
58859: PUSH
58860: LD_INT 2
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58914: LD_ADDR_VAR 0 32
58918: PUSH
58919: LD_INT 4
58921: NEG
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 4
58932: NEG
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 3
58944: NEG
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 3
58955: NEG
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 4
58966: NEG
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 5
58977: NEG
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 5
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 5
59000: NEG
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 3
59012: NEG
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 3
59023: NEG
59024: PUSH
59025: LD_INT 3
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 3
59035: NEG
59036: PUSH
59037: LD_INT 4
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 2
59047: NEG
59048: PUSH
59049: LD_INT 3
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 2
59059: NEG
59060: PUSH
59061: LD_INT 2
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 3
59071: NEG
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 4
59083: NEG
59084: PUSH
59085: LD_INT 3
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 4
59095: NEG
59096: PUSH
59097: LD_INT 4
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 2
59107: NEG
59108: PUSH
59109: LD_INT 4
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 4
59119: NEG
59120: PUSH
59121: LD_INT 2
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: LD_INT 4
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: LD_INT 5
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: LD_INT 4
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: LD_INT 3
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: LD_INT 3
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: LD_INT 4
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: LD_INT 5
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 2
59210: PUSH
59211: LD_INT 3
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 2
59221: NEG
59222: PUSH
59223: LD_INT 5
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 3
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 4
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 4
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 3
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 2
59294: PUSH
59295: LD_INT 1
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 2
59305: PUSH
59306: LD_INT 2
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 4
59316: PUSH
59317: LD_INT 2
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 4
59326: PUSH
59327: LD_INT 4
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 4
59336: PUSH
59337: LD_INT 3
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 5
59346: PUSH
59347: LD_INT 4
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 5
59356: PUSH
59357: LD_INT 5
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 4
59366: PUSH
59367: LD_INT 5
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 3
59376: PUSH
59377: LD_INT 4
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 3
59386: PUSH
59387: LD_INT 3
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 5
59396: PUSH
59397: LD_INT 3
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 3
59406: PUSH
59407: LD_INT 5
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59461: LD_ADDR_VAR 0 33
59465: PUSH
59466: LD_INT 4
59468: NEG
59469: PUSH
59470: LD_INT 4
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 4
59480: NEG
59481: PUSH
59482: LD_INT 5
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 3
59492: NEG
59493: PUSH
59494: LD_INT 4
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 3
59504: NEG
59505: PUSH
59506: LD_INT 3
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 4
59516: NEG
59517: PUSH
59518: LD_INT 3
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 5
59528: NEG
59529: PUSH
59530: LD_INT 4
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 5
59540: NEG
59541: PUSH
59542: LD_INT 5
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 3
59552: NEG
59553: PUSH
59554: LD_INT 5
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 5
59564: NEG
59565: PUSH
59566: LD_INT 3
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: LD_INT 3
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: LD_INT 4
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: LD_INT 3
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: LD_INT 2
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: LD_INT 3
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: LD_INT 4
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 2
59655: PUSH
59656: LD_INT 2
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 2
59666: NEG
59667: PUSH
59668: LD_INT 4
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 4
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 4
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 5
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 5
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 4
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 3
59729: PUSH
59730: LD_INT 0
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 3
59739: PUSH
59740: LD_INT 1
59742: NEG
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 3
59750: PUSH
59751: LD_INT 2
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 5
59761: PUSH
59762: LD_INT 2
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 3
59771: PUSH
59772: LD_INT 3
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 3
59781: PUSH
59782: LD_INT 2
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 4
59791: PUSH
59792: LD_INT 3
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 4
59801: PUSH
59802: LD_INT 4
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 3
59811: PUSH
59812: LD_INT 4
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 2
59821: PUSH
59822: LD_INT 3
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 2
59831: PUSH
59832: LD_INT 2
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 4
59841: PUSH
59842: LD_INT 2
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 2
59851: PUSH
59852: LD_INT 4
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: LD_INT 4
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: LD_INT 3
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: LD_INT 4
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: LD_INT 5
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: LD_INT 5
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: LD_INT 4
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: LD_INT 3
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 2
59933: PUSH
59934: LD_INT 5
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: LD_INT 3
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59999: LD_ADDR_VAR 0 34
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 4
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: LD_INT 5
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: LD_INT 4
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: LD_INT 3
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: LD_INT 3
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: LD_INT 4
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: LD_INT 5
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 2
60085: PUSH
60086: LD_INT 3
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: LD_INT 5
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 3
60108: PUSH
60109: LD_INT 0
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 3
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 4
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 4
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 3
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 2
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 2
60169: PUSH
60170: LD_INT 1
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: LD_INT 2
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 4
60191: PUSH
60192: LD_INT 2
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 4
60201: PUSH
60202: LD_INT 4
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 4
60211: PUSH
60212: LD_INT 3
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 5
60221: PUSH
60222: LD_INT 4
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 5
60231: PUSH
60232: LD_INT 5
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 4
60241: PUSH
60242: LD_INT 5
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 3
60251: PUSH
60252: LD_INT 4
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 3
60261: PUSH
60262: LD_INT 3
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 5
60271: PUSH
60272: LD_INT 3
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 3
60281: PUSH
60282: LD_INT 5
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: LD_INT 3
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: LD_INT 3
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: LD_INT 4
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: LD_INT 4
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: LD_INT 3
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: NEG
60353: PUSH
60354: LD_INT 2
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 2
60363: PUSH
60364: LD_INT 4
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 2
60373: NEG
60374: PUSH
60375: LD_INT 2
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 4
60384: NEG
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 4
60395: NEG
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 3
60407: NEG
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 3
60418: NEG
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 4
60429: NEG
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 5
60440: NEG
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 5
60451: NEG
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 5
60463: NEG
60464: PUSH
60465: LD_INT 2
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 3
60475: NEG
60476: PUSH
60477: LD_INT 2
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: ST_TO_ADDR
// end ; end ;
60531: GO 60534
60533: POP
// case btype of b_depot , b_warehouse :
60534: LD_VAR 0 1
60538: PUSH
60539: LD_INT 0
60541: DOUBLE
60542: EQUAL
60543: IFTRUE 60553
60545: LD_INT 1
60547: DOUBLE
60548: EQUAL
60549: IFTRUE 60553
60551: GO 60754
60553: POP
// case nation of nation_american :
60554: LD_VAR 0 5
60558: PUSH
60559: LD_INT 1
60561: DOUBLE
60562: EQUAL
60563: IFTRUE 60567
60565: GO 60623
60567: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60568: LD_ADDR_VAR 0 9
60572: PUSH
60573: LD_VAR 0 11
60577: PUSH
60578: LD_VAR 0 12
60582: PUSH
60583: LD_VAR 0 13
60587: PUSH
60588: LD_VAR 0 14
60592: PUSH
60593: LD_VAR 0 15
60597: PUSH
60598: LD_VAR 0 16
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: PUSH
60611: LD_VAR 0 4
60615: PUSH
60616: LD_INT 1
60618: PLUS
60619: ARRAY
60620: ST_TO_ADDR
60621: GO 60752
60623: LD_INT 2
60625: DOUBLE
60626: EQUAL
60627: IFTRUE 60631
60629: GO 60687
60631: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60632: LD_ADDR_VAR 0 9
60636: PUSH
60637: LD_VAR 0 17
60641: PUSH
60642: LD_VAR 0 18
60646: PUSH
60647: LD_VAR 0 19
60651: PUSH
60652: LD_VAR 0 20
60656: PUSH
60657: LD_VAR 0 21
60661: PUSH
60662: LD_VAR 0 22
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: PUSH
60675: LD_VAR 0 4
60679: PUSH
60680: LD_INT 1
60682: PLUS
60683: ARRAY
60684: ST_TO_ADDR
60685: GO 60752
60687: LD_INT 3
60689: DOUBLE
60690: EQUAL
60691: IFTRUE 60695
60693: GO 60751
60695: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60696: LD_ADDR_VAR 0 9
60700: PUSH
60701: LD_VAR 0 23
60705: PUSH
60706: LD_VAR 0 24
60710: PUSH
60711: LD_VAR 0 25
60715: PUSH
60716: LD_VAR 0 26
60720: PUSH
60721: LD_VAR 0 27
60725: PUSH
60726: LD_VAR 0 28
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: PUSH
60739: LD_VAR 0 4
60743: PUSH
60744: LD_INT 1
60746: PLUS
60747: ARRAY
60748: ST_TO_ADDR
60749: GO 60752
60751: POP
60752: GO 61307
60754: LD_INT 2
60756: DOUBLE
60757: EQUAL
60758: IFTRUE 60768
60760: LD_INT 3
60762: DOUBLE
60763: EQUAL
60764: IFTRUE 60768
60766: GO 60824
60768: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60769: LD_ADDR_VAR 0 9
60773: PUSH
60774: LD_VAR 0 29
60778: PUSH
60779: LD_VAR 0 30
60783: PUSH
60784: LD_VAR 0 31
60788: PUSH
60789: LD_VAR 0 32
60793: PUSH
60794: LD_VAR 0 33
60798: PUSH
60799: LD_VAR 0 34
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: PUSH
60812: LD_VAR 0 4
60816: PUSH
60817: LD_INT 1
60819: PLUS
60820: ARRAY
60821: ST_TO_ADDR
60822: GO 61307
60824: LD_INT 16
60826: DOUBLE
60827: EQUAL
60828: IFTRUE 60886
60830: LD_INT 17
60832: DOUBLE
60833: EQUAL
60834: IFTRUE 60886
60836: LD_INT 18
60838: DOUBLE
60839: EQUAL
60840: IFTRUE 60886
60842: LD_INT 19
60844: DOUBLE
60845: EQUAL
60846: IFTRUE 60886
60848: LD_INT 22
60850: DOUBLE
60851: EQUAL
60852: IFTRUE 60886
60854: LD_INT 20
60856: DOUBLE
60857: EQUAL
60858: IFTRUE 60886
60860: LD_INT 21
60862: DOUBLE
60863: EQUAL
60864: IFTRUE 60886
60866: LD_INT 23
60868: DOUBLE
60869: EQUAL
60870: IFTRUE 60886
60872: LD_INT 24
60874: DOUBLE
60875: EQUAL
60876: IFTRUE 60886
60878: LD_INT 25
60880: DOUBLE
60881: EQUAL
60882: IFTRUE 60886
60884: GO 60942
60886: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60887: LD_ADDR_VAR 0 9
60891: PUSH
60892: LD_VAR 0 35
60896: PUSH
60897: LD_VAR 0 36
60901: PUSH
60902: LD_VAR 0 37
60906: PUSH
60907: LD_VAR 0 38
60911: PUSH
60912: LD_VAR 0 39
60916: PUSH
60917: LD_VAR 0 40
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: PUSH
60930: LD_VAR 0 4
60934: PUSH
60935: LD_INT 1
60937: PLUS
60938: ARRAY
60939: ST_TO_ADDR
60940: GO 61307
60942: LD_INT 6
60944: DOUBLE
60945: EQUAL
60946: IFTRUE 60998
60948: LD_INT 7
60950: DOUBLE
60951: EQUAL
60952: IFTRUE 60998
60954: LD_INT 8
60956: DOUBLE
60957: EQUAL
60958: IFTRUE 60998
60960: LD_INT 13
60962: DOUBLE
60963: EQUAL
60964: IFTRUE 60998
60966: LD_INT 12
60968: DOUBLE
60969: EQUAL
60970: IFTRUE 60998
60972: LD_INT 15
60974: DOUBLE
60975: EQUAL
60976: IFTRUE 60998
60978: LD_INT 11
60980: DOUBLE
60981: EQUAL
60982: IFTRUE 60998
60984: LD_INT 14
60986: DOUBLE
60987: EQUAL
60988: IFTRUE 60998
60990: LD_INT 10
60992: DOUBLE
60993: EQUAL
60994: IFTRUE 60998
60996: GO 61054
60998: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60999: LD_ADDR_VAR 0 9
61003: PUSH
61004: LD_VAR 0 41
61008: PUSH
61009: LD_VAR 0 42
61013: PUSH
61014: LD_VAR 0 43
61018: PUSH
61019: LD_VAR 0 44
61023: PUSH
61024: LD_VAR 0 45
61028: PUSH
61029: LD_VAR 0 46
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: PUSH
61042: LD_VAR 0 4
61046: PUSH
61047: LD_INT 1
61049: PLUS
61050: ARRAY
61051: ST_TO_ADDR
61052: GO 61307
61054: LD_INT 36
61056: DOUBLE
61057: EQUAL
61058: IFTRUE 61062
61060: GO 61118
61062: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61063: LD_ADDR_VAR 0 9
61067: PUSH
61068: LD_VAR 0 47
61072: PUSH
61073: LD_VAR 0 48
61077: PUSH
61078: LD_VAR 0 49
61082: PUSH
61083: LD_VAR 0 50
61087: PUSH
61088: LD_VAR 0 51
61092: PUSH
61093: LD_VAR 0 52
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: PUSH
61106: LD_VAR 0 4
61110: PUSH
61111: LD_INT 1
61113: PLUS
61114: ARRAY
61115: ST_TO_ADDR
61116: GO 61307
61118: LD_INT 4
61120: DOUBLE
61121: EQUAL
61122: IFTRUE 61144
61124: LD_INT 5
61126: DOUBLE
61127: EQUAL
61128: IFTRUE 61144
61130: LD_INT 34
61132: DOUBLE
61133: EQUAL
61134: IFTRUE 61144
61136: LD_INT 37
61138: DOUBLE
61139: EQUAL
61140: IFTRUE 61144
61142: GO 61200
61144: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61145: LD_ADDR_VAR 0 9
61149: PUSH
61150: LD_VAR 0 53
61154: PUSH
61155: LD_VAR 0 54
61159: PUSH
61160: LD_VAR 0 55
61164: PUSH
61165: LD_VAR 0 56
61169: PUSH
61170: LD_VAR 0 57
61174: PUSH
61175: LD_VAR 0 58
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: PUSH
61188: LD_VAR 0 4
61192: PUSH
61193: LD_INT 1
61195: PLUS
61196: ARRAY
61197: ST_TO_ADDR
61198: GO 61307
61200: LD_INT 31
61202: DOUBLE
61203: EQUAL
61204: IFTRUE 61250
61206: LD_INT 32
61208: DOUBLE
61209: EQUAL
61210: IFTRUE 61250
61212: LD_INT 33
61214: DOUBLE
61215: EQUAL
61216: IFTRUE 61250
61218: LD_INT 27
61220: DOUBLE
61221: EQUAL
61222: IFTRUE 61250
61224: LD_INT 26
61226: DOUBLE
61227: EQUAL
61228: IFTRUE 61250
61230: LD_INT 28
61232: DOUBLE
61233: EQUAL
61234: IFTRUE 61250
61236: LD_INT 29
61238: DOUBLE
61239: EQUAL
61240: IFTRUE 61250
61242: LD_INT 30
61244: DOUBLE
61245: EQUAL
61246: IFTRUE 61250
61248: GO 61306
61250: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61251: LD_ADDR_VAR 0 9
61255: PUSH
61256: LD_VAR 0 59
61260: PUSH
61261: LD_VAR 0 60
61265: PUSH
61266: LD_VAR 0 61
61270: PUSH
61271: LD_VAR 0 62
61275: PUSH
61276: LD_VAR 0 63
61280: PUSH
61281: LD_VAR 0 64
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: PUSH
61294: LD_VAR 0 4
61298: PUSH
61299: LD_INT 1
61301: PLUS
61302: ARRAY
61303: ST_TO_ADDR
61304: GO 61307
61306: POP
// temp_list2 = [ ] ;
61307: LD_ADDR_VAR 0 10
61311: PUSH
61312: EMPTY
61313: ST_TO_ADDR
// for i in temp_list do
61314: LD_ADDR_VAR 0 8
61318: PUSH
61319: LD_VAR 0 9
61323: PUSH
61324: FOR_IN
61325: IFFALSE 61377
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61327: LD_ADDR_VAR 0 10
61331: PUSH
61332: LD_VAR 0 10
61336: PUSH
61337: LD_VAR 0 8
61341: PUSH
61342: LD_INT 1
61344: ARRAY
61345: PUSH
61346: LD_VAR 0 2
61350: PLUS
61351: PUSH
61352: LD_VAR 0 8
61356: PUSH
61357: LD_INT 2
61359: ARRAY
61360: PUSH
61361: LD_VAR 0 3
61365: PLUS
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: EMPTY
61372: LIST
61373: ADD
61374: ST_TO_ADDR
61375: GO 61324
61377: POP
61378: POP
// result = temp_list2 ;
61379: LD_ADDR_VAR 0 7
61383: PUSH
61384: LD_VAR 0 10
61388: ST_TO_ADDR
// end ;
61389: LD_VAR 0 7
61393: RET
// export function EnemyInRange ( unit , dist ) ; begin
61394: LD_INT 0
61396: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61397: LD_ADDR_VAR 0 3
61401: PUSH
61402: LD_VAR 0 1
61406: PPUSH
61407: CALL_OW 255
61411: PPUSH
61412: LD_VAR 0 1
61416: PPUSH
61417: CALL_OW 250
61421: PPUSH
61422: LD_VAR 0 1
61426: PPUSH
61427: CALL_OW 251
61431: PPUSH
61432: LD_VAR 0 2
61436: PPUSH
61437: CALL 34790 0 4
61441: PUSH
61442: LD_INT 4
61444: ARRAY
61445: ST_TO_ADDR
// end ;
61446: LD_VAR 0 3
61450: RET
// export function PlayerSeeMe ( unit ) ; begin
61451: LD_INT 0
61453: PPUSH
// result := See ( your_side , unit ) ;
61454: LD_ADDR_VAR 0 2
61458: PUSH
61459: LD_OWVAR 2
61463: PPUSH
61464: LD_VAR 0 1
61468: PPUSH
61469: CALL_OW 292
61473: ST_TO_ADDR
// end ;
61474: LD_VAR 0 2
61478: RET
// export function ReverseDir ( unit ) ; begin
61479: LD_INT 0
61481: PPUSH
// if not unit then
61482: LD_VAR 0 1
61486: NOT
61487: IFFALSE 61491
// exit ;
61489: GO 61514
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61491: LD_ADDR_VAR 0 2
61495: PUSH
61496: LD_VAR 0 1
61500: PPUSH
61501: CALL_OW 254
61505: PUSH
61506: LD_INT 3
61508: PLUS
61509: PUSH
61510: LD_INT 6
61512: MOD
61513: ST_TO_ADDR
// end ;
61514: LD_VAR 0 2
61518: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61519: LD_INT 0
61521: PPUSH
61522: PPUSH
61523: PPUSH
61524: PPUSH
61525: PPUSH
// if not hexes then
61526: LD_VAR 0 2
61530: NOT
61531: IFFALSE 61535
// exit ;
61533: GO 61683
// dist := 9999 ;
61535: LD_ADDR_VAR 0 5
61539: PUSH
61540: LD_INT 9999
61542: ST_TO_ADDR
// for i = 1 to hexes do
61543: LD_ADDR_VAR 0 4
61547: PUSH
61548: DOUBLE
61549: LD_INT 1
61551: DEC
61552: ST_TO_ADDR
61553: LD_VAR 0 2
61557: PUSH
61558: FOR_TO
61559: IFFALSE 61671
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61561: LD_VAR 0 1
61565: PPUSH
61566: LD_VAR 0 2
61570: PUSH
61571: LD_VAR 0 4
61575: ARRAY
61576: PUSH
61577: LD_INT 1
61579: ARRAY
61580: PPUSH
61581: LD_VAR 0 2
61585: PUSH
61586: LD_VAR 0 4
61590: ARRAY
61591: PUSH
61592: LD_INT 2
61594: ARRAY
61595: PPUSH
61596: CALL_OW 297
61600: PUSH
61601: LD_VAR 0 5
61605: LESS
61606: IFFALSE 61669
// begin hex := hexes [ i ] ;
61608: LD_ADDR_VAR 0 7
61612: PUSH
61613: LD_VAR 0 2
61617: PUSH
61618: LD_VAR 0 4
61622: ARRAY
61623: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61624: LD_ADDR_VAR 0 5
61628: PUSH
61629: LD_VAR 0 1
61633: PPUSH
61634: LD_VAR 0 2
61638: PUSH
61639: LD_VAR 0 4
61643: ARRAY
61644: PUSH
61645: LD_INT 1
61647: ARRAY
61648: PPUSH
61649: LD_VAR 0 2
61653: PUSH
61654: LD_VAR 0 4
61658: ARRAY
61659: PUSH
61660: LD_INT 2
61662: ARRAY
61663: PPUSH
61664: CALL_OW 297
61668: ST_TO_ADDR
// end ; end ;
61669: GO 61558
61671: POP
61672: POP
// result := hex ;
61673: LD_ADDR_VAR 0 3
61677: PUSH
61678: LD_VAR 0 7
61682: ST_TO_ADDR
// end ;
61683: LD_VAR 0 3
61687: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61688: LD_INT 0
61690: PPUSH
61691: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61692: LD_VAR 0 1
61696: NOT
61697: PUSH
61698: LD_VAR 0 1
61702: PUSH
61703: LD_INT 21
61705: PUSH
61706: LD_INT 2
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 23
61715: PUSH
61716: LD_INT 2
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PPUSH
61727: CALL_OW 69
61731: IN
61732: NOT
61733: OR
61734: IFFALSE 61738
// exit ;
61736: GO 61785
// for i = 1 to 3 do
61738: LD_ADDR_VAR 0 3
61742: PUSH
61743: DOUBLE
61744: LD_INT 1
61746: DEC
61747: ST_TO_ADDR
61748: LD_INT 3
61750: PUSH
61751: FOR_TO
61752: IFFALSE 61783
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61754: LD_VAR 0 1
61758: PPUSH
61759: CALL_OW 250
61763: PPUSH
61764: LD_VAR 0 1
61768: PPUSH
61769: CALL_OW 251
61773: PPUSH
61774: LD_INT 1
61776: PPUSH
61777: CALL_OW 453
61781: GO 61751
61783: POP
61784: POP
// end ;
61785: LD_VAR 0 2
61789: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61790: LD_INT 0
61792: PPUSH
61793: PPUSH
61794: PPUSH
61795: PPUSH
61796: PPUSH
61797: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61798: LD_VAR 0 1
61802: NOT
61803: PUSH
61804: LD_VAR 0 2
61808: NOT
61809: OR
61810: PUSH
61811: LD_VAR 0 1
61815: PPUSH
61816: CALL_OW 314
61820: OR
61821: IFFALSE 61825
// exit ;
61823: GO 62266
// x := GetX ( enemy_unit ) ;
61825: LD_ADDR_VAR 0 7
61829: PUSH
61830: LD_VAR 0 2
61834: PPUSH
61835: CALL_OW 250
61839: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61840: LD_ADDR_VAR 0 8
61844: PUSH
61845: LD_VAR 0 2
61849: PPUSH
61850: CALL_OW 251
61854: ST_TO_ADDR
// if not x or not y then
61855: LD_VAR 0 7
61859: NOT
61860: PUSH
61861: LD_VAR 0 8
61865: NOT
61866: OR
61867: IFFALSE 61871
// exit ;
61869: GO 62266
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61871: LD_ADDR_VAR 0 6
61875: PUSH
61876: LD_VAR 0 7
61880: PPUSH
61881: LD_INT 0
61883: PPUSH
61884: LD_INT 4
61886: PPUSH
61887: CALL_OW 272
61891: PUSH
61892: LD_VAR 0 8
61896: PPUSH
61897: LD_INT 0
61899: PPUSH
61900: LD_INT 4
61902: PPUSH
61903: CALL_OW 273
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_VAR 0 7
61916: PPUSH
61917: LD_INT 1
61919: PPUSH
61920: LD_INT 4
61922: PPUSH
61923: CALL_OW 272
61927: PUSH
61928: LD_VAR 0 8
61932: PPUSH
61933: LD_INT 1
61935: PPUSH
61936: LD_INT 4
61938: PPUSH
61939: CALL_OW 273
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_VAR 0 7
61952: PPUSH
61953: LD_INT 2
61955: PPUSH
61956: LD_INT 4
61958: PPUSH
61959: CALL_OW 272
61963: PUSH
61964: LD_VAR 0 8
61968: PPUSH
61969: LD_INT 2
61971: PPUSH
61972: LD_INT 4
61974: PPUSH
61975: CALL_OW 273
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_VAR 0 7
61988: PPUSH
61989: LD_INT 3
61991: PPUSH
61992: LD_INT 4
61994: PPUSH
61995: CALL_OW 272
61999: PUSH
62000: LD_VAR 0 8
62004: PPUSH
62005: LD_INT 3
62007: PPUSH
62008: LD_INT 4
62010: PPUSH
62011: CALL_OW 273
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_VAR 0 7
62024: PPUSH
62025: LD_INT 4
62027: PPUSH
62028: LD_INT 4
62030: PPUSH
62031: CALL_OW 272
62035: PUSH
62036: LD_VAR 0 8
62040: PPUSH
62041: LD_INT 4
62043: PPUSH
62044: LD_INT 4
62046: PPUSH
62047: CALL_OW 273
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_VAR 0 7
62060: PPUSH
62061: LD_INT 5
62063: PPUSH
62064: LD_INT 4
62066: PPUSH
62067: CALL_OW 272
62071: PUSH
62072: LD_VAR 0 8
62076: PPUSH
62077: LD_INT 5
62079: PPUSH
62080: LD_INT 4
62082: PPUSH
62083: CALL_OW 273
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: ST_TO_ADDR
// for i = tmp downto 1 do
62100: LD_ADDR_VAR 0 4
62104: PUSH
62105: DOUBLE
62106: LD_VAR 0 6
62110: INC
62111: ST_TO_ADDR
62112: LD_INT 1
62114: PUSH
62115: FOR_DOWNTO
62116: IFFALSE 62217
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62118: LD_VAR 0 6
62122: PUSH
62123: LD_VAR 0 4
62127: ARRAY
62128: PUSH
62129: LD_INT 1
62131: ARRAY
62132: PPUSH
62133: LD_VAR 0 6
62137: PUSH
62138: LD_VAR 0 4
62142: ARRAY
62143: PUSH
62144: LD_INT 2
62146: ARRAY
62147: PPUSH
62148: CALL_OW 488
62152: NOT
62153: PUSH
62154: LD_VAR 0 6
62158: PUSH
62159: LD_VAR 0 4
62163: ARRAY
62164: PUSH
62165: LD_INT 1
62167: ARRAY
62168: PPUSH
62169: LD_VAR 0 6
62173: PUSH
62174: LD_VAR 0 4
62178: ARRAY
62179: PUSH
62180: LD_INT 2
62182: ARRAY
62183: PPUSH
62184: CALL_OW 428
62188: PUSH
62189: LD_INT 0
62191: NONEQUAL
62192: OR
62193: IFFALSE 62215
// tmp := Delete ( tmp , i ) ;
62195: LD_ADDR_VAR 0 6
62199: PUSH
62200: LD_VAR 0 6
62204: PPUSH
62205: LD_VAR 0 4
62209: PPUSH
62210: CALL_OW 3
62214: ST_TO_ADDR
62215: GO 62115
62217: POP
62218: POP
// j := GetClosestHex ( unit , tmp ) ;
62219: LD_ADDR_VAR 0 5
62223: PUSH
62224: LD_VAR 0 1
62228: PPUSH
62229: LD_VAR 0 6
62233: PPUSH
62234: CALL 61519 0 2
62238: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62239: LD_VAR 0 1
62243: PPUSH
62244: LD_VAR 0 5
62248: PUSH
62249: LD_INT 1
62251: ARRAY
62252: PPUSH
62253: LD_VAR 0 5
62257: PUSH
62258: LD_INT 2
62260: ARRAY
62261: PPUSH
62262: CALL_OW 111
// end ;
62266: LD_VAR 0 3
62270: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62271: LD_INT 0
62273: PPUSH
62274: PPUSH
62275: PPUSH
// uc_side = 0 ;
62276: LD_ADDR_OWVAR 20
62280: PUSH
62281: LD_INT 0
62283: ST_TO_ADDR
// uc_nation = 0 ;
62284: LD_ADDR_OWVAR 21
62288: PUSH
62289: LD_INT 0
62291: ST_TO_ADDR
// InitHc_All ( ) ;
62292: CALL_OW 584
// InitVc ;
62296: CALL_OW 20
// if mastodonts then
62300: LD_VAR 0 6
62304: IFFALSE 62371
// for i = 1 to mastodonts do
62306: LD_ADDR_VAR 0 11
62310: PUSH
62311: DOUBLE
62312: LD_INT 1
62314: DEC
62315: ST_TO_ADDR
62316: LD_VAR 0 6
62320: PUSH
62321: FOR_TO
62322: IFFALSE 62369
// begin vc_chassis := 31 ;
62324: LD_ADDR_OWVAR 37
62328: PUSH
62329: LD_INT 31
62331: ST_TO_ADDR
// vc_control := control_rider ;
62332: LD_ADDR_OWVAR 38
62336: PUSH
62337: LD_INT 4
62339: ST_TO_ADDR
// animal := CreateVehicle ;
62340: LD_ADDR_VAR 0 12
62344: PUSH
62345: CALL_OW 45
62349: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62350: LD_VAR 0 12
62354: PPUSH
62355: LD_VAR 0 8
62359: PPUSH
62360: LD_INT 0
62362: PPUSH
62363: CALL 64506 0 3
// end ;
62367: GO 62321
62369: POP
62370: POP
// if horses then
62371: LD_VAR 0 5
62375: IFFALSE 62442
// for i = 1 to horses do
62377: LD_ADDR_VAR 0 11
62381: PUSH
62382: DOUBLE
62383: LD_INT 1
62385: DEC
62386: ST_TO_ADDR
62387: LD_VAR 0 5
62391: PUSH
62392: FOR_TO
62393: IFFALSE 62440
// begin hc_class := 21 ;
62395: LD_ADDR_OWVAR 28
62399: PUSH
62400: LD_INT 21
62402: ST_TO_ADDR
// hc_gallery :=  ;
62403: LD_ADDR_OWVAR 33
62407: PUSH
62408: LD_STRING 
62410: ST_TO_ADDR
// animal := CreateHuman ;
62411: LD_ADDR_VAR 0 12
62415: PUSH
62416: CALL_OW 44
62420: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62421: LD_VAR 0 12
62425: PPUSH
62426: LD_VAR 0 8
62430: PPUSH
62431: LD_INT 0
62433: PPUSH
62434: CALL 64506 0 3
// end ;
62438: GO 62392
62440: POP
62441: POP
// if birds then
62442: LD_VAR 0 1
62446: IFFALSE 62513
// for i = 1 to birds do
62448: LD_ADDR_VAR 0 11
62452: PUSH
62453: DOUBLE
62454: LD_INT 1
62456: DEC
62457: ST_TO_ADDR
62458: LD_VAR 0 1
62462: PUSH
62463: FOR_TO
62464: IFFALSE 62511
// begin hc_class = 18 ;
62466: LD_ADDR_OWVAR 28
62470: PUSH
62471: LD_INT 18
62473: ST_TO_ADDR
// hc_gallery =  ;
62474: LD_ADDR_OWVAR 33
62478: PUSH
62479: LD_STRING 
62481: ST_TO_ADDR
// animal := CreateHuman ;
62482: LD_ADDR_VAR 0 12
62486: PUSH
62487: CALL_OW 44
62491: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62492: LD_VAR 0 12
62496: PPUSH
62497: LD_VAR 0 8
62501: PPUSH
62502: LD_INT 0
62504: PPUSH
62505: CALL 64506 0 3
// end ;
62509: GO 62463
62511: POP
62512: POP
// if tigers then
62513: LD_VAR 0 2
62517: IFFALSE 62601
// for i = 1 to tigers do
62519: LD_ADDR_VAR 0 11
62523: PUSH
62524: DOUBLE
62525: LD_INT 1
62527: DEC
62528: ST_TO_ADDR
62529: LD_VAR 0 2
62533: PUSH
62534: FOR_TO
62535: IFFALSE 62599
// begin hc_class = class_tiger ;
62537: LD_ADDR_OWVAR 28
62541: PUSH
62542: LD_INT 14
62544: ST_TO_ADDR
// hc_gallery =  ;
62545: LD_ADDR_OWVAR 33
62549: PUSH
62550: LD_STRING 
62552: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62553: LD_ADDR_OWVAR 35
62557: PUSH
62558: LD_INT 7
62560: NEG
62561: PPUSH
62562: LD_INT 7
62564: PPUSH
62565: CALL_OW 12
62569: ST_TO_ADDR
// animal := CreateHuman ;
62570: LD_ADDR_VAR 0 12
62574: PUSH
62575: CALL_OW 44
62579: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62580: LD_VAR 0 12
62584: PPUSH
62585: LD_VAR 0 8
62589: PPUSH
62590: LD_INT 0
62592: PPUSH
62593: CALL 64506 0 3
// end ;
62597: GO 62534
62599: POP
62600: POP
// if apemans then
62601: LD_VAR 0 3
62605: IFFALSE 62728
// for i = 1 to apemans do
62607: LD_ADDR_VAR 0 11
62611: PUSH
62612: DOUBLE
62613: LD_INT 1
62615: DEC
62616: ST_TO_ADDR
62617: LD_VAR 0 3
62621: PUSH
62622: FOR_TO
62623: IFFALSE 62726
// begin hc_class = class_apeman ;
62625: LD_ADDR_OWVAR 28
62629: PUSH
62630: LD_INT 12
62632: ST_TO_ADDR
// hc_gallery =  ;
62633: LD_ADDR_OWVAR 33
62637: PUSH
62638: LD_STRING 
62640: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62641: LD_ADDR_OWVAR 35
62645: PUSH
62646: LD_INT 2
62648: NEG
62649: PPUSH
62650: LD_INT 2
62652: PPUSH
62653: CALL_OW 12
62657: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62658: LD_ADDR_OWVAR 31
62662: PUSH
62663: LD_INT 1
62665: PPUSH
62666: LD_INT 3
62668: PPUSH
62669: CALL_OW 12
62673: PUSH
62674: LD_INT 1
62676: PPUSH
62677: LD_INT 3
62679: PPUSH
62680: CALL_OW 12
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: ST_TO_ADDR
// animal := CreateHuman ;
62697: LD_ADDR_VAR 0 12
62701: PUSH
62702: CALL_OW 44
62706: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62707: LD_VAR 0 12
62711: PPUSH
62712: LD_VAR 0 8
62716: PPUSH
62717: LD_INT 0
62719: PPUSH
62720: CALL 64506 0 3
// end ;
62724: GO 62622
62726: POP
62727: POP
// if enchidnas then
62728: LD_VAR 0 4
62732: IFFALSE 62799
// for i = 1 to enchidnas do
62734: LD_ADDR_VAR 0 11
62738: PUSH
62739: DOUBLE
62740: LD_INT 1
62742: DEC
62743: ST_TO_ADDR
62744: LD_VAR 0 4
62748: PUSH
62749: FOR_TO
62750: IFFALSE 62797
// begin hc_class = 13 ;
62752: LD_ADDR_OWVAR 28
62756: PUSH
62757: LD_INT 13
62759: ST_TO_ADDR
// hc_gallery =  ;
62760: LD_ADDR_OWVAR 33
62764: PUSH
62765: LD_STRING 
62767: ST_TO_ADDR
// animal := CreateHuman ;
62768: LD_ADDR_VAR 0 12
62772: PUSH
62773: CALL_OW 44
62777: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62778: LD_VAR 0 12
62782: PPUSH
62783: LD_VAR 0 8
62787: PPUSH
62788: LD_INT 0
62790: PPUSH
62791: CALL 64506 0 3
// end ;
62795: GO 62749
62797: POP
62798: POP
// if fishes then
62799: LD_VAR 0 7
62803: IFFALSE 62870
// for i = 1 to fishes do
62805: LD_ADDR_VAR 0 11
62809: PUSH
62810: DOUBLE
62811: LD_INT 1
62813: DEC
62814: ST_TO_ADDR
62815: LD_VAR 0 7
62819: PUSH
62820: FOR_TO
62821: IFFALSE 62868
// begin hc_class = 20 ;
62823: LD_ADDR_OWVAR 28
62827: PUSH
62828: LD_INT 20
62830: ST_TO_ADDR
// hc_gallery =  ;
62831: LD_ADDR_OWVAR 33
62835: PUSH
62836: LD_STRING 
62838: ST_TO_ADDR
// animal := CreateHuman ;
62839: LD_ADDR_VAR 0 12
62843: PUSH
62844: CALL_OW 44
62848: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62849: LD_VAR 0 12
62853: PPUSH
62854: LD_VAR 0 9
62858: PPUSH
62859: LD_INT 0
62861: PPUSH
62862: CALL 64506 0 3
// end ;
62866: GO 62820
62868: POP
62869: POP
// end ;
62870: LD_VAR 0 10
62874: RET
// export function WantHeal ( sci , unit ) ; begin
62875: LD_INT 0
62877: PPUSH
// if GetTaskList ( sci ) > 0 then
62878: LD_VAR 0 1
62882: PPUSH
62883: CALL_OW 437
62887: PUSH
62888: LD_INT 0
62890: GREATER
62891: IFFALSE 62961
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62893: LD_VAR 0 1
62897: PPUSH
62898: CALL_OW 437
62902: PUSH
62903: LD_INT 1
62905: ARRAY
62906: PUSH
62907: LD_INT 1
62909: ARRAY
62910: PUSH
62911: LD_STRING l
62913: EQUAL
62914: PUSH
62915: LD_VAR 0 1
62919: PPUSH
62920: CALL_OW 437
62924: PUSH
62925: LD_INT 1
62927: ARRAY
62928: PUSH
62929: LD_INT 4
62931: ARRAY
62932: PUSH
62933: LD_VAR 0 2
62937: EQUAL
62938: AND
62939: IFFALSE 62951
// result := true else
62941: LD_ADDR_VAR 0 3
62945: PUSH
62946: LD_INT 1
62948: ST_TO_ADDR
62949: GO 62959
// result := false ;
62951: LD_ADDR_VAR 0 3
62955: PUSH
62956: LD_INT 0
62958: ST_TO_ADDR
// end else
62959: GO 62969
// result := false ;
62961: LD_ADDR_VAR 0 3
62965: PUSH
62966: LD_INT 0
62968: ST_TO_ADDR
// end ;
62969: LD_VAR 0 3
62973: RET
// export function HealTarget ( sci ) ; begin
62974: LD_INT 0
62976: PPUSH
// if not sci then
62977: LD_VAR 0 1
62981: NOT
62982: IFFALSE 62986
// exit ;
62984: GO 63051
// result := 0 ;
62986: LD_ADDR_VAR 0 2
62990: PUSH
62991: LD_INT 0
62993: ST_TO_ADDR
// if GetTaskList ( sci ) then
62994: LD_VAR 0 1
62998: PPUSH
62999: CALL_OW 437
63003: IFFALSE 63051
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63005: LD_VAR 0 1
63009: PPUSH
63010: CALL_OW 437
63014: PUSH
63015: LD_INT 1
63017: ARRAY
63018: PUSH
63019: LD_INT 1
63021: ARRAY
63022: PUSH
63023: LD_STRING l
63025: EQUAL
63026: IFFALSE 63051
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63028: LD_ADDR_VAR 0 2
63032: PUSH
63033: LD_VAR 0 1
63037: PPUSH
63038: CALL_OW 437
63042: PUSH
63043: LD_INT 1
63045: ARRAY
63046: PUSH
63047: LD_INT 4
63049: ARRAY
63050: ST_TO_ADDR
// end ;
63051: LD_VAR 0 2
63055: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63056: LD_INT 0
63058: PPUSH
63059: PPUSH
63060: PPUSH
63061: PPUSH
// if not base_units then
63062: LD_VAR 0 1
63066: NOT
63067: IFFALSE 63071
// exit ;
63069: GO 63158
// result := false ;
63071: LD_ADDR_VAR 0 2
63075: PUSH
63076: LD_INT 0
63078: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63079: LD_ADDR_VAR 0 5
63083: PUSH
63084: LD_VAR 0 1
63088: PPUSH
63089: LD_INT 21
63091: PUSH
63092: LD_INT 3
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PPUSH
63099: CALL_OW 72
63103: ST_TO_ADDR
// if not tmp then
63104: LD_VAR 0 5
63108: NOT
63109: IFFALSE 63113
// exit ;
63111: GO 63158
// for i in tmp do
63113: LD_ADDR_VAR 0 3
63117: PUSH
63118: LD_VAR 0 5
63122: PUSH
63123: FOR_IN
63124: IFFALSE 63156
// begin result := EnemyInRange ( i , 22 ) ;
63126: LD_ADDR_VAR 0 2
63130: PUSH
63131: LD_VAR 0 3
63135: PPUSH
63136: LD_INT 22
63138: PPUSH
63139: CALL 61394 0 2
63143: ST_TO_ADDR
// if result then
63144: LD_VAR 0 2
63148: IFFALSE 63154
// exit ;
63150: POP
63151: POP
63152: GO 63158
// end ;
63154: GO 63123
63156: POP
63157: POP
// end ;
63158: LD_VAR 0 2
63162: RET
// export function FilterByTag ( units , tag ) ; begin
63163: LD_INT 0
63165: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63166: LD_ADDR_VAR 0 3
63170: PUSH
63171: LD_VAR 0 1
63175: PPUSH
63176: LD_INT 120
63178: PUSH
63179: LD_VAR 0 2
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PPUSH
63188: CALL_OW 72
63192: ST_TO_ADDR
// end ;
63193: LD_VAR 0 3
63197: RET
// export function IsDriver ( un ) ; begin
63198: LD_INT 0
63200: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63201: LD_ADDR_VAR 0 2
63205: PUSH
63206: LD_VAR 0 1
63210: PUSH
63211: LD_INT 55
63213: PUSH
63214: EMPTY
63215: LIST
63216: PPUSH
63217: CALL_OW 69
63221: IN
63222: ST_TO_ADDR
// end ;
63223: LD_VAR 0 2
63227: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63228: LD_INT 0
63230: PPUSH
63231: PPUSH
// list := [ ] ;
63232: LD_ADDR_VAR 0 5
63236: PUSH
63237: EMPTY
63238: ST_TO_ADDR
// case d of 0 :
63239: LD_VAR 0 3
63243: PUSH
63244: LD_INT 0
63246: DOUBLE
63247: EQUAL
63248: IFTRUE 63252
63250: GO 63385
63252: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63253: LD_ADDR_VAR 0 5
63257: PUSH
63258: LD_VAR 0 1
63262: PUSH
63263: LD_INT 4
63265: MINUS
63266: PUSH
63267: LD_VAR 0 2
63271: PUSH
63272: LD_INT 4
63274: MINUS
63275: PUSH
63276: LD_INT 2
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: LIST
63283: PUSH
63284: LD_VAR 0 1
63288: PUSH
63289: LD_INT 3
63291: MINUS
63292: PUSH
63293: LD_VAR 0 2
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: LIST
63305: PUSH
63306: LD_VAR 0 1
63310: PUSH
63311: LD_INT 4
63313: PLUS
63314: PUSH
63315: LD_VAR 0 2
63319: PUSH
63320: LD_INT 4
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: LIST
63327: PUSH
63328: LD_VAR 0 1
63332: PUSH
63333: LD_INT 3
63335: PLUS
63336: PUSH
63337: LD_VAR 0 2
63341: PUSH
63342: LD_INT 3
63344: PLUS
63345: PUSH
63346: LD_INT 5
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: LIST
63353: PUSH
63354: LD_VAR 0 1
63358: PUSH
63359: LD_VAR 0 2
63363: PUSH
63364: LD_INT 4
63366: PLUS
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: LIST
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: ST_TO_ADDR
// end ; 1 :
63383: GO 64083
63385: LD_INT 1
63387: DOUBLE
63388: EQUAL
63389: IFTRUE 63393
63391: GO 63526
63393: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63394: LD_ADDR_VAR 0 5
63398: PUSH
63399: LD_VAR 0 1
63403: PUSH
63404: LD_VAR 0 2
63408: PUSH
63409: LD_INT 4
63411: MINUS
63412: PUSH
63413: LD_INT 3
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: LIST
63420: PUSH
63421: LD_VAR 0 1
63425: PUSH
63426: LD_INT 3
63428: MINUS
63429: PUSH
63430: LD_VAR 0 2
63434: PUSH
63435: LD_INT 3
63437: MINUS
63438: PUSH
63439: LD_INT 2
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: LIST
63446: PUSH
63447: LD_VAR 0 1
63451: PUSH
63452: LD_INT 4
63454: MINUS
63455: PUSH
63456: LD_VAR 0 2
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: LIST
63468: PUSH
63469: LD_VAR 0 1
63473: PUSH
63474: LD_VAR 0 2
63478: PUSH
63479: LD_INT 3
63481: PLUS
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: LIST
63490: PUSH
63491: LD_VAR 0 1
63495: PUSH
63496: LD_INT 4
63498: PLUS
63499: PUSH
63500: LD_VAR 0 2
63504: PUSH
63505: LD_INT 4
63507: PLUS
63508: PUSH
63509: LD_INT 5
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: LIST
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: ST_TO_ADDR
// end ; 2 :
63524: GO 64083
63526: LD_INT 2
63528: DOUBLE
63529: EQUAL
63530: IFTRUE 63534
63532: GO 63663
63534: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63535: LD_ADDR_VAR 0 5
63539: PUSH
63540: LD_VAR 0 1
63544: PUSH
63545: LD_VAR 0 2
63549: PUSH
63550: LD_INT 3
63552: MINUS
63553: PUSH
63554: LD_INT 3
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: LIST
63561: PUSH
63562: LD_VAR 0 1
63566: PUSH
63567: LD_INT 4
63569: PLUS
63570: PUSH
63571: LD_VAR 0 2
63575: PUSH
63576: LD_INT 4
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: LIST
63583: PUSH
63584: LD_VAR 0 1
63588: PUSH
63589: LD_VAR 0 2
63593: PUSH
63594: LD_INT 4
63596: PLUS
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: LIST
63605: PUSH
63606: LD_VAR 0 1
63610: PUSH
63611: LD_INT 3
63613: MINUS
63614: PUSH
63615: LD_VAR 0 2
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: LIST
63627: PUSH
63628: LD_VAR 0 1
63632: PUSH
63633: LD_INT 4
63635: MINUS
63636: PUSH
63637: LD_VAR 0 2
63641: PUSH
63642: LD_INT 4
63644: MINUS
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: LIST
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: ST_TO_ADDR
// end ; 3 :
63661: GO 64083
63663: LD_INT 3
63665: DOUBLE
63666: EQUAL
63667: IFTRUE 63671
63669: GO 63804
63671: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63672: LD_ADDR_VAR 0 5
63676: PUSH
63677: LD_VAR 0 1
63681: PUSH
63682: LD_INT 3
63684: PLUS
63685: PUSH
63686: LD_VAR 0 2
63690: PUSH
63691: LD_INT 4
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: LIST
63698: PUSH
63699: LD_VAR 0 1
63703: PUSH
63704: LD_INT 4
63706: PLUS
63707: PUSH
63708: LD_VAR 0 2
63712: PUSH
63713: LD_INT 4
63715: PLUS
63716: PUSH
63717: LD_INT 5
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: LIST
63724: PUSH
63725: LD_VAR 0 1
63729: PUSH
63730: LD_INT 4
63732: MINUS
63733: PUSH
63734: LD_VAR 0 2
63738: PUSH
63739: LD_INT 1
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: LIST
63746: PUSH
63747: LD_VAR 0 1
63751: PUSH
63752: LD_VAR 0 2
63756: PUSH
63757: LD_INT 4
63759: MINUS
63760: PUSH
63761: LD_INT 3
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: LIST
63768: PUSH
63769: LD_VAR 0 1
63773: PUSH
63774: LD_INT 3
63776: MINUS
63777: PUSH
63778: LD_VAR 0 2
63782: PUSH
63783: LD_INT 3
63785: MINUS
63786: PUSH
63787: LD_INT 2
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: LIST
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: ST_TO_ADDR
// end ; 4 :
63802: GO 64083
63804: LD_INT 4
63806: DOUBLE
63807: EQUAL
63808: IFTRUE 63812
63810: GO 63945
63812: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63813: LD_ADDR_VAR 0 5
63817: PUSH
63818: LD_VAR 0 1
63822: PUSH
63823: LD_VAR 0 2
63827: PUSH
63828: LD_INT 4
63830: PLUS
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: LIST
63839: PUSH
63840: LD_VAR 0 1
63844: PUSH
63845: LD_INT 3
63847: PLUS
63848: PUSH
63849: LD_VAR 0 2
63853: PUSH
63854: LD_INT 3
63856: PLUS
63857: PUSH
63858: LD_INT 5
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: LIST
63865: PUSH
63866: LD_VAR 0 1
63870: PUSH
63871: LD_INT 4
63873: PLUS
63874: PUSH
63875: LD_VAR 0 2
63879: PUSH
63880: LD_INT 4
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: LIST
63887: PUSH
63888: LD_VAR 0 1
63892: PUSH
63893: LD_VAR 0 2
63897: PUSH
63898: LD_INT 3
63900: MINUS
63901: PUSH
63902: LD_INT 3
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: LIST
63909: PUSH
63910: LD_VAR 0 1
63914: PUSH
63915: LD_INT 4
63917: MINUS
63918: PUSH
63919: LD_VAR 0 2
63923: PUSH
63924: LD_INT 4
63926: MINUS
63927: PUSH
63928: LD_INT 2
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: LIST
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: ST_TO_ADDR
// end ; 5 :
63943: GO 64083
63945: LD_INT 5
63947: DOUBLE
63948: EQUAL
63949: IFTRUE 63953
63951: GO 64082
63953: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63954: LD_ADDR_VAR 0 5
63958: PUSH
63959: LD_VAR 0 1
63963: PUSH
63964: LD_INT 4
63966: MINUS
63967: PUSH
63968: LD_VAR 0 2
63972: PUSH
63973: LD_INT 1
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: LIST
63980: PUSH
63981: LD_VAR 0 1
63985: PUSH
63986: LD_VAR 0 2
63990: PUSH
63991: LD_INT 4
63993: MINUS
63994: PUSH
63995: LD_INT 3
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: LIST
64002: PUSH
64003: LD_VAR 0 1
64007: PUSH
64008: LD_INT 4
64010: PLUS
64011: PUSH
64012: LD_VAR 0 2
64016: PUSH
64017: LD_INT 4
64019: PLUS
64020: PUSH
64021: LD_INT 5
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: LIST
64028: PUSH
64029: LD_VAR 0 1
64033: PUSH
64034: LD_INT 3
64036: PLUS
64037: PUSH
64038: LD_VAR 0 2
64042: PUSH
64043: LD_INT 4
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: LIST
64050: PUSH
64051: LD_VAR 0 1
64055: PUSH
64056: LD_VAR 0 2
64060: PUSH
64061: LD_INT 3
64063: PLUS
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: LIST
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: ST_TO_ADDR
// end ; end ;
64080: GO 64083
64082: POP
// result := list ;
64083: LD_ADDR_VAR 0 4
64087: PUSH
64088: LD_VAR 0 5
64092: ST_TO_ADDR
// end ;
64093: LD_VAR 0 4
64097: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64098: LD_INT 0
64100: PPUSH
64101: PPUSH
64102: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64103: LD_VAR 0 1
64107: NOT
64108: PUSH
64109: LD_VAR 0 2
64113: PUSH
64114: LD_INT 1
64116: PUSH
64117: LD_INT 2
64119: PUSH
64120: LD_INT 3
64122: PUSH
64123: LD_INT 4
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: IN
64132: NOT
64133: OR
64134: IFFALSE 64138
// exit ;
64136: GO 64230
// tmp := [ ] ;
64138: LD_ADDR_VAR 0 5
64142: PUSH
64143: EMPTY
64144: ST_TO_ADDR
// for i in units do
64145: LD_ADDR_VAR 0 4
64149: PUSH
64150: LD_VAR 0 1
64154: PUSH
64155: FOR_IN
64156: IFFALSE 64199
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64158: LD_ADDR_VAR 0 5
64162: PUSH
64163: LD_VAR 0 5
64167: PPUSH
64168: LD_VAR 0 5
64172: PUSH
64173: LD_INT 1
64175: PLUS
64176: PPUSH
64177: LD_VAR 0 4
64181: PPUSH
64182: LD_VAR 0 2
64186: PPUSH
64187: CALL_OW 259
64191: PPUSH
64192: CALL_OW 2
64196: ST_TO_ADDR
64197: GO 64155
64199: POP
64200: POP
// if not tmp then
64201: LD_VAR 0 5
64205: NOT
64206: IFFALSE 64210
// exit ;
64208: GO 64230
// result := SortListByListDesc ( units , tmp ) ;
64210: LD_ADDR_VAR 0 3
64214: PUSH
64215: LD_VAR 0 1
64219: PPUSH
64220: LD_VAR 0 5
64224: PPUSH
64225: CALL_OW 77
64229: ST_TO_ADDR
// end ;
64230: LD_VAR 0 3
64234: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64235: LD_INT 0
64237: PPUSH
64238: PPUSH
64239: PPUSH
// result := false ;
64240: LD_ADDR_VAR 0 3
64244: PUSH
64245: LD_INT 0
64247: ST_TO_ADDR
// x := GetX ( building ) ;
64248: LD_ADDR_VAR 0 4
64252: PUSH
64253: LD_VAR 0 2
64257: PPUSH
64258: CALL_OW 250
64262: ST_TO_ADDR
// y := GetY ( building ) ;
64263: LD_ADDR_VAR 0 5
64267: PUSH
64268: LD_VAR 0 2
64272: PPUSH
64273: CALL_OW 251
64277: ST_TO_ADDR
// if not building or not x or not y then
64278: LD_VAR 0 2
64282: NOT
64283: PUSH
64284: LD_VAR 0 4
64288: NOT
64289: OR
64290: PUSH
64291: LD_VAR 0 5
64295: NOT
64296: OR
64297: IFFALSE 64301
// exit ;
64299: GO 64393
// if GetTaskList ( unit ) then
64301: LD_VAR 0 1
64305: PPUSH
64306: CALL_OW 437
64310: IFFALSE 64393
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64312: LD_STRING e
64314: PUSH
64315: LD_VAR 0 1
64319: PPUSH
64320: CALL_OW 437
64324: PUSH
64325: LD_INT 1
64327: ARRAY
64328: PUSH
64329: LD_INT 1
64331: ARRAY
64332: EQUAL
64333: PUSH
64334: LD_VAR 0 4
64338: PUSH
64339: LD_VAR 0 1
64343: PPUSH
64344: CALL_OW 437
64348: PUSH
64349: LD_INT 1
64351: ARRAY
64352: PUSH
64353: LD_INT 2
64355: ARRAY
64356: EQUAL
64357: AND
64358: PUSH
64359: LD_VAR 0 5
64363: PUSH
64364: LD_VAR 0 1
64368: PPUSH
64369: CALL_OW 437
64373: PUSH
64374: LD_INT 1
64376: ARRAY
64377: PUSH
64378: LD_INT 3
64380: ARRAY
64381: EQUAL
64382: AND
64383: IFFALSE 64393
// result := true end ;
64385: LD_ADDR_VAR 0 3
64389: PUSH
64390: LD_INT 1
64392: ST_TO_ADDR
// end ;
64393: LD_VAR 0 3
64397: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64398: LD_INT 0
64400: PPUSH
// result := false ;
64401: LD_ADDR_VAR 0 4
64405: PUSH
64406: LD_INT 0
64408: ST_TO_ADDR
// if GetTaskList ( unit ) then
64409: LD_VAR 0 1
64413: PPUSH
64414: CALL_OW 437
64418: IFFALSE 64501
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64420: LD_STRING M
64422: PUSH
64423: LD_VAR 0 1
64427: PPUSH
64428: CALL_OW 437
64432: PUSH
64433: LD_INT 1
64435: ARRAY
64436: PUSH
64437: LD_INT 1
64439: ARRAY
64440: EQUAL
64441: PUSH
64442: LD_VAR 0 2
64446: PUSH
64447: LD_VAR 0 1
64451: PPUSH
64452: CALL_OW 437
64456: PUSH
64457: LD_INT 1
64459: ARRAY
64460: PUSH
64461: LD_INT 2
64463: ARRAY
64464: EQUAL
64465: AND
64466: PUSH
64467: LD_VAR 0 3
64471: PUSH
64472: LD_VAR 0 1
64476: PPUSH
64477: CALL_OW 437
64481: PUSH
64482: LD_INT 1
64484: ARRAY
64485: PUSH
64486: LD_INT 3
64488: ARRAY
64489: EQUAL
64490: AND
64491: IFFALSE 64501
// result := true ;
64493: LD_ADDR_VAR 0 4
64497: PUSH
64498: LD_INT 1
64500: ST_TO_ADDR
// end ; end ;
64501: LD_VAR 0 4
64505: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64506: LD_INT 0
64508: PPUSH
64509: PPUSH
64510: PPUSH
64511: PPUSH
// if not unit or not area then
64512: LD_VAR 0 1
64516: NOT
64517: PUSH
64518: LD_VAR 0 2
64522: NOT
64523: OR
64524: IFFALSE 64528
// exit ;
64526: GO 64692
// tmp := AreaToList ( area , i ) ;
64528: LD_ADDR_VAR 0 6
64532: PUSH
64533: LD_VAR 0 2
64537: PPUSH
64538: LD_VAR 0 5
64542: PPUSH
64543: CALL_OW 517
64547: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64548: LD_ADDR_VAR 0 5
64552: PUSH
64553: DOUBLE
64554: LD_INT 1
64556: DEC
64557: ST_TO_ADDR
64558: LD_VAR 0 6
64562: PUSH
64563: LD_INT 1
64565: ARRAY
64566: PUSH
64567: FOR_TO
64568: IFFALSE 64690
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64570: LD_ADDR_VAR 0 7
64574: PUSH
64575: LD_VAR 0 6
64579: PUSH
64580: LD_INT 1
64582: ARRAY
64583: PUSH
64584: LD_VAR 0 5
64588: ARRAY
64589: PUSH
64590: LD_VAR 0 6
64594: PUSH
64595: LD_INT 2
64597: ARRAY
64598: PUSH
64599: LD_VAR 0 5
64603: ARRAY
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64609: LD_VAR 0 7
64613: PUSH
64614: LD_INT 1
64616: ARRAY
64617: PPUSH
64618: LD_VAR 0 7
64622: PUSH
64623: LD_INT 2
64625: ARRAY
64626: PPUSH
64627: CALL_OW 428
64631: PUSH
64632: LD_INT 0
64634: EQUAL
64635: IFFALSE 64688
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64637: LD_VAR 0 1
64641: PPUSH
64642: LD_VAR 0 7
64646: PUSH
64647: LD_INT 1
64649: ARRAY
64650: PPUSH
64651: LD_VAR 0 7
64655: PUSH
64656: LD_INT 2
64658: ARRAY
64659: PPUSH
64660: LD_VAR 0 3
64664: PPUSH
64665: CALL_OW 48
// result := IsPlaced ( unit ) ;
64669: LD_ADDR_VAR 0 4
64673: PUSH
64674: LD_VAR 0 1
64678: PPUSH
64679: CALL_OW 305
64683: ST_TO_ADDR
// exit ;
64684: POP
64685: POP
64686: GO 64692
// end ; end ;
64688: GO 64567
64690: POP
64691: POP
// end ;
64692: LD_VAR 0 4
64696: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64697: LD_INT 0
64699: PPUSH
64700: PPUSH
64701: PPUSH
// if not side or side > 8 then
64702: LD_VAR 0 1
64706: NOT
64707: PUSH
64708: LD_VAR 0 1
64712: PUSH
64713: LD_INT 8
64715: GREATER
64716: OR
64717: IFFALSE 64721
// exit ;
64719: GO 64908
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64721: LD_ADDR_VAR 0 4
64725: PUSH
64726: LD_INT 22
64728: PUSH
64729: LD_VAR 0 1
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 21
64740: PUSH
64741: LD_INT 3
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PPUSH
64752: CALL_OW 69
64756: ST_TO_ADDR
// if not tmp then
64757: LD_VAR 0 4
64761: NOT
64762: IFFALSE 64766
// exit ;
64764: GO 64908
// enable_addtolog := true ;
64766: LD_ADDR_OWVAR 81
64770: PUSH
64771: LD_INT 1
64773: ST_TO_ADDR
// AddToLog ( [ ) ;
64774: LD_STRING [
64776: PPUSH
64777: CALL_OW 561
// for i in tmp do
64781: LD_ADDR_VAR 0 3
64785: PUSH
64786: LD_VAR 0 4
64790: PUSH
64791: FOR_IN
64792: IFFALSE 64899
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64794: LD_STRING [
64796: PUSH
64797: LD_VAR 0 3
64801: PPUSH
64802: CALL_OW 266
64806: STR
64807: PUSH
64808: LD_STRING , 
64810: STR
64811: PUSH
64812: LD_VAR 0 3
64816: PPUSH
64817: CALL_OW 250
64821: STR
64822: PUSH
64823: LD_STRING , 
64825: STR
64826: PUSH
64827: LD_VAR 0 3
64831: PPUSH
64832: CALL_OW 251
64836: STR
64837: PUSH
64838: LD_STRING , 
64840: STR
64841: PUSH
64842: LD_VAR 0 3
64846: PPUSH
64847: CALL_OW 254
64851: STR
64852: PUSH
64853: LD_STRING , 
64855: STR
64856: PUSH
64857: LD_VAR 0 3
64861: PPUSH
64862: LD_INT 1
64864: PPUSH
64865: CALL_OW 268
64869: STR
64870: PUSH
64871: LD_STRING , 
64873: STR
64874: PUSH
64875: LD_VAR 0 3
64879: PPUSH
64880: LD_INT 2
64882: PPUSH
64883: CALL_OW 268
64887: STR
64888: PUSH
64889: LD_STRING ],
64891: STR
64892: PPUSH
64893: CALL_OW 561
// end ;
64897: GO 64791
64899: POP
64900: POP
// AddToLog ( ]; ) ;
64901: LD_STRING ];
64903: PPUSH
64904: CALL_OW 561
// end ;
64908: LD_VAR 0 2
64912: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64913: LD_INT 0
64915: PPUSH
64916: PPUSH
64917: PPUSH
64918: PPUSH
64919: PPUSH
// if not area or not rate or not max then
64920: LD_VAR 0 1
64924: NOT
64925: PUSH
64926: LD_VAR 0 2
64930: NOT
64931: OR
64932: PUSH
64933: LD_VAR 0 4
64937: NOT
64938: OR
64939: IFFALSE 64943
// exit ;
64941: GO 65132
// while 1 do
64943: LD_INT 1
64945: IFFALSE 65132
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64947: LD_ADDR_VAR 0 9
64951: PUSH
64952: LD_VAR 0 1
64956: PPUSH
64957: LD_INT 1
64959: PPUSH
64960: CALL_OW 287
64964: PUSH
64965: LD_INT 10
64967: MUL
64968: ST_TO_ADDR
// r := rate / 10 ;
64969: LD_ADDR_VAR 0 7
64973: PUSH
64974: LD_VAR 0 2
64978: PUSH
64979: LD_INT 10
64981: DIVREAL
64982: ST_TO_ADDR
// time := 1 1$00 ;
64983: LD_ADDR_VAR 0 8
64987: PUSH
64988: LD_INT 2100
64990: ST_TO_ADDR
// if amount < min then
64991: LD_VAR 0 9
64995: PUSH
64996: LD_VAR 0 3
65000: LESS
65001: IFFALSE 65019
// r := r * 2 else
65003: LD_ADDR_VAR 0 7
65007: PUSH
65008: LD_VAR 0 7
65012: PUSH
65013: LD_INT 2
65015: MUL
65016: ST_TO_ADDR
65017: GO 65045
// if amount > max then
65019: LD_VAR 0 9
65023: PUSH
65024: LD_VAR 0 4
65028: GREATER
65029: IFFALSE 65045
// r := r / 2 ;
65031: LD_ADDR_VAR 0 7
65035: PUSH
65036: LD_VAR 0 7
65040: PUSH
65041: LD_INT 2
65043: DIVREAL
65044: ST_TO_ADDR
// time := time / r ;
65045: LD_ADDR_VAR 0 8
65049: PUSH
65050: LD_VAR 0 8
65054: PUSH
65055: LD_VAR 0 7
65059: DIVREAL
65060: ST_TO_ADDR
// if time < 0 then
65061: LD_VAR 0 8
65065: PUSH
65066: LD_INT 0
65068: LESS
65069: IFFALSE 65086
// time := time * - 1 ;
65071: LD_ADDR_VAR 0 8
65075: PUSH
65076: LD_VAR 0 8
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: MUL
65085: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65086: LD_VAR 0 8
65090: PUSH
65091: LD_INT 35
65093: PPUSH
65094: LD_INT 875
65096: PPUSH
65097: CALL_OW 12
65101: PLUS
65102: PPUSH
65103: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65107: LD_INT 1
65109: PPUSH
65110: LD_INT 5
65112: PPUSH
65113: CALL_OW 12
65117: PPUSH
65118: LD_VAR 0 1
65122: PPUSH
65123: LD_INT 1
65125: PPUSH
65126: CALL_OW 55
// end ;
65130: GO 64943
// end ;
65132: LD_VAR 0 5
65136: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65137: LD_INT 0
65139: PPUSH
65140: PPUSH
65141: PPUSH
65142: PPUSH
65143: PPUSH
65144: PPUSH
65145: PPUSH
65146: PPUSH
// if not turrets or not factories then
65147: LD_VAR 0 1
65151: NOT
65152: PUSH
65153: LD_VAR 0 2
65157: NOT
65158: OR
65159: IFFALSE 65163
// exit ;
65161: GO 65470
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65163: LD_ADDR_VAR 0 10
65167: PUSH
65168: LD_INT 5
65170: PUSH
65171: LD_INT 6
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 2
65180: PUSH
65181: LD_INT 4
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 3
65190: PUSH
65191: LD_INT 5
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 24
65205: PUSH
65206: LD_INT 25
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 23
65215: PUSH
65216: LD_INT 27
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 42
65229: PUSH
65230: LD_INT 43
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 44
65239: PUSH
65240: LD_INT 46
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 45
65249: PUSH
65250: LD_INT 47
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: LIST
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: LIST
65266: ST_TO_ADDR
// result := [ ] ;
65267: LD_ADDR_VAR 0 3
65271: PUSH
65272: EMPTY
65273: ST_TO_ADDR
// for i in turrets do
65274: LD_ADDR_VAR 0 4
65278: PUSH
65279: LD_VAR 0 1
65283: PUSH
65284: FOR_IN
65285: IFFALSE 65468
// begin nat := GetNation ( i ) ;
65287: LD_ADDR_VAR 0 7
65291: PUSH
65292: LD_VAR 0 4
65296: PPUSH
65297: CALL_OW 248
65301: ST_TO_ADDR
// weapon := 0 ;
65302: LD_ADDR_VAR 0 8
65306: PUSH
65307: LD_INT 0
65309: ST_TO_ADDR
// if not nat then
65310: LD_VAR 0 7
65314: NOT
65315: IFFALSE 65319
// continue ;
65317: GO 65284
// for j in list [ nat ] do
65319: LD_ADDR_VAR 0 5
65323: PUSH
65324: LD_VAR 0 10
65328: PUSH
65329: LD_VAR 0 7
65333: ARRAY
65334: PUSH
65335: FOR_IN
65336: IFFALSE 65377
// if GetBWeapon ( i ) = j [ 1 ] then
65338: LD_VAR 0 4
65342: PPUSH
65343: CALL_OW 269
65347: PUSH
65348: LD_VAR 0 5
65352: PUSH
65353: LD_INT 1
65355: ARRAY
65356: EQUAL
65357: IFFALSE 65375
// begin weapon := j [ 2 ] ;
65359: LD_ADDR_VAR 0 8
65363: PUSH
65364: LD_VAR 0 5
65368: PUSH
65369: LD_INT 2
65371: ARRAY
65372: ST_TO_ADDR
// break ;
65373: GO 65377
// end ;
65375: GO 65335
65377: POP
65378: POP
// if not weapon then
65379: LD_VAR 0 8
65383: NOT
65384: IFFALSE 65388
// continue ;
65386: GO 65284
// for k in factories do
65388: LD_ADDR_VAR 0 6
65392: PUSH
65393: LD_VAR 0 2
65397: PUSH
65398: FOR_IN
65399: IFFALSE 65464
// begin weapons := AvailableWeaponList ( k ) ;
65401: LD_ADDR_VAR 0 9
65405: PUSH
65406: LD_VAR 0 6
65410: PPUSH
65411: CALL_OW 478
65415: ST_TO_ADDR
// if not weapons then
65416: LD_VAR 0 9
65420: NOT
65421: IFFALSE 65425
// continue ;
65423: GO 65398
// if weapon in weapons then
65425: LD_VAR 0 8
65429: PUSH
65430: LD_VAR 0 9
65434: IN
65435: IFFALSE 65462
// begin result := [ i , weapon ] ;
65437: LD_ADDR_VAR 0 3
65441: PUSH
65442: LD_VAR 0 4
65446: PUSH
65447: LD_VAR 0 8
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: ST_TO_ADDR
// exit ;
65456: POP
65457: POP
65458: POP
65459: POP
65460: GO 65470
// end ; end ;
65462: GO 65398
65464: POP
65465: POP
// end ;
65466: GO 65284
65468: POP
65469: POP
// end ;
65470: LD_VAR 0 3
65474: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65475: LD_INT 0
65477: PPUSH
// if not side or side > 8 then
65478: LD_VAR 0 3
65482: NOT
65483: PUSH
65484: LD_VAR 0 3
65488: PUSH
65489: LD_INT 8
65491: GREATER
65492: OR
65493: IFFALSE 65497
// exit ;
65495: GO 65556
// if not range then
65497: LD_VAR 0 4
65501: NOT
65502: IFFALSE 65513
// range := - 12 ;
65504: LD_ADDR_VAR 0 4
65508: PUSH
65509: LD_INT 12
65511: NEG
65512: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65513: LD_VAR 0 1
65517: PPUSH
65518: LD_VAR 0 2
65522: PPUSH
65523: LD_VAR 0 3
65527: PPUSH
65528: LD_VAR 0 4
65532: PPUSH
65533: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65537: LD_VAR 0 1
65541: PPUSH
65542: LD_VAR 0 2
65546: PPUSH
65547: LD_VAR 0 3
65551: PPUSH
65552: CALL_OW 331
// end ;
65556: LD_VAR 0 5
65560: RET
// export function Video ( mode ) ; begin
65561: LD_INT 0
65563: PPUSH
// ingame_video = mode ;
65564: LD_ADDR_OWVAR 52
65568: PUSH
65569: LD_VAR 0 1
65573: ST_TO_ADDR
// interface_hidden = mode ;
65574: LD_ADDR_OWVAR 54
65578: PUSH
65579: LD_VAR 0 1
65583: ST_TO_ADDR
// end ;
65584: LD_VAR 0 2
65588: RET
// export function Join ( array , element ) ; begin
65589: LD_INT 0
65591: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65592: LD_ADDR_VAR 0 3
65596: PUSH
65597: LD_VAR 0 1
65601: PPUSH
65602: LD_VAR 0 1
65606: PUSH
65607: LD_INT 1
65609: PLUS
65610: PPUSH
65611: LD_VAR 0 2
65615: PPUSH
65616: CALL_OW 1
65620: ST_TO_ADDR
// end ;
65621: LD_VAR 0 3
65625: RET
// export function JoinUnion ( array , element ) ; begin
65626: LD_INT 0
65628: PPUSH
// result := array union element ;
65629: LD_ADDR_VAR 0 3
65633: PUSH
65634: LD_VAR 0 1
65638: PUSH
65639: LD_VAR 0 2
65643: UNION
65644: ST_TO_ADDR
// end ;
65645: LD_VAR 0 3
65649: RET
// export function GetBehemoths ( side ) ; begin
65650: LD_INT 0
65652: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65653: LD_ADDR_VAR 0 2
65657: PUSH
65658: LD_INT 22
65660: PUSH
65661: LD_VAR 0 1
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 31
65672: PUSH
65673: LD_INT 25
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PPUSH
65684: CALL_OW 69
65688: ST_TO_ADDR
// end ;
65689: LD_VAR 0 2
65693: RET
// export function Shuffle ( array ) ; var i , index ; begin
65694: LD_INT 0
65696: PPUSH
65697: PPUSH
65698: PPUSH
// result := [ ] ;
65699: LD_ADDR_VAR 0 2
65703: PUSH
65704: EMPTY
65705: ST_TO_ADDR
// if not array then
65706: LD_VAR 0 1
65710: NOT
65711: IFFALSE 65715
// exit ;
65713: GO 65814
// Randomize ;
65715: CALL_OW 10
// for i = array downto 1 do
65719: LD_ADDR_VAR 0 3
65723: PUSH
65724: DOUBLE
65725: LD_VAR 0 1
65729: INC
65730: ST_TO_ADDR
65731: LD_INT 1
65733: PUSH
65734: FOR_DOWNTO
65735: IFFALSE 65812
// begin index := rand ( 1 , array ) ;
65737: LD_ADDR_VAR 0 4
65741: PUSH
65742: LD_INT 1
65744: PPUSH
65745: LD_VAR 0 1
65749: PPUSH
65750: CALL_OW 12
65754: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65755: LD_ADDR_VAR 0 2
65759: PUSH
65760: LD_VAR 0 2
65764: PPUSH
65765: LD_VAR 0 2
65769: PUSH
65770: LD_INT 1
65772: PLUS
65773: PPUSH
65774: LD_VAR 0 1
65778: PUSH
65779: LD_VAR 0 4
65783: ARRAY
65784: PPUSH
65785: CALL_OW 2
65789: ST_TO_ADDR
// array := Delete ( array , index ) ;
65790: LD_ADDR_VAR 0 1
65794: PUSH
65795: LD_VAR 0 1
65799: PPUSH
65800: LD_VAR 0 4
65804: PPUSH
65805: CALL_OW 3
65809: ST_TO_ADDR
// end ;
65810: GO 65734
65812: POP
65813: POP
// end ;
65814: LD_VAR 0 2
65818: RET
// export function GetBaseMaterials ( base ) ; begin
65819: LD_INT 0
65821: PPUSH
// result := [ 0 , 0 , 0 ] ;
65822: LD_ADDR_VAR 0 2
65826: PUSH
65827: LD_INT 0
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: LIST
65840: ST_TO_ADDR
// if not base then
65841: LD_VAR 0 1
65845: NOT
65846: IFFALSE 65850
// exit ;
65848: GO 65899
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65850: LD_ADDR_VAR 0 2
65854: PUSH
65855: LD_VAR 0 1
65859: PPUSH
65860: LD_INT 1
65862: PPUSH
65863: CALL_OW 275
65867: PUSH
65868: LD_VAR 0 1
65872: PPUSH
65873: LD_INT 2
65875: PPUSH
65876: CALL_OW 275
65880: PUSH
65881: LD_VAR 0 1
65885: PPUSH
65886: LD_INT 3
65888: PPUSH
65889: CALL_OW 275
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: LIST
65898: ST_TO_ADDR
// end ;
65899: LD_VAR 0 2
65903: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65904: LD_INT 0
65906: PPUSH
65907: PPUSH
// result := array ;
65908: LD_ADDR_VAR 0 3
65912: PUSH
65913: LD_VAR 0 1
65917: ST_TO_ADDR
// if size > 0 then
65918: LD_VAR 0 2
65922: PUSH
65923: LD_INT 0
65925: GREATER
65926: IFFALSE 65972
// for i := array downto size do
65928: LD_ADDR_VAR 0 4
65932: PUSH
65933: DOUBLE
65934: LD_VAR 0 1
65938: INC
65939: ST_TO_ADDR
65940: LD_VAR 0 2
65944: PUSH
65945: FOR_DOWNTO
65946: IFFALSE 65970
// result := Delete ( result , result ) ;
65948: LD_ADDR_VAR 0 3
65952: PUSH
65953: LD_VAR 0 3
65957: PPUSH
65958: LD_VAR 0 3
65962: PPUSH
65963: CALL_OW 3
65967: ST_TO_ADDR
65968: GO 65945
65970: POP
65971: POP
// end ;
65972: LD_VAR 0 3
65976: RET
// export function ComExit ( unit ) ; var tmp ; begin
65977: LD_INT 0
65979: PPUSH
65980: PPUSH
// if not IsInUnit ( unit ) then
65981: LD_VAR 0 1
65985: PPUSH
65986: CALL_OW 310
65990: NOT
65991: IFFALSE 65995
// exit ;
65993: GO 66055
// tmp := IsInUnit ( unit ) ;
65995: LD_ADDR_VAR 0 3
65999: PUSH
66000: LD_VAR 0 1
66004: PPUSH
66005: CALL_OW 310
66009: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66010: LD_VAR 0 3
66014: PPUSH
66015: CALL_OW 247
66019: PUSH
66020: LD_INT 2
66022: EQUAL
66023: IFFALSE 66036
// ComExitVehicle ( unit ) else
66025: LD_VAR 0 1
66029: PPUSH
66030: CALL_OW 121
66034: GO 66045
// ComExitBuilding ( unit ) ;
66036: LD_VAR 0 1
66040: PPUSH
66041: CALL_OW 122
// result := tmp ;
66045: LD_ADDR_VAR 0 2
66049: PUSH
66050: LD_VAR 0 3
66054: ST_TO_ADDR
// end ;
66055: LD_VAR 0 2
66059: RET
// export function ComExitAll ( units ) ; var i ; begin
66060: LD_INT 0
66062: PPUSH
66063: PPUSH
// if not units then
66064: LD_VAR 0 1
66068: NOT
66069: IFFALSE 66073
// exit ;
66071: GO 66099
// for i in units do
66073: LD_ADDR_VAR 0 3
66077: PUSH
66078: LD_VAR 0 1
66082: PUSH
66083: FOR_IN
66084: IFFALSE 66097
// ComExit ( i ) ;
66086: LD_VAR 0 3
66090: PPUSH
66091: CALL 65977 0 1
66095: GO 66083
66097: POP
66098: POP
// end ;
66099: LD_VAR 0 2
66103: RET
// export function ResetHc ; begin
66104: LD_INT 0
66106: PPUSH
// InitHc ;
66107: CALL_OW 19
// hc_importance := 0 ;
66111: LD_ADDR_OWVAR 32
66115: PUSH
66116: LD_INT 0
66118: ST_TO_ADDR
// end ;
66119: LD_VAR 0 1
66123: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66124: LD_INT 0
66126: PPUSH
66127: PPUSH
66128: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66129: LD_ADDR_VAR 0 6
66133: PUSH
66134: LD_VAR 0 1
66138: PUSH
66139: LD_VAR 0 3
66143: PLUS
66144: PUSH
66145: LD_INT 2
66147: DIV
66148: ST_TO_ADDR
// if _x < 0 then
66149: LD_VAR 0 6
66153: PUSH
66154: LD_INT 0
66156: LESS
66157: IFFALSE 66174
// _x := _x * - 1 ;
66159: LD_ADDR_VAR 0 6
66163: PUSH
66164: LD_VAR 0 6
66168: PUSH
66169: LD_INT 1
66171: NEG
66172: MUL
66173: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66174: LD_ADDR_VAR 0 7
66178: PUSH
66179: LD_VAR 0 2
66183: PUSH
66184: LD_VAR 0 4
66188: PLUS
66189: PUSH
66190: LD_INT 2
66192: DIV
66193: ST_TO_ADDR
// if _y < 0 then
66194: LD_VAR 0 7
66198: PUSH
66199: LD_INT 0
66201: LESS
66202: IFFALSE 66219
// _y := _y * - 1 ;
66204: LD_ADDR_VAR 0 7
66208: PUSH
66209: LD_VAR 0 7
66213: PUSH
66214: LD_INT 1
66216: NEG
66217: MUL
66218: ST_TO_ADDR
// result := [ _x , _y ] ;
66219: LD_ADDR_VAR 0 5
66223: PUSH
66224: LD_VAR 0 6
66228: PUSH
66229: LD_VAR 0 7
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: ST_TO_ADDR
// end ;
66238: LD_VAR 0 5
66242: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66243: LD_INT 0
66245: PPUSH
66246: PPUSH
66247: PPUSH
66248: PPUSH
// task := GetTaskList ( unit ) ;
66249: LD_ADDR_VAR 0 7
66253: PUSH
66254: LD_VAR 0 1
66258: PPUSH
66259: CALL_OW 437
66263: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66264: LD_VAR 0 7
66268: NOT
66269: PUSH
66270: LD_VAR 0 1
66274: PPUSH
66275: LD_VAR 0 2
66279: PPUSH
66280: CALL_OW 308
66284: NOT
66285: AND
66286: IFFALSE 66290
// exit ;
66288: GO 66408
// if IsInArea ( unit , area ) then
66290: LD_VAR 0 1
66294: PPUSH
66295: LD_VAR 0 2
66299: PPUSH
66300: CALL_OW 308
66304: IFFALSE 66322
// begin ComMoveToArea ( unit , goAway ) ;
66306: LD_VAR 0 1
66310: PPUSH
66311: LD_VAR 0 3
66315: PPUSH
66316: CALL_OW 113
// exit ;
66320: GO 66408
// end ; if task [ 1 ] [ 1 ] <> M then
66322: LD_VAR 0 7
66326: PUSH
66327: LD_INT 1
66329: ARRAY
66330: PUSH
66331: LD_INT 1
66333: ARRAY
66334: PUSH
66335: LD_STRING M
66337: NONEQUAL
66338: IFFALSE 66342
// exit ;
66340: GO 66408
// x := task [ 1 ] [ 2 ] ;
66342: LD_ADDR_VAR 0 5
66346: PUSH
66347: LD_VAR 0 7
66351: PUSH
66352: LD_INT 1
66354: ARRAY
66355: PUSH
66356: LD_INT 2
66358: ARRAY
66359: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66360: LD_ADDR_VAR 0 6
66364: PUSH
66365: LD_VAR 0 7
66369: PUSH
66370: LD_INT 1
66372: ARRAY
66373: PUSH
66374: LD_INT 3
66376: ARRAY
66377: ST_TO_ADDR
// if InArea ( x , y , area ) then
66378: LD_VAR 0 5
66382: PPUSH
66383: LD_VAR 0 6
66387: PPUSH
66388: LD_VAR 0 2
66392: PPUSH
66393: CALL_OW 309
66397: IFFALSE 66408
// ComStop ( unit ) ;
66399: LD_VAR 0 1
66403: PPUSH
66404: CALL_OW 141
// end ;
66408: LD_VAR 0 4
66412: RET
// export function Abs ( value ) ; begin
66413: LD_INT 0
66415: PPUSH
// result := value ;
66416: LD_ADDR_VAR 0 2
66420: PUSH
66421: LD_VAR 0 1
66425: ST_TO_ADDR
// if value < 0 then
66426: LD_VAR 0 1
66430: PUSH
66431: LD_INT 0
66433: LESS
66434: IFFALSE 66451
// result := value * - 1 ;
66436: LD_ADDR_VAR 0 2
66440: PUSH
66441: LD_VAR 0 1
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: MUL
66450: ST_TO_ADDR
// end ;
66451: LD_VAR 0 2
66455: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66456: LD_INT 0
66458: PPUSH
66459: PPUSH
66460: PPUSH
66461: PPUSH
66462: PPUSH
66463: PPUSH
66464: PPUSH
66465: PPUSH
// if not unit or not building then
66466: LD_VAR 0 1
66470: NOT
66471: PUSH
66472: LD_VAR 0 2
66476: NOT
66477: OR
66478: IFFALSE 66482
// exit ;
66480: GO 66708
// x := GetX ( building ) ;
66482: LD_ADDR_VAR 0 4
66486: PUSH
66487: LD_VAR 0 2
66491: PPUSH
66492: CALL_OW 250
66496: ST_TO_ADDR
// y := GetY ( building ) ;
66497: LD_ADDR_VAR 0 6
66501: PUSH
66502: LD_VAR 0 2
66506: PPUSH
66507: CALL_OW 251
66511: ST_TO_ADDR
// d := GetDir ( building ) ;
66512: LD_ADDR_VAR 0 8
66516: PUSH
66517: LD_VAR 0 2
66521: PPUSH
66522: CALL_OW 254
66526: ST_TO_ADDR
// r := 4 ;
66527: LD_ADDR_VAR 0 9
66531: PUSH
66532: LD_INT 4
66534: ST_TO_ADDR
// for i := 1 to 5 do
66535: LD_ADDR_VAR 0 10
66539: PUSH
66540: DOUBLE
66541: LD_INT 1
66543: DEC
66544: ST_TO_ADDR
66545: LD_INT 5
66547: PUSH
66548: FOR_TO
66549: IFFALSE 66706
// begin _x := ShiftX ( x , d , r + i ) ;
66551: LD_ADDR_VAR 0 5
66555: PUSH
66556: LD_VAR 0 4
66560: PPUSH
66561: LD_VAR 0 8
66565: PPUSH
66566: LD_VAR 0 9
66570: PUSH
66571: LD_VAR 0 10
66575: PLUS
66576: PPUSH
66577: CALL_OW 272
66581: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66582: LD_ADDR_VAR 0 7
66586: PUSH
66587: LD_VAR 0 6
66591: PPUSH
66592: LD_VAR 0 8
66596: PPUSH
66597: LD_VAR 0 9
66601: PUSH
66602: LD_VAR 0 10
66606: PLUS
66607: PPUSH
66608: CALL_OW 273
66612: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66613: LD_VAR 0 5
66617: PPUSH
66618: LD_VAR 0 7
66622: PPUSH
66623: CALL_OW 488
66627: PUSH
66628: LD_VAR 0 5
66632: PPUSH
66633: LD_VAR 0 7
66637: PPUSH
66638: CALL_OW 428
66642: PPUSH
66643: CALL_OW 247
66647: PUSH
66648: LD_INT 3
66650: PUSH
66651: LD_INT 2
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: IN
66658: NOT
66659: AND
66660: IFFALSE 66704
// begin ComMoveXY ( unit , _x , _y ) ;
66662: LD_VAR 0 1
66666: PPUSH
66667: LD_VAR 0 5
66671: PPUSH
66672: LD_VAR 0 7
66676: PPUSH
66677: CALL_OW 111
// result := [ _x , _y ] ;
66681: LD_ADDR_VAR 0 3
66685: PUSH
66686: LD_VAR 0 5
66690: PUSH
66691: LD_VAR 0 7
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: ST_TO_ADDR
// exit ;
66700: POP
66701: POP
66702: GO 66708
// end ; end ;
66704: GO 66548
66706: POP
66707: POP
// end ;
66708: LD_VAR 0 3
66712: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66713: LD_INT 0
66715: PPUSH
66716: PPUSH
66717: PPUSH
// result := 0 ;
66718: LD_ADDR_VAR 0 3
66722: PUSH
66723: LD_INT 0
66725: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66726: LD_VAR 0 1
66730: PUSH
66731: LD_INT 0
66733: LESS
66734: PUSH
66735: LD_VAR 0 1
66739: PUSH
66740: LD_INT 8
66742: GREATER
66743: OR
66744: PUSH
66745: LD_VAR 0 2
66749: PUSH
66750: LD_INT 0
66752: LESS
66753: OR
66754: PUSH
66755: LD_VAR 0 2
66759: PUSH
66760: LD_INT 8
66762: GREATER
66763: OR
66764: IFFALSE 66768
// exit ;
66766: GO 66843
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66768: LD_ADDR_VAR 0 4
66772: PUSH
66773: LD_INT 22
66775: PUSH
66776: LD_VAR 0 2
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PPUSH
66785: CALL_OW 69
66789: PUSH
66790: FOR_IN
66791: IFFALSE 66841
// begin un := UnitShoot ( i ) ;
66793: LD_ADDR_VAR 0 5
66797: PUSH
66798: LD_VAR 0 4
66802: PPUSH
66803: CALL_OW 504
66807: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66808: LD_VAR 0 5
66812: PPUSH
66813: CALL_OW 255
66817: PUSH
66818: LD_VAR 0 1
66822: EQUAL
66823: IFFALSE 66839
// begin result := un ;
66825: LD_ADDR_VAR 0 3
66829: PUSH
66830: LD_VAR 0 5
66834: ST_TO_ADDR
// exit ;
66835: POP
66836: POP
66837: GO 66843
// end ; end ;
66839: GO 66790
66841: POP
66842: POP
// end ;
66843: LD_VAR 0 3
66847: RET
// export function GetCargoBay ( units ) ; begin
66848: LD_INT 0
66850: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66851: LD_ADDR_VAR 0 2
66855: PUSH
66856: LD_VAR 0 1
66860: PPUSH
66861: LD_INT 2
66863: PUSH
66864: LD_INT 34
66866: PUSH
66867: LD_INT 12
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 34
66876: PUSH
66877: LD_INT 51
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 34
66886: PUSH
66887: LD_INT 32
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 34
66896: PUSH
66897: LD_EXP 113
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: PPUSH
66913: CALL_OW 72
66917: ST_TO_ADDR
// end ;
66918: LD_VAR 0 2
66922: RET
// export function Negate ( value ) ; begin
66923: LD_INT 0
66925: PPUSH
// result := not value ;
66926: LD_ADDR_VAR 0 2
66930: PUSH
66931: LD_VAR 0 1
66935: NOT
66936: ST_TO_ADDR
// end ;
66937: LD_VAR 0 2
66941: RET
// export function Inc ( value ) ; begin
66942: LD_INT 0
66944: PPUSH
// result := value + 1 ;
66945: LD_ADDR_VAR 0 2
66949: PUSH
66950: LD_VAR 0 1
66954: PUSH
66955: LD_INT 1
66957: PLUS
66958: ST_TO_ADDR
// end ;
66959: LD_VAR 0 2
66963: RET
// export function Dec ( value ) ; begin
66964: LD_INT 0
66966: PPUSH
// result := value - 1 ;
66967: LD_ADDR_VAR 0 2
66971: PUSH
66972: LD_VAR 0 1
66976: PUSH
66977: LD_INT 1
66979: MINUS
66980: ST_TO_ADDR
// end ;
66981: LD_VAR 0 2
66985: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66986: LD_INT 0
66988: PPUSH
66989: PPUSH
66990: PPUSH
66991: PPUSH
66992: PPUSH
66993: PPUSH
66994: PPUSH
66995: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66996: LD_VAR 0 1
67000: PPUSH
67001: LD_VAR 0 2
67005: PPUSH
67006: CALL_OW 488
67010: NOT
67011: PUSH
67012: LD_VAR 0 3
67016: PPUSH
67017: LD_VAR 0 4
67021: PPUSH
67022: CALL_OW 488
67026: NOT
67027: OR
67028: IFFALSE 67041
// begin result := - 1 ;
67030: LD_ADDR_VAR 0 5
67034: PUSH
67035: LD_INT 1
67037: NEG
67038: ST_TO_ADDR
// exit ;
67039: GO 67276
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67041: LD_ADDR_VAR 0 12
67045: PUSH
67046: LD_VAR 0 1
67050: PPUSH
67051: LD_VAR 0 2
67055: PPUSH
67056: LD_VAR 0 3
67060: PPUSH
67061: LD_VAR 0 4
67065: PPUSH
67066: CALL 66124 0 4
67070: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67071: LD_ADDR_VAR 0 11
67075: PUSH
67076: LD_VAR 0 1
67080: PPUSH
67081: LD_VAR 0 2
67085: PPUSH
67086: LD_VAR 0 12
67090: PUSH
67091: LD_INT 1
67093: ARRAY
67094: PPUSH
67095: LD_VAR 0 12
67099: PUSH
67100: LD_INT 2
67102: ARRAY
67103: PPUSH
67104: CALL_OW 298
67108: ST_TO_ADDR
// distance := 9999 ;
67109: LD_ADDR_VAR 0 10
67113: PUSH
67114: LD_INT 9999
67116: ST_TO_ADDR
// for i := 0 to 5 do
67117: LD_ADDR_VAR 0 6
67121: PUSH
67122: DOUBLE
67123: LD_INT 0
67125: DEC
67126: ST_TO_ADDR
67127: LD_INT 5
67129: PUSH
67130: FOR_TO
67131: IFFALSE 67274
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67133: LD_ADDR_VAR 0 7
67137: PUSH
67138: LD_VAR 0 1
67142: PPUSH
67143: LD_VAR 0 6
67147: PPUSH
67148: LD_VAR 0 11
67152: PPUSH
67153: CALL_OW 272
67157: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67158: LD_ADDR_VAR 0 8
67162: PUSH
67163: LD_VAR 0 2
67167: PPUSH
67168: LD_VAR 0 6
67172: PPUSH
67173: LD_VAR 0 11
67177: PPUSH
67178: CALL_OW 273
67182: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67183: LD_VAR 0 7
67187: PPUSH
67188: LD_VAR 0 8
67192: PPUSH
67193: CALL_OW 488
67197: NOT
67198: IFFALSE 67202
// continue ;
67200: GO 67130
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67202: LD_ADDR_VAR 0 9
67206: PUSH
67207: LD_VAR 0 12
67211: PUSH
67212: LD_INT 1
67214: ARRAY
67215: PPUSH
67216: LD_VAR 0 12
67220: PUSH
67221: LD_INT 2
67223: ARRAY
67224: PPUSH
67225: LD_VAR 0 7
67229: PPUSH
67230: LD_VAR 0 8
67234: PPUSH
67235: CALL_OW 298
67239: ST_TO_ADDR
// if tmp < distance then
67240: LD_VAR 0 9
67244: PUSH
67245: LD_VAR 0 10
67249: LESS
67250: IFFALSE 67272
// begin result := i ;
67252: LD_ADDR_VAR 0 5
67256: PUSH
67257: LD_VAR 0 6
67261: ST_TO_ADDR
// distance := tmp ;
67262: LD_ADDR_VAR 0 10
67266: PUSH
67267: LD_VAR 0 9
67271: ST_TO_ADDR
// end ; end ;
67272: GO 67130
67274: POP
67275: POP
// end ;
67276: LD_VAR 0 5
67280: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67281: LD_INT 0
67283: PPUSH
67284: PPUSH
// if not driver or not IsInUnit ( driver ) then
67285: LD_VAR 0 1
67289: NOT
67290: PUSH
67291: LD_VAR 0 1
67295: PPUSH
67296: CALL_OW 310
67300: NOT
67301: OR
67302: IFFALSE 67306
// exit ;
67304: GO 67396
// vehicle := IsInUnit ( driver ) ;
67306: LD_ADDR_VAR 0 3
67310: PUSH
67311: LD_VAR 0 1
67315: PPUSH
67316: CALL_OW 310
67320: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67321: LD_VAR 0 1
67325: PPUSH
67326: LD_STRING \
67328: PUSH
67329: LD_INT 0
67331: PUSH
67332: LD_INT 0
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: LD_INT 0
67340: PUSH
67341: LD_INT 0
67343: PUSH
67344: LD_INT 0
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: PUSH
67356: LD_STRING E
67358: PUSH
67359: LD_INT 0
67361: PUSH
67362: LD_INT 0
67364: PUSH
67365: LD_VAR 0 3
67369: PUSH
67370: LD_INT 0
67372: PUSH
67373: LD_INT 0
67375: PUSH
67376: LD_INT 0
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PPUSH
67392: CALL_OW 446
// end ;
67396: LD_VAR 0 2
67400: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67401: LD_INT 0
67403: PPUSH
67404: PPUSH
// if not driver or not IsInUnit ( driver ) then
67405: LD_VAR 0 1
67409: NOT
67410: PUSH
67411: LD_VAR 0 1
67415: PPUSH
67416: CALL_OW 310
67420: NOT
67421: OR
67422: IFFALSE 67426
// exit ;
67424: GO 67516
// vehicle := IsInUnit ( driver ) ;
67426: LD_ADDR_VAR 0 3
67430: PUSH
67431: LD_VAR 0 1
67435: PPUSH
67436: CALL_OW 310
67440: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67441: LD_VAR 0 1
67445: PPUSH
67446: LD_STRING \
67448: PUSH
67449: LD_INT 0
67451: PUSH
67452: LD_INT 0
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: LD_INT 0
67460: PUSH
67461: LD_INT 0
67463: PUSH
67464: LD_INT 0
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: PUSH
67476: LD_STRING E
67478: PUSH
67479: LD_INT 0
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: LD_VAR 0 3
67489: PUSH
67490: LD_INT 0
67492: PUSH
67493: LD_INT 0
67495: PUSH
67496: LD_INT 0
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PPUSH
67512: CALL_OW 447
// end ;
67516: LD_VAR 0 2
67520: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67521: LD_INT 0
67523: PPUSH
67524: PPUSH
67525: PPUSH
// tmp := [ ] ;
67526: LD_ADDR_VAR 0 5
67530: PUSH
67531: EMPTY
67532: ST_TO_ADDR
// for i in units do
67533: LD_ADDR_VAR 0 4
67537: PUSH
67538: LD_VAR 0 1
67542: PUSH
67543: FOR_IN
67544: IFFALSE 67582
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67546: LD_ADDR_VAR 0 5
67550: PUSH
67551: LD_VAR 0 5
67555: PPUSH
67556: LD_VAR 0 5
67560: PUSH
67561: LD_INT 1
67563: PLUS
67564: PPUSH
67565: LD_VAR 0 4
67569: PPUSH
67570: CALL_OW 256
67574: PPUSH
67575: CALL_OW 2
67579: ST_TO_ADDR
67580: GO 67543
67582: POP
67583: POP
// if not tmp then
67584: LD_VAR 0 5
67588: NOT
67589: IFFALSE 67593
// exit ;
67591: GO 67641
// if asc then
67593: LD_VAR 0 2
67597: IFFALSE 67621
// result := SortListByListAsc ( units , tmp ) else
67599: LD_ADDR_VAR 0 3
67603: PUSH
67604: LD_VAR 0 1
67608: PPUSH
67609: LD_VAR 0 5
67613: PPUSH
67614: CALL_OW 76
67618: ST_TO_ADDR
67619: GO 67641
// result := SortListByListDesc ( units , tmp ) ;
67621: LD_ADDR_VAR 0 3
67625: PUSH
67626: LD_VAR 0 1
67630: PPUSH
67631: LD_VAR 0 5
67635: PPUSH
67636: CALL_OW 77
67640: ST_TO_ADDR
// end ;
67641: LD_VAR 0 3
67645: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67646: LD_INT 0
67648: PPUSH
67649: PPUSH
// task := GetTaskList ( mech ) ;
67650: LD_ADDR_VAR 0 4
67654: PUSH
67655: LD_VAR 0 1
67659: PPUSH
67660: CALL_OW 437
67664: ST_TO_ADDR
// if not task then
67665: LD_VAR 0 4
67669: NOT
67670: IFFALSE 67674
// exit ;
67672: GO 67716
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67674: LD_ADDR_VAR 0 3
67678: PUSH
67679: LD_VAR 0 4
67683: PUSH
67684: LD_INT 1
67686: ARRAY
67687: PUSH
67688: LD_INT 1
67690: ARRAY
67691: PUSH
67692: LD_STRING r
67694: EQUAL
67695: PUSH
67696: LD_VAR 0 4
67700: PUSH
67701: LD_INT 1
67703: ARRAY
67704: PUSH
67705: LD_INT 4
67707: ARRAY
67708: PUSH
67709: LD_VAR 0 2
67713: EQUAL
67714: AND
67715: ST_TO_ADDR
// end ;
67716: LD_VAR 0 3
67720: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67721: LD_INT 0
67723: PPUSH
// SetDir ( unit , d ) ;
67724: LD_VAR 0 1
67728: PPUSH
67729: LD_VAR 0 4
67733: PPUSH
67734: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67738: LD_VAR 0 1
67742: PPUSH
67743: LD_VAR 0 2
67747: PPUSH
67748: LD_VAR 0 3
67752: PPUSH
67753: LD_VAR 0 5
67757: PPUSH
67758: CALL_OW 48
// end ;
67762: LD_VAR 0 6
67766: RET
// export function ToNaturalNumber ( number ) ; begin
67767: LD_INT 0
67769: PPUSH
// result := number div 1 ;
67770: LD_ADDR_VAR 0 2
67774: PUSH
67775: LD_VAR 0 1
67779: PUSH
67780: LD_INT 1
67782: DIV
67783: ST_TO_ADDR
// if number < 0 then
67784: LD_VAR 0 1
67788: PUSH
67789: LD_INT 0
67791: LESS
67792: IFFALSE 67802
// result := 0 ;
67794: LD_ADDR_VAR 0 2
67798: PUSH
67799: LD_INT 0
67801: ST_TO_ADDR
// end ;
67802: LD_VAR 0 2
67806: RET
// export function SortByClass ( units , class ) ; var un ; begin
67807: LD_INT 0
67809: PPUSH
67810: PPUSH
// if not units or not class then
67811: LD_VAR 0 1
67815: NOT
67816: PUSH
67817: LD_VAR 0 2
67821: NOT
67822: OR
67823: IFFALSE 67827
// exit ;
67825: GO 67922
// result := [ ] ;
67827: LD_ADDR_VAR 0 3
67831: PUSH
67832: EMPTY
67833: ST_TO_ADDR
// for un in units do
67834: LD_ADDR_VAR 0 4
67838: PUSH
67839: LD_VAR 0 1
67843: PUSH
67844: FOR_IN
67845: IFFALSE 67920
// if GetClass ( un ) = class then
67847: LD_VAR 0 4
67851: PPUSH
67852: CALL_OW 257
67856: PUSH
67857: LD_VAR 0 2
67861: EQUAL
67862: IFFALSE 67889
// result := Insert ( result , 1 , un ) else
67864: LD_ADDR_VAR 0 3
67868: PUSH
67869: LD_VAR 0 3
67873: PPUSH
67874: LD_INT 1
67876: PPUSH
67877: LD_VAR 0 4
67881: PPUSH
67882: CALL_OW 2
67886: ST_TO_ADDR
67887: GO 67918
// result := Replace ( result , result + 1 , un ) ;
67889: LD_ADDR_VAR 0 3
67893: PUSH
67894: LD_VAR 0 3
67898: PPUSH
67899: LD_VAR 0 3
67903: PUSH
67904: LD_INT 1
67906: PLUS
67907: PPUSH
67908: LD_VAR 0 4
67912: PPUSH
67913: CALL_OW 1
67917: ST_TO_ADDR
67918: GO 67844
67920: POP
67921: POP
// end ;
67922: LD_VAR 0 3
67926: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67927: LD_INT 0
67929: PPUSH
67930: PPUSH
67931: PPUSH
67932: PPUSH
67933: PPUSH
67934: PPUSH
67935: PPUSH
// result := [ ] ;
67936: LD_ADDR_VAR 0 4
67940: PUSH
67941: EMPTY
67942: ST_TO_ADDR
// if x - r < 0 then
67943: LD_VAR 0 1
67947: PUSH
67948: LD_VAR 0 3
67952: MINUS
67953: PUSH
67954: LD_INT 0
67956: LESS
67957: IFFALSE 67969
// min_x := 0 else
67959: LD_ADDR_VAR 0 8
67963: PUSH
67964: LD_INT 0
67966: ST_TO_ADDR
67967: GO 67985
// min_x := x - r ;
67969: LD_ADDR_VAR 0 8
67973: PUSH
67974: LD_VAR 0 1
67978: PUSH
67979: LD_VAR 0 3
67983: MINUS
67984: ST_TO_ADDR
// if y - r < 0 then
67985: LD_VAR 0 2
67989: PUSH
67990: LD_VAR 0 3
67994: MINUS
67995: PUSH
67996: LD_INT 0
67998: LESS
67999: IFFALSE 68011
// min_y := 0 else
68001: LD_ADDR_VAR 0 7
68005: PUSH
68006: LD_INT 0
68008: ST_TO_ADDR
68009: GO 68027
// min_y := y - r ;
68011: LD_ADDR_VAR 0 7
68015: PUSH
68016: LD_VAR 0 2
68020: PUSH
68021: LD_VAR 0 3
68025: MINUS
68026: ST_TO_ADDR
// max_x := x + r ;
68027: LD_ADDR_VAR 0 9
68031: PUSH
68032: LD_VAR 0 1
68036: PUSH
68037: LD_VAR 0 3
68041: PLUS
68042: ST_TO_ADDR
// max_y := y + r ;
68043: LD_ADDR_VAR 0 10
68047: PUSH
68048: LD_VAR 0 2
68052: PUSH
68053: LD_VAR 0 3
68057: PLUS
68058: ST_TO_ADDR
// for _x = min_x to max_x do
68059: LD_ADDR_VAR 0 5
68063: PUSH
68064: DOUBLE
68065: LD_VAR 0 8
68069: DEC
68070: ST_TO_ADDR
68071: LD_VAR 0 9
68075: PUSH
68076: FOR_TO
68077: IFFALSE 68178
// for _y = min_y to max_y do
68079: LD_ADDR_VAR 0 6
68083: PUSH
68084: DOUBLE
68085: LD_VAR 0 7
68089: DEC
68090: ST_TO_ADDR
68091: LD_VAR 0 10
68095: PUSH
68096: FOR_TO
68097: IFFALSE 68174
// begin if not ValidHex ( _x , _y ) then
68099: LD_VAR 0 5
68103: PPUSH
68104: LD_VAR 0 6
68108: PPUSH
68109: CALL_OW 488
68113: NOT
68114: IFFALSE 68118
// continue ;
68116: GO 68096
// if GetResourceTypeXY ( _x , _y ) then
68118: LD_VAR 0 5
68122: PPUSH
68123: LD_VAR 0 6
68127: PPUSH
68128: CALL_OW 283
68132: IFFALSE 68172
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68134: LD_ADDR_VAR 0 4
68138: PUSH
68139: LD_VAR 0 4
68143: PPUSH
68144: LD_VAR 0 4
68148: PUSH
68149: LD_INT 1
68151: PLUS
68152: PPUSH
68153: LD_VAR 0 5
68157: PUSH
68158: LD_VAR 0 6
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PPUSH
68167: CALL_OW 1
68171: ST_TO_ADDR
// end ;
68172: GO 68096
68174: POP
68175: POP
68176: GO 68076
68178: POP
68179: POP
// end ;
68180: LD_VAR 0 4
68184: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68185: LD_INT 0
68187: PPUSH
68188: PPUSH
68189: PPUSH
68190: PPUSH
68191: PPUSH
68192: PPUSH
68193: PPUSH
68194: PPUSH
// if not units then
68195: LD_VAR 0 1
68199: NOT
68200: IFFALSE 68204
// exit ;
68202: GO 68715
// result := UnitFilter ( units , [ f_ok ] ) ;
68204: LD_ADDR_VAR 0 3
68208: PUSH
68209: LD_VAR 0 1
68213: PPUSH
68214: LD_INT 50
68216: PUSH
68217: EMPTY
68218: LIST
68219: PPUSH
68220: CALL_OW 72
68224: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68225: LD_ADDR_VAR 0 8
68229: PUSH
68230: LD_VAR 0 1
68234: PUSH
68235: LD_INT 1
68237: ARRAY
68238: PPUSH
68239: CALL_OW 255
68243: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68244: LD_ADDR_VAR 0 10
68248: PUSH
68249: LD_INT 29
68251: PUSH
68252: LD_EXP 116
68256: PUSH
68257: LD_INT 49
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: LIST
68264: ST_TO_ADDR
// if not result then
68265: LD_VAR 0 3
68269: NOT
68270: IFFALSE 68274
// exit ;
68272: GO 68715
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68274: LD_ADDR_VAR 0 5
68278: PUSH
68279: LD_INT 81
68281: PUSH
68282: LD_VAR 0 8
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PPUSH
68291: CALL_OW 69
68295: ST_TO_ADDR
// for i in result do
68296: LD_ADDR_VAR 0 4
68300: PUSH
68301: LD_VAR 0 3
68305: PUSH
68306: FOR_IN
68307: IFFALSE 68713
// begin tag := GetTag ( i ) + 1 ;
68309: LD_ADDR_VAR 0 9
68313: PUSH
68314: LD_VAR 0 4
68318: PPUSH
68319: CALL_OW 110
68323: PUSH
68324: LD_INT 1
68326: PLUS
68327: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68328: LD_ADDR_VAR 0 7
68332: PUSH
68333: LD_VAR 0 4
68337: PPUSH
68338: CALL_OW 250
68342: PPUSH
68343: LD_VAR 0 4
68347: PPUSH
68348: CALL_OW 251
68352: PPUSH
68353: LD_INT 6
68355: PPUSH
68356: CALL 67927 0 3
68360: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68361: LD_VAR 0 7
68365: PUSH
68366: LD_VAR 0 4
68370: PPUSH
68371: CALL_OW 264
68375: PUSH
68376: LD_VAR 0 10
68380: IN
68381: NOT
68382: AND
68383: IFFALSE 68422
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68385: LD_VAR 0 4
68389: PPUSH
68390: LD_VAR 0 7
68394: PUSH
68395: LD_INT 1
68397: ARRAY
68398: PUSH
68399: LD_INT 1
68401: ARRAY
68402: PPUSH
68403: LD_VAR 0 7
68407: PUSH
68408: LD_INT 1
68410: ARRAY
68411: PUSH
68412: LD_INT 2
68414: ARRAY
68415: PPUSH
68416: CALL_OW 116
68420: GO 68711
// if path > tag then
68422: LD_VAR 0 2
68426: PUSH
68427: LD_VAR 0 9
68431: GREATER
68432: IFFALSE 68640
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
68434: LD_ADDR_VAR 0 6
68438: PUSH
68439: LD_VAR 0 5
68443: PPUSH
68444: LD_INT 91
68446: PUSH
68447: LD_VAR 0 4
68451: PUSH
68452: LD_INT 12
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: LIST
68459: PPUSH
68460: CALL_OW 72
68464: ST_TO_ADDR
// if nearEnemy then
68465: LD_VAR 0 6
68469: IFFALSE 68538
// begin if GetWeapon ( i ) = ru_time_lapser then
68471: LD_VAR 0 4
68475: PPUSH
68476: CALL_OW 264
68480: PUSH
68481: LD_INT 49
68483: EQUAL
68484: IFFALSE 68512
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68486: LD_VAR 0 4
68490: PPUSH
68491: LD_VAR 0 6
68495: PPUSH
68496: LD_VAR 0 4
68500: PPUSH
68501: CALL_OW 74
68505: PPUSH
68506: CALL_OW 112
68510: GO 68536
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68512: LD_VAR 0 4
68516: PPUSH
68517: LD_VAR 0 6
68521: PPUSH
68522: LD_VAR 0 4
68526: PPUSH
68527: CALL_OW 74
68531: PPUSH
68532: CALL_OW 115
// end else
68536: GO 68638
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68538: LD_VAR 0 4
68542: PPUSH
68543: LD_VAR 0 2
68547: PUSH
68548: LD_VAR 0 9
68552: ARRAY
68553: PUSH
68554: LD_INT 1
68556: ARRAY
68557: PPUSH
68558: LD_VAR 0 2
68562: PUSH
68563: LD_VAR 0 9
68567: ARRAY
68568: PUSH
68569: LD_INT 2
68571: ARRAY
68572: PPUSH
68573: CALL_OW 297
68577: PUSH
68578: LD_INT 6
68580: GREATER
68581: IFFALSE 68624
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68583: LD_VAR 0 4
68587: PPUSH
68588: LD_VAR 0 2
68592: PUSH
68593: LD_VAR 0 9
68597: ARRAY
68598: PUSH
68599: LD_INT 1
68601: ARRAY
68602: PPUSH
68603: LD_VAR 0 2
68607: PUSH
68608: LD_VAR 0 9
68612: ARRAY
68613: PUSH
68614: LD_INT 2
68616: ARRAY
68617: PPUSH
68618: CALL_OW 114
68622: GO 68638
// SetTag ( i , tag ) ;
68624: LD_VAR 0 4
68628: PPUSH
68629: LD_VAR 0 9
68633: PPUSH
68634: CALL_OW 109
// end else
68638: GO 68711
// if enemy then
68640: LD_VAR 0 5
68644: IFFALSE 68711
// begin if GetWeapon ( i ) = ru_time_lapser then
68646: LD_VAR 0 4
68650: PPUSH
68651: CALL_OW 264
68655: PUSH
68656: LD_INT 49
68658: EQUAL
68659: IFFALSE 68687
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68661: LD_VAR 0 4
68665: PPUSH
68666: LD_VAR 0 5
68670: PPUSH
68671: LD_VAR 0 4
68675: PPUSH
68676: CALL_OW 74
68680: PPUSH
68681: CALL_OW 112
68685: GO 68711
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68687: LD_VAR 0 4
68691: PPUSH
68692: LD_VAR 0 5
68696: PPUSH
68697: LD_VAR 0 4
68701: PPUSH
68702: CALL_OW 74
68706: PPUSH
68707: CALL_OW 115
// end ; end ;
68711: GO 68306
68713: POP
68714: POP
// end ;
68715: LD_VAR 0 3
68719: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68720: LD_INT 0
68722: PPUSH
68723: PPUSH
68724: PPUSH
// if not unit or IsInUnit ( unit ) then
68725: LD_VAR 0 1
68729: NOT
68730: PUSH
68731: LD_VAR 0 1
68735: PPUSH
68736: CALL_OW 310
68740: OR
68741: IFFALSE 68745
// exit ;
68743: GO 68836
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68745: LD_ADDR_VAR 0 4
68749: PUSH
68750: LD_VAR 0 1
68754: PPUSH
68755: CALL_OW 250
68759: PPUSH
68760: LD_VAR 0 2
68764: PPUSH
68765: LD_INT 1
68767: PPUSH
68768: CALL_OW 272
68772: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68773: LD_ADDR_VAR 0 5
68777: PUSH
68778: LD_VAR 0 1
68782: PPUSH
68783: CALL_OW 251
68787: PPUSH
68788: LD_VAR 0 2
68792: PPUSH
68793: LD_INT 1
68795: PPUSH
68796: CALL_OW 273
68800: ST_TO_ADDR
// if ValidHex ( x , y ) then
68801: LD_VAR 0 4
68805: PPUSH
68806: LD_VAR 0 5
68810: PPUSH
68811: CALL_OW 488
68815: IFFALSE 68836
// ComTurnXY ( unit , x , y ) ;
68817: LD_VAR 0 1
68821: PPUSH
68822: LD_VAR 0 4
68826: PPUSH
68827: LD_VAR 0 5
68831: PPUSH
68832: CALL_OW 118
// end ;
68836: LD_VAR 0 3
68840: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68841: LD_INT 0
68843: PPUSH
68844: PPUSH
// result := false ;
68845: LD_ADDR_VAR 0 3
68849: PUSH
68850: LD_INT 0
68852: ST_TO_ADDR
// if not units then
68853: LD_VAR 0 2
68857: NOT
68858: IFFALSE 68862
// exit ;
68860: GO 68907
// for i in units do
68862: LD_ADDR_VAR 0 4
68866: PUSH
68867: LD_VAR 0 2
68871: PUSH
68872: FOR_IN
68873: IFFALSE 68905
// if See ( side , i ) then
68875: LD_VAR 0 1
68879: PPUSH
68880: LD_VAR 0 4
68884: PPUSH
68885: CALL_OW 292
68889: IFFALSE 68903
// begin result := true ;
68891: LD_ADDR_VAR 0 3
68895: PUSH
68896: LD_INT 1
68898: ST_TO_ADDR
// exit ;
68899: POP
68900: POP
68901: GO 68907
// end ;
68903: GO 68872
68905: POP
68906: POP
// end ;
68907: LD_VAR 0 3
68911: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68912: LD_INT 0
68914: PPUSH
68915: PPUSH
68916: PPUSH
68917: PPUSH
// if not unit or not points then
68918: LD_VAR 0 1
68922: NOT
68923: PUSH
68924: LD_VAR 0 2
68928: NOT
68929: OR
68930: IFFALSE 68934
// exit ;
68932: GO 69024
// dist := 99999 ;
68934: LD_ADDR_VAR 0 5
68938: PUSH
68939: LD_INT 99999
68941: ST_TO_ADDR
// for i in points do
68942: LD_ADDR_VAR 0 4
68946: PUSH
68947: LD_VAR 0 2
68951: PUSH
68952: FOR_IN
68953: IFFALSE 69022
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68955: LD_ADDR_VAR 0 6
68959: PUSH
68960: LD_VAR 0 1
68964: PPUSH
68965: LD_VAR 0 4
68969: PUSH
68970: LD_INT 1
68972: ARRAY
68973: PPUSH
68974: LD_VAR 0 4
68978: PUSH
68979: LD_INT 2
68981: ARRAY
68982: PPUSH
68983: CALL_OW 297
68987: ST_TO_ADDR
// if tmpDist < dist then
68988: LD_VAR 0 6
68992: PUSH
68993: LD_VAR 0 5
68997: LESS
68998: IFFALSE 69020
// begin result := i ;
69000: LD_ADDR_VAR 0 3
69004: PUSH
69005: LD_VAR 0 4
69009: ST_TO_ADDR
// dist := tmpDist ;
69010: LD_ADDR_VAR 0 5
69014: PUSH
69015: LD_VAR 0 6
69019: ST_TO_ADDR
// end ; end ;
69020: GO 68952
69022: POP
69023: POP
// end ;
69024: LD_VAR 0 3
69028: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69029: LD_INT 0
69031: PPUSH
// uc_side := side ;
69032: LD_ADDR_OWVAR 20
69036: PUSH
69037: LD_VAR 0 1
69041: ST_TO_ADDR
// uc_nation := 3 ;
69042: LD_ADDR_OWVAR 21
69046: PUSH
69047: LD_INT 3
69049: ST_TO_ADDR
// vc_chassis := 25 ;
69050: LD_ADDR_OWVAR 37
69054: PUSH
69055: LD_INT 25
69057: ST_TO_ADDR
// vc_engine := engine_siberite ;
69058: LD_ADDR_OWVAR 39
69062: PUSH
69063: LD_INT 3
69065: ST_TO_ADDR
// vc_control := control_computer ;
69066: LD_ADDR_OWVAR 38
69070: PUSH
69071: LD_INT 3
69073: ST_TO_ADDR
// vc_weapon := 59 ;
69074: LD_ADDR_OWVAR 40
69078: PUSH
69079: LD_INT 59
69081: ST_TO_ADDR
// result := CreateVehicle ;
69082: LD_ADDR_VAR 0 5
69086: PUSH
69087: CALL_OW 45
69091: ST_TO_ADDR
// SetDir ( result , d ) ;
69092: LD_VAR 0 5
69096: PPUSH
69097: LD_VAR 0 4
69101: PPUSH
69102: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69106: LD_VAR 0 5
69110: PPUSH
69111: LD_VAR 0 2
69115: PPUSH
69116: LD_VAR 0 3
69120: PPUSH
69121: LD_INT 0
69123: PPUSH
69124: CALL_OW 48
// end ;
69128: LD_VAR 0 5
69132: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69133: LD_INT 0
69135: PPUSH
69136: PPUSH
69137: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69138: LD_ADDR_VAR 0 2
69142: PUSH
69143: LD_INT 0
69145: PUSH
69146: LD_INT 0
69148: PUSH
69149: LD_INT 0
69151: PUSH
69152: LD_INT 0
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69161: LD_VAR 0 1
69165: NOT
69166: PUSH
69167: LD_VAR 0 1
69171: PPUSH
69172: CALL_OW 264
69176: PUSH
69177: LD_INT 12
69179: PUSH
69180: LD_INT 51
69182: PUSH
69183: LD_INT 32
69185: PUSH
69186: LD_EXP 113
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: IN
69197: NOT
69198: OR
69199: IFFALSE 69203
// exit ;
69201: GO 69301
// for i := 1 to 3 do
69203: LD_ADDR_VAR 0 3
69207: PUSH
69208: DOUBLE
69209: LD_INT 1
69211: DEC
69212: ST_TO_ADDR
69213: LD_INT 3
69215: PUSH
69216: FOR_TO
69217: IFFALSE 69299
// begin tmp := GetCargo ( cargo , i ) ;
69219: LD_ADDR_VAR 0 4
69223: PUSH
69224: LD_VAR 0 1
69228: PPUSH
69229: LD_VAR 0 3
69233: PPUSH
69234: CALL_OW 289
69238: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69239: LD_ADDR_VAR 0 2
69243: PUSH
69244: LD_VAR 0 2
69248: PPUSH
69249: LD_VAR 0 3
69253: PPUSH
69254: LD_VAR 0 4
69258: PPUSH
69259: CALL_OW 1
69263: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69264: LD_ADDR_VAR 0 2
69268: PUSH
69269: LD_VAR 0 2
69273: PPUSH
69274: LD_INT 4
69276: PPUSH
69277: LD_VAR 0 2
69281: PUSH
69282: LD_INT 4
69284: ARRAY
69285: PUSH
69286: LD_VAR 0 4
69290: PLUS
69291: PPUSH
69292: CALL_OW 1
69296: ST_TO_ADDR
// end ;
69297: GO 69216
69299: POP
69300: POP
// end ; end_of_file
69301: LD_VAR 0 2
69305: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
69306: LD_INT 0
69308: PPUSH
// ar_miner := 81 ;
69309: LD_ADDR_EXP 119
69313: PUSH
69314: LD_INT 81
69316: ST_TO_ADDR
// ar_crane := 88 ;
69317: LD_ADDR_EXP 118
69321: PUSH
69322: LD_INT 88
69324: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
69325: LD_ADDR_EXP 113
69329: PUSH
69330: LD_INT 89
69332: ST_TO_ADDR
// us_hack := 99 ;
69333: LD_ADDR_EXP 114
69337: PUSH
69338: LD_INT 99
69340: ST_TO_ADDR
// us_artillery := 97 ;
69341: LD_ADDR_EXP 115
69345: PUSH
69346: LD_INT 97
69348: ST_TO_ADDR
// ar_bio_bomb := 91 ;
69349: LD_ADDR_EXP 116
69353: PUSH
69354: LD_INT 91
69356: ST_TO_ADDR
// ar_mortar := 92 ;
69357: LD_ADDR_EXP 117
69361: PUSH
69362: LD_INT 92
69364: ST_TO_ADDR
// ru_flamethrower := 93 ;
69365: LD_ADDR_EXP 120
69369: PUSH
69370: LD_INT 93
69372: ST_TO_ADDR
// ru_radar := 98 ;
69373: LD_ADDR_EXP 112
69377: PUSH
69378: LD_INT 98
69380: ST_TO_ADDR
// tech_Artillery := 80 ;
69381: LD_ADDR_EXP 121
69385: PUSH
69386: LD_INT 80
69388: ST_TO_ADDR
// tech_RadMat := 81 ;
69389: LD_ADDR_EXP 122
69393: PUSH
69394: LD_INT 81
69396: ST_TO_ADDR
// tech_BasicTools := 82 ;
69397: LD_ADDR_EXP 123
69401: PUSH
69402: LD_INT 82
69404: ST_TO_ADDR
// tech_Cargo := 83 ;
69405: LD_ADDR_EXP 124
69409: PUSH
69410: LD_INT 83
69412: ST_TO_ADDR
// tech_Track := 84 ;
69413: LD_ADDR_EXP 125
69417: PUSH
69418: LD_INT 84
69420: ST_TO_ADDR
// tech_Crane := 85 ;
69421: LD_ADDR_EXP 126
69425: PUSH
69426: LD_INT 85
69428: ST_TO_ADDR
// tech_Bulldozer := 86 ;
69429: LD_ADDR_EXP 127
69433: PUSH
69434: LD_INT 86
69436: ST_TO_ADDR
// tech_Hovercraft := 87 ;
69437: LD_ADDR_EXP 128
69441: PUSH
69442: LD_INT 87
69444: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
69445: LD_ADDR_EXP 129
69449: PUSH
69450: LD_INT 88
69452: ST_TO_ADDR
// class_mastodont := 31 ;
69453: LD_ADDR_EXP 130
69457: PUSH
69458: LD_INT 31
69460: ST_TO_ADDR
// class_horse := 21 ;
69461: LD_ADDR_EXP 131
69465: PUSH
69466: LD_INT 21
69468: ST_TO_ADDR
// end ;
69469: LD_VAR 0 1
69473: RET
// every 1 do
69474: GO 69476
69476: DISABLE
// InitGlobalVariables ; end_of_file
69477: CALL 69306 0 0
69481: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69482: LD_VAR 0 1
69486: PPUSH
69487: LD_VAR 0 2
69491: PPUSH
69492: LD_VAR 0 3
69496: PPUSH
69497: LD_VAR 0 4
69501: PPUSH
69502: LD_VAR 0 5
69506: PPUSH
69507: LD_VAR 0 6
69511: PPUSH
69512: CALL 9818 0 6
// end ;
69516: PPOPN 6
69518: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69519: CALL 9793 0 0
// end ;
69523: PPOPN 1
69525: END
