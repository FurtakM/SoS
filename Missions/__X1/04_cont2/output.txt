// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 229 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 641 0 1
// PrepareRussian ;
  19: CALL 2217 0 0
// PrepareArabian ;
  23: CALL 1234 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5840 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// export tEscape ; function InitTag ; begin
 229: LD_INT 0
 231: PPUSH
// tEscape := 10 ;
 232: LD_ADDR_EXP 17
 236: PUSH
 237: LD_INT 10
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger debug do var i ;
 245: LD_EXP 1
 249: IFFALSE 333
 251: GO 253
 253: DISABLE
 254: LD_INT 0
 256: PPUSH
// begin enable ;
 257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 258: LD_ADDR_VAR 0 1
 262: PUSH
 263: LD_INT 22
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: PUSH
 273: LD_INT 3
 275: PUSH
 276: LD_INT 21
 278: PUSH
 279: LD_INT 3
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL_OW 69
 298: PUSH
 299: FOR_IN
 300: IFFALSE 331
// if GetLives ( i ) < 1000 then
 302: LD_VAR 0 1
 306: PPUSH
 307: CALL_OW 256
 311: PUSH
 312: LD_INT 1000
 314: LESS
 315: IFFALSE 329
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 299
 331: POP
 332: POP
// end ; end_of_file
 333: PPOPN 1
 335: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 336: LD_INT 0
 338: PPUSH
// uc_side := side ;
 339: LD_ADDR_OWVAR 20
 343: PUSH
 344: LD_VAR 0 1
 348: ST_TO_ADDR
// uc_nation := nation ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_VAR 0 2
 358: ST_TO_ADDR
// vc_chassis := chassis ;
 359: LD_ADDR_OWVAR 37
 363: PUSH
 364: LD_VAR 0 3
 368: ST_TO_ADDR
// vc_engine := engine ;
 369: LD_ADDR_OWVAR 39
 373: PUSH
 374: LD_VAR 0 4
 378: ST_TO_ADDR
// vc_control := control ;
 379: LD_ADDR_OWVAR 38
 383: PUSH
 384: LD_VAR 0 5
 388: ST_TO_ADDR
// vc_weapon := weapon ;
 389: LD_ADDR_OWVAR 40
 393: PUSH
 394: LD_VAR 0 6
 398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 399: LD_ADDR_OWVAR 41
 403: PUSH
 404: LD_VAR 0 7
 408: ST_TO_ADDR
// result := CreateVehicle ;
 409: LD_ADDR_VAR 0 8
 413: PUSH
 414: CALL_OW 45
 418: ST_TO_ADDR
// end ;
 419: LD_VAR 0 8
 423: RET
// export function SayX ( units , ident ) ; var i ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// result := false ;
 428: LD_ADDR_VAR 0 3
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// if not units then
 436: LD_VAR 0 1
 440: NOT
 441: IFFALSE 445
// exit ;
 443: GO 499
// for i in units do
 445: LD_ADDR_VAR 0 4
 449: PUSH
 450: LD_VAR 0 1
 454: PUSH
 455: FOR_IN
 456: IFFALSE 497
// if IsOk ( i ) then
 458: LD_VAR 0 4
 462: PPUSH
 463: CALL_OW 302
 467: IFFALSE 495
// begin Say ( i , ident ) ;
 469: LD_VAR 0 4
 473: PPUSH
 474: LD_VAR 0 2
 478: PPUSH
 479: CALL_OW 88
// result := i ;
 483: LD_ADDR_VAR 0 3
 487: PUSH
 488: LD_VAR 0 4
 492: ST_TO_ADDR
// break ;
 493: GO 497
// end ;
 495: GO 455
 497: POP
 498: POP
// end ;
 499: LD_VAR 0 3
 503: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 504: LD_INT 0
 506: PPUSH
 507: PPUSH
// InitUc ;
 508: CALL_OW 18
// InitHc ;
 512: CALL_OW 19
// uc_side := 0 ;
 516: LD_ADDR_OWVAR 20
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// uc_nation := 0 ;
 524: LD_ADDR_OWVAR 21
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// for i = 1 to amount do
 532: LD_ADDR_VAR 0 4
 536: PUSH
 537: DOUBLE
 538: LD_INT 1
 540: DEC
 541: ST_TO_ADDR
 542: LD_VAR 0 2
 546: PUSH
 547: FOR_TO
 548: IFFALSE 630
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 550: LD_ADDR_OWVAR 29
 554: PUSH
 555: LD_INT 9
 557: PPUSH
 558: LD_INT 12
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_INT 9
 568: PPUSH
 569: LD_INT 12
 571: PPUSH
 572: CALL_OW 12
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 581: LD_ADDR_OWVAR 35
 585: PUSH
 586: LD_INT 1
 588: NEG
 589: PPUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 12
 597: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 598: LD_INT 0
 600: PPUSH
 601: LD_INT 12
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 611: CALL_OW 44
 615: PPUSH
 616: LD_VAR 0 1
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: CALL_OW 49
// end ;
 628: GO 547
 630: POP
 631: POP
// InitHc ;
 632: CALL_OW 19
// end ;
 636: LD_VAR 0 3
 640: RET
// export function CreateNature ( forest ) ; var i ; begin
 641: LD_INT 0
 643: PPUSH
 644: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 645: LD_VAR 0 1
 649: PPUSH
 650: LD_INT 3
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 2
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: PUSH
 668: LD_OWVAR 67
 672: ARRAY
 673: PPUSH
 674: CALL 504 0 2
// for i := 1 to 2 do
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: DOUBLE
 684: LD_INT 1
 686: DEC
 687: ST_TO_ADDR
 688: LD_INT 2
 690: PUSH
 691: FOR_TO
 692: IFFALSE 729
// begin hc_class := 21 ;
 694: LD_ADDR_OWVAR 28
 698: PUSH
 699: LD_INT 21
 701: ST_TO_ADDR
// hc_gallery :=  ;
 702: LD_ADDR_OWVAR 33
 706: PUSH
 707: LD_STRING 
 709: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 691
 729: POP
 730: POP
// for i := 1 to 2 do
 731: LD_ADDR_VAR 0 3
 735: PUSH
 736: DOUBLE
 737: LD_INT 1
 739: DEC
 740: ST_TO_ADDR
 741: LD_INT 2
 743: PUSH
 744: FOR_TO
 745: IFFALSE 782
// begin hc_class := 18 ;
 747: LD_ADDR_OWVAR 28
 751: PUSH
 752: LD_INT 18
 754: ST_TO_ADDR
// hc_gallery :=  ;
 755: LD_ADDR_OWVAR 33
 759: PUSH
 760: LD_STRING 
 762: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 763: CALL_OW 44
 767: PPUSH
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 49
// end ;
 780: GO 744
 782: POP
 783: POP
// for i := 1 to 2 do
 784: LD_ADDR_VAR 0 3
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 2
 796: PUSH
 797: FOR_TO
 798: IFFALSE 835
// begin hc_class := 13 ;
 800: LD_ADDR_OWVAR 28
 804: PUSH
 805: LD_INT 13
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 816: CALL_OW 44
 820: PPUSH
 821: LD_VAR 0 1
 825: PPUSH
 826: LD_INT 0
 828: PPUSH
 829: CALL_OW 49
// end ;
 833: GO 797
 835: POP
 836: POP
// end ;
 837: LD_VAR 0 2
 841: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
// if not observer or not unit then
 847: LD_VAR 0 1
 851: NOT
 852: PUSH
 853: LD_VAR 0 2
 857: NOT
 858: OR
 859: IFFALSE 863
// exit ;
 861: GO 911
// if not See ( GetSide ( observer ) , unit ) then
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 292
 882: NOT
 883: IFFALSE 887
// exit ;
 885: GO 911
// result := GetDistUnits ( observer , unit ) < 12 ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: LD_VAR 0 1
 896: PPUSH
 897: LD_VAR 0 2
 901: PPUSH
 902: CALL_OW 296
 906: PUSH
 907: LD_INT 12
 909: LESS
 910: ST_TO_ADDR
// end ;
 911: LD_VAR 0 3
 915: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 916: LD_INT 0
 918: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PPUSH
 928: LD_VAR 0 2
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: PPUSH
 937: CALL_OW 488
 941: PUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 1
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 428
 964: PUSH
 965: LD_INT 0
 967: EQUAL
 968: AND
 969: IFFALSE 1003
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 971: LD_VAR 0 1
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: LD_VAR 0 3
 998: PPUSH
 999: CALL_OW 48
// end ;
1003: LD_VAR 0 4
1007: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1008: LD_INT 0
1010: PPUSH
1011: PPUSH
1012: PPUSH
1013: PPUSH
1014: PPUSH
// if not unit then
1015: LD_VAR 0 1
1019: NOT
1020: IFFALSE 1024
// exit ;
1022: GO 1229
// side := GetSide ( unit ) ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: LD_VAR 0 1
1033: PPUSH
1034: CALL_OW 255
1038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_VAR 0 4
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_VAR 0 2
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 69
1076: ST_TO_ADDR
// if not tmp then
1077: LD_VAR 0 5
1081: NOT
1082: IFFALSE 1086
// exit ;
1084: GO 1229
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 5
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 35967 0 4
1111: ST_TO_ADDR
// places := 1 ;
1112: LD_ADDR_VAR 0 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 7
1148: PUSH
1149: LD_INT 8
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: IN
1163: IFFALSE 1173
// places := 6 ;
1165: LD_ADDR_VAR 0 7
1169: PUSH
1170: LD_INT 6
1172: ST_TO_ADDR
// for i in tmp do
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: LD_VAR 0 5
1182: PUSH
1183: FOR_IN
1184: IFFALSE 1227
// begin if UnitsInside ( i ) - places <= 0 then
1186: LD_VAR 0 6
1190: PPUSH
1191: CALL_OW 313
1195: PUSH
1196: LD_VAR 0 7
1200: MINUS
1201: PUSH
1202: LD_INT 0
1204: LESSEQUAL
1205: IFFALSE 1211
// continue else
1207: GO 1183
1209: GO 1225
// begin result := i ;
1211: LD_ADDR_VAR 0 3
1215: PUSH
1216: LD_VAR 0 6
1220: ST_TO_ADDR
// exit ;
1221: POP
1222: POP
1223: GO 1229
// end ; end ;
1225: GO 1183
1227: POP
1228: POP
// end ; end_of_file
1229: LD_VAR 0 3
1233: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1234: LD_INT 0
1236: PPUSH
1237: PPUSH
// uc_side := 2 ;
1238: LD_ADDR_OWVAR 20
1242: PUSH
1243: LD_INT 2
1245: ST_TO_ADDR
// uc_nation := 2 ;
1246: LD_ADDR_OWVAR 21
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1254: LD_ADDR_EXP 18
1258: PUSH
1259: LD_STRING Heike
1261: PPUSH
1262: LD_EXP 1
1266: NOT
1267: PPUSH
1268: LD_EXP 2
1272: PPUSH
1273: CALL 30395 0 3
1277: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1278: LD_ADDR_EXP 21
1282: PUSH
1283: LD_STRING Ibrahim
1285: PPUSH
1286: LD_EXP 1
1290: NOT
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL 30395 0 3
1301: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1302: LD_ADDR_EXP 19
1306: PUSH
1307: LD_STRING Givi
1309: PPUSH
1310: LD_EXP 1
1314: NOT
1315: PPUSH
1316: LD_EXP 2
1320: PPUSH
1321: CALL 30395 0 3
1325: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1326: LD_ADDR_EXP 22
1330: PUSH
1331: LD_STRING Kamil
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 2
1344: PPUSH
1345: CALL 30395 0 3
1349: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1350: LD_ADDR_EXP 23
1354: PUSH
1355: LD_STRING Kaia
1357: PPUSH
1358: LD_EXP 1
1362: NOT
1363: PPUSH
1364: LD_EXP 2
1368: PPUSH
1369: CALL 30395 0 3
1373: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1374: LD_ADDR_EXP 24
1378: PUSH
1379: LD_STRING Sophia
1381: PPUSH
1382: LD_EXP 1
1386: NOT
1387: PPUSH
1388: LD_EXP 2
1392: PPUSH
1393: CALL 30395 0 3
1397: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1398: LD_ADDR_EXP 25
1402: PUSH
1403: LD_STRING Markov
1405: PPUSH
1406: LD_EXP 1
1410: NOT
1411: PPUSH
1412: LD_EXP 2
1416: PPUSH
1417: CALL 30395 0 3
1421: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1422: LD_ADDR_EXP 28
1426: PUSH
1427: LD_STRING Aviradze
1429: PPUSH
1430: LD_EXP 1
1434: NOT
1435: PPUSH
1436: LD_EXP 2
1440: PPUSH
1441: CALL 30395 0 3
1445: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1446: LD_ADDR_EXP 27
1450: PUSH
1451: LD_STRING Kurt
1453: PPUSH
1454: LD_EXP 1
1458: NOT
1459: PPUSH
1460: LD_EXP 2
1464: PPUSH
1465: CALL 30395 0 3
1469: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1470: LD_ADDR_EXP 20
1474: PUSH
1475: LD_STRING Mike
1477: PPUSH
1478: LD_EXP 1
1482: NOT
1483: PPUSH
1484: LD_EXP 2
1488: PPUSH
1489: CALL 30395 0 3
1493: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1494: LD_ADDR_EXP 29
1498: PUSH
1499: LD_STRING 04_1_others
1501: PPUSH
1502: CALL_OW 31
1506: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1507: LD_ADDR_EXP 31
1511: PUSH
1512: LD_STRING 04_1_apes
1514: PPUSH
1515: CALL_OW 31
1519: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_STRING 04_1_Vehicles
1527: PPUSH
1528: EMPTY
1529: PPUSH
1530: CALL_OW 30
1534: ST_TO_ADDR
// if debug then
1535: LD_EXP 1
1539: IFFALSE 1758
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 40 , 40 ] , 1 ] ] ;
1541: LD_ADDR_EXP 30
1545: PUSH
1546: LD_INT 13
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 27
1557: PUSH
1558: LD_INT 2
1560: PUSH
1561: LD_INT 1000
1563: PUSH
1564: LD_INT 0
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PUSH
1574: LD_INT 3
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 13
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: LD_INT 25
1598: PUSH
1599: LD_INT 2
1601: PUSH
1602: LD_INT 1000
1604: PUSH
1605: LD_INT 0
1607: PUSH
1608: LD_INT 0
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 3
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 13
1630: PUSH
1631: LD_INT 1
1633: PUSH
1634: LD_INT 1
1636: PUSH
1637: LD_INT 27
1639: PUSH
1640: LD_INT 2
1642: PUSH
1643: LD_INT 1000
1645: PUSH
1646: LD_INT 0
1648: PUSH
1649: LD_INT 0
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 13
1671: PUSH
1672: LD_INT 1
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: LD_INT 27
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: LD_INT 1000
1686: PUSH
1687: LD_INT 0
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 13
1712: PUSH
1713: LD_INT 1
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: LD_INT 32
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: LD_INT 1000
1727: PUSH
1728: LD_INT 40
1730: PUSH
1731: LD_INT 40
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// uc_side := 5 ;
1758: LD_ADDR_OWVAR 20
1762: PUSH
1763: LD_INT 5
1765: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1766: LD_ADDR_EXP 26
1770: PUSH
1771: LD_STRING Abdul
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: LD_STRING 
1779: PPUSH
1780: CALL 30395 0 3
1784: ST_TO_ADDR
// end ;
1785: LD_VAR 0 1
1789: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , 0 ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1790: LD_STRING 04_1_KaganCaptured
1792: PPUSH
1793: LD_INT 0
1795: PPUSH
1796: CALL_OW 30
1800: PUSH
1801: LD_INT 22
1803: PUSH
1804: LD_INT 5
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PPUSH
1811: CALL_OW 69
1815: NOT
1816: AND
1817: PUSH
1818: LD_INT 124
1820: PPUSH
1821: LD_INT 26
1823: PPUSH
1824: CALL_OW 428
1828: PUSH
1829: LD_INT 0
1831: EQUAL
1832: PUSH
1833: LD_INT 124
1835: PPUSH
1836: LD_INT 26
1838: PPUSH
1839: CALL_OW 428
1843: PPUSH
1844: CALL_OW 255
1848: PUSH
1849: LD_INT 2
1851: EQUAL
1852: XOR
1853: AND
1854: IFFALSE 2214
1856: GO 1858
1858: DISABLE
1859: LD_INT 0
1861: PPUSH
1862: PPUSH
// begin enable ;
1863: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1864: LD_EXP 33
1868: NOT
1869: PUSH
1870: LD_EXP 33
1874: PUSH
1875: LD_INT 4
1877: GREATER
1878: OR
1879: IFFALSE 1889
// cargoCounter := 1 ;
1881: LD_ADDR_EXP 33
1885: PUSH
1886: LD_INT 1
1888: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1889: LD_ADDR_VAR 0 2
1893: PUSH
1894: LD_INT 142
1896: PUSH
1897: LD_INT 15
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 129
1906: PUSH
1907: LD_INT 11
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 138
1916: PUSH
1917: LD_INT 9
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 133
1926: PUSH
1927: LD_INT 10
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: ST_TO_ADDR
// uc_side := 5 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 5
1947: ST_TO_ADDR
// uc_nation := 2 ;
1948: LD_ADDR_OWVAR 21
1952: PUSH
1953: LD_INT 2
1955: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1956: LD_INT 5
1958: PPUSH
1959: LD_INT 2
1961: PPUSH
1962: LD_INT 13
1964: PPUSH
1965: LD_INT 2
1967: PPUSH
1968: LD_INT 1
1970: PPUSH
1971: LD_INT 32
1973: PPUSH
1974: LD_INT 70
1976: PPUSH
1977: CALL 336 0 7
// veh := CreateVehicle ;
1981: LD_ADDR_VAR 0 1
1985: PUSH
1986: CALL_OW 45
1990: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1991: LD_VAR 0 1
1995: PPUSH
1996: LD_INT 3
1998: PPUSH
1999: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
2003: LD_VAR 0 1
2007: PPUSH
2008: LD_INT 8
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: CALL_OW 49
// if not cargoDriver then
2018: LD_EXP 32
2022: NOT
2023: IFFALSE 2048
// begin PrepareHuman ( false , 1 , 3 ) ;
2025: LD_INT 0
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: LD_INT 3
2033: PPUSH
2034: CALL_OW 380
// cargoDriver := CreateHuman ;
2038: LD_ADDR_EXP 32
2042: PUSH
2043: CALL_OW 44
2047: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
2048: LD_EXP 32
2052: PPUSH
2053: LD_VAR 0 1
2057: PPUSH
2058: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
2062: LD_VAR 0 1
2066: PPUSH
2067: LD_INT 2
2069: PPUSH
2070: LD_INT 100
2072: PPUSH
2073: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
2077: LD_VAR 0 1
2081: PPUSH
2082: LD_VAR 0 2
2086: PUSH
2087: LD_EXP 33
2091: ARRAY
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: PPUSH
2097: LD_VAR 0 2
2101: PUSH
2102: LD_EXP 33
2106: ARRAY
2107: PUSH
2108: LD_INT 2
2110: ARRAY
2111: PPUSH
2112: CALL_OW 111
// AddComUnload ( veh ) ;
2116: LD_VAR 0 1
2120: PPUSH
2121: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
2125: LD_VAR 0 1
2129: PPUSH
2130: LD_INT 133
2132: PPUSH
2133: LD_INT 2
2135: PPUSH
2136: CALL_OW 171
// wait ( 0 0$5 ) ;
2140: LD_INT 175
2142: PPUSH
2143: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2147: LD_INT 35
2149: PPUSH
2150: CALL_OW 67
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
2154: LD_VAR 0 1
2158: PPUSH
2159: LD_INT 133
2161: PPUSH
2162: LD_INT 2
2164: PPUSH
2165: CALL_OW 307
2169: PUSH
2170: LD_VAR 0 1
2174: PPUSH
2175: LD_INT 8
2177: PPUSH
2178: CALL_OW 308
2182: OR
2183: IFFALSE 2147
// RemoveUnit ( cargoDriver ) ;
2185: LD_EXP 32
2189: PPUSH
2190: CALL_OW 64
// RemoveUnit ( veh ) ;
2194: LD_VAR 0 1
2198: PPUSH
2199: CALL_OW 64
// if tick >= 20 20$00 then
2203: LD_OWVAR 1
2207: PUSH
2208: LD_INT 42000
2210: GREATEREQUAL
2211: IFFALSE 2214
// disable ;
2213: DISABLE
// end ; end_of_file
2214: PPOPN 2
2216: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
2217: LD_INT 0
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
2227: PPUSH
// uc_side := 3 ;
2228: LD_ADDR_OWVAR 20
2232: PUSH
2233: LD_INT 3
2235: ST_TO_ADDR
// uc_nation := 3 ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 3
2243: ST_TO_ADDR
// ruForce := [ ] ;
2244: LD_ADDR_EXP 37
2248: PUSH
2249: EMPTY
2250: ST_TO_ADDR
// ruMech := [ ] ;
2251: LD_ADDR_EXP 39
2255: PUSH
2256: EMPTY
2257: ST_TO_ADDR
// ruEng := [ ] ;
2258: LD_ADDR_EXP 38
2262: PUSH
2263: EMPTY
2264: ST_TO_ADDR
// ruSci := [ ] ;
2265: LD_ADDR_EXP 40
2269: PUSH
2270: EMPTY
2271: ST_TO_ADDR
// ruMobile := [ ] ;
2272: LD_ADDR_EXP 41
2276: PUSH
2277: EMPTY
2278: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2279: LD_ADDR_EXP 34
2283: PUSH
2284: LD_STRING Burlak
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: LD_STRING 
2292: PPUSH
2293: CALL 30395 0 3
2297: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2298: LD_ADDR_EXP 35
2302: PUSH
2303: LD_STRING Gaydar
2305: PPUSH
2306: LD_INT 0
2308: PPUSH
2309: LD_STRING 
2311: PPUSH
2312: CALL 30395 0 3
2316: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2317: LD_ADDR_EXP 36
2321: PUSH
2322: LD_STRING Kuzmov
2324: PPUSH
2325: LD_INT 0
2327: PPUSH
2328: LD_STRING 
2330: PPUSH
2331: CALL 30395 0 3
2335: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2336: LD_EXP 36
2340: PPUSH
2341: LD_INT 200
2343: PPUSH
2344: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2348: LD_INT 200
2350: PPUSH
2351: LD_STRING chuikov
2353: PPUSH
2354: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2358: LD_INT 200
2360: PPUSH
2361: CALL_OW 274
2365: PPUSH
2366: LD_INT 1
2368: PPUSH
2369: LD_INT 800
2371: PUSH
2372: LD_INT 1000
2374: PUSH
2375: LD_INT 1250
2377: PUSH
2378: LD_INT 1300
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: PUSH
2387: LD_OWVAR 67
2391: ARRAY
2392: PPUSH
2393: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2397: LD_INT 200
2399: PPUSH
2400: CALL_OW 274
2404: PPUSH
2405: LD_INT 2
2407: PPUSH
2408: LD_INT 160
2410: PPUSH
2411: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2415: LD_INT 225
2417: PPUSH
2418: CALL_OW 274
2422: PPUSH
2423: LD_INT 1
2425: PPUSH
2426: LD_INT 200
2428: PPUSH
2429: CALL_OW 277
// oil := 150 ;
2433: LD_ADDR_VAR 0 9
2437: PUSH
2438: LD_INT 150
2440: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2441: LD_EXP 5
2445: PUSH
2446: LD_INT 94500
2448: PUSH
2449: LD_INT 84000
2451: PUSH
2452: LD_INT 73500
2454: PUSH
2455: LD_INT 67200
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: PUSH
2464: LD_OWVAR 67
2468: ARRAY
2469: GREATEREQUAL
2470: IFFALSE 2625
// begin oil := 450 ;
2472: LD_ADDR_VAR 0 9
2476: PUSH
2477: LD_INT 450
2479: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2480: LD_ADDR_VAR 0 7
2484: PUSH
2485: LD_INT 123
2487: PUSH
2488: LD_INT 17
2490: PUSH
2491: LD_INT 3
2493: PUSH
2494: LD_INT 31
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: PUSH
2503: LD_INT 152
2505: PUSH
2506: LD_INT 38
2508: PUSH
2509: LD_INT 3
2511: PUSH
2512: LD_INT 31
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 81
2523: PUSH
2524: LD_INT 6
2526: PUSH
2527: LD_INT 4
2529: PUSH
2530: LD_INT 31
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 113
2541: PUSH
2542: LD_INT 67
2544: PUSH
2545: LD_INT 4
2547: PUSH
2548: LD_INT 32
2550: PUSH
2551: EMPTY
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: ST_TO_ADDR
// for i in tmp do
2563: LD_ADDR_VAR 0 4
2567: PUSH
2568: LD_VAR 0 7
2572: PUSH
2573: FOR_IN
2574: IFFALSE 2623
// begin bc_type := i [ 4 ] ;
2576: LD_ADDR_OWVAR 42
2580: PUSH
2581: LD_VAR 0 4
2585: PUSH
2586: LD_INT 4
2588: ARRAY
2589: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 1
2597: ARRAY
2598: PPUSH
2599: LD_VAR 0 4
2603: PUSH
2604: LD_INT 2
2606: ARRAY
2607: PPUSH
2608: LD_VAR 0 4
2612: PUSH
2613: LD_INT 3
2615: ARRAY
2616: PPUSH
2617: CALL_OW 47
// end ;
2621: GO 2573
2623: POP
2624: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2625: LD_INT 225
2627: PPUSH
2628: CALL_OW 274
2632: PPUSH
2633: LD_INT 2
2635: PPUSH
2636: LD_VAR 0 9
2640: PPUSH
2641: CALL_OW 277
// if Difficulty > 1 then
2645: LD_OWVAR 67
2649: PUSH
2650: LD_INT 1
2652: GREATER
2653: IFFALSE 2748
// begin bc_type := b_bunker ;
2655: LD_ADDR_OWVAR 42
2659: PUSH
2660: LD_INT 32
2662: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2663: LD_ADDR_VAR 0 7
2667: PUSH
2668: LD_INT 121
2670: PUSH
2671: LD_INT 85
2673: PUSH
2674: LD_INT 5
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: LIST
2681: PUSH
2682: LD_INT 93
2684: PUSH
2685: LD_INT 72
2687: PUSH
2688: LD_INT 1
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: LIST
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: ST_TO_ADDR
// for i in tmp do
2700: LD_ADDR_VAR 0 4
2704: PUSH
2705: LD_VAR 0 7
2709: PUSH
2710: FOR_IN
2711: IFFALSE 2746
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2713: LD_VAR 0 4
2717: PUSH
2718: LD_INT 1
2720: ARRAY
2721: PPUSH
2722: LD_VAR 0 4
2726: PUSH
2727: LD_INT 2
2729: ARRAY
2730: PPUSH
2731: LD_VAR 0 4
2735: PUSH
2736: LD_INT 3
2738: ARRAY
2739: PPUSH
2740: CALL_OW 47
2744: GO 2710
2746: POP
2747: POP
// end ; base := GetBase ( ruMainBase ) ;
2748: LD_ADDR_VAR 0 2
2752: PUSH
2753: LD_INT 200
2755: PPUSH
2756: CALL_OW 274
2760: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2761: LD_ADDR_VAR 0 3
2765: PUSH
2766: LD_VAR 0 2
2770: PPUSH
2771: CALL_OW 417
2775: ST_TO_ADDR
// for b in blist do
2776: LD_ADDR_VAR 0 5
2780: PUSH
2781: LD_VAR 0 3
2785: PUSH
2786: FOR_IN
2787: IFFALSE 3238
// begin if b [ 1 ] = b_factory then
2789: LD_VAR 0 5
2793: PUSH
2794: LD_INT 1
2796: ARRAY
2797: PUSH
2798: LD_INT 3
2800: EQUAL
2801: IFFALSE 2952
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2803: LD_ADDR_VAR 0 8
2807: PUSH
2808: LD_VAR 0 5
2812: PUSH
2813: LD_INT 2
2815: ARRAY
2816: PPUSH
2817: LD_VAR 0 5
2821: PUSH
2822: LD_INT 3
2824: ARRAY
2825: PPUSH
2826: CALL_OW 428
2830: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2831: LD_ADDR_VAR 0 4
2835: PUSH
2836: DOUBLE
2837: LD_INT 1
2839: DEC
2840: ST_TO_ADDR
2841: LD_INT 2
2843: PUSH
2844: LD_INT 2
2846: PUSH
2847: LD_OWVAR 67
2851: PLUS
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_EXP 10
2861: PUSH
2862: LD_INT 3
2864: GREATER
2865: PUSH
2866: LD_INT 1
2868: PLUS
2869: ARRAY
2870: PUSH
2871: FOR_TO
2872: IFFALSE 2948
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2874: LD_INT 0
2876: PPUSH
2877: LD_INT 3
2879: PPUSH
2880: LD_INT 1
2882: PUSH
2883: LD_OWVAR 67
2887: PLUS
2888: PPUSH
2889: CALL_OW 380
// un := CreateHuman ;
2893: LD_ADDR_VAR 0 6
2897: PUSH
2898: CALL_OW 44
2902: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2903: LD_ADDR_EXP 39
2907: PUSH
2908: LD_EXP 39
2912: PPUSH
2913: LD_EXP 39
2917: PUSH
2918: LD_INT 1
2920: PLUS
2921: PPUSH
2922: LD_VAR 0 6
2926: PPUSH
2927: CALL_OW 1
2931: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2932: LD_VAR 0 6
2936: PPUSH
2937: LD_VAR 0 8
2941: PPUSH
2942: CALL_OW 52
// end ;
2946: GO 2871
2948: POP
2949: POP
// end else
2950: GO 3236
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2952: LD_VAR 0 5
2956: PUSH
2957: LD_INT 1
2959: ARRAY
2960: PUSH
2961: LD_INT 6
2963: PUSH
2964: LD_INT 7
2966: PUSH
2967: LD_INT 8
2969: PUSH
2970: LD_INT 10
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: IN
2979: IFFALSE 3089
// begin for i := 1 to 2 do
2981: LD_ADDR_VAR 0 4
2985: PUSH
2986: DOUBLE
2987: LD_INT 1
2989: DEC
2990: ST_TO_ADDR
2991: LD_INT 2
2993: PUSH
2994: FOR_TO
2995: IFFALSE 3085
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2997: LD_INT 0
2999: PPUSH
3000: LD_INT 4
3002: PPUSH
3003: LD_OWVAR 67
3007: PPUSH
3008: CALL_OW 380
// un := CreateHuman ;
3012: LD_ADDR_VAR 0 6
3016: PUSH
3017: CALL_OW 44
3021: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
3022: LD_ADDR_EXP 40
3026: PUSH
3027: LD_EXP 40
3031: PPUSH
3032: LD_EXP 40
3036: PUSH
3037: LD_INT 1
3039: PLUS
3040: PPUSH
3041: LD_VAR 0 6
3045: PPUSH
3046: CALL_OW 1
3050: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3051: LD_VAR 0 6
3055: PPUSH
3056: LD_VAR 0 5
3060: PUSH
3061: LD_INT 2
3063: ARRAY
3064: PPUSH
3065: LD_VAR 0 5
3069: PUSH
3070: LD_INT 3
3072: ARRAY
3073: PPUSH
3074: CALL_OW 428
3078: PPUSH
3079: CALL_OW 52
// end ;
3083: GO 2994
3085: POP
3086: POP
// end else
3087: GO 3236
// if b [ 1 ] = b_warehouse then
3089: LD_VAR 0 5
3093: PUSH
3094: LD_INT 1
3096: ARRAY
3097: PUSH
3098: LD_INT 1
3100: EQUAL
3101: IFFALSE 3236
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3103: LD_ADDR_VAR 0 4
3107: PUSH
3108: DOUBLE
3109: LD_INT 1
3111: DEC
3112: ST_TO_ADDR
3113: LD_INT 1
3115: PUSH
3116: LD_INT 1
3118: PUSH
3119: LD_OWVAR 67
3123: PLUS
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PUSH
3129: LD_EXP 10
3133: PUSH
3134: LD_INT 3
3136: GREATER
3137: PUSH
3138: LD_INT 1
3140: PLUS
3141: ARRAY
3142: PUSH
3143: FOR_TO
3144: IFFALSE 3234
// begin PrepareHuman ( false , 2 , Difficulty ) ;
3146: LD_INT 0
3148: PPUSH
3149: LD_INT 2
3151: PPUSH
3152: LD_OWVAR 67
3156: PPUSH
3157: CALL_OW 380
// un := CreateHuman ;
3161: LD_ADDR_VAR 0 6
3165: PUSH
3166: CALL_OW 44
3170: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
3171: LD_ADDR_EXP 38
3175: PUSH
3176: LD_EXP 38
3180: PPUSH
3181: LD_EXP 38
3185: PUSH
3186: LD_INT 1
3188: PLUS
3189: PPUSH
3190: LD_VAR 0 6
3194: PPUSH
3195: CALL_OW 1
3199: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3200: LD_VAR 0 6
3204: PPUSH
3205: LD_VAR 0 5
3209: PUSH
3210: LD_INT 2
3212: ARRAY
3213: PPUSH
3214: LD_VAR 0 5
3218: PUSH
3219: LD_INT 3
3221: ARRAY
3222: PPUSH
3223: CALL_OW 428
3227: PPUSH
3228: CALL_OW 52
// end ;
3232: GO 3143
3234: POP
3235: POP
// end ; end ;
3236: GO 2786
3238: POP
3239: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3240: LD_ADDR_VAR 0 3
3244: PUSH
3245: LD_INT 22
3247: PUSH
3248: LD_INT 3
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 21
3257: PUSH
3258: LD_INT 3
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 69
3273: ST_TO_ADDR
// for b in blist do
3274: LD_ADDR_VAR 0 5
3278: PUSH
3279: LD_VAR 0 3
3283: PUSH
3284: FOR_IN
3285: IFFALSE 3307
// SetBLevel ( b , 3 + Difficulty ) ;
3287: LD_VAR 0 5
3291: PPUSH
3292: LD_INT 3
3294: PUSH
3295: LD_OWVAR 67
3299: PLUS
3300: PPUSH
3301: CALL_OW 241
3305: GO 3284
3307: POP
3308: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3309: LD_ADDR_VAR 0 3
3313: PUSH
3314: LD_INT 22
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: LD_INT 30
3326: PUSH
3327: LD_INT 32
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: PPUSH
3338: CALL_OW 69
3342: ST_TO_ADDR
// for b in blist do
3343: LD_ADDR_VAR 0 5
3347: PUSH
3348: LD_VAR 0 3
3352: PUSH
3353: FOR_IN
3354: IFFALSE 3463
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3356: LD_INT 0
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: LD_INT 1
3364: PUSH
3365: LD_OWVAR 67
3369: PLUS
3370: PPUSH
3371: CALL_OW 380
// un := CreateHuman ;
3375: LD_ADDR_VAR 0 6
3379: PUSH
3380: CALL_OW 44
3384: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3385: LD_ADDR_EXP 37
3389: PUSH
3390: LD_EXP 37
3394: PPUSH
3395: LD_EXP 37
3399: PUSH
3400: LD_INT 1
3402: PLUS
3403: PPUSH
3404: LD_VAR 0 6
3408: PPUSH
3409: CALL_OW 1
3413: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3414: LD_VAR 0 6
3418: PPUSH
3419: LD_VAR 0 5
3423: PPUSH
3424: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3428: LD_VAR 0 5
3432: PPUSH
3433: LD_INT 44
3435: PUSH
3436: LD_INT 43
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PUSH
3443: LD_VAR 0 5
3447: PUSH
3448: LD_INT 2
3450: MOD
3451: PUSH
3452: LD_INT 1
3454: PLUS
3455: ARRAY
3456: PPUSH
3457: CALL_OW 431
// end ;
3461: GO 3353
3463: POP
3464: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3465: LD_ADDR_VAR 0 3
3469: PUSH
3470: LD_INT 22
3472: PUSH
3473: LD_INT 3
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: LD_INT 30
3482: PUSH
3483: LD_INT 31
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PPUSH
3494: CALL_OW 69
3498: ST_TO_ADDR
// for b in blist do
3499: LD_ADDR_VAR 0 5
3503: PUSH
3504: LD_VAR 0 3
3508: PUSH
3509: FOR_IN
3510: IFFALSE 3609
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3512: LD_INT 0
3514: PPUSH
3515: LD_INT 1
3517: PPUSH
3518: LD_INT 1
3520: PUSH
3521: LD_OWVAR 67
3525: PLUS
3526: PPUSH
3527: CALL_OW 380
// un := CreateHuman ;
3531: LD_ADDR_VAR 0 6
3535: PUSH
3536: CALL_OW 44
3540: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3541: LD_ADDR_EXP 37
3545: PUSH
3546: LD_EXP 37
3550: PPUSH
3551: LD_EXP 37
3555: PUSH
3556: LD_INT 1
3558: PLUS
3559: PPUSH
3560: LD_VAR 0 6
3564: PPUSH
3565: CALL_OW 1
3569: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3570: LD_VAR 0 6
3574: PPUSH
3575: LD_VAR 0 5
3579: PPUSH
3580: CALL_OW 254
3584: PUSH
3585: LD_INT 3
3587: PLUS
3588: PPUSH
3589: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3593: LD_VAR 0 6
3597: PPUSH
3598: LD_VAR 0 5
3602: PPUSH
3603: CALL_OW 52
// end ;
3607: GO 3509
3609: POP
3610: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3611: LD_ADDR_VAR 0 3
3615: PUSH
3616: LD_INT 22
3618: PUSH
3619: LD_INT 3
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: LD_INT 30
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 30
3641: PUSH
3642: LD_INT 5
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: LIST
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PPUSH
3658: CALL_OW 69
3662: ST_TO_ADDR
// for b in blist do
3663: LD_ADDR_VAR 0 5
3667: PUSH
3668: LD_VAR 0 3
3672: PUSH
3673: FOR_IN
3674: IFFALSE 3770
// begin for i := 1 to 2 do
3676: LD_ADDR_VAR 0 4
3680: PUSH
3681: DOUBLE
3682: LD_INT 1
3684: DEC
3685: ST_TO_ADDR
3686: LD_INT 2
3688: PUSH
3689: FOR_TO
3690: IFFALSE 3766
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3692: LD_INT 0
3694: PPUSH
3695: LD_INT 1
3697: PPUSH
3698: LD_INT 1
3700: PUSH
3701: LD_OWVAR 67
3705: PLUS
3706: PPUSH
3707: CALL_OW 380
// un := CreateHuman ;
3711: LD_ADDR_VAR 0 6
3715: PUSH
3716: CALL_OW 44
3720: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3721: LD_ADDR_EXP 37
3725: PUSH
3726: LD_EXP 37
3730: PPUSH
3731: LD_EXP 37
3735: PUSH
3736: LD_INT 1
3738: PLUS
3739: PPUSH
3740: LD_VAR 0 6
3744: PPUSH
3745: CALL_OW 1
3749: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3750: LD_VAR 0 6
3754: PPUSH
3755: LD_VAR 0 5
3759: PPUSH
3760: CALL_OW 52
// end ;
3764: GO 3689
3766: POP
3767: POP
// end ;
3768: GO 3673
3770: POP
3771: POP
// if ibrahimOnRuSide then
3772: LD_EXP 3
3776: IFFALSE 3874
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3778: LD_ADDR_EXP 21
3782: PUSH
3783: LD_STRING IbrahimRu
3785: PPUSH
3786: LD_INT 0
3788: PPUSH
3789: LD_STRING 
3791: PPUSH
3792: CALL 30395 0 3
3796: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3797: LD_EXP 21
3801: PPUSH
3802: LD_INT 121
3804: PPUSH
3805: LD_INT 78
3807: PPUSH
3808: LD_INT 0
3810: PPUSH
3811: CALL_OW 48
// ComHold ( Ibrahim ) ;
3815: LD_EXP 21
3819: PPUSH
3820: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3824: LD_INT 1
3826: PPUSH
3827: LD_INT 1
3829: PPUSH
3830: LD_INT 2
3832: PPUSH
3833: CALL_OW 380
// ruSol := CreateHuman ;
3837: LD_ADDR_EXP 42
3841: PUSH
3842: CALL_OW 44
3846: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3847: LD_EXP 42
3851: PPUSH
3852: LD_INT 121
3854: PPUSH
3855: LD_INT 75
3857: PPUSH
3858: LD_INT 0
3860: PPUSH
3861: CALL_OW 48
// ComHold ( ruSol ) ;
3865: LD_EXP 42
3869: PPUSH
3870: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3874: LD_ADDR_VAR 0 4
3878: PUSH
3879: DOUBLE
3880: LD_INT 1
3882: DEC
3883: ST_TO_ADDR
3884: LD_INT 2
3886: PUSH
3887: LD_INT 2
3889: PUSH
3890: LD_OWVAR 67
3894: PLUS
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: PUSH
3900: LD_EXP 10
3904: PUSH
3905: LD_INT 3
3907: GREATER
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: ARRAY
3913: PUSH
3914: FOR_TO
3915: IFFALSE 3984
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3917: LD_VAR 0 8
3921: PPUSH
3922: LD_INT 21
3924: PUSH
3925: LD_INT 23
3927: PUSH
3928: LD_INT 24
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: LIST
3935: PUSH
3936: LD_VAR 0 4
3940: PUSH
3941: LD_INT 3
3943: MOD
3944: PUSH
3945: LD_INT 1
3947: PLUS
3948: ARRAY
3949: PPUSH
3950: LD_INT 1
3952: PPUSH
3953: LD_INT 1
3955: PPUSH
3956: LD_INT 43
3958: PUSH
3959: LD_INT 44
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: CALL_OW 185
3982: GO 3914
3984: POP
3985: POP
// end ;
3986: LD_VAR 0 1
3990: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x ;
3991: LD_EXP 41
3995: PUSH
3996: LD_EXP 4
4000: NOT
4001: AND
4002: IFFALSE 4489
4004: GO 4006
4006: DISABLE
4007: LD_INT 0
4009: PPUSH
4010: PPUSH
4011: PPUSH
4012: PPUSH
4013: PPUSH
// begin enable ;
4014: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
4015: LD_ADDR_VAR 0 2
4019: PUSH
4020: LD_EXP 41
4024: PPUSH
4025: LD_INT 21
4027: PUSH
4028: LD_INT 2
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: PPUSH
4035: CALL_OW 72
4039: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
4040: LD_ADDR_VAR 0 4
4044: PUSH
4045: LD_INT 81
4047: PUSH
4048: LD_INT 3
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 2
4057: PUSH
4058: LD_INT 95
4060: PUSH
4061: LD_INT 4
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 95
4070: PUSH
4071: LD_INT 5
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: LD_INT 95
4080: PUSH
4081: LD_INT 6
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 95
4090: PUSH
4091: LD_INT 7
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: PPUSH
4109: CALL_OW 69
4113: ST_TO_ADDR
// for i in filter do
4114: LD_ADDR_VAR 0 1
4118: PUSH
4119: LD_VAR 0 2
4123: PUSH
4124: FOR_IN
4125: IFFALSE 4487
// begin tmp := IsDrivenBy ( i ) ;
4127: LD_ADDR_VAR 0 3
4131: PUSH
4132: LD_VAR 0 1
4136: PPUSH
4137: CALL_OW 311
4141: ST_TO_ADDR
// if not tmp then
4142: LD_VAR 0 3
4146: NOT
4147: IFFALSE 4151
// continue ;
4149: GO 4124
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4151: LD_VAR 0 1
4155: PPUSH
4156: CALL_OW 261
4160: PUSH
4161: LD_INT 90
4163: GREATER
4164: PUSH
4165: LD_VAR 0 1
4169: PPUSH
4170: CALL_OW 110
4174: PUSH
4175: LD_INT 2
4177: EQUAL
4178: AND
4179: IFFALSE 4195
// SetTag ( i , 0 ) else
4181: LD_VAR 0 1
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: CALL_OW 109
4193: GO 4238
// if GetTag ( i ) = 2 then
4195: LD_VAR 0 1
4199: PPUSH
4200: CALL_OW 110
4204: PUSH
4205: LD_INT 2
4207: EQUAL
4208: IFFALSE 4238
// begin x := rand ( 1 , 2 ) ;
4210: LD_ADDR_VAR 0 5
4214: PUSH
4215: LD_INT 1
4217: PPUSH
4218: LD_INT 2
4220: PPUSH
4221: CALL_OW 12
4225: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 200
4233: PPUSH
4234: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4238: LD_VAR 0 1
4242: PPUSH
4243: CALL_OW 256
4247: PUSH
4248: LD_INT 600
4250: GREATEREQUAL
4251: PUSH
4252: LD_VAR 0 1
4256: PPUSH
4257: CALL_OW 110
4261: NOT
4262: AND
4263: IFFALSE 4289
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4265: LD_VAR 0 1
4269: PPUSH
4270: LD_VAR 0 4
4274: PPUSH
4275: LD_VAR 0 1
4279: PPUSH
4280: CALL_OW 74
4284: PPUSH
4285: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4289: LD_VAR 0 1
4293: PPUSH
4294: CALL_OW 256
4298: PUSH
4299: LD_INT 600
4301: LESS
4302: PUSH
4303: LD_VAR 0 1
4307: PPUSH
4308: CALL_OW 110
4312: NOT
4313: AND
4314: IFFALSE 4343
// begin SetTag ( i , 1 ) ;
4316: LD_VAR 0 1
4320: PPUSH
4321: LD_INT 1
4323: PPUSH
4324: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4328: LD_VAR 0 1
4332: PPUSH
4333: LD_INT 112
4335: PPUSH
4336: LD_INT 119
4338: PPUSH
4339: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 110
4352: PUSH
4353: LD_INT 1
4355: EQUAL
4356: PUSH
4357: LD_VAR 0 1
4361: PPUSH
4362: LD_INT 112
4364: PPUSH
4365: LD_INT 119
4367: PPUSH
4368: CALL_OW 297
4372: PUSH
4373: LD_INT 9
4375: LESS
4376: AND
4377: PUSH
4378: LD_VAR 0 3
4382: AND
4383: IFFALSE 4485
// begin ComExitVehicle ( tmp ) ;
4385: LD_VAR 0 3
4389: PPUSH
4390: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_VAR 0 1
4403: PPUSH
4404: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4408: LD_INT 35
4410: PPUSH
4411: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4415: LD_VAR 0 1
4419: PPUSH
4420: CALL_OW 256
4424: PUSH
4425: LD_INT 1000
4427: EQUAL
4428: IFFALSE 4408
// ComEnterUnit ( tmp , i ) ;
4430: LD_VAR 0 3
4434: PPUSH
4435: LD_VAR 0 1
4439: PPUSH
4440: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4444: LD_VAR 0 1
4448: PPUSH
4449: CALL_OW 261
4453: PUSH
4454: LD_INT 50
4456: LESSEQUAL
4457: IFFALSE 4473
// SetTag ( i , 2 ) else
4459: LD_VAR 0 1
4463: PPUSH
4464: LD_INT 2
4466: PPUSH
4467: CALL_OW 109
4471: GO 4485
// SetTag ( i , 0 ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 0
4480: PPUSH
4481: CALL_OW 109
// end ; end ;
4485: GO 4124
4487: POP
4488: POP
// end ;
4489: PPOPN 5
4491: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4492: LD_EXP 4
4496: NOT
4497: PUSH
4498: LD_EXP 38
4502: AND
4503: IFFALSE 4764
4505: GO 4507
4507: DISABLE
4508: LD_INT 0
4510: PPUSH
4511: PPUSH
4512: PPUSH
4513: PPUSH
// begin enable ;
4514: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: LD_INT 3
4522: PPUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 3
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PUSH
4533: LD_INT 21
4535: PUSH
4536: LD_INT 3
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 3
4545: PUSH
4546: LD_INT 24
4548: PUSH
4549: LD_INT 1000
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: PPUSH
4565: CALL_OW 70
4569: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: LD_EXP 38
4579: PPUSH
4580: LD_INT 50
4582: PUSH
4583: EMPTY
4584: LIST
4585: PPUSH
4586: CALL_OW 72
4590: ST_TO_ADDR
// if filter and tmp then
4591: LD_VAR 0 2
4595: PUSH
4596: LD_VAR 0 3
4600: AND
4601: IFFALSE 4693
// begin for i in tmp do
4603: LD_ADDR_VAR 0 1
4607: PUSH
4608: LD_VAR 0 3
4612: PUSH
4613: FOR_IN
4614: IFFALSE 4689
// begin if GetTag ( i ) = tEscape then
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 110
4625: PUSH
4626: LD_EXP 17
4630: EQUAL
4631: IFFALSE 4635
// continue ;
4633: GO 4613
// if IsInUnit ( i ) then
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 310
4644: IFFALSE 4657
// ComExitBuilding ( i ) else
4646: LD_VAR 0 1
4650: PPUSH
4651: CALL_OW 122
4655: GO 4687
// if not HasTask ( i ) then
4657: LD_VAR 0 1
4661: PPUSH
4662: CALL_OW 314
4666: NOT
4667: IFFALSE 4687
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4669: LD_VAR 0 1
4673: PPUSH
4674: LD_VAR 0 2
4678: PUSH
4679: LD_INT 1
4681: ARRAY
4682: PPUSH
4683: CALL_OW 130
// end ;
4687: GO 4613
4689: POP
4690: POP
// end else
4691: GO 4764
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4693: LD_VAR 0 3
4697: PPUSH
4698: LD_INT 3
4700: PUSH
4701: LD_INT 54
4703: PUSH
4704: EMPTY
4705: LIST
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: PPUSH
4711: CALL_OW 72
4715: IFFALSE 4764
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4717: LD_ADDR_VAR 0 1
4721: PUSH
4722: LD_VAR 0 3
4726: PPUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 54
4732: PUSH
4733: EMPTY
4734: LIST
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PPUSH
4740: CALL_OW 72
4744: PUSH
4745: FOR_IN
4746: IFFALSE 4762
// ComEnterUnit ( i , ruMainBase ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 200
4755: PPUSH
4756: CALL_OW 120
4760: GO 4745
4762: POP
4763: POP
// end ; end ;
4764: PPOPN 4
4766: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4767: LD_EXP 4
4771: NOT
4772: PUSH
4773: LD_EXP 40
4777: AND
4778: IFFALSE 5057
4780: GO 4782
4782: DISABLE
4783: LD_INT 0
4785: PPUSH
4786: PPUSH
4787: PPUSH
4788: PPUSH
// begin enable ;
4789: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4790: LD_ADDR_VAR 0 2
4794: PUSH
4795: LD_INT 3
4797: PPUSH
4798: LD_INT 22
4800: PUSH
4801: LD_INT 3
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PUSH
4808: LD_INT 21
4810: PUSH
4811: LD_INT 1
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 3
4820: PUSH
4821: LD_INT 24
4823: PUSH
4824: LD_INT 1000
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: PPUSH
4840: CALL_OW 70
4844: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4845: LD_ADDR_VAR 0 3
4849: PUSH
4850: LD_EXP 40
4854: PPUSH
4855: LD_INT 50
4857: PUSH
4858: EMPTY
4859: LIST
4860: PPUSH
4861: CALL_OW 72
4865: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4866: LD_ADDR_VAR 0 4
4870: PUSH
4871: LD_INT 118
4873: PPUSH
4874: LD_INT 121
4876: PPUSH
4877: CALL_OW 428
4881: ST_TO_ADDR
// if filter and tmp then
4882: LD_VAR 0 2
4886: PUSH
4887: LD_VAR 0 3
4891: AND
4892: IFFALSE 4984
// begin for i in tmp do
4894: LD_ADDR_VAR 0 1
4898: PUSH
4899: LD_VAR 0 3
4903: PUSH
4904: FOR_IN
4905: IFFALSE 4980
// begin if GetTag ( i ) = tEscape then
4907: LD_VAR 0 1
4911: PPUSH
4912: CALL_OW 110
4916: PUSH
4917: LD_EXP 17
4921: EQUAL
4922: IFFALSE 4926
// continue ;
4924: GO 4904
// if IsInUnit ( i ) then
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 310
4935: IFFALSE 4948
// ComExitBuilding ( i ) else
4937: LD_VAR 0 1
4941: PPUSH
4942: CALL_OW 122
4946: GO 4978
// if not HasTask ( i ) then
4948: LD_VAR 0 1
4952: PPUSH
4953: CALL_OW 314
4957: NOT
4958: IFFALSE 4978
// ComHeal ( i , filter [ 1 ] ) ;
4960: LD_VAR 0 1
4964: PPUSH
4965: LD_VAR 0 2
4969: PUSH
4970: LD_INT 1
4972: ARRAY
4973: PPUSH
4974: CALL_OW 128
// end ;
4978: GO 4904
4980: POP
4981: POP
// end else
4982: GO 5057
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4984: LD_VAR 0 3
4988: PPUSH
4989: LD_INT 3
4991: PUSH
4992: LD_INT 54
4994: PUSH
4995: EMPTY
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 72
5006: IFFALSE 5057
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
5008: LD_ADDR_VAR 0 1
5012: PUSH
5013: LD_VAR 0 3
5017: PPUSH
5018: LD_INT 3
5020: PUSH
5021: LD_INT 54
5023: PUSH
5024: EMPTY
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PPUSH
5031: CALL_OW 72
5035: PUSH
5036: FOR_IN
5037: IFFALSE 5055
// ComEnterUnit ( i , lab ) ;
5039: LD_VAR 0 1
5043: PPUSH
5044: LD_VAR 0 4
5048: PPUSH
5049: CALL_OW 120
5053: GO 5036
5055: POP
5056: POP
// end ; end ; end_of_file
5057: PPOPN 4
5059: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5060: LD_VAR 0 1
5064: PPUSH
5065: CALL 26106 0 1
// if un = Heike then
5069: LD_VAR 0 1
5073: PUSH
5074: LD_EXP 18
5078: EQUAL
5079: IFFALSE 5088
// YouLost ( Heike ) ;
5081: LD_STRING Heike
5083: PPUSH
5084: CALL_OW 104
// if un in ruEng then
5088: LD_VAR 0 1
5092: PUSH
5093: LD_EXP 38
5097: IN
5098: IFFALSE 5116
// ruEng := ruEng diff un ;
5100: LD_ADDR_EXP 38
5104: PUSH
5105: LD_EXP 38
5109: PUSH
5110: LD_VAR 0 1
5114: DIFF
5115: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
5116: LD_VAR 0 1
5120: PUSH
5121: LD_INT 22
5123: PUSH
5124: LD_INT 2
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: LD_INT 21
5133: PUSH
5134: LD_INT 1
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PUSH
5141: LD_INT 23
5143: PUSH
5144: LD_INT 2
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: LIST
5155: PPUSH
5156: CALL_OW 69
5160: IN
5161: IFFALSE 5177
// loseCounter := loseCounter + 1 ;
5163: LD_ADDR_EXP 6
5167: PUSH
5168: LD_EXP 6
5172: PUSH
5173: LD_INT 1
5175: PLUS
5176: ST_TO_ADDR
// end ;
5177: PPOPN 1
5179: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
5180: LD_INT 0
5182: PPUSH
5183: PPUSH
// begin if un in ruMobile then
5184: LD_VAR 0 2
5188: PUSH
5189: LD_EXP 41
5193: IN
5194: IFFALSE 5353
// begin ruMobile := ruMobile diff un ;
5196: LD_ADDR_EXP 41
5200: PUSH
5201: LD_EXP 41
5205: PUSH
5206: LD_VAR 0 2
5210: DIFF
5211: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
5212: LD_ADDR_VAR 0 5
5216: PUSH
5217: LD_VAR 0 2
5221: PPUSH
5222: CALL_OW 264
5226: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5227: LD_ADDR_VAR 0 6
5231: PUSH
5232: LD_INT 110
5234: PPUSH
5235: LD_INT 126
5237: PPUSH
5238: CALL_OW 428
5242: ST_TO_ADDR
// if not driver or not fac then
5243: LD_VAR 0 1
5247: NOT
5248: PUSH
5249: LD_VAR 0 6
5253: NOT
5254: OR
5255: IFFALSE 5259
// exit ;
5257: GO 5353
// AddComMoveXY ( driver , 111 , 121 ) ;
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_INT 111
5266: PPUSH
5267: LD_INT 121
5269: PPUSH
5270: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5274: LD_VAR 0 1
5278: PPUSH
5279: LD_VAR 0 6
5283: PPUSH
5284: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5288: LD_INT 35
5290: PPUSH
5291: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5295: LD_VAR 0 1
5299: PPUSH
5300: CALL_OW 301
5304: PUSH
5305: LD_VAR 0 1
5309: PPUSH
5310: CALL_OW 310
5314: OR
5315: IFFALSE 5288
// if IsDead ( driver ) then
5317: LD_VAR 0 1
5321: PPUSH
5322: CALL_OW 301
5326: IFFALSE 5330
// exit ;
5328: GO 5353
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5330: LD_VAR 0 6
5334: PPUSH
5335: LD_INT 21
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_INT 1
5343: PPUSH
5344: LD_VAR 0 5
5348: PPUSH
5349: CALL_OW 185
// end ; end ;
5353: PPOPN 6
5355: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5356: LD_VAR 0 1
5360: PPUSH
5361: LD_VAR 0 2
5365: PPUSH
5366: CALL 26226 0 2
// if GetSide ( fac ) = 3 then
5370: LD_VAR 0 2
5374: PPUSH
5375: CALL_OW 255
5379: PUSH
5380: LD_INT 3
5382: EQUAL
5383: IFFALSE 5429
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5385: LD_ADDR_EXP 41
5389: PUSH
5390: LD_EXP 41
5394: PPUSH
5395: LD_EXP 41
5399: PUSH
5400: LD_INT 1
5402: PLUS
5403: PPUSH
5404: LD_VAR 0 1
5408: PPUSH
5409: CALL_OW 1
5413: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5414: LD_VAR 0 1
5418: PPUSH
5419: LD_INT 110
5421: PPUSH
5422: LD_INT 117
5424: PPUSH
5425: CALL_OW 171
// end ; end ;
5429: PPOPN 2
5431: END
// on LeaveBuilding ( b , un ) do var barracks ;
5432: LD_INT 0
5434: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5435: LD_VAR 0 1
5439: PUSH
5440: LD_INT 130
5442: PPUSH
5443: LD_INT 17
5445: PPUSH
5446: CALL_OW 428
5450: PUSH
5451: LD_INT 138
5453: PPUSH
5454: LD_INT 22
5456: PPUSH
5457: CALL_OW 428
5461: PUSH
5462: LD_INT 123
5464: PPUSH
5465: LD_INT 17
5467: PPUSH
5468: CALL_OW 428
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: LIST
5477: IN
5478: IFFALSE 5502
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5480: LD_VAR 0 2
5484: PPUSH
5485: LD_INT 135
5487: PPUSH
5488: LD_INT 31
5490: PPUSH
5491: CALL_OW 428
5495: PPUSH
5496: CALL_OW 180
// exit ;
5500: GO 5776
// end ; if b = HexInfo ( 135 , 31 ) then
5502: LD_VAR 0 1
5506: PUSH
5507: LD_INT 135
5509: PPUSH
5510: LD_INT 31
5512: PPUSH
5513: CALL_OW 428
5517: EQUAL
5518: IFFALSE 5590
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_INT 106
5527: PPUSH
5528: LD_INT 51
5530: PPUSH
5531: CALL_OW 428
5535: PPUSH
5536: CALL_OW 180
// if not explodeFirstDepot then
5540: LD_EXP 12
5544: NOT
5545: IFFALSE 5588
// begin explodeFirstDepot := true ;
5547: LD_ADDR_EXP 12
5551: PUSH
5552: LD_INT 1
5554: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5555: LD_INT 525
5557: PPUSH
5558: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5562: LD_INT 127
5564: PPUSH
5565: LD_INT 27
5567: PPUSH
5568: LD_INT 1
5570: PPUSH
5571: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5575: LD_INT 125
5577: PPUSH
5578: LD_INT 29
5580: PPUSH
5581: LD_INT 1
5583: PPUSH
5584: CALL_OW 453
// end ; exit ;
5588: GO 5776
// end ; if b = HexInfo ( 106 , 51 ) then
5590: LD_VAR 0 1
5594: PUSH
5595: LD_INT 106
5597: PPUSH
5598: LD_INT 51
5600: PPUSH
5601: CALL_OW 428
5605: EQUAL
5606: IFFALSE 5706
// begin AddComMoveXY ( un , 106 , 93 ) ;
5608: LD_VAR 0 2
5612: PPUSH
5613: LD_INT 106
5615: PPUSH
5616: LD_INT 93
5618: PPUSH
5619: CALL_OW 171
// if not explodeSecondDepot then
5623: LD_EXP 13
5627: NOT
5628: IFFALSE 5704
// begin explodeSecondDepot := true ;
5630: LD_ADDR_EXP 13
5634: PUSH
5635: LD_INT 1
5637: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5638: LD_INT 420
5640: PPUSH
5641: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5645: LD_INT 111
5647: PPUSH
5648: LD_INT 75
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5658: LD_INT 111
5660: PPUSH
5661: LD_INT 75
5663: PPUSH
5664: LD_INT 1
5666: PPUSH
5667: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5671: LD_INT 108
5673: PPUSH
5674: LD_INT 69
5676: PPUSH
5677: LD_INT 1
5679: PPUSH
5680: CALL_OW 453
// wait ( 0 0$2 ) ;
5684: LD_INT 70
5686: PPUSH
5687: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5691: LD_INT 94
5693: PPUSH
5694: LD_INT 65
5696: PPUSH
5697: LD_INT 1
5699: PPUSH
5700: CALL_OW 453
// end ; exit ;
5704: GO 5776
// end ; if GetBType ( b ) = b_bunker then
5706: LD_VAR 0 1
5710: PPUSH
5711: CALL_OW 266
5715: PUSH
5716: LD_INT 32
5718: EQUAL
5719: IFFALSE 5776
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5721: LD_ADDR_VAR 0 3
5725: PUSH
5726: LD_VAR 0 2
5730: PPUSH
5731: LD_INT 5
5733: PPUSH
5734: CALL 1008 0 2
5738: ST_TO_ADDR
// if barracks then
5739: LD_VAR 0 3
5743: IFFALSE 5761
// AddComEnterUnit ( un , barracks ) else
5745: LD_VAR 0 2
5749: PPUSH
5750: LD_VAR 0 3
5754: PPUSH
5755: CALL_OW 180
5759: GO 5776
// AddComMoveXY ( un , 116 , 110 ) ;
5761: LD_VAR 0 2
5765: PPUSH
5766: LD_INT 116
5768: PPUSH
5769: LD_INT 110
5771: PPUSH
5772: CALL_OW 171
// end ; end ;
5776: PPOPN 3
5778: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5779: LD_VAR 0 1
5783: PUSH
5784: LD_EXP 23
5788: EQUAL
5789: PUSH
5790: LD_VAR 0 2
5794: PUSH
5795: LD_INT 3
5797: PUSH
5798: LD_INT 6
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: IN
5805: AND
5806: IFFALSE 5837
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5808: LD_ADDR_EXP 8
5812: PUSH
5813: LD_VAR 0 1
5817: PPUSH
5818: CALL_OW 250
5822: PUSH
5823: LD_VAR 0 1
5827: PPUSH
5828: CALL_OW 251
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: ST_TO_ADDR
// end ; end_of_file
5837: PPOPN 3
5839: END
// export function Action ; var i , j , un , veh , tmp , rutmp ; begin
5840: LD_INT 0
5842: PPUSH
5843: PPUSH
5844: PPUSH
5845: PPUSH
5846: PPUSH
5847: PPUSH
5848: PPUSH
// InGameOn ;
5849: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
5853: LD_INT 5
5855: PPUSH
5856: LD_INT 2
5858: PPUSH
5859: CALL_OW 343
// music_nat := 4 ;
5863: LD_ADDR_OWVAR 71
5867: PUSH
5868: LD_INT 4
5870: ST_TO_ADDR
// music_class := music_combat ;
5871: LD_ADDR_OWVAR 72
5875: PUSH
5876: LD_INT 1
5878: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5879: LD_INT 133
5881: PPUSH
5882: LD_INT 2
5884: PPUSH
5885: LD_INT 2
5887: PPUSH
5888: LD_INT 10
5890: PPUSH
5891: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
5895: LD_INT 133
5897: PPUSH
5898: LD_INT 2
5900: PPUSH
5901: CALL_OW 86
// wait ( 0 0$1 ) ;
5905: LD_INT 35
5907: PPUSH
5908: CALL_OW 67
// uc_side := 6 ;
5912: LD_ADDR_OWVAR 20
5916: PUSH
5917: LD_INT 6
5919: ST_TO_ADDR
// uc_nation := 3 ;
5920: LD_ADDR_OWVAR 21
5924: PUSH
5925: LD_INT 3
5927: ST_TO_ADDR
// rutmp := [ ] ;
5928: LD_ADDR_VAR 0 7
5932: PUSH
5933: EMPTY
5934: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
5935: LD_INT 6
5937: PPUSH
5938: LD_INT 3
5940: PPUSH
5941: LD_INT 21
5943: PPUSH
5944: LD_INT 1
5946: PPUSH
5947: LD_INT 1
5949: PPUSH
5950: LD_INT 44
5952: PPUSH
5953: LD_INT 66
5955: PPUSH
5956: CALL 336 0 7
// veh := CreateVehicle ;
5960: LD_ADDR_VAR 0 5
5964: PUSH
5965: CALL_OW 45
5969: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
5970: LD_VAR 0 5
5974: PPUSH
5975: LD_INT 3
5977: PPUSH
5978: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
5982: LD_VAR 0 5
5986: PPUSH
5987: LD_INT 8
5989: PPUSH
5990: LD_INT 0
5992: PPUSH
5993: CALL_OW 49
// SetLives ( veh , 500 ) ;
5997: LD_VAR 0 5
6001: PPUSH
6002: LD_INT 500
6004: PPUSH
6005: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
6009: LD_INT 0
6011: PPUSH
6012: LD_INT 3
6014: PPUSH
6015: LD_INT 3
6017: PPUSH
6018: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6022: CALL_OW 44
6026: PPUSH
6027: LD_VAR 0 5
6031: PPUSH
6032: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
6036: LD_VAR 0 5
6040: PPUSH
6041: LD_INT 133
6043: PPUSH
6044: LD_INT 11
6046: PPUSH
6047: CALL_OW 111
// rutmp := [ veh ] ;
6051: LD_ADDR_VAR 0 7
6055: PUSH
6056: LD_VAR 0 5
6060: PUSH
6061: EMPTY
6062: LIST
6063: ST_TO_ADDR
// for i := 1 to 4 do
6064: LD_ADDR_VAR 0 2
6068: PUSH
6069: DOUBLE
6070: LD_INT 1
6072: DEC
6073: ST_TO_ADDR
6074: LD_INT 4
6076: PUSH
6077: FOR_TO
6078: IFFALSE 6185
// begin PrepareHuman ( false , i , 2 ) ;
6080: LD_INT 0
6082: PPUSH
6083: LD_VAR 0 2
6087: PPUSH
6088: LD_INT 2
6090: PPUSH
6091: CALL_OW 380
// un := CreateHuman ;
6095: LD_ADDR_VAR 0 4
6099: PUSH
6100: CALL_OW 44
6104: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6105: LD_VAR 0 4
6109: PPUSH
6110: LD_INT 3
6112: PPUSH
6113: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6117: LD_VAR 0 4
6121: PPUSH
6122: LD_INT 8
6124: PPUSH
6125: LD_INT 0
6127: PPUSH
6128: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
6132: LD_ADDR_VAR 0 7
6136: PUSH
6137: LD_VAR 0 7
6141: PPUSH
6142: LD_VAR 0 7
6146: PUSH
6147: LD_INT 1
6149: PLUS
6150: PPUSH
6151: LD_VAR 0 4
6155: PPUSH
6156: CALL_OW 1
6160: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
6161: LD_VAR 0 4
6165: PPUSH
6166: LD_INT 133
6168: PPUSH
6169: LD_INT 11
6171: PPUSH
6172: CALL_OW 111
// wait ( 0 0$0.5 ) ;
6176: LD_INT 18
6178: PPUSH
6179: CALL_OW 67
// end ;
6183: GO 6077
6185: POP
6186: POP
// for i in rutmp do
6187: LD_ADDR_VAR 0 2
6191: PUSH
6192: LD_VAR 0 7
6196: PUSH
6197: FOR_IN
6198: IFFALSE 6247
// begin AddComMoveXY ( i , 99 , 65 ) ;
6200: LD_VAR 0 2
6204: PPUSH
6205: LD_INT 99
6207: PPUSH
6208: LD_INT 65
6210: PPUSH
6211: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
6215: LD_VAR 0 2
6219: PPUSH
6220: LD_INT 76
6222: PPUSH
6223: LD_INT 108
6225: PPUSH
6226: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6230: LD_VAR 0 2
6234: PPUSH
6235: LD_INT 92
6237: PPUSH
6238: LD_INT 176
6240: PPUSH
6241: CALL_OW 171
// end ;
6245: GO 6197
6247: POP
6248: POP
// wait ( 0 0$10 ) ;
6249: LD_INT 350
6251: PPUSH
6252: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6256: LD_ADDR_VAR 0 6
6260: PUSH
6261: LD_EXP 18
6265: PUSH
6266: LD_EXP 19
6270: PUSH
6271: LD_EXP 20
6275: PUSH
6276: LD_EXP 21
6280: PUSH
6281: LD_EXP 22
6285: PUSH
6286: LD_EXP 23
6290: PUSH
6291: LD_EXP 24
6295: PUSH
6296: LD_EXP 25
6300: PUSH
6301: LD_EXP 27
6305: PUSH
6306: LD_EXP 28
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: PUSH
6323: LD_EXP 29
6327: UNION
6328: ST_TO_ADDR
// tmp := tmp diff 0 ;
6329: LD_ADDR_VAR 0 6
6333: PUSH
6334: LD_VAR 0 6
6338: PUSH
6339: LD_INT 0
6341: DIFF
6342: ST_TO_ADDR
// for i in heikeVehicles do
6343: LD_ADDR_VAR 0 2
6347: PUSH
6348: LD_EXP 30
6352: PUSH
6353: FOR_IN
6354: IFFALSE 6722
// begin if not tmp then
6356: LD_VAR 0 6
6360: NOT
6361: IFFALSE 6365
// continue ;
6363: GO 6353
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6365: LD_INT 2
6367: PPUSH
6368: LD_VAR 0 2
6372: PUSH
6373: LD_INT 5
6375: ARRAY
6376: PPUSH
6377: LD_VAR 0 2
6381: PUSH
6382: LD_INT 1
6384: ARRAY
6385: PPUSH
6386: LD_VAR 0 2
6390: PUSH
6391: LD_INT 2
6393: ARRAY
6394: PPUSH
6395: LD_VAR 0 2
6399: PUSH
6400: LD_INT 3
6402: ARRAY
6403: PPUSH
6404: LD_VAR 0 2
6408: PUSH
6409: LD_INT 4
6411: ARRAY
6412: PPUSH
6413: LD_INT 34
6415: PPUSH
6416: CALL 336 0 7
// veh := CreateVehicle ;
6420: LD_ADDR_VAR 0 5
6424: PUSH
6425: CALL_OW 45
6429: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
6430: LD_VAR 0 2
6434: PUSH
6435: LD_INT 4
6437: ARRAY
6438: PUSH
6439: LD_INT 51
6441: PUSH
6442: LD_INT 32
6444: PUSH
6445: LD_INT 12
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: IN
6453: IFFALSE 6533
// begin if i [ 7 ] [ 1 ] then
6455: LD_VAR 0 2
6459: PUSH
6460: LD_INT 7
6462: ARRAY
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: IFFALSE 6494
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6469: LD_VAR 0 5
6473: PPUSH
6474: LD_INT 1
6476: PPUSH
6477: LD_VAR 0 2
6481: PUSH
6482: LD_INT 7
6484: ARRAY
6485: PUSH
6486: LD_INT 1
6488: ARRAY
6489: PPUSH
6490: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6494: LD_VAR 0 2
6498: PUSH
6499: LD_INT 7
6501: ARRAY
6502: PUSH
6503: LD_INT 2
6505: ARRAY
6506: IFFALSE 6533
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6508: LD_VAR 0 5
6512: PPUSH
6513: LD_INT 2
6515: PPUSH
6516: LD_VAR 0 2
6520: PUSH
6521: LD_INT 7
6523: ARRAY
6524: PUSH
6525: LD_INT 2
6527: ARRAY
6528: PPUSH
6529: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6533: LD_VAR 0 5
6537: PPUSH
6538: LD_INT 3
6540: PPUSH
6541: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6545: LD_VAR 0 5
6549: PPUSH
6550: LD_INT 8
6552: PPUSH
6553: LD_INT 0
6555: PPUSH
6556: CALL_OW 49
// for j := 1 to tmp do
6560: LD_ADDR_VAR 0 3
6564: PUSH
6565: DOUBLE
6566: LD_INT 1
6568: DEC
6569: ST_TO_ADDR
6570: LD_VAR 0 6
6574: PUSH
6575: FOR_TO
6576: IFFALSE 6649
// begin if i [ 8 ] = GetClass ( tmp [ j ] ) then
6578: LD_VAR 0 2
6582: PUSH
6583: LD_INT 8
6585: ARRAY
6586: PUSH
6587: LD_VAR 0 6
6591: PUSH
6592: LD_VAR 0 3
6596: ARRAY
6597: PPUSH
6598: CALL_OW 257
6602: EQUAL
6603: IFFALSE 6647
// begin PlaceHumanInUnit ( tmp [ j ] , veh ) ;
6605: LD_VAR 0 6
6609: PUSH
6610: LD_VAR 0 3
6614: ARRAY
6615: PPUSH
6616: LD_VAR 0 5
6620: PPUSH
6621: CALL_OW 52
// tmp := Delete ( tmp , j ) ;
6625: LD_ADDR_VAR 0 6
6629: PUSH
6630: LD_VAR 0 6
6634: PPUSH
6635: LD_VAR 0 3
6639: PPUSH
6640: CALL_OW 3
6644: ST_TO_ADDR
// break ;
6645: GO 6649
// end ; end ;
6647: GO 6575
6649: POP
6650: POP
// if IsEmpty ( veh ) then
6651: LD_VAR 0 5
6655: PPUSH
6656: CALL 32551 0 1
6660: IFFALSE 6698
// begin PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6662: LD_VAR 0 6
6666: PUSH
6667: LD_INT 1
6669: ARRAY
6670: PPUSH
6671: LD_VAR 0 5
6675: PPUSH
6676: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6680: LD_ADDR_VAR 0 6
6684: PUSH
6685: LD_VAR 0 6
6689: PPUSH
6690: LD_INT 1
6692: PPUSH
6693: CALL_OW 3
6697: ST_TO_ADDR
// end ; ComAgressiveMove ( veh , 133 , 7 ) ;
6698: LD_VAR 0 5
6702: PPUSH
6703: LD_INT 133
6705: PPUSH
6706: LD_INT 7
6708: PPUSH
6709: CALL_OW 114
// wait ( 0 0$1 ) ;
6713: LD_INT 35
6715: PPUSH
6716: CALL_OW 67
// end ;
6720: GO 6353
6722: POP
6723: POP
// if tmp then
6724: LD_VAR 0 6
6728: IFFALSE 6784
// for i in tmp do
6730: LD_ADDR_VAR 0 2
6734: PUSH
6735: LD_VAR 0 6
6739: PUSH
6740: FOR_IN
6741: IFFALSE 6782
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6743: LD_VAR 0 2
6747: PPUSH
6748: LD_INT 10
6750: PPUSH
6751: LD_INT 0
6753: PPUSH
6754: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6758: LD_VAR 0 2
6762: PPUSH
6763: LD_INT 146
6765: PPUSH
6766: LD_INT 7
6768: PPUSH
6769: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6773: LD_INT 18
6775: PPUSH
6776: CALL_OW 67
// end ;
6780: GO 6740
6782: POP
6783: POP
// if heikeApes then
6784: LD_EXP 31
6788: IFFALSE 6844
// for i in heikeApes do
6790: LD_ADDR_VAR 0 2
6794: PUSH
6795: LD_EXP 31
6799: PUSH
6800: FOR_IN
6801: IFFALSE 6842
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6803: LD_VAR 0 2
6807: PPUSH
6808: LD_INT 10
6810: PPUSH
6811: LD_INT 0
6813: PPUSH
6814: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6818: LD_VAR 0 2
6822: PPUSH
6823: LD_INT 146
6825: PPUSH
6826: LD_INT 7
6828: PPUSH
6829: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6833: LD_INT 18
6835: PPUSH
6836: CALL_OW 67
// end ;
6840: GO 6800
6842: POP
6843: POP
// DialogueOn ;
6844: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
6848: LD_EXP 18
6852: PPUSH
6853: LD_STRING DH-outpost-a-1
6855: PPUSH
6856: CALL_OW 88
// DialogueOff ;
6860: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
6864: LD_INT 133
6866: PPUSH
6867: LD_INT 2
6869: PPUSH
6870: LD_INT 2
6872: PPUSH
6873: CALL_OW 331
// InGameOff ;
6877: CALL_OW 9
// music_nat := 0 ;
6881: LD_ADDR_OWVAR 71
6885: PUSH
6886: LD_INT 0
6888: ST_TO_ADDR
// music_class := 0 ;
6889: LD_ADDR_OWVAR 72
6893: PUSH
6894: LD_INT 0
6896: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
6897: LD_STRING Outposts
6899: PPUSH
6900: CALL_OW 337
// SaveForQuickRestart ;
6904: CALL_OW 22
// end ;
6908: LD_VAR 0 1
6912: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
6913: LD_INT 22
6915: PUSH
6916: LD_INT 2
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: LD_INT 91
6925: PUSH
6926: LD_EXP 21
6930: PUSH
6931: LD_INT 20
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 69
6947: PUSH
6948: LD_EXP 3
6952: AND
6953: PUSH
6954: LD_EXP 21
6958: PPUSH
6959: CALL_OW 302
6963: AND
6964: IFFALSE 7211
6966: GO 6968
6968: DISABLE
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
6973: PPUSH
6974: PPUSH
// begin IbrahimBetrayal ;
6975: CALL 7214 0 0
// repeat wait ( 0 0$1 ) ;
6979: LD_INT 35
6981: PPUSH
6982: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
6986: LD_EXP 21
6990: PPUSH
6991: CALL_OW 301
6995: PUSH
6996: LD_INT 22
6998: PUSH
6999: LD_INT 2
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 91
7008: PUSH
7009: LD_EXP 21
7013: PUSH
7014: LD_INT 6
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PPUSH
7026: CALL_OW 69
7030: PUSH
7031: LD_EXP 21
7035: PPUSH
7036: CALL_OW 302
7040: AND
7041: OR
7042: IFFALSE 6979
// if IsDead ( Ibrahim ) then
7044: LD_EXP 21
7048: PPUSH
7049: CALL_OW 301
7053: IFFALSE 7057
// exit ;
7055: GO 7211
// x := GetX ( Ibrahim ) ;
7057: LD_ADDR_VAR 0 1
7061: PUSH
7062: LD_EXP 21
7066: PPUSH
7067: CALL_OW 250
7071: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
7072: LD_ADDR_VAR 0 2
7076: PUSH
7077: LD_EXP 21
7081: PPUSH
7082: CALL_OW 251
7086: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
7087: LD_ADDR_VAR 0 3
7091: PUSH
7092: LD_EXP 21
7096: PPUSH
7097: CALL_OW 254
7101: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
7102: LD_ADDR_VAR 0 4
7106: PUSH
7107: LD_EXP 21
7111: PPUSH
7112: CALL_OW 256
7116: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
7117: LD_EXP 21
7121: PPUSH
7122: CALL_OW 64
// uc_side := 2 ;
7126: LD_ADDR_OWVAR 20
7130: PUSH
7131: LD_INT 2
7133: ST_TO_ADDR
// uc_nation := 2 ;
7134: LD_ADDR_OWVAR 21
7138: PUSH
7139: LD_INT 2
7141: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
7142: LD_ADDR_EXP 21
7146: PUSH
7147: LD_STRING Ibrahim
7149: PPUSH
7150: LD_INT 0
7152: PPUSH
7153: LD_STRING 
7155: PPUSH
7156: CALL 30395 0 3
7160: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
7161: LD_EXP 21
7165: PPUSH
7166: LD_VAR 0 3
7170: PPUSH
7171: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
7175: LD_EXP 21
7179: PPUSH
7180: LD_VAR 0 1
7184: PPUSH
7185: LD_VAR 0 2
7189: PPUSH
7190: LD_INT 0
7192: PPUSH
7193: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
7197: LD_EXP 21
7201: PPUSH
7202: LD_VAR 0 4
7206: PPUSH
7207: CALL_OW 234
// end ;
7211: PPOPN 4
7213: END
// export function IbrahimBetrayal ; var i , tmp ; begin
7214: LD_INT 0
7216: PPUSH
7217: PPUSH
7218: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
7219: LD_INT 122
7221: PPUSH
7222: LD_INT 77
7224: PPUSH
7225: LD_INT 2
7227: PPUSH
7228: LD_INT 6
7230: NEG
7231: PPUSH
7232: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
7236: LD_EXP 21
7240: PPUSH
7241: LD_INT 123
7243: PPUSH
7244: LD_INT 79
7246: PPUSH
7247: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
7251: LD_EXP 21
7255: PPUSH
7256: LD_INT 125
7258: PPUSH
7259: LD_INT 82
7261: PPUSH
7262: CALL_OW 178
// wait ( 0 0$2 ) ;
7266: LD_INT 70
7268: PPUSH
7269: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
7273: LD_EXP 42
7277: PPUSH
7278: LD_EXP 21
7282: PPUSH
7283: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
7287: LD_EXP 42
7291: PPUSH
7292: LD_STRING DRum-outpost-b-3
7294: PPUSH
7295: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
7299: LD_ADDR_VAR 0 3
7303: PUSH
7304: LD_INT 125
7306: PPUSH
7307: LD_INT 76
7309: PPUSH
7310: CALL_OW 428
7314: PUSH
7315: LD_INT 125
7317: PPUSH
7318: LD_INT 79
7320: PPUSH
7321: CALL_OW 428
7325: PUSH
7326: LD_INT 125
7328: PPUSH
7329: LD_INT 82
7331: PPUSH
7332: CALL_OW 428
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: ST_TO_ADDR
// for i in tmp do
7342: LD_ADDR_VAR 0 2
7346: PUSH
7347: LD_VAR 0 3
7351: PUSH
7352: FOR_IN
7353: IFFALSE 7369
// SetLives ( i , 200 ) ;
7355: LD_VAR 0 2
7359: PPUSH
7360: LD_INT 200
7362: PPUSH
7363: CALL_OW 234
7367: GO 7352
7369: POP
7370: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7371: LD_EXP 21
7375: PPUSH
7376: LD_STRING DI-outpost-b-4
7378: PPUSH
7379: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7383: LD_EXP 21
7387: PPUSH
7388: LD_INT 5
7390: PPUSH
7391: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7395: LD_EXP 21
7399: PUSH
7400: LD_EXP 42
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PPUSH
7409: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7413: LD_INT 122
7415: PPUSH
7416: LD_INT 77
7418: PPUSH
7419: LD_INT 2
7421: PPUSH
7422: CALL_OW 331
// if Givi then
7426: LD_EXP 19
7430: IFFALSE 7446
// Say ( Givi , DG-1-outpost-b-5 ) else
7432: LD_EXP 19
7436: PPUSH
7437: LD_STRING DG-1-outpost-b-5
7439: PPUSH
7440: CALL_OW 88
7444: GO 7511
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7446: LD_EXP 29
7450: PPUSH
7451: LD_INT 26
7453: PUSH
7454: LD_INT 2
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PPUSH
7461: CALL_OW 72
7465: PUSH
7466: LD_INT 1
7468: ARRAY
7469: PPUSH
7470: LD_STRING DArf-outpost-b-a-5
7472: PPUSH
7473: CALL_OW 88
7477: NOT
7478: IFFALSE 7511
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7480: LD_EXP 29
7484: PPUSH
7485: LD_INT 26
7487: PUSH
7488: LD_INT 1
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PPUSH
7495: CALL_OW 72
7499: PUSH
7500: LD_INT 1
7502: ARRAY
7503: PPUSH
7504: LD_STRING DArm-outpost-b-a-5
7506: PPUSH
7507: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7511: LD_INT 35
7513: PPUSH
7514: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7518: LD_EXP 21
7522: PPUSH
7523: CALL_OW 301
7527: PUSH
7528: LD_EXP 18
7532: PPUSH
7533: LD_EXP 21
7537: PPUSH
7538: CALL_OW 296
7542: PUSH
7543: LD_INT 6
7545: LESS
7546: PUSH
7547: LD_EXP 21
7551: PPUSH
7552: CALL_OW 302
7556: AND
7557: OR
7558: IFFALSE 7511
// if IsDead ( Ibrahim ) then
7560: LD_EXP 21
7564: PPUSH
7565: CALL_OW 301
7569: IFFALSE 7585
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7571: LD_EXP 18
7575: PPUSH
7576: LD_STRING DH-ibrahimdead-1
7578: PPUSH
7579: CALL_OW 88
// exit ;
7583: GO 7626
// end ; CenterNowOnUnits ( Ibrahim ) ;
7585: LD_EXP 21
7589: PPUSH
7590: CALL_OW 87
// DialogueOn ;
7594: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7598: LD_EXP 21
7602: PPUSH
7603: LD_STRING DI-ibrahimlives-1
7605: PPUSH
7606: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7610: LD_EXP 18
7614: PPUSH
7615: LD_STRING DH-Ibrahimlives-2
7617: PPUSH
7618: CALL_OW 88
// DialogueOff ;
7622: CALL_OW 7
// end ;
7626: LD_VAR 0 1
7630: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7631: LD_INT 11
7633: PPUSH
7634: LD_INT 22
7636: PUSH
7637: LD_INT 2
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PPUSH
7644: CALL_OW 70
7648: PUSH
7649: LD_OWVAR 1
7653: PUSH
7654: LD_INT 18900
7656: PUSH
7657: LD_INT 16800
7659: PUSH
7660: LD_INT 16800
7662: PUSH
7663: LD_INT 15750
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: PUSH
7672: LD_OWVAR 67
7676: ARRAY
7677: GREATEREQUAL
7678: OR
7679: IFFALSE 8187
7681: GO 7683
7683: DISABLE
// begin outerAreaAchived := true ;
7684: LD_ADDR_EXP 15
7688: PUSH
7689: LD_INT 1
7691: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7692: LD_INT 700
7694: PPUSH
7695: CALL_OW 67
// DialogueOn ;
7699: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7703: LD_EXP 26
7707: PPUSH
7708: LD_STRING DShar-radio-1
7710: PPUSH
7711: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7715: LD_EXP 26
7719: PPUSH
7720: LD_STRING DShar-radio-2
7722: PPUSH
7723: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7727: LD_EXP 18
7731: PPUSH
7732: LD_STRING DH-radio-2
7734: PPUSH
7735: CALL_OW 88
// DialogueOff ;
7739: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7743: LD_STRING Gaidar
7745: PPUSH
7746: CALL_OW 337
// if Difficulty < 3 then
7750: LD_OWVAR 67
7754: PUSH
7755: LD_INT 3
7757: LESS
7758: IFFALSE 7824
// begin DialogueOn ;
7760: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7764: LD_INT 11
7766: PPUSH
7767: LD_INT 14
7769: PPUSH
7770: LD_INT 2
7772: PPUSH
7773: LD_INT 6
7775: NEG
7776: PPUSH
7777: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7781: LD_INT 11
7783: PPUSH
7784: LD_INT 14
7786: PPUSH
7787: LD_INT 2
7789: PPUSH
7790: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7794: LD_INT 11
7796: PPUSH
7797: LD_INT 14
7799: PPUSH
7800: CALL_OW 84
// dwait ( 0 0$1 ) ;
7804: LD_INT 35
7806: PPUSH
7807: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7811: LD_EXP 18
7815: PPUSH
7816: CALL_OW 87
// DialogueOff ;
7820: CALL_OW 7
// end ; wait ( 0 0$30 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
7824: LD_INT 1050
7826: PUSH
7827: LD_INT 350
7829: PPUSH
7830: LD_INT 525
7832: PPUSH
7833: CALL_OW 12
7837: PUSH
7838: LD_OWVAR 67
7842: MUL
7843: PLUS
7844: PPUSH
7845: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7849: LD_INT 35
7851: PPUSH
7852: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
7856: LD_INT 2
7858: PPUSH
7859: LD_INT 1
7861: PPUSH
7862: CALL_OW 428
7866: PUSH
7867: LD_INT 0
7869: EQUAL
7870: IFFALSE 7849
// SetDir ( Gaidar , 2 ) ;
7872: LD_EXP 35
7876: PPUSH
7877: LD_INT 2
7879: PPUSH
7880: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
7884: LD_EXP 35
7888: PPUSH
7889: LD_INT 2
7891: PPUSH
7892: LD_INT 1
7894: PPUSH
7895: LD_INT 0
7897: PPUSH
7898: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
7902: LD_EXP 35
7906: PPUSH
7907: LD_INT 19
7909: PPUSH
7910: LD_INT 24
7912: PPUSH
7913: CALL_OW 111
// if Difficulty < 3 then
7917: LD_OWVAR 67
7921: PUSH
7922: LD_INT 3
7924: LESS
7925: IFFALSE 7964
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7927: LD_INT 11
7929: PPUSH
7930: LD_INT 14
7932: PPUSH
7933: LD_INT 2
7935: PPUSH
7936: LD_INT 6
7938: NEG
7939: PPUSH
7940: CALL_OW 330
// wait ( 0 0$2 ) ;
7944: LD_INT 70
7946: PPUSH
7947: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
7951: LD_INT 11
7953: PPUSH
7954: LD_INT 14
7956: PPUSH
7957: LD_INT 2
7959: PPUSH
7960: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
7964: LD_EXP 35
7968: PPUSH
7969: LD_INT 210
7971: PPUSH
7972: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
7976: LD_EXP 35
7980: PPUSH
7981: LD_INT 38
7983: PPUSH
7984: LD_INT 47
7986: PPUSH
7987: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
7991: LD_EXP 35
7995: PPUSH
7996: LD_INT 32
7998: PPUSH
7999: LD_INT 59
8001: PPUSH
8002: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
8006: LD_EXP 35
8010: PPUSH
8011: LD_INT 350
8013: PPUSH
8014: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
8018: LD_EXP 35
8022: PPUSH
8023: LD_INT 62
8025: PPUSH
8026: LD_INT 116
8028: PPUSH
8029: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
8033: LD_EXP 35
8037: PPUSH
8038: LD_INT 92
8040: PPUSH
8041: LD_INT 177
8043: PPUSH
8044: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8048: LD_INT 35
8050: PPUSH
8051: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
8055: LD_EXP 35
8059: PPUSH
8060: CALL_OW 301
8064: PUSH
8065: LD_EXP 35
8069: PPUSH
8070: LD_INT 92
8072: PPUSH
8073: LD_INT 177
8075: PPUSH
8076: CALL_OW 307
8080: OR
8081: IFFALSE 8048
// if IsAt ( Gaidar , 92 , 177 ) then
8083: LD_EXP 35
8087: PPUSH
8088: LD_INT 92
8090: PPUSH
8091: LD_INT 177
8093: PPUSH
8094: CALL_OW 307
8098: IFFALSE 8165
// begin DialogueOn ;
8100: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
8104: LD_INT 92
8106: PPUSH
8107: LD_INT 177
8109: PPUSH
8110: LD_INT 2
8112: PPUSH
8113: LD_INT 3
8115: NEG
8116: PPUSH
8117: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
8121: LD_EXP 35
8125: PPUSH
8126: CALL_OW 87
// dwait ( 0 0$2 ) ;
8130: LD_INT 70
8132: PPUSH
8133: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
8137: LD_INT 92
8139: PPUSH
8140: LD_INT 177
8142: PPUSH
8143: LD_INT 2
8145: PPUSH
8146: CALL_OW 331
// DialogueOff ;
8150: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
8154: LD_EXP 35
8158: PPUSH
8159: CALL_OW 64
// exit ;
8163: GO 8187
// end ; gaidarKilled := true ;
8165: LD_ADDR_EXP 14
8169: PUSH
8170: LD_INT 1
8172: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
8173: LD_STRING GaidarKilled
8175: PPUSH
8176: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
8180: LD_STRING ACH_COMMISAR
8182: PPUSH
8183: CALL_OW 543
// end ;
8187: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
8188: LD_INT 2
8190: PPUSH
8191: LD_EXP 35
8195: PPUSH
8196: CALL_OW 292
8200: IFFALSE 8217
8202: GO 8204
8204: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
8205: LD_EXP 35
8209: PPUSH
8210: LD_STRING DT-objective-1
8212: PPUSH
8213: CALL_OW 88
8217: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
8218: LD_INT 22
8220: PUSH
8221: LD_INT 2
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PUSH
8228: LD_INT 2
8230: PUSH
8231: LD_INT 95
8233: PUSH
8234: LD_INT 5
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: LD_INT 95
8243: PUSH
8244: LD_INT 6
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: PUSH
8251: LD_INT 95
8253: PUSH
8254: LD_INT 7
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PPUSH
8271: CALL_OW 69
8275: IFFALSE 8312
8277: GO 8279
8279: DISABLE
// begin DialogueOn ;
8280: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
8284: LD_EXP 18
8288: PPUSH
8289: LD_STRING DH-outpost-last-1
8291: PPUSH
8292: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
8296: LD_EXP 34
8300: PPUSH
8301: LD_STRING DB-outpost-last-2
8303: PPUSH
8304: CALL_OW 94
// DialogueOff ;
8308: CALL_OW 7
// end ;
8312: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
8313: LD_INT 200
8315: PPUSH
8316: CALL_OW 256
8320: PUSH
8321: LD_INT 999
8323: LESS
8324: PUSH
8325: LD_INT 200
8327: PPUSH
8328: CALL_OW 255
8332: PUSH
8333: LD_INT 2
8335: EQUAL
8336: OR
8337: IFFALSE 8510
8339: GO 8341
8341: DISABLE
8342: LD_INT 0
8344: PPUSH
8345: PPUSH
// begin if not earlyEscape then
8346: LD_EXP 16
8350: NOT
8351: IFFALSE 8377
// begin SayRadio ( Burlak , DB-end-1 ) ;
8353: LD_EXP 34
8357: PPUSH
8358: LD_STRING DB-end-1
8360: PPUSH
8361: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8365: LD_EXP 18
8369: PPUSH
8370: LD_STRING DH-end-2
8372: PPUSH
8373: CALL_OW 88
// end ; if tick <= 15 15$00 then
8377: LD_OWVAR 1
8381: PUSH
8382: LD_INT 31500
8384: LESSEQUAL
8385: IFFALSE 8394
// SetAchievement ( ACH_FIST ) ;
8387: LD_STRING ACH_FIST
8389: PPUSH
8390: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8394: LD_ADDR_VAR 0 2
8398: PUSH
8399: LD_INT 22
8401: PUSH
8402: LD_INT 3
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 3
8411: PUSH
8412: LD_INT 21
8414: PUSH
8415: LD_INT 3
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PPUSH
8430: CALL_OW 69
8434: ST_TO_ADDR
// if not tmp then
8435: LD_VAR 0 2
8439: NOT
8440: IFFALSE 8444
// exit ;
8442: GO 8510
// for i in tmp do
8444: LD_ADDR_VAR 0 1
8448: PUSH
8449: LD_VAR 0 2
8453: PUSH
8454: FOR_IN
8455: IFFALSE 8508
// begin SetTag ( i , tEscape ) ;
8457: LD_VAR 0 1
8461: PPUSH
8462: LD_EXP 17
8466: PPUSH
8467: CALL_OW 109
// if IsInUnit ( i ) then
8471: LD_VAR 0 1
8475: PPUSH
8476: CALL_OW 310
8480: IFFALSE 8491
// ComExitBuilding ( i ) ;
8482: LD_VAR 0 1
8486: PPUSH
8487: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8491: LD_VAR 0 1
8495: PPUSH
8496: LD_INT 92
8498: PPUSH
8499: LD_INT 177
8501: PPUSH
8502: CALL_OW 171
// end ;
8506: GO 8454
8508: POP
8509: POP
// end ;
8510: PPOPN 2
8512: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8513: LD_INT 4
8515: PPUSH
8516: LD_INT 22
8518: PUSH
8519: LD_INT 2
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PPUSH
8526: CALL_OW 70
8530: PUSH
8531: LD_EXP 15
8535: NOT
8536: AND
8537: PUSH
8538: LD_EXP 27
8542: PPUSH
8543: CALL_OW 302
8547: AND
8548: IFFALSE 8788
8550: GO 8552
8552: DISABLE
// begin DialogueOn ;
8553: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8557: LD_INT 111
8559: PPUSH
8560: LD_INT 54
8562: PPUSH
8563: LD_INT 2
8565: PPUSH
8566: LD_INT 16
8568: NEG
8569: PPUSH
8570: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8574: LD_INT 111
8576: PPUSH
8577: LD_INT 53
8579: PPUSH
8580: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8584: LD_INT 10
8586: PPUSH
8587: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8591: LD_EXP 27
8595: PPUSH
8596: LD_STRING DKs-Hannibal-1
8598: PPUSH
8599: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8603: LD_EXP 27
8607: PPUSH
8608: LD_STRING DKs-Hannibal-2
8610: PPUSH
8611: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8615: LD_EXP 27
8619: PPUSH
8620: LD_STRING DKs-Hannibal-3
8622: PPUSH
8623: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8627: LD_EXP 27
8631: PPUSH
8632: LD_STRING DKs-Hannibal-4
8634: PPUSH
8635: CALL_OW 88
// dwait ( 0 0$1 ) ;
8639: LD_INT 35
8641: PPUSH
8642: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8646: LD_INT 111
8648: PPUSH
8649: LD_INT 54
8651: PPUSH
8652: LD_INT 2
8654: PPUSH
8655: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8659: LD_INT 173
8661: PPUSH
8662: LD_INT 76
8664: PPUSH
8665: LD_INT 2
8667: PPUSH
8668: LD_INT 12
8670: NEG
8671: PPUSH
8672: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8676: LD_INT 173
8678: PPUSH
8679: LD_INT 76
8681: PPUSH
8682: LD_INT 2
8684: PPUSH
8685: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8689: LD_INT 173
8691: PPUSH
8692: LD_INT 76
8694: PPUSH
8695: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8699: LD_EXP 27
8703: PPUSH
8704: LD_STRING DKs-Hannibal-5
8706: PPUSH
8707: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8711: LD_EXP 22
8715: PUSH
8716: LD_INT 22
8718: PUSH
8719: LD_INT 2
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 34
8728: PUSH
8729: LD_INT 26
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PPUSH
8740: CALL_OW 69
8744: NOT
8745: AND
8746: IFFALSE 8784
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8748: LD_EXP 22
8752: PPUSH
8753: LD_STRING DKam-Hannibal-a-6
8755: PPUSH
8756: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8760: LD_EXP 22
8764: PPUSH
8765: LD_STRING DKam-Hannibal-a-7
8767: PPUSH
8768: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8772: LD_EXP 19
8776: PPUSH
8777: LD_STRING DG-Hannibal-a-8
8779: PPUSH
8780: CALL_OW 88
// end ; DialogueOff ;
8784: CALL_OW 7
// end ;
8788: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8789: LD_INT 225
8791: PPUSH
8792: CALL_OW 302
8796: PUSH
8797: LD_INT 200
8799: PPUSH
8800: CALL_OW 302
8804: AND
8805: PUSH
8806: LD_INT 12
8808: PPUSH
8809: LD_INT 21
8811: PUSH
8812: LD_INT 3
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PPUSH
8819: CALL_OW 70
8823: PUSH
8824: LD_INT 2
8826: GREATER
8827: AND
8828: PUSH
8829: LD_INT 13
8831: PPUSH
8832: LD_INT 22
8834: PUSH
8835: LD_INT 2
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PPUSH
8842: CALL_OW 70
8846: PUSH
8847: LD_INT 3
8849: GREATER
8850: AND
8851: IFFALSE 8864
8853: GO 8855
8855: DISABLE
// hannibalPath := true ;
8856: LD_ADDR_EXP 9
8860: PUSH
8861: LD_INT 1
8863: ST_TO_ADDR
8864: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
8865: LD_EXP 9
8869: PUSH
8870: LD_INT 6
8872: PPUSH
8873: LD_INT 22
8875: PUSH
8876: LD_INT 2
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PPUSH
8883: CALL_OW 70
8887: AND
8888: IFFALSE 9233
8890: GO 8892
8892: DISABLE
8893: LD_INT 0
8895: PPUSH
8896: PPUSH
8897: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
8898: LD_ADDR_VAR 0 2
8902: PUSH
8903: LD_INT 6
8905: PPUSH
8906: LD_INT 22
8908: PUSH
8909: LD_INT 2
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PPUSH
8916: CALL_OW 70
8920: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
8921: LD_ADDR_VAR 0 3
8925: PUSH
8926: LD_VAR 0 2
8930: PPUSH
8931: LD_INT 34
8933: PUSH
8934: LD_INT 26
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 72
8945: PUSH
8946: LD_INT 0
8948: GREATER
8949: ST_TO_ADDR
// DialogueOn ;
8950: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
8954: LD_EXP 18
8958: PPUSH
8959: LD_STRING DH-Cleverattack-1
8961: PPUSH
8962: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
8966: LD_EXP 18
8970: PPUSH
8971: LD_STRING DH-Cleverattack-2
8973: PPUSH
8974: CALL_OW 88
// if hasFlameThrower then
8978: LD_VAR 0 3
8982: IFFALSE 9010
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
8984: LD_EXP 34
8988: PPUSH
8989: LD_STRING DB-Cleverattack-3
8991: PPUSH
8992: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
8996: LD_EXP 18
9000: PPUSH
9001: LD_STRING DH-Cleverattack-4
9003: PPUSH
9004: CALL_OW 88
// end else
9008: GO 9034
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
9010: LD_EXP 34
9014: PPUSH
9015: LD_STRING DB-Cleverattack-a-3
9017: PPUSH
9018: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
9022: LD_EXP 18
9026: PPUSH
9027: LD_STRING DH-Cleverattack-a-4
9029: PPUSH
9030: CALL_OW 88
// end ; DialogueOff ;
9034: CALL_OW 7
// if not hasFlameThrower then
9038: LD_VAR 0 3
9042: NOT
9043: IFFALSE 9047
// exit ;
9045: GO 9233
// earlyEscape := true ;
9047: LD_ADDR_EXP 16
9051: PUSH
9052: LD_INT 1
9054: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9055: LD_INT 140
9057: PPUSH
9058: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
9062: LD_ADDR_VAR 0 2
9066: PUSH
9067: LD_INT 22
9069: PUSH
9070: LD_INT 3
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PUSH
9077: LD_INT 2
9079: PUSH
9080: LD_INT 25
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 25
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: LD_INT 25
9102: PUSH
9103: LD_INT 4
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 69
9124: PUSH
9125: LD_EXP 21
9129: PUSH
9130: LD_EXP 36
9134: PUSH
9135: LD_EXP 35
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: LIST
9144: DIFF
9145: ST_TO_ADDR
// for i in tmp do
9146: LD_ADDR_VAR 0 1
9150: PUSH
9151: LD_VAR 0 2
9155: PUSH
9156: FOR_IN
9157: IFFALSE 9231
// begin if Prob ( 40 + 10 * Difficulty ) then
9159: LD_INT 40
9161: PUSH
9162: LD_INT 10
9164: PUSH
9165: LD_OWVAR 67
9169: MUL
9170: PLUS
9171: PPUSH
9172: CALL_OW 13
9176: IFFALSE 9180
// continue ;
9178: GO 9156
// SetTag ( i , tEscape ) ;
9180: LD_VAR 0 1
9184: PPUSH
9185: LD_EXP 17
9189: PPUSH
9190: CALL_OW 109
// if IsInUnit ( i ) then
9194: LD_VAR 0 1
9198: PPUSH
9199: CALL_OW 310
9203: IFFALSE 9214
// ComExitBuilding ( i ) ;
9205: LD_VAR 0 1
9209: PPUSH
9210: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
9214: LD_VAR 0 1
9218: PPUSH
9219: LD_INT 92
9221: PPUSH
9222: LD_INT 177
9224: PPUSH
9225: CALL_OW 171
// end ;
9229: GO 9156
9231: POP
9232: POP
// end ;
9233: PPOPN 3
9235: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
9236: LD_INT 9
9238: PPUSH
9239: LD_INT 2
9241: PUSH
9242: LD_INT 22
9244: PUSH
9245: LD_INT 3
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 22
9254: PUSH
9255: LD_INT 6
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: LIST
9266: PPUSH
9267: CALL_OW 70
9271: IFFALSE 9369
9273: GO 9275
9275: DISABLE
9276: LD_INT 0
9278: PPUSH
// begin enable ;
9279: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
9280: LD_ADDR_VAR 0 1
9284: PUSH
9285: LD_INT 9
9287: PPUSH
9288: LD_INT 2
9290: PUSH
9291: LD_INT 22
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: PUSH
9301: LD_INT 22
9303: PUSH
9304: LD_INT 6
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PPUSH
9316: CALL_OW 70
9320: PUSH
9321: FOR_IN
9322: IFFALSE 9367
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
9324: LD_VAR 0 1
9328: PPUSH
9329: CALL_OW 110
9333: PUSH
9334: LD_EXP 17
9338: EQUAL
9339: PUSH
9340: LD_VAR 0 1
9344: PPUSH
9345: CALL_OW 255
9349: PUSH
9350: LD_INT 6
9352: EQUAL
9353: OR
9354: IFFALSE 9365
// RemoveUnit ( i ) ;
9356: LD_VAR 0 1
9360: PPUSH
9361: CALL_OW 64
9365: GO 9321
9367: POP
9368: POP
// end ;
9369: PPOPN 1
9371: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9372: LD_EXP 23
9376: PUSH
9377: LD_EXP 23
9381: PPUSH
9382: CALL_OW 256
9386: PUSH
9387: LD_INT 3
9389: LESS
9390: AND
9391: IFFALSE 9437
9393: GO 9395
9395: DISABLE
// begin DialogueOn ;
9396: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9400: LD_EXP 23
9404: PPUSH
9405: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9409: LD_EXP 23
9413: PPUSH
9414: LD_STRING DK-Kkilled-1
9416: PPUSH
9417: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9421: LD_EXP 18
9425: PPUSH
9426: LD_STRING DH-Kkilled-2
9428: PPUSH
9429: CALL_OW 88
// DialogueOff ;
9433: CALL_OW 7
// end ;
9437: END
// every 0 0$1 trigger kaiaKilledByRussian do
9438: LD_EXP 8
9442: IFFALSE 9459
9444: GO 9446
9446: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9447: LD_EXP 18
9451: PPUSH
9452: LD_STRING DH-Kkilled-3
9454: PPUSH
9455: CALL_OW 88
9459: END
// every 0 0$1 trigger tick >= 24 24$00 do
9460: LD_OWVAR 1
9464: PUSH
9465: LD_INT 50400
9467: GREATEREQUAL
9468: IFFALSE 9505
9470: GO 9472
9472: DISABLE
// begin DialogueOn ;
9473: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9477: LD_EXP 26
9481: PPUSH
9482: LD_STRING DShar-slow-1
9484: PPUSH
9485: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9489: LD_EXP 26
9493: PPUSH
9494: LD_STRING DShar-slow-2
9496: PPUSH
9497: CALL_OW 94
// DialogueOff ;
9501: CALL_OW 7
// end ;
9505: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9506: LD_OWVAR 1
9510: PUSH
9511: LD_INT 84000
9513: PUSH
9514: LD_INT 75600
9516: PUSH
9517: LD_INT 67200
9519: PUSH
9520: LD_INT 63000
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: PUSH
9529: LD_OWVAR 67
9533: ARRAY
9534: GREATEREQUAL
9535: IFFALSE 9579
9537: GO 9539
9539: DISABLE
// begin DialogueOn ;
9540: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9544: LD_EXP 26
9548: PPUSH
9549: LD_STRING DShar-fail-1
9551: PPUSH
9552: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9556: LD_EXP 26
9560: PPUSH
9561: LD_STRING DShar-fail-2
9563: PPUSH
9564: CALL_OW 94
// DialogueOff ;
9568: CALL_OW 7
// YouLost ( Time ) ;
9572: LD_STRING Time
9574: PPUSH
9575: CALL_OW 104
// end ;
9579: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9580: LD_INT 22
9582: PUSH
9583: LD_INT 3
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PUSH
9590: LD_INT 2
9592: PUSH
9593: LD_INT 30
9595: PUSH
9596: LD_INT 1
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: LD_INT 30
9605: PUSH
9606: LD_INT 0
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: LIST
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PPUSH
9622: CALL_OW 69
9626: PUSH
9627: LD_INT 0
9629: EQUAL
9630: IFFALSE 10141
9632: GO 9634
9634: DISABLE
9635: LD_INT 0
9637: PPUSH
// begin if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9638: LD_OWVAR 1
9642: PUSH
9643: LD_EXP 5
9647: PLUS
9648: PUSH
9649: LD_INT 178500
9651: PUSH
9652: LD_INT 157500
9654: PUSH
9655: LD_INT 136500
9657: PUSH
9658: LD_INT 126000
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: PUSH
9667: LD_OWVAR 67
9671: ARRAY
9672: LESSEQUAL
9673: IFFALSE 9687
// AddMedal ( med1 , 1 ) else
9675: LD_STRING med1
9677: PPUSH
9678: LD_INT 1
9680: PPUSH
9681: CALL_OW 101
9685: GO 9698
// AddMedal ( med1 , - 1 ) ;
9687: LD_STRING med1
9689: PPUSH
9690: LD_INT 1
9692: NEG
9693: PPUSH
9694: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9698: LD_EXP 7
9702: PUSH
9703: LD_INT 3
9705: GREATEREQUAL
9706: PUSH
9707: LD_EXP 11
9711: MUL
9712: PUSH
9713: LD_EXP 9
9717: MUL
9718: PUSH
9719: LD_EXP 6
9723: PUSH
9724: LD_INT 6
9726: PUSH
9727: LD_INT 5
9729: PUSH
9730: LD_INT 4
9732: PUSH
9733: LD_INT 3
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: PUSH
9742: LD_OWVAR 67
9746: ARRAY
9747: LESS
9748: MUL
9749: IFFALSE 9763
// AddMedal ( med2 , 1 ) else
9751: LD_STRING med2
9753: PPUSH
9754: LD_INT 1
9756: PPUSH
9757: CALL_OW 101
9761: GO 9774
// AddMedal ( med2 , - 1 ) ;
9763: LD_STRING med2
9765: PPUSH
9766: LD_INT 1
9768: NEG
9769: PPUSH
9770: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
9774: LD_EXP 14
9778: PPUSH
9779: LD_STRING 04_2_GaidarKilled
9781: PPUSH
9782: CALL_OW 39
// if gaidarKilled then
9786: LD_EXP 14
9790: IFFALSE 9804
// AddMedal ( med3 , 1 ) else
9792: LD_STRING med3
9794: PPUSH
9795: LD_INT 1
9797: PPUSH
9798: CALL_OW 101
9802: GO 9815
// AddMedal ( med3 , - 1 ) ;
9804: LD_STRING med3
9806: PPUSH
9807: LD_INT 1
9809: NEG
9810: PPUSH
9811: CALL_OW 101
// GiveMedals ( MAIN ) ;
9815: LD_STRING MAIN
9817: PPUSH
9818: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
9822: LD_INT 22
9824: PUSH
9825: LD_INT 2
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: LD_INT 3
9834: PUSH
9835: LD_INT 23
9837: PUSH
9838: LD_INT 0
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: PPUSH
9853: CALL_OW 69
9857: PPUSH
9858: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
9862: LD_EXP 18
9866: PPUSH
9867: LD_STRING 04_2_Heike
9869: PPUSH
9870: CALL_OW 38
// if Aviradze then
9874: LD_EXP 28
9878: IFFALSE 9892
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
9880: LD_EXP 28
9884: PPUSH
9885: LD_STRING 04_2_Aviradze
9887: PPUSH
9888: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
9892: LD_EXP 21
9896: PUSH
9897: LD_EXP 21
9901: PPUSH
9902: CALL_OW 255
9906: PUSH
9907: LD_INT 2
9909: EQUAL
9910: AND
9911: IFFALSE 9941
// begin if ibrahimOnRuSide then
9913: LD_EXP 3
9917: IFFALSE 9929
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
9919: LD_INT 1
9921: PPUSH
9922: LD_STRING 04_2_IbrahimJoined
9924: PPUSH
9925: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
9929: LD_EXP 21
9933: PPUSH
9934: LD_STRING 04_2_Ibrahim
9936: PPUSH
9937: CALL_OW 38
// end ; if Kamil then
9941: LD_EXP 22
9945: IFFALSE 9959
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
9947: LD_EXP 22
9951: PPUSH
9952: LD_STRING 04_2_Kamil
9954: PPUSH
9955: CALL_OW 38
// if Sophia then
9959: LD_EXP 24
9963: IFFALSE 9977
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
9965: LD_EXP 24
9969: PPUSH
9970: LD_STRING 04_2_Sophia
9972: PPUSH
9973: CALL_OW 38
// if Kaia then
9977: LD_EXP 23
9981: IFFALSE 9995
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
9983: LD_EXP 23
9987: PPUSH
9988: LD_STRING 04_2_Kaia
9990: PPUSH
9991: CALL_OW 38
// if Givi then
9995: LD_EXP 19
9999: IFFALSE 10013
// SaveCharacters ( Givi , 04_2_Givi ) ;
10001: LD_EXP 19
10005: PPUSH
10006: LD_STRING 04_2_Givi
10008: PPUSH
10009: CALL_OW 38
// if Mike then
10013: LD_EXP 20
10017: IFFALSE 10031
// SaveCharacters ( Mike , 04_2_Mike ) ;
10019: LD_EXP 20
10023: PPUSH
10024: LD_STRING 04_2_Mike
10026: PPUSH
10027: CALL_OW 38
// if Markov then
10031: LD_EXP 25
10035: IFFALSE 10049
// SaveCharacters ( Markov , 04_2_Markov ) ;
10037: LD_EXP 25
10041: PPUSH
10042: LD_STRING 04_2_Markov
10044: PPUSH
10045: CALL_OW 38
// if Kurt then
10049: LD_EXP 27
10053: IFFALSE 10067
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
10055: LD_EXP 27
10059: PPUSH
10060: LD_STRING 04_2_Kurt
10062: PPUSH
10063: CALL_OW 38
// if heikeSecondSquad then
10067: LD_EXP 29
10071: IFFALSE 10085
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
10073: LD_EXP 29
10077: PPUSH
10078: LD_STRING 04_2_others
10080: PPUSH
10081: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10085: LD_ADDR_VAR 0 1
10089: PUSH
10090: LD_INT 22
10092: PUSH
10093: LD_INT 2
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 23
10102: PUSH
10103: LD_INT 0
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PPUSH
10114: CALL_OW 69
10118: ST_TO_ADDR
// if tmp then
10119: LD_VAR 0 1
10123: IFFALSE 10137
// SaveCharacters ( tmp , 04_2_apes ) ;
10125: LD_VAR 0 1
10129: PPUSH
10130: LD_STRING 04_2_apes
10132: PPUSH
10133: CALL_OW 38
// YouWin ;
10137: CALL_OW 103
// end ; end_of_file
10141: PPOPN 1
10143: END
// every 0 0$1 do
10144: GO 10146
10146: DISABLE
// begin enable ;
10147: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10148: LD_STRING updateTimer(
10150: PUSH
10151: LD_OWVAR 1
10155: STR
10156: PUSH
10157: LD_STRING );
10159: STR
10160: PPUSH
10161: CALL_OW 559
// end ;
10165: END
// export function SOS_MapStart ( ) ; begin
10166: LD_INT 0
10168: PPUSH
// if streamModeActive then
10169: LD_EXP 44
10173: IFFALSE 10182
// DefineStreamItems ( true ) ;
10175: LD_INT 1
10177: PPUSH
10178: CALL 11986 0 1
// UpdateLuaVariables ( ) ;
10182: CALL 10199 0 0
// UpdateFactoryWaypoints ( ) ;
10186: CALL 24847 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10190: CALL 25104 0 0
// end ;
10194: LD_VAR 0 1
10198: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
10199: LD_INT 0
10201: PPUSH
// if not globalGameSaveCounter then
10202: LD_EXP 43
10206: NOT
10207: IFFALSE 10218
// ToLua ( setGameSaveCounter(0) ) else
10209: LD_STRING setGameSaveCounter(0)
10211: PPUSH
10212: CALL_OW 559
10216: GO 10250
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10218: LD_ADDR_EXP 43
10222: PUSH
10223: LD_EXP 43
10227: PPUSH
10228: CALL 69224 0 1
10232: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10233: LD_STRING setGameSaveCounter(
10235: PUSH
10236: LD_EXP 43
10240: STR
10241: PUSH
10242: LD_STRING )
10244: STR
10245: PPUSH
10246: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10250: LD_STRING setGameDifficulty(
10252: PUSH
10253: LD_OWVAR 67
10257: STR
10258: PUSH
10259: LD_STRING )
10261: STR
10262: PPUSH
10263: CALL_OW 559
// end ;
10267: LD_VAR 0 1
10271: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10272: LD_INT 0
10274: PPUSH
// if p2 = stream_mode then
10275: LD_VAR 0 2
10279: PUSH
10280: LD_INT 100
10282: EQUAL
10283: IFFALSE 11286
// begin if not StreamModeActive then
10285: LD_EXP 44
10289: NOT
10290: IFFALSE 10300
// StreamModeActive := true ;
10292: LD_ADDR_EXP 44
10296: PUSH
10297: LD_INT 1
10299: ST_TO_ADDR
// if p3 = 0 then
10300: LD_VAR 0 3
10304: PUSH
10305: LD_INT 0
10307: EQUAL
10308: IFFALSE 10314
// InitStreamMode ;
10310: CALL 11522 0 0
// if p3 = 1 then
10314: LD_VAR 0 3
10318: PUSH
10319: LD_INT 1
10321: EQUAL
10322: IFFALSE 10332
// sRocket := true ;
10324: LD_ADDR_EXP 49
10328: PUSH
10329: LD_INT 1
10331: ST_TO_ADDR
// if p3 = 2 then
10332: LD_VAR 0 3
10336: PUSH
10337: LD_INT 2
10339: EQUAL
10340: IFFALSE 10350
// sSpeed := true ;
10342: LD_ADDR_EXP 48
10346: PUSH
10347: LD_INT 1
10349: ST_TO_ADDR
// if p3 = 3 then
10350: LD_VAR 0 3
10354: PUSH
10355: LD_INT 3
10357: EQUAL
10358: IFFALSE 10368
// sEngine := true ;
10360: LD_ADDR_EXP 50
10364: PUSH
10365: LD_INT 1
10367: ST_TO_ADDR
// if p3 = 4 then
10368: LD_VAR 0 3
10372: PUSH
10373: LD_INT 4
10375: EQUAL
10376: IFFALSE 10386
// sSpec := true ;
10378: LD_ADDR_EXP 47
10382: PUSH
10383: LD_INT 1
10385: ST_TO_ADDR
// if p3 = 5 then
10386: LD_VAR 0 3
10390: PUSH
10391: LD_INT 5
10393: EQUAL
10394: IFFALSE 10404
// sLevel := true ;
10396: LD_ADDR_EXP 51
10400: PUSH
10401: LD_INT 1
10403: ST_TO_ADDR
// if p3 = 6 then
10404: LD_VAR 0 3
10408: PUSH
10409: LD_INT 6
10411: EQUAL
10412: IFFALSE 10422
// sArmoury := true ;
10414: LD_ADDR_EXP 52
10418: PUSH
10419: LD_INT 1
10421: ST_TO_ADDR
// if p3 = 7 then
10422: LD_VAR 0 3
10426: PUSH
10427: LD_INT 7
10429: EQUAL
10430: IFFALSE 10440
// sRadar := true ;
10432: LD_ADDR_EXP 53
10436: PUSH
10437: LD_INT 1
10439: ST_TO_ADDR
// if p3 = 8 then
10440: LD_VAR 0 3
10444: PUSH
10445: LD_INT 8
10447: EQUAL
10448: IFFALSE 10458
// sBunker := true ;
10450: LD_ADDR_EXP 54
10454: PUSH
10455: LD_INT 1
10457: ST_TO_ADDR
// if p3 = 9 then
10458: LD_VAR 0 3
10462: PUSH
10463: LD_INT 9
10465: EQUAL
10466: IFFALSE 10476
// sHack := true ;
10468: LD_ADDR_EXP 55
10472: PUSH
10473: LD_INT 1
10475: ST_TO_ADDR
// if p3 = 10 then
10476: LD_VAR 0 3
10480: PUSH
10481: LD_INT 10
10483: EQUAL
10484: IFFALSE 10494
// sFire := true ;
10486: LD_ADDR_EXP 56
10490: PUSH
10491: LD_INT 1
10493: ST_TO_ADDR
// if p3 = 11 then
10494: LD_VAR 0 3
10498: PUSH
10499: LD_INT 11
10501: EQUAL
10502: IFFALSE 10512
// sRefresh := true ;
10504: LD_ADDR_EXP 57
10508: PUSH
10509: LD_INT 1
10511: ST_TO_ADDR
// if p3 = 12 then
10512: LD_VAR 0 3
10516: PUSH
10517: LD_INT 12
10519: EQUAL
10520: IFFALSE 10530
// sExp := true ;
10522: LD_ADDR_EXP 58
10526: PUSH
10527: LD_INT 1
10529: ST_TO_ADDR
// if p3 = 13 then
10530: LD_VAR 0 3
10534: PUSH
10535: LD_INT 13
10537: EQUAL
10538: IFFALSE 10548
// sDepot := true ;
10540: LD_ADDR_EXP 59
10544: PUSH
10545: LD_INT 1
10547: ST_TO_ADDR
// if p3 = 14 then
10548: LD_VAR 0 3
10552: PUSH
10553: LD_INT 14
10555: EQUAL
10556: IFFALSE 10566
// sFlag := true ;
10558: LD_ADDR_EXP 60
10562: PUSH
10563: LD_INT 1
10565: ST_TO_ADDR
// if p3 = 15 then
10566: LD_VAR 0 3
10570: PUSH
10571: LD_INT 15
10573: EQUAL
10574: IFFALSE 10584
// sKamikadze := true ;
10576: LD_ADDR_EXP 68
10580: PUSH
10581: LD_INT 1
10583: ST_TO_ADDR
// if p3 = 16 then
10584: LD_VAR 0 3
10588: PUSH
10589: LD_INT 16
10591: EQUAL
10592: IFFALSE 10602
// sTroll := true ;
10594: LD_ADDR_EXP 69
10598: PUSH
10599: LD_INT 1
10601: ST_TO_ADDR
// if p3 = 17 then
10602: LD_VAR 0 3
10606: PUSH
10607: LD_INT 17
10609: EQUAL
10610: IFFALSE 10620
// sSlow := true ;
10612: LD_ADDR_EXP 70
10616: PUSH
10617: LD_INT 1
10619: ST_TO_ADDR
// if p3 = 18 then
10620: LD_VAR 0 3
10624: PUSH
10625: LD_INT 18
10627: EQUAL
10628: IFFALSE 10638
// sLack := true ;
10630: LD_ADDR_EXP 71
10634: PUSH
10635: LD_INT 1
10637: ST_TO_ADDR
// if p3 = 19 then
10638: LD_VAR 0 3
10642: PUSH
10643: LD_INT 19
10645: EQUAL
10646: IFFALSE 10656
// sTank := true ;
10648: LD_ADDR_EXP 73
10652: PUSH
10653: LD_INT 1
10655: ST_TO_ADDR
// if p3 = 20 then
10656: LD_VAR 0 3
10660: PUSH
10661: LD_INT 20
10663: EQUAL
10664: IFFALSE 10674
// sRemote := true ;
10666: LD_ADDR_EXP 74
10670: PUSH
10671: LD_INT 1
10673: ST_TO_ADDR
// if p3 = 21 then
10674: LD_VAR 0 3
10678: PUSH
10679: LD_INT 21
10681: EQUAL
10682: IFFALSE 10692
// sPowell := true ;
10684: LD_ADDR_EXP 75
10688: PUSH
10689: LD_INT 1
10691: ST_TO_ADDR
// if p3 = 22 then
10692: LD_VAR 0 3
10696: PUSH
10697: LD_INT 22
10699: EQUAL
10700: IFFALSE 10710
// sTeleport := true ;
10702: LD_ADDR_EXP 78
10706: PUSH
10707: LD_INT 1
10709: ST_TO_ADDR
// if p3 = 23 then
10710: LD_VAR 0 3
10714: PUSH
10715: LD_INT 23
10717: EQUAL
10718: IFFALSE 10728
// sOilTower := true ;
10720: LD_ADDR_EXP 80
10724: PUSH
10725: LD_INT 1
10727: ST_TO_ADDR
// if p3 = 24 then
10728: LD_VAR 0 3
10732: PUSH
10733: LD_INT 24
10735: EQUAL
10736: IFFALSE 10746
// sShovel := true ;
10738: LD_ADDR_EXP 81
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// if p3 = 25 then
10746: LD_VAR 0 3
10750: PUSH
10751: LD_INT 25
10753: EQUAL
10754: IFFALSE 10764
// sSheik := true ;
10756: LD_ADDR_EXP 82
10760: PUSH
10761: LD_INT 1
10763: ST_TO_ADDR
// if p3 = 26 then
10764: LD_VAR 0 3
10768: PUSH
10769: LD_INT 26
10771: EQUAL
10772: IFFALSE 10782
// sEarthquake := true ;
10774: LD_ADDR_EXP 84
10778: PUSH
10779: LD_INT 1
10781: ST_TO_ADDR
// if p3 = 27 then
10782: LD_VAR 0 3
10786: PUSH
10787: LD_INT 27
10789: EQUAL
10790: IFFALSE 10800
// sAI := true ;
10792: LD_ADDR_EXP 85
10796: PUSH
10797: LD_INT 1
10799: ST_TO_ADDR
// if p3 = 28 then
10800: LD_VAR 0 3
10804: PUSH
10805: LD_INT 28
10807: EQUAL
10808: IFFALSE 10818
// sCargo := true ;
10810: LD_ADDR_EXP 88
10814: PUSH
10815: LD_INT 1
10817: ST_TO_ADDR
// if p3 = 29 then
10818: LD_VAR 0 3
10822: PUSH
10823: LD_INT 29
10825: EQUAL
10826: IFFALSE 10836
// sDLaser := true ;
10828: LD_ADDR_EXP 89
10832: PUSH
10833: LD_INT 1
10835: ST_TO_ADDR
// if p3 = 30 then
10836: LD_VAR 0 3
10840: PUSH
10841: LD_INT 30
10843: EQUAL
10844: IFFALSE 10854
// sExchange := true ;
10846: LD_ADDR_EXP 90
10850: PUSH
10851: LD_INT 1
10853: ST_TO_ADDR
// if p3 = 31 then
10854: LD_VAR 0 3
10858: PUSH
10859: LD_INT 31
10861: EQUAL
10862: IFFALSE 10872
// sFac := true ;
10864: LD_ADDR_EXP 91
10868: PUSH
10869: LD_INT 1
10871: ST_TO_ADDR
// if p3 = 32 then
10872: LD_VAR 0 3
10876: PUSH
10877: LD_INT 32
10879: EQUAL
10880: IFFALSE 10890
// sPower := true ;
10882: LD_ADDR_EXP 92
10886: PUSH
10887: LD_INT 1
10889: ST_TO_ADDR
// if p3 = 33 then
10890: LD_VAR 0 3
10894: PUSH
10895: LD_INT 33
10897: EQUAL
10898: IFFALSE 10908
// sRandom := true ;
10900: LD_ADDR_EXP 93
10904: PUSH
10905: LD_INT 1
10907: ST_TO_ADDR
// if p3 = 34 then
10908: LD_VAR 0 3
10912: PUSH
10913: LD_INT 34
10915: EQUAL
10916: IFFALSE 10926
// sShield := true ;
10918: LD_ADDR_EXP 94
10922: PUSH
10923: LD_INT 1
10925: ST_TO_ADDR
// if p3 = 35 then
10926: LD_VAR 0 3
10930: PUSH
10931: LD_INT 35
10933: EQUAL
10934: IFFALSE 10944
// sTime := true ;
10936: LD_ADDR_EXP 95
10940: PUSH
10941: LD_INT 1
10943: ST_TO_ADDR
// if p3 = 36 then
10944: LD_VAR 0 3
10948: PUSH
10949: LD_INT 36
10951: EQUAL
10952: IFFALSE 10962
// sTools := true ;
10954: LD_ADDR_EXP 96
10958: PUSH
10959: LD_INT 1
10961: ST_TO_ADDR
// if p3 = 101 then
10962: LD_VAR 0 3
10966: PUSH
10967: LD_INT 101
10969: EQUAL
10970: IFFALSE 10980
// sSold := true ;
10972: LD_ADDR_EXP 61
10976: PUSH
10977: LD_INT 1
10979: ST_TO_ADDR
// if p3 = 102 then
10980: LD_VAR 0 3
10984: PUSH
10985: LD_INT 102
10987: EQUAL
10988: IFFALSE 10998
// sDiff := true ;
10990: LD_ADDR_EXP 62
10994: PUSH
10995: LD_INT 1
10997: ST_TO_ADDR
// if p3 = 103 then
10998: LD_VAR 0 3
11002: PUSH
11003: LD_INT 103
11005: EQUAL
11006: IFFALSE 11016
// sFog := true ;
11008: LD_ADDR_EXP 65
11012: PUSH
11013: LD_INT 1
11015: ST_TO_ADDR
// if p3 = 104 then
11016: LD_VAR 0 3
11020: PUSH
11021: LD_INT 104
11023: EQUAL
11024: IFFALSE 11034
// sReset := true ;
11026: LD_ADDR_EXP 66
11030: PUSH
11031: LD_INT 1
11033: ST_TO_ADDR
// if p3 = 105 then
11034: LD_VAR 0 3
11038: PUSH
11039: LD_INT 105
11041: EQUAL
11042: IFFALSE 11052
// sSun := true ;
11044: LD_ADDR_EXP 67
11048: PUSH
11049: LD_INT 1
11051: ST_TO_ADDR
// if p3 = 106 then
11052: LD_VAR 0 3
11056: PUSH
11057: LD_INT 106
11059: EQUAL
11060: IFFALSE 11070
// sTiger := true ;
11062: LD_ADDR_EXP 63
11066: PUSH
11067: LD_INT 1
11069: ST_TO_ADDR
// if p3 = 107 then
11070: LD_VAR 0 3
11074: PUSH
11075: LD_INT 107
11077: EQUAL
11078: IFFALSE 11088
// sBomb := true ;
11080: LD_ADDR_EXP 64
11084: PUSH
11085: LD_INT 1
11087: ST_TO_ADDR
// if p3 = 108 then
11088: LD_VAR 0 3
11092: PUSH
11093: LD_INT 108
11095: EQUAL
11096: IFFALSE 11106
// sWound := true ;
11098: LD_ADDR_EXP 72
11102: PUSH
11103: LD_INT 1
11105: ST_TO_ADDR
// if p3 = 109 then
11106: LD_VAR 0 3
11110: PUSH
11111: LD_INT 109
11113: EQUAL
11114: IFFALSE 11124
// sBetray := true ;
11116: LD_ADDR_EXP 76
11120: PUSH
11121: LD_INT 1
11123: ST_TO_ADDR
// if p3 = 110 then
11124: LD_VAR 0 3
11128: PUSH
11129: LD_INT 110
11131: EQUAL
11132: IFFALSE 11142
// sContamin := true ;
11134: LD_ADDR_EXP 77
11138: PUSH
11139: LD_INT 1
11141: ST_TO_ADDR
// if p3 = 111 then
11142: LD_VAR 0 3
11146: PUSH
11147: LD_INT 111
11149: EQUAL
11150: IFFALSE 11160
// sOil := true ;
11152: LD_ADDR_EXP 79
11156: PUSH
11157: LD_INT 1
11159: ST_TO_ADDR
// if p3 = 112 then
11160: LD_VAR 0 3
11164: PUSH
11165: LD_INT 112
11167: EQUAL
11168: IFFALSE 11178
// sStu := true ;
11170: LD_ADDR_EXP 83
11174: PUSH
11175: LD_INT 1
11177: ST_TO_ADDR
// if p3 = 113 then
11178: LD_VAR 0 3
11182: PUSH
11183: LD_INT 113
11185: EQUAL
11186: IFFALSE 11196
// sBazooka := true ;
11188: LD_ADDR_EXP 86
11192: PUSH
11193: LD_INT 1
11195: ST_TO_ADDR
// if p3 = 114 then
11196: LD_VAR 0 3
11200: PUSH
11201: LD_INT 114
11203: EQUAL
11204: IFFALSE 11214
// sMortar := true ;
11206: LD_ADDR_EXP 87
11210: PUSH
11211: LD_INT 1
11213: ST_TO_ADDR
// if p3 = 115 then
11214: LD_VAR 0 3
11218: PUSH
11219: LD_INT 115
11221: EQUAL
11222: IFFALSE 11232
// sRanger := true ;
11224: LD_ADDR_EXP 97
11228: PUSH
11229: LD_INT 1
11231: ST_TO_ADDR
// if p3 = 116 then
11232: LD_VAR 0 3
11236: PUSH
11237: LD_INT 116
11239: EQUAL
11240: IFFALSE 11250
// sComputer := true ;
11242: LD_ADDR_EXP 98
11246: PUSH
11247: LD_INT 1
11249: ST_TO_ADDR
// if p3 = 117 then
11250: LD_VAR 0 3
11254: PUSH
11255: LD_INT 117
11257: EQUAL
11258: IFFALSE 11268
// s30 := true ;
11260: LD_ADDR_EXP 99
11264: PUSH
11265: LD_INT 1
11267: ST_TO_ADDR
// if p3 = 118 then
11268: LD_VAR 0 3
11272: PUSH
11273: LD_INT 118
11275: EQUAL
11276: IFFALSE 11286
// s60 := true ;
11278: LD_ADDR_EXP 100
11282: PUSH
11283: LD_INT 1
11285: ST_TO_ADDR
// end ; if p2 = hack_mode then
11286: LD_VAR 0 2
11290: PUSH
11291: LD_INT 101
11293: EQUAL
11294: IFFALSE 11422
// begin case p3 of 1 :
11296: LD_VAR 0 3
11300: PUSH
11301: LD_INT 1
11303: DOUBLE
11304: EQUAL
11305: IFTRUE 11309
11307: GO 11316
11309: POP
// hHackUnlimitedResources ; 2 :
11310: CALL 23593 0 0
11314: GO 11422
11316: LD_INT 2
11318: DOUBLE
11319: EQUAL
11320: IFTRUE 11324
11322: GO 11331
11324: POP
// hHackSetLevel10 ; 3 :
11325: CALL 23726 0 0
11329: GO 11422
11331: LD_INT 3
11333: DOUBLE
11334: EQUAL
11335: IFTRUE 11339
11337: GO 11346
11339: POP
// hHackSetLevel10YourUnits ; 4 :
11340: CALL 23811 0 0
11344: GO 11422
11346: LD_INT 4
11348: DOUBLE
11349: EQUAL
11350: IFTRUE 11354
11352: GO 11361
11354: POP
// hHackInvincible ; 5 :
11355: CALL 24259 0 0
11359: GO 11422
11361: LD_INT 5
11363: DOUBLE
11364: EQUAL
11365: IFTRUE 11369
11367: GO 11376
11369: POP
// hHackInvisible ; 6 :
11370: CALL 24370 0 0
11374: GO 11422
11376: LD_INT 6
11378: DOUBLE
11379: EQUAL
11380: IFTRUE 11384
11382: GO 11391
11384: POP
// hHackChangeYourSide ; 7 :
11385: CALL 24427 0 0
11389: GO 11422
11391: LD_INT 7
11393: DOUBLE
11394: EQUAL
11395: IFTRUE 11399
11397: GO 11406
11399: POP
// hHackChangeUnitSide ; 8 :
11400: CALL 24469 0 0
11404: GO 11422
11406: LD_INT 8
11408: DOUBLE
11409: EQUAL
11410: IFTRUE 11414
11412: GO 11421
11414: POP
// hHackFog ; end ;
11415: CALL 24570 0 0
11419: GO 11422
11421: POP
// end ; if p2 = game_save_mode then
11422: LD_VAR 0 2
11426: PUSH
11427: LD_INT 102
11429: EQUAL
11430: IFFALSE 11495
// begin if p3 = 1 then
11432: LD_VAR 0 3
11436: PUSH
11437: LD_INT 1
11439: EQUAL
11440: IFFALSE 11452
// globalGameSaveCounter := p4 ;
11442: LD_ADDR_EXP 43
11446: PUSH
11447: LD_VAR 0 4
11451: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11452: LD_VAR 0 3
11456: PUSH
11457: LD_INT 2
11459: EQUAL
11460: PUSH
11461: LD_EXP 43
11465: AND
11466: IFFALSE 11485
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11468: LD_STRING setGameSaveCounter(
11470: PUSH
11471: LD_EXP 43
11475: STR
11476: PUSH
11477: LD_STRING )
11479: STR
11480: PPUSH
11481: CALL_OW 559
// display_strings := globalGameSaveCounter ;
11485: LD_ADDR_OWVAR 47
11489: PUSH
11490: LD_EXP 43
11494: ST_TO_ADDR
// end ; end ;
11495: LD_VAR 0 7
11499: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
11500: GO 11502
11502: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11503: LD_STRING initStreamRollete();
11505: PPUSH
11506: CALL_OW 559
// InitStreamMode ;
11510: CALL 11522 0 0
// DefineStreamItems ( false ) ;
11514: LD_INT 0
11516: PPUSH
11517: CALL 11986 0 1
// end ;
11521: END
// function InitStreamMode ; begin
11522: LD_INT 0
11524: PPUSH
// streamModeActive := false ;
11525: LD_ADDR_EXP 44
11529: PUSH
11530: LD_INT 0
11532: ST_TO_ADDR
// normalCounter := 36 ;
11533: LD_ADDR_EXP 45
11537: PUSH
11538: LD_INT 36
11540: ST_TO_ADDR
// hardcoreCounter := 18 ;
11541: LD_ADDR_EXP 46
11545: PUSH
11546: LD_INT 18
11548: ST_TO_ADDR
// sRocket := false ;
11549: LD_ADDR_EXP 49
11553: PUSH
11554: LD_INT 0
11556: ST_TO_ADDR
// sSpeed := false ;
11557: LD_ADDR_EXP 48
11561: PUSH
11562: LD_INT 0
11564: ST_TO_ADDR
// sEngine := false ;
11565: LD_ADDR_EXP 50
11569: PUSH
11570: LD_INT 0
11572: ST_TO_ADDR
// sSpec := false ;
11573: LD_ADDR_EXP 47
11577: PUSH
11578: LD_INT 0
11580: ST_TO_ADDR
// sLevel := false ;
11581: LD_ADDR_EXP 51
11585: PUSH
11586: LD_INT 0
11588: ST_TO_ADDR
// sArmoury := false ;
11589: LD_ADDR_EXP 52
11593: PUSH
11594: LD_INT 0
11596: ST_TO_ADDR
// sRadar := false ;
11597: LD_ADDR_EXP 53
11601: PUSH
11602: LD_INT 0
11604: ST_TO_ADDR
// sBunker := false ;
11605: LD_ADDR_EXP 54
11609: PUSH
11610: LD_INT 0
11612: ST_TO_ADDR
// sHack := false ;
11613: LD_ADDR_EXP 55
11617: PUSH
11618: LD_INT 0
11620: ST_TO_ADDR
// sFire := false ;
11621: LD_ADDR_EXP 56
11625: PUSH
11626: LD_INT 0
11628: ST_TO_ADDR
// sRefresh := false ;
11629: LD_ADDR_EXP 57
11633: PUSH
11634: LD_INT 0
11636: ST_TO_ADDR
// sExp := false ;
11637: LD_ADDR_EXP 58
11641: PUSH
11642: LD_INT 0
11644: ST_TO_ADDR
// sDepot := false ;
11645: LD_ADDR_EXP 59
11649: PUSH
11650: LD_INT 0
11652: ST_TO_ADDR
// sFlag := false ;
11653: LD_ADDR_EXP 60
11657: PUSH
11658: LD_INT 0
11660: ST_TO_ADDR
// sKamikadze := false ;
11661: LD_ADDR_EXP 68
11665: PUSH
11666: LD_INT 0
11668: ST_TO_ADDR
// sTroll := false ;
11669: LD_ADDR_EXP 69
11673: PUSH
11674: LD_INT 0
11676: ST_TO_ADDR
// sSlow := false ;
11677: LD_ADDR_EXP 70
11681: PUSH
11682: LD_INT 0
11684: ST_TO_ADDR
// sLack := false ;
11685: LD_ADDR_EXP 71
11689: PUSH
11690: LD_INT 0
11692: ST_TO_ADDR
// sTank := false ;
11693: LD_ADDR_EXP 73
11697: PUSH
11698: LD_INT 0
11700: ST_TO_ADDR
// sRemote := false ;
11701: LD_ADDR_EXP 74
11705: PUSH
11706: LD_INT 0
11708: ST_TO_ADDR
// sPowell := false ;
11709: LD_ADDR_EXP 75
11713: PUSH
11714: LD_INT 0
11716: ST_TO_ADDR
// sTeleport := false ;
11717: LD_ADDR_EXP 78
11721: PUSH
11722: LD_INT 0
11724: ST_TO_ADDR
// sOilTower := false ;
11725: LD_ADDR_EXP 80
11729: PUSH
11730: LD_INT 0
11732: ST_TO_ADDR
// sShovel := false ;
11733: LD_ADDR_EXP 81
11737: PUSH
11738: LD_INT 0
11740: ST_TO_ADDR
// sSheik := false ;
11741: LD_ADDR_EXP 82
11745: PUSH
11746: LD_INT 0
11748: ST_TO_ADDR
// sEarthquake := false ;
11749: LD_ADDR_EXP 84
11753: PUSH
11754: LD_INT 0
11756: ST_TO_ADDR
// sAI := false ;
11757: LD_ADDR_EXP 85
11761: PUSH
11762: LD_INT 0
11764: ST_TO_ADDR
// sCargo := false ;
11765: LD_ADDR_EXP 88
11769: PUSH
11770: LD_INT 0
11772: ST_TO_ADDR
// sDLaser := false ;
11773: LD_ADDR_EXP 89
11777: PUSH
11778: LD_INT 0
11780: ST_TO_ADDR
// sExchange := false ;
11781: LD_ADDR_EXP 90
11785: PUSH
11786: LD_INT 0
11788: ST_TO_ADDR
// sFac := false ;
11789: LD_ADDR_EXP 91
11793: PUSH
11794: LD_INT 0
11796: ST_TO_ADDR
// sPower := false ;
11797: LD_ADDR_EXP 92
11801: PUSH
11802: LD_INT 0
11804: ST_TO_ADDR
// sRandom := false ;
11805: LD_ADDR_EXP 93
11809: PUSH
11810: LD_INT 0
11812: ST_TO_ADDR
// sShield := false ;
11813: LD_ADDR_EXP 94
11817: PUSH
11818: LD_INT 0
11820: ST_TO_ADDR
// sTime := false ;
11821: LD_ADDR_EXP 95
11825: PUSH
11826: LD_INT 0
11828: ST_TO_ADDR
// sTools := false ;
11829: LD_ADDR_EXP 96
11833: PUSH
11834: LD_INT 0
11836: ST_TO_ADDR
// sSold := false ;
11837: LD_ADDR_EXP 61
11841: PUSH
11842: LD_INT 0
11844: ST_TO_ADDR
// sDiff := false ;
11845: LD_ADDR_EXP 62
11849: PUSH
11850: LD_INT 0
11852: ST_TO_ADDR
// sFog := false ;
11853: LD_ADDR_EXP 65
11857: PUSH
11858: LD_INT 0
11860: ST_TO_ADDR
// sReset := false ;
11861: LD_ADDR_EXP 66
11865: PUSH
11866: LD_INT 0
11868: ST_TO_ADDR
// sSun := false ;
11869: LD_ADDR_EXP 67
11873: PUSH
11874: LD_INT 0
11876: ST_TO_ADDR
// sTiger := false ;
11877: LD_ADDR_EXP 63
11881: PUSH
11882: LD_INT 0
11884: ST_TO_ADDR
// sBomb := false ;
11885: LD_ADDR_EXP 64
11889: PUSH
11890: LD_INT 0
11892: ST_TO_ADDR
// sWound := false ;
11893: LD_ADDR_EXP 72
11897: PUSH
11898: LD_INT 0
11900: ST_TO_ADDR
// sBetray := false ;
11901: LD_ADDR_EXP 76
11905: PUSH
11906: LD_INT 0
11908: ST_TO_ADDR
// sContamin := false ;
11909: LD_ADDR_EXP 77
11913: PUSH
11914: LD_INT 0
11916: ST_TO_ADDR
// sOil := false ;
11917: LD_ADDR_EXP 79
11921: PUSH
11922: LD_INT 0
11924: ST_TO_ADDR
// sStu := false ;
11925: LD_ADDR_EXP 83
11929: PUSH
11930: LD_INT 0
11932: ST_TO_ADDR
// sBazooka := false ;
11933: LD_ADDR_EXP 86
11937: PUSH
11938: LD_INT 0
11940: ST_TO_ADDR
// sMortar := false ;
11941: LD_ADDR_EXP 87
11945: PUSH
11946: LD_INT 0
11948: ST_TO_ADDR
// sRanger := false ;
11949: LD_ADDR_EXP 97
11953: PUSH
11954: LD_INT 0
11956: ST_TO_ADDR
// sComputer := false ;
11957: LD_ADDR_EXP 98
11961: PUSH
11962: LD_INT 0
11964: ST_TO_ADDR
// s30 := false ;
11965: LD_ADDR_EXP 99
11969: PUSH
11970: LD_INT 0
11972: ST_TO_ADDR
// s60 := false ;
11973: LD_ADDR_EXP 100
11977: PUSH
11978: LD_INT 0
11980: ST_TO_ADDR
// end ;
11981: LD_VAR 0 1
11985: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11986: LD_INT 0
11988: PPUSH
11989: PPUSH
11990: PPUSH
11991: PPUSH
11992: PPUSH
11993: PPUSH
11994: PPUSH
// result := [ ] ;
11995: LD_ADDR_VAR 0 2
11999: PUSH
12000: EMPTY
12001: ST_TO_ADDR
// if campaign_id = 1 then
12002: LD_OWVAR 69
12006: PUSH
12007: LD_INT 1
12009: EQUAL
12010: IFFALSE 15176
// begin case mission_number of 1 :
12012: LD_OWVAR 70
12016: PUSH
12017: LD_INT 1
12019: DOUBLE
12020: EQUAL
12021: IFTRUE 12025
12023: GO 12101
12025: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12026: LD_ADDR_VAR 0 2
12030: PUSH
12031: LD_INT 2
12033: PUSH
12034: LD_INT 4
12036: PUSH
12037: LD_INT 11
12039: PUSH
12040: LD_INT 12
12042: PUSH
12043: LD_INT 15
12045: PUSH
12046: LD_INT 16
12048: PUSH
12049: LD_INT 22
12051: PUSH
12052: LD_INT 23
12054: PUSH
12055: LD_INT 26
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: PUSH
12069: LD_INT 101
12071: PUSH
12072: LD_INT 102
12074: PUSH
12075: LD_INT 106
12077: PUSH
12078: LD_INT 116
12080: PUSH
12081: LD_INT 117
12083: PUSH
12084: LD_INT 118
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: ST_TO_ADDR
12099: GO 15174
12101: LD_INT 2
12103: DOUBLE
12104: EQUAL
12105: IFTRUE 12109
12107: GO 12193
12109: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12110: LD_ADDR_VAR 0 2
12114: PUSH
12115: LD_INT 2
12117: PUSH
12118: LD_INT 4
12120: PUSH
12121: LD_INT 11
12123: PUSH
12124: LD_INT 12
12126: PUSH
12127: LD_INT 15
12129: PUSH
12130: LD_INT 16
12132: PUSH
12133: LD_INT 22
12135: PUSH
12136: LD_INT 23
12138: PUSH
12139: LD_INT 26
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 101
12155: PUSH
12156: LD_INT 102
12158: PUSH
12159: LD_INT 105
12161: PUSH
12162: LD_INT 106
12164: PUSH
12165: LD_INT 108
12167: PUSH
12168: LD_INT 116
12170: PUSH
12171: LD_INT 117
12173: PUSH
12174: LD_INT 118
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: ST_TO_ADDR
12191: GO 15174
12193: LD_INT 3
12195: DOUBLE
12196: EQUAL
12197: IFTRUE 12201
12199: GO 12289
12201: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12202: LD_ADDR_VAR 0 2
12206: PUSH
12207: LD_INT 2
12209: PUSH
12210: LD_INT 4
12212: PUSH
12213: LD_INT 5
12215: PUSH
12216: LD_INT 11
12218: PUSH
12219: LD_INT 12
12221: PUSH
12222: LD_INT 15
12224: PUSH
12225: LD_INT 16
12227: PUSH
12228: LD_INT 22
12230: PUSH
12231: LD_INT 26
12233: PUSH
12234: LD_INT 36
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 101
12251: PUSH
12252: LD_INT 102
12254: PUSH
12255: LD_INT 105
12257: PUSH
12258: LD_INT 106
12260: PUSH
12261: LD_INT 108
12263: PUSH
12264: LD_INT 116
12266: PUSH
12267: LD_INT 117
12269: PUSH
12270: LD_INT 118
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: ST_TO_ADDR
12287: GO 15174
12289: LD_INT 4
12291: DOUBLE
12292: EQUAL
12293: IFTRUE 12297
12295: GO 12393
12297: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12298: LD_ADDR_VAR 0 2
12302: PUSH
12303: LD_INT 2
12305: PUSH
12306: LD_INT 4
12308: PUSH
12309: LD_INT 5
12311: PUSH
12312: LD_INT 8
12314: PUSH
12315: LD_INT 11
12317: PUSH
12318: LD_INT 12
12320: PUSH
12321: LD_INT 15
12323: PUSH
12324: LD_INT 16
12326: PUSH
12327: LD_INT 22
12329: PUSH
12330: LD_INT 23
12332: PUSH
12333: LD_INT 26
12335: PUSH
12336: LD_INT 36
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 101
12355: PUSH
12356: LD_INT 102
12358: PUSH
12359: LD_INT 105
12361: PUSH
12362: LD_INT 106
12364: PUSH
12365: LD_INT 108
12367: PUSH
12368: LD_INT 116
12370: PUSH
12371: LD_INT 117
12373: PUSH
12374: LD_INT 118
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: ST_TO_ADDR
12391: GO 15174
12393: LD_INT 5
12395: DOUBLE
12396: EQUAL
12397: IFTRUE 12401
12399: GO 12513
12401: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12402: LD_ADDR_VAR 0 2
12406: PUSH
12407: LD_INT 2
12409: PUSH
12410: LD_INT 4
12412: PUSH
12413: LD_INT 5
12415: PUSH
12416: LD_INT 6
12418: PUSH
12419: LD_INT 8
12421: PUSH
12422: LD_INT 11
12424: PUSH
12425: LD_INT 12
12427: PUSH
12428: LD_INT 15
12430: PUSH
12431: LD_INT 16
12433: PUSH
12434: LD_INT 22
12436: PUSH
12437: LD_INT 23
12439: PUSH
12440: LD_INT 25
12442: PUSH
12443: LD_INT 26
12445: PUSH
12446: LD_INT 36
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 101
12467: PUSH
12468: LD_INT 102
12470: PUSH
12471: LD_INT 105
12473: PUSH
12474: LD_INT 106
12476: PUSH
12477: LD_INT 108
12479: PUSH
12480: LD_INT 109
12482: PUSH
12483: LD_INT 112
12485: PUSH
12486: LD_INT 116
12488: PUSH
12489: LD_INT 117
12491: PUSH
12492: LD_INT 118
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: ST_TO_ADDR
12511: GO 15174
12513: LD_INT 6
12515: DOUBLE
12516: EQUAL
12517: IFTRUE 12521
12519: GO 12653
12521: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12522: LD_ADDR_VAR 0 2
12526: PUSH
12527: LD_INT 2
12529: PUSH
12530: LD_INT 4
12532: PUSH
12533: LD_INT 5
12535: PUSH
12536: LD_INT 6
12538: PUSH
12539: LD_INT 8
12541: PUSH
12542: LD_INT 11
12544: PUSH
12545: LD_INT 12
12547: PUSH
12548: LD_INT 15
12550: PUSH
12551: LD_INT 16
12553: PUSH
12554: LD_INT 20
12556: PUSH
12557: LD_INT 21
12559: PUSH
12560: LD_INT 22
12562: PUSH
12563: LD_INT 23
12565: PUSH
12566: LD_INT 25
12568: PUSH
12569: LD_INT 26
12571: PUSH
12572: LD_INT 30
12574: PUSH
12575: LD_INT 31
12577: PUSH
12578: LD_INT 32
12580: PUSH
12581: LD_INT 36
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 101
12607: PUSH
12608: LD_INT 102
12610: PUSH
12611: LD_INT 105
12613: PUSH
12614: LD_INT 106
12616: PUSH
12617: LD_INT 108
12619: PUSH
12620: LD_INT 109
12622: PUSH
12623: LD_INT 112
12625: PUSH
12626: LD_INT 116
12628: PUSH
12629: LD_INT 117
12631: PUSH
12632: LD_INT 118
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: ST_TO_ADDR
12651: GO 15174
12653: LD_INT 7
12655: DOUBLE
12656: EQUAL
12657: IFTRUE 12661
12659: GO 12773
12661: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12662: LD_ADDR_VAR 0 2
12666: PUSH
12667: LD_INT 2
12669: PUSH
12670: LD_INT 4
12672: PUSH
12673: LD_INT 5
12675: PUSH
12676: LD_INT 7
12678: PUSH
12679: LD_INT 11
12681: PUSH
12682: LD_INT 12
12684: PUSH
12685: LD_INT 15
12687: PUSH
12688: LD_INT 16
12690: PUSH
12691: LD_INT 20
12693: PUSH
12694: LD_INT 21
12696: PUSH
12697: LD_INT 22
12699: PUSH
12700: LD_INT 23
12702: PUSH
12703: LD_INT 25
12705: PUSH
12706: LD_INT 26
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 101
12727: PUSH
12728: LD_INT 102
12730: PUSH
12731: LD_INT 103
12733: PUSH
12734: LD_INT 105
12736: PUSH
12737: LD_INT 106
12739: PUSH
12740: LD_INT 108
12742: PUSH
12743: LD_INT 112
12745: PUSH
12746: LD_INT 116
12748: PUSH
12749: LD_INT 117
12751: PUSH
12752: LD_INT 118
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: ST_TO_ADDR
12771: GO 15174
12773: LD_INT 8
12775: DOUBLE
12776: EQUAL
12777: IFTRUE 12781
12779: GO 12921
12781: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12782: LD_ADDR_VAR 0 2
12786: PUSH
12787: LD_INT 2
12789: PUSH
12790: LD_INT 4
12792: PUSH
12793: LD_INT 5
12795: PUSH
12796: LD_INT 6
12798: PUSH
12799: LD_INT 7
12801: PUSH
12802: LD_INT 8
12804: PUSH
12805: LD_INT 11
12807: PUSH
12808: LD_INT 12
12810: PUSH
12811: LD_INT 15
12813: PUSH
12814: LD_INT 16
12816: PUSH
12817: LD_INT 20
12819: PUSH
12820: LD_INT 21
12822: PUSH
12823: LD_INT 22
12825: PUSH
12826: LD_INT 23
12828: PUSH
12829: LD_INT 25
12831: PUSH
12832: LD_INT 26
12834: PUSH
12835: LD_INT 30
12837: PUSH
12838: LD_INT 31
12840: PUSH
12841: LD_INT 32
12843: PUSH
12844: LD_INT 36
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: PUSH
12869: LD_INT 101
12871: PUSH
12872: LD_INT 102
12874: PUSH
12875: LD_INT 103
12877: PUSH
12878: LD_INT 105
12880: PUSH
12881: LD_INT 106
12883: PUSH
12884: LD_INT 108
12886: PUSH
12887: LD_INT 109
12889: PUSH
12890: LD_INT 112
12892: PUSH
12893: LD_INT 116
12895: PUSH
12896: LD_INT 117
12898: PUSH
12899: LD_INT 118
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: ST_TO_ADDR
12919: GO 15174
12921: LD_INT 9
12923: DOUBLE
12924: EQUAL
12925: IFTRUE 12929
12927: GO 13077
12929: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12930: LD_ADDR_VAR 0 2
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: LD_INT 4
12940: PUSH
12941: LD_INT 5
12943: PUSH
12944: LD_INT 6
12946: PUSH
12947: LD_INT 7
12949: PUSH
12950: LD_INT 8
12952: PUSH
12953: LD_INT 11
12955: PUSH
12956: LD_INT 12
12958: PUSH
12959: LD_INT 15
12961: PUSH
12962: LD_INT 16
12964: PUSH
12965: LD_INT 20
12967: PUSH
12968: LD_INT 21
12970: PUSH
12971: LD_INT 22
12973: PUSH
12974: LD_INT 23
12976: PUSH
12977: LD_INT 25
12979: PUSH
12980: LD_INT 26
12982: PUSH
12983: LD_INT 28
12985: PUSH
12986: LD_INT 30
12988: PUSH
12989: LD_INT 31
12991: PUSH
12992: LD_INT 32
12994: PUSH
12995: LD_INT 36
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: PUSH
13021: LD_INT 101
13023: PUSH
13024: LD_INT 102
13026: PUSH
13027: LD_INT 103
13029: PUSH
13030: LD_INT 105
13032: PUSH
13033: LD_INT 106
13035: PUSH
13036: LD_INT 108
13038: PUSH
13039: LD_INT 109
13041: PUSH
13042: LD_INT 112
13044: PUSH
13045: LD_INT 114
13047: PUSH
13048: LD_INT 116
13050: PUSH
13051: LD_INT 117
13053: PUSH
13054: LD_INT 118
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: ST_TO_ADDR
13075: GO 15174
13077: LD_INT 10
13079: DOUBLE
13080: EQUAL
13081: IFTRUE 13085
13083: GO 13281
13085: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13086: LD_ADDR_VAR 0 2
13090: PUSH
13091: LD_INT 2
13093: PUSH
13094: LD_INT 4
13096: PUSH
13097: LD_INT 5
13099: PUSH
13100: LD_INT 6
13102: PUSH
13103: LD_INT 7
13105: PUSH
13106: LD_INT 8
13108: PUSH
13109: LD_INT 9
13111: PUSH
13112: LD_INT 10
13114: PUSH
13115: LD_INT 11
13117: PUSH
13118: LD_INT 12
13120: PUSH
13121: LD_INT 13
13123: PUSH
13124: LD_INT 14
13126: PUSH
13127: LD_INT 15
13129: PUSH
13130: LD_INT 16
13132: PUSH
13133: LD_INT 17
13135: PUSH
13136: LD_INT 18
13138: PUSH
13139: LD_INT 19
13141: PUSH
13142: LD_INT 20
13144: PUSH
13145: LD_INT 21
13147: PUSH
13148: LD_INT 22
13150: PUSH
13151: LD_INT 23
13153: PUSH
13154: LD_INT 24
13156: PUSH
13157: LD_INT 25
13159: PUSH
13160: LD_INT 26
13162: PUSH
13163: LD_INT 28
13165: PUSH
13166: LD_INT 30
13168: PUSH
13169: LD_INT 31
13171: PUSH
13172: LD_INT 32
13174: PUSH
13175: LD_INT 36
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: PUSH
13209: LD_INT 101
13211: PUSH
13212: LD_INT 102
13214: PUSH
13215: LD_INT 103
13217: PUSH
13218: LD_INT 104
13220: PUSH
13221: LD_INT 105
13223: PUSH
13224: LD_INT 106
13226: PUSH
13227: LD_INT 107
13229: PUSH
13230: LD_INT 108
13232: PUSH
13233: LD_INT 109
13235: PUSH
13236: LD_INT 110
13238: PUSH
13239: LD_INT 111
13241: PUSH
13242: LD_INT 112
13244: PUSH
13245: LD_INT 114
13247: PUSH
13248: LD_INT 116
13250: PUSH
13251: LD_INT 117
13253: PUSH
13254: LD_INT 118
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: ST_TO_ADDR
13279: GO 15174
13281: LD_INT 11
13283: DOUBLE
13284: EQUAL
13285: IFTRUE 13289
13287: GO 13493
13289: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13290: LD_ADDR_VAR 0 2
13294: PUSH
13295: LD_INT 2
13297: PUSH
13298: LD_INT 3
13300: PUSH
13301: LD_INT 4
13303: PUSH
13304: LD_INT 5
13306: PUSH
13307: LD_INT 6
13309: PUSH
13310: LD_INT 7
13312: PUSH
13313: LD_INT 8
13315: PUSH
13316: LD_INT 9
13318: PUSH
13319: LD_INT 10
13321: PUSH
13322: LD_INT 11
13324: PUSH
13325: LD_INT 12
13327: PUSH
13328: LD_INT 13
13330: PUSH
13331: LD_INT 14
13333: PUSH
13334: LD_INT 15
13336: PUSH
13337: LD_INT 16
13339: PUSH
13340: LD_INT 17
13342: PUSH
13343: LD_INT 18
13345: PUSH
13346: LD_INT 19
13348: PUSH
13349: LD_INT 20
13351: PUSH
13352: LD_INT 21
13354: PUSH
13355: LD_INT 22
13357: PUSH
13358: LD_INT 23
13360: PUSH
13361: LD_INT 24
13363: PUSH
13364: LD_INT 25
13366: PUSH
13367: LD_INT 26
13369: PUSH
13370: LD_INT 28
13372: PUSH
13373: LD_INT 30
13375: PUSH
13376: LD_INT 31
13378: PUSH
13379: LD_INT 32
13381: PUSH
13382: LD_INT 34
13384: PUSH
13385: LD_INT 36
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: PUSH
13421: LD_INT 101
13423: PUSH
13424: LD_INT 102
13426: PUSH
13427: LD_INT 103
13429: PUSH
13430: LD_INT 104
13432: PUSH
13433: LD_INT 105
13435: PUSH
13436: LD_INT 106
13438: PUSH
13439: LD_INT 107
13441: PUSH
13442: LD_INT 108
13444: PUSH
13445: LD_INT 109
13447: PUSH
13448: LD_INT 110
13450: PUSH
13451: LD_INT 111
13453: PUSH
13454: LD_INT 112
13456: PUSH
13457: LD_INT 114
13459: PUSH
13460: LD_INT 116
13462: PUSH
13463: LD_INT 117
13465: PUSH
13466: LD_INT 118
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: ST_TO_ADDR
13491: GO 15174
13493: LD_INT 12
13495: DOUBLE
13496: EQUAL
13497: IFTRUE 13501
13499: GO 13721
13501: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13502: LD_ADDR_VAR 0 2
13506: PUSH
13507: LD_INT 1
13509: PUSH
13510: LD_INT 2
13512: PUSH
13513: LD_INT 3
13515: PUSH
13516: LD_INT 4
13518: PUSH
13519: LD_INT 5
13521: PUSH
13522: LD_INT 6
13524: PUSH
13525: LD_INT 7
13527: PUSH
13528: LD_INT 8
13530: PUSH
13531: LD_INT 9
13533: PUSH
13534: LD_INT 10
13536: PUSH
13537: LD_INT 11
13539: PUSH
13540: LD_INT 12
13542: PUSH
13543: LD_INT 13
13545: PUSH
13546: LD_INT 14
13548: PUSH
13549: LD_INT 15
13551: PUSH
13552: LD_INT 16
13554: PUSH
13555: LD_INT 17
13557: PUSH
13558: LD_INT 18
13560: PUSH
13561: LD_INT 19
13563: PUSH
13564: LD_INT 20
13566: PUSH
13567: LD_INT 21
13569: PUSH
13570: LD_INT 22
13572: PUSH
13573: LD_INT 23
13575: PUSH
13576: LD_INT 24
13578: PUSH
13579: LD_INT 25
13581: PUSH
13582: LD_INT 26
13584: PUSH
13585: LD_INT 27
13587: PUSH
13588: LD_INT 28
13590: PUSH
13591: LD_INT 30
13593: PUSH
13594: LD_INT 31
13596: PUSH
13597: LD_INT 32
13599: PUSH
13600: LD_INT 33
13602: PUSH
13603: LD_INT 34
13605: PUSH
13606: LD_INT 36
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: PUSH
13645: LD_INT 101
13647: PUSH
13648: LD_INT 102
13650: PUSH
13651: LD_INT 103
13653: PUSH
13654: LD_INT 104
13656: PUSH
13657: LD_INT 105
13659: PUSH
13660: LD_INT 106
13662: PUSH
13663: LD_INT 107
13665: PUSH
13666: LD_INT 108
13668: PUSH
13669: LD_INT 109
13671: PUSH
13672: LD_INT 110
13674: PUSH
13675: LD_INT 111
13677: PUSH
13678: LD_INT 112
13680: PUSH
13681: LD_INT 113
13683: PUSH
13684: LD_INT 114
13686: PUSH
13687: LD_INT 116
13689: PUSH
13690: LD_INT 117
13692: PUSH
13693: LD_INT 118
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: ST_TO_ADDR
13719: GO 15174
13721: LD_INT 13
13723: DOUBLE
13724: EQUAL
13725: IFTRUE 13729
13727: GO 13937
13729: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13730: LD_ADDR_VAR 0 2
13734: PUSH
13735: LD_INT 1
13737: PUSH
13738: LD_INT 2
13740: PUSH
13741: LD_INT 3
13743: PUSH
13744: LD_INT 4
13746: PUSH
13747: LD_INT 5
13749: PUSH
13750: LD_INT 8
13752: PUSH
13753: LD_INT 9
13755: PUSH
13756: LD_INT 10
13758: PUSH
13759: LD_INT 11
13761: PUSH
13762: LD_INT 12
13764: PUSH
13765: LD_INT 14
13767: PUSH
13768: LD_INT 15
13770: PUSH
13771: LD_INT 16
13773: PUSH
13774: LD_INT 17
13776: PUSH
13777: LD_INT 18
13779: PUSH
13780: LD_INT 19
13782: PUSH
13783: LD_INT 20
13785: PUSH
13786: LD_INT 21
13788: PUSH
13789: LD_INT 22
13791: PUSH
13792: LD_INT 23
13794: PUSH
13795: LD_INT 24
13797: PUSH
13798: LD_INT 25
13800: PUSH
13801: LD_INT 26
13803: PUSH
13804: LD_INT 27
13806: PUSH
13807: LD_INT 28
13809: PUSH
13810: LD_INT 30
13812: PUSH
13813: LD_INT 31
13815: PUSH
13816: LD_INT 32
13818: PUSH
13819: LD_INT 33
13821: PUSH
13822: LD_INT 34
13824: PUSH
13825: LD_INT 36
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: PUSH
13861: LD_INT 101
13863: PUSH
13864: LD_INT 102
13866: PUSH
13867: LD_INT 103
13869: PUSH
13870: LD_INT 104
13872: PUSH
13873: LD_INT 105
13875: PUSH
13876: LD_INT 106
13878: PUSH
13879: LD_INT 107
13881: PUSH
13882: LD_INT 108
13884: PUSH
13885: LD_INT 109
13887: PUSH
13888: LD_INT 110
13890: PUSH
13891: LD_INT 111
13893: PUSH
13894: LD_INT 112
13896: PUSH
13897: LD_INT 113
13899: PUSH
13900: LD_INT 114
13902: PUSH
13903: LD_INT 116
13905: PUSH
13906: LD_INT 117
13908: PUSH
13909: LD_INT 118
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: ST_TO_ADDR
13935: GO 15174
13937: LD_INT 14
13939: DOUBLE
13940: EQUAL
13941: IFTRUE 13945
13943: GO 14169
13945: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13946: LD_ADDR_VAR 0 2
13950: PUSH
13951: LD_INT 1
13953: PUSH
13954: LD_INT 2
13956: PUSH
13957: LD_INT 3
13959: PUSH
13960: LD_INT 4
13962: PUSH
13963: LD_INT 5
13965: PUSH
13966: LD_INT 6
13968: PUSH
13969: LD_INT 7
13971: PUSH
13972: LD_INT 8
13974: PUSH
13975: LD_INT 9
13977: PUSH
13978: LD_INT 10
13980: PUSH
13981: LD_INT 11
13983: PUSH
13984: LD_INT 12
13986: PUSH
13987: LD_INT 13
13989: PUSH
13990: LD_INT 14
13992: PUSH
13993: LD_INT 15
13995: PUSH
13996: LD_INT 16
13998: PUSH
13999: LD_INT 17
14001: PUSH
14002: LD_INT 18
14004: PUSH
14005: LD_INT 19
14007: PUSH
14008: LD_INT 20
14010: PUSH
14011: LD_INT 21
14013: PUSH
14014: LD_INT 22
14016: PUSH
14017: LD_INT 23
14019: PUSH
14020: LD_INT 24
14022: PUSH
14023: LD_INT 25
14025: PUSH
14026: LD_INT 26
14028: PUSH
14029: LD_INT 27
14031: PUSH
14032: LD_INT 28
14034: PUSH
14035: LD_INT 29
14037: PUSH
14038: LD_INT 30
14040: PUSH
14041: LD_INT 31
14043: PUSH
14044: LD_INT 32
14046: PUSH
14047: LD_INT 33
14049: PUSH
14050: LD_INT 34
14052: PUSH
14053: LD_INT 36
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: PUSH
14093: LD_INT 101
14095: PUSH
14096: LD_INT 102
14098: PUSH
14099: LD_INT 103
14101: PUSH
14102: LD_INT 104
14104: PUSH
14105: LD_INT 105
14107: PUSH
14108: LD_INT 106
14110: PUSH
14111: LD_INT 107
14113: PUSH
14114: LD_INT 108
14116: PUSH
14117: LD_INT 109
14119: PUSH
14120: LD_INT 110
14122: PUSH
14123: LD_INT 111
14125: PUSH
14126: LD_INT 112
14128: PUSH
14129: LD_INT 113
14131: PUSH
14132: LD_INT 114
14134: PUSH
14135: LD_INT 116
14137: PUSH
14138: LD_INT 117
14140: PUSH
14141: LD_INT 118
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: ST_TO_ADDR
14167: GO 15174
14169: LD_INT 15
14171: DOUBLE
14172: EQUAL
14173: IFTRUE 14177
14175: GO 14401
14177: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14178: LD_ADDR_VAR 0 2
14182: PUSH
14183: LD_INT 1
14185: PUSH
14186: LD_INT 2
14188: PUSH
14189: LD_INT 3
14191: PUSH
14192: LD_INT 4
14194: PUSH
14195: LD_INT 5
14197: PUSH
14198: LD_INT 6
14200: PUSH
14201: LD_INT 7
14203: PUSH
14204: LD_INT 8
14206: PUSH
14207: LD_INT 9
14209: PUSH
14210: LD_INT 10
14212: PUSH
14213: LD_INT 11
14215: PUSH
14216: LD_INT 12
14218: PUSH
14219: LD_INT 13
14221: PUSH
14222: LD_INT 14
14224: PUSH
14225: LD_INT 15
14227: PUSH
14228: LD_INT 16
14230: PUSH
14231: LD_INT 17
14233: PUSH
14234: LD_INT 18
14236: PUSH
14237: LD_INT 19
14239: PUSH
14240: LD_INT 20
14242: PUSH
14243: LD_INT 21
14245: PUSH
14246: LD_INT 22
14248: PUSH
14249: LD_INT 23
14251: PUSH
14252: LD_INT 24
14254: PUSH
14255: LD_INT 25
14257: PUSH
14258: LD_INT 26
14260: PUSH
14261: LD_INT 27
14263: PUSH
14264: LD_INT 28
14266: PUSH
14267: LD_INT 29
14269: PUSH
14270: LD_INT 30
14272: PUSH
14273: LD_INT 31
14275: PUSH
14276: LD_INT 32
14278: PUSH
14279: LD_INT 33
14281: PUSH
14282: LD_INT 34
14284: PUSH
14285: LD_INT 36
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 101
14327: PUSH
14328: LD_INT 102
14330: PUSH
14331: LD_INT 103
14333: PUSH
14334: LD_INT 104
14336: PUSH
14337: LD_INT 105
14339: PUSH
14340: LD_INT 106
14342: PUSH
14343: LD_INT 107
14345: PUSH
14346: LD_INT 108
14348: PUSH
14349: LD_INT 109
14351: PUSH
14352: LD_INT 110
14354: PUSH
14355: LD_INT 111
14357: PUSH
14358: LD_INT 112
14360: PUSH
14361: LD_INT 113
14363: PUSH
14364: LD_INT 114
14366: PUSH
14367: LD_INT 116
14369: PUSH
14370: LD_INT 117
14372: PUSH
14373: LD_INT 118
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: ST_TO_ADDR
14399: GO 15174
14401: LD_INT 16
14403: DOUBLE
14404: EQUAL
14405: IFTRUE 14409
14407: GO 14545
14409: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14410: LD_ADDR_VAR 0 2
14414: PUSH
14415: LD_INT 2
14417: PUSH
14418: LD_INT 4
14420: PUSH
14421: LD_INT 5
14423: PUSH
14424: LD_INT 7
14426: PUSH
14427: LD_INT 11
14429: PUSH
14430: LD_INT 12
14432: PUSH
14433: LD_INT 15
14435: PUSH
14436: LD_INT 16
14438: PUSH
14439: LD_INT 20
14441: PUSH
14442: LD_INT 21
14444: PUSH
14445: LD_INT 22
14447: PUSH
14448: LD_INT 23
14450: PUSH
14451: LD_INT 25
14453: PUSH
14454: LD_INT 26
14456: PUSH
14457: LD_INT 30
14459: PUSH
14460: LD_INT 31
14462: PUSH
14463: LD_INT 32
14465: PUSH
14466: LD_INT 33
14468: PUSH
14469: LD_INT 34
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 101
14495: PUSH
14496: LD_INT 102
14498: PUSH
14499: LD_INT 103
14501: PUSH
14502: LD_INT 106
14504: PUSH
14505: LD_INT 108
14507: PUSH
14508: LD_INT 112
14510: PUSH
14511: LD_INT 113
14513: PUSH
14514: LD_INT 114
14516: PUSH
14517: LD_INT 116
14519: PUSH
14520: LD_INT 117
14522: PUSH
14523: LD_INT 118
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: ST_TO_ADDR
14543: GO 15174
14545: LD_INT 17
14547: DOUBLE
14548: EQUAL
14549: IFTRUE 14553
14551: GO 14777
14553: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14554: LD_ADDR_VAR 0 2
14558: PUSH
14559: LD_INT 1
14561: PUSH
14562: LD_INT 2
14564: PUSH
14565: LD_INT 3
14567: PUSH
14568: LD_INT 4
14570: PUSH
14571: LD_INT 5
14573: PUSH
14574: LD_INT 6
14576: PUSH
14577: LD_INT 7
14579: PUSH
14580: LD_INT 8
14582: PUSH
14583: LD_INT 9
14585: PUSH
14586: LD_INT 10
14588: PUSH
14589: LD_INT 11
14591: PUSH
14592: LD_INT 12
14594: PUSH
14595: LD_INT 13
14597: PUSH
14598: LD_INT 14
14600: PUSH
14601: LD_INT 15
14603: PUSH
14604: LD_INT 16
14606: PUSH
14607: LD_INT 17
14609: PUSH
14610: LD_INT 18
14612: PUSH
14613: LD_INT 19
14615: PUSH
14616: LD_INT 20
14618: PUSH
14619: LD_INT 21
14621: PUSH
14622: LD_INT 22
14624: PUSH
14625: LD_INT 23
14627: PUSH
14628: LD_INT 24
14630: PUSH
14631: LD_INT 25
14633: PUSH
14634: LD_INT 26
14636: PUSH
14637: LD_INT 27
14639: PUSH
14640: LD_INT 28
14642: PUSH
14643: LD_INT 29
14645: PUSH
14646: LD_INT 30
14648: PUSH
14649: LD_INT 31
14651: PUSH
14652: LD_INT 32
14654: PUSH
14655: LD_INT 33
14657: PUSH
14658: LD_INT 34
14660: PUSH
14661: LD_INT 36
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 101
14703: PUSH
14704: LD_INT 102
14706: PUSH
14707: LD_INT 103
14709: PUSH
14710: LD_INT 104
14712: PUSH
14713: LD_INT 105
14715: PUSH
14716: LD_INT 106
14718: PUSH
14719: LD_INT 107
14721: PUSH
14722: LD_INT 108
14724: PUSH
14725: LD_INT 109
14727: PUSH
14728: LD_INT 110
14730: PUSH
14731: LD_INT 111
14733: PUSH
14734: LD_INT 112
14736: PUSH
14737: LD_INT 113
14739: PUSH
14740: LD_INT 114
14742: PUSH
14743: LD_INT 116
14745: PUSH
14746: LD_INT 117
14748: PUSH
14749: LD_INT 118
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: ST_TO_ADDR
14775: GO 15174
14777: LD_INT 18
14779: DOUBLE
14780: EQUAL
14781: IFTRUE 14785
14783: GO 14933
14785: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14786: LD_ADDR_VAR 0 2
14790: PUSH
14791: LD_INT 2
14793: PUSH
14794: LD_INT 4
14796: PUSH
14797: LD_INT 5
14799: PUSH
14800: LD_INT 7
14802: PUSH
14803: LD_INT 11
14805: PUSH
14806: LD_INT 12
14808: PUSH
14809: LD_INT 15
14811: PUSH
14812: LD_INT 16
14814: PUSH
14815: LD_INT 20
14817: PUSH
14818: LD_INT 21
14820: PUSH
14821: LD_INT 22
14823: PUSH
14824: LD_INT 23
14826: PUSH
14827: LD_INT 25
14829: PUSH
14830: LD_INT 26
14832: PUSH
14833: LD_INT 30
14835: PUSH
14836: LD_INT 31
14838: PUSH
14839: LD_INT 32
14841: PUSH
14842: LD_INT 33
14844: PUSH
14845: LD_INT 34
14847: PUSH
14848: LD_INT 35
14850: PUSH
14851: LD_INT 36
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: PUSH
14877: LD_INT 101
14879: PUSH
14880: LD_INT 102
14882: PUSH
14883: LD_INT 103
14885: PUSH
14886: LD_INT 106
14888: PUSH
14889: LD_INT 108
14891: PUSH
14892: LD_INT 112
14894: PUSH
14895: LD_INT 113
14897: PUSH
14898: LD_INT 114
14900: PUSH
14901: LD_INT 115
14903: PUSH
14904: LD_INT 116
14906: PUSH
14907: LD_INT 117
14909: PUSH
14910: LD_INT 118
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: ST_TO_ADDR
14931: GO 15174
14933: LD_INT 19
14935: DOUBLE
14936: EQUAL
14937: IFTRUE 14941
14939: GO 15173
14941: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14942: LD_ADDR_VAR 0 2
14946: PUSH
14947: LD_INT 1
14949: PUSH
14950: LD_INT 2
14952: PUSH
14953: LD_INT 3
14955: PUSH
14956: LD_INT 4
14958: PUSH
14959: LD_INT 5
14961: PUSH
14962: LD_INT 6
14964: PUSH
14965: LD_INT 7
14967: PUSH
14968: LD_INT 8
14970: PUSH
14971: LD_INT 9
14973: PUSH
14974: LD_INT 10
14976: PUSH
14977: LD_INT 11
14979: PUSH
14980: LD_INT 12
14982: PUSH
14983: LD_INT 13
14985: PUSH
14986: LD_INT 14
14988: PUSH
14989: LD_INT 15
14991: PUSH
14992: LD_INT 16
14994: PUSH
14995: LD_INT 17
14997: PUSH
14998: LD_INT 18
15000: PUSH
15001: LD_INT 19
15003: PUSH
15004: LD_INT 20
15006: PUSH
15007: LD_INT 21
15009: PUSH
15010: LD_INT 22
15012: PUSH
15013: LD_INT 23
15015: PUSH
15016: LD_INT 24
15018: PUSH
15019: LD_INT 25
15021: PUSH
15022: LD_INT 26
15024: PUSH
15025: LD_INT 27
15027: PUSH
15028: LD_INT 28
15030: PUSH
15031: LD_INT 29
15033: PUSH
15034: LD_INT 30
15036: PUSH
15037: LD_INT 31
15039: PUSH
15040: LD_INT 32
15042: PUSH
15043: LD_INT 33
15045: PUSH
15046: LD_INT 34
15048: PUSH
15049: LD_INT 35
15051: PUSH
15052: LD_INT 36
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 101
15095: PUSH
15096: LD_INT 102
15098: PUSH
15099: LD_INT 103
15101: PUSH
15102: LD_INT 104
15104: PUSH
15105: LD_INT 105
15107: PUSH
15108: LD_INT 106
15110: PUSH
15111: LD_INT 107
15113: PUSH
15114: LD_INT 108
15116: PUSH
15117: LD_INT 109
15119: PUSH
15120: LD_INT 110
15122: PUSH
15123: LD_INT 111
15125: PUSH
15126: LD_INT 112
15128: PUSH
15129: LD_INT 113
15131: PUSH
15132: LD_INT 114
15134: PUSH
15135: LD_INT 115
15137: PUSH
15138: LD_INT 116
15140: PUSH
15141: LD_INT 117
15143: PUSH
15144: LD_INT 118
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: ST_TO_ADDR
15171: GO 15174
15173: POP
// end else
15174: GO 15405
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15176: LD_ADDR_VAR 0 2
15180: PUSH
15181: LD_INT 1
15183: PUSH
15184: LD_INT 2
15186: PUSH
15187: LD_INT 3
15189: PUSH
15190: LD_INT 4
15192: PUSH
15193: LD_INT 5
15195: PUSH
15196: LD_INT 6
15198: PUSH
15199: LD_INT 7
15201: PUSH
15202: LD_INT 8
15204: PUSH
15205: LD_INT 9
15207: PUSH
15208: LD_INT 10
15210: PUSH
15211: LD_INT 11
15213: PUSH
15214: LD_INT 12
15216: PUSH
15217: LD_INT 13
15219: PUSH
15220: LD_INT 14
15222: PUSH
15223: LD_INT 15
15225: PUSH
15226: LD_INT 16
15228: PUSH
15229: LD_INT 17
15231: PUSH
15232: LD_INT 18
15234: PUSH
15235: LD_INT 19
15237: PUSH
15238: LD_INT 20
15240: PUSH
15241: LD_INT 21
15243: PUSH
15244: LD_INT 22
15246: PUSH
15247: LD_INT 23
15249: PUSH
15250: LD_INT 24
15252: PUSH
15253: LD_INT 25
15255: PUSH
15256: LD_INT 26
15258: PUSH
15259: LD_INT 27
15261: PUSH
15262: LD_INT 28
15264: PUSH
15265: LD_INT 29
15267: PUSH
15268: LD_INT 30
15270: PUSH
15271: LD_INT 31
15273: PUSH
15274: LD_INT 32
15276: PUSH
15277: LD_INT 33
15279: PUSH
15280: LD_INT 34
15282: PUSH
15283: LD_INT 35
15285: PUSH
15286: LD_INT 36
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 101
15329: PUSH
15330: LD_INT 102
15332: PUSH
15333: LD_INT 103
15335: PUSH
15336: LD_INT 104
15338: PUSH
15339: LD_INT 105
15341: PUSH
15342: LD_INT 106
15344: PUSH
15345: LD_INT 107
15347: PUSH
15348: LD_INT 108
15350: PUSH
15351: LD_INT 109
15353: PUSH
15354: LD_INT 110
15356: PUSH
15357: LD_INT 111
15359: PUSH
15360: LD_INT 112
15362: PUSH
15363: LD_INT 113
15365: PUSH
15366: LD_INT 114
15368: PUSH
15369: LD_INT 115
15371: PUSH
15372: LD_INT 116
15374: PUSH
15375: LD_INT 117
15377: PUSH
15378: LD_INT 118
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: ST_TO_ADDR
// if result then
15405: LD_VAR 0 2
15409: IFFALSE 16195
// begin normal :=  ;
15411: LD_ADDR_VAR 0 5
15415: PUSH
15416: LD_STRING 
15418: ST_TO_ADDR
// hardcore :=  ;
15419: LD_ADDR_VAR 0 6
15423: PUSH
15424: LD_STRING 
15426: ST_TO_ADDR
// active :=  ;
15427: LD_ADDR_VAR 0 7
15431: PUSH
15432: LD_STRING 
15434: ST_TO_ADDR
// for i = 1 to normalCounter do
15435: LD_ADDR_VAR 0 8
15439: PUSH
15440: DOUBLE
15441: LD_INT 1
15443: DEC
15444: ST_TO_ADDR
15445: LD_EXP 45
15449: PUSH
15450: FOR_TO
15451: IFFALSE 15552
// begin tmp := 0 ;
15453: LD_ADDR_VAR 0 3
15457: PUSH
15458: LD_STRING 0
15460: ST_TO_ADDR
// if result [ 1 ] then
15461: LD_VAR 0 2
15465: PUSH
15466: LD_INT 1
15468: ARRAY
15469: IFFALSE 15534
// if result [ 1 ] [ 1 ] = i then
15471: LD_VAR 0 2
15475: PUSH
15476: LD_INT 1
15478: ARRAY
15479: PUSH
15480: LD_INT 1
15482: ARRAY
15483: PUSH
15484: LD_VAR 0 8
15488: EQUAL
15489: IFFALSE 15534
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15491: LD_ADDR_VAR 0 2
15495: PUSH
15496: LD_VAR 0 2
15500: PPUSH
15501: LD_INT 1
15503: PPUSH
15504: LD_VAR 0 2
15508: PUSH
15509: LD_INT 1
15511: ARRAY
15512: PPUSH
15513: LD_INT 1
15515: PPUSH
15516: CALL_OW 3
15520: PPUSH
15521: CALL_OW 1
15525: ST_TO_ADDR
// tmp := 1 ;
15526: LD_ADDR_VAR 0 3
15530: PUSH
15531: LD_STRING 1
15533: ST_TO_ADDR
// end ; normal := normal & tmp ;
15534: LD_ADDR_VAR 0 5
15538: PUSH
15539: LD_VAR 0 5
15543: PUSH
15544: LD_VAR 0 3
15548: STR
15549: ST_TO_ADDR
// end ;
15550: GO 15450
15552: POP
15553: POP
// for i = 1 to hardcoreCounter do
15554: LD_ADDR_VAR 0 8
15558: PUSH
15559: DOUBLE
15560: LD_INT 1
15562: DEC
15563: ST_TO_ADDR
15564: LD_EXP 46
15568: PUSH
15569: FOR_TO
15570: IFFALSE 15675
// begin tmp := 0 ;
15572: LD_ADDR_VAR 0 3
15576: PUSH
15577: LD_STRING 0
15579: ST_TO_ADDR
// if result [ 2 ] then
15580: LD_VAR 0 2
15584: PUSH
15585: LD_INT 2
15587: ARRAY
15588: IFFALSE 15657
// if result [ 2 ] [ 1 ] = 100 + i then
15590: LD_VAR 0 2
15594: PUSH
15595: LD_INT 2
15597: ARRAY
15598: PUSH
15599: LD_INT 1
15601: ARRAY
15602: PUSH
15603: LD_INT 100
15605: PUSH
15606: LD_VAR 0 8
15610: PLUS
15611: EQUAL
15612: IFFALSE 15657
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15614: LD_ADDR_VAR 0 2
15618: PUSH
15619: LD_VAR 0 2
15623: PPUSH
15624: LD_INT 2
15626: PPUSH
15627: LD_VAR 0 2
15631: PUSH
15632: LD_INT 2
15634: ARRAY
15635: PPUSH
15636: LD_INT 1
15638: PPUSH
15639: CALL_OW 3
15643: PPUSH
15644: CALL_OW 1
15648: ST_TO_ADDR
// tmp := 1 ;
15649: LD_ADDR_VAR 0 3
15653: PUSH
15654: LD_STRING 1
15656: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15657: LD_ADDR_VAR 0 6
15661: PUSH
15662: LD_VAR 0 6
15666: PUSH
15667: LD_VAR 0 3
15671: STR
15672: ST_TO_ADDR
// end ;
15673: GO 15569
15675: POP
15676: POP
// if isGameLoad then
15677: LD_VAR 0 1
15681: IFFALSE 16156
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15683: LD_ADDR_VAR 0 4
15687: PUSH
15688: LD_EXP 49
15692: PUSH
15693: LD_EXP 48
15697: PUSH
15698: LD_EXP 50
15702: PUSH
15703: LD_EXP 47
15707: PUSH
15708: LD_EXP 51
15712: PUSH
15713: LD_EXP 52
15717: PUSH
15718: LD_EXP 53
15722: PUSH
15723: LD_EXP 54
15727: PUSH
15728: LD_EXP 55
15732: PUSH
15733: LD_EXP 56
15737: PUSH
15738: LD_EXP 57
15742: PUSH
15743: LD_EXP 58
15747: PUSH
15748: LD_EXP 59
15752: PUSH
15753: LD_EXP 60
15757: PUSH
15758: LD_EXP 68
15762: PUSH
15763: LD_EXP 69
15767: PUSH
15768: LD_EXP 70
15772: PUSH
15773: LD_EXP 71
15777: PUSH
15778: LD_EXP 73
15782: PUSH
15783: LD_EXP 74
15787: PUSH
15788: LD_EXP 75
15792: PUSH
15793: LD_EXP 78
15797: PUSH
15798: LD_EXP 80
15802: PUSH
15803: LD_EXP 81
15807: PUSH
15808: LD_EXP 82
15812: PUSH
15813: LD_EXP 84
15817: PUSH
15818: LD_EXP 85
15822: PUSH
15823: LD_EXP 88
15827: PUSH
15828: LD_EXP 89
15832: PUSH
15833: LD_EXP 90
15837: PUSH
15838: LD_EXP 91
15842: PUSH
15843: LD_EXP 92
15847: PUSH
15848: LD_EXP 93
15852: PUSH
15853: LD_EXP 94
15857: PUSH
15858: LD_EXP 95
15862: PUSH
15863: LD_EXP 96
15867: PUSH
15868: LD_EXP 61
15872: PUSH
15873: LD_EXP 62
15877: PUSH
15878: LD_EXP 65
15882: PUSH
15883: LD_EXP 66
15887: PUSH
15888: LD_EXP 67
15892: PUSH
15893: LD_EXP 63
15897: PUSH
15898: LD_EXP 64
15902: PUSH
15903: LD_EXP 72
15907: PUSH
15908: LD_EXP 76
15912: PUSH
15913: LD_EXP 77
15917: PUSH
15918: LD_EXP 79
15922: PUSH
15923: LD_EXP 83
15927: PUSH
15928: LD_EXP 86
15932: PUSH
15933: LD_EXP 87
15937: PUSH
15938: LD_EXP 97
15942: PUSH
15943: LD_EXP 98
15947: PUSH
15948: LD_EXP 99
15952: PUSH
15953: LD_EXP 100
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: ST_TO_ADDR
// tmp :=  ;
16014: LD_ADDR_VAR 0 3
16018: PUSH
16019: LD_STRING 
16021: ST_TO_ADDR
// for i = 1 to normalCounter do
16022: LD_ADDR_VAR 0 8
16026: PUSH
16027: DOUBLE
16028: LD_INT 1
16030: DEC
16031: ST_TO_ADDR
16032: LD_EXP 45
16036: PUSH
16037: FOR_TO
16038: IFFALSE 16074
// begin if flags [ i ] then
16040: LD_VAR 0 4
16044: PUSH
16045: LD_VAR 0 8
16049: ARRAY
16050: IFFALSE 16072
// tmp := tmp & i & ; ;
16052: LD_ADDR_VAR 0 3
16056: PUSH
16057: LD_VAR 0 3
16061: PUSH
16062: LD_VAR 0 8
16066: STR
16067: PUSH
16068: LD_STRING ;
16070: STR
16071: ST_TO_ADDR
// end ;
16072: GO 16037
16074: POP
16075: POP
// for i = 1 to hardcoreCounter do
16076: LD_ADDR_VAR 0 8
16080: PUSH
16081: DOUBLE
16082: LD_INT 1
16084: DEC
16085: ST_TO_ADDR
16086: LD_EXP 46
16090: PUSH
16091: FOR_TO
16092: IFFALSE 16138
// begin if flags [ normalCounter + i ] then
16094: LD_VAR 0 4
16098: PUSH
16099: LD_EXP 45
16103: PUSH
16104: LD_VAR 0 8
16108: PLUS
16109: ARRAY
16110: IFFALSE 16136
// tmp := tmp & ( 100 + i ) & ; ;
16112: LD_ADDR_VAR 0 3
16116: PUSH
16117: LD_VAR 0 3
16121: PUSH
16122: LD_INT 100
16124: PUSH
16125: LD_VAR 0 8
16129: PLUS
16130: STR
16131: PUSH
16132: LD_STRING ;
16134: STR
16135: ST_TO_ADDR
// end ;
16136: GO 16091
16138: POP
16139: POP
// if tmp then
16140: LD_VAR 0 3
16144: IFFALSE 16156
// active := tmp ;
16146: LD_ADDR_VAR 0 7
16150: PUSH
16151: LD_VAR 0 3
16155: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16156: LD_STRING getStreamItemsFromMission("
16158: PUSH
16159: LD_VAR 0 5
16163: STR
16164: PUSH
16165: LD_STRING ","
16167: STR
16168: PUSH
16169: LD_VAR 0 6
16173: STR
16174: PUSH
16175: LD_STRING ","
16177: STR
16178: PUSH
16179: LD_VAR 0 7
16183: STR
16184: PUSH
16185: LD_STRING ")
16187: STR
16188: PPUSH
16189: CALL_OW 559
// end else
16193: GO 16202
// ToLua ( getStreamItemsFromMission("","","") ) ;
16195: LD_STRING getStreamItemsFromMission("","","")
16197: PPUSH
16198: CALL_OW 559
// end ;
16202: LD_VAR 0 2
16206: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16207: LD_EXP 44
16211: PUSH
16212: LD_EXP 49
16216: AND
16217: IFFALSE 16341
16219: GO 16221
16221: DISABLE
16222: LD_INT 0
16224: PPUSH
16225: PPUSH
// begin enable ;
16226: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16227: LD_ADDR_VAR 0 2
16231: PUSH
16232: LD_INT 22
16234: PUSH
16235: LD_OWVAR 2
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 2
16246: PUSH
16247: LD_INT 34
16249: PUSH
16250: LD_INT 7
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 34
16259: PUSH
16260: LD_INT 45
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 34
16269: PUSH
16270: LD_INT 28
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 34
16279: PUSH
16280: LD_INT 47
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PPUSH
16298: CALL_OW 69
16302: ST_TO_ADDR
// if not tmp then
16303: LD_VAR 0 2
16307: NOT
16308: IFFALSE 16312
// exit ;
16310: GO 16341
// for i in tmp do
16312: LD_ADDR_VAR 0 1
16316: PUSH
16317: LD_VAR 0 2
16321: PUSH
16322: FOR_IN
16323: IFFALSE 16339
// begin SetLives ( i , 0 ) ;
16325: LD_VAR 0 1
16329: PPUSH
16330: LD_INT 0
16332: PPUSH
16333: CALL_OW 234
// end ;
16337: GO 16322
16339: POP
16340: POP
// end ;
16341: PPOPN 2
16343: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16344: LD_EXP 44
16348: PUSH
16349: LD_EXP 50
16353: AND
16354: IFFALSE 16438
16356: GO 16358
16358: DISABLE
16359: LD_INT 0
16361: PPUSH
16362: PPUSH
// begin enable ;
16363: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16364: LD_ADDR_VAR 0 2
16368: PUSH
16369: LD_INT 22
16371: PUSH
16372: LD_OWVAR 2
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 32
16383: PUSH
16384: LD_INT 3
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PPUSH
16395: CALL_OW 69
16399: ST_TO_ADDR
// if not tmp then
16400: LD_VAR 0 2
16404: NOT
16405: IFFALSE 16409
// exit ;
16407: GO 16438
// for i in tmp do
16409: LD_ADDR_VAR 0 1
16413: PUSH
16414: LD_VAR 0 2
16418: PUSH
16419: FOR_IN
16420: IFFALSE 16436
// begin SetLives ( i , 0 ) ;
16422: LD_VAR 0 1
16426: PPUSH
16427: LD_INT 0
16429: PPUSH
16430: CALL_OW 234
// end ;
16434: GO 16419
16436: POP
16437: POP
// end ;
16438: PPOPN 2
16440: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16441: LD_EXP 44
16445: PUSH
16446: LD_EXP 47
16450: AND
16451: IFFALSE 16544
16453: GO 16455
16455: DISABLE
16456: LD_INT 0
16458: PPUSH
// begin enable ;
16459: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16460: LD_ADDR_VAR 0 1
16464: PUSH
16465: LD_INT 22
16467: PUSH
16468: LD_OWVAR 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 2
16479: PUSH
16480: LD_INT 25
16482: PUSH
16483: LD_INT 5
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 25
16492: PUSH
16493: LD_INT 9
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 25
16502: PUSH
16503: LD_INT 8
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PPUSH
16520: CALL_OW 69
16524: PUSH
16525: FOR_IN
16526: IFFALSE 16542
// begin SetClass ( i , 1 ) ;
16528: LD_VAR 0 1
16532: PPUSH
16533: LD_INT 1
16535: PPUSH
16536: CALL_OW 336
// end ;
16540: GO 16525
16542: POP
16543: POP
// end ;
16544: PPOPN 1
16546: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16547: LD_EXP 44
16551: PUSH
16552: LD_EXP 48
16556: AND
16557: PUSH
16558: LD_OWVAR 65
16562: PUSH
16563: LD_INT 7
16565: LESS
16566: AND
16567: IFFALSE 16581
16569: GO 16571
16571: DISABLE
// begin enable ;
16572: ENABLE
// game_speed := 7 ;
16573: LD_ADDR_OWVAR 65
16577: PUSH
16578: LD_INT 7
16580: ST_TO_ADDR
// end ;
16581: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16582: LD_EXP 44
16586: PUSH
16587: LD_EXP 51
16591: AND
16592: IFFALSE 16794
16594: GO 16596
16596: DISABLE
16597: LD_INT 0
16599: PPUSH
16600: PPUSH
16601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16602: LD_ADDR_VAR 0 3
16606: PUSH
16607: LD_INT 81
16609: PUSH
16610: LD_OWVAR 2
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 21
16621: PUSH
16622: LD_INT 1
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PPUSH
16633: CALL_OW 69
16637: ST_TO_ADDR
// if not tmp then
16638: LD_VAR 0 3
16642: NOT
16643: IFFALSE 16647
// exit ;
16645: GO 16794
// if tmp > 5 then
16647: LD_VAR 0 3
16651: PUSH
16652: LD_INT 5
16654: GREATER
16655: IFFALSE 16667
// k := 5 else
16657: LD_ADDR_VAR 0 2
16661: PUSH
16662: LD_INT 5
16664: ST_TO_ADDR
16665: GO 16677
// k := tmp ;
16667: LD_ADDR_VAR 0 2
16671: PUSH
16672: LD_VAR 0 3
16676: ST_TO_ADDR
// for i := 1 to k do
16677: LD_ADDR_VAR 0 1
16681: PUSH
16682: DOUBLE
16683: LD_INT 1
16685: DEC
16686: ST_TO_ADDR
16687: LD_VAR 0 2
16691: PUSH
16692: FOR_TO
16693: IFFALSE 16792
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16695: LD_VAR 0 3
16699: PUSH
16700: LD_VAR 0 1
16704: ARRAY
16705: PPUSH
16706: LD_VAR 0 1
16710: PUSH
16711: LD_INT 4
16713: MOD
16714: PUSH
16715: LD_INT 1
16717: PLUS
16718: PPUSH
16719: CALL_OW 259
16723: PUSH
16724: LD_INT 10
16726: LESS
16727: IFFALSE 16790
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16729: LD_VAR 0 3
16733: PUSH
16734: LD_VAR 0 1
16738: ARRAY
16739: PPUSH
16740: LD_VAR 0 1
16744: PUSH
16745: LD_INT 4
16747: MOD
16748: PUSH
16749: LD_INT 1
16751: PLUS
16752: PPUSH
16753: LD_VAR 0 3
16757: PUSH
16758: LD_VAR 0 1
16762: ARRAY
16763: PPUSH
16764: LD_VAR 0 1
16768: PUSH
16769: LD_INT 4
16771: MOD
16772: PUSH
16773: LD_INT 1
16775: PLUS
16776: PPUSH
16777: CALL_OW 259
16781: PUSH
16782: LD_INT 1
16784: PLUS
16785: PPUSH
16786: CALL_OW 237
16790: GO 16692
16792: POP
16793: POP
// end ;
16794: PPOPN 3
16796: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16797: LD_EXP 44
16801: PUSH
16802: LD_EXP 52
16806: AND
16807: IFFALSE 16827
16809: GO 16811
16811: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16812: LD_INT 4
16814: PPUSH
16815: LD_OWVAR 2
16819: PPUSH
16820: LD_INT 0
16822: PPUSH
16823: CALL_OW 324
16827: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16828: LD_EXP 44
16832: PUSH
16833: LD_EXP 81
16837: AND
16838: IFFALSE 16858
16840: GO 16842
16842: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16843: LD_INT 19
16845: PPUSH
16846: LD_OWVAR 2
16850: PPUSH
16851: LD_INT 0
16853: PPUSH
16854: CALL_OW 324
16858: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16859: LD_EXP 44
16863: PUSH
16864: LD_EXP 53
16868: AND
16869: IFFALSE 16971
16871: GO 16873
16873: DISABLE
16874: LD_INT 0
16876: PPUSH
16877: PPUSH
// begin enable ;
16878: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16879: LD_ADDR_VAR 0 2
16883: PUSH
16884: LD_INT 22
16886: PUSH
16887: LD_OWVAR 2
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 2
16898: PUSH
16899: LD_INT 34
16901: PUSH
16902: LD_INT 11
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 34
16911: PUSH
16912: LD_INT 30
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PPUSH
16928: CALL_OW 69
16932: ST_TO_ADDR
// if not tmp then
16933: LD_VAR 0 2
16937: NOT
16938: IFFALSE 16942
// exit ;
16940: GO 16971
// for i in tmp do
16942: LD_ADDR_VAR 0 1
16946: PUSH
16947: LD_VAR 0 2
16951: PUSH
16952: FOR_IN
16953: IFFALSE 16969
// begin SetLives ( i , 0 ) ;
16955: LD_VAR 0 1
16959: PPUSH
16960: LD_INT 0
16962: PPUSH
16963: CALL_OW 234
// end ;
16967: GO 16952
16969: POP
16970: POP
// end ;
16971: PPOPN 2
16973: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16974: LD_EXP 44
16978: PUSH
16979: LD_EXP 54
16983: AND
16984: IFFALSE 17004
16986: GO 16988
16988: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16989: LD_INT 32
16991: PPUSH
16992: LD_OWVAR 2
16996: PPUSH
16997: LD_INT 0
16999: PPUSH
17000: CALL_OW 324
17004: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17005: LD_EXP 44
17009: PUSH
17010: LD_EXP 55
17014: AND
17015: IFFALSE 17196
17017: GO 17019
17019: DISABLE
17020: LD_INT 0
17022: PPUSH
17023: PPUSH
17024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17025: LD_ADDR_VAR 0 2
17029: PUSH
17030: LD_INT 22
17032: PUSH
17033: LD_OWVAR 2
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 33
17044: PUSH
17045: LD_INT 3
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PPUSH
17056: CALL_OW 69
17060: ST_TO_ADDR
// if not tmp then
17061: LD_VAR 0 2
17065: NOT
17066: IFFALSE 17070
// exit ;
17068: GO 17196
// side := 0 ;
17070: LD_ADDR_VAR 0 3
17074: PUSH
17075: LD_INT 0
17077: ST_TO_ADDR
// for i := 1 to 8 do
17078: LD_ADDR_VAR 0 1
17082: PUSH
17083: DOUBLE
17084: LD_INT 1
17086: DEC
17087: ST_TO_ADDR
17088: LD_INT 8
17090: PUSH
17091: FOR_TO
17092: IFFALSE 17140
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17094: LD_OWVAR 2
17098: PUSH
17099: LD_VAR 0 1
17103: NONEQUAL
17104: PUSH
17105: LD_OWVAR 2
17109: PPUSH
17110: LD_VAR 0 1
17114: PPUSH
17115: CALL_OW 81
17119: PUSH
17120: LD_INT 2
17122: EQUAL
17123: AND
17124: IFFALSE 17138
// begin side := i ;
17126: LD_ADDR_VAR 0 3
17130: PUSH
17131: LD_VAR 0 1
17135: ST_TO_ADDR
// break ;
17136: GO 17140
// end ;
17138: GO 17091
17140: POP
17141: POP
// if not side then
17142: LD_VAR 0 3
17146: NOT
17147: IFFALSE 17151
// exit ;
17149: GO 17196
// for i := 1 to tmp do
17151: LD_ADDR_VAR 0 1
17155: PUSH
17156: DOUBLE
17157: LD_INT 1
17159: DEC
17160: ST_TO_ADDR
17161: LD_VAR 0 2
17165: PUSH
17166: FOR_TO
17167: IFFALSE 17194
// if Prob ( 60 ) then
17169: LD_INT 60
17171: PPUSH
17172: CALL_OW 13
17176: IFFALSE 17192
// SetSide ( i , side ) ;
17178: LD_VAR 0 1
17182: PPUSH
17183: LD_VAR 0 3
17187: PPUSH
17188: CALL_OW 235
17192: GO 17166
17194: POP
17195: POP
// end ;
17196: PPOPN 3
17198: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17199: LD_EXP 44
17203: PUSH
17204: LD_EXP 57
17208: AND
17209: IFFALSE 17328
17211: GO 17213
17213: DISABLE
17214: LD_INT 0
17216: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17217: LD_ADDR_VAR 0 1
17221: PUSH
17222: LD_INT 22
17224: PUSH
17225: LD_OWVAR 2
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 21
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 3
17246: PUSH
17247: LD_INT 23
17249: PUSH
17250: LD_INT 0
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: LIST
17265: PPUSH
17266: CALL_OW 69
17270: PUSH
17271: FOR_IN
17272: IFFALSE 17326
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17274: LD_VAR 0 1
17278: PPUSH
17279: CALL_OW 257
17283: PUSH
17284: LD_INT 1
17286: PUSH
17287: LD_INT 2
17289: PUSH
17290: LD_INT 3
17292: PUSH
17293: LD_INT 4
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: IN
17302: IFFALSE 17324
// SetClass ( un , rand ( 1 , 4 ) ) ;
17304: LD_VAR 0 1
17308: PPUSH
17309: LD_INT 1
17311: PPUSH
17312: LD_INT 4
17314: PPUSH
17315: CALL_OW 12
17319: PPUSH
17320: CALL_OW 336
17324: GO 17271
17326: POP
17327: POP
// end ;
17328: PPOPN 1
17330: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17331: LD_EXP 44
17335: PUSH
17336: LD_EXP 56
17340: AND
17341: IFFALSE 17420
17343: GO 17345
17345: DISABLE
17346: LD_INT 0
17348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17349: LD_ADDR_VAR 0 1
17353: PUSH
17354: LD_INT 22
17356: PUSH
17357: LD_OWVAR 2
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 21
17368: PUSH
17369: LD_INT 3
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PPUSH
17380: CALL_OW 69
17384: ST_TO_ADDR
// if not tmp then
17385: LD_VAR 0 1
17389: NOT
17390: IFFALSE 17394
// exit ;
17392: GO 17420
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17394: LD_VAR 0 1
17398: PUSH
17399: LD_INT 1
17401: PPUSH
17402: LD_VAR 0 1
17406: PPUSH
17407: CALL_OW 12
17411: ARRAY
17412: PPUSH
17413: LD_INT 100
17415: PPUSH
17416: CALL_OW 234
// end ;
17420: PPOPN 1
17422: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17423: LD_EXP 44
17427: PUSH
17428: LD_EXP 58
17432: AND
17433: IFFALSE 17531
17435: GO 17437
17437: DISABLE
17438: LD_INT 0
17440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17441: LD_ADDR_VAR 0 1
17445: PUSH
17446: LD_INT 22
17448: PUSH
17449: LD_OWVAR 2
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 21
17460: PUSH
17461: LD_INT 1
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PPUSH
17472: CALL_OW 69
17476: ST_TO_ADDR
// if not tmp then
17477: LD_VAR 0 1
17481: NOT
17482: IFFALSE 17486
// exit ;
17484: GO 17531
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17486: LD_VAR 0 1
17490: PUSH
17491: LD_INT 1
17493: PPUSH
17494: LD_VAR 0 1
17498: PPUSH
17499: CALL_OW 12
17503: ARRAY
17504: PPUSH
17505: LD_INT 1
17507: PPUSH
17508: LD_INT 4
17510: PPUSH
17511: CALL_OW 12
17515: PPUSH
17516: LD_INT 3000
17518: PPUSH
17519: LD_INT 9000
17521: PPUSH
17522: CALL_OW 12
17526: PPUSH
17527: CALL_OW 492
// end ;
17531: PPOPN 1
17533: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17534: LD_EXP 44
17538: PUSH
17539: LD_EXP 59
17543: AND
17544: IFFALSE 17564
17546: GO 17548
17548: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17549: LD_INT 1
17551: PPUSH
17552: LD_OWVAR 2
17556: PPUSH
17557: LD_INT 0
17559: PPUSH
17560: CALL_OW 324
17564: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17565: LD_EXP 44
17569: PUSH
17570: LD_EXP 60
17574: AND
17575: IFFALSE 17658
17577: GO 17579
17579: DISABLE
17580: LD_INT 0
17582: PPUSH
17583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17584: LD_ADDR_VAR 0 2
17588: PUSH
17589: LD_INT 22
17591: PUSH
17592: LD_OWVAR 2
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 21
17603: PUSH
17604: LD_INT 3
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PPUSH
17615: CALL_OW 69
17619: ST_TO_ADDR
// if not tmp then
17620: LD_VAR 0 2
17624: NOT
17625: IFFALSE 17629
// exit ;
17627: GO 17658
// for i in tmp do
17629: LD_ADDR_VAR 0 1
17633: PUSH
17634: LD_VAR 0 2
17638: PUSH
17639: FOR_IN
17640: IFFALSE 17656
// SetBLevel ( i , 10 ) ;
17642: LD_VAR 0 1
17646: PPUSH
17647: LD_INT 10
17649: PPUSH
17650: CALL_OW 241
17654: GO 17639
17656: POP
17657: POP
// end ;
17658: PPOPN 2
17660: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17661: LD_EXP 44
17665: PUSH
17666: LD_EXP 61
17670: AND
17671: IFFALSE 17782
17673: GO 17675
17675: DISABLE
17676: LD_INT 0
17678: PPUSH
17679: PPUSH
17680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17681: LD_ADDR_VAR 0 3
17685: PUSH
17686: LD_INT 22
17688: PUSH
17689: LD_OWVAR 2
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 25
17700: PUSH
17701: LD_INT 1
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PPUSH
17712: CALL_OW 69
17716: ST_TO_ADDR
// if not tmp then
17717: LD_VAR 0 3
17721: NOT
17722: IFFALSE 17726
// exit ;
17724: GO 17782
// un := tmp [ rand ( 1 , tmp ) ] ;
17726: LD_ADDR_VAR 0 2
17730: PUSH
17731: LD_VAR 0 3
17735: PUSH
17736: LD_INT 1
17738: PPUSH
17739: LD_VAR 0 3
17743: PPUSH
17744: CALL_OW 12
17748: ARRAY
17749: ST_TO_ADDR
// if Crawls ( un ) then
17750: LD_VAR 0 2
17754: PPUSH
17755: CALL_OW 318
17759: IFFALSE 17770
// ComWalk ( un ) ;
17761: LD_VAR 0 2
17765: PPUSH
17766: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17770: LD_VAR 0 2
17774: PPUSH
17775: LD_INT 5
17777: PPUSH
17778: CALL_OW 336
// end ;
17782: PPOPN 3
17784: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17785: LD_EXP 44
17789: PUSH
17790: LD_EXP 62
17794: AND
17795: PUSH
17796: LD_OWVAR 67
17800: PUSH
17801: LD_INT 4
17803: LESS
17804: AND
17805: IFFALSE 17824
17807: GO 17809
17809: DISABLE
// begin Difficulty := Difficulty + 1 ;
17810: LD_ADDR_OWVAR 67
17814: PUSH
17815: LD_OWVAR 67
17819: PUSH
17820: LD_INT 1
17822: PLUS
17823: ST_TO_ADDR
// end ;
17824: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17825: LD_EXP 44
17829: PUSH
17830: LD_EXP 63
17834: AND
17835: IFFALSE 17938
17837: GO 17839
17839: DISABLE
17840: LD_INT 0
17842: PPUSH
// begin for i := 1 to 5 do
17843: LD_ADDR_VAR 0 1
17847: PUSH
17848: DOUBLE
17849: LD_INT 1
17851: DEC
17852: ST_TO_ADDR
17853: LD_INT 5
17855: PUSH
17856: FOR_TO
17857: IFFALSE 17936
// begin uc_nation := nation_nature ;
17859: LD_ADDR_OWVAR 21
17863: PUSH
17864: LD_INT 0
17866: ST_TO_ADDR
// uc_side := 0 ;
17867: LD_ADDR_OWVAR 20
17871: PUSH
17872: LD_INT 0
17874: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17875: LD_ADDR_OWVAR 29
17879: PUSH
17880: LD_INT 12
17882: PUSH
17883: LD_INT 12
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: ST_TO_ADDR
// hc_agressivity := 20 ;
17890: LD_ADDR_OWVAR 35
17894: PUSH
17895: LD_INT 20
17897: ST_TO_ADDR
// hc_class := class_tiger ;
17898: LD_ADDR_OWVAR 28
17902: PUSH
17903: LD_INT 14
17905: ST_TO_ADDR
// hc_gallery :=  ;
17906: LD_ADDR_OWVAR 33
17910: PUSH
17911: LD_STRING 
17913: ST_TO_ADDR
// hc_name :=  ;
17914: LD_ADDR_OWVAR 26
17918: PUSH
17919: LD_STRING 
17921: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17922: CALL_OW 44
17926: PPUSH
17927: LD_INT 0
17929: PPUSH
17930: CALL_OW 51
// end ;
17934: GO 17856
17936: POP
17937: POP
// end ;
17938: PPOPN 1
17940: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17941: LD_EXP 44
17945: PUSH
17946: LD_EXP 64
17950: AND
17951: IFFALSE 17960
17953: GO 17955
17955: DISABLE
// StreamSibBomb ;
17956: CALL 17961 0 0
17960: END
// export function StreamSibBomb ; var i , x , y ; begin
17961: LD_INT 0
17963: PPUSH
17964: PPUSH
17965: PPUSH
17966: PPUSH
// result := false ;
17967: LD_ADDR_VAR 0 1
17971: PUSH
17972: LD_INT 0
17974: ST_TO_ADDR
// for i := 1 to 16 do
17975: LD_ADDR_VAR 0 2
17979: PUSH
17980: DOUBLE
17981: LD_INT 1
17983: DEC
17984: ST_TO_ADDR
17985: LD_INT 16
17987: PUSH
17988: FOR_TO
17989: IFFALSE 18188
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17991: LD_ADDR_VAR 0 3
17995: PUSH
17996: LD_INT 10
17998: PUSH
17999: LD_INT 20
18001: PUSH
18002: LD_INT 30
18004: PUSH
18005: LD_INT 40
18007: PUSH
18008: LD_INT 50
18010: PUSH
18011: LD_INT 60
18013: PUSH
18014: LD_INT 70
18016: PUSH
18017: LD_INT 80
18019: PUSH
18020: LD_INT 90
18022: PUSH
18023: LD_INT 100
18025: PUSH
18026: LD_INT 110
18028: PUSH
18029: LD_INT 120
18031: PUSH
18032: LD_INT 130
18034: PUSH
18035: LD_INT 140
18037: PUSH
18038: LD_INT 150
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: PUSH
18058: LD_INT 1
18060: PPUSH
18061: LD_INT 15
18063: PPUSH
18064: CALL_OW 12
18068: ARRAY
18069: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18070: LD_ADDR_VAR 0 4
18074: PUSH
18075: LD_INT 10
18077: PUSH
18078: LD_INT 20
18080: PUSH
18081: LD_INT 30
18083: PUSH
18084: LD_INT 40
18086: PUSH
18087: LD_INT 50
18089: PUSH
18090: LD_INT 60
18092: PUSH
18093: LD_INT 70
18095: PUSH
18096: LD_INT 80
18098: PUSH
18099: LD_INT 90
18101: PUSH
18102: LD_INT 100
18104: PUSH
18105: LD_INT 110
18107: PUSH
18108: LD_INT 120
18110: PUSH
18111: LD_INT 130
18113: PUSH
18114: LD_INT 140
18116: PUSH
18117: LD_INT 150
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 1
18139: PPUSH
18140: LD_INT 15
18142: PPUSH
18143: CALL_OW 12
18147: ARRAY
18148: ST_TO_ADDR
// if ValidHex ( x , y ) then
18149: LD_VAR 0 3
18153: PPUSH
18154: LD_VAR 0 4
18158: PPUSH
18159: CALL_OW 488
18163: IFFALSE 18186
// begin result := [ x , y ] ;
18165: LD_ADDR_VAR 0 1
18169: PUSH
18170: LD_VAR 0 3
18174: PUSH
18175: LD_VAR 0 4
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: ST_TO_ADDR
// break ;
18184: GO 18188
// end ; end ;
18186: GO 17988
18188: POP
18189: POP
// if result then
18190: LD_VAR 0 1
18194: IFFALSE 18254
// begin ToLua ( playSibBomb() ) ;
18196: LD_STRING playSibBomb()
18198: PPUSH
18199: CALL_OW 559
// wait ( 0 0$14 ) ;
18203: LD_INT 490
18205: PPUSH
18206: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18210: LD_VAR 0 1
18214: PUSH
18215: LD_INT 1
18217: ARRAY
18218: PPUSH
18219: LD_VAR 0 1
18223: PUSH
18224: LD_INT 2
18226: ARRAY
18227: PPUSH
18228: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18232: LD_VAR 0 1
18236: PUSH
18237: LD_INT 1
18239: ARRAY
18240: PPUSH
18241: LD_VAR 0 1
18245: PUSH
18246: LD_INT 2
18248: ARRAY
18249: PPUSH
18250: CALL_OW 429
// end ; end ;
18254: LD_VAR 0 1
18258: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18259: LD_EXP 44
18263: PUSH
18264: LD_EXP 66
18268: AND
18269: IFFALSE 18281
18271: GO 18273
18273: DISABLE
// YouLost (  ) ;
18274: LD_STRING 
18276: PPUSH
18277: CALL_OW 104
18281: END
// every 0 0$1 trigger StreamModeActive and sFog do
18282: LD_EXP 44
18286: PUSH
18287: LD_EXP 65
18291: AND
18292: IFFALSE 18306
18294: GO 18296
18296: DISABLE
// FogOff ( your_side ) ;
18297: LD_OWVAR 2
18301: PPUSH
18302: CALL_OW 344
18306: END
// every 0 0$1 trigger StreamModeActive and sSun do
18307: LD_EXP 44
18311: PUSH
18312: LD_EXP 67
18316: AND
18317: IFFALSE 18345
18319: GO 18321
18321: DISABLE
// begin solar_recharge_percent := 0 ;
18322: LD_ADDR_OWVAR 79
18326: PUSH
18327: LD_INT 0
18329: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18330: LD_INT 10500
18332: PPUSH
18333: CALL_OW 67
// solar_recharge_percent := 100 ;
18337: LD_ADDR_OWVAR 79
18341: PUSH
18342: LD_INT 100
18344: ST_TO_ADDR
// end ;
18345: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18346: LD_EXP 44
18350: PUSH
18351: LD_EXP 68
18355: AND
18356: IFFALSE 18595
18358: GO 18360
18360: DISABLE
18361: LD_INT 0
18363: PPUSH
18364: PPUSH
18365: PPUSH
// begin tmp := [ ] ;
18366: LD_ADDR_VAR 0 3
18370: PUSH
18371: EMPTY
18372: ST_TO_ADDR
// for i := 1 to 6 do
18373: LD_ADDR_VAR 0 1
18377: PUSH
18378: DOUBLE
18379: LD_INT 1
18381: DEC
18382: ST_TO_ADDR
18383: LD_INT 6
18385: PUSH
18386: FOR_TO
18387: IFFALSE 18492
// begin uc_nation := nation_nature ;
18389: LD_ADDR_OWVAR 21
18393: PUSH
18394: LD_INT 0
18396: ST_TO_ADDR
// uc_side := 0 ;
18397: LD_ADDR_OWVAR 20
18401: PUSH
18402: LD_INT 0
18404: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18405: LD_ADDR_OWVAR 29
18409: PUSH
18410: LD_INT 12
18412: PUSH
18413: LD_INT 12
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: ST_TO_ADDR
// hc_agressivity := 20 ;
18420: LD_ADDR_OWVAR 35
18424: PUSH
18425: LD_INT 20
18427: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18428: LD_ADDR_OWVAR 28
18432: PUSH
18433: LD_INT 17
18435: ST_TO_ADDR
// hc_gallery :=  ;
18436: LD_ADDR_OWVAR 33
18440: PUSH
18441: LD_STRING 
18443: ST_TO_ADDR
// hc_name :=  ;
18444: LD_ADDR_OWVAR 26
18448: PUSH
18449: LD_STRING 
18451: ST_TO_ADDR
// un := CreateHuman ;
18452: LD_ADDR_VAR 0 2
18456: PUSH
18457: CALL_OW 44
18461: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18462: LD_VAR 0 2
18466: PPUSH
18467: LD_INT 1
18469: PPUSH
18470: CALL_OW 51
// tmp := tmp ^ un ;
18474: LD_ADDR_VAR 0 3
18478: PUSH
18479: LD_VAR 0 3
18483: PUSH
18484: LD_VAR 0 2
18488: ADD
18489: ST_TO_ADDR
// end ;
18490: GO 18386
18492: POP
18493: POP
// repeat wait ( 0 0$1 ) ;
18494: LD_INT 35
18496: PPUSH
18497: CALL_OW 67
// for un in tmp do
18501: LD_ADDR_VAR 0 2
18505: PUSH
18506: LD_VAR 0 3
18510: PUSH
18511: FOR_IN
18512: IFFALSE 18586
// begin if IsDead ( un ) then
18514: LD_VAR 0 2
18518: PPUSH
18519: CALL_OW 301
18523: IFFALSE 18543
// begin tmp := tmp diff un ;
18525: LD_ADDR_VAR 0 3
18529: PUSH
18530: LD_VAR 0 3
18534: PUSH
18535: LD_VAR 0 2
18539: DIFF
18540: ST_TO_ADDR
// continue ;
18541: GO 18511
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18543: LD_VAR 0 2
18547: PPUSH
18548: LD_INT 3
18550: PUSH
18551: LD_INT 22
18553: PUSH
18554: LD_INT 0
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PPUSH
18565: CALL_OW 69
18569: PPUSH
18570: LD_VAR 0 2
18574: PPUSH
18575: CALL_OW 74
18579: PPUSH
18580: CALL_OW 115
// end ;
18584: GO 18511
18586: POP
18587: POP
// until not tmp ;
18588: LD_VAR 0 3
18592: NOT
18593: IFFALSE 18494
// end ;
18595: PPOPN 3
18597: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18598: LD_EXP 44
18602: PUSH
18603: LD_EXP 69
18607: AND
18608: IFFALSE 18662
18610: GO 18612
18612: DISABLE
// begin ToLua ( displayTroll(); ) ;
18613: LD_STRING displayTroll();
18615: PPUSH
18616: CALL_OW 559
// wait ( 3 3$00 ) ;
18620: LD_INT 6300
18622: PPUSH
18623: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18627: LD_STRING hideTroll();
18629: PPUSH
18630: CALL_OW 559
// wait ( 1 1$00 ) ;
18634: LD_INT 2100
18636: PPUSH
18637: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18641: LD_STRING displayTroll();
18643: PPUSH
18644: CALL_OW 559
// wait ( 1 1$00 ) ;
18648: LD_INT 2100
18650: PPUSH
18651: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18655: LD_STRING hideTroll();
18657: PPUSH
18658: CALL_OW 559
// end ;
18662: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18663: LD_EXP 44
18667: PUSH
18668: LD_EXP 70
18672: AND
18673: IFFALSE 18736
18675: GO 18677
18677: DISABLE
18678: LD_INT 0
18680: PPUSH
// begin p := 0 ;
18681: LD_ADDR_VAR 0 1
18685: PUSH
18686: LD_INT 0
18688: ST_TO_ADDR
// repeat game_speed := 1 ;
18689: LD_ADDR_OWVAR 65
18693: PUSH
18694: LD_INT 1
18696: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18697: LD_INT 35
18699: PPUSH
18700: CALL_OW 67
// p := p + 1 ;
18704: LD_ADDR_VAR 0 1
18708: PUSH
18709: LD_VAR 0 1
18713: PUSH
18714: LD_INT 1
18716: PLUS
18717: ST_TO_ADDR
// until p >= 60 ;
18718: LD_VAR 0 1
18722: PUSH
18723: LD_INT 60
18725: GREATEREQUAL
18726: IFFALSE 18689
// game_speed := 4 ;
18728: LD_ADDR_OWVAR 65
18732: PUSH
18733: LD_INT 4
18735: ST_TO_ADDR
// end ;
18736: PPOPN 1
18738: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18739: LD_EXP 44
18743: PUSH
18744: LD_EXP 71
18748: AND
18749: IFFALSE 18895
18751: GO 18753
18753: DISABLE
18754: LD_INT 0
18756: PPUSH
18757: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18758: LD_ADDR_VAR 0 1
18762: PUSH
18763: LD_INT 22
18765: PUSH
18766: LD_OWVAR 2
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 2
18777: PUSH
18778: LD_INT 30
18780: PUSH
18781: LD_INT 0
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 30
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: LIST
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PPUSH
18807: CALL_OW 69
18811: ST_TO_ADDR
// if not depot then
18812: LD_VAR 0 1
18816: NOT
18817: IFFALSE 18821
// exit ;
18819: GO 18895
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18821: LD_ADDR_VAR 0 2
18825: PUSH
18826: LD_VAR 0 1
18830: PUSH
18831: LD_INT 1
18833: PPUSH
18834: LD_VAR 0 1
18838: PPUSH
18839: CALL_OW 12
18843: ARRAY
18844: PPUSH
18845: CALL_OW 274
18849: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18850: LD_VAR 0 2
18854: PPUSH
18855: LD_INT 1
18857: PPUSH
18858: LD_INT 0
18860: PPUSH
18861: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18865: LD_VAR 0 2
18869: PPUSH
18870: LD_INT 2
18872: PPUSH
18873: LD_INT 0
18875: PPUSH
18876: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18880: LD_VAR 0 2
18884: PPUSH
18885: LD_INT 3
18887: PPUSH
18888: LD_INT 0
18890: PPUSH
18891: CALL_OW 277
// end ;
18895: PPOPN 2
18897: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18898: LD_EXP 44
18902: PUSH
18903: LD_EXP 72
18907: AND
18908: IFFALSE 19005
18910: GO 18912
18912: DISABLE
18913: LD_INT 0
18915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18916: LD_ADDR_VAR 0 1
18920: PUSH
18921: LD_INT 22
18923: PUSH
18924: LD_OWVAR 2
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 21
18935: PUSH
18936: LD_INT 1
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 3
18945: PUSH
18946: LD_INT 23
18948: PUSH
18949: LD_INT 0
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: LIST
18964: PPUSH
18965: CALL_OW 69
18969: ST_TO_ADDR
// if not tmp then
18970: LD_VAR 0 1
18974: NOT
18975: IFFALSE 18979
// exit ;
18977: GO 19005
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18979: LD_VAR 0 1
18983: PUSH
18984: LD_INT 1
18986: PPUSH
18987: LD_VAR 0 1
18991: PPUSH
18992: CALL_OW 12
18996: ARRAY
18997: PPUSH
18998: LD_INT 200
19000: PPUSH
19001: CALL_OW 234
// end ;
19005: PPOPN 1
19007: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19008: LD_EXP 44
19012: PUSH
19013: LD_EXP 73
19017: AND
19018: IFFALSE 19097
19020: GO 19022
19022: DISABLE
19023: LD_INT 0
19025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19026: LD_ADDR_VAR 0 1
19030: PUSH
19031: LD_INT 22
19033: PUSH
19034: LD_OWVAR 2
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 21
19045: PUSH
19046: LD_INT 2
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PPUSH
19057: CALL_OW 69
19061: ST_TO_ADDR
// if not tmp then
19062: LD_VAR 0 1
19066: NOT
19067: IFFALSE 19071
// exit ;
19069: GO 19097
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19071: LD_VAR 0 1
19075: PUSH
19076: LD_INT 1
19078: PPUSH
19079: LD_VAR 0 1
19083: PPUSH
19084: CALL_OW 12
19088: ARRAY
19089: PPUSH
19090: LD_INT 60
19092: PPUSH
19093: CALL_OW 234
// end ;
19097: PPOPN 1
19099: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19100: LD_EXP 44
19104: PUSH
19105: LD_EXP 74
19109: AND
19110: IFFALSE 19209
19112: GO 19114
19114: DISABLE
19115: LD_INT 0
19117: PPUSH
19118: PPUSH
// begin enable ;
19119: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19120: LD_ADDR_VAR 0 1
19124: PUSH
19125: LD_INT 22
19127: PUSH
19128: LD_OWVAR 2
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 61
19139: PUSH
19140: EMPTY
19141: LIST
19142: PUSH
19143: LD_INT 33
19145: PUSH
19146: LD_INT 2
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: LIST
19157: PPUSH
19158: CALL_OW 69
19162: ST_TO_ADDR
// if not tmp then
19163: LD_VAR 0 1
19167: NOT
19168: IFFALSE 19172
// exit ;
19170: GO 19209
// for i in tmp do
19172: LD_ADDR_VAR 0 2
19176: PUSH
19177: LD_VAR 0 1
19181: PUSH
19182: FOR_IN
19183: IFFALSE 19207
// if IsControledBy ( i ) then
19185: LD_VAR 0 2
19189: PPUSH
19190: CALL_OW 312
19194: IFFALSE 19205
// ComUnlink ( i ) ;
19196: LD_VAR 0 2
19200: PPUSH
19201: CALL_OW 136
19205: GO 19182
19207: POP
19208: POP
// end ;
19209: PPOPN 2
19211: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19212: LD_EXP 44
19216: PUSH
19217: LD_EXP 75
19221: AND
19222: IFFALSE 19362
19224: GO 19226
19226: DISABLE
19227: LD_INT 0
19229: PPUSH
19230: PPUSH
// begin ToLua ( displayPowell(); ) ;
19231: LD_STRING displayPowell();
19233: PPUSH
19234: CALL_OW 559
// uc_side := 0 ;
19238: LD_ADDR_OWVAR 20
19242: PUSH
19243: LD_INT 0
19245: ST_TO_ADDR
// uc_nation := 2 ;
19246: LD_ADDR_OWVAR 21
19250: PUSH
19251: LD_INT 2
19253: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19254: LD_ADDR_OWVAR 37
19258: PUSH
19259: LD_INT 14
19261: ST_TO_ADDR
// vc_engine := engine_siberite ;
19262: LD_ADDR_OWVAR 39
19266: PUSH
19267: LD_INT 3
19269: ST_TO_ADDR
// vc_control := control_apeman ;
19270: LD_ADDR_OWVAR 38
19274: PUSH
19275: LD_INT 5
19277: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19278: LD_ADDR_OWVAR 40
19282: PUSH
19283: LD_INT 29
19285: ST_TO_ADDR
// un := CreateVehicle ;
19286: LD_ADDR_VAR 0 2
19290: PUSH
19291: CALL_OW 45
19295: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19296: LD_VAR 0 2
19300: PPUSH
19301: LD_INT 1
19303: PPUSH
19304: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19308: LD_INT 35
19310: PPUSH
19311: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19315: LD_VAR 0 2
19319: PPUSH
19320: LD_INT 22
19322: PUSH
19323: LD_OWVAR 2
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PPUSH
19332: CALL_OW 69
19336: PPUSH
19337: LD_VAR 0 2
19341: PPUSH
19342: CALL_OW 74
19346: PPUSH
19347: CALL_OW 115
// until IsDead ( un ) ;
19351: LD_VAR 0 2
19355: PPUSH
19356: CALL_OW 301
19360: IFFALSE 19308
// end ;
19362: PPOPN 2
19364: END
// every 0 0$1 trigger StreamModeActive and sStu do
19365: LD_EXP 44
19369: PUSH
19370: LD_EXP 83
19374: AND
19375: IFFALSE 19391
19377: GO 19379
19379: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19380: LD_STRING displayStucuk();
19382: PPUSH
19383: CALL_OW 559
// ResetFog ;
19387: CALL_OW 335
// end ;
19391: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19392: LD_EXP 44
19396: PUSH
19397: LD_EXP 76
19401: AND
19402: IFFALSE 19543
19404: GO 19406
19406: DISABLE
19407: LD_INT 0
19409: PPUSH
19410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19411: LD_ADDR_VAR 0 2
19415: PUSH
19416: LD_INT 22
19418: PUSH
19419: LD_OWVAR 2
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 21
19430: PUSH
19431: LD_INT 1
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PPUSH
19442: CALL_OW 69
19446: ST_TO_ADDR
// if not tmp then
19447: LD_VAR 0 2
19451: NOT
19452: IFFALSE 19456
// exit ;
19454: GO 19543
// un := tmp [ rand ( 1 , tmp ) ] ;
19456: LD_ADDR_VAR 0 1
19460: PUSH
19461: LD_VAR 0 2
19465: PUSH
19466: LD_INT 1
19468: PPUSH
19469: LD_VAR 0 2
19473: PPUSH
19474: CALL_OW 12
19478: ARRAY
19479: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19480: LD_VAR 0 1
19484: PPUSH
19485: LD_INT 0
19487: PPUSH
19488: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19492: LD_VAR 0 1
19496: PPUSH
19497: LD_OWVAR 3
19501: PUSH
19502: LD_VAR 0 1
19506: DIFF
19507: PPUSH
19508: LD_VAR 0 1
19512: PPUSH
19513: CALL_OW 74
19517: PPUSH
19518: CALL_OW 115
// wait ( 0 0$20 ) ;
19522: LD_INT 700
19524: PPUSH
19525: CALL_OW 67
// SetSide ( un , your_side ) ;
19529: LD_VAR 0 1
19533: PPUSH
19534: LD_OWVAR 2
19538: PPUSH
19539: CALL_OW 235
// end ;
19543: PPOPN 2
19545: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19546: LD_EXP 44
19550: PUSH
19551: LD_EXP 77
19555: AND
19556: IFFALSE 19662
19558: GO 19560
19560: DISABLE
19561: LD_INT 0
19563: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19564: LD_ADDR_VAR 0 1
19568: PUSH
19569: LD_INT 22
19571: PUSH
19572: LD_OWVAR 2
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: LD_INT 30
19586: PUSH
19587: LD_INT 0
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 30
19596: PUSH
19597: LD_INT 1
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: LIST
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PPUSH
19613: CALL_OW 69
19617: ST_TO_ADDR
// if not depot then
19618: LD_VAR 0 1
19622: NOT
19623: IFFALSE 19627
// exit ;
19625: GO 19662
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19627: LD_VAR 0 1
19631: PUSH
19632: LD_INT 1
19634: ARRAY
19635: PPUSH
19636: CALL_OW 250
19640: PPUSH
19641: LD_VAR 0 1
19645: PUSH
19646: LD_INT 1
19648: ARRAY
19649: PPUSH
19650: CALL_OW 251
19654: PPUSH
19655: LD_INT 70
19657: PPUSH
19658: CALL_OW 495
// end ;
19662: PPOPN 1
19664: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19665: LD_EXP 44
19669: PUSH
19670: LD_EXP 78
19674: AND
19675: IFFALSE 19886
19677: GO 19679
19679: DISABLE
19680: LD_INT 0
19682: PPUSH
19683: PPUSH
19684: PPUSH
19685: PPUSH
19686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19687: LD_ADDR_VAR 0 5
19691: PUSH
19692: LD_INT 22
19694: PUSH
19695: LD_OWVAR 2
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 21
19706: PUSH
19707: LD_INT 1
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PPUSH
19718: CALL_OW 69
19722: ST_TO_ADDR
// if not tmp then
19723: LD_VAR 0 5
19727: NOT
19728: IFFALSE 19732
// exit ;
19730: GO 19886
// for i in tmp do
19732: LD_ADDR_VAR 0 1
19736: PUSH
19737: LD_VAR 0 5
19741: PUSH
19742: FOR_IN
19743: IFFALSE 19884
// begin d := rand ( 0 , 5 ) ;
19745: LD_ADDR_VAR 0 4
19749: PUSH
19750: LD_INT 0
19752: PPUSH
19753: LD_INT 5
19755: PPUSH
19756: CALL_OW 12
19760: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19761: LD_ADDR_VAR 0 2
19765: PUSH
19766: LD_VAR 0 1
19770: PPUSH
19771: CALL_OW 250
19775: PPUSH
19776: LD_VAR 0 4
19780: PPUSH
19781: LD_INT 3
19783: PPUSH
19784: LD_INT 12
19786: PPUSH
19787: CALL_OW 12
19791: PPUSH
19792: CALL_OW 272
19796: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19797: LD_ADDR_VAR 0 3
19801: PUSH
19802: LD_VAR 0 1
19806: PPUSH
19807: CALL_OW 251
19811: PPUSH
19812: LD_VAR 0 4
19816: PPUSH
19817: LD_INT 3
19819: PPUSH
19820: LD_INT 12
19822: PPUSH
19823: CALL_OW 12
19827: PPUSH
19828: CALL_OW 273
19832: ST_TO_ADDR
// if ValidHex ( x , y ) then
19833: LD_VAR 0 2
19837: PPUSH
19838: LD_VAR 0 3
19842: PPUSH
19843: CALL_OW 488
19847: IFFALSE 19882
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19849: LD_VAR 0 1
19853: PPUSH
19854: LD_VAR 0 2
19858: PPUSH
19859: LD_VAR 0 3
19863: PPUSH
19864: LD_INT 3
19866: PPUSH
19867: LD_INT 6
19869: PPUSH
19870: CALL_OW 12
19874: PPUSH
19875: LD_INT 1
19877: PPUSH
19878: CALL_OW 483
// end ;
19882: GO 19742
19884: POP
19885: POP
// end ;
19886: PPOPN 5
19888: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19889: LD_EXP 44
19893: PUSH
19894: LD_EXP 79
19898: AND
19899: IFFALSE 19993
19901: GO 19903
19903: DISABLE
19904: LD_INT 0
19906: PPUSH
19907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19908: LD_ADDR_VAR 0 2
19912: PUSH
19913: LD_INT 22
19915: PUSH
19916: LD_OWVAR 2
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 32
19927: PUSH
19928: LD_INT 1
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 21
19937: PUSH
19938: LD_INT 2
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: LIST
19949: PPUSH
19950: CALL_OW 69
19954: ST_TO_ADDR
// if not tmp then
19955: LD_VAR 0 2
19959: NOT
19960: IFFALSE 19964
// exit ;
19962: GO 19993
// for i in tmp do
19964: LD_ADDR_VAR 0 1
19968: PUSH
19969: LD_VAR 0 2
19973: PUSH
19974: FOR_IN
19975: IFFALSE 19991
// SetFuel ( i , 0 ) ;
19977: LD_VAR 0 1
19981: PPUSH
19982: LD_INT 0
19984: PPUSH
19985: CALL_OW 240
19989: GO 19974
19991: POP
19992: POP
// end ;
19993: PPOPN 2
19995: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19996: LD_EXP 44
20000: PUSH
20001: LD_EXP 80
20005: AND
20006: IFFALSE 20072
20008: GO 20010
20010: DISABLE
20011: LD_INT 0
20013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20014: LD_ADDR_VAR 0 1
20018: PUSH
20019: LD_INT 22
20021: PUSH
20022: LD_OWVAR 2
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 30
20033: PUSH
20034: LD_INT 29
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PPUSH
20045: CALL_OW 69
20049: ST_TO_ADDR
// if not tmp then
20050: LD_VAR 0 1
20054: NOT
20055: IFFALSE 20059
// exit ;
20057: GO 20072
// DestroyUnit ( tmp [ 1 ] ) ;
20059: LD_VAR 0 1
20063: PUSH
20064: LD_INT 1
20066: ARRAY
20067: PPUSH
20068: CALL_OW 65
// end ;
20072: PPOPN 1
20074: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20075: LD_EXP 44
20079: PUSH
20080: LD_EXP 82
20084: AND
20085: IFFALSE 20214
20087: GO 20089
20089: DISABLE
20090: LD_INT 0
20092: PPUSH
// begin uc_side := 0 ;
20093: LD_ADDR_OWVAR 20
20097: PUSH
20098: LD_INT 0
20100: ST_TO_ADDR
// uc_nation := nation_arabian ;
20101: LD_ADDR_OWVAR 21
20105: PUSH
20106: LD_INT 2
20108: ST_TO_ADDR
// hc_gallery :=  ;
20109: LD_ADDR_OWVAR 33
20113: PUSH
20114: LD_STRING 
20116: ST_TO_ADDR
// hc_name :=  ;
20117: LD_ADDR_OWVAR 26
20121: PUSH
20122: LD_STRING 
20124: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20125: LD_INT 1
20127: PPUSH
20128: LD_INT 11
20130: PPUSH
20131: LD_INT 10
20133: PPUSH
20134: CALL_OW 380
// un := CreateHuman ;
20138: LD_ADDR_VAR 0 1
20142: PUSH
20143: CALL_OW 44
20147: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20148: LD_VAR 0 1
20152: PPUSH
20153: LD_INT 1
20155: PPUSH
20156: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20160: LD_INT 35
20162: PPUSH
20163: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20167: LD_VAR 0 1
20171: PPUSH
20172: LD_INT 22
20174: PUSH
20175: LD_OWVAR 2
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PPUSH
20184: CALL_OW 69
20188: PPUSH
20189: LD_VAR 0 1
20193: PPUSH
20194: CALL_OW 74
20198: PPUSH
20199: CALL_OW 115
// until IsDead ( un ) ;
20203: LD_VAR 0 1
20207: PPUSH
20208: CALL_OW 301
20212: IFFALSE 20160
// end ;
20214: PPOPN 1
20216: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20217: LD_EXP 44
20221: PUSH
20222: LD_EXP 84
20226: AND
20227: IFFALSE 20239
20229: GO 20231
20231: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20232: LD_STRING earthquake(getX(game), 0, 32)
20234: PPUSH
20235: CALL_OW 559
20239: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20240: LD_EXP 44
20244: PUSH
20245: LD_EXP 85
20249: AND
20250: IFFALSE 20341
20252: GO 20254
20254: DISABLE
20255: LD_INT 0
20257: PPUSH
// begin enable ;
20258: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20259: LD_ADDR_VAR 0 1
20263: PUSH
20264: LD_INT 22
20266: PUSH
20267: LD_OWVAR 2
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 21
20278: PUSH
20279: LD_INT 2
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 33
20288: PUSH
20289: LD_INT 3
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: PPUSH
20301: CALL_OW 69
20305: ST_TO_ADDR
// if not tmp then
20306: LD_VAR 0 1
20310: NOT
20311: IFFALSE 20315
// exit ;
20313: GO 20341
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20315: LD_VAR 0 1
20319: PUSH
20320: LD_INT 1
20322: PPUSH
20323: LD_VAR 0 1
20327: PPUSH
20328: CALL_OW 12
20332: ARRAY
20333: PPUSH
20334: LD_INT 1
20336: PPUSH
20337: CALL_OW 234
// end ;
20341: PPOPN 1
20343: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20344: LD_EXP 44
20348: PUSH
20349: LD_EXP 86
20353: AND
20354: IFFALSE 20495
20356: GO 20358
20358: DISABLE
20359: LD_INT 0
20361: PPUSH
20362: PPUSH
20363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20364: LD_ADDR_VAR 0 3
20368: PUSH
20369: LD_INT 22
20371: PUSH
20372: LD_OWVAR 2
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 25
20383: PUSH
20384: LD_INT 1
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PPUSH
20395: CALL_OW 69
20399: ST_TO_ADDR
// if not tmp then
20400: LD_VAR 0 3
20404: NOT
20405: IFFALSE 20409
// exit ;
20407: GO 20495
// un := tmp [ rand ( 1 , tmp ) ] ;
20409: LD_ADDR_VAR 0 2
20413: PUSH
20414: LD_VAR 0 3
20418: PUSH
20419: LD_INT 1
20421: PPUSH
20422: LD_VAR 0 3
20426: PPUSH
20427: CALL_OW 12
20431: ARRAY
20432: ST_TO_ADDR
// if Crawls ( un ) then
20433: LD_VAR 0 2
20437: PPUSH
20438: CALL_OW 318
20442: IFFALSE 20453
// ComWalk ( un ) ;
20444: LD_VAR 0 2
20448: PPUSH
20449: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20453: LD_VAR 0 2
20457: PPUSH
20458: LD_INT 9
20460: PPUSH
20461: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20465: LD_INT 28
20467: PPUSH
20468: LD_OWVAR 2
20472: PPUSH
20473: LD_INT 2
20475: PPUSH
20476: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20480: LD_INT 29
20482: PPUSH
20483: LD_OWVAR 2
20487: PPUSH
20488: LD_INT 2
20490: PPUSH
20491: CALL_OW 322
// end ;
20495: PPOPN 3
20497: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20498: LD_EXP 44
20502: PUSH
20503: LD_EXP 87
20507: AND
20508: IFFALSE 20619
20510: GO 20512
20512: DISABLE
20513: LD_INT 0
20515: PPUSH
20516: PPUSH
20517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20518: LD_ADDR_VAR 0 3
20522: PUSH
20523: LD_INT 22
20525: PUSH
20526: LD_OWVAR 2
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 25
20537: PUSH
20538: LD_INT 1
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PPUSH
20549: CALL_OW 69
20553: ST_TO_ADDR
// if not tmp then
20554: LD_VAR 0 3
20558: NOT
20559: IFFALSE 20563
// exit ;
20561: GO 20619
// un := tmp [ rand ( 1 , tmp ) ] ;
20563: LD_ADDR_VAR 0 2
20567: PUSH
20568: LD_VAR 0 3
20572: PUSH
20573: LD_INT 1
20575: PPUSH
20576: LD_VAR 0 3
20580: PPUSH
20581: CALL_OW 12
20585: ARRAY
20586: ST_TO_ADDR
// if Crawls ( un ) then
20587: LD_VAR 0 2
20591: PPUSH
20592: CALL_OW 318
20596: IFFALSE 20607
// ComWalk ( un ) ;
20598: LD_VAR 0 2
20602: PPUSH
20603: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20607: LD_VAR 0 2
20611: PPUSH
20612: LD_INT 8
20614: PPUSH
20615: CALL_OW 336
// end ;
20619: PPOPN 3
20621: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20622: LD_EXP 44
20626: PUSH
20627: LD_EXP 88
20631: AND
20632: IFFALSE 20776
20634: GO 20636
20636: DISABLE
20637: LD_INT 0
20639: PPUSH
20640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20641: LD_ADDR_VAR 0 2
20645: PUSH
20646: LD_INT 22
20648: PUSH
20649: LD_OWVAR 2
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 21
20660: PUSH
20661: LD_INT 2
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: LD_INT 34
20673: PUSH
20674: LD_INT 12
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 34
20683: PUSH
20684: LD_INT 51
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 34
20693: PUSH
20694: LD_INT 32
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: LIST
20711: PPUSH
20712: CALL_OW 69
20716: ST_TO_ADDR
// if not tmp then
20717: LD_VAR 0 2
20721: NOT
20722: IFFALSE 20726
// exit ;
20724: GO 20776
// for i in tmp do
20726: LD_ADDR_VAR 0 1
20730: PUSH
20731: LD_VAR 0 2
20735: PUSH
20736: FOR_IN
20737: IFFALSE 20774
// if GetCargo ( i , mat_artifact ) = 0 then
20739: LD_VAR 0 1
20743: PPUSH
20744: LD_INT 4
20746: PPUSH
20747: CALL_OW 289
20751: PUSH
20752: LD_INT 0
20754: EQUAL
20755: IFFALSE 20772
// SetCargo ( i , mat_siberit , 100 ) ;
20757: LD_VAR 0 1
20761: PPUSH
20762: LD_INT 3
20764: PPUSH
20765: LD_INT 100
20767: PPUSH
20768: CALL_OW 290
20772: GO 20736
20774: POP
20775: POP
// end ;
20776: PPOPN 2
20778: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20779: LD_EXP 44
20783: PUSH
20784: LD_EXP 89
20788: AND
20789: IFFALSE 20972
20791: GO 20793
20793: DISABLE
20794: LD_INT 0
20796: PPUSH
20797: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20798: LD_ADDR_VAR 0 2
20802: PUSH
20803: LD_INT 22
20805: PUSH
20806: LD_OWVAR 2
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PPUSH
20815: CALL_OW 69
20819: ST_TO_ADDR
// if not tmp then
20820: LD_VAR 0 2
20824: NOT
20825: IFFALSE 20829
// exit ;
20827: GO 20972
// for i := 1 to 2 do
20829: LD_ADDR_VAR 0 1
20833: PUSH
20834: DOUBLE
20835: LD_INT 1
20837: DEC
20838: ST_TO_ADDR
20839: LD_INT 2
20841: PUSH
20842: FOR_TO
20843: IFFALSE 20970
// begin uc_side := your_side ;
20845: LD_ADDR_OWVAR 20
20849: PUSH
20850: LD_OWVAR 2
20854: ST_TO_ADDR
// uc_nation := nation_american ;
20855: LD_ADDR_OWVAR 21
20859: PUSH
20860: LD_INT 1
20862: ST_TO_ADDR
// vc_chassis := us_morphling ;
20863: LD_ADDR_OWVAR 37
20867: PUSH
20868: LD_INT 5
20870: ST_TO_ADDR
// vc_engine := engine_siberite ;
20871: LD_ADDR_OWVAR 39
20875: PUSH
20876: LD_INT 3
20878: ST_TO_ADDR
// vc_control := control_computer ;
20879: LD_ADDR_OWVAR 38
20883: PUSH
20884: LD_INT 3
20886: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20887: LD_ADDR_OWVAR 40
20891: PUSH
20892: LD_INT 10
20894: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20895: LD_VAR 0 2
20899: PUSH
20900: LD_INT 1
20902: ARRAY
20903: PPUSH
20904: CALL_OW 310
20908: NOT
20909: IFFALSE 20956
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20911: CALL_OW 45
20915: PPUSH
20916: LD_VAR 0 2
20920: PUSH
20921: LD_INT 1
20923: ARRAY
20924: PPUSH
20925: CALL_OW 250
20929: PPUSH
20930: LD_VAR 0 2
20934: PUSH
20935: LD_INT 1
20937: ARRAY
20938: PPUSH
20939: CALL_OW 251
20943: PPUSH
20944: LD_INT 12
20946: PPUSH
20947: LD_INT 1
20949: PPUSH
20950: CALL_OW 50
20954: GO 20968
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20956: CALL_OW 45
20960: PPUSH
20961: LD_INT 1
20963: PPUSH
20964: CALL_OW 51
// end ;
20968: GO 20842
20970: POP
20971: POP
// end ;
20972: PPOPN 2
20974: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20975: LD_EXP 44
20979: PUSH
20980: LD_EXP 90
20984: AND
20985: IFFALSE 21207
20987: GO 20989
20989: DISABLE
20990: LD_INT 0
20992: PPUSH
20993: PPUSH
20994: PPUSH
20995: PPUSH
20996: PPUSH
20997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20998: LD_ADDR_VAR 0 6
21002: PUSH
21003: LD_INT 22
21005: PUSH
21006: LD_OWVAR 2
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 21
21017: PUSH
21018: LD_INT 1
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 3
21027: PUSH
21028: LD_INT 23
21030: PUSH
21031: LD_INT 0
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: LIST
21046: PPUSH
21047: CALL_OW 69
21051: ST_TO_ADDR
// if not tmp then
21052: LD_VAR 0 6
21056: NOT
21057: IFFALSE 21061
// exit ;
21059: GO 21207
// s1 := rand ( 1 , 4 ) ;
21061: LD_ADDR_VAR 0 2
21065: PUSH
21066: LD_INT 1
21068: PPUSH
21069: LD_INT 4
21071: PPUSH
21072: CALL_OW 12
21076: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21077: LD_ADDR_VAR 0 4
21081: PUSH
21082: LD_VAR 0 6
21086: PUSH
21087: LD_INT 1
21089: ARRAY
21090: PPUSH
21091: LD_VAR 0 2
21095: PPUSH
21096: CALL_OW 259
21100: ST_TO_ADDR
// if s1 = 1 then
21101: LD_VAR 0 2
21105: PUSH
21106: LD_INT 1
21108: EQUAL
21109: IFFALSE 21129
// s2 := rand ( 2 , 4 ) else
21111: LD_ADDR_VAR 0 3
21115: PUSH
21116: LD_INT 2
21118: PPUSH
21119: LD_INT 4
21121: PPUSH
21122: CALL_OW 12
21126: ST_TO_ADDR
21127: GO 21137
// s2 := 1 ;
21129: LD_ADDR_VAR 0 3
21133: PUSH
21134: LD_INT 1
21136: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21137: LD_ADDR_VAR 0 5
21141: PUSH
21142: LD_VAR 0 6
21146: PUSH
21147: LD_INT 1
21149: ARRAY
21150: PPUSH
21151: LD_VAR 0 3
21155: PPUSH
21156: CALL_OW 259
21160: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21161: LD_VAR 0 6
21165: PUSH
21166: LD_INT 1
21168: ARRAY
21169: PPUSH
21170: LD_VAR 0 2
21174: PPUSH
21175: LD_VAR 0 5
21179: PPUSH
21180: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21184: LD_VAR 0 6
21188: PUSH
21189: LD_INT 1
21191: ARRAY
21192: PPUSH
21193: LD_VAR 0 3
21197: PPUSH
21198: LD_VAR 0 4
21202: PPUSH
21203: CALL_OW 237
// end ;
21207: PPOPN 6
21209: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21210: LD_EXP 44
21214: PUSH
21215: LD_EXP 91
21219: AND
21220: IFFALSE 21299
21222: GO 21224
21224: DISABLE
21225: LD_INT 0
21227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21228: LD_ADDR_VAR 0 1
21232: PUSH
21233: LD_INT 22
21235: PUSH
21236: LD_OWVAR 2
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 30
21247: PUSH
21248: LD_INT 3
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PPUSH
21259: CALL_OW 69
21263: ST_TO_ADDR
// if not tmp then
21264: LD_VAR 0 1
21268: NOT
21269: IFFALSE 21273
// exit ;
21271: GO 21299
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21273: LD_VAR 0 1
21277: PUSH
21278: LD_INT 1
21280: PPUSH
21281: LD_VAR 0 1
21285: PPUSH
21286: CALL_OW 12
21290: ARRAY
21291: PPUSH
21292: LD_INT 1
21294: PPUSH
21295: CALL_OW 234
// end ;
21299: PPOPN 1
21301: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21302: LD_EXP 44
21306: PUSH
21307: LD_EXP 92
21311: AND
21312: IFFALSE 21424
21314: GO 21316
21316: DISABLE
21317: LD_INT 0
21319: PPUSH
21320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21321: LD_ADDR_VAR 0 2
21325: PUSH
21326: LD_INT 22
21328: PUSH
21329: LD_OWVAR 2
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 2
21340: PUSH
21341: LD_INT 30
21343: PUSH
21344: LD_INT 27
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 30
21353: PUSH
21354: LD_INT 26
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 30
21363: PUSH
21364: LD_INT 28
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PPUSH
21381: CALL_OW 69
21385: ST_TO_ADDR
// if not tmp then
21386: LD_VAR 0 2
21390: NOT
21391: IFFALSE 21395
// exit ;
21393: GO 21424
// for i in tmp do
21395: LD_ADDR_VAR 0 1
21399: PUSH
21400: LD_VAR 0 2
21404: PUSH
21405: FOR_IN
21406: IFFALSE 21422
// SetLives ( i , 1 ) ;
21408: LD_VAR 0 1
21412: PPUSH
21413: LD_INT 1
21415: PPUSH
21416: CALL_OW 234
21420: GO 21405
21422: POP
21423: POP
// end ;
21424: PPOPN 2
21426: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21427: LD_EXP 44
21431: PUSH
21432: LD_EXP 93
21436: AND
21437: IFFALSE 21724
21439: GO 21441
21441: DISABLE
21442: LD_INT 0
21444: PPUSH
21445: PPUSH
21446: PPUSH
// begin i := rand ( 1 , 7 ) ;
21447: LD_ADDR_VAR 0 1
21451: PUSH
21452: LD_INT 1
21454: PPUSH
21455: LD_INT 7
21457: PPUSH
21458: CALL_OW 12
21462: ST_TO_ADDR
// case i of 1 :
21463: LD_VAR 0 1
21467: PUSH
21468: LD_INT 1
21470: DOUBLE
21471: EQUAL
21472: IFTRUE 21476
21474: GO 21486
21476: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21477: LD_STRING earthquake(getX(game), 0, 32)
21479: PPUSH
21480: CALL_OW 559
21484: GO 21724
21486: LD_INT 2
21488: DOUBLE
21489: EQUAL
21490: IFTRUE 21494
21492: GO 21508
21494: POP
// begin ToLua ( displayStucuk(); ) ;
21495: LD_STRING displayStucuk();
21497: PPUSH
21498: CALL_OW 559
// ResetFog ;
21502: CALL_OW 335
// end ; 3 :
21506: GO 21724
21508: LD_INT 3
21510: DOUBLE
21511: EQUAL
21512: IFTRUE 21516
21514: GO 21620
21516: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21517: LD_ADDR_VAR 0 2
21521: PUSH
21522: LD_INT 22
21524: PUSH
21525: LD_OWVAR 2
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 25
21536: PUSH
21537: LD_INT 1
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PPUSH
21548: CALL_OW 69
21552: ST_TO_ADDR
// if not tmp then
21553: LD_VAR 0 2
21557: NOT
21558: IFFALSE 21562
// exit ;
21560: GO 21724
// un := tmp [ rand ( 1 , tmp ) ] ;
21562: LD_ADDR_VAR 0 3
21566: PUSH
21567: LD_VAR 0 2
21571: PUSH
21572: LD_INT 1
21574: PPUSH
21575: LD_VAR 0 2
21579: PPUSH
21580: CALL_OW 12
21584: ARRAY
21585: ST_TO_ADDR
// if Crawls ( un ) then
21586: LD_VAR 0 3
21590: PPUSH
21591: CALL_OW 318
21595: IFFALSE 21606
// ComWalk ( un ) ;
21597: LD_VAR 0 3
21601: PPUSH
21602: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21606: LD_VAR 0 3
21610: PPUSH
21611: LD_INT 8
21613: PPUSH
21614: CALL_OW 336
// end ; 4 :
21618: GO 21724
21620: LD_INT 4
21622: DOUBLE
21623: EQUAL
21624: IFTRUE 21628
21626: GO 21702
21628: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21629: LD_ADDR_VAR 0 2
21633: PUSH
21634: LD_INT 22
21636: PUSH
21637: LD_OWVAR 2
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 30
21648: PUSH
21649: LD_INT 29
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PPUSH
21660: CALL_OW 69
21664: ST_TO_ADDR
// if not tmp then
21665: LD_VAR 0 2
21669: NOT
21670: IFFALSE 21674
// exit ;
21672: GO 21724
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21674: LD_VAR 0 2
21678: PUSH
21679: LD_INT 1
21681: ARRAY
21682: PPUSH
21683: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21687: LD_VAR 0 2
21691: PUSH
21692: LD_INT 1
21694: ARRAY
21695: PPUSH
21696: CALL_OW 65
// end ; 5 .. 7 :
21700: GO 21724
21702: LD_INT 5
21704: DOUBLE
21705: GREATEREQUAL
21706: IFFALSE 21714
21708: LD_INT 7
21710: DOUBLE
21711: LESSEQUAL
21712: IFTRUE 21716
21714: GO 21723
21716: POP
// StreamSibBomb ; end ;
21717: CALL 17961 0 0
21721: GO 21724
21723: POP
// end ;
21724: PPOPN 3
21726: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21727: LD_EXP 44
21731: PUSH
21732: LD_EXP 94
21736: AND
21737: IFFALSE 21893
21739: GO 21741
21741: DISABLE
21742: LD_INT 0
21744: PPUSH
21745: PPUSH
21746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21747: LD_ADDR_VAR 0 2
21751: PUSH
21752: LD_INT 81
21754: PUSH
21755: LD_OWVAR 2
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 2
21766: PUSH
21767: LD_INT 21
21769: PUSH
21770: LD_INT 1
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 21
21779: PUSH
21780: LD_INT 2
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: LIST
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PPUSH
21796: CALL_OW 69
21800: ST_TO_ADDR
// if not tmp then
21801: LD_VAR 0 2
21805: NOT
21806: IFFALSE 21810
// exit ;
21808: GO 21893
// p := 0 ;
21810: LD_ADDR_VAR 0 3
21814: PUSH
21815: LD_INT 0
21817: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21818: LD_INT 35
21820: PPUSH
21821: CALL_OW 67
// p := p + 1 ;
21825: LD_ADDR_VAR 0 3
21829: PUSH
21830: LD_VAR 0 3
21834: PUSH
21835: LD_INT 1
21837: PLUS
21838: ST_TO_ADDR
// for i in tmp do
21839: LD_ADDR_VAR 0 1
21843: PUSH
21844: LD_VAR 0 2
21848: PUSH
21849: FOR_IN
21850: IFFALSE 21881
// if GetLives ( i ) < 1000 then
21852: LD_VAR 0 1
21856: PPUSH
21857: CALL_OW 256
21861: PUSH
21862: LD_INT 1000
21864: LESS
21865: IFFALSE 21879
// SetLives ( i , 1000 ) ;
21867: LD_VAR 0 1
21871: PPUSH
21872: LD_INT 1000
21874: PPUSH
21875: CALL_OW 234
21879: GO 21849
21881: POP
21882: POP
// until p > 20 ;
21883: LD_VAR 0 3
21887: PUSH
21888: LD_INT 20
21890: GREATER
21891: IFFALSE 21818
// end ;
21893: PPOPN 3
21895: END
// every 0 0$1 trigger StreamModeActive and sTime do
21896: LD_EXP 44
21900: PUSH
21901: LD_EXP 95
21905: AND
21906: IFFALSE 21941
21908: GO 21910
21910: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21911: LD_INT 28
21913: PPUSH
21914: LD_OWVAR 2
21918: PPUSH
21919: LD_INT 2
21921: PPUSH
21922: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21926: LD_INT 30
21928: PPUSH
21929: LD_OWVAR 2
21933: PPUSH
21934: LD_INT 2
21936: PPUSH
21937: CALL_OW 322
// end ;
21941: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21942: LD_EXP 44
21946: PUSH
21947: LD_EXP 96
21951: AND
21952: IFFALSE 22073
21954: GO 21956
21956: DISABLE
21957: LD_INT 0
21959: PPUSH
21960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21961: LD_ADDR_VAR 0 2
21965: PUSH
21966: LD_INT 22
21968: PUSH
21969: LD_OWVAR 2
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 21
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 3
21990: PUSH
21991: LD_INT 23
21993: PUSH
21994: LD_INT 0
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: PPUSH
22010: CALL_OW 69
22014: ST_TO_ADDR
// if not tmp then
22015: LD_VAR 0 2
22019: NOT
22020: IFFALSE 22024
// exit ;
22022: GO 22073
// for i in tmp do
22024: LD_ADDR_VAR 0 1
22028: PUSH
22029: LD_VAR 0 2
22033: PUSH
22034: FOR_IN
22035: IFFALSE 22071
// begin if Crawls ( i ) then
22037: LD_VAR 0 1
22041: PPUSH
22042: CALL_OW 318
22046: IFFALSE 22057
// ComWalk ( i ) ;
22048: LD_VAR 0 1
22052: PPUSH
22053: CALL_OW 138
// SetClass ( i , 2 ) ;
22057: LD_VAR 0 1
22061: PPUSH
22062: LD_INT 2
22064: PPUSH
22065: CALL_OW 336
// end ;
22069: GO 22034
22071: POP
22072: POP
// end ;
22073: PPOPN 2
22075: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22076: LD_EXP 44
22080: PUSH
22081: LD_EXP 97
22085: AND
22086: IFFALSE 22374
22088: GO 22090
22090: DISABLE
22091: LD_INT 0
22093: PPUSH
22094: PPUSH
22095: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22096: LD_OWVAR 2
22100: PPUSH
22101: LD_INT 9
22103: PPUSH
22104: LD_INT 1
22106: PPUSH
22107: LD_INT 1
22109: PPUSH
22110: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22114: LD_INT 9
22116: PPUSH
22117: LD_OWVAR 2
22121: PPUSH
22122: CALL_OW 343
// uc_side := 9 ;
22126: LD_ADDR_OWVAR 20
22130: PUSH
22131: LD_INT 9
22133: ST_TO_ADDR
// uc_nation := 2 ;
22134: LD_ADDR_OWVAR 21
22138: PUSH
22139: LD_INT 2
22141: ST_TO_ADDR
// hc_name := Dark Warrior ;
22142: LD_ADDR_OWVAR 26
22146: PUSH
22147: LD_STRING Dark Warrior
22149: ST_TO_ADDR
// hc_gallery :=  ;
22150: LD_ADDR_OWVAR 33
22154: PUSH
22155: LD_STRING 
22157: ST_TO_ADDR
// hc_noskilllimit := true ;
22158: LD_ADDR_OWVAR 76
22162: PUSH
22163: LD_INT 1
22165: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22166: LD_ADDR_OWVAR 31
22170: PUSH
22171: LD_INT 30
22173: PUSH
22174: LD_INT 30
22176: PUSH
22177: LD_INT 30
22179: PUSH
22180: LD_INT 30
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: ST_TO_ADDR
// un := CreateHuman ;
22189: LD_ADDR_VAR 0 3
22193: PUSH
22194: CALL_OW 44
22198: ST_TO_ADDR
// hc_noskilllimit := false ;
22199: LD_ADDR_OWVAR 76
22203: PUSH
22204: LD_INT 0
22206: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22207: LD_VAR 0 3
22211: PPUSH
22212: LD_INT 1
22214: PPUSH
22215: CALL_OW 51
// ToLua ( playRanger() ) ;
22219: LD_STRING playRanger()
22221: PPUSH
22222: CALL_OW 559
// p := 0 ;
22226: LD_ADDR_VAR 0 2
22230: PUSH
22231: LD_INT 0
22233: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22234: LD_INT 35
22236: PPUSH
22237: CALL_OW 67
// p := p + 1 ;
22241: LD_ADDR_VAR 0 2
22245: PUSH
22246: LD_VAR 0 2
22250: PUSH
22251: LD_INT 1
22253: PLUS
22254: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22255: LD_VAR 0 3
22259: PPUSH
22260: CALL_OW 256
22264: PUSH
22265: LD_INT 1000
22267: LESS
22268: IFFALSE 22282
// SetLives ( un , 1000 ) ;
22270: LD_VAR 0 3
22274: PPUSH
22275: LD_INT 1000
22277: PPUSH
22278: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22282: LD_VAR 0 3
22286: PPUSH
22287: LD_INT 81
22289: PUSH
22290: LD_OWVAR 2
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 91
22301: PUSH
22302: LD_VAR 0 3
22306: PUSH
22307: LD_INT 30
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: LIST
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PPUSH
22319: CALL_OW 69
22323: PPUSH
22324: LD_VAR 0 3
22328: PPUSH
22329: CALL_OW 74
22333: PPUSH
22334: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22338: LD_VAR 0 2
22342: PUSH
22343: LD_INT 80
22345: GREATER
22346: PUSH
22347: LD_VAR 0 3
22351: PPUSH
22352: CALL_OW 301
22356: OR
22357: IFFALSE 22234
// if un then
22359: LD_VAR 0 3
22363: IFFALSE 22374
// RemoveUnit ( un ) ;
22365: LD_VAR 0 3
22369: PPUSH
22370: CALL_OW 64
// end ;
22374: PPOPN 3
22376: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22377: LD_EXP 98
22381: IFFALSE 22497
22383: GO 22385
22385: DISABLE
22386: LD_INT 0
22388: PPUSH
22389: PPUSH
22390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22391: LD_ADDR_VAR 0 2
22395: PUSH
22396: LD_INT 81
22398: PUSH
22399: LD_OWVAR 2
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 21
22410: PUSH
22411: LD_INT 1
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PPUSH
22422: CALL_OW 69
22426: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22427: LD_STRING playComputer()
22429: PPUSH
22430: CALL_OW 559
// if not tmp then
22434: LD_VAR 0 2
22438: NOT
22439: IFFALSE 22443
// exit ;
22441: GO 22497
// for i in tmp do
22443: LD_ADDR_VAR 0 1
22447: PUSH
22448: LD_VAR 0 2
22452: PUSH
22453: FOR_IN
22454: IFFALSE 22495
// for j := 1 to 4 do
22456: LD_ADDR_VAR 0 3
22460: PUSH
22461: DOUBLE
22462: LD_INT 1
22464: DEC
22465: ST_TO_ADDR
22466: LD_INT 4
22468: PUSH
22469: FOR_TO
22470: IFFALSE 22491
// SetSkill ( i , j , 10 ) ;
22472: LD_VAR 0 1
22476: PPUSH
22477: LD_VAR 0 3
22481: PPUSH
22482: LD_INT 10
22484: PPUSH
22485: CALL_OW 237
22489: GO 22469
22491: POP
22492: POP
22493: GO 22453
22495: POP
22496: POP
// end ;
22497: PPOPN 3
22499: END
// every 0 0$1 trigger s30 do var i , tmp ;
22500: LD_EXP 99
22504: IFFALSE 22573
22506: GO 22508
22508: DISABLE
22509: LD_INT 0
22511: PPUSH
22512: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22513: LD_ADDR_VAR 0 2
22517: PUSH
22518: LD_INT 22
22520: PUSH
22521: LD_OWVAR 2
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PPUSH
22530: CALL_OW 69
22534: ST_TO_ADDR
// if not tmp then
22535: LD_VAR 0 2
22539: NOT
22540: IFFALSE 22544
// exit ;
22542: GO 22573
// for i in tmp do
22544: LD_ADDR_VAR 0 1
22548: PUSH
22549: LD_VAR 0 2
22553: PUSH
22554: FOR_IN
22555: IFFALSE 22571
// SetLives ( i , 300 ) ;
22557: LD_VAR 0 1
22561: PPUSH
22562: LD_INT 300
22564: PPUSH
22565: CALL_OW 234
22569: GO 22554
22571: POP
22572: POP
// end ;
22573: PPOPN 2
22575: END
// every 0 0$1 trigger s60 do var i , tmp ;
22576: LD_EXP 100
22580: IFFALSE 22649
22582: GO 22584
22584: DISABLE
22585: LD_INT 0
22587: PPUSH
22588: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22589: LD_ADDR_VAR 0 2
22593: PUSH
22594: LD_INT 22
22596: PUSH
22597: LD_OWVAR 2
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PPUSH
22606: CALL_OW 69
22610: ST_TO_ADDR
// if not tmp then
22611: LD_VAR 0 2
22615: NOT
22616: IFFALSE 22620
// exit ;
22618: GO 22649
// for i in tmp do
22620: LD_ADDR_VAR 0 1
22624: PUSH
22625: LD_VAR 0 2
22629: PUSH
22630: FOR_IN
22631: IFFALSE 22647
// SetLives ( i , 600 ) ;
22633: LD_VAR 0 1
22637: PPUSH
22638: LD_INT 600
22640: PPUSH
22641: CALL_OW 234
22645: GO 22630
22647: POP
22648: POP
// end ;
22649: PPOPN 2
22651: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22652: LD_INT 0
22654: PPUSH
// case cmd of 301 :
22655: LD_VAR 0 1
22659: PUSH
22660: LD_INT 301
22662: DOUBLE
22663: EQUAL
22664: IFTRUE 22668
22666: GO 22700
22668: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22669: LD_VAR 0 6
22673: PPUSH
22674: LD_VAR 0 7
22678: PPUSH
22679: LD_VAR 0 8
22683: PPUSH
22684: LD_VAR 0 4
22688: PPUSH
22689: LD_VAR 0 5
22693: PPUSH
22694: CALL 23901 0 5
22698: GO 22821
22700: LD_INT 302
22702: DOUBLE
22703: EQUAL
22704: IFTRUE 22708
22706: GO 22745
22708: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22709: LD_VAR 0 6
22713: PPUSH
22714: LD_VAR 0 7
22718: PPUSH
22719: LD_VAR 0 8
22723: PPUSH
22724: LD_VAR 0 9
22728: PPUSH
22729: LD_VAR 0 4
22733: PPUSH
22734: LD_VAR 0 5
22738: PPUSH
22739: CALL 23992 0 6
22743: GO 22821
22745: LD_INT 303
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 22790
22753: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22754: LD_VAR 0 6
22758: PPUSH
22759: LD_VAR 0 7
22763: PPUSH
22764: LD_VAR 0 8
22768: PPUSH
22769: LD_VAR 0 9
22773: PPUSH
22774: LD_VAR 0 4
22778: PPUSH
22779: LD_VAR 0 5
22783: PPUSH
22784: CALL 22826 0 6
22788: GO 22821
22790: LD_INT 304
22792: DOUBLE
22793: EQUAL
22794: IFTRUE 22798
22796: GO 22820
22798: POP
// hHackTeleport ( unit , x , y ) ; end ;
22799: LD_VAR 0 2
22803: PPUSH
22804: LD_VAR 0 4
22808: PPUSH
22809: LD_VAR 0 5
22813: PPUSH
22814: CALL 24585 0 3
22818: GO 22821
22820: POP
// end ;
22821: LD_VAR 0 12
22825: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22826: LD_INT 0
22828: PPUSH
22829: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22830: LD_VAR 0 1
22834: PUSH
22835: LD_INT 1
22837: LESS
22838: PUSH
22839: LD_VAR 0 1
22843: PUSH
22844: LD_INT 3
22846: GREATER
22847: OR
22848: PUSH
22849: LD_VAR 0 5
22853: PPUSH
22854: LD_VAR 0 6
22858: PPUSH
22859: CALL_OW 428
22863: OR
22864: IFFALSE 22868
// exit ;
22866: GO 23588
// uc_side := your_side ;
22868: LD_ADDR_OWVAR 20
22872: PUSH
22873: LD_OWVAR 2
22877: ST_TO_ADDR
// uc_nation := nation ;
22878: LD_ADDR_OWVAR 21
22882: PUSH
22883: LD_VAR 0 1
22887: ST_TO_ADDR
// bc_level = 1 ;
22888: LD_ADDR_OWVAR 43
22892: PUSH
22893: LD_INT 1
22895: ST_TO_ADDR
// case btype of 1 :
22896: LD_VAR 0 2
22900: PUSH
22901: LD_INT 1
22903: DOUBLE
22904: EQUAL
22905: IFTRUE 22909
22907: GO 22920
22909: POP
// bc_type := b_depot ; 2 :
22910: LD_ADDR_OWVAR 42
22914: PUSH
22915: LD_INT 0
22917: ST_TO_ADDR
22918: GO 23532
22920: LD_INT 2
22922: DOUBLE
22923: EQUAL
22924: IFTRUE 22928
22926: GO 22939
22928: POP
// bc_type := b_warehouse ; 3 :
22929: LD_ADDR_OWVAR 42
22933: PUSH
22934: LD_INT 1
22936: ST_TO_ADDR
22937: GO 23532
22939: LD_INT 3
22941: DOUBLE
22942: EQUAL
22943: IFTRUE 22947
22945: GO 22958
22947: POP
// bc_type := b_lab ; 4 .. 9 :
22948: LD_ADDR_OWVAR 42
22952: PUSH
22953: LD_INT 6
22955: ST_TO_ADDR
22956: GO 23532
22958: LD_INT 4
22960: DOUBLE
22961: GREATEREQUAL
22962: IFFALSE 22970
22964: LD_INT 9
22966: DOUBLE
22967: LESSEQUAL
22968: IFTRUE 22972
22970: GO 23024
22972: POP
// begin bc_type := b_lab_half ;
22973: LD_ADDR_OWVAR 42
22977: PUSH
22978: LD_INT 7
22980: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22981: LD_ADDR_OWVAR 44
22985: PUSH
22986: LD_INT 10
22988: PUSH
22989: LD_INT 11
22991: PUSH
22992: LD_INT 12
22994: PUSH
22995: LD_INT 15
22997: PUSH
22998: LD_INT 14
23000: PUSH
23001: LD_INT 13
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: PUSH
23012: LD_VAR 0 2
23016: PUSH
23017: LD_INT 3
23019: MINUS
23020: ARRAY
23021: ST_TO_ADDR
// end ; 10 .. 13 :
23022: GO 23532
23024: LD_INT 10
23026: DOUBLE
23027: GREATEREQUAL
23028: IFFALSE 23036
23030: LD_INT 13
23032: DOUBLE
23033: LESSEQUAL
23034: IFTRUE 23038
23036: GO 23115
23038: POP
// begin bc_type := b_lab_full ;
23039: LD_ADDR_OWVAR 42
23043: PUSH
23044: LD_INT 8
23046: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23047: LD_ADDR_OWVAR 44
23051: PUSH
23052: LD_INT 10
23054: PUSH
23055: LD_INT 12
23057: PUSH
23058: LD_INT 14
23060: PUSH
23061: LD_INT 13
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: PUSH
23070: LD_VAR 0 2
23074: PUSH
23075: LD_INT 9
23077: MINUS
23078: ARRAY
23079: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23080: LD_ADDR_OWVAR 45
23084: PUSH
23085: LD_INT 11
23087: PUSH
23088: LD_INT 15
23090: PUSH
23091: LD_INT 12
23093: PUSH
23094: LD_INT 15
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: PUSH
23103: LD_VAR 0 2
23107: PUSH
23108: LD_INT 9
23110: MINUS
23111: ARRAY
23112: ST_TO_ADDR
// end ; 14 :
23113: GO 23532
23115: LD_INT 14
23117: DOUBLE
23118: EQUAL
23119: IFTRUE 23123
23121: GO 23134
23123: POP
// bc_type := b_workshop ; 15 :
23124: LD_ADDR_OWVAR 42
23128: PUSH
23129: LD_INT 2
23131: ST_TO_ADDR
23132: GO 23532
23134: LD_INT 15
23136: DOUBLE
23137: EQUAL
23138: IFTRUE 23142
23140: GO 23153
23142: POP
// bc_type := b_factory ; 16 :
23143: LD_ADDR_OWVAR 42
23147: PUSH
23148: LD_INT 3
23150: ST_TO_ADDR
23151: GO 23532
23153: LD_INT 16
23155: DOUBLE
23156: EQUAL
23157: IFTRUE 23161
23159: GO 23172
23161: POP
// bc_type := b_ext_gun ; 17 :
23162: LD_ADDR_OWVAR 42
23166: PUSH
23167: LD_INT 17
23169: ST_TO_ADDR
23170: GO 23532
23172: LD_INT 17
23174: DOUBLE
23175: EQUAL
23176: IFTRUE 23180
23178: GO 23208
23180: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23181: LD_ADDR_OWVAR 42
23185: PUSH
23186: LD_INT 19
23188: PUSH
23189: LD_INT 23
23191: PUSH
23192: LD_INT 19
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: LIST
23199: PUSH
23200: LD_VAR 0 1
23204: ARRAY
23205: ST_TO_ADDR
23206: GO 23532
23208: LD_INT 18
23210: DOUBLE
23211: EQUAL
23212: IFTRUE 23216
23214: GO 23227
23216: POP
// bc_type := b_ext_radar ; 19 :
23217: LD_ADDR_OWVAR 42
23221: PUSH
23222: LD_INT 20
23224: ST_TO_ADDR
23225: GO 23532
23227: LD_INT 19
23229: DOUBLE
23230: EQUAL
23231: IFTRUE 23235
23233: GO 23246
23235: POP
// bc_type := b_ext_radio ; 20 :
23236: LD_ADDR_OWVAR 42
23240: PUSH
23241: LD_INT 22
23243: ST_TO_ADDR
23244: GO 23532
23246: LD_INT 20
23248: DOUBLE
23249: EQUAL
23250: IFTRUE 23254
23252: GO 23265
23254: POP
// bc_type := b_ext_siberium ; 21 :
23255: LD_ADDR_OWVAR 42
23259: PUSH
23260: LD_INT 21
23262: ST_TO_ADDR
23263: GO 23532
23265: LD_INT 21
23267: DOUBLE
23268: EQUAL
23269: IFTRUE 23273
23271: GO 23284
23273: POP
// bc_type := b_ext_computer ; 22 :
23274: LD_ADDR_OWVAR 42
23278: PUSH
23279: LD_INT 24
23281: ST_TO_ADDR
23282: GO 23532
23284: LD_INT 22
23286: DOUBLE
23287: EQUAL
23288: IFTRUE 23292
23290: GO 23303
23292: POP
// bc_type := b_ext_track ; 23 :
23293: LD_ADDR_OWVAR 42
23297: PUSH
23298: LD_INT 16
23300: ST_TO_ADDR
23301: GO 23532
23303: LD_INT 23
23305: DOUBLE
23306: EQUAL
23307: IFTRUE 23311
23309: GO 23322
23311: POP
// bc_type := b_ext_laser ; 24 :
23312: LD_ADDR_OWVAR 42
23316: PUSH
23317: LD_INT 25
23319: ST_TO_ADDR
23320: GO 23532
23322: LD_INT 24
23324: DOUBLE
23325: EQUAL
23326: IFTRUE 23330
23328: GO 23341
23330: POP
// bc_type := b_control_tower ; 25 :
23331: LD_ADDR_OWVAR 42
23335: PUSH
23336: LD_INT 36
23338: ST_TO_ADDR
23339: GO 23532
23341: LD_INT 25
23343: DOUBLE
23344: EQUAL
23345: IFTRUE 23349
23347: GO 23360
23349: POP
// bc_type := b_breastwork ; 26 :
23350: LD_ADDR_OWVAR 42
23354: PUSH
23355: LD_INT 31
23357: ST_TO_ADDR
23358: GO 23532
23360: LD_INT 26
23362: DOUBLE
23363: EQUAL
23364: IFTRUE 23368
23366: GO 23379
23368: POP
// bc_type := b_bunker ; 27 :
23369: LD_ADDR_OWVAR 42
23373: PUSH
23374: LD_INT 32
23376: ST_TO_ADDR
23377: GO 23532
23379: LD_INT 27
23381: DOUBLE
23382: EQUAL
23383: IFTRUE 23387
23385: GO 23398
23387: POP
// bc_type := b_turret ; 28 :
23388: LD_ADDR_OWVAR 42
23392: PUSH
23393: LD_INT 33
23395: ST_TO_ADDR
23396: GO 23532
23398: LD_INT 28
23400: DOUBLE
23401: EQUAL
23402: IFTRUE 23406
23404: GO 23417
23406: POP
// bc_type := b_armoury ; 29 :
23407: LD_ADDR_OWVAR 42
23411: PUSH
23412: LD_INT 4
23414: ST_TO_ADDR
23415: GO 23532
23417: LD_INT 29
23419: DOUBLE
23420: EQUAL
23421: IFTRUE 23425
23423: GO 23436
23425: POP
// bc_type := b_barracks ; 30 :
23426: LD_ADDR_OWVAR 42
23430: PUSH
23431: LD_INT 5
23433: ST_TO_ADDR
23434: GO 23532
23436: LD_INT 30
23438: DOUBLE
23439: EQUAL
23440: IFTRUE 23444
23442: GO 23455
23444: POP
// bc_type := b_solar_power ; 31 :
23445: LD_ADDR_OWVAR 42
23449: PUSH
23450: LD_INT 27
23452: ST_TO_ADDR
23453: GO 23532
23455: LD_INT 31
23457: DOUBLE
23458: EQUAL
23459: IFTRUE 23463
23461: GO 23474
23463: POP
// bc_type := b_oil_power ; 32 :
23464: LD_ADDR_OWVAR 42
23468: PUSH
23469: LD_INT 26
23471: ST_TO_ADDR
23472: GO 23532
23474: LD_INT 32
23476: DOUBLE
23477: EQUAL
23478: IFTRUE 23482
23480: GO 23493
23482: POP
// bc_type := b_siberite_power ; 33 :
23483: LD_ADDR_OWVAR 42
23487: PUSH
23488: LD_INT 28
23490: ST_TO_ADDR
23491: GO 23532
23493: LD_INT 33
23495: DOUBLE
23496: EQUAL
23497: IFTRUE 23501
23499: GO 23512
23501: POP
// bc_type := b_oil_mine ; 34 :
23502: LD_ADDR_OWVAR 42
23506: PUSH
23507: LD_INT 29
23509: ST_TO_ADDR
23510: GO 23532
23512: LD_INT 34
23514: DOUBLE
23515: EQUAL
23516: IFTRUE 23520
23518: GO 23531
23520: POP
// bc_type := b_siberite_mine ; end ;
23521: LD_ADDR_OWVAR 42
23525: PUSH
23526: LD_INT 30
23528: ST_TO_ADDR
23529: GO 23532
23531: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23532: LD_ADDR_VAR 0 8
23536: PUSH
23537: LD_VAR 0 5
23541: PPUSH
23542: LD_VAR 0 6
23546: PPUSH
23547: LD_VAR 0 3
23551: PPUSH
23552: CALL_OW 47
23556: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23557: LD_OWVAR 42
23561: PUSH
23562: LD_INT 32
23564: PUSH
23565: LD_INT 33
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: IN
23572: IFFALSE 23588
// PlaceWeaponTurret ( b , weapon ) ;
23574: LD_VAR 0 8
23578: PPUSH
23579: LD_VAR 0 4
23583: PPUSH
23584: CALL_OW 431
// end ;
23588: LD_VAR 0 7
23592: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23593: LD_INT 0
23595: PPUSH
23596: PPUSH
23597: PPUSH
23598: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23599: LD_ADDR_VAR 0 4
23603: PUSH
23604: LD_INT 22
23606: PUSH
23607: LD_OWVAR 2
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 2
23618: PUSH
23619: LD_INT 30
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 30
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: LIST
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PPUSH
23648: CALL_OW 69
23652: ST_TO_ADDR
// if not tmp then
23653: LD_VAR 0 4
23657: NOT
23658: IFFALSE 23662
// exit ;
23660: GO 23721
// for i in tmp do
23662: LD_ADDR_VAR 0 2
23666: PUSH
23667: LD_VAR 0 4
23671: PUSH
23672: FOR_IN
23673: IFFALSE 23719
// for j = 1 to 3 do
23675: LD_ADDR_VAR 0 3
23679: PUSH
23680: DOUBLE
23681: LD_INT 1
23683: DEC
23684: ST_TO_ADDR
23685: LD_INT 3
23687: PUSH
23688: FOR_TO
23689: IFFALSE 23715
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23691: LD_VAR 0 2
23695: PPUSH
23696: CALL_OW 274
23700: PPUSH
23701: LD_VAR 0 3
23705: PPUSH
23706: LD_INT 99999
23708: PPUSH
23709: CALL_OW 277
23713: GO 23688
23715: POP
23716: POP
23717: GO 23672
23719: POP
23720: POP
// end ;
23721: LD_VAR 0 1
23725: RET
// export function hHackSetLevel10 ; var i , j ; begin
23726: LD_INT 0
23728: PPUSH
23729: PPUSH
23730: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23731: LD_ADDR_VAR 0 2
23735: PUSH
23736: LD_INT 21
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PPUSH
23746: CALL_OW 69
23750: PUSH
23751: FOR_IN
23752: IFFALSE 23804
// if IsSelected ( i ) then
23754: LD_VAR 0 2
23758: PPUSH
23759: CALL_OW 306
23763: IFFALSE 23802
// begin for j := 1 to 4 do
23765: LD_ADDR_VAR 0 3
23769: PUSH
23770: DOUBLE
23771: LD_INT 1
23773: DEC
23774: ST_TO_ADDR
23775: LD_INT 4
23777: PUSH
23778: FOR_TO
23779: IFFALSE 23800
// SetSkill ( i , j , 10 ) ;
23781: LD_VAR 0 2
23785: PPUSH
23786: LD_VAR 0 3
23790: PPUSH
23791: LD_INT 10
23793: PPUSH
23794: CALL_OW 237
23798: GO 23778
23800: POP
23801: POP
// end ;
23802: GO 23751
23804: POP
23805: POP
// end ;
23806: LD_VAR 0 1
23810: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23811: LD_INT 0
23813: PPUSH
23814: PPUSH
23815: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23816: LD_ADDR_VAR 0 2
23820: PUSH
23821: LD_INT 22
23823: PUSH
23824: LD_OWVAR 2
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 21
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PPUSH
23847: CALL_OW 69
23851: PUSH
23852: FOR_IN
23853: IFFALSE 23894
// begin for j := 1 to 4 do
23855: LD_ADDR_VAR 0 3
23859: PUSH
23860: DOUBLE
23861: LD_INT 1
23863: DEC
23864: ST_TO_ADDR
23865: LD_INT 4
23867: PUSH
23868: FOR_TO
23869: IFFALSE 23890
// SetSkill ( i , j , 10 ) ;
23871: LD_VAR 0 2
23875: PPUSH
23876: LD_VAR 0 3
23880: PPUSH
23881: LD_INT 10
23883: PPUSH
23884: CALL_OW 237
23888: GO 23868
23890: POP
23891: POP
// end ;
23892: GO 23852
23894: POP
23895: POP
// end ;
23896: LD_VAR 0 1
23900: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23901: LD_INT 0
23903: PPUSH
// uc_side := your_side ;
23904: LD_ADDR_OWVAR 20
23908: PUSH
23909: LD_OWVAR 2
23913: ST_TO_ADDR
// uc_nation := nation ;
23914: LD_ADDR_OWVAR 21
23918: PUSH
23919: LD_VAR 0 1
23923: ST_TO_ADDR
// InitHc ;
23924: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23928: LD_INT 0
23930: PPUSH
23931: LD_VAR 0 2
23935: PPUSH
23936: LD_VAR 0 3
23940: PPUSH
23941: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23945: LD_VAR 0 4
23949: PPUSH
23950: LD_VAR 0 5
23954: PPUSH
23955: CALL_OW 428
23959: PUSH
23960: LD_INT 0
23962: EQUAL
23963: IFFALSE 23987
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23965: CALL_OW 44
23969: PPUSH
23970: LD_VAR 0 4
23974: PPUSH
23975: LD_VAR 0 5
23979: PPUSH
23980: LD_INT 1
23982: PPUSH
23983: CALL_OW 48
// end ;
23987: LD_VAR 0 6
23991: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23992: LD_INT 0
23994: PPUSH
23995: PPUSH
// uc_side := your_side ;
23996: LD_ADDR_OWVAR 20
24000: PUSH
24001: LD_OWVAR 2
24005: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24006: LD_VAR 0 1
24010: PUSH
24011: LD_INT 1
24013: PUSH
24014: LD_INT 2
24016: PUSH
24017: LD_INT 3
24019: PUSH
24020: LD_INT 4
24022: PUSH
24023: LD_INT 5
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: IN
24033: IFFALSE 24045
// uc_nation := nation_american else
24035: LD_ADDR_OWVAR 21
24039: PUSH
24040: LD_INT 1
24042: ST_TO_ADDR
24043: GO 24088
// if chassis in [ 11 , 12 , 13 , 14 ] then
24045: LD_VAR 0 1
24049: PUSH
24050: LD_INT 11
24052: PUSH
24053: LD_INT 12
24055: PUSH
24056: LD_INT 13
24058: PUSH
24059: LD_INT 14
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: IN
24068: IFFALSE 24080
// uc_nation := nation_arabian else
24070: LD_ADDR_OWVAR 21
24074: PUSH
24075: LD_INT 2
24077: ST_TO_ADDR
24078: GO 24088
// uc_nation := nation_russian ;
24080: LD_ADDR_OWVAR 21
24084: PUSH
24085: LD_INT 3
24087: ST_TO_ADDR
// vc_chassis := chassis ;
24088: LD_ADDR_OWVAR 37
24092: PUSH
24093: LD_VAR 0 1
24097: ST_TO_ADDR
// vc_engine := engine ;
24098: LD_ADDR_OWVAR 39
24102: PUSH
24103: LD_VAR 0 2
24107: ST_TO_ADDR
// vc_control := control ;
24108: LD_ADDR_OWVAR 38
24112: PUSH
24113: LD_VAR 0 3
24117: ST_TO_ADDR
// vc_weapon := weapon ;
24118: LD_ADDR_OWVAR 40
24122: PUSH
24123: LD_VAR 0 4
24127: ST_TO_ADDR
// un := CreateVehicle ;
24128: LD_ADDR_VAR 0 8
24132: PUSH
24133: CALL_OW 45
24137: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24138: LD_VAR 0 8
24142: PPUSH
24143: LD_INT 0
24145: PPUSH
24146: LD_INT 5
24148: PPUSH
24149: CALL_OW 12
24153: PPUSH
24154: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24158: LD_VAR 0 8
24162: PPUSH
24163: LD_VAR 0 5
24167: PPUSH
24168: LD_VAR 0 6
24172: PPUSH
24173: LD_INT 1
24175: PPUSH
24176: CALL_OW 48
// end ;
24180: LD_VAR 0 7
24184: RET
// export hInvincible ; every 1 do
24185: GO 24187
24187: DISABLE
// hInvincible := [ ] ;
24188: LD_ADDR_EXP 101
24192: PUSH
24193: EMPTY
24194: ST_TO_ADDR
24195: END
// every 10 do var i ;
24196: GO 24198
24198: DISABLE
24199: LD_INT 0
24201: PPUSH
// begin enable ;
24202: ENABLE
// if not hInvincible then
24203: LD_EXP 101
24207: NOT
24208: IFFALSE 24212
// exit ;
24210: GO 24256
// for i in hInvincible do
24212: LD_ADDR_VAR 0 1
24216: PUSH
24217: LD_EXP 101
24221: PUSH
24222: FOR_IN
24223: IFFALSE 24254
// if GetLives ( i ) < 1000 then
24225: LD_VAR 0 1
24229: PPUSH
24230: CALL_OW 256
24234: PUSH
24235: LD_INT 1000
24237: LESS
24238: IFFALSE 24252
// SetLives ( i , 1000 ) ;
24240: LD_VAR 0 1
24244: PPUSH
24245: LD_INT 1000
24247: PPUSH
24248: CALL_OW 234
24252: GO 24222
24254: POP
24255: POP
// end ;
24256: PPOPN 1
24258: END
// export function hHackInvincible ; var i ; begin
24259: LD_INT 0
24261: PPUSH
24262: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24263: LD_ADDR_VAR 0 2
24267: PUSH
24268: LD_INT 2
24270: PUSH
24271: LD_INT 21
24273: PUSH
24274: LD_INT 1
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 21
24283: PUSH
24284: LD_INT 2
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: LIST
24295: PPUSH
24296: CALL_OW 69
24300: PUSH
24301: FOR_IN
24302: IFFALSE 24363
// if IsSelected ( i ) then
24304: LD_VAR 0 2
24308: PPUSH
24309: CALL_OW 306
24313: IFFALSE 24361
// begin if i in hInvincible then
24315: LD_VAR 0 2
24319: PUSH
24320: LD_EXP 101
24324: IN
24325: IFFALSE 24345
// hInvincible := hInvincible diff i else
24327: LD_ADDR_EXP 101
24331: PUSH
24332: LD_EXP 101
24336: PUSH
24337: LD_VAR 0 2
24341: DIFF
24342: ST_TO_ADDR
24343: GO 24361
// hInvincible := hInvincible union i ;
24345: LD_ADDR_EXP 101
24349: PUSH
24350: LD_EXP 101
24354: PUSH
24355: LD_VAR 0 2
24359: UNION
24360: ST_TO_ADDR
// end ;
24361: GO 24301
24363: POP
24364: POP
// end ;
24365: LD_VAR 0 1
24369: RET
// export function hHackInvisible ; var i , j ; begin
24370: LD_INT 0
24372: PPUSH
24373: PPUSH
24374: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24375: LD_ADDR_VAR 0 2
24379: PUSH
24380: LD_INT 21
24382: PUSH
24383: LD_INT 1
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PPUSH
24390: CALL_OW 69
24394: PUSH
24395: FOR_IN
24396: IFFALSE 24420
// if IsSelected ( i ) then
24398: LD_VAR 0 2
24402: PPUSH
24403: CALL_OW 306
24407: IFFALSE 24418
// ComForceInvisible ( i ) ;
24409: LD_VAR 0 2
24413: PPUSH
24414: CALL_OW 496
24418: GO 24395
24420: POP
24421: POP
// end ;
24422: LD_VAR 0 1
24426: RET
// export function hHackChangeYourSide ; begin
24427: LD_INT 0
24429: PPUSH
// if your_side = 8 then
24430: LD_OWVAR 2
24434: PUSH
24435: LD_INT 8
24437: EQUAL
24438: IFFALSE 24450
// your_side := 0 else
24440: LD_ADDR_OWVAR 2
24444: PUSH
24445: LD_INT 0
24447: ST_TO_ADDR
24448: GO 24464
// your_side := your_side + 1 ;
24450: LD_ADDR_OWVAR 2
24454: PUSH
24455: LD_OWVAR 2
24459: PUSH
24460: LD_INT 1
24462: PLUS
24463: ST_TO_ADDR
// end ;
24464: LD_VAR 0 1
24468: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24469: LD_INT 0
24471: PPUSH
24472: PPUSH
24473: PPUSH
// for i in all_units do
24474: LD_ADDR_VAR 0 2
24478: PUSH
24479: LD_OWVAR 3
24483: PUSH
24484: FOR_IN
24485: IFFALSE 24563
// if IsSelected ( i ) then
24487: LD_VAR 0 2
24491: PPUSH
24492: CALL_OW 306
24496: IFFALSE 24561
// begin j := GetSide ( i ) ;
24498: LD_ADDR_VAR 0 3
24502: PUSH
24503: LD_VAR 0 2
24507: PPUSH
24508: CALL_OW 255
24512: ST_TO_ADDR
// if j = 8 then
24513: LD_VAR 0 3
24517: PUSH
24518: LD_INT 8
24520: EQUAL
24521: IFFALSE 24533
// j := 0 else
24523: LD_ADDR_VAR 0 3
24527: PUSH
24528: LD_INT 0
24530: ST_TO_ADDR
24531: GO 24547
// j := j + 1 ;
24533: LD_ADDR_VAR 0 3
24537: PUSH
24538: LD_VAR 0 3
24542: PUSH
24543: LD_INT 1
24545: PLUS
24546: ST_TO_ADDR
// SetSide ( i , j ) ;
24547: LD_VAR 0 2
24551: PPUSH
24552: LD_VAR 0 3
24556: PPUSH
24557: CALL_OW 235
// end ;
24561: GO 24484
24563: POP
24564: POP
// end ;
24565: LD_VAR 0 1
24569: RET
// export function hHackFog ; begin
24570: LD_INT 0
24572: PPUSH
// FogOff ( true ) ;
24573: LD_INT 1
24575: PPUSH
24576: CALL_OW 344
// end ;
24580: LD_VAR 0 1
24584: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24585: LD_INT 0
24587: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24588: LD_VAR 0 1
24592: PPUSH
24593: LD_VAR 0 2
24597: PPUSH
24598: LD_VAR 0 3
24602: PPUSH
24603: LD_INT 1
24605: PPUSH
24606: LD_INT 1
24608: PPUSH
24609: CALL_OW 483
// CenterOnXY ( x , y ) ;
24613: LD_VAR 0 2
24617: PPUSH
24618: LD_VAR 0 3
24622: PPUSH
24623: CALL_OW 84
// end ;
24627: LD_VAR 0 4
24631: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24632: LD_INT 0
24634: PPUSH
24635: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24636: LD_VAR 0 1
24640: NOT
24641: PUSH
24642: LD_VAR 0 2
24646: PPUSH
24647: LD_VAR 0 3
24651: PPUSH
24652: CALL_OW 488
24656: NOT
24657: OR
24658: PUSH
24659: LD_VAR 0 1
24663: PPUSH
24664: CALL_OW 266
24668: PUSH
24669: LD_INT 3
24671: NONEQUAL
24672: PUSH
24673: LD_VAR 0 1
24677: PPUSH
24678: CALL_OW 247
24682: PUSH
24683: LD_INT 1
24685: EQUAL
24686: NOT
24687: AND
24688: OR
24689: IFFALSE 24693
// exit ;
24691: GO 24842
// if GetType ( factory ) = unit_human then
24693: LD_VAR 0 1
24697: PPUSH
24698: CALL_OW 247
24702: PUSH
24703: LD_INT 1
24705: EQUAL
24706: IFFALSE 24723
// factory := IsInUnit ( factory ) ;
24708: LD_ADDR_VAR 0 1
24712: PUSH
24713: LD_VAR 0 1
24717: PPUSH
24718: CALL_OW 310
24722: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24723: LD_VAR 0 1
24727: PPUSH
24728: CALL_OW 266
24732: PUSH
24733: LD_INT 3
24735: NONEQUAL
24736: IFFALSE 24740
// exit ;
24738: GO 24842
// if HexInfo ( x , y ) = factory then
24740: LD_VAR 0 2
24744: PPUSH
24745: LD_VAR 0 3
24749: PPUSH
24750: CALL_OW 428
24754: PUSH
24755: LD_VAR 0 1
24759: EQUAL
24760: IFFALSE 24787
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
24762: LD_ADDR_EXP 102
24766: PUSH
24767: LD_EXP 102
24771: PPUSH
24772: LD_VAR 0 1
24776: PPUSH
24777: LD_INT 0
24779: PPUSH
24780: CALL_OW 1
24784: ST_TO_ADDR
24785: GO 24838
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
24787: LD_ADDR_EXP 102
24791: PUSH
24792: LD_EXP 102
24796: PPUSH
24797: LD_VAR 0 1
24801: PPUSH
24802: LD_VAR 0 1
24806: PPUSH
24807: CALL_OW 255
24811: PUSH
24812: LD_VAR 0 1
24816: PUSH
24817: LD_VAR 0 2
24821: PUSH
24822: LD_VAR 0 3
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: PPUSH
24833: CALL_OW 1
24837: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24838: CALL 24847 0 0
// end ;
24842: LD_VAR 0 4
24846: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24847: LD_INT 0
24849: PPUSH
24850: PPUSH
24851: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24852: LD_STRING resetFactoryWaypoint();
24854: PPUSH
24855: CALL_OW 559
// if factoryWaypoints then
24859: LD_EXP 102
24863: IFFALSE 24989
// begin list := PrepareArray ( factoryWaypoints ) ;
24865: LD_ADDR_VAR 0 3
24869: PUSH
24870: LD_EXP 102
24874: PPUSH
24875: CALL 71621 0 1
24879: ST_TO_ADDR
// for i := 1 to list do
24880: LD_ADDR_VAR 0 2
24884: PUSH
24885: DOUBLE
24886: LD_INT 1
24888: DEC
24889: ST_TO_ADDR
24890: LD_VAR 0 3
24894: PUSH
24895: FOR_TO
24896: IFFALSE 24987
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24898: LD_STRING setFactoryWaypointXY(
24900: PUSH
24901: LD_VAR 0 3
24905: PUSH
24906: LD_VAR 0 2
24910: ARRAY
24911: PUSH
24912: LD_INT 1
24914: ARRAY
24915: STR
24916: PUSH
24917: LD_STRING ,
24919: STR
24920: PUSH
24921: LD_VAR 0 3
24925: PUSH
24926: LD_VAR 0 2
24930: ARRAY
24931: PUSH
24932: LD_INT 2
24934: ARRAY
24935: STR
24936: PUSH
24937: LD_STRING ,
24939: STR
24940: PUSH
24941: LD_VAR 0 3
24945: PUSH
24946: LD_VAR 0 2
24950: ARRAY
24951: PUSH
24952: LD_INT 3
24954: ARRAY
24955: STR
24956: PUSH
24957: LD_STRING ,
24959: STR
24960: PUSH
24961: LD_VAR 0 3
24965: PUSH
24966: LD_VAR 0 2
24970: ARRAY
24971: PUSH
24972: LD_INT 4
24974: ARRAY
24975: STR
24976: PUSH
24977: LD_STRING )
24979: STR
24980: PPUSH
24981: CALL_OW 559
24985: GO 24895
24987: POP
24988: POP
// end ; end ;
24989: LD_VAR 0 1
24993: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24994: LD_INT 0
24996: PPUSH
// if HexInfo ( x , y ) = warehouse then
24997: LD_VAR 0 2
25001: PPUSH
25002: LD_VAR 0 3
25006: PPUSH
25007: CALL_OW 428
25011: PUSH
25012: LD_VAR 0 1
25016: EQUAL
25017: IFFALSE 25044
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25019: LD_ADDR_EXP 103
25023: PUSH
25024: LD_EXP 103
25028: PPUSH
25029: LD_VAR 0 1
25033: PPUSH
25034: LD_INT 0
25036: PPUSH
25037: CALL_OW 1
25041: ST_TO_ADDR
25042: GO 25095
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25044: LD_ADDR_EXP 103
25048: PUSH
25049: LD_EXP 103
25053: PPUSH
25054: LD_VAR 0 1
25058: PPUSH
25059: LD_VAR 0 1
25063: PPUSH
25064: CALL_OW 255
25068: PUSH
25069: LD_VAR 0 1
25073: PUSH
25074: LD_VAR 0 2
25078: PUSH
25079: LD_VAR 0 3
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: PPUSH
25090: CALL_OW 1
25094: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25095: CALL 25104 0 0
// end ;
25099: LD_VAR 0 4
25103: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25104: LD_INT 0
25106: PPUSH
25107: PPUSH
25108: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25109: LD_STRING resetWarehouseGatheringPoints();
25111: PPUSH
25112: CALL_OW 559
// if warehouseGatheringPoints then
25116: LD_EXP 103
25120: IFFALSE 25246
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25122: LD_ADDR_VAR 0 3
25126: PUSH
25127: LD_EXP 103
25131: PPUSH
25132: CALL 71621 0 1
25136: ST_TO_ADDR
// for i := 1 to list do
25137: LD_ADDR_VAR 0 2
25141: PUSH
25142: DOUBLE
25143: LD_INT 1
25145: DEC
25146: ST_TO_ADDR
25147: LD_VAR 0 3
25151: PUSH
25152: FOR_TO
25153: IFFALSE 25244
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25155: LD_STRING setWarehouseGatheringPointXY(
25157: PUSH
25158: LD_VAR 0 3
25162: PUSH
25163: LD_VAR 0 2
25167: ARRAY
25168: PUSH
25169: LD_INT 1
25171: ARRAY
25172: STR
25173: PUSH
25174: LD_STRING ,
25176: STR
25177: PUSH
25178: LD_VAR 0 3
25182: PUSH
25183: LD_VAR 0 2
25187: ARRAY
25188: PUSH
25189: LD_INT 2
25191: ARRAY
25192: STR
25193: PUSH
25194: LD_STRING ,
25196: STR
25197: PUSH
25198: LD_VAR 0 3
25202: PUSH
25203: LD_VAR 0 2
25207: ARRAY
25208: PUSH
25209: LD_INT 3
25211: ARRAY
25212: STR
25213: PUSH
25214: LD_STRING ,
25216: STR
25217: PUSH
25218: LD_VAR 0 3
25222: PUSH
25223: LD_VAR 0 2
25227: ARRAY
25228: PUSH
25229: LD_INT 4
25231: ARRAY
25232: STR
25233: PUSH
25234: LD_STRING )
25236: STR
25237: PPUSH
25238: CALL_OW 559
25242: GO 25152
25244: POP
25245: POP
// end ; end ;
25246: LD_VAR 0 1
25250: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25251: LD_EXP 103
25255: IFFALSE 25940
25257: GO 25259
25259: DISABLE
25260: LD_INT 0
25262: PPUSH
25263: PPUSH
25264: PPUSH
25265: PPUSH
25266: PPUSH
25267: PPUSH
25268: PPUSH
25269: PPUSH
25270: PPUSH
// begin enable ;
25271: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25272: LD_ADDR_VAR 0 3
25276: PUSH
25277: LD_EXP 103
25281: PPUSH
25282: CALL 71621 0 1
25286: ST_TO_ADDR
// if not list then
25287: LD_VAR 0 3
25291: NOT
25292: IFFALSE 25296
// exit ;
25294: GO 25940
// for i := 1 to list do
25296: LD_ADDR_VAR 0 1
25300: PUSH
25301: DOUBLE
25302: LD_INT 1
25304: DEC
25305: ST_TO_ADDR
25306: LD_VAR 0 3
25310: PUSH
25311: FOR_TO
25312: IFFALSE 25938
// begin depot := list [ i ] [ 2 ] ;
25314: LD_ADDR_VAR 0 8
25318: PUSH
25319: LD_VAR 0 3
25323: PUSH
25324: LD_VAR 0 1
25328: ARRAY
25329: PUSH
25330: LD_INT 2
25332: ARRAY
25333: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25334: LD_ADDR_VAR 0 5
25338: PUSH
25339: LD_VAR 0 3
25343: PUSH
25344: LD_VAR 0 1
25348: ARRAY
25349: PUSH
25350: LD_INT 1
25352: ARRAY
25353: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25354: LD_VAR 0 8
25358: PPUSH
25359: CALL_OW 301
25363: PUSH
25364: LD_VAR 0 5
25368: PUSH
25369: LD_VAR 0 8
25373: PPUSH
25374: CALL_OW 255
25378: NONEQUAL
25379: OR
25380: IFFALSE 25409
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25382: LD_ADDR_EXP 103
25386: PUSH
25387: LD_EXP 103
25391: PPUSH
25392: LD_VAR 0 8
25396: PPUSH
25397: LD_INT 0
25399: PPUSH
25400: CALL_OW 1
25404: ST_TO_ADDR
// exit ;
25405: POP
25406: POP
25407: GO 25940
// end ; x := list [ i ] [ 3 ] ;
25409: LD_ADDR_VAR 0 6
25413: PUSH
25414: LD_VAR 0 3
25418: PUSH
25419: LD_VAR 0 1
25423: ARRAY
25424: PUSH
25425: LD_INT 3
25427: ARRAY
25428: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25429: LD_ADDR_VAR 0 7
25433: PUSH
25434: LD_VAR 0 3
25438: PUSH
25439: LD_VAR 0 1
25443: ARRAY
25444: PUSH
25445: LD_INT 4
25447: ARRAY
25448: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25449: LD_ADDR_VAR 0 9
25453: PUSH
25454: LD_VAR 0 6
25458: PPUSH
25459: LD_VAR 0 7
25463: PPUSH
25464: LD_INT 16
25466: PPUSH
25467: CALL 70209 0 3
25471: ST_TO_ADDR
// if not cratesNearbyPoint then
25472: LD_VAR 0 9
25476: NOT
25477: IFFALSE 25483
// exit ;
25479: POP
25480: POP
25481: GO 25940
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25483: LD_ADDR_VAR 0 4
25487: PUSH
25488: LD_INT 22
25490: PUSH
25491: LD_VAR 0 5
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 3
25502: PUSH
25503: LD_INT 60
25505: PUSH
25506: EMPTY
25507: LIST
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 91
25515: PUSH
25516: LD_VAR 0 8
25520: PUSH
25521: LD_INT 6
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 2
25531: PUSH
25532: LD_INT 25
25534: PUSH
25535: LD_INT 2
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 25
25544: PUSH
25545: LD_INT 16
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: LIST
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: PPUSH
25563: CALL_OW 69
25567: PUSH
25568: LD_VAR 0 8
25572: PPUSH
25573: CALL_OW 313
25577: PPUSH
25578: LD_INT 3
25580: PUSH
25581: LD_INT 60
25583: PUSH
25584: EMPTY
25585: LIST
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 2
25593: PUSH
25594: LD_INT 25
25596: PUSH
25597: LD_INT 2
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 25
25606: PUSH
25607: LD_INT 16
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: LIST
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PPUSH
25623: CALL_OW 72
25627: UNION
25628: ST_TO_ADDR
// if tmp then
25629: LD_VAR 0 4
25633: IFFALSE 25713
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25635: LD_ADDR_VAR 0 4
25639: PUSH
25640: LD_VAR 0 4
25644: PPUSH
25645: LD_INT 3
25647: PPUSH
25648: CALL 68178 0 2
25652: ST_TO_ADDR
// for j in tmp do
25653: LD_ADDR_VAR 0 2
25657: PUSH
25658: LD_VAR 0 4
25662: PUSH
25663: FOR_IN
25664: IFFALSE 25707
// begin if IsInUnit ( j ) then
25666: LD_VAR 0 2
25670: PPUSH
25671: CALL_OW 310
25675: IFFALSE 25686
// ComExit ( j ) ;
25677: LD_VAR 0 2
25681: PPUSH
25682: CALL 68261 0 1
// AddComCollect ( j , x , y ) ;
25686: LD_VAR 0 2
25690: PPUSH
25691: LD_VAR 0 6
25695: PPUSH
25696: LD_VAR 0 7
25700: PPUSH
25701: CALL_OW 177
// end ;
25705: GO 25663
25707: POP
25708: POP
// exit ;
25709: POP
25710: POP
25711: GO 25940
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25713: LD_ADDR_VAR 0 4
25717: PUSH
25718: LD_INT 22
25720: PUSH
25721: LD_VAR 0 5
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 91
25732: PUSH
25733: LD_VAR 0 8
25737: PUSH
25738: LD_INT 8
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 2
25748: PUSH
25749: LD_INT 34
25751: PUSH
25752: LD_INT 12
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 34
25761: PUSH
25762: LD_INT 51
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 34
25771: PUSH
25772: LD_INT 32
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 34
25781: PUSH
25782: LD_INT 89
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: LIST
25800: PPUSH
25801: CALL_OW 69
25805: ST_TO_ADDR
// if tmp then
25806: LD_VAR 0 4
25810: IFFALSE 25936
// begin for j in tmp do
25812: LD_ADDR_VAR 0 2
25816: PUSH
25817: LD_VAR 0 4
25821: PUSH
25822: FOR_IN
25823: IFFALSE 25934
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25825: LD_VAR 0 2
25829: PPUSH
25830: CALL_OW 262
25834: PUSH
25835: LD_INT 3
25837: EQUAL
25838: PUSH
25839: LD_VAR 0 2
25843: PPUSH
25844: CALL_OW 261
25848: PUSH
25849: LD_INT 20
25851: GREATER
25852: OR
25853: PUSH
25854: LD_VAR 0 2
25858: PPUSH
25859: CALL_OW 314
25863: NOT
25864: AND
25865: PUSH
25866: LD_VAR 0 2
25870: PPUSH
25871: CALL_OW 263
25875: PUSH
25876: LD_INT 1
25878: NONEQUAL
25879: PUSH
25880: LD_VAR 0 2
25884: PPUSH
25885: CALL_OW 311
25889: OR
25890: AND
25891: IFFALSE 25932
// begin ComCollect ( j , x , y ) ;
25893: LD_VAR 0 2
25897: PPUSH
25898: LD_VAR 0 6
25902: PPUSH
25903: LD_VAR 0 7
25907: PPUSH
25908: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25912: LD_VAR 0 2
25916: PPUSH
25917: LD_VAR 0 8
25921: PPUSH
25922: CALL_OW 172
// exit ;
25926: POP
25927: POP
25928: POP
25929: POP
25930: GO 25940
// end ;
25932: GO 25822
25934: POP
25935: POP
// end ; end ;
25936: GO 25311
25938: POP
25939: POP
// end ; end_of_file
25940: PPOPN 9
25942: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
25943: LD_VAR 0 1
25947: PUSH
25948: LD_INT 200
25950: DOUBLE
25951: GREATEREQUAL
25952: IFFALSE 25960
25954: LD_INT 299
25956: DOUBLE
25957: LESSEQUAL
25958: IFTRUE 25962
25960: GO 25994
25962: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
25963: LD_VAR 0 1
25967: PPUSH
25968: LD_VAR 0 2
25972: PPUSH
25973: LD_VAR 0 3
25977: PPUSH
25978: LD_VAR 0 4
25982: PPUSH
25983: LD_VAR 0 5
25987: PPUSH
25988: CALL 26482 0 5
25992: GO 26071
25994: LD_INT 300
25996: DOUBLE
25997: GREATEREQUAL
25998: IFFALSE 26006
26000: LD_INT 399
26002: DOUBLE
26003: LESSEQUAL
26004: IFTRUE 26008
26006: GO 26070
26008: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26009: LD_VAR 0 1
26013: PPUSH
26014: LD_VAR 0 2
26018: PPUSH
26019: LD_VAR 0 3
26023: PPUSH
26024: LD_VAR 0 4
26028: PPUSH
26029: LD_VAR 0 5
26033: PPUSH
26034: LD_VAR 0 6
26038: PPUSH
26039: LD_VAR 0 7
26043: PPUSH
26044: LD_VAR 0 8
26048: PPUSH
26049: LD_VAR 0 9
26053: PPUSH
26054: LD_VAR 0 10
26058: PPUSH
26059: LD_VAR 0 11
26063: PPUSH
26064: CALL 22652 0 11
26068: GO 26071
26070: POP
// end ;
26071: PPOPN 11
26073: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26074: LD_VAR 0 1
26078: PPUSH
26079: LD_VAR 0 2
26083: PPUSH
26084: LD_VAR 0 3
26088: PPUSH
26089: LD_VAR 0 4
26093: PPUSH
26094: LD_VAR 0 5
26098: PPUSH
26099: CALL 26218 0 5
// end ; end_of_file
26103: PPOPN 5
26105: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26106: LD_INT 0
26108: PPUSH
26109: PPUSH
26110: PPUSH
26111: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26112: LD_VAR 0 1
26116: PPUSH
26117: CALL_OW 264
26121: PUSH
26122: LD_INT 91
26124: EQUAL
26125: IFFALSE 26197
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26127: LD_INT 68
26129: PPUSH
26130: LD_VAR 0 1
26134: PPUSH
26135: CALL_OW 255
26139: PPUSH
26140: CALL_OW 321
26144: PUSH
26145: LD_INT 2
26147: EQUAL
26148: IFFALSE 26160
// eff := 70 else
26150: LD_ADDR_VAR 0 4
26154: PUSH
26155: LD_INT 70
26157: ST_TO_ADDR
26158: GO 26168
// eff := 30 ;
26160: LD_ADDR_VAR 0 4
26164: PUSH
26165: LD_INT 30
26167: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26168: LD_VAR 0 1
26172: PPUSH
26173: CALL_OW 250
26177: PPUSH
26178: LD_VAR 0 1
26182: PPUSH
26183: CALL_OW 251
26187: PPUSH
26188: LD_VAR 0 4
26192: PPUSH
26193: CALL_OW 495
// end ; end ;
26197: LD_VAR 0 2
26201: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26202: LD_INT 0
26204: PPUSH
// end ;
26205: LD_VAR 0 4
26209: RET
// export function SOS_Command ( cmd ) ; begin
26210: LD_INT 0
26212: PPUSH
// end ;
26213: LD_VAR 0 2
26217: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26218: LD_INT 0
26220: PPUSH
// end ;
26221: LD_VAR 0 6
26225: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26226: LD_INT 0
26228: PPUSH
26229: PPUSH
// if not vehicle or not factory then
26230: LD_VAR 0 1
26234: NOT
26235: PUSH
26236: LD_VAR 0 2
26240: NOT
26241: OR
26242: IFFALSE 26246
// exit ;
26244: GO 26477
// if factoryWaypoints >= factory then
26246: LD_EXP 102
26250: PUSH
26251: LD_VAR 0 2
26255: GREATEREQUAL
26256: IFFALSE 26477
// if factoryWaypoints [ factory ] then
26258: LD_EXP 102
26262: PUSH
26263: LD_VAR 0 2
26267: ARRAY
26268: IFFALSE 26477
// begin if GetControl ( vehicle ) = control_manual then
26270: LD_VAR 0 1
26274: PPUSH
26275: CALL_OW 263
26279: PUSH
26280: LD_INT 1
26282: EQUAL
26283: IFFALSE 26364
// begin driver := IsDrivenBy ( vehicle ) ;
26285: LD_ADDR_VAR 0 4
26289: PUSH
26290: LD_VAR 0 1
26294: PPUSH
26295: CALL_OW 311
26299: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26300: LD_VAR 0 4
26304: PPUSH
26305: LD_EXP 102
26309: PUSH
26310: LD_VAR 0 2
26314: ARRAY
26315: PUSH
26316: LD_INT 3
26318: ARRAY
26319: PPUSH
26320: LD_EXP 102
26324: PUSH
26325: LD_VAR 0 2
26329: ARRAY
26330: PUSH
26331: LD_INT 4
26333: ARRAY
26334: PPUSH
26335: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26339: LD_VAR 0 4
26343: PPUSH
26344: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26348: LD_VAR 0 4
26352: PPUSH
26353: LD_VAR 0 2
26357: PPUSH
26358: CALL_OW 180
// end else
26362: GO 26477
// if GetControl ( vehicle ) = control_remote then
26364: LD_VAR 0 1
26368: PPUSH
26369: CALL_OW 263
26373: PUSH
26374: LD_INT 2
26376: EQUAL
26377: IFFALSE 26438
// begin wait ( 0 0$2 ) ;
26379: LD_INT 70
26381: PPUSH
26382: CALL_OW 67
// if Connect ( vehicle ) then
26386: LD_VAR 0 1
26390: PPUSH
26391: CALL 38501 0 1
26395: IFFALSE 26436
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26397: LD_VAR 0 1
26401: PPUSH
26402: LD_EXP 102
26406: PUSH
26407: LD_VAR 0 2
26411: ARRAY
26412: PUSH
26413: LD_INT 3
26415: ARRAY
26416: PPUSH
26417: LD_EXP 102
26421: PUSH
26422: LD_VAR 0 2
26426: ARRAY
26427: PUSH
26428: LD_INT 4
26430: ARRAY
26431: PPUSH
26432: CALL_OW 171
// end else
26436: GO 26477
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26438: LD_VAR 0 1
26442: PPUSH
26443: LD_EXP 102
26447: PUSH
26448: LD_VAR 0 2
26452: ARRAY
26453: PUSH
26454: LD_INT 3
26456: ARRAY
26457: PPUSH
26458: LD_EXP 102
26462: PUSH
26463: LD_VAR 0 2
26467: ARRAY
26468: PUSH
26469: LD_INT 4
26471: ARRAY
26472: PPUSH
26473: CALL_OW 171
// end ; end ;
26477: LD_VAR 0 3
26481: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26482: LD_INT 0
26484: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26485: LD_VAR 0 1
26489: PUSH
26490: LD_INT 250
26492: EQUAL
26493: PUSH
26494: LD_VAR 0 2
26498: PPUSH
26499: CALL_OW 264
26503: PUSH
26504: LD_INT 81
26506: EQUAL
26507: AND
26508: IFFALSE 26529
// MinerPlaceMine ( unit , x , y ) ;
26510: LD_VAR 0 2
26514: PPUSH
26515: LD_VAR 0 4
26519: PPUSH
26520: LD_VAR 0 5
26524: PPUSH
26525: CALL 28914 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26529: LD_VAR 0 1
26533: PUSH
26534: LD_INT 251
26536: EQUAL
26537: PUSH
26538: LD_VAR 0 2
26542: PPUSH
26543: CALL_OW 264
26547: PUSH
26548: LD_INT 81
26550: EQUAL
26551: AND
26552: IFFALSE 26573
// MinerDetonateMine ( unit , x , y ) ;
26554: LD_VAR 0 2
26558: PPUSH
26559: LD_VAR 0 4
26563: PPUSH
26564: LD_VAR 0 5
26568: PPUSH
26569: CALL 29189 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26573: LD_VAR 0 1
26577: PUSH
26578: LD_INT 252
26580: EQUAL
26581: PUSH
26582: LD_VAR 0 2
26586: PPUSH
26587: CALL_OW 264
26591: PUSH
26592: LD_INT 81
26594: EQUAL
26595: AND
26596: IFFALSE 26617
// MinerCreateMinefield ( unit , x , y ) ;
26598: LD_VAR 0 2
26602: PPUSH
26603: LD_VAR 0 4
26607: PPUSH
26608: LD_VAR 0 5
26612: PPUSH
26613: CALL 29606 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26617: LD_VAR 0 1
26621: PUSH
26622: LD_INT 253
26624: EQUAL
26625: PUSH
26626: LD_VAR 0 2
26630: PPUSH
26631: CALL_OW 257
26635: PUSH
26636: LD_INT 5
26638: EQUAL
26639: AND
26640: IFFALSE 26661
// ComBinocular ( unit , x , y ) ;
26642: LD_VAR 0 2
26646: PPUSH
26647: LD_VAR 0 4
26651: PPUSH
26652: LD_VAR 0 5
26656: PPUSH
26657: CALL 29975 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26661: LD_VAR 0 1
26665: PUSH
26666: LD_INT 254
26668: EQUAL
26669: PUSH
26670: LD_VAR 0 2
26674: PPUSH
26675: CALL_OW 264
26679: PUSH
26680: LD_INT 99
26682: EQUAL
26683: AND
26684: PUSH
26685: LD_VAR 0 3
26689: PPUSH
26690: CALL_OW 263
26694: PUSH
26695: LD_INT 3
26697: EQUAL
26698: AND
26699: IFFALSE 26715
// HackDestroyVehicle ( unit , selectedUnit ) ;
26701: LD_VAR 0 2
26705: PPUSH
26706: LD_VAR 0 3
26710: PPUSH
26711: CALL 28278 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26715: LD_VAR 0 1
26719: PUSH
26720: LD_INT 255
26722: EQUAL
26723: PUSH
26724: LD_VAR 0 2
26728: PPUSH
26729: CALL_OW 264
26733: PUSH
26734: LD_INT 14
26736: PUSH
26737: LD_INT 53
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: IN
26744: AND
26745: PUSH
26746: LD_VAR 0 4
26750: PPUSH
26751: LD_VAR 0 5
26755: PPUSH
26756: CALL_OW 488
26760: AND
26761: IFFALSE 26785
// CutTreeXYR ( unit , x , y , 12 ) ;
26763: LD_VAR 0 2
26767: PPUSH
26768: LD_VAR 0 4
26772: PPUSH
26773: LD_VAR 0 5
26777: PPUSH
26778: LD_INT 12
26780: PPUSH
26781: CALL 26848 0 4
// if cmd = 256 then
26785: LD_VAR 0 1
26789: PUSH
26790: LD_INT 256
26792: EQUAL
26793: IFFALSE 26814
// SetFactoryWaypoint ( unit , x , y ) ;
26795: LD_VAR 0 2
26799: PPUSH
26800: LD_VAR 0 4
26804: PPUSH
26805: LD_VAR 0 5
26809: PPUSH
26810: CALL 24632 0 3
// if cmd = 257 then
26814: LD_VAR 0 1
26818: PUSH
26819: LD_INT 257
26821: EQUAL
26822: IFFALSE 26843
// SetWarehouseGatheringPoint ( unit , x , y ) ;
26824: LD_VAR 0 2
26828: PPUSH
26829: LD_VAR 0 4
26833: PPUSH
26834: LD_VAR 0 5
26838: PPUSH
26839: CALL 24994 0 3
// end ;
26843: LD_VAR 0 6
26847: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26848: LD_INT 0
26850: PPUSH
26851: PPUSH
26852: PPUSH
26853: PPUSH
26854: PPUSH
26855: PPUSH
26856: PPUSH
26857: PPUSH
26858: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26859: LD_VAR 0 1
26863: NOT
26864: PUSH
26865: LD_VAR 0 2
26869: PPUSH
26870: LD_VAR 0 3
26874: PPUSH
26875: CALL_OW 488
26879: NOT
26880: OR
26881: PUSH
26882: LD_VAR 0 4
26886: NOT
26887: OR
26888: IFFALSE 26892
// exit ;
26890: GO 27232
// list := [ ] ;
26892: LD_ADDR_VAR 0 13
26896: PUSH
26897: EMPTY
26898: ST_TO_ADDR
// if x - r < 0 then
26899: LD_VAR 0 2
26903: PUSH
26904: LD_VAR 0 4
26908: MINUS
26909: PUSH
26910: LD_INT 0
26912: LESS
26913: IFFALSE 26925
// min_x := 0 else
26915: LD_ADDR_VAR 0 7
26919: PUSH
26920: LD_INT 0
26922: ST_TO_ADDR
26923: GO 26941
// min_x := x - r ;
26925: LD_ADDR_VAR 0 7
26929: PUSH
26930: LD_VAR 0 2
26934: PUSH
26935: LD_VAR 0 4
26939: MINUS
26940: ST_TO_ADDR
// if y - r < 0 then
26941: LD_VAR 0 3
26945: PUSH
26946: LD_VAR 0 4
26950: MINUS
26951: PUSH
26952: LD_INT 0
26954: LESS
26955: IFFALSE 26967
// min_y := 0 else
26957: LD_ADDR_VAR 0 8
26961: PUSH
26962: LD_INT 0
26964: ST_TO_ADDR
26965: GO 26983
// min_y := y - r ;
26967: LD_ADDR_VAR 0 8
26971: PUSH
26972: LD_VAR 0 3
26976: PUSH
26977: LD_VAR 0 4
26981: MINUS
26982: ST_TO_ADDR
// max_x := x + r ;
26983: LD_ADDR_VAR 0 9
26987: PUSH
26988: LD_VAR 0 2
26992: PUSH
26993: LD_VAR 0 4
26997: PLUS
26998: ST_TO_ADDR
// max_y := y + r ;
26999: LD_ADDR_VAR 0 10
27003: PUSH
27004: LD_VAR 0 3
27008: PUSH
27009: LD_VAR 0 4
27013: PLUS
27014: ST_TO_ADDR
// for _x = min_x to max_x do
27015: LD_ADDR_VAR 0 11
27019: PUSH
27020: DOUBLE
27021: LD_VAR 0 7
27025: DEC
27026: ST_TO_ADDR
27027: LD_VAR 0 9
27031: PUSH
27032: FOR_TO
27033: IFFALSE 27150
// for _y = min_y to max_y do
27035: LD_ADDR_VAR 0 12
27039: PUSH
27040: DOUBLE
27041: LD_VAR 0 8
27045: DEC
27046: ST_TO_ADDR
27047: LD_VAR 0 10
27051: PUSH
27052: FOR_TO
27053: IFFALSE 27146
// begin if not ValidHex ( _x , _y ) then
27055: LD_VAR 0 11
27059: PPUSH
27060: LD_VAR 0 12
27064: PPUSH
27065: CALL_OW 488
27069: NOT
27070: IFFALSE 27074
// continue ;
27072: GO 27052
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27074: LD_VAR 0 11
27078: PPUSH
27079: LD_VAR 0 12
27083: PPUSH
27084: CALL_OW 351
27088: PUSH
27089: LD_VAR 0 11
27093: PPUSH
27094: LD_VAR 0 12
27098: PPUSH
27099: CALL_OW 554
27103: AND
27104: IFFALSE 27144
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27106: LD_ADDR_VAR 0 13
27110: PUSH
27111: LD_VAR 0 13
27115: PPUSH
27116: LD_VAR 0 13
27120: PUSH
27121: LD_INT 1
27123: PLUS
27124: PPUSH
27125: LD_VAR 0 11
27129: PUSH
27130: LD_VAR 0 12
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PPUSH
27139: CALL_OW 2
27143: ST_TO_ADDR
// end ;
27144: GO 27052
27146: POP
27147: POP
27148: GO 27032
27150: POP
27151: POP
// if not list then
27152: LD_VAR 0 13
27156: NOT
27157: IFFALSE 27161
// exit ;
27159: GO 27232
// for i in list do
27161: LD_ADDR_VAR 0 6
27165: PUSH
27166: LD_VAR 0 13
27170: PUSH
27171: FOR_IN
27172: IFFALSE 27230
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27174: LD_VAR 0 1
27178: PPUSH
27179: LD_STRING M
27181: PUSH
27182: LD_VAR 0 6
27186: PUSH
27187: LD_INT 1
27189: ARRAY
27190: PUSH
27191: LD_VAR 0 6
27195: PUSH
27196: LD_INT 2
27198: ARRAY
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: PUSH
27221: EMPTY
27222: LIST
27223: PPUSH
27224: CALL_OW 447
27228: GO 27171
27230: POP
27231: POP
// end ;
27232: LD_VAR 0 5
27236: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27237: LD_EXP 105
27241: NOT
27242: IFFALSE 27292
27244: GO 27246
27246: DISABLE
// begin initHack := true ;
27247: LD_ADDR_EXP 105
27251: PUSH
27252: LD_INT 1
27254: ST_TO_ADDR
// hackTanks := [ ] ;
27255: LD_ADDR_EXP 106
27259: PUSH
27260: EMPTY
27261: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27262: LD_ADDR_EXP 107
27266: PUSH
27267: EMPTY
27268: ST_TO_ADDR
// hackLimit := 3 ;
27269: LD_ADDR_EXP 108
27273: PUSH
27274: LD_INT 3
27276: ST_TO_ADDR
// hackDist := 12 ;
27277: LD_ADDR_EXP 109
27281: PUSH
27282: LD_INT 12
27284: ST_TO_ADDR
// hackCounter := [ ] ;
27285: LD_ADDR_EXP 110
27289: PUSH
27290: EMPTY
27291: ST_TO_ADDR
// end ;
27292: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27293: LD_EXP 105
27297: PUSH
27298: LD_INT 34
27300: PUSH
27301: LD_INT 99
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PPUSH
27308: CALL_OW 69
27312: AND
27313: IFFALSE 27566
27315: GO 27317
27317: DISABLE
27318: LD_INT 0
27320: PPUSH
27321: PPUSH
// begin enable ;
27322: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27323: LD_ADDR_VAR 0 1
27327: PUSH
27328: LD_INT 34
27330: PUSH
27331: LD_INT 99
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PPUSH
27338: CALL_OW 69
27342: PUSH
27343: FOR_IN
27344: IFFALSE 27564
// begin if not i in hackTanks then
27346: LD_VAR 0 1
27350: PUSH
27351: LD_EXP 106
27355: IN
27356: NOT
27357: IFFALSE 27440
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27359: LD_ADDR_EXP 106
27363: PUSH
27364: LD_EXP 106
27368: PPUSH
27369: LD_EXP 106
27373: PUSH
27374: LD_INT 1
27376: PLUS
27377: PPUSH
27378: LD_VAR 0 1
27382: PPUSH
27383: CALL_OW 1
27387: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27388: LD_ADDR_EXP 107
27392: PUSH
27393: LD_EXP 107
27397: PPUSH
27398: LD_EXP 107
27402: PUSH
27403: LD_INT 1
27405: PLUS
27406: PPUSH
27407: EMPTY
27408: PPUSH
27409: CALL_OW 1
27413: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27414: LD_ADDR_EXP 110
27418: PUSH
27419: LD_EXP 110
27423: PPUSH
27424: LD_EXP 110
27428: PUSH
27429: LD_INT 1
27431: PLUS
27432: PPUSH
27433: EMPTY
27434: PPUSH
27435: CALL_OW 1
27439: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27440: LD_VAR 0 1
27444: PPUSH
27445: CALL_OW 302
27449: NOT
27450: IFFALSE 27463
// begin HackUnlinkAll ( i ) ;
27452: LD_VAR 0 1
27456: PPUSH
27457: CALL 27569 0 1
// continue ;
27461: GO 27343
// end ; HackCheckCapturedStatus ( i ) ;
27463: LD_VAR 0 1
27467: PPUSH
27468: CALL 28012 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27472: LD_ADDR_VAR 0 2
27476: PUSH
27477: LD_INT 81
27479: PUSH
27480: LD_VAR 0 1
27484: PPUSH
27485: CALL_OW 255
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 33
27496: PUSH
27497: LD_INT 3
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 91
27506: PUSH
27507: LD_VAR 0 1
27511: PUSH
27512: LD_EXP 109
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 50
27524: PUSH
27525: EMPTY
27526: LIST
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: PPUSH
27534: CALL_OW 69
27538: ST_TO_ADDR
// if not tmp then
27539: LD_VAR 0 2
27543: NOT
27544: IFFALSE 27548
// continue ;
27546: GO 27343
// HackLink ( i , tmp ) ;
27548: LD_VAR 0 1
27552: PPUSH
27553: LD_VAR 0 2
27557: PPUSH
27558: CALL 27705 0 2
// end ;
27562: GO 27343
27564: POP
27565: POP
// end ;
27566: PPOPN 2
27568: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27569: LD_INT 0
27571: PPUSH
27572: PPUSH
27573: PPUSH
// if not hack in hackTanks then
27574: LD_VAR 0 1
27578: PUSH
27579: LD_EXP 106
27583: IN
27584: NOT
27585: IFFALSE 27589
// exit ;
27587: GO 27700
// index := GetElementIndex ( hackTanks , hack ) ;
27589: LD_ADDR_VAR 0 4
27593: PUSH
27594: LD_EXP 106
27598: PPUSH
27599: LD_VAR 0 1
27603: PPUSH
27604: CALL 35317 0 2
27608: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27609: LD_EXP 107
27613: PUSH
27614: LD_VAR 0 4
27618: ARRAY
27619: IFFALSE 27700
// begin for i in hackTanksCaptured [ index ] do
27621: LD_ADDR_VAR 0 3
27625: PUSH
27626: LD_EXP 107
27630: PUSH
27631: LD_VAR 0 4
27635: ARRAY
27636: PUSH
27637: FOR_IN
27638: IFFALSE 27664
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27640: LD_VAR 0 3
27644: PUSH
27645: LD_INT 1
27647: ARRAY
27648: PPUSH
27649: LD_VAR 0 3
27653: PUSH
27654: LD_INT 2
27656: ARRAY
27657: PPUSH
27658: CALL_OW 235
27662: GO 27637
27664: POP
27665: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27666: LD_ADDR_EXP 107
27670: PUSH
27671: LD_EXP 107
27675: PPUSH
27676: LD_VAR 0 4
27680: PPUSH
27681: EMPTY
27682: PPUSH
27683: CALL_OW 1
27687: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27688: LD_VAR 0 1
27692: PPUSH
27693: LD_INT 0
27695: PPUSH
27696: CALL_OW 505
// end ; end ;
27700: LD_VAR 0 2
27704: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27705: LD_INT 0
27707: PPUSH
27708: PPUSH
27709: PPUSH
// if not hack in hackTanks or not vehicles then
27710: LD_VAR 0 1
27714: PUSH
27715: LD_EXP 106
27719: IN
27720: NOT
27721: PUSH
27722: LD_VAR 0 2
27726: NOT
27727: OR
27728: IFFALSE 27732
// exit ;
27730: GO 28007
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27732: LD_ADDR_VAR 0 2
27736: PUSH
27737: LD_VAR 0 1
27741: PPUSH
27742: LD_VAR 0 2
27746: PPUSH
27747: LD_INT 1
27749: PPUSH
27750: LD_INT 1
27752: PPUSH
27753: CALL 35967 0 4
27757: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27758: LD_ADDR_VAR 0 5
27762: PUSH
27763: LD_EXP 106
27767: PPUSH
27768: LD_VAR 0 1
27772: PPUSH
27773: CALL 35317 0 2
27777: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27778: LD_EXP 107
27782: PUSH
27783: LD_VAR 0 5
27787: ARRAY
27788: PUSH
27789: LD_EXP 108
27793: LESS
27794: IFFALSE 27983
// begin for i := 1 to vehicles do
27796: LD_ADDR_VAR 0 4
27800: PUSH
27801: DOUBLE
27802: LD_INT 1
27804: DEC
27805: ST_TO_ADDR
27806: LD_VAR 0 2
27810: PUSH
27811: FOR_TO
27812: IFFALSE 27981
// begin if hackTanksCaptured [ index ] = hackLimit then
27814: LD_EXP 107
27818: PUSH
27819: LD_VAR 0 5
27823: ARRAY
27824: PUSH
27825: LD_EXP 108
27829: EQUAL
27830: IFFALSE 27834
// break ;
27832: GO 27981
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27834: LD_ADDR_EXP 110
27838: PUSH
27839: LD_EXP 110
27843: PPUSH
27844: LD_VAR 0 5
27848: PPUSH
27849: LD_EXP 110
27853: PUSH
27854: LD_VAR 0 5
27858: ARRAY
27859: PUSH
27860: LD_INT 1
27862: PLUS
27863: PPUSH
27864: CALL_OW 1
27868: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27869: LD_ADDR_EXP 107
27873: PUSH
27874: LD_EXP 107
27878: PPUSH
27879: LD_VAR 0 5
27883: PUSH
27884: LD_EXP 107
27888: PUSH
27889: LD_VAR 0 5
27893: ARRAY
27894: PUSH
27895: LD_INT 1
27897: PLUS
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PPUSH
27903: LD_VAR 0 2
27907: PUSH
27908: LD_VAR 0 4
27912: ARRAY
27913: PUSH
27914: LD_VAR 0 2
27918: PUSH
27919: LD_VAR 0 4
27923: ARRAY
27924: PPUSH
27925: CALL_OW 255
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PPUSH
27934: CALL 35532 0 3
27938: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27939: LD_VAR 0 2
27943: PUSH
27944: LD_VAR 0 4
27948: ARRAY
27949: PPUSH
27950: LD_VAR 0 1
27954: PPUSH
27955: CALL_OW 255
27959: PPUSH
27960: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27964: LD_VAR 0 2
27968: PUSH
27969: LD_VAR 0 4
27973: ARRAY
27974: PPUSH
27975: CALL_OW 141
// end ;
27979: GO 27811
27981: POP
27982: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27983: LD_VAR 0 1
27987: PPUSH
27988: LD_EXP 107
27992: PUSH
27993: LD_VAR 0 5
27997: ARRAY
27998: PUSH
27999: LD_INT 0
28001: PLUS
28002: PPUSH
28003: CALL_OW 505
// end ;
28007: LD_VAR 0 3
28011: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28012: LD_INT 0
28014: PPUSH
28015: PPUSH
28016: PPUSH
28017: PPUSH
// if not hack in hackTanks then
28018: LD_VAR 0 1
28022: PUSH
28023: LD_EXP 106
28027: IN
28028: NOT
28029: IFFALSE 28033
// exit ;
28031: GO 28273
// index := GetElementIndex ( hackTanks , hack ) ;
28033: LD_ADDR_VAR 0 4
28037: PUSH
28038: LD_EXP 106
28042: PPUSH
28043: LD_VAR 0 1
28047: PPUSH
28048: CALL 35317 0 2
28052: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28053: LD_ADDR_VAR 0 3
28057: PUSH
28058: DOUBLE
28059: LD_EXP 107
28063: PUSH
28064: LD_VAR 0 4
28068: ARRAY
28069: INC
28070: ST_TO_ADDR
28071: LD_INT 1
28073: PUSH
28074: FOR_DOWNTO
28075: IFFALSE 28247
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28077: LD_ADDR_VAR 0 5
28081: PUSH
28082: LD_EXP 107
28086: PUSH
28087: LD_VAR 0 4
28091: ARRAY
28092: PUSH
28093: LD_VAR 0 3
28097: ARRAY
28098: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28099: LD_VAR 0 5
28103: PUSH
28104: LD_INT 1
28106: ARRAY
28107: PPUSH
28108: CALL_OW 302
28112: NOT
28113: PUSH
28114: LD_VAR 0 5
28118: PUSH
28119: LD_INT 1
28121: ARRAY
28122: PPUSH
28123: CALL_OW 255
28127: PUSH
28128: LD_VAR 0 1
28132: PPUSH
28133: CALL_OW 255
28137: NONEQUAL
28138: OR
28139: IFFALSE 28245
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28141: LD_VAR 0 5
28145: PUSH
28146: LD_INT 1
28148: ARRAY
28149: PPUSH
28150: CALL_OW 305
28154: PUSH
28155: LD_VAR 0 5
28159: PUSH
28160: LD_INT 1
28162: ARRAY
28163: PPUSH
28164: CALL_OW 255
28168: PUSH
28169: LD_VAR 0 1
28173: PPUSH
28174: CALL_OW 255
28178: EQUAL
28179: AND
28180: IFFALSE 28204
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28182: LD_VAR 0 5
28186: PUSH
28187: LD_INT 1
28189: ARRAY
28190: PPUSH
28191: LD_VAR 0 5
28195: PUSH
28196: LD_INT 2
28198: ARRAY
28199: PPUSH
28200: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28204: LD_ADDR_EXP 107
28208: PUSH
28209: LD_EXP 107
28213: PPUSH
28214: LD_VAR 0 4
28218: PPUSH
28219: LD_EXP 107
28223: PUSH
28224: LD_VAR 0 4
28228: ARRAY
28229: PPUSH
28230: LD_VAR 0 3
28234: PPUSH
28235: CALL_OW 3
28239: PPUSH
28240: CALL_OW 1
28244: ST_TO_ADDR
// end ; end ;
28245: GO 28074
28247: POP
28248: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28249: LD_VAR 0 1
28253: PPUSH
28254: LD_EXP 107
28258: PUSH
28259: LD_VAR 0 4
28263: ARRAY
28264: PUSH
28265: LD_INT 0
28267: PLUS
28268: PPUSH
28269: CALL_OW 505
// end ;
28273: LD_VAR 0 2
28277: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28278: LD_INT 0
28280: PPUSH
28281: PPUSH
28282: PPUSH
28283: PPUSH
// if not hack in hackTanks then
28284: LD_VAR 0 1
28288: PUSH
28289: LD_EXP 106
28293: IN
28294: NOT
28295: IFFALSE 28299
// exit ;
28297: GO 28384
// index := GetElementIndex ( hackTanks , hack ) ;
28299: LD_ADDR_VAR 0 5
28303: PUSH
28304: LD_EXP 106
28308: PPUSH
28309: LD_VAR 0 1
28313: PPUSH
28314: CALL 35317 0 2
28318: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28319: LD_ADDR_VAR 0 4
28323: PUSH
28324: DOUBLE
28325: LD_INT 1
28327: DEC
28328: ST_TO_ADDR
28329: LD_EXP 107
28333: PUSH
28334: LD_VAR 0 5
28338: ARRAY
28339: PUSH
28340: FOR_TO
28341: IFFALSE 28382
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28343: LD_EXP 107
28347: PUSH
28348: LD_VAR 0 5
28352: ARRAY
28353: PUSH
28354: LD_VAR 0 4
28358: ARRAY
28359: PUSH
28360: LD_INT 1
28362: ARRAY
28363: PUSH
28364: LD_VAR 0 2
28368: EQUAL
28369: IFFALSE 28380
// KillUnit ( vehicle ) ;
28371: LD_VAR 0 2
28375: PPUSH
28376: CALL_OW 66
28380: GO 28340
28382: POP
28383: POP
// end ;
28384: LD_VAR 0 3
28388: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28389: LD_EXP 111
28393: NOT
28394: IFFALSE 28429
28396: GO 28398
28398: DISABLE
// begin initMiner := true ;
28399: LD_ADDR_EXP 111
28403: PUSH
28404: LD_INT 1
28406: ST_TO_ADDR
// minersList := [ ] ;
28407: LD_ADDR_EXP 112
28411: PUSH
28412: EMPTY
28413: ST_TO_ADDR
// minerMinesList := [ ] ;
28414: LD_ADDR_EXP 113
28418: PUSH
28419: EMPTY
28420: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28421: LD_ADDR_EXP 114
28425: PUSH
28426: LD_INT 5
28428: ST_TO_ADDR
// end ;
28429: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28430: LD_EXP 111
28434: PUSH
28435: LD_INT 34
28437: PUSH
28438: LD_INT 81
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PPUSH
28445: CALL_OW 69
28449: AND
28450: IFFALSE 28911
28452: GO 28454
28454: DISABLE
28455: LD_INT 0
28457: PPUSH
28458: PPUSH
28459: PPUSH
28460: PPUSH
// begin enable ;
28461: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28462: LD_ADDR_VAR 0 1
28466: PUSH
28467: LD_INT 34
28469: PUSH
28470: LD_INT 81
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PPUSH
28477: CALL_OW 69
28481: PUSH
28482: FOR_IN
28483: IFFALSE 28555
// begin if not i in minersList then
28485: LD_VAR 0 1
28489: PUSH
28490: LD_EXP 112
28494: IN
28495: NOT
28496: IFFALSE 28553
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28498: LD_ADDR_EXP 112
28502: PUSH
28503: LD_EXP 112
28507: PPUSH
28508: LD_EXP 112
28512: PUSH
28513: LD_INT 1
28515: PLUS
28516: PPUSH
28517: LD_VAR 0 1
28521: PPUSH
28522: CALL_OW 1
28526: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28527: LD_ADDR_EXP 113
28531: PUSH
28532: LD_EXP 113
28536: PPUSH
28537: LD_EXP 113
28541: PUSH
28542: LD_INT 1
28544: PLUS
28545: PPUSH
28546: EMPTY
28547: PPUSH
28548: CALL_OW 1
28552: ST_TO_ADDR
// end end ;
28553: GO 28482
28555: POP
28556: POP
// for i := minerMinesList downto 1 do
28557: LD_ADDR_VAR 0 1
28561: PUSH
28562: DOUBLE
28563: LD_EXP 113
28567: INC
28568: ST_TO_ADDR
28569: LD_INT 1
28571: PUSH
28572: FOR_DOWNTO
28573: IFFALSE 28909
// begin if IsLive ( minersList [ i ] ) then
28575: LD_EXP 112
28579: PUSH
28580: LD_VAR 0 1
28584: ARRAY
28585: PPUSH
28586: CALL_OW 300
28590: IFFALSE 28618
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28592: LD_EXP 112
28596: PUSH
28597: LD_VAR 0 1
28601: ARRAY
28602: PPUSH
28603: LD_EXP 113
28607: PUSH
28608: LD_VAR 0 1
28612: ARRAY
28613: PPUSH
28614: CALL_OW 505
// if not minerMinesList [ i ] then
28618: LD_EXP 113
28622: PUSH
28623: LD_VAR 0 1
28627: ARRAY
28628: NOT
28629: IFFALSE 28633
// continue ;
28631: GO 28572
// for j := minerMinesList [ i ] downto 1 do
28633: LD_ADDR_VAR 0 2
28637: PUSH
28638: DOUBLE
28639: LD_EXP 113
28643: PUSH
28644: LD_VAR 0 1
28648: ARRAY
28649: INC
28650: ST_TO_ADDR
28651: LD_INT 1
28653: PUSH
28654: FOR_DOWNTO
28655: IFFALSE 28905
// begin side := GetSide ( minersList [ i ] ) ;
28657: LD_ADDR_VAR 0 3
28661: PUSH
28662: LD_EXP 112
28666: PUSH
28667: LD_VAR 0 1
28671: ARRAY
28672: PPUSH
28673: CALL_OW 255
28677: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28678: LD_ADDR_VAR 0 4
28682: PUSH
28683: LD_EXP 113
28687: PUSH
28688: LD_VAR 0 1
28692: ARRAY
28693: PUSH
28694: LD_VAR 0 2
28698: ARRAY
28699: PUSH
28700: LD_INT 1
28702: ARRAY
28703: PPUSH
28704: LD_EXP 113
28708: PUSH
28709: LD_VAR 0 1
28713: ARRAY
28714: PUSH
28715: LD_VAR 0 2
28719: ARRAY
28720: PUSH
28721: LD_INT 2
28723: ARRAY
28724: PPUSH
28725: CALL_OW 428
28729: ST_TO_ADDR
// if not tmp then
28730: LD_VAR 0 4
28734: NOT
28735: IFFALSE 28739
// continue ;
28737: GO 28654
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28739: LD_VAR 0 4
28743: PUSH
28744: LD_INT 81
28746: PUSH
28747: LD_VAR 0 3
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PPUSH
28756: CALL_OW 69
28760: IN
28761: PUSH
28762: LD_EXP 113
28766: PUSH
28767: LD_VAR 0 1
28771: ARRAY
28772: PUSH
28773: LD_VAR 0 2
28777: ARRAY
28778: PUSH
28779: LD_INT 1
28781: ARRAY
28782: PPUSH
28783: LD_EXP 113
28787: PUSH
28788: LD_VAR 0 1
28792: ARRAY
28793: PUSH
28794: LD_VAR 0 2
28798: ARRAY
28799: PUSH
28800: LD_INT 2
28802: ARRAY
28803: PPUSH
28804: CALL_OW 458
28808: AND
28809: IFFALSE 28903
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28811: LD_EXP 113
28815: PUSH
28816: LD_VAR 0 1
28820: ARRAY
28821: PUSH
28822: LD_VAR 0 2
28826: ARRAY
28827: PUSH
28828: LD_INT 1
28830: ARRAY
28831: PPUSH
28832: LD_EXP 113
28836: PUSH
28837: LD_VAR 0 1
28841: ARRAY
28842: PUSH
28843: LD_VAR 0 2
28847: ARRAY
28848: PUSH
28849: LD_INT 2
28851: ARRAY
28852: PPUSH
28853: LD_VAR 0 3
28857: PPUSH
28858: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28862: LD_ADDR_EXP 113
28866: PUSH
28867: LD_EXP 113
28871: PPUSH
28872: LD_VAR 0 1
28876: PPUSH
28877: LD_EXP 113
28881: PUSH
28882: LD_VAR 0 1
28886: ARRAY
28887: PPUSH
28888: LD_VAR 0 2
28892: PPUSH
28893: CALL_OW 3
28897: PPUSH
28898: CALL_OW 1
28902: ST_TO_ADDR
// end ; end ;
28903: GO 28654
28905: POP
28906: POP
// end ;
28907: GO 28572
28909: POP
28910: POP
// end ;
28911: PPOPN 4
28913: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28914: LD_INT 0
28916: PPUSH
28917: PPUSH
// result := false ;
28918: LD_ADDR_VAR 0 4
28922: PUSH
28923: LD_INT 0
28925: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28926: LD_VAR 0 1
28930: PPUSH
28931: CALL_OW 264
28935: PUSH
28936: LD_INT 81
28938: EQUAL
28939: NOT
28940: IFFALSE 28944
// exit ;
28942: GO 29184
// index := GetElementIndex ( minersList , unit ) ;
28944: LD_ADDR_VAR 0 5
28948: PUSH
28949: LD_EXP 112
28953: PPUSH
28954: LD_VAR 0 1
28958: PPUSH
28959: CALL 35317 0 2
28963: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28964: LD_EXP 113
28968: PUSH
28969: LD_VAR 0 5
28973: ARRAY
28974: PUSH
28975: LD_EXP 114
28979: GREATEREQUAL
28980: IFFALSE 28984
// exit ;
28982: GO 29184
// ComMoveXY ( unit , x , y ) ;
28984: LD_VAR 0 1
28988: PPUSH
28989: LD_VAR 0 2
28993: PPUSH
28994: LD_VAR 0 3
28998: PPUSH
28999: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29003: LD_INT 35
29005: PPUSH
29006: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29010: LD_VAR 0 1
29014: PPUSH
29015: LD_VAR 0 2
29019: PPUSH
29020: LD_VAR 0 3
29024: PPUSH
29025: CALL 66672 0 3
29029: NOT
29030: PUSH
29031: LD_VAR 0 1
29035: PPUSH
29036: CALL_OW 314
29040: AND
29041: IFFALSE 29045
// exit ;
29043: GO 29184
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29045: LD_VAR 0 2
29049: PPUSH
29050: LD_VAR 0 3
29054: PPUSH
29055: CALL_OW 428
29059: PUSH
29060: LD_VAR 0 1
29064: EQUAL
29065: PUSH
29066: LD_VAR 0 1
29070: PPUSH
29071: CALL_OW 314
29075: NOT
29076: AND
29077: IFFALSE 29003
// PlaySoundXY ( x , y , PlantMine ) ;
29079: LD_VAR 0 2
29083: PPUSH
29084: LD_VAR 0 3
29088: PPUSH
29089: LD_STRING PlantMine
29091: PPUSH
29092: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29096: LD_VAR 0 2
29100: PPUSH
29101: LD_VAR 0 3
29105: PPUSH
29106: LD_VAR 0 1
29110: PPUSH
29111: CALL_OW 255
29115: PPUSH
29116: LD_INT 0
29118: PPUSH
29119: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29123: LD_ADDR_EXP 113
29127: PUSH
29128: LD_EXP 113
29132: PPUSH
29133: LD_VAR 0 5
29137: PUSH
29138: LD_EXP 113
29142: PUSH
29143: LD_VAR 0 5
29147: ARRAY
29148: PUSH
29149: LD_INT 1
29151: PLUS
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PPUSH
29157: LD_VAR 0 2
29161: PUSH
29162: LD_VAR 0 3
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PPUSH
29171: CALL 35532 0 3
29175: ST_TO_ADDR
// result := true ;
29176: LD_ADDR_VAR 0 4
29180: PUSH
29181: LD_INT 1
29183: ST_TO_ADDR
// end ;
29184: LD_VAR 0 4
29188: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29189: LD_INT 0
29191: PPUSH
29192: PPUSH
29193: PPUSH
// if not unit in minersList then
29194: LD_VAR 0 1
29198: PUSH
29199: LD_EXP 112
29203: IN
29204: NOT
29205: IFFALSE 29209
// exit ;
29207: GO 29601
// index := GetElementIndex ( minersList , unit ) ;
29209: LD_ADDR_VAR 0 6
29213: PUSH
29214: LD_EXP 112
29218: PPUSH
29219: LD_VAR 0 1
29223: PPUSH
29224: CALL 35317 0 2
29228: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29229: LD_ADDR_VAR 0 5
29233: PUSH
29234: DOUBLE
29235: LD_EXP 113
29239: PUSH
29240: LD_VAR 0 6
29244: ARRAY
29245: INC
29246: ST_TO_ADDR
29247: LD_INT 1
29249: PUSH
29250: FOR_DOWNTO
29251: IFFALSE 29412
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29253: LD_EXP 113
29257: PUSH
29258: LD_VAR 0 6
29262: ARRAY
29263: PUSH
29264: LD_VAR 0 5
29268: ARRAY
29269: PUSH
29270: LD_INT 1
29272: ARRAY
29273: PUSH
29274: LD_VAR 0 2
29278: EQUAL
29279: PUSH
29280: LD_EXP 113
29284: PUSH
29285: LD_VAR 0 6
29289: ARRAY
29290: PUSH
29291: LD_VAR 0 5
29295: ARRAY
29296: PUSH
29297: LD_INT 2
29299: ARRAY
29300: PUSH
29301: LD_VAR 0 3
29305: EQUAL
29306: AND
29307: IFFALSE 29410
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29309: LD_EXP 113
29313: PUSH
29314: LD_VAR 0 6
29318: ARRAY
29319: PUSH
29320: LD_VAR 0 5
29324: ARRAY
29325: PUSH
29326: LD_INT 1
29328: ARRAY
29329: PPUSH
29330: LD_EXP 113
29334: PUSH
29335: LD_VAR 0 6
29339: ARRAY
29340: PUSH
29341: LD_VAR 0 5
29345: ARRAY
29346: PUSH
29347: LD_INT 2
29349: ARRAY
29350: PPUSH
29351: LD_VAR 0 1
29355: PPUSH
29356: CALL_OW 255
29360: PPUSH
29361: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29365: LD_ADDR_EXP 113
29369: PUSH
29370: LD_EXP 113
29374: PPUSH
29375: LD_VAR 0 6
29379: PPUSH
29380: LD_EXP 113
29384: PUSH
29385: LD_VAR 0 6
29389: ARRAY
29390: PPUSH
29391: LD_VAR 0 5
29395: PPUSH
29396: CALL_OW 3
29400: PPUSH
29401: CALL_OW 1
29405: ST_TO_ADDR
// exit ;
29406: POP
29407: POP
29408: GO 29601
// end ; end ;
29410: GO 29250
29412: POP
29413: POP
// for i := minerMinesList [ index ] downto 1 do
29414: LD_ADDR_VAR 0 5
29418: PUSH
29419: DOUBLE
29420: LD_EXP 113
29424: PUSH
29425: LD_VAR 0 6
29429: ARRAY
29430: INC
29431: ST_TO_ADDR
29432: LD_INT 1
29434: PUSH
29435: FOR_DOWNTO
29436: IFFALSE 29599
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29438: LD_EXP 113
29442: PUSH
29443: LD_VAR 0 6
29447: ARRAY
29448: PUSH
29449: LD_VAR 0 5
29453: ARRAY
29454: PUSH
29455: LD_INT 1
29457: ARRAY
29458: PPUSH
29459: LD_EXP 113
29463: PUSH
29464: LD_VAR 0 6
29468: ARRAY
29469: PUSH
29470: LD_VAR 0 5
29474: ARRAY
29475: PUSH
29476: LD_INT 2
29478: ARRAY
29479: PPUSH
29480: LD_VAR 0 2
29484: PPUSH
29485: LD_VAR 0 3
29489: PPUSH
29490: CALL_OW 298
29494: PUSH
29495: LD_INT 6
29497: LESS
29498: IFFALSE 29597
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29500: LD_EXP 113
29504: PUSH
29505: LD_VAR 0 6
29509: ARRAY
29510: PUSH
29511: LD_VAR 0 5
29515: ARRAY
29516: PUSH
29517: LD_INT 1
29519: ARRAY
29520: PPUSH
29521: LD_EXP 113
29525: PUSH
29526: LD_VAR 0 6
29530: ARRAY
29531: PUSH
29532: LD_VAR 0 5
29536: ARRAY
29537: PUSH
29538: LD_INT 2
29540: ARRAY
29541: PPUSH
29542: LD_VAR 0 1
29546: PPUSH
29547: CALL_OW 255
29551: PPUSH
29552: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29556: LD_ADDR_EXP 113
29560: PUSH
29561: LD_EXP 113
29565: PPUSH
29566: LD_VAR 0 6
29570: PPUSH
29571: LD_EXP 113
29575: PUSH
29576: LD_VAR 0 6
29580: ARRAY
29581: PPUSH
29582: LD_VAR 0 5
29586: PPUSH
29587: CALL_OW 3
29591: PPUSH
29592: CALL_OW 1
29596: ST_TO_ADDR
// end ; end ;
29597: GO 29435
29599: POP
29600: POP
// end ;
29601: LD_VAR 0 4
29605: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29606: LD_INT 0
29608: PPUSH
29609: PPUSH
29610: PPUSH
29611: PPUSH
29612: PPUSH
29613: PPUSH
29614: PPUSH
29615: PPUSH
29616: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29617: LD_VAR 0 1
29621: PPUSH
29622: CALL_OW 264
29626: PUSH
29627: LD_INT 81
29629: EQUAL
29630: NOT
29631: PUSH
29632: LD_VAR 0 1
29636: PUSH
29637: LD_EXP 112
29641: IN
29642: NOT
29643: OR
29644: IFFALSE 29648
// exit ;
29646: GO 29970
// index := GetElementIndex ( minersList , unit ) ;
29648: LD_ADDR_VAR 0 6
29652: PUSH
29653: LD_EXP 112
29657: PPUSH
29658: LD_VAR 0 1
29662: PPUSH
29663: CALL 35317 0 2
29667: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29668: LD_ADDR_VAR 0 8
29672: PUSH
29673: LD_EXP 114
29677: PUSH
29678: LD_EXP 113
29682: PUSH
29683: LD_VAR 0 6
29687: ARRAY
29688: MINUS
29689: ST_TO_ADDR
// if not minesFreeAmount then
29690: LD_VAR 0 8
29694: NOT
29695: IFFALSE 29699
// exit ;
29697: GO 29970
// tmp := [ ] ;
29699: LD_ADDR_VAR 0 7
29703: PUSH
29704: EMPTY
29705: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29706: LD_ADDR_VAR 0 5
29710: PUSH
29711: DOUBLE
29712: LD_INT 1
29714: DEC
29715: ST_TO_ADDR
29716: LD_VAR 0 8
29720: PUSH
29721: FOR_TO
29722: IFFALSE 29917
// begin _d := rand ( 0 , 5 ) ;
29724: LD_ADDR_VAR 0 11
29728: PUSH
29729: LD_INT 0
29731: PPUSH
29732: LD_INT 5
29734: PPUSH
29735: CALL_OW 12
29739: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29740: LD_ADDR_VAR 0 12
29744: PUSH
29745: LD_INT 2
29747: PPUSH
29748: LD_INT 6
29750: PPUSH
29751: CALL_OW 12
29755: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29756: LD_ADDR_VAR 0 9
29760: PUSH
29761: LD_VAR 0 2
29765: PPUSH
29766: LD_VAR 0 11
29770: PPUSH
29771: LD_VAR 0 12
29775: PPUSH
29776: CALL_OW 272
29780: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29781: LD_ADDR_VAR 0 10
29785: PUSH
29786: LD_VAR 0 3
29790: PPUSH
29791: LD_VAR 0 11
29795: PPUSH
29796: LD_VAR 0 12
29800: PPUSH
29801: CALL_OW 273
29805: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29806: LD_VAR 0 9
29810: PPUSH
29811: LD_VAR 0 10
29815: PPUSH
29816: CALL_OW 488
29820: PUSH
29821: LD_VAR 0 9
29825: PUSH
29826: LD_VAR 0 10
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_VAR 0 7
29839: IN
29840: NOT
29841: AND
29842: PUSH
29843: LD_VAR 0 9
29847: PPUSH
29848: LD_VAR 0 10
29852: PPUSH
29853: CALL_OW 458
29857: NOT
29858: AND
29859: IFFALSE 29901
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29861: LD_ADDR_VAR 0 7
29865: PUSH
29866: LD_VAR 0 7
29870: PPUSH
29871: LD_VAR 0 7
29875: PUSH
29876: LD_INT 1
29878: PLUS
29879: PPUSH
29880: LD_VAR 0 9
29884: PUSH
29885: LD_VAR 0 10
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PPUSH
29894: CALL_OW 1
29898: ST_TO_ADDR
29899: GO 29915
// i := i - 1 ;
29901: LD_ADDR_VAR 0 5
29905: PUSH
29906: LD_VAR 0 5
29910: PUSH
29911: LD_INT 1
29913: MINUS
29914: ST_TO_ADDR
// end ;
29915: GO 29721
29917: POP
29918: POP
// for i in tmp do
29919: LD_ADDR_VAR 0 5
29923: PUSH
29924: LD_VAR 0 7
29928: PUSH
29929: FOR_IN
29930: IFFALSE 29968
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29932: LD_VAR 0 1
29936: PPUSH
29937: LD_VAR 0 5
29941: PUSH
29942: LD_INT 1
29944: ARRAY
29945: PPUSH
29946: LD_VAR 0 5
29950: PUSH
29951: LD_INT 2
29953: ARRAY
29954: PPUSH
29955: CALL 28914 0 3
29959: NOT
29960: IFFALSE 29966
// exit ;
29962: POP
29963: POP
29964: GO 29970
29966: GO 29929
29968: POP
29969: POP
// end ;
29970: LD_VAR 0 4
29974: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29975: LD_INT 0
29977: PPUSH
29978: PPUSH
29979: PPUSH
29980: PPUSH
29981: PPUSH
29982: PPUSH
29983: PPUSH
// if not GetClass ( unit ) = class_sniper then
29984: LD_VAR 0 1
29988: PPUSH
29989: CALL_OW 257
29993: PUSH
29994: LD_INT 5
29996: EQUAL
29997: NOT
29998: IFFALSE 30002
// exit ;
30000: GO 30390
// dist := 8 ;
30002: LD_ADDR_VAR 0 5
30006: PUSH
30007: LD_INT 8
30009: ST_TO_ADDR
// viewRange := 12 ;
30010: LD_ADDR_VAR 0 7
30014: PUSH
30015: LD_INT 12
30017: ST_TO_ADDR
// side := GetSide ( unit ) ;
30018: LD_ADDR_VAR 0 6
30022: PUSH
30023: LD_VAR 0 1
30027: PPUSH
30028: CALL_OW 255
30032: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30033: LD_INT 61
30035: PPUSH
30036: LD_VAR 0 6
30040: PPUSH
30041: CALL_OW 321
30045: PUSH
30046: LD_INT 2
30048: EQUAL
30049: IFFALSE 30059
// viewRange := 16 ;
30051: LD_ADDR_VAR 0 7
30055: PUSH
30056: LD_INT 16
30058: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30059: LD_VAR 0 1
30063: PPUSH
30064: LD_VAR 0 2
30068: PPUSH
30069: LD_VAR 0 3
30073: PPUSH
30074: CALL_OW 297
30078: PUSH
30079: LD_VAR 0 5
30083: GREATER
30084: IFFALSE 30163
// begin ComMoveXY ( unit , x , y ) ;
30086: LD_VAR 0 1
30090: PPUSH
30091: LD_VAR 0 2
30095: PPUSH
30096: LD_VAR 0 3
30100: PPUSH
30101: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30105: LD_INT 35
30107: PPUSH
30108: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30112: LD_VAR 0 1
30116: PPUSH
30117: LD_VAR 0 2
30121: PPUSH
30122: LD_VAR 0 3
30126: PPUSH
30127: CALL 66672 0 3
30131: NOT
30132: IFFALSE 30136
// exit ;
30134: GO 30390
// until GetDistUnitXY ( unit , x , y ) < dist ;
30136: LD_VAR 0 1
30140: PPUSH
30141: LD_VAR 0 2
30145: PPUSH
30146: LD_VAR 0 3
30150: PPUSH
30151: CALL_OW 297
30155: PUSH
30156: LD_VAR 0 5
30160: LESS
30161: IFFALSE 30105
// end ; ComTurnXY ( unit , x , y ) ;
30163: LD_VAR 0 1
30167: PPUSH
30168: LD_VAR 0 2
30172: PPUSH
30173: LD_VAR 0 3
30177: PPUSH
30178: CALL_OW 118
// wait ( 5 ) ;
30182: LD_INT 5
30184: PPUSH
30185: CALL_OW 67
// _d := GetDir ( unit ) ;
30189: LD_ADDR_VAR 0 10
30193: PUSH
30194: LD_VAR 0 1
30198: PPUSH
30199: CALL_OW 254
30203: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30204: LD_ADDR_VAR 0 8
30208: PUSH
30209: LD_VAR 0 1
30213: PPUSH
30214: CALL_OW 250
30218: PPUSH
30219: LD_VAR 0 10
30223: PPUSH
30224: LD_VAR 0 5
30228: PPUSH
30229: CALL_OW 272
30233: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30234: LD_ADDR_VAR 0 9
30238: PUSH
30239: LD_VAR 0 1
30243: PPUSH
30244: CALL_OW 251
30248: PPUSH
30249: LD_VAR 0 10
30253: PPUSH
30254: LD_VAR 0 5
30258: PPUSH
30259: CALL_OW 273
30263: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30264: LD_VAR 0 8
30268: PPUSH
30269: LD_VAR 0 9
30273: PPUSH
30274: CALL_OW 488
30278: NOT
30279: IFFALSE 30283
// exit ;
30281: GO 30390
// ComAnimCustom ( unit , 1 ) ;
30283: LD_VAR 0 1
30287: PPUSH
30288: LD_INT 1
30290: PPUSH
30291: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30295: LD_VAR 0 8
30299: PPUSH
30300: LD_VAR 0 9
30304: PPUSH
30305: LD_VAR 0 6
30309: PPUSH
30310: LD_VAR 0 7
30314: PPUSH
30315: CALL_OW 330
// repeat wait ( 1 ) ;
30319: LD_INT 1
30321: PPUSH
30322: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30326: LD_VAR 0 1
30330: PPUSH
30331: CALL_OW 316
30335: PUSH
30336: LD_VAR 0 1
30340: PPUSH
30341: CALL_OW 314
30345: OR
30346: PUSH
30347: LD_VAR 0 1
30351: PPUSH
30352: CALL_OW 302
30356: NOT
30357: OR
30358: PUSH
30359: LD_VAR 0 1
30363: PPUSH
30364: CALL_OW 301
30368: OR
30369: IFFALSE 30319
// RemoveSeeing ( _x , _y , side ) ;
30371: LD_VAR 0 8
30375: PPUSH
30376: LD_VAR 0 9
30380: PPUSH
30381: LD_VAR 0 6
30385: PPUSH
30386: CALL_OW 331
// end ; end_of_file
30390: LD_VAR 0 4
30394: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30395: LD_INT 0
30397: PPUSH
30398: PPUSH
// if exist_mode then
30399: LD_VAR 0 2
30403: IFFALSE 30428
// unit := CreateCharacter ( prefix & ident ) else
30405: LD_ADDR_VAR 0 5
30409: PUSH
30410: LD_VAR 0 3
30414: PUSH
30415: LD_VAR 0 1
30419: STR
30420: PPUSH
30421: CALL_OW 34
30425: ST_TO_ADDR
30426: GO 30443
// unit := NewCharacter ( ident ) ;
30428: LD_ADDR_VAR 0 5
30432: PUSH
30433: LD_VAR 0 1
30437: PPUSH
30438: CALL_OW 25
30442: ST_TO_ADDR
// result := unit ;
30443: LD_ADDR_VAR 0 4
30447: PUSH
30448: LD_VAR 0 5
30452: ST_TO_ADDR
// end ;
30453: LD_VAR 0 4
30457: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30458: LD_INT 0
30460: PPUSH
30461: PPUSH
// if not side or not nation then
30462: LD_VAR 0 1
30466: NOT
30467: PUSH
30468: LD_VAR 0 2
30472: NOT
30473: OR
30474: IFFALSE 30478
// exit ;
30476: GO 31246
// case nation of nation_american :
30478: LD_VAR 0 2
30482: PUSH
30483: LD_INT 1
30485: DOUBLE
30486: EQUAL
30487: IFTRUE 30491
30489: GO 30705
30491: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30492: LD_ADDR_VAR 0 4
30496: PUSH
30497: LD_INT 35
30499: PUSH
30500: LD_INT 45
30502: PUSH
30503: LD_INT 46
30505: PUSH
30506: LD_INT 47
30508: PUSH
30509: LD_INT 82
30511: PUSH
30512: LD_INT 83
30514: PUSH
30515: LD_INT 84
30517: PUSH
30518: LD_INT 85
30520: PUSH
30521: LD_INT 86
30523: PUSH
30524: LD_INT 1
30526: PUSH
30527: LD_INT 2
30529: PUSH
30530: LD_INT 6
30532: PUSH
30533: LD_INT 15
30535: PUSH
30536: LD_INT 16
30538: PUSH
30539: LD_INT 7
30541: PUSH
30542: LD_INT 12
30544: PUSH
30545: LD_INT 13
30547: PUSH
30548: LD_INT 10
30550: PUSH
30551: LD_INT 14
30553: PUSH
30554: LD_INT 20
30556: PUSH
30557: LD_INT 21
30559: PUSH
30560: LD_INT 22
30562: PUSH
30563: LD_INT 25
30565: PUSH
30566: LD_INT 32
30568: PUSH
30569: LD_INT 27
30571: PUSH
30572: LD_INT 36
30574: PUSH
30575: LD_INT 69
30577: PUSH
30578: LD_INT 39
30580: PUSH
30581: LD_INT 34
30583: PUSH
30584: LD_INT 40
30586: PUSH
30587: LD_INT 48
30589: PUSH
30590: LD_INT 49
30592: PUSH
30593: LD_INT 50
30595: PUSH
30596: LD_INT 51
30598: PUSH
30599: LD_INT 52
30601: PUSH
30602: LD_INT 53
30604: PUSH
30605: LD_INT 54
30607: PUSH
30608: LD_INT 55
30610: PUSH
30611: LD_INT 56
30613: PUSH
30614: LD_INT 57
30616: PUSH
30617: LD_INT 58
30619: PUSH
30620: LD_INT 59
30622: PUSH
30623: LD_INT 60
30625: PUSH
30626: LD_INT 61
30628: PUSH
30629: LD_INT 62
30631: PUSH
30632: LD_INT 80
30634: PUSH
30635: LD_INT 82
30637: PUSH
30638: LD_INT 83
30640: PUSH
30641: LD_INT 84
30643: PUSH
30644: LD_INT 85
30646: PUSH
30647: LD_INT 86
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: ST_TO_ADDR
30703: GO 31170
30705: LD_INT 2
30707: DOUBLE
30708: EQUAL
30709: IFTRUE 30713
30711: GO 30939
30713: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30714: LD_ADDR_VAR 0 4
30718: PUSH
30719: LD_INT 35
30721: PUSH
30722: LD_INT 45
30724: PUSH
30725: LD_INT 46
30727: PUSH
30728: LD_INT 47
30730: PUSH
30731: LD_INT 82
30733: PUSH
30734: LD_INT 83
30736: PUSH
30737: LD_INT 84
30739: PUSH
30740: LD_INT 85
30742: PUSH
30743: LD_INT 87
30745: PUSH
30746: LD_INT 70
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: LD_INT 11
30754: PUSH
30755: LD_INT 3
30757: PUSH
30758: LD_INT 4
30760: PUSH
30761: LD_INT 5
30763: PUSH
30764: LD_INT 6
30766: PUSH
30767: LD_INT 15
30769: PUSH
30770: LD_INT 18
30772: PUSH
30773: LD_INT 7
30775: PUSH
30776: LD_INT 17
30778: PUSH
30779: LD_INT 8
30781: PUSH
30782: LD_INT 20
30784: PUSH
30785: LD_INT 21
30787: PUSH
30788: LD_INT 22
30790: PUSH
30791: LD_INT 72
30793: PUSH
30794: LD_INT 26
30796: PUSH
30797: LD_INT 69
30799: PUSH
30800: LD_INT 39
30802: PUSH
30803: LD_INT 40
30805: PUSH
30806: LD_INT 41
30808: PUSH
30809: LD_INT 42
30811: PUSH
30812: LD_INT 43
30814: PUSH
30815: LD_INT 48
30817: PUSH
30818: LD_INT 49
30820: PUSH
30821: LD_INT 50
30823: PUSH
30824: LD_INT 51
30826: PUSH
30827: LD_INT 52
30829: PUSH
30830: LD_INT 53
30832: PUSH
30833: LD_INT 54
30835: PUSH
30836: LD_INT 55
30838: PUSH
30839: LD_INT 56
30841: PUSH
30842: LD_INT 60
30844: PUSH
30845: LD_INT 61
30847: PUSH
30848: LD_INT 62
30850: PUSH
30851: LD_INT 66
30853: PUSH
30854: LD_INT 67
30856: PUSH
30857: LD_INT 68
30859: PUSH
30860: LD_INT 81
30862: PUSH
30863: LD_INT 82
30865: PUSH
30866: LD_INT 83
30868: PUSH
30869: LD_INT 84
30871: PUSH
30872: LD_INT 85
30874: PUSH
30875: LD_INT 87
30877: PUSH
30878: LD_INT 88
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: ST_TO_ADDR
30937: GO 31170
30939: LD_INT 3
30941: DOUBLE
30942: EQUAL
30943: IFTRUE 30947
30945: GO 31169
30947: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30948: LD_ADDR_VAR 0 4
30952: PUSH
30953: LD_INT 46
30955: PUSH
30956: LD_INT 47
30958: PUSH
30959: LD_INT 1
30961: PUSH
30962: LD_INT 2
30964: PUSH
30965: LD_INT 82
30967: PUSH
30968: LD_INT 83
30970: PUSH
30971: LD_INT 84
30973: PUSH
30974: LD_INT 85
30976: PUSH
30977: LD_INT 86
30979: PUSH
30980: LD_INT 11
30982: PUSH
30983: LD_INT 9
30985: PUSH
30986: LD_INT 20
30988: PUSH
30989: LD_INT 19
30991: PUSH
30992: LD_INT 21
30994: PUSH
30995: LD_INT 24
30997: PUSH
30998: LD_INT 22
31000: PUSH
31001: LD_INT 25
31003: PUSH
31004: LD_INT 28
31006: PUSH
31007: LD_INT 29
31009: PUSH
31010: LD_INT 30
31012: PUSH
31013: LD_INT 31
31015: PUSH
31016: LD_INT 37
31018: PUSH
31019: LD_INT 38
31021: PUSH
31022: LD_INT 32
31024: PUSH
31025: LD_INT 27
31027: PUSH
31028: LD_INT 33
31030: PUSH
31031: LD_INT 69
31033: PUSH
31034: LD_INT 39
31036: PUSH
31037: LD_INT 34
31039: PUSH
31040: LD_INT 40
31042: PUSH
31043: LD_INT 71
31045: PUSH
31046: LD_INT 23
31048: PUSH
31049: LD_INT 44
31051: PUSH
31052: LD_INT 48
31054: PUSH
31055: LD_INT 49
31057: PUSH
31058: LD_INT 50
31060: PUSH
31061: LD_INT 51
31063: PUSH
31064: LD_INT 52
31066: PUSH
31067: LD_INT 53
31069: PUSH
31070: LD_INT 54
31072: PUSH
31073: LD_INT 55
31075: PUSH
31076: LD_INT 56
31078: PUSH
31079: LD_INT 57
31081: PUSH
31082: LD_INT 58
31084: PUSH
31085: LD_INT 59
31087: PUSH
31088: LD_INT 63
31090: PUSH
31091: LD_INT 64
31093: PUSH
31094: LD_INT 65
31096: PUSH
31097: LD_INT 82
31099: PUSH
31100: LD_INT 83
31102: PUSH
31103: LD_INT 84
31105: PUSH
31106: LD_INT 85
31108: PUSH
31109: LD_INT 86
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: ST_TO_ADDR
31167: GO 31170
31169: POP
// if state > - 1 and state < 3 then
31170: LD_VAR 0 3
31174: PUSH
31175: LD_INT 1
31177: NEG
31178: GREATER
31179: PUSH
31180: LD_VAR 0 3
31184: PUSH
31185: LD_INT 3
31187: LESS
31188: AND
31189: IFFALSE 31246
// for i in result do
31191: LD_ADDR_VAR 0 5
31195: PUSH
31196: LD_VAR 0 4
31200: PUSH
31201: FOR_IN
31202: IFFALSE 31244
// if GetTech ( i , side ) <> state then
31204: LD_VAR 0 5
31208: PPUSH
31209: LD_VAR 0 1
31213: PPUSH
31214: CALL_OW 321
31218: PUSH
31219: LD_VAR 0 3
31223: NONEQUAL
31224: IFFALSE 31242
// result := result diff i ;
31226: LD_ADDR_VAR 0 4
31230: PUSH
31231: LD_VAR 0 4
31235: PUSH
31236: LD_VAR 0 5
31240: DIFF
31241: ST_TO_ADDR
31242: GO 31201
31244: POP
31245: POP
// end ;
31246: LD_VAR 0 4
31250: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31251: LD_INT 0
31253: PPUSH
31254: PPUSH
31255: PPUSH
// result := true ;
31256: LD_ADDR_VAR 0 3
31260: PUSH
31261: LD_INT 1
31263: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31264: LD_ADDR_VAR 0 5
31268: PUSH
31269: LD_VAR 0 2
31273: PPUSH
31274: CALL_OW 480
31278: ST_TO_ADDR
// if not tmp then
31279: LD_VAR 0 5
31283: NOT
31284: IFFALSE 31288
// exit ;
31286: GO 31337
// for i in tmp do
31288: LD_ADDR_VAR 0 4
31292: PUSH
31293: LD_VAR 0 5
31297: PUSH
31298: FOR_IN
31299: IFFALSE 31335
// if GetTech ( i , side ) <> state_researched then
31301: LD_VAR 0 4
31305: PPUSH
31306: LD_VAR 0 1
31310: PPUSH
31311: CALL_OW 321
31315: PUSH
31316: LD_INT 2
31318: NONEQUAL
31319: IFFALSE 31333
// begin result := false ;
31321: LD_ADDR_VAR 0 3
31325: PUSH
31326: LD_INT 0
31328: ST_TO_ADDR
// exit ;
31329: POP
31330: POP
31331: GO 31337
// end ;
31333: GO 31298
31335: POP
31336: POP
// end ;
31337: LD_VAR 0 3
31341: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31342: LD_INT 0
31344: PPUSH
31345: PPUSH
31346: PPUSH
31347: PPUSH
31348: PPUSH
31349: PPUSH
31350: PPUSH
31351: PPUSH
31352: PPUSH
31353: PPUSH
31354: PPUSH
31355: PPUSH
31356: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31357: LD_VAR 0 1
31361: NOT
31362: PUSH
31363: LD_VAR 0 1
31367: PPUSH
31368: CALL_OW 257
31372: PUSH
31373: LD_INT 9
31375: NONEQUAL
31376: OR
31377: IFFALSE 31381
// exit ;
31379: GO 31954
// side := GetSide ( unit ) ;
31381: LD_ADDR_VAR 0 9
31385: PUSH
31386: LD_VAR 0 1
31390: PPUSH
31391: CALL_OW 255
31395: ST_TO_ADDR
// tech_space := tech_spacanom ;
31396: LD_ADDR_VAR 0 12
31400: PUSH
31401: LD_INT 29
31403: ST_TO_ADDR
// tech_time := tech_taurad ;
31404: LD_ADDR_VAR 0 13
31408: PUSH
31409: LD_INT 28
31411: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31412: LD_ADDR_VAR 0 11
31416: PUSH
31417: LD_VAR 0 1
31421: PPUSH
31422: CALL_OW 310
31426: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31427: LD_VAR 0 11
31431: PPUSH
31432: CALL_OW 247
31436: PUSH
31437: LD_INT 2
31439: EQUAL
31440: IFFALSE 31444
// exit ;
31442: GO 31954
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31444: LD_ADDR_VAR 0 8
31448: PUSH
31449: LD_INT 81
31451: PUSH
31452: LD_VAR 0 9
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 3
31463: PUSH
31464: LD_INT 21
31466: PUSH
31467: LD_INT 3
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PPUSH
31482: CALL_OW 69
31486: ST_TO_ADDR
// if not tmp then
31487: LD_VAR 0 8
31491: NOT
31492: IFFALSE 31496
// exit ;
31494: GO 31954
// if in_unit then
31496: LD_VAR 0 11
31500: IFFALSE 31524
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31502: LD_ADDR_VAR 0 10
31506: PUSH
31507: LD_VAR 0 8
31511: PPUSH
31512: LD_VAR 0 11
31516: PPUSH
31517: CALL_OW 74
31521: ST_TO_ADDR
31522: GO 31544
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31524: LD_ADDR_VAR 0 10
31528: PUSH
31529: LD_VAR 0 8
31533: PPUSH
31534: LD_VAR 0 1
31538: PPUSH
31539: CALL_OW 74
31543: ST_TO_ADDR
// if not enemy then
31544: LD_VAR 0 10
31548: NOT
31549: IFFALSE 31553
// exit ;
31551: GO 31954
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31553: LD_VAR 0 11
31557: PUSH
31558: LD_VAR 0 11
31562: PPUSH
31563: LD_VAR 0 10
31567: PPUSH
31568: CALL_OW 296
31572: PUSH
31573: LD_INT 13
31575: GREATER
31576: AND
31577: PUSH
31578: LD_VAR 0 1
31582: PPUSH
31583: LD_VAR 0 10
31587: PPUSH
31588: CALL_OW 296
31592: PUSH
31593: LD_INT 12
31595: GREATER
31596: OR
31597: IFFALSE 31601
// exit ;
31599: GO 31954
// missile := [ 1 ] ;
31601: LD_ADDR_VAR 0 14
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: EMPTY
31610: LIST
31611: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31612: LD_VAR 0 9
31616: PPUSH
31617: LD_VAR 0 12
31621: PPUSH
31622: CALL_OW 325
31626: IFFALSE 31655
// missile := Replace ( missile , missile + 1 , 2 ) ;
31628: LD_ADDR_VAR 0 14
31632: PUSH
31633: LD_VAR 0 14
31637: PPUSH
31638: LD_VAR 0 14
31642: PUSH
31643: LD_INT 1
31645: PLUS
31646: PPUSH
31647: LD_INT 2
31649: PPUSH
31650: CALL_OW 1
31654: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31655: LD_VAR 0 9
31659: PPUSH
31660: LD_VAR 0 13
31664: PPUSH
31665: CALL_OW 325
31669: PUSH
31670: LD_VAR 0 10
31674: PPUSH
31675: CALL_OW 255
31679: PPUSH
31680: LD_VAR 0 13
31684: PPUSH
31685: CALL_OW 325
31689: NOT
31690: AND
31691: IFFALSE 31720
// missile := Replace ( missile , missile + 1 , 3 ) ;
31693: LD_ADDR_VAR 0 14
31697: PUSH
31698: LD_VAR 0 14
31702: PPUSH
31703: LD_VAR 0 14
31707: PUSH
31708: LD_INT 1
31710: PLUS
31711: PPUSH
31712: LD_INT 3
31714: PPUSH
31715: CALL_OW 1
31719: ST_TO_ADDR
// if missile < 2 then
31720: LD_VAR 0 14
31724: PUSH
31725: LD_INT 2
31727: LESS
31728: IFFALSE 31732
// exit ;
31730: GO 31954
// x := GetX ( enemy ) ;
31732: LD_ADDR_VAR 0 4
31736: PUSH
31737: LD_VAR 0 10
31741: PPUSH
31742: CALL_OW 250
31746: ST_TO_ADDR
// y := GetY ( enemy ) ;
31747: LD_ADDR_VAR 0 5
31751: PUSH
31752: LD_VAR 0 10
31756: PPUSH
31757: CALL_OW 251
31761: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31762: LD_ADDR_VAR 0 6
31766: PUSH
31767: LD_VAR 0 4
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PPUSH
31776: LD_INT 1
31778: PPUSH
31779: CALL_OW 12
31783: PLUS
31784: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31785: LD_ADDR_VAR 0 7
31789: PUSH
31790: LD_VAR 0 5
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: PPUSH
31799: LD_INT 1
31801: PPUSH
31802: CALL_OW 12
31806: PLUS
31807: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31808: LD_VAR 0 6
31812: PPUSH
31813: LD_VAR 0 7
31817: PPUSH
31818: CALL_OW 488
31822: NOT
31823: IFFALSE 31845
// begin _x := x ;
31825: LD_ADDR_VAR 0 6
31829: PUSH
31830: LD_VAR 0 4
31834: ST_TO_ADDR
// _y := y ;
31835: LD_ADDR_VAR 0 7
31839: PUSH
31840: LD_VAR 0 5
31844: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31845: LD_ADDR_VAR 0 3
31849: PUSH
31850: LD_INT 1
31852: PPUSH
31853: LD_VAR 0 14
31857: PPUSH
31858: CALL_OW 12
31862: ST_TO_ADDR
// case i of 1 :
31863: LD_VAR 0 3
31867: PUSH
31868: LD_INT 1
31870: DOUBLE
31871: EQUAL
31872: IFTRUE 31876
31874: GO 31893
31876: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31877: LD_VAR 0 1
31881: PPUSH
31882: LD_VAR 0 10
31886: PPUSH
31887: CALL_OW 115
31891: GO 31954
31893: LD_INT 2
31895: DOUBLE
31896: EQUAL
31897: IFTRUE 31901
31899: GO 31923
31901: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31902: LD_VAR 0 1
31906: PPUSH
31907: LD_VAR 0 6
31911: PPUSH
31912: LD_VAR 0 7
31916: PPUSH
31917: CALL_OW 153
31921: GO 31954
31923: LD_INT 3
31925: DOUBLE
31926: EQUAL
31927: IFTRUE 31931
31929: GO 31953
31931: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31932: LD_VAR 0 1
31936: PPUSH
31937: LD_VAR 0 6
31941: PPUSH
31942: LD_VAR 0 7
31946: PPUSH
31947: CALL_OW 154
31951: GO 31954
31953: POP
// end ;
31954: LD_VAR 0 2
31958: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31959: LD_INT 0
31961: PPUSH
31962: PPUSH
31963: PPUSH
31964: PPUSH
31965: PPUSH
31966: PPUSH
// if not unit or not building then
31967: LD_VAR 0 1
31971: NOT
31972: PUSH
31973: LD_VAR 0 2
31977: NOT
31978: OR
31979: IFFALSE 31983
// exit ;
31981: GO 32141
// x := GetX ( building ) ;
31983: LD_ADDR_VAR 0 5
31987: PUSH
31988: LD_VAR 0 2
31992: PPUSH
31993: CALL_OW 250
31997: ST_TO_ADDR
// y := GetY ( building ) ;
31998: LD_ADDR_VAR 0 6
32002: PUSH
32003: LD_VAR 0 2
32007: PPUSH
32008: CALL_OW 251
32012: ST_TO_ADDR
// for i = 0 to 5 do
32013: LD_ADDR_VAR 0 4
32017: PUSH
32018: DOUBLE
32019: LD_INT 0
32021: DEC
32022: ST_TO_ADDR
32023: LD_INT 5
32025: PUSH
32026: FOR_TO
32027: IFFALSE 32139
// begin _x := ShiftX ( x , i , 3 ) ;
32029: LD_ADDR_VAR 0 7
32033: PUSH
32034: LD_VAR 0 5
32038: PPUSH
32039: LD_VAR 0 4
32043: PPUSH
32044: LD_INT 3
32046: PPUSH
32047: CALL_OW 272
32051: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32052: LD_ADDR_VAR 0 8
32056: PUSH
32057: LD_VAR 0 6
32061: PPUSH
32062: LD_VAR 0 4
32066: PPUSH
32067: LD_INT 3
32069: PPUSH
32070: CALL_OW 273
32074: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32075: LD_VAR 0 7
32079: PPUSH
32080: LD_VAR 0 8
32084: PPUSH
32085: CALL_OW 488
32089: NOT
32090: IFFALSE 32094
// continue ;
32092: GO 32026
// if HexInfo ( _x , _y ) = 0 then
32094: LD_VAR 0 7
32098: PPUSH
32099: LD_VAR 0 8
32103: PPUSH
32104: CALL_OW 428
32108: PUSH
32109: LD_INT 0
32111: EQUAL
32112: IFFALSE 32137
// begin ComMoveXY ( unit , _x , _y ) ;
32114: LD_VAR 0 1
32118: PPUSH
32119: LD_VAR 0 7
32123: PPUSH
32124: LD_VAR 0 8
32128: PPUSH
32129: CALL_OW 111
// exit ;
32133: POP
32134: POP
32135: GO 32141
// end ; end ;
32137: GO 32026
32139: POP
32140: POP
// end ;
32141: LD_VAR 0 3
32145: RET
// export function ScanBase ( side , base_area ) ; begin
32146: LD_INT 0
32148: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32149: LD_ADDR_VAR 0 3
32153: PUSH
32154: LD_VAR 0 2
32158: PPUSH
32159: LD_INT 81
32161: PUSH
32162: LD_VAR 0 1
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PPUSH
32171: CALL_OW 70
32175: ST_TO_ADDR
// end ;
32176: LD_VAR 0 3
32180: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32181: LD_INT 0
32183: PPUSH
32184: PPUSH
32185: PPUSH
32186: PPUSH
// result := false ;
32187: LD_ADDR_VAR 0 2
32191: PUSH
32192: LD_INT 0
32194: ST_TO_ADDR
// side := GetSide ( unit ) ;
32195: LD_ADDR_VAR 0 3
32199: PUSH
32200: LD_VAR 0 1
32204: PPUSH
32205: CALL_OW 255
32209: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32210: LD_ADDR_VAR 0 4
32214: PUSH
32215: LD_VAR 0 1
32219: PPUSH
32220: CALL_OW 248
32224: ST_TO_ADDR
// case nat of 1 :
32225: LD_VAR 0 4
32229: PUSH
32230: LD_INT 1
32232: DOUBLE
32233: EQUAL
32234: IFTRUE 32238
32236: GO 32249
32238: POP
// tech := tech_lassight ; 2 :
32239: LD_ADDR_VAR 0 5
32243: PUSH
32244: LD_INT 12
32246: ST_TO_ADDR
32247: GO 32288
32249: LD_INT 2
32251: DOUBLE
32252: EQUAL
32253: IFTRUE 32257
32255: GO 32268
32257: POP
// tech := tech_mortar ; 3 :
32258: LD_ADDR_VAR 0 5
32262: PUSH
32263: LD_INT 41
32265: ST_TO_ADDR
32266: GO 32288
32268: LD_INT 3
32270: DOUBLE
32271: EQUAL
32272: IFTRUE 32276
32274: GO 32287
32276: POP
// tech := tech_bazooka ; end ;
32277: LD_ADDR_VAR 0 5
32281: PUSH
32282: LD_INT 44
32284: ST_TO_ADDR
32285: GO 32288
32287: POP
// if Researched ( side , tech ) then
32288: LD_VAR 0 3
32292: PPUSH
32293: LD_VAR 0 5
32297: PPUSH
32298: CALL_OW 325
32302: IFFALSE 32329
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32304: LD_ADDR_VAR 0 2
32308: PUSH
32309: LD_INT 5
32311: PUSH
32312: LD_INT 8
32314: PUSH
32315: LD_INT 9
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: LIST
32322: PUSH
32323: LD_VAR 0 4
32327: ARRAY
32328: ST_TO_ADDR
// end ;
32329: LD_VAR 0 2
32333: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32334: LD_INT 0
32336: PPUSH
32337: PPUSH
32338: PPUSH
// if not mines then
32339: LD_VAR 0 2
32343: NOT
32344: IFFALSE 32348
// exit ;
32346: GO 32492
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32348: LD_ADDR_VAR 0 5
32352: PUSH
32353: LD_INT 81
32355: PUSH
32356: LD_VAR 0 1
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 3
32367: PUSH
32368: LD_INT 21
32370: PUSH
32371: LD_INT 3
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PPUSH
32386: CALL_OW 69
32390: ST_TO_ADDR
// for i in mines do
32391: LD_ADDR_VAR 0 4
32395: PUSH
32396: LD_VAR 0 2
32400: PUSH
32401: FOR_IN
32402: IFFALSE 32490
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32404: LD_VAR 0 4
32408: PUSH
32409: LD_INT 1
32411: ARRAY
32412: PPUSH
32413: LD_VAR 0 4
32417: PUSH
32418: LD_INT 2
32420: ARRAY
32421: PPUSH
32422: CALL_OW 458
32426: NOT
32427: IFFALSE 32431
// continue ;
32429: GO 32401
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32431: LD_VAR 0 4
32435: PUSH
32436: LD_INT 1
32438: ARRAY
32439: PPUSH
32440: LD_VAR 0 4
32444: PUSH
32445: LD_INT 2
32447: ARRAY
32448: PPUSH
32449: CALL_OW 428
32453: PUSH
32454: LD_VAR 0 5
32458: IN
32459: IFFALSE 32488
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32461: LD_VAR 0 4
32465: PUSH
32466: LD_INT 1
32468: ARRAY
32469: PPUSH
32470: LD_VAR 0 4
32474: PUSH
32475: LD_INT 2
32477: ARRAY
32478: PPUSH
32479: LD_VAR 0 1
32483: PPUSH
32484: CALL_OW 456
// end ;
32488: GO 32401
32490: POP
32491: POP
// end ;
32492: LD_VAR 0 3
32496: RET
// export function Count ( array ) ; var i ; begin
32497: LD_INT 0
32499: PPUSH
32500: PPUSH
// result := 0 ;
32501: LD_ADDR_VAR 0 2
32505: PUSH
32506: LD_INT 0
32508: ST_TO_ADDR
// for i in array do
32509: LD_ADDR_VAR 0 3
32513: PUSH
32514: LD_VAR 0 1
32518: PUSH
32519: FOR_IN
32520: IFFALSE 32544
// if i then
32522: LD_VAR 0 3
32526: IFFALSE 32542
// result := result + 1 ;
32528: LD_ADDR_VAR 0 2
32532: PUSH
32533: LD_VAR 0 2
32537: PUSH
32538: LD_INT 1
32540: PLUS
32541: ST_TO_ADDR
32542: GO 32519
32544: POP
32545: POP
// end ;
32546: LD_VAR 0 2
32550: RET
// export function IsEmpty ( building ) ; begin
32551: LD_INT 0
32553: PPUSH
// if not building then
32554: LD_VAR 0 1
32558: NOT
32559: IFFALSE 32563
// exit ;
32561: GO 32606
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32563: LD_ADDR_VAR 0 2
32567: PUSH
32568: LD_VAR 0 1
32572: PUSH
32573: LD_INT 22
32575: PUSH
32576: LD_VAR 0 1
32580: PPUSH
32581: CALL_OW 255
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 58
32592: PUSH
32593: EMPTY
32594: LIST
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PPUSH
32600: CALL_OW 69
32604: IN
32605: ST_TO_ADDR
// end ;
32606: LD_VAR 0 2
32610: RET
// export function IsNotFull ( building ) ; var places ; begin
32611: LD_INT 0
32613: PPUSH
32614: PPUSH
// if not building then
32615: LD_VAR 0 1
32619: NOT
32620: IFFALSE 32624
// exit ;
32622: GO 32795
// result := false ;
32624: LD_ADDR_VAR 0 2
32628: PUSH
32629: LD_INT 0
32631: ST_TO_ADDR
// places := 0 ;
32632: LD_ADDR_VAR 0 3
32636: PUSH
32637: LD_INT 0
32639: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32640: LD_VAR 0 1
32644: PPUSH
32645: CALL_OW 266
32649: PUSH
32650: LD_INT 0
32652: DOUBLE
32653: EQUAL
32654: IFTRUE 32712
32656: LD_INT 1
32658: DOUBLE
32659: EQUAL
32660: IFTRUE 32712
32662: LD_INT 6
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32712
32668: LD_INT 7
32670: DOUBLE
32671: EQUAL
32672: IFTRUE 32712
32674: LD_INT 8
32676: DOUBLE
32677: EQUAL
32678: IFTRUE 32712
32680: LD_INT 4
32682: DOUBLE
32683: EQUAL
32684: IFTRUE 32712
32686: LD_INT 5
32688: DOUBLE
32689: EQUAL
32690: IFTRUE 32712
32692: LD_INT 2
32694: DOUBLE
32695: EQUAL
32696: IFTRUE 32712
32698: LD_INT 3
32700: DOUBLE
32701: EQUAL
32702: IFTRUE 32712
32704: LD_INT 35
32706: DOUBLE
32707: EQUAL
32708: IFTRUE 32712
32710: GO 32723
32712: POP
// places := 6 ; b_bunker , b_breastwork :
32713: LD_ADDR_VAR 0 3
32717: PUSH
32718: LD_INT 6
32720: ST_TO_ADDR
32721: GO 32768
32723: LD_INT 32
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32737
32729: LD_INT 31
32731: DOUBLE
32732: EQUAL
32733: IFTRUE 32737
32735: GO 32748
32737: POP
// places := 1 ; b_control_tower :
32738: LD_ADDR_VAR 0 3
32742: PUSH
32743: LD_INT 1
32745: ST_TO_ADDR
32746: GO 32768
32748: LD_INT 36
32750: DOUBLE
32751: EQUAL
32752: IFTRUE 32756
32754: GO 32767
32756: POP
// places := 3 ; end ;
32757: LD_ADDR_VAR 0 3
32761: PUSH
32762: LD_INT 3
32764: ST_TO_ADDR
32765: GO 32768
32767: POP
// if places then
32768: LD_VAR 0 3
32772: IFFALSE 32795
// result := UnitsInside ( building ) < places ;
32774: LD_ADDR_VAR 0 2
32778: PUSH
32779: LD_VAR 0 1
32783: PPUSH
32784: CALL_OW 313
32788: PUSH
32789: LD_VAR 0 3
32793: LESS
32794: ST_TO_ADDR
// end ;
32795: LD_VAR 0 2
32799: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32800: LD_INT 0
32802: PPUSH
32803: PPUSH
32804: PPUSH
32805: PPUSH
// tmp := [ ] ;
32806: LD_ADDR_VAR 0 3
32810: PUSH
32811: EMPTY
32812: ST_TO_ADDR
// list := [ ] ;
32813: LD_ADDR_VAR 0 5
32817: PUSH
32818: EMPTY
32819: ST_TO_ADDR
// for i = 16 to 25 do
32820: LD_ADDR_VAR 0 4
32824: PUSH
32825: DOUBLE
32826: LD_INT 16
32828: DEC
32829: ST_TO_ADDR
32830: LD_INT 25
32832: PUSH
32833: FOR_TO
32834: IFFALSE 32907
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32836: LD_ADDR_VAR 0 3
32840: PUSH
32841: LD_VAR 0 3
32845: PUSH
32846: LD_INT 22
32848: PUSH
32849: LD_VAR 0 1
32853: PPUSH
32854: CALL_OW 255
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 91
32865: PUSH
32866: LD_VAR 0 1
32870: PUSH
32871: LD_INT 6
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 30
32881: PUSH
32882: LD_VAR 0 4
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: LIST
32895: PUSH
32896: EMPTY
32897: LIST
32898: PPUSH
32899: CALL_OW 69
32903: ADD
32904: ST_TO_ADDR
32905: GO 32833
32907: POP
32908: POP
// for i = 1 to tmp do
32909: LD_ADDR_VAR 0 4
32913: PUSH
32914: DOUBLE
32915: LD_INT 1
32917: DEC
32918: ST_TO_ADDR
32919: LD_VAR 0 3
32923: PUSH
32924: FOR_TO
32925: IFFALSE 33013
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32927: LD_ADDR_VAR 0 5
32931: PUSH
32932: LD_VAR 0 5
32936: PUSH
32937: LD_VAR 0 3
32941: PUSH
32942: LD_VAR 0 4
32946: ARRAY
32947: PPUSH
32948: CALL_OW 266
32952: PUSH
32953: LD_VAR 0 3
32957: PUSH
32958: LD_VAR 0 4
32962: ARRAY
32963: PPUSH
32964: CALL_OW 250
32968: PUSH
32969: LD_VAR 0 3
32973: PUSH
32974: LD_VAR 0 4
32978: ARRAY
32979: PPUSH
32980: CALL_OW 251
32984: PUSH
32985: LD_VAR 0 3
32989: PUSH
32990: LD_VAR 0 4
32994: ARRAY
32995: PPUSH
32996: CALL_OW 254
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: PUSH
33007: EMPTY
33008: LIST
33009: ADD
33010: ST_TO_ADDR
33011: GO 32924
33013: POP
33014: POP
// result := list ;
33015: LD_ADDR_VAR 0 2
33019: PUSH
33020: LD_VAR 0 5
33024: ST_TO_ADDR
// end ;
33025: LD_VAR 0 2
33029: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33030: LD_INT 0
33032: PPUSH
33033: PPUSH
33034: PPUSH
33035: PPUSH
33036: PPUSH
33037: PPUSH
33038: PPUSH
// if not factory then
33039: LD_VAR 0 1
33043: NOT
33044: IFFALSE 33048
// exit ;
33046: GO 33641
// if control = control_apeman then
33048: LD_VAR 0 4
33052: PUSH
33053: LD_INT 5
33055: EQUAL
33056: IFFALSE 33165
// begin tmp := UnitsInside ( factory ) ;
33058: LD_ADDR_VAR 0 8
33062: PUSH
33063: LD_VAR 0 1
33067: PPUSH
33068: CALL_OW 313
33072: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33073: LD_VAR 0 8
33077: PPUSH
33078: LD_INT 25
33080: PUSH
33081: LD_INT 12
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PPUSH
33088: CALL_OW 72
33092: NOT
33093: IFFALSE 33103
// control := control_manual ;
33095: LD_ADDR_VAR 0 4
33099: PUSH
33100: LD_INT 1
33102: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33103: LD_ADDR_VAR 0 8
33107: PUSH
33108: LD_VAR 0 1
33112: PPUSH
33113: CALL 32800 0 1
33117: ST_TO_ADDR
// if tmp then
33118: LD_VAR 0 8
33122: IFFALSE 33165
// begin for i in tmp do
33124: LD_ADDR_VAR 0 7
33128: PUSH
33129: LD_VAR 0 8
33133: PUSH
33134: FOR_IN
33135: IFFALSE 33163
// if i [ 1 ] = b_ext_radio then
33137: LD_VAR 0 7
33141: PUSH
33142: LD_INT 1
33144: ARRAY
33145: PUSH
33146: LD_INT 22
33148: EQUAL
33149: IFFALSE 33161
// begin control := control_remote ;
33151: LD_ADDR_VAR 0 4
33155: PUSH
33156: LD_INT 2
33158: ST_TO_ADDR
// break ;
33159: GO 33163
// end ;
33161: GO 33134
33163: POP
33164: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33165: LD_VAR 0 1
33169: PPUSH
33170: LD_VAR 0 2
33174: PPUSH
33175: LD_VAR 0 3
33179: PPUSH
33180: LD_VAR 0 4
33184: PPUSH
33185: LD_VAR 0 5
33189: PPUSH
33190: CALL_OW 448
33194: IFFALSE 33229
// begin result := [ chassis , engine , control , weapon ] ;
33196: LD_ADDR_VAR 0 6
33200: PUSH
33201: LD_VAR 0 2
33205: PUSH
33206: LD_VAR 0 3
33210: PUSH
33211: LD_VAR 0 4
33215: PUSH
33216: LD_VAR 0 5
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: ST_TO_ADDR
// exit ;
33227: GO 33641
// end ; _chassis := AvailableChassisList ( factory ) ;
33229: LD_ADDR_VAR 0 9
33233: PUSH
33234: LD_VAR 0 1
33238: PPUSH
33239: CALL_OW 475
33243: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33244: LD_ADDR_VAR 0 11
33248: PUSH
33249: LD_VAR 0 1
33253: PPUSH
33254: CALL_OW 476
33258: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33259: LD_ADDR_VAR 0 12
33263: PUSH
33264: LD_VAR 0 1
33268: PPUSH
33269: CALL_OW 477
33273: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33274: LD_ADDR_VAR 0 10
33278: PUSH
33279: LD_VAR 0 1
33283: PPUSH
33284: CALL_OW 478
33288: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33289: LD_VAR 0 9
33293: NOT
33294: PUSH
33295: LD_VAR 0 11
33299: NOT
33300: OR
33301: PUSH
33302: LD_VAR 0 12
33306: NOT
33307: OR
33308: PUSH
33309: LD_VAR 0 10
33313: NOT
33314: OR
33315: IFFALSE 33350
// begin result := [ chassis , engine , control , weapon ] ;
33317: LD_ADDR_VAR 0 6
33321: PUSH
33322: LD_VAR 0 2
33326: PUSH
33327: LD_VAR 0 3
33331: PUSH
33332: LD_VAR 0 4
33336: PUSH
33337: LD_VAR 0 5
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: ST_TO_ADDR
// exit ;
33348: GO 33641
// end ; if not chassis in _chassis then
33350: LD_VAR 0 2
33354: PUSH
33355: LD_VAR 0 9
33359: IN
33360: NOT
33361: IFFALSE 33387
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33363: LD_ADDR_VAR 0 2
33367: PUSH
33368: LD_VAR 0 9
33372: PUSH
33373: LD_INT 1
33375: PPUSH
33376: LD_VAR 0 9
33380: PPUSH
33381: CALL_OW 12
33385: ARRAY
33386: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33387: LD_VAR 0 2
33391: PPUSH
33392: LD_VAR 0 3
33396: PPUSH
33397: CALL 33646 0 2
33401: NOT
33402: IFFALSE 33461
// repeat engine := _engine [ 1 ] ;
33404: LD_ADDR_VAR 0 3
33408: PUSH
33409: LD_VAR 0 11
33413: PUSH
33414: LD_INT 1
33416: ARRAY
33417: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33418: LD_ADDR_VAR 0 11
33422: PUSH
33423: LD_VAR 0 11
33427: PPUSH
33428: LD_INT 1
33430: PPUSH
33431: CALL_OW 3
33435: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33436: LD_VAR 0 2
33440: PPUSH
33441: LD_VAR 0 3
33445: PPUSH
33446: CALL 33646 0 2
33450: PUSH
33451: LD_VAR 0 11
33455: PUSH
33456: EMPTY
33457: EQUAL
33458: OR
33459: IFFALSE 33404
// if not control in _control then
33461: LD_VAR 0 4
33465: PUSH
33466: LD_VAR 0 12
33470: IN
33471: NOT
33472: IFFALSE 33498
// control := _control [ rand ( 1 , _control ) ] ;
33474: LD_ADDR_VAR 0 4
33478: PUSH
33479: LD_VAR 0 12
33483: PUSH
33484: LD_INT 1
33486: PPUSH
33487: LD_VAR 0 12
33491: PPUSH
33492: CALL_OW 12
33496: ARRAY
33497: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33498: LD_VAR 0 2
33502: PPUSH
33503: LD_VAR 0 5
33507: PPUSH
33508: CALL 33866 0 2
33512: NOT
33513: IFFALSE 33572
// repeat weapon := _weapon [ 1 ] ;
33515: LD_ADDR_VAR 0 5
33519: PUSH
33520: LD_VAR 0 10
33524: PUSH
33525: LD_INT 1
33527: ARRAY
33528: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33529: LD_ADDR_VAR 0 10
33533: PUSH
33534: LD_VAR 0 10
33538: PPUSH
33539: LD_INT 1
33541: PPUSH
33542: CALL_OW 3
33546: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33547: LD_VAR 0 2
33551: PPUSH
33552: LD_VAR 0 5
33556: PPUSH
33557: CALL 33866 0 2
33561: PUSH
33562: LD_VAR 0 10
33566: PUSH
33567: EMPTY
33568: EQUAL
33569: OR
33570: IFFALSE 33515
// result := [ ] ;
33572: LD_ADDR_VAR 0 6
33576: PUSH
33577: EMPTY
33578: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33579: LD_VAR 0 1
33583: PPUSH
33584: LD_VAR 0 2
33588: PPUSH
33589: LD_VAR 0 3
33593: PPUSH
33594: LD_VAR 0 4
33598: PPUSH
33599: LD_VAR 0 5
33603: PPUSH
33604: CALL_OW 448
33608: IFFALSE 33641
// result := [ chassis , engine , control , weapon ] ;
33610: LD_ADDR_VAR 0 6
33614: PUSH
33615: LD_VAR 0 2
33619: PUSH
33620: LD_VAR 0 3
33624: PUSH
33625: LD_VAR 0 4
33629: PUSH
33630: LD_VAR 0 5
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: ST_TO_ADDR
// end ;
33641: LD_VAR 0 6
33645: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33646: LD_INT 0
33648: PPUSH
// if not chassis or not engine then
33649: LD_VAR 0 1
33653: NOT
33654: PUSH
33655: LD_VAR 0 2
33659: NOT
33660: OR
33661: IFFALSE 33665
// exit ;
33663: GO 33861
// case engine of engine_solar :
33665: LD_VAR 0 2
33669: PUSH
33670: LD_INT 2
33672: DOUBLE
33673: EQUAL
33674: IFTRUE 33678
33676: GO 33716
33678: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33679: LD_ADDR_VAR 0 3
33683: PUSH
33684: LD_INT 11
33686: PUSH
33687: LD_INT 12
33689: PUSH
33690: LD_INT 13
33692: PUSH
33693: LD_INT 14
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: LD_INT 3
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: ST_TO_ADDR
33714: GO 33845
33716: LD_INT 1
33718: DOUBLE
33719: EQUAL
33720: IFTRUE 33724
33722: GO 33786
33724: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33725: LD_ADDR_VAR 0 3
33729: PUSH
33730: LD_INT 11
33732: PUSH
33733: LD_INT 12
33735: PUSH
33736: LD_INT 13
33738: PUSH
33739: LD_INT 14
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: LD_INT 3
33750: PUSH
33751: LD_INT 4
33753: PUSH
33754: LD_INT 5
33756: PUSH
33757: LD_INT 21
33759: PUSH
33760: LD_INT 23
33762: PUSH
33763: LD_INT 22
33765: PUSH
33766: LD_INT 24
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: ST_TO_ADDR
33784: GO 33845
33786: LD_INT 3
33788: DOUBLE
33789: EQUAL
33790: IFTRUE 33794
33792: GO 33844
33794: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33795: LD_ADDR_VAR 0 3
33799: PUSH
33800: LD_INT 13
33802: PUSH
33803: LD_INT 14
33805: PUSH
33806: LD_INT 2
33808: PUSH
33809: LD_INT 3
33811: PUSH
33812: LD_INT 4
33814: PUSH
33815: LD_INT 5
33817: PUSH
33818: LD_INT 21
33820: PUSH
33821: LD_INT 22
33823: PUSH
33824: LD_INT 23
33826: PUSH
33827: LD_INT 24
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: ST_TO_ADDR
33842: GO 33845
33844: POP
// result := ( chassis in result ) ;
33845: LD_ADDR_VAR 0 3
33849: PUSH
33850: LD_VAR 0 1
33854: PUSH
33855: LD_VAR 0 3
33859: IN
33860: ST_TO_ADDR
// end ;
33861: LD_VAR 0 3
33865: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33866: LD_INT 0
33868: PPUSH
// if not chassis or not weapon then
33869: LD_VAR 0 1
33873: NOT
33874: PUSH
33875: LD_VAR 0 2
33879: NOT
33880: OR
33881: IFFALSE 33885
// exit ;
33883: GO 34945
// case weapon of us_machine_gun :
33885: LD_VAR 0 2
33889: PUSH
33890: LD_INT 2
33892: DOUBLE
33893: EQUAL
33894: IFTRUE 33898
33896: GO 33928
33898: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33899: LD_ADDR_VAR 0 3
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: LD_INT 2
33909: PUSH
33910: LD_INT 3
33912: PUSH
33913: LD_INT 4
33915: PUSH
33916: LD_INT 5
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: ST_TO_ADDR
33926: GO 34929
33928: LD_INT 3
33930: DOUBLE
33931: EQUAL
33932: IFTRUE 33936
33934: GO 33966
33936: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33937: LD_ADDR_VAR 0 3
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: LD_INT 2
33947: PUSH
33948: LD_INT 3
33950: PUSH
33951: LD_INT 4
33953: PUSH
33954: LD_INT 5
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: ST_TO_ADDR
33964: GO 34929
33966: LD_INT 11
33968: DOUBLE
33969: EQUAL
33970: IFTRUE 33974
33972: GO 34004
33974: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33975: LD_ADDR_VAR 0 3
33979: PUSH
33980: LD_INT 1
33982: PUSH
33983: LD_INT 2
33985: PUSH
33986: LD_INT 3
33988: PUSH
33989: LD_INT 4
33991: PUSH
33992: LD_INT 5
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: ST_TO_ADDR
34002: GO 34929
34004: LD_INT 4
34006: DOUBLE
34007: EQUAL
34008: IFTRUE 34012
34010: GO 34038
34012: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34013: LD_ADDR_VAR 0 3
34017: PUSH
34018: LD_INT 2
34020: PUSH
34021: LD_INT 3
34023: PUSH
34024: LD_INT 4
34026: PUSH
34027: LD_INT 5
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: ST_TO_ADDR
34036: GO 34929
34038: LD_INT 5
34040: DOUBLE
34041: EQUAL
34042: IFTRUE 34046
34044: GO 34072
34046: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34047: LD_ADDR_VAR 0 3
34051: PUSH
34052: LD_INT 2
34054: PUSH
34055: LD_INT 3
34057: PUSH
34058: LD_INT 4
34060: PUSH
34061: LD_INT 5
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: ST_TO_ADDR
34070: GO 34929
34072: LD_INT 9
34074: DOUBLE
34075: EQUAL
34076: IFTRUE 34080
34078: GO 34106
34080: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34081: LD_ADDR_VAR 0 3
34085: PUSH
34086: LD_INT 2
34088: PUSH
34089: LD_INT 3
34091: PUSH
34092: LD_INT 4
34094: PUSH
34095: LD_INT 5
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: ST_TO_ADDR
34104: GO 34929
34106: LD_INT 7
34108: DOUBLE
34109: EQUAL
34110: IFTRUE 34114
34112: GO 34140
34114: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34115: LD_ADDR_VAR 0 3
34119: PUSH
34120: LD_INT 2
34122: PUSH
34123: LD_INT 3
34125: PUSH
34126: LD_INT 4
34128: PUSH
34129: LD_INT 5
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: ST_TO_ADDR
34138: GO 34929
34140: LD_INT 12
34142: DOUBLE
34143: EQUAL
34144: IFTRUE 34148
34146: GO 34174
34148: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34149: LD_ADDR_VAR 0 3
34153: PUSH
34154: LD_INT 2
34156: PUSH
34157: LD_INT 3
34159: PUSH
34160: LD_INT 4
34162: PUSH
34163: LD_INT 5
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: ST_TO_ADDR
34172: GO 34929
34174: LD_INT 13
34176: DOUBLE
34177: EQUAL
34178: IFTRUE 34182
34180: GO 34208
34182: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34183: LD_ADDR_VAR 0 3
34187: PUSH
34188: LD_INT 2
34190: PUSH
34191: LD_INT 3
34193: PUSH
34194: LD_INT 4
34196: PUSH
34197: LD_INT 5
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: ST_TO_ADDR
34206: GO 34929
34208: LD_INT 14
34210: DOUBLE
34211: EQUAL
34212: IFTRUE 34216
34214: GO 34234
34216: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34217: LD_ADDR_VAR 0 3
34221: PUSH
34222: LD_INT 4
34224: PUSH
34225: LD_INT 5
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: ST_TO_ADDR
34232: GO 34929
34234: LD_INT 6
34236: DOUBLE
34237: EQUAL
34238: IFTRUE 34242
34240: GO 34260
34242: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34243: LD_ADDR_VAR 0 3
34247: PUSH
34248: LD_INT 4
34250: PUSH
34251: LD_INT 5
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: ST_TO_ADDR
34258: GO 34929
34260: LD_INT 10
34262: DOUBLE
34263: EQUAL
34264: IFTRUE 34268
34266: GO 34286
34268: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34269: LD_ADDR_VAR 0 3
34273: PUSH
34274: LD_INT 4
34276: PUSH
34277: LD_INT 5
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: ST_TO_ADDR
34284: GO 34929
34286: LD_INT 22
34288: DOUBLE
34289: EQUAL
34290: IFTRUE 34294
34292: GO 34320
34294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34295: LD_ADDR_VAR 0 3
34299: PUSH
34300: LD_INT 11
34302: PUSH
34303: LD_INT 12
34305: PUSH
34306: LD_INT 13
34308: PUSH
34309: LD_INT 14
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: ST_TO_ADDR
34318: GO 34929
34320: LD_INT 23
34322: DOUBLE
34323: EQUAL
34324: IFTRUE 34328
34326: GO 34354
34328: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34329: LD_ADDR_VAR 0 3
34333: PUSH
34334: LD_INT 11
34336: PUSH
34337: LD_INT 12
34339: PUSH
34340: LD_INT 13
34342: PUSH
34343: LD_INT 14
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: ST_TO_ADDR
34352: GO 34929
34354: LD_INT 24
34356: DOUBLE
34357: EQUAL
34358: IFTRUE 34362
34360: GO 34388
34362: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34363: LD_ADDR_VAR 0 3
34367: PUSH
34368: LD_INT 11
34370: PUSH
34371: LD_INT 12
34373: PUSH
34374: LD_INT 13
34376: PUSH
34377: LD_INT 14
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: ST_TO_ADDR
34386: GO 34929
34388: LD_INT 30
34390: DOUBLE
34391: EQUAL
34392: IFTRUE 34396
34394: GO 34422
34396: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34397: LD_ADDR_VAR 0 3
34401: PUSH
34402: LD_INT 11
34404: PUSH
34405: LD_INT 12
34407: PUSH
34408: LD_INT 13
34410: PUSH
34411: LD_INT 14
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: ST_TO_ADDR
34420: GO 34929
34422: LD_INT 25
34424: DOUBLE
34425: EQUAL
34426: IFTRUE 34430
34428: GO 34448
34430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34431: LD_ADDR_VAR 0 3
34435: PUSH
34436: LD_INT 13
34438: PUSH
34439: LD_INT 14
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: ST_TO_ADDR
34446: GO 34929
34448: LD_INT 27
34450: DOUBLE
34451: EQUAL
34452: IFTRUE 34456
34454: GO 34474
34456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34457: LD_ADDR_VAR 0 3
34461: PUSH
34462: LD_INT 13
34464: PUSH
34465: LD_INT 14
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: ST_TO_ADDR
34472: GO 34929
34474: LD_INT 92
34476: DOUBLE
34477: EQUAL
34478: IFTRUE 34482
34480: GO 34508
34482: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34483: LD_ADDR_VAR 0 3
34487: PUSH
34488: LD_INT 11
34490: PUSH
34491: LD_INT 12
34493: PUSH
34494: LD_INT 13
34496: PUSH
34497: LD_INT 14
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: ST_TO_ADDR
34506: GO 34929
34508: LD_INT 28
34510: DOUBLE
34511: EQUAL
34512: IFTRUE 34516
34514: GO 34534
34516: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34517: LD_ADDR_VAR 0 3
34521: PUSH
34522: LD_INT 13
34524: PUSH
34525: LD_INT 14
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: ST_TO_ADDR
34532: GO 34929
34534: LD_INT 29
34536: DOUBLE
34537: EQUAL
34538: IFTRUE 34542
34540: GO 34560
34542: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34543: LD_ADDR_VAR 0 3
34547: PUSH
34548: LD_INT 13
34550: PUSH
34551: LD_INT 14
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: ST_TO_ADDR
34558: GO 34929
34560: LD_INT 31
34562: DOUBLE
34563: EQUAL
34564: IFTRUE 34568
34566: GO 34586
34568: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34569: LD_ADDR_VAR 0 3
34573: PUSH
34574: LD_INT 13
34576: PUSH
34577: LD_INT 14
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: ST_TO_ADDR
34584: GO 34929
34586: LD_INT 26
34588: DOUBLE
34589: EQUAL
34590: IFTRUE 34594
34592: GO 34612
34594: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34595: LD_ADDR_VAR 0 3
34599: PUSH
34600: LD_INT 13
34602: PUSH
34603: LD_INT 14
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: ST_TO_ADDR
34610: GO 34929
34612: LD_INT 42
34614: DOUBLE
34615: EQUAL
34616: IFTRUE 34620
34618: GO 34646
34620: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34621: LD_ADDR_VAR 0 3
34625: PUSH
34626: LD_INT 21
34628: PUSH
34629: LD_INT 22
34631: PUSH
34632: LD_INT 23
34634: PUSH
34635: LD_INT 24
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: ST_TO_ADDR
34644: GO 34929
34646: LD_INT 43
34648: DOUBLE
34649: EQUAL
34650: IFTRUE 34654
34652: GO 34680
34654: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34655: LD_ADDR_VAR 0 3
34659: PUSH
34660: LD_INT 21
34662: PUSH
34663: LD_INT 22
34665: PUSH
34666: LD_INT 23
34668: PUSH
34669: LD_INT 24
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: ST_TO_ADDR
34678: GO 34929
34680: LD_INT 44
34682: DOUBLE
34683: EQUAL
34684: IFTRUE 34688
34686: GO 34714
34688: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34689: LD_ADDR_VAR 0 3
34693: PUSH
34694: LD_INT 21
34696: PUSH
34697: LD_INT 22
34699: PUSH
34700: LD_INT 23
34702: PUSH
34703: LD_INT 24
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: ST_TO_ADDR
34712: GO 34929
34714: LD_INT 45
34716: DOUBLE
34717: EQUAL
34718: IFTRUE 34722
34720: GO 34748
34722: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34723: LD_ADDR_VAR 0 3
34727: PUSH
34728: LD_INT 21
34730: PUSH
34731: LD_INT 22
34733: PUSH
34734: LD_INT 23
34736: PUSH
34737: LD_INT 24
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: ST_TO_ADDR
34746: GO 34929
34748: LD_INT 49
34750: DOUBLE
34751: EQUAL
34752: IFTRUE 34756
34754: GO 34782
34756: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34757: LD_ADDR_VAR 0 3
34761: PUSH
34762: LD_INT 21
34764: PUSH
34765: LD_INT 22
34767: PUSH
34768: LD_INT 23
34770: PUSH
34771: LD_INT 24
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: ST_TO_ADDR
34780: GO 34929
34782: LD_INT 51
34784: DOUBLE
34785: EQUAL
34786: IFTRUE 34790
34788: GO 34816
34790: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34791: LD_ADDR_VAR 0 3
34795: PUSH
34796: LD_INT 21
34798: PUSH
34799: LD_INT 22
34801: PUSH
34802: LD_INT 23
34804: PUSH
34805: LD_INT 24
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: ST_TO_ADDR
34814: GO 34929
34816: LD_INT 52
34818: DOUBLE
34819: EQUAL
34820: IFTRUE 34824
34822: GO 34850
34824: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34825: LD_ADDR_VAR 0 3
34829: PUSH
34830: LD_INT 21
34832: PUSH
34833: LD_INT 22
34835: PUSH
34836: LD_INT 23
34838: PUSH
34839: LD_INT 24
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: ST_TO_ADDR
34848: GO 34929
34850: LD_INT 53
34852: DOUBLE
34853: EQUAL
34854: IFTRUE 34858
34856: GO 34876
34858: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34859: LD_ADDR_VAR 0 3
34863: PUSH
34864: LD_INT 23
34866: PUSH
34867: LD_INT 24
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: ST_TO_ADDR
34874: GO 34929
34876: LD_INT 46
34878: DOUBLE
34879: EQUAL
34880: IFTRUE 34884
34882: GO 34902
34884: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34885: LD_ADDR_VAR 0 3
34889: PUSH
34890: LD_INT 23
34892: PUSH
34893: LD_INT 24
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: ST_TO_ADDR
34900: GO 34929
34902: LD_INT 47
34904: DOUBLE
34905: EQUAL
34906: IFTRUE 34910
34908: GO 34928
34910: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34911: LD_ADDR_VAR 0 3
34915: PUSH
34916: LD_INT 23
34918: PUSH
34919: LD_INT 24
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: ST_TO_ADDR
34926: GO 34929
34928: POP
// result := ( chassis in result ) ;
34929: LD_ADDR_VAR 0 3
34933: PUSH
34934: LD_VAR 0 1
34938: PUSH
34939: LD_VAR 0 3
34943: IN
34944: ST_TO_ADDR
// end ;
34945: LD_VAR 0 3
34949: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34950: LD_INT 0
34952: PPUSH
34953: PPUSH
34954: PPUSH
34955: PPUSH
34956: PPUSH
34957: PPUSH
34958: PPUSH
// result := array ;
34959: LD_ADDR_VAR 0 5
34963: PUSH
34964: LD_VAR 0 1
34968: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34969: LD_VAR 0 1
34973: NOT
34974: PUSH
34975: LD_VAR 0 2
34979: NOT
34980: OR
34981: PUSH
34982: LD_VAR 0 3
34986: NOT
34987: OR
34988: PUSH
34989: LD_VAR 0 2
34993: PUSH
34994: LD_VAR 0 1
34998: GREATER
34999: OR
35000: PUSH
35001: LD_VAR 0 3
35005: PUSH
35006: LD_VAR 0 1
35010: GREATER
35011: OR
35012: IFFALSE 35016
// exit ;
35014: GO 35312
// if direction then
35016: LD_VAR 0 4
35020: IFFALSE 35084
// begin d := 1 ;
35022: LD_ADDR_VAR 0 9
35026: PUSH
35027: LD_INT 1
35029: ST_TO_ADDR
// if i_from > i_to then
35030: LD_VAR 0 2
35034: PUSH
35035: LD_VAR 0 3
35039: GREATER
35040: IFFALSE 35066
// length := ( array - i_from ) + i_to else
35042: LD_ADDR_VAR 0 11
35046: PUSH
35047: LD_VAR 0 1
35051: PUSH
35052: LD_VAR 0 2
35056: MINUS
35057: PUSH
35058: LD_VAR 0 3
35062: PLUS
35063: ST_TO_ADDR
35064: GO 35082
// length := i_to - i_from ;
35066: LD_ADDR_VAR 0 11
35070: PUSH
35071: LD_VAR 0 3
35075: PUSH
35076: LD_VAR 0 2
35080: MINUS
35081: ST_TO_ADDR
// end else
35082: GO 35145
// begin d := - 1 ;
35084: LD_ADDR_VAR 0 9
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: ST_TO_ADDR
// if i_from > i_to then
35093: LD_VAR 0 2
35097: PUSH
35098: LD_VAR 0 3
35102: GREATER
35103: IFFALSE 35123
// length := i_from - i_to else
35105: LD_ADDR_VAR 0 11
35109: PUSH
35110: LD_VAR 0 2
35114: PUSH
35115: LD_VAR 0 3
35119: MINUS
35120: ST_TO_ADDR
35121: GO 35145
// length := ( array - i_to ) + i_from ;
35123: LD_ADDR_VAR 0 11
35127: PUSH
35128: LD_VAR 0 1
35132: PUSH
35133: LD_VAR 0 3
35137: MINUS
35138: PUSH
35139: LD_VAR 0 2
35143: PLUS
35144: ST_TO_ADDR
// end ; if not length then
35145: LD_VAR 0 11
35149: NOT
35150: IFFALSE 35154
// exit ;
35152: GO 35312
// tmp := array ;
35154: LD_ADDR_VAR 0 10
35158: PUSH
35159: LD_VAR 0 1
35163: ST_TO_ADDR
// for i = 1 to length do
35164: LD_ADDR_VAR 0 6
35168: PUSH
35169: DOUBLE
35170: LD_INT 1
35172: DEC
35173: ST_TO_ADDR
35174: LD_VAR 0 11
35178: PUSH
35179: FOR_TO
35180: IFFALSE 35300
// begin for j = 1 to array do
35182: LD_ADDR_VAR 0 7
35186: PUSH
35187: DOUBLE
35188: LD_INT 1
35190: DEC
35191: ST_TO_ADDR
35192: LD_VAR 0 1
35196: PUSH
35197: FOR_TO
35198: IFFALSE 35286
// begin k := j + d ;
35200: LD_ADDR_VAR 0 8
35204: PUSH
35205: LD_VAR 0 7
35209: PUSH
35210: LD_VAR 0 9
35214: PLUS
35215: ST_TO_ADDR
// if k > array then
35216: LD_VAR 0 8
35220: PUSH
35221: LD_VAR 0 1
35225: GREATER
35226: IFFALSE 35236
// k := 1 ;
35228: LD_ADDR_VAR 0 8
35232: PUSH
35233: LD_INT 1
35235: ST_TO_ADDR
// if not k then
35236: LD_VAR 0 8
35240: NOT
35241: IFFALSE 35253
// k := array ;
35243: LD_ADDR_VAR 0 8
35247: PUSH
35248: LD_VAR 0 1
35252: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35253: LD_ADDR_VAR 0 10
35257: PUSH
35258: LD_VAR 0 10
35262: PPUSH
35263: LD_VAR 0 8
35267: PPUSH
35268: LD_VAR 0 1
35272: PUSH
35273: LD_VAR 0 7
35277: ARRAY
35278: PPUSH
35279: CALL_OW 1
35283: ST_TO_ADDR
// end ;
35284: GO 35197
35286: POP
35287: POP
// array := tmp ;
35288: LD_ADDR_VAR 0 1
35292: PUSH
35293: LD_VAR 0 10
35297: ST_TO_ADDR
// end ;
35298: GO 35179
35300: POP
35301: POP
// result := array ;
35302: LD_ADDR_VAR 0 5
35306: PUSH
35307: LD_VAR 0 1
35311: ST_TO_ADDR
// end ;
35312: LD_VAR 0 5
35316: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35317: LD_INT 0
35319: PPUSH
35320: PPUSH
// result := 0 ;
35321: LD_ADDR_VAR 0 3
35325: PUSH
35326: LD_INT 0
35328: ST_TO_ADDR
// if not array or not value in array then
35329: LD_VAR 0 1
35333: NOT
35334: PUSH
35335: LD_VAR 0 2
35339: PUSH
35340: LD_VAR 0 1
35344: IN
35345: NOT
35346: OR
35347: IFFALSE 35351
// exit ;
35349: GO 35405
// for i = 1 to array do
35351: LD_ADDR_VAR 0 4
35355: PUSH
35356: DOUBLE
35357: LD_INT 1
35359: DEC
35360: ST_TO_ADDR
35361: LD_VAR 0 1
35365: PUSH
35366: FOR_TO
35367: IFFALSE 35403
// if value = array [ i ] then
35369: LD_VAR 0 2
35373: PUSH
35374: LD_VAR 0 1
35378: PUSH
35379: LD_VAR 0 4
35383: ARRAY
35384: EQUAL
35385: IFFALSE 35401
// begin result := i ;
35387: LD_ADDR_VAR 0 3
35391: PUSH
35392: LD_VAR 0 4
35396: ST_TO_ADDR
// exit ;
35397: POP
35398: POP
35399: GO 35405
// end ;
35401: GO 35366
35403: POP
35404: POP
// end ;
35405: LD_VAR 0 3
35409: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35410: LD_INT 0
35412: PPUSH
// vc_chassis := chassis ;
35413: LD_ADDR_OWVAR 37
35417: PUSH
35418: LD_VAR 0 1
35422: ST_TO_ADDR
// vc_engine := engine ;
35423: LD_ADDR_OWVAR 39
35427: PUSH
35428: LD_VAR 0 2
35432: ST_TO_ADDR
// vc_control := control ;
35433: LD_ADDR_OWVAR 38
35437: PUSH
35438: LD_VAR 0 3
35442: ST_TO_ADDR
// vc_weapon := weapon ;
35443: LD_ADDR_OWVAR 40
35447: PUSH
35448: LD_VAR 0 4
35452: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35453: LD_ADDR_OWVAR 41
35457: PUSH
35458: LD_VAR 0 5
35462: ST_TO_ADDR
// end ;
35463: LD_VAR 0 6
35467: RET
// export function WantPlant ( unit ) ; var task ; begin
35468: LD_INT 0
35470: PPUSH
35471: PPUSH
// result := false ;
35472: LD_ADDR_VAR 0 2
35476: PUSH
35477: LD_INT 0
35479: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35480: LD_ADDR_VAR 0 3
35484: PUSH
35485: LD_VAR 0 1
35489: PPUSH
35490: CALL_OW 437
35494: ST_TO_ADDR
// if task then
35495: LD_VAR 0 3
35499: IFFALSE 35527
// if task [ 1 ] [ 1 ] = p then
35501: LD_VAR 0 3
35505: PUSH
35506: LD_INT 1
35508: ARRAY
35509: PUSH
35510: LD_INT 1
35512: ARRAY
35513: PUSH
35514: LD_STRING p
35516: EQUAL
35517: IFFALSE 35527
// result := true ;
35519: LD_ADDR_VAR 0 2
35523: PUSH
35524: LD_INT 1
35526: ST_TO_ADDR
// end ;
35527: LD_VAR 0 2
35531: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35532: LD_INT 0
35534: PPUSH
35535: PPUSH
35536: PPUSH
35537: PPUSH
// if pos < 1 then
35538: LD_VAR 0 2
35542: PUSH
35543: LD_INT 1
35545: LESS
35546: IFFALSE 35550
// exit ;
35548: GO 35853
// if pos = 1 then
35550: LD_VAR 0 2
35554: PUSH
35555: LD_INT 1
35557: EQUAL
35558: IFFALSE 35591
// result := Replace ( arr , pos [ 1 ] , value ) else
35560: LD_ADDR_VAR 0 4
35564: PUSH
35565: LD_VAR 0 1
35569: PPUSH
35570: LD_VAR 0 2
35574: PUSH
35575: LD_INT 1
35577: ARRAY
35578: PPUSH
35579: LD_VAR 0 3
35583: PPUSH
35584: CALL_OW 1
35588: ST_TO_ADDR
35589: GO 35853
// begin tmp := arr ;
35591: LD_ADDR_VAR 0 6
35595: PUSH
35596: LD_VAR 0 1
35600: ST_TO_ADDR
// s_arr := [ tmp ] ;
35601: LD_ADDR_VAR 0 7
35605: PUSH
35606: LD_VAR 0 6
35610: PUSH
35611: EMPTY
35612: LIST
35613: ST_TO_ADDR
// for i = 1 to pos - 1 do
35614: LD_ADDR_VAR 0 5
35618: PUSH
35619: DOUBLE
35620: LD_INT 1
35622: DEC
35623: ST_TO_ADDR
35624: LD_VAR 0 2
35628: PUSH
35629: LD_INT 1
35631: MINUS
35632: PUSH
35633: FOR_TO
35634: IFFALSE 35679
// begin tmp := tmp [ pos [ i ] ] ;
35636: LD_ADDR_VAR 0 6
35640: PUSH
35641: LD_VAR 0 6
35645: PUSH
35646: LD_VAR 0 2
35650: PUSH
35651: LD_VAR 0 5
35655: ARRAY
35656: ARRAY
35657: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35658: LD_ADDR_VAR 0 7
35662: PUSH
35663: LD_VAR 0 7
35667: PUSH
35668: LD_VAR 0 6
35672: PUSH
35673: EMPTY
35674: LIST
35675: ADD
35676: ST_TO_ADDR
// end ;
35677: GO 35633
35679: POP
35680: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35681: LD_ADDR_VAR 0 6
35685: PUSH
35686: LD_VAR 0 6
35690: PPUSH
35691: LD_VAR 0 2
35695: PUSH
35696: LD_VAR 0 2
35700: ARRAY
35701: PPUSH
35702: LD_VAR 0 3
35706: PPUSH
35707: CALL_OW 1
35711: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35712: LD_ADDR_VAR 0 7
35716: PUSH
35717: LD_VAR 0 7
35721: PPUSH
35722: LD_VAR 0 7
35726: PPUSH
35727: LD_VAR 0 6
35731: PPUSH
35732: CALL_OW 1
35736: ST_TO_ADDR
// for i = s_arr downto 2 do
35737: LD_ADDR_VAR 0 5
35741: PUSH
35742: DOUBLE
35743: LD_VAR 0 7
35747: INC
35748: ST_TO_ADDR
35749: LD_INT 2
35751: PUSH
35752: FOR_DOWNTO
35753: IFFALSE 35837
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35755: LD_ADDR_VAR 0 6
35759: PUSH
35760: LD_VAR 0 7
35764: PUSH
35765: LD_VAR 0 5
35769: PUSH
35770: LD_INT 1
35772: MINUS
35773: ARRAY
35774: PPUSH
35775: LD_VAR 0 2
35779: PUSH
35780: LD_VAR 0 5
35784: PUSH
35785: LD_INT 1
35787: MINUS
35788: ARRAY
35789: PPUSH
35790: LD_VAR 0 7
35794: PUSH
35795: LD_VAR 0 5
35799: ARRAY
35800: PPUSH
35801: CALL_OW 1
35805: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35806: LD_ADDR_VAR 0 7
35810: PUSH
35811: LD_VAR 0 7
35815: PPUSH
35816: LD_VAR 0 5
35820: PUSH
35821: LD_INT 1
35823: MINUS
35824: PPUSH
35825: LD_VAR 0 6
35829: PPUSH
35830: CALL_OW 1
35834: ST_TO_ADDR
// end ;
35835: GO 35752
35837: POP
35838: POP
// result := s_arr [ 1 ] ;
35839: LD_ADDR_VAR 0 4
35843: PUSH
35844: LD_VAR 0 7
35848: PUSH
35849: LD_INT 1
35851: ARRAY
35852: ST_TO_ADDR
// end ; end ;
35853: LD_VAR 0 4
35857: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35858: LD_INT 0
35860: PPUSH
35861: PPUSH
// if not list then
35862: LD_VAR 0 1
35866: NOT
35867: IFFALSE 35871
// exit ;
35869: GO 35962
// i := list [ pos1 ] ;
35871: LD_ADDR_VAR 0 5
35875: PUSH
35876: LD_VAR 0 1
35880: PUSH
35881: LD_VAR 0 2
35885: ARRAY
35886: ST_TO_ADDR
// if not i then
35887: LD_VAR 0 5
35891: NOT
35892: IFFALSE 35896
// exit ;
35894: GO 35962
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35896: LD_ADDR_VAR 0 1
35900: PUSH
35901: LD_VAR 0 1
35905: PPUSH
35906: LD_VAR 0 2
35910: PPUSH
35911: LD_VAR 0 1
35915: PUSH
35916: LD_VAR 0 3
35920: ARRAY
35921: PPUSH
35922: CALL_OW 1
35926: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35927: LD_ADDR_VAR 0 1
35931: PUSH
35932: LD_VAR 0 1
35936: PPUSH
35937: LD_VAR 0 3
35941: PPUSH
35942: LD_VAR 0 5
35946: PPUSH
35947: CALL_OW 1
35951: ST_TO_ADDR
// result := list ;
35952: LD_ADDR_VAR 0 4
35956: PUSH
35957: LD_VAR 0 1
35961: ST_TO_ADDR
// end ;
35962: LD_VAR 0 4
35966: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35967: LD_INT 0
35969: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35970: LD_ADDR_VAR 0 5
35974: PUSH
35975: LD_VAR 0 1
35979: PPUSH
35980: CALL_OW 250
35984: PPUSH
35985: LD_VAR 0 1
35989: PPUSH
35990: CALL_OW 251
35994: PPUSH
35995: LD_VAR 0 2
35999: PPUSH
36000: LD_VAR 0 3
36004: PPUSH
36005: LD_VAR 0 4
36009: PPUSH
36010: CALL 36020 0 5
36014: ST_TO_ADDR
// end ;
36015: LD_VAR 0 5
36019: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36020: LD_INT 0
36022: PPUSH
36023: PPUSH
36024: PPUSH
36025: PPUSH
// if not list then
36026: LD_VAR 0 3
36030: NOT
36031: IFFALSE 36035
// exit ;
36033: GO 36423
// result := [ ] ;
36035: LD_ADDR_VAR 0 6
36039: PUSH
36040: EMPTY
36041: ST_TO_ADDR
// for i in list do
36042: LD_ADDR_VAR 0 7
36046: PUSH
36047: LD_VAR 0 3
36051: PUSH
36052: FOR_IN
36053: IFFALSE 36255
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36055: LD_ADDR_VAR 0 9
36059: PUSH
36060: LD_VAR 0 7
36064: PPUSH
36065: LD_VAR 0 1
36069: PPUSH
36070: LD_VAR 0 2
36074: PPUSH
36075: CALL_OW 297
36079: ST_TO_ADDR
// if not result then
36080: LD_VAR 0 6
36084: NOT
36085: IFFALSE 36111
// result := [ [ i , tmp ] ] else
36087: LD_ADDR_VAR 0 6
36091: PUSH
36092: LD_VAR 0 7
36096: PUSH
36097: LD_VAR 0 9
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: EMPTY
36107: LIST
36108: ST_TO_ADDR
36109: GO 36253
// begin if result [ result ] [ 2 ] < tmp then
36111: LD_VAR 0 6
36115: PUSH
36116: LD_VAR 0 6
36120: ARRAY
36121: PUSH
36122: LD_INT 2
36124: ARRAY
36125: PUSH
36126: LD_VAR 0 9
36130: LESS
36131: IFFALSE 36173
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36133: LD_ADDR_VAR 0 6
36137: PUSH
36138: LD_VAR 0 6
36142: PPUSH
36143: LD_VAR 0 6
36147: PUSH
36148: LD_INT 1
36150: PLUS
36151: PPUSH
36152: LD_VAR 0 7
36156: PUSH
36157: LD_VAR 0 9
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PPUSH
36166: CALL_OW 2
36170: ST_TO_ADDR
36171: GO 36253
// for j = 1 to result do
36173: LD_ADDR_VAR 0 8
36177: PUSH
36178: DOUBLE
36179: LD_INT 1
36181: DEC
36182: ST_TO_ADDR
36183: LD_VAR 0 6
36187: PUSH
36188: FOR_TO
36189: IFFALSE 36251
// begin if tmp < result [ j ] [ 2 ] then
36191: LD_VAR 0 9
36195: PUSH
36196: LD_VAR 0 6
36200: PUSH
36201: LD_VAR 0 8
36205: ARRAY
36206: PUSH
36207: LD_INT 2
36209: ARRAY
36210: LESS
36211: IFFALSE 36249
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36213: LD_ADDR_VAR 0 6
36217: PUSH
36218: LD_VAR 0 6
36222: PPUSH
36223: LD_VAR 0 8
36227: PPUSH
36228: LD_VAR 0 7
36232: PUSH
36233: LD_VAR 0 9
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PPUSH
36242: CALL_OW 2
36246: ST_TO_ADDR
// break ;
36247: GO 36251
// end ; end ;
36249: GO 36188
36251: POP
36252: POP
// end ; end ;
36253: GO 36052
36255: POP
36256: POP
// if result and not asc then
36257: LD_VAR 0 6
36261: PUSH
36262: LD_VAR 0 4
36266: NOT
36267: AND
36268: IFFALSE 36343
// begin tmp := result ;
36270: LD_ADDR_VAR 0 9
36274: PUSH
36275: LD_VAR 0 6
36279: ST_TO_ADDR
// for i = tmp downto 1 do
36280: LD_ADDR_VAR 0 7
36284: PUSH
36285: DOUBLE
36286: LD_VAR 0 9
36290: INC
36291: ST_TO_ADDR
36292: LD_INT 1
36294: PUSH
36295: FOR_DOWNTO
36296: IFFALSE 36341
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36298: LD_ADDR_VAR 0 6
36302: PUSH
36303: LD_VAR 0 6
36307: PPUSH
36308: LD_VAR 0 9
36312: PUSH
36313: LD_VAR 0 7
36317: MINUS
36318: PUSH
36319: LD_INT 1
36321: PLUS
36322: PPUSH
36323: LD_VAR 0 9
36327: PUSH
36328: LD_VAR 0 7
36332: ARRAY
36333: PPUSH
36334: CALL_OW 1
36338: ST_TO_ADDR
36339: GO 36295
36341: POP
36342: POP
// end ; tmp := [ ] ;
36343: LD_ADDR_VAR 0 9
36347: PUSH
36348: EMPTY
36349: ST_TO_ADDR
// if mode then
36350: LD_VAR 0 5
36354: IFFALSE 36423
// begin for i = 1 to result do
36356: LD_ADDR_VAR 0 7
36360: PUSH
36361: DOUBLE
36362: LD_INT 1
36364: DEC
36365: ST_TO_ADDR
36366: LD_VAR 0 6
36370: PUSH
36371: FOR_TO
36372: IFFALSE 36411
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36374: LD_ADDR_VAR 0 9
36378: PUSH
36379: LD_VAR 0 9
36383: PPUSH
36384: LD_VAR 0 7
36388: PPUSH
36389: LD_VAR 0 6
36393: PUSH
36394: LD_VAR 0 7
36398: ARRAY
36399: PUSH
36400: LD_INT 1
36402: ARRAY
36403: PPUSH
36404: CALL_OW 1
36408: ST_TO_ADDR
36409: GO 36371
36411: POP
36412: POP
// result := tmp ;
36413: LD_ADDR_VAR 0 6
36417: PUSH
36418: LD_VAR 0 9
36422: ST_TO_ADDR
// end ; end ;
36423: LD_VAR 0 6
36427: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36428: LD_INT 0
36430: PPUSH
36431: PPUSH
36432: PPUSH
36433: PPUSH
36434: PPUSH
36435: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36436: LD_ADDR_VAR 0 5
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: EMPTY
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: ST_TO_ADDR
// if not x or not y then
36458: LD_VAR 0 2
36462: NOT
36463: PUSH
36464: LD_VAR 0 3
36468: NOT
36469: OR
36470: IFFALSE 36474
// exit ;
36472: GO 38124
// if not range then
36474: LD_VAR 0 4
36478: NOT
36479: IFFALSE 36489
// range := 10 ;
36481: LD_ADDR_VAR 0 4
36485: PUSH
36486: LD_INT 10
36488: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36489: LD_ADDR_VAR 0 8
36493: PUSH
36494: LD_INT 81
36496: PUSH
36497: LD_VAR 0 1
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 92
36508: PUSH
36509: LD_VAR 0 2
36513: PUSH
36514: LD_VAR 0 3
36518: PUSH
36519: LD_VAR 0 4
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 3
36532: PUSH
36533: LD_INT 21
36535: PUSH
36536: LD_INT 3
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: LIST
36551: PPUSH
36552: CALL_OW 69
36556: ST_TO_ADDR
// if not tmp then
36557: LD_VAR 0 8
36561: NOT
36562: IFFALSE 36566
// exit ;
36564: GO 38124
// for i in tmp do
36566: LD_ADDR_VAR 0 6
36570: PUSH
36571: LD_VAR 0 8
36575: PUSH
36576: FOR_IN
36577: IFFALSE 38099
// begin points := [ 0 , 0 , 0 ] ;
36579: LD_ADDR_VAR 0 9
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: LD_INT 0
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: LIST
36597: ST_TO_ADDR
// bpoints := 1 ;
36598: LD_ADDR_VAR 0 10
36602: PUSH
36603: LD_INT 1
36605: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36606: LD_VAR 0 6
36610: PPUSH
36611: CALL_OW 247
36615: PUSH
36616: LD_INT 1
36618: DOUBLE
36619: EQUAL
36620: IFTRUE 36624
36622: GO 37202
36624: POP
// begin if GetClass ( i ) = 1 then
36625: LD_VAR 0 6
36629: PPUSH
36630: CALL_OW 257
36634: PUSH
36635: LD_INT 1
36637: EQUAL
36638: IFFALSE 36659
// points := [ 10 , 5 , 3 ] ;
36640: LD_ADDR_VAR 0 9
36644: PUSH
36645: LD_INT 10
36647: PUSH
36648: LD_INT 5
36650: PUSH
36651: LD_INT 3
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: LIST
36658: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36659: LD_VAR 0 6
36663: PPUSH
36664: CALL_OW 257
36668: PUSH
36669: LD_INT 2
36671: PUSH
36672: LD_INT 3
36674: PUSH
36675: LD_INT 4
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: LIST
36682: IN
36683: IFFALSE 36704
// points := [ 3 , 2 , 1 ] ;
36685: LD_ADDR_VAR 0 9
36689: PUSH
36690: LD_INT 3
36692: PUSH
36693: LD_INT 2
36695: PUSH
36696: LD_INT 1
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: LIST
36703: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36704: LD_VAR 0 6
36708: PPUSH
36709: CALL_OW 257
36713: PUSH
36714: LD_INT 5
36716: EQUAL
36717: IFFALSE 36738
// points := [ 130 , 5 , 2 ] ;
36719: LD_ADDR_VAR 0 9
36723: PUSH
36724: LD_INT 130
36726: PUSH
36727: LD_INT 5
36729: PUSH
36730: LD_INT 2
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: LIST
36737: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36738: LD_VAR 0 6
36742: PPUSH
36743: CALL_OW 257
36747: PUSH
36748: LD_INT 8
36750: EQUAL
36751: IFFALSE 36772
// points := [ 35 , 35 , 30 ] ;
36753: LD_ADDR_VAR 0 9
36757: PUSH
36758: LD_INT 35
36760: PUSH
36761: LD_INT 35
36763: PUSH
36764: LD_INT 30
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: LIST
36771: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36772: LD_VAR 0 6
36776: PPUSH
36777: CALL_OW 257
36781: PUSH
36782: LD_INT 9
36784: EQUAL
36785: IFFALSE 36806
// points := [ 20 , 55 , 40 ] ;
36787: LD_ADDR_VAR 0 9
36791: PUSH
36792: LD_INT 20
36794: PUSH
36795: LD_INT 55
36797: PUSH
36798: LD_INT 40
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36806: LD_VAR 0 6
36810: PPUSH
36811: CALL_OW 257
36815: PUSH
36816: LD_INT 12
36818: PUSH
36819: LD_INT 16
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: IN
36826: IFFALSE 36847
// points := [ 5 , 3 , 2 ] ;
36828: LD_ADDR_VAR 0 9
36832: PUSH
36833: LD_INT 5
36835: PUSH
36836: LD_INT 3
36838: PUSH
36839: LD_INT 2
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: LIST
36846: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36847: LD_VAR 0 6
36851: PPUSH
36852: CALL_OW 257
36856: PUSH
36857: LD_INT 17
36859: EQUAL
36860: IFFALSE 36881
// points := [ 100 , 50 , 75 ] ;
36862: LD_ADDR_VAR 0 9
36866: PUSH
36867: LD_INT 100
36869: PUSH
36870: LD_INT 50
36872: PUSH
36873: LD_INT 75
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36881: LD_VAR 0 6
36885: PPUSH
36886: CALL_OW 257
36890: PUSH
36891: LD_INT 15
36893: EQUAL
36894: IFFALSE 36915
// points := [ 10 , 5 , 3 ] ;
36896: LD_ADDR_VAR 0 9
36900: PUSH
36901: LD_INT 10
36903: PUSH
36904: LD_INT 5
36906: PUSH
36907: LD_INT 3
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: LIST
36914: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36915: LD_VAR 0 6
36919: PPUSH
36920: CALL_OW 257
36924: PUSH
36925: LD_INT 14
36927: EQUAL
36928: IFFALSE 36949
// points := [ 10 , 0 , 0 ] ;
36930: LD_ADDR_VAR 0 9
36934: PUSH
36935: LD_INT 10
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: LD_INT 0
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: LIST
36948: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36949: LD_VAR 0 6
36953: PPUSH
36954: CALL_OW 257
36958: PUSH
36959: LD_INT 11
36961: EQUAL
36962: IFFALSE 36983
// points := [ 30 , 10 , 5 ] ;
36964: LD_ADDR_VAR 0 9
36968: PUSH
36969: LD_INT 30
36971: PUSH
36972: LD_INT 10
36974: PUSH
36975: LD_INT 5
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: LIST
36982: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36983: LD_VAR 0 1
36987: PPUSH
36988: LD_INT 5
36990: PPUSH
36991: CALL_OW 321
36995: PUSH
36996: LD_INT 2
36998: EQUAL
36999: IFFALSE 37016
// bpoints := bpoints * 1.8 ;
37001: LD_ADDR_VAR 0 10
37005: PUSH
37006: LD_VAR 0 10
37010: PUSH
37011: LD_REAL  1.80000000000000E+0000
37014: MUL
37015: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37016: LD_VAR 0 6
37020: PPUSH
37021: CALL_OW 257
37025: PUSH
37026: LD_INT 1
37028: PUSH
37029: LD_INT 2
37031: PUSH
37032: LD_INT 3
37034: PUSH
37035: LD_INT 4
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: IN
37044: PUSH
37045: LD_VAR 0 1
37049: PPUSH
37050: LD_INT 51
37052: PPUSH
37053: CALL_OW 321
37057: PUSH
37058: LD_INT 2
37060: EQUAL
37061: AND
37062: IFFALSE 37079
// bpoints := bpoints * 1.2 ;
37064: LD_ADDR_VAR 0 10
37068: PUSH
37069: LD_VAR 0 10
37073: PUSH
37074: LD_REAL  1.20000000000000E+0000
37077: MUL
37078: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37079: LD_VAR 0 6
37083: PPUSH
37084: CALL_OW 257
37088: PUSH
37089: LD_INT 5
37091: PUSH
37092: LD_INT 7
37094: PUSH
37095: LD_INT 9
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: LIST
37102: IN
37103: PUSH
37104: LD_VAR 0 1
37108: PPUSH
37109: LD_INT 52
37111: PPUSH
37112: CALL_OW 321
37116: PUSH
37117: LD_INT 2
37119: EQUAL
37120: AND
37121: IFFALSE 37138
// bpoints := bpoints * 1.5 ;
37123: LD_ADDR_VAR 0 10
37127: PUSH
37128: LD_VAR 0 10
37132: PUSH
37133: LD_REAL  1.50000000000000E+0000
37136: MUL
37137: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37138: LD_VAR 0 1
37142: PPUSH
37143: LD_INT 66
37145: PPUSH
37146: CALL_OW 321
37150: PUSH
37151: LD_INT 2
37153: EQUAL
37154: IFFALSE 37171
// bpoints := bpoints * 1.1 ;
37156: LD_ADDR_VAR 0 10
37160: PUSH
37161: LD_VAR 0 10
37165: PUSH
37166: LD_REAL  1.10000000000000E+0000
37169: MUL
37170: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37171: LD_ADDR_VAR 0 10
37175: PUSH
37176: LD_VAR 0 10
37180: PUSH
37181: LD_VAR 0 6
37185: PPUSH
37186: LD_INT 1
37188: PPUSH
37189: CALL_OW 259
37193: PUSH
37194: LD_REAL  1.15000000000000E+0000
37197: MUL
37198: MUL
37199: ST_TO_ADDR
// end ; unit_vehicle :
37200: GO 38028
37202: LD_INT 2
37204: DOUBLE
37205: EQUAL
37206: IFTRUE 37210
37208: GO 38016
37210: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37211: LD_VAR 0 6
37215: PPUSH
37216: CALL_OW 264
37220: PUSH
37221: LD_INT 2
37223: PUSH
37224: LD_INT 42
37226: PUSH
37227: LD_INT 24
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: LIST
37234: IN
37235: IFFALSE 37256
// points := [ 25 , 5 , 3 ] ;
37237: LD_ADDR_VAR 0 9
37241: PUSH
37242: LD_INT 25
37244: PUSH
37245: LD_INT 5
37247: PUSH
37248: LD_INT 3
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: LIST
37255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37256: LD_VAR 0 6
37260: PPUSH
37261: CALL_OW 264
37265: PUSH
37266: LD_INT 4
37268: PUSH
37269: LD_INT 43
37271: PUSH
37272: LD_INT 25
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: IN
37280: IFFALSE 37301
// points := [ 40 , 15 , 5 ] ;
37282: LD_ADDR_VAR 0 9
37286: PUSH
37287: LD_INT 40
37289: PUSH
37290: LD_INT 15
37292: PUSH
37293: LD_INT 5
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37301: LD_VAR 0 6
37305: PPUSH
37306: CALL_OW 264
37310: PUSH
37311: LD_INT 3
37313: PUSH
37314: LD_INT 23
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: IN
37321: IFFALSE 37342
// points := [ 7 , 25 , 8 ] ;
37323: LD_ADDR_VAR 0 9
37327: PUSH
37328: LD_INT 7
37330: PUSH
37331: LD_INT 25
37333: PUSH
37334: LD_INT 8
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: LIST
37341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37342: LD_VAR 0 6
37346: PPUSH
37347: CALL_OW 264
37351: PUSH
37352: LD_INT 5
37354: PUSH
37355: LD_INT 27
37357: PUSH
37358: LD_INT 44
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: LIST
37365: IN
37366: IFFALSE 37387
// points := [ 14 , 50 , 16 ] ;
37368: LD_ADDR_VAR 0 9
37372: PUSH
37373: LD_INT 14
37375: PUSH
37376: LD_INT 50
37378: PUSH
37379: LD_INT 16
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: LIST
37386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37387: LD_VAR 0 6
37391: PPUSH
37392: CALL_OW 264
37396: PUSH
37397: LD_INT 6
37399: PUSH
37400: LD_INT 46
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: IN
37407: IFFALSE 37428
// points := [ 32 , 120 , 70 ] ;
37409: LD_ADDR_VAR 0 9
37413: PUSH
37414: LD_INT 32
37416: PUSH
37417: LD_INT 120
37419: PUSH
37420: LD_INT 70
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: LIST
37427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37428: LD_VAR 0 6
37432: PPUSH
37433: CALL_OW 264
37437: PUSH
37438: LD_INT 7
37440: PUSH
37441: LD_INT 28
37443: PUSH
37444: LD_INT 45
37446: PUSH
37447: LD_INT 92
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: IN
37456: IFFALSE 37477
// points := [ 35 , 20 , 45 ] ;
37458: LD_ADDR_VAR 0 9
37462: PUSH
37463: LD_INT 35
37465: PUSH
37466: LD_INT 20
37468: PUSH
37469: LD_INT 45
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: LIST
37476: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37477: LD_VAR 0 6
37481: PPUSH
37482: CALL_OW 264
37486: PUSH
37487: LD_INT 47
37489: PUSH
37490: EMPTY
37491: LIST
37492: IN
37493: IFFALSE 37514
// points := [ 67 , 45 , 75 ] ;
37495: LD_ADDR_VAR 0 9
37499: PUSH
37500: LD_INT 67
37502: PUSH
37503: LD_INT 45
37505: PUSH
37506: LD_INT 75
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: LIST
37513: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37514: LD_VAR 0 6
37518: PPUSH
37519: CALL_OW 264
37523: PUSH
37524: LD_INT 26
37526: PUSH
37527: EMPTY
37528: LIST
37529: IN
37530: IFFALSE 37551
// points := [ 120 , 30 , 80 ] ;
37532: LD_ADDR_VAR 0 9
37536: PUSH
37537: LD_INT 120
37539: PUSH
37540: LD_INT 30
37542: PUSH
37543: LD_INT 80
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: LIST
37550: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37551: LD_VAR 0 6
37555: PPUSH
37556: CALL_OW 264
37560: PUSH
37561: LD_INT 22
37563: PUSH
37564: EMPTY
37565: LIST
37566: IN
37567: IFFALSE 37588
// points := [ 40 , 1 , 1 ] ;
37569: LD_ADDR_VAR 0 9
37573: PUSH
37574: LD_INT 40
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: LIST
37587: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37588: LD_VAR 0 6
37592: PPUSH
37593: CALL_OW 264
37597: PUSH
37598: LD_INT 29
37600: PUSH
37601: EMPTY
37602: LIST
37603: IN
37604: IFFALSE 37625
// points := [ 70 , 200 , 400 ] ;
37606: LD_ADDR_VAR 0 9
37610: PUSH
37611: LD_INT 70
37613: PUSH
37614: LD_INT 200
37616: PUSH
37617: LD_INT 400
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37625: LD_VAR 0 6
37629: PPUSH
37630: CALL_OW 264
37634: PUSH
37635: LD_INT 14
37637: PUSH
37638: LD_INT 53
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: IN
37645: IFFALSE 37666
// points := [ 40 , 10 , 20 ] ;
37647: LD_ADDR_VAR 0 9
37651: PUSH
37652: LD_INT 40
37654: PUSH
37655: LD_INT 10
37657: PUSH
37658: LD_INT 20
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: LIST
37665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37666: LD_VAR 0 6
37670: PPUSH
37671: CALL_OW 264
37675: PUSH
37676: LD_INT 9
37678: PUSH
37679: EMPTY
37680: LIST
37681: IN
37682: IFFALSE 37703
// points := [ 5 , 70 , 20 ] ;
37684: LD_ADDR_VAR 0 9
37688: PUSH
37689: LD_INT 5
37691: PUSH
37692: LD_INT 70
37694: PUSH
37695: LD_INT 20
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: LIST
37702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37703: LD_VAR 0 6
37707: PPUSH
37708: CALL_OW 264
37712: PUSH
37713: LD_INT 10
37715: PUSH
37716: EMPTY
37717: LIST
37718: IN
37719: IFFALSE 37740
// points := [ 35 , 110 , 70 ] ;
37721: LD_ADDR_VAR 0 9
37725: PUSH
37726: LD_INT 35
37728: PUSH
37729: LD_INT 110
37731: PUSH
37732: LD_INT 70
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: LIST
37739: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37740: LD_VAR 0 6
37744: PPUSH
37745: CALL_OW 265
37749: PUSH
37750: LD_INT 25
37752: EQUAL
37753: IFFALSE 37774
// points := [ 80 , 65 , 100 ] ;
37755: LD_ADDR_VAR 0 9
37759: PUSH
37760: LD_INT 80
37762: PUSH
37763: LD_INT 65
37765: PUSH
37766: LD_INT 100
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: LIST
37773: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37774: LD_VAR 0 6
37778: PPUSH
37779: CALL_OW 263
37783: PUSH
37784: LD_INT 1
37786: EQUAL
37787: IFFALSE 37822
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37789: LD_ADDR_VAR 0 10
37793: PUSH
37794: LD_VAR 0 10
37798: PUSH
37799: LD_VAR 0 6
37803: PPUSH
37804: CALL_OW 311
37808: PPUSH
37809: LD_INT 3
37811: PPUSH
37812: CALL_OW 259
37816: PUSH
37817: LD_INT 4
37819: MUL
37820: MUL
37821: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37822: LD_VAR 0 6
37826: PPUSH
37827: CALL_OW 263
37831: PUSH
37832: LD_INT 2
37834: EQUAL
37835: IFFALSE 37886
// begin j := IsControledBy ( i ) ;
37837: LD_ADDR_VAR 0 7
37841: PUSH
37842: LD_VAR 0 6
37846: PPUSH
37847: CALL_OW 312
37851: ST_TO_ADDR
// if j then
37852: LD_VAR 0 7
37856: IFFALSE 37886
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37858: LD_ADDR_VAR 0 10
37862: PUSH
37863: LD_VAR 0 10
37867: PUSH
37868: LD_VAR 0 7
37872: PPUSH
37873: LD_INT 3
37875: PPUSH
37876: CALL_OW 259
37880: PUSH
37881: LD_INT 3
37883: MUL
37884: MUL
37885: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37886: LD_VAR 0 6
37890: PPUSH
37891: CALL_OW 264
37895: PUSH
37896: LD_INT 5
37898: PUSH
37899: LD_INT 6
37901: PUSH
37902: LD_INT 46
37904: PUSH
37905: LD_INT 44
37907: PUSH
37908: LD_INT 47
37910: PUSH
37911: LD_INT 45
37913: PUSH
37914: LD_INT 28
37916: PUSH
37917: LD_INT 7
37919: PUSH
37920: LD_INT 27
37922: PUSH
37923: LD_INT 29
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: IN
37938: PUSH
37939: LD_VAR 0 1
37943: PPUSH
37944: LD_INT 52
37946: PPUSH
37947: CALL_OW 321
37951: PUSH
37952: LD_INT 2
37954: EQUAL
37955: AND
37956: IFFALSE 37973
// bpoints := bpoints * 1.2 ;
37958: LD_ADDR_VAR 0 10
37962: PUSH
37963: LD_VAR 0 10
37967: PUSH
37968: LD_REAL  1.20000000000000E+0000
37971: MUL
37972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37973: LD_VAR 0 6
37977: PPUSH
37978: CALL_OW 264
37982: PUSH
37983: LD_INT 6
37985: PUSH
37986: LD_INT 46
37988: PUSH
37989: LD_INT 47
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: LIST
37996: IN
37997: IFFALSE 38014
// bpoints := bpoints * 1.2 ;
37999: LD_ADDR_VAR 0 10
38003: PUSH
38004: LD_VAR 0 10
38008: PUSH
38009: LD_REAL  1.20000000000000E+0000
38012: MUL
38013: ST_TO_ADDR
// end ; unit_building :
38014: GO 38028
38016: LD_INT 3
38018: DOUBLE
38019: EQUAL
38020: IFTRUE 38024
38022: GO 38027
38024: POP
// ; end ;
38025: GO 38028
38027: POP
// for j = 1 to 3 do
38028: LD_ADDR_VAR 0 7
38032: PUSH
38033: DOUBLE
38034: LD_INT 1
38036: DEC
38037: ST_TO_ADDR
38038: LD_INT 3
38040: PUSH
38041: FOR_TO
38042: IFFALSE 38095
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38044: LD_ADDR_VAR 0 5
38048: PUSH
38049: LD_VAR 0 5
38053: PPUSH
38054: LD_VAR 0 7
38058: PPUSH
38059: LD_VAR 0 5
38063: PUSH
38064: LD_VAR 0 7
38068: ARRAY
38069: PUSH
38070: LD_VAR 0 9
38074: PUSH
38075: LD_VAR 0 7
38079: ARRAY
38080: PUSH
38081: LD_VAR 0 10
38085: MUL
38086: PLUS
38087: PPUSH
38088: CALL_OW 1
38092: ST_TO_ADDR
38093: GO 38041
38095: POP
38096: POP
// end ;
38097: GO 36576
38099: POP
38100: POP
// result := Replace ( result , 4 , tmp ) ;
38101: LD_ADDR_VAR 0 5
38105: PUSH
38106: LD_VAR 0 5
38110: PPUSH
38111: LD_INT 4
38113: PPUSH
38114: LD_VAR 0 8
38118: PPUSH
38119: CALL_OW 1
38123: ST_TO_ADDR
// end ;
38124: LD_VAR 0 5
38128: RET
// export function DangerAtRange ( unit , range ) ; begin
38129: LD_INT 0
38131: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38132: LD_ADDR_VAR 0 3
38136: PUSH
38137: LD_VAR 0 1
38141: PPUSH
38142: CALL_OW 255
38146: PPUSH
38147: LD_VAR 0 1
38151: PPUSH
38152: CALL_OW 250
38156: PPUSH
38157: LD_VAR 0 1
38161: PPUSH
38162: CALL_OW 251
38166: PPUSH
38167: LD_VAR 0 2
38171: PPUSH
38172: CALL 36428 0 4
38176: ST_TO_ADDR
// end ;
38177: LD_VAR 0 3
38181: RET
// export function DangerInArea ( side , area ) ; begin
38182: LD_INT 0
38184: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38185: LD_ADDR_VAR 0 3
38189: PUSH
38190: LD_VAR 0 2
38194: PPUSH
38195: LD_INT 81
38197: PUSH
38198: LD_VAR 0 1
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PPUSH
38207: CALL_OW 70
38211: ST_TO_ADDR
// end ;
38212: LD_VAR 0 3
38216: RET
// export function IsExtension ( b ) ; begin
38217: LD_INT 0
38219: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38220: LD_ADDR_VAR 0 2
38224: PUSH
38225: LD_VAR 0 1
38229: PUSH
38230: LD_INT 23
38232: PUSH
38233: LD_INT 20
38235: PUSH
38236: LD_INT 22
38238: PUSH
38239: LD_INT 17
38241: PUSH
38242: LD_INT 24
38244: PUSH
38245: LD_INT 21
38247: PUSH
38248: LD_INT 19
38250: PUSH
38251: LD_INT 16
38253: PUSH
38254: LD_INT 25
38256: PUSH
38257: LD_INT 18
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: IN
38272: ST_TO_ADDR
// end ;
38273: LD_VAR 0 2
38277: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38278: LD_INT 0
38280: PPUSH
38281: PPUSH
38282: PPUSH
// result := [ ] ;
38283: LD_ADDR_VAR 0 4
38287: PUSH
38288: EMPTY
38289: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38290: LD_ADDR_VAR 0 5
38294: PUSH
38295: LD_VAR 0 2
38299: PPUSH
38300: LD_INT 21
38302: PUSH
38303: LD_INT 3
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PPUSH
38310: CALL_OW 70
38314: ST_TO_ADDR
// if not tmp then
38315: LD_VAR 0 5
38319: NOT
38320: IFFALSE 38324
// exit ;
38322: GO 38388
// if checkLink then
38324: LD_VAR 0 3
38328: IFFALSE 38378
// begin for i in tmp do
38330: LD_ADDR_VAR 0 6
38334: PUSH
38335: LD_VAR 0 5
38339: PUSH
38340: FOR_IN
38341: IFFALSE 38376
// if GetBase ( i ) <> base then
38343: LD_VAR 0 6
38347: PPUSH
38348: CALL_OW 274
38352: PUSH
38353: LD_VAR 0 1
38357: NONEQUAL
38358: IFFALSE 38374
// ComLinkToBase ( base , i ) ;
38360: LD_VAR 0 1
38364: PPUSH
38365: LD_VAR 0 6
38369: PPUSH
38370: CALL_OW 169
38374: GO 38340
38376: POP
38377: POP
// end ; result := tmp ;
38378: LD_ADDR_VAR 0 4
38382: PUSH
38383: LD_VAR 0 5
38387: ST_TO_ADDR
// end ;
38388: LD_VAR 0 4
38392: RET
// export function ComComplete ( units , b ) ; var i ; begin
38393: LD_INT 0
38395: PPUSH
38396: PPUSH
// if not units then
38397: LD_VAR 0 1
38401: NOT
38402: IFFALSE 38406
// exit ;
38404: GO 38496
// for i in units do
38406: LD_ADDR_VAR 0 4
38410: PUSH
38411: LD_VAR 0 1
38415: PUSH
38416: FOR_IN
38417: IFFALSE 38494
// if BuildingStatus ( b ) = bs_build then
38419: LD_VAR 0 2
38423: PPUSH
38424: CALL_OW 461
38428: PUSH
38429: LD_INT 1
38431: EQUAL
38432: IFFALSE 38492
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38434: LD_VAR 0 4
38438: PPUSH
38439: LD_STRING h
38441: PUSH
38442: LD_VAR 0 2
38446: PPUSH
38447: CALL_OW 250
38451: PUSH
38452: LD_VAR 0 2
38456: PPUSH
38457: CALL_OW 251
38461: PUSH
38462: LD_VAR 0 2
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: PUSH
38485: EMPTY
38486: LIST
38487: PPUSH
38488: CALL_OW 446
38492: GO 38416
38494: POP
38495: POP
// end ;
38496: LD_VAR 0 3
38500: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38501: LD_INT 0
38503: PPUSH
38504: PPUSH
38505: PPUSH
38506: PPUSH
38507: PPUSH
38508: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38509: LD_VAR 0 1
38513: NOT
38514: PUSH
38515: LD_VAR 0 1
38519: PPUSH
38520: CALL_OW 263
38524: PUSH
38525: LD_INT 2
38527: NONEQUAL
38528: OR
38529: IFFALSE 38533
// exit ;
38531: GO 38849
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38533: LD_ADDR_VAR 0 6
38537: PUSH
38538: LD_INT 22
38540: PUSH
38541: LD_VAR 0 1
38545: PPUSH
38546: CALL_OW 255
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 2
38557: PUSH
38558: LD_INT 30
38560: PUSH
38561: LD_INT 36
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 34
38570: PUSH
38571: LD_INT 31
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: LIST
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PPUSH
38587: CALL_OW 69
38591: ST_TO_ADDR
// if not tmp then
38592: LD_VAR 0 6
38596: NOT
38597: IFFALSE 38601
// exit ;
38599: GO 38849
// result := [ ] ;
38601: LD_ADDR_VAR 0 2
38605: PUSH
38606: EMPTY
38607: ST_TO_ADDR
// for i in tmp do
38608: LD_ADDR_VAR 0 3
38612: PUSH
38613: LD_VAR 0 6
38617: PUSH
38618: FOR_IN
38619: IFFALSE 38690
// begin t := UnitsInside ( i ) ;
38621: LD_ADDR_VAR 0 4
38625: PUSH
38626: LD_VAR 0 3
38630: PPUSH
38631: CALL_OW 313
38635: ST_TO_ADDR
// if t then
38636: LD_VAR 0 4
38640: IFFALSE 38688
// for j in t do
38642: LD_ADDR_VAR 0 7
38646: PUSH
38647: LD_VAR 0 4
38651: PUSH
38652: FOR_IN
38653: IFFALSE 38686
// result := Replace ( result , result + 1 , j ) ;
38655: LD_ADDR_VAR 0 2
38659: PUSH
38660: LD_VAR 0 2
38664: PPUSH
38665: LD_VAR 0 2
38669: PUSH
38670: LD_INT 1
38672: PLUS
38673: PPUSH
38674: LD_VAR 0 7
38678: PPUSH
38679: CALL_OW 1
38683: ST_TO_ADDR
38684: GO 38652
38686: POP
38687: POP
// end ;
38688: GO 38618
38690: POP
38691: POP
// if not result then
38692: LD_VAR 0 2
38696: NOT
38697: IFFALSE 38701
// exit ;
38699: GO 38849
// mech := result [ 1 ] ;
38701: LD_ADDR_VAR 0 5
38705: PUSH
38706: LD_VAR 0 2
38710: PUSH
38711: LD_INT 1
38713: ARRAY
38714: ST_TO_ADDR
// if result > 1 then
38715: LD_VAR 0 2
38719: PUSH
38720: LD_INT 1
38722: GREATER
38723: IFFALSE 38835
// begin for i = 2 to result do
38725: LD_ADDR_VAR 0 3
38729: PUSH
38730: DOUBLE
38731: LD_INT 2
38733: DEC
38734: ST_TO_ADDR
38735: LD_VAR 0 2
38739: PUSH
38740: FOR_TO
38741: IFFALSE 38833
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38743: LD_ADDR_VAR 0 4
38747: PUSH
38748: LD_VAR 0 2
38752: PUSH
38753: LD_VAR 0 3
38757: ARRAY
38758: PPUSH
38759: LD_INT 3
38761: PPUSH
38762: CALL_OW 259
38766: PUSH
38767: LD_VAR 0 2
38771: PUSH
38772: LD_VAR 0 3
38776: ARRAY
38777: PPUSH
38778: CALL_OW 432
38782: MINUS
38783: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38784: LD_VAR 0 4
38788: PUSH
38789: LD_VAR 0 5
38793: PPUSH
38794: LD_INT 3
38796: PPUSH
38797: CALL_OW 259
38801: PUSH
38802: LD_VAR 0 5
38806: PPUSH
38807: CALL_OW 432
38811: MINUS
38812: GREATEREQUAL
38813: IFFALSE 38831
// mech := result [ i ] ;
38815: LD_ADDR_VAR 0 5
38819: PUSH
38820: LD_VAR 0 2
38824: PUSH
38825: LD_VAR 0 3
38829: ARRAY
38830: ST_TO_ADDR
// end ;
38831: GO 38740
38833: POP
38834: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38835: LD_VAR 0 1
38839: PPUSH
38840: LD_VAR 0 5
38844: PPUSH
38845: CALL_OW 135
// end ;
38849: LD_VAR 0 2
38853: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38854: LD_INT 0
38856: PPUSH
38857: PPUSH
38858: PPUSH
38859: PPUSH
38860: PPUSH
38861: PPUSH
38862: PPUSH
38863: PPUSH
38864: PPUSH
38865: PPUSH
38866: PPUSH
38867: PPUSH
38868: PPUSH
// result := [ ] ;
38869: LD_ADDR_VAR 0 7
38873: PUSH
38874: EMPTY
38875: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38876: LD_VAR 0 1
38880: PPUSH
38881: CALL_OW 266
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: IN
38896: NOT
38897: IFFALSE 38901
// exit ;
38899: GO 40535
// if name then
38901: LD_VAR 0 3
38905: IFFALSE 38921
// SetBName ( base_dep , name ) ;
38907: LD_VAR 0 1
38911: PPUSH
38912: LD_VAR 0 3
38916: PPUSH
38917: CALL_OW 500
// base := GetBase ( base_dep ) ;
38921: LD_ADDR_VAR 0 15
38925: PUSH
38926: LD_VAR 0 1
38930: PPUSH
38931: CALL_OW 274
38935: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38936: LD_ADDR_VAR 0 16
38940: PUSH
38941: LD_VAR 0 1
38945: PPUSH
38946: CALL_OW 255
38950: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38951: LD_ADDR_VAR 0 17
38955: PUSH
38956: LD_VAR 0 1
38960: PPUSH
38961: CALL_OW 248
38965: ST_TO_ADDR
// if sources then
38966: LD_VAR 0 5
38970: IFFALSE 39017
// for i = 1 to 3 do
38972: LD_ADDR_VAR 0 8
38976: PUSH
38977: DOUBLE
38978: LD_INT 1
38980: DEC
38981: ST_TO_ADDR
38982: LD_INT 3
38984: PUSH
38985: FOR_TO
38986: IFFALSE 39015
// AddResourceType ( base , i , sources [ i ] ) ;
38988: LD_VAR 0 15
38992: PPUSH
38993: LD_VAR 0 8
38997: PPUSH
38998: LD_VAR 0 5
39002: PUSH
39003: LD_VAR 0 8
39007: ARRAY
39008: PPUSH
39009: CALL_OW 276
39013: GO 38985
39015: POP
39016: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39017: LD_ADDR_VAR 0 18
39021: PUSH
39022: LD_VAR 0 15
39026: PPUSH
39027: LD_VAR 0 2
39031: PPUSH
39032: LD_INT 1
39034: PPUSH
39035: CALL 38278 0 3
39039: ST_TO_ADDR
// InitHc ;
39040: CALL_OW 19
// InitUc ;
39044: CALL_OW 18
// uc_side := side ;
39048: LD_ADDR_OWVAR 20
39052: PUSH
39053: LD_VAR 0 16
39057: ST_TO_ADDR
// uc_nation := nation ;
39058: LD_ADDR_OWVAR 21
39062: PUSH
39063: LD_VAR 0 17
39067: ST_TO_ADDR
// if buildings then
39068: LD_VAR 0 18
39072: IFFALSE 40394
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39074: LD_ADDR_VAR 0 19
39078: PUSH
39079: LD_VAR 0 18
39083: PPUSH
39084: LD_INT 2
39086: PUSH
39087: LD_INT 30
39089: PUSH
39090: LD_INT 29
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 30
39099: PUSH
39100: LD_INT 30
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: PPUSH
39112: CALL_OW 72
39116: ST_TO_ADDR
// if tmp then
39117: LD_VAR 0 19
39121: IFFALSE 39169
// for i in tmp do
39123: LD_ADDR_VAR 0 8
39127: PUSH
39128: LD_VAR 0 19
39132: PUSH
39133: FOR_IN
39134: IFFALSE 39167
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39136: LD_VAR 0 8
39140: PPUSH
39141: CALL_OW 250
39145: PPUSH
39146: LD_VAR 0 8
39150: PPUSH
39151: CALL_OW 251
39155: PPUSH
39156: LD_VAR 0 16
39160: PPUSH
39161: CALL_OW 441
39165: GO 39133
39167: POP
39168: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39169: LD_VAR 0 18
39173: PPUSH
39174: LD_INT 2
39176: PUSH
39177: LD_INT 30
39179: PUSH
39180: LD_INT 32
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 30
39189: PUSH
39190: LD_INT 33
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: LIST
39201: PPUSH
39202: CALL_OW 72
39206: IFFALSE 39294
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39208: LD_ADDR_VAR 0 8
39212: PUSH
39213: LD_VAR 0 18
39217: PPUSH
39218: LD_INT 2
39220: PUSH
39221: LD_INT 30
39223: PUSH
39224: LD_INT 32
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 30
39233: PUSH
39234: LD_INT 33
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: LIST
39245: PPUSH
39246: CALL_OW 72
39250: PUSH
39251: FOR_IN
39252: IFFALSE 39292
// begin if not GetBWeapon ( i ) then
39254: LD_VAR 0 8
39258: PPUSH
39259: CALL_OW 269
39263: NOT
39264: IFFALSE 39290
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39266: LD_VAR 0 8
39270: PPUSH
39271: LD_VAR 0 8
39275: PPUSH
39276: LD_VAR 0 2
39280: PPUSH
39281: CALL 40540 0 2
39285: PPUSH
39286: CALL_OW 431
// end ;
39290: GO 39251
39292: POP
39293: POP
// end ; for i = 1 to personel do
39294: LD_ADDR_VAR 0 8
39298: PUSH
39299: DOUBLE
39300: LD_INT 1
39302: DEC
39303: ST_TO_ADDR
39304: LD_VAR 0 6
39308: PUSH
39309: FOR_TO
39310: IFFALSE 40374
// begin if i > 4 then
39312: LD_VAR 0 8
39316: PUSH
39317: LD_INT 4
39319: GREATER
39320: IFFALSE 39324
// break ;
39322: GO 40374
// case i of 1 :
39324: LD_VAR 0 8
39328: PUSH
39329: LD_INT 1
39331: DOUBLE
39332: EQUAL
39333: IFTRUE 39337
39335: GO 39417
39337: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39338: LD_ADDR_VAR 0 12
39342: PUSH
39343: LD_VAR 0 18
39347: PPUSH
39348: LD_INT 22
39350: PUSH
39351: LD_VAR 0 16
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 58
39362: PUSH
39363: EMPTY
39364: LIST
39365: PUSH
39366: LD_INT 2
39368: PUSH
39369: LD_INT 30
39371: PUSH
39372: LD_INT 32
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 30
39381: PUSH
39382: LD_INT 4
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 30
39391: PUSH
39392: LD_INT 5
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: LIST
39409: PPUSH
39410: CALL_OW 72
39414: ST_TO_ADDR
39415: GO 39639
39417: LD_INT 2
39419: DOUBLE
39420: EQUAL
39421: IFTRUE 39425
39423: GO 39487
39425: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39426: LD_ADDR_VAR 0 12
39430: PUSH
39431: LD_VAR 0 18
39435: PPUSH
39436: LD_INT 22
39438: PUSH
39439: LD_VAR 0 16
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 2
39450: PUSH
39451: LD_INT 30
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 30
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: LIST
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PPUSH
39480: CALL_OW 72
39484: ST_TO_ADDR
39485: GO 39639
39487: LD_INT 3
39489: DOUBLE
39490: EQUAL
39491: IFTRUE 39495
39493: GO 39557
39495: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39496: LD_ADDR_VAR 0 12
39500: PUSH
39501: LD_VAR 0 18
39505: PPUSH
39506: LD_INT 22
39508: PUSH
39509: LD_VAR 0 16
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 2
39520: PUSH
39521: LD_INT 30
39523: PUSH
39524: LD_INT 2
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 30
39533: PUSH
39534: LD_INT 3
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: LIST
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PPUSH
39550: CALL_OW 72
39554: ST_TO_ADDR
39555: GO 39639
39557: LD_INT 4
39559: DOUBLE
39560: EQUAL
39561: IFTRUE 39565
39563: GO 39638
39565: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39566: LD_ADDR_VAR 0 12
39570: PUSH
39571: LD_VAR 0 18
39575: PPUSH
39576: LD_INT 22
39578: PUSH
39579: LD_VAR 0 16
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 2
39590: PUSH
39591: LD_INT 30
39593: PUSH
39594: LD_INT 6
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 30
39603: PUSH
39604: LD_INT 7
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 30
39613: PUSH
39614: LD_INT 8
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PPUSH
39631: CALL_OW 72
39635: ST_TO_ADDR
39636: GO 39639
39638: POP
// if i = 1 then
39639: LD_VAR 0 8
39643: PUSH
39644: LD_INT 1
39646: EQUAL
39647: IFFALSE 39758
// begin tmp := [ ] ;
39649: LD_ADDR_VAR 0 19
39653: PUSH
39654: EMPTY
39655: ST_TO_ADDR
// for j in f do
39656: LD_ADDR_VAR 0 9
39660: PUSH
39661: LD_VAR 0 12
39665: PUSH
39666: FOR_IN
39667: IFFALSE 39740
// if GetBType ( j ) = b_bunker then
39669: LD_VAR 0 9
39673: PPUSH
39674: CALL_OW 266
39678: PUSH
39679: LD_INT 32
39681: EQUAL
39682: IFFALSE 39709
// tmp := Insert ( tmp , 1 , j ) else
39684: LD_ADDR_VAR 0 19
39688: PUSH
39689: LD_VAR 0 19
39693: PPUSH
39694: LD_INT 1
39696: PPUSH
39697: LD_VAR 0 9
39701: PPUSH
39702: CALL_OW 2
39706: ST_TO_ADDR
39707: GO 39738
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39709: LD_ADDR_VAR 0 19
39713: PUSH
39714: LD_VAR 0 19
39718: PPUSH
39719: LD_VAR 0 19
39723: PUSH
39724: LD_INT 1
39726: PLUS
39727: PPUSH
39728: LD_VAR 0 9
39732: PPUSH
39733: CALL_OW 2
39737: ST_TO_ADDR
39738: GO 39666
39740: POP
39741: POP
// if tmp then
39742: LD_VAR 0 19
39746: IFFALSE 39758
// f := tmp ;
39748: LD_ADDR_VAR 0 12
39752: PUSH
39753: LD_VAR 0 19
39757: ST_TO_ADDR
// end ; x := personel [ i ] ;
39758: LD_ADDR_VAR 0 13
39762: PUSH
39763: LD_VAR 0 6
39767: PUSH
39768: LD_VAR 0 8
39772: ARRAY
39773: ST_TO_ADDR
// if x = - 1 then
39774: LD_VAR 0 13
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: EQUAL
39783: IFFALSE 39992
// begin for j in f do
39785: LD_ADDR_VAR 0 9
39789: PUSH
39790: LD_VAR 0 12
39794: PUSH
39795: FOR_IN
39796: IFFALSE 39988
// repeat InitHc ;
39798: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39802: LD_VAR 0 9
39806: PPUSH
39807: CALL_OW 266
39811: PUSH
39812: LD_INT 5
39814: EQUAL
39815: IFFALSE 39885
// begin if UnitsInside ( j ) < 3 then
39817: LD_VAR 0 9
39821: PPUSH
39822: CALL_OW 313
39826: PUSH
39827: LD_INT 3
39829: LESS
39830: IFFALSE 39866
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39832: LD_INT 0
39834: PPUSH
39835: LD_INT 5
39837: PUSH
39838: LD_INT 8
39840: PUSH
39841: LD_INT 9
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: LIST
39848: PUSH
39849: LD_VAR 0 17
39853: ARRAY
39854: PPUSH
39855: LD_VAR 0 4
39859: PPUSH
39860: CALL_OW 380
39864: GO 39883
// PrepareHuman ( false , i , skill ) ;
39866: LD_INT 0
39868: PPUSH
39869: LD_VAR 0 8
39873: PPUSH
39874: LD_VAR 0 4
39878: PPUSH
39879: CALL_OW 380
// end else
39883: GO 39902
// PrepareHuman ( false , i , skill ) ;
39885: LD_INT 0
39887: PPUSH
39888: LD_VAR 0 8
39892: PPUSH
39893: LD_VAR 0 4
39897: PPUSH
39898: CALL_OW 380
// un := CreateHuman ;
39902: LD_ADDR_VAR 0 14
39906: PUSH
39907: CALL_OW 44
39911: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39912: LD_ADDR_VAR 0 7
39916: PUSH
39917: LD_VAR 0 7
39921: PPUSH
39922: LD_INT 1
39924: PPUSH
39925: LD_VAR 0 14
39929: PPUSH
39930: CALL_OW 2
39934: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39935: LD_VAR 0 14
39939: PPUSH
39940: LD_VAR 0 9
39944: PPUSH
39945: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39949: LD_VAR 0 9
39953: PPUSH
39954: CALL_OW 313
39958: PUSH
39959: LD_INT 6
39961: EQUAL
39962: PUSH
39963: LD_VAR 0 9
39967: PPUSH
39968: CALL_OW 266
39972: PUSH
39973: LD_INT 32
39975: PUSH
39976: LD_INT 31
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: IN
39983: OR
39984: IFFALSE 39798
39986: GO 39795
39988: POP
39989: POP
// end else
39990: GO 40372
// for j = 1 to x do
39992: LD_ADDR_VAR 0 9
39996: PUSH
39997: DOUBLE
39998: LD_INT 1
40000: DEC
40001: ST_TO_ADDR
40002: LD_VAR 0 13
40006: PUSH
40007: FOR_TO
40008: IFFALSE 40370
// begin InitHc ;
40010: CALL_OW 19
// if not f then
40014: LD_VAR 0 12
40018: NOT
40019: IFFALSE 40108
// begin PrepareHuman ( false , i , skill ) ;
40021: LD_INT 0
40023: PPUSH
40024: LD_VAR 0 8
40028: PPUSH
40029: LD_VAR 0 4
40033: PPUSH
40034: CALL_OW 380
// un := CreateHuman ;
40038: LD_ADDR_VAR 0 14
40042: PUSH
40043: CALL_OW 44
40047: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40048: LD_ADDR_VAR 0 7
40052: PUSH
40053: LD_VAR 0 7
40057: PPUSH
40058: LD_INT 1
40060: PPUSH
40061: LD_VAR 0 14
40065: PPUSH
40066: CALL_OW 2
40070: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40071: LD_VAR 0 14
40075: PPUSH
40076: LD_VAR 0 1
40080: PPUSH
40081: CALL_OW 250
40085: PPUSH
40086: LD_VAR 0 1
40090: PPUSH
40091: CALL_OW 251
40095: PPUSH
40096: LD_INT 10
40098: PPUSH
40099: LD_INT 0
40101: PPUSH
40102: CALL_OW 50
// continue ;
40106: GO 40007
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40108: LD_VAR 0 12
40112: PUSH
40113: LD_INT 1
40115: ARRAY
40116: PPUSH
40117: CALL_OW 313
40121: PUSH
40122: LD_VAR 0 12
40126: PUSH
40127: LD_INT 1
40129: ARRAY
40130: PPUSH
40131: CALL_OW 266
40135: PUSH
40136: LD_INT 32
40138: PUSH
40139: LD_INT 31
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: IN
40146: AND
40147: PUSH
40148: LD_VAR 0 12
40152: PUSH
40153: LD_INT 1
40155: ARRAY
40156: PPUSH
40157: CALL_OW 313
40161: PUSH
40162: LD_INT 6
40164: EQUAL
40165: OR
40166: IFFALSE 40186
// f := Delete ( f , 1 ) ;
40168: LD_ADDR_VAR 0 12
40172: PUSH
40173: LD_VAR 0 12
40177: PPUSH
40178: LD_INT 1
40180: PPUSH
40181: CALL_OW 3
40185: ST_TO_ADDR
// if not f then
40186: LD_VAR 0 12
40190: NOT
40191: IFFALSE 40209
// begin x := x + 2 ;
40193: LD_ADDR_VAR 0 13
40197: PUSH
40198: LD_VAR 0 13
40202: PUSH
40203: LD_INT 2
40205: PLUS
40206: ST_TO_ADDR
// continue ;
40207: GO 40007
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40209: LD_VAR 0 12
40213: PUSH
40214: LD_INT 1
40216: ARRAY
40217: PPUSH
40218: CALL_OW 266
40222: PUSH
40223: LD_INT 5
40225: EQUAL
40226: IFFALSE 40300
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40228: LD_VAR 0 12
40232: PUSH
40233: LD_INT 1
40235: ARRAY
40236: PPUSH
40237: CALL_OW 313
40241: PUSH
40242: LD_INT 3
40244: LESS
40245: IFFALSE 40281
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40247: LD_INT 0
40249: PPUSH
40250: LD_INT 5
40252: PUSH
40253: LD_INT 8
40255: PUSH
40256: LD_INT 9
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: LIST
40263: PUSH
40264: LD_VAR 0 17
40268: ARRAY
40269: PPUSH
40270: LD_VAR 0 4
40274: PPUSH
40275: CALL_OW 380
40279: GO 40298
// PrepareHuman ( false , i , skill ) ;
40281: LD_INT 0
40283: PPUSH
40284: LD_VAR 0 8
40288: PPUSH
40289: LD_VAR 0 4
40293: PPUSH
40294: CALL_OW 380
// end else
40298: GO 40317
// PrepareHuman ( false , i , skill ) ;
40300: LD_INT 0
40302: PPUSH
40303: LD_VAR 0 8
40307: PPUSH
40308: LD_VAR 0 4
40312: PPUSH
40313: CALL_OW 380
// un := CreateHuman ;
40317: LD_ADDR_VAR 0 14
40321: PUSH
40322: CALL_OW 44
40326: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40327: LD_ADDR_VAR 0 7
40331: PUSH
40332: LD_VAR 0 7
40336: PPUSH
40337: LD_INT 1
40339: PPUSH
40340: LD_VAR 0 14
40344: PPUSH
40345: CALL_OW 2
40349: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40350: LD_VAR 0 14
40354: PPUSH
40355: LD_VAR 0 12
40359: PUSH
40360: LD_INT 1
40362: ARRAY
40363: PPUSH
40364: CALL_OW 52
// end ;
40368: GO 40007
40370: POP
40371: POP
// end ;
40372: GO 39309
40374: POP
40375: POP
// result := result ^ buildings ;
40376: LD_ADDR_VAR 0 7
40380: PUSH
40381: LD_VAR 0 7
40385: PUSH
40386: LD_VAR 0 18
40390: ADD
40391: ST_TO_ADDR
// end else
40392: GO 40535
// begin for i = 1 to personel do
40394: LD_ADDR_VAR 0 8
40398: PUSH
40399: DOUBLE
40400: LD_INT 1
40402: DEC
40403: ST_TO_ADDR
40404: LD_VAR 0 6
40408: PUSH
40409: FOR_TO
40410: IFFALSE 40533
// begin if i > 4 then
40412: LD_VAR 0 8
40416: PUSH
40417: LD_INT 4
40419: GREATER
40420: IFFALSE 40424
// break ;
40422: GO 40533
// x := personel [ i ] ;
40424: LD_ADDR_VAR 0 13
40428: PUSH
40429: LD_VAR 0 6
40433: PUSH
40434: LD_VAR 0 8
40438: ARRAY
40439: ST_TO_ADDR
// if x = - 1 then
40440: LD_VAR 0 13
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: EQUAL
40449: IFFALSE 40453
// continue ;
40451: GO 40409
// PrepareHuman ( false , i , skill ) ;
40453: LD_INT 0
40455: PPUSH
40456: LD_VAR 0 8
40460: PPUSH
40461: LD_VAR 0 4
40465: PPUSH
40466: CALL_OW 380
// un := CreateHuman ;
40470: LD_ADDR_VAR 0 14
40474: PUSH
40475: CALL_OW 44
40479: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40480: LD_VAR 0 14
40484: PPUSH
40485: LD_VAR 0 1
40489: PPUSH
40490: CALL_OW 250
40494: PPUSH
40495: LD_VAR 0 1
40499: PPUSH
40500: CALL_OW 251
40504: PPUSH
40505: LD_INT 10
40507: PPUSH
40508: LD_INT 0
40510: PPUSH
40511: CALL_OW 50
// result := result ^ un ;
40515: LD_ADDR_VAR 0 7
40519: PUSH
40520: LD_VAR 0 7
40524: PUSH
40525: LD_VAR 0 14
40529: ADD
40530: ST_TO_ADDR
// end ;
40531: GO 40409
40533: POP
40534: POP
// end ; end ;
40535: LD_VAR 0 7
40539: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40540: LD_INT 0
40542: PPUSH
40543: PPUSH
40544: PPUSH
40545: PPUSH
40546: PPUSH
40547: PPUSH
40548: PPUSH
40549: PPUSH
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
// result := false ;
40558: LD_ADDR_VAR 0 3
40562: PUSH
40563: LD_INT 0
40565: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40566: LD_VAR 0 1
40570: NOT
40571: PUSH
40572: LD_VAR 0 1
40576: PPUSH
40577: CALL_OW 266
40581: PUSH
40582: LD_INT 32
40584: PUSH
40585: LD_INT 33
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: IN
40592: NOT
40593: OR
40594: IFFALSE 40598
// exit ;
40596: GO 41707
// nat := GetNation ( tower ) ;
40598: LD_ADDR_VAR 0 12
40602: PUSH
40603: LD_VAR 0 1
40607: PPUSH
40608: CALL_OW 248
40612: ST_TO_ADDR
// side := GetSide ( tower ) ;
40613: LD_ADDR_VAR 0 16
40617: PUSH
40618: LD_VAR 0 1
40622: PPUSH
40623: CALL_OW 255
40627: ST_TO_ADDR
// x := GetX ( tower ) ;
40628: LD_ADDR_VAR 0 10
40632: PUSH
40633: LD_VAR 0 1
40637: PPUSH
40638: CALL_OW 250
40642: ST_TO_ADDR
// y := GetY ( tower ) ;
40643: LD_ADDR_VAR 0 11
40647: PUSH
40648: LD_VAR 0 1
40652: PPUSH
40653: CALL_OW 251
40657: ST_TO_ADDR
// if not x or not y then
40658: LD_VAR 0 10
40662: NOT
40663: PUSH
40664: LD_VAR 0 11
40668: NOT
40669: OR
40670: IFFALSE 40674
// exit ;
40672: GO 41707
// weapon := 0 ;
40674: LD_ADDR_VAR 0 18
40678: PUSH
40679: LD_INT 0
40681: ST_TO_ADDR
// fac_list := [ ] ;
40682: LD_ADDR_VAR 0 17
40686: PUSH
40687: EMPTY
40688: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40689: LD_ADDR_VAR 0 6
40693: PUSH
40694: LD_VAR 0 1
40698: PPUSH
40699: CALL_OW 274
40703: PPUSH
40704: LD_VAR 0 2
40708: PPUSH
40709: LD_INT 0
40711: PPUSH
40712: CALL 38278 0 3
40716: PPUSH
40717: LD_INT 30
40719: PUSH
40720: LD_INT 3
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PPUSH
40727: CALL_OW 72
40731: ST_TO_ADDR
// if not factories then
40732: LD_VAR 0 6
40736: NOT
40737: IFFALSE 40741
// exit ;
40739: GO 41707
// for i in factories do
40741: LD_ADDR_VAR 0 8
40745: PUSH
40746: LD_VAR 0 6
40750: PUSH
40751: FOR_IN
40752: IFFALSE 40777
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40754: LD_ADDR_VAR 0 17
40758: PUSH
40759: LD_VAR 0 17
40763: PUSH
40764: LD_VAR 0 8
40768: PPUSH
40769: CALL_OW 478
40773: UNION
40774: ST_TO_ADDR
40775: GO 40751
40777: POP
40778: POP
// if not fac_list then
40779: LD_VAR 0 17
40783: NOT
40784: IFFALSE 40788
// exit ;
40786: GO 41707
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40788: LD_ADDR_VAR 0 5
40792: PUSH
40793: LD_INT 4
40795: PUSH
40796: LD_INT 5
40798: PUSH
40799: LD_INT 9
40801: PUSH
40802: LD_INT 10
40804: PUSH
40805: LD_INT 6
40807: PUSH
40808: LD_INT 7
40810: PUSH
40811: LD_INT 11
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 27
40825: PUSH
40826: LD_INT 28
40828: PUSH
40829: LD_INT 26
40831: PUSH
40832: LD_INT 30
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 43
40843: PUSH
40844: LD_INT 44
40846: PUSH
40847: LD_INT 46
40849: PUSH
40850: LD_INT 45
40852: PUSH
40853: LD_INT 47
40855: PUSH
40856: LD_INT 49
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: LIST
40871: PUSH
40872: LD_VAR 0 12
40876: ARRAY
40877: ST_TO_ADDR
// list := list isect fac_list ;
40878: LD_ADDR_VAR 0 5
40882: PUSH
40883: LD_VAR 0 5
40887: PUSH
40888: LD_VAR 0 17
40892: ISECT
40893: ST_TO_ADDR
// if not list then
40894: LD_VAR 0 5
40898: NOT
40899: IFFALSE 40903
// exit ;
40901: GO 41707
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40903: LD_VAR 0 12
40907: PUSH
40908: LD_INT 3
40910: EQUAL
40911: PUSH
40912: LD_INT 49
40914: PUSH
40915: LD_VAR 0 5
40919: IN
40920: AND
40921: PUSH
40922: LD_INT 31
40924: PPUSH
40925: LD_VAR 0 16
40929: PPUSH
40930: CALL_OW 321
40934: PUSH
40935: LD_INT 2
40937: EQUAL
40938: AND
40939: IFFALSE 40999
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40941: LD_INT 22
40943: PUSH
40944: LD_VAR 0 16
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 35
40955: PUSH
40956: LD_INT 49
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 91
40965: PUSH
40966: LD_VAR 0 1
40970: PUSH
40971: LD_INT 10
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: LIST
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: LIST
40983: PPUSH
40984: CALL_OW 69
40988: NOT
40989: IFFALSE 40999
// weapon := ru_time_lapser ;
40991: LD_ADDR_VAR 0 18
40995: PUSH
40996: LD_INT 49
40998: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40999: LD_VAR 0 12
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: LD_INT 2
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: IN
41014: PUSH
41015: LD_INT 11
41017: PUSH
41018: LD_VAR 0 5
41022: IN
41023: PUSH
41024: LD_INT 30
41026: PUSH
41027: LD_VAR 0 5
41031: IN
41032: OR
41033: AND
41034: PUSH
41035: LD_INT 6
41037: PPUSH
41038: LD_VAR 0 16
41042: PPUSH
41043: CALL_OW 321
41047: PUSH
41048: LD_INT 2
41050: EQUAL
41051: AND
41052: IFFALSE 41217
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41054: LD_INT 22
41056: PUSH
41057: LD_VAR 0 16
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: LD_INT 35
41071: PUSH
41072: LD_INT 11
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 35
41081: PUSH
41082: LD_INT 30
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 91
41096: PUSH
41097: LD_VAR 0 1
41101: PUSH
41102: LD_INT 18
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: LIST
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: LIST
41114: PPUSH
41115: CALL_OW 69
41119: NOT
41120: PUSH
41121: LD_INT 22
41123: PUSH
41124: LD_VAR 0 16
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 2
41135: PUSH
41136: LD_INT 30
41138: PUSH
41139: LD_INT 32
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 30
41148: PUSH
41149: LD_INT 33
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 91
41163: PUSH
41164: LD_VAR 0 1
41168: PUSH
41169: LD_INT 12
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: LIST
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: LIST
41181: PUSH
41182: EMPTY
41183: LIST
41184: PPUSH
41185: CALL_OW 69
41189: PUSH
41190: LD_INT 2
41192: GREATER
41193: AND
41194: IFFALSE 41217
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41196: LD_ADDR_VAR 0 18
41200: PUSH
41201: LD_INT 11
41203: PUSH
41204: LD_INT 30
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_VAR 0 12
41215: ARRAY
41216: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41217: LD_VAR 0 18
41221: NOT
41222: PUSH
41223: LD_INT 40
41225: PPUSH
41226: LD_VAR 0 16
41230: PPUSH
41231: CALL_OW 321
41235: PUSH
41236: LD_INT 2
41238: EQUAL
41239: AND
41240: PUSH
41241: LD_INT 7
41243: PUSH
41244: LD_VAR 0 5
41248: IN
41249: PUSH
41250: LD_INT 28
41252: PUSH
41253: LD_VAR 0 5
41257: IN
41258: OR
41259: PUSH
41260: LD_INT 45
41262: PUSH
41263: LD_VAR 0 5
41267: IN
41268: OR
41269: AND
41270: IFFALSE 41524
// begin hex := GetHexInfo ( x , y ) ;
41272: LD_ADDR_VAR 0 4
41276: PUSH
41277: LD_VAR 0 10
41281: PPUSH
41282: LD_VAR 0 11
41286: PPUSH
41287: CALL_OW 546
41291: ST_TO_ADDR
// if hex [ 1 ] then
41292: LD_VAR 0 4
41296: PUSH
41297: LD_INT 1
41299: ARRAY
41300: IFFALSE 41304
// exit ;
41302: GO 41707
// height := hex [ 2 ] ;
41304: LD_ADDR_VAR 0 15
41308: PUSH
41309: LD_VAR 0 4
41313: PUSH
41314: LD_INT 2
41316: ARRAY
41317: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41318: LD_ADDR_VAR 0 14
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: LD_INT 2
41328: PUSH
41329: LD_INT 3
41331: PUSH
41332: LD_INT 5
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: ST_TO_ADDR
// for i in tmp do
41341: LD_ADDR_VAR 0 8
41345: PUSH
41346: LD_VAR 0 14
41350: PUSH
41351: FOR_IN
41352: IFFALSE 41522
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41354: LD_ADDR_VAR 0 9
41358: PUSH
41359: LD_VAR 0 10
41363: PPUSH
41364: LD_VAR 0 8
41368: PPUSH
41369: LD_INT 5
41371: PPUSH
41372: CALL_OW 272
41376: PUSH
41377: LD_VAR 0 11
41381: PPUSH
41382: LD_VAR 0 8
41386: PPUSH
41387: LD_INT 5
41389: PPUSH
41390: CALL_OW 273
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41399: LD_VAR 0 9
41403: PUSH
41404: LD_INT 1
41406: ARRAY
41407: PPUSH
41408: LD_VAR 0 9
41412: PUSH
41413: LD_INT 2
41415: ARRAY
41416: PPUSH
41417: CALL_OW 488
41421: IFFALSE 41520
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41423: LD_ADDR_VAR 0 4
41427: PUSH
41428: LD_VAR 0 9
41432: PUSH
41433: LD_INT 1
41435: ARRAY
41436: PPUSH
41437: LD_VAR 0 9
41441: PUSH
41442: LD_INT 2
41444: ARRAY
41445: PPUSH
41446: CALL_OW 546
41450: ST_TO_ADDR
// if hex [ 1 ] then
41451: LD_VAR 0 4
41455: PUSH
41456: LD_INT 1
41458: ARRAY
41459: IFFALSE 41463
// continue ;
41461: GO 41351
// h := hex [ 2 ] ;
41463: LD_ADDR_VAR 0 13
41467: PUSH
41468: LD_VAR 0 4
41472: PUSH
41473: LD_INT 2
41475: ARRAY
41476: ST_TO_ADDR
// if h + 7 < height then
41477: LD_VAR 0 13
41481: PUSH
41482: LD_INT 7
41484: PLUS
41485: PUSH
41486: LD_VAR 0 15
41490: LESS
41491: IFFALSE 41520
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41493: LD_ADDR_VAR 0 18
41497: PUSH
41498: LD_INT 7
41500: PUSH
41501: LD_INT 28
41503: PUSH
41504: LD_INT 45
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: LIST
41511: PUSH
41512: LD_VAR 0 12
41516: ARRAY
41517: ST_TO_ADDR
// break ;
41518: GO 41522
// end ; end ; end ;
41520: GO 41351
41522: POP
41523: POP
// end ; if not weapon then
41524: LD_VAR 0 18
41528: NOT
41529: IFFALSE 41589
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41531: LD_ADDR_VAR 0 5
41535: PUSH
41536: LD_VAR 0 5
41540: PUSH
41541: LD_INT 11
41543: PUSH
41544: LD_INT 30
41546: PUSH
41547: LD_INT 49
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: LIST
41554: DIFF
41555: ST_TO_ADDR
// if not list then
41556: LD_VAR 0 5
41560: NOT
41561: IFFALSE 41565
// exit ;
41563: GO 41707
// weapon := list [ rand ( 1 , list ) ] ;
41565: LD_ADDR_VAR 0 18
41569: PUSH
41570: LD_VAR 0 5
41574: PUSH
41575: LD_INT 1
41577: PPUSH
41578: LD_VAR 0 5
41582: PPUSH
41583: CALL_OW 12
41587: ARRAY
41588: ST_TO_ADDR
// end ; if weapon then
41589: LD_VAR 0 18
41593: IFFALSE 41707
// begin tmp := CostOfWeapon ( weapon ) ;
41595: LD_ADDR_VAR 0 14
41599: PUSH
41600: LD_VAR 0 18
41604: PPUSH
41605: CALL_OW 451
41609: ST_TO_ADDR
// j := GetBase ( tower ) ;
41610: LD_ADDR_VAR 0 9
41614: PUSH
41615: LD_VAR 0 1
41619: PPUSH
41620: CALL_OW 274
41624: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41625: LD_VAR 0 9
41629: PPUSH
41630: LD_INT 1
41632: PPUSH
41633: CALL_OW 275
41637: PUSH
41638: LD_VAR 0 14
41642: PUSH
41643: LD_INT 1
41645: ARRAY
41646: GREATEREQUAL
41647: PUSH
41648: LD_VAR 0 9
41652: PPUSH
41653: LD_INT 2
41655: PPUSH
41656: CALL_OW 275
41660: PUSH
41661: LD_VAR 0 14
41665: PUSH
41666: LD_INT 2
41668: ARRAY
41669: GREATEREQUAL
41670: AND
41671: PUSH
41672: LD_VAR 0 9
41676: PPUSH
41677: LD_INT 3
41679: PPUSH
41680: CALL_OW 275
41684: PUSH
41685: LD_VAR 0 14
41689: PUSH
41690: LD_INT 3
41692: ARRAY
41693: GREATEREQUAL
41694: AND
41695: IFFALSE 41707
// result := weapon ;
41697: LD_ADDR_VAR 0 3
41701: PUSH
41702: LD_VAR 0 18
41706: ST_TO_ADDR
// end ; end ;
41707: LD_VAR 0 3
41711: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41712: LD_INT 0
41714: PPUSH
41715: PPUSH
// result := true ;
41716: LD_ADDR_VAR 0 3
41720: PUSH
41721: LD_INT 1
41723: ST_TO_ADDR
// if array1 = array2 then
41724: LD_VAR 0 1
41728: PUSH
41729: LD_VAR 0 2
41733: EQUAL
41734: IFFALSE 41794
// begin for i = 1 to array1 do
41736: LD_ADDR_VAR 0 4
41740: PUSH
41741: DOUBLE
41742: LD_INT 1
41744: DEC
41745: ST_TO_ADDR
41746: LD_VAR 0 1
41750: PUSH
41751: FOR_TO
41752: IFFALSE 41790
// if array1 [ i ] <> array2 [ i ] then
41754: LD_VAR 0 1
41758: PUSH
41759: LD_VAR 0 4
41763: ARRAY
41764: PUSH
41765: LD_VAR 0 2
41769: PUSH
41770: LD_VAR 0 4
41774: ARRAY
41775: NONEQUAL
41776: IFFALSE 41788
// begin result := false ;
41778: LD_ADDR_VAR 0 3
41782: PUSH
41783: LD_INT 0
41785: ST_TO_ADDR
// break ;
41786: GO 41790
// end ;
41788: GO 41751
41790: POP
41791: POP
// end else
41792: GO 41802
// result := false ;
41794: LD_ADDR_VAR 0 3
41798: PUSH
41799: LD_INT 0
41801: ST_TO_ADDR
// end ;
41802: LD_VAR 0 3
41806: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41807: LD_INT 0
41809: PPUSH
41810: PPUSH
// if not array1 or not array2 then
41811: LD_VAR 0 1
41815: NOT
41816: PUSH
41817: LD_VAR 0 2
41821: NOT
41822: OR
41823: IFFALSE 41827
// exit ;
41825: GO 41891
// result := true ;
41827: LD_ADDR_VAR 0 3
41831: PUSH
41832: LD_INT 1
41834: ST_TO_ADDR
// for i = 1 to array1 do
41835: LD_ADDR_VAR 0 4
41839: PUSH
41840: DOUBLE
41841: LD_INT 1
41843: DEC
41844: ST_TO_ADDR
41845: LD_VAR 0 1
41849: PUSH
41850: FOR_TO
41851: IFFALSE 41889
// if array1 [ i ] <> array2 [ i ] then
41853: LD_VAR 0 1
41857: PUSH
41858: LD_VAR 0 4
41862: ARRAY
41863: PUSH
41864: LD_VAR 0 2
41868: PUSH
41869: LD_VAR 0 4
41873: ARRAY
41874: NONEQUAL
41875: IFFALSE 41887
// begin result := false ;
41877: LD_ADDR_VAR 0 3
41881: PUSH
41882: LD_INT 0
41884: ST_TO_ADDR
// break ;
41885: GO 41889
// end ;
41887: GO 41850
41889: POP
41890: POP
// end ;
41891: LD_VAR 0 3
41895: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41896: LD_INT 0
41898: PPUSH
41899: PPUSH
41900: PPUSH
// pom := GetBase ( fac ) ;
41901: LD_ADDR_VAR 0 5
41905: PUSH
41906: LD_VAR 0 1
41910: PPUSH
41911: CALL_OW 274
41915: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41916: LD_ADDR_VAR 0 4
41920: PUSH
41921: LD_VAR 0 2
41925: PUSH
41926: LD_INT 1
41928: ARRAY
41929: PPUSH
41930: LD_VAR 0 2
41934: PUSH
41935: LD_INT 2
41937: ARRAY
41938: PPUSH
41939: LD_VAR 0 2
41943: PUSH
41944: LD_INT 3
41946: ARRAY
41947: PPUSH
41948: LD_VAR 0 2
41952: PUSH
41953: LD_INT 4
41955: ARRAY
41956: PPUSH
41957: CALL_OW 449
41961: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41962: LD_ADDR_VAR 0 3
41966: PUSH
41967: LD_VAR 0 5
41971: PPUSH
41972: LD_INT 1
41974: PPUSH
41975: CALL_OW 275
41979: PUSH
41980: LD_VAR 0 4
41984: PUSH
41985: LD_INT 1
41987: ARRAY
41988: GREATEREQUAL
41989: PUSH
41990: LD_VAR 0 5
41994: PPUSH
41995: LD_INT 2
41997: PPUSH
41998: CALL_OW 275
42002: PUSH
42003: LD_VAR 0 4
42007: PUSH
42008: LD_INT 2
42010: ARRAY
42011: GREATEREQUAL
42012: AND
42013: PUSH
42014: LD_VAR 0 5
42018: PPUSH
42019: LD_INT 3
42021: PPUSH
42022: CALL_OW 275
42026: PUSH
42027: LD_VAR 0 4
42031: PUSH
42032: LD_INT 3
42034: ARRAY
42035: GREATEREQUAL
42036: AND
42037: ST_TO_ADDR
// end ;
42038: LD_VAR 0 3
42042: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42043: LD_INT 0
42045: PPUSH
42046: PPUSH
42047: PPUSH
42048: PPUSH
// pom := GetBase ( building ) ;
42049: LD_ADDR_VAR 0 3
42053: PUSH
42054: LD_VAR 0 1
42058: PPUSH
42059: CALL_OW 274
42063: ST_TO_ADDR
// if not pom then
42064: LD_VAR 0 3
42068: NOT
42069: IFFALSE 42073
// exit ;
42071: GO 42243
// btype := GetBType ( building ) ;
42073: LD_ADDR_VAR 0 5
42077: PUSH
42078: LD_VAR 0 1
42082: PPUSH
42083: CALL_OW 266
42087: ST_TO_ADDR
// if btype = b_armoury then
42088: LD_VAR 0 5
42092: PUSH
42093: LD_INT 4
42095: EQUAL
42096: IFFALSE 42106
// btype := b_barracks ;
42098: LD_ADDR_VAR 0 5
42102: PUSH
42103: LD_INT 5
42105: ST_TO_ADDR
// if btype = b_depot then
42106: LD_VAR 0 5
42110: PUSH
42111: LD_INT 0
42113: EQUAL
42114: IFFALSE 42124
// btype := b_warehouse ;
42116: LD_ADDR_VAR 0 5
42120: PUSH
42121: LD_INT 1
42123: ST_TO_ADDR
// if btype = b_workshop then
42124: LD_VAR 0 5
42128: PUSH
42129: LD_INT 2
42131: EQUAL
42132: IFFALSE 42142
// btype := b_factory ;
42134: LD_ADDR_VAR 0 5
42138: PUSH
42139: LD_INT 3
42141: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42142: LD_ADDR_VAR 0 4
42146: PUSH
42147: LD_VAR 0 5
42151: PPUSH
42152: LD_VAR 0 1
42156: PPUSH
42157: CALL_OW 248
42161: PPUSH
42162: CALL_OW 450
42166: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42167: LD_ADDR_VAR 0 2
42171: PUSH
42172: LD_VAR 0 3
42176: PPUSH
42177: LD_INT 1
42179: PPUSH
42180: CALL_OW 275
42184: PUSH
42185: LD_VAR 0 4
42189: PUSH
42190: LD_INT 1
42192: ARRAY
42193: GREATEREQUAL
42194: PUSH
42195: LD_VAR 0 3
42199: PPUSH
42200: LD_INT 2
42202: PPUSH
42203: CALL_OW 275
42207: PUSH
42208: LD_VAR 0 4
42212: PUSH
42213: LD_INT 2
42215: ARRAY
42216: GREATEREQUAL
42217: AND
42218: PUSH
42219: LD_VAR 0 3
42223: PPUSH
42224: LD_INT 3
42226: PPUSH
42227: CALL_OW 275
42231: PUSH
42232: LD_VAR 0 4
42236: PUSH
42237: LD_INT 3
42239: ARRAY
42240: GREATEREQUAL
42241: AND
42242: ST_TO_ADDR
// end ;
42243: LD_VAR 0 2
42247: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42248: LD_INT 0
42250: PPUSH
42251: PPUSH
42252: PPUSH
// pom := GetBase ( building ) ;
42253: LD_ADDR_VAR 0 4
42257: PUSH
42258: LD_VAR 0 1
42262: PPUSH
42263: CALL_OW 274
42267: ST_TO_ADDR
// if not pom then
42268: LD_VAR 0 4
42272: NOT
42273: IFFALSE 42277
// exit ;
42275: GO 42378
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42277: LD_ADDR_VAR 0 5
42281: PUSH
42282: LD_VAR 0 2
42286: PPUSH
42287: LD_VAR 0 1
42291: PPUSH
42292: CALL_OW 248
42296: PPUSH
42297: CALL_OW 450
42301: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42302: LD_ADDR_VAR 0 3
42306: PUSH
42307: LD_VAR 0 4
42311: PPUSH
42312: LD_INT 1
42314: PPUSH
42315: CALL_OW 275
42319: PUSH
42320: LD_VAR 0 5
42324: PUSH
42325: LD_INT 1
42327: ARRAY
42328: GREATEREQUAL
42329: PUSH
42330: LD_VAR 0 4
42334: PPUSH
42335: LD_INT 2
42337: PPUSH
42338: CALL_OW 275
42342: PUSH
42343: LD_VAR 0 5
42347: PUSH
42348: LD_INT 2
42350: ARRAY
42351: GREATEREQUAL
42352: AND
42353: PUSH
42354: LD_VAR 0 4
42358: PPUSH
42359: LD_INT 3
42361: PPUSH
42362: CALL_OW 275
42366: PUSH
42367: LD_VAR 0 5
42371: PUSH
42372: LD_INT 3
42374: ARRAY
42375: GREATEREQUAL
42376: AND
42377: ST_TO_ADDR
// end ;
42378: LD_VAR 0 3
42382: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42383: LD_INT 0
42385: PPUSH
42386: PPUSH
42387: PPUSH
42388: PPUSH
42389: PPUSH
42390: PPUSH
42391: PPUSH
42392: PPUSH
42393: PPUSH
42394: PPUSH
42395: PPUSH
// result := false ;
42396: LD_ADDR_VAR 0 8
42400: PUSH
42401: LD_INT 0
42403: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42404: LD_VAR 0 5
42408: NOT
42409: PUSH
42410: LD_VAR 0 1
42414: NOT
42415: OR
42416: PUSH
42417: LD_VAR 0 2
42421: NOT
42422: OR
42423: PUSH
42424: LD_VAR 0 3
42428: NOT
42429: OR
42430: IFFALSE 42434
// exit ;
42432: GO 43248
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42434: LD_ADDR_VAR 0 14
42438: PUSH
42439: LD_VAR 0 1
42443: PPUSH
42444: LD_VAR 0 2
42448: PPUSH
42449: LD_VAR 0 3
42453: PPUSH
42454: LD_VAR 0 4
42458: PPUSH
42459: LD_VAR 0 5
42463: PUSH
42464: LD_INT 1
42466: ARRAY
42467: PPUSH
42468: CALL_OW 248
42472: PPUSH
42473: LD_INT 0
42475: PPUSH
42476: CALL 44481 0 6
42480: ST_TO_ADDR
// if not hexes then
42481: LD_VAR 0 14
42485: NOT
42486: IFFALSE 42490
// exit ;
42488: GO 43248
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42490: LD_ADDR_VAR 0 17
42494: PUSH
42495: LD_VAR 0 5
42499: PPUSH
42500: LD_INT 22
42502: PUSH
42503: LD_VAR 0 13
42507: PPUSH
42508: CALL_OW 255
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 2
42519: PUSH
42520: LD_INT 30
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 30
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: LIST
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PPUSH
42549: CALL_OW 72
42553: ST_TO_ADDR
// for i = 1 to hexes do
42554: LD_ADDR_VAR 0 9
42558: PUSH
42559: DOUBLE
42560: LD_INT 1
42562: DEC
42563: ST_TO_ADDR
42564: LD_VAR 0 14
42568: PUSH
42569: FOR_TO
42570: IFFALSE 43246
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42572: LD_ADDR_VAR 0 13
42576: PUSH
42577: LD_VAR 0 14
42581: PUSH
42582: LD_VAR 0 9
42586: ARRAY
42587: PUSH
42588: LD_INT 1
42590: ARRAY
42591: PPUSH
42592: LD_VAR 0 14
42596: PUSH
42597: LD_VAR 0 9
42601: ARRAY
42602: PUSH
42603: LD_INT 2
42605: ARRAY
42606: PPUSH
42607: CALL_OW 428
42611: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42612: LD_VAR 0 14
42616: PUSH
42617: LD_VAR 0 9
42621: ARRAY
42622: PUSH
42623: LD_INT 1
42625: ARRAY
42626: PPUSH
42627: LD_VAR 0 14
42631: PUSH
42632: LD_VAR 0 9
42636: ARRAY
42637: PUSH
42638: LD_INT 2
42640: ARRAY
42641: PPUSH
42642: CALL_OW 351
42646: PUSH
42647: LD_VAR 0 14
42651: PUSH
42652: LD_VAR 0 9
42656: ARRAY
42657: PUSH
42658: LD_INT 1
42660: ARRAY
42661: PPUSH
42662: LD_VAR 0 14
42666: PUSH
42667: LD_VAR 0 9
42671: ARRAY
42672: PUSH
42673: LD_INT 2
42675: ARRAY
42676: PPUSH
42677: CALL_OW 488
42681: NOT
42682: OR
42683: PUSH
42684: LD_VAR 0 13
42688: PPUSH
42689: CALL_OW 247
42693: PUSH
42694: LD_INT 3
42696: EQUAL
42697: OR
42698: IFFALSE 42704
// exit ;
42700: POP
42701: POP
42702: GO 43248
// if not tmp then
42704: LD_VAR 0 13
42708: NOT
42709: IFFALSE 42713
// continue ;
42711: GO 42569
// result := true ;
42713: LD_ADDR_VAR 0 8
42717: PUSH
42718: LD_INT 1
42720: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42721: LD_VAR 0 6
42725: PUSH
42726: LD_VAR 0 13
42730: PPUSH
42731: CALL_OW 247
42735: PUSH
42736: LD_INT 2
42738: EQUAL
42739: AND
42740: PUSH
42741: LD_VAR 0 13
42745: PPUSH
42746: CALL_OW 263
42750: PUSH
42751: LD_INT 1
42753: EQUAL
42754: AND
42755: IFFALSE 42919
// begin if IsDrivenBy ( tmp ) then
42757: LD_VAR 0 13
42761: PPUSH
42762: CALL_OW 311
42766: IFFALSE 42770
// continue ;
42768: GO 42569
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42770: LD_VAR 0 6
42774: PPUSH
42775: LD_INT 3
42777: PUSH
42778: LD_INT 60
42780: PUSH
42781: EMPTY
42782: LIST
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 3
42790: PUSH
42791: LD_INT 55
42793: PUSH
42794: EMPTY
42795: LIST
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PPUSH
42805: CALL_OW 72
42809: IFFALSE 42917
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42811: LD_ADDR_VAR 0 18
42815: PUSH
42816: LD_VAR 0 6
42820: PPUSH
42821: LD_INT 3
42823: PUSH
42824: LD_INT 60
42826: PUSH
42827: EMPTY
42828: LIST
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 3
42836: PUSH
42837: LD_INT 55
42839: PUSH
42840: EMPTY
42841: LIST
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PPUSH
42851: CALL_OW 72
42855: PUSH
42856: LD_INT 1
42858: ARRAY
42859: ST_TO_ADDR
// if IsInUnit ( driver ) then
42860: LD_VAR 0 18
42864: PPUSH
42865: CALL_OW 310
42869: IFFALSE 42880
// ComExit ( driver ) ;
42871: LD_VAR 0 18
42875: PPUSH
42876: CALL 68261 0 1
// AddComEnterUnit ( driver , tmp ) ;
42880: LD_VAR 0 18
42884: PPUSH
42885: LD_VAR 0 13
42889: PPUSH
42890: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42894: LD_VAR 0 18
42898: PPUSH
42899: LD_VAR 0 7
42903: PPUSH
42904: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42908: LD_VAR 0 18
42912: PPUSH
42913: CALL_OW 181
// end ; continue ;
42917: GO 42569
// end ; if not cleaners or not tmp in cleaners then
42919: LD_VAR 0 6
42923: NOT
42924: PUSH
42925: LD_VAR 0 13
42929: PUSH
42930: LD_VAR 0 6
42934: IN
42935: NOT
42936: OR
42937: IFFALSE 43244
// begin if dep then
42939: LD_VAR 0 17
42943: IFFALSE 43079
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42945: LD_ADDR_VAR 0 16
42949: PUSH
42950: LD_VAR 0 17
42954: PUSH
42955: LD_INT 1
42957: ARRAY
42958: PPUSH
42959: CALL_OW 250
42963: PPUSH
42964: LD_VAR 0 17
42968: PUSH
42969: LD_INT 1
42971: ARRAY
42972: PPUSH
42973: CALL_OW 254
42977: PPUSH
42978: LD_INT 5
42980: PPUSH
42981: CALL_OW 272
42985: PUSH
42986: LD_VAR 0 17
42990: PUSH
42991: LD_INT 1
42993: ARRAY
42994: PPUSH
42995: CALL_OW 251
42999: PPUSH
43000: LD_VAR 0 17
43004: PUSH
43005: LD_INT 1
43007: ARRAY
43008: PPUSH
43009: CALL_OW 254
43013: PPUSH
43014: LD_INT 5
43016: PPUSH
43017: CALL_OW 273
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43026: LD_VAR 0 16
43030: PUSH
43031: LD_INT 1
43033: ARRAY
43034: PPUSH
43035: LD_VAR 0 16
43039: PUSH
43040: LD_INT 2
43042: ARRAY
43043: PPUSH
43044: CALL_OW 488
43048: IFFALSE 43079
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43050: LD_VAR 0 13
43054: PPUSH
43055: LD_VAR 0 16
43059: PUSH
43060: LD_INT 1
43062: ARRAY
43063: PPUSH
43064: LD_VAR 0 16
43068: PUSH
43069: LD_INT 2
43071: ARRAY
43072: PPUSH
43073: CALL_OW 111
// continue ;
43077: GO 42569
// end ; end ; r := GetDir ( tmp ) ;
43079: LD_ADDR_VAR 0 15
43083: PUSH
43084: LD_VAR 0 13
43088: PPUSH
43089: CALL_OW 254
43093: ST_TO_ADDR
// if r = 5 then
43094: LD_VAR 0 15
43098: PUSH
43099: LD_INT 5
43101: EQUAL
43102: IFFALSE 43112
// r := 0 ;
43104: LD_ADDR_VAR 0 15
43108: PUSH
43109: LD_INT 0
43111: ST_TO_ADDR
// for j = r to 5 do
43112: LD_ADDR_VAR 0 10
43116: PUSH
43117: DOUBLE
43118: LD_VAR 0 15
43122: DEC
43123: ST_TO_ADDR
43124: LD_INT 5
43126: PUSH
43127: FOR_TO
43128: IFFALSE 43242
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43130: LD_ADDR_VAR 0 11
43134: PUSH
43135: LD_VAR 0 13
43139: PPUSH
43140: CALL_OW 250
43144: PPUSH
43145: LD_VAR 0 10
43149: PPUSH
43150: LD_INT 2
43152: PPUSH
43153: CALL_OW 272
43157: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43158: LD_ADDR_VAR 0 12
43162: PUSH
43163: LD_VAR 0 13
43167: PPUSH
43168: CALL_OW 251
43172: PPUSH
43173: LD_VAR 0 10
43177: PPUSH
43178: LD_INT 2
43180: PPUSH
43181: CALL_OW 273
43185: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43186: LD_VAR 0 11
43190: PPUSH
43191: LD_VAR 0 12
43195: PPUSH
43196: CALL_OW 488
43200: PUSH
43201: LD_VAR 0 11
43205: PPUSH
43206: LD_VAR 0 12
43210: PPUSH
43211: CALL_OW 428
43215: NOT
43216: AND
43217: IFFALSE 43240
// begin ComMoveXY ( tmp , _x , _y ) ;
43219: LD_VAR 0 13
43223: PPUSH
43224: LD_VAR 0 11
43228: PPUSH
43229: LD_VAR 0 12
43233: PPUSH
43234: CALL_OW 111
// break ;
43238: GO 43242
// end ; end ;
43240: GO 43127
43242: POP
43243: POP
// end ; end ;
43244: GO 42569
43246: POP
43247: POP
// end ;
43248: LD_VAR 0 8
43252: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43253: LD_INT 0
43255: PPUSH
// result := true ;
43256: LD_ADDR_VAR 0 3
43260: PUSH
43261: LD_INT 1
43263: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43264: LD_VAR 0 2
43268: PUSH
43269: LD_INT 24
43271: DOUBLE
43272: EQUAL
43273: IFTRUE 43283
43275: LD_INT 33
43277: DOUBLE
43278: EQUAL
43279: IFTRUE 43283
43281: GO 43308
43283: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43284: LD_ADDR_VAR 0 3
43288: PUSH
43289: LD_INT 32
43291: PPUSH
43292: LD_VAR 0 1
43296: PPUSH
43297: CALL_OW 321
43301: PUSH
43302: LD_INT 2
43304: EQUAL
43305: ST_TO_ADDR
43306: GO 43624
43308: LD_INT 20
43310: DOUBLE
43311: EQUAL
43312: IFTRUE 43316
43314: GO 43341
43316: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43317: LD_ADDR_VAR 0 3
43321: PUSH
43322: LD_INT 6
43324: PPUSH
43325: LD_VAR 0 1
43329: PPUSH
43330: CALL_OW 321
43334: PUSH
43335: LD_INT 2
43337: EQUAL
43338: ST_TO_ADDR
43339: GO 43624
43341: LD_INT 22
43343: DOUBLE
43344: EQUAL
43345: IFTRUE 43355
43347: LD_INT 36
43349: DOUBLE
43350: EQUAL
43351: IFTRUE 43355
43353: GO 43380
43355: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43356: LD_ADDR_VAR 0 3
43360: PUSH
43361: LD_INT 15
43363: PPUSH
43364: LD_VAR 0 1
43368: PPUSH
43369: CALL_OW 321
43373: PUSH
43374: LD_INT 2
43376: EQUAL
43377: ST_TO_ADDR
43378: GO 43624
43380: LD_INT 30
43382: DOUBLE
43383: EQUAL
43384: IFTRUE 43388
43386: GO 43413
43388: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43389: LD_ADDR_VAR 0 3
43393: PUSH
43394: LD_INT 20
43396: PPUSH
43397: LD_VAR 0 1
43401: PPUSH
43402: CALL_OW 321
43406: PUSH
43407: LD_INT 2
43409: EQUAL
43410: ST_TO_ADDR
43411: GO 43624
43413: LD_INT 28
43415: DOUBLE
43416: EQUAL
43417: IFTRUE 43427
43419: LD_INT 21
43421: DOUBLE
43422: EQUAL
43423: IFTRUE 43427
43425: GO 43452
43427: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43428: LD_ADDR_VAR 0 3
43432: PUSH
43433: LD_INT 21
43435: PPUSH
43436: LD_VAR 0 1
43440: PPUSH
43441: CALL_OW 321
43445: PUSH
43446: LD_INT 2
43448: EQUAL
43449: ST_TO_ADDR
43450: GO 43624
43452: LD_INT 16
43454: DOUBLE
43455: EQUAL
43456: IFTRUE 43460
43458: GO 43485
43460: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43461: LD_ADDR_VAR 0 3
43465: PUSH
43466: LD_INT 84
43468: PPUSH
43469: LD_VAR 0 1
43473: PPUSH
43474: CALL_OW 321
43478: PUSH
43479: LD_INT 2
43481: EQUAL
43482: ST_TO_ADDR
43483: GO 43624
43485: LD_INT 19
43487: DOUBLE
43488: EQUAL
43489: IFTRUE 43499
43491: LD_INT 23
43493: DOUBLE
43494: EQUAL
43495: IFTRUE 43499
43497: GO 43524
43499: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43500: LD_ADDR_VAR 0 3
43504: PUSH
43505: LD_INT 83
43507: PPUSH
43508: LD_VAR 0 1
43512: PPUSH
43513: CALL_OW 321
43517: PUSH
43518: LD_INT 2
43520: EQUAL
43521: ST_TO_ADDR
43522: GO 43624
43524: LD_INT 17
43526: DOUBLE
43527: EQUAL
43528: IFTRUE 43532
43530: GO 43557
43532: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43533: LD_ADDR_VAR 0 3
43537: PUSH
43538: LD_INT 39
43540: PPUSH
43541: LD_VAR 0 1
43545: PPUSH
43546: CALL_OW 321
43550: PUSH
43551: LD_INT 2
43553: EQUAL
43554: ST_TO_ADDR
43555: GO 43624
43557: LD_INT 18
43559: DOUBLE
43560: EQUAL
43561: IFTRUE 43565
43563: GO 43590
43565: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43566: LD_ADDR_VAR 0 3
43570: PUSH
43571: LD_INT 40
43573: PPUSH
43574: LD_VAR 0 1
43578: PPUSH
43579: CALL_OW 321
43583: PUSH
43584: LD_INT 2
43586: EQUAL
43587: ST_TO_ADDR
43588: GO 43624
43590: LD_INT 27
43592: DOUBLE
43593: EQUAL
43594: IFTRUE 43598
43596: GO 43623
43598: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43599: LD_ADDR_VAR 0 3
43603: PUSH
43604: LD_INT 35
43606: PPUSH
43607: LD_VAR 0 1
43611: PPUSH
43612: CALL_OW 321
43616: PUSH
43617: LD_INT 2
43619: EQUAL
43620: ST_TO_ADDR
43621: GO 43624
43623: POP
// end ;
43624: LD_VAR 0 3
43628: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43629: LD_INT 0
43631: PPUSH
43632: PPUSH
43633: PPUSH
43634: PPUSH
43635: PPUSH
43636: PPUSH
43637: PPUSH
43638: PPUSH
43639: PPUSH
43640: PPUSH
43641: PPUSH
// result := false ;
43642: LD_ADDR_VAR 0 6
43646: PUSH
43647: LD_INT 0
43649: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43650: LD_VAR 0 1
43654: NOT
43655: PUSH
43656: LD_VAR 0 1
43660: PPUSH
43661: CALL_OW 266
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: IN
43676: NOT
43677: OR
43678: PUSH
43679: LD_VAR 0 2
43683: NOT
43684: OR
43685: PUSH
43686: LD_VAR 0 5
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: LD_INT 2
43699: PUSH
43700: LD_INT 3
43702: PUSH
43703: LD_INT 4
43705: PUSH
43706: LD_INT 5
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: IN
43717: NOT
43718: OR
43719: PUSH
43720: LD_VAR 0 3
43724: PPUSH
43725: LD_VAR 0 4
43729: PPUSH
43730: CALL_OW 488
43734: NOT
43735: OR
43736: IFFALSE 43740
// exit ;
43738: GO 44476
// side := GetSide ( depot ) ;
43740: LD_ADDR_VAR 0 9
43744: PUSH
43745: LD_VAR 0 1
43749: PPUSH
43750: CALL_OW 255
43754: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43755: LD_VAR 0 9
43759: PPUSH
43760: LD_VAR 0 2
43764: PPUSH
43765: CALL 43253 0 2
43769: NOT
43770: IFFALSE 43774
// exit ;
43772: GO 44476
// pom := GetBase ( depot ) ;
43774: LD_ADDR_VAR 0 10
43778: PUSH
43779: LD_VAR 0 1
43783: PPUSH
43784: CALL_OW 274
43788: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43789: LD_ADDR_VAR 0 11
43793: PUSH
43794: LD_VAR 0 2
43798: PPUSH
43799: LD_VAR 0 1
43803: PPUSH
43804: CALL_OW 248
43808: PPUSH
43809: CALL_OW 450
43813: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43814: LD_VAR 0 10
43818: PPUSH
43819: LD_INT 1
43821: PPUSH
43822: CALL_OW 275
43826: PUSH
43827: LD_VAR 0 11
43831: PUSH
43832: LD_INT 1
43834: ARRAY
43835: GREATEREQUAL
43836: PUSH
43837: LD_VAR 0 10
43841: PPUSH
43842: LD_INT 2
43844: PPUSH
43845: CALL_OW 275
43849: PUSH
43850: LD_VAR 0 11
43854: PUSH
43855: LD_INT 2
43857: ARRAY
43858: GREATEREQUAL
43859: AND
43860: PUSH
43861: LD_VAR 0 10
43865: PPUSH
43866: LD_INT 3
43868: PPUSH
43869: CALL_OW 275
43873: PUSH
43874: LD_VAR 0 11
43878: PUSH
43879: LD_INT 3
43881: ARRAY
43882: GREATEREQUAL
43883: AND
43884: NOT
43885: IFFALSE 43889
// exit ;
43887: GO 44476
// if GetBType ( depot ) = b_depot then
43889: LD_VAR 0 1
43893: PPUSH
43894: CALL_OW 266
43898: PUSH
43899: LD_INT 0
43901: EQUAL
43902: IFFALSE 43914
// dist := 28 else
43904: LD_ADDR_VAR 0 14
43908: PUSH
43909: LD_INT 28
43911: ST_TO_ADDR
43912: GO 43922
// dist := 36 ;
43914: LD_ADDR_VAR 0 14
43918: PUSH
43919: LD_INT 36
43921: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43922: LD_VAR 0 1
43926: PPUSH
43927: LD_VAR 0 3
43931: PPUSH
43932: LD_VAR 0 4
43936: PPUSH
43937: CALL_OW 297
43941: PUSH
43942: LD_VAR 0 14
43946: GREATER
43947: IFFALSE 43951
// exit ;
43949: GO 44476
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43951: LD_ADDR_VAR 0 12
43955: PUSH
43956: LD_VAR 0 2
43960: PPUSH
43961: LD_VAR 0 3
43965: PPUSH
43966: LD_VAR 0 4
43970: PPUSH
43971: LD_VAR 0 5
43975: PPUSH
43976: LD_VAR 0 1
43980: PPUSH
43981: CALL_OW 248
43985: PPUSH
43986: LD_INT 0
43988: PPUSH
43989: CALL 44481 0 6
43993: ST_TO_ADDR
// if not hexes then
43994: LD_VAR 0 12
43998: NOT
43999: IFFALSE 44003
// exit ;
44001: GO 44476
// hex := GetHexInfo ( x , y ) ;
44003: LD_ADDR_VAR 0 15
44007: PUSH
44008: LD_VAR 0 3
44012: PPUSH
44013: LD_VAR 0 4
44017: PPUSH
44018: CALL_OW 546
44022: ST_TO_ADDR
// if hex [ 1 ] then
44023: LD_VAR 0 15
44027: PUSH
44028: LD_INT 1
44030: ARRAY
44031: IFFALSE 44035
// exit ;
44033: GO 44476
// height := hex [ 2 ] ;
44035: LD_ADDR_VAR 0 13
44039: PUSH
44040: LD_VAR 0 15
44044: PUSH
44045: LD_INT 2
44047: ARRAY
44048: ST_TO_ADDR
// for i = 1 to hexes do
44049: LD_ADDR_VAR 0 7
44053: PUSH
44054: DOUBLE
44055: LD_INT 1
44057: DEC
44058: ST_TO_ADDR
44059: LD_VAR 0 12
44063: PUSH
44064: FOR_TO
44065: IFFALSE 44395
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44067: LD_VAR 0 12
44071: PUSH
44072: LD_VAR 0 7
44076: ARRAY
44077: PUSH
44078: LD_INT 1
44080: ARRAY
44081: PPUSH
44082: LD_VAR 0 12
44086: PUSH
44087: LD_VAR 0 7
44091: ARRAY
44092: PUSH
44093: LD_INT 2
44095: ARRAY
44096: PPUSH
44097: CALL_OW 488
44101: NOT
44102: PUSH
44103: LD_VAR 0 12
44107: PUSH
44108: LD_VAR 0 7
44112: ARRAY
44113: PUSH
44114: LD_INT 1
44116: ARRAY
44117: PPUSH
44118: LD_VAR 0 12
44122: PUSH
44123: LD_VAR 0 7
44127: ARRAY
44128: PUSH
44129: LD_INT 2
44131: ARRAY
44132: PPUSH
44133: CALL_OW 428
44137: PUSH
44138: LD_INT 0
44140: GREATER
44141: OR
44142: PUSH
44143: LD_VAR 0 12
44147: PUSH
44148: LD_VAR 0 7
44152: ARRAY
44153: PUSH
44154: LD_INT 1
44156: ARRAY
44157: PPUSH
44158: LD_VAR 0 12
44162: PUSH
44163: LD_VAR 0 7
44167: ARRAY
44168: PUSH
44169: LD_INT 2
44171: ARRAY
44172: PPUSH
44173: CALL_OW 351
44177: OR
44178: IFFALSE 44184
// exit ;
44180: POP
44181: POP
44182: GO 44476
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44184: LD_ADDR_VAR 0 8
44188: PUSH
44189: LD_VAR 0 12
44193: PUSH
44194: LD_VAR 0 7
44198: ARRAY
44199: PUSH
44200: LD_INT 1
44202: ARRAY
44203: PPUSH
44204: LD_VAR 0 12
44208: PUSH
44209: LD_VAR 0 7
44213: ARRAY
44214: PUSH
44215: LD_INT 2
44217: ARRAY
44218: PPUSH
44219: CALL_OW 546
44223: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44224: LD_VAR 0 8
44228: PUSH
44229: LD_INT 1
44231: ARRAY
44232: PUSH
44233: LD_VAR 0 8
44237: PUSH
44238: LD_INT 2
44240: ARRAY
44241: PUSH
44242: LD_VAR 0 13
44246: PUSH
44247: LD_INT 2
44249: PLUS
44250: GREATER
44251: OR
44252: PUSH
44253: LD_VAR 0 8
44257: PUSH
44258: LD_INT 2
44260: ARRAY
44261: PUSH
44262: LD_VAR 0 13
44266: PUSH
44267: LD_INT 2
44269: MINUS
44270: LESS
44271: OR
44272: PUSH
44273: LD_VAR 0 8
44277: PUSH
44278: LD_INT 3
44280: ARRAY
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: LD_INT 8
44287: PUSH
44288: LD_INT 9
44290: PUSH
44291: LD_INT 10
44293: PUSH
44294: LD_INT 11
44296: PUSH
44297: LD_INT 12
44299: PUSH
44300: LD_INT 13
44302: PUSH
44303: LD_INT 16
44305: PUSH
44306: LD_INT 17
44308: PUSH
44309: LD_INT 18
44311: PUSH
44312: LD_INT 19
44314: PUSH
44315: LD_INT 20
44317: PUSH
44318: LD_INT 21
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: IN
44336: NOT
44337: OR
44338: PUSH
44339: LD_VAR 0 8
44343: PUSH
44344: LD_INT 5
44346: ARRAY
44347: NOT
44348: OR
44349: PUSH
44350: LD_VAR 0 8
44354: PUSH
44355: LD_INT 6
44357: ARRAY
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: LD_INT 7
44367: PUSH
44368: LD_INT 9
44370: PUSH
44371: LD_INT 10
44373: PUSH
44374: LD_INT 11
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: IN
44385: NOT
44386: OR
44387: IFFALSE 44393
// exit ;
44389: POP
44390: POP
44391: GO 44476
// end ;
44393: GO 44064
44395: POP
44396: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44397: LD_VAR 0 9
44401: PPUSH
44402: LD_VAR 0 3
44406: PPUSH
44407: LD_VAR 0 4
44411: PPUSH
44412: LD_INT 20
44414: PPUSH
44415: CALL 36428 0 4
44419: PUSH
44420: LD_INT 4
44422: ARRAY
44423: IFFALSE 44427
// exit ;
44425: GO 44476
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44427: LD_VAR 0 2
44431: PUSH
44432: LD_INT 29
44434: PUSH
44435: LD_INT 30
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: IN
44442: PUSH
44443: LD_VAR 0 3
44447: PPUSH
44448: LD_VAR 0 4
44452: PPUSH
44453: LD_VAR 0 9
44457: PPUSH
44458: CALL_OW 440
44462: NOT
44463: AND
44464: IFFALSE 44468
// exit ;
44466: GO 44476
// result := true ;
44468: LD_ADDR_VAR 0 6
44472: PUSH
44473: LD_INT 1
44475: ST_TO_ADDR
// end ;
44476: LD_VAR 0 6
44480: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44481: LD_INT 0
44483: PPUSH
44484: PPUSH
44485: PPUSH
44486: PPUSH
44487: PPUSH
44488: PPUSH
44489: PPUSH
44490: PPUSH
44491: PPUSH
44492: PPUSH
44493: PPUSH
44494: PPUSH
44495: PPUSH
44496: PPUSH
44497: PPUSH
44498: PPUSH
44499: PPUSH
44500: PPUSH
44501: PPUSH
44502: PPUSH
44503: PPUSH
44504: PPUSH
44505: PPUSH
44506: PPUSH
44507: PPUSH
44508: PPUSH
44509: PPUSH
44510: PPUSH
44511: PPUSH
44512: PPUSH
44513: PPUSH
44514: PPUSH
44515: PPUSH
44516: PPUSH
44517: PPUSH
44518: PPUSH
44519: PPUSH
44520: PPUSH
44521: PPUSH
44522: PPUSH
44523: PPUSH
44524: PPUSH
44525: PPUSH
44526: PPUSH
44527: PPUSH
44528: PPUSH
44529: PPUSH
44530: PPUSH
44531: PPUSH
44532: PPUSH
44533: PPUSH
44534: PPUSH
44535: PPUSH
44536: PPUSH
44537: PPUSH
44538: PPUSH
44539: PPUSH
44540: PPUSH
// result = [ ] ;
44541: LD_ADDR_VAR 0 7
44545: PUSH
44546: EMPTY
44547: ST_TO_ADDR
// temp_list = [ ] ;
44548: LD_ADDR_VAR 0 9
44552: PUSH
44553: EMPTY
44554: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44555: LD_VAR 0 4
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: LD_INT 2
44568: PUSH
44569: LD_INT 3
44571: PUSH
44572: LD_INT 4
44574: PUSH
44575: LD_INT 5
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: IN
44586: NOT
44587: PUSH
44588: LD_VAR 0 1
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: IN
44603: PUSH
44604: LD_VAR 0 5
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: LD_INT 3
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: LIST
44622: IN
44623: NOT
44624: AND
44625: OR
44626: IFFALSE 44630
// exit ;
44628: GO 63021
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44630: LD_VAR 0 1
44634: PUSH
44635: LD_INT 6
44637: PUSH
44638: LD_INT 7
44640: PUSH
44641: LD_INT 8
44643: PUSH
44644: LD_INT 13
44646: PUSH
44647: LD_INT 12
44649: PUSH
44650: LD_INT 15
44652: PUSH
44653: LD_INT 11
44655: PUSH
44656: LD_INT 14
44658: PUSH
44659: LD_INT 10
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: IN
44673: IFFALSE 44683
// btype = b_lab ;
44675: LD_ADDR_VAR 0 1
44679: PUSH
44680: LD_INT 6
44682: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44683: LD_VAR 0 6
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 2
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: LIST
44701: IN
44702: NOT
44703: PUSH
44704: LD_VAR 0 1
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: LD_INT 3
44720: PUSH
44721: LD_INT 6
44723: PUSH
44724: LD_INT 36
44726: PUSH
44727: LD_INT 4
44729: PUSH
44730: LD_INT 5
44732: PUSH
44733: LD_INT 31
44735: PUSH
44736: LD_INT 32
44738: PUSH
44739: LD_INT 33
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: IN
44755: NOT
44756: PUSH
44757: LD_VAR 0 6
44761: PUSH
44762: LD_INT 1
44764: EQUAL
44765: AND
44766: OR
44767: PUSH
44768: LD_VAR 0 1
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: LD_INT 3
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: IN
44783: NOT
44784: PUSH
44785: LD_VAR 0 6
44789: PUSH
44790: LD_INT 2
44792: EQUAL
44793: AND
44794: OR
44795: IFFALSE 44805
// mode = 0 ;
44797: LD_ADDR_VAR 0 6
44801: PUSH
44802: LD_INT 0
44804: ST_TO_ADDR
// case mode of 0 :
44805: LD_VAR 0 6
44809: PUSH
44810: LD_INT 0
44812: DOUBLE
44813: EQUAL
44814: IFTRUE 44818
44816: GO 56271
44818: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44819: LD_ADDR_VAR 0 11
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: LD_INT 2
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: LD_INT 3
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: LD_INT 3
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45012: LD_ADDR_VAR 0 12
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 2
45135: NEG
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: NEG
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 3
45169: NEG
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 3
45180: NEG
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45208: LD_ADDR_VAR 0 13
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 2
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 2
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 2
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 2
45331: NEG
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 2
45343: NEG
45344: PUSH
45345: LD_INT 2
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 2
45355: NEG
45356: PUSH
45357: LD_INT 3
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 3
45367: NEG
45368: PUSH
45369: LD_INT 2
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 3
45379: NEG
45380: PUSH
45381: LD_INT 3
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45407: LD_ADDR_VAR 0 14
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: LD_INT 2
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: LD_INT 3
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 3
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45603: LD_ADDR_VAR 0 15
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 3
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45796: LD_ADDR_VAR 0 16
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: LD_INT 2
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 3
45943: PUSH
45944: LD_INT 2
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 3
45953: PUSH
45954: LD_INT 3
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: LD_INT 3
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45989: LD_ADDR_VAR 0 17
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46219: LD_ADDR_VAR 0 18
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: LD_INT 2
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: LD_INT 2
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: NEG
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 2
46406: NEG
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 2
46418: NEG
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46449: LD_ADDR_VAR 0 19
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: LD_INT 2
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 1
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 2
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: LD_INT 2
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 2
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 2
46636: NEG
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 2
46648: NEG
46649: PUSH
46650: LD_INT 2
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46679: LD_ADDR_VAR 0 20
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 2
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 2
46866: NEG
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46909: LD_ADDR_VAR 0 21
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: LD_INT 2
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 2
47096: NEG
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47139: LD_ADDR_VAR 0 22
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 2
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 2
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 2
47326: NEG
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 2
47338: NEG
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47369: LD_ADDR_VAR 0 23
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: LD_INT 2
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: LD_INT 2
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 2
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 2
47580: NEG
47581: PUSH
47582: LD_INT 3
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: LD_INT 3
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47649: LD_ADDR_VAR 0 24
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 2
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: LD_INT 2
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 3
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 3
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47925: LD_ADDR_VAR 0 25
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 2
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: LD_INT 2
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 2
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 2
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 2
48101: NEG
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: NEG
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: LD_INT 2
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 3
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 3
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: LD_INT 3
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: LD_INT 3
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48199: LD_ADDR_VAR 0 26
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: LD_INT 2
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 2
48375: NEG
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 2
48386: NEG
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: LD_INT 2
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: LD_INT 3
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: LD_INT 3
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48475: LD_ADDR_VAR 0 27
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: LD_INT 2
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 2
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: LD_INT 2
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 2
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: NEG
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 3
48708: NEG
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 3
48720: NEG
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48755: LD_ADDR_VAR 0 28
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: LD_INT 2
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 2
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 2
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: LD_INT 2
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 2
48942: NEG
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: LD_INT 2
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: LD_INT 3
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: LD_INT 3
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 3
48990: NEG
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 3
49002: NEG
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49037: LD_ADDR_VAR 0 29
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 2
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: LD_INT 2
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: LD_INT 2
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: LD_INT 3
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 3
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: LD_INT 3
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 3
49281: NEG
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49316: LD_ADDR_VAR 0 30
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: LD_INT 2
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 2
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 2
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: LD_INT 3
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: LD_INT 2
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 3
49528: PUSH
49529: LD_INT 2
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: PUSH
49539: LD_INT 3
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 3
49559: NEG
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49594: LD_ADDR_VAR 0 31
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 2
49759: NEG
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: LD_INT 2
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: NEG
49784: PUSH
49785: LD_INT 3
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 2
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 3
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: LD_INT 3
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 3
49837: NEG
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49872: LD_ADDR_VAR 0 32
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: LD_INT 2
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 2
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: LD_INT 2
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 2
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 2
50038: NEG
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 3
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 3
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: LD_INT 3
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 3
50115: NEG
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50150: LD_ADDR_VAR 0 33
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 2
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 2
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 2
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 2
50305: NEG
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 2
50328: NEG
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: LD_INT 3
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 3
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 3
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: LD_INT 2
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 3
50394: NEG
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50429: LD_ADDR_VAR 0 34
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: LD_INT 2
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 2
50554: PUSH
50555: LD_INT 2
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 2
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: LD_INT 3
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: LD_INT 2
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 3
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: LD_INT 3
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 3
50674: NEG
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50709: LD_ADDR_VAR 0 35
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50821: LD_ADDR_VAR 0 36
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50933: LD_ADDR_VAR 0 37
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51045: LD_ADDR_VAR 0 38
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 2
51136: NEG
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51157: LD_ADDR_VAR 0 39
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51269: LD_ADDR_VAR 0 40
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51381: LD_ADDR_VAR 0 41
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 2
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 2
51536: NEG
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 2
51547: NEG
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 2
51559: NEG
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: LD_INT 3
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 2
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 3
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 3
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: PUSH
51615: LD_INT 2
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 3
51624: PUSH
51625: LD_INT 3
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: LD_INT 3
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 3
51655: NEG
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 3
51666: NEG
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 3
51678: NEG
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 3
51690: NEG
51691: PUSH
51692: LD_INT 3
51694: NEG
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51731: LD_ADDR_VAR 0 42
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 2
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: LD_INT 2
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 2
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: NEG
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 2
51921: NEG
51922: PUSH
51923: LD_INT 3
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: LD_INT 3
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 3
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 3
51967: PUSH
51968: LD_INT 2
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 3
51977: PUSH
51978: LD_INT 3
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: LD_INT 3
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: LD_INT 3
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: LD_INT 3
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 3
52028: NEG
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 3
52040: NEG
52041: PUSH
52042: LD_INT 3
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52081: LD_ADDR_VAR 0 43
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 2
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 2
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 3
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: LD_INT 3
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: LD_INT 2
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 3
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 3
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 3
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 3
52377: NEG
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 3
52388: NEG
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52429: LD_ADDR_VAR 0 44
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 2
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: LD_INT 3
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 3
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 3
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 3
52662: PUSH
52663: LD_INT 2
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 3
52672: PUSH
52673: LD_INT 3
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: LD_INT 3
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 3
52703: NEG
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 3
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 3
52726: NEG
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 3
52738: NEG
52739: PUSH
52740: LD_INT 3
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52779: LD_ADDR_VAR 0 45
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 2
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: NEG
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 2
52969: NEG
52970: PUSH
52971: LD_INT 3
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: LD_INT 3
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 3
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 2
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 3
53015: PUSH
53016: LD_INT 2
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 3
53025: PUSH
53026: LD_INT 3
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: LD_INT 3
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: LD_INT 3
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: LD_INT 3
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 3
53076: NEG
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 3
53088: NEG
53089: PUSH
53090: LD_INT 3
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53129: LD_ADDR_VAR 0 46
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: LD_INT 2
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 2
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: LD_INT 3
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 3
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 3
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 3
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: LD_INT 3
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: LD_INT 3
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 2
53414: NEG
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 3
53425: NEG
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 3
53436: NEG
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53477: LD_ADDR_VAR 0 47
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 2
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 0
53570: PUSH
53571: LD_INT 2
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 2
53592: NEG
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 2
53604: NEG
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53628: LD_ADDR_VAR 0 48
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: LD_INT 2
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53775: LD_ADDR_VAR 0 49
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 2
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: LD_INT 2
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: LD_INT 2
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53919: LD_ADDR_VAR 0 50
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54063: LD_ADDR_VAR 0 51
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: LD_INT 2
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 2
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: NEG
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 2
54186: NEG
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54210: LD_ADDR_VAR 0 52
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 2
54337: NEG
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54361: LD_ADDR_VAR 0 53
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 2
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: LD_INT 2
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: LD_INT 2
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: NEG
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 2
54560: NEG
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54591: LD_ADDR_VAR 0 54
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54821: LD_ADDR_VAR 0 55
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 2
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: LD_INT 2
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: LD_INT 2
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: LD_INT 1
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 2
55020: NEG
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55051: LD_ADDR_VAR 0 56
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 2
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55281: LD_ADDR_VAR 0 57
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 2
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 2
55468: NEG
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55511: LD_ADDR_VAR 0 58
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 2
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 2
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: NEG
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 2
55710: NEG
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55741: LD_ADDR_VAR 0 59
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55829: LD_ADDR_VAR 0 60
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55917: LD_ADDR_VAR 0 61
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56005: LD_ADDR_VAR 0 62
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56093: LD_ADDR_VAR 0 63
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56181: LD_ADDR_VAR 0 64
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: ST_TO_ADDR
// end ; 1 :
56269: GO 62166
56271: LD_INT 1
56273: DOUBLE
56274: EQUAL
56275: IFTRUE 56279
56277: GO 58902
56279: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56280: LD_ADDR_VAR 0 11
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: LD_INT 3
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: LD_INT 3
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: LIST
56323: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56324: LD_ADDR_VAR 0 12
56328: PUSH
56329: LD_INT 2
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 3
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 3
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: LIST
56364: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56365: LD_ADDR_VAR 0 13
56369: PUSH
56370: LD_INT 3
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 3
56382: PUSH
56383: LD_INT 3
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 2
56392: PUSH
56393: LD_INT 3
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: LIST
56404: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56405: LD_ADDR_VAR 0 14
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 3
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 3
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: LD_INT 2
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: LIST
56445: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56446: LD_ADDR_VAR 0 15
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 3
56464: NEG
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 3
56475: NEG
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: LIST
56489: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56490: LD_ADDR_VAR 0 16
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PUSH
56499: LD_INT 3
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 3
56509: NEG
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 3
56521: NEG
56522: PUSH
56523: LD_INT 3
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: LIST
56535: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56536: LD_ADDR_VAR 0 17
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 3
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: LD_INT 3
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: LIST
56579: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56580: LD_ADDR_VAR 0 18
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 3
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 3
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: LIST
56620: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56621: LD_ADDR_VAR 0 19
56625: PUSH
56626: LD_INT 3
56628: PUSH
56629: LD_INT 2
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 3
56638: PUSH
56639: LD_INT 3
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 2
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: LIST
56660: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56661: LD_ADDR_VAR 0 20
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: LD_INT 3
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: LD_INT 3
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 2
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: LIST
56701: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56702: LD_ADDR_VAR 0 21
56706: PUSH
56707: LD_INT 2
56709: NEG
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 3
56720: NEG
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 3
56731: NEG
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: LIST
56745: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56746: LD_ADDR_VAR 0 22
56750: PUSH
56751: LD_INT 2
56753: NEG
56754: PUSH
56755: LD_INT 3
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 3
56765: NEG
56766: PUSH
56767: LD_INT 2
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 3
56777: NEG
56778: PUSH
56779: LD_INT 3
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: LIST
56791: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56792: LD_ADDR_VAR 0 23
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: LD_INT 3
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: LD_INT 4
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: LD_INT 3
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: LIST
56835: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56836: LD_ADDR_VAR 0 24
56840: PUSH
56841: LD_INT 3
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 3
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 4
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: LIST
56876: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56877: LD_ADDR_VAR 0 25
56881: PUSH
56882: LD_INT 3
56884: PUSH
56885: LD_INT 3
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 4
56894: PUSH
56895: LD_INT 3
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 3
56904: PUSH
56905: LD_INT 4
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: LIST
56916: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56917: LD_ADDR_VAR 0 26
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 3
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: LD_INT 4
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: LD_INT 3
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: LIST
56957: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56958: LD_ADDR_VAR 0 27
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 3
56976: NEG
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 4
56987: NEG
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: LIST
57001: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57002: LD_ADDR_VAR 0 28
57006: PUSH
57007: LD_INT 3
57009: NEG
57010: PUSH
57011: LD_INT 3
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 3
57021: NEG
57022: PUSH
57023: LD_INT 4
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 4
57033: NEG
57034: PUSH
57035: LD_INT 3
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: LIST
57047: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57048: LD_ADDR_VAR 0 29
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: LD_INT 3
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: LD_INT 3
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: LD_INT 4
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: LD_INT 4
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 3
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: LD_INT 5
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: LD_INT 5
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: LD_INT 4
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: LD_INT 6
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: LD_INT 6
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: LD_INT 5
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57203: LD_ADDR_VAR 0 30
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 3
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 3
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 3
57241: PUSH
57242: LD_INT 1
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 4
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 4
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 4
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 5
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 5
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 5
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 6
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 6
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57346: LD_ADDR_VAR 0 31
57350: PUSH
57351: LD_INT 3
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 3
57363: PUSH
57364: LD_INT 3
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: LD_INT 3
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 4
57383: PUSH
57384: LD_INT 3
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 4
57393: PUSH
57394: LD_INT 4
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 3
57403: PUSH
57404: LD_INT 4
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 5
57413: PUSH
57414: LD_INT 4
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 5
57423: PUSH
57424: LD_INT 5
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 4
57433: PUSH
57434: LD_INT 5
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 6
57443: PUSH
57444: LD_INT 5
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 6
57453: PUSH
57454: LD_INT 6
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 5
57463: PUSH
57464: LD_INT 6
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57485: LD_ADDR_VAR 0 32
57489: PUSH
57490: LD_INT 1
57492: PUSH
57493: LD_INT 3
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: LD_INT 3
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: LD_INT 2
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: LD_INT 4
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: LD_INT 4
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: LD_INT 5
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 5
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 4
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 6
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: LD_INT 6
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: LD_INT 5
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57628: LD_ADDR_VAR 0 33
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 3
57646: NEG
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 3
57657: NEG
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 3
57669: NEG
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 4
57680: NEG
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 4
57691: NEG
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 4
57703: NEG
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 5
57714: NEG
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 5
57725: NEG
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 5
57737: NEG
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 6
57748: NEG
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 6
57759: NEG
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57783: LD_ADDR_VAR 0 34
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: LD_INT 3
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 3
57802: NEG
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 3
57814: NEG
57815: PUSH
57816: LD_INT 3
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 3
57826: NEG
57827: PUSH
57828: LD_INT 4
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 4
57838: NEG
57839: PUSH
57840: LD_INT 3
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 4
57850: NEG
57851: PUSH
57852: LD_INT 4
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 4
57862: NEG
57863: PUSH
57864: LD_INT 5
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 5
57874: NEG
57875: PUSH
57876: LD_INT 4
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 5
57886: NEG
57887: PUSH
57888: LD_INT 5
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 5
57898: NEG
57899: PUSH
57900: LD_INT 6
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 6
57910: NEG
57911: PUSH
57912: LD_INT 5
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 6
57922: NEG
57923: PUSH
57924: LD_INT 6
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57946: LD_ADDR_VAR 0 41
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: LD_INT 3
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: LD_INT 2
57979: NEG
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57990: LD_ADDR_VAR 0 42
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: LD_INT 1
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 3
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: LIST
58030: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58031: LD_ADDR_VAR 0 43
58035: PUSH
58036: LD_INT 2
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 3
58048: PUSH
58049: LD_INT 2
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 2
58058: PUSH
58059: LD_INT 3
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: LIST
58070: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58071: LD_ADDR_VAR 0 44
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: LD_INT 3
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: LD_INT 2
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: LIST
58111: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58112: LD_ADDR_VAR 0 45
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: NEG
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 3
58141: NEG
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: LIST
58155: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58156: LD_ADDR_VAR 0 46
58160: PUSH
58161: LD_INT 2
58163: NEG
58164: PUSH
58165: LD_INT 2
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: LD_INT 3
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 3
58187: NEG
58188: PUSH
58189: LD_INT 2
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: LIST
58201: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58202: LD_ADDR_VAR 0 47
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: LD_INT 3
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: NEG
58222: PUSH
58223: LD_INT 3
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58235: LD_ADDR_VAR 0 48
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 2
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58266: LD_ADDR_VAR 0 49
58270: PUSH
58271: LD_INT 3
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 3
58283: PUSH
58284: LD_INT 2
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58295: LD_ADDR_VAR 0 50
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: LD_INT 3
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: LD_INT 3
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58324: LD_ADDR_VAR 0 51
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58355: LD_ADDR_VAR 0 52
58359: PUSH
58360: LD_INT 3
58362: NEG
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: LD_INT 2
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58388: LD_ADDR_VAR 0 53
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: LD_INT 3
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 3
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: LIST
58431: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58432: LD_ADDR_VAR 0 54
58436: PUSH
58437: LD_INT 2
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 3
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 3
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: LIST
58472: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58473: LD_ADDR_VAR 0 55
58477: PUSH
58478: LD_INT 3
58480: PUSH
58481: LD_INT 2
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 3
58490: PUSH
58491: LD_INT 3
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 2
58500: PUSH
58501: LD_INT 3
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: LIST
58512: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58513: LD_ADDR_VAR 0 56
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: LD_INT 3
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: LD_INT 3
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: LIST
58553: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58554: LD_ADDR_VAR 0 57
58558: PUSH
58559: LD_INT 2
58561: NEG
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 3
58572: NEG
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 3
58583: NEG
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: LIST
58597: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58598: LD_ADDR_VAR 0 58
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: LD_INT 3
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 3
58617: NEG
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 3
58629: NEG
58630: PUSH
58631: LD_INT 3
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: LIST
58643: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58644: LD_ADDR_VAR 0 59
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: LD_INT 2
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: LIST
58687: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58688: LD_ADDR_VAR 0 60
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: LD_INT 1
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: LIST
58728: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58729: LD_ADDR_VAR 0 61
58733: PUSH
58734: LD_INT 2
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 2
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: LD_INT 2
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: LIST
58768: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58769: LD_ADDR_VAR 0 62
58773: PUSH
58774: LD_INT 1
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: LIST
58809: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58810: LD_ADDR_VAR 0 63
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 2
58839: NEG
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: LIST
58853: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58854: LD_ADDR_VAR 0 64
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: LD_INT 2
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 2
58873: NEG
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 2
58885: NEG
58886: PUSH
58887: LD_INT 2
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: LIST
58899: ST_TO_ADDR
// end ; 2 :
58900: GO 62166
58902: LD_INT 2
58904: DOUBLE
58905: EQUAL
58906: IFTRUE 58910
58908: GO 62165
58910: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58911: LD_ADDR_VAR 0 29
58915: PUSH
58916: LD_INT 4
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 4
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 5
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 5
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 4
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 3
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 3
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 3
58990: PUSH
58991: LD_INT 2
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 5
59001: PUSH
59002: LD_INT 2
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 3
59011: PUSH
59012: LD_INT 3
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 3
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 4
59031: PUSH
59032: LD_INT 3
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 4
59041: PUSH
59042: LD_INT 4
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 3
59051: PUSH
59052: LD_INT 4
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 2
59061: PUSH
59062: LD_INT 3
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 2
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 4
59081: PUSH
59082: LD_INT 2
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: LD_INT 4
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: LD_INT 4
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 3
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 4
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: LD_INT 5
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: LD_INT 5
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: LD_INT 4
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 2
59173: PUSH
59174: LD_INT 5
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 3
59194: NEG
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 4
59250: NEG
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 4
59261: NEG
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 4
59273: NEG
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 2
59285: NEG
59286: PUSH
59287: LD_INT 2
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 4
59296: NEG
59297: PUSH
59298: LD_INT 4
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 4
59308: NEG
59309: PUSH
59310: LD_INT 5
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 3
59320: NEG
59321: PUSH
59322: LD_INT 4
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 3
59332: NEG
59333: PUSH
59334: LD_INT 3
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 4
59344: NEG
59345: PUSH
59346: LD_INT 3
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 5
59356: NEG
59357: PUSH
59358: LD_INT 4
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 5
59368: NEG
59369: PUSH
59370: LD_INT 5
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: LD_INT 5
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 5
59392: NEG
59393: PUSH
59394: LD_INT 3
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59449: LD_ADDR_VAR 0 30
59453: PUSH
59454: LD_INT 4
59456: PUSH
59457: LD_INT 4
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 4
59466: PUSH
59467: LD_INT 3
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 5
59476: PUSH
59477: LD_INT 4
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 5
59486: PUSH
59487: LD_INT 5
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 4
59496: PUSH
59497: LD_INT 5
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 3
59506: PUSH
59507: LD_INT 4
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 3
59516: PUSH
59517: LD_INT 3
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 5
59526: PUSH
59527: LD_INT 3
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 3
59536: PUSH
59537: LD_INT 5
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: LD_INT 3
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: LD_INT 2
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: LD_INT 3
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: LD_INT 4
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: LD_INT 4
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: LD_INT 3
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: LD_INT 2
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 2
59618: PUSH
59619: LD_INT 4
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: LD_INT 2
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 4
59639: NEG
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 4
59650: NEG
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 3
59662: NEG
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 3
59673: NEG
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 4
59684: NEG
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 5
59695: NEG
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 5
59706: NEG
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 5
59718: NEG
59719: PUSH
59720: LD_INT 2
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 3
59730: NEG
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 3
59741: NEG
59742: PUSH
59743: LD_INT 3
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 3
59753: NEG
59754: PUSH
59755: LD_INT 4
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: LD_INT 3
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 2
59777: NEG
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 3
59789: NEG
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 4
59801: NEG
59802: PUSH
59803: LD_INT 3
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 4
59813: NEG
59814: PUSH
59815: LD_INT 4
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 2
59825: NEG
59826: PUSH
59827: LD_INT 4
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 4
59837: NEG
59838: PUSH
59839: LD_INT 2
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: LD_INT 4
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: LD_INT 5
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: LD_INT 4
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: PUSH
59883: LD_INT 3
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: LD_INT 3
59896: NEG
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: LD_INT 4
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: LD_INT 5
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: LD_INT 3
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 2
59939: NEG
59940: PUSH
59941: LD_INT 5
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59996: LD_ADDR_VAR 0 31
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: LD_INT 4
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: LD_INT 3
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: LD_INT 4
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: LD_INT 5
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: LD_INT 5
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: LD_INT 4
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: NEG
60065: PUSH
60066: LD_INT 3
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: PUSH
60076: LD_INT 5
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: LD_INT 3
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 3
60096: NEG
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 3
60107: NEG
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 2
60119: NEG
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 2
60130: NEG
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 3
60141: NEG
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 4
60152: NEG
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 4
60163: NEG
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 4
60175: NEG
60176: PUSH
60177: LD_INT 2
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 2
60187: NEG
60188: PUSH
60189: LD_INT 2
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 4
60198: NEG
60199: PUSH
60200: LD_INT 4
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 4
60210: NEG
60211: PUSH
60212: LD_INT 5
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 3
60222: NEG
60223: PUSH
60224: LD_INT 4
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: NEG
60235: PUSH
60236: LD_INT 3
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 4
60246: NEG
60247: PUSH
60248: LD_INT 3
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 5
60258: NEG
60259: PUSH
60260: LD_INT 4
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 5
60270: NEG
60271: PUSH
60272: LD_INT 5
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 3
60282: NEG
60283: PUSH
60284: LD_INT 5
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 5
60294: NEG
60295: PUSH
60296: LD_INT 3
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: LD_INT 3
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: LD_INT 4
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 3
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: LD_INT 2
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: LD_INT 3
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: LD_INT 4
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: LD_INT 2
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: NEG
60397: PUSH
60398: LD_INT 4
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 4
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 4
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 5
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 5
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 4
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 3
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 3
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 5
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60546: LD_ADDR_VAR 0 32
60550: PUSH
60551: LD_INT 4
60553: NEG
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 4
60564: NEG
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 3
60576: NEG
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 3
60587: NEG
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 4
60598: NEG
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 5
60609: NEG
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 5
60620: NEG
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 5
60632: NEG
60633: PUSH
60634: LD_INT 2
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 3
60644: NEG
60645: PUSH
60646: LD_INT 2
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 3
60655: NEG
60656: PUSH
60657: LD_INT 3
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 3
60667: NEG
60668: PUSH
60669: LD_INT 4
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 2
60679: NEG
60680: PUSH
60681: LD_INT 3
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 2
60691: NEG
60692: PUSH
60693: LD_INT 2
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 3
60703: NEG
60704: PUSH
60705: LD_INT 2
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 4
60715: NEG
60716: PUSH
60717: LD_INT 3
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 4
60727: NEG
60728: PUSH
60729: LD_INT 4
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 2
60739: NEG
60740: PUSH
60741: LD_INT 4
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 4
60751: NEG
60752: PUSH
60753: LD_INT 2
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: LD_INT 4
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: LD_INT 5
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: LD_INT 4
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: PUSH
60797: LD_INT 3
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 3
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: LD_INT 4
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: LD_INT 5
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 2
60842: PUSH
60843: LD_INT 3
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 2
60853: NEG
60854: PUSH
60855: LD_INT 5
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 3
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 3
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 4
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 4
60896: PUSH
60897: LD_INT 1
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 3
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 2
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: PUSH
60938: LD_INT 2
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 4
60948: PUSH
60949: LD_INT 2
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 4
60958: PUSH
60959: LD_INT 4
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 4
60968: PUSH
60969: LD_INT 3
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 5
60978: PUSH
60979: LD_INT 4
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 5
60988: PUSH
60989: LD_INT 5
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 4
60998: PUSH
60999: LD_INT 5
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 3
61008: PUSH
61009: LD_INT 4
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 3
61018: PUSH
61019: LD_INT 3
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 5
61028: PUSH
61029: LD_INT 3
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 3
61038: PUSH
61039: LD_INT 5
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61093: LD_ADDR_VAR 0 33
61097: PUSH
61098: LD_INT 4
61100: NEG
61101: PUSH
61102: LD_INT 4
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 4
61112: NEG
61113: PUSH
61114: LD_INT 5
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 3
61124: NEG
61125: PUSH
61126: LD_INT 4
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 3
61136: NEG
61137: PUSH
61138: LD_INT 3
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 4
61148: NEG
61149: PUSH
61150: LD_INT 3
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 5
61160: NEG
61161: PUSH
61162: LD_INT 4
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 5
61172: NEG
61173: PUSH
61174: LD_INT 5
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 3
61184: NEG
61185: PUSH
61186: LD_INT 5
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 5
61196: NEG
61197: PUSH
61198: LD_INT 3
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 3
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: LD_INT 4
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 1
61230: PUSH
61231: LD_INT 3
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: LD_INT 2
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: LD_INT 2
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 1
61263: NEG
61264: PUSH
61265: LD_INT 3
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: NEG
61276: PUSH
61277: LD_INT 4
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 2
61287: PUSH
61288: LD_INT 2
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 2
61298: NEG
61299: PUSH
61300: LD_INT 4
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 4
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 4
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 5
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 5
61341: PUSH
61342: LD_INT 1
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 4
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 3
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 3
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 3
61382: PUSH
61383: LD_INT 2
61385: NEG
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 5
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 3
61403: PUSH
61404: LD_INT 3
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 3
61413: PUSH
61414: LD_INT 2
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 4
61423: PUSH
61424: LD_INT 3
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 4
61433: PUSH
61434: LD_INT 4
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 3
61443: PUSH
61444: LD_INT 4
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 2
61453: PUSH
61454: LD_INT 3
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 2
61463: PUSH
61464: LD_INT 2
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 4
61473: PUSH
61474: LD_INT 2
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 2
61483: PUSH
61484: LD_INT 4
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: LD_INT 4
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: LD_INT 3
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: LD_INT 4
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: LD_INT 5
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: LD_INT 5
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: LD_INT 4
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: LD_INT 3
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: LD_INT 5
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: NEG
61576: PUSH
61577: LD_INT 3
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61631: LD_ADDR_VAR 0 34
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: LD_INT 4
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: LD_INT 5
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: PUSH
61661: LD_INT 4
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: LD_INT 3
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 0
61682: PUSH
61683: LD_INT 3
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: NEG
61694: PUSH
61695: LD_INT 4
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: LD_INT 5
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 2
61717: PUSH
61718: LD_INT 3
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 2
61728: NEG
61729: PUSH
61730: LD_INT 5
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 3
61740: PUSH
61741: LD_INT 0
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 3
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 4
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 4
61771: PUSH
61772: LD_INT 1
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 3
61781: PUSH
61782: LD_INT 1
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 2
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 2
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 2
61812: PUSH
61813: LD_INT 2
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 4
61823: PUSH
61824: LD_INT 2
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 4
61833: PUSH
61834: LD_INT 4
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 4
61843: PUSH
61844: LD_INT 3
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 5
61853: PUSH
61854: LD_INT 4
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 5
61863: PUSH
61864: LD_INT 5
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 4
61873: PUSH
61874: LD_INT 5
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 3
61883: PUSH
61884: LD_INT 4
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 3
61893: PUSH
61894: LD_INT 3
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 5
61903: PUSH
61904: LD_INT 3
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 3
61913: PUSH
61914: LD_INT 5
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: LD_INT 3
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 1
61943: PUSH
61944: LD_INT 3
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 1
61953: PUSH
61954: LD_INT 4
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: LD_INT 4
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 1
61973: NEG
61974: PUSH
61975: LD_INT 3
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: LD_INT 2
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: PUSH
61996: LD_INT 4
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 2
62005: NEG
62006: PUSH
62007: LD_INT 2
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 4
62016: NEG
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 4
62027: NEG
62028: PUSH
62029: LD_INT 1
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 3
62039: NEG
62040: PUSH
62041: LD_INT 0
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 3
62050: NEG
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 4
62061: NEG
62062: PUSH
62063: LD_INT 1
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 5
62072: NEG
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 5
62083: NEG
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 5
62095: NEG
62096: PUSH
62097: LD_INT 2
62099: NEG
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 3
62107: NEG
62108: PUSH
62109: LD_INT 2
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: ST_TO_ADDR
// end ; end ;
62163: GO 62166
62165: POP
// case btype of b_depot , b_warehouse :
62166: LD_VAR 0 1
62170: PUSH
62171: LD_INT 0
62173: DOUBLE
62174: EQUAL
62175: IFTRUE 62185
62177: LD_INT 1
62179: DOUBLE
62180: EQUAL
62181: IFTRUE 62185
62183: GO 62386
62185: POP
// case nation of nation_american :
62186: LD_VAR 0 5
62190: PUSH
62191: LD_INT 1
62193: DOUBLE
62194: EQUAL
62195: IFTRUE 62199
62197: GO 62255
62199: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62200: LD_ADDR_VAR 0 9
62204: PUSH
62205: LD_VAR 0 11
62209: PUSH
62210: LD_VAR 0 12
62214: PUSH
62215: LD_VAR 0 13
62219: PUSH
62220: LD_VAR 0 14
62224: PUSH
62225: LD_VAR 0 15
62229: PUSH
62230: LD_VAR 0 16
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: PUSH
62243: LD_VAR 0 4
62247: PUSH
62248: LD_INT 1
62250: PLUS
62251: ARRAY
62252: ST_TO_ADDR
62253: GO 62384
62255: LD_INT 2
62257: DOUBLE
62258: EQUAL
62259: IFTRUE 62263
62261: GO 62319
62263: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62264: LD_ADDR_VAR 0 9
62268: PUSH
62269: LD_VAR 0 17
62273: PUSH
62274: LD_VAR 0 18
62278: PUSH
62279: LD_VAR 0 19
62283: PUSH
62284: LD_VAR 0 20
62288: PUSH
62289: LD_VAR 0 21
62293: PUSH
62294: LD_VAR 0 22
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: PUSH
62307: LD_VAR 0 4
62311: PUSH
62312: LD_INT 1
62314: PLUS
62315: ARRAY
62316: ST_TO_ADDR
62317: GO 62384
62319: LD_INT 3
62321: DOUBLE
62322: EQUAL
62323: IFTRUE 62327
62325: GO 62383
62327: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62328: LD_ADDR_VAR 0 9
62332: PUSH
62333: LD_VAR 0 23
62337: PUSH
62338: LD_VAR 0 24
62342: PUSH
62343: LD_VAR 0 25
62347: PUSH
62348: LD_VAR 0 26
62352: PUSH
62353: LD_VAR 0 27
62357: PUSH
62358: LD_VAR 0 28
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: PUSH
62371: LD_VAR 0 4
62375: PUSH
62376: LD_INT 1
62378: PLUS
62379: ARRAY
62380: ST_TO_ADDR
62381: GO 62384
62383: POP
62384: GO 62939
62386: LD_INT 2
62388: DOUBLE
62389: EQUAL
62390: IFTRUE 62400
62392: LD_INT 3
62394: DOUBLE
62395: EQUAL
62396: IFTRUE 62400
62398: GO 62456
62400: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62401: LD_ADDR_VAR 0 9
62405: PUSH
62406: LD_VAR 0 29
62410: PUSH
62411: LD_VAR 0 30
62415: PUSH
62416: LD_VAR 0 31
62420: PUSH
62421: LD_VAR 0 32
62425: PUSH
62426: LD_VAR 0 33
62430: PUSH
62431: LD_VAR 0 34
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: PUSH
62444: LD_VAR 0 4
62448: PUSH
62449: LD_INT 1
62451: PLUS
62452: ARRAY
62453: ST_TO_ADDR
62454: GO 62939
62456: LD_INT 16
62458: DOUBLE
62459: EQUAL
62460: IFTRUE 62518
62462: LD_INT 17
62464: DOUBLE
62465: EQUAL
62466: IFTRUE 62518
62468: LD_INT 18
62470: DOUBLE
62471: EQUAL
62472: IFTRUE 62518
62474: LD_INT 19
62476: DOUBLE
62477: EQUAL
62478: IFTRUE 62518
62480: LD_INT 22
62482: DOUBLE
62483: EQUAL
62484: IFTRUE 62518
62486: LD_INT 20
62488: DOUBLE
62489: EQUAL
62490: IFTRUE 62518
62492: LD_INT 21
62494: DOUBLE
62495: EQUAL
62496: IFTRUE 62518
62498: LD_INT 23
62500: DOUBLE
62501: EQUAL
62502: IFTRUE 62518
62504: LD_INT 24
62506: DOUBLE
62507: EQUAL
62508: IFTRUE 62518
62510: LD_INT 25
62512: DOUBLE
62513: EQUAL
62514: IFTRUE 62518
62516: GO 62574
62518: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62519: LD_ADDR_VAR 0 9
62523: PUSH
62524: LD_VAR 0 35
62528: PUSH
62529: LD_VAR 0 36
62533: PUSH
62534: LD_VAR 0 37
62538: PUSH
62539: LD_VAR 0 38
62543: PUSH
62544: LD_VAR 0 39
62548: PUSH
62549: LD_VAR 0 40
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: PUSH
62562: LD_VAR 0 4
62566: PUSH
62567: LD_INT 1
62569: PLUS
62570: ARRAY
62571: ST_TO_ADDR
62572: GO 62939
62574: LD_INT 6
62576: DOUBLE
62577: EQUAL
62578: IFTRUE 62630
62580: LD_INT 7
62582: DOUBLE
62583: EQUAL
62584: IFTRUE 62630
62586: LD_INT 8
62588: DOUBLE
62589: EQUAL
62590: IFTRUE 62630
62592: LD_INT 13
62594: DOUBLE
62595: EQUAL
62596: IFTRUE 62630
62598: LD_INT 12
62600: DOUBLE
62601: EQUAL
62602: IFTRUE 62630
62604: LD_INT 15
62606: DOUBLE
62607: EQUAL
62608: IFTRUE 62630
62610: LD_INT 11
62612: DOUBLE
62613: EQUAL
62614: IFTRUE 62630
62616: LD_INT 14
62618: DOUBLE
62619: EQUAL
62620: IFTRUE 62630
62622: LD_INT 10
62624: DOUBLE
62625: EQUAL
62626: IFTRUE 62630
62628: GO 62686
62630: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62631: LD_ADDR_VAR 0 9
62635: PUSH
62636: LD_VAR 0 41
62640: PUSH
62641: LD_VAR 0 42
62645: PUSH
62646: LD_VAR 0 43
62650: PUSH
62651: LD_VAR 0 44
62655: PUSH
62656: LD_VAR 0 45
62660: PUSH
62661: LD_VAR 0 46
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: PUSH
62674: LD_VAR 0 4
62678: PUSH
62679: LD_INT 1
62681: PLUS
62682: ARRAY
62683: ST_TO_ADDR
62684: GO 62939
62686: LD_INT 36
62688: DOUBLE
62689: EQUAL
62690: IFTRUE 62694
62692: GO 62750
62694: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62695: LD_ADDR_VAR 0 9
62699: PUSH
62700: LD_VAR 0 47
62704: PUSH
62705: LD_VAR 0 48
62709: PUSH
62710: LD_VAR 0 49
62714: PUSH
62715: LD_VAR 0 50
62719: PUSH
62720: LD_VAR 0 51
62724: PUSH
62725: LD_VAR 0 52
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: PUSH
62738: LD_VAR 0 4
62742: PUSH
62743: LD_INT 1
62745: PLUS
62746: ARRAY
62747: ST_TO_ADDR
62748: GO 62939
62750: LD_INT 4
62752: DOUBLE
62753: EQUAL
62754: IFTRUE 62776
62756: LD_INT 5
62758: DOUBLE
62759: EQUAL
62760: IFTRUE 62776
62762: LD_INT 34
62764: DOUBLE
62765: EQUAL
62766: IFTRUE 62776
62768: LD_INT 37
62770: DOUBLE
62771: EQUAL
62772: IFTRUE 62776
62774: GO 62832
62776: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62777: LD_ADDR_VAR 0 9
62781: PUSH
62782: LD_VAR 0 53
62786: PUSH
62787: LD_VAR 0 54
62791: PUSH
62792: LD_VAR 0 55
62796: PUSH
62797: LD_VAR 0 56
62801: PUSH
62802: LD_VAR 0 57
62806: PUSH
62807: LD_VAR 0 58
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: PUSH
62820: LD_VAR 0 4
62824: PUSH
62825: LD_INT 1
62827: PLUS
62828: ARRAY
62829: ST_TO_ADDR
62830: GO 62939
62832: LD_INT 31
62834: DOUBLE
62835: EQUAL
62836: IFTRUE 62882
62838: LD_INT 32
62840: DOUBLE
62841: EQUAL
62842: IFTRUE 62882
62844: LD_INT 33
62846: DOUBLE
62847: EQUAL
62848: IFTRUE 62882
62850: LD_INT 27
62852: DOUBLE
62853: EQUAL
62854: IFTRUE 62882
62856: LD_INT 26
62858: DOUBLE
62859: EQUAL
62860: IFTRUE 62882
62862: LD_INT 28
62864: DOUBLE
62865: EQUAL
62866: IFTRUE 62882
62868: LD_INT 29
62870: DOUBLE
62871: EQUAL
62872: IFTRUE 62882
62874: LD_INT 30
62876: DOUBLE
62877: EQUAL
62878: IFTRUE 62882
62880: GO 62938
62882: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62883: LD_ADDR_VAR 0 9
62887: PUSH
62888: LD_VAR 0 59
62892: PUSH
62893: LD_VAR 0 60
62897: PUSH
62898: LD_VAR 0 61
62902: PUSH
62903: LD_VAR 0 62
62907: PUSH
62908: LD_VAR 0 63
62912: PUSH
62913: LD_VAR 0 64
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: PUSH
62926: LD_VAR 0 4
62930: PUSH
62931: LD_INT 1
62933: PLUS
62934: ARRAY
62935: ST_TO_ADDR
62936: GO 62939
62938: POP
// temp_list2 = [ ] ;
62939: LD_ADDR_VAR 0 10
62943: PUSH
62944: EMPTY
62945: ST_TO_ADDR
// for i in temp_list do
62946: LD_ADDR_VAR 0 8
62950: PUSH
62951: LD_VAR 0 9
62955: PUSH
62956: FOR_IN
62957: IFFALSE 63009
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62959: LD_ADDR_VAR 0 10
62963: PUSH
62964: LD_VAR 0 10
62968: PUSH
62969: LD_VAR 0 8
62973: PUSH
62974: LD_INT 1
62976: ARRAY
62977: PUSH
62978: LD_VAR 0 2
62982: PLUS
62983: PUSH
62984: LD_VAR 0 8
62988: PUSH
62989: LD_INT 2
62991: ARRAY
62992: PUSH
62993: LD_VAR 0 3
62997: PLUS
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: EMPTY
63004: LIST
63005: ADD
63006: ST_TO_ADDR
63007: GO 62956
63009: POP
63010: POP
// result = temp_list2 ;
63011: LD_ADDR_VAR 0 7
63015: PUSH
63016: LD_VAR 0 10
63020: ST_TO_ADDR
// end ;
63021: LD_VAR 0 7
63025: RET
// export function EnemyInRange ( unit , dist ) ; begin
63026: LD_INT 0
63028: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63029: LD_ADDR_VAR 0 3
63033: PUSH
63034: LD_VAR 0 1
63038: PPUSH
63039: CALL_OW 255
63043: PPUSH
63044: LD_VAR 0 1
63048: PPUSH
63049: CALL_OW 250
63053: PPUSH
63054: LD_VAR 0 1
63058: PPUSH
63059: CALL_OW 251
63063: PPUSH
63064: LD_VAR 0 2
63068: PPUSH
63069: CALL 36428 0 4
63073: PUSH
63074: LD_INT 4
63076: ARRAY
63077: ST_TO_ADDR
// end ;
63078: LD_VAR 0 3
63082: RET
// export function PlayerSeeMe ( unit ) ; begin
63083: LD_INT 0
63085: PPUSH
// result := See ( your_side , unit ) ;
63086: LD_ADDR_VAR 0 2
63090: PUSH
63091: LD_OWVAR 2
63095: PPUSH
63096: LD_VAR 0 1
63100: PPUSH
63101: CALL_OW 292
63105: ST_TO_ADDR
// end ;
63106: LD_VAR 0 2
63110: RET
// export function ReverseDir ( unit ) ; begin
63111: LD_INT 0
63113: PPUSH
// if not unit then
63114: LD_VAR 0 1
63118: NOT
63119: IFFALSE 63123
// exit ;
63121: GO 63146
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63123: LD_ADDR_VAR 0 2
63127: PUSH
63128: LD_VAR 0 1
63132: PPUSH
63133: CALL_OW 254
63137: PUSH
63138: LD_INT 3
63140: PLUS
63141: PUSH
63142: LD_INT 6
63144: MOD
63145: ST_TO_ADDR
// end ;
63146: LD_VAR 0 2
63150: RET
// export function ReverseArray ( array ) ; var i ; begin
63151: LD_INT 0
63153: PPUSH
63154: PPUSH
// if not array then
63155: LD_VAR 0 1
63159: NOT
63160: IFFALSE 63164
// exit ;
63162: GO 63219
// result := [ ] ;
63164: LD_ADDR_VAR 0 2
63168: PUSH
63169: EMPTY
63170: ST_TO_ADDR
// for i := array downto 1 do
63171: LD_ADDR_VAR 0 3
63175: PUSH
63176: DOUBLE
63177: LD_VAR 0 1
63181: INC
63182: ST_TO_ADDR
63183: LD_INT 1
63185: PUSH
63186: FOR_DOWNTO
63187: IFFALSE 63217
// result := Join ( result , array [ i ] ) ;
63189: LD_ADDR_VAR 0 2
63193: PUSH
63194: LD_VAR 0 2
63198: PPUSH
63199: LD_VAR 0 1
63203: PUSH
63204: LD_VAR 0 3
63208: ARRAY
63209: PPUSH
63210: CALL 67863 0 2
63214: ST_TO_ADDR
63215: GO 63186
63217: POP
63218: POP
// end ;
63219: LD_VAR 0 2
63223: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63224: LD_INT 0
63226: PPUSH
63227: PPUSH
63228: PPUSH
63229: PPUSH
63230: PPUSH
63231: PPUSH
// if not unit or not hexes then
63232: LD_VAR 0 1
63236: NOT
63237: PUSH
63238: LD_VAR 0 2
63242: NOT
63243: OR
63244: IFFALSE 63248
// exit ;
63246: GO 63371
// dist := 9999 ;
63248: LD_ADDR_VAR 0 5
63252: PUSH
63253: LD_INT 9999
63255: ST_TO_ADDR
// for i = 1 to hexes do
63256: LD_ADDR_VAR 0 4
63260: PUSH
63261: DOUBLE
63262: LD_INT 1
63264: DEC
63265: ST_TO_ADDR
63266: LD_VAR 0 2
63270: PUSH
63271: FOR_TO
63272: IFFALSE 63359
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63274: LD_ADDR_VAR 0 6
63278: PUSH
63279: LD_VAR 0 1
63283: PPUSH
63284: LD_VAR 0 2
63288: PUSH
63289: LD_VAR 0 4
63293: ARRAY
63294: PUSH
63295: LD_INT 1
63297: ARRAY
63298: PPUSH
63299: LD_VAR 0 2
63303: PUSH
63304: LD_VAR 0 4
63308: ARRAY
63309: PUSH
63310: LD_INT 2
63312: ARRAY
63313: PPUSH
63314: CALL_OW 297
63318: ST_TO_ADDR
// if tdist < dist then
63319: LD_VAR 0 6
63323: PUSH
63324: LD_VAR 0 5
63328: LESS
63329: IFFALSE 63357
// begin hex := hexes [ i ] ;
63331: LD_ADDR_VAR 0 8
63335: PUSH
63336: LD_VAR 0 2
63340: PUSH
63341: LD_VAR 0 4
63345: ARRAY
63346: ST_TO_ADDR
// dist := tdist ;
63347: LD_ADDR_VAR 0 5
63351: PUSH
63352: LD_VAR 0 6
63356: ST_TO_ADDR
// end ; end ;
63357: GO 63271
63359: POP
63360: POP
// result := hex ;
63361: LD_ADDR_VAR 0 3
63365: PUSH
63366: LD_VAR 0 8
63370: ST_TO_ADDR
// end ;
63371: LD_VAR 0 3
63375: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63376: LD_INT 0
63378: PPUSH
63379: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63380: LD_VAR 0 1
63384: NOT
63385: PUSH
63386: LD_VAR 0 1
63390: PUSH
63391: LD_INT 21
63393: PUSH
63394: LD_INT 2
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 23
63403: PUSH
63404: LD_INT 2
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PPUSH
63415: CALL_OW 69
63419: IN
63420: NOT
63421: OR
63422: IFFALSE 63426
// exit ;
63424: GO 63473
// for i = 1 to 3 do
63426: LD_ADDR_VAR 0 3
63430: PUSH
63431: DOUBLE
63432: LD_INT 1
63434: DEC
63435: ST_TO_ADDR
63436: LD_INT 3
63438: PUSH
63439: FOR_TO
63440: IFFALSE 63471
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63442: LD_VAR 0 1
63446: PPUSH
63447: CALL_OW 250
63451: PPUSH
63452: LD_VAR 0 1
63456: PPUSH
63457: CALL_OW 251
63461: PPUSH
63462: LD_INT 1
63464: PPUSH
63465: CALL_OW 453
63469: GO 63439
63471: POP
63472: POP
// end ;
63473: LD_VAR 0 2
63477: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63478: LD_INT 0
63480: PPUSH
63481: PPUSH
63482: PPUSH
63483: PPUSH
63484: PPUSH
63485: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63486: LD_VAR 0 1
63490: NOT
63491: PUSH
63492: LD_VAR 0 2
63496: NOT
63497: OR
63498: PUSH
63499: LD_VAR 0 1
63503: PPUSH
63504: CALL_OW 314
63508: OR
63509: IFFALSE 63513
// exit ;
63511: GO 63980
// if GetLives ( i ) < 250 then
63513: LD_VAR 0 4
63517: PPUSH
63518: CALL_OW 256
63522: PUSH
63523: LD_INT 250
63525: LESS
63526: IFFALSE 63539
// begin ComAutodestruct ( i ) ;
63528: LD_VAR 0 4
63532: PPUSH
63533: CALL 63376 0 1
// exit ;
63537: GO 63980
// end ; x := GetX ( enemy_unit ) ;
63539: LD_ADDR_VAR 0 7
63543: PUSH
63544: LD_VAR 0 2
63548: PPUSH
63549: CALL_OW 250
63553: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63554: LD_ADDR_VAR 0 8
63558: PUSH
63559: LD_VAR 0 2
63563: PPUSH
63564: CALL_OW 251
63568: ST_TO_ADDR
// if not x or not y then
63569: LD_VAR 0 7
63573: NOT
63574: PUSH
63575: LD_VAR 0 8
63579: NOT
63580: OR
63581: IFFALSE 63585
// exit ;
63583: GO 63980
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63585: LD_ADDR_VAR 0 6
63589: PUSH
63590: LD_VAR 0 7
63594: PPUSH
63595: LD_INT 0
63597: PPUSH
63598: LD_INT 4
63600: PPUSH
63601: CALL_OW 272
63605: PUSH
63606: LD_VAR 0 8
63610: PPUSH
63611: LD_INT 0
63613: PPUSH
63614: LD_INT 4
63616: PPUSH
63617: CALL_OW 273
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_VAR 0 7
63630: PPUSH
63631: LD_INT 1
63633: PPUSH
63634: LD_INT 4
63636: PPUSH
63637: CALL_OW 272
63641: PUSH
63642: LD_VAR 0 8
63646: PPUSH
63647: LD_INT 1
63649: PPUSH
63650: LD_INT 4
63652: PPUSH
63653: CALL_OW 273
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_VAR 0 7
63666: PPUSH
63667: LD_INT 2
63669: PPUSH
63670: LD_INT 4
63672: PPUSH
63673: CALL_OW 272
63677: PUSH
63678: LD_VAR 0 8
63682: PPUSH
63683: LD_INT 2
63685: PPUSH
63686: LD_INT 4
63688: PPUSH
63689: CALL_OW 273
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_VAR 0 7
63702: PPUSH
63703: LD_INT 3
63705: PPUSH
63706: LD_INT 4
63708: PPUSH
63709: CALL_OW 272
63713: PUSH
63714: LD_VAR 0 8
63718: PPUSH
63719: LD_INT 3
63721: PPUSH
63722: LD_INT 4
63724: PPUSH
63725: CALL_OW 273
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_VAR 0 7
63738: PPUSH
63739: LD_INT 4
63741: PPUSH
63742: LD_INT 4
63744: PPUSH
63745: CALL_OW 272
63749: PUSH
63750: LD_VAR 0 8
63754: PPUSH
63755: LD_INT 4
63757: PPUSH
63758: LD_INT 4
63760: PPUSH
63761: CALL_OW 273
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_VAR 0 7
63774: PPUSH
63775: LD_INT 5
63777: PPUSH
63778: LD_INT 4
63780: PPUSH
63781: CALL_OW 272
63785: PUSH
63786: LD_VAR 0 8
63790: PPUSH
63791: LD_INT 5
63793: PPUSH
63794: LD_INT 4
63796: PPUSH
63797: CALL_OW 273
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: ST_TO_ADDR
// for i = tmp downto 1 do
63814: LD_ADDR_VAR 0 4
63818: PUSH
63819: DOUBLE
63820: LD_VAR 0 6
63824: INC
63825: ST_TO_ADDR
63826: LD_INT 1
63828: PUSH
63829: FOR_DOWNTO
63830: IFFALSE 63931
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63832: LD_VAR 0 6
63836: PUSH
63837: LD_VAR 0 4
63841: ARRAY
63842: PUSH
63843: LD_INT 1
63845: ARRAY
63846: PPUSH
63847: LD_VAR 0 6
63851: PUSH
63852: LD_VAR 0 4
63856: ARRAY
63857: PUSH
63858: LD_INT 2
63860: ARRAY
63861: PPUSH
63862: CALL_OW 488
63866: NOT
63867: PUSH
63868: LD_VAR 0 6
63872: PUSH
63873: LD_VAR 0 4
63877: ARRAY
63878: PUSH
63879: LD_INT 1
63881: ARRAY
63882: PPUSH
63883: LD_VAR 0 6
63887: PUSH
63888: LD_VAR 0 4
63892: ARRAY
63893: PUSH
63894: LD_INT 2
63896: ARRAY
63897: PPUSH
63898: CALL_OW 428
63902: PUSH
63903: LD_INT 0
63905: NONEQUAL
63906: OR
63907: IFFALSE 63929
// tmp := Delete ( tmp , i ) ;
63909: LD_ADDR_VAR 0 6
63913: PUSH
63914: LD_VAR 0 6
63918: PPUSH
63919: LD_VAR 0 4
63923: PPUSH
63924: CALL_OW 3
63928: ST_TO_ADDR
63929: GO 63829
63931: POP
63932: POP
// j := GetClosestHex ( unit , tmp ) ;
63933: LD_ADDR_VAR 0 5
63937: PUSH
63938: LD_VAR 0 1
63942: PPUSH
63943: LD_VAR 0 6
63947: PPUSH
63948: CALL 63224 0 2
63952: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63953: LD_VAR 0 1
63957: PPUSH
63958: LD_VAR 0 5
63962: PUSH
63963: LD_INT 1
63965: ARRAY
63966: PPUSH
63967: LD_VAR 0 5
63971: PUSH
63972: LD_INT 2
63974: ARRAY
63975: PPUSH
63976: CALL_OW 111
// end ;
63980: LD_VAR 0 3
63984: RET
// export function PrepareApemanSoldier ( ) ; begin
63985: LD_INT 0
63987: PPUSH
// uc_nation := 0 ;
63988: LD_ADDR_OWVAR 21
63992: PUSH
63993: LD_INT 0
63995: ST_TO_ADDR
// hc_sex := sex_male ;
63996: LD_ADDR_OWVAR 27
64000: PUSH
64001: LD_INT 1
64003: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64004: LD_ADDR_OWVAR 28
64008: PUSH
64009: LD_INT 15
64011: ST_TO_ADDR
// hc_gallery :=  ;
64012: LD_ADDR_OWVAR 33
64016: PUSH
64017: LD_STRING 
64019: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64020: LD_ADDR_OWVAR 31
64024: PUSH
64025: LD_INT 0
64027: PPUSH
64028: LD_INT 3
64030: PPUSH
64031: CALL_OW 12
64035: PUSH
64036: LD_INT 0
64038: PPUSH
64039: LD_INT 3
64041: PPUSH
64042: CALL_OW 12
64046: PUSH
64047: LD_INT 0
64049: PUSH
64050: LD_INT 0
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: ST_TO_ADDR
// end ;
64059: LD_VAR 0 1
64063: RET
// export function PrepareApemanEngineer ( ) ; begin
64064: LD_INT 0
64066: PPUSH
// uc_nation := 0 ;
64067: LD_ADDR_OWVAR 21
64071: PUSH
64072: LD_INT 0
64074: ST_TO_ADDR
// hc_sex := sex_male ;
64075: LD_ADDR_OWVAR 27
64079: PUSH
64080: LD_INT 1
64082: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64083: LD_ADDR_OWVAR 28
64087: PUSH
64088: LD_INT 16
64090: ST_TO_ADDR
// hc_gallery :=  ;
64091: LD_ADDR_OWVAR 33
64095: PUSH
64096: LD_STRING 
64098: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64099: LD_ADDR_OWVAR 31
64103: PUSH
64104: LD_INT 0
64106: PPUSH
64107: LD_INT 3
64109: PPUSH
64110: CALL_OW 12
64114: PUSH
64115: LD_INT 0
64117: PPUSH
64118: LD_INT 3
64120: PPUSH
64121: CALL_OW 12
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: LD_INT 0
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: ST_TO_ADDR
// end ;
64138: LD_VAR 0 1
64142: RET
// export function PrepareApeman ( agressivity ) ; begin
64143: LD_INT 0
64145: PPUSH
// uc_side := 0 ;
64146: LD_ADDR_OWVAR 20
64150: PUSH
64151: LD_INT 0
64153: ST_TO_ADDR
// uc_nation := 0 ;
64154: LD_ADDR_OWVAR 21
64158: PUSH
64159: LD_INT 0
64161: ST_TO_ADDR
// hc_sex := sex_male ;
64162: LD_ADDR_OWVAR 27
64166: PUSH
64167: LD_INT 1
64169: ST_TO_ADDR
// hc_class := class_apeman ;
64170: LD_ADDR_OWVAR 28
64174: PUSH
64175: LD_INT 12
64177: ST_TO_ADDR
// hc_gallery :=  ;
64178: LD_ADDR_OWVAR 33
64182: PUSH
64183: LD_STRING 
64185: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64186: LD_ADDR_OWVAR 35
64190: PUSH
64191: LD_VAR 0 1
64195: NEG
64196: PPUSH
64197: LD_VAR 0 1
64201: PPUSH
64202: CALL_OW 12
64206: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64207: LD_ADDR_OWVAR 31
64211: PUSH
64212: LD_INT 0
64214: PPUSH
64215: LD_INT 3
64217: PPUSH
64218: CALL_OW 12
64222: PUSH
64223: LD_INT 0
64225: PPUSH
64226: LD_INT 3
64228: PPUSH
64229: CALL_OW 12
64233: PUSH
64234: LD_INT 0
64236: PUSH
64237: LD_INT 0
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: ST_TO_ADDR
// end ;
64246: LD_VAR 0 2
64250: RET
// export function PrepareTiger ( agressivity ) ; begin
64251: LD_INT 0
64253: PPUSH
// uc_side := 0 ;
64254: LD_ADDR_OWVAR 20
64258: PUSH
64259: LD_INT 0
64261: ST_TO_ADDR
// uc_nation := 0 ;
64262: LD_ADDR_OWVAR 21
64266: PUSH
64267: LD_INT 0
64269: ST_TO_ADDR
// hc_class := class_tiger ;
64270: LD_ADDR_OWVAR 28
64274: PUSH
64275: LD_INT 14
64277: ST_TO_ADDR
// hc_gallery :=  ;
64278: LD_ADDR_OWVAR 33
64282: PUSH
64283: LD_STRING 
64285: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64286: LD_ADDR_OWVAR 35
64290: PUSH
64291: LD_VAR 0 1
64295: NEG
64296: PPUSH
64297: LD_VAR 0 1
64301: PPUSH
64302: CALL_OW 12
64306: ST_TO_ADDR
// end ;
64307: LD_VAR 0 2
64311: RET
// export function PrepareEnchidna ( ) ; begin
64312: LD_INT 0
64314: PPUSH
// uc_side := 0 ;
64315: LD_ADDR_OWVAR 20
64319: PUSH
64320: LD_INT 0
64322: ST_TO_ADDR
// uc_nation := 0 ;
64323: LD_ADDR_OWVAR 21
64327: PUSH
64328: LD_INT 0
64330: ST_TO_ADDR
// hc_class := class_baggie ;
64331: LD_ADDR_OWVAR 28
64335: PUSH
64336: LD_INT 13
64338: ST_TO_ADDR
// hc_gallery :=  ;
64339: LD_ADDR_OWVAR 33
64343: PUSH
64344: LD_STRING 
64346: ST_TO_ADDR
// end ;
64347: LD_VAR 0 1
64351: RET
// export function PrepareFrog ( ) ; begin
64352: LD_INT 0
64354: PPUSH
// uc_side := 0 ;
64355: LD_ADDR_OWVAR 20
64359: PUSH
64360: LD_INT 0
64362: ST_TO_ADDR
// uc_nation := 0 ;
64363: LD_ADDR_OWVAR 21
64367: PUSH
64368: LD_INT 0
64370: ST_TO_ADDR
// hc_class := class_frog ;
64371: LD_ADDR_OWVAR 28
64375: PUSH
64376: LD_INT 19
64378: ST_TO_ADDR
// hc_gallery :=  ;
64379: LD_ADDR_OWVAR 33
64383: PUSH
64384: LD_STRING 
64386: ST_TO_ADDR
// end ;
64387: LD_VAR 0 1
64391: RET
// export function PrepareFish ( ) ; begin
64392: LD_INT 0
64394: PPUSH
// uc_side := 0 ;
64395: LD_ADDR_OWVAR 20
64399: PUSH
64400: LD_INT 0
64402: ST_TO_ADDR
// uc_nation := 0 ;
64403: LD_ADDR_OWVAR 21
64407: PUSH
64408: LD_INT 0
64410: ST_TO_ADDR
// hc_class := class_fish ;
64411: LD_ADDR_OWVAR 28
64415: PUSH
64416: LD_INT 20
64418: ST_TO_ADDR
// hc_gallery :=  ;
64419: LD_ADDR_OWVAR 33
64423: PUSH
64424: LD_STRING 
64426: ST_TO_ADDR
// end ;
64427: LD_VAR 0 1
64431: RET
// export function PrepareBird ( ) ; begin
64432: LD_INT 0
64434: PPUSH
// uc_side := 0 ;
64435: LD_ADDR_OWVAR 20
64439: PUSH
64440: LD_INT 0
64442: ST_TO_ADDR
// uc_nation := 0 ;
64443: LD_ADDR_OWVAR 21
64447: PUSH
64448: LD_INT 0
64450: ST_TO_ADDR
// hc_class := class_phororhacos ;
64451: LD_ADDR_OWVAR 28
64455: PUSH
64456: LD_INT 18
64458: ST_TO_ADDR
// hc_gallery :=  ;
64459: LD_ADDR_OWVAR 33
64463: PUSH
64464: LD_STRING 
64466: ST_TO_ADDR
// end ;
64467: LD_VAR 0 1
64471: RET
// export function PrepareHorse ( ) ; begin
64472: LD_INT 0
64474: PPUSH
// uc_side := 0 ;
64475: LD_ADDR_OWVAR 20
64479: PUSH
64480: LD_INT 0
64482: ST_TO_ADDR
// uc_nation := 0 ;
64483: LD_ADDR_OWVAR 21
64487: PUSH
64488: LD_INT 0
64490: ST_TO_ADDR
// hc_class := class_horse ;
64491: LD_ADDR_OWVAR 28
64495: PUSH
64496: LD_INT 21
64498: ST_TO_ADDR
// hc_gallery :=  ;
64499: LD_ADDR_OWVAR 33
64503: PUSH
64504: LD_STRING 
64506: ST_TO_ADDR
// end ;
64507: LD_VAR 0 1
64511: RET
// export function PrepareMastodont ( ) ; begin
64512: LD_INT 0
64514: PPUSH
// uc_side := 0 ;
64515: LD_ADDR_OWVAR 20
64519: PUSH
64520: LD_INT 0
64522: ST_TO_ADDR
// uc_nation := 0 ;
64523: LD_ADDR_OWVAR 21
64527: PUSH
64528: LD_INT 0
64530: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64531: LD_ADDR_OWVAR 37
64535: PUSH
64536: LD_INT 31
64538: ST_TO_ADDR
// vc_control := control_rider ;
64539: LD_ADDR_OWVAR 38
64543: PUSH
64544: LD_INT 4
64546: ST_TO_ADDR
// end ;
64547: LD_VAR 0 1
64551: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64552: LD_INT 0
64554: PPUSH
64555: PPUSH
64556: PPUSH
// uc_side = 0 ;
64557: LD_ADDR_OWVAR 20
64561: PUSH
64562: LD_INT 0
64564: ST_TO_ADDR
// uc_nation = 0 ;
64565: LD_ADDR_OWVAR 21
64569: PUSH
64570: LD_INT 0
64572: ST_TO_ADDR
// InitHc_All ( ) ;
64573: CALL_OW 584
// InitVc ;
64577: CALL_OW 20
// if mastodonts then
64581: LD_VAR 0 6
64585: IFFALSE 64652
// for i = 1 to mastodonts do
64587: LD_ADDR_VAR 0 11
64591: PUSH
64592: DOUBLE
64593: LD_INT 1
64595: DEC
64596: ST_TO_ADDR
64597: LD_VAR 0 6
64601: PUSH
64602: FOR_TO
64603: IFFALSE 64650
// begin vc_chassis := 31 ;
64605: LD_ADDR_OWVAR 37
64609: PUSH
64610: LD_INT 31
64612: ST_TO_ADDR
// vc_control := control_rider ;
64613: LD_ADDR_OWVAR 38
64617: PUSH
64618: LD_INT 4
64620: ST_TO_ADDR
// animal := CreateVehicle ;
64621: LD_ADDR_VAR 0 12
64625: PUSH
64626: CALL_OW 45
64630: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64631: LD_VAR 0 12
64635: PPUSH
64636: LD_VAR 0 8
64640: PPUSH
64641: LD_INT 0
64643: PPUSH
64644: CALL 66780 0 3
// end ;
64648: GO 64602
64650: POP
64651: POP
// if horses then
64652: LD_VAR 0 5
64656: IFFALSE 64723
// for i = 1 to horses do
64658: LD_ADDR_VAR 0 11
64662: PUSH
64663: DOUBLE
64664: LD_INT 1
64666: DEC
64667: ST_TO_ADDR
64668: LD_VAR 0 5
64672: PUSH
64673: FOR_TO
64674: IFFALSE 64721
// begin hc_class := 21 ;
64676: LD_ADDR_OWVAR 28
64680: PUSH
64681: LD_INT 21
64683: ST_TO_ADDR
// hc_gallery :=  ;
64684: LD_ADDR_OWVAR 33
64688: PUSH
64689: LD_STRING 
64691: ST_TO_ADDR
// animal := CreateHuman ;
64692: LD_ADDR_VAR 0 12
64696: PUSH
64697: CALL_OW 44
64701: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64702: LD_VAR 0 12
64706: PPUSH
64707: LD_VAR 0 8
64711: PPUSH
64712: LD_INT 0
64714: PPUSH
64715: CALL 66780 0 3
// end ;
64719: GO 64673
64721: POP
64722: POP
// if birds then
64723: LD_VAR 0 1
64727: IFFALSE 64794
// for i = 1 to birds do
64729: LD_ADDR_VAR 0 11
64733: PUSH
64734: DOUBLE
64735: LD_INT 1
64737: DEC
64738: ST_TO_ADDR
64739: LD_VAR 0 1
64743: PUSH
64744: FOR_TO
64745: IFFALSE 64792
// begin hc_class = 18 ;
64747: LD_ADDR_OWVAR 28
64751: PUSH
64752: LD_INT 18
64754: ST_TO_ADDR
// hc_gallery =  ;
64755: LD_ADDR_OWVAR 33
64759: PUSH
64760: LD_STRING 
64762: ST_TO_ADDR
// animal := CreateHuman ;
64763: LD_ADDR_VAR 0 12
64767: PUSH
64768: CALL_OW 44
64772: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64773: LD_VAR 0 12
64777: PPUSH
64778: LD_VAR 0 8
64782: PPUSH
64783: LD_INT 0
64785: PPUSH
64786: CALL 66780 0 3
// end ;
64790: GO 64744
64792: POP
64793: POP
// if tigers then
64794: LD_VAR 0 2
64798: IFFALSE 64882
// for i = 1 to tigers do
64800: LD_ADDR_VAR 0 11
64804: PUSH
64805: DOUBLE
64806: LD_INT 1
64808: DEC
64809: ST_TO_ADDR
64810: LD_VAR 0 2
64814: PUSH
64815: FOR_TO
64816: IFFALSE 64880
// begin hc_class = class_tiger ;
64818: LD_ADDR_OWVAR 28
64822: PUSH
64823: LD_INT 14
64825: ST_TO_ADDR
// hc_gallery =  ;
64826: LD_ADDR_OWVAR 33
64830: PUSH
64831: LD_STRING 
64833: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64834: LD_ADDR_OWVAR 35
64838: PUSH
64839: LD_INT 7
64841: NEG
64842: PPUSH
64843: LD_INT 7
64845: PPUSH
64846: CALL_OW 12
64850: ST_TO_ADDR
// animal := CreateHuman ;
64851: LD_ADDR_VAR 0 12
64855: PUSH
64856: CALL_OW 44
64860: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64861: LD_VAR 0 12
64865: PPUSH
64866: LD_VAR 0 8
64870: PPUSH
64871: LD_INT 0
64873: PPUSH
64874: CALL 66780 0 3
// end ;
64878: GO 64815
64880: POP
64881: POP
// if apemans then
64882: LD_VAR 0 3
64886: IFFALSE 65009
// for i = 1 to apemans do
64888: LD_ADDR_VAR 0 11
64892: PUSH
64893: DOUBLE
64894: LD_INT 1
64896: DEC
64897: ST_TO_ADDR
64898: LD_VAR 0 3
64902: PUSH
64903: FOR_TO
64904: IFFALSE 65007
// begin hc_class = class_apeman ;
64906: LD_ADDR_OWVAR 28
64910: PUSH
64911: LD_INT 12
64913: ST_TO_ADDR
// hc_gallery =  ;
64914: LD_ADDR_OWVAR 33
64918: PUSH
64919: LD_STRING 
64921: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64922: LD_ADDR_OWVAR 35
64926: PUSH
64927: LD_INT 2
64929: NEG
64930: PPUSH
64931: LD_INT 2
64933: PPUSH
64934: CALL_OW 12
64938: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64939: LD_ADDR_OWVAR 31
64943: PUSH
64944: LD_INT 1
64946: PPUSH
64947: LD_INT 3
64949: PPUSH
64950: CALL_OW 12
64954: PUSH
64955: LD_INT 1
64957: PPUSH
64958: LD_INT 3
64960: PPUSH
64961: CALL_OW 12
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: ST_TO_ADDR
// animal := CreateHuman ;
64978: LD_ADDR_VAR 0 12
64982: PUSH
64983: CALL_OW 44
64987: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64988: LD_VAR 0 12
64992: PPUSH
64993: LD_VAR 0 8
64997: PPUSH
64998: LD_INT 0
65000: PPUSH
65001: CALL 66780 0 3
// end ;
65005: GO 64903
65007: POP
65008: POP
// if enchidnas then
65009: LD_VAR 0 4
65013: IFFALSE 65080
// for i = 1 to enchidnas do
65015: LD_ADDR_VAR 0 11
65019: PUSH
65020: DOUBLE
65021: LD_INT 1
65023: DEC
65024: ST_TO_ADDR
65025: LD_VAR 0 4
65029: PUSH
65030: FOR_TO
65031: IFFALSE 65078
// begin hc_class = 13 ;
65033: LD_ADDR_OWVAR 28
65037: PUSH
65038: LD_INT 13
65040: ST_TO_ADDR
// hc_gallery =  ;
65041: LD_ADDR_OWVAR 33
65045: PUSH
65046: LD_STRING 
65048: ST_TO_ADDR
// animal := CreateHuman ;
65049: LD_ADDR_VAR 0 12
65053: PUSH
65054: CALL_OW 44
65058: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65059: LD_VAR 0 12
65063: PPUSH
65064: LD_VAR 0 8
65068: PPUSH
65069: LD_INT 0
65071: PPUSH
65072: CALL 66780 0 3
// end ;
65076: GO 65030
65078: POP
65079: POP
// if fishes then
65080: LD_VAR 0 7
65084: IFFALSE 65151
// for i = 1 to fishes do
65086: LD_ADDR_VAR 0 11
65090: PUSH
65091: DOUBLE
65092: LD_INT 1
65094: DEC
65095: ST_TO_ADDR
65096: LD_VAR 0 7
65100: PUSH
65101: FOR_TO
65102: IFFALSE 65149
// begin hc_class = 20 ;
65104: LD_ADDR_OWVAR 28
65108: PUSH
65109: LD_INT 20
65111: ST_TO_ADDR
// hc_gallery =  ;
65112: LD_ADDR_OWVAR 33
65116: PUSH
65117: LD_STRING 
65119: ST_TO_ADDR
// animal := CreateHuman ;
65120: LD_ADDR_VAR 0 12
65124: PUSH
65125: CALL_OW 44
65129: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65130: LD_VAR 0 12
65134: PPUSH
65135: LD_VAR 0 9
65139: PPUSH
65140: LD_INT 0
65142: PPUSH
65143: CALL 66780 0 3
// end ;
65147: GO 65101
65149: POP
65150: POP
// end ;
65151: LD_VAR 0 10
65155: RET
// export function WantHeal ( sci , unit ) ; begin
65156: LD_INT 0
65158: PPUSH
// if GetTaskList ( sci ) > 0 then
65159: LD_VAR 0 1
65163: PPUSH
65164: CALL_OW 437
65168: PUSH
65169: LD_INT 0
65171: GREATER
65172: IFFALSE 65242
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65174: LD_VAR 0 1
65178: PPUSH
65179: CALL_OW 437
65183: PUSH
65184: LD_INT 1
65186: ARRAY
65187: PUSH
65188: LD_INT 1
65190: ARRAY
65191: PUSH
65192: LD_STRING l
65194: EQUAL
65195: PUSH
65196: LD_VAR 0 1
65200: PPUSH
65201: CALL_OW 437
65205: PUSH
65206: LD_INT 1
65208: ARRAY
65209: PUSH
65210: LD_INT 4
65212: ARRAY
65213: PUSH
65214: LD_VAR 0 2
65218: EQUAL
65219: AND
65220: IFFALSE 65232
// result := true else
65222: LD_ADDR_VAR 0 3
65226: PUSH
65227: LD_INT 1
65229: ST_TO_ADDR
65230: GO 65240
// result := false ;
65232: LD_ADDR_VAR 0 3
65236: PUSH
65237: LD_INT 0
65239: ST_TO_ADDR
// end else
65240: GO 65250
// result := false ;
65242: LD_ADDR_VAR 0 3
65246: PUSH
65247: LD_INT 0
65249: ST_TO_ADDR
// end ;
65250: LD_VAR 0 3
65254: RET
// export function HealTarget ( sci ) ; begin
65255: LD_INT 0
65257: PPUSH
// if not sci then
65258: LD_VAR 0 1
65262: NOT
65263: IFFALSE 65267
// exit ;
65265: GO 65332
// result := 0 ;
65267: LD_ADDR_VAR 0 2
65271: PUSH
65272: LD_INT 0
65274: ST_TO_ADDR
// if GetTaskList ( sci ) then
65275: LD_VAR 0 1
65279: PPUSH
65280: CALL_OW 437
65284: IFFALSE 65332
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65286: LD_VAR 0 1
65290: PPUSH
65291: CALL_OW 437
65295: PUSH
65296: LD_INT 1
65298: ARRAY
65299: PUSH
65300: LD_INT 1
65302: ARRAY
65303: PUSH
65304: LD_STRING l
65306: EQUAL
65307: IFFALSE 65332
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65309: LD_ADDR_VAR 0 2
65313: PUSH
65314: LD_VAR 0 1
65318: PPUSH
65319: CALL_OW 437
65323: PUSH
65324: LD_INT 1
65326: ARRAY
65327: PUSH
65328: LD_INT 4
65330: ARRAY
65331: ST_TO_ADDR
// end ;
65332: LD_VAR 0 2
65336: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65337: LD_INT 0
65339: PPUSH
65340: PPUSH
65341: PPUSH
65342: PPUSH
// if not base_units then
65343: LD_VAR 0 1
65347: NOT
65348: IFFALSE 65352
// exit ;
65350: GO 65439
// result := false ;
65352: LD_ADDR_VAR 0 2
65356: PUSH
65357: LD_INT 0
65359: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65360: LD_ADDR_VAR 0 5
65364: PUSH
65365: LD_VAR 0 1
65369: PPUSH
65370: LD_INT 21
65372: PUSH
65373: LD_INT 3
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PPUSH
65380: CALL_OW 72
65384: ST_TO_ADDR
// if not tmp then
65385: LD_VAR 0 5
65389: NOT
65390: IFFALSE 65394
// exit ;
65392: GO 65439
// for i in tmp do
65394: LD_ADDR_VAR 0 3
65398: PUSH
65399: LD_VAR 0 5
65403: PUSH
65404: FOR_IN
65405: IFFALSE 65437
// begin result := EnemyInRange ( i , 22 ) ;
65407: LD_ADDR_VAR 0 2
65411: PUSH
65412: LD_VAR 0 3
65416: PPUSH
65417: LD_INT 22
65419: PPUSH
65420: CALL 63026 0 2
65424: ST_TO_ADDR
// if result then
65425: LD_VAR 0 2
65429: IFFALSE 65435
// exit ;
65431: POP
65432: POP
65433: GO 65439
// end ;
65435: GO 65404
65437: POP
65438: POP
// end ;
65439: LD_VAR 0 2
65443: RET
// export function FilterByTag ( units , tag ) ; begin
65444: LD_INT 0
65446: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65447: LD_ADDR_VAR 0 3
65451: PUSH
65452: LD_VAR 0 1
65456: PPUSH
65457: LD_INT 120
65459: PUSH
65460: LD_VAR 0 2
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PPUSH
65469: CALL_OW 72
65473: ST_TO_ADDR
// end ;
65474: LD_VAR 0 3
65478: RET
// export function IsDriver ( un ) ; begin
65479: LD_INT 0
65481: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65482: LD_ADDR_VAR 0 2
65486: PUSH
65487: LD_VAR 0 1
65491: PUSH
65492: LD_INT 55
65494: PUSH
65495: EMPTY
65496: LIST
65497: PPUSH
65498: CALL_OW 69
65502: IN
65503: ST_TO_ADDR
// end ;
65504: LD_VAR 0 2
65508: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65509: LD_INT 0
65511: PPUSH
65512: PPUSH
// list := [ ] ;
65513: LD_ADDR_VAR 0 5
65517: PUSH
65518: EMPTY
65519: ST_TO_ADDR
// case d of 0 :
65520: LD_VAR 0 3
65524: PUSH
65525: LD_INT 0
65527: DOUBLE
65528: EQUAL
65529: IFTRUE 65533
65531: GO 65666
65533: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65534: LD_ADDR_VAR 0 5
65538: PUSH
65539: LD_VAR 0 1
65543: PUSH
65544: LD_INT 4
65546: MINUS
65547: PUSH
65548: LD_VAR 0 2
65552: PUSH
65553: LD_INT 4
65555: MINUS
65556: PUSH
65557: LD_INT 2
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: LIST
65564: PUSH
65565: LD_VAR 0 1
65569: PUSH
65570: LD_INT 3
65572: MINUS
65573: PUSH
65574: LD_VAR 0 2
65578: PUSH
65579: LD_INT 1
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: LIST
65586: PUSH
65587: LD_VAR 0 1
65591: PUSH
65592: LD_INT 4
65594: PLUS
65595: PUSH
65596: LD_VAR 0 2
65600: PUSH
65601: LD_INT 4
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: LIST
65608: PUSH
65609: LD_VAR 0 1
65613: PUSH
65614: LD_INT 3
65616: PLUS
65617: PUSH
65618: LD_VAR 0 2
65622: PUSH
65623: LD_INT 3
65625: PLUS
65626: PUSH
65627: LD_INT 5
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: LIST
65634: PUSH
65635: LD_VAR 0 1
65639: PUSH
65640: LD_VAR 0 2
65644: PUSH
65645: LD_INT 4
65647: PLUS
65648: PUSH
65649: LD_INT 0
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: LIST
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: ST_TO_ADDR
// end ; 1 :
65664: GO 66364
65666: LD_INT 1
65668: DOUBLE
65669: EQUAL
65670: IFTRUE 65674
65672: GO 65807
65674: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65675: LD_ADDR_VAR 0 5
65679: PUSH
65680: LD_VAR 0 1
65684: PUSH
65685: LD_VAR 0 2
65689: PUSH
65690: LD_INT 4
65692: MINUS
65693: PUSH
65694: LD_INT 3
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: LIST
65701: PUSH
65702: LD_VAR 0 1
65706: PUSH
65707: LD_INT 3
65709: MINUS
65710: PUSH
65711: LD_VAR 0 2
65715: PUSH
65716: LD_INT 3
65718: MINUS
65719: PUSH
65720: LD_INT 2
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: LIST
65727: PUSH
65728: LD_VAR 0 1
65732: PUSH
65733: LD_INT 4
65735: MINUS
65736: PUSH
65737: LD_VAR 0 2
65741: PUSH
65742: LD_INT 1
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: LIST
65749: PUSH
65750: LD_VAR 0 1
65754: PUSH
65755: LD_VAR 0 2
65759: PUSH
65760: LD_INT 3
65762: PLUS
65763: PUSH
65764: LD_INT 0
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: LIST
65771: PUSH
65772: LD_VAR 0 1
65776: PUSH
65777: LD_INT 4
65779: PLUS
65780: PUSH
65781: LD_VAR 0 2
65785: PUSH
65786: LD_INT 4
65788: PLUS
65789: PUSH
65790: LD_INT 5
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: LIST
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: ST_TO_ADDR
// end ; 2 :
65805: GO 66364
65807: LD_INT 2
65809: DOUBLE
65810: EQUAL
65811: IFTRUE 65815
65813: GO 65944
65815: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65816: LD_ADDR_VAR 0 5
65820: PUSH
65821: LD_VAR 0 1
65825: PUSH
65826: LD_VAR 0 2
65830: PUSH
65831: LD_INT 3
65833: MINUS
65834: PUSH
65835: LD_INT 3
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: LIST
65842: PUSH
65843: LD_VAR 0 1
65847: PUSH
65848: LD_INT 4
65850: PLUS
65851: PUSH
65852: LD_VAR 0 2
65856: PUSH
65857: LD_INT 4
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: LIST
65864: PUSH
65865: LD_VAR 0 1
65869: PUSH
65870: LD_VAR 0 2
65874: PUSH
65875: LD_INT 4
65877: PLUS
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: LIST
65886: PUSH
65887: LD_VAR 0 1
65891: PUSH
65892: LD_INT 3
65894: MINUS
65895: PUSH
65896: LD_VAR 0 2
65900: PUSH
65901: LD_INT 1
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: LIST
65908: PUSH
65909: LD_VAR 0 1
65913: PUSH
65914: LD_INT 4
65916: MINUS
65917: PUSH
65918: LD_VAR 0 2
65922: PUSH
65923: LD_INT 4
65925: MINUS
65926: PUSH
65927: LD_INT 2
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: LIST
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: ST_TO_ADDR
// end ; 3 :
65942: GO 66364
65944: LD_INT 3
65946: DOUBLE
65947: EQUAL
65948: IFTRUE 65952
65950: GO 66085
65952: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65953: LD_ADDR_VAR 0 5
65957: PUSH
65958: LD_VAR 0 1
65962: PUSH
65963: LD_INT 3
65965: PLUS
65966: PUSH
65967: LD_VAR 0 2
65971: PUSH
65972: LD_INT 4
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: LIST
65979: PUSH
65980: LD_VAR 0 1
65984: PUSH
65985: LD_INT 4
65987: PLUS
65988: PUSH
65989: LD_VAR 0 2
65993: PUSH
65994: LD_INT 4
65996: PLUS
65997: PUSH
65998: LD_INT 5
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: LIST
66005: PUSH
66006: LD_VAR 0 1
66010: PUSH
66011: LD_INT 4
66013: MINUS
66014: PUSH
66015: LD_VAR 0 2
66019: PUSH
66020: LD_INT 1
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: LIST
66027: PUSH
66028: LD_VAR 0 1
66032: PUSH
66033: LD_VAR 0 2
66037: PUSH
66038: LD_INT 4
66040: MINUS
66041: PUSH
66042: LD_INT 3
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: LIST
66049: PUSH
66050: LD_VAR 0 1
66054: PUSH
66055: LD_INT 3
66057: MINUS
66058: PUSH
66059: LD_VAR 0 2
66063: PUSH
66064: LD_INT 3
66066: MINUS
66067: PUSH
66068: LD_INT 2
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: LIST
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: ST_TO_ADDR
// end ; 4 :
66083: GO 66364
66085: LD_INT 4
66087: DOUBLE
66088: EQUAL
66089: IFTRUE 66093
66091: GO 66226
66093: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66094: LD_ADDR_VAR 0 5
66098: PUSH
66099: LD_VAR 0 1
66103: PUSH
66104: LD_VAR 0 2
66108: PUSH
66109: LD_INT 4
66111: PLUS
66112: PUSH
66113: LD_INT 0
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: LIST
66120: PUSH
66121: LD_VAR 0 1
66125: PUSH
66126: LD_INT 3
66128: PLUS
66129: PUSH
66130: LD_VAR 0 2
66134: PUSH
66135: LD_INT 3
66137: PLUS
66138: PUSH
66139: LD_INT 5
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: LIST
66146: PUSH
66147: LD_VAR 0 1
66151: PUSH
66152: LD_INT 4
66154: PLUS
66155: PUSH
66156: LD_VAR 0 2
66160: PUSH
66161: LD_INT 4
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: LIST
66168: PUSH
66169: LD_VAR 0 1
66173: PUSH
66174: LD_VAR 0 2
66178: PUSH
66179: LD_INT 3
66181: MINUS
66182: PUSH
66183: LD_INT 3
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: LIST
66190: PUSH
66191: LD_VAR 0 1
66195: PUSH
66196: LD_INT 4
66198: MINUS
66199: PUSH
66200: LD_VAR 0 2
66204: PUSH
66205: LD_INT 4
66207: MINUS
66208: PUSH
66209: LD_INT 2
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: LIST
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: ST_TO_ADDR
// end ; 5 :
66224: GO 66364
66226: LD_INT 5
66228: DOUBLE
66229: EQUAL
66230: IFTRUE 66234
66232: GO 66363
66234: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66235: LD_ADDR_VAR 0 5
66239: PUSH
66240: LD_VAR 0 1
66244: PUSH
66245: LD_INT 4
66247: MINUS
66248: PUSH
66249: LD_VAR 0 2
66253: PUSH
66254: LD_INT 1
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: LIST
66261: PUSH
66262: LD_VAR 0 1
66266: PUSH
66267: LD_VAR 0 2
66271: PUSH
66272: LD_INT 4
66274: MINUS
66275: PUSH
66276: LD_INT 3
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: LIST
66283: PUSH
66284: LD_VAR 0 1
66288: PUSH
66289: LD_INT 4
66291: PLUS
66292: PUSH
66293: LD_VAR 0 2
66297: PUSH
66298: LD_INT 4
66300: PLUS
66301: PUSH
66302: LD_INT 5
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: LIST
66309: PUSH
66310: LD_VAR 0 1
66314: PUSH
66315: LD_INT 3
66317: PLUS
66318: PUSH
66319: LD_VAR 0 2
66323: PUSH
66324: LD_INT 4
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: LIST
66331: PUSH
66332: LD_VAR 0 1
66336: PUSH
66337: LD_VAR 0 2
66341: PUSH
66342: LD_INT 3
66344: PLUS
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: LIST
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: ST_TO_ADDR
// end ; end ;
66361: GO 66364
66363: POP
// result := list ;
66364: LD_ADDR_VAR 0 4
66368: PUSH
66369: LD_VAR 0 5
66373: ST_TO_ADDR
// end ;
66374: LD_VAR 0 4
66378: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66379: LD_INT 0
66381: PPUSH
66382: PPUSH
66383: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66384: LD_VAR 0 1
66388: NOT
66389: PUSH
66390: LD_VAR 0 2
66394: PUSH
66395: LD_INT 1
66397: PUSH
66398: LD_INT 2
66400: PUSH
66401: LD_INT 3
66403: PUSH
66404: LD_INT 4
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: IN
66413: NOT
66414: OR
66415: IFFALSE 66419
// exit ;
66417: GO 66502
// tmp := [ ] ;
66419: LD_ADDR_VAR 0 5
66423: PUSH
66424: EMPTY
66425: ST_TO_ADDR
// for i in units do
66426: LD_ADDR_VAR 0 4
66430: PUSH
66431: LD_VAR 0 1
66435: PUSH
66436: FOR_IN
66437: IFFALSE 66471
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66439: LD_ADDR_VAR 0 5
66443: PUSH
66444: LD_VAR 0 5
66448: PPUSH
66449: LD_VAR 0 4
66453: PPUSH
66454: LD_VAR 0 2
66458: PPUSH
66459: CALL_OW 259
66463: PPUSH
66464: CALL 67863 0 2
66468: ST_TO_ADDR
66469: GO 66436
66471: POP
66472: POP
// if not tmp then
66473: LD_VAR 0 5
66477: NOT
66478: IFFALSE 66482
// exit ;
66480: GO 66502
// result := SortListByListDesc ( units , tmp ) ;
66482: LD_ADDR_VAR 0 3
66486: PUSH
66487: LD_VAR 0 1
66491: PPUSH
66492: LD_VAR 0 5
66496: PPUSH
66497: CALL_OW 77
66501: ST_TO_ADDR
// end ;
66502: LD_VAR 0 3
66506: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66507: LD_INT 0
66509: PPUSH
66510: PPUSH
66511: PPUSH
// result := false ;
66512: LD_ADDR_VAR 0 3
66516: PUSH
66517: LD_INT 0
66519: ST_TO_ADDR
// if not building then
66520: LD_VAR 0 2
66524: NOT
66525: IFFALSE 66529
// exit ;
66527: GO 66667
// x := GetX ( building ) ;
66529: LD_ADDR_VAR 0 4
66533: PUSH
66534: LD_VAR 0 2
66538: PPUSH
66539: CALL_OW 250
66543: ST_TO_ADDR
// y := GetY ( building ) ;
66544: LD_ADDR_VAR 0 5
66548: PUSH
66549: LD_VAR 0 2
66553: PPUSH
66554: CALL_OW 251
66558: ST_TO_ADDR
// if not x or not y then
66559: LD_VAR 0 4
66563: NOT
66564: PUSH
66565: LD_VAR 0 5
66569: NOT
66570: OR
66571: IFFALSE 66575
// exit ;
66573: GO 66667
// if GetTaskList ( unit ) then
66575: LD_VAR 0 1
66579: PPUSH
66580: CALL_OW 437
66584: IFFALSE 66667
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66586: LD_STRING e
66588: PUSH
66589: LD_VAR 0 1
66593: PPUSH
66594: CALL_OW 437
66598: PUSH
66599: LD_INT 1
66601: ARRAY
66602: PUSH
66603: LD_INT 1
66605: ARRAY
66606: EQUAL
66607: PUSH
66608: LD_VAR 0 4
66612: PUSH
66613: LD_VAR 0 1
66617: PPUSH
66618: CALL_OW 437
66622: PUSH
66623: LD_INT 1
66625: ARRAY
66626: PUSH
66627: LD_INT 2
66629: ARRAY
66630: EQUAL
66631: AND
66632: PUSH
66633: LD_VAR 0 5
66637: PUSH
66638: LD_VAR 0 1
66642: PPUSH
66643: CALL_OW 437
66647: PUSH
66648: LD_INT 1
66650: ARRAY
66651: PUSH
66652: LD_INT 3
66654: ARRAY
66655: EQUAL
66656: AND
66657: IFFALSE 66667
// result := true end ;
66659: LD_ADDR_VAR 0 3
66663: PUSH
66664: LD_INT 1
66666: ST_TO_ADDR
// end ;
66667: LD_VAR 0 3
66671: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66672: LD_INT 0
66674: PPUSH
// result := false ;
66675: LD_ADDR_VAR 0 4
66679: PUSH
66680: LD_INT 0
66682: ST_TO_ADDR
// if GetTaskList ( unit ) then
66683: LD_VAR 0 1
66687: PPUSH
66688: CALL_OW 437
66692: IFFALSE 66775
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66694: LD_STRING M
66696: PUSH
66697: LD_VAR 0 1
66701: PPUSH
66702: CALL_OW 437
66706: PUSH
66707: LD_INT 1
66709: ARRAY
66710: PUSH
66711: LD_INT 1
66713: ARRAY
66714: EQUAL
66715: PUSH
66716: LD_VAR 0 2
66720: PUSH
66721: LD_VAR 0 1
66725: PPUSH
66726: CALL_OW 437
66730: PUSH
66731: LD_INT 1
66733: ARRAY
66734: PUSH
66735: LD_INT 2
66737: ARRAY
66738: EQUAL
66739: AND
66740: PUSH
66741: LD_VAR 0 3
66745: PUSH
66746: LD_VAR 0 1
66750: PPUSH
66751: CALL_OW 437
66755: PUSH
66756: LD_INT 1
66758: ARRAY
66759: PUSH
66760: LD_INT 3
66762: ARRAY
66763: EQUAL
66764: AND
66765: IFFALSE 66775
// result := true ;
66767: LD_ADDR_VAR 0 4
66771: PUSH
66772: LD_INT 1
66774: ST_TO_ADDR
// end ; end ;
66775: LD_VAR 0 4
66779: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66780: LD_INT 0
66782: PPUSH
66783: PPUSH
66784: PPUSH
66785: PPUSH
// if not unit or not area then
66786: LD_VAR 0 1
66790: NOT
66791: PUSH
66792: LD_VAR 0 2
66796: NOT
66797: OR
66798: IFFALSE 66802
// exit ;
66800: GO 66966
// tmp := AreaToList ( area , i ) ;
66802: LD_ADDR_VAR 0 6
66806: PUSH
66807: LD_VAR 0 2
66811: PPUSH
66812: LD_VAR 0 5
66816: PPUSH
66817: CALL_OW 517
66821: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66822: LD_ADDR_VAR 0 5
66826: PUSH
66827: DOUBLE
66828: LD_INT 1
66830: DEC
66831: ST_TO_ADDR
66832: LD_VAR 0 6
66836: PUSH
66837: LD_INT 1
66839: ARRAY
66840: PUSH
66841: FOR_TO
66842: IFFALSE 66964
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66844: LD_ADDR_VAR 0 7
66848: PUSH
66849: LD_VAR 0 6
66853: PUSH
66854: LD_INT 1
66856: ARRAY
66857: PUSH
66858: LD_VAR 0 5
66862: ARRAY
66863: PUSH
66864: LD_VAR 0 6
66868: PUSH
66869: LD_INT 2
66871: ARRAY
66872: PUSH
66873: LD_VAR 0 5
66877: ARRAY
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66883: LD_VAR 0 7
66887: PUSH
66888: LD_INT 1
66890: ARRAY
66891: PPUSH
66892: LD_VAR 0 7
66896: PUSH
66897: LD_INT 2
66899: ARRAY
66900: PPUSH
66901: CALL_OW 428
66905: PUSH
66906: LD_INT 0
66908: EQUAL
66909: IFFALSE 66962
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66911: LD_VAR 0 1
66915: PPUSH
66916: LD_VAR 0 7
66920: PUSH
66921: LD_INT 1
66923: ARRAY
66924: PPUSH
66925: LD_VAR 0 7
66929: PUSH
66930: LD_INT 2
66932: ARRAY
66933: PPUSH
66934: LD_VAR 0 3
66938: PPUSH
66939: CALL_OW 48
// result := IsPlaced ( unit ) ;
66943: LD_ADDR_VAR 0 4
66947: PUSH
66948: LD_VAR 0 1
66952: PPUSH
66953: CALL_OW 305
66957: ST_TO_ADDR
// exit ;
66958: POP
66959: POP
66960: GO 66966
// end ; end ;
66962: GO 66841
66964: POP
66965: POP
// end ;
66966: LD_VAR 0 4
66970: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66971: LD_INT 0
66973: PPUSH
66974: PPUSH
66975: PPUSH
// if not side or side > 8 then
66976: LD_VAR 0 1
66980: NOT
66981: PUSH
66982: LD_VAR 0 1
66986: PUSH
66987: LD_INT 8
66989: GREATER
66990: OR
66991: IFFALSE 66995
// exit ;
66993: GO 67182
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66995: LD_ADDR_VAR 0 4
66999: PUSH
67000: LD_INT 22
67002: PUSH
67003: LD_VAR 0 1
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 21
67014: PUSH
67015: LD_INT 3
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PPUSH
67026: CALL_OW 69
67030: ST_TO_ADDR
// if not tmp then
67031: LD_VAR 0 4
67035: NOT
67036: IFFALSE 67040
// exit ;
67038: GO 67182
// enable_addtolog := true ;
67040: LD_ADDR_OWVAR 81
67044: PUSH
67045: LD_INT 1
67047: ST_TO_ADDR
// AddToLog ( [ ) ;
67048: LD_STRING [
67050: PPUSH
67051: CALL_OW 561
// for i in tmp do
67055: LD_ADDR_VAR 0 3
67059: PUSH
67060: LD_VAR 0 4
67064: PUSH
67065: FOR_IN
67066: IFFALSE 67173
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67068: LD_STRING [
67070: PUSH
67071: LD_VAR 0 3
67075: PPUSH
67076: CALL_OW 266
67080: STR
67081: PUSH
67082: LD_STRING , 
67084: STR
67085: PUSH
67086: LD_VAR 0 3
67090: PPUSH
67091: CALL_OW 250
67095: STR
67096: PUSH
67097: LD_STRING , 
67099: STR
67100: PUSH
67101: LD_VAR 0 3
67105: PPUSH
67106: CALL_OW 251
67110: STR
67111: PUSH
67112: LD_STRING , 
67114: STR
67115: PUSH
67116: LD_VAR 0 3
67120: PPUSH
67121: CALL_OW 254
67125: STR
67126: PUSH
67127: LD_STRING , 
67129: STR
67130: PUSH
67131: LD_VAR 0 3
67135: PPUSH
67136: LD_INT 1
67138: PPUSH
67139: CALL_OW 268
67143: STR
67144: PUSH
67145: LD_STRING , 
67147: STR
67148: PUSH
67149: LD_VAR 0 3
67153: PPUSH
67154: LD_INT 2
67156: PPUSH
67157: CALL_OW 268
67161: STR
67162: PUSH
67163: LD_STRING ],
67165: STR
67166: PPUSH
67167: CALL_OW 561
// end ;
67171: GO 67065
67173: POP
67174: POP
// AddToLog ( ]; ) ;
67175: LD_STRING ];
67177: PPUSH
67178: CALL_OW 561
// end ;
67182: LD_VAR 0 2
67186: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67187: LD_INT 0
67189: PPUSH
67190: PPUSH
67191: PPUSH
67192: PPUSH
67193: PPUSH
// if not area or not rate or not max then
67194: LD_VAR 0 1
67198: NOT
67199: PUSH
67200: LD_VAR 0 2
67204: NOT
67205: OR
67206: PUSH
67207: LD_VAR 0 4
67211: NOT
67212: OR
67213: IFFALSE 67217
// exit ;
67215: GO 67406
// while 1 do
67217: LD_INT 1
67219: IFFALSE 67406
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67221: LD_ADDR_VAR 0 9
67225: PUSH
67226: LD_VAR 0 1
67230: PPUSH
67231: LD_INT 1
67233: PPUSH
67234: CALL_OW 287
67238: PUSH
67239: LD_INT 10
67241: MUL
67242: ST_TO_ADDR
// r := rate / 10 ;
67243: LD_ADDR_VAR 0 7
67247: PUSH
67248: LD_VAR 0 2
67252: PUSH
67253: LD_INT 10
67255: DIVREAL
67256: ST_TO_ADDR
// time := 1 1$00 ;
67257: LD_ADDR_VAR 0 8
67261: PUSH
67262: LD_INT 2100
67264: ST_TO_ADDR
// if amount < min then
67265: LD_VAR 0 9
67269: PUSH
67270: LD_VAR 0 3
67274: LESS
67275: IFFALSE 67293
// r := r * 2 else
67277: LD_ADDR_VAR 0 7
67281: PUSH
67282: LD_VAR 0 7
67286: PUSH
67287: LD_INT 2
67289: MUL
67290: ST_TO_ADDR
67291: GO 67319
// if amount > max then
67293: LD_VAR 0 9
67297: PUSH
67298: LD_VAR 0 4
67302: GREATER
67303: IFFALSE 67319
// r := r / 2 ;
67305: LD_ADDR_VAR 0 7
67309: PUSH
67310: LD_VAR 0 7
67314: PUSH
67315: LD_INT 2
67317: DIVREAL
67318: ST_TO_ADDR
// time := time / r ;
67319: LD_ADDR_VAR 0 8
67323: PUSH
67324: LD_VAR 0 8
67328: PUSH
67329: LD_VAR 0 7
67333: DIVREAL
67334: ST_TO_ADDR
// if time < 0 then
67335: LD_VAR 0 8
67339: PUSH
67340: LD_INT 0
67342: LESS
67343: IFFALSE 67360
// time := time * - 1 ;
67345: LD_ADDR_VAR 0 8
67349: PUSH
67350: LD_VAR 0 8
67354: PUSH
67355: LD_INT 1
67357: NEG
67358: MUL
67359: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67360: LD_VAR 0 8
67364: PUSH
67365: LD_INT 35
67367: PPUSH
67368: LD_INT 875
67370: PPUSH
67371: CALL_OW 12
67375: PLUS
67376: PPUSH
67377: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67381: LD_INT 1
67383: PPUSH
67384: LD_INT 5
67386: PPUSH
67387: CALL_OW 12
67391: PPUSH
67392: LD_VAR 0 1
67396: PPUSH
67397: LD_INT 1
67399: PPUSH
67400: CALL_OW 55
// end ;
67404: GO 67217
// end ;
67406: LD_VAR 0 5
67410: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67411: LD_INT 0
67413: PPUSH
67414: PPUSH
67415: PPUSH
67416: PPUSH
67417: PPUSH
67418: PPUSH
67419: PPUSH
67420: PPUSH
// if not turrets or not factories then
67421: LD_VAR 0 1
67425: NOT
67426: PUSH
67427: LD_VAR 0 2
67431: NOT
67432: OR
67433: IFFALSE 67437
// exit ;
67435: GO 67744
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67437: LD_ADDR_VAR 0 10
67441: PUSH
67442: LD_INT 5
67444: PUSH
67445: LD_INT 6
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 2
67454: PUSH
67455: LD_INT 4
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 3
67464: PUSH
67465: LD_INT 5
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 24
67479: PUSH
67480: LD_INT 25
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 23
67489: PUSH
67490: LD_INT 27
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 42
67503: PUSH
67504: LD_INT 43
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 44
67513: PUSH
67514: LD_INT 46
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 45
67523: PUSH
67524: LD_INT 47
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: LIST
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: LIST
67540: ST_TO_ADDR
// result := [ ] ;
67541: LD_ADDR_VAR 0 3
67545: PUSH
67546: EMPTY
67547: ST_TO_ADDR
// for i in turrets do
67548: LD_ADDR_VAR 0 4
67552: PUSH
67553: LD_VAR 0 1
67557: PUSH
67558: FOR_IN
67559: IFFALSE 67742
// begin nat := GetNation ( i ) ;
67561: LD_ADDR_VAR 0 7
67565: PUSH
67566: LD_VAR 0 4
67570: PPUSH
67571: CALL_OW 248
67575: ST_TO_ADDR
// weapon := 0 ;
67576: LD_ADDR_VAR 0 8
67580: PUSH
67581: LD_INT 0
67583: ST_TO_ADDR
// if not nat then
67584: LD_VAR 0 7
67588: NOT
67589: IFFALSE 67593
// continue ;
67591: GO 67558
// for j in list [ nat ] do
67593: LD_ADDR_VAR 0 5
67597: PUSH
67598: LD_VAR 0 10
67602: PUSH
67603: LD_VAR 0 7
67607: ARRAY
67608: PUSH
67609: FOR_IN
67610: IFFALSE 67651
// if GetBWeapon ( i ) = j [ 1 ] then
67612: LD_VAR 0 4
67616: PPUSH
67617: CALL_OW 269
67621: PUSH
67622: LD_VAR 0 5
67626: PUSH
67627: LD_INT 1
67629: ARRAY
67630: EQUAL
67631: IFFALSE 67649
// begin weapon := j [ 2 ] ;
67633: LD_ADDR_VAR 0 8
67637: PUSH
67638: LD_VAR 0 5
67642: PUSH
67643: LD_INT 2
67645: ARRAY
67646: ST_TO_ADDR
// break ;
67647: GO 67651
// end ;
67649: GO 67609
67651: POP
67652: POP
// if not weapon then
67653: LD_VAR 0 8
67657: NOT
67658: IFFALSE 67662
// continue ;
67660: GO 67558
// for k in factories do
67662: LD_ADDR_VAR 0 6
67666: PUSH
67667: LD_VAR 0 2
67671: PUSH
67672: FOR_IN
67673: IFFALSE 67738
// begin weapons := AvailableWeaponList ( k ) ;
67675: LD_ADDR_VAR 0 9
67679: PUSH
67680: LD_VAR 0 6
67684: PPUSH
67685: CALL_OW 478
67689: ST_TO_ADDR
// if not weapons then
67690: LD_VAR 0 9
67694: NOT
67695: IFFALSE 67699
// continue ;
67697: GO 67672
// if weapon in weapons then
67699: LD_VAR 0 8
67703: PUSH
67704: LD_VAR 0 9
67708: IN
67709: IFFALSE 67736
// begin result := [ i , weapon ] ;
67711: LD_ADDR_VAR 0 3
67715: PUSH
67716: LD_VAR 0 4
67720: PUSH
67721: LD_VAR 0 8
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: ST_TO_ADDR
// exit ;
67730: POP
67731: POP
67732: POP
67733: POP
67734: GO 67744
// end ; end ;
67736: GO 67672
67738: POP
67739: POP
// end ;
67740: GO 67558
67742: POP
67743: POP
// end ;
67744: LD_VAR 0 3
67748: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67749: LD_INT 0
67751: PPUSH
// if not side or side > 8 then
67752: LD_VAR 0 3
67756: NOT
67757: PUSH
67758: LD_VAR 0 3
67762: PUSH
67763: LD_INT 8
67765: GREATER
67766: OR
67767: IFFALSE 67771
// exit ;
67769: GO 67830
// if not range then
67771: LD_VAR 0 4
67775: NOT
67776: IFFALSE 67787
// range := - 12 ;
67778: LD_ADDR_VAR 0 4
67782: PUSH
67783: LD_INT 12
67785: NEG
67786: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67787: LD_VAR 0 1
67791: PPUSH
67792: LD_VAR 0 2
67796: PPUSH
67797: LD_VAR 0 3
67801: PPUSH
67802: LD_VAR 0 4
67806: PPUSH
67807: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67811: LD_VAR 0 1
67815: PPUSH
67816: LD_VAR 0 2
67820: PPUSH
67821: LD_VAR 0 3
67825: PPUSH
67826: CALL_OW 331
// end ;
67830: LD_VAR 0 5
67834: RET
// export function Video ( mode ) ; begin
67835: LD_INT 0
67837: PPUSH
// ingame_video = mode ;
67838: LD_ADDR_OWVAR 52
67842: PUSH
67843: LD_VAR 0 1
67847: ST_TO_ADDR
// interface_hidden = mode ;
67848: LD_ADDR_OWVAR 54
67852: PUSH
67853: LD_VAR 0 1
67857: ST_TO_ADDR
// end ;
67858: LD_VAR 0 2
67862: RET
// export function Join ( array , element ) ; begin
67863: LD_INT 0
67865: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67866: LD_ADDR_VAR 0 3
67870: PUSH
67871: LD_VAR 0 1
67875: PPUSH
67876: LD_VAR 0 1
67880: PUSH
67881: LD_INT 1
67883: PLUS
67884: PPUSH
67885: LD_VAR 0 2
67889: PPUSH
67890: CALL_OW 1
67894: ST_TO_ADDR
// end ;
67895: LD_VAR 0 3
67899: RET
// export function JoinUnion ( array , element ) ; begin
67900: LD_INT 0
67902: PPUSH
// result := array union element ;
67903: LD_ADDR_VAR 0 3
67907: PUSH
67908: LD_VAR 0 1
67912: PUSH
67913: LD_VAR 0 2
67917: UNION
67918: ST_TO_ADDR
// end ;
67919: LD_VAR 0 3
67923: RET
// export function GetBehemoths ( side ) ; begin
67924: LD_INT 0
67926: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67927: LD_ADDR_VAR 0 2
67931: PUSH
67932: LD_INT 22
67934: PUSH
67935: LD_VAR 0 1
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 31
67946: PUSH
67947: LD_INT 25
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PPUSH
67958: CALL_OW 69
67962: ST_TO_ADDR
// end ;
67963: LD_VAR 0 2
67967: RET
// export function Shuffle ( array ) ; var i , index ; begin
67968: LD_INT 0
67970: PPUSH
67971: PPUSH
67972: PPUSH
// result := [ ] ;
67973: LD_ADDR_VAR 0 2
67977: PUSH
67978: EMPTY
67979: ST_TO_ADDR
// if not array then
67980: LD_VAR 0 1
67984: NOT
67985: IFFALSE 67989
// exit ;
67987: GO 68088
// Randomize ;
67989: CALL_OW 10
// for i = array downto 1 do
67993: LD_ADDR_VAR 0 3
67997: PUSH
67998: DOUBLE
67999: LD_VAR 0 1
68003: INC
68004: ST_TO_ADDR
68005: LD_INT 1
68007: PUSH
68008: FOR_DOWNTO
68009: IFFALSE 68086
// begin index := rand ( 1 , array ) ;
68011: LD_ADDR_VAR 0 4
68015: PUSH
68016: LD_INT 1
68018: PPUSH
68019: LD_VAR 0 1
68023: PPUSH
68024: CALL_OW 12
68028: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68029: LD_ADDR_VAR 0 2
68033: PUSH
68034: LD_VAR 0 2
68038: PPUSH
68039: LD_VAR 0 2
68043: PUSH
68044: LD_INT 1
68046: PLUS
68047: PPUSH
68048: LD_VAR 0 1
68052: PUSH
68053: LD_VAR 0 4
68057: ARRAY
68058: PPUSH
68059: CALL_OW 2
68063: ST_TO_ADDR
// array := Delete ( array , index ) ;
68064: LD_ADDR_VAR 0 1
68068: PUSH
68069: LD_VAR 0 1
68073: PPUSH
68074: LD_VAR 0 4
68078: PPUSH
68079: CALL_OW 3
68083: ST_TO_ADDR
// end ;
68084: GO 68008
68086: POP
68087: POP
// end ;
68088: LD_VAR 0 2
68092: RET
// export function GetBaseMaterials ( base ) ; begin
68093: LD_INT 0
68095: PPUSH
// result := [ 0 , 0 , 0 ] ;
68096: LD_ADDR_VAR 0 2
68100: PUSH
68101: LD_INT 0
68103: PUSH
68104: LD_INT 0
68106: PUSH
68107: LD_INT 0
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: LIST
68114: ST_TO_ADDR
// if not base then
68115: LD_VAR 0 1
68119: NOT
68120: IFFALSE 68124
// exit ;
68122: GO 68173
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68124: LD_ADDR_VAR 0 2
68128: PUSH
68129: LD_VAR 0 1
68133: PPUSH
68134: LD_INT 1
68136: PPUSH
68137: CALL_OW 275
68141: PUSH
68142: LD_VAR 0 1
68146: PPUSH
68147: LD_INT 2
68149: PPUSH
68150: CALL_OW 275
68154: PUSH
68155: LD_VAR 0 1
68159: PPUSH
68160: LD_INT 3
68162: PPUSH
68163: CALL_OW 275
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: LIST
68172: ST_TO_ADDR
// end ;
68173: LD_VAR 0 2
68177: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68178: LD_INT 0
68180: PPUSH
68181: PPUSH
// result := array ;
68182: LD_ADDR_VAR 0 3
68186: PUSH
68187: LD_VAR 0 1
68191: ST_TO_ADDR
// if size >= result then
68192: LD_VAR 0 2
68196: PUSH
68197: LD_VAR 0 3
68201: GREATEREQUAL
68202: IFFALSE 68206
// exit ;
68204: GO 68256
// if size then
68206: LD_VAR 0 2
68210: IFFALSE 68256
// for i := array downto size do
68212: LD_ADDR_VAR 0 4
68216: PUSH
68217: DOUBLE
68218: LD_VAR 0 1
68222: INC
68223: ST_TO_ADDR
68224: LD_VAR 0 2
68228: PUSH
68229: FOR_DOWNTO
68230: IFFALSE 68254
// result := Delete ( result , result ) ;
68232: LD_ADDR_VAR 0 3
68236: PUSH
68237: LD_VAR 0 3
68241: PPUSH
68242: LD_VAR 0 3
68246: PPUSH
68247: CALL_OW 3
68251: ST_TO_ADDR
68252: GO 68229
68254: POP
68255: POP
// end ;
68256: LD_VAR 0 3
68260: RET
// export function ComExit ( unit ) ; var tmp ; begin
68261: LD_INT 0
68263: PPUSH
68264: PPUSH
// if not IsInUnit ( unit ) then
68265: LD_VAR 0 1
68269: PPUSH
68270: CALL_OW 310
68274: NOT
68275: IFFALSE 68279
// exit ;
68277: GO 68339
// tmp := IsInUnit ( unit ) ;
68279: LD_ADDR_VAR 0 3
68283: PUSH
68284: LD_VAR 0 1
68288: PPUSH
68289: CALL_OW 310
68293: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68294: LD_VAR 0 3
68298: PPUSH
68299: CALL_OW 247
68303: PUSH
68304: LD_INT 2
68306: EQUAL
68307: IFFALSE 68320
// ComExitVehicle ( unit ) else
68309: LD_VAR 0 1
68313: PPUSH
68314: CALL_OW 121
68318: GO 68329
// ComExitBuilding ( unit ) ;
68320: LD_VAR 0 1
68324: PPUSH
68325: CALL_OW 122
// result := tmp ;
68329: LD_ADDR_VAR 0 2
68333: PUSH
68334: LD_VAR 0 3
68338: ST_TO_ADDR
// end ;
68339: LD_VAR 0 2
68343: RET
// export function ComExitAll ( units ) ; var i ; begin
68344: LD_INT 0
68346: PPUSH
68347: PPUSH
// if not units then
68348: LD_VAR 0 1
68352: NOT
68353: IFFALSE 68357
// exit ;
68355: GO 68383
// for i in units do
68357: LD_ADDR_VAR 0 3
68361: PUSH
68362: LD_VAR 0 1
68366: PUSH
68367: FOR_IN
68368: IFFALSE 68381
// ComExit ( i ) ;
68370: LD_VAR 0 3
68374: PPUSH
68375: CALL 68261 0 1
68379: GO 68367
68381: POP
68382: POP
// end ;
68383: LD_VAR 0 2
68387: RET
// export function ResetHc ; begin
68388: LD_INT 0
68390: PPUSH
// InitHc ;
68391: CALL_OW 19
// hc_importance := 0 ;
68395: LD_ADDR_OWVAR 32
68399: PUSH
68400: LD_INT 0
68402: ST_TO_ADDR
// end ;
68403: LD_VAR 0 1
68407: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68408: LD_INT 0
68410: PPUSH
68411: PPUSH
68412: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68413: LD_ADDR_VAR 0 6
68417: PUSH
68418: LD_VAR 0 1
68422: PUSH
68423: LD_VAR 0 3
68427: PLUS
68428: PUSH
68429: LD_INT 2
68431: DIV
68432: ST_TO_ADDR
// if _x < 0 then
68433: LD_VAR 0 6
68437: PUSH
68438: LD_INT 0
68440: LESS
68441: IFFALSE 68458
// _x := _x * - 1 ;
68443: LD_ADDR_VAR 0 6
68447: PUSH
68448: LD_VAR 0 6
68452: PUSH
68453: LD_INT 1
68455: NEG
68456: MUL
68457: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68458: LD_ADDR_VAR 0 7
68462: PUSH
68463: LD_VAR 0 2
68467: PUSH
68468: LD_VAR 0 4
68472: PLUS
68473: PUSH
68474: LD_INT 2
68476: DIV
68477: ST_TO_ADDR
// if _y < 0 then
68478: LD_VAR 0 7
68482: PUSH
68483: LD_INT 0
68485: LESS
68486: IFFALSE 68503
// _y := _y * - 1 ;
68488: LD_ADDR_VAR 0 7
68492: PUSH
68493: LD_VAR 0 7
68497: PUSH
68498: LD_INT 1
68500: NEG
68501: MUL
68502: ST_TO_ADDR
// result := [ _x , _y ] ;
68503: LD_ADDR_VAR 0 5
68507: PUSH
68508: LD_VAR 0 6
68512: PUSH
68513: LD_VAR 0 7
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: ST_TO_ADDR
// end ;
68522: LD_VAR 0 5
68526: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68527: LD_INT 0
68529: PPUSH
68530: PPUSH
68531: PPUSH
68532: PPUSH
// task := GetTaskList ( unit ) ;
68533: LD_ADDR_VAR 0 7
68537: PUSH
68538: LD_VAR 0 1
68542: PPUSH
68543: CALL_OW 437
68547: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68548: LD_VAR 0 7
68552: NOT
68553: PUSH
68554: LD_VAR 0 1
68558: PPUSH
68559: LD_VAR 0 2
68563: PPUSH
68564: CALL_OW 308
68568: NOT
68569: AND
68570: IFFALSE 68574
// exit ;
68572: GO 68692
// if IsInArea ( unit , area ) then
68574: LD_VAR 0 1
68578: PPUSH
68579: LD_VAR 0 2
68583: PPUSH
68584: CALL_OW 308
68588: IFFALSE 68606
// begin ComMoveToArea ( unit , goAway ) ;
68590: LD_VAR 0 1
68594: PPUSH
68595: LD_VAR 0 3
68599: PPUSH
68600: CALL_OW 113
// exit ;
68604: GO 68692
// end ; if task [ 1 ] [ 1 ] <> M then
68606: LD_VAR 0 7
68610: PUSH
68611: LD_INT 1
68613: ARRAY
68614: PUSH
68615: LD_INT 1
68617: ARRAY
68618: PUSH
68619: LD_STRING M
68621: NONEQUAL
68622: IFFALSE 68626
// exit ;
68624: GO 68692
// x := task [ 1 ] [ 2 ] ;
68626: LD_ADDR_VAR 0 5
68630: PUSH
68631: LD_VAR 0 7
68635: PUSH
68636: LD_INT 1
68638: ARRAY
68639: PUSH
68640: LD_INT 2
68642: ARRAY
68643: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68644: LD_ADDR_VAR 0 6
68648: PUSH
68649: LD_VAR 0 7
68653: PUSH
68654: LD_INT 1
68656: ARRAY
68657: PUSH
68658: LD_INT 3
68660: ARRAY
68661: ST_TO_ADDR
// if InArea ( x , y , area ) then
68662: LD_VAR 0 5
68666: PPUSH
68667: LD_VAR 0 6
68671: PPUSH
68672: LD_VAR 0 2
68676: PPUSH
68677: CALL_OW 309
68681: IFFALSE 68692
// ComStop ( unit ) ;
68683: LD_VAR 0 1
68687: PPUSH
68688: CALL_OW 141
// end ;
68692: LD_VAR 0 4
68696: RET
// export function Abs ( value ) ; begin
68697: LD_INT 0
68699: PPUSH
// result := value ;
68700: LD_ADDR_VAR 0 2
68704: PUSH
68705: LD_VAR 0 1
68709: ST_TO_ADDR
// if value < 0 then
68710: LD_VAR 0 1
68714: PUSH
68715: LD_INT 0
68717: LESS
68718: IFFALSE 68735
// result := value * - 1 ;
68720: LD_ADDR_VAR 0 2
68724: PUSH
68725: LD_VAR 0 1
68729: PUSH
68730: LD_INT 1
68732: NEG
68733: MUL
68734: ST_TO_ADDR
// end ;
68735: LD_VAR 0 2
68739: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68740: LD_INT 0
68742: PPUSH
68743: PPUSH
68744: PPUSH
68745: PPUSH
68746: PPUSH
68747: PPUSH
68748: PPUSH
68749: PPUSH
// if not unit or not building then
68750: LD_VAR 0 1
68754: NOT
68755: PUSH
68756: LD_VAR 0 2
68760: NOT
68761: OR
68762: IFFALSE 68766
// exit ;
68764: GO 68992
// x := GetX ( building ) ;
68766: LD_ADDR_VAR 0 4
68770: PUSH
68771: LD_VAR 0 2
68775: PPUSH
68776: CALL_OW 250
68780: ST_TO_ADDR
// y := GetY ( building ) ;
68781: LD_ADDR_VAR 0 6
68785: PUSH
68786: LD_VAR 0 2
68790: PPUSH
68791: CALL_OW 251
68795: ST_TO_ADDR
// d := GetDir ( building ) ;
68796: LD_ADDR_VAR 0 8
68800: PUSH
68801: LD_VAR 0 2
68805: PPUSH
68806: CALL_OW 254
68810: ST_TO_ADDR
// r := 4 ;
68811: LD_ADDR_VAR 0 9
68815: PUSH
68816: LD_INT 4
68818: ST_TO_ADDR
// for i := 1 to 5 do
68819: LD_ADDR_VAR 0 10
68823: PUSH
68824: DOUBLE
68825: LD_INT 1
68827: DEC
68828: ST_TO_ADDR
68829: LD_INT 5
68831: PUSH
68832: FOR_TO
68833: IFFALSE 68990
// begin _x := ShiftX ( x , d , r + i ) ;
68835: LD_ADDR_VAR 0 5
68839: PUSH
68840: LD_VAR 0 4
68844: PPUSH
68845: LD_VAR 0 8
68849: PPUSH
68850: LD_VAR 0 9
68854: PUSH
68855: LD_VAR 0 10
68859: PLUS
68860: PPUSH
68861: CALL_OW 272
68865: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68866: LD_ADDR_VAR 0 7
68870: PUSH
68871: LD_VAR 0 6
68875: PPUSH
68876: LD_VAR 0 8
68880: PPUSH
68881: LD_VAR 0 9
68885: PUSH
68886: LD_VAR 0 10
68890: PLUS
68891: PPUSH
68892: CALL_OW 273
68896: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68897: LD_VAR 0 5
68901: PPUSH
68902: LD_VAR 0 7
68906: PPUSH
68907: CALL_OW 488
68911: PUSH
68912: LD_VAR 0 5
68916: PPUSH
68917: LD_VAR 0 7
68921: PPUSH
68922: CALL_OW 428
68926: PPUSH
68927: CALL_OW 247
68931: PUSH
68932: LD_INT 3
68934: PUSH
68935: LD_INT 2
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: IN
68942: NOT
68943: AND
68944: IFFALSE 68988
// begin ComMoveXY ( unit , _x , _y ) ;
68946: LD_VAR 0 1
68950: PPUSH
68951: LD_VAR 0 5
68955: PPUSH
68956: LD_VAR 0 7
68960: PPUSH
68961: CALL_OW 111
// result := [ _x , _y ] ;
68965: LD_ADDR_VAR 0 3
68969: PUSH
68970: LD_VAR 0 5
68974: PUSH
68975: LD_VAR 0 7
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: ST_TO_ADDR
// exit ;
68984: POP
68985: POP
68986: GO 68992
// end ; end ;
68988: GO 68832
68990: POP
68991: POP
// end ;
68992: LD_VAR 0 3
68996: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68997: LD_INT 0
68999: PPUSH
69000: PPUSH
69001: PPUSH
// result := 0 ;
69002: LD_ADDR_VAR 0 3
69006: PUSH
69007: LD_INT 0
69009: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69010: LD_VAR 0 1
69014: PUSH
69015: LD_INT 0
69017: LESS
69018: PUSH
69019: LD_VAR 0 1
69023: PUSH
69024: LD_INT 8
69026: GREATER
69027: OR
69028: PUSH
69029: LD_VAR 0 2
69033: PUSH
69034: LD_INT 0
69036: LESS
69037: OR
69038: PUSH
69039: LD_VAR 0 2
69043: PUSH
69044: LD_INT 8
69046: GREATER
69047: OR
69048: IFFALSE 69052
// exit ;
69050: GO 69127
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69052: LD_ADDR_VAR 0 4
69056: PUSH
69057: LD_INT 22
69059: PUSH
69060: LD_VAR 0 2
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PPUSH
69069: CALL_OW 69
69073: PUSH
69074: FOR_IN
69075: IFFALSE 69125
// begin un := UnitShoot ( i ) ;
69077: LD_ADDR_VAR 0 5
69081: PUSH
69082: LD_VAR 0 4
69086: PPUSH
69087: CALL_OW 504
69091: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69092: LD_VAR 0 5
69096: PPUSH
69097: CALL_OW 255
69101: PUSH
69102: LD_VAR 0 1
69106: EQUAL
69107: IFFALSE 69123
// begin result := un ;
69109: LD_ADDR_VAR 0 3
69113: PUSH
69114: LD_VAR 0 5
69118: ST_TO_ADDR
// exit ;
69119: POP
69120: POP
69121: GO 69127
// end ; end ;
69123: GO 69074
69125: POP
69126: POP
// end ;
69127: LD_VAR 0 3
69131: RET
// export function GetCargoBay ( units ) ; begin
69132: LD_INT 0
69134: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69135: LD_ADDR_VAR 0 2
69139: PUSH
69140: LD_VAR 0 1
69144: PPUSH
69145: LD_INT 2
69147: PUSH
69148: LD_INT 34
69150: PUSH
69151: LD_INT 12
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 34
69160: PUSH
69161: LD_INT 51
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 34
69170: PUSH
69171: LD_INT 32
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 34
69180: PUSH
69181: LD_INT 89
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: PPUSH
69195: CALL_OW 72
69199: ST_TO_ADDR
// end ;
69200: LD_VAR 0 2
69204: RET
// export function Negate ( value ) ; begin
69205: LD_INT 0
69207: PPUSH
// result := not value ;
69208: LD_ADDR_VAR 0 2
69212: PUSH
69213: LD_VAR 0 1
69217: NOT
69218: ST_TO_ADDR
// end ;
69219: LD_VAR 0 2
69223: RET
// export function Inc ( value ) ; begin
69224: LD_INT 0
69226: PPUSH
// result := value + 1 ;
69227: LD_ADDR_VAR 0 2
69231: PUSH
69232: LD_VAR 0 1
69236: PUSH
69237: LD_INT 1
69239: PLUS
69240: ST_TO_ADDR
// end ;
69241: LD_VAR 0 2
69245: RET
// export function Dec ( value ) ; begin
69246: LD_INT 0
69248: PPUSH
// result := value - 1 ;
69249: LD_ADDR_VAR 0 2
69253: PUSH
69254: LD_VAR 0 1
69258: PUSH
69259: LD_INT 1
69261: MINUS
69262: ST_TO_ADDR
// end ;
69263: LD_VAR 0 2
69267: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69268: LD_INT 0
69270: PPUSH
69271: PPUSH
69272: PPUSH
69273: PPUSH
69274: PPUSH
69275: PPUSH
69276: PPUSH
69277: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69278: LD_VAR 0 1
69282: PPUSH
69283: LD_VAR 0 2
69287: PPUSH
69288: CALL_OW 488
69292: NOT
69293: PUSH
69294: LD_VAR 0 3
69298: PPUSH
69299: LD_VAR 0 4
69303: PPUSH
69304: CALL_OW 488
69308: NOT
69309: OR
69310: IFFALSE 69323
// begin result := - 1 ;
69312: LD_ADDR_VAR 0 5
69316: PUSH
69317: LD_INT 1
69319: NEG
69320: ST_TO_ADDR
// exit ;
69321: GO 69558
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69323: LD_ADDR_VAR 0 12
69327: PUSH
69328: LD_VAR 0 1
69332: PPUSH
69333: LD_VAR 0 2
69337: PPUSH
69338: LD_VAR 0 3
69342: PPUSH
69343: LD_VAR 0 4
69347: PPUSH
69348: CALL 68408 0 4
69352: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69353: LD_ADDR_VAR 0 11
69357: PUSH
69358: LD_VAR 0 1
69362: PPUSH
69363: LD_VAR 0 2
69367: PPUSH
69368: LD_VAR 0 12
69372: PUSH
69373: LD_INT 1
69375: ARRAY
69376: PPUSH
69377: LD_VAR 0 12
69381: PUSH
69382: LD_INT 2
69384: ARRAY
69385: PPUSH
69386: CALL_OW 298
69390: ST_TO_ADDR
// distance := 9999 ;
69391: LD_ADDR_VAR 0 10
69395: PUSH
69396: LD_INT 9999
69398: ST_TO_ADDR
// for i := 0 to 5 do
69399: LD_ADDR_VAR 0 6
69403: PUSH
69404: DOUBLE
69405: LD_INT 0
69407: DEC
69408: ST_TO_ADDR
69409: LD_INT 5
69411: PUSH
69412: FOR_TO
69413: IFFALSE 69556
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69415: LD_ADDR_VAR 0 7
69419: PUSH
69420: LD_VAR 0 1
69424: PPUSH
69425: LD_VAR 0 6
69429: PPUSH
69430: LD_VAR 0 11
69434: PPUSH
69435: CALL_OW 272
69439: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69440: LD_ADDR_VAR 0 8
69444: PUSH
69445: LD_VAR 0 2
69449: PPUSH
69450: LD_VAR 0 6
69454: PPUSH
69455: LD_VAR 0 11
69459: PPUSH
69460: CALL_OW 273
69464: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69465: LD_VAR 0 7
69469: PPUSH
69470: LD_VAR 0 8
69474: PPUSH
69475: CALL_OW 488
69479: NOT
69480: IFFALSE 69484
// continue ;
69482: GO 69412
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69484: LD_ADDR_VAR 0 9
69488: PUSH
69489: LD_VAR 0 12
69493: PUSH
69494: LD_INT 1
69496: ARRAY
69497: PPUSH
69498: LD_VAR 0 12
69502: PUSH
69503: LD_INT 2
69505: ARRAY
69506: PPUSH
69507: LD_VAR 0 7
69511: PPUSH
69512: LD_VAR 0 8
69516: PPUSH
69517: CALL_OW 298
69521: ST_TO_ADDR
// if tmp < distance then
69522: LD_VAR 0 9
69526: PUSH
69527: LD_VAR 0 10
69531: LESS
69532: IFFALSE 69554
// begin result := i ;
69534: LD_ADDR_VAR 0 5
69538: PUSH
69539: LD_VAR 0 6
69543: ST_TO_ADDR
// distance := tmp ;
69544: LD_ADDR_VAR 0 10
69548: PUSH
69549: LD_VAR 0 9
69553: ST_TO_ADDR
// end ; end ;
69554: GO 69412
69556: POP
69557: POP
// end ;
69558: LD_VAR 0 5
69562: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69563: LD_INT 0
69565: PPUSH
69566: PPUSH
// if not driver or not IsInUnit ( driver ) then
69567: LD_VAR 0 1
69571: NOT
69572: PUSH
69573: LD_VAR 0 1
69577: PPUSH
69578: CALL_OW 310
69582: NOT
69583: OR
69584: IFFALSE 69588
// exit ;
69586: GO 69678
// vehicle := IsInUnit ( driver ) ;
69588: LD_ADDR_VAR 0 3
69592: PUSH
69593: LD_VAR 0 1
69597: PPUSH
69598: CALL_OW 310
69602: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69603: LD_VAR 0 1
69607: PPUSH
69608: LD_STRING \
69610: PUSH
69611: LD_INT 0
69613: PUSH
69614: LD_INT 0
69616: PUSH
69617: LD_INT 0
69619: PUSH
69620: LD_INT 0
69622: PUSH
69623: LD_INT 0
69625: PUSH
69626: LD_INT 0
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: PUSH
69638: LD_STRING E
69640: PUSH
69641: LD_INT 0
69643: PUSH
69644: LD_INT 0
69646: PUSH
69647: LD_VAR 0 3
69651: PUSH
69652: LD_INT 0
69654: PUSH
69655: LD_INT 0
69657: PUSH
69658: LD_INT 0
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PPUSH
69674: CALL_OW 446
// end ;
69678: LD_VAR 0 2
69682: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69683: LD_INT 0
69685: PPUSH
69686: PPUSH
// if not driver or not IsInUnit ( driver ) then
69687: LD_VAR 0 1
69691: NOT
69692: PUSH
69693: LD_VAR 0 1
69697: PPUSH
69698: CALL_OW 310
69702: NOT
69703: OR
69704: IFFALSE 69708
// exit ;
69706: GO 69798
// vehicle := IsInUnit ( driver ) ;
69708: LD_ADDR_VAR 0 3
69712: PUSH
69713: LD_VAR 0 1
69717: PPUSH
69718: CALL_OW 310
69722: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69723: LD_VAR 0 1
69727: PPUSH
69728: LD_STRING \
69730: PUSH
69731: LD_INT 0
69733: PUSH
69734: LD_INT 0
69736: PUSH
69737: LD_INT 0
69739: PUSH
69740: LD_INT 0
69742: PUSH
69743: LD_INT 0
69745: PUSH
69746: LD_INT 0
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: PUSH
69758: LD_STRING E
69760: PUSH
69761: LD_INT 0
69763: PUSH
69764: LD_INT 0
69766: PUSH
69767: LD_VAR 0 3
69771: PUSH
69772: LD_INT 0
69774: PUSH
69775: LD_INT 0
69777: PUSH
69778: LD_INT 0
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PPUSH
69794: CALL_OW 447
// end ;
69798: LD_VAR 0 2
69802: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69803: LD_INT 0
69805: PPUSH
69806: PPUSH
69807: PPUSH
// tmp := [ ] ;
69808: LD_ADDR_VAR 0 5
69812: PUSH
69813: EMPTY
69814: ST_TO_ADDR
// for i in units do
69815: LD_ADDR_VAR 0 4
69819: PUSH
69820: LD_VAR 0 1
69824: PUSH
69825: FOR_IN
69826: IFFALSE 69864
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69828: LD_ADDR_VAR 0 5
69832: PUSH
69833: LD_VAR 0 5
69837: PPUSH
69838: LD_VAR 0 5
69842: PUSH
69843: LD_INT 1
69845: PLUS
69846: PPUSH
69847: LD_VAR 0 4
69851: PPUSH
69852: CALL_OW 256
69856: PPUSH
69857: CALL_OW 2
69861: ST_TO_ADDR
69862: GO 69825
69864: POP
69865: POP
// if not tmp then
69866: LD_VAR 0 5
69870: NOT
69871: IFFALSE 69875
// exit ;
69873: GO 69923
// if asc then
69875: LD_VAR 0 2
69879: IFFALSE 69903
// result := SortListByListAsc ( units , tmp ) else
69881: LD_ADDR_VAR 0 3
69885: PUSH
69886: LD_VAR 0 1
69890: PPUSH
69891: LD_VAR 0 5
69895: PPUSH
69896: CALL_OW 76
69900: ST_TO_ADDR
69901: GO 69923
// result := SortListByListDesc ( units , tmp ) ;
69903: LD_ADDR_VAR 0 3
69907: PUSH
69908: LD_VAR 0 1
69912: PPUSH
69913: LD_VAR 0 5
69917: PPUSH
69918: CALL_OW 77
69922: ST_TO_ADDR
// end ;
69923: LD_VAR 0 3
69927: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69928: LD_INT 0
69930: PPUSH
69931: PPUSH
// task := GetTaskList ( mech ) ;
69932: LD_ADDR_VAR 0 4
69936: PUSH
69937: LD_VAR 0 1
69941: PPUSH
69942: CALL_OW 437
69946: ST_TO_ADDR
// if not task then
69947: LD_VAR 0 4
69951: NOT
69952: IFFALSE 69956
// exit ;
69954: GO 69998
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69956: LD_ADDR_VAR 0 3
69960: PUSH
69961: LD_VAR 0 4
69965: PUSH
69966: LD_INT 1
69968: ARRAY
69969: PUSH
69970: LD_INT 1
69972: ARRAY
69973: PUSH
69974: LD_STRING r
69976: EQUAL
69977: PUSH
69978: LD_VAR 0 4
69982: PUSH
69983: LD_INT 1
69985: ARRAY
69986: PUSH
69987: LD_INT 4
69989: ARRAY
69990: PUSH
69991: LD_VAR 0 2
69995: EQUAL
69996: AND
69997: ST_TO_ADDR
// end ;
69998: LD_VAR 0 3
70002: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70003: LD_INT 0
70005: PPUSH
// SetDir ( unit , d ) ;
70006: LD_VAR 0 1
70010: PPUSH
70011: LD_VAR 0 4
70015: PPUSH
70016: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70020: LD_VAR 0 1
70024: PPUSH
70025: LD_VAR 0 2
70029: PPUSH
70030: LD_VAR 0 3
70034: PPUSH
70035: LD_VAR 0 5
70039: PPUSH
70040: CALL_OW 48
// end ;
70044: LD_VAR 0 6
70048: RET
// export function ToNaturalNumber ( number ) ; begin
70049: LD_INT 0
70051: PPUSH
// result := number div 1 ;
70052: LD_ADDR_VAR 0 2
70056: PUSH
70057: LD_VAR 0 1
70061: PUSH
70062: LD_INT 1
70064: DIV
70065: ST_TO_ADDR
// if number < 0 then
70066: LD_VAR 0 1
70070: PUSH
70071: LD_INT 0
70073: LESS
70074: IFFALSE 70084
// result := 0 ;
70076: LD_ADDR_VAR 0 2
70080: PUSH
70081: LD_INT 0
70083: ST_TO_ADDR
// end ;
70084: LD_VAR 0 2
70088: RET
// export function SortByClass ( units , class ) ; var un ; begin
70089: LD_INT 0
70091: PPUSH
70092: PPUSH
// if not units or not class then
70093: LD_VAR 0 1
70097: NOT
70098: PUSH
70099: LD_VAR 0 2
70103: NOT
70104: OR
70105: IFFALSE 70109
// exit ;
70107: GO 70204
// result := [ ] ;
70109: LD_ADDR_VAR 0 3
70113: PUSH
70114: EMPTY
70115: ST_TO_ADDR
// for un in units do
70116: LD_ADDR_VAR 0 4
70120: PUSH
70121: LD_VAR 0 1
70125: PUSH
70126: FOR_IN
70127: IFFALSE 70202
// if GetClass ( un ) = class then
70129: LD_VAR 0 4
70133: PPUSH
70134: CALL_OW 257
70138: PUSH
70139: LD_VAR 0 2
70143: EQUAL
70144: IFFALSE 70171
// result := Insert ( result , 1 , un ) else
70146: LD_ADDR_VAR 0 3
70150: PUSH
70151: LD_VAR 0 3
70155: PPUSH
70156: LD_INT 1
70158: PPUSH
70159: LD_VAR 0 4
70163: PPUSH
70164: CALL_OW 2
70168: ST_TO_ADDR
70169: GO 70200
// result := Replace ( result , result + 1 , un ) ;
70171: LD_ADDR_VAR 0 3
70175: PUSH
70176: LD_VAR 0 3
70180: PPUSH
70181: LD_VAR 0 3
70185: PUSH
70186: LD_INT 1
70188: PLUS
70189: PPUSH
70190: LD_VAR 0 4
70194: PPUSH
70195: CALL_OW 1
70199: ST_TO_ADDR
70200: GO 70126
70202: POP
70203: POP
// end ;
70204: LD_VAR 0 3
70208: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70209: LD_INT 0
70211: PPUSH
70212: PPUSH
70213: PPUSH
70214: PPUSH
70215: PPUSH
70216: PPUSH
70217: PPUSH
// result := [ ] ;
70218: LD_ADDR_VAR 0 4
70222: PUSH
70223: EMPTY
70224: ST_TO_ADDR
// if x - r < 0 then
70225: LD_VAR 0 1
70229: PUSH
70230: LD_VAR 0 3
70234: MINUS
70235: PUSH
70236: LD_INT 0
70238: LESS
70239: IFFALSE 70251
// min_x := 0 else
70241: LD_ADDR_VAR 0 8
70245: PUSH
70246: LD_INT 0
70248: ST_TO_ADDR
70249: GO 70267
// min_x := x - r ;
70251: LD_ADDR_VAR 0 8
70255: PUSH
70256: LD_VAR 0 1
70260: PUSH
70261: LD_VAR 0 3
70265: MINUS
70266: ST_TO_ADDR
// if y - r < 0 then
70267: LD_VAR 0 2
70271: PUSH
70272: LD_VAR 0 3
70276: MINUS
70277: PUSH
70278: LD_INT 0
70280: LESS
70281: IFFALSE 70293
// min_y := 0 else
70283: LD_ADDR_VAR 0 7
70287: PUSH
70288: LD_INT 0
70290: ST_TO_ADDR
70291: GO 70309
// min_y := y - r ;
70293: LD_ADDR_VAR 0 7
70297: PUSH
70298: LD_VAR 0 2
70302: PUSH
70303: LD_VAR 0 3
70307: MINUS
70308: ST_TO_ADDR
// max_x := x + r ;
70309: LD_ADDR_VAR 0 9
70313: PUSH
70314: LD_VAR 0 1
70318: PUSH
70319: LD_VAR 0 3
70323: PLUS
70324: ST_TO_ADDR
// max_y := y + r ;
70325: LD_ADDR_VAR 0 10
70329: PUSH
70330: LD_VAR 0 2
70334: PUSH
70335: LD_VAR 0 3
70339: PLUS
70340: ST_TO_ADDR
// for _x = min_x to max_x do
70341: LD_ADDR_VAR 0 5
70345: PUSH
70346: DOUBLE
70347: LD_VAR 0 8
70351: DEC
70352: ST_TO_ADDR
70353: LD_VAR 0 9
70357: PUSH
70358: FOR_TO
70359: IFFALSE 70460
// for _y = min_y to max_y do
70361: LD_ADDR_VAR 0 6
70365: PUSH
70366: DOUBLE
70367: LD_VAR 0 7
70371: DEC
70372: ST_TO_ADDR
70373: LD_VAR 0 10
70377: PUSH
70378: FOR_TO
70379: IFFALSE 70456
// begin if not ValidHex ( _x , _y ) then
70381: LD_VAR 0 5
70385: PPUSH
70386: LD_VAR 0 6
70390: PPUSH
70391: CALL_OW 488
70395: NOT
70396: IFFALSE 70400
// continue ;
70398: GO 70378
// if GetResourceTypeXY ( _x , _y ) then
70400: LD_VAR 0 5
70404: PPUSH
70405: LD_VAR 0 6
70409: PPUSH
70410: CALL_OW 283
70414: IFFALSE 70454
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70416: LD_ADDR_VAR 0 4
70420: PUSH
70421: LD_VAR 0 4
70425: PPUSH
70426: LD_VAR 0 4
70430: PUSH
70431: LD_INT 1
70433: PLUS
70434: PPUSH
70435: LD_VAR 0 5
70439: PUSH
70440: LD_VAR 0 6
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PPUSH
70449: CALL_OW 1
70453: ST_TO_ADDR
// end ;
70454: GO 70378
70456: POP
70457: POP
70458: GO 70358
70460: POP
70461: POP
// end ;
70462: LD_VAR 0 4
70466: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70467: LD_INT 0
70469: PPUSH
70470: PPUSH
70471: PPUSH
70472: PPUSH
70473: PPUSH
70474: PPUSH
70475: PPUSH
70476: PPUSH
// if not units then
70477: LD_VAR 0 1
70481: NOT
70482: IFFALSE 70486
// exit ;
70484: GO 71010
// result := UnitFilter ( units , [ f_ok ] ) ;
70486: LD_ADDR_VAR 0 3
70490: PUSH
70491: LD_VAR 0 1
70495: PPUSH
70496: LD_INT 50
70498: PUSH
70499: EMPTY
70500: LIST
70501: PPUSH
70502: CALL_OW 72
70506: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70507: LD_ADDR_VAR 0 8
70511: PUSH
70512: LD_VAR 0 1
70516: PUSH
70517: LD_INT 1
70519: ARRAY
70520: PPUSH
70521: CALL_OW 255
70525: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70526: LD_ADDR_VAR 0 10
70530: PUSH
70531: LD_INT 29
70533: PUSH
70534: LD_INT 91
70536: PUSH
70537: LD_INT 49
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: LIST
70544: ST_TO_ADDR
// if not result then
70545: LD_VAR 0 3
70549: NOT
70550: IFFALSE 70554
// exit ;
70552: GO 71010
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70554: LD_ADDR_VAR 0 5
70558: PUSH
70559: LD_INT 81
70561: PUSH
70562: LD_VAR 0 8
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PPUSH
70571: CALL_OW 69
70575: ST_TO_ADDR
// for i in result do
70576: LD_ADDR_VAR 0 4
70580: PUSH
70581: LD_VAR 0 3
70585: PUSH
70586: FOR_IN
70587: IFFALSE 71008
// begin tag := GetTag ( i ) + 1 ;
70589: LD_ADDR_VAR 0 9
70593: PUSH
70594: LD_VAR 0 4
70598: PPUSH
70599: CALL_OW 110
70603: PUSH
70604: LD_INT 1
70606: PLUS
70607: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70608: LD_ADDR_VAR 0 7
70612: PUSH
70613: LD_VAR 0 4
70617: PPUSH
70618: CALL_OW 250
70622: PPUSH
70623: LD_VAR 0 4
70627: PPUSH
70628: CALL_OW 251
70632: PPUSH
70633: LD_INT 6
70635: PPUSH
70636: CALL 70209 0 3
70640: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70641: LD_VAR 0 4
70645: PPUSH
70646: CALL_OW 247
70650: PUSH
70651: LD_INT 2
70653: EQUAL
70654: PUSH
70655: LD_VAR 0 7
70659: AND
70660: PUSH
70661: LD_VAR 0 4
70665: PPUSH
70666: CALL_OW 264
70670: PUSH
70671: LD_VAR 0 10
70675: IN
70676: NOT
70677: AND
70678: IFFALSE 70717
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70680: LD_VAR 0 4
70684: PPUSH
70685: LD_VAR 0 7
70689: PUSH
70690: LD_INT 1
70692: ARRAY
70693: PUSH
70694: LD_INT 1
70696: ARRAY
70697: PPUSH
70698: LD_VAR 0 7
70702: PUSH
70703: LD_INT 1
70705: ARRAY
70706: PUSH
70707: LD_INT 2
70709: ARRAY
70710: PPUSH
70711: CALL_OW 116
70715: GO 71006
// if path > tag then
70717: LD_VAR 0 2
70721: PUSH
70722: LD_VAR 0 9
70726: GREATER
70727: IFFALSE 70935
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70729: LD_ADDR_VAR 0 6
70733: PUSH
70734: LD_VAR 0 5
70738: PPUSH
70739: LD_INT 91
70741: PUSH
70742: LD_VAR 0 4
70746: PUSH
70747: LD_INT 8
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: LIST
70754: PPUSH
70755: CALL_OW 72
70759: ST_TO_ADDR
// if nearEnemy then
70760: LD_VAR 0 6
70764: IFFALSE 70833
// begin if GetWeapon ( i ) = ru_time_lapser then
70766: LD_VAR 0 4
70770: PPUSH
70771: CALL_OW 264
70775: PUSH
70776: LD_INT 49
70778: EQUAL
70779: IFFALSE 70807
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70781: LD_VAR 0 4
70785: PPUSH
70786: LD_VAR 0 6
70790: PPUSH
70791: LD_VAR 0 4
70795: PPUSH
70796: CALL_OW 74
70800: PPUSH
70801: CALL_OW 112
70805: GO 70831
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70807: LD_VAR 0 4
70811: PPUSH
70812: LD_VAR 0 6
70816: PPUSH
70817: LD_VAR 0 4
70821: PPUSH
70822: CALL_OW 74
70826: PPUSH
70827: CALL_OW 115
// end else
70831: GO 70933
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70833: LD_VAR 0 4
70837: PPUSH
70838: LD_VAR 0 2
70842: PUSH
70843: LD_VAR 0 9
70847: ARRAY
70848: PUSH
70849: LD_INT 1
70851: ARRAY
70852: PPUSH
70853: LD_VAR 0 2
70857: PUSH
70858: LD_VAR 0 9
70862: ARRAY
70863: PUSH
70864: LD_INT 2
70866: ARRAY
70867: PPUSH
70868: CALL_OW 297
70872: PUSH
70873: LD_INT 6
70875: GREATER
70876: IFFALSE 70919
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70878: LD_VAR 0 4
70882: PPUSH
70883: LD_VAR 0 2
70887: PUSH
70888: LD_VAR 0 9
70892: ARRAY
70893: PUSH
70894: LD_INT 1
70896: ARRAY
70897: PPUSH
70898: LD_VAR 0 2
70902: PUSH
70903: LD_VAR 0 9
70907: ARRAY
70908: PUSH
70909: LD_INT 2
70911: ARRAY
70912: PPUSH
70913: CALL_OW 114
70917: GO 70933
// SetTag ( i , tag ) ;
70919: LD_VAR 0 4
70923: PPUSH
70924: LD_VAR 0 9
70928: PPUSH
70929: CALL_OW 109
// end else
70933: GO 71006
// if enemy then
70935: LD_VAR 0 5
70939: IFFALSE 71006
// begin if GetWeapon ( i ) = ru_time_lapser then
70941: LD_VAR 0 4
70945: PPUSH
70946: CALL_OW 264
70950: PUSH
70951: LD_INT 49
70953: EQUAL
70954: IFFALSE 70982
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70956: LD_VAR 0 4
70960: PPUSH
70961: LD_VAR 0 5
70965: PPUSH
70966: LD_VAR 0 4
70970: PPUSH
70971: CALL_OW 74
70975: PPUSH
70976: CALL_OW 112
70980: GO 71006
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70982: LD_VAR 0 4
70986: PPUSH
70987: LD_VAR 0 5
70991: PPUSH
70992: LD_VAR 0 4
70996: PPUSH
70997: CALL_OW 74
71001: PPUSH
71002: CALL_OW 115
// end ; end ;
71006: GO 70586
71008: POP
71009: POP
// end ;
71010: LD_VAR 0 3
71014: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71015: LD_INT 0
71017: PPUSH
71018: PPUSH
71019: PPUSH
// if not unit or IsInUnit ( unit ) then
71020: LD_VAR 0 1
71024: NOT
71025: PUSH
71026: LD_VAR 0 1
71030: PPUSH
71031: CALL_OW 310
71035: OR
71036: IFFALSE 71040
// exit ;
71038: GO 71131
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71040: LD_ADDR_VAR 0 4
71044: PUSH
71045: LD_VAR 0 1
71049: PPUSH
71050: CALL_OW 250
71054: PPUSH
71055: LD_VAR 0 2
71059: PPUSH
71060: LD_INT 1
71062: PPUSH
71063: CALL_OW 272
71067: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71068: LD_ADDR_VAR 0 5
71072: PUSH
71073: LD_VAR 0 1
71077: PPUSH
71078: CALL_OW 251
71082: PPUSH
71083: LD_VAR 0 2
71087: PPUSH
71088: LD_INT 1
71090: PPUSH
71091: CALL_OW 273
71095: ST_TO_ADDR
// if ValidHex ( x , y ) then
71096: LD_VAR 0 4
71100: PPUSH
71101: LD_VAR 0 5
71105: PPUSH
71106: CALL_OW 488
71110: IFFALSE 71131
// ComTurnXY ( unit , x , y ) ;
71112: LD_VAR 0 1
71116: PPUSH
71117: LD_VAR 0 4
71121: PPUSH
71122: LD_VAR 0 5
71126: PPUSH
71127: CALL_OW 118
// end ;
71131: LD_VAR 0 3
71135: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71136: LD_INT 0
71138: PPUSH
71139: PPUSH
// result := false ;
71140: LD_ADDR_VAR 0 3
71144: PUSH
71145: LD_INT 0
71147: ST_TO_ADDR
// if not units then
71148: LD_VAR 0 2
71152: NOT
71153: IFFALSE 71157
// exit ;
71155: GO 71202
// for i in units do
71157: LD_ADDR_VAR 0 4
71161: PUSH
71162: LD_VAR 0 2
71166: PUSH
71167: FOR_IN
71168: IFFALSE 71200
// if See ( side , i ) then
71170: LD_VAR 0 1
71174: PPUSH
71175: LD_VAR 0 4
71179: PPUSH
71180: CALL_OW 292
71184: IFFALSE 71198
// begin result := true ;
71186: LD_ADDR_VAR 0 3
71190: PUSH
71191: LD_INT 1
71193: ST_TO_ADDR
// exit ;
71194: POP
71195: POP
71196: GO 71202
// end ;
71198: GO 71167
71200: POP
71201: POP
// end ;
71202: LD_VAR 0 3
71206: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71207: LD_INT 0
71209: PPUSH
71210: PPUSH
71211: PPUSH
71212: PPUSH
// if not unit or not points then
71213: LD_VAR 0 1
71217: NOT
71218: PUSH
71219: LD_VAR 0 2
71223: NOT
71224: OR
71225: IFFALSE 71229
// exit ;
71227: GO 71319
// dist := 99999 ;
71229: LD_ADDR_VAR 0 5
71233: PUSH
71234: LD_INT 99999
71236: ST_TO_ADDR
// for i in points do
71237: LD_ADDR_VAR 0 4
71241: PUSH
71242: LD_VAR 0 2
71246: PUSH
71247: FOR_IN
71248: IFFALSE 71317
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71250: LD_ADDR_VAR 0 6
71254: PUSH
71255: LD_VAR 0 1
71259: PPUSH
71260: LD_VAR 0 4
71264: PUSH
71265: LD_INT 1
71267: ARRAY
71268: PPUSH
71269: LD_VAR 0 4
71273: PUSH
71274: LD_INT 2
71276: ARRAY
71277: PPUSH
71278: CALL_OW 297
71282: ST_TO_ADDR
// if tmpDist < dist then
71283: LD_VAR 0 6
71287: PUSH
71288: LD_VAR 0 5
71292: LESS
71293: IFFALSE 71315
// begin result := i ;
71295: LD_ADDR_VAR 0 3
71299: PUSH
71300: LD_VAR 0 4
71304: ST_TO_ADDR
// dist := tmpDist ;
71305: LD_ADDR_VAR 0 5
71309: PUSH
71310: LD_VAR 0 6
71314: ST_TO_ADDR
// end ; end ;
71315: GO 71247
71317: POP
71318: POP
// end ;
71319: LD_VAR 0 3
71323: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71324: LD_INT 0
71326: PPUSH
// uc_side := side ;
71327: LD_ADDR_OWVAR 20
71331: PUSH
71332: LD_VAR 0 1
71336: ST_TO_ADDR
// uc_nation := 3 ;
71337: LD_ADDR_OWVAR 21
71341: PUSH
71342: LD_INT 3
71344: ST_TO_ADDR
// vc_chassis := 25 ;
71345: LD_ADDR_OWVAR 37
71349: PUSH
71350: LD_INT 25
71352: ST_TO_ADDR
// vc_engine := engine_siberite ;
71353: LD_ADDR_OWVAR 39
71357: PUSH
71358: LD_INT 3
71360: ST_TO_ADDR
// vc_control := control_computer ;
71361: LD_ADDR_OWVAR 38
71365: PUSH
71366: LD_INT 3
71368: ST_TO_ADDR
// vc_weapon := 59 ;
71369: LD_ADDR_OWVAR 40
71373: PUSH
71374: LD_INT 59
71376: ST_TO_ADDR
// result := CreateVehicle ;
71377: LD_ADDR_VAR 0 5
71381: PUSH
71382: CALL_OW 45
71386: ST_TO_ADDR
// SetDir ( result , d ) ;
71387: LD_VAR 0 5
71391: PPUSH
71392: LD_VAR 0 4
71396: PPUSH
71397: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71401: LD_VAR 0 5
71405: PPUSH
71406: LD_VAR 0 2
71410: PPUSH
71411: LD_VAR 0 3
71415: PPUSH
71416: LD_INT 0
71418: PPUSH
71419: CALL_OW 48
// end ;
71423: LD_VAR 0 5
71427: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71428: LD_INT 0
71430: PPUSH
71431: PPUSH
71432: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71433: LD_ADDR_VAR 0 2
71437: PUSH
71438: LD_INT 0
71440: PUSH
71441: LD_INT 0
71443: PUSH
71444: LD_INT 0
71446: PUSH
71447: LD_INT 0
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71456: LD_VAR 0 1
71460: NOT
71461: PUSH
71462: LD_VAR 0 1
71466: PPUSH
71467: CALL_OW 264
71471: PUSH
71472: LD_INT 12
71474: PUSH
71475: LD_INT 51
71477: PUSH
71478: LD_INT 32
71480: PUSH
71481: LD_INT 89
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: IN
71490: NOT
71491: OR
71492: IFFALSE 71496
// exit ;
71494: GO 71594
// for i := 1 to 3 do
71496: LD_ADDR_VAR 0 3
71500: PUSH
71501: DOUBLE
71502: LD_INT 1
71504: DEC
71505: ST_TO_ADDR
71506: LD_INT 3
71508: PUSH
71509: FOR_TO
71510: IFFALSE 71592
// begin tmp := GetCargo ( cargo , i ) ;
71512: LD_ADDR_VAR 0 4
71516: PUSH
71517: LD_VAR 0 1
71521: PPUSH
71522: LD_VAR 0 3
71526: PPUSH
71527: CALL_OW 289
71531: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71532: LD_ADDR_VAR 0 2
71536: PUSH
71537: LD_VAR 0 2
71541: PPUSH
71542: LD_VAR 0 3
71546: PPUSH
71547: LD_VAR 0 4
71551: PPUSH
71552: CALL_OW 1
71556: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71557: LD_ADDR_VAR 0 2
71561: PUSH
71562: LD_VAR 0 2
71566: PPUSH
71567: LD_INT 4
71569: PPUSH
71570: LD_VAR 0 2
71574: PUSH
71575: LD_INT 4
71577: ARRAY
71578: PUSH
71579: LD_VAR 0 4
71583: PLUS
71584: PPUSH
71585: CALL_OW 1
71589: ST_TO_ADDR
// end ;
71590: GO 71509
71592: POP
71593: POP
// end ;
71594: LD_VAR 0 2
71598: RET
// export function Length ( array ) ; begin
71599: LD_INT 0
71601: PPUSH
// result := array + 0 ;
71602: LD_ADDR_VAR 0 2
71606: PUSH
71607: LD_VAR 0 1
71611: PUSH
71612: LD_INT 0
71614: PLUS
71615: ST_TO_ADDR
// end ;
71616: LD_VAR 0 2
71620: RET
// export function PrepareArray ( array ) ; begin
71621: LD_INT 0
71623: PPUSH
// result := array diff 0 ;
71624: LD_ADDR_VAR 0 2
71628: PUSH
71629: LD_VAR 0 1
71633: PUSH
71634: LD_INT 0
71636: DIFF
71637: ST_TO_ADDR
// if not result [ 1 ] then
71638: LD_VAR 0 2
71642: PUSH
71643: LD_INT 1
71645: ARRAY
71646: NOT
71647: IFFALSE 71667
// result := Delete ( result , 1 ) ;
71649: LD_ADDR_VAR 0 2
71653: PUSH
71654: LD_VAR 0 2
71658: PPUSH
71659: LD_INT 1
71661: PPUSH
71662: CALL_OW 3
71666: ST_TO_ADDR
// end ;
71667: LD_VAR 0 2
71671: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71672: LD_INT 0
71674: PPUSH
71675: PPUSH
71676: PPUSH
71677: PPUSH
// sibRocketRange := 25 ;
71678: LD_ADDR_VAR 0 6
71682: PUSH
71683: LD_INT 25
71685: ST_TO_ADDR
// result := false ;
71686: LD_ADDR_VAR 0 4
71690: PUSH
71691: LD_INT 0
71693: ST_TO_ADDR
// for i := 0 to 5 do
71694: LD_ADDR_VAR 0 5
71698: PUSH
71699: DOUBLE
71700: LD_INT 0
71702: DEC
71703: ST_TO_ADDR
71704: LD_INT 5
71706: PUSH
71707: FOR_TO
71708: IFFALSE 71775
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71710: LD_VAR 0 1
71714: PPUSH
71715: LD_VAR 0 5
71719: PPUSH
71720: LD_VAR 0 6
71724: PPUSH
71725: CALL_OW 272
71729: PPUSH
71730: LD_VAR 0 2
71734: PPUSH
71735: LD_VAR 0 5
71739: PPUSH
71740: LD_VAR 0 6
71744: PPUSH
71745: CALL_OW 273
71749: PPUSH
71750: LD_VAR 0 3
71754: PPUSH
71755: CALL_OW 309
71759: IFFALSE 71773
// begin result := true ;
71761: LD_ADDR_VAR 0 4
71765: PUSH
71766: LD_INT 1
71768: ST_TO_ADDR
// exit ;
71769: POP
71770: POP
71771: GO 71777
// end ;
71773: GO 71707
71775: POP
71776: POP
// end ;
71777: LD_VAR 0 4
71781: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71782: LD_INT 0
71784: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71785: LD_VAR 0 1
71789: PPUSH
71790: LD_VAR 0 2
71794: PPUSH
71795: LD_INT 0
71797: PPUSH
71798: LD_INT 0
71800: PPUSH
71801: LD_INT 1
71803: PPUSH
71804: LD_INT 0
71806: PPUSH
71807: CALL_OW 587
// end ; end_of_file
71811: LD_VAR 0 3
71815: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71816: LD_VAR 0 1
71820: PPUSH
71821: LD_VAR 0 2
71825: PPUSH
71826: LD_VAR 0 3
71830: PPUSH
71831: LD_VAR 0 4
71835: PPUSH
71836: LD_VAR 0 5
71840: PPUSH
71841: LD_VAR 0 6
71845: PPUSH
71846: CALL 10272 0 6
// end ;
71850: PPOPN 6
71852: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71853: LD_INT 0
71855: PPUSH
// begin if not units then
71856: LD_VAR 0 1
71860: NOT
71861: IFFALSE 71865
// exit ;
71863: GO 71865
// end ;
71865: PPOPN 7
71867: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71868: CALL 10166 0 0
// end ;
71872: PPOPN 1
71874: END
